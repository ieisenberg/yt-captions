[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "okay it's 11 40. i guess we get started i spare you the usual intro of how sad it is we can't be",
    "start": "2399",
    "end": "8800"
  },
  {
    "text": "in oslo right now it is very sad especially since we all can't go to the dubliner tonight",
    "start": "8800",
    "end": "15120"
  },
  {
    "text": "so you know um so let's just do this um from the same chair that i'm sitting in now for the last 12 weeks you know i got",
    "start": "15120",
    "end": "22080"
  },
  {
    "text": "older longer hair glasses all that but um very exciting topic for today right",
    "start": "22080",
    "end": "30000"
  },
  {
    "text": "it's about openly connecting all of them security best practices and",
    "start": "30000",
    "end": "35120"
  },
  {
    "text": "um before we start with that uh just um one thing i will upload those slides",
    "start": "35120",
    "end": "40960"
  },
  {
    "text": "directly after my talk i didn't have the time to do it before that's what i normally do i i will upload them and you see that",
    "start": "40960",
    "end": "47280"
  },
  {
    "text": "basically it's going to speak attack.com lease privilege that's um where i upload",
    "start": "47280",
    "end": "52800"
  },
  {
    "text": "all my slides so maybe the archives are interesting as well but i will upload this particular slide",
    "start": "52800",
    "end": "58000"
  },
  {
    "text": "deck right after my talk okay good enough about me uh why are we here",
    "start": "58000",
    "end": "65840"
  },
  {
    "start": "65000",
    "end": "65000"
  },
  {
    "text": "so i've been actually working for the last two or three years where um for the",
    "start": "65840",
    "end": "71840"
  },
  {
    "text": "norwegian government basically to introduce um over and over the connect into the",
    "start": "71840",
    "end": "77040"
  },
  {
    "text": "health uh system so they're you know getting rid of an old system decided to go for token-based security",
    "start": "77040",
    "end": "83920"
  },
  {
    "text": "and for over openly connect and for identity server which is nice um so but as you can imagine especially",
    "start": "83920",
    "end": "90880"
  },
  {
    "text": "in healthcare um there are so many laws and special regulations and rules and so on that",
    "start": "90880",
    "end": "96240"
  },
  {
    "text": "the the plane oauth as it is in rfc 6749 yeah is it's not enough you need you",
    "start": "96240",
    "end": "104079"
  },
  {
    "text": "need a more secure profile of these protocols to tailor you know to",
    "start": "104079",
    "end": "109600"
  },
  {
    "text": "cater for for these industries and um so we've been working on this um",
    "start": "109600",
    "end": "114720"
  },
  {
    "text": "profile um actually another industry which has similar needs the the banking industry is working on a",
    "start": "114720",
    "end": "120799"
  },
  {
    "text": "similar thing called sapi for financial apis and we in the health system uh are working on happy which is for you",
    "start": "120799",
    "end": "128160"
  },
  {
    "text": "know health apis um and it turns out that uh something very similar in parallel happens in the",
    "start": "128160",
    "end": "134640"
  },
  {
    "text": "states for uh you know like government and enterprise of two profiles so um",
    "start": "134640",
    "end": "142530"
  },
  {
    "text": "[Music] basically what this this talk is is an excerpt of a trait of training",
    "start": "142530",
    "end": "149680"
  },
  {
    "text": "material i've been creating for the last six months or so which",
    "start": "149680",
    "end": "155440"
  },
  {
    "text": "talks about basically security best practices in auros and um and this new thing called over",
    "start": "155440",
    "end": "162640"
  },
  {
    "text": "2.1 which we'll talk about at the end and then the second talk which is later today i think at",
    "start": "162640",
    "end": "169360"
  },
  {
    "text": "three o'clock uh is think of it as a as a um as the part two of this talk",
    "start": "169360",
    "end": "175200"
  },
  {
    "text": "where we talk about um new specs that are either partially done",
    "start": "175200",
    "end": "182319"
  },
  {
    "text": "or already released that help you improve the security of an existing",
    "start": "182319",
    "end": "187680"
  },
  {
    "text": "oauth deployment so these are all the topics and they are from from this new training i just um",
    "start": "187680",
    "end": "193599"
  },
  {
    "text": "launched a couple of weeks ago and that's way too much material so i will you know pick pick for this",
    "start": "193599",
    "end": "199200"
  },
  {
    "text": "talk and for the next talk just the things that i think you know are the ones that you must hear about okay um",
    "start": "199200",
    "end": "207200"
  },
  {
    "text": "one word of caution right if you're gonna start learning more about this you will ultimately",
    "start": "207200",
    "end": "212480"
  },
  {
    "text": "deal with documents that look like this right um it's uh you know the fun stops here",
    "start": "212480",
    "end": "218640"
  },
  {
    "text": "right it's a career fund um uh you get um uh you know this funny funny ascii art",
    "start": "218640",
    "end": "227920"
  },
  {
    "text": "um for example um things like this right um and you know",
    "start": "227920",
    "end": "234159"
  },
  {
    "text": "um even clicking this pdf link will not make you happier if you don't like",
    "start": "234159",
    "end": "239280"
  },
  {
    "text": "that format because because it looks exactly the same um as as the website",
    "start": "239280",
    "end": "245920"
  },
  {
    "text": "right um but you know actually it turns out for the newer specs they now have nicely formatted",
    "start": "245920",
    "end": "252640"
  },
  {
    "text": "html versions of that um so if that is easier on your eye totally fine",
    "start": "252640",
    "end": "258320"
  },
  {
    "text": "but you know one of the reasons why this is the way it is is basically because you know you can read it with any",
    "start": "258320",
    "end": "263759"
  },
  {
    "text": "browser so you know if you just use the the very first browser ever created right",
    "start": "263759",
    "end": "270560"
  },
  {
    "text": "you can basically",
    "start": "270560",
    "end": "274479"
  },
  {
    "text": "basically um you're saying you're seeing only powerpoint is that correct and no",
    "start": "281440",
    "end": "288160"
  },
  {
    "text": "no console window oh okay well then let's go back to powerpoint anyways",
    "start": "288160",
    "end": "295520"
  },
  {
    "text": "um not so important um we only need powerpoint for the rest of the talk um but yeah so my point is um",
    "start": "295520",
    "end": "303199"
  },
  {
    "text": "okay you see the console well man you totally derailed my train of",
    "start": "303199",
    "end": "308960"
  },
  {
    "text": "thought now okay uh forget the console um",
    "start": "308960",
    "end": "314160"
  },
  {
    "text": "anyways we go back to powerpoint so um anyways my point was um this talk",
    "start": "314160",
    "end": "320560"
  },
  {
    "text": "we'll talk about the first at the other half which is about um common attacks common counter measures you know security best practices and so",
    "start": "320560",
    "end": "327120"
  },
  {
    "text": "on and then the second talk will pick out some of the topics from the you know when you go beyond the",
    "start": "327120",
    "end": "332560"
  },
  {
    "text": "oh of 2012 once back but let's give you some context first",
    "start": "332560",
    "end": "338160"
  },
  {
    "start": "336000",
    "end": "336000"
  },
  {
    "text": "um so when we look at the timeline how things are happened and why they happened you know like",
    "start": "338160",
    "end": "343520"
  },
  {
    "text": "we go all the way back to 2005 where basically that was the birth if you want of",
    "start": "343520",
    "end": "350880"
  },
  {
    "text": "web-based authentication right like the the fundamental pattern that you're authenticating a user you're",
    "start": "350880",
    "end": "357039"
  },
  {
    "text": "sending the browser to some place and that some place calls you back with something like tokens",
    "start": "357039",
    "end": "362960"
  },
  {
    "text": "that is all being you know it goes back to the demo 2p protocol and then ws federation protocol and ws trust for",
    "start": "362960",
    "end": "369440"
  },
  {
    "text": "more like um um for more like um",
    "start": "369440",
    "end": "374479"
  },
  {
    "text": "um you know web service style communication um that was very enterprising you know",
    "start": "374479",
    "end": "379919"
  },
  {
    "text": "xml and so on and uh shortly after the the consumer space discovered the need for",
    "start": "379919",
    "end": "386160"
  },
  {
    "text": "token-based protocols as well right i mean fundamentally just this was the time um where you know like uh you",
    "start": "386160",
    "end": "394639"
  },
  {
    "text": "you've suddenly had new scenarios where a third party wants to access your gmail account but how do you do that without",
    "start": "394639",
    "end": "401120"
  },
  {
    "text": "exposing your google password to the third party so they came up with this thing called over 1.0 which you know is basically a talk",
    "start": "401120",
    "end": "409039"
  },
  {
    "text": "uh a protocol for requesting access tokens to access resources where on behalf of um",
    "start": "409039",
    "end": "416400"
  },
  {
    "text": "uh a human being typically um over 1.0 became uh very very",
    "start": "416400",
    "end": "423680"
  },
  {
    "text": "uh popular and um a couple of years later you know like all the big companies jumped on it you know like",
    "start": "423680",
    "end": "429680"
  },
  {
    "text": "microsoft and you know like all the enterprise people that before that were rather in",
    "start": "429680",
    "end": "435120"
  },
  {
    "text": "the saml and w star space then i wanted to shape the future of oauth and",
    "start": "435120",
    "end": "441199"
  },
  {
    "text": "that ultimately became over 2.0 and one of the themes in over 2.0 was like",
    "start": "441199",
    "end": "447039"
  },
  {
    "text": "simplifying the protocol because of 1.0 had a lot of crypto going on",
    "start": "447039",
    "end": "452639"
  },
  {
    "text": "um and they simplified it to a point where people were unhappy about the security",
    "start": "452639",
    "end": "459120"
  },
  {
    "text": "that got lost along the way um so for example the thing called bearer tokens um was a",
    "start": "459120",
    "end": "466000"
  },
  {
    "text": "new thing in oauth 2.0 that didn't exist before and is arguably",
    "start": "466000",
    "end": "471360"
  },
  {
    "text": "less secure than the proof of possession tokens they had before and maybe you heard about the history um",
    "start": "471360",
    "end": "478479"
  },
  {
    "text": "and um and um that the spec author left the you know",
    "start": "478479",
    "end": "484400"
  },
  {
    "text": "left the itf uh like with a big bang and made this final talk about olaf and if you're",
    "start": "484400",
    "end": "489840"
  },
  {
    "text": "interested in seeing that talk and why he left just search for the word you know your favorite swear word",
    "start": "489840",
    "end": "496000"
  },
  {
    "text": "o off okay you probably find it um anyways um part of the legacy of this",
    "start": "496000",
    "end": "504879"
  },
  {
    "text": "spec offer was that he demanded that there was you know like a the um that the token",
    "start": "504879",
    "end": "511680"
  },
  {
    "text": "usage should be specified separately so that shortly after we could come up with a",
    "start": "511680",
    "end": "517279"
  },
  {
    "text": "proof possession style of token usage never happened until just recently and we'll talk about",
    "start": "517279",
    "end": "522560"
  },
  {
    "text": "this in the next talk um but also",
    "start": "522560",
    "end": "527600"
  },
  {
    "text": "the other thing was that they created the threat model for oauth because the problem is that o of 2.0 has so many",
    "start": "527600",
    "end": "535600"
  },
  {
    "text": "variations and uh you can even if you follow the spec do an insecure implementation of it",
    "start": "535600",
    "end": "541760"
  },
  {
    "text": "because it gives you so much room for interpretation or variation i guess",
    "start": "541760",
    "end": "547920"
  },
  {
    "text": "yeah so they created this threat model right from the start and made sure that this got published at",
    "start": "547920",
    "end": "554160"
  },
  {
    "text": "the same time as the protocol itself but the threat model to be honest is it is a bit theoretic because",
    "start": "554160",
    "end": "560800"
  },
  {
    "text": "a it was created before we learned really how people will use obor in the",
    "start": "560800",
    "end": "567040"
  },
  {
    "text": "future um and you know since we didn't have the real world use cases it was rather you know as i said a bit theoretically",
    "start": "567040",
    "end": "575040"
  },
  {
    "text": "looking at the various uh threats and risks and countermeasures and so on and so forth",
    "start": "575040",
    "end": "581200"
  },
  {
    "text": "um so in other words it it is interesting for security professionals but not very",
    "start": "581200",
    "end": "586880"
  },
  {
    "text": "actionable for a developer for example because there are no there's no concrete guidance in there yeah anyways um lots of things have",
    "start": "586880",
    "end": "594720"
  },
  {
    "text": "happened many protocols have been built on top of the oauth 2.0 specification it became more popular right and um",
    "start": "594720",
    "end": "602800"
  },
  {
    "text": "at some point people said like well we also see security problems with with over",
    "start": "602800",
    "end": "607839"
  },
  {
    "text": "we we need more guidance yeah and uh the very first guidance document was published in 2017",
    "start": "607839",
    "end": "614640"
  },
  {
    "text": "it's called over 204 native applications and it's what they call a bcp a best current",
    "start": "614640",
    "end": "621279"
  },
  {
    "text": "practice right and it's um it's good that the word current is in there because the older the document gets the",
    "start": "621279",
    "end": "626560"
  },
  {
    "text": "less current the guidance is of course but this is pretty still pretty good and it gives you concrete",
    "start": "626560",
    "end": "632320"
  },
  {
    "text": "guidance about like if you're writing an android app do this if you're writing an ios app do that if you're writing a",
    "start": "632320",
    "end": "637360"
  },
  {
    "text": "windows desktop app you know do that um so",
    "start": "637360",
    "end": "642959"
  },
  {
    "text": "basically the idea was let's let's give people developers implementers more actionable guidance",
    "start": "642959",
    "end": "650000"
  },
  {
    "text": "to secure their oauth installation so and then more pcps have followed",
    "start": "650000",
    "end": "656640"
  },
  {
    "text": "there's one which got published last year which is called the json web token bcp which talks about how to securely use",
    "start": "656640",
    "end": "662880"
  },
  {
    "text": "json web tokens um and if you see that picture that's five years after json web tokens got specified yeah",
    "start": "662880",
    "end": "670320"
  },
  {
    "text": "and a couple of um new ones will be published this year",
    "start": "670320",
    "end": "675519"
  },
  {
    "text": "um the most important being the security topics bcp which is which is basically think of it as the",
    "start": "675519",
    "end": "681120"
  },
  {
    "text": "the version two of the thread model but this time much more practical and there's one",
    "start": "681120",
    "end": "686959"
  },
  {
    "text": "which many people have been waiting for is the browser-based um um bcp okay",
    "start": "686959",
    "end": "693040"
  },
  {
    "text": "and you know in the future soonish there will be over 2.1 and we'll talk",
    "start": "693040",
    "end": "698399"
  },
  {
    "text": "about what this is and then in the more distant future there is something currently codenamed over 3.0 um",
    "start": "698399",
    "end": "706880"
  },
  {
    "text": "which is you know which will still take some time okay so what this talk is about",
    "start": "706880",
    "end": "712320"
  },
  {
    "start": "711000",
    "end": "711000"
  },
  {
    "text": "basically give you an overview of the most relevant things of the documents you're seeing here and as i said um you probably you",
    "start": "712320",
    "end": "719360"
  },
  {
    "text": "probably need um need more time and and follow these urls and have a better read because as i said i",
    "start": "719360",
    "end": "726399"
  },
  {
    "text": "can only give you an overview in 60 minutes and it you know there's much more to to reading",
    "start": "726399",
    "end": "734240"
  },
  {
    "text": "okay so just a big picture right so um um a token-based system pretty much looks",
    "start": "734240",
    "end": "740399"
  },
  {
    "start": "736000",
    "end": "736000"
  },
  {
    "text": "like this right so we have front-ends you have back-ends and you have back-ends for back-ends and you have different call",
    "start": "740399",
    "end": "746800"
  },
  {
    "text": "patterns and different client types and you know you want authentication and you want api",
    "start": "746800",
    "end": "752000"
  },
  {
    "text": "access and you want single sign-on and you want delegation of identity to back-end services",
    "start": "752000",
    "end": "757600"
  },
  {
    "text": "uh you know all the things right and the security token service is the abstract",
    "start": "757600",
    "end": "763120"
  },
  {
    "text": "thing that that is like the traffic cop in between",
    "start": "763120",
    "end": "768320"
  },
  {
    "text": "that issues the tokens um and that's where you implement openly connected so to simplify this a little bit yeah it",
    "start": "768320",
    "end": "774639"
  },
  {
    "text": "basically always looks like this you have um a human being",
    "start": "774639",
    "end": "779920"
  },
  {
    "start": "775000",
    "end": "775000"
  },
  {
    "text": "maybe um but you definitely have a client a client it is a piece of software that wants to access",
    "start": "779920",
    "end": "784959"
  },
  {
    "text": "a resource yeah which for all practical purposes typically is um an api um the client cannot access",
    "start": "784959",
    "end": "792240"
  },
  {
    "text": "that resource directly it first needs to go to the authorization server and ask for permission if you like and",
    "start": "792240",
    "end": "797440"
  },
  {
    "text": "that gives them a token and with that token they can access the resource server and we basically have",
    "start": "797440",
    "end": "802880"
  },
  {
    "text": "two types of clients one other more like the machine to machine style clients where no human being is present and the",
    "start": "802880",
    "end": "810880"
  },
  {
    "text": "the other part would be the interactive clients like a web application or something like",
    "start": "810880",
    "end": "816560"
  },
  {
    "text": "this a native app where a human being is present and authorizes that line to access those resources on this behalf",
    "start": "816560",
    "end": "822480"
  },
  {
    "text": "yeah so if we wanna look at the security properties or rather the risks of such a",
    "start": "822480",
    "end": "828639"
  },
  {
    "text": "system right we have to look at the attack model and see like what are the attackers that potentially you know",
    "start": "828639",
    "end": "835519"
  },
  {
    "text": "would attack this system so um i've i found the cheesiest",
    "start": "835519",
    "end": "840880"
  },
  {
    "start": "837000",
    "end": "837000"
  },
  {
    "text": "possibly cheesiest um symbol for and for an attacker for a hacker right so excuse",
    "start": "840880",
    "end": "846240"
  },
  {
    "text": "me um but um the first type of attack is",
    "start": "846240",
    "end": "851279"
  },
  {
    "text": "basically we say when an attacker can read or write unprotected network traffic",
    "start": "851279",
    "end": "857760"
  },
  {
    "text": "man and that that's an easy fix for that right you have to use tls for everything",
    "start": "857760",
    "end": "863760"
  },
  {
    "text": "the specs are not always clear um but um it's pretty much you know a known",
    "start": "863760",
    "end": "869519"
  },
  {
    "text": "thing that you have to use tls for every single network indirection if then an attacker can still access",
    "start": "869519",
    "end": "876320"
  },
  {
    "text": "network traffic well then your tls infrastructure is compromised or even worse maybe your dns is",
    "start": "876320",
    "end": "881440"
  },
  {
    "text": "compromised and that is a serious problem that network people need to fix but nothing that we as developers",
    "start": "881440",
    "end": "887600"
  },
  {
    "text": "can do so that's not our our our problem basically the other um the other",
    "start": "887600",
    "end": "894480"
  },
  {
    "text": "uh attack that is not strictly speaking the the problem of the oauth or openly connect",
    "start": "894480",
    "end": "899839"
  },
  {
    "text": "implementation is if an endpoint gets compromised and with that we mean unrelated to oauth or",
    "start": "899839",
    "end": "906480"
  },
  {
    "text": "open id connect yeah maybe on the server there is i don't know like a um",
    "start": "906480",
    "end": "912240"
  },
  {
    "text": "a telnet endpoint which is unsecured or uh a cross-scripting attack or a sql",
    "start": "912240",
    "end": "918240"
  },
  {
    "text": "injection attack something like this that is you know not related to the over end points but",
    "start": "918240",
    "end": "923279"
  },
  {
    "text": "still allows an attacker to take control over remain yeah again um not our concern",
    "start": "923279",
    "end": "929440"
  },
  {
    "text": "at least not from the point of view of this talk right i mean it is definitely our concern but",
    "start": "929440",
    "end": "934800"
  },
  {
    "text": "not for for the protocol what definitely is a protocol concern is",
    "start": "934800",
    "end": "941600"
  },
  {
    "text": "if an attacker can mount additional endpoints and that to be honest is the most interesting part these days uh because",
    "start": "941600",
    "end": "948240"
  },
  {
    "text": "attackers find creative ways to use the system in a way that you haven't",
    "start": "948240",
    "end": "953759"
  },
  {
    "text": "foreseen it so what if for example an attacker can mount a rogue authorization server or if they",
    "start": "953759",
    "end": "959199"
  },
  {
    "text": "can mount a rogue client or a rogue resource server and that gets even more exciting i guess",
    "start": "959199",
    "end": "966560"
  },
  {
    "text": "if they can trick the legitimate client to use the rogue authorization server or can trick the legitimate user to use the",
    "start": "966560",
    "end": "973199"
  },
  {
    "text": "rogue uh client with the legitimate resource server you know like all of these permutations",
    "start": "973199",
    "end": "978959"
  },
  {
    "text": "um that you know are probably legal protocol interactions but uh",
    "start": "978959",
    "end": "985040"
  },
  {
    "text": "executed in a way that you have not thought about it or have not protected yourself against right um i'll show you an",
    "start": "985040",
    "end": "992320"
  },
  {
    "text": "example later of that which is um which is brilliant if you think about it um but also",
    "start": "992320",
    "end": "998720"
  },
  {
    "text": "devastating yeah um the good news is is that by far the most attacks just",
    "start": "998720",
    "end": "1004959"
  },
  {
    "text": "happen because of plain programming mistakes yeah so the the the",
    "start": "1004959",
    "end": "1010720"
  },
  {
    "text": "by far the biggest group of um attacks are basically where the attacker can read but not",
    "start": "1010720",
    "end": "1017040"
  },
  {
    "text": "modify the contents of the authorization request or response now and that might be enough to",
    "start": "1017040",
    "end": "1022399"
  },
  {
    "text": "compromise the system if they are clever enough right and that might happen because you are leaking",
    "start": "1022399",
    "end": "1028558"
  },
  {
    "text": "data because you might have open redirector attacks because maybe um you're leaking data into the browser",
    "start": "1028559",
    "end": "1034880"
  },
  {
    "text": "history into proxies into log files something like this right um the good",
    "start": "1034880",
    "end": "1040558"
  },
  {
    "text": "news is they can all be fixed these are just you know knowing the right keystrokes you can fix them",
    "start": "1040559",
    "end": "1045839"
  },
  {
    "text": "and and can solve the problem but still um by far that's the biggest group of problems we've seen in the past",
    "start": "1045839",
    "end": "1053840"
  },
  {
    "text": "okay so these are basically the the adversaries that we",
    "start": "1054240",
    "end": "1059280"
  },
  {
    "text": "try to protect against um now these these security guidance documents",
    "start": "1059280",
    "end": "1065440"
  },
  {
    "text": "have been in the works for quite a while no one was taking uh you know paying attention to that um",
    "start": "1065440",
    "end": "1071280"
  },
  {
    "text": "until i guess that is late 2018 um one of the authors torsten",
    "start": "1071280",
    "end": "1077120"
  },
  {
    "text": "lauderstadt which is a well-respected colleague of mine um wrote this blog post you should stop",
    "start": "1077120",
    "end": "1082799"
  },
  {
    "text": "using the o of implicit grant and he basically said like if you do it you",
    "start": "1082799",
    "end": "1088720"
  },
  {
    "text": "might you know this might result in attacker accessing your health records or initiating a payment from the bank",
    "start": "1088720",
    "end": "1094320"
  },
  {
    "text": "account and to be honest you know um the way it was written",
    "start": "1094320",
    "end": "1099600"
  },
  {
    "text": "it was a little bit you know so the next day i got emails from",
    "start": "1099600",
    "end": "1105360"
  },
  {
    "text": "customers or on twitter or you know basically people thought like oh have you read this blog post they",
    "start": "1105360",
    "end": "1111440"
  },
  {
    "text": "found a new vulnerability in oauth and that is of course not the case",
    "start": "1111440",
    "end": "1117039"
  },
  {
    "text": "he didn't find a new vulnerability in oauth he just said that from all of the ways you can use",
    "start": "1117039",
    "end": "1122960"
  },
  {
    "text": "oauth the implicit trend is the most problematic and that was from the start known and if you have read the threat",
    "start": "1122960",
    "end": "1129919"
  },
  {
    "text": "model it's in there yeah all of the problems with the implicit grant",
    "start": "1129919",
    "end": "1135440"
  },
  {
    "text": "were written down from the start and you know just to recap why this really exists was",
    "start": "1135440",
    "end": "1140559"
  },
  {
    "text": "that back in 2012 they were looking for a way to give a javascript-based client",
    "start": "1140559",
    "end": "1146000"
  },
  {
    "start": "1142000",
    "end": "1142000"
  },
  {
    "text": "easy access to the oauth protocol and remember in 2012 it was not possible to use ajax calls",
    "start": "1146000",
    "end": "1152320"
  },
  {
    "text": "cross domain because we didn't have course by the time yeah so they found a way or hacked up a",
    "start": "1152320",
    "end": "1158000"
  },
  {
    "text": "way whatever you want to call it that allows you to basically uh you know do everything um on the query string parameter so you",
    "start": "1158000",
    "end": "1165840"
  },
  {
    "text": "send the request over the query string and then you get back the tokens over the url",
    "start": "1165840",
    "end": "1171039"
  },
  {
    "start": "1169000",
    "end": "1169000"
  },
  {
    "text": "back to the client and as i said this was a workaround because in 2012",
    "start": "1171039",
    "end": "1176160"
  },
  {
    "text": "cross origin ajax calls were not allowed and um we found many many problems with",
    "start": "1176160",
    "end": "1183200"
  },
  {
    "text": "this approach because leaking is is easy here right it's on the query string it ends up in the",
    "start": "1183200",
    "end": "1188480"
  },
  {
    "text": "browser has to read ends up in logs and so on so long story short in 2020",
    "start": "1188480",
    "end": "1194320"
  },
  {
    "text": "we totally solved the cross-origin hx problem um so there is no need anymore to",
    "start": "1194320",
    "end": "1200000"
  },
  {
    "text": "transmit tokens over uh urls okay it's error prone it is hard to secure um we should not do",
    "start": "1200000",
    "end": "1208480"
  },
  {
    "text": "it anymore which doesn't mean that if you are doing it right now and you implemented all the",
    "start": "1208480",
    "end": "1214880"
  },
  {
    "text": "right counter measures you have a problem yeah all i'm saying is it is a very risky way of doing things which is not",
    "start": "1214880",
    "end": "1221600"
  },
  {
    "text": "necessary anymore okay so first takeaway don't use implicit flow anymore if you have",
    "start": "1221600",
    "end": "1227200"
  },
  {
    "text": "existing ones think about rewriting them i mean which is not a rewrite of the app but",
    "start": "1227200",
    "end": "1232400"
  },
  {
    "text": "just changing the protocol flow okay while we are at um deprecating",
    "start": "1232400",
    "end": "1238960"
  },
  {
    "text": "flows the next one that is not recommended anymore at all is the password grant right",
    "start": "1238960",
    "end": "1244080"
  },
  {
    "start": "1239000",
    "end": "1239000"
  },
  {
    "text": "the password trend is this flow in oauth where you harvest the credentials of the user in the front end and then send them",
    "start": "1244080",
    "end": "1249919"
  },
  {
    "text": "to the back end to get a token back um the main problem is that the user types in the credentials into",
    "start": "1249919",
    "end": "1256159"
  },
  {
    "text": "the client application and not into the into the authentication server",
    "start": "1256159",
    "end": "1261520"
  },
  {
    "text": "users should be educated to only type in their passwords in one place which is the system that owns the account right",
    "start": "1261520",
    "end": "1269200"
  },
  {
    "text": "um and research shows that the more often you type in your password into",
    "start": "1269200",
    "end": "1274240"
  },
  {
    "text": "different places the more prone you are to fishing attacks so avoid that as well if you can also",
    "start": "1274240",
    "end": "1281600"
  },
  {
    "text": "the password trend is not compatible at all with modern authentication methods like fido you know two-factor",
    "start": "1281600",
    "end": "1286960"
  },
  {
    "text": "authentication acceleration and so on many of the popular commercial authentication systems don't",
    "start": "1286960",
    "end": "1294159"
  },
  {
    "text": "even allow to use that anymore okay so that's another thing you should",
    "start": "1294159",
    "end": "1299520"
  },
  {
    "text": "think about okay which basically is a good thing yeah because if you look at",
    "start": "1299520",
    "end": "1305280"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "all of the different flows and variations we had like one year ago yeah um depending on which type",
    "start": "1305280",
    "end": "1311440"
  },
  {
    "text": "of application you're writing you had like uh many choices right and many choices",
    "start": "1311440",
    "end": "1317520"
  },
  {
    "text": "means you have to understand the different uh you know uh uh uh um properties of all of these choices",
    "start": "1317520",
    "end": "1325200"
  },
  {
    "text": "and and their um you know um uh advantages and disadvantages and so on",
    "start": "1325200",
    "end": "1330720"
  },
  {
    "text": "which basically became harder and harder now with um with the new work and",
    "start": "1330720",
    "end": "1337280"
  },
  {
    "text": "looking at the system with a bit of um you know a hindsight it's actually nice that we can shrink",
    "start": "1337280",
    "end": "1343760"
  },
  {
    "text": "down our options which means that you need to know only",
    "start": "1343760",
    "end": "1349120"
  },
  {
    "text": "two flows really which is the client credential flow which is for non-interactive",
    "start": "1349120",
    "end": "1355440"
  },
  {
    "start": "1351000",
    "end": "1351000"
  },
  {
    "text": "applications like server to server style communication and it's the code flow with this little extension called pixie which i'll show",
    "start": "1355440",
    "end": "1361679"
  },
  {
    "text": "you in a second so all the others basically um wherever a human being",
    "start": "1361679",
    "end": "1366880"
  },
  {
    "text": "is involved which dramatically simplifies the learning curve and less options gives you more security",
    "start": "1366880",
    "end": "1374159"
  },
  {
    "text": "okay let's have a look at machine to machine first so machine to machine",
    "start": "1374159",
    "end": "1382080"
  },
  {
    "start": "1378000",
    "end": "1378000"
  },
  {
    "text": "basically you know it's pretty simple you have the client you have um resources or apis and you",
    "start": "1382080",
    "end": "1388960"
  },
  {
    "text": "have the authorization server the authorization server knows about all the clients about all the",
    "start": "1388960",
    "end": "1394320"
  },
  {
    "text": "apis it knows about which client is allowed to access which api so the client goes to the authorization",
    "start": "1394320",
    "end": "1399760"
  },
  {
    "text": "server authenticates with the authorization someone says hey give me a token for you know api one or api two and",
    "start": "1399760",
    "end": "1407120"
  },
  {
    "text": "if that is allowed the authorization server returns",
    "start": "1407120",
    "end": "1412159"
  },
  {
    "text": "um an access token back to the to the um client and then the client",
    "start": "1412159",
    "end": "1418240"
  },
  {
    "text": "will use that access token to um to call to contact the apis now um some some things we",
    "start": "1418240",
    "end": "1427279"
  },
  {
    "text": "we can't cover here but i still want to mention them is um access tokens have been unspecified by",
    "start": "1427279",
    "end": "1432960"
  },
  {
    "text": "overwatch itself right so in when you look up the original um of rfc",
    "start": "1432960",
    "end": "1438000"
  },
  {
    "text": "there is no um mentioning whatsoever how an access token should look like",
    "start": "1438000",
    "end": "1443600"
  },
  {
    "text": "what's the format what's inside what's the semantics and so on it just says there is an access token and that is what gives you",
    "start": "1443600",
    "end": "1450799"
  },
  {
    "text": "access to the apis yeah there's a lot going on in in that space um",
    "start": "1450799",
    "end": "1456640"
  },
  {
    "text": "especially since i guess the industry as a whole decided like that chasing depth tokens is the the preferred the preferred way",
    "start": "1456640",
    "end": "1464240"
  },
  {
    "text": "to do access tokens right um so if if you look at",
    "start": "1464240",
    "end": "1469520"
  },
  {
    "text": "or if you are using json web token as x tokens you should definitely have a look at the new json web token",
    "start": "1469520",
    "end": "1474960"
  },
  {
    "text": "bcp um which talks about you know like what are the the best practices in in which crypto uh",
    "start": "1474960",
    "end": "1481679"
  },
  {
    "text": "you know algorithms you should allow um how you know like um common",
    "start": "1481679",
    "end": "1487039"
  },
  {
    "text": "vulnerabilities that we found in in in json web token libraries the good news is if you're using the microsoft",
    "start": "1487039",
    "end": "1492960"
  },
  {
    "text": "chasing the token library um then you are you're good",
    "start": "1492960",
    "end": "1498000"
  },
  {
    "text": "yeah and this one is not vulnerable to any of the known attacks um also that there's a new",
    "start": "1498000",
    "end": "1505120"
  },
  {
    "text": "document uh which you should have a look it's called the json it's the json web token profile",
    "start": "1505120",
    "end": "1513279"
  },
  {
    "text": "for oauth and this kind of like tells you or gives you a common language if you",
    "start": "1513279",
    "end": "1518640"
  },
  {
    "text": "like how to use chasing web tokens in the context of oauth which which claims should be there what",
    "start": "1518640",
    "end": "1524159"
  },
  {
    "text": "what are their names what are their formats what are the semantics and something yeah so that is something that you definitely should have a look at",
    "start": "1524159",
    "end": "1530799"
  },
  {
    "text": "um another thing that definitely you should revisit in 2020 is",
    "start": "1530799",
    "end": "1537440"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "how do clients authenticate with the authorization server and um you know it's a very common",
    "start": "1537440",
    "end": "1544080"
  },
  {
    "text": "practice to have shared secrets right i mean that's just one step up from the api key that many people",
    "start": "1544080",
    "end": "1549760"
  },
  {
    "text": "were using um shared secrets are easy easy to get started with right um",
    "start": "1549760",
    "end": "1556799"
  },
  {
    "text": "they sound easy to use to begin with but they are a bit of a management nightmare right i mean they are shared",
    "start": "1556799",
    "end": "1562880"
  },
  {
    "text": "that's the first problem yeah so how secret is a secret when it's shared um",
    "start": "1562880",
    "end": "1568240"
  },
  {
    "text": "they have to be you know there's a metric so they have to be at both the client and the server side",
    "start": "1568240",
    "end": "1574080"
  },
  {
    "text": "um they should have a high entropy right um you should not store them",
    "start": "1574080",
    "end": "1579600"
  },
  {
    "text": "um in reversible encryption meaning you should you should hash them on the authorization server just in case that",
    "start": "1579600",
    "end": "1585600"
  },
  {
    "text": "if somebody is able to breach your configuration database or system that they don't get you know all of your",
    "start": "1585600",
    "end": "1592080"
  },
  {
    "text": "client secrets in clear text um configuration management is a bit of a problem",
    "start": "1592080",
    "end": "1597279"
  },
  {
    "text": "um they need to be transmitted or the wire right that's another thing what is what if the network you are crossing is",
    "start": "1597279",
    "end": "1603679"
  },
  {
    "text": "untrusted yeah um so potentially the network admin",
    "start": "1603679",
    "end": "1609520"
  },
  {
    "text": "of that network you know like has access to your clear text secrets in in in proxies things like that so you know",
    "start": "1609520",
    "end": "1616400"
  },
  {
    "text": "they are a bit problematic asymmetric keys instead solve many of",
    "start": "1616400",
    "end": "1622080"
  },
  {
    "text": "those concerns right because there is no secret anymore to store on the server side because it's just a public key",
    "start": "1622080",
    "end": "1627600"
  },
  {
    "text": "the secrets don't get transmitted over the network um you can attach",
    "start": "1627600",
    "end": "1634640"
  },
  {
    "text": "other properties to it like expiration of secrets or replay detection of secrets um and in the next talk",
    "start": "1634640",
    "end": "1642480"
  },
  {
    "text": "uh this afternoon i'm going to show you uh basically a way to fix that using um a technique called private key",
    "start": "1642480",
    "end": "1648720"
  },
  {
    "text": "chasing web tokens where you basically xj you know replace that symmetric key with a with a",
    "start": "1648720",
    "end": "1654159"
  },
  {
    "text": "a client generated chasing that token which you know solves many of these",
    "start": "1654159",
    "end": "1659200"
  },
  {
    "text": "of these problems yeah the other thing we're going to talk about this afternoon is how to solve the bearer tokens",
    "start": "1659200",
    "end": "1664320"
  },
  {
    "start": "1662000",
    "end": "1662000"
  },
  {
    "text": "problem right um i mentioned that earlier um that one of the concerns with uh overvisits is that the",
    "start": "1664320",
    "end": "1671600"
  },
  {
    "text": "tokens are not bound to the client meaning you know if you are you know it's it's like cash",
    "start": "1671600",
    "end": "1677520"
  },
  {
    "text": "right money when you lose your money on the street and somebody finds it they can use it right then there's no binding",
    "start": "1677520",
    "end": "1683840"
  },
  {
    "text": "of the the banknote to the owner of that banknote um unlike credit card for example yeah",
    "start": "1683840",
    "end": "1690240"
  },
  {
    "text": "where there is a certain binding there you know in real world might not be as strong as we want but still there is something like a pin",
    "start": "1690240",
    "end": "1696480"
  },
  {
    "text": "maybe or a you know like a signature or a picture something like this yeah um in oauth up until recently we didn't",
    "start": "1696480",
    "end": "1703919"
  },
  {
    "text": "have that they are all token to the bearer and if they leak somehow over the wire anybody",
    "start": "1703919",
    "end": "1710080"
  },
  {
    "text": "especially you know the bad guys could use could use them to call the apis impersonating the",
    "start": "1710080",
    "end": "1715760"
  },
  {
    "text": "original owner yeah um that is uh you know one concern from",
    "start": "1715760",
    "end": "1722320"
  },
  {
    "text": "calling client to server but that might be also a concern if maybe you are leaking that token to a",
    "start": "1722320",
    "end": "1729039"
  },
  {
    "text": "malicious server right maybe you're calling the wrong api with that token and now this api has that token and then",
    "start": "1729039",
    "end": "1736240"
  },
  {
    "text": "called the legitimate api instead right and the legitimate api doesn't know the difference",
    "start": "1736240",
    "end": "1741600"
  },
  {
    "text": "so again um that is something you should consider um",
    "start": "1741600",
    "end": "1748080"
  },
  {
    "text": "uh especially if there's a chance of you know again leaking or you know tokens being used in",
    "start": "1748080",
    "end": "1755279"
  },
  {
    "text": "weekly secured clients or maybe tokens traversing untrusted networks there we can make",
    "start": "1755279",
    "end": "1760880"
  },
  {
    "text": "this stronger and again i'll show you techniques for that um in the next part this",
    "start": "1760880",
    "end": "1766960"
  },
  {
    "text": "afternoon okay let's have a look at interactive applications they are the far more",
    "start": "1766960",
    "end": "1772720"
  },
  {
    "start": "1770000",
    "end": "1770000"
  },
  {
    "text": "interesting target for attackers because they are easier to attack because there are humans involved yeah",
    "start": "1772720",
    "end": "1777919"
  },
  {
    "text": "and these humans um not only humans but also browsers yeah and browsers are",
    "start": "1777919",
    "end": "1783360"
  },
  {
    "text": "as you know um i mean browsers are very powerful they are very useful because they can show a ui",
    "start": "1783360",
    "end": "1788960"
  },
  {
    "text": "and they can follow redirects right the problem is that browsers can also show uis and they can follow redirects and it",
    "start": "1788960",
    "end": "1795360"
  },
  {
    "text": "might be the wrong redirect to the wrong ui and the user might not be able to distinguish that right",
    "start": "1795360",
    "end": "1800640"
  },
  {
    "text": "so since the whole browser-based interactions are based on sending people back and forth",
    "start": "1800640",
    "end": "1806080"
  },
  {
    "text": "these back and forth things are very interesting targets right so just to",
    "start": "1806080",
    "end": "1811200"
  },
  {
    "text": "summarize that how does a browser-based flow work basically you send the user region to the",
    "start": "1811200",
    "end": "1816559"
  },
  {
    "text": "authorization server the authorization server shows the ui to log in the user to you know maybe do consent and these",
    "start": "1816559",
    "end": "1822960"
  },
  {
    "text": "things and then the uh authorization server sends back",
    "start": "1822960",
    "end": "1828000"
  },
  {
    "text": "a so-called authorization code and then the client application opens the back",
    "start": "1828000",
    "end": "1833520"
  },
  {
    "text": "channel to the authorization server hands in the codes the client id and the client secret and gets back",
    "start": "1833520",
    "end": "1839279"
  },
  {
    "text": "the tokens and from that point on the client can then you know a authenticate a user and b",
    "start": "1839279",
    "end": "1845360"
  },
  {
    "text": "um call apis on behalf of the user now as you can imagine these two",
    "start": "1845360",
    "end": "1850720"
  },
  {
    "text": "redirects here they are the the main target right so let's have",
    "start": "1850720",
    "end": "1856640"
  },
  {
    "text": "a look at attacks that um specifically target the redirect uri",
    "start": "1856640",
    "end": "1862000"
  },
  {
    "text": "okay um so the original oauth spec did not did not",
    "start": "1862000",
    "end": "1867840"
  },
  {
    "start": "1863000",
    "end": "1863000"
  },
  {
    "text": "make any statement um how how you should validate",
    "start": "1867840",
    "end": "1873039"
  },
  {
    "text": "these urls going back and forth to do the redirects yeah the threat model did and also the over",
    "start": "1873039",
    "end": "1878640"
  },
  {
    "text": "money connect specification did um they say um you should never ever have any sort of",
    "start": "1878640",
    "end": "1885440"
  },
  {
    "text": "variables in there right um like you should do a strict uh exact string matching even case",
    "start": "1885440",
    "end": "1891760"
  },
  {
    "text": "sensitive yeah and the reason for that is basically these callback urls they are very very",
    "start": "1891760",
    "end": "1898240"
  },
  {
    "text": "sensitive on that url you are running your very security",
    "start": "1898240",
    "end": "1903519"
  },
  {
    "text": "relevant token validation code for example um and if you um you know and",
    "start": "1903519",
    "end": "1910799"
  },
  {
    "text": "the better you can isolate this code into a single place the better the moment you're allowing",
    "start": "1910799",
    "end": "1916000"
  },
  {
    "text": "variables like this here star dot some side or some side slash star you are opening up the attack surface",
    "start": "1916000",
    "end": "1922399"
  },
  {
    "text": "basically where tokens can be sent to and potentially there's a bug on this url",
    "start": "1922399",
    "end": "1927919"
  },
  {
    "text": "that allows leakage forwarding open redirection things like that okay so you should",
    "start": "1927919",
    "end": "1935519"
  },
  {
    "text": "minimize your attack surface by only allowing a single callback url or at least as",
    "start": "1935519",
    "end": "1941760"
  },
  {
    "text": "a very specific set of particular callback urls and not give",
    "start": "1941760",
    "end": "1948240"
  },
  {
    "text": "the attacker a chance to do to insert star okay let me give you two examples of things that",
    "start": "1948240",
    "end": "1954960"
  },
  {
    "text": "happened in real world with these approaches so last year i think it was um electronic arts ea that um",
    "start": "1954960",
    "end": "1963360"
  },
  {
    "text": "had a subdomain takeover attack and uh the way this works is basically in in short works is let's imagine you know",
    "start": "1963360",
    "end": "1971039"
  },
  {
    "text": "you are creating a new a new application you go to azure you register your azure web app it gives you foo",
    "start": "1971039",
    "end": "1976320"
  },
  {
    "text": "at azurewebsites.net right and then you write your application and at some point somebody adds a dns entry to that",
    "start": "1976320",
    "end": "1982880"
  },
  {
    "text": "so that this full thing becomes part of your dns namespace yeah so yeah so ea had billing.ea.com",
    "start": "1982880",
    "end": "1990559"
  },
  {
    "text": "and that was an allowed target for a token so it was an allowed",
    "start": "1990559",
    "end": "1996960"
  },
  {
    "text": "redirect uri okay all good so far but at some point the billing",
    "start": "1996960",
    "end": "2003279"
  },
  {
    "text": "application was moved to another part so they shut down the foo website on azure websites",
    "start": "2003279",
    "end": "2009840"
  },
  {
    "text": "but forgot to remove the dns entry so now suddenly you had billing.ea.com pointing to a non-existing azure website",
    "start": "2009840",
    "end": "2017360"
  },
  {
    "text": "and you know you can query the dns server and find out that this is the case yeah so what the attackers did was they",
    "start": "2017360",
    "end": "2023760"
  },
  {
    "text": "registered foo dot azure websites again because that was free right and suddenly billing.ea.com was",
    "start": "2023760",
    "end": "2031600"
  },
  {
    "text": "pointing to an attacker website which was able to a execute code or under the ea domain and",
    "start": "2031600",
    "end": "2038720"
  },
  {
    "text": "b was a valid redirect uri now for tokens to leak them to",
    "start": "2038720",
    "end": "2044240"
  },
  {
    "text": "an attacker controlled site okay um that wouldn't have happened if they would have been very strict with the redirect",
    "start": "2044240",
    "end": "2051118"
  },
  {
    "text": "uris and i guess yeah i mean you know these things happen but",
    "start": "2051119",
    "end": "2057200"
  },
  {
    "text": "uh you can't have a defense in fear by being more explicit the other thing that happened to for",
    "start": "2057200",
    "end": "2063440"
  },
  {
    "text": "example facebook and also github is is this here like allow site slash star for example",
    "start": "2063440",
    "end": "2069760"
  },
  {
    "text": "facebook allowed for a long time that the redirect you arrived to be any page on facebook and i think github had",
    "start": "2069760",
    "end": "2075440"
  },
  {
    "text": "exactly the same problem yeah so if that's the case you know what attackers would do basically is they",
    "start": "2075440",
    "end": "2080638"
  },
  {
    "text": "will find some page underneath that domain that has a problem yeah maybe it's an open redirector maybe he",
    "start": "2080639",
    "end": "2087280"
  },
  {
    "text": "can check content yeah so in the case of facebook what happened this is that um",
    "start": "2087280",
    "end": "2092320"
  },
  {
    "text": "what the guy did was he created handcrafted um an authorized request and pointed to his",
    "start": "2092320",
    "end": "2099599"
  },
  {
    "text": "own facebook page as a redirect uri and send it to friends right",
    "start": "2099599",
    "end": "2105119"
  },
  {
    "text": "so they clicked the link they went to facebook they got single sign on the token got the code got created and",
    "start": "2105119",
    "end": "2111280"
  },
  {
    "text": "got sent to this guy's facebook page so far nothing dangerous right i mean people were",
    "start": "2111280",
    "end": "2116960"
  },
  {
    "text": "seeing the facebook page they were thinking like what what's going on here um but that was",
    "start": "2116960",
    "end": "2124160"
  },
  {
    "text": "a bit clever than that yeah so what he did was on the facebook page itself he posted an image that came from a",
    "start": "2124160",
    "end": "2131359"
  },
  {
    "start": "2126000",
    "end": "2126000"
  },
  {
    "text": "server that he controlled yeah from his own server and basically now what happens is you know imagine uh",
    "start": "2131359",
    "end": "2138079"
  },
  {
    "text": "the browser goes to the facebook page in the url there's the authorization code coming from the authorization server",
    "start": "2138079",
    "end": "2144160"
  },
  {
    "text": "the browser sees that image it makes the outgoing network call and on the referral header",
    "start": "2144160",
    "end": "2150240"
  },
  {
    "text": "the browser puts the current url which includes the code okay",
    "start": "2150240",
    "end": "2156000"
  },
  {
    "text": "and that means now that the code got leaked to a server that was under control of the attacker",
    "start": "2156000",
    "end": "2162240"
  },
  {
    "text": "so the attacker only had to look at his log files in the web server log files and harvest",
    "start": "2162240",
    "end": "2167599"
  },
  {
    "text": "those codes and now turn these codes into tokens brilliant i mean uh hi you know i highly",
    "start": "2167599",
    "end": "2174720"
  },
  {
    "text": "respect the the guy that found out how that works yeah",
    "start": "2174720",
    "end": "2180079"
  },
  {
    "text": "now you might think uh but what's the problem with leaking a code right i mean didn't we just say to turn a code back",
    "start": "2181200",
    "end": "2187440"
  },
  {
    "text": "into a token you need a client secret absolutely right you know um for for confidential clients in oauth",
    "start": "2187440",
    "end": "2194079"
  },
  {
    "text": "a client secret is required to turn a code into a token",
    "start": "2194079",
    "end": "2199760"
  },
  {
    "text": "but is that really stopping attackers there's another attack which is you know",
    "start": "2199760",
    "end": "2205760"
  },
  {
    "start": "2204000",
    "end": "2204000"
  },
  {
    "text": "became more popular is it's called authorization code injection and the idea is yes absolutely to to",
    "start": "2205760",
    "end": "2213440"
  },
  {
    "text": "turn a code into a token you need to know the client secret but what if you can trick the original",
    "start": "2213440",
    "end": "2218720"
  },
  {
    "text": "client application into turning a stolen code back into a token",
    "start": "2218720",
    "end": "2224240"
  },
  {
    "text": "using its own secret well what is that good enough yes and it turns out",
    "start": "2224240",
    "end": "2230320"
  },
  {
    "text": "it is good enough so imagine um an attacker is able to steal an authorization code using any of the",
    "start": "2230320",
    "end": "2236560"
  },
  {
    "text": "techniques we just talked about right leakage redirect uri tricks whatever",
    "start": "2236560",
    "end": "2241760"
  },
  {
    "text": "yeah so now he has a stolen code but now what the attacker can do is hand craft",
    "start": "2241760",
    "end": "2247599"
  },
  {
    "text": "the callback url um open the application himself the",
    "start": "2247599",
    "end": "2252800"
  },
  {
    "text": "legitimate application and craft the url insert the stolen code and then send it to the client and what",
    "start": "2252800",
    "end": "2259599"
  },
  {
    "text": "will the client do he will happily take that stolen code with the client id and the secret and",
    "start": "2259599",
    "end": "2265599"
  },
  {
    "text": "turn it into access tokens these access tokens are not available to the attacker directly but the attacker",
    "start": "2265599",
    "end": "2271280"
  },
  {
    "text": "is now locked in as the victim into the application and can do whatever the application can do and",
    "start": "2271280",
    "end": "2277040"
  },
  {
    "text": "i guess that's in most cases that's good enough okay so yeah authorization code injection is",
    "start": "2277040",
    "end": "2282640"
  },
  {
    "text": "definitely possible even with cold slow so how do we fix that well there's another thing called roof key for code",
    "start": "2282640",
    "end": "2288560"
  },
  {
    "start": "2287000",
    "end": "2287000"
  },
  {
    "text": "exchange pixie yeah as many people call it and the idea is with pixie that you are introducing a per request",
    "start": "2288560",
    "end": "2295520"
  },
  {
    "text": "secret um that the attacker cannot know and basically uh proves that the client",
    "start": "2295520",
    "end": "2301200"
  },
  {
    "text": "is the same client on the front channel and on the back channel so the way this works is basically",
    "start": "2301200",
    "end": "2306480"
  },
  {
    "text": "is is that the client creates a secret a random number and hashes that random number which is",
    "start": "2306480",
    "end": "2312400"
  },
  {
    "text": "called the code challenge and then he sends the hashed version of that over the authorized request um and then",
    "start": "2312400",
    "end": "2320000"
  },
  {
    "text": "the authorization will you know will store that hashed version and then when the code comes back on the back channel",
    "start": "2320000",
    "end": "2326320"
  },
  {
    "text": "the client will send the clear text version of that secret and now the authorization server has",
    "start": "2326320",
    "end": "2332560"
  },
  {
    "text": "both the hashed version and the geotext version he can hash the clear text version and if they match",
    "start": "2332560",
    "end": "2338560"
  },
  {
    "text": "the client has proven that he is the same client on the front channel as it is on the back channel okay",
    "start": "2338560",
    "end": "2346160"
  },
  {
    "text": "now in our injection scenario if the the attacker does not know the original",
    "start": "2346160",
    "end": "2352640"
  },
  {
    "text": "so the client that the attacker uses to hand in the stolen code is not the same",
    "start": "2352640",
    "end": "2358160"
  },
  {
    "text": "client instance that was used in the first place to leak the code so then you know the the the code",
    "start": "2358160",
    "end": "2364640"
  },
  {
    "text": "verifier doesn't match so the authorizator will uh reject the request and that is how you solve um",
    "start": "2364640",
    "end": "2372640"
  },
  {
    "text": "uh injection attacks okay um a similar attack um which is just the",
    "start": "2372640",
    "end": "2379520"
  },
  {
    "start": "2378000",
    "end": "2378000"
  },
  {
    "text": "other way around i guess is um is uh is basically by um by using uh leveraging cross-request forgery",
    "start": "2379520",
    "end": "2386640"
  },
  {
    "text": "where the attacker pre-creates a legitimate code right and then and then basically uh",
    "start": "2386640",
    "end": "2393440"
  },
  {
    "text": "creates a callback url sends that to victims and tries to force them into the same logon session",
    "start": "2393440",
    "end": "2399680"
  },
  {
    "text": "by them handing in a code that does belong to a different log on session and that is very similar",
    "start": "2399680",
    "end": "2406800"
  },
  {
    "text": "to a session fixation attack back in the days when we had you know session ids on on query strings",
    "start": "2406800",
    "end": "2412319"
  },
  {
    "text": "right uh again same thing can be fixed with pixi um if you cannot um enforce that pc is",
    "start": "2412319",
    "end": "2420079"
  },
  {
    "text": "being used that line can on its own um implement counter measures",
    "start": "2420079",
    "end": "2425760"
  },
  {
    "text": "by using the state parameter in in oauth where basically the idea is um",
    "start": "2425760",
    "end": "2430800"
  },
  {
    "text": "that the client pre-creates uh the decline creates a secret stores it locally puts on the state parameter and then the",
    "start": "2430800",
    "end": "2437599"
  },
  {
    "text": "authorization must echo back that state parameter and then the client can check that the",
    "start": "2437599",
    "end": "2442960"
  },
  {
    "text": "secret that he put in here is the same and correlates to the request and since",
    "start": "2442960",
    "end": "2450160"
  },
  {
    "text": "again the attacker cannot know that secret up front clients can detect that whatever callback they just got sent",
    "start": "2450160",
    "end": "2456880"
  },
  {
    "text": "does not correlate to any request they made in the first place um so the recommendation is to do both",
    "start": "2456880",
    "end": "2463520"
  },
  {
    "text": "implement pixi as well as do the the anti-sea surf um technique yeah with the state",
    "start": "2463520",
    "end": "2470640"
  },
  {
    "text": "parameter so that you know you have a little bit of defense in depth okay so that's basically um that that's",
    "start": "2470640",
    "end": "2477680"
  },
  {
    "start": "2475000",
    "end": "2475000"
  },
  {
    "text": "the overview you know always do exact matching of redirect you arise um make sure your callback pages are",
    "start": "2477680",
    "end": "2485839"
  },
  {
    "text": "locked down as possible always use pc use the state parameter uh and you know like it's for example a",
    "start": "2485839",
    "end": "2492079"
  },
  {
    "text": "very easy way to fix the referral problem is by using referral policies or use the normal",
    "start": "2492079",
    "end": "2497520"
  },
  {
    "text": "you know attribute for example so that the browsers don't generate them",
    "start": "2497520",
    "end": "2502560"
  },
  {
    "text": "okay let's move on to something more esoteric maybe yeah",
    "start": "2502560",
    "end": "2508079"
  },
  {
    "start": "2505000",
    "end": "2505000"
  },
  {
    "text": "that's um what we call a mix-up attack and a mix-up attack has a couple of assumptions here",
    "start": "2508079",
    "end": "2513520"
  },
  {
    "text": "may uh the first assumption is is that the client trusts more than one authorization server and that was maybe",
    "start": "2513520",
    "end": "2520240"
  },
  {
    "text": "back then right in 2012 not really a common thing but today it is very common right log in with",
    "start": "2520240",
    "end": "2526079"
  },
  {
    "text": "facebook log in with google or maybe you have a federation gateway in your company that trusts",
    "start": "2526079",
    "end": "2531599"
  },
  {
    "text": "multiple external providers so um that's that right so that's the the",
    "start": "2531599",
    "end": "2537920"
  },
  {
    "text": "prerequisite you you you trust multiple providers and maybe for somehow you have a self-service",
    "start": "2537920",
    "end": "2545520"
  },
  {
    "text": "portal that that allows users to register their own providers again think of software as a service scenarios",
    "start": "2545520",
    "end": "2550720"
  },
  {
    "text": "and one of those external providers is evil okay it's an attacker authorization server so",
    "start": "2550720",
    "end": "2556640"
  },
  {
    "text": "for this for the purpose of this um uh illustration here we have two",
    "start": "2556640",
    "end": "2562079"
  },
  {
    "text": "authorization servers one is the honest as and one is the attack arrays yeah so imagine you know the user selects the",
    "start": "2562079",
    "end": "2568800"
  },
  {
    "text": "honest as to log in and now this this variant of this attack has one assumption namely that the attacker",
    "start": "2568800",
    "end": "2575680"
  },
  {
    "text": "is able to manipulate the http traffic maybe it's a browser extension maybe",
    "start": "2575680",
    "end": "2581520"
  },
  {
    "text": "it's something in javascript whatever but basically the point is that the attacker is able to on the fly",
    "start": "2581520",
    "end": "2587599"
  },
  {
    "text": "change the selection from the honest as to the attacker ias so the client application will think",
    "start": "2587599",
    "end": "2593280"
  },
  {
    "text": "okay he selected the attack arrays let's send him to the attacker as now on",
    "start": "2593280",
    "end": "2598560"
  },
  {
    "text": "the way back the attacker again is able to modify the traffic and switches it back",
    "start": "2598560",
    "end": "2604319"
  },
  {
    "text": "to the honest as so the browser will actually go to the selected authorization server",
    "start": "2604319",
    "end": "2610560"
  },
  {
    "text": "okay so the user will not see any difference um now he will authenticate and so on and",
    "start": "2610560",
    "end": "2616160"
  },
  {
    "text": "so forth the authorization tool will send back the authorization code the code will go back",
    "start": "2616160",
    "end": "2621839"
  },
  {
    "text": "to the client the client still thinks that the attacker is was selected so he will",
    "start": "2621839",
    "end": "2627040"
  },
  {
    "text": "happily send his code and his sequel and so on to the wrong authorization server so all of that all",
    "start": "2627040",
    "end": "2634000"
  },
  {
    "text": "of all the as now needs to do is basically take that client id secret",
    "start": "2634000",
    "end": "2639599"
  },
  {
    "text": "and code and he will be able to get the access tokens okay so that is what we call a mix-up",
    "start": "2639599",
    "end": "2645839"
  },
  {
    "text": "attack basically because the client mixes up the the two um authorization servers now",
    "start": "2645839",
    "end": "2653200"
  },
  {
    "text": "this has the assumption that the attacker can modify network traffic and you might be saying",
    "start": "2653200",
    "end": "2658240"
  },
  {
    "text": "well if that's the case i have bigger problems yeah yes but let me show you another",
    "start": "2658240",
    "end": "2663760"
  },
  {
    "text": "version of that where this is not necessary okay so that's another variation of that",
    "start": "2663760",
    "end": "2669520"
  },
  {
    "text": "and this time the user selected the attacker as to start with so you know maybe if he clicked the wrong button",
    "start": "2669520",
    "end": "2675520"
  },
  {
    "text": "maybe the attacker ais has a logo which looks very similar to the thing that he really wants to",
    "start": "2675520",
    "end": "2680560"
  },
  {
    "text": "select whatever right he's he clicked he chose the wrong authorization server",
    "start": "2680560",
    "end": "2686880"
  },
  {
    "text": "okay so far so good um now we are the client sends the user to the attacker as right yeah",
    "start": "2686880",
    "end": "2693839"
  },
  {
    "text": "attack ias knows well he he doesn't expect to come to my place so he immediately forwards",
    "start": "2693839",
    "end": "2699680"
  },
  {
    "text": "the browser to the real to the honest as by rewriting the client id",
    "start": "2699680",
    "end": "2704960"
  },
  {
    "text": "and the redirect uri so now the user will see the real authorization server with the real login",
    "start": "2704960",
    "end": "2711760"
  },
  {
    "text": "page and so on and so forth he will log in then the honest ais thinks that is a legitimate request",
    "start": "2711760",
    "end": "2717440"
  },
  {
    "text": "coming from the client and will send the code back to the client right but now the client",
    "start": "2717440",
    "end": "2726000"
  },
  {
    "text": "gets the code from that attacker af thinks sorry for from the",
    "start": "2726000",
    "end": "2732400"
  },
  {
    "text": "honest ass things the attacker is has been used and again sends the code and the secret",
    "start": "2732400",
    "end": "2737680"
  },
  {
    "text": "to the wrong place and now the attacker can turn them into tokens okay so that's an example of",
    "start": "2737680",
    "end": "2744800"
  },
  {
    "text": "um when i said like mounting additional endpoints gives us very interesting attack",
    "start": "2744800",
    "end": "2750319"
  },
  {
    "text": "scenarios so um yeah if you're not prepared for that",
    "start": "2750319",
    "end": "2755520"
  },
  {
    "text": "um this is a pretty interesting attack the good news is yeah if you're using",
    "start": "2755520",
    "end": "2761520"
  },
  {
    "start": "2760000",
    "end": "2760000"
  },
  {
    "text": "asp.net core then you are secure by default and the way they they prevent the mix-up attack",
    "start": "2761520",
    "end": "2767520"
  },
  {
    "text": "is by giving each external provider a unique name and a unique callback url",
    "start": "2767520",
    "end": "2772640"
  },
  {
    "text": "okay and what they do basically when they generate the authorized request you see",
    "start": "2772640",
    "end": "2778079"
  },
  {
    "text": "that they come up with a random number which they call the correlation id and they encrypt and sign that",
    "start": "2778079",
    "end": "2786880"
  },
  {
    "text": "with the data protection api in asp.net core then drop a cookie which has the format of correlation dot",
    "start": "2786880",
    "end": "2793520"
  },
  {
    "text": "authorization server name dot correlation id which is the random number they just created",
    "start": "2793520",
    "end": "2798800"
  },
  {
    "text": "okay now when the response comes back on the uh authorization server specific",
    "start": "2798800",
    "end": "2806880"
  },
  {
    "text": "callback url um the protocol says that whatever is on the state parameter must",
    "start": "2806880",
    "end": "2812400"
  },
  {
    "text": "be sent back so this contains our encrypted and signed correlation id",
    "start": "2812400",
    "end": "2817520"
  },
  {
    "text": "so what they do is basically they validate the signature decrypt the value and now have the clear",
    "start": "2817520",
    "end": "2823280"
  },
  {
    "text": "text correlation id back and now they make sure that there is a cookie called correlation dot",
    "start": "2823280",
    "end": "2829200"
  },
  {
    "text": "authorizations have a name dot correlation id and if that cookie doesn't exist somehow",
    "start": "2829200",
    "end": "2834800"
  },
  {
    "text": "there's a mismatch between the thing that the start of the flow and the thing that uh finished the flow and they will",
    "start": "2834800",
    "end": "2840960"
  },
  {
    "text": "reject that and maybe you've seen that before there's a an exception called correlation failed that can happen for other reasons as",
    "start": "2840960",
    "end": "2847599"
  },
  {
    "text": "well but that's how they stop basically these mix-up attacks okay",
    "start": "2847599",
    "end": "2853760"
  },
  {
    "text": "so um so if you're using 8. core are fine if you're using any other",
    "start": "2853760",
    "end": "2859359"
  },
  {
    "text": "framework you should have a look how they implement um protection against these types of attacks",
    "start": "2859359",
    "end": "2865680"
  },
  {
    "text": "okay um so let's switch gears for a moment and",
    "start": "2865680",
    "end": "2871359"
  },
  {
    "start": "2867000",
    "end": "2867000"
  },
  {
    "text": "look at uh public clients yeah like uh um you know like things like mobile applications or sparse yeah",
    "start": "2871359",
    "end": "2877920"
  },
  {
    "text": "uh public lines have slightly different rules right i mean you cannot authenticate them in essence because you",
    "start": "2877920",
    "end": "2883040"
  },
  {
    "text": "know it's a public client they cannot store a secret so you cannot rely on any uh you know client authentication",
    "start": "2883040",
    "end": "2890400"
  },
  {
    "text": "like we can do for confidential clients yeah um [Music] so let's have a look at the first",
    "start": "2890400",
    "end": "2896160"
  },
  {
    "text": "anti-pattern that the bcps point out especially for native um client applications which is native",
    "start": "2896160",
    "end": "2903280"
  },
  {
    "start": "2903000",
    "end": "2903000"
  },
  {
    "text": "login dialogues right so it's a very common thing and you know that that the native application brings up its own",
    "start": "2903280",
    "end": "2911040"
  },
  {
    "text": "login page where you type in the name and the password right and if you are unlucky you have a really good password and you",
    "start": "2911040",
    "end": "2917359"
  },
  {
    "text": "have to type it in now on your phone um and then they send that to the token",
    "start": "2917359",
    "end": "2922640"
  },
  {
    "text": "service get back to token and so on so this is using the the password cran that that i mentioned earlier that is",
    "start": "2922640",
    "end": "2929119"
  },
  {
    "text": "now deprecated and shouldn't be used anymore right i mean yes i know",
    "start": "2929119",
    "end": "2934880"
  },
  {
    "text": "you wouldn't believe how many hours of my life i wasted with product owners discussing why this is bad um you know they say",
    "start": "2934880",
    "end": "2942319"
  },
  {
    "text": "like it's my client it's my user it's my back and what are you telling me yes i cannot you",
    "start": "2942319",
    "end": "2948559"
  },
  {
    "text": "know i cannot force you to do the right thing but we know that this um",
    "start": "2948559",
    "end": "2956000"
  },
  {
    "text": "is not the best way of doing it you should rather let the user type in the password in the",
    "start": "2956000",
    "end": "2961280"
  },
  {
    "start": "2960000",
    "end": "2960000"
  },
  {
    "text": "place where your account is stored which is on our authorization server which means you have to open a browser",
    "start": "2961280",
    "end": "2968319"
  },
  {
    "text": "to show the login ui which i think is the better way of doing it but that's just me that gives you support for password",
    "start": "2968319",
    "end": "2974880"
  },
  {
    "text": "managers and for all of your logging and auditing and your advanced authentication methods and federation",
    "start": "2974880",
    "end": "2981520"
  },
  {
    "text": "and all these things right and because you are using the system browser here you potentially get single sign on as",
    "start": "2981520",
    "end": "2987760"
  },
  {
    "text": "well with um your whatever you are logged on to already in um on your machine or on your",
    "start": "2987760",
    "end": "2993440"
  },
  {
    "text": "phone right um so that that's the that's the recommended way of doing it so use the system browser every",
    "start": "2993440",
    "end": "2999599"
  },
  {
    "start": "2996000",
    "end": "2996000"
  },
  {
    "text": "operating system has a way of doing that right the mobile ones are a bit more advanced here because they give you",
    "start": "2999599",
    "end": "3005359"
  },
  {
    "text": "a better ui or ux rather to show the browser put the browser away",
    "start": "3005359",
    "end": "3011040"
  },
  {
    "text": "again on desktops you probably seen that before it's sometimes a bit weird that the browser opens up and suddenly it's",
    "start": "3011040",
    "end": "3016800"
  },
  {
    "text": "in front of the application and so on still these things can be fixed um",
    "start": "3016800",
    "end": "3022400"
  },
  {
    "text": "and then you have to figure out how to do the callback from the browser back to the application there are a couple of",
    "start": "3022400",
    "end": "3028240"
  },
  {
    "text": "ways of doing that again i would recommend reading that document because you know it has all the details but the best way of",
    "start": "3028240",
    "end": "3035040"
  },
  {
    "text": "doing it is what they call claimed or universal urls and you probably have seen that before right",
    "start": "3035040",
    "end": "3041200"
  },
  {
    "text": "when you open a link on your phone to google maps and ins instead of the browser that the",
    "start": "3041200",
    "end": "3047440"
  },
  {
    "text": "app is opening on the phone um so there must be some way of knowing that",
    "start": "3047440",
    "end": "3053280"
  },
  {
    "text": "this url belongs to that specific app and the way this works is basically that you're dropping on that url",
    "start": "3053280",
    "end": "3060000"
  },
  {
    "text": "a special document which is signed uh which tells basically the the operating system that hey",
    "start": "3060000",
    "end": "3067599"
  },
  {
    "text": "if if this app is installed on the phone rather forward that link to that app otherwise",
    "start": "3067599",
    "end": "3072880"
  },
  {
    "text": "show it in the browser that's how you can implement the redirect uris",
    "start": "3072880",
    "end": "3078079"
  },
  {
    "text": "for native apps which is a very elegant way of doing that okay",
    "start": "3078079",
    "end": "3083440"
  },
  {
    "text": "um token storage is always a concern and we talk about that in in a second in the context of browser-based applications for native",
    "start": "3083440",
    "end": "3090720"
  },
  {
    "start": "3084000",
    "end": "3084000"
  },
  {
    "text": "ones you have the luxury of well not storing them in the browser i guess you also have access to",
    "start": "3090720",
    "end": "3096240"
  },
  {
    "text": "native operating system apis like you know the keychain on ios or dp api on",
    "start": "3096240",
    "end": "3101760"
  },
  {
    "text": "windows and you can put additional things on top of that like face id or touch id or things like that um also",
    "start": "3101760",
    "end": "3109680"
  },
  {
    "text": "you know it's a good idea to clean up when you're done like revoke refresh token that logout time or",
    "start": "3109680",
    "end": "3115280"
  },
  {
    "text": "when the application uninstalls and so on and again uh you'll find more of that good information in that um",
    "start": "3115280",
    "end": "3122400"
  },
  {
    "text": "native apps pcp the last pcb i want to talk about is the browser-based ones",
    "start": "3122400",
    "end": "3127440"
  },
  {
    "start": "3126000",
    "end": "3126000"
  },
  {
    "text": "which is you know a sad one i guess because we just can't fix those browsers it's",
    "start": "3127440",
    "end": "3132640"
  },
  {
    "text": "it's it's a lost course right um but ultimately right the main problem",
    "start": "3132640",
    "end": "3137839"
  },
  {
    "text": "with browsers is is that they are shared execution environments they are just like you know these days a",
    "start": "3137839",
    "end": "3143280"
  },
  {
    "text": "little bit like operating systems here with every tab running in different processes and so on",
    "start": "3143280",
    "end": "3148720"
  },
  {
    "text": "but one thing that is still share typically are cookies yeah between you know because that's how the bed",
    "start": "3148720",
    "end": "3154480"
  },
  {
    "text": "works i guess um but the interesting observation is that many attacks i start with the word cross",
    "start": "3154480",
    "end": "3160880"
  },
  {
    "text": "right because it somehow one side attacks another side and that is due to the nature of this",
    "start": "3160880",
    "end": "3167520"
  },
  {
    "text": "shared execution environment now this is a topic for a whole day i guess",
    "start": "3167520",
    "end": "3172640"
  },
  {
    "text": "but we all you all know that there are basically two fundamental ways to write spas these days one is you're relying on",
    "start": "3172640",
    "end": "3178800"
  },
  {
    "text": "browser building features like cookies or the other one is that you're driving it from the application like access tokens um the cookie",
    "start": "3178800",
    "end": "3186160"
  },
  {
    "text": "approach historically has cross-site request forgery problems the token approach has historically cross-site scripting",
    "start": "3186160",
    "end": "3192720"
  },
  {
    "text": "problems yeah so it's a bit of a you know um",
    "start": "3192720",
    "end": "3198160"
  },
  {
    "text": "choose your poison i guess here if you look at these pcps they give you",
    "start": "3198240",
    "end": "3203440"
  },
  {
    "text": "two fundamental ways how you can think of javascript based architectures and this might sound backwards because",
    "start": "3203440",
    "end": "3211119"
  },
  {
    "text": "for many years now this was the style that was advocated by javascript people with",
    "start": "3211119",
    "end": "3216319"
  },
  {
    "text": "javascript application without a back end right basically the this stream of you can",
    "start": "3216319",
    "end": "3221680"
  },
  {
    "text": "just download your js file and your html from a cdn no backend needed we do everything in",
    "start": "3221680",
    "end": "3227280"
  },
  {
    "text": "the application yeah very hard to secure",
    "start": "3227280",
    "end": "3233359"
  },
  {
    "text": "in this scenario that the client has to do everything request the tokens manage the tokens",
    "start": "3234400",
    "end": "3240400"
  },
  {
    "text": "store the tokens and that's the hard part you know uh and you know to do the live the lifetime management and so on",
    "start": "3240400",
    "end": "3247359"
  },
  {
    "text": "um the more you know coming back more and more people are using this type",
    "start": "3247359",
    "end": "3252880"
  },
  {
    "text": "of architecture which i personally recommend as well which is basically that you have",
    "start": "3252880",
    "end": "3258880"
  },
  {
    "text": "in addition to your spa a back end that belongs to the spa that stores the tokens",
    "start": "3258880",
    "end": "3266640"
  },
  {
    "text": "manages the tokens calls the apis on behalf of the spa which means no tokens stored in the",
    "start": "3266640",
    "end": "3272400"
  },
  {
    "text": "browser which means you know cross-site scripting cannot exfiltrate them and you know i mean there are many",
    "start": "3272400",
    "end": "3278400"
  },
  {
    "text": "arguments going you know back and forth but i think this is the easier threat model",
    "start": "3278400",
    "end": "3284079"
  },
  {
    "text": "that's my personal opinion which basically brings you to such an architecture here right uh which which some people call backhand",
    "start": "3284079",
    "end": "3290319"
  },
  {
    "start": "3287000",
    "end": "3287000"
  },
  {
    "text": "for front end or bff where you have the front-end which is written in whatever javascript framework",
    "start": "3290319",
    "end": "3295839"
  },
  {
    "text": "you like you have a back-end for that which has the local apis which are application-specific",
    "start": "3295839",
    "end": "3301200"
  },
  {
    "text": "you can use an external identity provider you can call external apis but the point is that the front end",
    "start": "3301200",
    "end": "3307839"
  },
  {
    "text": "always talks to them via the back end and they live on the same",
    "start": "3307839",
    "end": "3313200"
  },
  {
    "text": "site right and then you secure that front and back and connection with either and defaucery or if",
    "start": "3313200",
    "end": "3321040"
  },
  {
    "text": "you can with the new same site cookies which is a new feature in browsers and if all the",
    "start": "3321040",
    "end": "3327359"
  },
  {
    "start": "3322000",
    "end": "3322000"
  },
  {
    "text": "browsers that you need to support support them as well then you don't have to write any line of code to secure them because the",
    "start": "3327359",
    "end": "3333680"
  },
  {
    "text": "browser automatically takes care of making sure that these cookies don't leak across side boundaries yeah and you",
    "start": "3333680",
    "end": "3340400"
  },
  {
    "text": "probably remember there was some drama around that in chrome chrome 80",
    "start": "3340400",
    "end": "3346400"
  },
  {
    "text": "chrome 80 yeah introduced um basically made every cookie same site by",
    "start": "3346400",
    "end": "3351440"
  },
  {
    "text": "default which broke many many websites right and then they realized oh we broke the web and oh it",
    "start": "3351440",
    "end": "3357359"
  },
  {
    "text": "was during a pandemic so they they undid those changes again now they",
    "start": "3357359",
    "end": "3362480"
  },
  {
    "text": "are back in chrome 83 so yeah that's the future every cookie on the web will be same size by default",
    "start": "3362480",
    "end": "3369280"
  },
  {
    "text": "unless you opt out explicitly from that um and you know that's just the way it",
    "start": "3369280",
    "end": "3375040"
  },
  {
    "text": "is um if you don't like that cookie business and you have to store that stuff in the browser well then be",
    "start": "3375040",
    "end": "3380720"
  },
  {
    "start": "3379000",
    "end": "3379000"
  },
  {
    "text": "be aware of that there is no secure data storage in the browser right everything is available from",
    "start": "3380720",
    "end": "3386240"
  },
  {
    "text": "javascript which means if you have a cross-site scripting attack it the tokens are available to",
    "start": "3386240",
    "end": "3392160"
  },
  {
    "text": "the attacker you can harden your applications right using for example content security",
    "start": "3392160",
    "end": "3398160"
  },
  {
    "text": "policy um and you know just basically scrutinizing all of the additional libraries you're",
    "start": "3398160",
    "end": "3404400"
  },
  {
    "text": "pulling in from npm um but yeah there's that right",
    "start": "3404400",
    "end": "3409520"
  },
  {
    "text": "um for the for the session management you have to make up your mind how do i",
    "start": "3409520",
    "end": "3414960"
  },
  {
    "text": "wanna do the token management there are two options here one is using session bound techniques which are",
    "start": "3414960",
    "end": "3420400"
  },
  {
    "text": "getting harder and harder these days because of things like intelligent tracking prevention in safari and you",
    "start": "3420400",
    "end": "3425839"
  },
  {
    "text": "know brave has the same thing now and more browsers are coming or you do",
    "start": "3425839",
    "end": "3431040"
  },
  {
    "text": "refresh tokens yeah refresh tokens are even more dangerous in the browser because they",
    "start": "3431040",
    "end": "3437200"
  },
  {
    "text": "are typically longer lived and there are some some techniques that you can apply to them for example rotating the refresh",
    "start": "3437200",
    "end": "3443839"
  },
  {
    "text": "token detecting replay attacks and so on but these are things that you have to implement on top okay and again",
    "start": "3443839",
    "end": "3452480"
  },
  {
    "text": "i can only recommend if you are writing spas read these documents they are useful to read okay",
    "start": "3452480",
    "end": "3460559"
  },
  {
    "text": "which brings us to our last topic over 2.1 so for the last",
    "start": "3460559",
    "end": "3468000"
  },
  {
    "text": "57 minutes i talked a lot about documents that uh",
    "start": "3468000",
    "end": "3475040"
  },
  {
    "text": "add rules to o of 2.0 okay so",
    "start": "3475040",
    "end": "3481520"
  },
  {
    "text": "the so in other words if you today want to learn about oauth you have to",
    "start": "3481520",
    "end": "3487119"
  },
  {
    "text": "read the base specification then you have to start reading all the bcps and the threat model and then you",
    "start": "3487119",
    "end": "3492400"
  },
  {
    "text": "merge all of these documents in your head and that's basically what you need to know right",
    "start": "3492400",
    "end": "3498480"
  },
  {
    "text": "so the idea of oauth 2.1 is basically to start with a new baseline and the",
    "start": "3498480",
    "end": "3504000"
  },
  {
    "text": "whole idea is this we are taking the base specifications which is rfc 6749 and 6750",
    "start": "3504000",
    "end": "3509599"
  },
  {
    "start": "3505000",
    "end": "3505000"
  },
  {
    "text": "merge them together then we take all the various pcps i just mentioned and merged them together",
    "start": "3509599",
    "end": "3515280"
  },
  {
    "text": "and that becomes o of 2.1 which is the new baseline for",
    "start": "3515280",
    "end": "3521440"
  },
  {
    "text": "o wolf and um if you want to div them in your head basically the most important changes are",
    "start": "3521440",
    "end": "3527920"
  },
  {
    "text": "this implicit grant is gone password trend is gone pxe is mandatory",
    "start": "3527920",
    "end": "3534319"
  },
  {
    "text": "for the authorization code grant redirect uris must be compared with an",
    "start": "3534319",
    "end": "3539760"
  },
  {
    "text": "exact string match no knows you know no regular expressions allowed things like that",
    "start": "3539760",
    "end": "3546079"
  },
  {
    "text": "um refresh tokens must either be sender constrained meaning that they",
    "start": "3546079",
    "end": "3552559"
  },
  {
    "text": "are used by confidential clients and the center constraint is done by client secrets or they must be one-time use only which",
    "start": "3552559",
    "end": "3559119"
  },
  {
    "text": "is primarily targeting public clients like spas where you know",
    "start": "3559119",
    "end": "3564400"
  },
  {
    "text": "basically every refresh token user should result in a new refresh token and that you can detect it if somebody",
    "start": "3564400",
    "end": "3570160"
  },
  {
    "text": "starts using the same refresh token twice which probably is then an attack man all the bearer tokens",
    "start": "3570160",
    "end": "3576240"
  },
  {
    "text": "must not be um sent anymore using using the query string uh for the for the reasons i mentioned",
    "start": "3576240",
    "end": "3582480"
  },
  {
    "text": "they leak too easily you know um",
    "start": "3582480",
    "end": "3587599"
  },
  {
    "text": "log files uh proxies and and so on okay so that's basically that is coming",
    "start": "3587599",
    "end": "3593599"
  },
  {
    "text": "soon um it's it's it's not done yet 2.1 it's i'm i think it will come this",
    "start": "3593599",
    "end": "3598799"
  },
  {
    "text": "year but that's these will be them the big changes okay so to summarize that",
    "start": "3598799",
    "end": "3605920"
  },
  {
    "text": "um you know uh some some some of the threads we talked",
    "start": "3605920",
    "end": "3611280"
  },
  {
    "text": "about cannot be mitigated like you know network compromise some of the threats are easy to mitigate",
    "start": "3611280",
    "end": "3616319"
  },
  {
    "text": "but just you know following the rules like you know do anti-seizure protection uh close those",
    "start": "3616319",
    "end": "3621680"
  },
  {
    "text": "redirectors you know and so on and some threats will always be hard to mitigate even if you have a",
    "start": "3621680",
    "end": "3628079"
  },
  {
    "text": "perfect implementation and i'm mostly talking about things like you know like the mix-up stuff and if if",
    "start": "3628079",
    "end": "3634160"
  },
  {
    "text": "an attacker specifically targets your system and they find the things that you",
    "start": "3634160",
    "end": "3639839"
  },
  {
    "text": "might not have thought about well even with a perfect protocol implementation",
    "start": "3639839",
    "end": "3645200"
  },
  {
    "text": "there is some room here right um as a summary i can say you know",
    "start": "3645200",
    "end": "3650559"
  },
  {
    "text": "sometimes i i talk to customers and they say like you know what after you told me all these",
    "start": "3650559",
    "end": "3655680"
  },
  {
    "text": "things we don't want to use oauth it sounds very complicated and insecure um and all i can say is every security",
    "start": "3655680",
    "end": "3664480"
  },
  {
    "text": "protocol is complicated right and because it must be you cannot solve",
    "start": "3664480",
    "end": "3672160"
  },
  {
    "text": "a hard problem in a simple way i mean you can simplify things but it won't it never will be simple um the the",
    "start": "3672160",
    "end": "3679839"
  },
  {
    "text": "beauty about oauth is that it's public it's open source and it's it's um publicly tested",
    "start": "3679839",
    "end": "3688000"
  },
  {
    "text": "and attacked and iterated on and by using a standard you get basically a",
    "start": "3688000",
    "end": "3695280"
  },
  {
    "text": "a a a protocol that many people have worked on that many people have tried to break",
    "start": "3695280",
    "end": "3700640"
  },
  {
    "text": "and if you come up with your own protocol then maybe you are the only person that worked on it and you are the only person that",
    "start": "3700640",
    "end": "3706400"
  },
  {
    "text": "tried to break it and maybe you didn't succeed and you think oh that must be good so all in all you know um",
    "start": "3706400",
    "end": "3713359"
  },
  {
    "text": "yes oauth is complicated ish um but i think it's still the best thing",
    "start": "3713359",
    "end": "3719520"
  },
  {
    "text": "we have today cool thank you um if you have any questions you can speak up now or",
    "start": "3719520",
    "end": "3724720"
  },
  {
    "text": "leave a question in the slack channel i'll try to get to that otherwise i guess it's lunch time thank",
    "start": "3724720",
    "end": "3730559"
  },
  {
    "text": "you bye",
    "start": "3730559",
    "end": "3735119"
  }
]