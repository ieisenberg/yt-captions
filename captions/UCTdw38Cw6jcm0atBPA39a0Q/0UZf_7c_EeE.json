[
  {
    "text": "as i was saying what i want to kind of cover is it's looking a little bit lower than we would normally look at asp.net",
    "start": "160",
    "end": "5680"
  },
  {
    "text": "core so typically most people will be familiar with working with maybe the mvc pattern and using controllers",
    "start": "5680",
    "end": "11360"
  },
  {
    "text": "and actions in your applications um and a lot of that just works almost by magic you don't have to do a huge amount of",
    "start": "11360",
    "end": "18080"
  },
  {
    "text": "wiring up or code there's a lot of conventions that mean asp.net core functions as you'd expect",
    "start": "18080",
    "end": "24160"
  },
  {
    "text": "what i want to do is dive into what's actually happening under there so that we can start to think about places where we might be able to",
    "start": "24160",
    "end": "31199"
  },
  {
    "text": "replace some of the default behavior with our own behavior typically for achieving some kind of",
    "start": "31199",
    "end": "36399"
  },
  {
    "text": "cross-cutting concern that you have in the application so we're going to begin and we're going to begin right",
    "start": "36399",
    "end": "41920"
  },
  {
    "text": "from the very start of this journey where a client wants to make a http request to us so let's imagine",
    "start": "41920",
    "end": "47760"
  },
  {
    "text": "that we've got an api running on stevejordan.k forward slash api forward slash books",
    "start": "47760",
    "end": "53680"
  },
  {
    "text": "and the client wants to communicate with that api and get some data from it",
    "start": "53680",
    "end": "59039"
  },
  {
    "text": "so the very first stage that we'll just touch on very briefly and i apologize the the animations in this slide i spent",
    "start": "59039",
    "end": "64640"
  },
  {
    "text": "hours on are going to be really janky over about five frames per second that we get on webex but let's do our best to kind of follow",
    "start": "64640",
    "end": "71200"
  },
  {
    "text": "the pattern so the first phase is the client has this address for a server and it needs to understand where that",
    "start": "71200",
    "end": "77040"
  },
  {
    "text": "server actually is what server serves that traffic so we're not going to go diving deep into dns but fundamentally there's a",
    "start": "77040",
    "end": "83759"
  },
  {
    "text": "you know a set of lookups and referrals that may happen through various levels of the domain name system until we come to a domain name server",
    "start": "83759",
    "end": "90479"
  },
  {
    "text": "that can provide us back an ip address that we can communicate with so now we know the ip address of",
    "start": "90479",
    "end": "96240"
  },
  {
    "text": "the server that hosts the website next we need to connect to that server",
    "start": "96240",
    "end": "101600"
  },
  {
    "text": "and the client that might be a browser client being controlled by an actual user or it may be a programmatic client maybe",
    "start": "101600",
    "end": "107360"
  },
  {
    "text": "it's c sharp using http current in the code base to communicate with an api",
    "start": "107360",
    "end": "112479"
  },
  {
    "text": "it needs to connect to that server so a port is going to be selected on the client machine for the outbound",
    "start": "112479",
    "end": "118399"
  },
  {
    "text": "connection and then on the web server we'll either be talking over http which will typically use port 80 or",
    "start": "118399",
    "end": "125200"
  },
  {
    "text": "https over 443 so in this case let's imagine we're doing uh the sort of https because this is",
    "start": "125200",
    "end": "131680"
  },
  {
    "text": "going to be going over a public internet so the first thing that happens is we need to connect the client to the server",
    "start": "131680",
    "end": "136879"
  },
  {
    "text": "and we're going to use tcp so while we're using http as our application",
    "start": "136879",
    "end": "141920"
  },
  {
    "text": "layer protocol underneath that we have the communication protocol the transport protocol of tcp and so there's a brief client",
    "start": "141920",
    "end": "149360"
  },
  {
    "text": "server handshake that takes place client basically says hello are you there the servers are here and then we establish our connection now",
    "start": "149360",
    "end": "156560"
  },
  {
    "text": "there's another layer that we then need to have on top of this because of the secured communications that we want so we layer",
    "start": "156560",
    "end": "162640"
  },
  {
    "text": "in the tls slab and this requires another set of handshaking to happen between client and",
    "start": "162640",
    "end": "168160"
  },
  {
    "text": "server client basically is going to get a certificate from the server to verify that they are who they say they are",
    "start": "168160",
    "end": "173440"
  },
  {
    "text": "we'll do a decision on how we're actually going to encrypt traffic and what key exchange we're going to use for that",
    "start": "173440",
    "end": "178720"
  },
  {
    "text": "and then eventually we'll have our tls connection the next stage is that the client needs to send the actual http request",
    "start": "178720",
    "end": "185760"
  },
  {
    "text": "over the wire so here is a very basic http request it's basically just ascii test so in the",
    "start": "185760",
    "end": "192879"
  },
  {
    "text": "first line here we have the get method being defined so this is the http method that we're going to be using for",
    "start": "192879",
    "end": "198879"
  },
  {
    "text": "the request the resource that we want slash api slash books and then the protocol version so 1.1 of",
    "start": "198879",
    "end": "205920"
  },
  {
    "text": "http then we can have some headers these are basically key value pairs",
    "start": "205920",
    "end": "211120"
  },
  {
    "text": "so here we have the host header defined steve jordan.coding okay so this will allow the routing system further down",
    "start": "211120",
    "end": "217440"
  },
  {
    "text": "uh and maybe even the web server to determine okay which actual maybe virtual website am i hosting on my",
    "start": "217440",
    "end": "224000"
  },
  {
    "text": "uh on my server that can handle this request so this will help with that routing and we have a number of fairly common",
    "start": "224000",
    "end": "230400"
  },
  {
    "text": "headers so accept header is like we prefer json in this exchange we prefer the",
    "start": "230400",
    "end": "235840"
  },
  {
    "text": "english language we can accept encodings that allow supportion uh supporting of",
    "start": "235840",
    "end": "241519"
  },
  {
    "text": "compression for the request as well and the response and we also identify who we are with a user agent here",
    "start": "241519",
    "end": "247519"
  },
  {
    "text": "so this is us being a good citizen and saying yeah this is kind of who we are this is the version of us that's talking",
    "start": "247519",
    "end": "253040"
  },
  {
    "text": "to you so that the downstream service knows who we are and then we conclude the",
    "start": "253040",
    "end": "258079"
  },
  {
    "text": "request with a blank line all of this so far we don't have to worry about doing if you're using something like http client to send",
    "start": "258079",
    "end": "264720"
  },
  {
    "text": "the request it's doing all of this work for you uh with a sort of an abstraction over what the request message looks like",
    "start": "264720",
    "end": "272560"
  },
  {
    "text": "next we actually send the request over the network to the server that we've connected to and at",
    "start": "272560",
    "end": "278000"
  },
  {
    "text": "the other end of that connection in asp.net core we have kestrel kestrel has been there since asp.net",
    "start": "278000",
    "end": "283520"
  },
  {
    "text": "core 1.0 it was at the time a brand new web server written from the ground up by the",
    "start": "283520",
    "end": "288560"
  },
  {
    "text": "asp.net team and designed to be very efficient and support running the web server in process with the web",
    "start": "288560",
    "end": "295440"
  },
  {
    "text": "application so fundamentally asp.net core applications are just a console application it's a console",
    "start": "295440",
    "end": "301759"
  },
  {
    "text": "application that runs a host that host is the process in the application that basically keeps that process alive",
    "start": "301759",
    "end": "307840"
  },
  {
    "text": "listening for things like down signals from the operating system and then within the host that can fire",
    "start": "307840",
    "end": "312960"
  },
  {
    "text": "up a web server and kestrel conforms to the iserver interface that's defined by that",
    "start": "312960",
    "end": "318880"
  },
  {
    "text": "set of hosting layer and can actually act in as a server it binds itself to whatever ports it's been told to",
    "start": "318880",
    "end": "324960"
  },
  {
    "text": "and listens for requests coming in so what this looks like at quite a high",
    "start": "324960",
    "end": "330400"
  },
  {
    "text": "level is that the client is going to make its request potentially over the internet potentially over an internal network to the kestrel web",
    "start": "330400",
    "end": "336960"
  },
  {
    "text": "server on uh for on the connection that it's established uh kestrel then handles all of these",
    "start": "336960",
    "end": "343600"
  },
  {
    "text": "requests and these connections through a series of connection middleware now we're not going to go too deep into",
    "start": "343600",
    "end": "348880"
  },
  {
    "text": "connection middleware and how that all works inside kestrel it's quite a deep topic but just be aware that if you have",
    "start": "348880",
    "end": "355280"
  },
  {
    "text": "particular networking requirements or connection requirements you can actually write your own connection middleware and register",
    "start": "355280",
    "end": "361680"
  },
  {
    "text": "into the kestrel's kind of request handling pipeline pretty like much like you would middleware inside ash connect",
    "start": "361680",
    "end": "366880"
  },
  {
    "text": "core what we'll be talking about shortly guess we're going to pass that request then into asp.net core itself",
    "start": "366880",
    "end": "373120"
  },
  {
    "text": "asp.net core is going to do some work hopefully producing a response and then that response flows back out",
    "start": "373120",
    "end": "379520"
  },
  {
    "text": "through the connection that it's established with the client if we zoom in a little bit we'll have a",
    "start": "379520",
    "end": "384639"
  },
  {
    "text": "look at what happens in a little bit more detail so the request has come in it's reached kestrel kestrel's first job",
    "start": "384639",
    "end": "391520"
  },
  {
    "text": "is to parse the http request so it's getting bytes over the network and it needs to",
    "start": "391520",
    "end": "396560"
  },
  {
    "text": "interpret those bytes as a valid http message so this involves various steps of parsing the request",
    "start": "396560",
    "end": "402800"
  },
  {
    "text": "line making sure that it includes the method the resource the protocol version parsing out any headers that may be on",
    "start": "402800",
    "end": "408960"
  },
  {
    "text": "the request possibly reading any content in if it's a request with content",
    "start": "408960",
    "end": "414000"
  },
  {
    "text": "and ultimately its job is to translate that into a http context so this is the object",
    "start": "414000",
    "end": "420080"
  },
  {
    "text": "representation that basically covers all of the information that we need through the rest of the system",
    "start": "420080",
    "end": "425599"
  },
  {
    "text": "about the ongoing request so this is essentially the contract between kestrel and asp.net core so this carries",
    "start": "425599",
    "end": "431919"
  },
  {
    "text": "with it things like details of what headers were found on the request message what resource are they looking for so what path or query",
    "start": "431919",
    "end": "438400"
  },
  {
    "text": "string maybe did they include in the url and later on other bits of information get tagged onto this context as it flows",
    "start": "438400",
    "end": "445039"
  },
  {
    "text": "through the system there's a features collection this is something that you can use in your middleware and in your applications",
    "start": "445039",
    "end": "451440"
  },
  {
    "text": "if you want to apply a feature that basically gets carried around a state with that context and flows through the rest of the",
    "start": "451440",
    "end": "457440"
  },
  {
    "text": "request handling pipeline so this context flows into asp.net core and your application code",
    "start": "457440",
    "end": "463440"
  },
  {
    "text": "you basically create the response within there and that gets attached to the http context which gets passed back to kestrel and",
    "start": "463440",
    "end": "469840"
  },
  {
    "text": "then sent over the wire if we zoom in even further we can see what happens",
    "start": "469840",
    "end": "475520"
  },
  {
    "text": "after we've got that http context so the next stage inside asp.net core itself",
    "start": "475520",
    "end": "480639"
  },
  {
    "text": "is that we're actually going to flow that request and it's hdb context into asp.net core middleware so asp.net",
    "start": "480639",
    "end": "487360"
  },
  {
    "text": "core middleware is a series of components basically that have access to the request on the way in",
    "start": "487360",
    "end": "493520"
  },
  {
    "text": "and the response on the way out so why is this useful well middleware basically is a",
    "start": "493520",
    "end": "499120"
  },
  {
    "text": "great place for any kind of cross-cutting behaviors cross-cutting concerns for requests and responses",
    "start": "499120",
    "end": "504400"
  },
  {
    "text": "you register your middleware pipeline and that gets read at startup and used for the lifetime of that",
    "start": "504400",
    "end": "509919"
  },
  {
    "text": "application and so this means you control exactly what happens to each request as it flows through your system",
    "start": "509919",
    "end": "515680"
  },
  {
    "text": "each piece of middleware may choose to simply pass the request on to the next middleware in the pipeline it might enrich the",
    "start": "515680",
    "end": "523200"
  },
  {
    "text": "request message so maybe even change values or add on items to the http context",
    "start": "523200",
    "end": "528720"
  },
  {
    "text": "or features to the features collection and then it will pass it on with that change or it may",
    "start": "528720",
    "end": "534560"
  },
  {
    "text": "choose to short circuit the pipeline torque circuiting is basically where the middleware decides actually i can return",
    "start": "534560",
    "end": "540800"
  },
  {
    "text": "some kind of valid response so it will set the response message on the context and then not pass it on",
    "start": "540800",
    "end": "546080"
  },
  {
    "text": "to the next middleware in the chain instead it will return back to kestrel so each piece of middleware runs in turn",
    "start": "546080",
    "end": "552480"
  },
  {
    "text": "and eventually once that middleware pipeline is run it's going to hand off to some endpoint or usually mvc for the",
    "start": "552480",
    "end": "559440"
  },
  {
    "text": "rest of the request handling once that's built a response it flows back through the middleware and this is",
    "start": "559440",
    "end": "564880"
  },
  {
    "text": "important it flows through the middleware again but in reverse order from what you originally registered it",
    "start": "564880",
    "end": "570000"
  },
  {
    "text": "and so each piece of middleware now has the opportunity to inspect the response that's been added onto that contact",
    "start": "570000",
    "end": "575519"
  },
  {
    "text": "and maybe make decisions about it maybe do some kind of metrics and monitoring uh based on what response is going out",
    "start": "575519",
    "end": "581440"
  },
  {
    "text": "of your server about any kind of cross-cutting concern that you have and then again that flows out over to the client",
    "start": "581440",
    "end": "589440"
  },
  {
    "text": "so this is how we define a middleware pipeline in a standard application so this is the configure method of the",
    "start": "589440",
    "end": "595279"
  },
  {
    "text": "startup class so you will hopefully have seen this if you've used asp.net core before",
    "start": "595279",
    "end": "600480"
  },
  {
    "text": "this is the typical example out of one of the templates and the configure method has access to the eye application builder this is the",
    "start": "600480",
    "end": "607600"
  },
  {
    "text": "way that we define all of the pipeline for processing our requests so we add middleware to that pipeline",
    "start": "607600",
    "end": "613839"
  },
  {
    "text": "with these various app.use something methods so if we take a look at this first one for example this one",
    "start": "613839",
    "end": "619680"
  },
  {
    "text": "adds in the developer exception page middleware and this middleware basically takes a",
    "start": "619680",
    "end": "624720"
  },
  {
    "text": "request that's had an exception phone somewhere in the system and writes out the stack trace so that's really useful during",
    "start": "624720",
    "end": "630720"
  },
  {
    "text": "development to understand what went wrong and where it blew up but that's not something we want to leak",
    "start": "630720",
    "end": "635920"
  },
  {
    "text": "out into the public internet we wouldn't want to give people a sort of detailed understanding of how our application works internally it",
    "start": "635920",
    "end": "642560"
  },
  {
    "text": "might be an attack vector so this piece of middleware is registered conditionally by checking the environment we're running in so this app",
    "start": "642560",
    "end": "648880"
  },
  {
    "text": "starts up the configure method gets called and at that point asp.net core has established what environment it's running in",
    "start": "648880",
    "end": "655040"
  },
  {
    "text": "based on environment variables and config settings the other thing you can use here to potentially opt in or out of middleware",
    "start": "655040",
    "end": "662000"
  },
  {
    "text": "at sort of startup is putting uh conditions around your middleware registrations that use",
    "start": "662000",
    "end": "667360"
  },
  {
    "text": "the eye configuration as well so configuration features that you might have set in your app settings.json could",
    "start": "667360",
    "end": "673680"
  },
  {
    "text": "control the startup order for your application the next piece of middleware use https",
    "start": "673680",
    "end": "679519"
  },
  {
    "text": "redirection is a piece of middleware which sort of produces an example of where we might short circuit the request so this",
    "start": "679519",
    "end": "685519"
  },
  {
    "text": "middleware sees the request coming in and if the scheme of that request is http and not https then this",
    "start": "685519",
    "end": "692959"
  },
  {
    "text": "piece of middleware is not going to pass the request on for the rest of the pipeline instead what it's going to do is send",
    "start": "692959",
    "end": "698079"
  },
  {
    "text": "back a redirect to the client and say actually no you need to be using this url that uses https",
    "start": "698079",
    "end": "704240"
  },
  {
    "text": "so this is how https is enforced in asp.net core applications so that's a middleware that sort of",
    "start": "704240",
    "end": "710240"
  },
  {
    "text": "makes that selective decision based on interpreting some of the data that's on the request in the http context",
    "start": "710240",
    "end": "717040"
  },
  {
    "text": "we'll come back to some of these other ones in a while but if we draw that sort of uh sort of set of middleware out",
    "start": "717040",
    "end": "722880"
  },
  {
    "text": "as a diagram this is kind of what it looks like so we have the pipeline being invoked on the left and then middleware gets him",
    "start": "722880",
    "end": "729120"
  },
  {
    "text": "called in the order it was registered top to bottom of the configure method now there's one interesting thing on",
    "start": "729120",
    "end": "734639"
  },
  {
    "text": "this diagram that some of you may be spotting and that's two pieces of middleware show up here that aren't in the configure",
    "start": "734639",
    "end": "740560"
  },
  {
    "text": "method and these get registered in a special way by a different part of asp.net core's startup system",
    "start": "740560",
    "end": "748160"
  },
  {
    "text": "there's a feature in there called i startup filter and this is sorry a startup filter and this is an",
    "start": "748160",
    "end": "755040"
  },
  {
    "text": "interface that you can implement in your applications and register with the di container",
    "start": "755040",
    "end": "760240"
  },
  {
    "text": "and when asp.net core starts up it will run each of those startup filters and the goal of the startup filter is to",
    "start": "760240",
    "end": "765920"
  },
  {
    "text": "register middleware into the pipeline right at the beginning of that pipeline so it doesn't give you as much control",
    "start": "765920",
    "end": "772079"
  },
  {
    "text": "over the placement and ordering of the middleware but certain kinds of middleware do lend themselves to this",
    "start": "772079",
    "end": "777279"
  },
  {
    "text": "so the two examples that microsoft place in there by default is host filtering which is going to look at the host",
    "start": "777279",
    "end": "782720"
  },
  {
    "text": "header and see if it matches the allowed hosts for that application so in your appsettings.json you can",
    "start": "782720",
    "end": "788480"
  },
  {
    "text": "define what hosts your web servers should actually respond for by default it puts in a star so it",
    "start": "788480",
    "end": "794320"
  },
  {
    "text": "allows any host but if you do start adding in hosts hostnames that you support those will get filtered out via that",
    "start": "794320",
    "end": "800720"
  },
  {
    "text": "piece of middleware very early in the pipeline the next one is about dealing with forwarded headers from things like reverse proxies so",
    "start": "800720",
    "end": "806800"
  },
  {
    "text": "typically we'll put our asp.net core applications behind some kind of load balancer maybe even a reverse proxy like",
    "start": "806800",
    "end": "812560"
  },
  {
    "text": "nginx or we may run it behind at iis um and if you do those are typically going to add sort of",
    "start": "812560",
    "end": "818160"
  },
  {
    "text": "exported four type headers onto the request and what we can do in this middleware is translate those into the",
    "start": "818160",
    "end": "824079"
  },
  {
    "text": "standard headers that has connect calls are looking for so once the endpoint that gets the",
    "start": "824079",
    "end": "829920"
  },
  {
    "text": "request handles it and send a response that response then flows back through that middleware pipeline",
    "start": "829920",
    "end": "835040"
  },
  {
    "text": "this time in reverse order we can write our own middleware and the",
    "start": "835040",
    "end": "841760"
  },
  {
    "text": "middleware is basically in line in this example so we can use the app.used method here to",
    "start": "841760",
    "end": "848079"
  },
  {
    "text": "register this inline middleware we get access to a context which is the http context and",
    "start": "848079",
    "end": "854880"
  },
  {
    "text": "the next variable here relates to the request delegate which is the next piece of middleware in the pipeline",
    "start": "854880",
    "end": "860480"
  },
  {
    "text": "so inside this method we can write logic that controls the behavior of this application when it's handling requests",
    "start": "860480",
    "end": "867120"
  },
  {
    "text": "this example is fairly basic so what we're going to do is start a stopwatch as soon as the request comes to us",
    "start": "867120",
    "end": "872399"
  },
  {
    "text": "and then immediately pass it on to the next middleware in the pipeline that will flow through all of the middleware somewhere the response will",
    "start": "872399",
    "end": "878959"
  },
  {
    "text": "be generated the response will generally flow back through the middleware until it reaches us at which point we stop our stopwatch and",
    "start": "878959",
    "end": "885120"
  },
  {
    "text": "in this case just record a metric this is a very sort of low-tech way of adding sort of uh",
    "start": "885120",
    "end": "890160"
  },
  {
    "text": "response timing metrics into an application um i do something a bit like this in a real application just slightly",
    "start": "890160",
    "end": "896000"
  },
  {
    "text": "more sophisticated the only problem with this is we do need a service from di",
    "start": "896000",
    "end": "901839"
  },
  {
    "text": "and although we can get to that by going on to the context accessing request services which is the iservice provider",
    "start": "901839",
    "end": "908160"
  },
  {
    "text": "and then calling get required service we're kind of using the service locator pattern here which isn't super clean so for anything but",
    "start": "908160",
    "end": "915360"
  },
  {
    "text": "really basic middleware i tend to recommend following the pattern of creating a middleware class this is a",
    "start": "915360",
    "end": "920880"
  },
  {
    "text": "class this is basically your middleware component and the other thing you can do with these is add them into libraries",
    "start": "920880",
    "end": "925920"
  },
  {
    "text": "you get packages and share them around your business if you have common features that you want to apply to lots of applications",
    "start": "925920",
    "end": "932240"
  },
  {
    "text": "this doesn't require a particular interface it's all done by a sort of convention and duct typing",
    "start": "932240",
    "end": "937839"
  },
  {
    "text": "so this method um constructor here must accept a request delegate and that is the",
    "start": "937839",
    "end": "943120"
  },
  {
    "text": "representation of the next piece of middleware in the pipeline anything else that we want to take from di we can also have injected into here",
    "start": "943120",
    "end": "950880"
  },
  {
    "text": "then we have the invoke async method and we also must provide this and it must accept the http context",
    "start": "950880",
    "end": "956720"
  },
  {
    "text": "representing the current request the code inside here is basically what we just looked at in line",
    "start": "956720",
    "end": "962079"
  },
  {
    "text": "except now we're using the dependency injected iometric recorder and our code has all now been nicely",
    "start": "962079",
    "end": "968639"
  },
  {
    "text": "wrapped up in this single class to call this from our application code then we can now use the",
    "start": "968639",
    "end": "974800"
  },
  {
    "text": "use middleware extension method on the eye application builder to register our middleware so in this example we're registering this really",
    "start": "974800",
    "end": "981279"
  },
  {
    "text": "early in the pipeline so we can time the end to end request",
    "start": "981279",
    "end": "986320"
  },
  {
    "text": "if you want to get a little bit cleaner with that kind of stuff and you're building maybe libraries you're sharing around a good sort of best practice there is to",
    "start": "986880",
    "end": "994240"
  },
  {
    "text": "build these extension methods on the our application builder so inside your extension method you just call use middleware",
    "start": "994240",
    "end": "1000399"
  },
  {
    "text": "but now this means that as a caller when they're adding this into the pipeline it's just a little bit cleaner a little",
    "start": "1000399",
    "end": "1005440"
  },
  {
    "text": "bit clearer what's being added and all of those middleware that we're seeing added by default use this convention of providing",
    "start": "1005440",
    "end": "1012000"
  },
  {
    "text": "an extension method for registering the middleware the next thing i want to talk about is",
    "start": "1012000",
    "end": "1018800"
  },
  {
    "text": "endpoint routing and this is quite a deep topic um it could probably sort of take up a whole",
    "start": "1018800",
    "end": "1024160"
  },
  {
    "text": "session in its own uh but what i'm going to do is try and give you the highlights so in asp.net core 2.2 the team",
    "start": "1024160",
    "end": "1030720"
  },
  {
    "text": "introduced this endpoint routing feature before asp.net core 2.2 what would happen is the",
    "start": "1030720",
    "end": "1036240"
  },
  {
    "text": "request would flow through middleware and the final piece of middleware would be mvc middleware usually and the mvc",
    "start": "1036240",
    "end": "1042240"
  },
  {
    "text": "middleware would receive the request and then use the sort of mvc part of the framework to actually process the",
    "start": "1042240",
    "end": "1047839"
  },
  {
    "text": "request and inside there mvc would do all of the logic for figuring out where that",
    "start": "1047839",
    "end": "1052880"
  },
  {
    "text": "request should root are you which controller and which action now that worked just worked just",
    "start": "1052880",
    "end": "1058240"
  },
  {
    "text": "fine but the problem is it meant that mvc is the only component in the entire sort of application pipeline",
    "start": "1058240",
    "end": "1064000"
  },
  {
    "text": "that can actually know where a request is going to be rooted i what controller and what action and this means that if we want to do",
    "start": "1064000",
    "end": "1069760"
  },
  {
    "text": "something like authorization for example we can't do that until we're inside mvc",
    "start": "1069760",
    "end": "1074960"
  },
  {
    "text": "because we haven't determined yet which action is going to get invoked and if if we know what once we know what",
    "start": "1074960",
    "end": "1080480"
  },
  {
    "text": "that action is we can determine does it require authorization and if so what level of authorization",
    "start": "1080480",
    "end": "1085919"
  },
  {
    "text": "so what the team did in 2.2 which wasn't on by default um but has since been switched on and made the default pattern in three zero",
    "start": "1085919",
    "end": "1092880"
  },
  {
    "text": "and 3.1 is introduce endpoint routing so with endpoint routing all of the routing logic has been lifted",
    "start": "1092880",
    "end": "1099520"
  },
  {
    "text": "up outside of mvc so it stands alone as additional middleware in the application and what this means is we",
    "start": "1099520",
    "end": "1105600"
  },
  {
    "text": "can do further things based on that routing with inside the middleware pipeline directly",
    "start": "1105600",
    "end": "1110960"
  },
  {
    "text": "so the easiest way to come try and understand this is to take a look at the digger method again so the first piece",
    "start": "1110960",
    "end": "1116320"
  },
  {
    "text": "of middleware for routing is newsrooting and this piece of middleware when the application is running it's responsible for interpreting what",
    "start": "1116320",
    "end": "1123200"
  },
  {
    "text": "the request is looking for so is it a get request and what's the path it's going to be and matching that to one of the known",
    "start": "1123200",
    "end": "1129679"
  },
  {
    "text": "routes for the application but no routes get figured out at startup but they can also be updated",
    "start": "1129679",
    "end": "1135520"
  },
  {
    "text": "at runtime as well so use routing is about figuring out what endpoint is going to be called",
    "start": "1135520",
    "end": "1140799"
  },
  {
    "text": "the further down middleware here use endpoints is about actually invoking that endpoint so now we know where we're",
    "start": "1140799",
    "end": "1146400"
  },
  {
    "text": "going to send this request send it there the bit that is slightly confusing is that within use endpoints",
    "start": "1146400",
    "end": "1151520"
  },
  {
    "text": "you have this delegate to set up the endpoints so this doesn't actually happen as the app's running this kind of",
    "start": "1151520",
    "end": "1157440"
  },
  {
    "text": "happens earlier and in this case we're using the convenience method map controllers which basically means that startup the",
    "start": "1157440",
    "end": "1163760"
  },
  {
    "text": "application is going to locate all of the controllers in the assembly find all of the action methods that relate to those controllers",
    "start": "1163760",
    "end": "1170000"
  },
  {
    "text": "and then figure out how they should map to routing uh so you know are they get methods are",
    "start": "1170000",
    "end": "1175679"
  },
  {
    "text": "they uh what route attributes do they have and that will build up this routing table so these two pieces work together what",
    "start": "1175679",
    "end": "1182720"
  },
  {
    "text": "this means is that between these two pieces of middleware we're kind of in what they call the routing zone this is",
    "start": "1182720",
    "end": "1187840"
  },
  {
    "text": "where we have middleware that now knows where this request is going to end up and this means that these two pieces of",
    "start": "1187840",
    "end": "1194160"
  },
  {
    "text": "middleware are what we call endpoint aware so this means that they both can understand what",
    "start": "1194160",
    "end": "1199760"
  },
  {
    "text": "endpoint this request is going to end up at and also have a bunch of metadata about that endpoint",
    "start": "1199760",
    "end": "1204799"
  },
  {
    "text": "that allow them to determine if they need to take action so use authorization for example didn't exist",
    "start": "1204799",
    "end": "1210480"
  },
  {
    "text": "as middleware before 3.0 because it had to happen inside mvc now it's middleware because it can",
    "start": "1210480",
    "end": "1217440"
  },
  {
    "text": "look at the request it can tell which endpoint that's going to map to and it will be able to check if there's",
    "start": "1217440",
    "end": "1222480"
  },
  {
    "text": "an authorized attribute for example on the action method and if there is but the user hasn't logged in then we can return the",
    "start": "1222480",
    "end": "1228799"
  },
  {
    "text": "challenge response to them because we know that they're not allowed to see that without logging in",
    "start": "1228799",
    "end": "1234159"
  },
  {
    "text": "the easiest way to get a bit of a feel for how this works and excuse me sort of leaning in as i uh as i demo this is to",
    "start": "1234159",
    "end": "1239280"
  },
  {
    "text": "actually look uh as a little sample app um all of the slides and all of the code i'm going to show",
    "start": "1239280",
    "end": "1245120"
  },
  {
    "text": "you is online i'll make sure i point out the link at the end and i'll share it in the chat as well so you can get a look at all of this",
    "start": "1245120",
    "end": "1252320"
  },
  {
    "text": "so inside my startup class in my little sample app here i've got two pools to use middleware so i've got",
    "start": "1252320",
    "end": "1257760"
  },
  {
    "text": "one here before use routing and one after use routing it's the same piece of middleware but",
    "start": "1257760",
    "end": "1263120"
  },
  {
    "text": "we're going to run it once before we use routing and once after if we take a look at the code for this",
    "start": "1263120",
    "end": "1269120"
  },
  {
    "text": "um it's a fairly simple piece of middleware and when invoke async gets called what",
    "start": "1269120",
    "end": "1274400"
  },
  {
    "text": "it's going to do is it's going to first call get endpoint on the http context",
    "start": "1274400",
    "end": "1279679"
  },
  {
    "text": "and so if endpoint routing has uh sorry use routing has already been called and it's matched this to an endpoint",
    "start": "1279679",
    "end": "1286640"
  },
  {
    "text": "this will contain details about what about what that endpoint is if it hasn't matched then this would just be null",
    "start": "1286640",
    "end": "1293520"
  },
  {
    "text": "so in this piece of middleware i'm just uh conditionally dumping data out to the logs so i'm saying if it's a type root",
    "start": "1293520",
    "end": "1299600"
  },
  {
    "text": "endpoint which is the type that action methods typically are maps to then",
    "start": "1299600",
    "end": "1304799"
  },
  {
    "text": "write out the display name the root pattern that matched it and any metadata and if it's null we'll just write that",
    "start": "1304799",
    "end": "1311200"
  },
  {
    "text": "out now if i run this code in postman i'm just going to make a request to one",
    "start": "1311200",
    "end": "1317200"
  },
  {
    "text": "of my endpoints here and this is coming through that middleware this is coming through the first time so this is before",
    "start": "1317200",
    "end": "1322320"
  },
  {
    "text": "we pulled um use routine so here the endpoint is null because user routing hasn't yet run to",
    "start": "1322320",
    "end": "1329600"
  },
  {
    "text": "match this to a particular endpoint so at this point we can't really do anything based on that root information",
    "start": "1329600",
    "end": "1335280"
  },
  {
    "text": "but if i continue it will flow through this the first middleware it'll flow through user routing and it will come",
    "start": "1335280",
    "end": "1340720"
  },
  {
    "text": "back in to our second registration of this same middleware and this time we do have an endpoint so this endpoint",
    "start": "1340720",
    "end": "1347520"
  },
  {
    "text": "has some metadata we know that this is going to go to the books controller and the get method uh we have a bunch of metadata which is",
    "start": "1347520",
    "end": "1354320"
  },
  {
    "text": "just really a collection of any kind of object that we know about this endpoint so in this case we can see all of the",
    "start": "1354320",
    "end": "1360000"
  },
  {
    "text": "attributes that apply to the controller and the actions within it and so this allows us to make decisions",
    "start": "1360000",
    "end": "1366559"
  },
  {
    "text": "by inspecting this uh if we can fly out certain metadata we might be able to decide on what to do",
    "start": "1366559",
    "end": "1372159"
  },
  {
    "text": "so for example if we had the authorize attribute on an action method that would show up here and that's",
    "start": "1372159",
    "end": "1377440"
  },
  {
    "text": "exactly what use authorization is using to make determinations about whether or not someone's allowed to continue their",
    "start": "1377440",
    "end": "1382799"
  },
  {
    "text": "request or not i'll just continue that request and greatly we've got a response there",
    "start": "1382799",
    "end": "1390080"
  },
  {
    "text": "so after we've run all of the middleware pipeline and the application moved through um we're going to then",
    "start": "1393200",
    "end": "1399280"
  },
  {
    "text": "enter into mvc so mvc is the programming paradigm that hopefully many of you are familiar",
    "start": "1399280",
    "end": "1405120"
  },
  {
    "text": "with it's the model view controller approach it is this is used for web api development still where we have",
    "start": "1405120",
    "end": "1411919"
  },
  {
    "text": "these models and controllers you can use it for ui applications if you're applying views as well",
    "start": "1411919",
    "end": "1418159"
  },
  {
    "text": "and razer pages itself sits on top of this model and it's kind of a layer over the top so inside mvc we have",
    "start": "1418159",
    "end": "1426480"
  },
  {
    "text": "controllers and this is a basic example so a controller can derive from controller base which",
    "start": "1426480",
    "end": "1431840"
  },
  {
    "text": "provides it some default behaviors that we might need we have the api controller attribute",
    "start": "1431840",
    "end": "1437440"
  },
  {
    "text": "which is going to add some features on for apis using some of the techniques we're about to see it has the root attribute",
    "start": "1437440",
    "end": "1444000"
  },
  {
    "text": "so this is how the routing system uh when it's mapping the controller roots can determine what the root should be in",
    "start": "1444000",
    "end": "1449120"
  },
  {
    "text": "this case the square brackets and controller means use the name so slash books without the controller suffix",
    "start": "1449120",
    "end": "1455840"
  },
  {
    "text": "and inside here we can inject things via dependency injection if we want to and we can then create action methods",
    "start": "1455840",
    "end": "1461679"
  },
  {
    "text": "any public method of a controller is considered an action method by default so in this case the action",
    "start": "1461679",
    "end": "1467520"
  },
  {
    "text": "method is a get it doesn't have any parameters it has the http get",
    "start": "1467520",
    "end": "1472880"
  },
  {
    "text": "attribute which ensures that uh only get requests will map to this endpoint and it returns some kind of i",
    "start": "1472880",
    "end": "1479440"
  },
  {
    "text": "action result in this case we're using the action result of t which basically says we're",
    "start": "1479440",
    "end": "1484960"
  },
  {
    "text": "going to return a result with some data and this is the type of that data and in this case it's using uh the ok",
    "start": "1484960",
    "end": "1490880"
  },
  {
    "text": "method here which comes from the controller base that's going to translate to an ok object result",
    "start": "1490880",
    "end": "1496720"
  },
  {
    "text": "and that object result has an object in this case it's the the list of books that we've retrieved from some repository system",
    "start": "1496720",
    "end": "1502720"
  },
  {
    "text": "don't worry too much about action results at the moment we'll be getting to them in a moment",
    "start": "1502720",
    "end": "1508080"
  },
  {
    "text": "so next uh we'll just take a quick dive into mvc at a 10 000 foot view before we go a little bit",
    "start": "1509120",
    "end": "1515279"
  },
  {
    "text": "deeper so once we enter mvc some code is going to run and eventually",
    "start": "1515279",
    "end": "1520720"
  },
  {
    "text": "uh the controller factory is going to need to create an instance of the controller so this is where we initialize and instance the controller",
    "start": "1520720",
    "end": "1526960"
  },
  {
    "text": "her request once we have the controller some more code will run and eventually",
    "start": "1526960",
    "end": "1532320"
  },
  {
    "text": "an action invoker will kick in and that that job there is to actually call your action method so whatever",
    "start": "1532320",
    "end": "1538400"
  },
  {
    "text": "method has mapped to the request that's being handled after that we have that by action result and the i action result",
    "start": "1538400",
    "end": "1544880"
  },
  {
    "text": "doesn't represent data at this point it represents a strongly typed model of what data and what type of http",
    "start": "1544880",
    "end": "1552320"
  },
  {
    "text": "response we may be sending only gets converted into a actual http response",
    "start": "1552320",
    "end": "1558159"
  },
  {
    "text": "when we execute the i action result and that happens in the result execution phase",
    "start": "1558159",
    "end": "1563679"
  },
  {
    "text": "finally that data then gets returned so in the case of an api normally we're just going to return",
    "start": "1563679",
    "end": "1569279"
  },
  {
    "text": "serialized json data if you're doing uh something with views then the view rendering phase takes",
    "start": "1569279",
    "end": "1574960"
  },
  {
    "text": "place here so the view result which takes the view and the model and kind of combines them together and then executes",
    "start": "1574960",
    "end": "1581440"
  },
  {
    "text": "them to produce html will run we're going to be focusing more on the data result option here",
    "start": "1581440",
    "end": "1588080"
  },
  {
    "text": "so what happens after uh we enter mvc is we basically run through what's called the filter pipeline it is a pipeline",
    "start": "1588159",
    "end": "1594480"
  },
  {
    "text": "that handles how mvc sort of responds to requests internally",
    "start": "1594480",
    "end": "1599760"
  },
  {
    "text": "and you can kind of think of this really a very big state machine nvc is basically a state machine",
    "start": "1599760",
    "end": "1604880"
  },
  {
    "text": "that runs through different states as the request flows through uh bumping it through the various states",
    "start": "1604880",
    "end": "1610080"
  },
  {
    "text": "until it flows back out again so where this starts from um is we have",
    "start": "1610080",
    "end": "1615679"
  },
  {
    "text": "the middleware on the left there which represents the you know the middleware pipeline that",
    "start": "1615679",
    "end": "1620880"
  },
  {
    "text": "we've already seen and the request is going to flow from the left so the first thing that happens inside",
    "start": "1620880",
    "end": "1626880"
  },
  {
    "text": "mvc is high authorization filters will get executed so eye authorization filters are a place",
    "start": "1626880",
    "end": "1633760"
  },
  {
    "text": "where we can run authorization code in the on authorization method now because of endpoint routing today",
    "start": "1633760",
    "end": "1641520"
  },
  {
    "text": "these pretty much will probably do nothing because now use authorization is its own middleware and has probably already run then the",
    "start": "1641520",
    "end": "1648559"
  },
  {
    "text": "authorization filters will be able to detect that and won't run again only if uh use",
    "start": "1648559",
    "end": "1654080"
  },
  {
    "text": "authorization hasn't been called earlier would authorization kick in inside the mvc feature set itself",
    "start": "1654080",
    "end": "1660559"
  },
  {
    "text": "you can write your own authorization filter you implement eye authorization filter but it's really not recommended to do so",
    "start": "1660559",
    "end": "1667919"
  },
  {
    "text": "the reason for that is there's a whole authorization system inside asp.net core that's built to be",
    "start": "1667919",
    "end": "1673120"
  },
  {
    "text": "very pluggable and very controllable so the recommended pattern if you need to customize authorization logic is to use",
    "start": "1673120",
    "end": "1679919"
  },
  {
    "text": "authorization policies and authorization handlers maybe even resource base off but all of those are",
    "start": "1679919",
    "end": "1685200"
  },
  {
    "text": "kind of higher level features and the eye authorization filter that's registered by default will kick in",
    "start": "1685200",
    "end": "1690720"
  },
  {
    "text": "and execute those policies for us so don't normally want to be modifying",
    "start": "1690720",
    "end": "1696000"
  },
  {
    "text": "these authorization filters might short-circuit the pipeline so if someone isn't allowed to um run then they will",
    "start": "1696000",
    "end": "1703360"
  },
  {
    "text": "be getting the forbidden result in this case because we've said actually the thing you're trying to access you're not",
    "start": "1703360",
    "end": "1708799"
  },
  {
    "text": "allowed to see the next filter in the pipeline is resource filters",
    "start": "1708799",
    "end": "1714320"
  },
  {
    "text": "so these kick in immediately after authorization will have run and they have an on resource executing",
    "start": "1714320",
    "end": "1719679"
  },
  {
    "text": "method and at this point again we can do some additional cross-cutting concerns that wrap the entire mvc request response pipeline",
    "start": "1719679",
    "end": "1728320"
  },
  {
    "text": "excuse me the only problem with this is that again this is a feature that's kind of been taken away",
    "start": "1728320",
    "end": "1734240"
  },
  {
    "text": "now we have the concept of endpoint aware middleware it's better to write middleware that inspects the",
    "start": "1734240",
    "end": "1739600"
  },
  {
    "text": "endpoints and makes conditional decisions about whether it runs or not previously the reason you'd use an eye resource filter",
    "start": "1739600",
    "end": "1746240"
  },
  {
    "text": "is because you'd want to know and you would know at this stage which controller and which action is going to",
    "start": "1746240",
    "end": "1751440"
  },
  {
    "text": "get the request so resource filters do allow us some functionality though and we'll take a look at one shortly",
    "start": "1751440",
    "end": "1757520"
  },
  {
    "text": "again a resource filter can short-circuit the pipeline if it wants to returning some kind of result and then",
    "start": "1757520",
    "end": "1764240"
  },
  {
    "text": "if not it will pass the request into the rest of mvc nvc is going to do all of its work and",
    "start": "1764240",
    "end": "1769760"
  },
  {
    "text": "it's going to return the response and on the way out on resource executed gets called and we have another final opportunity",
    "start": "1769760",
    "end": "1775760"
  },
  {
    "text": "to potentially change or augment behavior based on the result that's going out",
    "start": "1775760",
    "end": "1782480"
  },
  {
    "text": "so let's have a look at another quick demo here so what i'm going to do is look at an",
    "start": "1782799",
    "end": "1789600"
  },
  {
    "text": "example of a very basic resource tool",
    "start": "1789600",
    "end": "1794880"
  },
  {
    "text": "so in this example uh what i'm doing if i just make this fit onto the large font size um so this is",
    "start": "1794880",
    "end": "1801200"
  },
  {
    "text": "an iron resource filter um it's got an on resource executing method that we're using and what we're saying in here is",
    "start": "1801200",
    "end": "1808080"
  },
  {
    "text": "read the response see if there's a request header called preview and if there is what's it that is value",
    "start": "1808080",
    "end": "1814159"
  },
  {
    "text": "so the idea is that we're going to have a section of our api that isn't behind authorization but that",
    "start": "1814159",
    "end": "1819760"
  },
  {
    "text": "does require someone to opt into accessing it because it's not yet complete so we're saying if they haven't got the",
    "start": "1819760",
    "end": "1826240"
  },
  {
    "text": "preview header or if they've got the header and it's false then we're going to short circuit the pipeline we do that by setting the",
    "start": "1826240",
    "end": "1832240"
  },
  {
    "text": "result on the context so here we're saying just pretend that you couldn't find the resource turn the not found result",
    "start": "1832240",
    "end": "1838559"
  },
  {
    "text": "otherwise we'll just continue through and we'll just add a response header and by default because we haven't set",
    "start": "1838559",
    "end": "1844159"
  },
  {
    "text": "the context the mvc state machine will just pass this on to either the next filter or to the next",
    "start": "1844159",
    "end": "1849279"
  },
  {
    "text": "part of the processing pipeline the way i've applied this resource filter is i've got this author's",
    "start": "1849279",
    "end": "1854799"
  },
  {
    "text": "controller in my application and in this case i've added my my filter to the controller",
    "start": "1854799",
    "end": "1860399"
  },
  {
    "text": "so you can add filters either to action methods or to entire controllers so all action",
    "start": "1860399",
    "end": "1866240"
  },
  {
    "text": "methods of the controller or globally for all actions or controllers so here we said apply this to anything",
    "start": "1866240",
    "end": "1872880"
  },
  {
    "text": "under authors that we want that feature so this is the method we're going to call here",
    "start": "1872880",
    "end": "1879360"
  },
  {
    "text": "so hopefully we'll make our request and i haven't set any preview headers at the moment so i make my request",
    "start": "1879360",
    "end": "1885600"
  },
  {
    "text": "and we get a 404 not found response what's interesting is we never even hit this action method so because",
    "start": "1885600",
    "end": "1892080"
  },
  {
    "text": "we had a filter in place that short-circuited this request pipeline it never even made it as far as an",
    "start": "1892080",
    "end": "1897360"
  },
  {
    "text": "action method if i add on a preview header here that has the value of true and resend this request through you can",
    "start": "1897360",
    "end": "1904480"
  },
  {
    "text": "see now it does hit the action method inside here because it passed through the filter and if i continue that",
    "start": "1904480",
    "end": "1910640"
  },
  {
    "text": "um you can see that we get the the fake data from this endpoint so this is one of the ways that we can",
    "start": "1910640",
    "end": "1916240"
  },
  {
    "text": "filter that behavior now today we could write that with endpoint aware middleware because we could also look for the presence of an",
    "start": "1916240",
    "end": "1921840"
  },
  {
    "text": "attribute on the metadata after the use routing has been called and we could have middleware that then",
    "start": "1921840",
    "end": "1927440"
  },
  {
    "text": "says if this attribute is present apply this same behavior",
    "start": "1927440",
    "end": "1934000"
  },
  {
    "text": "we'll come back to slides and we'll continue the journey shortly uh so the next filter is middle air",
    "start": "1934000",
    "end": "1939760"
  },
  {
    "text": "filters and these are really just a special kind of resource filter and you might wonder why we have a filter for middleware when",
    "start": "1939760",
    "end": "1945600"
  },
  {
    "text": "we can run middleware in the pipeline and this again stems from the pre endpoint routine days where we might want to apply some",
    "start": "1945600",
    "end": "1953039"
  },
  {
    "text": "middleware but only selectively to some endpoints and the only way to do that before endpoint routing was to do it inside the",
    "start": "1953039",
    "end": "1959760"
  },
  {
    "text": "mvc pipeline where we knew the end point where we knew the controller and action that we were going to invoke so again",
    "start": "1959760",
    "end": "1965440"
  },
  {
    "text": "middleware filters may short-circuit the pipeline here's a very basic example we're not going to use one uh in the demos because",
    "start": "1965440",
    "end": "1972640"
  },
  {
    "text": "it's pretty much depreciated now but basically what you do is create a class that has a configure method so",
    "start": "1972640",
    "end": "1978159"
  },
  {
    "text": "very much like the signature of the startup class and in there you have the eye application builder and you call various",
    "start": "1978159",
    "end": "1984320"
  },
  {
    "text": "methods to add in the middleware that you want um in this case we're adding the response compression",
    "start": "1984320",
    "end": "1989679"
  },
  {
    "text": "middleware only and then to conditionally apply that to a controller you use the middleware filter attribute",
    "start": "1989679",
    "end": "1995760"
  },
  {
    "text": "passing in the type of the middleware pipeline that you want to use and so this means in this example",
    "start": "1995760",
    "end": "2001440"
  },
  {
    "text": "anything that goes through the office controller will also run that additional middleware to potentially apply",
    "start": "2001440",
    "end": "2006799"
  },
  {
    "text": "response compression so all of these first three filters are places we can",
    "start": "2006799",
    "end": "2011919"
  },
  {
    "text": "customize logic but they're all places where the behavior of doing so has pretty much been replaced by using",
    "start": "2011919",
    "end": "2018480"
  },
  {
    "text": "endpoint routing and the endpoint aware middleware so if you find yourself writing these",
    "start": "2018480",
    "end": "2024000"
  },
  {
    "text": "do have a think and see oh can we do this if we do get endpoint in our middleware and then we look at the attributes that",
    "start": "2024000",
    "end": "2029840"
  },
  {
    "text": "are on those endpoints can we make the same sort of decisions about whether we're filtering the requests and doing",
    "start": "2029840",
    "end": "2035279"
  },
  {
    "text": "something special with them or not so the next phase after this initial step is the controller creations this is",
    "start": "2035279",
    "end": "2042000"
  },
  {
    "text": "where the factory for creating controllers is going to run it's going to create an instance of the controller for that",
    "start": "2042000",
    "end": "2047679"
  },
  {
    "text": "particular request and then the next phase begins which is all around invoking the action on that",
    "start": "2047679",
    "end": "2054000"
  },
  {
    "text": "on that controller that we're going to be sending the request through so the first piece of that and one of",
    "start": "2054000",
    "end": "2059440"
  },
  {
    "text": "the most important is model binding we have to map any data that we need off",
    "start": "2059440",
    "end": "2065200"
  },
  {
    "text": "of a request and match it to parameters of the action method because the action method we've looked at so far",
    "start": "2065200",
    "end": "2071760"
  },
  {
    "text": "had no parameters but it's very common for example you might have an endpoint that allows you to get data about one",
    "start": "2071760",
    "end": "2077200"
  },
  {
    "text": "particular book and that might take an int id as one of its parameters",
    "start": "2077200",
    "end": "2082240"
  },
  {
    "text": "and so somehow mvc needs to work out what id you want to pass into that action method when it gets invoked",
    "start": "2082240",
    "end": "2088320"
  },
  {
    "text": "and that's where model binding comes in so mvc has a suite of model binders",
    "start": "2088320",
    "end": "2093679"
  },
  {
    "text": "by default and many of these will handle sort of 99 of your scenarios the model",
    "start": "2093679",
    "end": "2099760"
  },
  {
    "text": "binders are basically responsible for saying okay given this type that i'm trying to create so maybe the int id do i have a",
    "start": "2099760",
    "end": "2107040"
  },
  {
    "text": "model binder that can provide integers and map them off of the request so there's a simple type model binder",
    "start": "2107040",
    "end": "2113200"
  },
  {
    "text": "that's responsible for these kind of basic operations and potentially making sure that the",
    "start": "2113200",
    "end": "2118240"
  },
  {
    "text": "data coming in on that request could be set to the value so it's easier to see that in a little bit of an example so",
    "start": "2118240",
    "end": "2124480"
  },
  {
    "text": "here we've got a search method which has two parameters we have a string keyword and an int page size so somehow",
    "start": "2124480",
    "end": "2132320"
  },
  {
    "text": "when this action method is invoked we need that data we need those parameters so mvc has",
    "start": "2132320",
    "end": "2137680"
  },
  {
    "text": "a series of what are known as value providers and these are the the things that basically inspect parts of the request like the query string",
    "start": "2137680",
    "end": "2144640"
  },
  {
    "text": "like the headers and see if there's values on there that could potentially fulfill the requirements of the action",
    "start": "2144640",
    "end": "2150400"
  },
  {
    "text": "method so here for example we require a keyword on the string so the value providers are",
    "start": "2150400",
    "end": "2157839"
  },
  {
    "text": "going to be asked do you have a value that could potentially satisfy this well value providers are essentially a",
    "start": "2157839",
    "end": "2163440"
  },
  {
    "text": "key value sort of lookup so they say well yeah i've got something called keyword here's its value i'll pump that into",
    "start": "2163440",
    "end": "2169280"
  },
  {
    "text": "this action method when we invoke it integers very similar so here we have a page size that matches",
    "start": "2169280",
    "end": "2174960"
  },
  {
    "text": "on the query string as well and as long as the value of that is a valid integer that could also be used to satisfy this request",
    "start": "2174960",
    "end": "2182720"
  },
  {
    "text": "where things get more complex is when you've got um sort of strongly typed input models for things like post",
    "start": "2182720",
    "end": "2188720"
  },
  {
    "text": "requests so if we have an endpoint that allows us to post a book into the system we'll probably accept maybe a book input",
    "start": "2188720",
    "end": "2195040"
  },
  {
    "text": "model and on there we'll have a number of properties like id title isbn number for example so we need",
    "start": "2195040",
    "end": "2201200"
  },
  {
    "text": "to get those bound from the data on the request and most likely that data exists in the actual request body so this is",
    "start": "2201200",
    "end": "2208079"
  },
  {
    "text": "where input formatters come in input formatters can look at the content type of the request coming in",
    "start": "2208079",
    "end": "2213520"
  },
  {
    "text": "and determining can i take that content and can i turn it into an object so in the case of mvc by default there's",
    "start": "2213520",
    "end": "2220640"
  },
  {
    "text": "a json input formatter that's registered so if the content type is application json",
    "start": "2220640",
    "end": "2225680"
  },
  {
    "text": "the model binder will use the input formatter for json to try and deserialize the content of",
    "start": "2225680",
    "end": "2231680"
  },
  {
    "text": "the request body and turn it into whatever object we're trying to bind and so we can use the default input",
    "start": "2231680",
    "end": "2237920"
  },
  {
    "text": "formatter for json we can add a default formatter that is included in the box but not enabled for xml",
    "start": "2237920",
    "end": "2244400"
  },
  {
    "text": "or you can write your own if you've got uh requirements use protobuf or message pack or your own proprietary binary serialization format",
    "start": "2244400",
    "end": "2251839"
  },
  {
    "text": "you can write a formatter to interpret that data off of the request let's have a quick look at model binding",
    "start": "2251839",
    "end": "2258720"
  },
  {
    "text": "we won't spend too long on this because again it's a feature that you can easily overuse",
    "start": "2258720",
    "end": "2265040"
  },
  {
    "text": "um but i have one example that i have used in practice that i think is fairly reasonable so here i've got a method",
    "start": "2265040",
    "end": "2272320"
  },
  {
    "text": "which allows us to search for a set of books by the the date range that they were published within so my method accepts this date range",
    "start": "2272320",
    "end": "2279200"
  },
  {
    "text": "type if we take a look at date range we'll see it's a fairly simple struct",
    "start": "2279200",
    "end": "2284320"
  },
  {
    "text": "it's got a start date and an end date the important thing is these are read only so these are getters but no setters",
    "start": "2284320",
    "end": "2290800"
  },
  {
    "text": "so the only way to create this object is through the constructor and then from then on it's considered immutable",
    "start": "2290800",
    "end": "2296480"
  },
  {
    "text": "and in here we do some logic around um the date as well so the end date can't be before the start date that wouldn't",
    "start": "2296480",
    "end": "2301920"
  },
  {
    "text": "be valid for our day range concept now one option if we wanted to avoid",
    "start": "2301920",
    "end": "2307200"
  },
  {
    "text": "custom model binding here is that we could just have a simpler type that does have a getter and a set of two properties basically an input model",
    "start": "2307200",
    "end": "2315200"
  },
  {
    "text": "and we could map to that and then we could try and create our mutable date range as our domain model",
    "start": "2315200",
    "end": "2320320"
  },
  {
    "text": "inside our controller and generally for more complex types that's pretty reasonable but for something as",
    "start": "2320320",
    "end": "2326320"
  },
  {
    "text": "simple as this where we might use this across a number of action methods in our in our controllers this makes makes",
    "start": "2326320",
    "end": "2332960"
  },
  {
    "text": "quite a lot of sense so if we take a look at what the binder looks like quickly here we basically have the code for",
    "start": "2332960",
    "end": "2340000"
  },
  {
    "text": "binding and i won't talk about every step here i'll try and summarize it and you can take a look at the comments in the code yourself",
    "start": "2340000",
    "end": "2346160"
  },
  {
    "text": "afterwards basically what we're saying is when you're trying to bind we expect by convention in our system",
    "start": "2346160",
    "end": "2352720"
  },
  {
    "text": "the start date and then data have these names on on some of the data however it's provided that could be in query string",
    "start": "2352720",
    "end": "2358880"
  },
  {
    "text": "it could be on the root parameters for example so then what we say is we ask them the value provider system do you have any",
    "start": "2358880",
    "end": "2365359"
  },
  {
    "text": "values with these keys these names and it will return to us a result which can be",
    "start": "2365359",
    "end": "2370560"
  },
  {
    "text": "none one or many values that match in this case if if we've got none we",
    "start": "2370560",
    "end": "2375680"
  },
  {
    "text": "haven't got the values we want what we're going to do is we're going to add a model error to the model state so the model state is",
    "start": "2375680",
    "end": "2381520"
  },
  {
    "text": "a representation of how the binding has gone basically and mvc can use this for future uh",
    "start": "2381520",
    "end": "2388160"
  },
  {
    "text": "validation steps in handling the response so the model state here we add an error saying okay we",
    "start": "2388160",
    "end": "2393839"
  },
  {
    "text": "didn't find the start of date or end date something failed we set the result as failed and we simply return",
    "start": "2393839",
    "end": "2400000"
  },
  {
    "text": "otherwise if we do have those values we set the model state to say yep we found the values these are the values we're going to use",
    "start": "2400000",
    "end": "2406079"
  },
  {
    "text": "we then access those values which are by default strings so then we then pass those strings to",
    "start": "2406079",
    "end": "2411280"
  },
  {
    "text": "dates because a date should conform to a sort of well-known date structure",
    "start": "2411280",
    "end": "2416480"
  },
  {
    "text": "and if we parse them and they're both been able to be parsed correctly now we can create our date range object",
    "start": "2416480",
    "end": "2421599"
  },
  {
    "text": "here and so this date range object uh takes the start date and end date",
    "start": "2421599",
    "end": "2428480"
  },
  {
    "text": "then we set the result on the binding context as successful and we set the object that we successfully bound",
    "start": "2428480",
    "end": "2434000"
  },
  {
    "text": "if this fails so if there's an argument exception because the end date's invalid for example then we'll again set model state",
    "start": "2434000",
    "end": "2440560"
  },
  {
    "text": "as failed and we'll add a model error there so that's pretty much the binder there's",
    "start": "2440560",
    "end": "2445839"
  },
  {
    "text": "two ways we can add binding support to an application so the first is in the configure services method when we",
    "start": "2445839",
    "end": "2451920"
  },
  {
    "text": "add nvc or we add controllers in this example we can add to the model binder provider list",
    "start": "2451920",
    "end": "2458319"
  },
  {
    "text": "a model binder provider specifically for our requirements we insert this one in position zero so",
    "start": "2458319",
    "end": "2463839"
  },
  {
    "text": "it runs first and this model binder provider is a fairly simple class that implements our",
    "start": "2463839",
    "end": "2469119"
  },
  {
    "text": "model binder provider and it then has this get binder method and on here we get access to the model",
    "start": "2469119",
    "end": "2475599"
  },
  {
    "text": "type that's trying to be bound and so our comparison is if it's a date range yes we can supply a date range",
    "start": "2475599",
    "end": "2481520"
  },
  {
    "text": "binder for that if not we'll return null which means we haven't found a suitable binder and then the other providers will get",
    "start": "2481520",
    "end": "2487680"
  },
  {
    "text": "asked can you can you match this then this works if you don't own the type in this example we own",
    "start": "2487680",
    "end": "2494000"
  },
  {
    "text": "the date range struct so what we can actually do is add an attribute directly to it that controls the model binder that's",
    "start": "2494000",
    "end": "2499440"
  },
  {
    "text": "used as well so if you own the type this attribute-based approach is quite straightforward",
    "start": "2499440",
    "end": "2505200"
  },
  {
    "text": "if you don't own the type and it's from some external library and you can't modify it then maybe you would use the model",
    "start": "2505200",
    "end": "2511359"
  },
  {
    "text": "binder provider approach so let's see how this works if i go to",
    "start": "2511359",
    "end": "2516480"
  },
  {
    "text": "another endpoint that we're going to call so by range we provide the start date and an end date and we're going to make the request",
    "start": "2516480",
    "end": "2523440"
  },
  {
    "text": "you can see yep we get we get a result if um i change the date on this so that",
    "start": "2523440",
    "end": "2529440"
  },
  {
    "text": "the start date is earlier than the end date which we consider invalid in our system",
    "start": "2529440",
    "end": "2534640"
  },
  {
    "text": "and send again uh you'll see now we get a 400 valve request from the system and it gives us the detail of what's",
    "start": "2534640",
    "end": "2541280"
  },
  {
    "text": "failed in our model so because we've added this custom model binder in we've added this additional logic i'll undo",
    "start": "2541280",
    "end": "2547040"
  },
  {
    "text": "that so i don't forget in a moment",
    "start": "2547040",
    "end": "2551839"
  },
  {
    "text": "after model binding has run uh the next phase is action filters so these implement the i",
    "start": "2552960",
    "end": "2558000"
  },
  {
    "text": "action filter interface these are basically like the filters that have come before them the main difference is at this point we",
    "start": "2558000",
    "end": "2564720"
  },
  {
    "text": "know the bound parameters of the the request so we have actual actual access to those bound arguments",
    "start": "2564720",
    "end": "2571119"
  },
  {
    "text": "basically and we can look at those values and make decisions about whether we let requests continue",
    "start": "2571119",
    "end": "2576319"
  },
  {
    "text": "so this is another place where you might apply some kind of validation logic we'll look at that shortly again they",
    "start": "2576319",
    "end": "2582079"
  },
  {
    "text": "may choose to short-circuit the request path um and just immediately return",
    "start": "2582079",
    "end": "2587200"
  },
  {
    "text": "otherwise what they're going to do is execute the action method so this is where mvc and the framework",
    "start": "2587200",
    "end": "2593359"
  },
  {
    "text": "is just actually going to call finally your action method code anything that you've written inside that action method",
    "start": "2593359",
    "end": "2598960"
  },
  {
    "text": "and so in some applications this may be the first place in the entire pipeline after all of this stuff is run",
    "start": "2598960",
    "end": "2604560"
  },
  {
    "text": "where it's actually running user code code you've provided everything else could all be the default middleware and the default motherbikers",
    "start": "2604560",
    "end": "2611520"
  },
  {
    "text": "so the action method gets invoked and after it gets invoked we get the on action executed called on the filter so",
    "start": "2611520",
    "end": "2617359"
  },
  {
    "text": "again it's another sort of double uh double filter we're on the way in and on the way out so again we'll have a quick",
    "start": "2617359",
    "end": "2625040"
  },
  {
    "text": "look at a a short demo for this one so let's take this binding scenario a little bit further so",
    "start": "2625040",
    "end": "2630880"
  },
  {
    "text": "on my books controller where i accept this we accept a date range and we've validated it's about a date range through binding it",
    "start": "2630880",
    "end": "2636800"
  },
  {
    "text": "but maybe in this action method and maybe in more than just this action method we have a requirement that we only allow the date range to be two",
    "start": "2636800",
    "end": "2643200"
  },
  {
    "text": "years because maybe looking up anything more than two years is too much data for some reason",
    "start": "2643200",
    "end": "2648400"
  },
  {
    "text": "and so if we had to apply that once we could do it inside this action method we could compare the start and end date and if it's greater than two years",
    "start": "2648400",
    "end": "2654880"
  },
  {
    "text": "return some kind of bad request result but if we want to do that in multiple action methods",
    "start": "2654880",
    "end": "2660400"
  },
  {
    "text": "that's going to be code that we'd have to repeat so let's let's be dry and not repeat ourselves so what we can do is we can create a",
    "start": "2660400",
    "end": "2666880"
  },
  {
    "text": "filter which i've applied in this case to this particular action method two year date range filter and in here",
    "start": "2666880",
    "end": "2673359"
  },
  {
    "text": "the logic is fairly straightforward as well so on action executing we're going to see if the action",
    "start": "2673359",
    "end": "2680079"
  },
  {
    "text": "arguments contains a value called date range and if so is it a type date range and if",
    "start": "2680079",
    "end": "2685760"
  },
  {
    "text": "it is is that date range greater than two years if it's greater than two years then instead of actually passing",
    "start": "2685760",
    "end": "2692160"
  },
  {
    "text": "this through we're going to short circuit by setting the results again and we're going to set a bad request",
    "start": "2692160",
    "end": "2698480"
  },
  {
    "text": "object result here so this is a bad request with some payload and in this case it's a problem details",
    "start": "2698480",
    "end": "2704560"
  },
  {
    "text": "response that includes the error message so now if i uh make a request to my",
    "start": "2704560",
    "end": "2709839"
  },
  {
    "text": "endpoint again but this time uh well there we go we've already got 2012 on there in 2019 so that's greater",
    "start": "2709839",
    "end": "2715119"
  },
  {
    "text": "than two years if i make my request now instead of hitting the action method",
    "start": "2715119",
    "end": "2720319"
  },
  {
    "text": "it's been filtered out um it's probably even easier to see that if i put a breakpoint on here so this is the",
    "start": "2720319",
    "end": "2726319"
  },
  {
    "text": "action method if we do that one more time it's immediately been returned the response by short circuiting inside the",
    "start": "2726319",
    "end": "2733119"
  },
  {
    "text": "the filter mechanism so this is cross-cutting concerns in the case of our application that we've been",
    "start": "2733119",
    "end": "2738160"
  },
  {
    "text": "able to apply as a filter",
    "start": "2738160",
    "end": "2741680"
  },
  {
    "text": "we're nearly there after action filters um and after action execution",
    "start": "2743599",
    "end": "2748640"
  },
  {
    "text": "there is the possibility that our action method threw an exception so we had some kind of exception in our",
    "start": "2748640",
    "end": "2753680"
  },
  {
    "text": "code or code that we called down into that we haven't appropriately handled so obviously we don't want to blow up the",
    "start": "2753680",
    "end": "2759599"
  },
  {
    "text": "entire web server just because one request has caused an exception so exception filters are about dealing",
    "start": "2759599",
    "end": "2765119"
  },
  {
    "text": "with those exception cases and setting an appropriate response there is a default behavior inside mvc",
    "start": "2765119",
    "end": "2770800"
  },
  {
    "text": "that will handle this for us but if you want to you can write your own iexception filter",
    "start": "2770800",
    "end": "2775920"
  },
  {
    "text": "and in its on exception method control what happens so back to the demo and let's take a",
    "start": "2775920",
    "end": "2781839"
  },
  {
    "text": "look at that example so here is my exception filter",
    "start": "2781839",
    "end": "2787760"
  },
  {
    "text": "you can see it inherits from i exception filter it has a non-exception method",
    "start": "2787760",
    "end": "2792880"
  },
  {
    "text": "and in here what i'm choosing to do is record a metric to a metric system so this is a really good use case for",
    "start": "2792880",
    "end": "2798960"
  },
  {
    "text": "this which is if an exception occurs in the application that's unhandled wouldn't it be nice if our alerting and",
    "start": "2798960",
    "end": "2804319"
  },
  {
    "text": "monitoring system knew about that and could maybe alert us in slack or something well this is exactly what we do in our",
    "start": "2804319",
    "end": "2809920"
  },
  {
    "text": "system so we have an exception occurring we record a metric and then downstream our",
    "start": "2809920",
    "end": "2815359"
  },
  {
    "text": "notifications come out the other thing we're doing here is we've got our own custom format in this api",
    "start": "2815359",
    "end": "2820960"
  },
  {
    "text": "or what an error message looks like so this is the model for that error has a message and it has a flag is error",
    "start": "2820960",
    "end": "2827440"
  },
  {
    "text": "so inside our code we actually can construct and return an instance of that as a serialized json object and then we just",
    "start": "2827440",
    "end": "2834800"
  },
  {
    "text": "set this exception handle to true so that any other exception filters know actually",
    "start": "2834800",
    "end": "2841119"
  },
  {
    "text": "we can register this is we can add it to controllers or actions but i've registered this one in my startup class",
    "start": "2842400",
    "end": "2848160"
  },
  {
    "text": "into this filters collection so this is where we add filters globally that apply to all controllers and all actions which is",
    "start": "2848160",
    "end": "2854800"
  },
  {
    "text": "really useful for something like exception handling so with that exception in the framework if i come in and make a call to an",
    "start": "2854800",
    "end": "2861200"
  },
  {
    "text": "endpoint uh called bang we'll run that we've got an unhandled exception here",
    "start": "2861200",
    "end": "2867440"
  },
  {
    "text": "now this could be deep down into our code but the only way to prevent this with our own code would be to wrap this in a try catch and that",
    "start": "2867440",
    "end": "2874319"
  },
  {
    "text": "may not be very pretty if you have to have a try catch in every action method so by adding our filter handling we",
    "start": "2874319",
    "end": "2880400"
  },
  {
    "text": "don't need to try catch we catch the exception in the exception filter instead so if we let this continue um and why",
    "start": "2880400",
    "end": "2887440"
  },
  {
    "text": "that's run twice uh the request comes through and you can see here our nicely formatted exception",
    "start": "2887440",
    "end": "2893520"
  },
  {
    "text": "message that we decided to return as a signature of this api",
    "start": "2893520",
    "end": "2898640"
  },
  {
    "text": "so we're coming towards the end uh but we're still a little bit more in the in the pipeline",
    "start": "2898640",
    "end": "2905119"
  },
  {
    "text": "so after all of this is run the final set of filters that are going to run are result filters so the",
    "start": "2905119",
    "end": "2911040"
  },
  {
    "text": "main difference with what these have access to that we didn't have access to earlier is we now have",
    "start": "2911040",
    "end": "2916480"
  },
  {
    "text": "the action result with the iaction result that was returned by our action method assuming there was no exception so the i",
    "start": "2916480",
    "end": "2923280"
  },
  {
    "text": "action result is that sort of representation of the data that our response is going to include",
    "start": "2923280",
    "end": "2929040"
  },
  {
    "text": "but it hasn't yet been written to the response content so at this point we can in this filter make some further",
    "start": "2929040",
    "end": "2934720"
  },
  {
    "text": "decisions based on the type of action result or even the data within the action result",
    "start": "2934720",
    "end": "2940720"
  },
  {
    "text": "if we have a cross-cutting concern we'll look at one in a second but action filter sorry result filters",
    "start": "2940720",
    "end": "2946800"
  },
  {
    "text": "run and then the action result itself gets executed and this is where um in an api for example the action",
    "start": "2946800",
    "end": "2953760"
  },
  {
    "text": "result is going to be turned into the appropriate response probably with a json payload so the way that",
    "start": "2953760",
    "end": "2959440"
  },
  {
    "text": "works is if your request includes an object sorry your result includes an object that that object is going to run through",
    "start": "2959440",
    "end": "2965920"
  },
  {
    "text": "an output formatter by default that will be the json output formatter and that will serialize the object to",
    "start": "2965920",
    "end": "2972000"
  },
  {
    "text": "json and then add that onto the response stream you can again add your own output formatters so if you want to",
    "start": "2972000",
    "end": "2978559"
  },
  {
    "text": "send a different type of data you can do that by adding that formatter into the framework uh for again protobuf message",
    "start": "2978559",
    "end": "2985920"
  },
  {
    "text": "pack or some custom proprietary format that you have and at this stage now on the hp context",
    "start": "2985920",
    "end": "2991680"
  },
  {
    "text": "we have the http response uh with the data added to it so headers will have been added and the",
    "start": "2991680",
    "end": "2997520"
  },
  {
    "text": "actual content will be written out to it and then the request sorry the response",
    "start": "2997520",
    "end": "3002800"
  },
  {
    "text": "now flows through back through that middleware um filter pipeline all the way out to",
    "start": "3002800",
    "end": "3007920"
  },
  {
    "text": "the middle there at the end there so let's have a look at one of those result filters quickly and just get an",
    "start": "3007920",
    "end": "3015040"
  },
  {
    "text": "idea of where we could use those so here i have a result filter this is",
    "start": "3015040",
    "end": "3020400"
  },
  {
    "text": "the last modified result filter and what i'm doing here is i'm saying if the result",
    "start": "3020400",
    "end": "3025680"
  },
  {
    "text": "type is okay object result and if the value of that so the object inside the ok",
    "start": "3025680",
    "end": "3031839"
  },
  {
    "text": "object result is of type mutable output model base which is a really terribly named type i added",
    "start": "3031839",
    "end": "3037599"
  },
  {
    "text": "this is a base type that i use for my output models in this example so this",
    "start": "3037599",
    "end": "3042880"
  },
  {
    "text": "includes a last modified date so we assume anything that can be modified in the database will be mapped to a output model",
    "start": "3042880",
    "end": "3050160"
  },
  {
    "text": "that derived from this and here's the rest of the book data what this means is because we have this",
    "start": "3050160",
    "end": "3055200"
  },
  {
    "text": "kind of type that we can look for we can now say well okay if it is that time we'll set the last modified",
    "start": "3055200",
    "end": "3061680"
  },
  {
    "text": "response header to the last modified uh value from the actual object so we're",
    "start": "3061680",
    "end": "3066720"
  },
  {
    "text": "having we're adding a header on here in this example this is why we do this on result executing not executed because we need",
    "start": "3066720",
    "end": "3073359"
  },
  {
    "text": "to write the headers before the output formatter writes the response body because we can't have headers after the",
    "start": "3073359",
    "end": "3079200"
  },
  {
    "text": "response body so this is going to run and if we make a request to this endpoint and send that request through",
    "start": "3079200",
    "end": "3086480"
  },
  {
    "text": "so we've got our response it includes the last modified date and on the headers here we've now added",
    "start": "3086480",
    "end": "3091839"
  },
  {
    "text": "our last modified header um with the value that we we've bought out of the database",
    "start": "3091839",
    "end": "3097119"
  },
  {
    "text": "and this this filter is again referenced globally so this applies to every controller and every action where",
    "start": "3097119",
    "end": "3103599"
  },
  {
    "text": "it's an object result being returned of that type and so this is again another place to apply this",
    "start": "3103599",
    "end": "3109119"
  },
  {
    "text": "cross-cutting concerns and could even be used with certain kinds of caching for example if you have",
    "start": "3109119",
    "end": "3114400"
  },
  {
    "text": "specific requirements to do so",
    "start": "3114400",
    "end": "3117920"
  },
  {
    "text": "so this is the kind of final picture that was about as deep as we're gonna go um there have been some generalizations",
    "start": "3121520",
    "end": "3127760"
  },
  {
    "text": "that i've had to make to fit this into into the hour but the key points are those first three filters",
    "start": "3127760",
    "end": "3133680"
  },
  {
    "text": "authorization resource and middleware are pretty much redundant today with endpoint routing",
    "start": "3133680",
    "end": "3138960"
  },
  {
    "text": "uh which you should be using if you're using 3.0 or 3.1 um basically give us the same",
    "start": "3138960",
    "end": "3145040"
  },
  {
    "text": "functionality but lifted up outside of mvc and so you can do authorization with authorization",
    "start": "3145040",
    "end": "3150480"
  },
  {
    "text": "middleware you can base your sort of resource filter logic inside middleware by making it endpoint",
    "start": "3150480",
    "end": "3157280"
  },
  {
    "text": "aware so calling getendpoint on the context and then interpreting any attributes of that endpoint any",
    "start": "3157280",
    "end": "3163839"
  },
  {
    "text": "metadata about it and similarly with middleware filters you can conditionally apply your middleware",
    "start": "3163839",
    "end": "3169920"
  },
  {
    "text": "controller creation is going to happen and the first then phase is model binding so this is where again we map properties",
    "start": "3169920",
    "end": "3176079"
  },
  {
    "text": "and data from the request onto the types and the um arguments",
    "start": "3176079",
    "end": "3181280"
  },
  {
    "text": "of our action method we then run the action execution phase so this is where the action invoker is going to run",
    "start": "3181280",
    "end": "3188000"
  },
  {
    "text": "and call our actual code so if you haven't done any previous customization this is the first chance where your code",
    "start": "3188000",
    "end": "3194079"
  },
  {
    "text": "is going to run we then get the action result the i action result from that action method",
    "start": "3194079",
    "end": "3199920"
  },
  {
    "text": "and before we execute it we run it through a filter again so we can make a final last minute decision to do something",
    "start": "3199920",
    "end": "3205200"
  },
  {
    "text": "unusual and then if not we execute the action result which may or may not use an output",
    "start": "3205200",
    "end": "3211119"
  },
  {
    "text": "formatter to produce the the serialized data that's going to go on to the response and then all of this",
    "start": "3211119",
    "end": "3216480"
  },
  {
    "text": "flows back out of mvc um as a response that's added onto that http context",
    "start": "3216480",
    "end": "3222480"
  },
  {
    "text": "we flow back into the middleware so a reminder we come out of whatever endpoint whatever action method inside",
    "start": "3222480",
    "end": "3228400"
  },
  {
    "text": "mvc is called and we flow through each of the middleware and the response is set now",
    "start": "3228400",
    "end": "3233520"
  },
  {
    "text": "so those middleware components can potentially log that information or potentially do something",
    "start": "3233520",
    "end": "3239359"
  },
  {
    "text": "related to that data potentially decide to even replace the response entirely",
    "start": "3239359",
    "end": "3245359"
  },
  {
    "text": "and then the hdd context flows to kestrel and kestrel is going to take that data",
    "start": "3245359",
    "end": "3250480"
  },
  {
    "text": "from the http context turn it into a http response message as bytes that it sends down to the client just to",
    "start": "3250480",
    "end": "3257599"
  },
  {
    "text": "kind of close the picture is the response message from our earlier request so the server said great",
    "start": "3257599",
    "end": "3263359"
  },
  {
    "text": "i've been able to do this request for you so it's a 200 okay response it's included some headers so some of",
    "start": "3263359",
    "end": "3268960"
  },
  {
    "text": "these headers such as the server header have been added by kestrel itself some of these are going to be added via",
    "start": "3268960",
    "end": "3275119"
  },
  {
    "text": "sort of mdc's such as the content type that we ended up creating and adding to the response and we've even got our last modified",
    "start": "3275119",
    "end": "3281440"
  },
  {
    "text": "header that we added using our result filter inside asp.net core",
    "start": "3281440",
    "end": "3286799"
  },
  {
    "text": "the response content then is the serialized json representation of an array of books in this example um",
    "start": "3286799",
    "end": "3294000"
  },
  {
    "text": "and so this was produced by that output formatter which saw the the object that we attached to our",
    "start": "3294000",
    "end": "3300079"
  },
  {
    "text": "action result it saw the object it knew how to serialize that into valid json and then it attached it to the",
    "start": "3300079",
    "end": "3306640"
  },
  {
    "text": "http context and onto the response so lots and lots of stuff there um the",
    "start": "3306640",
    "end": "3312480"
  },
  {
    "text": "main thing is don't expect you need to use all of these things in all of your applications most of the time the defaults are going",
    "start": "3312480",
    "end": "3318160"
  },
  {
    "text": "to be working pretty well for you but if there is code that you find yourself repeating particularly across",
    "start": "3318160",
    "end": "3323440"
  },
  {
    "text": "numerous action methods do you think about whether that could be better applied as some kind of filter at the",
    "start": "3323440",
    "end": "3328880"
  },
  {
    "text": "appropriate place in the pipeline and then just use attributes to apply that behavior where you need it",
    "start": "3328880",
    "end": "3334799"
  },
  {
    "text": "in summary uh the requests are handled in asp.net call by kestrel so that's responsible for parsing bytes",
    "start": "3334799",
    "end": "3341440"
  },
  {
    "text": "off of the wire into a http context and passing it into the rest of the asp.net core and later",
    "start": "3341440",
    "end": "3347200"
  },
  {
    "text": "uh producing the bytes that go out back out to the client we have the middleware pipeline gets executed in the order that they're",
    "start": "3347200",
    "end": "3353839"
  },
  {
    "text": "registered so from top to bottom of the configure method and the response flows back through in the reverse order",
    "start": "3353839",
    "end": "3360160"
  },
  {
    "text": "and finally we have this concept of endpoints which is new in sort of 3.0 3.1 uh",
    "start": "3360160",
    "end": "3366559"
  },
  {
    "text": "endpoints are really just an action that's going to invoke and handle our request and that may run",
    "start": "3366559",
    "end": "3372480"
  },
  {
    "text": "through the filter pipeline first which may or may not decide to short-circuit that request handling eventually the",
    "start": "3372480",
    "end": "3379119"
  },
  {
    "text": "action method gets executed which returns an i-action result and then the action result is going to get",
    "start": "3379119",
    "end": "3384480"
  },
  {
    "text": "executed to return the final contact so lots and lots of stuff there um",
    "start": "3384480",
    "end": "3390720"
  },
  {
    "text": "terrible animations coming across over five frames a second um the link that i mentioned earlier so these slides",
    "start": "3390720",
    "end": "3397200"
  },
  {
    "text": "and all of the sample code which is up on my github is at that link there bit.ly forward slash asp.net anatomy",
    "start": "3397200",
    "end": "3405119"
  },
  {
    "text": "um that should take you to that and i've included some other resources there so some links to the microsoft documentation that cover this stuff",
    "start": "3405119",
    "end": "3412000"
  },
  {
    "text": "pretty well as well um you can find me online and perhaps steve jay gordon on twitter so if you have any questions that i haven't",
    "start": "3412000",
    "end": "3418000"
  },
  {
    "text": "kind of covered off i'll do my best to answer them there um we've got like a minute left here so i don't think we'll",
    "start": "3418000",
    "end": "3423359"
  },
  {
    "text": "probably do too many questions on the chat but what i'll do is as soon as we've uh kind of concluded",
    "start": "3423359",
    "end": "3429200"
  },
  {
    "text": "i'll jump into the slack channel for this room and we can kind of keep the discussion going there or",
    "start": "3429200",
    "end": "3435599"
  },
  {
    "text": "over dms if you prefer if you if you prefer to do that so hopefully that was useful hopefully um",
    "start": "3435599",
    "end": "3441040"
  },
  {
    "text": "that's the information you were looking for um lots and lots of stuff there to take away and apply to what you're building",
    "start": "3441040",
    "end": "3446960"
  },
  {
    "text": "thank you very much for coming along and hopefully next year i will see you in person at ndc osler thank you",
    "start": "3446960",
    "end": "3457760"
  }
]