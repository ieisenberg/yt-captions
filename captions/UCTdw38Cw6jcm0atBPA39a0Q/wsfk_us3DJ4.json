[
  {
    "text": "right so we should start few more people coming I was thinking that I should do a",
    "start": "520",
    "end": "7400"
  },
  {
    "text": "joke and I found exactly the perfect joke are you stuck here since yesterday",
    "start": "7400",
    "end": "12639"
  },
  {
    "text": "because you couldn't find your way out actually I was there here and on the",
    "start": "12639",
    "end": "18080"
  },
  {
    "text": "way out I was like okay do did did I took a left or a right and it took me a",
    "start": "18080",
    "end": "23119"
  },
  {
    "text": "while to find my way so I thought about maybe no one will join my talk or they",
    "start": "23119",
    "end": "30920"
  },
  {
    "text": "will be stuck here because they couldn't find their way out as I did so um",
    "start": "30920",
    "end": "36960"
  },
  {
    "text": "welcome today uh we're here or I'm here at least to talk about asynchronous",
    "start": "36960",
    "end": "42960"
  },
  {
    "text": "messaging this has been like um the thing that I do in the last 10 years",
    "start": "42960",
    "end": "48800"
  },
  {
    "text": "ever since I found out that there are easier way ways of um doing",
    "start": "48800",
    "end": "55399"
  },
  {
    "text": "microservices inter commmunication pretty much and back in the days when microservices were a thing the new shiny",
    "start": "55399",
    "end": "63239"
  },
  {
    "text": "thing that everyone wanted uh the first goto option for",
    "start": "63239",
    "end": "68360"
  },
  {
    "text": "splitting the monolit in small chunks was to do HTTP requests that's the usual step to evolve",
    "start": "68360",
    "end": "76840"
  },
  {
    "text": "your architecture right so um since then I discovered there is another word out",
    "start": "76840",
    "end": "82720"
  },
  {
    "text": "there that has different concepts and we kind of it is kind of hard to unlearn",
    "start": "82720",
    "end": "88720"
  },
  {
    "text": "what you know from HD GTP when you start to embrace the synchronous messaging so",
    "start": "88720",
    "end": "94640"
  },
  {
    "text": "who am I my name is Arina uh I'm a software architect at",
    "start": "94640",
    "end": "101439"
  },
  {
    "text": "particular and I blog from time to time at Arena codes and I also uh I'm a Dom",
    "start": "101439",
    "end": "107399"
  },
  {
    "text": "train author you can find a course for um on messaging of course on mass",
    "start": "107399",
    "end": "112600"
  },
  {
    "text": "transit uh over there so um since we're talking about microservices and this uh",
    "start": "112600",
    "end": "119079"
  },
  {
    "text": "Journey around communication we cannot not mention the monolith right this is",
    "start": "119079",
    "end": "126600"
  },
  {
    "text": "where we all kind of started and some of us are still there even",
    "start": "126600",
    "end": "131720"
  },
  {
    "text": "today okay so to me I must admit as a developer the life was easy I mean you",
    "start": "131720",
    "end": "138680"
  },
  {
    "text": "had everything in there all the dependency everything one place you searched in the code and you didn't need",
    "start": "138680",
    "end": "144680"
  },
  {
    "text": "to worry about what others are doing or what other themes are doing where",
    "start": "144680",
    "end": "150519"
  },
  {
    "text": "merge conflicts because you had one single huge source source code but",
    "start": "150519",
    "end": "155720"
  },
  {
    "text": "that's it so I'm admit I'm going to admit I was guilty I am guilty I love",
    "start": "155720",
    "end": "160760"
  },
  {
    "text": "monoliths I still love them they still exist by the way in uh different systems",
    "start": "160760",
    "end": "166280"
  },
  {
    "text": "in different companies so a monolith is self-contained we have that single code",
    "start": "166280",
    "end": "171840"
  },
  {
    "text": "code base and there is a single Deployable unit that uh makes life easy",
    "start": "171840",
    "end": "177480"
  },
  {
    "text": "for developers all the dependent this is are in one single code base there aren't",
    "start": "177480",
    "end": "183480"
  },
  {
    "text": "too many moving parts and usually this is a single technology stack right we",
    "start": "183480",
    "end": "189599"
  },
  {
    "text": "all know that the the goal is to have polyglot environments maybe just in case",
    "start": "189599",
    "end": "195599"
  },
  {
    "text": "we would want to switch a specific component to I don't know rust or go or python we would have that flexibility",
    "start": "195599",
    "end": "203640"
  },
  {
    "text": "and in real life actually I have never seen it so if you have a text tack that",
    "start": "203640",
    "end": "208680"
  },
  {
    "text": "is net you most likely would have every single component in net I mean I haven't",
    "start": "208680",
    "end": "215040"
  },
  {
    "text": "seen this transition so um with the monoliths we have all or nothing deploys we have uh",
    "start": "215040",
    "end": "222840"
  },
  {
    "text": "green blue deploys but you take the chunk you move it in production and you",
    "start": "222840",
    "end": "228040"
  },
  {
    "text": "hope that it works right we kind of have down down times or if we do not want to",
    "start": "228040",
    "end": "233400"
  },
  {
    "text": "have down times we have to intervene with different system in between um almost Z",
    "start": "233400",
    "end": "240360"
  },
  {
    "text": "continuous delivery yeah since the code is so big when you do many changes you",
    "start": "240360",
    "end": "246040"
  },
  {
    "text": "have to also test those changes so it's hard to test right but when it comes",
    "start": "246040",
    "end": "252000"
  },
  {
    "text": "about scaling um it is possible you can give a bigger machine you can give RAM",
    "start": "252000",
    "end": "258160"
  },
  {
    "text": "and CPU power we can scale it up but giving more resources to a machine",
    "start": "258160",
    "end": "264280"
  },
  {
    "text": "doesn't necessarily uh W would increase in terms of costs proportionally right",
    "start": "264280",
    "end": "270320"
  },
  {
    "text": "of course we could add many instances of the same application but we would have to put load balancers in between and we",
    "start": "270320",
    "end": "276520"
  },
  {
    "text": "would create things um more complicated well so we heard about uh",
    "start": "276520",
    "end": "282639"
  },
  {
    "text": "microservices architectures what is the micros service how big is it nobody knows every company has its own",
    "start": "282639",
    "end": "289800"
  },
  {
    "text": "definition about what a microservice is and we kind of understood This this",
    "start": "289800",
    "end": "295120"
  },
  {
    "text": "term how we wanted it so it has its own database a",
    "start": "295120",
    "end": "301160"
  },
  {
    "text": "microservice right it is easy to deploy is a standalone thing and it is easy to",
    "start": "301160",
    "end": "307280"
  },
  {
    "text": "maintain Al so they promote it as being easy to maintain right because it's",
    "start": "307280",
    "end": "313039"
  },
  {
    "text": "isolated but is it that easy to maintain when you chunk your monolith into",
    "start": "313039",
    "end": "319479"
  },
  {
    "text": "smaller pieces that start to move around is it so easy to maintain as easy as it",
    "start": "319479",
    "end": "326080"
  },
  {
    "text": "was with the monolith I don't think so right because we have so many moving parts",
    "start": "326080",
    "end": "332319"
  },
  {
    "text": "now we get complexity more complexity that we would want because we have more",
    "start": "332319",
    "end": "338560"
  },
  {
    "text": "moving parts and unfortunately these moving Parts cause cascading effects in",
    "start": "338560",
    "end": "343840"
  },
  {
    "text": "case of failures right because we depend on different other subsystems in our um",
    "start": "343840",
    "end": "349360"
  },
  {
    "text": "app we need to uh monitor them closely and monitoring is a thing that we kind",
    "start": "349360",
    "end": "355319"
  },
  {
    "text": "of do from the moment when we actually need it nobody thinks about oh we should add",
    "start": "355319",
    "end": "361960"
  },
  {
    "text": "monitoring in our system when the things get hard we think okay from now on we're",
    "start": "361960",
    "end": "367280"
  },
  {
    "text": "going to add monitoring so we can prevent failures in the future right so um as soon as you start chunking the",
    "start": "367280",
    "end": "374880"
  },
  {
    "text": "monolit and separate the components we will start to realize that",
    "start": "374880",
    "end": "380280"
  },
  {
    "text": "independent units are not so independent anymore and we end up with things like um like this",
    "start": "380280",
    "end": "388680"
  },
  {
    "text": "big bowl of mud of big bowl of HTTP calls at least at first right and we end",
    "start": "388680",
    "end": "395960"
  },
  {
    "text": "up with things like this that do different things or different things",
    "start": "395960",
    "end": "401240"
  },
  {
    "text": "like this independent right with their own databas is easy to deploy teams own",
    "start": "401240",
    "end": "408680"
  },
  {
    "text": "their own microservice and so on right because uh we thought that if others do",
    "start": "408680",
    "end": "414280"
  },
  {
    "text": "it for example Amazon calls sometimes 15",
    "start": "414280",
    "end": "420319"
  },
  {
    "text": "um apis to build a single page they can do it right usually the tech Giants",
    "start": "420319",
    "end": "426160"
  },
  {
    "text": "dictate what we want to do with our software right or Netflix that Services",
    "start": "426160",
    "end": "431879"
  },
  {
    "text": "five billions uh requests a day and from all these 97.7 are internals so",
    "start": "431879",
    "end": "439840"
  },
  {
    "text": "Downstream apis right they can do it why can't we right so we do HTTP calls an",
    "start": "439840",
    "end": "447759"
  },
  {
    "text": "HTTP call uh to another API is super simple we do request we get a response",
    "start": "447759",
    "end": "454039"
  },
  {
    "text": "and we're happy most of the times or this is the let's say the default",
    "start": "454039",
    "end": "460199"
  },
  {
    "text": "scenario that we have in mind when we code things right but how do we proceed",
    "start": "460199",
    "end": "467879"
  },
  {
    "text": "if things are not so good anymore and our response doesn't come back in timely",
    "start": "467879",
    "end": "474520"
  },
  {
    "text": "manner we're sad then but we also cause cascading failures inside other",
    "start": "474520",
    "end": "479919"
  },
  {
    "text": "components that needs this so what do we do then well we manually intervene and we",
    "start": "479919",
    "end": "488080"
  },
  {
    "text": "introduce rying policies right so in case uh next time maybe things can be",
    "start": "488080",
    "end": "494960"
  },
  {
    "text": "solved by themselves right well sometimes U it's not enough because",
    "start": "494960",
    "end": "501840"
  },
  {
    "text": "API 2 won't even know what was the content of the request right we a try we",
    "start": "501840",
    "end": "507440"
  },
  {
    "text": "a try but from the API perspective the API doesn't know what",
    "start": "507440",
    "end": "513240"
  },
  {
    "text": "was the content right so we lose data and from HTTP synchronous calls we",
    "start": "513240",
    "end": "520399"
  },
  {
    "text": "start to move on and say oh I'm going to do it async it's faster it's we serve the request faster but in fact it's",
    "start": "520399",
    "end": "526800"
  },
  {
    "text": "still HTTP uh it's still async it's async for us in CP because we use that",
    "start": "526800",
    "end": "534480"
  },
  {
    "text": "syntactic sugar and stuff and we have threading and stuff but in the end the protocol that we use is the same HTTP by",
    "start": "534480",
    "end": "542279"
  },
  {
    "text": "its nature is synchronous no matter how much we're trying to lie no it's",
    "start": "542279",
    "end": "547880"
  },
  {
    "text": "synchronous because this is the way it was built so um it might look like we're",
    "start": "547880",
    "end": "553360"
  },
  {
    "text": "Distributing the load because we're doing requests and those responses may",
    "start": "553360",
    "end": "559360"
  },
  {
    "text": "come back but we actually have the same issues uh these appearance of have",
    "start": "559360",
    "end": "565279"
  },
  {
    "text": "serving more requests is just that an appearance it doesn't happen the server",
    "start": "565279",
    "end": "570760"
  },
  {
    "text": "you're hosting by the API on is the same the problems you're facing are the",
    "start": "570760",
    "end": "576079"
  },
  {
    "text": "same um about HTTP TCP connection for each",
    "start": "576079",
    "end": "582000"
  },
  {
    "text": "request we have absolutely no retries out of the box we have to use libraries",
    "start": "582000",
    "end": "587839"
  },
  {
    "text": "we have to think about different policies that will save our request what happens if I don't know an API doesn't",
    "start": "587839",
    "end": "594839"
  },
  {
    "text": "respond in three seconds should we retry should we cancel is that a timeout right",
    "start": "594839",
    "end": "601640"
  },
  {
    "text": "what status code and what exception do we handle so we have to think about all",
    "start": "601640",
    "end": "607160"
  },
  {
    "text": "these aspects another thing is that HTTP doesn't have any delivery guarantees you",
    "start": "607160",
    "end": "613920"
  },
  {
    "text": "do the request but there is nothing guaranteeing you that the request will be received so you'll receive a response",
    "start": "613920",
    "end": "620640"
  },
  {
    "text": "back yeah there is that happy case where you do request you get the response back and that's it but in other cases there's",
    "start": "620640",
    "end": "628760"
  },
  {
    "text": "nothing guarant in you that the request ends up being on the server side where",
    "start": "628760",
    "end": "634920"
  },
  {
    "text": "it should be another thing is location transparency you have to manage every",
    "start": "634920",
    "end": "641720"
  },
  {
    "text": "single endpoint that you are calling you have to discover those endpoints somehow",
    "start": "641720",
    "end": "647120"
  },
  {
    "text": "either manually you're coding them somewhere app settings in production environments and stuff environment",
    "start": "647120",
    "end": "653880"
  },
  {
    "text": "variables right but you know exactly where from where to where you're doing the requests",
    "start": "653880",
    "end": "660279"
  },
  {
    "text": "yeah so you have some extra thing to manage but HTTP is super good for public",
    "start": "660279",
    "end": "667000"
  },
  {
    "text": "facing apis if you want to expose your API to the outside world usually rest will be",
    "start": "667000",
    "end": "674839"
  },
  {
    "text": "the def facto standard right or Jason over HTTP pretty much we're familiar",
    "start": "674839",
    "end": "680600"
  },
  {
    "text": "with this we have been using HTTP since the internet appeared right and it is",
    "start": "680600",
    "end": "687279"
  },
  {
    "text": "easy to debug because we're so familiar with it but do we ever think about these",
    "start": "687279",
    "end": "693240"
  },
  {
    "text": "stuff nonfunctional requirements like availability fa",
    "start": "693240",
    "end": "699360"
  },
  {
    "text": "tolerance latency throughput reliability observability resiliency scalability",
    "start": "699360",
    "end": "707959"
  },
  {
    "text": "interoperability recoverability and you name it pretty much everything that ends",
    "start": "707959",
    "end": "713200"
  },
  {
    "text": "in ility it's something that we might want in our system right and um I'm",
    "start": "713200",
    "end": "720040"
  },
  {
    "text": "going to ask you how many of these you're having in your systems like",
    "start": "720040",
    "end": "727320"
  },
  {
    "text": "checkbox I have full tolerance I have availability 9 to",
    "start": "727320",
    "end": "733519"
  },
  {
    "text": "9.99% my system is resilient it is able to self",
    "start": "734680",
    "end": "740760"
  },
  {
    "text": "recover do we no we do not even think about all these things if they're not",
    "start": "740760",
    "end": "747639"
  },
  {
    "text": "explicitly mentioned in the feature that we have to implement right there might be some cases when I don't know the",
    "start": "747639",
    "end": "754760"
  },
  {
    "text": "business analyst or the Man team manager comes and say hey I need this to be up",
    "start": "754760",
    "end": "761519"
  },
  {
    "text": "99.99% of the times right and then you start to think okay how do I achieve this what do I Implement what extra",
    "start": "761519",
    "end": "769160"
  },
  {
    "text": "tools do I use right how do I ensure that my system is up and running and it",
    "start": "769160",
    "end": "774800"
  },
  {
    "text": "it is recovering from errors or retrying things there may of them U and unless",
    "start": "774800",
    "end": "781519"
  },
  {
    "text": "they're explicitly stated we do not care about them right pretty much we're kind",
    "start": "781519",
    "end": "786560"
  },
  {
    "text": "of focused due to the time constraints or I don't know to what we have in mind functionality features right because",
    "start": "786560",
    "end": "794360"
  },
  {
    "text": "those are the things that usually bring us money in return right from our",
    "start": "794360",
    "end": "799720"
  },
  {
    "text": "customers from our stakeholders right they need those features and these",
    "start": "799720",
    "end": "805199"
  },
  {
    "text": "things are like treated as a secondhand stuff right",
    "start": "805199",
    "end": "811000"
  },
  {
    "text": "so um for example in case of a e-commerce system that needs to handle a",
    "start": "811000",
    "end": "817279"
  },
  {
    "text": "lot of orders during Black Friday when you explicitly have a thing like this then you kind of think well we",
    "start": "817279",
    "end": "824839"
  },
  {
    "text": "have to handle load we have to scale but other than that we do not think about",
    "start": "824839",
    "end": "830399"
  },
  {
    "text": "having system that auto scale unless we have cloud and that's enabled by default",
    "start": "830399",
    "end": "835680"
  },
  {
    "text": "and we don't think about having system that are elastic to be able to handle load when the we have pigs and to",
    "start": "835680",
    "end": "843279"
  },
  {
    "text": "decrease the number of instances and stuff like that it's a desate so to say",
    "start": "843279",
    "end": "849079"
  },
  {
    "text": "right so um another thing how do we handle timeouts we do request we wait",
    "start": "849079",
    "end": "855399"
  },
  {
    "text": "for responses but for how long do we wait it's who gives us that number hey",
    "start": "855399",
    "end": "862079"
  },
  {
    "text": "uh 30 seconds one minute and there would be like 1,000 other requests that",
    "start": "862079",
    "end": "869160"
  },
  {
    "text": "wait for us and they will get time out but there is a glitch something happens in the systems and we're not able to",
    "start": "869160",
    "end": "875079"
  },
  {
    "text": "respond right how do we handle that and what happens to all the requests right",
    "start": "875079",
    "end": "880720"
  },
  {
    "text": "that's a thing that we should have on the back of our mind some other things that are very closely related to um",
    "start": "880720",
    "end": "888360"
  },
  {
    "text": "non-functional requirements where the quality attributes of our system is coupling coupling can be can be of many",
    "start": "888360",
    "end": "896240"
  },
  {
    "text": "types but I'm going to mention two temporal so if service a needs to talk with",
    "start": "896240",
    "end": "902279"
  },
  {
    "text": "service B well they need to be up and running able to chitchat with each other",
    "start": "902279",
    "end": "908000"
  },
  {
    "text": "right and this is the easiest uh thing to to solve another thing is",
    "start": "908000",
    "end": "915000"
  },
  {
    "text": "logical um as soon as we start in our code to duplicate things like hey this",
    "start": "915000",
    "end": "920320"
  },
  {
    "text": "API needs this model order model and this other API needs to be aware of that",
    "start": "920320",
    "end": "926800"
  },
  {
    "text": "order model somehow and we start to create another class and we end up with 10 order models scattered across",
    "start": "926800",
    "end": "934560"
  },
  {
    "text": "different components of our system that's logical couple coupling right and sometimes we kind of think that okay how",
    "start": "934560",
    "end": "942600"
  },
  {
    "text": "about we extract we do some refactoring right we're doing HTTP clients that know",
    "start": "942600",
    "end": "949399"
  },
  {
    "text": "that we start to distribute using new get packages the deal with the HTTP clients that we start to distribute",
    "start": "949399",
    "end": "956079"
  },
  {
    "text": "because we think it's okay to do so is that they tend to gain weight and they",
    "start": "956079",
    "end": "962959"
  },
  {
    "text": "tend to gain business logic it's one thing to code some information about",
    "start": "962959",
    "end": "969040"
  },
  {
    "text": "that some tests in a package that you distribute but it's another thing to create spaghetti code just because you",
    "start": "969040",
    "end": "976600"
  },
  {
    "text": "introduce some business logic there and it usually happens and I've seen it several times okay so um duplicating",
    "start": "976600",
    "end": "984759"
  },
  {
    "text": "business logic is not a good thing right and it's something that we should addressed and the road to a good system",
    "start": "984759",
    "end": "993800"
  },
  {
    "text": "uh is not easy it is sometimes very curved",
    "start": "993800",
    "end": "1000079"
  },
  {
    "text": "right so um we we kind of agree that we do HTTP um colds and we do rest and I'm",
    "start": "1000079",
    "end": "1008720"
  },
  {
    "text": "going to ask you how many of you are doing rest apis okay and now how many of you are",
    "start": "1008720",
    "end": "1015720"
  },
  {
    "text": "really respecting all those six guidelines from rest that Roy Fielding going to hide right we kind of",
    "start": "1015720",
    "end": "1023600"
  },
  {
    "text": "you we kind of choose from rest only those bits that interest us right we do",
    "start": "1023600",
    "end": "1030480"
  },
  {
    "text": "not use not even the good verbs how many of you are using head as a",
    "start": "1030480",
    "end": "1037918"
  },
  {
    "text": "verb yeah I've seen only one hand right head is like a get but",
    "start": "1037919",
    "end": "1045319"
  },
  {
    "text": "doesn't bring the body back that's very useful when you rely on um custom headers or uh status codes like hey",
    "start": "1045319",
    "end": "1053720"
  },
  {
    "text": "check if this item is there or not right you don't care about the body but you do",
    "start": "1053720",
    "end": "1059039"
  },
  {
    "text": "care to see the existing existence of a specific item and it has many applicability in a around industry right",
    "start": "1059039",
    "end": "1067919"
  },
  {
    "text": "but rest is simple widespread we all know Json we do interoperability with Json or XML but at the same time we know",
    "start": "1067919",
    "end": "1075760"
  },
  {
    "text": "that rest has a limitation we do have tight coupling as soon as we know the",
    "start": "1075760",
    "end": "1082400"
  },
  {
    "text": "address of that thing that we're trying to call we have a coupling introduced in our system right",
    "start": "1082400",
    "end": "1089679"
  },
  {
    "text": "we know the Endo we know the URL that we want to call and we know where that API",
    "start": "1089679",
    "end": "1094880"
  },
  {
    "text": "lives that's a couling issue another thing is latency",
    "start": "1094880",
    "end": "1101240"
  },
  {
    "text": "sensitivity um High latency or network disruptions can cause timeouts and of",
    "start": "1101240",
    "end": "1106480"
  },
  {
    "text": "course cascading fa failures and not only once I've seen with different thingss that we have uh service a calls",
    "start": "1106480",
    "end": "1113520"
  },
  {
    "text": "B and B calls C and we have this chain of requests because I don't know this is",
    "start": "1113520",
    "end": "1119159"
  },
  {
    "text": "the way we inherited the system or this is the way it is and we have to deal with it right but if C has a problem",
    "start": "1119159",
    "end": "1126480"
  },
  {
    "text": "then B will have a problem and a will have a problem and that's the cascading failure right and another thing with",
    "start": "1126480",
    "end": "1133440"
  },
  {
    "text": "rest is that we get limited communication patterns do you know anything think about besides request",
    "start": "1133440",
    "end": "1142840"
  },
  {
    "text": "response with rest we do a request we get a response the communication pattern inv involved is request response right",
    "start": "1142840",
    "end": "1150200"
  },
  {
    "text": "that's it there is no other thing if we do HTTP request to an API you have no",
    "start": "1150200",
    "end": "1158799"
  },
  {
    "text": "way of at the same time an now doing the same request to the second API or to the",
    "start": "1158799",
    "end": "1164159"
  },
  {
    "text": "third right a copy of the same request it's impossible right so we only get",
    "start": "1164159",
    "end": "1169960"
  },
  {
    "text": "this request response with messaging because this is the thing that I'm",
    "start": "1169960",
    "end": "1175159"
  },
  {
    "text": "trying to preach about right what is messaging well messaging tries to uh",
    "start": "1175159",
    "end": "1181240"
  },
  {
    "text": "give us Loosely couple integration meaning that as soon as we publish a message or we send a message or as we",
    "start": "1181240",
    "end": "1189000"
  },
  {
    "text": "would do in HTTP do a request that request in messaging transform itself",
    "start": "1189000",
    "end": "1195520"
  },
  {
    "text": "into the concept of message uh that message ends up",
    "start": "1195520",
    "end": "1200559"
  },
  {
    "text": "somewhere in a system and from there it is picked up or pushed to those",
    "start": "1200559",
    "end": "1205760"
  },
  {
    "text": "components inside our system that care about that right so now we do not need",
    "start": "1205760",
    "end": "1212760"
  },
  {
    "text": "to care anymore about who's the consumer of what I'm sending or what's the end",
    "start": "1212760",
    "end": "1218440"
  },
  {
    "text": "point that it will reach we don't care about that so we have the couple",
    "start": "1218440",
    "end": "1223720"
  },
  {
    "text": "components at the same time because it allows us to store the messages we would",
    "start": "1223720",
    "end": "1230240"
  },
  {
    "text": "get temporal decoupling and of course increase reliability as a consequence",
    "start": "1230240",
    "end": "1235520"
  },
  {
    "text": "the messages that we're sending won't be lost and another thing that I think is very important is that the",
    "start": "1235520",
    "end": "1242640"
  },
  {
    "text": "messages can be transformed in transit what do I mean by this is that if we can",
    "start": "1242640",
    "end": "1249240"
  },
  {
    "text": "create processing pipelines in which a message go and get some additional uh",
    "start": "1249240",
    "end": "1255440"
  },
  {
    "text": "information um I don't know maybe we need to to call specific other endpoints",
    "start": "1255440",
    "end": "1261600"
  },
  {
    "text": "to get some vat applied on a property or I don't know do some funky stuff we can",
    "start": "1261600",
    "end": "1268039"
  },
  {
    "text": "create pipelines using these messages and we can add extra information to these",
    "start": "1268039",
    "end": "1273880"
  },
  {
    "text": "messages one thing that is also important to note is that messaging systems usually trade consistency for",
    "start": "1273880",
    "end": "1281919"
  },
  {
    "text": "availability what this means is that we get eventually eventual consistency and",
    "start": "1281919",
    "end": "1288720"
  },
  {
    "text": "we have to shift our mind such a way to deal with that",
    "start": "1288720",
    "end": "1294240"
  },
  {
    "text": "okay okay messages have been around since kind of",
    "start": "1294240",
    "end": "1299880"
  },
  {
    "text": "forever humans since the beginning of time sent messages under different form",
    "start": "1299880",
    "end": "1306039"
  },
  {
    "text": "I know paper written in then sent out in bottles or using carrier pigeons but we",
    "start": "1306039",
    "end": "1314440"
  },
  {
    "text": "kind of use a synchronous messaging from a long time ago right and",
    "start": "1314440",
    "end": "1319640"
  },
  {
    "text": "now we like we equipping the pigeon with more advanced technology but in the end",
    "start": "1319640",
    "end": "1325640"
  },
  {
    "text": "the the concept was you get something and you send that something asynchronously and not necessarily wait",
    "start": "1325640",
    "end": "1332600"
  },
  {
    "text": "for a response there will be something reacting to your um a message being sent",
    "start": "1332600",
    "end": "1338320"
  },
  {
    "text": "um have you ever called you I don't know a good friend to give a a very good um",
    "start": "1338320",
    "end": "1346400"
  },
  {
    "text": "news that happened to you like you you just want to brag about something something very nice happened to you and you call and you call and you call and",
    "start": "1346400",
    "end": "1353480"
  },
  {
    "text": "there's no one answering because I know that person is busy right that didn't end up feeling very well right but if",
    "start": "1353480",
    "end": "1361799"
  },
  {
    "text": "you would have left the recorded message and that person would listen that would",
    "start": "1361799",
    "end": "1367679"
  },
  {
    "text": "have give you a sense of relief right you got to tell your story right when you wanted to say it right so this",
    "start": "1367679",
    "end": "1375559"
  },
  {
    "text": "happens with a messaging too so what is this messaging as a concept",
    "start": "1375559",
    "end": "1381559"
  },
  {
    "text": "well if we were to compare with what we get in rest in a request we would have",
    "start": "1381559",
    "end": "1386799"
  },
  {
    "text": "headers a body payload and a verb or an HTTP method right when we translate the",
    "start": "1386799",
    "end": "1394000"
  },
  {
    "text": "usual way of doing things with rest to a message now we get headers that sit on",
    "start": "1394000",
    "end": "1400240"
  },
  {
    "text": "the envelope and we get the payload that is inside that envelope and actually our",
    "start": "1400240",
    "end": "1406520"
  },
  {
    "text": "request um get translate to something like this whatever class we want to send",
    "start": "1406520",
    "end": "1413159"
  },
  {
    "text": "is usually C sharp class that gets serialized it will be the body of the message and we would also have some",
    "start": "1413159",
    "end": "1419520"
  },
  {
    "text": "additional metadata on top of it this metadata is usually um similar to the",
    "start": "1419520",
    "end": "1425320"
  },
  {
    "text": "headers that we used to have in HTTP we can add key value pairs in there we can",
    "start": "1425320",
    "end": "1431120"
  },
  {
    "text": "have information about who's the center where's the destination and stuff like that now these messages can be of many",
    "start": "1431120",
    "end": "1439640"
  },
  {
    "text": "types and there are super many types but these are the most common we can have",
    "start": "1439640",
    "end": "1445799"
  },
  {
    "text": "documents like binary code is thing that gets uh passed around we can have",
    "start": "1445799",
    "end": "1450960"
  },
  {
    "text": "commands do something or process the order create the invoice create an order",
    "start": "1450960",
    "end": "1457559"
  },
  {
    "text": "we can have events these events are a type of message that are usually more",
    "start": "1457559",
    "end": "1462840"
  },
  {
    "text": "discrete like um order created U account created and usually State a thing that",
    "start": "1462840",
    "end": "1470799"
  },
  {
    "text": "happened inside the system and they're usually very small to pass around we",
    "start": "1470799",
    "end": "1476039"
  },
  {
    "text": "have ques this is a part of cqrs and of course we can have a request",
    "start": "1476039",
    "end": "1481919"
  },
  {
    "text": "reply over messaging too so there is this parading that we can have here",
    "start": "1481919",
    "end": "1490559"
  },
  {
    "text": "well has everyone heard of a qu yeah",
    "start": "1490559",
    "end": "1495720"
  },
  {
    "text": "right a is one of the most important Concepts in computer science we might",
    "start": "1495720",
    "end": "1501080"
  },
  {
    "text": "have learned about it it's basically a construct where um the messages end up",
    "start": "1501080",
    "end": "1508799"
  },
  {
    "text": "it's first in first out just like a Queue at the store right so the first person at the que will get its order and",
    "start": "1508799",
    "end": "1516279"
  },
  {
    "text": "will leave and this is used inside uh different messaging systems or wrapped",
    "start": "1516279",
    "end": "1523200"
  },
  {
    "text": "or we can find them inside different message Brokers so there is a sender application sending send in a message",
    "start": "1523200",
    "end": "1529440"
  },
  {
    "text": "that message would will end up in the queue and at the other other end of the queue we'll have a receiver right now",
    "start": "1529440",
    "end": "1536399"
  },
  {
    "text": "there are different ways of dealing with this some messaging systems will uh make",
    "start": "1536399",
    "end": "1543039"
  },
  {
    "text": "the receiving application pull messages from the queue and some others will push",
    "start": "1543039",
    "end": "1548559"
  },
  {
    "text": "directly the messaging uh the messages from the queue to that receiver so um",
    "start": "1548559",
    "end": "1553840"
  },
  {
    "text": "there is a nuance and there is different performance penalties or not depending on the model that we have now we talked",
    "start": "1553840",
    "end": "1562399"
  },
  {
    "text": "about HTTP about as a protocol and we know how it",
    "start": "1562399",
    "end": "1567480"
  },
  {
    "text": "functions uh but do you ever heard about Advanced messaging queuing",
    "start": "1567480",
    "end": "1573080"
  },
  {
    "text": "protocol yes those of you that um have been around for a while and worked with",
    "start": "1573080",
    "end": "1579520"
  },
  {
    "text": "messaging um systems for sure they you heard about this so what's this amqp",
    "start": "1579520",
    "end": "1587039"
  },
  {
    "text": "well it has a con conceptt of a channel so I I hope I found a good enough",
    "start": "1587039",
    "end": "1592679"
  },
  {
    "text": "representative image so inside the channel we have many wires that allow us",
    "start": "1592679",
    "end": "1597840"
  },
  {
    "text": "to pass back and forth information so it's an open standard protocol for",
    "start": "1597840",
    "end": "1603080"
  },
  {
    "text": "message oriented middlewares that um enables asychronous messaging between",
    "start": "1603080",
    "end": "1608679"
  },
  {
    "text": "application and is popular in um event driven architecture microservices and",
    "start": "1608679",
    "end": "1613840"
  },
  {
    "text": "Enterprise messaging so the idea with amqp is that is async by Nature it has a",
    "start": "1613840",
    "end": "1620720"
  },
  {
    "text": "guarantee message delivery it will do no DNS resolve for each message that it",
    "start": "1620720",
    "end": "1626679"
  },
  {
    "text": "gets sent it has programmatic routing so it can handle like patterns to Route",
    "start": "1626679",
    "end": "1633039"
  },
  {
    "text": "messaging messages to different consumers uh it can have retry out of",
    "start": "1633039",
    "end": "1638360"
  },
  {
    "text": "the box and also very important thing is it can allow us to acknowledge or not",
    "start": "1638360",
    "end": "1645960"
  },
  {
    "text": "acknowledge um out of the box the receival of a message or the message processing so the idea of amqp is that",
    "start": "1645960",
    "end": "1653880"
  },
  {
    "text": "it is implemented by message Brokers rabbit mq um asure service bus supports",
    "start": "1653880",
    "end": "1660720"
  },
  {
    "text": "this not all of them support it right some of them are still using HTTP behind the scenes to receive and send messages",
    "start": "1660720",
    "end": "1669039"
  },
  {
    "text": "but they use cues about guarantees we have three of",
    "start": "1669039",
    "end": "1674519"
  },
  {
    "text": "them so the delivery of a message is at most at most once so message will be",
    "start": "1674519",
    "end": "1680440"
  },
  {
    "text": "delivered to a consumer at most once at least once and exactly once and the idea",
    "start": "1680440",
    "end": "1689919"
  },
  {
    "text": "is depending on this delivery type we can have slow or fast",
    "start": "1689919",
    "end": "1695320"
  },
  {
    "text": "um I mean the latency is less or uh more happening and we get more reliability or",
    "start": "1695320",
    "end": "1703640"
  },
  {
    "text": "less uh reliability right so for example for at least once a message is retried",
    "start": "1703640",
    "end": "1709279"
  },
  {
    "text": "until it is acknowledged so it will be redelivered to the consumer until that",
    "start": "1709279",
    "end": "1715760"
  },
  {
    "text": "consumer will say hey done I'm done I process this and it will be uh removed from the queue um exactly once messages",
    "start": "1715760",
    "end": "1724399"
  },
  {
    "text": "delivered exactly once even in failures so you might lose some something in",
    "start": "1724399",
    "end": "1729519"
  },
  {
    "text": "there uh but this impacts um latency well moving from what we already",
    "start": "1729519",
    "end": "1736919"
  },
  {
    "text": "have to message Brokers these are like control Towers they handle and they know",
    "start": "1736919",
    "end": "1743519"
  },
  {
    "text": "everything that's going on so they get messages and they know where to send those messages based on what the message",
    "start": "1743519",
    "end": "1751880"
  },
  {
    "text": "contains basically is kind of database optimized for handling message streams",
    "start": "1751880",
    "end": "1758559"
  },
  {
    "text": "sort of um in message Brokers one process",
    "start": "1758559",
    "end": "1763640"
  },
  {
    "text": "sends a message to a named queue or a topic we can have one or many consu consumers handles the connections and",
    "start": "1763640",
    "end": "1770440"
  },
  {
    "text": "disconnections and also it has this concept um in aous messaging called dead",
    "start": "1770440",
    "end": "1776080"
  },
  {
    "text": "letter Quee so for example if a message cannot be processed for several number of times it can end up in an error a",
    "start": "1776080",
    "end": "1783880"
  },
  {
    "text": "Quee where it won't be lost right but we would have the possibility of getting",
    "start": "1783880",
    "end": "1789120"
  },
  {
    "text": "there and moving all the messages in a dead Lether queue to the initial Quee to be processed and we um introduced",
    "start": "1789120",
    "end": "1797399"
  },
  {
    "text": "basically the con concept of recoverability in our system it has those messaging guarantees because it",
    "start": "1797399",
    "end": "1803960"
  },
  {
    "text": "implements amqp it can use also different protocols and you have here some examples and if we were to look at",
    "start": "1803960",
    "end": "1812480"
  },
  {
    "text": "where this sits in between our components we would have a sender",
    "start": "1812480",
    "end": "1817600"
  },
  {
    "text": "application and that sender application would send the message to the messaging system where it will be received by the",
    "start": "1817600",
    "end": "1825200"
  },
  {
    "text": "receiving application or many receiving applications because we can also have that scenario so if we were to think",
    "start": "1825200",
    "end": "1832960"
  },
  {
    "text": "about uh how we handle things in a messaging environment we are writing things in classes we are writing uh heer",
    "start": "1832960",
    "end": "1842039"
  },
  {
    "text": "informations or based on the consumer or the sender we know where to dispatch",
    "start": "1842039",
    "end": "1847519"
  },
  {
    "text": "that and we simply send to the message broker and from now on the message broker knows what to do with our letter",
    "start": "1847519",
    "end": "1854919"
  },
  {
    "text": "right where to deliver it what are the constraints where that message will go in case of",
    "start": "1854919",
    "end": "1860720"
  },
  {
    "text": "the sender not being there or erroring out and so on and when it comes about",
    "start": "1860720",
    "end": "1866880"
  },
  {
    "text": "messaging patterns well now we have flexibility we can have point to point",
    "start": "1866880",
    "end": "1873639"
  },
  {
    "text": "uh pointto point a messaging pattern is where sender send something to a queue",
    "start": "1873639",
    "end": "1878720"
  },
  {
    "text": "and we know exactly what and where is that queue and we have one receiver at the end so we go through that cue to",
    "start": "1878720",
    "end": "1886679"
  },
  {
    "text": "basically send uh message another thing is publish subscribe we have a publisher",
    "start": "1886679",
    "end": "1893960"
  },
  {
    "text": "sending messages to a queue and from that que or in case of rabbit mq to an exchange that contains cues many",
    "start": "1893960",
    "end": "1901279"
  },
  {
    "text": "subscribers are notified so the difference between publish subscribe or um Pub sub and sending a message and",
    "start": "1901279",
    "end": "1910200"
  },
  {
    "text": "receiving a message is the context where we are at right so we have a publisher that sends one single message but three",
    "start": "1910200",
    "end": "1918799"
  },
  {
    "text": "subscribers will receive that message because they receive a copy of that message so this is a fan out pretty much",
    "start": "1918799",
    "end": "1926360"
  },
  {
    "text": "and another thing that I want to talk to you about is the request response but",
    "start": "1926360",
    "end": "1931960"
  },
  {
    "text": "this is done over cu's so a producer will put a message in a queue a consumer",
    "start": "1931960",
    "end": "1937080"
  },
  {
    "text": "would receive that message and it will reply back with whatever we wanted to",
    "start": "1937080",
    "end": "1943320"
  },
  {
    "text": "reply but in a temporary queue so we do not have request response as we do in",
    "start": "1943320",
    "end": "1949480"
  },
  {
    "text": "HTTP but this time we're using this in between um and the road is more",
    "start": "1949480",
    "end": "1955320"
  },
  {
    "text": "complicated pretty much but we get the the reply back and this could mimic what",
    "start": "1955320",
    "end": "1960960"
  },
  {
    "text": "we have in HTTP apis public facing so what's in it for",
    "start": "1960960",
    "end": "1966919"
  },
  {
    "text": "us why messaging and I also have a lot of code to show well of course we get at",
    "start": "1966919",
    "end": "1973720"
  },
  {
    "text": "first we get increased throughput so if we have have a burst of orders those orders end up being stored",
    "start": "1973720",
    "end": "1982240"
  },
  {
    "text": "in the message broker and from there they get distributed to different consumers interested in consuming order",
    "start": "1982240",
    "end": "1989480"
  },
  {
    "text": "messages well the idea with increased trut is that we can handle it if we spin",
    "start": "1989480",
    "end": "1995720"
  },
  {
    "text": "up several instances of the same consumer and this way we get another design pattern called competing",
    "start": "1995720",
    "end": "2001840"
  },
  {
    "text": "consumers where the load is distributed because the message Brokers know how to send send those messages",
    "start": "2001840",
    "end": "2009840"
  },
  {
    "text": "first to the first consumers second consumers and so on so we distribute the load without us intervening too much",
    "start": "2009840",
    "end": "2016120"
  },
  {
    "text": "without having load balancer and what not other systems in between so we get",
    "start": "2016120",
    "end": "2021159"
  },
  {
    "text": "this elasticity when we know we would have a pick in orders we can have",
    "start": "2021159",
    "end": "2027200"
  },
  {
    "text": "several consumers and those will level out the load uh very",
    "start": "2027200",
    "end": "2032240"
  },
  {
    "text": "easily so when we come and talk about agility we get faster development once",
    "start": "2032240",
    "end": "2038320"
  },
  {
    "text": "we grasp the concept uh the microservices that we develop",
    "start": "2038320",
    "end": "2044840"
  },
  {
    "text": "would be developed faster because we're pretty much we care about what we send and what we consume and that's it we",
    "start": "2044840",
    "end": "2051760"
  },
  {
    "text": "care about the contracts that we get and that's it not about integrating or whatever API to make sure that that",
    "start": "2051760",
    "end": "2058800"
  },
  {
    "text": "other API knows what we're sending or what we're expecting and so on WE you send the messages to the message broker",
    "start": "2058800",
    "end": "2064599"
  },
  {
    "text": "and from now on there is this other team's job okay so there isn't any tedious",
    "start": "2064599",
    "end": "2071679"
  },
  {
    "text": "processes as before what we depend is a contract the part that we want to make",
    "start": "2071679",
    "end": "2077358"
  },
  {
    "text": "sure everyone knows about because based on that we can determine what is the message",
    "start": "2077359",
    "end": "2083358"
  },
  {
    "text": "type so teams will have full ownership and understanding of the code based um and of course it is agnostic so we can",
    "start": "2083359",
    "end": "2090878"
  },
  {
    "text": "have consumers that are written in Rust and the Publishers that are written in C",
    "start": "2090879",
    "end": "2096599"
  },
  {
    "text": "or Java yeah we get this interoperability of out of the the box",
    "start": "2096599",
    "end": "2101760"
  },
  {
    "text": "and we can switch them if needed okay so what do we gain and what",
    "start": "2101760",
    "end": "2106839"
  },
  {
    "text": "would be the issues that we also gain right because there is no Silver Bullet",
    "start": "2106839",
    "end": "2111960"
  },
  {
    "text": "in software development we can process more requests faster even we don't lose them",
    "start": "2111960",
    "end": "2118240"
  },
  {
    "text": "which is a big plus we have this load leveling and what do we lose is that we",
    "start": "2118240",
    "end": "2126880"
  },
  {
    "text": "now have another problem which is eventual consistency in system where the orders matter eventual consistency needs",
    "start": "2126880",
    "end": "2133599"
  },
  {
    "text": "to be solved and of course um we also get some things uh the need of the",
    "start": "2133599",
    "end": "2139720"
  },
  {
    "text": "outbox pattern now we cannot have distributed transactions if we want to save something in a database but also",
    "start": "2139720",
    "end": "2147119"
  },
  {
    "text": "publish a message we would need to think about okay but we have two different",
    "start": "2147119",
    "end": "2152400"
  },
  {
    "text": "systems a database and a message broker which is first what happens if",
    "start": "2152400",
    "end": "2158240"
  },
  {
    "text": "I'm saving it in the database but something happens and the message crashes it's like I have an",
    "start": "2158240",
    "end": "2164319"
  },
  {
    "text": "inconsistency right so now we have some other design patterns to think about the",
    "start": "2164319",
    "end": "2169760"
  },
  {
    "text": "outbox patterns or the inbox pattern and the edding or the framework that you're",
    "start": "2169760",
    "end": "2175400"
  },
  {
    "text": "choosing you might get get it U out of the box out box another thing is Saga so",
    "start": "2175400",
    "end": "2183599"
  },
  {
    "text": "if you want to coordinate processes um Saga pattern is something that you would",
    "start": "2183599",
    "end": "2188720"
  },
  {
    "text": "need and now we have more complicated things to think about another thing is",
    "start": "2188720",
    "end": "2194880"
  },
  {
    "text": "around recoverability and I'm going to show you some demos um around this so um if let's",
    "start": "2194880",
    "end": "2202640"
  },
  {
    "text": "say the data contract changed right so you publish the burst of messages but",
    "start": "2202640",
    "end": "2208200"
  },
  {
    "text": "you're not able to consume them or something happened inside your consumer that it errors out you rely on a",
    "start": "2208200",
    "end": "2213760"
  },
  {
    "text": "specific value or a property that is not there anymore all those messages end up in an error Quee right",
    "start": "2213760",
    "end": "2222160"
  },
  {
    "text": "so what you would need to do is to manually dig in there get each message fix the problem and rep push them to be",
    "start": "2222160",
    "end": "2229119"
  },
  {
    "text": "reprocessed because assumingly now your consumer fixed itself or someone did a",
    "start": "2229119",
    "end": "2235520"
  },
  {
    "text": "deploy right so there is this recoverability feature that you might",
    "start": "2235520",
    "end": "2240560"
  },
  {
    "text": "have out of the box or not and it might be easy to solve or not I've seen a lot",
    "start": "2240560",
    "end": "2246319"
  },
  {
    "text": "of companies doing their own tools that uh it's more of a devops problem pretty much but if they're using",
    "start": "2246319",
    "end": "2253920"
  },
  {
    "text": "rabbit mq for example as a message broker they have a plugin that shovels all the messages from one queue to a",
    "start": "2253920",
    "end": "2260359"
  },
  {
    "text": "named queue that you specify but if you want to edit manually all those thousand",
    "start": "2260359",
    "end": "2265800"
  },
  {
    "text": "messages well there is some work to do so um I'm going to show you a tool that",
    "start": "2265800",
    "end": "2272079"
  },
  {
    "text": "fixes this so what tools Frameworks and systems we have at our disposal",
    "start": "2272079",
    "end": "2278560"
  },
  {
    "text": "well there are plenty of them uh some of them are message Brokers rabbit mq um",
    "start": "2278560",
    "end": "2284920"
  },
  {
    "text": "active mq uh Kafka is a messaging stream Zer mq",
    "start": "2284920",
    "end": "2291720"
  },
  {
    "text": "but I do want to talk about mass transit which is a wrapper around your code that",
    "start": "2291720",
    "end": "2297680"
  },
  {
    "text": "obstructs way uh your infrastructure and also and service bus from",
    "start": "2297680",
    "end": "2303200"
  },
  {
    "text": "particular yeah so um just to tell you a small whole story when I first started",
    "start": "2303200",
    "end": "2309240"
  },
  {
    "text": "with messaging um I used rabbit mq because that was available back then but",
    "start": "2309240",
    "end": "2316319"
  },
  {
    "text": "we we use their native SDK and for. net is that amount of code",
    "start": "2316319",
    "end": "2322680"
  },
  {
    "text": "to send the message and a similar amount of codes to receive a message and to acknowledge that the message is",
    "start": "2322680",
    "end": "2329000"
  },
  {
    "text": "processed and so on um I don't know why but back then I didn't know that and",
    "start": "2329000",
    "end": "2334119"
  },
  {
    "text": "service bus exists or that mass transit exists uh these two libraries are pretty much",
    "start": "2334119",
    "end": "2340040"
  },
  {
    "text": "like a repository pattern on top of your code that do a lot of things um for you",
    "start": "2340040",
    "end": "2347000"
  },
  {
    "text": "you just configure them and not care about the infrastructure that's behind and also allow you to switch because uh",
    "start": "2347000",
    "end": "2356599"
  },
  {
    "text": "if you now might use rabbit mq but tomorrow you might want to use Asia service bus right this would make it",
    "start": "2356599",
    "end": "2362800"
  },
  {
    "text": "very easy for you to switch the the technology behind because the technology behind yes it does implement amqp and",
    "start": "2362800",
    "end": "2370359"
  },
  {
    "text": "whatever other protocols knows how to handle messages but in our code the big",
    "start": "2370359",
    "end": "2376480"
  },
  {
    "text": "pain is when we have to switch and do the code changes that no one wants to do",
    "start": "2376480",
    "end": "2381560"
  },
  {
    "text": "and what i' I've seen by being at a particular boot uh I've thinken I heard",
    "start": "2381560",
    "end": "2386720"
  },
  {
    "text": "people saying that yeah we kind of have our own wrapper on top of rabit and Q to",
    "start": "2386720",
    "end": "2392040"
  },
  {
    "text": "make it easier to deal with why should you invest time and",
    "start": "2392040",
    "end": "2398680"
  },
  {
    "text": "people's time doing that when there are already libraries doing that right and",
    "start": "2398680",
    "end": "2404119"
  },
  {
    "text": "they they're Lifesavers not only that but some of them they have monitoring tools out of the box as particular",
    "start": "2404119",
    "end": "2411800"
  },
  {
    "text": "has so no matter the broker use a library that abstracts the way the",
    "start": "2411800",
    "end": "2418440"
  },
  {
    "text": "infrastructure for developers how Q is configured and stuff like that in rabbit",
    "start": "2418440",
    "end": "2424720"
  },
  {
    "text": "mq shouldn't be a problem what we the developer should do is create a message",
    "start": "2424720",
    "end": "2430400"
  },
  {
    "text": "send a message to somewhere and from there done right and is there other jobs",
    "start": "2430400",
    "end": "2437280"
  },
  {
    "text": "other developers job to consume those messages right so um I'm going to show",
    "start": "2437280",
    "end": "2443480"
  },
  {
    "text": "you a thing I hope the and I also show I'm going to show",
    "start": "2443480",
    "end": "2451079"
  },
  {
    "text": "you some demos that I have prepared so",
    "start": "2451079",
    "end": "2457599"
  },
  {
    "text": "hoping the internet works I think it's very um obvious the",
    "start": "2457599",
    "end": "2466599"
  },
  {
    "text": "ease of using the thing so for example with rabbit mq right if uh we were to",
    "start": "2466599",
    "end": "2472040"
  },
  {
    "text": "send the message the barebone code that would be with their native a Decay there",
    "start": "2472040",
    "end": "2477520"
  },
  {
    "text": "it's good but there are some things that we have to learn is that uh for example for this process order uh command",
    "start": "2477520",
    "end": "2485119"
  },
  {
    "text": "message definition so this is the that gets sent over the network as the result of something okay so process order if we",
    "start": "2485119",
    "end": "2492880"
  },
  {
    "text": "want to send um this process order we would serialize that and then we would",
    "start": "2492880",
    "end": "2498760"
  },
  {
    "text": "create some basic properties and then we configur those properties and then we had some headers uh message type type of",
    "start": "2498760",
    "end": "2506119"
  },
  {
    "text": "that message we confirm the selection then we basic publish we wait for",
    "start": "2506119",
    "end": "2511200"
  },
  {
    "text": "confirmation and if you want to consume where we create an inventing basic",
    "start": "2511200",
    "end": "2516760"
  },
  {
    "text": "consumer and we do this Eventing handling things that is not so easy to understand for a",
    "start": "2516760",
    "end": "2523000"
  },
  {
    "text": "lot of new developers at least then we do basic acknowledge and then we basic",
    "start": "2523000",
    "end": "2528720"
  },
  {
    "text": "consume huh to send the message all these why it's like I want to blah blah",
    "start": "2528720",
    "end": "2534720"
  },
  {
    "text": "blah do send pass into type and that's it not care about things right that would be the best scenario for me as a",
    "start": "2534720",
    "end": "2542200"
  },
  {
    "text": "developer with n service bu we can do a similar thing right so we have the same",
    "start": "2542200",
    "end": "2547400"
  },
  {
    "text": "processing message and you do endpoint send we pass in done magic happens",
    "start": "2547400",
    "end": "2552880"
  },
  {
    "text": "because we configured it like for the developer how the processing stuff looks",
    "start": "2552880",
    "end": "2558520"
  },
  {
    "text": "like well we create a Handler that inherits uh implements I handle messages",
    "start": "2558520",
    "end": "2564640"
  },
  {
    "text": "we give it the type that we care about and then here is the actual business logic all the neck the back the whatever",
    "start": "2564640",
    "end": "2571040"
  },
  {
    "text": "what in there no I do not care about right and this makes it very easy for me",
    "start": "2571040",
    "end": "2576240"
  },
  {
    "text": "whenever I want to to switch the message Brokers because there are scenarios I know maybe we're now in Asia service bus",
    "start": "2576240",
    "end": "2582079"
  },
  {
    "text": "and we get the better deal for Amazon and we need to switch right why invest",
    "start": "2582079",
    "end": "2587240"
  },
  {
    "text": "like months in doing so when we could simply switch the the transport and",
    "start": "2587240",
    "end": "2593319"
  },
  {
    "text": "that's it so for example for uh Asia service",
    "start": "2593319",
    "end": "2598480"
  },
  {
    "text": "bus it's pretty close it's still a lot of code to write right so you you have",
    "start": "2601839",
    "end": "2607359"
  },
  {
    "text": "the name space where is it the transport type if we want to use mqp websockets we",
    "start": "2607359",
    "end": "2613200"
  },
  {
    "text": "create the endpoint and it's the same thing in some cases process the messages",
    "start": "2613200",
    "end": "2618520"
  },
  {
    "text": "I snc then we serialize the body we look at different things we try to get a value yada yada lot of code why no I",
    "start": "2618520",
    "end": "2627760"
  },
  {
    "text": "just want to send my type and that's it and do the same because the code looks",
    "start": "2627760",
    "end": "2633000"
  },
  {
    "text": "the same no matter the transport right we configure the connections string if needed we set it as an environment",
    "start": "2633000",
    "end": "2639160"
  },
  {
    "text": "variable and that's it right so I shouldn't care about like technicalities what's behind no send message this is",
    "start": "2639160",
    "end": "2648119"
  },
  {
    "text": "the type fill it with data done right so um let's see how uh a messaging",
    "start": "2648119",
    "end": "2658319"
  },
  {
    "text": "scenario would look um in code so I hope the code is big enough for",
    "start": "2658319",
    "end": "2663839"
  },
  {
    "text": "the last rows so first I wanted to show you what happens but I think it's pretty",
    "start": "2663839",
    "end": "2670000"
  },
  {
    "text": "obvious um if you have API 1 calling api2 right HTTP request because you have",
    "start": "2670000",
    "end": "2678800"
  },
  {
    "text": "here some products and then you want to call to get the stocks for those products if you only start um the orders",
    "start": "2678800",
    "end": "2687440"
  },
  {
    "text": "API and you create a new order You' be stock waiting for",
    "start": "2687440",
    "end": "2693200"
  },
  {
    "text": "stocks and I'm going to run this so we're here so when we create an order",
    "start": "2693200",
    "end": "2700800"
  },
  {
    "text": "yeah we get an order model we map it to a domain object and then we call this HTTP client hey get stock right to see",
    "start": "2700800",
    "end": "2709200"
  },
  {
    "text": "if there is available and I can continue with the order and save it so if we do a",
    "start": "2709200",
    "end": "2716440"
  },
  {
    "text": "request we're here but well something bad happens I don't",
    "start": "2717520",
    "end": "2723559"
  },
  {
    "text": "know the stock API is down we would get maybe this ugly stuff",
    "start": "2723559",
    "end": "2729359"
  },
  {
    "text": "eventually sooner or later we we get this right there is no connection but we",
    "start": "2729359",
    "end": "2734640"
  },
  {
    "text": "kind of lost the content of the request so we lost money because we lost an order right we don't know what's there",
    "start": "2734640",
    "end": "2743119"
  },
  {
    "text": "but the first thing that we could do is to say okay yeah this",
    "start": "2743119",
    "end": "2748720"
  },
  {
    "text": "uh other service has issues so how about wrapping some retrying policies around",
    "start": "2748720",
    "end": "2755079"
  },
  {
    "text": "it so I'm going to go here here and WRA install poly maybe because that's the",
    "start": "2755079",
    "end": "2760880"
  },
  {
    "text": "most um known I'm going to say hey I want an H Perry strategy option with maximum retry",
    "start": "2760880",
    "end": "2768040"
  },
  {
    "text": "attemps of four uh I'm going to delay two seconds between them and back of top",
    "start": "2768040",
    "end": "2773160"
  },
  {
    "text": "exponential and that's it cool solved my issues right and when you run again and",
    "start": "2773160",
    "end": "2778200"
  },
  {
    "text": "do the same request yes it will retry by itself during the I mean according to",
    "start": "2778200",
    "end": "2784599"
  },
  {
    "text": "the algorithm that I specified but but what happen if it's not successful",
    "start": "2784599",
    "end": "2792640"
  },
  {
    "text": "right so do request we're here I'm going to remove",
    "start": "2792640",
    "end": "2798559"
  },
  {
    "text": "the breako it will take longer this time and",
    "start": "2798559",
    "end": "2804200"
  },
  {
    "text": "we can see what's going on by looking at the console window we see that we get an execution attempt to call that so the",
    "start": "2804200",
    "end": "2811520"
  },
  {
    "text": "retry policy is in place takes a while another attempt",
    "start": "2811520",
    "end": "2818839"
  },
  {
    "text": "we wait some more and then another attempt up until it reaches the retry",
    "start": "2819079",
    "end": "2825880"
  },
  {
    "text": "limit and some more but in the end we will get an exception right it's not like the retri",
    "start": "2825880",
    "end": "2832000"
  },
  {
    "text": "policy would save somewhere in the database so we can retrieve it later that's not possible Right",
    "start": "2832000",
    "end": "2839119"
  },
  {
    "text": "but and yes we did get a response with the same thing the the second API is not",
    "start": "2839119",
    "end": "2845440"
  },
  {
    "text": "there but how about we try to switch all these things to messaging and you'll",
    "start": "2845440",
    "end": "2853480"
  },
  {
    "text": "also have access to the source code so don't worry um you'll get it at the end",
    "start": "2853480",
    "end": "2859079"
  },
  {
    "text": "for example if we know what types of data we want to pass on we would create",
    "start": "2859079",
    "end": "2865040"
  },
  {
    "text": "a library Co called contract and this would be shared among the components",
    "start": "2865040",
    "end": "2870640"
  },
  {
    "text": "that need to be shared so for example we have here uh events a single event in",
    "start": "2870640",
    "end": "2876559"
  },
  {
    "text": "this case case order created which is nothing more than a regular C class with some properties right and whoever wants",
    "start": "2876559",
    "end": "2883559"
  },
  {
    "text": "to have access to this order created we'll get access to this contract um class Library so it's easier for us to",
    "start": "2883559",
    "end": "2890160"
  },
  {
    "text": "distribute that uh the idea is to keep everything clean right so no business logic no other things just data storage",
    "start": "2890160",
    "end": "2897440"
  },
  {
    "text": "uh these events are super small or as small as you need them uh and the same",
    "start": "2897440",
    "end": "2903319"
  },
  {
    "text": "would happen if we would have um a command right so let's see how we can change this",
    "start": "2903319",
    "end": "2909520"
  },
  {
    "text": "API to not call the stock this time but pass in the information that we get from",
    "start": "2909520",
    "end": "2916200"
  },
  {
    "text": "the calling party and to store it in the database you'll not I'm using mass transit so you'll have an example here",
    "start": "2916200",
    "end": "2923760"
  },
  {
    "text": "uh on understand endpoint get the send endpoint I know for fact this is a point too communication we're passing in to",
    "start": "2923760",
    "end": "2930319"
  },
  {
    "text": "this specific Q uh we send whatever we receive uh and we move on and then we",
    "start": "2930319",
    "end": "2936559"
  },
  {
    "text": "have a worker class that knows how to handle uh order",
    "start": "2936559",
    "end": "2941839"
  },
  {
    "text": "creation so when we start this it will pick up uh messages from the queue and we'll do whatever the controller used to",
    "start": "2941839",
    "end": "2948480"
  },
  {
    "text": "do and save it in the database so it gets the order maps it I know modifies",
    "start": "2948480",
    "end": "2954040"
  },
  {
    "text": "it whatever and also can notify other components that hey an order has been created okay so let's run orders",
    "start": "2954040",
    "end": "2962079"
  },
  {
    "text": "controller again the idea with this workers or",
    "start": "2962079",
    "end": "2967640"
  },
  {
    "text": "consumers is to be as small as you can have them so you can scale them in",
    "start": "2967640",
    "end": "2972760"
  },
  {
    "text": "independently right so if you have a component that knows how to create orders that can be scaled as many times",
    "start": "2972760",
    "end": "2979079"
  },
  {
    "text": "as you want it because that's only the only thing that you does create",
    "start": "2979079",
    "end": "2984480"
  },
  {
    "text": "orders okay so now when I send a an",
    "start": "2984480",
    "end": "2990280"
  },
  {
    "text": "order again I'm going to open rabbit mq interface and I'm going to look in the",
    "start": "2990280",
    "end": "2996400"
  },
  {
    "text": "Que and you're going to see a Quee that is called create order command and inside",
    "start": "2996400",
    "end": "3002440"
  },
  {
    "text": "it there is one uh message ready to be consumed so it's not lost right so now",
    "start": "3002440",
    "end": "3009720"
  },
  {
    "text": "when this is of course created or we can get an accepted status codes depending",
    "start": "3009720",
    "end": "3015839"
  },
  {
    "text": "on the scenario so if we want to fool the user in a way hey I got you we're I'm going to contact you later you get",
    "start": "3015839",
    "end": "3022720"
  },
  {
    "text": "the2 back so accepted yeah it's two it start we do is a success status code but",
    "start": "3022720",
    "end": "3029079"
  },
  {
    "text": "we don't give it anything back and now you see there's nothing consuming that",
    "start": "3029079",
    "end": "3034680"
  },
  {
    "text": "message that sits around in the cube but if I want it to be consumed I can go in",
    "start": "3034680",
    "end": "3039880"
  },
  {
    "text": "here in the where are you messaging order creation worker and I can run the",
    "start": "3039880",
    "end": "3047680"
  },
  {
    "text": "instance but not before I add a breakpoint here so right click debug",
    "start": "3047680",
    "end": "3054960"
  },
  {
    "text": "there are other ways of doing this but it's easier during",
    "start": "3054960",
    "end": "3060480"
  },
  {
    "text": "demos and as soon this is started you'll notice that the broker pushes the",
    "start": "3061359",
    "end": "3068240"
  },
  {
    "text": "message that is in the queue so we can access the context we can access the",
    "start": "3068240",
    "end": "3073880"
  },
  {
    "text": "message property which if we expand this and I'm trying not to lose",
    "start": "3073880",
    "end": "3080079"
  },
  {
    "text": "it context. message is exactly the thing that got saved as a message from the",
    "start": "3080079",
    "end": "3087240"
  },
  {
    "text": "order that was sent from Postman so these are the properties we get the status default status for that order and",
    "start": "3087240",
    "end": "3093640"
  },
  {
    "text": "so on right so it's e there we save it in the database and we moved on and also",
    "start": "3093640",
    "end": "3100400"
  },
  {
    "text": "we write this information as the in the console window uh also as a result of a order",
    "start": "3100400",
    "end": "3109200"
  },
  {
    "text": "saving we can publish hey a an event right an order has been created and what",
    "start": "3109200",
    "end": "3115240"
  },
  {
    "text": "you'll see here is that nothing gets sent in or created in the",
    "start": "3115240",
    "end": "3121359"
  },
  {
    "text": "message broker and that's because mass transit only creates Q as soon as you attach a consumer to it otherwise it",
    "start": "3121359",
    "end": "3128319"
  },
  {
    "text": "will appear as nothing happened didn't work right so let's go ahead and start",
    "start": "3128319",
    "end": "3133359"
  },
  {
    "text": "this notification worker that is interested in an event that happened in the system so I'm going to do the",
    "start": "3133359",
    "end": "3142680"
  },
  {
    "text": "same so now I have two consumers that don't care about each other they're attached to a queue inside the message",
    "start": "3142680",
    "end": "3149200"
  },
  {
    "text": "queue inside at the end of the queue I'm going to finish this and I'm",
    "start": "3149200",
    "end": "3154319"
  },
  {
    "text": "going to do another request okay let's see if this is",
    "start": "3154319",
    "end": "3160400"
  },
  {
    "text": "working great and another thing I think the API is not running let me check how many I have",
    "start": "3160400",
    "end": "3167319"
  },
  {
    "text": "create order consumer and notification order created consumer and the",
    "start": "3167319",
    "end": "3173599"
  },
  {
    "text": "API so I can use Postman to create my",
    "start": "3173599",
    "end": "3178799"
  },
  {
    "text": "orders but this way I can attach as many consumers I want as many consumers can",
    "start": "3179000",
    "end": "3184839"
  },
  {
    "text": "be interested in a specific event that happened and I can react",
    "start": "3184839",
    "end": "3190319"
  },
  {
    "text": "accordingly so let's see uh we save it we publish the order and now when we",
    "start": "3190319",
    "end": "3196200"
  },
  {
    "text": "look in rabbit mq suddenly there is this order created notification the naming",
    "start": "3196200",
    "end": "3202520"
  },
  {
    "text": "can be controlled by you or you can leave it to The Chance by the default naming convention yeah so if we look in here",
    "start": "3202520",
    "end": "3211160"
  },
  {
    "text": "we'll notice that the notification word received something in order with an ID 14 and in here uh there is a second",
    "start": "3211160",
    "end": "3219680"
  },
  {
    "text": "message that was processed I'm just uh writing something in here because I didn't Auto assign an",
    "start": "3219680",
    "end": "3226280"
  },
  {
    "text": "idea just to mimic um the things okay and another thing that I think I'm going",
    "start": "3226280",
    "end": "3233000"
  },
  {
    "text": "to have enough time to show you is the request reply that can be",
    "start": "3233000",
    "end": "3238599"
  },
  {
    "text": "done uh as a over cued too so we have an orders controller and you'll see here",
    "start": "3238599",
    "end": "3245680"
  },
  {
    "text": "when you download the code is that you have a get order that mimics how um HTTP",
    "start": "3245680",
    "end": "3253040"
  },
  {
    "text": "response would look like so it calls the client that listens on the messaging",
    "start": "3253040",
    "end": "3258640"
  },
  {
    "text": "cues and it will return back an order result if the order is found or an order not found result if the order is not",
    "start": "3258640",
    "end": "3265359"
  },
  {
    "text": "found so I'm going to comment up the old code this is traditional rest not found",
    "start": "3265359",
    "end": "3270480"
  },
  {
    "text": "in okay with that order so when I run the",
    "start": "3270480",
    "end": "3276000"
  },
  {
    "text": "API I also have here a consumer attached hang",
    "start": "3278359",
    "end": "3285000"
  },
  {
    "text": "on what are you",
    "start": "3287079",
    "end": "3291079"
  },
  {
    "text": "Services I'm going to just verify order I don't think I have a consumer created",
    "start": "3293640",
    "end": "3300000"
  },
  {
    "text": "yet uh you'll notice here that you have a request client just as you would have",
    "start": "3300040",
    "end": "3306839"
  },
  {
    "text": "with HTTP you register it in the pipeline and you will see it there uh request",
    "start": "3306839",
    "end": "3312799"
  },
  {
    "text": "client no apparently I didn't implement the consumer yet I was",
    "start": "3312799",
    "end": "3318960"
  },
  {
    "text": "about to but I'm going to push the code anyways um it will behave the same the",
    "start": "3318960",
    "end": "3325200"
  },
  {
    "text": "receiving part the send the client basically consumer of the API will get okay or not found with an error",
    "start": "3325200",
    "end": "3332839"
  },
  {
    "text": "message so this can be mimicked what would happen in the broker is another temporary queue with the default",
    "start": "3332839",
    "end": "3338880"
  },
  {
    "text": "expiration time will be created every single time you do request to that so the response come comes back through",
    "start": "3338880",
    "end": "3345440"
  },
  {
    "text": "that error que okay so what I'm going to do is to show you the recoverability",
    "start": "3345440",
    "end": "3351920"
  },
  {
    "text": "part I'm going to start a Docker instance",
    "start": "3351920",
    "end": "3358240"
  },
  {
    "text": "with a tool that I think is very important to have I have a question are you using messaging",
    "start": "3358599",
    "end": "3365079"
  },
  {
    "text": "already awesome with what is your service bus active M active",
    "start": "3365079",
    "end": "3372039"
  },
  {
    "text": "mq um wrapper around it like mass transit service bus brighter brighter",
    "start": "3372039",
    "end": "3377920"
  },
  {
    "text": "brighter okay it takes a while so I tested it",
    "start": "3377920",
    "end": "3384200"
  },
  {
    "text": "last night and the images are pretty small large the internet is not that good and it took a while so some",
    "start": "3384200",
    "end": "3390359"
  },
  {
    "text": "elevator music would have been nice can you help me with",
    "start": "3390359",
    "end": "3396200"
  },
  {
    "text": "that but um some of the things are started some",
    "start": "3396920",
    "end": "3404160"
  },
  {
    "text": "of them are not but in any case if we want to talk more you'll find me by the",
    "start": "3404160",
    "end": "3409880"
  },
  {
    "text": "particular boots today so I'm there if you have questions or Curiosities",
    "start": "3409880",
    "end": "3416720"
  },
  {
    "text": "uh these are all green So in theory just in theory practice we know",
    "start": "3416720",
    "end": "3423400"
  },
  {
    "text": "that sometimes doesn't work so you'll notice a bunch of um things so you'll",
    "start": "3423400",
    "end": "3428480"
  },
  {
    "text": "see Bill error B order uncore error mass transit does create an A pair for our",
    "start": "3428480",
    "end": "3435359"
  },
  {
    "text": "initial queue in case of an error so that's the concept of a dead letter Q pretty much U creates a pair where we",
    "start": "3435359",
    "end": "3441599"
  },
  {
    "text": "will store all the errors that happens in the system so not lost over there but",
    "start": "3441599",
    "end": "3446839"
  },
  {
    "text": "the idea is as soon as your number of cues grows uh it's kind of tedious to do",
    "start": "3446839",
    "end": "3452039"
  },
  {
    "text": "the the work so uh what particular did",
    "start": "3452039",
    "end": "3457200"
  },
  {
    "text": "was to create a showcase where you can you this is public so you can you will",
    "start": "3457200",
    "end": "3462520"
  },
  {
    "text": "find it link Linked In My samples so you run the scenario and a bunch of orders",
    "start": "3462520",
    "end": "3468119"
  },
  {
    "text": "for different funky fruits are um are sent but some of",
    "start": "3468119",
    "end": "3474400"
  },
  {
    "text": "those orders are not processed with success so uh",
    "start": "3474400",
    "end": "3481000"
  },
  {
    "text": "we're see an order with this order ID has mangotin and whatever fruits are",
    "start": "3481000",
    "end": "3487440"
  },
  {
    "text": "those failed so uh the sales process failed and of course the billing process",
    "start": "3487440",
    "end": "3492839"
  },
  {
    "text": "failed you'll see here what is the flow of messages pretty much so client doesn't order so the sales component",
    "start": "3492839",
    "end": "3499960"
  },
  {
    "text": "gets in publishes a message that message is interesting for the billing component",
    "start": "3499960",
    "end": "3505319"
  },
  {
    "text": "and for the shipping right so it needs to create an invoice or take the payment and also arrange the shipping but as",
    "start": "3505319",
    "end": "3512559"
  },
  {
    "text": "soon as we see errors we can click here and see failures and we'll see",
    "start": "3512559",
    "end": "3517880"
  },
  {
    "text": "information about the errors happening in the system and this is a thing that um kind of is not available out of the",
    "start": "3517880",
    "end": "3524760"
  },
  {
    "text": "box you either implement it in your company spending a lot of time or you use this tool so you get here all the fa",
    "start": "3524760",
    "end": "3531599"
  },
  {
    "text": "failed messages you'll see these grouped by the exception types or by the",
    "start": "3531599",
    "end": "3536720"
  },
  {
    "text": "endpoint address instance name and so on so everything is filtered in here and",
    "start": "3536720",
    "end": "3541880"
  },
  {
    "text": "you can inspect them individually for example the type of message that failed is order placed happening in a specific",
    "start": "3541880",
    "end": "3548799"
  },
  {
    "text": "endpoint we can see the stack Trace that happened we can see the headers uh and",
    "start": "3548799",
    "end": "3555359"
  },
  {
    "text": "the message body of course and one of the most important features is that you can edit and retry so youve figured out",
    "start": "3555359",
    "end": "3562720"
  },
  {
    "text": "hey an error an order IDE something is not correct right right you can go in here and",
    "start": "3562720",
    "end": "3568760"
  },
  {
    "text": "edit whatever you want to edit and you click retry and that message will be uh",
    "start": "3568760",
    "end": "3575799"
  },
  {
    "text": "will be gone to the initial source that was supposed to process it and this makes it very easy to like deal with",
    "start": "3575799",
    "end": "3583039"
  },
  {
    "text": "errors also if you want you can retry all select them all and retry all and",
    "start": "3583039",
    "end": "3590520"
  },
  {
    "text": "why not delete them it depends on how you want to treat your errors I",
    "start": "3590520",
    "end": "3595559"
  },
  {
    "text": "gracefully or not so gracefully by deleting them right but this is a very",
    "start": "3595559",
    "end": "3600680"
  },
  {
    "text": "important feature that we kind of do not have around the the ecosystem so give it a try it's in the Early Access program",
    "start": "3600680",
    "end": "3606799"
  },
  {
    "text": "so U tell us what you think about it and uh as I told you can find me at the",
    "start": "3606799",
    "end": "3613280"
  },
  {
    "text": "particular boot if you have questions um key takeaway for for today",
    "start": "3613280",
    "end": "3620839"
  },
  {
    "text": "use a wrapper on top of the infrastructure code because it will save you",
    "start": "3620839",
    "end": "3627119"
  },
  {
    "text": "hours so no matter the extraction use it find one and use it right either mass",
    "start": "3627119",
    "end": "3632359"
  },
  {
    "text": "transit and surface bus bright or others that suit your or purpose use the abstraction because it's very useful",
    "start": "3632359",
    "end": "3639559"
  },
  {
    "text": "okay so keep in mind HTTP is not the only option you can find here a bitly",
    "start": "3639559",
    "end": "3645280"
  },
  {
    "text": "that points to the repo with the code and uh also the slides and the Showcase",
    "start": "3645280",
    "end": "3651359"
  },
  {
    "text": "with the recoverability thing that I showed you and don't be shy combined particular but then let's talk thank you",
    "start": "3651359",
    "end": "3657839"
  },
  {
    "text": "for attending I hope you learn something",
    "start": "3657839",
    "end": "3662599"
  }
]