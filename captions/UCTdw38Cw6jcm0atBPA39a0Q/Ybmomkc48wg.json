[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": "so good afternoon everybody my name is rafael meyer i live and work",
    "start": "11040",
    "end": "16720"
  },
  {
    "text": "in switzerland in a mid-sized company called bbv we're a contracting and consulting",
    "start": "16720",
    "end": "23359"
  },
  {
    "text": "company basically based in switzerland with offices a few offices around the world but we're",
    "start": "23359",
    "end": "30480"
  },
  {
    "text": "focusing on german speaking swiss and german customers so that much about myself or maybe my",
    "start": "30480",
    "end": "39200"
  },
  {
    "text": "i my customers i have are mostly embedded or industrial companies",
    "start": "39200",
    "end": "46800"
  },
  {
    "text": "so it always has to do with machines or kind of hardware and therefore i mostly use c plus plus",
    "start": "46800",
    "end": "53440"
  },
  {
    "text": "and are some in some kind of embedded m field",
    "start": "53440",
    "end": "58719"
  },
  {
    "text": "whatever that means so let's get started so the title of my talk is error",
    "start": "58719",
    "end": "64799"
  },
  {
    "text": "handling revisited and what do you mean with error so",
    "start": "64799",
    "end": "70479"
  },
  {
    "text": "in software we could really talk a lot about theirs there are various kinds of",
    "start": "70479",
    "end": "75520"
  },
  {
    "text": "error happening everywhere or could happen so but in this talk i only want to focus on",
    "start": "75520",
    "end": "81759"
  },
  {
    "text": "one specific kind of error so if you have software and the software wants should do or",
    "start": "81759",
    "end": "87119"
  },
  {
    "text": "we want the software to do something at least a little bit interesting then we have to",
    "start": "87119",
    "end": "94479"
  },
  {
    "text": "deal with the the outer world or the world outside of the software so we",
    "start": "94479",
    "end": "99759"
  },
  {
    "text": "maybe have a user interface that we can interact with the users or we have sensors or actors that we can",
    "start": "99759",
    "end": "106960"
  },
  {
    "text": "engage from the software or we maybe have a database or we want to",
    "start": "106960",
    "end": "112079"
  },
  {
    "text": "to send data to the web or wherever so and if we are kind of",
    "start": "112079",
    "end": "118320"
  },
  {
    "text": "interacting with this outside world then there are things that could go wrong",
    "start": "118320",
    "end": "124240"
  },
  {
    "text": "and that's specific the kind of error i want to talk about today so",
    "start": "124240",
    "end": "129360"
  },
  {
    "text": "how should we handle that if we have to kind of deal with the outside world but things can go wrong how should we deal",
    "start": "129360",
    "end": "136239"
  },
  {
    "text": "with that kind of error and i will just introduce a small example",
    "start": "136239",
    "end": "143680"
  },
  {
    "start": "138000",
    "end": "245000"
  },
  {
    "text": "let's say i have a nice plant in my living room but i'm really bad at watering the plant",
    "start": "143680",
    "end": "150080"
  },
  {
    "text": "so they always die so i want to come up with some kind of automated plant watering system for that",
    "start": "150080",
    "end": "158000"
  },
  {
    "text": "i have some kind of a microcontroller board i have a moisture sensor sensor to find",
    "start": "158000",
    "end": "164480"
  },
  {
    "text": "out how much moisture is still left in the earth of this plant",
    "start": "164480",
    "end": "169680"
  },
  {
    "text": "i have a temperature sensor for the ambient temperatures because maybe the plant needs a little bit more water in",
    "start": "169680",
    "end": "175840"
  },
  {
    "text": "hot summer than in cold winter and i have a pump to",
    "start": "175840",
    "end": "181920"
  },
  {
    "text": "actually get some water to the plant so if i would code up something like",
    "start": "181920",
    "end": "188959"
  },
  {
    "text": "that in c plus plus it might look a little bit like that so just for",
    "start": "188959",
    "end": "194480"
  },
  {
    "text": "example i have a few signatures of the of this moisture sensor reading out",
    "start": "194480",
    "end": "200720"
  },
  {
    "text": "functions at the pump functions and the other functions are more or less the same like that",
    "start": "200720",
    "end": "206480"
  },
  {
    "text": "so that and then we have this function water in the watering system to actually",
    "start": "206480",
    "end": "212640"
  },
  {
    "text": "do the watering of the plant so we're reading out the moisture from this moisture sensor we're reading out",
    "start": "212640",
    "end": "218319"
  },
  {
    "text": "the temperature from the temperature sensor and then out of the moisture and the",
    "start": "218319",
    "end": "223920"
  },
  {
    "text": "temperature value we calculate the amount of water we actually want to pump to the",
    "start": "223920",
    "end": "229280"
  },
  {
    "text": "plant and then we do the pump action and then in the end for just for that",
    "start": "229280",
    "end": "236239"
  },
  {
    "text": "if you want to do some logging or whatever we return the amount of water that we have given to the plant",
    "start": "236239",
    "end": "242560"
  },
  {
    "text": "from this function so but now what if something goes wrong what if is",
    "start": "242560",
    "end": "247920"
  },
  {
    "start": "245000",
    "end": "484000"
  },
  {
    "text": "the pump is stuck or there is some cabling issue and the temperature sensor can't be read out what should we",
    "start": "247920",
    "end": "254799"
  },
  {
    "text": "do then so there are different patterns of how",
    "start": "254799",
    "end": "259840"
  },
  {
    "text": "we could manage or handle this kind of",
    "start": "259840",
    "end": "265040"
  },
  {
    "text": "of errors if we get some error from the various actors and sensors so one pattern that i often encounter is",
    "start": "265040",
    "end": "272880"
  },
  {
    "text": "that we have these nested ifs so i try to",
    "start": "272880",
    "end": "278240"
  },
  {
    "text": "read out the moisture sensor and if this works out then i try to read out the temperature sensor and so on and so on",
    "start": "278240",
    "end": "284960"
  },
  {
    "text": "and the more actions or i have to take in this sequence to get",
    "start": "284960",
    "end": "291440"
  },
  {
    "text": "something done the deeper the nesting so this doesn't really scale it does not look so nice",
    "start": "291440",
    "end": "299520"
  },
  {
    "text": "so so it's maybe okay for two or three actions but when it gets longer it gets",
    "start": "299520",
    "end": "305360"
  },
  {
    "text": "deeper and deeper and deeper what is what i also don't like that much",
    "start": "305360",
    "end": "311280"
  },
  {
    "text": "is now i had to introduce something to report that there is something going wrong now in this case i",
    "start": "311280",
    "end": "318479"
  },
  {
    "text": "just returned a bool saying okay if it's true then it was okay if it is",
    "start": "318479",
    "end": "324160"
  },
  {
    "text": "false then something went wrong and now the actual value i'm interested",
    "start": "324160",
    "end": "329840"
  },
  {
    "text": "in for example the moisture value out of the moisture sensor i had to convert that to to a output",
    "start": "329840",
    "end": "336240"
  },
  {
    "text": "parameter now there are various kind of options how you could",
    "start": "336240",
    "end": "341520"
  },
  {
    "text": "do output parameters here i just put in for simplicity a reference but it could",
    "start": "341520",
    "end": "346560"
  },
  {
    "text": "also be a pointer it could be a smart pointer it could be something else",
    "start": "346560",
    "end": "352080"
  },
  {
    "text": "but the problem is if i return false what happens to my moisture",
    "start": "352080",
    "end": "358479"
  },
  {
    "text": "so what can i assume about this value is there something going on or not if it's a pointer then it's even worse",
    "start": "358479",
    "end": "365919"
  },
  {
    "text": "even i need to to have some documentation do you have to provide already the object",
    "start": "365919",
    "end": "371120"
  },
  {
    "text": "or or is it created and what state is it in if i get the false back another",
    "start": "371120",
    "end": "379120"
  },
  {
    "text": "pattern i often see is the early return so it's basically the same thing as",
    "start": "379120",
    "end": "384960"
  },
  {
    "text": "before but just instead of nesting we're doing an action checking it if it went",
    "start": "384960",
    "end": "391600"
  },
  {
    "text": "wrong we returned false also so it's basically the same it's just instead of nesting we have these",
    "start": "391600",
    "end": "397840"
  },
  {
    "text": "early returns and then the third pattern i often",
    "start": "397840",
    "end": "404560"
  },
  {
    "text": "encounter are exceptions or maybe i encountered them not that often because in my experience",
    "start": "404560",
    "end": "412240"
  },
  {
    "text": "i often had kind of projects where exceptions were forbidden to use",
    "start": "412240",
    "end": "419199"
  },
  {
    "text": "i often had the impression the reason why they said we're not using exceptions",
    "start": "419199",
    "end": "424720"
  },
  {
    "text": "were more arcane esoterica instead of facts maybe they should have",
    "start": "424720",
    "end": "430000"
  },
  {
    "text": "attended yesterday's workshop i think it was by benzex who was talking about exceptions um",
    "start": "430000",
    "end": "438000"
  },
  {
    "text": "but one interesting thing that i or discussion i had with a colleague of",
    "start": "438000",
    "end": "443199"
  },
  {
    "text": "mine who's a net developer um he's mostly doing c",
    "start": "443199",
    "end": "448319"
  },
  {
    "text": "sharp but he's very much into f sharp and he said",
    "start": "448319",
    "end": "453520"
  },
  {
    "text": "i don't like exception because they're kind of like a go-to they're like extended go to",
    "start": "453520",
    "end": "460560"
  },
  {
    "text": "a go-to on steroids and it breaks the flow so it makes readability hard",
    "start": "460560",
    "end": "465919"
  },
  {
    "text": "because because you have to kind of catch exceptions but",
    "start": "465919",
    "end": "471520"
  },
  {
    "text": "it's not so clear where they're coming from they could be jumping from",
    "start": "471520",
    "end": "476879"
  },
  {
    "text": "quite deep down that was something interesting and i wanted to learn a little bit more why he was reasoning like that and",
    "start": "476879",
    "end": "484639"
  },
  {
    "start": "484000",
    "end": "573000"
  },
  {
    "text": "that led me to some time ago start reading a book about haskell so",
    "start": "484639",
    "end": "492240"
  },
  {
    "text": "this is a the it's also called the elephant book in contrast to the dragon book",
    "start": "492240",
    "end": "497280"
  },
  {
    "text": "it's quite the fun read and i started to read it and when i was reading it",
    "start": "497280",
    "end": "506080"
  },
  {
    "text": "i've i saw that if we doing the example before if you were",
    "start": "506080",
    "end": "511280"
  },
  {
    "text": "going to do this in haskell it might look like that and what is surprising is that this code",
    "start": "511280",
    "end": "518240"
  },
  {
    "text": "even if you don't know haskell i suppose not a lot of you know haskell or are",
    "start": "518240",
    "end": "524880"
  },
  {
    "text": "there some hass colors here even if you don't know haskell the code",
    "start": "524880",
    "end": "531920"
  },
  {
    "text": "is not so hard to understand so we have this red moisture function it",
    "start": "531920",
    "end": "538000"
  },
  {
    "text": "uh returns uh some kind it's not moisture it returns maybe moisture whatever that means but",
    "start": "538000",
    "end": "544720"
  },
  {
    "text": "uh we get this moisture with this kind of arrow to the left into a variable called",
    "start": "544720",
    "end": "551680"
  },
  {
    "text": "moisture we do the same with the temperature then we call this calculate the amount and there we get",
    "start": "551680",
    "end": "556959"
  },
  {
    "text": "out the amount so it looks it's not so hard to read but then of course the c",
    "start": "556959",
    "end": "562000"
  },
  {
    "text": "plus plus code was also not hard to read because there is apparently there is no error handling",
    "start": "562000",
    "end": "567120"
  },
  {
    "text": "there so i mean it would get much more complicated if you also had the error handling here",
    "start": "567120",
    "end": "573440"
  },
  {
    "start": "573000",
    "end": "656000"
  },
  {
    "text": "but uh the error handling is already there that's the surprising thing so",
    "start": "573440",
    "end": "580320"
  },
  {
    "text": "but who saw some error handling i didn't see any hero handling so the error handling it's it's there",
    "start": "580320",
    "end": "587279"
  },
  {
    "text": "and it's explicit because as if as a has gallery read the signature of this watering function",
    "start": "587279",
    "end": "594959"
  },
  {
    "text": "you see that the water plant function it doesn't return a volume it returns a maybe volume which means",
    "start": "594959",
    "end": "601920"
  },
  {
    "text": "you maybe will get the volume back but maybe you don't and then this is kind of the first thing",
    "start": "601920",
    "end": "609760"
  },
  {
    "text": "that the maybe says something could go wrong and now the second part is there is this",
    "start": "609760",
    "end": "615680"
  },
  {
    "text": "two which for us a c plus plus programming it may be look a bit other stress to do",
    "start": "615680",
    "end": "621680"
  },
  {
    "text": "there know that do is something completely different in haskell and in this context it it kind is an",
    "start": "621680",
    "end": "628399"
  },
  {
    "text": "indicator to tell us but i'll take care of it so it's been taken care of that we",
    "start": "628399",
    "end": "635519"
  },
  {
    "text": "handle it when something goes wrong and then there are a few small details",
    "start": "635519",
    "end": "642880"
  },
  {
    "text": "in uh haskell so like the type system lazy evaluation and whatever",
    "start": "642880",
    "end": "648720"
  },
  {
    "text": "it's just uh that makes kind of the this code that simple as it is",
    "start": "648720",
    "end": "655920"
  },
  {
    "start": "656000",
    "end": "1052000"
  },
  {
    "text": "so let's have a look at the maybe and for that we're going to",
    "start": "656160",
    "end": "664720"
  },
  {
    "text": "see some code so let's assume we make up just a very very simple",
    "start": "664800",
    "end": "670959"
  },
  {
    "text": "example so i have i want to have a function",
    "start": "670959",
    "end": "676959"
  },
  {
    "text": "to cut something in half say i have a few coins",
    "start": "676959",
    "end": "684000"
  },
  {
    "text": "of uh euros or a kroner or whatever and i want to cut",
    "start": "684000",
    "end": "690399"
  },
  {
    "text": "them in half so i say i have this half function which takes an integer",
    "start": "690399",
    "end": "696079"
  },
  {
    "text": "and it returns an integer so to implement that it should be quite",
    "start": "696079",
    "end": "703279"
  },
  {
    "text": "easy i just say okay let's use integer division and cut it in half",
    "start": "703279",
    "end": "713040"
  },
  {
    "text": "so let's try it out what is half of four half of four is two half of eight is",
    "start": "715200",
    "end": "722160"
  },
  {
    "text": "four and half of seven is three because we cannot divide one coin so it's it's hard to cut",
    "start": "722160",
    "end": "729600"
  },
  {
    "text": "the coin in two halves except you have the tools for that but maybe in some card it's even illegal",
    "start": "729600",
    "end": "735839"
  },
  {
    "text": "to cut coins um at least i think in switzerland it is um yeah so we get back three",
    "start": "735839",
    "end": "744079"
  },
  {
    "text": "and like one is lost um now what we also can do is kind we",
    "start": "744079",
    "end": "752399"
  },
  {
    "text": "could try to what happens if i if i try to",
    "start": "752399",
    "end": "760399"
  },
  {
    "text": "look strange so therefore okay we could also kind of chain we could say okay take",
    "start": "761519",
    "end": "768160"
  },
  {
    "text": "half of 16 and then i want to cut the the result of that again so i say",
    "start": "768160",
    "end": "773680"
  },
  {
    "text": "half of half of 16 which is four and i can",
    "start": "773680",
    "end": "778720"
  },
  {
    "text": "do that again and then take half of half of half of 16 is two",
    "start": "778800",
    "end": "785279"
  },
  {
    "text": "and it also kind of does something with 18 which would be nine and a half of nine would be four and the half of four",
    "start": "785519",
    "end": "791920"
  },
  {
    "text": "would be two",
    "start": "791920",
    "end": "794560"
  },
  {
    "text": "so that's what we have seen in the live coding but now",
    "start": "797760",
    "end": "804079"
  },
  {
    "text": "we said okay it doesn't really make sense or we have this problem that if we have uh all the number of",
    "start": "804079",
    "end": "811760"
  },
  {
    "text": "coins and we want to divide them into two halves it kind of doesn't fit",
    "start": "811760",
    "end": "817120"
  },
  {
    "text": "so we're going to say we want to say we're only going to have even numbers of coins so if you have an",
    "start": "817120",
    "end": "823680"
  },
  {
    "text": "odd number we will say now this is an error you can't a odd number so we're introducing this",
    "start": "823680",
    "end": "830560"
  },
  {
    "text": "maybe so what is maybe in haskell maybe it's something like just a it's",
    "start": "830560",
    "end": "837120"
  },
  {
    "text": "a data type you can imagine it something like a struct or a class or",
    "start": "837120",
    "end": "845519"
  },
  {
    "text": "something similar and it has some special kind of it's like a",
    "start": "845519",
    "end": "852079"
  },
  {
    "text": "template type there is we have this data maybe a so a is like a template type it",
    "start": "852079",
    "end": "858240"
  },
  {
    "text": "would be maybe like template type name a struct maybe and now what can this maybe",
    "start": "858240",
    "end": "864959"
  },
  {
    "text": "be it can be be either nothing or it can be a just a so that's very",
    "start": "864959",
    "end": "871120"
  },
  {
    "text": "interesting so if you have an instance of a maybe it can be a nothing and it doesn't have",
    "start": "871120",
    "end": "878959"
  },
  {
    "text": "this type it had or it can be just a which is just the value so if you have a maybe over",
    "start": "878959",
    "end": "885120"
  },
  {
    "text": "in then it can be nothing or it can be just an in saying it's just holding an integer",
    "start": "885120",
    "end": "891120"
  },
  {
    "text": "value so how does that look so",
    "start": "891120",
    "end": "897120"
  },
  {
    "text": "we're going to change our implementation and say okay the half function takes an",
    "start": "897120",
    "end": "904320"
  },
  {
    "text": "integer and it will return a maybe integer",
    "start": "904320",
    "end": "909519"
  },
  {
    "text": "and then we also of course have to change the implementation",
    "start": "909519",
    "end": "916720"
  },
  {
    "text": "so it did not change that much yet i just said okay i have kind of uh",
    "start": "923519",
    "end": "931199"
  },
  {
    "text": "uh i added something saying okay half n is in the case of if n is even then i",
    "start": "931199",
    "end": "938320"
  },
  {
    "text": "still return kind the integer division by two and pack it in",
    "start": "938320",
    "end": "943519"
  },
  {
    "text": "just and then if it's if it's old saying otherwise",
    "start": "943519",
    "end": "952560"
  },
  {
    "text": "i will return nothing",
    "start": "953360",
    "end": "957440"
  },
  {
    "text": "[Music] and you should correctly okay",
    "start": "962890",
    "end": "970240"
  },
  {
    "text": "so what's happening now so if i say half of four i don't get just the two back i get back",
    "start": "970240",
    "end": "977440"
  },
  {
    "text": "just two so this kind of this result two is packed in a just two what",
    "start": "977440",
    "end": "984079"
  },
  {
    "text": "happens if and i say half of seven so i get nothing back",
    "start": "984079",
    "end": "991279"
  },
  {
    "text": "and now what we did before say okay i want to take",
    "start": "993360",
    "end": "1000160"
  },
  {
    "text": "you know that that doesn't work we take half of half of eight saying okay i want half of eight which",
    "start": "1000160",
    "end": "1006000"
  },
  {
    "text": "will be four and then half of four will be but that doesn't work because",
    "start": "1006000",
    "end": "1013199"
  },
  {
    "text": "our half function doesn't return in teacher it returns a maybe integer but the half function takes an integer",
    "start": "1013199",
    "end": "1020720"
  },
  {
    "text": "so we cannot change these calls anymore so we would have to kind of",
    "start": "1020720",
    "end": "1027600"
  },
  {
    "text": "maybe take as input maybe in teacher or before we call it the second time",
    "start": "1027600",
    "end": "1034640"
  },
  {
    "text": "we have to look it up and see if it's nothing or is there a just value in there and then we have",
    "start": "1034640",
    "end": "1041760"
  },
  {
    "text": "to unwrap the value and pass it in there and",
    "start": "1041760",
    "end": "1047438"
  },
  {
    "text": "let me go back to the slides that's what we have seen",
    "start": "1048480",
    "end": "1054000"
  },
  {
    "start": "1052000",
    "end": "1284000"
  },
  {
    "text": "so because this is such a common problem or this is such common in haskell",
    "start": "1054000",
    "end": "1061039"
  },
  {
    "text": "not really a problem but occurring a lot in haskell they have this thing called bind",
    "start": "1061039",
    "end": "1066720"
  },
  {
    "text": "operator it looks like this right shift equal operator it's called operator bind",
    "start": "1066720",
    "end": "1072160"
  },
  {
    "text": "or bind function or bind operator and what is that so this operator",
    "start": "1072160",
    "end": "1079200"
  },
  {
    "text": "is defined as a function that takes a m a",
    "start": "1079200",
    "end": "1085440"
  },
  {
    "text": "m a means it's like it's like a template template type it's like a template type m and the",
    "start": "1085440",
    "end": "1092799"
  },
  {
    "text": "template type m itself is another template type so it's a template template so meaning for example it could be the m",
    "start": "1092799",
    "end": "1101039"
  },
  {
    "text": "could be a maybe and the a could be an integer it could be a maybe integer",
    "start": "1101039",
    "end": "1106559"
  },
  {
    "text": "and then as a second argument it takes a function a function that takes a and creates a mb",
    "start": "1106559",
    "end": "1113840"
  },
  {
    "text": "out of that a so meaning for example it could take an integer and then",
    "start": "1113840",
    "end": "1119760"
  },
  {
    "text": "returner may be float from that integer or another maybe int and then the final",
    "start": "1119760",
    "end": "1127360"
  },
  {
    "text": "result will be a mb so as we have seen before we had this problem we have the",
    "start": "1127360",
    "end": "1133120"
  },
  {
    "text": "function taking the integer and returning a maybe in teacher but the result we wanted to put in that",
    "start": "1133120",
    "end": "1139039"
  },
  {
    "text": "function was a maybe in teacher or the integer and now this operator looks like it's",
    "start": "1139039",
    "end": "1145200"
  },
  {
    "text": "really going to help us because we can now put there and maybe in teacher we have this function",
    "start": "1145200",
    "end": "1152240"
  },
  {
    "text": "from a in teacher to a maybe in teacher and getting a maybe teacher back um so how is this",
    "start": "1152240",
    "end": "1160160"
  },
  {
    "text": "operator implemented for the type maybe it's really simple implementation",
    "start": "1160160",
    "end": "1167600"
  },
  {
    "text": "so all this implementation says is kind i if i have a just x and",
    "start": "1167600",
    "end": "1174559"
  },
  {
    "text": "i give that just x to the bind operator and i have this function k which is the",
    "start": "1174559",
    "end": "1181200"
  },
  {
    "text": "function from a to m b then i just apply the x which is in that",
    "start": "1181200",
    "end": "1186400"
  },
  {
    "text": "just x to the function k so i call function k with x as a parameter and",
    "start": "1186400",
    "end": "1193520"
  },
  {
    "text": "if the parameter for the bind operator the first one is a nothing",
    "start": "1193520",
    "end": "1198720"
  },
  {
    "text": "then i don't care what the function is i just ignore it and return nothing again so it's a",
    "start": "1198720",
    "end": "1205840"
  },
  {
    "text": "really simple implementation",
    "start": "1205840",
    "end": "1209360"
  },
  {
    "text": "i don't need to so will that help us so i said half of 8 is",
    "start": "1212320",
    "end": "1218640"
  },
  {
    "text": "just 4. now if i say half of 8 and i use the bind operator and call",
    "start": "1218640",
    "end": "1225840"
  },
  {
    "text": "half again i get back just 2 because that bind operator looked at the result of",
    "start": "1225840",
    "end": "1233520"
  },
  {
    "text": "half of eight so it's a chest and then just packed out the four and gave it to the next half",
    "start": "1233520",
    "end": "1240720"
  },
  {
    "text": "function so what happens if i say half of",
    "start": "1240720",
    "end": "1246799"
  },
  {
    "text": "18 that is just nine so i'm going to stop that again in",
    "start": "1246799",
    "end": "1252080"
  },
  {
    "text": "another half call and then i get back nothing because we know that half of nine is nothing",
    "start": "1252080",
    "end": "1259840"
  },
  {
    "text": "and what happens if i do it again will i get some runtime error no of",
    "start": "1259840",
    "end": "1265840"
  },
  {
    "text": "course not that just get another nothing because the second bind operator got us an input and nothing and said",
    "start": "1265840",
    "end": "1272559"
  },
  {
    "text": "okay if it's nothing i don't care what the half function does i will just return nothing again",
    "start": "1272559",
    "end": "1280400"
  },
  {
    "start": "1284000",
    "end": "1571000"
  },
  {
    "text": "so that's what we've seen there and now because this uh",
    "start": "1284799",
    "end": "1293280"
  },
  {
    "text": "bind operator is also something very common there is something called the do",
    "start": "1293280",
    "end": "1298799"
  },
  {
    "text": "notation what is the do notation we've seen the two before i said to do is kind of indicate",
    "start": "1298799",
    "end": "1304640"
  },
  {
    "text": "that there will be some error handling happening if i now rewrite the example",
    "start": "1304640",
    "end": "1311760"
  },
  {
    "text": "from before with my watering plant watering system with the bind operator",
    "start": "1311760",
    "end": "1321440"
  },
  {
    "text": "i get this construct that i say okay",
    "start": "1321440",
    "end": "1326240"
  },
  {
    "text": "i read out my moisture sensor and then this result of readout the",
    "start": "1326720",
    "end": "1332240"
  },
  {
    "text": "moisture sensor is maybe moisture so maybe there's a moisture maybe there is nothing there or maybe i have the",
    "start": "1332240",
    "end": "1338320"
  },
  {
    "text": "moisture value then i use the bind operator and the second argument to the bind operator is",
    "start": "1338320",
    "end": "1344559"
  },
  {
    "text": "a function so here it is a lambda so this backslash is introducing a lambda and the lambda",
    "start": "1344559",
    "end": "1352480"
  },
  {
    "text": "takes up the rest of the code here all these remaining three lines and the",
    "start": "1352480",
    "end": "1358320"
  },
  {
    "text": "lambda has one argument which i call moisture and then after this",
    "start": "1358320",
    "end": "1363679"
  },
  {
    "text": "arrow operator is the implementation of the lambda so the function that we're",
    "start": "1363679",
    "end": "1369679"
  },
  {
    "text": "giving to this bind operate so what does this function do it will read out the temperature sensor",
    "start": "1369679",
    "end": "1376080"
  },
  {
    "text": "then the result of the temperature sensor is maybe a temperature we're again passing that to the bind",
    "start": "1376080",
    "end": "1383440"
  },
  {
    "text": "operator together with another function and this other function is again a lambda",
    "start": "1383440",
    "end": "1389360"
  },
  {
    "text": "which takes the attempt a variable called temperature that will be our temperature value and",
    "start": "1389360",
    "end": "1396559"
  },
  {
    "text": "then it will call calculate amount which will give",
    "start": "1396559",
    "end": "1401760"
  },
  {
    "text": "the maybe amount or maybe volume as a result there may be some amount of water in",
    "start": "1401760",
    "end": "1407039"
  },
  {
    "text": "there or maybe there's nothing and this result again we're going to give to a to the bind",
    "start": "1407039",
    "end": "1412559"
  },
  {
    "text": "operator together with a lambda which then actually does the pump",
    "start": "1412559",
    "end": "1417840"
  },
  {
    "text": "action and then there is kind of a special it looks like the bind operator",
    "start": "1417840",
    "end": "1423360"
  },
  {
    "text": "but missing the equal sign it's basically the same thing it's just because the pump action has no return",
    "start": "1423360",
    "end": "1429919"
  },
  {
    "text": "value we're seeing it in the signature instead of maybe a type that is maybe this",
    "start": "1429919",
    "end": "1436080"
  },
  {
    "text": "bracket or square brackets or parenthesis and this just",
    "start": "1436080",
    "end": "1442559"
  },
  {
    "text": "means a void type so it has a non-type so therefore there is no equal",
    "start": "1442559",
    "end": "1449440"
  },
  {
    "text": "sign because there is no type return but it's basically the same thing as the bind operator and now because this is",
    "start": "1449440",
    "end": "1457600"
  },
  {
    "text": "such a common pattern there is this two notation so now we have this in the bottom part",
    "start": "1457600",
    "end": "1465279"
  },
  {
    "text": "we have this water plant is do and then instead of kind of reed moisture and",
    "start": "1465279",
    "end": "1472640"
  },
  {
    "text": "then the bind operator we have a reed moisture with this left arrow to variable called moisture",
    "start": "1472640",
    "end": "1481520"
  },
  {
    "text": "and this two notation it's just kind of syntactic sugar in compiling",
    "start": "1481520",
    "end": "1488080"
  },
  {
    "text": "haskell this is just something that kind in front of compiling process",
    "start": "1488080",
    "end": "1493200"
  },
  {
    "text": "this will just be converted but it's up there so with this nested lambdas",
    "start": "1493200",
    "end": "1501039"
  },
  {
    "text": "so it's kind of just helping us to unwrap this this nested lambda to something",
    "start": "1501039",
    "end": "1506799"
  },
  {
    "text": "that's more readable and if we would kind of try out making",
    "start": "1506799",
    "end": "1514400"
  },
  {
    "text": "up a main which says okay i'm really going to call the water plant function",
    "start": "1514400",
    "end": "1520159"
  },
  {
    "text": "and if it went okay i will print out the amount of water that i gave to the plant if not i",
    "start": "1520159",
    "end": "1526720"
  },
  {
    "text": "will print out some error message it could look like that or like this",
    "start": "1526720",
    "end": "1533440"
  },
  {
    "text": "so also the bind operator is something that it's so crucial to haskell it's not only the maybe that implements",
    "start": "1540240",
    "end": "1547840"
  },
  {
    "text": "this operator there are a lot of other and also x kind of surprising",
    "start": "1547840",
    "end": "1554880"
  },
  {
    "text": "data types like for example these square brackets mean a list the list also implements the bind",
    "start": "1554880",
    "end": "1562000"
  },
  {
    "text": "operator you can do very interesting stuff with that or it can help you to to rethink what",
    "start": "1562000",
    "end": "1568000"
  },
  {
    "text": "the list is if you're applying that some other type besides the maybe",
    "start": "1568000",
    "end": "1576240"
  },
  {
    "text": "which is also very interesting is either so what is the either either",
    "start": "1576240",
    "end": "1583440"
  },
  {
    "text": "is a data type which is also kind like a template type that has two template or",
    "start": "1583440",
    "end": "1590000"
  },
  {
    "text": "generic types the a and the b and the either can have one of two values it can be either a",
    "start": "1590000",
    "end": "1597279"
  },
  {
    "text": "left a or it could be a right b so if i have either of integer float it",
    "start": "1597279",
    "end": "1604400"
  },
  {
    "text": "could be either a left integer or a right float and then there is a convention which",
    "start": "1604400",
    "end": "1611840"
  },
  {
    "text": "kind of historically grew or i don't really know how it happened but it's uh",
    "start": "1611840",
    "end": "1618320"
  },
  {
    "text": "it said that right because right is right is a right value all right is the value",
    "start": "1618320",
    "end": "1624559"
  },
  {
    "text": "and if it is a left it is an error so this either type is often used to",
    "start": "1624559",
    "end": "1630159"
  },
  {
    "text": "not say it is either a or b or to say either it is a value or it was an error",
    "start": "1630159",
    "end": "1635440"
  },
  {
    "text": "and then if it's if it's the error it's in the left and also this either also implements",
    "start": "1635440",
    "end": "1643600"
  },
  {
    "text": "this bind operator so how does that look so it's also the implementation of the bind operator is",
    "start": "1643600",
    "end": "1650480"
  },
  {
    "text": "is quite simple it just says okay if there is a left l",
    "start": "1650480",
    "end": "1655760"
  },
  {
    "text": "then i don't care what the function is that you're passing me i will just return left l again",
    "start": "1655760",
    "end": "1662960"
  },
  {
    "text": "but if there is a right r i take this function called k and then i just call function k",
    "start": "1662960",
    "end": "1669760"
  },
  {
    "text": "with the value of the of what's in the r and the right at the value r also very simple",
    "start": "1669760",
    "end": "1677760"
  },
  {
    "text": "just saying error stays an error if i have a value i'm going to do something with it",
    "start": "1677760",
    "end": "1683760"
  },
  {
    "text": "so if i rewrite my water plant function",
    "start": "1683760",
    "end": "1688799"
  },
  {
    "text": "to use either instead of maybe that for example i can give back a more sophisticated error what was",
    "start": "1688799",
    "end": "1694799"
  },
  {
    "text": "really happening and also all these functions i use in my",
    "start": "1694799",
    "end": "1700000"
  },
  {
    "text": "water plant function will return either error and then whatever value",
    "start": "1700000",
    "end": "1708320"
  },
  {
    "text": "then my function looks like that so there are just a few changes so the",
    "start": "1708320",
    "end": "1714240"
  },
  {
    "text": "signatures have changed from maybe moisture or from maybe null type in the",
    "start": "1714240",
    "end": "1720000"
  },
  {
    "text": "pump to to either error null type or the read moisture to it",
    "start": "1720000",
    "end": "1725200"
  },
  {
    "text": "to either error moisture and also the water plant is just instead of maybe volume it's changed to either",
    "start": "1725200",
    "end": "1732080"
  },
  {
    "text": "error or volume and the code itself didn't change at all because",
    "start": "1732080",
    "end": "1737760"
  },
  {
    "text": "it's still using the bind operator and still using the do notation which is just",
    "start": "1737760",
    "end": "1742960"
  },
  {
    "text": "syntactic sugar for nesting the bind operators so i didn't have to change anything in",
    "start": "1742960",
    "end": "1748720"
  },
  {
    "text": "the code itself so it's very similar and if i was",
    "start": "1748720",
    "end": "1753840"
  },
  {
    "text": "also going to create a little main function calling the water plant function and",
    "start": "1753840",
    "end": "1759360"
  },
  {
    "text": "then printing out the results of that if it's going okay i will get back this",
    "start": "1759360",
    "end": "1765440"
  },
  {
    "text": "volume if i have an error for example in the temperature sensor readout i maybe get",
    "start": "1765440",
    "end": "1770640"
  },
  {
    "text": "back the error message that was really coming from the temperature sensor or the the function calling trying to",
    "start": "1770640",
    "end": "1777200"
  },
  {
    "text": "read out the temperature sensor now let's take a little detour and",
    "start": "1777200",
    "end": "1784640"
  },
  {
    "start": "1780000",
    "end": "2156000"
  },
  {
    "text": "dive a little bit into rust in rust there is a type called option",
    "start": "1784640",
    "end": "1793120"
  },
  {
    "text": "and it's i find it very interesting it's it's uh not like a class or something it's a",
    "start": "1793120",
    "end": "1799120"
  },
  {
    "text": "enumeration it's a enum type option and it seems to be that enums in",
    "start": "1799120",
    "end": "1804480"
  },
  {
    "text": "rust they can be generic like templates so because there is this t",
    "start": "1804480",
    "end": "1811039"
  },
  {
    "text": "which is a generic type t so the enum is not is",
    "start": "1811039",
    "end": "1816960"
  },
  {
    "text": "very different from c plus plus you know um it's more like a standard variant we",
    "start": "1816960",
    "end": "1822640"
  },
  {
    "text": "will see that again after and this enum type can be a num or some",
    "start": "1822640",
    "end": "1830960"
  },
  {
    "text": "t meaning kind it the noun has no values just the e number it's the enum value num or if",
    "start": "1830960",
    "end": "1838799"
  },
  {
    "text": "it's a sum then it can hold the value of type t or it holds the value of type t",
    "start": "1838799",
    "end": "1844559"
  },
  {
    "text": "and this is very similar to the maybe that could be a nothing or just some value and it's just the",
    "start": "1844559",
    "end": "1851440"
  },
  {
    "text": "justice called sum and the nothing is called norm but it's quite same type and then there",
    "start": "1851440",
    "end": "1857760"
  },
  {
    "text": "is another interesting type called result which has two generic",
    "start": "1857760",
    "end": "1863679"
  },
  {
    "text": "types a t and the e and this result type can be either",
    "start": "1863679",
    "end": "1868720"
  },
  {
    "text": "okay holding a value of type t or it can be an error holding the error e of type e",
    "start": "1868720",
    "end": "1879519"
  },
  {
    "text": "now if i would rewrite or try to implement my watering plant function",
    "start": "1879519",
    "end": "1887039"
  },
  {
    "text": "in rust it might look something like that and so the water plant function it now",
    "start": "1887039",
    "end": "1893440"
  },
  {
    "text": "returns a result which could be the volume what we really gave to the plant or it",
    "start": "1893440",
    "end": "1901360"
  },
  {
    "text": "could be a string representing an error and if i'm going to call that",
    "start": "1901360",
    "end": "1910158"
  },
  {
    "text": "i will first try to read out the moisture sensor and then i try to assign this result",
    "start": "1910720",
    "end": "1917120"
  },
  {
    "text": "to a variable called moisture reflect moistures and then there is this match operator",
    "start": "1917120",
    "end": "1923840"
  },
  {
    "text": "so what does match do so match will just take the result of this read moisture",
    "start": "1923840",
    "end": "1930720"
  },
  {
    "text": "function call and then look up it's like a switch on this enumeration and then see was it",
    "start": "1930720",
    "end": "1937519"
  },
  {
    "text": "the okay or was it an error if it was an okay holding value m",
    "start": "1937519",
    "end": "1943200"
  },
  {
    "text": "then this match operation will return to the assignment operation the value",
    "start": "1943200",
    "end": "1951440"
  },
  {
    "text": "m so i'm kind of unwrapping the m in the okay and just returning that",
    "start": "1951440",
    "end": "1957760"
  },
  {
    "text": "for assignment to the moisture but what happens if there was an error in the result of read moisture",
    "start": "1957760",
    "end": "1965039"
  },
  {
    "text": "so if there is an error e there i literally call return error e to just return",
    "start": "1965039",
    "end": "1972480"
  },
  {
    "text": "from the function so this is not assigned to moisture but this is this return will return from",
    "start": "1972480",
    "end": "1978720"
  },
  {
    "text": "function water plant so it's an early abort to return this error",
    "start": "1978720",
    "end": "1984399"
  },
  {
    "text": "and then i do the same for reading out the temperature caulking the amount and then um in the end",
    "start": "1984399",
    "end": "1992159"
  },
  {
    "text": "really activate the pump to pump the water to the plant so there is a little bit of rust",
    "start": "1992159",
    "end": "1998240"
  },
  {
    "text": "specifics that the the result of the pump i don't assign it to anything and",
    "start": "1998240",
    "end": "2004559"
  },
  {
    "text": "there is a missing semicolon which is not the missing semicolon that's just a rust syntax to say the last statement in",
    "start": "2004559",
    "end": "2012720"
  },
  {
    "text": "a function that doesn't that is not closed by a semicolon is the return value",
    "start": "2012720",
    "end": "2018399"
  },
  {
    "text": "so the function returns the the the result of match pump which could",
    "start": "2018399",
    "end": "2025120"
  },
  {
    "text": "then be either this uh okay and then i return the okay",
    "start": "2025120",
    "end": "2030159"
  },
  {
    "text": "amount so the amount we pumped or if it was an error we just return that error",
    "start": "2030159",
    "end": "2036880"
  },
  {
    "text": "now there is a lot of repetition there so we see that like this this match",
    "start": "2036880",
    "end": "2043120"
  },
  {
    "text": "operator what's written in the match operator what what really varies is kind of on",
    "start": "2043120",
    "end": "2049760"
  },
  {
    "text": "what value do we match so it's either it's read moisture or lead temperature or calculate amount or pump",
    "start": "2049760",
    "end": "2056800"
  },
  {
    "text": "but but what's then in there is always the same thing we could just replace these m t's or v's with",
    "start": "2056800",
    "end": "2063839"
  },
  {
    "text": "x and then they all would be the same it would just be okay x return x error e then return error e",
    "start": "2063839",
    "end": "2072720"
  },
  {
    "text": "and because that's a lot of repetition and very tedious they introduced something in rust called",
    "start": "2072720",
    "end": "2081040"
  },
  {
    "text": "the um i don't know how it's really called but it's a question mark operator i",
    "start": "2081040",
    "end": "2086560"
  },
  {
    "text": "don't know if that special name and it's a little bit easy to oversee",
    "start": "2086560",
    "end": "2092800"
  },
  {
    "text": "but if you look at it you see that the reed moisture in the end has a question mark read",
    "start": "2092800",
    "end": "2099839"
  },
  {
    "text": "moisture did we really read out moisture okay maybe so and what this question mark operator",
    "start": "2099839",
    "end": "2107440"
  },
  {
    "text": "does is exactly what we've seen before it's exactly just synthetic sugar you could say for for",
    "start": "2107440",
    "end": "2113040"
  },
  {
    "text": "this here so if the read moistures returns an error",
    "start": "2113040",
    "end": "2118160"
  },
  {
    "text": "then it will just return an error from the whole function so from the water plant function",
    "start": "2118160",
    "end": "2123839"
  },
  {
    "text": "and if the read moisture returned really a result it is assigned to this moisture variable",
    "start": "2123839",
    "end": "2131680"
  },
  {
    "text": "and if we would try to make up a little main function and try to really run it we see there is",
    "start": "2131680",
    "end": "2137599"
  },
  {
    "text": "another match on the whole water plant function there and printing out either error or saying okay we've given that",
    "start": "2137599",
    "end": "2144240"
  },
  {
    "text": "much malt to the plant which will then if it's successful given",
    "start": "2144240",
    "end": "2149280"
  },
  {
    "text": "some vault to the plant or we maybe see some specific temperature sense or error",
    "start": "2149280",
    "end": "2156640"
  },
  {
    "start": "2156000",
    "end": "2318000"
  },
  {
    "text": "so but now back to c plus plus so in c plus plus 17",
    "start": "2156800",
    "end": "2164240"
  },
  {
    "text": "we got standard optional um maybe standard optional is",
    "start": "2164240",
    "end": "2171440"
  },
  {
    "text": "maybe let's have a look at the code so standard optional is like the maybe",
    "start": "2171440",
    "end": "2178320"
  },
  {
    "text": "and if we reroute our c plus plus code with standard optional i say okay now the reading out the",
    "start": "2178320",
    "end": "2184800"
  },
  {
    "text": "moisture sensor returns an optional moisture saying",
    "start": "2184800",
    "end": "2189839"
  },
  {
    "text": "it maybe returns moisture and maybe there is no result in there in c plus plus called",
    "start": "2189839",
    "end": "2196000"
  },
  {
    "text": "standard null opt and then i also have the pump function where i just for kind of",
    "start": "2196000",
    "end": "2202720"
  },
  {
    "text": "consistency i also said it was going to return optional but it doesn't really have a",
    "start": "2202720",
    "end": "2208400"
  },
  {
    "text": "return type it it was more like it returns nothing pump so i have this",
    "start": "2208400",
    "end": "2213920"
  },
  {
    "text": "standard monostate which was actually introduced for another reason i think but i can",
    "start": "2213920",
    "end": "2221200"
  },
  {
    "text": "misuse it or borrow it as the null type and then",
    "start": "2221200",
    "end": "2228000"
  },
  {
    "text": "the watering system water function it will return an optional volume so maybe it will return",
    "start": "2228000",
    "end": "2234400"
  },
  {
    "text": "the volume of what was of the water that was given to the plant or maybe it it won't return nothing if there is an",
    "start": "2234400",
    "end": "2241599"
  },
  {
    "text": "error and",
    "start": "2241599",
    "end": "2245599"
  },
  {
    "text": "as you can see now i got when i compare it to kind of",
    "start": "2247280",
    "end": "2254480"
  },
  {
    "text": "of one of the first examples with the early returns it looks like the same as",
    "start": "2254480",
    "end": "2259520"
  },
  {
    "text": "the early terms where i had instead of optional i returned a bool and then the value that",
    "start": "2259520",
    "end": "2265280"
  },
  {
    "text": "i wanted to return was output parameter it's like the same thing except",
    "start": "2265280",
    "end": "2270400"
  },
  {
    "text": "i could say the standard option is nothing more than kind of a boolean flag to say it holds a value or not and the value",
    "start": "2270400",
    "end": "2278560"
  },
  {
    "text": "itself so semantically there is not a lot of difference there",
    "start": "2278560",
    "end": "2284720"
  },
  {
    "text": "but if i compare that to to the other one",
    "start": "2284720",
    "end": "2289839"
  },
  {
    "text": "it's kind of more descriptive it really says okay you will get the volume back if",
    "start": "2289839",
    "end": "2295920"
  },
  {
    "text": "everything went right but if not you won't get back anything there is",
    "start": "2295920",
    "end": "2301520"
  },
  {
    "text": "you don't have to to take care of if i did something to your output parameter",
    "start": "2301520",
    "end": "2306560"
  },
  {
    "text": "because there is no output parameter so it's more descriptive just to know",
    "start": "2306560",
    "end": "2311839"
  },
  {
    "text": "what this function actually does",
    "start": "2311839",
    "end": "2315839"
  },
  {
    "start": "2318000",
    "end": "2480000"
  },
  {
    "text": "and then there is the standard variant standard variant is a very interesting type",
    "start": "2319119",
    "end": "2324720"
  },
  {
    "text": "also added to c plus plus in c plus plus 17",
    "start": "2324720",
    "end": "2330799"
  },
  {
    "text": "it's basically a type safe union to say simplified and simplified matter",
    "start": "2330880",
    "end": "2338800"
  },
  {
    "text": "and we can use it to implement something like the haskell either or the rust result",
    "start": "2338800",
    "end": "2347040"
  },
  {
    "text": "now if i'm going to rewrite my code to use a standard variant where i say",
    "start": "2347040",
    "end": "2353440"
  },
  {
    "text": "okay i have fro the watering system water function i have a standard variant volume error",
    "start": "2353440",
    "end": "2361280"
  },
  {
    "text": "saying it will either return a volume or an error and then having all my functions that i",
    "start": "2361280",
    "end": "2367440"
  },
  {
    "text": "use in there to say okay for example reading out the moisture sensor returns a standard variant",
    "start": "2367440",
    "end": "2373119"
  },
  {
    "text": "of moisture error saying it either returns moisture or an error and the same for the pump",
    "start": "2373119",
    "end": "2380960"
  },
  {
    "text": "also change that to a standard variant then it's also the code kind of the",
    "start": "2380960",
    "end": "2388000"
  },
  {
    "text": "signatures of the function is very descriptive i i don't need a lot of explanation",
    "start": "2388000",
    "end": "2394720"
  },
  {
    "text": "to kind of find out what could the the voter function do or what do i get back",
    "start": "2394720",
    "end": "2400800"
  },
  {
    "text": "so because it says okay get the value or an error back and there is no kind of strange state if it returns a",
    "start": "2400800",
    "end": "2407520"
  },
  {
    "text": "bool or or some other kind of error code and you have output parameters they're not knowing what output",
    "start": "2407520",
    "end": "2413760"
  },
  {
    "text": "parameters got changed or got they changed or what can i do with them after that if i get false back so it's",
    "start": "2413760",
    "end": "2419599"
  },
  {
    "text": "quite descriptive but on the contrast the implementation to handle",
    "start": "2419599",
    "end": "2425520"
  },
  {
    "text": "in there it got very verbose so i'm reading out the moisture sensor i",
    "start": "2425520",
    "end": "2432480"
  },
  {
    "text": "get back the standard variant i have to kind of look up is there an error in there",
    "start": "2432480",
    "end": "2439599"
  },
  {
    "text": "which is for example here i use standard get if which returns a a pointer",
    "start": "2439599",
    "end": "2446400"
  },
  {
    "text": "which is a null pointer if it if it is not an error and it's not a null pointer",
    "start": "2446400",
    "end": "2453359"
  },
  {
    "text": "if it is an error and i can check on this null pointer and then if it is an error return this error so",
    "start": "2453359",
    "end": "2458720"
  },
  {
    "text": "the code is not that treatable anymore it's not difficult to read but",
    "start": "2458720",
    "end": "2464960"
  },
  {
    "text": "there is a lot of you have a lot of verbosity or you have to type a lot there's a lot of",
    "start": "2464960",
    "end": "2470400"
  },
  {
    "text": "boilerplate which kind of hides the the interesting parts and there are a",
    "start": "2470400",
    "end": "2475520"
  },
  {
    "text": "lot of details so that doesn't make it that nice so we",
    "start": "2475520",
    "end": "2480720"
  },
  {
    "start": "2480000",
    "end": "2860000"
  },
  {
    "text": "could try something else we could say okay standard variant has a nice friend called standard visit",
    "start": "2480720",
    "end": "2488160"
  },
  {
    "text": "they're often seen together and we could try to implement it with standard visit",
    "start": "2488160",
    "end": "2495040"
  },
  {
    "text": "now um to use standard visit um standard",
    "start": "2495040",
    "end": "2501200"
  },
  {
    "text": "visitors then is kind i can give it something like a standard variant",
    "start": "2501200",
    "end": "2506319"
  },
  {
    "text": "and it's implementing the visitor pattern that depending on what variant it is it will do something",
    "start": "2506319",
    "end": "2512240"
  },
  {
    "text": "else for each of this variant now to use this standard variant",
    "start": "2512240",
    "end": "2518560"
  },
  {
    "text": "nicely together with lambdas so i want to say i want to pass this standard visit the bunch of lambdas",
    "start": "2518560",
    "end": "2525040"
  },
  {
    "text": "one for each variant that is possible i need a few helpers and this is",
    "start": "2525040",
    "end": "2531839"
  },
  {
    "text": "something you maybe can take out of the this talk you should not you maybe don't",
    "start": "2531839",
    "end": "2537119"
  },
  {
    "text": "have to memorize it by heart i can't either but you should only know that",
    "start": "2537119",
    "end": "2542400"
  },
  {
    "text": "if you're going to cppreference.com and look up the documentation for standard",
    "start": "2542400",
    "end": "2547520"
  },
  {
    "text": "visit you find an example with this helper so what this helper does is kind it",
    "start": "2547520",
    "end": "2553599"
  },
  {
    "text": "helps to build up a type out of the lambdas to have",
    "start": "2553599",
    "end": "2559760"
  },
  {
    "text": "uh an operator to call to call the the type to make it callable",
    "start": "2559760",
    "end": "2567119"
  },
  {
    "text": "for each of the lambda and then helping also the the compiler or the template the",
    "start": "2567119",
    "end": "2574160"
  },
  {
    "text": "type deduction to really find out what lambda matches with what so i think in c plus plus 20",
    "start": "2574160",
    "end": "2583440"
  },
  {
    "text": "um it should get a little bit more simplified i don't know the second part is a user-guided type",
    "start": "2583440",
    "end": "2590480"
  },
  {
    "text": "deduction i think we don't need it anymore but i'm not sure about it but i heard something that it should get a",
    "start": "2590480",
    "end": "2595920"
  },
  {
    "text": "little bit easier um and then i added a second helper",
    "start": "2595920",
    "end": "2601760"
  },
  {
    "text": "which is just i just do some type aliases so i say okay",
    "start": "2601760",
    "end": "2609359"
  },
  {
    "text": "i have when i have a standard variant that has type t and then an error i just call",
    "start": "2609359",
    "end": "2616079"
  },
  {
    "text": "that result and then i even make an alias for a special result the result of the",
    "start": "2616079",
    "end": "2621760"
  },
  {
    "text": "volume which i call amount so amount is basically an alias for standard variant",
    "start": "2621760",
    "end": "2628640"
  },
  {
    "text": "volume error so in the next slide if you see somewhere an amount",
    "start": "2628640",
    "end": "2634640"
  },
  {
    "text": "just imagine there would be standard variant volume error standing there if you see this light maybe you know why",
    "start": "2634640",
    "end": "2642000"
  },
  {
    "text": "i made this alias because it wouldn't fit anymore on the slide because there is a",
    "start": "2642000",
    "end": "2647040"
  },
  {
    "text": "lot of amount there it's maybe not that visible because there's so much code",
    "start": "2647040",
    "end": "2652880"
  },
  {
    "text": "so the standard visits didn't really help in that case anymore to be fair with",
    "start": "2652880",
    "end": "2658960"
  },
  {
    "text": "standard variant and standard visit there are a lot of interesting design patterns to use them",
    "start": "2658960",
    "end": "2665760"
  },
  {
    "text": "but here it didn't really help but but they have their use cases that are really good",
    "start": "2665760",
    "end": "2671520"
  },
  {
    "text": "and maybe to explain a little bit what's going on here so we start with reading out the",
    "start": "2671520",
    "end": "2678720"
  },
  {
    "text": "moisture sensor and assign that to variable moisture and then we're going to call the standard",
    "start": "2678720",
    "end": "2684560"
  },
  {
    "text": "visit with this moisture value and",
    "start": "2684560",
    "end": "2689599"
  },
  {
    "text": "as the first parameter of standard visit passing it that kind of this lambdas",
    "start": "2689599",
    "end": "2696560"
  },
  {
    "text": "that i want to use a lambda for each variant i have on my result type so one for the",
    "start": "2696560",
    "end": "2703680"
  },
  {
    "text": "error one for the moisture type with this overloaded helper we saw before so now if the moisture holds",
    "start": "2703680",
    "end": "2712240"
  },
  {
    "text": "an error we're just going to return that same error e packed again in an amount and if",
    "start": "2712240",
    "end": "2720400"
  },
  {
    "text": "it was a moisture value then we're going to call the",
    "start": "2720400",
    "end": "2727280"
  },
  {
    "text": "we're doing our lambda we're going to call or read out the term at the temperature sensor and get",
    "start": "2727280",
    "end": "2732880"
  },
  {
    "text": "the temperature value back maybe and we're also calling standard visit on this temperature value",
    "start": "2732880",
    "end": "2739040"
  },
  {
    "text": "and then the same is happening again if it's an error we just return the error if it's really a temperature sensor we",
    "start": "2739040",
    "end": "2746720"
  },
  {
    "text": "have this other lambda which then is going to calculate the amount how much to pump and then it's",
    "start": "2746720",
    "end": "2752560"
  },
  {
    "text": "visiting this amount value again and if it's an error it's an error and if there is an amount in there",
    "start": "2752560",
    "end": "2758640"
  },
  {
    "text": "we're going to use the pump to pump the water to the plant and so on until we end up kind of having done",
    "start": "2758640",
    "end": "2766240"
  },
  {
    "text": "all our work and if you had an error with pumping then it's still an error and if it was",
    "start": "2766240",
    "end": "2771920"
  },
  {
    "text": "okay we will return the amount now as a small optimization what we",
    "start": "2771920",
    "end": "2777119"
  },
  {
    "text": "could do we could take out these local variables we had",
    "start": "2777119",
    "end": "2783040"
  },
  {
    "text": "and i could just directly call them in the standard visit calls now",
    "start": "2783040",
    "end": "2790800"
  },
  {
    "text": "what we gained is that we have all this interesting part",
    "start": "2790800",
    "end": "2798160"
  },
  {
    "text": "like really the the code that that does interesting parts like reading out the sensor",
    "start": "2798160",
    "end": "2803839"
  },
  {
    "text": "activating the pump and so on is in one place it's it's uh there is no boilerplate around",
    "start": "2803839",
    "end": "2811040"
  },
  {
    "text": "or between them but they're in the wrong way around and they're hard to spot because they're",
    "start": "2811040",
    "end": "2817200"
  },
  {
    "text": "still kind at the bottom of some tedious code so that didn't help that much if you would",
    "start": "2817200",
    "end": "2824319"
  },
  {
    "text": "write the small main function trying to exercise that it's not that",
    "start": "2824319",
    "end": "2830480"
  },
  {
    "text": "surprising here the standard twist looks a little bit nicer because we don't have that much of",
    "start": "2830480",
    "end": "2835920"
  },
  {
    "text": "nesting and this is maybe a better use case if",
    "start": "2835920",
    "end": "2841760"
  },
  {
    "text": "it's there is no nesting it's just kind we get something back where we have two options and we want to",
    "start": "2841760",
    "end": "2847839"
  },
  {
    "text": "to look what we do with option a or b and yeah it's the same thing either it worked out so it will print out some",
    "start": "2847839",
    "end": "2855359"
  },
  {
    "text": "i gave that amount of water or we see what kind of error that happened",
    "start": "2855359",
    "end": "2862240"
  },
  {
    "text": "now what we could try to do we could try to build up our own result type as we have seen in",
    "start": "2862400",
    "end": "2868960"
  },
  {
    "text": "rust now if i write something like that",
    "start": "2868960",
    "end": "2874000"
  },
  {
    "text": "i will just reuse the variant there is still as a basic type to store really the",
    "start": "2874000",
    "end": "2881040"
  },
  {
    "text": "value i still use the standard variant and in this class i just write a few",
    "start": "2881040",
    "end": "2887119"
  },
  {
    "text": "helpers like the function returning the error value or the okay value and i just forward it",
    "start": "2887119",
    "end": "2893359"
  },
  {
    "text": "to standard get so it's it's basically just",
    "start": "2893359",
    "end": "2899040"
  },
  {
    "text": "forwarding or using something in with another name changing a little bit the signature i",
    "start": "2899040",
    "end": "2905280"
  },
  {
    "text": "have for example a check function to check is it an error or is not",
    "start": "2905280",
    "end": "2910480"
  },
  {
    "text": "and the most complicated thing here is just this constructor which is just a",
    "start": "2910480",
    "end": "2916400"
  },
  {
    "text": "nice little helper that that that tells me",
    "start": "2916400",
    "end": "2921680"
  },
  {
    "text": "that i will just this is a constructor taking some type t",
    "start": "2921680",
    "end": "2927440"
  },
  {
    "text": "and it will just accept anything that i can convert to my special standard variant holding the error or",
    "start": "2927440",
    "end": "2934720"
  },
  {
    "text": "the value so this is just convenience functions to say so instead that i really have to make up",
    "start": "2934720",
    "end": "2940960"
  },
  {
    "text": "my result type i can just assign if i for example have a string",
    "start": "2940960",
    "end": "2946240"
  },
  {
    "text": "and the float i can just assign the float and then it will assign the float to the error type",
    "start": "2946240",
    "end": "2953599"
  },
  {
    "text": "or vice versa and then there i have two functions uh just to kind of the",
    "start": "2953599",
    "end": "2961119"
  },
  {
    "text": "maker functions to to create something i don't use it in the next",
    "start": "2961119",
    "end": "2966400"
  },
  {
    "text": "example it's just for um maybe we want to use that that we",
    "start": "2966400",
    "end": "2973520"
  },
  {
    "text": "have this make functions where you can say make okay or make error and then we'll get back a result",
    "start": "2973520",
    "end": "2980160"
  },
  {
    "text": "withholding that value that might be convenient but we don't have to use it here maybe use it then in the",
    "start": "2980160",
    "end": "2987440"
  },
  {
    "text": "implementation of reading out the moisture sensor like that so if i now rewrite my code",
    "start": "2987440",
    "end": "2994480"
  },
  {
    "text": "with my homegrown result type what's happening now is",
    "start": "2994480",
    "end": "3002640"
  },
  {
    "text": "it's still basically the same as when we use the plane variant but a lot of this variables",
    "start": "3002640",
    "end": "3010960"
  },
  {
    "text": "boilerplate code has gone away it's it's much more readable it's quite surprising that",
    "start": "3010960",
    "end": "3017599"
  },
  {
    "text": "that it's we still have to check with the if and and do this uh and return the error if",
    "start": "3017599",
    "end": "3024559"
  },
  {
    "text": "it is an error but but kind there is not so much",
    "start": "3024559",
    "end": "3029680"
  },
  {
    "text": "boilerplate going on to find that out so that helped a lot so this code i think",
    "start": "3029680",
    "end": "3034880"
  },
  {
    "text": "is is much more readable and the signatures are still kind of they're very descriptive",
    "start": "3034880",
    "end": "3043838"
  },
  {
    "text": "and if you're going to write the small main it's basically the same it's not that surprising now as an experiment",
    "start": "3044640",
    "end": "3053119"
  },
  {
    "text": "we could say okay by not try to implement the bind operator from haskell in c plus",
    "start": "3053119",
    "end": "3059359"
  },
  {
    "text": "plus now for my result type this is a very naive",
    "start": "3059359",
    "end": "3064400"
  },
  {
    "text": "implementation if you want to really kind of have it behave more like the",
    "start": "3064400",
    "end": "3070319"
  },
  {
    "text": "bind operator especially the template argument func which states the",
    "start": "3070319",
    "end": "3075839"
  },
  {
    "text": "function there is no restriction there on on that it should behave as it should",
    "start": "3075839",
    "end": "3082800"
  },
  {
    "text": "behave i could also pay something else it just has to be callable on the value um of the okay value",
    "start": "3082800",
    "end": "3091040"
  },
  {
    "text": "but uh just for simplicity let's stand it like that and if you look at this implementation",
    "start": "3091040",
    "end": "3097119"
  },
  {
    "text": "of this bind operator it is very simple it's just checking is it an error yes it is an error okay",
    "start": "3097119",
    "end": "3103760"
  },
  {
    "text": "return the same error if it is okay value i take this function",
    "start": "3103760",
    "end": "3109359"
  },
  {
    "text": "f and just call the function f on the okay value and return that that's how that's basically the same",
    "start": "3109359",
    "end": "3116319"
  },
  {
    "text": "thing as we've seen in haskell and it's quite simple now if i rewrite my c plus",
    "start": "3116319",
    "end": "3121839"
  },
  {
    "text": "plus code do that it looks like that that's very surprising kind of void",
    "start": "3121839",
    "end": "3128319"
  },
  {
    "text": "it it looks very short it is somehow readable maybe not for the c",
    "start": "3128319",
    "end": "3134240"
  },
  {
    "text": "plus plus uh programmer but for the haskell programmer so if maybe hascal's programmers are",
    "start": "3134240",
    "end": "3141280"
  },
  {
    "text": "forced to write c plus plus code it might end up that they start writing code like",
    "start": "3141280",
    "end": "3146400"
  },
  {
    "text": "that maybe not so good for the c plus plus program because it's i think it's if you see something like",
    "start": "3146400",
    "end": "3152400"
  },
  {
    "text": "that will be what the heck is that doing i don't understand",
    "start": "3152400",
    "end": "3157680"
  },
  {
    "text": "but because you have seen the haskell code before we kind of know what it is doing and",
    "start": "3157680",
    "end": "3164319"
  },
  {
    "text": "very interesting it really except for there are a lot more return statements",
    "start": "3164319",
    "end": "3170079"
  },
  {
    "text": "in c plus plus we have kind of do some nasty scene with capturing there",
    "start": "3170079",
    "end": "3175839"
  },
  {
    "text": "and there is a some autos but except from that the code looks very very similar or",
    "start": "3175839",
    "end": "3183359"
  },
  {
    "text": "almost equal and now if you remember from before we had in haskell this two",
    "start": "3183359",
    "end": "3189680"
  },
  {
    "text": "notation which makes everything even more readable so what if we could",
    "start": "3189680",
    "end": "3197839"
  },
  {
    "text": "kind of implement something like the do notation in c plus plus but to be honest i have no",
    "start": "3197839",
    "end": "3205359"
  },
  {
    "text": "clue how to do that so i'm sure it involves some sorcery and maybe some unicorns",
    "start": "3205359",
    "end": "3212160"
  },
  {
    "text": "but i have not yet an idea how to do that that it does i i know maybe it can be",
    "start": "3212160",
    "end": "3218480"
  },
  {
    "text": "done but i think then it will not be readable at all so the goal is to have a readable do",
    "start": "3218480",
    "end": "3224160"
  },
  {
    "text": "notation in c plus plus so what did i learn from that so either i'm",
    "start": "3224160",
    "end": "3232240"
  },
  {
    "start": "3225000",
    "end": "3465000"
  },
  {
    "text": "going to look for a new job as a haskell programmer that i don't have to mess",
    "start": "3232240",
    "end": "3237599"
  },
  {
    "text": "anymore with all these c plus plus stuff or maybe i could spend some more time",
    "start": "3237599",
    "end": "3243040"
  },
  {
    "text": "learning some more c plus plus template meta programming which will maybe help me with implementing the due notation",
    "start": "3243040",
    "end": "3251280"
  },
  {
    "text": "or something else so to wrap up so what i would like you to give",
    "start": "3251280",
    "end": "3259200"
  },
  {
    "text": "out from this talk is um that you start using value types it was",
    "start": "3259200",
    "end": "3265680"
  },
  {
    "text": "not so explicit in the talk but but it basically is all based on",
    "start": "3265680",
    "end": "3274720"
  },
  {
    "text": "using value tapes to types to make the code more expressive so instead of",
    "start": "3274720",
    "end": "3280480"
  },
  {
    "text": "having output parameters or instead of having a class which has three booleans and",
    "start": "3280480",
    "end": "3287680"
  },
  {
    "text": "depending on these booleans that the other members will have a valid",
    "start": "3287680",
    "end": "3292720"
  },
  {
    "text": "value in there or not that you start kind of of trying to make things more expressive",
    "start": "3292720",
    "end": "3300400"
  },
  {
    "text": "that they communicate more clearly its intent and the other thing is what surprised me",
    "start": "3300400",
    "end": "3306480"
  },
  {
    "text": "a little bit is that it i can't say it was not so hard",
    "start": "3306480",
    "end": "3311520"
  },
  {
    "text": "to write this result wrapper but but it is not really that hard to",
    "start": "3311520",
    "end": "3317440"
  },
  {
    "text": "write them if if you start to think about it and not try to to re-implement something like",
    "start": "3317440",
    "end": "3324400"
  },
  {
    "text": "standard variant because for example the the constructor of standard variant",
    "start": "3324400",
    "end": "3330160"
  },
  {
    "text": "is really sophisticated because of the restrictions or constraint it has on it",
    "start": "3330160",
    "end": "3335839"
  },
  {
    "text": "but you don't have to do it you can in my example could you say okay i want to have the same functionality but i'm",
    "start": "3335839",
    "end": "3341680"
  },
  {
    "text": "using it so i just have to write the template to say okay i borrow this constructor",
    "start": "3341680",
    "end": "3347440"
  },
  {
    "text": "if it is uh in my case if it was convertible so and i think with concepts maybe even",
    "start": "3347440",
    "end": "3354079"
  },
  {
    "text": "i had to use some sphine there with concept it should even be easier to say okay i will just borrow",
    "start": "3354079",
    "end": "3360240"
  },
  {
    "text": "the same concept and they don't have to re-implement it and so i want to say don't be afraid to write",
    "start": "3360240",
    "end": "3365920"
  },
  {
    "text": "such type if they reduce verbosity the case of kind of compare my result implementation to use",
    "start": "3365920",
    "end": "3374839"
  },
  {
    "text": "raw um standard variants the improvement was was quite big in my opinion and",
    "start": "3374839",
    "end": "3382559"
  },
  {
    "text": "as a last kind of advice i want to tell you to keep your eyes open",
    "start": "3382559",
    "end": "3388079"
  },
  {
    "text": "to discover the functional gems that are that are in your language or inspired your",
    "start": "3388079",
    "end": "3393119"
  },
  {
    "text": "language and especially the last few years there was a lot of rediscovering going on from old",
    "start": "3393119",
    "end": "3399839"
  },
  {
    "text": "functional concepts and they start tripling into the different languages or",
    "start": "3399839",
    "end": "3405440"
  },
  {
    "text": "even like in the case of rust if you i'm i don't really know a lot of rust",
    "start": "3405440",
    "end": "3410880"
  },
  {
    "text": "but what i've seen and i also don't know that much of haskell but when i looked at addressed after i knew some haskell i",
    "start": "3410880",
    "end": "3418000"
  },
  {
    "text": "always had a lot of of these high effects and say oh that looks like they borrowed something from hezcap and",
    "start": "3418000",
    "end": "3425520"
  },
  {
    "text": "then also maybe start learning a functional language",
    "start": "3425520",
    "end": "3431280"
  },
  {
    "text": "as kind of your uh i call it kind of recreational puzzling to",
    "start": "3431280",
    "end": "3438559"
  },
  {
    "text": "to just learn some new perspective also to spot all these functional gems that",
    "start": "3438559",
    "end": "3446160"
  },
  {
    "text": "are hidden in the language we use daily but also kind of to gain a new perspective",
    "start": "3446160",
    "end": "3452240"
  },
  {
    "text": "on to look at things so that's all from my side thank you",
    "start": "3452240",
    "end": "3461838"
  },
  {
    "text": "you",
    "start": "3465760",
    "end": "3467839"
  }
]