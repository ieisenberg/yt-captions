[
  {
    "text": "hi so I'm Matt's I'm gonna talk to you a little bit about go and microservices and i guess",
    "start": "7160",
    "end": "14570"
  },
  {
    "text": "other it's yeah I'm so a little quick intro",
    "start": "14570",
    "end": "20770"
  },
  {
    "text": "well one thank you very much coming I guess you're missing choice forks so yeah that means a lot I I'm Matt I'm on",
    "start": "20770",
    "end": "31329"
  },
  {
    "text": "Twitter here so if you have any questions I'll be around all day otherwise give me a shower on Twitter",
    "start": "31329",
    "end": "37649"
  },
  {
    "text": "and I work for a company called munzo so has anyone heard in munzo yes okay so I",
    "start": "37649",
    "end": "45640"
  },
  {
    "text": "actually did a talk NDC two years ago on handling failure in micro service",
    "start": "45640",
    "end": "51850"
  },
  {
    "text": "architectures which was perhaps a little premature as we hadn't really launched a product at that point thankfully now we",
    "start": "51850",
    "end": "58239"
  },
  {
    "text": "have launched two products and a few more people ahead of us so maybe this would be slightly more relevant now so",
    "start": "58239",
    "end": "65350"
  },
  {
    "text": "to give you a little bit of intro if you haven't heard in one zone we give out these kind of luminous debit cards",
    "start": "65350",
    "end": "73049"
  },
  {
    "text": "however that's like kind of side part of of what we do we our mission really is",
    "start": "73049",
    "end": "80110"
  },
  {
    "text": "to change the way that people interact with finance and for me that's kind of a personal thing I've I found it's very",
    "start": "80110",
    "end": "86380"
  },
  {
    "text": "difficult to kind of easily get spending data about like what your expenditures",
    "start": "86380",
    "end": "92800"
  },
  {
    "text": "are easily keep track of your money that's not something that banks have traditionally made particularly easy although that is hopefully changing very",
    "start": "92800",
    "end": "99010"
  },
  {
    "text": "soon with open banking but that's kind of always been something that I",
    "start": "99010",
    "end": "105190"
  },
  {
    "text": "personally have really had an interest in like having better control of my finances and having ideally someone who",
    "start": "105190",
    "end": "111550"
  },
  {
    "text": "can tell me to like spend less on one thing or put my money over here and that can kind of help me kind of live a",
    "start": "111550",
    "end": "119800"
  },
  {
    "text": "better life really and the flip side of that is the banks to me are a bit like",
    "start": "119800",
    "end": "125620"
  },
  {
    "text": "this so banks are quite dated you often have to go into a branch to do something",
    "start": "125620",
    "end": "131730"
  },
  {
    "text": "sometimes you have to go into a branch and the person in the branch can't help you and they direct you to a phone in",
    "start": "131730",
    "end": "137379"
  },
  {
    "text": "the branch where you didn't phone someone and none of this is a particularly good user experience if we",
    "start": "137379",
    "end": "143530"
  },
  {
    "text": "if we were focusing on UX for a second banking is not that area like banking is",
    "start": "143530",
    "end": "148870"
  },
  {
    "text": "generally terrible there are a very small notable couple of exceptions however as an industry thank you",
    "start": "148870",
    "end": "156130"
  },
  {
    "text": "probably has some of the worst user experience of all areas and that's a problem because you really can't follow",
    "start": "156130",
    "end": "161680"
  },
  {
    "text": "you really can't function in a modern in the modern world without a bank account it's quite difficult especially if you",
    "start": "161680",
    "end": "169870"
  },
  {
    "text": "move countries and then you can't get a bank account and that's really difficult if you like actually you need to pay",
    "start": "169870",
    "end": "175780"
  },
  {
    "text": "your rent or even get a hammer cause you have no way of proving to most these kind of companies that you're a real",
    "start": "175780",
    "end": "182410"
  },
  {
    "text": "person so banking is kind of core to every everyone's life and it's something that has terrible user experience and",
    "start": "182410",
    "end": "189160"
  },
  {
    "text": "that's something that I'm on so we want to change so we started quite a while ago back in February 2015",
    "start": "189160",
    "end": "196690"
  },
  {
    "text": "turns out building a bank takes a really long time I don't know if anyone would have guess that I took a lot longer than",
    "start": "196690",
    "end": "202270"
  },
  {
    "text": "we thought and to help us speed our way along this kind of journey we realized",
    "start": "202270",
    "end": "208600"
  },
  {
    "text": "we wouldn't be able to give people what you would consider a traditional current account for quite a while",
    "start": "208600",
    "end": "214150"
  },
  {
    "text": "we need a full banking license to hold funds and that's not something you can easily get for a lot of very good",
    "start": "214150",
    "end": "220870"
  },
  {
    "text": "reasons so in our case we launched a prepaid debit card and this is this neon",
    "start": "220870",
    "end": "226269"
  },
  {
    "text": "card a lot of people have seen and then slowly over time we've built up the kind of banking expertise and the technology",
    "start": "226269",
    "end": "233650"
  },
  {
    "text": "behind that so that we can add the features you expect of a normal bank account and then kind of from that point",
    "start": "233650",
    "end": "239790"
  },
  {
    "text": "start iterating and that's kind of the point we've got to you now or actually little belf the point of this picture we",
    "start": "239790",
    "end": "247120"
  },
  {
    "text": "have run through kind of alpha stage a beta stage we gave on a few hundred",
    "start": "247120",
    "end": "253959"
  },
  {
    "text": "thousand cards we've now started upgrading people to full current items which gives you all the extra kind of",
    "start": "253959",
    "end": "259600"
  },
  {
    "text": "features and that's kind of where we are now which is really kind of fun for me",
    "start": "259600",
    "end": "266140"
  },
  {
    "text": "because it's taken pretty much three years to get to that point and now we can do all the really cool things that we thought we'd be able to do a long",
    "start": "266140",
    "end": "273190"
  },
  {
    "text": "time ago so it's giving a little bit of context we give people",
    "start": "273190",
    "end": "278620"
  },
  {
    "text": "of an app you can all your interaction with us is through the app we have 24/7 chats that means we have teams around",
    "start": "278620",
    "end": "285310"
  },
  {
    "text": "the world as they don't have to stay up all nights and we give people a debit cards they can control the money and in the app you",
    "start": "285310",
    "end": "291820"
  },
  {
    "text": "can do really basic things like see where you spent you actually see like a description of that shop which makes a",
    "start": "291820",
    "end": "298870"
  },
  {
    "text": "bit easier to control your money we categorize those automatically you can do things like searching which response",
    "start": "298870",
    "end": "306100"
  },
  {
    "text": "you can't do you can actually search for emoji which is obviously a really important feature so if you do ever want",
    "start": "306100",
    "end": "313060"
  },
  {
    "text": "to search for the coffee cup that does actually work and it will pull out all of the coffee related shops you can also",
    "start": "313060",
    "end": "320699"
  },
  {
    "text": "store things like your receipts and stuff so if you have expenses expenses you can actually pull those not really",
    "start": "320699",
    "end": "327280"
  },
  {
    "text": "easily and build like an expense report I store pictures of my brunch just as a",
    "start": "327280",
    "end": "332680"
  },
  {
    "text": "kind of memory survive being another really basic thing is like you can freeze your card if you lose it",
    "start": "332680",
    "end": "337900"
  },
  {
    "text": "and crucially if you find it two minutes later you can unfreeze it and I think this is like this is a feature we kind",
    "start": "337900",
    "end": "345010"
  },
  {
    "text": "of mentioned quite a lot but I think specifically a developer conferences this is a really interesting one why did",
    "start": "345010",
    "end": "350889"
  },
  {
    "text": "why doesn't everyone do this it's literally a bull flag in our database of whether your card is enabled or not I",
    "start": "350889",
    "end": "357750"
  },
  {
    "text": "mean seriously it's actually an enum there's like four different states but",
    "start": "357750",
    "end": "362830"
  },
  {
    "text": "like this is the first feature we ever added like okay we have cards we put a",
    "start": "362830",
    "end": "369010"
  },
  {
    "text": "card in the machine that means we get an API call in real time every time you you charge a card we've still we've since",
    "start": "369010",
    "end": "376030"
  },
  {
    "text": "built our own master card processor but as approach time we used a third party card processing system um so yeah we",
    "start": "376030",
    "end": "382900"
  },
  {
    "text": "look at your code up in the database it's not enabled to climb literally that",
    "start": "382900",
    "end": "388630"
  },
  {
    "text": "simple and it turns out if you relatable it we can undo that so this is one of",
    "start": "388630",
    "end": "394930"
  },
  {
    "text": "the like really small UX things that is trivial and and all large companies like",
    "start": "394930",
    "end": "400599"
  },
  {
    "text": "all large banks have loads of people who are really intelligent you have really simple ideas like this but my actually building them is a",
    "start": "400599",
    "end": "408039"
  },
  {
    "text": "slightly different problem yeah this took like 10 minutes or so to go all the way back if you were",
    "start": "408039",
    "end": "417300"
  },
  {
    "text": "considering building a bank at some point you're going to be staring at this screen which is problematic kind of like",
    "start": "417300",
    "end": "426960"
  },
  {
    "text": "intense terror because I how do you really start any large any large",
    "start": "426960",
    "end": "432360"
  },
  {
    "text": "software project like where do you start right the beginning you can spend ages designing how everything will work",
    "start": "432360",
    "end": "438030"
  },
  {
    "text": "ultimately you probably don't really know how we're working end at this point I basically do nothing about banking so",
    "start": "438030",
    "end": "443970"
  },
  {
    "text": "now I know slightly more about banking and that means really that all",
    "start": "443970",
    "end": "449460"
  },
  {
    "text": "assumptions are going to make at the beginning of a project are probably wrong so there were a few decisions we",
    "start": "449460",
    "end": "456330"
  },
  {
    "text": "need to make right upfront and one of those was like how we could just get",
    "start": "456330",
    "end": "462600"
  },
  {
    "text": "going really quickly and build something so in our case we chose to use go as a main language not our only language but",
    "start": "462600",
    "end": "470610"
  },
  {
    "text": "as our main language that we would knock out a prototype in and then kind of iterate on from that point so that he",
    "start": "470610",
    "end": "476880"
  },
  {
    "text": "wouldn't use to go or seen the go-go fo kill few people so I guess the real",
    "start": "476880",
    "end": "484380"
  },
  {
    "text": "question is why would we use a relatively obscure language to build something that potentially might store",
    "start": "484380",
    "end": "491460"
  },
  {
    "text": "huge amounts of people's money and we might need to bring lots of people on it if our team grew and there's a few",
    "start": "491460",
    "end": "498360"
  },
  {
    "text": "reasons for that we could have used any language really like you can build",
    "start": "498360",
    "end": "503550"
  },
  {
    "text": "anything in any language and I wouldn't say that any eaters and you better than any of us so this is not one of those talks this is not a talk to say you",
    "start": "503550",
    "end": "510720"
  },
  {
    "text": "should all ditch everything you're doing and use go that's not the case go is good at certain things but not",
    "start": "510720",
    "end": "516330"
  },
  {
    "text": "everything and in this kind of talk I'll mention what those kind of pros and cons are so in our case I'd say the real kind",
    "start": "516330",
    "end": "524340"
  },
  {
    "text": "of sum up is that this very simple it's an effective language to build things and and it is very scalable and I mean",
    "start": "524340",
    "end": "531120"
  },
  {
    "text": "scalable in a number of different ways so to go through those the language",
    "start": "531120",
    "end": "537180"
  },
  {
    "text": "itself is extremely simple I've been programming probably full-time",
    "start": "537180",
    "end": "543470"
  },
  {
    "text": "and go for about five years now which is which I found a great experience and",
    "start": "543470",
    "end": "549199"
  },
  {
    "text": "before then I programmed in a lot a number of other images and usually in those other languages you can do really",
    "start": "549199",
    "end": "554749"
  },
  {
    "text": "really clever things so you can write an extremely small amount of code that's kind of magical and it's like feels",
    "start": "554749",
    "end": "560600"
  },
  {
    "text": "really good and the problem is if you have a need to debug that you it takes a",
    "start": "560600",
    "end": "566449"
  },
  {
    "text": "really long time you have to like start stepping through into frameworks you maybe haven't written you don't understand and that",
    "start": "566449",
    "end": "571730"
  },
  {
    "text": "takes a really long time and that is not the kind of go way of doing things there are lots of tools and packages that you",
    "start": "571730",
    "end": "577999"
  },
  {
    "text": "can use however go you write extremely simple quite boring code it's quite",
    "start": "577999",
    "end": "585139"
  },
  {
    "text": "boring like just write lots of code it's very straightforward and that's a really good thing because it means if you",
    "start": "585139",
    "end": "591199"
  },
  {
    "text": "haven't written that code you can go read someone else's code and you can understand it and that's a massive",
    "start": "591199",
    "end": "596930"
  },
  {
    "text": "benefit the language itself is very simple they're a relatively small number of constructs the types in the type",
    "start": "596930",
    "end": "603410"
  },
  {
    "text": "system is quite simple so statically typed and it's not as expressive there's",
    "start": "603410",
    "end": "609230"
  },
  {
    "text": "a number of other languages as an example you don't have generics which is a kind of point that people keep on",
    "start": "609230",
    "end": "616790"
  },
  {
    "text": "bringing up in indigo community and there are definite disadvantages to not",
    "start": "616790",
    "end": "622759"
  },
  {
    "text": "having constructs like generics in your programming language you have to write the same thing several times however",
    "start": "622759",
    "end": "628939"
  },
  {
    "text": "sometimes you can solve it without being really generic and you can have a really simple solution and sometimes you need",
    "start": "628939",
    "end": "635209"
  },
  {
    "text": "to write a bit more code but it is still really simple so for us as we've grown our code base",
    "start": "635209",
    "end": "641540"
  },
  {
    "text": "I found this so much a benefit I can go to any area that I didn't write and obviously there are slightly different",
    "start": "641540",
    "end": "647749"
  },
  {
    "text": "code styles go has a tool that you run called go formats which will format all",
    "start": "647749",
    "end": "654170"
  },
  {
    "text": "of your code into the specified kind of language format so as an example there",
    "start": "654170",
    "end": "660410"
  },
  {
    "text": "are no tabs vs space as arguments here that is that's that's not an option it has a way",
    "start": "660410",
    "end": "667850"
  },
  {
    "text": "and lots of other things like that you run at all every time and it means your",
    "start": "667850",
    "end": "672930"
  },
  {
    "text": "code is consistent across your entire code base so there are some style variations but the the main code is is",
    "start": "672930",
    "end": "679830"
  },
  {
    "text": "extremely readable the other advantages are kind of which I guess is the main",
    "start": "679830",
    "end": "685260"
  },
  {
    "text": "outed advantage in library are things like lightweight currency so I've got a few examples of this but although you",
    "start": "685260",
    "end": "692880"
  },
  {
    "text": "can write extremely simple code go makes it very easy to run that code concurrently and that means you can",
    "start": "692880",
    "end": "697890"
  },
  {
    "text": "write really like quite complex applications that are highly concurrent",
    "start": "697890",
    "end": "703860"
  },
  {
    "text": "which is particularly good for web services which I'll come onto in a bit and because of that like having",
    "start": "703860",
    "end": "712160"
  },
  {
    "text": "concurrency is like a first-class citizen off the language it makes it really awesome stick so in a lot of",
    "start": "712160",
    "end": "719760"
  },
  {
    "text": "languages if you want concurrency you how to spin up threads and go we use things called their routines which",
    "start": "719760",
    "end": "725220"
  },
  {
    "text": "essentially lightweight Co routines that can be moved between threads and in a",
    "start": "725220",
    "end": "732330"
  },
  {
    "text": "traditional application you would have tens hundreds hundreds of thousands",
    "start": "732330",
    "end": "737760"
  },
  {
    "text": "potentially millions of go routines and that's actually normal they're extremely lightweight so if you",
    "start": "737760",
    "end": "744060"
  },
  {
    "text": "want to fire up and you go routine you pretty much I think it like hates a K on the stack and that's it",
    "start": "744060",
    "end": "750780"
  },
  {
    "text": "and to use line in your code base you would literally have some function that",
    "start": "750780",
    "end": "757440"
  },
  {
    "text": "you would execute and it'll block and if you want to make that execute concurrently you would literally write",
    "start": "757440",
    "end": "762450"
  },
  {
    "text": "the he would go in a space before it and now it'll execute concurrently as it come currently with this parent now",
    "start": "762450",
    "end": "770030"
  },
  {
    "text": "that's great concurrence making concurrency this easy is an incredible kind of positive",
    "start": "770030",
    "end": "778280"
  },
  {
    "text": "experience for the language however anyone who's debugged concurrent",
    "start": "778280",
    "end": "783960"
  },
  {
    "text": "applications probably immediately realizes how easy it is to really shoot yourself in the foot here you can make",
    "start": "783960",
    "end": "789180"
  },
  {
    "text": "things extremely complicated you can have loads of things that are running in and concurrently and might be changing",
    "start": "789180",
    "end": "795180"
  },
  {
    "text": "State everywhere that might be a really bad thing so although it is easy to do there has to",
    "start": "795180",
    "end": "800399"
  },
  {
    "text": "be like some element of responsibility here but it means you can design programs in a slightly different way so",
    "start": "800399",
    "end": "805739"
  },
  {
    "text": "to use our example we have Ingo yours have a main package that's like the root of your program you have a function main",
    "start": "805739",
    "end": "813119"
  },
  {
    "text": "which is again the root function of your whole program and then somewhere inside",
    "start": "813119",
    "end": "818369"
  },
  {
    "text": "this function we're going to call handle requests and we're going to run that in a go routine so let's queue concurrently",
    "start": "818369",
    "end": "823979"
  },
  {
    "text": "what that means is the program flow will run through here and then we'll get to",
    "start": "823979",
    "end": "830069"
  },
  {
    "text": "this point and we will fire a separate go routine handle request which will now",
    "start": "830069",
    "end": "835379"
  },
  {
    "text": "execute concurrently with the main the routine and to be clear the main program",
    "start": "835379",
    "end": "840899"
  },
  {
    "text": "is itself running in erga regime so you can do any number of these crucially",
    "start": "840899",
    "end": "846749"
  },
  {
    "text": "when main gets the end here it will actually exit so if your handle request",
    "start": "846749",
    "end": "852660"
  },
  {
    "text": "hasn't finished by that point it would exit so in a lot of programs you might fire lots of things and then you'll use",
    "start": "852660",
    "end": "859439"
  },
  {
    "text": "some synchronization mechanism to wait for those to exit and then you'll clean up and exit program so as I mentioned go",
    "start": "859439",
    "end": "867929"
  },
  {
    "text": "routines themselves are extremely lightweight you can fire them very very quickly yeah when you are literally",
    "start": "867929",
    "end": "877379"
  },
  {
    "text": "firing on Leon you're allocating a que memory on the stack that has slowly increased as the co scheduler is",
    "start": "877379",
    "end": "884850"
  },
  {
    "text": "improved and that means that yeah they're they're like pretty much instant",
    "start": "884850",
    "end": "891139"
  },
  {
    "text": "so when you're doing this you now have the opportunity to modify huge numbers",
    "start": "892100",
    "end": "897899"
  },
  {
    "text": "of variables across your application concurrently at the same time which is probably about things so one of the kind",
    "start": "897899",
    "end": "906059"
  },
  {
    "text": "of main points I'd say there's loads of documentation on the go website one of",
    "start": "906059",
    "end": "911129"
  },
  {
    "text": "the really good articles is called effective go and that is like the step on from a style guide it's like the",
    "start": "911129",
    "end": "916619"
  },
  {
    "text": "ethos behind how you should programming go and not some examples of specific syntax and kind of constructs and one of",
    "start": "916619",
    "end": "924209"
  },
  {
    "text": "them is this so you shouldn't communicate by showing them instead you should share memory by",
    "start": "924209",
    "end": "929720"
  },
  {
    "text": "communicating and this is a very kind of course concept in goers language you can",
    "start": "929720",
    "end": "936110"
  },
  {
    "text": "have many variables in memory and if you have a reference to them you can modify them from any number of go routines",
    "start": "936110",
    "end": "942459"
  },
  {
    "text": "that's obviously bad because you may have things which are modified in and",
    "start": "942459",
    "end": "949790"
  },
  {
    "text": "out of order and the go scheduler main reorder your the execution of your go routines so you have concurrent access",
    "start": "949790",
    "end": "955370"
  },
  {
    "text": "um things like maps and arrays and various other things um mutating those concurrently is",
    "start": "955370",
    "end": "962230"
  },
  {
    "text": "generally a bad thing go will usually panic if you modify these things concurrently so what this sentence is",
    "start": "962230",
    "end": "971930"
  },
  {
    "text": "trying to tell you is instead of like having references to specific variables and mutating them we should instead pass",
    "start": "971930",
    "end": "978199"
  },
  {
    "text": "those things around between go routines and go has again a primary kind of",
    "start": "978199",
    "end": "983899"
  },
  {
    "text": "top-level construct called a channel which allows us to do this so these two",
    "start": "983899",
    "end": "989240"
  },
  {
    "text": "concepts the go routines and channels are the way that we build all programs really can go and these are just a way",
    "start": "989240",
    "end": "995300"
  },
  {
    "text": "to send a message from one go routine to another go routine and that is straight",
    "start": "995300",
    "end": "1000699"
  },
  {
    "text": "through you could send pointers probably don't do that unless you know what you're doing so this allows us to move",
    "start": "1000699",
    "end": "1007329"
  },
  {
    "text": "have many concurrent running sections of our code and then we can move our",
    "start": "1007329",
    "end": "1013089"
  },
  {
    "text": "different messages between them and communicate in that way so that means we can construct things like point lines we",
    "start": "1013089",
    "end": "1019360"
  },
  {
    "text": "can have one go routine that's doing one particular operation it passes a result to another one that's the result another one",
    "start": "1019360",
    "end": "1024610"
  },
  {
    "text": "we can also do things like running in and out so if we have many if we have",
    "start": "1024610",
    "end": "1031808"
  },
  {
    "text": "many go routines that are generating particular results we can then pass those into one thing which can congregate them and this gives us",
    "start": "1031809",
    "end": "1037959"
  },
  {
    "text": "ordering so we have one synchronous operation which were reading in from",
    "start": "1037959",
    "end": "1043900"
  },
  {
    "text": "many results from a channel so we get synchronization across our program the other one is if we have a large pool of",
    "start": "1043900",
    "end": "1050830"
  },
  {
    "text": "things we need to process we can process we can spare many go routines that listen on one channel and that means we",
    "start": "1050830",
    "end": "1056470"
  },
  {
    "text": "can effectively load button work across a large number of discreet go regimes within our application so",
    "start": "1056470",
    "end": "1063060"
  },
  {
    "text": "those kind of things allow us to do quite interesting things within our application and then by using those we",
    "start": "1063060",
    "end": "1072130"
  },
  {
    "text": "can construct like the the applications all so taking a little bit defense that",
    "start": "1072130",
    "end": "1079050"
  },
  {
    "text": "go to use themselves I mentioned to really lightweight and you can spin up",
    "start": "1079050",
    "end": "1084760"
  },
  {
    "text": "loads of them really quickly because they don't do any sorry they don't learn",
    "start": "1084760",
    "end": "1090970"
  },
  {
    "text": "as oh s level threads so the go scheduler has changed quite a lot over the last couple years and is now",
    "start": "1090970",
    "end": "1096700"
  },
  {
    "text": "incredibly efficient so usually most languages your kind of performance bottlenecks will come from spending up",
    "start": "1096700",
    "end": "1103270"
  },
  {
    "text": "new threads for concurrency and that means you have context switching you're moving memory in and out of cache lines",
    "start": "1103270",
    "end": "1108910"
  },
  {
    "text": "and CPUs so in go the go scheduler will the runtime will spin up one thread per",
    "start": "1108910",
    "end": "1115620"
  },
  {
    "text": "call and then it will multiplex all of your go routines across those without you really know anything anything about",
    "start": "1115620",
    "end": "1121330"
  },
  {
    "text": "him and that means that you don't have any content level context switching at that point as soon as one of those threads blocks for my IO or Treat disk",
    "start": "1121330",
    "end": "1128620"
  },
  {
    "text": "or memory it will park that spin up a new one on the core and then move other go routines which need to be scheduled",
    "start": "1128620",
    "end": "1134170"
  },
  {
    "text": "onto that so we'll do that incredibly efficiently and that's why you can run like potentially millions of go routines in one process also goes a managed",
    "start": "1134170",
    "end": "1143880"
  },
  {
    "text": "memory managed language so a long time ago it had kind of a stop the world",
    "start": "1143880",
    "end": "1150130"
  },
  {
    "text": "garbage collection frankly that has gone away now and it has a really efficient concurrent garbage collection so you can",
    "start": "1150130",
    "end": "1157660"
  },
  {
    "text": "generate huge amounts of garbage and the runtime will just deal with that for you",
    "start": "1157660",
    "end": "1163030"
  },
  {
    "text": "so that means like if you have come from say another language like Ruby or Python",
    "start": "1163030",
    "end": "1169840"
  },
  {
    "text": "or heaven forbid PHP which I used to do you don't have to deal with those kind",
    "start": "1169840",
    "end": "1176170"
  },
  {
    "text": "of things and moving to make a compiled language or or something like Java is quite difficult you have to change your",
    "start": "1176170",
    "end": "1182560"
  },
  {
    "text": "mindset quite a lot because you need to keep track for all of these things and gos gonna do that for you that's really",
    "start": "1182560",
    "end": "1187600"
  },
  {
    "text": "straightforward it's extremely efficient and the other thing if you're using this as a large company is the language",
    "start": "1187600",
    "end": "1193700"
  },
  {
    "text": "stability Sogo is about to upgrade to a version one point 10 all versions all sub",
    "start": "1193700",
    "end": "1200300"
  },
  {
    "text": "versions of the go one language have had a compatibility guarantee so basically",
    "start": "1200300",
    "end": "1206990"
  },
  {
    "text": "if you wrote a go one point one program and now on one point ten it should still compile there's been lots of performance",
    "start": "1206990",
    "end": "1214040"
  },
  {
    "text": "changes under the hood as I mentioned the memory of memory management and",
    "start": "1214040",
    "end": "1219440"
  },
  {
    "text": "specifically the garbage collection has pretty much increased several orders of magnitude over that time however you can just me compile your program and it's",
    "start": "1219440",
    "end": "1225679"
  },
  {
    "text": "basically fine that's kind of a guarantee that the girth is provided and",
    "start": "1225679",
    "end": "1230780"
  },
  {
    "text": "that means if you're using this in a much larger company you can upgrade versions and get performance increases",
    "start": "1230780",
    "end": "1235940"
  },
  {
    "text": "for free without having to schedule like loads of development time to read the words and we update to a new language",
    "start": "1235940",
    "end": "1242720"
  },
  {
    "text": "version which is pretty awesome so popping all of that together at mon-sol",
    "start": "1242720",
    "end": "1249620"
  },
  {
    "text": "we've been able to switch using go we started using it pretty much from beginning we've got a really simple",
    "start": "1249620",
    "end": "1254960"
  },
  {
    "text": "language which means that it's easy for people to join our company and start using we can pretty much rely on the",
    "start": "1254960",
    "end": "1262880"
  },
  {
    "text": "runtime to deal with all of these things for us and we can rather than focusing",
    "start": "1262880",
    "end": "1269210"
  },
  {
    "text": "on the language level problems we can focus on building our actual product which is the interesting part however",
    "start": "1269210",
    "end": "1279400"
  },
  {
    "text": "what we don't want to do is build one dirham application if we're building a bank so I guess I have to mention the",
    "start": "1279400",
    "end": "1287570"
  },
  {
    "text": "term micro services which in our case like it's extremely high P and I'm",
    "start": "1287570",
    "end": "1294040"
  },
  {
    "text": "that's something that a lot of people talk about very specific things about micro services what we mean when we say",
    "start": "1294040",
    "end": "1299570"
  },
  {
    "text": "micro services is just really small applications they're really simple they're just HTTP servers that's all",
    "start": "1299570",
    "end": "1305809"
  },
  {
    "text": "we're doing there's no like special inferred meaning from this term and the",
    "start": "1305809",
    "end": "1310850"
  },
  {
    "text": "reason we use go for this is because it has extremely low overheads so the",
    "start": "1310850",
    "end": "1316239"
  },
  {
    "text": "the average memory usage of one of our binaries will be like 40 megabytes and if we compare that to like one of our",
    "start": "1316239",
    "end": "1322989"
  },
  {
    "text": "services that's running the JVM that's hundreds of megabytes it means we can deploy a lot of these and they're really",
    "start": "1322989",
    "end": "1328809"
  },
  {
    "text": "efficient deployment is really simple as well Sogo is statically linked and that",
    "start": "1328809",
    "end": "1335109"
  },
  {
    "text": "means you can compile your entire code base into a single binary you have one file that is executable you put that on",
    "start": "1335109",
    "end": "1342039"
  },
  {
    "text": "a linux server and you execute it and that's it that's your deployment you can do really complicated things if you want",
    "start": "1342039",
    "end": "1348100"
  },
  {
    "text": "but the binary itself contains the runtime it contains all the dependencies and it's literally executable so if you",
    "start": "1348100",
    "end": "1355809"
  },
  {
    "text": "want to do anything with deployment you don't have to deal with like environments and working out which",
    "start": "1355809",
    "end": "1361119"
  },
  {
    "text": "version the runtime you have built into your docker container for example you don't have to make sure you've got all",
    "start": "1361119",
    "end": "1366460"
  },
  {
    "text": "of the files with it you literally compile it and then you run it and that's like amazing for a development",
    "start": "1366460",
    "end": "1372009"
  },
  {
    "text": "team so if you wanted to get started with those there's a few options so if",
    "start": "1372009",
    "end": "1378309"
  },
  {
    "text": "anyone's seen go kits this is a kind of standard library for micro services and",
    "start": "1378309",
    "end": "1384340"
  },
  {
    "text": "this will do things like let you create a server it'll handle all the requests flow for you and then you can just",
    "start": "1384340",
    "end": "1390850"
  },
  {
    "text": "pretty much build really simple functions which it will run go Kate is",
    "start": "1390850",
    "end": "1395980"
  },
  {
    "text": "quite like paired back it lets you specify kind of all the extra things yourselves whereas if you want something",
    "start": "1395980",
    "end": "1403389"
  },
  {
    "text": "that's kind of more fully fully featured then something like micro which is kind",
    "start": "1403389",
    "end": "1409600"
  },
  {
    "text": "of a fully comprehensive toolkit really this is probably the one you want so",
    "start": "1409600",
    "end": "1416379"
  },
  {
    "text": "with micro you can literally define a function you can run that compile that",
    "start": "1416379",
    "end": "1421570"
  },
  {
    "text": "as a binary you'll now have a HTTP server it supports a number of other transports as well and then you can",
    "start": "1421570",
    "end": "1428710"
  },
  {
    "text": "deploy them and it comes with my lots of kind of stuff down things for observability so discovering everything",
    "start": "1428710",
    "end": "1434980"
  },
  {
    "text": "like I'm all talking about we have our own - maybe don't use that but if you",
    "start": "1434980",
    "end": "1442330"
  },
  {
    "text": "want to have a look on like how we build really simple applications this is like really straightforward and in our example",
    "start": "1442330",
    "end": "1448650"
  },
  {
    "text": "literally when we build a service it's a function that takes a request and returns a response it's really that",
    "start": "1448650",
    "end": "1454240"
  },
  {
    "text": "simple we then usually put some of the related ones together so you can share some of",
    "start": "1454240",
    "end": "1459790"
  },
  {
    "text": "that domain logic in which case we will register a number of them with paths and",
    "start": "1459790",
    "end": "1466570"
  },
  {
    "text": "then register specific handlers this is just like any normal web application you're registering a specific routing",
    "start": "1466570",
    "end": "1473200"
  },
  {
    "text": "path and then you're executing a function which is literally going to take a request to and return a response and it's really that simple",
    "start": "1473200",
    "end": "1480150"
  },
  {
    "text": "as of two days ago Amazon now support go on lambda this is a good example again",
    "start": "1480150",
    "end": "1486490"
  },
  {
    "text": "of how the overheads are so low you can actually run them as lambda functions and buildings really easy",
    "start": "1486490",
    "end": "1492730"
  },
  {
    "text": "you couldn't test them locally because you can compile them against the toolkit and it just runs it locally so there's a",
    "start": "1492730",
    "end": "1499000"
  },
  {
    "text": "post on the Amazon blog check that out if you want to just kind of play with go in in lambda and again this is really",
    "start": "1499000",
    "end": "1507310"
  },
  {
    "text": "simple so if you wanted to do this you are going to define again a function and this is like a bit there's a big going",
    "start": "1507310",
    "end": "1514180"
  },
  {
    "text": "on here so you're gonna take a function and this first parameter is going to bring in an API gateway props a request",
    "start": "1514180",
    "end": "1519850"
  },
  {
    "text": "there's anyone used API gateway or native us before okay couple of people so API gateway allows you to define like",
    "start": "1519850",
    "end": "1527320"
  },
  {
    "text": "a route to execute a function and this is just going to take that request you're going to do something with it and",
    "start": "1527320",
    "end": "1534130"
  },
  {
    "text": "then you need to return a response and an error and in go you can return multiple parameters from from your",
    "start": "1534130",
    "end": "1541300"
  },
  {
    "text": "functions it's allows multiple return parameters and the kind of common convention is if you have an error the",
    "start": "1541300",
    "end": "1547360"
  },
  {
    "text": "last parameter is the error so this is just that kind of like standard way of",
    "start": "1547360",
    "end": "1552580"
  },
  {
    "text": "doing things and go the actual function main here is literally lambda start",
    "start": "1552580",
    "end": "1557890"
  },
  {
    "text": "my function so that's it so if you want to have a play with that there's loads of details on the Amazon blog it's",
    "start": "1557890",
    "end": "1563140"
  },
  {
    "text": "really really straightforward you pretty much write some code compile it and push a zip to Amazon and it will execute it",
    "start": "1563140",
    "end": "1569490"
  },
  {
    "text": "which is kind of awesome so that's what winning good at munzo",
    "start": "1569490",
    "end": "1576600"
  },
  {
    "text": "we started deciding we would use go for all of those kind of reasons and that",
    "start": "1576600",
    "end": "1581790"
  },
  {
    "text": "brings us like all the way back to the beginning how how do you build a bank if",
    "start": "1581790",
    "end": "1588300"
  },
  {
    "text": "you are starting from scratch and you know that it's going to be really hard I think that's the one thing",
    "start": "1588300",
    "end": "1596640"
  },
  {
    "text": "we did know right the beginning building like a large complex application is generally quite hard building one that",
    "start": "1596640",
    "end": "1602640"
  },
  {
    "text": "stores people's money and has to be really responsible is quite terrifying its broadest so at the beginning we were",
    "start": "1602640",
    "end": "1609600"
  },
  {
    "text": "pretty much like this we're going to have a mobile app that's that's a solid decision you can get behind that and",
    "start": "1609600",
    "end": "1615740"
  },
  {
    "text": "then that is going to do something and then yeah that'll store your money great",
    "start": "1615740",
    "end": "1623300"
  },
  {
    "text": "so obviously we're gonna have some form of server-side application and write the",
    "start": "1623300",
    "end": "1630150"
  },
  {
    "text": "beginning we knew that that was going to get complicated we'd have probably a database behind that maybe multiple",
    "start": "1630150",
    "end": "1635550"
  },
  {
    "text": "databases the application is going to get a lot of time we'll need to add all sorts of things in like emoji based",
    "start": "1635550",
    "end": "1641010"
  },
  {
    "text": "search and like probably caching and like lots of other crazy features that",
    "start": "1641010",
    "end": "1646290"
  },
  {
    "text": "we require and this is this is a really",
    "start": "1646290",
    "end": "1651450"
  },
  {
    "text": "common thing that everyone finds themself in it's a really common story you hear from lots of large companies you build a really big application and",
    "start": "1651450",
    "end": "1658350"
  },
  {
    "text": "unsurprisingly it's really hard to develop on deploying spider you have one",
    "start": "1658350",
    "end": "1664200"
  },
  {
    "text": "code base everyone's contributing in etc etc and these are the reasons that",
    "start": "1664200",
    "end": "1669830"
  },
  {
    "text": "people have talked so much about micro services over the last four or five years and why people have started",
    "start": "1669830",
    "end": "1676860"
  },
  {
    "text": "breaking their applications into much smaller chunks and that's exactly what we did right from the beginning so we",
    "start": "1676860",
    "end": "1682770"
  },
  {
    "text": "started off with a large number of discrete applications the Auld in one thing one thing well ever very bounded",
    "start": "1682770",
    "end": "1689550"
  },
  {
    "text": "context and that means that you can focus on how one of these works without needing to really know about the horse",
    "start": "1689550",
    "end": "1695310"
  },
  {
    "text": "kind of the whole application all of these are maintaining their own api's so",
    "start": "1695310",
    "end": "1700890"
  },
  {
    "text": "you effectively have api contracts between each service and in our case we",
    "start": "1700890",
    "end": "1706110"
  },
  {
    "text": "communicate are a number of ways either synchronous kind of our pc-based calls",
    "start": "1706110",
    "end": "1711830"
  },
  {
    "text": "which we require for later see sensitive requests response and we also use a lot",
    "start": "1711830",
    "end": "1717350"
  },
  {
    "text": "of hues and do a lot of like event sourcing kind of things which allows us to push those into queues and if we have",
    "start": "1717350",
    "end": "1723889"
  },
  {
    "text": "problems we can kind of slow down our processing and deal with that I'm doing",
    "start": "1723889",
    "end": "1729649"
  },
  {
    "text": "things back up in our case we started",
    "start": "1729649",
    "end": "1735590"
  },
  {
    "text": "off in I mentioned February 2015 and we slowly added more and more services and",
    "start": "1735590",
    "end": "1741019"
  },
  {
    "text": "I think the thing to bear in mind is if you start that way especially if you're starting a startup or you don't have an",
    "start": "1741019",
    "end": "1746149"
  },
  {
    "text": "established product you probably don't know how your product will work and that",
    "start": "1746149",
    "end": "1751999"
  },
  {
    "text": "means that it's very difficult to know what this does you'll make some guesses",
    "start": "1751999",
    "end": "1757070"
  },
  {
    "text": "and you'll build napier and a good example of this is how we built our transaction API originally we thought we",
    "start": "1757070",
    "end": "1763730"
  },
  {
    "text": "might read some stuff like this is how transactions in the real world work and I mean like kind of monetary",
    "start": "1763730",
    "end": "1770149"
  },
  {
    "text": "transactions rather than transactions in a specific database terminology and inevitably those assumptions were wrong",
    "start": "1770149",
    "end": "1777049"
  },
  {
    "text": "and that meant that we had to rebuild lots of these things and change the api's between them which is quite painful so if you're starting off right",
    "start": "1777049",
    "end": "1784369"
  },
  {
    "text": "at the beginning this is this is a problem and this is why most people build an application the prototype",
    "start": "1784369",
    "end": "1789769"
  },
  {
    "text": "quickly and then at some point in the future you pull out specific sections which are performance sensitive so in",
    "start": "1789769",
    "end": "1797360"
  },
  {
    "text": "our case we started right at the beginning and we've slowly added more and more services and deleted a few in",
    "start": "1797360",
    "end": "1802669"
  },
  {
    "text": "the middle and we're now running about 415 services and these are discreet",
    "start": "1802669",
    "end": "1807980"
  },
  {
    "text": "services each one of those were running many copies off based on performance requirements so ultimately we have",
    "start": "1807980",
    "end": "1815450"
  },
  {
    "text": "sacrificed the individual simplicity of these four like overall complexity of",
    "start": "1815450",
    "end": "1821509"
  },
  {
    "text": "our system but those are things we can manage so to go all the way back we",
    "start": "1821509",
    "end": "1826789"
  },
  {
    "text": "started off with an app that is going to connect to some form of API and we need",
    "start": "1826789",
    "end": "1833179"
  },
  {
    "text": "to deploy that on a server somewhere we could use kind of lambda or some other",
    "start": "1833179",
    "end": "1838759"
  },
  {
    "text": "like service products I'm not sure those were like particularly well used when we started",
    "start": "1838759",
    "end": "1844420"
  },
  {
    "text": "but in our case we have a server that we need to run something on and inevitably",
    "start": "1844420",
    "end": "1849560"
  },
  {
    "text": "over time we're going to add more of those and we end up in another problem where as a small development team we've",
    "start": "1849560",
    "end": "1855470"
  },
  {
    "text": "now turned ourselves entirely into an ops team where we just have to manage servers all the time which is again problematic so to solve this problem we",
    "start": "1855470",
    "end": "1863270"
  },
  {
    "text": "switch to using communities and kubernetes if anyone's used allows you",
    "start": "1863270",
    "end": "1868310"
  },
  {
    "text": "to kind of run a platform across all of your services essentially stick that as",
    "start": "1868310",
    "end": "1874640"
  },
  {
    "text": "like one lakh of compute power one set of resources that you can scale independently and then on top of that",
    "start": "1874640",
    "end": "1880970"
  },
  {
    "text": "you can run all of your applications so we can run a cubelet on each one of these servers and that will decide that",
    "start": "1880970",
    "end": "1887960"
  },
  {
    "text": "the scheduler will decide in the kubernetes master which applications are going to run on which servers and then",
    "start": "1887960",
    "end": "1895040"
  },
  {
    "text": "the qubit will execute those and most of the time we're running these in docker containers so the cubelet will essentially pull the docker container",
    "start": "1895040",
    "end": "1901220"
  },
  {
    "text": "and execute it behind this and you have EDD so this is our consistent data",
    "start": "1901220",
    "end": "1910640"
  },
  {
    "text": "storage and this is what Cuban Isis uses to store all of its data and so one thing very important now if you weren't",
    "start": "1910640",
    "end": "1916790"
  },
  {
    "text": "going to use communities it is extremely important that this is stable and reliable if your sed cluster breaks and",
    "start": "1916790",
    "end": "1924020"
  },
  {
    "text": "everything will break completely nothing more on and that's really bad as you",
    "start": "1924020",
    "end": "1929810"
  },
  {
    "text": "might imagine um I think we yeah we published a blog post about how we do this a couple months ago",
    "start": "1929810",
    "end": "1935690"
  },
  {
    "text": "so on Amazon sed requires quorum based decisions to make its route so I retain",
    "start": "1935690",
    "end": "1943310"
  },
  {
    "text": "its consistency which means you were so she need an odd number of nodes we don't",
    "start": "1943310",
    "end": "1949220"
  },
  {
    "text": "really want to have three so we run across to the availability zones three isn't very many that doesn't give us",
    "start": "1949220",
    "end": "1954500"
  },
  {
    "text": "much margin for error specifically we wanted the ability to lose an availability zone and also have one",
    "start": "1954500",
    "end": "1960080"
  },
  {
    "text": "server down for maintenance potentially at the same time and the minimum number you can do to do that is nine at CD",
    "start": "1960080",
    "end": "1966320"
  },
  {
    "text": "servers so you have three in each availability zone thankfully that is just about within the recommended",
    "start": "1966320",
    "end": "1972140"
  },
  {
    "text": "number that's like the maximum recommended number of servers and we've run these as individual auto-scaling",
    "start": "1972140",
    "end": "1977450"
  },
  {
    "text": "groups on Amazon so we essentially have nine auto-scaling groups of one and that means that they won't individually",
    "start": "1977450",
    "end": "1983690"
  },
  {
    "text": "numbered and we have an application that runs on that when it comes up that we attached is the correct EBS volume so",
    "start": "1983690",
    "end": "1992059"
  },
  {
    "text": "that means we can actually terminate all nine of our SCD clusters on all nodes completely and within two minutes we",
    "start": "1992059",
    "end": "1998660"
  },
  {
    "text": "have a whole new cluster which has retained all of the data if we lose under the quorum for them then we have",
    "start": "1998660",
    "end": "2005169"
  },
  {
    "text": "no downtime whatsoever and crucially while that is down the only real limitation is communities can make",
    "start": "2005169",
    "end": "2011140"
  },
  {
    "text": "scheduling decisions so if your applications crashed at that point or specifically if the nodes crashed and",
    "start": "2011140",
    "end": "2016179"
  },
  {
    "text": "went away your work clothes wouldn't be redistributed that's like an aside on",
    "start": "2016179",
    "end": "2021220"
  },
  {
    "text": "how we run that however the nice thing if you're building applications is all of that is squished down into one lovely",
    "start": "2021220",
    "end": "2028480"
  },
  {
    "text": "abstraction layer where we just run on our applications on communities and most people in the company don't really need",
    "start": "2028480",
    "end": "2034270"
  },
  {
    "text": "to know how all the underlying stuff works in order to do they do their job",
    "start": "2034270",
    "end": "2039600"
  },
  {
    "text": "and you also get nice things like dashboards so you can go and see what your applications run so in our case we",
    "start": "2039600",
    "end": "2045940"
  },
  {
    "text": "are taking go and docker and kubernetes and that gives us like a really really",
    "start": "2045940",
    "end": "2051220"
  },
  {
    "text": "nice way to run our applications I mentioned dr. is I'm saying go is going to statically link all of our",
    "start": "2051220",
    "end": "2057898"
  },
  {
    "text": "libraries into the actual binary and that means we don't need a runtime we can run our go binaries in a scratch",
    "start": "2057899",
    "end": "2064210"
  },
  {
    "text": "container with no shell which makes it a more secure and then we can run those really easily on kubernetes and kid",
    "start": "2064210",
    "end": "2070868"
  },
  {
    "text": "matey's will deal with resource constraints and node failure at the moving around so we can pretty much just",
    "start": "2070869",
    "end": "2077500"
  },
  {
    "text": "ship lots of services on top of communities I've bandied this word",
    "start": "2077500",
    "end": "2085060"
  },
  {
    "text": "around quite a lot though which is a service and in our case we're talking",
    "start": "2085060",
    "end": "2090280"
  },
  {
    "text": "about an individual go binary there's essentially HTTP server and it might have a number of handlers so number of",
    "start": "2090280",
    "end": "2096040"
  },
  {
    "text": "different paths but ultimately it's listening on a port receiving HTTP requests and responding with those these",
    "start": "2096040",
    "end": "2103510"
  },
  {
    "text": "gonna communicate in some so usually over some form of transport and originally we used a very long time",
    "start": "2103510",
    "end": "2110739"
  },
  {
    "text": "ago we use rabbit and Q to build a really quick prototype however that doesn't give us all the kind of things",
    "start": "2110739",
    "end": "2116259"
  },
  {
    "text": "that we wanted so ultimately we need many copies of each service to provide reliability and scalability and we need",
    "start": "2116259",
    "end": "2123130"
  },
  {
    "text": "some way of communicating between these and crucially if you're communicating",
    "start": "2123130",
    "end": "2129400"
  },
  {
    "text": "between lots of services there are a number of things you need to look for so lots of stuff I wish I worked me through",
    "start": "2129400",
    "end": "2136690"
  },
  {
    "text": "but ultimately you need to know where they are you need to be able to tolerate failure and because we're in a we've",
    "start": "2136690",
    "end": "2143349"
  },
  {
    "text": "built a cloud native application these services are coming and going so we need",
    "start": "2143349",
    "end": "2148569"
  },
  {
    "text": "some way of routing requests reliably through a series of services that may or",
    "start": "2148569",
    "end": "2153849"
  },
  {
    "text": "may not be there when we try and make the request and our services I mentioned",
    "start": "2153849",
    "end": "2159880"
  },
  {
    "text": "are small go binaries we could build lots of our own code to do this if you're using Java Scala you could use",
    "start": "2159880",
    "end": "2166299"
  },
  {
    "text": "vinegar for example which does most of most of our list however we want to",
    "start": "2166299",
    "end": "2171579"
  },
  {
    "text": "create on we want to keep our services as small as possible and as simple as possible so we just want to use HTTP at",
    "start": "2171579",
    "end": "2176829"
  },
  {
    "text": "this point and that means we need some way of routing these requests and cuban entities gives us a concept called a",
    "start": "2176829",
    "end": "2183099"
  },
  {
    "text": "service which allows you to route requests to multiple copies of a",
    "start": "2183099",
    "end": "2189069"
  },
  {
    "text": "receiving service however of this list that only gives you the top two so that",
    "start": "2189069",
    "end": "2195069"
  },
  {
    "text": "leaves us in a bit of a quandary so in our case we've chosen to use link ID",
    "start": "2195069",
    "end": "2200769"
  },
  {
    "text": "which is one of these kind of service mesh products which I guess is the",
    "start": "2200769",
    "end": "2206410"
  },
  {
    "text": "marketing term for them these days so if you have seen link be great if not there's m'boy sto and a couple of other",
    "start": "2206410",
    "end": "2215559"
  },
  {
    "text": "products which going to do these kind of things and all this is gonna do is take a request and then decide where to route it to so in our case we just send we",
    "start": "2215559",
    "end": "2223989"
  },
  {
    "text": "proxy to log over to the local link D and our service here is completely unaware of how it is routed to its",
    "start": "2223989",
    "end": "2230619"
  },
  {
    "text": "destination we then are using Cuban Italy service discovery to get that information",
    "start": "2230619",
    "end": "2236069"
  },
  {
    "text": "so we can locate where all the copies are linked adi has a neighbor that will",
    "start": "2236069",
    "end": "2241469"
  },
  {
    "text": "connect to this and do that for you and then as a result it will route the",
    "start": "2241469",
    "end": "2246569"
  },
  {
    "text": "request to the instance it most likely thinks is going to serve that correctly so do things like retry as if icon",
    "start": "2246569",
    "end": "2253049"
  },
  {
    "text": "connects or if it's not impotent request it load balances across all of these and",
    "start": "2253049",
    "end": "2258869"
  },
  {
    "text": "if there is a failing one it will take that out of service and then work out when it's back in service and then start",
    "start": "2258869",
    "end": "2265589"
  },
  {
    "text": "routing traffic back over to so to go again back at the top in our structure",
    "start": "2265589",
    "end": "2272640"
  },
  {
    "text": "we have any Oba the top load balancer onanism our traffic then goes into an",
    "start": "2272640",
    "end": "2278759"
  },
  {
    "text": "edge proxy which is something that we've written which again is really simple go HTTP server this will then route to",
    "start": "2278759",
    "end": "2286170"
  },
  {
    "text": "another service so we we call this tail like our API services and these are",
    "start": "2286170",
    "end": "2291390"
  },
  {
    "text": "going to do things like unmarshal JSON and decide what to do with that request and the cool thing is that as an example",
    "start": "2291390",
    "end": "2299099"
  },
  {
    "text": "we have we have a public API that you can use if you're a customer and we",
    "start": "2299099",
    "end": "2304459"
  },
  {
    "text": "route this particular slash web focus on top level API to this particular service",
    "start": "2304459",
    "end": "2309859"
  },
  {
    "text": "and what that means is we don't need to be deploying our hedge proxy every time we increase or change our API if we want",
    "start": "2309859",
    "end": "2316589"
  },
  {
    "text": "to add a new endpoint we just deploy a new one of these API which makes it almost riskless we're running our",
    "start": "2316589",
    "end": "2323519"
  },
  {
    "text": "services in cuban at ease their resource constrained so they can't consume all the CPU memory on the machines if you",
    "start": "2323519",
    "end": "2330059"
  },
  {
    "text": "deploy new one no requests are going to it so we can deploy new features on our API with literally nearly zero risk",
    "start": "2330059",
    "end": "2338269"
  },
  {
    "text": "which if you're building something is towards difference money is pretty",
    "start": "2338269",
    "end": "2343469"
  },
  {
    "text": "important and beyond that we then route to a number of other of course a number other services so this case we're",
    "start": "2343469",
    "end": "2349380"
  },
  {
    "text": "actually deciding what you're doing with your web hook we'll throw you and then we will probably put it into the",
    "start": "2349380",
    "end": "2356339"
  },
  {
    "text": "database to register a new web hook Handler and that mean that means when you're going to use your card in a shop will actually ping your web hook in",
    "start": "2356339",
    "end": "2364140"
  },
  {
    "text": "time quite often you'll get that before the receipt prints but I don't know like guaranteed oh yeah so this is like a",
    "start": "2364140",
    "end": "2372180"
  },
  {
    "text": "really basic flow through that each one of these arrows is obviously a massive obstruction because we're actually",
    "start": "2372180",
    "end": "2378450"
  },
  {
    "text": "putting this thing into linka D it's deciding which service to route it to is their routing into that and liquid",
    "start": "2378450",
    "end": "2384660"
  },
  {
    "text": "itself is communicating over an overlay network which you are required to use if you're using communities so there are",
    "start": "2384660",
    "end": "2391590"
  },
  {
    "text": "many many many layers of abstraction here but ultimately if you're building like business domain level logic it's",
    "start": "2391590",
    "end": "2398070"
  },
  {
    "text": "not right so it's really nice and simple and then behind this we have some databases and maybe other providers so",
    "start": "2398070",
    "end": "2405690"
  },
  {
    "text": "we use Cassandra for almost all of our data for reasons I have done chat about",
    "start": "2405690",
    "end": "2410720"
  },
  {
    "text": "and then other things like Africa for replicated logs and asynchronous",
    "start": "2410720",
    "end": "2416580"
  },
  {
    "text": "communication so that kind of gives you",
    "start": "2416580",
    "end": "2423960"
  },
  {
    "text": "an overview of how we've gone taking really basic go services so encourage",
    "start": "2423960",
    "end": "2429510"
  },
  {
    "text": "the P servers we're deploying those inter communities would you point quite a lot of them but they're all relatively",
    "start": "2429510",
    "end": "2435180"
  },
  {
    "text": "simple and as a result we can put together all of the features that you",
    "start": "2435180",
    "end": "2440220"
  },
  {
    "text": "kind of would expect of Frank we can store we have a ledger which can store",
    "start": "2440220",
    "end": "2448170"
  },
  {
    "text": "all of the transactions on your accounts we have integrations with MasterCard",
    "start": "2448170",
    "end": "2453780"
  },
  {
    "text": "Faster Payments direct debits chaps all of those things are literally clusters",
    "start": "2453780",
    "end": "2459840"
  },
  {
    "text": "of small go servers that are running within this because we haven't built our",
    "start": "2459840",
    "end": "2466020"
  },
  {
    "text": "load balancing into those servers we can actually and we pulled that out we can deploy service in any language",
    "start": "2466020",
    "end": "2472140"
  },
  {
    "text": "we just need kind of a common contract so if you're deploying a container that listens on the HTTP interface and can",
    "start": "2472140",
    "end": "2480780"
  },
  {
    "text": "serve requests in a specific formats then we can deploy those into our infrastructure so a number of our data",
    "start": "2480780",
    "end": "2488190"
  },
  {
    "text": "science applications are in Python because much better much better libraries 4,000",
    "start": "2488190",
    "end": "2493400"
  },
  {
    "text": "go we have to integrate with IBM MQ for a number of things so we don't want to",
    "start": "2493400",
    "end": "2500420"
  },
  {
    "text": "use the go bindings for that because we'd have to shell out it well we'd have to use the C bindings which is really",
    "start": "2500420",
    "end": "2505940"
  },
  {
    "text": "horrible and complex so instead we can just write a scholar service that does this for us and we can use the Java",
    "start": "2505940",
    "end": "2510980"
  },
  {
    "text": "bindings same with the low loader soap servers if you're building financial products you've probably had to",
    "start": "2510980",
    "end": "2517910"
  },
  {
    "text": "integrate with lots of financial companies that soap is the pinnacle of technical achievement nothing will",
    "start": "2517910",
    "end": "2525589"
  },
  {
    "text": "surpass soap and gos X and our support isn't that great so we we use Java",
    "start": "2525589",
    "end": "2531770"
  },
  {
    "text": "services now but ultimately these just kind of end up in communities and kind",
    "start": "2531770",
    "end": "2538550"
  },
  {
    "text": "of business as usual so there's a number of things that we've kind of learned off",
    "start": "2538550",
    "end": "2543980"
  },
  {
    "text": "the back of that one of them is that we need to constrain our complexity so we",
    "start": "2543980",
    "end": "2550130"
  },
  {
    "text": "build lots of small services and we've pulled that complexity outside so if we",
    "start": "2550130",
    "end": "2555140"
  },
  {
    "text": "have problems we can go and look at the code base of that particular service and its really short that's nice and easy",
    "start": "2555140",
    "end": "2561280"
  },
  {
    "text": "the other reasons that we've done this kind of taking this kind of approach in security so if you were deploying one",
    "start": "2561280",
    "end": "2569240"
  },
  {
    "text": "service of 400 you don't have to give everybody access to deploy that service you can deploy them within communities",
    "start": "2569240",
    "end": "2576589"
  },
  {
    "text": "using our isolation and all based access control so the specific people can only",
    "start": "2576589",
    "end": "2582260"
  },
  {
    "text": "see specific secrets they can only deploy specific applications and those applications can only even establish TCP",
    "start": "2582260",
    "end": "2588650"
  },
  {
    "text": "connections to other specific services so those that isolation is something",
    "start": "2588650",
    "end": "2594200"
  },
  {
    "text": "communities gives us which is a massive elephant force the other one strangely",
    "start": "2594200",
    "end": "2599780"
  },
  {
    "text": "is like operational ease so while we do have an incredibly complex system if",
    "start": "2599780",
    "end": "2606589"
  },
  {
    "text": "you're building a day-to-day product you can quickly create a new service you can",
    "start": "2606589",
    "end": "2612530"
  },
  {
    "text": "commit that we go through our change control process which is primarily get home and then you can build and deploy",
    "start": "2612530",
    "end": "2619069"
  },
  {
    "text": "that in Turkey and the kind of feedback cycle on that is potentially minutes we have a number",
    "start": "2619069",
    "end": "2625960"
  },
  {
    "text": "of staging environments you can deploy things really quickly into those when you are deploying them into production there's loads of readiness checks that",
    "start": "2625960",
    "end": "2632680"
  },
  {
    "text": "will ensure your service is correct before it's the traffic's all over so",
    "start": "2632680",
    "end": "2638259"
  },
  {
    "text": "those things are like of kind of crucial importance so those the reasons kind of",
    "start": "2638259",
    "end": "2645069"
  },
  {
    "text": "wine we've done that I guess there are also a load of things we've learned over",
    "start": "2645069",
    "end": "2650829"
  },
  {
    "text": "the last year or two so one of them which I guess is a little bit I've kind",
    "start": "2650829",
    "end": "2658269"
  },
  {
    "text": "of touched on it is that we want to make our services as small as possible so we have quite a lot of services that are",
    "start": "2658269",
    "end": "2664119"
  },
  {
    "text": "quite tiny compared to a lot of like big companies so using Netflix is approach",
    "start": "2664119",
    "end": "2671019"
  },
  {
    "text": "for example most of those will run like an application on a server and over in many of them because they're massive and",
    "start": "2671019",
    "end": "2678039"
  },
  {
    "text": "in our case we don't have that kind of scale so we're running lots and frantic Asian's on the same server but they are constrained um however if we're doing",
    "start": "2678039",
    "end": "2686349"
  },
  {
    "text": "lots of things in the same binary then it's sometimes hard to like establish",
    "start": "2686349",
    "end": "2691599"
  },
  {
    "text": "what the performance of that thing is it's harder to look if you're looking at graphs of like overall performance of a",
    "start": "2691599",
    "end": "2698019"
  },
  {
    "text": "service and this particular thing is slow if that service is doing many things and that's difficult if you're",
    "start": "2698019",
    "end": "2703749"
  },
  {
    "text": "reading many things off a queue for example and it's doing different logic within that same service even though it's very similar logic potentially",
    "start": "2703749",
    "end": "2711220"
  },
  {
    "text": "you'll be stalling the queue if one of those executes incorrectly and we've had lots of examples of that keeping them",
    "start": "2711220",
    "end": "2720220"
  },
  {
    "text": "really small also means that we have them thankfully we can do that because go has really low overheads so I",
    "start": "2720220",
    "end": "2725890"
  },
  {
    "text": "mentioned our default provision for a services I think 30 mega memory limited",
    "start": "2725890",
    "end": "2731710"
  },
  {
    "text": "to 100 mega memory which is insanely small we can use communities Palo Alto",
    "start": "2731710",
    "end": "2736900"
  },
  {
    "text": "scaling to scale that outside way horizontally but and then we'll tweak",
    "start": "2736900",
    "end": "2743230"
  },
  {
    "text": "those based on the performance characteristics of the service but ultimately keeping them really small means it's very flexible one thing which",
    "start": "2743230",
    "end": "2749980"
  },
  {
    "text": "I wasn't really sure of right beginning was now we prefer",
    "start": "2749980",
    "end": "2755100"
  },
  {
    "text": "services over shared code and libraries so if you're building something that would be a library you could compile",
    "start": "2755100",
    "end": "2760740"
  },
  {
    "text": "that into many services the problem is if for example you have built something",
    "start": "2760740",
    "end": "2766020"
  },
  {
    "text": "that is in 200 of those services and you now need to fix a bug you now have to",
    "start": "2766020",
    "end": "2771180"
  },
  {
    "text": "deploy 200 services which is really bad so in most cases we pull that kind of",
    "start": "2771180",
    "end": "2776850"
  },
  {
    "text": "library code into a service itself and we'll just make calls to that and that means we only have one place where we have to fix that if we have to change",
    "start": "2776850",
    "end": "2783540"
  },
  {
    "text": "the interface yes we still have the same problem but again it allows us to constrain that kind of complexity into a",
    "start": "2783540",
    "end": "2789660"
  },
  {
    "text": "small place also I guess this applies to",
    "start": "2789660",
    "end": "2795300"
  },
  {
    "text": "like all large code bases sometimes there is a way to do things that is already there and there is a better way",
    "start": "2795300",
    "end": "2801930"
  },
  {
    "text": "to do things and if you're in a really large code base with a large like with a",
    "start": "2801930",
    "end": "2808170"
  },
  {
    "text": "development team that is scaling often it is better to do it more consistently",
    "start": "2808170",
    "end": "2813270"
  },
  {
    "text": "than have many different ways that are slowly progressively better if you're",
    "start": "2813270",
    "end": "2818520"
  },
  {
    "text": "doing the same thing in many different places and this is something that yeah",
    "start": "2818520",
    "end": "2823890"
  },
  {
    "text": "we've kind of had to learn I guess over time sometimes if you have so many",
    "start": "2823890",
    "end": "2829830"
  },
  {
    "text": "services you will be unaware that there is a service that already does the job you were building a service for so we've had to make sure that we share these",
    "start": "2829830",
    "end": "2836760"
  },
  {
    "text": "things around and get better at communication in that regard when we're doing designs we share internal RFC's of",
    "start": "2836760",
    "end": "2843230"
  },
  {
    "text": "like what we're going to do to like solicit feedback across the company and that again allows people to point out",
    "start": "2843230",
    "end": "2849360"
  },
  {
    "text": "that yeah hang on we've solved this problem it's over there so you there's kind of a problem with all large code bases in this case they're discrete",
    "start": "2849360",
    "end": "2855930"
  },
  {
    "text": "applications so sometimes the visibility in that is lower also quite often you'll",
    "start": "2855930",
    "end": "2862260"
  },
  {
    "text": "be using shared infrastructure so I mentioned that we use cassandra store on Tatom if you're using one Cassandra",
    "start": "2862260",
    "end": "2869340"
  },
  {
    "text": "cluster with many many key spaces and you have one service that thrushes Cassandra",
    "start": "2869340",
    "end": "2874740"
  },
  {
    "text": "then you're going to create a knock-on effect for a number of their services so there are a few options for that if you",
    "start": "2874740",
    "end": "2881490"
  },
  {
    "text": "have large enough scale you can segregate those too many clusters if you don't then that",
    "start": "2881490",
    "end": "2886720"
  },
  {
    "text": "is quite expensive some products you can run much smaller volumes without",
    "start": "2886720",
    "end": "2893170"
  },
  {
    "text": "dedicated service so for example we run Kafka as a number of staple sets within communities rather than running like a",
    "start": "2893170",
    "end": "2900040"
  },
  {
    "text": "number of massive dedicated care instances and that means that we've isolated performance problems to those",
    "start": "2900040",
    "end": "2906520"
  },
  {
    "text": "clusters individually and that allows us to have better performance overall and higher our time also I mentioned",
    "start": "2906520",
    "end": "2913450"
  },
  {
    "text": "complexity is huge so onboarding people is hard but again that's something that",
    "start": "2913450",
    "end": "2919480"
  },
  {
    "text": "I think the mic I said well building your application as a series of micro",
    "start": "2919480",
    "end": "2924520"
  },
  {
    "text": "services and using a language such as go has made that problem a lot easier for us so people can join our company they",
    "start": "2924520",
    "end": "2931870"
  },
  {
    "text": "have a really simple language to learn but like the framework is almost non-existent we don't have loads of code",
    "start": "2931870",
    "end": "2937240"
  },
  {
    "text": "you need to learn so you can pretty much start working on a specific service the",
    "start": "2937240",
    "end": "2942490"
  },
  {
    "text": "deployment is super straightforward so you can get up to speed really quickly and then slowly learn all the other",
    "start": "2942490",
    "end": "2948550"
  },
  {
    "text": "things around the company so that's something that we focused on quite a lot the last year or so but ultimately we",
    "start": "2948550",
    "end": "2958030"
  },
  {
    "text": "still need to reduce our complexity hugely and we do that by isolating those",
    "start": "2958030",
    "end": "2964390"
  },
  {
    "text": "things I mentioned we use Ivy mmq for a couple of things we have to because we",
    "start": "2964390",
    "end": "2969490"
  },
  {
    "text": "integrate with other third parties but we don't want all of our other services to be aware of them so we can",
    "start": "2969490",
    "end": "2974830"
  },
  {
    "text": "encapsulate that complexity behind a service and then have kind of more",
    "start": "2974830",
    "end": "2980440"
  },
  {
    "text": "normal interface into our infrastructure and finally I guess we need to monitor",
    "start": "2980440",
    "end": "2985720"
  },
  {
    "text": "everything so if you have hundreds of discrete services monitoring and health",
    "start": "2985720",
    "end": "2990820"
  },
  {
    "text": "checks and being aware of performance is probably the most important thing so yeah I think if we're going to ask what",
    "start": "2990820",
    "end": "2999220"
  },
  {
    "text": "we do differently a long time ago we would have probably done things hugely",
    "start": "2999220",
    "end": "3004320"
  },
  {
    "text": "differently we have learned there are obstructions across services were often",
    "start": "3004320",
    "end": "3009390"
  },
  {
    "text": "incorrect and we've had to change those quite a lot so knowing more about your domain is kind of",
    "start": "3009390",
    "end": "3015000"
  },
  {
    "text": "quite important and then breaking those things down into smaller and smaller chunks has worked very well for us and",
    "start": "3015000",
    "end": "3022350"
  },
  {
    "text": "yeah that's it thank you so much does",
    "start": "3022350",
    "end": "3031680"
  },
  {
    "text": "anyone have any questions yeah so I mean",
    "start": "3031680",
    "end": "3048600"
  },
  {
    "text": "we're we're super transparent as a company some of the services are big but by big I mean like thousands of lines of",
    "start": "3048600",
    "end": "3054630"
  },
  {
    "text": "code not tens of thousands of lines of code they will have potentially 12 plus",
    "start": "3054630",
    "end": "3060600"
  },
  {
    "text": "handlers they're all doing different things but loosely related and for us that is quite complex so some of them",
    "start": "3060600",
    "end": "3067020"
  },
  {
    "text": "will be really small like a hundred lines of code a couple hundred ones one",
    "start": "3067020",
    "end": "3072780"
  },
  {
    "text": "or two handlers like anything",
    "start": "3072780",
    "end": "3075920"
  },
  {
    "text": "as a very good question how hard is debugging really hard um so I guess",
    "start": "3078980",
    "end": "3085859"
  },
  {
    "text": "there's a couple of different areas where debugging is quite hard debug and go itself is relatively straightforward",
    "start": "3085859",
    "end": "3091020"
  },
  {
    "text": "there's loads of really awesome tools if you're debugging an individual binary so this is really very much a question of",
    "start": "3091020",
    "end": "3096540"
  },
  {
    "text": "how hard is it to debug our applications versus hard how hard is it to debug distributed applications and the answer",
    "start": "3096540",
    "end": "3103619"
  },
  {
    "text": "is go really easy those are really cool tools you can use it has run time tracing there's a thing called people",
    "start": "3103619",
    "end": "3110130"
  },
  {
    "text": "off which you can use to literally trace execution so you can see where the",
    "start": "3110130",
    "end": "3116160"
  },
  {
    "text": "bottlenecks are and you can trace the government teams as well so you can take like a sample of execution from the run",
    "start": "3116160",
    "end": "3123420"
  },
  {
    "text": "time and you can actually pull that into some tools and see like you can trace where the execution 1 so that's amazing",
    "start": "3123420",
    "end": "3129950"
  },
  {
    "text": "debugging distributed applications is really really hard and we use a number of tools for that",
    "start": "3129950",
    "end": "3137099"
  },
  {
    "text": "and we have a number of our own internal tools ultimately we are usually when",
    "start": "3137099",
    "end": "3142980"
  },
  {
    "text": "debugging those problems in production because there are things that have happened and we're trying to work out why they've happened or at least what",
    "start": "3142980",
    "end": "3150599"
  },
  {
    "text": "triggered them so we can then reproduce them locally and fix them using things",
    "start": "3150599",
    "end": "3155790"
  },
  {
    "text": "like run tracing like Zipkin and so I'd say probably distributed tracing is one of the most important tools form",
    "start": "3155790",
    "end": "3161849"
  },
  {
    "text": "structures like this we tag every request that's our API war various edge points",
    "start": "3161849",
    "end": "3168510"
  },
  {
    "text": "with unique request ID which is then passed through between every service so",
    "start": "3168510",
    "end": "3173880"
  },
  {
    "text": "like when a service makes makes an ongoing HTTP call it will has a context",
    "start": "3173880",
    "end": "3181440"
  },
  {
    "text": "because go doesn't have thread-local variables we have to pass a context object through every method call",
    "start": "3181440",
    "end": "3186710"
  },
  {
    "text": "whereas in cons of that bit tiresome but ultimately we have this request ID that",
    "start": "3186710",
    "end": "3193290"
  },
  {
    "text": "we can then take out of this context serialize as a header send that to the next service which then DC realizes it",
    "start": "3193290",
    "end": "3199200"
  },
  {
    "text": "and put it into the context and passing on the contact also allows us to pass things like deadlines",
    "start": "3199200",
    "end": "3205300"
  },
  {
    "text": "and allows us to cancel context so if something is average much further up we",
    "start": "3205300",
    "end": "3210880"
  },
  {
    "text": "can actually cancel child requests through the infrastructure which is quite cool but yeah that's hard and I'd",
    "start": "3210880",
    "end": "3219820"
  },
  {
    "text": "say like instrumenting applications using distributed tracing and we also",
    "start": "3219820",
    "end": "3224920"
  },
  {
    "text": "log every log line with that request ID so we can pull the log lines for a specific request even though my have",
    "start": "3224920",
    "end": "3231910"
  },
  {
    "text": "touched like 40 services across 40 different servers we can pull that",
    "start": "3231910",
    "end": "3238090"
  },
  {
    "text": "together and see see the loss for that request that's quite a that's a good question we",
    "start": "3238090",
    "end": "3260440"
  },
  {
    "text": "don't have a special special place we actually is a mono repo so it's like one",
    "start": "3260440",
    "end": "3266350"
  },
  {
    "text": "gigantic repository that you clone down which has every service literally as a folder within within that but yes that",
    "start": "3266350",
    "end": "3276100"
  },
  {
    "text": "is difficult if you are new to the code base because memorizing quickly what all",
    "start": "3276100",
    "end": "3282100"
  },
  {
    "text": "400 of them do it's impossible whereas if you've been around for a bit longer you kind of have that's like innate",
    "start": "3282100",
    "end": "3289119"
  },
  {
    "text": "knowledge that you've soaked up over time so no we don't have an explicit tool that does that it'd be really cool",
    "start": "3289119",
    "end": "3294580"
  },
  {
    "text": "if we did and yeah we we have a list of these and they all have a readme that",
    "start": "3294580",
    "end": "3299650"
  },
  {
    "text": "kind of I guess hopefully is up-to-date but probably not but that defines at",
    "start": "3299650",
    "end": "3305380"
  },
  {
    "text": "least what the service is intended to do so you have someone author and then yeah",
    "start": "3305380",
    "end": "3310810"
  },
  {
    "text": "it's really just communication between teams to make help onboard people and get them on speed",
    "start": "3310810",
    "end": "3316740"
  },
  {
    "text": "yeah so we we have a number of longer running orchestration things so some of",
    "start": "3332400",
    "end": "3338680"
  },
  {
    "text": "them strangely are actually integrating with other payment networks as an example where you send some of these",
    "start": "3338680",
    "end": "3346000"
  },
  {
    "text": "networks and not request like request response and you will get the response out some arbitrary amount of time and",
    "start": "3346000",
    "end": "3352390"
  },
  {
    "text": "that means that we had to architect that in such a way that we send the thing and it's kind of complete but we need to",
    "start": "3352390",
    "end": "3358480"
  },
  {
    "text": "check it later to confirm that it didn't fail or needs to be recent and then at some point we will receive a response",
    "start": "3358480",
    "end": "3365110"
  },
  {
    "text": "and I is essentially a new request which processes it and then when we come back around to checking if it's already",
    "start": "3365110",
    "end": "3370420"
  },
  {
    "text": "complete we can just drop out and like meet on the floor longer-term ones some",
    "start": "3370420",
    "end": "3378370"
  },
  {
    "text": "of the more interesting ones are things like when you sign up in our amp there are many stages and ultimately someone",
    "start": "3378370",
    "end": "3384640"
  },
  {
    "text": "may just put their phone down partway through that so those are kind of models as state machines and we have",
    "start": "3384640",
    "end": "3391150"
  },
  {
    "text": "specific services that orchestrate those state change like state transitions so",
    "start": "3391150",
    "end": "3398170"
  },
  {
    "text": "they will use lots of other services to do specific chunks of those work that work but there will be one service that",
    "start": "3398170",
    "end": "3403530"
  },
  {
    "text": "kind of controls the overall state transition so we have a few like that",
    "start": "3403530",
    "end": "3410010"
  },
  {
    "text": "some of the other ones sometimes they just they have a really long request and",
    "start": "3410010",
    "end": "3415870"
  },
  {
    "text": "it would be nice if we didn't do that or will trigger it and then we'll have something that's on a queue that will poll periodically to check when it's",
    "start": "3415870",
    "end": "3422830"
  },
  {
    "text": "been completed what time it out if is taken to normal series caf-co to defer all of those things yeah so combinations",
    "start": "3422830",
    "end": "3430060"
  },
  {
    "text": "will be but I guess",
    "start": "3430060",
    "end": "3433050"
  },
  {
    "text": "yeah so we have a really basic tool that will spin all of them up and actually",
    "start": "3439009",
    "end": "3444419"
  },
  {
    "text": "for local development most of us use a Mac and we can compile the binaries locally so we run all of the shared",
    "start": "3444419",
    "end": "3452249"
  },
  {
    "text": "infrastructure using docker compose so we can run docker containers for all of our databases cue use etc and then we'll",
    "start": "3452249",
    "end": "3460919"
  },
  {
    "text": "spin up a subset of like the services the all running on that's like really no",
    "start": "3460919",
    "end": "3468239"
  },
  {
    "text": "ideal we have not cracked how to do that well ultimately if you're not running",
    "start": "3468239",
    "end": "3473609"
  },
  {
    "text": "one of the services you'll get a timeout at some point which will tell you that it timed our hitting that service you like okay I need to go and store that",
    "start": "3473609",
    "end": "3480119"
  },
  {
    "text": "one and we have a few scripts that can identify those code paths so yeah if I",
    "start": "3480119",
    "end": "3485880"
  },
  {
    "text": "was developing locally for example on a specific area I would fire up a subset of the services and try and run alone",
    "start": "3485880",
    "end": "3491880"
  },
  {
    "text": "I'm running 400 binaries on even a reasonably powered computer is moderately difficult and doesn't work",
    "start": "3491880",
    "end": "3498509"
  },
  {
    "text": "particularly well and that's something that we still need to solve so whether we solve that by running machines in",
    "start": "3498509",
    "end": "3503819"
  },
  {
    "text": "Amazon we might use mini cube for it so you've run kubinashi's locally but I",
    "start": "3503819",
    "end": "3509339"
  },
  {
    "text": "don't think that yeah they just added an",
    "start": "3509339",
    "end": "3514979"
  },
  {
    "text": "omni so that that gives you tools to easily spin things up but again running",
    "start": "3514979",
    "end": "3520889"
  },
  {
    "text": "that a number of things when your computer is quite difficult so yeah that's something we still need to solve",
    "start": "3520889",
    "end": "3525929"
  },
  {
    "text": "um one option is we push those into like custom staging environments and allow",
    "start": "3525929",
    "end": "3532319"
  },
  {
    "text": "you to easily like modify a service locally and route traffic down in and",
    "start": "3532319",
    "end": "3538380"
  },
  {
    "text": "our fans and effectively",
    "start": "3538380",
    "end": "3541189"
  },
  {
    "text": "yeah um so that's a good question yes it does inevitably however that is a",
    "start": "3549640",
    "end": "3558950"
  },
  {
    "text": "kind of surmountable problem and I'd say that the advantages of the speed that",
    "start": "3558950",
    "end": "3565579"
  },
  {
    "text": "you couldn't develop things and deploy things is really what we're aiming for not necessarily the overall speed of the",
    "start": "3565579",
    "end": "3570650"
  },
  {
    "text": "API so card networks are a good example of this card networks are really slow",
    "start": "3570650",
    "end": "3577180"
  },
  {
    "text": "because they've been around from the 70s and there's no real incentive to make them faster if you tap the card and five",
    "start": "3577180",
    "end": "3583520"
  },
  {
    "text": "seconds later it works that's okay so what I means in practice is we will get an API receiver message will move the",
    "start": "3583520",
    "end": "3591530"
  },
  {
    "text": "money in your accounts and we'll send you a push notification and often that will beat the current network to your",
    "start": "3591530",
    "end": "3597829"
  },
  {
    "text": "phone that doesn't know all the time or if we have some kind of problem which",
    "start": "3597829",
    "end": "3604280"
  },
  {
    "text": "means that our we put all those things through several queues which means the we've isolated your card definitely",
    "start": "3604280",
    "end": "3610819"
  },
  {
    "text": "working from getting a push notification thrashing we had some problems with the last couple of days if anyone was",
    "start": "3610819",
    "end": "3616190"
  },
  {
    "text": "watching our Status page but what that means is we've isolated the extremely",
    "start": "3616190",
    "end": "3622010"
  },
  {
    "text": "reliable components from things that don't have to be as reliable and yes making lots and lots of network calls",
    "start": "3622010",
    "end": "3628510"
  },
  {
    "text": "definitely does increase latency but it's something that you can reduce quite",
    "start": "3628510",
    "end": "3634160"
  },
  {
    "text": "significantly by well one link it is maintaining connections to everything so",
    "start": "3634160",
    "end": "3640460"
  },
  {
    "text": "you don't have the cost of opening a new connection and sending a request you've already gone open TCP connection you can",
    "start": "3640460",
    "end": "3647119"
  },
  {
    "text": "make your services moderately quicksand-like that latency should be like 100 milliseconds between services",
    "start": "3647119",
    "end": "3654010"
  },
  {
    "text": "however that is one specific problem that we had with go and communities if",
    "start": "3654010",
    "end": "3660500"
  },
  {
    "text": "anyone's used or is aware of like how the Linux scheduler works it does time slicing on CPU and Kuban at ease if well",
    "start": "3660500",
    "end": "3668960"
  },
  {
    "text": "if you're using cgroups to throttle CPU on a particular process",
    "start": "3668960",
    "end": "3674450"
  },
  {
    "text": "and you use all of the available CPU in your tone slice you can't execute you",
    "start": "3674450",
    "end": "3679789"
  },
  {
    "text": "just paused until that time slows ends and the default on Linux is a hundred milliseconds and the default in Cuba",
    "start": "3679789",
    "end": "3686059"
  },
  {
    "text": "Nettie's which is not modifiable is 100 milliseconds so we've had to modify we've we have a fourth given at ease",
    "start": "3686059",
    "end": "3693529"
  },
  {
    "text": "that we've modified that in which allows us to configure the time slice window and changing that to like 5 milliseconds",
    "start": "3693529",
    "end": "3701000"
  },
  {
    "text": "or 2 and 1/2 milliseconds increased our agency by like an order of magnitude sorry decrease the latency by about an",
    "start": "3701000",
    "end": "3708529"
  },
  {
    "text": "order of magnitude so those are yeah it does increase latency and it's something you need to like instrument and be very",
    "start": "3708529",
    "end": "3714680"
  },
  {
    "text": "aware of but yeah you you can make really fast tables the graph is like",
    "start": "3714680",
    "end": "3730640"
  },
  {
    "text": "near the exponential unfortunately which is probably I mean which is similar to",
    "start": "3730640",
    "end": "3737329"
  },
  {
    "text": "the the rate that we're hiring new people as well so yes it's something that we have to be quite a werewolf but",
    "start": "3737329",
    "end": "3743990"
  },
  {
    "text": "we've deliberately put the infrastructure in place that would support so it's really a question of can",
    "start": "3743990",
    "end": "3750710"
  },
  {
    "text": "we as a company maintain that level of like knowledge but I mean it's just the",
    "start": "3750710",
    "end": "3756079"
  },
  {
    "text": "same as having one really big application that had loads of like classes it's just that those classes are",
    "start": "3756079",
    "end": "3761150"
  },
  {
    "text": "different processes running on different machines so trail",
    "start": "3761150",
    "end": "3767079"
  },
  {
    "text": "[Applause]",
    "start": "3772450",
    "end": "3778980"
  }
]