[
  {
    "text": "all right thanks everyone for joining me today my name is hassam barakat and i work as a",
    "start": "13200",
    "end": "19119"
  },
  {
    "text": "tech lead with willow this is my twitter handle and website if you would like to follow me or reach out",
    "start": "19119",
    "end": "24640"
  },
  {
    "text": "to me with any questions uh thanks for all of the attendees please feel free to turn on your camera",
    "start": "24640",
    "end": "30720"
  },
  {
    "text": "and thanks for all of the people that have turned their cameras we have dave with his amazing",
    "start": "30720",
    "end": "36480"
  },
  {
    "text": "and then that's amazing thanks dave um today we're going to talk about a",
    "start": "36480",
    "end": "41600"
  },
  {
    "text": "domain driven design with ef code i have been practicing with design for a while now and one of the",
    "start": "41600",
    "end": "47360"
  },
  {
    "text": "things that i have noticed when i work with developers is how how can they apply",
    "start": "47360",
    "end": "54000"
  },
  {
    "text": "its value objects repositories domain services to the legacy code bases that they have",
    "start": "56079",
    "end": "61840"
  },
  {
    "text": "inherited from a previous team or a third party event and this is going to be the focus of my talk today how would we apply domain",
    "start": "61840",
    "end": "68640"
  },
  {
    "text": "driven design to a legacy code base and we will not be only building a domain model that",
    "start": "68640",
    "end": "73840"
  },
  {
    "text": "exists in memory we'll also use the af core to materialize that domain model into",
    "start": "73840",
    "end": "78960"
  },
  {
    "text": "our relational database but before we start let's go and define what is a domain driven design",
    "start": "78960",
    "end": "86640"
  },
  {
    "text": "women driven design is an approach to software development that centers the development on programming a domain model",
    "start": "86640",
    "end": "92960"
  },
  {
    "text": "that has a rich understanding of the processes and the rules of the domain so as developers we will be building a",
    "start": "92960",
    "end": "99520"
  },
  {
    "text": "domain model so that leads us to what is a domain model a domain model is an object model",
    "start": "99520",
    "end": "105759"
  },
  {
    "text": "of the domain that has both behavior and data so we will end up with a set of classes",
    "start": "105759",
    "end": "111840"
  },
  {
    "text": "that will not be just set of data holders it will also have behavior usually behaviors with object-oriented",
    "start": "111840",
    "end": "118320"
  },
  {
    "text": "is functions or methods so are we going to represent the whole domain that we are working on",
    "start": "118320",
    "end": "124560"
  },
  {
    "text": "actually no because this is the other definition that i really like about the demeanor",
    "start": "124560",
    "end": "129599"
  },
  {
    "text": "the domain model it's a system of abstractions that describe selected aspects of the domain and can",
    "start": "129599",
    "end": "135680"
  },
  {
    "text": "be used to solve problems related to that domain so we will not be presenting every single aspect that exists",
    "start": "135680",
    "end": "141760"
  },
  {
    "text": "in the business domain will be focusing on the ones that will help us solve our customer problems",
    "start": "141760",
    "end": "148640"
  },
  {
    "text": "so again domain model has behavior data doesn't represent the whole domain the thing to keep in mind",
    "start": "148640",
    "end": "156239"
  },
  {
    "text": "is as we add more and more features to our domain model our domain model will keep getting",
    "start": "156239",
    "end": "161280"
  },
  {
    "text": "bigger and having a very large dummy model will make it harder to understand and harder",
    "start": "161280",
    "end": "166400"
  },
  {
    "text": "to maintain and this is where the strategic design patterns from domain driven design help us solve this problem and the",
    "start": "166400",
    "end": "174959"
  },
  {
    "text": "suggestion from the member is to break that large momentum into a",
    "start": "174959",
    "end": "180640"
  },
  {
    "text": "small bounded context or bounded contests so a bounded context is a defined part",
    "start": "180640",
    "end": "186480"
  },
  {
    "text": "of the software where you use or you have the terms definitions and applied consistently so",
    "start": "186480",
    "end": "194640"
  },
  {
    "text": "clear boundary between different parts of the system so we can see here two bounded contexts the",
    "start": "194640",
    "end": "200480"
  },
  {
    "text": "sales and the support both of them have different terms like opportunity",
    "start": "200480",
    "end": "205760"
  },
  {
    "text": "territory in the support we have ticket and effect both of them could have same concept",
    "start": "205760",
    "end": "212640"
  },
  {
    "text": "like customer and the product but within each bounded context the customer is clearly defined",
    "start": "212640",
    "end": "218799"
  },
  {
    "text": "all of the developers and the business experts have a shared understanding of what is the customer mean within that",
    "start": "218799",
    "end": "225599"
  },
  {
    "text": "support context or within the sales comments so we when we have a large domain model",
    "start": "225599",
    "end": "232239"
  },
  {
    "text": "we should break it into a bounded set of bounded comments today we will not be focusing on how to break",
    "start": "232239",
    "end": "238000"
  },
  {
    "text": "that large domain model into multiple bounded contexts but we will be focusing on how would we apply the tactical",
    "start": "238000",
    "end": "243840"
  },
  {
    "text": "patterns from domain driven design to upper context",
    "start": "243840",
    "end": "249040"
  },
  {
    "text": "but which one should we start with increment design shouldn't be applied to all of the bounded contexts that exist",
    "start": "249040",
    "end": "255040"
  },
  {
    "text": "in your system because not all of them will gain value from applying domain driven design",
    "start": "255040",
    "end": "260320"
  },
  {
    "text": "so if you have a bounded context that is basically crowd operation like managing set of categories you will not",
    "start": "260320",
    "end": "266960"
  },
  {
    "text": "get value from the applying domain driven design or if you have a product catalog where you are listing them their",
    "start": "266960",
    "end": "273759"
  },
  {
    "text": "categories and tags and stuff like that where you don't have any business logic in there",
    "start": "273759",
    "end": "279120"
  },
  {
    "text": "you wouldn't get much value applying the main given design so keep in mind not all of the contexts",
    "start": "279120",
    "end": "285199"
  },
  {
    "text": "that exist in your system should apply domain driven design so which one should you start with you",
    "start": "285199",
    "end": "291600"
  },
  {
    "text": "should focus your domain driven design on or you start with the core domain",
    "start": "291600",
    "end": "296720"
  },
  {
    "text": "the core domain is the bounded context that provides the most value to your business it's that context that if you",
    "start": "296720",
    "end": "304400"
  },
  {
    "text": "remove your business will exist this is where you be should be starting and when you find that other context",
    "start": "304400",
    "end": "310639"
  },
  {
    "text": "this is where you try to apply those concepts like services in these value objects and all of those",
    "start": "310639",
    "end": "316479"
  },
  {
    "text": "amazing tactical patterns this didn't didn't help us to actually",
    "start": "316479",
    "end": "322000"
  },
  {
    "text": "see how would we apply those to legacy code this just pointed us to where should we start",
    "start": "322000",
    "end": "328320"
  },
  {
    "text": "so in order to apply i will show you how we apply the domain driven design to legacy context or legacy code base we will use a",
    "start": "328320",
    "end": "334960"
  },
  {
    "text": "standard domain to show that uh as as we go and this what we will expect",
    "start": "334960",
    "end": "340240"
  },
  {
    "text": "that is doing so the sample domain that we have is for a florist that florists have a",
    "start": "340240",
    "end": "347039"
  },
  {
    "text": "website and it enables the customers of the florist to subscribe to products on a weekly or",
    "start": "347039",
    "end": "353360"
  },
  {
    "text": "a monthly basis so a customer can subscribe to a small weekly punch which will cost them 50.",
    "start": "353360",
    "end": "361120"
  },
  {
    "text": "as the customers subscribe to more products and they spend more money with us we basically give them a",
    "start": "361120",
    "end": "366960"
  },
  {
    "text": "discount this is a simplified domain from a project that i worked on and i kind of took part of that so that",
    "start": "366960",
    "end": "374319"
  },
  {
    "text": "we can go through how we do that refactoring towards our h2me model",
    "start": "374319",
    "end": "379440"
  },
  {
    "text": "the current domain model that we have in the code base will look like this we have a customer",
    "start": "379440",
    "end": "385199"
  },
  {
    "text": "class which has email first name last name the amount of money spent and list of customer subscriptions we",
    "start": "385199",
    "end": "392560"
  },
  {
    "text": "have a list of products or a product where you have amount name telling period and whenever a customer subscribe to a product",
    "start": "392560",
    "end": "399280"
  },
  {
    "text": "we calculate the uh subscription amount is the amount of money spent by that customer if they are eligible for a",
    "start": "399280",
    "end": "405520"
  },
  {
    "text": "discount we calculate when that subscription uh will end and then we have a status",
    "start": "405520",
    "end": "411840"
  },
  {
    "text": "either active or classic as you can see the current domain model it's",
    "start": "411840",
    "end": "417360"
  },
  {
    "text": "it doesn't have any behavior and this object model is just data we have data email first",
    "start": "417360",
    "end": "423520"
  },
  {
    "text": "name amount we don't have any behavior there is no methods and this is one of the key takeaways",
    "start": "423520",
    "end": "428880"
  },
  {
    "text": "today the the rich domain model that you want to have is a domain model that have",
    "start": "428880",
    "end": "434639"
  },
  {
    "text": "a behavior and that and this is what we will be doing in our effect group we will push more behavior towards our",
    "start": "434639",
    "end": "441039"
  },
  {
    "text": "knowledge usually with legacy code bases the the behavior exists in the code but it's not in the",
    "start": "441039",
    "end": "448160"
  },
  {
    "text": "domain model it could exist in a controller or could exist in a service it could exist in a utility class",
    "start": "448160",
    "end": "454240"
  },
  {
    "text": "could exist anywhere and our key objective is to push that behavior the domain behavior to be part of the",
    "start": "454240",
    "end": "460800"
  },
  {
    "text": "domain model so we end up with that object model that has paul's behavior and death let's",
    "start": "460800",
    "end": "466560"
  },
  {
    "text": "switch to the idea so that we can read the code base and start seeing how would we",
    "start": "466560",
    "end": "471840"
  },
  {
    "text": "refactor it towards a rich domain mode this is a typical code base it's built",
    "start": "471840",
    "end": "477199"
  },
  {
    "text": "with net core that's having the domain the controller",
    "start": "477199",
    "end": "482800"
  },
  {
    "text": "here which is exposing an api we will focus on a specific use case today which is",
    "start": "482800",
    "end": "489440"
  },
  {
    "text": "a customer subscribing to our products so we have a request and the code base is using the mediator",
    "start": "489440",
    "end": "495520"
  },
  {
    "text": "library which is an excellent library from jimmy bogard that enables us to make our the methods",
    "start": "495520",
    "end": "501759"
  },
  {
    "text": "in in our controllers really small and we have a specific handler that can handle the",
    "start": "501759",
    "end": "507520"
  },
  {
    "text": "request either it's a query or a command and this also makes it better from a testing perspective",
    "start": "507520",
    "end": "513680"
  },
  {
    "text": "so the request that we have right now is a subscribe request that has a customer id and a product id",
    "start": "513680",
    "end": "520800"
  },
  {
    "text": "i'm passing the customer id as a parameter because i don't have authentication in this sample codebase",
    "start": "520800",
    "end": "527279"
  },
  {
    "text": "and we can see here the handler of that request which is doing the the following logic",
    "start": "527279",
    "end": "534880"
  },
  {
    "text": "with the actual handling report loading the customer information from the database",
    "start": "534880",
    "end": "540480"
  },
  {
    "text": "loading the product information from the database calculating the subscription amount",
    "start": "540480",
    "end": "546800"
  },
  {
    "text": "based on the product amount and how much did that customer spend in our goods it's simplified logic here",
    "start": "546800",
    "end": "554480"
  },
  {
    "text": "if the customer spends more than a hundred dollars they will get a 20 discount if they",
    "start": "554480",
    "end": "559519"
  },
  {
    "text": "spend more than a thousand dollars they will get 50 discount very generous with our",
    "start": "559519",
    "end": "564800"
  },
  {
    "text": "customers so this is where we do the calculation of the subscription amount",
    "start": "564800",
    "end": "570800"
  },
  {
    "text": "the next part here at line 47 is calculating when that current subscription will end",
    "start": "570800",
    "end": "577360"
  },
  {
    "text": "the current period specifically so if it's a weekly subscription it will end in seven days",
    "start": "577360",
    "end": "582720"
  },
  {
    "text": "if it's a monthly subscription it will end after a month the next part that we have in this",
    "start": "582720",
    "end": "588640"
  },
  {
    "text": "method is creating a subscription uh there is a request to increase the phone size i",
    "start": "588640",
    "end": "594959"
  },
  {
    "text": "just do that",
    "start": "594959",
    "end": "598000"
  },
  {
    "text": "and just make sure everyone can see it",
    "start": "602079",
    "end": "606959"
  },
  {
    "text": "i hope that's better calculate creating a subscription instance adding the instance to the customer",
    "start": "610079",
    "end": "617040"
  },
  {
    "text": "subscription increasing the amount of money spent so the next time the customer subscribe to a product they we calculate",
    "start": "617040",
    "end": "625040"
  },
  {
    "text": "the discount correctly the next step is saving the all of those",
    "start": "625040",
    "end": "630399"
  },
  {
    "text": "changes to the database and sending an email to the customer letting the letting them know that they",
    "start": "630399",
    "end": "635600"
  },
  {
    "text": "have subscribed to our group so as we can this method has a lot of",
    "start": "635600",
    "end": "640640"
  },
  {
    "text": "behavior and this is in this particular set the behavior exists in handler rather",
    "start": "640640",
    "end": "647920"
  },
  {
    "text": "than being part of the domain and what we will try to do today is push some of that behavior to be part of them",
    "start": "647920",
    "end": "654399"
  },
  {
    "text": "while we are applying all of the tactical patterns as we do currently the domain classes exist in",
    "start": "654399",
    "end": "660079"
  },
  {
    "text": "this domain directory where we have the customer product and subscription all of my",
    "start": "660079",
    "end": "665120"
  },
  {
    "text": "entities inherit from a base entity that is having the primary key for that identifier of this entity",
    "start": "665120",
    "end": "672399"
  },
  {
    "text": "i'm using ef core um to materialize the data to the database or materialize the",
    "start": "672399",
    "end": "678640"
  },
  {
    "text": "domain model hence we have a subscription context that has a property for each",
    "start": "678640",
    "end": "686240"
  },
  {
    "text": "working on and i'm using the fluent apis to map my domain model to the database",
    "start": "686240",
    "end": "692800"
  },
  {
    "text": "and this is important because we don't want to cluster our domain model with any of the rm concepts we",
    "start": "692800",
    "end": "698880"
  },
  {
    "text": "just want to keep the focus of the domain model on the business part",
    "start": "698880",
    "end": "704800"
  },
  {
    "text": "hence having a fluent apis is really important we don't want to have those required",
    "start": "704800",
    "end": "710800"
  },
  {
    "text": "table attributes on top of our domain model properties so this is important so this is how the",
    "start": "710800",
    "end": "719440"
  },
  {
    "text": "code looks like right now and we have obviously migration and the service of sending data",
    "start": "719440",
    "end": "725200"
  },
  {
    "text": "so how can we return this model to be a more overreach to my model see this",
    "start": "725200",
    "end": "731440"
  },
  {
    "text": "is a very long method that is doing a lot of logic inside of it so what i will start",
    "start": "731440",
    "end": "736639"
  },
  {
    "text": "with i will break this method into a smaller methods in legacy code basis you might have some",
    "start": "736639",
    "end": "742079"
  },
  {
    "text": "hints like comments or regions that help you identify how to break that large set of a large",
    "start": "742079",
    "end": "748320"
  },
  {
    "text": "method into smaller methods so we break this logic to a smaller set of methods so the first one here is pretty easy",
    "start": "748320",
    "end": "755279"
  },
  {
    "text": "calculating subscription amounts so i'll extract the method from this",
    "start": "755279",
    "end": "762399"
  },
  {
    "text": "[Music] then i will extract another method for",
    "start": "762860",
    "end": "768480"
  },
  {
    "text": "calculating the current subscription period in dates",
    "start": "768480",
    "end": "773600"
  },
  {
    "text": "the last part is by basically creating the subscription adding it to the customer so let's",
    "start": "781120",
    "end": "786560"
  },
  {
    "text": "create another method and we will call it add subscription to customer",
    "start": "786560",
    "end": "794079"
  },
  {
    "text": "[Music] or what we have done is we have",
    "start": "795540",
    "end": "800639"
  },
  {
    "text": "simplified the method uh that we are refactoring which basically minimize the magnetic load that we have in order to understand this",
    "start": "800639",
    "end": "807200"
  },
  {
    "text": "method all right let's go and view each of those methods and see what are the",
    "start": "807200",
    "end": "813120"
  },
  {
    "text": "issues that we have and how we can push that here to be part of the model the first method here is adding a",
    "start": "813120",
    "end": "820240"
  },
  {
    "text": "subscription to customer i can see a few issues with this method the first one is",
    "start": "820240",
    "end": "825839"
  },
  {
    "text": "the creating a subscription itself is done by the object initializer and this means that",
    "start": "825839",
    "end": "833279"
  },
  {
    "text": "we can do those mistakes of instead of creating the description in an active status they",
    "start": "834000",
    "end": "840880"
  },
  {
    "text": "can go and create it in cancel and although from a code perspective that's valid from a business perspective",
    "start": "840880",
    "end": "846240"
  },
  {
    "text": "that's wrong you should never create a subscription that's in cancel the states subscription always starts with active",
    "start": "846240",
    "end": "854839"
  },
  {
    "text": "so that the main model is not stopping the consumers from making those mistakes",
    "start": "854839",
    "end": "861360"
  },
  {
    "text": "similarly i can create a subscription without a customer or without a product right",
    "start": "861360",
    "end": "866880"
  },
  {
    "text": "and i will not get any exceptions from the domain model i might get an error when i try to materialize the",
    "start": "866880",
    "end": "873040"
  },
  {
    "text": "domain mode into the database but that's we should have all of those business",
    "start": "873040",
    "end": "878399"
  },
  {
    "text": "logic or business behavior to be part of the domain mode thankfully with c-sharp we can use the",
    "start": "878399",
    "end": "884000"
  },
  {
    "text": "sub the constructor feature to encapsulate that logic to be part of the subscription",
    "start": "884000",
    "end": "889440"
  },
  {
    "text": "and instead of having those publicly set properties they can be privately set which means we can modify",
    "start": "889440",
    "end": "895839"
  },
  {
    "text": "them only by behavior that exists in the domain model itself so i have a code snippet for that",
    "start": "895839",
    "end": "903920"
  },
  {
    "text": "so here is my subscription constructor i have created a new instance of a new constructor that accepts",
    "start": "904160",
    "end": "911600"
  },
  {
    "text": "the required parameters to create a subscription and as you can see here i started applying validation",
    "start": "911600",
    "end": "918000"
  },
  {
    "text": "to my constructor so if i try to create a subscription without a customer i will",
    "start": "918000",
    "end": "923040"
  },
  {
    "text": "get an exception if i try to provide a negative amount i will get an exception and as you can",
    "start": "923040",
    "end": "928800"
  },
  {
    "text": "see i have in immediately set the status to active and the consumer of the main model",
    "start": "928800",
    "end": "934959"
  },
  {
    "text": "doesn't need to worry about that since i have updated the constructor let's update the consumer code use that",
    "start": "934959",
    "end": "941600"
  },
  {
    "text": "parameterized constructor",
    "start": "941600",
    "end": "944959"
  },
  {
    "text": "so we have pushed the construction behavior to be part of the domain model i have a single test here that will help",
    "start": "946880",
    "end": "953839"
  },
  {
    "text": "me i couldn't break that code obviously in",
    "start": "953839",
    "end": "959839"
  },
  {
    "text": "existing code basis you might have more tests and if you don't have any tests then this is maybe",
    "start": "959839",
    "end": "965279"
  },
  {
    "text": "what you should start with which introducing tests to your coping let me run the test to make sure nothing",
    "start": "965279",
    "end": "971839"
  },
  {
    "text": "is broken",
    "start": "971839",
    "end": "974480"
  },
  {
    "text": "i'm getting an exception here and the exception would say there is no suitable constructor and the",
    "start": "979040",
    "end": "985279"
  },
  {
    "text": "reason is this is a limitation from core because if core cannot create an instance of",
    "start": "985279",
    "end": "992320"
  },
  {
    "text": "an entity that has a parameterized constructor is specifically when you have parameters",
    "start": "992320",
    "end": "998160"
  },
  {
    "text": "in that constructor that are navigation properties like customer or approved",
    "start": "998160",
    "end": "1003600"
  },
  {
    "text": "and the solution to that is to introduce a private constructor because we don't want the consumers of",
    "start": "1003600",
    "end": "1010320"
  },
  {
    "text": "our own model to uh use that parameter-less constructor but it can be used by avcor",
    "start": "1010320",
    "end": "1018000"
  },
  {
    "text": "some some people would prefer to have a separate domain models",
    "start": "1018000",
    "end": "1024400"
  },
  {
    "text": "separate models one domain model to include all of the behavior and all of the persistent logic like",
    "start": "1024400",
    "end": "1031918"
  },
  {
    "text": "to avoid having stuff like private constructs but in my opinion with all of the",
    "start": "1031919",
    "end": "1037600"
  },
  {
    "text": "improvements that are coming to rms like af4 uh i don't think this is a big",
    "start": "1037600",
    "end": "1042798"
  },
  {
    "text": "issue and i think it could be okay to keep progressing with a single domain because this is not really",
    "start": "1042799",
    "end": "1048240"
  },
  {
    "text": "like a big to my domain model let's run the test now and make sure nothing is broken and if we",
    "start": "1048240",
    "end": "1054960"
  },
  {
    "text": "can construct that subscription in",
    "start": "1054960",
    "end": "1061280"
  },
  {
    "text": "our passing and now we have pushed that behavior to the subscription class",
    "start": "1061840",
    "end": "1070960"
  },
  {
    "text": "the next thing that we i can see here with this subscription class is",
    "start": "1071520",
    "end": "1077440"
  },
  {
    "text": "the the developers consuming subscription need to always remember to update the amount of money spent",
    "start": "1079360",
    "end": "1085520"
  },
  {
    "text": "whenever they add or remove or change the subscription collection so this relationship",
    "start": "1085520",
    "end": "1091120"
  },
  {
    "text": "is basically needs to be always kept in mind whenever you work with the",
    "start": "1091120",
    "end": "1096160"
  },
  {
    "text": "subscriptions list and the way i say that this behavior is",
    "start": "1096160",
    "end": "1101440"
  },
  {
    "text": "something that could be pushed to be part of the domain model and consumers of my class shouldn't even",
    "start": "1101440",
    "end": "1107679"
  },
  {
    "text": "need to worry about modifying the money spin it should be a read-only property",
    "start": "1107679",
    "end": "1113280"
  },
  {
    "text": "and it should be modified by a behavior within so i can push this whole behavior of",
    "start": "1113280",
    "end": "1119520"
  },
  {
    "text": "adding subscription to a customer to be part of the customer class like this is how would i add a subscription",
    "start": "1119520",
    "end": "1125919"
  },
  {
    "text": "to a customer i will add those parameters and this behavior of modifying the money spent become part of the",
    "start": "1125919",
    "end": "1132640"
  },
  {
    "text": "customer so let's do that i will use the reflection that i have from writer and i will make",
    "start": "1132640",
    "end": "1139760"
  },
  {
    "text": "this add subscription to customer to be an instance method in the customer class now we have a part",
    "start": "1139760",
    "end": "1147120"
  },
  {
    "text": "of the customer we can rename it so we don't have the",
    "start": "1147120",
    "end": "1152160"
  },
  {
    "text": "two customers since we are part of the customer worries",
    "start": "1152160",
    "end": "1156720"
  },
  {
    "text": "since i have moved the behavior to be part of the customer i can modify the money spent to be privately set",
    "start": "1158240",
    "end": "1164240"
  },
  {
    "text": "rather than publicly set so the consumer right now doesn't need to worry about completing",
    "start": "1164240",
    "end": "1170400"
  },
  {
    "text": "the money spent whenever they subs whenever they add a subscription to the bus",
    "start": "1170400",
    "end": "1175679"
  },
  {
    "text": "so we have done a refactoring let's run the test to make sure nothing is broken",
    "start": "1175679",
    "end": "1181360"
  },
  {
    "text": "there are different approaches when you work with this refactoring uh some people prefer to use a factory method that's also an option",
    "start": "1188640",
    "end": "1197039"
  },
  {
    "text": "uh if you want to have uh or like domain uh services option it depends on the",
    "start": "1197039",
    "end": "1203520"
  },
  {
    "text": "business and the business depends on the case that you have here so in this case i think adding a",
    "start": "1203520",
    "end": "1209760"
  },
  {
    "text": "subscription is working fine but again the consumers cannot",
    "start": "1209760",
    "end": "1215919"
  },
  {
    "text": "go away with or actually can go away with doing something like this subscription clear",
    "start": "1216400",
    "end": "1223919"
  },
  {
    "text": "the consumers of the subscription class can still go and modify the list of the subscriptions and this",
    "start": "1223919",
    "end": "1230159"
  },
  {
    "text": "will create the relationship between the money spent and the subscription collection so what we can do here is",
    "start": "1230159",
    "end": "1236960"
  },
  {
    "text": "um we can go and modify our customer class so instead of",
    "start": "1236960",
    "end": "1242720"
  },
  {
    "text": "exposing a mutable list we can expose a read-only",
    "start": "1242720",
    "end": "1247840"
  },
  {
    "text": "list so what i have here is a list class let's say",
    "start": "1247840",
    "end": "1254159"
  },
  {
    "text": "using the list class which inherits from i read only and i read only it has from irid only collection",
    "start": "1254159",
    "end": "1260400"
  },
  {
    "text": "so i can expose pirate only collection and use a packing field rather than exposing a mutable list",
    "start": "1260400",
    "end": "1268400"
  },
  {
    "text": "so i have a little snippet for that so you won't need to watch me writing",
    "start": "1268400",
    "end": "1274559"
  },
  {
    "text": "and i will update my method to use the privacy so i have exposed i read",
    "start": "1274559",
    "end": "1280000"
  },
  {
    "text": "only collection and i have a private field which is holding that list right now",
    "start": "1280000",
    "end": "1286559"
  },
  {
    "text": "at this point although i don't have that clear method exist but nothing stopping me from casting",
    "start": "1287760",
    "end": "1293760"
  },
  {
    "text": "this subscriptions to be a list of subscriptions and then i can hold them",
    "start": "1293760",
    "end": "1299120"
  },
  {
    "text": "up if i do this right now it will work and that should be that wouldn't be an issue",
    "start": "1299120",
    "end": "1305200"
  },
  {
    "text": "and to avoid having that scenario and cover it as well we should be using a mister that's",
    "start": "1305200",
    "end": "1310240"
  },
  {
    "text": "called as only and this will a wrapper around",
    "start": "1310240",
    "end": "1316840"
  },
  {
    "text": "my list and it cannot be modified in the run time so right now if i try to",
    "start": "1316840",
    "end": "1322640"
  },
  {
    "text": "call this clear method i will get an exception so now we have in behavior",
    "start": "1322640",
    "end": "1329520"
  },
  {
    "text": "to be part of my customer class and what no one can break that relationship between subscriptions",
    "start": "1329520",
    "end": "1336240"
  },
  {
    "text": "and the money spent and whenever i want to modify the subscriptions list i can do it by",
    "start": "1336240",
    "end": "1342799"
  },
  {
    "text": "the private feed let's run the test and make sure nothing is broken after the refactoring",
    "start": "1342799",
    "end": "1350799"
  },
  {
    "text": "right passing so let's recap what we have done so far",
    "start": "1354080",
    "end": "1359120"
  },
  {
    "text": "the first thing that we have done is we have taken that very long handler to have a smaller methods so we had a",
    "start": "1359120",
    "end": "1366400"
  },
  {
    "text": "method for calculating transcription amount the current period ended and adding subscription to customer",
    "start": "1366400",
    "end": "1372000"
  },
  {
    "text": "we started reflecting the add subscription to customer uh first we uh we we moved",
    "start": "1372000",
    "end": "1379039"
  },
  {
    "text": "the behavior of constructing a subscription to be part of the entity itself and we use the",
    "start": "1379039",
    "end": "1384559"
  },
  {
    "text": "constructor to validate the parameters coming to the subscription",
    "start": "1384559",
    "end": "1389840"
  },
  {
    "text": "who encapsulated the logic of adding subscription to customer to be part of the customer entity",
    "start": "1390320",
    "end": "1396159"
  },
  {
    "text": "and we encapsulated the behavior of modifying the subscription management so both of",
    "start": "1396159",
    "end": "1401440"
  },
  {
    "text": "them became read only the management is by a private set so you can read the value",
    "start": "1401440",
    "end": "1407440"
  },
  {
    "text": "and we encapsulated the behavior of the read-only collection using everyone now more behavior",
    "start": "1407440",
    "end": "1413520"
  },
  {
    "text": "moved from the hand left to be part of the domain mode",
    "start": "1413520",
    "end": "1418799"
  },
  {
    "text": "let's get back to our handler and see the next method that we have extracted and what what do we have in here",
    "start": "1420320",
    "end": "1427600"
  },
  {
    "text": "this method is interesting because it's a static method which is calculating the current period indeed it's a static and accepts",
    "start": "1427600",
    "end": "1434559"
  },
  {
    "text": "a single parameter which is the problem whenever i see this pattern of having a static method with one",
    "start": "1434559",
    "end": "1441039"
  },
  {
    "text": "parameter this usually could be an indication that",
    "start": "1441039",
    "end": "1446240"
  },
  {
    "text": "the whole behavior belongs to the product so instead of having the behavior as a part",
    "start": "1446240",
    "end": "1451279"
  },
  {
    "text": "of the handler we can move this whole behavior to be part of the product fast and this is",
    "start": "1451279",
    "end": "1457039"
  },
  {
    "text": "what i'm going to do so i move this behavior and i'll make it",
    "start": "1457039",
    "end": "1462080"
  },
  {
    "text": "an instance method of the product so now it's part of the product",
    "start": "1462080",
    "end": "1469039"
  },
  {
    "text": "one thing to keep in mind here is we can see there is a switch statement on the billing period and the billing",
    "start": "1469039",
    "end": "1475679"
  },
  {
    "text": "period is an enumerage in in the legacy code pages one of the",
    "start": "1475679",
    "end": "1481679"
  },
  {
    "text": "smells that you might find in the code base is there could be multiple locations in the code base where are",
    "start": "1481679",
    "end": "1488000"
  },
  {
    "text": "you could have multiple switches statements or if else conditions on that particular",
    "start": "1488000",
    "end": "1493760"
  },
  {
    "text": "emulation and the problem with that is if you would like to introduce a new value",
    "start": "1493760",
    "end": "1499200"
  },
  {
    "text": "for the enumeration like in in this case introducing a yearly subscription",
    "start": "1499200",
    "end": "1504640"
  },
  {
    "text": "it would mean that you would need to go and update all of those touch points in the code one thing",
    "start": "1504640",
    "end": "1511200"
  },
  {
    "text": "you can do if you have that case is we factor this enumerator to be an enumeration class",
    "start": "1511200",
    "end": "1517039"
  },
  {
    "text": "and refactor those switches statements to be part of a strategy pattern implementation",
    "start": "1517039",
    "end": "1522480"
  },
  {
    "text": "i wouldn't show you that today because we don't have the case but if you are interested the code is available in github and will",
    "start": "1522480",
    "end": "1529520"
  },
  {
    "text": "show you of this sample is available in github with a sample of refactored enumerator to enumeration",
    "start": "1529520",
    "end": "1535679"
  },
  {
    "text": "class i will reference the link of the source code at the end of the book",
    "start": "1535679",
    "end": "1541120"
  },
  {
    "text": "so for this case we will just keep it as a part of the product and we just run the test to make sure",
    "start": "1541200",
    "end": "1546640"
  },
  {
    "text": "nothing is broken",
    "start": "1546640",
    "end": "1549679"
  },
  {
    "text": "so nothing is broken that's amazing let's start looking at the next method that we have here which is calculating the subscription",
    "start": "1555520",
    "end": "1562159"
  },
  {
    "text": "amounts calculating the subscription amount is uh has that it's a static method and it has two",
    "start": "1562159",
    "end": "1570559"
  },
  {
    "text": "parameters the first the product the second one is the customer so we cannot basically just move it to",
    "start": "1570559",
    "end": "1577440"
  },
  {
    "text": "one of the entities because maybe in this case we don't have the behavior to",
    "start": "1577440",
    "end": "1582960"
  },
  {
    "text": "fit well into one of the entities and the domains becomes very handy which is",
    "start": "1582960",
    "end": "1589840"
  },
  {
    "text": "basically it's a clause that could have a behavior that doesn't belong to one particular entity and it could be accepting the",
    "start": "1589840",
    "end": "1596720"
  },
  {
    "text": "input as multiple entities work the behavior in there and return the outcome",
    "start": "1596720",
    "end": "1602159"
  },
  {
    "text": "and this is what i'm going to do today i will introduce a domain service to calculate the subscription amount so",
    "start": "1602159",
    "end": "1609120"
  },
  {
    "text": "i go here create a class we call it subscription amount calculator",
    "start": "1609120",
    "end": "1616960"
  },
  {
    "text": "and this class will be the one to hold the behavior that we have in our request handle so i will use the refactoring from a",
    "start": "1618880",
    "end": "1625600"
  },
  {
    "text": "sharper to move this behavior to be part of subscription amount calculator",
    "start": "1625600",
    "end": "1633360"
  },
  {
    "text": "and the sharper is pretty slow because i'm streaming found our class and we move it",
    "start": "1635440",
    "end": "1644080"
  },
  {
    "text": "to move this behavior to be part of the subscription amount category",
    "start": "1644080",
    "end": "1649840"
  },
  {
    "text": "since we are working with classes i prefer to develop again as an interface because it",
    "start": "1650640",
    "end": "1656240"
  },
  {
    "text": "makes my testing easier so what we will do is we will",
    "start": "1656240",
    "end": "1661279"
  },
  {
    "text": "make this an anesthetic method and then we will introduce we extract an",
    "start": "1661279",
    "end": "1667520"
  },
  {
    "text": "interface of this class so we can do that by extracting interface",
    "start": "1667520",
    "end": "1675279"
  },
  {
    "text": "we will call it oh let's already have the eye",
    "start": "1675279",
    "end": "1680480"
  },
  {
    "text": "and we can push this member to up remember up and will be part of",
    "start": "1680880",
    "end": "1688399"
  },
  {
    "text": "the page interface so now i can update my handler to accept the interface as a",
    "start": "1688399",
    "end": "1696080"
  },
  {
    "text": "dependency and then use that domain service dependency to calculate the subscription amount",
    "start": "1696080",
    "end": "1702640"
  },
  {
    "text": "rather than using as a part of the code so i subscription amount later then we call it here",
    "start": "1702640",
    "end": "1709360"
  },
  {
    "text": "introduce private field then we go with",
    "start": "1709360",
    "end": "1715919"
  },
  {
    "text": "and now we have a new dependency and obviously we need to update the test to use this new domain service it's",
    "start": "1717279",
    "end": "1723919"
  },
  {
    "text": "going to go and we'll pause this dependency",
    "start": "1723919",
    "end": "1728559"
  },
  {
    "text": "one thing to notice after introducing that dependency is the outcome of this dependency is passed",
    "start": "1729039",
    "end": "1735520"
  },
  {
    "text": "to subscription add subscription of the customer and also this the subscription is",
    "start": "1735520",
    "end": "1742960"
  },
  {
    "text": "accepting product so inside this method i have the product and the customer at the same time so",
    "start": "1742960",
    "end": "1748880"
  },
  {
    "text": "what i can do i can take this one little bit further which is pushing that behavior of",
    "start": "1748880",
    "end": "1754960"
  },
  {
    "text": "calculating or calling the calculate method in the subscription amount calculator to be part of my domain",
    "start": "1754960",
    "end": "1761440"
  },
  {
    "text": "so rather than passing the outcome i can pass the actual a calculator and use the",
    "start": "1761440",
    "end": "1766880"
  },
  {
    "text": "double dispatch pattern of pathing the customer and the product to the to the domain service so what i will do",
    "start": "1766880",
    "end": "1775200"
  },
  {
    "text": "here is just undo this by changing this method to accept",
    "start": "1775200",
    "end": "1780320"
  },
  {
    "text": "iso description amount calculator just that and instead of",
    "start": "1780320",
    "end": "1787520"
  },
  {
    "text": "using the subscription amount directly just give it a variable here",
    "start": "1787520",
    "end": "1792960"
  },
  {
    "text": "basically holding the value of calling the domain service i will be passing the product which i'm",
    "start": "1792960",
    "end": "1799120"
  },
  {
    "text": "already getting as a parameter and then i will pass the customer which i am part of the customer already so at",
    "start": "1799120",
    "end": "1807039"
  },
  {
    "text": "line 19 i'm passing an instance of the customer class to the domain service this mean the",
    "start": "1807039",
    "end": "1814960"
  },
  {
    "text": "whole calculation of the subscription amount doesn't need to happen as a part of the",
    "start": "1814960",
    "end": "1821520"
  },
  {
    "text": "handler it will happen as a part of the domain logic itself",
    "start": "1821520",
    "end": "1827360"
  },
  {
    "text": "so now i have behavior and i should run the test to make sure that i didn't break my method",
    "start": "1827360",
    "end": "1837840"
  },
  {
    "text": "all right that is our passing let's go and recap what we have done so far after encapsulating the",
    "start": "1839520",
    "end": "1846880"
  },
  {
    "text": "collection we pushed the behavior of calculating the current period end date to be part of the product class",
    "start": "1846880",
    "end": "1853520"
  },
  {
    "text": "we talked about the potential using usage of the enumeration clauses if you have multiple locations in your",
    "start": "1853520",
    "end": "1859840"
  },
  {
    "text": "code base with if else or switch statements over the enumerator",
    "start": "1859840",
    "end": "1865840"
  },
  {
    "text": "the next thing is we have introduced a domain service and that domain service had the logic of",
    "start": "1866080",
    "end": "1872399"
  },
  {
    "text": "calculating subscription amounts and we the reason we introduced the domain service is",
    "start": "1872399",
    "end": "1879840"
  },
  {
    "text": "to either the product nor to the customer finally we use the double dispatch to pass or to call the domain",
    "start": "1880399",
    "end": "1888559"
  },
  {
    "text": "as a part of the domain logic rather than as a part of the hand",
    "start": "1888559",
    "end": "1894559"
  },
  {
    "text": "so as you can see our handler had all of that logic as a part of it and most of the project were belonging",
    "start": "1895440",
    "end": "1903200"
  },
  {
    "text": "to or better to be pushed to the domain model because now we have a richer domain model with more",
    "start": "1903200",
    "end": "1908240"
  },
  {
    "text": "data and behavior rather than data only the next thing that i can see in this",
    "start": "1908240",
    "end": "1913600"
  },
  {
    "text": "handler class is sending an email to the customer obviously it's very simplified it",
    "start": "1913600",
    "end": "1919519"
  },
  {
    "text": "doesn't even actually send an email but it's just to give the idea when something happens in the domain like a",
    "start": "1919519",
    "end": "1925679"
  },
  {
    "text": "customer subscribe to a product as an application we would like to notify the customer that they have",
    "start": "1925679",
    "end": "1931600"
  },
  {
    "text": "subscribed to that product so sending an email is definitely part",
    "start": "1931600",
    "end": "1937679"
  },
  {
    "text": "of the application but instead of doing it as a part of the handler itself we can trigger that email sending",
    "start": "1937679",
    "end": "1944640"
  },
  {
    "text": "activity or function once a domain event happen in my domain",
    "start": "1944640",
    "end": "1949679"
  },
  {
    "text": "so this is where the domain event concept becomes in handy and the way we can introduce it to our",
    "start": "1949679",
    "end": "1956399"
  },
  {
    "text": "domain is let's go switch to the slide and show you how it will actually work so all of my classes inherit from a base",
    "start": "1956399",
    "end": "1963600"
  },
  {
    "text": "entity so what i would like to do is whenever an action or behavior happen in my",
    "start": "1963600",
    "end": "1968880"
  },
  {
    "text": "domain entity to add or raise a domain event",
    "start": "1968880",
    "end": "1974000"
  },
  {
    "text": "and i will raise that domain event by having a list of domain events in the base",
    "start": "1974000",
    "end": "1979440"
  },
  {
    "text": "entity and whenever the action is called i will add an entry to that list of domain events",
    "start": "1979440",
    "end": "1987679"
  },
  {
    "text": "then whenever the db context say the changes method is called",
    "start": "1987679",
    "end": "1993200"
  },
  {
    "text": "we will be leveraging the five segment to listen to that behavior that the save",
    "start": "1993200",
    "end": "2000640"
  },
  {
    "text": "changes method has been called then we will be leveraging the db context",
    "start": "2000640",
    "end": "2006320"
  },
  {
    "text": "uh change tracker to find all of the entities in the db context that has a list of",
    "start": "2006320",
    "end": "2012000"
  },
  {
    "text": "domain events we'll loop over those entities and we will be using the mediator",
    "start": "2012000",
    "end": "2018080"
  },
  {
    "text": "library to publish those domain events the publish method from mediator enables",
    "start": "2018080",
    "end": "2023760"
  },
  {
    "text": "have that pops up mechanism and it means i could have handlers listening to that domain event",
    "start": "2023760",
    "end": "2030640"
  },
  {
    "text": "and processing the logic required for that domain event so if we have a domain event called",
    "start": "2030640",
    "end": "2036640"
  },
  {
    "text": "customer subscribe to our product then we can you have a handler that will send an email to that customer",
    "start": "2036640",
    "end": "2043360"
  },
  {
    "text": "or maybe send an email to uh the shipping or do something else",
    "start": "2043360",
    "end": "2050960"
  },
  {
    "text": "one thing to keep in mind as you you can see i keep using the past tense when i'm describing my domain events and this is",
    "start": "2051040",
    "end": "2057200"
  },
  {
    "text": "what you should have in your classes because the main event is used to describe that",
    "start": "2057200",
    "end": "2062398"
  },
  {
    "text": "something that has happened in the past something that is already happened so my domain events usually use the past",
    "start": "2062399",
    "end": "2068638"
  },
  {
    "text": "tense in their names so let's see how would we actually go and see this in action",
    "start": "2068639",
    "end": "2075838"
  },
  {
    "text": "first of all we need to introduce a base interface that can be used by all of the",
    "start": "2077679",
    "end": "2083440"
  },
  {
    "text": "domain events so in the shared kernel here i'll create an interface and we'll call it",
    "start": "2083440",
    "end": "2088560"
  },
  {
    "text": "i domain event since that domain event is going to use",
    "start": "2088560",
    "end": "2095760"
  },
  {
    "text": "the mediator i am going to make it inherit from i notification class from the mediator library then",
    "start": "2095760",
    "end": "2103359"
  },
  {
    "text": "i will update the page entity to have a list of those domain events",
    "start": "2103359",
    "end": "2109839"
  },
  {
    "text": "so we have a read-only list and we have a feature that enables us to update or modify",
    "start": "2113760",
    "end": "2121520"
  },
  {
    "text": "those domain events so the inhere the the entities that inherit from the base events whenever behavior happens like a",
    "start": "2121520",
    "end": "2127760"
  },
  {
    "text": "customer subscribe to our product they can add that event to the list of domain events",
    "start": "2127760",
    "end": "2134160"
  },
  {
    "text": "i will create a new directory to code or name space to have my events and i will create a class called",
    "start": "2134160",
    "end": "2142560"
  },
  {
    "text": "customer subscribe to product this is going to be my first domain event [Music]",
    "start": "2142560",
    "end": "2149699"
  },
  {
    "text": "and then this should inherit from i domain",
    "start": "2154800",
    "end": "2159838"
  },
  {
    "text": "i have a good snippet showing the actual domain event with the handler of it so let's have that remember the main service",
    "start": "2161680",
    "end": "2173599"
  },
  {
    "text": "here we go here is the actual domain event and the parameters of the domain event",
    "start": "2173599",
    "end": "2179599"
  },
  {
    "text": "or the properties of the domain event is the customer that subscribe to the product and which product they subscribe",
    "start": "2179599",
    "end": "2185839"
  },
  {
    "text": "you i know the handler from mediator so whenever the domain event is raised or",
    "start": "2185839",
    "end": "2192480"
  },
  {
    "text": "published we can listen to that domain event here and as you can see here at line 27",
    "start": "2192480",
    "end": "2198560"
  },
  {
    "text": "i am sending the email",
    "start": "2198560",
    "end": "2202640"
  },
  {
    "text": "the last part to do is when the customer subscribe to a product of the house where the next part is raising that domain event so",
    "start": "2204640",
    "end": "2213440"
  },
  {
    "text": "we will add a custom subscribe to our product event here so i'm calling the method",
    "start": "2213440",
    "end": "2221280"
  },
  {
    "text": "from the base class called add domain event which will basically add to that list of domain events",
    "start": "2221280",
    "end": "2227520"
  },
  {
    "text": "so what we have done so far is updating the basic based entity to have a list of domain events",
    "start": "2227520",
    "end": "2234079"
  },
  {
    "text": "we have event we have introduced an event with an event handler",
    "start": "2234079",
    "end": "2239119"
  },
  {
    "text": "the last page of this it changes interceptor which is usually",
    "start": "2239119",
    "end": "2245680"
  },
  {
    "text": "going to use the ef core uh file functionality which i have",
    "start": "2245680",
    "end": "2251040"
  },
  {
    "text": "cheated a bit here and i have that clause commented out so i'm going to comment uncommented and let's read the code",
    "start": "2251040",
    "end": "2257359"
  },
  {
    "text": "together",
    "start": "2257359",
    "end": "2259759"
  },
  {
    "text": "so in order to listen to those save changes events from e4 you can introduce inherit from a class",
    "start": "2263200",
    "end": "2270160"
  },
  {
    "text": "called save changes intercept save the change interceptor can be registered to the dependency injection",
    "start": "2270160",
    "end": "2276480"
  },
  {
    "text": "uh framework that you are using and hence you can use it or you can inject any dependency that",
    "start": "2276480",
    "end": "2281920"
  },
  {
    "text": "you have in your code so enzyme injecting the mediator in my construct",
    "start": "2281920",
    "end": "2287440"
  },
  {
    "text": "then we can this basically enables us to override the safety changes and the ascent method of save the",
    "start": "2287440",
    "end": "2294320"
  },
  {
    "text": "changes are sync whenever the save changes method is triggered this will enable us to",
    "start": "2294320",
    "end": "2300560"
  },
  {
    "text": "dispatch the domain you can see here that line we are using",
    "start": "2300560",
    "end": "2309200"
  },
  {
    "text": "to find all of the entities in the context that have domain events inside of them",
    "start": "2309200",
    "end": "2315760"
  },
  {
    "text": "then the next step here is looping over those entities and finding the domain event",
    "start": "2315760",
    "end": "2322079"
  },
  {
    "text": "using mediator to publish those domain events",
    "start": "2322079",
    "end": "2327839"
  },
  {
    "text": "one of the things to keep in mind when you have this pattern is the the resiliency what happens if",
    "start": "2328240",
    "end": "2334800"
  },
  {
    "text": "you send an email and you fail to save the database the changes or you save the database",
    "start": "2334800",
    "end": "2340079"
  },
  {
    "text": "changes and you fail to send the email that the order of events here is important",
    "start": "2340079",
    "end": "2346240"
  },
  {
    "text": "usually the next step when i i work with this pattern is i separate those behaviors into two",
    "start": "2346240",
    "end": "2352400"
  },
  {
    "text": "separate processes and the user pattern from the store and forward or it's also called an outbox pattern where instead of",
    "start": "2352400",
    "end": "2359359"
  },
  {
    "text": "immediately publishing the domain events i save the domain events into a table in the database",
    "start": "2359359",
    "end": "2365119"
  },
  {
    "text": "and then i have another process that read those events and basically process them or publish",
    "start": "2365119",
    "end": "2370400"
  },
  {
    "text": "them to a service bus to be by the consumers we will not do that today but this is",
    "start": "2370400",
    "end": "2376400"
  },
  {
    "text": "something to keep in mind when you work or start introducing the main events",
    "start": "2376400",
    "end": "2382079"
  },
  {
    "text": "since we have introduced a new class we need to make sure that that class is registered in our di container and",
    "start": "2382079",
    "end": "2388880"
  },
  {
    "text": "uh the the domain event dispatcher can be registered as a scope",
    "start": "2388880",
    "end": "2393920"
  },
  {
    "text": "service and when we add the db context from af core we can use the overload",
    "start": "2393920",
    "end": "2399359"
  },
  {
    "text": "that accepts a service provider which means we can call a method called get service",
    "start": "2399359",
    "end": "2405440"
  },
  {
    "text": "and that will mean that the domain event dispatcher will be resolved from the di and not only the the classes also all of",
    "start": "2405440",
    "end": "2411599"
  },
  {
    "text": "the dependencies in that class now we have everything in place",
    "start": "2411599",
    "end": "2417040"
  },
  {
    "text": "we should be able to run this i don't have really test covering all of those areas but i just want to make sure that the behavior",
    "start": "2417040",
    "end": "2423040"
  },
  {
    "text": "hasn't been proposed ideally you should start having more tests like this for domain event dispatcher",
    "start": "2423040",
    "end": "2429599"
  },
  {
    "text": "and the actual domain event the actual event handler i should say",
    "start": "2429599",
    "end": "2434800"
  },
  {
    "text": "and since we have introduced the domain event handler i can remove this whole logic of sending the email",
    "start": "2434800",
    "end": "2441040"
  },
  {
    "text": "from my handler because it's no longer required here i can remove this email sender it's now handled via",
    "start": "2441040",
    "end": "2451280"
  },
  {
    "text": "and handler so my lunch is much simpler right now and even my test will be simpler because",
    "start": "2451359",
    "end": "2458079"
  },
  {
    "text": "yet another dependency removed running the test and",
    "start": "2458079",
    "end": "2464400"
  },
  {
    "text": "everything",
    "start": "2464839",
    "end": "2467839"
  },
  {
    "text": "great nothing is broken so let's recap what we have done because",
    "start": "2471119",
    "end": "2476319"
  },
  {
    "text": "i know this is a little bit involved we have added the list of domain events list using the",
    "start": "2476319",
    "end": "2481839"
  },
  {
    "text": "save the changes interceptor from ef45 it changes find using the change of",
    "start": "2481839",
    "end": "2488480"
  },
  {
    "text": "tracker to find all of the entities that has domain events in them publish them to the mediator having the",
    "start": "2488480",
    "end": "2494400"
  },
  {
    "text": "event handlers to handle those domain events so far all of the refactorings that we",
    "start": "2494400",
    "end": "2499760"
  },
  {
    "text": "have been doing will trigger the based on smells in the code like having it",
    "start": "2499760",
    "end": "2505119"
  },
  {
    "text": "with a single parameter or having a behavior that is stopping the consumers",
    "start": "2505119",
    "end": "2511200"
  },
  {
    "text": "from constructing an entity in the right variant basically but this is not always",
    "start": "2511200",
    "end": "2518000"
  },
  {
    "text": "the case when you work with domain driven design because one of the important things with ddd is",
    "start": "2518000",
    "end": "2523359"
  },
  {
    "text": "having a continuous collaboration with the business experts we should try to make your domain model",
    "start": "2523359",
    "end": "2529599"
  },
  {
    "text": "have use the same language used by the business expert and this is where they the epiquitas",
    "start": "2529599",
    "end": "2535520"
  },
  {
    "text": "language part becomes really important so some of the reflections will not be triggered from",
    "start": "2535520",
    "end": "2541200"
  },
  {
    "text": "the coded smiles it will be triggered from the conversations that happens with the main experts",
    "start": "2541200",
    "end": "2546319"
  },
  {
    "text": "a simple example within the tactical patterns is let's say we are talking with the",
    "start": "2546319",
    "end": "2552000"
  },
  {
    "text": "business experts and they always use the term i want to show the customer name in the",
    "start": "2552000",
    "end": "2557119"
  },
  {
    "text": "report i want to show the customer name in this particular and we keep",
    "start": "2557119",
    "end": "2562800"
  },
  {
    "text": "using that customer name all the time but they never go and say",
    "start": "2562800",
    "end": "2567839"
  },
  {
    "text": "i'm sure um they never talk about the customer name in terms of customer first name middle name last",
    "start": "2567839",
    "end": "2573839"
  },
  {
    "text": "name or customer first name last name we always just refer to the customer name so at that point",
    "start": "2573839",
    "end": "2579839"
  },
  {
    "text": "it might be a good idea to start using value objects to represent the same concepts or the",
    "start": "2579839",
    "end": "2586640"
  },
  {
    "text": "same lag or use the same language that the business experts are using so instead of having customer first name",
    "start": "2586640",
    "end": "2593680"
  },
  {
    "text": "last name as a part of my customer class i can refactor that to use a value object value object as a concept means if we",
    "start": "2593680",
    "end": "2600960"
  },
  {
    "text": "have two instances of a value object both instances will be equivalent",
    "start": "2600960",
    "end": "2606400"
  },
  {
    "text": "if all of the properties of the value objects have are equivalent so this is basically",
    "start": "2606400",
    "end": "2612800"
  },
  {
    "text": "lands itself well with the c sharp nine records it's pretty much the exact definition so",
    "start": "2612800",
    "end": "2619599"
  },
  {
    "text": "what we can do instead of using a series name last name we can introduce a record",
    "start": "2619599",
    "end": "2626319"
  },
  {
    "text": "as our value so what we can have here is cnn record",
    "start": "2626319",
    "end": "2634560"
  },
  {
    "text": "there's going to be some uh highlighted alerts here because the plane rider doesn't support c-sharp records fully yet uh so",
    "start": "2634560",
    "end": "2642400"
  },
  {
    "text": "ignore those highlighted errors as we will see when we run the test it will be working fine",
    "start": "2642400",
    "end": "2649119"
  },
  {
    "text": "so now we have pushed created the customer record i can use that customer record in my",
    "start": "2649119",
    "end": "2655440"
  },
  {
    "text": "class and even better as we have done with the subscription i can introduce a constructor and pass",
    "start": "2655440",
    "end": "2661760"
  },
  {
    "text": "that customer name as a parameter of my construct so i will remove those properties and",
    "start": "2661760",
    "end": "2667280"
  },
  {
    "text": "replace them with constructor and privately cells properties so here is my private",
    "start": "2667280",
    "end": "2675280"
  },
  {
    "text": "constructor to be used when you load the data from the database because of ef core limitation with parameterized",
    "start": "2675280",
    "end": "2681200"
  },
  {
    "text": "constructor i can pass the customer name as a parameter of my constructor",
    "start": "2681200",
    "end": "2686640"
  },
  {
    "text": "having my validations here and here is my property it's privately set and can be",
    "start": "2686640",
    "end": "2692880"
  },
  {
    "text": "modified only via methods within my customer because this is part of the behavior",
    "start": "2692880",
    "end": "2700079"
  },
  {
    "text": "now we have introduced the customer name i should update my test to the to use the customer name and the",
    "start": "2700079",
    "end": "2706880"
  },
  {
    "text": "constructor that we have introduced",
    "start": "2706880",
    "end": "2710640"
  },
  {
    "text": "i'll use the wrong constructor",
    "start": "2714319",
    "end": "2719839"
  },
  {
    "text": "the constructor and we can see that the test should be",
    "start": "2728800",
    "end": "2735920"
  },
  {
    "text": "passing right now but actually the code wouldn't compile because we didn't",
    "start": "2735920",
    "end": "2742400"
  },
  {
    "text": "do the configuration of how would we customer name record to be using the",
    "start": "2742400",
    "end": "2749760"
  },
  {
    "text": "same fields in the same table of the database and this is where the core own entities becomes really",
    "start": "2749760",
    "end": "2756480"
  },
  {
    "text": "important and valuable features that we can leverage so instead of directly using",
    "start": "2756480",
    "end": "2761760"
  },
  {
    "text": "the builder here in the fluent api i can go and say phones one not that one",
    "start": "2761760",
    "end": "2770559"
  },
  {
    "text": "so builder that owns one this enables us to introduce a value object or map a",
    "start": "2771839",
    "end": "2777920"
  },
  {
    "text": "particular property and then within that one we can define the properties we then",
    "start": "2777920",
    "end": "2783520"
  },
  {
    "text": "within the this builder is the columns in the same table one thing to",
    "start": "2783520",
    "end": "2789520"
  },
  {
    "text": "keep in mind here is the default naming conventions of own owned entities is the table name underscore the column",
    "start": "2789520",
    "end": "2796480"
  },
  {
    "text": "name so if you are working with the legacy called days which probably you need to use the explicit column name and one of",
    "start": "2796480",
    "end": "2803520"
  },
  {
    "text": "the benefits of using ef quark 5 is now previously it would be of course",
    "start": "2803520",
    "end": "2809440"
  },
  {
    "text": "previous versions the default behavior of all the entities that they were nullable",
    "start": "2809440",
    "end": "2814800"
  },
  {
    "text": "but right now this is a with this navigation method we can define if it's optional or",
    "start": "2814800",
    "end": "2820720"
  },
  {
    "text": "required and also we can define for each column if it's optional required",
    "start": "2820720",
    "end": "2826319"
  },
  {
    "text": "and if you generated migrations or either sql or code migrations from this",
    "start": "2826319",
    "end": "2832560"
  },
  {
    "text": "on empties it would be mapped correctly now the mapping is done",
    "start": "2832560",
    "end": "2837760"
  },
  {
    "text": "if we run the tests it should be passing let's run that",
    "start": "2837760",
    "end": "2845839"
  },
  {
    "text": "amazing that this has passed so let's recap what we have done so far",
    "start": "2850559",
    "end": "2856480"
  },
  {
    "text": "after domain entity we moved away from using the primitive parameters like the string",
    "start": "2856480",
    "end": "2862400"
  },
  {
    "text": "for string first name and string last name to value objects and that enabled us to have a domain",
    "start": "2862400",
    "end": "2869119"
  },
  {
    "text": "model that is using a consistent language and the same language used by the business experts",
    "start": "2869119",
    "end": "2875680"
  },
  {
    "text": "we have also used the owned entities to map those properties to the same columns in the database",
    "start": "2875680",
    "end": "2881760"
  },
  {
    "text": "table and we leveraged the new navigation",
    "start": "2881760",
    "end": "2887040"
  },
  {
    "text": "method from here for the database that those columns or this",
    "start": "2887040",
    "end": "2892720"
  },
  {
    "text": "property is required the next thing that i want to talk about",
    "start": "2892720",
    "end": "2898400"
  },
  {
    "text": "is in my code days you haven't seen any repositories and usually one of the things that you",
    "start": "2898400",
    "end": "2905119"
  },
  {
    "text": "have seen with legacy code basis is repositories all over the place repository",
    "start": "2905119",
    "end": "2910559"
  },
  {
    "text": "empty or generically possible and this is a sample of a repository that you might see in a legacy code base",
    "start": "2910559",
    "end": "2916480"
  },
  {
    "text": "you could have something repositive for a customer where you have git customers get customer by id",
    "start": "2916480",
    "end": "2921839"
  },
  {
    "text": "and save usually these repositories are okay but sometimes they have landmines like",
    "start": "2921839",
    "end": "2927599"
  },
  {
    "text": "this save method because save method here is calling the context saver changes",
    "start": "2927599",
    "end": "2932880"
  },
  {
    "text": "and context saver changes will send all of the changes not only relevant to the customer entity",
    "start": "2932880",
    "end": "2938880"
  },
  {
    "text": "to any entity to the database and this mean if i have a service and that service is",
    "start": "2938880",
    "end": "2945359"
  },
  {
    "text": "consuming multiple repositories at the same time and calling the save method in each repository we might be calling the",
    "start": "2945359",
    "end": "2952000"
  },
  {
    "text": "database multiple times unintentionally so this is something",
    "start": "2952000",
    "end": "2957200"
  },
  {
    "text": "that you should be aware of in in some solutions that i have seen is introducing the unit of work pattern",
    "start": "2957200",
    "end": "2964319"
  },
  {
    "text": "to avoid having saved method in each repository you would have something like this you",
    "start": "2964319",
    "end": "2970640"
  },
  {
    "text": "would have a unit of war the unit of work depends on the subscription context or",
    "start": "2970640",
    "end": "2975680"
  },
  {
    "text": "the dp context in general and then you have a saved method that's calling the context-saving",
    "start": "2975680",
    "end": "2980960"
  },
  {
    "text": "changes behavior as a part of that unit of war that could be a potential solution",
    "start": "2980960",
    "end": "2987839"
  },
  {
    "text": "but in my in my in my mind this solution is introducing unnecessary dependency",
    "start": "2987839",
    "end": "2993760"
  },
  {
    "text": "because the subscription context itself is a concrete class that we are earning and maintaining so",
    "start": "2993760",
    "end": "3000880"
  },
  {
    "text": "instead of introducing yet another unit of work plus we can embrace the subscription context",
    "start": "3000880",
    "end": "3006559"
  },
  {
    "text": "to become our unit of work and that would be the one that would have that save changes commit begin",
    "start": "3006559",
    "end": "3012880"
  },
  {
    "text": "transaction brought back all of those behaviors that we would like to have as a part of the unitable",
    "start": "3012880",
    "end": "3019119"
  },
  {
    "text": "and if we are worried about the the unit testing part we can leverage an interface and we use",
    "start": "3019119",
    "end": "3024720"
  },
  {
    "text": "the interface as the dependencies that we inject to all of the consumer classes",
    "start": "3024720",
    "end": "3032640"
  },
  {
    "text": "the queries where is to read data like getting the customer or getting the subscription and so on",
    "start": "3033839",
    "end": "3040720"
  },
  {
    "text": "the the queries in general one of the things that i have seen when you use the repository pattern is you end up with those very big",
    "start": "3040720",
    "end": "3047520"
  },
  {
    "text": "repositories that have get customer by first name customer by last name customer by first name",
    "start": "3047520",
    "end": "3054880"
  },
  {
    "text": "there are other solutions out there that could help with improving and solving those problems",
    "start": "3061280",
    "end": "3067839"
  },
  {
    "text": "that unfortunately you wouldn't have enough time to go over each of them but i'll give you the name of the pattern so you can",
    "start": "3067839",
    "end": "3073599"
  },
  {
    "text": "look them up after the talk and i'm happy to show you examples of them so the three patterns that i think would",
    "start": "3073599",
    "end": "3079920"
  },
  {
    "text": "help you having a solution and avoid that big repository class is using something like the query",
    "start": "3079920",
    "end": "3086000"
  },
  {
    "text": "classes or specification pattern or the extensions with extension methods those pattern will try",
    "start": "3086000",
    "end": "3092559"
  },
  {
    "text": "to make like a specific queries or a very usable queries encapsulated and you can use them in multiple places",
    "start": "3092559",
    "end": "3099359"
  },
  {
    "text": "but at the same time we didn't end up with very very big repositories",
    "start": "3099359",
    "end": "3105839"
  },
  {
    "text": "there are a lot of samples out there about those patterns fortunately we will not be able to go through all of them today",
    "start": "3105839",
    "end": "3113599"
  },
  {
    "text": "the next thing that i want to talk about is the the entity identifier as you have seen",
    "start": "3113599",
    "end": "3120960"
  },
  {
    "text": "in my codebase i am inheriting it from a grassfull entity and in your code you might have a",
    "start": "3120960",
    "end": "3127599"
  },
  {
    "text": "different type you might not have a geoid if you are working with the legacy code because it might be integer or sometimes i have seen some entities",
    "start": "3127599",
    "end": "3135680"
  },
  {
    "text": "with integer and the newer indices are with gid so we you could make that entity based",
    "start": "3135680",
    "end": "3142319"
  },
  {
    "text": "entity class a generic clause that accepts any type of identifier",
    "start": "3142319",
    "end": "3148480"
  },
  {
    "text": "and even better move away from having a specific primitive type or like integer and use",
    "start": "3148480",
    "end": "3155440"
  },
  {
    "text": "a strongly typed identifier like using a value object represents the identifier of your entity so for",
    "start": "3155440",
    "end": "3162240"
  },
  {
    "text": "customer you could have a customer id subscription you could have a subscription id the good thing with using those strongly",
    "start": "3162240",
    "end": "3169119"
  },
  {
    "text": "typed identifiers is first we can introduce validations in the constructor of that",
    "start": "3169119",
    "end": "3174640"
  },
  {
    "text": "value type so if i have a guid i can ensure that the geo id is not an mtg id so",
    "start": "3174640",
    "end": "3182400"
  },
  {
    "text": "adding a validation you never have a file other thing is if you have a method",
    "start": "3182400",
    "end": "3187920"
  },
  {
    "text": "that accepts multiple identifiers you wouldn't have the mistake of passing",
    "start": "3187920",
    "end": "3193040"
  },
  {
    "text": "the geo id of the product to be the idea of the customer because it's a strongly typed",
    "start": "3193040",
    "end": "3198559"
  },
  {
    "text": "language and we can leverage that feature when we are building our code base finally if you have a legacy code",
    "start": "3198559",
    "end": "3205280"
  },
  {
    "text": "bait and you're refactoring from let's say integer to guid you wouldn't need to update your whole code base",
    "start": "3205280",
    "end": "3212079"
  },
  {
    "text": "to uh move from integer to grid because you could basically be using that strongly types identifier so",
    "start": "3212079",
    "end": "3220480"
  },
  {
    "text": "behind",
    "start": "3220720",
    "end": "3223200"
  },
  {
    "text": "so that's something to keep in mind you might not be able to do the positive when you are effecting your legacy",
    "start": "3229040",
    "end": "3234319"
  },
  {
    "text": "legacy called base but it's something to keep in mind and you should be aiming towards as you progress with your",
    "start": "3234319",
    "end": "3239440"
  },
  {
    "text": "improvements uh that's all what i wanted to cover today",
    "start": "3239440",
    "end": "3244800"
  },
  {
    "text": "uh i will be looking for the questions over the slacking channel uh if you have any questions please put",
    "start": "3244800",
    "end": "3250319"
  },
  {
    "text": "them there i will also share the slides as well as a sample code that we have seen today",
    "start": "3250319",
    "end": "3256000"
  },
  {
    "text": "uh in the slack channel and since uh thanks i want to thank all of you and microsoft australia for sharing some",
    "start": "3256000",
    "end": "3262319"
  },
  {
    "text": "who will swag with you so um those are the first link is a link to join a news",
    "start": "3262319",
    "end": "3268880"
  },
  {
    "text": "with a newsletter and it's has a lot of valuable information if you want to grab the coolest swag you",
    "start": "3268880",
    "end": "3275359"
  },
  {
    "text": "can go to that link of from microsoft and you can use the code available here to in your swag it",
    "start": "3275359",
    "end": "3283119"
  },
  {
    "text": "just uh it's going to be for only the first four entrants so not everyone will get the",
    "start": "3283119",
    "end": "3289040"
  },
  {
    "text": "swag but hopefully one for you will get that sweat um thanks again for your time i hope you",
    "start": "3289040",
    "end": "3296480"
  },
  {
    "text": "enjoyed the talk and uh yeah i i hope you enjoyed the rest of the conference today",
    "start": "3296480",
    "end": "3302160"
  },
  {
    "text": "thanks a lot",
    "start": "3302160",
    "end": "3307838"
  },
  {
    "text": "you",
    "start": "3312000",
    "end": "3314079"
  }
]