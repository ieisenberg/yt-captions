[
  {
    "text": "I guess we're ready to start right um in the back ready okay good morning everyone",
    "start": "40",
    "end": "9080"
  },
  {
    "text": "yeah nice to see you all um welcome to my session about the secret unit testing",
    "start": "9080",
    "end": "15639"
  },
  {
    "text": "tools no one has ever told you about my name is DW helper I'm a consultant and a",
    "start": "15639",
    "end": "22600"
  },
  {
    "text": "software architect I get to write a lot of code uh usually in uh C++ or net Java",
    "start": "22600",
    "end": "30679"
  },
  {
    "text": "from time to time I do a little uh client work but don't ask me any",
    "start": "30679",
    "end": "35920"
  },
  {
    "text": "question about that and I also mentor and teach developers about how to write",
    "start": "35920",
    "end": "42000"
  },
  {
    "text": "better code what we refer to as engineering practices unit testing clean",
    "start": "42000",
    "end": "47480"
  },
  {
    "text": "code TD design patterns you name it uh I have been doing that for quite some time",
    "start": "47480",
    "end": "52840"
  },
  {
    "text": "now and I also have a few plural side courses anyone here is a C++ developer",
    "start": "52840",
    "end": "61920"
  },
  {
    "text": "well I have two courses on unit testing in C++ and mocking in C++ you want my want want to check them out also another",
    "start": "62000",
    "end": "70280"
  },
  {
    "text": "course in an related topic AWS Lambda but that's me and I have a Blog at help",
    "start": "70280",
    "end": "76360"
  },
  {
    "text": "code.com where I write about anything I find interesting usually software related and the Twitter andelle where",
    "start": "76360",
    "end": "83040"
  },
  {
    "text": "you can reach me or tweet about the session or whatever you want to do with Twitter now that's me what about you who",
    "start": "83040",
    "end": "91040"
  },
  {
    "text": "here write code for living developers okay so all the room C++",
    "start": "91040",
    "end": "98119"
  },
  {
    "text": "developers I saw yeah good for you net developers okay most of the examples",
    "start": "98119",
    "end": "104640"
  },
  {
    "text": "will be in net but the patterns and Tool apply to all three of those at least",
    "start": "104640",
    "end": "110880"
  },
  {
    "text": "Java developers okay I'll give you a few tools as well",
    "start": "110880",
    "end": "118159"
  },
  {
    "text": "and I don't know why you came to this session what you want to get out of it",
    "start": "118159",
    "end": "123560"
  },
  {
    "text": "but I can tell you the reason I'm talking about tools because basically I find it strange to talk about Tools in",
    "start": "123560",
    "end": "130440"
  },
  {
    "text": "any session because we're developers we can probably handle right code with the text editor",
    "start": "130440",
    "end": "137440"
  },
  {
    "text": "and a lot of Goodwill right uh but in the unit testing area I found out that",
    "start": "137440",
    "end": "144239"
  },
  {
    "text": "you need something to help you some additional help and the reason being is because I failed with unit testing",
    "start": "144239",
    "end": "151480"
  },
  {
    "text": "multiple times I've tried writing unit test for my code uh at least three times and failed",
    "start": "151480",
    "end": "158160"
  },
  {
    "text": "miserably and each and every time I was sure I will get it right this time and each and every time in the end I ended",
    "start": "158160",
    "end": "165159"
  },
  {
    "text": "up deleting all of my test and declaring unit testing as a bad idea and luckily",
    "start": "165159",
    "end": "170360"
  },
  {
    "text": "for me somewhere along the way I had I found some very bright individuals who",
    "start": "170360",
    "end": "176879"
  },
  {
    "text": "taught me the things I was missing in know in order to write good unit test",
    "start": "176879",
    "end": "182120"
  },
  {
    "text": "and that shouldn't be this way because unit testing is not rocket science pretty",
    "start": "182120",
    "end": "187720"
  },
  {
    "text": "easy it's writing code right and everybody here know how to write code and yet a lot of developers don't manage",
    "start": "187720",
    "end": "194319"
  },
  {
    "text": "to write good unit tests and there's a good reason for that and the reason is",
    "start": "194319",
    "end": "200159"
  },
  {
    "text": "that there's not a lot of good guidance in the unit testing world you can",
    "start": "200159",
    "end": "205480"
  },
  {
    "text": "probably find a blog post telling you how to write a unit test using your unit testing framework of choice but getting",
    "start": "205480",
    "end": "211239"
  },
  {
    "text": "from there to a thousand test that actually run all every commit doesn't",
    "start": "211239",
    "end": "216840"
  },
  {
    "text": "fail just because it change something trivial in your code it's a bit harder who writes unitest as part of this code",
    "start": "216840",
    "end": "225080"
  },
  {
    "text": "okay so you might agree or disagree but we'll see and there are a bunch of tools",
    "start": "225080",
    "end": "231360"
  },
  {
    "text": "that no one talks about and this is the reason we have this session but we'll start from the bare background the tools",
    "start": "231360",
    "end": "237319"
  },
  {
    "text": "everybody knows about right everybody knows about this tool you might recognize it as a unit",
    "start": "237319",
    "end": "245360"
  },
  {
    "text": "testing framework right this is n unit those of you in the net space probably",
    "start": "245360",
    "end": "250439"
  },
  {
    "text": "can recognize n unit and actually it's two tools because I have here a unit testing framework and",
    "start": "250439",
    "end": "257079"
  },
  {
    "text": "a mocking framework because if we look up here okay let's do this like",
    "start": "257079",
    "end": "265560"
  },
  {
    "text": "so this is the first thing the first capability the unit testing framework",
    "start": "265560",
    "end": "271440"
  },
  {
    "text": "will give me the ability to Mark a bunch of random methods as a test right you",
    "start": "271440",
    "end": "277320"
  },
  {
    "text": "put something on top and it's a test from now and the other thing I get out of my units and framework is this guy in",
    "start": "277320",
    "end": "284039"
  },
  {
    "text": "the botom called the assert and this is about it I won't get anything",
    "start": "284039",
    "end": "289280"
  },
  {
    "text": "more and also I have here a mocking framework called fake it easy uh who here writes unit test",
    "start": "289280",
    "end": "297240"
  },
  {
    "text": "without a mocking framework it's almost impossible right the idea behind mocking framework",
    "start": "297240",
    "end": "304320"
  },
  {
    "text": "is very simple when you think about it the idea is that we need to isolate the",
    "start": "304320",
    "end": "309600"
  },
  {
    "text": "test from any external dependencies such as a database or additional services and",
    "start": "309600",
    "end": "314960"
  },
  {
    "text": "so we use this tool to create a class essentially that does absolutely nothing",
    "start": "314960",
    "end": "320919"
  },
  {
    "text": "but look exactly like the class I want to use so in this example I have a repository which I don't want to run as",
    "start": "320919",
    "end": "327960"
  },
  {
    "text": "part of my test because I don't want to call an actual database it will take too long and I need to fill it with data",
    "start": "327960",
    "end": "334280"
  },
  {
    "text": "which will change from test to test and in a unit test I want to extract remove",
    "start": "334280",
    "end": "339919"
  },
  {
    "text": "that dependency not run it and I do it by creating a fake object and that fake",
    "start": "339919",
    "end": "346400"
  },
  {
    "text": "object does absolutely nothing I can call any method there well as long as I follow several guidelines we change from",
    "start": "346400",
    "end": "354160"
  },
  {
    "text": "mocking framework to mocking framework and I get a reposit a repository does absolutely nothing nothing I'll create",
    "start": "354160",
    "end": "361160"
  },
  {
    "text": "two products and I'll tell that repository that dumb object to return",
    "start": "361160",
    "end": "367280"
  },
  {
    "text": "each of those two instances when called with a specific argument and that's it",
    "start": "367280",
    "end": "372680"
  },
  {
    "text": "so essentially I mimicked the database in a very specific part of its functionality in order to test something",
    "start": "372680",
    "end": "379240"
  },
  {
    "text": "completely different without that repository and basically what this test",
    "start": "379240",
    "end": "385240"
  },
  {
    "text": "does is I'm testing a shopping cart and I want to see what happens when I add two items that I know about from the",
    "start": "385240",
    "end": "392520"
  },
  {
    "text": "database and I want to check that if item a cost 100 and Item B cost 200 in",
    "start": "392520",
    "end": "399000"
  },
  {
    "text": "your currency of choice then the total there will be 300 and this is a very",
    "start": "399000",
    "end": "404560"
  },
  {
    "text": "simple unit test and if we go somewhere else not in",
    "start": "404560",
    "end": "411440"
  },
  {
    "text": "net we see the exact same picture anyone recognize this unit testing framework",
    "start": "411440",
    "end": "419960"
  },
  {
    "text": "anyone recognize the actual language a Java right because the curly",
    "start": "419960",
    "end": "425240"
  },
  {
    "text": "break is in the wrong place right yeah this is actually the the",
    "start": "425240",
    "end": "433280"
  },
  {
    "text": "grandfather of them all this is junit the first actual commercial widely used unit testing framework and it looks",
    "start": "433280",
    "end": "440440"
  },
  {
    "text": "exactly like the previous example the code is the same I have something to Mark the method as a test they call it",
    "start": "440440",
    "end": "447879"
  },
  {
    "text": "annotations in Java but it's the same as attributes in net and I have an assert",
    "start": "447879",
    "end": "453039"
  },
  {
    "text": "over here and I have a mockin framework and called moito which I Ed to create",
    "start": "453039",
    "end": "458240"
  },
  {
    "text": "the same effect and it's the same test essentially World by word so the good news is that if you know how to use one",
    "start": "458240",
    "end": "464360"
  },
  {
    "text": "unit in framework you can probably use them all including in C++ this is",
    "start": "464360",
    "end": "470759"
  },
  {
    "text": "C++ looks exactly the same right Mark the test here MOS but other than that",
    "start": "470759",
    "end": "476720"
  },
  {
    "text": "you mark the test create a effect repository set Behavior Asser and all of",
    "start": "476720",
    "end": "482000"
  },
  {
    "text": "those unit testing framework are essentially derivative of junit or as we name them X unit testing",
    "start": "482000",
    "end": "489280"
  },
  {
    "text": "framework not to be confused with xunit which is a unit testing framework that follow X unit testing framework",
    "start": "489280",
    "end": "495879"
  },
  {
    "text": "guidelines and all of them look exactly the same behave exactly the same there are some small changes but if you can",
    "start": "495879",
    "end": "502360"
  },
  {
    "text": "read one you can read them all and this idea hasn't changed much since 2003",
    "start": "502360",
    "end": "508319"
  },
  {
    "text": "we're talking 15 years ago and our code has changed tremendously",
    "start": "508319",
    "end": "513640"
  },
  {
    "text": "since 2003 and I find it to be a problem",
    "start": "513640",
    "end": "518919"
  },
  {
    "text": "because if you look at a unit Tes in framework such as this badly named",
    "start": "518919",
    "end": "524640"
  },
  {
    "text": "because my test is probably not a good name for your test although it is my test essentially it's not it has",
    "start": "524640",
    "end": "531839"
  },
  {
    "text": "absolutely nothing to do with unit test this is a method it has code inside which I can run when I want to and I so",
    "start": "531839",
    "end": "539880"
  },
  {
    "text": "developers use unites in framework to debug their code they just write a bunch of code inside put a breakpoint and",
    "start": "539880",
    "end": "544959"
  },
  {
    "text": "debug it and it starts fine because the unit testing framework give me absolutely no guidelines no warnings no",
    "start": "544959",
    "end": "552040"
  },
  {
    "text": "nothing about what I write between those squirly bracket I can put whatever I want there up to and include in the",
    "start": "552040",
    "end": "558760"
  },
  {
    "text": "kitchen sink I can write a huge mess there and the unit testing framework will not care it will just run the",
    "start": "558760",
    "end": "565640"
  },
  {
    "text": "method and that is a problem because when starting with unit test I used to",
    "start": "565640",
    "end": "570959"
  },
  {
    "text": "write Cod there a lot of code there following the same guideline I use in order to write good production code but",
    "start": "570959",
    "end": "578800"
  },
  {
    "text": "unfortunately those are not the same guidelines you need when you write unit test there's a slight difference between",
    "start": "578800",
    "end": "585079"
  },
  {
    "text": "those because a good unit test doesn't need to follow the same rules that production code need to follow a it's",
    "start": "585079",
    "end": "592240"
  },
  {
    "text": "simpler and it has a completely different objective first of all when",
    "start": "592240",
    "end": "597320"
  },
  {
    "text": "writing unit test the first thing I want to be able to do is write it as quickly as I can right if anyone here ever had",
    "start": "597320",
    "end": "604160"
  },
  {
    "text": "to ask his manager whether or not to write unit test you know the answer don't right because it takes additional",
    "start": "604160",
    "end": "609560"
  },
  {
    "text": "time simple calculation writing just code and wrri in code plus unit test takes",
    "start": "609560",
    "end": "615040"
  },
  {
    "text": "more and so let's not do that it takes more time so you want to be able to",
    "start": "615040",
    "end": "620560"
  },
  {
    "text": "write your unit test as quickly as you can the second thing you want from unit test is to be",
    "start": "620560",
    "end": "626519"
  },
  {
    "text": "readable because those unit test when you initially write them they will probably pass but they will fail if",
    "start": "626519",
    "end": "634279"
  },
  {
    "text": "they'll fail in a week from now in a month from now or you'll write your code",
    "start": "634279",
    "end": "639320"
  },
  {
    "text": "minding your own business and someone else's test will fail and you want your test to be as readable as possible",
    "start": "639320",
    "end": "645519"
  },
  {
    "text": "because you want to be able to understand why that test has failed so unit test need to be readable and",
    "start": "645519",
    "end": "651959"
  },
  {
    "text": "readability in unit test Trump almost anything else you can think about because if the test is readable you're",
    "start": "651959",
    "end": "658560"
  },
  {
    "text": "halfway there unfortunately unit in fror can't measure readability so it's up to you you need",
    "start": "658560",
    "end": "665399"
  },
  {
    "text": "to know how to write readable code and it's not necessarily the same as writing readable production code and",
    "start": "665399",
    "end": "671959"
  },
  {
    "text": "finally I don't want to maintain those tests I don't want to have to update my",
    "start": "671959",
    "end": "677880"
  },
  {
    "text": "test each time I change something in my code I just want to find the test failing when a bug was introduced to the",
    "start": "677880",
    "end": "685000"
  },
  {
    "text": "system and not before or a requirement change but usually when we write unit",
    "start": "685000",
    "end": "690480"
  },
  {
    "text": "test because we know the code we usually write the unit test for my code right and then I want to be",
    "start": "690480",
    "end": "697399"
  },
  {
    "text": "able to keep on changing my code refractor it change the method change",
    "start": "697399",
    "end": "702639"
  },
  {
    "text": "the classes change the method signature add the parameter to my Constructor",
    "start": "702639",
    "end": "707720"
  },
  {
    "text": "without needing to go over a 100 tests and rename them or change them or update them each and every time because I",
    "start": "707720",
    "end": "714880"
  },
  {
    "text": "guarantee that if you'll have to do that you'll stop using unit test by the third",
    "start": "714880",
    "end": "720160"
  },
  {
    "text": "time you need to do that because it's too much of an assle it takes too long so as I said I have been bashing",
    "start": "720160",
    "end": "728279"
  },
  {
    "text": "unit test in framework for the last 10 minutes uh but some of you who write",
    "start": "728279",
    "end": "734920"
  },
  {
    "text": "unit test probably have heard about triaa AR range act set right whoever who heard about",
    "start": "734920",
    "end": "741680"
  },
  {
    "text": "triaa quite a few and that's good because the first time I did this session there were like two",
    "start": "741680",
    "end": "747880"
  },
  {
    "text": "fingers what is triaa well that's a guideline the first of not so many",
    "start": "747880",
    "end": "753360"
  },
  {
    "text": "guidelines we have in unit test which say which says that each test should have three parts in that specific order",
    "start": "753360",
    "end": "760760"
  },
  {
    "text": "first is the arrange part where we set everything up in order to set up my",
    "start": "760760",
    "end": "766000"
  },
  {
    "text": "system my scenario create all the new instances and set up my mock my mocks and whatever",
    "start": "766000",
    "end": "773000"
  },
  {
    "text": "else I need to do then I have the play button of the test some method or an",
    "start": "773000",
    "end": "778880"
  },
  {
    "text": "event or a message that will trigger the scenario I'm trying to test and finally",
    "start": "778880",
    "end": "786040"
  },
  {
    "text": "an assert which usually is called assert uh in which I test whatever happened to",
    "start": "786040",
    "end": "791880"
  },
  {
    "text": "my system and if I follow this specific very simple guideline my tests will be",
    "start": "791880",
    "end": "798600"
  },
  {
    "text": "readable easier to maintain and so on and so on this is partly true because good developer will find ways to mess",
    "start": "798600",
    "end": "805279"
  },
  {
    "text": "this up and no one enforced me to use arrange act Asser but I am going to use that in",
    "start": "805279",
    "end": "812880"
  },
  {
    "text": "order to explain in each part how we can how I can improve this test by using",
    "start": "812880",
    "end": "819760"
  },
  {
    "text": "those special tools no one talks about we'll start with arrange setting up my method the problem when you start",
    "start": "819760",
    "end": "825920"
  },
  {
    "text": "writing a lot of unit test you notice something you're duplicating a lot of code anyone who wrote free unit test has",
    "start": "825920",
    "end": "832800"
  },
  {
    "text": "probably no states that and this is phys can cause you physical pain a developer",
    "start": "832800",
    "end": "838440"
  },
  {
    "text": "who writes the same codwise start to feel bad with himself you should CU you shouldn't duplicate your code uh however",
    "start": "838440",
    "end": "846639"
  },
  {
    "text": "in unit test you can because as I said different rules for unit test than production code you can duplicate your",
    "start": "846639",
    "end": "852639"
  },
  {
    "text": "code but you should avoid as much as you can because if you need to change something in this method or the 100",
    "start": "852639",
    "end": "859920"
  },
  {
    "text": "methods that test the same specific area then you'll have a problem because let's look at this test this is uh an old",
    "start": "859920",
    "end": "866600"
  },
  {
    "text": "project of mine uh stuck over flow Notifier I wanted to get notification whenever I get my reputation in stock",
    "start": "866600",
    "end": "874440"
  },
  {
    "text": "overflow uh increased or decreased and so I wrote a small program for that this",
    "start": "874440",
    "end": "879720"
  },
  {
    "text": "is actually the Windows phone version which you might use if you have a Windows phone",
    "start": "879720",
    "end": "887120"
  },
  {
    "text": "and and if you do well good for you and basically what I do I'll create two",
    "start": "887120",
    "end": "892240"
  },
  {
    "text": "users this is the same user over time with the same reputation and the user has a URL an ID and name and so on it",
    "start": "892240",
    "end": "899839"
  },
  {
    "text": "was like a 20 property kind of data class I'll create the service repository",
    "start": "899839",
    "end": "906199"
  },
  {
    "text": "which used to call stock overflow but it's a fake one and I want him to return",
    "start": "906199",
    "end": "911399"
  },
  {
    "text": "the user details uh that just um initialized and",
    "start": "911399",
    "end": "916880"
  },
  {
    "text": "then I'll call load user twice this was done using a timer in the original",
    "start": "916880",
    "end": "922199"
  },
  {
    "text": "program and I want to make sure that in the end the color of the numbers that",
    "start": "922199",
    "end": "927839"
  },
  {
    "text": "show my reputation are still white because the reputation haven't changed so obviously the next test I will write",
    "start": "927839",
    "end": "934959"
  },
  {
    "text": "the reputation will there increase or decrease or something will happen over time and it's the same test initially",
    "start": "934959",
    "end": "942639"
  },
  {
    "text": "the same test I wrote here with the different parameters and it's a pain to write the same par the same test over",
    "start": "942639",
    "end": "948360"
  },
  {
    "text": "and over and over again and I don't like that now if you go and Google for ways",
    "start": "948360",
    "end": "954560"
  },
  {
    "text": "to reduce this duplication you'll probably learn about a specific ific",
    "start": "954560",
    "end": "960040"
  },
  {
    "text": "method called test setup test initialized depends on your unit testing test framework of choice essentially I",
    "start": "960040",
    "end": "967639"
  },
  {
    "text": "can create a new method this one that will run before each test and in that",
    "start": "967639",
    "end": "974959"
  },
  {
    "text": "method I can write all of the initialization all of the arrange and then my test become very small and",
    "start": "974959",
    "end": "981480"
  },
  {
    "text": "concise and very nice easy on the eyes basically and there are a lot of",
    "start": "981480",
    "end": "987519"
  },
  {
    "text": "consultants and book that will show show you to do exactly that I disagree I",
    "start": "987519",
    "end": "992839"
  },
  {
    "text": "think that's a bad idea that's a bad practice that's one of the things that the unit testing framework shouldn't have my personal opinion and the reason",
    "start": "992839",
    "end": "1000880"
  },
  {
    "text": "is that I'm missing something here right these methods are written inside the class and in order for them to work",
    "start": "1000880",
    "end": "1007360"
  },
  {
    "text": "together I'll need to add a field to that class that will be shared between",
    "start": "1007360",
    "end": "1012880"
  },
  {
    "text": "those methods they initialize and all the tests now depending on your unit testing framework of choice it's also",
    "start": "1012880",
    "end": "1019199"
  },
  {
    "text": "means that you're using the same instance of that field which means that one test can't affect a different test",
    "start": "1019199",
    "end": "1027438"
  },
  {
    "text": "and then you get those weird things when your test will fail in the server or in someone else's machine and you'll run it",
    "start": "1027439",
    "end": "1034600"
  },
  {
    "text": "and it will pass and then you go well it works on my machine but it doesn't",
    "start": "1034600",
    "end": "1039640"
  },
  {
    "text": "matter and then what you left doing is running all the test and then seeing if",
    "start": "1039640",
    "end": "1045438"
  },
  {
    "text": "the test fails and then just running half of them and you play B research with your test until you find which test",
    "start": "1045439",
    "end": "1051760"
  },
  {
    "text": "affect which test and this can take a few hours and it's a pain to do that you don't want share the logic between your",
    "start": "1051760",
    "end": "1059640"
  },
  {
    "text": "test you don't need State between your tests so that's a bad idea the other bad idea is that once the test failed and",
    "start": "1059640",
    "end": "1066440"
  },
  {
    "text": "you actually reproduce that failure on your machine you end up with having your",
    "start": "1066440",
    "end": "1071679"
  },
  {
    "text": "logic into separate places the initialization and the test and then you",
    "start": "1071679",
    "end": "1077159"
  },
  {
    "text": "play with your mouse SC because it go all the way up where you usually write your initialization all the way down to",
    "start": "1077159",
    "end": "1082440"
  },
  {
    "text": "your test and try to understand how one affects the other and if you working",
    "start": "1082440",
    "end": "1087960"
  },
  {
    "text": "with extremely talented programmers you might end up with this this is actual code a Col of mine WR has written as you",
    "start": "1087960",
    "end": "1095679"
  },
  {
    "text": "can tell we have five fields at this time we have an initialization method as",
    "start": "1095679",
    "end": "1101200"
  },
  {
    "text": "long as possibly can that does a bunch of things and then the test come and you",
    "start": "1101200",
    "end": "1106520"
  },
  {
    "text": "have no idea what you're using and what you need and how the hell did I get to",
    "start": "1106520",
    "end": "1112159"
  },
  {
    "text": "this position we'll handle this later but there are ways to reduce this",
    "start": "1112159",
    "end": "1118720"
  },
  {
    "text": "duplication without resulting with two different methods huge methods by the way you know how many test we' had in",
    "start": "1118720",
    "end": "1126039"
  },
  {
    "text": "the end for that specific area of the code that we needed this big",
    "start": "1126039",
    "end": "1131120"
  },
  {
    "text": "initialization can you guess the answer is one so we ended up paying for a huge",
    "start": "1131120",
    "end": "1138360"
  },
  {
    "text": "unre code for something we didn't really need so what can we do the first idea is",
    "start": "1138360",
    "end": "1146440"
  },
  {
    "text": "use Factory method extract to Method I'll take the creation of that user and put it in the method that method only",
    "start": "1146440",
    "end": "1153159"
  },
  {
    "text": "care about my reputation because that's what I'm testing and I'm done right it's",
    "start": "1153159",
    "end": "1159159"
  },
  {
    "text": "as simple as that and it will work unfortunately in the next",
    "start": "1159159",
    "end": "1164400"
  },
  {
    "text": "test I might discover something which is not everybody understand what to extract",
    "start": "1164400",
    "end": "1171679"
  },
  {
    "text": "your method and what's not as a consultant I get to come to a company",
    "start": "1171679",
    "end": "1176720"
  },
  {
    "text": "tell them all my bright ideas go away come back after a week or a month and with a one client I explained how they",
    "start": "1176720",
    "end": "1183360"
  },
  {
    "text": "should extract some of the initialization into methods went away came back and saw something like this",
    "start": "1183360",
    "end": "1190440"
  },
  {
    "text": "and basically this is not fun they had exactly three methods each of them with",
    "start": "1190440",
    "end": "1198080"
  },
  {
    "text": "between 10 to 12 parameters the first one was called initialize the system the second",
    "start": "1198080",
    "end": "1203840"
  },
  {
    "text": "was called test the system and the last one was called check that everything is okay because they overe extracted",
    "start": "1203840",
    "end": "1210640"
  },
  {
    "text": "everything because that's what we do in production code you know duplicate code you put inside methods and base classes",
    "start": "1210640",
    "end": "1215799"
  },
  {
    "text": "and whatever and it was impossible to understand what the test actually does because they extracted the important",
    "start": "1215799",
    "end": "1221159"
  },
  {
    "text": "stuff the things I care about in the test so that's not a good idea the second problem being that although I",
    "start": "1221159",
    "end": "1227440"
  },
  {
    "text": "needed only the rep ation in one uh test in the next test I needed to change my",
    "start": "1227440",
    "end": "1234480"
  },
  {
    "text": "image as well and then I added up with the number of permutation of parameters",
    "start": "1234480",
    "end": "1240480"
  },
  {
    "text": "in that class of factory methods and this is pain for very painful very hard",
    "start": "1240480",
    "end": "1245760"
  },
  {
    "text": "to maintain if you make a small change you need to change all those Factory methods and you don't want to do that so",
    "start": "1245760",
    "end": "1251240"
  },
  {
    "text": "if you get to this point you have to consider other Alternatives and the first of which being the Builder pattern",
    "start": "1251240",
    "end": "1258440"
  },
  {
    "text": "the this is one of the design patterns from the original design pattern books and the Builder patterns is used in",
    "start": "1258440",
    "end": "1264919"
  },
  {
    "text": "order to uh initialize an object in which I don't care about most of its",
    "start": "1264919",
    "end": "1271320"
  },
  {
    "text": "properties and I only care about some of them and I do that by initializing the all the properties I",
    "start": "1271320",
    "end": "1279360"
  },
  {
    "text": "need in the real code I had 20 of those in the Constructor I'll just put valid values inside and that's it and I have a",
    "start": "1279360",
    "end": "1286880"
  },
  {
    "text": "method called build which return the object I need so far it's very simple",
    "start": "1286880",
    "end": "1292279"
  },
  {
    "text": "now for every parameter I want to update or change in my test I'll create a",
    "start": "1292279",
    "end": "1297520"
  },
  {
    "text": "method usually called WID something withd name will change only the name remember when I'll call build it will",
    "start": "1297520",
    "end": "1304559"
  },
  {
    "text": "use that new name inside my class and with the reputation which change only the reputation I have one for each and",
    "start": "1304559",
    "end": "1311159"
  },
  {
    "text": "every property and then I can write this code create me a new user with",
    "start": "1311159",
    "end": "1316559"
  },
  {
    "text": "reputation 10 and the rest of the properties I don't care about as long as they're valid and that's it and I get",
    "start": "1316559",
    "end": "1322720"
  },
  {
    "text": "two things out of using the Builder pattern it's very useful for Big Data classes when I have parameters either as",
    "start": "1322720",
    "end": "1330080"
  },
  {
    "text": "input or initialization that has a lot of properties and that way I'll write",
    "start": "1330080",
    "end": "1335880"
  },
  {
    "text": "less code but I don't need all the parameters I'm not using and when someone comes and read my test he",
    "start": "1335880",
    "end": "1343039"
  },
  {
    "text": "understand exactly what I care about and what I don't he sees that and says okay this test has something to do with",
    "start": "1343039",
    "end": "1349159"
  },
  {
    "text": "reputation not name so I don't need to initialize the old class I do that in",
    "start": "1349159",
    "end": "1354200"
  },
  {
    "text": "the background inside my Builder and it will make your life easier the second uh pattern or tool",
    "start": "1354200",
    "end": "1361720"
  },
  {
    "text": "called Auto mocking container Auto Maring container and you can find a very good blog post on one of",
    "start": "1361720",
    "end": "1367840"
  },
  {
    "text": "the speaker called uh uh Mark siman is essentially harnessing another",
    "start": "1367840",
    "end": "1375080"
  },
  {
    "text": "tool called inversion of control container ioc about ioc it's a class",
    "start": "1375080",
    "end": "1380880"
  },
  {
    "text": "yeah container and that will create another class the class I care",
    "start": "1380880",
    "end": "1387520"
  },
  {
    "text": "about and it will create that class with all the dep its dependencies",
    "start": "1387520",
    "end": "1394559"
  },
  {
    "text": "automatically and an autoing container will create that class with all the properties all the dependencies faked",
    "start": "1394559",
    "end": "1402559"
  },
  {
    "text": "automatically and I can show you in code because I noticed that people once you",
    "start": "1402559",
    "end": "1409080"
  },
  {
    "text": "start debugging then you really understand this is the test from remember that one",
    "start": "1409080",
    "end": "1415120"
  },
  {
    "text": "with all the initialization and this is the test but something if you look at",
    "start": "1415120",
    "end": "1420200"
  },
  {
    "text": "the initialization the setup here you'll notice something most of the fake object I'm creating I just need them in order",
    "start": "1420200",
    "end": "1426919"
  },
  {
    "text": "to create my service and that's it I just need something to pass in the",
    "start": "1426919",
    "end": "1432080"
  },
  {
    "text": "parameters I don't do anything with them other than that so instead of writing this test I can write",
    "start": "1432080",
    "end": "1440200"
  },
  {
    "text": "the same code with the auto mockin container using autof fake that's an auto mocking container which use autofu",
    "start": "1440200",
    "end": "1447279"
  },
  {
    "text": "an ioc container and basically I'll just gu get the fake catcher which I need in",
    "start": "1447279",
    "end": "1454600"
  },
  {
    "text": "order to set a behavior on it I want it to throw an exception and I just want to return it",
    "start": "1454600",
    "end": "1461720"
  },
  {
    "text": "from effect Creator and then I'll call the autom Maring container and I'll tell him give me a real class with whatever",
    "start": "1461720",
    "end": "1468399"
  },
  {
    "text": "you have and if I'll run this you'll see what I",
    "start": "1468399",
    "end": "1474158"
  },
  {
    "text": "mean instead of calling new with the Constructor with all the parameters because we use the pensy injection and",
    "start": "1477520",
    "end": "1483679"
  },
  {
    "text": "we want to pass all the parameters for the Constructor I'll call the auto mocking container. resolve in this case",
    "start": "1483679",
    "end": "1491240"
  },
  {
    "text": "and if you'll go to the Constructor of this class hopefully",
    "start": "1491240",
    "end": "1497080"
  },
  {
    "text": "uh which I didn't put a breakpoint so here go back to the drawing",
    "start": "1498679",
    "end": "1507320"
  },
  {
    "text": "board so going back to the Constructor of that class I can notice that each and every",
    "start": "1508000",
    "end": "1514399"
  },
  {
    "text": "one of them of those dependencies was in fact",
    "start": "1514399",
    "end": "1520640"
  },
  {
    "text": "faked automatically so I get a fake object that I didn't need to declare and if",
    "start": "1520640",
    "end": "1525880"
  },
  {
    "text": "that Constructor will change with more dependencies that don't care about in that test I'll get them as well",
    "start": "1525880",
    "end": "1531320"
  },
  {
    "text": "automatically and I don't need to update my test over and over again and that is",
    "start": "1531320",
    "end": "1536720"
  },
  {
    "text": "a cool thing to use now no one usually talk about Auto moing containers and some moing f have them built in as well",
    "start": "1536720",
    "end": "1544320"
  },
  {
    "text": "and you should use them because your code becomes so much simpler instead of",
    "start": "1544320",
    "end": "1550039"
  },
  {
    "text": "doing all of this I ended up just declaring the fake object I do care about and getting the class back out and",
    "start": "1550039",
    "end": "1557679"
  },
  {
    "text": "I don't need initialization splited between methods and everything become",
    "start": "1557679",
    "end": "1563720"
  },
  {
    "text": "simpler so this is auto mocking containers moving on let's talk about",
    "start": "1563720",
    "end": "1571880"
  },
  {
    "text": "assertions assert is the thing that come in the end of the test right for example right here can you",
    "start": "1571880",
    "end": "1579240"
  },
  {
    "text": "spot a problem in my test five lines and I managed to do something wrong anyone have any idea what I did",
    "start": "1579240",
    "end": "1586440"
  },
  {
    "text": "wrong how about now what is wrong with this",
    "start": "1586440",
    "end": "1592320"
  },
  {
    "text": "test too many asset you're testing too many things right there is a rule called",
    "start": "1592520",
    "end": "1598840"
  },
  {
    "text": "one assert per test rule right anyone ever heard about the one assert per rule test one Asser per test rule",
    "start": "1598840",
    "end": "1606480"
  },
  {
    "text": "sorry which means that you only have one assert in each test the reason being is",
    "start": "1606480",
    "end": "1612520"
  },
  {
    "text": "that otherwise the test will be very complex and there's also technical reason to do that and so on it means",
    "start": "1612520",
    "end": "1618919"
  },
  {
    "text": "that if I have two assert in my test I have two tests right wrong this is actually I find it to be insane saying",
    "start": "1618919",
    "end": "1625159"
  },
  {
    "text": "that because if you look at this test how many things I'm testing here there",
    "start": "1625159",
    "end": "1630320"
  },
  {
    "text": "are two assert but I'm testing one thing I'm testing the result of some",
    "start": "1630320",
    "end": "1635640"
  },
  {
    "text": "operation and that result actually is is has two properties one of them is ID and",
    "start": "1635640",
    "end": "1641279"
  },
  {
    "text": "the other one is content but I'm testing one thing there's no point in having two test for",
    "start": "1641279",
    "end": "1647000"
  },
  {
    "text": "this but there is is a problem here because the way assertion work in J unit",
    "start": "1647000",
    "end": "1652559"
  },
  {
    "text": "n unit X unit all of those is that if the assertion is wrong you will get an",
    "start": "1652559",
    "end": "1658640"
  },
  {
    "text": "exception for and the test will fail which is good but the bad thing is that you have no clue about the other asserts",
    "start": "1658640",
    "end": "1665840"
  },
  {
    "text": "you don't know what happens with this line with the second line over here if",
    "start": "1665840",
    "end": "1671399"
  },
  {
    "text": "the first line fails now it's completely different failure if the ID is wrong but the content is right from the failure if",
    "start": "1671399",
    "end": "1678360"
  },
  {
    "text": "both of them are wrong and I got a different message and I want this information because it will make my job",
    "start": "1678360",
    "end": "1683880"
  },
  {
    "text": "easier easier to maintain now unfortunately J unit started with those exception the idea of",
    "start": "1683880",
    "end": "1690000"
  },
  {
    "text": "for an exception from assertion and everybody follows suit because it's easy it's very easy to",
    "start": "1690000",
    "end": "1697720"
  },
  {
    "text": "for an exception you can write your own assertion Library just for an exception whenever it's false put a nice message",
    "start": "1697720",
    "end": "1703240"
  },
  {
    "text": "and I understand the problem and we did that because usually the guy that run in the test is not the same one as the test",
    "start": "1703240",
    "end": "1709720"
  },
  {
    "text": "unit test in framework we can run unit test from within Visual Studio command line whatever resharper if you use it",
    "start": "1709720",
    "end": "1716559"
  },
  {
    "text": "and you want to decouple the implementation of your unit test from the runner but it's not necessarily the way",
    "start": "1716559",
    "end": "1723399"
  },
  {
    "text": "to go because there is a programming language called C++ where they don't throw exceptions on",
    "start": "1723399",
    "end": "1730720"
  },
  {
    "text": "assertion they just write it down and in the end of the test tell you about all the failures together exactly what I",
    "start": "1730720",
    "end": "1737039"
  },
  {
    "text": "want unfortunately no one has did that in net Java and so on and so I ended up",
    "start": "1737039",
    "end": "1745200"
  },
  {
    "text": "with writing my own code to do that basically what happens here is that I'll",
    "start": "1745200",
    "end": "1750880"
  },
  {
    "text": "take a bunch of assertions action actually it's not even assertions run them in a loop catch all the exceptions",
    "start": "1750880",
    "end": "1758039"
  },
  {
    "text": "over here and then follow them together as one exception in the end and you can use this code it's very simple to use",
    "start": "1758039",
    "end": "1764919"
  },
  {
    "text": "this code it looks something like this I have two asserts tell me about all the failures I called it assert all when I",
    "start": "1764919",
    "end": "1772679"
  },
  {
    "text": "wrote it back then and I was very happy to find out that nunit the latest",
    "start": "1772679",
    "end": "1778640"
  },
  {
    "text": "version nunit 3 has implemented the same capability with nunit you can do assert",
    "start": "1778640",
    "end": "1783679"
  },
  {
    "text": "multiple from now in the new version which is cool because we were",
    "start": "1783679",
    "end": "1789039"
  },
  {
    "text": "missing this capability but it's just a Band-Aid to fix the real problem we",
    "start": "1789039",
    "end": "1794519"
  },
  {
    "text": "shouldn't have for assertions to begin with we should should have just written it somewhere and then tell us all the",
    "start": "1794519",
    "end": "1800919"
  },
  {
    "text": "problems but that one is not going away apparently and J did the same and you",
    "start": "1800919",
    "end": "1806000"
  },
  {
    "text": "can see it from Jun documentation although they missed the point a bit because you can once you get aert all",
    "start": "1806000",
    "end": "1811760"
  },
  {
    "text": "you tend to write a lot of code and this is not readable or useful but junit 5",
    "start": "1811760",
    "end": "1818200"
  },
  {
    "text": "the latest version of junit has the same capability and if you look at the code it's about the same as the code I showed",
    "start": "1818200",
    "end": "1824760"
  },
  {
    "text": "you before run everything in a loop store all the all the exceptions you get and then pH them in the",
    "start": "1824760",
    "end": "1832399"
  },
  {
    "text": "end which is cool you should use those capabilities but you should not abuse them which means that you should still",
    "start": "1832399",
    "end": "1839120"
  },
  {
    "text": "test only one thing just because you can doesn't mean you should and so on now quick question",
    "start": "1839120",
    "end": "1846720"
  },
  {
    "text": "what is the difference between those two very trivial assertions because I'm testing the the 2 plus two equals 5",
    "start": "1846720",
    "end": "1853360"
  },
  {
    "text": "which is wrong but there's a big difference between those two very",
    "start": "1853360",
    "end": "1858600"
  },
  {
    "text": "important one anyone can Spot the",
    "start": "1858600",
    "end": "1862880"
  },
  {
    "text": "Difference exactly yes in all the junit",
    "start": "1863760",
    "end": "1869240"
  },
  {
    "text": "derivative well almost so uh Google test doesn't do that we expect something we",
    "start": "1869240",
    "end": "1875279"
  },
  {
    "text": "expect the expected value to be on the left and the actual value whatever I got",
    "start": "1875279",
    "end": "1880840"
  },
  {
    "text": "out of my test to be on the right that the way it was originally in junit and it means that when I get an error when",
    "start": "1880840",
    "end": "1888080"
  },
  {
    "text": "the test fails I'll get two different messages one will say you expected five",
    "start": "1888080",
    "end": "1893159"
  },
  {
    "text": "but got four and the other one will say you expected four but got five obviously this is a trivial uh example in your",
    "start": "1893159",
    "end": "1899360"
  },
  {
    "text": "code you will probably get confused if you put them the other way around now I",
    "start": "1899360",
    "end": "1905039"
  },
  {
    "text": "think it should have been the other way around because usually we say 2 + 2 equal 4 not four equals 2 + 2 this is",
    "start": "1905039",
    "end": "1911600"
  },
  {
    "text": "weird and most developers starting or some developers starting with the unit testing will write them the other way",
    "start": "1911600",
    "end": "1917159"
  },
  {
    "text": "around because makes more sense uh and then you get the bad error",
    "start": "1917159",
    "end": "1922840"
  },
  {
    "text": "message you don't understand it you see the code you say oh I missed that H what about this time another another",
    "start": "1922840",
    "end": "1930320"
  },
  {
    "text": "difference what is the difference between using r equal to is true and again the answer is the error message",
    "start": "1930320",
    "end": "1936960"
  },
  {
    "text": "because while I get a good error message out of not equal with is true will only",
    "start": "1936960",
    "end": "1942480"
  },
  {
    "text": "get no it's false and again it means that I'll probably need to debug my test",
    "start": "1942480",
    "end": "1947679"
  },
  {
    "text": "now and I don't want to do that because I could got I could have gotten all the",
    "start": "1947679",
    "end": "1952880"
  },
  {
    "text": "information from my tests but using is true should have been",
    "start": "1952880",
    "end": "1959000"
  },
  {
    "text": "the right way to go because as a developer I find the other one that is true to be more readable more",
    "start": "1959000",
    "end": "1965559"
  },
  {
    "text": "understandable and more intuitive I want to write code I want to tell you in my code exactly what I want",
    "start": "1965559",
    "end": "1972279"
  },
  {
    "text": "and you'll do whatever you need right that is not my job the framework should do that and the framework that will do",
    "start": "1972279",
    "end": "1978399"
  },
  {
    "text": "that for you unfortunately they're in C++ so I wrote something in net but it",
    "start": "1978399",
    "end": "1983720"
  },
  {
    "text": "was a while ago and I'll talk about that so assertions there's a lot of assertion",
    "start": "1983720",
    "end": "1989200"
  },
  {
    "text": "it's hard to find the right one and the right assertion will give you a good error message while the wrong",
    "start": "1989200",
    "end": "1994360"
  },
  {
    "text": "one won't there's the parameter confusion whether to use the left or the right and",
    "start": "1994360",
    "end": "2000360"
  },
  {
    "text": "the nice thing that some unites in framework did is that sometimes the expected value is on the left and",
    "start": "2000360",
    "end": "2005720"
  },
  {
    "text": "sometime on the right for example if you look for a substring it will be on the right or in Microsoft unit testing",
    "start": "2005720",
    "end": "2011639"
  },
  {
    "text": "framework doesn't make it a bad unit testing framework just confusing the expected is on the right side from some",
    "start": "2011639",
    "end": "2017799"
  },
  {
    "text": "of the setion on the left for some and finally depending on what you use there",
    "start": "2017799",
    "end": "2023240"
  },
  {
    "text": "are additional assertion you never heard about for example in N unit you have string assert class and collection",
    "start": "2023240",
    "end": "2029320"
  },
  {
    "text": "assert class that you should use but you might have never heard about them because they're not in the main assert",
    "start": "2029320",
    "end": "2035720"
  },
  {
    "text": "dot something class and it's all about getting the right error message so I wrote something",
    "start": "2035720",
    "end": "2042519"
  },
  {
    "text": "called aert Helper because I like to put my name into stuff and I just use net",
    "start": "2042519",
    "end": "2050158"
  },
  {
    "text": "which has expressions and Roslin and whatever in order to analyze what's written here understand that we have an",
    "start": "2050159",
    "end": "2056440"
  },
  {
    "text": "equal and use AER our equal in the end and it's as simple as that and I don't I don't understand why nunit doesn't do",
    "start": "2056440",
    "end": "2063200"
  },
  {
    "text": "that because this is the way I want to see my assertion just make sure that this is true give me all the all the",
    "start": "2063200",
    "end": "2068919"
  },
  {
    "text": "useful information you can give me if it fails and it's very trivial in fact I didn't invent this",
    "start": "2068919",
    "end": "2075240"
  },
  {
    "text": "idea um it was written by a guy in Microsoft for unit testing for a",
    "start": "2075240",
    "end": "2080720"
  },
  {
    "text": "specific framework in which you can give the actual code you want to check and it will give you the right assertion",
    "start": "2080720",
    "end": "2087878"
  },
  {
    "text": "instead unfortunately that framework called Silver light so the code is unreachable and you can't find it",
    "start": "2087879",
    "end": "2093919"
  },
  {
    "text": "anymore my code is on GitHub you can look and if you want to create net core version and have just send me a",
    "start": "2093919",
    "end": "2100839"
  },
  {
    "text": "poll request I'll be happy and there are additional assertion libraries that will help you give make your job easier such",
    "start": "2100839",
    "end": "2107680"
  },
  {
    "text": "as fluent assertion in net and shle in net and as ham crust in Java and it will",
    "start": "2107680",
    "end": "2115599"
  },
  {
    "text": "enable you to write better assertions and even assert things that you can't assert with the plain old unit testing",
    "start": "2115599",
    "end": "2122880"
  },
  {
    "text": "framework for example here I'm asserting that those two customers has the same",
    "start": "2122880",
    "end": "2128119"
  },
  {
    "text": "properties excluding the customer ID and you can do that properly with nunit in",
    "start": "2128119",
    "end": "2134680"
  },
  {
    "text": "fact when you call assert are equal for two objects it won't check whether or not they're compared to one another it",
    "start": "2134680",
    "end": "2141160"
  },
  {
    "text": "will run do equal in net it means usually that will check the references and you get an error message so fluent",
    "start": "2141160",
    "end": "2148560"
  },
  {
    "text": "assertion surely will make your job easy as well let's talk about test organization we talked about arrange act",
    "start": "2148560",
    "end": "2155119"
  },
  {
    "text": "assert right but when you start to write unit T the additional problem you need to think about for example how do I call",
    "start": "2155119",
    "end": "2161839"
  },
  {
    "text": "my test what is the name of the test this is something books have been written about that one of the speaker",
    "start": "2161839",
    "end": "2167839"
  },
  {
    "text": "called Ro OSH has invented a way to call his test which I used to this day and Google it and you'll find it that's one",
    "start": "2167839",
    "end": "2174200"
  },
  {
    "text": "thing you can do AAA you can mess up AAA as I said before what should you test",
    "start": "2174200",
    "end": "2180960"
  },
  {
    "text": "you know I have this bunch of code this huge pile of code what is the unit no one has ever defined what is a unit in",
    "start": "2180960",
    "end": "2188800"
  },
  {
    "text": "unit test we know the properties of a unit test should be fast isolated so on",
    "start": "2188800",
    "end": "2194319"
  },
  {
    "text": "and so on but no one has Define something that you can take your code and say this is the unit no one knows it",
    "start": "2194319",
    "end": "2200839"
  },
  {
    "text": "changes from Project to project and how do I not write",
    "start": "2200839",
    "end": "2206079"
  },
  {
    "text": "complicated test and again those",
    "start": "2206079",
    "end": "2211119"
  },
  {
    "text": "problems developers has been thinking about those problems since 2003 when Gen",
    "start": "2211119",
    "end": "2216240"
  },
  {
    "text": "unit first came out and one such the consultant called Dan North ever heard",
    "start": "2216240",
    "end": "2221440"
  },
  {
    "text": "about Dan North invented something called bdd but he didn't I don't think he meant to invent Behavior driven",
    "start": "2221440",
    "end": "2228520"
  },
  {
    "text": "development just wanted to make test driven development a more consigned science define what's the unities what",
    "start": "2228520",
    "end": "2235960"
  },
  {
    "text": "you should test what you should perform and so on and bdd behavor driven development essentially use a bunch of",
    "start": "2235960",
    "end": "2241359"
  },
  {
    "text": "tools derivative of cucumber from Ruby and then Java spec flow in net which has",
    "start": "2241359",
    "end": "2249280"
  },
  {
    "text": "two files each test is combined from at least two files one is the specifications written in semi human",
    "start": "2249280",
    "end": "2256359"
  },
  {
    "text": "readable way so you can't really mess up because otherwise something it doesn't make sense and the code that runs those",
    "start": "2256359",
    "end": "2264160"
  },
  {
    "text": "specifications and the specification looks something like this the thing at top is just the",
    "start": "2264160",
    "end": "2269720"
  },
  {
    "text": "description on white what you care about is the given when then also known as gin syntax given that I have done this and",
    "start": "2269720",
    "end": "2278079"
  },
  {
    "text": "that thing and then I do this thing that's what I expect to happen and a while ago I was in a",
    "start": "2278079",
    "end": "2285680"
  },
  {
    "text": "project where we use that capability here we go and we've written",
    "start": "2285680",
    "end": "2291760"
  },
  {
    "text": "a bunch of scenarios with given when then and you can read them you don't even need to know what the project was",
    "start": "2291760",
    "end": "2297520"
  },
  {
    "text": "about but you can understand right that I have a compiled solution in Visual Studio we were running at Visual Studio",
    "start": "2297520",
    "end": "2304920"
  },
  {
    "text": "extension and the project is so and so and I'm compiling that project then one test should",
    "start": "2304920",
    "end": "2313000"
  },
  {
    "text": "run very readable and anyone can read it even your product",
    "start": "2313000",
    "end": "2318839"
  },
  {
    "text": "manager and that's a good thing because that way you can tell you whether or not you're doing the right thing or you're testing something completely wrong and",
    "start": "2318839",
    "end": "2326240"
  },
  {
    "text": "then I have a bunch of action here behind with attributes and so on to run actual code for those",
    "start": "2326240",
    "end": "2334480"
  },
  {
    "text": "specifications now I've been using those bdd framework which were firstly they",
    "start": "2334480",
    "end": "2340880"
  },
  {
    "text": "were intended in order to test requirements end to end scenarios scenario test acceptance test integration test to write unit test",
    "start": "2340880",
    "end": "2347560"
  },
  {
    "text": "because no one it doesn't really care what you run here so you can Define your unit test in the same way with",
    "start": "2347560",
    "end": "2354319"
  },
  {
    "text": "specification that a different developer can read and understand but it's a bit",
    "start": "2354319",
    "end": "2359520"
  },
  {
    "text": "of a pain because you need to maintain two different files you need to maintain the specification file and you need to",
    "start": "2359520",
    "end": "2366359"
  },
  {
    "text": "maintain the actual code behind but luckily for us there are a bunch of tools I know of one in net",
    "start": "2366359",
    "end": "2374000"
  },
  {
    "text": "called bdd and this is specflow sorry bddy bdy",
    "start": "2374000",
    "end": "2380680"
  },
  {
    "text": "essentially let me write a specification in code so I have only one file for the specification and running those",
    "start": "2380680",
    "end": "2386440"
  },
  {
    "text": "specifications it's written in a very concise and easy way to write to uh read",
    "start": "2386440",
    "end": "2391680"
  },
  {
    "text": "and improve but the cool thing about bddy and I this is one of the API",
    "start": "2391680",
    "end": "2398560"
  },
  {
    "text": "uh and it discovers the steps the specification from the test method you see it begins",
    "start": "2398560",
    "end": "2405160"
  },
  {
    "text": "with given when then automatically and it has a fluent API as well and once I",
    "start": "2405160",
    "end": "2412119"
  },
  {
    "text": "write those test and run them then I'll get the scenario it will write the",
    "start": "2412119",
    "end": "2417319"
  },
  {
    "text": "scenario that I can show my customer product manager or just for me and if I'll write horrible stuff here then I",
    "start": "2417319",
    "end": "2424839"
  },
  {
    "text": "won't be able to read it and I'll rename my method as well and this is cool and",
    "start": "2424839",
    "end": "2430160"
  },
  {
    "text": "the cool thing is that it also create an HTML kind of file that I can put on my",
    "start": "2430160",
    "end": "2435560"
  },
  {
    "text": "source control or in my build server and show everyone and now we understand exactly what I've been doing and what",
    "start": "2435560",
    "end": "2442079"
  },
  {
    "text": "failed without reading the code but the real plus side here is that the tests",
    "start": "2442079",
    "end": "2449520"
  },
  {
    "text": "become more readable and I get guidance along the way this is a simple unitest",
    "start": "2449520",
    "end": "2455280"
  },
  {
    "text": "it's not that difficult essentially have two files in this size and I set a bunch",
    "start": "2455280",
    "end": "2461000"
  },
  {
    "text": "of things and when I try to log something and I'm over the amount of space I'm allowed to use then I should",
    "start": "2461000",
    "end": "2467040"
  },
  {
    "text": "delete those files and that's not nice this is the same test using bdd fluent interface",
    "start": "2467040",
    "end": "2474599"
  },
  {
    "text": "given that I'm out of storage and there are log files in this size and I write a",
    "start": "2474599",
    "end": "2481400"
  },
  {
    "text": "new log message then all the log files are deleted now writing this",
    "start": "2481400",
    "end": "2488960"
  },
  {
    "text": "test I didn't think what I'm testing what I'm doing I just told you what I'm",
    "start": "2488960",
    "end": "2494200"
  },
  {
    "text": "doing and wrote the code accordingly and if I'll run this uh thing as well we can",
    "start": "2494200",
    "end": "2500280"
  },
  {
    "text": "see the scenario and we can verify that I'm actually it actually makes sense as well and everyone can read it and it",
    "start": "2500280",
    "end": "2507599"
  },
  {
    "text": "will make me it will force me to work in a specific structure very good structure now in Java we have a Spock that does",
    "start": "2507599",
    "end": "2514920"
  },
  {
    "text": "the same thing write some code and you get specification out of it and no one said",
    "start": "2514920",
    "end": "2520359"
  },
  {
    "text": "it has to be requirements it can be whatever you want so you can write unit test using those Frameworks as",
    "start": "2520359",
    "end": "2527359"
  },
  {
    "text": "well so this is the test structure",
    "start": "2529240",
    "end": "2535760"
  },
  {
    "text": "basically and good for us let's talk about test execution once you start writing unit",
    "start": "2535760",
    "end": "2543280"
  },
  {
    "text": "test you'll end up with a lot of unit test and I hope for you that you have a build server as well that will run those",
    "start": "2543280",
    "end": "2549040"
  },
  {
    "text": "unit test on every commit and you should run all your test on every commit as well but the more test you have running",
    "start": "2549040",
    "end": "2556240"
  },
  {
    "text": "all the tests take more and more and more time and if you have integration",
    "start": "2556240",
    "end": "2561680"
  },
  {
    "text": "test as well which tend to run a few seconds and not less than a second that time adds up to a few minutes or even an",
    "start": "2561680",
    "end": "2569400"
  },
  {
    "text": "hour in one project we had 3,000 test they will run for 15 minutes I don't",
    "start": "2569400",
    "end": "2576160"
  },
  {
    "text": "want to run 15 minutes worth of tests every time I make a change unless I want",
    "start": "2576160",
    "end": "2581599"
  },
  {
    "text": "to grab a cup of coffee in between and have a good excuse I want to run only",
    "start": "2581599",
    "end": "2586960"
  },
  {
    "text": "the relevant test to that change and that's it and there's a bunch of tools",
    "start": "2586960",
    "end": "2592079"
  },
  {
    "text": "that will help me do that those tools uh I call them continuous test tools those",
    "start": "2592079",
    "end": "2598240"
  },
  {
    "text": "tools basically are uh coverage tools that can know which test relates to",
    "start": "2598240",
    "end": "2604760"
  },
  {
    "text": "which part of your code and when you change your code only the test that affect that piece of code will run",
    "start": "2604760",
    "end": "2612920"
  },
  {
    "text": "okay question no so do cover from jetbrain will do that and uh Visual",
    "start": "2612920",
    "end": "2621680"
  },
  {
    "text": "Studio 2017 onwards if you lucky enough to have the Enterprise Edition you have",
    "start": "2621680",
    "end": "2627240"
  },
  {
    "text": "something that calls that is called live unit test that will do that as well it will run coverage and know exactly what",
    "start": "2627240",
    "end": "2633760"
  },
  {
    "text": "code relates to what part of your code and when you change your code code it will run only the test you want to in",
    "start": "2633760",
    "end": "2639520"
  },
  {
    "text": "the background so you need a few processors on your machine uh but other than that that's it but the first one",
    "start": "2639520",
    "end": "2645720"
  },
  {
    "text": "that actually got it right was an crunch it has a lot of capabilities and",
    "start": "2645720",
    "end": "2650839"
  },
  {
    "text": "uh if your project is not reveal you might want to check it out as well and the typ mar which I used to walk there",
    "start": "2650839",
    "end": "2657079"
  },
  {
    "text": "have something as well called test Runner that will do the same thing and what is the same thing here we",
    "start": "2657079",
    "end": "2664960"
  },
  {
    "text": "go let's look at my assert helper the assertion library",
    "start": "2664960",
    "end": "2670319"
  },
  {
    "text": "from before now assert helper is has a lot of classes in for different",
    "start": "2670319",
    "end": "2676680"
  },
  {
    "text": "asserts and I have uh right now I have 53 test here and once I run coverage",
    "start": "2676680",
    "end": "2683079"
  },
  {
    "text": "this is dot cover from jet brins it knows exactly which test run six tests",
    "start": "2683079",
    "end": "2689839"
  },
  {
    "text": "pass through here and five test for there and so on now if I'll make a small",
    "start": "2689839",
    "end": "2695280"
  },
  {
    "text": "change a breaking change change in my code I'll just change that save and",
    "start": "2695280",
    "end": "2702359"
  },
  {
    "text": "compile I can go and uh continue doing something for my test did you see that",
    "start": "2702359",
    "end": "2708280"
  },
  {
    "text": "or was it too quick and my test will run in the background let's do that again",
    "start": "2708280",
    "end": "2715160"
  },
  {
    "text": "I'll just do magnification as well and when I",
    "start": "2715160",
    "end": "2720640"
  },
  {
    "text": "compile again it will recognize that only those tests were affected and run",
    "start": "2720640",
    "end": "2726119"
  },
  {
    "text": "only them and that way doesn't matter how many tests I have only the tests that are",
    "start": "2726119",
    "end": "2732480"
  },
  {
    "text": "affected by that change in my code will run again and there are a bunch of tools",
    "start": "2732480",
    "end": "2738200"
  },
  {
    "text": "most of them commercial but not all of them uh if you already have rearer uh",
    "start": "2738200",
    "end": "2744839"
  },
  {
    "text": "tools license or Su you have that capabilities if you have Visual Studio Enterprise you have that capability if",
    "start": "2744839",
    "end": "2752040"
  },
  {
    "text": "you buy in crunch you have that capability and so on and in net core there's a new tool that will do that as",
    "start": "2752040",
    "end": "2758000"
  },
  {
    "text": "well in Java something called in T Test will do that for you every compilation will run the test for you all of them",
    "start": "2758000",
    "end": "2764800"
  },
  {
    "text": "started from a project K back the one that invented essentially test develop",
    "start": "2764800",
    "end": "2770559"
  },
  {
    "text": "and they created something called junit Max that will run on the test on every compilation and all of them do exactly",
    "start": "2770559",
    "end": "2778000"
  },
  {
    "text": "that and they enable us to write to run only the tests that",
    "start": "2778000",
    "end": "2783920"
  },
  {
    "text": "are affected by the change continuously in the background like a small server",
    "start": "2783920",
    "end": "2789319"
  },
  {
    "text": "now you should have a machine with a few CES to spell in order to do that but you can continue on writing your code and",
    "start": "2789319",
    "end": "2794839"
  },
  {
    "text": "the test will continue run in the",
    "start": "2794839",
    "end": "2798040"
  },
  {
    "text": "background so what did we have here we talked about a bunch of things we talked about",
    "start": "2800559",
    "end": "2807720"
  },
  {
    "text": "arranging your test where you should use things like the Builder pattern and um",
    "start": "2807720",
    "end": "2815079"
  },
  {
    "text": "Auto Maring containers if you never use those you should they will help you write better test",
    "start": "2815079",
    "end": "2820839"
  },
  {
    "text": "easily and in assertions you might consider using a multiple asserts now that we have them or write your own",
    "start": "2820839",
    "end": "2827680"
  },
  {
    "text": "there's the code you'll have the you'll have the slides probably sent to you and",
    "start": "2827680",
    "end": "2833000"
  },
  {
    "text": "you can check them out or just Google for assert all and you find my blog post as well and all the third party",
    "start": "2833000",
    "end": "2839359"
  },
  {
    "text": "assertion libraries might help you as well and test structure you could use bdd to write unit test no one said you",
    "start": "2839359",
    "end": "2846119"
  },
  {
    "text": "shouldn't and you can use the incode bdd I don't have a better name for those where you write your code bdd style to",
    "start": "2846119",
    "end": "2852960"
  },
  {
    "text": "write unit test and finally continuous testing there are a bunch of tools here",
    "start": "2852960",
    "end": "2858480"
  },
  {
    "text": "test tap munner end cover dot cover end crunch live unit testing Visual Studio",
    "start": "2858480",
    "end": "2864359"
  },
  {
    "text": "Enterprise uh infinite test in Java uh there's new thing called I forgot his",
    "start": "2864359",
    "end": "2870480"
  },
  {
    "text": "name c corlet freely available that you can use in net core and get continuous",
    "start": "2870480",
    "end": "2878200"
  },
  {
    "text": "testing sort of and all of them will make your life easier and help you write",
    "start": "2878200",
    "end": "2883960"
  },
  {
    "text": "better good unit test and we'll give you guidance and will once you write a few tests other people will follow suit",
    "start": "2883960",
    "end": "2890760"
  },
  {
    "text": "because the first test is hard but once you have a bunch of tests in a specific",
    "start": "2890760",
    "end": "2896920"
  },
  {
    "text": "area of your code the next person in line could be you tomorrow will just",
    "start": "2896920",
    "end": "2902000"
  },
  {
    "text": "copy the same ideas to the next test and show and slowly but surely all your code",
    "start": "2902000",
    "end": "2907440"
  },
  {
    "text": "base will become exactly what you want it to be very uniformly and very easy to",
    "start": "2907440",
    "end": "2913760"
  },
  {
    "text": "maintain well thank you for listening if you have any questions I'll be happy to answer",
    "start": "2913760",
    "end": "2921040"
  },
  {
    "text": "yes yes I I didn't well this is a mostly",
    "start": "2926960",
    "end": "2932599"
  },
  {
    "text": "net you're right there are BDT tools for C++ there's even CLE C++ by the way but",
    "start": "2932599",
    "end": "2940160"
  },
  {
    "text": "uh wouldn't recommend it just yet uh it needs mainous but catch catch is an",
    "start": "2940160",
    "end": "2945799"
  },
  {
    "text": "excellent unit test in framework in fact I think that catch is not an xunit test",
    "start": "2945799",
    "end": "2951280"
  },
  {
    "text": "framework it has other ideas it has sections and a single assert what I did with net is done in catch automatically",
    "start": "2951280",
    "end": "2958359"
  },
  {
    "text": "if you work in C++ you should use catch in my belief because it will guide you",
    "start": "2958359",
    "end": "2963799"
  },
  {
    "text": "to the right direction and it will help you avoid most of the things I showed you in this session unfortunately I",
    "start": "2963799",
    "end": "2970160"
  },
  {
    "text": "couldn't find a good way to move those ideas into net yet but I'm working on it thinking about it all the time and yeah",
    "start": "2970160",
    "end": "2977559"
  },
  {
    "text": "catch will also enable you to write bdd like test and uh yeah C++ has a bunch of",
    "start": "2977559",
    "end": "2984119"
  },
  {
    "text": "additional in fact unit in C++ makes more sense at least to me than in net in",
    "start": "2984119",
    "end": "2989799"
  },
  {
    "text": "a way because the tools keep changing there people find new ways cool ways to do things and in net well we have J unit",
    "start": "2989799",
    "end": "2997119"
  },
  {
    "text": "will do the same thing all over again xunit Ms test n unit look exactly the same Java quite similar test and g j",
    "start": "2997119",
    "end": "3006079"
  },
  {
    "text": "unit look about the same only C++ people trying stuff they're used to that I",
    "start": "3006079",
    "end": "3011359"
  },
  {
    "text": "guess and so we get new ideas as well and uh my first plural side course by",
    "start": "3011359",
    "end": "3016559"
  },
  {
    "text": "the way is about catch and I'm talking about that as well anything",
    "start": "3016559",
    "end": "3022359"
  },
  {
    "text": "else okay",
    "start": "3025040",
    "end": "3028640"
  },
  {
    "text": "yeah I I think I did find something in net U mutation testing a tool I didn't",
    "start": "3035640",
    "end": "3040960"
  },
  {
    "text": "talk about the idea in mutation testing is although I can check where I was in",
    "start": "3040960",
    "end": "3046760"
  },
  {
    "text": "my cod using coverage it doesn't necessarily mean I'm actually testing everything there I just passed through",
    "start": "3046760",
    "end": "3052799"
  },
  {
    "text": "that piece of code and mutation testing will change my production code in order to make sure that I have a test that",
    "start": "3052799",
    "end": "3059040"
  },
  {
    "text": "test that specific area problem with mutation testing it takes a lot of time because you have a lot of uh branches to",
    "start": "3059040",
    "end": "3065799"
  },
  {
    "text": "follow you need to change your code if something was false change it to True numbers and so on uh null to notal and",
    "start": "3065799",
    "end": "3074839"
  },
  {
    "text": "Etc and there is a tool in net I think if you Google for that I I don't",
    "start": "3074839",
    "end": "3079920"
  },
  {
    "text": "remember its name but it it takes forever to run the test that's the problem you don't mind you have for you",
    "start": "3079920",
    "end": "3087559"
  },
  {
    "text": "have a lot of time to drink coffee",
    "start": "3087559",
    "end": "3091319"
  },
  {
    "text": "yeah yeah yeah mutation testing is a very interesting um idea and if you",
    "start": "3099480",
    "end": "3107160"
  },
  {
    "text": "manage to create the right Suite of test you will be very beneficial to you and",
    "start": "3107160",
    "end": "3112920"
  },
  {
    "text": "if you're willing to allow it to run either nightly or something like that then you'll find places in which you missing test because it will change your",
    "start": "3112920",
    "end": "3119359"
  },
  {
    "text": "code and check whether or not in each change your test will fail and that's a good idea to add it to the session by",
    "start": "3119359",
    "end": "3126440"
  },
  {
    "text": "the way but it's a whole session on itself you should look it up because mutation testing uh should be done right",
    "start": "3126440",
    "end": "3134520"
  },
  {
    "text": "unless you want to wait a lot yeah anything",
    "start": "3134520",
    "end": "3139680"
  },
  {
    "text": "else W thank you very much well",
    "start": "3139680",
    "end": "3146078"
  },
  {
    "text": "[Applause]",
    "start": "3146090",
    "end": "3149340"
  }
]