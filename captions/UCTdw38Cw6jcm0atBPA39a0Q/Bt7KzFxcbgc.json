[
  {
    "text": "I recently learned I'm the first time here it's my first time in Norway it's",
    "start": "1810",
    "end": "7270"
  },
  {
    "text": "my first time in Oslo and it's my first time in Norway I knew that first but I",
    "start": "7270",
    "end": "12369"
  },
  {
    "text": "learned that there is probably a larger audience tuning in in a separate room",
    "start": "12369",
    "end": "19089"
  },
  {
    "text": "where they have the possibility to choose between different talks so hi",
    "start": "19089",
    "end": "24279"
  },
  {
    "text": "there to you too today I'm going to talk to you about fast and small what are the",
    "start": "24279",
    "end": "31449"
  },
  {
    "text": "costs of a language feature what's the idea behind that pay only for what you",
    "start": "31449",
    "end": "40090"
  },
  {
    "text": "use the model I associated most and strongly with C++ and in thing it was",
    "start": "40090",
    "end": "49450"
  },
  {
    "text": "around 2005 the technical report about C++ performance got out and it's a",
    "start": "49450",
    "end": "57370"
  },
  {
    "text": "document I like still today because it tells us a little bit what's going on",
    "start": "57370",
    "end": "64390"
  },
  {
    "text": "behind the scenes and which code do we actually produce the good thing is that",
    "start": "64390",
    "end": "71439"
  },
  {
    "text": "compilers and optimizers now are they are really really smart and help us to",
    "start": "71439",
    "end": "78539"
  },
  {
    "text": "optimize our code a bit more and get rid of unnecessary unwanted stuff so there",
    "start": "78539",
    "end": "86350"
  },
  {
    "text": "are many features in the language and it's up to us to decide which one we",
    "start": "86350",
    "end": "91359"
  },
  {
    "text": "like to use that's the cool thing about C++ the important thing for many",
    "start": "91359",
    "end": "98619"
  },
  {
    "text": "solutions is that nevertheless we are still closed to hardware that's also",
    "start": "98619",
    "end": "105490"
  },
  {
    "text": "very good however what C++ is not is what you see is what you get language",
    "start": "105490",
    "end": "112889"
  },
  {
    "text": "for example they are constructors and destructors which are involved silently",
    "start": "112889",
    "end": "120009"
  },
  {
    "text": "sometimes they can call functions greater objects or allocate memory it",
    "start": "120009",
    "end": "127929"
  },
  {
    "text": "still means that we pay only for what you use but it also raises the question",
    "start": "127929",
    "end": "135370"
  },
  {
    "text": "what are the cost of the things we use really even with a good reason to use a",
    "start": "135370",
    "end": "142569"
  },
  {
    "text": "feature or a library it matters what's behind it so what I will show you in",
    "start": "142569",
    "end": "149019"
  },
  {
    "text": "this talk are various hand-picked selected language features and I like to",
    "start": "149019",
    "end": "155140"
  },
  {
    "text": "give you few behind the scenes so how do you do they work internally so this",
    "start": "155140",
    "end": "160360"
  },
  {
    "text": "should help you to decide which one to use or in which area you will like to",
    "start": "160360",
    "end": "166090"
  },
  {
    "text": "use it let's start with an easy one Auto",
    "start": "166090",
    "end": "171810"
  },
  {
    "text": "the interesting thing about Auto first is it's not really new before C++ 11 it",
    "start": "171810",
    "end": "179260"
  },
  {
    "text": "was used to tell the compiler that a variable should be placed on the stack a",
    "start": "179260",
    "end": "186269"
  },
  {
    "text": "great thing isn't that always the case",
    "start": "186269",
    "end": "192540"
  },
  {
    "text": "yes since C++ 90 it is always the case this makes all the most useless key",
    "start": "192540",
    "end": "200079"
  },
  {
    "text": "words of all times probably well not so anymore with C++ 11 Auto got reinvented",
    "start": "200079",
    "end": "206829"
  },
  {
    "text": "there the meaningless reserved keyword got a new meaning now it does what we",
    "start": "206829",
    "end": "212889"
  },
  {
    "text": "know from other languages for c-sharp for example is bar it helps the compiler",
    "start": "212889",
    "end": "219549"
  },
  {
    "text": "to fill in the correct type of a variable depending on its initialization",
    "start": "219549",
    "end": "227579"
  },
  {
    "text": "this is deduced by the argument on the right hand side this whole process itself is also old we know that from",
    "start": "227579",
    "end": "236319"
  },
  {
    "text": "template type deduction for years what other can do is it can spare us a",
    "start": "236319",
    "end": "243340"
  },
  {
    "text": "lot of typing that's one thing because we do not have to write all if template",
    "start": "243340",
    "end": "250840"
  },
  {
    "text": "parameters you can just say order on the left hand side but more important is it",
    "start": "250840",
    "end": "255910"
  },
  {
    "text": "can save us from silly mistakes which can hurt sometimes so for example",
    "start": "255910",
    "end": "261849"
  },
  {
    "text": "forgetting or adding Const or getting template parameters slightly wrong in",
    "start": "261849",
    "end": "267250"
  },
  {
    "text": "another way result in unwanted and maybe unseen",
    "start": "267250",
    "end": "272260"
  },
  {
    "text": "conversions behind the scenes the resulting output may look like the same",
    "start": "272260",
    "end": "277660"
  },
  {
    "text": "but there may be a conversion involved with other this is no longer possible we",
    "start": "277660",
    "end": "283780"
  },
  {
    "text": "get the same type on both sides the",
    "start": "283780",
    "end": "291000"
  },
  {
    "text": "deduction rules for auto are mainly to",
    "start": "291000",
    "end": "296200"
  },
  {
    "text": "remove all top-level qualifiers so we do not get the full-blown type with all",
    "start": "296200",
    "end": "302980"
  },
  {
    "text": "qualifiers constant volatile for example are removed it aims only for the",
    "start": "302980",
    "end": "309040"
  },
  {
    "text": "underlying type if this type is a pointer to constant memory the",
    "start": "309040",
    "end": "316390"
  },
  {
    "text": "countenance of this memory section red points to remains of course comes",
    "start": "316390",
    "end": "321820"
  },
  {
    "text": "reference on the other hand is completely removed so roughly the rules are here becomes t ref it becomes",
    "start": "321820",
    "end": "328690"
  },
  {
    "text": "constant if you have a Const P star comes it becomes a comes peaced are the",
    "start": "328690",
    "end": "337150"
  },
  {
    "text": "good and important use for this talk is this all happens at compile time it's not that the initialization can change",
    "start": "337150",
    "end": "344740"
  },
  {
    "text": "with each for loop and you get a different variable type no it's done",
    "start": "344740",
    "end": "352000"
  },
  {
    "text": "like templates at compile time so no additional runtime costs or increased",
    "start": "352000",
    "end": "357669"
  },
  {
    "text": "RAM or ROM usage so much about auto let's move on to a combination of auto",
    "start": "357669",
    "end": "365980"
  },
  {
    "text": "and deco type deco type auto the usage of deco type is a little bit different",
    "start": "365980",
    "end": "372460"
  },
  {
    "text": "to auto it's like auto to query the type but this time including all the",
    "start": "372460",
    "end": "379330"
  },
  {
    "text": "top-level qualifiers to tell you upfront duty is its nature it's also compiled",
    "start": "379330",
    "end": "387190"
  },
  {
    "text": "time only without any overhead as long",
    "start": "387190",
    "end": "393400"
  },
  {
    "text": "as we stick to the rules everything works expected let's have a",
    "start": "393400",
    "end": "400060"
  },
  {
    "text": "look at this example here we have the ordinary program the",
    "start": "400060",
    "end": "406189"
  },
  {
    "text": "variable foo builds the base for it from that we did use with also on deco type",
    "start": "406189",
    "end": "412159"
  },
  {
    "text": "for new variables a b c and d in the",
    "start": "412159",
    "end": "417469"
  },
  {
    "text": "last step foo is incremented by 1 so it's not the",
    "start": "417469",
    "end": "422599"
  },
  {
    "text": "most sophisticated example here but it will illustrate my point and my question",
    "start": "422599",
    "end": "428029"
  },
  {
    "text": "to you is what is the output of the program what does it print out for a one",
    "start": "428029",
    "end": "441500"
  },
  {
    "text": "grade I take that what does it print out for B",
    "start": "441500",
    "end": "446979"
  },
  {
    "text": "would you agree with one c1 again right",
    "start": "456360",
    "end": "466139"
  },
  {
    "text": "and deep reasonable idea about teeth",
    "start": "466139",
    "end": "472810"
  },
  {
    "text": "what's teeth",
    "start": "472810",
    "end": "476039"
  },
  {
    "text": "I have one one here who wants to go with one okay I initially did two wrong it's",
    "start": "481230",
    "end": "491820"
  },
  {
    "text": "two and if you pay close attention the",
    "start": "491820",
    "end": "500520"
  },
  {
    "text": "only line that differs from our usual expectation is the one with deco type",
    "start": "500520",
    "end": "506400"
  },
  {
    "text": "auto and the braces I put in there so",
    "start": "506400",
    "end": "513080"
  },
  {
    "text": "days seem to influence our time our",
    "start": "513080",
    "end": "519479"
  },
  {
    "text": "deduce type somehow we put braces around",
    "start": "519479",
    "end": "525440"
  },
  {
    "text": "math expressions for example and to group things and putting braces around",
    "start": "525440",
    "end": "536030"
  },
  {
    "text": "variables changes the expression type a bit it's not an ordinary variable",
    "start": "536030",
    "end": "543600"
  },
  {
    "text": "anymore in this very moment it's an l-value and in the context of",
    "start": "543600",
    "end": "550800"
  },
  {
    "text": "deco type auto I will show you later an l-value is supposed to lead to a",
    "start": "550800",
    "end": "556140"
  },
  {
    "text": "reference so now you can say all right",
    "start": "556140",
    "end": "561990"
  },
  {
    "text": "nice that we have learned that but really who puts braces around available",
    "start": "561990",
    "end": "569940"
  },
  {
    "text": "like I did here I mean come on it's typing two additional characters and nobody wants to do that we got Auto to",
    "start": "569940",
    "end": "577710"
  },
  {
    "text": "type less so I agree nobody does that",
    "start": "577710",
    "end": "586880"
  },
  {
    "text": "some do by intent and there's a potential that you do this by mistake",
    "start": "587960",
    "end": "594180"
  },
  {
    "text": "and that if you use one feature with which i think is the one they would load",
    "start": "594180",
    "end": "602520"
  },
  {
    "text": "out of c++ if they had a chance to and that's macros we put braces around",
    "start": "602520",
    "end": "611060"
  },
  {
    "text": "parameters of macro functions to get rid of nasty side effects for years these braces",
    "start": "611060",
    "end": "619360"
  },
  {
    "text": "remain in the coat the brief recess it does only do a text replacement so the",
    "start": "619360",
    "end": "626830"
  },
  {
    "text": "outmost braces will stick around and popular example is such a max function",
    "start": "626830",
    "end": "634000"
  },
  {
    "text": "is shown here and I agree we are in modern or postmodern C++ so there should",
    "start": "634000",
    "end": "642400"
  },
  {
    "text": "be probably a template but it doesn't have to so you can get in the situation",
    "start": "642400",
    "end": "652420"
  },
  {
    "text": "you may have legacy code where you only switched the one side you like to have",
    "start": "652420",
    "end": "657460"
  },
  {
    "text": "deco type in order for some reason but you didn't change the other side then",
    "start": "657460",
    "end": "662560"
  },
  {
    "text": "you can end up with stand that's not all",
    "start": "662560",
    "end": "667920"
  },
  {
    "text": "this is a slightly modified version of this know pray our program we simply do",
    "start": "667920",
    "end": "677440"
  },
  {
    "text": "an X plus plus so we increment and variable which is passed to the macro function and my question is once again",
    "start": "677440",
    "end": "687900"
  },
  {
    "text": "what's the output now for a is trivial",
    "start": "687900",
    "end": "695530"
  },
  {
    "text": "come on one good piece one travel as",
    "start": "695530",
    "end": "700990"
  },
  {
    "text": "well see",
    "start": "700990",
    "end": "704339"
  },
  {
    "text": "we have to sink a little bit to one I take the one to post-increment and B so",
    "start": "706310",
    "end": "721970"
  },
  {
    "text": "I get a two because of the reference ah",
    "start": "721970",
    "end": "729259"
  },
  {
    "text": "that man is good so it's - its - again",
    "start": "729259",
    "end": "734589"
  },
  {
    "text": "but there's a but even that the result",
    "start": "734740",
    "end": "740290"
  },
  {
    "text": "looks the same what happens in the background is different because of the",
    "start": "740290",
    "end": "745790"
  },
  {
    "text": "nature of the post-increment we first take the variable and increment it afterwards we need to get a temporary",
    "start": "745790",
    "end": "751790"
  },
  {
    "text": "object and in the context of the standards that's an x value an x value",
    "start": "751790",
    "end": "757189"
  },
  {
    "text": "is an l-value work you can steal its contents from so what we get in this",
    "start": "757189",
    "end": "762949"
  },
  {
    "text": "case is the output is - but instead of binding to foods and reference we now",
    "start": "762949",
    "end": "772220"
  },
  {
    "text": "bound to an temporary object that's most likely not what we want so there's",
    "start": "772220",
    "end": "782420"
  },
  {
    "text": "another thing you can say okay program is not so sophisticated and writing x +",
    "start": "782420",
    "end": "789019"
  },
  {
    "text": "+ is not the best thing to do we learn",
    "start": "789019",
    "end": "794240"
  },
  {
    "text": "on other places that it's much better to say plus plus X so let's pretend the",
    "start": "794240",
    "end": "801170"
  },
  {
    "text": "program doesn't do anything at all so it doesn't matter we can change it we fix",
    "start": "801170",
    "end": "807319"
  },
  {
    "text": "that we say plus + X we change from the post to the pre-increment",
    "start": "807319",
    "end": "812529"
  },
  {
    "text": "that's nice what again a cells would now",
    "start": "812529",
    "end": "819019"
  },
  {
    "text": "a we didn't change anything there so on B didn't change it 1 to C is a little",
    "start": "819019",
    "end": "829040"
  },
  {
    "text": "bit tricky but still rather simple we changed to the pre instead of the post",
    "start": "829040",
    "end": "835819"
  },
  {
    "text": "increment so I think everybody that's two this time and ta what's D",
    "start": "835819",
    "end": "847370"
  },
  {
    "text": "this time",
    "start": "847370",
    "end": "849910"
  },
  {
    "text": "you already saw that it's the first case again this time it's for but just",
    "start": "856829",
    "end": "862000"
  },
  {
    "text": "because we switched to the pre increment we do to change to the pre increment the",
    "start": "862000",
    "end": "869889"
  },
  {
    "text": "variables incremented first and X remain so we have an variable with braces",
    "start": "869889",
    "end": "875410"
  },
  {
    "text": "around and we are back to an l-value why",
    "start": "875410",
    "end": "883240"
  },
  {
    "text": "does deco type in combination with Auto behave the way does it's perfectly",
    "start": "883240",
    "end": "889810"
  },
  {
    "text": "defined in the standard these are the words from the standard so we looked at",
    "start": "889810",
    "end": "896259"
  },
  {
    "text": "case C and now sorry at case D and E",
    "start": "896259",
    "end": "901839"
  },
  {
    "text": "here the first time and the second at the third time it was e no sorry",
    "start": "901839",
    "end": "916560"
  },
  {
    "text": "the first in a second example we got an l-value and that's why we gained reference to",
    "start": "917750",
    "end": "924060"
  },
  {
    "text": "fluent in the second example we ended up this is temporary which can be reused so",
    "start": "924060",
    "end": "930120"
  },
  {
    "text": "the results turned out to be different deckle type in although that wasn't in",
    "start": "930120",
    "end": "935610"
  },
  {
    "text": "combination with Auto that was might hague can lead to unexpected results it's still questionable to write such",
    "start": "935610",
    "end": "943709"
  },
  {
    "text": "code with macros but it can happen and in that circumstances it appears a bit",
    "start": "943709",
    "end": "950610"
  },
  {
    "text": "difficult to get the correct result you like irrespective of that Decco type",
    "start": "950610",
    "end": "959040"
  },
  {
    "text": "is a compiler only feature which has no influence on the resulting code or the",
    "start": "959040",
    "end": "965010"
  },
  {
    "text": "performance if applied correctly well if it matches what you want I will show you",
    "start": "965010",
    "end": "972600"
  },
  {
    "text": "an example later when and where it makes sense to put braces around and variable",
    "start": "972600",
    "end": "978470"
  },
  {
    "text": "let's move to the next item do you know this type of code it's",
    "start": "978470",
    "end": "983910"
  },
  {
    "text": "always the same pattern annoying to type again and again plus even that it is so",
    "start": "983910",
    "end": "993870"
  },
  {
    "text": "simple and we are so used to it there's",
    "start": "993870",
    "end": "999630"
  },
  {
    "text": "room for errors and I'm not talking about what happens in the body one",
    "start": "999630",
    "end": "1008089"
  },
  {
    "text": "potential error I often see is the post increment instead of the pre increment",
    "start": "1008089",
    "end": "1013910"
  },
  {
    "text": "this slide illustrates it correctly in some cases it's my own code I was taught",
    "start": "1013910",
    "end": "1023180"
  },
  {
    "text": "in my early programming years to write it that way X plus plus and unfortunately it just sticks still today",
    "start": "1023180",
    "end": "1032140"
  },
  {
    "text": "it's well meaningless let's",
    "start": "1032140",
    "end": "1037600"
  },
  {
    "text": "say that way if you deal with an integer result but it matters if it comes down",
    "start": "1037600",
    "end": "1043720"
  },
  {
    "text": "to object nonetheless writing X plus",
    "start": "1043720",
    "end": "1049690"
  },
  {
    "text": "plus leads to an temporary object as we've seen in deco type and this in each",
    "start": "1049690",
    "end": "1056019"
  },
  {
    "text": "loop iteration that means we construct a temporary and destructed right after",
    "start": "1056019",
    "end": "1062769"
  },
  {
    "text": "that just ridiculous the waste of resources with a bit of luck the",
    "start": "1062769",
    "end": "1068080"
  },
  {
    "text": "compiler optimize this away now there's a second potential error source one",
    "start": "1068080",
    "end": "1073990"
  },
  {
    "text": "which is not that obvious often and that's the loop condition itself to be",
    "start": "1073990",
    "end": "1082059"
  },
  {
    "text": "precisely called to end this function is invoked at each loop iteration in most",
    "start": "1082059",
    "end": "1090429"
  },
  {
    "text": "cases and does not change anything because it's supposed to give you just",
    "start": "1090429",
    "end": "1096389"
  },
  {
    "text": "the end element so this means that of a",
    "start": "1096389",
    "end": "1102580"
  },
  {
    "text": "multiple calls and the result of and remains constant this is a great",
    "start": "1102580",
    "end": "1108970"
  },
  {
    "text": "opportunity for the optimizer in a very large number of cases it sees this",
    "start": "1108970",
    "end": "1114909"
  },
  {
    "text": "constant us and simply cashes the value of n for us so it does not get called",
    "start": "1114909",
    "end": "1123490"
  },
  {
    "text": "with any loop iteration anyhow for some reason and does look too complex to the",
    "start": "1123490",
    "end": "1131049"
  },
  {
    "text": "optimizer it leaves it as it is and as a result we end up with end getting called",
    "start": "1131049",
    "end": "1138570"
  },
  {
    "text": "with each loop iteration loop cycle now",
    "start": "1138570",
    "end": "1144370"
  },
  {
    "text": "we are luckily in modern Sybil of bluff array of the modern version using a",
    "start": "1144370",
    "end": "1149649"
  },
  {
    "text": "range base for loop the first thing I",
    "start": "1149649",
    "end": "1155500"
  },
  {
    "text": "like is it's much easier for the eye so let's type in two so all the things the",
    "start": "1155500",
    "end": "1162039"
  },
  {
    "text": "programmers love [Music] to be so are we supposed to react on",
    "start": "1162039",
    "end": "1168759"
  },
  {
    "text": "that sound it's a test okay my nice okay",
    "start": "1168759",
    "end": "1178109"
  },
  {
    "text": "for most this variant reduces the typing to the necessary parts the one which",
    "start": "1178259",
    "end": "1183669"
  },
  {
    "text": "changing all the time that's nice the other thing which is",
    "start": "1183669",
    "end": "1189940"
  },
  {
    "text": "nice is they're the two problematic parts are gone if you look closely we no longer need to write the iterator",
    "start": "1189940",
    "end": "1197559"
  },
  {
    "text": "increment hence we cannot do it in a less efficient way in addition the",
    "start": "1197559",
    "end": "1203580"
  },
  {
    "text": "comparison to the current iterator element and end is also no longer our part so let's hope whatever happens in",
    "start": "1203580",
    "end": "1211960"
  },
  {
    "text": "the background is now as as efficient as we could do it we will look to that in a",
    "start": "1211960",
    "end": "1218320"
  },
  {
    "text": "minute kind of disturbing please note",
    "start": "1218320",
    "end": "1224109"
  },
  {
    "text": "one thing that's the colorized ampersand with range based forbs in combination with Auto especially this one is often",
    "start": "1224109",
    "end": "1231129"
  },
  {
    "text": "forgotten that's a little bit due to the nature of how we've written it before",
    "start": "1231129",
    "end": "1238659"
  },
  {
    "text": "that omitting it means that we end up with a copy in each loop iteration",
    "start": "1238659",
    "end": "1245399"
  },
  {
    "text": "instead of what we more likely want a reference to the current iterated element so we supposedly dropped to",
    "start": "1245399",
    "end": "1254710"
  },
  {
    "text": "possible performance penalty mistakes and we got another one so we are down by",
    "start": "1254710",
    "end": "1260739"
  },
  {
    "text": "one that's good so how does this work internally this the definition of a",
    "start": "1260739",
    "end": "1266169"
  },
  {
    "text": "range base for is it can be found in the standard and it turns out that it's just syntactic sugar the compiler does the",
    "start": "1266169",
    "end": "1273489"
  },
  {
    "text": "transformation for us from a range base for to a traditional for loop that's",
    "start": "1273489",
    "end": "1278799"
  },
  {
    "text": "nice the important thing is there's the compiler aims for maximum efficiency it",
    "start": "1278799",
    "end": "1284700"
  },
  {
    "text": "always uses the pre increment so it does a good job there and it does a second",
    "start": "1284700",
    "end": "1292029"
  },
  {
    "text": "thing if you'll take a close look at the loop declaration it ensures caching",
    "start": "1292029",
    "end": "1298120"
  },
  {
    "text": "the value of end by storing it in a variable so it ensures caching",
    "start": "1298120",
    "end": "1307980"
  },
  {
    "text": "regardless of the quality of your optimizer it's guaranteed to be cached",
    "start": "1307980",
    "end": "1314460"
  },
  {
    "text": "that's a brilliant way of doing that it's nothing we couldn't have done our",
    "start": "1314460",
    "end": "1319480"
  },
  {
    "text": "selves but it's nice that the compiler does this for us in the background now",
    "start": "1319480",
    "end": "1328539"
  },
  {
    "text": "if you for some reason that society node have an application which relies on the",
    "start": "1328539",
    "end": "1334600"
  },
  {
    "text": "fact that end must be called with each loop iteration range based for loops are",
    "start": "1334600",
    "end": "1341260"
  },
  {
    "text": "nothing for you because they are definitely to be cashed in the other way",
    "start": "1341260",
    "end": "1347490"
  },
  {
    "text": "if n changes anything this will stop the optimizer from cashing it here it is",
    "start": "1347490",
    "end": "1354370"
  },
  {
    "text": "guaranteed to be optimized always all the time the whole thing is braised a",
    "start": "1354370",
    "end": "1361450"
  },
  {
    "text": "little bit on the curly braces you can see on the outside they open an",
    "start": "1361450",
    "end": "1366520"
  },
  {
    "text": "additional scope for the for loop or around it and with that the compiler ensures that all temporary variables",
    "start": "1366520",
    "end": "1373679"
  },
  {
    "text": "which it declares inside of that curly braces in this scope are destroyed at",
    "start": "1373679",
    "end": "1379510"
  },
  {
    "text": "the end of the loop applies to our example the code internally generated",
    "start": "1379510",
    "end": "1386500"
  },
  {
    "text": "for a numbers example looks like this numbers of our range initialization",
    "start": "1386500",
    "end": "1395309"
  },
  {
    "text": "vector kindly provides us with two members for beginning and end the next",
    "start": "1395309",
    "end": "1402250"
  },
  {
    "text": "step of the compiler would be to lick look for a begin and end in the global",
    "start": "1402250",
    "end": "1407890"
  },
  {
    "text": "scope the auto Rev iterator becomes the full",
    "start": "1407890",
    "end": "1417879"
  },
  {
    "text": "range declaration and we are basically done by the way this version omits the",
    "start": "1417879",
    "end": "1426100"
  },
  {
    "text": "same code as the one the compiler generates so I'm pretty sure it's the",
    "start": "1426100",
    "end": "1432759"
  },
  {
    "text": "same regardless of that these two versions seem to be a little bit less",
    "start": "1432759",
    "end": "1438850"
  },
  {
    "text": "efficient than the standard for loop that might come from the fact that we",
    "start": "1438850",
    "end": "1444159"
  },
  {
    "text": "have an additional variable here to cache end but I don't know one or two instructions more so was good",
    "start": "1444159",
    "end": "1454269"
  },
  {
    "text": "one thing which bothered me for some time was effect that I must have an",
    "start": "1454269",
    "end": "1459989"
  },
  {
    "text": "iterator which is never really iterated and that's due to the declaration nature of",
    "start": "1459989",
    "end": "1467590"
  },
  {
    "text": "begin and end they both must be of the same type and to be durable for the",
    "start": "1467590",
    "end": "1475330"
  },
  {
    "text": "iterator it must be type of iterator and this implies that end must be of type",
    "start": "1475330",
    "end": "1480639"
  },
  {
    "text": "iterator as well even as is never iterated we just need devalue luckily",
    "start": "1480639",
    "end": "1490359"
  },
  {
    "text": "this has changed with C++ 14 that's the version from the standard of C++ 14 and",
    "start": "1490359",
    "end": "1497080"
  },
  {
    "text": "17 the difference between the two versions is the way begin and end are",
    "start": "1497080",
    "end": "1503639"
  },
  {
    "text": "declared in CB of plus 14 this was part of the for loop declaration so we had a",
    "start": "1503639",
    "end": "1510249"
  },
  {
    "text": "one-liner this implies explained that begin and",
    "start": "1510249",
    "end": "1515950"
  },
  {
    "text": "end must be of the same type this limitation was lifted with C++ 14 here",
    "start": "1515950",
    "end": "1523090"
  },
  {
    "text": "begin and end I'll be cleared outside of the for loop but still within the curly brace scope so they can be of different",
    "start": "1523090",
    "end": "1531100"
  },
  {
    "text": "types and that's not a potential that end can be just an ordinary value with",
    "start": "1531100",
    "end": "1538090"
  },
  {
    "text": "no relations to the type iterator all we need to get the still working is",
    "start": "1538090",
    "end": "1546950"
  },
  {
    "text": "in comparison operator to not equal either in local or global scope when I",
    "start": "1546950",
    "end": "1556490"
  },
  {
    "text": "think about C++ 11 and its successors is the ability to write such a small and",
    "start": "1556490",
    "end": "1563740"
  },
  {
    "text": "totally worthless but still well it program here we have the lambda which",
    "start": "1563740",
    "end": "1569270"
  },
  {
    "text": "captures nothing takes no parameters has an empty function body and it's executed",
    "start": "1569270",
    "end": "1577070"
  },
  {
    "text": "directly so a lot of nothing nonetheless lambdas are an interesting",
    "start": "1577070",
    "end": "1583850"
  },
  {
    "text": "feature and I think it will take us a couple of years to see all the application areas where we apply them",
    "start": "1583850",
    "end": "1589820"
  },
  {
    "text": "best they are very powerful we can delay their execution we can use them together",
    "start": "1589820",
    "end": "1596870"
  },
  {
    "text": "with templates to pass lambda objects to other functions and we can execute them",
    "start": "1596870",
    "end": "1603320"
  },
  {
    "text": "there it's really powerful so to me they nonetheless look tiny that example here",
    "start": "1603320",
    "end": "1612590"
  },
  {
    "text": "will probably be optimized the way tomorrow will be happy but what do they really cost we we write them in line",
    "start": "1612590",
    "end": "1619220"
  },
  {
    "text": "it's not so much we have to do for them so to show you that here's a slightly",
    "start": "1619220",
    "end": "1627919"
  },
  {
    "text": "more useful lambda it showed us help to see what's going on behind the scenes let's see what it does it captures all",
    "start": "1627919",
    "end": "1635630"
  },
  {
    "text": "variables in scope as reference this enables us in the next step to increment",
    "start": "1635630",
    "end": "1641779"
  },
  {
    "text": "X by one and the lambdas body in the following line the lambda is executed",
    "start": "1641779",
    "end": "1647720"
  },
  {
    "text": "and that's it so it's not a most sophisticated code but it illustrates",
    "start": "1647720",
    "end": "1655010"
  },
  {
    "text": "the lambda on the right side this is how a lambda most likely looks from the",
    "start": "1655010",
    "end": "1661460"
  },
  {
    "text": "internal view of a compiler to be able",
    "start": "1661460",
    "end": "1667059"
  },
  {
    "text": "another this class as a compiler defined name so we do not",
    "start": "1667059",
    "end": "1673710"
  },
  {
    "text": "need to care what's the type of the lambda so it's unknown to us the essential part is the function called",
    "start": "1673710",
    "end": "1680399"
  },
  {
    "text": "operator within the lambda our compiler is so decent to created for us with",
    "start": "1680399",
    "end": "1686419"
  },
  {
    "text": "complete prototype and if necessary it also declares all required variables we",
    "start": "1686419",
    "end": "1692639"
  },
  {
    "text": "like to keep trying away reference or copy within the function called",
    "start": "1692639",
    "end": "1699149"
  },
  {
    "text": "operators body we find our actual code we've written for the lambdas body but",
    "start": "1699149",
    "end": "1706619"
  },
  {
    "text": "default the function call operator is marked as constant in case we like to be",
    "start": "1706619",
    "end": "1713940"
  },
  {
    "text": "able to change code inside lambda from a captured variable we must make it",
    "start": "1713940",
    "end": "1720269"
  },
  {
    "text": "mutable they attributed it like that",
    "start": "1720269",
    "end": "1724549"
  },
  {
    "text": "this two versions generates the 99%",
    "start": "1725690",
    "end": "1731629"
  },
  {
    "text": "equal clang intermediate language output there's the one thing I cannot give my",
    "start": "1731629",
    "end": "1742200"
  },
  {
    "text": "lambda the same name as the compiler internally dust because it starts it's variable sometimes within dollar sign or",
    "start": "1742200",
    "end": "1749489"
  },
  {
    "text": "just with numbers and there's a second",
    "start": "1749489",
    "end": "1754950"
  },
  {
    "text": "thing but that does not show up into this to keep it simple to give it small",
    "start": "1754950",
    "end": "1761159"
  },
  {
    "text": "end to keep it as the original version I made the member variable X public per",
    "start": "1761159",
    "end": "1770580"
  },
  {
    "text": "standard the compiler is required to make all captured variables private it",
    "start": "1770580",
    "end": "1778049"
  },
  {
    "text": "would for me require constructor to do that and it just blows up the code in",
    "start": "1778049",
    "end": "1786649"
  },
  {
    "text": "assembler output it boils down to a",
    "start": "1786649",
    "end": "1791669"
  },
  {
    "text": "pointer so it doesn't matter if you use the reference here or a pointer in the",
    "start": "1791669",
    "end": "1798029"
  },
  {
    "text": "illustration example the compiler internally treats a reference",
    "start": "1798029",
    "end": "1803430"
  },
  {
    "text": "Poynter this opens our view of it",
    "start": "1803430",
    "end": "1809340"
  },
  {
    "text": "because we now know it's a class and the class is the constructor and a destructor it's an object and the way we",
    "start": "1809340",
    "end": "1818070"
  },
  {
    "text": "capture values do also matter if we capture by reference we increase the size of the lambda by the natural size",
    "start": "1818070",
    "end": "1825600"
  },
  {
    "text": "of a reference an oil platform if you capture by copying we increase the size of our lambda by the type like a full",
    "start": "1825600",
    "end": "1833340"
  },
  {
    "text": "size of the type and maybe they are memory allocations happening in the",
    "start": "1833340",
    "end": "1838860"
  },
  {
    "text": "background so it's probably not that small as it looks in the first look",
    "start": "1838860",
    "end": "1847280"
  },
  {
    "text": "there are more lambdas on this slide they are still simple in case a 2d the",
    "start": "1848300",
    "end": "1858060"
  },
  {
    "text": "variables are copy constructed only in E and F we capture them by reference and",
    "start": "1858060",
    "end": "1871050"
  },
  {
    "text": "now if you take a close look and it's in",
    "start": "1871050",
    "end": "1876090"
  },
  {
    "text": "main it's the first look the second look is if you take a close look at all the",
    "start": "1876090",
    "end": "1881910"
  },
  {
    "text": "lambdas there none of them is invoked",
    "start": "1881910",
    "end": "1886850"
  },
  {
    "text": "none of them so I find it notable that only be e and F generate an unused",
    "start": "1887840",
    "end": "1898050"
  },
  {
    "text": "variable warning induced will most likely get optimized away all RS stay",
    "start": "1898050",
    "end": "1907500"
  },
  {
    "text": "around in your code they cause a construction construction and destruction every time you pass them",
    "start": "1907500",
    "end": "1916610"
  },
  {
    "text": "what happens there on a second sort of logic the compile and optimizer cannot",
    "start": "1917810",
    "end": "1924750"
  },
  {
    "text": "see through what we are doing here for bars it's a well it's used",
    "start": "1924750",
    "end": "1934370"
  },
  {
    "text": "when we capture something which alters the outside world because we capture by copy that changes something there's a",
    "start": "1934370",
    "end": "1942200"
  },
  {
    "text": "copy constructor involved or things like that so they leave them in place so the",
    "start": "1942200",
    "end": "1948650"
  },
  {
    "text": "question is what's different with B why the speed trigger an unused variable",
    "start": "1948650",
    "end": "1953900"
  },
  {
    "text": "warning to answer that let me first raise another question what happens if",
    "start": "1953900",
    "end": "1960830"
  },
  {
    "text": "we capture all in scope that was the first first thing which got me curious when assembled over lambdas we capture",
    "start": "1960830",
    "end": "1971000"
  },
  {
    "text": "everything in scope that means also global variables so doing that would",
    "start": "1971000",
    "end": "1976100"
  },
  {
    "text": "make a hell of lambda in a larger codebase so we are lucky the compilers",
    "start": "1976100",
    "end": "1983000"
  },
  {
    "text": "are friends even if you say we capture everything in scope the compilers are",
    "start": "1983000",
    "end": "1990140"
  },
  {
    "text": "decent for us to look in the body of the lambda and capture only those variables",
    "start": "1990140",
    "end": "1996200"
  },
  {
    "text": "which we really use so this reduces the size of lambda to the necessary parts",
    "start": "1996200",
    "end": "2002529"
  },
  {
    "text": "and that's the reason why B triggers an unused variable warning because the body",
    "start": "2002529",
    "end": "2009130"
  },
  {
    "text": "of the lambda is empty and we say simply that we like to capture everything in",
    "start": "2009130",
    "end": "2015580"
  },
  {
    "text": "scope by copy but the compiler finds out that we do not use any variable in the",
    "start": "2015580",
    "end": "2021539"
  },
  {
    "text": "body of the lambda so it doesn't capture anything that's why B triggers the",
    "start": "2021539",
    "end": "2027039"
  },
  {
    "text": "unused warning it's different for example in the case of the lambda D for",
    "start": "2027039",
    "end": "2035770"
  },
  {
    "text": "D we explicitly name the variable we like to capture by copy and that one",
    "start": "2035770",
    "end": "2041860"
  },
  {
    "text": "sticks if we name it the compiler takes it in in the moment we name the",
    "start": "2041860",
    "end": "2050080"
  },
  {
    "text": "variables it doesn't look in the body and optimize it away so I consider that worth knowing",
    "start": "2050080",
    "end": "2058270"
  },
  {
    "text": "when dealing with lambdas because if they stick around for debug purposes they can hurt",
    "start": "2058270",
    "end": "2065669"
  },
  {
    "text": "next item structural bindings structure bindings are a new feature coming will",
    "start": "2065720",
    "end": "2072148"
  },
  {
    "text": "C++ 17 or already there I'm not really aware of C++ 17 is finally out the",
    "start": "2072149",
    "end": "2079020"
  },
  {
    "text": "drawer currently they are called decomposition declarations in the",
    "start": "2079020",
    "end": "2084750"
  },
  {
    "text": "standard but there's already a proposal which intends to change the name back to",
    "start": "2084750",
    "end": "2090480"
  },
  {
    "text": "the more widely used structured bindings structure bindings enable us to access",
    "start": "2090480",
    "end": "2096990"
  },
  {
    "text": "multiple variables just with one single statement they use the power of auto to",
    "start": "2096990",
    "end": "2103680"
  },
  {
    "text": "do that in this example we initialize the variables X and epsilon which hold",
    "start": "2103680",
    "end": "2110010"
  },
  {
    "text": "the end variables from our point struct X and epsilon the array notation gives",
    "start": "2110010",
    "end": "2117809"
  },
  {
    "text": "us a clue that we get more than one values array syntax currently is",
    "start": "2117809",
    "end": "2125099"
  },
  {
    "text": "impossible and that's by design to skip well use in-between like it's",
    "start": "2125099",
    "end": "2131579"
  },
  {
    "text": "possible this two-tire it uses two thick nor for that it was decided for the",
    "start": "2131579",
    "end": "2139109"
  },
  {
    "text": "first draft of the for the first release of structural bindings that shouldn't be",
    "start": "2139109",
    "end": "2145020"
  },
  {
    "text": "possible so how do they work internally um everybody who was here for equalised",
    "start": "2145020",
    "end": "2152190"
  },
  {
    "text": "talked earlier this day got a claims on that it's roughly the code generated by",
    "start": "2152190",
    "end": "2157950"
  },
  {
    "text": "the compiler first the temporary hidden variable is created and this gets a lot",
    "start": "2157950",
    "end": "2166140"
  },
  {
    "text": "of PT or point aside afterwards the compiler creates two variables X and",
    "start": "2166140",
    "end": "2171480"
  },
  {
    "text": "epsilon for us just as we asked the our field of course was the value follow",
    "start": "2171480",
    "end": "2179369"
  },
  {
    "text": "points tracked the interesting part is they are more like a reference",
    "start": "2179369",
    "end": "2188930"
  },
  {
    "text": "to the inside of our point of our temporary and the whole magic of getting",
    "start": "2190099",
    "end": "2201609"
  },
  {
    "text": "the variable happens with yet yet looks",
    "start": "2201609",
    "end": "2209210"
  },
  {
    "text": "like a template which takes in parameters and index ranging from 0 to n",
    "start": "2209210",
    "end": "2214940"
  },
  {
    "text": "n minus 1 we can also make the CAPTCHA",
    "start": "2214940",
    "end": "2225019"
  },
  {
    "text": "under variables the reference then we",
    "start": "2225019",
    "end": "2230960"
  },
  {
    "text": "add on the left side TM % what's changing in the background is on the",
    "start": "2230960",
    "end": "2237920"
  },
  {
    "text": "right side that the temporary variable which is created it's a reference then",
    "start": "2237920",
    "end": "2243229"
  },
  {
    "text": "to our point and there was a little bit",
    "start": "2243229",
    "end": "2248420"
  },
  {
    "text": "surprised when I first realized that because I didn't think that there was",
    "start": "2248420",
    "end": "2254869"
  },
  {
    "text": "another variable constructed that means that we have a copy construction happening there in the background I was",
    "start": "2254869",
    "end": "2263119"
  },
  {
    "text": "under the impression that I get a copy of X and epsilon and not that there is",
    "start": "2263119",
    "end": "2268940"
  },
  {
    "text": "another object resulting first so how",
    "start": "2268940",
    "end": "2276769"
  },
  {
    "text": "does the compiler do that to find the decomposition the compiler takes three",
    "start": "2276769",
    "end": "2282529"
  },
  {
    "text": "steps first it checks if the object in question is an array just a simple form",
    "start": "2282529",
    "end": "2288349"
  },
  {
    "text": "for it all elements are accessible by default in the compiler knows their size and all the other things very well in",
    "start": "2288349",
    "end": "2296089"
  },
  {
    "text": "the case it's no array the compiler looks in step two for the simple tuple",
    "start": "2296089",
    "end": "2302509"
  },
  {
    "text": "size in the name space stood and in the last and in the final step the compiler",
    "start": "2302509",
    "end": "2309950"
  },
  {
    "text": "checks is the object in question is a class with only public members if none",
    "start": "2309950",
    "end": "2320239"
  },
  {
    "text": "of that is true we cannot use structured bindings this raised to concern to me that the",
    "start": "2320239",
    "end": "2328000"
  },
  {
    "text": "whole feature works only well with public classes and from my point of view",
    "start": "2328000",
    "end": "2333130"
  },
  {
    "text": "that's not what the class for class is to encapsulate stuff and not to give",
    "start": "2333130",
    "end": "2339130"
  },
  {
    "text": "world access so I asked myself how does this work with classes with private",
    "start": "2339130",
    "end": "2345460"
  },
  {
    "text": "members and I came up with a solution it's simple we just have to make the",
    "start": "2345460",
    "end": "2352360"
  },
  {
    "text": "compiler happy so for ads let's use an example point class here nothing new I",
    "start": "2352360",
    "end": "2363010"
  },
  {
    "text": "just changed from in to double to confuse you a little and because I think",
    "start": "2363010",
    "end": "2370060"
  },
  {
    "text": "it's the example of Scott Myers point class and is most recent book effective",
    "start": "2370060",
    "end": "2377440"
  },
  {
    "text": "more in C++ so that's the base and how do we make this class decomposable we",
    "start": "2377440",
    "end": "2384700"
  },
  {
    "text": "need to make the compiler happy and the compiler is happy when it finds the",
    "start": "2384700",
    "end": "2390430"
  },
  {
    "text": "symbol called tuple five in the names they stood for our class so let's give",
    "start": "2390430",
    "end": "2395950"
  },
  {
    "text": "it to him there are two ways that's the naive one in this tuple sighs",
    "start": "2395950",
    "end": "2405940"
  },
  {
    "text": "the compiler looks for member value for variable value the version one down is",
    "start": "2405940",
    "end": "2417610"
  },
  {
    "text": "the probably much better one because it uses the standard library stood integral",
    "start": "2417610",
    "end": "2424150"
  },
  {
    "text": "constant and this brings all the elements necessary with it so now we",
    "start": "2424150",
    "end": "2431430"
  },
  {
    "text": "have the symbol which tells the compiler how many variables are in our class to",
    "start": "2431430",
    "end": "2437320"
  },
  {
    "text": "be decomposed and we need two more template functions and the compiler uses",
    "start": "2437320",
    "end": "2444340"
  },
  {
    "text": "them to get the type of each variable it tries to get out of our class in our",
    "start": "2444340",
    "end": "2451450"
  },
  {
    "text": "simple example that's double for both cases so apply to",
    "start": "2451450",
    "end": "2458930"
  },
  {
    "text": "our example if you put it together now it looks like that to create part is from point from before and the colorized",
    "start": "2458930",
    "end": "2466970"
  },
  {
    "text": "palette is what you've seen on the slide before so there's one thing missing and",
    "start": "2466970",
    "end": "2472700"
  },
  {
    "text": "that's to get itself there's no get here so we need that that's the version",
    "start": "2472700",
    "end": "2478730"
  },
  {
    "text": "we'll get get is a template function and as we like to have access to our private",
    "start": "2478730",
    "end": "2487579"
  },
  {
    "text": "members it's within our class other possibility would to provide it in",
    "start": "2487579",
    "end": "2493160"
  },
  {
    "text": "global namespace here is in our class and it uses another very cool feature of",
    "start": "2493160",
    "end": "2500089"
  },
  {
    "text": "C++ 17d context per if this whole get is",
    "start": "2500089",
    "end": "2505609"
  },
  {
    "text": "completely constant expert it completely happens at compile time we know the",
    "start": "2505609",
    "end": "2510619"
  },
  {
    "text": "index of the elements we like to access and with the counts expert if we can",
    "start": "2510619",
    "end": "2516170"
  },
  {
    "text": "reduce the size of the function get to only the necessary part in case of index",
    "start": "2516170",
    "end": "2523339"
  },
  {
    "text": "0 it's only return M epsilon in case of index 1 its remember function call to",
    "start": "2523339",
    "end": "2531859"
  },
  {
    "text": "get X so that's that's cool that's nice",
    "start": "2531859",
    "end": "2540039"
  },
  {
    "text": "let's crazy form moment let's say okay and now we've did all that work but we like to",
    "start": "2540039",
    "end": "2547770"
  },
  {
    "text": "give out a reference to other internal variable let's same epsilon that defeats",
    "start": "2547770",
    "end": "2553600"
  },
  {
    "text": "the purpose a little but let's do that how do we do it",
    "start": "2553600",
    "end": "2559530"
  },
  {
    "text": "we have tackle type Auto putting prices around the variable in combination with",
    "start": "2559530",
    "end": "2566350"
  },
  {
    "text": "deco type Auto gives us a reference so that way we have also a function which",
    "start": "2566350",
    "end": "2573790"
  },
  {
    "text": "returns two different types first time a double second time a reference to double",
    "start": "2573790",
    "end": "2582270"
  },
  {
    "text": "that's powerful let's come to a more",
    "start": "2582270",
    "end": "2590950"
  },
  {
    "text": "well-known feature what do we know about static you have there for a long time",
    "start": "2590950",
    "end": "2602580"
  },
  {
    "text": "but what do we know about it there are simple things they are roughly excuse me",
    "start": "2602580",
    "end": "2610630"
  },
  {
    "text": "there are roughly four application areas a global variable can be marked as",
    "start": "2610630",
    "end": "2616030"
  },
  {
    "text": "static is that the lifetime of the variable is extended to the end of the",
    "start": "2616030",
    "end": "2621550"
  },
  {
    "text": "program its goal is also reduced to the current compile unit we can put static",
    "start": "2621550",
    "end": "2630790"
  },
  {
    "text": "on functions can mark them aesthetic then their visibility is reduced to the",
    "start": "2630790",
    "end": "2636070"
  },
  {
    "text": "current compile unit this gives the compiler by the way potential for several optimizations",
    "start": "2636070",
    "end": "2642610"
  },
  {
    "text": "about a function the static can also",
    "start": "2642610",
    "end": "2647920"
  },
  {
    "text": "apply it to a member function in this case the function exists without objects",
    "start": "2647920",
    "end": "2654400"
  },
  {
    "text": "the class itself it's one case we use often and last but not least static can",
    "start": "2654400",
    "end": "2662050"
  },
  {
    "text": "be applied to function local variables so you can have static local variables",
    "start": "2662050",
    "end": "2670180"
  },
  {
    "text": "within functions and there are a bit special they also have an extra paragraph and",
    "start": "2670180",
    "end": "2676240"
  },
  {
    "text": "standards that's how are they are described their local variables that's what a standard",
    "start": "2676240",
    "end": "2683140"
  },
  {
    "text": "defines I initialized the first time control panel system and that's",
    "start": "2683140",
    "end": "2688540"
  },
  {
    "text": "especially the feature we liked about them and I think why we use them so",
    "start": "2688540",
    "end": "2694140"
  },
  {
    "text": "let's focus on that how does this work the words in the",
    "start": "2694140",
    "end": "2700390"
  },
  {
    "text": "standard are pretty simple especially for us developers I like them it's the job of the compile I do not need to know",
    "start": "2700390",
    "end": "2706800"
  },
  {
    "text": "but I like to know so how does it do that even a compiler needs to keep track",
    "start": "2706800",
    "end": "2712330"
  },
  {
    "text": "of which variable was initialized which not so if this information needs to be",
    "start": "2712330",
    "end": "2719830"
  },
  {
    "text": "stored somewhere cannot come from nothing to keep track the compiler in",
    "start": "2719830",
    "end": "2726550"
  },
  {
    "text": "this conceptual code only the compiler introduces a new additional and for us",
    "start": "2726550",
    "end": "2732430"
  },
  {
    "text": "hidden variable let's call it compiler computed given the compilers generous",
    "start": "2732430",
    "end": "2740110"
  },
  {
    "text": "with our with us it uses a rule for its type which is set to false by default",
    "start": "2740110",
    "end": "2747180"
  },
  {
    "text": "next the compiler dissects our static variable a bit",
    "start": "2747180",
    "end": "2752280"
  },
  {
    "text": "instead of writing it as we would do it",
    "start": "2752280",
    "end": "2757410"
  },
  {
    "text": "reserves part of memory with the size of our object we like in addition it",
    "start": "2757410",
    "end": "2765520"
  },
  {
    "text": "introduces in you if this one uses the variable generated by the compiler to",
    "start": "2765520",
    "end": "2772590"
  },
  {
    "text": "detect whether the variable was initialized or our static was",
    "start": "2772590",
    "end": "2778570"
  },
  {
    "text": "initialized or not and in case we passed that if the first time the compiler",
    "start": "2778570",
    "end": "2785860"
  },
  {
    "text": "that's the conceptual part I'm not sure but calls the placement you to invoke",
    "start": "2785860",
    "end": "2792430"
  },
  {
    "text": "the constructor of the class and we are fine afterwards the compiler that's its",
    "start": "2792430",
    "end": "2799210"
  },
  {
    "text": "own variable to true the order here is important because the standard also",
    "start": "2799210",
    "end": "2804430"
  },
  {
    "text": "requires that we get a do-over in case the initialization of our static",
    "start": "2804430",
    "end": "2810640"
  },
  {
    "text": "sales the constructor throat's you should be able to pass that function",
    "start": "2810640",
    "end": "2817780"
  },
  {
    "text": "again and again and hope that it will work after some time or the second time",
    "start": "2817780",
    "end": "2823210"
  },
  {
    "text": "maybe so to maintain the exception safety the order is important the variable is set to true after we",
    "start": "2823210",
    "end": "2830560"
  },
  {
    "text": "successfully constructed our object so this static cost headaches for many",
    "start": "2830560",
    "end": "2838839"
  },
  {
    "text": "developers over the year against the years as you can see there's absolutely",
    "start": "2838839",
    "end": "2845440"
  },
  {
    "text": "no thread safety available and that's the best version of the static you can get the ones where you handle pointers",
    "start": "2845440",
    "end": "2852849"
  },
  {
    "text": "and you knew yourself there are worse so that's the best one",
    "start": "2852849",
    "end": "2858450"
  },
  {
    "text": "since years we are looking for methods to guard the section against concurrent",
    "start": "2858450",
    "end": "2866650"
  },
  {
    "text": "access and the really good news is since C++ 11 we no longer need to take pain",
    "start": "2866650",
    "end": "2874750"
  },
  {
    "text": "pills this single sentence is a game changer as part of C++ 11 it changed our world",
    "start": "2874750",
    "end": "2882400"
  },
  {
    "text": "for static if control enters the declaration concurrently while the",
    "start": "2882400",
    "end": "2889839"
  },
  {
    "text": "variable is being initialized the concurrent execution shall wait for",
    "start": "2889839",
    "end": "2895740"
  },
  {
    "text": "completion of the initialization beautiful now this nasty locking part is",
    "start": "2895740",
    "end": "2904750"
  },
  {
    "text": "child of the compiler let it deal with it go home wonderful huh thread safe",
    "start": "2904750",
    "end": "2914819"
  },
  {
    "text": "that's not sound easy task for us all the time though how does the compiler do",
    "start": "2914819",
    "end": "2921369"
  },
  {
    "text": "it based on the example from before our",
    "start": "2921369",
    "end": "2930310"
  },
  {
    "text": "bull increases slightly to an integer the low abide of the enterprise still",
    "start": "2930310",
    "end": "2938500"
  },
  {
    "text": "used as a bull to keep track of the initialization state the remaining parts",
    "start": "2938500",
    "end": "2945460"
  },
  {
    "text": "are used as mutex or atomic lock that",
    "start": "2945460",
    "end": "2951430"
  },
  {
    "text": "depends on implementation so we also got in not a new if this uses a function",
    "start": "2951430",
    "end": "2959260"
  },
  {
    "text": "called seeks our god choir and we have the six our god release afterwards and",
    "start": "2959260",
    "end": "2965430"
  },
  {
    "text": "they both take this compiler computed variable behind mainly the SIG's Angad",
    "start": "2965430",
    "end": "2974590"
  },
  {
    "text": "acquire function happens love magic it",
    "start": "2974590",
    "end": "2981670"
  },
  {
    "text": "depends on the configuration for example of your Jesus EEG plus plus or clang",
    "start": "2981670",
    "end": "2987180"
  },
  {
    "text": "what they believe or what you have configured them what is your threading",
    "start": "2987180",
    "end": "2992710"
  },
  {
    "text": "environment they either use and meet X or the last resort fallback they use",
    "start": "2992710",
    "end": "3000270"
  },
  {
    "text": "Atomics to guard the section and there",
    "start": "3000270",
    "end": "3006270"
  },
  {
    "text": "are also kinds of us because the",
    "start": "3006270",
    "end": "3011810"
  },
  {
    "text": "operation with some costs may be slow it may be delayed to get deadlock so this",
    "start": "3011810",
    "end": "3019290"
  },
  {
    "text": "is only done in the case the variable is really not initialized in all other circumstances we are fast so that's",
    "start": "3019290",
    "end": "3028500"
  },
  {
    "text": "wonderful we've got that out of our back we can be",
    "start": "3028500",
    "end": "3035820"
  },
  {
    "text": "happy we have thread side statics now",
    "start": "3035820",
    "end": "3040430"
  },
  {
    "text": "I'm in the embedded field I know a couple of operating systems which are",
    "start": "3043180",
    "end": "3050080"
  },
  {
    "text": "rather small which are not Linux based there are four tiny processors there are",
    "start": "3050080",
    "end": "3056670"
  },
  {
    "text": "environments where you have your own locks you know exactly what you're doing",
    "start": "3056670",
    "end": "3062440"
  },
  {
    "text": "your static is already guarded because you need to guard a much larger section",
    "start": "3062440",
    "end": "3068970"
  },
  {
    "text": "there are also environments where your single threaded just one thread doesn't",
    "start": "3068970",
    "end": "3075580"
  },
  {
    "text": "require a lock so but now the compiler throws in this lock that's good for all",
    "start": "3075580",
    "end": "3083770"
  },
  {
    "text": "the people working in an illustrated environment but for the ones in a single",
    "start": "3083770",
    "end": "3091780"
  },
  {
    "text": "threaded environment or for dudes who are controlling their environment precisely I don't know the interesting",
    "start": "3091780",
    "end": "3099850"
  },
  {
    "text": "thing is Jesus he generates code like",
    "start": "3099850",
    "end": "3105430"
  },
  {
    "text": "this since 2005 it was just not usable",
    "start": "3105430",
    "end": "3114310"
  },
  {
    "text": "that much for us because it was only TCC and it was a gvc specific enhancement so",
    "start": "3114310",
    "end": "3120640"
  },
  {
    "text": "it was not cross platform across compiler compatible and when they",
    "start": "3120640",
    "end": "3127990"
  },
  {
    "text": "introduced this feature there is a kind to add an option F no thread safe",
    "start": "3127990",
    "end": "3136720"
  },
  {
    "text": "statics to make it go away so that's the solution I hope or a",
    "start": "3136720",
    "end": "3143320"
  },
  {
    "text": "compiler rentals provide as well there's a dirty heck you can do at least for",
    "start": "3143320",
    "end": "3151570"
  },
  {
    "text": "clang and GCC the symbol seeks our guard acquire and seeks our God release are",
    "start": "3151570",
    "end": "3158580"
  },
  {
    "text": "intended to be overwritten by your standard library so the compiler provides them only if there is no",
    "start": "3158580",
    "end": "3165150"
  },
  {
    "text": "existing symbol for that so really dirty",
    "start": "3165150",
    "end": "3170620"
  },
  {
    "text": "trick is just widen yourself and implement them empty",
    "start": "3170620",
    "end": "3176040"
  },
  {
    "text": "and they will go away but it's just if you're controlling your environment and you know in what you're doing this also",
    "start": "3176040",
    "end": "3184980"
  },
  {
    "text": "applies only if we are dealing this object and to be specific objects with a",
    "start": "3184980",
    "end": "3190830"
  },
  {
    "text": "non-trivial constructor of a destructor let's switch here we have this singleton",
    "start": "3190830",
    "end": "3200790"
  },
  {
    "text": "still we have the static in there and a bit more complex I take an instance of",
    "start": "3200790",
    "end": "3208530"
  },
  {
    "text": "that singleton it has a set and a get now and in the set I pass arc C and",
    "start": "3208530",
    "end": "3214650"
  },
  {
    "text": "that's just to get the optimizer off my back I don't like this path to getting",
    "start": "3214650",
    "end": "3220680"
  },
  {
    "text": "optimized away and then I return the get but it's all and that's a good one",
    "start": "3220680",
    "end": "3228600"
  },
  {
    "text": "because that's a class with trivial",
    "start": "3228600",
    "end": "3234000"
  },
  {
    "text": "destructor and drivel constructor we will have no lock there from the",
    "start": "3234000",
    "end": "3239820"
  },
  {
    "text": "compiler because it doesn't matter for us we cannot see if this code is",
    "start": "3239820",
    "end": "3245010"
  },
  {
    "text": "initialized the first time we pass it in a function or at the start of the program doesn't matter what's missing",
    "start": "3245010",
    "end": "3255510"
  },
  {
    "text": "here is we've written so much code to have this singleton and where's the",
    "start": "3255510",
    "end": "3264780"
  },
  {
    "text": "constructor the constructors the default constructor and that's public so we have",
    "start": "3264780",
    "end": "3270450"
  },
  {
    "text": "the potential to have several singleton which defeats the purpose of the name singleton we can fix that and then",
    "start": "3270450",
    "end": "3278010"
  },
  {
    "text": "attempt to fix that is to make the constructor private so we're defining it",
    "start": "3278010",
    "end": "3285360"
  },
  {
    "text": "ourselves this gives us also the potential to initialize X to well-known",
    "start": "3285360",
    "end": "3291390"
  },
  {
    "text": "value and at the point where we end up with the locks again because now we've",
    "start": "3291390",
    "end": "3297840"
  },
  {
    "text": "provided our own constructor the class is no longer travels from the perspective of the compiler it will",
    "start": "3297840",
    "end": "3305370"
  },
  {
    "text": "start generating the locks we provided the code so it's on us to",
    "start": "3305370",
    "end": "3311520"
  },
  {
    "text": "know what we are doing we cannot work around that with the equals default we",
    "start": "3311520",
    "end": "3319830"
  },
  {
    "text": "can say yes please we like to have our constructor in the private section but",
    "start": "3319830",
    "end": "3325700"
  },
  {
    "text": "compiler please do provide implementation discounts a struggle for",
    "start": "3325700",
    "end": "3331770"
  },
  {
    "text": "the compiler so we will have no logs they are introduced by the compiler of",
    "start": "3331770",
    "end": "3338760"
  },
  {
    "text": "course the same thing is possible for the destructor we can do it in the less",
    "start": "3338760",
    "end": "3346830"
  },
  {
    "text": "efficient way by providing the empty curly braces then it's a constructor provided by us with code by us even if",
    "start": "3346830",
    "end": "3354800"
  },
  {
    "text": "we have not really written code there we can fix that with the equals default",
    "start": "3354800",
    "end": "3360950"
  },
  {
    "text": "that works too it stops working if for",
    "start": "3360950",
    "end": "3367320"
  },
  {
    "text": "some reason we declare the destructor workship if we have some application",
    "start": "3367320",
    "end": "3373260"
  },
  {
    "text": "where our singleton needs to be a base class for something even the equal",
    "start": "3373260",
    "end": "3378600"
  },
  {
    "text": "default does not help us in this case if",
    "start": "3378600",
    "end": "3384060"
  },
  {
    "text": "we have a virtual destructor even if defaulted it is a non-trivial",
    "start": "3384060",
    "end": "3390890"
  },
  {
    "text": "object for the compiler and with it and it will generate the logs for us so",
    "start": "3390890",
    "end": "3402050"
  },
  {
    "text": "that's all for my site my name is Andrea Ferris being a pleasure giving a talk to you today I'll be around for questions",
    "start": "3402050",
    "end": "3409560"
  },
  {
    "text": "either I think we have about three minutes for questions here or at the conference I'm here till Friday have a",
    "start": "3409560",
    "end": "3416580"
  },
  {
    "text": "nice lunch in case you have no questions",
    "start": "3416580",
    "end": "3420260"
  }
]