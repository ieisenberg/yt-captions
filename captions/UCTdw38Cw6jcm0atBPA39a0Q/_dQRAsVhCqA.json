[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "well good morning everyone or okay it's morning for me afternoon for probably most everyone",
    "start": "80",
    "end": "6240"
  },
  {
    "text": "else here um i do wish i was in oslo actually uh i'm in uh i'm out of texas in the usa um and",
    "start": "6240",
    "end": "13200"
  },
  {
    "text": "it's very warm here um and it's much nicer now as long i'm sure i think yesterday here the high hit something like 37c",
    "start": "13200",
    "end": "19520"
  },
  {
    "text": "so i would have much rather been and also enjoying the beautiful weather there but uh we do the best we can with what",
    "start": "19520",
    "end": "25359"
  },
  {
    "text": "we have so um i hope everyone enjoys this uh so my name is jimmy bogard you can find me on twitter at",
    "start": "25359",
    "end": "31359"
  },
  {
    "text": "jboguard and you can find this presentation all the color behind it on my github at github.com there's a",
    "start": "31359",
    "end": "38000"
  },
  {
    "text": "presentations repository there that you'll find has everything that you see here i blog about this topic and a lot of others",
    "start": "38000",
    "end": "44079"
  },
  {
    "text": "on my blog at jimmybogar.com and i am an independent consultant i'm also a technical fellow at",
    "start": "44079",
    "end": "49360"
  },
  {
    "text": "headspring which is a software consultancy out of austin texas and uh let's see i've got an mvp award",
    "start": "49360",
    "end": "55680"
  },
  {
    "text": "um i do a lot of open source stuff uh with auto map or mediator so um i've been doing domain durbin",
    "start": "55680",
    "end": "63680"
  },
  {
    "text": "design in one form or the other since about 2003 or 2004 um and i've been over that time i found",
    "start": "63680",
    "end": "71680"
  },
  {
    "text": "myself uh having different ways of applying the different concepts inside of domain",
    "start": "71680",
    "end": "78240"
  },
  {
    "text": "different design initially when i got started uh with domain different design i thought that everything that you needed",
    "start": "78240",
    "end": "84240"
  },
  {
    "text": "to do was a lot of upfront design and once you get the upfront design and the whiteboarding and stuff then the",
    "start": "84240",
    "end": "90240"
  },
  {
    "text": "models just come out of that so you have the conversations with the business you talk it over your team",
    "start": "90240",
    "end": "95600"
  },
  {
    "text": "you build this nice lovely model and then the code is supposed to be just fantastic but i often find is that that wasn't the",
    "start": "95600",
    "end": "101439"
  },
  {
    "text": "result i would see is that even though my model looked great the code still didn't look that great so let's talk a",
    "start": "101439",
    "end": "108079"
  },
  {
    "text": "little bit about what domain driven design is before we can talk about how we refactor ourselves into a good domain driven model so",
    "start": "108079",
    "end": "116159"
  },
  {
    "start": "110000",
    "end": "204000"
  },
  {
    "text": "domain german design in my words and by the way unfortunately the domain name design book doesn't just like have a bolded",
    "start": "116159",
    "end": "122320"
  },
  {
    "text": "definition for what domain number design is for me i try to think of it as it's an architectural design strategy",
    "start": "122320",
    "end": "128879"
  },
  {
    "text": "in which we selectively distill organize and abstract the body of knowledge from the real",
    "start": "128879",
    "end": "133920"
  },
  {
    "text": "world and users in the real world to our software and so the goal of domain driven design is not to represent",
    "start": "133920",
    "end": "140239"
  },
  {
    "text": "exactly the real world but to provide a sort of a distillation of the real world and to",
    "start": "140239",
    "end": "146560"
  },
  {
    "text": "software users can actually use and i like to think of it very similar to physics",
    "start": "146560",
    "end": "151840"
  },
  {
    "text": "where you have like very low level quantum mechanic physics that are really complicated math but as you",
    "start": "151840",
    "end": "158000"
  },
  {
    "text": "start to get higher up you have simpler equations and simpler problems they kind of encapsulate and abstract the details away",
    "start": "158000",
    "end": "163920"
  },
  {
    "text": "if you get really small the really like subatomic level then those equations go out the door but as",
    "start": "163920",
    "end": "169519"
  },
  {
    "text": "we move up in the size we can start to think of things in a different abstraction layer and domain-driven design is a lot like",
    "start": "169519",
    "end": "176080"
  },
  {
    "text": "that in which we're taking the real world which is very messy and kind of hard to deal with and saying we need to distill that down to",
    "start": "176080",
    "end": "182720"
  },
  {
    "text": "something that users can actually use we're not trying to represent everything in the real world but a piece",
    "start": "182720",
    "end": "187840"
  },
  {
    "text": "of it a part of it so that's uh we're not building software that represents like everything that could possibly happen in the world",
    "start": "187840",
    "end": "195120"
  },
  {
    "text": "so part of what you do with domain driven design is you try to build a model that represents that design and this is",
    "start": "195120",
    "end": "202720"
  },
  {
    "text": "known as a domain model and a domain model uh actually predates the domain-driven",
    "start": "202720",
    "end": "207840"
  },
  {
    "start": "204000",
    "end": "282000"
  },
  {
    "text": "design book and uh domain model i find the best definition actually from a book myself there",
    "start": "207840",
    "end": "214640"
  },
  {
    "text": "the patterns of enterprise application architecture and it defines a domain model is",
    "start": "214640",
    "end": "219680"
  },
  {
    "text": "an object model of the domain that incorporates both behavior and data so we take that domain",
    "start": "219680",
    "end": "227840"
  },
  {
    "text": "domain knowledge we distill it into some kind of object model and we ensure that that",
    "start": "227840",
    "end": "233439"
  },
  {
    "text": "object model that we build represents both the data and the behavior of that domain",
    "start": "233439",
    "end": "239439"
  },
  {
    "text": "and that's the real key here that we need to have both data and behavior we don't just have data",
    "start": "239439",
    "end": "244560"
  },
  {
    "text": "because that would just be a database and we don't have just behavior because those will just be functions it's the two together that really define",
    "start": "244560",
    "end": "251120"
  },
  {
    "text": "a cohesive domain model and these domain models move beyond just",
    "start": "251120",
    "end": "257440"
  },
  {
    "text": "kind of the nouns and verbs that we do from like kind of simplistic object modeling we look at the relationships between the",
    "start": "257440",
    "end": "263360"
  },
  {
    "text": "things we look at how that information changes over time and all those kind of uh considerations",
    "start": "263360",
    "end": "269360"
  },
  {
    "text": "pulled together give us our domain model so that's great we have this kind of",
    "start": "269360",
    "end": "275600"
  },
  {
    "text": "like ivory tower you know perfect view of the world of our domain model but we look at our code",
    "start": "275600",
    "end": "282000"
  },
  {
    "start": "282000",
    "end": "321000"
  },
  {
    "text": "after we do this domain modeling it sucks like the code is still really difficult to",
    "start": "282000",
    "end": "287040"
  },
  {
    "text": "read uh sure we have this this nice object model represents our data but the actual like the actual functionality of",
    "start": "287040",
    "end": "293040"
  },
  {
    "text": "our system we find that that still doesn't look great and so the the building blocks",
    "start": "293040",
    "end": "298160"
  },
  {
    "text": "of domain driven design don't really solve this for you um it's not like we could just take all the different kinds of things in",
    "start": "298160",
    "end": "304080"
  },
  {
    "text": "domain modeling uh we have entities aggregates services and that'll just kind of magically produce",
    "start": "304080",
    "end": "310560"
  },
  {
    "text": "a well-defined cohesive domain model so how do we get there and for this i",
    "start": "310560",
    "end": "317600"
  },
  {
    "text": "turn uh to a slightly older technique of test urban design that tells us in",
    "start": "317600",
    "end": "323600"
  },
  {
    "start": "321000",
    "end": "344000"
  },
  {
    "text": "order to build a well factored well understandable system we can follow these three basic steps we",
    "start": "323600",
    "end": "329520"
  },
  {
    "text": "write a failing test we write a passing test and that last critical step is to refactor",
    "start": "329520",
    "end": "335360"
  },
  {
    "text": "but most the system that i inherit most of the legacy systems or or systems that have a",
    "start": "335360",
    "end": "340720"
  },
  {
    "text": "well established body of functionality don't necessarily have the first two items they've kind of like well we've",
    "start": "340720",
    "end": "346639"
  },
  {
    "start": "344000",
    "end": "384000"
  },
  {
    "text": "got some tests and some of the tests passed but some of the tests fail but don't worry we've commented those out so you",
    "start": "346639",
    "end": "352800"
  },
  {
    "text": "have to worry about those anymore and so for these kinds of existing systems we have a lot of existing behavior",
    "start": "352800",
    "end": "358080"
  },
  {
    "text": "that we want to refactor into a well i thought out well designed domain model we have to get really good",
    "start": "358080",
    "end": "363759"
  },
  {
    "text": "at that third step which is refactoring now luckily we don't have to come up with all the",
    "start": "363759",
    "end": "370000"
  },
  {
    "text": "different refactoring techniques on our own that these are well-established names well-established practices that we can leverage as part",
    "start": "370000",
    "end": "377280"
  },
  {
    "text": "of our journey from taking a very simplified view of the world into a very rich domain model so if we're looking at",
    "start": "377280",
    "end": "385280"
  },
  {
    "start": "384000",
    "end": "473000"
  },
  {
    "text": "what can we build on top of what techniques can we choose from there's three really great books that define and describe different ways of",
    "start": "385280",
    "end": "392319"
  },
  {
    "text": "refactoring code into cleaner code at the end my favorite though is the working effectively with",
    "start": "392319",
    "end": "398800"
  },
  {
    "text": "legacy code book for michael feathers it's a very long book that this basically just how to add tests",
    "start": "398800",
    "end": "404560"
  },
  {
    "text": "to existing code and that's the that's how you can work effectively with legacy code",
    "start": "404560",
    "end": "409759"
  },
  {
    "text": "um and the other two great books that i find are martin fallow's refactoring book which has been updated to a second",
    "start": "409759",
    "end": "414880"
  },
  {
    "text": "edition uh that describes uh techniques in the small of how to refactor code",
    "start": "414880",
    "end": "420960"
  },
  {
    "text": "and then the techniques in the large are they are described in the refactoring to patterns book",
    "start": "420960",
    "end": "426240"
  },
  {
    "text": "and the refactoring uh the original refactoring book was really about looking at individual classes and",
    "start": "426240",
    "end": "431520"
  },
  {
    "text": "methods and then refactoring to patterns is trying to take that one step back and say we have all these design patterns and",
    "start": "431520",
    "end": "437520"
  },
  {
    "text": "they're not just a you know they're not just a recipe or checklist we say oh you've got all these different patterns and our codes are most code must be",
    "start": "437520",
    "end": "443680"
  },
  {
    "text": "clean and good instead it says let's look at code smells exhibited inside of our code base and use those",
    "start": "443680",
    "end": "449919"
  },
  {
    "text": "code smells to guide us toward perhaps different patterns design patterns that we can apply to help make",
    "start": "449919",
    "end": "455840"
  },
  {
    "text": "our code cleaner so i want to look at an existing system",
    "start": "455840",
    "end": "460960"
  },
  {
    "text": "that exhibits all the right things in terms of the names of things so all the names of things look good",
    "start": "460960",
    "end": "466879"
  },
  {
    "text": "from the business perspective but the behavior is hard to understand and sort of lack in any kind of design",
    "start": "466879",
    "end": "473280"
  },
  {
    "start": "473000",
    "end": "654000"
  },
  {
    "text": "so the current state of this system is uh this is a system for a loyalty reward system so in these kinds",
    "start": "473280",
    "end": "479280"
  },
  {
    "text": "of loyalty reward systems you have people that buy things from stores and",
    "start": "479280",
    "end": "484400"
  },
  {
    "text": "if you want to get more value out of your purchases then you can join a rewards program and",
    "start": "484400",
    "end": "489840"
  },
  {
    "text": "those reward programs reward you for loyalty for going to that store so the idea is that the more you purchase from",
    "start": "489840",
    "end": "495520"
  },
  {
    "text": "that uh from that store then you get points or something and then eventually you get uh you get",
    "start": "495520",
    "end": "501199"
  },
  {
    "text": "rewards for um basically for guests for giving up your personal information and purchase history",
    "start": "501199",
    "end": "506960"
  },
  {
    "text": "you get the you get the rewards on the other side so our domain model looks like this",
    "start": "506960",
    "end": "512080"
  },
  {
    "text": "um i said three kinds of things we have members we have rewards uh our our business owner doesn't like",
    "start": "512080",
    "end": "517760"
  },
  {
    "text": "to call them rewards they call them offers and then we have different types of offers in our system we've got",
    "start": "517760",
    "end": "523039"
  },
  {
    "text": "um kind of some metadata around what kind of offers we can give to our different customers",
    "start": "523039",
    "end": "528320"
  },
  {
    "text": "and so in our domain model we represent these concepts as domain objects so we have",
    "start": "528320",
    "end": "534480"
  },
  {
    "text": "entities and aggregates that represent these top-level concepts of members of offers and",
    "start": "534480",
    "end": "539600"
  },
  {
    "text": "offer types we also represent the relationships between those as different navigational properties on",
    "start": "539600",
    "end": "546480"
  },
  {
    "text": "each of our domain objects so in this picture for example i have a member object and a member has a set of assigned",
    "start": "546480",
    "end": "554320"
  },
  {
    "text": "offers and that's represented as a collection property on that object that i can go to a member object and i",
    "start": "554320",
    "end": "559600"
  },
  {
    "text": "can go look at then the list of their assigned offers we also have a reverse by looking at an",
    "start": "559600",
    "end": "564959"
  },
  {
    "text": "individual offer then they can look to see who was the member assigned to that one specific offer",
    "start": "564959",
    "end": "570959"
  },
  {
    "text": "and finally offers are associated with some kind of metadata information about that offer and that's that offer type uh class we",
    "start": "570959",
    "end": "578240"
  },
  {
    "text": "see at the bottom there so every single offer has a type associated to it and that type helps describe the behavior of the",
    "start": "578240",
    "end": "584800"
  },
  {
    "text": "offer as it's getting used throughout the application",
    "start": "584800",
    "end": "590000"
  },
  {
    "text": "so i can take this picture and show it to the business and there'd be nothing",
    "start": "590000",
    "end": "596480"
  },
  {
    "text": "here that they would disagree with yes we have members and this is the information about our members oh yeah we have offers and this is the",
    "start": "596480",
    "end": "602399"
  },
  {
    "text": "information about offers and yes this is they can even understand their relationships just a member will have many assigned offers uh an offer will",
    "start": "602399",
    "end": "608800"
  },
  {
    "text": "have a type associated with it um maybe this is done in this kind of diagram in a class diagram",
    "start": "608800",
    "end": "614959"
  },
  {
    "text": "uh sometimes i've seen it of course done in kind of an innovative relationship diagram or like a class tables and a database but i should",
    "start": "614959",
    "end": "622160"
  },
  {
    "text": "be able to take the kind of informational model and share that with the customer in some kind of abstract form and they should be",
    "start": "622160",
    "end": "627920"
  },
  {
    "text": "able to understand what it means and also agree with all the different names associated with all the different",
    "start": "627920",
    "end": "633360"
  },
  {
    "text": "properties types and associations here so i could show this to the business and there would be nothing",
    "start": "633360",
    "end": "638480"
  },
  {
    "text": "they disagree with but you look at this ask does this actually represent a",
    "start": "638480",
    "end": "644000"
  },
  {
    "text": "domain model we go back to the definition the definition of domain models that incorporates both data",
    "start": "644000",
    "end": "650240"
  },
  {
    "text": "and behavior but looking at this model where is the behavior well this domain",
    "start": "650240",
    "end": "657360"
  },
  {
    "start": "654000",
    "end": "803000"
  },
  {
    "text": "model doesn't live by itself it's probably as part of some application that's running or some system",
    "start": "657360",
    "end": "663120"
  },
  {
    "text": "and so the behavior does exist somewhere it's just not encapsulated as part of the domain so if i want to",
    "start": "663120",
    "end": "669200"
  },
  {
    "text": "find out where the behavior actually exists in the system i look for those helper classes",
    "start": "669200",
    "end": "674240"
  },
  {
    "text": "and those have a lot of different names um i've seen over the years so uh the names of those classes",
    "start": "674240",
    "end": "679680"
  },
  {
    "text": "typically don't have anything that describes the function that they are so you have things like service",
    "start": "679680",
    "end": "685920"
  },
  {
    "text": "or handler or manager or controller or page like all those things describe",
    "start": "685920",
    "end": "691600"
  },
  {
    "text": "kind of what it's doing but not the behavior behind the scenes so that that behavior does exist",
    "start": "691600",
    "end": "697920"
  },
  {
    "text": "somewhere in our application but it's not encapsulated inside a domain model so what i want to",
    "start": "697920",
    "end": "703920"
  },
  {
    "text": "do from here is take an example of one of these services",
    "start": "703920",
    "end": "709440"
  },
  {
    "text": "and refactor its code until it's encapsulated inside the domain model the reason why i want to approach it",
    "start": "709440",
    "end": "715120"
  },
  {
    "text": "this direction because this picture is super easy to do",
    "start": "715120",
    "end": "720800"
  },
  {
    "text": "with a business i'd say super easy it's relatively easy to do with the business",
    "start": "720800",
    "end": "726000"
  },
  {
    "text": "we can whiteboard this we can we can erase things and move things around and come to a pretty good understanding of",
    "start": "726000",
    "end": "732240"
  },
  {
    "text": "what the domain model's information shape needs to look like the behavioral shape though is much harder",
    "start": "732240",
    "end": "738000"
  },
  {
    "text": "to whiteboard the behavioral shape you almost have to start with code and refactor into the shape it needs to",
    "start": "738000",
    "end": "744320"
  },
  {
    "text": "be we can make educated guesses sometimes about where the behavior needs to be but",
    "start": "744320",
    "end": "749440"
  },
  {
    "text": "those are just guesses in terms of where the behavior needs to go and what it needs to look like",
    "start": "749440",
    "end": "755440"
  },
  {
    "text": "i want the code to tell me where it needs to go and the way it's going to tell me where it needs to go is through the code",
    "start": "755440",
    "end": "761680"
  },
  {
    "text": "smells it exhibits and the way i know where it's uh where where it ends up that that's the right place is that",
    "start": "761680",
    "end": "768639"
  },
  {
    "text": "after refactoring the design is cleaner and more understandable so",
    "start": "768639",
    "end": "774160"
  },
  {
    "text": "i want to take something that is inside of that services folder and i want to refactor it towards my",
    "start": "774160",
    "end": "780320"
  },
  {
    "text": "domain model so instead of just refactoring kind of in a bubble for me the behavioral domain model uh is",
    "start": "780320",
    "end": "788240"
  },
  {
    "text": "really formed by refactoring the behavior towards the domain model so that the domain",
    "start": "788240",
    "end": "794240"
  },
  {
    "text": "model truly becomes a rich behavioral and data structure so i'm going to switch",
    "start": "794240",
    "end": "799279"
  },
  {
    "text": "over now to visual studio okay so i have here uh",
    "start": "799279",
    "end": "807760"
  },
  {
    "start": "803000",
    "end": "917000"
  },
  {
    "text": "in this case i'm actually using a library that i wrote uh called mediator and meteor is basically uh just a",
    "start": "807760",
    "end": "814800"
  },
  {
    "text": "library to help encapsulate requests and responses in the system and i kind of think that this is like many domain services from the main",
    "start": "814800",
    "end": "820720"
  },
  {
    "text": "driven design book um and that they represent exactly one function or one operation that you perform",
    "start": "820720",
    "end": "826720"
  },
  {
    "text": "so i'm really big on vertical slice architecture the idea that i put everything related",
    "start": "826720",
    "end": "831760"
  },
  {
    "text": "to a feature next to each other and so this represents all the functionality and behavior",
    "start": "831760",
    "end": "836880"
  },
  {
    "text": "required to assign an offer to a member now this class by itself um this is my",
    "start": "836880",
    "end": "843360"
  },
  {
    "text": "first go-around at tritonis and when i first write any of these kind of handlers or services",
    "start": "843360",
    "end": "849279"
  },
  {
    "text": "i want to make it as dumb and procedural as possible and the final step in that red green",
    "start": "849279",
    "end": "854880"
  },
  {
    "text": "refactor step um you don't have tests then i guess it's just a factor it's a final step to be able to say now",
    "start": "854880",
    "end": "860880"
  },
  {
    "text": "we need to refactor it now that's the part i usually leave out in my in my talks about vertical slice architecture i just say just make it as",
    "start": "860880",
    "end": "867600"
  },
  {
    "text": "dumb as procedural as possible and then just refactor at the end and everything's great um",
    "start": "867600",
    "end": "872639"
  },
  {
    "text": "but not many people know how that looks like or what what it means to actually refactor something so that's why i want to walk through",
    "start": "872639",
    "end": "878480"
  },
  {
    "text": "here so this class completely encapsulates the work to assign an offer to a member",
    "start": "878480",
    "end": "884079"
  },
  {
    "text": "i have one single input which is this offer request object and that carries the two pieces of data",
    "start": "884079",
    "end": "890000"
  },
  {
    "text": "required to perform that operation i need to know the the id of the member",
    "start": "890000",
    "end": "895040"
  },
  {
    "text": "that you want to assign to and i need to know what kind of opera what type of offer",
    "start": "895040",
    "end": "900079"
  },
  {
    "text": "i want to assign to that member so those these three pieces of information the data the member id the offer type id",
    "start": "900079",
    "end": "907440"
  },
  {
    "text": "and the operation you want to perform assigning an offer those three pieces together are able to encapsulate the",
    "start": "907440",
    "end": "913360"
  },
  {
    "text": "work necessary to assign an offer to a member so let's look at this fun class",
    "start": "913360",
    "end": "920880"
  },
  {
    "start": "917000",
    "end": "1321000"
  },
  {
    "text": "um and it's not short it's kind of long not terribly slightly long",
    "start": "920880",
    "end": "926240"
  },
  {
    "text": "because i don't have hours to refactor this we only have about 45 minutes uh but i wanted to represent the kinds of different things i typically see",
    "start": "926240",
    "end": "932240"
  },
  {
    "text": "happening in a given handler for one of the kind of normal projects that i work on",
    "start": "932240",
    "end": "937759"
  },
  {
    "text": "so let's walk through these individual steps one by one well the first step we have to do in",
    "start": "937759",
    "end": "942880"
  },
  {
    "text": "this class is well we have to load some information so in this case i'm just using",
    "start": "942880",
    "end": "947920"
  },
  {
    "text": "entity framework so this is just a db context uh and that dbcontext we're going to find the member by id we're going to find the",
    "start": "947920",
    "end": "955360"
  },
  {
    "text": "offer type id now the work required to assign an offer to a member is not as simple as just inserting a row",
    "start": "955360",
    "end": "962079"
  },
  {
    "text": "into a database so i'm doing some more complex logic behind the scenes so that's why i'm actually pulling back these objects as opposed to just like",
    "start": "962079",
    "end": "968399"
  },
  {
    "text": "an insert statement in the database so it's more complicated than just sql can handle so that's we have it in c sharp",
    "start": "968399",
    "end": "974480"
  },
  {
    "text": "okay got the member got the offer um the first thing we need to do is understand what is the value of the offer that we",
    "start": "974480",
    "end": "981600"
  },
  {
    "text": "want to give to the client well for this the client decided that uh code wasn't good enough",
    "start": "981600",
    "end": "987360"
  },
  {
    "text": "so we wanted to have a rules engine to be able to do this work and this rules engine is behind an api",
    "start": "987360",
    "end": "992639"
  },
  {
    "text": "and so this first set of calls here is about calling some api be able to",
    "start": "992639",
    "end": "998480"
  },
  {
    "text": "calculate the offer for a given member based on the their email address and the offer type",
    "start": "998480",
    "end": "1003680"
  },
  {
    "text": "so all the work behind the scenes they're like oh this this member is like a super duper member that has a lot of",
    "start": "1003680",
    "end": "1009839"
  },
  {
    "text": "history so we're going to give him a good offer where this other member is maybe not so not such a frequent shopper so we're",
    "start": "1009839",
    "end": "1015120"
  },
  {
    "text": "going to give him a lower value uh lower value offer so the the logic to figure out what we should",
    "start": "1015120",
    "end": "1022880"
  },
  {
    "text": "offer that uh what what the offer value should be is in behind this api call",
    "start": "1022880",
    "end": "1028000"
  },
  {
    "text": "so that's step one step two we need to calculate the expiration date now for this system we have two kinds of",
    "start": "1028000",
    "end": "1035600"
  },
  {
    "text": "uh expiration types based on my uh based on my offer type so if i go to my offer type object we've",
    "start": "1035600",
    "end": "1042000"
  },
  {
    "text": "got the name the number of days that could be valid we have expiration type an expiration type represents",
    "start": "1042000",
    "end": "1047600"
  },
  {
    "text": "two ways of doing expirations one is an assignment based expiration saying that this offer is valid until the specific",
    "start": "1047600",
    "end": "1053600"
  },
  {
    "text": "uh date when that offer is assigned",
    "start": "1053600",
    "end": "1059120"
  },
  {
    "text": "or it's on a fixed date so you could say like we have a a new year's uh new year's day offer and",
    "start": "1059120",
    "end": "1065600"
  },
  {
    "text": "that offer is good for the next week and so that offer is good from january 1st to january 7th",
    "start": "1065600",
    "end": "1071840"
  },
  {
    "text": "sometimes we have a offers based on when they are signed and so that's the first one there so whenever i sign the offer it's good",
    "start": "1071840",
    "end": "1078720"
  },
  {
    "text": "for the next seven days the next 14 days the next 30 days whatever that is but it's more of a sliding expiration so",
    "start": "1078720",
    "end": "1083919"
  },
  {
    "text": "whenever i sign the offer that's when that offer uh is expiring",
    "start": "1083919",
    "end": "1090240"
  },
  {
    "text": "so that's what this switched switch name it is it is calculating the logic for uh when",
    "start": "1090880",
    "end": "1097360"
  },
  {
    "text": "that offer should expire with the switch statement so now that i have the value of the offer",
    "start": "1097360",
    "end": "1102640"
  },
  {
    "text": "and i've got when it expires now i can do the final piece of work of assigning the offer to the member",
    "start": "1102640",
    "end": "1108320"
  },
  {
    "text": "so down here we are going to instantiate a new offer passing it all the properties that it",
    "start": "1108320",
    "end": "1113440"
  },
  {
    "text": "needs we're going to add that offer to the assigned offers",
    "start": "1113440",
    "end": "1118799"
  },
  {
    "text": "collection on the member object and the next thing i do is going to increment the number of active offers",
    "start": "1118799",
    "end": "1124240"
  },
  {
    "text": "for that user so this is something that's a calculated property on this object that i need to keep track of to understand",
    "start": "1124240",
    "end": "1130000"
  },
  {
    "text": "like when the user logs into the to the system they just see a big you know a big number at the top that",
    "start": "1130000",
    "end": "1135360"
  },
  {
    "text": "says here's the number of offers you have so instead of me having to make all those calculations behind the scenes having to fetch additional data i'm just",
    "start": "1135360",
    "end": "1141039"
  },
  {
    "text": "going to pre-calculate that information and store it on the member object themselves",
    "start": "1141039",
    "end": "1146320"
  },
  {
    "text": "and the final piece i need to do is to save those objects so i'm going to add the",
    "start": "1146320",
    "end": "1151840"
  },
  {
    "text": "offer to the offers dbset and entity framework and then finally save it",
    "start": "1151840",
    "end": "1157679"
  },
  {
    "text": "so i load the objects perform some calculations make the appropriate associations and",
    "start": "1157679",
    "end": "1164000"
  },
  {
    "text": "then finally save the objects if i look at most of the work in my system it's basically this",
    "start": "1164000",
    "end": "1170000"
  },
  {
    "text": "i load some data i do a bunch of work and then i save the data and so the the",
    "start": "1170000",
    "end": "1176160"
  },
  {
    "text": "loading and the saving part is the most boring aspect of the system the interesting part is the stuff in the",
    "start": "1176160",
    "end": "1181919"
  },
  {
    "text": "middle you can actually tell here because it got so complicated that we actually started to comment our code about what this logic",
    "start": "1181919",
    "end": "1188799"
  },
  {
    "text": "was doing so we can separate out logically like this is the part where we're calculating now for the value this is the part where we're calculating",
    "start": "1188799",
    "end": "1194320"
  },
  {
    "text": "the expiration date and this is why we're actually assigning the offer to that member so i've been looking at this code and",
    "start": "1194320",
    "end": "1201760"
  },
  {
    "text": "this obviously is complex enough that we're adding code comments then the very next thing i'm going to do",
    "start": "1201760",
    "end": "1208320"
  },
  {
    "text": "is say how can we how can we makes this code cleaner so the first step that i would look at for this kind of code is applying a",
    "start": "1208320",
    "end": "1215200"
  },
  {
    "text": "refactoring and the first free factor i look at applying for something like this describe a long method",
    "start": "1215200",
    "end": "1220400"
  },
  {
    "text": "that is a refractory node is compose method and components compose method for factoring involves",
    "start": "1220400",
    "end": "1226080"
  },
  {
    "text": "uh taking every single block of logically defined set of operations and extracting individual methods for",
    "start": "1226080",
    "end": "1232080"
  },
  {
    "text": "each of those sets of operations at the same conceptual level so i can",
    "start": "1232080",
    "end": "1237120"
  },
  {
    "text": "i can determine what those conceptual operations are by the code comments if i have code comments that separates",
    "start": "1237120",
    "end": "1242720"
  },
  {
    "text": "out these individual steps instead of me having comments describing the code although we have self-describing code",
    "start": "1242720",
    "end": "1248880"
  },
  {
    "text": "and then i will extract methods for each of these operations so i'm going to first extract a method",
    "start": "1248880",
    "end": "1255200"
  },
  {
    "text": "here now i'm using resharper and i'll show you why in a second why i want to do that so i'm going to say extract a method for",
    "start": "1255200",
    "end": "1262320"
  },
  {
    "text": "this block of code and the name of the method i'm just going to make",
    "start": "1262320",
    "end": "1267679"
  },
  {
    "text": "calculate offer value the same text to the comment like if",
    "start": "1267679",
    "end": "1272880"
  },
  {
    "text": "it's important enough to have the comment called that then let's call the method the exact same thing so all right so that block of code was",
    "start": "1272880",
    "end": "1280880"
  },
  {
    "text": "extracted out i can go down and look at it see if everything looks okay yeah everything looks okay uh this",
    "start": "1280880",
    "end": "1286480"
  },
  {
    "text": "doesn't look right i don't know why i have a temporary variable here so i can go ahead and inline that because i don't need that",
    "start": "1286480",
    "end": "1291919"
  },
  {
    "text": "additional variable and everything looks okay here okay",
    "start": "1291919",
    "end": "1297600"
  },
  {
    "text": "now um what if i don't like this like uh i didn't look like my code doesn't look",
    "start": "1297600",
    "end": "1303280"
  },
  {
    "text": "better um every refactoring that i have should have an equal and opposite refactoring to reverse back the",
    "start": "1303280",
    "end": "1309440"
  },
  {
    "text": "operations i just performed so that is available to me in resharper i can say inline method",
    "start": "1309440",
    "end": "1315039"
  },
  {
    "text": "which is the reverse of extract method when an inline method it should go back to where it was before",
    "start": "1315039",
    "end": "1322320"
  },
  {
    "start": "1321000",
    "end": "1362000"
  },
  {
    "text": "everything's back exactly where it was huzzah i like where it was before the reason",
    "start": "1322400",
    "end": "1328400"
  },
  {
    "text": "why i want to show that is uh it's very important for me that for me to to have confidence and have",
    "start": "1328400",
    "end": "1334000"
  },
  {
    "text": "safety associated with these refactorings it's not enough that i just have a one-way refactoring i really need to",
    "start": "1334000",
    "end": "1339919"
  },
  {
    "text": "have the reverse as well so if i make a change to my code and i don't like what i see i can reverse that change as well",
    "start": "1339919",
    "end": "1346159"
  },
  {
    "text": "through an opposite refactoring and i won't always have the undo uh",
    "start": "1346159",
    "end": "1351200"
  },
  {
    "text": "button available to me or the undo undo operation i may have to have that logical undo in this case which is",
    "start": "1351200",
    "end": "1357840"
  },
  {
    "text": "inline that method so let's go back i liked what it was before",
    "start": "1357840",
    "end": "1362559"
  },
  {
    "text": "value equals the weight calculate offer okay so the next place we have is calculating the expiration date let's do",
    "start": "1363520",
    "end": "1368799"
  },
  {
    "text": "the exact same thing we have there so highlight the the code we want to extract a method for extract a method in this case we're",
    "start": "1368799",
    "end": "1375440"
  },
  {
    "text": "going to call it calculate expiration date",
    "start": "1375440",
    "end": "1382559"
  },
  {
    "text": "and the final one is assigning the offer so extracting this set of code by itself",
    "start": "1382799",
    "end": "1389840"
  },
  {
    "text": "assign offer",
    "start": "1392159",
    "end": "1396480"
  },
  {
    "text": "and then the final piece is there's a these two things kind of go together of saving saving the thing so let's extract a",
    "start": "1398000",
    "end": "1404080"
  },
  {
    "text": "method for that as well save offer",
    "start": "1404080",
    "end": "1411039"
  },
  {
    "text": "okay so this may be where i stop on a lot of",
    "start": "1412080",
    "end": "1418799"
  },
  {
    "text": "work factoring as i do that says okay you know we uh",
    "start": "1418799",
    "end": "1423919"
  },
  {
    "text": "we had a long method it was too long we didn't extract just one method what we want to do is extract individual methods",
    "start": "1423919",
    "end": "1429200"
  },
  {
    "text": "for each set of operations that we have so the next developer coming and looking at this oh let's just get rid of these comments we don't need this do we yep yep",
    "start": "1429200",
    "end": "1436880"
  },
  {
    "text": "instead of having comments describe these sets of operations we have methods to describe the operations when i have those methods it's very easy",
    "start": "1436880",
    "end": "1443039"
  },
  {
    "text": "for me to tell exactly the information required to be able to perform those operations so i can see calculated for value requires the member",
    "start": "1443039",
    "end": "1449760"
  },
  {
    "text": "and the offer type calculated expiration tape just requires the offer type and assigning the offer requires the member the offer type",
    "start": "1449760",
    "end": "1456400"
  },
  {
    "text": "the value and the expiration date as well so it's very for easy for me to see for",
    "start": "1456400",
    "end": "1461520"
  },
  {
    "text": "each individual operation exactly the information necessary to perform those operations",
    "start": "1461520",
    "end": "1468240"
  },
  {
    "text": "okay but that's not that's not quite good enough because we're doing domain-driven design and i want to refactor this code towards the",
    "start": "1468240",
    "end": "1475200"
  },
  {
    "text": "domain model and right now this this code and logic is still just inside the single service handler class so let's look at",
    "start": "1475200",
    "end": "1482640"
  },
  {
    "text": "each of these methods one by one and figure out how we can refactor that code towards",
    "start": "1482640",
    "end": "1487919"
  },
  {
    "text": "a domain model and let's start at the top i've got this method here called",
    "start": "1487919",
    "end": "1493679"
  },
  {
    "text": "calculate offer value and this calculate offer value",
    "start": "1493679",
    "end": "1498720"
  },
  {
    "text": "actually let's change the order of the parameters real quick i want the cancellation token so i just got rid of that thing but i",
    "start": "1498720",
    "end": "1505919"
  },
  {
    "text": "guess you're supposed to use it all the time uh let's move cancellation so you can laugh so it doesn't confuse me and so we have the the member",
    "start": "1505919",
    "end": "1512000"
  },
  {
    "text": "and the offer type and if i look at this code",
    "start": "1512000",
    "end": "1517600"
  },
  {
    "text": "it's not like it's dealing with any one of these objects by itself so it's dealing with both member information",
    "start": "1518159",
    "end": "1523360"
  },
  {
    "text": "and offer type information so i don't think i can move that logic just to one of those objects",
    "start": "1523360",
    "end": "1528880"
  },
  {
    "text": "but if i wanted to do any other kind of testing for this individual handler be a bit",
    "start": "1528880",
    "end": "1534799"
  },
  {
    "text": "difficult because i have this dependency on an http client so what we can do is",
    "start": "1534799",
    "end": "1543200"
  },
  {
    "text": "move this method out somewhere else into a separate service so that that service is then",
    "start": "1543200",
    "end": "1550559"
  },
  {
    "text": "encapsulated for or encapsulates all the logic needed to calculate the offer value for a member",
    "start": "1550559",
    "end": "1555840"
  },
  {
    "text": "and a given uh offer type okay so the first thing we're going to",
    "start": "1555840",
    "end": "1561679"
  },
  {
    "text": "do is extract a class so i've got my my little carrot on this one method i'm going to say refactor",
    "start": "1561679",
    "end": "1567919"
  },
  {
    "text": "and extract a class and this will tell me ask me first what's the name of the",
    "start": "1567919",
    "end": "1574000"
  },
  {
    "text": "class we're going to call it so let's call it offer value calculator and only things we're",
    "start": "1574000",
    "end": "1579919"
  },
  {
    "text": "trying to do here is name it based on the the uh the responsibility and the role of this",
    "start": "1579919",
    "end": "1585360"
  },
  {
    "text": "object so things that don't really describe the role like like service manager helper those don't really",
    "start": "1585360",
    "end": "1591120"
  },
  {
    "text": "describe the behavior associated with it so i try to make the last part like the the name of this",
    "start": "1591120",
    "end": "1596400"
  },
  {
    "text": "thing represent the verb that it's trying to perform so it's a calculator it calculates an object",
    "start": "1596400",
    "end": "1602400"
  },
  {
    "text": "um it needs to use some objects to do its work so i'm going to say yep you need to pull that thing over and that's now going to be a a member on",
    "start": "1602400",
    "end": "1610799"
  },
  {
    "text": "that target object and this method is private so we need to go ahead and make that public",
    "start": "1610799",
    "end": "1616720"
  },
  {
    "text": "and click next and now we have oh here we go uh offer value",
    "start": "1616720",
    "end": "1623840"
  },
  {
    "text": "calculator that accepts an hp client and now it has this public method for calculate offer value and then down",
    "start": "1623840",
    "end": "1630880"
  },
  {
    "text": "here below we've got the offer value calculator um but now it's getting instantiated",
    "start": "1630880",
    "end": "1636400"
  },
  {
    "text": "uh directly inside of here so i'm going to change that a little bit",
    "start": "1636400",
    "end": "1641840"
  },
  {
    "text": "i'm going to uh actually let's do this first let's extract an interface here because the",
    "start": "1642080",
    "end": "1647200"
  },
  {
    "text": "overall goal here is to have my service class not depend on a a concretion here",
    "start": "1647200",
    "end": "1652880"
  },
  {
    "text": "especially when dealing with external dependencies of an hp client so i'm going to extract an interface for",
    "start": "1652880",
    "end": "1660000"
  },
  {
    "text": "this class called i offer value calculator okay so this",
    "start": "1660000",
    "end": "1665760"
  },
  {
    "text": "interface now represents uh the operation to calculate an offer i don't like that name",
    "start": "1665760",
    "end": "1671120"
  },
  {
    "text": "it's redundant i have i offer value calculator with method called calculate offer value that seems redundant so let's rename that to",
    "start": "1671120",
    "end": "1679840"
  },
  {
    "text": "calculate okay so now my usage instead of",
    "start": "1680840",
    "end": "1687279"
  },
  {
    "text": "calling out to a private method i've extracted that method extracted the class from that method and",
    "start": "1687279",
    "end": "1693840"
  },
  {
    "text": "now i have an interface that represents that method as well now my class though isn't using the",
    "start": "1693840",
    "end": "1699120"
  },
  {
    "text": "interface so i'm going to refactor this to say use base type where possible so instead of me using the concrete type",
    "start": "1699120",
    "end": "1705760"
  },
  {
    "text": "use the interface type and now the class uses the i",
    "start": "1705760",
    "end": "1712880"
  },
  {
    "text": "offer value calculator instead of the offer value calculator and the final piece is to i don't want",
    "start": "1712880",
    "end": "1718320"
  },
  {
    "text": "to pass in an http client to this class i really just want to pass in the interface to the offer value calculator",
    "start": "1718320",
    "end": "1723919"
  },
  {
    "text": "so i can refactor this and say introduce a parameter for the offer value calculator it's",
    "start": "1723919",
    "end": "1731039"
  },
  {
    "text": "going to be a type i offer value calculator and the thing that can be removed now is the http client click next",
    "start": "1731039",
    "end": "1737600"
  },
  {
    "text": "there are new uses the constructor because everything's dependence injection huzzah the value the new parameter we lost next",
    "start": "1737600",
    "end": "1744039"
  },
  {
    "text": "and it didn't quite sign it",
    "start": "1744039",
    "end": "1750480"
  },
  {
    "text": "there we go so uh we now get a this uh service interface in for",
    "start": "1750480",
    "end": "1756399"
  },
  {
    "text": "the offer value calculator and then now the work to calculate the offer based on the member offer type is",
    "start": "1756399",
    "end": "1762640"
  },
  {
    "text": "encapsulated from this handler class i don't care how or why that offer gets calculated but the work done",
    "start": "1762640",
    "end": "1768640"
  },
  {
    "text": "necessary to do that stuff is now in a separate class that performs at work so let's move these classes to separate",
    "start": "1768640",
    "end": "1775120"
  },
  {
    "text": "files because it's getting annoying for me to look at that stuff",
    "start": "1775120",
    "end": "1781520"
  },
  {
    "text": "okay now if i look at this offer value calculator there's not really anything",
    "start": "1781520",
    "end": "1787760"
  },
  {
    "start": "1784000",
    "end": "2216000"
  },
  {
    "text": "else i would expect to pull out of this like it's now it's code just dealing with calculating that",
    "start": "1787760",
    "end": "1794240"
  },
  {
    "text": "that member based on offer type and in fact i may even do things like well do i need the whole member object and just pass in the email",
    "start": "1794240",
    "end": "1800240"
  },
  {
    "text": "and the name of the offer type we'll leave that for a future refactoring i do need to make sure though now that",
    "start": "1800240",
    "end": "1806480"
  },
  {
    "text": "i've introduced this interface i should go to my di configuration and ensure that",
    "start": "1806480",
    "end": "1813919"
  },
  {
    "text": "at transients i offer value calculator",
    "start": "1815360",
    "end": "1823840"
  },
  {
    "text": "so a little bit of wiring to get the dependency injection stuff up and going assuming i have that in my application",
    "start": "1828320",
    "end": "1834080"
  },
  {
    "text": "but this ensures that my handler now no longer depends directly on this like external web service thing",
    "start": "1834080",
    "end": "1839679"
  },
  {
    "text": "and it says have that external web service thing encapsulated behind a service and that service has this",
    "start": "1839679",
    "end": "1844880"
  },
  {
    "text": "interface behind it so my handler now doesn't have to worry about like the the direct logic of calling this",
    "start": "1844880",
    "end": "1851200"
  },
  {
    "text": "external web service anymore that's not that's now encapsulated so i think we're done with that first method the first method is moved out",
    "start": "1851200",
    "end": "1857840"
  },
  {
    "text": "into its own individual service uh at this point i'd run on my unit tests uh wait i don't have any so i",
    "start": "1857840",
    "end": "1864000"
  },
  {
    "text": "guess everything is green and let's move on the next one okay so",
    "start": "1864000",
    "end": "1869679"
  },
  {
    "text": "the next method we have in our list is calculating the expiration date okay so we'll look at this a few things",
    "start": "1869679",
    "end": "1875679"
  },
  {
    "text": "i noticed first there's no async no wait so it's not calling off into any kind of external",
    "start": "1875679",
    "end": "1882080"
  },
  {
    "text": "things to do its work and the object being passed in is just the offer type so if i go to this",
    "start": "1882080",
    "end": "1889200"
  },
  {
    "text": "i receive an offer type and return a daytime and it's static so that tells me that it",
    "start": "1889200",
    "end": "1895279"
  },
  {
    "text": "doesn't use any state for this object and the only information it uses is the information",
    "start": "1895279",
    "end": "1900720"
  },
  {
    "text": "on this offer type object passed in so what that tells me is that this",
    "start": "1900720",
    "end": "1906960"
  },
  {
    "text": "method is very much concerned with some other method of with some other object and that code",
    "start": "1906960",
    "end": "1913840"
  },
  {
    "text": "smell a few names for this um is known as inappropriate intimacy so i have code",
    "start": "1913840",
    "end": "1919039"
  },
  {
    "text": "somewhere else very uh that is concerned very much about someone another object over here and so um",
    "start": "1919039",
    "end": "1926559"
  },
  {
    "text": "i should be able to look at this and say this this logic is 100 dealing with this other object how about i move this logic to that",
    "start": "1926559",
    "end": "1933600"
  },
  {
    "text": "other object and so we can do that so um there's a there's a there's a slow and",
    "start": "1933600",
    "end": "1939919"
  },
  {
    "text": "fast way to do this i'll do it the slow way first uh the first thing i would do is i can move this so i can say",
    "start": "1939919",
    "end": "1946320"
  },
  {
    "text": "move to another type i'm going to move to model dot offer type",
    "start": "1946320",
    "end": "1955200"
  },
  {
    "text": "okay click next it's going to tell me well it was private before so we're going to need to make it public",
    "start": "1955200",
    "end": "1960559"
  },
  {
    "text": "now click next okay and now that method is gone here now it's moved",
    "start": "1960559",
    "end": "1967120"
  },
  {
    "text": "over to my offer type class this isn't exactly what i wanted though because it's a static method dealing with",
    "start": "1967120",
    "end": "1972799"
  },
  {
    "text": "this object uh i'd really just want to have that method be an instance method so there's another refactoring for that",
    "start": "1972799",
    "end": "1979039"
  },
  {
    "text": "say make method non-stack what resharper's going to do is look at the parameters",
    "start": "1979039",
    "end": "1985200"
  },
  {
    "text": "and say okay instead of you passing in the object if you want to make it an instance method i will need to use the",
    "start": "1985200",
    "end": "1990799"
  },
  {
    "text": "instance fields or properties on that parameter so it's going to convert",
    "start": "1990799",
    "end": "1996159"
  },
  {
    "text": "all of these parameter usages offertype.blah into instance properties or instance",
    "start": "1996159",
    "end": "2002840"
  },
  {
    "text": "usages click next huzzah now it's an instance method i don't pass in the offer type anymore i",
    "start": "2002840",
    "end": "2009039"
  },
  {
    "text": "just use the offer type object itself and now over my handler",
    "start": "2009039",
    "end": "2014320"
  },
  {
    "text": "up here i say offer type that calculate expiration date as opposed to calculate expiration date",
    "start": "2015279",
    "end": "2022159"
  },
  {
    "text": "passing in the offer type i'm gonna undo this because there's actually a quicker way",
    "start": "2022159",
    "end": "2027519"
  },
  {
    "text": "undo undo now my method is back on my handle object",
    "start": "2027519",
    "end": "2034399"
  },
  {
    "text": "let's perform this refactoring again except this time",
    "start": "2034399",
    "end": "2039200"
  },
  {
    "text": "i'm going to go straight to make method non-static",
    "start": "2040080",
    "end": "2047519"
  },
  {
    "text": "and this will move it directly from this object to the other one make it public make it non-static use",
    "start": "2047519",
    "end": "2052638"
  },
  {
    "text": "all the instance properties all in welfare one fell swoop down from here go from my offer type",
    "start": "2052639",
    "end": "2060560"
  },
  {
    "text": "here's my offer type now with the correct calculated expiration dates and now the method has been moved",
    "start": "2060560",
    "end": "2066320"
  },
  {
    "text": "successfully from this object which is just a dumb service object over to the actual domain object",
    "start": "2066320",
    "end": "2072720"
  },
  {
    "text": "that represents that behavior okay now let's look inside that object",
    "start": "2072720",
    "end": "2080000"
  },
  {
    "text": "now that the behavior has been moved with our place and look at the contents of it to see if there's anything we want to refactor here",
    "start": "2080000",
    "end": "2086000"
  },
  {
    "text": "well it's really just a switch statement um which isn't terrible by itself but a lot of the",
    "start": "2086000",
    "end": "2092560"
  },
  {
    "text": "times in the systems that i use that have an enumeration we find switch statements littered",
    "start": "2092560",
    "end": "2098960"
  },
  {
    "text": "across our application dealing with the different values and those enumerations",
    "start": "2098960",
    "end": "2104160"
  },
  {
    "text": "so there's not one spot i could put that logic so right here this is this is logic very specifically",
    "start": "2104160",
    "end": "2110000"
  },
  {
    "text": "to assignments of kinds of expiration types this is logic very specific to fixed type of expiration types wouldn't",
    "start": "2110000",
    "end": "2116400"
  },
  {
    "text": "be nice if i could move that behavior over to the enum so that the behavior around different kinds of",
    "start": "2116400",
    "end": "2121599"
  },
  {
    "text": "expirations was encapsulated in one location however we can't do that because enums are just",
    "start": "2121599",
    "end": "2128880"
  },
  {
    "text": "like fancy numbers fancy name numbers um they don't really",
    "start": "2128880",
    "end": "2135040"
  },
  {
    "text": "allow us to have any kind of behavior associated with them we can put metadata on top of them so i can decorate these different",
    "start": "2135040",
    "end": "2141680"
  },
  {
    "text": "values with attributes so like kind of display information or things like that but that's just additional",
    "start": "2141680",
    "end": "2148000"
  },
  {
    "text": "data and metadata it's not additional behavior so if i have the case where i have a switch statement about",
    "start": "2148000",
    "end": "2153760"
  },
  {
    "text": "an email that i see a lot of different places all these different switch statements what i would like to do is to move all",
    "start": "2153760",
    "end": "2159680"
  },
  {
    "text": "those different logic for all those different cases into one individual spot so that i can see all the behavior related to",
    "start": "2159680",
    "end": "2166160"
  },
  {
    "text": "assignment type expirations in one spot and all the behavior related to expiration type x a fixed type",
    "start": "2166160",
    "end": "2171440"
  },
  {
    "text": "expirations in one spot as well so we have a problem here though uh c",
    "start": "2171440",
    "end": "2177200"
  },
  {
    "text": "sharp today does not have any kind of fancy enumeration types there are",
    "start": "2177200",
    "end": "2182720"
  },
  {
    "text": "proposals in c sharp 10 to have fancier enumeration types and uh if i was brave",
    "start": "2182720",
    "end": "2189680"
  },
  {
    "text": "i would have installed the visual studio preview but i'm not quite that brave yet so instead we can leverage some open",
    "start": "2189680",
    "end": "2195839"
  },
  {
    "text": "source private projects to provide additional behavior around e-num kind of types",
    "start": "2195839",
    "end": "2201200"
  },
  {
    "text": "and so i've already actually pulled this one in um this package is from steve smith and it's known as",
    "start": "2201200",
    "end": "2207200"
  },
  {
    "text": "smart enum and smartdom is basically a hybrid between classes and enumerations",
    "start": "2207200",
    "end": "2213760"
  },
  {
    "text": "so what would that look like so over my expiration type this is just",
    "start": "2213760",
    "end": "2220960"
  },
  {
    "start": "2216000",
    "end": "2431000"
  },
  {
    "text": "a enum okay i'm going to change this to be a class so it's class expiration type it's going",
    "start": "2220960",
    "end": "2227440"
  },
  {
    "text": "to inherit from smart smart enum",
    "start": "2227440",
    "end": "2232560"
  },
  {
    "text": "and because of funny generics business i have to say it's a smart enum of itself",
    "start": "2232560",
    "end": "2238320"
  },
  {
    "text": "which is weird looking but whatever okay and it needs a constructor and the",
    "start": "2238320",
    "end": "2244400"
  },
  {
    "text": "constructor uh takes two things the name just what you see and the value which is how it's going to",
    "start": "2244400",
    "end": "2250400"
  },
  {
    "text": "be persisted or stored behind the scenes my application shouldn't really care about the number but the database",
    "start": "2250400",
    "end": "2255839"
  },
  {
    "text": "probably does and the final thing to do is convert these two public enum types",
    "start": "2255839",
    "end": "2261520"
  },
  {
    "text": "to public uh public properties or public fields on this type to",
    "start": "2261520",
    "end": "2266960"
  },
  {
    "text": "represent those two fixed values i could say instead of assignment being 1 i'll say",
    "start": "2266960",
    "end": "2272560"
  },
  {
    "text": "public static read-only expiration type assignment equals",
    "start": "2272560",
    "end": "2280400"
  },
  {
    "text": "new expiration type and the name is name of",
    "start": "2280400",
    "end": "2286800"
  },
  {
    "text": "assignment and the value is one",
    "start": "2286800",
    "end": "2291599"
  },
  {
    "text": "okay do the same thing for fixed we have a fixed type",
    "start": "2292800",
    "end": "2298000"
  },
  {
    "text": "name fixed and the value is two okay um the last oops too far",
    "start": "2298000",
    "end": "2305839"
  },
  {
    "text": "the last thing is i don't want anyone to create these sort of things so let's make this constructor private sure and we have a private",
    "start": "2305839",
    "end": "2313599"
  },
  {
    "text": "constructor um so i can only have these two specific kinds of things but now i have a class",
    "start": "2313599",
    "end": "2318800"
  },
  {
    "text": "instead of a method so i have a place to put this information so go back over here okay",
    "start": "2318800",
    "end": "2326000"
  },
  {
    "text": "we have this calculate expiration date right and it's dealing with this expiration type um but what i can do",
    "start": "2326000",
    "end": "2334160"
  },
  {
    "text": "is extract a method for this part that's dealing with expiration type",
    "start": "2334160",
    "end": "2340000"
  },
  {
    "text": "extract method and [Music] calculate",
    "start": "2340000",
    "end": "2347359"
  },
  {
    "text": "expiration date and it'll probably give me",
    "start": "2348320",
    "end": "2354480"
  },
  {
    "text": "yeah those two names are the same um so what i want to do is move",
    "start": "2354480",
    "end": "2360000"
  },
  {
    "text": "this method over to expiration type",
    "start": "2360000",
    "end": "2364640"
  },
  {
    "text": "okay now this is going to be expiration type dot calculate expiration date and over",
    "start": "2367359",
    "end": "2374000"
  },
  {
    "text": "my expiration type i've got a public method",
    "start": "2374000",
    "end": "2379520"
  },
  {
    "text": "and i pass in the offer type and i get the information out of there so",
    "start": "2380240",
    "end": "2387280"
  },
  {
    "text": "pass in this and",
    "start": "2387280",
    "end": "2392079"
  },
  {
    "text": "instead of having all this temporary variable nonsense let's just return",
    "start": "2392480",
    "end": "2398480"
  },
  {
    "text": "so you notice that this is not quite as clean with uh keyboard shortcuts as some of",
    "start": "2400720",
    "end": "2405920"
  },
  {
    "text": "the other ones or the the tooling that's okay sometimes these these dragon takes",
    "start": "2405920",
    "end": "2411520"
  },
  {
    "text": "multiple steps multiple jumps so i try to be very careful about those and once i complete them go ahead and go",
    "start": "2411520",
    "end": "2417520"
  },
  {
    "text": "and run all the tests commit to ensure everything got moved over correctly so the calling code doesn't care about this though it just knows to call the",
    "start": "2417520",
    "end": "2423760"
  },
  {
    "text": "expiration dates over my handler but what i've done is moved all the logic for the different expiration type",
    "start": "2423760",
    "end": "2430160"
  },
  {
    "text": "calculations over here it doesn't work though right because we have a switch around the expiration type and so this",
    "start": "2430160",
    "end": "2435200"
  },
  {
    "start": "2431000",
    "end": "2755000"
  },
  {
    "text": "is incorrect what we really want is uh assignment kinds to have this",
    "start": "2435200",
    "end": "2441440"
  },
  {
    "text": "and fixed kinds that have that so there's a there's a few ways we can",
    "start": "2441440",
    "end": "2446480"
  },
  {
    "text": "do this the first thing um we could do is just say uh switch expiration type",
    "start": "2446480",
    "end": "2452640"
  },
  {
    "text": "uh dot value and this value is going to be one",
    "start": "2452640",
    "end": "2459920"
  },
  {
    "text": "and two just temporary we'll fix this in a second um and this so this the next thing i",
    "start": "2459920",
    "end": "2466160"
  },
  {
    "text": "want to do is have um let's figure out what to do with the switch statement so the switch statement",
    "start": "2466160",
    "end": "2471200"
  },
  {
    "text": "um is complex conditional logic and so one of the ways i can fix a code smell of complex conditionals",
    "start": "2471200",
    "end": "2478000"
  },
  {
    "text": "is replacing this is from the refactoring to patterns book replacing a conditional expression with a strategy pattern",
    "start": "2478000",
    "end": "2485839"
  },
  {
    "text": "and so now that i have a class that represents this individual set of behaviors and i",
    "start": "2485839",
    "end": "2492400"
  },
  {
    "text": "also have individual properties or fields representing the two kinds of expiration",
    "start": "2492400",
    "end": "2497680"
  },
  {
    "text": "types i now have a hook to be able to provide a strategy for each kind of expiration type of my system so what",
    "start": "2497680",
    "end": "2504640"
  },
  {
    "text": "i'd like to do is move this logic of calculating the expiration date",
    "start": "2504640",
    "end": "2510160"
  },
  {
    "text": "to an assignment expiration and the other kind of expiration where i'm",
    "start": "2510160",
    "end": "2515200"
  },
  {
    "text": "uh going based off of the begin date over to the fixed expiration type",
    "start": "2515200",
    "end": "2521119"
  },
  {
    "text": "so let's do that the first thing i want to do is i'm going to make this method virtual",
    "start": "2521119",
    "end": "2530400"
  },
  {
    "text": "so that it can be overridden in drive classes the next thing i'm going to do is create different derived classes for",
    "start": "2530400",
    "end": "2537520"
  },
  {
    "text": "each of these expiration types so i'll have a private class assignment type",
    "start": "2537520",
    "end": "2545920"
  },
  {
    "text": "and that's going to inherit from the expiration type class it needs a constructor but the",
    "start": "2545920",
    "end": "2552560"
  },
  {
    "text": "constructor now i don't need to pass it a name and a value actually i'll just take what we had before",
    "start": "2552560",
    "end": "2559039"
  },
  {
    "text": "and say that is the values you're going to pass in and you don't actually need a constructor because i know for assignment types these are",
    "start": "2559280",
    "end": "2565760"
  },
  {
    "text": "the values you should use okay so do the same thing for fixed",
    "start": "2565760",
    "end": "2570880"
  },
  {
    "text": "fixed type will have its own expiration type as well fix type",
    "start": "2570880",
    "end": "2577520"
  },
  {
    "text": "x type fixed and value of two",
    "start": "2577520",
    "end": "2584318"
  },
  {
    "text": "okay so i've got assignment type assign type thank you spell check",
    "start": "2585760",
    "end": "2593839"
  },
  {
    "text": "and fix type those don't do anything yet other than encapsulate the name and the value so over here instead of me",
    "start": "2593839",
    "end": "2599680"
  },
  {
    "text": "using the uh the base types of these i'll just say",
    "start": "2599680",
    "end": "2604720"
  },
  {
    "text": "new type and this is",
    "start": "2604839",
    "end": "2611200"
  },
  {
    "text": "new fix type",
    "start": "2611920",
    "end": "2620260"
  },
  {
    "text": "[Music]",
    "start": "2620260",
    "end": "2623869"
  },
  {
    "text": "okay so uh the behavior is exactly the same though so uh i have drive types over here but",
    "start": "2629119",
    "end": "2636480"
  },
  {
    "text": "the virtual method is still executed every single time so what i want to do the last little piece is move the actual behavior for",
    "start": "2636480",
    "end": "2643440"
  },
  {
    "text": "calculating expiration date over to as an overridden member to each of these different assignment types",
    "start": "2643440",
    "end": "2648960"
  },
  {
    "text": "so over here i can say override calculate expiration date",
    "start": "2648960",
    "end": "2654480"
  },
  {
    "text": "and its behavior is going to be this the body of that",
    "start": "2654480",
    "end": "2661119"
  },
  {
    "text": "switch statement so it says daytime.days",
    "start": "2661119",
    "end": "2666720"
  },
  {
    "text": "and we'll do the same thing",
    "start": "2666720",
    "end": "2669838"
  },
  {
    "text": "with the other one now this one's a little bit more complicated",
    "start": "2674000",
    "end": "2679040"
  },
  {
    "text": "it's got like if else throw junk so let's put that in there",
    "start": "2679920",
    "end": "2687599"
  },
  {
    "text": "um and so let's say return that based on the offer type uh this looks like it can be simplified",
    "start": "2687599",
    "end": "2693520"
  },
  {
    "text": "there's some grayed out move or done it else uh convert to conditional operator uh",
    "start": "2693520",
    "end": "2699760"
  },
  {
    "text": "this says i can use the null coalescing expression and let's use an expression body number",
    "start": "2699760",
    "end": "2705920"
  },
  {
    "text": "so that all gets distilled down to um use the begin date add days offer valid",
    "start": "2705920",
    "end": "2712160"
  },
  {
    "text": "if this expression returns null then throw an exception because you need a begin date for that piece",
    "start": "2712160",
    "end": "2718800"
  },
  {
    "text": "so this point um it's overridden so each possible value of expiration types has",
    "start": "2718800",
    "end": "2725119"
  },
  {
    "text": "overridden its specific strategy for how to calculate expression date this point i would run my tests",
    "start": "2725119",
    "end": "2730800"
  },
  {
    "text": "that existed and verified that all tests passed and then finally that i know that that",
    "start": "2730800",
    "end": "2736960"
  },
  {
    "text": "those different strategies are in place for everything this point this method is no longer used",
    "start": "2736960",
    "end": "2742960"
  },
  {
    "text": "so i can actually convert this class to an abstract class and change",
    "start": "2742960",
    "end": "2750640"
  },
  {
    "text": "this method from a virtual method that that has a default behavior now it's going to be an",
    "start": "2750640",
    "end": "2756000"
  },
  {
    "start": "2755000",
    "end": "3003000"
  },
  {
    "text": "abstract method with no behavior that has to be filled in by each individual attempted individual",
    "start": "2756000",
    "end": "2761920"
  },
  {
    "text": "strategy so what i've done here is i've converted an enum that had only data and no",
    "start": "2761920",
    "end": "2767280"
  },
  {
    "text": "behavior to an enum class that includes both data and behavior because enums have fixed values and",
    "start": "2767280",
    "end": "2774079"
  },
  {
    "text": "effectively those fixed values become strategy implementations for the behavior in my system",
    "start": "2774079",
    "end": "2779359"
  },
  {
    "text": "so as i encounter new new fun and exciting switch statements my system what i'll do is i'll convert",
    "start": "2779359",
    "end": "2785040"
  },
  {
    "text": "those to abstract methods on this class and the implementations will be the implementations of each",
    "start": "2785040",
    "end": "2790319"
  },
  {
    "text": "strategy so instead of trying to be instead of me trying to make the switch statement better i just got rid of it and replaced it",
    "start": "2790319",
    "end": "2796720"
  },
  {
    "text": "with a strategy pattern okay now i i still have to make sure",
    "start": "2796720",
    "end": "2803119"
  },
  {
    "text": "that this actually works with the rest of my system and the typical hang up with this kind of",
    "start": "2803119",
    "end": "2808480"
  },
  {
    "text": "approach is well i have a database i need to make sure that this thing can actually be saved to the database",
    "start": "2808480",
    "end": "2814960"
  },
  {
    "text": "because i can't i can't just pretend like the database doesn't exist i need to know how to convert this",
    "start": "2814960",
    "end": "2820000"
  },
  {
    "text": "information into like save statements to the database or update statements or inserts and so what you can do here is really",
    "start": "2820000",
    "end": "2826960"
  },
  {
    "text": "going to depend on how your domain model gets saved so some folks um they make their domain models",
    "start": "2826960",
    "end": "2834400"
  },
  {
    "text": "separate from the persistence models and so this persistence model of entity framework or or whatever it might",
    "start": "2834400",
    "end": "2840000"
  },
  {
    "text": "be it's loaded into your domain model where the behavior is that we kind of completely separate those two things",
    "start": "2840000",
    "end": "2845680"
  },
  {
    "text": "i find that entity framework and most orms are good enough that i don't have to separate these two",
    "start": "2845680",
    "end": "2850960"
  },
  {
    "text": "things because that's a bit of work and so i just combine the two together into a single model that represents both data and behavior",
    "start": "2850960",
    "end": "2857119"
  },
  {
    "text": "so i just need to make sure that my orm can handle how to save this thing so how can i handle that well",
    "start": "2857119",
    "end": "2864720"
  },
  {
    "text": "it turns out it can and the way i do that is to configure on model",
    "start": "2864720",
    "end": "2873520"
  },
  {
    "text": "creating model builder dot entity",
    "start": "2873520",
    "end": "2880880"
  },
  {
    "text": "of offer type property of",
    "start": "2880880",
    "end": "2889440"
  },
  {
    "text": "expiration type and then i'm going to give it a conversion and say that the conversion i need to",
    "start": "2889760",
    "end": "2895760"
  },
  {
    "text": "know how to save it and how to load it let's say the way that you save the thing",
    "start": "2895760",
    "end": "2901599"
  },
  {
    "text": "is going to be that value okay so that's how we save",
    "start": "2901599",
    "end": "2909359"
  },
  {
    "text": "the object into the database that even though it says object in memory when i go to save it it's just going to be the numerical value",
    "start": "2909359",
    "end": "2915200"
  },
  {
    "text": "i could choose anything from there i could have chosen the name as opposed to the value but we're going to make things simple and make things a value and the",
    "start": "2915200",
    "end": "2921119"
  },
  {
    "text": "next piece is okay now that i have the value how do i how do i convert that to the object model that you have",
    "start": "2921119",
    "end": "2927599"
  },
  {
    "text": "and so for that that's where that smart enum package helps me out it's actually got a bunch of helper methods to be able",
    "start": "2927599",
    "end": "2933119"
  },
  {
    "text": "to load the right object based on its individual value so i can go to expiration to type",
    "start": "2933119",
    "end": "2942079"
  },
  {
    "text": "value goes to expiration type dot from value the value from the",
    "start": "2942079",
    "end": "2948880"
  },
  {
    "text": "database okay that was pretty easy i save it as",
    "start": "2948880",
    "end": "2954640"
  },
  {
    "text": "an integer and when i load the integer back i just use this enumeration class helpers method to find the correct property or field or",
    "start": "2954640",
    "end": "2961680"
  },
  {
    "text": "instance and use that uh use that instance so behind the scenes um this will look at the different",
    "start": "2961680",
    "end": "2970480"
  },
  {
    "text": "public static read-only fields and find the right one in case it's assignment and load that as the correct instance so",
    "start": "2970480",
    "end": "2976079"
  },
  {
    "text": "i'll go to in my object model actually use that assignment type in my object model",
    "start": "2976079",
    "end": "2982640"
  },
  {
    "text": "so going back to my handler i've now encapsulated the expiration",
    "start": "2982640",
    "end": "2988400"
  },
  {
    "text": "dates logic all the way down to the actual enumeration class and use a strategy",
    "start": "2988400",
    "end": "2994000"
  },
  {
    "text": "pattern to be able to pick the right strategy for calculating calculating the expiration date based on the expiration type that it is",
    "start": "2994000",
    "end": "3003119"
  },
  {
    "start": "3003000",
    "end": "3261000"
  },
  {
    "text": "okay so i've got the expiration type got the the offer value the last little piece is",
    "start": "3003760",
    "end": "3010800"
  },
  {
    "text": "this assign offer method so this is sign offer method uh",
    "start": "3010800",
    "end": "3017280"
  },
  {
    "text": "there's a lot of stuff it's going to create an offer object and then the next",
    "start": "3017280",
    "end": "3022640"
  },
  {
    "text": "piece is going to assign that offer to the user now this is the this is the first kind of smell i see is that um this",
    "start": "3022640",
    "end": "3030800"
  },
  {
    "text": "property number of active offers needs to be consistent with this property over here",
    "start": "3030800",
    "end": "3037599"
  },
  {
    "text": "unfortunately there's no connection between those two things i can do uh you know remember do i sign",
    "start": "3037599",
    "end": "3043200"
  },
  {
    "text": "off first that add range had a whole bunch of them that delete or move",
    "start": "3043200",
    "end": "3048640"
  },
  {
    "text": "remove all remove range truncate ken cat like all sorts of things because that's value that property on",
    "start": "3048640",
    "end": "3055920"
  },
  {
    "text": "that field is just a list",
    "start": "3055920",
    "end": "3061040"
  },
  {
    "text": "and lists have a lot of methods that are probably not supported by the business so the first way to do is to make sure",
    "start": "3062000",
    "end": "3067119"
  },
  {
    "text": "that those two things really get changed together is to fix this this issue of i can do",
    "start": "3067119",
    "end": "3072640"
  },
  {
    "text": "anything with this list of assigned offers so let's encapsulate these two things first so",
    "start": "3072640",
    "end": "3078319"
  },
  {
    "text": "i want these two things to happen together so the first thing i'm going to do is extract a method",
    "start": "3078319",
    "end": "3085119"
  },
  {
    "text": "it's called assign offer this time the assign offer method takes",
    "start": "3087520",
    "end": "3094000"
  },
  {
    "text": "a member and offer the offer has already been created over here i'm going to move that method",
    "start": "3094000",
    "end": "3099760"
  },
  {
    "text": "by saying make method non-static it'll ask me where i want to move it to i want to move it to the member",
    "start": "3099760",
    "end": "3105200"
  },
  {
    "text": "object so that's member.assignoffer passing in that offer object",
    "start": "3105200",
    "end": "3111359"
  },
  {
    "text": "now a site offer has the encapsulation of adding the offer to the assign offers list and bumping up the number of active",
    "start": "3111359",
    "end": "3118000"
  },
  {
    "text": "offers but i still haven't fixed this problem which is that public list of t doing all this sort of junk so this",
    "start": "3118000",
    "end": "3124400"
  },
  {
    "text": "point i'd look at what does the orm supports to be able to encapsulate this collection access and it turns out",
    "start": "3124400",
    "end": "3131680"
  },
  {
    "text": "af core offers a lot so what ef core can allow me to do is to use a backing field for this actual",
    "start": "3131680",
    "end": "3139200"
  },
  {
    "text": "collection and only expose what is necessary to expose let me do a couple things first i'm going to do is",
    "start": "3139200",
    "end": "3144960"
  },
  {
    "text": "i'm going to",
    "start": "3144960",
    "end": "3153838"
  },
  {
    "text": "two property there it is two properties backing field okay so i've now got a private list of",
    "start": "3159520",
    "end": "3165040"
  },
  {
    "text": "assigned offers and i don't actually ever want to have the setter so i'm going to remove that",
    "start": "3165040",
    "end": "3170880"
  },
  {
    "text": "setter because",
    "start": "3170880",
    "end": "3174559"
  },
  {
    "text": "in any framework my orm knows when it sees a property like this that has elena getter",
    "start": "3176800",
    "end": "3181920"
  },
  {
    "text": "it will look for a field that has camelcase with an underscore a bunch of other naming conventions i",
    "start": "3181920",
    "end": "3187520"
  },
  {
    "text": "can even give it a name if i want to as the thing it's actually going to add those items to",
    "start": "3187520",
    "end": "3192880"
  },
  {
    "text": "so make that read-only and the final piece is i no longer want to",
    "start": "3192880",
    "end": "3202400"
  },
  {
    "text": "use an enum or list of this i don't want to expose your list directly and sometimes you say this one needs to be an i innumerable",
    "start": "3202400",
    "end": "3210240"
  },
  {
    "text": "of offer and now down here instead of me",
    "start": "3211119",
    "end": "3215279"
  },
  {
    "text": "uh manipulating the list through the property i'm manipulating through this uh this field this backing field",
    "start": "3216319",
    "end": "3224640"
  },
  {
    "text": "let's uh also make this setter private so we don't allow anyone else to set this property",
    "start": "3225599",
    "end": "3231920"
  },
  {
    "text": "except for our own individual object so now with this in place um i don't let anyone do anything",
    "start": "3231920",
    "end": "3237440"
  },
  {
    "text": "with my uh offers instead i only allow them to go through kind of the front door and say i you can look at",
    "start": "3237440",
    "end": "3243599"
  },
  {
    "text": "the the the list of offers the collection of offers that's a read-only enumerable um list if you want to do some operation",
    "start": "3243599",
    "end": "3252319"
  },
  {
    "text": "you have a method on my object to be able to perform that so now this collection is encapsulated the usage is",
    "start": "3252319",
    "end": "3258960"
  },
  {
    "text": "encapsulated from the calling classes over here looks exactly the same i go",
    "start": "3258960",
    "end": "3264720"
  },
  {
    "start": "3261000",
    "end": "3600000"
  },
  {
    "text": "assign offer blah blah blah blah and away we go",
    "start": "3264720",
    "end": "3270000"
  },
  {
    "text": "now the last piece i want to do is um i've got the logic separated for assigning offers separate from the",
    "start": "3270000",
    "end": "3276960"
  },
  {
    "text": "actual domain object itself so i've got like the the offer value calculated over here",
    "start": "3276960",
    "end": "3282319"
  },
  {
    "text": "and i've got the offer assigned over here um what i really like to do is have the member itself really fully",
    "start": "3282319",
    "end": "3287760"
  },
  {
    "text": "encapsulate all the work necessary to be able to assign an offer to a person but everything's kind of",
    "start": "3287760",
    "end": "3293520"
  },
  {
    "text": "separated out so let me first inline this method",
    "start": "3293520",
    "end": "3298480"
  },
  {
    "text": "and offer offer and",
    "start": "3299599",
    "end": "3307680"
  },
  {
    "text": "i'm going to now extract an entire method for all the operations related to",
    "start": "3307680",
    "end": "3313440"
  },
  {
    "text": "assigning that that offer so i'm going to extract a method for kind of all the business logic",
    "start": "3313440",
    "end": "3321839"
  },
  {
    "text": "sign offer and let's move our fund cancellation token all the way to",
    "start": "3322880",
    "end": "3328319"
  },
  {
    "text": "the end",
    "start": "3328319",
    "end": "3334319"
  },
  {
    "text": "okay so i say a sign offer this does all the work to assign the offer and then finally",
    "start": "3334319",
    "end": "3340960"
  },
  {
    "text": "uh returns that value back out if i look at this method and again it's dealing mainly with the",
    "start": "3340960",
    "end": "3348240"
  },
  {
    "text": "member object so it's got like it's some offer creation stuff but it's calculating based on the member",
    "start": "3348240",
    "end": "3353680"
  },
  {
    "text": "um it's doing some stuff for overtime but if i look at the logic it's it's it's mainly a member let's see remember",
    "start": "3353680",
    "end": "3359359"
  },
  {
    "text": "let's see one two three places offer type uh three places as well um but it's it's",
    "start": "3359359",
    "end": "3366319"
  },
  {
    "text": "it's an operation i'm doing on the member so what i'd like to do is take this logic",
    "start": "3366319",
    "end": "3372000"
  },
  {
    "text": "uh assigning an offer and move that logic to the domain object itself so let's try to do that and just see",
    "start": "3372000",
    "end": "3377599"
  },
  {
    "text": "what happens so i'm going to move this method",
    "start": "3377599",
    "end": "3383520"
  },
  {
    "text": "it's going to ask me where do you want to move this to i want to move it to the member object",
    "start": "3383520",
    "end": "3391839"
  },
  {
    "text": "it will be encapsulated access rights will be extended so uh it's going to try to deal with this",
    "start": "3392799",
    "end": "3404880"
  },
  {
    "text": "sign off there we go the handler object um i don't want to pass on the handler",
    "start": "3404880",
    "end": "3410319"
  },
  {
    "text": "object i don't want to pass in the value the field a property to that um really",
    "start": "3410319",
    "end": "3415760"
  },
  {
    "text": "what i'll do is is take those things and make that a parameter so i can highlight the value that i see",
    "start": "3415760",
    "end": "3421760"
  },
  {
    "text": "there and say extract parameter and safely remove the handler i don't want to pass in the",
    "start": "3421760",
    "end": "3427040"
  },
  {
    "text": "entire handler just give me the offer value and finally let's move these",
    "start": "3427040",
    "end": "3436640"
  },
  {
    "text": "around so i passed the offer type then one to assign the calculator the cancellation token and i'm good to",
    "start": "3441839",
    "end": "3447200"
  },
  {
    "text": "go unless do i really need this assign offer method over here probably not so let's inline that",
    "start": "3447200",
    "end": "3454318"
  },
  {
    "text": "okay so with this in place i've got um a completely encapsulated method for",
    "start": "3458640",
    "end": "3464559"
  },
  {
    "text": "assigning an offer it does take a dependency through the method argument and then it uses that dependence to call",
    "start": "3464559",
    "end": "3470559"
  },
  {
    "text": "back out to the calculator saying i need you to calculate your stuff based on me and the offer type being passed in",
    "start": "3470559",
    "end": "3476960"
  },
  {
    "text": "this pattern is known in the c-sharp world as double dispatch where i'm passing in a service and then i call that service for the right",
    "start": "3476960",
    "end": "3482799"
  },
  {
    "text": "parameters for it to do its work so back in my handler",
    "start": "3482799",
    "end": "3489838"
  },
  {
    "text": "i don't actually need this anymore uh let's just remove that all together",
    "start": "3492079",
    "end": "3500240"
  },
  {
    "text": "and now this takes the cancellation token okay",
    "start": "3500240",
    "end": "3508960"
  },
  {
    "text": "so uh now looking at this picture i've got my save logic my students",
    "start": "3508960",
    "end": "3515200"
  },
  {
    "text": "my load logic in one place in my handler or this domain service the next thing it",
    "start": "3515200",
    "end": "3520799"
  },
  {
    "text": "does is delegate 100 off to the domain model to do the actual behavioral work",
    "start": "3520799",
    "end": "3527119"
  },
  {
    "text": "once i get that object created in the business logic completed i now call the save method so it's load",
    "start": "3527119",
    "end": "3534400"
  },
  {
    "text": "do work save and the actual do work is now 100 encapsulated inside my domain",
    "start": "3534400",
    "end": "3539680"
  },
  {
    "text": "model everything necessary to actually perform the business logic of assigning the offer to the user is now",
    "start": "3539680",
    "end": "3545839"
  },
  {
    "text": "as part of this individual method the nice thing about this is you can look at this domain model and now this",
    "start": "3545839",
    "end": "3552319"
  },
  {
    "text": "domain model is actually unit testable because this domain model is 100 encapsulated it's not calling out",
    "start": "3552319",
    "end": "3559680"
  },
  {
    "text": "to other services any dependencies it has are passed in through these uh abstractions so in this case the",
    "start": "3559680",
    "end": "3566079"
  },
  {
    "text": "abstraction is this api service for for calculating an offer that's now just passed in as a",
    "start": "3566079",
    "end": "3571280"
  },
  {
    "text": "as a parameter to an individual method for that one individual operation and in a unit test i can then",
    "start": "3571280",
    "end": "3577839"
  },
  {
    "text": "stub that out fake it out provide a different you know a different value based on different inputs and now this",
    "start": "3577839",
    "end": "3584720"
  },
  {
    "text": "this domain model is now 100 unit testable over my domain service",
    "start": "3584720",
    "end": "3589920"
  },
  {
    "text": "class which is what this is this handler at this point i'm done i would almost certainly integration test this",
    "start": "3589920",
    "end": "3596079"
  },
  {
    "text": "with an actual database but i'm not trying to test all the logic behind the behavior i really just wanted to make sure that",
    "start": "3596079",
    "end": "3602000"
  },
  {
    "text": "kind of happy path testing i can load the objects i can perform the business logic and save them",
    "start": "3602000",
    "end": "3607440"
  },
  {
    "text": "otherwise um this code is as good as it needs to be i don't need to do anything",
    "start": "3607440",
    "end": "3612559"
  },
  {
    "text": "else here so what do we see here we saw",
    "start": "3612559",
    "end": "3618640"
  },
  {
    "text": "a lot of refactoring i was using a lot of the tool set to be able to do so i was working in very small incremental",
    "start": "3618640",
    "end": "3624880"
  },
  {
    "text": "steps but one of the things i was doing was refactoring with a purpose and that purpose is looking at",
    "start": "3624880",
    "end": "3630960"
  },
  {
    "text": "the design smells associated with my usage of these different objects and aligning my refactoring",
    "start": "3630960",
    "end": "3638559"
  },
  {
    "text": "towards the domain model so instead of pushing out into stateless functions or other stateless classes",
    "start": "3638559",
    "end": "3643920"
  },
  {
    "text": "i was moving that behavior towards the domain model as was necessary so that my domain model",
    "start": "3643920",
    "end": "3649920"
  },
  {
    "text": "is now a rich behavioral entity with all the operations available to it on",
    "start": "3649920",
    "end": "3655200"
  },
  {
    "text": "that entity and it's 100 encapsulated so for future things i could do here",
    "start": "3655200",
    "end": "3660720"
  },
  {
    "text": "um you see there's a lot of public getters and setters i could probably fix that uh things like um there's no",
    "start": "3660720",
    "end": "3666880"
  },
  {
    "text": "constructors associated to ensure that these objects are set up correctly i would still likely go through and add those kinds of things but for",
    "start": "3666880",
    "end": "3672960"
  },
  {
    "text": "refactoring this one individual method i think it's good enough so",
    "start": "3672960",
    "end": "3679040"
  },
  {
    "text": "that was domain driven refactoring where i am using domain german design to build that domain model",
    "start": "3681040",
    "end": "3686960"
  },
  {
    "text": "and i'm using refactoring techniques to build out that behavioral model that domain driven design says we need",
    "start": "3686960",
    "end": "3692240"
  },
  {
    "text": "by using refactoring techniques and code smells it ensures that the behavioral model that i create is based on the true behavior in the",
    "start": "3692240",
    "end": "3699119"
  },
  {
    "text": "system and not something whiteboarded or just in our imagination it's based on the actual code and the",
    "start": "3699119",
    "end": "3705440"
  },
  {
    "text": "actual code cells we see in the application so by using refactoring techniques and code",
    "start": "3705440",
    "end": "3710480"
  },
  {
    "text": "smells it ensures that our domain model is as cohesive and self-contained as it can be because",
    "start": "3710480",
    "end": "3716160"
  },
  {
    "text": "we're using the real actual behavior of the system to do so so thank you very much if you have any questions i'll be on ye old slack",
    "start": "3716160",
    "end": "3723359"
  },
  {
    "text": "um afterwards otherwise if you want to see more information about this you can go to my github.com presentations this",
    "start": "3723359",
    "end": "3729440"
  },
  {
    "text": "entire example will be up there a before and aft review you can also read more on the books i showed earlier the",
    "start": "3729440",
    "end": "3736640"
  },
  {
    "text": "refactoring book and their factoring to patterns book i hope you enjoyed it and i hope you have a great rest of the conference thank you",
    "start": "3736640",
    "end": "3745440"
  }
]