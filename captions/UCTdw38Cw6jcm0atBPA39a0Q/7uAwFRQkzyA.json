[
  {
    "text": "all right we are ready to go cameras rolling hello everybody my name is andreas Patek",
    "start": "4880",
    "end": "12080"
  },
  {
    "text": "I work as a software developer trainer and obviously a speaker today I am gonna",
    "start": "12080",
    "end": "20090"
  },
  {
    "text": "talk to you about C++ be type safe and the journey of determining the number of",
    "start": "20090",
    "end": "26690"
  },
  {
    "text": "elements in an array I have a hard time seeing a couple of people here because",
    "start": "26690",
    "end": "31940"
  },
  {
    "text": "I'm looking just into the light so excuse me if I don't see any hand",
    "start": "31940",
    "end": "38089"
  },
  {
    "text": "showing up probably doing a presentation ok this talk it's a true story",
    "start": "38089",
    "end": "46100"
  },
  {
    "text": "names of persons have been changed to protect the innocent ones it all started",
    "start": "46100",
    "end": "53449"
  },
  {
    "text": "on one of these late Friday evenings you",
    "start": "53449",
    "end": "60139"
  },
  {
    "text": "know you're at work you're about to go home yet",
    "start": "60139",
    "end": "66650"
  },
  {
    "text": "an alright day the train arrives in a couple of minutes if you miss that train",
    "start": "66650",
    "end": "74719"
  },
  {
    "text": "you have to wait another 30 minutes so you better go because it's Friday the",
    "start": "74719",
    "end": "79759"
  },
  {
    "text": "weekend is looking pretty good and I was about to go when I browsed through some",
    "start": "79759",
    "end": "87259"
  },
  {
    "text": "code and I came across this piece of code which I've seen often before but",
    "start": "87259",
    "end": "94579"
  },
  {
    "text": "this time it caught my attention it was there just to give me a number the only",
    "start": "94579",
    "end": "103759"
  },
  {
    "text": "thing the piece of code needed there was a number the number in question was the",
    "start": "103759",
    "end": "111829"
  },
  {
    "text": "number of elements in an array to give",
    "start": "111829",
    "end": "117380"
  },
  {
    "text": "you an idea about this here is roughly",
    "start": "117380",
    "end": "122859"
  },
  {
    "text": "some code which will use this light at this later this is code that came also across we declare a char buffer size of",
    "start": "122859",
    "end": "131569"
  },
  {
    "text": "16 now sing with full loop we iterate over each of the elements in this",
    "start": "131569",
    "end": "138710"
  },
  {
    "text": "but from brilliant works compiled fine no warning whatsoever elegant not so",
    "start": "138710",
    "end": "149570"
  },
  {
    "text": "much if we change the things slightly if",
    "start": "149570",
    "end": "154580"
  },
  {
    "text": "you change this char to be an int before then things go sells very quickly what",
    "start": "154580",
    "end": "164390"
  },
  {
    "text": "size of dust sizing everybody here knows this but sometimes happens too well get",
    "start": "164390",
    "end": "170360"
  },
  {
    "text": "forgotten trifles size of returns the size of the number of elements times the",
    "start": "170360",
    "end": "178880"
  },
  {
    "text": "size of the type in example before this was fine always because char is defined",
    "start": "178880",
    "end": "185690"
  },
  {
    "text": "to be size of one on each platform in",
    "start": "185690",
    "end": "190760"
  },
  {
    "text": "typically is a bit bigger on the platform I used it it was four bytes so",
    "start": "190760",
    "end": "198560"
  },
  {
    "text": "I got four times sixteen that means that my full loop runs or a",
    "start": "198560",
    "end": "207350"
  },
  {
    "text": "little bit more memory than I have this is by the way that this is brilliant if you like this this long exhausting",
    "start": "207350",
    "end": "213890"
  },
  {
    "text": "debugging sessions with completely clueless what's happening here but your",
    "start": "213890",
    "end": "221210"
  },
  {
    "text": "program fails sometimes sometimes it works that's excellent to create such a thing",
    "start": "221210",
    "end": "227840"
  },
  {
    "text": "also if you like to give malicious people a chance to well exploit your",
    "start": "227840",
    "end": "233300"
  },
  {
    "text": "buffer overflow that code works very well for there too I care about more",
    "start": "233300",
    "end": "240010"
  },
  {
    "text": "care more about safety so that's not the intention I like here and the surprise",
    "start": "240010",
    "end": "247460"
  },
  {
    "text": "is not so big there there's an easy solution as we figured out the size of",
    "start": "247460",
    "end": "252980"
  },
  {
    "text": "returns the size of the buffer or the size of the type times the elements and",
    "start": "252980",
    "end": "260299"
  },
  {
    "text": "that type we can use the size of expression take the whole buffer and divided by the first by the size of the",
    "start": "260299",
    "end": "267169"
  },
  {
    "text": "first element then we getting back the number of elements in an array",
    "start": "267169",
    "end": "273340"
  },
  {
    "text": "that's an easy one but in my experience programmers are a",
    "start": "273340",
    "end": "278420"
  },
  {
    "text": "bit lazy I count me in to that and this is a awful lot to type and it doesn't",
    "start": "278420",
    "end": "283580"
  },
  {
    "text": "say anything it doesn't have much meaning here so one common solution I",
    "start": "283580",
    "end": "291320"
  },
  {
    "text": "came across is we use a macro I'm not a big fan of macros but in this place well",
    "start": "291320",
    "end": "298780"
  },
  {
    "text": "it does a good job we now say okay this macro function it's name is array size",
    "start": "298780",
    "end": "306440"
  },
  {
    "text": "so we get a clue what's happening there and it does the size of magic for us",
    "start": "306440",
    "end": "312610"
  },
  {
    "text": "what's excellent it just made that code a little bit better that was roughly the",
    "start": "312610",
    "end": "319160"
  },
  {
    "text": "code I came across was how does this work",
    "start": "319160",
    "end": "324460"
  },
  {
    "text": "here's another example D first to buffer us we already know it's char buffer and",
    "start": "324460",
    "end": "331610"
  },
  {
    "text": "in buffer this time of 10 doesn't matter and the second to our child pointer and",
    "start": "331610",
    "end": "338120"
  },
  {
    "text": "an in pointer if you look closely they are not initialized at all so they can",
    "start": "338120",
    "end": "343880"
  },
  {
    "text": "point to to anything and then I put them",
    "start": "343880",
    "end": "349460"
  },
  {
    "text": "in this nice macro to get the number of elements another ray for the first two",
    "start": "349460",
    "end": "358810"
  },
  {
    "text": "it's doing pretty well I get the numbers 10 and 10 that's roughly what I expected",
    "start": "358810",
    "end": "367330"
  },
  {
    "text": "the other two cases are quite interesting turns out that if I stick a chap who enter into the add nice macro",
    "start": "367330",
    "end": "376330"
  },
  {
    "text": "what's a buffer I get a value of 8 which",
    "start": "376330",
    "end": "383150"
  },
  {
    "text": "is reasonable if you look at the expression what it does it takes the",
    "start": "383150",
    "end": "389960"
  },
  {
    "text": "size of whatever we give in Chapo and on that machine size of 8 byte and it",
    "start": "389960",
    "end": "398330"
  },
  {
    "text": "divides it by the size of the first element in the supposed array which",
    "start": "398330",
    "end": "403490"
  },
  {
    "text": "happens to be just a charge char's one 8/1 news 8 still above our",
    "start": "403490",
    "end": "413149"
  },
  {
    "text": "flow the in case is a little bit better do you do the different numbers to the size of the end is 4 so 8 divided by 4",
    "start": "413149",
    "end": "422149"
  },
  {
    "text": "gives us 2 but still it's one of so we",
    "start": "422149",
    "end": "427339"
  },
  {
    "text": "still have a buffer overflow probably not what we like and if you go back to",
    "start": "427339",
    "end": "439219"
  },
  {
    "text": "this initial code it looks good it looks nice but what is not its type safe we",
    "start": "439219",
    "end": "448909"
  },
  {
    "text": "can stick anything into that macro and the cases that worry me most are the",
    "start": "448909",
    "end": "455209"
  },
  {
    "text": "ones when it's compiling because it compiles quite often if you stick",
    "start": "455209",
    "end": "462709"
  },
  {
    "text": "something in and it fails compiling that's a good case but if as long as I can stick a pointer into that thing and",
    "start": "462709",
    "end": "469249"
  },
  {
    "text": "get an arbitrary number reasonable or not I have a problem so what do we I",
    "start": "469249",
    "end": "476539"
  },
  {
    "text": "want I want type safety all right who",
    "start": "476539",
    "end": "481819"
  },
  {
    "text": "attended beyond follows-chalk this morning no pian itself create and order a couple",
    "start": "481819",
    "end": "487699"
  },
  {
    "text": "of our hands so he explains type safety I'm not going deeply into that it's just the idea that I want to be sure that I",
    "start": "487699",
    "end": "495349"
  },
  {
    "text": "cannot unintentionally assign apples to oranges or things like that of course I",
    "start": "495349",
    "end": "502279"
  },
  {
    "text": "can force it but unintentional misuse should not be possible",
    "start": "502279",
    "end": "507759"
  },
  {
    "text": "aside from that I like a couple of more SIG's now that we are onto that aside",
    "start": "507759",
    "end": "514370"
  },
  {
    "text": "from type safety I really really appreciate catching arrows at compile time because that's that's the best time you",
    "start": "514370",
    "end": "521508"
  },
  {
    "text": "can get you're already completely set to writing that piece of code you know",
    "start": "521509",
    "end": "529129"
  },
  {
    "text": "everything about it so that's the point we are like to fail because it's easy to correct errors there",
    "start": "529129",
    "end": "537250"
  },
  {
    "text": "well while I appreciate these macros at times it would be wonderful if we can",
    "start": "539319",
    "end": "546380"
  },
  {
    "text": "get rid of that macro macro suck a little bit so that would be quite an",
    "start": "546380",
    "end": "552079"
  },
  {
    "text": "achievement and the interface should be",
    "start": "552079",
    "end": "558560"
  },
  {
    "text": "easy to use right it should not be complicated more complicated than using",
    "start": "558560",
    "end": "564350"
  },
  {
    "text": "that macro and I would like to have one",
    "start": "564350",
    "end": "570589"
  },
  {
    "text": "single interface so like with the macro I like to be able to stick either an",
    "start": "570589",
    "end": "576350"
  },
  {
    "text": "array in it and pointer or whatsoever and either it tells me a compile time that this is an array and it can give me",
    "start": "576350",
    "end": "583490"
  },
  {
    "text": "a number or it should give me a nice error message so one interface to rule",
    "start": "583490",
    "end": "589699"
  },
  {
    "text": "them all that's practically the idea and that's the code base is larger I'm working with",
    "start": "589699",
    "end": "596329"
  },
  {
    "text": "it must be a drop-in replacement it's impossible for all the clients to change",
    "start": "596329",
    "end": "601670"
  },
  {
    "text": "the change would never made it so drop-in replacement it is we said ideas",
    "start": "601670",
    "end": "610160"
  },
  {
    "text": "in mind I thought okay it's always a good thing to come up with a plan so the",
    "start": "610160",
    "end": "616220"
  },
  {
    "text": "plan for the following should be the",
    "start": "616220",
    "end": "621529"
  },
  {
    "text": "change should be small I've already said it preferably a single file or a change",
    "start": "621529",
    "end": "627620"
  },
  {
    "text": "in a single file that's all I liked we have because the corpus is",
    "start": "627620",
    "end": "633110"
  },
  {
    "text": "large and it cannot change all the clients the surprising thing about this",
    "start": "633110",
    "end": "639199"
  },
  {
    "text": "this regardless how ugly this macro function and macros itself are it's some",
    "start": "639199",
    "end": "648680"
  },
  {
    "text": "kind of API I define the name and I said I can pass something to that it's not",
    "start": "648680",
    "end": "656389"
  },
  {
    "text": "really checked for a macro part but it's an API so I need to mock this in some",
    "start": "656389",
    "end": "663829"
  },
  {
    "text": "way another good question is why I'm doing",
    "start": "663829",
    "end": "669040"
  },
  {
    "text": "this why I'm boring what's the benefit well the benefit should be that I like",
    "start": "669040",
    "end": "674920"
  },
  {
    "text": "to reveal probably previously unknown errors maybe there's some part in the",
    "start": "674920",
    "end": "680620"
  },
  {
    "text": "code base which does it already wrong and I can unrevealed that also I like to",
    "start": "680620",
    "end": "688209"
  },
  {
    "text": "improve writing new code I like this new code to trigger the error as soon as",
    "start": "688209",
    "end": "694240"
  },
  {
    "text": "possible compile time preferably this boils down",
    "start": "694240",
    "end": "701259"
  },
  {
    "text": "to if the user makes a mistake while implementing something new and using",
    "start": "701259",
    "end": "706600"
  },
  {
    "text": "that new function macro thingy then it should trigger an error as soon as",
    "start": "706600",
    "end": "713379"
  },
  {
    "text": "possible and as it fits partially into the doll thing I like it to be modern",
    "start": "713379",
    "end": "719490"
  },
  {
    "text": "more than C++ let's say C++ 11 that was what I had at hand at a time and it's",
    "start": "719490",
    "end": "727660"
  },
  {
    "text": "also kind of modern let's get rid of the macro if possible so that's a plan once",
    "start": "727660",
    "end": "737290"
  },
  {
    "text": "I made a plan and sit down and well thought about this what can I come up",
    "start": "737290",
    "end": "744790"
  },
  {
    "text": "with which what is better than what I currently health well I said I allow C++",
    "start": "744790",
    "end": "755769"
  },
  {
    "text": "11 and C++ 11 has this nice feature cons expert I can have concepts for functions",
    "start": "755769",
    "end": "763360"
  },
  {
    "text": "and they will be evaluated at compile time that's really nice and to stick any",
    "start": "763360",
    "end": "771509"
  },
  {
    "text": "possible type into a function I can make it a template function function template",
    "start": "771509",
    "end": "778569"
  },
  {
    "text": "sorry so it counts as exper a function template that sounds quite good that's",
    "start": "778569",
    "end": "786629"
  },
  {
    "text": "an implementation it's a function template taking two parameters first a",
    "start": "786629",
    "end": "794740"
  },
  {
    "text": "type name T which allows me to give pass any type and second parameter size T which is the",
    "start": "794740",
    "end": "805240"
  },
  {
    "text": "number of elements in that array which the compiler kindly did uses farce the",
    "start": "805240",
    "end": "813700"
  },
  {
    "text": "function itself I named it array size so it's the same name as the macro it takes one parameter and the parameter it takes",
    "start": "813700",
    "end": "821530"
  },
  {
    "text": "is a Const reference to an array of size",
    "start": "821530",
    "end": "826990"
  },
  {
    "text": "N and all I have to do afterwards is returning this number n and I'm done",
    "start": "826990",
    "end": "836190"
  },
  {
    "text": "that's not cool I think it's brilliant",
    "start": "836280",
    "end": "841420"
  },
  {
    "text": "really so let's compare to the plan well the change is fairly small icing the",
    "start": "841420",
    "end": "851470"
  },
  {
    "text": "client code doesn't see a thing so it must not change I'm not sure yet because",
    "start": "851470",
    "end": "857680"
  },
  {
    "text": "I haven't found any error but it's possible that it will reveal some it's",
    "start": "857680",
    "end": "863380"
  },
  {
    "text": "little or no change in the behavior whatsoever that's good the sad part is I",
    "start": "863380",
    "end": "870100"
  },
  {
    "text": "currently do not have a descriptive and meaningful error message but it's modern",
    "start": "870100",
    "end": "876480"
  },
  {
    "text": "all right and I cannot pass the pointer into that sing so goal achieved and brilliant part",
    "start": "876480",
    "end": "886560"
  },
  {
    "text": "they got rid of the macro isn't that brilliant late Friday evening and they",
    "start": "886560",
    "end": "892390"
  },
  {
    "text": "got rid of one macro so I think that celebration turn right that's quite an",
    "start": "892390",
    "end": "899980"
  },
  {
    "text": "achievement it's time to cheer now",
    "start": "899980",
    "end": "904990"
  },
  {
    "text": "alright ok well here's the sad part I really sort when preparing the talk that",
    "start": "904990",
    "end": "912430"
  },
  {
    "text": "it will take up an hour to get here but as nobody had questions so far we are",
    "start": "912430",
    "end": "917860"
  },
  {
    "text": "here after 15 minutes and as we already had lunch just before the talk I think",
    "start": "917860",
    "end": "923710"
  },
  {
    "text": "it's it's not a wise idea to give got back to lunch the good thing is I prepared a couple of",
    "start": "923710",
    "end": "930100"
  },
  {
    "text": "bonus slides so you can remain seated do you know this person some companies",
    "start": "930100",
    "end": "935520"
  },
  {
    "text": "help them some companies don't called build engineer this build engineers they",
    "start": "935520",
    "end": "941550"
  },
  {
    "text": "tell me all the time I should try before I push something into mainline and it's",
    "start": "941550",
    "end": "947700"
  },
  {
    "text": "totally reasonable I mean for a really big change sure totally",
    "start": "947700",
    "end": "954480"
  },
  {
    "text": "hey Korea but come on that teeny tiny change look at it again I mean what",
    "start": "954480",
    "end": "963720"
  },
  {
    "text": "could be a possible problem I have two opening curly and closing curly there's the semicolon on this the only",
    "start": "963720",
    "end": "971250"
  },
  {
    "text": "statement I have it's there it says template open angle bracket closing",
    "start": "971250",
    "end": "976980"
  },
  {
    "text": "angle bracket it's perfect and even for those of you who have really restrictive",
    "start": "976980",
    "end": "983340"
  },
  {
    "text": "builds which are really eager to find some arrows the parameter I'm passing in",
    "start": "983340",
    "end": "988650"
  },
  {
    "text": "has no name so we will not even get an unused parameter variable which could be",
    "start": "988650",
    "end": "995010"
  },
  {
    "text": "escalated to an arrow so they are saying it's brilliant",
    "start": "995010",
    "end": "1001130"
  },
  {
    "text": "it compiles there's not a brilliant part about this which was pointed out",
    "start": "1001130",
    "end": "1007610"
  },
  {
    "text": "yesterday during the shrimp cruise to me I I don't know didn't I wasn't aware of",
    "start": "1007610",
    "end": "1013640"
  },
  {
    "text": "that I skipped over it or I just have forgotten it happened to be that I found",
    "start": "1013640",
    "end": "1019490"
  },
  {
    "text": "the exact same solution that the standard library has since C++ 17 on the",
    "start": "1019490",
    "end": "1025760"
  },
  {
    "text": "left side you find the definition on the right side you can see a possible implementation which incidentally is",
    "start": "1025760",
    "end": "1034760"
  },
  {
    "text": "what I've shown you except now that I see it in that possible implementation",
    "start": "1034760",
    "end": "1041240"
  },
  {
    "text": "they named the parameter I suspect in the real implementation they don't because this could lead to some unused",
    "start": "1041240",
    "end": "1048410"
  },
  {
    "text": "parameter warnings so",
    "start": "1048410",
    "end": "1054490"
  },
  {
    "text": "if that isn't something to cheer about right I came up with the same solution of the standard and they tell me I",
    "start": "1054630",
    "end": "1060910"
  },
  {
    "text": "should try it come on people it's merrily the same sing I mean ya know now",
    "start": "1060910",
    "end": "1070800"
  },
  {
    "text": "turned out I had to stop the celebration was late Friday evening I would really",
    "start": "1070800",
    "end": "1077250"
  },
  {
    "text": "yeah I was really eager to celebrate but it turned out yet while I tried it",
    "start": "1077250",
    "end": "1084760"
  },
  {
    "text": "before I pushed it I hit an arrow that's the very descriptive error message my",
    "start": "1084760",
    "end": "1090940"
  },
  {
    "text": "friend the compiler gave me at a time I think it's obvious what happened here right anybody doesn't know no hands okay",
    "start": "1090940",
    "end": "1098680"
  },
  {
    "text": "so it's clear well they compiled a complaint about a little construct like",
    "start": "1098680",
    "end": "1105580"
  },
  {
    "text": "this I mean it's C++ you can do awful lot of things and one thing is you can't",
    "start": "1105580",
    "end": "1113140"
  },
  {
    "text": "have instruct let's say X which has some array member called we and then we",
    "start": "1113140",
    "end": "1120400"
  },
  {
    "text": "declare pointer of X name it also X small X and then we use the at sing in",
    "start": "1120400",
    "end": "1127690"
  },
  {
    "text": "and static assert and we say okay array size of X arrow we does that equal 12",
    "start": "1127690",
    "end": "1138190"
  },
  {
    "text": "and the problem that turned out here",
    "start": "1138190",
    "end": "1144100"
  },
  {
    "text": "then is that it's nice context poor function could be constant X per and I",
    "start": "1144100",
    "end": "1154630"
  },
  {
    "text": "violated at compile time but it must not and in a moment you stuff something in",
    "start": "1154630",
    "end": "1162040"
  },
  {
    "text": "there which is compile time run time related the compiler just silently will",
    "start": "1162040",
    "end": "1168880"
  },
  {
    "text": "make a run time function out of it and",
    "start": "1168880",
    "end": "1173950"
  },
  {
    "text": "this with this pointer thing we have addresses there are only known at runtime the compiler just decided well",
    "start": "1173950",
    "end": "1182100"
  },
  {
    "text": "you nice array size function that's a runtime functional",
    "start": "1182100",
    "end": "1187810"
  },
  {
    "text": "we stared so I happen to have created",
    "start": "1187810",
    "end": "1193560"
  },
  {
    "text": "something completely different from the macro before because now I have an runtime version of that erase icing and",
    "start": "1193560",
    "end": "1201060"
  },
  {
    "text": "it did not pass the static assert because in the case of the static dessert I need that value at compile",
    "start": "1201060",
    "end": "1208060"
  },
  {
    "text": "time so luckily this assert was in there the same thing would happen with the",
    "start": "1208060",
    "end": "1213580"
  },
  {
    "text": "standard library version and I wondered why this wasn't a problem before with",
    "start": "1213580",
    "end": "1219790"
  },
  {
    "text": "the size of seen a console that standard about this and here is the quote from",
    "start": "1219790",
    "end": "1226900"
  },
  {
    "text": "the standards the relevant part and it says the sizeof operator yields the",
    "start": "1226900",
    "end": "1232150"
  },
  {
    "text": "number of bytes occupied by a non potentially overlapping object of the",
    "start": "1232150",
    "end": "1238210"
  },
  {
    "text": "type of its operand the operand is either an expression or sorry which is",
    "start": "1238210",
    "end": "1247690"
  },
  {
    "text": "an unavailing operand so the sizeof operator does not",
    "start": "1247690",
    "end": "1254230"
  },
  {
    "text": "evaluate your statement which means that it does not invoke code it just varies",
    "start": "1254230",
    "end": "1263260"
  },
  {
    "text": "the size without for example instantiating your template or whatsoever so it turns out that size of",
    "start": "1263260",
    "end": "1271210"
  },
  {
    "text": "is quite special and the context the solution doesn't really working in all",
    "start": "1271210",
    "end": "1277480"
  },
  {
    "text": "the corner cases here so I'm essentially back to square one on a now very late",
    "start": "1277480",
    "end": "1283000"
  },
  {
    "text": "Friday evening missed two trains in a row but sometimes I get carried away so",
    "start": "1283000",
    "end": "1291120"
  },
  {
    "text": "and not giving up at this point so there there must be a solution so the next",
    "start": "1291120",
    "end": "1296470"
  },
  {
    "text": "solution what could be the next solution obviously the context per function is",
    "start": "1296470",
    "end": "1302650"
  },
  {
    "text": "not so good what as I said I like to use",
    "start": "1302650",
    "end": "1307900"
  },
  {
    "text": "C++ 11 there are two things in C++ 11 present which helped resolve this",
    "start": "1307900",
    "end": "1316090"
  },
  {
    "text": "problem first there is deco type deco type which",
    "start": "1316090",
    "end": "1321460"
  },
  {
    "text": "meda type at compile-time that's guaranteed so it sounds like a very good",
    "start": "1321460",
    "end": "1327549"
  },
  {
    "text": "approach to use to Steckle type to just get a type because i do not care about the rest of the expression just like the",
    "start": "1327549",
    "end": "1333490"
  },
  {
    "text": "type as soon as i have to type i need a number the C++ 11 standard has stood",
    "start": "1333490",
    "end": "1344770"
  },
  {
    "text": "extent which does this job very well I",
    "start": "1344770",
    "end": "1349890"
  },
  {
    "text": "copied it out I did it even back down this dot extent it's a small example",
    "start": "1349890",
    "end": "1359880"
  },
  {
    "text": "it's essentially a template class which takes a parameter T and it uses two size",
    "start": "1359880",
    "end": "1365770"
  },
  {
    "text": "as before the neat trick is as hell it has a static context precise T value in",
    "start": "1365770",
    "end": "1371529"
  },
  {
    "text": "it in which it stores the number which is in the first case and in the second",
    "start": "1371529",
    "end": "1377289"
  },
  {
    "text": "case I the really cool thing and that's the reason why I copied it out I admit",
    "start": "1377289",
    "end": "1382600"
  },
  {
    "text": "it's it's from cpp reference the only thing I added and that's the reason why I had to copy it is to study assert and",
    "start": "1382600",
    "end": "1388659"
  },
  {
    "text": "that's cool now I have to study assert now I can give and descriptive error",
    "start": "1388659",
    "end": "1395470"
  },
  {
    "text": "message why it fails the sad part is it turns out that a macro is back so I'm",
    "start": "1395470",
    "end": "1402070"
  },
  {
    "text": "not doing so good at this job barriada sings on the plan list they still are",
    "start": "1402070",
    "end": "1409600"
  },
  {
    "text": "checked so that's fine it's rock-solid",
    "start": "1409600",
    "end": "1415440"
  },
  {
    "text": "there's no function whatsoever involved it's just template context tackle type",
    "start": "1415440",
    "end": "1421299"
  },
  {
    "text": "it's guaranteed to run at runtime err compile time yeah try before push could",
    "start": "1421299",
    "end": "1430870"
  },
  {
    "text": "something go wrong this time I hardly think so oh I was so wrong I",
    "start": "1430870",
    "end": "1436720"
  },
  {
    "text": "was so wrong again I had to put a celebration back there there's one good",
    "start": "1436720",
    "end": "1444070"
  },
  {
    "text": "thing do you know if you have for instant this continuous integration build which takes 15 to 20 minutes",
    "start": "1444070",
    "end": "1451409"
  },
  {
    "text": "what's a good thing about this even on a late Friday evening it doesn't",
    "start": "1451409",
    "end": "1460120"
  },
  {
    "text": "take 15 minutes to fail in most cases cases fails very soon if you do it right",
    "start": "1460120",
    "end": "1465670"
  },
  {
    "text": "so it turned out it failed again",
    "start": "1465670",
    "end": "1470910"
  },
  {
    "text": "or did it it was first also ha Oh failed",
    "start": "1470910",
    "end": "1477430"
  },
  {
    "text": "damn and then I said no no no wait it says static assert yeah my study",
    "start": "1477430",
    "end": "1483160"
  },
  {
    "text": "gasser triggered I just real them previously hidden arrow isn't it great I did it yes on the other hand if you look",
    "start": "1483160",
    "end": "1494380"
  },
  {
    "text": "at this very descriptive information error message a bit more there's an",
    "start": "1494380",
    "end": "1500380"
  },
  {
    "text": "ampersand in there what does that mean it turned out that the esthetic assert",
    "start": "1500380",
    "end": "1506650"
  },
  {
    "text": "didn't trigger for the right reason obviously you can pass an array",
    "start": "1506650",
    "end": "1516310"
  },
  {
    "text": "reference to that thing it's a good",
    "start": "1516310",
    "end": "1521860"
  },
  {
    "text": "thing about a big code base you find most of the things possible I think so",
    "start": "1521860",
    "end": "1527440"
  },
  {
    "text": "this is a piece of code which trigger the arrow looks like I did not succeed so far cell solution plus plus decaled",
    "start": "1527440",
    "end": "1539020"
  },
  {
    "text": "hyebin's to extend still look promising the only thing was dereference and we",
    "start": "1539020",
    "end": "1545710"
  },
  {
    "text": "can handle that luckily we are in C++ 11 was there and there we have stood remove",
    "start": "1545710",
    "end": "1553540"
  },
  {
    "text": "reference how nice is they outright I can pass a type in and it just removes",
    "start": "1553540",
    "end": "1558850"
  },
  {
    "text": "the reference once again I copied this from snake oil flow cpp reference",
    "start": "1558850",
    "end": "1563980"
  },
  {
    "text": "because it's so easy it says remove forever end three times as a template class and it's overloaded for a usual T",
    "start": "1563980",
    "end": "1571840"
  },
  {
    "text": "for T ref and for a Kira frappe and in its body it just defines a type which is",
    "start": "1571840",
    "end": "1579370"
  },
  {
    "text": "T so I can query that later and because I like to stay this change to be a",
    "start": "1579370",
    "end": "1585100"
  },
  {
    "text": "simple and independent possible I thought this is the best idea to go the macro inners",
    "start": "1585100",
    "end": "1594909"
  },
  {
    "text": "increased a little bit so I think nobody likes to ride that anymore but aside",
    "start": "1594909",
    "end": "1600459"
  },
  {
    "text": "from that macro is still in a set part I have to static assert in place I can",
    "start": "1600459",
    "end": "1606070"
  },
  {
    "text": "change the error message to whatever text I like it's still smallish I mean",
    "start": "1606070",
    "end": "1613570"
  },
  {
    "text": "it fits on 28 lines so let's think pretty okay I also can leave all the",
    "start": "1613570",
    "end": "1622299"
  },
  {
    "text": "other things checked so celebration at",
    "start": "1622299",
    "end": "1633459"
  },
  {
    "text": "this point nobody seems to like to celebrate anymore right yeah you can burn your hands really really hard it",
    "start": "1633459",
    "end": "1642639"
  },
  {
    "text": "was not celebration time so far it wasn't this one was quite interesting",
    "start": "1642639",
    "end": "1650639"
  },
  {
    "text": "that's the error message this time it says undefined simple what I mean come",
    "start": "1650639",
    "end": "1660700"
  },
  {
    "text": "on what what I hit here an undefined symbol if you read closer at the end it",
    "start": "1660700",
    "end": "1669519"
  },
  {
    "text": "gives a hint where it happened it says unit tested Oh so somebody really used unit tests and",
    "start": "1669519",
    "end": "1676389"
  },
  {
    "text": "now we can see what it's getting you trouble just trouble I'm kidding",
    "start": "1676389",
    "end": "1682599"
  },
  {
    "text": "the funny thing is that that unit test catched an error in my implementation which it wasn't supposed to test but it",
    "start": "1682599",
    "end": "1689950"
  },
  {
    "text": "unreal did so that's a great thing about unit tests sometimes they discover problems they are not designed to",
    "start": "1689950",
    "end": "1696399"
  },
  {
    "text": "discover and this roughly the line which",
    "start": "1696399",
    "end": "1701739"
  },
  {
    "text": "triggered it it was G test at a time and it was just a test like to study absurd",
    "start": "1701739",
    "end": "1708159"
  },
  {
    "text": "before if this array length equals 16",
    "start": "1708159",
    "end": "1714839"
  },
  {
    "text": "simple the bad thing about G test is that it has this tremendous MA",
    "start": "1716009",
    "end": "1722500"
  },
  {
    "text": "of macros pointing to other macro functions and I had a really hard time",
    "start": "1722500",
    "end": "1728260"
  },
  {
    "text": "figuring out what's going on there what's the real code which triggers this",
    "start": "1728260",
    "end": "1734740"
  },
  {
    "text": "warning and after some time I found out",
    "start": "1734740",
    "end": "1741880"
  },
  {
    "text": "yet unit test frameworks like to capture things she passed in by cons reference",
    "start": "1741880",
    "end": "1748570"
  },
  {
    "text": "because not all types may be capable copies may be expensive so it's a wise",
    "start": "1748570",
    "end": "1753669"
  },
  {
    "text": "idea to capture by const reference then you have also temporaries covered so the",
    "start": "1753669",
    "end": "1760539"
  },
  {
    "text": "code looks a bit like this after",
    "start": "1760539",
    "end": "1766419"
  },
  {
    "text": "removing a whole lot of boilerplate code around us so i extracted this i was",
    "start": "1766419",
    "end": "1776500"
  },
  {
    "text": "happy i found it and i tried it with my implementation and do you know what it",
    "start": "1776500",
    "end": "1786789"
  },
  {
    "text": "compiled fine without error without warning so it was a bit puzzled because",
    "start": "1786789",
    "end": "1793960"
  },
  {
    "text": "i said well that's error I downloaded",
    "start": "1793960",
    "end": "1799960"
  },
  {
    "text": "the most recent version of Qi test compiled it it compiled I put the at",
    "start": "1799960",
    "end": "1807789"
  },
  {
    "text": "sing and my array size Zulu array length solution in there and it failed with",
    "start": "1807789",
    "end": "1814840"
  },
  {
    "text": "state error complaining about well you have an unresolved symbol there I was",
    "start": "1814840",
    "end": "1825940"
  },
  {
    "text": "completely I didn't know what to do here it compiled stereo doesn't compile it",
    "start": "1825940",
    "end": "1835360"
  },
  {
    "text": "took me an awful lot of time to figure out that she tests if you download it",
    "start": "1835360",
    "end": "1840940"
  },
  {
    "text": "and at least compile it with this Xcode it's very keen to show your arrows so it",
    "start": "1840940",
    "end": "1847870"
  },
  {
    "text": "has the pedantic option turned on that was one thing pedantic warns you",
    "start": "1847870",
    "end": "1855480"
  },
  {
    "text": "if as in my case if you declare a",
    "start": "1855480",
    "end": "1860500"
  },
  {
    "text": "template was the static Const in it or just a static member and never",
    "start": "1860500",
    "end": "1869260"
  },
  {
    "text": "define it so what's missing and that is a pain for the last couple of years is",
    "start": "1869260",
    "end": "1877540"
  },
  {
    "text": "that if you have such a thing you have a class the template doesn't matter here and if you have a static member it's not",
    "start": "1877540",
    "end": "1883660"
  },
  {
    "text": "enough to declare it in the class you have also to define it out where that's",
    "start": "1883660",
    "end": "1889960"
  },
  {
    "text": "why we often have in a CPP file the",
    "start": "1889960",
    "end": "1895050"
  },
  {
    "text": "variable named again to give the storage space to it because so far what I've",
    "start": "1895050",
    "end": "1901179"
  },
  {
    "text": "done in my template solution there was no storage space for well you",
    "start": "1901179",
    "end": "1907179"
  },
  {
    "text": "and that's not a problem as long as nobody tries to get a reference to that",
    "start": "1907179",
    "end": "1912790"
  },
  {
    "text": "thing which is what cheetah's does so",
    "start": "1912790",
    "end": "1921130"
  },
  {
    "text": "problem solved resort that's wonderful I turned the pedantic option on and",
    "start": "1921130",
    "end": "1926550"
  },
  {
    "text": "check if it Dan fails in my simple",
    "start": "1926550",
    "end": "1931929"
  },
  {
    "text": "example it should be right turning pedantic on which my simple",
    "start": "1931929",
    "end": "1937570"
  },
  {
    "text": "example should lead to failure nope it didn't it did compiled file and it took",
    "start": "1937570",
    "end": "1946420"
  },
  {
    "text": "me a lot more time to figure out that I was I think really helpful but not in",
    "start": "1946420",
    "end": "1954100"
  },
  {
    "text": "this case so helpful change in the standard and at home I was using C++ 17",
    "start": "1954100",
    "end": "1963910"
  },
  {
    "text": "as standard when compiling the C++ 17",
    "start": "1963910",
    "end": "1969280"
  },
  {
    "text": "standard has this code in it a function or static data member T",
    "start": "1969280",
    "end": "1976780"
  },
  {
    "text": "cleared with the context per specifier is implicitly an inline function or",
    "start": "1976780",
    "end": "1983230"
  },
  {
    "text": "variable that means that I do not have to define it",
    "start": "1983230",
    "end": "1989260"
  },
  {
    "text": "somewhere else it's enough we see plus plus 17 to declare it within the class",
    "start": "1989260",
    "end": "1996070"
  },
  {
    "text": "if it's static in context / that's a big leaf because a lot of header on the library has had this issue and I kind of",
    "start": "1996070",
    "end": "2006600"
  },
  {
    "text": "stumbled over this by compiling it with C++ 17 so as soon as I got back from 17",
    "start": "2006600",
    "end": "2015720"
  },
  {
    "text": "to 11 it failed so the thing is I only",
    "start": "2015720",
    "end": "2020940"
  },
  {
    "text": "had 11 at hand so this wasn't helpful at the time and having to change another",
    "start": "2020940",
    "end": "2030330"
  },
  {
    "text": "file or introduce a second file just to say there's the static variable that",
    "start": "2030330",
    "end": "2037620"
  },
  {
    "text": "wasn't really an option so thankfully we",
    "start": "2037620",
    "end": "2044220"
  },
  {
    "text": "we have a lot of terms for this so it's the ng solution + + + needed a lot of",
    "start": "2044220",
    "end": "2050610"
  },
  {
    "text": "possible solution that's what a cave I",
    "start": "2050610",
    "end": "2055790"
  },
  {
    "text": "have this nice template thing going on with deco table and all that stuff in so",
    "start": "2055790",
    "end": "2063120"
  },
  {
    "text": "I get a tie but get a number the only time it fails is if somebody tries to",
    "start": "2063120",
    "end": "2070710"
  },
  {
    "text": "get an address of that thing so let's combine this approach we'll see first",
    "start": "2070710",
    "end": "2077580"
  },
  {
    "text": "approach because what I have currently is a compile time value without an",
    "start": "2077580",
    "end": "2084540"
  },
  {
    "text": "address so let's stuff this in into a",
    "start": "2084540",
    "end": "2089600"
  },
  {
    "text": "context Pro function called get size",
    "start": "2089600",
    "end": "2095210"
  },
  {
    "text": "it's a function template so this time it's guaranteed to be evaluated at",
    "start": "2095210",
    "end": "2101760"
  },
  {
    "text": "compile time we have this deco type magic ante remove reference understood",
    "start": "2101760",
    "end": "2107640"
  },
  {
    "text": "extend or the own implementation of extent going on",
    "start": "2107640",
    "end": "2112550"
  },
  {
    "text": "so that's that's a fine solution if you",
    "start": "2114730",
    "end": "2122410"
  },
  {
    "text": "like to use the standard library which I recommend because whilst the standard",
    "start": "2122410",
    "end": "2128170"
  },
  {
    "text": "library I didn't have that problem in the first place because they were defining and declaring everything the",
    "start": "2128170",
    "end": "2133420"
  },
  {
    "text": "right way even in C++ 11 you can reduce this piece of code quite a bit the final",
    "start": "2133420",
    "end": "2141730"
  },
  {
    "text": "solution then looks like this the nice thing is I now be able to move that",
    "start": "2141730",
    "end": "2147130"
  },
  {
    "text": "static assert into the function so I only have one static assert means only one error message and I can change it so",
    "start": "2147130",
    "end": "2158050"
  },
  {
    "text": "according to my plan I am doing very well except for the macro I'm still not able to get rid of it we can argue that",
    "start": "2158050",
    "end": "2167230"
  },
  {
    "text": "maybe with this get sizing it's so small you could write it all the time but",
    "start": "2167230",
    "end": "2173470"
  },
  {
    "text": "async the macro is still the better option so that's this time really a",
    "start": "2173470",
    "end": "2180790"
  },
  {
    "text": "celebration time that's the final solution that one's working so it turns",
    "start": "2180790",
    "end": "2186130"
  },
  {
    "text": "out that even what's in the standard does not cover all the cases it just covers a few cases that might be enough",
    "start": "2186130",
    "end": "2193390"
  },
  {
    "text": "for you this one covers more I still feel a little bit uncomfortable saying",
    "start": "2193390",
    "end": "2199480"
  },
  {
    "text": "it covers all even the codebase boss big and old but it does its job for me at",
    "start": "2199480",
    "end": "2208990"
  },
  {
    "text": "this point I saw a cape now I spend so much time on figuring out that problem",
    "start": "2208990",
    "end": "2214599"
  },
  {
    "text": "on my own what it others do and how I do",
    "start": "2214599",
    "end": "2220380"
  },
  {
    "text": "ask artists today we used to sing this to sing with with the classes called",
    "start": "2220380",
    "end": "2226390"
  },
  {
    "text": "Google so I googled for it Google array size C++ it turned out that we are not",
    "start": "2226390",
    "end": "2234400"
  },
  {
    "text": "even agree on the name there's array size there's the railings there's count",
    "start": "2234400",
    "end": "2240190"
  },
  {
    "text": "off spelled in the different ways so there there's no real name for that",
    "start": "2240190",
    "end": "2247329"
  },
  {
    "text": "thing but found one solution it's the most recent one I came across it's from Google Apps",
    "start": "2247329",
    "end": "2253240"
  },
  {
    "text": "ale who knows Google Apps ale too few hands check that out Google Apps ale it",
    "start": "2253240",
    "end": "2259900"
  },
  {
    "text": "provides my library and it provides nice tips about how to write C++ in a save",
    "start": "2259900",
    "end": "2266020"
  },
  {
    "text": "array let's say that so it's it feels biggish but if you remove the comments",
    "start": "2266020",
    "end": "2273340"
  },
  {
    "text": "it's it's short it's shorter than my solution the good thing is even Google",
    "start": "2273340",
    "end": "2279310"
  },
  {
    "text": "needs a macro so if they need a macro I am fine with the macro so there is no",
    "start": "2279310",
    "end": "2285070"
  },
  {
    "text": "way to get around this what I are doing here is it's it's really clever they use",
    "start": "2285070",
    "end": "2290290"
  },
  {
    "text": "the size of remember from the beginning whatever your stick into sizeof is an unavailing operand so you will not get",
    "start": "2290290",
    "end": "2298420"
  },
  {
    "text": "any code generated from that and below here they define a function template",
    "start": "2298420",
    "end": "2305680"
  },
  {
    "text": "called resize helper which is nearly the same what I did it takes two parameters the",
    "start": "2305680",
    "end": "2313030"
  },
  {
    "text": "type name T and the size n it's the size of the number of elements it does one",
    "start": "2313030",
    "end": "2321490"
  },
  {
    "text": "neat trick it has a return type Auto and it uses the trading return type here the",
    "start": "2321490",
    "end": "2332290"
  },
  {
    "text": "nice thing it does it pins this type to in charm so we know that char is size of",
    "start": "2332290",
    "end": "2338920"
  },
  {
    "text": "1 and then it says yeah well what is sinh returns is a char array of",
    "start": "2338920",
    "end": "2344620"
  },
  {
    "text": "references of size N and that's why they can pass it in to the size of expression",
    "start": "2344620",
    "end": "2351430"
  },
  {
    "text": "without the need for dividing it whatsoever so that's a version which",
    "start": "2351430",
    "end": "2357040"
  },
  {
    "text": "works with C++ 11 it's a bit simpler you do not get a customizable error message",
    "start": "2357040",
    "end": "2365950"
  },
  {
    "text": "I would say here I haven't tested it I believe it does",
    "start": "2365950",
    "end": "2379770"
  },
  {
    "text": "I'm not quite sure you're right I'm not I'm not certain how the size of",
    "start": "2379770",
    "end": "2387400"
  },
  {
    "text": "expression relates into debt I have to try it I'm not sure I believe it does",
    "start": "2387400",
    "end": "2394630"
  },
  {
    "text": "but I'm not sure it's hard to set up unit tests which are supposed to fail in",
    "start": "2394630",
    "end": "2400600"
  },
  {
    "text": "mérida they don't even compile I failed to stat so far so thank you for the question",
    "start": "2400600",
    "end": "2407520"
  },
  {
    "text": "another solution I came across is this one it's from I think a blog post from",
    "start": "2407520",
    "end": "2414010"
  },
  {
    "text": "Nate Cole and the title was making count of sockless it comes down to the same",
    "start": "2414010",
    "end": "2424540"
  },
  {
    "text": "way we can see here he also uses size of passes in this array size helper which",
    "start": "2424540",
    "end": "2432610"
  },
  {
    "text": "happens to be also a function same signature as as I came up with and this",
    "start": "2432610",
    "end": "2440290"
  },
  {
    "text": "is apparently the way to declare a function returning a char array in C++",
    "start": "2440290",
    "end": "2451530"
  },
  {
    "text": "it's the one where you have maybe to read more I don't know as compared to",
    "start": "2451530",
    "end": "2457720"
  },
  {
    "text": "the auto solution it works back what's comfortable to possibly C++ 98 there's",
    "start": "2457720",
    "end": "2465250"
  },
  {
    "text": "another one it's from the dr. Dobbs Journal it's from Ivan Johnson the title",
    "start": "2465250",
    "end": "2471760"
  },
  {
    "text": "here was counting array elements at compile time so again it's it's not it's",
    "start": "2471760",
    "end": "2478450"
  },
  {
    "text": "not really sure what we what we agree on the name the nice thing here is I don't",
    "start": "2478450",
    "end": "2484960"
  },
  {
    "text": "like to go into this top level six expression of count offs it title it",
    "start": "2484960",
    "end": "2491350"
  },
  {
    "text": "count of destruct the name of the struct better to count off this will pop up in",
    "start": "2491350",
    "end": "2498250"
  },
  {
    "text": "your error message if you pass in a pointer so it gives you kind of a descriptive error message what happened",
    "start": "2498250",
    "end": "2506160"
  },
  {
    "text": "that's a nice thing if you don't look at all these reinterpret castings and so on I believe it works",
    "start": "2506160",
    "end": "2513300"
  },
  {
    "text": "its older solution so that's that's cool",
    "start": "2513300",
    "end": "2521940"
  },
  {
    "text": "and miss all that I scratched my head",
    "start": "2521940",
    "end": "2528190"
  },
  {
    "text": "and I said well now I know a couple of solution working with C++ 11 and newer",
    "start": "2528190",
    "end": "2534280"
  },
  {
    "text": "some also backwards compatible to C++ 98 obviously 1998 is not the same thing as",
    "start": "2534280",
    "end": "2542890"
  },
  {
    "text": "the new shiny - blah 20 80 we have C++",
    "start": "2542890",
    "end": "2549520"
  },
  {
    "text": "11 if C++ 14 and we have C++ 17 we are looking forward to C++ 20 so let's take",
    "start": "2549520",
    "end": "2560950"
  },
  {
    "text": "another approach a whole different approach I I was not sure if somebody",
    "start": "2560950",
    "end": "2568000"
  },
  {
    "text": "would complain right in the beginning it's a slide from the beginning nobody",
    "start": "2568000",
    "end": "2573010"
  },
  {
    "text": "complained luckily I hate this piece of",
    "start": "2573010",
    "end": "2580210"
  },
  {
    "text": "code I totally hate it I mean look at it",
    "start": "2580210",
    "end": "2585460"
  },
  {
    "text": "I said modern can you even tell that it is C++ that there's one little clue",
    "start": "2585460",
    "end": "2593170"
  },
  {
    "text": "that's the in line definition of Ind I there I believe it's not allowed in",
    "start": "2593170",
    "end": "2600010"
  },
  {
    "text": "plain C so that's not modern much better",
    "start": "2600010",
    "end": "2610080"
  },
  {
    "text": "much better right range B is followed that's more in C++",
    "start": "2610080",
    "end": "2617070"
  },
  {
    "text": "what's the best part about this it's the",
    "start": "2617070",
    "end": "2622330"
  },
  {
    "text": "thing you don't see and you don't have to write that nasty sighs off it's gone",
    "start": "2622330",
    "end": "2627940"
  },
  {
    "text": "and if you think about it we tried several approaches and they are even",
    "start": "2627940",
    "end": "2633460"
  },
  {
    "text": "more in the Internet just to figure out the number the compiler already knows to",
    "start": "2633460",
    "end": "2640660"
  },
  {
    "text": "tell the compiler exactly there number it's not necessary with a range",
    "start": "2640660",
    "end": "2646719"
  },
  {
    "text": "base for the compiler knows how big that array is so being modern seems to be a",
    "start": "2646719",
    "end": "2655209"
  },
  {
    "text": "good thing now we can say okay there are cases when I do not have to sew clothes",
    "start": "2655209",
    "end": "2662739"
  },
  {
    "text": "locally to each other maybe I like to pass this array over to a function and",
    "start": "2662739",
    "end": "2670119"
  },
  {
    "text": "then like to iterate over it no problem you can for example use stood array",
    "start": "2670119",
    "end": "2677160"
  },
  {
    "text": "which is a new STL component the container like type it's just a wrapper",
    "start": "2677160",
    "end": "2683769"
  },
  {
    "text": "over a usual array you can say which",
    "start": "2683769",
    "end": "2688900"
  },
  {
    "text": "type it has in my case char and you can say specify the size of that buffer 16",
    "start": "2688900",
    "end": "2698400"
  },
  {
    "text": "and then I can use it in a range based followed because it's very well designed LCL container it carries the size with",
    "start": "2698400",
    "end": "2708699"
  },
  {
    "text": "it that's one way to go that's a good",
    "start": "2708699",
    "end": "2714309"
  },
  {
    "text": "one the the problem I have is this a",
    "start": "2714309",
    "end": "2720910"
  },
  {
    "text": "little bit is 216 in there typically I",
    "start": "2720910",
    "end": "2727689"
  },
  {
    "text": "have different size buffers so 16",
    "start": "2727689",
    "end": "2733170"
  },
  {
    "text": "doesn't do a good job there so I can use or can make foo",
    "start": "2733170",
    "end": "2738759"
  },
  {
    "text": "a function template and let it use this number but then I may end up with a lot",
    "start": "2738759",
    "end": "2746199"
  },
  {
    "text": "of additional code generated which is not what I want",
    "start": "2746199",
    "end": "2752759"
  },
  {
    "text": "there's one more way to do it",
    "start": "2753239",
    "end": "2758789"
  },
  {
    "text": "it will maybe come with C++ 20 so that's a bit of a forward-looking here in the",
    "start": "2758880",
    "end": "2765819"
  },
  {
    "text": "future there will be a type called span",
    "start": "2765819",
    "end": "2771359"
  },
  {
    "text": "who has heard about string you",
    "start": "2771359",
    "end": "2776038"
  },
  {
    "text": "alright alright very little hands and very less of them",
    "start": "2776700",
    "end": "2783220"
  },
  {
    "text": "so go to Victor's talk later on he tells you all about string view and why are",
    "start": "2783220",
    "end": "2789310"
  },
  {
    "text": "it's directly after this talk right when why you probably can hang yourself as",
    "start": "2789310",
    "end": "2794920"
  },
  {
    "text": "them but string you is a nice type it's a wrapper over or it gives you a",
    "start": "2794920",
    "end": "2801849"
  },
  {
    "text": "portion or a whole stood string or a char string you can take slices out of a",
    "start": "2801849",
    "end": "2808780"
  },
  {
    "text": "stoat string and pass it around cheaply without having all the new allocations in case of spam it's similar it works",
    "start": "2808780",
    "end": "2818710"
  },
  {
    "text": "just with any array type so you can say okay that's my array make a spare an",
    "start": "2818710",
    "end": "2824440"
  },
  {
    "text": "outfit out of it and I can pass it around as shown here the nice thing is that span contains the number already I",
    "start": "2824440",
    "end": "2832660"
  },
  {
    "text": "don't have to specify it as a template parameter so I'm good with that",
    "start": "2832660",
    "end": "2839080"
  },
  {
    "text": "it can be any size of span as I said it",
    "start": "2839080",
    "end": "2845470"
  },
  {
    "text": "will probably be part of sibylla's plus 20 looks a little bit uncertain there if",
    "start": "2845470",
    "end": "2853240"
  },
  {
    "text": "you like to try it our tears and implementation there are a couple of implementations one I came across is",
    "start": "2853240",
    "end": "2859119"
  },
  {
    "text": "spam light it's provided by Martin Manu Dutch I'm not sure if I pronounce that",
    "start": "2859119",
    "end": "2866109"
  },
  {
    "text": "name right and it the nice thing it's it's backwards compatible to C++ 98 and",
    "start": "2866109",
    "end": "2871540"
  },
  {
    "text": "that that's a real cool thing you may not have the range based for loops there but you don't need to worry about the",
    "start": "2871540",
    "end": "2879190"
  },
  {
    "text": "size of thing because you can't just ask that span you can say data dot size and",
    "start": "2879190",
    "end": "2885970"
  },
  {
    "text": "you get the size of the span and you don't need to worry any longer about",
    "start": "2885970",
    "end": "2893940"
  },
  {
    "text": "what's that unresolved symbol I got here when I try to implement my array size",
    "start": "2893940",
    "end": "2900339"
  },
  {
    "text": "count of whatever named function it just",
    "start": "2900339",
    "end": "2905859"
  },
  {
    "text": "does for you so I figured being modern is a",
    "start": "2905859",
    "end": "2915009"
  },
  {
    "text": "real great thing even that Andre Alexandra school wrote that basically and back in 2001 three the book about",
    "start": "2915009",
    "end": "2923019"
  },
  {
    "text": "modern C++ it still sticks being modern whatever modern means is a good thing in",
    "start": "2923019",
    "end": "2930339"
  },
  {
    "text": "case of siblings plus eleven fourteen seventeen twenty probably it pranks you",
    "start": "2930339",
    "end": "2936430"
  },
  {
    "text": "more type safety built-in as we strange peaceful oops you do not have to worry",
    "start": "2936430",
    "end": "2942789"
  },
  {
    "text": "about a lot of things so if you try to use these constructs you're probably can",
    "start": "2942789",
    "end": "2951999"
  },
  {
    "text": "go home sooner on some of this late evening Fridays right safe code stable",
    "start": "2951999",
    "end": "2959499"
  },
  {
    "text": "code less cold probably which is also a good thing so consider being modern as a",
    "start": "2959499",
    "end": "2970229"
  },
  {
    "text": "really good thing my name is Andreas",
    "start": "2970229",
    "end": "2975249"
  },
  {
    "text": "it's been a pleasure giving a talk to you today I'll be around for questions later and this is a nice play we're at",
    "start": "2975249",
    "end": "2983650"
  },
  {
    "text": "play in German because my last name is fetish and fetish in Germany means and",
    "start": "2983650",
    "end": "2988929"
  },
  {
    "text": "done basically thank you",
    "start": "2988929",
    "end": "2994349"
  },
  {
    "text": "questions yeah Victor okay the question",
    "start": "2999790",
    "end": "3019720"
  },
  {
    "text": "is can I tell you examples or experiences bringing new constructs into",
    "start": "3019720",
    "end": "3028740"
  },
  {
    "text": "older standards like some things we can't have in C++ 11 we like to f + C +",
    "start": "3028740",
    "end": "3037150"
  },
  {
    "text": "+ 98 because we are stuck in some of these embedded systems I don't know about which all compilers yes a few",
    "start": "3037150",
    "end": "3049150"
  },
  {
    "text": "things go very well this parent like this example there are other implementations that stood array",
    "start": "3049150",
    "end": "3056710"
  },
  {
    "text": "is possible for example - if you like such constructs it's some things may not",
    "start": "3056710",
    "end": "3067920"
  },
  {
    "text": "the other way around some things may require more typing because we got this new deduction rule",
    "start": "3067920",
    "end": "3073900"
  },
  {
    "text": "so we the compiler does a better job for us did using the type in all the",
    "start": "3073900",
    "end": "3079630"
  },
  {
    "text": "versions you may have to write more on that that's if you really like to go",
    "start": "3079630",
    "end": "3085510"
  },
  {
    "text": "backwards to C++ 98 if you let's say on",
    "start": "3085510",
    "end": "3091470"
  },
  {
    "text": "C++ 11 and try to go the other way around you like to use features from C++",
    "start": "3091470",
    "end": "3097060"
  },
  {
    "text": "17 then you should check out Google Apps I'll Google Epsilon's directly for that",
    "start": "3097060",
    "end": "3102400"
  },
  {
    "text": "they bringing new features from the standard as long as implementable back",
    "start": "3102400",
    "end": "3109120"
  },
  {
    "text": "to C++ 11 they say they give you the guarantee that there are five years",
    "start": "3109120",
    "end": "3115360"
  },
  {
    "text": "backwards compatible meaning as soon as she blows +17 came out the five year",
    "start": "3115360",
    "end": "3121510"
  },
  {
    "text": "counting started and in five years they will deprecated the simple plus 11 support but will then have",
    "start": "3121510",
    "end": "3129070"
  },
  {
    "text": "C++ 24 C++ 17 and so and they also try",
    "start": "3129070",
    "end": "3134470"
  },
  {
    "text": "to provide tooling to do the refactoring if required at the time so I think there",
    "start": "3134470",
    "end": "3143020"
  },
  {
    "text": "are things that possible which are possible here other questions",
    "start": "3143020",
    "end": "3151890"
  },
  {
    "text": "so I explained it very well then have a nice day",
    "start": "3156269",
    "end": "3161839"
  }
]