[
  {
    "text": "all right I guess that's my Q they told me that the house lights would go down and they told me the music would fade",
    "start": "6600",
    "end": "12519"
  },
  {
    "text": "out so that has happened it's quite cozy in here it's last session of the day so I hope you had a great day so far let's",
    "start": "12519",
    "end": "20000"
  },
  {
    "text": "keep it lighthearted let's keep it entertaining uh hopefully I'll be able to pass along a little bit of knowledge",
    "start": "20000",
    "end": "26840"
  },
  {
    "text": "but I won't be that arrogant we'll see how we Fair it's always it's great to be in London and thank you to the NDC crew",
    "start": "26840",
    "end": "32640"
  },
  {
    "text": "for inviting me over this is my second NDC event and uh it's a pleasure I hope I'm in the circle now and I can get",
    "start": "32640",
    "end": "39399"
  },
  {
    "text": "selected for other events but we'll see about that so this presentation is about low testing with k6 and there's this",
    "start": "39399",
    "end": "45320"
  },
  {
    "text": "emphasis on distributed load testing but you'll have to bear with me it it'll happen near the end so first I need to",
    "start": "45320",
    "end": "51640"
  },
  {
    "text": "do the groundwork explain a bunch of things honestly I don't think I need an hour uh I I will press the button and my",
    "start": "51640",
    "end": "58399"
  },
  {
    "text": "counter will go so I'll keep a close eye on that but maybe we'll be done earlier that being",
    "start": "58399",
    "end": "64640"
  },
  {
    "text": "said let's make this work there we go hi my name is t yes that's how you",
    "start": "64640",
    "end": "69960"
  },
  {
    "text": "pronounce that I'm from Belgium Dutch speaking Belgium and I'm the tech evangelist at a company called varnish",
    "start": "69960",
    "end": "75799"
  },
  {
    "text": "software Now by show of hands who's heard of varnish software before a couple a couple I call that room for",
    "start": "75799",
    "end": "82520"
  },
  {
    "text": "improvement so uh the people who do know us who have heard about us know that we're the company behind a very popular",
    "start": "82520",
    "end": "88799"
  },
  {
    "text": "open source cach called varnish cash and as an evangelist I advocate all of that but I won't be doing that today but",
    "start": "88799",
    "end": "96399"
  },
  {
    "text": "before I can actually talk about the topic at hand I need to again lay the foundations and I want to introduce what",
    "start": "96399",
    "end": "102759"
  },
  {
    "text": "we do and that will help us contextualize where we're heading in this presentation so we're a company that cares about caching about web",
    "start": "102759",
    "end": "108560"
  },
  {
    "text": "acceleration about content delivery and our open source product is used by about 10 million active websites representing",
    "start": "108560",
    "end": "114399"
  },
  {
    "text": "22% of the top 10,000 websites if you follow the timeline which we won't focus on too much is it all started from an",
    "start": "114399",
    "end": "121640"
  },
  {
    "text": "open source project and it led to us creating a commercial entity that spun out of an an open source consultancy",
    "start": "121640",
    "end": "128720"
  },
  {
    "text": "company out of Norway and here we are now where I spent most of my time talking about content delivery talking",
    "start": "128720",
    "end": "134760"
  },
  {
    "text": "about web acceleration about Edge compute but primarily within an Enterprise context so if you ask us what",
    "start": "134760",
    "end": "139920"
  },
  {
    "text": "we do yes yes we make the web faster that's our bread and butter that's that's what we do however we also",
    "start": "139920",
    "end": "145920"
  },
  {
    "text": "enhance digital experiences by lowering Network latency and that's pretty much our play on private content delivery",
    "start": "145920",
    "end": "153400"
  },
  {
    "text": "that's the world I work in the world I live in so the exact definition is we are a company that builds software",
    "start": "153400",
    "end": "159200"
  },
  {
    "text": "defined web acceleration and content Delivery Solutions strong emphasis on software defined and our claim to fame it's a",
    "start": "159200",
    "end": "167640"
  },
  {
    "text": "it's it's not a stat that we figured out it's not a benchmark we have done it's actually Intel who benchmarked us so I",
    "start": "167640",
    "end": "174200"
  },
  {
    "text": "think it's exactly a year ago at Mobile worldcon in Barcelona they introduced a new set of uh new generation of CP us",
    "start": "174200",
    "end": "180480"
  },
  {
    "text": "and in the buildup phase of that release they did a bunch of tests and they added our stuff to the mix to see how far we",
    "start": "180480",
    "end": "185799"
  },
  {
    "text": "could drive it purely based on software no Hardware acceleration on pretty big stack pretty big rig but it was",
    "start": "185799",
    "end": "193440"
  },
  {
    "text": "commercial of the Shelf you can buy this and we ended up at 1.3 terabits per second on a single machine of trit again",
    "start": "193440",
    "end": "199239"
  },
  {
    "text": "purely software based which apparently currently is a world record we'll see uh",
    "start": "199239",
    "end": "204319"
  },
  {
    "text": "there's definitely someone who will come out of the woodwork and overtake us fully aware of that the more important",
    "start": "204319",
    "end": "209920"
  },
  {
    "text": "number is the one on the right hand side to achieve this we got our energy consumption down to 1.17 gbits per",
    "start": "209920",
    "end": "215680"
  },
  {
    "text": "second on a single watt so from an efficiency sustainability point of view that's really great and that's where we",
    "start": "215680",
    "end": "223120"
  },
  {
    "text": "start that's the world I live in uh you can reach me if you want to on a variety",
    "start": "223120",
    "end": "228280"
  },
  {
    "text": "of social media platforms I'm at daying everywhere I deliberately kept the bird continue to do so going forward I'm",
    "start": "228280",
    "end": "236519"
  },
  {
    "text": "the author of an old book getting started with varnish cash uh I have a new one or newer one that's my co work",
    "start": "236519",
    "end": "244000"
  },
  {
    "text": "varnish six by example you can download a copy for free uh normally I bring",
    "start": "244000",
    "end": "249040"
  },
  {
    "text": "physical copies but this is again not a presentation about varnish this is about k6 this is about low testing so how do",
    "start": "249040",
    "end": "256120"
  },
  {
    "text": "we end up from all of that intro like talking about caching talking about web acceleration content delivery how do we",
    "start": "256120",
    "end": "261840"
  },
  {
    "text": "end up with load testing well the answer is if you're dealing with things at such a scale you obviously need to give the",
    "start": "261840",
    "end": "269080"
  },
  {
    "text": "system a run for its money if you want to make those claims those benchmarks you have to have tools to do so now we",
    "start": "269080",
    "end": "275560"
  },
  {
    "text": "didn't use k6 for the 1.3 terabits per second we used a tool called wrk or at",
    "start": "275560",
    "end": "281000"
  },
  {
    "text": "least Intel did when they did the benchmarks but I had a different situation so in",
    "start": "281000",
    "end": "286360"
  },
  {
    "text": "2022 the fall of 2022 I was on a world tour an actual World Tour so I was on",
    "start": "286360",
    "end": "291520"
  },
  {
    "text": "slack and my boss asked me hey Tas do you feel comfortable doing that product demo again that you've did a while ago I",
    "start": "291520",
    "end": "296919"
  },
  {
    "text": "was like yes like very short yes sure why and then in in in very",
    "start": "296919",
    "end": "302280"
  },
  {
    "text": "straightforward terms he said have you ever traveled the world and one thing led to the other took the show on the",
    "start": "302280",
    "end": "308039"
  },
  {
    "text": "road and wanted to show how to build a private CDN using nothing more than",
    "start": "308039",
    "end": "313120"
  },
  {
    "text": "software on a pretty basic AWS stack and I wanted to generate some traffic on there I needed a load testing tool to",
    "start": "313120",
    "end": "320280"
  },
  {
    "text": "ensure that people saw that we didn't do Mickey Mouse numbers and I was in a meeting with a colleague and he said why not try k6 k6 is a pretty awesome tool",
    "start": "320280",
    "end": "328160"
  },
  {
    "text": "I'd never heard of it so I went to the website look for it was presently surprised apparently it's a tool built",
    "start": "328160",
    "end": "334000"
  },
  {
    "text": "by the lovely people at grafana labs and it has some cool capabilities capabilities such as the fact that",
    "start": "334000",
    "end": "339800"
  },
  {
    "text": "everything is written in CLI tools I mean we all love CLI tools right like have you ever tried have you ever had to",
    "start": "339800",
    "end": "346319"
  },
  {
    "text": "convince a non-tech person that clis are way faster than guis like I had to do",
    "start": "346319",
    "end": "351520"
  },
  {
    "text": "that and he's like no but you can take the mouse and you can click it real fast like no CIS trust me I guess there's",
    "start": "351520",
    "end": "358039"
  },
  {
    "text": "consensus here I shouldn't over dramatize that fact we know if there's a CLI tool and even better if",
    "start": "358039",
    "end": "364479"
  },
  {
    "text": "the CLI tool can be used to execute something that is scripted wow we're taking it to the next level now the",
    "start": "364479",
    "end": "370560"
  },
  {
    "text": "scripting happens in JavaScript different variations of JavaScript you can Define the scenarios and there's",
    "start": "370560",
    "end": "376919"
  },
  {
    "text": "modules and you can define checks and metrics and thresholds and all that nice kind of stuff and throughout you can",
    "start": "376919",
    "end": "382479"
  },
  {
    "text": "make it even more advanced by passing along parameters by tuning things by defining scenarios something that is out of scope",
    "start": "382479",
    "end": "388800"
  },
  {
    "text": "for this presentation is the test Builders the browser recorders and the browser testing maybe at some point I'll make a dedicated presentation about that",
    "start": "388800",
    "end": "395240"
  },
  {
    "text": "but there's only so much you could talk about and in the end and and that's really important we'll also talk about",
    "start": "395240",
    "end": "400280"
  },
  {
    "text": "result storage and visualization Integrations key feature that everyone",
    "start": "400280",
    "end": "405560"
  },
  {
    "text": "should be excited about is the fact that you can write oral performance tests in some variation of JavaScript am I a",
    "start": "405560",
    "end": "411400"
  },
  {
    "text": "JavaScript fan no do I believe that JavaScript is the best language in the world no but it is the language of the",
    "start": "411400",
    "end": "418800"
  },
  {
    "text": "people maybe is that the right description it's the linga Fran the fact that I'm speaking English to you and not",
    "start": "418800",
    "end": "425240"
  },
  {
    "text": "my native language Dutch means that English is more popular than Dutch and I think that applies to JavaScript as well",
    "start": "425240",
    "end": "431319"
  },
  {
    "text": "you can hate on JavaScript but a lot of people know it and there's a lot of support for it so that's why we need to",
    "start": "431319",
    "end": "436759"
  },
  {
    "text": "be excited about that you want to see some code right I've been babbling about JavaScript and the fact that it's there",
    "start": "436759",
    "end": "443319"
  },
  {
    "text": "and you can use it well here you go here is the simplest form of HTTP execution",
    "start": "443319",
    "end": "448680"
  },
  {
    "text": "you can do in here very straightforward now uh again slides will",
    "start": "448680",
    "end": "454000"
  },
  {
    "text": "be online later you could steal that code and interestingly enough that test. k6 doio that actually works so the",
    "start": "454000",
    "end": "460520"
  },
  {
    "text": "people at k6 provide these online testing tools that you can I mean it's",
    "start": "460520",
    "end": "466199"
  },
  {
    "text": "pretty ridiculous right so everyone can play around with that and everyone will push that to the max like",
    "start": "466199",
    "end": "472680"
  },
  {
    "text": "send boat loads I was about to use another word boat loads of uh of traffic",
    "start": "472680",
    "end": "478360"
  },
  {
    "text": "in that direction and still survive so it's it's pretty neat and you should try it now you define a script and I",
    "start": "478360",
    "end": "484800"
  },
  {
    "text": "mentioned the CLI tools how do you perform the execution well the execution happens threea it's all happens with the",
    "start": "484800",
    "end": "491120"
  },
  {
    "text": "k6 binary but there subcommands subcommands to run local runs that will consume resources on your system to get",
    "start": "491120",
    "end": "498400"
  },
  {
    "text": "the job done you can run it in the cloud which is their commercial product which is nothing more than a trigger to a",
    "start": "498400",
    "end": "503680"
  },
  {
    "text": "bunch of machines online that will do the work for you and Via kubernetes if you want to use some level of automated",
    "start": "503680",
    "end": "511800"
  },
  {
    "text": "orchestration and so on so if you're interested in running it locally it's just nothing more than k6 run run your",
    "start": "511800",
    "end": "518560"
  },
  {
    "text": "script and you're done very easy very straightforward for cloud obviously you",
    "start": "518560",
    "end": "523880"
  },
  {
    "text": "do k6 cloud script.js and things will happen but again I won't be talking about the commercial product and then of",
    "start": "523880",
    "end": "530519"
  },
  {
    "text": "course for kubernetes it's writing this custom thing of course there is dependencies you need to install these",
    "start": "530519",
    "end": "536040"
  },
  {
    "text": "custom types that you can then use to define a level of parallel ISM and you can use CBE CTL apply run that yaml file",
    "start": "536040",
    "end": "543760"
  },
  {
    "text": "and you're good to go I am although this is very reasonable for distributed testing I'm going to focus on just",
    "start": "543760",
    "end": "550279"
  },
  {
    "text": "running it locally I will be doing distributed testing throughout bear with me so when you run the script obviously",
    "start": "550279",
    "end": "557200"
  },
  {
    "text": "you need to get some results those are the three things we need we need the script to define the scenarios we need",
    "start": "557200",
    "end": "562920"
  },
  {
    "text": "something to execute it and then we need results here's the results now I'm not",
    "start": "562920",
    "end": "568200"
  },
  {
    "text": "sure how readable this is from the back so I'll be doing you a favor I'll be zooming in every now and then with the",
    "start": "568200",
    "end": "574640"
  },
  {
    "text": "data that matters so this is all based on that initial script you saw nothing more than an HTTP call to that test k6",
    "start": "574640",
    "end": "580480"
  },
  {
    "text": "iio and we didn't provide any parameters and it just ran out of the box and what you see here is that we sent 17",
    "start": "580480",
    "end": "586480"
  },
  {
    "text": "kilobytes or at least 442 bytes and received 17 kilobytes and we made",
    "start": "586480",
    "end": "591800"
  },
  {
    "text": "exactly one HTTP call just one it's not really representative of load testing is",
    "start": "591800",
    "end": "597959"
  },
  {
    "text": "it like oh great we run it at 2.8 requests a second wonderful no that",
    "start": "597959",
    "end": "604279"
  },
  {
    "text": "doesn't prove a single thing that's why we need to ramp it up we need to scale up the tests and there's a couple of",
    "start": "604279",
    "end": "610640"
  },
  {
    "text": "ways of doing that one that I use a lot is just using runtime parameters or command line",
    "start": "610640",
    "end": "616920"
  },
  {
    "text": "options and arguments minus u means the number of virtual users and minus D is the duration so we're running for a",
    "start": "616920",
    "end": "623440"
  },
  {
    "text": "minute long running the script doing as many iterations as possible using 100 users each user when it runs the",
    "start": "623440",
    "end": "631839"
  },
  {
    "text": "execution flow it will run it again and again and again until we reach that minute so every virtual user can run",
    "start": "631839",
    "end": "637639"
  },
  {
    "text": "multiple iterations and you can see that in the output you can also make it a lot more portable and put that in the",
    "start": "637639",
    "end": "643440"
  },
  {
    "text": "options uh data structure that's that it's not really hard very straightforward but there is",
    "start": "643440",
    "end": "650800"
  },
  {
    "text": "something I need to explain I'm not really I'm not going to pretend that I'm a ma mathematician I mean I'm a tech",
    "start": "650800",
    "end": "657200"
  },
  {
    "text": "evangelist which is pretty much a glorified marketeer I'm not not an engineer of any kind I do have an engineering degree however I'm going to",
    "start": "657200",
    "end": "663920"
  },
  {
    "text": "use a fancy term here this is representative of the cap theorum this is just something I heard in another",
    "start": "663920",
    "end": "669959"
  },
  {
    "text": "conference that I'm just repeating cap theorum states that you could choose two out of three and the third one's a variable so you can make two of these",
    "start": "669959",
    "end": "677399"
  },
  {
    "text": "values constant and the third will always be the variable so in terms of the things we have we have the virtual",
    "start": "677399",
    "end": "682760"
  },
  {
    "text": "users we have the concept of time and we have the number of iterations that we want to achieve so let's say we focus on",
    "start": "682760",
    "end": "689360"
  },
  {
    "text": "iterations in time we want to do x amount of iterations we want to guarantee that in x amount of time while",
    "start": "689360",
    "end": "695240"
  },
  {
    "text": "what the variable is is is the amount of virtual users you need to get that done that's it if you want to guarantee the",
    "start": "695240",
    "end": "701160"
  },
  {
    "text": "number of iterations and guarantee the number of virtual users well the variable is time and of course virtual",
    "start": "701160",
    "end": "707000"
  },
  {
    "text": "users and time if you set that the number of iterations will be variable so you can only choose two the third one is",
    "start": "707000",
    "end": "713600"
  },
  {
    "text": "is variable keep that in mind and we'll we'll see about that when we talk about execution scenarios but let's again",
    "start": "713600",
    "end": "719920"
  },
  {
    "text": "we're dealing with the foundational elements let's talk about these HTTP requests that are part of the",
    "start": "719920",
    "end": "726760"
  },
  {
    "text": "stack here again are most basic of examples how does it work how can you",
    "start": "726760",
    "end": "733040"
  },
  {
    "text": "expand on this because this is not really that useful and it doesn't really mimic a real life",
    "start": "733040",
    "end": "738920"
  },
  {
    "text": "scenario does this mimic a real life scenario no it doesn't but I just wanted to show you that you can run Loops so",
    "start": "738920",
    "end": "744800"
  },
  {
    "text": "this doesn't qualify as multiple iterations this is still a single iteration however ever you run multiple",
    "start": "744800",
    "end": "750320"
  },
  {
    "text": "HTTP requests in that iteration and I wanted to show you the syntax of the back ticks and the variable interpolation it's quite nice you you",
    "start": "750320",
    "end": "757160"
  },
  {
    "text": "can do that kind of stuff you can also add a number of parameters parameters that you can inject as an argument in",
    "start": "757160",
    "end": "762760"
  },
  {
    "text": "your HTTP get function such as cookies and headers and a lot of other things",
    "start": "762760",
    "end": "767880"
  },
  {
    "text": "like initially the cookies but you can also set a cookie jar meaning that if",
    "start": "767880",
    "end": "773199"
  },
  {
    "text": "some system does a set cookie it will store that state and will present it again upon subsequent requests so can",
    "start": "773199",
    "end": "779360"
  },
  {
    "text": "have a stateful chain of of requests headers you've seen you can do authentication and redirects and taags",
    "start": "779360",
    "end": "784880"
  },
  {
    "text": "and timeouts and compressions and everything that the lovely protocol of HTTP",
    "start": "784880",
    "end": "790120"
  },
  {
    "text": "supports which means going Beyond gets you can do a post as well you can provide your regular key equals value M",
    "start": "790120",
    "end": "797000"
  },
  {
    "text": "percent uh syntax to post values to to this service which again actually works",
    "start": "797000",
    "end": "802880"
  },
  {
    "text": "if you want to you can test this this should be working if you want to go and take it or ramp it up and not you can go",
    "start": "802880",
    "end": "809839"
  },
  {
    "text": "for Json and use the Json do stringify function to actually turn a native",
    "start": "809839",
    "end": "816240"
  },
  {
    "text": "JavaScript data structure adjacent data structure into the stringified version and you can post it and you can put headers in it you can actually mimic the",
    "start": "816240",
    "end": "823360"
  },
  {
    "text": "use of of a post call for an API but again there's more there's get there's head but here's the complete API get",
    "start": "823360",
    "end": "830040"
  },
  {
    "text": "head post delete patch and put and options which represents your restful",
    "start": "830040",
    "end": "836199"
  },
  {
    "text": "stack of of tools you're going to use but there's also the more abstract HTTP do request which allows you to inject",
    "start": "836199",
    "end": "843800"
  },
  {
    "text": "the request method you want to use at hoc at runtime and you can also batch multiple ones together so there will be",
    "start": "843800",
    "end": "850040"
  },
  {
    "text": "multiple TCP connections doing stuff at the same time and we'll do that now here you go you can do a batch and the batch",
    "start": "850040",
    "end": "856480"
  },
  {
    "text": "can take an array of strings as you can see here that's my notation with get as",
    "start": "856480",
    "end": "861519"
  },
  {
    "text": "request method and then the URL we're going to call you can use objects of or an array of objects there's different",
    "start": "861519",
    "end": "867720"
  },
  {
    "text": "notations here and when we run it you'll have multiple responses an array of responses showing what the result was",
    "start": "867720",
    "end": "874800"
  },
  {
    "text": "and getting metrics from it for each one of them I do it in a manual way and I get response zero and we're doing a",
    "start": "874800",
    "end": "881480"
  },
  {
    "text": "check on it checking whether the response status code is 200 and by doing this I'm introducing you to a New",
    "start": "881480",
    "end": "887399"
  },
  {
    "text": "Concept the concept of checks pretty straightforward right you probably know",
    "start": "887399",
    "end": "892720"
  },
  {
    "text": "based on on on what you see here what a check is a check will have a name",
    "start": "892720",
    "end": "898519"
  },
  {
    "text": "response code was 200 there's this injection of a value which is rest",
    "start": "898519",
    "end": "904399"
  },
  {
    "text": "coming from the HTTP get containing the HTTP response and we're doing an assertion and the assertion Is Res do",
    "start": "904399",
    "end": "909800"
  },
  {
    "text": "status should be 200 for just check to succeed literal API for this check",
    "start": "909800",
    "end": "916160"
  },
  {
    "text": "function that performs checks goes as follows but what is interesting about it",
    "start": "916160",
    "end": "921519"
  },
  {
    "text": "that caught me off guard is when a check fails it doesn't stop the execution of k6 just keeps on running however it",
    "start": "921519",
    "end": "928079"
  },
  {
    "text": "marks the failure as a metric so even though the status code wasn't 200 you can keep track of that so again you can",
    "start": "928079",
    "end": "935680"
  },
  {
    "text": "use this and check if there's a 301 or 404 or 500 you can keep track of that",
    "start": "935680",
    "end": "942160"
  },
  {
    "text": "and you can actually stack them and say hey we want to keep track of the 200 status codes but we also want to ensure",
    "start": "942160",
    "end": "947880"
  },
  {
    "text": "that the protocol is http2 and not http1 and so on and so forth here's the result",
    "start": "947880",
    "end": "953759"
  },
  {
    "text": "for that initial check checking whether it was 200 again I'll do you a favor and zoom in",
    "start": "953759",
    "end": "959480"
  },
  {
    "text": "so first things first you see in green green check mark for every check you do the beer a green check mark or a red",
    "start": "959480",
    "end": "966120"
  },
  {
    "text": "cross with text in red what makes it a lot more fun is that now we have a checks metric that we keep track of it's",
    "start": "966120",
    "end": "973920"
  },
  {
    "text": "at 100% because all of them were successful one of one was successful and then you see the opposite happening so",
    "start": "973920",
    "end": "981600"
  },
  {
    "text": "in the end we did two requests and the expected or the wreck f",
    "start": "981600",
    "end": "989319"
  },
  {
    "text": "failed failed so the failure failed you know what I mean with that right everything was successful so the failures failed you can see that stuff",
    "start": "989319",
    "end": "997000"
  },
  {
    "text": "happening now of course when we explicitly perform or or trigger a",
    "start": "997000",
    "end": "1002360"
  },
  {
    "text": "failure then you will see this happening zooming in and I shouldn't really be",
    "start": "1002360",
    "end": "1008480"
  },
  {
    "text": "dragging this along for a couple of minutes right this is pretty straightforward pretty plain",
    "start": "1008480",
    "end": "1015040"
  },
  {
    "text": "and simple but what I do want to present to you is something that is similar to checks but that does stop the execution",
    "start": "1015040",
    "end": "1020839"
  },
  {
    "text": "and that is thresholds by defining thresholds you can uh State what your",
    "start": "1020839",
    "end": "1025918"
  },
  {
    "text": "expectations are and when those expectations are not met the execution is halted immediately so the threshold",
    "start": "1025919",
    "end": "1032640"
  },
  {
    "text": "here again in that options data structure where we're storing plenty of stuff we are saying that uh the h&p",
    "start": "1032640",
    "end": "1040199"
  },
  {
    "text": "request failure rate should be lower than 1% if the rates higher or equal to",
    "start": "1040199",
    "end": "1046640"
  },
  {
    "text": "1% then we're stopping the execution immed medely another thing we're doing is we're checking the duration of the",
    "start": "1046640",
    "end": "1051720"
  },
  {
    "text": "request and expect a 95th percentile of requests to be lower than 200 milliseconds and we perform the call we",
    "start": "1051720",
    "end": "1058320"
  },
  {
    "text": "do a test k6 iio we sleep for a second and that runs and runs and runs when we run it uh well I say it",
    "start": "1058320",
    "end": "1066240"
  },
  {
    "text": "runs and runs and runs I didn't provide any parameter so it only gets executed once but you can see the green check",
    "start": "1066240",
    "end": "1071360"
  },
  {
    "text": "marks here so the request duration was met all good and the failure rate was",
    "start": "1071360",
    "end": "1077919"
  },
  {
    "text": "also met no problem everything's fine we can change it and put the 95% out of the",
    "start": "1077919",
    "end": "1084200"
  },
  {
    "text": "request duration to 90 milliseconds and then things will change of course it will stop execution immediately at the",
    "start": "1084200",
    "end": "1090840"
  },
  {
    "text": "bottom of the screen you see the warning there and uh there's obviously a lot",
    "start": "1090840",
    "end": "1095880"
  },
  {
    "text": "more than fits on the screen so let's do a little bit of a hack and move it up a bit and then you can see why it failed",
    "start": "1095880",
    "end": "1101520"
  },
  {
    "text": "because the 95th percentile without 100 milliseconds so that's what you can do you have checks on the one hand and",
    "start": "1101520",
    "end": "1107960"
  },
  {
    "text": "thresholds on the other and you can combine them and get the stuff done and measure the stuff that you want to measure you can also have multiple",
    "start": "1107960",
    "end": "1115320"
  },
  {
    "text": "measuring points for a single duration if you want to so 90 percentile 95th you can even Define 99.9 percentile so all",
    "start": "1115320",
    "end": "1122840"
  },
  {
    "text": "these metrics uh Define the ranges within we measure things all right that was that so we had checks we had",
    "start": "1122840",
    "end": "1129240"
  },
  {
    "text": "thresholds let's go to the next concept which is tags we all know tags tags are",
    "start": "1129240",
    "end": "1134400"
  },
  {
    "text": "there to categorize things we can categorize checks thresholds metrics and even requests",
    "start": "1134400",
    "end": "1139799"
  },
  {
    "text": "individually so there are system tags that you can pull from immediately all",
    "start": "1139799",
    "end": "1145280"
  },
  {
    "text": "of these but not really interested in these tags there's a way of defining our own tags if we want to so the way I did",
    "start": "1145280",
    "end": "1152400"
  },
  {
    "text": "this and I think it requires a little bit more context into my original use case is I wanted to do distributed",
    "start": "1152400",
    "end": "1157640"
  },
  {
    "text": "testing so I had multiple k6 noes one in Singapore one in San Francisco and one in Dublin so they were geographically",
    "start": "1157640",
    "end": "1164840"
  },
  {
    "text": "distributed but I want to ensure that the script which is identical on each of these nodes is aware of its location so",
    "start": "1164840",
    "end": "1171679"
  },
  {
    "text": "what you could do is say Tags location EU versus Tags location US versus Tags",
    "start": "1171679",
    "end": "1176960"
  },
  {
    "text": "location SG for Singapore of course you can also do that on a more Global level not because here",
    "start": "1176960",
    "end": "1183039"
  },
  {
    "text": "it's on the individual HTTP get and maybe another HTP get has a different tag you can globalize that if you want",
    "start": "1183039",
    "end": "1189480"
  },
  {
    "text": "to by specifying it at the options level but the way I prefer doing it in order not to change the source code is",
    "start": "1189480",
    "end": "1196080"
  },
  {
    "text": "injected via command line argument so you can do minus minus tag and then specify whatever tag you want this",
    "start": "1196080",
    "end": "1203120"
  },
  {
    "text": "requires altering the script slightly so this is what the script now looks like we've introduced a new function called",
    "start": "1203120",
    "end": "1209440"
  },
  {
    "text": "the setup function and that setup function then assigns the default value to the location EU is standard and then",
    "start": "1209440",
    "end": "1215679"
  },
  {
    "text": "whatever comes in from the exec vu. tags tags and it's sort of a an array or or a",
    "start": "1215679",
    "end": "1222440"
  },
  {
    "text": "hash with location as the key and then whatever value that is gets assigned and what I'm doing here to make it a little",
    "start": "1222440",
    "end": "1228120"
  },
  {
    "text": "bit more fun is I'm using that location because whatever gets returned from the setup function comes in as a dependency sort",
    "start": "1228120",
    "end": "1234559"
  },
  {
    "text": "of a dependency injection pattern into your regular default function so I can alter the URL I'm calling based on a tag",
    "start": "1234559",
    "end": "1242240"
  },
  {
    "text": "that was externally injected gives you a level of flexibility in terms of the execution and then you can use those",
    "start": "1242240",
    "end": "1247880"
  },
  {
    "text": "tags if you wanted to Define separate thresholds maybe your us servers are",
    "start": "1247880",
    "end": "1252919"
  },
  {
    "text": "expected to be a bit faster than your EU servers and so on so forth checks yes",
    "start": "1252919",
    "end": "1259280"
  },
  {
    "text": "thresholds yes tags yes one more groups",
    "start": "1259280",
    "end": "1264400"
  },
  {
    "text": "groups are also there also a key concept for categorizing things what I'm doing here in this example is I'm creating a",
    "start": "1264400",
    "end": "1270960"
  },
  {
    "text": "group for similar HTTP requests I'm calling this group get and it only does",
    "start": "1270960",
    "end": "1276200"
  },
  {
    "text": "the get calls it groups them and it has the execution of the HTTP requests and it has the checks and all the bells and",
    "start": "1276200",
    "end": "1282880"
  },
  {
    "text": "whistles and then of course we have another group which is post containing all the post requests grouping them",
    "start": "1282880",
    "end": "1288720"
  },
  {
    "text": "separately as well the group name that you define will eventually become a tag",
    "start": "1288720",
    "end": "1294279"
  },
  {
    "text": "in your results so knowing tags from the previous examples it shouldn't come as a surprise to see this so we have the main",
    "start": "1294279",
    "end": "1302640"
  },
  {
    "text": "this is hierarchical the main group name which is a tag called get and then we have the checks that are part of that",
    "start": "1302640",
    "end": "1308080"
  },
  {
    "text": "tag that you can see there and then the check is everything is successful so",
    "start": "1308080",
    "end": "1313360"
  },
  {
    "text": "there were four checks and uh and again very very straightforward so those",
    "start": "1313360",
    "end": "1319000"
  },
  {
    "text": "that's the Baseline of verbiage we're going to use but now we need to talk about the text life cycle and the",
    "start": "1319000",
    "end": "1325039"
  },
  {
    "text": "execution flow and the different stages in which you can hook in because we can't talk about distributed testing if",
    "start": "1325039",
    "end": "1330720"
  },
  {
    "text": "we haven't got that covered so we're pretty far along but still we need to",
    "start": "1330720",
    "end": "1335840"
  },
  {
    "text": "crank it up a notch so this is the more generic way of of providing you the",
    "start": "1335840",
    "end": "1341799"
  },
  {
    "text": "execution flow the comments are are really the magic here so everything that is defined outside of the scope of these",
    "start": "1341799",
    "end": "1348320"
  },
  {
    "text": "fun functions is init code then you have the setup code the Vu code and the tear",
    "start": "1348320",
    "end": "1353919"
  },
  {
    "text": "down code init code is called once per Vu you've seen that before those HTTP Imports and all the other JavaScript",
    "start": "1353919",
    "end": "1360320"
  },
  {
    "text": "Imports are executed for every virtual user the setup function as you'd expect",
    "start": "1360320",
    "end": "1365760"
  },
  {
    "text": "is only executed once it was featured in one of the previous examples and then of course the default function is called",
    "start": "1365760",
    "end": "1372480"
  },
  {
    "text": "once per iterations you should be familiar with the concept of an iteration it's the amount of times a",
    "start": "1372480",
    "end": "1377840"
  },
  {
    "text": "virtual user us runs the scenario and then in the end you can do tear down code that only gets run",
    "start": "1377840",
    "end": "1384960"
  },
  {
    "text": "once okay fair enough but how can you use it why should you use it well here's",
    "start": "1384960",
    "end": "1391000"
  },
  {
    "text": "an example I try to be a bit creative with that so at the at the init code level which is called once per Vu we're",
    "start": "1391000",
    "end": "1397919"
  },
  {
    "text": "importing the HTTP object that we need then in the setup function we will fetch",
    "start": "1397919",
    "end": "1405039"
  },
  {
    "text": "a dependency just once we're calling http pbin test k6 iio Json which returns",
    "start": "1405039",
    "end": "1412440"
  },
  {
    "text": "some sort of a random Json data structure and we're parsing it we're doing res. Json which turns it into",
    "start": "1412440",
    "end": "1418600"
  },
  {
    "text": "native JavaScript Json object there's this slideshow property and it has a collection of slides we take that we",
    "start": "1418600",
    "end": "1425279"
  },
  {
    "text": "return that as a dependency and as you've seen before in your default function this data argument comes in",
    "start": "1425279",
    "end": "1431279"
  },
  {
    "text": "dependency injection pattern containing everything that was fetched in Json format from those slides from the",
    "start": "1431279",
    "end": "1437840"
  },
  {
    "text": "external resource then we iterate over it in the Vu code so that gets run once",
    "start": "1437840",
    "end": "1442919"
  },
  {
    "text": "per iteration and calls some sort of a URL slash the slide title and that gets",
    "start": "1442919",
    "end": "1450720"
  },
  {
    "text": "run and in the end of course we need to tear down everything we've done but since HTTP is stateless there's not a",
    "start": "1450720",
    "end": "1456520"
  },
  {
    "text": "lot to do or not a lot to close so the creative way I went along is hey maybe we should do a console log and and and",
    "start": "1456520",
    "end": "1463200"
  },
  {
    "text": "say hi and specify what has happened so that is the execution flow that is how",
    "start": "1463200",
    "end": "1468760"
  },
  {
    "text": "you understand what happens where and where you position things the next step is to access",
    "start": "1468760",
    "end": "1475360"
  },
  {
    "text": "metrics you've seen the end of test metrics but you can actually access metric values from R your code so what",
    "start": "1475360",
    "end": "1482080"
  },
  {
    "text": "you could do in that execution is when the rest gets returned after the HTTP call you can actually get Rex dot",
    "start": "1482080",
    "end": "1488720"
  },
  {
    "text": "timings and have a collection of timings so here we're taking the total duration and you can do whatever you want with it",
    "start": "1488720",
    "end": "1494200"
  },
  {
    "text": "I decided to console log it so when we run the script you can see it as it happens and you don't have to wait until",
    "start": "1494200",
    "end": "1500039"
  },
  {
    "text": "the end of test results get presented this happens for every single call this is not a",
    "start": "1500039",
    "end": "1505360"
  },
  {
    "text": "summary this res. timings do duration is only one of many metrics that are available here in terms of timings you",
    "start": "1505360",
    "end": "1512120"
  },
  {
    "text": "have all those metrics readily available for you so if one of these matters you can use them and do whatever you",
    "start": "1512120",
    "end": "1519039"
  },
  {
    "text": "want those are standard metrics timing metrics why not create our own maybe",
    "start": "1519039",
    "end": "1524399"
  },
  {
    "text": "there's things we want to measure that out of the box k6 doesn't do for us",
    "start": "1524399",
    "end": "1529640"
  },
  {
    "text": "here's again an example so the concept of this example and I'm well aware if you put text on a slide people will read",
    "start": "1529640",
    "end": "1536720"
  },
  {
    "text": "the text and stop listening still I will try so my idea was to do an HTTP call",
    "start": "1536720",
    "end": "1542880"
  },
  {
    "text": "and categorize the HTTP status code ranges the 200s the 300s the 400s and the 500s k6 doesn't do that out of the",
    "start": "1542880",
    "end": "1550480"
  },
  {
    "text": "box so what we did was create new counters and these counters have relevant names right rest 200 rest 300",
    "start": "1550480",
    "end": "1557240"
  },
  {
    "text": "400 and 500 because I can't really trust that the system will have variations in the",
    "start": "1557240",
    "end": "1564320"
  },
  {
    "text": "status code how how on Earth are we going to test for failure actually",
    "start": "1564320",
    "end": "1569840"
  },
  {
    "text": "synthesize that so the constant statuses collection is just status codes that I",
    "start": "1569840",
    "end": "1575440"
  },
  {
    "text": "will randomly render and as you can see I imported an external Library uh and I",
    "start": "1575440",
    "end": "1581279"
  },
  {
    "text": "took the random item function and that will while we iterate 20 times create a random status code and then we'll",
    "start": "1581279",
    "end": "1586559"
  },
  {
    "text": "measure so if so when we perform this to the random status code this end point",
    "start": "1586559",
    "end": "1591600"
  },
  {
    "text": "gracefully provided by the people at k6 will return that status code and if it's",
    "start": "1591600",
    "end": "1597399"
  },
  {
    "text": "between 200 and 300 we add one value to the rest 200 counter it only increases",
    "start": "1597399",
    "end": "1604679"
  },
  {
    "text": "and at the end we will see the result so the result here again this is not representative of anything because it's",
    "start": "1604679",
    "end": "1611720"
  },
  {
    "text": "synthetic but I just wanted to show you that it's entirely possible there were 4 200s 8 300s 24 400s uh or 8 400s and two",
    "start": "1611720",
    "end": "1621880"
  },
  {
    "text": "500s so it it is a way of defining something I I had to be creative in the process but what I wanted to show you",
    "start": "1621880",
    "end": "1627840"
  },
  {
    "text": "that it's not restricted at counters you can do much more with it I showed you a counter and what the main property of a",
    "start": "1627840",
    "end": "1633880"
  },
  {
    "text": "counter is just it increases and increases over time but you also have gauges that you can Define and that is",
    "start": "1633880",
    "end": "1640480"
  },
  {
    "text": "the last value so a gauge can go up and a gauge could go down in its value what k6 does for you is it tracks the minimum",
    "start": "1640480",
    "end": "1647480"
  },
  {
    "text": "and the maximum value value and the last one and that will go up will go down you can also Define a rate which just looks",
    "start": "1647480",
    "end": "1654399"
  },
  {
    "text": "at the non-zero values and adds those that's that's your rate and in the end you also have a trend you've seen plenty",
    "start": "1654399",
    "end": "1659919"
  },
  {
    "text": "of Trends they contain min max average and the percentiles you can play around with that and Define whatever you need",
    "start": "1659919",
    "end": "1665919"
  },
  {
    "text": "for your testing scenarios we've talked a lot about end of test metrics and we'll we'll do for",
    "start": "1665919",
    "end": "1672519"
  },
  {
    "text": "for a couple of minutes before we dive into something different so you know this one this is pretty straightforward",
    "start": "1672519",
    "end": "1678720"
  },
  {
    "text": "it contains the counters gauges rates and Trends but maybe not everything is is",
    "start": "1678720",
    "end": "1685480"
  },
  {
    "text": "that relevant for you maybe you want to reduce the scope of it and you can do so again with this notorious options data",
    "start": "1685480",
    "end": "1692399"
  },
  {
    "text": "structure it's it's something that does a little bit of everything you can specify a summary Trend stats property",
    "start": "1692399",
    "end": "1698840"
  },
  {
    "text": "and just mention the stuff you want so we're reducing the trends we're getting the percentiles out of it and then you",
    "start": "1698840",
    "end": "1704799"
  },
  {
    "text": "can see that the output is a lot more narrow so you can tailor it to your needs and do what you need to",
    "start": "1704799",
    "end": "1711039"
  },
  {
    "text": "do again uh the same thing but not portable just flexible at runtime so",
    "start": "1711039",
    "end": "1716200"
  },
  {
    "text": "when you run k6 run uh you can State whatever you need in this case it's",
    "start": "1716200",
    "end": "1721880"
  },
  {
    "text": "average minim Max you can also choose here's where it gets interesting to not return any",
    "start": "1721880",
    "end": "1728799"
  },
  {
    "text": "summary like we're doing these tests seemingly blind with an emphasis on",
    "start": "1728799",
    "end": "1734640"
  },
  {
    "text": "seemingly of course there's more to the story but there's a lot of situ ation where you don't want that end of test",
    "start": "1734640",
    "end": "1740880"
  },
  {
    "text": "summary what you are able to do also before we dive into the key here which will get us to distributed testing is",
    "start": "1740880",
    "end": "1748360"
  },
  {
    "text": "you can store things in different formats in Json format in CSV format you can process it on standard out you can",
    "start": "1748360",
    "end": "1754559"
  },
  {
    "text": "write it to a file but again that's just happening at the end of the test maybe",
    "start": "1754559",
    "end": "1760120"
  },
  {
    "text": "we don't want anything at the end of the test and maybe we want things to happen in real time and that's where external",
    "start": "1760120",
    "end": "1765760"
  },
  {
    "text": "Integrations and components come into play the people at Graff Labs who developed k6 have a bunch of supported",
    "start": "1765760",
    "end": "1772399"
  },
  {
    "text": "Integrations where you can send your metrics on the go this is not a place",
    "start": "1772399",
    "end": "1777640"
  },
  {
    "text": "where you store the end of test metrics this is where everything gets stored every now and then and as you can see",
    "start": "1777640",
    "end": "1782880"
  },
  {
    "text": "the list is quite extensive but I'm going to be honest I'm going to use this I'm going to use promethus who uses",
    "start": "1782880",
    "end": "1789440"
  },
  {
    "text": "Prometheus yeah it's not bad uh well I like Peres because it's quite simple now",
    "start": "1789440",
    "end": "1795039"
  },
  {
    "text": "in order to support Peres we need to recompile k6 because although k6 has",
    "start": "1795039",
    "end": "1800640"
  },
  {
    "text": "native prus support it's not the right kind it's not the kind I like so the approach of of the people of k6 is",
    "start": "1800640",
    "end": "1807480"
  },
  {
    "text": "Prometheus Integrations means we will do HTTP post calls to the Prometheus server",
    "start": "1807480",
    "end": "1813240"
  },
  {
    "text": "every time we log something the problem with that is every time you something happens you need to",
    "start": "1813240",
    "end": "1819640"
  },
  {
    "text": "log it if a million things happen a million things get logged so that means as you're growing the scale of your",
    "start": "1819640",
    "end": "1824960"
  },
  {
    "text": "tests your promeo server needs to catch up and that's turned out to be impossible uh or or was unreasonable",
    "start": "1824960",
    "end": "1831519"
  },
  {
    "text": "from our end luckily the community provides something extra there's this guy called or lady I'm not sure if it's",
    "start": "1831519",
    "end": "1838720"
  },
  {
    "text": "a man or a woman skeba and who provides an xk6 Prometheus contribution and it",
    "start": "1838720",
    "end": "1844640"
  },
  {
    "text": "does the exact opposite what it does is it provides a pull strategy where Prometheus actually pulls from your k6",
    "start": "1844640",
    "end": "1850600"
  },
  {
    "text": "nodes which is a lot more efficient of course in order to have that component readily available you need to use xk6",
    "start": "1850600",
    "end": "1858000"
  },
  {
    "text": "xk6 is a go component that builds k6 binaries so just do go install and use",
    "start": "1858000",
    "end": "1864720"
  },
  {
    "text": "that Top Line and you will have uh xk6 and with the xk6 build command you can",
    "start": "1864720",
    "end": "1870360"
  },
  {
    "text": "provide an external dependency and it will compile it in and in the end you will have that custom k6 binary you can",
    "start": "1870360",
    "end": "1876080"
  },
  {
    "text": "do run as you're used to provide minus o to say where the output has to go and",
    "start": "1876080",
    "end": "1881320"
  },
  {
    "text": "use the keyword Prometheus and specify name space in this case k6 and the port",
    "start": "1881320",
    "end": "1887080"
  },
  {
    "text": "to expose all of this two so as long as k6 runs with these parameters it'll be",
    "start": "1887080",
    "end": "1892320"
  },
  {
    "text": "readily available over Port 9090 and exposed perus style metrics that will",
    "start": "1892320",
    "end": "1897600"
  },
  {
    "text": "can be just like any other node exporter can be scraped by Prometheus so when you would do the curl Local Host 9090 this",
    "start": "1897600",
    "end": "1905919"
  },
  {
    "text": "is the stuff that comes out all of these metrics are available and can be pulled in now we need to visualize this because",
    "start": "1905919",
    "end": "1912760"
  },
  {
    "text": "this is not user friendly what kind of tool we would use any ideas",
    "start": "1912760",
    "end": "1919399"
  },
  {
    "text": "you can speak out loud I'm hearing whispers here probably with the right answer grafana yes obviously grafana",
    "start": "1919399",
    "end": "1925960"
  },
  {
    "text": "grafana is a tool we know and like not sure about the like we know it right we know it I like it to some extent it did",
    "start": "1925960",
    "end": "1933279"
  },
  {
    "text": "the job to be honest for my little World Tour so what we do then is we run multiple k6s and that's where we venture",
    "start": "1933279",
    "end": "1940399"
  },
  {
    "text": "into the world of distributed low testing maybe in different geographical regions you put your k6 servers you give",
    "start": "1940399",
    "end": "1946440"
  },
  {
    "text": "the Prometheus information specify Port 9090 and then you can scrape them all",
    "start": "1946440",
    "end": "1951559"
  },
  {
    "text": "from within your preia server configuration and provide labels that you can filter on later later on pretty",
    "start": "1951559",
    "end": "1957760"
  },
  {
    "text": "interesting and those labels then give you different variations of the same metric per value of that label and in",
    "start": "1957760",
    "end": "1964559"
  },
  {
    "text": "our case that's Ireland and that's the US and eventually also Singapore so the end result of all of",
    "start": "1964559",
    "end": "1970760"
  },
  {
    "text": "that is while your tests are running in real time not at the end of the test you can create these dashboards and that was",
    "start": "1970760",
    "end": "1977080"
  },
  {
    "text": "really what I wanted to to do for my tour uh these aren't super impressive I mean I went all the way up to 75 gigs a",
    "start": "1977080",
    "end": "1983240"
  },
  {
    "text": "second on Plain uh Amazon Hardware it's nothing special of course those were",
    "start": "1983240",
    "end": "1988679"
  },
  {
    "text": "expensive and just a little inside I think it cost us a thousand EUR a day to run those tests so we we kept them to a",
    "start": "1988679",
    "end": "1995200"
  },
  {
    "text": "minimum what you're seeing here is the result of that you could see that we're running 300 vus in total spread across",
    "start": "1995200",
    "end": "2001880"
  },
  {
    "text": "three regions each with 100 and that the time to First Bite is less than a millisecond in Ireland in the US and",
    "start": "2001880",
    "end": "2008799"
  },
  {
    "text": "Singapore is misbehaving of course this is a I wouldn't call it",
    "start": "2008799",
    "end": "2015360"
  },
  {
    "text": "synthetic but the trick to this to getting these very very low time to First bites is that the k6 servers were",
    "start": "2015360",
    "end": "2022120"
  },
  {
    "text": "in the same data center as the varnish servers that were testing and we Ed the internal Network so it didn't go out to",
    "start": "2022120",
    "end": "2028440"
  },
  {
    "text": "the internet that's why we we got those great results but what we wanted to show is that we can perform submillisecond",
    "start": "2028440",
    "end": "2033840"
  },
  {
    "text": "latency of course it depends on your external networking factors but that wasn't facted in and you can also see",
    "start": "2033840",
    "end": "2039200"
  },
  {
    "text": "that we're processing 1.89 gigs a second in Ireland and so on and so forth so it's a pretty damn good overview that",
    "start": "2039200",
    "end": "2045639"
  },
  {
    "text": "updates itself every 5 seconds so if you have a test that runs for an hour you can keep the dashboard and regardless of",
    "start": "2045639",
    "end": "2052638"
  },
  {
    "text": "the number of servers you have you can get a bird's eye view on the performance and that is really what I wanted that",
    "start": "2052639",
    "end": "2058280"
  },
  {
    "text": "was the end result for me there was some grafana magic as well it's not solely",
    "start": "2058280",
    "end": "2063878"
  },
  {
    "text": "about pulling in the information from Peres sometimes you needed to do some functions like a rate and a sum and some",
    "start": "2063879",
    "end": "2070280"
  },
  {
    "text": "intervals and some variables this is what I use to create these dashboards so",
    "start": "2070280",
    "end": "2075599"
  },
  {
    "text": "now that we have all the things in place and we laid out the groundwork you're familiar with that we can really go and",
    "start": "2075599",
    "end": "2081240"
  },
  {
    "text": "take it to the next level and talk about those distributed tests here we go this is what I would",
    "start": "2081240",
    "end": "2088079"
  },
  {
    "text": "advise you to do now the first line that is in red minus 6565 that's optional",
    "start": "2088079",
    "end": "2093398"
  },
  {
    "text": "because when you do a k6 run there will be an AP readily available you can do a curl on Local",
    "start": "2093399",
    "end": "2099880"
  },
  {
    "text": "Host 6565 and you'll be able to talk to that k6 server but you can specify any port",
    "start": "2099880",
    "end": "2105839"
  },
  {
    "text": "you want you can put in on port 8080 or 80 as far as I'm concerned but what is equally important is to put it in state",
    "start": "2105839",
    "end": "2112680"
  },
  {
    "text": "paused because you don't want those tests to run immediately you want to Stage everything put everything in place",
    "start": "2112680",
    "end": "2118880"
  },
  {
    "text": "and then using a single end point maybe a single k6 binary trigger unleash the",
    "start": "2118880",
    "end": "2124359"
  },
  {
    "text": "horses so to speak from one central location maybe we're here in and we have servers in five different locations",
    "start": "2124359",
    "end": "2130079"
  },
  {
    "text": "across the world if they're in pul state are scrapable via pretus and have their",
    "start": "2130079",
    "end": "2135240"
  },
  {
    "text": "API readily available on 6565 that's good enough for me one important factor",
    "start": "2135240",
    "end": "2140760"
  },
  {
    "text": "here is if we want to control the scalability we need to define a scenario and this is me getting ahead of things",
    "start": "2140760",
    "end": "2146320"
  },
  {
    "text": "in the end we will talk about scenarios and how to configure them but here we need to set it to externally controlled",
    "start": "2146320",
    "end": "2153119"
  },
  {
    "text": "and externally controlled allows us to fiddle with the scalability parameters at home talk at runtime without stating",
    "start": "2153119",
    "end": "2159839"
  },
  {
    "text": "it on the command line uh of the server and without using anything that is defined here what we do toine is the",
    "start": "2159839",
    "end": "2166680"
  },
  {
    "text": "range so we set the virtual users we set it to two to start with and then via the",
    "start": "2166680",
    "end": "2172200"
  },
  {
    "text": "command line you can tweak it but you can't surpass the 5,000 level and the test cannot run longer than two hours",
    "start": "2172200",
    "end": "2178960"
  },
  {
    "text": "that's what we have and then you start hammering that endpoint and then it gets fun right",
    "start": "2178960",
    "end": "2184599"
  },
  {
    "text": "here's where you do the distributed stuff maybe you're sitting at home and you were triggering something in Ireland so you do Kix resume and then you do",
    "start": "2184599",
    "end": "2191760"
  },
  {
    "text": "minus a to specify which server you want to connect to I'm going to Ireland test.com on 6565 and all of a sudden you",
    "start": "2191760",
    "end": "2199040"
  },
  {
    "text": "get output that the past state is now false because it's running and it's running at zero for now there's zero",
    "start": "2199040",
    "end": "2205680"
  },
  {
    "text": "virtual users so we need to ramp that up a bit and do the same command but with scale k6 scale minus U set it to 100 and",
    "start": "2205680",
    "end": "2213560"
  },
  {
    "text": "in the end you're done and you do that on all the other servers as well you do that in the United States States you do",
    "start": "2213560",
    "end": "2219240"
  },
  {
    "text": "that in Singapore all from a single location and all of a sudden all these tests start running and you have your",
    "start": "2219240",
    "end": "2224520"
  },
  {
    "text": "single dashboard your grafana dashboard that you can look at and see what's going on that's what I like about this",
    "start": "2224520",
    "end": "2231079"
  },
  {
    "text": "and that's why I wouldn't call it falling in love with k6 but that's how I started appreciating k6 because of those",
    "start": "2231079",
    "end": "2237760"
  },
  {
    "text": "flexible things and it all works in a pretty easy way but remember rapper these are all",
    "start": "2237760",
    "end": "2244880"
  },
  {
    "text": "rappers around an API whatever the command line does and that k6 scale and",
    "start": "2244880",
    "end": "2250200"
  },
  {
    "text": "resume and pause does is nothing more than sending API calls and you can do",
    "start": "2250200",
    "end": "2255280"
  },
  {
    "text": "that yourself if you want to integrate that in your software in whatever you have you can actually call rand.",
    "start": "2255280",
    "end": "2260800"
  },
  {
    "text": "test.com on 6565 and do V1 status and you have all the Json output you need to know what's",
    "start": "2260800",
    "end": "2266920"
  },
  {
    "text": "going on it's the same output that the k6 binary parses and presents to you and",
    "start": "2266920",
    "end": "2272720"
  },
  {
    "text": "in the same way you can do an HTTP patch call to the same endpoint and change the parameters and",
    "start": "2272720",
    "end": "2278880"
  },
  {
    "text": "set the vus to 500 that's the equivalent of doing k6 scale minus U 500 very nice",
    "start": "2278880",
    "end": "2286400"
  },
  {
    "text": "and in the end when you run the command you'll get the Json output if you want to you can even get",
    "start": "2286400",
    "end": "2292119"
  },
  {
    "text": "individual metrics VI the HPI call again Ireland test.com 6565 V1 and then",
    "start": "2292119",
    "end": "2298319"
  },
  {
    "text": "metrics and the name of the metric which is HTTP request duration and you can get all the information you need very good",
    "start": "2298319",
    "end": "2306680"
  },
  {
    "text": "all right let's let's go to the next one which is scenarios so now I probably",
    "start": "2306680",
    "end": "2312079"
  },
  {
    "text": "convinced you I hope at the minimum that using this tool which is open source you can perform a level of distributed",
    "start": "2312079",
    "end": "2319040"
  },
  {
    "text": "testing you can orchestrate using whatever tool you want that there's k6 nodes in different areas and you can",
    "start": "2319040",
    "end": "2324599"
  },
  {
    "text": "control them centrally but now we need to talk about scenarios and one of those scenarios the externally controlled one",
    "start": "2324599",
    "end": "2330359"
  },
  {
    "text": "will be featured as well so the scenario parameters vary a bit so you could Define the vus the number of iterations",
    "start": "2330359",
    "end": "2336480"
  },
  {
    "text": "the duration as you've seen scene but also when a specific scenario needs to be executed it's not like everything",
    "start": "2336480",
    "end": "2343280"
  },
  {
    "text": "happens at the same time you can plan the execution of this and choose the executor you want and this brings us",
    "start": "2343280",
    "end": "2348920"
  },
  {
    "text": "back to our little cap torum where two out of three are chosen and the one is the variable so let's set that plan in",
    "start": "2348920",
    "end": "2355720"
  },
  {
    "text": "motion and Define some scenarios here we're having two",
    "start": "2355720",
    "end": "2360800"
  },
  {
    "text": "scenarios a shared iterations and a pervu iterations where we Define the initial",
    "start": "2360800",
    "end": "2366960"
  },
  {
    "text": "virtual users the number of iterations and the start time so for the first 10 seconds the shared iterations takes",
    "start": "2366960",
    "end": "2374040"
  },
  {
    "text": "place and then the pervu iterations and I'll talk about them I'll explain them what they are and I'll show you some",
    "start": "2374040",
    "end": "2380079"
  },
  {
    "text": "graphs of the execution and how they perform what you should know is that",
    "start": "2380079",
    "end": "2385160"
  },
  {
    "text": "there's a bunch of them you've seen externally controlled you've seen shared Vu and perv uh per view iterations you",
    "start": "2385160",
    "end": "2392640"
  },
  {
    "text": "have constant views ramping up arrival rates as well all that kind of stuff so",
    "start": "2392640",
    "end": "2398319"
  },
  {
    "text": "let's do that let's let's talk about it let's take one this is the shared iterations so you have a bucket of 200",
    "start": "2398319",
    "end": "2404040"
  },
  {
    "text": "iterations that you want to have that's what we fix we also set the virtual",
    "start": "2404040",
    "end": "2409680"
  },
  {
    "text": "users if you remember our little triangle there time is variable but we cap it we set a time out to 30 seconds",
    "start": "2409680",
    "end": "2416680"
  },
  {
    "text": "so every vu all 10 of them take work from that iterations stack until it's",
    "start": "2416680",
    "end": "2422079"
  },
  {
    "text": "empty and this is the execution now I want to make sure because I had bad",
    "start": "2422079",
    "end": "2427680"
  },
  {
    "text": "experiences with that can you see the gray on the slide is that visible yeah I had scenario like situations where I",
    "start": "2427680",
    "end": "2433880"
  },
  {
    "text": "presented where this was white you couldn't see it uh as a matter of fact on on my",
    "start": "2433880",
    "end": "2440280"
  },
  {
    "text": "monitor here I can't see it so I have to look in that direction so what happens is it only takes 8 seconds to execute",
    "start": "2440280",
    "end": "2448280"
  },
  {
    "text": "and the gray actually shows you the virtual users that ramp up all the way",
    "start": "2448280",
    "end": "2453319"
  },
  {
    "text": "to 10 because that's what we wanted right we wanted to end up at 10 and then stay there you can see that the iteration rate",
    "start": "2453319",
    "end": "2460680"
  },
  {
    "text": "varies a bit but in the end we want all iterations to be run so we're trying to or we're reaching give or take 20",
    "start": "2460680",
    "end": "2468000"
  },
  {
    "text": "iterations a second and we're doing this in 8 seconds that that's what happens if",
    "start": "2468000",
    "end": "2474079"
  },
  {
    "text": "we're using perview iterations which seem very similar it's the same kind of work right 200 iterations to be done but",
    "start": "2474079",
    "end": "2480480"
  },
  {
    "text": "in this case we're dedicating 20 iterations to each Vu and again we give it 30 seconds so you might ask yourself",
    "start": "2480480",
    "end": "2488920"
  },
  {
    "text": "the question how does it perform and it performs a bit worse instead of 8",
    "start": "2488920",
    "end": "2494960"
  },
  {
    "text": "seconds it took N9 seconds and the lower efficiency is due to idle V because we're dedicating we're giving each one",
    "start": "2494960",
    "end": "2501079"
  },
  {
    "text": "of them an equal amount of work if one of those Fus has the luck of executing Foster is just sitting there doing",
    "start": "2501079",
    "end": "2506839"
  },
  {
    "text": "nothing whereas it could be taking another stack or another item from the stack so keep that in mind that they",
    "start": "2506839",
    "end": "2514000"
  },
  {
    "text": "vary in terms of performance we also have constant V V again our little triangle there we set the vus to 10 the",
    "start": "2514000",
    "end": "2521520"
  },
  {
    "text": "duration to 30 seconds so there's an exact execution time of 30 seconds so the variable obviously I could play a",
    "start": "2521520",
    "end": "2527319"
  },
  {
    "text": "game where I ask you and what is the variable but you already know that you know its iterations the iterations will",
    "start": "2527319",
    "end": "2533280"
  },
  {
    "text": "vary and in this case you can see the ramp up to 10 vus you can see the 30",
    "start": "2533280",
    "end": "2539359"
  },
  {
    "text": "second duration and in total there's 600 iterations that's the variable that's what we can read from this graph",
    "start": "2539359",
    "end": "2547599"
  },
  {
    "text": "ramping up means we're because everything has to ramp up right you can't go from zero to 100 immediately it",
    "start": "2547599",
    "end": "2554559"
  },
  {
    "text": "needs a little bit of time to spawn all those virtual users but in this way you can actually schedule how you do that",
    "start": "2554559",
    "end": "2561280"
  },
  {
    "text": "you can ahead of time say for the first 20 seconds we're going to go from zero to 10 we will make sure that takes 10",
    "start": "2561280",
    "end": "2568079"
  },
  {
    "text": "seconds once you're at that rate of 10 virtual users you can go down to zero",
    "start": "2568079",
    "end": "2573200"
  },
  {
    "text": "again but we'll do that at a more accelerated rate and in 10 seconds you have to be all the way down at zero and",
    "start": "2573200",
    "end": "2578359"
  },
  {
    "text": "there's no Grace will ramp down so when you look at it you can see stage one ramping up quite at a decent pace and",
    "start": "2578359",
    "end": "2586400"
  },
  {
    "text": "when we reach the rate we go all the way down and that iteration rate per second",
    "start": "2586400",
    "end": "2591480"
  },
  {
    "text": "uh actually results from that then we need to talk about",
    "start": "2591480",
    "end": "2596640"
  },
  {
    "text": "something else we need to talk about the arrival rate and the arrival rate means that you're trying to focus more on",
    "start": "2596640",
    "end": "2603400"
  },
  {
    "text": "iterations per second rather than the individual ones so at this means is that",
    "start": "2603400",
    "end": "2608559"
  },
  {
    "text": "we're running this for 30 seconds again but at a rate of 30 an increase of 30",
    "start": "2608559",
    "end": "2615880"
  },
  {
    "text": "iterations per second that's what we want that's what we want to reach and the virtual users well those will vary",
    "start": "2615880",
    "end": "2621960"
  },
  {
    "text": "we'll start at two and we'll end at 50 so what you see here is that the vus are",
    "start": "2621960",
    "end": "2628160"
  },
  {
    "text": "are dynamic they will scale along as as required but the iteration rate is fixed you can see it's a straight line nine so",
    "start": "2628160",
    "end": "2636079"
  },
  {
    "text": "there's a total of n 100 iterations at a rate of 30 seconds and if you go back to the code you can see that 30 uh seconds",
    "start": "2636079",
    "end": "2644280"
  },
  {
    "text": "will be the execution at 30 per second so should make sense right that should",
    "start": "2644280",
    "end": "2650839"
  },
  {
    "text": "be it so if you want to see how many iterations per second your system can handle the arrival rate is what you",
    "start": "2650839",
    "end": "2656559"
  },
  {
    "text": "should be looking at and then of course and that's the last one is externally",
    "start": "2656559",
    "end": "2662400"
  },
  {
    "text": "controlled that should be no secret to you it's pretty much it",
    "start": "2662400",
    "end": "2669039"
  },
  {
    "text": "I told you it would be less than an hour we could do 15 more minutes of Q&A but I don't think anyone's really interested",
    "start": "2669079",
    "end": "2674960"
  },
  {
    "text": "in that I guess I usually try to dodge Q&A and the reason why I try to dodge Q&A is because a people want to get out",
    "start": "2674960",
    "end": "2681160"
  },
  {
    "text": "of here and do other stuff and B the questions that people ask are like mostly entirely focused around their",
    "start": "2681160",
    "end": "2686800"
  },
  {
    "text": "specific use case but still I can't run away I still have 15 minutes if if you",
    "start": "2686800",
    "end": "2691920"
  },
  {
    "text": "want me to take advantage of that look the high slids are coming on I won't be offended if you run off dash off and do",
    "start": "2691920",
    "end": "2698319"
  },
  {
    "text": "whatever you need to do but if you have questions I think there is a a microphone light right here uh and if",
    "start": "2698319",
    "end": "2704160"
  },
  {
    "text": "you want to ask questions in a more private way uh I I'll be around for a couple of minutes this is last session",
    "start": "2704160",
    "end": "2709839"
  },
  {
    "text": "of the day day one of NDC London you made it anyone coming back",
    "start": "2709839",
    "end": "2715880"
  },
  {
    "text": "tomorrow great enjoy it thank you for spending your time with me I know you have options there's six rooms you chose",
    "start": "2715880",
    "end": "2721880"
  },
  {
    "text": "to be with me I'm very grateful for that thank [Applause]",
    "start": "2721880",
    "end": "2730309"
  }
]