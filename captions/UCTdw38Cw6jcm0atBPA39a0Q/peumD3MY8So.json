[
  {
    "text": "so my name is Neil Madden and this is uh talk about practical cryptography uh with Google's Tink",
    "start": "4319",
    "end": "11480"
  },
  {
    "text": "Library so there's lots of tutorials and things online where you can find out the theory of cryptography there's",
    "start": "11480",
    "end": "17680"
  },
  {
    "text": "relatively little about how to actually translate that into working code and avoiding some of the security",
    "start": "17680",
    "end": "23880"
  },
  {
    "text": "vulnerabilities that can arise and so this talk is partly about",
    "start": "23880",
    "end": "30080"
  },
  {
    "text": "modern cryptography and what you should be implementing and how to implement it securely but it's also a little bit of a",
    "start": "30080",
    "end": "36600"
  },
  {
    "text": "look at Tink and some of the lessons we can learn from Tink uh about secure Library design and how you can design",
    "start": "36600",
    "end": "44399"
  },
  {
    "text": "libraries and Frameworks for developers to use that kind of avoid some of the sharp edges around security tools and",
    "start": "44399",
    "end": "50320"
  },
  {
    "text": "avoid some of the um uh security issues that might arise Before I Go On by the",
    "start": "50320",
    "end": "56359"
  },
  {
    "text": "way the organizers asked me to say when you leave at the end of here there's buckets with red green and um yellow",
    "start": "56359",
    "end": "64080"
  },
  {
    "text": "things depending on whether you like the talk or not so the green ones if you like the talk if you didn't like the",
    "start": "64080",
    "end": "69640"
  },
  {
    "text": "talk that's also the green ones apparently",
    "start": "69640",
    "end": "73479"
  },
  {
    "text": "so so moving on so a little bit about me and why you might want to listen to me for the next hour or so so I'm the",
    "start": "75200",
    "end": "81159"
  },
  {
    "text": "author of API security action uh I've done a bit of security research found a critical vulnerability",
    "start": "81159",
    "end": "87720"
  },
  {
    "text": "in Javas signatures few years ago I also a longtime contributor to the O and Jose",
    "start": "87720",
    "end": "94880"
  },
  {
    "text": "working groups at the ITF and do a bunch of things that is not a fishing awareness test that is my blog if you",
    "start": "94880",
    "end": "101720"
  },
  {
    "text": "want to look that up so Tink Tink then is a highlevel",
    "start": "101720",
    "end": "108759"
  },
  {
    "text": "cryptographic library that's developed by Google and as I said it's designed to avoid a lot of the kind of security",
    "start": "108759",
    "end": "115880"
  },
  {
    "text": "vulnerabilities that can crop up when you're implementing cryptography in your applications it supports a bunch of",
    "start": "115880",
    "end": "122520"
  },
  {
    "text": "different languages so primarily kind of server side languages but they also support uh mobile development through",
    "start": "122520",
    "end": "129399"
  },
  {
    "text": "Objective C and the Java runs on Android as well so they support the mobile apps and we'll see a little bit",
    "start": "129399",
    "end": "135519"
  },
  {
    "text": "later uh about some of the features around that it's been developed by some very",
    "start": "135519",
    "end": "142040"
  },
  {
    "text": "well-known cryptographers and cryptographic Engineers who were at Google at the time so Yong Thai uh is",
    "start": "142040",
    "end": "149160"
  },
  {
    "text": "responsible for various attacks on SSL so the crime beast and poodle attacks",
    "start": "149160",
    "end": "154200"
  },
  {
    "text": "which very famous attacks on SSL uh he was co-responsible for those and Daniel",
    "start": "154200",
    "end": "159560"
  },
  {
    "text": "blener um gives his name to some very famous attacks against RSA encryption so",
    "start": "159560",
    "end": "165280"
  },
  {
    "text": "this is kind of appeal to Authority that the people who built Tink really knew their stuff when it came to",
    "start": "165280",
    "end": "171519"
  },
  {
    "text": "cryptography um and so it's been designed to to be easy to use securely and more importantly to be hard to use",
    "start": "171519",
    "end": "178000"
  },
  {
    "text": "insecurely which is kind of one of the main major themes in this all right so let's get on and look",
    "start": "178000",
    "end": "183599"
  },
  {
    "text": "at some example code so this is a security conference so hopefully most of",
    "start": "183599",
    "end": "189879"
  },
  {
    "text": "you will have a basic idea about about um cryptography uh but for those that don't",
    "start": "189879",
    "end": "195239"
  },
  {
    "text": "this is just a brief recap so the kind of gold standard of encryption that you should be using in 2025 is what's called",
    "start": "195239",
    "end": "202159"
  },
  {
    "text": "authenticated encryption so in this in this case we're talking about um symmetric encryptions",
    "start": "202159",
    "end": "208280"
  },
  {
    "text": "so Alice and Bob both have a shared secret key that they use and they both can both encrypt and",
    "start": "208280",
    "end": "214480"
  },
  {
    "text": "decrypt um we'll talk later about public key encryption and things like that as well and so old style in the early you",
    "start": "214480",
    "end": "223159"
  },
  {
    "text": "know the '90s and early 2000s cryptographic modes uh just basically concentrated on confidentiality so it",
    "start": "223159",
    "end": "229599"
  },
  {
    "text": "was about just encrypting some data to keep it secret uh and we've since learned that you need a lot more than",
    "start": "229599",
    "end": "235480"
  },
  {
    "text": "that really to to have a secure encryption so um",
    "start": "235480",
    "end": "241120"
  },
  {
    "text": "if you just focus so some of those old confidentiality only modes you can you can't read the data if you don't have",
    "start": "241120",
    "end": "247360"
  },
  {
    "text": "the key but you might be able to Tamper it tamper with it in ways that cause predictable effects on what it decrypts",
    "start": "247360",
    "end": "253280"
  },
  {
    "text": "to so you can tamper with the cipher text as we call it and then that will cause corresponding changes in the pl",
    "start": "253280",
    "end": "259359"
  },
  {
    "text": "text so the classic example is Alice is sending a message to a bank saying something like pay Bob",
    "start": "259359",
    "end": "265240"
  },
  {
    "text": "$1,000 and Eve can intercept it and flip some bits in the cipher text she she doesn't know what it says but she can",
    "start": "265240",
    "end": "271360"
  },
  {
    "text": "maybe guess on the format and now when the bank gets it it decrypts and it says pay Eve $11,000 instead right so now we",
    "start": "271360",
    "end": "280240"
  },
  {
    "text": "kind of um believe that you need to have this level of U data Integrity as well as confidentiality and in fact if you",
    "start": "280240",
    "end": "287080"
  },
  {
    "text": "don't have that Integrity then you often lose confidentiality as well because when you decrypt data that's been",
    "start": "287080",
    "end": "293039"
  },
  {
    "text": "tampered with it often fails to decrypt or your application fails to process it afterwards in ways that leak information",
    "start": "293039",
    "end": "299960"
  },
  {
    "text": "about what the rest of the message contained and so authenticated",
    "start": "299960",
    "end": "305639"
  },
  {
    "text": "encryption also provides a stronger uh property which is called Data origin authentication or also message",
    "start": "305639",
    "end": "312600"
  },
  {
    "text": "authentication where you get some guarantee about where the messages come from somebody that you you trust",
    "start": "312600",
    "end": "317919"
  },
  {
    "text": "somebody who has access to this secret key so as this a security conference we",
    "start": "317919",
    "end": "323319"
  },
  {
    "text": "often talking about threat modeling um lots of you may have um used stride threat modeling so in terms of stride",
    "start": "323319",
    "end": "329919"
  },
  {
    "text": "you know this is protecting against spoofing tampering and information disclosure so youve got three of your strides kind of um sorted at once so",
    "start": "329919",
    "end": "338120"
  },
  {
    "text": "that's really what you should be using uh in the modern day right so we're going to have a look now at some",
    "start": "338120",
    "end": "344280"
  },
  {
    "text": "horrible code this is old fashion code from the Java cryptography API for doing authenticated",
    "start": "344280",
    "end": "350880"
  },
  {
    "text": "encryption um I'm going to use the laser pointer I'm going to have to pick one thing there's no cats in the audience",
    "start": "350880",
    "end": "357479"
  },
  {
    "text": "there um so one of the things is that we just got this generic Cipher abstraction here and",
    "start": "357479",
    "end": "365800"
  },
  {
    "text": "I happen to know that this a GCM which is Gwar's counter mode is an authenticated encryption mode but this",
    "start": "365800",
    "end": "372400"
  },
  {
    "text": "Cipher class also does unauthenticated encryption it does the old style encryption it does absolute garbage",
    "start": "372400",
    "end": "379319"
  },
  {
    "text": "encryption schemes like ECB which don't really provide you any security at all all and it also does like public key",
    "start": "379319",
    "end": "385520"
  },
  {
    "text": "encryption as well things which have like wildly different security properties so a lot of the security comes",
    "start": "385520",
    "end": "392319"
  },
  {
    "text": "immediately from knowing what to put in this string at the start um I think Thomas tat check famous security",
    "start": "392319",
    "end": "398919"
  },
  {
    "text": "researcher once said if you're typing the letters a e s into your code you're doing crypto",
    "start": "398919",
    "end": "404400"
  },
  {
    "text": "wrong um and there's other little details here like this IV so every time",
    "start": "404400",
    "end": "409440"
  },
  {
    "text": "you encrypt something you have to provide a unique or random initialization Vector sometimes called a",
    "start": "409440",
    "end": "415560"
  },
  {
    "text": "Nots for number used once uh and one of of the things Java does right is it will actually generate",
    "start": "415560",
    "end": "421960"
  },
  {
    "text": "that for you but you still have to worry about it and you still have to kind of you know this is like a 16 b or",
    "start": "421960",
    "end": "427199"
  },
  {
    "text": "something thing that you have to kind of get back from the cipher and you have to remember to write it out with the rest of your stuff otherwise you won't be",
    "start": "427199",
    "end": "433639"
  },
  {
    "text": "able to decrypt it later on and there's a whole bunch of other things in here that you have to",
    "start": "433639",
    "end": "440160"
  },
  {
    "text": "remember uh decryption similar right there's there's a whole bunch of things I have to know I have to know that for GCM in fact that that non was 12 bytes",
    "start": "441680",
    "end": "449599"
  },
  {
    "text": "not it's normally 16 for AES but for GCM it's 12 bytes uh so I either have to",
    "start": "449599",
    "end": "455879"
  },
  {
    "text": "know that or I have to encode it into my out stream and stuff so there just all these details I have to know about",
    "start": "455879",
    "end": "462080"
  },
  {
    "text": "there's this GCM parameter spec which is totally specific to this so you've got this generic API with the string here",
    "start": "462080",
    "end": "469800"
  },
  {
    "text": "but then I have to provide this totally specific class down here so there's all",
    "start": "469800",
    "end": "475240"
  },
  {
    "text": "these kind of details basically um there's a whole bunch of got here so this is that same decryption",
    "start": "475240",
    "end": "483400"
  },
  {
    "text": "code uh but the decryption and the encryption are kind of similar code so typically what developer do will write",
    "start": "483400",
    "end": "489680"
  },
  {
    "text": "the encryption part and then copy and paste it into the decryption thing and then make the changes until it works uh",
    "start": "489680",
    "end": "495280"
  },
  {
    "text": "but if they accidentally leave that saying encrypt mode does anyone know with GCM what would happen if you if you",
    "start": "495280",
    "end": "502000"
  },
  {
    "text": "try and decrypt but you've got it in encrypt mode at all does anyone know anyone want to has it a guess it it works so encryption and",
    "start": "502000",
    "end": "509919"
  },
  {
    "text": "decryption in GCM are the same operation um and so it will decrypt but",
    "start": "509919",
    "end": "515360"
  },
  {
    "text": "what it won't do is verify the authenticity of the data so you would just silently not be authenticating the",
    "start": "515360",
    "end": "521839"
  },
  {
    "text": "data uh you might get depending on which method you call you might get some random garbage stuck on the end of the",
    "start": "521839",
    "end": "527480"
  },
  {
    "text": "message but often applications will tolerate random garbage on the end of",
    "start": "527480",
    "end": "533200"
  },
  {
    "text": "messages um so there's little gotas there there's another gotcha here so",
    "start": "533200",
    "end": "538560"
  },
  {
    "text": "what's this magic number number here um that's 128 in fact that number should",
    "start": "538560",
    "end": "544000"
  },
  {
    "text": "never be anything other than 128 otherwise you've probably got a security vulnerability so down here this is like",
    "start": "544000",
    "end": "549560"
  },
  {
    "text": "the Mars orbitor that crashed famously because of a a mismatch between Imperial",
    "start": "549560",
    "end": "554760"
  },
  {
    "text": "and metric measurements that then it was approaching Mars too quickly and crushed into the",
    "start": "554760",
    "end": "559959"
  },
  {
    "text": "surface so there's a similar thing here a really classic blunder in crypto is having confusing bits and bites so that",
    "start": "559959",
    "end": "567360"
  },
  {
    "text": "parameter there is 128 bits and it's the length of the authentication tag if you",
    "start": "567360",
    "end": "572560"
  },
  {
    "text": "mistake that for bites and put in 16 there you'll get a 16 bit authentication tag which can",
    "start": "572560",
    "end": "578760"
  },
  {
    "text": "be instantly brute forced um so this happened so bouncy castle had a bug with",
    "start": "578760",
    "end": "586200"
  },
  {
    "text": "this uh it's happened in loads of different crypto libraries so bouncy castle had a bug where they mixed up bits and bites in an interface and and",
    "start": "586200",
    "end": "592320"
  },
  {
    "text": "generated 16 bit keys for encryption right again trivially brute",
    "start": "592320",
    "end": "597959"
  },
  {
    "text": "forced um so but yeah that is the only value that makes any sense in this thing",
    "start": "597959",
    "end": "603600"
  },
  {
    "text": "but it makes you specify it so these old style crypto libraries",
    "start": "603600",
    "end": "609279"
  },
  {
    "text": "are characterized by having lots of very general abstractions loads of different choices",
    "start": "609279",
    "end": "614440"
  },
  {
    "text": "for algorithms and things and that you as a developer assumed that you know what you're doing and that you're an expert and you can navigate these",
    "start": "614440",
    "end": "621600"
  },
  {
    "text": "incredibly subtle security choices and so they're very easy to misuse because of",
    "start": "621600",
    "end": "628320"
  },
  {
    "text": "that and it's not just Java as well this was a nice one so Adam sh tuted this",
    "start": "628320",
    "end": "635480"
  },
  {
    "text": "last night and I added it last night so this a nice blog post where somebody has mocked up what op SSL would look like if",
    "start": "635480",
    "end": "642440"
  },
  {
    "text": "it was if it was a user interface uh and it's just like tabs and tabs and pages and pages of checkboxes and things like",
    "start": "642440",
    "end": "649040"
  },
  {
    "text": "that and nobody could possibly understand this like you would never tolerate that as a UI so why do we",
    "start": "649040",
    "end": "654639"
  },
  {
    "text": "tolerate this as a developer API for our libraries",
    "start": "654639",
    "end": "660040"
  },
  {
    "text": "so modern crypto libraries are designed to kind of avoid all of these pitfalls",
    "start": "660040",
    "end": "665720"
  },
  {
    "text": "and these little subtle security vulnerabilities um so Tink is one of",
    "start": "665720",
    "end": "670920"
  },
  {
    "text": "these probably the first one was what's either called nackle I think everyone calls it knle that I know of but it's",
    "start": "670920",
    "end": "677160"
  },
  {
    "text": "supposed to be salt because NAC sodium chloride right it was the network and cryptography Library although there's no",
    "start": "677160",
    "end": "683760"
  },
  {
    "text": "network code in the library at all um and so knle was developed by Daniel",
    "start": "683760",
    "end": "689320"
  },
  {
    "text": "Bernstein who's a very well-known cryptographer and security engineer um",
    "start": "689320",
    "end": "696079"
  },
  {
    "text": "and it takes a very opinionated view of cryptography so you just have um functions effectively which",
    "start": "696079",
    "end": "703040"
  },
  {
    "text": "say like encrypt this so you give it some data and you give it a key and it encrypts it and you don't get to say",
    "start": "703040",
    "end": "708279"
  },
  {
    "text": "what algorithm to use or any of the parameters or anything like that Dan Bernstein who is an expert has chosen",
    "start": "708279",
    "end": "714040"
  },
  {
    "text": "those algorithms and parameters for you and you you use the Dan Bernstein approved crypto Suite",
    "start": "714040",
    "end": "720880"
  },
  {
    "text": "which is great and they all are very highly secure algorithms and they've stood the test of time but as developers",
    "start": "720880",
    "end": "728639"
  },
  {
    "text": "often you're not in the luxury position of just being able to just say oh I just",
    "start": "728639",
    "end": "734000"
  },
  {
    "text": "want to do encryption and I don't care what algorithm it uses normally you've got to interoperate with some other system or youve got to inter Implement a",
    "start": "734000",
    "end": "741399"
  },
  {
    "text": "spec or something like that where the algorithm is specified for you and that's what you need and so if your if",
    "start": "741399",
    "end": "747399"
  },
  {
    "text": "nackle doesn't Implement that algorithm then you have to go back to using some lowl Library so Tink kind of sits in the",
    "start": "747399",
    "end": "755399"
  },
  {
    "text": "middle of those where it provides a high level um sort of uh hard to misuse",
    "start": "755399",
    "end": "763040"
  },
  {
    "text": "library but it also gives you some flexibility to choose the algorithms and choose some of those parameters but in a",
    "start": "763040",
    "end": "769079"
  },
  {
    "text": "way that's done safely all right so this is how you encrypt a file in",
    "start": "769079",
    "end": "776040"
  },
  {
    "text": "Tink so we haven't got a general Cipher we've got this thing called an aead which is a bit of a mouthful but that is",
    "start": "776040",
    "end": "782240"
  },
  {
    "text": "authenticated encryption with Associated data and it's a kind of standard acronym used in cryptography so whatever I get",
    "start": "782240",
    "end": "789399"
  },
  {
    "text": "back here that satisfies this aead interface I know it's authenticated encryption so whenever I see this class",
    "start": "789399",
    "end": "796079"
  },
  {
    "text": "being used in some Java code I know from my stride thing that I'm preventing spoofing tampering and information",
    "start": "796079",
    "end": "802600"
  },
  {
    "text": "disclosure right I know that it's got that whereas if I see a cipher being used in some Java code I have absolutely",
    "start": "802600",
    "end": "807839"
  },
  {
    "text": "no clue what security properties it if it satisfies and then really the",
    "start": "807839",
    "end": "813320"
  },
  {
    "text": "encryption then is just becomes a one liner right there's no initialization there's no messing around with IVs or anything like that you just say encrypt",
    "start": "813320",
    "end": "819279"
  },
  {
    "text": "this stuff and here's my Associated data Associated data you don't really need to worry about it's just some extra context",
    "start": "819279",
    "end": "825560"
  },
  {
    "text": "that you want to be authenticated but not encrypted so in this case we're sticking the file name in to prevent somebody copying and pasting encrypted",
    "start": "825560",
    "end": "832560"
  },
  {
    "text": "code to a different file and so you just encrypt you get",
    "start": "832560",
    "end": "838519"
  },
  {
    "text": "back the encrypted Cipher text and then you write that out to your file and it's taken care of the IV it's prepended the",
    "start": "838519",
    "end": "844279"
  },
  {
    "text": "IV onto here it's generated it all for you securely so there's nothing you need to do about",
    "start": "844279",
    "end": "851440"
  },
  {
    "text": "that likewise decrypting again same thing so we use this key set I'll talk later about what key sets are by the way",
    "start": "851440",
    "end": "858360"
  },
  {
    "text": "uh we get back this aad uh and then we just decrypt again again passing the same file name otherwise it won't",
    "start": "858360",
    "end": "865240"
  },
  {
    "text": "decrypt and that's it um it doesn't have any of the same um security pitfalls",
    "start": "865240",
    "end": "873320"
  },
  {
    "text": "that we had in the plain Java code uh even if this if you copied and pasted this because again this looks",
    "start": "873320",
    "end": "879399"
  },
  {
    "text": "pretty similar and and left that as encrypt it wouldn't it wouldn't work what you would get back is totally",
    "start": "879399",
    "end": "885079"
  },
  {
    "text": "random it would reencrypt it with a new random IV so it would not decrypt and what you'd get back is some garbage so",
    "start": "885079",
    "end": "891480"
  },
  {
    "text": "your application would go and process that and it would fail but because what it's getting back is totally random it's",
    "start": "891480",
    "end": "897519"
  },
  {
    "text": "not going to leak any information about what was in the rest of the message because no part of it has been",
    "start": "897519",
    "end": "903720"
  },
  {
    "text": "decrypted so some some of the kind of design principles of Tink then is that each cryptographic primitive has its own",
    "start": "903720",
    "end": "910519"
  },
  {
    "text": "interface so it's so it's well typed in each language so when you see a particular interface like aad you know",
    "start": "910519",
    "end": "916680"
  },
  {
    "text": "that every single implementation of that interface satisfies the security goals",
    "start": "916680",
    "end": "922920"
  },
  {
    "text": "and if you go and look at the documentation for Tink they have like quite detailed security requirements for the things so it talks about you know",
    "start": "922920",
    "end": "929360"
  },
  {
    "text": "how many messages you can encrypt before you start losing these things and so on so there's kind of baselines of that",
    "start": "929360",
    "end": "935000"
  },
  {
    "text": "kind of stuff and so you can choose your algorithm depending on the other kind of",
    "start": "935000",
    "end": "940279"
  },
  {
    "text": "quality attributes you want to achieve in your code like performance or you know scalability or whatever else but",
    "start": "940279",
    "end": "947040"
  },
  {
    "text": "you know you're getting this Baseline security okay so the downside of that",
    "start": "947040",
    "end": "953240"
  },
  {
    "text": "code that I just showed you is that it was a single shot API all of your data",
    "start": "953240",
    "end": "959079"
  },
  {
    "text": "to be in memory at once for you to be able to encrypt it or decrypt it which is fine for short bits of data lots of",
    "start": "959079",
    "end": "966959"
  },
  {
    "text": "stuff that applications do um uh are are exactly like that there're small bits of",
    "start": "966959",
    "end": "972319"
  },
  {
    "text": "data a few kilobytes or megabytes uh but if you've got larger data that you need to encrypt uh then",
    "start": "972319",
    "end": "978120"
  },
  {
    "text": "you really want to do streaming encryption and again the old style Java",
    "start": "978120",
    "end": "983720"
  },
  {
    "text": "API has this Cipher input stream and Cipher output stream that you can use to to wrap an input and output stream and",
    "start": "983720",
    "end": "990519"
  },
  {
    "text": "it will do uh encryption and decryption on the Fly and it's generally a good",
    "start": "990519",
    "end": "995600"
  },
  {
    "text": "idea but one really serious problem with this API was it was designed and added to Java before authenticated encryption",
    "start": "995600",
    "end": "1003639"
  },
  {
    "text": "was conceived of as a thing that we needed to do so this I believe it was added in Java 1.4 which is",
    "start": "1003639",
    "end": "1010920"
  },
  {
    "text": "2002 um and the first authenticated encryption modes didn't come out until a",
    "start": "1010920",
    "end": "1015959"
  },
  {
    "text": "couple years after that and so it has no way of signal the authentication failed",
    "start": "1015959",
    "end": "1021680"
  },
  {
    "text": "all it can do is throw this generic IO exception so it gets to the end of the",
    "start": "1021680",
    "end": "1027160"
  },
  {
    "text": "stream tries to authenticate the data goes okay right that failed so I'm going to throw this IO exception and this is",
    "start": "1027160",
    "end": "1033160"
  },
  {
    "text": "pretty much if you look in any Java code Bas anywhere and look at how people handle I exceptions almost without",
    "start": "1033160",
    "end": "1039959"
  },
  {
    "text": "exception they just log it and move on because nobody really knows how to handle iio",
    "start": "1039959",
    "end": "1045558"
  },
  {
    "text": "exceptions um and so you You' already processed all the data then and you know",
    "start": "1045559",
    "end": "1051320"
  },
  {
    "text": "you find out that somebody's tampered with the data but um you know maybe you've got a log message that you can",
    "start": "1051320",
    "end": "1057520"
  },
  {
    "text": "see after the fact and another problem then as well is like when when does it actually verify",
    "start": "1057520",
    "end": "1064400"
  },
  {
    "text": "that authentication tag it does it right at the end the way authenticate encryption works is you you encrypt the",
    "start": "1064400",
    "end": "1069440"
  },
  {
    "text": "data and you write it out and then right at the very end there'll be like a 16 by authentication tag that gets",
    "start": "1069440",
    "end": "1075159"
  },
  {
    "text": "verified and so if we're processing like gigabytes of data or something like that and we're streaming it through it's only",
    "start": "1075159",
    "end": "1081679"
  },
  {
    "text": "when we get to the very end that we're we're going to find out that anything's been tampered with which is Too Late by",
    "start": "1081679",
    "end": "1087720"
  },
  {
    "text": "that point uh because we've already been reading in chunks of data and processing them unless you're going to buffer it",
    "start": "1087720",
    "end": "1093080"
  },
  {
    "text": "all up in memory again uh or you know have some massive transaction that you're going to roll back at the end",
    "start": "1093080",
    "end": "1099600"
  },
  {
    "text": "neither of which you know kind of defeat the purpose of what you would doing in the first",
    "start": "1099600",
    "end": "1105280"
  },
  {
    "text": "place uh and so we call this generally unreleased unverified plain text the",
    "start": "1105280",
    "end": "1110400"
  },
  {
    "text": "idea that you're that you're processing data that you've decrypted before you know whether it's authentic or",
    "start": "1110400",
    "end": "1118200"
  },
  {
    "text": "not and so Tink provides what it calls a streaming aead so that's again an",
    "start": "1118200",
    "end": "1123880"
  },
  {
    "text": "authenticated encryption um which is a kind of drop in replacement for these old Java classes",
    "start": "1123880",
    "end": "1130919"
  },
  {
    "text": "but again we're using there's a specific interface here and then we can we can wrap our input and output",
    "start": "1130919",
    "end": "1136919"
  },
  {
    "text": "streams uh and what this does is it it chunks up your data for you so in either",
    "start": "1136919",
    "end": "1142320"
  },
  {
    "text": "I believe it's 8 kilobytes or 1 Megabyte chunks and it encrypts and authenticates each chunk individually so every 8",
    "start": "1142320",
    "end": "1149320"
  },
  {
    "text": "kilobytes or every one megabyte you get a separate authentication tag and then they do some stuff with the associated",
    "start": "1149320",
    "end": "1155200"
  },
  {
    "text": "data to kind of tie those chunks together so you can't rearrange them or duplicate them or anything like that and",
    "start": "1155200",
    "end": "1162080"
  },
  {
    "text": "so now when you're reading in data you're reading in say you're asking for like 500 bytes or something here what",
    "start": "1162080",
    "end": "1167600"
  },
  {
    "text": "it's actually going to do behind the seeds is going to read in an entire chunk one megabyte say buffer it itself",
    "start": "1167600",
    "end": "1173679"
  },
  {
    "text": "internally decrypt it authenticate it and only when it's actually verified is it going to pass it to your",
    "start": "1173679",
    "end": "1179960"
  },
  {
    "text": "application so this process method here is only ever getting verified plain text",
    "start": "1179960",
    "end": "1185520"
  },
  {
    "text": "that has been authenticated again it just throws an IO exception if if a tag fails but it does",
    "start": "1185520",
    "end": "1193440"
  },
  {
    "text": "that before it releases anything so so even if you just log that and ignore it you you've not processed anything that's",
    "start": "1193440",
    "end": "1200600"
  },
  {
    "text": "been tampered with so you're failing safe um you know we talk about insecurity about failing open versus",
    "start": "1200600",
    "end": "1207200"
  },
  {
    "text": "fail and closed so this is fail and closed you know it's it's not releasing anything that it hasn't",
    "start": "1207200",
    "end": "1214640"
  },
  {
    "text": "authenticated so that was uh secret key encryption there's also secret cre",
    "start": "1217000",
    "end": "1223480"
  },
  {
    "text": "message authentication codes that I won't go into cuz they're pretty similar to what",
    "start": "1223480",
    "end": "1229720"
  },
  {
    "text": "I'm about to show you which is signatures so digital signatures another classic example in um cryptography so",
    "start": "1229720",
    "end": "1237159"
  },
  {
    "text": "you have a private key you're going to use it to sign some data um that you're then going to uh send somewhere and then",
    "start": "1237159",
    "end": "1243720"
  },
  {
    "text": "other people can use the public key to verify the authenticity of that data so again super easy in um Tink",
    "start": "1243720",
    "end": "1253159"
  },
  {
    "text": "right you just have your key set and you get this public key sign so it's technically it's going to use the",
    "start": "1253159",
    "end": "1259039"
  },
  {
    "text": "private key but it's called public key because it's public key crypto and then you just sign the data and you get back a signature and then similarly to verify",
    "start": "1259039",
    "end": "1266840"
  },
  {
    "text": "you get a public key verify instance so these are different they're not just a generic signature class uh and then you",
    "start": "1266840",
    "end": "1274159"
  },
  {
    "text": "call verify so a couple of things to notice about this firstly getting the verify thing this",
    "start": "1274159",
    "end": "1279919"
  },
  {
    "text": "has to be done on a public key set that only contains public keys if you've got private key material in there that will actually throw an exception and it's",
    "start": "1279919",
    "end": "1286600"
  },
  {
    "text": "just a kind of safeguard against you accidentally sending your private keys to somebody else you know and so your uh",
    "start": "1286600",
    "end": "1293640"
  },
  {
    "text": "your your code or your Downstream code will fail if you've accidentally included private keys in there and",
    "start": "1293640",
    "end": "1300240"
  },
  {
    "text": "secondly most signature apis return a Boolean you ask is this valid or not and",
    "start": "1300240",
    "end": "1305520"
  },
  {
    "text": "it returns a Boolean yes or no uh but it's really easy to just not check that",
    "start": "1305520",
    "end": "1311840"
  },
  {
    "text": "Boolean return value right code will still compile if you don't check it even in code review quite often you would",
    "start": "1311840",
    "end": "1318720"
  },
  {
    "text": "notice that that somebody is not is not checking the result of the verify uh and so this is actually it",
    "start": "1318720",
    "end": "1324840"
  },
  {
    "text": "doesn't return anything this API and it throws an exception if it's not valid instead so again they're just making it",
    "start": "1324840",
    "end": "1330520"
  },
  {
    "text": "harder to ignore failures um in languages like go which",
    "start": "1330520",
    "end": "1337720"
  },
  {
    "text": "don't have exceptions it returns an error value and you have to check the error value but in go the way there is",
    "start": "1337720",
    "end": "1343440"
  },
  {
    "text": "compiler checks for making sure you're checking error values most of the time",
    "start": "1343440",
    "end": "1349279"
  },
  {
    "text": "so that's signatures there's not really a huge amount to say about signatures public key encryption is a",
    "start": "1349279",
    "end": "1355960"
  },
  {
    "text": "bit more um complex so I have to go into a little bit about how this works",
    "start": "1355960",
    "end": "1362120"
  },
  {
    "text": "unfortunately um for reasons that I hopefully clear so most public key",
    "start": "1362120",
    "end": "1367200"
  },
  {
    "text": "encryption is not pure public key encryption and this may be um uh known to many of",
    "start": "1367200",
    "end": "1376279"
  },
  {
    "text": "you but just for those that don't so normally when we do public key encryption we do what's called hybrid",
    "start": "1376279",
    "end": "1382840"
  },
  {
    "text": "encryption so a public key encryption scheme like RSA has two problems one is that it's very slow compared to",
    "start": "1382840",
    "end": "1389640"
  },
  {
    "text": "something like AES typically orders of magnitude slower uh and it's also there's a limit to how much data you can",
    "start": "1389640",
    "end": "1395840"
  },
  {
    "text": "encrypt so typically a few hundred bytes uh and so what we do is hybrid encryption so we we generate a random",
    "start": "1395840",
    "end": "1403600"
  },
  {
    "text": "AES encryption Keys say are shared secret and we encrypt our message with AES which is nice and fast and then we",
    "start": "1403600",
    "end": "1410720"
  },
  {
    "text": "just encrypt that random AES key with RSA and then we send those two things along to Bob and Bob uses his RSA",
    "start": "1410720",
    "end": "1417919"
  },
  {
    "text": "private key to deip that unique AES key and then uses that AES key to deip the me rest of the message that's how RSA",
    "start": "1417919",
    "end": "1425559"
  },
  {
    "text": "encryption has worked for donkey's years a modern Twist on it is called What's called the chem demem Paradigm",
    "start": "1425559",
    "end": "1432919"
  },
  {
    "text": "and this is kind of it's been around for about 20 years but it's only really",
    "start": "1432919",
    "end": "1438039"
  },
  {
    "text": "becom thing now because of um the the looming",
    "start": "1438039",
    "end": "1443559"
  },
  {
    "text": "threat of quantum computers uh and so a chem is what's called a key encapsulation",
    "start": "1443559",
    "end": "1450080"
  },
  {
    "text": "mechanism um and it's kind of like a generalization of that idea of RSA encryption so you feed in so Alys is",
    "start": "1450080",
    "end": "1456240"
  },
  {
    "text": "here she wants to send a message to Bob she's got Bob's public key she feeds it into a chem and the chem is going to",
    "start": "1456240",
    "end": "1462080"
  },
  {
    "text": "spit out a a fresh random data encryption key and also what's called",
    "start": "1462080",
    "end": "1467880"
  },
  {
    "text": "anap culation of that key so you can think of it as like the encrypted key and then she uses her Dem which is a",
    "start": "1467880",
    "end": "1474640"
  },
  {
    "text": "data encapsulation but that's really something like AES to encrypt the rest of the message and then she sends the",
    "start": "1474640",
    "end": "1481080"
  },
  {
    "text": "encapsulated key and the cipher text so these are logically two arrows here but they're typically one",
    "start": "1481080",
    "end": "1487320"
  },
  {
    "text": "message and then so Bob can then call his chem and say okay decapsulate that key with my private key and he'll get",
    "start": "1487320",
    "end": "1494360"
  },
  {
    "text": "back the same data encapsulation key which he can then use to decrypt the",
    "start": "1494360",
    "end": "1499559"
  },
  {
    "text": "message and the reason for this change is that",
    "start": "1499559",
    "end": "1505200"
  },
  {
    "text": "um although the old RSA approach works for RSA it works for pretty much nothing else that looks different to RSA and in",
    "start": "1505200",
    "end": "1513080"
  },
  {
    "text": "particular for the what we call postquantum encryption schemes which are The Replacements that are safe against",
    "start": "1513080",
    "end": "1518600"
  },
  {
    "text": "quantum computers um they don't work anything like RSA encryption and decryption but",
    "start": "1518600",
    "end": "1524919"
  },
  {
    "text": "they do fit with this thing so by letting so instead of your application",
    "start": "1524919",
    "end": "1530279"
  },
  {
    "text": "generating an as key and then asking the public key to encrypt it you let the public Key System generate it for you",
    "start": "1530279",
    "end": "1536799"
  },
  {
    "text": "and typically it deres it in some way so there's a little bit of complication that you need to kind of understand for",
    "start": "1536799",
    "end": "1543360"
  },
  {
    "text": "why things are the way they are but mostly intin this is all hidden for you again so again we have our",
    "start": "1543360",
    "end": "1550480"
  },
  {
    "text": "public key set here so this is Bob's public key and we're going to get this hybrid encrypt so that's why it's called",
    "start": "1550480",
    "end": "1555679"
  },
  {
    "text": "hybrid encryption because it's doing this thing behind the scenes it's doing this chem Dem stuff and then we just say",
    "start": "1555679",
    "end": "1562480"
  },
  {
    "text": "we're going to encrypt it and we give it our plain text and our Associated data and it's going to give us back a Cypher",
    "start": "1562480",
    "end": "1568279"
  },
  {
    "text": "text so an important difference here so we said we used authenticated encryption",
    "start": "1568279",
    "end": "1573720"
  },
  {
    "text": "for symmetric encryption uh the security guarantees of public key",
    "start": "1573720",
    "end": "1579919"
  },
  {
    "text": "encryption are different it's it's not authenticated but it is protected",
    "start": "1579919",
    "end": "1585000"
  },
  {
    "text": "against tampering so you protect against information disclosure and tamper but you don't protect against spoofing",
    "start": "1585000",
    "end": "1591240"
  },
  {
    "text": "because anyone with the public key can produce a message they can encrypt to",
    "start": "1591240",
    "end": "1596279"
  },
  {
    "text": "anyone and so um you don't get that guarantee of um where the messages come",
    "start": "1596279",
    "end": "1603880"
  },
  {
    "text": "from so that's hybrid encryption and public key encryption and that's kind of covered all the bases right of how",
    "start": "1605480",
    "end": "1611840"
  },
  {
    "text": "you're doing things so you can see with Tink that it it's pretty there's a lot of complexity that's being hidden behind the scenes for you and being taken care",
    "start": "1611840",
    "end": "1619559"
  },
  {
    "text": "of so now we come to the bits uh the more complicated",
    "start": "1619559",
    "end": "1625360"
  },
  {
    "text": "bits so this's a nice quote from Leah kissner who was at Google I think when she said this which is that cryptography",
    "start": "1626360",
    "end": "1632320"
  },
  {
    "text": "is a tool for turning lots of different problems into Key Management problems and that is often the way with Crypt",
    "start": "1632320",
    "end": "1637960"
  },
  {
    "text": "that people people learn about the algorithms and they Implement their crypto in their code base and then and",
    "start": "1637960",
    "end": "1643279"
  },
  {
    "text": "then they what do we do with the keys right and so Tink doesn't do this Tink doesn't just leave the key management um",
    "start": "1643279",
    "end": "1650200"
  },
  {
    "text": "for somebody else to worry about it's a core part of the library is is um key",
    "start": "1650200",
    "end": "1656360"
  },
  {
    "text": "management and if you notice from those um uh code examples I was showing there",
    "start": "1656360",
    "end": "1662399"
  },
  {
    "text": "we were always dealing we weren't dealing with individual keys we're dealing with what's called a key set and that is a set of keys in Tink and the",
    "start": "1662399",
    "end": "1669240"
  },
  {
    "text": "reason why we're doing that is is to one of tink's key design goals is to um",
    "start": "1669240",
    "end": "1675080"
  },
  {
    "text": "allow something called cryptographic agility and that's basically the idea that the",
    "start": "1675080",
    "end": "1680240"
  },
  {
    "text": "set of algorithms uh that we use to encrypt or decrypt or sign and so on what we",
    "start": "1680240",
    "end": "1686960"
  },
  {
    "text": "consider a secure algorithm changes over time so you know we used to think things like md5 and rc4 were secure algorithms",
    "start": "1686960",
    "end": "1694799"
  },
  {
    "text": "and now those have got serious security vulnerabilities so we want to be able to change the crypto algorithms we're using",
    "start": "1694799",
    "end": "1701640"
  },
  {
    "text": "over time in a secure way and Tink does this fire these key sets so one way you",
    "start": "1701640",
    "end": "1708360"
  },
  {
    "text": "could do it uh cryptographic agility is what's called inband negotiation of",
    "start": "1708360",
    "end": "1713720"
  },
  {
    "text": "algorithms so this is famously what Jason web tokens do in Json web tokens",
    "start": "1713720",
    "end": "1719279"
  },
  {
    "text": "you have a header on every message and it has this algorithm field on it which tells you what algorithm was used to",
    "start": "1719279",
    "end": "1725399"
  },
  {
    "text": "sign that Json web token or to encrypt it even uh and the problem is that there's",
    "start": "1725399",
    "end": "1731200"
  },
  {
    "text": "this algorithm called none uh which means no security whatso whatsoever and",
    "start": "1731200",
    "end": "1736559"
  },
  {
    "text": "so as an attacker you can get a signed jot you know you've logged into a website say and somebody's using JS to",
    "start": "1736559",
    "end": "1743320"
  },
  {
    "text": "as the session tokens you can get one of these and you can say you know okay",
    "start": "1743320",
    "end": "1748799"
  },
  {
    "text": "right I'm going to change it the payload to say you know roll admin or whatever and I'm just going to rip the signature",
    "start": "1748799",
    "end": "1754360"
  },
  {
    "text": "off and change the algorithm to none and a surprisingly large number of websites and libraries just accepted that as a",
    "start": "1754360",
    "end": "1761440"
  },
  {
    "text": "valid um chart and it caused endless kind of security vulnerabilities uh there's a website",
    "start": "1761440",
    "end": "1767159"
  },
  {
    "text": "somebody set up which is like how many days since the last Al none vulnerability I think it has actually",
    "start": "1767159",
    "end": "1772519"
  },
  {
    "text": "been probably over a year now since the last one so uh so we're doing well",
    "start": "1772519",
    "end": "1778720"
  },
  {
    "text": "now another example of that attack again against jots so I'm going to um pick on",
    "start": "1780240",
    "end": "1786320"
  },
  {
    "text": "jots a bit here which is common in crypto uh talks uh was what's an example of what's called a confused Deputy",
    "start": "1786320",
    "end": "1792600"
  },
  {
    "text": "attack which is kind of very generic but the idea is that somebody was signing stuff with RSA and so so they're using",
    "start": "1792600",
    "end": "1798480"
  },
  {
    "text": "their private key to sign and public key to verify but again attacker could change the algorithm to a symmetric",
    "start": "1798480",
    "end": "1805000"
  },
  {
    "text": "signing algorithm this case hmac uh and then use the bites of the public key to",
    "start": "1805000",
    "end": "1810600"
  },
  {
    "text": "sign the jot so they can make changes and then take the public key use the bites as if it was a shared secret and",
    "start": "1810600",
    "end": "1817120"
  },
  {
    "text": "science of and again loads of libraries just went sure fine that works uh",
    "start": "1817120",
    "end": "1822159"
  },
  {
    "text": "because they weren't checking what algorithm was supposed to be used with that key",
    "start": "1822159",
    "end": "1829960"
  },
  {
    "text": "and so uh there's a principal that comes from Moxy Marlin Spike who's uh the",
    "start": "1830120",
    "end": "1835360"
  },
  {
    "text": "co-author of the signal secure messenger and protocol and he said you know if you",
    "start": "1835360",
    "end": "1840600"
  },
  {
    "text": "have to perform any kind of operation on a message before you've authenticated it then it will inevitably lead to doom and",
    "start": "1840600",
    "end": "1846919"
  },
  {
    "text": "this is called moxy's cryptographic Doom principle which is a pretty cool name for a principles I've have named after",
    "start": "1846919",
    "end": "1853840"
  },
  {
    "text": "you um and so Tink tries to avoid this right so one way you could avoid it would be",
    "start": "1853840",
    "end": "1859919"
  },
  {
    "text": "to just not allow cryptographic agility at all and just fix one set of",
    "start": "1859919",
    "end": "1865000"
  },
  {
    "text": "algorithms forever which is kind of what the knle library does before and there are some protocols and",
    "start": "1865000",
    "end": "1872840"
  },
  {
    "text": "um uh key formats and things like that where they do that and they just fix one",
    "start": "1872840",
    "end": "1878039"
  },
  {
    "text": "set of algorithms and they say right that's going to be secure and if there's ever a problem with those like the",
    "start": "1878039",
    "end": "1883440"
  },
  {
    "text": "looming um invention of quantum computers well we just we're have to",
    "start": "1883440",
    "end": "1889039"
  },
  {
    "text": "like stop the world and upgrade everyone to version two at the same time right uh",
    "start": "1889039",
    "end": "1894080"
  },
  {
    "text": "and this goes against Google's own kind of software engineering principles which they document in this book one of which",
    "start": "1894080",
    "end": "1900200"
  },
  {
    "text": "is that all software should be designed to um deal with change over time and so Tink is designed to allow",
    "start": "1900200",
    "end": "1907799"
  },
  {
    "text": "cryptographic agility in a safe way and it's something that I call Key driven",
    "start": "1907799",
    "end": "1913240"
  },
  {
    "text": "cryptographic agility um it's not a standard term by any means but the idea is rather than putting the algorithm",
    "start": "1913240",
    "end": "1919799"
  },
  {
    "text": "that you used in the message you put it in the metadata associated with a key so",
    "start": "1919799",
    "end": "1924919"
  },
  {
    "text": "that key should only ever be used for one algorithm um you should only ever use a cryptographic key for one purpose",
    "start": "1924919",
    "end": "1932159"
  },
  {
    "text": "um and so you you're storing your key somewhere securely and so you store some metadata with it saying what algorithm",
    "start": "1932159",
    "end": "1938679"
  },
  {
    "text": "it's for um and this is exactly what Tink does so the the algorithm is",
    "start": "1938679",
    "end": "1943960"
  },
  {
    "text": "associated with a key not with the message and so this is what key sets do in Tink",
    "start": "1943960",
    "end": "1950080"
  },
  {
    "text": "so key set as the name implies is just a set of keys that are going to be used for some purpose like encrypting",
    "start": "1950080",
    "end": "1955720"
  },
  {
    "text": "messages or signing messages or something and each key set has a bunch of metadata associated with it each key",
    "start": "1955720",
    "end": "1962320"
  },
  {
    "text": "in the key Set uh and one of those fields it has is I think it's actually called type rather than algorithm but it",
    "start": "1962320",
    "end": "1968159"
  },
  {
    "text": "tells you what algorithm that key is used for and this accomplishes two things",
    "start": "1968159",
    "end": "1974519"
  },
  {
    "text": "first of all it prevents these kind of attacks against jots because whenever you you look up a key uh you know",
    "start": "1974519",
    "end": "1980000"
  },
  {
    "text": "exactly what algorithm it's going to be used for and you don't look at the message at all and secondly it allows you to change",
    "start": "1980000",
    "end": "1986639"
  },
  {
    "text": "the algorithm over time so here we've got three keys that have been generated these first two were using as in go",
    "start": "1986639",
    "end": "1994240"
  },
  {
    "text": "counter mode and this last one is called using one of Dan bernsen's algorithms",
    "start": "1994240",
    "end": "1999360"
  },
  {
    "text": "which we call Char pooly generally because that's a bit of a mouthful to say",
    "start": "1999360",
    "end": "2005320"
  },
  {
    "text": "um and so the way this works then when you think about when you're encrypting a message or signing a message right",
    "start": "2005320",
    "end": "2012279"
  },
  {
    "text": "you're producing something new uh there's a key which is referred to as the primary key and that's the key",
    "start": "2012279",
    "end": "2017720"
  },
  {
    "text": "you're going to use whenever you're producing something new so if you say I'm going to encrypt this message to Bob",
    "start": "2017720",
    "end": "2023039"
  },
  {
    "text": "it's going to say right what's the primary key in this key set is this one so I'm going to use this algorithm to",
    "start": "2023039",
    "end": "2028960"
  },
  {
    "text": "encrypt that and so by setting your primary key in your key set you're deciding which algorithm to use so",
    "start": "2028960",
    "end": "2034159"
  },
  {
    "text": "that's how you pick your algorithm but when you're receiving a message so you're decrypting something",
    "start": "2034159",
    "end": "2040120"
  },
  {
    "text": "or verifying a signature you can still use the old keys that are in there and so this key ID is unique within the key",
    "start": "2040120",
    "end": "2047399"
  },
  {
    "text": "set and so when you read in a message you look up which key ID and that tells you which key and then you look up the",
    "start": "2047399",
    "end": "2053358"
  },
  {
    "text": "algorithm associated with that key you don't try other algorithms that key works with that algorithm so this allows",
    "start": "2053359",
    "end": "2059520"
  },
  {
    "text": "you to move nicely from using old algorithms to move using new algorithms while still having a a period where they",
    "start": "2059520",
    "end": "2067118"
  },
  {
    "text": "you're using both both and so this encourages those two kind of good practices one is this",
    "start": "2067119",
    "end": "2074000"
  },
  {
    "text": "cryptographic agility and the other one is regular key rotation it becomes if you're using key sets everywhere in your",
    "start": "2074000",
    "end": "2079440"
  },
  {
    "text": "code base it becomes easy to rotate Keys regularly and as someone who's had to retrofit key rotation onto a code base",
    "start": "2079440",
    "end": "2087040"
  },
  {
    "text": "that just use single Keys everywhere I can tell you this makes life a lot",
    "start": "2087040",
    "end": "2092800"
  },
  {
    "text": "easier and to so to kind of support this so when you encrypt something with Tink right it puts this kind of standard",
    "start": "2092800",
    "end": "2099000"
  },
  {
    "text": "header on the front or its own standard header so it has this kind of key ID",
    "start": "2099000",
    "end": "2105920"
  },
  {
    "text": "um and um and then when it's reading back in uh it can tell you it can tell",
    "start": "2105920",
    "end": "2112400"
  },
  {
    "text": "which key you're using there's also raw variants of the algorithm which don't include the key ID if you have to",
    "start": "2112400",
    "end": "2117599"
  },
  {
    "text": "interoperate with people that don't understand these key IDs uh in which case it will try every key in the key",
    "start": "2117599",
    "end": "2123599"
  },
  {
    "text": "set which is a sort of thing that worries people who don't know much about cryptography but trust me that's a perfectly fine thing to do",
    "start": "2123599",
    "end": "2132720"
  },
  {
    "text": "um so the actual how these key sets are managed um",
    "start": "2132800",
    "end": "2138680"
  },
  {
    "text": "Tink takes a very opinionated view of this so typically if you're used to",
    "start": "2138680",
    "end": "2145320"
  },
  {
    "text": "things like Java key stores they're encrypted with a password so when you create a key store you create a password",
    "start": "2145320",
    "end": "2151880"
  },
  {
    "text": "and then it encrypts using that password the problem with this um is that what",
    "start": "2151880",
    "end": "2158240"
  },
  {
    "text": "typically happens then is you're running some web server or something like that you have your encrypted key store on the file system and right next to it on the",
    "start": "2158240",
    "end": "2164880"
  },
  {
    "text": "file system you have an unencrypted file with a password in it um which is you",
    "start": "2164880",
    "end": "2170839"
  },
  {
    "text": "know sometimes people do better than that but often that's the case and so if somebody has access to the the key store",
    "start": "2170839",
    "end": "2176119"
  },
  {
    "text": "they probably also have access to the password as well and so the Google Tink",
    "start": "2176119",
    "end": "2181359"
  },
  {
    "text": "designers said we're not going to support that at all we're just going to force everyone to use what's called a",
    "start": "2181359",
    "end": "2186760"
  },
  {
    "text": "key management system so you can either have a totally unencrypted key file and",
    "start": "2186760",
    "end": "2191839"
  },
  {
    "text": "you can put it in your secrets management system or something like that or you use a KMS and they support so most of the",
    "start": "2191839",
    "end": "2199079"
  },
  {
    "text": "cloud services now have a key Management Service uh and that's where you can",
    "start": "2199079",
    "end": "2204160"
  },
  {
    "text": "store your master keys all securely and they're probably backed by a fips approved hardware security module and",
    "start": "2204160",
    "end": "2209640"
  },
  {
    "text": "things like that uh and so you load up your application and it loads its encrypted key set from disk and then it",
    "start": "2209640",
    "end": "2216359"
  },
  {
    "text": "calls out to the KMS to decrypt that key set in memory and it supports a bunch of them for cloud stuff",
    "start": "2216359",
    "end": "2223440"
  },
  {
    "text": "and then it also as I said it supports mobile uh development so they have Integrations with the Android key store",
    "start": "2223440",
    "end": "2230599"
  },
  {
    "text": "and the iOS um keychain so you can use your nice",
    "start": "2230599",
    "end": "2235920"
  },
  {
    "text": "Hardware route of Trust on those devices",
    "start": "2235920",
    "end": "2242079"
  },
  {
    "text": "so I made fun of JDS a few times so JDS are kind of like this",
    "start": "2242079",
    "end": "2248359"
  },
  {
    "text": "they're they're a bit like those old style crypto libraries in there they provide loads of different options and things and they're very easy to to mess",
    "start": "2248359",
    "end": "2254480"
  },
  {
    "text": "up and I say that someone someone who's involved in the standardization of",
    "start": "2254480",
    "end": "2259760"
  },
  {
    "text": "jts uh so Tink not only provides those Primitives but actually they decided",
    "start": "2259760",
    "end": "2264800"
  },
  {
    "text": "that JS are so widely used now and so often screwed up that they provided",
    "start": "2264800",
    "end": "2270079"
  },
  {
    "text": "support for them directly in the library in a way again that's kind of secure so",
    "start": "2270079",
    "end": "2275800"
  },
  {
    "text": "have a bunch of apis for kind creating Jes so first of all you create this",
    "start": "2275800",
    "end": "2282200"
  },
  {
    "text": "what's called a raw jot with this Builder and you can set a bunch of stuff in it uh and that raw jot",
    "start": "2282200",
    "end": "2290319"
  },
  {
    "text": "you can't do anything with that you can't convert it into an actual um string J to send to anyone uh",
    "start": "2290319",
    "end": "2298400"
  },
  {
    "text": "all you can do is is sign it so you this case we using a Mac so symmetric message",
    "start": "2298400",
    "end": "2304880"
  },
  {
    "text": "authentication code and and you you get the string back when you compute the Mac",
    "start": "2304880",
    "end": "2310000"
  },
  {
    "text": "so again it's kind of steering you towards um secure patterns and likewise",
    "start": "2310000",
    "end": "2315480"
  },
  {
    "text": "in verifying uh you only get this verified jot so you can only this verified jot is",
    "start": "2315480",
    "end": "2321480"
  },
  {
    "text": "the only thing that allows you to actually access the claims in the jot you only can get one of those back from",
    "start": "2321480",
    "end": "2326880"
  },
  {
    "text": "calling the verify method so this kind of interesting again it's like their you",
    "start": "2326880",
    "end": "2332040"
  },
  {
    "text": "know their signature verification that through a signature this time they're returning a specific type and you only",
    "start": "2332040",
    "end": "2337440"
  },
  {
    "text": "you get that type back after verifying something so in your code you can pass around a verified jot in all your stuff",
    "start": "2337440",
    "end": "2343400"
  },
  {
    "text": "and you know that whenever that gets called it it could only have come from having actually verified the",
    "start": "2343400",
    "end": "2350240"
  },
  {
    "text": "signature um so this is kind of a nice pattern um that they embody which is",
    "start": "2350240",
    "end": "2355720"
  },
  {
    "text": "called sort of you know we often talk about secure by Design in crypto and kind of shift left and this is kind of",
    "start": "2355720",
    "end": "2360960"
  },
  {
    "text": "secure by construction right there's no way the type system is enforcing that the only way you can",
    "start": "2360960",
    "end": "2367119"
  },
  {
    "text": "access the content of the jot is after You' verified the signature on",
    "start": "2367119",
    "end": "2372960"
  },
  {
    "text": "it so that's pretty good I think we're a",
    "start": "2375680",
    "end": "2380720"
  },
  {
    "text": "bit early so that's kind of summary then so Tink then is designed to be kind of",
    "start": "2380720",
    "end": "2386520"
  },
  {
    "text": "easy to use and more importantly to be hard to misuse and this is a kind of a",
    "start": "2386520",
    "end": "2391839"
  },
  {
    "text": "theme of secure library and API development in in the modern world is that it's not enough to make things easy",
    "start": "2391839",
    "end": "2398800"
  },
  {
    "text": "to to use or to have one path that is easy to use you've got to remove the",
    "start": "2398800",
    "end": "2404079"
  },
  {
    "text": "hard to the easy to misus bits as well um likewise I'd say I agree with the",
    "start": "2404079",
    "end": "2411040"
  },
  {
    "text": "tink developers that cryptographic agility is absolutely essential um we can't just assume that",
    "start": "2411040",
    "end": "2417720"
  },
  {
    "text": "where we are now all of the algorithms we're using are going to be secure forever uh and there is the idea of",
    "start": "2417720",
    "end": "2423760"
  },
  {
    "text": "quantum computers coming in the future and so there's a bunch of um",
    "start": "2423760",
    "end": "2429400"
  },
  {
    "text": "features that I've pointed out some of them in Tink as well that make the code easy to audit so for people like me who look at crypto code and secure code",
    "start": "2429400",
    "end": "2437040"
  },
  {
    "text": "quite a lot of the time and review it um Tink is great because when you see these types being used in the code you know",
    "start": "2437040",
    "end": "2443640"
  },
  {
    "text": "exactly what you're getting for those things uh so it's really good there's also some other bits I didn't",
    "start": "2443640",
    "end": "2450119"
  },
  {
    "text": "show uh where it has some markers that you have to use when you're accessing like raw key material and things like",
    "start": "2450119",
    "end": "2456480"
  },
  {
    "text": "that so there really nice to go into your IDE and you can just search for all uses of this class and those are the",
    "start": "2456480",
    "end": "2462839"
  },
  {
    "text": "bits that you really need to pay attention to um so that's kind of my rundown of",
    "start": "2462839",
    "end": "2469440"
  },
  {
    "text": "Tink um and its um various features so does anyone have any",
    "start": "2469440",
    "end": "2475560"
  },
  {
    "text": "questions I don't know if we have a mic by the way but yeah anyone have any",
    "start": "2475560",
    "end": "2481119"
  },
  {
    "text": "questions yes I was wondering why do you think the older libraries were so much",
    "start": "2481119",
    "end": "2486680"
  },
  {
    "text": "worse than what's out now why were the older libraries so much worse than",
    "start": "2486680",
    "end": "2491920"
  },
  {
    "text": "what's out now um so I think it it's because we just didn't know any better",
    "start": "2491920",
    "end": "2498079"
  },
  {
    "text": "back then really um so cryptography was still kind of developing you know a lot",
    "start": "2498079",
    "end": "2503359"
  },
  {
    "text": "of these libraries were designed in kind of like the 90s and early 2000s where you know the main reference for",
    "start": "2503359",
    "end": "2510119"
  },
  {
    "text": "cryptography was things like Bruce scher's applied cryptography book which is I like Bruce schne but that book is",
    "start": "2510119",
    "end": "2516880"
  },
  {
    "text": "really dated and it's kind of like loads of people still reference it now but it's basically how to build an old style",
    "start": "2516880",
    "end": "2523119"
  },
  {
    "text": "Library as a book you know it's like here are 5,000 algorithms that you could",
    "start": "2523119",
    "end": "2528400"
  },
  {
    "text": "Implement aren't they cool um yeah and so um yeah I think that was just the",
    "start": "2528400",
    "end": "2534920"
  },
  {
    "text": "sign of the times that we just really didn't know um like authenticate encryption right it didn't it it wasn't",
    "start": "2534920",
    "end": "2541640"
  },
  {
    "text": "really considered a thing until later um",
    "start": "2541640",
    "end": "2547599"
  },
  {
    "text": "any other",
    "start": "2547599",
    "end": "2550040"
  },
  {
    "text": "questions okay when you get extra coffee time then all right",
    "start": "2553200",
    "end": "2560480"
  }
]