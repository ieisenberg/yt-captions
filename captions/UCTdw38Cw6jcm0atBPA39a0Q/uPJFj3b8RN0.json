[
  {
    "start": "0",
    "end": "340000"
  },
  {
    "text": "all right it's time to go um welcome uh to this presentation asynchronous iio",
    "start": "6319",
    "end": "12480"
  },
  {
    "text": "and co- routines for smooth data streaming I'm afraid I was a heck of a",
    "start": "12480",
    "end": "18880"
  },
  {
    "text": "lot more optimistic when I wrote The Proposal than I am right now so you may feel a little bit deceived at the end of",
    "start": "18880",
    "end": "24039"
  },
  {
    "text": "the presentation apologies I'm JN fer uh I work for net",
    "start": "24039",
    "end": "31840"
  },
  {
    "text": "Insight in Stockholm we do well the clu is in the name we do Network stuff like",
    "start": "31840",
    "end": "38559"
  },
  {
    "text": "this switch there or like those I have no idea how many CPUs are",
    "start": "38559",
    "end": "44520"
  },
  {
    "text": "on these every plug-in board has at least two CPUs and at least one fpj each",
    "start": "44520",
    "end": "50360"
  },
  {
    "text": "they communicate internally with the Redundant ethernet and then we combine them in",
    "start": "50360",
    "end": "58000"
  },
  {
    "text": "turn into large Network uh Network media companies like TV",
    "start": "58000",
    "end": "63680"
  },
  {
    "text": "broadcasters Etc absolutely love these plugin pleth of cameras from a sports",
    "start": "63680",
    "end": "70240"
  },
  {
    "text": "arena send the video streams to Studios and so",
    "start": "70240",
    "end": "75439"
  },
  {
    "text": "on we do everything my beard is getting to the",
    "start": "75439",
    "end": "81960"
  },
  {
    "text": "mic we do everything we we design the mechanics we do the electronics write the FP PJ",
    "start": "81960",
    "end": "90320"
  },
  {
    "text": "code lowlevel software uh networking protocols Network",
    "start": "90320",
    "end": "96799"
  },
  {
    "text": "Management Systems the lot so and we also",
    "start": "96799",
    "end": "102280"
  },
  {
    "text": "do uh cloud-based streaming which I have a little bit more difficult time",
    "start": "102280",
    "end": "108640"
  },
  {
    "text": "visualizing what that actually means incidentally we are hiring come talk to me afterwards if you're if you think",
    "start": "108640",
    "end": "114799"
  },
  {
    "text": "that sounds like a cool thing to work with anyway back to",
    "start": "114799",
    "end": "120280"
  },
  {
    "text": "this asynchronous iio and co- routine so in C++ 20 we sort of kind of got co-",
    "start": "120280",
    "end": "128560"
  },
  {
    "text": "routines it's it's there in the language everything is needed to to work with Co routines it's there but there is no",
    "start": "128560",
    "end": "135720"
  },
  {
    "text": "support in the library which makes things should we say painful",
    "start": "135720",
    "end": "142080"
  },
  {
    "text": "maybe uh and if you work on Linux which I do you if you have a reasonably recent",
    "start": "142080",
    "end": "149000"
  },
  {
    "text": "Linux kernel you have IOU ring which is a a technique for doing asynchronous iio",
    "start": "149000",
    "end": "160519"
  },
  {
    "text": "uh that is very low overhead and uh with",
    "start": "160519",
    "end": "166000"
  },
  {
    "text": "without needing to wait too much and copy data too much so I",
    "start": "166000",
    "end": "173280"
  },
  {
    "text": "thought wait a minute this this is great something something that just provides",
    "start": "173280",
    "end": "180239"
  },
  {
    "text": "me with an asynchronous source of information that I can consume and co- routines that can just sort of loop over",
    "start": "180239",
    "end": "189080"
  },
  {
    "text": "these in several instances in parallel that is absolutely amazing I want to investigate this so",
    "start": "189080",
    "end": "196040"
  },
  {
    "text": "did so let's have a look at how networking in Linux is typically",
    "start": "196040",
    "end": "202159"
  },
  {
    "text": "made we well if you just listen to one socket",
    "start": "202159",
    "end": "207560"
  },
  {
    "text": "then then it's easy then you just have a for Loop and you do reads on that one but if you have more than one source you",
    "start": "207560",
    "end": "214599"
  },
  {
    "text": "probably use select or poll or E if you're modern uh to register the the",
    "start": "214599",
    "end": "221560"
  },
  {
    "text": "file descript that you want to react on when when any of those function codes says that hey data is ready for you then",
    "start": "221560",
    "end": "227680"
  },
  {
    "text": "you do a read or receive or receive message or receive multi",
    "start": "227680",
    "end": "233280"
  },
  {
    "text": "message and corresponding to send and there are two problems with this one",
    "start": "233280",
    "end": "240840"
  },
  {
    "text": "one is the classic call back hell you you must register something",
    "start": "240840",
    "end": "247239"
  },
  {
    "text": "that reacts to this asynchronous event and and do something um and also they are",
    "start": "247239",
    "end": "255280"
  },
  {
    "text": "sequential sequentialized in unfortunate ways so",
    "start": "255280",
    "end": "262120"
  },
  {
    "text": "typically you find yourself writing something like this as an example a polar",
    "start": "262120",
    "end": "268440"
  },
  {
    "text": "that you can can register file descriptors and something that does work",
    "start": "268440",
    "end": "275080"
  },
  {
    "text": "when data becomes available uh and then a wait function",
    "start": "275080",
    "end": "280479"
  },
  {
    "text": "that does just that it waits for some data to become available when it does you read them and you do some",
    "start": "280479",
    "end": "289440"
  },
  {
    "text": "work um You probably don't have a, 1500",
    "start": "289440",
    "end": "294680"
  },
  {
    "text": "bytes buffer on the stack you probably have some memory pool but",
    "start": "294680",
    "end": "300199"
  },
  {
    "text": "let's keep the example simple 1500 by the way is uh used",
    "start": "300199",
    "end": "307440"
  },
  {
    "text": "because what I work with is uh like I mentioned streaming of a video Services",
    "start": "307440",
    "end": "314080"
  },
  {
    "text": "video streaming Protocols are almost always based on",
    "start": "314080",
    "end": "319440"
  },
  {
    "text": "UDP because it's easier to just write something on top of UDP than to write a new IP",
    "start": "319440",
    "end": "326280"
  },
  {
    "text": "protocol and the traditional Max size for the payload is on UDP is 1500 bytes",
    "start": "326280",
    "end": "332039"
  },
  {
    "text": "so that's sort of where that magic number comes from so yeah this",
    "start": "332039",
    "end": "340160"
  },
  {
    "text": "works so what happens is you call",
    "start": "340160",
    "end": "346319"
  },
  {
    "text": "pole data comes in from the from the IP stack fills",
    "start": "346319",
    "end": "352280"
  },
  {
    "text": "some buffer that belongs to the IP stack when when the buffer is filled",
    "start": "352280",
    "end": "358639"
  },
  {
    "text": "you you get notified that PO is done data is ready so you can",
    "start": "358639",
    "end": "364319"
  },
  {
    "text": "copy it up to your buffer and then the E kernal can start working again while you process your",
    "start": "364319",
    "end": "370400"
  },
  {
    "text": "data and then you can pull again waiting for the next and you get this as a",
    "start": "370400",
    "end": "375759"
  },
  {
    "text": "minimum you get uh system calls for everything you read and you",
    "start": "375759",
    "end": "383400"
  },
  {
    "text": "get copying of data which can be expensive whether that",
    "start": "383400",
    "end": "389840"
  },
  {
    "text": "cost is uh prohibitive for you or not that depends entirely on what it is you",
    "start": "389840",
    "end": "395800"
  },
  {
    "text": "do so we can we can have a look at what happens when we do",
    "start": "395800",
    "end": "401479"
  },
  {
    "text": "this so I have a very simple program I have this",
    "start": "409160",
    "end": "415199"
  },
  {
    "text": "polar exactly the one you you saw so my main is on I'm just",
    "start": "415199",
    "end": "422080"
  },
  {
    "text": "opening on on Local Host P Port 4000 and 401",
    "start": "422080",
    "end": "428160"
  },
  {
    "text": "and to the polar I add for Port 4,000 I'm just calculating the",
    "start": "428160",
    "end": "435240"
  },
  {
    "text": "sum of number of packets and the sum of the bytes in the packets it's nothing",
    "start": "435240",
    "end": "440319"
  },
  {
    "text": "exciting and as soon as something arrives on Port 4,1 we we print them all print print the",
    "start": "440319",
    "end": "447240"
  },
  {
    "text": "information and then call it a day so maybe not the most exciting",
    "start": "447240",
    "end": "453039"
  },
  {
    "text": "networking program ever written but",
    "start": "453039",
    "end": "457639"
  },
  {
    "text": "something so for these examples I'm using G+ plus 11 by the way uh because",
    "start": "461879",
    "end": "467280"
  },
  {
    "text": "it well it's definitely not needed for this example but it has everything needed for the co- routines",
    "start": "467280",
    "end": "475159"
  },
  {
    "text": "later so if I run this to S Trace to see the the system",
    "start": "477360",
    "end": "482440"
  },
  {
    "text": "calls we see the call to pull here and we're we're stuck waiting for something to",
    "start": "482440",
    "end": "490520"
  },
  {
    "text": "happen uh there we are almost this is something if you if you didn't know this",
    "start": "496159",
    "end": "502400"
  },
  {
    "text": "uh this is cool bash the shell bash has pseudo devices",
    "start": "502400",
    "end": "509759"
  },
  {
    "text": "uh for UDP so in this case I'm writing the string Fu to UDP Port 4,000 on Local",
    "start": "509759",
    "end": "516080"
  },
  {
    "text": "Host that is kind of neat so if I do that we see Paul was released",
    "start": "516080",
    "end": "523320"
  },
  {
    "text": "read the string Fu with the with the Line Feed can do another one nothing too",
    "start": "523320",
    "end": "529240"
  },
  {
    "text": "exciting go to 401 and and we're done and we see that yeah we two packets and",
    "start": "529240",
    "end": "535279"
  },
  {
    "text": "the sum of all bites was 688 all right",
    "start": "535279",
    "end": "541200"
  },
  {
    "start": "540000",
    "end": "825000"
  },
  {
    "text": "enter IOU ring I ring is a shared memory data",
    "start": "543399",
    "end": "549120"
  },
  {
    "text": "structure shared between your your process or actually your thread and uh",
    "start": "549120",
    "end": "555240"
  },
  {
    "text": "and the kernel you can have one uring instance per thread in a in a Linux",
    "start": "555240",
    "end": "562160"
  },
  {
    "text": "process uh and the important bits there are the submission q and the completion",
    "start": "562160",
    "end": "568240"
  },
  {
    "text": "Q so on the submission queue you you submit work that you want it to do and",
    "start": "568240",
    "end": "575079"
  },
  {
    "text": "the completion cue is how it tells you that yeah I'm done and the it's up to you to decide",
    "start": "575079",
    "end": "582880"
  },
  {
    "text": "how large you want these cues to be how many operations you want to have pending",
    "start": "582880",
    "end": "589320"
  },
  {
    "text": "at the same time and this works primarily or maybe only I'm not sure on",
    "start": "589320",
    "end": "595320"
  },
  {
    "text": "the IP stack or the file system I made the mistake of registering",
    "start": "595320",
    "end": "601200"
  },
  {
    "text": "reads from standard in and it did really not work well didn't fail mind it just",
    "start": "601200",
    "end": "607600"
  },
  {
    "text": "didn't work error handling that is great uh it has two apis a lowlevel API I",
    "start": "607600",
    "end": "614240"
  },
  {
    "text": "wouldn't really call it an API at all because what it is is a description of this Lock Free shared memory data",
    "start": "614240",
    "end": "620640"
  },
  {
    "text": "structure and how you are supposed to manipulate it and please please don't ruin the world while you're at it uh or",
    "start": "620640",
    "end": "627480"
  },
  {
    "text": "you can use the so-called high level AP I which in my opinion is very low level but it's at least a a set of functions",
    "start": "627480",
    "end": "634880"
  },
  {
    "text": "that you can call that is good so I'm using the high level API liur",
    "start": "634880",
    "end": "644320"
  },
  {
    "text": "ring. and what you do is you you create an instance this is a c API obviously",
    "start": "644320",
    "end": "650000"
  },
  {
    "text": "you create an instance and initialize it the number eight there is the size of of",
    "start": "650000",
    "end": "655320"
  },
  {
    "text": "these cues how many operations I want to have maximum pending at any one",
    "start": "655320",
    "end": "662839"
  },
  {
    "text": "time and then when you want something to be done you you say get a submission Q",
    "start": "663079",
    "end": "669399"
  },
  {
    "text": "entry for me fill it in with what operation in this case I want to prepare a",
    "start": "669399",
    "end": "674800"
  },
  {
    "text": "read on this entry for this file descriptor and the pointer and size say",
    "start": "674800",
    "end": "681040"
  },
  {
    "text": "where the data area to get the the the packet payload",
    "start": "681040",
    "end": "688040"
  },
  {
    "text": "into and then you call this set data to",
    "start": "688040",
    "end": "693160"
  },
  {
    "text": "associate something with it because you you can have like I said you can have",
    "start": "693160",
    "end": "698560"
  },
  {
    "text": "several uh several submissions pending at the",
    "start": "698560",
    "end": "704200"
  },
  {
    "text": "same time and when when one finishes you want to know what what work was this that was done and you you use this set",
    "start": "704200",
    "end": "711079"
  },
  {
    "text": "data to associate something with it whatever you do is up to you it doesn't care you have 64 bits use them wisely",
    "start": "711079",
    "end": "720800"
  },
  {
    "text": "and then you wait you you say I'm standing here until I get",
    "start": "721480",
    "end": "729279"
  },
  {
    "text": "something and when I get something fill it in this entry and then you can look",
    "start": "729279",
    "end": "734399"
  },
  {
    "text": "at the the data to find whatever you associated with it and it will either hold a an error message error",
    "start": "734399",
    "end": "742440"
  },
  {
    "text": "information actually or no number or the size of the the number of that were",
    "start": "742440",
    "end": "751120"
  },
  {
    "text": "processed well that's pretty much it so you write",
    "start": "751120",
    "end": "756199"
  },
  {
    "text": "something similar to the polar you write a ring where you can add work or",
    "start": "756199",
    "end": "761880"
  },
  {
    "text": "wait uh but things are a little bit different since we need to provide already at the before any job is done",
    "start": "761880",
    "end": "769440"
  },
  {
    "text": "you need to provide the data area so I have this readwork struct that holds",
    "start": "769440",
    "end": "776440"
  },
  {
    "text": "the the call back to to send when something happens and and an array of the magical 1500",
    "start": "776440",
    "end": "783880"
  },
  {
    "text": "bytes as mentioned you probably want some kind of message pool or whatever",
    "start": "783880",
    "end": "789160"
  },
  {
    "text": "but let's keep the example simple so when we add something we create one of",
    "start": "789160",
    "end": "794880"
  },
  {
    "text": "these work structs Store the store the call back in the file",
    "start": "794880",
    "end": "801920"
  },
  {
    "text": "descriptor get a submission queue entry and prepare a read and that's pretty much it then",
    "start": "801920",
    "end": "810199"
  },
  {
    "text": "then we are ready",
    "start": "810199",
    "end": "816040"
  },
  {
    "text": "uh yeah I had actually prepared those things for what I just said",
    "start": "817600",
    "end": "822959"
  },
  {
    "text": "excellent okay so what happens then if we if we look at it from a high level",
    "start": "822959",
    "end": "829720"
  },
  {
    "start": "825000",
    "end": "875000"
  },
  {
    "text": "perspective is that we we already have the data buffers ready before we even do any",
    "start": "829720",
    "end": "835720"
  },
  {
    "text": "calls and then the the kernel will start filling something in we get notified",
    "start": "835720",
    "end": "843079"
  },
  {
    "text": "that it is ready so the kernel starts filling in the next one while we are processing this one and then when we're",
    "start": "843079",
    "end": "849600"
  },
  {
    "text": "done processing it we can get a notification that the previous one was",
    "start": "849600",
    "end": "854759"
  },
  {
    "text": "now filled and we sort of get a multi-threaded effect here actually not",
    "start": "854759",
    "end": "860959"
  },
  {
    "text": "sort of we do but we have not written a multi-threaded program we are multi-threaded between our process and",
    "start": "860959",
    "end": "868160"
  },
  {
    "text": "the kernel so that is neat uh and there are actually a fewer",
    "start": "868160",
    "end": "875120"
  },
  {
    "start": "875000",
    "end": "1200000"
  },
  {
    "text": "system calls I I'll show you and better",
    "start": "875120",
    "end": "880519"
  },
  {
    "text": "performance which is easily demonstr demonstratable is that how you said uh",
    "start": "880519",
    "end": "888079"
  },
  {
    "text": "so if we look at the",
    "start": "888079",
    "end": "893480"
  },
  {
    "text": "urome of this ring structure in",
    "start": "893480",
    "end": "900040"
  },
  {
    "text": "initialize it and the exit Went",
    "start": "900040",
    "end": "905399"
  },
  {
    "text": "Done the work how to add work wait is way more",
    "start": "905399",
    "end": "911160"
  },
  {
    "text": "complicated because we wait for an entry and then get our uh struct to identify what",
    "start": "911160",
    "end": "919040"
  },
  {
    "text": "happens so we can call the call back then we Mark via entry as scene this tells the uring that okay",
    "start": "919040",
    "end": "925880"
  },
  {
    "text": "this data is now available to to use again but we also need to get an entry and prepare the next",
    "start": "925880",
    "end": "933000"
  },
  {
    "text": "read because every operation you do is fire and forget you you say I want to read one",
    "start": "933000",
    "end": "939000"
  },
  {
    "text": "packet and then I want to read another packet and then I want to read another packet so we have to do",
    "start": "939000",
    "end": "945639"
  },
  {
    "text": "these continuously and then I can also once it says something is available I",
    "start": "945639",
    "end": "951240"
  },
  {
    "text": "can use this peak CU which never ever uh pauses execution it just says just looks",
    "start": "951240",
    "end": "959199"
  },
  {
    "text": "into this sh memory data structure and say okay there's one more okay let's let's do with that one also and we can",
    "start": "959199",
    "end": "965319"
  },
  {
    "text": "keep keep",
    "start": "965319",
    "end": "968040"
  },
  {
    "text": "going",
    "start": "973360",
    "end": "976360"
  },
  {
    "text": "so if we do this it will be extremely uninteresting but I'm doing it anyway",
    "start": "981680",
    "end": "987759"
  },
  {
    "text": "because I'm an evil person and want to borrow you so we see we get two calls",
    "start": "987759",
    "end": "992800"
  },
  {
    "text": "when I pa a message one one to get into the",
    "start": "992800",
    "end": "999079"
  },
  {
    "text": "queue to submit the the uh request and",
    "start": "999079",
    "end": "1004399"
  },
  {
    "text": "then we are po so then there's one more where we actually do",
    "start": "1004399",
    "end": "1010160"
  },
  {
    "text": "something [Music] so okay so we get two system calls for",
    "start": "1010880",
    "end": "1016199"
  },
  {
    "text": "every every message anyway what's so interesting about that well we can",
    "start": "1016199",
    "end": "1023199"
  },
  {
    "text": "do we can maybe raise the data rate a bit I'm not super FAL",
    "start": "1023199",
    "end": "1028760"
  },
  {
    "text": "typer so s trace the C is interesting what it",
    "start": "1028760",
    "end": "1034120"
  },
  {
    "text": "does is um it just shows you a summary of all",
    "start": "1034120",
    "end": "1040240"
  },
  {
    "text": "system calls made and how many of them and now I can",
    "start": "1040240",
    "end": "1045880"
  },
  {
    "text": "use this other really useful tool nping nping we say so that ke just be",
    "start": "1045880",
    "end": "1056559"
  },
  {
    "text": "quiet Center UDP Port 4,000 rate 1,000 rate 1,000 means",
    "start": "1056559",
    "end": "1062400"
  },
  {
    "text": "uh is actually means don't do any rate limiting send the messages as fast as",
    "start": "1062400",
    "end": "1068679"
  },
  {
    "text": "you ever can uh every package should be, 1400 by send them to Local Host and then when we",
    "start": "1068679",
    "end": "1075080"
  },
  {
    "text": "have done this for this count 20,000 messages then we send to 401 to exit the program",
    "start": "1075080",
    "end": "1083880"
  },
  {
    "text": "so we can do that all right so what can we",
    "start": "1083880",
    "end": "1089400"
  },
  {
    "text": "see package received 6,000 I sent 20,000 so this program is a little bit",
    "start": "1089400",
    "end": "1096520"
  },
  {
    "text": "too slow actually and we see little less than 6 and a half",
    "start": "1096520",
    "end": "1101840"
  },
  {
    "text": "thousand calls to read on two poll each that that is expected h",
    "start": "1101840",
    "end": "1109240"
  },
  {
    "text": "you can make this a little bit faster by instead of using read you can use receive multi message",
    "start": "1109240",
    "end": "1116320"
  },
  {
    "text": "but uh it's still at least one system call per file descriptor let's do the same with",
    "start": "1116320",
    "end": "1124520"
  },
  {
    "text": "u with the",
    "start": "1124520",
    "end": "1127799"
  },
  {
    "text": "urine we lost some packets but not a heck of a lot compared",
    "start": "1132919",
    "end": "1138240"
  },
  {
    "text": "to what was before and 5,265 system calls",
    "start": "1138240",
    "end": "1143480"
  },
  {
    "text": "to IOU ring that is roughly one in four",
    "start": "1143480",
    "end": "1151799"
  },
  {
    "text": "roughly and uh that can actually be seen why",
    "start": "1151799",
    "end": "1156840"
  },
  {
    "text": "here because I sort of cheated and said yeah I actually want four entries for",
    "start": "1156840",
    "end": "1163720"
  },
  {
    "text": "this port pending at all times so",
    "start": "1163720",
    "end": "1169600"
  },
  {
    "text": "if I'm not fast enough to to grab the first one when it when it comes it it will start filling in the next one and",
    "start": "1169600",
    "end": "1175360"
  },
  {
    "text": "the next one and then I'm stand I'll start reading them uh and it will start filling in the the other ones so you",
    "start": "1175360",
    "end": "1182880"
  },
  {
    "text": "don't get a a lot of interaction here between the the kernel and your program",
    "start": "1182880",
    "end": "1188320"
  },
  {
    "text": "so this is this is",
    "start": "1188320",
    "end": "1192200"
  },
  {
    "text": "fast so how ring is good",
    "start": "1193880",
    "end": "1200360"
  },
  {
    "start": "1200000",
    "end": "1253000"
  },
  {
    "text": "let's pause them for a while time to change topic",
    "start": "1201720",
    "end": "1207600"
  },
  {
    "text": "coroutines cortines offers a way to write asynchronous code as if as if they",
    "start": "1207600",
    "end": "1212960"
  },
  {
    "text": "were continuous Loops all right cool and we have",
    "start": "1212960",
    "end": "1218360"
  },
  {
    "text": "language support since 20 and what happens is that compiler",
    "start": "1218360",
    "end": "1224480"
  },
  {
    "text": "uses magic to convert the code you have written into something that is completely different via types that you",
    "start": "1224480",
    "end": "1231720"
  },
  {
    "text": "must write that you must write that is an important bit and they are",
    "start": "1231720",
    "end": "1238159"
  },
  {
    "text": "mind-bogglingly hard to understand I tore my hair out when I",
    "start": "1238159",
    "end": "1245840"
  },
  {
    "text": "wrote it and the standard Library does not help really it",
    "start": "1245840",
    "end": "1252720"
  },
  {
    "text": "doesn't so what happens then if we say that these are two co-routine loops",
    "start": "1252720",
    "end": "1260600"
  },
  {
    "text": "we can say that the the one to the right it's it suspends its execution the one to the left computes",
    "start": "1260679",
    "end": "1268440"
  },
  {
    "text": "some X and then it suspends its execution resumes execution to the right with this",
    "start": "1268440",
    "end": "1275799"
  },
  {
    "text": "computed X so that it can do some work with it and when it's done it can",
    "start": "1275799",
    "end": "1280840"
  },
  {
    "text": "suspend its execution hand over to the one to the left to resume its execution compute an another X",
    "start": "1280840",
    "end": "1288880"
  },
  {
    "text": "spend its execution resume the one to the right that can receive the X and do",
    "start": "1288880",
    "end": "1294840"
  },
  {
    "text": "something with it and so on and the",
    "start": "1294840",
    "end": "1300159"
  },
  {
    "start": "1299000",
    "end": "1539000"
  },
  {
    "text": "way this happens is like I said compiler magic so we have a CO routine that looks",
    "start": "1300159",
    "end": "1306520"
  },
  {
    "text": "like this my co takes an inex and Y and a",
    "start": "1306520",
    "end": "1312559"
  },
  {
    "text": "source we have a loop and that's where you co overweight from the source and as",
    "start": "1312559",
    "end": "1318679"
  },
  {
    "text": "as we get a non-zero value we just add something to the result and then we return and we",
    "start": "1318679",
    "end": "1326159"
  },
  {
    "text": "create something this cororo OB a coroutine return object from by",
    "start": "1326159",
    "end": "1331679"
  },
  {
    "text": "calling my cororo with some values and uh this",
    "start": "1331679",
    "end": "1338880"
  },
  {
    "text": "source and what the compiler does it when it starts compiling this and it Sayes oh co",
    "start": "1338880",
    "end": "1345559"
  },
  {
    "text": "wait I know what you're up to you're writing a c routin cool so it re writes",
    "start": "1345559",
    "end": "1351120"
  },
  {
    "text": "it sort of kind of like this I'm actually lying a lot now but something",
    "start": "1351120",
    "end": "1357240"
  },
  {
    "text": "like a class that takes these local variables as member",
    "start": "1357240",
    "end": "1365240"
  },
  {
    "text": "variables and then calls in this case an operator function call with the values say",
    "start": "1365240",
    "end": "1371200"
  },
  {
    "text": "appear and then we have a functional return result and the the last line is",
    "start": "1371200",
    "end": "1377240"
  },
  {
    "text": "it actually creates some something on the Heap for us with the source and we get",
    "start": "1377240",
    "end": "1385720"
  },
  {
    "text": "something a little bit magical that looks something like the the type that",
    "start": "1385720",
    "end": "1391240"
  },
  {
    "text": "we have written and it's really not this simple but it it sort of works as an entry",
    "start": "1391240",
    "end": "1397080"
  },
  {
    "text": "level mental model that your co- routine becomes an object allocated on the Heap and it is called with new values as you",
    "start": "1397080",
    "end": "1404720"
  },
  {
    "text": "co await values",
    "start": "1404720",
    "end": "1408600"
  },
  {
    "text": "the issue here is that we must write this",
    "start": "1409960",
    "end": "1415120"
  },
  {
    "text": "type and this type because this is something that we can",
    "start": "1415120",
    "end": "1420799"
  },
  {
    "text": "Coit uh so these types are if you read the what little Library",
    "start": "1420799",
    "end": "1429039"
  },
  {
    "text": "support there exists and some standard text you find that they they are usually",
    "start": "1429039",
    "end": "1434960"
  },
  {
    "text": "called co-routine return object which is",
    "start": "1434960",
    "end": "1440039"
  },
  {
    "text": "not super descriptive uh most blog posts and presentations I've seen they they tend",
    "start": "1440039",
    "end": "1446440"
  },
  {
    "text": "to call them talks so I'm I'm sticking with task whether I like it or not just",
    "start": "1446440",
    "end": "1452039"
  },
  {
    "text": "to not add more confusion uh so a task will look",
    "start": "1452039",
    "end": "1458799"
  },
  {
    "text": "something like this we have a promise type it must",
    "start": "1458799",
    "end": "1464200"
  },
  {
    "text": "exist and it is not stood promise it's absolutely not to promise because why",
    "start": "1464200",
    "end": "1469640"
  },
  {
    "text": "not take a chance to confuse matters uh and of course we have to write the",
    "start": "1469640",
    "end": "1476600"
  },
  {
    "text": "promise type ourselves go figure uh and our task object is Created",
    "start": "1476600",
    "end": "1483679"
  },
  {
    "text": "from a promise object that is allocated for us by",
    "start": "1483679",
    "end": "1490399"
  },
  {
    "text": "compiler magic and we must take care of its",
    "start": "1490399",
    "end": "1496799"
  },
  {
    "text": "lifetime and it's nowhere near as simple that you can just delete it because if you do",
    "start": "1496799",
    "end": "1502679"
  },
  {
    "text": "that things will go bad don't do that no you you can use a coroutine deleter that",
    "start": "1502679",
    "end": "1510279"
  },
  {
    "text": "uses the support from the library to say that I want a co- routine handle to This",
    "start": "1510279",
    "end": "1517720"
  },
  {
    "text": "Promise type so you so you get this you say hey I have this promise give me the",
    "start": "1517720",
    "end": "1523799"
  },
  {
    "text": "coroutine handle for it and destroy the coroutine handle pretty please",
    "start": "1523799",
    "end": "1529000"
  },
  {
    "text": "uh and then you're You' sort of ended the life of the",
    "start": "1529000",
    "end": "1534919"
  },
  {
    "text": "cortine that was an afternoon gone uh and yeah the promise type we",
    "start": "1535720",
    "end": "1542480"
  },
  {
    "start": "1539000",
    "end": "1805000"
  },
  {
    "text": "have to write the promise type too there's uh there's a lot of ritual in writing a promise",
    "start": "1542480",
    "end": "1548760"
  },
  {
    "text": "type they must look sort of like this you you must have this function called",
    "start": "1548760",
    "end": "1555640"
  },
  {
    "text": "get return object and this is the one that creates a task from the from the",
    "start": "1555640",
    "end": "1562640"
  },
  {
    "text": "promise uh initial suspend and final suspend must exist they usually don't have anybody at all they just return and",
    "start": "1562640",
    "end": "1569399"
  },
  {
    "text": "a suspend never or a suspend always and what they do is pretty much what the",
    "start": "1569399",
    "end": "1575080"
  },
  {
    "text": "name says here are actually functions that are not part of the ritual these are",
    "start": "1575080",
    "end": "1581039"
  },
  {
    "text": "convenience functions that I have decided to write for to make my life a little bit less miserable",
    "start": "1581039",
    "end": "1588840"
  },
  {
    "text": "we have a continuation here the the next co- routine the the co- routine that is",
    "start": "1589320",
    "end": "1596000"
  },
  {
    "text": "waiting for something to come into this",
    "start": "1596000",
    "end": "1600919"
  },
  {
    "text": "promise and the way you do this is you have this function yield value",
    "start": "1601600",
    "end": "1609039"
  },
  {
    "text": "that you give it a a value saying I want you to store this value in in the",
    "start": "1609039",
    "end": "1615000"
  },
  {
    "text": "promise uh I'm using a stood optional here yeah I should mention that I'm cheating a lot here I'm writing the",
    "start": "1615000",
    "end": "1621880"
  },
  {
    "text": "absolute minimum that compiles and does the job but it's you really want more if",
    "start": "1621880",
    "end": "1628039"
  },
  {
    "text": "you want to want to use cor for for real so for example this function UNH",
    "start": "1628039",
    "end": "1634600"
  },
  {
    "text": "handled exception I'm just ignoring it's it's there it's empty it doesn't do anything if anything",
    "start": "1634600",
    "end": "1640960"
  },
  {
    "text": "throws exceptions in here bad things will happen don't do this so",
    "start": "1640960",
    "end": "1646320"
  },
  {
    "text": "um I usually always always post the example codes I use for presentations on",
    "start": "1646320",
    "end": "1652559"
  },
  {
    "text": "GitHub I will not do this here because I don't want you to reuse them this is just the minimum",
    "start": "1652559",
    "end": "1659039"
  },
  {
    "text": "to to show what I want to show today the interesting bit is the",
    "start": "1659039",
    "end": "1665200"
  },
  {
    "text": "highlighted part there the bold face part continuation resume so after we",
    "start": "1665200",
    "end": "1671080"
  },
  {
    "text": "have entered the value we say resume this",
    "start": "1671080",
    "end": "1676600"
  },
  {
    "text": "ctin that that was waiting for information here and then in the Tas we have this",
    "start": "1676600",
    "end": "1683120"
  },
  {
    "text": "operator Co weight when you when you see Co await x what happens is that under",
    "start": "1683120",
    "end": "1690200"
  },
  {
    "text": "the hood is a it's a call to x. operator Co",
    "start": "1690200",
    "end": "1696039"
  },
  {
    "text": "await and it returns an awaitable that communicates with the with the promise",
    "start": "1696519",
    "end": "1703640"
  },
  {
    "text": "that belongs to the task and also here a little bit of ritual we need this weight ready that",
    "start": "1703640",
    "end": "1711840"
  },
  {
    "text": "typically just queries the the promise to say do you hold a value or",
    "start": "1711840",
    "end": "1717840"
  },
  {
    "text": "not and a weight suspend is when you decide that no actually the promise does",
    "start": "1717840",
    "end": "1723880"
  },
  {
    "text": "not have a value so could you please stop running right",
    "start": "1723880",
    "end": "1728960"
  },
  {
    "text": "now so we get a co- routine handle that we store in the",
    "start": "1728960",
    "end": "1735799"
  },
  {
    "text": "continuation and some of you may see horns growing up on your forehead here and say wait a minute do I need to store",
    "start": "1735799",
    "end": "1743519"
  },
  {
    "text": "the the continuation in the promise can I squirel them away somewhere in a",
    "start": "1743519",
    "end": "1750679"
  },
  {
    "text": "Cooperative Schuler maybe and yeah you you can and I'm sure",
    "start": "1750679",
    "end": "1757519"
  },
  {
    "text": "a lot will do that and I'm sure a few of them will actually create something",
    "start": "1757519",
    "end": "1763360"
  },
  {
    "text": "awesome and the rest will cause an incredible mess for their colleagues",
    "start": "1763360",
    "end": "1769679"
  },
  {
    "text": "so I I stick with doing it simple say that there is one or no kurtines waiting",
    "start": "1770799",
    "end": "1777799"
  },
  {
    "text": "for something on on a promise I have my promise do",
    "start": "1777799",
    "end": "1784200"
  },
  {
    "text": "continuation and finally something to actually get the value from the",
    "start": "1784519",
    "end": "1789600"
  },
  {
    "text": "promise and this one does it reads the value from I stor it in an optional so",
    "start": "1789600",
    "end": "1795200"
  },
  {
    "text": "just read the value from the optional clear the optional value uh to to make it empty",
    "start": "1795200",
    "end": "1804240"
  },
  {
    "text": "again so let's try to to see what happens when",
    "start": "1804240",
    "end": "1810760"
  },
  {
    "start": "1805000",
    "end": "2099000"
  },
  {
    "text": "we try to write and use a CO",
    "start": "1810760",
    "end": "1815720"
  },
  {
    "text": "routine we can ignore these helpers that help me be sayane uh this is all the",
    "start": "1822440",
    "end": "1829279"
  },
  {
    "text": "same as you saw except that I instrumented it with several tracers",
    "start": "1829279",
    "end": "1835360"
  },
  {
    "text": "that just to to show what is happening here so we can see when we get a call to get return",
    "start": "1835360",
    "end": "1842159"
  },
  {
    "text": "object initial suspend Etc uh",
    "start": "1842159",
    "end": "1847679"
  },
  {
    "text": "and the same with the with the task and all its functions but in the end we can do",
    "start": "1847679",
    "end": "1854399"
  },
  {
    "text": "something like this we have some that I choose to call incoming that is a task of ins that we",
    "start": "1854399",
    "end": "1863039"
  },
  {
    "text": "make and make really just does it's a static function that returns",
    "start": "1863039",
    "end": "1869279"
  },
  {
    "text": "a a task and immediately suspends that is the only thing it does so we have",
    "start": "1869279",
    "end": "1876720"
  },
  {
    "text": "something incoming here and we have our print all that is this score routine that",
    "start": "1876720",
    "end": "1882399"
  },
  {
    "text": "just Trace that we enter it read values and print them as they",
    "start": "1882399",
    "end": "1890600"
  },
  {
    "text": "arrive and then we print when we exit and then I have I've done so that on my",
    "start": "1891760",
    "end": "1898679"
  },
  {
    "text": "tasks I I can I can ask for a a reference to the promise so if we call",
    "start": "1898679",
    "end": "1904639"
  },
  {
    "text": "promise yield value it will do all this all all this dance that I that I",
    "start": "1904639",
    "end": "1911559"
  },
  {
    "text": "mentioned so if we're",
    "start": "1911559",
    "end": "1919840"
  },
  {
    "text": "this you can see a lot of things so the first things that happens",
    "start": "1921000",
    "end": "1927440"
  },
  {
    "text": "when we when we call this incoming make we see that it it",
    "start": "1927440",
    "end": "1933279"
  },
  {
    "text": "creates a promise and calls get return object on the promise which creates the the task then",
    "start": "1933279",
    "end": "1941519"
  },
  {
    "text": "it calls initial suspend and then we suspend execution and then we go to the the",
    "start": "1941519",
    "end": "1948240"
  },
  {
    "text": "print all that creates a task for the printer I",
    "start": "1948240",
    "end": "1954480"
  },
  {
    "text": "call the printer uh does the initial suspend which suspends it which does not suspend",
    "start": "1954480",
    "end": "1961639"
  },
  {
    "text": "it sorry it's suspend never we see this print all Tracer and",
    "start": "1961639",
    "end": "1968799"
  },
  {
    "text": "then it goes to co await which means that it calls Co await on the task which",
    "start": "1968799",
    "end": "1974039"
  },
  {
    "text": "calls await ready on the a waiter which calls is is ready on the on the promise",
    "start": "1974039",
    "end": "1979399"
  },
  {
    "text": "and it says zero no I'm not ready sorry so we get an A wait suspend cannot",
    "start": "1979399",
    "end": "1987600"
  },
  {
    "text": "go sorry so now we're back here and call yield",
    "start": "1987600",
    "end": "1994039"
  },
  {
    "text": "value yield value for which calls a weight resume so that the the function",
    "start": "1994200",
    "end": "2000320"
  },
  {
    "text": "can call get on on the promise and the cor can print four and then another",
    "start": "2000320",
    "end": "2008960"
  },
  {
    "text": "Loop and then at the end destruction of all the tasks and",
    "start": "2008960",
    "end": "2014519"
  },
  {
    "text": "Promises what is not visible though is this Trace print all",
    "start": "2014519",
    "end": "2022120"
  },
  {
    "text": "done because I have actually not exited this Loop this you remember this uh mental model",
    "start": "2022120",
    "end": "2029679"
  },
  {
    "text": "simplified image of an object that is created on the Heap where you break the loop such",
    "start": "2029679",
    "end": "2036679"
  },
  {
    "text": "that it is instead the compiler that magically calls a function call Operator what happens is that it was waiting for",
    "start": "2036679",
    "end": "2043480"
  },
  {
    "text": "the compiler to call the function call Operator but it actually didn't it just deleted the object so we never",
    "start": "2043480",
    "end": "2050358"
  },
  {
    "text": "exited this Loop so we didn't see this",
    "start": "2050359",
    "end": "2054799"
  },
  {
    "text": "one no uh if I had some kind of criteria to to exit the loop",
    "start": "2060399",
    "end": "2067960"
  },
  {
    "text": "so for example I could have said that if well a stupid example say it's a magic",
    "start": "2067960",
    "end": "2074398"
  },
  {
    "text": "number if I get a zero I will exit the loop then I will get it um sorry for those who didn't hear",
    "start": "2074399",
    "end": "2080679"
  },
  {
    "text": "the the question was uh if if I had done one more operation if would it then have",
    "start": "2080679",
    "end": "2086839"
  },
  {
    "text": "printed the print all done",
    "start": "2086839",
    "end": "2091399"
  },
  {
    "text": "um that's a heck of a lot of work for not doing much",
    "start": "2092960",
    "end": "2098320"
  },
  {
    "text": "I think but we can go on",
    "start": "2098320",
    "end": "2103480"
  },
  {
    "start": "2099000",
    "end": "2299000"
  },
  {
    "text": "um we can write a a a filter something that a co- routine that takes a",
    "start": "2103480",
    "end": "2110320"
  },
  {
    "text": "predicate and reads values from some task andits and back so what we do we we",
    "start": "2110320",
    "end": "2117920"
  },
  {
    "text": "co wait with values I should probably remove that co- values for every value",
    "start": "2117920",
    "end": "2123240"
  },
  {
    "text": "we call the predicate if the predicate is true we co yield the",
    "start": "2123240",
    "end": "2128320"
  },
  {
    "text": "value and Co yield means to call the yield value member function of the task",
    "start": "2128320",
    "end": "2134400"
  },
  {
    "text": "that is associated with on the promise that is associated with the task",
    "start": "2134400",
    "end": "2141160"
  },
  {
    "text": "so the name yield value on the promise was not entirely",
    "start": "2141160",
    "end": "2147240"
  },
  {
    "text": "arbitrary it is what the compiler will generate code to",
    "start": "2147240",
    "end": "2152520"
  },
  {
    "text": "call so what we can see now is one thing is that that doesn't have to be a",
    "start": "2152520",
    "end": "2158400"
  },
  {
    "text": "onetoone relation between what we get from Co weight and what we hand over",
    "start": "2158400",
    "end": "2163920"
  },
  {
    "text": "with yield we can we can collect several Val values with several co- weight we",
    "start": "2163920",
    "end": "2169400"
  },
  {
    "text": "can actually Co weight from several different sources if we want to but we can only Co Coy yield to our",
    "start": "2169400",
    "end": "2177920"
  },
  {
    "text": "own uh co-routine return object our own task but this is not worthless in any",
    "start": "2177920",
    "end": "2186359"
  },
  {
    "text": "way we can write a a programed like this where we have our incoming as before",
    "start": "2186359",
    "end": "2195000"
  },
  {
    "text": "we we create a we call filter in with this predicate is odd on incoming and we",
    "start": "2195000",
    "end": "2201760"
  },
  {
    "text": "so we get a a a task that we call odd values and then we can call print all on",
    "start": "2201760",
    "end": "2209119"
  },
  {
    "text": "the on the odd values and the print all is the same as you saw before and then we can just do a",
    "start": "2209119",
    "end": "2216560"
  },
  {
    "text": "loop and say call Deal value for all of these so let's let's have a",
    "start": "2216560",
    "end": "2226119"
  },
  {
    "text": "look so you pretty much the same code as you saw before should be exactly the",
    "start": "2234800",
    "end": "2240640"
  },
  {
    "text": "same actually but who knows computers uh",
    "start": "2240640",
    "end": "2248079"
  },
  {
    "text": "and we see the odd values entirely surprising but now",
    "start": "2254680",
    "end": "2260440"
  },
  {
    "text": "something is beginning to happen I think uh writing those tasks those promise",
    "start": "2260440",
    "end": "2266280"
  },
  {
    "text": "types the awaitable is not a lot of fun but this is actually a little bit interesting I",
    "start": "2266280",
    "end": "2274680"
  },
  {
    "text": "think because we we now have two things that would normally be a set of chained callbacks but we're",
    "start": "2274680",
    "end": "2282960"
  },
  {
    "text": "writing them as individual Loops where we get our values and do something with them and hand them over and do",
    "start": "2282960",
    "end": "2289240"
  },
  {
    "text": "something so we're beginning to see that maybe maybe all this work can pay off",
    "start": "2289240",
    "end": "2298040"
  },
  {
    "text": "maybe so let's marry these two together because that's what this",
    "start": "2298880",
    "end": "2304280"
  },
  {
    "start": "2299000",
    "end": "2339000"
  },
  {
    "text": "presentation is about so we have seen how I uring offers asynchronous data and",
    "start": "2304280",
    "end": "2310839"
  },
  {
    "text": "with low overhead uh we have seen that you can call yield value on a co-routine promise",
    "start": "2310839",
    "end": "2318359"
  },
  {
    "text": "to push information through the the co- routine",
    "start": "2318359",
    "end": "2323520"
  },
  {
    "text": "Pipeline and we have seen how to read values from an upstream Co routine with with Co weight and how to pass forward",
    "start": "2323520",
    "end": "2330560"
  },
  {
    "text": "values to further Downstream cortines with Co yield",
    "start": "2330560",
    "end": "2336440"
  },
  {
    "text": "so let's put these together so here's a slight convenience thing uh higher order",
    "start": "2336440",
    "end": "2344680"
  },
  {
    "text": "function two promise that I'm just using to to get a call back that",
    "start": "2344680",
    "end": "2350040"
  },
  {
    "text": "calls uh yield value for packets and since I'm an extremely",
    "start": "2350040",
    "end": "2355520"
  },
  {
    "text": "lazy person I I set just Auto on packets so",
    "start": "2355520",
    "end": "2360680"
  },
  {
    "text": "that I don't have to rewrite the code if I choose to change the signature of my",
    "start": "2360680",
    "end": "2366200"
  },
  {
    "text": "call backs from uh the the ring",
    "start": "2366200",
    "end": "2372800"
  },
  {
    "text": "so we can have something a co- routine we have we we",
    "start": "2373400",
    "end": "2379800"
  },
  {
    "text": "read packets from the uh the socket on Port 400 local",
    "start": "2379800",
    "end": "2385040"
  },
  {
    "text": "4,000 Local Host uh we want to count all the packets because that's a good",
    "start": "2385040",
    "end": "2391000"
  },
  {
    "text": "statistic to have in any networking system so we can write a simple Co routine that takes a a task of span of",
    "start": "2391000",
    "end": "2398440"
  },
  {
    "text": "char because that's what we want the data to be and just Loops over them and",
    "start": "2398440",
    "end": "2404079"
  },
  {
    "text": "updates our two counters the number of packets and the number of bytes in the",
    "start": "2404079",
    "end": "2409760"
  },
  {
    "text": "packets and then we Coy yield it to to send to the to the next level and then actually I don't want to",
    "start": "2409760",
    "end": "2416839"
  },
  {
    "text": "work with spans of uh Char I want to work with strings so I want to convert",
    "start": "2416839",
    "end": "2423160"
  },
  {
    "text": "these to Strings so I have a ctin two string that takes task of span of char",
    "start": "2423160",
    "end": "2431119"
  },
  {
    "text": "and gives me a task of strings so I just Coit these packets that are spans and Co",
    "start": "2431119",
    "end": "2438319"
  },
  {
    "text": "yield the creation of a string from these since begin and end are iterators",
    "start": "2438319",
    "end": "2444319"
  },
  {
    "text": "to to char to conch that works fine to create strings like",
    "start": "2444319",
    "end": "2450680"
  },
  {
    "text": "that and then we saw that when I from the command line used Echo to the",
    "start": "2450680",
    "end": "2458640"
  },
  {
    "text": "pseudo devices in bash we got a pending new line which we don't want so let's strip those we have another Co routine",
    "start": "2458640",
    "end": "2465359"
  },
  {
    "text": "that just takes a task of strings co- we them and as long as they",
    "start": "2465359",
    "end": "2470920"
  },
  {
    "text": "end with a new line we strip them and when there are no new lines remaining we",
    "start": "2470920",
    "end": "2475960"
  },
  {
    "text": "Coy yield the results to posit on and then maybe we want to print",
    "start": "2475960",
    "end": "2482240"
  },
  {
    "text": "these want to work with them in lines so we want to concatenate them to",
    "start": "2482240",
    "end": "2487760"
  },
  {
    "text": "40 characters so now I have a Coe routine that retains",
    "start": "2487760",
    "end": "2493720"
  },
  {
    "text": "State between the iterations so we have a current",
    "start": "2493720",
    "end": "2498599"
  },
  {
    "text": "line sorry uh we have a current line",
    "start": "2503359",
    "end": "2508520"
  },
  {
    "text": "that we co wait a string from in and if",
    "start": "2508520",
    "end": "2514640"
  },
  {
    "text": "the concatenation of the current L and the new string are is too long we Coy",
    "start": "2514640",
    "end": "2521880"
  },
  {
    "text": "yield the old old string and store the the new one as our",
    "start": "2521880",
    "end": "2528319"
  },
  {
    "text": "next piece otherwise we just append to our current string make make it",
    "start": "2528319",
    "end": "2534560"
  },
  {
    "text": "grow and then we can get to the last one that prints lines and I'm deviating a",
    "start": "2534560",
    "end": "2539880"
  },
  {
    "text": "little bit from the previous print all so that I can uh",
    "start": "2539880",
    "end": "2547240"
  },
  {
    "text": "just to did have a clear distinct definition of where things are",
    "start": "2547240",
    "end": "2553520"
  },
  {
    "text": "so I'm reading lines and I'm printing them with columns on each end so we can see where they begin and end and print",
    "start": "2553520",
    "end": "2559359"
  },
  {
    "text": "with a new line also and the rest is like before",
    "start": "2559359",
    "end": "2565020"
  },
  {
    "text": "[Music] we we",
    "start": "2565020",
    "end": "2570720"
  },
  {
    "text": "add we add to Port 4,000 that we this called two promise",
    "start": "2570720",
    "end": "2577920"
  },
  {
    "text": "that just converts a function call into poking the The Promise by calling yield",
    "start": "2577920",
    "end": "2586160"
  },
  {
    "text": "value to to push things in and on 4,000 I still have the old print and",
    "start": "2586160",
    "end": "2593280"
  },
  {
    "text": "exit so let's do this",
    "start": "2593280",
    "end": "2598240"
  },
  {
    "text": "what was it called cor of course",
    "start": "2610240",
    "end": "2616319"
  },
  {
    "text": "uh so we have all these uh Co routines that you you saw",
    "start": "2616319",
    "end": "2623680"
  },
  {
    "text": "before and yeah I'm I'm adding four of them at a time completely unnecessary but why not",
    "start": "2626079",
    "end": "2634838"
  },
  {
    "text": "so if I do this the full",
    "start": "2640200",
    "end": "2645800"
  },
  {
    "text": "name so I'm just taking all the all the names on my",
    "start": "2650839",
    "end": "2656839"
  },
  {
    "text": "Dev read them and pass them on to to this Local Host Port 4,000",
    "start": "2656839",
    "end": "2663319"
  },
  {
    "text": "and when done end it everything and it all by",
    "start": "2663319",
    "end": "2669280"
  },
  {
    "text": "writing something to Port 400 401 so let's do",
    "start": "2669280",
    "end": "2676480"
  },
  {
    "text": "this oh no I have shared secrets you have now seen what devices I have on my",
    "start": "2676760",
    "end": "2684000"
  },
  {
    "text": "computer but this is actually pretty neat this uh these steps of computation",
    "start": "2684319",
    "end": "2690559"
  },
  {
    "text": "where each it's just a a loop where where you do some work this is of course",
    "start": "2690559",
    "end": "2697640"
  },
  {
    "text": "a very silly example but that's because I I don't want to complicate Matters by",
    "start": "2697640",
    "end": "2703920"
  },
  {
    "text": "calling fmex libraries and do image work or",
    "start": "2703920",
    "end": "2709160"
  },
  {
    "text": "whatever um so I I I kind of like this but",
    "start": "2709160",
    "end": "2717520"
  },
  {
    "start": "2715000",
    "end": "2859000"
  },
  {
    "text": "there's no doubt that I I emitted a lot like I I mentioned I this is the pretty much the minimum amount of code that you",
    "start": "2717520",
    "end": "2724160"
  },
  {
    "text": "can write that compiles and does the thing without uh to my knowledge have undefined",
    "start": "2724160",
    "end": "2731880"
  },
  {
    "text": "Behavior Uh error handling is really not trivial really really really not",
    "start": "2731880",
    "end": "2738079"
  },
  {
    "text": "trivial and I choose to not even touch it uh one thing that that I did mention",
    "start": "2738079",
    "end": "2745720"
  },
  {
    "text": "you have this unhandled exception function that you really should Implement and do something with uh but",
    "start": "2745720",
    "end": "2751839"
  },
  {
    "text": "other things also cancellation is tricky",
    "start": "2751839",
    "end": "2757200"
  },
  {
    "text": "one thing is if you want to cancel the entire computation pipeline then it's easy just destroy all the all the",
    "start": "2757200",
    "end": "2762880"
  },
  {
    "text": "objects B done but if you have a situation where some co- routine in the middle of the",
    "start": "2762880",
    "end": "2770119"
  },
  {
    "text": "pipeline says okay I'm done that is not an obvious thing how to handle",
    "start": "2770119",
    "end": "2776359"
  },
  {
    "text": "unfortunately and I ring is also interesting because you have a lot of",
    "start": "2776359",
    "end": "2782079"
  },
  {
    "text": "pending operations that use shared memory that",
    "start": "2782079",
    "end": "2788000"
  },
  {
    "text": "belongs to to your program if you deallocate them while they are pending bad things will",
    "start": "2788000",
    "end": "2794680"
  },
  {
    "text": "happen guaranteed very bad things will happen so you need to think about",
    "start": "2794680",
    "end": "2802200"
  },
  {
    "text": "these and also those of you who were here for",
    "start": "2802200",
    "end": "2807359"
  },
  {
    "text": "the previous presentation noticed that while there were many things really",
    "start": "2807359",
    "end": "2813559"
  },
  {
    "text": "similar with the with those coroutine types and mine they weren't the same",
    "start": "2813559",
    "end": "2818839"
  },
  {
    "text": "they differ there are so many ways to to do these there are so many things to tweak and what's really confusing I",
    "start": "2818839",
    "end": "2825680"
  },
  {
    "text": "think is that when the compiler sees your your",
    "start": "2825680",
    "end": "2830720"
  },
  {
    "text": "co- routine types the the task the the promise and the awaitable it will inspect the code and",
    "start": "2830720",
    "end": "2837520"
  },
  {
    "text": "see ah you have that function okay cool and it has this signature not that",
    "start": "2837520",
    "end": "2842839"
  },
  {
    "text": "signature so then I will generate code that does these things",
    "start": "2842839",
    "end": "2848720"
  },
  {
    "text": "uh so that is interesting I",
    "start": "2848720",
    "end": "2854440"
  },
  {
    "text": "think so yeah very minimal example uh some conclusions lack of",
    "start": "2854440",
    "end": "2860400"
  },
  {
    "text": "Library support is a huge headache there there's no denying it",
    "start": "2860400",
    "end": "2866839"
  },
  {
    "text": "writing these are not fun they aren't testing buing is absolutely",
    "start": "2866839",
    "end": "2874200"
  },
  {
    "text": "terrible it's absolutely night Marly difficult I mean sure if if you have a",
    "start": "2874200",
    "end": "2880880"
  },
  {
    "text": "bug in a co- routine where you're Co awaiting something and do something that",
    "start": "2880880",
    "end": "2886040"
  },
  {
    "text": "is fine you can you can have a break point in a debugger there and do things but if you have a problem in the",
    "start": "2886040",
    "end": "2893040"
  },
  {
    "text": "communication between co-routines with these promise types Etc then you are in",
    "start": "2893040",
    "end": "2899000"
  },
  {
    "text": "a very unpleasant situation I know this because I have been there uh what I did this was really",
    "start": "2899000",
    "end": "2907200"
  },
  {
    "text": "Lifesaver for me this is a extremely simple con exper string",
    "start": "2907200",
    "end": "2913160"
  },
  {
    "text": "class that can be used as a non-type template parameter which I'm using for tracing so",
    "start": "2913160",
    "end": "2921280"
  },
  {
    "text": "on my promise I have actually a name for each of them and I have these kind of tracers say",
    "start": "2921280",
    "end": "2928079"
  },
  {
    "text": "that Tusk te with this name get return object was",
    "start": "2928079",
    "end": "2933920"
  },
  {
    "text": "called and I'm using these names print lines say yeah it's a task avoid one",
    "start": "2933920",
    "end": "2939160"
  },
  {
    "text": "it's I call it print lines and it takes some other task with some",
    "start": "2939160",
    "end": "2946079"
  },
  {
    "text": "name and this means that when something goes really really really wrong and yield value",
    "start": "2946079",
    "end": "2952720"
  },
  {
    "text": "crashed and say okay yield value cool I have eight objects with yield value",
    "start": "2952720",
    "end": "2958760"
  },
  {
    "text": "which then I can at least see ah it was the filter in yield value that",
    "start": "2958760",
    "end": "2965720"
  },
  {
    "text": "that crashed okay now have at least some clue this this is 1980s",
    "start": "2965720",
    "end": "2974240"
  },
  {
    "text": "debugging this is horrible we should not need to be there sorry but this is this",
    "start": "2974240",
    "end": "2980760"
  },
  {
    "text": "is the best I could come up with and it's terrible I'm",
    "start": "2980760",
    "end": "2987319"
  },
  {
    "text": "sorry but writing these asynchronous code as if they were local Loops is",
    "start": "2988000",
    "end": "2994400"
  },
  {
    "text": "undeniably convenient and connecting pipelines of computation is really",
    "start": "2994400",
    "end": "2999960"
  },
  {
    "text": "powerful like we saw in this last example it okay it's a silly example but",
    "start": "2999960",
    "end": "3005000"
  },
  {
    "text": "just seeing how you can chain Loops that do work there is night there is really",
    "start": "3005000",
    "end": "3014078"
  },
  {
    "start": "3016000",
    "end": "3429000"
  },
  {
    "text": "night uh some some resources to look into",
    "start": "3016520",
    "end": "3022200"
  },
  {
    "text": "uh shb Hussein this lord of the IOU ring I I find this it's a fairly good",
    "start": "3022200",
    "end": "3029160"
  },
  {
    "text": "documentation I think on how to use the IOU ring apis",
    "start": "3029160",
    "end": "3034920"
  },
  {
    "text": "uh there are there are places that that are lacking information but on the whole",
    "start": "3034920",
    "end": "3040480"
  },
  {
    "text": "it's good on learning Co routines more the there's a plethora of information",
    "start": "3040480",
    "end": "3047680"
  },
  {
    "text": "on um blog post and Conference presentations Etc the one that worked for me was pav novikov's understanding",
    "start": "3047680",
    "end": "3055240"
  },
  {
    "text": "Co routines by example that that was the one that made made a click for me that ah okay that is what's",
    "start": "3055240",
    "end": "3063280"
  },
  {
    "text": "happening so thank you pav work great",
    "start": "3063280",
    "end": "3069599"
  },
  {
    "text": "done uh lack of standard Library lack of",
    "start": "3069599",
    "end": "3074880"
  },
  {
    "text": "Library support Lis baker has one called the CPP cororo um I'm a little bit I",
    "start": "3074880",
    "end": "3081160"
  },
  {
    "text": "don't know what the state of that is it looks if you look at the GitHub repo it doesn't seem to have been touched for a",
    "start": "3081160",
    "end": "3087040"
  },
  {
    "text": "couple of years so I'm not sure uh mkin who presented just before",
    "start": "3087040",
    "end": "3096040"
  },
  {
    "text": "me here has this uh eoro EC cortines",
    "start": "3096040",
    "end": "3101520"
  },
  {
    "text": "worth having a look at I learned about it only just before I entered stage so I'm I haven't gone into any details",
    "start": "3101520",
    "end": "3108000"
  },
  {
    "text": "sorry but uh I thought your presentation was great so it's probably",
    "start": "3108000",
    "end": "3113440"
  },
  {
    "text": "good yeah it's says it's it's tiny so don't have too",
    "start": "3113440",
    "end": "3119680"
  },
  {
    "text": "high expectations another really interesting library is lib UNIF effect",
    "start": "3119680",
    "end": "3124839"
  },
  {
    "text": "Facebook experimental it's open sourced uh it it uses Co routines and it uses iio ring",
    "start": "3124839",
    "end": "3133880"
  },
  {
    "text": "for doing uh Network IO uh I have not gone into details about",
    "start": "3133880",
    "end": "3142280"
  },
  {
    "text": "it but I think it looks super interesting actually at least the IDS",
    "start": "3142280",
    "end": "3147599"
  },
  {
    "text": "from it maybe not all the details but definitely the IDS from",
    "start": "3147599",
    "end": "3153119"
  },
  {
    "text": "it and that was all I have to say that was",
    "start": "3154760",
    "end": "3160040"
  },
  {
    "text": "asynchronous IO and co- routines for smooth data streaming I'm sorry if I",
    "start": "3160040",
    "end": "3165720"
  },
  {
    "text": "sounded more optimistic in the beginning in the title than I intended or well I actually did intend to be that",
    "start": "3165720",
    "end": "3171760"
  },
  {
    "text": "optimistic but I couldn't uh here's how you can find me",
    "start": "3171760",
    "end": "3177160"
  },
  {
    "text": "if you want to and thank you all for being",
    "start": "3177160",
    "end": "3182740"
  },
  {
    "text": "[Applause] here and uh we do have a few minutes for",
    "start": "3182740",
    "end": "3189680"
  },
  {
    "text": "questions if you have any or are you",
    "start": "3189680",
    "end": "3194640"
  },
  {
    "text": "stunned yeah what is a performance like if I have enabled optimizations um I'm",
    "start": "3198760",
    "end": "3206599"
  },
  {
    "text": "sorry I don't know I haven't measured is the answer the the one thing I can say",
    "start": "3206599",
    "end": "3213280"
  },
  {
    "text": "from from just generic experience is that at least if you compare with a with",
    "start": "3213280",
    "end": "3218559"
  },
  {
    "text": "a threaded solution if you are doing work that touches a lot of data you will",
    "start": "3218559",
    "end": "3224359"
  },
  {
    "text": "get better cach locality but uh otherwise I don't know other",
    "start": "3224359",
    "end": "3232520"
  },
  {
    "text": "questions so you showed the Q of four",
    "start": "3232520",
    "end": "3238440"
  },
  {
    "text": "okay so the the question was did I try I I used only four packets uh in the",
    "start": "3245599",
    "end": "3251880"
  },
  {
    "text": "performance example and have I tried more because four is very shallow the answer is no I have not tried but let's",
    "start": "3251880",
    "end": "3257880"
  },
  {
    "text": "do that we have several minutes uh",
    "start": "3257880",
    "end": "3266319"
  },
  {
    "text": "and now I will have to do something about the",
    "start": "3278280",
    "end": "3283079"
  },
  {
    "text": "uh ring because I initialize it only to eight let's do 18",
    "start": "3283920",
    "end": "3292960"
  },
  {
    "text": "and do the nping",
    "start": "3299920",
    "end": "3304760"
  },
  {
    "text": "thing what did I miss yeah we we got everything no okay no what I missed",
    "start": "3308119",
    "end": "3317160"
  },
  {
    "text": "was s Trace has a non-trivial overhead so we should be",
    "start": "3317160",
    "end": "3323720"
  },
  {
    "text": "fair so so let's do this again ah no s tr- c to otherwise it's",
    "start": "3325119",
    "end": "3333520"
  },
  {
    "text": "obviously lousy oh we lost a few no didn't matter",
    "start": "3333520",
    "end": "3340880"
  },
  {
    "text": "I I think it's the overhead from s tray actually that that causes the losses in this case",
    "start": "3340880",
    "end": "3348558"
  },
  {
    "text": "yeah there there there are fewer system calls yes that is",
    "start": "3356480",
    "end": "3361079"
  },
  {
    "text": "correct yeah there is there is less overhead per packet yes",
    "start": "3362400",
    "end": "3369200"
  },
  {
    "text": "that is true more",
    "start": "3369200",
    "end": "3375839"
  },
  {
    "text": "questions yes",
    "start": "3381200",
    "end": "3385200"
  },
  {
    "text": "okay ranges and Co routines um yeah yeah",
    "start": "3399079",
    "end": "3406200"
  },
  {
    "text": "um now I pause sorry I'm not going",
    "start": "3406200",
    "end": "3413000"
  },
  {
    "text": "there so other questions all right thanks again",
    "start": "3413599",
    "end": "3422838"
  }
]