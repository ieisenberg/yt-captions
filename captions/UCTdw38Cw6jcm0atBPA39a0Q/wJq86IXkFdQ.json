[
  {
    "text": "all right good afternoon and welcome to this talk this is the last",
    "start": "9830",
    "end": "15800"
  },
  {
    "text": "facture program in the conference so how fried is your brain by now crispy on the",
    "start": "15800",
    "end": "21920"
  },
  {
    "text": "outside a bit deep-fried by the end of this so in this talk of basically",
    "start": "21920",
    "end": "30380"
  },
  {
    "text": "discuss functional programming from the perspective of how to think about an",
    "start": "30380",
    "end": "35720"
  },
  {
    "text": "isolate logic from side effects and some pretty basic techniques that if applied",
    "start": "35720",
    "end": "43130"
  },
  {
    "text": "to this judiciously can help you to write programs you know in a very different and more maintainable way my",
    "start": "43130",
    "end": "51350"
  },
  {
    "text": "name is Erika Bonanno and some of you may know me as the author of this book functional programming in c-sharp",
    "start": "51350",
    "end": "57739"
  },
  {
    "text": "published with Manning this book was in early access for over a year and just",
    "start": "57739",
    "end": "64970"
  },
  {
    "text": "recently has been finalized both both the e-book and the print edition and I'm",
    "start": "64970",
    "end": "71450"
  },
  {
    "text": "showing the screenshot here at the bottom left you can see that there are a couple of free chapters so if you're",
    "start": "71450",
    "end": "78230"
  },
  {
    "text": "interested just download those brief",
    "start": "78230",
    "end": "83330"
  },
  {
    "text": "outline for this talk I'll just say a couple of words on our problems as",
    "start": "83330",
    "end": "88460"
  },
  {
    "text": "software developers and my take on functional programming and then we'll delve into side-effects and see what",
    "start": "88460",
    "end": "95150"
  },
  {
    "text": "they are and why you might like to minimize the scope of side-effects and separate them from the logic in your",
    "start": "95150",
    "end": "101750"
  },
  {
    "text": "applications and we see how to a certain effect to some extent we can do that with dependency injection and with",
    "start": "101750",
    "end": "108320"
  },
  {
    "text": "another technique called free monads and everything I'm going to try to explain with some with some real code that is",
    "start": "108320",
    "end": "114170"
  },
  {
    "text": "some kind of simplified version of the of the code that most of us write day to",
    "start": "114170",
    "end": "119570"
  },
  {
    "text": "day I take it so what is the software crisis so we don't know exactly but I",
    "start": "119570",
    "end": "126970"
  },
  {
    "text": "suppose most people think of the software crisis as our inability as",
    "start": "126970",
    "end": "132650"
  },
  {
    "text": "developers to deliver software according to our clients expectations right so it",
    "start": "132650",
    "end": "138050"
  },
  {
    "text": "it takes too long it's not good enough features are scheduled and then they can",
    "start": "138050",
    "end": "143569"
  },
  {
    "text": "sort and so on and I think the other aspect so disappointments from the users",
    "start": "143569",
    "end": "149370"
  },
  {
    "text": "effective right and as users we all know this we walk onto a website and we can't",
    "start": "149370",
    "end": "155069"
  },
  {
    "text": "do things that should be easy right and then from the developers point of view",
    "start": "155069",
    "end": "162140"
  },
  {
    "text": "the crisis is that we can't we can't we can't work with pleasure right with",
    "start": "162260",
    "end": "168720"
  },
  {
    "text": "enjoyment very often so you go for this job interview and looks okay and then",
    "start": "168720",
    "end": "173849"
  },
  {
    "text": "you're hired and then you look at the codebase and you say no again the same",
    "start": "173849",
    "end": "181890"
  },
  {
    "text": "problems over and over right and I think some of these problems are our own fault",
    "start": "181890",
    "end": "188099"
  },
  {
    "text": "in the sense that we don't prioritize things right so I estimate we invest",
    "start": "188099",
    "end": "195030"
  },
  {
    "text": "about 75% of our time and energy into development tools by which I mean the",
    "start": "195030",
    "end": "202500"
  },
  {
    "text": "development tools the language features frameworks frameworks very important right and we we spent so much time on this and",
    "start": "202500",
    "end": "215630"
  },
  {
    "text": "that's part of the problem right because if you think about maybe five years ago ten years ago would you say that your",
    "start": "215630",
    "end": "221220"
  },
  {
    "text": "tools today are a lot better would you want to go back to the tools and the frameworks you were using ten years ago",
    "start": "221220",
    "end": "226859"
  },
  {
    "text": "probably not but the products that we use or the web application that we use",
    "start": "226859",
    "end": "232709"
  },
  {
    "text": "are they so much better than there were five or ten years ago it's not interesting when people have this messy",
    "start": "232709",
    "end": "241769"
  },
  {
    "text": "code base and it takes forever to add a new feature because there's been all",
    "start": "241769",
    "end": "246810"
  },
  {
    "text": "this technical debt they say oh if only we could rewrite this using this great",
    "start": "246810",
    "end": "252000"
  },
  {
    "text": "new framework and then they do we write it and they end up with the same problems as before right and and so the",
    "start": "252000",
    "end": "259979"
  },
  {
    "text": "problem is not with the tools I think the problem is mostly with the other two points so the ideas and the processes",
    "start": "259979",
    "end": "265310"
  },
  {
    "text": "and with ideas I mean the software architecture how do how do you name",
    "start": "265310",
    "end": "271169"
  },
  {
    "text": "things patterns and of course paradigms like functional programming so yes it",
    "start": "271169",
    "end": "279750"
  },
  {
    "text": "does make sense to be right things it does make sense to migrate to new frame works but only at the same time you also",
    "start": "279750",
    "end": "287520"
  },
  {
    "text": "keep developing your your knowledge of the ideas of the practices of the conceptual tools if you like and I think",
    "start": "287520",
    "end": "294420"
  },
  {
    "text": "the processes we use are also highly ineffective and we don't question those enough so when was the last time you",
    "start": "294420",
    "end": "301620"
  },
  {
    "text": "were asked to write a proof of concept for a new technology it happens pretty",
    "start": "301620",
    "end": "308130"
  },
  {
    "text": "often right worst case scenario you throw it away you've wasted two weeks and but you know that this product is",
    "start": "308130",
    "end": "313470"
  },
  {
    "text": "not for you and when was the last time you did a proof of concept for different process all right let's invest two weeks",
    "start": "313470",
    "end": "320970"
  },
  {
    "text": "doing mandatory pair programming wahala percent of the time right there's no",
    "start": "320970",
    "end": "326850"
  },
  {
    "text": "there's no experience on that front we just sort of put our hands up and say yeah I just go with what the team does",
    "start": "326850",
    "end": "333740"
  },
  {
    "text": "but so this talk is about the second part so the ideas and a functional programming in particular and the",
    "start": "333740",
    "end": "340350"
  },
  {
    "text": "benefits it can give us which to me our power safety and clarity and when I talk",
    "start": "340350",
    "end": "346620"
  },
  {
    "text": "about functional programming I mean a style of programming that emphasizes function and avoid state mutation but",
    "start": "346620",
    "end": "354750"
  },
  {
    "text": "today I'm going to look at it from slightly different perspectives so as a way of thinking about code that helps us",
    "start": "354750",
    "end": "362430"
  },
  {
    "text": "to understand an isolate logic from side-effects so when I say power safety",
    "start": "362430",
    "end": "371730"
  },
  {
    "text": "and clarity power I mean simply you can do more with less code and this is",
    "start": "371730",
    "end": "379650"
  },
  {
    "text": "because in functional programming you treat functions as values and this raises the level of abstraction and as a",
    "start": "379650",
    "end": "387720"
  },
  {
    "text": "very simple demonstration you can see for example link in c-sharp link is a",
    "start": "387720",
    "end": "392880"
  },
  {
    "text": "functional library and it uses higher-order functions all over the place so this is a very trivial example",
    "start": "392880",
    "end": "400260"
  },
  {
    "text": "right we have this get percentages function it creates a sequence of 100 numbers and then it only takes the ones",
    "start": "400260",
    "end": "406170"
  },
  {
    "text": "they are divisible by 20 change the order and then it renders them as strings as a be the percentage sign so",
    "start": "406170",
    "end": "413460"
  },
  {
    "text": "when you call get percentages you get 100 percent 80% and so on and",
    "start": "413460",
    "end": "418710"
  },
  {
    "text": "this is very simple but say if you want to parameterize this now say instead of",
    "start": "418710",
    "end": "424500"
  },
  {
    "text": "every 20 number every 20 percentage point you want to get every X percentage",
    "start": "424500",
    "end": "429900"
  },
  {
    "text": "points it's like a 1 second refactor right it's really easy and if you say well ordering shouldn't really be here I",
    "start": "429900",
    "end": "437820"
  },
  {
    "text": "want to effect to this order out that's that's also really easy right you just you just remove that line and you move it somewhere else and if you were coding",
    "start": "437820",
    "end": "446340"
  },
  {
    "text": "in the in the pre linked world in c-sharp this would have been completely different you wouldn't you would have",
    "start": "446340",
    "end": "451470"
  },
  {
    "text": "used for and if and then all these operations would have been a lot more difficult and time-consuming so this is",
    "start": "451470",
    "end": "459000"
  },
  {
    "text": "just an example of how an API that's built on functional programming",
    "start": "459000",
    "end": "465630"
  },
  {
    "text": "principles such as nink can actually be very usable and very powerful",
    "start": "465630",
    "end": "471950"
  },
  {
    "text": "the second point safety what do I say what do I mean by safety is just that",
    "start": "471950",
    "end": "478260"
  },
  {
    "text": "the code simply does what you think it does and this is basically because in functional programming we avoid state",
    "start": "478260",
    "end": "484560"
  },
  {
    "text": "mutation so I think of safety not so much as a virtual vex of functional program but rather as a pitfall of",
    "start": "484560",
    "end": "491480"
  },
  {
    "text": "programming with mutable state and let me give you a couple of examples what I",
    "start": "491480",
    "end": "497070"
  },
  {
    "text": "mean so the examples in this in this presentation are in c-sharp but the",
    "start": "497070",
    "end": "504090"
  },
  {
    "text": "contents are complete in language agnostic so here we have a class order",
    "start": "504090",
    "end": "509250"
  },
  {
    "text": "with the list of order lines and then you have a property total and the total gives you the you know the total cost of",
    "start": "509250",
    "end": "515729"
  },
  {
    "text": "the order and it seems obvious what the code does right I mean it goes through",
    "start": "515729",
    "end": "522780"
  },
  {
    "text": "the order lines and it adds up all the prices but now let's look at this list",
    "start": "522780",
    "end": "528270"
  },
  {
    "text": "of ordinance this is actually a mutable list so what could happen is that",
    "start": "528270",
    "end": "533310"
  },
  {
    "text": "potentially there's some business rules that the order lines need to be sorted by some criterion and while you're",
    "start": "533310",
    "end": "541470"
  },
  {
    "text": "asking for the total some other thread is sorting the list so you told me",
    "start": "541470",
    "end": "548339"
  },
  {
    "text": "completely off right and so it's it seems so simple what God does but in",
    "start": "548339",
    "end": "555059"
  },
  {
    "text": "reality when you take multi-threading into account it's not so you go through",
    "start": "555059",
    "end": "560970"
  },
  {
    "text": "all your order class and you see well let's see where is all the lines being accessed and it's not that's accessed",
    "start": "560970",
    "end": "568829"
  },
  {
    "text": "anywhere oh wait it's public so actually anything in your application and in any",
    "start": "568829",
    "end": "576240"
  },
  {
    "text": "code that could be written in the future could actually go and change this code under your feet and break your total",
    "start": "576240",
    "end": "582209"
  },
  {
    "text": "method so that's just an example another",
    "start": "582209",
    "end": "587999"
  },
  {
    "text": "example sort of runs along the same lines so you have this method process",
    "start": "587999",
    "end": "593220"
  },
  {
    "text": "sales so when you sell a certain number of items you update your inventory and",
    "start": "593220",
    "end": "598740"
  },
  {
    "text": "then you have this simple business rules that if temperature is less than five then you set this boolean that the item",
    "start": "598740",
    "end": "606509"
  },
  {
    "text": "the product is low on inventory again simple but if you take multi-threading",
    "start": "606509",
    "end": "612660"
  },
  {
    "text": "into account then there's this where you have the comment with with a question",
    "start": "612660",
    "end": "618240"
  },
  {
    "text": "mark what happened there then now your object is sort of halfway through this",
    "start": "618240",
    "end": "623490"
  },
  {
    "text": "transition so from the point of view of another thread you've now broken this invariant that",
    "start": "623490",
    "end": "629610"
  },
  {
    "text": "you're trying to maintain that this flag should should be related to the imagery and if the business rule for setting has",
    "start": "629610",
    "end": "637920"
  },
  {
    "text": "low imagery was a bit more complex had a bit more latency then you would start to see the effects and with functional",
    "start": "637920",
    "end": "645779"
  },
  {
    "text": "programming this what this all goes away and we'll we'll see examples of how to program state transitions like this",
    "start": "645779",
    "end": "652199"
  },
  {
    "text": "without using mutable state and the",
    "start": "652199",
    "end": "657600"
  },
  {
    "text": "third aspect that that's the more important for the purpose of today's presentation is clarity so functional",
    "start": "657600",
    "end": "664889"
  },
  {
    "text": "programming is a very simple paradigm because it relies on functions and functions are very simple things right",
    "start": "664889",
    "end": "671220"
  },
  {
    "text": "functions are just inputs and outputs so we can we can relate to this you know I",
    "start": "671220",
    "end": "676500"
  },
  {
    "text": "give you a dollar and you give me an ice cream it's give and take right and that's it so",
    "start": "676500",
    "end": "683530"
  },
  {
    "text": "this may sound obvious but the nothing else that's the tricky bit because we tend to do other things that can break this",
    "start": "683530",
    "end": "691690"
  },
  {
    "text": "clarity of the of the function as a contract so there's a lot of terminology",
    "start": "691690",
    "end": "700680"
  },
  {
    "text": "in functional programming the only terminology I'm going to introduce today is this and so it's two ideas but it's",
    "start": "700680",
    "end": "707590"
  },
  {
    "text": "actually the same idea from two different sides so what are side effects and what are pure functions these are",
    "start": "707590",
    "end": "714190"
  },
  {
    "text": "the side effects that we're going to look at today these are the side effects right so mutating function arguments",
    "start": "714190",
    "end": "719710"
  },
  {
    "text": "foreign exceptions reading and writing formidable global state and when they",
    "start": "719710",
    "end": "725410"
  },
  {
    "text": "say global State that's any state that is not local to a function so a private",
    "start": "725410",
    "end": "731110"
  },
  {
    "text": "instance variable is considered globe of state and performing IO so these are the",
    "start": "731110",
    "end": "739060"
  },
  {
    "text": "things that if you think about it introduced in the terminus see in your functions right so if your function does",
    "start": "739060",
    "end": "744280"
  },
  {
    "text": "these things then you're not really sure what the result of the function will be and at the other end of the spectrum you",
    "start": "744280",
    "end": "751660"
  },
  {
    "text": "have pure functions so pure functions have no side effects so in a sense it's the same concept viewed from the",
    "start": "751660",
    "end": "757720"
  },
  {
    "text": "opposite side and as a result their output is determined solely by their inputs so after if the named pure",
    "start": "757720",
    "end": "764290"
  },
  {
    "text": "functions sounds a bit scary just think of them as deterministic functions and most mathematical functions are pure",
    "start": "764290",
    "end": "771940"
  },
  {
    "text": "right so the square root of four is going to be two no matter what state of",
    "start": "771940",
    "end": "778210"
  },
  {
    "text": "the world is it's always going to be two if you call it twice it's always going to be the same so pure functions have",
    "start": "778210",
    "end": "785590"
  },
  {
    "text": "some very interesting properties because of this deterministic aspect they're",
    "start": "785590",
    "end": "791470"
  },
  {
    "text": "very easy to test so you give some input and you assert that the output is as expected",
    "start": "791470",
    "end": "796690"
  },
  {
    "text": "they're easy to understand they're very easy to optimize particularly you can",
    "start": "796690",
    "end": "802050"
  },
  {
    "text": "memorize so cache the results right if if I've computed it once why compute it again and they can be parallelized you",
    "start": "802050",
    "end": "810460"
  },
  {
    "text": "know without any special effort right whether you take the square root of two",
    "start": "810460",
    "end": "816589"
  },
  {
    "text": "hundred numbers sequentially or in parallel it doesn't really matter it doesn't affect the result on the other",
    "start": "816589",
    "end": "823069"
  },
  {
    "text": "hand few functions cannot be monetized right if you paid to write code or if",
    "start": "823069",
    "end": "828889"
  },
  {
    "text": "you pay for a product it's because of the side effects right if you buy a device if you buy a product it's because",
    "start": "828889",
    "end": "834769"
  },
  {
    "text": "it does something right pure functions only compute stuff they don't do anything so obviously we need both and the idea",
    "start": "834769",
    "end": "842749"
  },
  {
    "text": "is that our program will have logic and it will have side effects and we're",
    "start": "842749",
    "end": "850819"
  },
  {
    "text": "going to want to separate these two so we can take advantage of these nice",
    "start": "850819",
    "end": "856819"
  },
  {
    "text": "features of pure functions and we're going to want to avoid unnecessary",
    "start": "856819",
    "end": "861829"
  },
  {
    "text": "side-effects isolate logic from side effects and encode our logic with pure",
    "start": "861829",
    "end": "867379"
  },
  {
    "text": "functions so what I'm going to do now is",
    "start": "867379",
    "end": "876290"
  },
  {
    "text": "we're going to go through these different types of side effects because the way we can we can avoid these side",
    "start": "876290",
    "end": "884600"
  },
  {
    "text": "effects goes from easy to not possible and how to deal with those so so so we",
    "start": "884600",
    "end": "892459"
  },
  {
    "text": "now go through these and we see how how we can avoid them basically so mutating",
    "start": "892459",
    "end": "897769"
  },
  {
    "text": "function arguments is something that is still done quite often but should be",
    "start": "897769",
    "end": "904519"
  },
  {
    "text": "avoided let me give you an example so say you have a shopping basket and you",
    "start": "904519",
    "end": "912049"
  },
  {
    "text": "have these little errors that allow you to increase and decrease the number of",
    "start": "912049",
    "end": "917119"
  },
  {
    "text": "the quantity that you want for an item right so when you change that the",
    "start": "917119",
    "end": "923540"
  },
  {
    "text": "quantity the the value of the order changes right so you have this function",
    "start": "923540",
    "end": "929869"
  },
  {
    "text": "called recompute total that computes the new total for the order and that",
    "start": "929869",
    "end": "935239"
  },
  {
    "text": "somebody comes along and say oh wait but if the if the if the number of items is changed to zero then I need to delete",
    "start": "935239",
    "end": "941869"
  },
  {
    "text": "that order line completely because the customer doesn't want any so let me just pass in this list of order lines",
    "start": "941869",
    "end": "947540"
  },
  {
    "text": "leads and since this method has to traverse the other lines to recompute",
    "start": "947540",
    "end": "952970"
  },
  {
    "text": "the total it's also going to populate this list as a side-effect right so this",
    "start": "952970",
    "end": "958730"
  },
  {
    "text": "method computes the new total of the order and as a side-effect populates these lists of lines that you want",
    "start": "958730",
    "end": "965209"
  },
  {
    "text": "deleted and I've been programming for many years and I see some code like this",
    "start": "965209",
    "end": "972230"
  },
  {
    "text": "and you know this it doesn't quite feel right right but well what exactly is",
    "start": "972230",
    "end": "979130"
  },
  {
    "text": "wrong with this I mean how do you explain to somebody else how do you explain to your colleague who wrote this",
    "start": "979130",
    "end": "984500"
  },
  {
    "text": "that this is not a good idea and the reason is that now you've effectively",
    "start": "984500",
    "end": "991310"
  },
  {
    "text": "coupled logic in the calling code with",
    "start": "991310",
    "end": "996440"
  },
  {
    "text": "the logic in the function so what ends",
    "start": "996440",
    "end": "1002740"
  },
  {
    "text": "up happening is that for example this line that's commented out lines to",
    "start": "1002740",
    "end": "1008350"
  },
  {
    "text": "delete not clear so it clears the the given list should you should you do that",
    "start": "1008350",
    "end": "1017970"
  },
  {
    "text": "if somebody calls you and and in that list is not empty well what does it mean",
    "start": "1018060",
    "end": "1025799"
  },
  {
    "text": "if they call you twice with the same list do you delete the roles twice right",
    "start": "1025980",
    "end": "1034058"
  },
  {
    "text": "so it's not really clear right if you say well to maintain this code and make changes then the only way you can know",
    "start": "1034059",
    "end": "1041230"
  },
  {
    "text": "the impact of changing that line of code is to actually look at all the places",
    "start": "1041230",
    "end": "1046390"
  },
  {
    "text": "where this call is being it's being called and this is what makes the application difficult to reason about",
    "start": "1046390",
    "end": "1053640"
  },
  {
    "text": "because you're effectively coupling the function with its colors and it's very",
    "start": "1053640",
    "end": "1061000"
  },
  {
    "text": "easy to refactor this so effectively you have to acknowledge that the function is",
    "start": "1061000",
    "end": "1066309"
  },
  {
    "text": "calculating two things it's calculating the new total and it's calculating the",
    "start": "1066309",
    "end": "1071530"
  },
  {
    "text": "lines that you want to delete so you acknowledge this that this function is",
    "start": "1071530",
    "end": "1077860"
  },
  {
    "text": "doing two things these should be two outputs so now this is c-sharp certain tuple syntax so the the",
    "start": "1077860",
    "end": "1084640"
  },
  {
    "text": "type of the output is a multiple and additionally c-sharp set me you can have names for each element in the tuple so",
    "start": "1084640",
    "end": "1092890"
  },
  {
    "text": "the input is simply the order that's not mutated in any way and then that's the",
    "start": "1092890",
    "end": "1098200"
  },
  {
    "text": "implementation which is still fairly trivial so in summary keep your function honest",
    "start": "1098200",
    "end": "1105820"
  },
  {
    "text": "and just have inputs and outputs and when you mutate function arguments you're actually modeling the waters",
    "start": "1105820",
    "end": "1113860"
  },
  {
    "text": "because this this function that's being mutated it's it's on the input side and it's on the output side so it's like you",
    "start": "1113860",
    "end": "1119980"
  },
  {
    "text": "know I give you a dollar and you give you an ice cream and at the same time you do something with a dollar that",
    "start": "1119980",
    "end": "1125080"
  },
  {
    "text": "somehow changes it and I still have a reference to it and I can see that",
    "start": "1125080",
    "end": "1131260"
  },
  {
    "text": "change and it's it's very unclear right I mean you wouldn't want to enter into a transaction like that so we've seen that",
    "start": "1131260",
    "end": "1141490"
  },
  {
    "text": "you can actually completely avoid this side-effect of mutating faction arguments and it will make your code",
    "start": "1141490",
    "end": "1149500"
  },
  {
    "text": "cleaner and easier to maintain now on to the second side effect which is throwing",
    "start": "1149500",
    "end": "1156730"
  },
  {
    "text": "exceptions and this may sound surprising what so never throw exceptions yes never saw",
    "start": "1156730",
    "end": "1163810"
  },
  {
    "text": "reception's there are indeed programming languages that do not have exceptions so",
    "start": "1163810",
    "end": "1170200"
  },
  {
    "text": "let's bring up some code and if you code",
    "start": "1170200",
    "end": "1175600"
  },
  {
    "text": "in c-sharp for living you've probably seen code activists quite often in fact",
    "start": "1175600",
    "end": "1184570"
  },
  {
    "text": "so often that you think you know why do I have to write this so often you know",
    "start": "1184570",
    "end": "1190120"
  },
  {
    "text": "isn't this duplication if I have stuff like this all over the place and so what",
    "start": "1190120",
    "end": "1198100"
  },
  {
    "text": "happens if I uncomment this the throw ax should have we throw it exception should I swallow it as in this case how does it",
    "start": "1198100",
    "end": "1206080"
  },
  {
    "text": "affect my application if I uncommented line well effectively it's a breaking",
    "start": "1206080",
    "end": "1212980"
  },
  {
    "text": "change isn't it because all old all the codes that was relying on this function not through an",
    "start": "1212980",
    "end": "1219170"
  },
  {
    "text": "exception now needs to change because now the function does throw an exception",
    "start": "1219170",
    "end": "1225730"
  },
  {
    "text": "so it is a breaking change but the compiler doesn't doesn't tell you that it's a breaking change right it thinks",
    "start": "1226030",
    "end": "1232370"
  },
  {
    "text": "it's okay and also if the exception",
    "start": "1232370",
    "end": "1237730"
  },
  {
    "text": "occurred in live dangerously does it",
    "start": "1237730",
    "end": "1243020"
  },
  {
    "text": "matter that we skipped regret the early part",
    "start": "1243020",
    "end": "1247510"
  },
  {
    "text": "so in factual programming we completely",
    "start": "1248350",
    "end": "1253510"
  },
  {
    "text": "will use this approach at all and instead we follow the approach of making",
    "start": "1253990",
    "end": "1263840"
  },
  {
    "text": "the possibility of failure explicit in the function signature as a result an error doesn't throw an",
    "start": "1263840",
    "end": "1271730"
  },
  {
    "text": "exception which is going to end up somewhere in a in some catch block up",
    "start": "1271730",
    "end": "1277010"
  },
  {
    "text": "the stack but it's just data you know it's an error and you have some data that represents that ever so let's",
    "start": "1277010",
    "end": "1284810"
  },
  {
    "text": "compare these two functions signature the first one create take some string",
    "start": "1284810",
    "end": "1290690"
  },
  {
    "text": "and it returns an email so I don't know what the email class is exactly but you",
    "start": "1290690",
    "end": "1296390"
  },
  {
    "text": "know you can kind of guess that the string is a string representation of an email and the email type is a more",
    "start": "1296390",
    "end": "1302540"
  },
  {
    "text": "structured representation so maybe it has some property what's the domain what's the local part but what if you",
    "start": "1302540",
    "end": "1310160"
  },
  {
    "text": "pass a string that's not a valid email what what if you pass it the empty string what happens do you get an O do",
    "start": "1310160",
    "end": "1317030"
  },
  {
    "text": "you get an exception write the signature doesn't tell you that you know if you",
    "start": "1317030",
    "end": "1323540"
  },
  {
    "text": "look at the signature just below we're still taking an email a string as an",
    "start": "1323540",
    "end": "1330470"
  },
  {
    "text": "input but we're returning a validation of email and you don't know what by",
    "start": "1330470",
    "end": "1336710"
  },
  {
    "text": "addition is exactly but you know you can assume that it has to do with validations so if if the string is valid",
    "start": "1336710",
    "end": "1343280"
  },
  {
    "text": "and this email generic parameter is going to be somehow you can query this validation and get",
    "start": "1343280",
    "end": "1348500"
  },
  {
    "text": "the email or you could get some validation errors right it's even if you've never seen this the the signature",
    "start": "1348500",
    "end": "1355220"
  },
  {
    "text": "is telling you something about how errors are going to be handled and",
    "start": "1355220",
    "end": "1361120"
  },
  {
    "text": "indeed in functional programming we have a number of different types that are used to represent errors so the classic",
    "start": "1361120",
    "end": "1369559"
  },
  {
    "text": "that you find in the old style books is either so an either is a type that can",
    "start": "1369559",
    "end": "1374960"
  },
  {
    "text": "be in a left state in which case it means that something's gone wrong and you have some data of type L that is",
    "start": "1374960",
    "end": "1383539"
  },
  {
    "text": "data about the error or it can be in the right state which means that yes it's all right and in this case there's an R",
    "start": "1383539",
    "end": "1390830"
  },
  {
    "text": "which is the type of your results or your successful result and then if you don't want to be so you know to have",
    "start": "1390830",
    "end": "1397850"
  },
  {
    "text": "these funny names then you would call these results instead with failure and success but basically the same idea or",
    "start": "1397850",
    "end": "1404030"
  },
  {
    "text": "if you're like me and you like to separate validation errors from",
    "start": "1404030",
    "end": "1409990"
  },
  {
    "text": "technical errors then you can use exceptional to sort of wrap exceptions",
    "start": "1409990",
    "end": "1417320"
  },
  {
    "text": "that may have occurred in lower-level components that do throw exceptions or violation for more business-oriented",
    "start": "1417320",
    "end": "1426760"
  },
  {
    "text": "validation now I don't have time to",
    "start": "1426760",
    "end": "1431929"
  },
  {
    "text": "discuss all these types in detail they're all described in my book of course but you know functional error",
    "start": "1431929",
    "end": "1439130"
  },
  {
    "text": "handling is a wide area so I I just have time for 404 this short introduction",
    "start": "1439130",
    "end": "1447010"
  },
  {
    "text": "dotnet doesn't really have these types so you can either use a functional",
    "start": "1447340",
    "end": "1453500"
  },
  {
    "text": "ribéry or you can use a type that does exist in dotnet and it represents that",
    "start": "1453500",
    "end": "1462350"
  },
  {
    "text": "can represent success or failure of an operation any ideas you use it every day",
    "start": "1462350",
    "end": "1470950"
  },
  {
    "text": "tasks yes exactly so tasks as a result property so if it was successful than",
    "start": "1470950",
    "end": "1477679"
  },
  {
    "text": "result property we've populated it has an exception property so if it",
    "start": "1477679",
    "end": "1483860"
  },
  {
    "text": "failed then that will be populated it has a status flag that tells you what happened so for example this is the",
    "start": "1483860",
    "end": "1492639"
  },
  {
    "text": "object-oriented version that you tend to see all over the place we have an account with a balance and then when you",
    "start": "1492639",
    "end": "1498350"
  },
  {
    "text": "debit the account with a certain amount if the amount is too big then throw an exception otherwise mutate the account",
    "start": "1498350",
    "end": "1506419"
  },
  {
    "text": "balance so notice we have two side effects the exception and mutating state",
    "start": "1506419",
    "end": "1512990"
  },
  {
    "text": "and if I reflected this to a functional style now okay so for one thing in",
    "start": "1512990",
    "end": "1520850"
  },
  {
    "text": "functional programming we separate data from logic so you see that the account",
    "start": "1520850",
    "end": "1526100"
  },
  {
    "text": "class at the bottom now only has data and it's immutable right so there's only",
    "start": "1526100",
    "end": "1531799"
  },
  {
    "text": "one property and it already has a getter which means it can only be set in a constructor and the logic is in phase",
    "start": "1531799",
    "end": "1539509"
  },
  {
    "text": "and colony functions so now if you look at the debit function it says okay if if",
    "start": "1539509",
    "end": "1547070"
  },
  {
    "text": "my business rule is is violated then I'm",
    "start": "1547070",
    "end": "1552259"
  },
  {
    "text": "going to create a task with an exception but except the exception is not thrown right it's it's wrapped into an object",
    "start": "1552259",
    "end": "1558619"
  },
  {
    "text": "and otherwise I will return a result which is a new account which is",
    "start": "1558619",
    "end": "1565119"
  },
  {
    "text": "obviously a representation of the same account but with the with the modified balance and how can you do this how can",
    "start": "1565119",
    "end": "1576080"
  },
  {
    "text": "you use this approach so this would be your typical server-side stateless",
    "start": "1576080",
    "end": "1582169"
  },
  {
    "text": "server side workflow where you get a request you load up some data from the",
    "start": "1582169",
    "end": "1587570"
  },
  {
    "text": "database you change the data and then you receive it and of course everything",
    "start": "1587570",
    "end": "1592700"
  },
  {
    "text": "can fail potentially so you use tasks to represent these various types of failure",
    "start": "1592700",
    "end": "1599029"
  },
  {
    "text": "so you get account get account could fail in which case the weight keywords",
    "start": "1599029",
    "end": "1608379"
  },
  {
    "text": "because of the weight keyword the rest will be skipped and likewise if debit",
    "start": "1609830",
    "end": "1614960"
  },
  {
    "text": "fails then the following line is skipped and so on so we're kind of using the weight",
    "start": "1614960",
    "end": "1622070"
  },
  {
    "text": "keyword to do monadic composition on the task moment right so I'm not saying",
    "start": "1622070",
    "end": "1628430"
  },
  {
    "text": "write code with using tasks everywhere but but but it is a possibility so in",
    "start": "1628430",
    "end": "1635540"
  },
  {
    "text": "other words again keep your function honest that's that's the mantra right only inputs and outputs and if a",
    "start": "1635540",
    "end": "1642530"
  },
  {
    "text": "function can fail this can be represented in the type you use for your output so we're doing pretty good",
    "start": "1642530",
    "end": "1651470"
  },
  {
    "text": "because we've just found out that of these four possible side effects the",
    "start": "1651470",
    "end": "1656870"
  },
  {
    "text": "first two we can get rid of and we can we can make our applications safer and",
    "start": "1656870",
    "end": "1662830"
  },
  {
    "text": "more maintainable by doing so now onto",
    "start": "1662830",
    "end": "1668230"
  },
  {
    "text": "mutating global states can we write our applications without ever mutating",
    "start": "1668230",
    "end": "1673520"
  },
  {
    "text": "global state and one reason that mutable",
    "start": "1673520",
    "end": "1680210"
  },
  {
    "text": "state is bad is because it doesn't work well with the multi-threading these are",
    "start": "1680210",
    "end": "1686690"
  },
  {
    "text": "the examples that I showed in the intro and then the second reason which is just",
    "start": "1686690",
    "end": "1691970"
  },
  {
    "text": "as important for me is that it tends to introduce coupling so say you have these",
    "start": "1691970",
    "end": "1697610"
  },
  {
    "text": "two objects being see that both have a",
    "start": "1697610",
    "end": "1703190"
  },
  {
    "text": "dependency on object a but they don't have any reference to each other right",
    "start": "1703190",
    "end": "1710020"
  },
  {
    "text": "so you'll think that they're not coupled but in reality if B has an interaction",
    "start": "1710020",
    "end": "1716690"
  },
  {
    "text": "with a that causes a to change its state and C has an interaction with a that",
    "start": "1716690",
    "end": "1722720"
  },
  {
    "text": "relies on that state in fact these two objects are coupled and I think that",
    "start": "1722720",
    "end": "1729680"
  },
  {
    "text": "couple coupling is really one of the biggest problems in our in our software",
    "start": "1729680",
    "end": "1734830"
  },
  {
    "text": "so let's look again at an example so this would be a typical object-oriented",
    "start": "1737380",
    "end": "1744940"
  },
  {
    "text": "version you have again this list of order lines with the total method and a",
    "start": "1744940",
    "end": "1751549"
  },
  {
    "text": "function to add a new order line right so the user adds adds a new item so you",
    "start": "1751549",
    "end": "1759080"
  },
  {
    "text": "have state mutation because you're changing the list of all the lines how",
    "start": "1759080",
    "end": "1764510"
  },
  {
    "text": "would you do this in a functional style again order would be an immutable class",
    "start": "1764510",
    "end": "1769640"
  },
  {
    "text": "and it would only have data so remove the add function out of the other class",
    "start": "1769640",
    "end": "1776210"
  },
  {
    "text": "and I've made lines an immutable list so when you build an order you give it a",
    "start": "1776210",
    "end": "1783679"
  },
  {
    "text": "list of order lines it has and total is just a read-only property it's computed",
    "start": "1783679",
    "end": "1789440"
  },
  {
    "text": "so it could stay there or it could be a doesn't matter but if we look at add",
    "start": "1789440",
    "end": "1794809"
  },
  {
    "text": "what does add to add does order dot lines and that's an immutable list so",
    "start": "1794809",
    "end": "1801590"
  },
  {
    "text": "add the add method creates a new immutable list with the added element",
    "start": "1801590",
    "end": "1807740"
  },
  {
    "text": "and then we create a new order that represents the order with the added line",
    "start": "1807740",
    "end": "1814160"
  },
  {
    "text": "so essentially what we're doing is rather than modifying an object we are",
    "start": "1814160",
    "end": "1820730"
  },
  {
    "text": "creating modified copies of an object and this is where most people say but",
    "start": "1820730",
    "end": "1828380"
  },
  {
    "text": "wait how do I represent the current states of my order and the idea is that",
    "start": "1828380",
    "end": "1838820"
  },
  {
    "text": "well first you might not need to sometimes you do need but in that case",
    "start": "1838820",
    "end": "1846520"
  },
  {
    "text": "mutating the thing in memory is it's not the best way but the key point is that",
    "start": "1846520",
    "end": "1853160"
  },
  {
    "text": "these are separate concerns so representing state is one concern and in",
    "start": "1853160",
    "end": "1859490"
  },
  {
    "text": "functional programming we do this with data objects so these are completely anemic objects that just have data",
    "start": "1859490",
    "end": "1866170"
  },
  {
    "text": "state transitions are these functions that give you modified versions of these",
    "start": "1866170",
    "end": "1872140"
  },
  {
    "text": "objects and that's again a complete separate concern and for this we use functions and then there's the much more",
    "start": "1872140",
    "end": "1879400"
  },
  {
    "text": "complex a question of associating an entity's identity with its current state so what's the current balance on my",
    "start": "1879400",
    "end": "1887620"
  },
  {
    "text": "account right and for this you really need a different abstraction so maybe you",
    "start": "1887620",
    "end": "1892960"
  },
  {
    "text": "choose to model this as a stream so using I observable or maybe you have some other primitive like an atom or a",
    "start": "1892960",
    "end": "1899620"
  },
  {
    "text": "grain I'm not going to get to get into this but the key point is that these are",
    "start": "1899620",
    "end": "1907120"
  },
  {
    "text": "separate things keeping the current state of something that changes through",
    "start": "1907120",
    "end": "1912790"
  },
  {
    "text": "time is really a separate thing than representing the state of a thing okay",
    "start": "1912790",
    "end": "1922180"
  },
  {
    "text": "so so far we've seen some some some",
    "start": "1922180",
    "end": "1927730"
  },
  {
    "text": "simple some simple logic of you know avoiding state mutation so instead of",
    "start": "1927730",
    "end": "1933360"
  },
  {
    "text": "instead of modifying stuff we create a new copy but now you say okay but what",
    "start": "1933360",
    "end": "1940390"
  },
  {
    "text": "if I need to have some state in memory that changes in other way words can we",
    "start": "1940390",
    "end": "1948160"
  },
  {
    "text": "write stateful programs without mutating state and how so this is an example of",
    "start": "1948160",
    "end": "1956410"
  },
  {
    "text": "an interaction with a very simple program so the white text is output by",
    "start": "1956410",
    "end": "1961930"
  },
  {
    "text": "the program and the gray text is the user input so would you guess this is a",
    "start": "1961930",
    "end": "1969060"
  },
  {
    "text": "stateful program",
    "start": "1969060",
    "end": "1972630"
  },
  {
    "text": "stateless okay let's see so you give it your USD eur/usd is the",
    "start": "1980110",
    "end": "1990930"
  },
  {
    "text": "it's it's euro dollar right so it's the rate from yours two dollars and it says",
    "start": "1990930",
    "end": "1996220"
  },
  {
    "text": "okay now I need to fetch the rate and then at some point it prints one point twelve and then you give it your a you D",
    "start": "1996220",
    "end": "2004650"
  },
  {
    "text": "so you're a euro Aussie dollar it says fetching rates 152 and then you",
    "start": "2004650",
    "end": "2010350"
  },
  {
    "text": "give it you USD and oh now it's different now it just gives you 112 so",
    "start": "2010350",
    "end": "2017250"
  },
  {
    "text": "it doesn't fetch the rate so it's remembered that it already fetched at a",
    "start": "2017250",
    "end": "2023520"
  },
  {
    "text": "couple lines ago and so I don't need to fetch the rate I can just reuse the rate",
    "start": "2023520",
    "end": "2028860"
  },
  {
    "text": "area I fetched right so the program has memory right so it's a stateful program",
    "start": "2028860",
    "end": "2035510"
  },
  {
    "text": "and so incidentally this is also this is not just for programs where I so when",
    "start": "2035510",
    "end": "2041220"
  },
  {
    "text": "scientists test to see whether an insect has memory or whether plant has memory",
    "start": "2041220",
    "end": "2047040"
  },
  {
    "text": "that's that's what they use right if you deliver the same stimulus twice and you get a different response then it means",
    "start": "2047040",
    "end": "2053460"
  },
  {
    "text": "that the thing the thing remembers things right so how could we write a",
    "start": "2053460",
    "end": "2060090"
  },
  {
    "text": "program like this that keeps a cache of the currency rates that it's already",
    "start": "2060090",
    "end": "2066480"
  },
  {
    "text": "retrieved without mutating state because you know stateful states with mutation",
    "start": "2066480",
    "end": "2075060"
  },
  {
    "text": "we all know how to do this right you have you have a cache somewhere and you add stuff to it so there's a pattern in",
    "start": "2075060",
    "end": "2083460"
  },
  {
    "text": "factual programming so a normal function has an input and an output and a",
    "start": "2083460",
    "end": "2088919"
  },
  {
    "text": "stateful function or a state transition if you like has an input and it also has",
    "start": "2088919",
    "end": "2094679"
  },
  {
    "text": "some state along with the input and then along with the output it also returns",
    "start": "2094679",
    "end": "2101180"
  },
  {
    "text": "the new state and then it's up to you as",
    "start": "2101180",
    "end": "2109140"
  },
  {
    "text": "a developer to to sort of wire these functions up so",
    "start": "2109140",
    "end": "2114829"
  },
  {
    "text": "that the new state is is fed into the function next time it's called so let me show you an implementation for",
    "start": "2114829",
    "end": "2123320"
  },
  {
    "text": "the program you know that retrieves the currency rates so the cash that we need",
    "start": "2123320",
    "end": "2130030"
  },
  {
    "text": "we're going to use a dictionary so we're going to map the names of the currency pair is like euro dollar that's a string",
    "start": "2130030",
    "end": "2138050"
  },
  {
    "text": "we're going to map that to the rates so that's the first line and because because we don't want to use mutation",
    "start": "2138050",
    "end": "2145369"
  },
  {
    "text": "I'm going to use an immutable dictionary and because that's kind of an ugly noisy name and immutable dictionary of string",
    "start": "2145369",
    "end": "2152630"
  },
  {
    "text": "to decimal I'm just going to alias this as rates and then if we go to the very",
    "start": "2152630",
    "end": "2159890"
  },
  {
    "text": "bottom that last line that's the function that given the name of a pair",
    "start": "2159890",
    "end": "2167089"
  },
  {
    "text": "returns the rate so this is a stateless function right and this will actually go",
    "start": "2167089",
    "end": "2172280"
  },
  {
    "text": "to the internet and say okay go to some service online and do an HTTP request",
    "start": "2172280",
    "end": "2179119"
  },
  {
    "text": "and Paris the result as a decimal and return it so the details are not",
    "start": "2179119",
    "end": "2184819"
  },
  {
    "text": "important the point is it takes the string returns the decimal and now if",
    "start": "2184819",
    "end": "2190160"
  },
  {
    "text": "you look at the function just above it look at the signature it's the same but",
    "start": "2190160",
    "end": "2195980"
  },
  {
    "text": "in addition we have the rates so we have the state both on the inputs and on the",
    "start": "2195980",
    "end": "2201619"
  },
  {
    "text": "output so it's basically the stateful version of this function and what is it",
    "start": "2201619",
    "end": "2208700"
  },
  {
    "text": "does it do it says well if my cache which is the state if my kasia really contains this currency pair then just",
    "start": "2208700",
    "end": "2216170"
  },
  {
    "text": "read just retrieve it from from the cache and the state so the cache remains unchanged otherwise go to go to the",
    "start": "2216170",
    "end": "2224240"
  },
  {
    "text": "internet to fetch the rate and return the rate as a result and then the cache with this rate added to it as the new",
    "start": "2224240",
    "end": "2232849"
  },
  {
    "text": "state and then if we go to the top to the main function main just Cosme req",
    "start": "2232849",
    "end": "2240200"
  },
  {
    "text": "meaningful for me recursive with the initial state of the program",
    "start": "2240200",
    "end": "2245250"
  },
  {
    "text": "is just an empty cache and then the program just reads the input gets to",
    "start": "2245250",
    "end": "2251280"
  },
  {
    "text": "rate with with the current value of the cache and this returns the rate and the new cache it prints the rate and then it",
    "start": "2251280",
    "end": "2258450"
  },
  {
    "text": "recursively calls itself so notice no mutable data right we only have some an",
    "start": "2258450",
    "end": "2265200"
  },
  {
    "text": "immutable dictionary and the way this changes through the life of the program is that it's complete it's always fed",
    "start": "2265200",
    "end": "2272820"
  },
  {
    "text": "back into this stateful get rate function another way to look at this",
    "start": "2272820",
    "end": "2284250"
  },
  {
    "text": "problem is through folds so I assume many of you know what all this but in",
    "start": "2284250",
    "end": "2291690"
  },
  {
    "text": "case you don't let's just review it's",
    "start": "2291690",
    "end": "2296850"
  },
  {
    "text": "really easy so a fold is an operation we have three things you have a list in",
    "start": "2296850",
    "end": "2302490"
  },
  {
    "text": "this case we have a list of oranges you have an accumulator in this case it's",
    "start": "2302490",
    "end": "2307650"
  },
  {
    "text": "the glass and then you have a reducer and in this case that's the orange price",
    "start": "2307650",
    "end": "2314610"
  },
  {
    "text": "so a reducer is a binary function that takes the accumulator and one element",
    "start": "2314610",
    "end": "2320310"
  },
  {
    "text": "from the list so you take the glass one orange and you use the reducer to",
    "start": "2320310",
    "end": "2326220"
  },
  {
    "text": "squeeze the orange into the glass and then you move on to the next orange so by the end of the fold you've squeezed",
    "start": "2326220",
    "end": "2332400"
  },
  {
    "text": "all your oranges and you've got your glass full of oranges and if we look at",
    "start": "2332400",
    "end": "2339060"
  },
  {
    "text": "it more more diagrammatically you have the list of M's so this will be your",
    "start": "2339060",
    "end": "2344490"
  },
  {
    "text": "oranges and then you have some accumulator s and then the reducer kind of squeezes the s with the first M to",
    "start": "2344490",
    "end": "2351930"
  },
  {
    "text": "get a new s s one and so on and you can",
    "start": "2351930",
    "end": "2356970"
  },
  {
    "text": "view a stateful program as a fold so you have an initial state of your",
    "start": "2356970",
    "end": "2361980"
  },
  {
    "text": "application that's s0 and your program receives a set of messages or a stream",
    "start": "2361980",
    "end": "2369360"
  },
  {
    "text": "of messages to a time that's M zero and one and two and so on and the program",
    "start": "2369360",
    "end": "2374400"
  },
  {
    "text": "itself is a reducer function so it will take the mess with the current state and it will do",
    "start": "2374400",
    "end": "2381780"
  },
  {
    "text": "some processing and then elaborate the new state and and this is not just you",
    "start": "2381780",
    "end": "2391470"
  },
  {
    "text": "know that just just a nice idea you can actually turn this into code so in c-sharp",
    "start": "2391470",
    "end": "2396510"
  },
  {
    "text": "you would turn this into code like this so if you start at the bottom this is",
    "start": "2396510",
    "end": "2403320"
  },
  {
    "text": "the same state full get rate function that we've seen in the previous example so returns the currency pair along with",
    "start": "2403320",
    "end": "2411180"
  },
  {
    "text": "the state and then we create a sequence",
    "start": "2411180",
    "end": "2416760"
  },
  {
    "text": "of inputs these are the inputs that are read from the command line and then the",
    "start": "2416760",
    "end": "2423060"
  },
  {
    "text": "main function does a fold so fold in c-sharp is called aggregates aggregate",
    "start": "2423060",
    "end": "2429050"
  },
  {
    "text": "so we aggregate the list is our list of inputs so the the values that we read from the command line the initial value",
    "start": "2429050",
    "end": "2436140"
  },
  {
    "text": "for the accumulator is an empty cache and then the reducer function is this this lambda here that takes the cache",
    "start": "2436140",
    "end": "2442740"
  },
  {
    "text": "and a single input it gets to rate it outputs the input and it returns the",
    "start": "2442740",
    "end": "2448890"
  },
  {
    "text": "updated state which will be used as a new state in the following call to the",
    "start": "2448890",
    "end": "2454410"
  },
  {
    "text": "accumulator function so in summary we",
    "start": "2454410",
    "end": "2462869"
  },
  {
    "text": "can use this pattern of having the state both on the input and in the output side",
    "start": "2462869",
    "end": "2468380"
  },
  {
    "text": "in order to write stateful programs without any state mutation and the",
    "start": "2468380",
    "end": "2476069"
  },
  {
    "text": "advantage is not only that we reduce side effects but also that it's a lot",
    "start": "2476069",
    "end": "2481950"
  },
  {
    "text": "it's a lot easier to test right how does this method affect the state of my",
    "start": "2481950",
    "end": "2489089"
  },
  {
    "text": "program well it's easy you know give you the state and then you see what state comes out and you can you can assert",
    "start": "2489089",
    "end": "2496250"
  },
  {
    "text": "what states you expect so you don't have this problem my app went into a weird",
    "start": "2496250",
    "end": "2503460"
  },
  {
    "text": "state anymore because you can just write tests in a given States and given an",
    "start": "2503460",
    "end": "2508619"
  },
  {
    "text": "input what's the expected what's the state expect and in a way you can think of this as",
    "start": "2508619",
    "end": "2515880"
  },
  {
    "text": "dependency injection funnily enough right your what is the dependency injection your dependency injection is",
    "start": "2515880",
    "end": "2522870"
  },
  {
    "text": "when you kind of make it explicit that your function depends on something well",
    "start": "2522870",
    "end": "2528990"
  },
  {
    "text": "in this case you're making explicit that your function depends on the program state and on the output side you're",
    "start": "2528990",
    "end": "2536760"
  },
  {
    "text": "making it explicit that you're your function changes the program state so",
    "start": "2536760",
    "end": "2544110"
  },
  {
    "text": "we're doing really good because we've seen that out of four side effects four types of side effects we connect we",
    "start": "2544110",
    "end": "2550950"
  },
  {
    "text": "can actually get rid of most of them so with the mutating global state it's it's",
    "start": "2550950",
    "end": "2556680"
  },
  {
    "text": "a bit harder right it takes it takes practice the other two are be easier so we're",
    "start": "2556680",
    "end": "2563310"
  },
  {
    "text": "only left with IO and can we get rid of IO no right because I always a",
    "start": "2563310",
    "end": "2569610"
  },
  {
    "text": "requirement you can't just say no I'm not gonna persist stuff to the database because I want everything to be pure",
    "start": "2569610",
    "end": "2574860"
  },
  {
    "text": "because you know you're paid for the side-effects you're not paid for the for the pure functions so what we want to do",
    "start": "2574860",
    "end": "2582390"
  },
  {
    "text": "is have the separation between logic and side-effects but now we've seen that a lot of side effects",
    "start": "2582390",
    "end": "2589620"
  },
  {
    "text": "we can avoid so hopefully the proportion will lean more towards this so more pure",
    "start": "2589620",
    "end": "2596760"
  },
  {
    "text": "functions and a smaller footprint for the for the code that performs just the",
    "start": "2596760",
    "end": "2603330"
  },
  {
    "text": "IO of course if a function calls an",
    "start": "2603330",
    "end": "2610290"
  },
  {
    "text": "impure function then that function itself is impure as a result we need to",
    "start": "2610290",
    "end": "2616050"
  },
  {
    "text": "find some way of combining logic with IO that doesn't sort of pollute the logic",
    "start": "2616050",
    "end": "2623970"
  },
  {
    "text": "with the side-effects of VO and how do we do this and there are a few candidates that I'm going to discuss",
    "start": "2623970",
    "end": "2633110"
  },
  {
    "text": "the one that's best known is dependence injection then there's this idea of",
    "start": "2633110",
    "end": "2639380"
  },
  {
    "text": "dependency rejection and finally",
    "start": "2639380",
    "end": "2645040"
  },
  {
    "text": "another approach that's called free monads so let's go back to this to this",
    "start": "2645040",
    "end": "2654220"
  },
  {
    "text": "function that we had in our in our application that fetches the exchange",
    "start": "2654220",
    "end": "2662050"
  },
  {
    "text": "rates so if we look at the the part",
    "start": "2662050",
    "end": "2667390"
  },
  {
    "text": "above we've seen that we've with kated for the for the state mutation so",
    "start": "2667390",
    "end": "2673960"
  },
  {
    "text": "there's no side effects in terms of state mutation but there's a side effect in terms of IO right because when you",
    "start": "2673960",
    "end": "2680619"
  },
  {
    "text": "call the the other get rate the one that that is stateless that goes to the",
    "start": "2680619",
    "end": "2685780"
  },
  {
    "text": "Internet all right it goes to the market to get the exchange rate so you couldn't",
    "start": "2685780",
    "end": "2691660"
  },
  {
    "text": "really test this function right in unit tests for example so what do you do with",
    "start": "2691660",
    "end": "2698920"
  },
  {
    "text": "dependency injection in this case I'm using a completely functional approach so I inject a function to get the rate",
    "start": "2698920",
    "end": "2707410"
  },
  {
    "text": "so this is a function that takes a string and returns the decimal and I call that so in the in the real",
    "start": "2707410",
    "end": "2715810"
  },
  {
    "text": "application I would inject the get rate function from before that that goes to",
    "start": "2715810",
    "end": "2721600"
  },
  {
    "text": "the Internet to get the rate and if I want to test this function I will instead inject a function that just",
    "start": "2721600",
    "end": "2728350"
  },
  {
    "text": "returns a pre can't answer right and this is a more functional approach and",
    "start": "2728350",
    "end": "2735550"
  },
  {
    "text": "then of course we have the object-oriented approach of injecting an interface into the constructor of an",
    "start": "2735550",
    "end": "2741880"
  },
  {
    "text": "object but basically it's the same idea right you you you inject behavior so you",
    "start": "2741880",
    "end": "2750130"
  },
  {
    "text": "can then choose to wire up these",
    "start": "2750130",
    "end": "2755590"
  },
  {
    "text": "functions so that you get a testable version or a real live version then",
    "start": "2755590",
    "end": "2764109"
  },
  {
    "text": "there is this idea of dependency rejection and this is this is a term",
    "start": "2764109",
    "end": "2769510"
  },
  {
    "text": "that was coined by Mac Simon he's a frequent speaker at NBC so I definitely",
    "start": "2769510",
    "end": "2778570"
  },
  {
    "text": "think to check out his videos of previous prevent presentations and what he says",
    "start": "2778570",
    "end": "2786430"
  },
  {
    "text": "is well we want to isolate logic from IO which is what I've been preaching so far",
    "start": "2786430",
    "end": "2792240"
  },
  {
    "text": "so we're going to have all the logic or as much as possible in pure functions so",
    "start": "2792240",
    "end": "2798010"
  },
  {
    "text": "these can be testable and then we're going to have I owe in impure functions",
    "start": "2798010",
    "end": "2804730"
  },
  {
    "text": "and these are not going to be testable and then for a sort of top level",
    "start": "2804730",
    "end": "2811330"
  },
  {
    "text": "workflow we need to compose this tool so we will have sort of a high-level",
    "start": "2811330",
    "end": "2816490"
  },
  {
    "text": "workflow that takes the input from one of these functions and feeds it into the next and so on well of course because",
    "start": "2816490",
    "end": "2825430"
  },
  {
    "text": "these high high level workflow use the i/o functions these are also impure",
    "start": "2825430",
    "end": "2831700"
  },
  {
    "text": "these are also not testable so a lot of three things you see that only one thing",
    "start": "2831700",
    "end": "2837070"
  },
  {
    "text": "is testable so it's not very testable and the other thing is it's also not very general because if you go back to",
    "start": "2837070",
    "end": "2844840"
  },
  {
    "text": "this code and if you look at the top part how do you take that that impure",
    "start": "2844840",
    "end": "2851890"
  },
  {
    "text": "get rate function and sort of extract it",
    "start": "2851890",
    "end": "2857100"
  },
  {
    "text": "how do you call that without side-effect without actually ending up with exactly the same as with",
    "start": "2857100",
    "end": "2865600"
  },
  {
    "text": "the pendous injection",
    "start": "2865600",
    "end": "2868440"
  },
  {
    "text": "so in other words I think the idea is valid and it works some of the time but",
    "start": "2871890",
    "end": "2879450"
  },
  {
    "text": "as I said it's not very testable and it's not very general and the last and I",
    "start": "2879450",
    "end": "2885930"
  },
  {
    "text": "guess most innovative approach I'm going to describe is three months",
    "start": "2885930",
    "end": "2892430"
  },
  {
    "text": "now three months is a topic that deserves talking itself so this will be",
    "start": "2892430",
    "end": "2899130"
  },
  {
    "text": "only a very brief presentation so don't worry if you don't get everything but",
    "start": "2899130",
    "end": "2904980"
  },
  {
    "text": "just to get a feel for this free model is is much more radical than dependency",
    "start": "2904980",
    "end": "2912809"
  },
  {
    "text": "injection in separating logic from side-effects and it basically consists",
    "start": "2912809",
    "end": "2918720"
  },
  {
    "text": "of three steps so you use data objects to represent instructions this is",
    "start": "2918720",
    "end": "2925739"
  },
  {
    "text": "somehow the same as in the object-oriented command pattern right rather than calling something I'm going to create an object and this object is",
    "start": "2925739",
    "end": "2932489"
  },
  {
    "text": "going to contain the data that I might then use as parameters to code to call this thing and then I will have on one",
    "start": "2932489",
    "end": "2941160"
  },
  {
    "text": "side the logic that produces this list of instructions so this doesn't have any",
    "start": "2941160",
    "end": "2946799"
  },
  {
    "text": "side effects it's just logic right and on the other side I'm going to have an interpreter they will take those",
    "start": "2946799",
    "end": "2953339"
  },
  {
    "text": "instructions and translate them into side-effects so this is a bit like the idea of having a shopping list so you",
    "start": "2953339",
    "end": "2960839"
  },
  {
    "text": "can compile your shopping list and that's just data just for writing the shopping list doesn't mean that you go",
    "start": "2960839",
    "end": "2966390"
  },
  {
    "text": "shopping so you can write this shopping list that's just data and then you pass",
    "start": "2966390",
    "end": "2971430"
  },
  {
    "text": "it to your errand boy that he's the interpreter right who goes out and does",
    "start": "2971430",
    "end": "2978599"
  },
  {
    "text": "the shopping for you so he does all side effects you only deal with the data or you could choose to pass that list to",
    "start": "2978599",
    "end": "2986279"
  },
  {
    "text": "your accountant and he could check to see if you know if your budget is okay so you have a variety of interpreters",
    "start": "2986279",
    "end": "2993239"
  },
  {
    "text": "for the same instructions and let's see how the previous program could be",
    "start": "2993239",
    "end": "2998670"
  },
  {
    "text": "refactored to use Freeman odds so instructions as I said are simply data",
    "start": "2998670",
    "end": "3004819"
  },
  {
    "text": "objects so you have a class represent so DSL stands for domain-specific language so",
    "start": "3004819",
    "end": "3012200"
  },
  {
    "text": "you have a DSL for communicating to the to the standard output and two",
    "start": "3012200",
    "end": "3019070"
  },
  {
    "text": "operations ask which is when you read from console and tell which is when you print to the console and then you have",
    "start": "3019070",
    "end": "3025040"
  },
  {
    "text": "DSL for HTTP and I'm just going I just need to read from the console in this case if you're doing more you you might",
    "start": "3025040",
    "end": "3034700"
  },
  {
    "text": "have other instructions for post with more parameters and so on so basically you just have some data that somebody",
    "start": "3034700",
    "end": "3042410"
  },
  {
    "text": "else can then use to perform the side effects and this is an example of the",
    "start": "3042410",
    "end": "3049160"
  },
  {
    "text": "interpreter so this is your errand boy he just takes an instruction and it's",
    "start": "3049160",
    "end": "3054890"
  },
  {
    "text": "basically switch so what's destruction if distraction is to ask then I'm going",
    "start": "3054890",
    "end": "3060980"
  },
  {
    "text": "to read line from the console if the instruction is tutele then i'm going to",
    "start": "3060980",
    "end": "3066320"
  },
  {
    "text": "write the the message that is part of the payload of the of the tail object",
    "start": "3066320",
    "end": "3072920"
  },
  {
    "text": "I'm going to write that to the console and this return unit which just returns the empty tuple because it's it's a bit",
    "start": "3072920",
    "end": "3082460"
  },
  {
    "text": "like void right because this is this is data doesn't return any any data so I",
    "start": "3082460",
    "end": "3088520"
  },
  {
    "text": "just use the empty tuple and in the case of a get I perform an HTTP client get",
    "start": "3088520",
    "end": "3095720"
  },
  {
    "text": "string on the given URL so I only need to care about these three types of",
    "start": "3095720",
    "end": "3101150"
  },
  {
    "text": "instructions for the given program and then this is the the trick where there's",
    "start": "3101150",
    "end": "3108470"
  },
  {
    "text": "a bit of magic right because I don't have time to really explain about three months now but you have these these",
    "start": "3108470",
    "end": "3117109"
  },
  {
    "text": "helper methods so it's it's called Factory so this is a factory for",
    "start": "3117109",
    "end": "3122330"
  },
  {
    "text": "creating not exactly instructions but this creates three monads",
    "start": "3122330",
    "end": "3128420"
  },
  {
    "text": "that contain these instructions so let's look at the first one it's a free of string so a free of string is a workflow",
    "start": "3128420",
    "end": "3138540"
  },
  {
    "text": "that when you run will produce a string and in this case I'm producing it I'm",
    "start": "3138540",
    "end": "3144570"
  },
  {
    "text": "putting on a skin to it so this is a workflow that consists of exactly one",
    "start": "3144570",
    "end": "3149790"
  },
  {
    "text": "instruction and instruction is to ask something from the command line and then likewise I have a tell a",
    "start": "3149790",
    "end": "3160140"
  },
  {
    "text": "function with a message and this will create a workflow of one instruction that when executed we return unit so it",
    "start": "3160140",
    "end": "3167820"
  },
  {
    "text": "will return no data and similarly for get and now we have the logic so we have",
    "start": "3167820",
    "end": "3177540"
  },
  {
    "text": "these functions for creating these workflows and then we use linked",
    "start": "3177540",
    "end": "3183650"
  },
  {
    "text": "comprehensions to glue up these workflows so remember with a shopping",
    "start": "3183650",
    "end": "3190740"
  },
  {
    "text": "list if you just have a list of data then I can give you very autonomous",
    "start": "3190740",
    "end": "3198510"
  },
  {
    "text": "extractions you know like I get some bread get some milk but I can't really say you know get a",
    "start": "3198510",
    "end": "3206040"
  },
  {
    "text": "basket and then what I want to say is then get some milk and put it in the",
    "start": "3206040",
    "end": "3211830"
  },
  {
    "text": "basket but I somehow need a reference to the basket which have but that basket",
    "start": "3211830",
    "end": "3217560"
  },
  {
    "text": "doesn't exist yet right because it's it's not been interpreted yet right so the Fremen is what exactly what",
    "start": "3217560",
    "end": "3224940"
  },
  {
    "text": "basically here allows you to say ask which is work for that will ask from the",
    "start": "3224940",
    "end": "3232050"
  },
  {
    "text": "command line and then from pair in ask that variable pair will be the result of executing the",
    "start": "3232050",
    "end": "3242820"
  },
  {
    "text": "ask after it's been interpreted so some",
    "start": "3242820",
    "end": "3247980"
  },
  {
    "text": "program some interpretive in the future will interpret this logic it will run ask and it will end up with a string",
    "start": "3247980",
    "end": "3254250"
  },
  {
    "text": "that is read from the from the console and I'm gonna call this pair now and on",
    "start": "3254250",
    "end": "3261780"
  },
  {
    "text": "the on the second from Clause I cannot refer to pair so you can see in the in the URL we have the pair we pass this as",
    "start": "3261780",
    "end": "3268380"
  },
  {
    "text": "part of to the URL and we and we use this to create our second instruction we I want to the next thing I want to do is",
    "start": "3268380",
    "end": "3274470"
  },
  {
    "text": "I want to get the data from this URL and I'm going to call it rate and then my",
    "start": "3274470",
    "end": "3282089"
  },
  {
    "text": "third instruction will be to tell that rate so to print it to the console and then I'm going to recursively call the",
    "start": "3282089",
    "end": "3288390"
  },
  {
    "text": "main logic so this goes on forever so this is the logic for the stateless",
    "start": "3288390",
    "end": "3294540"
  },
  {
    "text": "version of the of the program that reads currency pairs from the from the console",
    "start": "3294540",
    "end": "3300839"
  },
  {
    "text": "and retrieves the rates from the internet and prints it out back to the",
    "start": "3300839",
    "end": "3307200"
  },
  {
    "text": "console and if I want a stateful version it's just slightly more complex so we",
    "start": "3307200",
    "end": "3316500"
  },
  {
    "text": "should start from the bottom so where it says return we see the first times it's the same so we still have asked as the",
    "start": "3316500",
    "end": "3324060"
  },
  {
    "text": "you know the first operation is that you're going to read what's what's been input and I'll call that input and then",
    "start": "3324060",
    "end": "3330180"
  },
  {
    "text": "I have this cache that's that's given as an as an input to the main logic and if",
    "start": "3330180",
    "end": "3339510"
  },
  {
    "text": "it's a cache contains it then retrieve it locally otherwise which we've it remotely and then you have these two",
    "start": "3339510",
    "end": "3348599"
  },
  {
    "text": "cases again so the retrieve locally is a",
    "start": "3348599",
    "end": "3354230"
  },
  {
    "text": "very simple workflow that just returns that value and which we've remotely is",
    "start": "3354230",
    "end": "3360619"
  },
  {
    "text": "more complex for a workflow that firstly prints fetching ray to the console and",
    "start": "3360619",
    "end": "3365790"
  },
  {
    "text": "then gets the rate from the internet and then parses that rate as decimal and",
    "start": "3365790",
    "end": "3371400"
  },
  {
    "text": "then returns the pair rate and the",
    "start": "3371400",
    "end": "3376619"
  },
  {
    "text": "updated cache so what this illustrates",
    "start": "3376619",
    "end": "3383790"
  },
  {
    "text": "is that with free moniz you can basically have conditionals right",
    "start": "3383790",
    "end": "3390390"
  },
  {
    "text": "if-else but you use the the ternary if with question mark :",
    "start": "3390390",
    "end": "3395790"
  },
  {
    "text": "you have loops but you use recursion but recursion with free bonus is stack safe",
    "start": "3395790",
    "end": "3401720"
  },
  {
    "text": "because the free monitor exactly actually creates a it creates a structure right the free mana is just data that is then",
    "start": "3401720",
    "end": "3410460"
  },
  {
    "text": "interpreted but most importantly you can refer to values returned from previous",
    "start": "3410460",
    "end": "3416820"
  },
  {
    "text": "instructions so I can refer to input before that input is ever evaluated and",
    "start": "3416820",
    "end": "3423619"
  },
  {
    "text": "finally to put this all together you need to wire up your logic to the interpreter and interpreter remember it",
    "start": "3423619",
    "end": "3430920"
  },
  {
    "text": "was this function that we saw at the beginning with the with the big switch statement and main logic is the function",
    "start": "3430920",
    "end": "3437310"
  },
  {
    "text": "we just saw so we we call main logic with initial state which is an empty cache and then we run it with the",
    "start": "3437310",
    "end": "3443190"
  },
  {
    "text": "interpreter and you have to sort of take my word that this really works but I",
    "start": "3443190",
    "end": "3450330"
  },
  {
    "text": "would also pass you the gate lab repo so",
    "start": "3450330",
    "end": "3456630"
  },
  {
    "text": "you can actually run it and check it out for yourselves so in summary pure functions have some",
    "start": "3456630",
    "end": "3465030"
  },
  {
    "text": "very desirable qualities that you should take advantage of you want to limit your",
    "start": "3465030",
    "end": "3470580"
  },
  {
    "text": "side effects for possible and isolate them otherwise so you want to try to always avoid mutating arguments and",
    "start": "3470580",
    "end": "3477750"
  },
  {
    "text": "exception based logic and also try to avoid global mutable state and you want",
    "start": "3477750",
    "end": "3484050"
  },
  {
    "text": "to separate logic from i/o and use pure functions for logic and make your i/o as",
    "start": "3484050",
    "end": "3490790"
  },
  {
    "text": "as limited as possible and you know the mantra of keeping your function honest",
    "start": "3490790",
    "end": "3496830"
  },
  {
    "text": "remember it's always about inputs and outputs if in doubt this concludes my talk so",
    "start": "3496830",
    "end": "3504150"
  },
  {
    "text": "thanks for coming yes this is the one you need to take pictures off the top",
    "start": "3504150",
    "end": "3510750"
  },
  {
    "text": "URL is the URL for these slides which are already online the second URL is the repo for all the",
    "start": "3510750",
    "end": "3518550"
  },
  {
    "text": "code that you've seen so you can look at it in your own time you can run examples you can see that even with a million",
    "start": "3518550",
    "end": "3525330"
  },
  {
    "text": "recursive calls the free Mona's are stack safe and finally of course a",
    "start": "3525330",
    "end": "3531570"
  },
  {
    "text": "reminder you know if you're interested in this topic there's a great book called functional programming in c-sharp",
    "start": "3531570",
    "end": "3536849"
  },
  {
    "text": "written by myself and thanks for Manning who is offering",
    "start": "3536849",
    "end": "3542880"
  },
  {
    "text": "you today 50% off the purchase of the book by using the the deal of the day",
    "start": "3542880",
    "end": "3551609"
  },
  {
    "text": "code that you can see just there at the bottom you can see my Twitter handle and",
    "start": "3551609",
    "end": "3558720"
  },
  {
    "text": "have exactly one minute for questions",
    "start": "3558720",
    "end": "3562220"
  },
  {
    "text": "quite possibly yeah I don't know what implementation you've used I've written",
    "start": "3572750",
    "end": "3578760"
  },
  {
    "text": "my own implementation and I haven't profiled it but yeah check it out and",
    "start": "3578760",
    "end": "3585180"
  },
  {
    "text": "let me know any other questions all",
    "start": "3585180",
    "end": "3593190"
  },
  {
    "text": "right thanks very much [Applause]",
    "start": "3593190",
    "end": "3600599"
  }
]