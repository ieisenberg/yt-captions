[
  {
    "start": "0",
    "end": "169000"
  },
  {
    "text": "okay welcome everybody this is my second talk of this conference so I'm already exhausted this as I said this is very",
    "start": "12430",
    "end": "20920"
  },
  {
    "text": "intensive presentation and I have like 90 slides so there is no way we're gonna",
    "start": "20920",
    "end": "28210"
  },
  {
    "text": "get through all of this so instead of seven things every programmer should know this is really seven categories of",
    "start": "28210",
    "end": "35500"
  },
  {
    "text": "things that everyone should know and I guarantee that even if I only get through three categories you'll have all",
    "start": "35500",
    "end": "40570"
  },
  {
    "text": "learned more than seven things so maybe we have to cheat a little so those of",
    "start": "40570",
    "end": "45940"
  },
  {
    "text": "you who came to my talk earlier today will have heard me talk about the exponential growth in programming as a",
    "start": "45940",
    "end": "52800"
  },
  {
    "text": "as something people do and that is no more more true than for Python at the",
    "start": "52800",
    "end": "59739"
  },
  {
    "text": "moment look at the growth of Python from this blog post from Stack Overflow earlier this year it I mean it literally",
    "start": "59739",
    "end": "66580"
  },
  {
    "text": "is exponential it's huge and it's outpacing almost everything else so",
    "start": "66580",
    "end": "71710"
  },
  {
    "text": "Python is hugely popular it's used in so many different domains so data science",
    "start": "71710",
    "end": "78480"
  },
  {
    "text": "building software that's written in C++ configuring stuff in the cloud building",
    "start": "78480",
    "end": "84310"
  },
  {
    "text": "websites Python is used for all kinds of different domains which i think is what's behind this growth and this",
    "start": "84310",
    "end": "90760"
  },
  {
    "text": "growth is just incredible it's gone up by a factor of two in five years in fact use the the function on the right of the",
    "start": "90760",
    "end": "98440"
  },
  {
    "text": "screen to figure out how many million Python developers there are in any given year this is 20 percent annual growth",
    "start": "98440",
    "end": "106140"
  },
  {
    "text": "back in 2012 there were three million Python developers estimated to being old and already there are more than seven",
    "start": "106140",
    "end": "113110"
  },
  {
    "text": "million what this exponential growth means is that most Python developers",
    "start": "113110",
    "end": "119320"
  },
  {
    "text": "have relatively little experience just because the influx of new people is so high and in any situation where you have",
    "start": "119320",
    "end": "126430"
  },
  {
    "text": "a exponential growth the newcomers tend to rapidly outnumber the oldsters like",
    "start": "126430",
    "end": "133360"
  },
  {
    "text": "me programming in Python since 1999 so",
    "start": "133360",
    "end": "139019"
  },
  {
    "text": "because of that this talk is unashamedly focused on what I consider to be pretty",
    "start": "139709",
    "end": "145239"
  },
  {
    "text": "basic for the mental things that every Python programmer should know okay because most",
    "start": "145239",
    "end": "151959"
  },
  {
    "text": "people just don't have that much experience when I go to tech conferences I'm always surprised at the incredible",
    "start": "151959",
    "end": "157329"
  },
  {
    "text": "sophisticated things people are presenting and sometimes the mismatch between that and the skills that people",
    "start": "157329",
    "end": "163689"
  },
  {
    "text": "have already managed to build so this is basic straightforward stuff so seven",
    "start": "163689",
    "end": "171069"
  },
  {
    "start": "169000",
    "end": "306000"
  },
  {
    "text": "things number one know when code is executed you might think this is simple",
    "start": "171069",
    "end": "176230"
  },
  {
    "text": "you might think Cody's executed when it's called but it's more complicated than that so here's some code I didn't",
    "start": "176230",
    "end": "183129"
  },
  {
    "text": "write this this is part of the Apache Kafka binding for Python written by",
    "start": "183129",
    "end": "189310"
  },
  {
    "text": "people who really know how to code Apache Kafka is a rare serious piece of",
    "start": "189310",
    "end": "194769"
  },
  {
    "text": "software so which code is executed when we import this module everything you can",
    "start": "194769",
    "end": "200950"
  },
  {
    "text": "see on this screen with a yellow background is executed when we import this module there's a compiler directive",
    "start": "200950",
    "end": "206950"
  },
  {
    "text": "at the top that changes the behavior of the language there's a whole load of imports they're all executed when this",
    "start": "206950",
    "end": "213459"
  },
  {
    "text": "module is imported there's a global attribute called log being created and a",
    "start": "213459",
    "end": "220629"
  },
  {
    "text": "method call being made to initialize the attribute and the module is imported",
    "start": "220629",
    "end": "227069"
  },
  {
    "text": "there's a class definition class definition is something that happens in run at runtime in Python those of you",
    "start": "227069",
    "end": "233829"
  },
  {
    "text": "worked in other languages like C++ classes are a static thing they don't even exist at runtime we have some class",
    "start": "233829",
    "end": "242560"
  },
  {
    "text": "attributes being created these are like static attributes if you're used to C++ static class attributes these are being",
    "start": "242560",
    "end": "249519"
  },
  {
    "text": "created when the module is imported and the method definition of init function",
    "start": "249519",
    "end": "255819"
  },
  {
    "text": "is being executed the body of the method is not executed of course but it is",
    "start": "255819",
    "end": "261639"
  },
  {
    "text": "passed but the definition that DEF statement is executed and as we go",
    "start": "261639",
    "end": "268030"
  },
  {
    "text": "through this pretty substantial piece of Python code I've highlighted all the bits in yellow which are executed when",
    "start": "268030",
    "end": "274830"
  },
  {
    "text": "the module is imported all the method definitions executed it's lots and lots of method definitions",
    "start": "274830",
    "end": "282040"
  },
  {
    "text": "in this file there's a decorator here a property decorator that is also executed",
    "start": "282040",
    "end": "287400"
  },
  {
    "text": "does some work to wrap up that function topics in a thing called a descriptor",
    "start": "287400",
    "end": "293800"
  },
  {
    "text": "that's out happening when we import the module for the first time lots of lots",
    "start": "293800",
    "end": "298810"
  },
  {
    "text": "and lots of method definition here all executed some more here",
    "start": "298810",
    "end": "305580"
  },
  {
    "start": "306000",
    "end": "630000"
  },
  {
    "text": "did you see the obvious bugs in this code as it was flying by in the hello",
    "start": "306030",
    "end": "311410"
  },
  {
    "text": "bits probably not but maybe some of the experience Python programmers will have",
    "start": "311410",
    "end": "317590"
  },
  {
    "text": "spotted them there are of course two types of Python developers those who",
    "start": "317590",
    "end": "323200"
  },
  {
    "text": "spot the bugs and those who did so where are they let's zoom back up here they",
    "start": "323200",
    "end": "329560"
  },
  {
    "text": "are there are three of them right here bear in mind this is the Apache Kafka",
    "start": "329560",
    "end": "334840"
  },
  {
    "text": "binding and it's probably in production in hundreds of important places can you",
    "start": "334840",
    "end": "343120"
  },
  {
    "text": "see them now so those have you done a",
    "start": "343120",
    "end": "350080"
  },
  {
    "text": "bit of Python probably understand what's going on here and it's potentially very serious because these lines in yellow",
    "start": "350080",
    "end": "357670"
  },
  {
    "text": "are executed only once when the module is first imported these empty lists are",
    "start": "357670",
    "end": "363490"
  },
  {
    "text": "constructed only once they constructed exactly once when the module is first",
    "start": "363490",
    "end": "369580"
  },
  {
    "text": "imported and lists the square brackets are mutable data structures and so any",
    "start": "369580",
    "end": "375840"
  },
  {
    "text": "modifications to that list will persist across calls to the same function okay",
    "start": "375840",
    "end": "382750"
  },
  {
    "text": "so you've made your function have some persistent state beyond the life of each function call so this really innocuous",
    "start": "382750",
    "end": "389620"
  },
  {
    "text": "looking thing where this default argument of a list is actually potentially very dangerous let's",
    "start": "389620",
    "end": "395020"
  },
  {
    "text": "demonstrate that with a simpler example this is my very simple version of send request etics some payload objects and",
    "start": "395020",
    "end": "404350"
  },
  {
    "text": "the actual payloads it's printed prints out are going to include a first item which is the number of items in the",
    "start": "404350",
    "end": "410350"
  },
  {
    "text": "payload list including the into itself so let's see how this works if I",
    "start": "410350",
    "end": "415889"
  },
  {
    "text": "send three items I get a list with four items in it and the foot the initial",
    "start": "415889",
    "end": "421169"
  },
  {
    "text": "four there is the total length of the list first straightforward little function this if I pass two things in I",
    "start": "421169",
    "end": "428490"
  },
  {
    "text": "get the result I would expect a list with a total of three items including the count in the first item if I send a",
    "start": "428490",
    "end": "435900"
  },
  {
    "text": "name list in it still works I get a list with one item containing a count of one",
    "start": "435900",
    "end": "442460"
  },
  {
    "text": "so you might think that calling it with the empty list is equivalent to what we get in the default case let's see so",
    "start": "442460",
    "end": "453180"
  },
  {
    "text": "well passing the empty list in works multiple times if we rely on the default argument though it still appears to work",
    "start": "453180",
    "end": "462020"
  },
  {
    "text": "but the next time we call this we've carried over some states from the",
    "start": "462020",
    "end": "467580"
  },
  {
    "text": "previous invocation of the function and on and on non and this list will only",
    "start": "467580",
    "end": "474419"
  },
  {
    "text": "ever grow each time we call the function so this is definitely something you need",
    "start": "474419",
    "end": "479880"
  },
  {
    "text": "to know about Python programming is that when you are dealing with default empty",
    "start": "479880",
    "end": "486360"
  },
  {
    "text": "collections you really don't want to be using a multiple collection in case that state is carried over because that",
    "start": "486360",
    "end": "491880"
  },
  {
    "text": "collection is only initialized once per run of your whole program how do we deal",
    "start": "491880",
    "end": "500699"
  },
  {
    "text": "with this well we could use an immutable collection the parentheses here are a empty tuple tuples are immutable so",
    "start": "500699",
    "end": "510810"
  },
  {
    "text": "we've made ourselves immune to that particular problem and this version of",
    "start": "510810",
    "end": "516539"
  },
  {
    "text": "the function has much better behavior we now don't suffer from the problem of",
    "start": "516539",
    "end": "522930"
  },
  {
    "text": "accumulating state across invocations of the function this particular solution of",
    "start": "522930",
    "end": "528180"
  },
  {
    "text": "using an immutable tuple I hardly ever see it and I read that people is inappropriate because now it looks like",
    "start": "528180",
    "end": "534660"
  },
  {
    "text": "you have to send a tuple into the function rather than a list so it's not very popular even that works",
    "start": "534660",
    "end": "541830"
  },
  {
    "text": "much more popular and better is to use a sentinel value non and then detect",
    "start": "541830",
    "end": "549540"
  },
  {
    "text": "whether the default value Sentinel has been relied upon and if it is then",
    "start": "549540",
    "end": "556200"
  },
  {
    "text": "create an empty list within the function you can see here and doing payloads will",
    "start": "556200",
    "end": "561329"
  },
  {
    "text": "be payloads if Palos is not known otherwise create a new list and of course that will happen afresh on every",
    "start": "561329",
    "end": "568290"
  },
  {
    "text": "invocation of that function so there's no way for us to carry state across calls to the same function so that's a",
    "start": "568290",
    "end": "576450"
  },
  {
    "text": "that's the much more widespread solution to this problem and something you should know about as you can see on the right",
    "start": "576450",
    "end": "585779"
  },
  {
    "text": "this works as expected now when we rely on the default you might see a shortcut",
    "start": "585779",
    "end": "593279"
  },
  {
    "text": "for this I don't see this so often these days and I wouldn't recommend writing the code this way but it may be",
    "start": "593279",
    "end": "599670"
  },
  {
    "text": "something you need to know how to read you can see here I'm using payloads",
    "start": "599670",
    "end": "606660"
  },
  {
    "text": "equals payload or the empty list and this relies a quirk of the way the",
    "start": "606660",
    "end": "612899"
  },
  {
    "text": "logical operators work in Python it reads quite nicely in English but it is",
    "start": "612899",
    "end": "618089"
  },
  {
    "text": "relying on a kind of oddity of Python which we will return to later but this",
    "start": "618089",
    "end": "624180"
  },
  {
    "text": "has the same behavior okay number two",
    "start": "624180",
    "end": "632360"
  },
  {
    "start": "630000",
    "end": "899000"
  },
  {
    "text": "well in that previous version we relied on a sentinel object known in order to",
    "start": "632360",
    "end": "637890"
  },
  {
    "text": "flag up the use of or the reliance on the default argument so in this section",
    "start": "637890",
    "end": "646560"
  },
  {
    "text": "I'm going to expand on the use of Sentinel objects like none and give you some alternatives it's very important",
    "start": "646560",
    "end": "653010"
  },
  {
    "text": "techniques here so on the Left you don't have to read all this code you just have to understand what it does we have a",
    "start": "653010",
    "end": "658800"
  },
  {
    "text": "function called batched which will take any iterable series and collect it up into batch sizes that we give it so let",
    "start": "658800",
    "end": "665760"
  },
  {
    "text": "me give you an example so you can see how that works will import batched well",
    "start": "665760",
    "end": "670890"
  },
  {
    "text": "I'll make a list of numbers there's the even numbers up to 20 using a range so that's our input data",
    "start": "670890",
    "end": "678220"
  },
  {
    "text": "and I'm going to pass that input data to my batch function with a batch size of",
    "start": "678220",
    "end": "683980"
  },
  {
    "text": "three and we get a list of Lists as the result with a batch size of three but of",
    "start": "683980",
    "end": "690880"
  },
  {
    "text": "course because my input data isn't a multiple of three long we have a partial batch at the end okay so you'll notice",
    "start": "690880",
    "end": "703029"
  },
  {
    "text": "that the definition on the left has a padding argument which is defaulted to",
    "start": "703029",
    "end": "709839"
  },
  {
    "text": "normal so let's try to do batching with padding so now I'd like to pad any",
    "start": "709839",
    "end": "715750"
  },
  {
    "text": "partial batches with zero because I don't like the fact that all of my batches are not the same length so when",
    "start": "715750",
    "end": "722950"
  },
  {
    "text": "we run this you see that the final group there has the two zeroes padding it so",
    "start": "722950",
    "end": "729790"
  },
  {
    "text": "it has a length of the three now I'd like to pad it with nan instead this is",
    "start": "729790",
    "end": "735370"
  },
  {
    "text": "a reasonable thing to do what happens when I pad with no it doesn't work why",
    "start": "735370",
    "end": "744520"
  },
  {
    "text": "can't I pad with nan because I've used known as the sentinel value to detect",
    "start": "744520",
    "end": "750930"
  },
  {
    "text": "whether the default argument is in play so now I'm doing something that in item",
    "start": "750930",
    "end": "757329"
  },
  {
    "text": "one I recommended you do and now we've fallen flat on our face it doesn't work so what we need is something like nan",
    "start": "757329",
    "end": "764260"
  },
  {
    "text": "that isn't none nan is just a singleton object in Python as there is only ever",
    "start": "764260",
    "end": "770770"
  },
  {
    "text": "one instance of nan in the whole program so we can play the same trick we can",
    "start": "770770",
    "end": "776440"
  },
  {
    "text": "make another object of which there is only ever one in the same program and it's very very easy to do if you look at",
    "start": "776440",
    "end": "784570"
  },
  {
    "text": "the top left on the definition I'm now creating an object called unset I've put",
    "start": "784570",
    "end": "790329"
  },
  {
    "text": "it in capitals because it's a constant I'm just gonna create an object that object doesn't have to have any",
    "start": "790329",
    "end": "795700"
  },
  {
    "text": "particular type I only care that it's a distinct object that nobody else has and",
    "start": "795700",
    "end": "801459"
  },
  {
    "text": "I'm gonna call it unset okay now in my definition of the code near the bottom",
    "start": "801459",
    "end": "808660"
  },
  {
    "text": "you can see where I say if padding is not known three lines up from the bottom I cannot change that I can change my",
    "start": "808660",
    "end": "817329"
  },
  {
    "text": "default argument first so as padding defaults to unset and now I can say if",
    "start": "817329",
    "end": "822819"
  },
  {
    "text": "padding is not unset and nobody else really knows about this unset' variable",
    "start": "822819",
    "end": "828670"
  },
  {
    "text": "or how to get a hold of it so no one there's no legitimate reason to want to actually pass and set into",
    "start": "828670",
    "end": "836680"
  },
  {
    "text": "this function as the padding object so now because I'm not using non with the",
    "start": "836680",
    "end": "843220"
  },
  {
    "text": "new version of the function okay some numbers again do the batching and now I",
    "start": "843220",
    "end": "851680"
  },
  {
    "text": "can do padding with none and I get padding with one so sometimes you'll see",
    "start": "851680",
    "end": "858250"
  },
  {
    "text": "people just creating these objects of type object we don't really care about",
    "start": "858250",
    "end": "863439"
  },
  {
    "text": "the details of that object at all we just want a unique object in the program",
    "start": "863439",
    "end": "869550"
  },
  {
    "text": "quite often that's done a global scope out in the with no indent in the module",
    "start": "869550",
    "end": "876279"
  },
  {
    "text": "so that's a useful technique to know if you need a default but you need something that's completely out of the",
    "start": "876279",
    "end": "883120"
  },
  {
    "text": "domain of the values you would normally use it also means you can give your default a nice name rather than having",
    "start": "883120",
    "end": "890860"
  },
  {
    "text": "it called non so unset fits in this case there are other cases where other names",
    "start": "890860",
    "end": "896050"
  },
  {
    "text": "might fit okay a very important thing",
    "start": "896050",
    "end": "902199"
  },
  {
    "text": "about Python listen no has scopes and namespaces relate these ideas often get",
    "start": "902199",
    "end": "910149"
  },
  {
    "text": "confused in people's minds and they use these terms interchangeably but they have very specific meaning yeah I only",
    "start": "910149",
    "end": "922689"
  },
  {
    "text": "ever taught Python 3 James yeah - stream",
    "start": "922689",
    "end": "931259"
  },
  {
    "text": "so this is the Zen of Python who here's",
    "start": "931600",
    "end": "937910"
  },
  {
    "text": "a Python programmer ok who's familiar with the Zen of Python ok everyone who's",
    "start": "937910",
    "end": "944330"
  },
  {
    "text": "a Python programmer you can get the Zen of Python in Python just by typing import this it's very nice to be working",
    "start": "944330",
    "end": "952280"
  },
  {
    "text": "in a language that comes with built in poetry I'm not going to read the whole language the whole poem to you I want to",
    "start": "952280",
    "end": "960110"
  },
  {
    "text": "highlight the last one there which is that namespaces are one honking great idea let's do more of those let's get to",
    "start": "960110",
    "end": "968060"
  },
  {
    "text": "grips with what namespaces are and how that relates to scope so a namespace in",
    "start": "968060",
    "end": "975170"
  },
  {
    "text": "Python is a collection that binds the names of objects to the actual objects",
    "start": "975170",
    "end": "981080"
  },
  {
    "text": "themselves whereas the scope is the region of the program which a particular",
    "start": "981080",
    "end": "988760"
  },
  {
    "text": "name binding applies ok so it's a region of the source code now I often say that",
    "start": "988760",
    "end": "996980"
  },
  {
    "text": "everything in Python is an object it's almost which is true it's almost true that everything in Python is a",
    "start": "996980",
    "end": "1002830"
  },
  {
    "text": "dictionary as well almost everything in Python is a dictionary so namespaces in Python are also dictionaries behind the",
    "start": "1002830",
    "end": "1008980"
  },
  {
    "text": "scenes so on the left you'll see me typing some code and on the right you'll see the actual namespace it comes with a",
    "start": "1008980",
    "end": "1014650"
  },
  {
    "text": "bunch of built-in stuff by default but if I do x equals 42 what that actually does in Python is create an entry in the",
    "start": "1014650",
    "end": "1022510"
  },
  {
    "text": "namespace dictionary X mapping to 42 some things we do in Python don't modify",
    "start": "1022510",
    "end": "1028240"
  },
  {
    "text": "the keys they only modify the values there are lots of ways of manipulating",
    "start": "1028240",
    "end": "1033730"
  },
  {
    "text": "the namespace here I'm importing a function or class into the namespace",
    "start": "1033730",
    "end": "1038880"
  },
  {
    "text": "here I'm defining a function that puts a function into the namespace mapping the",
    "start": "1038880",
    "end": "1044290"
  },
  {
    "text": "name of the function to the actual code of the function I define a class that",
    "start": "1044290",
    "end": "1052150"
  },
  {
    "text": "adds another entry in the namespace mapping the name of the class to the code of the class I can remove things",
    "start": "1052150",
    "end": "1060070"
  },
  {
    "text": "from the namespace with del I can even dig around in Python using",
    "start": "1060070",
    "end": "1067759"
  },
  {
    "text": "some introspection and dig out the actual namespace object as a dictionary and manipulate it directly so this is",
    "start": "1067759",
    "end": "1075289"
  },
  {
    "text": "really what when you do assignment this is what Python is really doing behind the scenes is it's directly manipulating",
    "start": "1075289",
    "end": "1083059"
  },
  {
    "text": "the dictionary so namespaces and the dictionaries that they're implemented as",
    "start": "1083059",
    "end": "1088159"
  },
  {
    "text": "are everywhere in Python hard to avoid",
    "start": "1088159",
    "end": "1092710"
  },
  {
    "text": "so when is the namespace created in Python well it's created every time you",
    "start": "1094179",
    "end": "1100399"
  },
  {
    "text": "import a module that module has its own namespace that's called the global",
    "start": "1100399",
    "end": "1105799"
  },
  {
    "text": "namespace in Python every time we execute a function a name base is created that is the local",
    "start": "1105799",
    "end": "1112279"
  },
  {
    "text": "namespace to that function every time we",
    "start": "1112279",
    "end": "1118159"
  },
  {
    "text": "define a class or run a class definition a namespace is created for the class and",
    "start": "1118159",
    "end": "1124419"
  },
  {
    "text": "every time we instantiate a class by creating an object a namespace is",
    "start": "1124419",
    "end": "1130129"
  },
  {
    "text": "created for the instance so notice that the class namespace and the instance",
    "start": "1130129",
    "end": "1135679"
  },
  {
    "text": "namespace are distinct things and this leads to some confusion and some",
    "start": "1135679",
    "end": "1143299"
  },
  {
    "text": "idiosyncratic behavior in Python so lots",
    "start": "1143299",
    "end": "1149090"
  },
  {
    "text": "of people when they're teaching namespaces show them as this kind of nested arrangement of namespaces the",
    "start": "1149090",
    "end": "1154909"
  },
  {
    "text": "local namespace to a function the global namespace to a module and a built-in namespace which contains built-in types",
    "start": "1154909",
    "end": "1161480"
  },
  {
    "text": "and functions things like list and tuple and string and I've been guilty of",
    "start": "1161480",
    "end": "1167470"
  },
  {
    "text": "present nested namespace namespaces in this way but I think it leads to some",
    "start": "1167470",
    "end": "1173600"
  },
  {
    "text": "confusion because people see the nesting of the namespaces here and they conflate",
    "start": "1173600",
    "end": "1179990"
  },
  {
    "text": "that they confuse that with the indentation of the code that you can see",
    "start": "1179990",
    "end": "1185059"
  },
  {
    "text": "on the right hand side here and these are quite different things so in the",
    "start": "1185059",
    "end": "1191059"
  },
  {
    "text": "code on the right I create a clove a global variable I create a class",
    "start": "1191059",
    "end": "1196790"
  },
  {
    "text": "I have a class attribute and then I define a method where I try to print",
    "start": "1196790",
    "end": "1202670"
  },
  {
    "text": "those things with a local variable in it which I try to print out when we run",
    "start": "1202670",
    "end": "1208490"
  },
  {
    "text": "this although it looks like it should just work we are met with a surprise and",
    "start": "1208490",
    "end": "1214520"
  },
  {
    "text": "the surprise is that the class attribute can't be located",
    "start": "1214520",
    "end": "1220780"
  },
  {
    "text": "it looks quite reasonable that these three print statements one of them can find the global variable while outside",
    "start": "1220990",
    "end": "1227590"
  },
  {
    "text": "the one in blue can find the local variable inside the function but the red",
    "start": "1227590",
    "end": "1232700"
  },
  {
    "text": "one fails in this kind of intermediate space what's going on there or to",
    "start": "1232700",
    "end": "1239450"
  },
  {
    "text": "understand this we need to look at how scopes work and how name lookup works in",
    "start": "1239450",
    "end": "1245929"
  },
  {
    "text": "these different dictionaries is different namespace dictionaries and the way it works in Python is that the",
    "start": "1245929",
    "end": "1251630"
  },
  {
    "text": "namespaces are essentially chained together by two special attributes one is called is the module attribute in",
    "start": "1251630",
    "end": "1259429"
  },
  {
    "text": "Python by the way when we have these underscore underscore module underscore underscore that would double the length",
    "start": "1259429",
    "end": "1265400"
  },
  {
    "text": "of this presentation if I had to say that every time so we say dunder which is short for double underscore so that",
    "start": "1265400",
    "end": "1271730"
  },
  {
    "text": "is dunder module and dunder built-ins right so you need to you're smiling",
    "start": "1271730",
    "end": "1278059"
  },
  {
    "text": "because I sound stupid but when you hang out only with other Python programmers it's just okay so dunder module then the",
    "start": "1278059",
    "end": "1285830"
  },
  {
    "text": "built-ins and the lookup mechanism follows the dunder module references to get through nested namespace the problem",
    "start": "1285830",
    "end": "1295520"
  },
  {
    "text": "is is that classes on on this lookup day",
    "start": "1295520",
    "end": "1301549"
  },
  {
    "text": "proto so you can see here at the bottom in blue we have a local method it has a",
    "start": "1301549",
    "end": "1306980"
  },
  {
    "text": "dunder module attribute which the lookup will follow but it will follow it to the global namespace by passing the class",
    "start": "1306980",
    "end": "1314000"
  },
  {
    "text": "namespace which is why the lookup of that class attribute fails if you want",
    "start": "1314000",
    "end": "1320059"
  },
  {
    "text": "to get into the class namespace the bottom center in red there then you need",
    "start": "1320059",
    "end": "1326480"
  },
  {
    "text": "to explicitly find something that is on the lookup and navigate back down to it so to fix",
    "start": "1326480",
    "end": "1335679"
  },
  {
    "text": "our example here is the original example which failed to fix this we need to find",
    "start": "1335679",
    "end": "1342580"
  },
  {
    "text": "something that is on the in the global",
    "start": "1342580",
    "end": "1347769"
  },
  {
    "text": "namespace which in this case is my class the class is two declared in the module",
    "start": "1347769",
    "end": "1352779"
  },
  {
    "text": "so to get this to work we need to put my class dot my class attribute in there",
    "start": "1352779",
    "end": "1359139"
  },
  {
    "text": "now you might think this is a design flaw in the language and I wouldn't disagree with you but that's just how it",
    "start": "1359139",
    "end": "1365350"
  },
  {
    "text": "is and you need to know about it it's unlikely ever to change so it's",
    "start": "1365350",
    "end": "1372220"
  },
  {
    "text": "important to understand the ele gb lookup rule local enclosing which I",
    "start": "1372220",
    "end": "1378129"
  },
  {
    "text": "haven't talked about global and built-ins the most important thing about",
    "start": "1378129",
    "end": "1383169"
  },
  {
    "text": "how you spell le GB is that there is no C in it for class okay so if you want to",
    "start": "1383169",
    "end": "1390730"
  },
  {
    "text": "find something that's in a class you have to find something that is at one of these levels and then navigate back down",
    "start": "1390730",
    "end": "1396460"
  },
  {
    "text": "to the class okay number four no",
    "start": "1396460",
    "end": "1401980"
  },
  {
    "start": "1398000",
    "end": "1413000"
  },
  {
    "text": "trade-offs for number types this is one of my favorite topics I work for many",
    "start": "1401980",
    "end": "1407980"
  },
  {
    "text": "years in areas with lots of numerical computing and I kind of have this view",
    "start": "1407980",
    "end": "1414580"
  },
  {
    "start": "1413000",
    "end": "1454000"
  },
  {
    "text": "of choosing the right number type in any system where the answer is actually important which is that you you really",
    "start": "1414580",
    "end": "1421029"
  },
  {
    "text": "need to know what you're doing and it's tradition at this point for the speaker",
    "start": "1421029",
    "end": "1426789"
  },
  {
    "text": "to say well you should just go and read that document what every computer scientist should know about",
    "start": "1426789",
    "end": "1432190"
  },
  {
    "text": "floating-point arithmetic the problem is nobody ever does very few people I've",
    "start": "1432190",
    "end": "1438100"
  },
  {
    "text": "met have actually read it and fewer of really deeply understood it and even fewer have really deeply understood what",
    "start": "1438100",
    "end": "1444009"
  },
  {
    "text": "the implications of it are when we're actually writing code so I'm not going",
    "start": "1444009",
    "end": "1449470"
  },
  {
    "text": "to recommend that you read that I'm just going to show you some practical examples and explain some differences so",
    "start": "1449470",
    "end": "1454989"
  },
  {
    "start": "1454000",
    "end": "1502000"
  },
  {
    "text": "the built-in number types in Python are int which is an unlimited precision",
    "start": "1454989",
    "end": "1460600"
  },
  {
    "text": "signed integer in Python 3 so very in Python 3 your integers will not overflow you won't hit any problems",
    "start": "1460600",
    "end": "1468740"
  },
  {
    "text": "until your 16 gigabyte memory is full of an integer you can do some really crazy math with that we have a float and",
    "start": "1468740",
    "end": "1479390"
  },
  {
    "text": "pythons float is really is is exactly the same thing as AC double alright",
    "start": "1479390",
    "end": "1485750"
  },
  {
    "text": "that's actually how it's implemented so pythons viewer float is whatever your C",
    "start": "1485750",
    "end": "1492530"
  },
  {
    "text": "compilers opinion on double is and we have complex which is a pair of float we",
    "start": "1492530",
    "end": "1500600"
  },
  {
    "text": "also have some two other number types in the standard library we have decimal and we have fractions for representing",
    "start": "1500600",
    "end": "1507980"
  },
  {
    "start": "1502000",
    "end": "1518000"
  },
  {
    "text": "rational numbers and these I rarely see these things used particularly there are",
    "start": "1507980",
    "end": "1515360"
  },
  {
    "text": "cases where people use decimal I very rarely see fraction used in practice so",
    "start": "1515360",
    "end": "1520730"
  },
  {
    "start": "1518000",
    "end": "1549000"
  },
  {
    "text": "I'm sure everybody here who has ever done any math with a computer is familiar with the failure modes of float",
    "start": "1520730",
    "end": "1527690"
  },
  {
    "text": "and people get very upset about this kind of thing the fact we can't even do",
    "start": "1527690",
    "end": "1533510"
  },
  {
    "text": "very simple operations that even a",
    "start": "1533510",
    "end": "1538690"
  },
  {
    "text": "seven-year-old could probably do with a computer and get the right answer and we",
    "start": "1538690",
    "end": "1545630"
  },
  {
    "text": "throw up our hands there are numbers of broken computers are hopeless and of",
    "start": "1545630",
    "end": "1551240"
  },
  {
    "start": "1549000",
    "end": "1643000"
  },
  {
    "text": "course the reason this is happening is that float numbers are inherently binary they are base two and we cannot",
    "start": "1551240",
    "end": "1558919"
  },
  {
    "text": "represent either 0.8 or 0.7 as a base to",
    "start": "1558919",
    "end": "1567919"
  },
  {
    "text": "fraction in finite precision you can see the bit patterns of these two numbers here you can see the recurring pattern",
    "start": "1567919",
    "end": "1574370"
  },
  {
    "text": "and imagine how that needs to carry on to infinity you need in order for us to represent these numbers so what people",
    "start": "1574370",
    "end": "1581630"
  },
  {
    "text": "do is they go to stack overflow and they get some advice I didn't put it in here",
    "start": "1581630",
    "end": "1586940"
  },
  {
    "text": "for a fear of embarrassing the person who wrote the answer who wrote it but the advice is goes something like this",
    "start": "1586940",
    "end": "1594080"
  },
  {
    "text": "is well if you have problems with floats you should just used decimal because decimal avoids",
    "start": "1594080",
    "end": "1600179"
  },
  {
    "text": "all these problems yay decimal and it",
    "start": "1600179",
    "end": "1606090"
  },
  {
    "text": "appears that we can do things with decimal sometimes even with numbers that we can't nicely representing decimals",
    "start": "1606090",
    "end": "1612870"
  },
  {
    "text": "are here I'm subtracting 3/3 from one which is zero right you might be",
    "start": "1612870",
    "end": "1619049"
  },
  {
    "text": "surprised that that works in decimal but it does but we've been lucky you all I",
    "start": "1619049",
    "end": "1624870"
  },
  {
    "text": "need to do is put two extra parentheses in this expression to force the order of",
    "start": "1624870",
    "end": "1630779"
  },
  {
    "text": "operation to be slightly different and it stops working and in fact decimal is really no better than float in this",
    "start": "1630779",
    "end": "1637860"
  },
  {
    "text": "respect it's just a different set of trade-offs oh goodness numbers are broken and people have this",
    "start": "1637860",
    "end": "1646320"
  },
  {
    "start": "1643000",
    "end": "1722000"
  },
  {
    "text": "idea that decimal is somehow some magical number type that works in a completely different way from float and",
    "start": "1646320",
    "end": "1653250"
  },
  {
    "text": "it doesn't float is a floating-point representation well decimal is also a floating-point",
    "start": "1653250",
    "end": "1659809"
  },
  {
    "text": "representation float is I Triple E 754",
    "start": "1659809",
    "end": "1665630"
  },
  {
    "text": "decimal is also I Triple E 754 but base 10 the I Triple E 754 ammeter you can",
    "start": "1665630",
    "end": "1679620"
  },
  {
    "text": "plug it your number type so decimals are included the main difference between",
    "start": "1679620",
    "end": "1685080"
  },
  {
    "text": "these two things is that one is base two and one is based in one of them is built-in and one of them is in the",
    "start": "1685080",
    "end": "1691260"
  },
  {
    "text": "standard library the float is almost certainly hardware-accelerated if you",
    "start": "1691260",
    "end": "1696299"
  },
  {
    "text": "have a floating-point unit on whatever processor you are using decimal will never be hardware accelerated even if",
    "start": "1696299",
    "end": "1703110"
  },
  {
    "text": "you have decimal hardware like you would have an IBM power CPU and float is very",
    "start": "1703110",
    "end": "1710580"
  },
  {
    "text": "fast and decimal it's about two to three times slower than float so decimal isn't",
    "start": "1710580",
    "end": "1719309"
  },
  {
    "text": "the way out of many areas problems so let's look at a computational geometry problem I worked a lot in oil and gas a",
    "start": "1719309",
    "end": "1726450"
  },
  {
    "start": "1722000",
    "end": "1781000"
  },
  {
    "text": "few years ago dealing with lots of geometric problems I like computational geometry problems",
    "start": "1726450",
    "end": "1732150"
  },
  {
    "text": "and I'm going to show you what's called the collinearity predicate and the code for that so the question we're trying to",
    "start": "1732150",
    "end": "1738990"
  },
  {
    "text": "answer is is the point P on above the line on the line or below the line well",
    "start": "1738990",
    "end": "1748980"
  },
  {
    "text": "if we draw a triangle between P Q and R when P is above the line we get a",
    "start": "1748980",
    "end": "1754050"
  },
  {
    "text": "counterclockwise triangle when it's on the line well we don't really get a triangle and when it's below the line we",
    "start": "1754050",
    "end": "1764580"
  },
  {
    "text": "get a clockwise triangle that's neat isn't it and it turns out that by computing the signed area of",
    "start": "1764580",
    "end": "1770190"
  },
  {
    "text": "that rectangle you over that triangle you can figure out whether the point is above the line on the line or below the line and we do that by figuring out the",
    "start": "1770190",
    "end": "1778650"
  },
  {
    "text": "sign of the determinants the math isn't important here so let's do the sign of",
    "start": "1778650",
    "end": "1783960"
  },
  {
    "start": "1781000",
    "end": "1812000"
  },
  {
    "text": "the determinant in Python we need a sine function distressingly Python doesn't",
    "start": "1783960",
    "end": "1789090"
  },
  {
    "text": "come with so we have to write one and we need the determinant function there so",
    "start": "1789090",
    "end": "1794940"
  },
  {
    "text": "we haven't a shin function we can give it P Q and R as three pairs of numbers",
    "start": "1794940",
    "end": "1800970"
  },
  {
    "text": "as tuples and it's going to return minus one plus one or zero really nice",
    "start": "1800970",
    "end": "1806070"
  },
  {
    "text": "function very simple even if you don't understand the math you can understand",
    "start": "1806070",
    "end": "1811260"
  },
  {
    "text": "how to use it and here's a demonstration of it working on the top of the right we",
    "start": "1811260",
    "end": "1817980"
  },
  {
    "start": "1812000",
    "end": "1839000"
  },
  {
    "text": "have three points in a line 0 0 4 4 8 8 and we get 0 very nice where a 0 0 4 4 4",
    "start": "1817980",
    "end": "1826500"
  },
  {
    "text": "0 gives us minus 1 because we're below the line great however we're very",
    "start": "1826500",
    "end": "1836130"
  },
  {
    "text": "diligent and we like to test our functions so let's see how this function",
    "start": "1836130",
    "end": "1844320"
  },
  {
    "text": "behaves very close to the line and I mean very close to the line right so",
    "start": "1844320",
    "end": "1850560"
  },
  {
    "text": "let's actually use the computer to calculate every possible float in a",
    "start": "1850560",
    "end": "1857790"
  },
  {
    "text": "sequence near to the line so we can do that",
    "start": "1857790",
    "end": "1863390"
  },
  {
    "text": "and you'll see here that we're getting a series of wands above the line you can",
    "start": "1863390",
    "end": "1869490"
  },
  {
    "text": "see the the second coordinate there they're 0.5 0 0 0 and some numbers are above the line and we're getting 1/4",
    "start": "1869490",
    "end": "1876540"
  },
  {
    "text": "above the line that's great as we get closer to the line oh then we begin to get zeros so this function thinks all of",
    "start": "1876540",
    "end": "1884310"
  },
  {
    "text": "those points are on the line but you know that that can't be true ok and then",
    "start": "1884310",
    "end": "1891720"
  },
  {
    "text": "you might think that the next thing that's going to happen is that we're gonna enter a region where the points are below the line I'm sorry",
    "start": "1891720",
    "end": "1900090"
  },
  {
    "text": "now we're above the line again if we were a little further now we're back on",
    "start": "1900090",
    "end": "1905130"
  },
  {
    "text": "the line the one in green there is the only point",
    "start": "1905130",
    "end": "1910740"
  },
  {
    "text": "where we are actually on the line which thankfully it does get the right answer for but in the region below the line",
    "start": "1910740",
    "end": "1918420"
  },
  {
    "text": "we're still on the line now we're below the line with the minus one there except",
    "start": "1918420",
    "end": "1925530"
  },
  {
    "text": "we're back on the line again and now finally we're actually both the line so",
    "start": "1925530",
    "end": "1932130"
  },
  {
    "text": "this is really complex region around the line where this function gives really pathological behavior really terrible",
    "start": "1932130",
    "end": "1938940"
  },
  {
    "text": "and of course with different query points you can get inconsistent results",
    "start": "1938940",
    "end": "1943980"
  },
  {
    "text": "you can get two points where you know one of them is above the other but one of the but the ordering given by this",
    "start": "1943980",
    "end": "1949470"
  },
  {
    "text": "function is completely incorrect so how to fix it well let's go back to our code",
    "start": "1949470",
    "end": "1955830"
  },
  {
    "text": "turns out the fix is incredibly simple here all we need to do is convert our",
    "start": "1955830",
    "end": "1961020"
  },
  {
    "text": "floating-point coordinates into a rational number coordinates using the fraction type that's the only change we",
    "start": "1961020",
    "end": "1968130"
  },
  {
    "text": "need to make I'm just replacing P Q and R with their equivalents represented as fractions rational numbers now when we",
    "start": "1968130",
    "end": "1977460"
  },
  {
    "text": "do this we get a beautiful answer where consistently above the line we're on the",
    "start": "1977460",
    "end": "1983130"
  },
  {
    "text": "line at exactly one point and then we're consistently below the line lovely",
    "start": "1983130",
    "end": "1990520"
  },
  {
    "text": "we can even map in two dimensions the region a region around a very small",
    "start": "1990520",
    "end": "1997430"
  },
  {
    "text": "rectangle around the light and I love the picture that's coming next so the",
    "start": "1997430",
    "end": "2002800"
  },
  {
    "start": "2000000",
    "end": "2053000"
  },
  {
    "text": "points in whites are above the line the points in gray are on the line and the points in black are below the line okay",
    "start": "2002800",
    "end": "2009940"
  },
  {
    "text": "so it's a very vivid graphical demonstration of how floating point numbers behave and why you need to test",
    "start": "2009940",
    "end": "2018430"
  },
  {
    "text": "these things in the regions that are using them you see fraction gives an exact result but there's always a",
    "start": "2018430",
    "end": "2023770"
  },
  {
    "text": "trade-off it's 45 times slower right so you need to decide whether that's an",
    "start": "2023770",
    "end": "2029470"
  },
  {
    "text": "acceptable trade-off you might think you know you see lots of software that using",
    "start": "2029470",
    "end": "2034540"
  },
  {
    "text": "floats that adds some kind of tolerance value the problem of these tolerance approach is it just pushes this fringing",
    "start": "2034540",
    "end": "2040150"
  },
  {
    "text": "effect out and you end up with a very thick line with these horrible fringes",
    "start": "2040150",
    "end": "2046120"
  },
  {
    "text": "on the edge of it so it only helps to a certain extent okay you need to know",
    "start": "2046120",
    "end": "2054010"
  },
  {
    "start": "2053000",
    "end": "2298000"
  },
  {
    "text": "some quirks of the language in Python Pythian perfect and anyone who's used a",
    "start": "2054010",
    "end": "2060520"
  },
  {
    "text": "language for long enough learns how imperfect their languages and yearns for",
    "start": "2060520",
    "end": "2065560"
  },
  {
    "text": "something better but what's the saying about you know there are languages",
    "start": "2065560",
    "end": "2071050"
  },
  {
    "text": "people use and the ones they complain about so let's look at some quirks a is",
    "start": "2071050",
    "end": "2082240"
  },
  {
    "text": "42 that's a floating-point type because it's got the point zero in there a is",
    "start": "2082240",
    "end": "2088560"
  },
  {
    "text": "integer true that seems like a reasonable answer isn't it B is 42 as",
    "start": "2088560",
    "end": "2095500"
  },
  {
    "text": "well B is integer isn't even supported",
    "start": "2095500",
    "end": "2102730"
  },
  {
    "text": "so you can ask floats if they're integers but you can't ask in C if they're integers so so much for",
    "start": "2102730",
    "end": "2108520"
  },
  {
    "text": "polymorphism and duck typing",
    "start": "2108520",
    "end": "2111960"
  },
  {
    "text": "tuple is a subclass of a thing called sequence in Python a sequence is basically anything we can index into",
    "start": "2114850",
    "end": "2121190"
  },
  {
    "text": "with an integer like a list or a tuple string is also a sequence does the tuple",
    "start": "2121190",
    "end": "2134090"
  },
  {
    "text": "1 2 3 exist in the sequence 1 2 3 4 5 no I think this is the right answer",
    "start": "2134090",
    "end": "2140710"
  },
  {
    "text": "because the tuple on the right contains",
    "start": "2140710",
    "end": "2145810"
  },
  {
    "text": "integers and I am saying is this tuple in a list of integers and no it isn't none of those elements are tuples I",
    "start": "2145810",
    "end": "2152120"
  },
  {
    "text": "think this is the right answer what do you think it's going to do with strings",
    "start": "2152120",
    "end": "2157910"
  },
  {
    "text": "which is also sequence oh dear so the behavior of Python can be quite",
    "start": "2157910",
    "end": "2166690"
  },
  {
    "text": "surprising sometimes and this makes it very difficult to say write functions",
    "start": "2166690",
    "end": "2172400"
  },
  {
    "text": "which work generically on both a tuple and a string or a list and a string a",
    "start": "2172400",
    "end": "2177950"
  },
  {
    "text": "string has this non-intuitive behavior where the in operator has been",
    "start": "2177950",
    "end": "2183350"
  },
  {
    "text": "overridden to do substring tests rather than a membership test I don't want to",
    "start": "2183350",
    "end": "2191330"
  },
  {
    "text": "turn you off Python by the way I love it it's the language I coming back to all right I can program in half a dozen",
    "start": "2191330",
    "end": "2196760"
  },
  {
    "text": "different languages or if not more but Python is the one I keep back to but I do want you to be aware of the traps",
    "start": "2196760",
    "end": "2203440"
  },
  {
    "text": "here's another one a is a list lists are",
    "start": "2203440",
    "end": "2210380"
  },
  {
    "text": "mutable B is a tuple tuples are immutable is a equal to B no that's fine",
    "start": "2210380",
    "end": "2222490"
  },
  {
    "text": "C is a set which is mutable D is a frozen set which is immutable symmetry",
    "start": "2223960",
    "end": "2233300"
  },
  {
    "text": "tells me that this should return false but unfortunately it returns true ok so",
    "start": "2233300",
    "end": "2239780"
  },
  {
    "text": "I think some decisions were made that were not necessarily fully thought",
    "start": "2239780",
    "end": "2246380"
  },
  {
    "text": "through and we just have to live with them now for the sake of backwards-compatibility",
    "start": "2246380",
    "end": "2251660"
  },
  {
    "text": "designing languages is really hard it's",
    "start": "2251660",
    "end": "2257490"
  },
  {
    "text": "my favorite quirk so what I'm teaching Python I was teacher I've just been teaching a two-day class on basic Python",
    "start": "2257490",
    "end": "2263820"
  },
  {
    "text": "and I try to encourage people to use keyword arguments when they're calling functions which have more than one or",
    "start": "2263820",
    "end": "2269640"
  },
  {
    "text": "two arguments because then we don't have to remember at the call site what the arts are for seems like good advice",
    "start": "2269640",
    "end": "2277500"
  },
  {
    "text": "right so let's do that with range oh",
    "start": "2277500",
    "end": "2282950"
  },
  {
    "text": "dear turns out that range which is a built-in function does not support keyword",
    "start": "2282950",
    "end": "2289020"
  },
  {
    "text": "arguments at all which is really disappointing because I can never remember exactly which is which so as",
    "start": "2289020",
    "end": "2297630"
  },
  {
    "text": "well as knowing quirks you need to know some idioms rattle see these quite",
    "start": "2297630",
    "end": "2305250"
  },
  {
    "start": "2298000",
    "end": "2432000"
  },
  {
    "text": "quickly so I don't run out of time here are some unpacking idioms I know what I",
    "start": "2305250",
    "end": "2312869"
  },
  {
    "text": "like a is no and B is like this is the way to swap things in Python use to pull",
    "start": "2312869",
    "end": "2319980"
  },
  {
    "text": "unpacking create a tuple on the right-hand side and pack it on the left-hand side with the arguments reversed I like what I know so that's",
    "start": "2319980",
    "end": "2329010"
  },
  {
    "text": "the idiomatic swap Python without a temporary you can use the underscore",
    "start": "2329010",
    "end": "2335160"
  },
  {
    "text": "variable in the Python repple in the console to hold of the last result so",
    "start": "2335160",
    "end": "2341520"
  },
  {
    "text": "text is now equal to I like what I know let's split that sentence two words when",
    "start": "2341520",
    "end": "2351180"
  },
  {
    "text": "you have the urge to iterates using a range and then index in Python you need",
    "start": "2351180",
    "end": "2358200"
  },
  {
    "text": "to resist it very strongly it's not how we do things in Python Python is not C++ if you want to index and the item you",
    "start": "2358200",
    "end": "2366660"
  },
  {
    "text": "should use the enumerate function which will return a tuple of index word index word index word as you go through and",
    "start": "2366660",
    "end": "2374520"
  },
  {
    "text": "you can use tuple unpacking to unpack those into two variables index and word here",
    "start": "2374520",
    "end": "2380900"
  },
  {
    "text": "in modern Nathan we have some really quite clever extended unpacking so I can",
    "start": "2381560",
    "end": "2387420"
  },
  {
    "text": "take the I can unpack the first item in variable and all the other items as a",
    "start": "2387420",
    "end": "2393990"
  },
  {
    "text": "list into the other variable so I can get a head and tail like this it's very nice that's quite new in Python and I",
    "start": "2393990",
    "end": "2401520"
  },
  {
    "text": "can use the same trick to do things like getting hold of the first and last line of a file and discarding the other line",
    "start": "2401520",
    "end": "2410220"
  },
  {
    "text": "so here I'm opening my dictionary on my Mac reading the whole file with read lines and I only care about the first",
    "start": "2410220",
    "end": "2416460"
  },
  {
    "text": "and last last items and I can ditch all the ones in the middle so the first word",
    "start": "2416460",
    "end": "2421920"
  },
  {
    "text": "in the dictionary is a the last word is well zero 'get on whatever that means",
    "start": "2421920",
    "end": "2433099"
  },
  {
    "start": "2432000",
    "end": "2544000"
  },
  {
    "text": "chain comparisons in Python if you're doing C++ or C you might be tempted to write a comparison like this that will",
    "start": "2435050",
    "end": "2441960"
  },
  {
    "text": "work in Python it's much more pythonic to write it like this like you would do",
    "start": "2441960",
    "end": "2447450"
  },
  {
    "text": "it in math Python is very nice about supporting the syntax logical operators",
    "start": "2447450",
    "end": "2455130"
  },
  {
    "text": "in Python working quite a strange way",
    "start": "2455130",
    "end": "2459349"
  },
  {
    "text": "they return the first argument that allows the decision to be made right so",
    "start": "2460610",
    "end": "2467250"
  },
  {
    "text": "six or seven we can decide that with six we didn't need we'd have to know that we",
    "start": "2467250",
    "end": "2473970"
  },
  {
    "text": "don't we don't need to evaluate the seven to know that six is true right whereas with the second example we need",
    "start": "2473970",
    "end": "2481080"
  },
  {
    "text": "to look at the seven to check whether the whole expression is true and works",
    "start": "2481080",
    "end": "2487590"
  },
  {
    "text": "in a similar way",
    "start": "2487590",
    "end": "2490280"
  },
  {
    "text": "so you saw me use this earlier to detect whether an argument was full-si or non",
    "start": "2493960",
    "end": "2502910"
  },
  {
    "text": "non is palsy another anti pattern you",
    "start": "2502910",
    "end": "2514670"
  },
  {
    "text": "see from people coming from C or C++ is things like this if protocol is HTTP or",
    "start": "2514670",
    "end": "2522230"
  },
  {
    "text": "protocol is HTTP or is mqtt it's supported much more pythonic to do this",
    "start": "2522230",
    "end": "2529790"
  },
  {
    "text": "create a set and check for membership in the set it's much easier to read as well and Python actually detects this pattern",
    "start": "2529790",
    "end": "2537290"
  },
  {
    "text": "and optimizes for it will make a constant set for that last one I have",
    "start": "2537290",
    "end": "2547099"
  },
  {
    "text": "two minutes so let's see how we if we can get through this know why your code",
    "start": "2547099",
    "end": "2552260"
  },
  {
    "text": "is slow and how to make it fast so there's probably someone here here who works in the oil and gas industry and",
    "start": "2552260",
    "end": "2558140"
  },
  {
    "text": "they may have at some time in their career encountered a thing called seg-y which is a file format dating from a",
    "start": "2558140",
    "end": "2564589"
  },
  {
    "text": "long time ago which stores all seismic reflection data it's pretty horrible in",
    "start": "2564589",
    "end": "2570710"
  },
  {
    "text": "almost every way you can imagine not least the fact that the floating-point format is not I Triple E it's some",
    "start": "2570710",
    "end": "2577250"
  },
  {
    "text": "ancient IBM floating-point format so this is a program we worked on to",
    "start": "2577250",
    "end": "2583609"
  },
  {
    "text": "convert IBM format floats in seg-y files into I Triple E floats and seg-y files",
    "start": "2583609",
    "end": "2590170"
  },
  {
    "text": "so we have a program converts sample type which uses a library we made called",
    "start": "2590170",
    "end": "2595339"
  },
  {
    "text": "seg pi so the first thing to know is",
    "start": "2595339",
    "end": "2601820"
  },
  {
    "text": "that in order to profile a Python program all you need to do is run it as you normally would",
    "start": "2601820",
    "end": "2607490"
  },
  {
    "text": "and pass - M C profile and - and optionally - a switch tells you how you",
    "start": "2607490",
    "end": "2615109"
  },
  {
    "text": "want your output to be sorted so everyone who's using python has a Python",
    "start": "2615109",
    "end": "2620300"
  },
  {
    "text": "profiler you can run it and you can see here that the total time which I've sorted by there are two functions at the",
    "start": "2620300",
    "end": "2626869"
  },
  {
    "text": "top one is IBM flute and wanting to convert sample type they are both using most of",
    "start": "2626869",
    "end": "2631940"
  },
  {
    "text": "the time they're the functions which are consuming most of the time but all of",
    "start": "2631940",
    "end": "2637069"
  },
  {
    "text": "the functions at the top of this profile are very tightly related I've just put the call graph on here so you can see",
    "start": "2637069",
    "end": "2642410"
  },
  {
    "text": "there are lots of functions working together to do this conversion and they together are responsible for almost all",
    "start": "2642410",
    "end": "2649730"
  },
  {
    "text": "the time this program is taking so what can we do about it well I'm going to start by focusing on",
    "start": "2649730",
    "end": "2656720"
  },
  {
    "text": "this convert sample type which has the underscore transform function in there",
    "start": "2656720",
    "end": "2662450"
  },
  {
    "text": "and the main way to make computers go faster is to get them to do less stuff all right I mean you can be smarter",
    "start": "2662450",
    "end": "2669200"
  },
  {
    "start": "2666000",
    "end": "2964000"
  },
  {
    "text": "about how they do what they do but it's much better if you can just arrange for them to do less work so to do this it's",
    "start": "2669200",
    "end": "2678890"
  },
  {
    "text": "nice to be able to disassemble our Python to figure out what's taking the time back into Python bytecode and",
    "start": "2678890",
    "end": "2686329"
  },
  {
    "text": "python also includes a disassembler which will we can just import this and",
    "start": "2686329",
    "end": "2693170"
  },
  {
    "text": "pass a function to it and we get the disassembled Python bytecode and the",
    "start": "2693170",
    "end": "2698990"
  },
  {
    "text": "thing to look at here is you see we have load masked self and load fast self",
    "start": "2698990",
    "end": "2705380"
  },
  {
    "text": "shows up several times in that disassembly and that's because in the",
    "start": "2705380",
    "end": "2710510"
  },
  {
    "text": "transform function in yellow on the left there you can see we're doing several attribute lookups through the self",
    "start": "2710510",
    "end": "2717319"
  },
  {
    "text": "object through the instance and that takes time loading self is fast but then",
    "start": "2717319",
    "end": "2725180"
  },
  {
    "text": "searching self which is a name space which is a dictionary takes time and so",
    "start": "2725180",
    "end": "2732290"
  },
  {
    "text": "looking up instance member variables in Python takes time is the dictionary lookup right so most of the time that's",
    "start": "2732290",
    "end": "2740030"
  },
  {
    "text": "fine the cost is worth paying sometimes the cost is excessive so I'm going to",
    "start": "2740030",
    "end": "2746660"
  },
  {
    "text": "rewrite this function by not having it as a method because it just that it's a",
    "start": "2746660",
    "end": "2754640"
  },
  {
    "text": "method makes it quite significantly slower so I've moved the construction of",
    "start": "2754640",
    "end": "2760099"
  },
  {
    "text": "this method in - the dunder init function here so now rather than attributes I can use local",
    "start": "2760099",
    "end": "2767040"
  },
  {
    "text": "variables I've also specialized the definition of the function you can see I have if data",
    "start": "2767040",
    "end": "2772079"
  },
  {
    "text": "sample format is some kind of integer do this where some range checking is needed",
    "start": "2772079",
    "end": "2777829"
  },
  {
    "text": "otherwise no range check is needed and we can have a much simpler",
    "start": "2777829",
    "end": "2783119"
  },
  {
    "text": "implementation so this is a case where I am able to do much less work in certain",
    "start": "2783119",
    "end": "2788609"
  },
  {
    "text": "cases and avoid using local variables it takes a bit of time to process this code",
    "start": "2788609",
    "end": "2794760"
  },
  {
    "text": "so if you're interested I would go back and look at the slides afterwards but when we've done this we're only 22%",
    "start": "2794760",
    "end": "2800520"
  },
  {
    "text": "faster so now we want to go really fast",
    "start": "2800520",
    "end": "2805640"
  },
  {
    "text": "how do we go really fast we go really fast by not using Python nobody uses",
    "start": "2805640",
    "end": "2811290"
  },
  {
    "text": "Python for performance right if you want performance you use C or C++ or rust or",
    "start": "2811290",
    "end": "2817859"
  },
  {
    "text": "something that's actually compiled down to run on a real processor and so if",
    "start": "2817859",
    "end": "2824670"
  },
  {
    "text": "you're particularly interested in this kind of approach you should go to my colleague Austin Bingham he's sitting here in the front row he has a session",
    "start": "2824670",
    "end": "2830730"
  },
  {
    "text": "tomorrow on how to integrate Python and C++ so Austin here did this integration",
    "start": "2830730",
    "end": "2837599"
  },
  {
    "text": "where he took this function IBM float which I will show to you on left in",
    "start": "2837599",
    "end": "2844410"
  },
  {
    "text": "Python and he rewrote it in C++ and all he told me that he literally took the",
    "start": "2844410",
    "end": "2851849"
  },
  {
    "text": "Python code pasted into another file went through put some types into it then",
    "start": "2851849",
    "end": "2859890"
  },
  {
    "text": "we have to do a bit of work to build some glue so that Python knows how to call this right but it's entirely",
    "start": "2859890",
    "end": "2865410"
  },
  {
    "text": "possible it's very straightforward when we do this the program runs 86% faster",
    "start": "2865410",
    "end": "2873450"
  },
  {
    "text": "so in this whole system there are probably 10,000 lines of Python and we",
    "start": "2873450",
    "end": "2880290"
  },
  {
    "text": "can replace what 20 of them with C++ and go 86% faster so it's a very successful",
    "start": "2880290",
    "end": "2889290"
  },
  {
    "text": "approach we've been using to build systems is to build most of them in Python is fast we can write code fast in Python",
    "start": "2889290",
    "end": "2896780"
  },
  {
    "text": "and then we can write code in C++ in the very small parts of the system where",
    "start": "2896780",
    "end": "2902810"
  },
  {
    "text": "performance is actually really important so I'm a few minutes over time I'm going",
    "start": "2902810",
    "end": "2908930"
  },
  {
    "text": "to stop here these are the seven things knowing excuted know how to use Sentinel objects know how scopes and namespaces",
    "start": "2908930",
    "end": "2916040"
  },
  {
    "text": "relate understand the trade-offs for number types become familiar with some",
    "start": "2916040",
    "end": "2921410"
  },
  {
    "text": "quirks of pythons so you are less confused when you get hit by them understand how to write idiomatic Python",
    "start": "2921410",
    "end": "2928369"
  },
  {
    "text": "and learn how to use the filer and the disassembler which are included with",
    "start": "2928369",
    "end": "2933680"
  },
  {
    "text": "Python and you all have already for free I'm going to stop there if you want to know more of this kind of thing you can",
    "start": "2933680",
    "end": "2940910"
  },
  {
    "text": "come to one of our training courses or you can buy our books there are some",
    "start": "2940910",
    "end": "2946310"
  },
  {
    "text": "token URLs at the bottom there which includes these books at a special NDC",
    "start": "2946310",
    "end": "2952190"
  },
  {
    "text": "tech town reduced price thank you very much [Applause]",
    "start": "2952190",
    "end": "2965548"
  }
]