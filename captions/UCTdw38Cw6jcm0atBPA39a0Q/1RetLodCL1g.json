[
  {
    "text": "cool good morning everyone so thank you very much for coming to my talk docker has definitely caught everyone's",
    "start": "0",
    "end": "6839"
  },
  {
    "text": "imagination and everyone's attention and if definitely changed the way that we think about how we deploy applications",
    "start": "6839",
    "end": "12540"
  },
  {
    "text": "and how we think about how we get started and scale up our systems from something running locally up to",
    "start": "12540",
    "end": "19220"
  },
  {
    "text": "planet-scale systems like Google but obviously as dock has evolved as a wave",
    "start": "19220",
    "end": "25800"
  },
  {
    "text": "of thinking and it who approaches and techniques have started to come about and other technology is a starting form",
    "start": "25800",
    "end": "31410"
  },
  {
    "text": "which have different opinions and different priorities compared to what docker provides and fundamentally",
    "start": "31410",
    "end": "37640"
  },
  {
    "text": "containers are Jesse Linux processes so why do we need docker at all and this is what I'm gonna be",
    "start": "37640",
    "end": "43680"
  },
  {
    "text": "exploring with you over the next hour so my name is Ben hall please feel free if",
    "start": "43680",
    "end": "49649"
  },
  {
    "text": "you have any questions or any comments to contact me via email or Twitter I'm",
    "start": "49649",
    "end": "55079"
  },
  {
    "text": "the founder of a company called cat coda cat coda is an interactive learning platform for software developers and we",
    "start": "55079",
    "end": "61829"
  },
  {
    "text": "tell you and help you get started with cloud native technologies such as docker kubernetes",
    "start": "61829",
    "end": "68119"
  },
  {
    "text": "container networking docker security contains security etc and everything happens directly in your",
    "start": "68119",
    "end": "74280"
  },
  {
    "text": "browser so you don't have to worry about how to get started you don't have to worry about installing we'll configure in anything",
    "start": "74280",
    "end": "79530"
  },
  {
    "text": "instead you can explore and experiment alongside a fair free interactive tutorial labs that we have on our",
    "start": "79530",
    "end": "86220"
  },
  {
    "text": "platform and we work with different companies like Red Hat who have taken our platform and extended it to help",
    "start": "86220",
    "end": "91950"
  },
  {
    "text": "teach their user base how to deploy things featured openshift which is their kubernetes distribution and for today",
    "start": "91950",
    "end": "100799"
  },
  {
    "text": "what I want to start exploring is what docker provides to the ecosystem and",
    "start": "100799",
    "end": "106110"
  },
  {
    "text": "fundamentally what containers are and why we can start building and exploring with different container win times and",
    "start": "106110",
    "end": "112079"
  },
  {
    "text": "different container techniques so we'll look at what actually happens when we when dhaka learn what the different",
    "start": "112079",
    "end": "117719"
  },
  {
    "text": "components involved are and we'll look at how we can move away from needing a",
    "start": "117719",
    "end": "123509"
  },
  {
    "text": "dependency and docker and exploring other alternatives such as how do we build container images if we don't have",
    "start": "123509",
    "end": "129270"
  },
  {
    "text": "doc who involved one of the fundamental principles and also how do we even processes",
    "start": "129270",
    "end": "134310"
  },
  {
    "text": "without Daka what fundamentally is the container and finally looking at the value this brings to an organization so",
    "start": "134310",
    "end": "141719"
  },
  {
    "text": "Before we jump into that let's explore why this is interesting or why I'm particularly interested in this topic so",
    "start": "141719",
    "end": "148709"
  },
  {
    "text": "docker has evolved for quite a number of years if we go way back to when docker was just being designed and prototyped",
    "start": "148709",
    "end": "156120"
  },
  {
    "text": "this is some of the logos which we could have ended up with if you go into 99designs and look at the possibilities",
    "start": "156120",
    "end": "162540"
  },
  {
    "text": "and instead of having a nice way or we could have had a beautiful giraffe and of the docker since Dan had evolved",
    "start": "162540",
    "end": "169769"
  },
  {
    "text": "we've got to know and love docker with our container win time it helps us launch processes in a secure scalable",
    "start": "169769",
    "end": "176879"
  },
  {
    "text": "way helps us deploy applications on both Linux windows and arm devices in a",
    "start": "176879",
    "end": "183299"
  },
  {
    "text": "consistent experience which is great but docker itself is also evolving if no",
    "start": "183299",
    "end": "188579"
  },
  {
    "text": "longer just focused on container launching containers we've got how do you manage containers class multiple systems how do you learn",
    "start": "188579",
    "end": "195299"
  },
  {
    "text": "things in a cloud with docker cloud which had now gone away how do you",
    "start": "195299",
    "end": "200639"
  },
  {
    "text": "compose and orchestrate things they swarm and compose etc and so docker itself have evolved into a much bigger",
    "start": "200639",
    "end": "206569"
  },
  {
    "text": "much wider scope project and to the point where actually docker ie",
    "start": "206569",
    "end": "212129"
  },
  {
    "text": "docker the bit which wins containers isn't Kodaka anymore it's called Moby they have renamed a",
    "start": "212129",
    "end": "218099"
  },
  {
    "text": "project to distinguish what the container runtime is either components",
    "start": "218099",
    "end": "223620"
  },
  {
    "text": "which go in to launch in these processes in a secure way compared to docker Inc",
    "start": "223620",
    "end": "228810"
  },
  {
    "text": "which is all of datacenter and all of the more enterprise driven feature sets and so as cert when we're looking at",
    "start": "228810",
    "end": "237569"
  },
  {
    "text": "running from them very simply I I just want to win my process in this secure way there's lots of other moving parts",
    "start": "237569",
    "end": "243750"
  },
  {
    "text": "involved in having documen your stack we have to take in other dependencies and",
    "start": "243750",
    "end": "248879"
  },
  {
    "text": "youth dock and networking and their opinions and if we just want to run from the very lightweight we don't have a",
    "start": "248879",
    "end": "254159"
  },
  {
    "text": "choice we have to go all in but there's also because of this approach and",
    "start": "254159",
    "end": "259530"
  },
  {
    "text": "because of how doc has structured it's out it's different for Qt techniques so docker has a demon the demon is what's",
    "start": "259530",
    "end": "265409"
  },
  {
    "text": "responsible for managing order containers on your system all of the processes which are winning and it basically the gatekeeper",
    "start": "265409",
    "end": "272670"
  },
  {
    "text": "to in your entire host and I said it's a sensitive part of the system",
    "start": "272670",
    "end": "277950"
  },
  {
    "text": "you should only allow twisted access to twisted processes and trusted users",
    "start": "277950",
    "end": "283770"
  },
  {
    "text": "could fundamentally you're given on access to the entire machine but when we look at how we go through the processes",
    "start": "283770",
    "end": "289920"
  },
  {
    "text": "that are building docket images we need to give things like Jenkins access to",
    "start": "289920",
    "end": "295440"
  },
  {
    "text": "docker so that they can go through and they can build our image that can then get rolled out until you see snippets",
    "start": "295440",
    "end": "301380"
  },
  {
    "text": "like the top one where we learn a Jenkins agent inside of a container because everything gets deployed at the",
    "start": "301380",
    "end": "307560"
  },
  {
    "text": "container and we pass in the docker sock file so this is how our container image can talk to the parent docker daemon and",
    "start": "307560",
    "end": "315020"
  },
  {
    "text": "use that in order to build these images and so if we went in we can do things",
    "start": "315020",
    "end": "320700"
  },
  {
    "text": "like duck-billed and it will create our image but we can also list all of your depositors on a host and list everything",
    "start": "320700",
    "end": "327210"
  },
  {
    "text": "else winning which is potentially a security weakness if we don't trust Y",
    "start": "327210",
    "end": "332460"
  },
  {
    "text": "being built inside of our container then they potentially exploit the system in",
    "start": "332460",
    "end": "338280"
  },
  {
    "text": "very interesting ways but also if we accidentally have a security breach",
    "start": "338280",
    "end": "343830"
  },
  {
    "text": "for example we accidentally open Jenkins up to the world which if we do a quick search on the internet it quite common",
    "start": "343830",
    "end": "349920"
  },
  {
    "text": "then we potentially open up our entire host to them abilities and being exploited and being taken advantage of",
    "start": "349920",
    "end": "357030"
  },
  {
    "text": "by Bitcoin miners and other such malicious actors and so if these kind of",
    "start": "357030",
    "end": "365280"
  },
  {
    "text": "things we're having to structure docker and have to talk a demon in place actually makes it more difficult to do",
    "start": "365280",
    "end": "372780"
  },
  {
    "text": "things like build images scale out our image across multiple systems and actually have more of a secure system in",
    "start": "372780",
    "end": "379020"
  },
  {
    "text": "place and so this is to read my alternative container win times have started and a reason why I'm exploring",
    "start": "379020",
    "end": "386400"
  },
  {
    "text": "how do we use containers and container images without having docker in the first place and so if we look at the",
    "start": "386400",
    "end": "393360"
  },
  {
    "text": "alternatives available and this is contain a landscape probe list by the cloud computing foundation",
    "start": "393360",
    "end": "400310"
  },
  {
    "text": "see nvf and so cloud native foundation",
    "start": "400310",
    "end": "405900"
  },
  {
    "text": "and so we've got different projects inside of the foundation so they're backed and controlled and governed by",
    "start": "405900",
    "end": "412350"
  },
  {
    "text": "the foundation itself ie container D and locket contain the D is what docker uses",
    "start": "412350",
    "end": "417450"
  },
  {
    "text": "into the covers itself this is how docker the Feli and their engine and the daemon talks to the underlying system",
    "start": "417450",
    "end": "424500"
  },
  {
    "text": "and starts our processes it all happened fire contained D but within the project spin up from different organizations so",
    "start": "424500",
    "end": "431160"
  },
  {
    "text": "Google last week announced geez Ivor which is focused on how do you burn a",
    "start": "431160",
    "end": "436470"
  },
  {
    "text": "container with very similar properties to a virtual machine so you have a different kernel it wins in it on",
    "start": "436470",
    "end": "442140"
  },
  {
    "text": "isolation space and it's on process space and so if your application did",
    "start": "442140",
    "end": "448500"
  },
  {
    "text": "have a security weakness and someone did manage to break out of a container they wouldn't interact and it wouldn't",
    "start": "448500",
    "end": "454050"
  },
  {
    "text": "interfere and gain access to other containers renege on your system so ideal if you're winning quite sensitive",
    "start": "454050",
    "end": "460670"
  },
  {
    "text": "potentially malicious actor and style in vibrant environment and that's similar",
    "start": "460670",
    "end": "466320"
  },
  {
    "text": "to Intel clear containers again trying to introduce more of VM like property",
    "start": "466320",
    "end": "471570"
  },
  {
    "text": "into and security model into what containers can offer and we also now have kayo which is if you're deploying",
    "start": "471570",
    "end": "477600"
  },
  {
    "text": "cube net is having a container win time which is design for what kubernetes needs is designed to solve that problem",
    "start": "477600",
    "end": "484110"
  },
  {
    "text": "and only that problem it doesn't interact with how do you do in different systems is how do you walk straight for",
    "start": "484110",
    "end": "490230"
  },
  {
    "text": "different container win times instead of just delivering the needs that kubernetes needs and we'll explore more",
    "start": "490230",
    "end": "495570"
  },
  {
    "text": "this later but actually as containers have evolved we have our ideas have",
    "start": "495570",
    "end": "502380"
  },
  {
    "text": "evolved too and so now you don't even need to read winning your containers locally instead you could do something",
    "start": "502380",
    "end": "507660"
  },
  {
    "text": "like the ashore container service and that could ruin all your feel containers in the cloud and we could it build per",
    "start": "507660",
    "end": "513570"
  },
  {
    "text": "second you can spin them up do all of the work loads which you need and then pair them back down instantly so it",
    "start": "513570",
    "end": "520289"
  },
  {
    "text": "makes ideal for ad-hoc different win times and being able to take convention of that within our architecture can open",
    "start": "520290",
    "end": "526470"
  },
  {
    "text": "up some really interesting opportunities and for me this is where the very starts to bring when we start breaking our",
    "start": "526470",
    "end": "532710"
  },
  {
    "text": "dependence and thinking and orchestrating our system and docker and these kind of",
    "start": "532710",
    "end": "537730"
  },
  {
    "text": "fixed container win times we start seeing different opportunities which could exist within our system until we",
    "start": "537730",
    "end": "545589"
  },
  {
    "text": "start thinking about like if we're winning keeping it is we can have a container win time which is focused on the needs of kubernetes",
    "start": "545589",
    "end": "551589"
  },
  {
    "text": "so it's more performing it's more stable and if more easily maintained by the",
    "start": "551589",
    "end": "556660"
  },
  {
    "text": "open source communities in general which should deliver a better higher quality system because everything everyone's",
    "start": "556660",
    "end": "563170"
  },
  {
    "text": "working on that one certain targeted problem and we build better system and a",
    "start": "563170",
    "end": "568360"
  },
  {
    "text": "better design for continuous integrations we can focus on how did that work within a CIPD process and",
    "start": "568360",
    "end": "574990"
  },
  {
    "text": "instead of trying having our container win time so of 20 different variations",
    "start": "574990",
    "end": "580029"
  },
  {
    "text": "and 20 different problems instead of just focused on right how do we build the image in a quickest possible way",
    "start": "580029",
    "end": "586480"
  },
  {
    "text": "because that's the problem which we're trying to solve and this opens up things like cloud bursting and being able to",
    "start": "586480",
    "end": "592930"
  },
  {
    "text": "easily win our cow our container build on something like as your container instances and so when we start scaling",
    "start": "592930",
    "end": "599470"
  },
  {
    "text": "out we can push the workloads into the cloud instead of needing to spin up large virtual machines because we need",
    "start": "599470",
    "end": "607569"
  },
  {
    "text": "that security model in place and these are the things that we can explore and the idea is that we can get to something",
    "start": "607569",
    "end": "613420"
  },
  {
    "text": "which looks a little bit more dissipated and have different container win times",
    "start": "613420",
    "end": "619149"
  },
  {
    "text": "based on what our needs are and so we could have kubernetes talking to different container win times so we",
    "start": "619149",
    "end": "626139"
  },
  {
    "text": "could use lib pod which is cryo and if could win our database it's just winning a normal container which we win every",
    "start": "626139",
    "end": "632860"
  },
  {
    "text": "day it's it's there and it's happy we could do something with more higher security model for more sensitive parts",
    "start": "632860",
    "end": "639310"
  },
  {
    "text": "of our system for example a public-facing web application it's exposed to the outside so if it does get",
    "start": "639310",
    "end": "645790"
  },
  {
    "text": "breach because a certain certain underlying problems or security models",
    "start": "645790",
    "end": "651220"
  },
  {
    "text": "which we haven't realized yet and they get announced and there are there tax then they deal wouldn't be able to break",
    "start": "651220",
    "end": "656740"
  },
  {
    "text": "out of that container and I still wouldn't be able to interact with other things winning on our cluster and then",
    "start": "656740",
    "end": "662800"
  },
  {
    "text": "because of things like visual containers if he wanted to have a scale out kind of",
    "start": "662800",
    "end": "670310"
  },
  {
    "text": "like I'm distributing motto which can scale up and down dynamically and dramatically based on workloads we could",
    "start": "670310",
    "end": "676430"
  },
  {
    "text": "do things like the turtle Kubler and so that knows that when we give a container to learn instead of it winning on our",
    "start": "676430",
    "end": "682430"
  },
  {
    "text": "local docker host instead it will go off to the indoor container instances and when the container there and so this",
    "start": "682430",
    "end": "689360"
  },
  {
    "text": "allows us to scale out things like message handling methods processing or just scale out how our builds are being",
    "start": "689360",
    "end": "695209"
  },
  {
    "text": "processed and so different builds can have different characteristics and they come in at different locations based on",
    "start": "695209",
    "end": "700970"
  },
  {
    "text": "requirements of our system so if we're going to go down this path and with",
    "start": "700970",
    "end": "706910"
  },
  {
    "text": "we're going to explore how do we do things without needing docker then what",
    "start": "706910",
    "end": "712009"
  },
  {
    "text": "does dock watch you provide what Adly happens when we do a docker learn and launch that contain a process and so in",
    "start": "712009",
    "end": "719060"
  },
  {
    "text": "this case we've got a very simple hello world application we're just winning Redis so we do dock",
    "start": "719060",
    "end": "724939"
  },
  {
    "text": "over in Redis so what actually happens when we execute this command well the first thing is docker will go off to the",
    "start": "724939",
    "end": "731360"
  },
  {
    "text": "docker hub the docker registry where all of the public images are stored and it",
    "start": "731360",
    "end": "736730"
  },
  {
    "text": "will go to docker the i/o library which the user Redis and pull down the latest image so neither order same default or",
    "start": "736730",
    "end": "744920"
  },
  {
    "text": "we have and we can all avoid deeds if we wanted to within our system and give like a targeted version of Redis which",
    "start": "744920",
    "end": "750589"
  },
  {
    "text": "we may want but it'll go off and it will download the latest version so in this",
    "start": "750589",
    "end": "755870"
  },
  {
    "text": "case it can be read if sweet up 4.0 and it will pull down the different layers",
    "start": "755870",
    "end": "761209"
  },
  {
    "text": "involved and these this is the docker image so what is a docker image so if we",
    "start": "761209",
    "end": "768980"
  },
  {
    "text": "look at what goes into creating a sucker image we it encouraged that document to",
    "start": "768980",
    "end": "775040"
  },
  {
    "text": "start life at the docker file the docker file is an instead of instructions which goes into how to configure and how to",
    "start": "775040",
    "end": "782569"
  },
  {
    "text": "learn a particular and how to build a particular docker image so in this case we're building a nodejs application",
    "start": "782569",
    "end": "789410"
  },
  {
    "text": "we're defining our dependency at the top I ain't no tuition 8 so that would go off and I will use the notation 8 dock",
    "start": "789410",
    "end": "796850"
  },
  {
    "text": "image and then we are extending it without oh my date for our application so we're adding",
    "start": "796850",
    "end": "802029"
  },
  {
    "text": "layers on top of that image which will represent a different configuration different files which we need for our",
    "start": "802029",
    "end": "808810"
  },
  {
    "text": "application to run for example going off to the NPM registry to download all of",
    "start": "808810",
    "end": "814390"
  },
  {
    "text": "our dependencies copying of our source code and then fetching some metadata and",
    "start": "814390",
    "end": "819399"
  },
  {
    "text": "this is where the layer technology and a layered approach comes in because fundamentally all we're doing is adding",
    "start": "819399",
    "end": "825339"
  },
  {
    "text": "on extensions to what came before it and this is what we can explore in a little",
    "start": "825339",
    "end": "830380"
  },
  {
    "text": "bit more detail and so if we go to what",
    "start": "830380",
    "end": "835720"
  },
  {
    "text": "is a image so what I'm going to show you",
    "start": "835720",
    "end": "843190"
  },
  {
    "text": "is what are the fundamental building blocks about how container images work and what goes into the details and so if",
    "start": "843190",
    "end": "850480"
  },
  {
    "text": "we come in to enlarge this slightly so let's go through that example of pulling down the wettest image so now we're",
    "start": "850480",
    "end": "858399"
  },
  {
    "text": "pulling down two different layers which went into building of that image and all of these layers together create another",
    "start": "858399",
    "end": "865810"
  },
  {
    "text": "structure so one layer could be the base operating system another layer could be the various binaries and another layer",
    "start": "865810",
    "end": "871870"
  },
  {
    "text": "could be the wettest configuration if we break it down we can actually explore",
    "start": "871870",
    "end": "877240"
  },
  {
    "text": "what this image is and we can do docker save give it the name of the image and",
    "start": "877240",
    "end": "882339"
  },
  {
    "text": "we can save it into a tar because fundamentally all the dock live is a VIP",
    "start": "882339",
    "end": "887529"
  },
  {
    "text": "I tired of directory and so we can explore and extract that tar file and",
    "start": "887529",
    "end": "893140"
  },
  {
    "text": "you can see that we've got all of the layers which went in and where we downloaded we can now explore at the",
    "start": "893140",
    "end": "898450"
  },
  {
    "text": "details of all the files into the covers and so fundamentally always doing by",
    "start": "898450",
    "end": "903670"
  },
  {
    "text": "doing a docker Paul or docker run it's dead allowed this tar file and I have it extracted into the docker data directory",
    "start": "903670",
    "end": "911310"
  },
  {
    "text": "and if we look at what's in this territory we've got a ha directory we",
    "start": "911310",
    "end": "917709"
  },
  {
    "text": "got some metadata about repositories so this is saying like what repository exists and what the version number is",
    "start": "917709",
    "end": "924520"
  },
  {
    "text": "and what's the tag for that image itself we've got many",
    "start": "924520",
    "end": "931060"
  },
  {
    "text": "first Jason which gain gives it some more context and more some more data around how that",
    "start": "931060",
    "end": "937360"
  },
  {
    "text": "image got built and the different layers involved and for this no disc live talk",
    "start": "937360",
    "end": "942999"
  },
  {
    "text": "all of the information needs to launch the container win time but fundamentally at this point always doing is crated to",
    "start": "942999",
    "end": "949540"
  },
  {
    "text": "JSON files which represent which represent our container and if we look",
    "start": "949540",
    "end": "956259"
  },
  {
    "text": "at something like inside of an image we",
    "start": "956259",
    "end": "963970"
  },
  {
    "text": "can see that it's another file so the tar containing tar files if we",
    "start": "963970",
    "end": "969189"
  },
  {
    "text": "extract one of those tar files we can see that if all of the different components which went in and were built",
    "start": "969189",
    "end": "974379"
  },
  {
    "text": "apart to that layer file and part of that docker kind of laugh and so if we",
    "start": "974379",
    "end": "980589"
  },
  {
    "text": "go to a tree it go extract it so we can",
    "start": "980589",
    "end": "991149"
  },
  {
    "text": "now look at what's in X CD and we can see it's got the package manager and",
    "start": "991149",
    "end": "996189"
  },
  {
    "text": "it's got a willed and we can kind of output and exploit these directories so fundamentally all we've done is that",
    "start": "996189",
    "end": "1002309"
  },
  {
    "text": "docker file what we were doing is defining the different layers I copying",
    "start": "1002309",
    "end": "1007649"
  },
  {
    "text": "over the files required into each of these tar directories and lip in the mall or tearing them all up into a",
    "start": "1007649",
    "end": "1013290"
  },
  {
    "text": "single pod the tree and I'm pushing that into the registry what this means is we don't really need a docker file to build",
    "start": "1013290",
    "end": "1020699"
  },
  {
    "text": "this structured image instead we can do it all manually if we wanted to because fundamentally it's just a well",
    "start": "1020699",
    "end": "1028260"
  },
  {
    "text": "structured tar so in this case what we're doing is towing up an empty directory and then passing that into",
    "start": "1028260",
    "end": "1035399"
  },
  {
    "text": "darker import and now we have and give it the name empty and so now we have the",
    "start": "1035399",
    "end": "1042270"
  },
  {
    "text": "smallest docket image possible inside yeah docker image possible and so it's",
    "start": "1042270",
    "end": "1048270"
  },
  {
    "text": "got all of the metadata which it needs but if it's empty and so this is the starting point of every single image but",
    "start": "1048270",
    "end": "1055529"
  },
  {
    "text": "we can actually build something more useful based on these techniques and because all we're doing is creating",
    "start": "1055529",
    "end": "1060649"
  },
  {
    "text": "these files and we can create an image I'm using different approaches so in",
    "start": "1060649",
    "end": "1067340"
  },
  {
    "text": "this case we didn't take busybox busybox if a very small light weight distribution Linux distribution ideal",
    "start": "1067340",
    "end": "1074690"
  },
  {
    "text": "for winning inside containers because it of it guys super small low footprint and",
    "start": "1074690",
    "end": "1081280"
  },
  {
    "text": "so in order to kind of like bootstrap busybox there is that's doing a",
    "start": "1081280",
    "end": "1087740"
  },
  {
    "text": "different directory easier so we have",
    "start": "1087740",
    "end": "1100430"
  },
  {
    "text": "this kind of shell script and when we win it will go off and it will download bidi box and binaries and install it and",
    "start": "1100430",
    "end": "1107900"
  },
  {
    "text": "copy into the directory called busybox and so this is the entire operating system it's a grand total of 1.9 Meg and",
    "start": "1107900",
    "end": "1116630"
  },
  {
    "text": "if you actually look at what the operating system is it's just a single direct a single binary called bin and if",
    "start": "1116630",
    "end": "1125840"
  },
  {
    "text": "you list what the bin is all of the things which we know and love within Linux",
    "start": "1125840",
    "end": "1130910"
  },
  {
    "text": "so like Alice dear free make directory or just get pointed into the single one",
    "start": "1130910",
    "end": "1137780"
  },
  {
    "text": "binary and fire a symlink am cord been flashed busy box and so that's how we've managed to make it so",
    "start": "1137780",
    "end": "1143690"
  },
  {
    "text": "small and so compact it's really quite cool i'm so we can take this and we can build our own i'm",
    "start": "1143690",
    "end": "1150500"
  },
  {
    "text": "image from it so if we go up and so you",
    "start": "1150500",
    "end": "1156080"
  },
  {
    "text": "have a pity box so we can add in our own files so in this case we're adding a release directory",
    "start": "1156080",
    "end": "1164260"
  },
  {
    "text": "sorry Oh Alize file I'm called color code applied to build we want to extend our image to include that and so just as",
    "start": "1164260",
    "end": "1172070"
  },
  {
    "text": "we did with creating the empty image what we can do is zip up that directory",
    "start": "1172070",
    "end": "1178510"
  },
  {
    "text": "ripple got busy bugs directory as a tar or toilet are compress our directory",
    "start": "1178510",
    "end": "1185330"
  },
  {
    "text": "pass it into docker import and so docker will then convert that tar file into a docket image for us and so now we can do",
    "start": "1185330",
    "end": "1192110"
  },
  {
    "text": "ducky images and we have our beautiful busybox image created which we convert",
    "start": "1192110",
    "end": "1198380"
  },
  {
    "text": "and get out our file and so without needing to create the docker file",
    "start": "1198380",
    "end": "1203450"
  },
  {
    "text": "without needing to go through the traditional steps of docker run we can still get the benefits of having a",
    "start": "1203450",
    "end": "1210049"
  },
  {
    "text": "docker image created and so by having this we can explore alternative ways of",
    "start": "1210049",
    "end": "1215360"
  },
  {
    "text": "building it we don't need to go through the traditional approaches and we can use different tools in different approaches based on what our needs are",
    "start": "1215360",
    "end": "1222950"
  },
  {
    "text": "ie this can now learn somewhere like the",
    "start": "1222950",
    "end": "1229100"
  },
  {
    "text": "container actual container infinity's platform and the reason this is and the",
    "start": "1229100",
    "end": "1239960"
  },
  {
    "text": "reason this exists is because the structure which were working with a creating these towers crater knees",
    "start": "1239960",
    "end": "1246940"
  },
  {
    "text": "repository chaser and the layers are all based around an open container spec this",
    "start": "1246940",
    "end": "1253010"
  },
  {
    "text": "has been created originally by Daka they were donated to a foundation and so",
    "start": "1253010",
    "end": "1258440"
  },
  {
    "text": "now anyone involved can create docker and conclude container images which",
    "start": "1258440",
    "end": "1263570"
  },
  {
    "text": "congruent on any other container win time we don't have to be kind of specified and fixed into ones who don't",
    "start": "1263570",
    "end": "1269720"
  },
  {
    "text": "have any lock in so we can explore and go to different approaches and this is where the whole idea found demoness",
    "start": "1269720",
    "end": "1276080"
  },
  {
    "text": "builds come in so that we can move and scale up differently to popular ones at",
    "start": "1276080",
    "end": "1281330"
  },
  {
    "text": "the moment is one from Red Hat could builder and a knit one from Jes he works",
    "start": "1281330",
    "end": "1286789"
  },
  {
    "text": "now at Mike surf previously Google weather fear docker and she did awesome",
    "start": "1286789",
    "end": "1292340"
  },
  {
    "text": "work but the idea being is how can we learn and build our images in a simple",
    "start": "1292340",
    "end": "1297409"
  },
  {
    "text": "lightweight way which Cole which idea to the specifications defined so that they",
    "start": "1297409",
    "end": "1303320"
  },
  {
    "text": "throw in on docker but we convened them anywhere and we can win them without needing privileges we don't need a full",
    "start": "1303320",
    "end": "1308900"
  },
  {
    "text": "video we don't need all of the permissions which you need instead it",
    "start": "1308900",
    "end": "1314990"
  },
  {
    "text": "can be something like wait and available to everyone and the idea is that this",
    "start": "1314990",
    "end": "1320659"
  },
  {
    "text": "will be compatible with our existing ways of working so if we come back and",
    "start": "1320659",
    "end": "1326299"
  },
  {
    "text": "have a quick demo if we look at it's in some like image and right for",
    "start": "1326299",
    "end": "1336110"
  },
  {
    "text": "the coder so what we have now is we've got our container in time our machine",
    "start": "1336110",
    "end": "1342590"
  },
  {
    "text": "it's got the image binary installed we",
    "start": "1342590",
    "end": "1348110"
  },
  {
    "text": "can download kind of our dock adoro kind of like an example directory which I've got a doc file we can call build on that",
    "start": "1348110",
    "end": "1356900"
  },
  {
    "text": "and it would look and feel very similar to what we expect from docker build the",
    "start": "1356900",
    "end": "1362179"
  },
  {
    "text": "main difference is that we don't have a dock edemen installed it doesn't have the dock opposes winning and it doesn't",
    "start": "1362179",
    "end": "1368299"
  },
  {
    "text": "require an entire virtual machine and order the permissions from an entire operating system instead it wins using",
    "start": "1368299",
    "end": "1374360"
  },
  {
    "text": "rootless technologies and loeb non-privileged technologies and so we",
    "start": "1374360",
    "end": "1379820"
  },
  {
    "text": "don't we can burn the builds in a much more secure way which is ideal when our",
    "start": "1379820",
    "end": "1385549"
  },
  {
    "text": "builds are slightly more interested and it will go through it will do everything",
    "start": "1385549",
    "end": "1392690"
  },
  {
    "text": "which the duck builders I create that tar file fundamentally and these layers and then we can push that to a registry",
    "start": "1392690",
    "end": "1400070"
  },
  {
    "text": "and a work in exactly the same way when we rolled out across our system so this",
    "start": "1400070",
    "end": "1407600"
  },
  {
    "text": "is really cool and it's really interesting waves and directions which were heading so that's how we can build",
    "start": "1407600",
    "end": "1415909"
  },
  {
    "text": "an image we can build an image cheese and different technologies and that can",
    "start": "1415909",
    "end": "1420919"
  },
  {
    "text": "now give something which we can win so what happens when we want to run our process ie Windows or Linux or arm what",
    "start": "1420919",
    "end": "1428240"
  },
  {
    "text": "happens in the de covers and for the mentally at this point docker has taken up fundamental principles which are",
    "start": "1428240",
    "end": "1434270"
  },
  {
    "text": "available in a kernel they've packaged them together in a really nice appropriate way and they've",
    "start": "1434270",
    "end": "1440330"
  },
  {
    "text": "made it accessible for everyone to build upon and I what we did today and if you",
    "start": "1440330",
    "end": "1446659"
  },
  {
    "text": "look at the daka engine and the different components so we've got our command line interface a dock of win",
    "start": "1446659",
    "end": "1452330"
  },
  {
    "text": "that goes off and that talks to the docker engine and execute our commands into the",
    "start": "1452330",
    "end": "1457880"
  },
  {
    "text": "covers the docket engine talks to the technology hood contained e I",
    "start": "1457880",
    "end": "1463609"
  },
  {
    "text": "the project looked after by the CNC F and so completely independent and",
    "start": "1463609",
    "end": "1469960"
  },
  {
    "text": "available to everyone outside if not owned and coordinated by docker it's",
    "start": "1469960",
    "end": "1475609"
  },
  {
    "text": "coordinated by the community and then that will talk to another technology could win C and fundamentally win C of",
    "start": "1475609",
    "end": "1481909"
  },
  {
    "text": "what starts the process in a knife containerized way and because it went",
    "start": "1481909",
    "end": "1488989"
  },
  {
    "text": "inside this containerized process it's winning another container it's secure and by secure I mean we can add fertile",
    "start": "1488989",
    "end": "1496789"
  },
  {
    "text": "restrictions about what that process is or isn't allowed to do so we can restrict how much memory it's allowed",
    "start": "1496789",
    "end": "1503119"
  },
  {
    "text": "access to what is the posters here they can communicate with and see what devices on the system it's allowed to",
    "start": "1503119",
    "end": "1509389"
  },
  {
    "text": "access and we can lock it down as much as possible but fundamentally our",
    "start": "1509389",
    "end": "1515259"
  },
  {
    "text": "containerized process which da cavern it's still a running Linux process and",
    "start": "1515259",
    "end": "1520609"
  },
  {
    "text": "so if we will take our docker in command for example after that container started",
    "start": "1520609",
    "end": "1525649"
  },
  {
    "text": "we can list all of the processes on our system and we see that we've got this ready server winning it's owned by user",
    "start": "1525649",
    "end": "1532570"
  },
  {
    "text": "999 so it's running as a non root user again low privileged secure by default",
    "start": "1532570",
    "end": "1538840"
  },
  {
    "text": "mentality and it's got all the pigs and pulses which you would expect in the",
    "start": "1538840",
    "end": "1545629"
  },
  {
    "text": "discovers we don't need to use docker for doing this we could go to win C launch our container and again that",
    "start": "1545629",
    "end": "1550850"
  },
  {
    "text": "launcher they're just at this process winning on our system so what actually goes into a Linux process what is the",
    "start": "1550850",
    "end": "1557389"
  },
  {
    "text": "absolute docker doing another covers at this point so the first thing we need to",
    "start": "1557389",
    "end": "1562399"
  },
  {
    "text": "know if we want to explore this some more is we need to identify the pit ie the process ID of that container so we",
    "start": "1562399",
    "end": "1571009"
  },
  {
    "text": "can start exploring what's actually happening in the de covers and so if we were in docker top give it the container",
    "start": "1571009",
    "end": "1576049"
  },
  {
    "text": "name it will return the top information just for that one container and all of",
    "start": "1576049",
    "end": "1581960"
  },
  {
    "text": "the process is winning in fact that containerized process and so he gives us two important IDs one if the pit and one",
    "start": "1581960",
    "end": "1589279"
  },
  {
    "text": "is the parent pit I which process started and launch this containerized",
    "start": "1589279",
    "end": "1594639"
  },
  {
    "text": "process and so this case appeared I'm the process of that very server in three",
    "start": "1594639",
    "end": "1600539"
  },
  {
    "text": "five three seven and so now we can explore them what's happening like how is that configured and so all the",
    "start": "1600539",
    "end": "1607350"
  },
  {
    "text": "processes on Linux live in a directory called proc pork is the heart of all the",
    "start": "1607350",
    "end": "1614340"
  },
  {
    "text": "Linux processes and as all of the information about everything on our system and so if you lift the contents",
    "start": "1614340",
    "end": "1619500"
  },
  {
    "text": "of pork you'll see things like 1 10 11 12 ie all of posis IDs which are winning on",
    "start": "1619500",
    "end": "1626640"
  },
  {
    "text": "our system so one being v empty or the innate system and now also all of the",
    "start": "1626640",
    "end": "1631649"
  },
  {
    "text": "other things like our container which is winning and if we go into that directory we'll see lots of file with with strange",
    "start": "1631649",
    "end": "1639929"
  },
  {
    "text": "random names but they all have a certain targeted purpose and so we connect start",
    "start": "1639929",
    "end": "1645270"
  },
  {
    "text": "exploring these so for example if we look at the XE directory the or kind of",
    "start": "1645270",
    "end": "1652350"
  },
  {
    "text": "file the XE file is a pointer to the process which have been launched and so",
    "start": "1652350",
    "end": "1658380"
  },
  {
    "text": "we can find out the end-of-line process at that pot that page is related to so",
    "start": "1658380",
    "end": "1664740"
  },
  {
    "text": "in this case the ready server we can look at the command line I what command line with used in order to launch this",
    "start": "1664740",
    "end": "1671130"
  },
  {
    "text": "process we thought from top it was to read a server and a port number and we",
    "start": "1671130",
    "end": "1676649"
  },
  {
    "text": "can also start exploring things like the environment variables so what environments are set on this process the",
    "start": "1676649",
    "end": "1682350"
  },
  {
    "text": "reason if is interesting is because we can start changing my and modifying me files these are just standard Linux",
    "start": "1682350",
    "end": "1688140"
  },
  {
    "text": "principles and so when we do a doc verne we patent an environment variable flag like a a hostname or color like a",
    "start": "1688140",
    "end": "1697740"
  },
  {
    "text": "password that password is actually defined within this file and when",
    "start": "1697740",
    "end": "1703860"
  },
  {
    "text": "possess winning it's configured and asked what environment variables dobry",
    "start": "1703860",
    "end": "1708870"
  },
  {
    "text": "am i aware of the contents of this file if what and the process has access to",
    "start": "1708870",
    "end": "1716210"
  },
  {
    "text": "but this is also how all of the security models within that containerized process are configured and so one of the",
    "start": "1716210",
    "end": "1723000"
  },
  {
    "text": "examples of how a container is actually contained or how a container processes as it contains if you think control",
    "start": "1723000",
    "end": "1728520"
  },
  {
    "text": "groups a fee groups and three groups restrict how much of a resource the process is allowed to",
    "start": "1728520",
    "end": "1735190"
  },
  {
    "text": "access so for example it will control",
    "start": "1735190",
    "end": "1740200"
  },
  {
    "text": "how much memory that process is allowed to utilize and that value is a file",
    "start": "1740200",
    "end": "1746170"
  },
  {
    "text": "stored on disk with in the process directory and so in this case what we're doing is we're looking at the CPU shares",
    "start": "1746170",
    "end": "1754540"
  },
  {
    "text": "at a how much CPU is that process allowed but we're also modifying the",
    "start": "1754540",
    "end": "1760360"
  },
  {
    "text": "memory usage within up that process had allowed to access and so we're occurring",
    "start": "1760360",
    "end": "1765580"
  },
  {
    "text": "eight thousand or eight million into the file called memory dot limit in bytes",
    "start": "1765580",
    "end": "1772710"
  },
  {
    "text": "Linux and that covers we'll happy convert that into the proper value and not that eight thousand it would convert",
    "start": "1772710",
    "end": "1779590"
  },
  {
    "text": "it into actually the bytes correct byte value but now if we look at the stats and the information by that container we",
    "start": "1779590",
    "end": "1786370"
  },
  {
    "text": "can see that the process has been limited and we change that we increase it we can see that value increase",
    "start": "1786370",
    "end": "1791590"
  },
  {
    "text": "alongside and so we can start changing and modifying the security models of any",
    "start": "1791590",
    "end": "1796870"
  },
  {
    "text": "process within our system whether it been started by dark or not and if you phenomenally how people like Google and",
    "start": "1796870",
    "end": "1803910"
  },
  {
    "text": "Heroku and all of the other technologies were able to run processes in a secure container way before docker existed and",
    "start": "1803910",
    "end": "1811390"
  },
  {
    "text": "how doc Reggie gets it security model and so the another technique if",
    "start": "1811390",
    "end": "1816700"
  },
  {
    "text": "namespaces again namespaces are just references and pointers on disk and so",
    "start": "1816700",
    "end": "1822160"
  },
  {
    "text": "we can explore it can navigate and see what namespaces are processes attached to and I would how that for quixote",
    "start": "1822160",
    "end": "1828760"
  },
  {
    "text": "model it applied so the mounts the pid' namespace and net namespace and how we",
    "start": "1828760",
    "end": "1835390"
  },
  {
    "text": "can ensure that that process have a different theater different entry point",
    "start": "1835390",
    "end": "1842220"
  },
  {
    "text": "and view of the system than anything else winning our system the namespaces",
    "start": "1842220",
    "end": "1847540"
  },
  {
    "text": "allow us to limit and segregate each process so that they can't communicate with each other ensure that they get",
    "start": "1847540",
    "end": "1853240"
  },
  {
    "text": "different path trees until we list the container they only feed what processes",
    "start": "1853240",
    "end": "1858610"
  },
  {
    "text": "that container and she had access to and that's all done by the namespace and then final key aspect of docket",
    "start": "1858610",
    "end": "1866530"
  },
  {
    "text": "security and what makes a container contained or process contains are three",
    "start": "1866530",
    "end": "1872800"
  },
  {
    "text": "techniques a Parma set comp and capabilities at armor it the first one which we see so we can look at any",
    "start": "1872800",
    "end": "1878920"
  },
  {
    "text": "profile was have been find which had been fine to a process and in this case",
    "start": "1878920",
    "end": "1885490"
  },
  {
    "text": "we got the app armor profile darker default enforced and so this means that",
    "start": "1885490",
    "end": "1891300"
  },
  {
    "text": "the app armor profile had been applied the profile would basically define angle",
    "start": "1891300",
    "end": "1897580"
  },
  {
    "text": "if it's moves and what opposes can or cannot do and so you can define a wall saying I processes allowed to send TCP",
    "start": "1897580",
    "end": "1905710"
  },
  {
    "text": "packets but it's not allowed to send Ward network packets II's not allowed to send ping commands to the outside world",
    "start": "1905710",
    "end": "1912910"
  },
  {
    "text": "or it's allowed to write to the opt dietary but it's not allowed to watch",
    "start": "1912910",
    "end": "1919960"
  },
  {
    "text": "being XE home etc and this profile is was is designed to represent what a",
    "start": "1919960",
    "end": "1927310"
  },
  {
    "text": "normal functioning application is meant to be able to do and if the application goes outside of this then it's not",
    "start": "1927310",
    "end": "1934420"
  },
  {
    "text": "functioning that it's not allowed and if we strict it and I divining this secure profile the next technique is set comp",
    "start": "1934420",
    "end": "1942070"
  },
  {
    "text": "so ii is similar but it's designed to",
    "start": "1942070",
    "end": "1948300"
  },
  {
    "text": "restrict which system cause a process either allowed isn't allowed to make so",
    "start": "1948300",
    "end": "1953350"
  },
  {
    "text": "with in linux everything that an application does fundamentally gets boiled down to three hundred and",
    "start": "1953350",
    "end": "1959560"
  },
  {
    "text": "thirty-some same system cause and for the system cause that seems like opening a file changing modifications checking",
    "start": "1959560",
    "end": "1967900"
  },
  {
    "text": "if it's got access to read clothing file pointer handles fermented their underlying primitives of everything now",
    "start": "1967900",
    "end": "1975220"
  },
  {
    "text": "mostly 15 calls are happy and kind of faithful processes to call other ones",
    "start": "1975220",
    "end": "1980350"
  },
  {
    "text": "are a little bit more sensitive they they allow positives to install kernel modules or they allow them to mount",
    "start": "1980350",
    "end": "1986770"
  },
  {
    "text": "additional discs install additional network devices etc which are a lot more sensitive and",
    "start": "1986770",
    "end": "1992740"
  },
  {
    "text": "thumbs in which we wouldn't want posters potentially to access to and supply even that comp we",
    "start": "1992740",
    "end": "1999650"
  },
  {
    "text": "can restrict what processor what this and cause that process is allowed to make and for this is how we can start",
    "start": "1999650",
    "end": "2006400"
  },
  {
    "text": "enforcing a better security model and finally we can look at the capabilities",
    "start": "2006400",
    "end": "2011920"
  },
  {
    "text": "now capability their groupings of security techniques a grouping of",
    "start": "2011920",
    "end": "2018990"
  },
  {
    "text": "functionalities that are that exist within Linux so for example can I change",
    "start": "2018990",
    "end": "2025330"
  },
  {
    "text": "the system time is a capability and then you can define whether the process is oil isn't allowed to do that capability",
    "start": "2025330",
    "end": "2032110"
  },
  {
    "text": "ie is it allowed to change the system time or not and there's many different capabilities and they're all stored in a",
    "start": "2032110",
    "end": "2038110"
  },
  {
    "text": "interesting bit mask and if we decode that bit bit mask we can see all of the",
    "start": "2038110",
    "end": "2044770"
  },
  {
    "text": "processes and everything well that container is or isn't allowed to do and",
    "start": "2044770",
    "end": "2050620"
  },
  {
    "text": "because all of the primitives that we have are indeed wall containers it means",
    "start": "2050620",
    "end": "2056110"
  },
  {
    "text": "that in order to launch a process in a different security model all we need to do is know how D processes the file the",
    "start": "2056110",
    "end": "2062740"
  },
  {
    "text": "put together and how to correctly change them and when we need you and this is",
    "start": "2062740",
    "end": "2068080"
  },
  {
    "text": "how we've got different container win times which have emerged to the point",
    "start": "2068080",
    "end": "2074110"
  },
  {
    "text": "where if we wanted to create our own container win time we could do though in roughly 23 lines of code so this is an",
    "start": "2074110",
    "end": "2082300"
  },
  {
    "text": "example from Liz Weiss she's a developer evangelist at aqua",
    "start": "2082300",
    "end": "2087610"
  },
  {
    "text": "security and she uses go in order to create the most foundation simple",
    "start": "2087610",
    "end": "2094899"
  },
  {
    "text": "lightweight container in time possible and we can see that actually if we go through it line by line we can see that",
    "start": "2094900",
    "end": "2100990"
  },
  {
    "text": "aids launching a process in a different security model than normal in a more",
    "start": "2100990",
    "end": "2108580"
  },
  {
    "text": "restrictive security model and so it's configuring the fee groups I what how much resources is if process which is",
    "start": "2108580",
    "end": "2115570"
  },
  {
    "text": "gonna be launched allowed to access its setting some paid limits so they can how",
    "start": "2115570",
    "end": "2121180"
  },
  {
    "text": "many processes is that process allowed to fork and launch and it covers it sets",
    "start": "2121180",
    "end": "2126220"
  },
  {
    "text": "in safe amount directories so it can get access to certain properties if changing the route the to",
    "start": "2126220",
    "end": "2132470"
  },
  {
    "text": "route so instead of having access to everything on our desk it only had access to a certain directory i dis is",
    "start": "2132470",
    "end": "2139280"
  },
  {
    "text": "how docker changed it the root of the container to point to that docker image",
    "start": "2139280",
    "end": "2145150"
  },
  {
    "text": "directory and that's how the container processes work and if these kind of",
    "start": "2145150",
    "end": "2150890"
  },
  {
    "text": "techniques which allow us to launch and use different containers in times so if",
    "start": "2150890",
    "end": "2156920"
  },
  {
    "text": "we have a look at how do we launch a container I'd contains process we can",
    "start": "2156920",
    "end": "2163940"
  },
  {
    "text": "look at something like Putman actually let's do what is a container so what",
    "start": "2163940",
    "end": "2178040"
  },
  {
    "text": "we're going to do is we can run like our contain process just to see some of the",
    "start": "2178040",
    "end": "2184220"
  },
  {
    "text": "techniques and it covers so we can get the pit limits or the pit ID which is",
    "start": "2184220",
    "end": "2190160"
  },
  {
    "text": "one one thinks one in this case we can see the process 3 of that like what went",
    "start": "2190160",
    "end": "2195170"
  },
  {
    "text": "into a kilo engineer so this is the process it was launched by docker container D and which was launched",
    "start": "2195170",
    "end": "2202150"
  },
  {
    "text": "eventually by dr. D and so we can see how that process went in to being launched and now because everything's in",
    "start": "2202150",
    "end": "2209150"
  },
  {
    "text": "that pot directory we can explore we can",
    "start": "2209150",
    "end": "2215049"
  },
  {
    "text": "we can feel the files we can explore them a what environment variables have I",
    "start": "2215800",
    "end": "2221480"
  },
  {
    "text": "been defined etc so we have these names races which get attached so if we look",
    "start": "2221480",
    "end": "2229150"
  },
  {
    "text": "at trees a cat net",
    "start": "2229150",
    "end": "2235119"
  },
  {
    "text": "so we have all of our the net the network interface network component etc",
    "start": "2240140",
    "end": "2247850"
  },
  {
    "text": "and what we can do is we can launch view",
    "start": "2247850",
    "end": "2253320"
  },
  {
    "text": "the network namespaces I thought trying to go for and we can launch processes attached to these namespaces which can",
    "start": "2253320",
    "end": "2259500"
  },
  {
    "text": "be shared and so we can do PS and so now what we're doing if you didn't share which is the technique of launching a",
    "start": "2259500",
    "end": "2266250"
  },
  {
    "text": "process which have been attached to either containerized processes and for",
    "start": "2266250",
    "end": "2273570"
  },
  {
    "text": "in this case we use an ensure we're telling it to launch a new process we're telling it to have a separate paid",
    "start": "2273570",
    "end": "2279900"
  },
  {
    "text": "namespace talent directory so it knows how to launch an N launch bash and",
    "start": "2279900",
    "end": "2286160"
  },
  {
    "text": "fundamentally that is kind of a contained process it's been in it filmed in space it can't access anything else",
    "start": "2286160",
    "end": "2292560"
  },
  {
    "text": "within our system and that inter fundamental starting point to how we can launch these processes in a secure",
    "start": "2292560",
    "end": "2299070"
  },
  {
    "text": "container wised way and if these attorneys would go in to building our",
    "start": "2299070",
    "end": "2304680"
  },
  {
    "text": "container than what dock without you doing with C groups up armor and capabilities that's why I wanted to show",
    "start": "2304680",
    "end": "2312300"
  },
  {
    "text": "some what about either container win times so if we have a look Padma",
    "start": "2312300",
    "end": "2321230"
  },
  {
    "text": "so what Putman is doing is taking all of these primitives of what's available",
    "start": "2323309",
    "end": "2328559"
  },
  {
    "text": "within three groups and building them into an alternative container win time the main difference is if we don't need",
    "start": "2328559",
    "end": "2334919"
  },
  {
    "text": "anything installed on our system apart from the pod man CLI itself and when C",
    "start": "2334919",
    "end": "2340019"
  },
  {
    "text": "and we don't need a daemon running to manage the processor instead the processes are just winning in this",
    "start": "2340019",
    "end": "2345209"
  },
  {
    "text": "container odds way by taking the techniques of configuring lessee groups and configuring these capabilities so if",
    "start": "2345209",
    "end": "2353249"
  },
  {
    "text": "we do pipeline when we can give it the same docket image because phenomena",
    "start": "2353249",
    "end": "2360539"
  },
  {
    "text": "docker image is a container image based on a spec and so it can burn anywhere all we need to do download and extract",
    "start": "2360539",
    "end": "2366869"
  },
  {
    "text": "that tar file and we can launch a process because fundamentally all the process is is a Linux with different",
    "start": "2366869",
    "end": "2374640"
  },
  {
    "text": "cgroups namespaces and the prot directory configurations defined so",
    "start": "2374640",
    "end": "2380099"
  },
  {
    "text": "anyone is able to do this ie Padma and all if there is the CLI is a wrapper",
    "start": "2380099",
    "end": "2386099"
  },
  {
    "text": "over the top of these processes which are winning on our system so in this",
    "start": "2386099",
    "end": "2393179"
  },
  {
    "text": "case it will list all of the processes running which have been started by apartment but if we look at the process",
    "start": "2393179",
    "end": "2399989"
  },
  {
    "text": "tree if we do P X P s3 see how good my",
    "start": "2399989",
    "end": "2410549"
  },
  {
    "text": "memory is the process tree it's a lot",
    "start": "2410549",
    "end": "2415709"
  },
  {
    "text": "smaller and a lot more focused than what",
    "start": "2415709",
    "end": "2420929"
  },
  {
    "text": "it was before because we don't have these demons hanging around which are controlling that application and so now",
    "start": "2420929",
    "end": "2427559"
  },
  {
    "text": "we we don't have to worry about what happens if the demon crashes because it's not going to kill all the positives",
    "start": "2427559",
    "end": "2433319"
  },
  {
    "text": "which it launched because there is no demon process in its place it's just the",
    "start": "2433319",
    "end": "2438509"
  },
  {
    "text": "same as if we just ran PS or kind of like any other process on our system pod",
    "start": "2438509",
    "end": "2444509"
  },
  {
    "text": "mine is just winning a process and configuring a security model around it making it a very lightweight those",
    "start": "2444509",
    "end": "2449939"
  },
  {
    "text": "streamlined way to launch processes on any system and this is the idea we have",
    "start": "2449939",
    "end": "2457080"
  },
  {
    "text": "with different container win times we want to take it to the bear to the bear principals once we have that in place we",
    "start": "2457080",
    "end": "2464250"
  },
  {
    "text": "can start exploring different security models and so this is where we start seeing things I know twin ative container win times",
    "start": "2464250",
    "end": "2470610"
  },
  {
    "text": "start popping up like catch containers or Windows hyper-v containers they just",
    "start": "2470610",
    "end": "2476040"
  },
  {
    "text": "take that process they can launch it within a very cut-down very lightweight",
    "start": "2476040",
    "end": "2481080"
  },
  {
    "text": "streamlined virtual machine so that you get a different kernel that you're not showing the same kernel you get more",
    "start": "2481080",
    "end": "2487650"
  },
  {
    "text": "secure bounty contacts and I search if I",
    "start": "2487650",
    "end": "2492660"
  },
  {
    "text": "process does get broken into and exploited if they do manage to break out",
    "start": "2492660",
    "end": "2497760"
  },
  {
    "text": "the containers they don't have access to everything else on our system so again",
    "start": "2497760",
    "end": "2504210"
  },
  {
    "text": "why is this important so this becomes critical where we look at things like",
    "start": "2504210",
    "end": "2509970"
  },
  {
    "text": "Cuba Nettie's Cuba noted itself is a container orchestration if designed to",
    "start": "2509970",
    "end": "2514980"
  },
  {
    "text": "learn manage and control all of the processes across our deployments and",
    "start": "2514980",
    "end": "2520100"
  },
  {
    "text": "Cuba natives is great it's been building on top of docker and they've taken advantage of all of these container",
    "start": "2520100",
    "end": "2526290"
  },
  {
    "text": "technologies the problem becomes when docker want to go down a certain path",
    "start": "2526290",
    "end": "2531750"
  },
  {
    "text": "and a vision and how they want that API to be structured which is particularly not aligned with the vision of how Cuba",
    "start": "2531750",
    "end": "2538950"
  },
  {
    "text": "Nettie's wants things to be winning so for example if you have ever including it is and you've looked at what winning",
    "start": "2538950",
    "end": "2544440"
  },
  {
    "text": "you'll see lots of pores processes winning and if Paul's processes is",
    "start": "2544440",
    "end": "2550020"
  },
  {
    "text": "because Cuba natives talk to their within around a pod concept of a pod where you can share network interfaces",
    "start": "2550020",
    "end": "2557670"
  },
  {
    "text": "the volumes and different security aspects of a container together thinking",
    "start": "2557670",
    "end": "2563100"
  },
  {
    "text": "multiple containers which can all act as if two on the same machine but docker doesn't have this concept of a pod so",
    "start": "2563100",
    "end": "2569850"
  },
  {
    "text": "they've kind of had to you create kind of these abstractions to represent how they want to Burnett is to be structured",
    "start": "2569850",
    "end": "2576120"
  },
  {
    "text": "in an ideal world so instead of that they're going down a different path and allowing support for different container",
    "start": "2576120",
    "end": "2582810"
  },
  {
    "text": "win times one of which it would you cryo which he designed with kubernetes in mind and designed to be aligned with how",
    "start": "2582810",
    "end": "2590610"
  },
  {
    "text": "connected that's operating and keep it a small lightweight and streamlined and so that when kubernetes is upgrading and",
    "start": "2590610",
    "end": "2597990"
  },
  {
    "text": "making changes cryo is there to support it and it works almost in exactly the",
    "start": "2597990",
    "end": "2605010"
  },
  {
    "text": "same way but it's a little bit easier for the community and operators to",
    "start": "2605010",
    "end": "2611100"
  },
  {
    "text": "manage and so we look at and getting started so if we do kubernetes init",
    "start": "2611100",
    "end": "2620780"
  },
  {
    "text": "large so to baby Emma nipped so Cupid",
    "start": "2620780",
    "end": "2626070"
  },
  {
    "text": "eme it's a way to bootstrap a keeping in touch Calista and so what it will do is go through and set up things like",
    "start": "2626070",
    "end": "2632930"
  },
  {
    "text": "certificates and so that all it's a different committee Cuban exit processes can talk to each other set up all of the",
    "start": "2632930",
    "end": "2638970"
  },
  {
    "text": "different configuration download all of the container images required in order to launcher and so but for this will go",
    "start": "2638970",
    "end": "2645420"
  },
  {
    "text": "to darker and I'll do everything via the docker API but now we've started having these abstractions and supporting",
    "start": "2645420",
    "end": "2651180"
  },
  {
    "text": "different container win times I cut a container of G's either docker and cryo",
    "start": "2651180",
    "end": "2656550"
  },
  {
    "text": "and so when we do it what we do is we pointed to a different container",
    "start": "2656550",
    "end": "2661620"
  },
  {
    "text": "one-time interface ie in this case cryo socket file and so now instead of cuvee",
    "start": "2661620",
    "end": "2667230"
  },
  {
    "text": "diem and kubernetes initializing itself on top of docker initial I did itself",
    "start": "2667230",
    "end": "2672260"
  },
  {
    "text": "using this process and so if we create this if we look at docker PS we don't",
    "start": "2672260",
    "end": "2680760"
  },
  {
    "text": "have any containers winning if we do kubernetes win time interface controlled",
    "start": "2680760",
    "end": "2687090"
  },
  {
    "text": "PS we can see all of these processes which are Venant and compared to what it looks like when",
    "start": "2687090",
    "end": "2692580"
  },
  {
    "text": "we do kubernetes and docker which is lots of pores containers lots more noise instead we have a much more focused",
    "start": "2692580",
    "end": "2698640"
  },
  {
    "text": "experience we can see the processes that kubernetes requires either api the",
    "start": "2698640",
    "end": "2704850"
  },
  {
    "text": "control manager the scheduler so that these things can be launched and it's much more focused on how the kubernetes",
    "start": "2704850",
    "end": "2712040"
  },
  {
    "text": "experience is designed home and so these were launched and we can interact and",
    "start": "2712040",
    "end": "2718320"
  },
  {
    "text": "control and feed positive and exactly the same way as we would",
    "start": "2718320",
    "end": "2723440"
  },
  {
    "text": "before including that is is being open and transparent to supporting these different container win times so if you",
    "start": "2723440",
    "end": "2729890"
  },
  {
    "text": "look we've got our master winning we can describe the master and get the container win time version and so now",
    "start": "2729890",
    "end": "2736730"
  },
  {
    "text": "they will support and be open to different platforms based on what our needs are which will decide and for",
    "start": "2736730",
    "end": "2745579"
  },
  {
    "text": "example what does this mean so what it means is when we look at things like the",
    "start": "2745579",
    "end": "2753500"
  },
  {
    "text": "azure contain instances we want the ability for Cuba natives to be able to schedule different types of workloads be",
    "start": "2753500",
    "end": "2759770"
  },
  {
    "text": "that doctor containers been in our hosts container win times in that secure more",
    "start": "2759770",
    "end": "2765049"
  },
  {
    "text": "containerized sandbox to everything like cattle containers and hyper-v containers they also allowed to scale up to things",
    "start": "2765049",
    "end": "2772190"
  },
  {
    "text": "like as your container instances and tomato if easier Microsoft have built something called the virtual Kubler and",
    "start": "2772190",
    "end": "2778280"
  },
  {
    "text": "so what we can do is we have our different kubernetes nodes within our system they know how to launch",
    "start": "2778280",
    "end": "2785900"
  },
  {
    "text": "containers I'm according to the different container win times that we specified and the different security",
    "start": "2785900",
    "end": "2791210"
  },
  {
    "text": "techniques that we require but the virtual Kubler also knows how to launch containers and different systems one of",
    "start": "2791210",
    "end": "2797270"
  },
  {
    "text": "which is thieves or container container infinitive service and so if we wanted",
    "start": "2797270",
    "end": "2803960"
  },
  {
    "text": "to scale up we can have the virtual cube let go off to the API deploy the process their workloads happens and then when",
    "start": "2803960",
    "end": "2810890"
  },
  {
    "text": "it's finished it gets head back down again and so by thinking differently and thinking beyond the scope of why we have",
    "start": "2810890",
    "end": "2817460"
  },
  {
    "text": "docker and we have processes and if you've have we launched things we can change how our architecture happened",
    "start": "2817460",
    "end": "2822920"
  },
  {
    "text": "within our system and as such we can start exploring new alternative ways of deploying and managing our system and so",
    "start": "2822920",
    "end": "2832339"
  },
  {
    "text": "the demos which I show to you are all available online if good catch Khoda I've got demos and scenarios which walk",
    "start": "2832339",
    "end": "2838760"
  },
  {
    "text": "you through what a container a process is which I showed you and explore today how to build images and how to get",
    "start": "2838760",
    "end": "2845660"
  },
  {
    "text": "started and for me I find it's really interesting because it allows us to build systems that are appropriate for",
    "start": "2845660",
    "end": "2852559"
  },
  {
    "text": "our needs it allows it to build systems I designed to so particular problems like all I need",
    "start": "2852559",
    "end": "2859250"
  },
  {
    "text": "to do is build container images in a secure way so instead of having to worry about the entire the docker stack",
    "start": "2859250",
    "end": "2864860"
  },
  {
    "text": "instead I can just use image and a command line tool which will go ahead and build up one image process for me",
    "start": "2864860",
    "end": "2871130"
  },
  {
    "text": "and allow me to win it anywhere because we don't need the security model of winning an entire containerized system",
    "start": "2871130",
    "end": "2878380"
  },
  {
    "text": "and if you also take things like cloud bursting builds which I think are gonna be a great advantage in the future and",
    "start": "2878380",
    "end": "2884240"
  },
  {
    "text": "so that we don't need to have these big heavy virtual machines hanging around instead we can just have processors",
    "start": "2884240",
    "end": "2889820"
  },
  {
    "text": "winning and within the civilus foundations and several technologies",
    "start": "2889820",
    "end": "2895000"
  },
  {
    "text": "we'll see more this happening over the future and more this coming but at the moment today we have things like cryo",
    "start": "2895000",
    "end": "2901070"
  },
  {
    "text": "we have pod man so that we can learn these processes in a containerized way and we have different ways of building",
    "start": "2901070",
    "end": "2906800"
  },
  {
    "text": "to build our images and more coming soon and particularly from google so hope you",
    "start": "2906800",
    "end": "2913070"
  },
  {
    "text": "found that interesting it's an insight into what's coming into the future and how I think the landscape is changing if",
    "start": "2913070",
    "end": "2918500"
  },
  {
    "text": "you have any questions then please do email me or tweet me and with that I hope you enjoy the rest of your",
    "start": "2918500",
    "end": "2923990"
  },
  {
    "text": "conference thank you",
    "start": "2923990",
    "end": "2927070"
  }
]