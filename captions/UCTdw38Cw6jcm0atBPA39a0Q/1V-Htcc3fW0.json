[
  {
    "start": "0",
    "end": "144000"
  },
  {
    "text": "well hello everyone good morning welcome to day two of uh ndc london 2021",
    "start": "7200",
    "end": "16480"
  },
  {
    "text": "my name is this session is about writing tests with c sharp",
    "start": "16480",
    "end": "24320"
  },
  {
    "text": "just to check that everybody is on the same as on the same page so i have lots of stuff to go through so",
    "start": "24320",
    "end": "31439"
  },
  {
    "text": "let's just jump right into it um let me tell you just a little bit",
    "start": "31439",
    "end": "37360"
  },
  {
    "text": "about myself uh let me see if i can actually change this light yeah there you go",
    "start": "37360",
    "end": "43280"
  },
  {
    "text": "uh as i said my name is enrico i am a freelance programmer this is me",
    "start": "43280",
    "end": "50399"
  },
  {
    "text": "freelancing from home i also do a fair bit of training like",
    "start": "50399",
    "end": "56960"
  },
  {
    "text": "online courses workshops and presentations like like this one uh all that's",
    "start": "56960",
    "end": "64478"
  },
  {
    "text": "done from home no who would have thought anyway we're not here to talk about that",
    "start": "64479",
    "end": "69520"
  },
  {
    "text": "we are here to talk about writing tests using a library",
    "start": "69520",
    "end": "75600"
  },
  {
    "text": "called auto fixture now if you've never heard about auto fixture let me",
    "start": "75600",
    "end": "81439"
  },
  {
    "text": "just give you a quick intro auto fixture is a an open source library",
    "start": "81439",
    "end": "88400"
  },
  {
    "text": "uh 4.net whose goal is to help you",
    "start": "88400",
    "end": "94640"
  },
  {
    "text": "write a better test by auto generating test data for you now",
    "start": "94640",
    "end": "101200"
  },
  {
    "text": "what that means we are going to get into in a moment but just to give you an overview out of",
    "start": "101200",
    "end": "107280"
  },
  {
    "text": "which has been around for uh i would say around 10 years now and it has been used quite a bit i would",
    "start": "107280",
    "end": "114799"
  },
  {
    "text": "say it has seen some some amount of of usage and in the interest of full",
    "start": "114799",
    "end": "121680"
  },
  {
    "text": "disclosure i am a contributor to um to the project",
    "start": "121680",
    "end": "126719"
  },
  {
    "text": "and i've been for a few years and yeah so uh",
    "start": "126719",
    "end": "133760"
  },
  {
    "text": "this presentation is about how to use auto fixture to when you do tdd",
    "start": "133760",
    "end": "140080"
  },
  {
    "text": "to write dry tests now let's start with a premise and the",
    "start": "140080",
    "end": "147440"
  },
  {
    "start": "144000",
    "end": "209000"
  },
  {
    "text": "premise is that tests that are small in size",
    "start": "147440",
    "end": "153360"
  },
  {
    "text": "and that are expressive in the sense that they actually tell you what it is they",
    "start": "153360",
    "end": "159200"
  },
  {
    "text": "are trying to test that's a good thing we want that in our",
    "start": "159200",
    "end": "164239"
  },
  {
    "text": "tests do we all agree on that premise i'm gonna take that as a yes yes",
    "start": "164239",
    "end": "172319"
  },
  {
    "text": "good perfect uh how we're gonna do that well we're",
    "start": "172319",
    "end": "177519"
  },
  {
    "text": "going to leverage three unit testing patterns and these are well documented patterns",
    "start": "177519",
    "end": "183440"
  },
  {
    "text": "that are part of the book x unit patterns that have been around for you know many years we're going to use",
    "start": "183440",
    "end": "190319"
  },
  {
    "text": "three of these patterns and but we're not going to implement them ourselves we are going to use a",
    "start": "190319",
    "end": "197840"
  },
  {
    "text": "library that implements those pattern for us and",
    "start": "197840",
    "end": "202879"
  },
  {
    "text": "leverage it that way and if you can guess that library is out to feature",
    "start": "202879",
    "end": "209360"
  },
  {
    "start": "209000",
    "end": "424000"
  },
  {
    "text": "let's talk about this this word right here actually as let's focus on everybody agrees on",
    "start": "209360",
    "end": "215599"
  },
  {
    "text": "what auto means that's automatic but what is a fixture so let's focus a bit on this",
    "start": "215599",
    "end": "223040"
  },
  {
    "text": "let's talk about what a fixture is because it's kind of important in this context now when you write a",
    "start": "223040",
    "end": "229440"
  },
  {
    "text": "test you have a system that you're trying to test and in the case of unit tests that would be that would be a class now in",
    "start": "229440",
    "end": "237040"
  },
  {
    "text": "order to test a system you have to put it into some kind of context",
    "start": "237040",
    "end": "243120"
  },
  {
    "text": "well that context in which you put your system under test in order to verify its behavior that's",
    "start": "243200",
    "end": "250000"
  },
  {
    "text": "the fixture and how does a fixture look like well you have if you've written",
    "start": "250000",
    "end": "255840"
  },
  {
    "text": "at least one unit test in your life you know what uh how a fixture looks like you invoke",
    "start": "255840",
    "end": "261680"
  },
  {
    "text": "methods or set properties on your system on the test you generate values that you pass into",
    "start": "261680",
    "end": "269120"
  },
  {
    "text": "the methods as as test arguments and ideally a test",
    "start": "269120",
    "end": "276479"
  },
  {
    "text": "should contain a pretty small amount of this context because ideally in a",
    "start": "276479",
    "end": "282560"
  },
  {
    "text": "unit test you should verify one thing and you know in a perfect world that one thing will require a minimal",
    "start": "282560",
    "end": "290720"
  },
  {
    "text": "amount of context however reality is much different than that",
    "start": "290720",
    "end": "296479"
  },
  {
    "text": "we all know that these contexts they grow in size and you just don't need just maybe for",
    "start": "296479",
    "end": "303199"
  },
  {
    "text": "your particular scenario you need one value but because of the nature of the system",
    "start": "303199",
    "end": "308720"
  },
  {
    "text": "you have to create a lot more stuff in order to be able to test it at all",
    "start": "308720",
    "end": "313919"
  },
  {
    "text": "and that involves creating entire object graphs coming up with more values",
    "start": "313919",
    "end": "319280"
  },
  {
    "text": "sometimes you don't know what to pass in so you pass null and that's how our tests usually look",
    "start": "319280",
    "end": "325840"
  },
  {
    "text": "like a lot of setup code for what is actually very",
    "start": "325840",
    "end": "331120"
  },
  {
    "text": "little behavior to verify but we have another problem is so",
    "start": "331120",
    "end": "338240"
  },
  {
    "text": "it's not just it's like it's it's not enough to have big fixture",
    "start": "338240",
    "end": "343919"
  },
  {
    "text": "one other problem is that for everything every time you invoke your system on the test by",
    "start": "343919",
    "end": "349199"
  },
  {
    "text": "passing arguments or by actually invoking its api you are creating coupling onto it",
    "start": "349199",
    "end": "358400"
  },
  {
    "text": "and that we know that uh coupling what it means is that it's gonna be harder to change",
    "start": "358639",
    "end": "365120"
  },
  {
    "text": "now imagine",
    "start": "365120",
    "end": "370160"
  },
  {
    "text": "not having one test with this scenario but having the same thing be repeated",
    "start": "370160",
    "end": "376800"
  },
  {
    "text": "for every test of course every test is going to need a fixture and in most of the cases",
    "start": "376800",
    "end": "384800"
  },
  {
    "text": "if it's the same system you are testing you're gonna have to create pretty much the same amount of content",
    "start": "384800",
    "end": "390720"
  },
  {
    "text": "context for every test so we have duplicated setup code",
    "start": "390720",
    "end": "396319"
  },
  {
    "text": "everywhere maybe sometime you change something in particular test for example you",
    "start": "396319",
    "end": "403520"
  },
  {
    "text": "change this value to full or maybe you pass 40 42 instead of",
    "start": "403520",
    "end": "410080"
  },
  {
    "text": "of 12 and what happens is it starts small but it grows really big",
    "start": "410080",
    "end": "417280"
  },
  {
    "text": "and you know that's not good so",
    "start": "417280",
    "end": "423840"
  },
  {
    "start": "424000",
    "end": "473000"
  },
  {
    "text": "how can how are we going to solve that problem well let's take a look at how a test is",
    "start": "425199",
    "end": "431599"
  },
  {
    "text": "built you all know that that setup that we've been talking about",
    "start": "431599",
    "end": "437120"
  },
  {
    "text": "in the formal terminology that's called the arrange phase and that's where we",
    "start": "437120",
    "end": "444080"
  },
  {
    "text": "set up our fixture now that's usually pretty big the second part of the test",
    "start": "444080",
    "end": "449759"
  },
  {
    "text": "is act the third part is assert now you see the proportions here a range",
    "start": "449759",
    "end": "455599"
  },
  {
    "text": "is a lot bigger than the other two now what we want to do without the fixture is reduce the size of this",
    "start": "455599",
    "end": "462400"
  },
  {
    "text": "range so that it contains the minimal amount of context that we need for a particular",
    "start": "462400",
    "end": "468639"
  },
  {
    "text": "scenario so in other words if the scenario",
    "start": "468639",
    "end": "476639"
  },
  {
    "text": "ideally would require a certain size of context we want the fixture to match that size",
    "start": "476639",
    "end": "483360"
  },
  {
    "text": "we don't want to create anything more than than what is necessary in other words we want to reduce",
    "start": "483360",
    "end": "491520"
  },
  {
    "text": "the amount of calls that we make onto our system on the test",
    "start": "491520",
    "end": "496879"
  },
  {
    "text": "does reducing coupling and the duplication because you know that fewer explicit",
    "start": "496879",
    "end": "503840"
  },
  {
    "text": "calls you make to onto your system on the test the easier is going to be to change",
    "start": "503840",
    "end": "510879"
  },
  {
    "start": "512000",
    "end": "588000"
  },
  {
    "text": "so let's switch gear and talk about these three unit testing patterns now that we have talked about what the problem is",
    "start": "512560",
    "end": "518000"
  },
  {
    "text": "let's talk about how we're going to attack it the first unit test testing pattern that",
    "start": "518000",
    "end": "524000"
  },
  {
    "text": "we're going to use is called anonymous data now what's anonymous data",
    "start": "524000",
    "end": "529360"
  },
  {
    "text": "well it's any input value that exercises the code path under test",
    "start": "529360",
    "end": "537519"
  },
  {
    "text": "now let's let's unpack it imagine a a method like this it takes an",
    "start": "537519",
    "end": "545200"
  },
  {
    "text": "input value that's an integer and it has exactly one line of code that",
    "start": "545200",
    "end": "551200"
  },
  {
    "text": "checks whether the value is positive or not now it doesn't really matter what number",
    "start": "551200",
    "end": "558080"
  },
  {
    "text": "you pass in into this function that line is always going to be run so",
    "start": "558080",
    "end": "565760"
  },
  {
    "text": "you say that that value can be anonymous as long as it exercises that line it",
    "start": "565760",
    "end": "571760"
  },
  {
    "text": "doesn't really matter if that's a 2 or a so we can leave it anonymous",
    "start": "571760",
    "end": "578480"
  },
  {
    "text": "the second unit test pattern is called equivalent sets and now this",
    "start": "578480",
    "end": "583760"
  },
  {
    "text": "is sounding more exotic by the minute so what is it",
    "start": "583760",
    "end": "590160"
  },
  {
    "start": "588000",
    "end": "698000"
  },
  {
    "text": "given that we have anonymous values that we can pass in the set of those values",
    "start": "590160",
    "end": "596959"
  },
  {
    "text": "that exercises the same code path",
    "start": "596959",
    "end": "602160"
  },
  {
    "text": "through the code is said to be an equivalent set now again let's take an example",
    "start": "602160",
    "end": "609760"
  },
  {
    "text": "imagine a slightly more complex function where you have an input value and you",
    "start": "609760",
    "end": "615440"
  },
  {
    "text": "have two branches that execute based on what that value is",
    "start": "615440",
    "end": "621519"
  },
  {
    "text": "now if i invoke this method with the values 4 and 9 those values are bigger than 3",
    "start": "621519",
    "end": "628240"
  },
  {
    "text": "and they will execute that line of code if i invoke this method with 0 and 2",
    "start": "628240",
    "end": "633680"
  },
  {
    "text": "those values are less than 3 that means they will execute the other branch now 4",
    "start": "633680",
    "end": "640959"
  },
  {
    "text": "and 9 and 0 and 2 those are equivalent sets those from the point",
    "start": "640959",
    "end": "647440"
  },
  {
    "text": "of view of the test it doesn't really matter if it's one or the other as long as it exercises the",
    "start": "647440",
    "end": "652480"
  },
  {
    "text": "same line of code so those are equivalent",
    "start": "652480",
    "end": "656720"
  },
  {
    "text": "the third and final unit testing pattern is called the taste data builder that actually no pun intended builds",
    "start": "658640",
    "end": "666079"
  },
  {
    "text": "upon the other two now as if you remember what we just said",
    "start": "666079",
    "end": "671440"
  },
  {
    "text": "we said that uh we can leave some values",
    "start": "671440",
    "end": "676880"
  },
  {
    "text": "anonymous when we write tests as long as they exercise the code that we are interested in",
    "start": "676880",
    "end": "682399"
  },
  {
    "text": "verifying so if we can leave them anonymous it means that we can actually",
    "start": "682399",
    "end": "690000"
  },
  {
    "text": "delegate the responsibility of coming up with those values to an external party and that external",
    "start": "690000",
    "end": "695839"
  },
  {
    "text": "party is the test data builder so a test data builder is a factory",
    "start": "695839",
    "end": "702720"
  },
  {
    "start": "698000",
    "end": "790000"
  },
  {
    "text": "we all love factories that create values used to test a specific",
    "start": "702720",
    "end": "709440"
  },
  {
    "text": "code path",
    "start": "709440",
    "end": "716000"
  },
  {
    "text": "so given this method any small positive number that we pass in is",
    "start": "716000",
    "end": "722880"
  },
  {
    "text": "going to be enough to exercise all the possible code path",
    "start": "722880",
    "end": "729440"
  },
  {
    "text": "this means that our test data builder the values that we it will come up with",
    "start": "729440",
    "end": "735839"
  },
  {
    "text": "are enough to cover the vast majority of the code path that we have in our code bases",
    "start": "735839",
    "end": "743200"
  },
  {
    "text": "so the usual 80 20 rule says that a test data builder in can cover",
    "start": "743279",
    "end": "750079"
  },
  {
    "text": "80 percent of the cases just with its default values that it comes up with for example a string is going to",
    "start": "750079",
    "end": "756720"
  },
  {
    "text": "be a string and it's just going to be a small positive integer a boolean can be either true or false so",
    "start": "756720",
    "end": "762399"
  },
  {
    "text": "given these defaults we can cover 80 of the of the code paths however",
    "start": "762399",
    "end": "767760"
  },
  {
    "text": "there is a remaining 20 in which we actually need the value to",
    "start": "767760",
    "end": "773360"
  },
  {
    "text": "be of a specific kind and for those cases",
    "start": "773360",
    "end": "779360"
  },
  {
    "text": "our test data builder will need to have some way to let us customize the test data that",
    "start": "779360",
    "end": "785200"
  },
  {
    "text": "it produces",
    "start": "785200",
    "end": "787839"
  },
  {
    "start": "790000",
    "end": "959000"
  },
  {
    "text": "how let's let's now that we have been gone through the theory let's talk about how we're going to",
    "start": "790800",
    "end": "796320"
  },
  {
    "text": "demonstrate now in this talk i'm going to implement",
    "start": "796320",
    "end": "802399"
  },
  {
    "text": "a conway's game of life uh within c-sharp in a test driven manner using",
    "start": "802399",
    "end": "810880"
  },
  {
    "text": "how to fixture as our test data builder now if you are familiar with the",
    "start": "810880",
    "end": "816560"
  },
  {
    "text": "conway's game of life that's good if you're not here is a quick intro game of life is a",
    "start": "816560",
    "end": "823040"
  },
  {
    "text": "logic game invented by conway",
    "start": "823040",
    "end": "828399"
  },
  {
    "text": "that consists of a grid of cells and each cell can have either one of two states it can",
    "start": "828399",
    "end": "835519"
  },
  {
    "text": "either be alive or it can be that now this entire grid of cells",
    "start": "835519",
    "end": "844240"
  },
  {
    "text": "is going to be refreshed and that means that you basically recalculate the value",
    "start": "844639",
    "end": "851920"
  },
  {
    "text": "for all those cells based on four ex specific rules",
    "start": "851920",
    "end": "857440"
  },
  {
    "text": "and all those four rules have to do with the state of a any given cell's",
    "start": "857440",
    "end": "863040"
  },
  {
    "text": "neighbors now as you refresh this grid that's called a generation",
    "start": "863040",
    "end": "869360"
  },
  {
    "text": "any particular snapshot of cells is a generation so when you calculate a new generation",
    "start": "869360",
    "end": "875600"
  },
  {
    "text": "based on those rules some cells will come alive some other cells will be dead",
    "start": "875600",
    "end": "880880"
  },
  {
    "text": "and that creates patterns for every time you refresh this grid",
    "start": "880880",
    "end": "886000"
  },
  {
    "text": "and that's kind of interesting because based on what the start pattern is every time you you refresh so",
    "start": "886000",
    "end": "893839"
  },
  {
    "text": "some patterns are perpetual they're they will go on forever other patterns will",
    "start": "893839",
    "end": "899600"
  },
  {
    "text": "eventually lead to all the cells being dead all based on what the star pattern is",
    "start": "899600",
    "end": "905279"
  },
  {
    "text": "pretty interesting stuff now we are now going to implement all four of these rules otherwise we'll be",
    "start": "905279",
    "end": "910399"
  },
  {
    "text": "here until tomorrow we're going to implement just one of the four rules",
    "start": "910399",
    "end": "916079"
  },
  {
    "text": "and this rule is called the rule of under population which goes like this",
    "start": "916079",
    "end": "922800"
  },
  {
    "text": "a cell that's alive but that has fewer than two live",
    "start": "922800",
    "end": "928720"
  },
  {
    "text": "neighbors is going to die in the next generation",
    "start": "928720",
    "end": "934000"
  },
  {
    "text": "due to underpopulation so that's the rule we're going to implement we're going to implement it in",
    "start": "934000",
    "end": "940079"
  },
  {
    "text": "c sharp uh in a test driven manner so without further ado let's tdd",
    "start": "940079",
    "end": "949600"
  },
  {
    "text": "okay let's see if i can there you go switch to visual studio",
    "start": "951759",
    "end": "958639"
  },
  {
    "text": "code all right so what i have here is um yeah with the studio code",
    "start": "958639",
    "end": "964399"
  },
  {
    "start": "959000",
    "end": "1058000"
  },
  {
    "text": "i have a sample project on my left which might be your right i'm not",
    "start": "964399",
    "end": "970959"
  },
  {
    "text": "really sure anyway on one side are the tests that",
    "start": "970959",
    "end": "976480"
  },
  {
    "text": "we're going to write and on the opposite side we have the production code so i have a little starting point here",
    "start": "976480",
    "end": "984240"
  },
  {
    "text": "where i have created a test class now notice how i'm writing",
    "start": "984240",
    "end": "989600"
  },
  {
    "text": "this test class usually maybe if you're used to having your tests in a class that has the same name as the",
    "start": "989600",
    "end": "997199"
  },
  {
    "text": "class you're testing plus the test or test suffix i also",
    "start": "997199",
    "end": "1005120"
  },
  {
    "text": "used to do that but a few years ago i stumbled upon a different style of",
    "start": "1005120",
    "end": "1010720"
  },
  {
    "text": "writing unit test that's called bdd style testing",
    "start": "1010720",
    "end": "1015920"
  },
  {
    "text": "and where bdd is behavior driven development now bdd style testing means that instead of focusing",
    "start": "1015920",
    "end": "1022800"
  },
  {
    "text": "on the implementation you are rather focusing on the behavior that you are implementing",
    "start": "1022800",
    "end": "1028880"
  },
  {
    "text": "and that all starts with naming your tests so instead of having a test class for every",
    "start": "1028880",
    "end": "1035520"
  },
  {
    "text": "production code class i have a test class for each scenario and in this case the scenario",
    "start": "1035520",
    "end": "1043038"
  },
  {
    "text": "is when i calculate a new generation this is what i want to test which is",
    "start": "1043039",
    "end": "1049840"
  },
  {
    "text": "basically as we just said the essence of the game of life it's refreshing this grid of cells it's producing new generations",
    "start": "1049840",
    "end": "1058880"
  },
  {
    "start": "1058000",
    "end": "1178000"
  },
  {
    "text": "and that really helps me focus on the functionality now we said we're going to do it test",
    "start": "1059039",
    "end": "1065039"
  },
  {
    "text": "driven so here we are with a blank sheet and we",
    "start": "1065039",
    "end": "1071840"
  },
  {
    "text": "have to write the first test now we all know that's the most the hardest part of writing tdd",
    "start": "1071840",
    "end": "1078240"
  },
  {
    "text": "what uh what really helps is to think of what is the simplest",
    "start": "1078240",
    "end": "1086080"
  },
  {
    "text": "most trivial piece of functionality that my code has to accomplish",
    "start": "1086080",
    "end": "1092720"
  },
  {
    "text": "now in this case we have a grid of cells",
    "start": "1092720",
    "end": "1097760"
  },
  {
    "text": "so if i pass in into my generation",
    "start": "1097760",
    "end": "1104400"
  },
  {
    "text": "class if i pass in a grid of cells into that and i ask it to calculate a new grid",
    "start": "1104400",
    "end": "1111760"
  },
  {
    "text": "i expect to get back a new grid so a first test could be something along",
    "start": "1111760",
    "end": "1119679"
  },
  {
    "text": "the lines of when calculating",
    "start": "1119679",
    "end": "1125200"
  },
  {
    "text": "when calculating a new generation it should return a generation containing cells",
    "start": "1125200",
    "end": "1133039"
  },
  {
    "text": "that's the easiest thing i can come up with when it if i were to implement",
    "start": "1133039",
    "end": "1139919"
  },
  {
    "text": "a game of life algorithm",
    "start": "1139919",
    "end": "1143759"
  },
  {
    "text": "now we mentioned the beginning of this talk that every test has three sections the arrange phase the act and",
    "start": "1145600",
    "end": "1151919"
  },
  {
    "text": "the assert now let's start by writing this test without a picture without using those",
    "start": "1151919",
    "end": "1159760"
  },
  {
    "text": "unit test patterns let's write it the usual way",
    "start": "1159760",
    "end": "1165120"
  },
  {
    "text": "and after we are done let's take a look and let's see how we can refactor the tests to become drier",
    "start": "1165120",
    "end": "1172240"
  },
  {
    "text": "and to become smaller and more expressive so let's start by writing it a regular way",
    "start": "1172240",
    "end": "1179440"
  },
  {
    "start": "1178000",
    "end": "1298000"
  },
  {
    "text": "the arranged phase could look something like that",
    "start": "1179440",
    "end": "1189039"
  },
  {
    "text": "we have a generation class",
    "start": "1189280",
    "end": "1193840"
  },
  {
    "text": "which contains a list of cells and",
    "start": "1195200",
    "end": "1202240"
  },
  {
    "text": "these cells they have coordinates in the x and y along the x and y axis",
    "start": "1202240",
    "end": "1211360"
  },
  {
    "text": "now as you uh and by the way our system on the test which i called",
    "start": "1211360",
    "end": "1217600"
  },
  {
    "text": "sut system on the test it consists of a grid which whose responsibility",
    "start": "1217600",
    "end": "1225120"
  },
  {
    "text": "is to calculate a new generation of cells",
    "start": "1225120",
    "end": "1230240"
  },
  {
    "text": "now if you notice here it doesn't really matter what these",
    "start": "1230480",
    "end": "1237120"
  },
  {
    "text": "values are for the purpose of our test they could they could be anything they're not",
    "start": "1237120",
    "end": "1242559"
  },
  {
    "text": "even neighbors we haven't really specified the size of the grid either we're just passing some random numbers",
    "start": "1242559",
    "end": "1248640"
  },
  {
    "text": "because from the point of view of this test we are just interested in getting back a",
    "start": "1248640",
    "end": "1254559"
  },
  {
    "text": "generation of cells it doesn't really matter what their coordinates are so these values are anonymous just a",
    "start": "1254559",
    "end": "1260480"
  },
  {
    "text": "hint for later so this being tdd of course we have a",
    "start": "1260480",
    "end": "1265520"
  },
  {
    "text": "compilation error because none of these classes that we have mentioned actually exist yet",
    "start": "1265520",
    "end": "1271039"
  },
  {
    "text": "so let's go ahead and implement those so let's start with a class called a",
    "start": "1271039",
    "end": "1277360"
  },
  {
    "text": "generation and which is going to have a constructor",
    "start": "1277360",
    "end": "1283679"
  },
  {
    "text": "which accepts a list of cell objects so let me just quickly implement that",
    "start": "1283679",
    "end": "1292080"
  },
  {
    "text": "so as you see here i just have a generation that takes an innumerable of cell",
    "start": "1292080",
    "end": "1298720"
  },
  {
    "start": "1298000",
    "end": "1383000"
  },
  {
    "text": "and of course the cell class doesn't exist either so let's go ahead and implement that",
    "start": "1298720",
    "end": "1305039"
  },
  {
    "text": "cell",
    "start": "1305039",
    "end": "1307360"
  },
  {
    "text": "let's see public actually i like it to be indented class",
    "start": "1310320",
    "end": "1316480"
  },
  {
    "text": "cell and the cell class is going to have a constructor which accepts two",
    "start": "1316840",
    "end": "1323520"
  },
  {
    "text": "core two numbers which are the coordinate and let's put two properties for good",
    "start": "1323520",
    "end": "1330840"
  },
  {
    "text": "measure so far so good pretty simple stuff now the other the third thing we need to",
    "start": "1330840",
    "end": "1337760"
  },
  {
    "text": "create is the actual grid which is our system on the test so",
    "start": "1337760",
    "end": "1343360"
  },
  {
    "text": "let's put it where i'm putting all the classes in the same file of course you're not going to do that in",
    "start": "1343360",
    "end": "1349360"
  },
  {
    "text": "production code well actually when doing tdd it's pretty convenient to have all the code in the same file to",
    "start": "1349360",
    "end": "1356240"
  },
  {
    "text": "begin with just because you it gives you less friction and then when you have made the test pass",
    "start": "1356240",
    "end": "1364000"
  },
  {
    "text": "you know the famous red green refactor first make the test fail then make it pass and then refactor in",
    "start": "1364000",
    "end": "1370080"
  },
  {
    "text": "the refactor phase that's where you can move out the classes to different files",
    "start": "1370080",
    "end": "1375840"
  },
  {
    "text": "so public class let's call it grid",
    "start": "1376000",
    "end": "1381520"
  },
  {
    "start": "1383000",
    "end": "1508000"
  },
  {
    "text": "and which should be good so let's try to compile",
    "start": "1383600",
    "end": "1390799"
  },
  {
    "text": "now i'm using visual studio code with omnisharp to give me the intellisense so yeah the",
    "start": "1391120",
    "end": "1397440"
  },
  {
    "text": "compilation has succeeded however the squiggly lines are still",
    "start": "1397440",
    "end": "1403600"
  },
  {
    "text": "here and that's because omnisharp has hasn't really caught up yet",
    "start": "1403600",
    "end": "1409120"
  },
  {
    "text": "but it will eventually so let's proceed uh the second part of the test is going",
    "start": "1409120",
    "end": "1414880"
  },
  {
    "text": "to be the act that's when we actually invoke our refresh method",
    "start": "1414880",
    "end": "1420720"
  },
  {
    "text": "and here we go so we are invoking a method called refresh on our",
    "start": "1423200",
    "end": "1430080"
  },
  {
    "text": "system on the test where we're passing the the generation that we have created",
    "start": "1430080",
    "end": "1438559"
  },
  {
    "text": "and we expect to get back a new generation where hopefully",
    "start": "1438559",
    "end": "1445440"
  },
  {
    "text": "the cell the cells are still the same of course the refresh method doesn't",
    "start": "1445440",
    "end": "1452159"
  },
  {
    "text": "exist so let's go ahead and implement it",
    "start": "1452159",
    "end": "1458320"
  },
  {
    "text": "and so remember that when when you're doing tdd you have to write the least amount of",
    "start": "1458320",
    "end": "1463919"
  },
  {
    "text": "code possible to make the test pass and in this case i'm just going to create a stub",
    "start": "1463919",
    "end": "1469919"
  },
  {
    "text": "of a refresh method that takes a generation and returns a different generation but in",
    "start": "1469919",
    "end": "1475039"
  },
  {
    "text": "this case i'm just going to return now because our goal is to just have this",
    "start": "1475039",
    "end": "1480799"
  },
  {
    "text": "compile so let's go ahead and do that",
    "start": "1480799",
    "end": "1486559"
  },
  {
    "text": "perfect compiling is the first green in the red green refactor cycle",
    "start": "1486559",
    "end": "1494240"
  },
  {
    "text": "the third phase is the assert so let's verify that what was what did our test say it",
    "start": "1494240",
    "end": "1500400"
  },
  {
    "text": "should return a generation containing cells okay so we just need to verify that this generation is not",
    "start": "1500400",
    "end": "1505840"
  },
  {
    "text": "empty so",
    "start": "1505840",
    "end": "1514000"
  },
  {
    "start": "1508000",
    "end": "1633000"
  },
  {
    "text": "here is how we express it we say that the next generation should not be empty now if this looks",
    "start": "1514000",
    "end": "1520640"
  },
  {
    "text": "new to you this is another library that i really like called fluent assertions",
    "start": "1520640",
    "end": "1526559"
  },
  {
    "text": "so instead of writing assert that or assert not empty like like the assertion",
    "start": "1526559",
    "end": "1533279"
  },
  {
    "text": "libraries built into x unit or n unit do i use a third party library that's",
    "start": "1533279",
    "end": "1538880"
  },
  {
    "text": "just dedicated to giving me assertion methods and those are",
    "start": "1538880",
    "end": "1543919"
  },
  {
    "text": "social methods are implemented as extension methods which means i can append them instead of",
    "start": "1543919",
    "end": "1550159"
  },
  {
    "text": "having them up front what this allows me to do is i can express this",
    "start": "1550159",
    "end": "1555760"
  },
  {
    "text": "as a sentence thus making it more expressive however in this case we see",
    "start": "1555760",
    "end": "1563039"
  },
  {
    "text": "that this is not compiling because the not be empty extension method",
    "start": "1563039",
    "end": "1569200"
  },
  {
    "text": "extends innumerable so in this case we are assuming that the next generation",
    "start": "1569200",
    "end": "1576720"
  },
  {
    "text": "or rather the generation class is in of itself and a list of cells and",
    "start": "1576720",
    "end": "1583039"
  },
  {
    "text": "innumerable of cells which is is actually what it is so it's",
    "start": "1583039",
    "end": "1588480"
  },
  {
    "text": "not a bad idea to in this case go ahead and implement innumerable of cell",
    "start": "1588480",
    "end": "1597440"
  },
  {
    "text": "on degeneration itself because if you think about it a generation is a list of cells",
    "start": "1597440",
    "end": "1604400"
  },
  {
    "text": "so the implementation is also rather trivial so let's just go ahead and implement",
    "start": "1604960",
    "end": "1612480"
  },
  {
    "text": "the enumerate get enumerator methods where you just iterate through the list of cells that's",
    "start": "1612480",
    "end": "1618799"
  },
  {
    "text": "in in degeneration now let's go ahead and compile let's see",
    "start": "1618799",
    "end": "1625919"
  },
  {
    "text": "if this is happy now yeah looks good now let's finally run the test after all",
    "start": "1625919",
    "end": "1633279"
  },
  {
    "start": "1633000",
    "end": "2003000"
  },
  {
    "text": "this okay so the test failed and not only the test but my microphone also failed in the",
    "start": "1633279",
    "end": "1640320"
  },
  {
    "text": "to together with the test so that was kind of catastrophic let's say that that's hopefully it doesn't happen next time around my tests",
    "start": "1640320",
    "end": "1647600"
  },
  {
    "text": "otherwise it's going to be really spooky um so not only does it have to fail but it",
    "start": "1647600",
    "end": "1653600"
  },
  {
    "text": "also has to fail in the expected way in the expected way is we expected the next generation not to",
    "start": "1653600",
    "end": "1660080"
  },
  {
    "text": "be empty but we found no so that's exactly what we wanted",
    "start": "1660080",
    "end": "1666640"
  },
  {
    "text": "so now the next step is implement the least amount of code that we that we can write to make this",
    "start": "1666640",
    "end": "1674640"
  },
  {
    "text": "test pass now what is the least amount of code we can write",
    "start": "1674640",
    "end": "1680720"
  },
  {
    "text": "now of course we just want the test just asks for a generation",
    "start": "1680720",
    "end": "1687600"
  },
  {
    "text": "a list of cells so let's give it an array containing one",
    "start": "1687600",
    "end": "1694840"
  },
  {
    "text": "cell and that cell doesn't really it doesn't even have to have",
    "start": "1694840",
    "end": "1700520"
  },
  {
    "text": "[Music] any actual cells in it",
    "start": "1700520",
    "end": "1706480"
  },
  {
    "text": "because let's see it's generational so yeah you know it's really sharp at the omni shop that's going crazy let's",
    "start": "1708480",
    "end": "1715440"
  },
  {
    "text": "try to compile and see what happens",
    "start": "1715440",
    "end": "1718960"
  },
  {
    "text": "to demo generation why not it is an innumerable of cell",
    "start": "1721279",
    "end": "1728080"
  },
  {
    "text": "isn't it",
    "start": "1728640",
    "end": "1731039"
  },
  {
    "text": "new uh of course yeah we pass it a new generation",
    "start": "1734240",
    "end": "1739679"
  },
  {
    "text": "generation where we pass a an array of cells that contains just one item and",
    "start": "1739679",
    "end": "1747440"
  },
  {
    "text": "that i that cell doesn't really have to actually be an actual cell so let's compile",
    "start": "1747440",
    "end": "1755600"
  },
  {
    "text": "perfect let's run the test let's see if it's still passing perfect",
    "start": "1757279",
    "end": "1764640"
  },
  {
    "text": "now we have the green so red we did that green we have now",
    "start": "1764640",
    "end": "1770960"
  },
  {
    "text": "refactoring we'll do later let's proceed to the next test",
    "start": "1770960",
    "end": "1776640"
  },
  {
    "text": "next test is now that we know that our method actually returns a generation",
    "start": "1777039",
    "end": "1782159"
  },
  {
    "text": "with some cells now we need to verify that if we send in",
    "start": "1782159",
    "end": "1787360"
  },
  {
    "text": "a certain amount of cells what we want to get back is the same amount",
    "start": "1787360",
    "end": "1792880"
  },
  {
    "text": "so the test here now becomes the next step is it should return the same number of",
    "start": "1792880",
    "end": "1798880"
  },
  {
    "text": "cells in other words this refresh method",
    "start": "1798880",
    "end": "1804080"
  },
  {
    "text": "shouldn't add nor remove any cells",
    "start": "1804080",
    "end": "1809840"
  },
  {
    "text": "there you go so how is the arranged phase going to be",
    "start": "1815440",
    "end": "1820799"
  },
  {
    "text": "in this case well as i told you before when you are testing the same scenario",
    "start": "1820799",
    "end": "1828559"
  },
  {
    "text": "um with different assertions we are going to be creating the same arrange so these arranged phases are going to",
    "start": "1828559",
    "end": "1834640"
  },
  {
    "text": "look a lot alike they're going to be duplicated so in",
    "start": "1834640",
    "end": "1839840"
  },
  {
    "text": "this case we're still going to have to create a generation we're still going to need to pass a list of cells",
    "start": "1839840",
    "end": "1845200"
  },
  {
    "text": "in this case let's just pass three instead of two just to make some no something new again the numbers of",
    "start": "1845200",
    "end": "1852240"
  },
  {
    "text": "the coordinates don't really matter the act of course is also going to be",
    "start": "1852240",
    "end": "1858159"
  },
  {
    "text": "the same we send in this generation we refresh it",
    "start": "1858159",
    "end": "1863919"
  },
  {
    "text": "we get back a new generation and this time the assert is going to be different",
    "start": "1863919",
    "end": "1868960"
  },
  {
    "text": "because next now we are going to verify that if i pass in three cells i want to get back exactly",
    "start": "1868960",
    "end": "1876000"
  },
  {
    "text": "three cells all good let's run this test and see what happens",
    "start": "1876000",
    "end": "1883518"
  },
  {
    "text": "failed perfect microphone is still on also good",
    "start": "1884960",
    "end": "1890240"
  },
  {
    "text": "how does it fail let's take a look we expected the next generation to contain three items",
    "start": "1891039",
    "end": "1896480"
  },
  {
    "text": "but we found one which is exactly what our implementation is doing so again let's make this test pass now",
    "start": "1896480",
    "end": "1905279"
  },
  {
    "text": "what is the least amount of code i can write to make the test pass",
    "start": "1905279",
    "end": "1910480"
  },
  {
    "text": "well of course i could write three here or four",
    "start": "1910480",
    "end": "1918880"
  },
  {
    "text": "but then we wouldn't be moving the implementation forward so another trick with tdd is that of course",
    "start": "1919519",
    "end": "1924880"
  },
  {
    "text": "you are playing devil's advocate all the time by saying what is the least amount of code i can write",
    "start": "1924880",
    "end": "1930080"
  },
  {
    "text": "but you can't just stand still on the same place you need to actually drive the implementation forward so",
    "start": "1930080",
    "end": "1938640"
  },
  {
    "text": "in this case just changing that number wouldn't get us anywhere what we need to do instead is go from",
    "start": "1938640",
    "end": "1945919"
  },
  {
    "text": "a constant value like in this case to a variable so what can we return",
    "start": "1945919",
    "end": "1952960"
  },
  {
    "text": "well the simplest thing we can do is that we return the exact same",
    "start": "1952960",
    "end": "1958159"
  },
  {
    "text": "generation that we're getting so we went from hard coding an array with one item to",
    "start": "1958159",
    "end": "1965519"
  },
  {
    "text": "which is a constant to a variable this should be the least amount of code",
    "start": "1965519",
    "end": "1971120"
  },
  {
    "text": "that we can write to make this test pass and the other one of course",
    "start": "1971120",
    "end": "1977840"
  },
  {
    "text": "and indeed we have now two passing tests now the third and final the rule of",
    "start": "1978480",
    "end": "1984720"
  },
  {
    "text": "three threat test that we have to write is the actual underpopulation rule so now we're",
    "start": "1984720",
    "end": "1992960"
  },
  {
    "text": "just being setting up the basic infrastructure to have a grid of cells",
    "start": "1992960",
    "end": "1998080"
  },
  {
    "text": "now let's actually implement this under population rule if you remember the rule says",
    "start": "1998080",
    "end": "2005279"
  },
  {
    "start": "2003000",
    "end": "2178000"
  },
  {
    "text": "that if there is an alive cell that has fewer than",
    "start": "2005279",
    "end": "2012000"
  },
  {
    "text": "two or it doesn't have any neighbors that are also alive",
    "start": "2012000",
    "end": "2017039"
  },
  {
    "text": "it's going to die in the next generation due to underpopulation",
    "start": "2017039",
    "end": "2022480"
  },
  {
    "text": "so in this case the arrange is going to be slightly different than we have because",
    "start": "2022480",
    "end": "2028880"
  },
  {
    "text": "in this case we actually do care about the number of cells",
    "start": "2028880",
    "end": "2034480"
  },
  {
    "text": "and the state of those cells so let's see how this arrange looks like",
    "start": "2034480",
    "end": "2041840"
  },
  {
    "text": "so instead of just creating a bunch of cells in this case we create just one cell",
    "start": "2042320",
    "end": "2050480"
  },
  {
    "text": "which is the one that we want to die from one generation to the other and that let's call it the solitary cell",
    "start": "2050480",
    "end": "2057040"
  },
  {
    "text": "because it doesn't have any neighbors another another new piece of",
    "start": "2057040",
    "end": "2062480"
  },
  {
    "text": "information that we need to bake in is the state of the cell so now the coordinates still don't matter",
    "start": "2062480",
    "end": "2068800"
  },
  {
    "text": "but in this case we actually want the cell to have a state which is either",
    "start": "2068800",
    "end": "2075200"
  },
  {
    "text": "alive or dead so it's a boolean and we want it to be alive to begin with",
    "start": "2075200",
    "end": "2080800"
  },
  {
    "text": "then we're passing the usual list of cells to the generation in this",
    "start": "2080800",
    "end": "2087358"
  },
  {
    "text": "case we pass in just that one we create our grid which is our system on the test and the",
    "start": "2087359",
    "end": "2093520"
  },
  {
    "text": "rest you know the drill so",
    "start": "2093520",
    "end": "2098399"
  },
  {
    "text": "in this case we actually don't care about the um the value of that we get back",
    "start": "2100079",
    "end": "2107040"
  },
  {
    "text": "instead let's just verify",
    "start": "2107040",
    "end": "2111680"
  },
  {
    "text": "let's see let's just verify that this cell that we have passed in",
    "start": "2114160",
    "end": "2121359"
  },
  {
    "text": "its alive property should be false so we are just passing in a cell with a",
    "start": "2121359",
    "end": "2127440"
  },
  {
    "text": "certain state with a certain with no neighbors we pass it in we say refresh and then we",
    "start": "2127440",
    "end": "2132720"
  },
  {
    "text": "check that that cell now is dead of course this doesn't compile because",
    "start": "2132720",
    "end": "2139440"
  },
  {
    "text": "we have introduced a new constructor parameter so let's go ahead and add that to the",
    "start": "2139440",
    "end": "2145680"
  },
  {
    "text": "cell class which is over here so let's do add a live",
    "start": "2145680",
    "end": "2151359"
  },
  {
    "text": "let's also add a property",
    "start": "2151359",
    "end": "2155519"
  },
  {
    "text": "now we do it as a readable and writable property because you can't change the coordinates of a",
    "start": "2156480",
    "end": "2162400"
  },
  {
    "text": "cell but you can change its state i know maybe it shouldn't have be done through a property but you know for the",
    "start": "2162400",
    "end": "2168320"
  },
  {
    "text": "sake of this exercise let's make this a mutable state",
    "start": "2168320",
    "end": "2174000"
  },
  {
    "text": "and let's assign it from the constructor",
    "start": "2174000",
    "end": "2178480"
  },
  {
    "start": "2178000",
    "end": "2288000"
  },
  {
    "text": "okay now let's see if you're good what do you think happens now",
    "start": "2179520",
    "end": "2186720"
  },
  {
    "text": "oh compilation error why i can almost hear you say that hey you",
    "start": "2186720",
    "end": "2194320"
  },
  {
    "text": "just added a new constructor parameter but all your existing tests are passing",
    "start": "2194320",
    "end": "2201040"
  },
  {
    "text": "just two arguments so now we have just broken our existing tests and this is a",
    "start": "2201040",
    "end": "2209280"
  },
  {
    "text": "a very you know concrete proof of the coupling that i was talking about",
    "start": "2209280",
    "end": "2214720"
  },
  {
    "text": "earlier for every call you make to your system on the test in every single one of these arranged",
    "start": "2214720",
    "end": "2222640"
  },
  {
    "text": "phases you are creating couple your tests are coupling themselves to your implementation which",
    "start": "2222640",
    "end": "2229520"
  },
  {
    "text": "inhibits your ability to evolve it and to refactor it so in this case we we need to move this",
    "start": "2229520",
    "end": "2236400"
  },
  {
    "text": "implementation forward or we just broke our existing tests now in this case there are only two of them",
    "start": "2236400",
    "end": "2242240"
  },
  {
    "text": "but imagine having a library of hundreds if not thousands of tests",
    "start": "2242240",
    "end": "2247760"
  },
  {
    "text": "and by making a change in your api you're suddenly breaking all of them and",
    "start": "2247760",
    "end": "2253520"
  },
  {
    "text": "who wants to go through thousands of tests and fix them so what happens in most cases",
    "start": "2253520",
    "end": "2258720"
  },
  {
    "text": "you just don't refactor your tests are now a burden i know it sounds",
    "start": "2258720",
    "end": "2265680"
  },
  {
    "text": "really really dark but in this case we can actually get out of it",
    "start": "2265680",
    "end": "2270960"
  },
  {
    "text": "by leveraging a feature in this shop language called default parameters",
    "start": "2270960",
    "end": "2276400"
  },
  {
    "text": "where you can say that okay i'm just going to assume that when i create a new cell if i don't pass",
    "start": "2276400",
    "end": "2282800"
  },
  {
    "text": "any state that cell is going to be dead",
    "start": "2282800",
    "end": "2288160"
  },
  {
    "start": "2288000",
    "end": "2383000"
  },
  {
    "text": "and just by doing this move i now have a fix my compilation errors but you see",
    "start": "2288160",
    "end": "2294960"
  },
  {
    "text": "that this is a a lucky situation you're not always you're not always able to do this",
    "start": "2294960",
    "end": "2302160"
  },
  {
    "text": "so now the test starts compiling again",
    "start": "2302160",
    "end": "2306559"
  },
  {
    "text": "and let's run the test we need to see it fail",
    "start": "2307599",
    "end": "2313040"
  },
  {
    "text": "yeah two past one failed why is it failing we expected the solitary cell dot alive",
    "start": "2313040",
    "end": "2319599"
  },
  {
    "text": "to be false but we got it true in other in other words it hasn't changed its state",
    "start": "2319599",
    "end": "2326720"
  },
  {
    "text": "perfect now what is the least amount of code i",
    "start": "2326720",
    "end": "2331760"
  },
  {
    "text": "can write to make this test pass now the code i'm about to write is the",
    "start": "2331760",
    "end": "2337599"
  },
  {
    "text": "most naive trivial implementation which is of course not what the final implementation should",
    "start": "2337599",
    "end": "2343119"
  },
  {
    "text": "look like but in our case we're not interested in producing the perfect implementation of the game of life",
    "start": "2343119",
    "end": "2348720"
  },
  {
    "text": "we are focusing on the tests so let's do the most naive embarrassing implementation",
    "start": "2348720",
    "end": "2355359"
  },
  {
    "text": "ever and say that given the seed the generation that i pass in",
    "start": "2355359",
    "end": "2360560"
  },
  {
    "text": "i'm gonna get the first element out of it and i'm gonna set the alive property to",
    "start": "2360560",
    "end": "2366480"
  },
  {
    "text": "false how is that i can almost hear the screams of the people what are you doing",
    "start": "2366480",
    "end": "2371599"
  },
  {
    "text": "i know i know but this is not of course you're gonna you know ideally you write more tests",
    "start": "2371599",
    "end": "2377040"
  },
  {
    "text": "you evolve the implementation you refactor this away but we're gonna stop here for now",
    "start": "2377040",
    "end": "2383440"
  },
  {
    "start": "2383000",
    "end": "2528000"
  },
  {
    "text": "let's just forget about that that implementation perfect all three tests by passing now",
    "start": "2383440",
    "end": "2390400"
  },
  {
    "text": "we are in a state where we can forget about this",
    "start": "2390400",
    "end": "2395839"
  },
  {
    "text": "implementation for now and just look at our tests now you see",
    "start": "2395839",
    "end": "2400880"
  },
  {
    "text": "the problem i already talked about some of the problems that i mentioned in the beginning we have some we have duplication",
    "start": "2400880",
    "end": "2408800"
  },
  {
    "text": "we have coupling and we have also interesting things like what are these",
    "start": "2408800",
    "end": "2414480"
  },
  {
    "text": "numbers are they meaningful what happens if i change one of them so there are lots of these questions",
    "start": "2414480",
    "end": "2421359"
  },
  {
    "text": "so um how can we solve the problem we can solve it by leveraging",
    "start": "2421359",
    "end": "2426880"
  },
  {
    "text": "a taste data builder like autofeature now let's start refactoring those tests and now i can almost hear you",
    "start": "2426880",
    "end": "2433280"
  },
  {
    "text": "asking hey but if you refactor your tests how do you know that you haven't broken anything well",
    "start": "2433280",
    "end": "2440160"
  },
  {
    "text": "let me tell you this when you have tests and you're in production code you can only ever",
    "start": "2440160",
    "end": "2447839"
  },
  {
    "text": "refactor one or the other never both at the same time",
    "start": "2447839",
    "end": "2452880"
  },
  {
    "text": "so in this case i'm not touching the implementation the implementation stays the same we are refactoring the tests",
    "start": "2452880",
    "end": "2460319"
  },
  {
    "text": "so by not touching implementation we know that we haven't broken any tests so",
    "start": "2460319",
    "end": "2468160"
  },
  {
    "text": "let's change this arrange and let's use a test data builder like how to feature so auto feature",
    "start": "2468160",
    "end": "2474079"
  },
  {
    "text": "starts with an object called a fixture like like of course it says it right on",
    "start": "2474079",
    "end": "2480000"
  },
  {
    "text": "the name a fixture class",
    "start": "2480000",
    "end": "2485200"
  },
  {
    "text": "and the feature class has a method called create which you can use to actually ask it to produce a value for",
    "start": "2486319",
    "end": "2493280"
  },
  {
    "text": "us so in our case we're going to say fixture dot create what type do you want to",
    "start": "2493280",
    "end": "2499599"
  },
  {
    "text": "create you i want to create a generation and i can also ask it to create my",
    "start": "2499599",
    "end": "2506720"
  },
  {
    "text": "system on the test so let's create a grid",
    "start": "2506720",
    "end": "2511359"
  },
  {
    "text": "so let's remove this so now instead of manually creating",
    "start": "2513359",
    "end": "2520640"
  },
  {
    "text": "invoking all the constructor and passing coming up with the values myself i just delegated all of that to the test data",
    "start": "2520640",
    "end": "2526240"
  },
  {
    "text": "builder and ask it just just give me an instance of this with good default values",
    "start": "2526240",
    "end": "2531520"
  },
  {
    "start": "2528000",
    "end": "2603000"
  },
  {
    "text": "let's see if it still passes the test",
    "start": "2531520",
    "end": "2536800"
  },
  {
    "text": "yeah it does perfect",
    "start": "2536800",
    "end": "2540160"
  },
  {
    "text": "now in this case we said that what happens if i change",
    "start": "2542720",
    "end": "2548560"
  },
  {
    "text": "this number to a different one for example what happens if i add another cell",
    "start": "2548560",
    "end": "2553920"
  },
  {
    "text": "and pass in some random values of course if i change this value to 4",
    "start": "2553920",
    "end": "2560640"
  },
  {
    "text": "that should still oh i forgot a comma there",
    "start": "2560640",
    "end": "2568880"
  },
  {
    "text": "the test should still pass because it doesn't really matter how many there are as long as that's the same",
    "start": "2568880",
    "end": "2574079"
  },
  {
    "text": "number that's coming out so let's use autofixture to create all",
    "start": "2574079",
    "end": "2580720"
  },
  {
    "text": "of this setup for us we're basically doing the same thing",
    "start": "2580720",
    "end": "2586560"
  },
  {
    "text": "um there you go so create a fixture we ask",
    "start": "2590839",
    "end": "2597760"
  },
  {
    "text": "you to create a generation and we ask you to create a grid just like we did before let's get rid of this stuff",
    "start": "2597760",
    "end": "2605359"
  },
  {
    "text": "and let's see if the test is still passing what do you think",
    "start": "2605359",
    "end": "2611359"
  },
  {
    "text": "no test has failed let's see why i mean it shouldn't right so expected",
    "start": "2613920",
    "end": "2620480"
  },
  {
    "text": "the next generation to contain four items yeah we said four but we got three so",
    "start": "2620480",
    "end": "2627040"
  },
  {
    "text": "what is this remember auto fixture works by using reflection so",
    "start": "2627040",
    "end": "2633280"
  },
  {
    "text": "what it does is that when i ask you to create a generation it's going to look at its constructor",
    "start": "2633280",
    "end": "2638400"
  },
  {
    "text": "and see that aha the generation requires an immune numerable of cell",
    "start": "2638400",
    "end": "2643760"
  },
  {
    "text": "and of course the cell object is going to have x and y and the alive property so those",
    "start": "2643760",
    "end": "2649599"
  },
  {
    "text": "who are going to get just some random positive numbers but when auto feature is tasked with",
    "start": "2649599",
    "end": "2655520"
  },
  {
    "text": "creating a list of anything if you are not specific and tell how many items the list should have",
    "start": "2655520",
    "end": "2662240"
  },
  {
    "text": "it's going to give you three why three because it's a good same default so in this case",
    "start": "2662240",
    "end": "2669119"
  },
  {
    "text": "we get three not four because out of each other is using its",
    "start": "2669119",
    "end": "2674319"
  },
  {
    "text": "default but if you look if you look at our test does it really doesn't really matter for",
    "start": "2674319",
    "end": "2680000"
  },
  {
    "text": "the test how many there are no it doesn't as long as they are the same number",
    "start": "2680000",
    "end": "2685200"
  },
  {
    "text": "so instead of hard coding the value we can say have the same count as",
    "start": "2685200",
    "end": "2691440"
  },
  {
    "text": "the seed so by using a test data builder in this",
    "start": "2691440",
    "end": "2697440"
  },
  {
    "text": "case we have made our test less hard coded more generic",
    "start": "2697440",
    "end": "2704960"
  },
  {
    "text": "and in that way also more expressive because now it doesn't really matter how",
    "start": "2704960",
    "end": "2710640"
  },
  {
    "text": "many there are we're just checking that they have the same amount so does this test pass",
    "start": "2710640",
    "end": "2719838"
  },
  {
    "start": "2713000",
    "end": "2978000"
  },
  {
    "text": "yes it does now the final test is a little bit more complicated because",
    "start": "2720720",
    "end": "2726079"
  },
  {
    "text": "now we actually do care about the number of cells and we also care about the state",
    "start": "2726079",
    "end": "2733280"
  },
  {
    "text": "so how can we write this now remember the 80 20 rule up until now we just leveraged the the",
    "start": "2733280",
    "end": "2741040"
  },
  {
    "text": "default values that autofeature comes up with so they cover 80 of the cases in this case we're going",
    "start": "2741040",
    "end": "2747599"
  },
  {
    "text": "to use the customization api that that tauto feature has in order to actually go in and tell it",
    "start": "2747599",
    "end": "2754480"
  },
  {
    "text": "okay i wanted to create exactly one cell and that cell needs to be alone and it needs to be alive",
    "start": "2754480",
    "end": "2763040"
  },
  {
    "text": "so we start by using the fixture as always",
    "start": "2763440",
    "end": "2768559"
  },
  {
    "text": "however now we need to tell out the feature how it should create certain types of",
    "start": "2769200",
    "end": "2774480"
  },
  {
    "text": "objects so we say customize customize what type well we want to",
    "start": "2774480",
    "end": "2781520"
  },
  {
    "text": "customize the cell type",
    "start": "2781520",
    "end": "2789200"
  },
  {
    "text": "and this method takes a lambda where you say create and then you say",
    "start": "2789200",
    "end": "2794640"
  },
  {
    "text": "with and then you need to specify okay which property do you want to set to a",
    "start": "2794640",
    "end": "2799680"
  },
  {
    "text": "particular value well i want to set the alive property",
    "start": "2799680",
    "end": "2804880"
  },
  {
    "text": "what value do you want to give it i want to give it true",
    "start": "2804880",
    "end": "2809599"
  },
  {
    "text": "so now i'm telling how to feature customize for every time you want for this particular test the fixture is",
    "start": "2810400",
    "end": "2816880"
  },
  {
    "text": "always for one test only for this particular test when autofeature has to create a",
    "start": "2816880",
    "end": "2823040"
  },
  {
    "text": "cell it's going to create it with the alive property set to true",
    "start": "2823040",
    "end": "2830480"
  },
  {
    "text": "now the second part of the customization is we want the list of cells to contain just one item not three",
    "start": "2830480",
    "end": "2838480"
  },
  {
    "text": "not four not any number other than one so it's another customization we need to",
    "start": "2838480",
    "end": "2844240"
  },
  {
    "text": "use customize single",
    "start": "2844240",
    "end": "2852880"
  },
  {
    "text": "let's go what is it called single",
    "start": "2854640",
    "end": "2859838"
  },
  {
    "text": "actually i don't remember the name let me see",
    "start": "2860160",
    "end": "2863760"
  },
  {
    "text": "single element sequence there you go so fixture",
    "start": "2866000",
    "end": "2873440"
  },
  {
    "text": "customize new single element sequence of cell",
    "start": "2873440",
    "end": "2880240"
  },
  {
    "text": "i'm just gonna explain it real quick what is this so this is a customization that's pre-packaged",
    "start": "2880240",
    "end": "2887760"
  },
  {
    "text": "and what this says it tells out a picture that every time you have to create a sequence of cells that means",
    "start": "2887760",
    "end": "2894400"
  },
  {
    "text": "an innumerable of cells it's going to give it a single element",
    "start": "2894400",
    "end": "2901838"
  },
  {
    "text": "so now that we have customized auto-picture and told it what to do for those types then",
    "start": "2903520",
    "end": "2909280"
  },
  {
    "text": "we can just create our generation and our grid as usual",
    "start": "2909280",
    "end": "2916000"
  },
  {
    "text": "so let's get rid of that now we have another problem you see now",
    "start": "2916000",
    "end": "2922640"
  },
  {
    "text": "we don't we no longer have access to the solitary cell variable because it's being created",
    "start": "2922640",
    "end": "2928559"
  },
  {
    "text": "behind the curtains by auto fixture as part of the arrange phase we don't actually have an a a reference",
    "start": "2928559",
    "end": "2935520"
  },
  {
    "text": "to that value but that's also something that we can easily solve because",
    "start": "2935520",
    "end": "2941200"
  },
  {
    "text": "if we instead check the return value of our method the",
    "start": "2941200",
    "end": "2946720"
  },
  {
    "text": "next generation then we can say next generation",
    "start": "2946720",
    "end": "2952319"
  },
  {
    "text": "dot single and in this case we do know for a fact that the next generation is going to contain a single element",
    "start": "2952319",
    "end": "2959440"
  },
  {
    "text": "because we told autofixture to do it so it's perfectly fine to go ahead",
    "start": "2959440",
    "end": "2965200"
  },
  {
    "text": "and build on those assumptions because those are part of the arranged phase",
    "start": "2965200",
    "end": "2971119"
  },
  {
    "text": "so we say that the the single cell in the next generation should be alive should be false let's see if this",
    "start": "2971119",
    "end": "2977280"
  },
  {
    "text": "passes",
    "start": "2977280",
    "end": "2979680"
  },
  {
    "text": "perfect so now we have refactored the tests they are not only more expressive they",
    "start": "2982839",
    "end": "2989440"
  },
  {
    "text": "are smaller but they are also decoupled from the implementation",
    "start": "2989440",
    "end": "2995200"
  },
  {
    "text": "what does this mean it means that if i want to go into the implementation",
    "start": "2995200",
    "end": "3000960"
  },
  {
    "text": "and improve it somehow for example i no longer need this",
    "start": "3000960",
    "end": "3008400"
  },
  {
    "text": "and what about this constructor what if instead of having an innumerable of cell",
    "start": "3008960",
    "end": "3015119"
  },
  {
    "text": "i want to allow the caller to specify any number of cell objects by using",
    "start": "3015119",
    "end": "3021839"
  },
  {
    "text": "params so for example i can say params sell cells like that no making it more",
    "start": "3021839",
    "end": "3028640"
  },
  {
    "start": "3028000",
    "end": "3224000"
  },
  {
    "text": "flexible now i can make those changes and i can still run my tests",
    "start": "3028640",
    "end": "3036400"
  },
  {
    "text": "and verify that i haven't broken anything so this is a really powerful those three",
    "start": "3036960",
    "end": "3043760"
  },
  {
    "text": "patterns and a a auto feature as an implementation of three unit testing",
    "start": "3043760",
    "end": "3049920"
  },
  {
    "text": "patterns gives us the freedom to write tests that are readable expressive and",
    "start": "3049920",
    "end": "3057200"
  },
  {
    "text": "that are decoupled from our implementation the only of course we're going to have",
    "start": "3057200",
    "end": "3062319"
  },
  {
    "text": "be coupled at least a certain amount because we need to actually invoke our system on the test",
    "start": "3062319",
    "end": "3067680"
  },
  {
    "text": "but we are free to refactor our code and take advantage of the safety net",
    "start": "3067680",
    "end": "3074240"
  },
  {
    "text": "that are our tests pretty powerful stuff so now",
    "start": "3074240",
    "end": "3081440"
  },
  {
    "text": "i have a few minutes so let me go back to the slides just to wrap this up",
    "start": "3081440",
    "end": "3088160"
  },
  {
    "text": "now if i gonna remember just one thing from this presentation let's make it",
    "start": "3088960",
    "end": "3094160"
  },
  {
    "text": "three things the first one is do not hardcode",
    "start": "3094160",
    "end": "3100319"
  },
  {
    "text": "values into your test because they confuse the picture they are they create",
    "start": "3100319",
    "end": "3106240"
  },
  {
    "text": "questions that are not really relevant the test should be readable as is and they should",
    "start": "3106240",
    "end": "3113440"
  },
  {
    "text": "communicate what it is that they're trying to verify the second takeaway is",
    "start": "3113440",
    "end": "3120319"
  },
  {
    "text": "try to minimize the amount of coupling that you that your tests have on your system on",
    "start": "3120319",
    "end": "3126640"
  },
  {
    "text": "the test because that will give you the freedom to refactor and having the freedom to refactor means",
    "start": "3126640",
    "end": "3134400"
  },
  {
    "text": "easier maintenance of your code base which is the ultimate goal that we strive for every day as",
    "start": "3134400",
    "end": "3141599"
  },
  {
    "text": "programmers with that i just want to give you a few",
    "start": "3141599",
    "end": "3147839"
  },
  {
    "text": "pointers so there is a an auto fixture tag on stack overflow where the",
    "start": "3147839",
    "end": "3154319"
  },
  {
    "text": "myself and a few others from the autofeatures team are watching and trying to ask for",
    "start": "3154319",
    "end": "3160400"
  },
  {
    "text": "questions as they come up and how to feature",
    "start": "3160400",
    "end": "3165440"
  },
  {
    "text": "itself of course is open source and it's on github so if you have any issues or questions you can post them over there",
    "start": "3165440",
    "end": "3174000"
  },
  {
    "text": "as for myself if you liked what you've seen today i just wanted to give you a pointer to",
    "start": "3174000",
    "end": "3180480"
  },
  {
    "text": "my pre-assigned courses i have a few plural asset courses out my latest one is about github actions",
    "start": "3180480",
    "end": "3187440"
  },
  {
    "text": "and there is the link if you want to check those out i really appreciate that and with that",
    "start": "3187440",
    "end": "3194640"
  },
  {
    "text": "i want to say thank you for watching this presentation and i'll stick around the chat for at",
    "start": "3194640",
    "end": "3201200"
  },
  {
    "text": "least the rest of today so if you want to ping me there and ask me questions i'll be very happy to",
    "start": "3201200",
    "end": "3206880"
  },
  {
    "text": "answer if i can and yeah enjoy the rest of your conference thank",
    "start": "3206880",
    "end": "3215920"
  },
  {
    "text": "you you",
    "start": "3220839",
    "end": "3226319"
  }
]