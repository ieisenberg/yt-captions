[
  {
    "text": "hello everybody and thank you for coming today I am going to give a very",
    "start": "3120",
    "end": "10400"
  },
  {
    "text": "technical talk but I'm going to have a very um untechnical metaphor going through the entire",
    "start": "10400",
    "end": "16439"
  },
  {
    "text": "presentation so I'm not going to talk so much about the metaphor so you just kind of have to Intuit it yourself but I'll",
    "start": "16439",
    "end": "22439"
  },
  {
    "text": "just start you off a little bit and the reason why I have a metaphor is because sandbox is a really um um it doesn't",
    "start": "22439",
    "end": "31640"
  },
  {
    "text": "really work as a metaphor for what a Sandbox is so basically the idea when",
    "start": "31640",
    "end": "37079"
  },
  {
    "text": "you launch an application on a platform it's more like if you're planting a flower in your",
    "start": "37079",
    "end": "43440"
  },
  {
    "text": "garden so throughout the presentation it will be a garden metaphor where the program is a flower or a plant that",
    "start": "43440",
    "end": "51480"
  },
  {
    "text": "might be poisonous might poison the ground or other plants might kill something in your garden and the garden",
    "start": "51480",
    "end": "57520"
  },
  {
    "text": "will be your operating system or your machine so what we're going to be talking about",
    "start": "57520",
    "end": "63640"
  },
  {
    "text": "is Linux security and how web browser sandboxes really work and uh first of all uh who am I my",
    "start": "63640",
    "end": "72439"
  },
  {
    "text": "name is uh Patricia o I'm a programmer I started off my first job was at Opera",
    "start": "72439",
    "end": "79159"
  },
  {
    "text": "software in 2005 so I worked on the original Opera browser uh later on I tried myself at",
    "start": "79159",
    "end": "87200"
  },
  {
    "text": "being a Java consultant for two years then I went off and went back to",
    "start": "87200",
    "end": "93600"
  },
  {
    "text": "C++ again and I worked in Cisco for 5 years being an embedded programmer or",
    "start": "93600",
    "end": "99479"
  },
  {
    "text": "working with telepresence systems there and uh now I started just recently at",
    "start": "99479",
    "end": "105280"
  },
  {
    "text": "Vivaldi um so my Twitter is there I will put up uh links to the slide on Twitter um",
    "start": "105280",
    "end": "112479"
  },
  {
    "text": "right after I'm done here so you can and my Twitter will be like occasionally on slides so",
    "start": "112479",
    "end": "121439"
  },
  {
    "text": "so this is the plan for today uh so we'll have a very short overview on the browser uh how it uh the different",
    "start": "121439",
    "end": "128720"
  },
  {
    "text": "processes are and things like that then we'll have a an overview over the",
    "start": "128720",
    "end": "134000"
  },
  {
    "text": "security apis and Linux and then we are going to look at how these are used as",
    "start": "134000",
    "end": "139239"
  },
  {
    "text": "we launch the browser and at the end just a couple of problems that we end up",
    "start": "139239",
    "end": "146000"
  },
  {
    "text": "having so first of all I have to kind of explain which browser family talking about and most people don't realize that",
    "start": "146000",
    "end": "152120"
  },
  {
    "text": "there are browser families uh but originally nobody has",
    "start": "152120",
    "end": "158000"
  },
  {
    "text": "written a browser from scratch since the '90s so all browsers today belong to",
    "start": "158000",
    "end": "163599"
  },
  {
    "text": "some kind of browser family there are generally four browser families one of",
    "start": "163599",
    "end": "169959"
  },
  {
    "text": "them uh has been discontinued which was the one that was in the original Opera browser Opera went over to the chromium",
    "start": "169959",
    "end": "177319"
  },
  {
    "text": "blink family for the rendering engine and so that um rendering engines exist",
    "start": "177319",
    "end": "182519"
  },
  {
    "text": "today uh running Opera Mini so you will see it if you have an opera mini client",
    "start": "182519",
    "end": "187879"
  },
  {
    "text": "it's very much used in Africa and Asia but generally we only have three left and uh this is uh a part of it so",
    "start": "187879",
    "end": "195400"
  },
  {
    "text": "I'll just explain the history of it um the original browser engine came from uh",
    "start": "195400",
    "end": "202440"
  },
  {
    "text": "KD um used to power the Conqueror browser um the layout engine was called",
    "start": "202440",
    "end": "208760"
  },
  {
    "text": "h kht then you had KJS for the for the JavaScript engine um this was adopted by",
    "start": "208760",
    "end": "216799"
  },
  {
    "text": "Apple to make Safari and uh they branded it as or they forked it really uh saying they wouldn't",
    "start": "216799",
    "end": "224280"
  },
  {
    "text": "and uh called it web kit later on when Google decided to make the Chromium browser or the Chrome",
    "start": "224280",
    "end": "230720"
  },
  {
    "text": "browser they uh took a webkit as it was uh being published by Apple so at once",
    "start": "230720",
    "end": "238200"
  },
  {
    "text": "every night they would have a source code drop with no code revision uh which",
    "start": "238200",
    "end": "244439"
  },
  {
    "text": "was a very difficult way to work because it was a very big project and and uh Google had to deal with",
    "start": "244439",
    "end": "251439"
  },
  {
    "text": "this um so one of the things that they did in the architecture of chrome which",
    "start": "251439",
    "end": "256880"
  },
  {
    "text": "is very important and this the reason why we bring it up is that they isolated webkit into its own process so for each",
    "start": "256880",
    "end": "264280"
  },
  {
    "text": "tab webkit was loaded in a separate process and we'll come back to it but that's called the renderer process",
    "start": "264280",
    "end": "270360"
  },
  {
    "text": "and the reason for that is that they they didn't feel they had control over the stability of webkit so if webkit",
    "start": "270360",
    "end": "276240"
  },
  {
    "text": "crashed then it would just take down the render process you would get uh this dead bird in your tab and you could",
    "start": "276240",
    "end": "283280"
  },
  {
    "text": "reload it it would start a new one and your entire browser wouldn't crash uh this project uh was called",
    "start": "283280",
    "end": "290880"
  },
  {
    "text": "chromium uh and had still webkit inside after a while Google decid uh found out",
    "start": "290880",
    "end": "296919"
  },
  {
    "text": "they were contributing more than anybody to uh web to webkit into chromium and uh",
    "start": "296919",
    "end": "302320"
  },
  {
    "text": "decided it was more hassle than it was worth and they did a fork and they created uh what is called chromium blink",
    "start": "302320",
    "end": "309320"
  },
  {
    "text": "and there's a lot of uh browsers that use chromium blink and are in that family and Vivaldi the browser that I",
    "start": "309320",
    "end": "314919"
  },
  {
    "text": "work for today is one of them and and the new offer browser is also one of them um so",
    "start": "314919",
    "end": "322520"
  },
  {
    "text": "yeah so what we have now is that we have more than one process for the browser",
    "start": "322720",
    "end": "328080"
  },
  {
    "text": "because before this General you had only one process for the browser uh in Opera we also had on Linux a a process for uh",
    "start": "328080",
    "end": "336000"
  },
  {
    "text": "the plugins uh but generally there was a single process so now we have multiple",
    "start": "336000",
    "end": "341360"
  },
  {
    "text": "processes and then we can start wielding the oper operating system apis uh to do all sorts of things and can be resource",
    "start": "341360",
    "end": "347880"
  },
  {
    "text": "management but in this case um they used uh this uh feature of their architecture",
    "start": "347880",
    "end": "355240"
  },
  {
    "text": "uh to implement uh security mechanisms and the sandboxing um that",
    "start": "355240",
    "end": "362360"
  },
  {
    "text": "they decided to implement um there's different versions of the sandboxing and",
    "start": "362360",
    "end": "367880"
  },
  {
    "text": "we'll go through that later on but basically there are two types of threats that it's trying to protect you from and",
    "start": "367880",
    "end": "373800"
  },
  {
    "text": "the one that is most famous is the external threat uh so consider a JavaScript uh that manages to escape the",
    "start": "373800",
    "end": "380680"
  },
  {
    "text": "browser for some reason for some security vulnerability in the in the browser and it escapes the renderer",
    "start": "380680",
    "end": "386759"
  },
  {
    "text": "process and then can execute on on the host machine uh the idea is that even if",
    "start": "386759",
    "end": "392280"
  },
  {
    "text": "you escape the browser there is still protection mechanisms in place so that you won't be able to um to do any harm",
    "start": "392280",
    "end": "399639"
  },
  {
    "text": "uh you also have an internal system threat uh where you might have malware on your system and your browser contains",
    "start": "399639",
    "end": "405400"
  },
  {
    "text": "a lot of personal information a lot of sensitive information um so a a a",
    "start": "405400",
    "end": "412199"
  },
  {
    "text": "sibling program on your host machine being a like a malware or some kind of a",
    "start": "412199",
    "end": "417479"
  },
  {
    "text": "spyware or something trying to mind your mine your computer uh they might uh try",
    "start": "417479",
    "end": "423160"
  },
  {
    "text": "to pce your browser processes and might try to uh make them crash so they can analyze the stack uh um memory dump",
    "start": "423160",
    "end": "430319"
  },
  {
    "text": "things like that okay so that's the overview on uh why so let's start off I'm going to use",
    "start": "430319",
    "end": "438280"
  },
  {
    "text": "vial as an example but basically the layout is the same for all uh chromium blink based browsers so you can look at",
    "start": "438280",
    "end": "443800"
  },
  {
    "text": "your own browser so if you look at the executable files that you will find in",
    "start": "443800",
    "end": "449039"
  },
  {
    "text": "your install directory uh you will find uh three uh so in this case we valdi and we",
    "start": "449039",
    "end": "456000"
  },
  {
    "text": "Aldi bin and then we Aldi sandbox and by the way it's I have quite a lot of text",
    "start": "456000",
    "end": "461280"
  },
  {
    "text": "on my slides but you don't have to worry about reading them it's mostly if you want to go through it later on or if you",
    "start": "461280",
    "end": "466440"
  },
  {
    "text": "want to read of course um yeah so the one that sounds most luring is the",
    "start": "466440",
    "end": "471759"
  },
  {
    "text": "bottom one which is called Vivaldi sandbox right but uh actually it's pretty much not in use anymore uh and",
    "start": "471759",
    "end": "478599"
  },
  {
    "text": "it's used on old kernels so we won't actually go that much into it today so the what is when you start your",
    "start": "478599",
    "end": "485800"
  },
  {
    "text": "browser you started with the bash script generally it will set up some environments and then it will launch the",
    "start": "485800",
    "end": "491039"
  },
  {
    "text": "the binary so we've already been in this case but when you start it up you will",
    "start": "491039",
    "end": "496400"
  },
  {
    "text": "see that it spawns a whole lot of other processes but you'll also notice that it's the same binary in each case but",
    "start": "496400",
    "end": "502800"
  },
  {
    "text": "with different uh command line parameters and we'll go through these in a little bit but I'll just want this is",
    "start": "502800",
    "end": "508400"
  },
  {
    "text": "basically one tab okay so uh we're going to go look at the",
    "start": "508400",
    "end": "514640"
  },
  {
    "text": "startup process because the sandboxing is created as you start the browser app so first of all like I said there's",
    "start": "514640",
    "end": "521399"
  },
  {
    "text": "only one binary so all of your processes are the same binary and it's kind of",
    "start": "521399",
    "end": "527480"
  },
  {
    "text": "important to remember uh because it makes the code a little bit convoluted",
    "start": "527480",
    "end": "532800"
  },
  {
    "text": "uh because you only have one main but they all have different functions and so this is uh part of what we're going to",
    "start": "532800",
    "end": "538880"
  },
  {
    "text": "go through okay so the first uh process that started is the so-called browser",
    "start": "538880",
    "end": "544279"
  },
  {
    "text": "process when it is uh when you look at your your um task manager or a top or something or a PS you will not see any",
    "start": "544279",
    "end": "553279"
  },
  {
    "text": "dash dash type browser on that process there is no Das Dash type on that uh",
    "start": "553279",
    "end": "558560"
  },
  {
    "text": "process it is also the the the parent uh or grandparent or whatever of all of",
    "start": "558560",
    "end": "564920"
  },
  {
    "text": "your processes so it is the the first one and it will gen it will Fork initially into uh two other processes",
    "start": "564920",
    "end": "573160"
  },
  {
    "text": "and these will actually uh be executed by uh command line so they'll be uh you will pass through main again",
    "start": "573160",
    "end": "580959"
  },
  {
    "text": "for each of those two and then later uh those will uh Fork again to several",
    "start": "580959",
    "end": "587320"
  },
  {
    "text": "more so you have the browser process it is in it is the trusted process in this",
    "start": "587320",
    "end": "594440"
  },
  {
    "text": "family of processes and it does all of the sensitive things so it will run your",
    "start": "594440",
    "end": "600120"
  },
  {
    "text": "UI um it will do your IPC to all of your other uh processes it will do your",
    "start": "600120",
    "end": "605959"
  },
  {
    "text": "networking so any kind of network uh traffic will go through the browser process then go through IPC to the the",
    "start": "605959",
    "end": "612279"
  },
  {
    "text": "renderer that's going to render the web page and all sorts of things so this is the the The Trusted process that has uh",
    "start": "612279",
    "end": "618839"
  },
  {
    "text": "full access to your machine then you have uh in the",
    "start": "618839",
    "end": "624519"
  },
  {
    "text": "beginning there's going to be spawned a process called the saigo process and if you look in PS you will see that there",
    "start": "624519",
    "end": "630360"
  },
  {
    "text": "are two pyo processes a parent and a child and uh these two are going to be",
    "start": "630360",
    "end": "635440"
  },
  {
    "text": "in charge of the parent is mostly only going to be functioning as a Reaper process uh but the child is the one",
    "start": "635440",
    "end": "642680"
  },
  {
    "text": "that's going to be forking into all the vi renderers so that's where all your Tabs are going to come from but we'll",
    "start": "642680",
    "end": "647800"
  },
  {
    "text": "get into it so don't worry about it so then you have the render the render is basically a tab or so it's so",
    "start": "647800",
    "end": "656240"
  },
  {
    "text": "for every time you open a tab you will generally have a new renderer these are spawned from the cyop process",
    "start": "656240",
    "end": "662000"
  },
  {
    "text": "in the previous um slide and these have full sandboxing now the the saot already",
    "start": "662000",
    "end": "668480"
  },
  {
    "text": "has a lot of sandboxing already in place but this is the most sandbox",
    "start": "668480",
    "end": "673720"
  },
  {
    "text": "process now it isn't fully sandboxed right away it is it almost fully",
    "start": "673720",
    "end": "679480"
  },
  {
    "text": "sandboxed right away but it will do a little bit in the beginning as it starts up to complete its sandboxing this is",
    "start": "679480",
    "end": "686040"
  },
  {
    "text": "before it executes any JavaScript so you're still in what is considered trusted",
    "start": "686040",
    "end": "691240"
  },
  {
    "text": "code and then you have the GPU processes now this is for all intents and purposes",
    "start": "691240",
    "end": "697399"
  },
  {
    "text": "um one process it's split for for sandboxing purposes and we'll look at that but it basically has one function",
    "start": "697399",
    "end": "705120"
  },
  {
    "text": "uh it is to compose the final window is the biggest uh function of the GPU process uh because all of these",
    "start": "705120",
    "end": "712120"
  },
  {
    "text": "processes are now um creating uh frames for all of their different parts of the",
    "start": "712120",
    "end": "717880"
  },
  {
    "text": "window but you have to compose the the final window which is the browser that you see and the browser that you see is",
    "start": "717880",
    "end": "723440"
  },
  {
    "text": "an output of many different processes and um the GPU process is the one that composes all of these different",
    "start": "723440",
    "end": "730240"
  },
  {
    "text": "layers and it will also generally do anything else that has any contact with",
    "start": "730240",
    "end": "735800"
  },
  {
    "text": "the GPU driver so that will be things like uh Hardware decoding for",
    "start": "735800",
    "end": "742480"
  },
  {
    "text": "example yeah it has it has some sandboxing and there's a little bit of a difference between the sandboxing on the",
    "start": "743560",
    "end": "748839"
  },
  {
    "text": "GPU on the GPU broker uh but we'll get back to that this is kind of weird because you will see that you can that",
    "start": "748839",
    "end": "755040"
  },
  {
    "text": "you will have uh things like web GL where you have actual GL commands like",
    "start": "755040",
    "end": "761639"
  },
  {
    "text": "coming out uh in the in the web process but these are actually serialized and",
    "start": "761639",
    "end": "767160"
  },
  {
    "text": "and piped or passed over IPC over to the GPU process which is kind of an",
    "start": "767160",
    "end": "772440"
  },
  {
    "text": "interesting architecture okay so basically this is",
    "start": "772440",
    "end": "778639"
  },
  {
    "text": "what's going to Happ happen and this diagram we're going to get back to and I'm going to put more and more text here",
    "start": "778639",
    "end": "784000"
  },
  {
    "text": "so we'll just start with the easy one there is only one binary remember so all of these blue circles are the same",
    "start": "784000",
    "end": "790560"
  },
  {
    "text": "binary but they have different names and you can see the names when you do PS so the uh in the beginning the browser will",
    "start": "790560",
    "end": "797800"
  },
  {
    "text": "uh and I will use the N term Fork though that doesn't necessarily mean I'm using",
    "start": "797800",
    "end": "802959"
  },
  {
    "text": "the fork system call uh so you will see that it says one one side of forks and",
    "start": "802959",
    "end": "808279"
  },
  {
    "text": "the other side it uses clone now clone is uh an underlying um API that is uh",
    "start": "808279",
    "end": "814680"
  },
  {
    "text": "often times used to implement fork and and the reason why we're going to use it because it takes more parameters it has",
    "start": "814680",
    "end": "820720"
  },
  {
    "text": "a lot of flexibility and we can introduce some sandboxing as we do the Clone and we'll look at that then we",
    "start": "820720",
    "end": "827480"
  },
  {
    "text": "have so the the first two processes that uh we uh create is the GPU process on",
    "start": "827480",
    "end": "832959"
  },
  {
    "text": "the SAA process and then later on these will again spawn other processes but basically you can see that",
    "start": "832959",
    "end": "839480"
  },
  {
    "text": "there are basically two families here of course that's a simplification",
    "start": "839480",
    "end": "844639"
  },
  {
    "text": "most of the time that's what you'll see the moment you start up with only one tab you will only see these processes but there might be other processes like",
    "start": "844639",
    "end": "851240"
  },
  {
    "text": "for for plugins or other things but they but these are the main group of processes that you will",
    "start": "851240",
    "end": "857440"
  },
  {
    "text": "see okay so then we come to the Linux apis so these are the tools that we're going to be using to try to construct",
    "start": "857440",
    "end": "864399"
  },
  {
    "text": "the sandboxing um so if you go to uh in your browser and you go to um in this case",
    "start": "864399",
    "end": "871440"
  },
  {
    "text": "with valdi colon sandbox or you could do the same for Chrome or any other browser you will get this box here that's at",
    "start": "871440",
    "end": "879800"
  },
  {
    "text": "sandbox sandbox status and it has lots of cryptic things in it uh it might seem",
    "start": "879800",
    "end": "885360"
  },
  {
    "text": "a little bit um alarming that the first one says no but as we'll get back to the",
    "start": "885360",
    "end": "891040"
  },
  {
    "text": "first one will generally say no on your machine it's because it is a legacy solution for",
    "start": "891040",
    "end": "896320"
  },
  {
    "text": "sandboxing um and we'll go through through what all of these things mean if you were in um Sasha's talk earlier he",
    "start": "896320",
    "end": "904040"
  },
  {
    "text": "talked about BPF and we'll talk a little bit about BPF in this talk as well uh but anyway so we'll get back to this",
    "start": "904040",
    "end": "911279"
  },
  {
    "text": "slide also later when we've talked about these things okay so these are the",
    "start": "911279",
    "end": "917759"
  },
  {
    "text": "elements that we're going to be using so I'm going to go through them first because it's going to be really confusing if I go through them as we",
    "start": "917759",
    "end": "923519"
  },
  {
    "text": "construct the sandbox okay so these are the ones that I'm going to go through um uh there are",
    "start": "923519",
    "end": "930120"
  },
  {
    "text": "a few at the end that I just mention that are also in the chromium codebase but they're not used on desktop Linux",
    "start": "930120",
    "end": "936600"
  },
  {
    "text": "and that's the one that I'm going to be focusing on this talk so you have the concept of capabilities name spaces",
    "start": "936600",
    "end": "943560"
  },
  {
    "text": "shoting um set comp process resource limits Yama",
    "start": "943560",
    "end": "949000"
  },
  {
    "text": "LSM so first of all capabilities um most people are used to um on a Linux uh",
    "start": "949000",
    "end": "956680"
  },
  {
    "text": "machine that you are a regular user or your root capabilities was the idea of",
    "start": "956680",
    "end": "962120"
  },
  {
    "text": "trying to split the concept of root more into more fine grained um uh",
    "start": "962120",
    "end": "968199"
  },
  {
    "text": "Privileges and uh so that you can have as a process have certain capabilities",
    "start": "968199",
    "end": "973560"
  },
  {
    "text": "but not other capabilities and that way isolate what this process is able to",
    "start": "973560",
    "end": "978920"
  },
  {
    "text": "do and uh at the bottom I will generally have what kind of apis uh are used that",
    "start": "978920",
    "end": "985240"
  },
  {
    "text": "have this this concept uh in mind so in this case it says caps set and then you",
    "start": "985240",
    "end": "990279"
  },
  {
    "text": "could go on your Linux machine and do man caps set so basically that's it okay so name spaces and this is this",
    "start": "990279",
    "end": "997160"
  },
  {
    "text": "is very important because this is the reason why we don't need the Vivaldi",
    "start": "997160",
    "end": "1003000"
  },
  {
    "text": "sandbox process H it's because of con Concepts or things that happen around",
    "start": "1003000",
    "end": "1008399"
  },
  {
    "text": "the concept of name spaces and Nam spaces in Linux is a way of of uh of isolating what um a process",
    "start": "1008399",
    "end": "1018399"
  },
  {
    "text": "can see so in this case what the process sees is",
    "start": "1018399",
    "end": "1023880"
  },
  {
    "text": "doesn't reflect reality so you can Define in this way uh how the process",
    "start": "1023880",
    "end": "1029038"
  },
  {
    "text": "perceives its environment in many different ways uh and we'll look at and uh at this",
    "start": "1029039",
    "end": "1034959"
  },
  {
    "text": "a little bit further on and shuing is the most famous I think that we're going to go through today um shering is",
    "start": "1034959",
    "end": "1043079"
  },
  {
    "text": "generally famous from Mac because uh they generally form the basis of what is",
    "start": "1043079",
    "end": "1048520"
  },
  {
    "text": "often called the jail and so you have jail break and then it becomes famous because it has a good name uh but",
    "start": "1048520",
    "end": "1054960"
  },
  {
    "text": "basically shuting is a way of isolating the part of the file system that a process can see so it will you will say",
    "start": "1054960",
    "end": "1062160"
  },
  {
    "text": "that the pro this is the root of your uh file system if you go to slash you will",
    "start": "1062160",
    "end": "1067600"
  },
  {
    "text": "just go to that folder and we'll look at that they use it in a very cool way uh",
    "start": "1067600",
    "end": "1072640"
  },
  {
    "text": "so we'll look at that at the end that's very interesting um then we come to set",
    "start": "1072640",
    "end": "1078400"
  },
  {
    "text": "comp setum is a very powerful API and it has",
    "start": "1078400",
    "end": "1084240"
  },
  {
    "text": "been mentioned in uh a couple of talks I think here uh the underlying language",
    "start": "1084240",
    "end": "1090799"
  },
  {
    "text": "for it it's it's basically a virtual machine that exists inside of the kernel and you can pass it a program and we'll",
    "start": "1090799",
    "end": "1097840"
  },
  {
    "text": "look at how that works but it basically as you can limit what kind of system calls that the application is allowed to",
    "start": "1097840",
    "end": "1103720"
  },
  {
    "text": "do and also if you want them to be allowed to do the system call if you want them to fail or how you want them",
    "start": "1103720",
    "end": "1110000"
  },
  {
    "text": "to fail so we'll look a little bit at that then you have resource limits it's",
    "start": "1110000",
    "end": "1115760"
  },
  {
    "text": "uh we'll touch on it a little bit and so it's a way of uh basically setting up",
    "start": "1115760",
    "end": "1121360"
  },
  {
    "text": "how much resources in certain categories that the process is allowed to have um then you have the Yama LSM which",
    "start": "1121360",
    "end": "1128559"
  },
  {
    "text": "is very it it there there's some code around it inside of chromium but it's",
    "start": "1128559",
    "end": "1133840"
  },
  {
    "text": "basically only checked so it will check the status and the status can be checked in this file that I've I have the path",
    "start": "1133840",
    "end": "1140679"
  },
  {
    "text": "to at the bottom there uh and basically it uh says one is",
    "start": "1140679",
    "end": "1146880"
  },
  {
    "text": "adequate I think so I I won't go that well I'll say a little bit this is no sorry wrong way",
    "start": "1146880",
    "end": "1154799"
  },
  {
    "text": "that one um this is is uh remember I talked about internal external threats",
    "start": "1154799",
    "end": "1160840"
  },
  {
    "text": "this is an internal threat soundboxing so this one uh is trying to limit the",
    "start": "1160840",
    "end": "1166400"
  },
  {
    "text": "the um rights other processes have to P trce this process now P tracing is a",
    "start": "1166400",
    "end": "1171960"
  },
  {
    "text": "very powerful API uh that is used generally by debuggers like GDB so you",
    "start": "1171960",
    "end": "1177280"
  },
  {
    "text": "have massive uh uh access to the running process if you're P tracing uh it's very",
    "start": "1177280",
    "end": "1184240"
  },
  {
    "text": "low level but it it it you can do um very powerful things and these are the",
    "start": "1184240",
    "end": "1189400"
  },
  {
    "text": "kinds of things we don't want any manol uh program to to be able to do so you can you there's the LSM is for um Linux",
    "start": "1189400",
    "end": "1198039"
  },
  {
    "text": "security module so this is a specific one and it is mostly around P tracing",
    "start": "1198039",
    "end": "1203520"
  },
  {
    "text": "but there's some things around hard and and soft links as well I won't talk about that much",
    "start": "1203520",
    "end": "1209760"
  },
  {
    "text": "because it's not used much it's just checked okay so other apis that are also",
    "start": "1209760",
    "end": "1215240"
  },
  {
    "text": "in used in chromium are set uid and set",
    "start": "1215240",
    "end": "1222600"
  },
  {
    "text": "GID uh these are um also famous in certain circles generally security",
    "start": "1222600",
    "end": "1228679"
  },
  {
    "text": "circles uh because they have very interesting properties now these they're not",
    "start": "1228679",
    "end": "1234000"
  },
  {
    "text": "used uh today but they are used in the the Vivaldi sandbox so the process we're",
    "start": "1234000",
    "end": "1240159"
  },
  {
    "text": "keep talking about but we're not going to talk about uh but basically it does something",
    "start": "1240159",
    "end": "1245679"
  },
  {
    "text": "very interesting if you're running an executable as a normal user but this",
    "start": "1245679",
    "end": "1250720"
  },
  {
    "text": "executable is owned by root and it has this uh set uid or set GID uh set on the",
    "start": "1250720",
    "end": "1257600"
  },
  {
    "text": "file that then inside of the file the program can assume that the rights of",
    "start": "1257600",
    "end": "1262720"
  },
  {
    "text": "root and do root operations and the reason why this is uh",
    "start": "1262720",
    "end": "1268360"
  },
  {
    "text": "has been used before is that uh name spaces that we just barely touched on uh",
    "start": "1268360",
    "end": "1274919"
  },
  {
    "text": "previously you couldn't create a username space without um capsis admin",
    "start": "1274919",
    "end": "1280279"
  },
  {
    "text": "which is um is a root kind almost a root kind of capability and so you had to assume the",
    "start": "1280279",
    "end": "1287240"
  },
  {
    "text": "role of root to be able to do that but in modern linuxes that's not necessary anymore and so we will create a a",
    "start": "1287240",
    "end": "1294159"
  },
  {
    "text": "username space without uh needing set uid then you have c groups cgroups is",
    "start": "1294159",
    "end": "1301880"
  },
  {
    "text": "very famous uh in certain circles again this time in the container business um",
    "start": "1301880",
    "end": "1307760"
  },
  {
    "text": "because a lot of these apis that we're going to be talking about today are also very extensively used in in containers",
    "start": "1307760",
    "end": "1314880"
  },
  {
    "text": "like things like Docker so you will see these things come up because it's basically the same apis uh C grips is",
    "start": "1314880",
    "end": "1321200"
  },
  {
    "text": "very much used in Docker to and it's basically to allocate uh what kind of resources that you want the process to",
    "start": "1321200",
    "end": "1327760"
  },
  {
    "text": "have access to and how much basically so uh in desktop Linux is not in use but it",
    "start": "1327760",
    "end": "1334240"
  },
  {
    "text": "is used in chromos and it it's used to implement some very interesting things",
    "start": "1334240",
    "end": "1339279"
  },
  {
    "text": "like um in Docker you know that you can you can freeze a container and then you",
    "start": "1339279",
    "end": "1344720"
  },
  {
    "text": "can you can migrate it to another machine and then you can thaw it there and it just starts up right where it was",
    "start": "1344720",
    "end": "1350919"
  },
  {
    "text": "okay this is cgroup this is cgroup functionality and it's used in Chrome OS",
    "start": "1350919",
    "end": "1356120"
  },
  {
    "text": "to freeze renderer processes because generally uh Chromebooks have bad",
    "start": "1356120",
    "end": "1361480"
  },
  {
    "text": "Hardware so this is a way of of of resource management on bad Hardware but it's not used on desktop",
    "start": "1361480",
    "end": "1368120"
  },
  {
    "text": "unfortunately so you you will generally see your browser taking a lot of resources on your",
    "start": "1368120",
    "end": "1373919"
  },
  {
    "text": "machines okay so then you have process groups is used for the Chrome driver which might be famous is if you're a web",
    "start": "1373919",
    "end": "1379440"
  },
  {
    "text": "developer and you are using it to run your tests um but it's not very",
    "start": "1379440",
    "end": "1384600"
  },
  {
    "text": "interesting for anything else uh it's a way to group processes that you can treat them as a group so if you put",
    "start": "1384600",
    "end": "1390600"
  },
  {
    "text": "processes into a group and you kill a process group then it kills all of the processes in the group and other things",
    "start": "1390600",
    "end": "1397240"
  },
  {
    "text": "like that um okay so that those are the tools",
    "start": "1397240",
    "end": "1402720"
  },
  {
    "text": "I'll mention them again as we go through um so what we are trying to do is we're",
    "start": "1402720",
    "end": "1408960"
  },
  {
    "text": "trying to execute an untrusted binary inside of a Sandbox now this is a truth truth with modifications as they say um",
    "start": "1408960",
    "end": "1416240"
  },
  {
    "text": "because the the binary is our own binary right so we trust that but the thing is we are going to be executing a virtual",
    "start": "1416240",
    "end": "1423000"
  },
  {
    "text": "machine in there executing JavaScript coming from the internet and God knows who wrote that maybe you guys anyway the thing is",
    "start": "1423000",
    "end": "1432360"
  },
  {
    "text": "it we are considering it to be untrusted right so uh we are going to to be",
    "start": "1432360",
    "end": "1438720"
  },
  {
    "text": "looking for Windows of opportunity where we can in some way limit what this process can do or it's a child process",
    "start": "1438720",
    "end": "1446480"
  },
  {
    "text": "as we go through uh the startup sequence so first we're going to create the initial",
    "start": "1446480",
    "end": "1452720"
  },
  {
    "text": "sandboxing so like I said in the beginning you have the browser process it's going to do a a fork and a clone",
    "start": "1452720",
    "end": "1458760"
  },
  {
    "text": "right as it starts up and these are going to do afterwards you see after the pink boxes you will",
    "start": "1458760",
    "end": "1466000"
  },
  {
    "text": "see an exec so they will do an exec uh which will actually cause uh the",
    "start": "1466000",
    "end": "1472000"
  },
  {
    "text": "binary to be to be executed again and come through Maine and you have like",
    "start": "1472000",
    "end": "1477279"
  },
  {
    "text": "you're starting from the beginning and the the way they are distinguished is",
    "start": "1477279",
    "end": "1483000"
  },
  {
    "text": "because you pass as a commandline argument what kind of role it's going to take as it starts up so you're passing",
    "start": "1483000",
    "end": "1489039"
  },
  {
    "text": "TP typ saot then it will check that it will say oh I'm ayot okay I'm going to go and run cyot main so which is a",
    "start": "1489039",
    "end": "1496360"
  },
  {
    "text": "function inside of chromium or or the same for gpus so you'll have a GPU",
    "start": "1496360",
    "end": "1503000"
  },
  {
    "text": "main um and then there's a lot of words uh oh most of most of right now we're",
    "start": "1503000",
    "end": "1509720"
  },
  {
    "text": "just going to look at uh what is in Black I'm just going to say right now the reason why the text is in black and",
    "start": "1509720",
    "end": "1515120"
  },
  {
    "text": "that's the cap set you see in the set comp is because most of the time as you",
    "start": "1515120",
    "end": "1520600"
  },
  {
    "text": "are creating your sandboxing you are limiting what your uh your future",
    "start": "1520600",
    "end": "1525760"
  },
  {
    "text": "children can do uh but in this case these are kind of sneaky uh because they make sure that",
    "start": "1525760",
    "end": "1532120"
  },
  {
    "text": "they spawn their child before they do this thing so so the sagot does a caps",
    "start": "1532120",
    "end": "1538039"
  },
  {
    "text": "set but it only does that after it's already forked so the cap set that it does only",
    "start": "1538039",
    "end": "1543760"
  },
  {
    "text": "applies to itself so the parent saot will have a capset done on itself but it",
    "start": "1543760",
    "end": "1548799"
  },
  {
    "text": "won't apply to the child so the child will also do a capside later on but it would hold on to CIS admin cap sis admin",
    "start": "1548799",
    "end": "1556279"
  },
  {
    "text": "but we'll get back to that in a little bit but it's basically an explanation of the diagram and I'll come back to the",
    "start": "1556279",
    "end": "1562840"
  },
  {
    "text": "diagram so first of all uh on Linux you have the concept of a fork exec it's",
    "start": "1562840",
    "end": "1568159"
  },
  {
    "text": "sort of like a thing people say and the idea is uh a fork will create a new",
    "start": "1568159",
    "end": "1573640"
  },
  {
    "text": "process and an exec will execute uh an executable inside of a process so if you",
    "start": "1573640",
    "end": "1580080"
  },
  {
    "text": "do an exec you're already in a process um now I'm using the word fork",
    "start": "1580080",
    "end": "1586399"
  },
  {
    "text": "all the time because it's the normal word to use and it's also used a lot in the chromium code base but often times",
    "start": "1586399",
    "end": "1592240"
  },
  {
    "text": "the fork in chromium will be a clone and a clone",
    "start": "1592240",
    "end": "1598440"
  },
  {
    "text": "is quite interesting and we'll look at that in a little bit okay so we're looking for Windows of opportunity where",
    "start": "1598440",
    "end": "1604640"
  },
  {
    "text": "we can actually limit this uh new process that we're creating so uh if we",
    "start": "1604640",
    "end": "1612159"
  },
  {
    "text": "do the initial sandboxing we have the browser process it will do uh a clone or",
    "start": "1612159",
    "end": "1618240"
  },
  {
    "text": "or a fork and then it will do an exec so you have many different stages at which",
    "start": "1618240",
    "end": "1623760"
  },
  {
    "text": "you have a possibility of of limiting these um child processes um but after that the other um",
    "start": "1623760",
    "end": "1634039"
  },
  {
    "text": "uh other processes will only be using fork and then you have not so many stages where you can introduce something",
    "start": "1634039",
    "end": "1641279"
  },
  {
    "text": "so if we go back again so you have if you have a fork exec you have before Fork at clone if you use using clone",
    "start": "1641279",
    "end": "1649399"
  },
  {
    "text": "before exx so now you've created a new process but you haven't ex yet exct yet",
    "start": "1649399",
    "end": "1654640"
  },
  {
    "text": "and then you have at startup you're coming through main again so you've passed maybe command line arguments so",
    "start": "1654640",
    "end": "1660559"
  },
  {
    "text": "now you have the possibility of doing something as you're starting up again but with fork is basically before",
    "start": "1660559",
    "end": "1667120"
  },
  {
    "text": "and after there's no uh no other windows of opportunity",
    "start": "1667120",
    "end": "1672200"
  },
  {
    "text": "there okay so uh the initial sandbox uh construction and you will see uh I'm",
    "start": "1672200",
    "end": "1678240"
  },
  {
    "text": "going to be writing in the top left corner uh which processes that this applies to it's just trying to keep it",
    "start": "1678240",
    "end": "1685799"
  },
  {
    "text": "in mind but it don't worry if you get confused because I'll bring up the the the diagram again and then you can",
    "start": "1685799",
    "end": "1691679"
  },
  {
    "text": "always look at the slides so the initial sandbox construction the most important thing we're going to be",
    "start": "1691679",
    "end": "1697440"
  },
  {
    "text": "doing here is creating the name spaces for the saot process because remember the saot parent has a seot child which",
    "start": "1697440",
    "end": "1703960"
  },
  {
    "text": "has uh all of the renderers as children and these are the ones that we",
    "start": "1703960",
    "end": "1709080"
  },
  {
    "text": "are most afraid of so we we're so this is the part that where we are building most extensively",
    "start": "1709080",
    "end": "1716480"
  },
  {
    "text": "sandboxing yes so before you fork or clone you have basically uh how fork and clone uh",
    "start": "1717120",
    "end": "1725360"
  },
  {
    "text": "Works in general is um that you have a process you are going to make a new",
    "start": "1725360",
    "end": "1731360"
  },
  {
    "text": "process and the for call is basically copying the entire memory of the process",
    "start": "1731360",
    "end": "1738399"
  },
  {
    "text": "you're in into the new process H everything so that state stack",
    "start": "1738399",
    "end": "1743600"
  },
  {
    "text": "everything and there the instruction pointers is at the same place in both processes and then it returns from fork",
    "start": "1743600",
    "end": "1752039"
  },
  {
    "text": "in both of them so how you can distinguish if you're the parent or the child is is the return value of fork so",
    "start": "1752039",
    "end": "1759159"
  },
  {
    "text": "if you are the child you will get zero back from Fork if you're the parent you will get the the the process ID the pit",
    "start": "1759159",
    "end": "1766200"
  },
  {
    "text": "of the child and and then from there on you have to kind of split again because remember",
    "start": "1766200",
    "end": "1774159"
  },
  {
    "text": "this is kind of if you're only doing a fork this is this is fiddly because you have to return you have a stack right",
    "start": "1774159",
    "end": "1781720"
  },
  {
    "text": "you've like you've called stuff so you're up here somewhere and somehow you have to unwind this stack in a way that",
    "start": "1781720",
    "end": "1788200"
  },
  {
    "text": "makes sense for both parent and child um yes uh and the interesting",
    "start": "1788200",
    "end": "1796039"
  },
  {
    "text": "thing with clone is that it allows you to pass a bunch of flags to it uh which can Define exactly how this uh this",
    "start": "1796039",
    "end": "1803760"
  },
  {
    "text": "copying is going to be done where you have the possibility of passing Flags where you're saying that we want to",
    "start": "1803760",
    "end": "1808840"
  },
  {
    "text": "share stuff now on Linux actually uh the Clone uh system call is used to make",
    "start": "1808840",
    "end": "1815919"
  },
  {
    "text": "threads as well which makes you see exactly how powerful this this um system",
    "start": "1815919",
    "end": "1822320"
  },
  {
    "text": "call is because you can pass things like I want us to share virtual memory I want us to share file descriptors I on us so",
    "start": "1822320",
    "end": "1829519"
  },
  {
    "text": "and and there's like a whole set of flags that are basically only used for Threads but in this case we're going to",
    "start": "1829519",
    "end": "1835640"
  },
  {
    "text": "use them to make Nam spaces because in general you will have the child would get get what the parent had so if you",
    "start": "1835640",
    "end": "1842399"
  },
  {
    "text": "want it to be different this is the time so what we are going to do here is",
    "start": "1842399",
    "end": "1848399"
  },
  {
    "text": "create Nam spaces now this is the first Nam space that we're going to making which I is slightly described on the",
    "start": "1848399",
    "end": "1855159"
  },
  {
    "text": "next slide is called a username space and it's really really really important for everything else and the reason why",
    "start": "1855159",
    "end": "1861960"
  },
  {
    "text": "is because remember we're starting the browser as a regular user all of the other name spaces require you to have",
    "start": "1861960",
    "end": "1867919"
  },
  {
    "text": "capsus admin which uh you don't have as a regular user you would have if you",
    "start": "1867919",
    "end": "1873960"
  },
  {
    "text": "were root but you're not root so we need to become root or become root and that",
    "start": "1873960",
    "end": "1880760"
  },
  {
    "text": "is what the username space will do it will create a new namespace in which you",
    "start": "1880760",
    "end": "1886720"
  },
  {
    "text": "will have the Ro as root but it is only you thinking you are root in this case",
    "start": "1886720",
    "end": "1893360"
  },
  {
    "text": "um so in the user namespace you will get new P new pids all of the so you will",
    "start": "1893360",
    "end": "1900760"
  },
  {
    "text": "get PID one and you will think you're PID one and all of your function calls will think you're p pig one PID one uh",
    "start": "1900760",
    "end": "1909279"
  },
  {
    "text": "but if you're outside of this username space so your parent process will see your real Pit uh but inside of this Nam",
    "start": "1909279",
    "end": "1917960"
  },
  {
    "text": "space you are root and now you can do root stuff and that's what we're going to do to make more name",
    "start": "1917960",
    "end": "1924360"
  },
  {
    "text": "spaces and one interesting thing in the code actually around clone inside of uh chromium is that it emulates a fork",
    "start": "1924360",
    "end": "1931880"
  },
  {
    "text": "because a chrome is a clone is a little bit different by using some long jump stuff so if you're interested in that you can ask me later because I think",
    "start": "1931880",
    "end": "1938159"
  },
  {
    "text": "it's nice um yes so these are the name spaces that are created so you have user PID",
    "start": "1938159",
    "end": "1944440"
  },
  {
    "text": "and net uh user will then we need to be root in the space and then we use that",
    "start": "1944440",
    "end": "1950799"
  },
  {
    "text": "to make pit and net so you can you make a pit name space inside of that pit Nam",
    "start": "1950799",
    "end": "1958000"
  },
  {
    "text": "space you will get pit one so uh this child when it emerges as",
    "start": "1958000",
    "end": "1964200"
  },
  {
    "text": "a process will be pit one to itself um but not to but not to the",
    "start": "1964200",
    "end": "1970760"
  },
  {
    "text": "parent so the parent will have the real world view but the child will live in this and if you use containers you've",
    "start": "1970760",
    "end": "1976120"
  },
  {
    "text": "kind of seen this thing that it's kind of weird like you feel like you're in a normal Linux machine but you don't",
    "start": "1976120",
    "end": "1981399"
  },
  {
    "text": "really know how it works it works by these kinds of mechanisms um and then uh you have the",
    "start": "1981399",
    "end": "1987320"
  },
  {
    "text": "new net which basically isolates this process from accessing Network and this is the way so I told",
    "start": "1987320",
    "end": "1994080"
  },
  {
    "text": "you in the beginning that the browser process is the one that handles all Network traffic this one Al this one",
    "start": "1994080",
    "end": "1999200"
  },
  {
    "text": "makes sure that this process has no way of accessing Network okay so then we have before EXC",
    "start": "1999200",
    "end": "2005720"
  },
  {
    "text": "and this is the last time to do some cleanup uh so there's a bunch of launch options",
    "start": "2005720",
    "end": "2011480"
  },
  {
    "text": "that can be used here to fix all sorts of things now around forking and cloning there's a lot of um file descriptor",
    "start": "2011480",
    "end": "2018639"
  },
  {
    "text": "stuff a lot of signal handling stuff and I'm not going to get into it because it's like a whole talk uh so yeah read",
    "start": "2018639",
    "end": "2026320"
  },
  {
    "text": "The Man pages okay so now we created the initial sandboxing so we created the name spaces",
    "start": "2026320",
    "end": "2032880"
  },
  {
    "text": "and then we've isolated from the network and you know we've gotten a little bit further but this is the first pyot we've",
    "start": "2032880",
    "end": "2038720"
  },
  {
    "text": "created now but we want to make it smaller again so then we come to the second stage and we're going to try to",
    "start": "2038720",
    "end": "2044960"
  },
  {
    "text": "shrink it even further and so what we've created I'm not going to talk so much about the GPU",
    "start": "2044960",
    "end": "2051440"
  },
  {
    "text": "process because it doesn't use a lot of soundboxing so we'll focus mostly on the saot here uh but it will do the the",
    "start": "2051440",
    "end": "2058760"
  },
  {
    "text": "shuting trick which I'll get into in a little bit and it will create a new username space again",
    "start": "2058760",
    "end": "2064240"
  },
  {
    "text": "here um yeah so first you will see if you trace the process you will see it",
    "start": "2064240",
    "end": "2070158"
  },
  {
    "text": "calls a lot of uh of uh prctl with uh PR set no new privs which might you might",
    "start": "2070159",
    "end": "2077560"
  },
  {
    "text": "wonder what it does but basically it uh this flag is if you set it it is",
    "start": "2077560",
    "end": "2083800"
  },
  {
    "text": "preserved forever you can't unset it and it does turn off a lot of functionality inside of the kernel in with regards to",
    "start": "2083800",
    "end": "2090520"
  },
  {
    "text": "what this process can do especially around stuff like set ID and setgid stuff that we skipped earlier",
    "start": "2090520",
    "end": "2097920"
  },
  {
    "text": "so I'm just saying it but you have to do this uh if you're going to do set comp which I'm going to talk about in a",
    "start": "2097920",
    "end": "2104160"
  },
  {
    "text": "second uh otherwise you have to have capsis admin so it's either or and so this is the either so we're going to so",
    "start": "2104160",
    "end": "2111920"
  },
  {
    "text": "this is going to be set before you do SEC comp okay so SEC comp what is that",
    "start": "2111920",
    "end": "2119960"
  },
  {
    "text": "basically you write a program uh it's a very assembly like program it's",
    "start": "2119960",
    "end": "2125359"
  },
  {
    "text": "installed in uh so you you create a struct and it has like all sorts of instructions it's it's a a interesting",
    "start": "2125359",
    "end": "2133320"
  },
  {
    "text": "program and it it doesn't have any Loops uh it has a very fixed size the instructions are all fixed size it only",
    "start": "2133320",
    "end": "2139839"
  },
  {
    "text": "has an implied instruction pointer it's a very interesting thing uh but",
    "start": "2139839",
    "end": "2144920"
  },
  {
    "text": "basically this program runs in a very small virtual machine in the kernel and",
    "start": "2144920",
    "end": "2150040"
  },
  {
    "text": "it wasn't created for this purpose it was created uh for TCP dump and the",
    "start": "2150040",
    "end": "2155680"
  },
  {
    "text": "reason for that is that you you for in you get so many Network packets that if",
    "start": "2155680",
    "end": "2160960"
  },
  {
    "text": "you want to actually filter them you you can't have uh a contact switch between",
    "start": "2160960",
    "end": "2166079"
  },
  {
    "text": "uh the kernel and the user space application for every packet so in this case you can you could use the BPF which",
    "start": "2166079",
    "end": "2172680"
  },
  {
    "text": "is called the Berkeley packet filter syntax to write a program to filter the",
    "start": "2172680",
    "end": "2178800"
  },
  {
    "text": "packets so you can say I'm interested in this and this and this packet and then only those will be passed to you and so",
    "start": "2178800",
    "end": "2184880"
  },
  {
    "text": "this has to be very fast because it's going to be running for every package right in this case it's going to be running for every system call so you're",
    "start": "2184880",
    "end": "2191359"
  },
  {
    "text": "making a program that the colonel would run when the and this application or any",
    "start": "2191359",
    "end": "2197599"
  },
  {
    "text": "uh child or grandchild or whatever uh um process will do any system",
    "start": "2197599",
    "end": "2204880"
  },
  {
    "text": "call now the if you remember the the two turtles and there was like the little",
    "start": "2204880",
    "end": "2210359"
  },
  {
    "text": "box that said the sandboxing stuff and it had it has we'll look at it in a bit",
    "start": "2210359",
    "end": "2216119"
  },
  {
    "text": "says second on bpft sync and that is the feature that came a little bit later which basically said that when you",
    "start": "2216119",
    "end": "2221440"
  },
  {
    "text": "install the second program that it applies to all",
    "start": "2221440",
    "end": "2226400"
  },
  {
    "text": "threads okay so in chromium the these policies because remember this is uh",
    "start": "2227119",
    "end": "2232800"
  },
  {
    "text": "this is a white or in chromium it's and almost in Docker as well it's implemented as a white list so instead",
    "start": "2232800",
    "end": "2240079"
  },
  {
    "text": "of of like listing up all of the system calls you're going to disallow instead you say these are the ones I'm going to",
    "start": "2240079",
    "end": "2246480"
  },
  {
    "text": "allow these are the once I'm going to lie depending on something and",
    "start": "2246480",
    "end": "2251800"
  },
  {
    "text": "everything else you can crash the application and uh in chromium this is",
    "start": "2251800",
    "end": "2257720"
  },
  {
    "text": "implemented in a class it's the class again is used later on to generate this",
    "start": "2257720",
    "end": "2263000"
  },
  {
    "text": "program which is then installed but from uh a programming point of view you are you're going to be dealing with a class",
    "start": "2263000",
    "end": "2269000"
  },
  {
    "text": "where there's a virtual function and you override it and then there's a switch and it's very",
    "start": "2269000",
    "end": "2274800"
  },
  {
    "text": "comfortable um and you will see that and in the numbered thing down there it's",
    "start": "2274800",
    "end": "2281599"
  },
  {
    "text": "basically the idea that these are extending each other now since you remember that this is a white list so if",
    "start": "2281599",
    "end": "2287280"
  },
  {
    "text": "you're extending a white list you're generally adding more allowed stuff so the more extended you are the more",
    "start": "2287280",
    "end": "2294720"
  },
  {
    "text": "permissive you are and uh yeah so the what you will see the",
    "start": "2294720",
    "end": "2300319"
  },
  {
    "text": "reason why the GPU broker process was pulled out of the GPU process is because",
    "start": "2300319",
    "end": "2305440"
  },
  {
    "text": "it it needed a more permissive sandboxing so it is to to be able to",
    "start": "2305440",
    "end": "2311520"
  },
  {
    "text": "have two different policies in those two processes okay yeah so pyo parent will",
    "start": "2311520",
    "end": "2319680"
  },
  {
    "text": "uh will create a new Nam space but in this case it won't create a new name Space by calling clone like we did the",
    "start": "2319680",
    "end": "2325480"
  },
  {
    "text": "first time in this case it will use another system call so called unshare and that will just take the process that",
    "start": "2325480",
    "end": "2331640"
  },
  {
    "text": "you're in already and move it to a new one",
    "start": "2331640",
    "end": "2338640"
  },
  {
    "text": "yeah okay and this one I like this is my favorite um yes uh they're using Sho uh",
    "start": "2338960",
    "end": "2345839"
  },
  {
    "text": "and generally you will use Sho to make a jail so you want to make like certain part of the file system that this process actually has access to and and",
    "start": "2345839",
    "end": "2352960"
  },
  {
    "text": "I'm sure most of you have uh have looked at web development at some point and you know that there are several apis for",
    "start": "2352960",
    "end": "2358040"
  },
  {
    "text": "writing files or databases or whatnot from web right but we I but in this case",
    "start": "2358040",
    "end": "2364359"
  },
  {
    "text": "I've also said that access is generally coming through the browser and this is",
    "start": "2364359",
    "end": "2370240"
  },
  {
    "text": "going to make sure that you can't touch the file system at all and I I said",
    "start": "2370240",
    "end": "2375680"
  },
  {
    "text": "earlier about clone that it had interesting flags and in this case we're going to use that it clones so you're in",
    "start": "2375680",
    "end": "2382599"
  },
  {
    "text": "uh the parent cot and it clones a child and it clones a child with a flag",
    "start": "2382599",
    "end": "2389839"
  },
  {
    "text": "called clone FS this flag says that the parent and child will share certain file",
    "start": "2389839",
    "end": "2396520"
  },
  {
    "text": "system attribut uh most importantly it will share the same sherut and it will share the same",
    "start": "2396520",
    "end": "2402920"
  },
  {
    "text": "current working directory which means that if either process shuts or changes",
    "start": "2402920",
    "end": "2408760"
  },
  {
    "text": "Uh current working directory they will change together now what they do is that",
    "start": "2408760",
    "end": "2414920"
  },
  {
    "text": "immediately after this of of cloning this child with clone FS it shots itself",
    "start": "2414920",
    "end": "2421200"
  },
  {
    "text": "to a directory which is process specific it's specific to the child and it shuts",
    "start": "2421200",
    "end": "2427040"
  },
  {
    "text": "in into that directory changes directory into that directory and remember these people change these processes share so",
    "start": "2427040",
    "end": "2434520"
  },
  {
    "text": "both of them are moved and both the parent and the child are now in this process specific directory belonging to",
    "start": "2434520",
    "end": "2441400"
  },
  {
    "text": "the child and then the child exits the directory is",
    "start": "2441400",
    "end": "2446880"
  },
  {
    "text": "deleted and the parent is now in a directory that doesn't",
    "start": "2446880",
    "end": "2452280"
  },
  {
    "text": "exist and has lost all access to the file system which I I think is kind of",
    "start": "2452280",
    "end": "2459599"
  },
  {
    "text": "cool okay so uh then you have uh the dropping of capability so the the parent",
    "start": "2459599",
    "end": "2465119"
  },
  {
    "text": "cot will drop all capabilities right after forking the child pyot the child",
    "start": "2465119",
    "end": "2470960"
  },
  {
    "text": "pyot will drop all capabilities except capsis admin so that I can use it to create a",
    "start": "2470960",
    "end": "2476520"
  },
  {
    "text": "pit name space later on um yeah and then you have certain",
    "start": "2476520",
    "end": "2483680"
  },
  {
    "text": "small things that are done inside of the render like it's using set R limit to uh limit the address uh space of or the",
    "start": "2483680",
    "end": "2491880"
  },
  {
    "text": "virtual memory of the of the renderer process and uh our limit data to uh to",
    "start": "2491880",
    "end": "2497880"
  },
  {
    "text": "to set the maximum sides of the data segment okay so basically the idea here",
    "start": "2497880",
    "end": "2504240"
  },
  {
    "text": "is that you want to make it as restrictive as you can get away with and the reason why I say get away with is because this is an existing technology",
    "start": "2504240",
    "end": "2510960"
  },
  {
    "text": "right it sandboxing was introduced in a model that already existed so sometimes",
    "start": "2510960",
    "end": "2517240"
  },
  {
    "text": "you have to allow stuff because that's how the web is but in this case most of the time they're moving dangerous things",
    "start": "2517240",
    "end": "2523280"
  },
  {
    "text": "into trusted applications and they're using IPC to talk to the things that are untrusted and then isolating the",
    "start": "2523280",
    "end": "2529240"
  },
  {
    "text": "untrusted things as much as possible um okay I'm almost done I",
    "start": "2529240",
    "end": "2535760"
  },
  {
    "text": "promise okay so this is this is just uh an overview again we've gone through most of this stuff but basically all of",
    "start": "2535760",
    "end": "2542119"
  },
  {
    "text": "the processes in the in the outline part has has no access to the file system the",
    "start": "2542119",
    "end": "2549319"
  },
  {
    "text": "concept is here is trust is relative some processes are more trusted than others uh but most processes inside of",
    "start": "2549319",
    "end": "2555520"
  },
  {
    "text": "the chromium space are untrusted to a certain degree okay so we're get back to the to",
    "start": "2555520",
    "end": "2561880"
  },
  {
    "text": "the turtles again and now hopefully you will understand more of what it says so you know that the set uid sandbox is off",
    "start": "2561880",
    "end": "2568880"
  },
  {
    "text": "because it's a legacy thing you know namespace sandbox in this case is a username s namespace sandbox and you",
    "start": "2568880",
    "end": "2575960"
  },
  {
    "text": "know we we saw that the pit name spaces network name spaces to isolate from Network set comp BPF sandbox to isolate",
    "start": "2575960",
    "end": "2583559"
  },
  {
    "text": "from system calls and it is all supported for all threads and the Yama",
    "start": "2583559",
    "end": "2588839"
  },
  {
    "text": "LSM will restrict P tracing of these processes so hey now we understand what",
    "start": "2588839",
    "end": "2593920"
  },
  {
    "text": "it's said okay but there are some problems and just a couple uh it's",
    "start": "2593920",
    "end": "2599599"
  },
  {
    "text": "basically because of the P tracing right uh and all sorts of other kinds of sandboxing is now it's really hard to",
    "start": "2599599",
    "end": "2604680"
  },
  {
    "text": "debug because you're basically saying that a sibling program is not allowed to touch this process and now you kind of",
    "start": "2604680",
    "end": "2610680"
  },
  {
    "text": "want to when you debug so often times you will turn off sandboxing to do debugging and crash reporting same thing",
    "start": "2610680",
    "end": "2617599"
  },
  {
    "text": "we just said we don't want crash we don't want to leak all of our memory to some kind of untrusted process and now",
    "start": "2617599",
    "end": "2623400"
  },
  {
    "text": "suddenly we actually do want to do that because we want to send it back so that somebody can analyze it and so those",
    "start": "2623400",
    "end": "2628880"
  },
  {
    "text": "things also become kind of like fiddly okay so this is what I hopefully",
    "start": "2628880",
    "end": "2634839"
  },
  {
    "text": "cover and remember I'll put everything up on LinkedIn or LinkedIn and on on",
    "start": "2634839",
    "end": "2641000"
  },
  {
    "text": "Twitter so that's how web browser sandboxes really work and uh if you want",
    "start": "2641000",
    "end": "2646119"
  },
  {
    "text": "to look further into this there's a an excellent course by Michael kersi which is called Linux security and isolation",
    "start": "2646119",
    "end": "2651599"
  },
  {
    "text": "apis if you want to just learn that part and uh he also has also written a book The Linux programming interface which is",
    "start": "2651599",
    "end": "2658240"
  },
  {
    "text": "the basically the Bible if you want to program against the Linux uh kernel and uh then it's it's basically a source",
    "start": "2658240",
    "end": "2664880"
  },
  {
    "text": "code Linux Man pages stuff like that and thank",
    "start": "2664880",
    "end": "2670080"
  },
  {
    "text": "[Applause] you so any",
    "start": "2670080",
    "end": "2677720"
  },
  {
    "text": "questions yes you obviously support Windows of your brows well so you do",
    "start": "2677720",
    "end": "2684359"
  },
  {
    "text": "just completely everything differently using Windows Windows mechanism yes yes this is a very",
    "start": "2684359",
    "end": "2692880"
  },
  {
    "text": "very uh platform specific implementation because of the the apis that are available ailable so there's a whole uh",
    "start": "2692880",
    "end": "2699240"
  },
  {
    "text": "separate implementation for for Windows yeah and for",
    "start": "2699240",
    "end": "2704760"
  },
  {
    "text": "Mac any more",
    "start": "2705599",
    "end": "2709000"
  },
  {
    "text": "questions no okay oh yes",
    "start": "2711359",
    "end": "2715838"
  },
  {
    "text": "sorry I'm debugging in chome is it any different is the sandboxing still the",
    "start": "2718640",
    "end": "2724200"
  },
  {
    "text": "same the sandboxing is still the same that when you debug at inside of chromium you're basically uh using the",
    "start": "2724200",
    "end": "2729599"
  },
  {
    "text": "JavaScript debugger which interfaces with the VM inside of the render process so you're still good but if you want to",
    "start": "2729599",
    "end": "2735760"
  },
  {
    "text": "make a browser and you want to actually debug the browser itself then suddenly it's very difficult to touch stuff as",
    "start": "2735760",
    "end": "2742240"
  },
  {
    "text": "sandboxing is on because that was one of the purposes of sandboxing was to protect yourself from things like",
    "start": "2742240",
    "end": "2748720"
  },
  {
    "text": "that yes very unfortunate uh to have phas off if you want to run GDB on your",
    "start": "2748720",
    "end": "2754880"
  },
  {
    "text": "browser",
    "start": "2754880",
    "end": "2757880"
  },
  {
    "text": "yes yeah so there's a massive like I could do a whole talk on the IPC",
    "start": "2774280",
    "end": "2779720"
  },
  {
    "text": "mechanisms that are in ed in in Chrome it's very interesting actually uh but but it is it is massive it uses um a lot",
    "start": "2779720",
    "end": "2788119"
  },
  {
    "text": "of uh of uh virtual memory and stuff to to move information from a place to",
    "start": "2788119",
    "end": "2793400"
  },
  {
    "text": "place serialization of stuff and it's it's a whole system in itself so you get",
    "start": "2793400",
    "end": "2799800"
  },
  {
    "text": "that many processes and then probably especially in the main process like thousand of threats actually view with",
    "start": "2799800",
    "end": "2804839"
  },
  {
    "text": "all the TOs and actually there there are not that many threads per process but",
    "start": "2804839",
    "end": "2810559"
  },
  {
    "text": "because uh generally each process is taken care of itself so you generally",
    "start": "2810559",
    "end": "2816280"
  },
  {
    "text": "have you have IO thread you have the main thread in the browser but that's more concerned with running the UI",
    "start": "2816280",
    "end": "2822119"
  },
  {
    "text": "because there are main threads in the renderers that are you doing the JavaScript so they have their own processes and so this is also a nice way",
    "start": "2822119",
    "end": "2829240"
  },
  {
    "text": "of doing separation in that way so you don't have everybody walking on top of each",
    "start": "2829240",
    "end": "2835599"
  },
  {
    "text": "other yes you said something about thep process GPU communication yes and also",
    "start": "2837200",
    "end": "2844319"
  },
  {
    "text": "something about has toed and",
    "start": "2844319",
    "end": "2850640"
  },
  {
    "text": "then yeah anything that will run on the gpus that would be shaders and stuff that you write yourself uh it will be",
    "start": "2859400",
    "end": "2866319"
  },
  {
    "text": "serialized through that and but it's also interesting that you can have uh different versions of GL on both sides of the pipe because the serialization",
    "start": "2866319",
    "end": "2873200"
  },
  {
    "text": "will hide that from you but it is surprisingly performant and you probably have already seen that running your",
    "start": "2873200",
    "end": "2878359"
  },
  {
    "text": "browsers how performant it is uh so I I would actually like to do a separate talk just talking about that specific",
    "start": "2878359",
    "end": "2884839"
  },
  {
    "text": "pip because I think that's very interesting how how that is possible to do but it's it's generally to protect",
    "start": "2884839",
    "end": "2892599"
  },
  {
    "text": "like in one case is that you don't want to be loading uh the the GPU driver in",
    "start": "2892599",
    "end": "2899000"
  },
  {
    "text": "it's it's it needs a lot of access uh but but at the same time also",
    "start": "2899000",
    "end": "2904720"
  },
  {
    "text": "you can now afford for the uh G you uh process to crash which is kind of an",
    "start": "2904720",
    "end": "2910240"
  },
  {
    "text": "interesting thing like how do you do that and you might have seen it happen yourself any kind of validation of the",
    "start": "2910240",
    "end": "2917079"
  },
  {
    "text": "open Comm that go to the GPU well it has to it has to be parsable",
    "start": "2917079",
    "end": "2923800"
  },
  {
    "text": "right and it has to serialize and it has to deserialize so there's something in there but I have to say I haven't looked that much into that code so that's why I",
    "start": "2923800",
    "end": "2930119"
  },
  {
    "text": "would like to do a talk on it could dig into it because it's very interesting I",
    "start": "2930119",
    "end": "2935200"
  },
  {
    "text": "think graphic graphic gra us not the place where you look for security codes",
    "start": "2935200",
    "end": "2940559"
  },
  {
    "text": "and now when it's available to JavaScript and I get there a whole bunch of buffer overflows errow yeah and and",
    "start": "2940559",
    "end": "2948880"
  },
  {
    "text": "there's actually mechanisms for uh uh blacklisting graphics cards uh so there",
    "start": "2948880",
    "end": "2954440"
  },
  {
    "text": "so there is there is a whole list of of blacklisted graphics cards which will uh",
    "start": "2954440",
    "end": "2959599"
  },
  {
    "text": "might cause you to fall back to software rendering um yeah so there's it's it's",
    "start": "2959599",
    "end": "2965480"
  },
  {
    "text": "it's a it's an issue also because the the different graphic drivers could crash and take down your your GPU",
    "start": "2965480",
    "end": "2971559"
  },
  {
    "text": "process so this is a so this yeah it's a whole talk again I can do this many",
    "start": "2971559",
    "end": "2980520"
  },
  {
    "text": "times any more questions okay well thank you",
    "start": "2980520",
    "end": "2987270"
  },
  {
    "text": "[Applause]",
    "start": "2987270",
    "end": "2991230"
  }
]