[
  {
    "start": "0",
    "end": "155000"
  },
  {
    "text": "okay i think we'll just get started so thank you everybody for coming along today this is doing track six",
    "start": "7279",
    "end": "13280"
  },
  {
    "text": "so normally we'd have more of a geographical field we need to be in a tiny room or kind of a big room or whatever it is it sort of",
    "start": "13280",
    "end": "20000"
  },
  {
    "text": "hasn't yet taken on its own feeling room six yet but i think we're sure we'll get there by the end of the",
    "start": "20000",
    "end": "25519"
  },
  {
    "text": "day um uh we're here to talk about microservices when i'm here to talk about microservices",
    "start": "25519",
    "end": "31679"
  },
  {
    "text": "um and specifically how we find microservice boundaries and i'm really",
    "start": "31679",
    "end": "38800"
  },
  {
    "text": "giving so sharing some of the insights i've had uh from doing research on a new book that",
    "start": "38800",
    "end": "44320"
  },
  {
    "text": "i've been working on and really looking at stuff in the past and trying to work out how that applies",
    "start": "44320",
    "end": "49760"
  },
  {
    "text": "to how we think about microservice architectures today and so that we could be talking about coupling cohesion",
    "start": "49760",
    "end": "56079"
  },
  {
    "text": "information hiding in the context of microservices and why these sort of quite old ideas",
    "start": "56079",
    "end": "62160"
  },
  {
    "text": "are actually still really important for us to understand and take into account when it comes to thinking about how we",
    "start": "62160",
    "end": "67520"
  },
  {
    "text": "find boundaries both in our microservice architecture and maybe just even our also our modular monolithic",
    "start": "67520",
    "end": "73200"
  },
  {
    "text": "architecture as well my name is sam newman i have written books before i wrote this book building microsources",
    "start": "73200",
    "end": "79520"
  },
  {
    "text": "uh that was released early 2015. i'm actually hard at work on the second",
    "start": "79520",
    "end": "84880"
  },
  {
    "text": "edition of this book which will be released um in august of this year my publisher",
    "start": "84880",
    "end": "90079"
  },
  {
    "text": "has basically told me they're releasing whatever i've got whether it's ready or not so i've got to finish it really um there's nothing like a hard deadline",
    "start": "90079",
    "end": "96560"
  },
  {
    "text": "to drive some uh some sort of urgency at the beginning of the year you can get access to an early",
    "start": "96560",
    "end": "102159"
  },
  {
    "text": "version of the second edition if you're interested um there's more information about that over my website i also do uh sort of",
    "start": "102159",
    "end": "108720"
  },
  {
    "text": "training consultancy for clients all over the world who are sort of",
    "start": "108720",
    "end": "114479"
  },
  {
    "text": "looking at microservices considering if they're right for them and for people who are kind of moving through those migrations you know more",
    "start": "114479",
    "end": "120000"
  },
  {
    "text": "about that again information at my website i will caution you that probably at least half of all the people who come to me and say",
    "start": "120000",
    "end": "126000"
  },
  {
    "text": "should i use microservices i end up saying no you shouldn't they're terrible and won't somebody please think of the",
    "start": "126000",
    "end": "131280"
  },
  {
    "text": "children um i also had a new book that came out at the end of last year which was monolith to microservices",
    "start": "131280",
    "end": "137040"
  },
  {
    "text": "and this was a book looking at how you take an existing monolithic architecture and break that apart actually that was",
    "start": "137040",
    "end": "142160"
  },
  {
    "text": "the end of 2019 this came out this is about a year old now i've just learned it's been translated",
    "start": "142160",
    "end": "147360"
  },
  {
    "text": "into japanese so if you do speak japanese you can read this book in japanese uh more information about that again over",
    "start": "147360",
    "end": "153200"
  },
  {
    "text": "there lots of the resources but we're here to talk about you know more interesting things than my side projects",
    "start": "153200",
    "end": "158239"
  },
  {
    "start": "155000",
    "end": "310000"
  },
  {
    "text": "uh and that's to think about well why do we like microservices what is it about microservices",
    "start": "158239",
    "end": "163920"
  },
  {
    "text": "that makes this kind of architecture interesting and the thing that i kind of come back to time and time and",
    "start": "163920",
    "end": "170000"
  },
  {
    "text": "time again is this characteristic of independent deployability this idea that i can make a change to a",
    "start": "170000",
    "end": "177120"
  },
  {
    "text": "micro service in this case the accounts microservice i can change that accounts microservice",
    "start": "177120",
    "end": "182560"
  },
  {
    "text": "and i can deploy a brand new version of that microservice into a production environment",
    "start": "182560",
    "end": "187760"
  },
  {
    "text": "without having to change any other part of my system and it's this independent deployability",
    "start": "187760",
    "end": "193680"
  },
  {
    "text": "that enables us to have like autonomous teams that can be more effective and efficient working more in isolation reducing",
    "start": "193680",
    "end": "199920"
  },
  {
    "text": "coordination between teams this also makes it much easier to achieve things like",
    "start": "199920",
    "end": "204959"
  },
  {
    "text": "near zero or zero downtime deployments which can be critical if you're running say 24 7 software or if you just don't want",
    "start": "204959",
    "end": "211760"
  },
  {
    "text": "to have to deploy software the weekends and the evenings you need rather during the day if you could achieve independent deployability at a logical",
    "start": "211760",
    "end": "218400"
  },
  {
    "text": "level you can then it's much easier to put things into place to ensure that deployment of the software doesn't",
    "start": "218400",
    "end": "223519"
  },
  {
    "text": "interrupt service this idea of independent deployability though really hinges on one key idea",
    "start": "223519",
    "end": "229840"
  },
  {
    "text": "which is in fact maintaining some degree of backwards compatibility so if i make a change to the accounts",
    "start": "229840",
    "end": "236319"
  },
  {
    "text": "microservice here and deploy a new version of it i need to make sure that i haven't broken my upstream consumer",
    "start": "236319",
    "end": "242640"
  },
  {
    "text": "so in this diagram these arrows didn't know kind of dependency so the arrow from the customer service",
    "start": "242640",
    "end": "248319"
  },
  {
    "text": "to the accounts microservice is saying that this upstream consumer the customer microservice is making some",
    "start": "248319",
    "end": "256000"
  },
  {
    "text": "use of the functionality exposed by the accounts microservice so when i make a change to that account",
    "start": "256000",
    "end": "263919"
  },
  {
    "text": "my new version of it i need to maintain compatibility with that upstream consumer",
    "start": "263919",
    "end": "269600"
  },
  {
    "text": "because if i don't maintain compatibility then i'm going to break my upstream consumer and that's going to",
    "start": "269600",
    "end": "274880"
  },
  {
    "text": "undermine my attempt to have independent deployability because i deploy a new version of the accounts microservice and i break the system",
    "start": "274880",
    "end": "283199"
  },
  {
    "text": "and this is the key problem right if you're trying to implement a microsoft architecture is eliminating",
    "start": "283199",
    "end": "289600"
  },
  {
    "text": "these accidental contract breakages it becomes a key part of the sort of the early stage of your",
    "start": "289600",
    "end": "295040"
  },
  {
    "text": "your micro service build out i'd say this is something you have to kind of deal with fairly early on because if you don't deal with this",
    "start": "295040",
    "end": "300639"
  },
  {
    "text": "problem of breaking changes fairly early on uh you don't have a later on to get to right you just give",
    "start": "300639",
    "end": "306080"
  },
  {
    "text": "up on microsoft because it ends up being too hard so independent deployability requires a",
    "start": "306080",
    "end": "311840"
  },
  {
    "start": "310000",
    "end": "350000"
  },
  {
    "text": "degree of stability in the interfaces that our microservice exposes so maintaining a degree of backwards",
    "start": "311840",
    "end": "318960"
  },
  {
    "text": "compatibility is really important to make independent deployability possible",
    "start": "318960",
    "end": "325360"
  },
  {
    "text": "and so here when we do make changes to the contracts of our microservices we're looking to expand them and",
    "start": "325360",
    "end": "332479"
  },
  {
    "text": "do things add new functionality add new optional removing fields because that can end up",
    "start": "332479",
    "end": "338160"
  },
  {
    "text": "breaking things now i mentioned that i've been kind of looking at stuff from olden times which",
    "start": "338160",
    "end": "344479"
  },
  {
    "text": "in computer speak olden times means you know like before 2010 but if you go back a bit",
    "start": "344479",
    "end": "350160"
  },
  {
    "start": "350000",
    "end": "670000"
  },
  {
    "text": "further than that most of our programs were running on mainframes like this this was a you know if i think about uh",
    "start": "350160",
    "end": "357680"
  },
  {
    "text": "80s into uh you know mid 1990s even the mainstay of a lot of uh sort of",
    "start": "357680",
    "end": "364080"
  },
  {
    "text": "enterprise computing was a programs running on mainframes so",
    "start": "364080",
    "end": "370160"
  },
  {
    "text": "companies would have a small number of very large expensive mainframe based machines",
    "start": "370160",
    "end": "375199"
  },
  {
    "text": "and our software would run on these and you know through the 60s and 70s and 80s these mainframes got",
    "start": "375199",
    "end": "380800"
  },
  {
    "text": "more and more powerful the programs that we wanted to run on these mainframes became increasingly more complicated",
    "start": "380800",
    "end": "387919"
  },
  {
    "text": "and so around the sort of in the mid 60s through the 70s people started realizing as our",
    "start": "387919",
    "end": "393360"
  },
  {
    "text": "programs were getting more powerful because the underlying hardware was more powerful we would as we were creating",
    "start": "393360",
    "end": "398800"
  },
  {
    "text": "more and more sophisticated programs we needed ways to make those programs more manageable",
    "start": "398800",
    "end": "405120"
  },
  {
    "text": "uh you know your teams working on them got bigger we had more people trying to collaborate on on these things and so",
    "start": "405120",
    "end": "411840"
  },
  {
    "text": "how do we take these bigger programs and make them easier to work with and easier to develop and this is really where",
    "start": "411840",
    "end": "417599"
  },
  {
    "text": "structured programming and the concept of modular software comes from the idea being that rather than having one big giant program",
    "start": "417599",
    "end": "424560"
  },
  {
    "text": "we instead have that program consisting of multiple modules these modules are things that we can work on in an",
    "start": "424560",
    "end": "430319"
  },
  {
    "text": "independent fashion so i have attention to people working on a a definite set of people working on",
    "start": "430319",
    "end": "436160"
  },
  {
    "text": "module c a different set of people working on module b so we get some sort of independent working as long as the",
    "start": "436160",
    "end": "441919"
  },
  {
    "text": "the interfaces between those modules are the same you can work in parallel to an extent",
    "start": "441919",
    "end": "447120"
  },
  {
    "text": "and then when it comes to assembling our program together we pull those modules together and that's our actual application",
    "start": "447120",
    "end": "452479"
  },
  {
    "text": "deployment it's actually kind of interesting to note that a lot of mainframes would actually allow you to hot swap",
    "start": "452479",
    "end": "457599"
  },
  {
    "text": "these modules which is actually not something that you can do properly on say the jvm or the clr which",
    "start": "457599",
    "end": "463440"
  },
  {
    "text": "is kind of interesting modules like this also of course gave us the ability to reuse things between",
    "start": "463440",
    "end": "468800"
  },
  {
    "text": "programs and we use this idea quite a lot if you think about reusing",
    "start": "468800",
    "end": "473840"
  },
  {
    "text": "you know open third-party code in our applications today but that means you know maybe module a is some common code that i'm",
    "start": "473840",
    "end": "479599"
  },
  {
    "text": "using across multiple programs the problem is this sort of concept of modular programming is quite a weak",
    "start": "479599",
    "end": "485280"
  },
  {
    "text": "concept in most modern programming languages you know the best we've got are things like name spaces and packages and",
    "start": "485280",
    "end": "492080"
  },
  {
    "text": "visibility levels and things like that in the jvm ecosystem they are doing some work to try and improve this concept of",
    "start": "492080",
    "end": "498879"
  },
  {
    "text": "modularization a lot of the work's been done around jigsaw and but really we don't really",
    "start": "498879",
    "end": "504000"
  },
  {
    "text": "understand i don't think modular programming in the way that we maybe had to in the past and the closest we sort of get to is",
    "start": "504000",
    "end": "510240"
  },
  {
    "text": "maybe thinking about reusing a third-party code via you know gems jar files npms nougat whatever it",
    "start": "510240",
    "end": "516320"
  },
  {
    "text": "might be so modular programming has been around for a very very long time and the thinking around how we make",
    "start": "516320",
    "end": "521760"
  },
  {
    "text": "modular programs work has been around for a long period of time it just seems it's not necessarily knowledge that we necessarily take to",
    "start": "521760",
    "end": "528080"
  },
  {
    "text": "heart very often now of course you know mainframes were great but we saw the the underlying",
    "start": "528080",
    "end": "535440"
  },
  {
    "text": "infrastructure started to change the economies of computing shifted it became a lot more cost effective to",
    "start": "535440",
    "end": "541519"
  },
  {
    "text": "go from having a small number of very large machines to shift instead to having a large number of relatively speaking",
    "start": "541519",
    "end": "548480"
  },
  {
    "text": "small machines so moving away from big mainframes to kind of modern um server infrastructure so certainly",
    "start": "548480",
    "end": "556000"
  },
  {
    "text": "when i started uh in the mid 90s uh sort of doing software development in anger when i was actually getting paid for it",
    "start": "556000",
    "end": "562000"
  },
  {
    "text": "that was the time of someone you know campaign i was working at we're just getting rid of their um like their mid-range machines we're replacing it",
    "start": "562000",
    "end": "567600"
  },
  {
    "text": "with server infrastructure nowadays of course you know you wouldn't think anything of having hundreds of blades",
    "start": "567600",
    "end": "572959"
  },
  {
    "text": "uh but obviously most of your infrastructure now is virtualized but this shift away from a small number",
    "start": "572959",
    "end": "578720"
  },
  {
    "text": "of machines to lots of machines also shifted how we thought about building programs rather than having a single application",
    "start": "578720",
    "end": "585760"
  },
  {
    "text": "that ran on a mainframe applicator mainframe maybe consisting of multiple modules we now had lots of machines on our software",
    "start": "585760",
    "end": "592399"
  },
  {
    "text": "from service oriented architecture emerged in a space where we were now trying to deal with what that meant how",
    "start": "592399",
    "end": "598880"
  },
  {
    "text": "do we take an application that now works across lots of different machines and that's really what that service wanted architecture was all",
    "start": "598880",
    "end": "604880"
  },
  {
    "text": "about now micro services i think you could argue is really a style of modular",
    "start": "604880",
    "end": "610240"
  },
  {
    "text": "architecture we're attempting to break the problem space down into modules those modules can be worked on",
    "start": "610240",
    "end": "617200"
  },
  {
    "text": "independently the main difference between say a microsoft modular architecture",
    "start": "617200",
    "end": "622480"
  },
  {
    "text": "and a traditional say mainframe or monolithic modular architecture is that the modules rather than all now",
    "start": "622480",
    "end": "628959"
  },
  {
    "text": "running in the same process space now run on different computers and you know not just different virtual",
    "start": "628959",
    "end": "634800"
  },
  {
    "text": "computers but actually different computers the communication between these modules are now being done via some form",
    "start": "634800",
    "end": "641200"
  },
  {
    "text": "network boundaries this also of course gives us the easy ability to do independent deployability most modern",
    "start": "641200",
    "end": "648800"
  },
  {
    "text": "monolithic modular applications do not allow for hot swapping of modules",
    "start": "648800",
    "end": "655440"
  },
  {
    "text": "the sort of erlang beam vm is a kind of an interesting outline here but you know the ability to dynamically",
    "start": "655440",
    "end": "662000"
  },
  {
    "text": "change code inside say a java processor.net process are extremely limited",
    "start": "662000",
    "end": "667600"
  },
  {
    "text": "so i would argue though that microservices when they're done right are ultimately a form of modular architecture",
    "start": "667600",
    "end": "673360"
  },
  {
    "start": "670000",
    "end": "820000"
  },
  {
    "text": "just one that happens to also bring along all the baggage associated with also being a distributed system",
    "start": "673360",
    "end": "680480"
  },
  {
    "text": "what this means though is that we can look at the work done around modular programming structured programming more broadly and apply some",
    "start": "680480",
    "end": "687360"
  },
  {
    "text": "of those principles and thoughts into how we think about our own microservice architectures",
    "start": "687360",
    "end": "692480"
  },
  {
    "text": "one of the most sort of important concepts in modular programming is this idea of something called",
    "start": "692480",
    "end": "697839"
  },
  {
    "text": "information hiding the original article on the criteria to be used in decomposing systems into modules",
    "start": "697839",
    "end": "704000"
  },
  {
    "text": "it's a bit of a mouthful by david parnas it's probably the seminal paper in this space that really first introduced the concept of information",
    "start": "704000",
    "end": "710880"
  },
  {
    "text": "hiding to the wider world the paper was kind of originally published in 71 internally at least more widely in 72.",
    "start": "710880",
    "end": "716560"
  },
  {
    "text": "david parnass who's still with us as far as i'm aware um he uh was looking at what what",
    "start": "716560",
    "end": "723040"
  },
  {
    "text": "mechanisms should we use for defining a module boundary to best allow us to kind of have that",
    "start": "723040",
    "end": "728320"
  },
  {
    "text": "work done independently have that to to be allowed to sort of scale up our delivery efforts",
    "start": "728320",
    "end": "734079"
  },
  {
    "text": "and the concept of information hiding is what he came up with which was this idea that we should hide as much information",
    "start": "734079",
    "end": "739680"
  },
  {
    "text": "as possible the idea being that if we hide the information within a module boundary we never expose it well",
    "start": "739680",
    "end": "747040"
  },
  {
    "text": "we can change it things that we don't share we can change anything we share over a module boundary",
    "start": "747040",
    "end": "753440"
  },
  {
    "text": "or a micro service boundary inherently becomes part of the contract that we expose to the rest of the world",
    "start": "753440",
    "end": "759360"
  },
  {
    "text": "and the bigger the contract that you have with other external micro services the more challenges you're going to have",
    "start": "759360",
    "end": "765839"
  },
  {
    "text": "in terms of maintaining backwards compatibility interestingly back in 2016 agent collier",
    "start": "765839",
    "end": "772399"
  },
  {
    "text": "uh um who's used to be the um cto at spring source and uh he basically kind",
    "start": "772399",
    "end": "778800"
  },
  {
    "text": "of writes this great blog called the morning paper so agent uh looks at computer science papers and kind of reinterprets them and simply",
    "start": "778800",
    "end": "785440"
  },
  {
    "text": "sort of draws out the interesting insights it can make a lot of computer science papers a lot more approachable as a result",
    "start": "785440",
    "end": "790560"
  },
  {
    "text": "he actually looked back at the various different papers by david pinas and reinterpreted them in terms of well",
    "start": "790560",
    "end": "796000"
  },
  {
    "text": "if i took out the word module put in the word microservices do all of these papers still make sense uh and he sort of came up the answer",
    "start": "796000",
    "end": "801920"
  },
  {
    "text": "that yeah that kind of does there's really interesting insights there um one of the nice things about this blog post is actually david pines",
    "start": "801920",
    "end": "807440"
  },
  {
    "text": "himself found it subsequently and commented on it uh so reinforcing some of agents thoughts",
    "start": "807440",
    "end": "813120"
  },
  {
    "text": "so information hiding well let's look at this in practice what do we mean by information hiding let's look at an example of a micro",
    "start": "813120",
    "end": "818639"
  },
  {
    "text": "service where we're not hiding really any information so here i've got my account microservice and i can these little blue",
    "start": "818639",
    "end": "826079"
  },
  {
    "start": "820000",
    "end": "1187000"
  },
  {
    "text": "dots represent kind of the internal implementation the methods the objects that i might have internally and obviously i've got data",
    "start": "826079",
    "end": "832399"
  },
  {
    "text": "that i'm storing in a database and i've got an external consumer right here i've got the shipping microservice",
    "start": "832399",
    "end": "838160"
  },
  {
    "text": "and i'm allowing that shipping microservice to reach directly into my internal uh into my internal",
    "start": "838160",
    "end": "845519"
  },
  {
    "text": "implementation detail right and the problem is if i change that internal implementation detail",
    "start": "845519",
    "end": "850639"
  },
  {
    "text": "i break compatibility with that external party so what we want to do instead is to hide",
    "start": "850639",
    "end": "856880"
  },
  {
    "text": "that's those secrets um now this is so what i want to do is",
    "start": "856880",
    "end": "862160"
  },
  {
    "text": "be really explicit about what functionality is shared and what functionality is hidden",
    "start": "862160",
    "end": "868639"
  },
  {
    "text": "so in this example here i've decided to hide everything in that green box everything inside that",
    "start": "868639",
    "end": "873680"
  },
  {
    "text": "green box all of that code all those objects the data the way i store data",
    "start": "873680",
    "end": "879199"
  },
  {
    "text": "that cannot be accessed by anybody outside of this microservice boundary nobody can",
    "start": "879199",
    "end": "884399"
  },
  {
    "text": "see it no one can touch it the only part of my micro service that i expose is in that explicit",
    "start": "884399",
    "end": "890880"
  },
  {
    "text": "shared world and this being explicit about what i share and being really limited or pastonius in",
    "start": "890880",
    "end": "898320"
  },
  {
    "text": "what i share is is the kind of the core idea of information hiding by being explicit",
    "start": "898320",
    "end": "905760"
  },
  {
    "text": "about what i share i'm helping not only the consumer in this case the shipping microservice not",
    "start": "905760",
    "end": "910880"
  },
  {
    "text": "exactly what it is they can make use of but i'm also being explicit to the",
    "start": "910880",
    "end": "916639"
  },
  {
    "text": "developer who's working on the accounts microservice in terms of helping them understand what",
    "start": "916639",
    "end": "922399"
  },
  {
    "text": "can change safely and what can't change safely as a developer working on a micro",
    "start": "922399",
    "end": "928079"
  },
  {
    "text": "service it's really important that you have confidence that when you make a change you're not going to break the system",
    "start": "928079",
    "end": "934320"
  },
  {
    "text": "and if you can be really clear to a developer and say look anything you change in this world that's",
    "start": "934320",
    "end": "940320"
  },
  {
    "text": "safe you can change whatever you want in here and it won't affect anybody else but when you go into this part of your",
    "start": "940320",
    "end": "946800"
  },
  {
    "text": "code base anything you change here could cause other issues and now therefore",
    "start": "946800",
    "end": "951839"
  },
  {
    "text": "you need to apply a high degree of care and do due diligence and also this is maybe where you can focus more",
    "start": "951839",
    "end": "957600"
  },
  {
    "text": "of your testing efforts because the implications of getting this wrong are kind of much more significant so",
    "start": "957600",
    "end": "963680"
  },
  {
    "text": "information hiding is about reducing the size of the contract simplifying backwards compatibility",
    "start": "963680",
    "end": "969759"
  },
  {
    "text": "making it easier to maintain compatibility as you change it's about making it easier for a",
    "start": "969759",
    "end": "975279"
  },
  {
    "text": "developer to make changes with confidence as well and so this is just about being explicit",
    "start": "975279",
    "end": "981199"
  },
  {
    "text": "really this is the prime reason why we don't like directly sharing databases when you directly share a database to an",
    "start": "981199",
    "end": "987600"
  },
  {
    "text": "outside party well you're kind of opening up a huge amount of your internal implementation",
    "start": "987600",
    "end": "992959"
  },
  {
    "text": "details there are other challenges as well associated at that time we'll come to later",
    "start": "992959",
    "end": "998160"
  },
  {
    "text": "a really common problem i find with people again this is an early stage problem with microservices is they have this issue of accidental",
    "start": "998160",
    "end": "1004320"
  },
  {
    "text": "breakage and that's because it's not always explicit or clear that a change they're",
    "start": "1004320",
    "end": "1009519"
  },
  {
    "text": "making may actually end up affecting the external api so here's an example a little snippet of code right",
    "start": "1009519",
    "end": "1015519"
  },
  {
    "text": "here is a customer class and we've got fields in this customer class here",
    "start": "1015519",
    "end": "1020560"
  },
  {
    "text": "and it's quite a common way so say i needed to expose that customer over say an api boundary a very kind of",
    "start": "1020560",
    "end": "1027280"
  },
  {
    "text": "simple way of doing this would be to use some kind of say an introspection based stabilizer so an introspection-based serialize is",
    "start": "1027280",
    "end": "1033678"
  },
  {
    "text": "something we'll look at a data structure it will walk the fields of that data structure and convert it into some kind of",
    "start": "1033679",
    "end": "1038880"
  },
  {
    "text": "serializable form so in this case here i could automatically generate a json payload from that just by walking",
    "start": "1038880",
    "end": "1045918"
  },
  {
    "text": "the fields so if i change that code it's going to change the json that i'm exporting",
    "start": "1045919",
    "end": "1052559"
  },
  {
    "text": "so here we can see that i've got an age right so that's one of the fields i'm storing associated with the customer is the age and",
    "start": "1052559",
    "end": "1058160"
  },
  {
    "text": "we can see here that the age comes out in that json payload now as a developer i might go and look",
    "start": "1058160",
    "end": "1063280"
  },
  {
    "text": "at that class and think hang on a minute storing the age of a customer as an",
    "start": "1063280",
    "end": "1068559"
  },
  {
    "text": "integer like this doesn't seem to make any sense because we could open ourselves to problems because if i load the data out the",
    "start": "1068559",
    "end": "1074799"
  },
  {
    "text": "database just before midnight and the next day their age changes because that's their birthday well then this age",
    "start": "1074799",
    "end": "1080320"
  },
  {
    "text": "is now incorrect so it might make more sense for me instead to store their",
    "start": "1080320",
    "end": "1085760"
  },
  {
    "text": "their date of birth and then i could generate the age using code and the age would then always be correct given a",
    "start": "1085760",
    "end": "1091760"
  },
  {
    "text": "point of time and that looks like quite an innocent change until you realize of course that",
    "start": "1091760",
    "end": "1097440"
  },
  {
    "text": "that's now going to change the json that is exposed over an api boundary",
    "start": "1097440",
    "end": "1102640"
  },
  {
    "text": "so if you're going to do things like this if you're going to auto generate serialized payloads like this",
    "start": "1102640",
    "end": "1108080"
  },
  {
    "text": "this code effectively becomes part of your shared world this stuff is no longer hidden you also therefore need to make",
    "start": "1108080",
    "end": "1114400"
  },
  {
    "text": "it very explicit to a developer as to what's going on an example of how you could be very explicit here would be to do something",
    "start": "1114400",
    "end": "1120799"
  },
  {
    "text": "like putting annotations on these fields to make it very clear they are being externally serialized",
    "start": "1120799",
    "end": "1126640"
  },
  {
    "text": "and then hopefully at the very least the you know developer making that change should be i see the annotation realized hang on",
    "start": "1126640",
    "end": "1131679"
  },
  {
    "text": "this might change the excellent contract another way you can handle this is to have sort of explicit data",
    "start": "1131679",
    "end": "1137520"
  },
  {
    "text": "transfer objects the idea being here is that you say i've got my internal representations and my",
    "start": "1137520",
    "end": "1142720"
  },
  {
    "text": "external representations and i'm going to create an object a data transfer object that's going to represent the",
    "start": "1142720",
    "end": "1148720"
  },
  {
    "text": "external view and so i might take my external version like that and then have a way of",
    "start": "1148720",
    "end": "1154640"
  },
  {
    "text": "building a customer dto so in this example here i would have to update the code that creates that",
    "start": "1154640",
    "end": "1160559"
  },
  {
    "text": "customer dto to either kind of create that age based on that date of birth",
    "start": "1160559",
    "end": "1166320"
  },
  {
    "text": "and then if i'm always serializing the customer dto and i maintain stability of that that can help in terms of not making",
    "start": "1166320",
    "end": "1172480"
  },
  {
    "text": "backwards compatible uh backwards incompatible changes so this is all good in terms of being maybe",
    "start": "1172480",
    "end": "1178720"
  },
  {
    "text": "more explicit and helping us avoid making breaking changes but it would also be good if we could have things that catch us if we",
    "start": "1178720",
    "end": "1185120"
  },
  {
    "text": "did make a breaking change what we want to be ideally is a bit more explicit",
    "start": "1185120",
    "end": "1190480"
  },
  {
    "start": "1187000",
    "end": "1315000"
  },
  {
    "text": "about the interactions between things and explicit in a way that means that we could verify programmatically if we've broken",
    "start": "1190480",
    "end": "1198960"
  },
  {
    "text": "an external party now of course we get this a lot of time as a modular programming when we're",
    "start": "1198960",
    "end": "1204080"
  },
  {
    "text": "working saying a modular mole in a in in say a statically typed language so if you're creating a modular",
    "start": "1204080",
    "end": "1209200"
  },
  {
    "text": "monitor using c sharp if you try calling a method that's no longer there the compiler breaks right you get that",
    "start": "1209200",
    "end": "1216159"
  },
  {
    "text": "fast feedback straight away you know that you've made an api change which is breaking right you won't your code will not",
    "start": "1216159",
    "end": "1222320"
  },
  {
    "text": "compile so that's a lot easier dynamic type language is a bit of a bit of a different issue",
    "start": "1222320",
    "end": "1228000"
  },
  {
    "text": "but it'd be nice though for a microservices what if we could have something like the compiler that goes hang on a minute you're calling something doesn't exist",
    "start": "1228000",
    "end": "1234240"
  },
  {
    "text": "anymore this could be an issue so being explicit here is really nice so",
    "start": "1234240",
    "end": "1240080"
  },
  {
    "text": "if we could have an explicit understanding of the contract we expose the more to the point if we could have an explicit",
    "start": "1240080",
    "end": "1246559"
  },
  {
    "text": "understanding about what our stream consumers expect of us so in this case here i want",
    "start": "1246559",
    "end": "1251840"
  },
  {
    "text": "to know what module b wants to use of me and therefore i maintain i make sure i maintain their expectations",
    "start": "1251840",
    "end": "1258799"
  },
  {
    "text": "this will make it much easier for us to understand what we can change what we can't and this is one area where i think",
    "start": "1258799",
    "end": "1264640"
  },
  {
    "text": "schemers are hugely hugely underrated so back into",
    "start": "1264640",
    "end": "1269679"
  },
  {
    "text": "the late 90s into the 2000s the main you know communication protocol that was",
    "start": "1269679",
    "end": "1274880"
  },
  {
    "text": "used in software at the silver cell and architectures was soap and we got you know soap really has died of death",
    "start": "1274880",
    "end": "1280480"
  },
  {
    "text": "for good reasons um it's kind of pretty heavy weight right the problem is",
    "start": "1280480",
    "end": "1285760"
  },
  {
    "text": "when we got rid of soap we also kind of all seem to reject every idea that soap had as well",
    "start": "1285760",
    "end": "1290799"
  },
  {
    "text": "i mean soap made use of an explicit schema the wizzle format wasn't a particularly good schema format in my opinion but it was a",
    "start": "1290799",
    "end": "1298080"
  },
  {
    "text": "schema format we seem to have rejected all those concepts you know most people now are effectively sending untyped json over http",
    "start": "1298080",
    "end": "1305600"
  },
  {
    "text": "and pretending that it's rest um rest by the way doesn't say you can't do",
    "start": "1305600",
    "end": "1310720"
  },
  {
    "text": "schemas you absolutely can do schemas with rest so people choose not to schemas are",
    "start": "1310720",
    "end": "1316320"
  },
  {
    "start": "1315000",
    "end": "1434000"
  },
  {
    "text": "fantastic for helping catch our mistakes if you are just sending plain old json over",
    "start": "1316320",
    "end": "1322000"
  },
  {
    "text": "http you can make use of json schema if you're making use of something like",
    "start": "1322000",
    "end": "1327600"
  },
  {
    "text": "protocol buffers you have to have a schema to define your serialization format",
    "start": "1327600",
    "end": "1332799"
  },
  {
    "text": "why are schemas useful well firstly schemas are explicit secondly they can allow for code",
    "start": "1332799",
    "end": "1337840"
  },
  {
    "text": "generation and thirdly you can programmatically compare schema versions",
    "start": "1337840",
    "end": "1343360"
  },
  {
    "text": "to detect backwards incompatible changes there are programs that exist that will compare json schema versions and tell",
    "start": "1343360",
    "end": "1349840"
  },
  {
    "text": "you if you've made a backwards incompatible change i can do the same thing for protolog using protolog for",
    "start": "1349840",
    "end": "1356000"
  },
  {
    "text": "protocol buffer definitions i could use the kafka schema registry that will actually",
    "start": "1356000",
    "end": "1362320"
  },
  {
    "text": "handle protobuffer json and avro compatibility checking",
    "start": "1362320",
    "end": "1367840"
  },
  {
    "text": "if i'm using the open api specification i can compare two different versions of my open api specification and say if one",
    "start": "1367840",
    "end": "1375120"
  },
  {
    "text": "is backwards compatible or not why is that useful you stick that in your ci build",
    "start": "1375120",
    "end": "1380559"
  },
  {
    "text": "you've made a change to your microservice you've changed the interface you've changed the schema in some way shape or form",
    "start": "1380559",
    "end": "1387120"
  },
  {
    "text": "your ci build can say hang on a minute this is a backwards incompatible change you could fail the build there and then",
    "start": "1387120",
    "end": "1393600"
  },
  {
    "text": "you never even try and deploy that breaking change so information hiding being explicit is",
    "start": "1393600",
    "end": "1399520"
  },
  {
    "text": "useful anyway by being explicit schemers can really help us be explicit by having schemas we get this ability to",
    "start": "1399520",
    "end": "1407200"
  },
  {
    "text": "programmatically verify whether or not backwards compatible changes have been made now i need to be very clear",
    "start": "1407200",
    "end": "1412799"
  },
  {
    "text": "schemas only help you so far they help you with structural breakages and contracts so i could pick up things like okay a",
    "start": "1412799",
    "end": "1420480"
  },
  {
    "text": "method that was there before is no longer there or you've added a new non-nullable a required parameter effectively to an",
    "start": "1420480",
    "end": "1427200"
  },
  {
    "text": "existing method as simple examples that doesn't help you with semantic breakages and behavior",
    "start": "1427200",
    "end": "1433120"
  },
  {
    "text": "and that is where you would need testing now if you have explicit schemas you can focus any of your testing",
    "start": "1433120",
    "end": "1439600"
  },
  {
    "start": "1434000",
    "end": "1510000"
  },
  {
    "text": "efforts for example using something like consumer different contracts just on semantic breakages but if you",
    "start": "1439600",
    "end": "1445679"
  },
  {
    "text": "don't have an explicit schema then you are forced to put a lot more testing around just what should really",
    "start": "1445679",
    "end": "1450799"
  },
  {
    "text": "be the low hanging fruit this is kind of you know analogous to me for for what i'm doing",
    "start": "1450799",
    "end": "1456480"
  },
  {
    "text": "dynamic typing right i really like the nightly type languages i use them a lot but i accept that some of my tests are",
    "start": "1456480",
    "end": "1463440"
  },
  {
    "text": "there to pick up things that would otherwise be picked up by a compiler in a statically typed language and that's an acceptance",
    "start": "1463440",
    "end": "1469279"
  },
  {
    "text": "trade-off for a dynamic type language in my opinion i'm not sure it's an acceptable trade-off for the services architecture so",
    "start": "1469279",
    "end": "1475279"
  },
  {
    "text": "i actually really like having explicit schemas and the key thing is here i'm not saying is it's not about schemas",
    "start": "1475279",
    "end": "1480880"
  },
  {
    "text": "versus schema less it's about an explicit schema even if you don't have an explicit",
    "start": "1480880",
    "end": "1487279"
  },
  {
    "text": "schema you do have a schema because your consumers have expectations about the structure of the data they're",
    "start": "1487279",
    "end": "1493679"
  },
  {
    "text": "going to receive they have expectations about the names of fields and what those fields contain",
    "start": "1493679",
    "end": "1498799"
  },
  {
    "text": "and that exists whether you have an explicit schema or not if you don't have an explicit schema it",
    "start": "1498799",
    "end": "1504720"
  },
  {
    "text": "just comes down to guesswork that's trying to work out what it is that people want so that's the difference right now",
    "start": "1504720",
    "end": "1511200"
  },
  {
    "text": "moving on from information hiding talk more broadly about other concepts in this space of modular programming",
    "start": "1511200",
    "end": "1516960"
  },
  {
    "text": "we can think of some stuff that's come out of the world of structured programming um i like flashing up copies of books like this you can no longer get easily",
    "start": "1516960",
    "end": "1523200"
  },
  {
    "text": "because they're very expensive online disturbingly expensive in fact i i i was trying to track down a copy structured",
    "start": "1523200",
    "end": "1529120"
  },
  {
    "text": "designed by jordan and constantine it was like 90 quid on amazon i would normally in the normal times i'd go to",
    "start": "1529120",
    "end": "1535200"
  },
  {
    "text": "the library of the canterbury university up the road here but not allowed to so i had to make do with kevin henley sending me pdfs uh",
    "start": "1535200",
    "end": "1542320"
  },
  {
    "text": "photographs of the book but anyways loads of great stuff in that comes out of this space and um you know a couple of terms",
    "start": "1542320",
    "end": "1549840"
  },
  {
    "text": "that we've kind of heard before in the scope of microservices come from the world of structure programming and these are two important terms to us",
    "start": "1549840",
    "end": "1555840"
  },
  {
    "text": "which are coupling and cohesion and we typically talk about these concepts a code level or a service",
    "start": "1555840",
    "end": "1562000"
  },
  {
    "text": "architecture level in terms of the desirable properties that we want from these and specifically we talk about the fact",
    "start": "1562000",
    "end": "1568480"
  },
  {
    "text": "that we want low or loose coupling and then we want high or strong cohesion",
    "start": "1568480",
    "end": "1573760"
  },
  {
    "text": "um ideally this is what we want low coupling strong cohesion these terms mean well",
    "start": "1573760",
    "end": "1579120"
  },
  {
    "text": "there are different definitions and more specific definitions of these terms in the context of code",
    "start": "1579120",
    "end": "1584320"
  },
  {
    "text": "i tend to use slight variations of these terms for the service as well because services wasn't quite mapped to the code world but",
    "start": "1584320",
    "end": "1590320"
  },
  {
    "text": "fundamentally when i think about cohesion i'm thinking about the code that changes together states together",
    "start": "1590320",
    "end": "1596640"
  },
  {
    "start": "1592000",
    "end": "1672000"
  },
  {
    "text": "so if i think about an example services architecture where we're seeing weak cohesion uh you know i might think",
    "start": "1596640",
    "end": "1603760"
  },
  {
    "text": "of a sort of layered architecture where the functionality that i'm trying to change is actually spread across the",
    "start": "1603760",
    "end": "1608880"
  },
  {
    "text": "system you know if you find yourself constantly having to make a change in four or five different places",
    "start": "1608880",
    "end": "1614320"
  },
  {
    "text": "that's a sign you've often got weak cohesion distributed monoliths tend to have this property layered architectures",
    "start": "1614320",
    "end": "1619840"
  },
  {
    "text": "often have this property so you know if i want to change the logic of how invoicing is you know invoicing approvals it's",
    "start": "1619840",
    "end": "1626559"
  },
  {
    "text": "done i have to change like five or six different parts of my code base and different services and organize",
    "start": "1626559",
    "end": "1632159"
  },
  {
    "text": "different deployments around that beyond the fact that the work to make those changes is much more increased and more error-prone",
    "start": "1632159",
    "end": "1638240"
  },
  {
    "text": "it's also just a lot more hassle in terms of rolling those changes out so systems have weak cohesion tend to have",
    "start": "1638240",
    "end": "1643440"
  },
  {
    "text": "higher maintenance costs and actually more bugs associated with that as well so we don't like this ideally i'd like",
    "start": "1643440",
    "end": "1648559"
  },
  {
    "text": "to make my change in one place and one place only move on from that the traditional kind of three architectures really suffer from this",
    "start": "1648559",
    "end": "1655679"
  },
  {
    "text": "because if you think about those sort of presentation business data access type layered systems they're really focused on collecting",
    "start": "1655679",
    "end": "1661919"
  },
  {
    "text": "code together that has similar technical functionality rather than focusing on how we actually make changes",
    "start": "1661919",
    "end": "1667360"
  },
  {
    "text": "in the real world where we would often want to cut through those layers now coupling",
    "start": "1667360",
    "end": "1673039"
  },
  {
    "start": "1672000",
    "end": "1752000"
  },
  {
    "text": "is a degree to which changing one thing requires a change in another thing and we'll talk about in microsoft's",
    "start": "1673039",
    "end": "1678799"
  },
  {
    "text": "architecture we can see different types of coupling now you might have heard of a thing called constantine's law which really",
    "start": "1678799",
    "end": "1685279"
  },
  {
    "text": "kind of links these two ideas together and actually i think in a common sense way it makes sense so constantine's law states",
    "start": "1685279",
    "end": "1692159"
  },
  {
    "text": "that a structure is stable if the cohesion is strong and the coupling is low",
    "start": "1692159",
    "end": "1697679"
  },
  {
    "text": "now we would like a stable structure with our micro service architectures because we want stable boundaries",
    "start": "1697679",
    "end": "1703600"
  },
  {
    "text": "now why how these two things linked well if my cohesion is weak",
    "start": "1703600",
    "end": "1710080"
  },
  {
    "text": "then i'm going to have to change lots of things to make a change to my software if i'm having to change lots of things",
    "start": "1710080",
    "end": "1715840"
  },
  {
    "text": "then that would also imply those things are tightly coupled because i'm having to change all these things together",
    "start": "1715840",
    "end": "1721200"
  },
  {
    "text": "so you can't see how these things are related so if you actually improve the cohesion of your software you will tend to also decrease the",
    "start": "1721200",
    "end": "1728480"
  },
  {
    "text": "coupling and we want decreased coupling because we want independent deployability",
    "start": "1728480",
    "end": "1733679"
  },
  {
    "text": "so these kind of ideas are related so if you improve the the cohesion of your system you will likely",
    "start": "1733679",
    "end": "1739520"
  },
  {
    "text": "also improve the coupling as well when if you try and want to if you want to improve",
    "start": "1739520",
    "end": "1744640"
  },
  {
    "text": "how loosely coupled your system is you will actually end up improving the cohesion as well these two things are",
    "start": "1744640",
    "end": "1749840"
  },
  {
    "text": "inextricably linked then it does come to coupling you know",
    "start": "1749840",
    "end": "1755039"
  },
  {
    "start": "1752000",
    "end": "1841000"
  },
  {
    "text": "there are different types of coupling out there i'm not talking about temporal coupling or kind of runtime coupling really here",
    "start": "1755039",
    "end": "1761360"
  },
  {
    "text": "i'm talking kind of here about coupling in terms of one thing depending on another in terms of the functionality",
    "start": "1761360",
    "end": "1766720"
  },
  {
    "text": "that it makes use of there would turn it there was an extent to which there will always be some coupling in a microservice architecture",
    "start": "1766720",
    "end": "1773760"
  },
  {
    "text": "microservices fundamentally exist to be called or be made use of by other microservices so",
    "start": "1773760",
    "end": "1779679"
  },
  {
    "text": "there is an extent to which there is an inescapable degree of coupling what we're trying to do though is",
    "start": "1779679",
    "end": "1785200"
  },
  {
    "text": "minimize it and avoid the more egregious forms of coupling so i'm just going to look at three",
    "start": "1785200",
    "end": "1790320"
  },
  {
    "text": "different types of coupling that you might see in a microsoft architecture and there are others but these are kind of just three on a",
    "start": "1790320",
    "end": "1795679"
  },
  {
    "text": "highlight for this talk and we're going to look at domain coupling common coupling and content coupling",
    "start": "1795679",
    "end": "1802960"
  },
  {
    "text": "and what we're going to see is as we go kind of from left to right these forms of coupling get worse",
    "start": "1802960",
    "end": "1808000"
  },
  {
    "text": "and so when you encounter the kind of coupling that happens more towards the end of this spectrum you're going to want to put things into",
    "start": "1808000",
    "end": "1813200"
  },
  {
    "text": "place that sort of pulls you back towards towards the left if that makes sense domain coupling is",
    "start": "1813200",
    "end": "1819039"
  },
  {
    "text": "kind of this is the kind of coupling you're going to always see a little bit of and that's just really the idea that one",
    "start": "1819039",
    "end": "1825919"
  },
  {
    "text": "microservice is coupled to the domain functionality exposed by another microservice if you're a rest",
    "start": "1825919",
    "end": "1832880"
  },
  {
    "text": "head or a rest of areas some people call themselves who would really like rest you know you know about all about the domain application protocol which is",
    "start": "1832880",
    "end": "1838799"
  },
  {
    "text": "effectively saying you have a domain application protocol so in this example here i've got an",
    "start": "1838799",
    "end": "1844000"
  },
  {
    "start": "1841000",
    "end": "1971000"
  },
  {
    "text": "order processor microservice and that has interactions with two other microservices we've got the warehouse",
    "start": "1844000",
    "end": "1850480"
  },
  {
    "text": "and the payment so the order process here goes to the warehouse microservice and it makes use of the ability to",
    "start": "1850480",
    "end": "1855840"
  },
  {
    "text": "reserve stock and the payment microservice we use that to be able to take payment",
    "start": "1855840",
    "end": "1862000"
  },
  {
    "text": "now the payment microservices where all the logic and behavior for payment management lives so we in the order process that can't do",
    "start": "1862000",
    "end": "1868320"
  },
  {
    "text": "that we have to delegate that task some to another party we're asking the payment microsoft to do",
    "start": "1868320",
    "end": "1873360"
  },
  {
    "text": "that job for us in the same way as the warehouse manages stock so for us to do our jobs we are kind of",
    "start": "1873360",
    "end": "1878399"
  },
  {
    "text": "coupled to that degree in as much as we have to have some degree of dependency on that functionality happening",
    "start": "1878399",
    "end": "1884240"
  },
  {
    "text": "so this is what i call domain coupling so this order processor has domain coupling to the warehouse and",
    "start": "1884240",
    "end": "1889600"
  },
  {
    "text": "the payment microservice now the warehouse the payment microservice don't use each other they don't make use of each other's",
    "start": "1889600",
    "end": "1895120"
  },
  {
    "text": "functionality they're not even aware of each other there is no domain coupling between those two things",
    "start": "1895120",
    "end": "1900720"
  },
  {
    "text": "so if i go and change how payments are are created and maybe change the the",
    "start": "1900720",
    "end": "1906559"
  },
  {
    "text": "functionality or the interface that defines how payments are done by consumers",
    "start": "1906559",
    "end": "1912480"
  },
  {
    "text": "that could end up breaking functionality in the order processor but it would have zero effect on the",
    "start": "1912480",
    "end": "1918000"
  },
  {
    "text": "warehouse microservice so again we can try and reduce domain coupling and still some things to watch",
    "start": "1918000",
    "end": "1923039"
  },
  {
    "text": "for whenever you see a micro service that seems to have domain coupling on a load of other micro services",
    "start": "1923039",
    "end": "1928960"
  },
  {
    "text": "that can sometimes be the sign that that thing is doing too much it's often also a sign of like maybe an",
    "start": "1928960",
    "end": "1934080"
  },
  {
    "text": "orchestrated process something like an order processor looks a lot like an order an orchestrator an orchestrator",
    "start": "1934080",
    "end": "1940240"
  },
  {
    "text": "is inherently you know as part of a certain part of bpm type solution or as an orchestrated",
    "start": "1940240",
    "end": "1945440"
  },
  {
    "text": "workflow will always have more domain coupling than other micro services so it's when you see lots of outbound",
    "start": "1945440",
    "end": "1952320"
  },
  {
    "text": "dependencies it's not always something that has to be fixed but it is something that's going to want",
    "start": "1952320",
    "end": "1958320"
  },
  {
    "text": "a little bit more care and attention and a bit more observation and you can investigate it you know if i'm looking",
    "start": "1958320",
    "end": "1963679"
  },
  {
    "text": "at an architecture you always start looking for those boxes that have the most outward bound arrows and work out is it doing too much maybe we should",
    "start": "1963679",
    "end": "1969120"
  },
  {
    "text": "split it apart so moving on from domain coupling we've got kind of a different type of coupling",
    "start": "1969120",
    "end": "1974640"
  },
  {
    "start": "1971000",
    "end": "2131000"
  },
  {
    "text": "called common coupling and this is where we've got multiple micro services which are all making use of say a common",
    "start": "1974640",
    "end": "1981519"
  },
  {
    "text": "data store or this could be a common cache uh or like this could be we're making",
    "start": "1981519",
    "end": "1986640"
  },
  {
    "text": "use of say a common redis cache or even like a shared database so in this example here we're kind of",
    "start": "1986640",
    "end": "1993120"
  },
  {
    "text": "managing the stock levels in this sort of externally addressable you know publicly",
    "start": "1993120",
    "end": "1999679"
  },
  {
    "text": "in terms of public in terms of our within our network perimeter adjustable stock levels",
    "start": "1999679",
    "end": "2005440"
  },
  {
    "text": "and the warehouse manages those stock levels but basically he's updating that in a an externally addressable database",
    "start": "2005440",
    "end": "2013519"
  },
  {
    "text": "so here the order processor can come and read that those stock levels from that data store the forecasting service here which is",
    "start": "2013519",
    "end": "2019519"
  },
  {
    "text": "going to work out how many copies of i don't know justin bieber's greatest hits we should be buying are going to be",
    "start": "2019519",
    "end": "2024559"
  },
  {
    "text": "looking at those stock levels as well now this is a stronger degree of coupling the first is we're coupled on",
    "start": "2024559",
    "end": "2030000"
  },
  {
    "text": "data not behavior really here but with the big issue the reason why this coupling is stronger",
    "start": "2030000",
    "end": "2035200"
  },
  {
    "text": "and maybe there before potentially more problematic is the a change to that common data stores if",
    "start": "2035200",
    "end": "2041600"
  },
  {
    "text": "we change how stock levels were handled we could end up having a breaking impact",
    "start": "2041600",
    "end": "2046640"
  },
  {
    "text": "on a lot of the other micro services around us and so this type of coupling is a little bit more worrisome",
    "start": "2046640",
    "end": "2053679"
  },
  {
    "text": "so this is common couplings this is what happens when you have big giant shared databases and of course that in the the degree of",
    "start": "2053679",
    "end": "2060240"
  },
  {
    "text": "common coupling only increases as the as the complexity of the data increases",
    "start": "2060240",
    "end": "2066800"
  },
  {
    "text": "if we're just saying coupled on a simple table that has the idea of the item and how many items",
    "start": "2066800",
    "end": "2072240"
  },
  {
    "text": "to stock that's a fairly simple and pretty stable structure but when it's a much more complex data model",
    "start": "2072240",
    "end": "2078158"
  },
  {
    "text": "that we have coupling on we're much more vulnerable to changing that data structure the simpler things",
    "start": "2078159",
    "end": "2083679"
  },
  {
    "text": "are the easier it is to maintain stability so if you do have some degree of common coupling a couple of things would be to",
    "start": "2083679",
    "end": "2089679"
  },
  {
    "text": "make sure that that's as simple a data structure as possible and that's less likely problems we could",
    "start": "2089679",
    "end": "2095358"
  },
  {
    "text": "also potentially replace common coupling here with domain coupling for example we could say well",
    "start": "2095359",
    "end": "2102000"
  },
  {
    "text": "actually we're going to move stock levels to being an internal concern of the warehouse and then you're forecasting an order",
    "start": "2102000",
    "end": "2108000"
  },
  {
    "text": "processor would have to go to the warehouse to ask for stock levels by hiding that stock level management",
    "start": "2108000",
    "end": "2114000"
  },
  {
    "text": "inside the warehouse we allow the warehouse to implement information hiding about how stock",
    "start": "2114000",
    "end": "2119440"
  },
  {
    "text": "levels are done whereas if we allow people to directly access a redis cache or a database table we haven't",
    "start": "2119440",
    "end": "2126480"
  },
  {
    "text": "really hidden as much of that implementation details we might like it's kind of the worst and most",
    "start": "2126480",
    "end": "2132640"
  },
  {
    "start": "2131000",
    "end": "2408000"
  },
  {
    "text": "egregious form of con of coupling is called content coupling and that's where",
    "start": "2132640",
    "end": "2138240"
  },
  {
    "text": "one party is coupled to the internal implementation detail of",
    "start": "2138240",
    "end": "2143359"
  },
  {
    "text": "another and the internal data of another and the most common example of that is when we see",
    "start": "2143359",
    "end": "2149839"
  },
  {
    "text": "things that are talking that are basically coupled to an internal database in this example here i've got my shipping microservice and ideally when",
    "start": "2149839",
    "end": "2156240"
  },
  {
    "text": "we think about microservice if a micro service needs to store data or state",
    "start": "2156240",
    "end": "2161520"
  },
  {
    "text": "for some persistent you know for persistent durable storage then that should be hidden from the outside world so in this example the",
    "start": "2161520",
    "end": "2168800"
  },
  {
    "text": "order processor is actually being well behaved it's coming to the order microservice to",
    "start": "2168800",
    "end": "2175920"
  },
  {
    "text": "request state changes maybe in an order saying can you move order one two three from status placed",
    "start": "2175920",
    "end": "2181440"
  },
  {
    "text": "to status fulfilled for example and the order microsoft when it receives that request is able to say okay well",
    "start": "2181440",
    "end": "2187599"
  },
  {
    "text": "you've asked me to take i order one two three which is and you want it to go and stay fulfilled well",
    "start": "2187599",
    "end": "2192720"
  },
  {
    "text": "it's currently in state placed going from state place to state fulfilled that's an allowable",
    "start": "2192720",
    "end": "2198240"
  },
  {
    "text": "state transition so yes i'm happy for you to do that that's what we want right because we want our code to control the allowable",
    "start": "2198240",
    "end": "2204320"
  },
  {
    "text": "state transitions but making us a whole big black box we get to get to do that and also we don't need to worry exactly about how that",
    "start": "2204320",
    "end": "2210240"
  },
  {
    "text": "data is stored and managed now but then we've got a badly behaved participant here",
    "start": "2210240",
    "end": "2215680"
  },
  {
    "text": "the warehouse microservice and the warehouse microservice somehow has been granted direct access to our database",
    "start": "2215680",
    "end": "2222320"
  },
  {
    "text": "so now we've completely bypassed information hiding you can do some types of information",
    "start": "2222320",
    "end": "2228160"
  },
  {
    "text": "hiding with direct database access access so some of the things you can do to sort of do implement some form of",
    "start": "2228160",
    "end": "2234320"
  },
  {
    "text": "domain of information hiding include things like having restricted",
    "start": "2234320",
    "end": "2239680"
  },
  {
    "text": "database accounts so for example you could do things like saying okay this account can only see",
    "start": "2239680",
    "end": "2244800"
  },
  {
    "text": "these tables that can help a bit a better version of information hiding happening directly at",
    "start": "2244800",
    "end": "2251119"
  },
  {
    "text": "a database here would be to do something like using views so i would create a dedicated schema",
    "start": "2251119",
    "end": "2256160"
  },
  {
    "text": "which is just a set of views onto this database because then i can decide exactly what is exposed so database views can help if",
    "start": "2256160",
    "end": "2262640"
  },
  {
    "text": "you are do you still want to do direct database access but the big problem here is not",
    "start": "2262640",
    "end": "2268240"
  },
  {
    "text": "necessarily the reads but the rights so what if the warehouse microservice is granted right access and",
    "start": "2268240",
    "end": "2274320"
  },
  {
    "text": "is allowed to go and change the status of an order so maybe it wants to be able to change",
    "start": "2274320",
    "end": "2279359"
  },
  {
    "text": "the status of an order from state fulfilled to state shipped well who decides if that's an",
    "start": "2279359",
    "end": "2284720"
  },
  {
    "text": "allowable transition well if i'm directly writing into this database who decides",
    "start": "2284720",
    "end": "2290240"
  },
  {
    "text": "what is an allowable transition is part of that functionalities in the warehouse",
    "start": "2290240",
    "end": "2295599"
  },
  {
    "text": "and part of that functionality is in the order so both the order of microservice code and now the warehouse code both now",
    "start": "2295599",
    "end": "2302000"
  },
  {
    "text": "has logic around how the same piece of state is allowed to be changed",
    "start": "2302000",
    "end": "2307680"
  },
  {
    "text": "that's an example of weak cohesion i've got duke you know i've got kind of overlapping functionality now hopefully",
    "start": "2307680",
    "end": "2315119"
  },
  {
    "text": "the logic or the state machine that we've created around how we manage these orders is the same in warehouse and order but",
    "start": "2315119",
    "end": "2321920"
  },
  {
    "text": "what if it isn't we may now get warehouse making changes to state in a way which is actually invalid from",
    "start": "2321920",
    "end": "2328880"
  },
  {
    "text": "the point of view of how order sees the world and this is one of the big issues when you allow direct database access it's",
    "start": "2328880",
    "end": "2334400"
  },
  {
    "text": "not just that you're kind of being a lot more unclear as to what could be changed is actually now can often get inconsistent behavior",
    "start": "2334400",
    "end": "2341599"
  },
  {
    "text": "around how state is managed and that's really really problematic there's a reason why this is other this",
    "start": "2341599",
    "end": "2347359"
  },
  {
    "text": "is also known as pathological coupling this is the kind of the world's most egregious form of coupling",
    "start": "2347359",
    "end": "2354800"
  },
  {
    "text": "so content coupling is really really bad if you can write in directly right into",
    "start": "2354800",
    "end": "2360079"
  },
  {
    "text": "someone's internal data state it's better if you can do really right but should be avoided if you deserve",
    "start": "2360079",
    "end": "2365760"
  },
  {
    "text": "read-only it can be avoided with databases this can be somewhat alleviated using things like database",
    "start": "2365760",
    "end": "2371359"
  },
  {
    "text": "views but again that's something to solve the read issues if warehouse does actually",
    "start": "2371359",
    "end": "2376880"
  },
  {
    "text": "need to update state in order it should actually just do what your order processor does",
    "start": "2376880",
    "end": "2382960"
  },
  {
    "text": "and goes to that well-defined service interface and that will allow us to make sure that we've got a consistent set of",
    "start": "2382960",
    "end": "2388560"
  },
  {
    "text": "code within order around the allowable state transitions of this particular record this will make our code much simpler and",
    "start": "2388560",
    "end": "2395040"
  },
  {
    "text": "easier to understand much more error prone to reducing responsibility to the warehouse microservice and once again",
    "start": "2395040",
    "end": "2401200"
  },
  {
    "text": "gets us using domain coupling which is much less problematic in terms of coupling of our",
    "start": "2401200",
    "end": "2407440"
  },
  {
    "text": "system so just to reiterate we kind of got different types of coupling in microservice architecture",
    "start": "2407440",
    "end": "2413760"
  },
  {
    "text": "and there's always going to be some we're trying to reduce it where possible if you see a lot of say domain coupling",
    "start": "2413760",
    "end": "2419440"
  },
  {
    "text": "going on from what microservice it might be cause in further investigation but in general when you're trying to make your systems",
    "start": "2419440",
    "end": "2424800"
  },
  {
    "text": "more loosely coupled you're going to be looking for stuff on the right side of this and trying to push it towards the left",
    "start": "2424800",
    "end": "2429839"
  },
  {
    "text": "and so sometimes by dragging things further towards the left you can improve the situation so sometimes you can make this better by",
    "start": "2429839",
    "end": "2436560"
  },
  {
    "text": "improving the coupling and sometimes you can make this better by improving the cohesion they are both linked",
    "start": "2436560",
    "end": "2442960"
  },
  {
    "text": "just to summarize right you know information hiding is super important yes it's been around since the 1970s",
    "start": "2442960",
    "end": "2448960"
  },
  {
    "text": "doesn't mean it's wrong i mean we're not you know i'm not wearing flares but i am doing information hiding",
    "start": "2448960",
    "end": "2454400"
  },
  {
    "text": "it's a really simple idea which i think too many people overlook we are actually incredibly bad at doing",
    "start": "2454400",
    "end": "2460640"
  },
  {
    "text": "information hiding within monolithic code which is a problem we should be better at that but i think it's especially important it",
    "start": "2460640",
    "end": "2467119"
  },
  {
    "text": "comes to microservice architectures a little simple tip for thinking about create information hiding",
    "start": "2467119",
    "end": "2472880"
  },
  {
    "text": "the first class consideration of microservice architecture is never expose anything outside your",
    "start": "2472880",
    "end": "2478960"
  },
  {
    "text": "microservice boundary and someone asks for it start from that viewpoint think about",
    "start": "2478960",
    "end": "2484319"
  },
  {
    "text": "what people want from the outside in not the inside out i see a lot of people violate information hiding when",
    "start": "2484319",
    "end": "2489760"
  },
  {
    "text": "they do things like they don't actually talk to the consumers their microservice they just look at their data model and create an",
    "start": "2489760",
    "end": "2494880"
  },
  {
    "text": "api that map said to make their data model that's sort of akin to having a uh an object in an object touring system",
    "start": "2494880",
    "end": "2501280"
  },
  {
    "text": "where you've said oh i'm doing encapsulation because all my fields are private but then you put public getters and setters on it",
    "start": "2501280",
    "end": "2506880"
  },
  {
    "text": "that's not information hiding that's not encapsulation so never expose anything unless someone",
    "start": "2506880",
    "end": "2512319"
  },
  {
    "text": "really really wants it that keeps your interface small it makes it easier to maintain backwards",
    "start": "2512319",
    "end": "2517680"
  },
  {
    "text": "compatibility it also makes it much more explicit to you as a developer as to what parts of your system you can change",
    "start": "2517680",
    "end": "2524079"
  },
  {
    "text": "safely information hiding is as much about being explicit about what is safe to change",
    "start": "2524079",
    "end": "2530319"
  },
  {
    "text": "and what isn't safe to change when it comes to coupling some forms of coupling are worse than others",
    "start": "2530319",
    "end": "2535440"
  },
  {
    "text": "and where possible you're going to try and limit it to domain coupling going via these well-defined service",
    "start": "2535440",
    "end": "2540560"
  },
  {
    "text": "interfaces it will clean up your dependencies it will make your coupling a lot looser",
    "start": "2540560",
    "end": "2546000"
  },
  {
    "text": "but basically all of these ideas together they have as much value when it comes to building monolithic",
    "start": "2546000",
    "end": "2551440"
  },
  {
    "text": "modular software as it does with becoming a microservice architecture and if you're good at modular monoliths",
    "start": "2551440",
    "end": "2557520"
  },
  {
    "text": "you'll already be in a good place to build a microsoft architecture but microservices really have all the",
    "start": "2557520",
    "end": "2562720"
  },
  {
    "text": "complexity of modular software and all the complexity of distributed systems",
    "start": "2562720",
    "end": "2567760"
  },
  {
    "text": "and this is also why i don't think microservices should be the default choice for people unfortunately i think most people say okay",
    "start": "2567760",
    "end": "2573280"
  },
  {
    "text": "i'm building a new system well it's going to be microservices and it's like no no no actually why right i my default position",
    "start": "2573280",
    "end": "2580800"
  },
  {
    "text": "with microservices is i have to be convinced that microservices are a good idea",
    "start": "2580800",
    "end": "2586720"
  },
  {
    "text": "before i'll do them and that's how i work with my clients that's how i work on the projects i build you know and you don't have to listen to",
    "start": "2586720",
    "end": "2592319"
  },
  {
    "text": "me but i am the person that all the books about it so if you're thinking about microservices great but really think about modular",
    "start": "2592319",
    "end": "2598000"
  },
  {
    "text": "architectures as much as anything uh and if you can do modular architecture as well then you might be in a good place for microservices",
    "start": "2598000",
    "end": "2604480"
  },
  {
    "text": "and then all you've got to do is get your head around distributed systems anyway if you want more information",
    "start": "2604480",
    "end": "2610160"
  },
  {
    "start": "2608000",
    "end": "2639000"
  },
  {
    "text": "about anything i shared um you can go to my website um those slides are available for this talk are",
    "start": "2610160",
    "end": "2616000"
  },
  {
    "text": "over at my website in the talk section there's also information there about when the uh second edition of building",
    "start": "2616000",
    "end": "2623200"
  },
  {
    "text": "microservices will be released and how you can read an early version of that um but",
    "start": "2623200",
    "end": "2628480"
  },
  {
    "text": "we've got a bit of time i think we've got about uh 10-15 minutes so i'm very happy to take any questions",
    "start": "2628480",
    "end": "2634079"
  },
  {
    "text": "if anyone's got any stop sharing on my screen uh so does anyone have any questions for",
    "start": "2634079",
    "end": "2641440"
  },
  {
    "start": "2639000",
    "end": "2968000"
  },
  {
    "text": "me you can um you've got you've got three",
    "start": "2641440",
    "end": "2647040"
  },
  {
    "text": "options at this point for asking me questions so don't say that i'm giving it you could ask me questions from slack",
    "start": "2647040",
    "end": "2652800"
  },
  {
    "text": "you can ask me questions on chat on the webex or you can just unmute yourself",
    "start": "2652800",
    "end": "2658000"
  },
  {
    "text": "and use your human or robotic voice to ask me questions i don't mind",
    "start": "2658000",
    "end": "2663839"
  },
  {
    "text": "so my question um around schema checking so i'm assuming schema checking applies to",
    "start": "2664319",
    "end": "2670480"
  },
  {
    "text": "the clients consuming the apis as well as api to api communication",
    "start": "2670480",
    "end": "2676720"
  },
  {
    "text": "i mean i would start schema compatibility checking at build check-in time yeah right so if a",
    "start": "2676720",
    "end": "2682800"
  },
  {
    "text": "client if at run time as a client you find out the schema you're reading is incompatible with your",
    "start": "2682800",
    "end": "2688480"
  },
  {
    "text": "ability to read it it's already too late yeah so you might want to do that as well to help you diagnose what's gone",
    "start": "2688480",
    "end": "2695359"
  },
  {
    "text": "wrong in production like i'm just this is just a wrong payload something's clearly gone wrong but if you can do that schema",
    "start": "2695359",
    "end": "2701440"
  },
  {
    "text": "compatibility checking start the moment you check coding of your microservice you can do the it's not an intensive",
    "start": "2701440",
    "end": "2708480"
  },
  {
    "text": "activity i'm literally you're running a program across two text files and you're saying yes or no it with",
    "start": "2708480",
    "end": "2714560"
  },
  {
    "text": "lightning fast and it can happen on your laptop even before you check in so i'd start there",
    "start": "2714560",
    "end": "2720800"
  },
  {
    "text": "okay thank you cool uh had a question here from david via",
    "start": "2720800",
    "end": "2726720"
  },
  {
    "text": "the chat it feels like i'm on sort of like some sort of radio phoning so we've got david here on the texts and he's uh he's in",
    "start": "2726720",
    "end": "2733599"
  },
  {
    "text": "berkshire he's saying do you see things like coupling etc as being different when we were talking about services",
    "start": "2733599",
    "end": "2739680"
  },
  {
    "text": "triggering events to other services eg exposes service bus topic style subscription",
    "start": "2739680",
    "end": "2745440"
  },
  {
    "text": "a really good question david thanks for your call um so i think in a way i find that event",
    "start": "2745440",
    "end": "2750880"
  },
  {
    "text": "driven architectures in general tend to be much more loose coupled because the coupling goes from being",
    "start": "2750880",
    "end": "2757680"
  },
  {
    "text": "between a service interface and another service interface and it instead becomes towards an event",
    "start": "2757680",
    "end": "2763200"
  },
  {
    "text": "so as a microservice if i admit an event remember events are really all about a shift in",
    "start": "2763200",
    "end": "2768319"
  },
  {
    "text": "intent when i admit an event i'm not telling anybody to do something",
    "start": "2768319",
    "end": "2773680"
  },
  {
    "text": "i'm telling the world and anyone that cares this thing has happened it is up to",
    "start": "2773680",
    "end": "2779200"
  },
  {
    "text": "other people to decide what they do so from the point of view of omitting an event the only kind of",
    "start": "2779200",
    "end": "2784560"
  },
  {
    "text": "care i have from the point of view the person admitting the event is the event the event gets emitted and broadcast in the way that i want",
    "start": "2784560",
    "end": "2791280"
  },
  {
    "text": "then the responsibilities are on the on the consumer side so there the coupling is not with my",
    "start": "2791280",
    "end": "2796960"
  },
  {
    "text": "micro service the coupling on the consumer side in an event-driven system is on the event that",
    "start": "2796960",
    "end": "2802319"
  },
  {
    "text": "i have broadcast if they only ever consume one of the 25 different events that i expose they're",
    "start": "2802319",
    "end": "2808240"
  },
  {
    "text": "only kind of coupled on one of those events so for me an event given architecture when done with that kind of style of",
    "start": "2808240",
    "end": "2814240"
  },
  {
    "text": "event-driven architecture will inherently reduce the amount of coupling you've got",
    "start": "2814240",
    "end": "2819839"
  },
  {
    "text": "it then gives you all the pain and suffering of an adventure of an architecture i think it's worth it i think eventual systems are the best um",
    "start": "2819839",
    "end": "2826400"
  },
  {
    "text": "but you know it is it definitely definitely helps around coupling so i think it shifts that relationship uh with",
    "start": "2826400",
    "end": "2833440"
  },
  {
    "text": "request response based systems if i go and ask you to do something i've got to know who you are",
    "start": "2833440",
    "end": "2838720"
  },
  {
    "text": "and if i'm calling an api it can be harder to know exactly what parts of api i'm using so i think it's a little bit more",
    "start": "2838720",
    "end": "2844800"
  },
  {
    "text": "inherently coupled obviously in a bad way i hope that kind of makes sense david",
    "start": "2844800",
    "end": "2851680"
  },
  {
    "text": "okay all right guys uh yeah first time caller long time",
    "start": "2851839",
    "end": "2857040"
  },
  {
    "text": "listener to your show yeah um uh do you think that this could the concerns around uh entity",
    "start": "2857040",
    "end": "2864480"
  },
  {
    "text": "versus process style service says are really just a kind of specialization of this problem",
    "start": "2864480",
    "end": "2870559"
  },
  {
    "text": "you know that concern that those people write services they're just crud based right i think it's a specialization they're",
    "start": "2870559",
    "end": "2875760"
  },
  {
    "text": "kind of coupling issues 100 yeah i think the the and i think going back and looking at all this stuff and",
    "start": "2875760",
    "end": "2882720"
  },
  {
    "text": "you know kind of reinforced that idea and you know i always like had a gut reaction against entity based services you know the crud",
    "start": "2882720",
    "end": "2890160"
  },
  {
    "text": "wrapper and part of it was that that whole well it's just like an object with private fields and public getters and",
    "start": "2890160",
    "end": "2896000"
  },
  {
    "text": "setters but it really does come back to this where is the behavior",
    "start": "2896000",
    "end": "2901680"
  },
  {
    "text": "where is the logic if i'm just as an entity micro service it's just exposing",
    "start": "2901680",
    "end": "2906960"
  },
  {
    "text": "apis that just let you effectively get set well the logic around how that is done is now spread amongst my consumers",
    "start": "2906960",
    "end": "2913599"
  },
  {
    "text": "best case i've got one consumer that might use those those fee those those apis but that's not that's not",
    "start": "2913599",
    "end": "2920319"
  },
  {
    "text": "likely right likely i've got multiple consumers that making use of it and now the logic associated with how",
    "start": "2920319",
    "end": "2926240"
  },
  {
    "text": "this state change is spread across all these consumers and what's that that's weak cohesion",
    "start": "2926240",
    "end": "2932240"
  },
  {
    "text": "what does weak cohesion give us according to constantine's law tight coupling yeah so yeah that that",
    "start": "2932240",
    "end": "2938160"
  },
  {
    "text": "for me they're all there's all these kind of things you can pull apart i think it's very difficult though when you sort of encounter that issue",
    "start": "2938160",
    "end": "2944559"
  },
  {
    "text": "say we're talking to a developer or an architect you see that problem i don't try and have the big",
    "start": "2944559",
    "end": "2950319"
  },
  {
    "text": "conversation about coupling and cohesion constantine's law and stuff because it's like they start yawning and you know but you",
    "start": "2950319",
    "end": "2956079"
  },
  {
    "text": "you try and make it a bit more concrete it's like well who makes a decision about what can change what happens if you change how that",
    "start": "2956079",
    "end": "2961520"
  },
  {
    "text": "stuff is done and you talk about the cost of change but absolutely i think those related",
    "start": "2961520",
    "end": "2967200"
  },
  {
    "start": "2968000",
    "end": "3176000"
  },
  {
    "text": "um okay cool any other questions thoughts",
    "start": "2968480",
    "end": "2973359"
  },
  {
    "text": "yes sam um so at what point do we start considering microservices then over just modularize",
    "start": "2974319",
    "end": "2981599"
  },
  {
    "text": "modularization of the code",
    "start": "2981599",
    "end": "2984880"
  },
  {
    "text": "you know what's your thought process on that my date my kind of the first question i always ask when i get random chat into a new team about",
    "start": "2987280",
    "end": "2993680"
  },
  {
    "text": "this is now we're doing microservices it's like well why right when you think about moving to a micro service architecture there's got",
    "start": "2993680",
    "end": "3000000"
  },
  {
    "text": "to be something wrong with your current architecture that you can't fix",
    "start": "3000000",
    "end": "3005040"
  },
  {
    "text": "and that you think microservices are going to address so i always try and start with the outcome what is the outcome that you're trying",
    "start": "3005040",
    "end": "3010960"
  },
  {
    "text": "to achieve with your new style of architecture that you can't currently do with your current",
    "start": "3010960",
    "end": "3016160"
  },
  {
    "text": "modular architecture and for different teams that might be different reasons but so the team comes me and says well i want to move to",
    "start": "3016160",
    "end": "3021920"
  },
  {
    "text": "microservices to kind of scale my application i'm like okay great well have you tried having five copies",
    "start": "3021920",
    "end": "3027119"
  },
  {
    "text": "of your modular monolith behind a load balancer because that might help scale your application and they say well we haven't",
    "start": "3027119",
    "end": "3032559"
  },
  {
    "text": "tried that i say definitely try that first because that's way cheaper you know so for me i always i don't try",
    "start": "3032559",
    "end": "3037760"
  },
  {
    "text": "and talk about the implementation detail i say what is the outcome that you need to achieve with this system architecture",
    "start": "3037760",
    "end": "3044400"
  },
  {
    "text": "that your current module architecture can't do and then once you've defined what that outcome is you focus",
    "start": "3044400",
    "end": "3050800"
  },
  {
    "text": "any microservice migration based on that outcome you know if your goal is scale and what you really want is a property",
    "start": "3050800",
    "end": "3057200"
  },
  {
    "text": "to independently scale a part of your application well that is going to very strongly focus what microservices you create and",
    "start": "3057200",
    "end": "3063760"
  },
  {
    "text": "what functionality you extract if your driver though instead was we are massively scaling up our delivery",
    "start": "3063760",
    "end": "3070480"
  },
  {
    "text": "organization we're spitting out more teams we want to be able to work in parallel so we need ways these teams can work without having to",
    "start": "3070480",
    "end": "3076319"
  },
  {
    "text": "constantly coordinate that might push you in a very very different direction in terms of what your architecture looks like",
    "start": "3076319",
    "end": "3082800"
  },
  {
    "text": "and i think all too often people's the outcome people are actually working towards is i want microservices not i want",
    "start": "3082800",
    "end": "3091280"
  },
  {
    "text": "to change xyz and if your only outcome is we want microservices where it's easy to",
    "start": "3091280",
    "end": "3096400"
  },
  {
    "text": "succeed and it's easy for me to succeed because i sell books on the subject but yeah i always try and put it back to that outcome as a way of kind of keeping",
    "start": "3096400",
    "end": "3102880"
  },
  {
    "text": "you honest because also once you distill that down and get to okay this is your outcome the next thing i'm going to talk to you",
    "start": "3102880",
    "end": "3109040"
  },
  {
    "text": "about is okay well if that's your outcome let's think of the 10 different ways we could achieve that outcome and oh look",
    "start": "3109040",
    "end": "3114720"
  },
  {
    "text": "some of those things don't involve microservices and are way quicker and easier for us to try let's try some of that stuff instead",
    "start": "3114720",
    "end": "3122079"
  },
  {
    "text": "yeah okay okay thanks okay who uh next question anyhow",
    "start": "3122079",
    "end": "3128079"
  },
  {
    "text": "anyone's got a question for me",
    "start": "3128079",
    "end": "3131280"
  },
  {
    "text": "all right well if you do have any questions that you wanted you were too scared to ask on the line um you can put them in the um track six",
    "start": "3135200",
    "end": "3142400"
  },
  {
    "text": "i'm also just at sam newman on twitter i'm very easy to find um so just if you ask questions there",
    "start": "3142400",
    "end": "3148800"
  },
  {
    "text": "more so i tend to sort of retweet the answer so everyone gets the benefit of those responses but i hope you enjoy the",
    "start": "3148800",
    "end": "3154640"
  },
  {
    "text": "rest of the conference and uh and i'm certainly hang around for a bit more and see some more talks and",
    "start": "3154640",
    "end": "3160000"
  },
  {
    "text": "things so thank you so much for your time and i'll see you all again maybe in the flesh in the future so take care everybody",
    "start": "3160000",
    "end": "3178400"
  }
]