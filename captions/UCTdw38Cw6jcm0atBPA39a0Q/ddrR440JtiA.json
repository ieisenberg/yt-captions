[
  {
    "text": "hello and welcome to simplified unit",
    "start": "9610",
    "end": "12309"
  },
  {
    "text": "testing with the EF core in-memory",
    "start": "12309",
    "end": "14139"
  },
  {
    "text": "provider",
    "start": "14139",
    "end": "15010"
  },
  {
    "text": "I'm Jason Taylor and I'm a solution",
    "start": "15010",
    "end": "17110"
  },
  {
    "text": "architect for SSW you can find me on",
    "start": "17110",
    "end": "19540"
  },
  {
    "text": "Twitter Jason G tau or on my blog",
    "start": "19540",
    "end": "23050"
  },
  {
    "text": "codeine flow net I've been developing",
    "start": "23050",
    "end": "25360"
  },
  {
    "text": "software now for about 17 years and I",
    "start": "25360",
    "end": "27850"
  },
  {
    "text": "found that the most important principle",
    "start": "27850",
    "end": "29680"
  },
  {
    "text": "is kiss or keep it simple stupid and",
    "start": "29680",
    "end": "32890"
  },
  {
    "text": "this principle states that systems",
    "start": "32890",
    "end": "34449"
  },
  {
    "text": "should be made as simple as possible but",
    "start": "34449",
    "end": "36730"
  },
  {
    "text": "no simpler and today I'm going to show",
    "start": "36730",
    "end": "38530"
  },
  {
    "text": "you the simplest approach that I've",
    "start": "38530",
    "end": "39850"
  },
  {
    "text": "found to unit testing applications that",
    "start": "39850",
    "end": "42549"
  },
  {
    "text": "depend on energy framework or so if",
    "start": "42549",
    "end": "45610"
  },
  {
    "text": "divided this talk into four sections",
    "start": "45610",
    "end": "47260"
  },
  {
    "text": "we're going to start with the typical",
    "start": "47260",
    "end": "48280"
  },
  {
    "text": "approach and I'll discuss some of the",
    "start": "48280",
    "end": "50049"
  },
  {
    "text": "pain points associated with that",
    "start": "50049",
    "end": "51430"
  },
  {
    "text": "approach then we'll look at the",
    "start": "51430",
    "end": "52930"
  },
  {
    "text": "simplified approach and I'll demonstrate",
    "start": "52930",
    "end": "54339"
  },
  {
    "text": "how you can use the in-memory provider",
    "start": "54339",
    "end": "56320"
  },
  {
    "text": "to really simplify your overall approach",
    "start": "56320",
    "end": "58690"
  },
  {
    "text": "then we'll discuss some of the",
    "start": "58690",
    "end": "60879"
  },
  {
    "text": "limitations and concerns and finally",
    "start": "60879",
    "end": "63519"
  },
  {
    "text": "I'll share with you some learning",
    "start": "63519",
    "end": "64780"
  },
  {
    "text": "resources to help you get up and running",
    "start": "64780",
    "end": "66450"
  },
  {
    "text": "so what is the typical approach so the",
    "start": "66450",
    "end": "68979"
  },
  {
    "text": "typical approach has four steps so the",
    "start": "68979",
    "end": "71380"
  },
  {
    "text": "first one is we need to remove all of",
    "start": "71380",
    "end": "73390"
  },
  {
    "text": "our dependencies on EF so if we have",
    "start": "73390",
    "end": "75730"
  },
  {
    "text": "dependencies on EF then that typically",
    "start": "75730",
    "end": "77710"
  },
  {
    "text": "means that we've got a dependency on",
    "start": "77710",
    "end": "78910"
  },
  {
    "text": "external database and our unit tests",
    "start": "78910",
    "end": "81280"
  },
  {
    "text": "cannot access external resources because",
    "start": "81280",
    "end": "83740"
  },
  {
    "text": "if they do that's going to slow down our",
    "start": "83740",
    "end": "85450"
  },
  {
    "text": "whole test suite and what are we going",
    "start": "85450",
    "end": "86980"
  },
  {
    "text": "to do we're not going to run those tests",
    "start": "86980",
    "end": "88690"
  },
  {
    "text": "they need to be fast so that we can get",
    "start": "88690",
    "end": "90610"
  },
  {
    "text": "that feedback quickly the next thing",
    "start": "90610",
    "end": "92800"
  },
  {
    "text": "we'll do is we'll implement some",
    "start": "92800",
    "end": "93970"
  },
  {
    "text": "abstractions so typically what people",
    "start": "93970",
    "end": "95980"
  },
  {
    "text": "implement is the unit of work and the",
    "start": "95980",
    "end": "98020"
  },
  {
    "text": "repository pattern followed by that",
    "start": "98020",
    "end": "100780"
  },
  {
    "text": "we'll be able to begin writing our tests",
    "start": "100780",
    "end": "102490"
  },
  {
    "text": "but we'll actually have to create test",
    "start": "102490",
    "end": "103930"
  },
  {
    "text": "doubles first so these are our dummy",
    "start": "103930",
    "end": "106030"
  },
  {
    "text": "objects that we can use to test our",
    "start": "106030",
    "end": "108159"
  },
  {
    "text": "system so we'll typically create a dummy",
    "start": "108159",
    "end": "110590"
  },
  {
    "text": "unit of work and a bunch of dummy",
    "start": "110590",
    "end": "113080"
  },
  {
    "text": "repositories so that we can test and",
    "start": "113080",
    "end": "115360"
  },
  {
    "text": "then finally we can write unit tests so",
    "start": "115360",
    "end": "117220"
  },
  {
    "text": "hands up here who is familiar with this",
    "start": "117220",
    "end": "119440"
  },
  {
    "text": "process so everyone and hands up if you",
    "start": "119440",
    "end": "123520"
  },
  {
    "text": "like this process okay so 2% of the room",
    "start": "123520",
    "end": "127060"
  },
  {
    "text": "maybe maybe maybe a little bit more so",
    "start": "127060",
    "end": "129759"
  },
  {
    "text": "but this is a difficult process and for",
    "start": "129759",
    "end": "132069"
  },
  {
    "text": "new developers it's a lot to learn to",
    "start": "132069",
    "end": "134230"
  },
  {
    "text": "get up and running and what I'm seeing",
    "start": "134230",
    "end": "136120"
  },
  {
    "text": "is that time and time again people are",
    "start": "136120",
    "end": "137830"
  },
  {
    "text": "writing very few tests if any so let's",
    "start": "137830",
    "end": "141250"
  },
  {
    "text": "take a look at a simple of",
    "start": "141250",
    "end": "142390"
  },
  {
    "text": "approach where we can do away with some",
    "start": "142390",
    "end": "143920"
  },
  {
    "text": "of this pain so the simplified approach",
    "start": "143920",
    "end": "146110"
  },
  {
    "text": "is in complete contrast to the typical",
    "start": "146110",
    "end": "148150"
  },
  {
    "text": "approach we don't need to remove our",
    "start": "148150",
    "end": "150160"
  },
  {
    "text": "dependencies on EF and we were therefore",
    "start": "150160",
    "end": "151990"
  },
  {
    "text": "why need to implement any abstractions",
    "start": "151990",
    "end": "154300"
  },
  {
    "text": "we can actually use the DB context where",
    "start": "154300",
    "end": "156610"
  },
  {
    "text": "it's required we won't need to create",
    "start": "156610",
    "end": "158890"
  },
  {
    "text": "test doubles in our unit tests we're",
    "start": "158890",
    "end": "160780"
  },
  {
    "text": "going to use the DB context there as",
    "start": "160780",
    "end": "162370"
  },
  {
    "text": "well so we'll just be focusing on one",
    "start": "162370",
    "end": "164440"
  },
  {
    "text": "thing writing unit tests so hands up",
    "start": "164440",
    "end": "166810"
  },
  {
    "text": "again who thinks I'm crazy so you say so",
    "start": "166810",
    "end": "170739"
  },
  {
    "text": "you're wrong I'm simple and I like",
    "start": "170739",
    "end": "173050"
  },
  {
    "text": "simple things so let me show you how we",
    "start": "173050",
    "end": "175030"
  },
  {
    "text": "can do this it's with the e of core in",
    "start": "175030",
    "end": "177220"
  },
  {
    "text": "memory provider it's just a database",
    "start": "177220",
    "end": "179680"
  },
  {
    "text": "provider but it's been built for testing",
    "start": "179680",
    "end": "182019"
  },
  {
    "text": "purposes the big difference is is it's",
    "start": "182019",
    "end": "184420"
  },
  {
    "text": "in memory so it's very fast and it's not",
    "start": "184420",
    "end": "187390"
  },
  {
    "text": "dependent on those external resources so",
    "start": "187390",
    "end": "189459"
  },
  {
    "text": "there's no overhead of those i/o",
    "start": "189459",
    "end": "190780"
  },
  {
    "text": "operations it's lightweight with minimal",
    "start": "190780",
    "end": "194080"
  },
  {
    "text": "dependencies this dependency is energy",
    "start": "194080",
    "end": "195940"
  },
  {
    "text": "framework core so let me show you how",
    "start": "195940",
    "end": "198790"
  },
  {
    "text": "this works",
    "start": "198790",
    "end": "199510"
  },
  {
    "text": "so I've got two demonstrations for you",
    "start": "199510",
    "end": "201550"
  },
  {
    "text": "today and the first demonstration we're",
    "start": "201550",
    "end": "203980"
  },
  {
    "text": "going to test a simple query and this",
    "start": "203980",
    "end": "205959"
  },
  {
    "text": "query is just getting a list of",
    "start": "205959",
    "end": "208480"
  },
  {
    "text": "customers and it does two things it gets",
    "start": "208480",
    "end": "210730"
  },
  {
    "text": "the list of customers without applying",
    "start": "210730",
    "end": "212380"
  },
  {
    "text": "any kind of filtering and it also orders",
    "start": "212380",
    "end": "214959"
  },
  {
    "text": "it by name so we can write two tests for",
    "start": "214959",
    "end": "217299"
  },
  {
    "text": "that but let me show you first how we",
    "start": "217299",
    "end": "221079"
  },
  {
    "text": "can wire in the EF core in-memory",
    "start": "221079",
    "end": "223810"
  },
  {
    "text": "provider so it's quite simple it's a",
    "start": "223810",
    "end": "226269"
  },
  {
    "text": "single package and if I just have a look",
    "start": "226269",
    "end": "228790"
  },
  {
    "text": "at the dependencies here you can see the",
    "start": "228790",
    "end": "232780"
  },
  {
    "text": "dependency is on Microsoft energy",
    "start": "232780",
    "end": "234970"
  },
  {
    "text": "framework caught in memory so don't net",
    "start": "234970",
    "end": "236920"
  },
  {
    "text": "core 2.0 was released on Monday so I've",
    "start": "236920",
    "end": "238780"
  },
  {
    "text": "upgraded this solution to 2.0 and",
    "start": "238780",
    "end": "241420"
  },
  {
    "text": "everything's working great so it's a",
    "start": "241420",
    "end": "242680"
  },
  {
    "text": "very very simple process so the rest of",
    "start": "242680",
    "end": "245350"
  },
  {
    "text": "the dependencies there are just on",
    "start": "245350",
    "end": "246940"
  },
  {
    "text": "testing so let's have a look here so",
    "start": "246940",
    "end": "251680"
  },
  {
    "text": "we're going to write two tests so the",
    "start": "251680",
    "end": "252850"
  },
  {
    "text": "first one is it should return all",
    "start": "252850",
    "end": "254739"
  },
  {
    "text": "customers so we'll start by mooing up",
    "start": "254739",
    "end": "257380"
  },
  {
    "text": "the query so I get custom our query now",
    "start": "257380",
    "end": "262150"
  },
  {
    "text": "you can see that the customer query",
    "start": "262150",
    "end": "263500"
  },
  {
    "text": "requires a DB context and we'll have to",
    "start": "263500",
    "end": "267430"
  },
  {
    "text": "new that up as well",
    "start": "267430",
    "end": "269840"
  },
  {
    "text": "so context equals a new Northwind",
    "start": "269840",
    "end": "273590"
  },
  {
    "text": "context so I'm using a Northland",
    "start": "273590",
    "end": "275060"
  },
  {
    "text": "database that I've built and so we need",
    "start": "275060",
    "end": "277160"
  },
  {
    "text": "to use this constructor and it accepts a",
    "start": "277160",
    "end": "279380"
  },
  {
    "text": "dbcontext options so we'll pass in the",
    "start": "279380",
    "end": "282470"
  },
  {
    "text": "options and we'll have to new that up as",
    "start": "282470",
    "end": "283940"
  },
  {
    "text": "well so with the options we need to use",
    "start": "283940",
    "end": "288680"
  },
  {
    "text": "the dbcontext options builder and we'll",
    "start": "288680",
    "end": "292460"
  },
  {
    "text": "make that of time Northwind context and",
    "start": "292460",
    "end": "296510"
  },
  {
    "text": "we can simply say because we have that",
    "start": "296510",
    "end": "297889"
  },
  {
    "text": "dependency on in memory we can simply",
    "start": "297889",
    "end": "299389"
  },
  {
    "text": "say use in memory database now we also",
    "start": "299389",
    "end": "302360"
  },
  {
    "text": "have to supply a database name this is",
    "start": "302360",
    "end": "304070"
  },
  {
    "text": "new to dotnet core 2.0 we actually",
    "start": "304070",
    "end": "306620"
  },
  {
    "text": "didn't need to do this in the past but",
    "start": "306620",
    "end": "307970"
  },
  {
    "text": "I'll go ahead and just give it a simple",
    "start": "307970",
    "end": "309200"
  },
  {
    "text": "name Northwind and then we can just",
    "start": "309200",
    "end": "312740"
  },
  {
    "text": "return the options okay so now we have",
    "start": "312740",
    "end": "315620"
  },
  {
    "text": "everything we need to begin our test",
    "start": "315620",
    "end": "319240"
  },
  {
    "text": "okay so we'll grab the result and it's",
    "start": "319389",
    "end": "323570"
  },
  {
    "text": "just simply queried I'll execute and",
    "start": "323570",
    "end": "325820"
  },
  {
    "text": "then we can assert actually we're gonna",
    "start": "325820",
    "end": "327590"
  },
  {
    "text": "we're going to ensure that it returns",
    "start": "327590",
    "end": "329150"
  },
  {
    "text": "all customers so we need to seed the",
    "start": "329150",
    "end": "330710"
  },
  {
    "text": "database as well so I have a helper",
    "start": "330710",
    "end": "333470"
  },
  {
    "text": "method to seed the database here and you",
    "start": "333470",
    "end": "335780"
  },
  {
    "text": "can see it down the bottom it just seeds",
    "start": "335780",
    "end": "337789"
  },
  {
    "text": "six customers so we need to assert that",
    "start": "337789",
    "end": "339650"
  },
  {
    "text": "six customers are returned so if we go",
    "start": "339650",
    "end": "342410"
  },
  {
    "text": "assert so equal six and result count",
    "start": "342410",
    "end": "350470"
  },
  {
    "text": "okay with that in place I can do a build",
    "start": "350470",
    "end": "352940"
  },
  {
    "text": "I've set my test to run after build so",
    "start": "352940",
    "end": "355700"
  },
  {
    "text": "that should run and those tests should",
    "start": "355700",
    "end": "357260"
  },
  {
    "text": "pass okay",
    "start": "357260",
    "end": "360289"
  },
  {
    "text": "quite simple now for the second test I'm",
    "start": "360289",
    "end": "362750"
  },
  {
    "text": "just gonna borrow this card and we're",
    "start": "362750",
    "end": "365300"
  },
  {
    "text": "gonna make sure that the customers are",
    "start": "365300",
    "end": "367550"
  },
  {
    "text": "returned in the correct order",
    "start": "367550",
    "end": "370569"
  },
  {
    "text": "[Music]",
    "start": "370960",
    "end": "374089"
  },
  {
    "text": "okay so we can say that alphabetically",
    "start": "375360",
    "end": "379780"
  },
  {
    "text": "Beth Smith should be fast so we can",
    "start": "379780",
    "end": "385000"
  },
  {
    "text": "whack that in there and then we can say",
    "start": "385000",
    "end": "387520"
  },
  {
    "text": "result dot first dot name",
    "start": "387520",
    "end": "392370"
  },
  {
    "text": "how about you no good okay now if I run",
    "start": "393990",
    "end": "397410"
  },
  {
    "text": "those let's see what happens okay so",
    "start": "397410",
    "end": "401340"
  },
  {
    "text": "that fails and the reason that it fails",
    "start": "401340",
    "end": "403410"
  },
  {
    "text": "is even though when Ewing up a new",
    "start": "403410",
    "end": "404940"
  },
  {
    "text": "context with a new in-memory database",
    "start": "404940",
    "end": "407130"
  },
  {
    "text": "for each test it's actually reusing the",
    "start": "407130",
    "end": "409290"
  },
  {
    "text": "same database and you may have guessed",
    "start": "409290",
    "end": "410610"
  },
  {
    "text": "that because I'm using the same database",
    "start": "410610",
    "end": "412290"
  },
  {
    "text": "name now what microsoft recommends that",
    "start": "412290",
    "end": "414660"
  },
  {
    "text": "you do is to name each database after",
    "start": "414660",
    "end": "417870"
  },
  {
    "text": "the test so if I name this one should a",
    "start": "417870",
    "end": "420990"
  },
  {
    "text": "customer by name and the other one his",
    "start": "420990",
    "end": "423570"
  },
  {
    "text": "name should return all customers both of",
    "start": "423570",
    "end": "426330"
  },
  {
    "text": "those tests will pass but this is pretty",
    "start": "426330",
    "end": "429150"
  },
  {
    "text": "ugly this is not the simplest approach",
    "start": "429150",
    "end": "430740"
  },
  {
    "text": "that I could find I found that I'd",
    "start": "430740",
    "end": "433140"
  },
  {
    "text": "actually traded one form of complexity",
    "start": "433140",
    "end": "435570"
  },
  {
    "text": "mocking of my abstractions for another",
    "start": "435570",
    "end": "437940"
  },
  {
    "text": "form of complexity the heavy-handed",
    "start": "437940",
    "end": "439740"
  },
  {
    "text": "management of the context so I created a",
    "start": "439740",
    "end": "442770"
  },
  {
    "text": "new solution let's have a look at this",
    "start": "442770",
    "end": "445320"
  },
  {
    "text": "new solution so we've got a customers",
    "start": "445320",
    "end": "447780"
  },
  {
    "text": "controller and it's a pretty typical Web",
    "start": "447780",
    "end": "450090"
  },
  {
    "text": "API controller but I don't know core 2.0",
    "start": "450090",
    "end": "452460"
  },
  {
    "text": "and you can see that it's got a number",
    "start": "452460",
    "end": "454260"
  },
  {
    "text": "of methods so we're returning customers",
    "start": "454260",
    "end": "456510"
  },
  {
    "text": "we're getting customers by ID and we're",
    "start": "456510",
    "end": "458880"
  },
  {
    "text": "creating updating and deleting customers",
    "start": "458880",
    "end": "462030"
  },
  {
    "text": "so I've written 12 tests for that",
    "start": "462030",
    "end": "464220"
  },
  {
    "text": "controller and you can see at the moment",
    "start": "464220",
    "end": "465630"
  },
  {
    "text": "11 of them are failing and it's because",
    "start": "465630",
    "end": "468540"
  },
  {
    "text": "they're all sharing the same database",
    "start": "468540",
    "end": "470070"
  },
  {
    "text": "but what I've actually done is I've",
    "start": "470070",
    "end": "472140"
  },
  {
    "text": "written these tests the way I'd like to",
    "start": "472140",
    "end": "473760"
  },
  {
    "text": "write my tests they're very simple so",
    "start": "473760",
    "end": "476550"
  },
  {
    "text": "you can see get customers returns",
    "start": "476550",
    "end": "478020"
  },
  {
    "text": "cracked type we've just got our range",
    "start": "478020",
    "end": "479910"
  },
  {
    "text": "act and assert and nothing else aside",
    "start": "479910",
    "end": "482250"
  },
  {
    "text": "from what we actually want to test it's",
    "start": "482250",
    "end": "484740"
  },
  {
    "text": "really clear what's that's doing we've",
    "start": "484740",
    "end": "486810"
  },
  {
    "text": "got another one here and they all follow",
    "start": "486810",
    "end": "488820"
  },
  {
    "text": "this pattern arrange act in a certain",
    "start": "488820",
    "end": "490440"
  },
  {
    "text": "and there's nothing else in there that's",
    "start": "490440",
    "end": "492180"
  },
  {
    "text": "kind of detracting from the actual test",
    "start": "492180",
    "end": "494340"
  },
  {
    "text": "itself so those tests are really as",
    "start": "494340",
    "end": "496230"
  },
  {
    "text": "simple as possible so let's have a look",
    "start": "496230",
    "end": "499020"
  },
  {
    "text": "at how this is constructed and then",
    "start": "499020",
    "end": "500730"
  },
  {
    "text": "we'll look at how we can get this to",
    "start": "500730",
    "end": "501870"
  },
  {
    "text": "work so we've got a constructor here and",
    "start": "501870",
    "end": "505080"
  },
  {
    "text": "a constructor in X unit runs before each",
    "start": "505080",
    "end": "507600"
  },
  {
    "text": "test",
    "start": "507600",
    "end": "508230"
  },
  {
    "text": "so in our constructor we're basically",
    "start": "508230",
    "end": "510300"
  },
  {
    "text": "setting up our context and we're seed in",
    "start": "510300",
    "end": "512250"
  },
  {
    "text": "the database and then right down the",
    "start": "512250",
    "end": "514380"
  },
  {
    "text": "bottom what runs after each test is the",
    "start": "514380",
    "end": "516870"
  },
  {
    "text": "dispose method so that's a pretty good",
    "start": "516870",
    "end": "519060"
  },
  {
    "text": "pattern for what we're trying to achieve",
    "start": "519060",
    "end": "521130"
  },
  {
    "text": "but our problem right now is that",
    "start": "521130",
    "end": "523380"
  },
  {
    "text": "they're all running against the same",
    "start": "523380",
    "end": "524820"
  },
  {
    "text": "database now I found about three",
    "start": "524820",
    "end": "526830"
  },
  {
    "text": "different way",
    "start": "526830",
    "end": "527700"
  },
  {
    "text": "to fix this but what I'm going with",
    "start": "527700",
    "end": "530010"
  },
  {
    "text": "lately is the simplest approach good new",
    "start": "530010",
    "end": "532530"
  },
  {
    "text": "good to string so now we have a unique",
    "start": "532530",
    "end": "535710"
  },
  {
    "text": "data base for each test each each test",
    "start": "535710",
    "end": "539280"
  },
  {
    "text": "run now the other thing that I've been",
    "start": "539280",
    "end": "541110"
  },
  {
    "text": "doing is a little bit of cleanup so I",
    "start": "541110",
    "end": "543000"
  },
  {
    "text": "run context database dot ensure created",
    "start": "543000",
    "end": "546540"
  },
  {
    "text": "and the reason that I do that is because",
    "start": "546540",
    "end": "549810"
  },
  {
    "text": "at the end of each test I'm going to run",
    "start": "549810",
    "end": "552570"
  },
  {
    "text": "context database stop ensure deleted so",
    "start": "552570",
    "end": "558180"
  },
  {
    "text": "I'm not going to have all of these",
    "start": "558180",
    "end": "559140"
  },
  {
    "text": "databases sitting in memory for the test",
    "start": "559140",
    "end": "561690"
  },
  {
    "text": "duration they'll drop out after all the",
    "start": "561690",
    "end": "563640"
  },
  {
    "text": "tests are running but if I've got a",
    "start": "563640",
    "end": "564720"
  },
  {
    "text": "really large test suite that's going to",
    "start": "564720",
    "end": "566730"
  },
  {
    "text": "consume a fair bit of memory so now with",
    "start": "566730",
    "end": "569220"
  },
  {
    "text": "those things in place if I run that all",
    "start": "569220",
    "end": "571320"
  },
  {
    "text": "of these tests are going to pass fingers",
    "start": "571320",
    "end": "578130"
  },
  {
    "text": "crossed there we go so fantastic so now",
    "start": "578130",
    "end": "580890"
  },
  {
    "text": "we have a quite simple approach to unit",
    "start": "580890",
    "end": "583560"
  },
  {
    "text": "testing in these systems but there's one",
    "start": "583560",
    "end": "585390"
  },
  {
    "text": "other thing that that I've implemented",
    "start": "585390",
    "end": "587130"
  },
  {
    "text": "and that is an abstract base class so",
    "start": "587130",
    "end": "590250"
  },
  {
    "text": "instead of having all of this",
    "start": "590250",
    "end": "591300"
  },
  {
    "text": "information in this controller class",
    "start": "591300",
    "end": "592950"
  },
  {
    "text": "word which would then have to be",
    "start": "592950",
    "end": "594210"
  },
  {
    "text": "repeated for other controllers that were",
    "start": "594210",
    "end": "596310"
  },
  {
    "text": "testing I've implemented a Northwind",
    "start": "596310",
    "end": "598710"
  },
  {
    "text": "test base so we can actually delete all",
    "start": "598710",
    "end": "600900"
  },
  {
    "text": "of this and we can delete all of this",
    "start": "600900",
    "end": "606530"
  },
  {
    "text": "and we could just inherit or base our",
    "start": "606530",
    "end": "610080"
  },
  {
    "text": "class on Northwind test base",
    "start": "610080",
    "end": "614420"
  },
  {
    "text": "[Music]",
    "start": "615240",
    "end": "617640"
  },
  {
    "text": "there we go",
    "start": "617640",
    "end": "619090"
  },
  {
    "text": "so now all of that logic associated with",
    "start": "619090",
    "end": "621190"
  },
  {
    "text": "managing the context is in a completely",
    "start": "621190",
    "end": "622810"
  },
  {
    "text": "separate class and our test still wrong",
    "start": "622810",
    "end": "625560"
  },
  {
    "text": "let me show you that class it's going to",
    "start": "625560",
    "end": "629740"
  },
  {
    "text": "be exactly what you expect okay so we",
    "start": "629740",
    "end": "635170"
  },
  {
    "text": "just have a constructor which news up",
    "start": "635170",
    "end": "637960"
  },
  {
    "text": "the context we've got our field level",
    "start": "637960",
    "end": "639820"
  },
  {
    "text": "variables so it can access the context",
    "start": "639820",
    "end": "641590"
  },
  {
    "text": "in our tests and we've got our dispose",
    "start": "641590",
    "end": "643570"
  },
  {
    "text": "methods so that's a really simple",
    "start": "643570",
    "end": "645790"
  },
  {
    "text": "approach you can take it a little bit",
    "start": "645790",
    "end": "647650"
  },
  {
    "text": "further for example you might want to",
    "start": "647650",
    "end": "649810"
  },
  {
    "text": "have a different method for testing your",
    "start": "649810",
    "end": "652300"
  },
  {
    "text": "queries because they can share all of",
    "start": "652300",
    "end": "654160"
  },
  {
    "text": "the same context it can run against the",
    "start": "654160",
    "end": "655900"
  },
  {
    "text": "same context but first testing new",
    "start": "655900",
    "end": "657700"
  },
  {
    "text": "commands or those things that are",
    "start": "657700",
    "end": "659080"
  },
  {
    "text": "writing to the database you definitely",
    "start": "659080",
    "end": "660550"
  },
  {
    "text": "want a separate instance for each test",
    "start": "660550",
    "end": "664050"
  },
  {
    "text": "okay so let's have a talk about some of",
    "start": "664050",
    "end": "666910"
  },
  {
    "text": "the limitations and concerns they're",
    "start": "666910",
    "end": "668440"
  },
  {
    "text": "associated with this approach so the",
    "start": "668440",
    "end": "670390"
  },
  {
    "text": "first thing is in memory is not a",
    "start": "670390",
    "end": "672610"
  },
  {
    "text": "relational database in fact here of",
    "start": "672610",
    "end": "674170"
  },
  {
    "text": "course not relational it can support",
    "start": "674170",
    "end": "675970"
  },
  {
    "text": "relational and no sequel but the fact is",
    "start": "675970",
    "end": "679180"
  },
  {
    "text": "that using this approach your",
    "start": "679180",
    "end": "681760"
  },
  {
    "text": "constraints aren't going to be enforced",
    "start": "681760",
    "end": "683080"
  },
  {
    "text": "you could in fact violate referential",
    "start": "683080",
    "end": "684880"
  },
  {
    "text": "integrity this is this is a small issue",
    "start": "684880",
    "end": "687580"
  },
  {
    "text": "because you need to remember that what",
    "start": "687580",
    "end": "689710"
  },
  {
    "text": "you're testing is not entity framework",
    "start": "689710",
    "end": "691240"
  },
  {
    "text": "or and you're not testing your database",
    "start": "691240",
    "end": "693640"
  },
  {
    "text": "in its behaviors you're testing",
    "start": "693640",
    "end": "695260"
  },
  {
    "text": "something else you're testing something",
    "start": "695260",
    "end": "696550"
  },
  {
    "text": "that depends on entity framework call so",
    "start": "696550",
    "end": "699100"
  },
  {
    "text": "what's important is that in memory",
    "start": "699100",
    "end": "700720"
  },
  {
    "text": "behaves approximately like a real",
    "start": "700720",
    "end": "702550"
  },
  {
    "text": "database and it does a really great job",
    "start": "702550",
    "end": "704410"
  },
  {
    "text": "at that so next up concerns there's",
    "start": "704410",
    "end": "706900"
  },
  {
    "text": "three common concerns that are raised",
    "start": "706900",
    "end": "708340"
  },
  {
    "text": "with this approach the first one is",
    "start": "708340",
    "end": "710320"
  },
  {
    "text": "you're writing an integration tests and",
    "start": "710320",
    "end": "712090"
  },
  {
    "text": "not unit tests and that's not true",
    "start": "712090",
    "end": "714370"
  },
  {
    "text": "to write an integration test I'd",
    "start": "714370",
    "end": "716590"
  },
  {
    "text": "actually need to test against the",
    "start": "716590",
    "end": "717850"
  },
  {
    "text": "provider that I'm going to be using in",
    "start": "717850",
    "end": "719350"
  },
  {
    "text": "production so if I was using sequel",
    "start": "719350",
    "end": "721420"
  },
  {
    "text": "server in production I'd need to test",
    "start": "721420",
    "end": "723160"
  },
  {
    "text": "against the sequel server provider",
    "start": "723160",
    "end": "725490"
  },
  {
    "text": "running integration test against in",
    "start": "725490",
    "end": "727750"
  },
  {
    "text": "memory would only test in memory and",
    "start": "727750",
    "end": "729670"
  },
  {
    "text": "that's not going to production so those",
    "start": "729670",
    "end": "731110"
  },
  {
    "text": "tests have no value so the next one is",
    "start": "731110",
    "end": "733810"
  },
  {
    "text": "lack of isolation you're exercising code",
    "start": "733810",
    "end": "736150"
  },
  {
    "text": "that has dependencies on entity",
    "start": "736150",
    "end": "738160"
  },
  {
    "text": "framework call and that's true I am but",
    "start": "738160",
    "end": "741040"
  },
  {
    "text": "I'm also exercising code that has",
    "start": "741040",
    "end": "742600"
  },
  {
    "text": "dependencies on dotnet core and I'm okay",
    "start": "742600",
    "end": "744880"
  },
  {
    "text": "with that I trust out in their core and",
    "start": "744880",
    "end": "746730"
  },
  {
    "text": "trust entity framework core so I'm happy",
    "start": "746730",
    "end": "748620"
  },
  {
    "text": "with this approach and finally the unit",
    "start": "748620",
    "end": "751140"
  },
  {
    "text": "of work and repository patterns are best",
    "start": "751140",
    "end": "752910"
  },
  {
    "text": "practice and that's true they are best",
    "start": "752910",
    "end": "755160"
  },
  {
    "text": "practice but the fact of the matter is",
    "start": "755160",
    "end": "756960"
  },
  {
    "text": "that energy framework for some time now",
    "start": "756960",
    "end": "758970"
  },
  {
    "text": "has implemented both of those patterns",
    "start": "758970",
    "end": "760590"
  },
  {
    "text": "so the DB context is a unit of work and",
    "start": "760590",
    "end": "763350"
  },
  {
    "text": "the DB set is a repository now I'll stop",
    "start": "763350",
    "end": "766620"
  },
  {
    "text": "there if you are building a big",
    "start": "766620",
    "end": "768920"
  },
  {
    "text": "enterprise system and you want really",
    "start": "768920",
    "end": "771150"
  },
  {
    "text": "clean separation of concerns from your",
    "start": "771150",
    "end": "772980"
  },
  {
    "text": "frameworks it is a good idea to",
    "start": "772980",
    "end": "774960"
  },
  {
    "text": "implement the unit of work and the",
    "start": "774960",
    "end": "776550"
  },
  {
    "text": "repository pattern but the good news is",
    "start": "776550",
    "end": "779100"
  },
  {
    "text": "you can use in memory behind that as",
    "start": "779100",
    "end": "780690"
  },
  {
    "text": "well so instead of mocking your unit of",
    "start": "780690",
    "end": "783060"
  },
  {
    "text": "works and repositories just new them up",
    "start": "783060",
    "end": "785010"
  },
  {
    "text": "with the context in the same way as what",
    "start": "785010",
    "end": "786690"
  },
  {
    "text": "you've seen here today and you'll gain a",
    "start": "786690",
    "end": "788340"
  },
  {
    "text": "lot of these benefits",
    "start": "788340",
    "end": "790160"
  },
  {
    "text": "all right so finally some learning",
    "start": "790160",
    "end": "792990"
  },
  {
    "text": "resources so the first one is the slides",
    "start": "792990",
    "end": "795750"
  },
  {
    "text": "and source code for these demonstrations",
    "start": "795750",
    "end": "797490"
  },
  {
    "text": "so you can find it on bit ly /e of core",
    "start": "797490",
    "end": "801480"
  },
  {
    "text": "testing or on my my github repo at JSON",
    "start": "801480",
    "end": "806130"
  },
  {
    "text": "GT then in October we're running a",
    "start": "806130",
    "end": "810480"
  },
  {
    "text": "dotnet called super bonus we're going to",
    "start": "810480",
    "end": "812070"
  },
  {
    "text": "cover all of this and more everything",
    "start": "812070",
    "end": "813780"
  },
  {
    "text": "you need to get up and running with",
    "start": "813780",
    "end": "814860"
  },
  {
    "text": "dotnet core 2.0 it'll be myself and my",
    "start": "814860",
    "end": "818010"
  },
  {
    "text": "colleague here Brendon Richards",
    "start": "818010",
    "end": "819540"
  },
  {
    "text": "it's a full-day event it's 49 dollars",
    "start": "819540",
    "end": "821880"
  },
  {
    "text": "and we include all meals if you're",
    "start": "821880",
    "end": "824190"
  },
  {
    "text": "interested please do booked in quickly",
    "start": "824190",
    "end": "825780"
  },
  {
    "text": "because they do tend to sell out next if",
    "start": "825780",
    "end": "828900"
  },
  {
    "text": "you enjoy that you might like to check",
    "start": "828900",
    "end": "830310"
  },
  {
    "text": "out the angular superpowers too so the",
    "start": "830310",
    "end": "832590"
  },
  {
    "text": "same deal we're going to show you",
    "start": "832590",
    "end": "833580"
  },
  {
    "text": "everything you need to get up and",
    "start": "833580",
    "end": "834930"
  },
  {
    "text": "running with angular in the enterprise",
    "start": "834930",
    "end": "836670"
  },
  {
    "text": "and that's running on Friday the 17th of",
    "start": "836670",
    "end": "839130"
  },
  {
    "text": "November so in summary today I've shown",
    "start": "839130",
    "end": "842670"
  },
  {
    "text": "you everything you need to do to",
    "start": "842670",
    "end": "844740"
  },
  {
    "text": "implement simplified unit testing for",
    "start": "844740",
    "end": "847560"
  },
  {
    "text": "systems that depend on energy framework",
    "start": "847560",
    "end": "849240"
  },
  {
    "text": "or using the in-memory provider the four",
    "start": "849240",
    "end": "851730"
  },
  {
    "text": "important steps are you don't need to",
    "start": "851730",
    "end": "853590"
  },
  {
    "text": "remove your dependencies on energy",
    "start": "853590",
    "end": "855090"
  },
  {
    "text": "framework or you can in fact use the",
    "start": "855090",
    "end": "857220"
  },
  {
    "text": "dbcontext directly now because of this",
    "start": "857220",
    "end": "860340"
  },
  {
    "text": "you're not going to need to implement",
    "start": "860340",
    "end": "861840"
  },
  {
    "text": "any abstractions and you're not going to",
    "start": "861840",
    "end": "863880"
  },
  {
    "text": "in need to implement test ovals you use",
    "start": "863880",
    "end": "866040"
  },
  {
    "text": "the DB contacts directly in your system",
    "start": "866040",
    "end": "868530"
  },
  {
    "text": "and also in your tests so that it's",
    "start": "868530",
    "end": "870480"
  },
  {
    "text": "going to leave you to focus on just one",
    "start": "870480",
    "end": "871860"
  },
  {
    "text": "thing and that's writing unit tests",
    "start": "871860",
    "end": "874130"
  },
  {
    "text": "thank you",
    "start": "874130",
    "end": "876460"
  },
  {
    "text": "[Applause]",
    "start": "876460",
    "end": "882330"
  }
]