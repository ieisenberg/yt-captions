[
  {
    "text": "okay so now it's on good morning everyone and thank you all for coming my name is Marc seaman and if you want to",
    "start": "30",
    "end": "6270"
  },
  {
    "text": "know more about me there's information there unblock the plate at DK and also i'm on twitter at plur so you can follow",
    "start": "6270",
    "end": "13049"
  },
  {
    "text": "me there and what i'm going to do today is i'm going to try to answer a few",
    "start": "13049",
    "end": "18420"
  },
  {
    "text": "frequently asked questions and the talk is going to fall in three parts so in",
    "start": "18420",
    "end": "24359"
  },
  {
    "text": "the first part I'm gonna look at one frequently asked question and try to talk about why does it make sense to ask",
    "start": "24359",
    "end": "30240"
  },
  {
    "text": "that question but then I'm not gonna answer the question yet because we need some more we need some more knowledge",
    "start": "30240",
    "end": "37020"
  },
  {
    "text": "before we can you know probably answer that question so that's part one of the talk just establishing what's the question now in part two of the talk I'm",
    "start": "37020",
    "end": "45090"
  },
  {
    "text": "going to post another frequently asked question and start to discuss you know",
    "start": "45090",
    "end": "50489"
  },
  {
    "text": "why why are people are asking that question and what can you do about it and then then I'll try to answer that",
    "start": "50489",
    "end": "56760"
  },
  {
    "text": "question and then in part 3 we're going to go back to the original question from part one and try to define understand",
    "start": "56760",
    "end": "64378"
  },
  {
    "text": "now we have enough knowledge from part two so that we can start to address the question from part one and that's going",
    "start": "64379",
    "end": "70080"
  },
  {
    "text": "to be part three so the first frequently asked question that we will look at here",
    "start": "70080",
    "end": "76110"
  },
  {
    "text": "is how do I combine dependency injection with a sink and the weight without leaky",
    "start": "76110",
    "end": "81930"
  },
  {
    "text": "abstractions so that's that's the hard part if you if you don't add that qualifier it's not that hard and we'll",
    "start": "81930",
    "end": "87210"
  },
  {
    "text": "see in a little example of that so we'll basically what I'm gonna do here is I'm gonna just walk through a lot of code and just show you what it",
    "start": "87210",
    "end": "93990"
  },
  {
    "text": "means when we actually write code and the rubber meets the road and I'm gonna",
    "start": "93990",
    "end": "99150"
  },
  {
    "text": "need an excel scenario for that I have one that I keep coming back to over and over again and rewrite that you know",
    "start": "99150",
    "end": "105420"
  },
  {
    "text": "lots of times and that's the sane area of having to develop an online restaurant reservation system you know",
    "start": "105420",
    "end": "110759"
  },
  {
    "text": "it's one of those things where you want to make a restaurant reservation so you find a forum on a website or something like that and you fill in the details",
    "start": "110759",
    "end": "117180"
  },
  {
    "text": "about the reservation you'd like to make you press the submit button and the UI creates a little JSON document that it",
    "start": "117180",
    "end": "124079"
  },
  {
    "text": "posts to an HTTP endpoint somewhere and the code that we're going to look at is",
    "start": "124079",
    "end": "129629"
  },
  {
    "text": "this Versailles code that receives that JSON document and makes decisions about you",
    "start": "129629",
    "end": "134719"
  },
  {
    "text": "know how to proceed so the first thing we're going to look at is actually not the boundary where we received the JSON",
    "start": "134719",
    "end": "140359"
  },
  {
    "text": "document but the unicode domain logic or the business logic if we will so I'm",
    "start": "140359",
    "end": "145670"
  },
  {
    "text": "gonna start just talking a little bit about the method signature itself here we have a method called try accept and I",
    "start": "145670",
    "end": "151459"
  },
  {
    "text": "will fill it out with some code but I just want to spend one minute talking about the method signature itself so you",
    "start": "151459",
    "end": "157010"
  },
  {
    "text": "can tell that it it receives a reservation object and that's just a DTO that contains the data from that JSON",
    "start": "157010",
    "end": "164420"
  },
  {
    "text": "document so that is the name the email address the date and the quantities it's",
    "start": "164420",
    "end": "169609"
  },
  {
    "text": "just those four pieces of information and then you'll notice that it returns an honorable int what's that int well it's a reservation",
    "start": "169609",
    "end": "176989"
  },
  {
    "text": "ID if you have a reservation ID you have a reservation and you can use that",
    "start": "176989",
    "end": "182000"
  },
  {
    "text": "reservation ID to further manipulate the reservation you can change the reservation you can cancel the reservation and you can do things for",
    "start": "182000",
    "end": "188870"
  },
  {
    "text": "the reservation in general now if you don't have a reservation ID that means you don't have a reservation so if you get an all back that means unfortunately",
    "start": "188870",
    "end": "195889"
  },
  {
    "text": "we could we couldn't accept your reservation and that might be reasons for that we'll look it into that next now if you doing dependency injection",
    "start": "195889",
    "end": "202819"
  },
  {
    "text": "you might have injected dependencies into the class where try accepts it's on so we might for example have injected a",
    "start": "202819",
    "end": "209479"
  },
  {
    "text": "repository and just you know make that available via a read-only property like this so you know normally this would",
    "start": "209479",
    "end": "216590"
  },
  {
    "text": "arrive via constructor so in constructor injection but since this is 2019 I",
    "start": "216590",
    "end": "222079"
  },
  {
    "text": "assume that people know how constructor injection works so I'm just decided to save a little space and not actually",
    "start": "222079",
    "end": "228199"
  },
  {
    "text": "show the constructor but this arrives via the constructor and is now available as a read-only property",
    "start": "228199",
    "end": "233620"
  },
  {
    "text": "so since we have a repository we can now go and query it so we can say give me all the reservations for that particular",
    "start": "233620",
    "end": "239060"
  },
  {
    "text": "date once we have those we can create or calculate the sum of all the quantities",
    "start": "239060",
    "end": "244159"
  },
  {
    "text": "of those reservations that gives us a number of reserved seats and if we also know the capacity of the restaurant we",
    "start": "244159",
    "end": "250639"
  },
  {
    "text": "can now make a decision so we can say if that capacity is too small compared to the number of reserved seats we already",
    "start": "250639",
    "end": "256909"
  },
  {
    "text": "have and the new you know requested quantity then unfortunately we sold out or we were so close to sold",
    "start": "256909",
    "end": "264050"
  },
  {
    "text": "out that we can't accept the reservation and that's the reason why we might decide to return null so we have to",
    "start": "264050",
    "end": "269630"
  },
  {
    "text": "reject that request otherwise we can move on and you know finally we can call repository dot create and that creates",
    "start": "269630",
    "end": "276410"
  },
  {
    "text": "or you know persists the reservation in the repository and the create method returns an INT and the interest gets",
    "start": "276410",
    "end": "282620"
  },
  {
    "text": "converted into an honorable end so this point there's no easing in a way to",
    "start": "282620",
    "end": "287960"
  },
  {
    "text": "stuff going on I'm just trying to establish you know what what didn't you look like just without async and await",
    "start": "287960",
    "end": "293660"
  },
  {
    "text": "and then we can see how II think in a weight you know tends to add leaky abstractions as we go along but let's",
    "start": "293660",
    "end": "299240"
  },
  {
    "text": "just complete the example here so um if you're doing a little bit of domain modeling maybe you say well okay so that",
    "start": "299240",
    "end": "304760"
  },
  {
    "text": "try accept things looks like it's a concept so maybe we can amplify that by",
    "start": "304760",
    "end": "310669"
  },
  {
    "text": "you know defining an interface called a Maitre D' so Maitre D' is the basically",
    "start": "310669",
    "end": "317060"
  },
  {
    "text": "just friends it meets the headwaiter that's typically the role in a restaurant that makes decisions on whether or not to accept the reservation",
    "start": "317060",
    "end": "323539"
  },
  {
    "text": "so a little bit of domain driven design here we adopting the ubiquitous language of the domain that we're working in so",
    "start": "323539",
    "end": "330229"
  },
  {
    "text": "if we have a Maitre D' interface like this we can use a dependency injection",
    "start": "330229",
    "end": "335630"
  },
  {
    "text": "again so we have a post method on a reservations controller sitting somewhere and this is the method that's",
    "start": "335630",
    "end": "342560"
  },
  {
    "text": "actually gonna receive the JSON document you know already encode in a reservation detail and then it's going to return",
    "start": "342560",
    "end": "349280"
  },
  {
    "text": "some sort of action results and exactly what that actually resolved is it's not really important and we don't need to",
    "start": "349280",
    "end": "354530"
  },
  {
    "text": "need to know the details of that but that will be some sort of HTTP response so if we have an objected Maitre D' what",
    "start": "354530",
    "end": "362570"
  },
  {
    "text": "we can do is we could basically delegate most of the work to the maitre d we can call try except we get an honorable ID",
    "start": "362570",
    "end": "368090"
  },
  {
    "text": "back the only thing we need to figure out now is to say well what sort of HTTP response should we return based on",
    "start": "368090",
    "end": "374750"
  },
  {
    "text": "whether or not we get null so we can just check whether we have no and if I get a null response back I'll just",
    "start": "374750",
    "end": "381530"
  },
  {
    "text": "return internal server error this is a little helper method that returns one of those action results and that represents",
    "start": "381530",
    "end": "387620"
  },
  {
    "text": "you know a 500 internal server error HTTP response saying sorry table is on",
    "start": "387620",
    "end": "393270"
  },
  {
    "text": "available now I've had this discussion with people who've seen this talk before that says internal server error is not",
    "start": "393270",
    "end": "398310"
  },
  {
    "text": "the appropriate thing to do with rest here so if you think that that's the case just imagine that there's another",
    "start": "398310",
    "end": "404160"
  },
  {
    "text": "response it's not really important I'm sort of getting the the impression that",
    "start": "404160",
    "end": "409200"
  },
  {
    "text": "some of the criticism that has been raised against the you know using internal server is actually correct so but I didn't want to change the slides",
    "start": "409200",
    "end": "415970"
  },
  {
    "text": "on the other hand if if we do have an ID we just could return that ID so I just",
    "start": "415970",
    "end": "421530"
  },
  {
    "text": "have another helper method that returns an action result that you know represents 200 ok and notice that in",
    "start": "421530",
    "end": "427290"
  },
  {
    "text": "that case I take the ID value so the actual integer the actual reservation ID",
    "start": "427290",
    "end": "433920"
  },
  {
    "text": "and I put that in the HTTP response body so that's the contract that I have with",
    "start": "433920",
    "end": "440130"
  },
  {
    "text": "all of my HTTP clients I'm gonna do quite a bit of refactoring of this sort of behavior over and over again but I",
    "start": "440130",
    "end": "446160"
  },
  {
    "text": "have to preserve that overall contract with my you know HTTP callers that if I",
    "start": "446160",
    "end": "452160"
  },
  {
    "text": "return 200 ok the reservation ID should be in the response body so that's my contract so at this point there's no a",
    "start": "452160",
    "end": "459510"
  },
  {
    "text": "single a wait going on but if you look at the reservations repository here this was developed by you know figuring out",
    "start": "459510",
    "end": "466290"
  },
  {
    "text": "what the try/except method needs so we injected a repository into try/except",
    "start": "466290",
    "end": "471690"
  },
  {
    "text": "or the method that or the object that try/except sits on the maitre d and then",
    "start": "471690",
    "end": "476940"
  },
  {
    "text": "I basically just developed if the the algorithm already the implementation and",
    "start": "476940",
    "end": "482400"
  },
  {
    "text": "then I figured out what it needs in order to do its job so this is known as the dependency inversion principle meaning the client gets to decide what",
    "start": "482400",
    "end": "491130"
  },
  {
    "text": "the API of the dependency looks like so that's the dependency inversion principle as one of the five you know",
    "start": "491130",
    "end": "497220"
  },
  {
    "text": "solid principles so so far so good and the means it looks like this but then you look at it and you say well but",
    "start": "497220",
    "end": "503580"
  },
  {
    "text": "really you know my implementation is I'm talking to a relational database so I'd like that to be asynchronous because",
    "start": "503580",
    "end": "509610"
  },
  {
    "text": "that might be more efficient in terms of server resources I'd like to make my implementation asynchronous and in order",
    "start": "509610",
    "end": "516210"
  },
  {
    "text": "to do that you have to change the types instead of returning just normal types you have to return tasks and we've now",
    "start": "516210",
    "end": "523260"
  },
  {
    "text": "introduced a leaky abstraction you know an implementation detail is leaking into",
    "start": "523260",
    "end": "528600"
  },
  {
    "text": "how the app fraction is defined this is no longer the dependency inversion principle this is the implementation",
    "start": "528600",
    "end": "533879"
  },
  {
    "text": "that gets to decide what things look like this is the definition of a leaky",
    "start": "533879",
    "end": "539129"
  },
  {
    "text": "abstraction and then you can say well yeah but ok fair enough but who are we really kidding you know we called it a",
    "start": "539129",
    "end": "544589"
  },
  {
    "text": "repository but everyone does understands that it's a database so ok is it really that important and you know I may be",
    "start": "544589",
    "end": "551879"
  },
  {
    "text": "able to you know I may buy that argument and say ok fair enough its repository represents some sort of our process",
    "start": "551879",
    "end": "558600"
  },
  {
    "text": "resource so it's it's I can accept that the argument that that needs to be asynchronous ok let's just move on and",
    "start": "558600",
    "end": "564600"
  },
  {
    "text": "see where this leads us ok I buy the argument fair enough so going back to",
    "start": "564600",
    "end": "570389"
  },
  {
    "text": "the try accept method which is the one that consumes that repository interface in order to make things work now I have",
    "start": "570389",
    "end": "576959"
  },
  {
    "text": "to add a sink in the weight keywords it's not a big deal with just a few things that we have to add so that's not",
    "start": "576959",
    "end": "583050"
  },
  {
    "text": "so bad I also have to change the return type to a task and this means I also now",
    "start": "583050",
    "end": "590040"
  },
  {
    "text": "have to change the return type of my interface definition in a Maitre D' now",
    "start": "590040",
    "end": "595740"
  },
  {
    "text": "at this point these are now this annoys me because you know I could I can buy the argument that the repository is an",
    "start": "595740",
    "end": "601740"
  },
  {
    "text": "hour process resource that needs to be asynchronous ok fine I buy that this is a domain concept why my business",
    "start": "601740",
    "end": "609029"
  },
  {
    "text": "decision logic has to be asynchronous is not clear there is nothing in the",
    "start": "609029",
    "end": "614730"
  },
  {
    "text": "concept of making a business decision that says this has to happen asynchronously but it for technical",
    "start": "614730",
    "end": "620309"
  },
  {
    "text": "reasons it does but you know conceptually there's no reason for that so I find this annoying but we can move",
    "start": "620309",
    "end": "627480"
  },
  {
    "text": "on and look at the post method we just have to add a weight on that as well now because try/except is asynchronous and",
    "start": "627480",
    "end": "634019"
  },
  {
    "text": "that means we also have to add you know async and return a task so so far so",
    "start": "634019",
    "end": "640439"
  },
  {
    "text": "good now at this point we're basically done because most web frameworks nowadays understand asynchronous",
    "start": "640439",
    "end": "645509"
  },
  {
    "text": "programming so that's that's good so we're done and what I've shown you here is is basically a conclusion that other",
    "start": "645509",
    "end": "652769"
  },
  {
    "text": "people have reached a long time ago you know if you want we think you need to be easing all the way so nothing new",
    "start": "652769",
    "end": "659420"
  },
  {
    "text": "in this and this is not the point of the talk is sort of like the premise and people will tell you that that's just",
    "start": "659420",
    "end": "666350"
  },
  {
    "text": "the way it is there's no other way and you know I always look up when people say you know category little statements",
    "start": "666350",
    "end": "673010"
  },
  {
    "text": "like this and say okay really you know I just have to come up with one counter example that proves that there is another way and then I will have",
    "start": "673010",
    "end": "679280"
  },
  {
    "text": "disproven that assertion there and and I can do that now to be clear this is the",
    "start": "679280",
    "end": "686690"
  },
  {
    "text": "you know the end of part 1 of the talk we've now established what's the problem is I'm gonna put it aside a little bit",
    "start": "686690",
    "end": "692300"
  },
  {
    "text": "and start talking about something else but ultimately I'm gonna show you another way and I want to be clear that",
    "start": "692300",
    "end": "698210"
  },
  {
    "text": "the other way I'm gonna show you I make no claim that that other way is better it's just another way and personally I",
    "start": "698210",
    "end": "706640"
  },
  {
    "text": "feel that you know I sometimes just using a sing in a way that like I just shown you that's perfectly fine it's a",
    "start": "706640",
    "end": "713630"
  },
  {
    "text": "little bit of a compromise but it's easy and you just have to you know sprinkle on some async and a wait and then all",
    "start": "713630",
    "end": "718730"
  },
  {
    "text": "it's good in other cases I actually believe that what I'm going to show you next is the better option but I'm not",
    "start": "718730",
    "end": "726260"
  },
  {
    "text": "even you know on you know one side or the other side of that fence it depends you know like all good decisions so the",
    "start": "726260",
    "end": "733400"
  },
  {
    "text": "point of the talk is just to you know inform you that there is an alternative and now when you are aware that that",
    "start": "733400",
    "end": "739520"
  },
  {
    "text": "alternative exists you can make a proper choice if you don't know if you only know one way of doing things you have no",
    "start": "739520",
    "end": "745250"
  },
  {
    "text": "choice if you know more than one way of doing things now you have a choice so that's the point all right so I'm gonna",
    "start": "745250",
    "end": "752390"
  },
  {
    "text": "put this problem aside a little bit and I'm gonna start looking and another frequently asked question and that is",
    "start": "752390",
    "end": "758210"
  },
  {
    "text": "how do you get the value out of my monette now I'm not going to assume that you know what a monad is we'll get back",
    "start": "758210",
    "end": "763970"
  },
  {
    "text": "to that in a little while but in short the answer to this question is mu so mu",
    "start": "763970",
    "end": "770630"
  },
  {
    "text": "is this character basically means something like null void emptiness something like that but there is a",
    "start": "770630",
    "end": "776180"
  },
  {
    "text": "tradition in Zen Buddhist philosophy that interprets this this word as",
    "start": "776180",
    "end": "782270"
  },
  {
    "text": "meaning on ask the question and if you want a Western perspective on this whole send Buddhist philosophy thing they",
    "start": "782270",
    "end": "789250"
  },
  {
    "text": "do worse with your time than reading zen and the art of motorcycle maintenance but since your program as you probably rather want to read a grade Alisha box",
    "start": "789250",
    "end": "796569"
  },
  {
    "text": "because that's actually written by a computer science system but it also talks about the same idea you know on asking the question we we see that a lot",
    "start": "796569",
    "end": "804579"
  },
  {
    "text": "when people are trying to learn new things particularly you know in information technology and programming",
    "start": "804579",
    "end": "809670"
  },
  {
    "text": "there's a related problem called the XY problem which is so common on Stack",
    "start": "809670",
    "end": "814750"
  },
  {
    "text": "Overflow that Stack Overflow has a FAQ about that basically the curse when",
    "start": "814750",
    "end": "819819"
  },
  {
    "text": "people are trying to learn new things so learning a new programming language learning a new library learning a new",
    "start": "819819",
    "end": "825100"
  },
  {
    "text": "framework whatever it is we we see this happening a lot and the way to explain this is that we we could say you have",
    "start": "825100",
    "end": "832420"
  },
  {
    "text": "some sort of you're trying to learn something new trying to learn a new way of doing things and you're trying to accomplish a goal and we'll call that",
    "start": "832420",
    "end": "838660"
  },
  {
    "text": "goal why and based on your knowledge about other things that you already know",
    "start": "838660",
    "end": "844930"
  },
  {
    "text": "you form a plan for how you want to accomplish your goal and that plan you",
    "start": "844930",
    "end": "850269"
  },
  {
    "text": "know involves a series of steps one of the steps we can call that X you're",
    "start": "850269",
    "end": "855279"
  },
  {
    "text": "stuck on that step you can't figure out figure out how to do X and you think you know if I can just figure out how to do",
    "start": "855279",
    "end": "860709"
  },
  {
    "text": "X I know how to do all the other steps and that will enable me to accomplish my goal why so you go on Stack Overflow or",
    "start": "860709",
    "end": "868899"
  },
  {
    "text": "somewhere else and you say how do I do X and then you're met with a barrage of you know why do you want to do X that's",
    "start": "868899",
    "end": "874389"
  },
  {
    "text": "stupid you know quit asking stupid questions or whatever people say on Stack Overflow but if you M managed to",
    "start": "874389",
    "end": "881470"
  },
  {
    "text": "find someone who would actually interested in engaging in a real dialogue with you and you know together",
    "start": "881470",
    "end": "886959"
  },
  {
    "text": "you may be able to flush out that you're really trying to do Y and as soon as the expert that's trying to help you figure",
    "start": "886959",
    "end": "893980"
  },
  {
    "text": "this out that oh you read try to do y okay in that case you should do that and the set will enable you to do y you not",
    "start": "893980",
    "end": "901509"
  },
  {
    "text": "need the other thing makes sense you know we're going to come from but in the new thing you're trying to learn that's",
    "start": "901509",
    "end": "906699"
  },
  {
    "text": "just not a thing at all there's a completely different way of approaching the problem so this this happens a lot",
    "start": "906699",
    "end": "912399"
  },
  {
    "text": "now this happens a lot when people are starting to look into functional programming in statically typed",
    "start": "912399",
    "end": "917439"
  },
  {
    "text": "languages so we can sort of what I've tried to do here is I sort of try to boil down all sorts of detail questions into this common",
    "start": "917439",
    "end": "923900"
  },
  {
    "text": "question you know how do I get the value out of my monad because it sort of like often boils down into that and the short",
    "start": "923900",
    "end": "930080"
  },
  {
    "text": "answer is that you don't but hmm I haven't told you what a monad is and I'm",
    "start": "930080",
    "end": "936770"
  },
  {
    "text": "not assuming that you know what it is so we'll just briefly cover that I think you can do this in about 10 minutes so in short monad is a functor you can",
    "start": "936770",
    "end": "944450"
  },
  {
    "text": "flatten and you go okay fair enough what's a functor it's not really helpful so we will have to start with you know",
    "start": "944450",
    "end": "950720"
  },
  {
    "text": "just defining what a functor is and once you understood what that is you know Mona it's actually pretty on",
    "start": "950720",
    "end": "955910"
  },
  {
    "text": "pretty easy to understand what you want you understand what a functor is and the fact it's not that hard to understand so",
    "start": "955910",
    "end": "961100"
  },
  {
    "text": "it's you know you know Mona's have been you know made into this scary thing that it doesn't need to be at all it's it's",
    "start": "961100",
    "end": "967820"
  },
  {
    "text": "pretty straightforward actually so a functor is a data container it's not a",
    "start": "967820",
    "end": "973280"
  },
  {
    "text": "docker container it's not a dependency injection container it's not a shipping container it's just a data structure",
    "start": "973280",
    "end": "979400"
  },
  {
    "text": "that contains values if you will or other data there so we can imagine that we can draw it as some sort of rectangle",
    "start": "979400",
    "end": "985610"
  },
  {
    "text": "here so this would be some sort of data type that's generically typed so it's a container of other objects so you know",
    "start": "985610",
    "end": "993410"
  },
  {
    "text": "it could be foo of T and that would be a container of things of the type T you know generically typed and in order for",
    "start": "993410",
    "end": "1000520"
  },
  {
    "text": "data container to be a functor it must support something we call a structure preserving map and that means we can",
    "start": "1000520",
    "end": "1007300"
  },
  {
    "text": "translate all the data that's inside the container and the return value of making",
    "start": "1007300",
    "end": "1014470"
  },
  {
    "text": "such a translation is a new container with all the contents translated so this seems a little bit abstract so let's put",
    "start": "1014470",
    "end": "1020380"
  },
  {
    "text": "some examples in so the simplest example of a functor is some sort of collection so this could be a list of TI a mobile",
    "start": "1020380",
    "end": "1027130"
  },
  {
    "text": "of T you know an array whatever all of these things together is just the list function is that is example of one type",
    "start": "1027130",
    "end": "1034180"
  },
  {
    "text": "of functor functors are much more abstract idea so a structure preserving",
    "start": "1034180",
    "end": "1040000"
  },
  {
    "text": "map could be something like this where you say well let's just add one to each of those numbers and now I have a new collection with some other numbers but",
    "start": "1040000",
    "end": "1048310"
  },
  {
    "text": "since it is a generically type container we don't have to stick stick to numbers we can translate all the numbers into",
    "start": "1048310",
    "end": "1053800"
  },
  {
    "text": "strings we could translate them all into boolean values so this idea about this",
    "start": "1053800",
    "end": "1059300"
  },
  {
    "text": "translation being structured for serving it's it depends a little bit about what the container me is you know what the",
    "start": "1059300",
    "end": "1065660"
  },
  {
    "text": "function is what the structure is but for collections here it's something as it relates to the size of the container",
    "start": "1065660",
    "end": "1072620"
  },
  {
    "text": "so you'll notice the input container there has the size of six elements so all the outputs also have the size of",
    "start": "1072620",
    "end": "1078110"
  },
  {
    "text": "six elements and the order of all the output collections here is determined by the order of the elements in the input",
    "start": "1078110",
    "end": "1084320"
  },
  {
    "text": "collection so that's why you know particularly on the third example there was boolean values that's why it says",
    "start": "1084320",
    "end": "1089690"
  },
  {
    "text": "false false false true true false and not in some other order and you could also say well why do we need to have all",
    "start": "1089690",
    "end": "1095330"
  },
  {
    "text": "of that repetition because there's you know only two values true and false why don't we just collapse them well because",
    "start": "1095330",
    "end": "1101060"
  },
  {
    "text": "this is not a set operation this is just a translation of collections and we preserve the structure of the original",
    "start": "1101060",
    "end": "1107150"
  },
  {
    "text": "container so that what is that's what it means to have a structure for serving nav for collections and I'll talk about",
    "start": "1107150",
    "end": "1113690"
  },
  {
    "text": "what it means for other functions in a moment now one thing we'll also notice is that the output of such an operation",
    "start": "1113690",
    "end": "1120050"
  },
  {
    "text": "is itself a container and that means we could use that as an input for another step so we can now you know compose",
    "start": "1120050",
    "end": "1125990"
  },
  {
    "text": "things together like that and if we want to see what that looks like in c-sharp for example we could start by creating",
    "start": "1125990",
    "end": "1131330"
  },
  {
    "text": "an array it doesn't have to be an array but I will tend to use a race throughout this talk because that's just the terse",
    "start": "1131330",
    "end": "1137900"
  },
  {
    "text": "syntax and G sharp but this could also have been a list of T or something else",
    "start": "1137900",
    "end": "1143350"
  },
  {
    "text": "so here we have an array of numbers the structure preserving map in c-sharp is",
    "start": "1143350",
    "end": "1148550"
  },
  {
    "text": "called select most other languages call it map but for reasons it's called select in c-sharp so here I just take",
    "start": "1148550",
    "end": "1155840"
  },
  {
    "text": "you know for each of the element it is to add one to those elements and the output of that is a new type of collection and I can do it a second step",
    "start": "1155840",
    "end": "1163130"
  },
  {
    "text": "and turn them all into strings and I like this and now I have you know an array of strings so if you look at",
    "start": "1163130",
    "end": "1169340"
  },
  {
    "text": "something like this you'd say well okay so this is a functor turns out also to be a monad and then you look at this and",
    "start": "1169340",
    "end": "1175520"
  },
  {
    "text": "you say well why why our people are asking that question how do I get the value of my Moana because it's pretty",
    "start": "1175520",
    "end": "1180830"
  },
  {
    "text": "clear that if you understand that this is a monad we'll get back to what alone in a moment it seems fairly clear that",
    "start": "1180830",
    "end": "1187080"
  },
  {
    "text": "it's not really a sensible question to ask you know how to get the value out of my array because okay which value the",
    "start": "1187080",
    "end": "1194610"
  },
  {
    "text": "first one the third one the last one what are you talking about you know you have to be more specific than that and what do you want to do if they array is",
    "start": "1194610",
    "end": "1201090"
  },
  {
    "text": "empty you know you know that an array might be empty so the value is nonsensical it doesn't make any sense",
    "start": "1201090",
    "end": "1207840"
  },
  {
    "text": "you have to you know say you know which values you want and what do you want to do if the array is empty at least you",
    "start": "1207840",
    "end": "1213330"
  },
  {
    "text": "have to tell me those things so people don't ask that question but on the other hand most people don't realize that you",
    "start": "1213330",
    "end": "1219750"
  },
  {
    "text": "know using select like this that you're actually using a list as a functor because the Microsoft documentation",
    "start": "1219750",
    "end": "1225540"
  },
  {
    "text": "doesn't tell you that for reasons that I've never really been able to understand so I believe that when people",
    "start": "1225540",
    "end": "1231450"
  },
  {
    "text": "you know encounter the concept of functions and monads for the first time they tend to encounter it in other",
    "start": "1231450",
    "end": "1238140"
  },
  {
    "text": "contexts and often they encountered it in the context where you know I call them unit containers so there's a subset",
    "start": "1238140",
    "end": "1244560"
  },
  {
    "text": "of monads that have this extra quality that they are containers of exactly one",
    "start": "1244560",
    "end": "1251760"
  },
  {
    "text": "value now unit containers just my terminology one example might be lazy of tea this has been around internet for a",
    "start": "1251760",
    "end": "1258630"
  },
  {
    "text": "decade or more and this is a lazy computation it is guaranteed to contain exactly one value of the type T it's",
    "start": "1258630",
    "end": "1267150"
  },
  {
    "text": "just lazily computed so in the dotnet in Internet itself it's not a functor",
    "start": "1267150",
    "end": "1273810"
  },
  {
    "text": "because doesn't have select method but we can add one we can add a select method as an extension method that turns",
    "start": "1273810",
    "end": "1279180"
  },
  {
    "text": "a lazy of T into lazy of T result and the implementation is basically just a one-liner I'm not gonna dwell too much",
    "start": "1279180",
    "end": "1286050"
  },
  {
    "text": "in the implementation I'd rather you know talk about how you can use such a thing so what I can do here is as an",
    "start": "1286050",
    "end": "1293040"
  },
  {
    "text": "example I can create a lazy of int and even though you'll notice that there's a threat of sleep here that will block the",
    "start": "1293040",
    "end": "1299940"
  },
  {
    "text": "threat for 10 seconds now that lazy of int you know all this expression it",
    "start": "1299940",
    "end": "1304980"
  },
  {
    "text": "completes immediately because it's a lazy evaluated computation and what I",
    "start": "1304980",
    "end": "1310320"
  },
  {
    "text": "can do now is I can transform my lazy int into a lazy of string using my new select method and",
    "start": "1310320",
    "end": "1316240"
  },
  {
    "text": "still completes immediately if I want to you know get the string out of why I can",
    "start": "1316240",
    "end": "1321490"
  },
  {
    "text": "force evaluation by going dot a value and at this point it's gonna block for ten seconds if I do it a second time",
    "start": "1321490",
    "end": "1327610"
  },
  {
    "text": "it's just gonna complete immediately again because lacy of t remembers the value once it's evaluated in once so",
    "start": "1327610",
    "end": "1335140"
  },
  {
    "text": "that Y variable that lacy of string behaves exactly like you'd imagine of",
    "start": "1335140",
    "end": "1341260"
  },
  {
    "text": "how you'd expect a lazy computation to behave and that means that select projection there preserves the",
    "start": "1341260",
    "end": "1347800"
  },
  {
    "text": "invariance or preserves the expected behavior of what it means to be a lazy computation so that is a structure for",
    "start": "1347800",
    "end": "1353980"
  },
  {
    "text": "serving map so that means lazy of T is a factor we just have to add that you know",
    "start": "1353980",
    "end": "1361809"
  },
  {
    "text": "selects extension method and that makes it a functor not only can we do that",
    "start": "1361809",
    "end": "1366880"
  },
  {
    "text": "with lazy of T we can do that with tasks for T as well you know as you can tell the implementation is a little bit different but we can walk through a very",
    "start": "1366880",
    "end": "1374020"
  },
  {
    "text": "similar example here you know creating a task of int complete immediately even",
    "start": "1374020",
    "end": "1379540"
  },
  {
    "text": "though the task starts to run on a background process if I want to you know turn my task of int into a task of",
    "start": "1379540",
    "end": "1386320"
  },
  {
    "text": "string I can now do that with my new select method and that still completes immediately only when I await the value",
    "start": "1386320",
    "end": "1393730"
  },
  {
    "text": "you will it block for whatever time is left from there was 10 seconds that it's going to delay if I were a weight the",
    "start": "1393730",
    "end": "1400330"
  },
  {
    "text": "variable once more again it completes immediately because like lazy of t task of t also remembers the result once it's",
    "start": "1400330",
    "end": "1407380"
  },
  {
    "text": "calculated at once so again you know all the things we'd expect from a task of",
    "start": "1407380",
    "end": "1413260"
  },
  {
    "text": "string is true even though we've made their projection that selectmen that preserves the invariance of what it",
    "start": "1413260",
    "end": "1419410"
  },
  {
    "text": "means to be an asynchronous task and that means it's a structure for serving map it preserves the structure of what",
    "start": "1419410",
    "end": "1424870"
  },
  {
    "text": "it means to be asynchronous so that's a functor as well so not only is lazy of t a functor task of TC",
    "start": "1424870",
    "end": "1431230"
  },
  {
    "text": "functor as well so you'll notice that I've written you know this selects",
    "start": "1431230",
    "end": "1436809"
  },
  {
    "text": "method called using method call syntax but I could also have written it using query syntax like this so normally when",
    "start": "1436809",
    "end": "1443710"
  },
  {
    "text": "people see query syntax if they use it at all they think of it as being something related to ienumerable or",
    "start": "1443710",
    "end": "1450120"
  },
  {
    "text": "maybe i queryable in this case if X is ienumerable of in then Y is inferred to be ienumerable of string but now that we",
    "start": "1450120",
    "end": "1458070"
  },
  {
    "text": "have those select methods for lazy of T that means this syntax actually also",
    "start": "1458070",
    "end": "1463470"
  },
  {
    "text": "works for lazy of T so if you have a lazy of int you can turn that into a lazy of string using query syntax and",
    "start": "1463470",
    "end": "1469530"
  },
  {
    "text": "the same thing is true for tasks so this might be a little bit surprising they said you just have to add the Select",
    "start": "1469530",
    "end": "1475740"
  },
  {
    "text": "method and then this syntax is now all of a sudden available to you it wasn't",
    "start": "1475740",
    "end": "1481200"
  },
  {
    "text": "before but by adding the Select method it becomes available and you could do this with your own custom types and you",
    "start": "1481200",
    "end": "1486240"
  },
  {
    "text": "say wow what is the magic that makes this happen well the magic that makes this happen is because the C sharp team",
    "start": "1486240",
    "end": "1492450"
  },
  {
    "text": "designed that language feature around the concept of a functor so basically they said well if the type looks like a",
    "start": "1492450",
    "end": "1499110"
  },
  {
    "text": "functor because it has the appropriate select method then this this syntax will compile so the the C sharp understands",
    "start": "1499110",
    "end": "1508830"
  },
  {
    "text": "functors and it understands monads as well actually so we haven't talked about what a monad is so that's the next thing",
    "start": "1508830",
    "end": "1515549"
  },
  {
    "text": "it's a function you can flatten and then you go say well what what does that mean we know one-wayness a function not flat",
    "start": "1515549",
    "end": "1521010"
  },
  {
    "text": "and so I'm gonna show you a couple of examples of that as well so we go back to you two lists first and then we've",
    "start": "1521010",
    "end": "1527040"
  },
  {
    "text": "kind of look at tasks in in two minutes so a string like this one here has a",
    "start": "1527040",
    "end": "1532950"
  },
  {
    "text": "split instance method so you can you say this method to split a string on the comma for example like this one and what",
    "start": "1532950",
    "end": "1539820"
  },
  {
    "text": "you get is an array of strings what if you have an array of comma separated",
    "start": "1539820",
    "end": "1545370"
  },
  {
    "text": "strings like this one though now if you go select on that one you say well I'm gonna select each of the strings are not",
    "start": "1545370",
    "end": "1551760"
  },
  {
    "text": "going to split them in that case you kind of get a nested array you get an array of an array of strings and that's",
    "start": "1551760",
    "end": "1558990"
  },
  {
    "text": "not always what you want sometimes you just want a flat list so there's another method you can use for that you can use",
    "start": "1558990",
    "end": "1564179"
  },
  {
    "text": "select many and if you use select many you get a flat list so why is it called",
    "start": "1564179",
    "end": "1569580"
  },
  {
    "text": "select many I believe the reason for that I haven't haven't any authoritative source on that but I believe that the",
    "start": "1569580",
    "end": "1575580"
  },
  {
    "text": "reason for that is that when you're doing a select what happens inside that lambda expression produces many values",
    "start": "1575580",
    "end": "1581490"
  },
  {
    "text": "you know split produces many values so you're doing select and you're selecting many values and then you're flattening",
    "start": "1581490",
    "end": "1587970"
  },
  {
    "text": "as you go so that's why it's called select many that's my theory anyway but you'll notice that it enables us to",
    "start": "1587970",
    "end": "1593970"
  },
  {
    "text": "flatten as we go and that capability you know this method select many that's",
    "start": "1593970",
    "end": "1600450"
  },
  {
    "text": "what turns a function into a monad if your father can do this also then it's a",
    "start": "1600450",
    "end": "1605880"
  },
  {
    "text": "monad that's basically what it means there's a little bit more to it but that's the intuition you need that's basically all you need to know now you",
    "start": "1605880",
    "end": "1611670"
  },
  {
    "text": "understand what a monad is so what about something I task could they be nested as",
    "start": "1611670",
    "end": "1617040"
  },
  {
    "text": "well well yeah here's a task of Ind here's another task of IND what if I",
    "start": "1617040",
    "end": "1622290"
  },
  {
    "text": "wanted to add them together I want to use my new select query I can try to do that but you know the result of that Zed",
    "start": "1622290",
    "end": "1629250"
  },
  {
    "text": "turns out to be a task of a task of an int so that's an astute task how do I",
    "start": "1629250",
    "end": "1634710"
  },
  {
    "text": "get the value out of that well you can actually do this you know wait oh wait Zed that's a little bit of audio I was a",
    "start": "1634710",
    "end": "1639990"
  },
  {
    "text": "little bit surprised when I discovered that you can write stuff like that but you can but imagine that you'd nest the tasks even further and then you would",
    "start": "1639990",
    "end": "1646350"
  },
  {
    "text": "have to go a waiter waiter waiter waiter waiter Zed that's that seems a little bit clunky that's not really the nicest",
    "start": "1646350",
    "end": "1651840"
  },
  {
    "text": "way of writing code so um can we flatten as we go yes we can we just need to add",
    "start": "1651840",
    "end": "1659070"
  },
  {
    "text": "a select many extension method to task with T and I'm not going to show you what it looks like you can google it",
    "start": "1659070",
    "end": "1664380"
  },
  {
    "text": "it's pretty straightforward or it might be a good exercise but if you add a select many extension method",
    "start": "1664380",
    "end": "1669720"
  },
  {
    "text": "you can do that and then we're flattening as we go and then Z is just a normal unlisted task event and once",
    "start": "1669720",
    "end": "1677730"
  },
  {
    "text": "you've added that select many methods you can also rewrite the same query in query syntax and now most of the async",
    "start": "1677730",
    "end": "1684810"
  },
  {
    "text": "and await keywords actually disappear and you can just have this sort of Cartesian you know you know combination",
    "start": "1684810",
    "end": "1691260"
  },
  {
    "text": "of things happening here so that works as well so tasks of T is a monad just",
    "start": "1691260",
    "end": "1698100"
  },
  {
    "text": "like lay shift you can do the same thing with a shifty that's a monad as well right so there's definitely a subset of",
    "start": "1698100",
    "end": "1705810"
  },
  {
    "text": "monads where it makes sense to ask the question you know how do I get the value out of my monad because you can",
    "start": "1705810",
    "end": "1711779"
  },
  {
    "text": "and for lacy of string you just have to go dot value and the same thing applies to you know task of string you can await",
    "start": "1711779",
    "end": "1718529"
  },
  {
    "text": "it you see this in other languages as well we have something very similar in F sharp called async of string that you",
    "start": "1718529",
    "end": "1724019"
  },
  {
    "text": "can also you know get the string out of it by running the asynchronous computation even Haskell has quite a few",
    "start": "1724019",
    "end": "1730679"
  },
  {
    "text": "of those unit containers simplest one is one called identity but you can get the",
    "start": "1730679",
    "end": "1735809"
  },
  {
    "text": "value out of those containers if you if you'd like to there so this is a concept that you know pops up in many different",
    "start": "1735809",
    "end": "1741299"
  },
  {
    "text": "languages so these are not all monads these are just some Mona's these are the",
    "start": "1741299",
    "end": "1746369"
  },
  {
    "text": "containers that I call unit containers because they're guaranteed to contain exactly one value and for that subset it",
    "start": "1746369",
    "end": "1752249"
  },
  {
    "text": "makes sense to ask the question how do you get the value out of it but where think it really starts to break down for",
    "start": "1752249",
    "end": "1759059"
  },
  {
    "text": "people is when you run into what I call semi containers so these are containers of data that looked like they contain a",
    "start": "1759059",
    "end": "1766499"
  },
  {
    "text": "single value except for the cases where it doesn't so it may or may not contain",
    "start": "1766499",
    "end": "1772469"
  },
  {
    "text": "a value and you probably know nala Belov T this is again it's been around internet for many many years",
    "start": "1772469",
    "end": "1778649"
  },
  {
    "text": "so with nullable of T what people are often do what you've seen an example of before is you have some sort of novel in",
    "start": "1778649",
    "end": "1786029"
  },
  {
    "text": "for example an ID and then you start checking you know is it know if it's not know I know it's safe to access ID dot",
    "start": "1786029",
    "end": "1793200"
  },
  {
    "text": "value in this case value is a customer ID and I can create a new customer out of the customer ID but you'll notice",
    "start": "1793200",
    "end": "1801210"
  },
  {
    "text": "that it says return here so this little code snippet is something that sits in a large method that returns a customer",
    "start": "1801210",
    "end": "1807450"
  },
  {
    "text": "that's basically what we can infer from this so we if we want to return a",
    "start": "1807450",
    "end": "1812489"
  },
  {
    "text": "customer we need to also tell the compiler okay what do we do if ID turns",
    "start": "1812489",
    "end": "1818460"
  },
  {
    "text": "out to be no there isn't an else branch you must deal with this otherwise your code will not compile and then people go",
    "start": "1818460",
    "end": "1824429"
  },
  {
    "text": "I don't know what to do I'll throw an exception and if you write code like",
    "start": "1824429",
    "end": "1830820"
  },
  {
    "text": "this and you know you calculate this in a little method you know now you have a little method that says you know get",
    "start": "1830820",
    "end": "1835859"
  },
  {
    "text": "customer the returns a customer and the next thing you know I come by and I say oh there's this method that returns a",
    "start": "1835859",
    "end": "1841440"
  },
  {
    "text": "customer I'm gonna call that I'm gonna you know interacting with the customer that I get as a return value hey all my",
    "start": "1841440",
    "end": "1846660"
  },
  {
    "text": "code compiles that's good let's put it in production and then once I put it in production you know half the time it's",
    "start": "1846660",
    "end": "1852060"
  },
  {
    "text": "gonna throw that exception because I didn't realize that that was the case so if you're structuring the code like this",
    "start": "1852060",
    "end": "1857580"
  },
  {
    "text": "you're basically just you know putting out a minefield where your code is just you know waiting to explode at runtime",
    "start": "1857580",
    "end": "1864570"
  },
  {
    "text": "at various different cases so it makes the code really hard to to maintain and understand what's going on there so",
    "start": "1864570",
    "end": "1870540"
  },
  {
    "text": "don't do that that's that's a bad way of structuring code but then the problem is you know what then then what are we",
    "start": "1870540",
    "end": "1876150"
  },
  {
    "text": "supposed to do so let's look at that okay turns out that you know functors might actually help us so we can make na",
    "start": "1876150",
    "end": "1882780"
  },
  {
    "text": "level of T a functor with some constraints however the constraints are that T that's the input generic type and",
    "start": "1882780",
    "end": "1889950"
  },
  {
    "text": "T resolved that's the output generic type must both be structs you know they must both be value types and the reason",
    "start": "1889950",
    "end": "1896250"
  },
  {
    "text": "for that is that your novel of T itself has that constraint on the type definition that T must be a struct so",
    "start": "1896250",
    "end": "1904140"
  },
  {
    "text": "within that subset of all types and net though novelty is still functor so you",
    "start": "1904140",
    "end": "1911160"
  },
  {
    "text": "can write code like this you can say well I can translate an honorable of int int inaudible of bool because they're",
    "start": "1911160",
    "end": "1916560"
  },
  {
    "text": "both inner value types so that works this compiles and then you look at the code you say oh that's nice",
    "start": "1916560",
    "end": "1922650"
  },
  {
    "text": "there's no checking for null let's know if else branch you know all that stuff is just hidden away inside that select",
    "start": "1922650",
    "end": "1928500"
  },
  {
    "text": "method that's really neat so I could just you know go on and do select select select and just stay",
    "start": "1928500",
    "end": "1933780"
  },
  {
    "text": "inside that you know inaudible little world that's that's nice can I do",
    "start": "1933780",
    "end": "1939600"
  },
  {
    "text": "something similar with mine you know customer ID then could I do something like this that would be nice and",
    "start": "1939600",
    "end": "1946140"
  },
  {
    "text": "unfortunately you can't because this doesn't compile and it doesn't compile",
    "start": "1946140",
    "end": "1951600"
  },
  {
    "text": "because T and T resolved must be a struct and customer is not a value type",
    "start": "1951600",
    "end": "1957570"
  },
  {
    "text": "that's a reference type so therefore it doesn't compile but then maybe you're a little bit interested and you say well",
    "start": "1957570",
    "end": "1964260"
  },
  {
    "text": "that it'd be nice if we could could we somehow lift that constraint from nullable of T and saying well what if T",
    "start": "1964260",
    "end": "1970380"
  },
  {
    "text": "doesn't have to be a value type what if it could be anything that'd be nice but we can't change multiple of T",
    "start": "1970380",
    "end": "1976870"
  },
  {
    "text": "but we can introduce our own generically typed data containers so let's write one",
    "start": "1976870",
    "end": "1982780"
  },
  {
    "text": "called maybe of T now some people call this idea maybe some people call it option it's the same idea so various",
    "start": "1982780",
    "end": "1990910"
  },
  {
    "text": "different ways you can implement this here's the simplest one that I can easily illustrate we have a flag called",
    "start": "1990910",
    "end": "1996850"
  },
  {
    "text": "has item and then we have the item itself and then we have two constructor overload the first constructor doesn't",
    "start": "1996850",
    "end": "2003150"
  },
  {
    "text": "take any inputs so it just sets that flag to false has item is false item",
    "start": "2003150",
    "end": "2008520"
  },
  {
    "text": "itself is undefined it is uninitialized so we don't know exactly what that is in this case it's not safe to try to access",
    "start": "2008520",
    "end": "2015510"
  },
  {
    "text": "the item there is another constructor overloaded receives the item as an input argument and sets the flag to true which",
    "start": "2015510",
    "end": "2023130"
  },
  {
    "text": "basically means has item is true means the item is now initialized it is safe to access so this is generically typed",
    "start": "2023130",
    "end": "2030690"
  },
  {
    "text": "outer container we can make it a functor by making sure that there's a select method so far you've seen me do select",
    "start": "2030690",
    "end": "2037559"
  },
  {
    "text": "methods as extension methods but it can also be an instance method so we can just put it as an instance method on may",
    "start": "2037559",
    "end": "2043320"
  },
  {
    "text": "be of T and it basically looks like this so you'll notice that this is an instance method and on may be of T that",
    "start": "2043320",
    "end": "2049408"
  },
  {
    "text": "returns may be of T basalts and the way that we implement that is basically just looking at that flag so if has item is",
    "start": "2049409",
    "end": "2056580"
  },
  {
    "text": "true that means the item itself is initialized and it's safe to access it and since this is an instance of maybe",
    "start": "2056580",
    "end": "2064169"
  },
  {
    "text": "of T the type of item is T and we have this little selector coming in through",
    "start": "2064169",
    "end": "2070260"
  },
  {
    "text": "the argument which is a function that translates a tea into a tea result so",
    "start": "2070260",
    "end": "2075690"
  },
  {
    "text": "since we have a value of the type T we can call that selector function and that produces a value of the type T result",
    "start": "2075690",
    "end": "2081628"
  },
  {
    "text": "and then we can use that to populate a new maybe of T result by calling that constructor overload there takes you",
    "start": "2081629",
    "end": "2088230"
  },
  {
    "text": "know a T result value and we return that else we just return an empty one so",
    "start": "2088230",
    "end": "2094740"
  },
  {
    "text": "that's pretty straightforward this preserves the structure this is the structure preserving map because it",
    "start": "2094740",
    "end": "2100230"
  },
  {
    "text": "takes populated may be of T V of T values and turn them into populate or may be of T resolve values it takes",
    "start": "2100230",
    "end": "2105990"
  },
  {
    "text": "empty may be of T values and turns them into empty maybe of T resolve values so it",
    "start": "2105990",
    "end": "2111440"
  },
  {
    "text": "preserves the structure of what it means to be a maybe of T object if you will so",
    "start": "2111440",
    "end": "2116840"
  },
  {
    "text": "this is a functor as well you know maybe of T years now a functor and we can make it a monad by also creating a select many method I'm not",
    "start": "2116840",
    "end": "2123260"
  },
  {
    "text": "going to spend too much time talking about the select many method because we're not gonna use it that much actually we're mostly going to use the",
    "start": "2123260",
    "end": "2129470"
  },
  {
    "text": "function so before we return to the async dependency injection example just",
    "start": "2129470",
    "end": "2135980"
  },
  {
    "text": "kind of walk show you another little example about you know how this compose is in a very nice way so what we can do",
    "start": "2135980",
    "end": "2141530"
  },
  {
    "text": "is we can create a little wrapper a little helper around this idea of trying to pass a string into an integer and you",
    "start": "2141530",
    "end": "2148820"
  },
  {
    "text": "could say well but that capability already exists we can do you know in to try pass but again you know with the API",
    "start": "2148820",
    "end": "2156110"
  },
  {
    "text": "that you've given by top net itself you again run into this problem that you say",
    "start": "2156110",
    "end": "2161150"
  },
  {
    "text": "well you sort of need to branch and you say well okay if you find an integer that's fine but what do you do in the",
    "start": "2161150",
    "end": "2166460"
  },
  {
    "text": "else branch and in this case it's clear because we can return them populated maybe event if we can pass the integer",
    "start": "2166460",
    "end": "2173510"
  },
  {
    "text": "and we just return an empty one if we can't so instead of having to rely on you know throwing exceptions or",
    "start": "2173510",
    "end": "2180140"
  },
  {
    "text": "returning no less or something else this is always safe whatever whatever happens here what you",
    "start": "2180140",
    "end": "2186560"
  },
  {
    "text": "get that you actually get a real object bag you never get a non reference exception or anything from using you know an API like this and it composes so",
    "start": "2186560",
    "end": "2193850"
  },
  {
    "text": "we can do the same thing by trying to pass a date-time for example and it's entirely the same you know template that",
    "start": "2193850",
    "end": "2200240"
  },
  {
    "text": "we sort of apply to this sort of implementation and I'll show you how this composes so imagine that you have",
    "start": "2200240",
    "end": "2205970"
  },
  {
    "text": "to write an application that services you know some sort of car rental",
    "start": "2205970",
    "end": "2213250"
  },
  {
    "text": "organization so you start by asking the user you have a little method called collect date and when you call collect",
    "start": "2213970",
    "end": "2220700"
  },
  {
    "text": "aid it you know poses the question to the user please enter the date from which you",
    "start": "2220700",
    "end": "2226460"
  },
  {
    "text": "would like to rent the car and the user types and the date and that's a string and then you call try past date with",
    "start": "2226460",
    "end": "2233120"
  },
  {
    "text": "that string and you get a maybe of date time and then you ask another question you call collect number of days and it",
    "start": "2233120",
    "end": "2239030"
  },
  {
    "text": "says to the user please the enter the number of days you'd like to rent the car and the user enters a number and that's",
    "start": "2239030",
    "end": "2244819"
  },
  {
    "text": "a string and then you pass that string to try pass int and you get in a maybe",
    "start": "2244819",
    "end": "2250489"
  },
  {
    "text": "of impac and you've probably asked a lot of other questions and you sort of gather a lot of information that way and",
    "start": "2250489",
    "end": "2255709"
  },
  {
    "text": "now you want to compose all of that you know information into a contract because",
    "start": "2255709",
    "end": "2261109"
  },
  {
    "text": "you have a contract object that can calculate prices and so on so you start by you know you could we can use query",
    "start": "2261109",
    "end": "2267380"
  },
  {
    "text": "syntax for this it was greater maybe of contract and we'll start by saying from D and MD so that D is a date/time value",
    "start": "2267380",
    "end": "2275719"
  },
  {
    "text": "if it exists if this code runs at all that will be a date time and value from",
    "start": "2275719",
    "end": "2281959"
  },
  {
    "text": "I and M I that I will be an integer and we can keep on going like that so if all",
    "start": "2281959",
    "end": "2287989"
  },
  {
    "text": "those maybes are populated our maybe of contract will also be populated it's just one of them are you know empty then",
    "start": "2287989",
    "end": "2294589"
  },
  {
    "text": "that may be of contract will also be empty so this is a pretty easy and standardized way of doing data validation there's a little bit more of",
    "start": "2294589",
    "end": "2301309"
  },
  {
    "text": "a sophisticated way of doing that but this this it gets things done in a pinch so so far so good well then what often",
    "start": "2301309",
    "end": "2309079"
  },
  {
    "text": "happens is people say well okay but I have this contract and the contract has some methods where I can call to",
    "start": "2309079",
    "end": "2315229"
  },
  {
    "text": "calculate the price and I want to show a quote to my user my potential customers",
    "start": "2315229",
    "end": "2320269"
  },
  {
    "text": "so that they may decide to rent my car I need to get you know I need to get the",
    "start": "2320269",
    "end": "2326929"
  },
  {
    "text": "contract out of there maybe how to do that and people try to do something like",
    "start": "2326929",
    "end": "2332509"
  },
  {
    "text": "this but they say okay if MC has item I'll try to access the item and then the",
    "start": "2332509",
    "end": "2337519"
  },
  {
    "text": "item is a contract and then they can call calculate price yeah but that does not compile because I've very",
    "start": "2337519",
    "end": "2343909"
  },
  {
    "text": "deliberately designed my maybe API so that that doesn't work because you're not supposed to do this again this sort",
    "start": "2343909",
    "end": "2349699"
  },
  {
    "text": "of this style of programming is brittle because what happens if has item is false then what's going to be the value",
    "start": "2349699",
    "end": "2355609"
  },
  {
    "text": "of Q is it going to be zero do you want to run the risk of actually showing the",
    "start": "2355609",
    "end": "2360829"
  },
  {
    "text": "customer zero price on on the application they're interacting with oh you know there could be all sorts of",
    "start": "2360829",
    "end": "2367249"
  },
  {
    "text": "other issues that not you know result from this style of programming so you're not supposed to do that and that's why I",
    "start": "2367249",
    "end": "2373039"
  },
  {
    "text": "designed the maybe API so that this is not possible you know these has item and item exist but they're you know private class field",
    "start": "2373039",
    "end": "2379670"
  },
  {
    "text": "so you can't access them from the outside and that is by design so um if you're not supposed to do that then what",
    "start": "2379670",
    "end": "2385820"
  },
  {
    "text": "are you supposed to do well we already seen that you know maybe",
    "start": "2385820",
    "end": "2391160"
  },
  {
    "text": "of T is a functor so you can just do a structure preserving map you just say well let's just you know translate maybe",
    "start": "2391160",
    "end": "2396950"
  },
  {
    "text": "of contract it or maybe addressable by calling calculate price inside of it now this is a completely safe because if",
    "start": "2396950",
    "end": "2403130"
  },
  {
    "text": "there may be of contract is populated that then lambda expression is going to run and you cannot get a populated maybe",
    "start": "2403130",
    "end": "2408500"
  },
  {
    "text": "of decimal and if they may be of contract is empty nothing's gonna happen it's just gonna have a maybe of decimal",
    "start": "2408500",
    "end": "2414680"
  },
  {
    "text": "that's empty it's not gonna throw exceptions and you also notice that there's less code to write it means also",
    "start": "2414680",
    "end": "2420440"
  },
  {
    "text": "there's less code to understand so this basically generalizes and this is the general idea you know when",
    "start": "2420440",
    "end": "2426770"
  },
  {
    "text": "working with Mona's you know how do I get the value out of my Mona well you don't you inject the desired behavior into the Monad which is exactly what",
    "start": "2426770",
    "end": "2433460"
  },
  {
    "text": "happened here you know I took you know that calculate price and I just kept it inside the Select inside them there may",
    "start": "2433460",
    "end": "2440420"
  },
  {
    "text": "be environment if you will so I'm just going from one maybe value to another one and that's how Co and that's the how",
    "start": "2440420",
    "end": "2446030"
  },
  {
    "text": "you're supposed to work with functional nets and and I know what you're thinking",
    "start": "2446030",
    "end": "2451070"
  },
  {
    "text": "or maybe maybe you're thinking this yeah but ultimately I need to produce a results because I need to put something",
    "start": "2451070",
    "end": "2457700"
  },
  {
    "text": "on the screen so that the user can make a decision sure fair enough let's go back to collections for a",
    "start": "2457700",
    "end": "2464930"
  },
  {
    "text": "moment now here again we have collections of numbers and you could say if you don't want to put all the numbers",
    "start": "2464930",
    "end": "2472250"
  },
  {
    "text": "on the screen if you just want to put a single number of this on the screen of the user how would you do that well that",
    "start": "2472250",
    "end": "2479810"
  },
  {
    "text": "probably depends on how you want to produce that single number but maybe you just want to you know produce the sum",
    "start": "2479810",
    "end": "2484880"
  },
  {
    "text": "and you can put you know this particular number on the screen but but sum is a very specialized way of producing many",
    "start": "2484880",
    "end": "2491420"
  },
  {
    "text": "numbers into one maybe you want to build you know produce the product instead and there's no specialized product extension",
    "start": "2491420",
    "end": "2497780"
  },
  {
    "text": "method but there's a general purpose method called aggregate that you can use so the aggregate methods what that wants",
    "start": "2497780",
    "end": "2504770"
  },
  {
    "text": "you to do is you have to supply a little function a little lambda expression that says well given two values in this",
    "start": "2504770",
    "end": "2511550"
  },
  {
    "text": "case two integers please reduce it to one and I so that's that little lambda expression that says X comma Y and in",
    "start": "2511550",
    "end": "2518270"
  },
  {
    "text": "this case I'm just saying well I'm just gonna multiply them together so that takes two integers and turns them into one integer and this just happens you",
    "start": "2518270",
    "end": "2524960"
  },
  {
    "text": "know then it takes that one integer that you just produced and then it take gives you the next one and so it's just you know piecemeal reduces all the numbers",
    "start": "2524960",
    "end": "2531950"
  },
  {
    "text": "into one one number but you'll notice that I'm using the overload here that takes the seed and the seed is one and",
    "start": "2531950",
    "end": "2538910"
  },
  {
    "text": "the reason for that is it's not necessarily here necessary here but if you have an empty collection an empty",
    "start": "2538910",
    "end": "2545060"
  },
  {
    "text": "array aggregate wants to return an integer or whatever you want to return",
    "start": "2545060",
    "end": "2550400"
  },
  {
    "text": "whatever time you want to return but you can't return an integer from an empty array unless you tell it you know what's",
    "start": "2550400",
    "end": "2556250"
  },
  {
    "text": "the default values in this case I'm just using one because one time something is just the other number so this idea of",
    "start": "2556250",
    "end": "2564410"
  },
  {
    "text": "taking a seed and a little lambda expression that we can sort of use used",
    "start": "2564410",
    "end": "2569540"
  },
  {
    "text": "to do projections we can apply that to maybe of tea as well now this one by the",
    "start": "2569540",
    "end": "2575270"
  },
  {
    "text": "way it returns zero because one of the numbers is zero so that's not so interesting but let's take that add en apply it to maybe of tea so we'll create",
    "start": "2575270",
    "end": "2581810"
  },
  {
    "text": "another instance method on maybe of tea I'm not going to call it aggregate I'm going to call it match for reasons that",
    "start": "2581810",
    "end": "2587090"
  },
  {
    "text": "will become clear in a few minutes but this is the idea is that this is again",
    "start": "2587090",
    "end": "2593450"
  },
  {
    "text": "an instance method on maybe of tea and we will project as we go along so we",
    "start": "2593450",
    "end": "2598550"
  },
  {
    "text": "don't have to return a value of this of the same type T we can't project it to tea resolve as we go along but tea",
    "start": "2598550",
    "end": "2605210"
  },
  {
    "text": "results could be the same as tea eaters no nothing prevents that so how do we implement that again this is basically",
    "start": "2605210",
    "end": "2611000"
  },
  {
    "text": "just a one-liner you just look at the flag has item and if that's true you",
    "start": "2611000",
    "end": "2616010"
  },
  {
    "text": "know that the item is available that it's been initialized and it is a value of the type T and we have this little",
    "start": "2616010",
    "end": "2622340"
  },
  {
    "text": "function sitting up there and the argument is called just so if you're wondering about you know nothing and just why they're called that it's sort",
    "start": "2622340",
    "end": "2628190"
  },
  {
    "text": "of by convention that's what you normally call things in with maybes it's a little bit of an odd naming but just",
    "start": "2628190",
    "end": "2633800"
  },
  {
    "text": "as a function that takes a T value and returns the tea results so you can just call justify 'tom and return that and if",
    "start": "2633800",
    "end": "2640160"
  },
  {
    "text": "has item is false we fall on the other side of that ternary operator and then we can just return the nothing value which is also",
    "start": "2640160",
    "end": "2646369"
  },
  {
    "text": "of the type T result so again this is one of those methods where if you supply all the appropriate arguments there it",
    "start": "2646369",
    "end": "2652820"
  },
  {
    "text": "is completely safe to call this method it's never gonna throw exceptions unless you know they're null and then you will",
    "start": "2652820",
    "end": "2658579"
  },
  {
    "text": "get those argument null exceptions but apart from that you know it's always gonna work and it's very very simple to",
    "start": "2658579",
    "end": "2664520"
  },
  {
    "text": "call and you will know exactly what to do when you see the type signature so",
    "start": "2664520",
    "end": "2670310"
  },
  {
    "text": "now we can return to this question of how do I combine dependency injection with a sink and a weight without leaky",
    "start": "2670310",
    "end": "2675560"
  },
  {
    "text": "abstractions so this is part three of the talk now we have learned enough to see if we can address this question as",
    "start": "2675560",
    "end": "2681650"
  },
  {
    "text": "well so we we left it off by this",
    "start": "2681650",
    "end": "2686990"
  },
  {
    "text": "assertion that you know when you're doing asynchronous programming it has to be a single way and then I said well",
    "start": "2686990",
    "end": "2692450"
  },
  {
    "text": "yeah maybe not okay let's see if there's another way of doing things well we need to change things around a little bit so",
    "start": "2692450",
    "end": "2698630"
  },
  {
    "text": "the first thing I want to do is to move the IMP you operations to the boundary of the system this is a common trick",
    "start": "2698630",
    "end": "2703790"
  },
  {
    "text": "that you laughs this is sort of like you know we often hear you know functional programmers having catchphrases and and",
    "start": "2703790",
    "end": "2710000"
  },
  {
    "text": "one catchphrase is you know make illegal states unrepresentable you'll hear people say that all the time and you",
    "start": "2710000",
    "end": "2715010"
  },
  {
    "text": "also hear people say this a lot you know movie and pure operations to the boundary of the system turns out to be a good idea in object-oriented programming",
    "start": "2715010",
    "end": "2720890"
  },
  {
    "text": "as well basically the idea is that you know whatever interacts with the real world you know whatever queries your",
    "start": "2720890",
    "end": "2727250"
  },
  {
    "text": "database whatever sends off emails whatever you know paints things on the screen that's the operation that",
    "start": "2727250",
    "end": "2734180"
  },
  {
    "text": "interacts with the real world that should have happen at the edge of the system and you know we have an object",
    "start": "2734180",
    "end": "2739640"
  },
  {
    "text": "oriented architecture description called ports and adapters that talks it about exactly that style of architecture so",
    "start": "2739640",
    "end": "2746180"
  },
  {
    "text": "this is a tried and true approach to object oriented architecture as well so and what's an impure operation I think",
    "start": "2746180",
    "end": "2753740"
  },
  {
    "text": "it's easiest just to explain that by some examples because we have examples of two types of of impure operations",
    "start": "2753740",
    "end": "2760970"
  },
  {
    "text": "here and that there are only two types so we have examples of both so read read reservations he has impure because it's",
    "start": "2760970",
    "end": "2766640"
  },
  {
    "text": "non-deterministic in order for a function to be pure that a function must",
    "start": "2766640",
    "end": "2772579"
  },
  {
    "text": "be deterministic and that means if you call the function with the same input documents it should always produce",
    "start": "2772579",
    "end": "2777869"
  },
  {
    "text": "the same output value but when you do that with a database interaction you know you can call it outta base with you",
    "start": "2777869",
    "end": "2784289"
  },
  {
    "text": "know a particular set of input arguments and you could get one result and then you could do it you know five or ten",
    "start": "2784289",
    "end": "2789569"
  },
  {
    "text": "minutes later and now you get a another set of results because the state of the database changed in the meantime we",
    "start": "2789569",
    "end": "2795359"
  },
  {
    "text": "don't consider the state of the database to be part of the function so you know from the perspective of our code such an",
    "start": "2795359",
    "end": "2802679"
  },
  {
    "text": "operation looks non-deterministic so that means it's not pure and another",
    "start": "2802679",
    "end": "2808949"
  },
  {
    "text": "source of impurity is repository to create and that's because it has a side effect this would create a row in the",
    "start": "2808949",
    "end": "2814289"
  },
  {
    "text": "database every time we call it and pure functions are deterministic have no side",
    "start": "2814289",
    "end": "2819299"
  },
  {
    "text": "effects so if one of those two things are not true that means the operation is impure so these two operations are",
    "start": "2819299",
    "end": "2825509"
  },
  {
    "text": "impure for each their own reasons so we want to move those to the boundary of the system I don't want to get rid of",
    "start": "2825509",
    "end": "2831269"
  },
  {
    "text": "them because these are absolutely necessary things in order to get to make the entire application do what it's",
    "start": "2831269",
    "end": "2836429"
  },
  {
    "text": "supposed to do but they shouldn't happen here they should happen closer to the",
    "start": "2836429",
    "end": "2841679"
  },
  {
    "text": "boundary of the system at the edge of the system so how to do that well the",
    "start": "2841679",
    "end": "2847979"
  },
  {
    "text": "first one is the easiest one so we're gonna start with this one you'll notice that repository that read reservations this always happens this method call is",
    "start": "2847979",
    "end": "2855869"
  },
  {
    "text": "always you know happening as the first thing unconditionally so you could say",
    "start": "2855869",
    "end": "2861779"
  },
  {
    "text": "well okay so why is it the responsibility of this try accept method to make that method call could me just",
    "start": "2861779",
    "end": "2868529"
  },
  {
    "text": "say well the responsibility of this method is actually just to make a business decision why does it need to go",
    "start": "2868529",
    "end": "2873900"
  },
  {
    "text": "and and pretend that it's doing you know interacting with the database couldn't we just make the data itself the",
    "start": "2873900",
    "end": "2880079"
  },
  {
    "text": "reservations a prerequisite for you know making that business decision and then someone else might have the",
    "start": "2880079",
    "end": "2885569"
  },
  {
    "text": "responsibility of actually figuring out where that are to come from because then we can also decoupled our selves completely from you know how to produce",
    "start": "2885569",
    "end": "2891749"
  },
  {
    "text": "that data okay so we can do that we and the only thing we need to do is to you",
    "start": "2891749",
    "end": "2896969"
  },
  {
    "text": "know promote reservations to be a method argument so that's pretty",
    "start": "2896969",
    "end": "2902880"
  },
  {
    "text": "straightforward but sometimes you know things have to get worse before they get better and why",
    "start": "2902880",
    "end": "2908040"
  },
  {
    "text": "things that will get worse now is that it if we look at maitre d that interface from before in order for things to still",
    "start": "2908040",
    "end": "2914940"
  },
  {
    "text": "compile we need to change the interface definition to also take reservations as one of the method arguments because",
    "start": "2914940",
    "end": "2920430"
  },
  {
    "text": "otherwise we can't implement that interface and then if you say well that's a leaky abstraction if I've ever",
    "start": "2920430",
    "end": "2927510"
  },
  {
    "text": "seen one I would agree it is this is a leaky abstraction now this is only the",
    "start": "2927510",
    "end": "2932790"
  },
  {
    "text": "first in a series of refactorings that I'm going to do and trust me when I'm",
    "start": "2932790",
    "end": "2938040"
  },
  {
    "text": "done with all my refactorings this is not this is no longer gonna be a problem so just let's just move on and you'll",
    "start": "2938040",
    "end": "2945330"
  },
  {
    "text": "see towards the end why this is not a problem so we'll have to change the post",
    "start": "2945330",
    "end": "2951420"
  },
  {
    "text": "method a little bit as well and you notice we already injected Maitre D' we can just inject repository as well and",
    "start": "2951420",
    "end": "2958230"
  },
  {
    "text": "that means we can start by calling repository to read reservations and then now we have the reservations we can call",
    "start": "2958230",
    "end": "2964290"
  },
  {
    "text": "maitre d to try except with those reservations and the rest of the code is the same as before before we move on I",
    "start": "2964290",
    "end": "2971910"
  },
  {
    "text": "just want to remind you that the last part of the code here it does exactly what I've talked about that we you",
    "start": "2971910",
    "end": "2978120"
  },
  {
    "text": "shouldn't do you know it gets the value out of the moment you're checking whether the ID is null and if it's not null you go ID dot value and it's",
    "start": "2978120",
    "end": "2985140"
  },
  {
    "text": "possible to do this with inaudible of T but when we change things around it will no longer be possible you're not and",
    "start": "2985140",
    "end": "2991980"
  },
  {
    "text": "we're not really supposed to do this is this fairly simple code but it can you know if it gets a little bit more complicated this sort of programming",
    "start": "2991980",
    "end": "2999120"
  },
  {
    "text": "style starts to get you know brittle so we should avoid writing code like this",
    "start": "2999120",
    "end": "3004750"
  },
  {
    "text": "so how do we get rid of or not get rid of how do we move repository create to the post method as well now this one is",
    "start": "3004750",
    "end": "3011780"
  },
  {
    "text": "a little bit harder because this doesn't happen unconditionally there is a branching instruction sitting a little",
    "start": "3011780",
    "end": "3018920"
  },
  {
    "text": "bit above where you know if we decide that the capacity the remaining capacity is too little we return null instead and",
    "start": "3018920",
    "end": "3025730"
  },
  {
    "text": "that means we don't call the repository dot create so we need to figure out if we want to move repository create to the",
    "start": "3025730",
    "end": "3032200"
  },
  {
    "text": "boundary of the system we need to communicate to the caller the decision we made so that they can you know decide",
    "start": "3032200",
    "end": "3039650"
  },
  {
    "text": "whether or not to all repositories are created so how do we communicate the decision to the Kohler",
    "start": "3039650",
    "end": "3045039"
  },
  {
    "text": "well we are already doing that because we're returning a novel end and we you know I said the contract here is that if",
    "start": "3045039",
    "end": "3051279"
  },
  {
    "text": "that is null that means we didn't accept the reservation if it's an integer you have a reservation but the integer that",
    "start": "3051279",
    "end": "3057999"
  },
  {
    "text": "is being returned here comes from repository to create and if I move repository to create I will no longer",
    "start": "3057999",
    "end": "3064089"
  },
  {
    "text": "have an integer so I'm gonna need to replace that integer with something else and that's something else may not",
    "start": "3064089",
    "end": "3070630"
  },
  {
    "text": "actually be a value type so in general we again we have this constraint of multiple of T that it needs to be a",
    "start": "3070630",
    "end": "3076779"
  },
  {
    "text": "value type or a struct and if I want to replace that integer with something else that may not be a struct I can't do that",
    "start": "3076779",
    "end": "3083679"
  },
  {
    "text": "with no level of T but I can do it with maybe of T so just as an initial step",
    "start": "3083679",
    "end": "3089140"
  },
  {
    "text": "I'm going to change my novel of int into a maybe of int and that's a fairly",
    "start": "3089140",
    "end": "3095259"
  },
  {
    "text": "straightforward thing so just if you pay attention to the top line I'm just going to return replace that novel of int with",
    "start": "3095259",
    "end": "3100749"
  },
  {
    "text": "a maybe event and then it causes me to do a few changes in the code instead of",
    "start": "3100749",
    "end": "3105969"
  },
  {
    "text": "returning null I'm now returning an empty maybe event instead of just you know taking an int and relying on an",
    "start": "3105969",
    "end": "3112900"
  },
  {
    "text": "implicit conversion from into novel of int and now return a populated maybe event that contains the ID I will move",
    "start": "3112900",
    "end": "3120789"
  },
  {
    "text": "forward from this but again we have to change the Maitre D' interface definition now we have a maybe of int as",
    "start": "3120789",
    "end": "3127329"
  },
  {
    "text": "the return value from calling maybe to try majorly to try accept so how do we",
    "start": "3127329",
    "end": "3133269"
  },
  {
    "text": "turn that into an I action result how do we turn that into an HTTP response now",
    "start": "3133269",
    "end": "3138729"
  },
  {
    "text": "before we were doing null checking and then we were taking pulling the value out of the monad or the novel of T we",
    "start": "3138729",
    "end": "3146049"
  },
  {
    "text": "can't do that anymore because that's what I showed you just before you can't check whether or not the maybe is",
    "start": "3146049",
    "end": "3151749"
  },
  {
    "text": "populated you because you're not supposed to do that so what can we do instead well we can use that match",
    "start": "3151749",
    "end": "3156969"
  },
  {
    "text": "method you know that's that that was like the same thing as the aggregate method and you'll notice that I've just",
    "start": "3156969",
    "end": "3162759"
  },
  {
    "text": "immediately go return m dot match so whatever match returns that's what I'm gonna return so that must be an I action",
    "start": "3162759",
    "end": "3169150"
  },
  {
    "text": "result you know one of those HTTP responses I'm gonna supply some arguments to the",
    "start": "3169150",
    "end": "3174369"
  },
  {
    "text": "match method I'm gonna use named arguments so that we can see what which is which so in the nothing case I'm",
    "start": "3174369",
    "end": "3181750"
  },
  {
    "text": "gonna return internal server error that's an I action result and that basically means you know if we match on",
    "start": "3181750",
    "end": "3187900"
  },
  {
    "text": "nothing and then we still return 500 internal server error if we match on",
    "start": "3187900",
    "end": "3193240"
  },
  {
    "text": "just I have to supply a function so I write this the lambda expression here that receives the the ID the integer and",
    "start": "3193240",
    "end": "3200290"
  },
  {
    "text": "just call 200 with that ID so 200 okay responds still contains the reservation",
    "start": "3200290",
    "end": "3206710"
  },
  {
    "text": "ID in the response body just like you know is just like we did before that's",
    "start": "3206710",
    "end": "3211810"
  },
  {
    "text": "the contract I have with my HTTP clients so this is also the explanation of of",
    "start": "3211810",
    "end": "3217330"
  },
  {
    "text": "you know why did I call that method match because using name documents like this this starts to look like pattern",
    "start": "3217330",
    "end": "3222850"
  },
  {
    "text": "matching if you ever seen pattern matching in F sharp for example this looks like the same idea you match on",
    "start": "3222850",
    "end": "3228580"
  },
  {
    "text": "nothing and that is one thing you match and just that's another thing okay so",
    "start": "3228580",
    "end": "3235750"
  },
  {
    "text": "now we're in the position where we can move repository create to the boundary of the system now if I take away that",
    "start": "3235750",
    "end": "3242080"
  },
  {
    "text": "method call here I no longer have an int to return so I'm gonna return a maybe a reservation instead so an empty one to",
    "start": "3242080",
    "end": "3249609"
  },
  {
    "text": "indicate that we didn't accept the reservation and just a populated maybe a reservation with the original",
    "start": "3249609",
    "end": "3254619"
  },
  {
    "text": "reservation inside to indicate that this is the reservation we accepted and again we have to change the major' the",
    "start": "3254619",
    "end": "3260260"
  },
  {
    "text": "interface but we'll just move on and pretend that that's not an issue because that's not so now I have a maitreya",
    "start": "3260260",
    "end": "3266820"
  },
  {
    "text": "reservation when I've called Maitre D' to try except I'm gonna need a and an",
    "start": "3266820",
    "end": "3273490"
  },
  {
    "text": "integer because I need to put that integer in a 200 ok response so it'd be nice if I had a maybe of int that's what",
    "start": "3273490",
    "end": "3280990"
  },
  {
    "text": "I have before how do I turn a maybe a reservation into a maybe event well maybe it's a functor so I can just do",
    "start": "3280990",
    "end": "3287380"
  },
  {
    "text": "select so I can just do this so I can call repository create here and that's you know again this is going to run if",
    "start": "3287380",
    "end": "3292960"
  },
  {
    "text": "the maybe of reservation is populated and if the maybe of reservation is not populated this is just not gonna run I'm",
    "start": "3292960",
    "end": "3298840"
  },
  {
    "text": "just gonna get you know an empty maybe back so now I have a maybe event well not quite",
    "start": "3298840",
    "end": "3304450"
  },
  {
    "text": "I have a maybe of a task of an inn because that reservations create you know method call here it's absolutely",
    "start": "3304450",
    "end": "3309760"
  },
  {
    "text": "asynchronous so we actually have a stack of Mona's here but it turns out not to be an issue so we can just move on so we",
    "start": "3309760",
    "end": "3316240"
  },
  {
    "text": "still have maybe on the outside and that means I can still call the match method now the match method Leah has become a",
    "start": "3316240",
    "end": "3321250"
  },
  {
    "text": "little bit more awkward to use because I need to return tasks from it within that match method so you notice it says tasks",
    "start": "3321250",
    "end": "3328630"
  },
  {
    "text": "from resolves and so on so it looks not it's not quite as pretty as before but we'll deal with that so it'll be pretty",
    "start": "3328630",
    "end": "3334930"
  },
  {
    "text": "again in a few minutes so let's not worry about that so at this point",
    "start": "3334930",
    "end": "3340540"
  },
  {
    "text": "something interesting happens if you try to compile there will be a compiler warning that the compiler will tell you",
    "start": "3340540",
    "end": "3346570"
  },
  {
    "text": "this async method lacks await operators and you go and say yeah it says async",
    "start": "3346570",
    "end": "3351820"
  },
  {
    "text": "but there's no await anywhere so why does it need to be a thing again it",
    "start": "3351820",
    "end": "3357670"
  },
  {
    "text": "doesn't just let's get rid of that this is this was well this is what was bothering me all along and now I've",
    "start": "3357670",
    "end": "3365500"
  },
  {
    "text": "solved the problem you know my business logic does not have to be asynchronous why should it have to be asynchronous",
    "start": "3365500",
    "end": "3371680"
  },
  {
    "text": "it's no longer a synchronous problem solved I have to change them a to the",
    "start": "3371680",
    "end": "3377380"
  },
  {
    "text": "interface the only change I need to make in the post method is that you know that a weight keyword that since in front of",
    "start": "3377380",
    "end": "3382990"
  },
  {
    "text": "try except that have to go away but apart from that that's the only change I need to make but if I go back and look",
    "start": "3382990",
    "end": "3388450"
  },
  {
    "text": "at the maitre d and the try accept method again there's another thing that we may notice and that is that",
    "start": "3388450",
    "end": "3395290"
  },
  {
    "text": "repository dependency is also no longer being used so we can get rid of that as",
    "start": "3395290",
    "end": "3401260"
  },
  {
    "text": "well so what we are left with now is pretty close to something we would call",
    "start": "3401260",
    "end": "3406390"
  },
  {
    "text": "a pure function it's not entirely pure because there's a little is a little bit of state mutation going on there towards",
    "start": "3406390",
    "end": "3412119"
  },
  {
    "text": "the end but that would actually be fairly easy to to also deal with that problem if you think that's a problem",
    "start": "3412119",
    "end": "3418599"
  },
  {
    "text": "but it's pure enough in the sense that it's it's deterministic what happens inside the try accept method the only",
    "start": "3418599",
    "end": "3425560"
  },
  {
    "text": "thing that influences which path you end up taking through that you know method is just the input arguments and the",
    "start": "3425560",
    "end": "3431320"
  },
  {
    "text": "capacity which is just is just an input to the constructor so we can completely control which path is being taken by the",
    "start": "3431320",
    "end": "3438339"
  },
  {
    "text": "try accept method and returns by making sure that we supplied",
    "start": "3438339",
    "end": "3443550"
  },
  {
    "text": "with the right arguments so why are we having that Maitre D' dependency and",
    "start": "3443550",
    "end": "3449400"
  },
  {
    "text": "some people might say yeah but this is because it makes the code testable because now I can create a stub of my",
    "start": "3449400",
    "end": "3456270"
  },
  {
    "text": "Maitre D' dependency and I can use a mocking framework to set up some expectations that you know makes you",
    "start": "3456270",
    "end": "3461700"
  },
  {
    "text": "know that completely controls how try/except behaves but then I say well yeah if you use the Maitre D' object you",
    "start": "3461700",
    "end": "3468270"
  },
  {
    "text": "can completely control hi try except behaves because you just have to make sure that it receives the right input",
    "start": "3468270",
    "end": "3474000"
  },
  {
    "text": "arguments so we'll just do this we'll just create the concrete class and get rid of that dependency so that means",
    "start": "3474000",
    "end": "3480780"
  },
  {
    "text": "that interface you no longer have that dependency and if you consistently remove that dependency from all occurred",
    "start": "3480780",
    "end": "3487110"
  },
  {
    "text": "the the interface is no longer required you can just delete the interface and move on we still have the capability we",
    "start": "3487110",
    "end": "3493680"
  },
  {
    "text": "still have the Maitre D' object but now just no longer implements the interface and that again makes the code simpler",
    "start": "3493680",
    "end": "3499170"
  },
  {
    "text": "and maybe you think it's not so pretty to have that new Maitre D' sitting in",
    "start": "3499170",
    "end": "3505110"
  },
  {
    "text": "line there so why do we need to create a new one of those every time we need it so we could just promote that to a",
    "start": "3505110",
    "end": "3510270"
  },
  {
    "text": "little class field and you know do some other refactoring and then the code might look up looking like this which is much prettier so at this point you'll",
    "start": "3510270",
    "end": "3518940"
  },
  {
    "text": "notice that we start by simply just returning a weight and then there's sort of a pipeline of operations that happens",
    "start": "3518940",
    "end": "3524310"
  },
  {
    "text": "we just kick it off by repository that read reservations and then you notice that we go select select many and and so",
    "start": "3524310",
    "end": "3530520"
  },
  {
    "text": "on so since there's this select many method call there there must be a Mon art monad in in in in effect there and",
    "start": "3530520",
    "end": "3538500"
  },
  {
    "text": "the monette that we are using here is the async monad or the task of T monad so and this is because you know",
    "start": "3538500",
    "end": "3544140"
  },
  {
    "text": "repository a tree preservation returns a task so that's an asynchronous operation querying the database is saying",
    "start": "3544140",
    "end": "3549780"
  },
  {
    "text": "synchronous as it's supposed to be and towards the the end the penultimate line",
    "start": "3549780",
    "end": "3554910"
  },
  {
    "text": "there inside that Traverse and let's not worry about what that is the it says repository create that's still an",
    "start": "3554910",
    "end": "3561090"
  },
  {
    "text": "asynchronous operation just as it's supposed to be because we're writing to the database and all of this happens",
    "start": "3561090",
    "end": "3566490"
  },
  {
    "text": "asynchronously because you'll notice the post method is still asynchronous it's returned it returns a task of I action results so all the thing",
    "start": "3566490",
    "end": "3573460"
  },
  {
    "text": "mr. need to be asynchronous are still asynchronous sir in this way in this sense you're still acing all the way but",
    "start": "3573460",
    "end": "3580420"
  },
  {
    "text": "the decision the business decision I just inject that into the e",
    "start": "3580420",
    "end": "3586180"
  },
  {
    "text": "synchronous context and that is not a synchronous because it doesn't have to be so how do I combine dependency",
    "start": "3586180",
    "end": "3593800"
  },
  {
    "text": "injection with acing in a weight without leaky abstractions well you inject the desired behavior into the async monad",
    "start": "3593800",
    "end": "3599349"
  },
  {
    "text": "which is exactly what I did i injected that in a synchronous decision logic into the overall asynchronous context",
    "start": "3599349",
    "end": "3607060"
  },
  {
    "text": "and everyone is happy it's a win-win and we should have known this already 20",
    "start": "3607060",
    "end": "3613480"
  },
  {
    "text": "minutes ago because we know that you know how do you get the value out of my moment well you don't you inject the desired behavior into the moment so",
    "start": "3613480",
    "end": "3619200"
  },
  {
    "text": "behavior injection not dependency injection so and if you're interested in",
    "start": "3619200",
    "end": "3626080"
  },
  {
    "text": "learning more about this in on my block there's an article called asynchronous injection which basically walks you",
    "start": "3626080",
    "end": "3631359"
  },
  {
    "text": "through all the code that I've shown here and there's a link to github repository where you can look at all the code and I'm out of time",
    "start": "3631359",
    "end": "3639520"
  },
  {
    "text": "so I'm not going to take questions but I'll be around at the conference and I'll be happy to talk to you so you can just come and ask me questions when you",
    "start": "3639520",
    "end": "3645700"
  },
  {
    "text": "see me and we can figure out anything you may have of questions in that way so",
    "start": "3645700",
    "end": "3651910"
  },
  {
    "text": "thank you all for coming and enjoy the rest of the conference",
    "start": "3651910",
    "end": "3656550"
  }
]