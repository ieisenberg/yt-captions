[
  {
    "text": "[Music] hello and welcome to the next",
    "start": "3400",
    "end": "10480"
  },
  {
    "text": "talk of today um it's about",
    "start": "10480",
    "end": "15920"
  },
  {
    "text": "observability actually so the talk was announced open metrics open",
    "start": "15920",
    "end": "21279"
  },
  {
    "text": "telemetry open tracing i already messed up the terms uh are we there yet",
    "start": "21279",
    "end": "26720"
  },
  {
    "text": "i have a nickname for it it's called trace trace so let me switch to the slides now",
    "start": "26720",
    "end": "36000"
  },
  {
    "text": "and so first of all i want to touch",
    "start": "36559",
    "end": "44079"
  },
  {
    "text": "uh about uh on upon topic why we need to measure things so um",
    "start": "44079",
    "end": "50640"
  },
  {
    "text": "you could imagine that when you talk about slam tree we talk about open metrics and stuff uh it's it's all",
    "start": "50640",
    "end": "56840"
  },
  {
    "text": "about uh it's all about measurements so why do we need to measure um a lot of people entered the world of",
    "start": "56840",
    "end": "65119"
  },
  {
    "text": "microservices kind of it took us by the storm a few years back and now it becomes more like a",
    "start": "65119",
    "end": "72720"
  },
  {
    "text": "mainstream it's it's pretty normal so people do mic services uh however",
    "start": "72720",
    "end": "79360"
  },
  {
    "text": "what's my experience what i've done before uh working in different companies that uh",
    "start": "79360",
    "end": "85759"
  },
  {
    "text": "we were missing important points essentially when we distributed our system sometimes",
    "start": "85759",
    "end": "91280"
  },
  {
    "text": "we got into situations when we felt like we lost control why this happens because well i think",
    "start": "91280",
    "end": "98560"
  },
  {
    "text": "mainly because we forgot about uh observing a single analytic application is much easier",
    "start": "98560",
    "end": "104799"
  },
  {
    "text": "than observing uh plateau or microservices that are hosted on different virtual machines now we host things in token",
    "start": "104799",
    "end": "111439"
  },
  {
    "text": "kubernetes and stuff like that so um first of all",
    "start": "111439",
    "end": "116880"
  },
  {
    "text": "basically despite all this bullet points i can happily keep them you need to know about",
    "start": "116880",
    "end": "123520"
  },
  {
    "text": "the problems before your users do and this is essentially why we need to why we need to measure things",
    "start": "123520",
    "end": "129679"
  },
  {
    "text": "uh it's the worst thing that could ever happen is that when you deploy something in production",
    "start": "129679",
    "end": "135680"
  },
  {
    "text": "preferably on friday night because of course you want to go and drive to the mountains and then in",
    "start": "135680",
    "end": "140959"
  },
  {
    "text": "the middle of your drive or the next night someone calls you and says that's nothing works",
    "start": "140959",
    "end": "146640"
  },
  {
    "text": "and the worst thing that can happen is the customer goes in so another thing is that i mentioned",
    "start": "146640",
    "end": "154720"
  },
  {
    "text": "in one of the bullet points is that measuring the usage of certain things like click on the page",
    "start": "154720",
    "end": "161360"
  },
  {
    "text": "and certain number of execution of certain commands",
    "start": "161360",
    "end": "166400"
  },
  {
    "text": "maybe some queries and api calls can actually help you finding out that something",
    "start": "166560",
    "end": "171920"
  },
  {
    "text": "needs to be sunset because it doesn't work supporting anymore because nobody uses it it's very helpful",
    "start": "171920",
    "end": "177280"
  },
  {
    "text": "thing to do my click is not going well",
    "start": "177280",
    "end": "184480"
  },
  {
    "text": "let me just do it old-fashioned way",
    "start": "184480",
    "end": "188000"
  },
  {
    "text": "sorry about the glitch um so how do we measure um we have um fortunately the industry",
    "start": "196480",
    "end": "203840"
  },
  {
    "text": "developed a number of tools to to use for measurements and we have a lot of vendors that offer decent tools",
    "start": "203840",
    "end": "212239"
  },
  {
    "text": "that are either hosted basically they're all cloud-based software as a service",
    "start": "212239",
    "end": "218959"
  },
  {
    "text": "i personally used new relic a long time ago and now i use more datadog there are",
    "start": "218959",
    "end": "226000"
  },
  {
    "text": "every cloud provider has their own tools that help people that work with that particular cloud to",
    "start": "226000",
    "end": "232000"
  },
  {
    "text": "observe things but of course when you go that way",
    "start": "232000",
    "end": "237840"
  },
  {
    "text": "it becomes harder to for example go multi-cloud or entirely migrate to another cloud",
    "start": "237840",
    "end": "244799"
  },
  {
    "text": "however there are ways to do that in a vendor agnostic way and today",
    "start": "244799",
    "end": "251280"
  },
  {
    "text": "we have for measurements in particularly um for for metrics we have",
    "start": "251280",
    "end": "259440"
  },
  {
    "text": "uh openmetrics as more or less a standard and uh tomorrow i don't think",
    "start": "259440",
    "end": "264880"
  },
  {
    "text": "openmetrics will ever disappear but also open telemetry comes that can",
    "start": "264880",
    "end": "270080"
  },
  {
    "text": "help you doing that and then if you implement this standards then you are more or less than",
    "start": "270080",
    "end": "275919"
  },
  {
    "text": "diagnostic so it's not helping me",
    "start": "275919",
    "end": "281680"
  },
  {
    "text": "this thing",
    "start": "281680",
    "end": "284160"
  },
  {
    "text": "so why do you want to be vendor agnostic when when you work with the vendor tool",
    "start": "289840",
    "end": "297360"
  },
  {
    "text": "and you use their sdk or library that supports instrumentation of application you basically get vendor",
    "start": "297360",
    "end": "302560"
  },
  {
    "text": "lock um as with anything you need to evaluate pros and cons if you if you say i'm going to marry",
    "start": "302560",
    "end": "308639"
  },
  {
    "text": "this people and we want to live happily hour ever after then you probably have no problem",
    "start": "308639",
    "end": "314479"
  },
  {
    "text": "with using vendor tools because they are actually pretty cool in terms of performance they",
    "start": "314479",
    "end": "320800"
  },
  {
    "text": "are optimized and they give you all the possibilities of vendor tools however as i mentioned here",
    "start": "320800",
    "end": "327520"
  },
  {
    "text": "not all the vendor library is open source datavog for example is better than others but like new relic library",
    "start": "327520",
    "end": "334320"
  },
  {
    "text": "i'm not sure if it's open source at least 4.net i wasn't able to find",
    "start": "334320",
    "end": "340080"
  },
  {
    "text": "the repository um some vendors require you to install things everywhere that you run your application",
    "start": "340080",
    "end": "346639"
  },
  {
    "text": "like in doc container or in your vms in order for instrumentation to work",
    "start": "346639",
    "end": "352320"
  },
  {
    "text": "and um this is probably not exactly the thing you want you want",
    "start": "352320",
    "end": "358160"
  },
  {
    "text": "your application to report to them but you don't want to take a lot of things that are associated with this to",
    "start": "358160",
    "end": "364240"
  },
  {
    "text": "the application or to to the infrastructure basically you want you want to take it into the application but you don't really want to",
    "start": "364240",
    "end": "370720"
  },
  {
    "text": "have your instruction backed by that and uh what i have seen of course when",
    "start": "370720",
    "end": "376160"
  },
  {
    "text": "they try to look to make things easy and therefore they introduce a lot of magic",
    "start": "376160",
    "end": "382639"
  },
  {
    "text": "we know things like gvm profiling clr profiling auto instrumentation the problem that he",
    "start": "382639",
    "end": "389680"
  },
  {
    "text": "did never know really how it works unless you go to the source could try to understand sometimes it's really going and to to",
    "start": "389680",
    "end": "397039"
  },
  {
    "text": "trace too much and impact performance your obligation so basically i prefer to be in control",
    "start": "397039",
    "end": "402960"
  },
  {
    "text": "myself yeah i think this i will struggle with",
    "start": "402960",
    "end": "410720"
  },
  {
    "text": "this all the way",
    "start": "410720",
    "end": "414160"
  },
  {
    "text": "um for metrics and i think the this is um there is only one",
    "start": "417120",
    "end": "424000"
  },
  {
    "text": "place one only one standard that is kind of widely accepted this is the this is how we do it um",
    "start": "424000",
    "end": "432080"
  },
  {
    "text": "open metrics i need to move a little bit so open metrics is uh",
    "start": "432080",
    "end": "439599"
  },
  {
    "text": "is born from promises open work is tries to standardize from his format and",
    "start": "439599",
    "end": "446160"
  },
  {
    "text": "make it available like this is how you do metrics in fact as far as i know as per now",
    "start": "446160",
    "end": "452319"
  },
  {
    "text": "prometheus is the only thing and the only difference you really get is that for example datadog",
    "start": "452319",
    "end": "458479"
  },
  {
    "text": "renamed their support for prometheus to open metrics kind of claiming that uh really you",
    "start": "458479",
    "end": "464639"
  },
  {
    "text": "don't need prometheus for example datadog can scrap your kubernetes parts if you expose",
    "start": "464639",
    "end": "470240"
  },
  {
    "text": "openmatic endpoints so basically there is no promises there involved at all so it's just a format",
    "start": "470240",
    "end": "475599"
  },
  {
    "text": "um openmetrics aims to handle protobuf protocols so deliver a",
    "start": "475599",
    "end": "482080"
  },
  {
    "text": "metrics in both protobuf and text all the promises only sports texts but for now the text format is identical",
    "start": "482080",
    "end": "489120"
  },
  {
    "text": "so basically it's the same thing",
    "start": "489120",
    "end": "493840"
  },
  {
    "text": "i'm really sorry about the slide first time i use this tool and i probably never should do that",
    "start": "495360",
    "end": "507840"
  },
  {
    "text": "ah jesus christ",
    "start": "508879",
    "end": "511919"
  },
  {
    "text": "so um i probably need to switch back and forth the slides so it doesn't freeze anymore",
    "start": "515599",
    "end": "521360"
  },
  {
    "text": "promises is the um is the time service database behind but it's platorial components that work",
    "start": "521360",
    "end": "528320"
  },
  {
    "text": "together in order to deliver metrics for you so it contains primitive servers bunch of client libraries",
    "start": "528320",
    "end": "533680"
  },
  {
    "text": "including most popular languages push gateway and i'll tell a little bit",
    "start": "533680",
    "end": "539600"
  },
  {
    "text": "more about this and export this um it also has the alert manager",
    "start": "539600",
    "end": "544640"
  },
  {
    "text": "so this is how promises looks it's their their picture it's not mine",
    "start": "544640",
    "end": "550800"
  },
  {
    "text": "you could see grafana over there um right here so",
    "start": "550800",
    "end": "556240"
  },
  {
    "text": "grafana is actually the visualization tool and we will get to it in a bit so why prometheus",
    "start": "556240",
    "end": "564720"
  },
  {
    "text": "prometheus is open source and free to use uh it's been widely used um like everywhere",
    "start": "564720",
    "end": "570640"
  },
  {
    "text": "everyone who starts with kubernetes get promised on board tools like rancher they use promises",
    "start": "570640",
    "end": "576160"
  },
  {
    "text": "out of the box so they basically have their own installation permissions for kubernetes monitoring it has a lot of stuff to do with",
    "start": "576160",
    "end": "582080"
  },
  {
    "text": "kubernetes predefined dashboards and stuff like that a lot of libraries that support prometheus and there are a lot of",
    "start": "582080",
    "end": "588560"
  },
  {
    "text": "exporters that help you export metrics from your instructor to permissions so you can build dashboards and alerts for",
    "start": "588560",
    "end": "594320"
  },
  {
    "text": "infrastructure as well it's not for your applications only and promises were always like scrapping your",
    "start": "594320",
    "end": "602160"
  },
  {
    "text": "prods for metrics if you specify special annotation in your deployment file and you get kind of metrics for you if",
    "start": "602160",
    "end": "608959"
  },
  {
    "text": "you expose them uh now people move to promise operator i'm not going to cover this in details",
    "start": "608959",
    "end": "616000"
  },
  {
    "text": "so now i need to step out of the slide and just",
    "start": "616000",
    "end": "621440"
  },
  {
    "text": "[Music] talk about what kind of metrics we have openmetrics support",
    "start": "622390",
    "end": "627440"
  },
  {
    "text": "two primitive metrics which is count and gauge and two aggregation metrics history exam",
    "start": "627440",
    "end": "633440"
  },
  {
    "text": "summary i would say i never use summary myself but histograms are very useful to catch the performance",
    "start": "633440",
    "end": "640880"
  },
  {
    "text": "counters are usually um useful for seeing how our system sort of",
    "start": "640880",
    "end": "647519"
  },
  {
    "text": "accumulates how its system is being used accommodatively so it only increments",
    "start": "647519",
    "end": "652880"
  },
  {
    "text": "and gorgeously just they can change freely so it's usually like cpu consumption memory usage queue size",
    "start": "652880",
    "end": "659920"
  },
  {
    "text": "and stuff like that so we use in production first three the summary is not that much different from histograms",
    "start": "659920",
    "end": "666720"
  },
  {
    "text": "just calculates quantile like 95 percentile in sliding window so and you do it on the client although",
    "start": "666720",
    "end": "673760"
  },
  {
    "text": "for histogram you would want quantiles as well but you do it on the server in a query",
    "start": "673760",
    "end": "679600"
  },
  {
    "text": "means that you shift the load on the server so it's much cheaper to run histograms on",
    "start": "679600",
    "end": "685040"
  },
  {
    "text": "the client it's a behavior and server so it depends on what you want",
    "start": "685040",
    "end": "689839"
  },
  {
    "text": "so",
    "start": "693600",
    "end": "695759"
  },
  {
    "text": "let's uh let me ask you a question so how many of you are using uh net",
    "start": "701760",
    "end": "708560"
  },
  {
    "text": "at all just shout out right in the chat",
    "start": "708560",
    "end": "715200"
  },
  {
    "text": "yes yes okay at least one okay so um i will oh",
    "start": "715600",
    "end": "723680"
  },
  {
    "text": "two okay so three oh fine cool that's cool thank you very much so because i i'm i'm more like um",
    "start": "723680",
    "end": "731760"
  },
  {
    "text": "i do 90 of my stuff on.net so it's more comfortable environment for me so i prepared some",
    "start": "731760",
    "end": "736880"
  },
  {
    "text": "examples using uh c-sharp so this is how i do stuff with",
    "start": "736880",
    "end": "744079"
  },
  {
    "text": "with promises in in.net it's pretty easy to do you basically get a package there are several clients",
    "start": "744079",
    "end": "750399"
  },
  {
    "text": "i'm doing deliberately because i don't want to phrase there are several clients uh i personally use permissionsnet",
    "start": "750399",
    "end": "755839"
  },
  {
    "text": "because i find it very kind of you know promises oriented and",
    "start": "755839",
    "end": "761680"
  },
  {
    "text": "then you can instrument your your parts of your application in this example i instrument http",
    "start": "761680",
    "end": "768160"
  },
  {
    "text": "endpoints which is using middleware so basically it has a very simple middleware that runs um",
    "start": "768160",
    "end": "776560"
  },
  {
    "text": "all the requests you make to the to the tutorial api and collect some metrics",
    "start": "776560",
    "end": "782320"
  },
  {
    "text": "so i think it's almost we're almost there so this",
    "start": "782320",
    "end": "788160"
  },
  {
    "text": "was about yes this this slide it wasn't about adding metrics it's about exposing metrics uh through http so",
    "start": "788160",
    "end": "795360"
  },
  {
    "text": "basically it needs to have you need to have sdk to do that because you need to have a web server that will",
    "start": "795360",
    "end": "801760"
  },
  {
    "text": "open some endpoints that's basically slash metrics it's by default and then when you do this",
    "start": "801760",
    "end": "811360"
  },
  {
    "text": "you instruct your application to collect metrics this is example it's a simplex",
    "start": "811360",
    "end": "816560"
  },
  {
    "text": "example collect http metrics but you can also collect uh your custom examples so let me go",
    "start": "816560",
    "end": "823199"
  },
  {
    "text": "and show you stuff not talking",
    "start": "823199",
    "end": "829839"
  },
  {
    "text": "so i have this simple application in front of me and it contains three projects and i",
    "start": "833199",
    "end": "838800"
  },
  {
    "text": "will only show the first one uh for the moment so",
    "start": "838800",
    "end": "845040"
  },
  {
    "text": "this is what i've done as i said um i have used http metrics here and i",
    "start": "845040",
    "end": "851519"
  },
  {
    "text": "use math metrics to expose them so in addition to that i use some custom",
    "start": "851519",
    "end": "857440"
  },
  {
    "text": "metrics but let me not touch it first and i will just show how it's done",
    "start": "857440",
    "end": "865360"
  },
  {
    "text": "um just what do you get in the uh not the one i want to run",
    "start": "865360",
    "end": "871839"
  },
  {
    "text": "i need to run this one",
    "start": "872160",
    "end": "875199"
  },
  {
    "text": "so this is a simple web api it has one one one controller with several calls",
    "start": "879199",
    "end": "884639"
  },
  {
    "text": "several api calls and i'm going to use the get for now so this one this is a simple one",
    "start": "884639",
    "end": "891440"
  },
  {
    "text": "it doesn't go to any database it's probably known to you because when you create http web api application",
    "start": "891440",
    "end": "897680"
  },
  {
    "text": "with web sdk and dot core you will get it out of the box so",
    "start": "897680",
    "end": "903839"
  },
  {
    "text": "and then i added swagger so i have these three endpoints and i'm going to try it out",
    "start": "903839",
    "end": "912480"
  },
  {
    "text": "now if you can if if i go to localhost 5000 which is the",
    "start": "912560",
    "end": "918959"
  },
  {
    "text": "metric endpoint you can see there are quite a lot of metrics that already produced these are cli metrics so",
    "start": "918959",
    "end": "926000"
  },
  {
    "text": "virtual memory cpu segments blah blah so quite a lot of stuff already without even engaging with the api so",
    "start": "926000",
    "end": "932720"
  },
  {
    "text": "here if i start calling this api i will do several calls stated there and then i go to metrics",
    "start": "932720",
    "end": "939680"
  },
  {
    "text": "again refresh what you see is this so this is this is these are",
    "start": "939680",
    "end": "947759"
  },
  {
    "text": "this is for example the the gauge so it just measures the number um this is histogram so",
    "start": "947759",
    "end": "955600"
  },
  {
    "text": "histogram gives you quite a lot of detail so it tells this is a controller the weather focus",
    "start": "955600",
    "end": "962079"
  },
  {
    "text": "controller this is the action and it distributes the measurements to a bucket so how many schools",
    "start": "962079",
    "end": "969120"
  },
  {
    "text": "were completed within a certain time period so this is pretty meaningless but as soon",
    "start": "969120",
    "end": "974959"
  },
  {
    "text": "as you put it in prometheus and you put graffana visualization on top of that you will have a lot of sense from",
    "start": "974959",
    "end": "980240"
  },
  {
    "text": "from the metrics this is basically how we do it if you wonder why this controller is empty no action",
    "start": "980240",
    "end": "985440"
  },
  {
    "text": "this is when i call this particular page so you can see that one call has been made so if you refresh",
    "start": "985440",
    "end": "991839"
  },
  {
    "text": "it there will be two and this is for the api so if i just go here hold it again",
    "start": "991839",
    "end": "997839"
  },
  {
    "text": "refresh the page and it will be seven calls in total so this is very quite easy to do so to",
    "start": "997839",
    "end": "1004399"
  },
  {
    "text": "start with metrics if you just want to measure your apis it's pretty easy to do",
    "start": "1004399",
    "end": "1011440"
  },
  {
    "text": "so now you can also collect custom metrics",
    "start": "1011440",
    "end": "1017839"
  },
  {
    "text": "promises net client allows you to create",
    "start": "1017839",
    "end": "1023199"
  },
  {
    "text": "custom metrics quite easily you can put them in static variables instead of class or you",
    "start": "1023199",
    "end": "1029280"
  },
  {
    "text": "want to kind of keep them close to the to the actual operation it's up to you",
    "start": "1029280",
    "end": "1034640"
  },
  {
    "text": "so what i usually do i create such metrics for example they all need to have a specific",
    "start": "1034640",
    "end": "1041600"
  },
  {
    "text": "specific name and metrics also have labels and this particular case i always prefer",
    "start": "1042720",
    "end": "1049520"
  },
  {
    "text": "to have a service name up name label because how else would you find out",
    "start": "1049520",
    "end": "1057360"
  },
  {
    "text": "which microservice you're actually measuring because all metric names are identical especially http metrics",
    "start": "1057360",
    "end": "1064000"
  },
  {
    "text": "and this is a custom label for example this is a collection name and because i want to um",
    "start": "1064000",
    "end": "1070400"
  },
  {
    "text": "measure mongodb in this particular case and let me i will find it useful to keep a collection name as a metric because if i",
    "start": "1070400",
    "end": "1077679"
  },
  {
    "text": "go to different collections i probably get different times and stuff like that and i want really to measure those operations",
    "start": "1077679",
    "end": "1084480"
  },
  {
    "text": "so the next would be that you could create a generic wrapper that's what i usually do as well",
    "start": "1084480",
    "end": "1090400"
  },
  {
    "text": "so i create the wrapper for synchronous calls and you just give it delegates and you give",
    "start": "1090400",
    "end": "1096240"
  },
  {
    "text": "it a metric to kind of measure requests and the next thing you do",
    "start": "1096240",
    "end": "1101360"
  },
  {
    "text": "is give it a counter which is optional so if you want to measure the number of errors for example that occur in this",
    "start": "1101360",
    "end": "1107919"
  },
  {
    "text": "call in those 80 box calls you can do that and you use normal stopwatch",
    "start": "1107919",
    "end": "1113520"
  },
  {
    "text": "so that's nothing special about it so let's see and then you measure the",
    "start": "1113520",
    "end": "1121520"
  },
  {
    "text": "actual operation so here i call the measure method of the",
    "start": "1121520",
    "end": "1128000"
  },
  {
    "text": "um this this thing that i just created this this method uh this function",
    "start": "1128000",
    "end": "1135520"
  },
  {
    "text": "and i then give it a delegate which executes the operation and i give it two metrics so there's two",
    "start": "1135520",
    "end": "1141840"
  },
  {
    "text": "metrics that i created before one is the um the histogram another one",
    "start": "1141840",
    "end": "1147120"
  },
  {
    "text": "is the counter so i hope that the counter will stay low because",
    "start": "1147120",
    "end": "1152400"
  },
  {
    "text": "error count i don't want any errors and i want to measure the time what what time it takes to execute those",
    "start": "1152400",
    "end": "1157919"
  },
  {
    "text": "operations so how my database is performing for example if i forgot to create an index then my database will be slow and my",
    "start": "1157919",
    "end": "1165440"
  },
  {
    "text": "users will suffer and i definitely don't want that so you might also get",
    "start": "1165440",
    "end": "1171760"
  },
  {
    "text": "to use implicitly so this is a very explicit call you just put it there instead of calling database directly you",
    "start": "1171760",
    "end": "1177120"
  },
  {
    "text": "rub it in the measurement function you can also use them basically if you can hook to your instructor like mongodb has several",
    "start": "1177120",
    "end": "1184000"
  },
  {
    "text": "hooks and you can measure calls and provide metrics out of the box and it gives you some information in",
    "start": "1184000",
    "end": "1191600"
  },
  {
    "text": "those calls like collection named database name that you can use for metric labels so now get back to the demo",
    "start": "1191600",
    "end": "1199759"
  },
  {
    "text": "uh over here in this application i also have another controller or another operation which is a post and",
    "start": "1199919",
    "end": "1206640"
  },
  {
    "text": "post uh creates a new weather forecast completely identical as before but it puts it in a database so",
    "start": "1206640",
    "end": "1215919"
  },
  {
    "text": "this is a normal operation so there is nothing happening here i have no measurements so",
    "start": "1215919",
    "end": "1221760"
  },
  {
    "text": "i can just use it over here just close this one and if i",
    "start": "1221760",
    "end": "1229120"
  },
  {
    "text": "do the post find out excuse execute i'll first refresh the metrics",
    "start": "1229120",
    "end": "1236240"
  },
  {
    "text": "again so you can see that post starts to appear so i have four calls but there is nothing about my course to the database",
    "start": "1236240",
    "end": "1242880"
  },
  {
    "text": "so they're not being measured this is a total time so you can see that this um",
    "start": "1242880",
    "end": "1250000"
  },
  {
    "text": "it's pretty fast basically so it goes pretty normally um because everything runs in dock",
    "start": "1250320",
    "end": "1255919"
  },
  {
    "text": "container on my local machine and goes directly to memory um so but i want to",
    "start": "1255919",
    "end": "1262960"
  },
  {
    "text": "understand how my database is performing so in to do that i'm going to do the",
    "start": "1262960",
    "end": "1268559"
  },
  {
    "text": "following so as you can see here i configure my metrics",
    "start": "1268559",
    "end": "1274480"
  },
  {
    "text": "this is a static class it's preference you can decide to do it this way or other way",
    "start": "1274480",
    "end": "1280320"
  },
  {
    "text": "these are the buckets we kind of figured it out um how buckets need to look it's a",
    "start": "1280320",
    "end": "1286240"
  },
  {
    "text": "different buckets than for example promisius net uses for automatic instrumentation but we find",
    "start": "1286240",
    "end": "1291520"
  },
  {
    "text": "this one particularly useful um so and then basically i have two",
    "start": "1291520",
    "end": "1297280"
  },
  {
    "text": "two metrics one is a histogram another counter exactly what i showed in the slide before",
    "start": "1297280",
    "end": "1302400"
  },
  {
    "text": "so how do i use that so when i go into the controller and i create regions i don't use regions",
    "start": "1302400",
    "end": "1309440"
  },
  {
    "text": "please don't use regions too i just did it because i want to hide things from here before i get there",
    "start": "1309440",
    "end": "1318400"
  },
  {
    "text": "so now i uncommented it and i can maybe delete it but i keep it so i",
    "start": "1318400",
    "end": "1323440"
  },
  {
    "text": "wrapped my call to database which is exactly the same call as before in the measurement function so now i run",
    "start": "1323440",
    "end": "1329200"
  },
  {
    "text": "it again",
    "start": "1329200",
    "end": "1333840"
  },
  {
    "text": "and if i go back of course if i refresh it will be empty because i mean there are no http metrics just normal",
    "start": "1336559",
    "end": "1342400"
  },
  {
    "text": "kind of clr metrics and the machine metrics so what i'm going to do is i'm going to give some posts",
    "start": "1342400",
    "end": "1347440"
  },
  {
    "text": "again good good good several times let's see what metrics",
    "start": "1347440",
    "end": "1353760"
  },
  {
    "text": "deliver so you can see these are database calls and they come with my custom metrics up name which is a trace trace",
    "start": "1353760",
    "end": "1360480"
  },
  {
    "text": "which i configured in the startup and the collection is whether and these are number of calls and which",
    "start": "1360480",
    "end": "1366720"
  },
  {
    "text": "bucket they belong to so none of the calls",
    "start": "1366720",
    "end": "1372240"
  },
  {
    "text": "went to the lowest bucket because it is still a database so there is some io overhead that means that most of the",
    "start": "1372240",
    "end": "1379120"
  },
  {
    "text": "calls go from 0.25 and beyond and this is in seconds",
    "start": "1379120",
    "end": "1384640"
  },
  {
    "text": "i believe um so the number of calls match so you can see the post it's six",
    "start": "1384640",
    "end": "1390640"
  },
  {
    "text": "calls and these are calls to the database so they can be measured separately",
    "start": "1390640",
    "end": "1396559"
  },
  {
    "text": "which is pretty useful so let's get back to the slides and see what we actually can do about it let me stop the app now",
    "start": "1396559",
    "end": "1404799"
  },
  {
    "text": "so integral part of actually introducing",
    "start": "1406720",
    "end": "1412960"
  },
  {
    "text": "making sense of metrics is not just put them in promises promises have some visualization tools which are very very",
    "start": "1413760",
    "end": "1419760"
  },
  {
    "text": "weak very sort of um basic it's it's it can only serve a purpose to",
    "start": "1419760",
    "end": "1425600"
  },
  {
    "text": "understand if metrics are going in there or not is a default de facto tool to visualize",
    "start": "1425600",
    "end": "1432559"
  },
  {
    "text": "metrics so um usually promises and refinery get",
    "start": "1432559",
    "end": "1437600"
  },
  {
    "text": "deployed together and it also supports alerting so you can configure certain metrics and set up",
    "start": "1437600",
    "end": "1442840"
  },
  {
    "text": "thresholds when you can say i want to get an email a slack channel alert or something else there",
    "start": "1442840",
    "end": "1448080"
  },
  {
    "text": "are a bunch of plugins for grafana rafana doesn't only support promise as a source",
    "start": "1448080",
    "end": "1453840"
  },
  {
    "text": "of data but this is one of the sources you can work with and the promising snap",
    "start": "1453840",
    "end": "1460640"
  },
  {
    "text": "project sort of cipher they have a side project that has a collection of dashboards and",
    "start": "1460640",
    "end": "1466960"
  },
  {
    "text": "this particular dashboard is basically measuring http requests so this is pretty useful this is",
    "start": "1466960",
    "end": "1474080"
  },
  {
    "text": "some cli metrics also here garbage collector memory location number of threads and",
    "start": "1474080",
    "end": "1481200"
  },
  {
    "text": "requests and flights and the duration of http requests of course you can start",
    "start": "1481200",
    "end": "1486400"
  },
  {
    "text": "splitting them out because you want to know which applications you will tracing which or measure which which controllers",
    "start": "1486400",
    "end": "1493440"
  },
  {
    "text": "you're most interested in and stuff like stuff like that so it gives you a lot of flexibility",
    "start": "1493440",
    "end": "1500559"
  },
  {
    "text": "the problem there of course comes when you start to have hundreds of dashboards so how would you do them",
    "start": "1500559",
    "end": "1506480"
  },
  {
    "text": "how you even see them i mean people have tons of screens and stuff like that and then you maybe start aggregating things",
    "start": "1506480",
    "end": "1513919"
  },
  {
    "text": "by the way in prometheus you can aggregate histograms but you cannot",
    "start": "1513919",
    "end": "1519360"
  },
  {
    "text": "aggregate summaries so aggregation of histograms might give you some interest interesting possibilities",
    "start": "1519360",
    "end": "1526799"
  },
  {
    "text": "so and besides now",
    "start": "1526840",
    "end": "1532799"
  },
  {
    "text": "i strongly believe now that's where we started so we started with metrics",
    "start": "1533600",
    "end": "1540559"
  },
  {
    "text": "and um we went further and we understood that",
    "start": "1540559",
    "end": "1546159"
  },
  {
    "text": "metrics are not enough and everyone were talking about open tracings like open tracing europe intuition there and i didn't know what it is so we started",
    "start": "1546159",
    "end": "1553520"
  },
  {
    "text": "to look at it and essentially we we implemented open uh tracing in bunch of obligations and",
    "start": "1553520",
    "end": "1559840"
  },
  {
    "text": "we're pushing our developers to do more so why um",
    "start": "1559840",
    "end": "1565840"
  },
  {
    "text": "operations are never executed outside of the contacts so if you saw the http call that i just made http call",
    "start": "1565840",
    "end": "1572320"
  },
  {
    "text": "also called a database so it might do something else it might do a call to another service it",
    "start": "1572320",
    "end": "1578320"
  },
  {
    "text": "might send a message and stuff like that so how do you find out that those for example two individual metrics actually",
    "start": "1578320",
    "end": "1583760"
  },
  {
    "text": "belong together how do you find out how your",
    "start": "1583760",
    "end": "1588799"
  },
  {
    "text": "hcp call or message handling a single message how long does",
    "start": "1588799",
    "end": "1594799"
  },
  {
    "text": "it take in total because just running a consumer for that message is not enough sometimes it produces other messages it",
    "start": "1594799",
    "end": "1601120"
  },
  {
    "text": "goes beyond the boundary of this process and you need to know a bit more so in",
    "start": "1601120",
    "end": "1606720"
  },
  {
    "text": "this case you start thinking about how would have heard the context on all those calls how",
    "start": "1606720",
    "end": "1613840"
  },
  {
    "text": "i can consolidate them together how i let this context cross the boundaries and get them",
    "start": "1613840",
    "end": "1619039"
  },
  {
    "text": "process of the process so i can work with the microservices and at the end i want to have some",
    "start": "1619039",
    "end": "1624799"
  },
  {
    "text": "correlation so i can actually find out how they belong together and how they work",
    "start": "1624799",
    "end": "1631440"
  },
  {
    "text": "as a system because we're not talking a system as a specific service the system is a combination of services sometimes",
    "start": "1631440",
    "end": "1638840"
  },
  {
    "text": "so contact is what's important so you need to to kind of move contacts further down in",
    "start": "1638840",
    "end": "1644799"
  },
  {
    "text": "the execution pipeline and you need to correlate uh the calls",
    "start": "1644799",
    "end": "1649919"
  },
  {
    "text": "the operations and you need sometimes to cross cross-product boundaries if we talk about microservices",
    "start": "1649919",
    "end": "1657120"
  },
  {
    "text": "and i probably know the trick now need to move mouse yes it could work all right so",
    "start": "1657200",
    "end": "1664240"
  },
  {
    "text": "um systems are complex and in this particular case",
    "start": "1664240",
    "end": "1669760"
  },
  {
    "text": "this is a tree of execution so we got http post it does some db read and then",
    "start": "1669760",
    "end": "1675039"
  },
  {
    "text": "it does some updates and put writes in the database back and publishes a message and the message",
    "start": "1675039",
    "end": "1680080"
  },
  {
    "text": "consumer reads from database and rise to the database oops so remote calls and messages can cross",
    "start": "1680080",
    "end": "1687039"
  },
  {
    "text": "boundaries of a single process and you really want to combine them in a single sort of picture",
    "start": "1687039",
    "end": "1693279"
  },
  {
    "text": "so open tracing what does it do open tracing is not a library open tracing is not an",
    "start": "1693279",
    "end": "1699520"
  },
  {
    "text": "application open tracing is the api specification for distributed tracing it contains",
    "start": "1699520",
    "end": "1708000"
  },
  {
    "text": "or like the repository open tracing has a lot of language specific libraries",
    "start": "1708000",
    "end": "1714480"
  },
  {
    "text": "vendors provides their own implementation of open tracing or shims to their own tracers to actually",
    "start": "1714480",
    "end": "1720559"
  },
  {
    "text": "for you to use open tracing api and for them to translate these traces",
    "start": "1720559",
    "end": "1726480"
  },
  {
    "text": "to their own specific infrastructure and there are a bunch of contrib libraries for different pieces",
    "start": "1726480",
    "end": "1732080"
  },
  {
    "text": "like for mongodb for rabbit mq whatever else and for middleweights like",
    "start": "1732080",
    "end": "1739679"
  },
  {
    "text": "asp.net core web api or for example mass transit as a messaging instructor middleware so",
    "start": "1739679",
    "end": "1747279"
  },
  {
    "text": "4.net core for example there is open tracing library",
    "start": "1747279",
    "end": "1752640"
  },
  {
    "text": "this implements the api the standard ad open tracing defines",
    "start": "1752640",
    "end": "1757919"
  },
  {
    "text": "but it doesn't give you so basically what you can do with this you can collect traces no you can't collect traces you can",
    "start": "1757919",
    "end": "1764480"
  },
  {
    "text": "create traces and you can associate them within the process but you cannot collect them",
    "start": "1764480",
    "end": "1770159"
  },
  {
    "text": "so there are wrappers for open tracing for example elastic apm has one data",
    "start": "1770159",
    "end": "1775279"
  },
  {
    "text": "dock has one and probably others do as well and there are packages for asp.net core",
    "start": "1775279",
    "end": "1780720"
  },
  {
    "text": "mongodb sql server and so on as a contribution libraries remove a",
    "start": "1780720",
    "end": "1786480"
  },
  {
    "text": "mask so let's get to the terminology and i'm",
    "start": "1786480",
    "end": "1792559"
  },
  {
    "text": "getting out of the view so what is the trace the trace is a whole distributed operation goes from the initial call to",
    "start": "1792559",
    "end": "1799760"
  },
  {
    "text": "your system so basically this is where your data or the call enters your system and it might contain a number of digital",
    "start": "1799760",
    "end": "1806159"
  },
  {
    "text": "connected operations which are called spams trace doesn't exist as an entity trace is represented by the trace id",
    "start": "1806159",
    "end": "1812880"
  },
  {
    "text": "it's basically the way to correlate spans together and spawn is a physical thing it represents a middle operation",
    "start": "1812880",
    "end": "1820880"
  },
  {
    "text": "and they are connected like they the child i can have a parent a span can have a child and",
    "start": "1820880",
    "end": "1827200"
  },
  {
    "text": "that's one can have a child and so on and so on so they form a hierarchy span has a piece of state so span is a",
    "start": "1827200",
    "end": "1833039"
  },
  {
    "text": "stateful object that actually exists and drought you can attach things to spawns",
    "start": "1833039",
    "end": "1838480"
  },
  {
    "text": "um there is all even a possibility attached logs but i never encountered any",
    "start": "1838480",
    "end": "1843840"
  },
  {
    "text": "well there is one i know that can process logs that attach the spans but",
    "start": "1843840",
    "end": "1849200"
  },
  {
    "text": "for example datadog doesn't mainly use something else for logging so",
    "start": "1849200",
    "end": "1855279"
  },
  {
    "text": "usually what you it the span state must have operation name it also has",
    "start": "1855279",
    "end": "1861039"
  },
  {
    "text": "things like span time span type but these are most links",
    "start": "1861039",
    "end": "1866640"
  },
  {
    "text": "it needs to have a pressure name and the operation start and stop timestamps because otherwise you can't measure",
    "start": "1866640",
    "end": "1872159"
  },
  {
    "text": "things spans also spans they contain tags and tags are used by",
    "start": "1872159",
    "end": "1878799"
  },
  {
    "text": "instructure sort of spam collectors to visualize them and to be able to find",
    "start": "1878799",
    "end": "1884640"
  },
  {
    "text": "them to build sort them and stuff like that so and the context is the",
    "start": "1884640",
    "end": "1890960"
  },
  {
    "text": "implementation dependent state so it's how different vendors implement",
    "start": "1890960",
    "end": "1896080"
  },
  {
    "text": "span state and most of the implementations use trace id",
    "start": "1896080",
    "end": "1901279"
  },
  {
    "text": "and span id as the correlation that defies and to build sort of um the sequence or the tree",
    "start": "1901279",
    "end": "1908799"
  },
  {
    "text": "and the mileage items i don't know what it means is actually baggage items this title uh so in tags as i said is just way to",
    "start": "1908799",
    "end": "1916880"
  },
  {
    "text": "kind of visualize them so again so one choice consolidates one",
    "start": "1916880",
    "end": "1923840"
  },
  {
    "text": "of most bands which form a tree and i use the ids like one one one is a",
    "start": "1923840",
    "end": "1929039"
  },
  {
    "text": "child of one one two the child one and so on these are artificial things although.net core diagnostics",
    "start": "1929039",
    "end": "1934640"
  },
  {
    "text": "activity or dotnet activity thing or concept uses hierarchical id",
    "start": "1934640",
    "end": "1942640"
  },
  {
    "text": "similar to that this is just for illustration purpose so you can see in the parent and child relationship",
    "start": "1942640",
    "end": "1949519"
  },
  {
    "text": "but all the spans have the same chain id they belong to the same root span that started the whole",
    "start": "1949519",
    "end": "1955760"
  },
  {
    "text": "thing so if it doesn't make sense i will still",
    "start": "1955760",
    "end": "1961760"
  },
  {
    "text": "i will show you really quickly how it works in real life but this is some pictures that i find",
    "start": "1961760",
    "end": "1967760"
  },
  {
    "text": "quite useful and you can find down there where i found them",
    "start": "1967760",
    "end": "1972960"
  },
  {
    "text": "so this is for example a whole picture of executing the um the operations so there is an",
    "start": "1972960",
    "end": "1981360"
  },
  {
    "text": "http http call over here so and then we start the first span this",
    "start": "1981360",
    "end": "1988640"
  },
  {
    "text": "is the first band then it goes to load balancer and then it goes to for example",
    "start": "1988640",
    "end": "1994240"
  },
  {
    "text": "authentication server authorization service and stuff like that so all these individual operations",
    "start": "1994240",
    "end": "2000159"
  },
  {
    "text": "get their own spams and this all all this spans form a trace and if you look here over there",
    "start": "2000159",
    "end": "2008000"
  },
  {
    "text": "so you can see that this they use color coding so i can show you waving hands",
    "start": "2008000",
    "end": "2015200"
  },
  {
    "text": "so here they use this color to indicate a whole span it's very inconvenient to show because i don't",
    "start": "2015200",
    "end": "2021440"
  },
  {
    "text": "see what i'm pointing to this is the whole span and it it basically represents um",
    "start": "2021440",
    "end": "2029440"
  },
  {
    "text": "no here this guy so this is uh you can see the colors um and they",
    "start": "2029440",
    "end": "2036320"
  },
  {
    "text": "match so basically it was pretty very useless for me waving hands because i don't know where to point",
    "start": "2036320",
    "end": "2042240"
  },
  {
    "text": "so i have a better point here so",
    "start": "2042240",
    "end": "2047440"
  },
  {
    "text": "these these two are the same they just when they put on the timeline they make a lot more sense because we",
    "start": "2047440",
    "end": "2053839"
  },
  {
    "text": "know the start and the end time stamp we know how to visualize them and the going from top to bottom",
    "start": "2053839",
    "end": "2061599"
  },
  {
    "text": "basically forms the hierarchy so if we cross the process boundary",
    "start": "2061599",
    "end": "2070878"
  },
  {
    "text": "so the parent span it ends in the service",
    "start": "2070879",
    "end": "2077679"
  },
  {
    "text": "that's initiated it and then the context being transformed to and put somewhere in the",
    "start": "2077679",
    "end": "2084079"
  },
  {
    "text": "metadata of your message or http call or whatever and with that call with this metadata it's",
    "start": "2084079",
    "end": "2091118"
  },
  {
    "text": "moved what that that context actually gets delivered together with your call",
    "start": "2091119",
    "end": "2096960"
  },
  {
    "text": "to another service and then it gets extracted from the metadata and on that site you say okay is there a",
    "start": "2096960",
    "end": "2103520"
  },
  {
    "text": "metadata for the parent span yeah well look at that look at this i have some metadata so let me",
    "start": "2103520",
    "end": "2110000"
  },
  {
    "text": "kind of recover the parent span in my process like it's existed from before and i",
    "start": "2110000",
    "end": "2115760"
  },
  {
    "text": "start my new span as a child of that final span so it's a bit confusing some at times",
    "start": "2115760",
    "end": "2122800"
  },
  {
    "text": "but if you start doing that you will get it a bit quicker so but",
    "start": "2122800",
    "end": "2128560"
  },
  {
    "text": "to start using it it's not that hard core to be honest so",
    "start": "2128560",
    "end": "2134400"
  },
  {
    "text": "um what we need to do is to",
    "start": "2135359",
    "end": "2141680"
  },
  {
    "text": "for example in this particular case i'm using open tracing contrib.net core which traces quite a lot of things",
    "start": "2142880",
    "end": "2149760"
  },
  {
    "text": "i just needs to register this in the i container so it all gets kind of wired together there is no magic",
    "start": "2149760",
    "end": "2156000"
  },
  {
    "text": "there though you can re easily read the code and find out what's going on so the problem with that is that when i",
    "start": "2156000",
    "end": "2162640"
  },
  {
    "text": "do that unlike metrics because metrics for prometheus are pool based and i probably should have mentioned this so promises",
    "start": "2162640",
    "end": "2169200"
  },
  {
    "text": "when it scraps your service it will call the metric endpoint on its own",
    "start": "2169200",
    "end": "2174320"
  },
  {
    "text": "and you can have other instructions like datadog calling your service and scrapping and metrics",
    "start": "2174320",
    "end": "2180000"
  },
  {
    "text": "traces are not like that nobody will scrap traces you need to push traces to the",
    "start": "2180000",
    "end": "2185839"
  },
  {
    "text": "so the default implementation the open tracing library for any language default tracer is no tracer",
    "start": "2185839",
    "end": "2192800"
  },
  {
    "text": "so your your traces don't go anywhere so what you're gonna do is to attach it to send it to some place",
    "start": "2192800",
    "end": "2200800"
  },
  {
    "text": "so one of the tools that people start playing around with uh when they when it comes to",
    "start": "2200800",
    "end": "2207200"
  },
  {
    "text": "traces is jager jager is the tool created by ubertech a long time",
    "start": "2207760",
    "end": "2214000"
  },
  {
    "text": "ago just for that purpose and it embraces open tracing from the start basically it's built around",
    "start": "2214000",
    "end": "2219680"
  },
  {
    "text": "open tracing formats and stuff like that um it's pretty easy to run so you all you",
    "start": "2219680",
    "end": "2225440"
  },
  {
    "text": "need it has a lot of components i think it shovels data to cassandra and stuff",
    "start": "2225440",
    "end": "2230640"
  },
  {
    "text": "but uh you have one container it's called all-in-one you can just start it up and it will work",
    "start": "2230640",
    "end": "2237119"
  },
  {
    "text": "and uh but you know when you do yago you're on your own you need to maintain it so let's just try using it",
    "start": "2237359",
    "end": "2245359"
  },
  {
    "text": "and see what happens so the demo again",
    "start": "2245359",
    "end": "2250640"
  },
  {
    "text": "i'm getting back to my application and let me do a little bit more so here in the startup",
    "start": "2251119",
    "end": "2258079"
  },
  {
    "text": "i have this thing that's called open tracing and this is this is jagger those three",
    "start": "2258079",
    "end": "2265599"
  },
  {
    "text": "lines are jager this is how you register the implementation of a tracer with open",
    "start": "2265599",
    "end": "2271520"
  },
  {
    "text": "tracing and this is how you add open tracing basically and",
    "start": "2271520",
    "end": "2277200"
  },
  {
    "text": "open tracing is not required to produce your custom trace it's just tracing http uh web api out of automatically stuff",
    "start": "2277200",
    "end": "2284960"
  },
  {
    "text": "like this so but it's really not needed for",
    "start": "2284960",
    "end": "2290240"
  },
  {
    "text": "tracing something else so what i also did i used um manga tracing library",
    "start": "2290240",
    "end": "2297839"
  },
  {
    "text": "contribution library to trace calls so let's see how this works i have another operation my controller",
    "start": "2297839",
    "end": "2304560"
  },
  {
    "text": "which is a post um yes that's the one i use sorry it is",
    "start": "2304560",
    "end": "2312160"
  },
  {
    "text": "the same so i don't do anything here unlike with measurements when i measured i had to wrap it in this",
    "start": "2312160",
    "end": "2319280"
  },
  {
    "text": "measure function call i won't do anything at all so what i'm going to do now is",
    "start": "2319280",
    "end": "2326560"
  },
  {
    "text": "to run this application",
    "start": "2326560",
    "end": "2329680"
  },
  {
    "text": "yes now i go here and i'm going to visit",
    "start": "2332000",
    "end": "2340079"
  },
  {
    "text": "swagger ap um not swagger jager jagger swagger and because it's cryptic",
    "start": "2340079",
    "end": "2347599"
  },
  {
    "text": "i kept it in the comments",
    "start": "2347599",
    "end": "2354320"
  },
  {
    "text": "so over here go to jager and this how it looks",
    "start": "2354320",
    "end": "2361119"
  },
  {
    "text": "because i was running this app before i have some traces probably over here",
    "start": "2361440",
    "end": "2367839"
  },
  {
    "text": "yep but i will do some more as you can see that i come i don't need",
    "start": "2367839",
    "end": "2374160"
  },
  {
    "text": "metrics anymore it works with the post so i do some more",
    "start": "2374160",
    "end": "2379280"
  },
  {
    "text": "posts and now i come here i do again",
    "start": "2379280",
    "end": "2385920"
  },
  {
    "text": "and there are more traces traces don't come immediately there is a bunch of work being done to batch them",
    "start": "2385920",
    "end": "2391680"
  },
  {
    "text": "and stuff like that and sample them out as well so not all traces actually reach your instructor",
    "start": "2391680",
    "end": "2397839"
  },
  {
    "text": "um let's basically get most of it so if you can if i open one trace you",
    "start": "2397839",
    "end": "2403839"
  },
  {
    "text": "can see here that this is the http call that i received and it took about",
    "start": "2403839",
    "end": "2410160"
  },
  {
    "text": "nine milliseconds as part of this call uh it went to the controller so basically probably there is some",
    "start": "2410160",
    "end": "2416160"
  },
  {
    "text": "sterilization work some routing and stuff like that over here i called insert and this is where",
    "start": "2416160",
    "end": "2423359"
  },
  {
    "text": "i return the result so it's very very useful to have it and look at this so if i click here i have a lot of stuff",
    "start": "2423359",
    "end": "2431200"
  },
  {
    "text": "that helped me to analyze what's going on so i have a process my machine stuff like that and i have",
    "start": "2431200",
    "end": "2438240"
  },
  {
    "text": "information about the http call there is a log entry as well so it gets associated with logs no it's",
    "start": "2438240",
    "end": "2445119"
  },
  {
    "text": "not associated with logs it's basically jagger connects to net core logging",
    "start": "2445119",
    "end": "2450319"
  },
  {
    "text": "in structure and put logs inside the span as well and here what i did i actually called",
    "start": "2450319",
    "end": "2456720"
  },
  {
    "text": " insert and you can see quite a lot of things are going on so this is the statement this is the host name",
    "start": "2456720",
    "end": "2463040"
  },
  {
    "text": "it's the instance and stuff like that and the process information so a lot of",
    "start": "2463040",
    "end": "2469200"
  },
  {
    "text": "information can be actually fetched from the span so and it's up to you what you put in the spam",
    "start": "2469200",
    "end": "2475280"
  },
  {
    "text": "this is just the default stuff that the contribution library puts in there but you are free to put anything you",
    "start": "2475280",
    "end": "2480640"
  },
  {
    "text": "want so as you can see uh it looks not that scary as on the slide so that's why i was eager",
    "start": "2480640",
    "end": "2487680"
  },
  {
    "text": "to show it to you and it's very cool so let's get back",
    "start": "2487680",
    "end": "2492720"
  },
  {
    "text": "over here and i want this is we are still in the same process right so it's not that distributed",
    "start": "2492720",
    "end": "2498160"
  },
  {
    "text": "so let's make it distributed so what i have i have another project here and some other part that's hidden",
    "start": "2498160",
    "end": "2506240"
  },
  {
    "text": "what's hidden is configuration mass transit mass transit is very popular free open source measuring middleware",
    "start": "2506240",
    "end": "2512720"
  },
  {
    "text": "4.net and i again use some contribution library to do both um open tracing and",
    "start": "2512720",
    "end": "2520960"
  },
  {
    "text": "collection of metrics metrics went to the core mass transit library that was originally",
    "start": "2520960",
    "end": "2526960"
  },
  {
    "text": "my package and i gave it to chris now it's part of the mastering itself and probably we",
    "start": "2526960",
    "end": "2532480"
  },
  {
    "text": "will create one for west transit but this is good enough um so the second application has exactly",
    "start": "2532480",
    "end": "2540480"
  },
  {
    "text": "the same configuration but it has an end point the consumer of that message that we're going to send and here's the",
    "start": "2540480",
    "end": "2546960"
  },
  {
    "text": "consumer basically it makes it it doesn't absurd of the very similar documents to another",
    "start": "2546960",
    "end": "2553760"
  },
  {
    "text": "collection and another database so it's very simple operation done in very similar way as um",
    "start": "2553760",
    "end": "2561119"
  },
  {
    "text": "as the controller itself but in order to make it distributed i will",
    "start": "2561119",
    "end": "2566160"
  },
  {
    "text": "ignore the post controller and i will use this one which creates exactly the same object as before but",
    "start": "2566160",
    "end": "2572400"
  },
  {
    "text": "instead of putting the database it publishes the message to them to rub it in queue",
    "start": "2572400",
    "end": "2577680"
  },
  {
    "text": "so let me run this application",
    "start": "2577680",
    "end": "2582000"
  },
  {
    "text": "i have now two services running at the same time and i can look at their metrics",
    "start": "2583920",
    "end": "2593838"
  },
  {
    "text": "this is the one that is running it still has all the collecting metrics because i haven't stopped it localhost 5001.",
    "start": "2595280",
    "end": "2607599"
  },
  {
    "text": "so this is completely empty because it has no no calls yet so let me use the",
    "start": "2607599",
    "end": "2613839"
  },
  {
    "text": "put thing and i can execute it again several times i can look at",
    "start": "2613839",
    "end": "2621040"
  },
  {
    "text": "rabbit and q they all run in docker on my machine in",
    "start": "2621040",
    "end": "2626960"
  },
  {
    "text": "docker compose so you can see that there were some messages coming over if i look at the queues um",
    "start": "2626960",
    "end": "2634720"
  },
  {
    "text": "there is a history so there were messaging coming through they all consumed so it's fine there are no errors over",
    "start": "2634720",
    "end": "2640400"
  },
  {
    "text": "here so if i go to metrics of the first one",
    "start": "2640400",
    "end": "2645920"
  },
  {
    "text": "i can also see that the put controller has been called several times",
    "start": "2645920",
    "end": "2652000"
  },
  {
    "text": "and this is it for some reason i'm not getting promisious metrics for mass transit but that's not what i'm showing",
    "start": "2653920",
    "end": "2659200"
  },
  {
    "text": "that's okay here is the consumption metric so you can see that this is the message",
    "start": "2659200",
    "end": "2666160"
  },
  {
    "text": "type that i was sending uh this is a consumer type and this is how it went to the bucket and this is the",
    "start": "2666160",
    "end": "2673839"
  },
  {
    "text": "service name which is trace remote so it's already pretty useful i have some metrics",
    "start": "2673839",
    "end": "2679970"
  },
  {
    "text": "[Music] let me go to jager",
    "start": "2679970",
    "end": "2685519"
  },
  {
    "text": "search for traces again and hope that there will be some",
    "start": "2685680",
    "end": "2692319"
  },
  {
    "text": "traces that are distributed it doesn't happen immediately straight away",
    "start": "2692319",
    "end": "2697520"
  },
  {
    "text": "so i i sometimes need to wait",
    "start": "2697520",
    "end": "2701680"
  },
  {
    "text": "i swear to you that it actually went through so i need maybe to refresh it",
    "start": "2702640",
    "end": "2709520"
  },
  {
    "text": "yeah so trace remote is coming to the list of services now it wasn't there before",
    "start": "2709680",
    "end": "2716480"
  },
  {
    "text": "this is how the command was executed so this is how spans in that service were built so i",
    "start": "2716880",
    "end": "2723839"
  },
  {
    "text": "receive a message i call the consumer well mass transit calls it for me and i do",
    "start": "2723839",
    "end": "2729680"
  },
  {
    "text": "update but again it doesn't give me any distribution right so something is not exactly right so let me go over here",
    "start": "2729680",
    "end": "2739839"
  },
  {
    "text": "find traces again and i couldn't find anything okay let it just process things on its own and i can",
    "start": "2739839",
    "end": "2747040"
  },
  {
    "text": "do some more calls",
    "start": "2747040",
    "end": "2750000"
  },
  {
    "text": "and meanwhile while processing the traces i can go over here",
    "start": "2753520",
    "end": "2758880"
  },
  {
    "text": "yes definitely doesn't have us hasn't yet processed the traces and i guess i would need to return back",
    "start": "2758880",
    "end": "2765280"
  },
  {
    "text": "to it a bit later just to see how it went",
    "start": "2765280",
    "end": "2770400"
  },
  {
    "text": "or i can just try to find all the traces that i had from before",
    "start": "2770400",
    "end": "2776800"
  },
  {
    "text": "now it has only recent traces so let's wait a little bit and get back to the slides and i come",
    "start": "2776880",
    "end": "2782720"
  },
  {
    "text": "back to the picture and show you distributors",
    "start": "2782720",
    "end": "2786640"
  },
  {
    "text": "all right now um i was going to show you this the",
    "start": "2787839",
    "end": "2793520"
  },
  {
    "text": "architecture how they call it in in jager um but it's not very kind of impressive",
    "start": "2793520",
    "end": "2801280"
  },
  {
    "text": "because it just has two services running on my local machine this is much more impressive this is a",
    "start": "2801280",
    "end": "2807119"
  },
  {
    "text": "picture of datadog service map that kind of uses traces to build this",
    "start": "2807119",
    "end": "2812319"
  },
  {
    "text": "diagram and it's very cool because uh you can see all the stuff and you see",
    "start": "2812319",
    "end": "2818079"
  },
  {
    "text": "resources that loaded uh the most in in red circles those that are green are kind of fine",
    "start": "2818079",
    "end": "2824240"
  },
  {
    "text": "um and it has connections between them so all the distributed operations",
    "start": "2824240",
    "end": "2830079"
  },
  {
    "text": "going across service boundaries or reaching out to the database for example here",
    "start": "2830079",
    "end": "2835359"
  },
  {
    "text": "you have uh the store there's probably a web application that has a an icon of web that goes to",
    "start": "2835359",
    "end": "2842000"
  },
  {
    "text": "  represented the separate service and it goes back and forth",
    "start": "2842000",
    "end": "2847599"
  },
  {
    "text": "and there is a product recommendation service there is a queue in radius and stuff like that and they all talk together",
    "start": "2847599",
    "end": "2853440"
  },
  {
    "text": "and the size of the ball or the circle identifies how how many requests the",
    "start": "2853440",
    "end": "2858720"
  },
  {
    "text": "service gets it's really cool and in in if you look at data dog in production you point into",
    "start": "2858720",
    "end": "2865119"
  },
  {
    "text": "one thing you can zoom in and it will also draw the lines so it kind of indicates with dash dashed",
    "start": "2865119",
    "end": "2874160"
  },
  {
    "text": "arrow where requests are going to and maybe we have time to show you the production",
    "start": "2874160",
    "end": "2881040"
  },
  {
    "text": "and this is what's called flame graph it's very similar to just to to jager so datadog and other",
    "start": "2881040",
    "end": "2888960"
  },
  {
    "text": "or tracing providers or vendors they can build this kind of graphs this one is",
    "start": "2888960",
    "end": "2894800"
  },
  {
    "text": "not really distributed as such i mean it doesn't go sort of this cold the initial call still",
    "start": "2894800",
    "end": "2900720"
  },
  {
    "text": "kind of lasts until the end typically this for me is a sign of some sort of distributed model",
    "start": "2900720",
    "end": "2906640"
  },
  {
    "text": "so there's a lot of rpc calls going between services and if you have more distributed",
    "start": "2906640",
    "end": "2912720"
  },
  {
    "text": "architecture with messaging we actually this call will end it doesn't represent the trace it",
    "start": "2912720",
    "end": "2917839"
  },
  {
    "text": "represents a single parent span and then some calls will be added afterwards so it goes",
    "start": "2917839",
    "end": "2924880"
  },
  {
    "text": "further and further and further and so on so and that's pretty cool to see",
    "start": "2924880",
    "end": "2930640"
  },
  {
    "text": "now um i want to since i touched",
    "start": "2932880",
    "end": "2939119"
  },
  {
    "text": "let me see if jager actually catched up",
    "start": "2939119",
    "end": "2943838"
  },
  {
    "text": "and it didn't i have no idea why",
    "start": "2944960",
    "end": "2957200"
  },
  {
    "text": "i have i swear to you i've seen it i should have put in the slide it was actually putting it in properly",
    "start": "2957200",
    "end": "2962559"
  },
  {
    "text": "in in in a distributed trace it's a demo effect so i'm sorry about this",
    "start": "2962559",
    "end": "2968800"
  },
  {
    "text": "you see it it doesn't connect it so if if it would connect it they will pop up here together on on the",
    "start": "2968800",
    "end": "2975280"
  },
  {
    "text": "system architecture diagram connected so somehow it didn't work",
    "start": "2975280",
    "end": "2981280"
  },
  {
    "text": "but it actually works it should be so something is apparently wrong maybe over",
    "start": "2981280",
    "end": "2987200"
  },
  {
    "text": "here i can see something yes there is a warning it says that invalid span id",
    "start": "2987200",
    "end": "2993920"
  },
  {
    "text": "skipping clocks yes so it couldn't find a parent some reason so maybe my spans were",
    "start": "2993920",
    "end": "3000480"
  },
  {
    "text": "sampled on the parent side or something else has happened so we're just gonna call it several times",
    "start": "3000480",
    "end": "3005599"
  },
  {
    "text": "more just in case and i get back to it later on if i have time",
    "start": "3005599",
    "end": "3011119"
  },
  {
    "text": "all right um so i mentioned open telemetry in the",
    "start": "3011119",
    "end": "3017680"
  },
  {
    "text": "title of the talk so but i want to give you some overview of what's going on at the moment in observability space in terms of",
    "start": "3017680",
    "end": "3024000"
  },
  {
    "text": "initiatives that are open initiatives so not really vendor specific so there",
    "start": "3024000",
    "end": "3030319"
  },
  {
    "text": "is open tracing that we covered it only works with traces and rudimentary logging open sensors",
    "start": "3030319",
    "end": "3036000"
  },
  {
    "text": "is the initiative that aimed to cover metrics and traces and they say we",
    "start": "3036000",
    "end": "3041680"
  },
  {
    "text": "will implement logs in the future but there is no future open sensors open census",
    "start": "3041680",
    "end": "3046960"
  },
  {
    "text": "roots in google dapper product and there have a paper about it you can find it very easily on open sense",
    "start": "3046960",
    "end": "3053359"
  },
  {
    "text": "website but they decided to merge with open tracing and form together an open telemetry",
    "start": "3053359",
    "end": "3060240"
  },
  {
    "text": "initiative that will cover metrics traces and potential logs i'll get back to it as last open metrics",
    "start": "3060240",
    "end": "3067920"
  },
  {
    "text": "will survive definitely promises is based on open metrics basically this is promising standard",
    "start": "3067920",
    "end": "3073440"
  },
  {
    "text": "uh they only aim to make promises matrix format the default one for metrics so promises in grafana this",
    "start": "3073440",
    "end": "3079520"
  },
  {
    "text": "the speed combination think it will continue to exist it's not going anywhere but vendors",
    "start": "3079520",
    "end": "3086720"
  },
  {
    "text": "uh of clouds observability kind of tools like datadog and neuralic",
    "start": "3086720",
    "end": "3092160"
  },
  {
    "text": "they start to adopt open metrics in terms of like they can receive it instead of prometheus you don't need promises",
    "start": "3092160",
    "end": "3097680"
  },
  {
    "text": "anymore and they can build graphs for you instead of using grafana so it's up to you how to do that",
    "start": "3097680",
    "end": "3105119"
  },
  {
    "text": "um open zipkin is a bit weird thing it's very very popular i have to admit",
    "start": "3105119",
    "end": "3110720"
  },
  {
    "text": "it it was done to do distributed traces and uh it's just a tool like jager is a tool",
    "start": "3110720",
    "end": "3118400"
  },
  {
    "text": "originally developed by uber attack zipkin is a tool developed by twitter so they say okay we open source it and",
    "start": "3118400",
    "end": "3124960"
  },
  {
    "text": "we form a community that's called open zipkin that will just provide libraries and stuff like that instrumentation but",
    "start": "3124960",
    "end": "3131280"
  },
  {
    "text": "the only product that can consume zip code traces open zip code traces is zipkin so you",
    "start": "3131280",
    "end": "3137280"
  },
  {
    "text": "kind of stuck with it but if you want to give it a go i mean",
    "start": "3137280",
    "end": "3142400"
  },
  {
    "text": "it's fine uh it's it's a decent product and i heard a lot of people using it",
    "start": "3142400",
    "end": "3147680"
  },
  {
    "text": "open telemetry is interesting based as i said open tracing and open sensors",
    "start": "3147680",
    "end": "3154559"
  },
  {
    "text": "decided to go together and create a new um specification for that will cover",
    "start": "3154559",
    "end": "3161440"
  },
  {
    "text": "kind of everything because you saw that metrics are kind of isolated on their own",
    "start": "3161440",
    "end": "3166880"
  },
  {
    "text": "choices are on their own but they measure the same things and it kind of makes no sense to do that",
    "start": "3166880",
    "end": "3172000"
  },
  {
    "text": "so when you measure with when you create traces they have",
    "start": "3172000",
    "end": "3179119"
  },
  {
    "text": "start and stop right so you can potentially build metrics from that um so opencelebrate aims to solve",
    "start": "3179119",
    "end": "3186640"
  },
  {
    "text": "all these problems including the logs in the future in addition to that they have some more interesting things",
    "start": "3186640",
    "end": "3193119"
  },
  {
    "text": "in the pipeline so open trade temperature isn't better now and i'm going to talk about it",
    "start": "3193119",
    "end": "3198559"
  },
  {
    "text": "in a moment so um orbit telemetry provides a single set",
    "start": "3198559",
    "end": "3204720"
  },
  {
    "text": "of apis libraries agents collect the service the with distributed traces and metrics from your application",
    "start": "3204720",
    "end": "3210960"
  },
  {
    "text": "so most likely it is the future of observability but it's a bit too early to start jumping in this wagon i think",
    "start": "3210960",
    "end": "3217839"
  },
  {
    "text": "if you really want to have something in production you would be just as well very in a good",
    "start": "3217839",
    "end": "3224160"
  },
  {
    "text": "position using open metrics and open uh tracing so but what they do",
    "start": "3224160",
    "end": "3231040"
  },
  {
    "text": "is they created a specification for api and also for sdk so they dictate how you",
    "start": "3231040",
    "end": "3236079"
  },
  {
    "text": "create libraries that support those apis they have implementation for a bunch of platforms you go to open telemetry",
    "start": "3236079",
    "end": "3242480"
  },
  {
    "text": "phones quite a lot of already done but unlike anyone else they also decided to",
    "start": "3242480",
    "end": "3249760"
  },
  {
    "text": "create their own protocol it's based on jrpc and protobuf so it's pretty performant",
    "start": "3249760",
    "end": "3255359"
  },
  {
    "text": "no one else except of zipkin actually have done it so standard protocol that will just work",
    "start": "3255359",
    "end": "3261520"
  },
  {
    "text": "as part of open telemetry they create the collector it's written in go you can find it over there",
    "start": "3261520",
    "end": "3266880"
  },
  {
    "text": "so it uses the protocol to basically you can send data to the collector and a bunch of exporters that are vendor",
    "start": "3266880",
    "end": "3274400"
  },
  {
    "text": "specific so you can export stuff that you collect with open telemetry to prometheus jager zipkin whatever else",
    "start": "3274400",
    "end": "3283359"
  },
  {
    "text": "so let's touch some terminology of open telemetry trace is basically almost the same it's virtual and it's",
    "start": "3283359",
    "end": "3290319"
  },
  {
    "text": "represented by rsid a span is also very similar to open tracing span but it has a little bit more context and",
    "start": "3290319",
    "end": "3298000"
  },
  {
    "text": "more into the state so spanned context is very similar to open tracing but it must have trace id and span id",
    "start": "3298000",
    "end": "3304799"
  },
  {
    "text": "open tracing said it's vent implementation specific how you basically correlate",
    "start": "3304799",
    "end": "3311599"
  },
  {
    "text": "uh openclam just says you must use span id and trace id to correlate this is the way to go so to kind of",
    "start": "3311599",
    "end": "3317839"
  },
  {
    "text": "eliminate this confusion and correlation context is similar to baggage items in open tracing",
    "start": "3317839",
    "end": "3323520"
  },
  {
    "text": "but it also used in logs and metrics so it's not only that the contacts is attached to traces but attached to",
    "start": "3323520",
    "end": "3329599"
  },
  {
    "text": "everything so the protocol is a unique thing in",
    "start": "3329599",
    "end": "3335200"
  },
  {
    "text": "open telemetry so they aim to kind of define a standard for how telemetry being delivered to the",
    "start": "3335200",
    "end": "3340720"
  },
  {
    "text": "instructor a collector as i said a component that receives the protocol data funny enough it can be used as a",
    "start": "3340720",
    "end": "3348319"
  },
  {
    "text": "standalone tool it's a case receive stuff but it also can be used as a component as a library",
    "start": "3348319",
    "end": "3354240"
  },
  {
    "text": "so you can build your exporter so for example datadog build",
    "start": "3354240",
    "end": "3359440"
  },
  {
    "text": "an exporter that uses a collector component to export data to their own instructor",
    "start": "3359440",
    "end": "3365359"
  },
  {
    "text": "so they use statsd for metrics and they use their own protocol",
    "start": "3365359",
    "end": "3371119"
  },
  {
    "text": "for traces and so basically they receive data using the collector convert it over and",
    "start": "3371119",
    "end": "3377599"
  },
  {
    "text": "send it to their own instruction their own format there are a bunch of exporters i think about 20 different",
    "start": "3377599",
    "end": "3383359"
  },
  {
    "text": "vendors you can look at in the repo find out so they have a bit different set of",
    "start": "3383359",
    "end": "3391119"
  },
  {
    "text": "metrics so they have counters up and down counters recorders observers they introduce a",
    "start": "3391119",
    "end": "3396799"
  },
  {
    "text": "concept observers which is a synchronous metric asynchronous metric is different because with opencelebrator you don't",
    "start": "3396799",
    "end": "3404160"
  },
  {
    "text": "necessarily know unlike openmetrics which which is normally a pull so someone calls you to collect metrics",
    "start": "3404160",
    "end": "3411280"
  },
  {
    "text": "with openclimate you don't know if you use a collector it will actually be a push model it means that there will be significant overhead if you send all the",
    "start": "3411280",
    "end": "3417839"
  },
  {
    "text": "metrics every time you do the operation so they introduce the observer",
    "start": "3417839",
    "end": "3423599"
  },
  {
    "text": "for you in order to not sort of every time update the value but the observer can call your metric",
    "start": "3423599",
    "end": "3430559"
  },
  {
    "text": "and observe it at a time when it's being collected so it's kind of trying to solve this",
    "start": "3430559",
    "end": "3436799"
  },
  {
    "text": "push versus pull model in in a nice way",
    "start": "3436799",
    "end": "3442000"
  },
  {
    "text": "uh and aggregations at this moment complex aggregations aren't really defined in the spec so i",
    "start": "3442160",
    "end": "3448480"
  },
  {
    "text": "quoted a very long line from their documentation",
    "start": "3448480",
    "end": "3452960"
  },
  {
    "text": "they say we want to have it but to be honest there is only one implementation that i've seen that has",
    "start": "3453839",
    "end": "3459040"
  },
  {
    "text": "for example histograms is the implementation of go which is the most advanced one all others that either have plans so the",
    "start": "3459040",
    "end": "3465920"
  },
  {
    "text": "most they have is a comment line they want to have histograms or none so for example.net",
    "start": "3465920",
    "end": "3471760"
  },
  {
    "text": "implementation or java implication has no aggregation metrics whatsoever which is a bummer so it's it's really",
    "start": "3471760",
    "end": "3480799"
  },
  {
    "text": "a big thing that needs to be done so in.net since there are a bunch of",
    "start": "3480799",
    "end": "3488400"
  },
  {
    "text": "people saying there are dotnet developers",
    "start": "3488400",
    "end": "3492240"
  },
  {
    "text": "so check out the repo basically there's a small group of people working on that",
    "start": "3495440",
    "end": "3500559"
  },
  {
    "text": "i was contributing as far as i can as much as i can but they might need help so there are",
    "start": "3500559",
    "end": "3507200"
  },
  {
    "text": "regular meetings i never participate in any but if you really want to get involved please do",
    "start": "3507200",
    "end": "3512960"
  },
  {
    "text": "it's basically the community effort it's backed by large organizations like this particular",
    "start": "3512960",
    "end": "3519200"
  },
  {
    "text": "one is quite a lot of microsoft people are working there on the code but apparently the more",
    "start": "3519200",
    "end": "3525440"
  },
  {
    "text": "people get involved the faster it will go it uses system diagnostics with the event listeners and activities",
    "start": "3525440",
    "end": "3532000"
  },
  {
    "text": "which activities are pretty new things so if you haven't looked at that you might want to do that as well",
    "start": "3532000",
    "end": "3539200"
  },
  {
    "text": "and the openslim24.net has already quite a lot of instrumentation mainly it goes around microsoft owned things so",
    "start": "3539200",
    "end": "3547200"
  },
  {
    "text": "contributions for things like mongodb radius and stuff i think they have sec exchange radius",
    "start": "3547200",
    "end": "3552799"
  },
  {
    "text": "instrumented because they actually use it themselves but for example there is nothing from mongodb",
    "start": "3552799",
    "end": "3558960"
  },
  {
    "text": "but for those who use sql server it's apparently there and they have open tracing shim so if",
    "start": "3558960",
    "end": "3564799"
  },
  {
    "text": "you have your application instrumented with open tracing open telemetry will be just plug in if it's necessary or not",
    "start": "3564799",
    "end": "3570799"
  },
  {
    "text": "it's up to you to decide but it gives you sort of migration path",
    "start": "3570799",
    "end": "3575440"
  },
  {
    "text": "so we're moving along for all developers.net whatever java python so",
    "start": "3576640",
    "end": "3584319"
  },
  {
    "text": "i would suggest use some of the open source tools for open tracing and open metrics uh don't go with vendor locking unless",
    "start": "3584319",
    "end": "3590799"
  },
  {
    "text": "you're absolutely sure that they're going to stay with this vendor for the rest of your life you will get a better knife nicely if",
    "start": "3590799",
    "end": "3596960"
  },
  {
    "text": "you don't do observable services yet but you want to do services make them observable from the start really i mean",
    "start": "3596960",
    "end": "3602720"
  },
  {
    "text": "i mean it try helping open celebrity project moving forward if you can and check opens them to status regularly maybe it",
    "start": "3602720",
    "end": "3609599"
  },
  {
    "text": "will become other better soon so it just out gathered to better stage",
    "start": "3609599",
    "end": "3614720"
  },
  {
    "text": "about the months ago for net developers you would do the same i mean",
    "start": "3614720",
    "end": "3620319"
  },
  {
    "text": "in addition you might want to consider using system diagnostics activities and stuff because they have kind of things",
    "start": "3620319",
    "end": "3627359"
  },
  {
    "text": "obligation inside diagnostics for for azure works with",
    "start": "3627359",
    "end": "3632799"
  },
  {
    "text": "with activities basically there is almost nothing to do and all microsoft libraries including in",
    "start": "3632799",
    "end": "3639200"
  },
  {
    "text": "the clr in http client sql whatever they actually produce",
    "start": "3639200",
    "end": "3644240"
  },
  {
    "text": "diagnostics events which you don't see normally unless you attach diagnostic",
    "start": "3644240",
    "end": "3651119"
  },
  {
    "text": "diagnostic listener it provides a lot of information about how the application is running",
    "start": "3651119",
    "end": "3656400"
  },
  {
    "text": "you can create your own stuff uh there are a few places where you can find things",
    "start": "3656400",
    "end": "3661599"
  },
  {
    "text": "and i might just write some simple code as well to show how it's done we created a few instrumentation libraries",
    "start": "3661599",
    "end": "3667920"
  },
  {
    "text": "using that it's pretty nice i mean it's it uses sort of that core native things",
    "start": "3667920",
    "end": "3675280"
  },
  {
    "text": "to instrument libraries that you can actually write uh a sort of conversion to open tracing",
    "start": "3675280",
    "end": "3681760"
  },
  {
    "text": "and or open celebratory when they you want to not touching the library itself",
    "start": "3681760",
    "end": "3687599"
  },
  {
    "text": "um yes and now it's question time",
    "start": "3687599",
    "end": "3695040"
  },
  {
    "text": "and so if you if you want to reach out you can just go to twitter and i have",
    "start": "3695040",
    "end": "3701200"
  },
  {
    "text": "this black screen and i completely forgot about the nice things",
    "start": "3701200",
    "end": "3707760"
  },
  {
    "text": "about like this like this so i'm popping up in front of the camera",
    "start": "3708880",
    "end": "3714799"
  },
  {
    "text": "again so you probably already forgot my face so here i am so if you want to ask some questions i i saw a question in the",
    "start": "3714799",
    "end": "3721520"
  },
  {
    "text": "in the chat about the slides i already exported them to pdf i will put them in slack",
    "start": "3721520",
    "end": "3726559"
  },
  {
    "text": "in a room place and i probably put them in slide deck in in slideshare or something so if you",
    "start": "3726559",
    "end": "3733359"
  },
  {
    "text": "have more questions it's time to ask if we have a little bit of time",
    "start": "3733359",
    "end": "3739839"
  }
]