[
  {
    "text": "welcome everyone is this thing on hello",
    "start": "3199",
    "end": "9040"
  },
  {
    "text": "perfect i'm really happy to see so many javascript developers in here excited about the new async and awaits someone's",
    "start": "9040",
    "end": "16240"
  },
  {
    "text": "leaving i'm kidding this is c sharp i promise someone actually left so i really hope",
    "start": "16240",
    "end": "21920"
  },
  {
    "text": "they're coming back all right so we're going to be talking about efficient async and awaits and how to kind of use the best",
    "start": "21920",
    "end": "29039"
  },
  {
    "text": "practices when you're building c-sharp applications efficiency can mean quite a lot of things it can mean that we want to build",
    "start": "29039",
    "end": "35440"
  },
  {
    "text": "applications that perform really fast or really good for our end users it can mean that we are efficient in terms of",
    "start": "35440",
    "end": "42079"
  },
  {
    "text": "building code faster and making sure that we follow the best practices to ensure that the applications aren't",
    "start": "42079",
    "end": "47440"
  },
  {
    "text": "crashing on us we are going to cover a few of these different things in this talk and hopefully by the end of this you will",
    "start": "47440",
    "end": "53600"
  },
  {
    "text": "have some some goodies that you can bring back to your applications and make sure that you're using async and away",
    "start": "53600",
    "end": "59039"
  },
  {
    "text": "properly in your apps my name is phil beckberg i've done a few talks on c sharp i have a book on c",
    "start": "59039",
    "end": "65119"
  },
  {
    "text": "sharp i have a course on pluralsight so check that out if you like any of my stuff and you can ping me on twitter if",
    "start": "65119",
    "end": "70560"
  },
  {
    "text": "you have any questions or just shout out i still have a little bit of a bad hearing so",
    "start": "70560",
    "end": "75759"
  },
  {
    "text": "i if i can't hear it's not that i'm ignoring you just ping me on twitter if i if i can't get your question now",
    "start": "75759",
    "end": "81680"
  },
  {
    "text": "so i guess the question is why would we bother at all introducing asynchronous principles in an application",
    "start": "81680",
    "end": "88479"
  },
  {
    "text": "really it boils down to the fact that we want to avoid this type of behavior we have an application this is an android",
    "start": "88479",
    "end": "94640"
  },
  {
    "text": "application and i'm not specifically saying that all android apps are unreliable but in this case i built an",
    "start": "94640",
    "end": "100000"
  },
  {
    "text": "application for for ndc london that when you click the button the application felt like it was crashing or the os told",
    "start": "100000",
    "end": "106880"
  },
  {
    "text": "me that this application is no longer responding so the idea is that we want to bring in",
    "start": "106880",
    "end": "111920"
  },
  {
    "text": "asynchronous principles to ensure that we can avoid these types of unreliable scenarios",
    "start": "111920",
    "end": "117600"
  },
  {
    "text": "so one of the efficient approaches is to you know improve the user experience i want the application to feel as",
    "start": "117600",
    "end": "123759"
  },
  {
    "text": "efficient as possible for my end users just because the operating system is telling me that something might be",
    "start": "123759",
    "end": "130399"
  },
  {
    "text": "taking a little bit too long of a time that doesn't necessarily mean that the application isn't doing some heavy work",
    "start": "130399",
    "end": "136480"
  },
  {
    "text": "just means that we're doing the work on the wrong place and also when it comes to mobile applications we need to keep in mind",
    "start": "136480",
    "end": "143200"
  },
  {
    "text": "that we shouldn't overuse asynchronous programming or parallel programming because every operation on a mobile",
    "start": "143200",
    "end": "149680"
  },
  {
    "text": "application requires battery and cpu power so that's something we should keep in the back of our heads",
    "start": "149680",
    "end": "155599"
  },
  {
    "text": "if you go over to the pc world or mac world for the for that matter um",
    "start": "155599",
    "end": "160720"
  },
  {
    "text": "we want to make sure that we can use all the resources that we have available this is a my my workstation at home",
    "start": "160720",
    "end": "165920"
  },
  {
    "text": "which is pretty powerful i have a lot of cpu i have a lot of ram and pretty good fasts internet speed and good hard",
    "start": "165920",
    "end": "172720"
  },
  {
    "text": "drives so it may be able to leverage all those different types of resources and that boils down to two different",
    "start": "172720",
    "end": "178720"
  },
  {
    "text": "types of paradigms we can talk about cpu bound and i o bound operations",
    "start": "178720",
    "end": "184800"
  },
  {
    "text": "in dot net there these are approached the same way but they are fundamentally different cpu bound operations that's parallel",
    "start": "184800",
    "end": "191680"
  },
  {
    "text": "programming where you want to divide a problem into really small pieces and solve them independently where they have",
    "start": "191680",
    "end": "197440"
  },
  {
    "text": "really nothing in common io bound operations could be loading a really large file into memory which then",
    "start": "197440",
    "end": "203599"
  },
  {
    "text": "later process in parallel so you can combine these two paradigms as well which is where it becomes a",
    "start": "203599",
    "end": "209120"
  },
  {
    "text": "little bit confusing but with the help of net and something called the task parallel library we can make this work a",
    "start": "209120",
    "end": "215200"
  },
  {
    "text": "little bit easier and we're going to be looking at quite a few examples of that as well so in this example here i'm just loading",
    "start": "215200",
    "end": "221680"
  },
  {
    "text": "some really large chunk of data which i think can process in parallel but it really boils down to one simple",
    "start": "221680",
    "end": "229040"
  },
  {
    "text": "notion of what i want to do i want to go from something that blocks my user interface or blocks my application",
    "start": "229040",
    "end": "235280"
  },
  {
    "text": "it doesn't make a lot of sense to maybe introduce async and wait in a console application it makes more sense to do",
    "start": "235280",
    "end": "240959"
  },
  {
    "text": "this in applications that have a user interface so i want to take my application from feeling like it's blocking my user from",
    "start": "240959",
    "end": "247599"
  },
  {
    "text": "input to something that feels a little bit better i can allow my users to do more things at the same time",
    "start": "247599",
    "end": "253439"
  },
  {
    "text": "and the way that i do that is by move all the work that i'm doing on the ui thread i want to avoid doing heavy lifting on",
    "start": "253439",
    "end": "259600"
  },
  {
    "text": "the ui thread or the main thread of the application in the past this has been rather",
    "start": "259600",
    "end": "265919"
  },
  {
    "text": "difficult to do in a good way because you had to do use threadings manually but now we have apis in in.net to do this a little bit",
    "start": "265919",
    "end": "272720"
  },
  {
    "text": "easier and one thing i want to want you to keep in mind is that you should never block in a synchronous operation so once",
    "start": "272720",
    "end": "279040"
  },
  {
    "text": "you've said that i want to run this somewhere else never force that to give you a result there are proper ways to",
    "start": "279040",
    "end": "285120"
  },
  {
    "text": "ask for if there is a result available but you never force it to give you some data unless you know it's completed",
    "start": "285120",
    "end": "291759"
  },
  {
    "text": "might sound a little bit obvious but we're going to look at a few examples of that as well where we crash an application because we're using it",
    "start": "291759",
    "end": "298240"
  },
  {
    "text": "improperly so really if i look back at that nice android application really what i",
    "start": "298240",
    "end": "304160"
  },
  {
    "text": "want to do is i want to take this blocking ui that where the os is telling me that something's crashing and i want",
    "start": "304160",
    "end": "310080"
  },
  {
    "text": "to prompt the user with another type of blocking to tell them that well you should wait for a little bit longer",
    "start": "310080",
    "end": "316720"
  },
  {
    "text": "psychologically this means that the user knows that the application is still doing something",
    "start": "316720",
    "end": "321759"
  },
  {
    "text": "i'm providing them feedback that the application isn't crashing although we all know that if we see this",
    "start": "321759",
    "end": "327520"
  },
  {
    "text": "please wait dialogue for too long we're going to end up killing the application anyways because we don't really want to wait",
    "start": "327520",
    "end": "334080"
  },
  {
    "text": "so there are other ways to approach this as well but this is just one of the ideas behind why we want to make our",
    "start": "334080",
    "end": "339280"
  },
  {
    "text": "user interfaces a little bit better and to do this we want to introduce the task parallel library",
    "start": "339280",
    "end": "345680"
  },
  {
    "text": "this was added in.net 4.5 and the whole idea is to simplify",
    "start": "345680",
    "end": "351120"
  },
  {
    "text": "working with concurrent and asynchronous code it's kind of the definition of the task parallel library so they group these two",
    "start": "351120",
    "end": "357680"
  },
  {
    "text": "different paradigms together where we have concurrent code which is parallel programming where we solve small pieces",
    "start": "357680",
    "end": "363039"
  },
  {
    "text": "of problems in smaller pieces and do that as fast as possible using every",
    "start": "363039",
    "end": "368160"
  },
  {
    "text": "available resource and then we have asynchronous programming which is a little bit different it's also about offloading",
    "start": "368160",
    "end": "374400"
  },
  {
    "text": "work to a different thread or a different something else that's not blocking my user interface but then when there's a result",
    "start": "374400",
    "end": "381360"
  },
  {
    "text": "available or when that operation has completed i wants to be notified think of a callback i want to be",
    "start": "381360",
    "end": "387759"
  },
  {
    "text": "notified when there's some data that i can process and to introduce this in a c-sharp",
    "start": "387759",
    "end": "393120"
  },
  {
    "text": "application or any dot net application it's really simple it all starts with task.run",
    "start": "393120",
    "end": "399440"
  },
  {
    "text": "this does a lot of things behind the scenes where it tries to figure out where to put your work it schedules your",
    "start": "399440",
    "end": "404639"
  },
  {
    "text": "work to run on a different thread it may reuse threads if there's one that's available so it doesn't have to do",
    "start": "404639",
    "end": "410400"
  },
  {
    "text": "unnecessary allocations so there's a lot of things that happening here that we probably should keep in mind as well",
    "start": "410400",
    "end": "418319"
  },
  {
    "text": "the idea is that work is distributed somewhere else to different threads so it doesn't block our current context",
    "start": "418319",
    "end": "425280"
  },
  {
    "text": "context is that thread as well they're kind of used interchangeably then one of the interesting things with",
    "start": "425280",
    "end": "430960"
  },
  {
    "text": "this task parallel library is that threads on the thread pool can be reused for different tasks now normally when",
    "start": "430960",
    "end": "436800"
  },
  {
    "text": "you do thread.start or new thread that actually gives you a new thread that it's not reused there's no data",
    "start": "436800",
    "end": "442880"
  },
  {
    "text": "available in that particular context but with tasks you may have data that's",
    "start": "442880",
    "end": "448240"
  },
  {
    "text": "coming from another synchronous operation that you've done in before because it's reusing data so there might",
    "start": "448240",
    "end": "453919"
  },
  {
    "text": "be threads static data that's still available on a new task and that can be a little bit confusing",
    "start": "453919",
    "end": "459280"
  },
  {
    "text": "so with that given you shouldn't use thread static data at all when you do async and awaits or taskbar library",
    "start": "459280",
    "end": "466879"
  },
  {
    "text": "and what also allows you to do when you do task.run it actually gives you something called a task back and you can",
    "start": "466879",
    "end": "472400"
  },
  {
    "text": "use this to figure out if there's a result available you can subscribe to when it's completed this is known as",
    "start": "472400",
    "end": "479280"
  },
  {
    "text": "introducing something called a continuation so once i've started my asynchronous operation that could be",
    "start": "479280",
    "end": "484479"
  },
  {
    "text": "loading a file from disk or querying a database or something like that when that's completed i can go back to",
    "start": "484479",
    "end": "490720"
  },
  {
    "text": "that place where i was before and i can continue doing my work all without blocking my user for doing",
    "start": "490720",
    "end": "497680"
  },
  {
    "text": "additional things in my application and of course this here also allows us",
    "start": "497680",
    "end": "503440"
  },
  {
    "text": "to return data as i mentioned it wouldn't be so useful if we were only able to",
    "start": "503440",
    "end": "508720"
  },
  {
    "text": "offload work somewhere else and not being able to ask for data back now the task here is in fact generic but",
    "start": "508720",
    "end": "515680"
  },
  {
    "text": "you don't have to explicitly determine which return type it has that's in fact inferred by the compiler",
    "start": "515680",
    "end": "522159"
  },
  {
    "text": "so let's jump out of powerpoint for a moment and jump into visual studio",
    "start": "522159",
    "end": "529120"
  },
  {
    "text": "and i have this application if i run this this is a wpf application just for for simplicity",
    "start": "529120",
    "end": "535440"
  },
  {
    "text": "it could be any type of ui application really just an easy way to illustrate why",
    "start": "535440",
    "end": "540560"
  },
  {
    "text": "synchronous programming is important when i click run here this application locks up and if this were locking up for",
    "start": "540560",
    "end": "547920"
  },
  {
    "text": "a little bit longer windows would have told me that this application is no longer responding",
    "start": "547920",
    "end": "553440"
  },
  {
    "text": "but i don't know that i don't know that it's not doing a lot of work so let's have a look at what this code",
    "start": "553440",
    "end": "558800"
  },
  {
    "text": "is actually doing you don't have to know much about wpf to understand this",
    "start": "558800",
    "end": "564320"
  },
  {
    "text": "but basically we have a click event handler that's calling a method called do something so far so good and then we have this",
    "start": "564320",
    "end": "570640"
  },
  {
    "text": "method here called dual something which is simply updating the ui with some information and then we have a",
    "start": "570640",
    "end": "577680"
  },
  {
    "text": "thread out sleep for two seconds normally we only add thread out sleep when we want to solve random problems",
    "start": "577680",
    "end": "584320"
  },
  {
    "text": "actually we shouldn't do that but sometimes it does solve interesting race conditions",
    "start": "584320",
    "end": "590640"
  },
  {
    "text": "but let's just say that this simulates a little bit of work it could be loading something from a web api or loading",
    "start": "590640",
    "end": "595839"
  },
  {
    "text": "something from a store that's cold storage for instance what i want to do now is i want to say i want to run this work somewhere else i",
    "start": "595839",
    "end": "602079"
  },
  {
    "text": "have two different ways to do this either i run this entire method in a task",
    "start": "602079",
    "end": "608160"
  },
  {
    "text": "like this here i could say task.run and task.run takes an action which is",
    "start": "608160",
    "end": "613279"
  },
  {
    "text": "just a delegate so it could pass a reference to that method to say run this method somewhere else i don't care just",
    "start": "613279",
    "end": "619760"
  },
  {
    "text": "run this and hopefully now my application is a lot better but if i run the application now without the debugger",
    "start": "619760",
    "end": "625839"
  },
  {
    "text": "attached i can move my window around it didn't lock up but also",
    "start": "625839",
    "end": "631279"
  },
  {
    "text": "the ui didn't update after those two seconds so now i've introduced a bug in the application",
    "start": "631279",
    "end": "636720"
  },
  {
    "text": "and even though the application feels more efficient it's a lot more faster the user will think it's awesome because",
    "start": "636720",
    "end": "642000"
  },
  {
    "text": "it's it's no longer crashing on them but it's not working as expected",
    "start": "642000",
    "end": "647120"
  },
  {
    "text": "the problem is i'm trying to update the ui from a different thread now this is where it becomes a little",
    "start": "647120",
    "end": "652160"
  },
  {
    "text": "bit tricky because now i have to communicate back to the ui that i'm i need to update the ui",
    "start": "652160",
    "end": "658880"
  },
  {
    "text": "from a totally different thread and to do that i can ask for for the the context",
    "start": "658880",
    "end": "665279"
  },
  {
    "text": "that owns the ui thread to invoke work on that let me just show you what this looks",
    "start": "665279",
    "end": "670560"
  },
  {
    "text": "like and you'll understand why this is a little bit i don't use the word nasty but it doesn't look very pretty",
    "start": "670560",
    "end": "677519"
  },
  {
    "text": "so i can say that i need to invoke some work on the ui thread this is very very wpf specific each ui",
    "start": "677519",
    "end": "686480"
  },
  {
    "text": "framework has its own way of doing this but basically you have to have to then invoke the ui when that's",
    "start": "686480",
    "end": "693680"
  },
  {
    "text": "done a better approach would probably have been to move those two seconds worth of work to a separate thread",
    "start": "693680",
    "end": "699920"
  },
  {
    "text": "instead of moving this entire method and wrapping this synchronous call i would say in a whole task.run a much better",
    "start": "699920",
    "end": "707040"
  },
  {
    "text": "approach would be to undo this and look at this in a little bit of a different manner",
    "start": "707040",
    "end": "713600"
  },
  {
    "text": "this is one of the things you should avoid doing you shouldn't just simply wrap your synchronous operations in new",
    "start": "713600",
    "end": "718880"
  },
  {
    "text": "tasks you should go to the root of the problem the problem here isn't the call to do something it's in",
    "start": "718880",
    "end": "724720"
  },
  {
    "text": "fact what it's doing internally so we have to drill down here and figure out how do we move this",
    "start": "724720",
    "end": "731360"
  },
  {
    "text": "to a different thread right something like this here",
    "start": "731360",
    "end": "739040"
  },
  {
    "text": "so now what happens here is that if i run this the application is going to behave a lot",
    "start": "739360",
    "end": "744959"
  },
  {
    "text": "better but it didn't take two seconds before i got the result from philip because",
    "start": "744959",
    "end": "750320"
  },
  {
    "text": "actually what we're doing now is that i'm saying run the method do something update the ui",
    "start": "750320",
    "end": "756480"
  },
  {
    "text": "then run some work on a different thread then immediately run this line of code here at the bottom",
    "start": "756480",
    "end": "762800"
  },
  {
    "text": "right so just offload those two seconds worth of work but what if this thing here at the bottom relies on the result",
    "start": "762800",
    "end": "769920"
  },
  {
    "text": "of this operation now this here introduces that asynchronous operation which means that i can subscribe to when this is done",
    "start": "769920",
    "end": "777279"
  },
  {
    "text": "i can say that i want to get the result of this let's say task",
    "start": "777279",
    "end": "782720"
  },
  {
    "text": "and i could say that i want to continue",
    "start": "782720",
    "end": "787720"
  },
  {
    "text": "result task i could say that after this work is done",
    "start": "788240",
    "end": "794720"
  },
  {
    "text": "i want to continue doing some other work like this here so now what happens is",
    "start": "794720",
    "end": "801040"
  },
  {
    "text": "that after two seconds have been operated on a different thread i want to go ahead and update the ui",
    "start": "801040",
    "end": "806959"
  },
  {
    "text": "and if i run this without the debugger we're going to get hello from ndc or hello ndc but the second line never",
    "start": "806959",
    "end": "813839"
  },
  {
    "text": "shows up this is because with the task parallel library all the continuations are",
    "start": "813839",
    "end": "819920"
  },
  {
    "text": "executed on a different thread as well it could be that it's executed in line with this thread here or this task",
    "start": "819920",
    "end": "827600"
  },
  {
    "text": "it really depends on how you configure that and the the runtime is pretty smart",
    "start": "827600",
    "end": "832720"
  },
  {
    "text": "enough to try and do some really smart optimization for you so again if i want to update the ui from",
    "start": "832720",
    "end": "838639"
  },
  {
    "text": "this place i'd have to introduce the dispatcher and now we've made the code a little bit",
    "start": "838639",
    "end": "844240"
  },
  {
    "text": "sorry we've made the code on unreadable but at least we've introduced a",
    "start": "844240",
    "end": "850079"
  },
  {
    "text": "synchronous programming so now hopefully after two seconds this is now going to update the ui so i've",
    "start": "850079",
    "end": "857120"
  },
  {
    "text": "solved one problem but even though the application feels a little bit more efficient",
    "start": "857120",
    "end": "862800"
  },
  {
    "text": "this code here is not going to be very efficient to work with it's very very fragile it's very easy",
    "start": "862800",
    "end": "868560"
  },
  {
    "text": "for me to make the mistake of not introducing this cross threading to talk back to the ui thread",
    "start": "868560",
    "end": "874480"
  },
  {
    "text": "there has to be a way for us to work with this in a better approach and of course there is we're going to look at async and await which hopefully",
    "start": "874480",
    "end": "881680"
  },
  {
    "text": "solves all our problems but first we have to understand exactly what happens here",
    "start": "881680",
    "end": "887440"
  },
  {
    "text": "one thing that you didn't notice because i didn't run this with the debugger attached if i take this line of",
    "start": "887440",
    "end": "893920"
  },
  {
    "text": "code here and run this without the dispatcher and i'm going to run this with the debugger because that's going to capture",
    "start": "893920",
    "end": "900560"
  },
  {
    "text": "all the exceptions that happens when i debug the application i'm going to click",
    "start": "900560",
    "end": "906639"
  },
  {
    "text": "on run here and hopefully after two seconds it's going to tell us",
    "start": "906639",
    "end": "911920"
  },
  {
    "text": "that we in fact had an exception so this there was an exception thrown",
    "start": "911920",
    "end": "917120"
  },
  {
    "text": "inside this continuation because it couldn't up the ui from a thread that wasn't owned by the ui trying to do",
    "start": "917120",
    "end": "923279"
  },
  {
    "text": "cross threading without that dispatcher nastiness that i had to add for wpf",
    "start": "923279",
    "end": "928720"
  },
  {
    "text": "but how come the application didn't crash here it's because tasks in general",
    "start": "928720",
    "end": "935360"
  },
  {
    "text": "they will capture all your exceptions or they will swallow your exceptions so",
    "start": "935360",
    "end": "941839"
  },
  {
    "text": "if there's an exception even if i have an exception inside if this this operation if i replace this with a",
    "start": "941839",
    "end": "948399"
  },
  {
    "text": "throw new exception that would in fact just not do anything the application wouldn't crash because that exception would live",
    "start": "948399",
    "end": "955120"
  },
  {
    "text": "on this this instance of the task here so how do we check if there's an exception",
    "start": "955120",
    "end": "961519"
  },
  {
    "text": "well you'd have to do that inside one of these continuations so you could say if results task",
    "start": "961519",
    "end": "968399"
  },
  {
    "text": "is faulted and you can then grab the exception to check that all right so",
    "start": "968399",
    "end": "973920"
  },
  {
    "text": "that's not too bad but how do i know if this continuation failed well this also returns a task so",
    "start": "973920",
    "end": "981920"
  },
  {
    "text": "you'd have to say this task dot continue with",
    "start": "981920",
    "end": "987040"
  },
  {
    "text": "this takes the task and then you'd have to check if this is faulted get the idea right",
    "start": "987040",
    "end": "993440"
  },
  {
    "text": "t is faulted and so forth and then to check if that is faulted you'd have to add another continuation",
    "start": "993440",
    "end": "999360"
  },
  {
    "text": "and so forth it doesn't get very pretty right so this is all the way back in dotnet",
    "start": "999360",
    "end": "1005600"
  },
  {
    "text": "4.5 and prior to adding async in a weight but it's important to understand how all of",
    "start": "1005600",
    "end": "1011040"
  },
  {
    "text": "this works because async and away uses this internally quite heavily actually it it's built on this so if you don't",
    "start": "1011040",
    "end": "1017279"
  },
  {
    "text": "understand the fundamentals of the tasks it may become really hard to efficiently",
    "start": "1017279",
    "end": "1022720"
  },
  {
    "text": "add async and weight in your applications and use that in the best approach",
    "start": "1022720",
    "end": "1028480"
  },
  {
    "text": "all right so there's one more thing i want to show you here actually before we go ahead and and talk about",
    "start": "1028480",
    "end": "1036640"
  },
  {
    "text": "async and wait let's say that we'll get rid of",
    "start": "1036640",
    "end": "1041839"
  },
  {
    "text": "a little bit of code here here we go let's say that instead of of having the",
    "start": "1041839",
    "end": "1047839"
  },
  {
    "text": "test text from philip said here let's say that we returned this from this task up here after those two",
    "start": "1047839",
    "end": "1054400"
  },
  {
    "text": "seconds i want to return that from this asynchronous operation now to access this result",
    "start": "1054400",
    "end": "1059840"
  },
  {
    "text": "i have to do that inside the continuation inside the continuation is the only",
    "start": "1059840",
    "end": "1065440"
  },
  {
    "text": "place you're ever allowed to do your task.result because you know you have a result here calling this property is in",
    "start": "1065440",
    "end": "1072240"
  },
  {
    "text": "fact a blocking operation so if there's not a result available it will block the",
    "start": "1072240",
    "end": "1077440"
  },
  {
    "text": "entire thread until that's available that means if we were to do that",
    "start": "1077440",
    "end": "1083360"
  },
  {
    "text": "like this here our result is equal to task.result",
    "start": "1083360",
    "end": "1088720"
  },
  {
    "text": "looks the same but it's really not what this does here is that this is going to block the ui thread the current thread",
    "start": "1088720",
    "end": "1094320"
  },
  {
    "text": "is going to be locked until that result is available unless it already completed",
    "start": "1094320",
    "end": "1100960"
  },
  {
    "text": "all right so and this here is now going to be turned into a task of t result or task of string",
    "start": "1102400",
    "end": "1109360"
  },
  {
    "text": "all right so with a little bit of an understanding of the tasks and how you add that",
    "start": "1109360",
    "end": "1115600"
  },
  {
    "text": "a few considerations that you should keep in mind you should be careful when you wrap code inside your tasks or using",
    "start": "1115600",
    "end": "1121919"
  },
  {
    "text": "task.run because that can be a little bit problematic as we just saw here it might seem like",
    "start": "1121919",
    "end": "1127360"
  },
  {
    "text": "the application runs really quickly but we introduced a few bugs and unless we capture all those exceptions or have the",
    "start": "1127360",
    "end": "1133760"
  },
  {
    "text": "debugger attached we won't know and i didn't show this but thread static",
    "start": "1133760",
    "end": "1139600"
  },
  {
    "text": "data is unreliable you can use something called async local if you really have to",
    "start": "1139600",
    "end": "1144720"
  },
  {
    "text": "have static data inside your tasks but if you do need to do that i would recommend you read up on async local",
    "start": "1144720",
    "end": "1152640"
  },
  {
    "text": "and then another consideration with tasks is that we should always validate the tasks and that means we should always check",
    "start": "1152640",
    "end": "1158799"
  },
  {
    "text": "that if there was an exception or not and with the task parallel library that becomes a little bit tedious because you",
    "start": "1158799",
    "end": "1163919"
  },
  {
    "text": "have to add continuation after continuation after continuation and that doesn't look very pretty",
    "start": "1163919",
    "end": "1168960"
  },
  {
    "text": "so hopefully we can solve this a little bit better with async and a weight before we get into 1808 i just want to",
    "start": "1168960",
    "end": "1176080"
  },
  {
    "text": "show you this little portion of code as well parallel.4 is it's also part of the task parallel library but that's a",
    "start": "1176080",
    "end": "1183039"
  },
  {
    "text": "blocking call which means that to to solve your problem in parallel this here is going to run from 0 to 100",
    "start": "1183039",
    "end": "1191280"
  },
  {
    "text": "or it's zero to 99 um and that's actually going to use your",
    "start": "1191280",
    "end": "1196799"
  },
  {
    "text": "current thread as well to solve the same problem so if you want to offload that to somewhere else to not block the ui thread you always have to wrap your",
    "start": "1196799",
    "end": "1203280"
  },
  {
    "text": "parallel for loops or parallel for each loops in a separate task",
    "start": "1203280",
    "end": "1208559"
  },
  {
    "text": "all right let's talk about async and wait these two keywords were introduced quite",
    "start": "1208559",
    "end": "1215039"
  },
  {
    "text": "a while ago but still one of those things that people tend to get a little bit wrong and it's really easy to get it",
    "start": "1215039",
    "end": "1220720"
  },
  {
    "text": "wrong as well because the the designers of this feature made it really easy to add it anywhere",
    "start": "1220720",
    "end": "1226320"
  },
  {
    "text": "without a lot of implications so these are just contextual keywords which means that they do a lot of",
    "start": "1226320",
    "end": "1231919"
  },
  {
    "text": "compiler magic to solve the same problems that we could do without async and await but",
    "start": "1231919",
    "end": "1238480"
  },
  {
    "text": "they do add a lot of code behind the scenes and we should understand exactly what what that is so when we add async",
    "start": "1238480",
    "end": "1244720"
  },
  {
    "text": "and await the idea is that all the complexity that we just saw with the continuation and all of that it's going",
    "start": "1244720",
    "end": "1250559"
  },
  {
    "text": "to hide that somewhere else hiding complexity is always a good idea because the code becomes a much easier",
    "start": "1250559",
    "end": "1256640"
  },
  {
    "text": "to work with but it's also a little bit more fragile so it promotes readability it makes the",
    "start": "1256640",
    "end": "1263360"
  },
  {
    "text": "code easier to read you no longer have this nested calls or you these this looks like an arrow in",
    "start": "1263360",
    "end": "1269280"
  },
  {
    "text": "your application but instead it look very fluent you read it from top to bottom you quite understand exactly",
    "start": "1269280",
    "end": "1275200"
  },
  {
    "text": "what's going to happen but one issue is that it's a little bit more error-prone",
    "start": "1275200",
    "end": "1280880"
  },
  {
    "text": "and that's because it hides the complexity it's in something called a state machine",
    "start": "1280880",
    "end": "1287120"
  },
  {
    "text": "so how do we add this to an application well it all starts with the the async keyword",
    "start": "1287679",
    "end": "1294080"
  },
  {
    "text": "this very simple method here returns a task you can see that it doesn't actually return a task anywhere because",
    "start": "1294080",
    "end": "1299679"
  },
  {
    "text": "the compiler takes care of that for us so adding the async keyword does a lot",
    "start": "1299679",
    "end": "1305280"
  },
  {
    "text": "of magic behind the scenes but i guess the question is does this make the code asynchronous can",
    "start": "1305280",
    "end": "1312240"
  },
  {
    "text": "we use this all alone without doing anything else and the answer to that is no the async keyword alone doesn't do",
    "start": "1312240",
    "end": "1318799"
  },
  {
    "text": "anything in particular other than introducing a lot of complexity and it moves your entire method body into a",
    "start": "1318799",
    "end": "1324480"
  },
  {
    "text": "generated class but it doesn't run anything on a separate thread",
    "start": "1324480",
    "end": "1329520"
  },
  {
    "text": "that all that all that's all done by this task a delay here so when i introduce",
    "start": "1329520",
    "end": "1336159"
  },
  {
    "text": "task delay that's you know doing some work somewhere else",
    "start": "1336159",
    "end": "1341440"
  },
  {
    "text": "it could be an http call it could be in a web loading something from disk this way just simulate some work",
    "start": "1341440",
    "end": "1347919"
  },
  {
    "text": "and you use that together with the away keyword so these two keywords should always be used together",
    "start": "1347919",
    "end": "1354159"
  },
  {
    "text": "um the reason you're you're allowed to use async alone is for for i guess virtual",
    "start": "1354159",
    "end": "1360480"
  },
  {
    "text": "methods and all of that and you where you don't have the method body it plays i don't know they've just introduced",
    "start": "1360480",
    "end": "1365840"
  },
  {
    "text": "that i believe they should have made it so that you have to always use them together",
    "start": "1365840",
    "end": "1372720"
  },
  {
    "text": "anyways the there's a lot of things happening here once first thing it moves this method body to a different class",
    "start": "1372840",
    "end": "1378640"
  },
  {
    "text": "the weight keyword is now in charge of making sure that the code at the bottom is executed only when that asynchronous operation is",
    "start": "1378640",
    "end": "1385120"
  },
  {
    "text": "completed so the await keyword is now what marks for something known as",
    "start": "1385120",
    "end": "1391039"
  },
  {
    "text": "the continuation you know that continue with method call that we had earlier we no longer have the method call but",
    "start": "1391039",
    "end": "1396880"
  },
  {
    "text": "it's still the same concept internally it's going to use that continue with method",
    "start": "1396880",
    "end": "1402400"
  },
  {
    "text": "to run the code after the await keyword sort of it has a lot of more code than that but basically it does that",
    "start": "1402400",
    "end": "1409520"
  },
  {
    "text": "it's also making sure that it validates the success or failure of the task so we no longer have to check if it's",
    "start": "1409520",
    "end": "1416000"
  },
  {
    "text": "faulted on our own this will in fact validate the entire chain so you no longer have to continue",
    "start": "1416000",
    "end": "1422000"
  },
  {
    "text": "with and check the default state and all of that nastiness that we had to do earlier",
    "start": "1422000",
    "end": "1427200"
  },
  {
    "text": "what it also does it does as when it reaches the await keyword it returns to whoever called the method and this is",
    "start": "1427360",
    "end": "1433200"
  },
  {
    "text": "where it becomes a little bit tricky to understand because what happens i'll go back here just to show you this",
    "start": "1433200",
    "end": "1438559"
  },
  {
    "text": "portion of the code here when it reaches the await keyword it returns to whoever called run async",
    "start": "1438559",
    "end": "1446080"
  },
  {
    "text": "right because it can't run the final code because that's inside the continuation",
    "start": "1446080",
    "end": "1452159"
  },
  {
    "text": "so whoever called run async will then be be able to execute the next lines",
    "start": "1452159",
    "end": "1458919"
  },
  {
    "text": "all right so always use them together that's that's really really important so let's have a look at how we can make",
    "start": "1459039",
    "end": "1464880"
  },
  {
    "text": "our code a little bit better",
    "start": "1464880",
    "end": "1468000"
  },
  {
    "text": "here we go so instead of having all of this code here let's let's now introduce async and",
    "start": "1471360",
    "end": "1476960"
  },
  {
    "text": "wait and see how this is going to behave a little bit different i really don't like this this whole idea",
    "start": "1476960",
    "end": "1482480"
  },
  {
    "text": "of having to use continue with but instead i still have to move the work to a",
    "start": "1482480",
    "end": "1488480"
  },
  {
    "text": "different thread by doing task.run right but i don't like this",
    "start": "1488480",
    "end": "1494320"
  },
  {
    "text": "so instead what i want to do i like to await the task",
    "start": "1494320",
    "end": "1499440"
  },
  {
    "text": "and then i'd like to update the ui we no longer have the result task so",
    "start": "1499440",
    "end": "1505840"
  },
  {
    "text": "that would be task.result instead but as i mentioned earlier we should avoid using dot result",
    "start": "1505840",
    "end": "1512240"
  },
  {
    "text": "we could use dot result here because i know that it's been it's been properly we've awaited the task which means that",
    "start": "1512240",
    "end": "1519760"
  },
  {
    "text": "what happens here is that it's not going to run that portion of the code before it actually has a result",
    "start": "1519760",
    "end": "1525919"
  },
  {
    "text": "available but the best practice is not to do like that so what can we do instead to get",
    "start": "1525919",
    "end": "1531520"
  },
  {
    "text": "the result out of the task so the await keyword it validates that we have",
    "start": "1531520",
    "end": "1536960"
  },
  {
    "text": "a not not a faulty task there's no exceptions but it also gives us the result",
    "start": "1536960",
    "end": "1544480"
  },
  {
    "text": "and then i can use this here at the bottom and we can see here that this here is a string",
    "start": "1545520",
    "end": "1551600"
  },
  {
    "text": "so what a weight does is that it makes sure that there's no exceptions exceptions and then it grabs any results out of that",
    "start": "1551600",
    "end": "1559039"
  },
  {
    "text": "task so it would get the test text from philip and i already had the async keyword here at the top which",
    "start": "1559039",
    "end": "1565919"
  },
  {
    "text": "i shouldn't have had but as you'll see here i get",
    "start": "1565919",
    "end": "1571200"
  },
  {
    "text": "a little bit of a squiggle here telling me that you can't use the await keyword",
    "start": "1571200",
    "end": "1577520"
  },
  {
    "text": "you cannot use the await operator or keyword without the async keyword but you can have a method call with the",
    "start": "1577600",
    "end": "1583279"
  },
  {
    "text": "async keyword without using a weight so now if i just",
    "start": "1583279",
    "end": "1589919"
  },
  {
    "text": "add the async keyword here and i'll run the application i will just make sure that it still works the same",
    "start": "1589919",
    "end": "1596000"
  },
  {
    "text": "as before i can run this here i can move the window around and after two seconds it says hello ndc from philip",
    "start": "1596000",
    "end": "1604320"
  },
  {
    "text": "so now that i've added this here i said earlier that when it reaches this await keyword it in fact",
    "start": "1605600",
    "end": "1611600"
  },
  {
    "text": "goes back to whoever calls this method so if we look at where this is called this is called from a click event",
    "start": "1611600",
    "end": "1617440"
  },
  {
    "text": "handler it calls do something that means that when it reaches that",
    "start": "1617440",
    "end": "1622640"
  },
  {
    "text": "await keyword we should be back at this line here so if i do",
    "start": "1622640",
    "end": "1629600"
  },
  {
    "text": "debug.txt plus is equal to test or waiting maybe better",
    "start": "1629600",
    "end": "1635279"
  },
  {
    "text": "let's do that and i'll run this here hopefully it's going to say hello ndc",
    "start": "1635279",
    "end": "1641760"
  },
  {
    "text": "and then test. and then after that it's going to top it with the rest of the text so what actually happened here is that",
    "start": "1641760",
    "end": "1648240"
  },
  {
    "text": "if we step through this it's going to call do something that updates the ui",
    "start": "1648240",
    "end": "1654559"
  },
  {
    "text": "that offloads some work to somewhere else using the task parallel library and then it sees the await keyword now",
    "start": "1654559",
    "end": "1660320"
  },
  {
    "text": "what this does is that it validates that there was no exceptions so if there's an exception in here throw new exception",
    "start": "1660320",
    "end": "1668799"
  },
  {
    "text": "like this here this will be thrown back to whoever calls this method and they can handle that",
    "start": "1668799",
    "end": "1673840"
  },
  {
    "text": "or in fact it will be thrown back to whoever uses the await keyword so when we have the await here we have the",
    "start": "1673840",
    "end": "1679120"
  },
  {
    "text": "option of wrapping this in a try catch block to make sure that we can catch any potential exceptions",
    "start": "1679120",
    "end": "1685440"
  },
  {
    "text": "right and then after that it's when it sees the white keyword it returns back to run this code here and",
    "start": "1685440",
    "end": "1691840"
  },
  {
    "text": "then the user can update the ui and click around and do whatever they want then after two seconds",
    "start": "1691840",
    "end": "1697039"
  },
  {
    "text": "it runs this code here so what happens now if i if i run this here obviously i have a throw new",
    "start": "1697039",
    "end": "1702559"
  },
  {
    "text": "exception the application is going to crash that's no good so i want to handle this",
    "start": "1702559",
    "end": "1709200"
  },
  {
    "text": "but if i don't know what happens inside this method i just know that this is an asynchronous method what happens if i",
    "start": "1709200",
    "end": "1714720"
  },
  {
    "text": "wrap this in a try and catch block",
    "start": "1714720",
    "end": "1719158"
  },
  {
    "text": "run this without the debugger hopefully now this application works as",
    "start": "1725840",
    "end": "1731039"
  },
  {
    "text": "it should and i click run here and the application works but it doesn't for some reason",
    "start": "1731039",
    "end": "1737279"
  },
  {
    "text": "the application still crashes if i run it with the debugger attached and i'll put a break point in this",
    "start": "1737279",
    "end": "1744159"
  },
  {
    "text": "catch block here click run we can see that i did get the",
    "start": "1744159",
    "end": "1750840"
  },
  {
    "text": "exception and it's it's validated by this await keyword here that inside the task there was an exception you we",
    "start": "1750840",
    "end": "1757760"
  },
  {
    "text": "caught that and it's now going to be thrown back to whoever calls this method but then suddenly i'm somewhere else",
    "start": "1757760",
    "end": "1764720"
  },
  {
    "text": "and the application didn't actually catch this so the problem here is that",
    "start": "1764720",
    "end": "1771679"
  },
  {
    "text": "i would need to validate that this method also worked properly",
    "start": "1771679",
    "end": "1776960"
  },
  {
    "text": "does that mean i can just add since it's an async method could i just add the the await keyword in front of that",
    "start": "1776960",
    "end": "1783840"
  },
  {
    "text": "let's try that and see what happens if i do await it's going to tell me that",
    "start": "1783840",
    "end": "1788960"
  },
  {
    "text": "this method is not marked as async so i have to do that first but there's still a little bit of an",
    "start": "1788960",
    "end": "1794559"
  },
  {
    "text": "issue here because we cannot await a method that's void it doesn't return anything so how would it",
    "start": "1794559",
    "end": "1801039"
  },
  {
    "text": "await that how would it know that this is an asynchronous operation so for the consumer of the method do",
    "start": "1801039",
    "end": "1807520"
  },
  {
    "text": "something this here doesn't in fact do anything more than just run some code that doesn't return anything so in order for",
    "start": "1807520",
    "end": "1814399"
  },
  {
    "text": "me to be able to track this work and to capture any potential exceptions it also needs to return a task",
    "start": "1814399",
    "end": "1823679"
  },
  {
    "text": "this is why you should never do async void because async void doesn't allow you to track when work is completed it",
    "start": "1823679",
    "end": "1829039"
  },
  {
    "text": "doesn't allow you to know when data has been available or when the operations are completed",
    "start": "1829039",
    "end": "1834720"
  },
  {
    "text": "but fortunately for us there's an easy way to fix this i can change this to async task and i",
    "start": "1834720",
    "end": "1840720"
  },
  {
    "text": "don't have to do anything else the compiler takes care of all of that for us so what happened now there's actually a",
    "start": "1840720",
    "end": "1847279"
  },
  {
    "text": "few things that is going on here not only did it change what this method returns it automatically returned a task",
    "start": "1847279",
    "end": "1854000"
  },
  {
    "text": "from this here but since this returns a task it also means that any exceptions that happens",
    "start": "1854000",
    "end": "1860000"
  },
  {
    "text": "inside this method is now going to be be put on the task that this returns",
    "start": "1860000",
    "end": "1866320"
  },
  {
    "text": "and that can be a little bit confusing as well so if i didn't have this await keyword",
    "start": "1866320",
    "end": "1871760"
  },
  {
    "text": "here i wouldn't be able to capture any exceptions and you'll see that if i run this with the debugger attached",
    "start": "1871760",
    "end": "1879840"
  },
  {
    "text": "i click run here we can see that since i have the debugger it knows that i have an exception",
    "start": "1880240",
    "end": "1885600"
  },
  {
    "text": "but then it didn't enter this this this catch block here because if i don't await this it doesn't validate that",
    "start": "1885600",
    "end": "1893039"
  },
  {
    "text": "there was no exceptions so let's add a weight back here",
    "start": "1893039",
    "end": "1900240"
  },
  {
    "text": "and now hopefully the application behaves a little bit better",
    "start": "1900320",
    "end": "1905480"
  },
  {
    "text": "i get the exception and i'm inside my catch block so this here just shows you that it's",
    "start": "1908159",
    "end": "1913600"
  },
  {
    "text": "it's not as simple as just adding the async in a way keyword as soon as you have a task or it's not as easy as just",
    "start": "1913600",
    "end": "1919279"
  },
  {
    "text": "adding tasks that run whenever you want to run something somewhere else there's quite a lot of things that you need to keep in mind",
    "start": "1919279",
    "end": "1926240"
  },
  {
    "text": "adding these keywords may seem very easy at just as a first glance but they do",
    "start": "1926240",
    "end": "1932240"
  },
  {
    "text": "quite a lot behind the scenes and that's kind of the next part i want to talk about",
    "start": "1932240",
    "end": "1937840"
  },
  {
    "text": "so understanding just the asynchronous keywords in the task parallel library that's great but you also really need to",
    "start": "1937840",
    "end": "1944000"
  },
  {
    "text": "understand what happens when you add the keywords what's generated by by these keywords to",
    "start": "1944000",
    "end": "1950240"
  },
  {
    "text": "fully appreciate what they're doing and what's happening when you add the 18 keyword",
    "start": "1950240",
    "end": "1955679"
  },
  {
    "text": "it introduces something called a state machine the state machine keeps track of all the asynchronous code that's being",
    "start": "1955679",
    "end": "1960799"
  },
  {
    "text": "executed and all the work that's happening on different threads now the state machine is it's really",
    "start": "1960799",
    "end": "1966960"
  },
  {
    "text": "just a a piece of code that's asking are we there yet it checks if you have any",
    "start": "1966960",
    "end": "1972399"
  },
  {
    "text": "asynchronous operations that are running it keeps track of which continuation to run in next",
    "start": "1972399",
    "end": "1977840"
  },
  {
    "text": "and it's pretty clever what it's doing is that it has this really big code that says run this asynchronous operation",
    "start": "1977840",
    "end": "1983840"
  },
  {
    "text": "when that's done do this do this do this and then it adds itself onto the continuation of the next running task so",
    "start": "1983840",
    "end": "1990640"
  },
  {
    "text": "it always runs itself whenever the next asynchronous operation is completed",
    "start": "1990640",
    "end": "1996720"
  },
  {
    "text": "and what it's also doing is that it handles all the potential results and the exceptions so as you saw here i was",
    "start": "1996720",
    "end": "2002720"
  },
  {
    "text": "able to capture the exception when i added the task as a return type but it also crashed my entire",
    "start": "2002720",
    "end": "2008720"
  },
  {
    "text": "application when it found an exception and i used the await keyword this is because the state machine just handles",
    "start": "2008720",
    "end": "2014720"
  },
  {
    "text": "all of those different cases for us and it's going to be smart enough to be able to handle",
    "start": "2014720",
    "end": "2019919"
  },
  {
    "text": "some really smart context switches and make sure that sometimes it run codes inline because that's faster so even",
    "start": "2019919",
    "end": "2026480"
  },
  {
    "text": "though it generates a bunch of code it's going to do its best to do that as efficiently as possible",
    "start": "2026480",
    "end": "2033840"
  },
  {
    "text": "and obviously a state machine makes sure that it executes all the code after the await keyword",
    "start": "2033840",
    "end": "2039919"
  },
  {
    "text": "the whole idea of adding the away keyword is so that we can run code when an asynchronous operation is done and",
    "start": "2039919",
    "end": "2045039"
  },
  {
    "text": "this whole thing that's generated help us do that so when we add this async keyword it",
    "start": "2045039",
    "end": "2051919"
  },
  {
    "text": "generates this entire state machine that really means that it moves entire method body into somewhere else",
    "start": "2051919",
    "end": "2059599"
  },
  {
    "text": "and it's really good to understand that there's a lot of code involved in doing this so even though i have a really simple",
    "start": "2059599",
    "end": "2066158"
  },
  {
    "text": "method here with very very little code when i compile this and it has the async",
    "start": "2066159",
    "end": "2071919"
  },
  {
    "text": "keyword at the top here this doesn't no longer look anything like when this isn't compiled",
    "start": "2071919",
    "end": "2079440"
  },
  {
    "text": "it no longer looks anything like what i had earlier there's no async keyword because the",
    "start": "2079440",
    "end": "2084960"
  },
  {
    "text": "async keyword doesn't exist inside the clr the runtime doesn't know anything about anything can wait",
    "start": "2084960",
    "end": "2092079"
  },
  {
    "text": "so it has to use async and away internally or or the the concept of the taskbar library internally and",
    "start": "2092079",
    "end": "2098560"
  },
  {
    "text": "threading so it generates a state machine it does a lot of things with that it starts it and then you see here",
    "start": "2098560",
    "end": "2104000"
  },
  {
    "text": "at the bottom it returns a reference to the state machine's task so whoever calls the",
    "start": "2104000",
    "end": "2109839"
  },
  {
    "text": "method run async can now keep track of exactly what's happening which asynchronous operation is running are",
    "start": "2109839",
    "end": "2115440"
  },
  {
    "text": "there any exceptions are there any results available and if we drill into this state machine",
    "start": "2115440",
    "end": "2121040"
  },
  {
    "text": "here and just look at exactly what's happening here we can see that there's some if we just go back here there's var",
    "start": "2121040",
    "end": "2127760"
  },
  {
    "text": "x is equal to 10 there's a task.delay and then debug.writeline so let's see if we can find that inside this portion of",
    "start": "2127760",
    "end": "2133520"
  },
  {
    "text": "the code here here's the the x is equal to 10",
    "start": "2133520",
    "end": "2139119"
  },
  {
    "text": "task delay and then at the bottom here we have the the debug at writeline",
    "start": "2139119",
    "end": "2144560"
  },
  {
    "text": "so this here is inside the state machine and this is kind of a i wouldn't say a loop because it's",
    "start": "2144560",
    "end": "2149760"
  },
  {
    "text": "really not it adds itself on to the continuation of the next running task so it runs this portion of the code for",
    "start": "2149760",
    "end": "2156960"
  },
  {
    "text": "every time it completes and it uses the wonderful keyword go to to make this this work",
    "start": "2156960",
    "end": "2163760"
  },
  {
    "text": "i haven't used that one myself in a very long time but it's used very cleverly inside the state machine",
    "start": "2163760",
    "end": "2169280"
  },
  {
    "text": "here so we have the the task.delay it checks if it's completed if it's not it just returns",
    "start": "2169280",
    "end": "2175040"
  },
  {
    "text": "so it can run some code after this here because in fact what happens here is that all of this code",
    "start": "2175040",
    "end": "2181200"
  },
  {
    "text": "is executed on i'll show you here we go into visual studio",
    "start": "2181200",
    "end": "2189040"
  },
  {
    "text": "all of the code here the fact that debug.txt plus sql to hello ndc worked is because this code here is still",
    "start": "2189680",
    "end": "2195839"
  },
  {
    "text": "executed on the calling thread it's executed on the ui thread so if this call originates from the click event",
    "start": "2195839",
    "end": "2202400"
  },
  {
    "text": "handler like we have here i'm calling do something there's nothing here that offloads any work to a",
    "start": "2202400",
    "end": "2208240"
  },
  {
    "text": "different thread until we have the task.run then after task.run we're back",
    "start": "2208240",
    "end": "2215119"
  },
  {
    "text": "at the ui thread it sees this await keyword and then it adds this to its continuation",
    "start": "2215119",
    "end": "2220880"
  },
  {
    "text": "so it makes sure that it can do all of this context switching but it's also important to know and understand that",
    "start": "2220880",
    "end": "2226400"
  },
  {
    "text": "all the coding here is executed on the thread that calls it",
    "start": "2226400",
    "end": "2231520"
  },
  {
    "text": "so if i were to have a thread dot sleep here this would still block the ui thread",
    "start": "2231520",
    "end": "2238240"
  },
  {
    "text": "even though i have the async keyword and even though the code was moved into a generated state machine there's nothing",
    "start": "2238240",
    "end": "2243359"
  },
  {
    "text": "here that just magically makes this faster and runs somewhere else",
    "start": "2243359",
    "end": "2248880"
  },
  {
    "text": "right",
    "start": "2248880",
    "end": "2251200"
  },
  {
    "text": "i think it's worth mentioning that we shouldn't use async void it's it's really it's it's worth",
    "start": "2254800",
    "end": "2261440"
  },
  {
    "text": "emphasizing that you should avoid that as much as you can and as we see here",
    "start": "2261440",
    "end": "2267440"
  },
  {
    "text": "the problem is that we have no way of tracking that this work is done as you see here at the bottom it doesn't return",
    "start": "2267440",
    "end": "2273920"
  },
  {
    "text": "any doesn't return any reference at all so when that method is is compiled we have",
    "start": "2273920",
    "end": "2280320"
  },
  {
    "text": "no way of tracking the state machine and its work or getting those exceptions there's no way around or recovering from",
    "start": "2280320",
    "end": "2286160"
  },
  {
    "text": "potential exceptions and that's not very efficient that means that",
    "start": "2286160",
    "end": "2292400"
  },
  {
    "text": "i wouldn't want to drive a car that was built on.net where they use async void let's just leave it at that",
    "start": "2292400",
    "end": "2299359"
  },
  {
    "text": "so it's an easy fix really we just change a little slight change here look here at the top here instead of having",
    "start": "2299359",
    "end": "2305280"
  },
  {
    "text": "async void we have asynctask and even though this here is a very very slight",
    "start": "2305280",
    "end": "2310839"
  },
  {
    "text": "change it kind of has a big impact as well because now we are asking whoever",
    "start": "2310839",
    "end": "2316240"
  },
  {
    "text": "consumes this method to also validate that it completed successfully",
    "start": "2316240",
    "end": "2321359"
  },
  {
    "text": "and we saw an example of this just a moment ago um",
    "start": "2321359",
    "end": "2326880"
  },
  {
    "text": "so let's talk about deadlocks which is also one of the the things that people tend to run into",
    "start": "2326880",
    "end": "2333119"
  },
  {
    "text": "or not being able to run out of rather what happens with deadlocks is that you end up in a situation where there's no",
    "start": "2333119",
    "end": "2340079"
  },
  {
    "text": "way to recover from you have one thread waiting for another and that sounds like a very distant problem but when but",
    "start": "2340079",
    "end": "2346480"
  },
  {
    "text": "when you do multi-threaded or asynchronous programming it's really just one method call away",
    "start": "2346480",
    "end": "2354079"
  },
  {
    "text": "i'm going to show you a pretty pretty bad example or another bad example but one that",
    "start": "2354079",
    "end": "2360640"
  },
  {
    "text": "looks very complex but the theory behind this isn't that it's too complex let's just imagine that we have some work",
    "start": "2360640",
    "end": "2367520"
  },
  {
    "text": "that's happening somewhere else this could be loading a file from disk or something like that when that work is done i want to continue with some work",
    "start": "2367520",
    "end": "2375280"
  },
  {
    "text": "and i want to do that on the ui thread now that sounds all good because we saw that",
    "start": "2375280",
    "end": "2381680"
  },
  {
    "text": "this dispatcher that use is using wpf to communicate back with the ui thread works really well",
    "start": "2381680",
    "end": "2388640"
  },
  {
    "text": "but then at the bottom here i also say that i want to block until all of this is",
    "start": "2388640",
    "end": "2395200"
  },
  {
    "text": "done so until this entire operation is done",
    "start": "2395200",
    "end": "2400720"
  },
  {
    "text": "because i'm adding the weight here after this continue with that means that this continuation or this task needs to",
    "start": "2400720",
    "end": "2406560"
  },
  {
    "text": "complete before i do anything else if i block the ui thread",
    "start": "2406560",
    "end": "2412319"
  },
  {
    "text": "how would this be able to complete because it cannot communicate back to the ui thread so therefore we have a",
    "start": "2412319",
    "end": "2418240"
  },
  {
    "text": "crash now this seems like it's very complex and you wouldn't write code like this",
    "start": "2418240",
    "end": "2424160"
  },
  {
    "text": "who would ever write deadlocking code like this here well there's an easier way to achieve the",
    "start": "2424160",
    "end": "2429839"
  },
  {
    "text": "same idea and that's simply to call dot weight or the method weight or result on an",
    "start": "2429839",
    "end": "2435760"
  },
  {
    "text": "asynchronous method so how come this whoops sorry how come this this crashes the application",
    "start": "2435760",
    "end": "2443920"
  },
  {
    "text": "i hinted this just a moment ago let's go into visual studio and i'll show you",
    "start": "2443920",
    "end": "2450880"
  },
  {
    "text": "let's change this method back to method body doesn't matter unless i still have a throw exception",
    "start": "2450880",
    "end": "2458319"
  },
  {
    "text": "i'll have to get rid of that so if i change this back to async void",
    "start": "2458319",
    "end": "2467400"
  },
  {
    "text": "sorry missing task instead of doing a wait here",
    "start": "2470000",
    "end": "2475760"
  },
  {
    "text": "if i want to to wait for this work to be done let's do this just to make it super",
    "start": "2475760",
    "end": "2482560"
  },
  {
    "text": "obvious do something and",
    "start": "2482560",
    "end": "2488079"
  },
  {
    "text": "wait so it looks like i want to take an asynchronous operation and i want to",
    "start": "2488079",
    "end": "2494560"
  },
  {
    "text": "make it synchronous in some cases you might have an application that you really don't want anything to be running",
    "start": "2494560",
    "end": "2499920"
  },
  {
    "text": "asynchronously you want to wait for that result you have no way of increasing async and weight all the way in your application so therefore you have to use",
    "start": "2499920",
    "end": "2507200"
  },
  {
    "text": "weight the problem here is that this here is going to block the ui",
    "start": "2507200",
    "end": "2513599"
  },
  {
    "text": "thread and i said earlier that all the code inside do something this here is executed on the ui thread",
    "start": "2513599",
    "end": "2520880"
  },
  {
    "text": "so if i block the ui thread how would it be able to do all of this work how would this",
    "start": "2520880",
    "end": "2526079"
  },
  {
    "text": "task ever be able to complete if it cannot update the ui",
    "start": "2526079",
    "end": "2532160"
  },
  {
    "text": "so obviously if i run this with a debugger a word of warning if you run this",
    "start": "2533040",
    "end": "2538880"
  },
  {
    "text": "without a debugger you have to find the process and kill it yourself",
    "start": "2538880",
    "end": "2544000"
  },
  {
    "text": "so look at that the application totally crashed and when it comes to deadlocks windows",
    "start": "2544160",
    "end": "2549359"
  },
  {
    "text": "never seems to understand that it crashed because it's just waiting forever",
    "start": "2549359",
    "end": "2556000"
  },
  {
    "text": "right so i have to kill the application it makes sense now that we know that the",
    "start": "2556000",
    "end": "2561200"
  },
  {
    "text": "async keyword just moves things into a state machine and the state machine is still executing a ui thread blocking the",
    "start": "2561200",
    "end": "2567119"
  },
  {
    "text": "state machine from executing means i have no way of waiting for that work to be done so how if i really want to do this",
    "start": "2567119",
    "end": "2574640"
  },
  {
    "text": "obviously there's always a way to do things you want so i can say task",
    "start": "2574640",
    "end": "2580400"
  },
  {
    "text": "i can say task.run let's run do something",
    "start": "2581760",
    "end": "2588079"
  },
  {
    "text": "so this here let's run this and see if it actually works before i say that it does",
    "start": "2590720",
    "end": "2596560"
  },
  {
    "text": "i click run here it was an exception somewhere in this this",
    "start": "2597040",
    "end": "2603920"
  },
  {
    "text": "did i throw an exception",
    "start": "2603920",
    "end": "2607559"
  },
  {
    "text": "yes all right the reason there's an exception is because i try to update the ui from",
    "start": "2610480",
    "end": "2616319"
  },
  {
    "text": "somewhere else let's run it without a debugger",
    "start": "2616319",
    "end": "2621318"
  },
  {
    "text": "so what happened here the application crashes and that's good because what i did here was that i moved",
    "start": "2622880",
    "end": "2628960"
  },
  {
    "text": "the entire state machine to a different thread so now what i did here is that i said run do something somewhere else",
    "start": "2628960",
    "end": "2636560"
  },
  {
    "text": "block the ui until that work on the other thread is completed so it runs the state machine it keeps track of all the",
    "start": "2636560",
    "end": "2642000"
  },
  {
    "text": "asynchronous operations on a completely different thread and then i'm blocking the ui until that is done",
    "start": "2642000",
    "end": "2647599"
  },
  {
    "text": "but then this this method here internally has a lot of ui interactions and that won't be",
    "start": "2647599",
    "end": "2654160"
  },
  {
    "text": "possible because it's from a different thread right",
    "start": "2654160",
    "end": "2658880"
  },
  {
    "text": "so that's why you'll end up sorry that's why you'll end up getting an exception so you'd have to handle",
    "start": "2659599",
    "end": "2664640"
  },
  {
    "text": "that accordingly as well so if you really want to block an asynchronous operation you have to first",
    "start": "2664640",
    "end": "2670319"
  },
  {
    "text": "wrap that in a separate task but if it has ui interactions that will fail and if you try to",
    "start": "2670319",
    "end": "2676400"
  },
  {
    "text": "marshal those those calls or if you have to introduce the dispatcher inside this do something method you'll end up with",
    "start": "2676400",
    "end": "2682480"
  },
  {
    "text": "another deadlock so be very careful",
    "start": "2682480",
    "end": "2687839"
  },
  {
    "text": "the same goes for for calling the result property on a task if it's not already completed that would also result in a",
    "start": "2689440",
    "end": "2695200"
  },
  {
    "text": "deadlock so how do we avoid deadlocks well obviously we should never use weight or",
    "start": "2695200",
    "end": "2701359"
  },
  {
    "text": "result we can use weight or result if we know that we are inside the continuation",
    "start": "2701359",
    "end": "2708319"
  },
  {
    "text": "but only after the await keyword or inside a continue with method",
    "start": "2708319",
    "end": "2713520"
  },
  {
    "text": "and you shouldn't confuse there's two methods very similar named you have task.wait all and task.when all don't",
    "start": "2713520",
    "end": "2720640"
  },
  {
    "text": "confuse these two methods it might seem like you want to",
    "start": "2720640",
    "end": "2726240"
  },
  {
    "text": "to wait to run the next line of code but that's not really what you want you want to continue with the next line",
    "start": "2726240",
    "end": "2732800"
  },
  {
    "text": "of code so it's a little bit of a different wording that you'd use",
    "start": "2732800",
    "end": "2738480"
  },
  {
    "text": "and another things to to have in mind is you shouldn't share locks if you have locks in the application",
    "start": "2738480",
    "end": "2744160"
  },
  {
    "text": "or lock objects you shouldn't share them between different asynchronous contexts that will also ensure that you have a",
    "start": "2744160",
    "end": "2749520"
  },
  {
    "text": "deadlock all right so there's one more thing i want to talk about in terms of the state",
    "start": "2749520",
    "end": "2755119"
  },
  {
    "text": "machine and that's we want to avoid introducing unnecessary code because i mentioned at the start of this talk i",
    "start": "2755119",
    "end": "2760880"
  },
  {
    "text": "said that especially on android or ios or mobile devices you want to avoid having too much code",
    "start": "2760880",
    "end": "2766640"
  },
  {
    "text": "that has to be executed because each line of code requires cpu power cpu power requires battery and that's",
    "start": "2766640",
    "end": "2773359"
  },
  {
    "text": "people hate you for building applications that drain battery so we want to build efficient applications and",
    "start": "2773359",
    "end": "2778400"
  },
  {
    "text": "that sometimes means we shouldn't use async in a weight because we don't always have to",
    "start": "2778400",
    "end": "2783440"
  },
  {
    "text": "so in this example here i have a method called run async it",
    "start": "2783440",
    "end": "2788960"
  },
  {
    "text": "awaits some internal method which is also marked as async which is then also awaiting something",
    "start": "2788960",
    "end": "2795520"
  },
  {
    "text": "which is then also awaiting something which is then also awaiting something this isn't too",
    "start": "2795520",
    "end": "2800960"
  },
  {
    "text": "too uncommon that you have a long method call inside a really big enterprise application where this happens",
    "start": "2800960",
    "end": "2808000"
  },
  {
    "text": "it's not too uncommon and someone once said you should you should",
    "start": "2808000",
    "end": "2814160"
  },
  {
    "text": "use async and weight all the way sorry you should use async and await all the way you should do",
    "start": "2814160",
    "end": "2819280"
  },
  {
    "text": "asynchronous should be a synchronous principle should be used all the way through the chain of your method calls but that doesn't",
    "start": "2819280",
    "end": "2825760"
  },
  {
    "text": "necessarily mean adding async await everywhere it just means that you shouldn't block anywhere inside that",
    "start": "2825760",
    "end": "2830880"
  },
  {
    "text": "chain you shouldn't use result or weight or anything like that the",
    "start": "2830880",
    "end": "2836319"
  },
  {
    "text": "the basic idea here is that if you don't need to do anything inside the continuation",
    "start": "2836319",
    "end": "2842000"
  },
  {
    "text": "you don't need to use async in a weight let me show you why",
    "start": "2842000",
    "end": "2847599"
  },
  {
    "text": "so i have an application here",
    "start": "2847599",
    "end": "2851040"
  },
  {
    "text": "which is which is doing exactly this it's pretty much the similar similar",
    "start": "2853599",
    "end": "2858880"
  },
  {
    "text": "application it has an asynchronous method which calls an internal asynchronous method",
    "start": "2858880",
    "end": "2864240"
  },
  {
    "text": "which then calls something else there's a lot of async and await all the way through this entire application",
    "start": "2864240",
    "end": "2869440"
  },
  {
    "text": "now if i compile this and have a look at the generated code we can see here that this in fact",
    "start": "2869440",
    "end": "2876800"
  },
  {
    "text": "generates a couple of different state machines and this is a lot of code that's",
    "start": "2876800",
    "end": "2882079"
  },
  {
    "text": "generated for a very simple application or a very simple concept",
    "start": "2882079",
    "end": "2888318"
  },
  {
    "text": "and if we look at the the actual code that was generated there's a lot of code in here that we do",
    "start": "2888640",
    "end": "2894720"
  },
  {
    "text": "we really need all of this code generated or running for each of those different methods so for every method you mark as async",
    "start": "2894720",
    "end": "2901440"
  },
  {
    "text": "you're going to get one of these classes generated that holds a state machine right",
    "start": "2901440",
    "end": "2907040"
  },
  {
    "text": "and for for iot devices and for mobile phones that's a little bit unnecessary",
    "start": "2907040",
    "end": "2912800"
  },
  {
    "text": "so how do we approach this how do we solve this how can we improve this application to make the the chain of",
    "start": "2913520",
    "end": "2918640"
  },
  {
    "text": "method calls a little bit more efficient well we can still adhere to the same",
    "start": "2918640",
    "end": "2924319"
  },
  {
    "text": "contract as i mentioned earlier we can just add the async keyword that just",
    "start": "2924319",
    "end": "2930880"
  },
  {
    "text": "automatically returns a task that goes the other way around as well",
    "start": "2930880",
    "end": "2935920"
  },
  {
    "text": "if i have a task that returned from a method couldn't i just remove the async keyword",
    "start": "2935920",
    "end": "2941200"
  },
  {
    "text": "and instead return this and i still have the same contract i haven't broken anything in the",
    "start": "2941200",
    "end": "2946720"
  },
  {
    "text": "application and all of a sudden i reduced one class that's been generated",
    "start": "2946720",
    "end": "2952400"
  },
  {
    "text": "and if i do this for for all of these different methods let's go to let's take the bottom one",
    "start": "2952400",
    "end": "2958559"
  },
  {
    "text": "first so i want to remove async from this here but there's also a little bit more of an",
    "start": "2958559",
    "end": "2964400"
  },
  {
    "text": "efficient way of doing doing this here what happens here is that i have two calls to two different let's say",
    "start": "2964400",
    "end": "2971920"
  },
  {
    "text": "websites take 500 milliseconds each wouldn't it be better to execute both of these at",
    "start": "2971920",
    "end": "2977200"
  },
  {
    "text": "the same time because it doesn't look like they were actually related so they don't rely on",
    "start": "2977200",
    "end": "2982400"
  },
  {
    "text": "each other to do that we can use something called task dot",
    "start": "2982400",
    "end": "2987680"
  },
  {
    "text": "when all and i can simply pass a an array of tasks that i want to execute",
    "start": "2987680",
    "end": "2994960"
  },
  {
    "text": "and it will run all of them at the same time and tell you when all of them are done",
    "start": "2994960",
    "end": "3001280"
  },
  {
    "text": "so i could just return this so this here is now a reference to two asynchronous operations and when",
    "start": "3001280",
    "end": "3007440"
  },
  {
    "text": "both of them are done the task that this returns will be marked as completed",
    "start": "3007440",
    "end": "3012720"
  },
  {
    "text": "right so that's one more state machine that's that's removed and we can do the same for all of them",
    "start": "3012720",
    "end": "3020559"
  },
  {
    "text": "just remove the async and our keywords right and it will all work and we could",
    "start": "3020559",
    "end": "3027040"
  },
  {
    "text": "even i believe we could do the same here right so we have a continuation i can probably just return that task",
    "start": "3027040",
    "end": "3034319"
  },
  {
    "text": "because it really references oops sorry it really references",
    "start": "3034319",
    "end": "3039359"
  },
  {
    "text": "both of those operations all right so i just replaced the async and away keyword by removing the async",
    "start": "3039680",
    "end": "3046800"
  },
  {
    "text": "and replacing the await with a return and this doesn't work for all different cases",
    "start": "3046800",
    "end": "3053119"
  },
  {
    "text": "sometimes you have to use the async away keyword when you're doing for instance an http call you can just return the get",
    "start": "3053119",
    "end": "3058720"
  },
  {
    "text": "async task that wouldn't work you have to await that same goes for database operations you have to complete them and",
    "start": "3058720",
    "end": "3064480"
  },
  {
    "text": "and await them inside where inside the method where you called it but now",
    "start": "3064480",
    "end": "3070000"
  },
  {
    "text": "when i when i refresh this application i would compile this and look at this here",
    "start": "3070000",
    "end": "3076640"
  },
  {
    "text": "there's no longer a lot of generated code instead it's just the method parties that performs a",
    "start": "3076640",
    "end": "3083119"
  },
  {
    "text": "method call and just returns the task there's no more overhead in terms of generated code and",
    "start": "3083119",
    "end": "3091119"
  },
  {
    "text": "things that has to run right so sometimes the right approach is to not introduce async in a weight",
    "start": "3091119",
    "end": "3096800"
  },
  {
    "text": "sometimes you can just return the task but it's really important that at the top level",
    "start": "3096800",
    "end": "3103599"
  },
  {
    "text": "that would be inside in this case the main thing that or the main method that executes this program that's where you",
    "start": "3103599",
    "end": "3109760"
  },
  {
    "text": "have the await that's what awaiting or using async and a weight all the way means at the top level or at some level",
    "start": "3109760",
    "end": "3116800"
  },
  {
    "text": "in the application you have to validate the entire chain of method calls but unless there's anything inside the",
    "start": "3116800",
    "end": "3123440"
  },
  {
    "text": "continuation you don't have to do the async and away keywords",
    "start": "3123440",
    "end": "3129119"
  },
  {
    "text": "so async can await or sorry async all the way means that you should avoid introducing unnecessary",
    "start": "3134640",
    "end": "3139920"
  },
  {
    "text": "state machines or unnecessary async methods but you should await at the top level that could be the main method or",
    "start": "3139920",
    "end": "3147520"
  },
  {
    "text": "in the click event handler for example all right",
    "start": "3147520",
    "end": "3153839"
  },
  {
    "text": "then i guess the the idea of how do i cancel one of these tasks because i have a long method of for a long chain of",
    "start": "3155680",
    "end": "3162160"
  },
  {
    "text": "asynchronous operations how do i make sure that if i want to be able to cancel this summer in the application how do i",
    "start": "3162160",
    "end": "3167200"
  },
  {
    "text": "do that task doesn't really have anything in in terms of",
    "start": "3167200",
    "end": "3172880"
  },
  {
    "text": "just knowing exactly how to terminate itself you can't just tell a task to hey i want you to cancel you can't just pass",
    "start": "3172880",
    "end": "3179520"
  },
  {
    "text": "what's known as the cancellation token and think that it's going to work out of the box you have to write some manual",
    "start": "3179520",
    "end": "3184800"
  },
  {
    "text": "code to handle that because you don't know in which portion of your asynchronous operation this cancellation",
    "start": "3184800",
    "end": "3190800"
  },
  {
    "text": "would occur and if you cancel an operation do you want partial data do you want to roll",
    "start": "3190800",
    "end": "3196160"
  },
  {
    "text": "back or what do you want to do with that you have to handle all of those different situations yourself",
    "start": "3196160",
    "end": "3201440"
  },
  {
    "text": "let's say i have this method called long running operation this is a while true loop that just",
    "start": "3201440",
    "end": "3206800"
  },
  {
    "text": "prints something out to to a window here it writes the ticks to a debug window",
    "start": "3206800",
    "end": "3212720"
  },
  {
    "text": "and then just has a way to test a delay if i run this",
    "start": "3212720",
    "end": "3218160"
  },
  {
    "text": "using a task.run as you'll see here i'm going to pass something called a cancellation token",
    "start": "3218160",
    "end": "3225119"
  },
  {
    "text": "the tank the cancellation token source is something that allows me to signal that i want to cancel on asynchronous",
    "start": "3225119",
    "end": "3230800"
  },
  {
    "text": "operation and i can pass the token into this this synchronous operation but when i then",
    "start": "3230800",
    "end": "3238240"
  },
  {
    "text": "say that i want to cancel this nothing is going to happen",
    "start": "3238240",
    "end": "3243839"
  },
  {
    "text": "because how would this method know how to handle this this here is executed on a different thread if i tell this to",
    "start": "3243839",
    "end": "3250400"
  },
  {
    "text": "cancel how would it know where to stop it wouldn't it wouldn't make sense for this to just automatically know where to",
    "start": "3250400",
    "end": "3256800"
  },
  {
    "text": "cancel itself so instead you have to introduce a little bit of code to",
    "start": "3256800",
    "end": "3262800"
  },
  {
    "text": "handle that properly in this case here i say that if someone has requested a cancellation i want to throw an",
    "start": "3262800",
    "end": "3268559"
  },
  {
    "text": "exception and then i can handle that properly maybe i need to roll back this last",
    "start": "3268559",
    "end": "3274000"
  },
  {
    "text": "portion of the code maybe i need to send some signal somewhere else or do something",
    "start": "3274000",
    "end": "3280559"
  },
  {
    "text": "so keep that in mind because this is something that buys a lot of developers quite frequently and then handling how",
    "start": "3280559",
    "end": "3286960"
  },
  {
    "text": "to approach that in different situations what happens if you cancel or the cancellation happens at the top or at",
    "start": "3286960",
    "end": "3293280"
  },
  {
    "text": "the bottom is that going to behave differently is that going to change the behavior of how you handle that",
    "start": "3293280",
    "end": "3298799"
  },
  {
    "text": "potential cancellation right so another in terms of efficiency",
    "start": "3298799",
    "end": "3305280"
  },
  {
    "text": "asynchronous operations with databases is really important like when you want to load data that's one of the main",
    "start": "3305280",
    "end": "3310400"
  },
  {
    "text": "places where you want to to introduce the synchronous programming is when you talk to your databases or when you talk to your web apis",
    "start": "3310400",
    "end": "3317599"
  },
  {
    "text": "when it comes to to energy framework it doesn't support parallel operations",
    "start": "3317599",
    "end": "3324240"
  },
  {
    "text": "on the same context so for for those situations you should always use the",
    "start": "3324240",
    "end": "3329359"
  },
  {
    "text": "await keyword on each of those different asynchronous operations using entity framework if you try to be smart here",
    "start": "3329359",
    "end": "3335680"
  },
  {
    "text": "and optimize this yourself you're going to run into situations where it doesn't work as expected so always await your",
    "start": "3335680",
    "end": "3342640"
  },
  {
    "text": "your calls to your database when it comes to asynchronous or when it comes to entity framework",
    "start": "3342640",
    "end": "3348559"
  },
  {
    "text": "so the final thing i want to talk about is how to stream data if you read my c-sharp talk yesterday you saw an",
    "start": "3348559",
    "end": "3353680"
  },
  {
    "text": "example of how to stream data using asynchronous principles and this is done by introducing",
    "start": "3353680",
    "end": "3359680"
  },
  {
    "text": "something called an i-async enumerable this allows us to",
    "start": "3359680",
    "end": "3364960"
  },
  {
    "text": "to consume a stream of data asynchronously let's say that i might be getting something from the disk or i might be",
    "start": "3364960",
    "end": "3371440"
  },
  {
    "text": "getting something from the web or maybe i'm listening to an mqtt",
    "start": "3371440",
    "end": "3376640"
  },
  {
    "text": "server and i'm listening for data to be fed into my application and i can then use an asynchronous",
    "start": "3376640",
    "end": "3382160"
  },
  {
    "text": "enumerable to do that let me show you an example of this",
    "start": "3382160",
    "end": "3388599"
  },
  {
    "text": "it's harder to exit powerpoint than it is to work with asynchronous programming",
    "start": "3390160",
    "end": "3395680"
  },
  {
    "text": "let's see here i have an application here it's a wpf application again",
    "start": "3395920",
    "end": "3401200"
  },
  {
    "text": "i've introduced a method here called get lyrics it's an iasync innumerable of string so this will stream strings into",
    "start": "3401200",
    "end": "3407520"
  },
  {
    "text": "my my wpf application what i've also added here is that the capability of cancelling this operation",
    "start": "3407520",
    "end": "3414240"
  },
  {
    "text": "wherever i want and i've decorated this with an attribute called enumerator cancellation this allows me to to set",
    "start": "3414240",
    "end": "3420960"
  },
  {
    "text": "the cancellation token in a little bit of a different manner than you might not have instead of passing it into the",
    "start": "3420960",
    "end": "3426160"
  },
  {
    "text": "method yourself and i'll show you that when we consume this method inside this method",
    "start": "3426160",
    "end": "3432720"
  },
  {
    "text": "i'm opening a stream to a file on my disk i'm simply saying that i want to load some lines using asynchronous principles",
    "start": "3432720",
    "end": "3439760"
  },
  {
    "text": "so notice here that it's marked as async i use the iasync enumerable this is a task like thing so it knows exactly what",
    "start": "3439760",
    "end": "3446559"
  },
  {
    "text": "to do when it sees the async keyword together with the i async enumerable",
    "start": "3446559",
    "end": "3452640"
  },
  {
    "text": "i have the weight keyword say that i want to load each line seriously and then if there's a cancellation i'm",
    "start": "3452640",
    "end": "3458319"
  },
  {
    "text": "going to throw an exception so whoever uses or consumes this stream of data they can handle that properly",
    "start": "3458319",
    "end": "3465200"
  },
  {
    "text": "then i process each lines it takes about 400 milliseconds before i use yield return",
    "start": "3465200",
    "end": "3470240"
  },
  {
    "text": "to signal that i've now asynchronously processed a line or a result you can now go ahead and",
    "start": "3470240",
    "end": "3476160"
  },
  {
    "text": "handle that it's important to know here that we have no idea how many lines there are here so",
    "start": "3476160",
    "end": "3482960"
  },
  {
    "text": "in terms of writing efficient code and writing code that might not fail",
    "start": "3482960",
    "end": "3488559"
  },
  {
    "text": "you never want to call to array on your enumerables or your iasync enumerables because you don't know how much data",
    "start": "3488559",
    "end": "3494480"
  },
  {
    "text": "there is going to be right so when i consume this",
    "start": "3494480",
    "end": "3500400"
  },
  {
    "text": "let's have a look at how we do that",
    "start": "3500480",
    "end": "3503838"
  },
  {
    "text": "here's a for each loop that has an await in front of it this looks a bit different from what you might have seen",
    "start": "3505760",
    "end": "3510799"
  },
  {
    "text": "in the past normally when you have an asynchronous method you have the await keyword in front of the method call to say run this method",
    "start": "3510799",
    "end": "3518480"
  },
  {
    "text": "and once there's a result available i want you to come back to this particular portion of the code but in this case",
    "start": "3518480",
    "end": "3523760"
  },
  {
    "text": "here the await keyword is in front of the for each loop because what we're saying here is that each line that comes",
    "start": "3523760",
    "end": "3530480"
  },
  {
    "text": "out of this method called git lyrics is going to be asynchronously retrieved",
    "start": "3530480",
    "end": "3535599"
  },
  {
    "text": "so effectively what happens here is that this here is a continuation each time we have some data that's being",
    "start": "3535599",
    "end": "3541920"
  },
  {
    "text": "passed back from that asynchronous operation we're going to run this code back on the ui thread",
    "start": "3541920",
    "end": "3547359"
  },
  {
    "text": "that's a big difference as well from using the task parallel library after the await keyword all code is always",
    "start": "3547359",
    "end": "3553680"
  },
  {
    "text": "executed on the original thread that's a really important difference between using the task parallel library and the",
    "start": "3553680",
    "end": "3560559"
  },
  {
    "text": "async can await and then you see here that i have this method called with cancellation this is",
    "start": "3560559",
    "end": "3566799"
  },
  {
    "text": "what's passed into that the decorated attribute the enumerate enumerator cancellation because maybe i",
    "start": "3566799",
    "end": "3573680"
  },
  {
    "text": "don't own this this method call maybe this i async enumerable is a property or",
    "start": "3573680",
    "end": "3578880"
  },
  {
    "text": "it's coming from somewhere else so i can pass in the cancellation using this method call",
    "start": "3578880",
    "end": "3584640"
  },
  {
    "text": "all right so if i run this here",
    "start": "3584640",
    "end": "3588078"
  },
  {
    "text": "see if it works",
    "start": "3592160",
    "end": "3594880"
  },
  {
    "text": "where is my ui",
    "start": "3599040",
    "end": "3601839"
  },
  {
    "text": "here we go run perfect i worked",
    "start": "3607280",
    "end": "3613359"
  },
  {
    "text": "best song in the world all right let's press cancel here and",
    "start": "3613359",
    "end": "3618720"
  },
  {
    "text": "hopefully that worked as well cancel and the operation was cancelled as well",
    "start": "3618720",
    "end": "3624720"
  },
  {
    "text": "so it handled that cancellation properly so these iasync enumerables are really",
    "start": "3624720",
    "end": "3630319"
  },
  {
    "text": "powerful to get data streamed into your application and you can use this in many different interesting and cool",
    "start": "3630319",
    "end": "3635760"
  },
  {
    "text": "situations to make your applications work a lot more efficiently when it comes to",
    "start": "3635760",
    "end": "3642160"
  },
  {
    "text": "a lot of data that needs to be processed just keep in mind that you should never ask for it to be converted into an array",
    "start": "3642160",
    "end": "3647200"
  },
  {
    "text": "because that is going to take a lot of time and processing power i have a whole course so if you have",
    "start": "3647200",
    "end": "3653119"
  },
  {
    "text": "four hours to spare i i'm going to detail in a lot of about asynchronous programming",
    "start": "3653119",
    "end": "3658559"
  },
  {
    "text": "there's really much to cover when it comes to both parallel programming and asynchronous programming",
    "start": "3658559",
    "end": "3665119"
  },
  {
    "text": "and if you like that course i have about 20 more so if you have like a few weeks to spare like if you want to learn about",
    "start": "3665119",
    "end": "3671359"
  },
  {
    "text": "game programming in python or the latest in c sharp go ahead and check my pluralsight courses and again i hope you found this really",
    "start": "3671359",
    "end": "3677760"
  },
  {
    "text": "useful i want to thank you so much for listening to me if you have any questions about async and await or anything in c sharp feel free to reach",
    "start": "3677760",
    "end": "3684000"
  },
  {
    "text": "out thank you again for having me here it's been a pleasure",
    "start": "3684000",
    "end": "3689079"
  },
  {
    "text": "[Applause]",
    "start": "3694100",
    "end": "3697230"
  },
  {
    "text": "so",
    "start": "3704079",
    "end": "3707079"
  },
  {
    "text": "you",
    "start": "3719520",
    "end": "3721599"
  }
]