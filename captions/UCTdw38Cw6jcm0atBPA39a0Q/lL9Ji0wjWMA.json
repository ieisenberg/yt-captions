[
  {
    "text": "I'm really happy to see that so many of you showed up um it's too bad that I couldn't be there in person hopefully",
    "start": "8440",
    "end": "14559"
  },
  {
    "text": "I'll be able to meet you all next year and this is definitely one of my favorite conferences and I love going to",
    "start": "14559",
    "end": "21560"
  },
  {
    "text": "Oslo today we're going to be talking about what's new in C going to be",
    "start": "21560",
    "end": "26920"
  },
  {
    "text": "exploring some exciting new features in C 8 nine and 10 um you'll see that c is",
    "start": "26920",
    "end": "34320"
  },
  {
    "text": "slowly becoming F uh all joking aside C is a language that takes inspiration",
    "start": "34320",
    "end": "41399"
  },
  {
    "text": "from a lot of programming languages F being one of those but also when the",
    "start": "41399",
    "end": "47640"
  },
  {
    "text": "language designers build features in C they look at Java Swift cotlin and so",
    "start": "47640",
    "end": "53440"
  },
  {
    "text": "forth so if you've been working in those languages you might feel yourself",
    "start": "53440",
    "end": "58960"
  },
  {
    "text": "familiar so so before we get into that my name is Philip eberg you might have",
    "start": "58960",
    "end": "64960"
  },
  {
    "text": "seen me at NDC before I've been talking about C for the past past years and if",
    "start": "64960",
    "end": "71119"
  },
  {
    "text": "you have any questions please use slido or you can ping me on Twitter afterwards and I'll try to answer all your",
    "start": "71119",
    "end": "78080"
  },
  {
    "text": "questions you can also find my courses on C and some other topics on plural",
    "start": "78080",
    "end": "83880"
  },
  {
    "text": "side all right so over the years C has had a lot of changes coming into the",
    "start": "83880",
    "end": "91119"
  },
  {
    "text": "language if you've been building C applications or net applications for the past 5 10 years it wouldn't really look",
    "start": "91119",
    "end": "100000"
  },
  {
    "text": "the same if you build an application today back when you started we've seen changes for instance",
    "start": "100000",
    "end": "107240"
  },
  {
    "text": "when you build applications that leverage asynchronous principles pretty early on C added async",
    "start": "107240",
    "end": "114439"
  },
  {
    "text": "and await it's been available for a few years now but it drastically changed the way that we approach building",
    "start": "114439",
    "end": "121640"
  },
  {
    "text": "multi-threaded and asynchronous applications we've also had other",
    "start": "121640",
    "end": "126920"
  },
  {
    "text": "language features that kind of change the way that we look at building and architect our",
    "start": "126920",
    "end": "132480"
  },
  {
    "text": "applications one of those features is generics it's one of those things that",
    "start": "132480",
    "end": "137720"
  },
  {
    "text": "change the way that we look at using our types and how to construct our",
    "start": "137720",
    "end": "144160"
  },
  {
    "text": "applications all right so let just change my screens here",
    "start": "144160",
    "end": "150440"
  },
  {
    "text": "and another pretty cool thing that they've added recently is something called pattern matching I'll of course",
    "start": "150440",
    "end": "157000"
  },
  {
    "text": "go through this language feature and show you exactly what that looks like but one of the things you see with c and",
    "start": "157000",
    "end": "164200"
  },
  {
    "text": "other PR programming languages as well when they evolve they look at each other",
    "start": "164200",
    "end": "169560"
  },
  {
    "text": "C took inspiration from F when they introduced generics they took inspiration from FP when they introduced",
    "start": "169560",
    "end": "175920"
  },
  {
    "text": "pattern matching and what I find particularly amazing with c as a programming language",
    "start": "175920",
    "end": "182599"
  },
  {
    "text": "is that they do everything in the open you can go ahead and go to GitHub and have a look at what the next big thing",
    "start": "182599",
    "end": "189680"
  },
  {
    "text": "is in the language if you're interested in participating implementing any language",
    "start": "189680",
    "end": "195519"
  },
  {
    "text": "features you can go ahead and do that if You' so like to but you can also if you",
    "start": "195519",
    "end": "200840"
  },
  {
    "text": "don't like to contribute to the compilers that are now open source you can have a look at some of the",
    "start": "200840",
    "end": "206280"
  },
  {
    "text": "discussions around potential language features they're doing all of this in the open so",
    "start": "206280",
    "end": "212000"
  },
  {
    "text": "that people can contribute with feedback that might have been working in other languages so that you can give",
    "start": "212000",
    "end": "217480"
  },
  {
    "text": "inspiration to the design team and give some of your understanding of how you",
    "start": "217480",
    "end": "222560"
  },
  {
    "text": "would see this added to the language and if you don't like to participate in the discussions you can",
    "start": "222560",
    "end": "228439"
  },
  {
    "text": "just read up on what they want to add and how that feature would work in the",
    "start": "228439",
    "end": "234079"
  },
  {
    "text": "language all right so I do encourage you to go and have a look you can see what's coming in C 11 12 13 and features that",
    "start": "234079",
    "end": "242280"
  },
  {
    "text": "they want to add but might never add to the language and you can see the reasoning",
    "start": "242280",
    "end": "247439"
  },
  {
    "text": "behind those decisions all right so let's before we jump into C 8 n and 10 let's go through",
    "start": "247439",
    "end": "255360"
  },
  {
    "text": "some highlights from c 7 to",
    "start": "255360",
    "end": "260479"
  },
  {
    "text": "7.3 this is where they introduced the fundamental building blocks to introduce pattern matching as a first class",
    "start": "260479",
    "end": "267479"
  },
  {
    "text": "citizen in the language one of the things that they had to add to the language to make this possible",
    "start": "267479",
    "end": "275320"
  },
  {
    "text": "was tuples now tuples has been around for a very long time but previously it was a",
    "start": "275320",
    "end": "282600"
  },
  {
    "text": "part of the framework and it wasn't really a part of the language",
    "start": "282600",
    "end": "288400"
  },
  {
    "text": "itself so how do we change this to make it a part of the language and then make",
    "start": "288400",
    "end": "293880"
  },
  {
    "text": "it also so that we can use this with something like pattern matching well obviously this here",
    "start": "293880",
    "end": "300120"
  },
  {
    "text": "wouldn't work because it just uses a built-in type that uses generics and as you see here if I just",
    "start": "300120",
    "end": "306639"
  },
  {
    "text": "highlight this little portion here you can see that when we create this this grouping of data I have no idea what",
    "start": "306639",
    "end": "313479"
  },
  {
    "text": "item one two and three is and that can be a little bit",
    "start": "313479",
    "end": "319479"
  },
  {
    "text": "confusing so what they did with c 7 is that they introduced Tes or tupes",
    "start": "319479",
    "end": "324720"
  },
  {
    "text": "depending on where you're from they introduced this as a first class citizen in the language",
    "start": "324720",
    "end": "330600"
  },
  {
    "text": "now I can create this this group of fields or group of data and I can give",
    "start": "330600",
    "end": "336880"
  },
  {
    "text": "these fields names it very much looks like creating a class or an anonymous",
    "start": "336880",
    "end": "343520"
  },
  {
    "text": "type but what I can do now is that I can use this as a return type from a method",
    "start": "343520",
    "end": "349199"
  },
  {
    "text": "I can use it as an parameter to a method and I can even use this in some other ways that we are going to",
    "start": "349199",
    "end": "355680"
  },
  {
    "text": "explore and this tupal here is now initialized in this little very able here and once I try to access some of",
    "start": "355680",
    "end": "362600"
  },
  {
    "text": "these fields we can see that we have some named parameters this makes it a whole lot",
    "start": "362600",
    "end": "367759"
  },
  {
    "text": "easier to work with tupal and use them and and leverage that later on with",
    "start": "367759",
    "end": "373840"
  },
  {
    "text": "pattern matching so even though you might not end up writing your code like this here",
    "start": "373840",
    "end": "380160"
  },
  {
    "text": "this is one of the building blocks needed to go forward to the changes that are coming in C",
    "start": "380160",
    "end": "386599"
  },
  {
    "text": "8 what they also added was the capab ability of deconstructing an",
    "start": "386599",
    "end": "392880"
  },
  {
    "text": "object that means that we can take an object pull it apart and have a little",
    "start": "392880",
    "end": "397960"
  },
  {
    "text": "bit of a different way of looking at a representation of that type so what I mean about that is that",
    "start": "397960",
    "end": "405560"
  },
  {
    "text": "if we look at this method here it doesn't have doesn't override it's",
    "start": "405560",
    "end": "410800"
  },
  {
    "text": "simply a I would say it's a magic magic naming convention or it's a Convention",
    "start": "410800",
    "end": "416080"
  },
  {
    "text": "of how you build this method so as soon as you add a method called deconstruct",
    "start": "416080",
    "end": "421560"
  },
  {
    "text": "that also has a few out parameters you can take this and you can assign your",
    "start": "421560",
    "end": "427560"
  },
  {
    "text": "type to a tupple and it pulls that object apart and it brings it into this tupple",
    "start": "427560",
    "end": "433919"
  },
  {
    "text": "that I have here on the left hand side so now I took my let's say this is an instance of a person when I pull that",
    "start": "433919",
    "end": "440199"
  },
  {
    "text": "apart and deconstruct the object it will return the name as well as an age and it",
    "start": "440199",
    "end": "446400"
  },
  {
    "text": "can be deconstructed into these two local fields so this here is an interesting change as",
    "start": "446400",
    "end": "452720"
  },
  {
    "text": "well because this means that I can now add this method to my objects and I can",
    "start": "452720",
    "end": "457840"
  },
  {
    "text": "add multiple different ones let's say that I have a deconstruct method that would also give me the address or my my",
    "start": "457840",
    "end": "464599"
  },
  {
    "text": "place of birth and a whole lot of different things I could pull this object apart into different",
    "start": "464599",
    "end": "470360"
  },
  {
    "text": "representations which would all return tles and you'll see what this is why",
    "start": "470360",
    "end": "476039"
  },
  {
    "text": "this is important when we look at pattern matching as well",
    "start": "476039",
    "end": "481280"
  },
  {
    "text": "so tles and deconstruction they are kind of used together I would say that most",
    "start": "481280",
    "end": "486360"
  },
  {
    "text": "of the time you use these together and another way of looking at this is in this case here I have this local",
    "start": "486360",
    "end": "492440"
  },
  {
    "text": "variable that I call coord coordinates this local variable has an X",
    "start": "492440",
    "end": "498080"
  },
  {
    "text": "and A Y field this syntax here defines that the",
    "start": "498080",
    "end": "503400"
  },
  {
    "text": "coordinates variable is a tle and then I assigned the first value to 10 and the",
    "start": "503400",
    "end": "508599"
  },
  {
    "text": "second one to 20 and then I can access those fields of course like I could with any",
    "start": "508599",
    "end": "515880"
  },
  {
    "text": "object another way of looking at this is if we have a class cord called coordinates and I want to be able to",
    "start": "515880",
    "end": "521880"
  },
  {
    "text": "Simply assign that to two local fields to do this it would be required",
    "start": "521880",
    "end": "528200"
  },
  {
    "text": "that I add this deconstruct method and everything would just work out of the",
    "start": "528200",
    "end": "533800"
  },
  {
    "text": "box so if you add the deconstruct method to your classes you will be able to get",
    "start": "533800",
    "end": "539000"
  },
  {
    "text": "a rep presentation of that class into a tupple and deconstruct the",
    "start": "539000",
    "end": "544160"
  },
  {
    "text": "object so this or these two language features were very welcome in c 7",
    "start": "544160",
    "end": "550000"
  },
  {
    "text": "through 7.3 what they also introduced was the capability of",
    "start": "550000",
    "end": "556560"
  },
  {
    "text": "building asynchronous main methods now this might seem like a very small",
    "start": "556560",
    "end": "561640"
  },
  {
    "text": "feature but you know if you build a console application like most of us do uh you",
    "start": "561640",
    "end": "567560"
  },
  {
    "text": "would to be able to use a synchronous code this could be used for instance if you have a a service that's running in",
    "start": "567560",
    "end": "573440"
  },
  {
    "text": "Windows or you have something that's scheduled to run all over all the time it's really nice that you can now Mark",
    "start": "573440",
    "end": "579360"
  },
  {
    "text": "your main method as async but also requires you to return a task and then you can use the await keyword inside the",
    "start": "579360",
    "end": "586560"
  },
  {
    "text": "main method might look like a very small thing to add but this was also in",
    "start": "586560",
    "end": "592360"
  },
  {
    "text": "preparation for what's coming in C 9 which is something called top level",
    "start": "592360",
    "end": "597839"
  },
  {
    "text": "statements so the way that we look at Building C applications and net applications in general it's going to",
    "start": "597839",
    "end": "604720"
  },
  {
    "text": "change over the years and if you do a file new project in in the latest version of Visual Studio that's going to",
    "start": "604720",
    "end": "611760"
  },
  {
    "text": "look very different from what it did five years ago but we'll get to that soon so now",
    "start": "611760",
    "end": "619560"
  },
  {
    "text": "with that out out of the way and we've looked at the topples and deconstruction we can discuss what's coming in C 8 or",
    "start": "619560",
    "end": "626160"
  },
  {
    "text": "what did come in C 8 so C eight introduced quite a lot of",
    "start": "626160",
    "end": "632079"
  },
  {
    "text": "features and the reason that they are capable of adding this many features into the language is mainly because they",
    "start": "632079",
    "end": "639639"
  },
  {
    "text": "decided to rewrite the compilers they rewrote the compilers and the C 6 version was the first version",
    "start": "639639",
    "end": "646639"
  },
  {
    "text": "released on that brand new compiler a fun fact around that is that",
    "start": "646639",
    "end": "652079"
  },
  {
    "text": "they had to reproduce all the bugs from the old compilers because Microsoft don't like to do breaking changes and",
    "start": "652079",
    "end": "658839"
  },
  {
    "text": "fixing a bug could potentially be a breaking change so with C 6 7 and 8 we've got a",
    "start": "658839",
    "end": "666320"
  },
  {
    "text": "whole bunch of features and specifically with C 8 we're going to look at a few of these that",
    "start": "666320",
    "end": "672920"
  },
  {
    "text": "again change the way that we look at building our applications the whole idea behind",
    "start": "672920",
    "end": "678760"
  },
  {
    "text": "introducing new language features is mainly due to the fact that we want to be able to express an intent that we",
    "start": "678760",
    "end": "686440"
  },
  {
    "text": "might have be been able to do before but do that in a slightly different manner we want to be able to express ourselves",
    "start": "686440",
    "end": "693959"
  },
  {
    "text": "in a way that makes it more understandable hopefully introduces less",
    "start": "693959",
    "end": "699160"
  },
  {
    "text": "bugs but also is is really maintainable and a solid",
    "start": "699160",
    "end": "705079"
  },
  {
    "text": "implementation so we want to trust the compiler to do a good job for us now with C 8 one of the things or I'll list",
    "start": "705079",
    "end": "713760"
  },
  {
    "text": "a few of the language features we're not going to be able to cover all of them but I'll go ahead and go into Visual",
    "start": "713760",
    "end": "718959"
  },
  {
    "text": "Studio and and cover a few of them they introduced read only members something called default",
    "start": "718959",
    "end": "725600"
  },
  {
    "text": "interface implementations and don't worry we're going to look at a few of these soon they also did a few changes",
    "start": "725600",
    "end": "731959"
  },
  {
    "text": "to pattern matching in fact they change the way that pattern matching",
    "start": "731959",
    "end": "737839"
  },
  {
    "text": "Works um in in whole and how you look at at using pattern matching which is why I",
    "start": "737839",
    "end": "743360"
  },
  {
    "text": "didn't show you how that worked in c 7 because it drastically changed in how you use that in C 8",
    "start": "743360",
    "end": "749760"
  },
  {
    "text": "they introduced helpers to use something called a switch expression they introduced a lot of patterns that let",
    "start": "749760",
    "end": "755600"
  },
  {
    "text": "you determine what what an object is and and what kind of attributes you have on that",
    "start": "755600",
    "end": "760920"
  },
  {
    "text": "object introduce something called using declarations static local functions nullable reference types which change",
    "start": "760920",
    "end": "767519"
  },
  {
    "text": "the way that we look at nullability and how to avoid null reference",
    "start": "767519",
    "end": "772560"
  },
  {
    "text": "exceptions if you've done any asynchronous programming you might have been thinking about streaming data and",
    "start": "772560",
    "end": "778120"
  },
  {
    "text": "how do you stream dat data from one point to another and consume that stream",
    "start": "778120",
    "end": "783959"
  },
  {
    "text": "asynchronously you haven't been able to do that in a really nice manner before but now in C 8 they introduce something",
    "start": "783959",
    "end": "790120"
  },
  {
    "text": "called asynchronous streams and together with that we also got something called asynchronous disposables we got some",
    "start": "790120",
    "end": "796560"
  },
  {
    "text": "helpers to work with ranges in indexes or indexes that lets you slice off data and",
    "start": "796560",
    "end": "804000"
  },
  {
    "text": "the ones that I've highlighted here are those of the features that I'm going to dig a little bit deeper into",
    "start": "804000",
    "end": "810040"
  },
  {
    "text": "we also got something called No equalizing assignments so I guess the the question",
    "start": "810040",
    "end": "815160"
  },
  {
    "text": "now is that I want to jump on a use these features and I'm going to go into visual studio and vs code and use all of",
    "start": "815160",
    "end": "821800"
  },
  {
    "text": "this but I've already prepared my machine here with all that I need all that I need to run this but if you want",
    "start": "821800",
    "end": "828360"
  },
  {
    "text": "to do this on your your local machine at work or at home you'll need to know that",
    "start": "828360",
    "end": "834279"
  },
  {
    "text": "in order for you to use C 8 or C 9 for that matter",
    "start": "834279",
    "end": "840120"
  },
  {
    "text": "you might need to install a new version of Visual Studio you might need to run a very specific specific version of net so",
    "start": "840120",
    "end": "847920"
  },
  {
    "text": "for C 8 and 9 you need vs 2019 and for net 8 or for sorry for C 8",
    "start": "847920",
    "end": "855000"
  },
  {
    "text": "you need net core 3.0 for C 9 you need Net 5 for C 6 you need net",
    "start": "855000",
    "end": "860519"
  },
  {
    "text": "6 it can be a little bit confusing because these languages or",
    "start": "860519",
    "end": "867000"
  },
  {
    "text": "these language versions they don't just introduce compiler magic or or things inside the compiler that works for older",
    "start": "867000",
    "end": "875199"
  },
  {
    "text": "run times some of the features they introduce is also something that",
    "start": "875199",
    "end": "880839"
  },
  {
    "text": "requires a new runtime and knowing which runtime you",
    "start": "880839",
    "end": "886079"
  },
  {
    "text": "need can be a little bit tricky but fortunately enough visual studio will let us know if we're trying",
    "start": "886079",
    "end": "892480"
  },
  {
    "text": "to Target a feature that doesn't exist sometimes you can even go back and compile for instance you can use some C",
    "start": "892480",
    "end": "899680"
  },
  {
    "text": "10 features and run them on Old NET Framework as long as that language feature is just compiler magic but",
    "start": "899680",
    "end": "907560"
  },
  {
    "text": "unless you know that it is it might or might not work so A good rule of thumb is use the",
    "start": "907560",
    "end": "914040"
  },
  {
    "text": "latest version at least the latest version of net that's the longtime support which is nown 6 and that lets",
    "start": "914040",
    "end": "921079"
  },
  {
    "text": "you use C 10 but this also means that we might need to look at if you're working in",
    "start": "921079",
    "end": "927160"
  },
  {
    "text": "Windows applications for instance and you haven't been in the net space for a while one of the worries was that I",
    "start": "927160",
    "end": "934680"
  },
  {
    "text": "can't just jump on net core or Net 5 or net 6 because I'm working in WPF or I'm",
    "start": "934680",
    "end": "940920"
  },
  {
    "text": "working in Wind forms but of course fortunately enough for us Microsoft has",
    "start": "940920",
    "end": "946399"
  },
  {
    "text": "made a change so that you can now do WPF applications on NET Framework on net core and now also",
    "start": "946399",
    "end": "953759"
  },
  {
    "text": "Donnet and if you want to know what the difference is between net core NET Framework and net that's a whole other",
    "start": "953759",
    "end": "962079"
  },
  {
    "text": "talk basically net is the one thing going forward so net 6 is what you",
    "start": "962079",
    "end": "967399"
  },
  {
    "text": "should be using if you're creating new applications okay and you can do the same thing for for win forms as well now",
    "start": "967399",
    "end": "974680"
  },
  {
    "text": "one of the C 8 language features that I I talked about or just briefly mentioned",
    "start": "974680",
    "end": "980000"
  },
  {
    "text": "is something called defa default interface implementations now this language",
    "start": "980000",
    "end": "985480"
  },
  {
    "text": "feature requires a runtime change because it to change the way that interfaces Works",
    "start": "985480",
    "end": "992440"
  },
  {
    "text": "internally this here looks very much like a class if you look at this little",
    "start": "992440",
    "end": "997600"
  },
  {
    "text": "portion here this here is a a method body I'm using an expression bed member but I",
    "start": "997600",
    "end": "1004720"
  },
  {
    "text": "have this interface called i product repository it's not a class so how come",
    "start": "1004720",
    "end": "1010480"
  },
  {
    "text": "I can have this implementation inside my interface the reason is that in C 8 they",
    "start": "1010480",
    "end": "1016959"
  },
  {
    "text": "introduced something called default interface implementations which lets you provide a a default way that your your",
    "start": "1016959",
    "end": "1024240"
  },
  {
    "text": "methods work on an interface so it's sort of like a class without the instance of a class hopefully that makes",
    "start": "1024240",
    "end": "1031678"
  },
  {
    "text": "sense so why would you use this you might ask it's great for Library",
    "start": "1031679",
    "end": "1037438"
  },
  {
    "text": "developers if you have a u get package that you you manage or that you you provide support for and you want to",
    "start": "1037439",
    "end": "1043160"
  },
  {
    "text": "update that with a breaking change you can introduce new methods on your interfaces provide a default",
    "start": "1043160",
    "end": "1049960"
  },
  {
    "text": "implementation without breaking people that are using your interface and then you can deprecate that for instance in a",
    "start": "1049960",
    "end": "1056039"
  },
  {
    "text": "later version so it's a welcoming feature for those of us that work with with open",
    "start": "1056039",
    "end": "1061480"
  },
  {
    "text": "source project or for those that work with open source projects and then if you try to use this",
    "start": "1061480",
    "end": "1069760"
  },
  {
    "text": "with a a Target runtime that doesn't support it so let's say that you try to build this for NET Framework you'll get",
    "start": "1069760",
    "end": "1076960"
  },
  {
    "text": "this little warning that tells you that the runtime does not support default",
    "start": "1076960",
    "end": "1083000"
  },
  {
    "text": "Implement default interface implementations so it's good that the",
    "start": "1083000",
    "end": "1088520"
  },
  {
    "text": "compiler tells us that there's a potential problem and that we need to go ahead and and do something else for that",
    "start": "1088520",
    "end": "1095000"
  },
  {
    "text": "particular runtime or that or that particular uh",
    "start": "1095000",
    "end": "1100320"
  },
  {
    "text": "implementation all right so let's now go ahead and look at some of the more interesting and useful",
    "start": "1100320",
    "end": "1106559"
  },
  {
    "text": "features of C 8 I do reckon that most of you if youve",
    "start": "1106559",
    "end": "1111799"
  },
  {
    "text": "worked in net or if you worked in development at all you probably encountered a null reference",
    "start": "1111799",
    "end": "1118120"
  },
  {
    "text": "exception so there's a very welcoming change or a very welcome change in C 8",
    "start": "1118120",
    "end": "1123840"
  },
  {
    "text": "that introduces something called a nullable reference type",
    "start": "1123840",
    "end": "1129159"
  },
  {
    "text": "now null reference exceptions can occur in many different types of",
    "start": "1129159",
    "end": "1134440"
  },
  {
    "text": "applications and the biggest issue here is that we we have an object that's not",
    "start": "1134440",
    "end": "1140520"
  },
  {
    "text": "set to an instance right and sometimes when we return null from a",
    "start": "1140520",
    "end": "1146840"
  },
  {
    "text": "method that might be the intent of whoever wrote that method but if we always need to guard",
    "start": "1146840",
    "end": "1153720"
  },
  {
    "text": "against nulls our code is going to become very very hard to maintain so if we were to look at this",
    "start": "1153720",
    "end": "1161520"
  },
  {
    "text": "problem let's say 20 years ago and know that in",
    "start": "1161520",
    "end": "1166760"
  },
  {
    "text": "2021 this would have cost a the world millions and billions of dollars right the non- reference exceptions has costed",
    "start": "1166760",
    "end": "1173640"
  },
  {
    "text": "the world so much money that it's really hard to keep track and if they were to redesign c as",
    "start": "1173640",
    "end": "1180159"
  },
  {
    "text": "a programming language I do reckon that they would make it harder for us to use null references in the language if",
    "start": "1180159",
    "end": "1187480"
  },
  {
    "text": "you've done other programming languages like cotlin for instance they make it really hard to use NS in the language",
    "start": "1187480",
    "end": "1195400"
  },
  {
    "text": "you have to always explicitly say that you want to use something that's null or set something to",
    "start": "1195400",
    "end": "1201480"
  },
  {
    "text": "null so what's really the problem with nullability one of the problems is that it we need",
    "start": "1201480",
    "end": "1207919"
  },
  {
    "text": "to introduce null checks all over the place which essentially makes the code a",
    "start": "1207919",
    "end": "1214039"
  },
  {
    "text": "lot harder to maintain and read and there's also the problem that",
    "start": "1214039",
    "end": "1219240"
  },
  {
    "text": "what does NS really mean in the language or or in our applications does it mean that the objects were not found does it",
    "start": "1219240",
    "end": "1226440"
  },
  {
    "text": "mean that we had an error it also encourages mutability",
    "start": "1226440",
    "end": "1232720"
  },
  {
    "text": "mutability and that becomes a big problem when we get into multi-threaded",
    "start": "1232720",
    "end": "1238120"
  },
  {
    "text": "applications right so C 8 somehow solves this problem by introducing something called nullable reference types because",
    "start": "1238120",
    "end": "1245720"
  },
  {
    "text": "we want to avoid having to write code that looks like this here right becomes really",
    "start": "1245720",
    "end": "1251840"
  },
  {
    "text": "messy if we have to write this portion of the code here or this each time that we don't have to that becomes harder to",
    "start": "1251840",
    "end": "1259919"
  },
  {
    "text": "maintain which is why they introduce this this feature to enable something in",
    "start": "1259919",
    "end": "1265480"
  },
  {
    "text": "the language that completely changes how it looks at something that could potentially be",
    "start": "1265480",
    "end": "1271440"
  },
  {
    "text": "null if I add this little portion of code here to my application and I use",
    "start": "1271440",
    "end": "1277720"
  },
  {
    "text": "something that's null it's going to tell me that you're accessing something here",
    "start": "1277720",
    "end": "1283039"
  },
  {
    "text": "that could potentially throw a null reference exception right so name could be null",
    "start": "1283039",
    "end": "1289480"
  },
  {
    "text": "so how about we just go into visual studio and I'll show you a little bit of a program",
    "start": "1289480",
    "end": "1296400"
  },
  {
    "text": "okay this application is inside Visual Studio 2022 you could use 2019 as well",
    "start": "1296400",
    "end": "1302279"
  },
  {
    "text": "because it's c 8 what you'll see here is that I have a a normal solution with a",
    "start": "1302279",
    "end": "1308480"
  },
  {
    "text": "nor normal project if I go into my CS project file I could also do this from",
    "start": "1308480",
    "end": "1313760"
  },
  {
    "text": "the from the property window but I'll show you this in the in the Cs Pro here",
    "start": "1313760",
    "end": "1318880"
  },
  {
    "text": "using text I can enable something called nullable here if I do this it's now going to",
    "start": "1318880",
    "end": "1325720"
  },
  {
    "text": "change how this looks at uh at reference types if I save this here the the",
    "start": "1325720",
    "end": "1333640"
  },
  {
    "text": "compiler will now look at my reference types as not allowing to be set to null",
    "start": "1333640",
    "end": "1340440"
  },
  {
    "text": "it won't prevent me from setting anything to null if I want to for instance I can still set if I create a",
    "start": "1340440",
    "end": "1347799"
  },
  {
    "text": "person I can still will set that to null if I wanted to but if I do that I'll show you what",
    "start": "1347799",
    "end": "1353880"
  },
  {
    "text": "happens I'll do uh let's see here or P1 let's do person P1 is equal to",
    "start": "1353880",
    "end": "1362320"
  },
  {
    "text": "null it will now tell me that you shouldn't do this we're going to get a warning here saying that you should not",
    "start": "1362320",
    "end": "1369240"
  },
  {
    "text": "use null here because this here is a reference type and we've told the",
    "start": "1369240",
    "end": "1374440"
  },
  {
    "text": "compiler that we no longer want to use nulls in our application",
    "start": "1374440",
    "end": "1379720"
  },
  {
    "text": "so every time that we want to explicitly use something that could be null we have",
    "start": "1379720",
    "end": "1385000"
  },
  {
    "text": "to use a question mark and now you might have seen here the little squiggle here beneath null",
    "start": "1385000",
    "end": "1391039"
  },
  {
    "text": "disappeared because now I say that this person here P1 is allowed to be",
    "start": "1391039",
    "end": "1396480"
  },
  {
    "text": "null this is a a very simple and and easy example but let's look at our class",
    "start": "1396480",
    "end": "1403120"
  },
  {
    "text": "here and see if we can find any potential problems if I scroll down I have two classes",
    "start": "1403120",
    "end": "1409919"
  },
  {
    "text": "one details class that has two public properties it's telling me here that",
    "start": "1409919",
    "end": "1415080"
  },
  {
    "text": "there's a potential problem here because they're not initialized this here is a new language",
    "start": "1415080",
    "end": "1421039"
  },
  {
    "text": "feature introduced in C 9 called in it only properties it allows me to make sure",
    "start": "1421039",
    "end": "1427440"
  },
  {
    "text": "that I can initialize these with a value only once now in order for me to fix this",
    "start": "1427440",
    "end": "1435080"
  },
  {
    "text": "problem I could introduce a Constructor right I could say that I have a see the",
    "start": "1435080",
    "end": "1441200"
  },
  {
    "text": "the squigle here now is now under details because it expects me to have a first name p here last name you know and",
    "start": "1441200",
    "end": "1450480"
  },
  {
    "text": "I can set first name to first name and last name to last name so",
    "start": "1450480",
    "end": "1456440"
  },
  {
    "text": "what's the problem with going around and doing this for all our classes we've now",
    "start": "1456440",
    "end": "1461520"
  },
  {
    "text": "changed the contract for the entire application everyone that's using this details class now need to go ahead and",
    "start": "1461520",
    "end": "1467799"
  },
  {
    "text": "initialize so an alternative approach in this scenario would be to allow them to be",
    "start": "1467799",
    "end": "1475679"
  },
  {
    "text": "null so that I can get rid of his error here which is fine because I don't care if first name or last name are not",
    "start": "1475679",
    "end": "1482520"
  },
  {
    "text": "initialized and the same goes for my person class it has a reference here to my details instance I can say that this",
    "start": "1482520",
    "end": "1489399"
  },
  {
    "text": "can be null as well all right so that's all good this wasn't really going to cause",
    "start": "1489399",
    "end": "1496240"
  },
  {
    "text": "any null reference exceptions anyways so let's continue exploring the application and see what it says here if",
    "start": "1496240",
    "end": "1504039"
  },
  {
    "text": "I expand this this method here called attendance which returns an i numerable of person look at that this here returns",
    "start": "1504039",
    "end": "1513080"
  },
  {
    "text": "null so this here tells me that you could have a potential null reference exception and if I start saying that I",
    "start": "1513080",
    "end": "1519720"
  },
  {
    "text": "can return null from here the the warning would move somewhere else so whoever calls attendance here let me",
    "start": "1519720",
    "end": "1526039"
  },
  {
    "text": "just show you what happens if I say that this can return null the problem or the warning goes up",
    "start": "1526039",
    "end": "1533279"
  },
  {
    "text": "here to the top and we can go ahead and handle this accordingly so all of a sudden we change the way that we look at",
    "start": "1533279",
    "end": "1539399"
  },
  {
    "text": "reference types we let the compiler tell us when there's a potential problem but instead of course we want to fix this",
    "start": "1539399",
    "end": "1547399"
  },
  {
    "text": "and a way to do that is to simply just return an instance of a person instead sorry is to return an instance of that",
    "start": "1547399",
    "end": "1555200"
  },
  {
    "text": "person and we can easily do that you don't have to see me write all these",
    "start": "1555200",
    "end": "1560480"
  },
  {
    "text": "codes I'll just copy that in here and I'll just go through what's happening I create a new version of a person a new",
    "start": "1560480",
    "end": "1567480"
  },
  {
    "text": "instance and then I just yield return that yield return is a way for us to create this um this enumerable instead",
    "start": "1567480",
    "end": "1575039"
  },
  {
    "text": "of having to a new list and add the person to the list and then return that I can just use yield Return To indicate",
    "start": "1575039",
    "end": "1580440"
  },
  {
    "text": "to this inumerable that there's a new instance of this person and while we're inside this",
    "start": "1580440",
    "end": "1586159"
  },
  {
    "text": "little snippet here did you know that can also just remove this the details here you don't have to explicitly say",
    "start": "1586159",
    "end": "1592679"
  },
  {
    "text": "the class anymore um can now do new like",
    "start": "1592679",
    "end": "1598159"
  },
  {
    "text": "this this here is called Target type new Expressions so you don't have to explicitly say well I can do there",
    "start": "1598159",
    "end": "1604559"
  },
  {
    "text": "because it doesn't know it's a person all right so now this here the problem here is is",
    "start": "1604559",
    "end": "1610960"
  },
  {
    "text": "fixed let's expand the application a little bit more and see if there's any problems look at that we have one more",
    "start": "1610960",
    "end": "1617679"
  },
  {
    "text": "warning where we try to access the details so this method here takes this inumerable of of person takes a list of",
    "start": "1617679",
    "end": "1625080"
  },
  {
    "text": "people just for reaches over all of them it tries to access one of the properties and it tells us when you do this if it's",
    "start": "1625080",
    "end": "1631279"
  },
  {
    "text": "not initialized you're going to have a problem so this is one of the places where it's appropriate to check if if if",
    "start": "1631279",
    "end": "1637960"
  },
  {
    "text": "person. details is equal to no well if it's not no",
    "start": "1637960",
    "end": "1643919"
  },
  {
    "text": "right could do that we could also use another approach here which",
    "start": "1645440",
    "end": "1652200"
  },
  {
    "text": "uses pattern matching to say if this is an initialized",
    "start": "1652200",
    "end": "1657039"
  },
  {
    "text": "object I don't know which one you prefer you could also say is not null that would also work there's multiple ways",
    "start": "1657320",
    "end": "1664760"
  },
  {
    "text": "you can choose whichever way you like but as you see here the compiler understands that details will never be",
    "start": "1664760",
    "end": "1670559"
  },
  {
    "text": "null here so let me show you another another approach here um how about we know that",
    "start": "1670559",
    "end": "1678360"
  },
  {
    "text": "might be null and we can provide a default default value or in some",
    "start": "1678360",
    "end": "1684559"
  },
  {
    "text": "cases we might know that this here is going to be instantiated we know better",
    "start": "1684559",
    "end": "1690960"
  },
  {
    "text": "than the compiler this here is called the dam it operator or null forgiving operator it's",
    "start": "1690960",
    "end": "1698240"
  },
  {
    "text": "officially called the the null forgiving operator but damn it I'm better than the compiler right so how often do you think",
    "start": "1698240",
    "end": "1706120"
  },
  {
    "text": "this here is going to be appropriate it would be appropriate if you for instance get something like first or default and",
    "start": "1706120",
    "end": "1712519"
  },
  {
    "text": "you check that on the line above and then you do it again at the second line but the compiler is not really smart",
    "start": "1712519",
    "end": "1718679"
  },
  {
    "text": "enough here let me show you an example I can do person P1 is equal to to",
    "start": "1718679",
    "end": "1725279"
  },
  {
    "text": "null and this is going to give me a warning but I can promise that null isn't null and I've now tricked the",
    "start": "1725279",
    "end": "1731519"
  },
  {
    "text": "compiler but we can obviously see here that this is not true right we know that",
    "start": "1731519",
    "end": "1736840"
  },
  {
    "text": "this is null here this forgiving operator is just a way for us to tell the compiler I don't care so be very",
    "start": "1736840",
    "end": "1744279"
  },
  {
    "text": "careful when you use this instead try to handle your null references like this",
    "start": "1744279",
    "end": "1750720"
  },
  {
    "text": "here and if you enable the nullable reference types you can either do that in the Cs prod file by doing nullable",
    "start": "1750720",
    "end": "1757720"
  },
  {
    "text": "enabled you can go ahead and do it for the entire class or the entire file by saying nullable",
    "start": "1757720",
    "end": "1764279"
  },
  {
    "text": "enable if you have a method that you don't really want to care about right now you could say that I want to",
    "start": "1764279",
    "end": "1771720"
  },
  {
    "text": "disable this for this particular method and that would disable it for the main",
    "start": "1771720",
    "end": "1777360"
  },
  {
    "text": "method so you can use this compiler directive to instruct the compiler how to look at the nullable",
    "start": "1777360",
    "end": "1783679"
  },
  {
    "text": "references all right so let's see here um these n",
    "start": "1783679",
    "end": "1789480"
  },
  {
    "text": "reference types are really amazing and one of the things that you can do as well is that you could create",
    "start": "1789480",
    "end": "1797640"
  },
  {
    "text": "these words warnings as errors right so you can instruct the compiler to look at",
    "start": "1797640",
    "end": "1803039"
  },
  {
    "text": "all the warnings in the application as errors and if you do that I I've heard",
    "start": "1803039",
    "end": "1808559"
  },
  {
    "text": "about people doing this and it's really amazing because I have a lot of errors in my applications and I don't always",
    "start": "1808559",
    "end": "1814240"
  },
  {
    "text": "tend to fix them so if you treat warnings as errors your build pipeline is going to fail in this case here if we",
    "start": "1814240",
    "end": "1821279"
  },
  {
    "text": "have uninitialized values or if we have um Properties or or accessing properties",
    "start": "1821279",
    "end": "1827559"
  },
  {
    "text": "that could be null so this is a nice guard against nulls and a good way to",
    "start": "1827559",
    "end": "1832600"
  },
  {
    "text": "make sure that you don't have any problems when you run the application so I do believe that this is",
    "start": "1832600",
    "end": "1839440"
  },
  {
    "text": "a really great addition to the language and one of the things that they they they're promoting or they're trying",
    "start": "1839440",
    "end": "1845919"
  },
  {
    "text": "to get rid of null nulls completely there are different ways of looking at creating or using nulls right we could",
    "start": "1845919",
    "end": "1853240"
  },
  {
    "text": "be using something like maybe or either from other programming languages F SHP",
    "start": "1853240",
    "end": "1859000"
  },
  {
    "text": "has the maybe um cotlin has either and you can use that and I believe that",
    "start": "1859000",
    "end": "1865960"
  },
  {
    "text": "that's coming to C as well sometime in the future but for now this is the next best thing to not having nulls at",
    "start": "1865960",
    "end": "1873279"
  },
  {
    "text": "all the next really great feature added to C 8 is asynchronous",
    "start": "1873279",
    "end": "1879039"
  },
  {
    "text": "streams now this language feature allows us to consume a stream of",
    "start": "1879039",
    "end": "1885480"
  },
  {
    "text": "data and consume the items as they arrive to the application let's look at an example of",
    "start": "1885480",
    "end": "1892559"
  },
  {
    "text": "how that works I will assume that you understand a little bit about asynchronous",
    "start": "1892559",
    "end": "1898320"
  },
  {
    "text": "programming this here is a top level statement it's a it's a new the new project temp the new uh C project or net",
    "start": "1898320",
    "end": "1905840"
  },
  {
    "text": "project templates I can show you that soon as well but the first thing you'll see here as a I have a normal method",
    "start": "1905840",
    "end": "1912720"
  },
  {
    "text": "here I have the async keyword to indicate that this here is an asynchronous method but without the",
    "start": "1912720",
    "end": "1918360"
  },
  {
    "text": "await keyword that means nothing at all and then I use this new thing you",
    "start": "1918360",
    "end": "1924480"
  },
  {
    "text": "might have seen async used together we tasked before but now I have this new thing called I async",
    "start": "1924480",
    "end": "1930279"
  },
  {
    "text": "innumerable this here indicates that I will have a stream of data that's asynchronously going to retrieve strings",
    "start": "1930279",
    "end": "1938320"
  },
  {
    "text": "that are going to be returned back to whoever calls this method read lines async it's going to be returned to the",
    "start": "1938320",
    "end": "1944760"
  },
  {
    "text": "caller as that data arrives so the async innumerable indicates that the data will",
    "start": "1944760",
    "end": "1950559"
  },
  {
    "text": "be screamed back to whoever consumes this method where the the real magic happens",
    "start": "1950559",
    "end": "1957519"
  },
  {
    "text": "here again it's this yield keyword this here tells the iterator that there's now",
    "start": "1957519",
    "end": "1963440"
  },
  {
    "text": "a new item to process if you've ever tried to use the yield keyword before together with the",
    "start": "1963440",
    "end": "1970080"
  },
  {
    "text": "Asing keyword you know that it hasn't been possible and now we can construct",
    "start": "1970080",
    "end": "1975279"
  },
  {
    "text": "this stream of data where we used the the yield keyword together with its I async inumerable",
    "start": "1975279",
    "end": "1981440"
  },
  {
    "text": "and then just to so fill it in with some blanks here we are opening a file we're",
    "start": "1981440",
    "end": "1986840"
  },
  {
    "text": "opening a stream to a file on disk I'm using this also new language feature from C 8 called using declaration you",
    "start": "1986840",
    "end": "1994080"
  },
  {
    "text": "see that I have this using block here it ends with a semicolon what that means is that when this method ends here at the",
    "start": "1994080",
    "end": "2000559"
  },
  {
    "text": "bottom this is going to be disposed if you add the await keyword in",
    "start": "2000559",
    "end": "2005919"
  },
  {
    "text": "front of the using block that's using the asynchronous",
    "start": "2005919",
    "end": "2011080"
  },
  {
    "text": "Disposable all right and now this is where the magic happens each item is",
    "start": "2011080",
    "end": "2017000"
  },
  {
    "text": "retrieved asynchronously we read a line from disk we do that asynchronously and when we",
    "start": "2017000",
    "end": "2023519"
  },
  {
    "text": "read something or load something asynchronously the control is return back to whoever consumes this method and",
    "start": "2023519",
    "end": "2030120"
  },
  {
    "text": "they can do whatever they want and to make it a little bit more interesting I added a a weight fast the",
    "start": "2030120",
    "end": "2038200"
  },
  {
    "text": "delay here just to make it a little bit longer to because reading from my disc",
    "start": "2038200",
    "end": "2043679"
  },
  {
    "text": "here I have an a really fast SSD drive loading a small text file to is really",
    "start": "2043679",
    "end": "2049118"
  },
  {
    "text": "quick okay so this is nice how do I then consume this well if you if you'd have",
    "start": "2049119",
    "end": "2056200"
  },
  {
    "text": "to guess you probably might have guessed that you use a normal for each",
    "start": "2056200",
    "end": "2061679"
  },
  {
    "text": "Loop the difference though is that you have the await keyword in front of the for each Loop okay so you say await for",
    "start": "2061679",
    "end": "2070000"
  },
  {
    "text": "each element that I retrieve from the method get elements let's have a look at what this",
    "start": "2070000",
    "end": "2076679"
  },
  {
    "text": "looks like just going to have a look at slido so we don't have any questions okay so this method is is",
    "start": "2076679",
    "end": "2084760"
  },
  {
    "text": "fairly it's almost identical except I would just point this to a different file I have async I async innumerable",
    "start": "2084760",
    "end": "2092118"
  },
  {
    "text": "and this entire this is a program. CS file it's using this new top level statement",
    "start": "2092119",
    "end": "2097839"
  },
  {
    "text": "you no longer have to do the public static void main stuff it's all generated behind the scenes for us so",
    "start": "2097839",
    "end": "2104359"
  },
  {
    "text": "basically you can create a new program.cs file and just start writing code here from top to",
    "start": "2104359",
    "end": "2109680"
  },
  {
    "text": "bottom you also uh this is a side note you also see that I don't have any usings or anything like that but I can",
    "start": "2109680",
    "end": "2116079"
  },
  {
    "text": "still use system.io I can use uh system. collection I believe this lives",
    "start": "2116079",
    "end": "2121160"
  },
  {
    "text": "in uh and I can use a whole lot of others things that's because net 6 introduced something called implicit",
    "start": "2121160",
    "end": "2127240"
  },
  {
    "text": "using go into the Cs project file if you add this to a doet 6 project",
    "start": "2127240",
    "end": "2134960"
  },
  {
    "text": "well this is turned on by default implicit usings means that it's going to try and include everything that",
    "start": "2134960",
    "end": "2140839"
  },
  {
    "text": "you're using without you having to use any using statements which is a nice feature as well it also enables nullable",
    "start": "2140839",
    "end": "2147280"
  },
  {
    "text": "reference types by default all right back to the asynchron streams this method is almost identical",
    "start": "2147280",
    "end": "2153760"
  },
  {
    "text": "as I just mentioned I use this using stream here uh it's a using declaration",
    "start": "2153760",
    "end": "2158880"
  },
  {
    "text": "I load each line separately here I say await each line that I load here then I just have this fake thing to say that I",
    "start": "2158880",
    "end": "2166440"
  },
  {
    "text": "I do something with the data let's say that I have to process this it takes 500 milliseconds it's just to make it a",
    "start": "2166440",
    "end": "2172000"
  },
  {
    "text": "little bit more interesting in order for me to consume this now I have to say uh await reach",
    "start": "2172000",
    "end": "2180200"
  },
  {
    "text": "bar uh line in get lyrics and intellisense in vs code and",
    "start": "2180200",
    "end": "2187119"
  },
  {
    "text": "top level statements is not the best so far so let's do console. right line and line",
    "start": "2187119",
    "end": "2194240"
  },
  {
    "text": "here the idea here is that each line that I get out of this for each Loop we",
    "start": "2194240",
    "end": "2199520"
  },
  {
    "text": "have to await that if we had the await keyword in front of get lyrics like this",
    "start": "2199520",
    "end": "2204960"
  },
  {
    "text": "it would mean that all the data was loaded in one chunk right but now we",
    "start": "2204960",
    "end": "2210520"
  },
  {
    "text": "want to as synchronously retrieve each item if I save this and I go into my",
    "start": "2210520",
    "end": "2217079"
  },
  {
    "text": "windows ter teral here and I do net run this here is now going to build the",
    "start": "2217079",
    "end": "2224160"
  },
  {
    "text": "application it's going to run it and it's going to stream this data from that",
    "start": "2224160",
    "end": "2229480"
  },
  {
    "text": "file and maybe you you recognize this song all",
    "start": "2229480",
    "end": "2235799"
  },
  {
    "text": "right so that's a really handy feature of course in a console application that",
    "start": "2237280",
    "end": "2243760"
  },
  {
    "text": "doesn't really make a lot of sense but it's a good way of just is isolating exactly what",
    "start": "2243760",
    "end": "2249760"
  },
  {
    "text": "happens right it shows you how you can read one line at a time you could search",
    "start": "2249760",
    "end": "2254839"
  },
  {
    "text": "for something you could for instance then um stop loading it if you have a break here right if you if you just",
    "start": "2254839",
    "end": "2261880"
  },
  {
    "text": "break here it will only load one of the lines so it won't continue loading all",
    "start": "2261880",
    "end": "2268079"
  },
  {
    "text": "of it it means that you have a a smaller memory footprint it also means that it's going to to be a little bit faster",
    "start": "2268079",
    "end": "2277160"
  },
  {
    "text": "um so if you have for instance a an asp.net",
    "start": "2279760",
    "end": "2286240"
  },
  {
    "text": "application and you use these asynchron streams in your actions of course the data wouldn't be",
    "start": "2286240",
    "end": "2293040"
  },
  {
    "text": "streamed back to the color of that website it will be streamed back to your web server and then when you have the",
    "start": "2293040",
    "end": "2298839"
  },
  {
    "text": "result you can aggregate that and work with it with that and then return it back to to whoever it calls your website",
    "start": "2298839",
    "end": "2305520"
  },
  {
    "text": "but if you use something like Blazer or if you have for instance signal r or",
    "start": "2305520",
    "end": "2310839"
  },
  {
    "text": "if you build a Windows application this here can be a really powerful feature to",
    "start": "2310839",
    "end": "2316400"
  },
  {
    "text": "get data into the application very quickly all",
    "start": "2316400",
    "end": "2322400"
  },
  {
    "text": "right we do have one question uh does the method return um as soon on",
    "start": "2322400",
    "end": "2331880"
  },
  {
    "text": "a numeral does the method return let's see here um I believe",
    "start": "2331880",
    "end": "2337480"
  },
  {
    "text": "believe the question is if it starts reading the next line before whoever",
    "start": "2337480",
    "end": "2343079"
  },
  {
    "text": "processes this handles it and the question is is no so it gets one",
    "start": "2343079",
    "end": "2349640"
  },
  {
    "text": "line and you can process that so it loads the line from Get lyrics that",
    "start": "2349640",
    "end": "2355920"
  },
  {
    "text": "takes 500 milliseconds because we have a weight here and what happens internally is the same as a normal iterator so it's",
    "start": "2355920",
    "end": "2362880"
  },
  {
    "text": "going to call get next item or load next item or whatever that's called in the implementation",
    "start": "2362880",
    "end": "2368040"
  },
  {
    "text": "it's next or get next if you do break here it won't go",
    "start": "2368040",
    "end": "2373680"
  },
  {
    "text": "ahead and load anything other than the line you just processed and when you break here",
    "start": "2373680",
    "end": "2380760"
  },
  {
    "text": "there's a lot of things happening internally here when you do break here when this for each look ends remember",
    "start": "2380760",
    "end": "2387079"
  },
  {
    "text": "this here uses this using statement that means that it has to go back and clean that up so when it breaks out of this",
    "start": "2387079",
    "end": "2393760"
  },
  {
    "text": "it's going to then go back to this state machine generated for this method it's very complex what happens internally",
    "start": "2393760",
    "end": "2400800"
  },
  {
    "text": "which is really good because we don't want to care about that we simply want to consume this as a stream of",
    "start": "2400800",
    "end": "2407560"
  },
  {
    "text": "data right hopefully that answers the question otherwise I can elaborate more",
    "start": "2407560",
    "end": "2413520"
  },
  {
    "text": "after this talk now there's one more really great",
    "start": "2413520",
    "end": "2421000"
  },
  {
    "text": "feature added to C and they started off with adding this in c 7 but at that",
    "start": "2421000",
    "end": "2429880"
  },
  {
    "text": "point the introduction of pattern matching was just a very basic",
    "start": "2429880",
    "end": "2435839"
  },
  {
    "text": "implementation it could match on an object you could use it with a normal switch the whole idea with pattern",
    "start": "2435839",
    "end": "2442319"
  },
  {
    "text": "matching is that you look at traits of an object you identify for instance in this",
    "start": "2442319",
    "end": "2449000"
  },
  {
    "text": "case I have this pile of fruit here some fruit is edible some fruit needs to be peeled some fruits are green yellow and",
    "start": "2449000",
    "end": "2456480"
  },
  {
    "text": "so forth all of those things are attributes of those",
    "start": "2456480",
    "end": "2461520"
  },
  {
    "text": "objects and of course we've been able to match on attributes and and properties",
    "start": "2461520",
    "end": "2466839"
  },
  {
    "text": "and all of that in Prior versions as well in fact you've been able to do this in c 1 through C",
    "start": "2466839",
    "end": "2474520"
  },
  {
    "text": "6 but it wasn't really as intuitive as you would have",
    "start": "2474520",
    "end": "2479920"
  },
  {
    "text": "wanted for instance matching on a type and an attribute in C one to six you",
    "start": "2479920",
    "end": "2485960"
  },
  {
    "text": "would first have to get the type compare that to the type you're looking for and then you you try to access one of the",
    "start": "2485960",
    "end": "2493280"
  },
  {
    "text": "properties if this property only lives on the type you're looking for you'd first have to cast it and you know the",
    "start": "2493280",
    "end": "2500400"
  },
  {
    "text": "code becomes uh quite nasty to be honest",
    "start": "2500400",
    "end": "2505440"
  },
  {
    "text": "and in c 7 they sort of improved on this they added the capability of using the",
    "start": "2505440",
    "end": "2511280"
  },
  {
    "text": "switch the normal switch block and then use a first version of pattern matching",
    "start": "2511280",
    "end": "2517400"
  },
  {
    "text": "where you use a type pattern to say in the case of this being an Apple so this line here is sort of identical to to",
    "start": "2517400",
    "end": "2525200"
  },
  {
    "text": "these two up here at the top what's interesting is that it",
    "start": "2525200",
    "end": "2531560"
  },
  {
    "text": "matches on the type it captures that type as the correct instance or as the",
    "start": "2531560",
    "end": "2537359"
  },
  {
    "text": "correct type so inside this this case here you can use it as the concrete type",
    "start": "2537359",
    "end": "2543880"
  },
  {
    "text": "that you're you're matching on but of course this here could have been",
    "start": "2543880",
    "end": "2550319"
  },
  {
    "text": "improved upon I don't really think there there's a few more characters here than the the",
    "start": "2550319",
    "end": "2556160"
  },
  {
    "text": "example above and I don't think this this reads as nice as the if statement so while it was a good introduction of",
    "start": "2556160",
    "end": "2563400"
  },
  {
    "text": "of matching on a type maybe that wasn't really good enough that's why C 8 introduces",
    "start": "2563400",
    "end": "2570960"
  },
  {
    "text": "something called a switch expression the switch expression is sort",
    "start": "2570960",
    "end": "2576280"
  },
  {
    "text": "of a new way of of writing this this line of code here you have an object",
    "start": "2576280",
    "end": "2581920"
  },
  {
    "text": "that you want to create patterns for and based on those different",
    "start": "2581920",
    "end": "2587400"
  },
  {
    "text": "patterns you want to do certain things you fill this this switch body with",
    "start": "2587400",
    "end": "2592599"
  },
  {
    "text": "Expressions which is why it's called a switch expression okay so you first have your",
    "start": "2592599",
    "end": "2598800"
  },
  {
    "text": "input which could be your fruit or your your person or whatever you want to do right and then you fill this with your",
    "start": "2598800",
    "end": "2608480"
  },
  {
    "text": "your patterns this here is a type pattern and oops and this here is what",
    "start": "2608480",
    "end": "2613960"
  },
  {
    "text": "is returned when the pattern is a match you can see here we have the expression",
    "start": "2613960",
    "end": "2619000"
  },
  {
    "text": "here which says that everything to the right here is going to be returned and it's going to be stored in this",
    "start": "2619000",
    "end": "2624240"
  },
  {
    "text": "variable it could be a string it doesn't have to be could be any type of object",
    "start": "2624240",
    "end": "2629319"
  },
  {
    "text": "really this here is the type pattern this here the underscore is the discard discard has also been around for a",
    "start": "2629319",
    "end": "2636240"
  },
  {
    "text": "little while it allows you to say that I don't care in this case it's a default expression so whenever it couldn't match",
    "start": "2636240",
    "end": "2643040"
  },
  {
    "text": "on anything else maybe it's an orange maybe it's something else then it would match on",
    "start": "2643040",
    "end": "2648400"
  },
  {
    "text": "that so what patterns are there in C 8 and N that will make our lives so much",
    "start": "2648400",
    "end": "2656440"
  },
  {
    "text": "easier well there's quite a few of them and we're going to try and look at as many as possible before my time runs out",
    "start": "2656440",
    "end": "2663800"
  },
  {
    "text": "we have something called a type pattern we have a positional pattern we have a property pattern we have a tupal pattern",
    "start": "2663800",
    "end": "2669880"
  },
  {
    "text": "relational pattern we have and patterns or patterns parenthesized patterns negated not patterns and best of all",
    "start": "2669880",
    "end": "2677599"
  },
  {
    "text": "something called recursive patterns don't worry we're going to look at a few of these soon so you don't have to remember all of them um the recursive",
    "start": "2677599",
    "end": "2684440"
  },
  {
    "text": "patterns allows you to use one or more of these together which with each other",
    "start": "2684440",
    "end": "2689720"
  },
  {
    "text": "for instance let's say that I want to match on a type as well as checking a property I could then use the type",
    "start": "2689720",
    "end": "2695800"
  },
  {
    "text": "pattern as well as the property pattern let's say that I want to check a type property and compare that to",
    "start": "2695800",
    "end": "2703280"
  },
  {
    "text": "something else so you can start building these really complex Expressions but the more complex they",
    "start": "2703280",
    "end": "2710599"
  },
  {
    "text": "get the harder your code will be to read so you should be quite careful with with",
    "start": "2710599",
    "end": "2716119"
  },
  {
    "text": "having two complex patterns as well an example here is is the property",
    "start": "2716119",
    "end": "2721960"
  },
  {
    "text": "pattern for instance I have this switch expression I have the PPE pattern here and then I",
    "start": "2721960",
    "end": "2728960"
  },
  {
    "text": "want to match on a particular property okay so I could say that the color needs to be green and then this",
    "start": "2728960",
    "end": "2736240"
  },
  {
    "text": "here is what's returned after that okay so what about if we just jump",
    "start": "2736240",
    "end": "2741640"
  },
  {
    "text": "over to visual studio and I'll just show you this instead we'll uh we'll do this but in a",
    "start": "2741640",
    "end": "2749240"
  },
  {
    "text": "completely new project let me add a new console application I'm going to make sure that I don't click VB",
    "start": "2749240",
    "end": "2757240"
  },
  {
    "text": "and let me show you here so",
    "start": "2758160",
    "end": "2762240"
  },
  {
    "text": "uh that's called c c 9 is going to be the new",
    "start": "2763720",
    "end": "2769319"
  },
  {
    "text": "project and here we can see that I'm on net 6 doesn't matter you can be onnet 5 as well uh we're not there's not going",
    "start": "2769319",
    "end": "2776040"
  },
  {
    "text": "to be any new patterns in in net 6 or that require net 6 that we're going to use here so I'm going to create this",
    "start": "2776040",
    "end": "2782200"
  },
  {
    "text": "here and you'll immediately see one thing this is the top level statement",
    "start": "2782200",
    "end": "2787240"
  },
  {
    "text": "this is the completely new project structure you have your program file you don't have to do the the um the public",
    "start": "2787240",
    "end": "2795440"
  },
  {
    "text": "static void main stuff anymore so let me bring over a file here I'm going to copy this file called test results it's a",
    "start": "2795440",
    "end": "2801559"
  },
  {
    "text": "simple class that that gives me the number of tests of a test result let's say that this is a test for a university",
    "start": "2801559",
    "end": "2808480"
  },
  {
    "text": "course or whatever uh if it's valid how many times you've attempted the test the date and so forth and then we have a",
    "start": "2808480",
    "end": "2815559"
  },
  {
    "text": "deconstruct method which gives you how many days since you did the test and if",
    "start": "2815559",
    "end": "2820839"
  },
  {
    "text": "it's still valid you can see here that the deconstruct method doesn't have to return the properties it can return",
    "start": "2820839",
    "end": "2827319"
  },
  {
    "text": "whatever it doesn't have to match the exact amount of properties on your class this thing can return whatever right and",
    "start": "2827319",
    "end": "2835400"
  },
  {
    "text": "then we have a subass called negative and one called positive like a failure test and a EX succeeded test and then",
    "start": "2835400",
    "end": "2844359"
  },
  {
    "text": "let's see here then we have we want to go into our program file and we want to",
    "start": "2844359",
    "end": "2850680"
  },
  {
    "text": "construct a test result so let's do test result test",
    "start": "2850680",
    "end": "2856240"
  },
  {
    "text": "results equal to new test result but we want to do positive so if I want to",
    "start": "2856240",
    "end": "2863359"
  },
  {
    "text": "create a pattern for this I want to compute the outcome of my particular",
    "start": "2863359",
    "end": "2868480"
  },
  {
    "text": "test I could say VAR outcome is equal to test result and switch and then inside",
    "start": "2868480",
    "end": "2875680"
  },
  {
    "text": "this switch expression here here I can say that well if I don't know what the outcome is I'm going to say that it's",
    "start": "2875680",
    "end": "2882359"
  },
  {
    "text": "inconclusive inconclusive not available I can't spell",
    "start": "2882359",
    "end": "2888720"
  },
  {
    "text": "so let's go with not available um and now I can start adding",
    "start": "2888720",
    "end": "2893800"
  },
  {
    "text": "expressions in here to say that well what about if this is a positive test I want to say",
    "start": "2893800",
    "end": "2899640"
  },
  {
    "text": "positive okay and if I want to add a more granular pattern to say that well it's",
    "start": "2899640",
    "end": "2907079"
  },
  {
    "text": "it needs to be positive it needs to be positive why does this not work",
    "start": "2907079",
    "end": "2914280"
  },
  {
    "text": "positive and and the number of tests need to be",
    "start": "2914280",
    "end": "2919599"
  },
  {
    "text": "less than 10 if that's the case then I want to say um get colon",
    "start": "2919599",
    "end": "2928559"
  },
  {
    "text": "here positive less than",
    "start": "2928559",
    "end": "2933720"
  },
  {
    "text": "then so if you want to be more granular to Max on a particular pattern that pattern needs to go above the one that",
    "start": "2933720",
    "end": "2941400"
  },
  {
    "text": "kind of captures all of it like a normal switch statement right so if you were to add the the catch all for all positive",
    "start": "2941400",
    "end": "2947839"
  },
  {
    "text": "tests at the top here it would say that this here is already this will never be be reached right it's",
    "start": "2947839",
    "end": "2955640"
  },
  {
    "text": "unreachable okay so now we have two cool things here first we have the pattern",
    "start": "2956559",
    "end": "2961799"
  },
  {
    "text": "for a type pattern we have a property pattern to check the number of tests this this here is a relational pattern",
    "start": "2961799",
    "end": "2969880"
  },
  {
    "text": "which means that I can say I want the this integer to be uh less than 10 or",
    "start": "2969880",
    "end": "2975079"
  },
  {
    "text": "less or equal to 10 or this is the the disjunctive or",
    "start": "2975079",
    "end": "2981760"
  },
  {
    "text": "pattern or I want this to be be more than",
    "start": "2981760",
    "end": "2986720"
  },
  {
    "text": "20 okay as I mentioned before this can become rather hard to read if you have",
    "start": "2986880",
    "end": "2992960"
  },
  {
    "text": "some really complex complex um patterns here and of course you can you can use",
    "start": "2992960",
    "end": "3000200"
  },
  {
    "text": "the different patterns that you you have here so we have something called uh the",
    "start": "3000200",
    "end": "3005799"
  },
  {
    "text": "tupal pattern as well you can say that if you take this this test result and you deconstruct that uh you can use",
    "start": "3005799",
    "end": "3012559"
  },
  {
    "text": "something called a positional pattern so I could say let's see here I can't",
    "start": "3012559",
    "end": "3017960"
  },
  {
    "text": "remember exactly what the deconstruct method did um this is one of the the reasons that it can be a little bit",
    "start": "3017960",
    "end": "3024280"
  },
  {
    "text": "tricky to use this pattern so the first one is integer the second one is a Boolean so I could say uh 10 in",
    "start": "3024280",
    "end": "3031680"
  },
  {
    "text": "false and in two days I will have no idea whatever this means unless I do use something called",
    "start": "3031680",
    "end": "3042960"
  },
  {
    "text": "base I can use name parameters here as",
    "start": "3043160",
    "end": "3047760"
  },
  {
    "text": "well then it becomes a little bit more readable this here is a positional pattern it says that the first one needs",
    "start": "3048720",
    "end": "3056119"
  },
  {
    "text": "to be ex Cy 10 the second property needs to be false I can also say that I don't",
    "start": "3056119",
    "end": "3062520"
  },
  {
    "text": "care if the second one is true or false so they've added all of these",
    "start": "3062520",
    "end": "3068119"
  },
  {
    "text": "really great patterns like the this this property pattern the relational pattern",
    "start": "3068119",
    "end": "3074960"
  },
  {
    "text": "you can say that it needs to be and here instead and then of course it needs to be above 10 or or less and and less than",
    "start": "3074960",
    "end": "3084200"
  },
  {
    "text": "20 right so you can use the conjunct and pattern or disjunctive or pattern you can use the type pattern and this here",
    "start": "3084200",
    "end": "3091720"
  },
  {
    "text": "allows you to to match on what's outputed from that deconstruct method",
    "start": "3091720",
    "end": "3097119"
  },
  {
    "text": "what's interesting with this though is that this doesn't care if it's positive negative or some other type of test if",
    "start": "3097119",
    "end": "3103760"
  },
  {
    "text": "you also want to say that this needs to be a positive test you have to say that this this is a",
    "start": "3103760",
    "end": "3110000"
  },
  {
    "text": "positive test that we can pull apart and match to this exact Tuple or this exact",
    "start": "3110000",
    "end": "3117280"
  },
  {
    "text": "uh values so the different patterns that you can use are going to make it easier",
    "start": "3117280",
    "end": "3124359"
  },
  {
    "text": "for you to construct code that makes a little bit more sense and you can use these patterns not only with the switch",
    "start": "3124359",
    "end": "3131040"
  },
  {
    "text": "expression you can do the exact same same thing in an if block if test",
    "start": "3131040",
    "end": "3138240"
  },
  {
    "text": "results is this thing and it's going to enter that that",
    "start": "3138240",
    "end": "3144240"
  },
  {
    "text": "block of course the more you know the the more advanced you make your your",
    "start": "3144240",
    "end": "3149720"
  },
  {
    "text": "pattern the harder that is going to be to understand and maintain of course this here is a very simple one to",
    "start": "3149720",
    "end": "3156240"
  },
  {
    "text": "understand but you can make it as long as as you want and you just have to be careful to not make your code hard to",
    "start": "3156240",
    "end": "3164200"
  },
  {
    "text": "maintain okay so all of these different patterns",
    "start": "3164200",
    "end": "3170799"
  },
  {
    "text": "allow you to to uh express yourself in a new Manner and I do believe it's a",
    "start": "3170799",
    "end": "3175880"
  },
  {
    "text": "really good addition to to the language itself and and the different patterns available and with each version of C I",
    "start": "3175880",
    "end": "3182960"
  },
  {
    "text": "do believe we're going to see more patterns added in C 10 they're extending the property pattern so in this case",
    "start": "3182960",
    "end": "3189400"
  },
  {
    "text": "here if you had a if this was a reference type and you had a property that you wanted to match on that you",
    "start": "3189400",
    "end": "3195280"
  },
  {
    "text": "could just do Dot and then call that property this here is the Tuple",
    "start": "3195280",
    "end": "3200920"
  },
  {
    "text": "pattern you construct a tuple here for instance you have two or three or four or five values it needs to be minimum",
    "start": "3200920",
    "end": "3206960"
  },
  {
    "text": "two to create a tupal and then you can match on exactly that the discard here means that you don't care about the",
    "start": "3206960",
    "end": "3213760"
  },
  {
    "text": "value here is another example of a tupal pattern or sorry this here is a tupal",
    "start": "3213760",
    "end": "3220319"
  },
  {
    "text": "pattern and positional pattern it's kind of the same thing they're kind of indistinguishable all right so here you",
    "start": "3220319",
    "end": "3227280"
  },
  {
    "text": "say you have a type pattern and you want to match on this deconstructed type so these different ways of",
    "start": "3227280",
    "end": "3233240"
  },
  {
    "text": "expressing yourself hopefully makes it easier for you to construct code that makes it easier for you to determine",
    "start": "3233240",
    "end": "3239520"
  },
  {
    "text": "what types you're looking for and I've used this extensively in C and cotlin and Swift and",
    "start": "3239520",
    "end": "3246079"
  },
  {
    "text": "F so for C 9 we've already covered some of the language features there's one in",
    "start": "3246079",
    "end": "3251280"
  },
  {
    "text": "particular that's really interesting that I want to spend the last I believe we have five five six minutes left on",
    "start": "3251280",
    "end": "3257160"
  },
  {
    "text": "and that's record types which is one of those really great features as well that makes it easier for us to build up new",
    "start": "3257160",
    "end": "3264400"
  },
  {
    "text": "reference types and get a lot of functionality out of the box C 9 also",
    "start": "3264400",
    "end": "3270359"
  },
  {
    "text": "introduced what I showed you earlier with the init only Setters and the top level statements there were also a few few",
    "start": "3270359",
    "end": "3277280"
  },
  {
    "text": "pattern matching enhancements and the target type new expression and then a few language features that are more",
    "start": "3277280",
    "end": "3283000"
  },
  {
    "text": "targeted towards you know um more performant capable applications most of",
    "start": "3283000",
    "end": "3290160"
  },
  {
    "text": "the ones I haven't highlighted here in in in Black are the ones that I haven't used much at all in the real world",
    "start": "3290160",
    "end": "3296960"
  },
  {
    "text": "but some of the language features introduced in the languages are very particular for certain",
    "start": "3296960",
    "end": "3304359"
  },
  {
    "text": "applications like static Anonymous methods for instance is it's a performance Improvement if you use a lot",
    "start": "3304359",
    "end": "3310200"
  },
  {
    "text": "of of anonymous methods maybe that's one of those things that you you'd be very keen on",
    "start": "3310200",
    "end": "3315520"
  },
  {
    "text": "using so I want to show you the the record types it's a very nice language",
    "start": "3315520",
    "end": "3320920"
  },
  {
    "text": "feature let me go ahead and go into um to top level statement here or top level program this is the same application we",
    "start": "3320920",
    "end": "3327880"
  },
  {
    "text": "looked at earlier and just kind of comment out the code here um the record",
    "start": "3327880",
    "end": "3333079"
  },
  {
    "text": "types is a way to represent a reference type instead of saying class person for",
    "start": "3333079",
    "end": "3338960"
  },
  {
    "text": "instance and having a default Constructor public uh person and so",
    "start": "3338960",
    "end": "3345440"
  },
  {
    "text": "forth right instead of having to write all of that code why not just allow me to express that I want a person that",
    "start": "3345440",
    "end": "3352000"
  },
  {
    "text": "requires you to have a name as well as an age",
    "start": "3352000",
    "end": "3357200"
  },
  {
    "text": "and if I do this this here is now going to behind the scenes create a class this",
    "start": "3357200",
    "end": "3363880"
  },
  {
    "text": "class is going to have a lot of of really great functionality built in for",
    "start": "3363880",
    "end": "3369359"
  },
  {
    "text": "instance it's going to have a deconstruct method it's going to have the capability of copying this record",
    "start": "3369359",
    "end": "3375799"
  },
  {
    "text": "here because records are immutable it means that I can't change",
    "start": "3375799",
    "end": "3381240"
  },
  {
    "text": "the name after it's been created I can't change the age of this person after I've",
    "start": "3381240",
    "end": "3386319"
  },
  {
    "text": "created the record so an example of this is V Philip equal to new",
    "start": "3386319",
    "end": "3394078"
  },
  {
    "text": "person and let's enter my H here and now I'm capable of creating this this new",
    "start": "3396640",
    "end": "3402440"
  },
  {
    "text": "reference type here and if I try to change my name all of a sudden um I'm",
    "start": "3402440",
    "end": "3408440"
  },
  {
    "text": "not able to do that because this here is a an init only property it can only be",
    "start": "3408440",
    "end": "3414559"
  },
  {
    "text": "initialized with the type itself self if I want to get a completely new",
    "start": "3414559",
    "end": "3420520"
  },
  {
    "text": "person out of this here I'd have to say bar Philip",
    "start": "3420520",
    "end": "3425680"
  },
  {
    "text": "2 let's say Philip with",
    "start": "3425680",
    "end": "3432680"
  },
  {
    "text": "name and now this new thing here called the with expression allows me to grab",
    "start": "3436520",
    "end": "3442359"
  },
  {
    "text": "this person I created up here make a complete copy of that with this new name",
    "start": "3442359",
    "end": "3449920"
  },
  {
    "text": "set to it and I can even set the name to the same thing and what happens if we try to",
    "start": "3449920",
    "end": "3457119"
  },
  {
    "text": "compare Phillip with Philip 2 they have the same name and hopefully they have",
    "start": "3457119",
    "end": "3462839"
  },
  {
    "text": "the same age normally when you compare reference types it would compare their reference but with these record types",
    "start": "3462839",
    "end": "3469440"
  },
  {
    "text": "that we have here it's slightly different if I run this",
    "start": "3469440",
    "end": "3476078"
  },
  {
    "text": "it's going to say that they're the same because record types out of the box",
    "start": "3477119",
    "end": "3482640"
  },
  {
    "text": "provides value based equality it means that it's going to compare each property with the other properties we can even go",
    "start": "3482640",
    "end": "3490000"
  },
  {
    "text": "ahead and go into we can even go ahead and go into sharp laab and if I have the same code",
    "start": "3490000",
    "end": "3496119"
  },
  {
    "text": "here I have record person hopefully this is visible here I have the record person string name in ag the same thing I had",
    "start": "3496119",
    "end": "3502440"
  },
  {
    "text": "in Visual Studio code and this here this here here is all the generated code that",
    "start": "3502440",
    "end": "3507799"
  },
  {
    "text": "we get out of that we have this person class it's an i equatable of person it",
    "start": "3507799",
    "end": "3513079"
  },
  {
    "text": "gives us the equality checks it make sure that it's immutable this here generates so much code behind the scenes",
    "start": "3513079",
    "end": "3519599"
  },
  {
    "text": "to make it easier for us to work with this reference type so I do believe that these record",
    "start": "3519599",
    "end": "3525559"
  },
  {
    "text": "types are going to replace the way that we work with domain objects or domain models that we might have and if you",
    "start": "3525559",
    "end": "3532559"
  },
  {
    "text": "want to add methods to it you can just use them like in",
    "start": "3532559",
    "end": "3538039"
  },
  {
    "text": "class you can even add your own",
    "start": "3540319",
    "end": "3545599"
  },
  {
    "text": "properties that works as well so record works very much like a class because it",
    "start": "3547559",
    "end": "3553280"
  },
  {
    "text": "is a class behind the scenes this here is not immutable by default so just keep that in mind you",
    "start": "3553280",
    "end": "3560200"
  },
  {
    "text": "can add things to a record that's not immutable but these fields or properties",
    "start": "3560200",
    "end": "3565400"
  },
  {
    "text": "added to the primary Constructor this here is known as a primary Constructor that's",
    "start": "3565400",
    "end": "3570799"
  },
  {
    "text": "immutable those are immutable by default all right so we've looked at the",
    "start": "3570799",
    "end": "3576520"
  },
  {
    "text": "records we saw the unit only we've seen top level statements and the target type VI expression as",
    "start": "3576520",
    "end": "3581599"
  },
  {
    "text": "well and honestly in C 10 they didn't",
    "start": "3581599",
    "end": "3586880"
  },
  {
    "text": "introduce too many awesome features they focused on just getting I believe net 6",
    "start": "3586880",
    "end": "3592200"
  },
  {
    "text": "out of the window but they they did add record struct so if you if you have a struct you want to create that as a",
    "start": "3592200",
    "end": "3597559"
  },
  {
    "text": "record and get the same functionality sort of that you have on your record classes you can do that as well and they",
    "start": "3597559",
    "end": "3603599"
  },
  {
    "text": "did some some other interesting things as well like Global using directives you can go ahead and say that for instance",
    "start": "3603599",
    "end": "3611079"
  },
  {
    "text": "if you want uh I'll just show you if you want system. link to be available in your",
    "start": "3611079",
    "end": "3616880"
  },
  {
    "text": "entire application you can just add Global to the front of this here now this is doet 5 so it doesn't work but in",
    "start": "3616880",
    "end": "3622240"
  },
  {
    "text": "doet six it does so this here's a global using directive they've also added the support for doing file scoped namespace",
    "start": "3622240",
    "end": "3629559"
  },
  {
    "text": "declarations so that you can instead of having to wrap everything inside these CER brackets here you could just do",
    "start": "3629559",
    "end": "3636440"
  },
  {
    "text": "namespace semicolon and that's the namespace for the entire file so that works if you're targeting net",
    "start": "3636440",
    "end": "3644480"
  },
  {
    "text": "6 okay and then it's some property pattern improvements as well improved lambra",
    "start": "3645559",
    "end": "3651359"
  },
  {
    "text": "expressions and constant uh interpolated strings and some other features as well",
    "start": "3651359",
    "end": "3657599"
  },
  {
    "text": "so I mean if we just look at what's next um C 11 is going to add more patterns",
    "start": "3657599",
    "end": "3662760"
  },
  {
    "text": "and I guess from the new versions of C going forward that's what they're going to focus on more patterns more features",
    "start": "3662760",
    "end": "3669839"
  },
  {
    "text": "to make it easier for us to write code that makes more sense that's easier to maintain and requires less key strokes",
    "start": "3669839",
    "end": "3677880"
  },
  {
    "text": "basically I was going to add something called name of operators and finally hopefully we'll get generic attributes",
    "start": "3677880",
    "end": "3683839"
  },
  {
    "text": "that's been on the list for for a quite a few versions now and also looking at some other features that they might",
    "start": "3683839",
    "end": "3689880"
  },
  {
    "text": "add all right so um if you want to learn more about my",
    "start": "3689880",
    "end": "3696440"
  },
  {
    "text": "stuff if you want to learn more about C I have a bunch of of plural set courses please go ahead and check that out and",
    "start": "3696440",
    "end": "3701680"
  },
  {
    "text": "if you have any questions after this talk um I'll have a look at slido if there's anything other than that we'll",
    "start": "3701680",
    "end": "3708280"
  },
  {
    "text": "um we'll close for now and I want to thank everyone for attending the session I'm available on Twitter um please do",
    "start": "3708280",
    "end": "3715440"
  },
  {
    "text": "Reach Out if you have any questions or ask",
    "start": "3715440",
    "end": "3720680"
  }
]