[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "um so me talk sixty minutes let's see we",
    "start": "30",
    "end": "7740"
  },
  {
    "text": "can do it I've got a ridiculous number of slides there's a lot of stuff to cover in here and it's mostly code but",
    "start": "7740",
    "end": "13950"
  },
  {
    "text": "I'll start gently I'll break you in gently let the caffeine kick in a bit",
    "start": "13950",
    "end": "20100"
  },
  {
    "text": "more so I share so the title of this talk is not a particularly sexy title",
    "start": "20100",
    "end": "26430"
  },
  {
    "start": "21000",
    "end": "63000"
  },
  {
    "text": "it's a it's a depending on what your background is it's either an incredibly obscure reference or a comfortable",
    "start": "26430",
    "end": "33210"
  },
  {
    "text": "computer science reference to this book here structure and interpretation of computer programs by Abelson and Sussman",
    "start": "33210",
    "end": "40550"
  },
  {
    "text": "published originally in the seventies based on scheme all kinds of wonderful stuff in here but partly it was the",
    "start": "40550",
    "end": "49410"
  },
  {
    "text": "title because I think for me not enough people focus on when we're talking about",
    "start": "49410",
    "end": "54660"
  },
  {
    "text": "unit tests they don't refocus on the structure they just say we have unit tests and they're and what about the",
    "start": "54660",
    "end": "61320"
  },
  {
    "text": "interpretation the idea is to quote them programs must be written for people to read it only incidentally for machines",
    "start": "61320",
    "end": "67710"
  },
  {
    "start": "63000",
    "end": "123000"
  },
  {
    "text": "to execute there is this idea of people are your target audience there for",
    "start": "67710",
    "end": "73470"
  },
  {
    "text": "interpretation and how do people read tests well honestly looking at some",
    "start": "73470",
    "end": "78930"
  },
  {
    "text": "tests in production you kind of think people read tests as rarely as possible because because honestly it's just like",
    "start": "78930",
    "end": "85290"
  },
  {
    "text": "you know what I have no idea what this does I hope it never fails because if it",
    "start": "85290",
    "end": "90990"
  },
  {
    "text": "fails I will have to do one of two things one of which is you know put",
    "start": "90990",
    "end": "96689"
  },
  {
    "text": "ignore on it or comment it out or yeah and come back to it later you know that one yeah we'll just take it we'll come",
    "start": "96689",
    "end": "103020"
  },
  {
    "text": "back and fix that one later so you know it was a sort of amazing backlog of dead",
    "start": "103020",
    "end": "108630"
  },
  {
    "text": "tests yeah okay so there's that approach or I'm going to spend a lot of time trying to understand it and so there's",
    "start": "108630",
    "end": "115320"
  },
  {
    "text": "this idea of admitting that interpretation and the communication are first-class citizens when you're writing",
    "start": "115320",
    "end": "121680"
  },
  {
    "text": "a test and here's our target audience jeromy's are us in German I wrote kind",
    "start": "121680",
    "end": "130890"
  },
  {
    "start": "123000",
    "end": "180000"
  },
  {
    "text": "of the book is about 10 years ago a quite a hefty book just over 10 years ago yeah xunit test patterns",
    "start": "130890",
    "end": "137910"
  },
  {
    "text": "it's about unit tests it's loads of different techniques practices ideas so",
    "start": "137910",
    "end": "145180"
  },
  {
    "text": "on it's about a thousand pages so if you have the hard copy you can actually use it as a weapon okay you can add this is",
    "start": "145180",
    "end": "152650"
  },
  {
    "text": "you can convince your colleagues of the rightness of your true path for testing by actually just beating them around you",
    "start": "152650",
    "end": "158799"
  },
  {
    "text": "don't need you don't need all that nonsense of having to have a reasonable rational argument to put to them yeah",
    "start": "158799",
    "end": "165450"
  },
  {
    "text": "however I managed to get for 497 things every programmer should know I managed",
    "start": "165450",
    "end": "171579"
  },
  {
    "text": "to get gerald down to two pages which are thoughts you know yeah good a good reduction right test for people there",
    "start": "171579",
    "end": "178780"
  },
  {
    "text": "you go that's your target audience who should be writing the test sport for the person trying to understand your code",
    "start": "178780",
    "end": "183910"
  },
  {
    "start": "180000",
    "end": "271000"
  },
  {
    "text": "now what is interesting here is what he says for the person trying to understand your code he means your production code",
    "start": "183910",
    "end": "189970"
  },
  {
    "text": "you don't write tests for the people trying to understand your tests your write tests for people trying to",
    "start": "189970",
    "end": "195340"
  },
  {
    "text": "understand the code that is being tested and that's a there's a very subtle distinction there but a very important",
    "start": "195340",
    "end": "200980"
  },
  {
    "text": "one which means that you need to be very careful with certain habits that you may",
    "start": "200980",
    "end": "206799"
  },
  {
    "text": "have it turns out that test code and production code are in many ways quite different they serve different purposes",
    "start": "206799",
    "end": "213639"
  },
  {
    "text": "and they also have different habits some of the practices that you may think are",
    "start": "213639",
    "end": "219060"
  },
  {
    "text": "sort of sacred and and hallowed for production code don't necessarily apply",
    "start": "219060",
    "end": "224769"
  },
  {
    "text": "to test code but it also means and this is quite important where you need to avoid certain refactorings if I am",
    "start": "224769",
    "end": "232480"
  },
  {
    "text": "trying to understand the code that is being executed one of the things I should not do is factor out the",
    "start": "232480",
    "end": "238419"
  },
  {
    "text": "duplicate code across the test that actually invokes the thing that I am trying to execute I have seen that in",
    "start": "238419",
    "end": "245049"
  },
  {
    "text": "production or in tests and and and the this group did such a good refactoring",
    "start": "245049",
    "end": "250450"
  },
  {
    "text": "that when you looked at their tests you had absolutely no idea what was going on you had we set up the test and then we",
    "start": "250450",
    "end": "256959"
  },
  {
    "text": "run the tests and then we do the cleaner and it's okay so well yes but what are you actually testing all that code is",
    "start": "256959",
    "end": "262690"
  },
  {
    "text": "down that's over here we factored it out because it was p-ting is like yes that's the bit I need",
    "start": "262690",
    "end": "268020"
  },
  {
    "text": "to see the bit that's repeating that should be in the test because this is documentation show me how it's used",
    "start": "268020",
    "end": "273780"
  },
  {
    "start": "271000",
    "end": "300000"
  },
  {
    "text": "otherwise you end up looking at it from another point of view imagine you're reading a manual or",
    "start": "273780",
    "end": "278820"
  },
  {
    "text": "imagine you're reading a book and it's showing you how to use how to work with",
    "start": "278820",
    "end": "284820"
  },
  {
    "text": "something or yeah the classic getting started stuff you downloading a framework you want that getting started",
    "start": "284820",
    "end": "290970"
  },
  {
    "text": "page it's no good if the getting started page says this is like the code we saw above go back up you want to see it",
    "start": "290970",
    "end": "296730"
  },
  {
    "text": "there and then that's what you're reading at the moment so you need to understand how people read um we also",
    "start": "296730",
    "end": "304500"
  },
  {
    "start": "300000",
    "end": "372000"
  },
  {
    "text": "need to look at language Alistair Coburn made this observation 2008 actually here",
    "start": "304500",
    "end": "310230"
  },
  {
    "text": "is building very many people say TDD when they really mean I have good unit",
    "start": "310230",
    "end": "317070"
  },
  {
    "text": "tests I have guts often we substitute one term for another perhaps because",
    "start": "317070",
    "end": "324420"
  },
  {
    "text": "we're not aware and perhaps because naming is hard perhaps because a term becomes really sexy you know it's just like yeah we're",
    "start": "324420",
    "end": "331410"
  },
  {
    "text": "doing test-driven development as opposed to we're kind of doing more unit tests than we used to",
    "start": "331410",
    "end": "336560"
  },
  {
    "text": "yeah so you're gonna put that on your CV you're gonna say yes the strategy we employed at this company was to do your",
    "start": "336560",
    "end": "342390"
  },
  {
    "text": "unit test than we were doing before it doesn't say we use TDD there you go it's buzzword friendly actually that said",
    "start": "342390",
    "end": "349770"
  },
  {
    "text": "more tests than before mttb you know let's try that one so the problem is we",
    "start": "349770",
    "end": "356430"
  },
  {
    "text": "end up repurposing a term or choosing an adjacent term and it changes its meaning so a lot of people they're not doing TDD",
    "start": "356430",
    "end": "363330"
  },
  {
    "text": "and that's absolutely fine what they're doing is good unit test better unit tests and they were doing before and",
    "start": "363330",
    "end": "368760"
  },
  {
    "text": "that's great and so it's this idea I",
    "start": "368760",
    "end": "374790"
  },
  {
    "start": "372000",
    "end": "396000"
  },
  {
    "text": "love this idea guts so I've been very keen on this to good unit test guts and if you happen to be a German speaker I",
    "start": "374790",
    "end": "381030"
  },
  {
    "text": "strongly recommend this because you can now go around saying yeah how do you want your test I wanted to be good because you don't bad test do you yeah I",
    "start": "381030",
    "end": "388710"
  },
  {
    "text": "don't left I I want good tests okay so this is really simple you can make a very strong case for it so let's start",
    "start": "388710",
    "end": "398940"
  },
  {
    "start": "396000",
    "end": "823000"
  },
  {
    "text": "off with this idea of you test so a long time ago in a galaxy far far away I used to write for",
    "start": "398940",
    "end": "404020"
  },
  {
    "text": "the register technical stuff I focused on units a unit test is a test of",
    "start": "404020",
    "end": "410050"
  },
  {
    "text": "behavior whose success or failure is wholly determined by the correctness of the test and the correctness of the unit",
    "start": "410050",
    "end": "416409"
  },
  {
    "text": "under test in other words if you test passes is because of the test code and",
    "start": "416409",
    "end": "421479"
  },
  {
    "text": "the thing that you're testing if it fails it's because of the test code and the thing that you're testing us all surely that's obvious and not so much",
    "start": "421479",
    "end": "428189"
  },
  {
    "text": "because there are things and reasons that our tests may fail that have",
    "start": "428189",
    "end": "434229"
  },
  {
    "text": "nothing to do with correctness of code so if we imagine our code here's the",
    "start": "434229",
    "end": "441400"
  },
  {
    "text": "stuff here is the call I'm going to be very generous and optimistic look how",
    "start": "441400",
    "end": "447879"
  },
  {
    "text": "much is the unit testable the original diagram had it as a kind of like a tiny thing that was kind of like you know",
    "start": "447879",
    "end": "452889"
  },
  {
    "text": "proportionately like the Earth's core or something it's like no now I thought you know I got a going to conference being positive so this is all the stuff that",
    "start": "452889",
    "end": "459339"
  },
  {
    "text": "is unit testable awesome in other words it has no external dependencies this is the key point that's sometimes what you",
    "start": "459339",
    "end": "465969"
  },
  {
    "text": "have here is if this code works it works because of what you can see now there",
    "start": "465969",
    "end": "471520"
  },
  {
    "text": "are obviously certain Givens basic Givens the world works ok that's a basic",
    "start": "471520",
    "end": "477639"
  },
  {
    "text": "given if you have a hardware bug then your problem is not your unit tests if your virtual machine is completely",
    "start": "477639",
    "end": "484990"
  },
  {
    "text": "screwed up then the problem is not your unit tests ok but we're going to say given that the platform on which you're",
    "start": "484990",
    "end": "491439"
  },
  {
    "text": "working is as expected then all I am doing and it's under my",
    "start": "491439",
    "end": "496659"
  },
  {
    "text": "control all I am doing is I am testing stuff and like a hack and have confidence that when it fails it shows a failure and",
    "start": "496659",
    "end": "502860"
  },
  {
    "text": "when it passes that I have demonstrated something I may not necessarily be able to demonstrate true correctness but what",
    "start": "502860",
    "end": "509860"
  },
  {
    "text": "I've done is I've actually said yeah I can have confidence that this does pretty much what I asked it to then you",
    "start": "509860",
    "end": "516250"
  },
  {
    "text": "have the code that is necessarily not unit testable and this is a quite an",
    "start": "516250",
    "end": "521979"
  },
  {
    "text": "important thing because sometimes people mistakenly equate unit tests with good",
    "start": "521979",
    "end": "528279"
  },
  {
    "text": "itself in other words it's a pure thing and so it's like thing that is not a unit test is and is",
    "start": "528279",
    "end": "534850"
  },
  {
    "text": "a test it doesn't necessarily it's not bad there is a part of your codebase that actually has to touch things that",
    "start": "534850",
    "end": "542050"
  },
  {
    "text": "it cannot control if you are touching the file system you do not control the file system if you think you do that's a",
    "start": "542050",
    "end": "548470"
  },
  {
    "text": "very sweet view but you don't you merely influence it okay you influence the network these are all",
    "start": "548470",
    "end": "554710"
  },
  {
    "text": "things that you can have some say in but actually you don't control it okay so",
    "start": "554710",
    "end": "560740"
  },
  {
    "text": "this other things may happen and necessarily your code needs to interact",
    "start": "560740",
    "end": "567430"
  },
  {
    "text": "with this stuff otherwise you've probably got a fairly dull program or it's a functional program base a functional code base which is probably",
    "start": "567430",
    "end": "574120"
  },
  {
    "text": "quite dull actually so there is this idea there is a bit that actually has to",
    "start": "574120",
    "end": "579190"
  },
  {
    "text": "touch the real world that bit cannot be unit tested and every now and then I get something coming up oh yeah but it's",
    "start": "579190",
    "end": "584590"
  },
  {
    "text": "really clever we mocked the file system yeah well I mock your approach because you haven't actually tested your code",
    "start": "584590",
    "end": "590950"
  },
  {
    "text": "against the file system you've tested your code against the idea of a file system that's the bit in the middle",
    "start": "590950",
    "end": "596220"
  },
  {
    "text": "we've done that that's where you should already be now this is good these are",
    "start": "596220",
    "end": "601600"
  },
  {
    "text": "the two categories you want you are lots of unit testable stuff stuff that has functional qualities or a simple object",
    "start": "601600",
    "end": "607870"
  },
  {
    "text": "model you can just look at it go yes I can test this this has this known effect and then there are these other things",
    "start": "607870",
    "end": "613420"
  },
  {
    "text": "where the test may fail not because the test is wrong not because the code is wrong but because the real world is",
    "start": "613420",
    "end": "619330"
  },
  {
    "text": "wrong okay something happened out there and we're not quite sure what somebody changed the database password or whatever and then there's the third",
    "start": "619330",
    "end": "626410"
  },
  {
    "text": "category this is the one you don't want should be unit testable but isn't oops now it turns out that this is often",
    "start": "626410",
    "end": "632770"
  },
  {
    "text": "quite large and code bases yeah but what you're getting here if we use this definition and of course there are lots",
    "start": "632770",
    "end": "638860"
  },
  {
    "text": "of definitions of what is a unit test I'm not saying this is what the one true definition but many years ago I came to",
    "start": "638860",
    "end": "644650"
  },
  {
    "text": "the conclusion that there are certain terms like unit tests like software architecture that have originated in",
    "start": "644650",
    "end": "650410"
  },
  {
    "text": "multiple from multiple different locations and those that have a single origin point of origin and so there",
    "start": "650410",
    "end": "656080"
  },
  {
    "text": "isn't one true definition we can go back to but what we can distinguishes between definitions that are more and less or",
    "start": "656080",
    "end": "661540"
  },
  {
    "text": "less useful I like this definition because it teaches me something about Mike if I'm looking at something and I cannot",
    "start": "661540",
    "end": "667780"
  },
  {
    "text": "unit test it then I have a question it's teaching me about the architecture should this be unit testable and it's",
    "start": "667780",
    "end": "674140"
  },
  {
    "text": "simply a piece of accidental complexity an accidental piece of coupling that we have got that we probably shouldn't have",
    "start": "674140",
    "end": "680760"
  },
  {
    "text": "or actually is this necessarily not unit testable okay distinguish between those two categories and shrink that bit in the",
    "start": "680760",
    "end": "688240"
  },
  {
    "text": "sandwich so there is this other aspect to unit testing catch by table Golding",
    "start": "688240",
    "end": "696670"
  },
  {
    "text": "rather nicely in the best software magazine a number of years ago and this is something I experienced quite a lot",
    "start": "696670",
    "end": "703150"
  },
  {
    "text": "when when you get into a conversation about unit tests it's it it doesn't take",
    "start": "703150",
    "end": "709990"
  },
  {
    "text": "very long before you find yourself talking about frameworks and mocking frameworks in this framework and that",
    "start": "709990",
    "end": "715510"
  },
  {
    "text": "framework and it's so oh hold back and I run TDD training for people I run",
    "start": "715510",
    "end": "721780"
  },
  {
    "text": "workshops and one of the most common questions is which framework are you",
    "start": "721780",
    "end": "727960"
  },
  {
    "text": "going to use and part of me just says which do you want you know but the other part is honestly it doesn't matter this",
    "start": "727960",
    "end": "734650"
  },
  {
    "text": "is not about learning how to use a testing framework although clearly that is within your reach and is something you should do",
    "start": "734650",
    "end": "740260"
  },
  {
    "text": "the real challenge is do you know how to drive it mostly people are as it were",
    "start": "740260",
    "end": "746590"
  },
  {
    "text": "consumers of frameworks rather than people who drive the framework and say I want to write this test how do I do this",
    "start": "746590",
    "end": "753490"
  },
  {
    "text": "they say this is possible it's on the demo page I'm going to copy/paste it which explains most mock object testing",
    "start": "753490",
    "end": "758710"
  },
  {
    "text": "the disaster that is the majority of mock object testing a good idea done badly and the program will be made unit",
    "start": "758710",
    "end": "765550"
  },
  {
    "text": "testing more about applying an exercising frameworks because naturally you sit there thinking I am programmer I",
    "start": "765550",
    "end": "771490"
  },
  {
    "text": "know how to code I know how to use a framework so therefore if I learned how to do this then it's a matter simply of",
    "start": "771490",
    "end": "776740"
  },
  {
    "text": "using a framework I've done that before I had essentially reduced my concept of",
    "start": "776740",
    "end": "782440"
  },
  {
    "text": "unit testing to the basic mechanics of exercising new test frameworks to verify the behavior of my classes my mindset",
    "start": "782440",
    "end": "789160"
  },
  {
    "text": "happy thinking far too narrowly about what it meant to write good unit tests that phrase again it's this idea of the",
    "start": "789160",
    "end": "795880"
  },
  {
    "text": "good unit test is often the basic idea is often independent of the framework and the",
    "start": "795880",
    "end": "801830"
  },
  {
    "text": "framework allows you to realize something in a particular way but often people use frameworks relatively poorly",
    "start": "801830",
    "end": "808670"
  },
  {
    "text": "they have thought about it in terms of its pro Cabul area of assertions and the other mechanics within it rather than",
    "start": "808670",
    "end": "813980"
  },
  {
    "text": "saying actually what am I trying to do here what am I trying to say if this is an act of communication to whom am i",
    "start": "813980",
    "end": "819950"
  },
  {
    "text": "communicating and what is it that I think is important to emphasize so I'm going to pick an example which starts",
    "start": "819950",
    "end": "825920"
  },
  {
    "start": "823000",
    "end": "1056000"
  },
  {
    "text": "like so there's a couple of examples that I tend to use because they often illustrate they're surprisingly deep when you scratch the surface so I got to",
    "start": "825920",
    "end": "835910"
  },
  {
    "text": "pick a very simple example leap you a classification I pick leap your classification because it turns out that",
    "start": "835910",
    "end": "841820"
  },
  {
    "text": "this is something that people generally get wrong ask yourself for for a leap",
    "start": "841820",
    "end": "848180"
  },
  {
    "text": "year with the Gregorian calendar assuming a bank data the proleptic",
    "start": "848180",
    "end": "854990"
  },
  {
    "text": "Gregorian calendar when is a year a leap year don't worry about all the weird",
    "start": "854990",
    "end": "860300"
  },
  {
    "text": "stuff like when did a country adopt the Gregorian calendar that that you know if you john ski is here in the third row if",
    "start": "860300",
    "end": "867380"
  },
  {
    "text": "you want to have a chat with him afterwards about that you'll be there all day you know the ski to pedia is",
    "start": "867380",
    "end": "874400"
  },
  {
    "text": "quite comprehensive on this you know and this is actually there's a whole load of absolutely fascinating ones they asked",
    "start": "874400",
    "end": "881900"
  },
  {
    "text": "me and John about Sweden any Swedes in the audience oh yeah you guys have the most original approach to try to adopt",
    "start": "881900",
    "end": "887930"
  },
  {
    "text": "the Gregorian calendar absolutely fascinating you know it's it was a it was a precursor of brexit you know it's",
    "start": "887930",
    "end": "894680"
  },
  {
    "text": "just like disastrous and absolutely pointless so but it didn't have any",
    "start": "894680",
    "end": "900800"
  },
  {
    "text": "consequences so nice dry run there though so we're going to simplify that",
    "start": "900800",
    "end": "905960"
  },
  {
    "text": "so ask yourself when is a year a leap year it's a very simple thing but it helps emphasize and by the way my this",
    "start": "905960",
    "end": "914480"
  },
  {
    "text": "is a sort of panic data but based on years and years of asking people amongst developers I would say approximately",
    "start": "914480",
    "end": "919490"
  },
  {
    "text": "between five and ten percent of developers know this okay is a kind of",
    "start": "919490",
    "end": "925040"
  },
  {
    "text": "geeky fad amongst the general population is probably down to about 1% okay but",
    "start": "925040",
    "end": "930420"
  },
  {
    "text": "five to 10% of programs know the rule so here's a really interesting one the challenge here is is not actually to",
    "start": "930420",
    "end": "937649"
  },
  {
    "text": "write the right code the challenge here is to create a test that communicates what a leap year is now for many people",
    "start": "937649",
    "end": "944550"
  },
  {
    "text": "their there their goal is I wish to create code I wish to create a test that shows that this is correct",
    "start": "944550",
    "end": "950670"
  },
  {
    "text": "the real challenge when you come to a piece of code is not does this work I very rarely look at a piece of code and",
    "start": "950670",
    "end": "957870"
  },
  {
    "text": "ask what does this work I want to know what does it mean by it works how does",
    "start": "957870",
    "end": "963120"
  },
  {
    "text": "this work what is it trying to do the question does it work until I've understood what I'm expecting is almost",
    "start": "963120",
    "end": "968880"
  },
  {
    "text": "irrelevant what tests are green it must work then you look at the unit test I thought I have no idea what it means for",
    "start": "968880",
    "end": "974850"
  },
  {
    "text": "it to work that is the greater challenge the meaning so we might go ahead and you",
    "start": "974850",
    "end": "980579"
  },
  {
    "text": "know let's warm up a little bit and so",
    "start": "980579",
    "end": "985800"
  },
  {
    "text": "you know I'm gonna write myself a little to use then unit I'm gonna write myself a little c-sharp method here I'm gonna go yes I'm gonna write a test and what",
    "start": "985800",
    "end": "992339"
  },
  {
    "text": "should I call it test that seems good",
    "start": "992339",
    "end": "997070"
  },
  {
    "text": "you're right you're right I can do better I haven't is leap year method is essentially a function it's a",
    "start": "999410",
    "end": "1005870"
  },
  {
    "text": "pure function it might exist within a static class and that's it it's a it's a that's all it's doing yes okay well yeah",
    "start": "1005870",
    "end": "1015920"
  },
  {
    "text": "you don't really tell me much and then people go ah there you go that one honestly this is guaranteed to",
    "start": "1015920",
    "end": "1022550"
  },
  {
    "text": "currently who once in every test suite test that something is correct is okay works there's a whole load of",
    "start": "1022550",
    "end": "1030110"
  },
  {
    "text": "suffixes that people use unless you are prepared to write unless you're ever",
    "start": "1030110",
    "end": "1035298"
  },
  {
    "text": "prepared to say the opposite test that this doesn't work and that by the way there are cases that that for which that",
    "start": "1035299",
    "end": "1040790"
  },
  {
    "text": "makes sense but those are more or more on the edge there's that those are exceptional cases ruff rather you know",
    "start": "1040790",
    "end": "1048380"
  },
  {
    "text": "bug for bug compatibility for example and this is this is noise this word doesn't these words don't actually add",
    "start": "1048380",
    "end": "1054440"
  },
  {
    "text": "anything I'm expecting that so then somebody says break up your tests and",
    "start": "1054440",
    "end": "1060400"
  },
  {
    "start": "1056000",
    "end": "1121000"
  },
  {
    "text": "people do what they normally do when they break up long methods and they have you know this is this is one of those things about giving out terrible advice",
    "start": "1060400",
    "end": "1066560"
  },
  {
    "text": "when the worst piece of advice you can ever give somebody is you should make that method smaller or break that method up because they will do so okay",
    "start": "1066560",
    "end": "1073880"
  },
  {
    "text": "what you're missing is that's not good that's not constructive advice it's observation advice it's when I look at",
    "start": "1073880",
    "end": "1080570"
  },
  {
    "text": "something in her short methods that is that tells me something but to tell somebody make them shorter or chop it up they will do this you know this is I'm",
    "start": "1080570",
    "end": "1088430"
  },
  {
    "text": "not kidding about this one is you know I see this quite often I also see ordinary methods broken up like this yeah it's",
    "start": "1088430",
    "end": "1095360"
  },
  {
    "text": "yeah the one two three really doesn't help so test 1 test 2 that's not very",
    "start": "1095360",
    "end": "1101240"
  },
  {
    "text": "helpful so we can perhaps do it haha now we're getting somewhere let's let's divide the world into leap years and normally peers or common years",
    "start": "1101240",
    "end": "1108040"
  },
  {
    "text": "and so we think we think we found it we've partitioned we've partitioned the",
    "start": "1108040",
    "end": "1114760"
  },
  {
    "text": "domain that we're dealing with into two there are leap years and there are normally peers oh this should be not",
    "start": "1114760",
    "end": "1120890"
  },
  {
    "text": "easy great so let's have a look at some examples so it's true that 2016 is a leap year and 2000s leap year okay so",
    "start": "1120890",
    "end": "1131150"
  },
  {
    "start": "1121000",
    "end": "1172000"
  },
  {
    "text": "then somebody says well no we should break these out more and partly they will also realize if you look here",
    "start": "1131150",
    "end": "1136310"
  },
  {
    "text": "there's a slight problem it turns out that there are not two kinds of year in",
    "start": "1136310",
    "end": "1141770"
  },
  {
    "text": "the system of classification there are four kinds of year it turns out that",
    "start": "1141770",
    "end": "1147140"
  },
  {
    "text": "2000 is a leap year for quite different reasons than 2016 so it turns out that",
    "start": "1147140",
    "end": "1152750"
  },
  {
    "text": "the there is a there there is a the rule involves years divisible by four 100 and 400 it turns out there are four",
    "start": "1152750",
    "end": "1160040"
  },
  {
    "text": "categories because you may need to remember them not divisible by four so there's four kinds of year not two and that's not visible here",
    "start": "1160040",
    "end": "1166670"
  },
  {
    "text": "that's just incidental data that's not obvious so in an attempt to make this more explicit many people end up writing",
    "start": "1166670",
    "end": "1172460"
  },
  {
    "start": "1172000",
    "end": "1228000"
  },
  {
    "text": "this now there are some improvements here that we can make the first one is to recognize that obviously that word",
    "start": "1172460",
    "end": "1177830"
  },
  {
    "text": "test is not doing any work for us okay if you have it if you have a framework",
    "start": "1177830",
    "end": "1182930"
  },
  {
    "text": "so for example if you're using something like pythons unit test it expects test2",
    "start": "1182930",
    "end": "1189230"
  },
  {
    "text": "be the first of all letters if you're a requirement if your framework requires it then you have no choice but to use it",
    "start": "1189230",
    "end": "1194630"
  },
  {
    "text": "that's fine but if your framework doesn't require it and you already have the word test plastered all over it I mean honestly it doesn't get",
    "start": "1194630",
    "end": "1200780"
  },
  {
    "text": "much clearer than having a huge great attribute there it's just that honesty let's let's just assume that that's a given so we can simplify it there okay that's",
    "start": "1200780",
    "end": "1208490"
  },
  {
    "text": "fine and now we're getting a slightly stronger statement 2016 is a leap year 2000 is leap year 2018 is not a leap",
    "start": "1208490",
    "end": "1215210"
  },
  {
    "text": "year 1900 is not a leap year Oh bye this is good however I still can't see why",
    "start": "1215210",
    "end": "1221390"
  },
  {
    "text": "they're different but there's another thing going on here is that these are just incidental because if I just",
    "start": "1221390",
    "end": "1227540"
  },
  {
    "text": "changed the years oh yes by the way I should also this is a point consider",
    "start": "1227540",
    "end": "1232549"
  },
  {
    "start": "1228000",
    "end": "1336000"
  },
  {
    "text": "changing your naming convention of your own using a snake case I'm not suggesting that if you're using a camel case that you should not use camel case",
    "start": "1232549",
    "end": "1239540"
  },
  {
    "text": "in your production code but this is not regular production code you never actually call this so try to think of it",
    "start": "1239540",
    "end": "1246830"
  },
  {
    "text": "more like a sentence which is exactly what this is whereas many methods are named after verb phrases imperatives and",
    "start": "1246830",
    "end": "1254000"
  },
  {
    "text": "classes are named after noun phrases for example so there is this idea of using the appropriate style of language and so",
    "start": "1254000",
    "end": "1263000"
  },
  {
    "text": "therefore you will find that sentences are generally longer than phrases so give them a little bit of space it turns out that our ability to read even if you",
    "start": "1263000",
    "end": "1269960"
  },
  {
    "text": "can read German your ability to read letters that are matched up together in",
    "start": "1269960",
    "end": "1275090"
  },
  {
    "text": "a traffic jam is actually severely compromised after about 30 characters okay and these names often go a lot",
    "start": "1275090",
    "end": "1281059"
  },
  {
    "text": "longer than that so I guess and there's no there's a concept there's a concept here sometimes",
    "start": "1281059",
    "end": "1288500"
  },
  {
    "text": "people wonder about far trends what's called far transfer does your ability to read alphabets such as the tie tie",
    "start": "1288500",
    "end": "1295190"
  },
  {
    "text": "system of writing transfer into being able to read this you know so you can match all the letter together it turns",
    "start": "1295190",
    "end": "1300710"
  },
  {
    "text": "out the answer is no so give them a little bit of space now let's focus on those and then I'm gonna make a change",
    "start": "1300710",
    "end": "1306799"
  },
  {
    "text": "now the problem here is a Gazoo that",
    "start": "1306799",
    "end": "1315049"
  },
  {
    "text": "there's no difference between what I was just testing what I've just tested now because it turns out 2020 is a leap year",
    "start": "1315049",
    "end": "1321049"
  },
  {
    "text": "for the same reasons that 2016 is a leap year 2019 is not a leap year for the same reasons that 2018 is not a leap",
    "start": "1321049",
    "end": "1328580"
  },
  {
    "text": "year but notice how much of that is in the I'm giving you here but none of it is visible there all this stuff I'm saying",
    "start": "1328580",
    "end": "1335570"
  },
  {
    "text": "should be there so there we go this is a better statement yes divisible by four",
    "start": "1335570",
    "end": "1340790"
  },
  {
    "text": "elite years news about 400 elite news yes not divisible by four not need peers used to this by 100 on Olivia's now",
    "start": "1340790",
    "end": "1346090"
  },
  {
    "text": "there is an interesting one here before we address the names about sequence this",
    "start": "1346090",
    "end": "1352760"
  },
  {
    "text": "is reading you're reading things now often people will latch on to the divisible by four thing as the first",
    "start": "1352760",
    "end": "1358430"
  },
  {
    "text": "thing that's the first thing people think about with leap years and that's natural but the thing to remember is the",
    "start": "1358430",
    "end": "1364280"
  },
  {
    "text": "order in which you write the test is not necessarily the order that in which people would like to read them so always",
    "start": "1364280",
    "end": "1370730"
  },
  {
    "text": "remember that when you're coming back because often I see tests I see the test Suites with sort of a almost random",
    "start": "1370730",
    "end": "1378500"
  },
  {
    "text": "order they don't tell a story they are written in the order that the developer thought of them in which is you know not",
    "start": "1378500",
    "end": "1384200"
  },
  {
    "text": "unreasonable but there's a notion there go back and look at them are they telling a story if something is",
    "start": "1384200",
    "end": "1391430"
  },
  {
    "text": "different for an empty case than it is for a null case then put those two together don't put one at the end and",
    "start": "1391430",
    "end": "1397910"
  },
  {
    "text": "there and the other at the beginning because these are things that people would probably think of at the same time",
    "start": "1397910",
    "end": "1403130"
  },
  {
    "text": "show that null and empty are different or the same side-by-side because people would expect",
    "start": "1403130",
    "end": "1408710"
  },
  {
    "text": "to see them don't start with the most complex case and end with the simplest case you know if you've got a repository",
    "start": "1408710",
    "end": "1414410"
  },
  {
    "text": "what's your initial state well I'm hoping it's empty what stunts that's where the story starts what's your next thing oh we add",
    "start": "1414410",
    "end": "1421430"
  },
  {
    "text": "loads of items to it no and one thing just one and then somebody says but in",
    "start": "1421430",
    "end": "1427310"
  },
  {
    "text": "production we need to hold millions yeah I know but if you can't hold one the other ninety nine hundred and ninety nine thousand or whatever irrelevant so",
    "start": "1427310",
    "end": "1434210"
  },
  {
    "text": "therefore just move to the next step tell the stories show the behaviors try and interact with it so this is actually",
    "start": "1434210",
    "end": "1441110"
  },
  {
    "text": "not really the story that I want to tell the story I want to tell is I'm gonna start with years not to visible by four",
    "start": "1441110",
    "end": "1446990"
  },
  {
    "text": "in this particular case what is the what is the most common kind of year statistically the most common kind of",
    "start": "1446990",
    "end": "1453260"
  },
  {
    "text": "year is not a leap year okay spaz seventy five percent of them this year is a good example pick a year at random",
    "start": "1453260",
    "end": "1459260"
  },
  {
    "text": "it's probably not a leap so start with this is Italy pure false now fact you can even hard-code it return",
    "start": "1459260",
    "end": "1464809"
  },
  {
    "text": "false okay don't don't say I told you this but yeah but honestly that code",
    "start": "1464809",
    "end": "1471380"
  },
  {
    "text": "will be right about 75% of the time which is better than some code I've seen so that is certainly an improvement now",
    "start": "1471380",
    "end": "1477260"
  },
  {
    "text": "notice what we're doing here is we've started with in this case find where your story starts is an empty thing okay",
    "start": "1477260",
    "end": "1483169"
  },
  {
    "text": "is it a simply constructed thing is it a large classification a simple default",
    "start": "1483169",
    "end": "1488299"
  },
  {
    "text": "state wherever it is start there and then move in slowly progressively divisible by four differ by 100",
    "start": "1488299",
    "end": "1494630"
  },
  {
    "text": "divisible by 400 you're narrowing in you're making it much more specific however what we realize is that there is",
    "start": "1494630",
    "end": "1501020"
  },
  {
    "text": "a contradiction years divisible by four elite peers use divisible by 100 are not leap years these two statements cannot",
    "start": "1501020",
    "end": "1508580"
  },
  {
    "text": "simul taneous li be true okay there is a there's an arithmetic contradiction you mister visible by 100 it is divisible by",
    "start": "1508580",
    "end": "1515330"
  },
  {
    "text": "four so since kind of Schrodinger state okay yes and no it isn't leap this",
    "start": "1515330",
    "end": "1520940"
  },
  {
    "text": "teaches us that there is something else about how we partition and how we name these things is that your test cases",
    "start": "1520940",
    "end": "1527330"
  },
  {
    "text": "should have mutually exclusive names so you look at it and it characterizes the behavior whereas sometimes when they",
    "start": "1527330",
    "end": "1533690"
  },
  {
    "text": "have overlapping names you now need to read all the tests in order to understand the overlap you should make your test as local as possible okay so",
    "start": "1533690",
    "end": "1540760"
  },
  {
    "text": "what we actually discovers it doesn't feel in the slide so years not divisible by four and not leap years use divisible",
    "start": "1540760",
    "end": "1546590"
  },
  {
    "text": "by four but not by $100 Pierce aha now we've learnt the rule where yes it was by 100 but not by 400 Arnold he is years",
    "start": "1546590",
    "end": "1553730"
  },
  {
    "text": "- by 400 olivia's now this is very much the leap year rule for the proleptic",
    "start": "1553730",
    "end": "1560750"
  },
  {
    "text": "Gregorian calendar okay but we're not done there are other techniques that",
    "start": "1560750",
    "end": "1566929"
  },
  {
    "text": "have this kind of death my preference is for this style which I'll mention is a",
    "start": "1566929",
    "end": "1573159"
  },
  {
    "text": "propositional style in other words the names of proposition you may have come across royal sheriff's approach which is",
    "start": "1573159",
    "end": "1581090"
  },
  {
    "text": "name the method name the input name the response yeah again if you look the same",
    "start": "1581090",
    "end": "1587750"
  },
  {
    "text": "information is there it's just structured differently I have a preference for one but I don't you know",
    "start": "1587750",
    "end": "1592970"
  },
  {
    "text": "this is absolutely fine because it gets us away from the test is here problems you've actually broken down the characteristics that you're",
    "start": "1592970",
    "end": "1600600"
  },
  {
    "text": "interested in as it were the before the action and the after so when it comes to",
    "start": "1600600",
    "end": "1608179"
  },
  {
    "start": "1605000",
    "end": "1749000"
  },
  {
    "text": "propositions and logic and this is this is the whole thing testing is very much based on trying to figure out what",
    "start": "1608179",
    "end": "1614700"
  },
  {
    "text": "you're trying to say and to express it this is hard and so in the world of ones and zeroes it turns out logic is",
    "start": "1614700",
    "end": "1620369"
  },
  {
    "text": "surprisingly useful this is a book that taught me a lot of logic and you can tell either how old it is or how old I",
    "start": "1620369",
    "end": "1625980"
  },
  {
    "text": "am because people just don't produce stuff with typefaces like that anymore there's a sort of a glorious retro feel",
    "start": "1625980",
    "end": "1631529"
  },
  {
    "text": "to it but the idea of a proposition propositions are vehicles for stating",
    "start": "1631529",
    "end": "1637409"
  },
  {
    "text": "how things are all might be so we are saying something about the world only indicative sentences which makes sense",
    "start": "1637409",
    "end": "1644159"
  },
  {
    "text": "to think of as being true or being false are capable expressing propositions so you're making concrete statements okay",
    "start": "1644159",
    "end": "1650639"
  },
  {
    "text": "so we've got that now there's an implementation it passes it's green this",
    "start": "1650639",
    "end": "1660659"
  },
  {
    "text": "is why I prefer the propositional style because it tells you what you have in other words when the tests pass it's a",
    "start": "1660659",
    "end": "1666629"
  },
  {
    "text": "description of the capabilities the properties the behaviors or whatever that you have here is a manifest of what",
    "start": "1666629",
    "end": "1671999"
  },
  {
    "text": "the code does now let's replace it with a naive implementation the Julian leap",
    "start": "1671999",
    "end": "1678749"
  },
  {
    "text": "year just modulo four and suddenly we",
    "start": "1678749",
    "end": "1684210"
  },
  {
    "text": "get a red so in other words what's interesting is we now know exactly what",
    "start": "1684210",
    "end": "1689519"
  },
  {
    "text": "is wrong it is the contradiction is the negation of the proposition what we know",
    "start": "1689519",
    "end": "1695369"
  },
  {
    "text": "is that our code for years divisible by 100 but not by 400 and not even well that's not true clearly years divisible",
    "start": "1695369",
    "end": "1701100"
  },
  {
    "text": "by 100 but not by 400 are leap years you now know it's the exact opposite of what it says so therefore you know what you",
    "start": "1701100",
    "end": "1707369"
  },
  {
    "text": "don't have so I tend to favor this naming approach because it works directly both as a result in other words",
    "start": "1707369",
    "end": "1714600"
  },
  {
    "text": "you see it as this is what happened to your test and as a name in the code whereas conventions like should don't",
    "start": "1714600",
    "end": "1720629"
  },
  {
    "text": "really do that okay so this is this idea that prices",
    "start": "1720629",
    "end": "1725879"
  },
  {
    "text": "Steve Freeman made this observation number of years ago are your tests really development to drive to ballot they must",
    "start": "1725879",
    "end": "1731340"
  },
  {
    "text": "do more than just test that Co performs its required functionality they must clearly Express that required",
    "start": "1731340",
    "end": "1736590"
  },
  {
    "text": "functionality to the reader it's not enough to just poke it and see and poke it yeah it's green it's guys like",
    "start": "1736590",
    "end": "1742529"
  },
  {
    "text": "communicate there's an active communication here so clear",
    "start": "1742529",
    "end": "1747929"
  },
  {
    "text": "specifications of the required functionality now we can take this a little bit further this is where it gets",
    "start": "1747929",
    "end": "1753779"
  },
  {
    "start": "1749000",
    "end": "1767000"
  },
  {
    "text": "a bit more interesting so one of the things you'll discover is you end up with long sentences long sentences with",
    "start": "1753779",
    "end": "1759149"
  },
  {
    "text": "lots of commonality what do you do with commonality factor it out so here I'm",
    "start": "1759149",
    "end": "1765419"
  },
  {
    "text": "going to nest the tests instead a number of testing frameworks will allow you to",
    "start": "1765419",
    "end": "1771509"
  },
  {
    "start": "1767000",
    "end": "1834000"
  },
  {
    "text": "do this so this has been available an end unit for a long time so in terms of",
    "start": "1771509",
    "end": "1778860"
  },
  {
    "text": "nesting your namespaces I can do it classes properly with J unit 5 and I can just about kick J unit forward you're doing the right thing but different this",
    "start": "1778860",
    "end": "1786179"
  },
  {
    "text": "idea of have a hierarchy and so I've got this idea of a leap year spec and what I've now done is I've grouped by outcome",
    "start": "1786179",
    "end": "1792120"
  },
  {
    "text": "a year as a leap year a year is not a leap year this is how people are thinking in terms of a classifier then",
    "start": "1792120",
    "end": "1797190"
  },
  {
    "text": "I'm going to show you the outcomes a year is a leap year if it is divisible by 4 but not 100 a year's a leap you",
    "start": "1797190",
    "end": "1802320"
  },
  {
    "text": "have this divisible by 400 it's not a leap year and so on so this use of hierarchy is really important first of",
    "start": "1802320",
    "end": "1808350"
  },
  {
    "text": "all it makes your name shorter but it actually groups things so that people it's almost as though I'm creating a PowerPoint presentation and showing you",
    "start": "1808350",
    "end": "1814500"
  },
  {
    "text": "here is how all these relate rather than some long rambling sentences yeah don't",
    "start": "1814500",
    "end": "1819539"
  },
  {
    "text": "worry about making them long initially but then look for the fact it's very unlikely you're going to end up with lots of long names and they will have no",
    "start": "1819539",
    "end": "1825509"
  },
  {
    "text": "commonality they normally have repeating parts what is that repeating part the reader probably wants to know because",
    "start": "1825509",
    "end": "1831299"
  },
  {
    "text": "it's probably part of the model of how to think about the code so yeah we have",
    "start": "1831299",
    "end": "1836850"
  },
  {
    "start": "1834000",
    "end": "1950000"
  },
  {
    "text": "yeah so we have some examples here now let's just focus on the test data examples that we're using I've happened",
    "start": "1836850",
    "end": "1843179"
  },
  {
    "text": "to have chosen 2018 and 1900 for these two I could have chosen anything but",
    "start": "1843179",
    "end": "1851519"
  },
  {
    "text": "there is a difference so 42 and 100 work just fine now this is interesting because many",
    "start": "1851519",
    "end": "1857940"
  },
  {
    "text": "people when I run this as a as a workshop example many people will",
    "start": "1857940",
    "end": "1863400"
  },
  {
    "text": "choose not to use years they use numbers like 1 or 3 or stuff like that now whilst technically these are not",
    "start": "1863400",
    "end": "1869309"
  },
  {
    "text": "incorrect as an act of communication they're not particularly good because",
    "start": "1869309",
    "end": "1874650"
  },
  {
    "text": "although 42 technically is a year in this system if you're a if you're a",
    "start": "1874650",
    "end": "1880410"
  },
  {
    "text": "developer of a certain background you look at the number 42 and you think oh yeah go check out galaxy you don't",
    "start": "1880410",
    "end": "1886770"
  },
  {
    "text": "immediately look at it and go yeah whereas if I write two zero one eight two zero one nine it's it's almost",
    "start": "1886770",
    "end": "1894390"
  },
  {
    "text": "impossible to not think of that number as a year it's not merely an integer you have a set of associations now if this",
    "start": "1894390",
    "end": "1899460"
  },
  {
    "text": "is an act of communication what you're going to do is work with the reader work with their associations make it look like a year use examples from their",
    "start": "1899460",
    "end": "1906510"
  },
  {
    "text": "domain if you're talking about people's names it turns out that foo and bar are terrible names to give to your children",
    "start": "1906510",
    "end": "1911730"
  },
  {
    "text": "but ok do not do this to your children and do not do it in tests ok so there is",
    "start": "1911730",
    "end": "1918540"
  },
  {
    "text": "this idea of really work the data make things obvious let the data speak very strongly if you're dealing with names as",
    "start": "1918540",
    "end": "1925890"
  },
  {
    "text": "well by the way in terms of names watch out for ambiguous names ok Stuart is",
    "start": "1925890",
    "end": "1934170"
  },
  {
    "text": "that is that a last name or a first name yes so therefore you're not letting your",
    "start": "1934170",
    "end": "1939420"
  },
  {
    "text": "data speak for you ok there's a bunch of names that you would really want somebody to read that and already have a",
    "start": "1939420",
    "end": "1944610"
  },
  {
    "text": "very strong grass without having to sit there and look at signatures use the data it's part of it's part of the story",
    "start": "1944610",
    "end": "1949710"
  },
  {
    "text": "now another way of getting around this is to have multiple things and therefore",
    "start": "1949710",
    "end": "1954900"
  },
  {
    "start": "1950000",
    "end": "2023000"
  },
  {
    "text": "once you have multiples you can you know choose the counterintuitive the non non",
    "start": "1954900",
    "end": "1960600"
  },
  {
    "text": "year looking examples towards the end that's fine but we many test frameworks",
    "start": "1960600",
    "end": "1965730"
  },
  {
    "text": "will now allow you allow you to fact this stuff out so so find out if you're testing prepare your test framework does",
    "start": "1965730",
    "end": "1971520"
  },
  {
    "text": "this find out and if it doesn't find out if your testing framework has the ability to support extensions and and so",
    "start": "1971520",
    "end": "1978870"
  },
  {
    "text": "on so there's this idea of here I've kept this quite declarative I like a good piece of declarative coding so",
    "start": "1978870",
    "end": "1984900"
  },
  {
    "text": "therefore I've got this factored out here are all the cases this is the code that's being executed and this is the proposition that has been made there are",
    "start": "1984900",
    "end": "1991230"
  },
  {
    "text": "three parts to the story the data that drives at the example and the actual",
    "start": "1991230",
    "end": "1996930"
  },
  {
    "text": "a proposition in this particular case I can also use values which is simple but",
    "start": "1996930",
    "end": "2003320"
  },
  {
    "text": "you get eat the test is executed in four cases okay so we've got this we can",
    "start": "2003320",
    "end": "2009620"
  },
  {
    "text": "generalize this over here we can use a range all kinds of stuff so it now becomes quite expressive but still",
    "start": "2009620",
    "end": "2018590"
  },
  {
    "text": "people sometimes try to over over program it so occasionally I get this",
    "start": "2018590",
    "end": "2024530"
  },
  {
    "start": "2023000",
    "end": "2283000"
  },
  {
    "text": "ones yeah yeah but I want to test all the years and then you end up with this",
    "start": "2024530",
    "end": "2030050"
  },
  {
    "text": "a year is either a leap year or not range 1 to 10,000 I admire your tenacity",
    "start": "2030050",
    "end": "2038140"
  },
  {
    "text": "but what's this that what does this test look like you know what is it going to",
    "start": "2038140",
    "end": "2043550"
  },
  {
    "text": "look like do not do yeah I have to put this sometimes and slides for those non-obvious progressions people look at the slides and right there you go that's",
    "start": "2043550",
    "end": "2050240"
  },
  {
    "text": "intuitive and you look at that oh that's really messy I tell you what I'll factor that out and then you realize you've",
    "start": "2050240",
    "end": "2056600"
  },
  {
    "text": "just reinvented the implementation so the point here is John yes I'm yes I am",
    "start": "2056600",
    "end": "2070730"
  },
  {
    "text": "absolutely happy to say but also I want to build up to that in other words I say here is what it should do and let me do",
    "start": "2070730",
    "end": "2077090"
  },
  {
    "text": "this exhaustively I would tend to treat the exhaustive test as a different category so that they can actually be",
    "start": "2077090",
    "end": "2082730"
  },
  {
    "text": "they might be long-running but their goal is different there but what you're doing is say now we have console dyou",
    "start": "2082730",
    "end": "2089419"
  },
  {
    "text": "what the story is now we have some confidence in it let's just do this exhaustively yeah and it's at that point where some in some cases you might want",
    "start": "2089420",
    "end": "2095929"
  },
  {
    "text": "to do things that are random in other cases you might want to have an alternative source of the same value perhaps it's less efficient perhaps it's",
    "start": "2095930",
    "end": "2102320"
  },
  {
    "text": "a library that's being replaced but the idea is that that's not my first port of call that's kind of like and now I believe this is all good let's let's",
    "start": "2102320",
    "end": "2109700"
  },
  {
    "text": "turn all the dials up to 11 or 10,000 okay so we also need to deal with this",
    "start": "2109700",
    "end": "2116660"
  },
  {
    "text": "Tolstoy was a programmer it turns out opening sentence of Anna Karenina the",
    "start": "2116660",
    "end": "2122660"
  },
  {
    "text": "only sentence of Anna Karenina I will confess to reading have read all happy families are like each unhappy family is",
    "start": "2122660",
    "end": "2127850"
  },
  {
    "text": "unhappy in its own way you need to deal with stuff that is exceptional and unsupported now here I'm",
    "start": "2127850",
    "end": "2133400"
  },
  {
    "text": "going to be arbitrary I'm going to say look in the domain of proleptic the proleptic calendar Gregorian calendar",
    "start": "2133400",
    "end": "2138890"
  },
  {
    "text": "I'm going to say I'm just not going to support year 0 in other words now I'm making stipulations about the",
    "start": "2138890",
    "end": "2144470"
  },
  {
    "text": "implementation I'm basically saying this is not supported doesn't mean it's necessarily wrong but you know it's not supported a class a year is not",
    "start": "2144470",
    "end": "2151819"
  },
  {
    "text": "supported if it is zero and so it throws an argument exception when we do that as",
    "start": "2151819",
    "end": "2157430"
  },
  {
    "text": "a side note if you're doing if you're doing any unit don't use throws use",
    "start": "2157430",
    "end": "2163220"
  },
  {
    "text": "catch because throws really is exactly what it says it if you throw an",
    "start": "2163220",
    "end": "2169579"
  },
  {
    "text": "exception that is derived from the exception that is stated then it fails that is very rarely how you ever ever",
    "start": "2169579",
    "end": "2175430"
  },
  {
    "text": "want to use an exception exceptions in our languages are based on base classes",
    "start": "2175430",
    "end": "2180530"
  },
  {
    "text": "so therefore show me the usage the usage is catch the usage is not catch it and then check it's exactly the same type",
    "start": "2180530",
    "end": "2187390"
  },
  {
    "text": "and we can generalize that it is 0 if it is negative and I can do that interestingly I would not merge these",
    "start": "2187390",
    "end": "2194420"
  },
  {
    "text": "two some people will some people won't this is very subjective the reason I do this is because 0 is secure and",
    "start": "2194420",
    "end": "2202190"
  },
  {
    "text": "interesting when it comes to talking about calendars and the answer does does the calendar have a Year Zero or not to",
    "start": "2202190",
    "end": "2209240"
  },
  {
    "text": "which the answer is yes you haven't told me which calendar you're using this is a far more fascinating or boring",
    "start": "2209240",
    "end": "2214849"
  },
  {
    "text": "conversation than you would believe and to the point that once when getting a group to do this exercise they argued",
    "start": "2214849",
    "end": "2220940"
  },
  {
    "text": "for 10 minutes about whether or not there was a Year Zero and I kind of ended that discussion with and now you know why I keep it separate because what",
    "start": "2220940",
    "end": "2228020"
  },
  {
    "text": "you're doing is your tests sometimes exist not for completeness but for emphasis it is as if you were writing a",
    "start": "2228020",
    "end": "2233720"
  },
  {
    "text": "document and you said I read it I want you to notice that I've noticed this we've taken account of this I will",
    "start": "2233720",
    "end": "2238819"
  },
  {
    "text": "single it out I'll put it in bold I'll give its own section or whatever it is use the same technique here I'm saying I",
    "start": "2238819",
    "end": "2244130"
  },
  {
    "text": "want you to know we've covered 0 we're good ok whatever we think of it it's here we're done and there's a there's a",
    "start": "2244130",
    "end": "2253280"
  },
  {
    "text": "complement to that it's already implied by the rest but it's sometimes worth you start realizing balancing out when is a",
    "start": "2253280",
    "end": "2259940"
  },
  {
    "text": "year supported I'm going to go gear to int max value in the case I will use values not range by the",
    "start": "2259940",
    "end": "2266430"
  },
  {
    "text": "way it takes a range will execute all the way from one to two billion and that",
    "start": "2266430",
    "end": "2273510"
  },
  {
    "text": "is certainly quite exhaustive but it won't really prove very much so I'm just gonna choose examples at each end of the",
    "start": "2273510",
    "end": "2279990"
  },
  {
    "text": "range just say look just in case you were wondering yes we're good okay so",
    "start": "2279990",
    "end": "2286250"
  },
  {
    "start": "2283000",
    "end": "2313000"
  },
  {
    "text": "let's talk about stacks stacks of objects I'm going to do this example we will start off with a very simple view",
    "start": "2286250",
    "end": "2292920"
  },
  {
    "text": "what is the stack its its stack is the",
    "start": "2292920",
    "end": "2298050"
  },
  {
    "text": "most overused abstract data type in computer science is the short answer and so therefore I feel tradition-bound",
    "start": "2298050",
    "end": "2304200"
  },
  {
    "text": "to do this let's talk about things you can do with the stat you can create one you can push to it you can pop from it",
    "start": "2304200",
    "end": "2310830"
  },
  {
    "text": "you can find its depth you can ask for its top so ADT's very much this is we don't care",
    "start": "2310830",
    "end": "2319290"
  },
  {
    "start": "2313000",
    "end": "2390000"
  },
  {
    "text": "about the implementation this day the whole idea of abstract data types Barbara Liskov did a lot of work on this",
    "start": "2319290",
    "end": "2327150"
  },
  {
    "text": "one of the things she received cheering",
    "start": "2327150",
    "end": "2332220"
  },
  {
    "text": "award for so this is from 1974 an abstract data type defines a class master public which is completely",
    "start": "2332220",
    "end": "2337740"
  },
  {
    "text": "characterized by the operations available on those objects now the reason I put this here is to really",
    "start": "2337740",
    "end": "2343140"
  },
  {
    "text": "emphasize something no we're not going to test the private section no you do not want to do that treat that always as",
    "start": "2343140",
    "end": "2349290"
  },
  {
    "text": "your default opening position if you feel that you want to test the private section of something then there's",
    "start": "2349290",
    "end": "2354870"
  },
  {
    "text": "probably something else going on so I this is a kind of a 99.9% rule or a 99",
    "start": "2354870",
    "end": "2361170"
  },
  {
    "text": "percent rule depending on if you're having an easy day in other words you should just assume that you probably",
    "start": "2361170",
    "end": "2366600"
  },
  {
    "text": "don't want to do this there are cases where you might but just treat them with suspicion so therefore we should be able",
    "start": "2366600",
    "end": "2372420"
  },
  {
    "text": "to characterize this behavior completely okay so this allows me to use them upside down A's and back-to-front is for",
    "start": "2372420",
    "end": "2379260"
  },
  {
    "text": "all types T there exists a stack such that and got all these various operations so we've described it as a sort of an abstract data type using a",
    "start": "2379260",
    "end": "2385560"
  },
  {
    "text": "Cartesian product signatures excellent but that's not their really gonna work in most code so I'm gonna do this one in",
    "start": "2385560",
    "end": "2391170"
  },
  {
    "text": "C++ nothing particularly weird here yeah just got a little bit of extra",
    "start": "2391170",
    "end": "2396700"
  },
  {
    "text": "noise if you're not used to C++ I'll probably change a couple of bits of the signature as we go through I'm making",
    "start": "2396700",
    "end": "2403570"
  },
  {
    "text": "the pure I'm making the pot I'm keeping pop simple a lot of people assume that pop returns a value for a number of",
    "start": "2403570",
    "end": "2410620"
  },
  {
    "text": "reasons that's not always the best design if you've done any functional programming you'll know that's not the best design if you haven't done",
    "start": "2410620",
    "end": "2416110"
  },
  {
    "text": "functional programming you may also know that it's not the best design but but here we're going to we're going to do",
    "start": "2416110",
    "end": "2421240"
  },
  {
    "text": "that and so basically we can construct it we can push pop we can ask for its depth we get a size and unsigned",
    "start": "2421240",
    "end": "2426880"
  },
  {
    "text": "quantity Const merely indicates these are pure queries and top gives me a tea okay now I'm going to use the catch",
    "start": "2426880",
    "end": "2434410"
  },
  {
    "text": "framework and catch Frank was devout by Phil Nash development support by Phil",
    "start": "2434410",
    "end": "2439600"
  },
  {
    "text": "Nash and it kind of builds on on on an idea that I originally trialed in a a",
    "start": "2439600",
    "end": "2449220"
  },
  {
    "text": "testing framework called heathrow where I just got sick to death of this whole",
    "start": "2449220",
    "end": "2454810"
  },
  {
    "text": "question about identify as I said I want to use strings because in number in in other frameworks I can do this about 10",
    "start": "2454810",
    "end": "2460150"
  },
  {
    "text": "years ago I created this idea this approach for doing this in in C++ and in",
    "start": "2460150",
    "end": "2467410"
  },
  {
    "text": "C where I could just simply use strings instead of their starting with the idea that a test case must be a function or a",
    "start": "2467410",
    "end": "2474310"
  },
  {
    "text": "method that's the wrong place to start just because that's how you implement in some languages doesn't mean that's the best place to start so III I went ahead",
    "start": "2474310",
    "end": "2481540"
  },
  {
    "text": "and did that Phil did a much better job in terms of creating something that was built from that and I and he supports it",
    "start": "2481540",
    "end": "2487950"
  },
  {
    "text": "we can do a little better than just it's a bunch of test cases we can basically say here I'm gonna tell you a story I'm",
    "start": "2487950",
    "end": "2493780"
  },
  {
    "text": "actually create a narrative here's a test case is all about status now you have different sections I'm going to talk about the constructor I talked",
    "start": "2493780",
    "end": "2499360"
  },
  {
    "text": "about push the pot the death okay but we had this conversation earlier on that word test is a bit noisy the problem",
    "start": "2499360",
    "end": "2507190"
  },
  {
    "text": "here is what I've done is just repeated the public interface and that in others haven't really told you anything useful",
    "start": "2507190",
    "end": "2512620"
  },
  {
    "text": "and it turns out that how you think about a class and you think about instances of it is not by using",
    "start": "2512620",
    "end": "2519340"
  },
  {
    "text": "individual methods in this interface you think about it in terms of proper usage",
    "start": "2519340",
    "end": "2525440"
  },
  {
    "text": "so if you if you follow that approach you have a bit of a problem because and",
    "start": "2525440",
    "end": "2531119"
  },
  {
    "text": "this is something that I can do in C++ 11 I can basically tell the compiler by the way I'm not going to define the",
    "start": "2531119",
    "end": "2538050"
  },
  {
    "text": "default constructor I would like you to generate it for me and I can actually make that explicit so what I'm telling",
    "start": "2538050",
    "end": "2543420"
  },
  {
    "text": "you I'm telling the reader is by the way the compiler is going to come up with a default constructor here now think about",
    "start": "2543420",
    "end": "2549780"
  },
  {
    "text": "that from the testing point of view that's a bit weird isn't it if I am testing the individual functions why am",
    "start": "2549780",
    "end": "2555630"
  },
  {
    "text": "i testing a thing the compiler created I obviously don't either you do need it you absolutely need it but you need to",
    "start": "2555630",
    "end": "2562560"
  },
  {
    "text": "reframe how you're approaching the problem you are not testing individual methods that is not how you use objects",
    "start": "2562560",
    "end": "2568380"
  },
  {
    "text": "it's not how you test objects it's actually not possible to do it so sometimes people kind of say oh I'll",
    "start": "2568380",
    "end": "2574260"
  },
  {
    "text": "just use some slightly Security's language and this is this is the classic get out again",
    "start": "2574260",
    "end": "2579839"
  },
  {
    "text": "every test suite has loads of these can be constructed can be pushed cat see I'm",
    "start": "2579839",
    "end": "2584910"
  },
  {
    "text": "using proper words Kevlar yeah I've got sentences here can be popped has death has a top yeah that's not true is it",
    "start": "2584910",
    "end": "2593369"
  },
  {
    "text": "because you can't pop an empty stack and an empty stack has no top so you end up revising that too can sometimes be",
    "start": "2593369",
    "end": "2599760"
  },
  {
    "text": "popped and sometimes has a top yeah the force and precision of the language has",
    "start": "2599760",
    "end": "2605730"
  },
  {
    "text": "subtly got this is not how you want to approach it either it's this very much this propositional approach so Chris old",
    "start": "2605730",
    "end": "2612599"
  },
  {
    "text": "would observe trouble with full stack developers you can't push them so they thought that the phrase full stack",
    "start": "2612599",
    "end": "2617760"
  },
  {
    "text": "developer just deserves to be mocked mercilessly if you are a full stack developer take it off your CV come on",
    "start": "2617760",
    "end": "2623250"
  },
  {
    "text": "unless you're actually doing device driver work and front-end work and all",
    "start": "2623250",
    "end": "2629579"
  },
  {
    "text": "the points in between you can't really call yourself a full stack developer or on there's a very strong case to be made",
    "start": "2629579",
    "end": "2634800"
  },
  {
    "text": "for firmware work as well ok so how are we going to go about this we need a",
    "start": "2634800",
    "end": "2639900"
  },
  {
    "text": "better thinking model so let's pick on given when that okay this gives us a narrative you give us a simple story given when then okay given an T stat so",
    "start": "2639900",
    "end": "2648359"
  },
  {
    "text": "the given when then tryptic allows us to tell a story quite simply at any level",
    "start": "2648359",
    "end": "2654000"
  },
  {
    "text": "we can think of it as requirements on the system as a whole we can structure our user stories but I can also make it about object",
    "start": "2654000",
    "end": "2660749"
  },
  {
    "text": "stories I can take it all the way in it's the same model is it's recursive it's Turtles all the way down given an",
    "start": "2660749",
    "end": "2666509"
  },
  {
    "text": "anti stack when an item is pushed then it should not be empty we just talked about strength of language I'm not a big",
    "start": "2666509",
    "end": "2672660"
  },
  {
    "text": "fan of if should helps you absolutely go for it but honestly I think it's a little bit like training wheels on a",
    "start": "2672660",
    "end": "2679170"
  },
  {
    "text": "bicycle is once you've got there take them off sure it is is kind of not very strong it kind of it's a it's a bit like",
    "start": "2679170",
    "end": "2686099"
  },
  {
    "text": "my like listen to my teenagers talk you know if it's okay with you I think that kind of maybe perhaps I should probably",
    "start": "2686099",
    "end": "2691920"
  },
  {
    "text": "yeah don't you think a little bit of up talking you then get to the point so this advice it turns out it's not",
    "start": "2691920",
    "end": "2698549"
  },
  {
    "start": "2696000",
    "end": "2713000"
  },
  {
    "text": "just Tolstoy who was a programmer it turns out Strunk and white and the classic Elements of Style had some great advice for programmers look they were",
    "start": "2698549",
    "end": "2705539"
  },
  {
    "text": "testers make definite and make definite assertions okay way before anybody thought of the assert statement in the",
    "start": "2705539",
    "end": "2711420"
  },
  {
    "text": "1960s make definite surgeons avoid team colorless hesitating non-committal language by a sentence made stronger a",
    "start": "2711420",
    "end": "2718650"
  },
  {
    "start": "2713000",
    "end": "2764000"
  },
  {
    "text": "usually becomes shorter as brevity as a byproduct of the figure excellent right let's do that it must not be empty oh ok",
    "start": "2718650",
    "end": "2725009"
  },
  {
    "text": "either it is not empty yeah you'd have to shout at the reader it's just a statement about it but even",
    "start": "2725009",
    "end": "2731009"
  },
  {
    "text": "this is actually quite vague okay think about it for a moment you just put something into an empty",
    "start": "2731009",
    "end": "2736589"
  },
  {
    "text": "stack what can you say about it it's not empty you know there are lots of non empty States they are not all equivalent",
    "start": "2736589",
    "end": "2743869"
  },
  {
    "text": "it has a depth of 1 ah doesn't have a depth of 2 or 3 or 4 if you're dealing",
    "start": "2743869",
    "end": "2749489"
  },
  {
    "text": "with int it turns out there are two billion answers that are wrong that are not empty there is only one",
    "start": "2749489",
    "end": "2755519"
  },
  {
    "text": "that is correct and it's that one and actually there's a stronger statement and the top item is the item that's",
    "start": "2755519",
    "end": "2760589"
  },
  {
    "text": "pushed that's the state that is the post condition of that so then we try and",
    "start": "2760589",
    "end": "2766199"
  },
  {
    "start": "2764000",
    "end": "2788000"
  },
  {
    "text": "turn this into a name yeah no way and we think wait a minute",
    "start": "2766199",
    "end": "2771630"
  },
  {
    "text": "Kevin talked about underscores earlier on you're right I talked about in the schools earlier on let's do that okay honestly we can we can stretch it a",
    "start": "2771630",
    "end": "2777839"
  },
  {
    "text": "little bit put some spaces in we recover our given win then then we realize you don't although this is sometimes quite",
    "start": "2777839",
    "end": "2783059"
  },
  {
    "text": "useful in terms of nesting and so on you don't necessarily need to do that there is a shorter English sentence that says",
    "start": "2783059",
    "end": "2788309"
  },
  {
    "start": "2788000",
    "end": "2844000"
  },
  {
    "text": "the same thing an empty stack acquires death by retaining your push item as it's time you could but this is also",
    "start": "2788309",
    "end": "2793499"
  },
  {
    "text": "something else a lesson in not simply that naming is hard but it turns out",
    "start": "2793499",
    "end": "2798569"
  },
  {
    "text": "there is a process for naming naming start off with a sketch here's what I think I know and they'll probably be a",
    "start": "2798569",
    "end": "2804029"
  },
  {
    "text": "lot longer or it may be too short and then come back to it your test names are",
    "start": "2804029",
    "end": "2809069"
  },
  {
    "text": "not written or e they are not engraved in stone they're one of the easiest things to change because other code doesn't depend on them so treat them as",
    "start": "2809069",
    "end": "2815999"
  },
  {
    "text": "a little bit of a journey as you understand it more and more you understand that what you're trying to say you are learning quite literally",
    "start": "2815999",
    "end": "2822449"
  },
  {
    "text": "when you're writing tests you are learning how to talk about the code that you're testing the idea that you would",
    "start": "2822449",
    "end": "2827819"
  },
  {
    "text": "know immediately what you wanted to say is optimistic so give yourself a bit of slack you know you're gonna get it wrong",
    "start": "2827819",
    "end": "2833729"
  },
  {
    "text": "and you're learning a better way of doing that just assume that that's the case so in one of their most brilliantly",
    "start": "2833729",
    "end": "2841259"
  },
  {
    "text": "self-referential pieces of advice omit needless words okay so now I can take",
    "start": "2841259",
    "end": "2846630"
  },
  {
    "start": "2844000",
    "end": "2889000"
  },
  {
    "text": "this I can take this a little more seriously stack specification section an empty stack acquires death by retaining",
    "start": "2846630",
    "end": "2852929"
  },
  {
    "text": "you're pushed itemizes top now this begins you look a little bit like a spec I'm gonna take a stack of strings I'm",
    "start": "2852929",
    "end": "2857969"
  },
  {
    "text": "gonna push NDC I'm gonna say I'm gonna require that stack deaths is one the top is NDC okay so we this kind of reads",
    "start": "2857969",
    "end": "2863699"
  },
  {
    "text": "quite nicely and I've got a bunch of other sections here that's kind of get rid of the noise a new stack is empty an",
    "start": "2863699",
    "end": "2869429"
  },
  {
    "text": "empty stack throws when career it's top item and if you stare throws when pop and so on okay now it's a couple of",
    "start": "2869429",
    "end": "2877650"
  },
  {
    "text": "other things here that are interesting that when we when we look at the naming",
    "start": "2877650",
    "end": "2884729"
  },
  {
    "text": "when we look at the kind of the structure that we've got there's",
    "start": "2884729",
    "end": "2889859"
  },
  {
    "start": "2889000",
    "end": "2926000"
  },
  {
    "text": "something else going on here for each usage scenario the test describe the context starting point or preconditions",
    "start": "2889859",
    "end": "2895169"
  },
  {
    "text": "that must be satisfied so back to Jared's advice they illustrate how the software is invoked they describe",
    "start": "2895169",
    "end": "2900659"
  },
  {
    "text": "expected results or post conditions verified this is kind of a very standard",
    "start": "2900659",
    "end": "2905809"
  },
  {
    "text": "kind of rule of three in fact sometimes people talk about is the three A's arranged act assert but what is",
    "start": "2905809",
    "end": "2911119"
  },
  {
    "text": "interesting is this has been rediscovered time and time again that there's this kind of sort of three act",
    "start": "2911119",
    "end": "2918079"
  },
  {
    "text": "play that goes on so some people talk about as given when then which is identical its equivalent there is no",
    "start": "2918079",
    "end": "2924380"
  },
  {
    "text": "difference to that and then there's a nice deep robes of deeper observation just demonstrating there's actually you",
    "start": "2924380",
    "end": "2930740"
  },
  {
    "start": "2926000",
    "end": "3600000"
  },
  {
    "text": "don't have to know very much in computer science there's only a handful of ideas they just go by different names at different times Jason Gorman fun fact given when then",
    "start": "2930740",
    "end": "2937940"
  },
  {
    "text": "it's what we call a halt ripple which Tony Hall the idea of a precondition a piece of code and the post condition",
    "start": "2937940",
    "end": "2944809"
  },
  {
    "text": "that's on it this dates back to nineteen sixty nine so it's not exactly new although his syntax was slightly",
    "start": "2944809",
    "end": "2950869"
  },
  {
    "text": "different then if the assertion P is true before initiation of program Q then the assertion I'll be true on its",
    "start": "2950869",
    "end": "2956539"
  },
  {
    "text": "completion this is a really interesting one because we're looking at from the point of view of tests but this was also",
    "start": "2956539",
    "end": "2962480"
  },
  {
    "text": "the basis for a lot of formal reasoning in code but it's the same story you've got this three part thing here's this",
    "start": "2962480",
    "end": "2968809"
  },
  {
    "text": "thing here's the thing I'm doing to it some transformation a calculation a state modification whatever it is and here is the world afterwards or what it",
    "start": "2968809",
    "end": "2975980"
  },
  {
    "text": "should be yeah and as there's our there's our expectation so that's that's",
    "start": "2975980",
    "end": "2981380"
  },
  {
    "text": "you know that's that's quite nice but we can relate it to some other things and",
    "start": "2981380",
    "end": "2987049"
  },
  {
    "text": "what I want to relate what I want to relate this to is the idea of",
    "start": "2987049",
    "end": "2992480"
  },
  {
    "text": "understanding how does our stack behave and it turns out there is a state model here sometimes people try and understand",
    "start": "2992480",
    "end": "3002470"
  },
  {
    "text": "it through pre and post conditions it turns out those are not quite adequate four times I don't have enough time to",
    "start": "3002470",
    "end": "3007930"
  },
  {
    "text": "go into that but it turns out the natural way of reasoning about this is this you create new things you get an",
    "start": "3007930",
    "end": "3014200"
  },
  {
    "text": "empty one you push you get a non empty you can call the depth top push and pop",
    "start": "3014200",
    "end": "3019690"
  },
  {
    "text": "on a non empty one when you pop a non empty there's deaths of one then it goes back to empty and you can only ask for",
    "start": "3019690",
    "end": "3025990"
  },
  {
    "text": "the depth you cannot you cannot top or pop it so in other words we've got a model here that shows you the life cycle",
    "start": "3025990",
    "end": "3035210"
  },
  {
    "text": "it turns out and let's map this let's make our design decision we're going to",
    "start": "3035210",
    "end": "3040740"
  },
  {
    "text": "treat these as errors it turns out that I can use exactly that to structure my",
    "start": "3040740",
    "end": "3046020"
  },
  {
    "text": "tests so there is a notion here people often overlook the importance of having",
    "start": "3046020",
    "end": "3051990"
  },
  {
    "text": "a mental model of the state interactions of their code and one of the things is",
    "start": "3051990",
    "end": "3058440"
  },
  {
    "text": "you can derive it from tests or you can derive it from the knowledge of the domain or the other way around you can",
    "start": "3058440",
    "end": "3063630"
  },
  {
    "text": "use your what hope you have a clear model of what the state model is you can actually use it to drive your tests it's a it's a two-way street so what we've",
    "start": "3063630",
    "end": "3071430"
  },
  {
    "text": "got here a new stack is empty an empty stack throws when career its top item throws when pops it acquires a a non",
    "start": "3071430",
    "end": "3076950"
  },
  {
    "text": "empty stack becomes deeper by returning pushed itemizes top so notice here we've organized it and we've chosen to tell",
    "start": "3076950",
    "end": "3083280"
  },
  {
    "text": "the reader we are saying the thing i want you to notice that's really interesting is that there are new stacks",
    "start": "3083280",
    "end": "3088860"
  },
  {
    "text": "where there are things we can say about them now let's generally talk about empty stacks and let's talk about non empty stacks and I've emphasized that as",
    "start": "3088860",
    "end": "3095070"
  },
  {
    "text": "the backbone of my test and hung everything else off it so that's quite a",
    "start": "3095070",
    "end": "3102180"
  },
  {
    "text": "powerful way of quite a powerful way of reasoning and exploring that but there's",
    "start": "3102180",
    "end": "3110310"
  },
  {
    "text": "a general lesson here given can be used to group tests for operations with",
    "start": "3110310",
    "end": "3116670"
  },
  {
    "text": "respect to common initial state either you arrived at that because you understood the state model or you",
    "start": "3116670",
    "end": "3123390"
  },
  {
    "text": "arrived at that because you realize there was repetition in your test names and you thought the repetition well that refers to the initial state or you're",
    "start": "3123390",
    "end": "3129930"
  },
  {
    "text": "arrived at it because you wanted to factor out common fixture code and common fixture code normally means we",
    "start": "3129930",
    "end": "3135720"
  },
  {
    "text": "are starting in the same place so given so there's this idea I can group my test",
    "start": "3135720",
    "end": "3141240"
  },
  {
    "text": "cases according to the Givens the common Givens this is where we start given this then",
    "start": "3141240",
    "end": "3146790"
  },
  {
    "text": "let me tell you a story you can also do it by winds when can be used to group",
    "start": "3146790",
    "end": "3153660"
  },
  {
    "text": "test by operation regardless of initial state or outcome so for example what I could do is I could group my tests",
    "start": "3153660",
    "end": "3158730"
  },
  {
    "text": "around the push and pop I could say when you're pushing now on to an empty one",
    "start": "3158730",
    "end": "3164310"
  },
  {
    "text": "versus on to a non empty one and I was there I've chosen to our the operations now that's really good",
    "start": "3164310",
    "end": "3169530"
  },
  {
    "text": "for things like the standard model to find if you are finding something in a",
    "start": "3169530",
    "end": "3174990"
  },
  {
    "text": "repository then it's either there or it's not now perhaps you want to put those test cases together you say yeah",
    "start": "3174990",
    "end": "3180450"
  },
  {
    "text": "when I'm searching when finding then when it's there you get the reference to it when it's not something else so that",
    "start": "3180450",
    "end": "3186810"
  },
  {
    "text": "can be useful as well now notice I am offering you these I'm not saying one is right or another you've got to determine",
    "start": "3186810",
    "end": "3192720"
  },
  {
    "text": "the story of the emphasis you want to give to the reader and guess what you can also group it by thence the outcome",
    "start": "3192720",
    "end": "3199050"
  },
  {
    "text": "in fact we did that that was the leap year thing basically then it is a leap year if but I chose to slight different",
    "start": "3199050",
    "end": "3205380"
  },
  {
    "text": "words a year is a leap year we've chosen the outcome we're going to group by common outcome so this is a very",
    "start": "3205380",
    "end": "3210930"
  },
  {
    "text": "powerful thing given when then it's not just this simple thing for telling stories it's much much much deeper it",
    "start": "3210930",
    "end": "3216210"
  },
  {
    "text": "connects to a question of how you want to tell a story how you want to emphasize things so who knew you could",
    "start": "3216210",
    "end": "3224820"
  },
  {
    "text": "squeeze so much from the stack so a couple of things here we are all the home straight that's a younger version",
    "start": "3224820",
    "end": "3230520"
  },
  {
    "text": "of me that was last week honestly after that much then you know anyway this so",
    "start": "3230520",
    "end": "3235950"
  },
  {
    "text": "this is me Frank Bushman of Mitchie Hennig a few years ago enjoying some beer I I'm a little more moderate as a",
    "start": "3235950",
    "end": "3242400"
  },
  {
    "text": "drinker these days so there we go so what am i talking about that's a queue",
    "start": "3242400",
    "end": "3248160"
  },
  {
    "text": "of bottles yes we've done stacks we're going to talk about queues okay so oh yes actually there's another reference",
    "start": "3248160",
    "end": "3254370"
  },
  {
    "text": "here as well I discovered that I'm in this room basically the talk I'm doing with Dylan Beatty is this afternoon it's",
    "start": "3254370",
    "end": "3260700"
  },
  {
    "text": "in this room and it turns out this is the party room for this evening so I you don't actually have to leave this room",
    "start": "3260700",
    "end": "3266040"
  },
  {
    "text": "okay I don't know if they'll have that much beer I don't know if they're you",
    "start": "3266040",
    "end": "3271380"
  },
  {
    "text": "know but but there's only one way to find out that's been Pyrrhic about it so okay let's do a ques what can I do with a cue I can create one I can I can get its",
    "start": "3271380",
    "end": "3279150"
  },
  {
    "text": "length I can ask for its maximum capacity I can put things in it and cue and I can D cue them okay so cue is very useful normally we",
    "start": "3279150",
    "end": "3289020"
  },
  {
    "text": "have some concept for a producer concept of consumer and then we use some bland word like cue or buffer or whatever in",
    "start": "3289020",
    "end": "3296370"
  },
  {
    "text": "between and it might be an improv thing it might be into process sockets accused pipes accuse all of this",
    "start": "3296370",
    "end": "3303160"
  },
  {
    "text": "stuff honestly if you want to if you want to sex up your code a little bit in your conversations it's a spacetime",
    "start": "3303160",
    "end": "3309310"
  },
  {
    "text": "decoupling that is way more interesting there so why we've got a queue here space-time decoupling okay because",
    "start": "3309310",
    "end": "3315730"
  },
  {
    "text": "that's what it is think about it for a moment that's what you're doing is you're decoupling either a rate of production and a rate of consumption or",
    "start": "3315730",
    "end": "3322570"
  },
  {
    "text": "you are decoupling in time we know what we want now but we're not in a position to take advantage of it somebody will",
    "start": "3322570",
    "end": "3328030"
  },
  {
    "text": "get around to it later okay well we're in the wrong place it needs to be over there that's fine so yeah space-time decoupling make",
    "start": "3328030",
    "end": "3335560"
  },
  {
    "text": "Europe make make the design language more exciting things we can characterize back cues and you understand why I put",
    "start": "3335560",
    "end": "3340720"
  },
  {
    "text": "in a buffer they can have a size therefore their buffered bounded and asynchronous things not to do make your",
    "start": "3340720",
    "end": "3347830"
  },
  {
    "text": "queues infinite this is a bad thing I mean it works fine for demos and prototypes but turns out that when",
    "start": "3347830",
    "end": "3354280"
  },
  {
    "text": "something goes wrong you run out of memory it turns out you don't have infinite storage you know I've looked on",
    "start": "3354280",
    "end": "3362619"
  },
  {
    "text": "eBay it's not available but as an aside there are some interesting observations I want to throw in it's always worth",
    "start": "3362619",
    "end": "3369369"
  },
  {
    "text": "understanding that in computer science there's always you know zero one of many one what is a queue of one it turns out",
    "start": "3369369",
    "end": "3375640"
  },
  {
    "text": "it's called the future well one side it's called the future the other side is called a promise it turns out that again in computer science you don't have to",
    "start": "3375640",
    "end": "3381970"
  },
  {
    "text": "know very much if you know cues and preconditions actions post conditions you've done most of computer science oh",
    "start": "3381970",
    "end": "3389530"
  },
  {
    "text": "yes and if it's zero it turns out that that's a Rondo what's called a rendezvous it's a it's the default",
    "start": "3389530",
    "end": "3395710"
  },
  {
    "text": "channel modeling go for example it's a very simple idea that you both have to be there synchronous communication",
    "start": "3395710",
    "end": "3400869"
  },
  {
    "text": "however we're going to deal with n is greater than zero so I've got the Java",
    "start": "3400869",
    "end": "3406030"
  },
  {
    "text": "code here I've got a capacity so we've got some banner capacity there's the length as the capacity we can ask it and then I've got an in queue I I can acute",
    "start": "3406030",
    "end": "3413500"
  },
  {
    "text": "if it's full then that that will fail but it's OK for it what fail is too",
    "start": "3413500",
    "end": "3419440"
  },
  {
    "text": "strong a word I'm going to basically say it's not it's basically says I'm sorry I'm full you know that's a well-defined action there's no exception here",
    "start": "3419440",
    "end": "3425230"
  },
  {
    "text": "likewise DQ is soft we have an optional of T that can be returned in other words",
    "start": "3425230",
    "end": "3430330"
  },
  {
    "text": "it's okay to DQ something that's not there you just get told that's okay it's a question you can ask",
    "start": "3430330",
    "end": "3435920"
  },
  {
    "text": "it's not a correct position now I'm not going to dive into the code for the cube but what I want to do is say I don't",
    "start": "3435920",
    "end": "3443120"
  },
  {
    "text": "want to revisit that idea that sometimes there is a relationship that is you might say always just like the stack is",
    "start": "3443120",
    "end": "3449270"
  },
  {
    "text": "neck over yeah it's exactly like the stack except for a bit that's not it turns out the non emptiness is",
    "start": "3449270",
    "end": "3456190"
  },
  {
    "text": "philosophically far more interesting if you're not empty then you can be non full but you can also be full and the",
    "start": "3456190",
    "end": "3462920"
  },
  {
    "text": "behavior of a stack that a queue that is full it's slightly different so there's a hierarchical model here now why am i",
    "start": "3462920",
    "end": "3470030"
  },
  {
    "text": "emphasizing that well because you can do that with the tests as well so using a unit five and with there's an ant nest",
    "start": "3470030",
    "end": "3478400"
  },
  {
    "text": "is actually a ssin then what I've got here is a slightly different story",
    "start": "3478400",
    "end": "3484430"
  },
  {
    "text": "here's the Q spec I've got a new Q an empty queue in a non-empty queue a new queue is empty and UQ preserves the",
    "start": "3484430",
    "end": "3490700"
  },
  {
    "text": "positive bounding capacity you can't you cannot be created with non positive bearing capacity an empty queue DQ's an",
    "start": "3490700",
    "end": "3496790"
  },
  {
    "text": "empty value so there's the fact that it's okay to get that your option will",
    "start": "3496790",
    "end": "3501920"
  },
  {
    "text": "be empty an empty queue remains empty when null is in queued that's an interesting behavior if you try and put null into it it'll be ignored but notice",
    "start": "3501920",
    "end": "3508340"
  },
  {
    "text": "how explicit this is I'm actually showing you how to use the class this is actually an instruction now it's not many a set of tests so when they all",
    "start": "3508340",
    "end": "3515000"
  },
  {
    "text": "pass they're all great in other words hey here all the features and they work these are all available if any of them",
    "start": "3515000",
    "end": "3520130"
  },
  {
    "text": "are read then basically says this feature is not available because of some book now it gets more interesting down",
    "start": "3520130",
    "end": "3525140"
  },
  {
    "text": "here a non empty queue that is not full becomes longer when non null value",
    "start": "3525140",
    "end": "3530180"
  },
  {
    "text": "include a non empty queue that is full ignores further in cubed values okay so",
    "start": "3530180",
    "end": "3535370"
  },
  {
    "text": "now we have a very clear specification behavior when you do concatenate all",
    "start": "3535370",
    "end": "3540410"
  },
  {
    "text": "these run-on sentences what you realize is you do actually have a specification these are propositions that can be true or false",
    "start": "3540410",
    "end": "3545660"
  },
  {
    "text": "and we've taken advantage of as it were you can't just look at the screen",
    "start": "3545660",
    "end": "3551890"
  },
  {
    "text": "sometimes you have to kind of step back from something talk to somebody sketch",
    "start": "3551890",
    "end": "3557180"
  },
  {
    "text": "something out what are you going to sketch well this is the thing is that we sometimes they're the guide to good",
    "start": "3557180",
    "end": "3563180"
  },
  {
    "text": "testing is to understand the shape of the thing is this a classifier is it a value object am i dealing with something that is",
    "start": "3563180",
    "end": "3568700"
  },
  {
    "text": "algorithmic am i dealing with something that has a lifecycle oh it does have a lifecycle life cycles most naturally",
    "start": "3568700",
    "end": "3575240"
  },
  {
    "text": "represented using certain state notations so maybe that's what I sketch ok so different kinds of things will",
    "start": "3575240",
    "end": "3580520"
  },
  {
    "text": "invite different frames of thinking and you can use those to then structure your tests and in this particular case we saw",
    "start": "3580520",
    "end": "3588170"
  },
  {
    "text": "that it is quite hierarchical the state there is nesting and we can actually use",
    "start": "3588170",
    "end": "3593360"
  },
  {
    "text": "that to our advantage in how we tell the story which gets us away from that tedium it would sometimes experience of",
    "start": "3593360",
    "end": "3599930"
  },
  {
    "text": "when sometimes people say oh yeah we got it we got a we got a test class for this it's got a hundred methods classes 100",
    "start": "3599930",
    "end": "3607220"
  },
  {
    "text": "methods are not readable it doesn't matter that you put the word test in them they're still not readable the",
    "start": "3607220",
    "end": "3612410"
  },
  {
    "text": "readability has not changed and then you've got names that run off the side of the screen or maybe not because",
    "start": "3612410",
    "end": "3617900"
  },
  {
    "text": "sometimes people sit there we go oh it's fine I've got a ready you know I've got an IMAX screen that's it's good you know that's great it's like yeah but I'm",
    "start": "3617900",
    "end": "3623450"
  },
  {
    "text": "still human it turns out and and honestly the weather at the other end of that name is different to the you know",
    "start": "3623450",
    "end": "3628900"
  },
  {
    "text": "whether it's start so there is this notion actually let us use one of these these ideas that we already know",
    "start": "3628900",
    "end": "3635750"
  },
  {
    "text": "factoring out common ality use of hierarchy let's actually make that visual okay so we take from a visual",
    "start": "3635750",
    "end": "3642080"
  },
  {
    "text": "formalism and we actually let the indentation follow so there is code yes",
    "start": "3642080",
    "end": "3650120"
  },
  {
    "text": "there is code but oh and with is an",
    "start": "3650120",
    "end": "3656120"
  },
  {
    "text": "observation Nicholas Werth in the 1970s when he was talking about structure programming basically made the",
    "start": "3656120",
    "end": "3661970"
  },
  {
    "text": "observation algorithms post data structures equals programs and I want to take a little bit goes go a bit further",
    "start": "3661970",
    "end": "3669860"
  },
  {
    "text": "I want to take a broader view slightly less reductionist structure plus",
    "start": "3669860",
    "end": "3675410"
  },
  {
    "text": "interpretation equals programs and it turns out that you can't put all of it in the code yes but some of it somewhere",
    "start": "3675410",
    "end": "3682010"
  },
  {
    "text": "else some of it will always exist in the minds of those who developed it some of it may or may not exist in an external",
    "start": "3682010",
    "end": "3688520"
  },
  {
    "text": "documentation but the idea that the test should carry some of the weight here and can carry some of the way in a",
    "start": "3688520",
    "end": "3694520"
  },
  {
    "text": "meaningful way that gives you both feedback in execution the Reds and the",
    "start": "3694520",
    "end": "3700820"
  },
  {
    "text": "greens now you actually have something to interpret it's deeper as set telling you something useful and constructive as",
    "start": "3700820",
    "end": "3706440"
  },
  {
    "text": "well as being a static description of what you're expecting so I hope that's been thought-provoking useful I'm around",
    "start": "3706440",
    "end": "3713400"
  },
  {
    "text": "all day so I won't take questions because we've just hit the break but I'm happy to take questions in the break and",
    "start": "3713400",
    "end": "3719010"
  },
  {
    "text": "throughout the day and of course remember the party's in here so I we're happy to take questions but the later in the evening it gets the more flippant my",
    "start": "3719010",
    "end": "3724980"
  },
  {
    "text": "responses may be thank you very much",
    "start": "3724980",
    "end": "3728660"
  }
]