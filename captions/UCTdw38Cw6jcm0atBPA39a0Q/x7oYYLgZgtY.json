[
  {
    "text": "here in europe it's uh midnight so um",
    "start": "8960",
    "end": "14000"
  },
  {
    "text": "i'm not quite as fresh as i used to be at conference but let's let's start",
    "start": "14000",
    "end": "20480"
  },
  {
    "text": "my name is michael stipe uh i'm a microsoft mvp and i'm one of the authors of the hot",
    "start": "20480",
    "end": "26640"
  },
  {
    "text": "chocolate graphql library for net and today i want to talk to you",
    "start": "26640",
    "end": "32078"
  },
  {
    "text": "about graphql in general what it is why you should care about it",
    "start": "32079",
    "end": "38480"
  },
  {
    "text": "and what we can do with it with asp.net core because i think a lot of you are net",
    "start": "38480",
    "end": "44719"
  },
  {
    "text": "developers so what is this graphql actually what",
    "start": "44719",
    "end": "50399"
  },
  {
    "text": "can we do with it why is it why does it exist so graphql originally was",
    "start": "50399",
    "end": "56640"
  },
  {
    "text": "developed by facebook in order to solve their data fetching issues between the backend",
    "start": "56640",
    "end": "63440"
  },
  {
    "text": "and their mobile applications and let's just head into some",
    "start": "63440",
    "end": "71280"
  },
  {
    "text": "graphql and explore what it is so if we look at this simple graphql",
    "start": "71280",
    "end": "76479"
  },
  {
    "text": "query here then we basically ask the server for the currently signed in user and",
    "start": "76479",
    "end": "83680"
  },
  {
    "text": "from this currently signed in user for the name and if we send that to a graphql server",
    "start": "83680",
    "end": "89840"
  },
  {
    "text": "we would get a response that closely aligns our to our request it almost",
    "start": "89840",
    "end": "96960"
  },
  {
    "text": "is as if the graphql server just fills up our request with some data it is not like that but",
    "start": "96960",
    "end": "104000"
  },
  {
    "text": "it's a good mental picture to start thinking about graphql but as our maybe we",
    "start": "104000",
    "end": "111920"
  },
  {
    "text": "as our use cases change over time we don't have to change our back end we",
    "start": "111920",
    "end": "118799"
  },
  {
    "text": "just can't change our requests for instance we ask for the profile picture of that user and",
    "start": "118799",
    "end": "126719"
  },
  {
    "text": "we might want to know the width the heights and the ul of the profile picture again the graphql server",
    "start": "126719",
    "end": "133120"
  },
  {
    "text": "would respond with some predictable results that closely align our",
    "start": "133120",
    "end": "138720"
  },
  {
    "text": "request and if we look closer at this actually we can see that graphql is",
    "start": "138720",
    "end": "145760"
  },
  {
    "text": "not about flat data structures or sparse fields we can see that it's actually about data",
    "start": "145760",
    "end": "150959"
  },
  {
    "text": "trees and if it's about data trees we actually can",
    "start": "150959",
    "end": "156160"
  },
  {
    "text": "push data aggregation now back to the backend like in this example we are exploring",
    "start": "156160",
    "end": "163360"
  },
  {
    "text": "related objects to our user we are fetching not only our user",
    "start": "163360",
    "end": "168480"
  },
  {
    "text": "we are also fetching the friends of our user but if we look closely at our request we",
    "start": "168480",
    "end": "175840"
  },
  {
    "text": "can see also some repetitions here like name and last scene is added two times",
    "start": "175840",
    "end": "181680"
  },
  {
    "text": "and if you think about larger graphql requests they would become a problem with copy pasting so",
    "start": "181680",
    "end": "188159"
  },
  {
    "text": "graphql has introduced for that something called a fragment a fragment in graphql",
    "start": "188159",
    "end": "193680"
  },
  {
    "text": "is a primitive of composition you can build fragment hierarchies with that like you",
    "start": "193680",
    "end": "199599"
  },
  {
    "text": "can build component hierarchies in your ui components and class hierarchies in",
    "start": "199599",
    "end": "205440"
  },
  {
    "text": "your background but enough about this here the theoretical constructs about graphql",
    "start": "205440",
    "end": "212239"
  },
  {
    "text": "looking about graphical queries i actually prepared a little exercise to get us all started",
    "start": "212239",
    "end": "218879"
  },
  {
    "text": "with graphql and understand the problems better so i hope you all know some",
    "start": "218879",
    "end": "225440"
  },
  {
    "text": "star wars because there is a api which is called swappy.com it's an exceptionally rest",
    "start": "225440",
    "end": "231840"
  },
  {
    "text": "api that tries to teach some principles of rest",
    "start": "231840",
    "end": "237360"
  },
  {
    "text": "let me switch over this star was api has a ton of star wars data",
    "start": "237360",
    "end": "243519"
  },
  {
    "text": "like the characters the planets the films and other things",
    "start": "243519",
    "end": "249840"
  },
  {
    "text": "what we want to build now or the experiment we want to do is to fetch all the characters just a",
    "start": "249840",
    "end": "256639"
  },
  {
    "text": "list of names of characters that played in movies alongside luke",
    "start": "256639",
    "end": "261840"
  },
  {
    "text": "skywalker a simply enough task so let's first explore our rest api",
    "start": "261840",
    "end": "268960"
  },
  {
    "text": "of um explorer rest api and check how we can do that",
    "start": "268960",
    "end": "274160"
  },
  {
    "text": "so our rest api exposes some resources here like the people resource we could do a simple fetch on that and",
    "start": "274160",
    "end": "281120"
  },
  {
    "text": "then we might get a list of characters like luke skywalker 3 cpo",
    "start": "281120",
    "end": "286560"
  },
  {
    "text": "and so on and if we look at that data we can already see that each of these",
    "start": "286560",
    "end": "293120"
  },
  {
    "text": "entities or characters has its own ui so we could fetch a specific character instance",
    "start": "293120",
    "end": "300320"
  },
  {
    "text": "like this three cpu and this character instance exposes a list of movies",
    "start": "300320",
    "end": "307360"
  },
  {
    "text": "and these movies are represented by reference so i can fetch this movie for instance",
    "start": "307360",
    "end": "314000"
  },
  {
    "text": "and get some data about that star wars movie like the episode id the",
    "start": "314000",
    "end": "319520"
  },
  {
    "text": "title and i can see the characters that appeared in that a movie",
    "start": "319520",
    "end": "325120"
  },
  {
    "text": "and i could drill in deeper and with this information i already kind of know how to create this",
    "start": "325120",
    "end": "331600"
  },
  {
    "text": "algorithm to fetch this list of names um and this is the only javascript you will see today",
    "start": "331600",
    "end": "338240"
  },
  {
    "text": "but i built up a little benchmarking here so um i built up a little functioning",
    "start": "338240",
    "end": "345520"
  },
  {
    "text": "in javascript to fetch the characters that appeared alongside luke skywalker in star wars",
    "start": "345520",
    "end": "351360"
  },
  {
    "text": "movies for that i fetched the luke skywalker character from the rest api",
    "start": "351360",
    "end": "357120"
  },
  {
    "text": "and then iterated over the films array and then i fetched each of the films",
    "start": "357120",
    "end": "365120"
  },
  {
    "text": "and the films exposed this characters array so i fetched each of the characters that",
    "start": "365120",
    "end": "370560"
  },
  {
    "text": "appeared in that film and then extracted did some data massaging extracted the name and built",
    "start": "370560",
    "end": "377280"
  },
  {
    "text": "up the list so let's have a look how that performs",
    "start": "377280",
    "end": "383039"
  },
  {
    "text": "so this is my little benchmark i pre-run it just uh to be sure that it",
    "start": "384160",
    "end": "390319"
  },
  {
    "text": "works it took 2.9 seconds which is not bad for all the data we had to fetch",
    "start": "390319",
    "end": "397120"
  },
  {
    "text": "so let's uh run it live and see how it turns out now we can see that we are aggregating a ton",
    "start": "397120",
    "end": "403759"
  },
  {
    "text": "of requests it's actually the same same amount of time here but we aggregated a ton of requests and fetched",
    "start": "403759",
    "end": "410880"
  },
  {
    "text": "a ton of data so that cannot be very efficient let's explore how we would do something",
    "start": "410880",
    "end": "417599"
  },
  {
    "text": "with uh with graphql so there is uh something called graphql",
    "start": "417599",
    "end": "423599"
  },
  {
    "text": "ids this graphql ide is built by our open source project it's called bananakpop like we",
    "start": "423599",
    "end": "430080"
  },
  {
    "text": "have we have a lot of special names and with that we can explore graphql",
    "start": "430080",
    "end": "436639"
  },
  {
    "text": "endpoints i built the stars api for graphql and this star wars api",
    "start": "436639",
    "end": "443360"
  },
  {
    "text": "actually fetches the data from the same rest service that we used uh",
    "start": "443360",
    "end": "448479"
  },
  {
    "text": "just a few seconds ago and when i open the graph by endpoint in my",
    "start": "448479",
    "end": "453599"
  },
  {
    "text": "graphql ide i can click here on the schema button and explore what the data is",
    "start": "453599",
    "end": "459360"
  },
  {
    "text": "about for instance i see that my graphql endpoint has a query root type and exposes some fields",
    "start": "459360",
    "end": "465599"
  },
  {
    "text": "in this instance a character field and if i click on that i can see that",
    "start": "465599",
    "end": "470879"
  },
  {
    "text": "the character returns a character here with some properties like eye color",
    "start": "470879",
    "end": "476080"
  },
  {
    "text": "a movies array that exposes movies and i could drill into that see that i can",
    "start": "476080",
    "end": "481360"
  },
  {
    "text": "actually look at the movie that the character played in and i also see that it again explores some characters okay so i",
    "start": "481360",
    "end": "490240"
  },
  {
    "text": "kind of have the same structure as my rest api but i also can see that i need to",
    "start": "490240",
    "end": "497120"
  },
  {
    "text": "provide an argument the id so let's have a look at how we can build something with that",
    "start": "497120",
    "end": "503440"
  },
  {
    "text": "let me switch back here so in graphql we already saw in the initial",
    "start": "503440",
    "end": "509280"
  },
  {
    "text": "examples of graphql aquarius we start with some squiggles and then we basically define from what",
    "start": "509280",
    "end": "515599"
  },
  {
    "text": "we want to fetch some data for instance we fetch the character and the character one which should be luke",
    "start": "515599",
    "end": "521599"
  },
  {
    "text": "skywalker and then we can pick from the properties that we have there",
    "start": "521599",
    "end": "527120"
  },
  {
    "text": "for instance the name now let's just fetch the character we can see boom we",
    "start": "527120",
    "end": "533279"
  },
  {
    "text": "get luke skywalker okay but actually we want to really get",
    "start": "533279",
    "end": "539120"
  },
  {
    "text": "all the movies and from the movies the characters that played alongside luke skywalker",
    "start": "539120",
    "end": "544480"
  },
  {
    "text": "so we fetch the movies and from the movies we fetch the",
    "start": "544480",
    "end": "550560"
  },
  {
    "text": "characters and from the character's name and",
    "start": "550560",
    "end": "555839"
  },
  {
    "text": "actually luke skywalker's way the name we don't need we just want the names of the characters that played",
    "start": "555839",
    "end": "560880"
  },
  {
    "text": "alongside alongside luke skywalker let's fetch that 45 milliseconds the same rest api",
    "start": "560880",
    "end": "569760"
  },
  {
    "text": "but it doesn't have to transfer to it down to me and i don't have any cascading requests and",
    "start": "569760",
    "end": "577920"
  },
  {
    "text": "i basically don't have to write any code in javascript apart from destructoring here my response structure",
    "start": "577920",
    "end": "585680"
  },
  {
    "text": "to get just a list of names so let's go to our benchmark",
    "start": "585680",
    "end": "594560"
  },
  {
    "text": "let's just head have a look at our developer tools as we did with our rest request just run",
    "start": "595360",
    "end": "601839"
  },
  {
    "text": "that yeah 247 milliseconds so it depends on how fast we get the data from the rest",
    "start": "601839",
    "end": "608320"
  },
  {
    "text": "service and we can see we just have two requests",
    "start": "608320",
    "end": "613440"
  },
  {
    "text": "okay that's quite quite awesome um we have a multiple times faster request",
    "start": "613519",
    "end": "620399"
  },
  {
    "text": "we don't have a lot of connections and that's exactly why um facebook developed",
    "start": "620399",
    "end": "626880"
  },
  {
    "text": "graphql in order to get rid of the aggregation of data on the client side",
    "start": "626880",
    "end": "632959"
  },
  {
    "text": "because on mobile applications with a bad connection to the internet this",
    "start": "632959",
    "end": "638800"
  },
  {
    "text": "really matters and it also matters on my system where i have one gigabit internet connection because it still",
    "start": "638800",
    "end": "645200"
  },
  {
    "text": "took 2.9 milliseconds to fetch the data",
    "start": "645200",
    "end": "650240"
  },
  {
    "text": "okay with graphql i only have one endpoint because i only need one endpoint because",
    "start": "650320",
    "end": "658079"
  },
  {
    "text": "i as the consumer define what requests i want i def i craft them and i send them to the",
    "start": "658079",
    "end": "664640"
  },
  {
    "text": "server and that means i also can fetch all the data that i need at one specific",
    "start": "664640",
    "end": "671519"
  },
  {
    "text": "moment in time with one request and this gets really rid of the over and",
    "start": "671519",
    "end": "677120"
  },
  {
    "text": "under fetching problem on the client side meaning over fetching is basically when",
    "start": "677120",
    "end": "682160"
  },
  {
    "text": "i had to consume all this data from luke skywalker the firms and all the characters that i actually don't need i just needed",
    "start": "682160",
    "end": "688640"
  },
  {
    "text": "the list of names and under fetching is when i had to fetch another request that is cascading when i",
    "start": "688640",
    "end": "695839"
  },
  {
    "text": "basically built up those cascading request pipelines where each request had to wait for the previous request and",
    "start": "695839",
    "end": "703279"
  },
  {
    "text": "basically my data fetching was unparallelizable",
    "start": "703279",
    "end": "708160"
  },
  {
    "text": "and graphql is built on a strong type system that means if graphql tells you that a field is a",
    "start": "708480",
    "end": "714240"
  },
  {
    "text": "string then this field is a string and will never be an hint on the client side and if graphql tells you something is",
    "start": "714240",
    "end": "720240"
  },
  {
    "text": "never null it will never be known and this really lets you",
    "start": "720240",
    "end": "725600"
  },
  {
    "text": "write code in a different way on the client side because you can do assumptions about the data",
    "start": "725600",
    "end": "732880"
  },
  {
    "text": "but apart from that graphql is not only just simple fetch and and pushing data to the server it's",
    "start": "733600",
    "end": "741839"
  },
  {
    "text": "also real time and we will look at that in our",
    "start": "741839",
    "end": "747040"
  },
  {
    "text": "examples that we will do in a minute so we could also do a lot of this with",
    "start": "747040",
    "end": "753440"
  },
  {
    "text": "rest we could build very specific endpoints that fetch everything very",
    "start": "753440",
    "end": "758880"
  },
  {
    "text": "very efficient for us but with rest we also we always have to work together with our",
    "start": "758880",
    "end": "765440"
  },
  {
    "text": "backend engineer we have to define um new resources new endpoints which",
    "start": "765440",
    "end": "772160"
  },
  {
    "text": "basically gives us the data more efficiently and we all know that uh maybe our backend guys",
    "start": "772160",
    "end": "778720"
  },
  {
    "text": "have no time it goes back to the backlog it slows down the front-end engineers also",
    "start": "778720",
    "end": "784800"
  },
  {
    "text": "there's a lot of negotiation between backhand and front-end engineer and there's a lot going wrong with this",
    "start": "784800",
    "end": "791200"
  },
  {
    "text": "so uh with graphql we don't have that",
    "start": "791200",
    "end": "796320"
  },
  {
    "text": "so what is graphql graphql is a query language for your api and",
    "start": "796320",
    "end": "802560"
  },
  {
    "text": "it's a runtime to execute those queries and graphql is really thought from the business layer so when facebook started",
    "start": "802560",
    "end": "809839"
  },
  {
    "text": "developing that the backend engineers came together and thought about how they could",
    "start": "809839",
    "end": "816480"
  },
  {
    "text": "expose the business layer in a much better way so graphql gives you a much richer way",
    "start": "816480",
    "end": "822720"
  },
  {
    "text": "to expose your backend data but graphql is also great as a",
    "start": "822720",
    "end": "828639"
  },
  {
    "text": "gateway technology where you bring together all those microservices that you have in the back end and build this",
    "start": "828639",
    "end": "834959"
  },
  {
    "text": "ubiquitous um a data graph which is which we present",
    "start": "834959",
    "end": "840000"
  },
  {
    "text": "the single source of truth of your business model",
    "start": "840000",
    "end": "846079"
  },
  {
    "text": "so graphql reverses the responsibilities and gives the consumer the power to ask",
    "start": "846480",
    "end": "853120"
  },
  {
    "text": "exactly for what they want nothing more but this also in turn frightens some",
    "start": "853120",
    "end": "859360"
  },
  {
    "text": "back-end developers because now you basically have the power to drill into arbitrary data of the",
    "start": "859360",
    "end": "865760"
  },
  {
    "text": "back-end and fetch like you want and how can we as a back-end developer now",
    "start": "865760",
    "end": "871199"
  },
  {
    "text": "make sure that uh some requests don't kill our server so actually graphql is not only a query",
    "start": "871199",
    "end": "879120"
  },
  {
    "text": "language it's also a data definition language and this is actually the chance for us second developers to",
    "start": "879120",
    "end": "886160"
  },
  {
    "text": "mold uh our data graph or mold how the consumer of our",
    "start": "886160",
    "end": "891199"
  },
  {
    "text": "api can access our data how does the front-end engineer really interact with",
    "start": "891199",
    "end": "897199"
  },
  {
    "text": "us what costs do we allow for queries and how is uh how is this front-end",
    "start": "897199",
    "end": "905440"
  },
  {
    "text": "developer able to access our data we can all mode this in a very strong way",
    "start": "905440",
    "end": "913600"
  },
  {
    "text": "okay so in graphql we have three or three operation kinds there's query we",
    "start": "913600",
    "end": "919199"
  },
  {
    "text": "saw that basically side effect we side effect three patches of data then we have something",
    "start": "919199",
    "end": "926000"
  },
  {
    "text": "called mutation which is a put post patch delete of rest and it's basically what produces",
    "start": "926000",
    "end": "933360"
  },
  {
    "text": "side effects and then we have something that we don't have in rest it's called subscription",
    "start": "933360",
    "end": "938639"
  },
  {
    "text": "and it's a basically real-time data you have something like that with websockets or signalr but on a much",
    "start": "938639",
    "end": "946399"
  },
  {
    "text": "lower level with graphql it's basically as if you were consuming",
    "start": "946399",
    "end": "951920"
  },
  {
    "text": "a graphql query and we will see that before we get into our demos let's also",
    "start": "951920",
    "end": "958639"
  },
  {
    "text": "talk about what graphql is not graphql is not a graph database query language",
    "start": "958639",
    "end": "965279"
  },
  {
    "text": "it in fact has nothing to do with databases or any uh graph databases or databases",
    "start": "965279",
    "end": "972639"
  },
  {
    "text": "or it also has nothing to do with odata if you look at all data odata is more",
    "start": "972639",
    "end": "979519"
  },
  {
    "text": "designed like sql query like you have all those filter methods you know",
    "start": "979519",
    "end": "985680"
  },
  {
    "text": "it's very close to a database uh query language and it was also designed with",
    "start": "985680",
    "end": "990720"
  },
  {
    "text": "this mental picture when it started as adam pop with its atom pub format format a few",
    "start": "990720",
    "end": "997120"
  },
  {
    "text": "years ago but graphql really was designed from the",
    "start": "997120",
    "end": "1002560"
  },
  {
    "text": "api layer perspective so it's much richer graphql is not a good",
    "start": "1002560",
    "end": "1009279"
  },
  {
    "text": "solution for binary students and netflix is really using graphql but they're not using it to stream",
    "start": "1009279",
    "end": "1015759"
  },
  {
    "text": "movies so it's good for structured data",
    "start": "1015759",
    "end": "1020639"
  },
  {
    "text": "and some misconception is also around that graphql is for http but it's",
    "start": "1020959",
    "end": "1026400"
  },
  {
    "text": "actually transport agnostic so it works over grpc it works over hdp it works over websockets about tcp",
    "start": "1026400",
    "end": "1033839"
  },
  {
    "text": "whatever you want and one misconception that actually i said in the beginning is not",
    "start": "1033839",
    "end": "1040400"
  },
  {
    "text": "true is that it's not designed for the javascript world actually the first graphql server was",
    "start": "1040400",
    "end": "1046319"
  },
  {
    "text": "not written in node and it was uh written in a php",
    "start": "1046319",
    "end": "1052480"
  },
  {
    "text": "by facebook and also the uh front end consuming clients were written",
    "start": "1052480",
    "end": "1058640"
  },
  {
    "text": "in native um were written native clients for mobile applications so it had had",
    "start": "1058640",
    "end": "1066160"
  },
  {
    "text": "nothing to do with actually web in this instance or with javascript",
    "start": "1066160",
    "end": "1072799"
  },
  {
    "text": "okay let's explore how that actually works let's see some code let me get rid of this browser here",
    "start": "1072799",
    "end": "1080559"
  },
  {
    "text": "and then let's head into some code",
    "start": "1080559",
    "end": "1087759"
  },
  {
    "text": "okay so i opened up visual studio code this",
    "start": "1088080",
    "end": "1093840"
  },
  {
    "text": "is actually an empty project there's nothing at the moment",
    "start": "1093840",
    "end": "1099200"
  },
  {
    "text": "so the first thing we do is we create a new solution um let's call it demo",
    "start": "1099200",
    "end": "1109840"
  },
  {
    "text": "and the next thing we do is create a new project let's create a new web project",
    "start": "1111120",
    "end": "1117440"
  },
  {
    "text": "and let's call it also demo",
    "start": "1117440",
    "end": "1123280"
  },
  {
    "text": "and just uh add it to our solution as a hat demo",
    "start": "1123280",
    "end": "1130480"
  },
  {
    "text": "and now we have a proper web project here actually um it's a standard empty",
    "start": "1130480",
    "end": "1136400"
  },
  {
    "text": "asp.net core web application there's nothing special to it we have our startup that we know",
    "start": "1136400",
    "end": "1144000"
  },
  {
    "text": "there's nothing in here it's just a net five application and since we are doing dot net five we",
    "start": "1144000",
    "end": "1149919"
  },
  {
    "text": "are using our brand new graphql server today that is still in preview like dot net five we",
    "start": "1149919",
    "end": "1157600"
  },
  {
    "text": "will release it alongside dot net five so we are doing dot net add package",
    "start": "1157600",
    "end": "1163600"
  },
  {
    "text": "let me add package to demo and it's the hot chocolate",
    "start": "1163600",
    "end": "1171120"
  },
  {
    "text": "hp net core package in version 11. preview",
    "start": "1171840",
    "end": "1181039"
  },
  {
    "text": "154 let's add that let's just reload the solution so",
    "start": "1181960",
    "end": "1189120"
  },
  {
    "text": "everything is indexed correctly and go into our startup cs",
    "start": "1189120",
    "end": "1195520"
  },
  {
    "text": "so every graphql server actually starts with a query a query is what you need for a graphql",
    "start": "1195520",
    "end": "1202159"
  },
  {
    "text": "server if you don't have a query type you don't have a graphql server and mutations and subscriptions are",
    "start": "1202159",
    "end": "1208080"
  },
  {
    "text": "optional but you need to have something to query so a query type actually is",
    "start": "1208080",
    "end": "1215120"
  },
  {
    "text": "represented in dotnet as a class query you can name it differently you can call",
    "start": "1215120",
    "end": "1221200"
  },
  {
    "text": "it foo but it's up to you but it is a class and you need some resolvers on",
    "start": "1221200",
    "end": "1228960"
  },
  {
    "text": "it resolvers are the fields that fetch the data for you so if i write here something like a",
    "start": "1228960",
    "end": "1235679"
  },
  {
    "text": "public string say hello and return a string hello and this is our",
    "start": "1235679",
    "end": "1243360"
  },
  {
    "text": "resolver and i could query that let's make it more exciting let's say we have a string here",
    "start": "1243360",
    "end": "1249760"
  },
  {
    "text": "with a name and we type the name in here",
    "start": "1249760",
    "end": "1256880"
  },
  {
    "text": "and by default it actually is michael i know michael so let's run that",
    "start": "1256880",
    "end": "1266240"
  },
  {
    "text": "project demo",
    "start": "1268159",
    "end": "1271760"
  },
  {
    "text": "okay let's grab that so a graphql server by default is hosted",
    "start": "1273440",
    "end": "1280320"
  },
  {
    "text": "on is hosted on the endpoint on graphql",
    "start": "1280320",
    "end": "1290000"
  },
  {
    "text": "i just can't call that actually i should be oh we forgot something we created this",
    "start": "1290000",
    "end": "1296000"
  },
  {
    "text": "query type but we didn't actually create our schema so the first thing we need to do is",
    "start": "1296000",
    "end": "1301280"
  },
  {
    "text": "actually create our query type and set up our schema and this is basically done by using the",
    "start": "1301280",
    "end": "1307600"
  },
  {
    "text": "service collection here saying add graphql server",
    "start": "1307600",
    "end": "1312639"
  },
  {
    "text": "add query type and then we add our query type here and the second thing we need to do is to",
    "start": "1315280",
    "end": "1320640"
  },
  {
    "text": "add something that executes our graphql server so we use the endpoints api and set",
    "start": "1320640",
    "end": "1326480"
  },
  {
    "text": "say map graphql and now we repeat",
    "start": "1326480",
    "end": "1333600"
  },
  {
    "text": "what we did we start our server",
    "start": "1333600",
    "end": "1337360"
  },
  {
    "text": "go into our chrome here and now on graphql is our graphql id",
    "start": "1338799",
    "end": "1346880"
  },
  {
    "text": "which i get rid of this and this is uh basically a served up when you go with the browser",
    "start": "1346880",
    "end": "1352720"
  },
  {
    "text": "on this endpoint we will serve up a banana cake pop so you have something to debug square",
    "start": "1352720",
    "end": "1358400"
  },
  {
    "text": "and okay so i can go now here in my schema explorer and see",
    "start": "1358400",
    "end": "1363520"
  },
  {
    "text": "i have a field say hello here it is a string it's actually a nullable string and we will see why it's that in a bit",
    "start": "1363520",
    "end": "1371600"
  },
  {
    "text": "and i can now query for this graphql field here say hello and i get hello michael",
    "start": "1371600",
    "end": "1379440"
  },
  {
    "text": "and i could also see that i can say hello sydney",
    "start": "1380240",
    "end": "1388720"
  },
  {
    "text": "and then i get hello sydney here so the the um schema builder of hot chocolate will",
    "start": "1388720",
    "end": "1395039"
  },
  {
    "text": "inspect what c code you write and infer from that actually your graphql schema",
    "start": "1395039",
    "end": "1400799"
  },
  {
    "text": "if we look at that we can already see that it's really the default value that is correctly",
    "start": "1400799",
    "end": "1406640"
  },
  {
    "text": "inferred but everything here is nullable and graphql has a concept of nullability",
    "start": "1406640",
    "end": "1412320"
  },
  {
    "text": "and that's why we should also enable nullability in graphql like we should say nullable",
    "start": "1412320",
    "end": "1420960"
  },
  {
    "text": "enable",
    "start": "1421520",
    "end": "1424000"
  },
  {
    "text": "let's reload this code so it reloads the",
    "start": "1428799",
    "end": "1434480"
  },
  {
    "text": "the project file let's restart that",
    "start": "1434799",
    "end": "1439200"
  },
  {
    "text": "re-fetch our schema and we can now see this exclamation mark and that means this",
    "start": "1443440",
    "end": "1449679"
  },
  {
    "text": "field is non-nullable so it doesn't allow null and when i now fire that it actually executes the",
    "start": "1449679",
    "end": "1457360"
  },
  {
    "text": "same but if i would provide null here it already squiggles me here and says okay you",
    "start": "1457360",
    "end": "1463760"
  },
  {
    "text": "cannot you cannot put null in here and if i would execute that it actually allows me now which is",
    "start": "1463760",
    "end": "1470559"
  },
  {
    "text": "not good as i said it's a preview and i just found a nice bug",
    "start": "1470559",
    "end": "1478880"
  },
  {
    "text": "that's interesting okay",
    "start": "1480559",
    "end": "1486559"
  },
  {
    "text": "let's head into the next uh next demo so we did our first graphql server",
    "start": "1486559",
    "end": "1495279"
  },
  {
    "text": "awesome and we also found the bug for our v11 server i will look at that after the talk",
    "start": "1495279",
    "end": "1504320"
  },
  {
    "text": "okay but this is just a simple example like in real life you would actually use",
    "start": "1504880",
    "end": "1511200"
  },
  {
    "text": "something like maybe entity framework mongodb some database uh some proper objects to",
    "start": "1511200",
    "end": "1517840"
  },
  {
    "text": "expose in your graphql api so how would that work actually how would a graphql",
    "start": "1517840",
    "end": "1523679"
  },
  {
    "text": "server develop when we put proper objects in there",
    "start": "1523679",
    "end": "1528960"
  },
  {
    "text": "so let's get back to our graphql server",
    "start": "1528960",
    "end": "1534158"
  },
  {
    "text": "availability no nullability has to be enabled to enable nullability compilation there",
    "start": "1537279",
    "end": "1543440"
  },
  {
    "text": "was a question i didn't don't know if you see if it shouldn't be disabled so if you enable nullable it means that",
    "start": "1543440",
    "end": "1550799"
  },
  {
    "text": "the uh that the compiler now annotates these um reference types in a.net",
    "start": "1550799",
    "end": "1558480"
  },
  {
    "text": "and now i have nullable reference types so if nullable is enabled actually reference types like this",
    "start": "1558480",
    "end": "1566400"
  },
  {
    "text": "become nullable reference types and this would be another version so",
    "start": "1566400",
    "end": "1572640"
  },
  {
    "text": "this means if i run that",
    "start": "1572640",
    "end": "1576000"
  },
  {
    "text": "i would now let's refresh that get a nullable version of the argument",
    "start": "1578640",
    "end": "1585760"
  },
  {
    "text": "here and actually the execution engine should have raised an",
    "start": "1585760",
    "end": "1591440"
  },
  {
    "text": "issue for me providing null here",
    "start": "1591440",
    "end": "1599440"
  },
  {
    "text": "but that is uh so we have a stable version 10.5 the this version is actually x uh coming",
    "start": "1599440",
    "end": "1605360"
  },
  {
    "text": "out at the end of october so there are still some bugs but it also",
    "start": "1605360",
    "end": "1610400"
  },
  {
    "text": "lets me show off some nice.5 features okay",
    "start": "1610400",
    "end": "1617679"
  },
  {
    "text": "so uh let's put some proper models in here i have already prepared here some data",
    "start": "1618400",
    "end": "1623679"
  },
  {
    "text": "models so i'm not boring you with typing we're putting them in so it's very really a simple",
    "start": "1623679",
    "end": "1629279"
  },
  {
    "text": "data model some author that has a name and an id and an also has some books",
    "start": "1629279",
    "end": "1635520"
  },
  {
    "text": "and a book has a author and title and uh yeah an author id",
    "start": "1635520",
    "end": "1642000"
  },
  {
    "text": "so very simple model then we have some uh db context which at the moment screams",
    "start": "1642000",
    "end": "1647600"
  },
  {
    "text": "at me because i didn't have any entity framework reference here we will fix that in a bit",
    "start": "1647600",
    "end": "1652799"
  },
  {
    "text": "but it's basically a simple db context we will be using sqlite here",
    "start": "1652799",
    "end": "1659919"
  },
  {
    "text": "and we call that demo um and yeah it's a basic setup",
    "start": "1659919",
    "end": "1666320"
  },
  {
    "text": "so let's uh add some and i prepared uh some commands so i also don't type",
    "start": "1666320",
    "end": "1672960"
  },
  {
    "text": "this is a new entity framework actually what we are using here uh entity framework five also preview",
    "start": "1672960",
    "end": "1681120"
  },
  {
    "text": "and uh let's add also some data integration here for hot chocolate that enables some uh",
    "start": "1681120",
    "end": "1688559"
  },
  {
    "text": "functionality i will walk you through as we upgrade the whole server okay so we",
    "start": "1688559",
    "end": "1696000"
  },
  {
    "text": "added some packages here and in order to really run this thing we",
    "start": "1696000",
    "end": "1701039"
  },
  {
    "text": "need uh to create a database and for this uh there is some tooling uh some local tools um for",
    "start": "1701039",
    "end": "1708720"
  },
  {
    "text": "entity framework i will install these and then we basically run some like",
    "start": "1708720",
    "end": "1714480"
  },
  {
    "text": "create some migrations and run them so we will end up with the database",
    "start": "1714480",
    "end": "1719760"
  },
  {
    "text": "so it built the project now it should yeah there's migrations coming here",
    "start": "1719760",
    "end": "1727279"
  },
  {
    "text": "and now we have a database okay so let's build this server out",
    "start": "1727279",
    "end": "1734799"
  },
  {
    "text": "so in order to have to put entity framework into our server we first have to go get up here and add",
    "start": "1735279",
    "end": "1743039"
  },
  {
    "text": "entity framework since graphql on queries executes in",
    "start": "1743039",
    "end": "1748880"
  },
  {
    "text": "parallel with multiple threads it's actually not so good for entity framework but",
    "start": "1748880",
    "end": "1754159"
  },
  {
    "text": "entity framework five allows to use pooled db contexts that we can rent and return",
    "start": "1754159",
    "end": "1761440"
  },
  {
    "text": "so each thread that then executes something against an entity context can have its own db context",
    "start": "1761440",
    "end": "1768480"
  },
  {
    "text": "without producing too much allocations so this is now called add pooled db context factory",
    "start": "1768480",
    "end": "1776240"
  },
  {
    "text": "and let me just grab this guy here get rid of",
    "start": "1776240",
    "end": "1782880"
  },
  {
    "text": "this i just needed that for the um for the database migration generation",
    "start": "1782880",
    "end": "1790159"
  },
  {
    "text": "and let's put that in here i'm not an anti-framework guy actually so i'm not",
    "start": "1790159",
    "end": "1798559"
  },
  {
    "text": "as let's reload that",
    "start": "1798559",
    "end": "1804240"
  },
  {
    "text": "wait a second add pulled yes that actually should work",
    "start": "1807200",
    "end": "1815600"
  },
  {
    "text": "let's compile that",
    "start": "1815600",
    "end": "1823840"
  },
  {
    "text": "what what ah yes i forgot to specify the db context that",
    "start": "1824640",
    "end": "1829919"
  },
  {
    "text": "we want to use so it's the books the book books no book context",
    "start": "1829919",
    "end": "1837600"
  },
  {
    "text": "and then we say import stuff here yes and now it will work",
    "start": "1837600",
    "end": "1845919"
  },
  {
    "text": "yeah import this and now we are out of the woods that's uh as",
    "start": "1846399",
    "end": "1852000"
  },
  {
    "text": "far as i know about entity framework and as far we need for the talk so",
    "start": "1852000",
    "end": "1857519"
  },
  {
    "text": "the next thing really with um a query type we can head back here let's get rid of",
    "start": "1857519",
    "end": "1864080"
  },
  {
    "text": "our simple resolver here and put some proper database logic in here",
    "start": "1864080",
    "end": "1869600"
  },
  {
    "text": "this could also be some other database technology as i said so in this instance we are using a",
    "start": "1869600",
    "end": "1875679"
  },
  {
    "text": "variable of maybe book and we call this get books",
    "start": "1875679",
    "end": "1882480"
  },
  {
    "text": "and then we need some db context so let's put the db context in here book",
    "start": "1882960",
    "end": "1888960"
  },
  {
    "text": "context context and maybe just return from the book context the books",
    "start": "1888960",
    "end": "1898000"
  },
  {
    "text": "and actually let's do that the same thing for the authors",
    "start": "1898000",
    "end": "1903600"
  },
  {
    "text": "get author and in this instance we are returning the",
    "start": "1904320",
    "end": "1910480"
  },
  {
    "text": "authors so this is basically this is very simple stuff but i said graphql is executing in",
    "start": "1910480",
    "end": "1917840"
  },
  {
    "text": "parallel so how do we inject this stuff there is something called the middleware",
    "start": "1917840",
    "end": "1924159"
  },
  {
    "text": "in graphql it's a field middleware and we can annotate field middlewares onto our resolver methods",
    "start": "1924159",
    "end": "1929679"
  },
  {
    "text": "so we can say use db context",
    "start": "1929679",
    "end": "1935840"
  },
  {
    "text": "import that this is one of the things that i installed basically with the packages that i installed for hot",
    "start": "1936799",
    "end": "1942480"
  },
  {
    "text": "chocolate and now i can just define which book context i want",
    "start": "1942480",
    "end": "1947600"
  },
  {
    "text": "and then i specify here that this is actually a scoped a field scoped context",
    "start": "1947600",
    "end": "1953360"
  },
  {
    "text": "so it just lives for the execution field scoped service sorry and it just",
    "start": "1953360",
    "end": "1960399"
  },
  {
    "text": "lives for the time of the execution of this field",
    "start": "1960399",
    "end": "1966240"
  },
  {
    "text": "and the same let's do here and also just steal this attribute put",
    "start": "1966240",
    "end": "1974159"
  },
  {
    "text": "it here and let's rerun our server it should already work",
    "start": "1974159",
    "end": "1981440"
  },
  {
    "text": "okay let's rerun that go back here re-fetch the schema",
    "start": "1989200",
    "end": "1999519"
  },
  {
    "text": "we get books and we can click on that we can see that we not only have the top",
    "start": "1999519",
    "end": "2005120"
  },
  {
    "text": "level fields we can really drill in we have the um the books",
    "start": "2005120",
    "end": "2010480"
  },
  {
    "text": "collection that we have here we can see the author and we could drill in forever so we didn't do a lot just two lines of",
    "start": "2010480",
    "end": "2017360"
  },
  {
    "text": "code actually and this entity uh framework stuff and we already have um quite a populated schema we just can",
    "start": "2017360",
    "end": "2024640"
  },
  {
    "text": "query this stuff we already could ask for some data let's let's just try that",
    "start": "2024640",
    "end": "2031360"
  },
  {
    "text": "um books and maybe get the title but there is no data in it right so we",
    "start": "2031360",
    "end": "2038559"
  },
  {
    "text": "are asking for stuff that we didn't we don't we don't have yet",
    "start": "2038559",
    "end": "2043760"
  },
  {
    "text": "so we don't get any data back",
    "start": "2043760",
    "end": "2047840"
  },
  {
    "text": "okay so in order to put some data in here we actually",
    "start": "2051679",
    "end": "2061440"
  },
  {
    "text": "we actually and and that's why i actually got an arrow",
    "start": "2061440",
    "end": "2066638"
  },
  {
    "text": "just fix that",
    "start": "2066639",
    "end": "2071760"
  },
  {
    "text": "on that again still get the narrow",
    "start": "2071760",
    "end": "2077679"
  },
  {
    "text": "demo db demo db should work actually",
    "start": "2079200",
    "end": "2084000"
  },
  {
    "text": "let me do one more check",
    "start": "2085200",
    "end": "2089838"
  },
  {
    "text": "should it be get now it should be it should work to be",
    "start": "2091200",
    "end": "2097680"
  },
  {
    "text": "working so i have the book context here context there",
    "start": "2097680",
    "end": "2103920"
  },
  {
    "text": "work everything so let's debug live",
    "start": "2103920",
    "end": "2108640"
  },
  {
    "text": "debugging not here take",
    "start": "2114839",
    "end": "2120880"
  },
  {
    "text": "this instance",
    "start": "2120880",
    "end": "2123599"
  },
  {
    "text": "get the schema type in our query and then we will get",
    "start": "2133359",
    "end": "2138800"
  },
  {
    "text": "the debug errors because if you start the server actually in debug it will tell you what",
    "start": "2138800",
    "end": "2144320"
  },
  {
    "text": "it what is happening so we get a 500 we can look at the response",
    "start": "2144320",
    "end": "2149680"
  },
  {
    "text": "response and can see that it cannot get the uh get the context actually",
    "start": "2149680",
    "end": "2158960"
  },
  {
    "text": "ah yes i know so it's telling us that the db context actually is missing uh the",
    "start": "2158960",
    "end": "2166400"
  },
  {
    "text": "correct constructor it has um it has i would say the correct",
    "start": "2166400",
    "end": "2173920"
  },
  {
    "text": "constructor it's not correct compiled",
    "start": "2173920",
    "end": "2182240"
  },
  {
    "text": "okay but i have a fallback solution so let's just",
    "start": "2184640",
    "end": "2190240"
  },
  {
    "text": "wrap for my working solution as i said",
    "start": "2190240",
    "end": "2197680"
  },
  {
    "text": "which actually looks the same okay on that again",
    "start": "2199280",
    "end": "2207440"
  },
  {
    "text": "and now it should work i would guess it doesn't work",
    "start": "2207440",
    "end": "2215839"
  },
  {
    "text": "past books so let's let me just grab my",
    "start": "2216800",
    "end": "2224960"
  },
  {
    "text": "um query over and then",
    "start": "2224960",
    "end": "2229838"
  },
  {
    "text": "let me see what is wrong",
    "start": "2236960",
    "end": "2243838"
  },
  {
    "text": "it's always when you practice it it always works out but then the moment you are",
    "start": "2247359",
    "end": "2252480"
  },
  {
    "text": "doing it live it's crashing and burning",
    "start": "2252480",
    "end": "2258560"
  },
  {
    "text": "okay so let's switch over to my other project which i have already",
    "start": "2263119",
    "end": "2268160"
  },
  {
    "text": "prepared and i walk you through it",
    "start": "2268160",
    "end": "2271838"
  },
  {
    "text": "project okay",
    "start": "2282839",
    "end": "2288640"
  },
  {
    "text": "ah alright",
    "start": "2290320",
    "end": "2294560"
  },
  {
    "text": "project like sorry for that",
    "start": "2296839",
    "end": "2313838"
  },
  {
    "text": "now it's building okay this should not work",
    "start": "2315680",
    "end": "2327839"
  },
  {
    "text": "okay so it really is broken and i don't know why",
    "start": "2330880",
    "end": "2338880"
  },
  {
    "text": "okay i'll walk you through through it a bit and then we'll uh see maybe we find the error that my",
    "start": "2338880",
    "end": "2345040"
  },
  {
    "text": "system has it usually works but maybe i'm too tired to see it okay",
    "start": "2345040",
    "end": "2352480"
  },
  {
    "text": "so basically what we did is we built some queries out and here we see",
    "start": "2352480",
    "end": "2358800"
  },
  {
    "text": "the more advanced version of the of the query uh it's enough actually to inject the db",
    "start": "2358800",
    "end": "2365119"
  },
  {
    "text": "context here and then return just some data and what we can actually do to improve",
    "start": "2365119",
    "end": "2371680"
  },
  {
    "text": "that is actually put in some filtering so we could just annotate",
    "start": "2371680",
    "end": "2376720"
  },
  {
    "text": "another middleware that basically is built in in hot chocolate and allows us to rewrite the",
    "start": "2376720",
    "end": "2383839"
  },
  {
    "text": "um draft code queries that coming into native sql via entity framework and also do some",
    "start": "2383839",
    "end": "2392079"
  },
  {
    "text": "sorting on top of it if we look at our schema",
    "start": "2392079",
    "end": "2397839"
  },
  {
    "text": "which i hope we get then we can see if we look at the books",
    "start": "2397839",
    "end": "2405200"
  },
  {
    "text": "resolver that we have some proper filter logic here like i could um see that my filter",
    "start": "2405200",
    "end": "2413520"
  },
  {
    "text": "allows for and or operations i can drill into the ids into the fields do nested",
    "start": "2413520",
    "end": "2419599"
  },
  {
    "text": "searches on that so if i actually went here to my books resolver now i could",
    "start": "2419599",
    "end": "2428800"
  },
  {
    "text": "join into the where look for instance for books that are",
    "start": "2428800",
    "end": "2434800"
  },
  {
    "text": "written by a certain author and the certain author should have a",
    "start": "2434800",
    "end": "2441520"
  },
  {
    "text": "name maybe the name should contain",
    "start": "2441520",
    "end": "2446240"
  },
  {
    "text": "should contain maybe an m and then we would be able to actually fetch that",
    "start": "2449280",
    "end": "2457280"
  },
  {
    "text": "let me just try one more time i cannot believe that this is broken",
    "start": "2458560",
    "end": "2467839"
  },
  {
    "text": "that makes me kind of sad such a cool",
    "start": "2473359",
    "end": "2478400"
  },
  {
    "text": "demo yeah it's really broken entity framework",
    "start": "2478839",
    "end": "2484880"
  },
  {
    "text": "it is really a shame does the bee have books it does",
    "start": "2484880",
    "end": "2491040"
  },
  {
    "text": "and you can see here that the good thing is on my error here that you can see that it really translated this query",
    "start": "2491040",
    "end": "2497520"
  },
  {
    "text": "into proper sql so you can see um i asked for the authors and stuff",
    "start": "2497520",
    "end": "2503520"
  },
  {
    "text": "and it transferred it really into the name no such table books",
    "start": "2503520",
    "end": "2513040"
  },
  {
    "text": "do you know let's let's try that let's get rid of the table and just",
    "start": "2513520",
    "end": "2522880"
  },
  {
    "text": "just next time i'm using",
    "start": "2522880",
    "end": "2528559"
  },
  {
    "text": "so just i'm re-running the",
    "start": "2532640",
    "end": "2537359"
  },
  {
    "text": "the migration and actually in order to rerun that properly",
    "start": "2539760",
    "end": "2547119"
  },
  {
    "text": "we need to kind of change the db context",
    "start": "2548400",
    "end": "2555920"
  },
  {
    "text": "this guy here data data",
    "start": "2557359",
    "end": "2565119"
  },
  {
    "text": "demo copy data books context",
    "start": "2565119",
    "end": "2579680"
  },
  {
    "text": "yeah i don't think we get that",
    "start": "2579680",
    "end": "2583680"
  },
  {
    "text": "so for the migrations i need to construct less",
    "start": "2586640",
    "end": "2593839"
  },
  {
    "text": "yeah this one and then just protect it",
    "start": "2594800",
    "end": "2607839"
  },
  {
    "text": "okay this is now a last ditch effort to get this demo running",
    "start": "2616560",
    "end": "2623040"
  },
  {
    "text": "i also have a blog about this but",
    "start": "2627040",
    "end": "2635839"
  },
  {
    "text": "okay so we then we call it books i'm so sorry for that",
    "start": "2635839",
    "end": "2649838"
  },
  {
    "text": "come on yes that's okay now it's migrating",
    "start": "2668240",
    "end": "2675760"
  },
  {
    "text": "and we're getting a database finally so now we need a constructor here this",
    "start": "2675760",
    "end": "2680880"
  },
  {
    "text": "guy has to go right out because we are pooling this db",
    "start": "2680880",
    "end": "2686318"
  },
  {
    "text": "context let's run",
    "start": "2688839",
    "end": "2692720"
  },
  {
    "text": "okay let's see hey it works",
    "start": "2699119",
    "end": "2706480"
  },
  {
    "text": "okay sorry guys so now let's let's walk the walk you through again we have uh",
    "start": "2706480",
    "end": "2712880"
  },
  {
    "text": "15 more minutes left let's let's have a look at how this actually works um",
    "start": "2712880",
    "end": "2720079"
  },
  {
    "text": "okay we have no data in here so we could we can query but we don't have data so i already built some mutations let's",
    "start": "2720079",
    "end": "2727200"
  },
  {
    "text": "go to the mutation type here mutation is like a query type a simple",
    "start": "2727200",
    "end": "2732960"
  },
  {
    "text": "class that we just call mutation and the mutation also has resolvers and these mutation",
    "start": "2732960",
    "end": "2741359"
  },
  {
    "text": "resolvers actually are executed serially because they perform side effects on your system",
    "start": "2741359",
    "end": "2749200"
  },
  {
    "text": "there's a very important aspect in graphql only the top level fields of a mutation are considered mutations everything",
    "start": "2749200",
    "end": "2755680"
  },
  {
    "text": "beneath that is already a query on your of the on the changed state of the",
    "start": "2755680",
    "end": "2761280"
  },
  {
    "text": "server that is why we get an input here which is called add author",
    "start": "2761280",
    "end": "2766560"
  },
  {
    "text": "input which represents the raw data the user provides and we are mapping that onto",
    "start": "2766560",
    "end": "2774000"
  },
  {
    "text": "our author object then we're adding it to the db context we are saving our changes here",
    "start": "2774000",
    "end": "2779440"
  },
  {
    "text": "and then we are returning our author payload with the change state in this case the author",
    "start": "2779440",
    "end": "2786000"
  },
  {
    "text": "object okay so let's try a mutation out",
    "start": "2786000",
    "end": "2791280"
  },
  {
    "text": "so in graphql mutation starts with the keyboard mutation and this part up here is called actually",
    "start": "2791280",
    "end": "2797839"
  },
  {
    "text": "an operation so we can give it a name like add author",
    "start": "2797839",
    "end": "2803838"
  },
  {
    "text": "and then we call the mutation that we want which is called in this case at author",
    "start": "2804400",
    "end": "2811599"
  },
  {
    "text": "and then we pre provide the data which in this case is just the name let",
    "start": "2811599",
    "end": "2819359"
  },
  {
    "text": "let's add myself as an author i'm not a book writer but and then we can maybe reselect the",
    "start": "2819359",
    "end": "2826000"
  },
  {
    "text": "author and from the author that we reselect we just want the id let's do that we write that in",
    "start": "2826000",
    "end": "2833760"
  },
  {
    "text": "to the piano",
    "start": "2838880",
    "end": "2844960"
  },
  {
    "text": "today is not my happy day never had that",
    "start": "2844960",
    "end": "2852480"
  },
  {
    "text": "let's see if that",
    "start": "2856480",
    "end": "2859838"
  },
  {
    "text": "yeah it's it's really not good today yeah it shouldn't be",
    "start": "2872400",
    "end": "2880400"
  },
  {
    "text": "actually uh there okay i know what it is okay there is in in mac os if you push",
    "start": "2880400",
    "end": "2888079"
  },
  {
    "text": "option and space it actually produces a symbol",
    "start": "2888079",
    "end": "2893200"
  },
  {
    "text": "that is not readable that is not possible and messes up every json and",
    "start": "2893200",
    "end": "2898240"
  },
  {
    "text": "graphql you have okay i added the author here",
    "start": "2898240",
    "end": "2903040"
  },
  {
    "text": "now let's add a book so we get some data in there so we can",
    "start": "2904480",
    "end": "2909760"
  },
  {
    "text": "explore how that actually works alone so",
    "start": "2909760",
    "end": "2915359"
  },
  {
    "text": "we're editing again some data here through our input",
    "start": "2915359",
    "end": "2920960"
  },
  {
    "text": "something about graphql",
    "start": "2920960",
    "end": "2924960"
  },
  {
    "text": "and then we add the author id like one",
    "start": "2927440",
    "end": "2932400"
  },
  {
    "text": "and we reselect something from the book like the id again to check and update maybe our",
    "start": "2934160",
    "end": "2940880"
  },
  {
    "text": "client store we file that we get the book id back so now we have some data in here and now",
    "start": "2940880",
    "end": "2946400"
  },
  {
    "text": "we can use some query for the data and i can already see that there is something wrong here",
    "start": "2946400",
    "end": "2952960"
  },
  {
    "text": "so let's and just write new and for instance we are asking like like",
    "start": "2952960",
    "end": "2959599"
  },
  {
    "text": "we did before for the books we are querying here for the books that",
    "start": "2959599",
    "end": "2965359"
  },
  {
    "text": "are written by an author and the author's name",
    "start": "2965359",
    "end": "2971839"
  },
  {
    "text": "should contain that should contain maybe an m",
    "start": "2971920",
    "end": "2979839"
  },
  {
    "text": "just play it safe and then we want to fetch",
    "start": "2979839",
    "end": "2985119"
  },
  {
    "text": "the book title and the author's name",
    "start": "2985119",
    "end": "2991520"
  },
  {
    "text": "and then we already saw it's translating that to proper sql we get our data back",
    "start": "2992079",
    "end": "2999200"
  },
  {
    "text": "and it works so we can give our user a lot of filtering capabilities here",
    "start": "2999200",
    "end": "3005599"
  },
  {
    "text": "and let you really bind graphql to your entity framework",
    "start": "3005599",
    "end": "3012000"
  },
  {
    "text": "context or to your business logic depends on uh which way you're going",
    "start": "3012000",
    "end": "3018640"
  },
  {
    "text": "so this is basically the data integration part let's just have a look how that works",
    "start": "3018640",
    "end": "3025440"
  },
  {
    "text": "um what i annotated there these attributes that you saw in the code let",
    "start": "3025440",
    "end": "3031440"
  },
  {
    "text": "me just go back and have a look at that these queries that let that these attributes here like",
    "start": "3031440",
    "end": "3037760"
  },
  {
    "text": "filtering sorting use the b context these are all middlewares and these",
    "start": "3037760",
    "end": "3042880"
  },
  {
    "text": "middlewares allow me to alter the execution pipeline of a field and it basically",
    "start": "3042880",
    "end": "3049760"
  },
  {
    "text": "allows me to in this case to alter the variable and change it so that the that it",
    "start": "3049760",
    "end": "3056880"
  },
  {
    "text": "produces some other sql than before like in this instance uh",
    "start": "3056880",
    "end": "3062319"
  },
  {
    "text": "paging middleware yields always to the next one until the end where the resolver",
    "start": "3062319",
    "end": "3068400"
  },
  {
    "text": "produces some data in this case the variable and then we return and apply sorting filtering projections and",
    "start": "3068400",
    "end": "3074800"
  },
  {
    "text": "paging at the end the graphql survey produces the result okay",
    "start": "3074800",
    "end": "3083040"
  },
  {
    "text": "we have nine minutes left so let's look at subscriptions",
    "start": "3083040",
    "end": "3088079"
  },
  {
    "text": "uh with graphql and for the subscriptions we actually need to introduce a new type",
    "start": "3088079",
    "end": "3094400"
  },
  {
    "text": "and the type is called subscription and in this case the subscription type looks very simple",
    "start": "3094400",
    "end": "3100400"
  },
  {
    "text": "because i only have to um create a resolver that represents an event on my system and",
    "start": "3100400",
    "end": "3107440"
  },
  {
    "text": "in this in this case every time a book is released or published i want to raise an event and the event is just",
    "start": "3107440",
    "end": "3115359"
  },
  {
    "text": "waiting the returning a book so every time a book is released i get a real-time event",
    "start": "3115359",
    "end": "3121200"
  },
  {
    "text": "over this book and um in order to the payload for my event",
    "start": "3121200",
    "end": "3128480"
  },
  {
    "text": "shall be the book itself in real implementations it might be an int or",
    "start": "3128480",
    "end": "3134720"
  },
  {
    "text": "representing the book that we would load with the data loader or stuff like that but in this demo we just use a book so",
    "start": "3134720",
    "end": "3141200"
  },
  {
    "text": "we annotate this argument actually with an event message and then return the book",
    "start": "3141200",
    "end": "3147599"
  },
  {
    "text": "in order to tell the system that this is a subscription we basically say this is a subscribe",
    "start": "3147920",
    "end": "3154640"
  },
  {
    "text": "resolver and the topic of this we subscribed resolver shall be this method name here",
    "start": "3154640",
    "end": "3163119"
  },
  {
    "text": "because we have a very static event in this case the next thing is we need something to",
    "start": "3163119",
    "end": "3168400"
  },
  {
    "text": "trigger this event so we go back to our mutation and",
    "start": "3168400",
    "end": "3173440"
  },
  {
    "text": "basically insert there the topic event sender this is the abstraction of the hot",
    "start": "3173440",
    "end": "3179760"
  },
  {
    "text": "chocolate event system the pub sub system that",
    "start": "3179760",
    "end": "3184800"
  },
  {
    "text": "sits beneath that [Music] okay and after we have",
    "start": "3184800",
    "end": "3191520"
  },
  {
    "text": "written everything to the database we will send to that pub sub system uh",
    "start": "3191520",
    "end": "3198640"
  },
  {
    "text": "the message and this is our topic as i said we use a method name at the moment topic and we just send in the book",
    "start": "3198640",
    "end": "3208240"
  },
  {
    "text": "and then basically the subscription is triggered and if somebody subscribed to that he or she",
    "start": "3208240",
    "end": "3214240"
  },
  {
    "text": "gets the data in order to set this all up we have to go to our startup cs",
    "start": "3214240",
    "end": "3220960"
  },
  {
    "text": "and then add in this case in memory subscription we also support redis",
    "start": "3220960",
    "end": "3228078"
  },
  {
    "text": "and also registers a subscription type here okay then let's go back here",
    "start": "3228800",
    "end": "3237520"
  },
  {
    "text": "so that means every time i actually write a book at the book here",
    "start": "3237520",
    "end": "3242960"
  },
  {
    "text": "i will get an event raised for this i need",
    "start": "3242960",
    "end": "3249599"
  },
  {
    "text": "two banana cake pops so i'll take this one",
    "start": "3249599",
    "end": "3254720"
  },
  {
    "text": "let's refresh that okay let's get the events",
    "start": "3254720",
    "end": "3261599"
  },
  {
    "text": "and now i can just say i want to subs i want a subscription which start with subscription",
    "start": "3261599",
    "end": "3268400"
  },
  {
    "text": "and then i subscribe to the event that we just declared and from the event every time a book is",
    "start": "3268880",
    "end": "3274880"
  },
  {
    "text": "released i want the title and i also want the author and the author's name",
    "start": "3274880",
    "end": "3281280"
  },
  {
    "text": "and then i can fire the subscription up and what happens is actually nothing we",
    "start": "3281280",
    "end": "3287119"
  },
  {
    "text": "just get this donut here going on and if we now",
    "start": "3287119",
    "end": "3293440"
  },
  {
    "text": "execute we can see the data is coming in real time and we could change it",
    "start": "3293440",
    "end": "3301200"
  },
  {
    "text": "and then can see every time we do something we get a new event",
    "start": "3301200",
    "end": "3307760"
  },
  {
    "text": "so this was graphql subscriptions uh sorry guys that i messed this up so much",
    "start": "3307760",
    "end": "3315200"
  },
  {
    "text": "um usually it works uh out quite well but this time it really crashed and burned",
    "start": "3315280",
    "end": "3321440"
  },
  {
    "text": "as a conclusion is with graphql you can iterate faster",
    "start": "3321440",
    "end": "3326798"
  },
  {
    "text": "and that means front end and backend can do much more work because the backend",
    "start": "3327920",
    "end": "3334640"
  },
  {
    "text": "developers basically can create a schema that represents the domain model for your business case or",
    "start": "3334640",
    "end": "3342799"
  },
  {
    "text": "for your business and the from the developer can just pick and choose and fetch data",
    "start": "3342799",
    "end": "3348079"
  },
  {
    "text": "from that as they need that it takes away the complexity from data",
    "start": "3348079",
    "end": "3354880"
  },
  {
    "text": "fetching because the you just describe those rest requests those",
    "start": "3354880",
    "end": "3361599"
  },
  {
    "text": "graphql requests and send them to the backend over http and you get just the data back in the",
    "start": "3361599",
    "end": "3368880"
  },
  {
    "text": "same structure that you requested and that makes it super easy to consume graphql",
    "start": "3368880",
    "end": "3375760"
  },
  {
    "text": "can recommend the book which is production-ready graphite from uh mark andre he's uh he works at github",
    "start": "3375760",
    "end": "3382960"
  },
  {
    "text": "and has a lot of experience about schema design and if you start a bigger graphql project it's a good book to go to",
    "start": "3382960",
    "end": "3390880"
  },
  {
    "text": "and start learning about graphql our project is open source you can head",
    "start": "3390880",
    "end": "3397680"
  },
  {
    "text": "over to chilecream.com or you can also go to github slash chili",
    "start": "3397680",
    "end": "3404640"
  },
  {
    "text": "cream that's actually our chocolate to check out the latest uh version we have a slack channel",
    "start": "3404640",
    "end": "3410640"
  },
  {
    "text": "um if you need help or want to get started with this head over to our slack channel and we get",
    "start": "3410640",
    "end": "3415680"
  },
  {
    "text": "uh you started with graphql again sorry for the demo",
    "start": "3415680",
    "end": "3422799"
  },
  {
    "text": "and if you have questions then please ask i saw again a message",
    "start": "3422799",
    "end": "3429920"
  },
  {
    "text": "here let me read i missed it on the escrow logs under the hood the is the sql query doing a select scan",
    "start": "3429920",
    "end": "3437920"
  },
  {
    "text": "or as a select star or just the fields you ask for it depends so in this example i didn't",
    "start": "3437920",
    "end": "3444960"
  },
  {
    "text": "use projections but we also have a projections middleware",
    "start": "3444960",
    "end": "3450240"
  },
  {
    "text": "actually uh the block i looked up from myself here is a block on devtio",
    "start": "3450240",
    "end": "3457200"
  },
  {
    "text": "and this uses projection in this case and it would also just select what you",
    "start": "3457599",
    "end": "3463280"
  },
  {
    "text": "asked for um let me see it okay it's it's a bit longer but you",
    "start": "3463280",
    "end": "3470160"
  },
  {
    "text": "can see the selections attribute and this will actually then cause the",
    "start": "3470160",
    "end": "3475760"
  },
  {
    "text": "uh requests to be exactly rewritten to uh sql requests you can read this",
    "start": "3475760",
    "end": "3484319"
  },
  {
    "text": "blog post but somewhere yeah there you can see their square is where it really writes",
    "start": "3484319",
    "end": "3489839"
  },
  {
    "text": "not a select star but actual fields that you requested",
    "start": "3489839",
    "end": "3495599"
  },
  {
    "text": "but selections uh projections graphql are actually rarely do them because there are more",
    "start": "3496799",
    "end": "3503839"
  },
  {
    "text": "efficient ways to fetch data like data loaders which actually batch than",
    "start": "3503839",
    "end": "3508960"
  },
  {
    "text": "the requests but would fetch everything but in a graph it's highly possible that you",
    "start": "3508960",
    "end": "3514400"
  },
  {
    "text": "select entities multiple times and with batch data loaders you with data loads you can reuse those",
    "start": "3514400",
    "end": "3520880"
  },
  {
    "text": "entities if you have there's another questions",
    "start": "3520880",
    "end": "3527599"
  },
  {
    "text": "let me just okay so great talk things uh how does banana cake pop compare with",
    "start": "3527760",
    "end": "3534079"
  },
  {
    "text": "other tools like graphical so banana cake pop is still in preview also coming out at",
    "start": "3534079",
    "end": "3539680"
  },
  {
    "text": "the end of october it's much richer can fetch much larger schemas",
    "start": "3539680",
    "end": "3547520"
  },
  {
    "text": "also we support things like the fur and banana cake pop supports things that like defer you",
    "start": "3547520",
    "end": "3554960"
  },
  {
    "text": "can save documents you cannot do that with a graphic url so you can save up your",
    "start": "3554960",
    "end": "3561440"
  },
  {
    "text": "documents we will also when it's released allow you to sync the documents",
    "start": "3561440",
    "end": "3566559"
  },
  {
    "text": "with github and other sources so you can store them somewhere",
    "start": "3566559",
    "end": "3573839"
  },
  {
    "text": "then there is another question how does hot chocolate compare with other.net servers like roughgrad.net",
    "start": "3574079",
    "end": "3579680"
  },
  {
    "text": "it's very simple hot chocolate is the fastest graphical server on the.net",
    "start": "3579680",
    "end": "3585280"
  },
  {
    "text": "platform uses eight times less memory than graphql.net for instance and also supports more features",
    "start": "3585280",
    "end": "3593119"
  },
  {
    "text": "like uh i think they are not even thinking about the for we are actually",
    "start": "3593119",
    "end": "3598400"
  },
  {
    "text": "the first graphql server overall that released defer from the new draft spec of graphql so if",
    "start": "3598400",
    "end": "3605839"
  },
  {
    "text": "you want to have the latest graphql features and that is hot chocolate",
    "start": "3605839",
    "end": "3611760"
  },
  {
    "text": "and also uh yeah check out our product project it has so much more integrations into",
    "start": "3612799",
    "end": "3618559"
  },
  {
    "text": "background systems uh if you if i have a data source that",
    "start": "3618559",
    "end": "3624799"
  },
  {
    "text": "aren't in a database can i tie them into graphql by implementing an interface",
    "start": "3624799",
    "end": "3632160"
  },
  {
    "text": "if i have a data source yes you can you can",
    "start": "3632160",
    "end": "3639520"
  },
  {
    "text": "so you can mix data together we also hot chocolate also supports schema stitching that means you can",
    "start": "3639520",
    "end": "3646400"
  },
  {
    "text": "rewrite data from everywhere so and that is really very simple like this is a local graphql",
    "start": "3646400",
    "end": "3652400"
  },
  {
    "text": "server now at the moment but i could just go in here and say",
    "start": "3652400",
    "end": "3657599"
  },
  {
    "text": "add remotes at i don't have the i don't have the uh stitching package",
    "start": "3657599",
    "end": "3663200"
  },
  {
    "text": "but as soon as you put the stitching package in you can just say add remote",
    "start": "3663200",
    "end": "3669119"
  },
  {
    "text": "schema and then you can fetch another graphql schema from somewhere else and merge it with your local graphql",
    "start": "3669119",
    "end": "3674880"
  },
  {
    "text": "schema you can do that also with odata also only in the new version",
    "start": "3674880",
    "end": "3681680"
  },
  {
    "text": "is long polling when it executes the subscription now it's not yet long pulling banana cake pop uses web sockets",
    "start": "3681920",
    "end": "3688799"
  },
  {
    "text": "and the graph subscription specification but",
    "start": "3688799",
    "end": "3696559"
  },
  {
    "text": "it is possible to do it also over signal ah",
    "start": "3696559",
    "end": "3701599"
  },
  {
    "text": "there are other questions",
    "start": "3706319",
    "end": "3709359"
  },
  {
    "text": "how do you prevent a graft endpoint from becoming monoliths actually you want graphql to become a",
    "start": "3711440",
    "end": "3717839"
  },
  {
    "text": "monolith so um oh actually do you want the",
    "start": "3717839",
    "end": "3723440"
  },
  {
    "text": "schema to become a monolith and just as a comparison facebook has the",
    "start": "3723440",
    "end": "3729599"
  },
  {
    "text": "biggest or largest draft prize out there with uh with over 10 000 times types 300 000",
    "start": "3729599",
    "end": "3736640"
  },
  {
    "text": "fields and it's an absolute monolith but with the graphql servers at the house",
    "start": "3736640",
    "end": "3743119"
  },
  {
    "text": "they are including hot chocolate you can do things like schema stitching",
    "start": "3743119",
    "end": "3748400"
  },
  {
    "text": "break your graphql server in various domain services and then have a single",
    "start": "3748400",
    "end": "3754559"
  },
  {
    "text": "gateway that automatically stitches them together to one graphql endpoint but this schema you want to have one",
    "start": "3754559",
    "end": "3761760"
  },
  {
    "text": "source of truth but you can split it over many servers services so there are techniques schema stitching",
    "start": "3761760",
    "end": "3769520"
  },
  {
    "text": "it's uh if you go to the chili cream",
    "start": "3769520",
    "end": "3775119"
  },
  {
    "text": "website you can check that out",
    "start": "3775119",
    "end": "3781038"
  },
  {
    "text": "ah there's schema stitching and there's an introduction how you can merge schemas together",
    "start": "3781359",
    "end": "3797839"
  },
  {
    "text": "you",
    "start": "3841440",
    "end": "3843520"
  }
]