[
  {
    "text": "hi I'm gonna talk to you about well today's today's topic is is what",
    "start": "10110",
    "end": "15610"
  },
  {
    "text": "the functional is about functional programming and it's about the what the why and the how my name is Rob Howard",
    "start": "15610",
    "end": "22210"
  },
  {
    "text": "I'm on known around the traps as Dan cabbage as well and I sometimes scribble on a web site the Rob Howard idea a you",
    "start": "22210",
    "end": "28689"
  },
  {
    "text": "there and so so far I've made a career of mate using using the nice piece from",
    "start": "28689",
    "end": "35860"
  },
  {
    "text": "different programming languages I've started with PHP and what have you noticed patterning a ruby and eventual",
    "start": "35860",
    "end": "41620"
  },
  {
    "text": "ism Haskell and stuff in there so what I'm intend to do today is to try and in the same way that I pinch the nice bits",
    "start": "41620",
    "end": "47050"
  },
  {
    "text": "from various programming languages I want to try and pinch the nice bits of a functional programming to give ear to so",
    "start": "47050",
    "end": "52300"
  },
  {
    "text": "you can use it in your own code in the only in your own languages now all the illustrations today mostly illustrations",
    "start": "52300",
    "end": "58390"
  },
  {
    "text": "today well with JavaScript but pretty much all this stuff applies to pretty",
    "start": "58390",
    "end": "64930"
  },
  {
    "text": "much most programming languages I mean hell you could probably do most of this in COBOL maybe not bash but you know if",
    "start": "64930",
    "end": "70090"
  },
  {
    "text": "you try really hard maybe but some so let's talk about the talk a little bit first",
    "start": "70090",
    "end": "75760"
  },
  {
    "text": "first up jargon I want to address this first I will be using jargon I think",
    "start": "75760",
    "end": "80979"
  },
  {
    "text": "jagat is important and useful and I'm but I'm gonna go out of my way though to make sure that I introduce the jargon",
    "start": "80979",
    "end": "88329"
  },
  {
    "text": "and make sure I reintroduce it over and over so you get it so it sinks in a bit because I finally jar are giving a name",
    "start": "88329",
    "end": "95350"
  },
  {
    "text": "to a fuzzy concept is very useful not only if so you can keep track of with yourself but so you can do your in",
    "start": "95350",
    "end": "100869"
  },
  {
    "text": "further looking read other people's writing as opposed to having just serve a general idea giving it a name giving",
    "start": "100869",
    "end": "106479"
  },
  {
    "text": "something a name I think is powerful this talk is about a bunch of different",
    "start": "106479",
    "end": "112000"
  },
  {
    "text": "tools that much like every other sort of technique salesmen is like a bunch of",
    "start": "112000",
    "end": "117729"
  },
  {
    "text": "tools to help you try and make the code less more maintainable less likely to",
    "start": "117729",
    "end": "123189"
  },
  {
    "text": "break etc as you heard it before so I'm not gonna dwell too much on that I also",
    "start": "123189",
    "end": "131800"
  },
  {
    "text": "want to introduce this before I start I'm gonna call this the functional programming period but functional programming pyramid I actually stole",
    "start": "131800",
    "end": "138760"
  },
  {
    "text": "this from a chap called Lucas to Churchill and it's actually the Haskell pyramid but we're just gonna pretend I",
    "start": "138760",
    "end": "145090"
  },
  {
    "text": "didn't steal it so if we assume that you know your level of functional programming ability or familiarity stay",
    "start": "145090",
    "end": "151900"
  },
  {
    "text": "at the bottom and start some works upwards there's sort of a level which you start become productive using fun",
    "start": "151900",
    "end": "157120"
  },
  {
    "text": "using functional programming unfortunately it's about there like so if you've already seen some of the stuff before you may already be past it like",
    "start": "157120",
    "end": "162970"
  },
  {
    "text": "fantastic unfortunately this is what tends to get such disgust in social media or in slack or in Twitter or",
    "start": "162970",
    "end": "169000"
  },
  {
    "text": "whatever and so you've got this barrage of terminologies incredibly unfriendly and a bunch of discussions amongst",
    "start": "169000",
    "end": "175989"
  },
  {
    "text": "people who really familiar with this stuff already so something to keep in mind but if you if you push on through I",
    "start": "175989",
    "end": "182560"
  },
  {
    "text": "think you're gonna get some use out of it so this talk is a little bit like Disneyland not in the in the sense of",
    "start": "182560",
    "end": "188980"
  },
  {
    "text": "you have to go through Main Street to get anyway interesting so there's gonna be one bit at the beginning we've got",
    "start": "188980",
    "end": "194409"
  },
  {
    "text": "six major sections but one bit at the beginning that if you've seen any intro to any FP stuff you order very seen this",
    "start": "194409",
    "end": "200140"
  },
  {
    "text": "and then I'll try and head off into more interesting areas giving rationales for things some examples etc etc so why the",
    "start": "200140",
    "end": "208329"
  },
  {
    "text": "hell do I care about any of this stuff for me personally the answer is I want",
    "start": "208329",
    "end": "213700"
  },
  {
    "text": "to be able to look at a small piece of a codebase and understand as much as I can",
    "start": "213700",
    "end": "220359"
  },
  {
    "text": "around it without having to zoom back out to look at different areas jump back jump back and forth etc etc to",
    "start": "220359",
    "end": "227470"
  },
  {
    "text": "understand a piece of code you do need to get the context of sin and it's gonna that's going to be required regardless how you write it but I want to reduce",
    "start": "227470",
    "end": "235269"
  },
  {
    "text": "the amount of looking around you need to do in order to understand what's going on so I've got here's an example I'll",
    "start": "235269",
    "end": "243250"
  },
  {
    "text": "come back to at the very end of the talk but it's basically a function and what I'm looking at this I want to try and",
    "start": "243250",
    "end": "248680"
  },
  {
    "text": "figure out what's going on such that I don't I I can make assumptions how about",
    "start": "248680",
    "end": "255760"
  },
  {
    "text": "how pieces of this code works so in this particular case this is from something",
    "start": "255760",
    "end": "261970"
  },
  {
    "text": "called a blocker which is he goes and it just goes through and connects to",
    "start": "261970",
    "end": "267220"
  },
  {
    "text": "Twitter and unblocks people from your block list like when it counts to get taken over apparently like sometimes",
    "start": "267220",
    "end": "274630"
  },
  {
    "text": "Dave like they block scatter loads of people and this is a way to try and recover it it's an interesting piece of code I found and it's like hey",
    "start": "274630",
    "end": "280690"
  },
  {
    "text": "you know he's an example whatever but moving on what is functional programming",
    "start": "280690",
    "end": "287550"
  },
  {
    "text": "well functional programming is basically existential or quality module unimportant externalities it's also",
    "start": "287550",
    "end": "293470"
  },
  {
    "text": "known as moral equality which is defined as I'm so very sorry and I'm not gonna do that again I'm gonna come back to",
    "start": "293470",
    "end": "300070"
  },
  {
    "text": "what functional programming is in a tick first we need to tackle our first bit of jargon referential transparency yeah",
    "start": "300070",
    "end": "307720"
  },
  {
    "text": "it's good I really I hate all the names for these so I've chosen this one and I'm gonna stick with it for the room a remainder of the talk here's an example",
    "start": "307720",
    "end": "315400"
  },
  {
    "text": "of a bit of code it's really simple we've got a function called double it's going to take an input it's presumably",
    "start": "315400",
    "end": "321430"
  },
  {
    "text": "gonna return something and for the moment we're not gonna care what's going on inside and then we're gonna use it",
    "start": "321430",
    "end": "326980"
  },
  {
    "text": "twice down here so referential transparency is like a property of code",
    "start": "326980",
    "end": "332110"
  },
  {
    "text": "it's sort of a test you can apply to a chunk of code so if we can make the following refactoring if we can take the",
    "start": "332110",
    "end": "339400"
  },
  {
    "text": "two with one a dry upper code don't repeat yourself if we want to only write",
    "start": "339400",
    "end": "346030"
  },
  {
    "text": "this once then if we make we can make this transformation like so we pulled up to a variable so we in doing this this",
    "start": "346030",
    "end": "357310"
  },
  {
    "text": "is our test and so if if this holds for every instance of double 100 across the",
    "start": "357310",
    "end": "363790"
  },
  {
    "text": "entire program we and if we can make that transformation everywhere and we are not able to notice a change in the",
    "start": "363790",
    "end": "370750"
  },
  {
    "text": "behavior of the program for whatever metric we care about in terms of the",
    "start": "370750",
    "end": "375760"
  },
  {
    "text": "result the computer results at the end so stopping printer to the console or whatever then it can be said that this",
    "start": "375760",
    "end": "382510"
  },
  {
    "text": "double 100 is referentially transparent so it's all about this transformation",
    "start": "382510",
    "end": "390220"
  },
  {
    "text": "and we'll see how this this cause is gonna build from this very basic player building block so the same applies for",
    "start": "390220",
    "end": "399280"
  },
  {
    "text": "the arguments like let's take 100 and this is pretty much obviously referentially transparent but you know",
    "start": "399280",
    "end": "404650"
  },
  {
    "text": "we can pull that to a variable and it's gonna be the same as if you know as if we had made that transformation so if",
    "start": "404650",
    "end": "411970"
  },
  {
    "text": "double is referent as referentially transparent for every and everything you if dole behaves in a",
    "start": "411970",
    "end": "419830"
  },
  {
    "text": "referential transparent manner for every argument you give it that is also referentially transparent there with me",
    "start": "419830",
    "end": "426190"
  },
  {
    "text": "here we can say that double is pure this is where's pure pure function thing",
    "start": "426190",
    "end": "431620"
  },
  {
    "text": "comes from so a sample definition here is just returning x times two and said",
    "start": "431620",
    "end": "436690"
  },
  {
    "text": "to be pure and we've got a result here and this decomposed this pulled apart version is the same as if we'd stuck",
    "start": "436690",
    "end": "443620"
  },
  {
    "text": "with the original so big quote time an expression is referentially transparent",
    "start": "443620",
    "end": "448990"
  },
  {
    "text": "if in a program all occurrences of that expression here a replace with the assignment to that expression without",
    "start": "448990",
    "end": "455620"
  },
  {
    "text": "observably changing the program paraphrase from a functional programming scholar by polio Sano and ruin our",
    "start": "455620",
    "end": "461890"
  },
  {
    "text": "pianist n' so all occurrences of that that expression like that double 100",
    "start": "461890",
    "end": "467050"
  },
  {
    "text": "across the entire program can be replaced by a reference to it like saying you know using the variable instead without being out without us",
    "start": "467050",
    "end": "474010"
  },
  {
    "text": "being able to tell from the outside we don't care what's going on inside double we only care how it behaves it's that's",
    "start": "474010",
    "end": "479680"
  },
  {
    "text": "where I made the joke about existential equality like this is it you can tell",
    "start": "479680",
    "end": "484780"
  },
  {
    "text": "like externally observable behavior is all we care about for this rule so yeah",
    "start": "484780",
    "end": "490360"
  },
  {
    "text": "it's so that again this is known as like pure functions or purity and unfortunate reminds me that preserving the purity of",
    "start": "490360",
    "end": "495550"
  },
  {
    "text": "precious bodily fluids who's seen dr. Strangelove in you it's I hate the term I hate referential transparency because",
    "start": "495550",
    "end": "502000"
  },
  {
    "text": "it's a mouthful one who's gonna say RT now cuz it's easier but it's a concept so onto some more examples things that",
    "start": "502000",
    "end": "508690"
  },
  {
    "text": "may or may not pass referential transparency so a second one with same function and we've got console.log",
    "start": "508690",
    "end": "514750"
  },
  {
    "text": "sitting in the middle here we're saying at this console that log is impure and",
    "start": "514750",
    "end": "519789"
  },
  {
    "text": "we'll be able to be noticed by things both inside and outside the program it can be said that has a side effect on",
    "start": "519790",
    "end": "525790"
  },
  {
    "text": "explain immediately what that means so we've got double and we're gonna load it up in the record we've got this consult",
    "start": "525790",
    "end": "531970"
  },
  {
    "text": "log which spits stuff out to the console in the process of getting us a return",
    "start": "531970",
    "end": "537580"
  },
  {
    "text": "value the the the with the console that log doesn't have any value which",
    "start": "537580",
    "end": "543520"
  },
  {
    "text": "represents the printing to the console it's something that happens off to the side and then it return undefined this is what we call the sort",
    "start": "543520",
    "end": "550270"
  },
  {
    "text": "of a side effect and then the function also happens to return a value because because console.log is not represented",
    "start": "550270",
    "end": "556240"
  },
  {
    "text": "in as a value at all it's just just happens and you'll see that the",
    "start": "556240",
    "end": "561730"
  },
  {
    "text": "repercussions this has in a moment so it has a side effect and it's impure which unfortunately means that it makes the",
    "start": "561730",
    "end": "568150"
  },
  {
    "text": "thing that's inside impure as well as in because it sort of leaks out we can tell",
    "start": "568150",
    "end": "573460"
  },
  {
    "text": "when you do this rearrangement so we've do this thing we've got printing it twice or print it",
    "start": "573460",
    "end": "579850"
  },
  {
    "text": "once will we make the transformation it's not referentially transparent sorry try again another example where we're",
    "start": "579850",
    "end": "586690"
  },
  {
    "text": "referring to a counter from outside the pro from outside the function it relies on state it relies on something external",
    "start": "586690",
    "end": "593200"
  },
  {
    "text": "something not in the function arguments something that can change at any time so if we make this transformation that what",
    "start": "593200",
    "end": "598780"
  },
  {
    "text": "we're talking about suddenly the result sorry the result is different we've got 200 as opposed to two or one",
    "start": "598780",
    "end": "605670"
  },
  {
    "text": "no refrigerant referentially transparent see why I hate the name okay so another",
    "start": "605670",
    "end": "612400"
  },
  {
    "text": "one for example we're also McCarron with state we're bumping a counter so and make a transformation and suddenly the",
    "start": "612400",
    "end": "619000"
  },
  {
    "text": "numbers change so it's not only just reading the state it's also it's also",
    "start": "619000",
    "end": "624970"
  },
  {
    "text": "setting the state as well it's mucking around with it either of these things mucking around with things outside the function he's gonna lead to you know",
    "start": "624970",
    "end": "633220"
  },
  {
    "text": "unrightfully transmen artie code so another one for example we've given it a",
    "start": "633220",
    "end": "639670"
  },
  {
    "text": "little give n' append a list and it's gonna added one to list and doing so",
    "start": "639670",
    "end": "645160"
  },
  {
    "text": "it's changed it we call it twice and we get a list that gets and well it ends up with an extra element on the end and so",
    "start": "645160",
    "end": "650980"
  },
  {
    "text": "we make our transformation and suddenly it's different so all these things lead",
    "start": "650980",
    "end": "658150"
  },
  {
    "text": "to ears are impure and I'm not certain oh so saying impure is bad it's just giving you a give me categorizing the",
    "start": "658150",
    "end": "664540"
  },
  {
    "text": "code so we can then analyze it later so this push this mutation is impure but if",
    "start": "664540",
    "end": "672850"
  },
  {
    "text": "we take this code if I were to take the the variable or yeah the list we get in",
    "start": "672850",
    "end": "678160"
  },
  {
    "text": "and then we copy it and then we push it and return result it's now pure we can't tell from",
    "start": "678160",
    "end": "683320"
  },
  {
    "text": "the outside whether whether it's doing mutation or frankly we don't care we",
    "start": "683320",
    "end": "688570"
  },
  {
    "text": "only care about the the black box and so this is the basis of a whole bunch of optimizations so you get a functional",
    "start": "688570",
    "end": "694360"
  },
  {
    "text": "pure pure interface of things that is efficient internally because it's able",
    "start": "694360",
    "end": "700060"
  },
  {
    "text": "to muck around with state like immutable jeaious which we'll see a little bit later on for example MUX run with the",
    "start": "700060",
    "end": "705610"
  },
  {
    "text": "state internally to be fast but presents a pure interface so what is functional",
    "start": "705610",
    "end": "711340"
  },
  {
    "text": "programming back to this way this old chestnut the bedrock of functional programming is referential transparency",
    "start": "711340",
    "end": "716950"
  },
  {
    "text": "and all this purity thing functional programming is programming a pure function says really I'll be honest",
    "start": "716950",
    "end": "722440"
  },
  {
    "text": "inand that's the last I'm gonna quote in a quite room in this presentation as well so we've got the concept of like",
    "start": "722440",
    "end": "728920"
  },
  {
    "text": "these functional languages um if functional programming is a thesis or an idea like this referential transparency",
    "start": "728920",
    "end": "735210"
  },
  {
    "text": "then functional programming languages language is sort of fall in a spectrum in how easy they make it to achieve this",
    "start": "735210",
    "end": "742750"
  },
  {
    "text": "thesis how easy it is to work with things in a pure manner so you've got",
    "start": "742750",
    "end": "748030"
  },
  {
    "text": "languages a one end like a Juris and Haskell and whatever that make it working with pure function your values",
    "start": "748030",
    "end": "753700"
  },
  {
    "text": "and functions natural as in is the easiest thing to do and you've got so javascript which is also on this",
    "start": "753700",
    "end": "759640"
  },
  {
    "text": "spectrum which you know yep and then as bash all the way all around which makes working with pure stuff really really",
    "start": "759640",
    "end": "765010"
  },
  {
    "text": "hard because there's no return values like besides numbers it's it's a weird thing don't don't learn bash if we can",
    "start": "765010",
    "end": "770650"
  },
  {
    "text": "avoid it um but what does purity get us specifically if we ignore all the subsequent things we're gonna look at we",
    "start": "770650",
    "end": "776230"
  },
  {
    "text": "can if we only care about the pure functions themselves then it gives us this the behavior of pure function is",
    "start": "776230",
    "end": "783610"
  },
  {
    "text": "independent of where and when it is evaluated whereas app a very impure function is intrinsically tied to its execution",
    "start": "783610",
    "end": "790420"
  },
  {
    "text": "order so if we take our existing code and just expand it a little bit it's almost like we've got so this dependency",
    "start": "790420",
    "end": "796150"
  },
  {
    "text": "graph the things use so if you 201 here depends on the result being calculated",
    "start": "796150",
    "end": "801790"
  },
  {
    "text": "and 400 depends on this result being calculated and in turn result depends on",
    "start": "801790",
    "end": "807490"
  },
  {
    "text": "100 being calculated and so on so and so we know with a tree that kind of looks like this and so it doesn't matter this",
    "start": "807490",
    "end": "814870"
  },
  {
    "text": "stuff is separated across the other side of the codebase or whatever or if it's classes calling classes or whatever it's or in",
    "start": "814870",
    "end": "824140"
  },
  {
    "text": "if you sort of pre evaluate stuff it's it can be a black box and it's still going to behave in the same way because",
    "start": "824140",
    "end": "830050"
  },
  {
    "text": "we all care about the external behavior as opposed to the guts of it and it means we can the nature of these things",
    "start": "830050",
    "end": "836710"
  },
  {
    "text": "because we can evaluate things when we want to we can then so for example if you were to evaluate in parallel we can",
    "start": "836710",
    "end": "842290"
  },
  {
    "text": "evaluate it twice and it's the same as evaluating once so in doing two different threads two different two",
    "start": "842290",
    "end": "848140"
  },
  {
    "text": "different processes or what have you where you can do things at the same time",
    "start": "848140",
    "end": "853930"
  },
  {
    "text": "and all you care about is the end result all four tests like pure things are really easier tests in the sense of you",
    "start": "853930",
    "end": "860050"
  },
  {
    "text": "can just sort of focus on a little bit and it can't tell the difference between you doing the entire calculation or you're just giving it the result for the",
    "start": "860050",
    "end": "866830"
  },
  {
    "text": "next step in the pipeline like you see there is like a tiny piece of the full thing but you just sort of feed it and",
    "start": "866830",
    "end": "872110"
  },
  {
    "text": "pretend it all happened and then you check the output it's not saying all",
    "start": "872110",
    "end": "877150"
  },
  {
    "text": "code should be pure but when it is these sort of qualities happen so modularity",
    "start": "877150",
    "end": "886780"
  },
  {
    "text": "of evaluation aids a few things it aids in refactoring because we can split things out put it on the other side of",
    "start": "886780",
    "end": "892390"
  },
  {
    "text": "the codebase rearrange them within a function so long as we've got that dependencies the the dependency tree",
    "start": "892390",
    "end": "897640"
  },
  {
    "text": "intact it means we can rearrange or pre evaluate or whatever it helps with testing for the same way for the same",
    "start": "897640",
    "end": "903280"
  },
  {
    "text": "reasons we can pre evaluate stuff I can currency in parallels and we do it twice we do it once we do it three hundred",
    "start": "903280",
    "end": "908470"
  },
  {
    "text": "times we don't care composition decomposition you just glue these things and pull them back apart it just makes",
    "start": "908470",
    "end": "914920"
  },
  {
    "text": "it aids in this process so speaking in composition let's talk about composition",
    "start": "914920",
    "end": "920130"
  },
  {
    "text": "or Lego bricks composition is like you've got so Lego bricks and you've got",
    "start": "920130",
    "end": "927339"
  },
  {
    "text": "a few different Lego bricks for example and a particular combination is rather useful so you stick them together in",
    "start": "927339",
    "end": "933910"
  },
  {
    "text": "advance so you can then use it with other sets later I'm gonna pre stick together a bunch of Lego bricks so I can",
    "start": "933910",
    "end": "939100"
  },
  {
    "text": "use it to build bigger creations you come up with a new piece a combination of two other pieces and you can reach for that kind of piece now anytime we",
    "start": "939100",
    "end": "945550"
  },
  {
    "text": "need it it's more efficient effective to recognize and use this compound sort of piece or element",
    "start": "945550",
    "end": "951790"
  },
  {
    "text": "separately think about accepting things every time a composition is combining things in a way that allows you to",
    "start": "951790",
    "end": "957459"
  },
  {
    "text": "further combine them and you can't distinguish the combined thing from the atomic one so if we've got for example",
    "start": "957459",
    "end": "963279"
  },
  {
    "text": "the strings a a B and C D when we combine them together with a composition",
    "start": "963279",
    "end": "968800"
  },
  {
    "text": "of those is ABCD so composing to pull it down or and then decomposing to split it",
    "start": "968800",
    "end": "975580"
  },
  {
    "text": "back up you lose the information as to what the original form was but you can split it back up into different things give me a plus B C D or you know",
    "start": "975580",
    "end": "983649"
  },
  {
    "text": "whatever rearrangement you want and the same deal with functions you can get calling bar and giving the result of foo",
    "start": "983649",
    "end": "989920"
  },
  {
    "text": "is the you know it's like having a function which does that internally you can't tell the difference this is this",
    "start": "989920",
    "end": "996250"
  },
  {
    "text": "function composition and decomposition etc etc like JavaScript a pet NPM",
    "start": "996250",
    "end": "1001440"
  },
  {
    "text": "JavaScript dependencies the NPM version too that's sort of naively composed he'd",
    "start": "1001440",
    "end": "1006570"
  },
  {
    "text": "like you just had trees and trees the dependencies you sticking together and a bunch of things compose but I really",
    "start": "1006570",
    "end": "1013740"
  },
  {
    "text": "need to kind of move on to the next session so expressions expressions got a",
    "start": "1013740",
    "end": "1020430"
  },
  {
    "text": "quick mention in that first we're not quite Hasmukh sorry",
    "start": "1020430",
    "end": "1026660"
  },
  {
    "text": "so I forgot a function here well this expression sorry we've got a value which",
    "start": "1028819",
    "end": "1035010"
  },
  {
    "text": "can be things like strings and numbers and objects and lists of whatever or whatever or whatever and then we've got",
    "start": "1035010",
    "end": "1040800"
  },
  {
    "text": "a function here for example where it takes arguments or whatever and where we put we can evaluate them to equal a",
    "start": "1040800",
    "end": "1048000"
  },
  {
    "text": "result this case is for when I say evaluator and means substituted for",
    "start": "1048000",
    "end": "1055650"
  },
  {
    "text": "example we've got our X and we substitute week you know substitute the x equals to do the replacement",
    "start": "1055650",
    "end": "1061250"
  },
  {
    "text": "everything fades away then we've got our two times two and multiplication is a",
    "start": "1061250",
    "end": "1066360"
  },
  {
    "text": "function so it's got two arguments we're going to substitute it internally regards to the language somewhere to get",
    "start": "1066360",
    "end": "1073380"
  },
  {
    "text": "for evaluation is simplification and",
    "start": "1073380",
    "end": "1078860"
  },
  {
    "text": "surprise this is reference to transparent this particular one because we knew all that substitution",
    "start": "1078860",
    "end": "1084720"
  },
  {
    "text": "not notice so expressions are made up of values and functions and I kind of",
    "start": "1084720",
    "end": "1090420"
  },
  {
    "text": "fibbed a little bit because I said values or strings and whatever but you know functions are also values in a",
    "start": "1090420",
    "end": "1095700"
  },
  {
    "text": "number of languages including Java Script and also if you're interested in",
    "start": "1095700",
    "end": "1102510"
  },
  {
    "text": "going down a particularly large rabbit-hole values values can be represented with only functions this is",
    "start": "1102510",
    "end": "1108330"
  },
  {
    "text": "also known as lambda calculus not doing it this talk moving on",
    "start": "1108330",
    "end": "1113940"
  },
  {
    "text": "functions are also values which gives rise to this sort of stuff where we've got plus we've got a function value here",
    "start": "1113940",
    "end": "1120720"
  },
  {
    "text": "or gonna sign it to a variable and then we'll get a list which is we're going to give this function to another function",
    "start": "1120720",
    "end": "1128730"
  },
  {
    "text": "map like so and so this map is known as a higher-order function because it's a",
    "start": "1128730",
    "end": "1135809"
  },
  {
    "text": "function that takes a function as an argument so when we've got all these paint let's put some pieces together it",
    "start": "1135809",
    "end": "1141030"
  },
  {
    "text": "desire for referential transparency as well as like the helpful feature that is her functions as values and abstracting",
    "start": "1141030",
    "end": "1148650"
  },
  {
    "text": "a common behavior with function composition and decomposition gives us these things which are kind of familiar",
    "start": "1148650",
    "end": "1153929"
  },
  {
    "text": "to or it might look familiar if I phrase them like this they're just so building",
    "start": "1153929",
    "end": "1161429"
  },
  {
    "text": "block accommodators because these aren't necessarily inherently functional this is kind of functional style but that's",
    "start": "1161429",
    "end": "1167910"
  },
  {
    "text": "fine it's basically this the the building blocks settle in push us in",
    "start": "1167910",
    "end": "1172950"
  },
  {
    "text": "this direction to end up with coming up with these little combinators these little functional helpers that we can glue together with first with function",
    "start": "1172950",
    "end": "1179429"
  },
  {
    "text": "values and whatever to make to make these things and we've got you know a bunch of other ones that are a specific",
    "start": "1179429",
    "end": "1185130"
  },
  {
    "text": "JavaScript but this stuff applies to a whole bunch of different data types as we might see in just a moment so we're",
    "start": "1185130",
    "end": "1191790"
  },
  {
    "text": "going to function a function here that we've written in very muchly imperative style which is fine and basically it's",
    "start": "1191790",
    "end": "1199050"
  },
  {
    "text": "going through all the birth years and it's getting the ages for each one and",
    "start": "1199050",
    "end": "1204480"
  },
  {
    "text": "if their age is over 20 then we're gonna add those together it's a bit nonsense but you know are you going to do I get",
    "start": "1204480",
    "end": "1211080"
  },
  {
    "text": "to make up the examples cuz I'm here right but mr. code when given in using his",
    "start": "1211080",
    "end": "1216970"
  },
  {
    "text": "more functional style common air stuff is birth years and then we work for each",
    "start": "1216970",
    "end": "1222520"
  },
  {
    "text": "of the birth years we're gonna map over it we're going to map is a function that will write it will apply this function",
    "start": "1222520",
    "end": "1229570"
  },
  {
    "text": "this birth year taking birth year as an ayah this year - birth you thought it",
    "start": "1229570",
    "end": "1235200"
  },
  {
    "text": "that it's gonna apply that function to every element in the array it's gonna preserve the shape preserve the length",
    "start": "1235200",
    "end": "1240940"
  },
  {
    "text": "and that's how map is designed to work we've got filter which will will take an array and reduce it down in size",
    "start": "1240940",
    "end": "1247420"
  },
  {
    "text": "depending on this the work with the evaluation of that functional we giving it and then reduce which can go from",
    "start": "1247420",
    "end": "1252430"
  },
  {
    "text": "list to anything reduces also known as a fold it's one of the base building blocks if you want to you can build map",
    "start": "1252430",
    "end": "1258130"
  },
  {
    "text": "and filter in terms of reduce but that is an entire thing in its own so I'm",
    "start": "1258130",
    "end": "1263680"
  },
  {
    "text": "sorry this codes getting getting gradually smaller and smaller it's gonna stop now but you know when we we've got",
    "start": "1263680",
    "end": "1270390"
  },
  {
    "text": "that because the correspondence here we've got the the the for loop which is showing up in terms of the map and also",
    "start": "1270390",
    "end": "1278050"
  },
  {
    "text": "the filter and also the reduce like it is basically this is all these three",
    "start": "1278050",
    "end": "1283690"
  },
  {
    "text": "combinators have all these helpers have them doing the loop over the array in their own right and then you've got the",
    "start": "1283690",
    "end": "1290410"
  },
  {
    "text": "functions themselves which are doing do it's like we're basically pulling some pieces out of the the Sasori imperative",
    "start": "1290410",
    "end": "1295570"
  },
  {
    "text": "style stuff at the bottom to hopefully make something that is more understandable this is entirely a",
    "start": "1295570",
    "end": "1300790"
  },
  {
    "text": "subjective judgment I personally find this easier to read some people may not that's fine but yeah we serve pull bits",
    "start": "1300790",
    "end": "1309400"
  },
  {
    "text": "out to give us the result and finally return the the top one is returning an",
    "start": "1309400",
    "end": "1314650"
  },
  {
    "text": "expression which is going to evaluate to a single value and we've got the bottom on which is returning the value that is",
    "start": "1314650",
    "end": "1320140"
  },
  {
    "text": "being calculated based on a bunch of mutation anyway so hey I bet someone's",
    "start": "1320140",
    "end": "1325900"
  },
  {
    "text": "noticed that I'm looping over the thing like three times and that's really annoying yeah it's it and that not of",
    "start": "1325900",
    "end": "1332650"
  },
  {
    "text": "this code by itself will loop over the array three times and it's like oh yeah okay it's look looks a little reader",
    "start": "1332650",
    "end": "1338080"
  },
  {
    "text": "more readable to me but at the expense of it's traversing it so there are",
    "start": "1338080",
    "end": "1343600"
  },
  {
    "text": "different ways of doing this jumping over to Ruby I did it for four years I got to put one example in here come on where I've got",
    "start": "1343600",
    "end": "1350740"
  },
  {
    "text": "birth years which is an array and then I've got this a little dot lazy thing now the Ruby that this could very easily",
    "start": "1350740",
    "end": "1356710"
  },
  {
    "text": "happen in JavaScript I can go and write one in a rec ball afterwards if you really want to but it's it's part of the",
    "start": "1356710",
    "end": "1362290"
  },
  {
    "text": "Ruby standard library well we want a lazy version or something that when were you go and apply its versions of map and",
    "start": "1362290",
    "end": "1368050"
  },
  {
    "text": "select and what have you work in such a way that it will apply all the functions",
    "start": "1368050",
    "end": "1374110"
  },
  {
    "text": "for a particular element as it goes through it all in the traverse the array once and it will apply things",
    "start": "1374110",
    "end": "1380050"
  },
  {
    "text": "it sets up some computations and then goes bang for each element does you know all of them one go all in one go it's",
    "start": "1380050",
    "end": "1386500"
  },
  {
    "text": "like basically building up with a bunch of instructions to then go bang when you actually want the real result out at the end it's a way a transducers enclosure",
    "start": "1386500",
    "end": "1393730"
  },
  {
    "text": "is a I think a way of doing this fusion high school it's all very much a system or concept you're building up sort of a",
    "start": "1393730",
    "end": "1399850"
  },
  {
    "text": "lazy sort of things to apply later so some languages are entirely expression",
    "start": "1399850",
    "end": "1406420"
  },
  {
    "text": "based I'm gonna blaze through this thing one because I don't really want to go into a much detail but we've got you",
    "start": "1406420",
    "end": "1411610"
  },
  {
    "text": "know main is a he's a function this is sort of pseudo Haskell but we've got main that's some you know a value which",
    "start": "1411610",
    "end": "1418360"
  },
  {
    "text": "is made up of a bunch of expressions we get users with which is a function that takes a couple of arguments or they're hackers which is sort of effectively a",
    "start": "1418360",
    "end": "1424810"
  },
  {
    "text": "constant and so it's an expression so we can simplify it we'll just sort of you know pull pieces in just keep pulling",
    "start": "1424810",
    "end": "1432970"
  },
  {
    "text": "pieces reducing reducing reducing until we're left with basically telling the",
    "start": "1432970",
    "end": "1439300"
  },
  {
    "text": "Haskell runtime in this case that we want to print a value that is two so it",
    "start": "1439300",
    "end": "1444730"
  },
  {
    "text": "says this is not like hey he's a practical thing you can do it's like here's an idea of how some other languages operate expression based vary",
    "start": "1444730",
    "end": "1451750"
  },
  {
    "text": "FP ish kind of languages can work like this so speaking of languages language",
    "start": "1451750",
    "end": "1457810"
  },
  {
    "text": "affordances you if everyone remembers that functional languages spectrum chestnut I introduced earlier so this is",
    "start": "1457810",
    "end": "1464290"
  },
  {
    "text": "this is kind of like the the previous example we had where the list of things and the map filter and reduce so if I",
    "start": "1464290",
    "end": "1470920"
  },
  {
    "text": "were doing this only in terms of functions and values then it would probably end up looking like this which",
    "start": "1470920",
    "end": "1476290"
  },
  {
    "text": "is I personally find this a little more difficult to read cause you have to go to the map it's like it's backwards to start with",
    "start": "1476290",
    "end": "1481660"
  },
  {
    "text": "then you do the map with the thing and then take the result of that and give it to the filter and then take the result that give it to the reducing it's like",
    "start": "1481660",
    "end": "1487360"
  },
  {
    "text": "the all right got a staircase down and then work my way up to understand what the hell happened so some languages have affordances have",
    "start": "1487360",
    "end": "1494560"
  },
  {
    "text": "make it easier to do certain kinds of programming Elm lets us for example do",
    "start": "1494560",
    "end": "1501760"
  },
  {
    "text": "this just work with functions but we've got this this pipe operator thing and when I say operator I mean it's a",
    "start": "1501760",
    "end": "1508540"
  },
  {
    "text": "function it's a function that has a funny name basically and so there is a",
    "start": "1508540",
    "end": "1513640"
  },
  {
    "text": "forces within elm within high school with a bunch of languages to let us come up with these operators to let us work",
    "start": "1513640",
    "end": "1519700"
  },
  {
    "text": "with these function pipelines more easily we don't have that option in JavaScript so which gives rise to and",
    "start": "1519700",
    "end": "1526780"
  },
  {
    "text": "same with Ruby in Python and PHP and what have you and so it gives rise to something with Gary Bernhardt calls for Gary Byrne had calls fo o so it looks",
    "start": "1526780",
    "end": "1535030"
  },
  {
    "text": "like oh whoa but it works like FP so",
    "start": "1535030",
    "end": "1540040"
  },
  {
    "text": "food to inventor an array thing you know you make a new my array and give you",
    "start": "1540040",
    "end": "1546010"
  },
  {
    "text": "some items and we've implemented map for this I'm using the class syntax so just in case you don't really know JavaScript",
    "start": "1546010",
    "end": "1552520"
  },
  {
    "text": "but you know Ruby or c-sharp you know it's a little more familiar than dot prototype dot but anyway so we're",
    "start": "1552520",
    "end": "1559510"
  },
  {
    "text": "constructing new one and we go to map function and internally that's going to go over it's going to look at sort of",
    "start": "1559510",
    "end": "1564610"
  },
  {
    "text": "the objects kind of state we set it up and it's Co is being populated with some state in this constructor here and then",
    "start": "1564610",
    "end": "1570310"
  },
  {
    "text": "in the map we're gonna look at that state we're gonna iterate over it and we're going to apply a function that way",
    "start": "1570310",
    "end": "1577570"
  },
  {
    "text": "it's been given to us because it's map and we're gonna take the result of it and stuffing it in a new array and then",
    "start": "1577570",
    "end": "1582670"
  },
  {
    "text": "we're gonna return a new my array with those items it looks like oh whoa but we",
    "start": "1582670",
    "end": "1591550"
  },
  {
    "text": "feel if we use it like this we've got this transformation that we love to do we pull it out it's referential",
    "start": "1591550",
    "end": "1599350"
  },
  {
    "text": "transparent but it looks like oh yes best of both worlds so we get a little bit of a UI we sort of use take",
    "start": "1599350",
    "end": "1606370"
  },
  {
    "text": "advantage of the JavaScript saw Tobias kind of UI to produce this kind of code",
    "start": "1606370",
    "end": "1612220"
  },
  {
    "text": "so we can get we can make entire libraries of this stuff like functional Combinator's and things and that's what sanctuary",
    "start": "1612220",
    "end": "1617770"
  },
  {
    "text": "folktale and Rand are all about basically sort of photo kind of kind of sort of functional",
    "start": "1617770",
    "end": "1623860"
  },
  {
    "text": "helpers and values and whatever and there's jeaious friendly in its user interface as opposed to big compositions",
    "start": "1623860",
    "end": "1630640"
  },
  {
    "text": "of functions that are really hard to follow what's going on so alright cool",
    "start": "1630640",
    "end": "1636820"
  },
  {
    "text": "so alright I'm gonna keep going immutability this will be quick I wrote",
    "start": "1636820",
    "end": "1643420"
  },
  {
    "text": "a function I'm really proud of this function I'm so proud of I called or twice it's big list it takes about 40",
    "start": "1643420",
    "end": "1650620"
  },
  {
    "text": "seconds to run and it produces the numbers 2 through 12 or something or 1 3",
    "start": "1650620",
    "end": "1655840"
  },
  {
    "text": "12 so because it takes ages to run I want to you know who seen this before I",
    "start": "1655840",
    "end": "1661210"
  },
  {
    "text": "want to try and pull it up here and it totally works the same right new new it",
    "start": "1661210",
    "end": "1666430"
  },
  {
    "text": "doesn't something went wrong so it turns out that even numbers is a terrible",
    "start": "1666430",
    "end": "1671860"
  },
  {
    "text": "function and I should be ashamed of myself because some you don't don't send the details of this but somewhere in the",
    "start": "1671860",
    "end": "1677320"
  },
  {
    "text": "middle of it it's stuffing around with you right now we saw this said earlier in the referential transparency examples so because it's it's stuffed around and",
    "start": "1677320",
    "end": "1685780"
  },
  {
    "text": "we've given it a list and it's like you know it's like a you've learnt your lawnmower to your neighbor or something",
    "start": "1685780",
    "end": "1691330"
  },
  {
    "text": "and they've gotten mowing the lawn and they're taking out the engine giving you back site thanks this fantastic way so",
    "start": "1691330",
    "end": "1699010"
  },
  {
    "text": "similar deal here we've given something and it's like it's changed so let's try and imagine a world where this doesn't",
    "start": "1699010",
    "end": "1705070"
  },
  {
    "text": "happen and we can try and achieve this through a few different ways one is the",
    "start": "1705070",
    "end": "1710440"
  },
  {
    "text": "quality or sort of property of the codes so if it's something is referentially transparent then it won't be doing this",
    "start": "1710440",
    "end": "1716070"
  },
  {
    "text": "or there can be a language restriction for example Haskell Elm reason I think",
    "start": "1716070",
    "end": "1722080"
  },
  {
    "text": "please correct me if I'm wrong we'll basically enforce this at the language level we'll say it will not provide a",
    "start": "1722080",
    "end": "1729400"
  },
  {
    "text": "way unless you use you know an escape hatch somewhere will not allow you to mutate a variable which means you can do",
    "start": "1729400",
    "end": "1736120"
  },
  {
    "text": "it go and do other things like optimize the hell out of stuff so it seems immutable but is actually move under the covers as an entire rental thing or",
    "start": "1736120",
    "end": "1743080"
  },
  {
    "text": "through a PR restriction not really providing a way to without throwing an error or not providing away at all so sort of unified",
    "start": "1743080",
    "end": "1749440"
  },
  {
    "text": "em you take the data so if you've got seamless immutable JavaScript library what it will do if you wrap it around",
    "start": "1749440",
    "end": "1754960"
  },
  {
    "text": "the list if you try and do something that's mutating it'll throw an exception to run time just fine and says no no no",
    "start": "1754960",
    "end": "1762639"
  },
  {
    "text": "no something went wrong here it's true in an effort to try and catch this sooner than later catch this sort of error sooner than",
    "start": "1762639",
    "end": "1768220"
  },
  {
    "text": "later object or freeze is another way of doing it except it's got limitations",
    "start": "1768220",
    "end": "1773620"
  },
  {
    "text": "where you know if you've got if you're dealing with objects and doesn't quite do it so you've got a couple of different options for doing this via the",
    "start": "1773620",
    "end": "1779529"
  },
  {
    "text": "API restriction route one of them is seamless immutable which is like preserving all the UI for working with",
    "start": "1779529",
    "end": "1786369"
  },
  {
    "text": "lists and a bunch of other things but there's also immutable J's which is strange alien beast when you try and use",
    "start": "1786369",
    "end": "1792369"
  },
  {
    "text": "it but it applies you have you know maps and sets and lists and but it's got a",
    "start": "1792369",
    "end": "1797440"
  },
  {
    "text": "very different UI and doesn't expose away in the UI to actually change stuff mutable it's like it's taking a",
    "start": "1797440",
    "end": "1804369"
  },
  {
    "text": "different tack it's not like I'm going to open a door and then slap you if you try and walk through it it's a case of",
    "start": "1804369",
    "end": "1809470"
  },
  {
    "text": "there's no door so anyway but it's also like some people find it really",
    "start": "1809470",
    "end": "1814809"
  },
  {
    "text": "Byzantine difficult to work with so whatever try it out works you fantastic if it doesn't yeah so effects these",
    "start": "1814809",
    "end": "1822340"
  },
  {
    "text": "values next major section affects those values is the idea of representing",
    "start": "1822340",
    "end": "1829330"
  },
  {
    "text": "impure actions as values that can make them pure I start representing impure",
    "start": "1829330",
    "end": "1834369"
  },
  {
    "text": "actions impure actions as values you can make them pure or representing impure actions as instructions to be later",
    "start": "1834369",
    "end": "1840460"
  },
  {
    "text": "interpreted can make them pure so bear with me because I have a silly example",
    "start": "1840460",
    "end": "1846159"
  },
  {
    "text": "and full of these we have if we have something that so we've got the idea or",
    "start": "1846159",
    "end": "1852759"
  },
  {
    "text": "we want to represent the idea of printing a message out to the console we're going to function that will construct a value which represents",
    "start": "1852759",
    "end": "1859269"
  },
  {
    "text": "printing something out and we have something which will one of put many",
    "start": "1859269",
    "end": "1864730"
  },
  {
    "text": "potentially many sort of interpreters that will actually will take this thing and then do something as a result of it",
    "start": "1864730",
    "end": "1870100"
  },
  {
    "text": "this could be one thing that prints out to the console could be another one that could be pure and although one which sends it over the wire to a radio",
    "start": "1870100",
    "end": "1876100"
  },
  {
    "text": "transmitter like whatever and then finally the bottom here we're going to make high which is value representing the idea of",
    "start": "1876100",
    "end": "1882280"
  },
  {
    "text": "printing out a message trying to make this less long we did so gonna squished it up and keep going so we've got high",
    "start": "1882280",
    "end": "1889450"
  },
  {
    "text": "but there means we can make an array of you know we can start treating this like a value like other sort of pure values",
    "start": "1889450",
    "end": "1896530"
  },
  {
    "text": "that we already have so we can stuff in an array and say hey this represents printing out high four times so squish",
    "start": "1896530",
    "end": "1904000"
  },
  {
    "text": "that up and then so we can have and then file a Terron we we can then a separate",
    "start": "1904000",
    "end": "1911830"
  },
  {
    "text": "area of the code base maybe have this thing where we go and loop through the messages and we evaluate the message",
    "start": "1911830",
    "end": "1917490"
  },
  {
    "text": "evaluate each each of the messages in that list we're going to we had the instructions and separately later we're going to interpret them to be something",
    "start": "1917490",
    "end": "1923740"
  },
  {
    "text": "there's actually effect for something has side effects like consult or log so this fits pure this bits not and the two",
    "start": "1923740",
    "end": "1933610"
  },
  {
    "text": "shell on meat or whatever so they could be right above each other they could be other sides the code base as I'll saying before modularity you have a lot more",
    "start": "1933610",
    "end": "1940120"
  },
  {
    "text": "flexibility in terms what we put this thing now I'm aware that this particular example seems really ridiculous but it",
    "start": "1940120",
    "end": "1946780"
  },
  {
    "text": "is real I use this stuff every day and it's really nice once you get the swing",
    "start": "1946780",
    "end": "1952960"
  },
  {
    "text": "of it but it's utterly alien when you haven't seen it before so here's another library another example um a flu char is",
    "start": "1952960",
    "end": "1960309"
  },
  {
    "text": "an unfortunately named library that doing Fantasyland in future funny name",
    "start": "1960309",
    "end": "1965670"
  },
  {
    "text": "it's all good whatever but it's a beta or there's other ones like dart or TAS but there also represent these things",
    "start": "1965670",
    "end": "1973330"
  },
  {
    "text": "that will happen in future is almost like promises except we'll come all will talk about promises in a tick but this",
    "start": "1973330",
    "end": "1980950"
  },
  {
    "text": "is something that is doing the fetch and returning a future value and so you know",
    "start": "1980950",
    "end": "1988390"
  },
  {
    "text": "we can do stuff with as a result of that we're gonna have values that use use the earlier pieces that we defined or",
    "start": "1988390",
    "end": "1995200"
  },
  {
    "text": "whatever and I'll step through this in a minute but we've got a pure piece here that's all about the instructions for if",
    "start": "1995200",
    "end": "2000240"
  },
  {
    "text": "we were to do something kind of asynchronous what would we do separately to the we're actually going to go and do",
    "start": "2000240",
    "end": "2006450"
  },
  {
    "text": "it now so I got the again keep separating the pure stuff from the",
    "start": "2006450",
    "end": "2012210"
  },
  {
    "text": "impure so if we create a future here and then we dot map map being a generic name here",
    "start": "2012210",
    "end": "2019860"
  },
  {
    "text": "as in we with the contents of the fit with the result of the future it's all it's a dot then for this it perhaps",
    "start": "2019860",
    "end": "2025830"
  },
  {
    "text": "should be called dot in but you know with dot map we're going to get the result and then we're going to pass the",
    "start": "2025830",
    "end": "2031560"
  },
  {
    "text": "HTML app using the response we've gotten back from the URL and then separately we've got linked pages which will use",
    "start": "2031560",
    "end": "2037680"
  },
  {
    "text": "the idea of fetching the thing for and pay and parsing the HTML out and we're",
    "start": "2037680",
    "end": "2043230"
  },
  {
    "text": "going to use that to scrape a bunch of stuff and do it in parallel this is all",
    "start": "2043230",
    "end": "2049980"
  },
  {
    "text": "just the idea of doing it as opposed to an actual it's going into it like even the dot parallel bit is still values",
    "start": "2049980",
    "end": "2056070"
  },
  {
    "text": "representing potential computation stuff and then we're gonna fork it and we say that you know if it throws an error if",
    "start": "2056070",
    "end": "2061860"
  },
  {
    "text": "there's an error in the in the thing that we want to bubble up the error otherwise we're going to take the result",
    "start": "2061860",
    "end": "2066929"
  },
  {
    "text": "and save it to the database or something you know it's very made up but yeah it",
    "start": "2066930",
    "end": "2073889"
  },
  {
    "text": "basically we've got the means we have flexibility like a so promises",
    "start": "2073890",
    "end": "2079200"
  },
  {
    "text": "unfortunately as soon as you can create this stuff will its promises as soon as",
    "start": "2079200",
    "end": "2084810"
  },
  {
    "text": "you you write it down you as soon as you execute it the horse is away and over the hill and you're furiously like oh",
    "start": "2084810",
    "end": "2090000"
  },
  {
    "text": "wait a minute I'm just gonna try and close this gate it's it goes and does stuff it just you",
    "start": "2090000",
    "end": "2095820"
  },
  {
    "text": "know fires the missiles it just goes as opposed to well or I want to do some stuff I want to mainly muck around with",
    "start": "2095820",
    "end": "2102210"
  },
  {
    "text": "this first before I go and do the thing and also it's got the idea of this sort of resolved value in this case I have",
    "start": "2102210",
    "end": "2110190"
  },
  {
    "text": "got the links pages in linked HTML that are using eventual HTML twice and it",
    "start": "2110190",
    "end": "2115380"
  },
  {
    "text": "will evaluate it twice which is either a good thing or a bad thing depending what you're after and if we want to catch",
    "start": "2115380",
    "end": "2121890"
  },
  {
    "text": "this and we can chuck an extra cash wrapper around this the future provides where the flexibility saying evaluate this multiple times evaluate it once",
    "start": "2121890",
    "end": "2128340"
  },
  {
    "text": "with the flexibility there so for this very specific example sorry",
    "start": "2128340",
    "end": "2136430"
  },
  {
    "text": "yep so the question was is this a",
    "start": "2137900",
    "end": "2143760"
  },
  {
    "text": "deferred execution uh it really has to say something else a sharp unfortunately I I use C sharp a full",
    "start": "2143760",
    "end": "2151710"
  },
  {
    "text": "link existed so I'm not the right person but it's the idea of yet defer a deferring the execution but it's it's",
    "start": "2151710",
    "end": "2158760"
  },
  {
    "text": "also in this case the idea of representing something that is effective as a value it just so happens that async",
    "start": "2158760",
    "end": "2164369"
  },
  {
    "text": "is the burning question on most years devs like their minds including myself and so it's a somewhat relevant example",
    "start": "2164369",
    "end": "2171660"
  },
  {
    "text": "but this as I said with a messengers thing you know you could equally have something that represents so the impure",
    "start": "2171660",
    "end": "2178650"
  },
  {
    "text": "stuff um for example actually no I'll come back to that but yeah future and data dot",
    "start": "2178650",
    "end": "2185400"
  },
  {
    "text": "task of examples of this particular async thing but it's a very general idea that applies to a bunch of different contexts so now on to the potentially",
    "start": "2185400",
    "end": "2194490"
  },
  {
    "text": "controversial bit which depend on the circles you movie could be yeah this could be nuts and you know a bad thing",
    "start": "2194490",
    "end": "2202079"
  },
  {
    "text": "or it could just be business as usual I depends coming from different areas I came from a PHP background via way of",
    "start": "2202079",
    "end": "2208619"
  },
  {
    "text": "Ruby and other sorts of things some people come from like entirely c-sharp or Java the entire way and this is like",
    "start": "2208619",
    "end": "2214200"
  },
  {
    "text": "of course I want types you know but we're gonna get through it regardless probably a little quickly but we will so",
    "start": "2214200",
    "end": "2223079"
  },
  {
    "text": "I again I have this probably there's this problem where I write code on our write terrible code this is one example",
    "start": "2223079",
    "end": "2228900"
  },
  {
    "text": "I've got you know my utils and it's going to reverse a string and of course it's going to explode because undefined",
    "start": "2228900",
    "end": "2234390"
  },
  {
    "text": "is you know not a string it's also going to exploit if I feet at seven you know so this is going to explode",
    "start": "2234390",
    "end": "2240359"
  },
  {
    "text": "whoa I don't know if it's going to explode we don't really know we've got no way of",
    "start": "2240359",
    "end": "2246359"
  },
  {
    "text": "telling the only way we really have it telling is sort of the name sort of",
    "start": "2246359",
    "end": "2251400"
  },
  {
    "text": "guess the name then go read and dig into the code to try and figure out actually doing to see if it lines up with what",
    "start": "2251400",
    "end": "2256589"
  },
  {
    "text": "the names saying is or what the documentation says etc so let's look at this string of us function itself I've",
    "start": "2256589",
    "end": "2262740"
  },
  {
    "text": "got a parameter X and given the name and what we're doing with the function we've dug into it it looks like it's the",
    "start": "2262740",
    "end": "2268710"
  },
  {
    "text": "string anyone calling with this number you know a bad person they should feel wrong you know that's what she'll feel",
    "start": "2268710",
    "end": "2274559"
  },
  {
    "text": "bad or whatever but it'd be really nice if we could tell the computer what we mean if we give them the computer more",
    "start": "2274559",
    "end": "2280020"
  },
  {
    "text": "information to help us and so there are some tools that let us do things like annotate things with you know string or",
    "start": "2280020",
    "end": "2285450"
  },
  {
    "text": "whatever and you know if you use in the right way it'll pass if you don't it'll",
    "start": "2285450",
    "end": "2290609"
  },
  {
    "text": "explode etc etc so I'm using flow for this particular example but there's a few",
    "start": "2290609",
    "end": "2296490"
  },
  {
    "text": "competing ones flow and typescript and if someone knows Google closure because I don't I'd like to speak to you",
    "start": "2296490",
    "end": "2302010"
  },
  {
    "text": "afterwards it can be across this stuff but um for example gonna I've got my chunk of code example jeaious I'm gonna",
    "start": "2302010",
    "end": "2308910"
  },
  {
    "text": "check out the flow and I got no errors yeah I'm gonna run the code and it",
    "start": "2308910",
    "end": "2313950"
  },
  {
    "text": "produces hello backwards fantastic i Chuck a wrong value in and has a big sad exactly as I expect great so you know",
    "start": "2313950",
    "end": "2323010"
  },
  {
    "text": "you've got strings you got you know arrays numbers you've got their punching",
    "start": "2323010",
    "end": "2328290"
  },
  {
    "text": "holes where you've got like it Julie like George generics or is also known usually FP Landers parama tricity where",
    "start": "2328290",
    "end": "2334920"
  },
  {
    "text": "your jargon sorry where you basically this function is not allowed to know",
    "start": "2334920",
    "end": "2340049"
  },
  {
    "text": "what T is you can't do reflection on T in most languages",
    "start": "2340049",
    "end": "2345569"
  },
  {
    "text": "it varies as to whether like the stronger the stronger the some type",
    "start": "2345569",
    "end": "2352380"
  },
  {
    "text": "systems don't let you do it intentionally I think c-sharp is one of the ones that don't let you look at T Java is the one",
    "start": "2352380",
    "end": "2357809"
  },
  {
    "text": "of the ones that lets you look at it I would love to all such out with some c-sharp people a picture of my assumptions are correct but basically",
    "start": "2357809",
    "end": "2364140"
  },
  {
    "text": "it's is the t's determined by the person who's calling it by the code that's calling it determines the type and the",
    "start": "2364140",
    "end": "2369329"
  },
  {
    "text": "function itself is not allowed to make any assumptions at all about what T is it can't add a number it can't add one",
    "start": "2369329",
    "end": "2374579"
  },
  {
    "text": "to every element and list or anything like that it's not allowed to know intentionally it's you know got blinders",
    "start": "2374579",
    "end": "2380880"
  },
  {
    "text": "on so this works and this works and you know fantastic we can go further we can",
    "start": "2380880",
    "end": "2386040"
  },
  {
    "text": "have things that are particular object shapes we've got this thing here that is a way of saying you know this thing is",
    "start": "2386040",
    "end": "2392250"
  },
  {
    "text": "intentionally a string or potentially undefined whereas usually be a string and only string and no numbers no",
    "start": "2392250",
    "end": "2397380"
  },
  {
    "text": "undefined no no no nothing we've got ways of saying you know a type is this thing or this thing here in the room",
    "start": "2397380",
    "end": "2403559"
  },
  {
    "text": "uses Redux at all yeah okay well this might look a little more familiar sort of a redox reducer",
    "start": "2403559",
    "end": "2409450"
  },
  {
    "text": "we've got we've defined this particular shape and I say it could be either this this thing or can be other that thing",
    "start": "2409450",
    "end": "2415020"
  },
  {
    "text": "and so the computer will help us in this case flow will help us check that we are",
    "start": "2415020",
    "end": "2421180"
  },
  {
    "text": "using h1 croco properly so if we go into if we end up with a logged in thing then before letting us into action letting us",
    "start": "2421180",
    "end": "2428590"
  },
  {
    "text": "use action dot user we need to have chair it proven that action dot type is",
    "start": "2428590",
    "end": "2433630"
  },
  {
    "text": "logged in we need to make sure it's the first option before we allowed to use the guts of it otherwise if the second",
    "start": "2433630",
    "end": "2439030"
  },
  {
    "text": "branch called don't use it it's not there like it's undefined what's going wrong sorry oh what's going on it's it's",
    "start": "2439030",
    "end": "2444760"
  },
  {
    "text": "just basically broken whereas if we the code here is checking flow here is making sure that we've verified we've",
    "start": "2444760",
    "end": "2450910"
  },
  {
    "text": "proven to the compiler all the type checker that we've we're able to get",
    "start": "2450910",
    "end": "2456010"
  },
  {
    "text": "down a certain path and this is all decisions made by the different type checkers it's not inherent to type",
    "start": "2456010",
    "end": "2461560"
  },
  {
    "text": "checking it's just something I've chosen to do so back to our first example I've got the string there but these tools to",
    "start": "2461560",
    "end": "2467920"
  },
  {
    "text": "varying extents can infer some of these information for you such that you don't need to write the things sometimes you",
    "start": "2467920",
    "end": "2473200"
  },
  {
    "text": "write it only on the outer edges flow makes you annotate every external facing module whereas it will infer inside",
    "start": "2473200",
    "end": "2479650"
  },
  {
    "text": "typescript I still trouble figure out the inference rules sometimes it will sometimes it won't I gotta get better at that but anyway so",
    "start": "2479650",
    "end": "2487240"
  },
  {
    "text": "these are sort of small family tools like flow and typescript glue the closure as I said earlier so what's this",
    "start": "2487240",
    "end": "2495310"
  },
  {
    "text": "doing in a functional programming talk why am I talking about types god so it all comes down to expressions consider",
    "start": "2495310",
    "end": "2503980"
  },
  {
    "text": "language where everything is a composable expression we saw one of those earlier where everything including",
    "start": "2503980",
    "end": "2509680"
  },
  {
    "text": "effects because remember we can express effects in terms of pure values things that stand in for it for values if",
    "start": "2509680",
    "end": "2517030"
  },
  {
    "text": "things are expressed in return values it means that we can suddenly that there",
    "start": "2517030",
    "end": "2522250"
  },
  {
    "text": "are tone values of the function describe a lot more about how the code works because we're it's the type system is",
    "start": "2522250",
    "end": "2528970"
  },
  {
    "text": "describing more about how the program is put together suddenly you can rely on it",
    "start": "2528970",
    "end": "2534550"
  },
  {
    "text": "a lot more you can have it do things like checking something is referentially transparent or not this is basically the idea behind",
    "start": "2534550",
    "end": "2541910"
  },
  {
    "text": "Haskell if you're ever being curious about what the hell that thing is this is basically it everything's pure",
    "start": "2541910",
    "end": "2547760"
  },
  {
    "text": "affects his values really strong type system chuck it together fantastic so I",
    "start": "2547760",
    "end": "2554780"
  },
  {
    "text": "kind of jumped over my my bio at the beginning deliberately because I want to",
    "start": "2554780",
    "end": "2560180"
  },
  {
    "text": "explain some motivation stuff here I went through bare basic and PHP for like a good no I did pay to be free with",
    "start": "2560180",
    "end": "2566630"
  },
  {
    "text": "seven years or something with you know JavaScript throughout their time as JavaScript evolved which was an interesting process and you know and",
    "start": "2566630",
    "end": "2574160"
  },
  {
    "text": "then I had troubles with the community in terms of making sure my stuff worked",
    "start": "2574160",
    "end": "2579800"
  },
  {
    "text": "I it's not inherently problem with PHP but at the time the PHP community was",
    "start": "2579800",
    "end": "2585320"
  },
  {
    "text": "not very interested in anything like testing I was really I really cared about making sure my stuff did not break",
    "start": "2585320",
    "end": "2590840"
  },
  {
    "text": "I wanted to use the computer as much as I can to help me with that I asked the PHP made up like who here in the room",
    "start": "2590840",
    "end": "2596540"
  },
  {
    "text": "has used PHP unit before and I got three hands you know he's used to work no hands like it's gotten a lot better at the time it",
    "start": "2596540",
    "end": "2604520"
  },
  {
    "text": "kind of it kind of sucked for that and so I ended up moving to Ruby because of the strong testing culture I really",
    "start": "2604520",
    "end": "2610610"
  },
  {
    "text": "wanted to make sure my stuff didn't break and so the of course you write tons of tests to make sure your stuff works how you think it is was sort of",
    "start": "2610610",
    "end": "2616580"
  },
  {
    "text": "natural for that for the Ruby community and so I really enjoyed set I really enjoyed doing that for a while I want to",
    "start": "2616580",
    "end": "2621800"
  },
  {
    "text": "make sure my stuff didn't it make sure my stuff didn't break and so over time",
    "start": "2621800",
    "end": "2627050"
  },
  {
    "text": "though I found myself doing uh writing a lot a lot of tests to make assumptions",
    "start": "2627050",
    "end": "2632450"
  },
  {
    "text": "about my code it's almost like you trying to prove a negative like you sort of you to contests and positive cases",
    "start": "2632450",
    "end": "2638240"
  },
  {
    "text": "and some select negative cases it'll probably break if you caught this thing but you can't possibly test everything because you can feed anything anything",
    "start": "2638240",
    "end": "2645170"
  },
  {
    "text": "at any point you should be writing tests and tests and tests forever and particularly when it comes to refactoring I found that I'd either had",
    "start": "2645170",
    "end": "2651050"
  },
  {
    "text": "to take tiny mincing steps where I write tons and tons of tests to do like a larger scale refactorings or I'd",
    "start": "2651050",
    "end": "2657950"
  },
  {
    "text": "basically do the leap of faith across the gap and write tests fail aside and hope to god it kind of made it it was",
    "start": "2657950",
    "end": "2663620"
  },
  {
    "text": "unsatisfactory for me in that regard I loved the rest like the the rest of the Ruby experience but that particularly bit really got me down to",
    "start": "2663620",
    "end": "2670850"
  },
  {
    "text": "the point where I ended up jumping straight to haskell so this my entire my entire experience with the guy",
    "start": "2670850",
    "end": "2678210"
  },
  {
    "text": "my motivation for this business is entirely been about types and the functional program but it sort of happened as a result of that the",
    "start": "2678210",
    "end": "2684369"
  },
  {
    "text": "stronger the types strong type systems seem to naturally lend themselves to",
    "start": "2684369",
    "end": "2689920"
  },
  {
    "text": "functional program now rust and stuff exists with zone strong typing system and that tight typing systems fantastic",
    "start": "2689920",
    "end": "2696280"
  },
  {
    "text": "and describes a set of behavior and the Haskell type systems some other things described another set of behavior and",
    "start": "2696280",
    "end": "2701319"
  },
  {
    "text": "that's fine I ended up jumping to the Haskell side of things to get strong types FB kind of happened and then I",
    "start": "2701319",
    "end": "2706839"
  },
  {
    "text": "started to introduce FP sorry I appreciate FP overtime as I got more into it as community to the point where",
    "start": "2706839",
    "end": "2713619"
  },
  {
    "text": "I'm now using something called pure script on the front end if I was starting in JavaScript I would this is",
    "start": "2713619",
    "end": "2719200"
  },
  {
    "text": "much later after the Haskell I would probably starting with Elm instead as a as a way to try and get more familiar",
    "start": "2719200",
    "end": "2724869"
  },
  {
    "text": "with this stuff and I encourage anyone is interested in vaguely interested in like experience who has stuff to try out Elm it's really interesting alright I'm",
    "start": "2724869",
    "end": "2733869"
  },
  {
    "text": "going to wrap up this talk shortly with a couple of things the competent",
    "start": "2733869",
    "end": "2738970"
  },
  {
    "text": "programmer I really like the tone in this quote but I really like what he's getting at the competent program is",
    "start": "2738970",
    "end": "2745150"
  },
  {
    "text": "fully aware this strictly limited sky a size of their own skull and God do I feel it I'm fully aware of how many",
    "start": "2745150",
    "end": "2751720"
  },
  {
    "text": "stupid mistakes I make in the process of writing code so I want to try and reduce the amount of things I need to think",
    "start": "2751720",
    "end": "2757780"
  },
  {
    "text": "about at once I want the computer to help me as much as I can and I want to reduce the amount of context that I need",
    "start": "2757780",
    "end": "2764920"
  },
  {
    "text": "to focus on a particular piece of code I want to zoom into a piece of the code and try to take it try and try to block",
    "start": "2764920",
    "end": "2773470"
  },
  {
    "text": "out the rest as much as is practical so like I was loyal looking at this chunk",
    "start": "2773470",
    "end": "2780760"
  },
  {
    "text": "of code and because things have been written in a referential transparent manner I know that just evaluating this",
    "start": "2780760",
    "end": "2787809"
  },
  {
    "text": "won't launch the missiles it won't send the horse bolting or whatever immutability means that the values I",
    "start": "2787809",
    "end": "2794260"
  },
  {
    "text": "lend to other functions I'm gonna say lens because like I please don't mock around them I need to use that like you",
    "start": "2794260",
    "end": "2799839"
  },
  {
    "text": "know client or all details and things they're not changing because of immutability and again they were filtering",
    "start": "2799839",
    "end": "2805329"
  },
  {
    "text": "referential transparency that affects those values that are building up preparing for something in this case",
    "start": "2805329",
    "end": "2811359"
  },
  {
    "text": "we're just returning the instructions that are later gonna turn into something and then type so I know what my inputs",
    "start": "2811359",
    "end": "2817509"
  },
  {
    "text": "are and so I know the word that I'm using the rest of my application corrected without having to go look at it we're only going to dig into the",
    "start": "2817509",
    "end": "2823299"
  },
  {
    "text": "implementation details of these things so further things to look into I did a",
    "start": "2823299",
    "end": "2830019"
  },
  {
    "text": "functional program talk and I didn't want to talk about recursion because I write Haskell as a day job and I don't",
    "start": "2830019",
    "end": "2835390"
  },
  {
    "text": "do recursion very often it's like everything FB is recursion will technically under the covers but I don't really notice a great deal of the time",
    "start": "2835390",
    "end": "2841329"
  },
  {
    "text": "so occurring I didn't do that either continuations a ways of representing",
    "start": "2841329",
    "end": "2848950"
  },
  {
    "text": "sort of stepped computation things like things you partially evaluate if anyone knows about generators continuations are",
    "start": "2848950",
    "end": "2854529"
  },
  {
    "text": "kind of like the functional version of that where you want to stepwise represent things asynchronous stuff is",
    "start": "2854529",
    "end": "2861190"
  },
  {
    "text": "very nicely mobile with continuations or lazy trees and things it's just there",
    "start": "2861190",
    "end": "2867130"
  },
  {
    "text": "are a bunch of things that were represented by this idea of continuations you've got pattern matching which is the decomposition",
    "start": "2867130",
    "end": "2873039"
  },
  {
    "text": "thing I was talking about for values and other things it's some some it may",
    "start": "2873039",
    "end": "2878229"
  },
  {
    "text": "eventually end up in in JavaScript there's a stage one proposal I don't",
    "start": "2878229",
    "end": "2883239"
  },
  {
    "text": "know if anyone does anyone know if it stays zero stage one if anyone nope okay but there's a pattern matching proposal",
    "start": "2883239",
    "end": "2889749"
  },
  {
    "text": "hope really it'll be interesting if it gets through I hope it does things like pass the Combinator libraries when you",
    "start": "2889749",
    "end": "2896019"
  },
  {
    "text": "want to consume and understand a sort of particular string a different way instead of reaching for a regex particle",
    "start": "2896019",
    "end": "2903489"
  },
  {
    "text": "many libraries are basically building up building up their source string",
    "start": "2903489",
    "end": "2908829"
  },
  {
    "text": "processing things our little functions instead and it's something to get into there's a library called you lately that",
    "start": "2908829",
    "end": "2917519"
  },
  {
    "text": "eul a at the very end I'm going to I'm gonna putting something on my blog after",
    "start": "2917519",
    "end": "2923349"
  },
  {
    "text": "this with a bunch of reference links to as jumping off points and this is one of",
    "start": "2923349",
    "end": "2928420"
  },
  {
    "text": "if you want to dig into maybe something that isn't a regex is like more interesting sort of as an experiment to learn about perhaps even using real code",
    "start": "2928420",
    "end": "2934930"
  },
  {
    "text": "it's up to you Elm Haskell and pure script I if your if this is all completely issue",
    "start": "2934930",
    "end": "2940869"
  },
  {
    "text": "my new to your I highly recommend Elm as something to muck around with there's",
    "start": "2940869",
    "end": "2946059"
  },
  {
    "text": "also the Haskell book or has called program from first principles if you really want to deep dive because I mean",
    "start": "2946059",
    "end": "2951910"
  },
  {
    "text": "it covers some of the little bits like you know the little depth of lambda calculus that's useful it it's a chapter",
    "start": "2951910",
    "end": "2957549"
  },
  {
    "text": "long it's a short chapter but the idea like learning about that helps you understand all the bits you know sort of",
    "start": "2957549",
    "end": "2964660"
  },
  {
    "text": "more like it's an abstract way of describing a whole bunch of things and so it's useful to be aware of it even if",
    "start": "2964660",
    "end": "2970299"
  },
  {
    "text": "you'll never actually write some production code that basically that I mean you cut you don't use your lambda calculus in production it's just a tool",
    "start": "2970299",
    "end": "2976420"
  },
  {
    "text": "to help you understand how some things relate to each other that may not seem to previously seem related and lastly",
    "start": "2976420",
    "end": "2983039"
  },
  {
    "text": "functional call Imperial imperative or effectual shell is the idea that Gary",
    "start": "2983039",
    "end": "2990640"
  },
  {
    "text": "Bernhardt presented in his his talk boundaries as basically a way of it's",
    "start": "2990640",
    "end": "2998019"
  },
  {
    "text": "saying that I'm with when we're writing functional programs and things like Ruby in this in this talks case equal applies",
    "start": "2998019",
    "end": "3004410"
  },
  {
    "text": "to JavaScript Python PHP LC sharp it's it's trade-offs between making things",
    "start": "3004410",
    "end": "3010170"
  },
  {
    "text": "pure and making things effect for and you do really want to touch the outside world sometimes but the idea is to try",
    "start": "3010170",
    "end": "3015420"
  },
  {
    "text": "and centralize as much to have as much the pure functional stuff doing the",
    "start": "3015420",
    "end": "3020519"
  },
  {
    "text": "business logic and really having this sort of thin shell on the outside doing the web handlers the cue wrappers the effect interpreters and that sort of",
    "start": "3020519",
    "end": "3027719"
  },
  {
    "text": "stuff interacting with the outside world there and he's the idea was eighty percent functional is better than zero percent you don't have to get to 99",
    "start": "3027719",
    "end": "3033869"
  },
  {
    "text": "percent it's you know it's just kind of it's useful to try this as a trade-off",
    "start": "3033869",
    "end": "3038999"
  },
  {
    "text": "between the two different styles and see how it works for you cool well thank you",
    "start": "3038999",
    "end": "3045900"
  },
  {
    "text": "very much you",
    "start": "3045900",
    "end": "3051510"
  }
]