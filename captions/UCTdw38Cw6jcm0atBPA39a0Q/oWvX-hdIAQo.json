[
  {
    "text": "all right looks like we got a full house going on today that's really exciting so uh welcome um hope you guys are all",
    "start": "8679",
    "end": "15040"
  },
  {
    "text": "having a great time today at NDC uh my name is Matt Burke and welcome to you're",
    "start": "15040",
    "end": "20279"
  },
  {
    "text": "doing exceptions wrong um so I'm from the United States I have run a little",
    "start": "20279",
    "end": "25320"
  },
  {
    "text": "small consultancy of just myself and a couple of clients um I'm really excited",
    "start": "25320",
    "end": "30439"
  },
  {
    "text": "here to kind of talk to you guys about error handling and some of the things that I've picked up over the years um",
    "start": "30439",
    "end": "36719"
  },
  {
    "text": "you can find me at all the social places after sort of Twitter imploded everybody went everywhere and so I tried to come",
    "start": "36719",
    "end": "42559"
  },
  {
    "text": "up with a an account at most of the places so if you're looking to have further conversations those things are",
    "start": "42559",
    "end": "48160"
  },
  {
    "text": "all available there as well so I feel like um exceptions have",
    "start": "48160",
    "end": "53719"
  },
  {
    "text": "this pretty kind of bad reputation right we kind of look online and there's always these kind of new articles coming",
    "start": "53719",
    "end": "58879"
  },
  {
    "text": "out about what's wrong with exceptions there's plenty of really good rants out there about why exceptions are like the",
    "start": "58879",
    "end": "65360"
  },
  {
    "text": "worst thing ever and people are always talking about different tradeoffs and different ways of trying to do error",
    "start": "65360",
    "end": "70439"
  },
  {
    "text": "handling in their applications um and even even at this conference I think some of the other talks you probably get",
    "start": "70439",
    "end": "75759"
  },
  {
    "text": "some different approaches things like a result pattern are pretty common and popular and there's a few other um out",
    "start": "75759",
    "end": "81640"
  },
  {
    "text": "there that are that are going on um but actually my my kind of hot take is that I think exceptions are actually pretty",
    "start": "81640",
    "end": "87960"
  },
  {
    "text": "good um they're a great way of managing errors in in programs at least the types",
    "start": "87960",
    "end": "93079"
  },
  {
    "text": "of programs that I tend to work on and I think that you know as net developers you're probably tend to be in the same",
    "start": "93079",
    "end": "99200"
  },
  {
    "text": "boat and I hope that like at the end of this talk we kind of all Come Away with some ways of dealing with exceptions",
    "start": "99200",
    "end": "105240"
  },
  {
    "text": "better so that you'll agree with me that they are actually pretty good but of course the programming in community is",
    "start": "105240",
    "end": "111280"
  },
  {
    "text": "pretty broad right there's different people are working in different types of applications different kinds of protocols um and each of those have",
    "start": "111280",
    "end": "118200"
  },
  {
    "text": "their own trade-offs and pros and so I kind of want to lay out kind of where we're coming from just to kind of get on",
    "start": "118200",
    "end": "124119"
  },
  {
    "text": "the same page right um so if you're like me you're probably tending to work on some",
    "start": "124119",
    "end": "129840"
  },
  {
    "text": "applications that are primarily in C maybe you're touching JavaScript or typescript or Java these are the kind of",
    "start": "129840",
    "end": "135640"
  },
  {
    "text": "languages where garbage collection is kind of the way of doing memory management and exceptions are the",
    "start": "135640",
    "end": "141599"
  },
  {
    "text": "idiomatic way that errors are handling um and we tend to work on pry kind of line of business kind of web",
    "start": "141599",
    "end": "148640"
  },
  {
    "text": "applications um and by line of business I mean they're fairly low risk right it's not a pacemaker it's not keeping",
    "start": "148640",
    "end": "155519"
  },
  {
    "text": "somebody's heart pumping um and then as a web application if something crashes it's not taking down the entire process",
    "start": "155519",
    "end": "162360"
  },
  {
    "text": "right the server is still alive it's still responding it's still processing error processing data for other users um",
    "start": "162360",
    "end": "169680"
  },
  {
    "text": "but one of the things that kind of comes out a lot of times when people are talking about the downsides of exceptions is exceptions suck because",
    "start": "169680",
    "end": "176360"
  },
  {
    "text": "they're slow you'll see this one a lot but like in my perspective like I'm writing JavaScript half the time and uh",
    "start": "176360",
    "end": "183879"
  },
  {
    "text": "the performance level of an exception versus some other thing is just really not on my radar and one of the studies I",
    "start": "183879",
    "end": "190799"
  },
  {
    "text": "saw someone had done a kind of an experiment and they looked at measuring return codes like what if we just return",
    "start": "190799",
    "end": "195879"
  },
  {
    "text": "true or false or some kind of enum instead of throwing an exception they're like look it's only like a nanc it's",
    "start": "195879",
    "end": "201280"
  },
  {
    "text": "basically the same speed as a as a method call or when we do an exception",
    "start": "201280",
    "end": "206680"
  },
  {
    "text": "it's like 22 nond why on Earth would we do anything that is 22 times slower but",
    "start": "206680",
    "end": "212239"
  },
  {
    "text": "you know from my perspective and the kind of apps that I've tended to work on that exception is maybe 0 one% of the",
    "start": "212239",
    "end": "218439"
  },
  {
    "text": "time and it's on the other side of a 50 million nond SQL query so I'm just not concerned about performance of",
    "start": "218439",
    "end": "225439"
  },
  {
    "text": "exceptions versus return codes at that level right but all kinds of programming are cool and if you're working on",
    "start": "225439",
    "end": "230640"
  },
  {
    "text": "something where you do really care about that level performance I would love to hear about how you're doing your errors",
    "start": "230640",
    "end": "235840"
  },
  {
    "text": "because I love to learn about things from different you know different communities and different styles of programming and see how that can enhance",
    "start": "235840",
    "end": "242640"
  },
  {
    "text": "how we write things in the future and the other one we will sometimes hear is that exceptions suck",
    "start": "242640",
    "end": "247879"
  },
  {
    "text": "because they're like a non-local go-to right and go-to is of course considered harmful nobody wants to write a go-to",
    "start": "247879",
    "end": "253400"
  },
  {
    "text": "statement in their code anymore and this sounds kind of fair because anytime you're looking at you know a method",
    "start": "253400",
    "end": "259639"
  },
  {
    "text": "anywhere that you call another method an exception could be bubbled up it's going to jump out of your method and go off",
    "start": "259639",
    "end": "265120"
  },
  {
    "text": "and do something else U and people say that's kind of bad because it makes it hard to reason about but I think that",
    "start": "265120",
    "end": "271240"
  },
  {
    "text": "that's actually pretty useful um it's not really jumping anywhere right it's going to jump up the call stack back the",
    "start": "271240",
    "end": "278360"
  },
  {
    "text": "way that it came and when I've worked in languages that don't have this feature I get pretty annoyed with all the boilerplate that I've had to write to",
    "start": "278360",
    "end": "284560"
  },
  {
    "text": "kind of like okay I got an error I can't do anything with it I got to pass it up to my parent and I got to pass it up to",
    "start": "284560",
    "end": "289759"
  },
  {
    "text": "my parent and pass it up to my parent sort of man manually propagate that air up the call stack until you hit somebody",
    "start": "289759",
    "end": "295800"
  },
  {
    "text": "who can excuse me deal with it but I think there something interesting here in that",
    "start": "295800",
    "end": "301479"
  },
  {
    "text": "we are seeing there is something here that exceptions have a little bit of a bad reputation and I would like to kind",
    "start": "301479",
    "end": "307919"
  },
  {
    "text": "of figure out um why that is and think about how there's got to be a reason",
    "start": "307919",
    "end": "313759"
  },
  {
    "text": "that exceptions are the idiomatic error handling mechanism in great languages like C and and Java and JavaScript the",
    "start": "313759",
    "end": "320520"
  },
  {
    "text": "designers of those languages are not dumb and when they set up to make a general purpose programming language",
    "start": "320520",
    "end": "326479"
  },
  {
    "text": "they chose exceptions as their default error hand Ling mechanism but I think and so I think the",
    "start": "326479",
    "end": "333160"
  },
  {
    "text": "reason they get sign of a kind of a bad reputation is that we don't really use them very well right how many of us have",
    "start": "333160",
    "end": "338680"
  },
  {
    "text": "had like formal training on exceptions right we we probably had like a a single",
    "start": "338680",
    "end": "344919"
  },
  {
    "text": "afternoon in our courses that said here's how you write a try statement here's how you write a catch statement",
    "start": "344919",
    "end": "350039"
  },
  {
    "text": "good luck go out there into the world and kind of start start using them as you think and so since we don't get",
    "start": "350039",
    "end": "355280"
  },
  {
    "text": "formal training and we don't develop like a philosophy around exception handling we sort of just do what feels",
    "start": "355280",
    "end": "360919"
  },
  {
    "text": "okay in the moment we don't really have any principles or discipline about how we approach those errors and then as a",
    "start": "360919",
    "end": "367120"
  },
  {
    "text": "result our air handling becomes kind of halfhazard some apps do it this way some apps do it another way and it can become",
    "start": "367120",
    "end": "373319"
  },
  {
    "text": "really hard to get a kind of cohesive view of how we propagate and deal with errors in our Solutions and so that's",
    "start": "373319",
    "end": "379599"
  },
  {
    "text": "one of the things that I'm hoping to kind of address in this talk is that if we kind of go through and look at some examples we can build some principles",
    "start": "379599",
    "end": "386759"
  },
  {
    "text": "that will help us approach new scenarios uh and and develop apps that work with exceptions better so that Hacker News",
    "start": "386759",
    "end": "393560"
  },
  {
    "text": "won't have so much to complain about so we're going to drill through this and we're going to get some tips and",
    "start": "393560",
    "end": "398639"
  },
  {
    "text": "examples and then we're going to kind of unpack a few core principles at the end that even if you can't remember all the",
    "start": "398639",
    "end": "403960"
  },
  {
    "text": "little tips and details if you keep those core principles in mind it'll help you kind of make good decisions as you",
    "start": "403960",
    "end": "409319"
  },
  {
    "text": "approach your error handling in the future um and so and kind of structuring",
    "start": "409319",
    "end": "417160"
  },
  {
    "text": "this talk I'm kind of indebted to this article called vexing exceptions by Eric liard um Eric was the kind of principal",
    "start": "417160",
    "end": "424639"
  },
  {
    "text": "developer of the original C compiler and then led the rewrite uh into the Roslin",
    "start": "424639",
    "end": "429800"
  },
  {
    "text": "compiler he was um and also served on the language design committee for C so",
    "start": "429800",
    "end": "435120"
  },
  {
    "text": "he knows C really really well and he kind of and this amazing article which is old enough to drive by the way but I",
    "start": "435120",
    "end": "442160"
  },
  {
    "text": "think that just makes it Timeless and not dated um he breaks down exceptions into these four categories and the idea",
    "start": "442160",
    "end": "448919"
  },
  {
    "text": "being basically that if you can think about a different error and put it into one of these categories it'll kind of",
    "start": "448919",
    "end": "454440"
  },
  {
    "text": "give you some tips and ideas on how to handle the the exception and so that's",
    "start": "454440",
    "end": "460240"
  },
  {
    "text": "what we're going to do we're going to kind of pound through each of these some of them will take a little longer than others we'll talk about what the",
    "start": "460240",
    "end": "465319"
  },
  {
    "text": "exceptions are when they fit into this category and what that tells us about how we can deal with them both in the",
    "start": "465319",
    "end": "471360"
  },
  {
    "text": "throwing and the",
    "start": "471360",
    "end": "474198"
  },
  {
    "text": "catching so the first category that Eric talks about is what he calls the Fatal exception and these are the exceptions",
    "start": "478440",
    "end": "484319"
  },
  {
    "text": "that you can't really predict they're going to happen and you can't even really reliably clean up from them and",
    "start": "484319",
    "end": "489400"
  },
  {
    "text": "that's the key idea other languages might call this a panic in some other languages like rust um or a segfault",
    "start": "489400",
    "end": "495720"
  },
  {
    "text": "maybe if you're doing C right you're just your app is done it's shut down and in C these are going to typically be",
    "start": "495720",
    "end": "501759"
  },
  {
    "text": "things like the out of memory exception is kind of a classic example you know you can't really predict when you're just writing through some code that all",
    "start": "501759",
    "end": "508560"
  },
  {
    "text": "of a sudden you're going to run out of memory and then furthermore you can't even really safely allocate more memory",
    "start": "508560",
    "end": "514518"
  },
  {
    "text": "in your catch block so if you wrote a catch block for catch out of memory exception and then you tried to like log",
    "start": "514519",
    "end": "519839"
  },
  {
    "text": "it and that involves some string concatenation that allocates more memory and but you don't have any left what's",
    "start": "519839",
    "end": "525240"
  },
  {
    "text": "going to happen I'm not even really even sure so the the Judgment of of Eric is",
    "start": "525240",
    "end": "530279"
  },
  {
    "text": "that like we can't really deal with these exceptions and the best thing is to just let the app crash the other",
    "start": "530279",
    "end": "536880"
  },
  {
    "text": "example in C is the stack Overflow exception again if you're writing something you don't really know when you're going to run out of Stack space",
    "start": "536880",
    "end": "543320"
  },
  {
    "text": "if you're doing something recursive you might know that it might happen but you don't know exactly when um and again",
    "start": "543320",
    "end": "550200"
  },
  {
    "text": "when that happens if you try to catch a stack over exception what are you going to do you're going to call a log method which takes another stack frame like",
    "start": "550200",
    "end": "556640"
  },
  {
    "text": "you're just likely to make it worse in fact in after net 2.0 you can't even catch a stack Overflow exception I don't",
    "start": "556640",
    "end": "563959"
  },
  {
    "text": "know if that's still true in core but the way the framework Works they realize that this was a problem and even if you write a tri catch for stack Overflow it",
    "start": "563959",
    "end": "570240"
  },
  {
    "text": "just blows through your catch block anyway so our advice on these particular two types of exceptions is it's not",
    "start": "570240",
    "end": "576399"
  },
  {
    "text": "worth writing a catch block specifically for them if they occur your program is dead in the water and you might as well",
    "start": "576399",
    "end": "581959"
  },
  {
    "text": "let it let it die quickly so imagine if you know so imagine if you were writing something uh",
    "start": "581959",
    "end": "587680"
  },
  {
    "text": "to kind of recursively process a graph have anybody done the heard of the Advent of code it's like this it's",
    "start": "587680",
    "end": "592959"
  },
  {
    "text": "really fun uh yearly like different programming puzzles at the end of the year leading up to Christmas and a lot",
    "start": "592959",
    "end": "598000"
  },
  {
    "text": "of them involve graph project processing you know you're going to navigate a maze or one of those things um and recursion",
    "start": "598000",
    "end": "603800"
  },
  {
    "text": "is often what you wind up doing for one of those and so whenever you have recursion you have this possible ability",
    "start": "603800",
    "end": "609480"
  },
  {
    "text": "that you're going to call yourself a bunch of times and you're going to eventually run out of space and so what what Eric and I are suggesting is that",
    "start": "609480",
    "end": "616040"
  },
  {
    "text": "you can't just run out of space and try to catch a stack Overflow and and fix it that way your best bet is to try to",
    "start": "616040",
    "end": "622720"
  },
  {
    "text": "prevent it from happening in the first place you know keep track of the depth or visited nodes or or whatever and and",
    "start": "622720",
    "end": "628760"
  },
  {
    "text": "just make make sure it doesn't happen to begin with so the Fatal exceptions the key",
    "start": "628760",
    "end": "634160"
  },
  {
    "text": "thing to remember then is just that your process is basically going down there's not much you can do so it's better to",
    "start": "634160",
    "end": "640000"
  },
  {
    "text": "not clutter your code attempting to deal with them because having code that isn't going to actually work or is going to make things worse it's better just to",
    "start": "640000",
    "end": "646120"
  },
  {
    "text": "not have them so fatal exceptions honestly we",
    "start": "646120",
    "end": "652920"
  },
  {
    "text": "they don't happen all that often right I can count on one hand the number of times I've had a out of memory or stack Overflow in real production code but the",
    "start": "652920",
    "end": "660320"
  },
  {
    "text": "ones that the kinds that do happen quite a bit are the boneheaded exceptions and so I love this name because the",
    "start": "660320",
    "end": "666240"
  },
  {
    "text": "boneheaded exception is the one where you made a mistake and then this error kind of propagated out of that uh the",
    "start": "666240",
    "end": "672880"
  },
  {
    "text": "classic examples in in C are going to be your argument exception your null pointer exception maybe your index out",
    "start": "672880",
    "end": "678560"
  },
  {
    "text": "of range exception sometimes invalid operation exception is kind of sometimes in that",
    "start": "678560",
    "end": "684120"
  },
  {
    "text": "category depending on on how it's being thrown but the key differentiator of these types of of exeptions is that you",
    "start": "684120",
    "end": "690839"
  },
  {
    "text": "have a bug already you made a mistake this exception is not a bug itself it is telling you about a bug that you already",
    "start": "690839",
    "end": "697639"
  },
  {
    "text": "have and so the key thing that we think is important is that you don't try to catch these exceptions instead you",
    "start": "697639",
    "end": "703880"
  },
  {
    "text": "should prevent them from happening in the first place they're telling you about a bug you already have just letting the bug happen and then reacting",
    "start": "703880",
    "end": "710480"
  },
  {
    "text": "to it later is worse than just preventing it from happening in in the first place so imagine you were just you",
    "start": "710480",
    "end": "718000"
  },
  {
    "text": "know doing a an app where you kind of ask the user for an index and then you're going to write the index out of",
    "start": "718000",
    "end": "723600"
  },
  {
    "text": "this you know write write the value from the list of the console and it's like Oh no I got an index out of range exception",
    "start": "723600",
    "end": "729600"
  },
  {
    "text": "well when you're first getting started you might think okay I'll just throw a catch block for index out of range exception and then I will console right",
    "start": "729600",
    "end": "736839"
  },
  {
    "text": "line hey that's too big right but what I'm suggesting is that instead that bug of being out of RA out of range is",
    "start": "736839",
    "end": "742959"
  },
  {
    "text": "something that you had everything in your hand to know that that was going to happen so there's no reason to wait for",
    "start": "742959",
    "end": "748560"
  },
  {
    "text": "the exception to occur instead let's prevent it from happening in the first place so you would ask the user for the",
    "start": "748560",
    "end": "755240"
  },
  {
    "text": "index go ahead and check that the value is within range and do your kind of",
    "start": "755240",
    "end": "760760"
  },
  {
    "text": "messaging that way right this is very straightforward it's easy to read you don't have the indirection of code",
    "start": "760760",
    "end": "766320"
  },
  {
    "text": "jumping to different places because of an exception getting thrown so production code should not",
    "start": "766320",
    "end": "773160"
  },
  {
    "text": "raise boneheaded exceptions you should have found and and removed all of these before the code made it all the way to",
    "start": "773160",
    "end": "779399"
  },
  {
    "text": "production and so the key idea is that we're going to use these exceptions to know that we have an issue and we're",
    "start": "779399",
    "end": "784519"
  },
  {
    "text": "going to fix that bug at the source rather than react being reactive to it and so when I started thinking about",
    "start": "784519",
    "end": "791880"
  },
  {
    "text": "that from from Eric's article I started wondering about these exceptions and realizing that the boneheaded exception",
    "start": "791880",
    "end": "798800"
  },
  {
    "text": "like I said is not a symptom of is is a symptom of the bug and not a bug itself and I started to realize that these",
    "start": "798800",
    "end": "804880"
  },
  {
    "text": "exceptions are actually a gift and then we should kind of take that perspective a lot of when we're getting started we",
    "start": "804880",
    "end": "810560"
  },
  {
    "text": "we get exceptions and they frustrate us and they they we think they're you know they're insulting us but instead we",
    "start": "810560",
    "end": "815720"
  },
  {
    "text": "should think about them as another programmer has noticed that I made a mistake and has told me about my mistake",
    "start": "815720",
    "end": "821480"
  },
  {
    "text": "so that I can repair it before it gets worse um you know I once worked a long time",
    "start": "821480",
    "end": "828800"
  },
  {
    "text": "ago in in PHP and PHP had this philosophy contrary to CP that when an",
    "start": "828800",
    "end": "834079"
  },
  {
    "text": "error occurs it should write an error message into a log file somewhere and then just keep trying trying trying to",
    "start": "834079",
    "end": "839399"
  },
  {
    "text": "go through so you would wind up with log files that were full of basically syntax errors or any other problem but the the",
    "start": "839399",
    "end": "845360"
  },
  {
    "text": "app would try to keep going right and I sort of adopted this philosophy for a long time like well at least the app",
    "start": "845360",
    "end": "850800"
  },
  {
    "text": "finished the page loaded something happened that seems like a win but I was start to get burned by this repeatedly",
    "start": "850800",
    "end": "857079"
  },
  {
    "text": "right had a null and some data and I tried to interact with the null PHP",
    "start": "857079",
    "end": "862720"
  },
  {
    "text": "wrote a log file but then kept going and then that null wound up in the database and then like showed up on a report or",
    "start": "862720",
    "end": "869199"
  },
  {
    "text": "broke some Metric or some graph like three days later and how much harder is that to",
    "start": "869199",
    "end": "874320"
  },
  {
    "text": "debug rather than just getting a nice error message that says hey this was null and you tried to do something with it app crash go fix your fix your bug",
    "start": "874320",
    "end": "881920"
  },
  {
    "text": "right it is so much worse to troubleshoot when the result of our",
    "start": "881920",
    "end": "887000"
  },
  {
    "text": "mistakes propagate through the system and get persisted and cause problems later down the road so I thought that by",
    "start": "887000",
    "end": "893880"
  },
  {
    "text": "writing TR catches when I came back to C I thought that by writing a tri catch and ignoring the err I was making the",
    "start": "893880",
    "end": "899120"
  },
  {
    "text": "app more stable but in reality I was just letting the problems that were already there propagate deeper and the",
    "start": "899120",
    "end": "904240"
  },
  {
    "text": "bug burrowed further into the woodwork and caused more problems later so I learned to kind of try to be grateful",
    "start": "904240",
    "end": "910160"
  },
  {
    "text": "about these kinds of exceptions you've been given the marvelous opportunity to fix your terrible code so go back and do",
    "start": "910160",
    "end": "915839"
  },
  {
    "text": "that rather than um just kind of papering over it and likewise if someone",
    "start": "915839",
    "end": "922360"
  },
  {
    "text": "else has given you the gift of telling you when you've made a mistake maybe you should reciprocate and turn around and",
    "start": "922360",
    "end": "927399"
  },
  {
    "text": "tell them when they've made mistakes so do make sure that you throw boneheaded exceptions yourself when you",
    "start": "927399",
    "end": "933399"
  },
  {
    "text": "detected that somebody else has messed up interacting with your code and that person may be you yourself in the future",
    "start": "933399",
    "end": "939440"
  },
  {
    "text": "right the users of your software are not just the end users who access the website or install it on their computer",
    "start": "939440",
    "end": "945040"
  },
  {
    "text": "but the you build a shared module that's going to be interacted with by the other programmers on your team and if you can",
    "start": "945040",
    "end": "950959"
  },
  {
    "text": "predict that hey some of them might make the mistake they might pass a null here they might pass an empty list when we actually need a value right you're",
    "start": "950959",
    "end": "958440"
  },
  {
    "text": "writing code that's going to be used by them and if you have predictable problems that they might uh run into it",
    "start": "958440",
    "end": "964240"
  },
  {
    "text": "might be better to just warn them about it by throwing an exception rather than you know trying to stumble through this",
    "start": "964240",
    "end": "969920"
  },
  {
    "text": "isn't just for like writing libraries or open source software it's especially important there but you know when you",
    "start": "969920",
    "end": "975000"
  },
  {
    "text": "wrote code to be reused by other members of your team part of this process of making that code work well for them is",
    "start": "975000",
    "end": "981720"
  },
  {
    "text": "telling them when they've made the obvious mistakes that they might make so we hit this once where a team",
    "start": "981720",
    "end": "988000"
  },
  {
    "text": "member was writing a a method to like apply some permissions to a user some admin screen we're going to update their",
    "start": "988000",
    "end": "993639"
  },
  {
    "text": "permissions or whatever um so down in the service layer he had a class that you know took a user and a list of",
    "start": "993639",
    "end": "998839"
  },
  {
    "text": "permissions and we're just going to figure out what all permissions the user already had which ones they needed to",
    "start": "998839",
    "end": "1004240"
  },
  {
    "text": "add we were going to go do that and then either like the IDE warned him or he thought to himself hey there's uh this",
    "start": "1004240",
    "end": "1010000"
  },
  {
    "text": "permissions list might be null what should I do if it's a null well I think I'll just convert that null to an empty",
    "start": "1010000",
    "end": "1015440"
  },
  {
    "text": "list and then the rest of my algorithm works just fine but this this had this exposed a real problem you know we had a",
    "start": "1015440",
    "end": "1022279"
  },
  {
    "text": "bug in the data binding layer so that instead of getting the listed permissions posted all the way back to",
    "start": "1022279",
    "end": "1028160"
  },
  {
    "text": "the service we got a null and that null then got converted to an empty list and then basically all the permissions got",
    "start": "1028160",
    "end": "1033760"
  },
  {
    "text": "removed from the user right it's it's like what when",
    "start": "1033760",
    "end": "1038839"
  },
  {
    "text": "you're working on a method you got to think about what the intent of the caller is and so when we were when he was working on this method asking he",
    "start": "1038839",
    "end": "1046120"
  },
  {
    "text": "asked for a list of permissions but he got a null and so what was the intent if somebody passed the nullin did they mean",
    "start": "1046120",
    "end": "1052160"
  },
  {
    "text": "to pass a null in or was that a mistake it's like if you ask your friend for a glass of water and they don't bring you",
    "start": "1052160",
    "end": "1057799"
  },
  {
    "text": "a glass of water they don't even bring you an empty glass they come over and they hand you nothing at all you're going to be like what are you doing you're not going to be like oh thanks um",
    "start": "1057799",
    "end": "1065160"
  },
  {
    "text": "and so like we we should also in this case be like hey what are you doing by throwing an exception we need to",
    "start": "1065160",
    "end": "1071760"
  },
  {
    "text": "understand the responsibility of our code working in this layer it's not your responsibility to know what to do with a null what did they intend when they",
    "start": "1071760",
    "end": "1078039"
  },
  {
    "text": "passed a null it may have been an error it may even meant to pass a null which case you've decided as a team that we're",
    "start": "1078039",
    "end": "1084039"
  },
  {
    "text": "going to treat null as empty list and then fine document that and explain it to everybody but you can't just guess at",
    "start": "1084039",
    "end": "1089960"
  },
  {
    "text": "what people's intent was right so we did find this in QA obviously but this was quite difficult to debug because as soon",
    "start": "1089960",
    "end": "1096440"
  },
  {
    "text": "as you clicked save you got booted out of the application because your permissions got deleted and then you couldn't log back in and the only way to",
    "start": "1096440",
    "end": "1102559"
  },
  {
    "text": "fix this is to go into the database and monkey around with things um so if whole",
    "start": "1102559",
    "end": "1109039"
  },
  {
    "text": "thing could have been prevented if we got that giant Yellow screen of death where some error message that said hey something went wrong you were supposed",
    "start": "1109039",
    "end": "1114880"
  },
  {
    "text": "to pass the list of permissions but you didn't pass anything at all so rather than do damage to the system we've",
    "start": "1114880",
    "end": "1120440"
  },
  {
    "text": "aborted the whole operation and you can fix it and try again so use these exceptions to sort of help your",
    "start": "1120440",
    "end": "1126280"
  },
  {
    "text": "teammates use your apis correctly make sure that you give them the gift of explaining when they've messed up so",
    "start": "1126280",
    "end": "1132559"
  },
  {
    "text": "that they can fix the problems in their code but how do we do that well right obviously we're going to want to throw",
    "start": "1132559",
    "end": "1138360"
  },
  {
    "text": "exception that have good error messages one of the great things about exceptions instead of like return codes or some of",
    "start": "1138360",
    "end": "1145120"
  },
  {
    "text": "those result based patterns is how great context you can give every exception has a nice string message where you can put",
    "start": "1145120",
    "end": "1151760"
  },
  {
    "text": "all kinds of useful information in there and you can also write your own exceptions with extra strongly typed",
    "start": "1151760",
    "end": "1156919"
  },
  {
    "text": "properties if you want but exceptions are really great at giving context right so you can really help explain what went",
    "start": "1156919",
    "end": "1162400"
  },
  {
    "text": "wrong and nudge users into doing the right thing so imagine that you're working on",
    "start": "1162400",
    "end": "1167480"
  },
  {
    "text": "this cool new team right you just joined this company and it's basically the greatest idea ever it's Uber for babysitters you got this mobile app",
    "start": "1167480",
    "end": "1174200"
  },
  {
    "text": "you're going to summon strangers from the internet to come over and superise your children while you go down and hit the pub or the grocery store um and you",
    "start": "1174200",
    "end": "1181960"
  },
  {
    "text": "you you start there and you download the code and you boot up the app and you immediately are presented with this error right now how how useful is that",
    "start": "1181960",
    "end": "1189559"
  },
  {
    "text": "okay I know there's something wrong with the configuration but I have no idea what it was looking for or where it was looking or any of that stuff but if",
    "start": "1189559",
    "end": "1196360"
  },
  {
    "text": "instead somebody had taken the time to write an error message like this now your wheels are turning all right I need",
    "start": "1196360",
    "end": "1202520"
  },
  {
    "text": "a database connection I know where those are normally stored I can ask a team I can sort of figure this out and it's not",
    "start": "1202520",
    "end": "1208000"
  },
  {
    "text": "just going to be your own team like when I was working on setting up some microservices you know we were we were",
    "start": "1208000",
    "end": "1214240"
  },
  {
    "text": "doing devops right but that still meant we had a devops guy who did the devops stuff um and I would give him the code",
    "start": "1214240",
    "end": "1220400"
  },
  {
    "text": "and say these are the app settings that we need you to set up in keyal or app services or whatever um and I took the",
    "start": "1220400",
    "end": "1226760"
  },
  {
    "text": "extra time to write these kinds of messages is when the the required settings were missing so that when he",
    "start": "1226760",
    "end": "1232280"
  },
  {
    "text": "installed the app and it booted up and it crashed it would immediately tell him what went wrong right okay I typoed the",
    "start": "1232280",
    "end": "1238200"
  },
  {
    "text": "name of that uh setting key or Matt never told me about this one to begin with um but at least that turned like a",
    "start": "1238200",
    "end": "1244080"
  },
  {
    "text": "multiple hour like debugging session into something very fast if all he got was invalid config then he's going to",
    "start": "1244080",
    "end": "1250799"
  },
  {
    "text": "spend hours like going through my list and his check trying to make sure everything's right but if he told him right off the bat hey I didn't find the",
    "start": "1250799",
    "end": "1256919"
  },
  {
    "text": "database connection then he can fix it right away or at least come back to me and say hey your app requires this value",
    "start": "1256919",
    "end": "1263080"
  },
  {
    "text": "but you never told me what it was going to be so another I really also like this kind of message like another one that",
    "start": "1263080",
    "end": "1269320"
  },
  {
    "text": "I've done is like you know couldn't find a service to handle the customer created event did you forget to register it in",
    "start": "1269320",
    "end": "1274480"
  },
  {
    "text": "the dependency injection container how many of us have gotten errors in net because we never registered a class in",
    "start": "1274480",
    "end": "1280400"
  },
  {
    "text": "our di container and instead we just get this very cryptic confusing null or something and you don't really know what",
    "start": "1280400",
    "end": "1286840"
  },
  {
    "text": "went wrong how much better would it be get those error messages like hey couldn't find this class this is the",
    "start": "1286840",
    "end": "1291880"
  },
  {
    "text": "class I was looking for did you forget to register it yeah that's the very obvious mistake that somebody's going to make and if you can know ahead of time",
    "start": "1291880",
    "end": "1298799"
  },
  {
    "text": "that someone's going to make an obvious mistake a really good error message that nudges them in the right direction uh",
    "start": "1298799",
    "end": "1304360"
  },
  {
    "text": "will save them an awful lot of time so I really like that did you forget kind of language if you know you detected an",
    "start": "1304360",
    "end": "1310600"
  },
  {
    "text": "issue that has an obvious fix well tell them what the obvious fix is so they can get on with their",
    "start": "1310600",
    "end": "1316120"
  },
  {
    "text": "day another one that you will see a lot is like unexpected case whatever inside of a",
    "start": "1316120",
    "end": "1321320"
  },
  {
    "text": "switch statement you know C doesn't really have exhaustive switch statement checks so if you have some enum and",
    "start": "1321320",
    "end": "1326440"
  },
  {
    "text": "you're doing something with all the different values of the enum and somebody adds a new one well if you have",
    "start": "1326440",
    "end": "1331559"
  },
  {
    "text": "a default case then that's going to get caught there right it can be really good to go ahead and throw an exception in",
    "start": "1331559",
    "end": "1337760"
  },
  {
    "text": "that case to say hey we wrote handling for case a b and c but somebody added d",
    "start": "1337760",
    "end": "1343080"
  },
  {
    "text": "right I don't know what to do with d so I'm going to throw an exception and I'm going to tell you not just unexpected switch case I'm going to tell you value",
    "start": "1343080",
    "end": "1349360"
  },
  {
    "text": "D was not handled and that gives everybody who encounters that error a little bit of time and and ease of",
    "start": "1349360",
    "end": "1356320"
  },
  {
    "text": "fixing it right other languages this would be a compiler error C can't do that so we turn it into a runtime error",
    "start": "1356320",
    "end": "1361799"
  },
  {
    "text": "which is the next best thing and I would say there is such a thing as too much",
    "start": "1361799",
    "end": "1367720"
  },
  {
    "text": "context obviously you don't want to leak any secrets in your exception messages so you know like don't be writing a",
    "start": "1367720",
    "end": "1374039"
  },
  {
    "text": "login function where you check the credentials and throw an exception but",
    "start": "1374039",
    "end": "1379120"
  },
  {
    "text": "you know stick the username and password in that exception that seems really helpful right um but this isn't just bad",
    "start": "1379120",
    "end": "1385559"
  },
  {
    "text": "that's screaming bad uh you know never write anything in a exception message",
    "start": "1385559",
    "end": "1390679"
  },
  {
    "text": "that you don't want to show up in a log file one day because I guarantee you it's going to show up in a log file one day and now you have a reportable breach",
    "start": "1390679",
    "end": "1398080"
  },
  {
    "text": "uh and imagine the fun you're going to have talking to your you know your Chief legal officer and your marketing officer",
    "start": "1398080",
    "end": "1403600"
  },
  {
    "text": "about how you have to do notifications to your users and do password resets because you shi the user credential to",
    "start": "1403600",
    "end": "1408880"
  },
  {
    "text": "an unsecured third part log aggregating service um so just kind of think about what you're doing and don't go overboard",
    "start": "1408880",
    "end": "1415200"
  },
  {
    "text": "and giving too much context um if you work in healthcare like Phi can be",
    "start": "1415200",
    "end": "1420760"
  },
  {
    "text": "protected health information that's probably an American term but um that kind of data should also not be in there",
    "start": "1420760",
    "end": "1426679"
  },
  {
    "text": "you don't want to say you know user ID whatever you know failed because they had this condition now you've logged",
    "start": "1426679",
    "end": "1432000"
  },
  {
    "text": "something else that you're not supposed to log um and so also like be careful of the jargon like you know as programmers",
    "start": "1432000",
    "end": "1438480"
  },
  {
    "text": "we kind of know the internal code names and and metaphors that we use in inside of our own classes we don't want to",
    "start": "1438480",
    "end": "1444000"
  },
  {
    "text": "write error messages that cause the other programmers to go to stack Overflow to figure out what's going on",
    "start": "1444000",
    "end": "1449559"
  },
  {
    "text": "now git is famous for very poor error messages if I got this error message about a branch yet to be born I have no",
    "start": "1449559",
    "end": "1456360"
  },
  {
    "text": "idea what that means right and even reading this stack Overflow from 12 Years Ago by the way I still don't know",
    "start": "1456360",
    "end": "1462159"
  },
  {
    "text": "what it means right uh so whoever wrote that error message they could probably could have phrased that in a way that",
    "start": "1462159",
    "end": "1468000"
  },
  {
    "text": "would be oh okay now I know what weird situation I've gotten myself into but nowhere else in git have I ever talked",
    "start": "1468000",
    "end": "1474080"
  },
  {
    "text": "about branches being birthed so I I would never have any idea what this meant the other thing to to keep in mind",
    "start": "1474080",
    "end": "1480600"
  },
  {
    "text": "is that end users might eventually see it we think it's pretty bad practice to just Bubble Up exceptions and just like",
    "start": "1480600",
    "end": "1486240"
  },
  {
    "text": "present the error message right to the user but let let's he who's never sinned here throw the first stone and I think",
    "start": "1486240",
    "end": "1492840"
  },
  {
    "text": "that like Insider baseball is programmer Insider baseball is not especially friendly things that are clear to us as",
    "start": "1492840",
    "end": "1500440"
  },
  {
    "text": "programmers can be pretty scary to our non-technical users if they see this especially with all this AI talk about",
    "start": "1500440",
    "end": "1507080"
  },
  {
    "text": "the computers becoming self- alive and and taking over and you know we want to get rid of this before someone takes",
    "start": "1507080",
    "end": "1513000"
  },
  {
    "text": "their Hammer to their computer about uh preventing the machine from rising up and slaughtering their children um you",
    "start": "1513000",
    "end": "1519919"
  },
  {
    "text": "know that's all fun games but this did actually come up I mean one time I was working at a doing some stuff with a",
    "start": "1519919",
    "end": "1525679"
  },
  {
    "text": "bank and you know banks are famous famously amazing architecture there was this fantastic cobal layer down at the",
    "start": "1525679",
    "end": "1532120"
  },
  {
    "text": "beginning at the bottom but nobody wanted to write cobal so they slapped a Java layer on top and then we were",
    "start": "1532120",
    "end": "1537880"
  },
  {
    "text": "coming in to kind of help work on this VB6 app but we didn't want to work on VB6 and in fact like nobody could",
    "start": "1537880",
    "end": "1543679"
  },
  {
    "text": "compile the VB6 except for one machine that was kept air gapped in the it closet so that it never got any updates",
    "start": "1543679",
    "end": "1549240"
  },
  {
    "text": "and and stopped being able to compile the code and so we were going to work in net 2.0 we're going to do some Comm interop between these two things right",
    "start": "1549240",
    "end": "1556399"
  },
  {
    "text": "and then we're going to do soap let's throw soap in there for the for the heck of it like this is the most enterpris stack you you've probably ever seen in",
    "start": "1556399",
    "end": "1562679"
  },
  {
    "text": "your life but even Enterprise Java developers wanted to have a little bit of fun as we learned when we started",
    "start": "1562679",
    "end": "1568600"
  },
  {
    "text": "getting this error message back while we were doing some validations and I don't know if you can see it have you ever",
    "start": "1568600",
    "end": "1573799"
  },
  {
    "text": "heard of an id10t error uh it looks like idiot which is not a very nice word to",
    "start": "1573799",
    "end": "1578880"
  },
  {
    "text": "to call users this programmer clearly thought he was being kind of funny this is like the worst programmer joke of all",
    "start": "1578880",
    "end": "1586159"
  },
  {
    "text": "time this was at a bank by the way I had to wear a tie you know like this shouldn't be",
    "start": "1586159",
    "end": "1591960"
  },
  {
    "text": "happening and that's all fun and games until we bubbled that up and put it in the screen and called some senior vice",
    "start": "1591960",
    "end": "1598279"
  },
  {
    "text": "president an idiot because he forgot to put the city name in the form right so",
    "start": "1598279",
    "end": "1603600"
  },
  {
    "text": "you know hopefully we caught this stuff but it just goes to show what can happen",
    "start": "1603600",
    "end": "1609000"
  },
  {
    "text": "and while we're on the topic of of not being confusing with our error messages I I think another thing I've seen is",
    "start": "1609000",
    "end": "1614520"
  },
  {
    "text": "like make sure you don't reuse the built-in exception types for purposes is other than what they were intended for",
    "start": "1614520",
    "end": "1619919"
  },
  {
    "text": "like everybody knows what null reference exception means we know what argument exception means like if you I don't know",
    "start": "1619919",
    "end": "1626720"
  },
  {
    "text": "if you were building an app about like debate like why would you throw an argument exception because of a oh that's a dumb example um so you know",
    "start": "1626720",
    "end": "1633440"
  },
  {
    "text": "what I mean like they have good meetings and and people know what they are and so we shouldn't try to change them this",
    "start": "1633440",
    "end": "1639679"
  },
  {
    "text": "burned me pretty bad once where we were working on some you know some Enterprise factory factory class that had a method",
    "start": "1639679",
    "end": "1646279"
  },
  {
    "text": "that took a parameter and somebody was like well better check the parameter for null and which is great but then they threw a null reference exception right",
    "start": "1646279",
    "end": "1653320"
  },
  {
    "text": "and maybe you can see where this is going when you're dealing with the compiled code in production you don't get line numbers anymore all I know is",
    "start": "1653320",
    "end": "1659720"
  },
  {
    "text": "that null reference happens somewhere in this method imagine if this method were another couple hundred lines now I'm",
    "start": "1659720",
    "end": "1665200"
  },
  {
    "text": "trying to figure out how this null got in here and where it got uh used in fact I see the if check if I'm not very",
    "start": "1665200",
    "end": "1671640"
  },
  {
    "text": "careful I see that if the null check the beginning and then I think okay from here on out uh factory factory is safe",
    "start": "1671640",
    "end": "1677200"
  },
  {
    "text": "to use right cuz I'm not expecting that that's going to throw a null reference exception so this was very confusing",
    "start": "1677200",
    "end": "1683159"
  },
  {
    "text": "spent a lot of time looking at the wrong thing chasing red herrings and wasting time whereas if we had used the uh",
    "start": "1683159",
    "end": "1689279"
  },
  {
    "text": "correct exception we would know immediately what the problem was and in fact you can go one further and pass the",
    "start": "1689279",
    "end": "1695640"
  },
  {
    "text": "name of the the parameter straight on",
    "start": "1695640",
    "end": "1699960"
  },
  {
    "text": "through and so you might be asking yourself like okay well should I ever create like the built-in ones are great",
    "start": "1703919",
    "end": "1709919"
  },
  {
    "text": "uh but should I ever create a custom boneheaded exception for my boneheaded users I'm going to say no don't create",
    "start": "1709919",
    "end": "1717960"
  },
  {
    "text": "custom boneheaded exceptions there's there's two reasons why you might want to create an exception and neither one",
    "start": "1717960",
    "end": "1723039"
  },
  {
    "text": "of them apply to this style right one you might want to add some contextual properties you want to add an extra",
    "start": "1723039",
    "end": "1729039"
  },
  {
    "text": "custom property on the exception that has some extra data or you might want to add be enabling specific cat blocks",
    "start": "1729039",
    "end": "1735799"
  },
  {
    "text": "right you want you're you're writing a custom so that somebody can write try this catch my new custom exception but",
    "start": "1735799",
    "end": "1742480"
  },
  {
    "text": "remember neither of these really apply to the boneheaded exceptions we don't want people to catch boneheaded",
    "start": "1742480",
    "end": "1748159"
  },
  {
    "text": "exceptions they are bugs in their code that they should fix if they're really going to do it force them to do string",
    "start": "1748159",
    "end": "1754240"
  },
  {
    "text": "comparisons on the message that'll get caught in code review unless you've outsourced that to AI which where anything",
    "start": "1754240",
    "end": "1760159"
  },
  {
    "text": "goes um so yeah again we don't want them to catch those so all of this looks a",
    "start": "1760159",
    "end": "1766440"
  },
  {
    "text": "little bit similar and I want to take a brief aggression about uh debug. assert if you're familiar with that if you",
    "start": "1766440",
    "end": "1772679"
  },
  {
    "text": "haven't seen it before it looks like this uh you can you can write this in your code you do debug. assert condition",
    "start": "1772679",
    "end": "1778880"
  },
  {
    "text": "U so for example you could assert that some variable is not null the end effect is that an error is raised automatically",
    "start": "1778880",
    "end": "1785159"
  },
  {
    "text": "if the condition is not met and these are so useful that like other languages have like built-in support at the syntax",
    "start": "1785159",
    "end": "1791760"
  },
  {
    "text": "layer for them like Java you can just assert condition or assert food doesn't equal null or whatever they they have",
    "start": "1791760",
    "end": "1797080"
  },
  {
    "text": "the the same end result result and so when you look at that you think this looks an awful lot like a convenient way of doing if whatever throw exception if",
    "start": "1797080",
    "end": "1803840"
  },
  {
    "text": "whatever throw exception I could just do debug. assert but I want to point out that they differ in some very important",
    "start": "1803840",
    "end": "1809840"
  },
  {
    "text": "ways and primarily I think they have very different purposes different audiences those boneheaded exceptions",
    "start": "1809840",
    "end": "1816559"
  },
  {
    "text": "you are raising because you think somebody else made a mistake interacting with your code whereas with the",
    "start": "1816559",
    "end": "1822360"
  },
  {
    "text": "assertion it's sort of you yourself are the intended audience of this code of these assertions putting them in to kind",
    "start": "1822360",
    "end": "1828760"
  },
  {
    "text": "of document what you think should be true about the program at this point in time so they're sort of meant for you",
    "start": "1828760",
    "end": "1834919"
  },
  {
    "text": "and yourself the really classic example that that I think of is whenever I find",
    "start": "1834919",
    "end": "1840080"
  },
  {
    "text": "myself writing a comment that says this should never happen or I should never get here or this value should never be",
    "start": "1840080",
    "end": "1845480"
  },
  {
    "text": "empty this list should never be empty right those are great opportunities to use an assertion because not only does",
    "start": "1845480",
    "end": "1851720"
  },
  {
    "text": "it document what you're thinking this shouldn't be null this shouldn't be empty but it is also like executable",
    "start": "1851720",
    "end": "1857159"
  },
  {
    "text": "documentation that actually checks what you're saying is true is actually true so these are very great for",
    "start": "1857159",
    "end": "1864279"
  },
  {
    "text": "documenting the invariance of the system if you're working on you know like you remember in maybe some of some of us",
    "start": "1864279",
    "end": "1869600"
  },
  {
    "text": "went to computer science uh classes I only had a few but like one of the most",
    "start": "1869600",
    "end": "1875440"
  },
  {
    "text": "boring SE sections was talking about preconditions and postconditions right when you enter the method this is what",
    "start": "1875440",
    "end": "1880639"
  },
  {
    "text": "we expected to be true when we leave the method this is what we expect to be true that can be a really great use case for",
    "start": "1880639",
    "end": "1886960"
  },
  {
    "text": "for debug. assert you you just you're saying these facts about the world should be true and we can enforce",
    "start": "1886960",
    "end": "1893320"
  },
  {
    "text": "that the other thing you need to keep in mind is that debug. Asser and friends are usually compiled out in release mode",
    "start": "1893320",
    "end": "1899799"
  },
  {
    "text": "so when you do a release build none of those if checks run none of those assertions ever get raised so there they",
    "start": "1899799",
    "end": "1906880"
  },
  {
    "text": "not going to be a replacement for boneheaded exceptions especially if you're writing a shared library because the consumer of your shared Library may",
    "start": "1906880",
    "end": "1912919"
  },
  {
    "text": "be consuming your release build and if your release build just had a bunch of if you just Ed debu got a shirt",
    "start": "1912919",
    "end": "1918440"
  },
  {
    "text": "everywhere now none of that stuff actually runs in um in production codes",
    "start": "1918440",
    "end": "1924200"
  },
  {
    "text": "for them so they're not a recommendation I found them actually you know since a lot of us are C developers here really",
    "start": "1924200",
    "end": "1930399"
  },
  {
    "text": "useful if you're working with the you know that new um nullable reference types feature and the compiler is like",
    "start": "1930399",
    "end": "1936159"
  },
  {
    "text": "hey this could be null and you're like I know for a fact that it can't be null by the time we got here it can't be null wait that's the light bulb moment maybe",
    "start": "1936159",
    "end": "1942799"
  },
  {
    "text": "I should do a debug. assert there that does two things both writes down the fact that I documents the fact that I'm",
    "start": "1942799",
    "end": "1948679"
  },
  {
    "text": "pretty sure it can't be null here and it actually makes the compiler happy the compiler sees that and says oh okay I",
    "start": "1948679",
    "end": "1954799"
  },
  {
    "text": "trust you now from the rest of this method I'll let you get away with it and in debug builds if it turns out to not",
    "start": "1954799",
    "end": "1962120"
  },
  {
    "text": "be true it's going to throw a big assertion that says whatever wasn't null uh failed there so I really recommend",
    "start": "1962120",
    "end": "1967600"
  },
  {
    "text": "debug. shirt just kind of know what its purpose is it's p it's more like a private implementation detail rather",
    "start": "1967600",
    "end": "1973480"
  },
  {
    "text": "than publicly telling a caller that they messed up so these are the what we talked about",
    "start": "1973480",
    "end": "1979679"
  },
  {
    "text": "the boneheaded exceptions right if we if we learn to think of these as a gift um",
    "start": "1979679",
    "end": "1984760"
  },
  {
    "text": "we'll have a much better time we we both not worry about them uh catching them and we're going to be more generous",
    "start": "1984760",
    "end": "1991240"
  },
  {
    "text": "about how we throw them and give them to our",
    "start": "1991240",
    "end": "1995320"
  },
  {
    "text": "users the third category that Eric talked about in the article is what he called the vexing exception",
    "start": "2001760",
    "end": "2008600"
  },
  {
    "text": "these are the exceptions that aren't really exceptional um but you're kind of forced to deal with them right and these",
    "start": "2008600",
    "end": "2014720"
  },
  {
    "text": "are kind of examples of bad API design the classic example is the format",
    "start": "2014720",
    "end": "2020360"
  },
  {
    "text": "exception I know we've all gotten those um and the trouble is you can't really even guard ahead guard against it ahead",
    "start": "2020360",
    "end": "2026519"
  },
  {
    "text": "of time right so if you're writing some method that tries to parse some user",
    "start": "2026519",
    "end": "2031559"
  },
  {
    "text": "inputed text into a number right the problem is that int. pars is going to throw that format exception if the text",
    "start": "2031559",
    "end": "2038399"
  },
  {
    "text": "in the text box isn't very numisheet",
    "start": "2038399",
    "end": "2045679"
  },
  {
    "text": "parse for myself right so this is very vexing it's very annoying that the API",
    "start": "2045960",
    "end": "2052440"
  },
  {
    "text": "of in. parse works that way right it was so irritating that they in later",
    "start": "2052440",
    "end": "2057560"
  },
  {
    "text": "versions ofn net they kind of came around to this Tri parse pattern so you'll start to see this in a lot of a",
    "start": "2057560",
    "end": "2063079"
  },
  {
    "text": "lot of places for this exact purpose the only way for you to know that that text wasn't number is was basically to",
    "start": "2063079",
    "end": "2069000"
  },
  {
    "text": "implement a number parsing algorithm yourself and so they give they do this pattern as a way of returning two values",
    "start": "2069000",
    "end": "2077079"
  },
  {
    "text": "true or false on whether or not it was successfully parsed and then giving you the actual value um so that you can work",
    "start": "2077079",
    "end": "2083760"
  },
  {
    "text": "with it that way so if you're working and building an application and building an API don't design apis yourself that",
    "start": "2083760",
    "end": "2091878"
  },
  {
    "text": "throw vexing exceptions give your users an out give them away use the triar pattern or some other pattern where you",
    "start": "2091879",
    "end": "2098280"
  },
  {
    "text": "can help them out right so they don't have to wrap every call to your method with with a tri",
    "start": "2098280",
    "end": "2104079"
  },
  {
    "text": "catch when you do have to work with apis that have vexing exceptions I think the best thing to do is going to be to try",
    "start": "2104079",
    "end": "2110680"
  },
  {
    "text": "to try and catch that exception as close to the cause as possible remember these are like exceptions that are not",
    "start": "2110680",
    "end": "2116680"
  },
  {
    "text": "exceptional they're going to happen all the time and so we ought to design our code around that fact and not let that",
    "start": "2116680",
    "end": "2121800"
  },
  {
    "text": "exception bubble up all the way up the stack and and abort an operation we're kind of expecting this to happen and it",
    "start": "2121800",
    "end": "2127880"
  },
  {
    "text": "would be nice if we didn't have to use a tri catch to do it but sometimes that's what you have to do um I was working",
    "start": "2127880",
    "end": "2134680"
  },
  {
    "text": "with the cosmos DB once and we were trying to do this like archive thing so I wanted to like check if an an object",
    "start": "2134680",
    "end": "2141320"
  },
  {
    "text": "existed and um I expected read item async to give me a null if it didn't exist so if it existed I was going to",
    "start": "2141320",
    "end": "2147839"
  },
  {
    "text": "Archive it which involved just moving it to some other place or whatever and then I wanted to replace it with the new",
    "start": "2147839",
    "end": "2153960"
  },
  {
    "text": "value I expected read item async to return null if it didn't exist but what",
    "start": "2153960",
    "end": "2159119"
  },
  {
    "text": "in practice happened is it threw an exception that the document doesn't exist right this was very vexing I",
    "start": "2159119",
    "end": "2165280"
  },
  {
    "text": "didn't want to write try catch because they're a little harder to read I wanted to have this nice straightforward if",
    "start": "2165280",
    "end": "2170319"
  },
  {
    "text": "null if not null kind of bullan logic instead we had to replace it with a more",
    "start": "2170319",
    "end": "2176200"
  },
  {
    "text": "specific check and since this was very common I didn't want this Cosmos exception bubbling out I wanted to",
    "start": "2176200",
    "end": "2181280"
  },
  {
    "text": "handle it right here I intended that half the time the object wouldn't exist it was very expected that the object",
    "start": "2181280",
    "end": "2187119"
  },
  {
    "text": "wouldn't be there um but the key thing that I want to point out about this is that we're also like catching very",
    "start": "2187119",
    "end": "2193119"
  },
  {
    "text": "specific exceptions I'm expecting an object not to exist and when that object doesn't exist I know I'm going to get a",
    "start": "2193119",
    "end": "2198960"
  },
  {
    "text": "cosmos exception and furthermore I know I'm going to get a cosmos exception where the status code is 404 those are",
    "start": "2198960",
    "end": "2205079"
  },
  {
    "text": "the only scenarios in which I want to ignore the error right if I got an authorization exception I don't want to",
    "start": "2205079",
    "end": "2211760"
  },
  {
    "text": "ignore that that's a real problem right if I get some kind of socket timeout or some other kind of non-c Cosmos",
    "start": "2211760",
    "end": "2217200"
  },
  {
    "text": "exception I don't want to ignore that that's a real problem I don't have enough information to handle that kind of error here in this method I want to",
    "start": "2217200",
    "end": "2224319"
  },
  {
    "text": "let that Bubble Up So if you're working with those exceptions try to avoid um making it",
    "start": "2224319",
    "end": "2232440"
  },
  {
    "text": "possible um for them to even",
    "start": "2232440",
    "end": "2237160"
  },
  {
    "text": "happen Okay so vexing exceptions don't design apis that raise vexing exceptions",
    "start": "2240440",
    "end": "2246119"
  },
  {
    "text": "and if you have to deal with a vexing exception try to deal with it right at the cause and and get get over with it",
    "start": "2246119",
    "end": "2251800"
  },
  {
    "text": "get it over with the last category that the article talks about is what we call exogenous",
    "start": "2251800",
    "end": "2257560"
  },
  {
    "text": "exceptions and Eric has a very extensive vocabulary so I had to look that up but it means derived or originating",
    "start": "2257560",
    "end": "2263720"
  },
  {
    "text": "externally which is also sort of hard to hard to parse as well but the idea is that these happen when the cruel outside",
    "start": "2263720",
    "end": "2270760"
  },
  {
    "text": "world encroaches on your nice pure programming pure logic right they come from outside of the program they're not",
    "start": "2270760",
    "end": "2277680"
  },
  {
    "text": "necessarily your own bugs or faulty logic there's really nothing you could detect ahead of time that this is going",
    "start": "2277680",
    "end": "2282880"
  },
  {
    "text": "to happen these are going to be things like the disc ran out of space right uh a mouse chewed on the network cable",
    "start": "2282880",
    "end": "2289839"
  },
  {
    "text": "right all of azure's us east2 data center is on fire right there's no way for you to know that these are happening",
    "start": "2289839",
    "end": "2295319"
  },
  {
    "text": "ahead of time and so you kind of have to you're going to have to deal with them eventually and so one of the first",
    "start": "2295319",
    "end": "2302319"
  },
  {
    "text": "things is like you also just can't assume that you can if check your way around them right",
    "start": "2302319",
    "end": "2308560"
  },
  {
    "text": "so imagine if you're writing a method that you know a file may or may not exist and I want to get the contents of",
    "start": "2308560",
    "end": "2314440"
  },
  {
    "text": "that file or null the file doesn't exist so I write a method like this this works fine it seems right it works for you",
    "start": "2314440",
    "end": "2321200"
  },
  {
    "text": "know for some scripts and stuff but there's actually like a subtle bug here right um and if you're into like",
    "start": "2321200",
    "end": "2327440"
  },
  {
    "text": "classifying bugs one of the things you might put this under the category is the time of check is not time of use right",
    "start": "2327440",
    "end": "2334640"
  },
  {
    "text": "there is a possibility that the file would get deleted between the time that you checked it existed and the time that",
    "start": "2334640",
    "end": "2340359"
  },
  {
    "text": "you tried to read it it could get deleted someone could change the permissions the network drive could get unplugged if it was a USB or whatever",
    "start": "2340359",
    "end": "2347400"
  },
  {
    "text": "right so there is that possibility so if you really want to be as most safe then",
    "start": "2347400",
    "end": "2352760"
  },
  {
    "text": "you're going to have to just catch the exception anyway remember this method already expects the file not to exist",
    "start": "2352760",
    "end": "2358160"
  },
  {
    "text": "that that's a normal scenario for this for this context so the best thing to do is try to just catch that file not found",
    "start": "2358160",
    "end": "2364119"
  },
  {
    "text": "exception and treat that as the mill so rather than doing a file EX which we can't trust 100% of the time we'll just",
    "start": "2364119",
    "end": "2370160"
  },
  {
    "text": "go ahead and try the operation and deal with the exception the next big thing and and",
    "start": "2370160",
    "end": "2376680"
  },
  {
    "text": "this honestly like if we if we remember one thing from this whole talk is like this one this is my biggest pet peeve when working on large Enterprise",
    "start": "2376680",
    "end": "2383440"
  },
  {
    "text": "applications do not swallow or hide the fact that the exception occurred right",
    "start": "2383440",
    "end": "2389640"
  },
  {
    "text": "this makes things so much harder to work with we are not making our programs safer when we ignore the error sometimes",
    "start": "2389640",
    "end": "2397119"
  },
  {
    "text": "we feel like that well at least it didn't crash at least it didn't spew some error message to the user at least we didn't see that yellow screen of",
    "start": "2397119",
    "end": "2404640"
  },
  {
    "text": "death but did is the app actually safe there was already a problem we just ignored it we're not making it more",
    "start": "2404640",
    "end": "2411400"
  },
  {
    "text": "correct by papering over errors and pretending they didn't happen plus they're absolutely infuriating to",
    "start": "2411400",
    "end": "2419319"
  },
  {
    "text": "debug so this is this is like a text I got from a from a coworker after spending hours rolling through uh an",
    "start": "2419319",
    "end": "2425800"
  },
  {
    "text": "application where there was a podcast feed and the podcast feed was empty right the problem turned out to be a",
    "start": "2425800",
    "end": "2431640"
  },
  {
    "text": "certificate error with the network and that happens all the time there was no way that we because we didn't like",
    "start": "2431640",
    "end": "2437000"
  },
  {
    "text": "present the error to the user we just said oh there was an error here's an empty list right now we're trying to figure out what went wrong with the",
    "start": "2437000",
    "end": "2442240"
  },
  {
    "text": "little database that's inside the app and why the list is empty did the user delete all the things like trying to",
    "start": "2442240",
    "end": "2447440"
  },
  {
    "text": "troubleshoot this without good logging without good metrics is so much harder than it need to be how much easier would",
    "start": "2447440",
    "end": "2453319"
  },
  {
    "text": "this been to troubleshoot If instead of just showing an empty list we didn't pretend that the error didn't happen and",
    "start": "2453319",
    "end": "2459040"
  },
  {
    "text": "we just said hey there was a network problem downloading the podcast feed right so much easier to figure out what the problem is rather than uh digging",
    "start": "2459040",
    "end": "2466880"
  },
  {
    "text": "through all that stuff manually so look at so imagine you're writing um a method where you're trying",
    "start": "2466880",
    "end": "2472960"
  },
  {
    "text": "to find the balance of a customer's account right you're just going to query up the user from the database if the",
    "start": "2472960",
    "end": "2478839"
  },
  {
    "text": "user isn't found you're going to return a zero that's not great but it's not really what I'm talking about here we",
    "start": "2478839",
    "end": "2484240"
  },
  {
    "text": "have to return something because the signature of the method is return you know return a decimal um so if the",
    "start": "2484240",
    "end": "2489319"
  },
  {
    "text": "customer's not found or return zero that's not great but we're working on this uh if the customer is found we're",
    "start": "2489319",
    "end": "2495280"
  },
  {
    "text": "going to return the balance right this seems good but you know we're writing it and we're like you know we got an exception once I don't really want that",
    "start": "2495280",
    "end": "2501800"
  },
  {
    "text": "I want to pretend that it didn't happen I'll just wrap this in a TR catch and return zero in that scenario too right",
    "start": "2501800",
    "end": "2508079"
  },
  {
    "text": "we've met the signature of the method we return some kind of decimal no matter what um and we when we're new we kind of",
    "start": "2508079",
    "end": "2514440"
  },
  {
    "text": "think okay we made our software more stable right it's no longer throwing exceptions but we've made this method",
    "start": "2514440",
    "end": "2519839"
  },
  {
    "text": "very confused right if I call this method and I get a zero it means one of",
    "start": "2519839",
    "end": "2525960"
  },
  {
    "text": "three different things uh it's possible that the customer didn't exist it's also",
    "start": "2525960",
    "end": "2531800"
  },
  {
    "text": "possible the customer did exist but had a zero balance or it's possible that some random Network blip happened and as",
    "start": "2531800",
    "end": "2539000"
  },
  {
    "text": "a result we turned zero and what happens if I trusted this zero what if I was doing something to like close accounts",
    "start": "2539000",
    "end": "2544880"
  },
  {
    "text": "on customers with zero balances right now accidentally closed some customers account just because there was a little",
    "start": "2544880",
    "end": "2551040"
  },
  {
    "text": "momentary Network drip right and this isn't the only place that this kind of thing shows up sometimes you might see",
    "start": "2551040",
    "end": "2557440"
  },
  {
    "text": "Catch exception and return an empty list or catch it and return null or catch it and just ignore it",
    "start": "2557440",
    "end": "2563599"
  },
  {
    "text": "outright these all have the same effect even in like your Void methods if you ignore an error and I call this save",
    "start": "2563599",
    "end": "2570760"
  },
  {
    "text": "method intending to save some widget and I didn't get an exception do I know for a fact that that widget actually got",
    "start": "2570760",
    "end": "2576920"
  },
  {
    "text": "save saved I have no way of knowing right I might do other things based on the assumption that it succeeded I I",
    "start": "2576920",
    "end": "2582800"
  },
  {
    "text": "thought I saved the widget so now I assigned a you know a user account to work on the widget and now some",
    "start": "2582800",
    "end": "2587880"
  },
  {
    "text": "dashboard somewhere else is broken because the foreign key constraints are violated or whatever right so the error",
    "start": "2587880",
    "end": "2594440"
  },
  {
    "text": "that originally happened some Network blip has now caused bad data to be stored in our database which is causing other things to break further down the",
    "start": "2594440",
    "end": "2600480"
  },
  {
    "text": "app and that is so much harder to troubleshoot than just dealing with the fact that this error occurred in the first",
    "start": "2600480",
    "end": "2605680"
  },
  {
    "text": "place so you know I do think we we have to process errors at some point like you're",
    "start": "2605680",
    "end": "2610920"
  },
  {
    "text": "going to have to show a message to the user you're going to have to do something like that um but I think we have to make sure that we catch these",
    "start": "2610920",
    "end": "2616800"
  },
  {
    "text": "errors at the right level right so imagine this is your you know this is your software stack right it's it's kind",
    "start": "2616800",
    "end": "2622480"
  },
  {
    "text": "of creaky and it leans left and right it wobbles and it's full of holes but it's yours and you you kind of have some",
    "start": "2622480",
    "end": "2627920"
  },
  {
    "text": "affection for it the right place to handle most of your exceptions is going to be way up near the top right that's",
    "start": "2627920",
    "end": "2633680"
  },
  {
    "text": "where you have the most context you don't want to handle them way down deep in the stack because you have very",
    "start": "2633680",
    "end": "2638800"
  },
  {
    "text": "little limited context especially in methods that are reused in a variety of situations you don't know the best way",
    "start": "2638800",
    "end": "2644520"
  },
  {
    "text": "to handle a particular error the the data layer is going to be the wrong place to handle most types of exceptions",
    "start": "2644520",
    "end": "2651240"
  },
  {
    "text": "I really don't like seeing TR catches in like your data layer because sometimes you can ignore the error because it doesn't matter it was a best effort",
    "start": "2651240",
    "end": "2657720"
  },
  {
    "text": "sometimes it's really important that that actually happened right and if the data layer is papering over the fact that an error happened you you aren't",
    "start": "2657720",
    "end": "2664520"
  },
  {
    "text": "able to make better decisions further up most of your exogenous exceptions are",
    "start": "2664520",
    "end": "2670040"
  },
  {
    "text": "going to originate way down in your in your data layer because that's where you're doing IO you're making Network calls to the database you're reading and",
    "start": "2670040",
    "end": "2676400"
  },
  {
    "text": "writing files you're making API calls so they're going to originate there but you really don't have enough context to",
    "start": "2676400",
    "end": "2681960"
  },
  {
    "text": "process them there at that layer and in fact I would say most applications if we're working with like a framework like",
    "start": "2681960",
    "end": "2687760"
  },
  {
    "text": "a aset core or like a desktop framework most apps don't really need a whole lot",
    "start": "2687760",
    "end": "2693200"
  },
  {
    "text": "of catch blocks at all like let the framework catch the ex exeption one of the favorite things to do with I like",
    "start": "2693200",
    "end": "2700480"
  },
  {
    "text": "doing with with aspet core is letting those exceptions bubble all the way up and having a global Handler where you",
    "start": "2700480",
    "end": "2705559"
  },
  {
    "text": "can kind of plug in and say okay these kinds of exceptions I want to return 404 these kinds of exceptions kind of mean",
    "start": "2705559",
    "end": "2710880"
  },
  {
    "text": "just a 500 the default and so you can kind of configure that all in one place all the way at the top layer that's kind",
    "start": "2710880",
    "end": "2716559"
  },
  {
    "text": "of handled by the framework and that makes it a whole lot easier to read and a whole lot easier to kind of Reason about because there really isn't",
    "start": "2716559",
    "end": "2722359"
  },
  {
    "text": "anything we could do to recover we tried to save something to the database database was down what are we going to do we can't really recover from that so",
    "start": "2722359",
    "end": "2729240"
  },
  {
    "text": "we might as well let that request crash and let the front end display something to the something practical to the user",
    "start": "2729240",
    "end": "2737040"
  },
  {
    "text": "now sometimes you might have some specific scenarios which we'll get about get into right so if you're going to",
    "start": "2737040",
    "end": "2742160"
  },
  {
    "text": "have to write a catch block somewhere because you want to try to do like a retry or uh or something like that don't",
    "start": "2742160",
    "end": "2747640"
  },
  {
    "text": "do what they call the Pokemon exception handling unlike Ash catch them you don't got to catch them",
    "start": "2747640",
    "end": "2753520"
  },
  {
    "text": "all so the you know here's an example of of one that we we actually ran into so",
    "start": "2753520",
    "end": "2759000"
  },
  {
    "text": "we're doing something that calls this htpi um HTTP API and this kind of an annoying partner API that you kind of",
    "start": "2759000",
    "end": "2765400"
  },
  {
    "text": "had to wake it up the first time you called it you would get a 503 service unavailable but if you called it again a",
    "start": "2765400",
    "end": "2770559"
  },
  {
    "text": "couple of times it would eventually kind of come alive now the purist in me wants to force the vendor to go and fix their",
    "start": "2770559",
    "end": "2776319"
  },
  {
    "text": "buggy API but I got to ship and that ain't happening so sometimes you got to",
    "start": "2776319",
    "end": "2781559"
  },
  {
    "text": "be pragmatic and write yourself a little retry Loop right so we did something like this where we kept track of the",
    "start": "2781559",
    "end": "2787240"
  },
  {
    "text": "number of attempts we did a catch exception there's that Pokemon exception catching we slept for 100 milliseconds",
    "start": "2787240",
    "end": "2794599"
  },
  {
    "text": "to give it some time to warm up and if eventually we would run out of except we would run out of retries and and propagate up the air right but the",
    "start": "2794599",
    "end": "2802280"
  },
  {
    "text": "problem is what happens if this API threw something that wasn't that expected 503 right it's still going to",
    "start": "2802280",
    "end": "2808559"
  },
  {
    "text": "get caught in this exception block and get retried like what if it was an authorization problem well retrying it",
    "start": "2808559",
    "end": "2815280"
  },
  {
    "text": "10 times isn't going to fix the author I ization problem or Worse what if it was some kind of timeout a 30-second timeout",
    "start": "2815280",
    "end": "2821680"
  },
  {
    "text": "tried 10 times takes 5 minutes right so we we should have just given up if they're down enough that we're hitting",
    "start": "2821680",
    "end": "2827720"
  },
  {
    "text": "timeouts us retrying is not likely to fix it we better let this propagate up and and deal with it in some other way",
    "start": "2827720",
    "end": "2834960"
  },
  {
    "text": "so the best thing then that we could do then is try to be very specific about the scenario that we really do want to retry we only want to retry when it was",
    "start": "2834960",
    "end": "2842280"
  },
  {
    "text": "an HTP exception and specifically an HTTP exception that was the 503",
    "start": "2842280",
    "end": "2848040"
  },
  {
    "text": "and this forces us to kind of work in the precisely in what we're doing now if if we're in C you know I wouldn't tend",
    "start": "2848040",
    "end": "2855319"
  },
  {
    "text": "to write this kind of code myself anymore there's a really great Library out there called poly I'm sure some of",
    "start": "2855319",
    "end": "2860520"
  },
  {
    "text": "us some of you are familiar with it you can configure all of this stuff you can do you know retries with like",
    "start": "2860520",
    "end": "2865920"
  },
  {
    "text": "exponential back off try again in one second try again in two seconds try again in four seconds all kinds of really cool things but it gives you the",
    "start": "2865920",
    "end": "2872079"
  },
  {
    "text": "same level of power you make sure you configure it not to do any old exception but specifically fil for the scenarios",
    "start": "2872079",
    "end": "2878440"
  },
  {
    "text": "that you know to be retriable um so a lot of apps are going",
    "start": "2878440",
    "end": "2883880"
  },
  {
    "text": "to have a Pokemon catch it at some level maybe the top level handled by the framework um but I think we should kind",
    "start": "2883880",
    "end": "2889200"
  },
  {
    "text": "of avoid those in general and be very specific about what we're trying to catch if you do feel like you want to",
    "start": "2889200",
    "end": "2895119"
  },
  {
    "text": "catch and rethrow though sometimes that can be useful and you can catch any old type of exception because you want to",
    "start": "2895119",
    "end": "2901240"
  },
  {
    "text": "rethrow it but adding a little bit more context along the way so you want to kind of evaluate if this makes sense",
    "start": "2901240",
    "end": "2907319"
  },
  {
    "text": "um for your scenario so one time we we had something that was you know doing removing permissions uh and we would try",
    "start": "2907319",
    "end": "2913480"
  },
  {
    "text": "to catch an exception and we were going to add a little bit of extra detail we were going to say what permission and what user ID um got removed and that",
    "start": "2913480",
    "end": "2921240"
  },
  {
    "text": "that that does help somebody debug this in the future right but the important thing is that we also pass along that",
    "start": "2921240",
    "end": "2926800"
  },
  {
    "text": "exception as the second parameter to the Constructor so most of our exceptions in C have the inner exception property",
    "start": "2926800",
    "end": "2933640"
  },
  {
    "text": "that's inherited from the base exception class U so you want to make sure you make use of this your logger will know",
    "start": "2933640",
    "end": "2938720"
  },
  {
    "text": "how to deal with that it will log your own message that you couldn't you know remove read permission from user 47 and",
    "start": "2938720",
    "end": "2946119"
  },
  {
    "text": "it'll also say the inter cause of this was a network timeout or database error foreign key constraint or or whatever",
    "start": "2946119",
    "end": "2952359"
  },
  {
    "text": "and now you've got both the details of what user was impacted and you got the real underlying problem so that you can",
    "start": "2952359",
    "end": "2957920"
  },
  {
    "text": "go and fix it your logger will deal with that they they know how to handle those and so you might be thinking can I",
    "start": "2957920",
    "end": "2963839"
  },
  {
    "text": "make a custom exception for this scenario I'm going to catch something and I want want to wrap it up in my own specific exception I would say maybe um",
    "start": "2963839",
    "end": "2972040"
  },
  {
    "text": "think about it a little bit maybe if you have a lot of like extra structured data that you want to add this is the details",
    "start": "2972040",
    "end": "2977720"
  },
  {
    "text": "of this aren't important but like this is the SQL exception from net they've got a lot of custom properties added to",
    "start": "2977720",
    "end": "2983359"
  },
  {
    "text": "it they've got the you know what line number of the SQL script went wrong what stored procedure was involved all the",
    "start": "2983359",
    "end": "2988880"
  },
  {
    "text": "stuff that kind of comes off of the underlying SQL Server protocol they kind of make that available to you but that's",
    "start": "2988880",
    "end": "2994720"
  },
  {
    "text": "a lot of work to add all these properties like making custom exception class is it's not hard but it is a little tedious they're supposed to be",
    "start": "2994720",
    "end": "3000559"
  },
  {
    "text": "serializable they're supposed to inherit in the right structure they're supposed to have the right Constructors uh so",
    "start": "3000559",
    "end": "3006319"
  },
  {
    "text": "it's just a lot of work if if they're not going to have a lot of value I've not reached for that very frequently in",
    "start": "3006319",
    "end": "3011760"
  },
  {
    "text": "my career um when you want to use them is if you're building something like that HTTP exception where you're going",
    "start": "3011760",
    "end": "3017960"
  },
  {
    "text": "to also propagate the HTTP status code to help somebody filter for specific",
    "start": "3017960",
    "end": "3023359"
  },
  {
    "text": "scenarios um but most of the time honestly just throw the extra cont context right in the message like like we did when we interpolated the",
    "start": "3023359",
    "end": "3029359"
  },
  {
    "text": "permission name and user ID this is a c uh pretty heavy. net uh",
    "start": "3029359",
    "end": "3035680"
  },
  {
    "text": "conference I want to be remiss to skip this but um make sure you don't lose the stack Trace when you're doing a catch",
    "start": "3035680",
    "end": "3041119"
  },
  {
    "text": "and rethrow it's kind of an annoying quirk in C that if you're doing something risky and you catch an",
    "start": "3041119",
    "end": "3046960"
  },
  {
    "text": "exception and you you know you test if you can ignore it but then you want to rethrow it you you've made a huge error",
    "start": "3046960",
    "end": "3052720"
  },
  {
    "text": "here that little three extra characters of including the ex will reset the stack",
    "start": "3052720",
    "end": "3057799"
  },
  {
    "text": "Trace so now when you get this in a log it looks like it came from right here in your catch block rather than originating",
    "start": "3057799",
    "end": "3064400"
  },
  {
    "text": "somewhere deep inside of do something risky and that's going to be very very tricky to figure out you've lost exactly",
    "start": "3064400",
    "end": "3070720"
  },
  {
    "text": "where this happened and so if you're do something risky called two database methods now you don't know which one",
    "start": "3070720",
    "end": "3075880"
  },
  {
    "text": "went wrong um it's going to be a lot harder to figure out so that resets the stack Trace just including that little",
    "start": "3075880",
    "end": "3082000"
  },
  {
    "text": "ex there so instead you just drop it and then this will cause C to rethrow the",
    "start": "3082000",
    "end": "3087920"
  },
  {
    "text": "exception but it will retain the original stack Trace that was deep inside of do something risky and you",
    "start": "3087920",
    "end": "3093040"
  },
  {
    "text": "won't get um confused the other thing you can do is is use some of the newer features of exception filters that came",
    "start": "3093040",
    "end": "3099359"
  },
  {
    "text": "out in in C a few versions ago where you can write a catch block with a wear I only want to catch the exception where",
    "start": "3099359",
    "end": "3106160"
  },
  {
    "text": "some fact about that exception is true this will have the same end result uh furthermore when you're",
    "start": "3106160",
    "end": "3112400"
  },
  {
    "text": "dealing with exceptions remember we talked early early about uh exceptions being non-local go-to and that being one",
    "start": "3112400",
    "end": "3118040"
  },
  {
    "text": "of the con one of the downsides of them it's true you do kind of have to be aware that if you're working in a method",
    "start": "3118040",
    "end": "3123400"
  },
  {
    "text": "at any time some exception could occur and jump out of your execution right so if you have things that you need to be",
    "start": "3123400",
    "end": "3129240"
  },
  {
    "text": "careful about disposing of or cleaning up after yourself then you need to make sure that you handle that",
    "start": "3129240",
    "end": "3136480"
  },
  {
    "text": "appropriately excuse me I had an app once where we were you know trying to log visits to some SQL table which is",
    "start": "3136480",
    "end": "3142359"
  },
  {
    "text": "you know terrible for load but hey it was 10 years ago and um you know so we would open a connection we would try to",
    "start": "3142359",
    "end": "3148359"
  },
  {
    "text": "insert into database um and then we would close the connection when we were done this seemed great um but we started",
    "start": "3148359",
    "end": "3154839"
  },
  {
    "text": "having issues where with performance was really tanked and the problem was that we were getting some errors in in some",
    "start": "3154839",
    "end": "3161680"
  },
  {
    "text": "of these insert statements we're having some locking constraints which would cause this method to throw which would",
    "start": "3161680",
    "end": "3167000"
  },
  {
    "text": "cause that close method to never get called right and this leaked SQL connections which made everything much",
    "start": "3167000",
    "end": "3172599"
  },
  {
    "text": "slower because these connections once they're leaked you got to wait for them to be returned to the pool be reused by another request this was really bad",
    "start": "3172599",
    "end": "3179119"
  },
  {
    "text": "under load and so the fix of course is to refactor and use the using statement",
    "start": "3179119",
    "end": "3185359"
  },
  {
    "text": "right now this pattern exists in other languages it's generally called the try with resources pattern Java has it",
    "start": "3185359",
    "end": "3190680"
  },
  {
    "text": "Python's got it JavaScript will be getting it at some point C it's the I disposable pattern so you can things",
    "start": "3190680",
    "end": "3196400"
  },
  {
    "text": "that are disposable make sure you wrap them in that using statement so that they automatically get disposed of even",
    "start": "3196400",
    "end": "3201680"
  },
  {
    "text": "if there is an exception that bubbles up the close method on that connection is still going to get called and when we do",
    "start": "3201680",
    "end": "3208240"
  },
  {
    "text": "that it fixed all of our performance problems even if we were having constraint problems the connection would",
    "start": "3208240",
    "end": "3213760"
  },
  {
    "text": "get released appropriately if you can't use the using um technique because the",
    "start": "3213760",
    "end": "3220000"
  },
  {
    "text": "library using doesn't support ey disposable or you're trying to mix and match between things then the the pattern is to do your risky thing and",
    "start": "3220000",
    "end": "3226480"
  },
  {
    "text": "and wrap around a finally block you can have a finally block without any corresponding catches that's that's",
    "start": "3226480",
    "end": "3231799"
  },
  {
    "text": "totally fine so if do your risky thing throws any exception at all you're you're going to be confident that your",
    "start": "3231799",
    "end": "3238240"
  },
  {
    "text": "cleanup method is going to get called on the way out so that's what we learned about",
    "start": "3238240",
    "end": "3244559"
  },
  {
    "text": "exogenous exceptions right you can't really detect them ahead of time please please please don't hide them or pretend",
    "start": "3244559",
    "end": "3250200"
  },
  {
    "text": "they didn't happen think about how what the right level to catch them at is it's going to be higher up at the top and not",
    "start": "3250200",
    "end": "3256079"
  },
  {
    "text": "deep down in your in your data layer and think about adding adding a little bit of context when it's appropriate all of",
    "start": "3256079",
    "end": "3262280"
  },
  {
    "text": "these are going to be ways to make with make these errors work with easier to work with these errors in the",
    "start": "3262280",
    "end": "3268280"
  },
  {
    "text": "future so let's recap and look at the categories real quick and then try to",
    "start": "3268280",
    "end": "3273319"
  },
  {
    "text": "pull out some principles that I think are going to help us work with our errors right if fatal exceptions we're",
    "start": "3273319",
    "end": "3280240"
  },
  {
    "text": "going to say don't catch them that was the advice boneheaded exceptions null reference uh argument out of range Etc",
    "start": "3280240",
    "end": "3286400"
  },
  {
    "text": "also don't catch uh the vexing exception catch them where you have to right close",
    "start": "3286400",
    "end": "3291520"
  },
  {
    "text": "to the cause so that you can kind of deal with it right away um and then the exogenous exception the main advice is",
    "start": "3291520",
    "end": "3297680"
  },
  {
    "text": "they're going to happen but you need to know about them so make sure you don't hide them and if we if we stand back and",
    "start": "3297680",
    "end": "3304160"
  },
  {
    "text": "look at what kind of what we've covered in the Practical examples I think we can unpack a few principles so even if you",
    "start": "3304160",
    "end": "3309319"
  },
  {
    "text": "don't remember all the details of those you keep these principles in mind it'll help us make good decisions in the",
    "start": "3309319",
    "end": "3314520"
  },
  {
    "text": "future exceptions are the key part of the observability of our systems right",
    "start": "3314520",
    "end": "3320480"
  },
  {
    "text": "and observability is kind of a word that's kind of up and coming there's there's other talks at this very conference about observability and it's",
    "start": "3320480",
    "end": "3326640"
  },
  {
    "text": "the idea of having insight into the running status of our applications if our applications are are encountering errors we need to make sure we know",
    "start": "3326640",
    "end": "3332960"
  },
  {
    "text": "about them and exceptions are a key part of how in net we know about the errors in our applications so we want to make",
    "start": "3332960",
    "end": "3338640"
  },
  {
    "text": "sure that we're not hiding them those problems are still happening and if we just have empty catch blocks we're not",
    "start": "3338640",
    "end": "3344319"
  },
  {
    "text": "making the problem really go away in fact a lot of times we're actually making the problem worse so we need to not be afraid of exceptions and we need",
    "start": "3344319",
    "end": "3351680"
  },
  {
    "text": "to let them tell us the information that they're telling us um and when we",
    "start": "3351680",
    "end": "3356960"
  },
  {
    "text": "ourselves detect a problem let's not be afraid to throw exceptions that we that we detect a scenario that's an error",
    "start": "3356960",
    "end": "3363440"
  },
  {
    "text": "let's make debugging easier for our other programmers on our team by going ahead and throwing those exceptions and",
    "start": "3363440",
    "end": "3369720"
  },
  {
    "text": "when you throw them make sure they're nice and and have good context so that you can be kind to the other developers",
    "start": "3369720",
    "end": "3375760"
  },
  {
    "text": "on your team so and if you wanted to get down to like one key thing it's this",
    "start": "3375760",
    "end": "3381039"
  },
  {
    "text": "would be the distillation of everything I would say we as a as a programming Community dealing with exceptions I",
    "start": "3381039",
    "end": "3387400"
  },
  {
    "text": "think we want to write a whole lot less catch statements and write a whole lot more throw statements and if if we think about what",
    "start": "3387400",
    "end": "3394720"
  },
  {
    "text": "that exactly means and kind of unpack all of the kind of principles we've looked at we'll get a good handle on errors and maybe uh Hacker News won't",
    "start": "3394720",
    "end": "3401640"
  },
  {
    "text": "have so many complaints in the future all right so that has been um",
    "start": "3401640",
    "end": "3407280"
  },
  {
    "text": "you're doing exceptions wrong if you follow all my advice then you will do exceptions right and uh I hope that that",
    "start": "3407280",
    "end": "3413400"
  },
  {
    "text": "uh becomes useful to you in the future thank you very much",
    "start": "3413400",
    "end": "3420200"
  }
]