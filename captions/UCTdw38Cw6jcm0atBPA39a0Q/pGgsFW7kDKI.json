[
  {
    "text": "um hi everyone to my talk about performance tricks that I learned from contributing to open source projects",
    "start": "3540",
    "end": "9420"
  },
  {
    "text": "primarily the Azure service bus SDK so I'm the kind of guy that I consider",
    "start": "9420",
    "end": "15059"
  },
  {
    "text": "myself a practical learner and I've invented that term I don't know I do not know if it exists but I basically when I",
    "start": "15059",
    "end": "21779"
  },
  {
    "text": "read the book about something like performance optimizations architecture design whatever I'm sitting in front of the book and I think like I have it",
    "start": "21779",
    "end": "28619"
  },
  {
    "text": "figured out right and then I'm sitting in front of my code I'm sitting in front of my challenge then I'm like hmm how",
    "start": "28619",
    "end": "34920"
  },
  {
    "text": "did that work again and then I basically go through a series of learning try and",
    "start": "34920",
    "end": "40079"
  },
  {
    "text": "error attempts in order to like really really embrace the concepts but then I think like okay then I have it finally",
    "start": "40079",
    "end": "46200"
  },
  {
    "text": "figured out and I my dream was to get better in performance optimizations because I was reading a bunch of blog",
    "start": "46200",
    "end": "52680"
  },
  {
    "text": "articles and stuff like that I was like how could I learn that so I went out looking for an open source project that",
    "start": "52680",
    "end": "58199"
  },
  {
    "text": "is well a welcoming contributions and I found the azure response.net CK and they started basically sending in some pull",
    "start": "58199",
    "end": "64500"
  },
  {
    "text": "requests trying out some of them have been accepted some of them have not been accepted but I started gradually",
    "start": "64500",
    "end": "70740"
  },
  {
    "text": "applying the things that I learned from reading books and stuff like that to the Azure service bus SDK and",
    "start": "70740",
    "end": "77159"
  },
  {
    "text": "um now I'm around 80 pull requests and most of them have been merged so I'm almost some people have said that you",
    "start": "77159",
    "end": "84479"
  },
  {
    "text": "contributed more than some internal Microsoft employees I don't know if that's really true but I mean it's it's",
    "start": "84479",
    "end": "90540"
  },
  {
    "text": "an honor to hear that and in this talk I basically have summarized some of the key learning learnings I learned from",
    "start": "90540",
    "end": "97439"
  },
  {
    "text": "these contributions to the Azure service process SDK so that if you are interested in performance optimizations",
    "start": "97439",
    "end": "103259"
  },
  {
    "text": "you don't have to go through the same exercise as I did with a lot of like tears and sweats and midnight",
    "start": "103259",
    "end": "110280"
  },
  {
    "text": "programming sessions until my internet switch is off I basically have this hack because I know that when I'm like deep",
    "start": "110280",
    "end": "117360"
  },
  {
    "text": "into coding and stuff I cannot stop anymore so I basically set my internet router to switch off and at midnight",
    "start": "117360",
    "end": "122939"
  },
  {
    "text": "because when I cannot Google or Bing anymore and the internet is gone I'm like okay whatever and I go to bed so",
    "start": "122939",
    "end": "130200"
  },
  {
    "text": "that's the the trick that I do okay a quick introduction so this talk",
    "start": "130200",
    "end": "135959"
  },
  {
    "text": "is not going to be about horizontal or vertical scaling you can achieve a lot of like throughput performance things by",
    "start": "135959",
    "end": "141480"
  },
  {
    "text": "horizontally or vertical scale architectures that's not going to be about that it's also not going to be about tools like benchmark.net profilers",
    "start": "141480",
    "end": "148440"
  },
  {
    "text": "and stuff like that because that would be a whole other talk and so this talk is really about performance",
    "start": "148440",
    "end": "153959"
  },
  {
    "text": "optimizations that you can do in your c-sharp.net code I will be showing examples in csharp.net because that's",
    "start": "153959",
    "end": "160560"
  },
  {
    "text": "the language that I use day to day some of these things can also be applied to F-sharp or visual basic.net if you're",
    "start": "160560",
    "end": "166980"
  },
  {
    "text": "using that but the focus will be c-sharp examples and sometimes people ask me but",
    "start": "166980",
    "end": "172800"
  },
  {
    "text": "why.net why c-sharp why manage language shouldn't you just be using CRC plus plus wouldn't that be way more efficient",
    "start": "172800",
    "end": "178500"
  },
  {
    "text": "well I truly believe that the.net runtime over the time has become a really really good platform for writing",
    "start": "178500",
    "end": "185099"
  },
  {
    "text": "high performance code and people like aaronstanard for akka.net proof that the Microsoft Orleans teams proves it there",
    "start": "185099",
    "end": "191940"
  },
  {
    "text": "are a lot of like also online games like massive multiplayer online games that are running on.net so it is truly a",
    "start": "191940",
    "end": "198120"
  },
  {
    "text": "platform that is able to to do a lot of um great things and at a high scale and",
    "start": "198120",
    "end": "204120"
  },
  {
    "text": "I think C plus plus is less and less needed to achieve quote the performance higher scale and one of the good",
    "start": "204120",
    "end": "211140"
  },
  {
    "text": "examples that I find is that the the seizure the sorry.net runtime team they",
    "start": "211140",
    "end": "216239"
  },
  {
    "text": "actually ported the threat pool that was sort of have managed land have unmanaged",
    "start": "216239",
    "end": "221580"
  },
  {
    "text": "land deported it into the managed land it's now entirely written in c-sharp and it performs really really well in some",
    "start": "221580",
    "end": "228480"
  },
  {
    "text": "cases slightly better but it's at least on par so that's also a good sign that",
    "start": "228480",
    "end": "234060"
  },
  {
    "text": "when you have a common code base that uses the same language constructs that's",
    "start": "234060",
    "end": "239159"
  },
  {
    "text": "also a really good thing for maintaining ability so I really love c-sharp.net and how it can be used with high performing",
    "start": "239159",
    "end": "245400"
  },
  {
    "text": "code sometimes when I do these types of optimizations I hear from my colleagues and Pierce is like wow Daniel isn't that",
    "start": "245400",
    "end": "252420"
  },
  {
    "text": "premature optim organizations some of these things are really highly esoteric and I'm like is and they're",
    "start": "252420",
    "end": "258479"
  },
  {
    "text": "asking me questions like is this change really worth it is the complexity really worth it and these are really important",
    "start": "258479",
    "end": "264180"
  },
  {
    "text": "questions to to ask and I want to I don't want you to go home after after this talk and say hey Daniel showed a",
    "start": "264180",
    "end": "270000"
  },
  {
    "text": "few things some optimizations I'm gonna apply them everywhere in my codes that is not my message today right because",
    "start": "270000",
    "end": "276600"
  },
  {
    "text": "some of these optimizations they should only be applied in in the context where",
    "start": "276600",
    "end": "281820"
  },
  {
    "text": "it actually is necessary to apply them and in some other context and I'm going to talk a lot about this context you",
    "start": "281820",
    "end": "287759"
  },
  {
    "text": "should not be applying this type of optimizations because you would be wasting your employer's time your",
    "start": "287759",
    "end": "292979"
  },
  {
    "text": "customers time and your own time by doing that so that's really important to keep in mind so don't jump to",
    "start": "292979",
    "end": "298740"
  },
  {
    "text": "conclusions apply and apply them everywhere and some I fell into the",
    "start": "298740",
    "end": "304620"
  },
  {
    "text": "spitfall myself so some of these performance optimizations they can be highly addictive because once you get into like this mode of oh I found",
    "start": "304620",
    "end": "311280"
  },
  {
    "text": "something I saw an allocation whatever and you start optimizing it in it and then you go into like loops and Loops",
    "start": "311280",
    "end": "316860"
  },
  {
    "text": "until the internet switches off at midnight right um but it's really important that you",
    "start": "316860",
    "end": "322199"
  },
  {
    "text": "ask yourself a few questions like is this is this code going to be executed at scale and I'm going to talk a bit",
    "start": "322199",
    "end": "328500"
  },
  {
    "text": "more about that because you don't want to optimize code that is only executed once a day right because it doesn't",
    "start": "328500",
    "end": "334259"
  },
  {
    "text": "really matter right so code is executed at scale when it's more efficient in",
    "start": "334259",
    "end": "340259"
  },
  {
    "text": "resource use it usage execution time throughput and whatnot then these types",
    "start": "340259",
    "end": "345419"
  },
  {
    "text": "of optimization can make a huge difference and I have this quote from",
    "start": "345419",
    "end": "350520"
  },
  {
    "text": "David Fowler from a talk that is called at scale implementation details matters and he says a scale for an application",
    "start": "350520",
    "end": "357060"
  },
  {
    "text": "can mean the number of uses that will concurrently connect to the application at any given time the amount of input to",
    "start": "357060",
    "end": "362699"
  },
  {
    "text": "process or the number of times the data needs to be processed and for me the last sentence is the most important one",
    "start": "362699",
    "end": "368280"
  },
  {
    "text": "for us as Engineers it means we have to know what to ignore and knowing what to pay close attention to right so really I",
    "start": "368280",
    "end": "375840"
  },
  {
    "text": "usually when I look at the code base I I assume that the people that have written the code they were smart right they they",
    "start": "375840",
    "end": "381900"
  },
  {
    "text": "made trade-offs they thought about different like input parameters and how this code is X gonna be executed at",
    "start": "381900",
    "end": "388800"
  },
  {
    "text": "scale so we have to essentially discover the assumptions that people made about this piece of code and hopefully it's",
    "start": "388800",
    "end": "395160"
  },
  {
    "text": "written down somewhere somewhere sometimes it's not right and we have to think about well what is currently",
    "start": "395160",
    "end": "400220"
  },
  {
    "text": "instantiated in this specific uh piece of code per request as an example how",
    "start": "400220",
    "end": "406319"
  },
  {
    "text": "much memory is going to be used and sometimes people are also thinking like well it's only going to be used I don't",
    "start": "406319",
    "end": "412919"
  },
  {
    "text": "know 10 times a second right and then we forget that and then the system evolves and solves it's going to be executed",
    "start": "412919",
    "end": "418259"
  },
  {
    "text": "hundred times a thousand times a second and that doesn't mean those people were stupid it just means that things have",
    "start": "418259",
    "end": "424020"
  },
  {
    "text": "changed and sometimes we have to go back and re-evaluate our decision making so that we can actually",
    "start": "424020",
    "end": "430039"
  },
  {
    "text": "improve the piece that is currently executed at scale and what I also try to",
    "start": "430039",
    "end": "437400"
  },
  {
    "text": "do in my talks is I want to find like sort of rules that you can apply yourself so that you have some things to",
    "start": "437400",
    "end": "444120"
  },
  {
    "text": "memorize from from this talk and I have these rules that I'm going to talk about and I'm gonna go more into these rules",
    "start": "444120",
    "end": "451680"
  },
  {
    "text": "um along the way of this talk so the first one is avoid excessive allocations to reduce the GC overhead and GC is the",
    "start": "451680",
    "end": "458220"
  },
  {
    "text": "garbage collection overhead that's the first one and the second one is avoid unnecessary copying of memory these are",
    "start": "458220",
    "end": "464460"
  },
  {
    "text": "the high level categories that I'm going to talk about today and if you're now falling asleep because you're long alone",
    "start": "464460",
    "end": "470039"
  },
  {
    "text": "sugar and you're waiting for your lunch time that's fine if you keep that from this talk then you're already good and",
    "start": "470039",
    "end": "475979"
  },
  {
    "text": "if you look into your cool basis and try to look for these things that's already good key learning that you can take away",
    "start": "475979",
    "end": "482520"
  },
  {
    "text": "so let's go into the first subcategory of this avoid excessive allocation to reduce the GC overhead so the first one",
    "start": "482520",
    "end": "489300"
  },
  {
    "text": "is think at least twice before using link or unnecessary enumerations on the hot path so don't get me wrong link is a",
    "start": "489300",
    "end": "496680"
  },
  {
    "text": "great language feature right so I also love it but it should be applied",
    "start": "496680",
    "end": "502199"
  },
  {
    "text": "um on the specific circumstances and on the some specific circumstances when the code is executed the scale link can be",
    "start": "502199",
    "end": "509400"
  },
  {
    "text": "actually a resource Hawk so for example link is very difficult to be chit",
    "start": "509400",
    "end": "515339"
  },
  {
    "text": "optimized and I know that the.net team is actually optimizing link more and more and more and some of the things",
    "start": "515339",
    "end": "521219"
  },
  {
    "text": "that we talked today about link you might no longer be true maybe in a few months time or in a year and some things",
    "start": "521219",
    "end": "527700"
  },
  {
    "text": "have already been changed in.net salmon will be further optimizing.net8 still you have to pay attention to link that",
    "start": "527700",
    "end": "534600"
  },
  {
    "text": "is executed on the hot path and when I say cheat I mean the just in time compiler so let's look first into a",
    "start": "534600",
    "end": "542339"
  },
  {
    "text": "specific piece of code that I have from the ash service bus SDK we have here the mqp receiver class and the mqp mqp is a",
    "start": "542339",
    "end": "549600"
  },
  {
    "text": "protocol that essentially allows for example Azure service bus or event tops to essentially communicate over TCP IP",
    "start": "549600",
    "end": "557100"
  },
  {
    "text": "with the client application that is running either in the data center on premises or wherever it's running and",
    "start": "557100",
    "end": "562320"
  },
  {
    "text": "essentially in mqp there is a and the special effects service bus there's this concept of a of a lock token and the mqp",
    "start": "562320",
    "end": "570180"
  },
  {
    "text": "receiver is the driver behind the connection to Azure service bus and whenever you receive messages with Azure",
    "start": "570180",
    "end": "577260"
  },
  {
    "text": "service bus the lock tokens represent the essentially the lock on a message and when you're done you complete by",
    "start": "577260",
    "end": "584040"
  },
  {
    "text": "essentially giving the service a lock token and the Azure SDK has these",
    "start": "584040",
    "end": "589140"
  },
  {
    "text": "guidelines whenever they're accepting essentially innumerable types from the outside they have to take the broadest",
    "start": "589140",
    "end": "595800"
  },
  {
    "text": "possible enumeration type and that's iron numerable and here the log tokens",
    "start": "595800",
    "end": "601080"
  },
  {
    "text": "are represented as strings and they're actually grids so they accept this I enumerable of string and then what",
    "start": "601080",
    "end": "608040"
  },
  {
    "text": "they're doing is essentially they could look like this right they did lock token select new good token then two array and",
    "start": "608040",
    "end": "615000"
  },
  {
    "text": "then they did the lookup with link any looked into sort of a data structure whether it has already been seen and",
    "start": "615000",
    "end": "622019"
  },
  {
    "text": "then they went on one code path or on the other cool path and if we know what's going on we have to closely look",
    "start": "622019",
    "end": "628200"
  },
  {
    "text": "at the code that is actually essentially lowered undercover if we decompile it",
    "start": "628200",
    "end": "633360"
  },
  {
    "text": "what we will see is this this piece of coordinate I know it's a little bit overwhelming",
    "start": "633360",
    "end": "639060"
  },
  {
    "text": "um I'm going to zoom in a little bit more so what we see here is we have this select statement here and we can see",
    "start": "639060",
    "end": "647220"
  },
  {
    "text": "here on this side is this um nine underscore unscript 2 underscore zero",
    "start": "647220",
    "end": "653399"
  },
  {
    "text": "and then question mark question mark equals so whenever we see this pattern sort of simplified we know we're kind of",
    "start": "653399",
    "end": "659760"
  },
  {
    "text": "in a safe Zone we don't really have to worry about it because it's going to be a statically cache delegate so that's going to be fine but if you look even",
    "start": "659760",
    "end": "666300"
  },
  {
    "text": "closer we can see here this new funk of grid of pool that's essentially points to these complete internal async method",
    "start": "666300",
    "end": "672839"
  },
  {
    "text": "and that is an allocation that is not really necessary how can we get rid of this allocation well we can simply turn",
    "start": "672839",
    "end": "680700"
  },
  {
    "text": "this any statement into a for each Loop so instead of doing the any we",
    "start": "680700",
    "end": "686519"
  },
  {
    "text": "essentially for each and then we look into this uh into this thing data structure that we had there and then if",
    "start": "686519",
    "end": "692700"
  },
  {
    "text": "we find it then we go on one code path and and if we don't we go then we go on to the other code path and if we",
    "start": "692700",
    "end": "699360"
  },
  {
    "text": "decompile this code what we can then see is now we have the pattern that we saw",
    "start": "699360",
    "end": "705000"
  },
  {
    "text": "before let us say this kind of safe right because now we have this um C9 underscore unsure two question",
    "start": "705000",
    "end": "711839"
  },
  {
    "text": "mark question mark equals and now we have a statically cache delegate and we should be fine are we fine that's an",
    "start": "711839",
    "end": "719640"
  },
  {
    "text": "important question to ask yourself right because when we're making optimizations into the code we actually have to",
    "start": "719640",
    "end": "725700"
  },
  {
    "text": "measure whether it actually improved something and we can do that with tools like benchmark.net as an example there",
    "start": "725700",
    "end": "732300"
  },
  {
    "text": "are also other tools available that you can use I find benchmark.net really accessible to write",
    "start": "732300",
    "end": "738060"
  },
  {
    "text": "um to write benchmarks and I did that and I actually did The Benchmark and they compared the before and after",
    "start": "738060",
    "end": "743940"
  },
  {
    "text": "solution against multiple enumeration types and I know this is a huge graphic",
    "start": "743940",
    "end": "749820"
  },
  {
    "text": "here on the screen I'm going to summarize it for you so you don't have to read it all essentially when we get",
    "start": "749820",
    "end": "755040"
  },
  {
    "text": "rid of the link any statement we are able to do some good performance Improvement what we see on the first",
    "start": "755040",
    "end": "761100"
  },
  {
    "text": "line we get 20 to 40 percent more throughput in this piece of code and we get a garbage collection reduction",
    "start": "761100",
    "end": "767540"
  },
  {
    "text": "chancero garbage collection reduction by 20 to 40 percent that's already quite",
    "start": "767540",
    "end": "772560"
  },
  {
    "text": "amazing right by just getting rid of the any statement we're actually now able to pump more and more through participation",
    "start": "772560",
    "end": "779519"
  },
  {
    "text": "code and this is really relevant for that mqp receiver because we might be",
    "start": "779519",
    "end": "784620"
  },
  {
    "text": "receiving thousands and thousands of messages from Azure service bus or in event top it's going to be 20 megabytes",
    "start": "784620",
    "end": "790920"
  },
  {
    "text": "of streams basically per second that is going to be pumped through the network channels and we need to then acknowledge",
    "start": "790920",
    "end": "797519"
  },
  {
    "text": "all this log tokens so performance improvements like that are super important but then the question is can we go even",
    "start": "797519",
    "end": "805440"
  },
  {
    "text": "further right and because those who are not asleep yet they saw that there is",
    "start": "805440",
    "end": "811620"
  },
  {
    "text": "still a link statement in there right can we also get rid of this link statement and yes there is I call this",
    "start": "811620",
    "end": "817380"
  },
  {
    "text": "link to collection based refactorings that you can actually do and the first",
    "start": "817380",
    "end": "822420"
  },
  {
    "text": "rule that I have here is whenever you have an empty array that you need to represent use array.empty and the other",
    "start": "822420",
    "end": "829500"
  },
  {
    "text": "one is whenever you have enumericals that you need to represent that are empty use enumerable dot NT to represent",
    "start": "829500",
    "end": "835980"
  },
  {
    "text": "those the next one is when you have collections collections have a pre uh",
    "start": "835980",
    "end": "841200"
  },
  {
    "text": "assigned capacity and that capacity when you add more items to the collection and",
    "start": "841200",
    "end": "847440"
  },
  {
    "text": "the capacity is kind of about to be reached the collection is going to resize itself internally and that",
    "start": "847440",
    "end": "853740"
  },
  {
    "text": "resizing is going to cause allocations and it's going to use um CPU time so if",
    "start": "853740",
    "end": "859620"
  },
  {
    "text": "you can if you know how many things you will add to a collection it's usually good practice to instantiate the",
    "start": "859620",
    "end": "865320"
  },
  {
    "text": "collection with the number of things that you want to put into then you're not going through through this growing",
    "start": "865320",
    "end": "870600"
  },
  {
    "text": "and this one is a little bit counterintuitive the other one because I hear a lot of teams saying well but I want to use I read only collection or I",
    "start": "870600",
    "end": "877260"
  },
  {
    "text": "normally everywhere if it's performance sensitive code it's usually better to use the concrete collection types",
    "start": "877260",
    "end": "883019"
  },
  {
    "text": "because when you're using the concrete collection types then there is no boxing of the enumerator happening and then you",
    "start": "883019",
    "end": "889079"
  },
  {
    "text": "get also less allocations and you get also far more speed these this rule here gets more and more optimized also with",
    "start": "889079",
    "end": "896040"
  },
  {
    "text": "things like PTO and the the cheat gets smarter and smarter over time but still",
    "start": "896040",
    "end": "901680"
  },
  {
    "text": "I still consider it good practice for high performance code to actually use the concrete collection types and then",
    "start": "901680",
    "end": "908240"
  },
  {
    "text": "if you if you can for example if you if you're getting input from the outside and you need to copy it into a new",
    "start": "908240",
    "end": "915600"
  },
  {
    "text": "collection sometimes you need to get you need to get the count and instead of using link count use for example pattern",
    "start": "915600",
    "end": "921720"
  },
  {
    "text": "matching to figure out whether it's an I read only collection and then you can have access to the account or you can",
    "start": "921720",
    "end": "926820"
  },
  {
    "text": "use the enumerable try get non-enumerated account which basically attempts to find out whether it's",
    "start": "926820",
    "end": "933480"
  },
  {
    "text": "collection type that has a already account available and then it doesn't enumerate through the whole collection",
    "start": "933480",
    "end": "939540"
  },
  {
    "text": "that's also a good way to improve performance and this one is whenever you are thinking about essentially creating",
    "start": "939540",
    "end": "946320"
  },
  {
    "text": "a new collection type because you need to copy wait until you really need it right so basically figure out your",
    "start": "946320",
    "end": "952260"
  },
  {
    "text": "essentially boundary conditions and whatnot and if your boundary conditions are reached then exit the method",
    "start": "952260",
    "end": "957360"
  },
  {
    "text": "otherwise once you really know that you need a collection then create the collection and this one uh there'll be",
    "start": "957360",
    "end": "964620"
  },
  {
    "text": "dragons uh be careful with this one so you can essentially try to align axis so",
    "start": "964620",
    "end": "970199"
  },
  {
    "text": "that essentially instead of uh dot net has bound checks for arrays and",
    "start": "970199",
    "end": "975779"
  },
  {
    "text": "different collection types right and you can for example write the code in a way so those bound checks are actually not",
    "start": "975779",
    "end": "981120"
  },
  {
    "text": "emitted anymore that's a way to actually go into like really performance sensitive areas you can use unsafe and",
    "start": "981120",
    "end": "988680"
  },
  {
    "text": "one of the things that's also quite nice you have now these collection marshalling types and memory Marshall and unsafe methods available in the.net",
    "start": "988680",
    "end": "996779"
  },
  {
    "text": "runtime that allow you to actually get access to the underlying sort of memory of collections but this is really",
    "start": "996779",
    "end": "1003560"
  },
  {
    "text": "dangerous so be really careful and think at least three times before you use these techniques but it is possible to",
    "start": "1003560",
    "end": "1009740"
  },
  {
    "text": "squeeze out even more performance so if you apply this to this piece of code right because what we had here is we",
    "start": "1009740",
    "end": "1016519"
  },
  {
    "text": "still had this two array call um then let's have a look how it looks like when we when we're doing this so",
    "start": "1016519",
    "end": "1022880"
  },
  {
    "text": "what the azure.net team has they have a lot of telemetry how people are using the SDK and what we can we're able to",
    "start": "1022880",
    "end": "1030438"
  },
  {
    "text": "basically use this knowledge and we know that in the maturity of the cases people are actually passing already",
    "start": "1030439",
    "end": "1036520"
  },
  {
    "text": "materialized collections into it and not lazy enumerated uh collections so what",
    "start": "1036520",
    "end": "1041959"
  },
  {
    "text": "we did is we we said okay we're going to optimize this code by and we we didn't have a numeral try get enumerated count",
    "start": "1041959",
    "end": "1048679"
  },
  {
    "text": "available because we we target net standard there so we're using a pattern match to essentially look is this called",
    "start": "1048679",
    "end": "1055100"
  },
  {
    "text": "this I normally that we're getting from the outside is it an I read only collection of string and if it is then",
    "start": "1055100",
    "end": "1061280"
  },
  {
    "text": "we just pass it to the method if it isn't we're probably in the case of a lazy enumerated enumerable and then",
    "start": "1061280",
    "end": "1067580"
  },
  {
    "text": "we're calling two array and then we pass this I read only call actually to string",
    "start": "1067580",
    "end": "1072919"
  },
  {
    "text": "to this method and you might be thinking but Daniel I'm awake I paid attention to your rules and you said use the concrete",
    "start": "1072919",
    "end": "1079820"
  },
  {
    "text": "collection types and now you cheeky bastard you passing in I read the only collection of string you are you",
    "start": "1079820",
    "end": "1085640"
  },
  {
    "text": "tricking me well the thing is with all these types of optimizations you have to make trade-offs right and this one the",
    "start": "1085640",
    "end": "1091340"
  },
  {
    "text": "trade-off was we couldn't just go and break essentially the public method and we couldn't violate the rules of the SDK",
    "start": "1091340",
    "end": "1097220"
  },
  {
    "text": "so we had to make trade-offs and the trade of us we were going to use the iRead only collection of string here and",
    "start": "1097220",
    "end": "1103940"
  },
  {
    "text": "then what we do is we do essentially figure out the boundary conditions and if it's an empty array represented as an",
    "start": "1103940",
    "end": "1110240"
  },
  {
    "text": "array empty and otherwise we allocate the array and then we just go essentially and fill the grids into this",
    "start": "1110240",
    "end": "1117320"
  },
  {
    "text": "array okay let's have a look how we are doing now with this optimized piece of code",
    "start": "1117320",
    "end": "1122900"
  },
  {
    "text": "let's do some benchmarking and this isn't before and before and after",
    "start": "1122900",
    "end": "1128059"
  },
  {
    "text": "comparison of the already optimized version that got rid of the link any statement to the collection based",
    "start": "1128059",
    "end": "1134179"
  },
  {
    "text": "refactored version of this piece of code and if we look we can actually squeeze out another 5 to 64 throughput",
    "start": "1134179",
    "end": "1141559"
  },
  {
    "text": "Improvement on the previous already optimized version and we get another 23",
    "start": "1141559",
    "end": "1146600"
  },
  {
    "text": "to 61 garbage collection reduction which is pretty neat right and now we could",
    "start": "1146600",
    "end": "1152120"
  },
  {
    "text": "say okay let's switch off the internet and go to bed but if we look really closely",
    "start": "1152120",
    "end": "1157419"
  },
  {
    "text": "then we can actually see it and in some scenarios we're actually doing worse we're doing 56 worse so we're actually",
    "start": "1157419",
    "end": "1165140"
  },
  {
    "text": "slower than the previous version that was far less complex now the question is",
    "start": "1165140",
    "end": "1171200"
  },
  {
    "text": "should we not do such an optimization and by the way sorry I forgot to mention",
    "start": "1171200",
    "end": "1176660"
  },
  {
    "text": "we are worse in the in the in the cases when we get lazy enumerated enumerables",
    "start": "1176660",
    "end": "1182780"
  },
  {
    "text": "because then we have to materialize The Collection then we're actually worse again the question is should we not do",
    "start": "1182780",
    "end": "1188960"
  },
  {
    "text": "this type of of refacting and here it is the answer is it depends right in the",
    "start": "1188960",
    "end": "1194179"
  },
  {
    "text": "specific code we knew that the majority of the time in the production cases because of telemetry and and whatnot we",
    "start": "1194179",
    "end": "1200720"
  },
  {
    "text": "knew that it's going to be materialized collection collection so it's a good refactoring to do and only in unit",
    "start": "1200720",
    "end": "1206120"
  },
  {
    "text": "testing cases people might actually pass lazy enumerated enumerables and and then",
    "start": "1206120",
    "end": "1211820"
  },
  {
    "text": "we can actually go to say okay we're never in the sort of the danger zone really for for",
    "start": "1211820",
    "end": "1217580"
  },
  {
    "text": "um production scenarios where we are actually worse and then we can make this trade-off for you for your teams it",
    "start": "1217580",
    "end": "1223760"
  },
  {
    "text": "might be well we are fairly familiar with linky we're happy to make the trade-off to actually get rid of the link any in this specific example right",
    "start": "1223760",
    "end": "1230179"
  },
  {
    "text": "but for everything else we just leave what is currently in place because this code is going to be it's going to be",
    "start": "1230179",
    "end": "1236120"
  },
  {
    "text": "fine like that so and then Focus your attention to other pieces in your code",
    "start": "1236120",
    "end": "1241160"
  },
  {
    "text": "base where you can probably make even more significant improvements than actually",
    "start": "1241160",
    "end": "1246919"
  },
  {
    "text": "trying to refactor everything because as we have seen there is a complexity explosion right we went from a few lines",
    "start": "1246919",
    "end": "1253760"
  },
  {
    "text": "of code to essentially 20 lines of code right and these 20 lines of code they",
    "start": "1253760",
    "end": "1259039"
  },
  {
    "text": "come with a maintenance overhead with a cognitive overhead whenever you're looking at this piece of code so these",
    "start": "1259039",
    "end": "1264500"
  },
  {
    "text": "factors need also be taken into account and with all the things in software it's",
    "start": "1264500",
    "end": "1269720"
  },
  {
    "text": "kind of the trade-offs are important and thinking about these sort of edge cases and sometimes it means we have to stop",
    "start": "1269720",
    "end": "1276380"
  },
  {
    "text": "here and we use the first simplify simplified optimized version",
    "start": "1276380",
    "end": "1281780"
  },
  {
    "text": "we already touched a little bit on the closure allocations and I'm gonna",
    "start": "1281780",
    "end": "1286940"
  },
  {
    "text": "reiterate a little bit on this one the next rule is be aware of closure allo allocations and closure allocations they",
    "start": "1286940",
    "end": "1295340"
  },
  {
    "text": "can occur whenever you have action or function delegates or any type of delegates they're accessing State",
    "start": "1295340",
    "end": "1301940"
  },
  {
    "text": "outside of the Lambda or outside of the curlies and it's like what does that even mean okay I'm going to give you an",
    "start": "1301940",
    "end": "1308240"
  },
  {
    "text": "example so here we have this run operation method out of the Azure service bus SDK and this is essentially",
    "start": "1308240",
    "end": "1314299"
  },
  {
    "text": "sort of a poly retry capability mechanism and what it does is whenever they're calling sort of a server method",
    "start": "1314299",
    "end": "1321080"
  },
  {
    "text": "what they're doing they're they're wrapping this this method in this run operation method and the Run operation",
    "start": "1321080",
    "end": "1327200"
  },
  {
    "text": "method returns a task because these are going to be i o bound methods i o bound means we're going to call over nqp TCP",
    "start": "1327200",
    "end": "1334580"
  },
  {
    "text": "IP or HTTP we're going to call to the service that is running in the cloud right and then we have this funk time",
    "start": "1334580",
    "end": "1340280"
  },
  {
    "text": "span of tasks that's the actual operation that we're going to execute that is going to be passed into this",
    "start": "1340280",
    "end": "1345440"
  },
  {
    "text": "method and then what we're doing is we have sort of a while loop and we essentially call this method and if it",
    "start": "1345440",
    "end": "1350840"
  },
  {
    "text": "was successful return and if if we got the server busy exception sort of back pressure from the service then we are",
    "start": "1350840",
    "end": "1356480"
  },
  {
    "text": "going to retry with task delays and whatnot that really simplified sort of poly mechanism that you might be already",
    "start": "1356480",
    "end": "1362659"
  },
  {
    "text": "familiar with with that is built into the SDK and if we look at the usage what",
    "start": "1362659",
    "end": "1368299"
  },
  {
    "text": "we can see here this is such a user usage with the retry policy that run operation and if we zoom in what we can",
    "start": "1368299",
    "end": "1374840"
  },
  {
    "text": "see here there is this online message patch that's a local variable and then",
    "start": "1374840",
    "end": "1380000"
  },
  {
    "text": "we see the curly braces around here and within that within those currently",
    "start": "1380000",
    "end": "1385700"
  },
  {
    "text": "braces we access this local variable and then we call create message patch internal and that is a closure right",
    "start": "1385700",
    "end": "1391940"
  },
  {
    "text": "because we have something that is outside of the curly braces that we try to reach out and then we get a closure",
    "start": "1391940",
    "end": "1398059"
  },
  {
    "text": "allocation how does a closure allocation look like again we have to decompile the",
    "start": "1398059",
    "end": "1403159"
  },
  {
    "text": "code and look at what's actually happening on the recovers and this is the gibberish code that gets generated",
    "start": "1403159",
    "end": "1408260"
  },
  {
    "text": "by the compiler when this code is lowered and what we can see here we have this display class 16 allocation and we",
    "start": "1408260",
    "end": "1416000"
  },
  {
    "text": "have this funk of time span of task allocation that happens every time we call this method these are two",
    "start": "1416000",
    "end": "1422179"
  },
  {
    "text": "allocations that are totally unnecessary how can we get rid of those so we have to do a little bit of mental gymnastics",
    "start": "1422179",
    "end": "1429919"
  },
  {
    "text": "and build sort of a library infrastructure tool or method um that we",
    "start": "1429919",
    "end": "1435320"
  },
  {
    "text": "are going to use so what we're doing is and at that time we were essentially moving from tasks to Valley task Valley",
    "start": "1435320",
    "end": "1442340"
  },
  {
    "text": "task is basically a discriminated Union out of uh of a result that is available",
    "start": "1442340",
    "end": "1447460"
  },
  {
    "text": "or an i o bound operation that is going to be executed some people might be saying well we should be using value",
    "start": "1447460",
    "end": "1453260"
  },
  {
    "text": "tasks everywhere these days I mostly use value tasks when I have cases where it's",
    "start": "1453260",
    "end": "1458720"
  },
  {
    "text": "like a eight or nine out of 10 times I already have to match your last results and only in a few cases I'm actually",
    "start": "1458720",
    "end": "1464419"
  },
  {
    "text": "fetching out to higher Bond operations your mileage may vary and there are different ways to approach this I use",
    "start": "1464419",
    "end": "1470179"
  },
  {
    "text": "this simple rule here that I just talked about we had well we had already methods",
    "start": "1470179",
    "end": "1475700"
  },
  {
    "text": "that returned value tasks so our infrastructure tool also needs to return a value task and then what we do is we",
    "start": "1475700",
    "end": "1482059"
  },
  {
    "text": "accept T1 which is the state and that is going to be passed into this method and",
    "start": "1482059",
    "end": "1488240"
  },
  {
    "text": "we return a result because we have methods that return a result right that's what we're doing then we're changing the function delegate to accept",
    "start": "1488240",
    "end": "1494900"
  },
  {
    "text": "T1 and we add cancellation token and whatnot and we return a value task and",
    "start": "1494900",
    "end": "1501020"
  },
  {
    "text": "then we pass on line three we pass in the state into this method why is it generic well you can't use objects right",
    "start": "1501020",
    "end": "1507140"
  },
  {
    "text": "because if you're passing in int then you're going to be essentially a boxing the int to object and then you get",
    "start": "1507140",
    "end": "1513380"
  },
  {
    "text": "unnecessary allocations that's why that's why we use here a generic and then what we're going to do is we",
    "start": "1513380",
    "end": "1519799"
  },
  {
    "text": "just pass the state that we got from the outside into this operation method with the cancellation token the timeout and",
    "start": "1519799",
    "end": "1526340"
  },
  {
    "text": "everything and that's basically the basic infrastructure thing that we have to have in place and once we have that",
    "start": "1526340",
    "end": "1533120"
  },
  {
    "text": "we can build sort of additional methods on top of this library right we can now represent methods that do not return",
    "start": "1533120",
    "end": "1539480"
  },
  {
    "text": "anything because we have sort of this library that allows us to pass in method that returns something and what we can",
    "start": "1539480",
    "end": "1545840"
  },
  {
    "text": "do then is um we when we do not return anything we return valid tasks instead of valid task",
    "start": "1545840",
    "end": "1551960"
  },
  {
    "text": "of T resolve we still need to accept state because we need to make sure that",
    "start": "1551960",
    "end": "1557659"
  },
  {
    "text": "the state is always within the Lambda itself and I'm going to talk a little bit more about this then we have the",
    "start": "1557659",
    "end": "1564679"
  },
  {
    "text": "function delegate that returns a value task accesses the state and we pass in",
    "start": "1564679",
    "end": "1569840"
  },
  {
    "text": "the state from the outside and now we can leverage C sharp 9 has this Nifty feature that in the language that is",
    "start": "1569840",
    "end": "1576919"
  },
  {
    "text": "called Static Lambda so we can essentially call The Run operation method and we pass in the Lambda and we",
    "start": "1576919",
    "end": "1583820"
  },
  {
    "text": "attribute it with static async and what's going to happen is now the compiler ensures that within the curly",
    "start": "1583820",
    "end": "1590059"
  },
  {
    "text": "braces that we have essentially on line seven and line 11 we can only access",
    "start": "1590059",
    "end": "1595520"
  },
  {
    "text": "state that is already available within that Lambda so it's compiler in force",
    "start": "1595520",
    "end": "1600620"
  },
  {
    "text": "right and what we then do is on line 12 we pass in this state and the operation",
    "start": "1600620",
    "end": "1607039"
  },
  {
    "text": "so we basically package the state and the function into a value Tuple and then",
    "start": "1607039",
    "end": "1612140"
  },
  {
    "text": "we pass that as state essentially into the function right and then what we can do is on line eight we can essentially",
    "start": "1612140",
    "end": "1619580"
  },
  {
    "text": "then deconstruct that state which represents the state from the outside plus the operation and then on line 9 we",
    "start": "1619580",
    "end": "1626779"
  },
  {
    "text": "then call essentially the operation passing the state timeout cancellation token and everything and now we have no",
    "start": "1626779",
    "end": "1634100"
  },
  {
    "text": "access to state that is outside of the curly braces and now we have no closure allocations anymore in this piece of",
    "start": "1634100",
    "end": "1640640"
  },
  {
    "text": "code Okay then if we decompile it we can now see that we get the code that we wanted",
    "start": "1640640",
    "end": "1647120"
  },
  {
    "text": "to achieve by having this static caching thing in place right we have again our",
    "start": "1647120",
    "end": "1652640"
  },
  {
    "text": "already kind of familiar pattern that I talked about at the beginning with nine underscore underscore 16 right question",
    "start": "1652640",
    "end": "1659059"
  },
  {
    "text": "mark question mark equals and now we have a statically cached delegate and we",
    "start": "1659059",
    "end": "1664159"
  },
  {
    "text": "have we just got rid of two um Allo allocations and the thing is how can you actually",
    "start": "1664159",
    "end": "1671179"
  },
  {
    "text": "discover these types of allocations in in your code well there is one way you",
    "start": "1671179",
    "end": "1676220"
  },
  {
    "text": "can do it you can fire up a profiler and you can look for a sort of a display class or various action or function",
    "start": "1676220",
    "end": "1683000"
  },
  {
    "text": "delegate allocations and then you will see them lightening up and you can go",
    "start": "1683000",
    "end": "1688520"
  },
  {
    "text": "into the piece of code and then refactor them out or a more proactive way of doing it you can use tools like hip",
    "start": "1688520",
    "end": "1696020"
  },
  {
    "text": "allocation viewer in Rider or the HIPAA location analyzer in visual studio and that will proactively tell you when",
    "start": "1696020",
    "end": "1703100"
  },
  {
    "text": "you're writing the code that you have a closure allocation and then if it matters if the code is executed at scale",
    "start": "1703100",
    "end": "1709279"
  },
  {
    "text": "you can avoid it by using the tricks I just showed you and you might be",
    "start": "1709279",
    "end": "1714860"
  },
  {
    "text": "thinking yeah but I don't have fancy code like that I don't even gonna I'm not even gonna bother right but a very",
    "start": "1714860",
    "end": "1720980"
  },
  {
    "text": "good example is that you might stumble over as well as concurrent dictionary right concurrent dictionary has methods",
    "start": "1720980",
    "end": "1727340"
  },
  {
    "text": "like get or ads or add or update and they accept lambdas and they actually",
    "start": "1727340",
    "end": "1733580"
  },
  {
    "text": "added in the net runtime they added a sort of state-based overloads that pass",
    "start": "1733580",
    "end": "1738679"
  },
  {
    "text": "in a T1 and then you can apply the same trick because if you have code like that you also have closure allocations and if",
    "start": "1738679",
    "end": "1745159"
  },
  {
    "text": "your concurrent dictionary access happens on the hot path where it's executed hundreds of thousands of times",
    "start": "1745159",
    "end": "1750440"
  },
  {
    "text": "seconds you might have a closer allocations in your in your code as well that you can with a easy trick you can",
    "start": "1750440",
    "end": "1756500"
  },
  {
    "text": "get rid of but now you're you're maybe thinking Hmm but really all this",
    "start": "1756500",
    "end": "1761600"
  },
  {
    "text": "gymnastic just to get rid of two allocations why would I even care right and I brought sort of um something from",
    "start": "1761600",
    "end": "1769700"
  },
  {
    "text": "from my project so I work for a company called particular software and we have sort of a queuing abstraction library in",
    "start": "1769700",
    "end": "1776059"
  },
  {
    "text": "place that fetches messages from Azure service bus rapid mq sqs SNS whatever",
    "start": "1776059",
    "end": "1782380"
  },
  {
    "text": "and it internally it has sort of an engine we call it the pipeline execution",
    "start": "1782380",
    "end": "1787399"
  },
  {
    "text": "engine pipeline execution engine is the piece of code that is going to execute our customers code like we call it the",
    "start": "1787399",
    "end": "1794600"
  },
  {
    "text": "handlers and this piece of code needs to be highly optimized and fast because we're going to pump thousands and",
    "start": "1794600",
    "end": "1800059"
  },
  {
    "text": "thousands of messages a second in the data centers of the customer through this through this pipeline engine and I",
    "start": "1800059",
    "end": "1807020"
  },
  {
    "text": "we had closure allocations in there and I did some optimizations and as you can",
    "start": "1807020",
    "end": "1812539"
  },
  {
    "text": "see here we actually were able to increase the throughput of this pipeline",
    "start": "1812539",
    "end": "1818659"
  },
  {
    "text": "engine by 74 to 78 just by getting rid of the closure allocations depending on",
    "start": "1818659",
    "end": "1824840"
  },
  {
    "text": "the pipeline diff and if you want to know more about the pipe the optimizations the tricks that applied",
    "start": "1824840",
    "end": "1831500"
  },
  {
    "text": "there you can go to go.particular.net ndc-o-slow-23- Pipeline and there is a",
    "start": "1831500",
    "end": "1838159"
  },
  {
    "text": "blog post where you will also learn more about the pipeline but as you can see the allocations are also gone right so",
    "start": "1838159",
    "end": "1845419"
  },
  {
    "text": "this is by getting rid of all these allocations we are way way way way faster so it's five times faster than",
    "start": "1845419",
    "end": "1851840"
  },
  {
    "text": "before which is uh quite impressive um and by the way we did even more optimizations by also applying some of",
    "start": "1851840",
    "end": "1858860"
  },
  {
    "text": "these uh um unsafe trickeries that I quickly hinted at where where there is there be",
    "start": "1858860",
    "end": "1864020"
  },
  {
    "text": "dragons on the collection side of things where we essentially avoid the bound checks and we were able to squeeze out",
    "start": "1864020",
    "end": "1869720"
  },
  {
    "text": "another 20 of throughput improvement on on top of what you see here on the",
    "start": "1869720",
    "end": "1875419"
  },
  {
    "text": "screen uh lately um good then let's go to the next one under avoid excessive allocations pull",
    "start": "1875419",
    "end": "1882380"
  },
  {
    "text": "and reuse buffers and larger objects so the Azure service bus SDK I already",
    "start": "1882380",
    "end": "1888020"
  },
  {
    "text": "talked about it has this concept of log tokens they're basically glorified Goods right and they're coming from the",
    "start": "1888020",
    "end": "1893179"
  },
  {
    "text": "network over the aimqp protocol and then when we when we get it there was this",
    "start": "1893179",
    "end": "1898580"
  },
  {
    "text": "piece of code in place and um it's I'm showing it on line one where we have this array segment and there is this uh",
    "start": "1898580",
    "end": "1904760"
  },
  {
    "text": "gooit byte array and what it was doing here it allocated sort of a 16 byte",
    "start": "1904760",
    "end": "1910039"
  },
  {
    "text": "buffer and then it use buffer block copy to essentially copy the network segment",
    "start": "1910039",
    "end": "1916059"
  },
  {
    "text": "into that byte buffer and then it allocated aguit and so that means",
    "start": "1916059",
    "end": "1922399"
  },
  {
    "text": "whenever we're getting thousands and thousands measures of per second we're essentially allocating 16 bytes every",
    "start": "1922399",
    "end": "1928880"
  },
  {
    "text": "time for every message right that is a lot of allocations that are going to tremendously slow down essentially the",
    "start": "1928880",
    "end": "1935720"
  },
  {
    "text": "processing of those messages and they're unnecessary and at that time I was reading about the thing called array",
    "start": "1935720",
    "end": "1942440"
  },
  {
    "text": "pool who has heard of the array poolin.net a few so array pool is sort of a way that you can get get a raise",
    "start": "1942440",
    "end": "1951140"
  },
  {
    "text": "out of a pool and return it it's sort of like a car rental right when you're going to a car rental you say I need",
    "start": "1951140",
    "end": "1957020"
  },
  {
    "text": "your three people and you said I need I need a car that is can fit three people into the car and the car rental might",
    "start": "1957020",
    "end": "1963500"
  },
  {
    "text": "give you a four-seater car might give you a six-seater car depending on the availability and then you drive around",
    "start": "1963500",
    "end": "1969020"
  },
  {
    "text": "with your friends right have a good time in the car and once you're done you basically clean it or not clean it and",
    "start": "1969020",
    "end": "1975620"
  },
  {
    "text": "return it to the car rental that's exactly an array pool right but it just does that instead of renting cars it",
    "start": "1975620",
    "end": "1981679"
  },
  {
    "text": "rents you a race um and that's already available in the.net framework and I was like I can",
    "start": "1981679",
    "end": "1986720"
  },
  {
    "text": "use the array pool to optimize this piece of code and to get rid of this 16 byte allocation so I did that and I'm",
    "start": "1986720",
    "end": "1992960"
  },
  {
    "text": "not making this up by the way this really really happened that way so I introduced this and this I use this",
    "start": "1992960",
    "end": "1998179"
  },
  {
    "text": "array pool.shared um and then I rent a 16 byte array and by the way uh like I said it it you",
    "start": "1998179",
    "end": "2005860"
  },
  {
    "text": "might get 16 byte but you might get more it's just that essentially what you're telling it give me array an array that",
    "start": "2005860",
    "end": "2011620"
  },
  {
    "text": "can at least fit 16 bytes into it right that's the conceptual model that you have to think about and then the rest of",
    "start": "2011620",
    "end": "2018159"
  },
  {
    "text": "the code is almost the same I rent it and because I rented it I also need to be a good citizen I need to return my",
    "start": "2018159",
    "end": "2024340"
  },
  {
    "text": "car right to the car rental I return my array and return it back once once I'm done",
    "start": "2024340",
    "end": "2029559"
  },
  {
    "text": "and then I was like yes I got rid of another allocation the team will be happy and I was like hold on a second before I am embarrass myself I should",
    "start": "2029559",
    "end": "2037240"
  },
  {
    "text": "actually know whether this actually solved something I wrote The Benchmark right and then I looked at this and",
    "start": "2037240",
    "end": "2044380"
  },
  {
    "text": "compared the buffer and block copy version versus the buffer pool version and as you can see uh said trombone I",
    "start": "2044380",
    "end": "2051878"
  },
  {
    "text": "got rid of all the allocations so I was like yes but then I looked at the other number and was like okay 20",
    "start": "2051879",
    "end": "2058440"
  },
  {
    "text": "226 times slower than the original version and now the question is",
    "start": "2058440",
    "end": "2064419"
  },
  {
    "text": "is this a bad optimization well I would say it depends right you could say if",
    "start": "2064419",
    "end": "2070179"
  },
  {
    "text": "you are in a memory constrained environment where memory is really important this is an optimization you",
    "start": "2070179",
    "end": "2075339"
  },
  {
    "text": "can use to say I'm basically trading off throughput for memory right and you could use this technique to actually",
    "start": "2075339",
    "end": "2082000"
  },
  {
    "text": "save allocations even though the code is slower but actually you can actually do",
    "start": "2082000",
    "end": "2087398"
  },
  {
    "text": "better right and that's going to be the next rule for smaller local buffers",
    "start": "2087399",
    "end": "2092800"
  },
  {
    "text": "consider using the stack and what we have here is with the",
    "start": "2092800",
    "end": "2097839"
  },
  {
    "text": "introduction of c-sharp 7.3 there is was also this stack alloc keyword in spans",
    "start": "2097839",
    "end": "2103300"
  },
  {
    "text": "what you can do is you can stack allocate 16 bytes on essentially the",
    "start": "2103300",
    "end": "2108700"
  },
  {
    "text": "stack of the current method and what's pretty cool is the garbage collection is not really is not really involved",
    "start": "2108700",
    "end": "2114700"
  },
  {
    "text": "because whenever the method Returns the memory is just going to be freed up and that is really fast if you use that and",
    "start": "2114700",
    "end": "2121839"
  },
  {
    "text": "then you don't interfere with with the the GC I'm going to talk a little bit more about the span and read only span",
    "start": "2121839",
    "end": "2128859"
  },
  {
    "text": "and those types of things a little bit later but we can use this stacker lock and then we stack a lock 16 bytes and",
    "start": "2128859",
    "end": "2135040"
  },
  {
    "text": "then what we can do is we can then copy essentially the the bytes that we got we",
    "start": "2135040",
    "end": "2140079"
  },
  {
    "text": "can copy it into that span and then we can create a new grid and you might be thinking well but I've",
    "start": "2140079",
    "end": "2148480"
  },
  {
    "text": "read essentially all the grid Constructors and I know that there is a grid Constructor that allows you to pass",
    "start": "2148480",
    "end": "2154540"
  },
  {
    "text": "in a read-only span why are you even um copying the memory and do all that type of stuff",
    "start": "2154540",
    "end": "2160660"
  },
  {
    "text": "um so essentially because we have net standard in the Azure Service Plus SDK those those Constructor overloads that",
    "start": "2160660",
    "end": "2166780"
  },
  {
    "text": "accept the read-only span they're not available and and in at the time there",
    "start": "2166780",
    "end": "2172480"
  },
  {
    "text": "was also some buffer pooling around and the team figured out we need to copy the",
    "start": "2172480",
    "end": "2179320"
  },
  {
    "text": "memory over further iterations it actually turned out it's not necessary to copy the memory and I'm going to talk",
    "start": "2179320",
    "end": "2184720"
  },
  {
    "text": "about this whenever you can do not copy the memory because that's even more efficient I'm showing this here as a",
    "start": "2184720",
    "end": "2190900"
  },
  {
    "text": "demonstration and what's also really important here is this code is not really safe because grids are",
    "start": "2190900",
    "end": "2198160"
  },
  {
    "text": "represented in endingness and depending on the Andean in Indian environment the",
    "start": "2198160",
    "end": "2203500"
  },
  {
    "text": "the bytes are going to be in little ending or big Indian and if you're using a copy 2 this does not take in endiness",
    "start": "2203500",
    "end": "2211960"
  },
  {
    "text": "into account but for Block copy does actually take and this ending this into account so you have to be careful the",
    "start": "2211960",
    "end": "2218800"
  },
  {
    "text": "actual code that we did right into the Azure service was SK was way more",
    "start": "2218800",
    "end": "2223900"
  },
  {
    "text": "complex than what I'm showing here I'm showing this example sort of a demonstration that you can stack allocate and then copy memory into it",
    "start": "2223900",
    "end": "2231040"
  },
  {
    "text": "because it's conceptually simple but I want to make sure that you understand that that I I cheated a little bit here",
    "start": "2231040",
    "end": "2236800"
  },
  {
    "text": "on this on this slide okay let's have a look how we're doing now what we can see",
    "start": "2236800",
    "end": "2241960"
  },
  {
    "text": "is this version is 45 faster than the original version and all the allocations",
    "start": "2241960",
    "end": "2247780"
  },
  {
    "text": "are gone so we actually have managed to optimize the code in really neat ways",
    "start": "2247780",
    "end": "2254079"
  },
  {
    "text": "cool and another thing that I want to quickly hint at when you stack a look",
    "start": "2254079",
    "end": "2259599"
  },
  {
    "text": "you might be going to say oh stack color cool now I know this keyword I'm going to use it everywhere you have to be very",
    "start": "2259599",
    "end": "2265180"
  },
  {
    "text": "careful because one of the things that's going to happen is if you for example accept stuff from the outside that is",
    "start": "2265180",
    "end": "2272020"
  },
  {
    "text": "out out of your control you might get arbitrary stack allocated memory right",
    "start": "2272020",
    "end": "2277839"
  },
  {
    "text": "in various sizes and when you cross the when you allocate more memory then the",
    "start": "2277839",
    "end": "2283599"
  },
  {
    "text": "method stack has available guess what's going to happen things will explode right okay so be",
    "start": "2283599",
    "end": "2290440"
  },
  {
    "text": "very careful so you have to make sure that you only stack allocate within safe boundaries and there are a few",
    "start": "2290440",
    "end": "2296200"
  },
  {
    "text": "guidelines around in the uh the in the community so for example a good sort of",
    "start": "2296200",
    "end": "2301420"
  },
  {
    "text": "boundary is 256 or 512. it's not that they're still writing some guidelines",
    "start": "2301420",
    "end": "2307540"
  },
  {
    "text": "they're not entirely finalized but they want to make sure that you take this this home that this technique is good",
    "start": "2307540",
    "end": "2314380"
  },
  {
    "text": "can be applied but has to be applied in the right context okay good let's quickly summarize the rules",
    "start": "2314380",
    "end": "2321940"
  },
  {
    "text": "that we had under avoid excessive allocations there's I think at least twice before using link be aware of",
    "start": "2321940",
    "end": "2327880"
  },
  {
    "text": "closure allocations pool and reuse buffers for small local buffers consider using the stack I have three more that I",
    "start": "2327880",
    "end": "2334480"
  },
  {
    "text": "haven't showed here in the interest of time be aware of parameter overloads when you have methods that accept a sort",
    "start": "2334480",
    "end": "2339640"
  },
  {
    "text": "of parameter arrays unnecessary allocations where possible and feasible use value types but pay attention to",
    "start": "2339640",
    "end": "2345700"
  },
  {
    "text": "unnecessary boxing and I think Aaron is also going to talk about these types of things it's today I think tomorrow in",
    "start": "2345700",
    "end": "2353680"
  },
  {
    "text": "stock so also attend this stock is even going into more depth than I'm doing today and another trick to actually save",
    "start": "2353680",
    "end": "2360339"
  },
  {
    "text": "allocations is move allocations away from the hot path right that's a really neat trick so if you have a byte array",
    "start": "2360339",
    "end": "2366520"
  },
  {
    "text": "and you don't want use pooling you can you can allocate the byte array essentially away from the hot path and",
    "start": "2366520",
    "end": "2371859"
  },
  {
    "text": "if you know you only have a single thread that is going to be entering that method you can essentially reuse the",
    "start": "2371859",
    "end": "2377140"
  },
  {
    "text": "Same by terrain the override from from time to time with of course making sure",
    "start": "2377140",
    "end": "2382839"
  },
  {
    "text": "that you only read then what you actually have written but we're going to talk about that as well the last categories avoid unnecessary",
    "start": "2382839",
    "end": "2389200"
  },
  {
    "text": "copying of memory and I already talked a little bit about this span and span of T",
    "start": "2389200",
    "end": "2394240"
  },
  {
    "text": "and read only span of T right that essentially is conceptually is span is a",
    "start": "2394240",
    "end": "2400359"
  },
  {
    "text": "pointer to memory location and it can be any arbitrary memory can be unmanaged",
    "start": "2400359",
    "end": "2406540"
  },
  {
    "text": "Memory it can be managed memory you have a pointer and you have a length that determines how long essentially the",
    "start": "2406540",
    "end": "2413440"
  },
  {
    "text": "memory is that you want to access and for me conceptually and this is highly simplified it's actually more complex",
    "start": "2413440",
    "end": "2419260"
  },
  {
    "text": "than that but I consider more like a curtain right you basically have a chunk of memory and then you point to a",
    "start": "2419260",
    "end": "2425500"
  },
  {
    "text": "specific location of that memory and then they say well I have length 16 and then you basically pull in the curtain",
    "start": "2425500",
    "end": "2431920"
  },
  {
    "text": "so that you only see the memory that you want to access so it gives you safe boundaries around a memory and there is",
    "start": "2431920",
    "end": "2438460"
  },
  {
    "text": "also the other cousin of span it's called memory memory of T that's usually for a heapa allocate stuff again I'm",
    "start": "2438460",
    "end": "2445480"
  },
  {
    "text": "highly simplifying this there are talks of available that you can watch there like they go into an hour of the",
    "start": "2445480",
    "end": "2451599"
  },
  {
    "text": "difference between span and memory because in reality it's a bit a little bit more complex but I want to give you",
    "start": "2451599",
    "end": "2457960"
  },
  {
    "text": "a sort of a conceptual understanding of span and and memory and span is",
    "start": "2457960",
    "end": "2464440"
  },
  {
    "text": "available when you have methods that return uh T results or void right once",
    "start": "2464440",
    "end": "2469780"
  },
  {
    "text": "you actually have for example async stuff with Ace task task of the result value task you cannot use spans then you",
    "start": "2469780",
    "end": "2478240"
  },
  {
    "text": "have to essentially if you want use spent you have to refactor your code into sort of a synchronous path that",
    "start": "2478240",
    "end": "2483880"
  },
  {
    "text": "uses the span and into an asynchronous path then you can only use a memory of t or read-only memory of T so these are",
    "start": "2483880",
    "end": "2491020"
  },
  {
    "text": "sort of the the conceptual things that we have to take into account so I have two rules here so look for stream and",
    "start": "2491020",
    "end": "2498940"
  },
  {
    "text": "byte array usages that are copied or manipulated without using span and recently David Fowler made a tweet",
    "start": "2498940",
    "end": "2505359"
  },
  {
    "text": "apparently stream manipulations to array and stuff like that are still the highest causes of",
    "start": "2505359",
    "end": "2512920"
  },
  {
    "text": "allocations in the.net in many.net projects so look out for those and",
    "start": "2512920",
    "end": "2518680"
  },
  {
    "text": "replace existing data manipulation methods with newer span or memory based overload so over the time the net team",
    "start": "2518680",
    "end": "2525520"
  },
  {
    "text": "added more and more and more methods that essentially instead of accepting a byte array they accept now read-only",
    "start": "2525520",
    "end": "2531220"
  },
  {
    "text": "span or read-only memory and you should be using those overloads because then you can do a few Nifty tricks that I'm",
    "start": "2531220",
    "end": "2537400"
  },
  {
    "text": "going to talk about so the last example brings all these things a little bit together and it's a little bit more",
    "start": "2537400",
    "end": "2543579"
  },
  {
    "text": "complex it's going to be about event Hub so the event tops is sort of a streaming",
    "start": "2543579",
    "end": "2549820"
  },
  {
    "text": "service right where you can for example pull it push in your iot iot data as an",
    "start": "2549820",
    "end": "2555280"
  },
  {
    "text": "example your events into eventops and eventops has sort of a partitioned",
    "start": "2555280",
    "end": "2560859"
  },
  {
    "text": "partition publisher and the partition conceptualist is sort of when you for",
    "start": "2560859",
    "end": "2566619"
  },
  {
    "text": "example you have books in your bookshelf right and you want and then you want to basically take out sort the books they",
    "start": "2566619",
    "end": "2573520"
  },
  {
    "text": "want to say all the books with author a go into box a and all the books with",
    "start": "2573520",
    "end": "2578560"
  },
  {
    "text": "author that start with b going to box B and that is sort of partitioning where you for example partitioned by by the",
    "start": "2578560",
    "end": "2584920"
  },
  {
    "text": "author the first letter so the simplified version of partitioning and that partition key resolver has a",
    "start": "2584920",
    "end": "2591640"
  },
  {
    "text": "partition key hashing function internally and that hashing function figures out into what partition",
    "start": "2591640",
    "end": "2597520"
  },
  {
    "text": "essentially an event needs to go when using the event tops and that hashing",
    "start": "2597520",
    "end": "2602680"
  },
  {
    "text": "function is used on 30 to 40 percent on the hot path when customers that are",
    "start": "2602680",
    "end": "2607960"
  },
  {
    "text": "using this this publisher are publishing messages to the event tops and because",
    "start": "2607960",
    "end": "2613720"
  },
  {
    "text": "event tops as a streaming service should be like be able to ingest like tons and",
    "start": "2613720",
    "end": "2619240"
  },
  {
    "text": "tons of data right the the CPU that we're going to use as a as a publisher",
    "start": "2619240",
    "end": "2624460"
  },
  {
    "text": "is going to significantly impact the throughput against even eventops so and",
    "start": "2624460",
    "end": "2631660"
  },
  {
    "text": "that makes a non-trivial amount of CPU and memory that is going to be spent for no added value and I have here the",
    "start": "2631660",
    "end": "2637960"
  },
  {
    "text": "original version of the generate hash function and that hash function by the way is the hash",
    "start": "2637960",
    "end": "2643839"
  },
  {
    "text": "function that is also running behind the scenes and it has to be kept highly consistent across all the languages of",
    "start": "2643839",
    "end": "2650500"
  },
  {
    "text": "the Azure SDK and that's how it looked like and sometimes copying of memories not really really obvious you have to",
    "start": "2650500",
    "end": "2657400"
  },
  {
    "text": "look very closely and what you can see here this generate hash code function it takes a partition key right and the",
    "start": "2657400",
    "end": "2663280"
  },
  {
    "text": "partition key is output that comes from the outside so someone can put in one letter right and then the string is",
    "start": "2663280",
    "end": "2669099"
  },
  {
    "text": "pretty short someone can put in my name which is because I have swiss German Roots is already quite long right so",
    "start": "2669099",
    "end": "2674980"
  },
  {
    "text": "Daniel Marbach so that's going to mean it's going to allocate probably in relation to to that string",
    "start": "2674980",
    "end": "2681640"
  },
  {
    "text": "that I'm inputting so what we can say is that essentially depending on the input this method will probably allocate",
    "start": "2681640",
    "end": "2688839"
  },
  {
    "text": "various amounts of memory how do we know that well if you look closely we have this getbytes method and get bytes",
    "start": "2688839",
    "end": "2696579"
  },
  {
    "text": "already kind of hints at something is going to happen and bytes will be returned and because we use the method",
    "start": "2696579",
    "end": "2702579"
  },
  {
    "text": "and we can see it actually in line 11 that returns a byte array because it returns a byte array there cannot be any",
    "start": "2702579",
    "end": "2709300"
  },
  {
    "text": "pooling involved right because the.net runtime doesn't know what you're going to do with despite array maybe you",
    "start": "2709300",
    "end": "2715660"
  },
  {
    "text": "assign it to a static field right or maybe you're going to call it every time this method is going to be called here",
    "start": "2715660",
    "end": "2721540"
  },
  {
    "text": "it's going to be allocated every time this method is called and it told you 30 to 40 on the hot path right whenever we",
    "start": "2721540",
    "end": "2727900"
  },
  {
    "text": "publish we're going to essentially allocate a byte array array that is in relation to the input that came from the",
    "start": "2727900",
    "end": "2734500"
  },
  {
    "text": "outside from the partition key and that is going to be a ton of memory let's have a look how we can actually optimize",
    "start": "2734500",
    "end": "2740859"
  },
  {
    "text": "this and here I have the full version I'm going to zoom in so for for your",
    "start": "2740859",
    "end": "2746319"
  },
  {
    "text": "better understanding so the first thing that we do is we want to use this band-based overloads that I I showed you",
    "start": "2746319",
    "end": "2752859"
  },
  {
    "text": "in the rule use the span by its overload so we're going to turn this partition key that we get from the outside we turn",
    "start": "2752859",
    "end": "2758920"
  },
  {
    "text": "it in into a span and then we're going to apply a technique that I I call sort",
    "start": "2758920",
    "end": "2764980"
  },
  {
    "text": "of over renting and what we're going to do is we're going to use get Max byte count so there is a get byte count which",
    "start": "2764980",
    "end": "2772180"
  },
  {
    "text": "gives you an exact length of the string but we're not going to use that because we are not really interested in the",
    "start": "2772180",
    "end": "2778119"
  },
  {
    "text": "exact length of the string we just want an approximation that's already quite faster than essentially having to go",
    "start": "2778119",
    "end": "2784300"
  },
  {
    "text": "through all the chars in the string to figure out how long it is um we can just say hey tell me",
    "start": "2784300",
    "end": "2790540"
  },
  {
    "text": "approximately how long it is it's a simple math method that is going to take the length of this thing multiplied by",
    "start": "2790540",
    "end": "2796780"
  },
  {
    "text": "four and then we we have that and then what we're going to do is we're going to combine the two rules the stack",
    "start": "2796780",
    "end": "2803800"
  },
  {
    "text": "allocation right for small and local buffers we use stackalock for bigger ones we're going to use the array pool",
    "start": "2803800",
    "end": "2809680"
  },
  {
    "text": "so what we're doing is we Define an arbitrary stack limit here I I've chosen",
    "start": "2809680",
    "end": "2814859"
  },
  {
    "text": "256 because it's sort of safe value we could also have chosen 512 but",
    "start": "2814859",
    "end": "2821440"
  },
  {
    "text": "definitely something below one megabyte so and then we're going to say well if",
    "start": "2821440",
    "end": "2826780"
  },
  {
    "text": "the length is smaller than our stack limit we're going to stack allocate a memory on the stack of the maximum stack",
    "start": "2826780",
    "end": "2834220"
  },
  {
    "text": "limit so I'm over renting right I'm basically I'm saying hey give me more and yeah I'm going to further iterate on",
    "start": "2834220",
    "end": "2841300"
  },
  {
    "text": "this why this is actually faster than allocating a specific chunk of memory that has the exact size and then if",
    "start": "2841300",
    "end": "2848200"
  },
  {
    "text": "you're not in in that sort of Stack limit we're going to use the array pool so we're getting essentially memory from",
    "start": "2848200",
    "end": "2854980"
  },
  {
    "text": "the shared array pool and then what we're going to do is we're going to use a method it's also called get bytes but",
    "start": "2854980",
    "end": "2860920"
  },
  {
    "text": "this time we're essentially giving sort of the buffer that we allocated the hash",
    "start": "2860920",
    "end": "2865960"
  },
  {
    "text": "buffer we give it from the outside so use the span based overload that accepts that span of charge we pass it in which",
    "start": "2865960",
    "end": "2873520"
  },
  {
    "text": "is the partition key we pass in the buffer we're telling hey I'm owning this memory please use this memory right we",
    "start": "2873520",
    "end": "2880660"
  },
  {
    "text": "give it to the methods and then the method which is pretty cool will essentially fill it in plus it will also",
    "start": "2880660",
    "end": "2886240"
  },
  {
    "text": "tell us how many bytes it has written right and now what we can do is we know we have enough space to actually write",
    "start": "2886240",
    "end": "2893380"
  },
  {
    "text": "into we are we overrent it and then it writes into and says we might have 256",
    "start": "2893380",
    "end": "2899560"
  },
  {
    "text": "right and but it only wrote 16 bytes and it will tell us hey I wrote 16 bytes and",
    "start": "2899560",
    "end": "2905800"
  },
  {
    "text": "then what we can do is we can use the span slicing mechanism which is basically drawing in the curtain right and we can tell it hey slice it down to",
    "start": "2905800",
    "end": "2913480"
  },
  {
    "text": "essentially from zero to what you have written that's for example in the specific example 16 bytes and then we",
    "start": "2913480",
    "end": "2920440"
  },
  {
    "text": "pass that to the compute hash method method and then what we the compute half",
    "start": "2920440",
    "end": "2926319"
  },
  {
    "text": "hash method is sort of in the safe zone of only being able to access the that 16 byte memory in this the previous example",
    "start": "2926319",
    "end": "2933220"
  },
  {
    "text": "or only in the sliced memory right so that's important part and then if we were in the case where we actually got",
    "start": "2933220",
    "end": "2938980"
  },
  {
    "text": "the shared buffer what we then have to do is once we're done return the share buffer and you might be thinking but you",
    "start": "2938980",
    "end": "2945520"
  },
  {
    "text": "should probably be using try finally here right because you always need to return the buffer when you used it well",
    "start": "2945520",
    "end": "2951819"
  },
  {
    "text": "we looked at the error cases in this piece piece of code and we concluded we",
    "start": "2951819",
    "end": "2957099"
  },
  {
    "text": "couldn't come up with an error case where we would actually need a try finally so because this is performance",
    "start": "2957099",
    "end": "2962440"
  },
  {
    "text": "sensitive code we also took into account that try final will actually add additional method overhead we'll make",
    "start": "2962440",
    "end": "2968200"
  },
  {
    "text": "the method bigger so we actually avoid it to try finally here to increase the performance even even more",
    "start": "2968200",
    "end": "2975060"
  },
  {
    "text": "and by the way the documentation on the array pool also says you don't have to necessarily always return the memories",
    "start": "2975060",
    "end": "2982119"
  },
  {
    "text": "that you rented from the pool so that's an additional trade-off that you can take into account so what I'm",
    "start": "2982119",
    "end": "2987520"
  },
  {
    "text": "demonstrating here is when you do these types of performance optimizations you also have to essentially build up a",
    "start": "2987520",
    "end": "2993760"
  },
  {
    "text": "deeper understanding of the tools and libraries that you are using in order to really benefit",
    "start": "2993760",
    "end": "2998980"
  },
  {
    "text": "from from these optimizations good and then again we pass it to the",
    "start": "2998980",
    "end": "3005099"
  },
  {
    "text": "compute hash method as a read-only span and because it's not returning a task we",
    "start": "3005099",
    "end": "3011099"
  },
  {
    "text": "can actually use read-only span good and the last thing is I told you I'm",
    "start": "3011099",
    "end": "3016319"
  },
  {
    "text": "overrenting and what what is pretty cool is because I only get an approximation",
    "start": "3016319",
    "end": "3021900"
  },
  {
    "text": "that is faster because it's essentially all of one instead of O of n with the",
    "start": "3021900",
    "end": "3027180"
  },
  {
    "text": "get Max byte count I need to overrend but then I can apply this trick and it's on line one if you notice on the slides",
    "start": "3027180",
    "end": "3033599"
  },
  {
    "text": "we have to skip locals in it what we can do with skip locals in it we can essentially tell sort of the compiler to",
    "start": "3033599",
    "end": "3040920"
  },
  {
    "text": "not emit the skip locals [Music] operation and Skip locals operation",
    "start": "3040920",
    "end": "3048420"
  },
  {
    "text": "usually the.net runtime tries to be saved by default and what it does is when you ask it for a chunk of memory",
    "start": "3048420",
    "end": "3055260"
  },
  {
    "text": "it's going to clear the chunk of memory for you so that you have no garbage in there right but because",
    "start": "3055260",
    "end": "3062040"
  },
  {
    "text": "we and that's sorry that takes a number of CPU Cycles right and because we are",
    "start": "3062040",
    "end": "3068040"
  },
  {
    "text": "we know that we have are in a very controlled environment where we know exactly how much we are going to write",
    "start": "3068040",
    "end": "3074640"
  },
  {
    "text": "in that byte array it doesn't really matter when we get 256 bytes and those",
    "start": "3074640",
    "end": "3079740"
  },
  {
    "text": "256 bytes are basically because when we fill in 16 bytes we know",
    "start": "3079740",
    "end": "3085440"
  },
  {
    "text": "that we have written 16 bytes and the 16 bytes that are in there and the rest is chunk because we're going to slice in",
    "start": "3085440",
    "end": "3091559"
  },
  {
    "text": "and essentially focus on the specific memory and we only read that we are in the safe zone right so we can",
    "start": "3091559",
    "end": "3097559"
  },
  {
    "text": "essentially avoid this local image by giving this attribute to the method and",
    "start": "3097559",
    "end": "3103559"
  },
  {
    "text": "then it's going to be extremely fast so let's have a look if you were",
    "start": "3103559",
    "end": "3108599"
  },
  {
    "text": "actually really fast and if we look at and of course we have to think about various input sizes and to be able to",
    "start": "3108599",
    "end": "3115920"
  },
  {
    "text": "compare it and we also want to make sure that we are actually around a sort of the 256 boundaries as well right I chose",
    "start": "3115920",
    "end": "3122099"
  },
  {
    "text": "a few sort of real life examples of partition key faded into this method and",
    "start": "3122099",
    "end": "3127440"
  },
  {
    "text": "then we can see that we have now a 38 to 47 percent throughput Improvement and",
    "start": "3127440",
    "end": "3133319"
  },
  {
    "text": "all the allocations are gone in this in this method okay so as a quick recap these are the",
    "start": "3133319",
    "end": "3141480"
  },
  {
    "text": "rules uh look for streaming byte array usages that are copied or manipulated without using spanner memory replace",
    "start": "3141480",
    "end": "3147540"
  },
  {
    "text": "existing data manipulation methods with newer span or memory based variants and I haven't talked about this one but",
    "start": "3147540",
    "end": "3153240"
  },
  {
    "text": "watch out for immutable read-only data that is copied when the data is immutable read-only you shouldn't be",
    "start": "3153240",
    "end": "3159000"
  },
  {
    "text": "copying it around right because that's an easy way to essentially gain throughput cool um if you want to take a",
    "start": "3159000",
    "end": "3167339"
  },
  {
    "text": "picture sort of as a reference point I have this gigantic slide with all the",
    "start": "3167339",
    "end": "3172740"
  },
  {
    "text": "rules that I've shown you today so that you can take it away I also have a link",
    "start": "3172740",
    "end": "3178740"
  },
  {
    "text": "to my slides towards the end of the talk if you're interested and this is the",
    "start": "3178740",
    "end": "3184559"
  },
  {
    "text": "second part of the rules that I just talked talked about and let's go to wrap",
    "start": "3184559",
    "end": "3192000"
  },
  {
    "text": "this thing up so I wanna I want to talk a little bit about the",
    "start": "3192000",
    "end": "3198420"
  },
  {
    "text": "caveats that I mentioned at the beginning so do not go and try to apply these rules",
    "start": "3198420",
    "end": "3205260"
  },
  {
    "text": "everywhere like I said at the beginning so when you have expensive IO bound",
    "start": "3205260",
    "end": "3210540"
  },
  {
    "text": "things in your code like database calls Entity framework lazy loading and stuff",
    "start": "3210540",
    "end": "3216240"
  },
  {
    "text": "like that or database queries that take hundreds of milliseconds because you",
    "start": "3216240",
    "end": "3221460"
  },
  {
    "text": "haven't optimized the query or HTTP client stuff that is slow as hell right",
    "start": "3221460",
    "end": "3227400"
  },
  {
    "text": "then tweak those expensive IO bound path first before you even go to think about",
    "start": "3227400",
    "end": "3233400"
  },
  {
    "text": "optimizing your link code and your array allocation stuff and and whatnot because",
    "start": "3233400",
    "end": "3238940"
  },
  {
    "text": "then you're going to have like 10x 100x improvements by optimizing expensive i o",
    "start": "3238940",
    "end": "3246720"
  },
  {
    "text": "bound paths right but once you are done optimizing those those things and your",
    "start": "3246720",
    "end": "3252599"
  },
  {
    "text": "code is executed at scale then you can actually combine the rules and the practices that I've shown here today",
    "start": "3252599",
    "end": "3259020"
  },
  {
    "text": "with with the already tweaked codepath and then you can get amazing benefits",
    "start": "3259020",
    "end": "3264720"
  },
  {
    "text": "out of it and sometimes what I also talked with Aaron recently about this",
    "start": "3264720",
    "end": "3270839"
  },
  {
    "text": "I'm a believer that when you have a piece of code first try to optimize the existing piece of code until you reach",
    "start": "3270839",
    "end": "3277680"
  },
  {
    "text": "essentially the boundaries of you can no longer optimize this piece of code because while you're doing this exercise",
    "start": "3277680",
    "end": "3283619"
  },
  {
    "text": "you learn a ton about the assumptions and all the things that are in place for this piece of code and that what you",
    "start": "3283619",
    "end": "3290579"
  },
  {
    "text": "learn will also significantly influence how you are going to redesign later on",
    "start": "3290579",
    "end": "3296099"
  },
  {
    "text": "this piece of code when you actually find out well we have tweaked it but it's still lightening up it's still",
    "start": "3296099",
    "end": "3301200"
  },
  {
    "text": "going to be a performance hog we need to further optimize it you can take all these key learnings from these",
    "start": "3301200",
    "end": "3306599"
  },
  {
    "text": "optimizations and fit that into your ideas how to redesign this code so I I",
    "start": "3306599",
    "end": "3311819"
  },
  {
    "text": "think this is a hugely valuable exercise and just to give you sort of a perspective of all the performance",
    "start": "3311819",
    "end": "3318780"
  },
  {
    "text": "optimizations that I've contributed to the Azure Service Plus SDK and here with",
    "start": "3318780",
    "end": "3324660"
  },
  {
    "text": "the event tops if the partition key optimization some other optimizations have I have done they have they went",
    "start": "3324660",
    "end": "3330839"
  },
  {
    "text": "they're now adding up to eight percent throughput improvements in terms of publishing performance eight percent and",
    "start": "3330839",
    "end": "3338280"
  },
  {
    "text": "up to three to four percent in terms of receiving improvements with eventops right so who wouldn't want to have like",
    "start": "3338280",
    "end": "3345119"
  },
  {
    "text": "an eight percent faster car for free right because once you up update essentially the Azure service process",
    "start": "3345119",
    "end": "3350760"
  },
  {
    "text": "SDK that bumps to the versions that have these optimizations you get an eight percent faster car which is pretty",
    "start": "3350760",
    "end": "3357180"
  },
  {
    "text": "amazing except I'm only allowed to drive a Kia seat so",
    "start": "3357180",
    "end": "3362220"
  },
  {
    "text": "what's a difficult conversation with my wife but but anyway so but what a one of",
    "start": "3362220",
    "end": "3368700"
  },
  {
    "text": "the drive home is essentially right um it's really important for us as Engineers coders whatever you want to",
    "start": "3368700",
    "end": "3374339"
  },
  {
    "text": "call yourself right that we essentially pay close attention to the assumptions of the piece of code figure out whether",
    "start": "3374339",
    "end": "3380579"
  },
  {
    "text": "it's execute the scale figure out whether it's worth investing more time essentially to optimize it and if the",
    "start": "3380579",
    "end": "3386760"
  },
  {
    "text": "answer is no then leave it as is leave your beloved linky code in there and all the allocations because it really",
    "start": "3386760",
    "end": "3392579"
  },
  {
    "text": "doesn't matter but where it does you can apply all the tricks that I've showed you today to the code and make it even",
    "start": "3392579",
    "end": "3399240"
  },
  {
    "text": "faster cool um that's it I have here a QR code you",
    "start": "3399240",
    "end": "3404640"
  },
  {
    "text": "can go to you can scan the QR codes you can go up to the GitHub repository um there's github.com",
    "start": "3404640",
    "end": "3411020"
  },
  {
    "text": "performance tricks Azure SDK um I wish you a great rest of your day",
    "start": "3411020",
    "end": "3416880"
  },
  {
    "text": "you can also reach out to me at Daniel Marbach on Twitter or daniel.marbach",
    "start": "3416880",
    "end": "3422300"
  },
  {
    "text": "tickle.net I will also be at the particular booth in the exhibition area for today if you have any more questions",
    "start": "3422300",
    "end": "3430819"
  },
  {
    "text": "I also have business cards here if you want to send me an email and send me",
    "start": "3430819",
    "end": "3436920"
  },
  {
    "text": "some suggestions how I can make this talk better or if you have questions feel free to reach out and I think I can",
    "start": "3436920",
    "end": "3443880"
  },
  {
    "text": "also take one question right now two more minutes any questions",
    "start": "3443880",
    "end": "3450558"
  },
  {
    "text": "no one",
    "start": "3450720",
    "end": "3454460"
  },
  {
    "text": "oh okay so the question is how much reusability I guess about these patterns",
    "start": "3458400",
    "end": "3463500"
  },
  {
    "text": "and stuff like that you can leverage when you do these types of performance improvements for me the reason",
    "start": "3463500",
    "end": "3469099"
  },
  {
    "text": "reusability is essentially the patterns that I talked here right but the actual applications of can I use array pooling",
    "start": "3469099",
    "end": "3477300"
  },
  {
    "text": "should I use stack a lock and these types of things that's specific essentially for a piece of uh for a",
    "start": "3477300",
    "end": "3484079"
  },
  {
    "text": "piece of code but in in terms of the patterns and the practices there is a lot of reusability and of course one",
    "start": "3484079",
    "end": "3491599"
  },
  {
    "text": "reusability is if you have sort of a shared library right you can actually",
    "start": "3491599",
    "end": "3496740"
  },
  {
    "text": "put sort of infrastructure code that solves some of these problems into that the shared libraries right or if in our",
    "start": "3496740",
    "end": "3503400"
  },
  {
    "text": "case when you have um something like answer response right essentially those",
    "start": "3503400",
    "end": "3509280"
  },
  {
    "text": "optimizations are in the shared library and then everyone that uses the the library gets those optimizations for",
    "start": "3509280",
    "end": "3515640"
  },
  {
    "text": "free so there is reuse potential yeah cool thank you very much and have a great",
    "start": "3515640",
    "end": "3522480"
  },
  {
    "text": "rest of your day",
    "start": "3522480",
    "end": "3525140"
  }
]