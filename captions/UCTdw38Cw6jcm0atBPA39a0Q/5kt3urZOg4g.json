[
  {
    "start": "0",
    "end": "127000"
  },
  {
    "text": "well welcome everyone as you can see there's a lot of people missing out and you're the lucky ones that get to",
    "start": "1360",
    "end": "6480"
  },
  {
    "text": "improve your life with JavaScript so I'm Mark vulgan I'm from St Louis Missouri",
    "start": "6480",
    "end": "11799"
  },
  {
    "text": "in the US and I work at a company called object Computing and we do all kinds of things we do Consulting and training and",
    "start": "11799",
    "end": "19480"
  },
  {
    "text": "we work on open source software probably the most well-known open source software that we are in uh kind of in charge of",
    "start": "19480",
    "end": "27359"
  },
  {
    "text": "that you might have heard of is Grails it's a framework for building web apps in Java and I have some literature up at",
    "start": "27359",
    "end": "34440"
  },
  {
    "text": "the front here that you can take at the end if you'd like information about the training we offer and our Consulting",
    "start": "34440",
    "end": "39680"
  },
  {
    "text": "Services there's some pens and stickers uh so help yourselves to that um so I",
    "start": "39680",
    "end": "46239"
  },
  {
    "text": "would say that uh there are three tools that have really improved My Life as a",
    "start": "46239",
    "end": "51399"
  },
  {
    "text": "JavaScript developer I've been working primarily in JavaScript for the last seven years before that I was a Java",
    "start": "51399",
    "end": "57760"
  },
  {
    "text": "developer for 15 years and many other languages before that but the three tools that have really made a big",
    "start": "57760",
    "end": "63600"
  },
  {
    "text": "difference for me are eslint for checking my code for errors prier for",
    "start": "63600",
    "end": "68799"
  },
  {
    "text": "formatting my code I highly recommend that and then the third of course is flow and so we're going to get into that",
    "start": "68799",
    "end": "75080"
  },
  {
    "text": "today before I do I want to say a word about my slides they're going to look different than all the other slides",
    "start": "75080",
    "end": "81840"
  },
  {
    "text": "you've seen here and you might think to yourself what's the deal did I not get the message that today when you make a",
    "start": "81840",
    "end": "88799"
  },
  {
    "text": "presentation you're supposed to to have slides that have a picture and five words and when you get the slides later",
    "start": "88799",
    "end": "96680"
  },
  {
    "text": "you can't decipher them they're meaningless to you my slides are not like that my slides will help you learn",
    "start": "96680",
    "end": "102479"
  },
  {
    "text": "how to use flow and if you give them to a coworker that didn't attend the talk they'll be able to learn flow from these",
    "start": "102479",
    "end": "109040"
  },
  {
    "text": "slides so that means that they're quite dense uh but a lot of good information that you can get later and that URL in",
    "start": "109040",
    "end": "115840"
  },
  {
    "text": "the corner is real important if you go to github.com I'm MV and I have a repo called flow material",
    "start": "115840",
    "end": "123399"
  },
  {
    "text": "all of these slides are there so you don't have to take a lot of notes while you're listening uh so the talk is",
    "start": "123399",
    "end": "129080"
  },
  {
    "start": "127000",
    "end": "127000"
  },
  {
    "text": "broken up into these parts we're going to go through an introduction to flow and talk about how you specify types in",
    "start": "129080",
    "end": "134920"
  },
  {
    "text": "flow the flow server which is the brains behind it and then we'll walk through an example of setting up a project that",
    "start": "134920",
    "end": "141800"
  },
  {
    "text": "uses flow uh there's so much I could say I really need 2 hours to talk about this",
    "start": "141800",
    "end": "147319"
  },
  {
    "text": "and so I've included some bonus slides at the end uh for additional things that you might have questions on and I also wrote an",
    "start": "147319",
    "end": "153920"
  },
  {
    "text": "article about this recently and there's a URL to that article there that you can get when you get a copy of the slides uh",
    "start": "153920",
    "end": "160760"
  },
  {
    "start": "160000",
    "end": "160000"
  },
  {
    "text": "so uh static versus Dynamic so types are specifying the conditions under which",
    "start": "160760",
    "end": "166440"
  },
  {
    "text": "your code is going to run things about the functions and the classes in your code and in a static language of course",
    "start": "166440",
    "end": "172680"
  },
  {
    "text": "you find out about the errors in your code when you compile it in a dynamic language you typically find out when you",
    "start": "172680",
    "end": "178040"
  },
  {
    "text": "run the code which isn't ideal and so we have these type checking tools that you can use with Dynamic languages and in",
    "start": "178040",
    "end": "184080"
  },
  {
    "text": "the world of JavaScript there are two big ones there's typescript and there is flow so why should you use types well",
    "start": "184080",
    "end": "191480"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "there are lots of reasons one is that you want to find the errors before you run your code that's more convenient uh",
    "start": "191480",
    "end": "197120"
  },
  {
    "text": "the other is that it gives good documentation about your code when someone else is reading it they know what you were expecting them to pass to",
    "start": "197120",
    "end": "203400"
  },
  {
    "text": "this function or they know what methods this class provides and the types that they expect it increases your confidence",
    "start": "203400",
    "end": "210280"
  },
  {
    "text": "if you need to do refactoring on the code and boy did I hit that big recently I'm working on what has become a fairly",
    "start": "210280",
    "end": "216599"
  },
  {
    "text": "big project and I had to do a big refactoring and I just think it would have been way more difficult if we",
    "start": "216599",
    "end": "222120"
  },
  {
    "text": "hadn't been using flow because it found lots of errors that I was making as I attempted to do the refactoring it",
    "start": "222120",
    "end": "229120"
  },
  {
    "text": "removes the need for you to write code that checks types sometimes people do that when they're not using a tool like",
    "start": "229120",
    "end": "235879"
  },
  {
    "text": "this they'll write a function that the first thing it does is it might use type of and check what kind of uh parameter",
    "start": "235879",
    "end": "242040"
  },
  {
    "text": "it received and then you don't have to write unit tests that are all about testing types you get to skip that part",
    "start": "242040",
    "end": "249040"
  },
  {
    "text": "another reason is that there's probably a plugin for your editor or IDE that",
    "start": "249040",
    "end": "254159"
  },
  {
    "text": "supports these tools either typescript or flow and I highly recommend if you're going to use one of these that you take",
    "start": "254159",
    "end": "260000"
  },
  {
    "text": "the time to set up your editor or ID so that it can help you with this and show you the errors uh with all that said all",
    "start": "260000",
    "end": "267120"
  },
  {
    "start": "264000",
    "end": "264000"
  },
  {
    "text": "these good reasons that you want to use types there are also reasons that you shouldn't and one of them is that it's",
    "start": "267120",
    "end": "272919"
  },
  {
    "text": "going to take some time to get used to specifying the types in your code and mastering how to do that it also is",
    "start": "272919",
    "end": "279320"
  },
  {
    "text": "going to make your code more verbose which is kind of distracting while you're trying to understand uh what is",
    "start": "279320",
    "end": "285400"
  },
  {
    "text": "happening and it will hamper you if you're trying to create a prototype or you're doing a rapid development it's",
    "start": "285400",
    "end": "291560"
  },
  {
    "text": "going to slow you down and initially when you use a tool like this you might feel like you're spending more time",
    "start": "291560",
    "end": "298080"
  },
  {
    "text": "trying to satisfy the tool than you are getting some coding done but after you",
    "start": "298080",
    "end": "303479"
  },
  {
    "text": "use it for a while and you get a bit better at applying the types and you have to do some refactoring the tables",
    "start": "303479",
    "end": "310000"
  },
  {
    "text": "kind of turn and you start to see oh this is why I put in that effort it's helping me a lot now uh so you want to",
    "start": "310000",
    "end": "316639"
  },
  {
    "text": "use types when your application is large or complex or it's a critical app you're working with a team of developers you're",
    "start": "316639",
    "end": "323360"
  },
  {
    "text": "expecting this code to have a long lifetime if none of those apply to what you're doing then maybe you shouldn't",
    "start": "323360",
    "end": "329039"
  },
  {
    "text": "use type right now and as we're going to see one of the nice things about flow is that it lets you gradually add types to",
    "start": "329039",
    "end": "336000"
  },
  {
    "start": "332000",
    "end": "332000"
  },
  {
    "text": "your code so you can take an existing app add the use of flow and it won't do",
    "start": "336000",
    "end": "341400"
  },
  {
    "text": "anything to you at first and then you have to annotate your files to say this is a file that I'd like you to check and",
    "start": "341400",
    "end": "348120"
  },
  {
    "text": "so we're going to see that syntax in just a bit so this is a tool that comes from Facebook and it catches lots of",
    "start": "348120",
    "end": "354800"
  },
  {
    "text": "Errors without you even adding types you do have to annotate the file and say say I want flow to run on this but you don't",
    "start": "354800",
    "end": "361759"
  },
  {
    "text": "have to specify the types of function parameters for example and so it uses",
    "start": "361759",
    "end": "367199"
  },
  {
    "text": "type inference and it's really good at following the flow throughout your application to find that this variable",
    "start": "367199",
    "end": "374280"
  },
  {
    "text": "got passed to this function and it did some operation on that and then it passed it to this function and to this",
    "start": "374280",
    "end": "380120"
  },
  {
    "text": "function and it traces all of that and finds errors without you even having to add any types you can gradually add them",
    "start": "380120",
    "end": "388560"
  },
  {
    "text": "it has support for all the new es6 and Beyond features and we get a lot of",
    "start": "388560",
    "end": "394280"
  },
  {
    "text": "these things from Babel so you might be using JavaScript features that aren't finalized yet but it turns out that flow",
    "start": "394280",
    "end": "402520"
  },
  {
    "text": "can support a lot of those now and so you can type check that newer code and of course it has support for react and",
    "start": "402520",
    "end": "408599"
  },
  {
    "text": "jsx since it comes from Facebook but flow is not just for use and react",
    "start": "408599",
    "end": "414639"
  },
  {
    "start": "414000",
    "end": "414000"
  },
  {
    "text": "applications I should say a bit about typescript of course this is a competing tool from mic moft and it is a superet",
    "start": "414639",
    "end": "422280"
  },
  {
    "text": "of the JavaScript language and this is really a key difference typescript is doing more than just giving you types",
    "start": "422280",
    "end": "428840"
  },
  {
    "text": "it's adding new language features and for some people that might seem like a good thing and I think that it is as",
    "start": "428840",
    "end": "436400"
  },
  {
    "text": "long as those features end up getting standardized as part of the JavaScript language but if they don't if they're",
    "start": "436400",
    "end": "441879"
  },
  {
    "text": "subtly different than what JavaScript lands on then now you're coding in this thing that isn't quite JavaScript for a",
    "start": "441879",
    "end": "448840"
  },
  {
    "text": "lot of people I I think they want to stick with JavaScript they're comfortable with the pace at which tc39",
    "start": "448840",
    "end": "454440"
  },
  {
    "text": "is adding new features and they want to stay with JavaScript and they just want to add types and so that's what you get",
    "start": "454440",
    "end": "461000"
  },
  {
    "text": "when you go with flow instead of typescript and I have a a box up here to talk about Paul Graham's blub Paradox",
    "start": "461000",
    "end": "468520"
  },
  {
    "text": "some of you may have heard of this this is from an article he wrote quite a while ago I've got a link to it there",
    "start": "468520",
    "end": "473919"
  },
  {
    "text": "and the main idea that he was proposing here is that if you consider programming",
    "start": "473919",
    "end": "479120"
  },
  {
    "text": "language there's a spectrum of features there's very simple languages that are easy to learn and just do a few things",
    "start": "479120",
    "end": "485560"
  },
  {
    "text": "and then there's very complicated languages with lots of features you might put hcll up there in that category",
    "start": "485560",
    "end": "492240"
  },
  {
    "text": "and then there's everything in between and it's your natural tendency to look at the language that you like and to say",
    "start": "492240",
    "end": "499840"
  },
  {
    "text": "there's all these things below me in the Spectrum I can't use those because they don't have all the features that are",
    "start": "499840",
    "end": "505639"
  },
  {
    "text": "really important and all those languages above me why do they have that stuff it's just confusing and I don't need",
    "start": "505639",
    "end": "512039"
  },
  {
    "text": "that that's the blub Paradox where you rationalize why you like your language",
    "start": "512039",
    "end": "517360"
  },
  {
    "text": "and that sort of applies to this comparison between flow and typescript a flow person might say all that extra",
    "start": "517360",
    "end": "524279"
  },
  {
    "text": "stuff that typescript adds I don't need that but somebody that likes typescript would say can't use flow because I need",
    "start": "524279",
    "end": "530760"
  },
  {
    "text": "those extra features that Microsoft added so that's an interesting point of comparison uh so both of these",
    "start": "530760",
    "end": "536880"
  },
  {
    "text": "typescript and flow they comp they they give give you JavaScript code actually in the case of flow you're not changing",
    "start": "536880",
    "end": "542839"
  },
  {
    "text": "it you're always working in JavaScript but typescript compiles down to JavaScript and the way that you indicate",
    "start": "542839",
    "end": "548800"
  },
  {
    "text": "that a file is using typescript is you change the file extension tots and then it does two things for you it does",
    "start": "548800",
    "end": "555560"
  },
  {
    "text": "typechecking and it does the transpilation from the typ typescript code into JavaScript that might seem",
    "start": "555560",
    "end": "563399"
  },
  {
    "text": "like a good thing that it's doing both of them for you but I actually think it's a bit of a downside and that's",
    "start": "563399",
    "end": "568519"
  },
  {
    "text": "because if you go with flow and have it just do the typechecking for you then you can use Babel to do the transpiling",
    "start": "568519",
    "end": "576160"
  },
  {
    "text": "and why would you prefer that well because lots of people write Babel plugins to do fancy things including",
    "start": "576160",
    "end": "583240"
  },
  {
    "text": "supporting features that are just at stage one in tc39 and if you want to use",
    "start": "583240",
    "end": "588839"
  },
  {
    "text": "those somebody has written a babble plugin and you can start playing with that now and so I think that's an",
    "start": "588839",
    "end": "594279"
  },
  {
    "text": "advantage of using flow that you can stick with using Babel and get to all those new things",
    "start": "594279",
    "end": "601320"
  },
  {
    "text": "sooner another point of comparison is there support for specifying types for",
    "start": "602600",
    "end": "608000"
  },
  {
    "start": "603000",
    "end": "603000"
  },
  {
    "text": "thirdparty libraries that you might might want to use a very common example is low Dash It's a utility library that",
    "start": "608000",
    "end": "615360"
  },
  {
    "text": "a lot of JavaScript developers use and you'd like it to be the case that if you're using typescript or flow that",
    "start": "615360",
    "end": "621240"
  },
  {
    "text": "somebody has created type definitions for that so that you can check your use of that library and any other libraries",
    "start": "621240",
    "end": "628480"
  },
  {
    "text": "and so in the typescript World they have this thing called definitely typed and there's a website you can go to and you",
    "start": "628480",
    "end": "634040"
  },
  {
    "text": "can see that they have lots of definitions for thirdparty libraries and the last time I checked it was over",
    "start": "634040",
    "end": "639639"
  },
  {
    "text": "2,000 that they had specified there the uh corresponding thing in the world of",
    "start": "639639",
    "end": "644920"
  },
  {
    "text": "flow is called flow typed and it only had 570 and so that's a big difference and",
    "start": "644920",
    "end": "652200"
  },
  {
    "text": "kind of a sad thing I hope that it uh catches up eventually actually uh it's",
    "start": "652200",
    "end": "657680"
  },
  {
    "text": "made big progress to make it to 570 fortunately there is a tool that can",
    "start": "657680",
    "end": "662880"
  },
  {
    "text": "read in a typescript type definition file and convert it to one that works with flow it's not foolproof uh but at",
    "start": "662880",
    "end": "670560"
  },
  {
    "text": "least it gets you part of the way there but still I would say this is a point in typescripts favor that it has better",
    "start": "670560",
    "end": "676040"
  },
  {
    "text": "support for type definitions of thirdparty libraries both of them flow and typescript have good editor and IDE",
    "start": "676040",
    "end": "683079"
  },
  {
    "text": "integration and another good point here is that flow wants to remain compatible",
    "start": "683079",
    "end": "688160"
  },
  {
    "text": "with the typescript Sy tax and so it turns out that if you start to use flow and you decide 6 months later hey I",
    "start": "688160",
    "end": "694320"
  },
  {
    "text": "think maybe I want to use typescript instead it's not really that hard to switch over because their syntax is so",
    "start": "694320",
    "end": "700519"
  },
  {
    "start": "700000",
    "end": "700000"
  },
  {
    "text": "similar so if you want to install flow it's very easy the trickiest thing is to remember that you shouldn't install flow",
    "start": "700519",
    "end": "707000"
  },
  {
    "text": "you should install flow Das bin and uh you can install that so that it's globally available and then you can ask",
    "start": "707000",
    "end": "713120"
  },
  {
    "text": "what version of flow you're using and you can ask for help um this is not really the way you want to use it this",
    "start": "713120",
    "end": "719519"
  },
  {
    "text": "is more for experimenting really you want to set it up to be a part of your project and we'll show how to do that",
    "start": "719519",
    "end": "725240"
  },
  {
    "text": "toward the end of my talk so then when you want to use flow remember I said you have to annotate your files to let it",
    "start": "725240",
    "end": "731680"
  },
  {
    "start": "726000",
    "end": "726000"
  },
  {
    "text": "know which one should be type checked and you have to do that by adding a comment at the top uh SL slash atlow is",
    "start": "731680",
    "end": "738040"
  },
  {
    "text": "the simplest way you can use the slashstar kind of comment as well and any files that don't have that won't get",
    "start": "738040",
    "end": "743720"
  },
  {
    "text": "type checked it's easy to forget that uh we forgot that in one of the files our",
    "start": "743720",
    "end": "749560"
  },
  {
    "text": "project and just discovered it last week and of course when we added that some of those types were getting exported and",
    "start": "749560",
    "end": "756240"
  },
  {
    "text": "now all these things are getting checked that weren't getting checked before and so we had like an hour's worth of work",
    "start": "756240",
    "end": "761839"
  },
  {
    "text": "to do to fix things that we would have fixed earlier if we wouldn't have skipped that file so keep that in mind",
    "start": "761839",
    "end": "767519"
  },
  {
    "text": "you got to mark all the files you wanted to check uh there is a way that you can tell flow just check this one file don't",
    "start": "767519",
    "end": "774360"
  },
  {
    "text": "check my whole project and you use that check contents option on Flow you might want want to create an alias that does",
    "start": "774360",
    "end": "781240"
  },
  {
    "text": "that for you but really you want to run it on all the files in your project and we'll get to that later when you're",
    "start": "781240",
    "end": "786920"
  },
  {
    "start": "785000",
    "end": "785000"
  },
  {
    "text": "getting started it might be useful for you to ask flow to suggest what it thinks the type should be and so you can",
    "start": "786920",
    "end": "792560"
  },
  {
    "text": "run flow suggest and give it a path to a Javascript file and it will output its suggestions and so if you look up here",
    "start": "792560",
    "end": "799440"
  },
  {
    "text": "you can see that my original code right there rectangle area computes the area of a rectangle and then the output here",
    "start": "799440",
    "end": "806639"
  },
  {
    "text": "tells me that width is probably a number and Height's probably a number and this function probably returns a number okay",
    "start": "806639",
    "end": "814040"
  },
  {
    "text": "and then here where I use it what kind of variable is area and it says I think that's a number so this is a really",
    "start": "814040",
    "end": "820639"
  },
  {
    "text": "simple case it can uh do more complicated suggestions than that but it's nice that it gives you a head start",
    "start": "820639",
    "end": "826760"
  },
  {
    "text": "on that well once all your type errors are gone now you'd like to run your code",
    "start": "826760",
    "end": "833320"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "and as you might imagine nodejs doesn't know about flow and your web browser doesn't know about flow so you've got to",
    "start": "833320",
    "end": "840360"
  },
  {
    "text": "strip the types out of your code we're going to talk about a couple of ways to do that but for right now I want to",
    "start": "840360",
    "end": "845839"
  },
  {
    "text": "focus on doing this just for code that I'm going to run with node and so what I want to do is install this thing called",
    "start": "845839",
    "end": "852759"
  },
  {
    "text": "flow-- types and that's going to install two things for me flow Das node and flow Das remove Das types and so the first",
    "start": "852759",
    "end": "860199"
  },
  {
    "text": "one flow node that's just a replacement for the node command and before it tries to execute your code it removes the",
    "start": "860199",
    "end": "866320"
  },
  {
    "text": "types so that's real easy and then the second one is when you actually want to generate a new source file that has the",
    "start": "866320",
    "end": "872600"
  },
  {
    "text": "types removed and so you run flow remove types and give it the file you want to run on and direct the output into some",
    "start": "872600",
    "end": "879440"
  },
  {
    "text": "new file and if you do that without the-- pretty option it's just replacing all the types with spaces and so your",
    "start": "879440",
    "end": "886440"
  },
  {
    "text": "code is still lined up the original way it's just like Whited out all the types if you want to get rid of that space",
    "start": "886440",
    "end": "893199"
  },
  {
    "text": "where the types were you use-- pretty and now with a new file you can just run it with node either way you've got to",
    "start": "893199",
    "end": "900040"
  },
  {
    "text": "remember to annotate the files and tell it about the type checking there's another option that I",
    "start": "900040",
    "end": "906440"
  },
  {
    "text": "really don't like and that is that you can put special comments around all the type annotations in your file with the",
    "start": "906440",
    "end": "912199"
  },
  {
    "text": "slash star colons in TXS for a single type or to surround a type Alias which",
    "start": "912199",
    "end": "919560"
  },
  {
    "text": "we'll talk about what those are in just a bit you have to use a double coal and I think that's kind of an ugly approach I'd rather just use standard flow",
    "start": "919560",
    "end": "926399"
  },
  {
    "text": "annotations and then have some tool stri them out before I run the code and then the Project based approach we're going",
    "start": "926399",
    "end": "933000"
  },
  {
    "start": "933000",
    "end": "933000"
  },
  {
    "text": "to get to that later so let's look at some more examples here this is an example where I've annotated a file but",
    "start": "933000",
    "end": "938560"
  },
  {
    "text": "I haven't added any types I just have a simple function that's going to multiply two numbers for me and I'm calling that",
    "start": "938560",
    "end": "945480"
  },
  {
    "text": "in the line where I'm logging out the result and I'm passing at a number in a string and clearly this is not going to",
    "start": "945480",
    "end": "951000"
  },
  {
    "text": "work because I can't multiply a number by a string and Flo will catch that for me and say Hey you gave me a string but",
    "start": "951000",
    "end": "958079"
  },
  {
    "text": "it has to be a number the interesting thing here is that typescript will not detect this that's because in typescript",
    "start": "958079",
    "end": "965680"
  },
  {
    "text": "you not only have to opt in by changing your file extension tots but you have to add in the types if you don't add the",
    "start": "965680",
    "end": "972160"
  },
  {
    "text": "types it's not going to detect that for you but flow is following the flow throughout your code and it can see that",
    "start": "972160",
    "end": "979319"
  },
  {
    "text": "you passed in a string and it can see the operation you're trying to perform and it'll catch those so that's a big",
    "start": "979319",
    "end": "985279"
  },
  {
    "text": "reason why I have a a bit of a preference for flow another part of flow is catching",
    "start": "985279",
    "end": "991959"
  },
  {
    "start": "989000",
    "end": "989000"
  },
  {
    "text": "uninitialized references so here I have a function where I'm going to pass in a person object and I'm expecting this",
    "start": "991959",
    "end": "998440"
  },
  {
    "text": "person object to have a property called last name and so I'm using es6 d",
    "start": "998440",
    "end": "1003639"
  },
  {
    "text": "structuring right there to pull the name last name property out and then I'm going to check and see if there was a",
    "start": "1003639",
    "end": "1010079"
  },
  {
    "text": "last name and if there was I'm going to return the first character of it otherwise I'll return an empty string",
    "start": "1010079",
    "end": "1015920"
  },
  {
    "text": "but if I don't pass in a value for person if that's undefined or null or",
    "start": "1015920",
    "end": "1022199"
  },
  {
    "text": "even if it's a number or a Boolean or a string this is going to be a problem and so below that I create a person object",
    "start": "1022199",
    "end": "1029000"
  },
  {
    "text": "this one happens to have a last name and then I call the function and everything is good and it outputs a a V for me but",
    "start": "1029000",
    "end": "1035760"
  },
  {
    "text": "then I declare that variable p i don't give it a value it's it's undefined right now I make the same call that's",
    "start": "1035760",
    "end": "1042678"
  },
  {
    "text": "going to give me an error and flow is going to say hey that's a possibly uninitialized value",
    "start": "1042679",
    "end": "1049600"
  },
  {
    "text": "so this is a really good thing and when I first started using flow this was the number one kind of error it was catching",
    "start": "1049600",
    "end": "1056120"
  },
  {
    "text": "for me wasn't the kind of thing where I passed a number but it needed to be a string it was that I didn't account for",
    "start": "1056120",
    "end": "1062880"
  },
  {
    "text": "the possibility that something might be null or undefined uh so I think this is a really good feature of",
    "start": "1062880",
    "end": "1070200"
  },
  {
    "start": "1070000",
    "end": "1070000"
  },
  {
    "text": "flow so now let's jump over to talk about how you specify the types in a bit more detail I've got a URL where you can",
    "start": "1070200",
    "end": "1076679"
  },
  {
    "text": "get all the nitty-gritty details and I'm going to give you an overview of that here and so the kind of things where you",
    "start": "1076679",
    "end": "1082000"
  },
  {
    "text": "want to do this you want to specify the types of variables properties and objects parameters to functions and",
    "start": "1082000",
    "end": "1089000"
  },
  {
    "text": "their return types and you do this by following a name of something with a colon and then it's type description now",
    "start": "1089000",
    "end": "1096720"
  },
  {
    "text": "often type script or flow can infer the types for you and this is an example",
    "start": "1096720",
    "end": "1102520"
  },
  {
    "text": "where you might think surely I don't need to say that it's a number because I'm assigning a zero so it should know",
    "start": "1102520",
    "end": "1108240"
  },
  {
    "text": "that right and that would be true if this was a const because then it would know that it's always going to be zero",
    "start": "1108240",
    "end": "1114280"
  },
  {
    "text": "so it's always a number but as it is with a let Flo has to look at all the",
    "start": "1114280",
    "end": "1119400"
  },
  {
    "text": "rest of my code because it's possible that somewhere else I might assign a string to that and if I don't have the",
    "start": "1119400",
    "end": "1126000"
  },
  {
    "text": "type annotation then that's okay and so the type of score then would be number",
    "start": "1126000",
    "end": "1131919"
  },
  {
    "text": "or string it can be either uh so you want to do that if it's something that",
    "start": "1131919",
    "end": "1137559"
  },
  {
    "text": "could change uh there's also this concept of a maybe type A maybe type says it's this type",
    "start": "1137559",
    "end": "1145480"
  },
  {
    "start": "1139000",
    "end": "1139000"
  },
  {
    "text": "but it also might be null or undefined and you specify that just by putting a question mark in front of the type okay",
    "start": "1145480",
    "end": "1153400"
  },
  {
    "text": "and when you do that it's going to make sure that any place you use that variable in this case score that you've",
    "start": "1153400",
    "end": "1159919"
  },
  {
    "text": "accounted for the possibility that it might be null or undefined and if you're just multiplying it by something and you",
    "start": "1159919",
    "end": "1166480"
  },
  {
    "text": "didn't check first to see if it was null or undefined that's going to be flagged as an error typescript used to not have",
    "start": "1166480",
    "end": "1173400"
  },
  {
    "text": "any support for this now it has this feature called strict null checks that you can turn on to get the same behavior",
    "start": "1173400",
    "end": "1180520"
  },
  {
    "text": "but it's not on by default in flow this is on by default nothing can be null or",
    "start": "1180520",
    "end": "1186320"
  },
  {
    "text": "undefined unless you put that question mark in there to say that that's",
    "start": "1186320",
    "end": "1191400"
  },
  {
    "text": "allowed so the basic types are what you might expect Boolean number string the",
    "start": "1191400",
    "end": "1196840"
  },
  {
    "text": "wrapper classes for those which almost nobody uses uh then there's null as a",
    "start": "1196840",
    "end": "1202320"
  },
  {
    "text": "type void is what you say if it's going to allow undefined uh then you can use literal",
    "start": "1202320",
    "end": "1209200"
  },
  {
    "text": "values that's interesting you're saying that it's not that the type is a string it's the specific string or not that",
    "start": "1209200",
    "end": "1215760"
  },
  {
    "text": "it's a number it's 19 always uh so you might think that that's not a useful",
    "start": "1215760",
    "end": "1222039"
  },
  {
    "text": "thing but I'll show you an example coming up later where I'm going to use a string literal and that'll make more",
    "start": "1222039",
    "end": "1227799"
  },
  {
    "text": "sense then you can also take the lazy approach saying that the type of this is any it's kind of like turning off type",
    "start": "1227799",
    "end": "1234640"
  },
  {
    "text": "checking for that thing and generally you don't want to do that instead you should prefer to use mixed mixed is like",
    "start": "1234640",
    "end": "1241480"
  },
  {
    "text": "any it means it could be anything but I don't want to turn off type checking I want you to require me to make some",
    "start": "1241480",
    "end": "1249760"
  },
  {
    "text": "assertions about the type before I use it and there's an example of that down at the bottom here I have this function",
    "start": "1249760",
    "end": "1255039"
  },
  {
    "text": "Fu that takes parameter V and its type is mixed and I want to maybe multiply it",
    "start": "1255039",
    "end": "1261799"
  },
  {
    "text": "by two or maybe get the length of it but I can only multiply it by two if it's a",
    "start": "1261799",
    "end": "1267480"
  },
  {
    "text": "number and so I have to check for that check the type and I only want to return the length if it's a string if it's",
    "start": "1267480",
    "end": "1273120"
  },
  {
    "text": "anything else I'll just return it so if I don't do those if checks I will get an",
    "start": "1273120",
    "end": "1278440"
  },
  {
    "text": "error from flow because it requires me to do that what they call type",
    "start": "1278440",
    "end": "1283720"
  },
  {
    "text": "refinement if the type is mixed so here's a basic example I have",
    "start": "1283720",
    "end": "1288799"
  },
  {
    "start": "1286000",
    "end": "1286000"
  },
  {
    "text": "the function get chars it takes three parameters the first is a string then I have a number and a Boolean and what I",
    "start": "1288799",
    "end": "1295000"
  },
  {
    "text": "want to do here is return some characters out of the string either some characters from the beginning or",
    "start": "1295000",
    "end": "1300520"
  },
  {
    "text": "characters from the end based on the value of that Boolean from start and so I have those types annotated uh notice",
    "start": "1300520",
    "end": "1307919"
  },
  {
    "text": "that I did not specify the return type of this function I could have said uh",
    "start": "1307919",
    "end": "1314120"
  },
  {
    "text": "right at the end there colon string because that is what it's returning but I'm not required to specify the types",
    "start": "1314120",
    "end": "1320240"
  },
  {
    "text": "and then I have three calls to it the first two they're just fine but that last one everything's wrong three is not",
    "start": "1320240",
    "end": "1326559"
  },
  {
    "text": "a string false is not a number Fubar is not a Boolean and so I get three flow errors from that",
    "start": "1326559",
    "end": "1333000"
  },
  {
    "start": "1333000",
    "end": "1333000"
  },
  {
    "text": "line flow understands all the built-in things all the things from the JavaScript language like array and",
    "start": "1333000",
    "end": "1339720"
  },
  {
    "text": "console it understands everything about the Dom it knows about nodes and elements and the methods that you can",
    "start": "1339720",
    "end": "1346080"
  },
  {
    "text": "call on those it knows about the browser a API like uh geolocation and web",
    "start": "1346080",
    "end": "1351919"
  },
  {
    "text": "workers and websockets so it knows uh if you say that a variable is that type",
    "start": "1351919",
    "end": "1358159"
  },
  {
    "text": "what kind of methods you could call on it it knows all about nodejs so if you just require a node module it knows what",
    "start": "1358159",
    "end": "1365799"
  },
  {
    "text": "you can do with that it knows some things about react like the special kind of event objects that you use with react",
    "start": "1365799",
    "end": "1372799"
  },
  {
    "text": "and more and so you'll find all of this if you go to the GitHub repo and go down",
    "start": "1372799",
    "end": "1378279"
  },
  {
    "text": "that Branch you can see these files I have them listed there core.js DJs and",
    "start": "1378279",
    "end": "1383880"
  },
  {
    "text": "so on and it's very easy to read what it thinks the definitions of those types",
    "start": "1383880",
    "end": "1389320"
  },
  {
    "text": "are when you're taking the time to specify types in your code it's highly likely that you're going to use it in",
    "start": "1389320",
    "end": "1394840"
  },
  {
    "text": "more than one place and so it's very convenient to give a name to That Type so you don't have to keep repeating its",
    "start": "1394840",
    "end": "1401360"
  },
  {
    "text": "definition this is especially true for functions and for objects that are supposed to contain certain properties",
    "start": "1401360",
    "end": "1407880"
  },
  {
    "text": "so you give a name to that uh and then later you refer to that type uh now in",
    "start": "1407880",
    "end": "1413039"
  },
  {
    "text": "the case of an object when you specify the properties you still can have additional properties added you're just",
    "start": "1413039",
    "end": "1419919"
  },
  {
    "text": "specifying kind of like the minimum requirements or if these are present they have to have these types uh when",
    "start": "1419919",
    "end": "1426559"
  },
  {
    "text": "you want to Define one of these type aliases you say type and you give it a name and then there's some type",
    "start": "1426559",
    "end": "1431919"
  },
  {
    "text": "definition here and we'll see lots of examples of what goes there coming up there's a strong convention that your",
    "start": "1431919",
    "end": "1438120"
  },
  {
    "text": "type name should end in the word typee but it's just a convention you don't have to do that another key word in flow",
    "start": "1438120",
    "end": "1444919"
  },
  {
    "text": "you might want to look up later is interface it's very similar to type and I have a URL where you can read about",
    "start": "1444919",
    "end": "1451039"
  },
  {
    "text": "the difference between those two most of the time I think you'll use type instead of",
    "start": "1451039",
    "end": "1456880"
  },
  {
    "start": "1456000",
    "end": "1456000"
  },
  {
    "text": "interface here are examples of how you specify types for a function we saw an example like this couple of slides ago",
    "start": "1456880",
    "end": "1463360"
  },
  {
    "text": "so here's another one like that I have this function Monopoly and I can specify whether I'm passing go",
    "start": "1463360",
    "end": "1468880"
  },
  {
    "text": "what I rolled on the dice what piece I'm moving and then I'm assuming that that result type is a type that I've defined",
    "start": "1468880",
    "end": "1475840"
  },
  {
    "text": "somewhere else uh so that's adding types to that function now what if I had multiple functions that had the same",
    "start": "1475840",
    "end": "1482159"
  },
  {
    "text": "signature then I might want to define a type Alias for that function signature and so that's what I'm doing right here",
    "start": "1482159",
    "end": "1488760"
  },
  {
    "text": "and the only difference is that I've got that Arrow right there instead of the colon and so that's a difference when",
    "start": "1488760",
    "end": "1495039"
  },
  {
    "text": "you're defining a type Alias for a function signature remember that you add a",
    "start": "1495039",
    "end": "1502279"
  },
  {
    "text": "question mark before something that is uh a type where it allows null or",
    "start": "1502279",
    "end": "1507840"
  },
  {
    "text": "undefined and that's what I'm doing in this last example here this is a typical nodejs callback function where you first",
    "start": "1507840",
    "end": "1514760"
  },
  {
    "text": "get an error if there was one and then the result if there was one and so that's why uh this is optional the error",
    "start": "1514760",
    "end": "1523399"
  },
  {
    "text": "might be null or undefined back up to this example I want to say that Z is an",
    "start": "1523399",
    "end": "1528960"
  },
  {
    "text": "optional parameter I'm getting a distance from a point to the origin and it might be just a 2d thing and I just",
    "start": "1528960",
    "end": "1534880"
  },
  {
    "text": "have X and Y values but if it was 3D then I want to specify the Z parameter",
    "start": "1534880",
    "end": "1540320"
  },
  {
    "text": "and so that's optional I put a question mark after the name of the parameter okay I'm doing the same thing here for",
    "start": "1540320",
    "end": "1546799"
  },
  {
    "text": "the result of the Callback function so pretty simple to add types to your",
    "start": "1546799",
    "end": "1551840"
  },
  {
    "text": "function definitions uh next up arrays there are two ways that you can say something is an array you can refer to",
    "start": "1551840",
    "end": "1559520"
  },
  {
    "start": "1552000",
    "end": "1552000"
  },
  {
    "text": "the array class and then after that in angle brackets you can specify what kind",
    "start": "1559520",
    "end": "1564640"
  },
  {
    "text": "of elements go in that array so flow wants every element in",
    "start": "1564640",
    "end": "1570240"
  },
  {
    "text": "your array to have the same type you can also specify it by giving it the type",
    "start": "1570240",
    "end": "1575520"
  },
  {
    "text": "first and then square brackets after it and so these things are equivalent an array of dates or a date",
    "start": "1575520",
    "end": "1582520"
  },
  {
    "text": "array okay and you can Nest them so I can have an array of arrays of numbers",
    "start": "1582520",
    "end": "1588000"
  },
  {
    "text": "and specify that in two ways and so here's an example of creating a type Alias for that with a very crazy name",
    "start": "1588000",
    "end": "1595000"
  },
  {
    "text": "that you would never pick and then an example of using that and there is an array of arrays of numbers another",
    "start": "1595000",
    "end": "1603480"
  },
  {
    "text": "variant of an array is called a tuple and this is just an array that has a fixed size where each of the elements",
    "start": "1603480",
    "end": "1610080"
  },
  {
    "text": "don't have to be the same type and I get to specify what those types are by their position and so in this very simple",
    "start": "1610080",
    "end": "1617159"
  },
  {
    "text": "example I have a point type and here I really want both of them to have the same type okay but they don't have to",
    "start": "1617159",
    "end": "1624039"
  },
  {
    "text": "but in this case I want them to be two numbers and so it won't let me add more things to it it always has to have a",
    "start": "1624039",
    "end": "1630520"
  },
  {
    "text": "length of two and I can change values at a specific index but I can't use all the array methods that would normally mutate",
    "start": "1630520",
    "end": "1638000"
  },
  {
    "text": "an array so Tuple is a very specific kind of an array there are three ways that you can",
    "start": "1638000",
    "end": "1644240"
  },
  {
    "start": "1642000",
    "end": "1642000"
  },
  {
    "text": "specify objects the simplest thing is to say it's a object so you haven't said",
    "start": "1644240",
    "end": "1649799"
  },
  {
    "text": "anything about what properties it can have you're just distinguishing it from other types like string or number or",
    "start": "1649799",
    "end": "1655279"
  },
  {
    "text": "Boolean you could also just use curly braces to say the same thing but most",
    "start": "1655279",
    "end": "1660799"
  },
  {
    "text": "often you want to specify what properties are going inside it now if I had written an es6 class or defined a",
    "start": "1660799",
    "end": "1668880"
  },
  {
    "text": "Constructor in the kind of old JavaScript way I would want to refer to that instead and that's this third",
    "start": "1668880",
    "end": "1675000"
  },
  {
    "text": "option referring to a class or a Constructor function name but the second case is really common uh I know that",
    "start": "1675000",
    "end": "1682240"
  },
  {
    "text": "you're aware that in JavaScript you often create object literals that don't belong to any class and so in that case",
    "start": "1682240",
    "end": "1689080"
  },
  {
    "text": "you want to use this and specify what properties it can have and the types and so here's an example where I have person",
    "start": "1689080",
    "end": "1695960"
  },
  {
    "text": "type that has these three properties in it and notice that spouse is optional I",
    "start": "1695960",
    "end": "1701279"
  },
  {
    "text": "don't have to specify that property and if I do specify it I can set it to null",
    "start": "1701279",
    "end": "1706679"
  },
  {
    "text": "or undefined probably don't want both of those but you could all right and then I want to create an instance of that and",
    "start": "1706679",
    "end": "1713279"
  },
  {
    "text": "so I'm creating this Tammy object which is a person type and it has to have the name property and it has to have the",
    "start": "1713279",
    "end": "1720159"
  },
  {
    "text": "birthday property but notice I specified a height well when you specify uh an",
    "start": "1720159",
    "end": "1726840"
  },
  {
    "text": "object in this way you're just giving it minimum requirements you can always add additional properties to it uh so then I",
    "start": "1726840",
    "end": "1734640"
  },
  {
    "text": "uh specify another one down here the mark type uh and that one I specified",
    "start": "1734640",
    "end": "1741120"
  },
  {
    "text": "the spouse I didn't do that on Tammy and so this appears that Mark is married but",
    "start": "1741120",
    "end": "1746600"
  },
  {
    "text": "somehow Tammy is not married we're going to fix that on the next slide when we define a class for working with this",
    "start": "1746600",
    "end": "1753000"
  },
  {
    "text": "okay uh now what I said about specifying the minimum requirements and not being able to add more properties if you don't",
    "start": "1753000",
    "end": "1759880"
  },
  {
    "text": "like that there is a way around it you can use this extra bit of syntax to say",
    "start": "1759880",
    "end": "1764919"
  },
  {
    "text": "I need this to be an exact match and there are two ways to it that's pretty ugly I think I would do it that way with",
    "start": "1764919",
    "end": "1770799"
  },
  {
    "text": "the vertical bars okay and then I already mentioned just using a name of a class or a Constructor function okay so",
    "start": "1770799",
    "end": "1779240"
  },
  {
    "start": "1778000",
    "end": "1778000"
  },
  {
    "text": "if I decide to go with a class I could use es6 syntax and here I'm defining a person class and it's kind of similar to",
    "start": "1779240",
    "end": "1786120"
  },
  {
    "text": "that person object we saw on the previous slide here at the top of my class this is unique to flow I'm",
    "start": "1786120",
    "end": "1792720"
  },
  {
    "text": "specifying my properties and their types but yet again uh this doesn't mean I",
    "start": "1792720",
    "end": "1797760"
  },
  {
    "text": "can't have more properties it's just these are kind of a minimum set and here I want to require a height and notice",
    "start": "1797760",
    "end": "1805080"
  },
  {
    "text": "spouse is a reference back to itself okay uh now one thing that I",
    "start": "1805080",
    "end": "1810679"
  },
  {
    "text": "cannot do here is I can't uh specify here that those",
    "start": "1810679",
    "end": "1816720"
  },
  {
    "text": "properties are really required I wish that there was a way to do that so I'm really relying on the fact that I have",
    "start": "1816720",
    "end": "1823320"
  },
  {
    "text": "this Constructor and I'm setting those things and there's no other way to create this but can't specify up here in",
    "start": "1823320",
    "end": "1829320"
  },
  {
    "text": "the types that they're required the absence of a question mark doesn't mean that in a class definition okay so when",
    "start": "1829320",
    "end": "1836320"
  },
  {
    "text": "I create an object I do it like this and then I can call this Mary method and so",
    "start": "1836320",
    "end": "1842080"
  },
  {
    "text": "Tammy Mary Mark and you notice that I'm setting the relationship in both directions there okay so with that class",
    "start": "1842080",
    "end": "1849919"
  },
  {
    "text": "in hand and I've created a couple of instances I have this function where I can log out information about a person",
    "start": "1849919",
    "end": "1856320"
  },
  {
    "text": "and it's going to print out uh who they're married to if they're married so I'm checking that here uh and then I log",
    "start": "1856320",
    "end": "1862639"
  },
  {
    "text": "out Mark and that's good but obviously that's not going to work I can't use a date object where it's requiring a",
    "start": "1862639",
    "end": "1869440"
  },
  {
    "text": "person object okay I get into some more interesting",
    "start": "1869440",
    "end": "1875600"
  },
  {
    "text": "features uh this is um a feature that is present in Elm that I think is a really",
    "start": "1875600",
    "end": "1882000"
  },
  {
    "text": "great feature and when you read the elm documentation you'll see that uh as it's",
    "start": "1882000",
    "end": "1887039"
  },
  {
    "text": "touting its own features that uh at the same time points out how bad it is that these things are missing from JavaScript",
    "start": "1887039",
    "end": "1893760"
  },
  {
    "text": "and there are two things you'll notice about the elm documentation one is that it ignores the existence of es6 it only",
    "start": "1893760",
    "end": "1901200"
  },
  {
    "text": "compares to es5 and the other is that it assumes that you're not going to use any kind of",
    "start": "1901200",
    "end": "1906600"
  },
  {
    "text": "a type type Checker so if you add flow to JavaScript you do get a lot of the benefits that you see in Elm certainly",
    "start": "1906600",
    "end": "1912880"
  },
  {
    "text": "not all of them but some of them and this is one of those so I can say that a uh primitive type means that it's a",
    "start": "1912880",
    "end": "1919880"
  },
  {
    "text": "Boolean or a number or a string and then if I say that something is a primitive type I can assign any of those in so",
    "start": "1919880",
    "end": "1926360"
  },
  {
    "text": "it's not just one type it can be any of these types so Seven's good fu is good true is good assigning an empty object",
    "start": "1926360",
    "end": "1933639"
  },
  {
    "text": "that's not good because that's not one that I was allowing uh then this next example is one where I'm going to use a",
    "start": "1933639",
    "end": "1939880"
  },
  {
    "text": "literal value for a type and this is called a disjoint Union so I have an",
    "start": "1939880",
    "end": "1945760"
  },
  {
    "text": "animal type and I want to say that every animal has a name plus it has a type property but it's always set to animal",
    "start": "1945760",
    "end": "1953240"
  },
  {
    "text": "and then I have a mineral type which is similar it has a name but its type property is set to Mineral and likewise",
    "start": "1953240",
    "end": "1959279"
  },
  {
    "text": "for vegetable and then I can create a type that combines them all I have a thing type which might be an animal or a",
    "start": "1959279",
    "end": "1966080"
  },
  {
    "text": "mineral or a vegetable then if I want to create a dog",
    "start": "1966080",
    "end": "1972080"
  },
  {
    "text": "object I have to set the uh the type to animal and then I can put it in a",
    "start": "1972080",
    "end": "1977840"
  },
  {
    "text": "variable that has a type of animal that's all good and a similar thing for mineral and a similar thing for",
    "start": "1977840",
    "end": "1983840"
  },
  {
    "text": "vegetable but notice that if I left off the type or I said something different that would be an error and so why do I",
    "start": "1983840",
    "end": "1991679"
  },
  {
    "text": "want to do this well one reason is that you can take advantage of this in a switch statement and I could switch on",
    "start": "1991679",
    "end": "1998039"
  },
  {
    "text": "the type of one of these things and uh down here I want to say that thing is a",
    "start": "1998039",
    "end": "2003919"
  },
  {
    "text": "thing type and I assigned in a dog but I could also assign in min mineral or a vegetable and then if I use that in a",
    "start": "2003919",
    "end": "2010559"
  },
  {
    "text": "switch statement and I switch on the type property it would know what other properties are present here now in my",
    "start": "2010559",
    "end": "2017559"
  },
  {
    "text": "example they all just have a name property but suppose that animal had an extra property that mineral and",
    "start": "2017559",
    "end": "2024279"
  },
  {
    "text": "vegetable didn't have then in my switch if I switch on the typ being animal it",
    "start": "2024279",
    "end": "2030960"
  },
  {
    "text": "would let me access that extra property but if I was working with a vegetable and I tried to access that same one it",
    "start": "2030960",
    "end": "2037440"
  },
  {
    "text": "would know that that won't work because that doesn't have the extra property so these disjoint unions are really useful",
    "start": "2037440",
    "end": "2043919"
  },
  {
    "text": "for that level of checking you can also use unions for an",
    "start": "2043919",
    "end": "2049158"
  },
  {
    "start": "2046000",
    "end": "2046000"
  },
  {
    "text": "a plane enumeration so here I have an activity type and you can either have it be Swim Bike or run and then if I have a",
    "start": "2049159",
    "end": "2056040"
  },
  {
    "text": "variable that's activity type I can assign any of those three strings but if I try to assign anything else I'm going",
    "start": "2056040",
    "end": "2062878"
  },
  {
    "text": "to get an error from that so we finally have good support for enes as long as you're using flow or typescript another",
    "start": "2062879",
    "end": "2069919"
  },
  {
    "text": "interesting wrinkle on this is that you might want to say that the enumeration values you allow are whatever the keys",
    "start": "2069919",
    "end": "2076599"
  },
  {
    "text": "are right now of some object and so your application could start up you could populate some JavaScript object and then",
    "start": "2076599",
    "end": "2084480"
  },
  {
    "text": "run code like this which will look at that object and extract out what keys it",
    "start": "2084480",
    "end": "2089599"
  },
  {
    "text": "has right now and give you a type which is an enumeration of those and then from",
    "start": "2089599",
    "end": "2094878"
  },
  {
    "text": "that point on uh you can only use keys of the object for a variable that has",
    "start": "2094879",
    "end": "2100200"
  },
  {
    "text": "that type of course after you define all these types you're going to want to",
    "start": "2100200",
    "end": "2105720"
  },
  {
    "text": "share them with other files your application isn't just one Javascript file and so you need to be able to",
    "start": "2105720",
    "end": "2111200"
  },
  {
    "text": "export a type definition out of a file and then import it into another one and so there's export type and import type",
    "start": "2111200",
    "end": "2118160"
  },
  {
    "text": "but uh as you might guess just like working with normal JavaScript code if you want to use es6 imports and exports",
    "start": "2118160",
    "end": "2125920"
  },
  {
    "text": "for say JavaScript functions something has to bundle that together in order for the browser to use it and most",
    "start": "2125920",
    "end": "2132200"
  },
  {
    "text": "people use webpack for that and the same is true here you need a module bundler if you want to take advantage of that",
    "start": "2132200",
    "end": "2138560"
  },
  {
    "text": "but for most web applications you're probably already using a module bundler so here's an example of that in this",
    "start": "2138560",
    "end": "2144599"
  },
  {
    "start": "2142000",
    "end": "2142000"
  },
  {
    "text": "file that is type Alias export. JS I want to Define some things and Export",
    "start": "2144599",
    "end": "2150160"
  },
  {
    "text": "them and so first I have this thing called named type A named type is just any object that has a name property",
    "start": "2150160",
    "end": "2156040"
  },
  {
    "text": "which is a string it could have extra properties but it at least has that and then I have a function say hello you",
    "start": "2156040",
    "end": "2162560"
  },
  {
    "text": "have to pass it a named type it doesn't return anything so",
    "start": "2162560",
    "end": "2168079"
  },
  {
    "text": "that's why I have void on the end of that definition and then I'm just going to print out hello comma and then the",
    "start": "2168079",
    "end": "2174359"
  },
  {
    "text": "name property out of that thing so both of those get exported then in this other file I want to import those two things",
    "start": "2174359",
    "end": "2181400"
  },
  {
    "text": "and so I'm using import type there might be many things defined there and I'm using this sort of structuring like",
    "start": "2181400",
    "end": "2188720"
  },
  {
    "text": "syntax to pull out that one definition and the same thing for pulling out the function and now I can create something",
    "start": "2188720",
    "end": "2195599"
  },
  {
    "text": "that's a named type that has a name and maybe other properties and if I call say",
    "start": "2195599",
    "end": "2200640"
  },
  {
    "text": "hello that's going to work just fine here I'm creating a literal JavaScript object I didn't say that it was a name",
    "start": "2200640",
    "end": "2207160"
  },
  {
    "text": "type but it does have a name property and so that works just fine but here I",
    "start": "2207160",
    "end": "2212359"
  },
  {
    "text": "pass it just a string and flow is going to catch that because it's not a named type",
    "start": "2212359",
    "end": "2219520"
  },
  {
    "start": "2219000",
    "end": "2219000"
  },
  {
    "text": "sometimes not very often you're trying to satisfy flow and you just can't make it happy and so when you hit a wall like",
    "start": "2220680",
    "end": "2228400"
  },
  {
    "text": "that and you just want to move on the easy way to do that is to add a special comment that says dollar flow fix me and",
    "start": "2228400",
    "end": "2236000"
  },
  {
    "text": "optionally you can describe what the issue is and then it will ignore the next line uh but I want to emphasize",
    "start": "2236000",
    "end": "2243560"
  },
  {
    "text": "that it's very rare that you run into cases where you need to use this but it's really useful when you're just",
    "start": "2243560",
    "end": "2249400"
  },
  {
    "text": "learning flow and you got everything working except for this one thing and you just can't figure it out now and you",
    "start": "2249400",
    "end": "2254920"
  },
  {
    "text": "don't have time to work on it you can turn off flow just briefly uh for that one case all right so now we want to",
    "start": "2254920",
    "end": "2261560"
  },
  {
    "start": "2260000",
    "end": "2260000"
  },
  {
    "text": "talk about flow server this is the brains behind everything that's happening here it's analyzing everything",
    "start": "2261560",
    "end": "2267079"
  },
  {
    "text": "about your code tracing the flow all the possible flows through your code and keeping track of the types of variables",
    "start": "2267079",
    "end": "2274319"
  },
  {
    "text": "and parameter types it's keeping track of where everything is defined and uh so",
    "start": "2274319",
    "end": "2280640"
  },
  {
    "text": "there's a very good reason for that and that is because the purpose of flow is not just to do type checking but also to",
    "start": "2280640",
    "end": "2287280"
  },
  {
    "text": "help editors and idees do things like provide uh method name completion or",
    "start": "2287280",
    "end": "2294280"
  },
  {
    "text": "find all the references to this function or in the future maybe do refactorings for you because it knows so much about",
    "start": "2294280",
    "end": "2301280"
  },
  {
    "text": "what's happening in your code and so when you run the flow server it starts up a bunch of processes so that it can",
    "start": "2301280",
    "end": "2307520"
  },
  {
    "text": "evaluate your code in parallel and that's just for performance on my machine I noticed that it's starting up",
    "start": "2307520",
    "end": "2313880"
  },
  {
    "text": "10 flow processes but that really depends on how many cores you have in your machine and you can control that",
    "start": "2313880",
    "end": "2320720"
  },
  {
    "text": "there's a configuration option uh that can change that if you need to but the default has been working great for me so",
    "start": "2320720",
    "end": "2327880"
  },
  {
    "text": "by default what flow is going to do is examine all of the JS files that are",
    "start": "2327880",
    "end": "2334400"
  },
  {
    "text": "underneath the directory that contains a file called flow config and we'll talk",
    "start": "2334400",
    "end": "2340800"
  },
  {
    "text": "in a bit about how you create that file not any mystery here you say flow a nit and it creates this file for you and",
    "start": "2340800",
    "end": "2347560"
  },
  {
    "text": "that's where you specify some options in most cases the defaults are just fine so",
    "start": "2347560",
    "end": "2352839"
  },
  {
    "text": "if you're in some subdirectory of your project it's going to search upward until it finds the directory that",
    "start": "2352839",
    "end": "2359480"
  },
  {
    "text": "contains flow config and once it's found that now it searches down for every JS",
    "start": "2359480",
    "end": "2365160"
  },
  {
    "text": "file and evaluates them after it runs once which might take five",
    "start": "2365160",
    "end": "2371079"
  },
  {
    "text": "or 10 seconds if you've got a big project it has now cataloged all this information about your application and",
    "start": "2371079",
    "end": "2377920"
  },
  {
    "text": "then from then on it's watching your files and if you change something it will run flow on just that file but if",
    "start": "2377920",
    "end": "2385000"
  },
  {
    "text": "that file was imported in another one it will see that and run flow on that one because that might have changed",
    "start": "2385000",
    "end": "2390079"
  },
  {
    "text": "something and it will see if you create new files and run flow on those but the interesting thing about the flow server",
    "start": "2390079",
    "end": "2396400"
  },
  {
    "text": "is that it doesn't output anything it's checking all of this and it may have found some errors but it doesn't tell",
    "start": "2396400",
    "end": "2402119"
  },
  {
    "text": "you about them you have to ask it if it saw anything and so we we're going to see the command to do that in just a bit",
    "start": "2402119",
    "end": "2409160"
  },
  {
    "text": "and of course your editor or IDE is going to do that for you and show you the",
    "start": "2409160",
    "end": "2415160"
  },
  {
    "text": "errors so to start up a server uh you say flow start and that starts it up in",
    "start": "2415160",
    "end": "2420560"
  },
  {
    "text": "the background and usually that's what you want if you're using an editor or IDE plugin it's going to do this for you",
    "start": "2420560",
    "end": "2426920"
  },
  {
    "text": "and say you don't have to worry about it you could start it in the foreground if you want and then if you want to ask the",
    "start": "2426920",
    "end": "2432319"
  },
  {
    "text": "server if it found any errors you type flow status or just flow and that is not",
    "start": "2432319",
    "end": "2438400"
  },
  {
    "text": "running a check it's just asking the server have you seen any problems if you want you can run flow check which says",
    "start": "2438400",
    "end": "2445839"
  },
  {
    "text": "uh I don't care what you saw before could you do a fresh check of everything that's not something that I do commonly",
    "start": "2445839",
    "end": "2452440"
  },
  {
    "text": "and then finally you can stop the server if you need to by running flow stop so",
    "start": "2452440",
    "end": "2457720"
  },
  {
    "start": "2456000",
    "end": "2456000"
  },
  {
    "text": "now I want to walk through using this on a real project and all the steps that uh you need to go through so this will be a",
    "start": "2457720",
    "end": "2463760"
  },
  {
    "text": "good checklist for the first time that you use flow so the first thing you want to do is install a bunch of dependencies",
    "start": "2463760",
    "end": "2469800"
  },
  {
    "text": "we'll get to all these steps on separate slides coming up uh then you want to put some npm scripts in your package Json to",
    "start": "2469800",
    "end": "2476640"
  },
  {
    "text": "automate some things for you you probably want to set up eslint hopefully",
    "start": "2476640",
    "end": "2481720"
  },
  {
    "text": "you're using it already and then you're just going to add some new rules to your eslint configuration file to tell it to",
    "start": "2481720",
    "end": "2488160"
  },
  {
    "text": "check your use of flow and make sure you're doing a good job with that then you want to set up Babble because that",
    "start": "2488160",
    "end": "2494359"
  },
  {
    "text": "is going to need to strip the flow types out of your code so that you can run it then you've got to create that flow",
    "start": "2494359",
    "end": "2501079"
  },
  {
    "text": "config file so that flow knows where to stop when it's looking up the directory",
    "start": "2501079",
    "end": "2506160"
  },
  {
    "text": "structure and then showering down looking at all of your files you probably want to set up flow typed so",
    "start": "2506160",
    "end": "2513119"
  },
  {
    "text": "that you can install definitions for third-party libraries that you might be using and then you want to set up your",
    "start": "2513119",
    "end": "2518640"
  },
  {
    "text": "editor or IDE so let's walk through how you do all of these things so first step is all the dev",
    "start": "2518640",
    "end": "2525240"
  },
  {
    "start": "2523000",
    "end": "2523000"
  },
  {
    "text": "dependencies so step one make sure you've got a package Json for your project and if you don't you just run",
    "start": "2525240",
    "end": "2531240"
  },
  {
    "text": "npm a knit and it creates that for you then you want to do an npm install and",
    "start": "2531240",
    "end": "2536520"
  },
  {
    "text": "all of these are development dependencies that's why I've got the dasd you could use yarn as well to",
    "start": "2536520",
    "end": "2541640"
  },
  {
    "text": "install them and then you just go down this list and set up all these things a bunch of things related to babble and",
    "start": "2541640",
    "end": "2547400"
  },
  {
    "text": "its plugins a couple of things related to eslint and being able to check your use of flow uh flow itself you want to",
    "start": "2547400",
    "end": "2555319"
  },
  {
    "text": "install as part of your project optionally you can install flow watch",
    "start": "2555319",
    "end": "2560559"
  },
  {
    "text": "this is good for uh when you aren't using a editor IDE plugin so that you",
    "start": "2560559",
    "end": "2566079"
  },
  {
    "text": "could separately ask it to continually watch your files and output errors in a separate terminal window but if you've",
    "start": "2566079",
    "end": "2572720"
  },
  {
    "text": "got the editor plugin you don't really have to have that and then finally npm runoff isn't really related to this it's",
    "start": "2572720",
    "end": "2579200"
  },
  {
    "text": "just that it would be convenient if you could have an npm script that would do a bunch of things for you uh you would",
    "start": "2579200",
    "end": "2585280"
  },
  {
    "text": "like it to uh run es lint and and run flow and then build your application",
    "start": "2585280",
    "end": "2591559"
  },
  {
    "text": "with Babel bundle it all together and maybe run the code and so npm run all lets you bundle all of that now you",
    "start": "2591559",
    "end": "2598559"
  },
  {
    "text": "notice some of these things have a green check mark these are the things that you're going to get for free if you're using Create react app if you happen to",
    "start": "2598559",
    "end": "2606200"
  },
  {
    "text": "be using react but otherwise you can just manually install all of those these are some npm scripts that I",
    "start": "2606200",
    "end": "2613359"
  },
  {
    "start": "2610000",
    "end": "2610000"
  },
  {
    "text": "recommend so you want to have a script for Babble that's going to bundle up all of your code get it ready to run you",
    "start": "2613359",
    "end": "2619680"
  },
  {
    "text": "want to be able to run flow itself flow W is just a name I use for the variant",
    "start": "2619680",
    "end": "2625400"
  },
  {
    "text": "that is doing the watch and continually watching my files and running flow again if anything changes then I want to run",
    "start": "2625400",
    "end": "2631760"
  },
  {
    "text": "eslint and I have the D- quiet option so it only tells me about errors I want to",
    "start": "2631760",
    "end": "2637559"
  },
  {
    "text": "be able to run my application so I'm assuming here that this is a node.js app",
    "start": "2637559",
    "end": "2642599"
  },
  {
    "text": "it's not a web app if I were using a web app create react app would take care of",
    "start": "2642599",
    "end": "2647760"
  },
  {
    "text": "that for me or I could set it up myself uh but here I want to run a node app and then finally my start script which I'll",
    "start": "2647760",
    "end": "2654960"
  },
  {
    "text": "run by saying npm start does these four things it lints all my code it checks it",
    "start": "2654960",
    "end": "2661400"
  },
  {
    "text": "with flow it runs Babble to bundle everything up and then runs my application so we'll be Ling on these",
    "start": "2661400",
    "end": "2667760"
  },
  {
    "text": "scripts in our example coming up then I want to set up eslint and the bird in the corner means I'm going to go through",
    "start": "2667760",
    "end": "2673839"
  },
  {
    "text": "this slide pretty quickly probably don't need to jump into detail but you've got your eslint configuration file and it",
    "start": "2673839",
    "end": "2680599"
  },
  {
    "text": "specifies a bunch of rules and here's a list of rules that are very specific to",
    "start": "2680599",
    "end": "2686040"
  },
  {
    "text": "uh using flow and you could obviously pick different settings but it's really great for making sure that you're doing",
    "start": "2686040",
    "end": "2691960"
  },
  {
    "text": "it correctly then I want to set up Babel and so here's a very stripped down",
    "start": "2691960",
    "end": "2697119"
  },
  {
    "start": "2693000",
    "end": "2693000"
  },
  {
    "text": "version of the Babel configuration file and the most important thing here is that I have this transform flow strip",
    "start": "2697119",
    "end": "2703200"
  },
  {
    "text": "types and so that's going to enable Babel to remove the type annotations so that I can actually run the code in a",
    "start": "2703200",
    "end": "2710319"
  },
  {
    "text": "browser uh I need to have this dotf flow config file so all I have to do is run",
    "start": "2710319",
    "end": "2716160"
  },
  {
    "start": "2711000",
    "end": "2711000"
  },
  {
    "text": "flow and knit to create it for me and it will give me this file it won't have this line right here all these sections",
    "start": "2716160",
    "end": "2723559"
  },
  {
    "text": "will be empty and that's mostly okay the main thing you'll probably want to add is that line that I have there to tell",
    "start": "2723559",
    "end": "2730400"
  },
  {
    "text": "it hey don't bother running flow on the files in my node modules directory because that's third party stuff and",
    "start": "2730400",
    "end": "2736640"
  },
  {
    "text": "they probably weren't using flow so don't worry about that part but I could tell it what files to check uh by",
    "start": "2736640",
    "end": "2744040"
  },
  {
    "text": "default it does what you probably want lies is where it should look for type",
    "start": "2744040",
    "end": "2749119"
  },
  {
    "text": "definitions for any thirdparty libraries by default it's going to look in a directory called flow typed that's",
    "start": "2749119",
    "end": "2754680"
  },
  {
    "text": "probably what you want to stick with uh there's some options you can specify but there are none that I commonly use and",
    "start": "2754680",
    "end": "2762440"
  },
  {
    "text": "then there's also an ignore section to say uh I don't",
    "start": "2762440",
    "end": "2767800"
  },
  {
    "text": "want to run on these files and then you can pin yourself to a specific version of of flow if you want to do that so a",
    "start": "2767800",
    "end": "2775920"
  },
  {
    "text": "big red box at the bottom it's very important that you have a flow config file because as I described earlier if",
    "start": "2775920",
    "end": "2783119"
  },
  {
    "text": "you run flow in some subdirectory of your project it goes up and up and up looking for that and what if it doesn't",
    "start": "2783119",
    "end": "2789960"
  },
  {
    "text": "find it it keeps going up and up and up and eventually it hits your home directory and it says I can't go any",
    "start": "2789960",
    "end": "2796599"
  },
  {
    "text": "further I guess you wanted me to run flow on every Javascript file on your hard drive there's no way you wanted",
    "start": "2796599",
    "end": "2803400"
  },
  {
    "text": "that and I don't know why they have this Behavior they shouldn't say if they don't find a file it does nothing and so",
    "start": "2803400",
    "end": "2809440"
  },
  {
    "text": "the impact of this is that your laptop all of a sudden sounds like an airplane taking off because it's checking every",
    "start": "2809440",
    "end": "2816559"
  },
  {
    "text": "file and your CPU usage has spiked like crazy and you got to kill these flow processes",
    "start": "2816559",
    "end": "2823200"
  },
  {
    "text": "so in a Unix kind of environment like a Mac I type kill all",
    "start": "2823200",
    "end": "2829359"
  },
  {
    "text": "flow and that does it but you could also run flow stop this also happens if",
    "start": "2829359",
    "end": "2834720"
  },
  {
    "text": "you've got a flow plugin for your editor and you're off in some directory where you weren't even using flow and you",
    "start": "2834720",
    "end": "2841200"
  },
  {
    "text": "start up your editor now that plugin starts up flow and it does the same thing it hits home directory and your",
    "start": "2841200",
    "end": "2847920"
  },
  {
    "text": "fans start spinning this is the biggest problem in flow in my opinion right now",
    "start": "2847920",
    "end": "2853319"
  },
  {
    "text": "uh so you'll know it's happen because you hear the fan come on uh but the important thing here is create that file",
    "start": "2853319",
    "end": "2861480"
  },
  {
    "text": "so this doesn't happen to you okay uh let me say just a bit more about flow type so it's very easy to",
    "start": "2861480",
    "end": "2868760"
  },
  {
    "start": "2864000",
    "end": "2864000"
  },
  {
    "text": "install and then uh you run flow type to install and what that does it's not installing flow type it's installing",
    "start": "2868760",
    "end": "2875880"
  },
  {
    "text": "type definitions into your project and what it's doing is it's looking at your package Json to see what you depend on",
    "start": "2875880",
    "end": "2881960"
  },
  {
    "text": "and then it goes out to its site to see if definitions are there and if they're there it pulls them down and it puts it",
    "start": "2881960",
    "end": "2887800"
  },
  {
    "text": "in a flow type directory that it creates for you if it doesn't find them it will",
    "start": "2887800",
    "end": "2893160"
  },
  {
    "text": "create type definitions on the Fly and not good ones ones where the type of",
    "start": "2893160",
    "end": "2898240"
  },
  {
    "text": "everything is any they just very weak definitions just to put something out",
    "start": "2898240",
    "end": "2903559"
  },
  {
    "text": "there for you so that's not what you want if you see any of those it might be worth your while to take the",
    "start": "2903559",
    "end": "2909079"
  },
  {
    "text": "time to write the definitions yourself and submit them back so that this doesn't happen to other people in the",
    "start": "2909079",
    "end": "2914680"
  },
  {
    "text": "future that want to use that same library but to give you an example of the kind of things that are out there",
    "start": "2914680",
    "end": "2920839"
  },
  {
    "text": "here's a list of some commonly used libraries that do have flow typed",
    "start": "2920839",
    "end": "2927359"
  },
  {
    "text": "definitions then you want to set up your editor or IDE the final step in my checklist and so I have here list of",
    "start": "2927359",
    "end": "2935040"
  },
  {
    "start": "2928000",
    "end": "2928000"
  },
  {
    "text": "some popular plugins for each of these that you might want to consider and I",
    "start": "2935040",
    "end": "2940640"
  },
  {
    "text": "tested this out in Adam and and uh Visual Studio code those are not editors",
    "start": "2940640",
    "end": "2945680"
  },
  {
    "text": "that I use but it was very easy for me to get it running and I opened up code that had flow type annotations and it",
    "start": "2945680",
    "end": "2952520"
  },
  {
    "text": "right away was showing me errors the integration is really nice uh my editor",
    "start": "2952520",
    "end": "2958079"
  },
  {
    "text": "is vim and so I have a bit more information about this but I won't bore you with the details suffice it to say",
    "start": "2958079",
    "end": "2964559"
  },
  {
    "text": "that if you do use Vim this plug-in ale is just wonderful it supports all kinds",
    "start": "2964559",
    "end": "2970920"
  },
  {
    "text": "of syntax checks for many different languages and flow is just one of them that it supports for JavaScript it",
    "start": "2970920",
    "end": "2977960"
  },
  {
    "text": "automatically sees that you have them installed and it just uses them and shows you the errors right inside",
    "start": "2977960",
    "end": "2985318"
  },
  {
    "text": "Vim okay so let's uh close up here by looking at a sample project that pulls",
    "start": "2985400",
    "end": "2991359"
  },
  {
    "start": "2986000",
    "end": "2986000"
  },
  {
    "text": "all of this together so this is a node.js project that uses a very popular Library low Das and a very unpopular",
    "start": "2991359",
    "end": "2998480"
  },
  {
    "text": "Library liner which is one that I wrote liner reads uh lines from a file and",
    "start": "2998480",
    "end": "3005280"
  },
  {
    "text": "gives them back to you one at a time you'd think that would just be a easy thing in node.js but that's not the case",
    "start": "3005280",
    "end": "3011480"
  },
  {
    "text": "nodejs wants to treat everything as a stream streaming across the new line characters and so you need to do",
    "start": "3011480",
    "end": "3017359"
  },
  {
    "text": "something special if you want to break it up at the new lines and so that liner module does that for me uh so I'm going",
    "start": "3017359",
    "end": "3023599"
  },
  {
    "text": "to use the start case function out of low Dash which takes a string that has words in it and it makes the first",
    "start": "3023599",
    "end": "3030319"
  },
  {
    "text": "character in every word be uppercase so when I'm ready to run this I'm going to say npm start we saw that",
    "start": "3030319",
    "end": "3037319"
  },
  {
    "text": "script earlier remember that's the one that uses npm run all and it does lint and flow and babble and then it runs my",
    "start": "3037319",
    "end": "3044400"
  },
  {
    "text": "code uh so first I need to install my dependencies and so we walked over uh",
    "start": "3044400",
    "end": "3050920"
  },
  {
    "start": "3045000",
    "end": "3045000"
  },
  {
    "text": "all the tooling dependencies I needed earlier but for this specific project I need liner and I need Dash and so I run",
    "start": "3050920",
    "end": "3057760"
  },
  {
    "text": "that command to install those as not Dev dependencies but they're dependencies of my",
    "start": "3057760",
    "end": "3063680"
  },
  {
    "text": "project all right and so here is our code I'm going to start with the the main bit of the code and then we'll look",
    "start": "3063680",
    "end": "3070400"
  },
  {
    "start": "3064000",
    "end": "3064000"
  },
  {
    "text": "at the utility that I wrote in just a bit so I'm importing this thing called filer that's on the next page in a file",
    "start": "3070400",
    "end": "3077079"
  },
  {
    "text": "called filer do JS and that gives me a function and I call that and I pass to",
    "start": "3077079",
    "end": "3082440"
  },
  {
    "text": "it a path to a file and here is that file",
    "start": "3082440",
    "end": "3087480"
  },
  {
    "text": "okay and it's going to invoke this call back function when it's done and it will",
    "start": "3087480",
    "end": "3093640"
  },
  {
    "text": "pass to me the number of lines that it process so uh so I give it a function",
    "start": "3093640",
    "end": "3100599"
  },
  {
    "text": "where it has a parameter that's a number and it doesn't return anything and it's just going to print out the line count",
    "start": "3100599",
    "end": "3106400"
  },
  {
    "text": "and here's that output right there and filer itself is going to read these lines and then output the same lines but",
    "start": "3106400",
    "end": "3113920"
  },
  {
    "text": "notice that the first letter of every word is uppercase a very basic thing that I'm doing here",
    "start": "3113920",
    "end": "3119480"
  },
  {
    "text": "so let's look at the code for filer so here we've got filer JS and I'm",
    "start": "3119480",
    "end": "3126920"
  },
  {
    "text": "pulling in the uh liner module and I'm pulling in the low Dash string module",
    "start": "3126920",
    "end": "3133640"
  },
  {
    "text": "and then I have this one function that I'm exporting at the bottom process file and so here we have some flow",
    "start": "3133640",
    "end": "3139440"
  },
  {
    "text": "annotations path is a string and then the call back is a function with this signature it expects a number and it",
    "start": "3139440",
    "end": "3147000"
  },
  {
    "text": "returns nothing and then this function process file returns nothing and so its type is void so I set my count at zero I",
    "start": "3147000",
    "end": "3154920"
  },
  {
    "text": "create a liner object I tell it about the path then I have to register for for some events when I get a readable event",
    "start": "3154920",
    "end": "3161920"
  },
  {
    "text": "that means that there's some text for me to read I've got some lines and so as long as that remains true I call liner.",
    "start": "3161920",
    "end": "3169799"
  },
  {
    "text": "read I get a line I have to check to see did I really get one if I didn't then I'm done with this event but if I did",
    "start": "3169799",
    "end": "3176559"
  },
  {
    "text": "said I'm going to call start case on it convert the First characters to uppercase and print it out and bump up",
    "start": "3176559",
    "end": "3183640"
  },
  {
    "text": "my count by one and if this was a really long file I may get several of these readable events and when it's finished",
    "start": "3183640",
    "end": "3191280"
  },
  {
    "text": "I'll get an end event and that's when I know it's time to invoke my call back function and so I call the call back",
    "start": "3191280",
    "end": "3198240"
  },
  {
    "text": "with the count I might get an error in that case I'm printing out the error and then export that and so going back to",
    "start": "3198240",
    "end": "3204960"
  },
  {
    "text": "the previous slide notice that the thing that I'm exporting is a function called process file but over here on the import",
    "start": "3204960",
    "end": "3211960"
  },
  {
    "text": "I could call that anything I want so I called it filer over there uh so the",
    "start": "3211960",
    "end": "3217040"
  },
  {
    "text": "main point here is that I threw in some flow type annotations and I could say npm start and it would run eslint run",
    "start": "3217040",
    "end": "3224480"
  },
  {
    "text": "all the flow checks and then run my code including stripping out all the",
    "start": "3224480",
    "end": "3230119"
  },
  {
    "start": "3229000",
    "end": "3229000"
  },
  {
    "text": "annotations so my summary of all of this is that you need to think for yourself",
    "start": "3230119",
    "end": "3235200"
  },
  {
    "text": "does the time required to learn how to use this and to actually put the types into your code uh is that justified or",
    "start": "3235200",
    "end": "3242119"
  },
  {
    "text": "you going to get some benefit out of that and in my experience I've gotten a lot of benefit as I said initially it",
    "start": "3242119",
    "end": "3247520"
  },
  {
    "text": "was Finding simple things like you didn't account for the fact that this variable might be null or undefined and",
    "start": "3247520",
    "end": "3252839"
  },
  {
    "text": "a bad thing might happen at runtime but then later when I had to do big refactorings it was finding all kinds of",
    "start": "3252839",
    "end": "3259480"
  },
  {
    "text": "issues that would have taken me much longer if I wasn't using flow so there are some reasons why I prefer flow a",
    "start": "3259480",
    "end": "3266760"
  },
  {
    "text": "typescript but bottom line is I highly suggest that you use one of these it's made a really big difference in my life",
    "start": "3266760",
    "end": "3273720"
  },
  {
    "text": "as a JavaScript developer along with eslint and prettier that I recommended earlier and you should probably start",
    "start": "3273720",
    "end": "3280680"
  },
  {
    "text": "simple and that's a nice thing about flow is that it does let you start simple you can just annotate some of the",
    "start": "3280680",
    "end": "3286799"
  },
  {
    "text": "files and leave the rest alone until you're ready to add types to those and over time your confidence in being able",
    "start": "3286799",
    "end": "3293920"
  },
  {
    "text": "to work on that code is going to increase and so I have I think 5 minutes",
    "start": "3293920",
    "end": "3299760"
  },
  {
    "text": "left as I said there are many more bonus slides here that you can check out later",
    "start": "3299760",
    "end": "3305319"
  },
  {
    "start": "3301000",
    "end": "3301000"
  },
  {
    "text": "but we've got time for questions and maybe one of your questions will be addressed by one of these slides that we",
    "start": "3305319",
    "end": "3310720"
  },
  {
    "text": "haven't seen yet uh so who's got a",
    "start": "3310720",
    "end": "3315319"
  },
  {
    "text": "question it's the first one that's the",
    "start": "3317400",
    "end": "3321680"
  },
  {
    "text": "hardest well let let me jump to uh one more thing to show you that is a",
    "start": "3323319",
    "end": "3329359"
  },
  {
    "text": "difference between uh flow and typescript and that is this distinction",
    "start": "3329359",
    "end": "3337160"
  },
  {
    "start": "3335000",
    "end": "3335000"
  },
  {
    "text": "between nominal and structural typing so nominal typing is when you recognize a",
    "start": "3337160",
    "end": "3343000"
  },
  {
    "text": "type just by its name structural typing is when you think a thing is that type",
    "start": "3343000",
    "end": "3348280"
  },
  {
    "text": "because it just matches the other thing earlier we had an example where I had something called named type and so it",
    "start": "3348280",
    "end": "3355280"
  },
  {
    "text": "could be the case that anything that has a name property is good it's kind of like Duck typing that you've heard about",
    "start": "3355280",
    "end": "3362160"
  },
  {
    "text": "but in nominal typing if your type is a class you might say that just because I",
    "start": "3362160",
    "end": "3368760"
  },
  {
    "text": "have this cat class and this car class and maybe they both have a name I don't",
    "start": "3368760",
    "end": "3374960"
  },
  {
    "text": "want to be able to use a car everywhere where I use a cat if I said it should be a cat it should be a cat or at least",
    "start": "3374960",
    "end": "3381559"
  },
  {
    "text": "something in the inheritance hierarchy of that but if you use nominal typing",
    "start": "3381559",
    "end": "3386920"
  },
  {
    "text": "that would allow you to use the car anywhere you use a cat as long as they have the same properties and the same",
    "start": "3386920",
    "end": "3392640"
  },
  {
    "text": "methods it turns out that typescript uses uh wait I I reversed that there I",
    "start": "3392640",
    "end": "3398319"
  },
  {
    "text": "was talking about structural typing nominal is by name so typescript uses",
    "start": "3398319",
    "end": "3403599"
  },
  {
    "text": "structural typing or duct typing flow uses structural typing when you specify",
    "start": "3403599",
    "end": "3410319"
  },
  {
    "text": "object literals and their properties but if you specify a class then in that case",
    "start": "3410319",
    "end": "3415599"
  },
  {
    "text": "it uses nominal typing and that makes a difference and so I walk through an example like that and here I have a",
    "start": "3415599",
    "end": "3423240"
  },
  {
    "start": "3419000",
    "end": "3419000"
  },
  {
    "text": "living thing class and then I say plants and animals are living things and dogs",
    "start": "3423240",
    "end": "3428640"
  },
  {
    "text": "and cats are kinds of animals and then I create this array of animals it's empty",
    "start": "3428640",
    "end": "3434079"
  },
  {
    "text": "now and then I push into my array a dog and a cat and a plant uh that's not good",
    "start": "3434079",
    "end": "3440079"
  },
  {
    "text": "I shouldn't be able to put a plant object into this array that is only supposed to hold animals and Flo says",
    "start": "3440079",
    "end": "3447359"
  },
  {
    "text": "that's an error typescript says it's all good and the reason it's good is that",
    "start": "3447359",
    "end": "3452920"
  },
  {
    "text": "all five of these classes they don't have any Properties or any methods so they all",
    "start": "3452920",
    "end": "3458000"
  },
  {
    "text": "match uh I think that's a little bit odd that it doesn't complain about that and",
    "start": "3458000",
    "end": "3464200"
  },
  {
    "text": "so that's another reason why I prefer flow over typescript all right well I think that's",
    "start": "3464200",
    "end": "3470240"
  },
  {
    "start": "3470000",
    "end": "3470000"
  },
  {
    "text": "all the time that I have but if you have any questions about flow or anything in the JavaScript world uh please catch me",
    "start": "3470240",
    "end": "3477760"
  },
  {
    "text": "sometime have lunch with me tomorrow I'd be glad to talk with you about that and you have all my contact information on",
    "start": "3477760",
    "end": "3483359"
  },
  {
    "text": "that first slide feel free to shoot me an email so thank you very",
    "start": "3483359",
    "end": "3488640"
  },
  {
    "text": "much",
    "start": "3488680",
    "end": "3491680"
  }
]