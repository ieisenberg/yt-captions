[
  {
    "text": "so I'm going to start now good afternoon hope you're having a good day today here in Sydney and I'm excited to be speaking",
    "start": "5879",
    "end": "11719"
  },
  {
    "text": "about we server components today so why should you care about them",
    "start": "11719",
    "end": "17680"
  },
  {
    "text": "obviously react and JavaScript is ever relevant and with uh RC we have a",
    "start": "17680",
    "end": "22920"
  },
  {
    "text": "completely new way to build react apps react server components allow us to fade the boundary between the server and the",
    "start": "22920",
    "end": "28880"
  },
  {
    "text": "client to create Rich us user interfaces uh with minimal client side code while",
    "start": "28880",
    "end": "33920"
  },
  {
    "text": "still maintaining interactivity and performance so my goal today is to introduce motivate and provide resources",
    "start": "33920",
    "end": "40760"
  },
  {
    "text": "about RSC as a non-front developer you will be able to get an understanding and",
    "start": "40760",
    "end": "46199"
  },
  {
    "text": "overview on what's happening on the front and side of things and as a front developer you will get the tools needed",
    "start": "46199",
    "end": "51640"
  },
  {
    "text": "to start building apps with RSC and consider them for your next project so before I start let me",
    "start": "51640",
    "end": "58239"
  },
  {
    "text": "introduce myself I'm my name is name is Aurora I'm from Norway and I work as a consultant in Oso I'm a full stack Dev",
    "start": "58239",
    "end": "65320"
  },
  {
    "text": "but I work mostly on web these days and I'm actively building with react Ser components in my current consultancy",
    "start": "65320",
    "end": "71759"
  },
  {
    "text": "project I bring to you today my view as a developer joining The Cutting Edge web world and how I'm learning and working",
    "start": "71759",
    "end": "78240"
  },
  {
    "text": "with modern technology the talking points of today will be first rendering strategies then",
    "start": "78240",
    "end": "84880"
  },
  {
    "text": "we'll get to rect server components what they are how they work and the benefits and the drawbacks",
    "start": "84880",
    "end": "90560"
  },
  {
    "text": "then we'll go through the nextjs app router then on to best practices and patterns when using RC uh in nextjs and",
    "start": "90560",
    "end": "98000"
  },
  {
    "text": "afterwards I'm going to show you some examples of RC in a demo app that I've made and finally I'll give my thoughts",
    "start": "98000",
    "end": "103880"
  },
  {
    "text": "on working with RC in the real project and the future of react server components so let's begin with rendering",
    "start": "103880",
    "end": "111119"
  },
  {
    "text": "strategies you can't have a talk about web development without mentioning them it's a crucial prerequisite I won't",
    "start": "111119",
    "end": "117000"
  },
  {
    "text": "mention every type of rendering and strategy um rendering strategy and history of the web here but I will pick",
    "start": "117000",
    "end": "122799"
  },
  {
    "text": "and explain some relevant topics this stuff will probably be fam familiar to you guys so static web rendering is the most",
    "start": "122799",
    "end": "130319"
  },
  {
    "text": "basic rendering pattern where all web pages are assembled beforehand and uploaded static files to a storage",
    "start": "130319",
    "end": "135560"
  },
  {
    "text": "bucket it can be built with plain HTML and CSS or combined with JavaScript it's",
    "start": "135560",
    "end": "141319"
  },
  {
    "text": "delivered exactly the way it's storn meaning nothing will change unless the code is changed and although quite",
    "start": "141319",
    "end": "146640"
  },
  {
    "text": "simple and efficient it doesn't handle Dynamic data or interactive we well and is Impractical to maintain use case",
    "start": "146640",
    "end": "153640"
  },
  {
    "text": "could be an inform informational website for a business you could say that this is the old way of making websites and",
    "start": "153640",
    "end": "159560"
  },
  {
    "text": "it's not used very much anymore multi-page applications on the other hand can handle Dynamic data in",
    "start": "159560",
    "end": "166959"
  },
  {
    "text": "npas HTML in data is merged on the server per request and sent as one package to the client the user opens the",
    "start": "166959",
    "end": "174120"
  },
  {
    "text": "browser and is served the merge result and the entire page will reload per request or navigation to a new page page",
    "start": "174120",
    "end": "180840"
  },
  {
    "text": "they can be created with for example the asp.net MVC pattern or with PHP or Ruby on Rails use cases would typically be an",
    "start": "180840",
    "end": "188319"
  },
  {
    "text": "e e-commerce app for example Amazon is an NPA so what are the pros of",
    "start": "188319",
    "end": "194799"
  },
  {
    "text": "npas firstly all the page content can be read and indexed by search engines because it is rendered HTML allowing",
    "start": "194799",
    "end": "201799"
  },
  {
    "text": "them to appear in search results and be optimized for it then there is no restriction on the most Pages you can",
    "start": "201799",
    "end": "207959"
  },
  {
    "text": "add performance is going to be the same meaning they have unlimited scalability and lastly they provide more",
    "start": "207959",
    "end": "214280"
  },
  {
    "text": "website insights for example Google analytics can create reports for each page and the cons they have a slower",
    "start": "214280",
    "end": "221840"
  },
  {
    "text": "overall performance because they fetch each page as a package of HTML CSS and Js from the server as it's being",
    "start": "221840",
    "end": "228000"
  },
  {
    "text": "navigated to and they can require more effort to create features and they can be harder to maintain because each page",
    "start": "228000",
    "end": "234959"
  },
  {
    "text": "needs to be maintained separately then we have the single page",
    "start": "234959",
    "end": "240040"
  },
  {
    "text": "application or SBA Spa a spa will typically be a react app of create react",
    "start": "240040",
    "end": "246480"
  },
  {
    "text": "app or vit or angular UJS Etc uh it's been the most common way to create an",
    "start": "246480",
    "end": "252159"
  },
  {
    "text": "application for many years and in a spa the bundle.js file includes everything",
    "start": "252159",
    "end": "257759"
  },
  {
    "text": "needed to build the app the entire HTML is uh created on the client when a user opens the browser on the apps URL and",
    "start": "257759",
    "end": "265720"
  },
  {
    "text": "the page is blank until the JavaScript is downloaded pared and executed then the uh framework like react will start",
    "start": "265720",
    "end": "271680"
  },
  {
    "text": "building it inside the root div and finally load the data and after it's loaded only data in Json format is",
    "start": "271680",
    "end": "277759"
  },
  {
    "text": "needed to update the UI the use case for an SBA could typically um be any web app",
    "start": "277759",
    "end": "283280"
  },
  {
    "text": "that needs to be highly interactive so what are the pros of",
    "start": "283280",
    "end": "288320"
  },
  {
    "text": "using a spa first they're fast there's no lag they've got smooth Transitions",
    "start": "288320",
    "end": "293680"
  },
  {
    "text": "and instant information present uh this is because everything is loaded initially and not requested per",
    "start": "293680",
    "end": "300720"
  },
  {
    "text": "page as with an MPA secondly they're easy to debug because everything can be logged in the browser because it's",
    "start": "300720",
    "end": "307160"
  },
  {
    "text": "browser only such as data page elements network operations and third since everything is",
    "start": "307160",
    "end": "313120"
  },
  {
    "text": "downloaded initially they can work offline and cache data and update when",
    "start": "313120",
    "end": "318520"
  },
  {
    "text": "possible but there are some significant cons most importantly they have a slow initial load which is increased with",
    "start": "318520",
    "end": "325440"
  },
  {
    "text": "everything that is built on top such as libraries meanwhile the user is just looking at a blank screen and then",
    "start": "325440",
    "end": "330639"
  },
  {
    "text": "afterwards a bunch of loading Spinners next search engines like Google cannot know what's on the page because",
    "start": "330639",
    "end": "337039"
  },
  {
    "text": "the crawler read strings like HTML um so typically a spa won't show show up in",
    "start": "337039",
    "end": "342080"
  },
  {
    "text": "Google search unless optimized in certain ways they also need JavaScript to function and therefore they cannot be",
    "start": "342080",
    "end": "348759"
  },
  {
    "text": "progressively enhanced and furthermore they require tools existent in modern browsers and use a lot of resources and",
    "start": "348759",
    "end": "356520"
  },
  {
    "text": "finally they cannot hide information from the client because data only exists there meaning things such as API Keys",
    "start": "356520",
    "end": "363400"
  },
  {
    "text": "cannot be stored in a spa they need a backend or serus function for this so the key difference between an",
    "start": "363400",
    "end": "370759"
  },
  {
    "text": "spa and MPA in an Spa everything loads initially and only data uh in Json",
    "start": "370759",
    "end": "375960"
  },
  {
    "text": "format is requested for making updates whereas in MPA the entire page reloads per",
    "start": "375960",
    "end": "382880"
  },
  {
    "text": "request this brings us to SSR which combines the advantages of an NPA and an",
    "start": "387560",
    "end": "393039"
  },
  {
    "text": "SBA instead of generating the entire application on the client from the JavaScript bundle serers side rendering",
    "start": "393039",
    "end": "399240"
  },
  {
    "text": "means that you can pre-render the initial pages on the server and send them on demand this lets the user go to a URL",
    "start": "399240",
    "end": "406440"
  },
  {
    "text": "and instantly see a fully formed page with components and they can start reading the content without waiting for",
    "start": "406440",
    "end": "412120"
  },
  {
    "text": "react to build the page the JavaScript required to uh interact with the page is then sent alongside the HTML",
    "start": "412120",
    "end": "420840"
  },
  {
    "text": "in relation to SSR we also have something called Static site generation or SSG which lets us pre-render pages in",
    "start": "420840",
    "end": "427400"
  },
  {
    "text": "The build process of the app and upload them to a storage bucket the result of SSG is the same as it with a quick and",
    "start": "427400",
    "end": "433639"
  },
  {
    "text": "simple static website rendering but we can generate pages from for example react code our problem with SSG is that",
    "start": "433639",
    "end": "440680"
  },
  {
    "text": "the build time scales linearly with a number of pages meaning if you have a lot of pages you could be waiting a long",
    "start": "440680",
    "end": "445720"
  },
  {
    "text": "time to build your app and you have to rebuild whenever the data changes",
    "start": "445720",
    "end": "450919"
  },
  {
    "text": "service side rendering is Implement implemented in the so-called meta Frameworks which are Frameworks around",
    "start": "450919",
    "end": "456800"
  },
  {
    "text": "other Frameworks such as uh remix and next for react spel kit for spelt and",
    "start": "456800",
    "end": "462240"
  },
  {
    "text": "next for you and these Frameworks are full stack implementations of a web app meaning they have their own server with",
    "start": "462240",
    "end": "468800"
  },
  {
    "text": "things happening they support both SSR and SSG and can decide when to use what for",
    "start": "468800",
    "end": "475560"
  },
  {
    "text": "example an app has a couple of pages which one has data that is changing so in the build process all the static",
    "start": "475560",
    "end": "481720"
  },
  {
    "text": "pages are rendered and then when the user opens the app only the page has that has Dynamic data will be rendered",
    "start": "481720",
    "end": "487560"
  },
  {
    "text": "at request time these meta Frameworks also typically include things like file based routing apis to handle data",
    "start": "487560",
    "end": "494280"
  },
  {
    "text": "fetching on the server caching capabilities and image optimization",
    "start": "494280",
    "end": "499800"
  },
  {
    "text": "features let's get back to the JavaScript that is sent along with the pre-rendered pages in SSR we still need",
    "start": "499800",
    "end": "506560"
  },
  {
    "text": "JavaScript to run on the client to handle interactivity so instead of conjuring all the Dom",
    "start": "506560",
    "end": "512039"
  },
  {
    "text": "nodes from scratch the framework like react will adopt the existing HTML this",
    "start": "512039",
    "end": "517479"
  },
  {
    "text": "process is known as hydration the framework will attach the event handlers and for example fire",
    "start": "517479",
    "end": "523000"
  },
  {
    "text": "effects in ad State and then afterwards the page is fully interactive however it essentially has",
    "start": "523000",
    "end": "528959"
  },
  {
    "text": "to rebuild the entire page and compare it with the existing one to know what to hydrate this quote by react core team",
    "start": "528959",
    "end": "536320"
  },
  {
    "text": "member Dan abov explains it well hydration is like water ing the dry HTML with the water of interact interactivity",
    "start": "536320",
    "end": "542880"
  },
  {
    "text": "and event handlers so there you have SSR in a nutshell done by modern Frameworks like",
    "start": "542880",
    "end": "549760"
  },
  {
    "text": "nextjs lets you load the initial page quickly it still have an interactive",
    "start": "549760",
    "end": "556000"
  },
  {
    "text": "Spa now this sounds great however SSR isn't perfect first after the initial",
    "start": "560839",
    "end": "566160"
  },
  {
    "text": "fetch of the HTML the browser will download the JS code pars it and execute it so this causes the pre-rendered HTML",
    "start": "566160",
    "end": "573240"
  },
  {
    "text": "to look fully interactive but in fact it doesn't contain any JavaScript yet so the user is stuck in a place often",
    "start": "573240",
    "end": "579680"
  },
  {
    "text": "referenced as uncanny valley where they would click a button but nothing happens and the time until they can interact",
    "start": "579680",
    "end": "586079"
  },
  {
    "text": "with the app might even be longer than what it would have been for a plain Spa version of the app so why does this happen first you",
    "start": "586079",
    "end": "594240"
  },
  {
    "text": "have to fetch everything before you can load anything all the HTML with the data fetched must be processed on the server",
    "start": "594240",
    "end": "600839"
  },
  {
    "text": "before it can be sent to the client second you have to load everything before you can hydrate anything that's",
    "start": "600839",
    "end": "607240"
  },
  {
    "text": "because react needs to match between the server when the one in the browser uh to know what to",
    "start": "607240",
    "end": "612560"
  },
  {
    "text": "hydrate third you have to hydrate everything before you can interact with everything uh react starts the hydration",
    "start": "612560",
    "end": "619760"
  },
  {
    "text": "and doesn't stop until it's done and there are many techniques to uh",
    "start": "619760",
    "end": "625360"
  },
  {
    "text": "being utilized to in different Frameworks to solve the hydration problem partial hydration can be used to",
    "start": "625360",
    "end": "631079"
  },
  {
    "text": "define that only certain components need to have Js attached to them for example in Astro you can Define which common",
    "start": "631079",
    "end": "637480"
  },
  {
    "text": "components to load JavaScript for with client load and we'll also see partial hydration in Ser react server components",
    "start": "637480",
    "end": "644959"
  },
  {
    "text": "later with Progressive hydration you can lazily load components JavaScript for for example an astro with client visible",
    "start": "644959",
    "end": "651880"
  },
  {
    "text": "or react spense selective hydration lets you prioritize which component to make",
    "start": "651880",
    "end": "657240"
  },
  {
    "text": "interactive first based on user interaction this can also be done with suspense and there are other methods",
    "start": "657240",
    "end": "663639"
  },
  {
    "text": "being utilized as well in Frameworks such as quick which has its own thing called resum",
    "start": "663639",
    "end": "668839"
  },
  {
    "text": "ability let's also mention the concept of streaming it's a part of the fetch API of es6 it's available available in",
    "start": "668839",
    "end": "675560"
  },
  {
    "text": "react 18 and it's a big part of react server components performance streaming allows you to break a request down into",
    "start": "675560",
    "end": "682160"
  },
  {
    "text": "smaller chunks and progressively send those chunks from the server to the client and then render each chunk as",
    "start": "682160",
    "end": "688360"
  },
  {
    "text": "it's streamed in we can use it to send components down to the client as soon as they've been",
    "start": "688360",
    "end": "694399"
  },
  {
    "text": "generated so finally with all this knowledge we can move to react server components and how they solve the",
    "start": "694399",
    "end": "700800"
  },
  {
    "text": "problems we saw earlier what if we could decide when we needed the behavior of a spa or an A or your SSR all in the same",
    "start": "700800",
    "end": "708760"
  },
  {
    "text": "stack I'm going to be using some simplified uh examples of code for my demo in the section",
    "start": "708760",
    "end": "714800"
  },
  {
    "text": "here so what are they react server components are components that run exclusively on the server and are then",
    "start": "714800",
    "end": "721440"
  },
  {
    "text": "streamed to the client server components never re render they run once on the server to generate the UI and their",
    "start": "721440",
    "end": "728880"
  },
  {
    "text": "JavaScript is never sent to the client and when I say render on the server I mean the server that is part of",
    "start": "728880",
    "end": "735279"
  },
  {
    "text": "the full stack framework such as nextjs or during the build process of the app not some net backend API this is the",
    "start": "735279",
    "end": "742440"
  },
  {
    "text": "front end's own back end which in many cases eliminate the need for writing a net API",
    "start": "742440",
    "end": "749920"
  },
  {
    "text": "server components differ from serers side rendering because they are never hydrated meaning the resulting app is",
    "start": "753040",
    "end": "758959"
  },
  {
    "text": "partially hydrated so hydration to non RC components can happen concurrently",
    "start": "758959",
    "end": "764120"
  },
  {
    "text": "with RC streaming in since the compute load is shared between the client and the",
    "start": "764120",
    "end": "769560"
  },
  {
    "text": "server so since RCS are exclusively run on the server we can write database queries right inside our components",
    "start": "769560",
    "end": "777040"
  },
  {
    "text": "here's an example of a simple uh server component called jokes list I can qu my database through an orm like Prisma and",
    "start": "777040",
    "end": "783800"
  },
  {
    "text": "have the data available the component fully rendered before it sent to the client server components also int",
    "start": "783800",
    "end": "790839"
  },
  {
    "text": "introduce async components basically an async function that can async Cony fetch data on the server without causing any",
    "start": "790839",
    "end": "797800"
  },
  {
    "text": "issues for the client side you can do any kind of data fetching in here such as calling your",
    "start": "797800",
    "end": "803839"
  },
  {
    "text": "API so because react server components only render on the server this means that a big chunk chunk of reacts API is",
    "start": "803839",
    "end": "810800"
  },
  {
    "text": "incompatible with them for example we can't use State because State can change",
    "start": "810800",
    "end": "816360"
  },
  {
    "text": "and but Ser components never really render and we can't use effects because effects only run after the render on the",
    "start": "816360",
    "end": "822120"
  },
  {
    "text": "client but server components never make it to the client we also can't use any browser",
    "start": "822120",
    "end": "827480"
  },
  {
    "text": "specific apis because they don't exist there such as window.location and we can't use onclick",
    "start": "827480",
    "end": "832920"
  },
  {
    "text": "or unchange because they require JavaScript so server components themselves are simple but the react",
    "start": "832920",
    "end": "839360"
  },
  {
    "text": "server component world is more complex we still want to have interactive components that include State and",
    "start": "839360",
    "end": "845680"
  },
  {
    "text": "effects and event handlers so because of this distinction there are now two types of react",
    "start": "845680",
    "end": "851720"
  },
  {
    "text": "components server components and client components client components are the normal react components that you can do",
    "start": "851720",
    "end": "858519"
  },
  {
    "text": "whatever you used to inside not that they are still pre-rendered uh on the server during the build and then",
    "start": "858519",
    "end": "864399"
  },
  {
    "text": "hydrated as with normal SSR however client components must be",
    "start": "864399",
    "end": "870399"
  },
  {
    "text": "marked with use client this allows us to use things like State and effects and on",
    "start": "870399",
    "end": "876160"
  },
  {
    "text": "click as",
    "start": "876160",
    "end": "878759"
  },
  {
    "text": "normal so here's an explanation from the nextjs documentation on the limitation in servant and client components if you",
    "start": "882880",
    "end": "889720"
  },
  {
    "text": "need to fetch data access backend resources keep sensitive information on the server or keep large dependen on the",
    "start": "889720",
    "end": "896000"
  },
  {
    "text": "server you use a server component and if you need to add interactivity like on click or on change use State use effects",
    "start": "896000",
    "end": "903279"
  },
  {
    "text": "or use browser only apis use a client",
    "start": "903279",
    "end": "907720"
  },
  {
    "text": "component how do react server components work what happens is that react renders",
    "start": "908959",
    "end": "914600"
  },
  {
    "text": "server components into a special format called the RSC payload it's a streamable format that represents the Dom like",
    "start": "914600",
    "end": "921320"
  },
  {
    "text": "serialized version of a react tree the RSC payload contains the rendered server components with holes of",
    "start": "921320",
    "end": "928360"
  },
  {
    "text": "references to client components and the props they pass down to them it's used both to generate the pre-rendered HTML",
    "start": "928360",
    "end": "934800"
  },
  {
    "text": "on the server and to update the Dom on the client without a need for",
    "start": "934800",
    "end": "939839"
  },
  {
    "text": "JavaScript so here's what it looks like in the console we have the initial serice side rendered HTML of the",
    "start": "939839",
    "end": "946639"
  },
  {
    "text": "page um as well as the RSC payloads identifiable by thecore RSC",
    "start": "946639",
    "end": "954120"
  },
  {
    "text": "name and multiple client side JS bundles so all of these are used together to",
    "start": "954120",
    "end": "959600"
  },
  {
    "text": "build the interactive page and since this uh jokes this component is defined as server only it doesn't need to be",
    "start": "959600",
    "end": "966480"
  },
  {
    "text": "hydrated and it's JavaScript isn't shipped at all so as with everything it's quite complex when you start",
    "start": "966480",
    "end": "972120"
  },
  {
    "text": "digging we're just going to leave it at this for now when an RC needs to be rendered due",
    "start": "972120",
    "end": "979120"
  },
  {
    "text": "to a data change it refreshes on the server and seamlessly merges into the existing Dom without a hard refresh",
    "start": "979120",
    "end": "986240"
  },
  {
    "text": "updating only the parts that have changed as a result the client stated preserve even as parts of the view are",
    "start": "986240",
    "end": "992399"
  },
  {
    "text": "updated from the server this is possible because the RC payload only contains references to the client components and",
    "start": "992399",
    "end": "998839"
  },
  {
    "text": "can leave them untouched what are the benefits of using",
    "start": "998839",
    "end": "1004040"
  },
  {
    "text": "react server components firstly data fetching data fetching can happen in components before",
    "start": "1004040",
    "end": "1010600"
  },
  {
    "text": "they are sent to the client and will be faster since they can call the API or database in proximity to the resource",
    "start": "1010600",
    "end": "1017639"
  },
  {
    "text": "and inside rsc's you have access to all your backend resources next they can increase",
    "start": "1017639",
    "end": "1023839"
  },
  {
    "text": "security by keeping sensitive data and logic like API keys on the server and never risk exposing",
    "start": "1023839",
    "end": "1030438"
  },
  {
    "text": "them then caching by rendering on the server the result can be cached and",
    "start": "1030439",
    "end": "1035640"
  },
  {
    "text": "reused on subsequent request and across users and bundle size server components",
    "start": "1035640",
    "end": "1041319"
  },
  {
    "text": "allow you to keep large appendices on the server meaning you can exclude all the JavaScript for those components from",
    "start": "1041319",
    "end": "1047160"
  },
  {
    "text": "the bundle without restricting your use of them for example a library like low Dash leading to a more performant",
    "start": "1047160",
    "end": "1054760"
  },
  {
    "text": "application server components can further more be streamed meaning they can be sent in chunks and viewed as they",
    "start": "1054760",
    "end": "1060320"
  },
  {
    "text": "become ready therefore they integrate naturally with react 18",
    "start": "1060320",
    "end": "1065919"
  },
  {
    "text": "suspense and then finally the developer experience there's a lot less hassle on the client with effects and keeping data",
    "start": "1065919",
    "end": "1072880"
  },
  {
    "text": "in the state just fetch it async of the client",
    "start": "1072880",
    "end": "1077919"
  },
  {
    "text": "RC however comes with some drawbacks firstly they require a",
    "start": "1081520",
    "end": "1086640"
  },
  {
    "text": "framework in practice you will only be using them in Frameworks like next to yes which is per now the only reasonable",
    "start": "1086640",
    "end": "1093080"
  },
  {
    "text": "way to use them you become bound to the next's way of doing things and it can be a lot harder to",
    "start": "1093080",
    "end": "1099600"
  },
  {
    "text": "debug second they create increased complexity as a web developer you now",
    "start": "1099600",
    "end": "1104840"
  },
  {
    "text": "need to understand a lot more Concepts uh than before when you were just making a Spa with create react app such as what",
    "start": "1104840",
    "end": "1111480"
  },
  {
    "text": "you can't and can't do on the server next it can be hard to onboard",
    "start": "1111480",
    "end": "1116840"
  },
  {
    "text": "new developers because the learning curve is a lot steeper when aiming to write quality apps and finally it's",
    "start": "1116840",
    "end": "1123039"
  },
  {
    "text": "still relatively new and not everything has been figured out such as testing and comp compatibility with other Frameworks",
    "start": "1123039",
    "end": "1130120"
  },
  {
    "text": "you risk having to refactory things or write work grounds for example material UI just became uh compatible last July",
    "start": "1130120",
    "end": "1138000"
  },
  {
    "text": "and there have been a of BU bugs since the app router was marked stable but it",
    "start": "1138000",
    "end": "1143080"
  },
  {
    "text": "seems to be settling down now how can you get started with",
    "start": "1143080",
    "end": "1148720"
  },
  {
    "text": "RSC as mentioned the most reasonable way right now is in the nextjs app router",
    "start": "1148720",
    "end": "1154240"
  },
  {
    "text": "available from version 13 and onwards so next JS is made by versel and is Battle",
    "start": "1154240",
    "end": "1160080"
  },
  {
    "text": "tested and Enterprise ready react server components are part of react 18 but developed closely with versel and nextjs",
    "start": "1160080",
    "end": "1167120"
  },
  {
    "text": "which is good for building apps with them because everything is optimized and working smoothly and having the entire",
    "start": "1167120",
    "end": "1172240"
  },
  {
    "text": "react ecosystem follow to make an nextjs 13 or 14 app",
    "start": "1172240",
    "end": "1178280"
  },
  {
    "text": "run this MPX create command and define whether you want to use typescript and tell lnd and such and then you will need",
    "start": "1178280",
    "end": "1184720"
  },
  {
    "text": "the app router options set to yes to use RSC that will generate boiler plate for",
    "start": "1184720",
    "end": "1190720"
  },
  {
    "text": "you and you can start using react server components there's not a lot of files to confuse you it's mostly standard stuff",
    "start": "1190720",
    "end": "1196640"
  },
  {
    "text": "like package Json TS conf and some Tailwind esent what matters is",
    "start": "1196640",
    "end": "1201919"
  },
  {
    "text": "everything inside the app directory so in app router you'll be coding server first meaning everything",
    "start": "1201919",
    "end": "1208559"
  },
  {
    "text": "you do is server component unless you specify otherwise which means that the layout and the page files here are",
    "start": "1208559",
    "end": "1215440"
  },
  {
    "text": "server components by default not going to spend so much time on the pag rer today but basically you",
    "start": "1215440",
    "end": "1221400"
  },
  {
    "text": "don't have to use functions like get server side props uh because everything is server side by default and you can",
    "start": "1221400",
    "end": "1227640"
  },
  {
    "text": "fetch server data just by calling for example an API inside the component it's a lot more",
    "start": "1227640",
    "end": "1233039"
  },
  {
    "text": "straightforward there's also a lot of changes to the file based routing compared to the pages router but I'm",
    "start": "1233039",
    "end": "1238200"
  },
  {
    "text": "just going to explain the new app router way now in the app router you define routes",
    "start": "1238200",
    "end": "1243880"
  },
  {
    "text": "by making folders containing a page. TSX that makes it a valid route have some",
    "start": "1243880",
    "end": "1249679"
  },
  {
    "text": "routes here uh SL jokes new and then a joke ID Dynamic route uh meaning it's",
    "start": "1249679",
    "end": "1255240"
  },
  {
    "text": "going to be parameterized then you can use files with reserved names such as not found",
    "start": "1255240",
    "end": "1260760"
  },
  {
    "text": "and error. TSX which are eror boundaries that will render inside the layout of",
    "start": "1260760",
    "end": "1265840"
  },
  {
    "text": "the um the route as well as creating a suspense",
    "start": "1265840",
    "end": "1271279"
  },
  {
    "text": "boundary and all of these can be placed um wherever you want to make them ganized to the route or to the sub",
    "start": "1271279",
    "end": "1279520"
  },
  {
    "text": "routes you can also Define API routes in here like in the pages router the route. TS file is a reserved name and will",
    "start": "1279679",
    "end": "1286440"
  },
  {
    "text": "allow you to create API endpoints",
    "start": "1286440",
    "end": "1290519"
  },
  {
    "text": "then there is support for SEO with for example meta tags they can be added to any page or layout and will be or can be",
    "start": "1294520",
    "end": "1301200"
  },
  {
    "text": "generated dynamically for example using the route params so with xgs comes a lot of",
    "start": "1301200",
    "end": "1307279"
  },
  {
    "text": "optimization such as caching all pages generated in the build can be uh cached on ver CDN if you host it there they",
    "start": "1307279",
    "end": "1314880"
  },
  {
    "text": "will optimize your images if you use image tag and do things like preload pages when a user hovers a",
    "start": "1314880",
    "end": "1321880"
  },
  {
    "text": "link so how do we use react server components in nextjs the right way what",
    "start": "1321880",
    "end": "1327159"
  },
  {
    "text": "are the best practices and development patterns to get the most out of them the best practice is going to be to",
    "start": "1327159",
    "end": "1334080"
  },
  {
    "text": "move your client code to the leaves of the component Tree in this way you ensure you do not ship any unnecessary",
    "start": "1334080",
    "end": "1340760"
  },
  {
    "text": "JavaScript to the client then react will hydrate only these client leaves as we know as partial hydration you couldn't",
    "start": "1340760",
    "end": "1348000"
  },
  {
    "text": "the just put Ed client on your route and code however you want but that means your all your common components will",
    "start": "1348000",
    "end": "1353919"
  },
  {
    "text": "have their JS shipped and be hydrated which just Tes takes us back to normal service side",
    "start": "1353919",
    "end": "1359720"
  },
  {
    "text": "rendering to use a client component in a Ser component you can simply import it",
    "start": "1359720",
    "end": "1365240"
  },
  {
    "text": "here the delete functionality has been extracted to a component uh in the delete joke button with use client",
    "start": "1365240",
    "end": "1371039"
  },
  {
    "text": "because it needs an onclick event handler however when going the other way around you cannot do the same without",
    "start": "1371039",
    "end": "1377400"
  },
  {
    "text": "turning the server component into a client",
    "start": "1377400",
    "end": "1381519"
  },
  {
    "text": "component instead you have to slot them as props and they will fit as separate",
    "start": "1383480",
    "end": "1388520"
  },
  {
    "text": "chunks into the client tree the client component does not know what is being passed down and this can be referred to",
    "start": "1388520",
    "end": "1395360"
  },
  {
    "text": "as the doughnut pattern this means that our tree can",
    "start": "1395360",
    "end": "1401279"
  },
  {
    "text": "look like anything we want and we can add client side logic in the parent components as well only the green",
    "start": "1401279",
    "end": "1407000"
  },
  {
    "text": "components are hydrated and contain J is here the rest is just HTML with this pattern we can",
    "start": "1407000",
    "end": "1413760"
  },
  {
    "text": "furthermore Implement things like State Management by providing a wrapper client component with state for example using",
    "start": "1413760",
    "end": "1420480"
  },
  {
    "text": "react context which only works for client side we can use the state in the leaves without converting server",
    "start": "1420480",
    "end": "1426159"
  },
  {
    "text": "components in between for example we can make an error message provider or a theme",
    "start": "1426159",
    "end": "1431880"
  },
  {
    "text": "provider when combined this allows us to make apps that are extremely performant due to their large amount of static",
    "start": "1431880",
    "end": "1438000"
  },
  {
    "text": "content while still being fully interactive you could have a donut pattern collapsible sidebar a theme",
    "start": "1438000",
    "end": "1443760"
  },
  {
    "text": "toggle provider search uh and buttons on the client side and then the rest can be static and you can share your state",
    "start": "1443760",
    "end": "1450840"
  },
  {
    "text": "between components however you need when building an RSC component tree",
    "start": "1450840",
    "end": "1456960"
  },
  {
    "text": "there will be some limitations between the server and the client for example since the client exists on the client C",
    "start": "1456960",
    "end": "1464159"
  },
  {
    "text": "component exists on the client and the server component on the server props need to be ser realizable that means",
    "start": "1464159",
    "end": "1470159"
  },
  {
    "text": "that we cannot pass functions through the server boundary instead we must create API",
    "start": "1470159",
    "end": "1476279"
  },
  {
    "text": "endpoints to communicate between them when we can't use props or react server",
    "start": "1476279",
    "end": "1481840"
  },
  {
    "text": "actions which will simplify the process more on this later how do we manage data with RC and",
    "start": "1481840",
    "end": "1490360"
  },
  {
    "text": "the app router I already showed you that you can make database queries through an over",
    "start": "1490360",
    "end": "1496039"
  },
  {
    "text": "like Prisma and you can of course also use the fetch API there are a bunch of parameters you can add here such as",
    "start": "1496039",
    "end": "1501760"
  },
  {
    "text": "cache duration tags and for validating the data headers and more this is an example showing you what",
    "start": "1501760",
    "end": "1508919"
  },
  {
    "text": "you could potentially do for example getting a cookie making an authenticated request to an API getting data this way in your server",
    "start": "1508919",
    "end": "1516520"
  },
  {
    "text": "components is very efficient because on the server you have this privileged environment with everything you need",
    "start": "1516520",
    "end": "1521640"
  },
  {
    "text": "accessible",
    "start": "1521640",
    "end": "1524640"
  },
  {
    "text": "if you use the same data in multiple components in a tree you do not have to fetch it on the root and pass it down",
    "start": "1530320",
    "end": "1536840"
  },
  {
    "text": "you can fetch it in each component where it's required because it's automatically memorized you can compare this pattern",
    "start": "1536840",
    "end": "1543120"
  },
  {
    "text": "to react query where you will call your hooks wherever they are needed and they will all call the same cache data plus",
    "start": "1543120",
    "end": "1550399"
  },
  {
    "text": "you can pass it down to the client components when you need it for example as the options of an autocomplete",
    "start": "1550399",
    "end": "1557200"
  },
  {
    "text": "component so what about data mutation I mentioned that you can create API endpoints like in the pages router but",
    "start": "1557240",
    "end": "1564159"
  },
  {
    "text": "let's skip that for now and look at something way better called server actions they just became stable with the",
    "start": "1564159",
    "end": "1569640"
  },
  {
    "text": "release of nex1 14 and they are the preferred way to mutate data they kind of complete the whole server react",
    "start": "1569640",
    "end": "1576399"
  },
  {
    "text": "server component story so it's simple you mark a function or a file with use server and nextjs",
    "start": "1576399",
    "end": "1583480"
  },
  {
    "text": "will make a hidden API endpoint for you allowing you to call it from anywhere like from a client component solving the",
    "start": "1583480",
    "end": "1590559"
  },
  {
    "text": "problem of passing functions between the server and the client in addition it gives you type safety between the server",
    "start": "1590559",
    "end": "1596640"
  },
  {
    "text": "and the client through RPC here I have a fun a file marked with",
    "start": "1596640",
    "end": "1602000"
  },
  {
    "text": "U server turning the function inside it into a server action I can now call it from a client component that's it",
    "start": "1602000",
    "end": "1609600"
  },
  {
    "text": "however I also need to tell nextjs that I have Chang something in the data inside the rsc's and it needs to",
    "start": "1609600",
    "end": "1616240"
  },
  {
    "text": "revalidate The View and fetch new data from from the database so I then call revalidate path",
    "start": "1616240",
    "end": "1622159"
  },
  {
    "text": "with my relevant route looking at our data management",
    "start": "1622159",
    "end": "1628840"
  },
  {
    "text": "graph here the server action seamlessly takes us back from the client and the server",
    "start": "1628840",
    "end": "1635399"
  },
  {
    "text": "again server actions also integrate nicely with form submissions here I have",
    "start": "1636120",
    "end": "1641240"
  },
  {
    "text": "a form and a function Mark with us server when submitting the form the action property um with the action",
    "start": "1641240",
    "end": "1647520"
  },
  {
    "text": "property the form can without JavaScript call the server action and add a joke to the database and again I need to tell",
    "start": "1647520",
    "end": "1654679"
  },
  {
    "text": "nextjs to revalidate to view this is just some quick examples there's so many possibilities with the",
    "start": "1654679",
    "end": "1660960"
  },
  {
    "text": "server action and it's extremely efficient to develop with so there you have it react server",
    "start": "1660960",
    "end": "1668519"
  },
  {
    "text": "components in the app router allow you to do whatever you need to do whether is MPA functionality or interactive Spa",
    "start": "1668519",
    "end": "1674799"
  },
  {
    "text": "stuff and include SSR or SEO or any kind of functionality you need all in the",
    "start": "1674799",
    "end": "1680519"
  },
  {
    "text": "same stack optimized so hopefully you remember some of these terms by now it's a lot re server components definitely",
    "start": "1680519",
    "end": "1687919"
  },
  {
    "text": "bring a new mental model and architecture we can get into a demo now",
    "start": "1687919",
    "end": "1694200"
  },
  {
    "text": "of this joke app that we've been seeing code from it's a remake of a tutorial app from the remix documentation but of",
    "start": "1694200",
    "end": "1700840"
  },
  {
    "text": "course very different because it uses RC and tailwind and server actions it's also containing very simple",
    "start": "1700840",
    "end": "1706640"
  },
  {
    "text": "implementations to not clo clog the code with",
    "start": "1706640",
    "end": "1711320"
  },
  {
    "text": "complexity so this is uh an app that I've rebuilt from the remix docs it's",
    "start": "1719399",
    "end": "1724679"
  },
  {
    "text": "using uh the app router and tailwind and it's deployed on verell and uses uh",
    "start": "1724679",
    "end": "1730480"
  },
  {
    "text": "Prisma as an orm talking to uh Azure database",
    "start": "1730480",
    "end": "1736519"
  },
  {
    "text": "I might have to restart my database it's okay so it's pretty simple can you see this by the way",
    "start": "1739200",
    "end": "1746519"
  },
  {
    "text": "yep um there's a list of jokes here that you can view and then you can add your",
    "start": "1746519",
    "end": "1754640"
  },
  {
    "text": "own for example cash why did the did the developer go",
    "start": "1754640",
    "end": "1759720"
  },
  {
    "text": "broke he used to call his",
    "start": "1759720",
    "end": "1763240"
  },
  {
    "text": "cash uh and it's going to add it so that's pretty much all of the main",
    "start": "1765880",
    "end": "1771519"
  },
  {
    "text": "functionality here so let's just look at the code for",
    "start": "1771519",
    "end": "1775760"
  },
  {
    "text": "this we're just going to switch to my local [Music]",
    "start": "1778880",
    "end": "1786479"
  },
  {
    "text": "here maybe use this let's see so you might recognize this from the",
    "start": "1787279",
    "end": "1793399"
  },
  {
    "text": "boiler plate in the slides there's some eslint uh prettier um um tailwind and",
    "start": "1793399",
    "end": "1799880"
  },
  {
    "text": "such and then the app router which is the big thing here then there's also some",
    "start": "1799880",
    "end": "1807039"
  },
  {
    "text": "components um my data access layer which is containing server actions and um the",
    "start": "1808480",
    "end": "1814120"
  },
  {
    "text": "data fetching functions and then um validations for",
    "start": "1814120",
    "end": "1819799"
  },
  {
    "text": "forms later and some stuff that's not very important right now so let's look at what's inside the app",
    "start": "1819799",
    "end": "1826960"
  },
  {
    "text": "router I have a root layout um and the main page which is",
    "start": "1826960",
    "end": "1833880"
  },
  {
    "text": "this page here which contains the next links which are",
    "start": "1833880",
    "end": "1839159"
  },
  {
    "text": "optimized but what we want to look at is really the content here so this is the",
    "start": "1839159",
    "end": "1844640"
  },
  {
    "text": "jokes uh route here and that's since this is file based routing you have a jokes",
    "start": "1844640",
    "end": "1851000"
  },
  {
    "text": "folder mapping to a jokes route and in here there's a layout",
    "start": "1851000",
    "end": "1859919"
  },
  {
    "text": "with a header footer and the sidebar this is actually responsive so it's not",
    "start": "1860120",
    "end": "1865240"
  },
  {
    "text": "really a sidebar right now but hold on you can see that it's kind of supposed to be on the side",
    "start": "1865240",
    "end": "1872840"
  },
  {
    "text": "there so the header and the footer only contains",
    "start": "1873960",
    "end": "1879639"
  },
  {
    "text": "links um but in this uh sidebar here we have the jokes list component which is a",
    "start": "1881440",
    "end": "1889080"
  },
  {
    "text": "server component so in here we can make an async function and await get",
    "start": "1889080",
    "end": "1896639"
  },
  {
    "text": "Jokes which is going to make a call to Prisma um and find the",
    "start": "1896639",
    "end": "1903720"
  },
  {
    "text": "jokes and then it can be sorted and mapped into links and then there's a nav button",
    "start": "1903720",
    "end": "1911159"
  },
  {
    "text": "which is just going to take us to the create page and a random joke button which is",
    "start": "1911159",
    "end": "1916720"
  },
  {
    "text": "just using ins side uh hooks to refresh the uh the",
    "start": "1916720",
    "end": "1922720"
  },
  {
    "text": "page and then we have the new route here",
    "start": "1926200",
    "end": "1931799"
  },
  {
    "text": "so this is SL joke new mapping to the folder structure and in here is the action",
    "start": "1931799",
    "end": "1938360"
  },
  {
    "text": "property of the form so this is can be used to without JavaScript it's call a",
    "start": "1938360",
    "end": "1944679"
  },
  {
    "text": "server action uh to update the database so create joke it's a server action with",
    "start": "1944679",
    "end": "1950440"
  },
  {
    "text": "this use server here then there's just some validation and finally uh adding a",
    "start": "1950440",
    "end": "1956519"
  },
  {
    "text": "joke to the database so what happens we're going to create a joke",
    "start": "1956519",
    "end": "1961559"
  },
  {
    "text": "here and it's going to be added to the database and rerouted these are new uh",
    "start": "1961559",
    "end": "1966880"
  },
  {
    "text": "apis for telling uh nextjs to get new data from your database",
    "start": "1966880",
    "end": "1974240"
  },
  {
    "text": "and then there is a dynamic joke ID R here which is you can see the ID in the",
    "start": "1978679",
    "end": "1984760"
  },
  {
    "text": "URL so it's going to be a fetching actually I'm going to hold",
    "start": "1984760",
    "end": "1992399"
  },
  {
    "text": "on you have the rout params and then you can get the joke based on the current",
    "start": "1993880",
    "end": "2001080"
  },
  {
    "text": "params uh so this is not a surrection it's just getting a joke from the database",
    "start": "2002960",
    "end": "2008960"
  },
  {
    "text": "um and then if it doesn't find anything throw a not",
    "start": "2008960",
    "end": "2013200"
  },
  {
    "text": "found so I told you that you can do a lot of SEO stuff so this generate metadata is going to be dynamically gen",
    "start": "2014080",
    "end": "2021080"
  },
  {
    "text": "gener generating the title here for us uh with the currently selected",
    "start": "2021080",
    "end": "2027600"
  },
  {
    "text": "joke so this is server components because it's async and a wait but",
    "start": "2027600",
    "end": "2033559"
  },
  {
    "text": "there's also a delete joke button here which is going to delete a joke and",
    "start": "2033559",
    "end": "2039760"
  },
  {
    "text": "this button uses client side apis so here I'm using the use client directive",
    "start": "2039760",
    "end": "2045440"
  },
  {
    "text": "to mark it as client side and then on the button click we're",
    "start": "2045440",
    "end": "2051919"
  },
  {
    "text": "going to call a server action which is the delete joke here which is going to",
    "start": "2051919",
    "end": "2057280"
  },
  {
    "text": "delete the joke from the database revalidate the path and then redirect back to the jok's",
    "start": "2057280",
    "end": "2063440"
  },
  {
    "text": "route and then um there's also something called use transition here which is uh a",
    "start": "2063720",
    "end": "2070079"
  },
  {
    "text": "new react hook which is used to Mark uh whatever is inside as nonblocking",
    "start": "2070079",
    "end": "2076079"
  },
  {
    "text": "meaning the user can keep interacting with other things as they as this is being executed and you can also get the",
    "start": "2076079",
    "end": "2083520"
  },
  {
    "text": "pending state of the function so I'm using this here to uh add some visual",
    "start": "2083520",
    "end": "2089200"
  },
  {
    "text": "feedback to the user that this is being",
    "start": "2089200",
    "end": "2094000"
  },
  {
    "text": "deleted oh yeah I forgot to mention something here in the new form here I'm also using a",
    "start": "2094720",
    "end": "2102480"
  },
  {
    "text": "new uh react hook on a submit button here to give the user visual feedback so",
    "start": "2102480",
    "end": "2109720"
  },
  {
    "text": "what you can do is you can use use form status to get the status of the currently submitting action inside the",
    "start": "2109720",
    "end": "2116119"
  },
  {
    "text": "form here so it's currently submitting create joke that means we're going to get the status of this form and if it's",
    "start": "2116119",
    "end": "2123040"
  },
  {
    "text": "pending it's going to display a pending state right like that",
    "start": "2123040",
    "end": "2129599"
  },
  {
    "text": "uh that's pretty much it for the main functionality here but I've added a lot of demo routes to display some RC",
    "start": "2131880",
    "end": "2138920"
  },
  {
    "text": "Concepts uh more clearly so let's look at those as",
    "start": "2138920",
    "end": "2144079"
  },
  {
    "text": "well um let's see",
    "start": "2145440",
    "end": "2150400"
  },
  {
    "text": "this so demo",
    "start": "2150720",
    "end": "2155119"
  },
  {
    "text": "so as you can see well I was talking about actually that if you want to use a server component inside a client",
    "start": "2160000",
    "end": "2165400"
  },
  {
    "text": "component you have to use it as a prop so here I'm putting a Ser component as a",
    "start": "2165400",
    "end": "2170760"
  },
  {
    "text": "prop inside a client component and this is going to allow it to keep being a server component while we're adding",
    "start": "2170760",
    "end": "2176599"
  },
  {
    "text": "interactivity inside the client component so I'm adding some just using the button here and as you can see these",
    "start": "2176599",
    "end": "2183359"
  },
  {
    "text": "are both server components and this is the client component and it can be more clear if we look in the console here",
    "start": "2183359",
    "end": "2191040"
  },
  {
    "text": "they're console logging something the outer and the inner server and this is a cent component so as you can see it's",
    "start": "2191040",
    "end": "2197560"
  },
  {
    "text": "kind of split between the two different um parts of the app here working",
    "start": "2197560",
    "end": "2203440"
  },
  {
    "text": "together then revalidation so I was mentioning",
    "start": "2204720",
    "end": "2211480"
  },
  {
    "text": "that rsc's can um merge into the tree without destroying client state",
    "start": "2211480",
    "end": "2219520"
  },
  {
    "text": "so I'm going to just show you this as well actually this is not so important we just want to look at the what's",
    "start": "2222400",
    "end": "2228400"
  },
  {
    "text": "happening so if I were to add some State here this is client components these buttons and then we have server",
    "start": "2228400",
    "end": "2234599"
  },
  {
    "text": "component stuff here and if I add something it's going to be merged into",
    "start": "2234599",
    "end": "2242560"
  },
  {
    "text": "um the the tree without destroying the client state",
    "start": "2242560",
    "end": "2248680"
  },
  {
    "text": "so this is also the create choke server action here and it's telling me to revalidate the path that's why the data",
    "start": "2248680",
    "end": "2254200"
  },
  {
    "text": "is updating but the client state is still",
    "start": "2254200",
    "end": "2258560"
  },
  {
    "text": "preserved um Global state so I mentioned that you can create",
    "start": "2260800",
    "end": "2266000"
  },
  {
    "text": "providers because you can create rapper components with client State and then put server content inside so we can use",
    "start": "2266000",
    "end": "2273240"
  },
  {
    "text": "it hold on I'm going to close this again to share state between different parts",
    "start": "2273240",
    "end": "2278839"
  },
  {
    "text": "of the tree um let's look at this as",
    "start": "2278839",
    "end": "2285079"
  },
  {
    "text": "well yeah so here there's a theme context",
    "start": "2288160",
    "end": "2294839"
  },
  {
    "text": "provider which is react provider um allowing us to put server content inside",
    "start": "2294839",
    "end": "2300119"
  },
  {
    "text": "here because it's a child prop and then share the state so I can click these buttons and use it and then it's going",
    "start": "2300119",
    "end": "2306880"
  },
  {
    "text": "to be displayed in a different component so we have a server component and then a component that sets the theme this",
    "start": "2306880",
    "end": "2315280"
  },
  {
    "text": "one and then another server component and a component that uses a theme so",
    "start": "2315359",
    "end": "2321359"
  },
  {
    "text": "they can talk through these server boundary if they're constructed like this but I actually prefer suan for this",
    "start": "2321359",
    "end": "2329400"
  },
  {
    "text": "type of global State Management because you don't need to wrap this yeah",
    "start": "2329400",
    "end": "2336720"
  },
  {
    "text": "I have a lot of different forms here because there's a lot of different ways you can be making forms",
    "start": "2337839",
    "end": "2343560"
  },
  {
    "text": "now uh just to show you that this is two different parts of the application um let's look at",
    "start": "2343560",
    "end": "2352079"
  },
  {
    "text": "this so I have a server page here with a server",
    "start": "2353720",
    "end": "2359079"
  },
  {
    "text": "form and it's calling a server action so this is the same as we saw earlier calling a server",
    "start": "2359079",
    "end": "2364920"
  },
  {
    "text": "action and then it's doing some validation using Zod so there's a Zod",
    "start": "2364920",
    "end": "2370359"
  },
  {
    "text": "schema here to provide runtime validation and it's going to uh say that",
    "start": "2370359",
    "end": "2375560"
  },
  {
    "text": "has to be five characters long on the content and two on the name so what",
    "start": "2375560",
    "end": "2380599"
  },
  {
    "text": "happens is if I um add something here and it's not validated correctly you're",
    "start": "2380599",
    "end": "2387040"
  },
  {
    "text": "going to see that it's logged on the",
    "start": "2387040",
    "end": "2390720"
  },
  {
    "text": "server um then we can also do this type of validation on the client",
    "start": "2393319",
    "end": "2399318"
  },
  {
    "text": "so here we're going to go",
    "start": "2400040",
    "end": "2407720"
  },
  {
    "text": "here it's also using Zod to validate but this time client side so if we add uh invalid here has to",
    "start": "2408680",
    "end": "2417440"
  },
  {
    "text": "be five characters right it's going to fail on the client side and what you can do is you can",
    "start": "2417440",
    "end": "2424079"
  },
  {
    "text": "combine this for example using reactor form",
    "start": "2424079",
    "end": "2429318"
  },
  {
    "text": "um so let's look at that as well we're getting some data in a server",
    "start": "2433000",
    "end": "2440040"
  },
  {
    "text": "component here it's in the page we can await the jokes and pass them to our",
    "start": "2440040",
    "end": "2445319"
  },
  {
    "text": "client side reactor form reactor form is going to be interactive it has to be client",
    "start": "2445319",
    "end": "2452000"
  },
  {
    "text": "side so there's Ed client here and then there's your reactor form with",
    "start": "2452000",
    "end": "2457839"
  },
  {
    "text": "the validation uh same as we were looking at",
    "start": "2457839",
    "end": "2463400"
  },
  {
    "text": "earlier and then I can just show you what it looks like first so we're going to be typing and then there's going to be dynamic validation here interactive",
    "start": "2463400",
    "end": "2471000"
  },
  {
    "text": "and then uh I'm also using a different um react 18 feature here which is called",
    "start": "2471000",
    "end": "2478079"
  },
  {
    "text": "use optimistic which is going to let us add this joke uh optimistically so that it pops up in the list before it's",
    "start": "2478079",
    "end": "2485040"
  },
  {
    "text": "actually in the database so let's look at",
    "start": "2485040",
    "end": "2490280"
  },
  {
    "text": "that so it's going to be there I don't know if you saw that it's very",
    "start": "2490280",
    "end": "2496000"
  },
  {
    "text": "quick uh but this time it failed because actually I have a stricter a stricter um",
    "start": "2498839",
    "end": "2506680"
  },
  {
    "text": "validation on the server so if fails it's going to just roll",
    "start": "2506680",
    "end": "2512520"
  },
  {
    "text": "back so as you can see you can create really interactive forms like this",
    "start": "2512839",
    "end": "2518119"
  },
  {
    "text": "and just um validate safely on the client and on the server and then make",
    "start": "2518119",
    "end": "2523240"
  },
  {
    "text": "it smooth and interactive and using the optimistic",
    "start": "2523240",
    "end": "2528119"
  },
  {
    "text": "update uh then suspense suspense is actually a very",
    "start": "2530319",
    "end": "2535560"
  },
  {
    "text": "important part of uh nexts 14 and Rector",
    "start": "2535560",
    "end": "2541040"
  },
  {
    "text": "components um excuse me so here I have a page and I don't",
    "start": "2541079",
    "end": "2548599"
  },
  {
    "text": "don't know if you saw that but it's being loaded piece by piece so what is happening here is the",
    "start": "2548599",
    "end": "2555480"
  },
  {
    "text": "root component is 1 second delayed and the header is 2 seconds",
    "start": "2555480",
    "end": "2562359"
  },
  {
    "text": "delayed and the jokes uh list here is 4 seconds delayed so since we're working",
    "start": "2562359",
    "end": "2570000"
  },
  {
    "text": "with server side here we need to um take care of components that might be slower",
    "start": "2570000",
    "end": "2575880"
  },
  {
    "text": "than well that might be slow they have some kind of async functionality so for that",
    "start": "2575880",
    "end": "2581480"
  },
  {
    "text": "you need suspense so suspense lets you um Mark some kind of component as non-",
    "start": "2581480",
    "end": "2587640"
  },
  {
    "text": "urgent and then prioritize the uh content that is outside the",
    "start": "2587640",
    "end": "2593520"
  },
  {
    "text": "suspense so the suspense here is going to this is going to load first then the",
    "start": "2593520",
    "end": "2600760"
  },
  {
    "text": "next part and then finally the jokes here when you're building with RSC you're going to be making a lot of",
    "start": "2600760",
    "end": "2606559"
  },
  {
    "text": "suspens and building fallbacks so the skeleton that was",
    "start": "2606559",
    "end": "2612280"
  },
  {
    "text": "here um is the fallback of the suspense this",
    "start": "2612280",
    "end": "2619440"
  },
  {
    "text": "one uh you can also use Rea quy but as you know react query is a client side",
    "start": "2620559",
    "end": "2626000"
  },
  {
    "text": "data fetching Library which most of the time you're not going to need when you use RSC because you can now fetch on the",
    "start": "2626000",
    "end": "2631400"
  },
  {
    "text": "server but for example if you're going to have an authenticated route that's going to keep pulling data you would",
    "start": "2631400",
    "end": "2637160"
  },
  {
    "text": "want to use this and then what you can do is create a dehydrated State like",
    "start": "2637160",
    "end": "2642960"
  },
  {
    "text": "you're fetching data first and inserting as the initial data of the react query data so this is also very",
    "start": "2642960",
    "end": "2650400"
  },
  {
    "text": "useful uh finally I just wanted to show you that you can do very versatile things with server",
    "start": "2652720",
    "end": "2659880"
  },
  {
    "text": "actions so here there's a form um",
    "start": "2662400",
    "end": "2668200"
  },
  {
    "text": "and uh we can go here and it",
    "start": "2668200",
    "end": "2673359"
  },
  {
    "text": "is this is actually a random one okay so this is going to be editable but what",
    "start": "2673359",
    "end": "2680160"
  },
  {
    "text": "happens on blur is it's going to save through the server",
    "start": "2680160",
    "end": "2687720"
  },
  {
    "text": "actions um so this is now calling on the onchange calling a server action sorry",
    "start": "2688400",
    "end": "2695680"
  },
  {
    "text": "on the on change calling setup date and then on the on blur it's going to call a server action with a start transition",
    "start": "2695680",
    "end": "2702599"
  },
  {
    "text": "meaning we get the pending State and then it's going to display that to the user and allow it to um",
    "start": "2702599",
    "end": "2711200"
  },
  {
    "text": "update I think that's it so I can get back to the slides",
    "start": "2711280",
    "end": "2718119"
  },
  {
    "text": "now so this is the lighthouse score of the app it's I did didn't really optimize this I just followed the RSC",
    "start": "2723079",
    "end": "2729520"
  },
  {
    "text": "patterns I've been mentioning and it's small but you get the point so all in all um you can build very performant",
    "start": "2729520",
    "end": "2736319"
  },
  {
    "text": "apps by default and the limitations RC will make your code better unlike plane react where you can do whatever you",
    "start": "2736319",
    "end": "2742960"
  },
  {
    "text": "want there's also the badge with the dynamic uh metadata generation",
    "start": "2742960",
    "end": "2749000"
  },
  {
    "text": "here so lastly I have been building with RSC in the real world in my current",
    "start": "2749000",
    "end": "2755440"
  },
  {
    "text": "project uh it's a medium scale um app so I'm just going to talk a bit about my",
    "start": "2755440",
    "end": "2760960"
  },
  {
    "text": "requirements and the experience with that it's a project set to last at least",
    "start": "2760960",
    "end": "2766000"
  },
  {
    "text": "one year and is a rewrite of an existing MVC app with a lot of technical",
    "start": "2766000",
    "end": "2771280"
  },
  {
    "text": "Deb oh so I've been lucky enough to be given the responsibility of picking the",
    "start": "2771280",
    "end": "2778040"
  },
  {
    "text": "technology for the front end of the new solution the app will contain interactive dashboards complex forms",
    "start": "2778040",
    "end": "2785119"
  },
  {
    "text": "articles through a CMS and a lot of static data and a need for SEO it also",
    "start": "2785119",
    "end": "2790319"
  },
  {
    "text": "needs to be mobile friendly and support multiple languages and use custom",
    "start": "2790319",
    "end": "2795480"
  },
  {
    "text": "authentication big part of the app and something excuse me that I made sure to prove of concept before picking uh",
    "start": "2795480",
    "end": "2802880"
  },
  {
    "text": "nextjs and RC was the customers design system component",
    "start": "2802880",
    "end": "2809880"
  },
  {
    "text": "Library this app is a great case for RC because it can render uh server side a lot of stuff but also be very",
    "start": "2809880",
    "end": "2816319"
  },
  {
    "text": "Interactive where it needs to be I'm finding it to work very well so far but",
    "start": "2816319",
    "end": "2821359"
  },
  {
    "text": "there have been some issues and um learning experiences when building this functionality that is not really covered",
    "start": "2821359",
    "end": "2827640"
  },
  {
    "text": "in the demo apps of nextjs for example I've had to create wrapper components for the customer",
    "start": "2827640",
    "end": "2833839"
  },
  {
    "text": "specific component library to be able to use them in RC and put Ser components inside",
    "start": "2833839",
    "end": "2839440"
  },
  {
    "text": "them I've also had to pick my internationalization library without much guidance from nextjs it's working",
    "start": "2839440",
    "end": "2846200"
  },
  {
    "text": "well but there are certainly complexities and finally testing RSC is",
    "start": "2846200",
    "end": "2851240"
  },
  {
    "text": "not covered properly anywhere and to test Asing components there's currently a need for a work",
    "start": "2851240",
    "end": "2857359"
  },
  {
    "text": "workr but all in all it's going well the app is performant f fulfills the requirements maintainable and en forces",
    "start": "2857359",
    "end": "2864280"
  },
  {
    "text": "the best practices I've been mentioning here and the developer experience is really good it's",
    "start": "2864280",
    "end": "2870440"
  },
  {
    "text": "enjoyable so next yes with RC's inside it provides so many tools to let me",
    "start": "2870440",
    "end": "2875680"
  },
  {
    "text": "focus on building my apps to finish this off what's going to be the future of RSC there's no doubt that",
    "start": "2875680",
    "end": "2883760"
  },
  {
    "text": "this is the Rea way react is going now it's not just some hype cycle that's going to die out is the result of many",
    "start": "2883760",
    "end": "2889640"
  },
  {
    "text": "years of work from the react team and it's likely that other Frameworks will Implement their own versions of react",
    "start": "2889640",
    "end": "2895359"
  },
  {
    "text": "Serv components um or use them such as remix who have announced that they",
    "start": "2895359",
    "end": "2900960"
  },
  {
    "text": "will there are so many solutions being proposed to uh improve the performance of web apps with a goal of find in the",
    "start": "2900960",
    "end": "2907359"
  },
  {
    "text": "optimal balance between ux and DX and this is react take nonetheless there's a",
    "start": "2907359",
    "end": "2912880"
  },
  {
    "text": "lot of things that have yet to be figured out as server components are being battle tested so here's the repo for the joke",
    "start": "2912880",
    "end": "2919680"
  },
  {
    "text": "app everything is there as well as the reference demo",
    "start": "2919680",
    "end": "2924440"
  },
  {
    "text": "pages I hope that you can be able to use it and look at the different examples when you encounter something",
    "start": "2926359",
    "end": "2934400"
  },
  {
    "text": "similar and then some more other resources that I've been using while learning this uh the verell docs are very good um",
    "start": "2934400",
    "end": "2942720"
  },
  {
    "text": "just make sure to select the app R version they have a lot of template apps and a full free course called learn",
    "start": "2942720",
    "end": "2949480"
  },
  {
    "text": "nextjs which lets you build a dashboard app from scratch and then deploy it to verel and for YouTube uh B grad does a",
    "start": "2949480",
    "end": "2957640"
  },
  {
    "text": "lot of thorough RC content and code with Antonio does some incredible clones of apps like twitch and Miro with full",
    "start": "2957640",
    "end": "2964319"
  },
  {
    "text": "YouTube walk through throughs uh and GitHub and a lots of stuff he's really",
    "start": "2964319",
    "end": "2969760"
  },
  {
    "text": "incredible so I recommend this if you want to learn more and if you have any questions about the topics that I have",
    "start": "2969760",
    "end": "2976799"
  },
  {
    "text": "in my project just reach out to me and I can send you some code or talk about it",
    "start": "2976799",
    "end": "2982119"
  },
  {
    "text": "so thanks for listening I hope we're as excited as I am and ready to try this my social media is here you can contact me",
    "start": "2982119",
    "end": "2988040"
  },
  {
    "text": "on Twitter and I'm going to post my sites there and I also have a couple of blog posts about",
    "start": "2988040",
    "end": "2993760"
  },
  {
    "text": "RC uh thank you",
    "start": "2993760",
    "end": "2998119"
  },
  {
    "text": "[Applause] questions uh we need a microphone I've",
    "start": "2998890",
    "end": "3006040"
  },
  {
    "text": "been",
    "start": "3006040",
    "end": "3008200"
  },
  {
    "text": "told oh",
    "start": "3011079",
    "end": "3014280"
  },
  {
    "text": "yeah yes okay this one what just hold on a minute there you go",
    "start": "3016280",
    "end": "3023839"
  },
  {
    "text": "good uh so you mentioned that on the current project that you're working on you are migrating from an MVC Style app",
    "start": "3023839",
    "end": "3029799"
  },
  {
    "text": "to yeah yes yeah so what's been the major challenges in moving from MVC to",
    "start": "3029799",
    "end": "3036000"
  },
  {
    "text": "you a more modern way of doing things it's not really a a migration it's just a rebuild okay so we didn't really have",
    "start": "3036000",
    "end": "3042000"
  },
  {
    "text": "to worry so much about uh the exact uh old app except for data migration which",
    "start": "3042000",
    "end": "3048599"
  },
  {
    "text": "is not really my field so it's new sketches and figma everything got it yeah all right that makes sense yeah",
    "start": "3048599",
    "end": "3058440"
  },
  {
    "text": "yes uh how do you see the effectiv on micr front and development on micr front",
    "start": "3060760",
    "end": "3066440"
  },
  {
    "text": "and development like modules in different packages can can it be combined like a package that is",
    "start": "3066440",
    "end": "3072200"
  },
  {
    "text": "developed by another team used with the same complexity of server and client",
    "start": "3072200",
    "end": "3078599"
  },
  {
    "text": "sites I'm not sure about that I don't know how many next year's projects are",
    "start": "3080960",
    "end": "3086640"
  },
  {
    "text": "like built like that actually yeah I'm not sure",
    "start": "3086640",
    "end": "3091920"
  },
  {
    "text": "sorry yes hi uh you mentioned that the uh testing stuff is still catching up I",
    "start": "3094640",
    "end": "3099880"
  },
  {
    "text": "was just wondering what what's the best you found so far uh so what the only thing that next says is use endtoend",
    "start": "3099880",
    "end": "3105839"
  },
  {
    "text": "testing so it's like okay that doesn't help me very much but what I've been learning is that you can test Asing",
    "start": "3105839",
    "end": "3112559"
  },
  {
    "text": "components with react testing Library you just have to either use react",
    "start": "3112559",
    "end": "3119079"
  },
  {
    "text": "Canary or uh write like marck when you have nested acing components and such it's kind of it's a workaround but you",
    "start": "3119079",
    "end": "3126040"
  },
  {
    "text": "can test effectively still I would say you just have to you know be aware it's",
    "start": "3126040",
    "end": "3131119"
  },
  {
    "text": "going to take you a bit more effort yeah",
    "start": "3131119",
    "end": "3137079"
  },
  {
    "text": "yes there um can you tell me a little bit about your experience with debugging",
    "start": "3137079",
    "end": "3144200"
  },
  {
    "text": "debugging Okay so nextjs kind of hides your errors for you consumes it in their",
    "start": "3144200",
    "end": "3150040"
  },
  {
    "text": "stack so you have to just guess a little",
    "start": "3150040",
    "end": "3155079"
  },
  {
    "text": "sometimes uh but it's it's really not that bad it's just compared to for example remix there's more things that's",
    "start": "3155079",
    "end": "3161319"
  },
  {
    "text": "been wrapped in their own error messages and such so it's it's been okay yeah I would",
    "start": "3161319",
    "end": "3168000"
  },
  {
    "text": "say any anyone else okay thank you I actually do have a",
    "start": "3168000",
    "end": "3174040"
  },
  {
    "text": "question sorry yeah so I have that next St is pretty hard to deploy outside of",
    "start": "3174040",
    "end": "3179920"
  },
  {
    "text": "vers oh yeah a good question is that true um I'm deploying it on Azure it's",
    "start": "3179920",
    "end": "3186280"
  },
  {
    "text": "okay you have to use a different deployment method you have to write like a standalone version it's just a different command and then uh if you're",
    "start": "3186280",
    "end": "3193040"
  },
  {
    "text": "using good of actions just link to the right places in your in your cicd there",
    "start": "3193040",
    "end": "3198280"
  },
  {
    "text": "and you don't get the built-in CDN so I haven't set up a CDN yet I'm going to do it at some point probably but you have",
    "start": "3198280",
    "end": "3204200"
  },
  {
    "text": "to do more manual work but it's okay yeah thank you",
    "start": "3204200",
    "end": "3210640"
  }
]