[
  {
    "start": "0",
    "end": "59000"
  },
  {
    "text": "okay then folks right well after one last minute laptop reboot I think we're",
    "start": "4430",
    "end": "10700"
  },
  {
    "text": "good to go also on a very narrow stage here as well so if I suddenly disappear you'll know",
    "start": "10700",
    "end": "16550"
  },
  {
    "text": "what's happened and hopefully we'll be able to edit that out of any kind of video anyway hello hi my name is Matt",
    "start": "16550",
    "end": "22340"
  },
  {
    "text": "today I'm going to talk about Kotlin thank you for coming and I should point out really very start I'm I work at to",
    "start": "22340",
    "end": "30349"
  },
  {
    "text": "our brains and Kotlin is from JetBrains but I am NOT an expert in Kotlin I'm an",
    "start": "30349",
    "end": "35480"
  },
  {
    "text": "interested amateur I've done a couple of things with it I've shipped a couple of features in Rider with it but I'm not an",
    "start": "35480",
    "end": "42530"
  },
  {
    "text": "actual expert this is going to be kind like an introductory sort of overview take a quick look at it and a bit of a",
    "start": "42530",
    "end": "49220"
  },
  {
    "text": "tour of some of the syntaxes or some of the interesting features but I am not necessarily an expert so please bear",
    "start": "49220",
    "end": "56840"
  },
  {
    "text": "that in mind right so first of all what is Collins anyone heard of Cortland awesome awesome so it's programming",
    "start": "56840",
    "end": "64698"
  },
  {
    "start": "59000",
    "end": "113000"
  },
  {
    "text": "language it's a statically typed programming language is something we started building for ourselves so it the",
    "start": "64699",
    "end": "70220"
  },
  {
    "text": "project started in 2010 and it hit version 1 in 2016 so it took a little while and we're now at version 1.2 which",
    "start": "70220",
    "end": "77840"
  },
  {
    "text": "was released about eight months ago no it's longer however however long November was and we kind of built it for",
    "start": "77840",
    "end": "85640"
  },
  {
    "text": "ourselves there were a bunch of things we wanted to do we were looking for a new programming language we have a",
    "start": "85640",
    "end": "91630"
  },
  {
    "text": "strong investment in Java and in the JVM world and we wanted to use a new language which was a bit more modern",
    "start": "91630",
    "end": "97940"
  },
  {
    "text": "using some of the more interesting features that modern programming languages have these days and which was",
    "start": "97940",
    "end": "103400"
  },
  {
    "text": "moving on and all kinds of stuff we had a look around and we didn't really find anything that matched all of our",
    "start": "103400",
    "end": "109310"
  },
  {
    "text": "criteria and so we ended up building our own which is cool fine that's what you",
    "start": "109310",
    "end": "114380"
  },
  {
    "start": "113000",
    "end": "206000"
  },
  {
    "text": "do isn't it right here in programs language so what are the things that Kotlin provides what does it do why do",
    "start": "114380",
    "end": "120890"
  },
  {
    "text": "we want it and everything there are a number of things that we wanted to get out of it so one of which was to have nice concise",
    "start": "120890",
    "end": "128179"
  },
  {
    "text": "code so if you have used Java you might be familiar with some of the verbosity of Java it can be quite verbose and you",
    "start": "128179",
    "end": "136340"
  },
  {
    "text": "have to write quite a lot of stuff I want you to cut her out away some of that make a bit more efficient and quick",
    "start": "136340",
    "end": "142610"
  },
  {
    "text": "and more productive with less typing basically we also wanted it to be a",
    "start": "142610",
    "end": "147740"
  },
  {
    "text": "strongly typed language we wanted it to be type safe we wanted to make use of some advances in that kind of area as",
    "start": "147740",
    "end": "153770"
  },
  {
    "text": "well so a tad attack is the null ability problem for example and of course it had",
    "start": "153770",
    "end": "159350"
  },
  {
    "text": "to be very highly interrupt for interoperable with our existing Java code base we weren't going to throw away",
    "start": "159350",
    "end": "164510"
  },
  {
    "text": "so many years worth of Java code and start again we wanted something which will seamlessly work in which we can work and",
    "start": "164510",
    "end": "172000"
  },
  {
    "text": "migrate components over time or create new stuff in a new language while still working with the existing language and",
    "start": "172000",
    "end": "179510"
  },
  {
    "text": "of course we wanted it to be tool friendly because hi we're JetBrains we make tools the other kind of things we",
    "start": "179510",
    "end": "185780"
  },
  {
    "text": "wanted as well going to something was a bit more sort of pragmatic we wanted to take advantage of some of the the",
    "start": "185780",
    "end": "190970"
  },
  {
    "text": "features that you see in proteins in functional programming languages I wanted sort of bring some of those",
    "start": "190970",
    "end": "196790"
  },
  {
    "text": "things in but we want to take like a pragmatic view of it as well and work with some object-oriented and have us of",
    "start": "196790",
    "end": "202220"
  },
  {
    "text": "a good mix of the two kinds of things there but also why can't Lin for for you",
    "start": "202220",
    "end": "210500"
  },
  {
    "start": "206000",
    "end": "415000"
  },
  {
    "text": "like you know why would you be interested in in Cortland what is it's in there phew so there's the argument of",
    "start": "210500",
    "end": "215840"
  },
  {
    "text": "learning a new programming language of course it's always a good thing to sort of try something new and learn something",
    "start": "215840",
    "end": "221060"
  },
  {
    "text": "different but a good argument as well is the reach of Kotlin so Kotlin started",
    "start": "221060",
    "end": "227360"
  },
  {
    "text": "out as a JVM language that was our primary target but it was never the only target we always wanted to do more with",
    "start": "227360",
    "end": "233959"
  },
  {
    "text": "Kotlin so it started out on the JVM started out to sort of replace Java with",
    "start": "233959",
    "end": "239840"
  },
  {
    "text": "our own language in our environment but it sort of quickly got picked up by the",
    "start": "239840",
    "end": "245900"
  },
  {
    "text": "Android community and it's got very popular there and in fact Google have taken it on as a first class language in",
    "start": "245900",
    "end": "252560"
  },
  {
    "text": "kata in Android and it is fully supported and there's documentation and",
    "start": "252560",
    "end": "258079"
  },
  {
    "text": "samples and everything written in Cartland they are making some changes to api's and things to make it easier to",
    "start": "258080",
    "end": "263960"
  },
  {
    "text": "write more idiomatic Kotlin sort of stuff and so that'sthat's really been a big boost in the popularity of Catalan",
    "start": "263960",
    "end": "271230"
  },
  {
    "text": "you know we sort of started it for ourselves but it is really taken off externally as well so the we've got",
    "start": "271230",
    "end": "277140"
  },
  {
    "text": "stats on the number of lines of code on github and that's just kind of skyrocketed which is cool but we have",
    "start": "277140",
    "end": "283650"
  },
  {
    "text": "other targets as well so not just the JVM or running in Android or anything but we can also run Kotlin in JavaScript",
    "start": "283650",
    "end": "292020"
  },
  {
    "text": "so we can compile your Cartland down to JavaScript obviously this isn't going to compile all of your Java libraries you",
    "start": "292020",
    "end": "298110"
  },
  {
    "text": "have to target sort of JavaScript libraries and so as part of that we ship a whole load of definitions for",
    "start": "298110",
    "end": "304190"
  },
  {
    "text": "typescript sorry for JavaScript libraries based on the typescript definitions indefinitely typed and so",
    "start": "304190",
    "end": "310620"
  },
  {
    "text": "you can now run Kotlin code under as javascript and it can run where if you can run JavaScript so in the browser in",
    "start": "310620",
    "end": "316800"
  },
  {
    "text": "node and so on and finally we've and that's sort of production-ready that shipping you can you go off and use that",
    "start": "316800",
    "end": "322830"
  },
  {
    "text": "and build javascript type stuff which is cool we are working on another element",
    "start": "322830",
    "end": "328740"
  },
  {
    "text": "of this I don't know I'm saying we I'm not part of a team so the there is still work going on Kotlin native so Kotlin is",
    "start": "328740",
    "end": "337140"
  },
  {
    "text": "now targeting native code as well and so this is using LLVM to compile down to",
    "start": "337140",
    "end": "342930"
  },
  {
    "text": "native code and it can run on Mac Linux Windows iOS as well so you can read on your iphones and ipads and android as",
    "start": "342930",
    "end": "350490"
  },
  {
    "text": "native code so this will then allow you to build to have common code and share",
    "start": "350490",
    "end": "357030"
  },
  {
    "text": "code between different different platforms and ship and have sort of",
    "start": "357030",
    "end": "363720"
  },
  {
    "text": "common code the other targets we've got there as well are some of the iot boards",
    "start": "363720",
    "end": "369540"
  },
  {
    "text": "so you can do some internet of things type programming with catalan and also web assembly which is going to be very",
    "start": "369540",
    "end": "375450"
  },
  {
    "text": "interesting part of the work that's going on with that right now is a multi-platform story so it's about",
    "start": "375450",
    "end": "382320"
  },
  {
    "text": "building projects which can target multiple platforms at once so you can have some common code and your common",
    "start": "382320",
    "end": "387570"
  },
  {
    "text": "code can then forward declare what it needs to be implemented in the platform specific parts of the project and then",
    "start": "387570",
    "end": "394560"
  },
  {
    "text": "you can have the platform specific parts which implement those and this is the part of the project that we're working",
    "start": "394560",
    "end": "400890"
  },
  {
    "text": "on most of the moments so the technology is still there it's working we shipped couple of mobile apps which have been",
    "start": "400890",
    "end": "407220"
  },
  {
    "text": "written in Kotlin and they've been sharing code between the Android and the iPhone side of things and assume it's",
    "start": "407220",
    "end": "412890"
  },
  {
    "text": "all looking good there's some reasons for why you might want to have a look at it so let's get on here's the agenda",
    "start": "412890",
    "end": "418860"
  },
  {
    "start": "415000",
    "end": "436000"
  },
  {
    "text": "this is what we get to look at there's a lot just kidding that's a lot of things this is not going to be an exhaustive",
    "start": "418860",
    "end": "424200"
  },
  {
    "text": "look at things we're going to have a look at a few things walk around some of the syntax some of the cool things some",
    "start": "424200",
    "end": "430320"
  },
  {
    "text": "of the interesting things that I like another what I point out too but there is a lot more to Kotlin than what I'm",
    "start": "430320",
    "end": "435510"
  },
  {
    "text": "going to show you today so but we dive in with an example and you might notice that this is Java so there's a lot of",
    "start": "435510",
    "end": "443400"
  },
  {
    "start": "436000",
    "end": "465000"
  },
  {
    "text": "code here it's really quite verbose as we say it looks like he's doing a lot of things",
    "start": "443400",
    "end": "448800"
  },
  {
    "text": "but it's not really doing very much at all we've got some data coming in and constructor we've got a couple of",
    "start": "448800",
    "end": "455040"
  },
  {
    "text": "getters and setters for this data and then a few func utility methods there",
    "start": "455040",
    "end": "461370"
  },
  {
    "text": "for sort of defining equality and to string and so on that's the equivalent",
    "start": "461370",
    "end": "467160"
  },
  {
    "text": "Kotlin so it's perhaps a little unfair but this is this is good we know we really do take the conciseness to to a",
    "start": "467160",
    "end": "474540"
  },
  {
    "text": "limit you're not going to see this level of reduction in code across the board but there's a lot kind of going on in",
    "start": "474540",
    "end": "481200"
  },
  {
    "text": "this one one line of code it's a useful thing to show and to talk about and so there's quite a few things here this is",
    "start": "481200",
    "end": "487080"
  },
  {
    "text": "a class definition and when compiled you'll end up with the same code as you did with the Java that was this there so",
    "start": "487080",
    "end": "494780"
  },
  {
    "start": "494000",
    "end": "530000"
  },
  {
    "text": "some things to talk about with this is the use of modifiers we use modifiers",
    "start": "494780",
    "end": "500100"
  },
  {
    "text": "quite a lot in Cortland it sort of reduces the keyword count as it were where you can apply modifiers to various",
    "start": "500100",
    "end": "507090"
  },
  {
    "text": "things like classes and functions and it changes the way these things behave so the data modifier here defines this as a",
    "start": "507090",
    "end": "513990"
  },
  {
    "text": "data class and when the compiler sees that it will generate the extra functions we saw in the Java example so",
    "start": "513990",
    "end": "520110"
  },
  {
    "text": "this one will tell the compiler to generate the the clone method and the",
    "start": "520110",
    "end": "525510"
  },
  {
    "text": "comparison method equality to treat it like a value class the next thing with",
    "start": "525510",
    "end": "532440"
  },
  {
    "start": "530000",
    "end": "549000"
  },
  {
    "text": "interest is the primary constructor this is the way of getting data into your into into your class",
    "start": "532440",
    "end": "538740"
  },
  {
    "text": "and why if you got a class declaration why add an extra couple of braces an extra cup of lines just to define a",
    "start": "538740",
    "end": "544470"
  },
  {
    "text": "constructor when we can do it all here as part of the actual declaration itself and as part of that we actually get to",
    "start": "544470",
    "end": "551580"
  },
  {
    "start": "549000",
    "end": "588000"
  },
  {
    "text": "declare variables as well so the parameters are get passed into the constructor if they've got the vowel or",
    "start": "551580",
    "end": "556620"
  },
  {
    "text": "var keyword means that we will declare profit the compiler will generate these as property so it'll generate getters",
    "start": "556620",
    "end": "562649"
  },
  {
    "text": "and setters here by default is public you can add the private keyword as well so you can create private properties off",
    "start": "562649",
    "end": "568860"
  },
  {
    "text": "the back of it but these will create public properties and the different keywords do different things as well so",
    "start": "568860",
    "end": "575100"
  },
  {
    "text": "Val will create us an immutable public property so the compiler will only generate a getter for this and the VAR",
    "start": "575100",
    "end": "582270"
  },
  {
    "text": "keywords will give us mutable public properties so we'll get getters and setters okay so we've got our class",
    "start": "582270",
    "end": "591360"
  },
  {
    "text": "declaration how do we create a new instance of this and the really",
    "start": "591360",
    "end": "596459"
  },
  {
    "text": "interesting thing here is that there's no keep no new keyword we don't call new we just call the constructor so the",
    "start": "596459",
    "end": "601860"
  },
  {
    "text": "constructor is just another function and you call that as a function and it returns you back an instance of the",
    "start": "601860",
    "end": "607589"
  },
  {
    "text": "class and this is really cool now because then you can pass around constructors as functions and do",
    "start": "607589",
    "end": "613770"
  },
  {
    "text": "interesting things with that other thing to point out here is the type inferencing so we're assigning that to a",
    "start": "613770",
    "end": "620070"
  },
  {
    "text": "value value type customer and the compiler is doing type inferencing there so seven I have a c-sharp background by",
    "start": "620070",
    "end": "626940"
  },
  {
    "text": "the way most of you okay so I'm kind of gonna assume a bit of c-sharp knowledge then so it's like the VAR keyword it's",
    "start": "626940",
    "end": "633690"
  },
  {
    "text": "statically typed the compiler knows what's going on here is a sign that it",
    "start": "633690",
    "end": "639089"
  },
  {
    "text": "knows the value at compile time doesn't change there's no dynamics going on it's just type inferencing and shorthand for",
    "start": "639089",
    "end": "645690"
  },
  {
    "text": "typing we can specify the type if we want but it's just redundant in this case so the val keyword we got here is",
    "start": "645690",
    "end": "653010"
  },
  {
    "text": "for a read-only value it doesn't change it's just read-only you can also use the VAR keyword then as a mutable variable",
    "start": "653010",
    "end": "659579"
  },
  {
    "text": "and this bit of code here as well is a screenshot from the ID and it just kind",
    "start": "659579",
    "end": "665640"
  },
  {
    "text": "of shows you things like parameter hints so again putting in the tooling into this behind this into the language",
    "start": "665640",
    "end": "672810"
  },
  {
    "text": "when you're passing literal values around like a literal integer or a string literal is sometimes hard to know",
    "start": "672810",
    "end": "680040"
  },
  {
    "text": "what those parameters should be so the IDE can show you parameter hints there nice little touch there all right a",
    "start": "680040",
    "end": "686550"
  },
  {
    "start": "683000",
    "end": "826000"
  },
  {
    "text": "slightly more interesting but also contrived example it can show you a few more things going on there's another",
    "start": "686550",
    "end": "692279"
  },
  {
    "text": "class declaration going on here some of the Java heritage does show through we've got packages at the top we",
    "start": "692279",
    "end": "697860"
  },
  {
    "text": "declaring a package and we've got import statements this isn't Java this just",
    "start": "697860",
    "end": "702899"
  },
  {
    "text": "looks like Java is effectively declaring a namespace and so it's then and then bringing code in from other namespaces",
    "start": "702899",
    "end": "709829"
  },
  {
    "text": "so this is showing some Java Interop going on here we're pulling in the Java random class an import statements pull",
    "start": "709829",
    "end": "716040"
  },
  {
    "text": "in a class at a time you can use the Java like wildcard star to bring in a whole namespace a whole package but it's",
    "start": "716040",
    "end": "723870"
  },
  {
    "text": "just bringing namespace code in t'lie to use it so we can declare a class then",
    "start": "723870",
    "end": "731040"
  },
  {
    "text": "that class then has some properties which we declare as part of the primary constructor just as we've seen with the",
    "start": "731040",
    "end": "736079"
  },
  {
    "text": "data class but this one's got some more things going on inside it's got a function inside it which is just returning I sorry it's just printing",
    "start": "736079",
    "end": "742139"
  },
  {
    "text": "something out and not doing anything much but we declaring a couple more properties in there as well so we've got",
    "start": "742139",
    "end": "747569"
  },
  {
    "text": "an area property and an is square property the square property is a",
    "start": "747569",
    "end": "753300"
  },
  {
    "text": "computed property and so it's got a an explicit getter there's no setters there at all but it's",
    "start": "753300",
    "end": "759120"
  },
  {
    "text": "just doing a getter and it's just doing a calculation returning boolean the area property is slightly more interesting",
    "start": "759120",
    "end": "764730"
  },
  {
    "text": "because it's delegating so this is a it's a lazy property it doesn't need to",
    "start": "764730",
    "end": "770490"
  },
  {
    "text": "be lazy to calculate area it's not that difficult but this is lazy and it'll",
    "start": "770490",
    "end": "775529"
  },
  {
    "text": "only get called the first time you you access that property and it will work",
    "start": "775529",
    "end": "780660"
  },
  {
    "text": "there and this introduces a feature of Catlins called delegation which we can",
    "start": "780660",
    "end": "786420"
  },
  {
    "text": "do a bunch of different things with so we can have things like observable we can delegate a property to make it",
    "start": "786420",
    "end": "792300"
  },
  {
    "text": "observable and we can also create custom delegate types as well so we can do some",
    "start": "792300",
    "end": "798000"
  },
  {
    "text": "fun things there the other thing we can show in this little snippet really is",
    "start": "798000",
    "end": "803069"
  },
  {
    "text": "the the create random rect rect and function which is a top-level function",
    "start": "803069",
    "end": "809480"
  },
  {
    "text": "it's a package level function we don't have to declare functions inside a class it can just be top level and that's",
    "start": "809480",
    "end": "816770"
  },
  {
    "text": "again creating instances of classes without the new keyword and that's pretty much that",
    "start": "816770",
    "end": "821810"
  },
  {
    "text": "so does that all kind of make sense as it looks like awesome so we'll pick up a couple of other",
    "start": "821810",
    "end": "829330"
  },
  {
    "start": "826000",
    "end": "889000"
  },
  {
    "text": "interesting points about Kotlin as we look at a few things one of the key",
    "start": "829330",
    "end": "836450"
  },
  {
    "text": "things is that it's expressions everywhere everything has a value so apart from sort of declarations like value decorations everything itself has",
    "start": "836450",
    "end": "843800"
  },
  {
    "text": "a value everything has a type and this",
    "start": "843800",
    "end": "848870"
  },
  {
    "text": "includes control flow keywords so we if using the the when keyword which is",
    "start": "848870",
    "end": "855140"
  },
  {
    "text": "likes which is for pattern matching if is also an expression try and even throw",
    "start": "855140",
    "end": "860180"
  },
  {
    "text": "our expressions so Kotlin doesn't have a ternary operator so that something : something sorry something question mark",
    "start": "860180",
    "end": "867110"
  },
  {
    "text": "something call on something it doesn't have that you just assign you just use",
    "start": "867110",
    "end": "872300"
  },
  {
    "text": "the return value as it were of an if expression so if itself has a has a",
    "start": "872300",
    "end": "877550"
  },
  {
    "text": "value throw is an interesting one how if",
    "start": "877550",
    "end": "883640"
  },
  {
    "text": "throw has a value but what is that value which means it's that sentence you've all been wanting to hear let's talk",
    "start": "883640",
    "end": "889910"
  },
  {
    "start": "889000",
    "end": "1021000"
  },
  {
    "text": "about the type system so Cortland has its own type system Cortland started",
    "start": "889910",
    "end": "895820"
  },
  {
    "text": "life as it was primary tag was a JVM but it has its own type system it doesn't use Javas type system and everything has",
    "start": "895820",
    "end": "903830"
  },
  {
    "text": "everything is an expression so everything has a value so there are some changes and some differences between Kotlin type system and Java type system",
    "start": "903830",
    "end": "910460"
  },
  {
    "text": "or any other target that it has so one of the key things because everything is an expression means that there's no void",
    "start": "910460",
    "end": "917240"
  },
  {
    "text": "keywords a no void type void isn't even a type void is a lack of types so there's no void if you need to have",
    "start": "917240",
    "end": "925010"
  },
  {
    "text": "something which doesn't really return anything you can use the unit type like you can in F sharp for example and unit",
    "start": "925010",
    "end": "932000"
  },
  {
    "text": "is a type and has a single value and it just is just something which is useful for when you're having things like",
    "start": "932000",
    "end": "937580"
  },
  {
    "text": "generics void doesn't work with Jeanette you can't pass it around in there whereas you can have unit as part of",
    "start": "937580",
    "end": "943790"
  },
  {
    "text": "your generics the route type is a type called any and it's not Java's object",
    "start": "943790",
    "end": "950480"
  },
  {
    "text": "it's it's its own type although when you're doing Java interrupts they do map nicely together and then finally we get",
    "start": "950480",
    "end": "958279"
  },
  {
    "text": "to the the type which is all about throw and that's the nothing type nothing is a",
    "start": "958279",
    "end": "963769"
  },
  {
    "text": "little bit special there are no instances of nothing you can't have an instance of the nothing type what",
    "start": "963769",
    "end": "969769"
  },
  {
    "text": "nothing really says is that this is the end of execution so if we have a",
    "start": "969769",
    "end": "974930"
  },
  {
    "text": "function that returns nothing or its return type is nothing then that function will never end it will never",
    "start": "974930",
    "end": "980750"
  },
  {
    "text": "finish it'll it'll usually throw or hold the program or something like that so",
    "start": "980750",
    "end": "985880"
  },
  {
    "text": "this can then be used by the type system to know that execution doesn't carry on",
    "start": "985880",
    "end": "990890"
  },
  {
    "text": "through pass this point you can use that when you're doing type checks for",
    "start": "990890",
    "end": "995959"
  },
  {
    "text": "example and you can know that there's a certain value here or that the control flow of the program has finished at this",
    "start": "995959",
    "end": "1002110"
  },
  {
    "text": "point if you are doing Java Interop the type system hides away the differences",
    "start": "1002110",
    "end": "1007540"
  },
  {
    "text": "between Java's primitive and wrapper types so you don't have to worry about int and integer so you just use the",
    "start": "1007540",
    "end": "1013690"
  },
  {
    "text": "Kotlin integer and it will be fine or we good and then of course there are functional types and notable types which",
    "start": "1013690",
    "end": "1019779"
  },
  {
    "text": "we'll look at in a minute those generics as well and I'm gonna get bit hand-wavy",
    "start": "1019779",
    "end": "1025209"
  },
  {
    "text": "here because there are generics and that's all I'm really going to get into there's a bit more stuff going on here",
    "start": "1025209",
    "end": "1030280"
  },
  {
    "text": "with variants and type verification and all that kind of stuff but let's just say there's jerax it's closer to Jarvis",
    "start": "1030280",
    "end": "1037569"
  },
  {
    "text": "generics than it is to C sharps but it's still its own kind of thing um still on",
    "start": "1037569",
    "end": "1044290"
  },
  {
    "start": "1039000",
    "end": "1079000"
  },
  {
    "text": "the type system Kotlin has the idea of smartcasts so for example this little snippet here",
    "start": "1044290",
    "end": "1050610"
  },
  {
    "text": "we've got the parameter X which is of any type so we don't know what it is it's the route Itsuki the equivalent of object and",
    "start": "1050610",
    "end": "1057000"
  },
  {
    "text": "we're doing some pattern matching to see what kind of type it is and as soon as we said well you know when it's an",
    "start": "1057000",
    "end": "1063220"
  },
  {
    "text": "string the compiler says okay it's a string I'm going to treat it like a string and so you don't have to cast or",
    "start": "1063220",
    "end": "1068530"
  },
  {
    "text": "you don't have to create a new variable of the the string type the compiler now just know",
    "start": "1068530",
    "end": "1073929"
  },
  {
    "text": "that is a string and you can use the properties and methods of certain functions as normal and the the compiler",
    "start": "1073929",
    "end": "1081820"
  },
  {
    "start": "1079000",
    "end": "1088000"
  },
  {
    "text": "sort of the IDE will show you this as well so it'll highlight the code and then give you the appropriate code completion - all right null safety this",
    "start": "1081820",
    "end": "1090909"
  },
  {
    "start": "1088000",
    "end": "1130000"
  },
  {
    "text": "is a bit more interesting by default so Kotlin has tackled the whole null safety",
    "start": "1090909",
    "end": "1098470"
  },
  {
    "text": "issue by saying that types are non nullable by default so if you have a",
    "start": "1098470",
    "end": "1103509"
  },
  {
    "text": "string type it's gonna have a value you're not gonna get a null value of string so you can quite happily call",
    "start": "1103509",
    "end": "1109740"
  },
  {
    "text": "lengths on get use the length property on a string and you know it's going to be fine it's going to compile and it's",
    "start": "1109740",
    "end": "1115840"
  },
  {
    "text": "going to be good and you can't assign null to a non nullable string there's",
    "start": "1115840",
    "end": "1123009"
  },
  {
    "text": "going to be a compile time error the compiler will help you out here and will tell you that you can't do this but of",
    "start": "1123009",
    "end": "1132009"
  },
  {
    "start": "1130000",
    "end": "1222000"
  },
  {
    "text": "course you can't have nullable types as well so we use the question mark syntax to declare a type of being as being",
    "start": "1132009",
    "end": "1139149"
  },
  {
    "text": "nullable so you can have string question mark and so he got a notable type you can this can have a value or it can have",
    "start": "1139149",
    "end": "1144909"
  },
  {
    "text": "no and so you don't know what it is at the point you're using it so you can",
    "start": "1144909",
    "end": "1149919"
  },
  {
    "text": "assign null to it you can assign a property an actual value to it but you can't call just length",
    "start": "1149919",
    "end": "1155889"
  },
  {
    "text": "you can't call be length you could you because that could be null and you could dereference that and you could get an",
    "start": "1155889",
    "end": "1161019"
  },
  {
    "text": "exception so the compiler will tell you know you have to do some kind of null check first and you can do an explicit",
    "start": "1161019",
    "end": "1167799"
  },
  {
    "text": "null check and you can compare against null and work with it from there or you can use the conditional access operator",
    "start": "1167799",
    "end": "1174610"
  },
  {
    "text": "the question mark dot and this gives you this says if B has a value return the",
    "start": "1174610",
    "end": "1180639"
  },
  {
    "text": "length property if not return me know that then means that the type of this",
    "start": "1180639",
    "end": "1185679"
  },
  {
    "text": "expression returns back is nullable int so the null kind of propagates through and there so sooner or later you're",
    "start": "1185679",
    "end": "1190990"
  },
  {
    "text": "still going to have to do null checks you can also tell the compiler that you",
    "start": "1190990",
    "end": "1198190"
  },
  {
    "text": "don't care that this is definitely gonna have a value and you can use the not null assertion operator the double",
    "start": "1198190",
    "end": "1203470"
  },
  {
    "text": "exclamation mark and this will sort of discard any kind of warning and arrows and the compiler would",
    "start": "1203470",
    "end": "1208909"
  },
  {
    "text": "normally give you and it will just go for it you're gonna get a runtime assert if you get it wrong this is you basically telling the compiler that",
    "start": "1208909",
    "end": "1215210"
  },
  {
    "text": "you're smarter than the compiler so go and do it you're probably not smarter than compiler so probably don't use this",
    "start": "1215210",
    "end": "1222490"
  },
  {
    "start": "1222000",
    "end": "1320000"
  },
  {
    "text": "Interop is an interesting question because once you're in the Kotlin world and the Kotlin type system then you kind",
    "start": "1223510",
    "end": "1229760"
  },
  {
    "text": "of know what the null ability of everything is as it goes through and the compiler will follow that through and trace it through and tell you but when",
    "start": "1229760",
    "end": "1235850"
  },
  {
    "text": "you are accessing third-party AP is whether that's from the system whether that's from another vendor or another",
    "start": "1235850",
    "end": "1242360"
  },
  {
    "text": "open source project or whatever then you're not necessarily going to know the null safety of those types and so how do",
    "start": "1242360",
    "end": "1249919"
  },
  {
    "text": "you deal with this what what how does this work so Carlin has the idea of platform types",
    "start": "1249919",
    "end": "1255139"
  },
  {
    "text": "and this is the this is the type then of return value for example of an API of an",
    "start": "1255139",
    "end": "1262610"
  },
  {
    "text": "unknown API it gets treated as a platform types whereas a platform type where the Kotlin and the compiler",
    "start": "1262610",
    "end": "1269090"
  },
  {
    "text": "basically says we don't know we don't know whether it's null or not null but what we will do is ignore it you're on",
    "start": "1269090",
    "end": "1275029"
  },
  {
    "text": "your own you figure it out effectively you don't get any guarantees you're not gonna get any warnings when you try and",
    "start": "1275029",
    "end": "1280639"
  },
  {
    "text": "dereference it it's up to you so you will now have potential runtime asserts",
    "start": "1280639",
    "end": "1285820"
  },
  {
    "text": "and so you have to sort of code with this and work with this and and try and",
    "start": "1285820",
    "end": "1291769"
  },
  {
    "text": "make it it work but on your site there are a whole load of annotations which you can use and the the compiler ships",
    "start": "1291769",
    "end": "1300350"
  },
  {
    "text": "with some annotations for for various things so and the JVM we've got a whole load of annotations which will help you",
    "start": "1300350",
    "end": "1305809"
  },
  {
    "text": "and give you that null ability information if the compiler sees these this information it will treat them like",
    "start": "1305809",
    "end": "1312169"
  },
  {
    "text": "Kotlin types no or not null and then you'll get the appropriate warnings but other than that you have to kind of work",
    "start": "1312169",
    "end": "1318380"
  },
  {
    "text": "with it yourself all right let's move on to functions there's a whole load of",
    "start": "1318380",
    "end": "1324260"
  },
  {
    "start": "1320000",
    "end": "1432000"
  },
  {
    "text": "stuff on functions there are there are a lot of fun I'm sorry",
    "start": "1324260",
    "end": "1330850"
  },
  {
    "text": "functions are you define them with the fun keyword and you can define them kind",
    "start": "1330850",
    "end": "1336590"
  },
  {
    "text": "of any way you can define them inside a class you can have member functions and again you get to see some more modifiers he",
    "start": "1336590",
    "end": "1342259"
  },
  {
    "text": "classes and functions are sealed by default their final by default you cannot derive from things you have to",
    "start": "1342259",
    "end": "1348649"
  },
  {
    "text": "design for inheritance so you have to sort of choose to inherit with that and",
    "start": "1348649",
    "end": "1354139"
  },
  {
    "text": "use the open keyword then to sort of the open modifier just to say that something",
    "start": "1354139",
    "end": "1359599"
  },
  {
    "text": "can be inherited from functions can have default values very much like in c-sharp",
    "start": "1359599",
    "end": "1365179"
  },
  {
    "text": "you can have named parameters as well when you're calling things you can use the override modifier to override things",
    "start": "1365179",
    "end": "1371299"
  },
  {
    "text": "you can have top-level functions and you can declare everything a you can see the the function signature we've got here we",
    "start": "1371299",
    "end": "1377749"
  },
  {
    "text": "get to specify the type of the parameter we also get to specify the return type but then we can start to be a little",
    "start": "1377749",
    "end": "1383690"
  },
  {
    "text": "more terse so if the function itself is just an expression then you can write as",
    "start": "1383690",
    "end": "1389179"
  },
  {
    "text": "an expression you can say the function method equals x times two for example and if the compiler can do type",
    "start": "1389179",
    "end": "1396469"
  },
  {
    "text": "inference on this you can then ignore the return type as well so you can sort of reduce the amount of typing that you",
    "start": "1396469",
    "end": "1402529"
  },
  {
    "text": "have to have to do to declare your functions and functions can be",
    "start": "1402529",
    "end": "1408799"
  },
  {
    "text": "everywhere so they can't be inside a class they can be top-level functions and it can also be inside function as well so you can have local functions and",
    "start": "1408799",
    "end": "1415639"
  },
  {
    "text": "these will only live in the scope of this particular function where it's declared and it can share then sort of",
    "start": "1415639",
    "end": "1422570"
  },
  {
    "text": "information like closures and access the",
    "start": "1422570",
    "end": "1427999"
  },
  {
    "text": "the variables and properties that are available to it there a couple more",
    "start": "1427999",
    "end": "1434599"
  },
  {
    "start": "1432000",
    "end": "1469000"
  },
  {
    "text": "modifiers which are release 'full we've got the tail rec modifier for tail",
    "start": "1434599",
    "end": "1439999"
  },
  {
    "text": "recursive functions so a tail recursive function is a recursive function where the very last thing it does is call",
    "start": "1439999",
    "end": "1445820"
  },
  {
    "text": "itself and this can be optimized away because we don't need to keep the call stack here we can then sort of optimize",
    "start": "1445820",
    "end": "1452659"
  },
  {
    "text": "this and the compiler will take this code and rewrite it into an iterative loop so we don't have to kind of push",
    "start": "1452659",
    "end": "1458269"
  },
  {
    "text": "things down and have a big stack with the chances of potential stack overflow exceptions we can sort of rewrite it as",
    "start": "1458269",
    "end": "1464269"
  },
  {
    "text": "an iterative thing that makes sense yep",
    "start": "1464269",
    "end": "1470530"
  },
  {
    "start": "1469000",
    "end": "1511000"
  },
  {
    "text": "another useful modifier is the in fix modifier so you can then change how a method is called if you got a mess",
    "start": "1470530",
    "end": "1476770"
  },
  {
    "text": "that's re function with two parameters you can call it as an infix parameter so",
    "start": "1476770",
    "end": "1482140"
  },
  {
    "text": "you can have instead of saying for example a dot two brackets--one you can do something like B to two and this this",
    "start": "1482140",
    "end": "1490300"
  },
  {
    "text": "particular example now is going to create a new instance of the pair class with those two parameters the syntax",
    "start": "1490300",
    "end": "1497290"
  },
  {
    "text": "here is a bit interesting first of all we've got a generic function and so we don't declare what the types are up",
    "start": "1497290",
    "end": "1503200"
  },
  {
    "text": "front because all we really care about is stuffing them into a pair class and the other thing is we've got this a dot",
    "start": "1503200",
    "end": "1509020"
  },
  {
    "text": "two syntax and that's for extension functions so we can have extension functions and create extra functions",
    "start": "1509020",
    "end": "1517630"
  },
  {
    "start": "1511000",
    "end": "1564000"
  },
  {
    "text": "which look like instance functions aren't existing things so in the same way the C sharp has extension methods",
    "start": "1517630",
    "end": "1522720"
  },
  {
    "text": "can't Lyon has extends from functions it works in pretty much the same sort of",
    "start": "1522720",
    "end": "1528190"
  },
  {
    "text": "way it's compiler magic compiler rewriting it looks like instance methods but actually they are just just standard",
    "start": "1528190",
    "end": "1534730"
  },
  {
    "text": "functions and static methods and called like that the way it's declared oh yeah and yeah the way it's declared it is",
    "start": "1534730",
    "end": "1541330"
  },
  {
    "text": "very different so instead of having a parameter which you pass in as the first parameter and an extension method in",
    "start": "1541330",
    "end": "1547540"
  },
  {
    "text": "c-sharp we declare the type that this applies to as part of the method name so",
    "start": "1547540",
    "end": "1554200"
  },
  {
    "text": "we've got mutable list of T dot swaps as part of the name and then that particular value is available as the",
    "start": "1554200",
    "end": "1561040"
  },
  {
    "text": "this keyword inside the function so if we now kind of look back at our in fix",
    "start": "1561040",
    "end": "1568150"
  },
  {
    "text": "method this makes more sense we've got a dot two we're saying this is an extension method on the generic type a",
    "start": "1568150",
    "end": "1573430"
  },
  {
    "text": "so it pretty much applies to anything and then this keyword is now being used",
    "start": "1573430",
    "end": "1578740"
  },
  {
    "text": "as part of the creation of the pair and",
    "start": "1578740",
    "end": "1583780"
  },
  {
    "start": "1582000",
    "end": "1620000"
  },
  {
    "text": "because of the were the the syntax declaration we have whereby the type we are extending is part of the method name",
    "start": "1583780",
    "end": "1591120"
  },
  {
    "text": "rather than a parameter we can actually use this for extension properties as well so we're not limited to just",
    "start": "1591120",
    "end": "1598390"
  },
  {
    "text": "extension methods where we can have extension properties too but an extension property can't declare any day",
    "start": "1598390",
    "end": "1604450"
  },
  {
    "text": "it can't hold its own data it can only work with existing data so here is",
    "start": "1604450",
    "end": "1609700"
  },
  {
    "text": "accessing the the size property on the list of T via the this parameter which",
    "start": "1609700",
    "end": "1617170"
  },
  {
    "text": "we don't have to specify but one of the",
    "start": "1617170",
    "end": "1624070"
  },
  {
    "start": "1620000",
    "end": "1662000"
  },
  {
    "text": "things which is interesting here is that I've been showing you just function declarations and property declarations",
    "start": "1624070",
    "end": "1629950"
  },
  {
    "text": "there's no classes in there at all we can have top level functions and properties or other package level",
    "start": "1629950",
    "end": "1635350"
  },
  {
    "text": "functions and properties so this kind of removes the biggest need for utility classes so we don't need to have to",
    "start": "1635350",
    "end": "1641290"
  },
  {
    "text": "define our utility classes which is usually just a static class with static methods and Static properties to do help",
    "start": "1641290",
    "end": "1647110"
  },
  {
    "text": "us stuff instead we can put the you know they just kind of containers their name spacing we've already got name spacing",
    "start": "1647110",
    "end": "1652600"
  },
  {
    "text": "its packages and so we can just put everything at the top level and access it's there and so we don't really need",
    "start": "1652600",
    "end": "1658810"
  },
  {
    "text": "these utility classes which is a very nice feature and we kind of actually",
    "start": "1658810",
    "end": "1664720"
  },
  {
    "start": "1662000",
    "end": "1690000"
  },
  {
    "text": "can't Lin takes it even further than that and it gets rid of the static keyword completely so you don't have static and this is a little weird and",
    "start": "1664720",
    "end": "1671500"
  },
  {
    "text": "you don't it kind of it does take a little while to get your head round but on the whole you don't tend to need it",
    "start": "1671500",
    "end": "1678310"
  },
  {
    "text": "because you just put everything as a top-level function or a property and also top-level you can have fields as",
    "start": "1678310",
    "end": "1685420"
  },
  {
    "text": "well so you can put data in at the name space package level as well but there",
    "start": "1685420",
    "end": "1690940"
  },
  {
    "start": "1690000",
    "end": "1761000"
  },
  {
    "text": "are times when you do want to have the equivalent of a static function and Kotlin has something here as well and",
    "start": "1690940",
    "end": "1696520"
  },
  {
    "text": "this is also a little bit weird it'll works a little bit differently colin has the idea of a companion object and this",
    "start": "1696520",
    "end": "1703000"
  },
  {
    "text": "is actually an instance of an object rather than static properties and things you get and a companion object which is",
    "start": "1703000",
    "end": "1709000"
  },
  {
    "text": "created alongside it there's one instance per class and it's an actual object it's created but you access it",
    "start": "1709000",
    "end": "1716860"
  },
  {
    "text": "like a standard static method so here we got a companion object with a create function which is just calling the",
    "start": "1716860",
    "end": "1722560"
  },
  {
    "text": "constructor to return back it could be doing a much more interesting sort of factory class kind of thing but it",
    "start": "1722560",
    "end": "1728110"
  },
  {
    "text": "should just create a new instance and you just call it like my class create but because it's an object you can do",
    "start": "1728110",
    "end": "1734470"
  },
  {
    "text": "more interesting things with it you can have an object which is inheritance it can implement interfaces",
    "start": "1734470",
    "end": "1740770"
  },
  {
    "text": "it can you can even create things like extension functions for companion objects I'm not entirely sure why you'd",
    "start": "1740770",
    "end": "1747010"
  },
  {
    "text": "want to do that but you can it's um it's it's an interesting thing is something",
    "start": "1747010",
    "end": "1752590"
  },
  {
    "text": "I'm not entirely sure I I would use very much of but it's available and it's",
    "start": "1752590",
    "end": "1758590"
  },
  {
    "text": "there to you and it's it's yeah it's fun it's interesting all right everybody with me so far",
    "start": "1758590",
    "end": "1765250"
  },
  {
    "start": "1761000",
    "end": "1852000"
  },
  {
    "text": "everything okay go stuff um first-class functions so we've done a lot of things with with",
    "start": "1765250",
    "end": "1772330"
  },
  {
    "text": "functions we declaring them and everything but we also get to use them as first-class objects as well so we get",
    "start": "1772330",
    "end": "1778090"
  },
  {
    "text": "to pass them around we can return them and we can work with them as such the type signature for that is very similar",
    "start": "1778090",
    "end": "1784150"
  },
  {
    "text": "to it is very similar to normal type signatures with brackets to denote the",
    "start": "1784150",
    "end": "1790900"
  },
  {
    "text": "parameters that you're using and then a return types there so here we've got a we're passing in a parameter P which is",
    "start": "1790900",
    "end": "1798130"
  },
  {
    "text": "going to accept it's going to be a function which accepts one parameter of type T and returns back a boolean and",
    "start": "1798130",
    "end": "1805179"
  },
  {
    "text": "we're here we can just loop over a list call the method sorry call the function and we're good we can pass named",
    "start": "1805179",
    "end": "1813400"
  },
  {
    "text": "functions there we use the colon colon operator to pass in there named function we can do like a name function from the",
    "start": "1813400",
    "end": "1821320"
  },
  {
    "text": "current class is odd we could do string to int to pass through or we can even",
    "start": "1821320",
    "end": "1826630"
  },
  {
    "text": "pass through something which is bound to a particular instance so we can say pass in is odd but only the one for for foo",
    "start": "1826630",
    "end": "1833770"
  },
  {
    "text": "so it's already got an implicit context there and you can also pass in rate",
    "start": "1833770",
    "end": "1839280"
  },
  {
    "text": "constructors as well because now we're treating constructors as just a normal function you can pass that in to other",
    "start": "1839280",
    "end": "1844870"
  },
  {
    "text": "methods you can return those as well so you could return a constructor as the return value of a different function or",
    "start": "1844870",
    "end": "1853480"
  },
  {
    "start": "1852000",
    "end": "1876000"
  },
  {
    "text": "you can create your own you can use the string so the the function literal syntax with the braces you declare your",
    "start": "1853480",
    "end": "1862630"
  },
  {
    "text": "parameters inside that you do the arrow and then you have the body of the method itself and and that's one way of doing",
    "start": "1862630",
    "end": "1868420"
  },
  {
    "text": "it if the parameter if the the function is",
    "start": "1868420",
    "end": "1873620"
  },
  {
    "text": "the last parameter in the in a function call you can also take it outside of the",
    "start": "1873620",
    "end": "1880660"
  },
  {
    "start": "1876000",
    "end": "1931000"
  },
  {
    "text": "the parameter list so you can have the the parameter list close it and then have the body of the function which",
    "start": "1880660",
    "end": "1886880"
  },
  {
    "text": "you're passing through and you can also shorten it down if your function only has one parameter you can you don't have",
    "start": "1886880",
    "end": "1895429"
  },
  {
    "text": "to declare it and you can just use the key word it so you can actually sort of reduce things down very much and and",
    "start": "1895429",
    "end": "1901429"
  },
  {
    "text": "make your code even smaller and in fact if we rewrite this as an extension function where the the passed in",
    "start": "1901429",
    "end": "1910130"
  },
  {
    "text": "function is the only parameter we don't have to use bracket prints the C's at all so I can do items dot any no",
    "start": "1910130",
    "end": "1917630"
  },
  {
    "text": "parentheses and then the body of the the function itself and we can use this now to sort of build dsls and build an",
    "start": "1917630",
    "end": "1925190"
  },
  {
    "text": "interesting sort of domain specific language and other useful stuff there we'll have a look at shortly but one of",
    "start": "1925190",
    "end": "1934100"
  },
  {
    "start": "1931000",
    "end": "1991000"
  },
  {
    "text": "the problems with first-class functions and passing them around and chaining things together is that they can be expensive so you paying for the cost of",
    "start": "1934100",
    "end": "1940070"
  },
  {
    "text": "the closure to grab any variables that you've got and then you've also got the actual cost of the function call itself",
    "start": "1940070",
    "end": "1945110"
  },
  {
    "text": "as well and so if you're doing this a lot for example in C sharps link while",
    "start": "1945110",
    "end": "1950450"
  },
  {
    "text": "it's very good and very expressive and very useful it can be expensive in terms of allocations and in terms of overhead",
    "start": "1950450",
    "end": "1958040"
  },
  {
    "text": "of calling functions so Kotlin has a way to work with this as well and it's another modifier and it's the inline",
    "start": "1958040",
    "end": "1964850"
  },
  {
    "text": "modifier and this tells the compiler to inline the the function body that you're just declaring into the caller so here",
    "start": "1964850",
    "end": "1972860"
  },
  {
    "text": "we could do something like creating a lock function or we could create something like C sharps using statement",
    "start": "1972860",
    "end": "1979220"
  },
  {
    "text": "as an inline function and what it'll do when the compiler sees that it'll pull all of that code in so we lose the",
    "start": "1979220",
    "end": "1985250"
  },
  {
    "text": "overhead of the closures we lose the overhead of the method call as well",
    "start": "1985250",
    "end": "1990730"
  },
  {
    "text": "but there's a bit of a gotcha here and this something is something which can be a little unintuitive until you realize",
    "start": "1990760",
    "end": "1997370"
  },
  {
    "start": "1991000",
    "end": "2035000"
  },
  {
    "text": "what it's all about and what it's for so what does this print this bit of code here we've got a for each extension",
    "start": "1997370",
    "end": "2003340"
  },
  {
    "text": "which incidentally I'd hate to see in c-sharp because we got a nice keyword which already does this and you've got",
    "start": "2003340",
    "end": "2008710"
  },
  {
    "text": "the overhead of lamda captures you got the overhead of method calls for every item that you've got but if for each is",
    "start": "2008710",
    "end": "2014110"
  },
  {
    "text": "in lined that all goes away and so this is fine and nice and okay incontinent",
    "start": "2014110",
    "end": "2019390"
  },
  {
    "text": "but what does this print when we hit item leave the value three in our list",
    "start": "2019390",
    "end": "2025930"
  },
  {
    "text": "we've got a return statement so does it print one two done or does it print one who says one two done yet",
    "start": "2025930",
    "end": "2034420"
  },
  {
    "text": "you're all very smart so if we have a quick look at it here we can see it and",
    "start": "2034420",
    "end": "2040300"
  },
  {
    "start": "2035000",
    "end": "2124000"
  },
  {
    "text": "we can run it and it prints one two and then it comes out this is because of",
    "start": "2040300",
    "end": "2046330"
  },
  {
    "text": "what we call non-local returns so a non-local return is this return statement here which is not returning",
    "start": "2046330",
    "end": "2053560"
  },
  {
    "text": "out of our lambda so we got a lambda here it's not returning out of that it",
    "start": "2053560",
    "end": "2058629"
  },
  {
    "text": "returns out of the overall containing function so it returns out of main",
    "start": "2058630",
    "end": "2064480"
  },
  {
    "text": "itself this kind of feels a little unintuitive to start with but the idea",
    "start": "2064480",
    "end": "2070450"
  },
  {
    "text": "is that by doing this you can actually write code that that looks like language",
    "start": "2070450",
    "end": "2076210"
  },
  {
    "text": "features effectively so here we've got something with a for each statement so",
    "start": "2076210",
    "end": "2081429"
  },
  {
    "text": "with the for each function but now that looks more like a language feature with for each if you wrote it as using the",
    "start": "2081430",
    "end": "2089560"
  },
  {
    "text": "for each keyword for example in c-sharp that return would make sense and you would expect it to return out of the",
    "start": "2089560",
    "end": "2094750"
  },
  {
    "text": "containing function we can also do",
    "start": "2094750",
    "end": "2101460"
  },
  {
    "text": "non-local returns as well we can actually excuse me we can add a label to it as well so we could say we can return",
    "start": "2101460",
    "end": "2108370"
  },
  {
    "text": "back but return to this point here and so if I do sort of ctrl click there it'll take me back to the that's",
    "start": "2108370",
    "end": "2114280"
  },
  {
    "text": "particular scope and if those are nested you can give them labels and you can return back to a particular point should",
    "start": "2114280",
    "end": "2119500"
  },
  {
    "text": "you need to but I know how we have this idea of non-local returns so we say yes",
    "start": "2119500",
    "end": "2126670"
  },
  {
    "start": "2124000",
    "end": "2145000"
  },
  {
    "text": "it's all about allowing inline functions in the only words that's only the case for inline functions as well it's not",
    "start": "2126670",
    "end": "2131920"
  },
  {
    "text": "for all functions but allows you to behave like a language feature because if you as I say if you'd written",
    "start": "2131920",
    "end": "2138130"
  },
  {
    "text": "that as a for each statement in c-sharp then that return would make sense yeah",
    "start": "2138130",
    "end": "2144790"
  },
  {
    "text": "but already shown you that right last thing to do with functions and I think this one took me a long time to get my",
    "start": "2144790",
    "end": "2150820"
  },
  {
    "start": "2145000",
    "end": "2193000"
  },
  {
    "text": "head round it's a bit weird it's called lambdas with receivers which is just a fancy way of effectively saying local",
    "start": "2150820",
    "end": "2157120"
  },
  {
    "text": "scope extension functions so what we're doing here is we're creating a new lambda but you can see that the syntax",
    "start": "2157120",
    "end": "2163240"
  },
  {
    "text": "for declaring it is very much like the extension function syntax we've got int not so we're saying this applies to int",
    "start": "2163240",
    "end": "2169860"
  },
  {
    "text": "the objects of type int and then it'll take a float value return an int and we",
    "start": "2169860",
    "end": "2176710"
  },
  {
    "text": "get to do something and we've got a this keyword in here as well and so basically we've created an extension function but",
    "start": "2176710",
    "end": "2183130"
  },
  {
    "text": "we've assigned it to a value rather than having to create it as a top-level actual thing we've assigned it to a value and we've got it there and so we",
    "start": "2183130",
    "end": "2189220"
  },
  {
    "text": "can call 42 dot sum and pass it around this might be slightly more obvious if",
    "start": "2189220",
    "end": "2195580"
  },
  {
    "start": "2193000",
    "end": "2218000"
  },
  {
    "text": "we write it as a function as an alarmist anonymous anonymous function declaration",
    "start": "2195580",
    "end": "2203200"
  },
  {
    "text": "instead because again it looks like it's an extension function with the int dot syntax and there's a statement and again",
    "start": "2203200",
    "end": "2211780"
  },
  {
    "text": "this is also very useful for domain-specific languages and typesafe builders which I can show you now so we",
    "start": "2211780",
    "end": "2222220"
  },
  {
    "start": "2218000",
    "end": "2245000"
  },
  {
    "text": "can build we can use this to build sort of tomates Pacific languages we've so you can have some code which looks like",
    "start": "2222220",
    "end": "2228190"
  },
  {
    "text": "this with the HTML and the body's kind of nested it's actually now looking more like data than it is code but those are",
    "start": "2228190",
    "end": "2234340"
  },
  {
    "text": "function calls and those function calls then are type safe and they have scope and they have the this statement at",
    "start": "2234340",
    "end": "2242680"
  },
  {
    "text": "those points is a particular value this might be easier to show in code get rid",
    "start": "2242680",
    "end": "2249250"
  },
  {
    "text": "of that so we have an example here which is doing the same sort of thing but more",
    "start": "2249250",
    "end": "2255700"
  },
  {
    "text": "fleshed out and you can see here we've got our HTML call here that's actually a",
    "start": "2255700",
    "end": "2262630"
  },
  {
    "text": "method call a sorry a function call if I navigate to it we can see we've got a function call here and the signature of",
    "start": "2262630",
    "end": "2269110"
  },
  {
    "text": "this is accepting a lambda with receiver and it's saying effectively a locally scoped",
    "start": "2269110",
    "end": "2276400"
  },
  {
    "text": "extension method on the class HTML all capitals and I can go to that HTML or",
    "start": "2276400",
    "end": "2281859"
  },
  {
    "text": "capitals class and that defines a couple of extra functions head and body which",
    "start": "2281859",
    "end": "2287529"
  },
  {
    "text": "then taken again another lambda with receiver another locally scoped",
    "start": "2287529",
    "end": "2292839"
  },
  {
    "text": "extension function but this one is scoped to objects of type head or objects of type body if I just jump back",
    "start": "2292839",
    "end": "2300519"
  },
  {
    "text": "to the HTML one the contents of this function is we call new on our HTML",
    "start": "2300519",
    "end": "2305799"
  },
  {
    "text": "class and then we call our locally scoped extension function our lambda",
    "start": "2305799",
    "end": "2311049"
  },
  {
    "text": "with receiver we do it on that new instance of the class so if we go back to what we have here we can see again",
    "start": "2311049",
    "end": "2319150"
  },
  {
    "text": "that the ID is giving us some hints here and it's saying this the the implicit this keyword is of type HTML so down",
    "start": "2319150",
    "end": "2328660"
  },
  {
    "text": "here I could actually type this dot and I'll get code completion of the current type and so I can create body and head",
    "start": "2328660",
    "end": "2336489"
  },
  {
    "text": "I've already got head here if I do this the this now has changed me so type head",
    "start": "2336489",
    "end": "2342640"
  },
  {
    "text": "and so I've got things I can do with with the type of head and we can use",
    "start": "2342640",
    "end": "2347859"
  },
  {
    "text": "this then to sort of build an entire sort of domain-specific language to build a type safe builder because I can only do appropriate things in there if",
    "start": "2347859",
    "end": "2354729"
  },
  {
    "text": "I'm in h1 for example let's just open",
    "start": "2354729",
    "end": "2359920"
  },
  {
    "text": "that out and if I do this here then I couldn't put a title in there because there's no title method there it's type",
    "start": "2359920",
    "end": "2366099"
  },
  {
    "text": "safe so it's nice and useful does that",
    "start": "2366099",
    "end": "2371170"
  },
  {
    "text": "make sense and we got any questions about type safe builders cool",
    "start": "2371170",
    "end": "2377339"
  },
  {
    "start": "2376000",
    "end": "2494000"
  },
  {
    "text": "okay Kotlin also ships with a standard library so it's not just about the",
    "start": "2378360",
    "end": "2384570"
  },
  {
    "text": "language and the compiler it's got a standard library it's a fairly small sounder library has a bunch of inline functions and a bunch of other things",
    "start": "2384570",
    "end": "2391050"
  },
  {
    "text": "and it is really there to sort of encourage idiomatic usage of Kotlin and to make it more Kotlin friendly to be",
    "start": "2391050",
    "end": "2398730"
  },
  {
    "text": "able to do things so it has a handful of things it's got the core type definitions so for example the any type",
    "start": "2398730",
    "end": "2404580"
  },
  {
    "text": "that we're talking about and the string and integer types which hides the Java",
    "start": "2404580",
    "end": "2410370"
  },
  {
    "text": "wrappers for example let it find there it also defines some collections and sequences so because we target very",
    "start": "2410370",
    "end": "2417630"
  },
  {
    "text": "different platforms we also want to have some collections and sequences that you can use here these are wrappers around platform types",
    "start": "2417630",
    "end": "2424740"
  },
  {
    "text": "and they provide interfaces that represent mutable and immutable views on",
    "start": "2424740",
    "end": "2430050"
  },
  {
    "text": "those wrapper types so while we've got a mutable or immutable view of it the",
    "start": "2430050",
    "end": "2435780"
  },
  {
    "text": "underlying collections are not necessarily immutable but we've kind of got these that that way of working with",
    "start": "2435780",
    "end": "2442830"
  },
  {
    "text": "it there's also methods for collecting for creating collections and for lists and sets and maps and all that kind of",
    "start": "2442830",
    "end": "2449040"
  },
  {
    "text": "stuff which is good whole bunch of higher-order functions so we can do our filter Map Reduce kind of method chaining function",
    "start": "2449040",
    "end": "2457320"
  },
  {
    "text": "training and working with that there's regular expressions in there as well again for making it sort of idiomatic",
    "start": "2457320",
    "end": "2462900"
  },
  {
    "text": "Cartland for working with regular expressions bunch of stuff for Interop working with with both the JVM or for",
    "start": "2462900",
    "end": "2469680"
  },
  {
    "text": "JavaScript and some typesafe builders so for example the JavaScript version of",
    "start": "2469680",
    "end": "2474900"
  },
  {
    "text": "the standard library includes definitions for working with the Dom so",
    "start": "2474900",
    "end": "2479910"
  },
  {
    "text": "you can then have like a typesafe builder for working with the Dom itself working with the windows and then",
    "start": "2479910",
    "end": "2487140"
  },
  {
    "text": "they're also primitives for co-routines and co-routines are a lot of fun and we're going to have a look at those so",
    "start": "2487140",
    "end": "2495030"
  },
  {
    "start": "2494000",
    "end": "2507000"
  },
  {
    "text": "what is a co-routine co-routine well there's a nice big wikipedia style",
    "start": "2495030",
    "end": "2500510"
  },
  {
    "text": "definition for that but the key things there are non pre-emptive multitasking and suspending and resuming execution",
    "start": "2500510",
    "end": "2506520"
  },
  {
    "text": "basically they are just sort of super lightweights user scheduled threads they're not written",
    "start": "2506520",
    "end": "2512220"
  },
  {
    "start": "2507000",
    "end": "2520000"
  },
  {
    "text": "threads not like operating system threads but they are a thread of execution so it's a it's it's like tasks",
    "start": "2512220",
    "end": "2519780"
  },
  {
    "text": "in c-sharp if you're familiar with that but it works in a very different manner",
    "start": "2519780",
    "end": "2525470"
  },
  {
    "start": "2520000",
    "end": "2607000"
  },
  {
    "text": "co-routines are all based on the idea of suspending functions so it works slightly differently to how you'd be",
    "start": "2525470",
    "end": "2530880"
  },
  {
    "text": "used to in c-sharp is yet another modifier on a function declaration and it's the suspend modifier but it does a",
    "start": "2530880",
    "end": "2537720"
  },
  {
    "text": "very sort of similar thing when this compiler sees this it will rewrite that function in to be a state machine and",
    "start": "2537720",
    "end": "2544050"
  },
  {
    "text": "it'll create like a state per suspension point so it'll do some work allow you to",
    "start": "2544050",
    "end": "2549270"
  },
  {
    "text": "then yield and go off and do something else it'll have a call back and it'll come back and it'll run the next step",
    "start": "2549270",
    "end": "2555030"
  },
  {
    "text": "and it'll go off into that so if you're familiar with C sharps yield return iterators and also a sync awaits it's a",
    "start": "2555030",
    "end": "2562830"
  },
  {
    "text": "very similar sort of mechanical process of rewriting that code into a state machine but the big difference is that",
    "start": "2562830",
    "end": "2570180"
  },
  {
    "text": "all the behavior actually comes from library functions not from the compiler so in c-sharp is working with yield",
    "start": "2570180",
    "end": "2576540"
  },
  {
    "text": "return it rewrites your code and does yield return it doesn't allow you to do",
    "start": "2576540",
    "end": "2581970"
  },
  {
    "text": "anything else if you are what if you want to use async await it's a different process to build a different state",
    "start": "2581970",
    "end": "2587220"
  },
  {
    "text": "machine and see me work with that and it will work with it'll return back you",
    "start": "2587220",
    "end": "2592859"
  },
  {
    "text": "know tasks of T or items that look like tasks of T whereas Kotlin will basically",
    "start": "2592859",
    "end": "2599970"
  },
  {
    "text": "just do the mechanical state machine read rewriting and then leave everything",
    "start": "2599970",
    "end": "2605369"
  },
  {
    "text": "else up to library functions so then you need to be able to launch a thorough",
    "start": "2605369",
    "end": "2612780"
  },
  {
    "text": "team to start it off to kick it off and for that we've got the idea of co-routine builders so you have a method",
    "start": "2612780",
    "end": "2618750"
  },
  {
    "text": "such as launch here which is a normal function but it takes in a lambda which has got the suspend keyword so it takes",
    "start": "2618750",
    "end": "2625770"
  },
  {
    "text": "in a suspending function and it will do something and kick it off and make it work and these coding builders use the",
    "start": "2625770",
    "end": "2633770"
  },
  {
    "text": "standard library primitives to start a curry teen but they they're just sort of just just functions so they can do a",
    "start": "2633770",
    "end": "2639810"
  },
  {
    "text": "whole bunch of things they can do a lots of different things and kick them off in different ways and you can also pass",
    "start": "2639810",
    "end": "2646170"
  },
  {
    "text": "in different context to it so for example launch here's got an override where you can pass in a UI context which",
    "start": "2646170",
    "end": "2652500"
  },
  {
    "text": "means that this will always switch back to the UI context before continuing with",
    "start": "2652500",
    "end": "2657690"
  },
  {
    "text": "the with the corroding and there are other co-routine builders as well as",
    "start": "2657690",
    "end": "2663270"
  },
  {
    "text": "part of the standard library so launch is a sort of fire-and-forget throat on the thread pool just go off and do it",
    "start": "2663270",
    "end": "2668490"
  },
  {
    "text": "kind of things there are other ones such as a sink or run blocking and they will",
    "start": "2668490",
    "end": "2674010"
  },
  {
    "text": "do very different things another interesting thing with this is",
    "start": "2674010",
    "end": "2679080"
  },
  {
    "text": "the way is another difference with c-sharp in that a weight is just another",
    "start": "2679080",
    "end": "2684270"
  },
  {
    "text": "function so when you're working with async/await and c-sharp a weight is a key word you have to await a a",
    "start": "2684270",
    "end": "2691320"
  },
  {
    "text": "synchronous function before it can do anything if you don't await it you get back a task of T and you have to do",
    "start": "2691320",
    "end": "2697320"
  },
  {
    "text": "stuff with the task Kotlin has it with sort of the the opposite way around whereby you will",
    "start": "2697320",
    "end": "2704520"
  },
  {
    "text": "always have a suspension point and if you want to work with the equivalent of task of T you have to do something else",
    "start": "2704520",
    "end": "2710460"
  },
  {
    "text": "so this is a very sort of explicit design choice by the cutting team as",
    "start": "2710460",
    "end": "2716520"
  },
  {
    "text": "well so they wanted it to be they wanted co-routines to be sequential by default so you didn't have to opt in to this",
    "start": "2716520",
    "end": "2722940"
  },
  {
    "text": "sequential behavior it just is the the normal sort of thing so as you run down you hit a suspension point you go off",
    "start": "2722940",
    "end": "2728550"
  },
  {
    "text": "and come back and you keep on doing that whereas with c-sharp unless you use the weight keyword you'd run through",
    "start": "2728550",
    "end": "2735900"
  },
  {
    "text": "everything and you'd have a bunch of tasks which you have to manually manage so in c-sharp world you kind of opt into",
    "start": "2735900",
    "end": "2741090"
  },
  {
    "text": "this sequential behavior whereas in Kotlin you instead opt into concurrent",
    "start": "2741090",
    "end": "2747270"
  },
  {
    "text": "behavior and that's what the await function gives you is the way to opt into concurrent behavior because a",
    "start": "2747270",
    "end": "2753300"
  },
  {
    "text": "weight will then return you back information which you can then work with and you can have the similar sort of",
    "start": "2753300",
    "end": "2758910"
  },
  {
    "text": "thing of tasks of T in Kotlin it's called deferred but you can do the similar sort of thing with that and",
    "start": "2758910",
    "end": "2765630"
  },
  {
    "text": "combine those tasks and run those of concurrently",
    "start": "2765630",
    "end": "2770030"
  },
  {
    "start": "2770000",
    "end": "2824000"
  },
  {
    "text": "and because co-routines are just about rewriting everything into a state",
    "start": "2771860",
    "end": "2777140"
  },
  {
    "text": "machine and in providing things by by library functions iterators can be built",
    "start": "2777140",
    "end": "2783620"
  },
  {
    "text": "with curry teams as well so it's not just about asynchronous behavior or about concurrent behavior but it is",
    "start": "2783620",
    "end": "2789230"
  },
  {
    "text": "things like iterators it's all about things where you want to suspend execution so this is the equivalent of C",
    "start": "2789230",
    "end": "2796190"
  },
  {
    "text": "sharps yield return iterators you have just a different coding builder and then a function rather than having to add a",
    "start": "2796190",
    "end": "2803750"
  },
  {
    "text": "keyword yield return you just have a yield function which is a spent suspending function and that will return",
    "start": "2803750",
    "end": "2809630"
  },
  {
    "text": "back the value and you can then sort of work with this in a sort of continuum",
    "start": "2809630",
    "end": "2814940"
  },
  {
    "text": "Anna does that make sense with curry teams they don't go any questions so far",
    "start": "2814940",
    "end": "2822670"
  },
  {
    "text": "cool right so to wrap up then is how do",
    "start": "2822670",
    "end": "2827810"
  },
  {
    "start": "2824000",
    "end": "2970000"
  },
  {
    "text": "we get started and the easiest thing to do is to go to try Kotlin org which is a",
    "start": "2827810",
    "end": "2835220"
  },
  {
    "text": "great thing a great site is an online site obviously unlike the offline",
    "start": "2835220",
    "end": "2840920"
  },
  {
    "text": "websites and it's it gives you like a",
    "start": "2840920",
    "end": "2846050"
  },
  {
    "text": "whole set of items which you can run yourself sort of test code I know this is quite small but there's a zoom in a",
    "start": "2846050",
    "end": "2854240"
  },
  {
    "text": "wee bit there it gives you a sort of test test code which you can run and in",
    "start": "2854240",
    "end": "2859520"
  },
  {
    "text": "the browser there you can just click run and we'll get the output then showing down at the bottom there and there's a whole load of samples which are",
    "start": "2859520",
    "end": "2865490"
  },
  {
    "text": "available here and it can show you a bunch of useful things you can pass in parameters to the method and you can run",
    "start": "2865490",
    "end": "2872960"
  },
  {
    "text": "that and it'll print the outputs down at the bottom and then there are the Coens",
    "start": "2872960",
    "end": "2879470"
  },
  {
    "text": "as well which allow you to then it walks you through a whole load of tasks so you can have a test and a task and it will",
    "start": "2879470",
    "end": "2886610"
  },
  {
    "text": "then check to see whether you've got it right and it'll walk you through the language so that's a great way of of getting going and there's excuse me like",
    "start": "2886610",
    "end": "2895040"
  },
  {
    "text": "example code for the cotton in action book and a whole load of things which you can execute in the browser look at",
    "start": "2895040",
    "end": "2901790"
  },
  {
    "text": "that there's even a convert from Java button which is nice and of course that's useful way then for",
    "start": "2901790",
    "end": "2909500"
  },
  {
    "text": "working with some code samples and examples in the in the browser or for you know trying to just figure out as a",
    "start": "2909500",
    "end": "2915870"
  },
  {
    "text": "small thing but if you want to actually write an app with this some kind of application then you want to use",
    "start": "2915870",
    "end": "2922140"
  },
  {
    "text": "appropriate tooling obviously we can do it an intelligent idea or Android studio",
    "start": "2922140",
    "end": "2927410"
  },
  {
    "text": "but we've also got plugins then for Eclipse as well so you can you can use Eclipse to build Kotlin code or you",
    "start": "2927410",
    "end": "2934140"
  },
  {
    "text": "could go hardcore and use the command line compiler but you know IDs yep so",
    "start": "2934140",
    "end": "2942810"
  },
  {
    "text": "that's the language that org the other thing we've got which is very useful is",
    "start": "2942810",
    "end": "2947970"
  },
  {
    "text": "the documentation the documentation is very good there's a lot of reference Docs and you can also run code directly",
    "start": "2947970",
    "end": "2955170"
  },
  {
    "text": "from the reference Docs as well it's really cool and then there are tutorials in there too so it's not just the",
    "start": "2955170",
    "end": "2963240"
  },
  {
    "text": "reference for those particular functions but you've got the tutorials which will step step you through things and work",
    "start": "2963240",
    "end": "2968580"
  },
  {
    "text": "with things and so that brings me to the end of everything really and there's",
    "start": "2968580",
    "end": "2974130"
  },
  {
    "start": "2970000",
    "end": "3067000"
  },
  {
    "text": "some links available here so Kotlin lang org is the is where the reference site is where the documentation the tutorials",
    "start": "2974130",
    "end": "2979890"
  },
  {
    "text": "are tri-dot Kotlin Lang dog not try doc cotton into org try doc cotton in Langhe is where you can actually give it a go",
    "start": "2979890",
    "end": "2986820"
  },
  {
    "text": "in the browser Carlene itself is open source it's a patchy to licensed and so you can",
    "start": "2986820",
    "end": "2992040"
  },
  {
    "text": "join in if you want to you can download you can build it you can raise issues suggest features and so on jetbrains",
    "start": "2992040",
    "end": "3000590"
  },
  {
    "text": "slash Kotlin on github there is n confusing leaves the Kotlin organization",
    "start": "3000590",
    "end": "3006080"
  },
  {
    "text": "on on github and this has got things like the extensions to the standard",
    "start": "3006080",
    "end": "3011810"
  },
  {
    "text": "library so some of the co routine information is is there some of the typesafe builders are there and more",
    "start": "3011810",
    "end": "3018200"
  },
  {
    "text": "interesting stuff going on in there Kotlin native is being built on under the JetBrains org as well and so that's",
    "start": "3018200",
    "end": "3025670"
  },
  {
    "text": "going to be the code for compiling down via LLVM to native code or web assembly",
    "start": "3025670",
    "end": "3031190"
  },
  {
    "text": "or Internet of Things or whatever and it's also where we're working on the multi targeting multi platform project",
    "start": "3031190",
    "end": "3037790"
  },
  {
    "text": "system that's me and then finally the last link then is a very good presentation about",
    "start": "3037790",
    "end": "3044590"
  },
  {
    "text": "co-routine so if you want to find out a little bit more about kuru teens how they work and some of the decisions",
    "start": "3044590",
    "end": "3050500"
  },
  {
    "text": "behind it that's a great presentation by one of the team who actually worked on",
    "start": "3050500",
    "end": "3055570"
  },
  {
    "text": "the the feature itself and I think that's it really so unless there are any questions I'd like to thank you very",
    "start": "3055570",
    "end": "3061869"
  },
  {
    "text": "much and thank you so does anybody have",
    "start": "3061869",
    "end": "3071140"
  },
  {
    "start": "3067000",
    "end": "3196000"
  },
  {
    "text": "any questions hello yes question are we ever gonna",
    "start": "3071140",
    "end": "3078460"
  },
  {
    "text": "target net the short answer is probably not I don't know I still need to find out",
    "start": "3078460",
    "end": "3085420"
  },
  {
    "text": "the full long answer I believe it's to do with the type system and in particular the generics and how generics",
    "start": "3085420",
    "end": "3092890"
  },
  {
    "text": "work because we the decision was made to you to follow the well because we're",
    "start": "3092890",
    "end": "3099940"
  },
  {
    "text": "running on the JVM generics have to have to have type eurasia so we don't encode",
    "start": "3099940",
    "end": "3105850"
  },
  {
    "text": "the generic type information as part of the compilation the JVM doesn't see it",
    "start": "3105850",
    "end": "3111340"
  },
  {
    "text": "it throws it away whereas c-sharp and with all CLR needs that information and",
    "start": "3111340",
    "end": "3116500"
  },
  {
    "text": "so we've kind of got a conflict there already we probably could encode the",
    "start": "3116500",
    "end": "3123609"
  },
  {
    "text": "type information as part of the Courtland compilation and have that as some sort of metadata sidecar that got",
    "start": "3123609",
    "end": "3129040"
  },
  {
    "text": "distributed with your package but that would then be expensive to run on this",
    "start": "3129040",
    "end": "3134440"
  },
  {
    "text": "on JVM and that and so so far the answer is no it's a bit too hard",
    "start": "3134440",
    "end": "3143460"
  },
  {
    "text": "yes we just need the demand so if you all asked for it for dotnet then you know maybe",
    "start": "3143460",
    "end": "3150539"
  },
  {
    "text": "yeah yes yes tell howdy-howdy will definitely get it sorted yes",
    "start": "3154970",
    "end": "3161960"
  }
]