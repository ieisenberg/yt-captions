[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "all right hello everyone I'm yakob thanks for joining me here still a few",
    "start": "2840",
    "end": "8760"
  },
  {
    "text": "of us holding down the fort a speed run through splicing sockets with sock map",
    "start": "8760",
    "end": "14839"
  },
  {
    "text": "is a talk I gave in the past but today we actually have a whole hour so this",
    "start": "14839",
    "end": "20600"
  },
  {
    "text": "will be more like a casual walk through of how we splice move packets between",
    "start": "20600",
    "end": "26599"
  },
  {
    "text": "the sockets using sock map API and even if you have seen this talk before I hope",
    "start": "26599",
    "end": "31720"
  },
  {
    "text": "you didn't H this is an extended version with additional",
    "start": "31720",
    "end": "37079"
  },
  {
    "text": "content few words about myself uh my day job is at cloudfare where I'm on the",
    "start": "37079",
    "end": "43039"
  },
  {
    "text": "Linux team we make sure we have a latest kernel deployed in",
    "start": "43039",
    "end": "48640"
  },
  {
    "text": "production if we find bugs you know we tend to them we troubleshoot stuff uh",
    "start": "48640",
    "end": "55120"
  },
  {
    "text": "and sometimes if we can find the kernel lacking uh some features we prototype",
    "start": "55120",
    "end": "60239"
  },
  {
    "text": "new apis or Solutions uh I also participate in Linux",
    "start": "60239",
    "end": "66799"
  },
  {
    "text": "kernel Upstream development I'm what uh they call a small time maintainer which",
    "start": "66799",
    "end": "72600"
  },
  {
    "text": "means I am in charge of a single feature sock map in this case which we're going",
    "start": "72600",
    "end": "78119"
  },
  {
    "text": "to be talking uh about today so if you uh become a sock map user or maybe a",
    "start": "78119",
    "end": "84560"
  },
  {
    "text": "contributor in the past will probably bump into each other on the Kernel mailing list",
    "start": "84560",
    "end": "91920"
  },
  {
    "text": "um to set some expectations about the the stock um nothing here is mandatory",
    "start": "93119",
    "end": "99759"
  },
  {
    "text": "you I think you'll still be able to follow along and enjoy the slides but uh",
    "start": "99759",
    "end": "104920"
  },
  {
    "text": "if you're familiar with network programming this stock is definitely networking oriented and uh if you know maybe the",
    "start": "104920",
    "end": "113079"
  },
  {
    "text": "basics of BPF if you maybe seen Martin talk yesterday that might come in handy today as well we'll also be making",
    "start": "113079",
    "end": "120680"
  },
  {
    "text": "use of some building blocks for containers in the examples that I'll be showing so if you know what c groups are",
    "start": "120680",
    "end": "127479"
  },
  {
    "text": "and name spaces are that will be helpful uh goal for today uh we're going to keep",
    "start": "127479",
    "end": "133720"
  },
  {
    "text": "it pretty simple uh yeah I hope you'll definitely know that sop exists when you leave this room",
    "start": "133720",
    "end": "140160"
  },
  {
    "text": "but for my first gol today uh I hope you'll be uh you'll have a good",
    "start": "140160",
    "end": "145959"
  },
  {
    "text": "idea when you can use this API how to use it uh so in the future if you know a",
    "start": "145959",
    "end": "153680"
  },
  {
    "text": "project comes along uh you will know if it's a good fit or maybe not a good fit",
    "start": "153680",
    "end": "159159"
  },
  {
    "text": "and uh yeah I hope you'll also leave this room feeling ready to dig deeper if",
    "start": "159159",
    "end": "165120"
  },
  {
    "text": "you need to our agenda for today um it's",
    "start": "165120",
    "end": "170720"
  },
  {
    "text": "prepacked we're going to start off uh trying to wet your appetite a little I'll um do a static demo of what we can",
    "start": "170720",
    "end": "179239"
  },
  {
    "text": "achieve with stock map uh we're going to Define what it is right it a probably",
    "start": "179239",
    "end": "184879"
  },
  {
    "text": "vag at the moment then we're going to take a short history lesson how the col",
    "start": "184879",
    "end": "189920"
  },
  {
    "text": "Ro has evolved over time in the kernel and then move on to the Practical aspects so how do you set it up how do",
    "start": "189920",
    "end": "197000"
  },
  {
    "text": "you set up your application to use this API uh move then moving on to the meat",
    "start": "197000",
    "end": "203239"
  },
  {
    "text": "of the presentation how do we actually configure it so we can move data between",
    "start": "203239",
    "end": "210040"
  },
  {
    "text": "using sck map and we're going to finish it off um taking a look at a couple of",
    "start": "210040",
    "end": "215959"
  },
  {
    "text": "real life applications uh that we know are out",
    "start": "215959",
    "end": "222239"
  },
  {
    "text": "there yeah and like I mentioned this is an extended uh version of the stock so there will be more benchmarks than",
    "start": "222239",
    "end": "228799"
  },
  {
    "text": "before we'll also dive a little bit into how the internal design and the kernel",
    "start": "228799",
    "end": "234760"
  },
  {
    "text": "looks and how to how to observe what the kernel does when you're using so sock",
    "start": "234760",
    "end": "242079"
  },
  {
    "start": "242000",
    "end": "542000"
  },
  {
    "text": "map right so uh what can sock map do for you or actually what can sock map do for",
    "start": "242079",
    "end": "248519"
  },
  {
    "text": "container networking to start off with with an example so in a typical um",
    "start": "248519",
    "end": "255120"
  },
  {
    "text": "container deployment kubernetes for instance uh if you have two containers",
    "start": "255120",
    "end": "261880"
  },
  {
    "text": "each of them is running a process uh perhaps a web server and database and they need to uh talk through to each",
    "start": "261880",
    "end": "269039"
  },
  {
    "text": "other through through uh uh tcpip um how that will work uh is that a",
    "start": "269039",
    "end": "276240"
  },
  {
    "text": "process one process which wants to send a message to another one we need to Traverse a whole network stack all the",
    "start": "276240",
    "end": "283440"
  },
  {
    "text": "layers of the network stack then the packet will need to be sent over some",
    "start": "283440",
    "end": "289039"
  },
  {
    "text": "virtual networking uh that we have in the kernel it will be a v virtual vth",
    "start": "289039",
    "end": "295199"
  },
  {
    "text": "per with something in between I've simplified it here a little bit and then we need to travel it all the way back in",
    "start": "295199",
    "end": "302440"
  },
  {
    "text": "another container in another Network namespace to deliver it to the receiver so obviously that has a cost because",
    "start": "302440",
    "end": "310080"
  },
  {
    "text": "there is quite a bit of code in between that we need to execute uh what you can do with sck map",
    "start": "310080",
    "end": "316880"
  },
  {
    "text": "uh if you know that you have two processes uh communicating over networking but residing on the same host",
    "start": "316880",
    "end": "324919"
  },
  {
    "text": "we can actually create a bypass so that the message that you send from one so ET",
    "start": "324919",
    "end": "330600"
  },
  {
    "text": "gets uh directly delivered to the Target socket bypassing the other networking",
    "start": "330600",
    "end": "337680"
  },
  {
    "text": "layers underneath right let's actually um see",
    "start": "337680",
    "end": "343280"
  },
  {
    "text": "how we can uh uh set it up and test it out um so to simulate our containers",
    "start": "343280",
    "end": "350680"
  },
  {
    "text": "we're just going to uh use the network name spaces because we we care just about that aspect of containers",
    "start": "350680",
    "end": "359840"
  },
  {
    "text": "uh we're going to link them with a V vth per which is just a virtual ethernet",
    "start": "359840",
    "end": "365680"
  },
  {
    "text": "link between uh that you can create between two Network namespaces bring the links up these are",
    "start": "365680",
    "end": "371639"
  },
  {
    "text": "regular network interfaces assign them some addresses and then in one of uh the Nam",
    "start": "371639",
    "end": "379240"
  },
  {
    "text": "spaces Network Nam spaces we're going to run a TCP server I used sock perf a",
    "start": "379240",
    "end": "384560"
  },
  {
    "text": "benchmarking tool in this case and in another network name space",
    "start": "384560",
    "end": "390039"
  },
  {
    "text": "we're going to run a client and V client is going to simulate a synthetic workload uh in this case I've chosen a",
    "start": "390039",
    "end": "397400"
  },
  {
    "text": "pinkpunk workload which is like a request response and simulating an RPC workload and we're going to get some",
    "start": "397400",
    "end": "404520"
  },
  {
    "text": "latency measurement when I ran it on my laptop I got something like 5.9 on",
    "start": "404520",
    "end": "410680"
  },
  {
    "text": "average absolute numbers don't matter here because we're going to be comparing just the base to uh another rating",
    "start": "410680",
    "end": "420639"
  },
  {
    "text": "right so uh this was the our Baseline our first run uh now we want to redo the",
    "start": "420639",
    "end": "427280"
  },
  {
    "text": "experiment with sock map so to do that we first need to load some BPF programs",
    "start": "427280",
    "end": "433720"
  },
  {
    "text": "and these programs will be using uh collections called BPF Maps we'll go",
    "start": "433720",
    "end": "439840"
  },
  {
    "text": "into the details of what are these programmed uh what do they do later",
    "start": "439840",
    "end": "445000"
  },
  {
    "text": "on uh BPF programs uh in order to be Act activated they need to actually be",
    "start": "445000",
    "end": "451639"
  },
  {
    "text": "attached somewhere or hooked somewhere uh in this case we hook one of the BPF",
    "start": "451639",
    "end": "457919"
  },
  {
    "text": "programs to so map and the other BPF program will hook",
    "start": "457919",
    "end": "463319"
  },
  {
    "text": "it up to a c group a control group uh in which we're going to be running our",
    "start": "463319",
    "end": "469400"
  },
  {
    "text": "processes so once we have that set up we again will uh start our server and",
    "start": "469400",
    "end": "476440"
  },
  {
    "text": "client so we first move our shell to the control group that we have just created so it's children processes will also be",
    "start": "476440",
    "end": "484520"
  },
  {
    "text": "started in that control group just like before we start the server and we start",
    "start": "484520",
    "end": "490479"
  },
  {
    "text": "the client and they do the Benchmark and the measurement and this time I got",
    "start": "490479",
    "end": "495599"
  },
  {
    "text": "something like 4.7 uh so lower which was expected because you",
    "start": "495599",
    "end": "503240"
  },
  {
    "text": "know we're executing lass code and yeah I guess double digit Improvement uh I",
    "start": "503240",
    "end": "509919"
  },
  {
    "text": "didn't have to modify the application in anyway I was able to uh create this bypass kind of from",
    "start": "509919",
    "end": "516959"
  },
  {
    "text": "the outside we're going to see later on how how how how we can do that I guess",
    "start": "516959",
    "end": "522760"
  },
  {
    "text": "not bad if you care about your latency for your RPC um but you don't don't have to take",
    "start": "522760",
    "end": "528839"
  },
  {
    "text": "my word for it um uh this Benchmark is all scripted um you can grab it from",
    "start": "528839",
    "end": "535320"
  },
  {
    "text": "GitHub and run it in your environment and see if you actually see the same Improvement or",
    "start": "535320",
    "end": "542240"
  },
  {
    "start": "542000",
    "end": "650000"
  },
  {
    "text": "not right so um let's take a step back now that we got a sample of what you can",
    "start": "542240",
    "end": "548920"
  },
  {
    "text": "do with s map and actually Define what what we mean by it so when we say uh",
    "start": "548920",
    "end": "555399"
  },
  {
    "text": "sock map we uh actually uh mean two things so the term is",
    "start": "555399",
    "end": "561279"
  },
  {
    "text": "overloaded um first of all uh we can refer to so map as a collection or a",
    "start": "561279",
    "end": "567920"
  },
  {
    "text": "container that the simplement in the Linux kernel which we can use to uh",
    "start": "567920",
    "end": "572959"
  },
  {
    "text": "store references to socket objects and that container is exposed to",
    "start": "572959",
    "end": "579720"
  },
  {
    "text": "uh user space and BPF programs as a BPF map which is a key Value",
    "start": "579720",
    "end": "586440"
  },
  {
    "text": "Store um important fact about it is that it actually holds weak references to",
    "start": "586440",
    "end": "592160"
  },
  {
    "text": "socket so it won't keep sockets alive uh the second meaning of s map uh",
    "start": "592160",
    "end": "601360"
  },
  {
    "text": "is uh that it's an API that we can use to steer or redirect packets socket to",
    "start": "601360",
    "end": "609120"
  },
  {
    "text": "socket uh we can both redirect packets or we can polish them filter them we're",
    "start": "609120",
    "end": "614800"
  },
  {
    "text": "going to be focusing today only our",
    "start": "614800",
    "end": "619519"
  },
  {
    "text": "redirecting and that steering redirecting policy we express that through a set of uh BPF programs which",
    "start": "620440",
    "end": "627519"
  },
  {
    "text": "we load into the Curve kernel uh so it's that's our code being executed in the",
    "start": "627519",
    "end": "633399"
  },
  {
    "text": "kernel context uh and BPF programs like I mentioned in order to be activated they",
    "start": "633399",
    "end": "639519"
  },
  {
    "text": "need to be attached somewhere and uh for that we have a special set of",
    "start": "639519",
    "end": "644880"
  },
  {
    "text": "hooks uh for redirecting that exist in the socket",
    "start": "644880",
    "end": "650560"
  },
  {
    "start": "650000",
    "end": "890000"
  },
  {
    "text": "layer right um quick history lesson how did we get",
    "start": "651680",
    "end": "656959"
  },
  {
    "text": "here um it this story of sock map starts back in 2016 with some something called",
    "start": "656959",
    "end": "665480"
  },
  {
    "text": "kernel connection multiplexer but a whole different API that we're not going to be talking about today but it uh",
    "start": "665480",
    "end": "673200"
  },
  {
    "text": "introduced some important infrastructure uh on top of which sck",
    "start": "673200",
    "end": "678480"
  },
  {
    "text": "map was later built uh the initial version actually appeared in",
    "start": "678480",
    "end": "685279"
  },
  {
    "text": "4.14 uh it was um designed it was proposed as a kind of counterpart of",
    "start": "685279",
    "end": "691839"
  },
  {
    "text": "what was already possible at the time with XDP which is BPF running at the",
    "start": "691839",
    "end": "698120"
  },
  {
    "text": "network driver layer uh with XDP you can redirect packets from one network",
    "start": "698120",
    "end": "704240"
  },
  {
    "text": "interface to another and sock map was uh um designed to to to offer the same but",
    "start": "704240",
    "end": "710480"
  },
  {
    "text": "at the socket layer so uh you want to redirect packets from one socket to",
    "start": "710480",
    "end": "717440"
  },
  {
    "text": "another uh that has later evolved at first we were only able to redirect packets so traffic kind of coming in",
    "start": "717920",
    "end": "724480"
  },
  {
    "text": "from the network St to the socket later on it was extended so that we can also redirect messages messages are what your",
    "start": "724480",
    "end": "732240"
  },
  {
    "text": "application hands over to the kernel when you send something from a",
    "start": "732240",
    "end": "738760"
  },
  {
    "text": "socket um in 4.18 we gained another variant of a container",
    "start": "738760",
    "end": "744920"
  },
  {
    "text": "initially for holding socket references initially uh we had only container index",
    "start": "744920",
    "end": "751880"
  },
  {
    "text": "by integers as key and in 4.18 we gained a soash which uh uh where you can use an",
    "start": "751880",
    "end": "759680"
  },
  {
    "text": "arbitrary binary blob as a key uh later on sock map most well made",
    "start": "759680",
    "end": "767519"
  },
  {
    "text": "compatible with in kernal TLS so if you have a TCP socket and you also want to",
    "start": "767519",
    "end": "774880"
  },
  {
    "text": "uh and you want to offload TLS handling to the kernel and also use red Direction",
    "start": "774880",
    "end": "781000"
  },
  {
    "text": "together that became possible since that moment uh moving on to version four or",
    "start": "781000",
    "end": "786440"
  },
  {
    "text": "five of the Cal 2020 um sock map has evolved to uh be a kind of a generic",
    "start": "786440",
    "end": "793680"
  },
  {
    "text": "container for socket references initially it was used only to store references to uh connected established",
    "start": "793680",
    "end": "801360"
  },
  {
    "text": "sockets we extended it so we can also store unconnected UDP sockets or",
    "start": "801360",
    "end": "806880"
  },
  {
    "text": "listening TCP sockets later on uh support for something called",
    "start": "806880",
    "end": "813079"
  },
  {
    "text": "BPF iterators was added that is Handy um because it gives you a way to iterate",
    "start": "813079",
    "end": "820839"
  },
  {
    "text": "over the contents of your sock map container and you can copy or move",
    "start": "820839",
    "end": "825920"
  },
  {
    "text": "references from one sock map instance to another uh",
    "start": "825920",
    "end": "831720"
  },
  {
    "text": "2021 uh we uh gained ability to redirect UDP packets in addition to TCP which was",
    "start": "831720",
    "end": "839759"
  },
  {
    "text": "supported from the start then uh same year later on we also added support for Unix Domine",
    "start": "839759",
    "end": "848040"
  },
  {
    "text": "sockets and moving on to version six just last year uh we uh gained ability",
    "start": "848040",
    "end": "856000"
  },
  {
    "text": "to redirect to V sockets V sockets if you haven't heard about them are a way to have a direct link between your",
    "start": "856000",
    "end": "865240"
  },
  {
    "text": "hypervisor and your guest uh without having to go through the virtual network",
    "start": "865240",
    "end": "872800"
  },
  {
    "text": "card and you know the code uh continues to evolve uh we still have stuff to do like",
    "start": "872800",
    "end": "880399"
  },
  {
    "text": "uh this one famous finish guy recently said uh Linux is not ready yet and S map",
    "start": "880399",
    "end": "887560"
  },
  {
    "text": "isn't either all right so back to practical",
    "start": "887560",
    "end": "894959"
  },
  {
    "start": "890000",
    "end": "1134000"
  },
  {
    "text": "stuff how do we actually uh set use this API to do something",
    "start": "894959",
    "end": "900800"
  },
  {
    "text": "useful well to um redirect packets between sockets first of all we need a",
    "start": "900800",
    "end": "906240"
  },
  {
    "text": "socket right and this in this case we need a connected socket so there are two ways to create a connected socket uh we",
    "start": "906240",
    "end": "914600"
  },
  {
    "text": "can either initiate an outgoing connection and that's what we call an active open and we usually do that with",
    "start": "914600",
    "end": "920720"
  },
  {
    "text": "a connect CIS call or we can uh accept an incoming connection and that's called",
    "start": "920720",
    "end": "925959"
  },
  {
    "text": "sometimes a passive open uh what kind of socket we can use uh",
    "start": "925959",
    "end": "932920"
  },
  {
    "text": "almost any kind we still do support like I think two types unique uh sequence",
    "start": "932920",
    "end": "939000"
  },
  {
    "text": "packet sockets and V so datagram sockets but uh otherwise yeah the choice is",
    "start": "939000",
    "end": "945440"
  },
  {
    "text": "pretty wide these days right we have our socket let's",
    "start": "945440",
    "end": "951199"
  },
  {
    "text": "leave that for a moment now we need to create our container that will hold preferences to our sockets so uh we",
    "start": "951199",
    "end": "959160"
  },
  {
    "text": "create it uh the same way as we do for any kind any other kind of BPF map uh",
    "start": "959160",
    "end": "965560"
  },
  {
    "text": "that's through a subcommand uh of a BPF CIS um you usually won't be doing it",
    "start": "965560",
    "end": "972160"
  },
  {
    "text": "directly uh I expect you will be using a wrapper in your favorite programming",
    "start": "972160",
    "end": "978000"
  },
  {
    "text": "language for BPF like versus BPF go for goang versus I for rust for instance and",
    "start": "978000",
    "end": "985720"
  },
  {
    "text": "if you're doing cc++ versus for reference uh implementation called slip",
    "start": "985720",
    "end": "992800"
  },
  {
    "text": "BPF or uh which I find useful uh for prototyping and experimenting you can",
    "start": "992800",
    "end": "1000199"
  },
  {
    "text": "also do it from the command line using the BPF tool that get shipped together",
    "start": "1000199",
    "end": "1005319"
  },
  {
    "text": "with uh your Linux kernel package so as I already um mentioned",
    "start": "1005319",
    "end": "1012240"
  },
  {
    "text": "during the history lesson we have two flavors of the container one where the",
    "start": "1012240",
    "end": "1018279"
  },
  {
    "text": "key is just an integer ver bit always and the other one where it's a binary",
    "start": "1018279",
    "end": "1024160"
  },
  {
    "text": "blob what what what can we use as a binary BL where for instance we can use a for tle so like the source and",
    "start": "1024160",
    "end": "1031400"
  },
  {
    "text": "destination address of the socket or you can give it a string label whatever you",
    "start": "1031400",
    "end": "1036880"
  },
  {
    "text": "want and sock map containers should not be confused with something else called",
    "start": "1036880",
    "end": "1043959"
  },
  {
    "text": "sock array that's something completely different and completely different IPI",
    "start": "1043959",
    "end": "1049799"
  },
  {
    "text": "that we use for uh yeah for uh load",
    "start": "1049799",
    "end": "1055880"
  },
  {
    "text": "balancing uh once we have our BPF map our sock map created we",
    "start": "1056200",
    "end": "1062039"
  },
  {
    "text": "need uh our program which which will express our redirecting logic uh there",
    "start": "1062039",
    "end": "1068320"
  },
  {
    "text": "are two different program times that we'll be using I'll explain later which one we use in what situation so we're",
    "start": "1068320",
    "end": "1076039"
  },
  {
    "text": "going to have to load that program that code in into the kernel first and that program uh it will need",
    "start": "1076039",
    "end": "1083880"
  },
  {
    "text": "to pick a Target socket to which we're going to redirect packets so it will be",
    "start": "1083880",
    "end": "1090280"
  },
  {
    "text": "uh referring to a sock map container because it will point at a at an entry",
    "start": "1090280",
    "end": "1095880"
  },
  {
    "text": "in sock and that way we will select the target socket and as I mentioned for the",
    "start": "1095880",
    "end": "1102480"
  },
  {
    "text": "program to be activated we need to attach it somewhere in this case we attach it to the container which creates",
    "start": "1102480",
    "end": "1109960"
  },
  {
    "text": "this kind of cyclic reference right once we have a container",
    "start": "1109960",
    "end": "1116880"
  },
  {
    "text": "created and the program attached and running loaded and running then only and",
    "start": "1116880",
    "end": "1121919"
  },
  {
    "text": "only then we can uh insert or like populate the container with so with",
    "start": "1121919",
    "end": "1128159"
  },
  {
    "text": "socket references if you do it beforehand then it would't have any",
    "start": "1128159",
    "end": "1134280"
  },
  {
    "start": "1134000",
    "end": "1395000"
  },
  {
    "text": "effect so how do we actually get these references in to The",
    "start": "1134280",
    "end": "1140360"
  },
  {
    "text": "Container well that's the there's the easy case uh which you'll probably only",
    "start": "1140360",
    "end": "1146360"
  },
  {
    "text": "encounter when you're experimenting I guess when um the same process is both",
    "start": "1146360",
    "end": "1152640"
  },
  {
    "text": "the owner of the socket which you would like to insert into a s map container",
    "start": "1152640",
    "end": "1158280"
  },
  {
    "text": "and also the owner of the container in this case it's a pretty simple uh a matter of doing one",
    "start": "1158280",
    "end": "1166400"
  },
  {
    "text": "Cisco but life isn't usually that simple uh often times uh one process owns the",
    "start": "1166400",
    "end": "1174799"
  },
  {
    "text": "socket and another one owns the BPF container so what we can arrange in such",
    "start": "1174799",
    "end": "1181400"
  },
  {
    "text": "a situation well we can make the two cooperate and using uh SCM rights um",
    "start": "1181400",
    "end": "1189600"
  },
  {
    "text": "ancillary message and Unix sockets you can uh hand over a file descriptor to",
    "start": "1189600",
    "end": "1196600"
  },
  {
    "text": "your socket to another process",
    "start": "1196600",
    "end": "1200640"
  },
  {
    "text": "but if you're not that lucky and you don't have control over both",
    "start": "1202080",
    "end": "1207919"
  },
  {
    "text": "processes uh then there is also another way then that is not Cooperative uh but it's privileged on",
    "start": "1207919",
    "end": "1215320"
  },
  {
    "text": "the other hand uh where you are able to get a duplicate file descriptor for a",
    "start": "1215320",
    "end": "1221559"
  },
  {
    "text": "socket that is owned by another process you can uh yeah knowing the process",
    "start": "1221559",
    "end": "1227880"
  },
  {
    "text": "identifier uh you can walk over all the file descriptors identify the soet you're",
    "start": "1227880",
    "end": "1233760"
  },
  {
    "text": "interested it and open a file descriptor for",
    "start": "1233760",
    "end": "1238200"
  },
  {
    "text": "it and finally what uh we have seen uh what we have seen already in the demo uh",
    "start": "1239000",
    "end": "1246640"
  },
  {
    "text": "at the beginning um you can also uh get",
    "start": "1246640",
    "end": "1251799"
  },
  {
    "text": "your hands on the socket references without uh modifying the process in any",
    "start": "1251799",
    "end": "1258600"
  },
  {
    "text": "anyway or uh stealing vfds uh there is a special kind of a BPF program called",
    "start": "1258600",
    "end": "1265080"
  },
  {
    "text": "Sops which you we can we attach to a control group and that program is kind of event driven it gets invoked for",
    "start": "1265080",
    "end": "1273440"
  },
  {
    "text": "various networking events and a couple of them is when we open an outgoing",
    "start": "1273440",
    "end": "1278679"
  },
  {
    "text": "connection or when we accept an incoming TCP connection and as a as its context this",
    "start": "1278679",
    "end": "1285520"
  },
  {
    "text": "program will get a reference to a socket that was created either because of an",
    "start": "1285520",
    "end": "1291600"
  },
  {
    "text": "incoming or going connection and from the context of that BPF program we can populate F map as",
    "start": "1291600",
    "end": "1299960"
  },
  {
    "text": "well right um You might also need to clean it up um if you're not just",
    "start": "1300760",
    "end": "1308039"
  },
  {
    "text": "terminating your process and letting your system destroy everything for you",
    "start": "1308039",
    "end": "1314360"
  },
  {
    "text": "um some ways there are few ways to remove uh your reference to a socket",
    "start": "1314360",
    "end": "1319880"
  },
  {
    "text": "from sock map uh the simplest one is just by closing the socket uh if you",
    "start": "1319880",
    "end": "1326720"
  },
  {
    "text": "close all the file descriptors that point to a socket object then because sock map has just a r r reference to it",
    "start": "1326720",
    "end": "1335279"
  },
  {
    "text": "it it will just disappear then uh all BPF Maps support",
    "start": "1335279",
    "end": "1341799"
  },
  {
    "text": "and operation that allows you to delete an element from a container we can also",
    "start": "1341799",
    "end": "1347640"
  },
  {
    "text": "do that by uh referring to it by its",
    "start": "1347640",
    "end": "1352760"
  },
  {
    "text": "key we can also uh destroy the container itself that that will uh that will",
    "start": "1353159",
    "end": "1359960"
  },
  {
    "text": "delete the reference as well or um used rarely but possible",
    "start": "1359960",
    "end": "1367200"
  },
  {
    "text": "under Linux you can disconnect a socket and reuse the",
    "start": "1367200",
    "end": "1372640"
  },
  {
    "text": "object okay so uh we uh we can we know how to set this up but it's not doing",
    "start": "1374039",
    "end": "1379799"
  },
  {
    "text": "anything yet we're not pushing any data yet so let's uh actually uh jump to the",
    "start": "1379799",
    "end": "1386279"
  },
  {
    "text": "most important part of this presentation uh how do we and in what",
    "start": "1386279",
    "end": "1391440"
  },
  {
    "text": "setups we can actually move data between sockets so there are four different",
    "start": "1391440",
    "end": "1397520"
  },
  {
    "start": "1395000",
    "end": "1405000"
  },
  {
    "text": "setups that we can distinguish uh that we can uh uh create using the soap",
    "start": "1397520",
    "end": "1405159"
  },
  {
    "start": "1405000",
    "end": "1791000"
  },
  {
    "text": "API uh the first one that I want to cover is uh what I call send to",
    "start": "1405159",
    "end": "1411559"
  },
  {
    "text": "local this is actually what we have seen in the in the demo in the beginning where we create this bypass for uh",
    "start": "1411559",
    "end": "1419480"
  },
  {
    "text": "container networking and it's when we uh send a message from one socket and we",
    "start": "1419480",
    "end": "1426840"
  },
  {
    "text": "want to receive that message out of uh from our Target socket uh this is kind",
    "start": "1426840",
    "end": "1434720"
  },
  {
    "text": "of similar to what you can set up uh using socket per which is limited to",
    "start": "1434720",
    "end": "1440120"
  },
  {
    "text": "only Unix domain sockets or if we get out of a networking domain and just",
    "start": "1440120",
    "end": "1445159"
  },
  {
    "text": "regular AO it's similar to a pipe simply how do we do that using sock map",
    "start": "1445159",
    "end": "1452600"
  },
  {
    "text": "well because we are not abating on packets here but on messages uh that we send and receive uh",
    "start": "1452600",
    "end": "1460360"
  },
  {
    "text": "we use the SK message program type uh which we attach to a dedicated uh hook",
    "start": "1460360",
    "end": "1467679"
  },
  {
    "text": "for this prog type SK message verdict and this program will uh call a function",
    "start": "1467679",
    "end": "1474279"
  },
  {
    "text": "uh in BPF world we call these BPF helpers these functions which will",
    "start": "1474279",
    "end": "1479520"
  },
  {
    "text": "select the target socket to which we will steer the message and because we",
    "start": "1479520",
    "end": "1484880"
  },
  {
    "text": "are going to receive this message we also set the Ingress flag right and for",
    "start": "1484880",
    "end": "1492600"
  },
  {
    "text": "for all this to work our program also needs to return a green verdict SK pass",
    "start": "1492600",
    "end": "1500080"
  },
  {
    "text": "as opposed to SK drop if we wanted to police the traffic and drop the message",
    "start": "1500080",
    "end": "1505480"
  },
  {
    "text": "filter at for some reason how does it look in in the code",
    "start": "1505480",
    "end": "1511640"
  },
  {
    "text": "uh well it's uh it can be pretty straightforward or or complicated depends how how you can set it up uh",
    "start": "1511640",
    "end": "1518880"
  },
  {
    "text": "your program will usually uh get the message as the context it can inspect it",
    "start": "1518880",
    "end": "1524480"
  },
  {
    "text": "look at uh you know the source address the destination address and make a decision to which Target socket uh steer",
    "start": "1524480",
    "end": "1533640"
  },
  {
    "text": "the message based on that um when can we use it uh we don't",
    "start": "1533640",
    "end": "1541600"
  },
  {
    "text": "have full flexibility here um only because uh we haven't had the use cases",
    "start": "1541600",
    "end": "1549399"
  },
  {
    "text": "uh so your input socket has to be a TCP socket and your output socket can be",
    "start": "1549399",
    "end": "1554440"
  },
  {
    "text": "anything but V sockets",
    "start": "1554440",
    "end": "1559080"
  },
  {
    "text": "how does this work internally actually so normally um your socket object and",
    "start": "1559520",
    "end": "1567240"
  },
  {
    "text": "the kernel has uh one receive queue called SK receive que into which",
    "start": "1567240",
    "end": "1574919"
  },
  {
    "text": "The L4 layer will push packets uh",
    "start": "1574919",
    "end": "1580720"
  },
  {
    "text": "together with metadata in the Linux kernel V are called socket buffers skbs",
    "start": "1580720",
    "end": "1586679"
  },
  {
    "text": "in short and later on when you receive uh from a socket your SKB will be",
    "start": "1586679",
    "end": "1593520"
  },
  {
    "text": "transformed into a message which is handed over to your application when you use however when",
    "start": "1593520",
    "end": "1599880"
  },
  {
    "text": "you use sock map uh to redirect messages send out of one socket to another uh",
    "start": "1599880",
    "end": "1607039"
  },
  {
    "text": "then in the Target socket will have also a second Quee which will hold the messages so",
    "start": "1607039",
    "end": "1615440"
  },
  {
    "text": "that we uh don't trans form the message into the bucket and back into a message",
    "start": "1615440",
    "end": "1621039"
  },
  {
    "text": "when we want to receive it but instead we directly enq a message object in the",
    "start": "1621039",
    "end": "1627240"
  },
  {
    "text": "Target socket and then you receive",
    "start": "1627240",
    "end": "1631760"
  },
  {
    "text": "it um yeah and we can uh we can actually um Trace what's happening in the kernel",
    "start": "1632640",
    "end": "1639919"
  },
  {
    "text": "when we do that and see for ourselves and what happens behind the scenes uh",
    "start": "1639919",
    "end": "1645679"
  },
  {
    "text": "Linux kernel has a very uh um very useful uh tracing framework",
    "start": "1645679",
    "end": "1653360"
  },
  {
    "text": "called f trce and it will it can show you the call graph on everything of that",
    "start": "1653360",
    "end": "1659279"
  },
  {
    "text": "is happening and in this scenario it will also ask it to record the return",
    "start": "1659279",
    "end": "1666080"
  },
  {
    "text": "values that uh the functions uh yield as they uh finish executing so um we",
    "start": "1666080",
    "end": "1674360"
  },
  {
    "text": "configure our tracing and we uh point it to some entry lever for our call graph",
    "start": "1674360",
    "end": "1681279"
  },
  {
    "text": "in this case this is sent to Cisco because this is what my",
    "start": "1681279",
    "end": "1687200"
  },
  {
    "text": "network application was using uh you can use estr for instance to find which uh",
    "start": "1687200",
    "end": "1695080"
  },
  {
    "text": "Cisco ver a couple variant your application is using to send",
    "start": "1695080",
    "end": "1700679"
  },
  {
    "text": "traffic um if you run it it will produce something like that I've uh cleaned it",
    "start": "1700679",
    "end": "1706039"
  },
  {
    "text": "up a little it will contain more uh entries uh so don't get scared but uh if",
    "start": "1706039",
    "end": "1712640"
  },
  {
    "text": "you uh know a little bit about the co- structure in the kernel you can actually follow along and see that we enter into",
    "start": "1712640",
    "end": "1721159"
  },
  {
    "text": "the sisol and we allocate uh our message that we're going to send then we",
    "start": "1721159",
    "end": "1728799"
  },
  {
    "text": "run our SK message BPF program uh which uh selects the target socket",
    "start": "1728799",
    "end": "1738320"
  },
  {
    "text": "and finally once we done it we deliver the message to the receiver's queue and",
    "start": "1738480",
    "end": "1744480"
  },
  {
    "text": "you know we wake up anyone uh waiting for this socket to become readable so if",
    "start": "1744480",
    "end": "1750279"
  },
  {
    "text": "you pull for a socket waiting for a read even that's will wake you up and you can",
    "start": "1750279",
    "end": "1756399"
  },
  {
    "text": "then take action uh so what you see is that you know the both sand and uh and Q they all",
    "start": "1756399",
    "end": "1765919"
  },
  {
    "text": "happen in line right the call graph doesn't break off uh so it's it all",
    "start": "1765919",
    "end": "1772640"
  },
  {
    "text": "happens yeah the message gets delivered straight to the receiver SK um yeah this",
    "start": "1772640",
    "end": "1778200"
  },
  {
    "text": "is as good as it gets in the kernel this is also how Unix domain socket work",
    "start": "1778200",
    "end": "1784080"
  },
  {
    "text": "which is uh the fastest way you can get like local networking on the same",
    "start": "1784080",
    "end": "1791320"
  },
  {
    "text": "host all right so um moving on to next scenario this is really similar to the",
    "start": "1791320",
    "end": "1797480"
  },
  {
    "text": "one we have seen but this this time we actually want to uh send a message from",
    "start": "1797480",
    "end": "1803000"
  },
  {
    "text": "one socket but pass it along to the network stack as if it was sent through",
    "start": "1803000",
    "end": "1808399"
  },
  {
    "text": "another socket there's no direct counterpart uh of that in any other",
    "start": "1808399",
    "end": "1814159"
  },
  {
    "text": "Linux API as far as I know but it's sort of similar as if you were to splice a",
    "start": "1814159",
    "end": "1820279"
  },
  {
    "text": "pipe into a socket uh we are it again using V",
    "start": "1820279",
    "end": "1826039"
  },
  {
    "text": "message program type same attch Point same everything only this time we are not going into Ingress because we're not",
    "start": "1826039",
    "end": "1833559"
  },
  {
    "text": "receiving the message from the target socket so we don't set the angress flag and this uh uh setup is really",
    "start": "1833559",
    "end": "1841360"
  },
  {
    "text": "limited the most limited we have in sock map because it's supported only uh for",
    "start": "1841360",
    "end": "1846559"
  },
  {
    "text": "TCP but if you have a use case for it let me know uh yeah let's shift gears now and",
    "start": "1846559",
    "end": "1854880"
  },
  {
    "start": "1850000",
    "end": "2002000"
  },
  {
    "text": "uh look at something completely different uh uh redir scenario that I",
    "start": "1854880",
    "end": "1860240"
  },
  {
    "text": "call Ingress to erress where does it come up uh well uh",
    "start": "1860240",
    "end": "1865399"
  },
  {
    "text": "it comes up in um Network proxies L7 what we sometimes call L7 network",
    "start": "1865399",
    "end": "1871679"
  },
  {
    "text": "proxies uh which have kind of two uh left and right side uh we accept uh",
    "start": "1871679",
    "end": "1878440"
  },
  {
    "text": "incoming connections on the left side uh we initiate an algo connection on the",
    "start": "1878440",
    "end": "1883600"
  },
  {
    "text": "right side and then what we do we just read data out of one one side and send",
    "start": "1883600",
    "end": "1889240"
  },
  {
    "text": "it out of the other and Al of course the other way around as well uh examples of",
    "start": "1889240",
    "end": "1894799"
  },
  {
    "text": "such programs that you might have encountered there is the popular Swiss army knife so CAD utility and there is a",
    "start": "1894799",
    "end": "1903880"
  },
  {
    "text": "simple uh proxy that gets shipped to a syst d what sock map can offer for you in",
    "start": "1903880",
    "end": "1912320"
  },
  {
    "text": "this scenario is that you can you can offload the process of copying data from",
    "start": "1912320",
    "end": "1918440"
  },
  {
    "text": "the incoming so in in input socket to Output socket to the kernel so that you",
    "start": "1918440",
    "end": "1924639"
  },
  {
    "text": "don't have to exit to user space every time you need to move data from one",
    "start": "1924639",
    "end": "1929840"
  },
  {
    "text": "socket to another yeah so like I mentioned data comes in from the network stack and one",
    "start": "1929840",
    "end": "1936799"
  },
  {
    "text": "socket goes out back to the network stack from another um you can I will uh",
    "start": "1936799",
    "end": "1944519"
  },
  {
    "text": "set it up alternatively with just reading and writing or you could splice",
    "start": "1944519",
    "end": "1950120"
  },
  {
    "text": "an input socket to a pipe and then splice that pipe to an output socket but here we're talking about sock",
    "start": "1950120",
    "end": "1957679"
  },
  {
    "text": "map and to arrange it with sock map this time we're going to be using an SK SKB",
    "start": "1957679",
    "end": "1963760"
  },
  {
    "text": "program type because we're operating on packets not messages that tcpip Ingress",
    "start": "1963760",
    "end": "1969880"
  },
  {
    "text": "path hands hands us a packet uh a socket buffer as I mentioned uh so we uh have a",
    "start": "1969880",
    "end": "1978519"
  },
  {
    "text": "dedicated program type for that it has a different hook type that we're going to use and it has a dedicated helper for",
    "start": "1978519",
    "end": "1985880"
  },
  {
    "text": "redirecting packets um yeah this is uh this",
    "start": "1985880",
    "end": "1992039"
  },
  {
    "text": "configuration is uh completely flexible when it comes to what you can use on input and output um yeah you can",
    "start": "1992039",
    "end": "1999039"
  },
  {
    "text": "redirect any to any effectively um yeah let's uh take a look",
    "start": "1999039",
    "end": "2005600"
  },
  {
    "start": "2002000",
    "end": "2401000"
  },
  {
    "text": "at another benchmark um so this time we're going to be",
    "start": "2005600",
    "end": "2011120"
  },
  {
    "text": "running a proxy um in a kind of a container but we're going to just uh use",
    "start": "2011120",
    "end": "2018600"
  },
  {
    "text": "a network namespace and a control group because that's these are the two elements of a container we need here",
    "start": "2018600",
    "end": "2025440"
  },
  {
    "text": "actually and our client and server will be talking to each other through a proxy",
    "start": "2025440",
    "end": "2031120"
  },
  {
    "text": "uh what is this proxy it's a simple go proxy uh that I written if you ask Chad",
    "start": "2031120",
    "end": "2036880"
  },
  {
    "text": "GPT to for you it will I checked so you don't even have to know go L to to write",
    "start": "2036880",
    "end": "2044600"
  },
  {
    "text": "this um yeah here's uh our setup in this case we uh it comes down to to uh the",
    "start": "2044600",
    "end": "2051720"
  },
  {
    "text": "fact that we start our proxy in the control group our proxy process in the control group and then in a new network",
    "start": "2051720",
    "end": "2058480"
  },
  {
    "text": "Nam space and then our run our uh client and server similar to as before",
    "start": "2058480",
    "end": "2067399"
  },
  {
    "text": "and in this case uh I got something like 24 microc so more than last",
    "start": "2071200",
    "end": "2077960"
  },
  {
    "text": "time well no surprise there you know we have now to wake up another process and",
    "start": "2077960",
    "end": "2085480"
  },
  {
    "text": "then uh push the data through that process and also go through two uh sets of virtual",
    "start": "2085480",
    "end": "2094118"
  },
  {
    "text": "Network links um um right if we if we want to uh",
    "start": "2094119",
    "end": "2100400"
  },
  {
    "text": "now run that again with sock map just like before we need to load up uh BPF",
    "start": "2100400",
    "end": "2105440"
  },
  {
    "text": "programs we now know more what they mean we have an SK SKB program we know it",
    "start": "2105440",
    "end": "2110599"
  },
  {
    "text": "needs to be attached to our socket container to be activated and we know we",
    "start": "2110599",
    "end": "2115839"
  },
  {
    "text": "need an SK Ops program uh if we don't want to modify our proxy and it will get",
    "start": "2115839",
    "end": "2121240"
  },
  {
    "text": "hold of the connected sockets that the proxy uh creates how does it look in the",
    "start": "2121240",
    "end": "2127480"
  },
  {
    "text": "Cod excuse me uh so the skops program I just",
    "start": "2127480",
    "end": "2132720"
  },
  {
    "text": "mentioned uh it gets invoked with a context object which tells us what kind",
    "start": "2132720",
    "end": "2138240"
  },
  {
    "text": "of event it is uh that way we we can differentiate if we're dealing in with",
    "start": "2138240",
    "end": "2143880"
  },
  {
    "text": "an incoming or outgoing connection and we're going to go do two things we're going to store a reference to a socket",
    "start": "2143880",
    "end": "2150920"
  },
  {
    "text": "in in our socket container and we're also going to Remember",
    "start": "2150920",
    "end": "2156640"
  },
  {
    "text": "map in which direction which connection is going so we're going to map a unique",
    "start": "2156640",
    "end": "2162319"
  },
  {
    "text": "identifier for a socket called socket cookie uh to the",
    "start": "2162319",
    "end": "2168480"
  },
  {
    "text": "direction of of a connection why do we need that well because when our SK SKB program which is",
    "start": "2168480",
    "end": "2177200"
  },
  {
    "text": "in charge of selecting the target socket it will actually look look up uh using",
    "start": "2177200",
    "end": "2184480"
  },
  {
    "text": "that unique socket identifier in which direction uh is the connection through",
    "start": "2184480",
    "end": "2191040"
  },
  {
    "text": "which we received a packet and it will select the other",
    "start": "2191040",
    "end": "2196838"
  },
  {
    "text": "one so kind of to picture it um this is",
    "start": "2197640",
    "end": "2203560"
  },
  {
    "text": "we need this other BPF map this additional mapping because we're using",
    "start": "2203560",
    "end": "2208880"
  },
  {
    "text": "one container right so we need to kind of differentiate uh okay if we get a packet",
    "start": "2208880",
    "end": "2215720"
  },
  {
    "text": "from an incoming connection but we need redirect it to outgoing connection but we if we get return traffic from through",
    "start": "2215720",
    "end": "2222960"
  },
  {
    "text": "the outgoing connection we need to redirect it to incoming connection uh you could also arrange it differently uh",
    "start": "2222960",
    "end": "2229640"
  },
  {
    "text": "nothing stops you from doing it you could also have two sock Maps uh with",
    "start": "2229640",
    "end": "2234720"
  },
  {
    "text": "holding just one socket each and have two instances of simple BPF programs and",
    "start": "2234720",
    "end": "2240680"
  },
  {
    "text": "then you don't need that additional mapping because there is no dilemma as to which entry uh under which entry that",
    "start": "2240680",
    "end": "2248880"
  },
  {
    "text": "Target socket lives but I'm leaving that as an exercise for you uh to implement",
    "start": "2248880",
    "end": "2255400"
  },
  {
    "text": "uh yeah so uh when I run it um using sock map offload I got uh like 20 micros",
    "start": "2255400",
    "end": "2263720"
  },
  {
    "text": "seconds uh so also an improvement and you can also uh grab code to um rerun it",
    "start": "2263720",
    "end": "2272560"
  },
  {
    "text": "for yourself um but uh um depending on one what workload",
    "start": "2272560",
    "end": "2280560"
  },
  {
    "text": "type Network workload type you're running your mileage might vary",
    "start": "2280560",
    "end": "2286560"
  },
  {
    "text": "here because actually what happens inside the kernel when you do this kind",
    "start": "2286560",
    "end": "2292319"
  },
  {
    "text": "of uh packet steering is we introduce another intermediate queue right um so",
    "start": "2292319",
    "end": "2301040"
  },
  {
    "text": "when uh packet comes in into a socket uh the kernel invokes uh a socket data",
    "start": "2301040",
    "end": "2308160"
  },
  {
    "text": "ready call back right uh to to uh yeah",
    "start": "2308160",
    "end": "2313200"
  },
  {
    "text": "to to put it in the receive Q uh but in this case if we're using prir we're",
    "start": "2313200",
    "end": "2318760"
  },
  {
    "text": "actually going to R run the SK SKB program and put that packet into an",
    "start": "2318760",
    "end": "2325720"
  },
  {
    "text": "intermediate queue that exists only when we're using sock map called Ingress",
    "start": "2325720",
    "end": "2331040"
  },
  {
    "text": "SKB and then uh that queue needs to be serviced by uh kernel threat uh why do",
    "start": "2331040",
    "end": "2339079"
  },
  {
    "text": "we do that well that's actually a part of a design unfortunate part of a design",
    "start": "2339079",
    "end": "2344240"
  },
  {
    "text": "we have inherited from KCM that I mentioned in our history lesson and it's",
    "start": "2344240",
    "end": "2350599"
  },
  {
    "text": "good and bad um so uh it's done like that so we avoid head of line blocking",
    "start": "2350599",
    "end": "2357400"
  },
  {
    "text": "right so that it's not guaranteed that your target socket will be writable when",
    "start": "2357400",
    "end": "2363240"
  },
  {
    "text": "you have a pcket to write to it if it's a TCP socket say your TCP Pier might",
    "start": "2363240",
    "end": "2369079"
  },
  {
    "text": "have closed the window so you need to hold off you can't write anything for the moment uh So to avoid head of line",
    "start": "2369079",
    "end": "2376760"
  },
  {
    "text": "blocking we instead cue the packet in this intermediate queue however uh that",
    "start": "2376760",
    "end": "2384000"
  },
  {
    "text": "can lead to a buildup of that Cube because we actually don't have any back",
    "start": "2384000",
    "end": "2389720"
  },
  {
    "text": "pressure to our source socket right so that's something to keep in mind and",
    "start": "2389720",
    "end": "2395000"
  },
  {
    "text": "it's also something that we have some ideas how to improve uh we just haven't done",
    "start": "2395000",
    "end": "2401520"
  },
  {
    "start": "2401000",
    "end": "2714000"
  },
  {
    "text": "it right uh our last uh redir scenario A variation of the previous one uh this",
    "start": "2401520",
    "end": "2409680"
  },
  {
    "text": "time we we also received uh packet from the network stack but we want to deliver",
    "start": "2409680",
    "end": "2415160"
  },
  {
    "text": "it to read it out from another",
    "start": "2415160",
    "end": "2419760"
  },
  {
    "text": "socket uh we're also operating packets uh so SK SKB program again uh but this",
    "start": "2420280",
    "end": "2427440"
  },
  {
    "text": "time with the Ingress flag because we are going into the user",
    "start": "2427440",
    "end": "2432599"
  },
  {
    "text": "space uh here we also have almost total flexibility you can re it to anything",
    "start": "2432599",
    "end": "2438119"
  },
  {
    "text": "but vck if you know vsocks it doesn't make much sense to receive traffic",
    "start": "2438119",
    "end": "2444440"
  },
  {
    "text": "locally through V socket that's why it's like that um yeah and it's a lot uh",
    "start": "2444440",
    "end": "2453400"
  },
  {
    "text": "so I've uh created a cheat sheet for you if you ever find yourself trying to set",
    "start": "2453400",
    "end": "2459720"
  },
  {
    "text": "something up with sock map um I think it once you know uh start thinking in terms",
    "start": "2459720",
    "end": "2466480"
  },
  {
    "text": "of messages and socket buffers it kind of becomes more intuitive but we also",
    "start": "2466480",
    "end": "2471760"
  },
  {
    "text": "don't uh support every combo so maybe that will come in",
    "start": "2471760",
    "end": "2478440"
  },
  {
    "text": "handy okay and let's finish it off with a uh look at um couple of real life use",
    "start": "2478920",
    "end": "2486839"
  },
  {
    "text": "cases and and we'll still have time for",
    "start": "2486839",
    "end": "2491440"
  },
  {
    "text": "questions so one of the so map users that we know about uh was theum Project",
    "start": "2493040",
    "end": "2500200"
  },
  {
    "text": "they used to use sock map for for what I'm going to describe they don't use it anymore um so cium if you haven't heard",
    "start": "2500200",
    "end": "2507480"
  },
  {
    "text": "about it is a uh networking driver for",
    "start": "2507480",
    "end": "2513079"
  },
  {
    "text": "kubernetes that heavily uses BPF um um and what they were using sck",
    "start": "2513079",
    "end": "2520119"
  },
  {
    "text": "map for is to implement a transparent L7 proxy so you had an application running",
    "start": "2520119",
    "end": "2526720"
  },
  {
    "text": "in a container kubernetes container and you actually wanted to take a look at",
    "start": "2526720",
    "end": "2533319"
  },
  {
    "text": "what the uh application is sending um and decide if we should pass this",
    "start": "2533319",
    "end": "2539400"
  },
  {
    "text": "request or not and if you decide to let this request pass through you would like",
    "start": "2539400",
    "end": "2544680"
  },
  {
    "text": "to send it but uh you using the same path as if it was sent from the",
    "start": "2544680",
    "end": "2550680"
  },
  {
    "text": "container because there might be some additional setup there right might be some routing setup or maybe you're using",
    "start": "2550680",
    "end": "2556720"
  },
  {
    "text": "TLS ver so you um you kind of need to stir steer the traffic",
    "start": "2556720",
    "end": "2563480"
  },
  {
    "text": "back um yeah um I'm wondering if you can make out the redirect scenarios that",
    "start": "2563480",
    "end": "2570200"
  },
  {
    "text": "we're discussing here um so we first have a sent to local where if app was",
    "start": "2570200",
    "end": "2577359"
  },
  {
    "text": "sending I know an HTTP request that would be first redirected into a proxy",
    "start": "2577359",
    "end": "2582760"
  },
  {
    "text": "proxy can take a look at the request at the HTTP body and decide what to do with",
    "start": "2582760",
    "end": "2588960"
  },
  {
    "text": "it if and if it's a go we even redirect it back but we uh send it out of the",
    "start": "2588960",
    "end": "2597040"
  },
  {
    "text": "socket owned by the application in the container um all right another real life",
    "start": "2597040",
    "end": "2604280"
  },
  {
    "text": "use case we've heard about uh comes from from bance uh so the company behind Tik",
    "start": "2604280",
    "end": "2610839"
  },
  {
    "text": "Tok application um what they had um yeah",
    "start": "2610839",
    "end": "2616400"
  },
  {
    "text": "they had a setup where were uh there were there was a client and a server and they were talking over Unix socket and",
    "start": "2616400",
    "end": "2624079"
  },
  {
    "text": "they actually had uh multiple clients talking to the same server uh so they",
    "start": "2624079",
    "end": "2629800"
  },
  {
    "text": "wanted to migrate this setup uh so that the clients would be",
    "start": "2629800",
    "end": "2634880"
  },
  {
    "text": "moved into virtual machines for some reasons maybe security I don't know uh while the server kept on running on the",
    "start": "2634880",
    "end": "2642640"
  },
  {
    "text": "host and because they had multiple clients they didn't want to adapt all of",
    "start": "2642640",
    "end": "2648200"
  },
  {
    "text": "them to start using uh TCP or UDP so what we decided to do instead we",
    "start": "2648200",
    "end": "2655599"
  },
  {
    "text": "actually uh decided to write a proxy that will create a bridge between Unix",
    "start": "2655599",
    "end": "2662040"
  },
  {
    "text": "and UDP uh Communication channel to The Host uh and um they did what we saw",
    "start": "2662040",
    "end": "2671559"
  },
  {
    "text": "earlier they used sock map to offload this data copying between these two",
    "start": "2671559",
    "end": "2678599"
  },
  {
    "text": "sockets then they actually iterated on on this design and contributed vck Sofer",
    "start": "2678599",
    "end": "2685920"
  },
  {
    "text": "to Sock map so that they can uh create a bridge between Unix and V sockets and",
    "start": "2685920",
    "end": "2693040"
  },
  {
    "text": "that way they could bypass all the uh virtual Network working layer between",
    "start": "2693040",
    "end": "2698319"
  },
  {
    "text": "the host and the guest uh so the redirect scenarios that",
    "start": "2698319",
    "end": "2705559"
  },
  {
    "text": "we see here well it's just Ingress to Ingress but in both directions left to",
    "start": "2705559",
    "end": "2711280"
  },
  {
    "text": "right right to left all right um yeah that's uh almost",
    "start": "2711280",
    "end": "2718200"
  },
  {
    "start": "2714000",
    "end": "2841000"
  },
  {
    "text": "all where do you go if you want to learn more about this API well we have",
    "start": "2718200",
    "end": "2724240"
  },
  {
    "text": "surprisingly we have some documentation in the Linux curve uh and we have uh quite a bit of tests",
    "start": "2724240",
    "end": "2732040"
  },
  {
    "text": "in the kernel which serve as pretty good examples of uh how to use this API um",
    "start": "2732040",
    "end": "2740240"
  },
  {
    "text": "then if you uh if you just are curious about um sock map or maybe want to use",
    "start": "2740240",
    "end": "2747400"
  },
  {
    "text": "it with in kernal TLS I highly recommend uh this past talk by Daniel",
    "start": "2747400",
    "end": "2754359"
  },
  {
    "text": "and John who are actually the original of the code um yep I can also recommend",
    "start": "2754359",
    "end": "2761680"
  },
  {
    "text": "a a Blog from a few years ago by my colleag Mor who reviewed sock map from",
    "start": "2761680",
    "end": "2768240"
  },
  {
    "text": "kind of a different perspective building an echo server and if uh if you're interested in",
    "start": "2768240",
    "end": "2774280"
  },
  {
    "text": "the other use cases what we have for so map as a collection then uh I can plish",
    "start": "2774280",
    "end": "2781200"
  },
  {
    "text": "you to my talk from ebpf Summit from a few years back",
    "start": "2781200",
    "end": "2787119"
  },
  {
    "text": "and that's all I have for you today uh all the code I refer R to here is on",
    "start": "2787119",
    "end": "2795480"
  },
  {
    "text": "GitHub uh as well as uh these slides so feel free to grab them uh if you ever",
    "start": "2795480",
    "end": "2802200"
  },
  {
    "text": "need them in the future thank",
    "start": "2802200",
    "end": "2805599"
  },
  {
    "text": "you and if there are any we have plenty of time for questions",
    "start": "2808280",
    "end": "2815160"
  },
  {
    "text": "all right thank you feel free to uh chat me up in the hallway if anything comes",
    "start": "2819359",
    "end": "2824720"
  },
  {
    "text": "to your mind later thanks",
    "start": "2824720",
    "end": "2829240"
  }
]