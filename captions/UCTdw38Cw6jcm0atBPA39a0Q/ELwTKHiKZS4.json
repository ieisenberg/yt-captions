[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "everybody once again I talk about plus plus 17",
    "start": "7230",
    "end": "14880"
  },
  {
    "text": "superstar 17 language features now we talk about the library features and as",
    "start": "15750",
    "end": "22500"
  },
  {
    "text": "you know it's a little bit difficult to separate between these two because",
    "start": "22500",
    "end": "27540"
  },
  {
    "text": "sometimes the library has support for the coffee chest so but again let's see",
    "start": "27540",
    "end": "34739"
  },
  {
    "text": "what I present so to some extent I'd left make sure that if I have two hours",
    "start": "34739",
    "end": "40680"
  },
  {
    "text": "that one fits the first hour and the other fit second hour so we are moving more and more towards library pure",
    "start": "40680",
    "end": "48239"
  },
  {
    "start": "44000",
    "end": "57000"
  },
  {
    "text": "library features yeah my name is Nicola you do distill also of some suppose last",
    "start": "48239",
    "end": "53640"
  },
  {
    "text": "books 20 years involved in C++ standardization and so it's partially my",
    "start": "53640",
    "end": "58710"
  },
  {
    "start": "57000",
    "end": "101000"
  },
  {
    "text": "fault what we see it the first thing I want to introduce as library features",
    "start": "58710",
    "end": "65970"
  },
  {
    "text": "are so-called vocabulary types which is to some extent we are extending the type",
    "start": "65970",
    "end": "71820"
  },
  {
    "text": "system of C++ 17 maybe again because in",
    "start": "71820",
    "end": "77640"
  },
  {
    "text": "in the old center we had something like like string and pair and couple which to",
    "start": "77640",
    "end": "85260"
  },
  {
    "text": "some extend are now well you can consider them as part of the pipe type system although implemented as a library",
    "start": "85260",
    "end": "94170"
  },
  {
    "text": "but they are so deeply involved into the system yeah so that you can consider",
    "start": "94170",
    "end": "100320"
  },
  {
    "text": "that so and the first thing I want to introduce you is string you string you",
    "start": "100320",
    "end": "106650"
  },
  {
    "start": "101000",
    "end": "330000"
  },
  {
    "text": "is a new string class or spring like class the idea is that copying a string",
    "start": "106650",
    "end": "115770"
  },
  {
    "text": "is expensive because part of the string is the allocated memory to hold the data",
    "start": "115770",
    "end": "124710"
  },
  {
    "text": "so the characters so that means extreme object is just the object itself and",
    "start": "124710",
    "end": "131450"
  },
  {
    "text": "referenda pointer to allocated memory usually allocated on the heap unless we",
    "start": "131450",
    "end": "137459"
  },
  {
    "text": "have special allocators involved and that makes copying a string very",
    "start": "137459",
    "end": "144560"
  },
  {
    "text": "expensive so if I copy this string I have to copy the allocated memory",
    "start": "144560",
    "end": "151370"
  },
  {
    "text": "there is optimizations in C++ 11 to say when I don't need the original I can",
    "start": "151370",
    "end": "158160"
  },
  {
    "text": "steal the allocated memory but it's still expensive and the idea of a string",
    "start": "158160",
    "end": "164550"
  },
  {
    "text": "view as that we don't care for the",
    "start": "164550",
    "end": "170130"
  },
  {
    "text": "management of the strings of the characters we have an object that",
    "start": "170130",
    "end": "176820"
  },
  {
    "text": "represents an existing sequence of characters which hopefully has at least",
    "start": "176820",
    "end": "185700"
  },
  {
    "text": "the same lifetime as this object so as you see on the right typical application",
    "start": "185700",
    "end": "193410"
  },
  {
    "text": "which is already then in many applications is to say for example we memory map data from a file in our",
    "start": "193410",
    "end": "200370"
  },
  {
    "text": "program which means more or less we get direct access to the data on the on the",
    "start": "200370",
    "end": "206790"
  },
  {
    "text": "file system and instead of allocating memory for it we just have a reference to the address of the storage and we",
    "start": "206790",
    "end": "214200"
  },
  {
    "text": "handle this and and send it around so that we save a lot of copies that means",
    "start": "214200",
    "end": "222380"
  },
  {
    "text": "that a Springview is faster but it also has a couple of constraints and all",
    "start": "222380",
    "end": "231060"
  },
  {
    "text": "these constraints make it more complicated to use it you have to be more aware that you do the right thing",
    "start": "231060",
    "end": "236670"
  },
  {
    "text": "if you use it so one County or one thing is it's not guaranteed that it ends with",
    "start": "236670",
    "end": "243390"
  },
  {
    "text": "backslash 0 yes you can let it refer to",
    "start": "243390",
    "end": "249090"
  },
  {
    "text": "something that ends with a null terminator but if not you must beware",
    "start": "249090",
    "end": "254400"
  },
  {
    "text": "that for example here on the right if you say I have a string dear to the string data which is part of a longer",
    "start": "254400",
    "end": "261350"
  },
  {
    "text": "character sequence that after the last a there's no vector 0 so if you use it our",
    "start": "261350",
    "end": "267450"
  },
  {
    "text": "parser to see something surprising will happen another interesting thing is that",
    "start": "267450",
    "end": "275360"
  },
  {
    "text": "the default constructor for string view arm",
    "start": "275360",
    "end": "282259"
  },
  {
    "text": "initializes the string you as I am NOT a string as a null pointer so that means",
    "start": "282490",
    "end": "291650"
  },
  {
    "text": "that's the difference to string string if I use a default constructor as energized by the empty string this is",
    "start": "291650",
    "end": "299870"
  },
  {
    "text": "not the case for string view so you can see it if you ask give me the data it",
    "start": "299870",
    "end": "305419"
  },
  {
    "text": "refers to and the data will return null pointer so don't use data without",
    "start": "305419",
    "end": "311330"
  },
  {
    "text": "checking the size because the size will tell you 0 and then you can use that but",
    "start": "311330",
    "end": "316490"
  },
  {
    "text": "that's that's coming from both things because no guarantees there first use size and then use the data never use",
    "start": "316490",
    "end": "322699"
  },
  {
    "text": "data without using the size and there's no allocated support so we don't have to",
    "start": "322699",
    "end": "329330"
  },
  {
    "text": "allocate anything though that's easy we have some support for that it came in",
    "start": "329330",
    "end": "336500"
  },
  {
    "start": "330000",
    "end": "413000"
  },
  {
    "text": "very late in the standardization process so I think we don't have enough time to",
    "start": "336500",
    "end": "342349"
  },
  {
    "text": "integrate spring you everywhere in the library so everywhere else in the library but we're but we have some",
    "start": "342349",
    "end": "349849"
  },
  {
    "text": "support for example we have arm a literal operator for it so if you have",
    "start": "349849",
    "end": "357159"
  },
  {
    "text": "some string literal and it ends with SV you convert it to spring view so you can",
    "start": "357159",
    "end": "364659"
  },
  {
    "text": "initialize an auto s with this we have the ability to use quoted coded for",
    "start": "364659",
    "end": "372139"
  },
  {
    "text": "Strings means that it writes out the string with quotes and escapes backs etc",
    "start": "372139",
    "end": "378979"
  },
  {
    "text": "so that's also possible for spring view and we also guarantee that the hash",
    "start": "378979",
    "end": "385310"
  },
  {
    "text": "values of string and steering you match that make sure that if we if we hash in",
    "start": "385310",
    "end": "392900"
  },
  {
    "text": "in some containers that that the bring and string view updates are placed at",
    "start": "392900",
    "end": "397909"
  },
  {
    "text": "the same location or are equal that's also pretty expensive but fear for",
    "start": "397909",
    "end": "403430"
  },
  {
    "text": "example have no integration for example for the records library the record library does not understand a spring",
    "start": "403430",
    "end": "411349"
  },
  {
    "text": "view arguments now that raises the question can we use one as the other",
    "start": "411349",
    "end": "417610"
  },
  {
    "start": "413000",
    "end": "815000"
  },
  {
    "text": "and the decision is that we allow to use",
    "start": "417610",
    "end": "424240"
  },
  {
    "text": "a string as a string view because that sheep I simply say ma'am or let's say",
    "start": "424240",
    "end": "431139"
  },
  {
    "text": "well I refer to the data that anywhere start in a string but I don't you can",
    "start": "431139",
    "end": "437710"
  },
  {
    "text": "use string view as a string without explicitly saying it so there's a",
    "start": "437710",
    "end": "442900"
  },
  {
    "text": "conversion but it's explicit so I have to explicitly convert a spring view to a",
    "start": "442900",
    "end": "448419"
  },
  {
    "text": "string and the reason is it is expensive because it educates memory and here you",
    "start": "448419",
    "end": "455590"
  },
  {
    "text": "see some example what it's for example means if you initialize functions with",
    "start": "455590",
    "end": "460750"
  },
  {
    "text": "string literals if I have spring nickels and I want to pass it to a who object",
    "start": "460750",
    "end": "468280"
  },
  {
    "text": "taking a string in the past we have to compute the length allocate the memory",
    "start": "468280",
    "end": "473349"
  },
  {
    "text": "and copy all the characters that's now better with string view because we only",
    "start": "473349",
    "end": "479710"
  },
  {
    "text": "have to compute the length because we keep the length but that's all we don't have to allocate memory and copy all the",
    "start": "479710",
    "end": "486580"
  },
  {
    "text": "characters but yeah but of course you have to beware of lifetime issues here",
    "start": "486580",
    "end": "495449"
  },
  {
    "text": "patents a green roof you know it's a literal the question is is it is a issue",
    "start": "499460",
    "end": "511759"
  },
  {
    "text": "it's the length really computed or is it is there some special constructors there",
    "start": "511759",
    "end": "517969"
  },
  {
    "text": "are special constructors if I say this is a C string with this size I can",
    "start": "517969",
    "end": "523250"
  },
  {
    "text": "deduce it directly but if not it has to be fine so it depends on which",
    "start": "523250",
    "end": "528950"
  },
  {
    "text": "constructor you you use if you use a constructor just using this string literal I'm according to the standard",
    "start": "528950",
    "end": "537410"
  },
  {
    "text": "this is computed so we have to find the Dex s 0 but I assume that under the ass",
    "start": "537410",
    "end": "544430"
  },
  {
    "text": "if ooh this can be optimized by all the compilers and I'm not aware that we",
    "start": "544430",
    "end": "550070"
  },
  {
    "text": "haven't a special constructor for string literals here you say if I have no no",
    "start": "550070",
    "end": "562970"
  },
  {
    "text": "you say I need a template constructor no that's not true I could have an array of",
    "start": "562970",
    "end": "568190"
  },
  {
    "text": "characters not being a string literal and it has the same type to that shown",
    "start": "568190",
    "end": "573980"
  },
  {
    "text": "that doesn't work yeah we we still have all the problems we got some C ok the",
    "start": "573980",
    "end": "585589"
  },
  {
    "text": "question that came up again and again one should are you string and which one should I use it cheaper but may be more",
    "start": "585589",
    "end": "592910"
  },
  {
    "text": "dangerous screen view and one thing we say is well if you have an API that uses",
    "start": "592910",
    "end": "600920"
  },
  {
    "text": "the value of the spring then it's at least something to consider to use a",
    "start": "600920",
    "end": "606680"
  },
  {
    "text": "string view and that means look here I have fee for example function you",
    "start": "606680",
    "end": "611959"
  },
  {
    "text": "getting a prefix a prefix spring which of course usually we would declare this",
    "start": "611959",
    "end": "617600"
  },
  {
    "text": "to be conference string and then here for example use some time point",
    "start": "617600",
    "end": "623750"
  },
  {
    "text": "computing to wizard took to the turn of string representing the current time with this prefix that's what this",
    "start": "623750",
    "end": "630230"
  },
  {
    "text": "function does so it's for example pewds account time converted to a string",
    "start": "630230",
    "end": "635899"
  },
  {
    "text": "then the string contains a new line at the end that's trade here and then",
    "start": "635899",
    "end": "642089"
  },
  {
    "text": "return prefix plus the arm computed time string so if i want to come convert this",
    "start": "642089",
    "end": "649049"
  },
  {
    "text": "to string you yeah by the way this is not exception safe but it's read say so",
    "start": "649049",
    "end": "655969"
  },
  {
    "text": "but if I want to now benefit from string view I can do that",
    "start": "655969",
    "end": "661739"
  },
  {
    "text": "I can perfectly say I want to have a string you argument and the",
    "start": "661739",
    "end": "667829"
  },
  {
    "text": "recommendation is to use it by value because it's sheep it's only two two",
    "start": "667829",
    "end": "673169"
  },
  {
    "text": "elements or a length and a pointer and then I can also use a string view to",
    "start": "673169",
    "end": "683339"
  },
  {
    "text": "initialize what see time gives me again it's cheap I can hold it and then by the",
    "start": "683339",
    "end": "691859"
  },
  {
    "text": "way there are some special functions for example here we don't have resize speak we have but we have something like",
    "start": "691859",
    "end": "697919"
  },
  {
    "text": "remove suffix to say I'm on a shorten this a little bit and but then when I",
    "start": "697919",
    "end": "705389"
  },
  {
    "text": "return it of course I have to use a string because the string view would refer to some data local in the function",
    "start": "705389",
    "end": "712829"
  },
  {
    "text": "and that would be a huge problem so I would use something like that by the way",
    "start": "712829",
    "end": "718469"
  },
  {
    "text": "we currently have no operator plus yet we are still discussing whether we want to have sex or string view so that it",
    "start": "718469",
    "end": "725159"
  },
  {
    "text": "implicitly throwing you plus springle returns of string that's something we",
    "start": "725159",
    "end": "730169"
  },
  {
    "text": "can't be discuss whether this is a good or bad thing a lot of arguments in both directions okay so here yes I think we",
    "start": "730169",
    "end": "741749"
  },
  {
    "text": "are not aware of all the consequences about introducing string view we will find out over the next year's be careful",
    "start": "741749",
    "end": "748319"
  },
  {
    "text": "bits using it yeah reference saying",
    "start": "748319",
    "end": "756479"
  },
  {
    "text": "string without any modifications understand if you can't change the",
    "start": "756479",
    "end": "762519"
  },
  {
    "text": "underlying items what do you say a string do is like a Const ring reference",
    "start": "762519",
    "end": "770019"
  },
  {
    "text": "so you can't change the underlying data",
    "start": "770019",
    "end": "774178"
  },
  {
    "text": "but the only thing is I can't modify the",
    "start": "778290",
    "end": "784509"
  },
  {
    "text": "elements of a string view are you sure we I'm not sure about that but so for",
    "start": "784509",
    "end": "794049"
  },
  {
    "text": "the moment I'm not sure about that let's double check that we had in discussion also string span with things yeah let me",
    "start": "794049",
    "end": "804309"
  },
  {
    "text": "double check that you might be right yeah I should know saying this is one of the first times I present this library",
    "start": "804309",
    "end": "811239"
  },
  {
    "text": "and I also learn what I don't know yet",
    "start": "811239",
    "end": "816239"
  },
  {
    "start": "815000",
    "end": "878000"
  },
  {
    "text": "good we have new other basic data structures and these are optional",
    "start": "817589",
    "end": "824410"
  },
  {
    "text": "variant and any if you come from booth you might have heard them all but beware",
    "start": "824410",
    "end": "831089"
  },
  {
    "text": "optional in any is like in booth variant is not alright this is significant",
    "start": "831089",
    "end": "837459"
  },
  {
    "text": "different it has same ideas but it it will there will be differences so let's",
    "start": "837459",
    "end": "843609"
  },
  {
    "text": "let's talk about them optional means we optionally hold the value so having a",
    "start": "843609",
    "end": "849069"
  },
  {
    "text": "week you can say we transfer various semantics to reference semantics so that we can also say there's nothing and very",
    "start": "849069",
    "end": "857139"
  },
  {
    "text": "end this you have we have a multiple predefined types and our value can hold",
    "start": "857139",
    "end": "862809"
  },
  {
    "text": "at one moment one of these predefined type and any is that you don't define in",
    "start": "862809",
    "end": "870730"
  },
  {
    "text": "a head which types are possible you can help help hold anything in these objects",
    "start": "870730",
    "end": "876819"
  },
  {
    "text": "and now let's look into details so this is SCD optional as I said pretty close",
    "start": "876819",
    "end": "883449"
  },
  {
    "start": "878000",
    "end": "939000"
  },
  {
    "text": "to boost optional you can say I have an optional string if I don't initialize it",
    "start": "883449",
    "end": "889509"
  },
  {
    "text": "with something that means the string is empty and excuse me the up Phyllis MP that means it does not have a",
    "start": "889509",
    "end": "897670"
  },
  {
    "text": "string even not an ultimate an empty",
    "start": "897670",
    "end": "902949"
  },
  {
    "text": "string and if I initialize it with a string it gets that value I can change",
    "start": "902949",
    "end": "908560"
  },
  {
    "text": "it by assignments according to some rules if I wanna find out does it contain a value or not I can ask has",
    "start": "908560",
    "end": "915970"
  },
  {
    "text": "value or excuse me you see the conversion to buoy if I want",
    "start": "915970",
    "end": "922990"
  },
  {
    "text": "to use the value I call the member function value and if there is no value",
    "start": "922990",
    "end": "928389"
  },
  {
    "text": "there is an exception bad optional access and you can make it empty again",
    "start": "928389",
    "end": "935350"
  },
  {
    "text": "with reset so some interfaces there you can see what this means if my function",
    "start": "935350",
    "end": "942660"
  },
  {
    "text": "can return a string but it might be that it does not return string we can have",
    "start": "942660",
    "end": "949000"
  },
  {
    "text": "three cases we can return an optional initialize by noting that means we",
    "start": "949000",
    "end": "954940"
  },
  {
    "text": "return null string we can return a string that is empty which is a",
    "start": "954940",
    "end": "959980"
  },
  {
    "text": "different case of different state and we can our have a string that's non-empty",
    "start": "959980",
    "end": "966819"
  },
  {
    "text": "and now if I use it then I check check",
    "start": "966819",
    "end": "972490"
  },
  {
    "text": "again I check the s and if it gets true there is a value I can print it but it",
    "start": "972490",
    "end": "978819"
  },
  {
    "text": "might be empty though it covers these two cases and if I have no value I I",
    "start": "978819",
    "end": "984490"
  },
  {
    "text": "have nothing yet question there",
    "start": "984490",
    "end": "989699"
  },
  {
    "text": "sin equivalent to boost none I think none is I have something in mind that",
    "start": "990630",
    "end": "999390"
  },
  {
    "text": "there is something but good question I have to write it down",
    "start": "999390",
    "end": "1006010"
  },
  {
    "text": "maybe I learn more here than you value",
    "start": "1006010",
    "end": "1015770"
  },
  {
    "text": "all value all yes value or Y value are",
    "start": "1015770",
    "end": "1023780"
  },
  {
    "text": "here now I could again take good variant variant is an object that can hold one",
    "start": "1023780",
    "end": "1034459"
  },
  {
    "start": "1026000",
    "end": "1159000"
  },
  {
    "text": "of several predefined alternatives it",
    "start": "1034459",
    "end": "1040910"
  },
  {
    "text": "differs from very antic in something for example it does not allocate memory anymore like boo stuff and it the the",
    "start": "1040910",
    "end": "1051380"
  },
  {
    "text": "prices that it under some strange conditions it can become empty usually",
    "start": "1051380",
    "end": "1061850"
  },
  {
    "text": "it's not empty it it is one of the specified various so if I have a variant",
    "start": "1061850",
    "end": "1067340"
  },
  {
    "text": "in spring I initialize it with 42 then",
    "start": "1067340",
    "end": "1074170"
  },
  {
    "text": "it's clear because that's meand this variant holds an in-country and an end",
    "start": "1074170",
    "end": "1079730"
  },
  {
    "text": "and unlike the variant let the Union language feature it's not that bits are",
    "start": "1079730",
    "end": "1085340"
  },
  {
    "text": "interpreted in different ways I know what it helps it's not a trick to have type conversions over bits it I can just",
    "start": "1085340",
    "end": "1093080"
  },
  {
    "text": "hold one or the other so I know that I held an int now and if I assign a string",
    "start": "1093080",
    "end": "1100010"
  },
  {
    "text": "I know that I now hold the string and I can ask for that I can ask what is the index and if the index is 0 it's this",
    "start": "1100010",
    "end": "1107180"
  },
  {
    "text": "type if it's money at this type I can ask please give me this string and if it",
    "start": "1107180",
    "end": "1113510"
  },
  {
    "text": "contains the string it's fine otherwise I get an exception or I can say give me the first or second element and of",
    "start": "1113510",
    "end": "1121310"
  },
  {
    "text": "course there has to be one otherwise this is an error the if you don't initialize the",
    "start": "1121310",
    "end": "1129960"
  },
  {
    "text": "object the default constructor of the first type is used to initialize it so",
    "start": "1129960",
    "end": "1137269"
  },
  {
    "text": "and if you don't have a type there you",
    "start": "1137269",
    "end": "1142769"
  },
  {
    "text": "can use yourself the first alternative called mono state and model state is",
    "start": "1142769",
    "end": "1148049"
  },
  {
    "text": "just a trick to be able to declare these objects and that they hold state outside",
    "start": "1148049",
    "end": "1153330"
  },
  {
    "text": "every other alternative so that's the way it is used here that here's some",
    "start": "1153330",
    "end": "1162690"
  },
  {
    "start": "1159000",
    "end": "1216000"
  },
  {
    "text": "error handling well first of all I should say it can have multiple instances of the same type so a variant",
    "start": "1162690",
    "end": "1170070"
  },
  {
    "text": "can hate can hold one end or another end of string so you can have different semantics for the first and the second",
    "start": "1170070",
    "end": "1177269"
  },
  {
    "text": "end and then of course it's a problem if you have give me the end that's of course not possible but you can still",
    "start": "1177269",
    "end": "1184230"
  },
  {
    "text": "say give me the first or the second element in of this variant and if you",
    "start": "1184230",
    "end": "1190019"
  },
  {
    "text": "assign a string then it's clear that it is this one so that's possible so if I",
    "start": "1190019",
    "end": "1195659"
  },
  {
    "text": "try to get a double that's a compile-time error because we have no double if I get the fourth alternative",
    "start": "1195659",
    "end": "1201480"
  },
  {
    "text": "that's an error if I get in that's an error because I have two inch but this",
    "start": "1201480",
    "end": "1206940"
  },
  {
    "text": "is okay and and might throw in runtime exception is currently the variant",
    "start": "1206940",
    "end": "1212159"
  },
  {
    "text": "contain something different yeah and you",
    "start": "1212159",
    "end": "1218759"
  },
  {
    "start": "1216000",
    "end": "1270000"
  },
  {
    "text": "have visitors as in boost you can say I want to I'm on a deal with all the",
    "start": "1218759",
    "end": "1224399"
  },
  {
    "text": "different alternatives I have so whatever my my object has I have a",
    "start": "1224399",
    "end": "1231090"
  },
  {
    "text": "wizard tour that I can call visit with and say for this object please depending",
    "start": "1231090",
    "end": "1237210"
  },
  {
    "text": "on what the type is use this or this or this arm function to deal with it",
    "start": "1237210",
    "end": "1244730"
  },
  {
    "text": "the third one is a CD any has to be any is again maybe maybe I have enough time",
    "start": "1245710",
    "end": "1256970"
  },
  {
    "text": "to show you one thing because no that's",
    "start": "1256970",
    "end": "1264620"
  },
  {
    "text": "not to say a variant one thing I want to",
    "start": "1264620",
    "end": "1270980"
  },
  {
    "start": "1270000",
    "end": "1463000"
  },
  {
    "text": "show you the case when when a variant can become empty it's usually not",
    "start": "1270980",
    "end": "1277580"
  },
  {
    "text": "possible unless you you have an exception which you don't handle",
    "start": "1277580",
    "end": "1282740"
  },
  {
    "text": "probably and because that's possible a variant can become empty and you see",
    "start": "1282740",
    "end": "1288530"
  },
  {
    "text": "what how you can do that you say for example I have a variant of float int",
    "start": "1288530",
    "end": "1294559"
  },
  {
    "text": "initialize by a float then I call here",
    "start": "1294559",
    "end": "1299600"
  },
  {
    "text": "arm here a function that initializes is",
    "start": "1299600",
    "end": "1305330"
  },
  {
    "text": "with an int but it throws an exception doing that so while assigning a new",
    "start": "1305330",
    "end": "1311960"
  },
  {
    "text": "value I get an exception and the question is what is then the case and",
    "start": "1311960",
    "end": "1317000"
  },
  {
    "text": "that's the case where we say oh we don't have a value because why it assigning a",
    "start": "1317000",
    "end": "1324890"
  },
  {
    "text": "new value an exception was thrown and then this read leads to to semantically",
    "start": "1324890",
    "end": "1331250"
  },
  {
    "text": "an empty state but we don't call it empty we call it value less by",
    "start": "1331250",
    "end": "1336320"
  },
  {
    "text": "exceptions so you can check for that and yeah so we have that it's yeah it it's",
    "start": "1336320",
    "end": "1344809"
  },
  {
    "text": "something you have to keep in mind but as I said it's not the outcome of typical code but it can happen any any",
    "start": "1344809",
    "end": "1355429"
  },
  {
    "text": "other firms like booth any an object that is possible to hold any type unless",
    "start": "1355429",
    "end": "1362630"
  },
  {
    "text": "the other two types you to have no clue what it holds all information has to be",
    "start": "1362630",
    "end": "1367970"
  },
  {
    "text": "checked at runtime for the other types you can find out at compile time whether",
    "start": "1367970",
    "end": "1373250"
  },
  {
    "text": "this is a valid type or valid value or not to some extent if the type system",
    "start": "1373250",
    "end": "1379010"
  },
  {
    "text": "allow you hear we can have just any type the trick is that internally we saw the type",
    "start": "1379010",
    "end": "1385370"
  },
  {
    "text": "ID of what we saw and we saw the bytes that's all and so if I say I assign the",
    "start": "1385370",
    "end": "1391850"
  },
  {
    "text": "strings or hear this then I have later to test is there value so any can empty",
    "start": "1391850",
    "end": "1397790"
  },
  {
    "text": "be empty again and then if the type has this type ID then I know that this is the type and",
    "start": "1397790",
    "end": "1403730"
  },
  {
    "text": "then I can cast it to this type and then I have to value inside and that's that's the whole trick",
    "start": "1403730",
    "end": "1409400"
  },
  {
    "text": "it keeps the type ID plus the value",
    "start": "1409400",
    "end": "1414400"
  },
  {
    "text": "and spare us the question of whether its equivalent to the type idea of Lloyd I",
    "start": "1419960",
    "end": "1426349"
  },
  {
    "text": "don't know I have on my list that I have to double-check what happens with void",
    "start": "1426349",
    "end": "1431609"
  },
  {
    "text": "types while these types I don't know so I think it has very itself returns the",
    "start": "1431609",
    "end": "1438149"
  },
  {
    "text": "boolean as well",
    "start": "1438149",
    "end": "1441229"
  },
  {
    "text": "you mean that if I don't have a where you is that the same as type saying I",
    "start": "1449240",
    "end": "1454520"
  },
  {
    "text": "f-type I'd avoid I don't know yeah I don't know I don't know yeah I don't",
    "start": "1454520",
    "end": "1460580"
  },
  {
    "text": "know sadly you can have move semantics",
    "start": "1460580",
    "end": "1467210"
  },
  {
    "start": "1463000",
    "end": "1508000"
  },
  {
    "text": "but you can't use types that have own that have no copy semantics so copy",
    "start": "1467210",
    "end": "1474980"
  },
  {
    "text": "semantics is required but it's not mandatory so you can have something like",
    "start": "1474980",
    "end": "1481520"
  },
  {
    "text": "this you can move something inside and in the end you have to move it out this",
    "start": "1481520",
    "end": "1486590"
  },
  {
    "text": "with this syntax out but as I said if you try to use this with move only types",
    "start": "1486590",
    "end": "1492260"
  },
  {
    "text": "this will not compile",
    "start": "1492260",
    "end": "1495610"
  },
  {
    "text": "okay",
    "start": "1498809",
    "end": "1501809"
  },
  {
    "text": "some other libraries armed here we have",
    "start": "1507040",
    "end": "1512500"
  },
  {
    "start": "1508000",
    "end": "1610000"
  },
  {
    "text": "the objective data here we have two pure new library that's a real library that's",
    "start": "1512500",
    "end": "1519110"
  },
  {
    "text": "again from boost coming boost file system if you are not familiar with both",
    "start": "1519110",
    "end": "1524630"
  },
  {
    "text": "file system it's a library that tries to get to standardize the way we deal with",
    "start": "1524630",
    "end": "1532460"
  },
  {
    "text": "file systems even having an account that there's open VMs and UNIX and windows",
    "start": "1532460",
    "end": "1538850"
  },
  {
    "text": "with all the differences they have and here you'll see some example what you",
    "start": "1538850",
    "end": "1544610"
  },
  {
    "text": "can do this is an example that more or less you can exactly use with boost so",
    "start": "1544610",
    "end": "1551750"
  },
  {
    "text": "you only have to exchange the header file and you have to change the namespace so here I use now STD file",
    "start": "1551750",
    "end": "1558170"
  },
  {
    "text": "system path and set of boost size system path and I can initialize a path coming",
    "start": "1558170",
    "end": "1563360"
  },
  {
    "text": "from the command line if there is something I can check is it a regular file I can ask for the file size is it",
    "start": "1563360",
    "end": "1571070"
  },
  {
    "text": "the directory if so I can iterate over the directory now of course with the new",
    "start": "1571070",
    "end": "1576620"
  },
  {
    "text": "modern C++ things like Auto reference sets and directory and pre iterating",
    "start": "1576620",
    "end": "1581930"
  },
  {
    "text": "over all the elements the trick is that the directory iterator it says provides begin and end and then we can use the",
    "start": "1581930",
    "end": "1590150"
  },
  {
    "text": "path again to print or to to do further things and maybe one interesting thing",
    "start": "1590150",
    "end": "1597530"
  },
  {
    "text": "also is if I print P a path it's usually quoted so it it is at the beginning and",
    "start": "1597530",
    "end": "1603470"
  },
  {
    "text": "the endless with double quotes but as I said that's nothing that changed from boost it's less standardized here you",
    "start": "1603470",
    "end": "1611120"
  },
  {
    "start": "1610000",
    "end": "1664000"
  },
  {
    "text": "can modify things you can say here I can I can declare path by the way with the",
    "start": "1611120",
    "end": "1616400"
  },
  {
    "text": "operator / let's the path operator that",
    "start": "1616400",
    "end": "1621530"
  },
  {
    "text": "works and it's not back session windows by the way it's still this syntax in the",
    "start": "1621530",
    "end": "1627980"
  },
  {
    "text": "source code and I create a directory I create a symbolic link I have the yeah",
    "start": "1627980",
    "end": "1634450"
  },
  {
    "text": "extend the path operator I can convert it to string and if I want convert the",
    "start": "1634450",
    "end": "1640370"
  },
  {
    "text": "so string that's what I need when I for example open this as a Oh Oh Xtreme we",
    "start": "1640370",
    "end": "1645770"
  },
  {
    "text": "have not known a real integration now for F strings with path elements I think",
    "start": "1645770",
    "end": "1651830"
  },
  {
    "text": "that's still an issue but as usual we we come up to standardize the different",
    "start": "1651830",
    "end": "1656840"
  },
  {
    "text": "libraries and putting things together sometimes we learn sometimes you think about it sometimes not yeah some some",
    "start": "1656840",
    "end": "1665630"
  },
  {
    "start": "1664000",
    "end": "1705000"
  },
  {
    "text": "some things to tell you about that so we we have to take in mind that different",
    "start": "1665630",
    "end": "1672080"
  },
  {
    "text": "file systems have different definitions of what is the past and what is a file so we we have a root name and windows's",
    "start": "1672080",
    "end": "1678890"
  },
  {
    "text": "might be see column in many or all systems that are UNIX or POSIX like of",
    "start": "1678890",
    "end": "1684620"
  },
  {
    "text": "standardized universal I don't know the name Universal pass syntax is double",
    "start": "1684620",
    "end": "1690590"
  },
  {
    "text": "slash host then the root directory then a directive separator which might be",
    "start": "1690590",
    "end": "1696230"
  },
  {
    "text": "flesh of XS or dots sometimes and then we have file name consisting of a so",
    "start": "1696230",
    "end": "1701960"
  },
  {
    "text": "called stem and an extension and you have to deal with that and what this means is for example that if you use",
    "start": "1701960",
    "end": "1708710"
  },
  {
    "text": "this program I have full that bar behind I print this out under UNIX at foo bar",
    "start": "1708710",
    "end": "1717200"
  },
  {
    "text": "and the windows its food backslash bar and if I take this path I print it I",
    "start": "1717200",
    "end": "1724179"
  },
  {
    "text": "would print this path but when I make it make preferred I use the preset syntax",
    "start": "1724179",
    "end": "1730160"
  },
  {
    "text": "of the Kansai system so that would mean here at the UNIX is this on the windows",
    "start": "1730160",
    "end": "1735620"
  },
  {
    "text": "this and I should write your openvms that would say in square brackets food",
    "start": "1735620",
    "end": "1742640"
  },
  {
    "text": "dot bar and then afterwards data dot B Steve for example to give you something totally different and then we have root",
    "start": "1742640",
    "end": "1749360"
  },
  {
    "text": "name root directory with the different syntax and maybe one interesting thing is is this an absolute path and the UNIX",
    "start": "1749360",
    "end": "1757490"
  },
  {
    "text": "the answer will be yes and the window the answer will be no because an",
    "start": "1757490",
    "end": "1763340"
  },
  {
    "text": "absolute path requires that you can start from some root and we have C :",
    "start": "1763340",
    "end": "1769070"
  },
  {
    "text": "they start and we have D : this path so this is not an absolute path on the window",
    "start": "1769070",
    "end": "1774260"
  },
  {
    "text": "and we don't hide that in the library because the carpet it's not an absolute part under windows so that's something",
    "start": "1774260",
    "end": "1781429"
  },
  {
    "text": "we keep in mind and sometimes leads to surprising behavior",
    "start": "1781429",
    "end": "1786220"
  },
  {
    "text": "yeah the UNC path is supported that's as I said that that's that's more or less",
    "start": "1787470",
    "end": "1794070"
  },
  {
    "text": "the syntax yeah that can be used here so in Windows there is a absolute path if",
    "start": "1794070",
    "end": "1802019"
  },
  {
    "text": "you start with a UNC path yeah and then you can have something absolutely yeah",
    "start": "1802019",
    "end": "1808399"
  },
  {
    "text": "we have made some changes when we adopt the vice of some library let me go here",
    "start": "1809509",
    "end": "1817950"
  },
  {
    "start": "1817000",
    "end": "1856000"
  },
  {
    "text": "to show you the example then that's better to explain it so there might be we might break some compatibility if you",
    "start": "1817950",
    "end": "1823950"
  },
  {
    "text": "just switch from boost to C+ or 17 for",
    "start": "1823950",
    "end": "1829919"
  },
  {
    "text": "example we no longer say that dot git is an extension in the old existing",
    "start": "1829919",
    "end": "1837960"
  },
  {
    "text": "language this was considered to be an extension and not a fire name so if you",
    "start": "1837960",
    "end": "1846509"
  },
  {
    "text": "ask for stem remember a file name is stem plus extension stem both empty and",
    "start": "1846509",
    "end": "1852000"
  },
  {
    "text": "this will not no longer be the case and now here we say this is now define a",
    "start": "1852000",
    "end": "1859500"
  },
  {
    "start": "1856000",
    "end": "1932000"
  },
  {
    "text": "means get stem is get the extension is empty and this was different before",
    "start": "1859500",
    "end": "1865730"
  },
  {
    "text": "another interesting thing is here we have in the existing library we say foo",
    "start": "1865730",
    "end": "1873389"
  },
  {
    "text": "bar dot is the same as full bar and",
    "start": "1873389",
    "end": "1879500"
  },
  {
    "text": "sometimes the dot gets automatically appended and if you ask what is the sign",
    "start": "1879500",
    "end": "1884639"
  },
  {
    "text": "name of this you got dot we thought this is very confusing and this was a source",
    "start": "1884639",
    "end": "1891029"
  },
  {
    "text": "of confusion when you use booth and we said this is the last moment we can clean it up and we set now this is the",
    "start": "1891029",
    "end": "1897809"
  },
  {
    "text": "finding is empty here here's the file name dot here is a fine name empty and",
    "start": "1897809",
    "end": "1903679"
  },
  {
    "text": "this has a couple of consequences when you deal with it for example has fine",
    "start": "1903679",
    "end": "1908909"
  },
  {
    "text": "and will now get false here previously it did yield a true so there are some",
    "start": "1908909",
    "end": "1916649"
  },
  {
    "text": "changes and but we now consider in sup working group of the library working",
    "start": "1916649",
    "end": "1922800"
  },
  {
    "text": "group that this is more consistent it's still not adopted it will be adopted in the next meeting all these changes that",
    "start": "1922800",
    "end": "1929520"
  },
  {
    "text": "make this consistent as it is I hopefully it I hope it will and then we cared about one thing that",
    "start": "1929520",
    "end": "1937460"
  },
  {
    "start": "1932000",
    "end": "2032000"
  },
  {
    "text": "everybody who uses file systems has a problem everybody has relatives paths",
    "start": "1937460",
    "end": "1944360"
  },
  {
    "text": "compute the path between two absolute paths almost everybody has a helper",
    "start": "1944360",
    "end": "1951510"
  },
  {
    "text": "function implemented and they all have their floss it's really complicated because you say if I have a path ABC and",
    "start": "1951510",
    "end": "1960000"
  },
  {
    "text": "another path a B so what's the way to go from an a B to C and the answer this",
    "start": "1960000",
    "end": "1969059"
  },
  {
    "text": "would say is C so what is the problem to have a function to compute a relative path between two absolute paths well",
    "start": "1969059",
    "end": "1975960"
  },
  {
    "text": "there are a lot of problems one thing is should we normalize this so if I say sup",
    "start": "1975960",
    "end": "1982470"
  },
  {
    "text": "that dots up dot should this yelps up or this how to deal with symbolic links",
    "start": "1982470",
    "end": "1990000"
  },
  {
    "text": "this becomes very interesting if sub dots that is not the same as up because",
    "start": "1990000",
    "end": "1997170"
  },
  {
    "text": "here's a symbolic link involved on family you switch to another place in your file system and what does it mean",
    "start": "1997170",
    "end": "2005390"
  },
  {
    "text": "to deal with dot and dot up what if the path exists or is it important that the",
    "start": "2005390",
    "end": "2011510"
  },
  {
    "text": "past exists or not and what if there is no common route it's for example you you",
    "start": "2011510",
    "end": "2018350"
  },
  {
    "text": "want to have the path between two things these two things what is the relative path between these could be gives you an",
    "start": "2018350",
    "end": "2025880"
  },
  {
    "text": "error or should be just gives you instead the absolute path so a lot of questions they still cook us a lot of",
    "start": "2025880",
    "end": "2031700"
  },
  {
    "text": "time I know it because I was partially involved into writing that and just to",
    "start": "2031700",
    "end": "2036770"
  },
  {
    "start": "2032000",
    "end": "2161000"
  },
  {
    "text": "tell you at least one thing sometimes things are surprising if you have this a",
    "start": "2036770",
    "end": "2044080"
  },
  {
    "text": "CD it's a symbolic link to this a B and you go into a UNIX shell and say CD a de",
    "start": "2044080",
    "end": "2054339"
  },
  {
    "text": "you are here but if you asked your shell the shelters say you are an a de prepare",
    "start": "2054339",
    "end": "2062408"
  },
  {
    "text": "that and you can say something like LS dot dot e because you are you are going",
    "start": "2062409",
    "end": "2069039"
  },
  {
    "text": "here and then back here but you are you are here and daughter and then e what",
    "start": "2069039",
    "end": "2074378"
  },
  {
    "text": "should not work it's a courtesy of your shell that this works but it's a lie and",
    "start": "2074379",
    "end": "2081179"
  },
  {
    "text": "if we have a vise system library we of course have to think how to deal with that you by the way you can do this by",
    "start": "2081179",
    "end": "2087999"
  },
  {
    "text": "use PVD meanness - big capital T or C D",
    "start": "2087999",
    "end": "2093219"
  },
  {
    "text": "minus P and you will see the real path you are in other you can you can you can",
    "start": "2093219",
    "end": "2098529"
  },
  {
    "text": "after a CD command C the real path you are in I didn't know that before I",
    "start": "2098529",
    "end": "2104079"
  },
  {
    "text": "started to standardize this little function I was very surprised maybe you are also so depending on that we decided",
    "start": "2104079",
    "end": "2112569"
  },
  {
    "text": "that we say well if we move around here if we want to go from here X Y that to",
    "start": "2112569",
    "end": "2119829"
  },
  {
    "text": "here ABC test fire what without knowing anything about symbolic links we should",
    "start": "2119829",
    "end": "2127660"
  },
  {
    "text": "go up now with symbolic links without knowing anything about so buildings we",
    "start": "2127660",
    "end": "2134410"
  },
  {
    "text": "have to go up up up ABC test fire but because this is the same as this we only",
    "start": "2134410",
    "end": "2140829"
  },
  {
    "text": "have to go up and then BC test fire and the consequences we have a couple of",
    "start": "2140829",
    "end": "2146469"
  },
  {
    "text": "functions to deal with rival at this pass some are lexically they don't don't",
    "start": "2146469",
    "end": "2152079"
  },
  {
    "text": "take the existing symbolic links into account some are you take the existing",
    "start": "2152079",
    "end": "2157630"
  },
  {
    "text": "file system into account so it became an interesting issue yeah I think that's it",
    "start": "2157630",
    "end": "2164499"
  },
  {
    "start": "2161000",
    "end": "2216000"
  },
  {
    "text": "so that's the most important things that change about file system library",
    "start": "2164499",
    "end": "2171809"
  },
  {
    "text": "another thing parallel execution of STL algorithms why we have support and in",
    "start": "2172380",
    "end": "2181239"
  },
  {
    "text": "modern c++ for concurrency we don't have algorithm support in a way that we can",
    "start": "2181239",
    "end": "2186670"
  },
  {
    "text": "say if i call an algorithm like for each of salt even better thought that and I have either",
    "start": "2186670",
    "end": "2193630"
  },
  {
    "text": "multiple cause of multi-core CPUs or whatsoever that I can benefit from the",
    "start": "2193630",
    "end": "2199720"
  },
  {
    "text": "fact that I can sort and parallely different areas of my containers of my",
    "start": "2199720",
    "end": "2205359"
  },
  {
    "text": "ranges and this is done in an so-called",
    "start": "2205359",
    "end": "2210400"
  },
  {
    "text": "parallel STL and this was part of the so-called parallel T acid it now became",
    "start": "2210400",
    "end": "2216190"
  },
  {
    "start": "2216000",
    "end": "2345000"
  },
  {
    "text": "a part of C++ 17 and I'm a stupid application programmer so I started to",
    "start": "2216190",
    "end": "2223660"
  },
  {
    "text": "find out what is the difference because we have now three different strategies and guarantees we can give and this is",
    "start": "2223660",
    "end": "2230410"
  },
  {
    "text": "what I came about and unless somebody proves me wrong this is a poor man's way",
    "start": "2230410",
    "end": "2235599"
  },
  {
    "text": "to explain the different policies the first policy we have now is when we want",
    "start": "2235599",
    "end": "2241809"
  },
  {
    "text": "to compute a deal with all elements and with each element we have to call a B",
    "start": "2241809",
    "end": "2248140"
  },
  {
    "text": "and C that we first call for the first element ABC then for the second a b and",
    "start": "2248140",
    "end": "2254200"
  },
  {
    "text": "c and then for the third a b and c in our container so that's sequential that's what we have",
    "start": "2254200",
    "end": "2260049"
  },
  {
    "text": "already for all the algorithms but now we have two other ways the one one thing",
    "start": "2260049",
    "end": "2265779"
  },
  {
    "text": "is parallel is sequenced and the other is an sequence execution and sequence",
    "start": "2265779",
    "end": "2270970"
  },
  {
    "text": "execution may I can in parallel start to",
    "start": "2270970",
    "end": "2276789"
  },
  {
    "text": "process a B and C for different elements but it's guaranteed that inside my",
    "start": "2276789",
    "end": "2282670"
  },
  {
    "text": "thread I have after a for the first element I call B for the first element",
    "start": "2282670",
    "end": "2288400"
  },
  {
    "text": "and then C for the first element while here even that is not guaranteed I can",
    "start": "2288400",
    "end": "2293410"
  },
  {
    "text": "say I can start in my sweat with the a for the first element then a for the second element is on them here again so",
    "start": "2293410",
    "end": "2301630"
  },
  {
    "text": "so I have different paths here to go through my Processing's and of course different guarantees are",
    "start": "2301630",
    "end": "2308680"
  },
  {
    "text": "given this this is you have this guarantee then you can use the parallel",
    "start": "2308680",
    "end": "2313900"
  },
  {
    "text": "or vectorized execution but if you have a lock here a lock go block a twitches",
    "start": "2313900",
    "end": "2322090"
  },
  {
    "text": "unlocked here this will block of course and cause a big trouble so you have to",
    "start": "2322090",
    "end": "2327520"
  },
  {
    "text": "know the tools we have to give some guarantees so that the execution of the",
    "start": "2327520",
    "end": "2334180"
  },
  {
    "text": "parallel divers they can do what I can use this or this policy to deal with",
    "start": "2334180",
    "end": "2339460"
  },
  {
    "text": "them and anything else is implementation define quality of implementation yeah",
    "start": "2339460",
    "end": "2346690"
  },
  {
    "start": "2345000",
    "end": "2374000"
  },
  {
    "text": "yes you simply have a new argument at the beginning saying power I'm sequence parallel or sequence",
    "start": "2346690",
    "end": "2353470"
  },
  {
    "text": "sequences like not having the argument parallel is yeah if you have a lock or",
    "start": "2353470",
    "end": "2359620"
  },
  {
    "text": "something like that you should choose that one in here if you really have nothing if the D computation here can be",
    "start": "2359620",
    "end": "2367510"
  },
  {
    "text": "done for one element and then for the other element before you go to this second statement so that's that's okay",
    "start": "2367510",
    "end": "2376380"
  },
  {
    "start": "2374000",
    "end": "2388000"
  },
  {
    "text": "splicing certain maps we have some new support to deal with the fact that I",
    "start": "2377380",
    "end": "2383529"
  },
  {
    "text": "want to move element from one set or one map to another here you can see how it",
    "start": "2383529",
    "end": "2390039"
  },
  {
    "start": "2388000",
    "end": "2440000"
  },
  {
    "text": "happen I have a map initialized with these three elements here I have another",
    "start": "2390039",
    "end": "2396609"
  },
  {
    "text": "map with this element what I can do now I can extract this element or I can use",
    "start": "2396609",
    "end": "2404859"
  },
  {
    "text": "a iterator or find the element by value like he and then I can insert it in the",
    "start": "2404859",
    "end": "2412809"
  },
  {
    "text": "other map the point here is that we keep the memory so usually when I take an",
    "start": "2412809",
    "end": "2421630"
  },
  {
    "text": "element out of a set of map and insert it somewhere else the new element gets",
    "start": "2421630",
    "end": "2427089"
  },
  {
    "text": "new memory but here we get it with extract we get a handle including the",
    "start": "2427089",
    "end": "2433150"
  },
  {
    "text": "memory for this element so that inserting it somewhere else becomes a cheap operation that's that's small as",
    "start": "2433150",
    "end": "2441819"
  },
  {
    "start": "2440000",
    "end": "2455000"
  },
  {
    "text": "all with some error handling issues for example if I extract 3.3 years and I",
    "start": "2441819",
    "end": "2449469"
  },
  {
    "text": "insert it here this is a map not a multi map so this is an error then you have a",
    "start": "2449469",
    "end": "2455769"
  },
  {
    "start": "2455000",
    "end": "2469000"
  },
  {
    "text": "special state which that you can use here you can you can get the information which key and map is the end and whether",
    "start": "2455769",
    "end": "2461859"
  },
  {
    "text": "this was succeeded so inserted as false here and you can deal with that so let's",
    "start": "2461859",
    "end": "2468160"
  },
  {
    "text": "take this example like here one thing I want to show you is one interesting side",
    "start": "2468160",
    "end": "2473920"
  },
  {
    "start": "2469000",
    "end": "2523000"
  },
  {
    "text": "effect here is that you can now keep change the key of map elements you can",
    "start": "2473920",
    "end": "2479589"
  },
  {
    "text": "say here I have a map one two three different fruits I extract the element",
    "start": "2479589",
    "end": "2486430"
  },
  {
    "text": "this - this is a handle the type is auto and then I can set the key to four and",
    "start": "2486430",
    "end": "2494019"
  },
  {
    "text": "then I move it back into this map and then I have the new map and the",
    "start": "2494019",
    "end": "2499089"
  },
  {
    "text": "interesting thing again is I have no memory allocation here involved at all it's just changing the key and then",
    "start": "2499089",
    "end": "2505779"
  },
  {
    "text": "inserting it again somewhere else so a cheap way to change the key of man and by the way it can be used in sets",
    "start": "2505779",
    "end": "2512470"
  },
  {
    "text": "and maps it can be used to move elements between a multiset and the set and also",
    "start": "2512470",
    "end": "2518829"
  },
  {
    "text": "it applies to unordered elements",
    "start": "2518829",
    "end": "2522809"
  },
  {
    "start": "2523000",
    "end": "2611000"
  },
  {
    "text": "elementary string conversions for those who write low level to implement low",
    "start": "2524340",
    "end": "2529930"
  },
  {
    "text": "library low-level libraries yet another way to convert integers and floating",
    "start": "2529930",
    "end": "2537790"
  },
  {
    "text": "point numbers to strings and back and forth so that we don't have to use",
    "start": "2537790",
    "end": "2542800"
  },
  {
    "text": "printf or something like that because strings are far too expensive no",
    "start": "2542800",
    "end": "2547990"
  },
  {
    "text": "allocators involved so it's not like like the two string AP hi we we already",
    "start": "2547990",
    "end": "2554260"
  },
  {
    "text": "have there this is a low-level interface so we can say I have a range of",
    "start": "2554260",
    "end": "2559960"
  },
  {
    "text": "characters here to begin and end and I want to convert this decimal into a sequence of characters containing four",
    "start": "2559960",
    "end": "2567130"
  },
  {
    "text": "and four I do that and one interesting thing is we guarantee round-trip ability",
    "start": "2567130",
    "end": "2573340"
  },
  {
    "text": "so if we say convert this floating point number to a character sequence it's",
    "start": "2573340",
    "end": "2581590"
  },
  {
    "text": "guaranteed if I read it back with the corresponding from jaws function it will",
    "start": "2581590",
    "end": "2588010"
  },
  {
    "text": "have the same value on the same platform it's not guaranteed everywhere because",
    "start": "2588010",
    "end": "2593710"
  },
  {
    "text": "it depends how many digits have to be written to be guaranteed that the exact",
    "start": "2593710",
    "end": "2599050"
  },
  {
    "text": "the same value comes back that's platform depend and it might be might be",
    "start": "2599050",
    "end": "2605349"
  },
  {
    "text": "a pretty long list of numbers though depending on your platform by the way we",
    "start": "2605349",
    "end": "2614020"
  },
  {
    "start": "2611000",
    "end": "2665000"
  },
  {
    "text": "have new shared blocks in when we",
    "start": "2614020",
    "end": "2620320"
  },
  {
    "text": "standardize in modern C++ new Texas and locks we had a great example written by",
    "start": "2620320",
    "end": "2626830"
  },
  {
    "text": "Howard Hinnant and now we adopted a little bit or 50% in C plus at 11 then",
    "start": "2626830",
    "end": "2634510"
  },
  {
    "text": "20 more percent in C versus 14 and then now maybe 10% more in 6 or 17 we'd still",
    "start": "2634510",
    "end": "2642160"
  },
  {
    "text": "not adopt at all let's see what happens in the next standard we should have adopted everything from the beginning",
    "start": "2642160",
    "end": "2647980"
  },
  {
    "text": "because it was a cool design so what we have now is we have readwrite locks which we both introduced in Super",
    "start": "2647980",
    "end": "2654280"
  },
  {
    "text": "supporting but only two as this times new Texas now we have shared mutex",
    "start": "2654280",
    "end": "2659860"
  },
  {
    "text": "that that can't be time and we have support for them",
    "start": "2659860",
    "end": "2665580"
  },
  {
    "start": "2665000",
    "end": "2704000"
  },
  {
    "text": "atomic for atomic we have the C interface we hate C interfaces so we",
    "start": "2666030",
    "end": "2672550"
  },
  {
    "text": "have something new and we now have a context bull atomic is always log free",
    "start": "2672550",
    "end": "2678450"
  },
  {
    "text": "we decided that this is good enough it's usually not that interesting whether we",
    "start": "2678450",
    "end": "2683890"
  },
  {
    "text": "know it's sometimes or is it's always",
    "start": "2683890",
    "end": "2689830"
  },
  {
    "text": "actually so it's never lock free so in here these constants might have one of three values this is good enough in this",
    "start": "2689830",
    "end": "2696610"
  },
  {
    "text": "movie to have C++ support so c++ syntax for this question and then we have a new",
    "start": "2696610",
    "end": "2707650"
  },
  {
    "start": "2704000",
    "end": "2781000"
  },
  {
    "text": "type trait note we have a lot of neutral pivot but we also have a general way to use the tripe traits if they return a",
    "start": "2707650",
    "end": "2715060"
  },
  {
    "text": "value you might know already that if I have something like that yet attack for",
    "start": "2715060",
    "end": "2721120"
  },
  {
    "text": "example the corresponding constant type or of something that I can instead of",
    "start": "2721120",
    "end": "2728560"
  },
  {
    "text": "writing make cons or remove cons I hope this is exactly the name I don't know",
    "start": "2728560",
    "end": "2734650"
  },
  {
    "text": "I'm not sure that instead of writing colon colon type at the end I can now",
    "start": "2734650",
    "end": "2740440"
  },
  {
    "text": "write make on underscore P and now we have same thing for the value type trait",
    "start": "2740440",
    "end": "2748750"
  },
  {
    "text": "so instead of writing is constantly colon colon value I can now write ISKCON",
    "start": "2748750",
    "end": "2754720"
  },
  {
    "text": "where you of P which makes something like this a little bit shorter more",
    "start": "2754720",
    "end": "2762250"
  },
  {
    "text": "convenient it's by the way an application of various so-called variable templates which were introduced",
    "start": "2762250",
    "end": "2768640"
  },
  {
    "text": "in C++ 14 where we can say this is this is a shortcut of a variable for this",
    "start": "2768640",
    "end": "2775690"
  },
  {
    "text": "member of a structure so that's a typical application of variable templates",
    "start": "2775690",
    "end": "2781950"
  },
  {
    "start": "2781000",
    "end": "2817000"
  },
  {
    "text": "we have new numeric library functions I'm not really an expert here so if",
    "start": "2783110",
    "end": "2789300"
  },
  {
    "text": "somebody tells me now we have Bessel functions or elliptic or polynomials I",
    "start": "2789300",
    "end": "2794520"
  },
  {
    "text": "have no clue what this means in detail but if you care you probably know and we",
    "start": "2794520",
    "end": "2800490"
  },
  {
    "text": "have the greatest common divisor and the least common what is M multiplied yeah",
    "start": "2800490",
    "end": "2812070"
  },
  {
    "text": "so a little bit more new numerix library features now and then we have a couple",
    "start": "2812070",
    "end": "2819600"
  },
  {
    "start": "2817000",
    "end": "2845000"
  },
  {
    "text": "of other things let me see how much slides I have to this yeah it's edit",
    "start": "2819600",
    "end": "2830550"
  },
  {
    "text": "template actually I don't know we could look yeah I don't know whether it's",
    "start": "2830550",
    "end": "2837870"
  },
  {
    "text": "generalized as a template I would consider yes but I have to double check",
    "start": "2837870",
    "end": "2845839"
  },
  {
    "start": "2845000",
    "end": "3126000"
  },
  {
    "text": "and then we have a couple of other minor fixes we have so string has now non-comp",
    "start": "2845960",
    "end": "2855450"
  },
  {
    "text": "data member which was missing we have new search algorithms like Boyer mu and",
    "start": "2855450",
    "end": "2861420"
  },
  {
    "text": "Boyer muha spool for those who know what that means that it's better algorithms",
    "start": "2861420",
    "end": "2866790"
  },
  {
    "text": "to search something we have full support for memory soft management's or special",
    "start": "2866790",
    "end": "2874980"
  },
  {
    "text": "classes where you can say I have I want to I want to have my memory management",
    "start": "2874980",
    "end": "2881400"
  },
  {
    "text": "and want to deal with it in this with",
    "start": "2881400",
    "end": "2886460"
  },
  {
    "text": "what's helper functions I I don't know the details here for yeah exit alignment",
    "start": "2886460",
    "end": "2897810"
  },
  {
    "text": "I showed you in the talk before so we have new new new functions so that we",
    "start": "2897810",
    "end": "2904380"
  },
  {
    "text": "can align now data that we allocate on the heap and we have a couple of new",
    "start": "2904380",
    "end": "2910650"
  },
  {
    "text": "type traits one thing is is callable its negatives and",
    "start": "2910650",
    "end": "2915820"
  },
  {
    "text": "something that it has unique object representations what does that mean that",
    "start": "2915820",
    "end": "2922120"
  },
  {
    "text": "means that I said for any value of my object it has always has the same bits",
    "start": "2922120",
    "end": "2933150"
  },
  {
    "text": "to represent to the value it's only a unique representation of bits to have",
    "start": "2933150",
    "end": "2939430"
  },
  {
    "text": "that value that means you can hash over the bits instead of the two to hash over",
    "start": "2939430",
    "end": "2946090"
  },
  {
    "text": "the object and get a unique hash number so this is useful when you do hashing it",
    "start": "2946090",
    "end": "2952390"
  },
  {
    "text": "doesn't work for for values where you can say I have different bit representation for the same value for",
    "start": "2952390",
    "end": "2959350"
  },
  {
    "text": "example like and like in float or in strings or so then then it's a problem",
    "start": "2959350",
    "end": "2964840"
  },
  {
    "text": "but for anything else I can do that to hash over the bits of an object and get",
    "start": "2964840",
    "end": "2970210"
  },
  {
    "text": "a unique hash value yet it if it tests",
    "start": "2970210",
    "end": "2983980"
  },
  {
    "text": "if it is a struct that has turned in inside as far as I know it has on the",
    "start": "2983980",
    "end": "2990730"
  },
  {
    "text": "platform a unique representation it's always the same value has the same format of bits so it would answer yes",
    "start": "2990730",
    "end": "2997900"
  },
  {
    "text": "you have you go if I have padding then",
    "start": "2997900",
    "end": "3004080"
  },
  {
    "text": "you can't do them in coffee true yeah so I would assume that it returns false",
    "start": "3004080",
    "end": "3011000"
  },
  {
    "text": "that's the whole idea here but I have to double check or maybe you doing send me",
    "start": "3011000",
    "end": "3017580"
  },
  {
    "text": "an email good",
    "start": "3017580",
    "end": "3021440"
  },
  {
    "text": "okay for the catch called the cash alignment okay yeah okay so you say the",
    "start": "3032470",
    "end": "3040850"
  },
  {
    "text": "support for the execute the language for evaluations of Sukesh alignment you say okay thank you very much you find out",
    "start": "3040850",
    "end": "3047660"
  },
  {
    "text": "exactly where I have no clue about some things of the library yeah",
    "start": "3047660",
    "end": "3057970"
  },
  {
    "text": "how much can I pack in one cache line is a is the okay yeah last one is what do I",
    "start": "3058390",
    "end": "3067760"
  },
  {
    "text": "have to do to make sure that okay so how much I have had so what do I have to do",
    "start": "3067760",
    "end": "3075230"
  },
  {
    "text": "and to make sure that they are not on the same cache line to avoid force yeah",
    "start": "3075230",
    "end": "3082700"
  },
  {
    "text": "I have to repeat because that sounds",
    "start": "3082700",
    "end": "3088400"
  },
  {
    "text": "familiar I'm happy to explain it better in future",
    "start": "3088400",
    "end": "3093550"
  },
  {
    "text": "once I understood it in detail thank you you would share pointer now",
    "start": "3093550",
    "end": "3100370"
  },
  {
    "text": "has support for for arrays so that you",
    "start": "3100370",
    "end": "3106520"
  },
  {
    "text": "have that automatically the destructor called delete square brackets instead of delete",
    "start": "3106520",
    "end": "3116300"
  },
  {
    "text": "without square because we had that already in unique pointer and everybody was wondering why we don't have support",
    "start": "3116300",
    "end": "3122780"
  },
  {
    "text": "here for shared pointer for the same thing yeah we have some some bug fixes or",
    "start": "3122780",
    "end": "3130050"
  },
  {
    "start": "3126000",
    "end": "3320000"
  },
  {
    "text": "fixes in general some things yeah I I",
    "start": "3130050",
    "end": "3136080"
  },
  {
    "text": "just can tell you so one thing is for for memory memory for the memory models",
    "start": "3136080",
    "end": "3144030"
  },
  {
    "text": "we have some policies to place memory barriers and it turned out that nobody",
    "start": "3144030",
    "end": "3150960"
  },
  {
    "text": "did implement memory order consume special so the as a consequence it's",
    "start": "3150960",
    "end": "3159300"
  },
  {
    "text": "currently discouraged until we find out what we really mean and then bring it back to to the compilers so that it's",
    "start": "3159300",
    "end": "3168930"
  },
  {
    "text": "exactly like that so temporarily discouraged is this value for memory order management yeah and",
    "start": "3168930",
    "end": "3178980"
  },
  {
    "text": "then yeah sometimes some some functions return a reference to what they were inserted because we were not consistent",
    "start": "3178980",
    "end": "3186240"
  },
  {
    "text": "there for example because for insert functions we have that we have in sed",
    "start": "3186240",
    "end": "3194760"
  },
  {
    "text": "function no longer support allocators and shared from this we fix some things",
    "start": "3194760",
    "end": "3200870"
  },
  {
    "text": "because it was not guaranteed what happened if shared from this is used",
    "start": "3200870",
    "end": "3206340"
  },
  {
    "text": "without an one object that never was hold by a shared pointer the old",
    "start": "3206340",
    "end": "3213480"
  },
  {
    "text": "standard was simply not clear about that and now we know that this rolls the bad weak pointers of that is this is a weak",
    "start": "3213480",
    "end": "3220560"
  },
  {
    "text": "point and we saw the corresponding exception if we if we use a weak pointer that refers to nothing adding expression",
    "start": "3220560",
    "end": "3230040"
  },
  {
    "text": "in a huge number of places really a huge number I think every meeting come I",
    "start": "3230040",
    "end": "3236190"
  },
  {
    "text": "don't know ten papers about we should act context for here and here and here and yeah share pointers now provide a",
    "start": "3236190",
    "end": "3242820"
  },
  {
    "text": "weak type maybe one thing is undefined behavior for type trades now if there is",
    "start": "3242820",
    "end": "3249300"
  },
  {
    "text": "no behavior and that was interesting if you had a reference or pointer and you",
    "start": "3249300",
    "end": "3259230"
  },
  {
    "text": "said make signed we behaved about undefined so",
    "start": "3259230",
    "end": "3264880"
  },
  {
    "text": "because the specification was it's required that this is an integer and if",
    "start": "3264880",
    "end": "3272380"
  },
  {
    "text": "it was not and a reference is not an integer it only refers to an integer make an site has undefined behavior so",
    "start": "3272380",
    "end": "3280750"
  },
  {
    "text": "if you use that you could have on one platform one thing and the other platform and another thing and here",
    "start": "3280750",
    "end": "3287470"
  },
  {
    "text": "thanks to some guys I think from Russia and we now have the guarantee that",
    "start": "3287470",
    "end": "3292780"
  },
  {
    "text": "instead of having undefined behavior we say this is simply an error to use it",
    "start": "3292780",
    "end": "3297940"
  },
  {
    "text": "because this is not part of the code and we don't lose anything here if we say this is an error sometimes in the",
    "start": "3297940",
    "end": "3304540"
  },
  {
    "text": "standard is actually has a tendency to give freedom of implementation to the platform providers but we should not",
    "start": "3304540",
    "end": "3311440"
  },
  {
    "text": "give this freedom in cases that they are obviously wrong in on all platforms so",
    "start": "3311440",
    "end": "3317110"
  },
  {
    "text": "this is a good example where we fix that yeah that's it probably I missed two or",
    "start": "3317110",
    "end": "3324580"
  },
  {
    "start": "3320000",
    "end": "3387000"
  },
  {
    "text": "three things I'm pretty sure of that but that's that's what I learned so far from",
    "start": "3324580",
    "end": "3330190"
  },
  {
    "text": "the standard I think a lot of interesting things are coming and as usual I showed you some of the",
    "start": "3330190",
    "end": "3335290"
  },
  {
    "text": "combinations of these features we will you will find out in the next three years what we missed with all these",
    "start": "3335290",
    "end": "3342160"
  },
  {
    "text": "libraries and the language features I didn't talk about some things like londa",
    "start": "3342160",
    "end": "3347230"
  },
  {
    "text": "or other things but you might have heard there there are still some strange things really happening in the standard",
    "start": "3347230",
    "end": "3354160"
  },
  {
    "text": "and in the communication between car guys and library guys where I yeah",
    "start": "3354160",
    "end": "3359860"
  },
  {
    "text": "usually I'm sitting down and just wondering about what people are talking",
    "start": "3359860",
    "end": "3365500"
  },
  {
    "text": "about that's my problem as an application programmer anyway do we have any questions I'm hopefully can answer",
    "start": "3365500",
    "end": "3375360"
  },
  {
    "text": "if not that's it thank you very much again and good even have a good party I",
    "start": "3377760",
    "end": "3383970"
  },
  {
    "text": "would say thank you [Applause]",
    "start": "3383970",
    "end": "3389100"
  }
]