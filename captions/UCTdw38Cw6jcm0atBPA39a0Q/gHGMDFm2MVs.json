[
  {
    "start": "0",
    "end": "44000"
  },
  {
    "text": "good morning thank you for coming this if you haven't seen any of my talks",
    "start": "3470",
    "end": "10590"
  },
  {
    "text": "before I have tend to have graffiti or street all right on my slides and I will today as well but this is kind of",
    "start": "10590",
    "end": "16590"
  },
  {
    "text": "special to me because this is from Ã¶zil so this is down by the harbor so it's a",
    "start": "16590",
    "end": "22250"
  },
  {
    "text": "it's quite beautiful I think so welcome to secure programming practices in C++ I",
    "start": "22250",
    "end": "29690"
  },
  {
    "text": "did this talk once before at a security conference and then they all had fun",
    "start": "29690",
    "end": "35039"
  },
  {
    "text": "titles but since we're not at a security conference you don't get a fun title C",
    "start": "35039",
    "end": "40260"
  },
  {
    "text": "you get the boring one my name is Patricia oz I'm a programmer I work on",
    "start": "40260",
    "end": "46199"
  },
  {
    "text": "the Vivaldi browser I used to work a long time ago on the Opera browser and",
    "start": "46199",
    "end": "52050"
  },
  {
    "text": "in between I was a consultant a little bit and I worked at Cisco making telepresence systems so there are two",
    "start": "52050",
    "end": "62069"
  },
  {
    "text": "quotes from viana sea makes it easy to shoot yourself in the foot c++ makes it",
    "start": "62069",
    "end": "67979"
  },
  {
    "text": "harder but when you do it blows your whole leg off but actually my favorite is the next one within C++ there is a",
    "start": "67979",
    "end": "75210"
  },
  {
    "text": "much smaller and cleaner language struggling to get out and that is the",
    "start": "75210",
    "end": "80340"
  },
  {
    "text": "part that most people miss about C++ and in the end we'll get there but before",
    "start": "80340",
    "end": "85649"
  },
  {
    "text": "that we'll have fun so this is the agenda for today and I'll you'll see it",
    "start": "85649",
    "end": "91140"
  },
  {
    "start": "87000",
    "end": "119000"
  },
  {
    "text": "several times then you'll see the underlined this thing move down so you know where you are but first we're look",
    "start": "91140",
    "end": "97229"
  },
  {
    "text": "at what kind of specs exists then we'll look a little bit at undefined behavior a little bit at the surprising compiler",
    "start": "97229",
    "end": "104009"
  },
  {
    "text": "optimizations then we'll look at exploitability and that will be like a large chunk of the talk and then take",
    "start": "104009",
    "end": "112950"
  },
  {
    "text": "your vitamins and then the eight I'd really rather you didn't which are my",
    "start": "112950",
    "end": "118320"
  },
  {
    "text": "opinions okay so what kind of specs exists and that was a major part of",
    "start": "118320",
    "end": "123899"
  },
  {
    "start": "119000",
    "end": "129000"
  },
  {
    "text": "researching for this talk I wanted to see what kinds of things you could actually look at and there are quite a",
    "start": "123899",
    "end": "130229"
  },
  {
    "start": "129000",
    "end": "177000"
  },
  {
    "text": "few but I chose three and the first one that is still",
    "start": "130229",
    "end": "135600"
  },
  {
    "text": "not sufficiently famous is the C++ core guidelines so are you familiar with the",
    "start": "135600",
    "end": "141300"
  },
  {
    "text": "C++ core guidelines yeah little bit",
    "start": "141300",
    "end": "146540"
  },
  {
    "text": "basically it's a collaborative effort led by Brianna and trying to distill",
    "start": "146540",
    "end": "151890"
  },
  {
    "text": "more what we think or they think of as best practices in C++ and it is very",
    "start": "151890",
    "end": "159410"
  },
  {
    "text": "very instructive very so I would I would",
    "start": "159410",
    "end": "164640"
  },
  {
    "text": "recommend browsing around a little bit but it is quite big like if we go back",
    "start": "164640",
    "end": "170370"
  },
  {
    "text": "it's if you try to print it it's quite large 328 pages but still that's quite",
    "start": "170370",
    "end": "176250"
  },
  {
    "text": "small considering if we come to the say search C++ coding standard which is only",
    "start": "176250",
    "end": "183030"
  },
  {
    "start": "177000",
    "end": "214000"
  },
  {
    "text": "for C++ you have one for C as well which you kind of have to add on and then you're going close to a thousand pages",
    "start": "183030",
    "end": "190850"
  },
  {
    "text": "but the say cert C and C++ coding standard is a software coding standard",
    "start": "190850",
    "end": "195990"
  },
  {
    "text": "for the C and C++ programming languages developed by the search coordinate Coordination Center to improve the",
    "start": "195990",
    "end": "203070"
  },
  {
    "text": "safety reliability and security of software systems but basically it's it's going through different kinds of",
    "start": "203070",
    "end": "210020"
  },
  {
    "text": "problems that you might get in an ad advice on how to get out but this is the",
    "start": "210020",
    "end": "215580"
  },
  {
    "start": "214000",
    "end": "229000"
  },
  {
    "text": "one that I'm going to look at the most today it's the common weakness enumeration now this is massive but",
    "start": "215580",
    "end": "221490"
  },
  {
    "text": "basically it describes patterns in code that make vulnerabilities so we're going",
    "start": "221490",
    "end": "227940"
  },
  {
    "text": "to look at a bunch of those yeah so it is a category system I think it was",
    "start": "227940",
    "end": "234150"
  },
  {
    "text": "mostly meant in the beginning to to help automated tools but it is also very instructive to look at it it's text and",
    "start": "234150",
    "end": "241140"
  },
  {
    "text": "so if you find yourself on one of them then read through and it has good advice",
    "start": "241140",
    "end": "248570"
  },
  {
    "start": "247000",
    "end": "386000"
  },
  {
    "text": "okay so undefined behavior I talked I",
    "start": "248570",
    "end": "254190"
  },
  {
    "text": "talked to some C++ programmers yesterday because I find it kind of funny because this is sort of like what we would think",
    "start": "254190",
    "end": "261329"
  },
  {
    "text": "is as the most painful part of C++ but for some reason C++ programmers love to",
    "start": "261330",
    "end": "267990"
  },
  {
    "text": "talk about and I think we're kind of masochistic this like the war the worse it is the better",
    "start": "267990",
    "end": "274590"
  },
  {
    "text": "really but for most people they might not know what undefined behavior is",
    "start": "274590",
    "end": "279810"
  },
  {
    "text": "which is one of the interesting parts of C and C++ so I'll read this and this is",
    "start": "279810",
    "end": "287010"
  },
  {
    "text": "from from the spec so it says examples of undefined behavior are memory",
    "start": "287010",
    "end": "292350"
  },
  {
    "text": "accesses outside of array bounds signed integer overflow null pointer dereference modification of the same",
    "start": "292350",
    "end": "299340"
  },
  {
    "text": "scale or more than once in an expression without sequence points access to an objects through a pointer of a different",
    "start": "299340",
    "end": "305610"
  },
  {
    "text": "type etc and this is and this part is like the the fun part compilers are not",
    "start": "305610",
    "end": "313800"
  },
  {
    "text": "required to diagnosed a undefined behavior although mainly simple situations are diagnosed and the",
    "start": "313800",
    "end": "320340"
  },
  {
    "text": "compiled program is not required to do anything meaningful and we'll see how",
    "start": "320340",
    "end": "328800"
  },
  {
    "text": "easy it is to make undefined behavior very soon and we'll have one fun right",
    "start": "328800",
    "end": "334200"
  },
  {
    "text": "now so after this slide so but the basic advice I would say about an undefined",
    "start": "334200",
    "end": "339720"
  },
  {
    "text": "behaviour don't try to reason about it most programmers have this tendency to want to reason about it they'll be like",
    "start": "339720",
    "end": "345210"
  },
  {
    "text": "yeah but blah blah blah and there's like don't because it's getting not only has",
    "start": "345210",
    "end": "350250"
  },
  {
    "text": "it always been difficult to reason but with more and more advanced optimizing compilers it is getting more and more",
    "start": "350250",
    "end": "356690"
  },
  {
    "text": "impossible to reason about it so just assume it crashes or it's never",
    "start": "356690",
    "end": "363390"
  },
  {
    "text": "executed don't try to manipulate and depend on undefined behavior because",
    "start": "363390",
    "end": "369690"
  },
  {
    "text": "when you if you do and you probably do most people do when you change your",
    "start": "369690",
    "end": "375060"
  },
  {
    "text": "compiler or you compile the version or your optimization level suddenly you will break your application and that's",
    "start": "375060",
    "end": "381870"
  },
  {
    "text": "usually how you find out you're depending on on the front behavior and this is an example and it is inspired by",
    "start": "381870",
    "end": "392000"
  },
  {
    "start": "386000",
    "end": "457000"
  },
  {
    "text": "Shafiq young Moore on Twitter his Twitter handle is down there I if you if",
    "start": "392000",
    "end": "397620"
  },
  {
    "text": "you find undefined behavior to be a fun thing he he has a lot of fun too",
    "start": "397620",
    "end": "403169"
  },
  {
    "text": "it's an undefined behavior just follow him on Twitter he's a lot of fun there",
    "start": "403169",
    "end": "408689"
  },
  {
    "text": "and this is from Stack Overflow where he's also very active in C++ and but",
    "start": "408689",
    "end": "415020"
  },
  {
    "text": "basically this loop has this Delta",
    "start": "415020",
    "end": "420569"
  },
  {
    "text": "access here this access outside of our bounds which is undefined behavior if",
    "start": "420569",
    "end": "426810"
  },
  {
    "text": "you run this program it is an infinite loop it is supposed to go for iterations",
    "start": "426810",
    "end": "436349"
  },
  {
    "text": "it runs forever because undefined",
    "start": "436349",
    "end": "441659"
  },
  {
    "text": "behavior doesn't will introduce programs where you end up maybe not doing",
    "start": "441659",
    "end": "446729"
  },
  {
    "text": "anything meaningful because the compiler can do optimizations based on the fact that this doesn't have to happen but",
    "start": "446729",
    "end": "454050"
  },
  {
    "text": "that leads us into the next one which is compiler optimizations because this is a",
    "start": "454050",
    "end": "460319"
  },
  {
    "start": "457000",
    "end": "496000"
  },
  {
    "text": "common this was a compiler optimization based on something that was undefined behavior but you can get surprising",
    "start": "460319",
    "end": "466279"
  },
  {
    "text": "effects even if it there is no undefined behavior so I'm going to give an example",
    "start": "466279",
    "end": "475909"
  },
  {
    "text": "and in fact or of a compiler after my station crossing surprising effect this",
    "start": "475909",
    "end": "483899"
  },
  {
    "text": "was a very n is still a very famous vulnerability that that hit a lot of",
    "start": "483899",
    "end": "490649"
  },
  {
    "text": "applications and that is the case of the disappearing memset and it deals around",
    "start": "490649",
    "end": "498870"
  },
  {
    "start": "496000",
    "end": "563000"
  },
  {
    "text": "code like this so basically you have [Music] some function that needs other user to",
    "start": "498870",
    "end": "506879"
  },
  {
    "text": "login so then you get the password from the user then you do your operation when",
    "start": "506879",
    "end": "514560"
  },
  {
    "text": "you're done with your operation you you have this this password in memory and you don't like to keep it around in",
    "start": "514560",
    "end": "521219"
  },
  {
    "text": "memory so now you want to zero out this part of memory and this is looks perfectly reasonable except that the mem",
    "start": "521219",
    "end": "529500"
  },
  {
    "text": "set is removed by the optimizer because the optimizer views this as a dead store no one is ever going to read this memory",
    "start": "529500",
    "end": "536640"
  },
  {
    "text": "again there's no reason to write this this was",
    "start": "536640",
    "end": "541769"
  },
  {
    "text": "a very surprising thing that happened to quite a lot of products that ended up",
    "start": "541769",
    "end": "548879"
  },
  {
    "text": "having credentials in memory that they thought they had taken away so yesterday",
    "start": "548879",
    "end": "556439"
  },
  {
    "text": "I went to a bunch of C++ talks and I realized that the dumb thing if I want to be cool is that I should probably",
    "start": "556439",
    "end": "563910"
  },
  {
    "start": "563000",
    "end": "630000"
  },
  {
    "text": "show you this uncaught bolts so I never do live demo so this will be as live as",
    "start": "563910",
    "end": "568980"
  },
  {
    "text": "you're gonna get ever so let's see okay so is that I'm",
    "start": "568980",
    "end": "577290"
  },
  {
    "text": "not going to try to make it bigger so that's unfortunate if it's not big enough because I'll probably mess it up",
    "start": "577290",
    "end": "583139"
  },
  {
    "text": "but if you go and look down here that's a mem set so that's good but we",
    "start": "583139",
    "end": "590399"
  },
  {
    "text": "have no optimisation so let's go -",
    "start": "590399",
    "end": "595220"
  },
  {
    "text": "there's still some code here but the website is already gone let's just",
    "start": "597319",
    "end": "605149"
  },
  {
    "text": "there is no memset any optimization level it's gone",
    "start": "607730",
    "end": "613420"
  },
  {
    "text": "so it might look good in debug and then",
    "start": "613420",
    "end": "620660"
  },
  {
    "text": "in release your password is still there okay let's see it'll come back okay so",
    "start": "620660",
    "end": "633470"
  },
  {
    "start": "630000",
    "end": "659000"
  },
  {
    "text": "if you see on the bottom here I have I have some references to different kinds",
    "start": "633470",
    "end": "639620"
  },
  {
    "text": "of parts of other so here the era of the sae which says has two sections which is",
    "start": "639620",
    "end": "645950"
  },
  {
    "text": "related to this one is be aware of compiler optimizations which we have talked about and you should now be aware",
    "start": "645950",
    "end": "651650"
  },
  {
    "text": "and the other one is clear sensitive information stored in reusable resources",
    "start": "651650",
    "end": "656950"
  },
  {
    "text": "and how to do that but there has been some solutions around this for people",
    "start": "656950",
    "end": "665030"
  },
  {
    "start": "659000",
    "end": "702000"
  },
  {
    "text": "who are used to Windows I assume this secure zero memory might be familiar on",
    "start": "665030",
    "end": "670430"
  },
  {
    "text": "Linux this memset underscore s has",
    "start": "670430",
    "end": "676930"
  },
  {
    "text": "implemented some places but I don't think it is on Ubuntu at least and so if",
    "start": "676930",
    "end": "683720"
  },
  {
    "text": "you have code like this in your application and go and read these pages they have workarounds for different",
    "start": "683720",
    "end": "690800"
  },
  {
    "text": "kinds of compilers and different kinds of platforms but this is not a solved problem so if you if you have things",
    "start": "690800",
    "end": "698330"
  },
  {
    "text": "like this then have a look ok so now",
    "start": "698330",
    "end": "704660"
  },
  {
    "start": "702000",
    "end": "798000"
  },
  {
    "text": "we've looked a little bit at those but it's more fun to look at code so let's look at exploitability we're going to go",
    "start": "704660",
    "end": "712160"
  },
  {
    "text": "through these ten unsigned integer wraparound sign integer overflow numeric",
    "start": "712160",
    "end": "717500"
  },
  {
    "text": "truncation stack buffer overflow heat buffer overflow but for underflow used",
    "start": "717500",
    "end": "723020"
  },
  {
    "text": "after free double free incorrect type conversion and uncontrolled string format and the thing is one of the",
    "start": "723020",
    "end": "729980"
  },
  {
    "text": "things that I find interesting as being super stressed program above being interested in security is that a lot of",
    "start": "729980",
    "end": "736580"
  },
  {
    "text": "the things that security researchers consider vulnerabilities C++ developers consider bugs because it is",
    "start": "736580",
    "end": "744190"
  },
  {
    "text": "generally the program is not behaving as it's supposed to what makes it a",
    "start": "744190",
    "end": "749470"
  },
  {
    "text": "vulnerabilities if you can use that behavior to do something else so I wrote",
    "start": "749470",
    "end": "756910"
  },
  {
    "text": "the code I put it on github and yeah well it's on my github so we you can",
    "start": "756910",
    "end": "763209"
  },
  {
    "text": "look at it there I got some complaints that these some of my examples weren't",
    "start": "763209",
    "end": "770019"
  },
  {
    "text": "really fair to see which is probably true because I'm going to concatenate two buffers like they were strings but I",
    "start": "770019",
    "end": "777160"
  },
  {
    "text": "don't really care about about null terminating the strings and things but",
    "start": "777160",
    "end": "782620"
  },
  {
    "text": "you have to fit things on the slide and on the other hand you probably wouldn't concatenate strings like this is C",
    "start": "782620",
    "end": "788440"
  },
  {
    "text": "either but I'm trying to prove a point so so we'll do sign integer wraparound",
    "start": "788440",
    "end": "794980"
  },
  {
    "text": "and sine integer overflow and American Cajun at first now there's quite a bit",
    "start": "794980",
    "end": "799990"
  },
  {
    "text": "of code here but the code is going to be repeated so we'll take it over slow the first time and that'll be easier so",
    "start": "799990",
    "end": "805899"
  },
  {
    "text": "basically you have three lengths first length second length and buf length",
    "start": "805899",
    "end": "811019"
  },
  {
    "text": "first length is you and max so this is an unsigned int and all of them are in",
    "start": "811019",
    "end": "816490"
  },
  {
    "text": "sign-ins and we're going to make buffers of these sizes and the other ones are",
    "start": "816490",
    "end": "821500"
  },
  {
    "text": "256 because I like that number and but anyway so we want to check before we",
    "start": "821500",
    "end": "828760"
  },
  {
    "text": "copy into buff we want to check the buff is it has sufficiently size to fit boast",
    "start": "828760",
    "end": "836949"
  },
  {
    "text": "first and second so we add first to second to check that is under 256 of",
    "start": "836949",
    "end": "842170"
  },
  {
    "text": "course now you see that it's not but I had to fit on the slide so assume it came as a parameter but if you add first",
    "start": "842170",
    "end": "849100"
  },
  {
    "text": "to second because of and this is this is defined behavior this is not undefined",
    "start": "849100",
    "end": "855040"
  },
  {
    "text": "behavior unsigned integer wraps and when you add 256 to you and max it big the",
    "start": "855040",
    "end": "862600"
  },
  {
    "text": "answer is 255 which is clearly under 256",
    "start": "862600",
    "end": "867819"
  },
  {
    "text": "so we go in and we do the copy this is",
    "start": "867819",
    "end": "873040"
  },
  {
    "text": "this is very often what you will see like this isn't I'll show you another example is well",
    "start": "873040",
    "end": "878060"
  },
  {
    "text": "I'll point to it in another example with Malik where you have the same kind of idea but the point here is that you are",
    "start": "878060",
    "end": "886250"
  },
  {
    "text": "trying to bypass checks in the code by by wrapping or overflowing integers or",
    "start": "886250",
    "end": "891860"
  },
  {
    "text": "unsigned integers so let's look at a sign integer overflow now this is undefined behavior so other things could",
    "start": "891860",
    "end": "899840"
  },
  {
    "start": "893000",
    "end": "987000"
  },
  {
    "text": "also happen but in this case we're going to go at what happened on my machine right so here we have first length is",
    "start": "899840",
    "end": "906560"
  },
  {
    "text": "now in int Max and second and buff is the same we do exactly the same again now we add first length the second",
    "start": "906560",
    "end": "913340"
  },
  {
    "text": "length this will this will overflow what",
    "start": "913340",
    "end": "918650"
  },
  {
    "text": "happens now is undefined behavior but and all of the like all the times I've tested this number is negative which is",
    "start": "918650",
    "end": "925400"
  },
  {
    "text": "clearly under 256 and we go in and we copy right ok so then we have no numeric",
    "start": "925400",
    "end": "933680"
  },
  {
    "text": "truncation error now this is really easy to do so look at that so first length now is you and Max minus 256 so we know",
    "start": "933680",
    "end": "941990"
  },
  {
    "text": "if you add 256 to it will still be fine and then we make our buffers again but",
    "start": "941990",
    "end": "949430"
  },
  {
    "text": "now we pull the check for the new length into another variable and we are going",
    "start": "949430",
    "end": "956060"
  },
  {
    "text": "to put it into an int now unfortunately int does not have room for you in max",
    "start": "956060",
    "end": "962680"
  },
  {
    "text": "and that's unfortunate because this is",
    "start": "962680",
    "end": "968180"
  },
  {
    "text": "again this is not undefined behavior this is implementation dependent behavior which is a whole other category",
    "start": "968180",
    "end": "974540"
  },
  {
    "text": "of things but it doesn't really matter in our case because this number turns",
    "start": "974540",
    "end": "980150"
  },
  {
    "text": "out to be negative of my machine which is less than 256 and we go in again okay",
    "start": "980150",
    "end": "988370"
  },
  {
    "start": "987000",
    "end": "1145000"
  },
  {
    "text": "so those were the fun numbers and basically all of the vulnerabilities around this are around things like that",
    "start": "988370",
    "end": "993560"
  },
  {
    "text": "you make a number of really big so you can make it really small and pass checks",
    "start": "993560",
    "end": "1000210"
  },
  {
    "text": "okay so then we're gonna look at overflows now generally you you might start with the with some kind",
    "start": "1000210",
    "end": "1007160"
  },
  {
    "text": "have signed or unsigned int overflow wraparound thing and generally end up in",
    "start": "1007160",
    "end": "1014900"
  },
  {
    "text": "something that is a stack stack where heat based overflow because what you often want to do is you want to write",
    "start": "1014900",
    "end": "1021260"
  },
  {
    "text": "things that you want to do stuff with in this vulnerability so now you need to",
    "start": "1021260",
    "end": "1027079"
  },
  {
    "text": "write it somewhere so this is this is quite a boring one in a way but it is",
    "start": "1027079",
    "end": "1034670"
  },
  {
    "text": "illustrate something that has been a traditionally very common vulnerability and this is basically just reading",
    "start": "1034670",
    "end": "1042199"
  },
  {
    "text": "random stuff in not really knowing how big it is and writing it into your own",
    "start": "1042199",
    "end": "1047630"
  },
  {
    "text": "memory now this is actually to cwe so if",
    "start": "1047630",
    "end": "1053090"
  },
  {
    "text": "you see that it's called cwe to now 121 which is stack based of buffer overflow",
    "start": "1053090",
    "end": "1058250"
  },
  {
    "text": "but if you look over gets it got its own number so so 242 inherently dangerous",
    "start": "1058250",
    "end": "1068450"
  },
  {
    "text": "function I had to jump through some hoops to be able to get this code to compile even so this is a good thing see",
    "start": "1068450",
    "end": "1076280"
  },
  {
    "text": "you shouldn't be using it but anyway so here you have a stack stack allocated",
    "start": "1076280",
    "end": "1082490"
  },
  {
    "text": "buffer and then your reading random stuff to it that can be much bigger and then possibly overriding your stack and",
    "start": "1082490",
    "end": "1091720"
  },
  {
    "text": "this one is interesting in two ways will do the the first one let's see so you",
    "start": "1091720",
    "end": "1098780"
  },
  {
    "text": "have the heat based a buffer overflow so now you're going to allocate on the heap and then you're gonna copy something",
    "start": "1098780",
    "end": "1104120"
  },
  {
    "text": "that is bigger than what it fits and then you are going to write outside of your buffer on the heap instead but what",
    "start": "1104120",
    "end": "1111110"
  },
  {
    "text": "you will see here also you have the malloc and you said sizeof cart times",
    "start": "1111110",
    "end": "1116840"
  },
  {
    "text": "ten this is a very typical scenario on where you would also use the integer",
    "start": "1116840",
    "end": "1122990"
  },
  {
    "text": "overflow so instead of the ten you will have some kind of integer and you will get it to wrap and so the the code that",
    "start": "1122990",
    "end": "1131660"
  },
  {
    "text": "is writing thinks that there is sufficient space but you made the actual actual allocation small so that's",
    "start": "1131660",
    "end": "1139190"
  },
  {
    "text": "another typical scenario those yeah then we go to the next one",
    "start": "1139190",
    "end": "1148310"
  },
  {
    "start": "1145000",
    "end": "1290000"
  },
  {
    "text": "buffer underwrite underflow and this is basically going the other way so instead of writing off the end you're going to",
    "start": "1148310",
    "end": "1154580"
  },
  {
    "text": "write off the beginning so basically going the other direction and so it's",
    "start": "1154580",
    "end": "1161810"
  },
  {
    "text": "not very interesting but it's the same idea so you get you you have some kind of bug in your loop and then that makes",
    "start": "1161810",
    "end": "1168650"
  },
  {
    "text": "you be able to to write all the way so if you can manipulate the input in a",
    "start": "1168650",
    "end": "1174410"
  },
  {
    "text": "good way and that this is this is often how you do it because you have to get your stuff in somehow right so generally",
    "start": "1174410",
    "end": "1181520"
  },
  {
    "text": "you will manipulate some kind of input that that the code gets you first analyze the code try to figure out what kind of vulnerabilities it is then you",
    "start": "1181520",
    "end": "1188000"
  },
  {
    "text": "massage a little bit the input to get it in a certain way to get the code to behave like you want so that is numbers",
    "start": "1188000",
    "end": "1194030"
  },
  {
    "text": "and that is strings that might be files or media files or protocols where you",
    "start": "1194030",
    "end": "1199130"
  },
  {
    "text": "can manipulate header parameters to basically make the code do what you want",
    "start": "1199130",
    "end": "1204640"
  },
  {
    "text": "okay and these are these are typical like c++ bugs right but but they can",
    "start": "1204640",
    "end": "1210110"
  },
  {
    "text": "also be misused but they but how you will generally see these things",
    "start": "1210110",
    "end": "1216800"
  },
  {
    "text": "happening is you won't generally see them in regular use because you will",
    "start": "1216800",
    "end": "1224210"
  },
  {
    "text": "generally get bugs and generally you use if you if you have these kinds of things so here you have a use after free this",
    "start": "1224210",
    "end": "1231440"
  },
  {
    "text": "will generally cause crashes so you would have seen it most likely so where",
    "start": "1231440",
    "end": "1237380"
  },
  {
    "text": "you see these actually turning up is usually where the the buffer is only",
    "start": "1237380",
    "end": "1243350"
  },
  {
    "text": "freed in an error situation so if you can manipulate the program to come into",
    "start": "1243350",
    "end": "1249770"
  },
  {
    "text": "an error condition when suddenly it will do the free and then later use it now you you have memory in a bad state you",
    "start": "1249770",
    "end": "1259910"
  },
  {
    "text": "have undefined behavior you can maybe use other things to end manipulate it so this is and this is the same thing with",
    "start": "1259910",
    "end": "1266590"
  },
  {
    "text": "way to say you say here you have the use after free and then you have the double free and the double fee is usually",
    "start": "1266590",
    "end": "1271730"
  },
  {
    "text": "introduced in the same way you you only freed it on an error and then",
    "start": "1271730",
    "end": "1276970"
  },
  {
    "text": "later you do some kind of memory analyzer saying oh no this buffer leaked and then somebody put in another delete",
    "start": "1276970",
    "end": "1283750"
  },
  {
    "text": "it's it's an easy thing to happen right yeah so incorrect type conversion this",
    "start": "1283750",
    "end": "1292300"
  },
  {
    "start": "1290000",
    "end": "1327000"
  },
  {
    "text": "is uh this is one of my favorite things you can't do this in other languages I",
    "start": "1292300",
    "end": "1300670"
  },
  {
    "text": "like the fact that in the C and C++ if you really really want to you can cast an apple to a pear and the compiler will",
    "start": "1300670",
    "end": "1307960"
  },
  {
    "text": "say yeah I I believe you you know what you're doing so here we have to clearly",
    "start": "1307960",
    "end": "1313890"
  },
  {
    "text": "unrelated things and yeah sure if you do a hard C cast you can cast an A to B you",
    "start": "1313890",
    "end": "1323260"
  },
  {
    "text": "can do that it's a feature language okay and the good thing okay",
    "start": "1323260",
    "end": "1330400"
  },
  {
    "start": "1327000",
    "end": "1357000"
  },
  {
    "text": "the one thing that you can do with this is let's say that you had some memory that was allocated for something else but now you managed to take it over",
    "start": "1330400",
    "end": "1336400"
  },
  {
    "text": "somehow maybe using it after free or something now you can just make an",
    "start": "1336400",
    "end": "1343240"
  },
  {
    "text": "object there of your own choosing or you can make a manipulated class to",
    "start": "1343240",
    "end": "1348370"
  },
  {
    "text": "manipulate the fields of an existing object with your new pointer with new features there's lots of things that you",
    "start": "1348370",
    "end": "1354340"
  },
  {
    "text": "can do that will make this useful and",
    "start": "1354340",
    "end": "1360130"
  },
  {
    "text": "this is this is the the programming world's version of sequel injection right you're basically getting some kind",
    "start": "1360130",
    "end": "1367120"
  },
  {
    "text": "of external format string and then you just trusting your input and you're just letting it go so in this case you're",
    "start": "1367120",
    "end": "1374980"
  },
  {
    "text": "getting your format through your command-line argument you're getting your strings through your command-line argument that new calling printf this is",
    "start": "1374980",
    "end": "1380800"
  },
  {
    "text": "not a very good program but you but you could and now you can just do a",
    "start": "1380800",
    "end": "1386620"
  },
  {
    "text": "percentage that's fine it will put the string in and then you could do a percent D and it will just print around",
    "start": "1386620",
    "end": "1391660"
  },
  {
    "text": "the memory now a good thing about things like this is that you can actually get like valid memory addresses and things",
    "start": "1391660",
    "end": "1398680"
  },
  {
    "text": "like that that you can actually get print out you can get information out of the program if you're able to do this",
    "start": "1398680",
    "end": "1405160"
  },
  {
    "text": "something that you can use to maybe used to - maybe attack it in a different",
    "start": "1405160",
    "end": "1410800"
  },
  {
    "text": "way so you can get pointer addresses and things like that okay so we looked at a",
    "start": "1410800",
    "end": "1418540"
  },
  {
    "text": "whole like a little chunk of exploitability and this is the take your",
    "start": "1418540",
    "end": "1424840"
  },
  {
    "text": "vitamins part so use your tools there are quite a lot of tools because most",
    "start": "1424840",
    "end": "1432190"
  },
  {
    "start": "1425000",
    "end": "1552000"
  },
  {
    "text": "most likely you will have some all many vulnerabilities in your code and a good",
    "start": "1432190",
    "end": "1438910"
  },
  {
    "text": "way of finding them is using the tools that you have and and like I said before",
    "start": "1438910",
    "end": "1444850"
  },
  {
    "text": "if you're looking for things like undefined behavior then changing your compiler using many different compilers",
    "start": "1444850",
    "end": "1450309"
  },
  {
    "text": "using many different optimization levels and then running through your test",
    "start": "1450309",
    "end": "1455710"
  },
  {
    "text": "Suites that's a good way of figuring out that you are depending on undefined",
    "start": "1455710",
    "end": "1460720"
  },
  {
    "text": "behavior but also taking care to look at your errors and warnings do instrumentation fuzzing static analysis",
    "start": "1460720",
    "end": "1467559"
  },
  {
    "text": "all of the things that are are available to try to find these things and fix them",
    "start": "1467559",
    "end": "1473559"
  },
  {
    "text": "then you have paid products to to do do static analysis but many times you'll have to do dynamic analysis okay so then",
    "start": "1473559",
    "end": "1483309"
  },
  {
    "text": "we come to my my part my opinions okay so this is my the eight I'd really",
    "start": "1483309",
    "end": "1489190"
  },
  {
    "text": "rather you didn't and they are inspired by the eight condiments of festive",
    "start": "1489190",
    "end": "1494620"
  },
  {
    "text": "arianism which is great and you should go read them on Wikipedia but these are",
    "start": "1494620",
    "end": "1499630"
  },
  {
    "text": "mine so don't take me too seriously but seriously think about it so these",
    "start": "1499630",
    "end": "1507490"
  },
  {
    "text": "are the ones I'd really rather you didn't you see I'd really rather you didn't allocate with new I'd really",
    "start": "1507490",
    "end": "1514809"
  },
  {
    "text": "rather you didn't do math a lot and really rather you didn't trust your external input I'd really rather you",
    "start": "1514809",
    "end": "1521350"
  },
  {
    "text": "didn't use pointers a lot I'd really rather you didn't write clever code I'd really rather you didn't use shared",
    "start": "1521350",
    "end": "1527710"
  },
  {
    "text": "pointer a lot and I'd really rather you didn't share state a lot now the first",
    "start": "1527710",
    "end": "1532840"
  },
  {
    "text": "four we'll go through a little bit more and the last four not so much",
    "start": "1532840",
    "end": "1539010"
  },
  {
    "text": "I'd really rather you didn't you see and here I can point to the core guidelines",
    "start": "1539010",
    "end": "1545580"
  },
  {
    "text": "right the core guidelines has a point on this prefer C++ to see because C++ has",
    "start": "1545580",
    "end": "1555830"
  },
  {
    "text": "very good features that will make it so you don't have to use many of the",
    "start": "1555830",
    "end": "1561150"
  },
  {
    "text": "dangerous features of C so try to use C++ language and the facilities that are",
    "start": "1561150",
    "end": "1566850"
  },
  {
    "text": "there to avoid many of these situations and in this case this is how you concatenate two strings and C++ don't go",
    "start": "1566850",
    "end": "1575700"
  },
  {
    "text": "trying to copy and make buffers and move things around and use car stars and just",
    "start": "1575700",
    "end": "1582060"
  },
  {
    "text": "try to avoid it as much as possible and especially if you're going to manipulate it use STD string or your own company",
    "start": "1582060",
    "end": "1590310"
  },
  {
    "text": "string but be safe about it and also many people don't know that you can do",
    "start": "1590310",
    "end": "1596640"
  },
  {
    "text": "this in C++ because they learn C++ in the 90s right and they're like I don't really know how you do this okay it is",
    "start": "1596640",
    "end": "1603870"
  },
  {
    "text": "perfectly normal we can do a perfectly normal concatenation with plus and C++ and if",
    "start": "1603870",
    "end": "1612300"
  },
  {
    "text": "you want to read in from standard in or out you do it with STD scene or SVC out",
    "start": "1612300",
    "end": "1619830"
  },
  {
    "text": "and you will have things that are properly sized so don't don't try to be",
    "start": "1619830",
    "end": "1627300"
  },
  {
    "text": "fancy just do it the normal way yeah and",
    "start": "1627300",
    "end": "1634620"
  },
  {
    "start": "1632000",
    "end": "1693000"
  },
  {
    "text": "this is the this is the one that was buffer under flow before but instead of",
    "start": "1634620",
    "end": "1641940"
  },
  {
    "text": "making a fancy loop because basically try to avoid loops in C++ just don't do",
    "start": "1641940",
    "end": "1648060"
  },
  {
    "text": "that any kind of loop tried to do algorithms try to do do program like",
    "start": "1648060",
    "end": "1653130"
  },
  {
    "text": "beer inside and this is this is split up",
    "start": "1653130",
    "end": "1659550"
  },
  {
    "text": "just because it rendered better on the slime but here you have a lambda it's",
    "start": "1659550",
    "end": "1667260"
  },
  {
    "text": "called is : and you pass it in to find if to find the",
    "start": "1667260",
    "end": "1672570"
  },
  {
    "text": "one it searches from the end and then if it when when it finds one which is like",
    "start": "1672570",
    "end": "1679470"
  },
  {
    "text": "in the middle of hello in world it will erase everything from there until the end and that was what the other code was",
    "start": "1679470",
    "end": "1684540"
  },
  {
    "text": "doing but it was kind of hard to tell so this is more readable as well and less",
    "start": "1684540",
    "end": "1690570"
  },
  {
    "text": "prone to error and then if you want to cast we have casts this is how we've",
    "start": "1690570",
    "end": "1698580"
  },
  {
    "start": "1693000",
    "end": "1748000"
  },
  {
    "text": "been casting since early 2000 so this is the way to go and these are save casts so in this case we have a Spider Man and",
    "start": "1698580",
    "end": "1705030"
  },
  {
    "text": "Iron Man and everybody knows that aspiring my spider-man is not an Iron Man and so we make a Spider Man we call",
    "start": "1705030",
    "end": "1711120"
  },
  {
    "text": "him Peter and then we want to set a Tony pointer to Peter but Tony is an Iron Man",
    "start": "1711120",
    "end": "1719310"
  },
  {
    "text": "pointer and it's clear that you cannot have an Iron Man pointer pointing to spider-man and you can't and Klein says",
    "start": "1719310",
    "end": "1727260"
  },
  {
    "text": "you can't with the little mice errors just in like arrows that pinpoints exactly where it is and says error",
    "start": "1727260",
    "end": "1733680"
  },
  {
    "text": "static cast from spider-man pointer to Iron Man pointer which are not related by inheritance is not allowed so you're",
    "start": "1733680",
    "end": "1741690"
  },
  {
    "text": "going to get compiled time errors for forecasts I'd really rather you didn't",
    "start": "1741690",
    "end": "1750030"
  },
  {
    "start": "1748000",
    "end": "1787000"
  },
  {
    "text": "allocate with knew now this is very difficult from people coming from other kinds of languages like like Java for",
    "start": "1750030",
    "end": "1757350"
  },
  {
    "text": "example to C++ because they're used to always allocating with new and I'm",
    "start": "1757350",
    "end": "1763260"
  },
  {
    "text": "coming through the point where I think you should practically never allocate with new you have to have a really good",
    "start": "1763260",
    "end": "1770340"
  },
  {
    "text": "reason to allocate with new and that's kind of strange for people so I would",
    "start": "1770340",
    "end": "1778680"
  },
  {
    "text": "say I would prefer if you allocate on the stack that is like my first preference if you can allocate on the",
    "start": "1778680",
    "end": "1785430"
  },
  {
    "text": "stack it's nice it will manage your scope um so here we have a stack here oh",
    "start": "1785430",
    "end": "1791370"
  },
  {
    "text": "he where he lives on the stack he's very happy there and his scope will be controlled by the lifetime of where he",
    "start": "1791370",
    "end": "1798390"
  },
  {
    "text": "is or his lifetime will be I'll be controlled by the scope he's in which is",
    "start": "1798390",
    "end": "1803400"
  },
  {
    "text": "good if you have to have something on the heath they use unique pointer um",
    "start": "1803400",
    "end": "1809120"
  },
  {
    "text": "and here you can say that you can create something on the heap by calling make unique so there's no new there either so",
    "start": "1809120",
    "end": "1816210"
  },
  {
    "text": "this is the good thing is you can make code so that you can actually grep through your code for new so this is an",
    "start": "1816210",
    "end": "1821429"
  },
  {
    "text": "alternative to the one underneath we're using new to allocate a hero but the good thing here is now you have a unique",
    "start": "1821429",
    "end": "1827070"
  },
  {
    "text": "pointer on the stack which will manage the lifetime of your hero on the heap and it will delete it when it goes out",
    "start": "1827070",
    "end": "1835289"
  },
  {
    "text": "of scope it is well behaved toward with regards to moves and so use unique",
    "start": "1835289",
    "end": "1840720"
  },
  {
    "text": "pointer if you have to have something on the heap because even though we don't",
    "start": "1840720",
    "end": "1847889"
  },
  {
    "start": "1845000",
    "end": "1879000"
  },
  {
    "text": "have a garbage collection some people like to pretend that we have a garbage collection and they call it stack based",
    "start": "1847889",
    "end": "1855419"
  },
  {
    "text": "scope a garbage collection so basically you end up with the garbage collection happens at the curly bracket it's very",
    "start": "1855419",
    "end": "1862470"
  },
  {
    "text": "nice you don't have to run around take deleting your own memory which also",
    "start": "1862470",
    "end": "1867600"
  },
  {
    "text": "means you won't delete it twice if you you you take the handle down with the",
    "start": "1867600",
    "end": "1873870"
  },
  {
    "text": "memory you also know that you're not accessing the handle after the memory is gone yeah so deterministic garbage",
    "start": "1873870",
    "end": "1881789"
  },
  {
    "start": "1879000",
    "end": "1931000"
  },
  {
    "text": "collection we like to call that and then",
    "start": "1881789",
    "end": "1887760"
  },
  {
    "text": "we have something called make sure and I have a separate point on I really rather you didn't use make sure but if you have",
    "start": "1887760",
    "end": "1896610"
  },
  {
    "text": "to then this is how you do it you can hold a pointer our shared",
    "start": "1896610",
    "end": "1903210"
  },
  {
    "text": "pointer from the from the stack we're transitively from the stack so you have something on the stack that owns something that owns something that you",
    "start": "1903210",
    "end": "1909720"
  },
  {
    "text": "know but you can also do that with make",
    "start": "1909720",
    "end": "1914760"
  },
  {
    "text": "sure so it's still no new here ok and this I'd really rather you didn't do",
    "start": "1914760",
    "end": "1921990"
  },
  {
    "text": "math a lot now this is because you saw earlier we had all of these stack you know these overflows integer overflow",
    "start": "1921990",
    "end": "1928830"
  },
  {
    "text": "and wraparound and these things and basically my opinion is that primitive",
    "start": "1928830",
    "end": "1934289"
  },
  {
    "start": "1931000",
    "end": "2013000"
  },
  {
    "text": "types have no semantics and what I mean by that is that an doesn't mean anything and int is a",
    "start": "1934289",
    "end": "1942210"
  },
  {
    "text": "storage form but it does hot doesn't have any meaning you can't say that",
    "start": "1942210",
    "end": "1947340"
  },
  {
    "text": "somebody's age is an int because it doesn't make sense an int can be negative an int can be huge it doesn't",
    "start": "1947340",
    "end": "1954270"
  },
  {
    "text": "make sense it has no semantics but it does have actual physical limits which",
    "start": "1954270",
    "end": "1960660"
  },
  {
    "text": "gives it a lot of problems so I would say try to reduce the value space if you",
    "start": "1960660",
    "end": "1967740"
  },
  {
    "text": "can if you're using it for something that has semantics then give it semantics and there are facilities in",
    "start": "1967740",
    "end": "1974820"
  },
  {
    "text": "the language to give it cement is give it some kind of meaning so I wouldn't",
    "start": "1974820",
    "end": "1981390"
  },
  {
    "text": "use enum anymore it has its own set of vulnerabilities so don't do that but an",
    "start": "1981390",
    "end": "1986580"
  },
  {
    "text": "enum class we have now in C++ string literals can be very useful used to",
    "start": "1986580",
    "end": "1994320"
  },
  {
    "text": "define literals are kind of cool and especially when they're especially when you can make unicorns with them I don't",
    "start": "1994320",
    "end": "2003050"
  },
  {
    "text": "have an example of that way you can look you know somebody had an example of that and then spice tea iced tea I I think I",
    "start": "2003050",
    "end": "2012110"
  },
  {
    "text": "like okay so let's look at an enum class and why it's cool so here we have an",
    "start": "2012110",
    "end": "2018770"
  },
  {
    "start": "2013000",
    "end": "2098000"
  },
  {
    "text": "enum class on top it's called direction it has north east west west and south",
    "start": "2018770",
    "end": "2024860"
  },
  {
    "text": "now the one of the major features with regards to security of an enum class it",
    "start": "2024860",
    "end": "2030320"
  },
  {
    "text": "has no automatic conversion to end so there's no way to compare to enums that",
    "start": "2030320",
    "end": "2039020"
  },
  {
    "text": "are different in ohms but have the same value connected to them so if here I've",
    "start": "2039020",
    "end": "2045860"
  },
  {
    "text": "actually assigned them to card just to show you that you can but let's say that they were 1 2 3 & 4 if you had another",
    "start": "2045860",
    "end": "2053450"
  },
  {
    "text": "enum that also was 1 2 3 & 4 they would not be equal and that is that is one of",
    "start": "2053450",
    "end": "2060530"
  },
  {
    "text": "the things that I find most satisfying with code like this that I know that",
    "start": "2060530",
    "end": "2065990"
  },
  {
    "text": "that it is an actual right one it is type safe type so you use in um class if",
    "start": "2065990",
    "end": "2072470"
  },
  {
    "text": "you can but if you want to print it out there is a way to make it printable because if",
    "start": "2072470",
    "end": "2078858"
  },
  {
    "text": "you try to print that there's no no automatic conversion again so you actually have to make figure out how you",
    "start": "2078859",
    "end": "2083868"
  },
  {
    "text": "want to print it and so it has this stream operator to do that and then this",
    "start": "2083869",
    "end": "2093230"
  },
  {
    "text": "will write an e WS okay string literals",
    "start": "2093230",
    "end": "2100190"
  },
  {
    "start": "2098000",
    "end": "2145000"
  },
  {
    "text": "string literals are kind of cool I like though I would probably like in my",
    "start": "2100190",
    "end": "2105529"
  },
  {
    "text": "experience you don't write a lot of strings around in your code and the only place that you write a lot of strings in",
    "start": "2105529",
    "end": "2111529"
  },
  {
    "text": "your code a hard-coded lots of strings is generally in tests but in tests this",
    "start": "2111529",
    "end": "2119480"
  },
  {
    "text": "is kind of annoying and so this is a very nice way of a like let's say that you have an array of inputs that you're",
    "start": "2119480",
    "end": "2125900"
  },
  {
    "text": "going to go through you have an array of outputs you want to go through okay maybe this is a better way it's very clean you just say spider-man and then",
    "start": "2125900",
    "end": "2133190"
  },
  {
    "text": "this lowercase s for all of them and then you loop through them you can put",
    "start": "2133190",
    "end": "2138680"
  },
  {
    "text": "this in the loop but then it didn't fit very well on the slide okay so we have",
    "start": "2138680",
    "end": "2147650"
  },
  {
    "start": "2145000",
    "end": "2172000"
  },
  {
    "text": "used to define literals and the one thing here that you see that I didn't mention actually is that we have a four",
    "start": "2147650",
    "end": "2154730"
  },
  {
    "text": "for each loop here so I told you do not use loops but I special especially don't want you to use loops with numbers in",
    "start": "2154730",
    "end": "2161960"
  },
  {
    "text": "them so this has no numbers it's not counting anything it's just looping through the collection you don't have to",
    "start": "2161960",
    "end": "2167390"
  },
  {
    "text": "worry about running off out of on off the end okay",
    "start": "2167390",
    "end": "2172849"
  },
  {
    "start": "2172000",
    "end": "2211000"
  },
  {
    "text": "so used to define literals and this is a kind of cool thing here you have an H",
    "start": "2172849",
    "end": "2180140"
  },
  {
    "text": "which is equal to 24 underscore hours and then you have a D which is seven",
    "start": "2180140",
    "end": "2185869"
  },
  {
    "text": "underscore days and then you try to add H 2 D and like I said before and like normal integers don't have any semantics",
    "start": "2185869",
    "end": "2193400"
  },
  {
    "text": "but these things do so when you try to add hours to days you get a compile time",
    "start": "2193400",
    "end": "2200269"
  },
  {
    "text": "error because 24 hours cannot be added to seven days maybe you wanted",
    "start": "2200269",
    "end": "2206870"
  },
  {
    "text": "and you can make that but I can also show you how this works so how you do",
    "start": "2206870",
    "end": "2213560"
  },
  {
    "start": "2211000",
    "end": "2229000"
  },
  {
    "text": "how you make a user-defined literal is that you make a struct so these are two",
    "start": "2213560",
    "end": "2219680"
  },
  {
    "text": "strikes they have an unsigned long long num and and then they have this explicit",
    "start": "2219680",
    "end": "2224840"
  },
  {
    "text": "constructor that sets them no it's not very special and then you make this",
    "start": "2224840",
    "end": "2232180"
  },
  {
    "start": "2229000",
    "end": "2247000"
  },
  {
    "text": "quote operator which gives you the suffix that you saw it's like 24",
    "start": "2232180",
    "end": "2238850"
  },
  {
    "text": "underscore hours so this is how you make it and it will make an hours object or",
    "start": "2238850",
    "end": "2244460"
  },
  {
    "text": "and the other one will make a day subject so if you wanted to to make make",
    "start": "2244460",
    "end": "2251900"
  },
  {
    "text": "it possible to add days to hours and you can make functions that could do that right but if not then it's not possible",
    "start": "2251900",
    "end": "2260690"
  },
  {
    "start": "2260000",
    "end": "2290000"
  },
  {
    "text": "and trying to do it will give you a compile time error so this is a way of",
    "start": "2260690",
    "end": "2265970"
  },
  {
    "text": "giving semantics to numbers instead of using raw numbers in your code because",
    "start": "2265970",
    "end": "2271490"
  },
  {
    "text": "having numbers is a vulnerability right it's it's a way of getting vulnerable so trying to reduce where you use in Sandin",
    "start": "2271490",
    "end": "2279890"
  },
  {
    "text": "sign-ins and all sorts of raw data types that don't have any semantics and",
    "start": "2279890",
    "end": "2285410"
  },
  {
    "text": "instead try to use things that have semantics these are my personal opinions okay so you cite Steve for sizes I this",
    "start": "2285410",
    "end": "2295700"
  },
  {
    "start": "2290000",
    "end": "2325000"
  },
  {
    "text": "has been a little bit controversial for some people but I'm coming to the",
    "start": "2295700",
    "end": "2301010"
  },
  {
    "text": "conclusion that I like it so this if you're going to have something that has like the number of elements in the",
    "start": "2301010",
    "end": "2307220"
  },
  {
    "text": "collection then the normal thing now is to return a size T one of the things",
    "start": "2307220",
    "end": "2312230"
  },
  {
    "text": "that is unfortunate is it is platform dependent size and and like 64 bits 32",
    "start": "2312230",
    "end": "2318410"
  },
  {
    "text": "bit dependent which I don't like but",
    "start": "2318410",
    "end": "2323630"
  },
  {
    "text": "it's pretty good okay so I'd really rather you didn't trust your external",
    "start": "2323630",
    "end": "2329600"
  },
  {
    "start": "2325000",
    "end": "2352000"
  },
  {
    "text": "input and this is not so easy because it's not necessarily that you realize",
    "start": "2329600",
    "end": "2335720"
  },
  {
    "text": "what your external input is or where you're getting it in and it's not necessary that you know",
    "start": "2335720",
    "end": "2342990"
  },
  {
    "text": "that you're not sanitizing it properly so this is where your fuzzers come in it's a very good way of checking that",
    "start": "2342990",
    "end": "2349920"
  },
  {
    "text": "you're handling your your external input correctly from static analysis they have",
    "start": "2349920",
    "end": "2356400"
  },
  {
    "start": "2352000",
    "end": "2454000"
  },
  {
    "text": "this concept here that they call taint so the idea is that the the external",
    "start": "2356400",
    "end": "2362369"
  },
  {
    "text": "input that comes in is considered to be dirty somehow and anything it touches anything",
    "start": "2362369",
    "end": "2369119"
  },
  {
    "text": "it's given to becomes dirty so this taint will spread into your",
    "start": "2369119",
    "end": "2375960"
  },
  {
    "text": "program through your interfaces as long as this thing is passed so the idea here",
    "start": "2375960",
    "end": "2381359"
  },
  {
    "text": "is to stop the taint as soon as possible to to sanitize it maybe move it into",
    "start": "2381359",
    "end": "2387570"
  },
  {
    "text": "something else where you do limit boundary checking if you're doing and maybe changing it to a totally different",
    "start": "2387570",
    "end": "2394230"
  },
  {
    "text": "thing but doing it as soon as possible when you get it in so this is trying to",
    "start": "2394230",
    "end": "2399270"
  },
  {
    "text": "stop the taint and you have many different things like you have command-line arguments that we saw",
    "start": "2399270",
    "end": "2405510"
  },
  {
    "text": "because it's easy and you fits on the slide but you have like things like protocols you have size fields and",
    "start": "2405510",
    "end": "2411180"
  },
  {
    "text": "headers and they can lie right it doesn't have to be the right size if",
    "start": "2411180",
    "end": "2416430"
  },
  {
    "text": "someone can craft a file and give it to you and lie about the size of the body and make you allocate more or less or",
    "start": "2416430",
    "end": "2424109"
  },
  {
    "text": "coffee more or less because they can see maybe in your code that okay but here they're going to add a little bit to",
    "start": "2424109",
    "end": "2431220"
  },
  {
    "text": "this so if I make this number this big then they're gonna wrap around but they're gonna believe that it is this",
    "start": "2431220",
    "end": "2436380"
  },
  {
    "text": "big and they're gonna copy my entire payload into their memory because this",
    "start": "2436380",
    "end": "2441660"
  },
  {
    "text": "is the whole idea of vulnerabilities is trying to make the program do your work how can I manipulate their input to make",
    "start": "2441660",
    "end": "2449730"
  },
  {
    "text": "them do what I want this this is related",
    "start": "2449730",
    "end": "2457710"
  },
  {
    "start": "2454000",
    "end": "2544000"
  },
  {
    "text": "to I really rather you didn't allocate with new and this is also a little bit controversial but I would actually say",
    "start": "2457710",
    "end": "2463830"
  },
  {
    "text": "I'd really rather you didn't use pointers a lot and the reason for that is that as C++ pointer or a C pointer",
    "start": "2463830",
    "end": "2473130"
  },
  {
    "text": "doesn't have any good semantics in my opinion again because it could point to",
    "start": "2473130",
    "end": "2481360"
  },
  {
    "text": "an object of this type it could be no and it could just point to random memory",
    "start": "2481360",
    "end": "2489900"
  },
  {
    "text": "you don't know what it points to when someone gives you a pointer you don't",
    "start": "2489900",
    "end": "2496570"
  },
  {
    "text": "know it's like you can check it for no yeah that's great okay now you checked it for no now you know it's not no but",
    "start": "2496570",
    "end": "2503080"
  },
  {
    "text": "you still do not know that this thing points to an object that has that a is there to has not been deleted because",
    "start": "2503080",
    "end": "2510910"
  },
  {
    "text": "you have to understand that this is like yet the the object might be deleted but it might still be there in memory it's",
    "start": "2510910",
    "end": "2518580"
  },
  {
    "text": "surprisingly fun in C++ how you can actually call methods on deleted objects",
    "start": "2518580",
    "end": "2525640"
  },
  {
    "text": "and get away with it for a while okay so so I'd really rather you didn't use",
    "start": "2525640",
    "end": "2533530"
  },
  {
    "text": "pointers a lot and then I say a lot because sometimes it is fitting but really think about it because this is",
    "start": "2533530",
    "end": "2539620"
  },
  {
    "text": "not a good way to access memory in my opinion I'd really rather you didn't",
    "start": "2539620",
    "end": "2546160"
  },
  {
    "start": "2544000",
    "end": "2627000"
  },
  {
    "text": "write clever code and the reason why I said clever is because sometimes you think like oh this is really elegant and",
    "start": "2546160",
    "end": "2551740"
  },
  {
    "text": "I did this thing above a bar but the thing is the more clever it is the more and when I say clever I mean generally",
    "start": "2551740",
    "end": "2558460"
  },
  {
    "text": "it adds complexity or it makes it difficult to read so that people you know had to be really smart to",
    "start": "2558460",
    "end": "2563860"
  },
  {
    "text": "understand what this thing does but the more clever it is the harder it is to",
    "start": "2563860",
    "end": "2569470"
  },
  {
    "text": "find bugs the harder it is to fix bugs or that easier it is to introduce bugs because you write the code now and it's",
    "start": "2569470",
    "end": "2576730"
  },
  {
    "text": "like perfect but then somebody has to do a little feature adding a feature here and there and and all of your or all of",
    "start": "2576730",
    "end": "2584230"
  },
  {
    "text": "your assumptions are blown away and they end up introducing vulnerabilities in your code because they didn't understand",
    "start": "2584230",
    "end": "2590200"
  },
  {
    "text": "it that's not their fault it's not nobody's fault but try to make it so that you're",
    "start": "2590200",
    "end": "2595540"
  },
  {
    "text": "thinking about who's going to read your code afterwards try to make it don't write the most clever code you can well",
    "start": "2595540",
    "end": "2603130"
  },
  {
    "text": "somebody had this this quote that said that to to debug you have to be be smarter",
    "start": "2603130",
    "end": "2610900"
  },
  {
    "text": "than twice a smart or something than to write code so if you write the cleverest",
    "start": "2610900",
    "end": "2616209"
  },
  {
    "text": "code you can you're not smart enough to debug in something like that I don't remember but basically just try to keep",
    "start": "2616209",
    "end": "2621849"
  },
  {
    "text": "it as simple as you can because this is where vulnerabilities can creep in I'd",
    "start": "2621849",
    "end": "2628959"
  },
  {
    "start": "2627000",
    "end": "2745000"
  },
  {
    "text": "really rather you didn't use shared pointer a lot now this is I think most C++ programmers agree with me on this a",
    "start": "2628959",
    "end": "2636160"
  },
  {
    "text": "lot of new C++ programmers do this because they come from managed memory languages and they don't really know how",
    "start": "2636160",
    "end": "2642910"
  },
  {
    "text": "to manage memory um in C C++ way I would",
    "start": "2642910",
    "end": "2648219"
  },
  {
    "text": "rather that you try to figure out how C++ programmers usually do this because first of all C++ programmers won't like",
    "start": "2648219",
    "end": "2656439"
  },
  {
    "text": "you if you don't matter to memory well because this is like one of the central",
    "start": "2656439",
    "end": "2663910"
  },
  {
    "text": "things for being a C++ programmer this is like if you don't do this well you",
    "start": "2663910",
    "end": "2669369"
  },
  {
    "text": "just nobody will call you a C++ programmer we are extremely careful about our memory we know we have like",
    "start": "2669369",
    "end": "2675999"
  },
  {
    "text": "this little piece it belongs to this thing which he's here which is and who has the lifetime in the lifetime is this",
    "start": "2675999",
    "end": "2681910"
  },
  {
    "text": "and it's ridiculous how much C++ programmers can tell you about every single byte they allocate it is it is a",
    "start": "2681910",
    "end": "2689199"
  },
  {
    "text": "fascinating thing but with shared pointer the idea here is that you have a reference counted thing Nana might feel",
    "start": "2689199",
    "end": "2695079"
  },
  {
    "text": "like oh yeah but this is basically garbage collection right it's like we count that but we count down that at a certain point it goes away and first of",
    "start": "2695079",
    "end": "2703150"
  },
  {
    "text": "all a sham pointers in our garbage collection it suffers from all of the the same problems that these kinds of",
    "start": "2703150",
    "end": "2708249"
  },
  {
    "text": "reference counting systems have you can have a circular thing and then it just stays in memory but also it it is proof",
    "start": "2708249",
    "end": "2719670"
  },
  {
    "text": "you have no idea what you're doing with your memory and so as so a superstar's",
    "start": "2719670",
    "end": "2726579"
  },
  {
    "text": "programmer will see shared pointer all over your code and they'll go like I don't think this good is very good so",
    "start": "2726579",
    "end": "2735039"
  },
  {
    "text": "I'd really rather you didn't do SharePoint or a lot because then you have to deal with your memory you have to explicit with the remember and you know",
    "start": "2735039",
    "end": "2741869"
  },
  {
    "text": "who Alex it and who is responsible to deallocate it I'd really rather you",
    "start": "2741869",
    "end": "2747670"
  },
  {
    "start": "2745000",
    "end": "2823000"
  },
  {
    "text": "didn't share state a lot I used to say here I'd really rather you didn't use threads a lot but I changed my mind",
    "start": "2747670",
    "end": "2754299"
  },
  {
    "text": "because you can use threads and especially if you have some kind of",
    "start": "2754299",
    "end": "2759369"
  },
  {
    "text": "high-level API which is which is sort of like jobs but having threads that that",
    "start": "2759369",
    "end": "2766680"
  },
  {
    "text": "manipulate shared state is asking for trouble asking for for bugs that are",
    "start": "2766680",
    "end": "2773589"
  },
  {
    "text": "really really easy to trigger because again like you saw these vulnerabilities they're trying to manipulate your",
    "start": "2773589",
    "end": "2779440"
  },
  {
    "text": "program to do something bad and in this case they often do manipulations where",
    "start": "2779440",
    "end": "2785200"
  },
  {
    "text": "they are trying to introduce race conditions so that they can do something and this is about manipulating your",
    "start": "2785200",
    "end": "2791859"
  },
  {
    "text": "program sharing state is basically making the manipulations introducing a",
    "start": "2791859",
    "end": "2798460"
  },
  {
    "text": "lot of different ways that they can manipulate your program so that is my",
    "start": "2798460",
    "end": "2803950"
  },
  {
    "text": "last of my really rather you didn't so what should I remember from this presentation because this long",
    "start": "2803950",
    "end": "2811180"
  },
  {
    "text": "presentation and you might don't remember anything well I'd really rather",
    "start": "2811180",
    "end": "2816309"
  },
  {
    "text": "you didn't you see if you don't remember anything else and do that learn some",
    "start": "2816309",
    "end": "2824260"
  },
  {
    "start": "2823000",
    "end": "2846000"
  },
  {
    "text": "modern C++ and stuff because it is a beautiful language inside of C++ there",
    "start": "2824260",
    "end": "2831339"
  },
  {
    "text": "is an island of goodness and that is how",
    "start": "2831339",
    "end": "2836650"
  },
  {
    "text": "we like to program in C++ today so don't write C in C++ thank you",
    "start": "2836650",
    "end": "2848670"
  },
  {
    "text": "so are they any questions yes how would",
    "start": "2853430",
    "end": "2866609"
  },
  {
    "text": "I approach not writing clever code and code reviews I guess okay when I this is",
    "start": "2866609",
    "end": "2872930"
  },
  {
    "text": "says an analogy it's a nicer analogy",
    "start": "2872930",
    "end": "2878070"
  },
  {
    "text": "than the xkcd because when I wrote my",
    "start": "2878070",
    "end": "2883109"
  },
  {
    "text": "thesis I had two people reading my thesis and they had it on paper and they give it back to me on paper and if I had",
    "start": "2883109",
    "end": "2890190"
  },
  {
    "text": "a paragraph where they both corrected a lot both in the same paragraph and it",
    "start": "2890190",
    "end": "2895530"
  },
  {
    "text": "was a long thesis so there's like whole sections nobody touched but if they were all like writing a lot on one",
    "start": "2895530",
    "end": "2901140"
  },
  {
    "text": "that was a bad paragraph I I didn't even care about their Corrections I basically just said okay throw away that paragraph",
    "start": "2901140",
    "end": "2907590"
  },
  {
    "text": "we're gonna write that whole paragraph again so so if you see a lot of focus being paid to very small chunks it's",
    "start": "2907590",
    "end": "2916560"
  },
  {
    "text": "it's it's a it's a smell you don't really have to pay attention to the comments really because if there's a lot",
    "start": "2916560",
    "end": "2923640"
  },
  {
    "text": "of that then they're not really useful it's basically saying okay to take this out how can we write this in an easier",
    "start": "2923640",
    "end": "2929790"
  },
  {
    "text": "way because it's clear that people got stuck here trying to get it so does that",
    "start": "2929790",
    "end": "2935550"
  },
  {
    "text": "make sense",
    "start": "2935550",
    "end": "2937730"
  },
  {
    "text": "[Music] I think that's I think yeah oh yeah yes",
    "start": "2948130",
    "end": "2957210"
  },
  {
    "text": "yes so if you are the reviewer if you're the review or how would you how would",
    "start": "2957210",
    "end": "2963090"
  },
  {
    "text": "you try to communicate the fact that you fall I felt it is clever clever clever",
    "start": "2963090",
    "end": "2968880"
  },
  {
    "text": "here is not a really nice word is it okay maybe I should say clever because it sounds good no I I would say that that you found",
    "start": "2968880",
    "end": "2977760"
  },
  {
    "text": "because it's much easier to instead of saying you did something wrong you could say something about yourself instead so",
    "start": "2977760",
    "end": "2982800"
  },
  {
    "text": "you say I you know this section I found it really hard to understand and maybe",
    "start": "2982800",
    "end": "2987930"
  },
  {
    "text": "you can simplify it a little bit or something because I had trouble understanding what it did so basically",
    "start": "2987930",
    "end": "2994620"
  },
  {
    "text": "then you know the person can be think that you know yeah well he's not very bright but okay I can dumb it down for",
    "start": "2994620",
    "end": "3000800"
  },
  {
    "text": "him you know but at least you know offending anyone and you got your point",
    "start": "3000800",
    "end": "3006320"
  },
  {
    "text": "across right yeah yeah okay any more questions okay well thank you",
    "start": "3006320",
    "end": "3016300"
  },
  {
    "text": "there's that you should put green in the box of course and there's some as some of you velde stickers and pens over",
    "start": "3018340",
    "end": "3024440"
  },
  {
    "text": "there so I'll grab something thank you",
    "start": "3024440",
    "end": "3028119"
  }
]