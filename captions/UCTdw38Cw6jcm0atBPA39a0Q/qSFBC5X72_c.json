[
  {
    "text": "hi everybody uh welcome to my talk uh in",
    "start": "5600",
    "end": "10860"
  },
  {
    "text": "the this schedule I think it's got something really boring like refactoring components but one of my colleagues",
    "start": "10860",
    "end": "17340"
  },
  {
    "text": "pointed out to me that I was really missing out on the opportunity to name it something like getting on the refactor tractor so that's what we're",
    "start": "17340",
    "end": "23880"
  },
  {
    "text": "going with um my name's Aaron uh you can get me on Twitter at Aaron J Zimmer I work at Cash",
    "start": "23880",
    "end": "31800"
  },
  {
    "text": "app which you may not have heard of because the product isn't actually available in Australia but apparently",
    "start": "31800",
    "end": "37200"
  },
  {
    "text": "we're pretty big in the us where we provide banking services to people who aren't able to access the sort of",
    "start": "37200",
    "end": "42780"
  },
  {
    "text": "standard banking system in the US because apparently it's a bit more complicated over there than it is here",
    "start": "42780",
    "end": "48000"
  },
  {
    "text": "and we also offer banking services to regular people and we have a bunch of really cutting edge exciting features",
    "start": "48000",
    "end": "54120"
  },
  {
    "text": "like being able to buy and sell stock being able to buy and sell Bitcoin and being able to transfer money instantly",
    "start": "54120",
    "end": "61320"
  },
  {
    "text": "because apparently that's not a thing in the US um I am a Google developer expert",
    "start": "61320",
    "end": "67680"
  },
  {
    "text": "and I like to knit so if you see many talks here I'll probably be knitting is there any other Knitters",
    "start": "67680",
    "end": "74400"
  },
  {
    "text": "in the audience no oh man you are all you don't know what you're missing out on",
    "start": "74400",
    "end": "79619"
  },
  {
    "text": "um and if you would like to play along at home the slides are available at refactortractor.ez.com",
    "start": "79619",
    "end": "84960"
  },
  {
    "text": "Okay cool so what are we going to talk about today um we're going to talk about refactoring",
    "start": "85259",
    "end": "90540"
  },
  {
    "text": "funnily enough we're going to talk about what it is and when we should do it we're going to talk about how we can",
    "start": "90540",
    "end": "95820"
  },
  {
    "text": "make sure that we're doing it safely and we're going to look at some additional things we should think about with jsx",
    "start": "95820",
    "end": "102780"
  },
  {
    "text": "and we're gonna do a bunch of live coding examples because I like to live Dangerously",
    "start": "102780",
    "end": "109799"
  },
  {
    "text": "all right so let's start at the top what is refactoring so refactoring is when we change the implementation of our code",
    "start": "109799",
    "end": "116100"
  },
  {
    "text": "without changing the functionality right so we change how the code is written without changing what it does so we",
    "start": "116100",
    "end": "121979"
  },
  {
    "text": "might do things uh we might we might do this because we want the code to be easy to understand we want it to be easier to",
    "start": "121979",
    "end": "127320"
  },
  {
    "text": "test or because we want it to be easier to change later the kinds of things that we might do",
    "start": "127320",
    "end": "132900"
  },
  {
    "text": "while we're refactoring are things like renaming variables so perhaps the code has changed a bit then the variable",
    "start": "132900",
    "end": "139319"
  },
  {
    "text": "names are no longer really accurate we can update them to make the code a bit easier to understand or they might have typos in them we always need to fix that",
    "start": "139319",
    "end": "146580"
  },
  {
    "text": "right uh we might do things like splitting up a Long Function into smaller functions",
    "start": "146580",
    "end": "151860"
  },
  {
    "text": "right so if we have a long function that has lots of low level detail in it we can split that low level detail out into",
    "start": "151860",
    "end": "158099"
  },
  {
    "text": "other functions so we now have a short function with high level beta so this makes the code easier to understand and",
    "start": "158099",
    "end": "164220"
  },
  {
    "text": "it also makes it easier to test because we've got we can split things out and test all the different scenarios",
    "start": "164220",
    "end": "171180"
  },
  {
    "text": "we also might do things like factoring out repeated code so if we've got repeated code and we need to make a change then we need to make that change",
    "start": "171180",
    "end": "177420"
  },
  {
    "text": "in multiple places so we can Factor it out into a single place and then our code is easier to change in the future",
    "start": "177420",
    "end": "184700"
  },
  {
    "text": "um if you're interested in like the the deep down details of refactoring like this you should check out Martin",
    "start": "185700",
    "end": "190800"
  },
  {
    "text": "Fowler's book refactoring um he has like a whole list of different moves that you can make to refactor code",
    "start": "190800",
    "end": "197700"
  },
  {
    "text": "and like how to do them and when to do them and that kind of thing we're not going to go into that kind of level of detail today though",
    "start": "197700",
    "end": "203760"
  },
  {
    "text": "okay so we know what refactoring is we need to decide when we want to refactor",
    "start": "203760",
    "end": "209459"
  },
  {
    "text": "and the answer to that is when the benefits outweigh the costs which is obviously a complete cop-out answer",
    "start": "209459",
    "end": "215400"
  },
  {
    "text": "because that's when you do anything um so to think about that we need to",
    "start": "215400",
    "end": "220440"
  },
  {
    "text": "think about what are the benefits and the costs of refactoring so the benefits of refactoring the major benefit of",
    "start": "220440",
    "end": "226379"
  },
  {
    "text": "refactoring is that we can build stuff faster in the future right it makes the code easier to change easier to update",
    "start": "226379",
    "end": "232500"
  },
  {
    "text": "it's going to be easier to build a new feature in the future um the second is that we often end up",
    "start": "232500",
    "end": "239459"
  },
  {
    "text": "with less bugs right if we refactor the code so that it's easier to understand and easier to test then we usually end",
    "start": "239459",
    "end": "246239"
  },
  {
    "text": "up just putting less bugs in it and the third reason people often refactor",
    "start": "246239",
    "end": "251459"
  },
  {
    "text": "is that it's a lot of fun um I don't know about you but I really love getting in and cleaning off a code base",
    "start": "251459",
    "end": "256919"
  },
  {
    "text": "um so that's definitely factors in sometimes but it's important to remember that there are some costs associated",
    "start": "256919",
    "end": "262380"
  },
  {
    "text": "with this as well the biggest cost of refactoring is time so every hour that",
    "start": "262380",
    "end": "267419"
  },
  {
    "text": "we spend refactoring code so that it's nice is an hour that we're spending not",
    "start": "267419",
    "end": "272460"
  },
  {
    "text": "building a new feature and it turns out for some reason users don't really care what the code base looks like they're",
    "start": "272460",
    "end": "278040"
  },
  {
    "text": "mostly interested in features and not having bugs and trivial stuff like that",
    "start": "278040",
    "end": "284340"
  },
  {
    "text": "uh there's also some risks associated with refactoring so I found this delightful haiku on Twitter this is",
    "start": "284340",
    "end": "291600"
  },
  {
    "text": "another Aaron it's not me there are more than one of us um and she says this code used to work hey I should refactor it",
    "start": "291600",
    "end": "299220"
  },
  {
    "text": "now it does not work which I think is probably a sentiment that's pretty",
    "start": "299220",
    "end": "304380"
  },
  {
    "text": "relatable um obviously she posted this on Twitter so she got a bunch of men just replying",
    "start": "304380",
    "end": "309900"
  },
  {
    "text": "saying you should write some tests um but it's not always that easy right when you're working with Legacy code",
    "start": "309900",
    "end": "315960"
  },
  {
    "text": "it's not always obvious what the original intent was or what the code is supposed to be doing",
    "start": "315960",
    "end": "322020"
  },
  {
    "text": "and it's not even that right it's not even just the risk of putting bugs in the code there's also a risk of fixing",
    "start": "322020",
    "end": "327180"
  },
  {
    "text": "bugs by accident and that might not sound like a bad thing but if you've got bugs in your car that",
    "start": "327180",
    "end": "333120"
  },
  {
    "text": "have been there for a while and you've got users who have workarounds with those bugs then fixing them can be very",
    "start": "333120",
    "end": "339180"
  },
  {
    "text": "disruptive for them as an example I'm sure we are all well aware that last week was the end of life for Internet",
    "start": "339180",
    "end": "346680"
  },
  {
    "text": "Explorer um an Internet Explorer was a piece of",
    "start": "346680",
    "end": "353340"
  },
  {
    "text": "software that had a lot of bugs in it um and some of that was you know just because I don't know Microsoft didn't",
    "start": "353340",
    "end": "360479"
  },
  {
    "text": "want to put in the effort to fix it but a lot of it as well was that they'd put these bugs in people who built websites",
    "start": "360479",
    "end": "366180"
  },
  {
    "text": "relying on these bugs and if Microsoft went and fixed all the bugs in Internet Explorer then thousands of websites",
    "start": "366180",
    "end": "372180"
  },
  {
    "text": "around the world would break right so yeah when we're when we're refactoring code we have to be sure not",
    "start": "372180",
    "end": "377400"
  },
  {
    "text": "to change it both in terms of not putting bugs in and also not accidentally taking bugs out",
    "start": "377400",
    "end": "383100"
  },
  {
    "text": "uh as an example of some code that I did not refactor uh there's this I hate this",
    "start": "383100",
    "end": "389160"
  },
  {
    "text": "function this upsets me a lot right this is this should be one line there's no reason for all of this",
    "start": "389160",
    "end": "395220"
  },
  {
    "text": "um but this was in a a code base that I was I was working on last year and I",
    "start": "395220",
    "end": "400740"
  },
  {
    "text": "looked at it every day for like two months I scrolled past it and I hated it and I didn't refactor it because",
    "start": "400740",
    "end": "408419"
  },
  {
    "text": "it works right it works it's easy to understand um it would have been easy to test if",
    "start": "408419",
    "end": "414600"
  },
  {
    "text": "the person who wrote it had boiler direct tests for it um there's sort of nothing wrong with it",
    "start": "414600",
    "end": "419880"
  },
  {
    "text": "and I wasn't changing it so there was no value in in refactoring it so as far as I know this",
    "start": "419880",
    "end": "427020"
  },
  {
    "text": "this is still in the code base to this day but I don't have to look at it every day anymore",
    "start": "427020",
    "end": "432660"
  },
  {
    "text": "okay so my general rule of thumb for refactoring is that irony refractive code if",
    "start": "432660",
    "end": "438960"
  },
  {
    "text": "I'm about to make a change to it or I know someone else is about to make a change",
    "start": "438960",
    "end": "444720"
  },
  {
    "text": "and the reason for that is that if I'm about to make a change then I know that my refactoring is going to provide value",
    "start": "444720",
    "end": "450900"
  },
  {
    "text": "right it's not going to be a waste of time but also if my team is working on this",
    "start": "450900",
    "end": "456120"
  },
  {
    "text": "bit of code then there's eyes on the code right there's people who are solving problems in the same area there's people who know how this code is",
    "start": "456120",
    "end": "463199"
  },
  {
    "text": "supposed to behave there's people who are going to notice if it changes um other developers who are reading my PRS are going to have a better idea of",
    "start": "463199",
    "end": "469620"
  },
  {
    "text": "what it's supposed to be doing there's probably going to be designers and product people who are looking at the product as well maybe even testers if",
    "start": "469620",
    "end": "476400"
  },
  {
    "text": "you've got testers there's going to be you know people are going to be more likely to notice if something inadvertently changes and also we're",
    "start": "476400",
    "end": "483360"
  },
  {
    "text": "doing a change anyway so we can probably get away with some extra little changes if it happens",
    "start": "483360",
    "end": "489539"
  },
  {
    "text": "okay sir let's say we have decided that we're going to refactor some code our",
    "start": "489539",
    "end": "494580"
  },
  {
    "text": "code base is using moment.js which is a date time Library which you might be familiar with",
    "start": "494580",
    "end": "501300"
  },
  {
    "text": "um moment.js was like the cool date time Library several years ago but these days it's generally not",
    "start": "501300",
    "end": "508560"
  },
  {
    "text": "recommended to use it there's a lot more modern Alternatives and I for one I'm really sick about code base having bugs",
    "start": "508560",
    "end": "515159"
  },
  {
    "text": "in it because of the mutable date time so you get with moment.js so we've decided we're going to refactor",
    "start": "515159",
    "end": "521219"
  },
  {
    "text": "this is the function that we're going to refactor it's just basically taking a date and returning a formatted string",
    "start": "521219",
    "end": "527040"
  },
  {
    "text": "right so it's giving us a way to have consistently formatted date times throughout our whole code",
    "start": "527040",
    "end": "532140"
  },
  {
    "text": "base okay so what should we do we decided to do this refactor",
    "start": "532140",
    "end": "537540"
  },
  {
    "text": "um I like to follow sort of a three-step process the first is that we're going to use tests to determine the current",
    "start": "537540",
    "end": "544080"
  },
  {
    "text": "behavior then we're going to go and refactor the code and then we're going to go and do our",
    "start": "544080",
    "end": "550440"
  },
  {
    "text": "actual change now for this demo we're not going to do the change I'm sure you all know how to do a change in code and we'll just do the first two steps",
    "start": "550440",
    "end": "558240"
  },
  {
    "text": "all right so the first step is to write tests to determine the current behavior and the kind of tests that we can use to",
    "start": "558240",
    "end": "565019"
  },
  {
    "text": "do that are a special kind of test called characterization tests and characterization tests come from",
    "start": "565019",
    "end": "570839"
  },
  {
    "text": "this book working effectively with Legacy code by Michael C feathers if you",
    "start": "570839",
    "end": "576180"
  },
  {
    "text": "a if you are working with Legacy code and you would like to do it effectively I recommend having a look at this book",
    "start": "576180",
    "end": "581700"
  },
  {
    "text": "but for today we're just going to look at characterization tests so characterization tests",
    "start": "581700",
    "end": "587700"
  },
  {
    "text": "differ a bit from the normal test that you would write when you're building features so we're writing a test for a",
    "start": "587700",
    "end": "593940"
  },
  {
    "text": "feature first of all we write a test with some expectations and then we write some code that makes",
    "start": "593940",
    "end": "600120"
  },
  {
    "text": "the tests pass assuming you're doing tdd if you're not doing tdd I don't know I",
    "start": "600120",
    "end": "605519"
  },
  {
    "text": "assume you write some code that's wrong and then you write some tests and then you change your code until it's right I don't know what you're doing with your",
    "start": "605519",
    "end": "610680"
  },
  {
    "text": "life but that's your choice with characterization tests it's kind of the other way around",
    "start": "610680",
    "end": "616640"
  },
  {
    "text": "we start with a test with no expectations and then we change the test until the",
    "start": "616640",
    "end": "622320"
  },
  {
    "text": "test bosses so with feature tests the code changes but the test stays the same with",
    "start": "622320",
    "end": "627480"
  },
  {
    "text": "characterization tests the test changes but the code stays the same the important thing here is that we're only",
    "start": "627480",
    "end": "633779"
  },
  {
    "text": "ever changing one or the other right we're either changing the code or we're changing the tests we're never changing both at the same time",
    "start": "633779",
    "end": "640620"
  },
  {
    "text": "okay let's see what that looks like in practice",
    "start": "640620",
    "end": "645380"
  },
  {
    "text": "so here we have our format date function um that we're going to refactor",
    "start": "647519",
    "end": "654600"
  },
  {
    "text": "so we're going to start with writing a test",
    "start": "654600",
    "end": "658459"
  },
  {
    "text": "now we've got a few scenarios that we need to test here but the first thing that I always like to start with is the",
    "start": "662100",
    "end": "667440"
  },
  {
    "text": "most basic kind of input we can give it which is nothing",
    "start": "667440",
    "end": "672079"
  },
  {
    "text": "so when we pass in nothing",
    "start": "674160",
    "end": "678680"
  },
  {
    "text": "it now here we don't actually know what it's going to do so let's just put a",
    "start": "680880",
    "end": "686700"
  },
  {
    "text": "placeholder there um so we can write our test we're going",
    "start": "686700",
    "end": "692279"
  },
  {
    "text": "to expect format date and pass it nothing",
    "start": "692279",
    "end": "698660"
  },
  {
    "text": "to be and again we don't know",
    "start": "698880",
    "end": "703920"
  },
  {
    "text": "so we can run that test and we see that it fails which isn't surprising because it would be a bit",
    "start": "703920",
    "end": "709440"
  },
  {
    "text": "weird if our format Dave function returned question mark question mark um but we can see that what it actually",
    "start": "709440",
    "end": "714540"
  },
  {
    "text": "returns is an empty string so we can update our test here and we can update the description and we",
    "start": "714540",
    "end": "720420"
  },
  {
    "text": "can see it returns an empty string cool so we've got our first",
    "start": "720420",
    "end": "726240"
  },
  {
    "text": "characterization test which should now pass um then we have a couple more scenarios",
    "start": "726240",
    "end": "732000"
  },
  {
    "text": "that we need to write because we need to cover all of the kind of inputs that we can pass into that date Constructor",
    "start": "732000",
    "end": "738660"
  },
  {
    "text": "which is a date a string and or a number so when we",
    "start": "738660",
    "end": "744839"
  },
  {
    "text": "pass in a date",
    "start": "744839",
    "end": "749180"
  },
  {
    "text": "it's we don't know again",
    "start": "760640",
    "end": "766040"
  },
  {
    "text": "and we need to pass in a date now when I'm testing things like this I like to use a date that has",
    "start": "767760",
    "end": "775440"
  },
  {
    "text": "um the month and the year below 10 so we can see what it does with the padding so let's just go something really boring",
    "start": "775440",
    "end": "780839"
  },
  {
    "text": "first of January 2020. remember the first of January 2020 back when we thought the world was fine",
    "start": "780839",
    "end": "787500"
  },
  {
    "text": "um and we run that it fails because it turns out that it actually returns a formatted string",
    "start": "787500",
    "end": "794000"
  },
  {
    "text": "so we can stick that in there and we can see it returns a formatted date",
    "start": "795060",
    "end": "801120"
  },
  {
    "text": "okay so the next um scenario we need to test is strings so",
    "start": "801120",
    "end": "806579"
  },
  {
    "text": "we can say when we pass in a string it returns a formatted date it's I mean that's probably what's going to happen",
    "start": "806579",
    "end": "812459"
  },
  {
    "text": "I'm not going to go through the whole making it fail and then making it pass because it'll be boring so let's just",
    "start": "812459",
    "end": "818279"
  },
  {
    "text": "make that one pass but with strings there's a couple of edge cases that we need to test as well",
    "start": "818279",
    "end": "825800"
  },
  {
    "text": "so one is if we pass in a string that looks like a date but isn't really a date",
    "start": "825839",
    "end": "831779"
  },
  {
    "text": "I'm going to particle and invalid date",
    "start": "831779",
    "end": "838019"
  },
  {
    "text": "string um so something like if we passed in the 30th of February",
    "start": "838019",
    "end": "845180"
  },
  {
    "text": "then what's it going to return",
    "start": "845579",
    "end": "851300"
  },
  {
    "text": "um it turns out it converted into a valid date so that's fine we can grab that",
    "start": "851940",
    "end": "857959"
  },
  {
    "text": "oops no what are you doing",
    "start": "859680",
    "end": "866100"
  },
  {
    "text": "you know what I'll just type it myself",
    "start": "866100",
    "end": "870139"
  },
  {
    "text": "was it for three one okay it returns a formatted",
    "start": "871860",
    "end": "877760"
  },
  {
    "text": "um and the other thing we can do is pass in a string that just totally isn't a date at all",
    "start": "878700",
    "end": "884959"
  },
  {
    "text": "invalid string we don't know what it's going to do this",
    "start": "886139",
    "end": "891540"
  },
  {
    "text": "time and we're not going to pass it a date instead we're going to pass it Sultana",
    "start": "891540",
    "end": "900000"
  },
  {
    "text": "yeah okay and what's that one going to do",
    "start": "900000",
    "end": "907320"
  },
  {
    "text": "in this case it's going to return us this string invalidate so you can grab that",
    "start": "907320",
    "end": "912980"
  },
  {
    "text": "and we can see here it returns an error message",
    "start": "914579",
    "end": "921079"
  },
  {
    "text": "cool so that just leaves passing in a number um so we can do that",
    "start": "921300",
    "end": "928500"
  },
  {
    "text": "yeah now when we pass in a number to the date for to the date Constructor it",
    "start": "928500",
    "end": "934019"
  },
  {
    "text": "represents uh the number of milliseconds since midnight on the 1st of January 1970. so we can",
    "start": "934019",
    "end": "941339"
  },
  {
    "text": "convert this date here into a number by just going to get time",
    "start": "941339",
    "end": "947519"
  },
  {
    "text": "and it should just give us the formatted string and when we're testing with numbers though there's two edge cases",
    "start": "947519",
    "end": "955199"
  },
  {
    "text": "that I always like to check and one of them is if we pass in a negative number",
    "start": "955199",
    "end": "961279"
  },
  {
    "text": "in this case a negative number should represent a date before the first of January 1970 so we can just change this",
    "start": "961800",
    "end": "968639"
  },
  {
    "text": "to like 1960 most certainly not going to return this",
    "start": "968639",
    "end": "976100"
  },
  {
    "text": "and we get our fail and we get it from that formatted date",
    "start": "977699",
    "end": "983839"
  },
  {
    "text": "and the last one that I like to test is zero",
    "start": "984300",
    "end": "988760"
  },
  {
    "text": "in zero we're going to expect that it will",
    "start": "992399",
    "end": "997680"
  },
  {
    "text": "pass it will return a formatted date",
    "start": "997680",
    "end": "1002079"
  },
  {
    "text": "and let's see what that does turns out it fails but it doesn't return a formatted date it actually just returns empty string and the reason for this is",
    "start": "1008959",
    "end": "1016699"
  },
  {
    "text": "that in our function here we've got this little catch at the top which presumably is there to catch undefined or null or",
    "start": "1016699",
    "end": "1023720"
  },
  {
    "text": "empty string but because of the way that faulty values work in JavaScript it also catches zero",
    "start": "1023720",
    "end": "1030079"
  },
  {
    "text": "um and then returns empty string now this is a bug and it would be a bug that would be pretty easy to fix but we're",
    "start": "1030079",
    "end": "1036199"
  },
  {
    "text": "not going to fix it right we're here to refactor we don't want to change the behavior of the code instead we'll write a card and we can prioritize it later",
    "start": "1036199",
    "end": "1042199"
  },
  {
    "text": "and the reason for that is even in this like sort of minor case this formatting",
    "start": "1042199",
    "end": "1047720"
  },
  {
    "text": "function could be used across the code base all over the place and it's possible that someone else has been",
    "start": "1047720",
    "end": "1053000"
  },
  {
    "text": "using it and noticed the bug and written some code as a workaround for that and fixing the bug isn't going to break",
    "start": "1053000",
    "end": "1058940"
  },
  {
    "text": "their work around but it does going to make their work around stop making sense right it's going to be code that's just floating around there that doesn't do",
    "start": "1058940",
    "end": "1064340"
  },
  {
    "text": "anything and the next person who looks at it is going to be why have they done this um so it's a good idea if we are going to change the behavior of this to go and",
    "start": "1064340",
    "end": "1070640"
  },
  {
    "text": "check and make sure again for something this trivial maybe you wouldn't worry about it but the principle is there",
    "start": "1070640",
    "end": "1079400"
  },
  {
    "text": "okay so what we're going to do instead is we're just going to document it we're going to say when we pass in zero it returns an empty string an empty string",
    "start": "1079400",
    "end": "1088760"
  },
  {
    "text": "and we're going to update this okay and now we run our tests",
    "start": "1088760",
    "end": "1095000"
  },
  {
    "text": "they'll pass and that to me is enough tests for our characterization test you could argue that we could write some more tests that",
    "start": "1095000",
    "end": "1101480"
  },
  {
    "text": "we could cover some more cases so things like passing a null passing in a Boolean",
    "start": "1101480",
    "end": "1106880"
  },
  {
    "text": "value which would actually be interesting because if you're passing a Boolean if you pass in true it will return invalid date but if you passed in",
    "start": "1106880",
    "end": "1112640"
  },
  {
    "text": "false it would return empty string which is weird but not as weird as passing a Boolean into a formatting date function",
    "start": "1112640",
    "end": "1119240"
  },
  {
    "text": "um I personally wouldn't worry about writing those tests for two reasons the first is that if this was production",
    "start": "1119240",
    "end": "1124580"
  },
  {
    "text": "code I would use typescript and it would no longer be a problem and the second is that honestly if",
    "start": "1124580",
    "end": "1130580"
  },
  {
    "text": "people are passing bullions into date formatting functions in your code base you've got bigger problems to deal with",
    "start": "1130580",
    "end": "1137120"
  },
  {
    "text": "okay so now we've got our tests we're all happy we'll commit to git and we're ready to actually do our refactor so in",
    "start": "1137120",
    "end": "1144260"
  },
  {
    "text": "this case we're going to change moment we're going to replace it with the format function from the date functions Library",
    "start": "1144260",
    "end": "1151480"
  },
  {
    "text": "uh which is not that one it's that one and it takes a date just like this one",
    "start": "1151580",
    "end": "1158780"
  },
  {
    "text": "and a formatting string but because this is Javascript obviously the date functions people couldn't use the same",
    "start": "1158780",
    "end": "1164539"
  },
  {
    "text": "formatting strings as the moment people so we'll just update that one okay we can run all our tests again and",
    "start": "1164539",
    "end": "1170840"
  },
  {
    "text": "we can see they all pass except for one and the one that fails is the invalid",
    "start": "1170840",
    "end": "1176600"
  },
  {
    "text": "when we pass in the string that isn't a date at all and the date functions function actually throws an exception",
    "start": "1176600",
    "end": "1183200"
  },
  {
    "text": "which you could argue is the better behavior and I would probably agree with",
    "start": "1183200",
    "end": "1189200"
  },
  {
    "text": "you but again we're not here to change the behavior of this function we just want it to work exactly the same so we",
    "start": "1189200",
    "end": "1194780"
  },
  {
    "text": "can wrap this in a try catch",
    "start": "1194780",
    "end": "1198220"
  },
  {
    "text": "and we can just return invalid date",
    "start": "1204559",
    "end": "1210340"
  },
  {
    "text": "and all of our test pass so we've done our refactor and then we could go and and do whatever other changes we need to",
    "start": "1210740",
    "end": "1216500"
  },
  {
    "text": "do so are we all okay with that yeah cool um you might argue that writing like",
    "start": "1216500",
    "end": "1222020"
  },
  {
    "text": "eight tests to test four lines of code is kind of Overkill and yeah sometimes",
    "start": "1222020",
    "end": "1228200"
  },
  {
    "text": "it is if this was a date formatting function that was used in a single component and nowhere else in the code",
    "start": "1228200",
    "end": "1233720"
  },
  {
    "text": "base then I probably wouldn't write all of these tests for it I would probably just write the test for the things that I know can happen",
    "start": "1233720",
    "end": "1239780"
  },
  {
    "text": "but I recently actually did a change like this in our code base and the date formatting function that I I was",
    "start": "1239780",
    "end": "1245299"
  },
  {
    "text": "refactoring um was used in I think 600 different places in the code base and to me a tests for 600 different",
    "start": "1245299",
    "end": "1251840"
  },
  {
    "text": "usages seems okay um also like you saw how long that took right it was like four minutes or",
    "start": "1251840",
    "end": "1257360"
  },
  {
    "text": "something all right so oh we need to change back to slides that's not gonna work at all",
    "start": "1257360",
    "end": "1264440"
  },
  {
    "text": "nope Okay so we've done all of that we're all happy with how to write characterization",
    "start": "1264440",
    "end": "1269660"
  },
  {
    "text": "tests but how do we do it with jsx um imagine we've got this component here it's a user info component it's going to",
    "start": "1269660",
    "end": "1277160"
  },
  {
    "text": "take a user and it's going to print out their name and their date of birth it's using our date formatting form our",
    "start": "1277160",
    "end": "1282260"
  },
  {
    "text": "format date function and it's also going to print out the the day of the week right so it'll say Bob was born on the",
    "start": "1282260",
    "end": "1289280"
  },
  {
    "text": "1st of January 1980 Tuesday okay let's see how we do that",
    "start": "1289280",
    "end": "1296440"
  },
  {
    "text": "so we have our component here here and once again we can set up test",
    "start": "1299780",
    "end": "1309520"
  },
  {
    "text": "for and wait it's gonna it does something",
    "start": "1311780",
    "end": "1319539"
  },
  {
    "text": "we can render our components infer",
    "start": "1321200",
    "end": "1326659"
  },
  {
    "text": "and take a user who has a name and a",
    "start": "1326659",
    "end": "1334539"
  },
  {
    "text": "birthday birthday um which is going to be",
    "start": "1334940",
    "end": "1342620"
  },
  {
    "text": "1800 that's that's a long time ago okay first of January 1980 and we need",
    "start": "1342620",
    "end": "1348080"
  },
  {
    "text": "some clothes images on the end okay now when we render a component like",
    "start": "1348080",
    "end": "1354620"
  },
  {
    "text": "this we can actually get back a reference to the container that it lives in",
    "start": "1354620",
    "end": "1360520"
  },
  {
    "text": "so this is just sort of the the div that the testing Library renders the component inside",
    "start": "1360559",
    "end": "1366620"
  },
  {
    "text": "and then we can just run a test like we did before to see what's in the container so we can say expect",
    "start": "1366620",
    "end": "1371720"
  },
  {
    "text": "container to have text content and we don't know",
    "start": "1371720",
    "end": "1378380"
  },
  {
    "text": "and we run that test it's going to fail hopefully and instead of returning question mark question mark it actually",
    "start": "1378380",
    "end": "1384380"
  },
  {
    "text": "returns Bob was born on the first January 1980 on a Tuesday",
    "start": "1384380",
    "end": "1391120"
  },
  {
    "text": "okay so we can do that and we can say it's",
    "start": "1393559",
    "end": "1397900"
  },
  {
    "text": "renders the user's birthday or something okay so that works fine",
    "start": "1398659",
    "end": "1405320"
  },
  {
    "text": "um for this particular case but this is a very simple case right we're just rendering text content what would we do",
    "start": "1405320",
    "end": "1411620"
  },
  {
    "text": "if we had like buttons and radio buttons and we'll leave the other nice things that we like to put on web pages",
    "start": "1411620",
    "end": "1418100"
  },
  {
    "text": "in there as well um I mean we could go through and check for them all one by one but that is",
    "start": "1418100",
    "end": "1423980"
  },
  {
    "text": "going to be a bit of a pain especially when we don't really know what's supposed to be happening so instead we have another tool available to us and",
    "start": "1423980",
    "end": "1430280"
  },
  {
    "text": "that tool is Snapshot tests if you're not familiar with snapshot tests the way that they work is that",
    "start": "1430280",
    "end": "1435620"
  },
  {
    "text": "first you write a test and you run your test and the first time that you run your test it generates a snapshot and a",
    "start": "1435620",
    "end": "1441140"
  },
  {
    "text": "snapshot is a text representation of your component as it's rendered we'll have a look at one in a minute",
    "start": "1441140",
    "end": "1446419"
  },
  {
    "text": "then you go ahead and you make all your changes you do whatever you need to do and then you run your test again and",
    "start": "1446419",
    "end": "1451940"
  },
  {
    "text": "when you run the test again it generates a new snapshot and it compares the old snapshot with the new snapshot and it",
    "start": "1451940",
    "end": "1457460"
  },
  {
    "text": "tells you if anything has changed right so it's a really good way of finding out if we've changed stuff",
    "start": "1457460",
    "end": "1462500"
  },
  {
    "text": "all right so what does that look like",
    "start": "1462500",
    "end": "1466120"
  },
  {
    "text": "um it actually looks a lot like this so I'm going to copy and paste oh I don't need all of that just this one",
    "start": "1469220",
    "end": "1476500"
  },
  {
    "text": "so here instead of it rendering the specific thing we can just say it",
    "start": "1476960",
    "end": "1483400"
  },
  {
    "text": "the snapshot and instead of passing in this specific text content",
    "start": "1484100",
    "end": "1492620"
  },
  {
    "text": "we can just expect it to flat snapshot and then when we run our test",
    "start": "1492620",
    "end": "1500000"
  },
  {
    "text": "we get this little thing here that says one snapshot written and we can actually have a look at that snapshot we get this directory called",
    "start": "1500000",
    "end": "1506000"
  },
  {
    "text": "underscore underscore snapshots underscore underscore and inside that we have a file that's got the same name as",
    "start": "1506000",
    "end": "1511280"
  },
  {
    "text": "our test file we've got snap on the end and if we open it up we can see there's our component in all its Glory",
    "start": "1511280",
    "end": "1518320"
  },
  {
    "text": "rendered as is rendered in the test if we then jump back to our test say and",
    "start": "1518320",
    "end": "1524600"
  },
  {
    "text": "change something here um turns out actually Bob was born on the 2nd of January and we run the test again this time the",
    "start": "1524600",
    "end": "1531980"
  },
  {
    "text": "test is going to fail because the new snapshot no longer matches the old snapshot and it's going to tell us here that it was expecting the first of",
    "start": "1531980",
    "end": "1539299"
  },
  {
    "text": "January but actually we got the second of January and I was expecting Tuesday and actually it was Wednesday so we can",
    "start": "1539299",
    "end": "1544340"
  },
  {
    "text": "see everything that's changed between the two versions now we know that this has changed because we literally just",
    "start": "1544340",
    "end": "1549860"
  },
  {
    "text": "changed it in the test so we're kind of okay with it so down here you can see inspect your code or press U to update",
    "start": "1549860",
    "end": "1555860"
  },
  {
    "text": "the test you and if we go back now and look at our",
    "start": "1555860",
    "end": "1561559"
  },
  {
    "text": "snapshot we can see that it's updated from Tuesday to Wednesday from the first to the second and now this is what will",
    "start": "1561559",
    "end": "1568100"
  },
  {
    "text": "be used for future tests um so now we've got our snapshot test in",
    "start": "1568100",
    "end": "1573200"
  },
  {
    "text": "place we can go ahead and actually do our refractor which is very similar to the previous one",
    "start": "1573200",
    "end": "1581559"
  },
  {
    "text": "we're going to see format we're going to pass in oh actually we need to wrap this in a new date because moment takes",
    "start": "1581900",
    "end": "1588919"
  },
  {
    "text": "strings but format format date functions only takes",
    "start": "1588919",
    "end": "1594020"
  },
  {
    "text": "actual dates and again the formatting string is different because why would they be the same",
    "start": "1594020",
    "end": "1600860"
  },
  {
    "text": "um and then I'll test passes again so we've done our refactor okay cool",
    "start": "1600860",
    "end": "1607700"
  },
  {
    "text": "sir snapshot tests are super handy for things like this but they do have some limitations",
    "start": "1607700",
    "end": "1613400"
  },
  {
    "text": "um the first is that they don't provide as much information as your more sort of standard test so you can imagine we've",
    "start": "1613400",
    "end": "1618919"
  },
  {
    "text": "written this component called increments and we're testing it with the snapshot test on the left there so in our",
    "start": "1618919",
    "end": "1624260"
  },
  {
    "text": "snapshot test we render the component and then we expect it to match a snapshot then we press a button and we",
    "start": "1624260",
    "end": "1629960"
  },
  {
    "text": "expect it to match a snapshot there's not really any information about what's going on there whereas the second version of the test",
    "start": "1629960",
    "end": "1636640"
  },
  {
    "text": "we render the component and then we expect it to render the number four which happens to be the number we passed",
    "start": "1636640",
    "end": "1642799"
  },
  {
    "text": "in and then we click the button and we expect it to render the number five so we can see from this that we're clicking",
    "start": "1642799",
    "end": "1647900"
  },
  {
    "text": "the button and it's incrementing the number um there's a lot more information there um the second limitation of snapshot",
    "start": "1647900",
    "end": "1654500"
  },
  {
    "text": "tests is that they don't actually render everything that you might need",
    "start": "1654500",
    "end": "1659659"
  },
  {
    "text": "um so imagine we wrote this component called click Imaging clicking my jig renders a checkbox when you click the",
    "start": "1659659",
    "end": "1665539"
  },
  {
    "text": "check box it waits two seconds and then it unclicks the checkbox it's",
    "start": "1665539",
    "end": "1670820"
  },
  {
    "text": "probably very annoying you probably shouldn't ever do this but if you do you should write a test for it and you could",
    "start": "1670820",
    "end": "1677240"
  },
  {
    "text": "write a test like this using snapshot tests where we are going to turn on fake timers because we need to have that two",
    "start": "1677240",
    "end": "1683360"
  },
  {
    "text": "second delay we're going to render the component we're going to click the checkbox and then we're going to expect",
    "start": "1683360",
    "end": "1689299"
  },
  {
    "text": "it to match our snapshot then we're going to wait two seconds and we're going to expect it to match the snapshot again and this test will pass and this",
    "start": "1689299",
    "end": "1696380"
  },
  {
    "text": "does will pass even if you take out the wait for two seconds this test will pass even if you've removed almost everything out of the component there's not a lot",
    "start": "1696380",
    "end": "1702860"
  },
  {
    "text": "you can do to make this test fail and the reason for that is that when this renders the snapshot",
    "start": "1702860",
    "end": "1708200"
  },
  {
    "text": "it looks like this right so it's a snapshot that says there's an input and it's a type",
    "start": "1708200",
    "end": "1713600"
  },
  {
    "text": "checkbox it doesn't give you any information about whether that checkbox is checked or not so we're not actually testing the things that we think we're",
    "start": "1713600",
    "end": "1719900"
  },
  {
    "text": "testing there and the third limitation of snapshot test is that you can't do tdd with them",
    "start": "1719900",
    "end": "1726200"
  },
  {
    "text": "now you might say I hate tdd and fine don't do tdd um but and and you might also say it",
    "start": "1726200",
    "end": "1732620"
  },
  {
    "text": "doesn't matter where refactoring stuff we're not doing tdd and that's true but if we're refactoring stuff it's because",
    "start": "1732620",
    "end": "1737900"
  },
  {
    "text": "we're about to make a change right which means that we're going to start wanting to write tests and Snapchat tests just",
    "start": "1737900",
    "end": "1743299"
  },
  {
    "text": "aren't a really good base for writing our new tests on top of right because they don't have that Clarity they don't have that information",
    "start": "1743299",
    "end": "1749299"
  },
  {
    "text": "but they are really good in specific situations so snapshot tests are really great if you have a big component",
    "start": "1749299",
    "end": "1755299"
  },
  {
    "text": "there's a lot going on you don't want to write individual tests for every single thing because you maybe don't know what those all are as an example that",
    "start": "1755299",
    "end": "1763279"
  },
  {
    "text": "function that I showed you at the start that I didn't refactor that was in a component that was like 2 000 lines long",
    "start": "1763279",
    "end": "1770000"
  },
  {
    "text": "um my my team were working on it we're pulling stuff out into new components and stuff we don't want to write a test",
    "start": "1770000",
    "end": "1775940"
  },
  {
    "text": "for every single thing that can happen in that 2000 lines right so that was a really good use case for snapshot tests",
    "start": "1775940",
    "end": "1782059"
  },
  {
    "text": "um the other thing I find they're handy for is oh no you'll never know",
    "start": "1782059",
    "end": "1788980"
  },
  {
    "text": "uh the other thing I find them handy for is things that have got a lot of presentation logic so with that I mean",
    "start": "1790399",
    "end": "1795440"
  },
  {
    "text": "stuff like uh tables right I don't know if you've ever tried to write a test for a table using the testing Library you",
    "start": "1795440",
    "end": "1801500"
  },
  {
    "text": "end up writing stuff like I want to check the value on the third row in the fourth column and your tests are sort of",
    "start": "1801500",
    "end": "1807020"
  },
  {
    "text": "as opaque a snapshot test anyway and they're quite brittle because they're relying on numbers and stuff everywhere",
    "start": "1807020",
    "end": "1813080"
  },
  {
    "text": "so in those cases snapshot just have a lot of value and they don't really have any disadvantage so that's a good use",
    "start": "1813080",
    "end": "1818539"
  },
  {
    "text": "case for them all right so now we've gone through all that we've",
    "start": "1818539",
    "end": "1823640"
  },
  {
    "text": "got our tools ready let's have a look at a demo and we're going to have an app called The Old Farm Shop",
    "start": "1823640",
    "end": "1829940"
  },
  {
    "text": "now this is important this is what you need to remember this why in this this is pronounced",
    "start": "1829940",
    "end": "1835399"
  },
  {
    "text": "in Old English we had a bunch of of extra letters right 26 was not enough Old English had heaps of letters",
    "start": "1835399",
    "end": "1841880"
  },
  {
    "text": "including one called Thorn which was pronounced when the Dutch came along with their printing press they only had",
    "start": "1841880",
    "end": "1848659"
  },
  {
    "text": "26 letters and they're like you don't need all those extra letters just use th instead like we do",
    "start": "1848659",
    "end": "1854299"
  },
  {
    "text": "so we lost all these extra letters we had to only use the 26 that we have today but one of the things that",
    "start": "1854299",
    "end": "1859940"
  },
  {
    "text": "happened was that the letter Thorn actually looks a lot like a letter Y and so people kind of use the letter Y",
    "start": "1859940",
    "end": "1865039"
  },
  {
    "text": "instead and the important thing is that this doesn't say ye oldie farmy shop it says the older Pharma Shopper if you",
    "start": "1865039",
    "end": "1872539"
  },
  {
    "text": "remember one thing from this talk okay so the farm shop",
    "start": "1872539",
    "end": "1878000"
  },
  {
    "text": "uh we don't need that uh it looks like this we're selling farm",
    "start": "1878000",
    "end": "1883159"
  },
  {
    "text": "products unsurprisingly so you can buy some corn you can buy your corn as seeds or a seedlings and you can see that um",
    "start": "1883159",
    "end": "1891380"
  },
  {
    "text": "as you choose the different types you get a subtotal down here",
    "start": "1891380",
    "end": "1897020"
  },
  {
    "text": "and you also get your postage calculated for seed packets the postage is a flat",
    "start": "1897020",
    "end": "1902179"
  },
  {
    "text": "eight dollars no matter how many you buy for seedlings the postage depends on how",
    "start": "1902179",
    "end": "1908120"
  },
  {
    "text": "many seedlings you buy the postage is also calculated via a separate service that we we have to call asynchronously",
    "start": "1908120",
    "end": "1914840"
  },
  {
    "text": "all right so we have some new requirements for our farm shop and the",
    "start": "1914840",
    "end": "1920360"
  },
  {
    "text": "requirement is that we want to start selling a new product type which is a full grown plant right this is for",
    "start": "1920360",
    "end": "1925399"
  },
  {
    "text": "people who are like I really want to have homegrown corn but I don't want to go through all the effort of like growing corn so I'm just going to buy",
    "start": "1925399",
    "end": "1932000"
  },
  {
    "text": "like a whole corn plant I have no idea if that's how corn works but it seems fine",
    "start": "1932000",
    "end": "1938799"
  },
  {
    "text": "um so we need to show you the radio button that says plant we need to show a new unit and uh price and we need to",
    "start": "1938899",
    "end": "1946460"
  },
  {
    "text": "show a new amount for postage all right so this is what it's going to end up looking like now if we would",
    "start": "1946460",
    "end": "1952940"
  },
  {
    "text": "implement this we could just implement it in the order that we're given there but that's not how I would do it and the",
    "start": "1952940",
    "end": "1958039"
  },
  {
    "text": "reason for that is that if we start with the radio button and Implement that first we've got to do the whole lot in one go right whereas if we start with",
    "start": "1958039",
    "end": "1965240"
  },
  {
    "text": "making sure that the label can handle plants then we can just write the code that manages the label we can merge that",
    "start": "1965240",
    "end": "1971419"
  },
  {
    "text": "we can deploy it to production and it's fine it doesn't matter so we can break this into small pieces and then we do",
    "start": "1971419",
    "end": "1977179"
  },
  {
    "text": "the radio button last and it acts kind of like a feature toggle um that means that we can break our thing",
    "start": "1977179",
    "end": "1983059"
  },
  {
    "text": "our change up into smaller pieces um you could argue that this is such a small change that who cares it doesn't",
    "start": "1983059",
    "end": "1989179"
  },
  {
    "text": "make any difference and you might have a point but I'm the one with the keyboard so we're doing it my way",
    "start": "1989179",
    "end": "1995380"
  },
  {
    "text": "all right so this is our component that renders the",
    "start": "1996080",
    "end": "2001600"
  },
  {
    "text": "the page there's a lot of stuff going on we're not going to look into all of it but this here is the part that renders",
    "start": "2001600",
    "end": "2009159"
  },
  {
    "text": "the actual label right you can see there's a lot of repeated code there um there's a bunch of stuff that's",
    "start": "2009159",
    "end": "2014980"
  },
  {
    "text": "hard-coded that probably doesn't need to be and typescript is mad for some reason",
    "start": "2014980",
    "end": "2020080"
  },
  {
    "text": "about count so to me this says that this code could be refactored right we could pull this",
    "start": "2020080",
    "end": "2025360"
  },
  {
    "text": "out into its own component write some tests around it it'd be way nicer so we're going to do that but of course",
    "start": "2025360",
    "end": "2031539"
  },
  {
    "text": "we're not just going to start changing things without any tests we're going to write some characterization tests first",
    "start": "2031539",
    "end": "2037620"
  },
  {
    "text": "so let's create a",
    "start": "2037899",
    "end": "2043440"
  },
  {
    "text": "test so we're going to test the product components",
    "start": "2045580",
    "end": "2051599"
  },
  {
    "text": "now there's four scenarios that we need to test one is with seeds seed packets selected with no amount entered seed",
    "start": "2051760",
    "end": "2058300"
  },
  {
    "text": "pack is selected with an amount seedling selected with no amount and seedlings with an amount and there's basically all",
    "start": "2058300",
    "end": "2064960"
  },
  {
    "text": "of the things that can happen on the screen and for this because we've got a big",
    "start": "2064960",
    "end": "2071618"
  },
  {
    "text": "component there's a lot of stuff going on this to me is a really good use case for snapshot tests so we're going to do snapshot tests",
    "start": "2071619",
    "end": "2078040"
  },
  {
    "text": "so uh no what do I need it let's start with the describe",
    "start": "2078040",
    "end": "2083760"
  },
  {
    "text": "okay so describe when seed packets is selected and no",
    "start": "2084700",
    "end": "2091960"
  },
  {
    "text": "amount is uh is entered",
    "start": "2091960",
    "end": "2098040"
  },
  {
    "text": "it matches the snapshot",
    "start": "2099460",
    "end": "2104640"
  },
  {
    "text": "okay so we're going to grab a reference to the container",
    "start": "2107140",
    "end": "2111900"
  },
  {
    "text": "we're going to render our components",
    "start": "2112480",
    "end": "2116220"
  },
  {
    "text": "a prop of product which is just the name of the product",
    "start": "2119260",
    "end": "2124560"
  },
  {
    "text": "import that from there and we want to select the radio button",
    "start": "2126660",
    "end": "2134200"
  },
  {
    "text": "so seed packets equals",
    "start": "2134200",
    "end": "2139920"
  },
  {
    "text": "get by row it's a radio button so we roll this radio there's a couple of radio buttons on the screen though so we",
    "start": "2140380",
    "end": "2146260"
  },
  {
    "text": "need to give it a name as well",
    "start": "2146260",
    "end": "2149579"
  },
  {
    "text": "and then we can just click that",
    "start": "2151660",
    "end": "2155099"
  },
  {
    "text": "double click just one click",
    "start": "2159400",
    "end": "2162779"
  },
  {
    "text": "uh seed packets and then we can expect the container",
    "start": "2164440",
    "end": "2171460"
  },
  {
    "text": "too much the snapshot um it's just mad about screen there",
    "start": "2171460",
    "end": "2178060"
  },
  {
    "text": "there's a like a global variable called screen that vs code thinks that is and",
    "start": "2178060",
    "end": "2184180"
  },
  {
    "text": "it's not um so then if we run this we have our snapshot written so that's",
    "start": "2184180",
    "end": "2190660"
  },
  {
    "text": "nice okay so we need another one of those for when we enter an amount",
    "start": "2190660",
    "end": "2197640"
  },
  {
    "text": "and amount is entered um we're going to",
    "start": "2197980",
    "end": "2204900"
  },
  {
    "text": "grab the amount input the amount input is an input of type",
    "start": "2205000",
    "end": "2210400"
  },
  {
    "text": "number so obviously the Aria rule is spin button because who even knows",
    "start": "2210400",
    "end": "2219779"
  },
  {
    "text": "amount input and we're going to grab four of them all right and now we can expect that to match the snapshot",
    "start": "2220660",
    "end": "2227800"
  },
  {
    "text": "cool and then we can do the whole thing again for seedlings",
    "start": "2227800",
    "end": "2234480"
  },
  {
    "text": "change this to seedlings",
    "start": "2237760",
    "end": "2242400"
  },
  {
    "text": "no",
    "start": "2244119",
    "end": "2246480"
  },
  {
    "text": "and the same down here",
    "start": "2252940",
    "end": "2256740"
  },
  {
    "text": "oh I should have just renamed it shouldn't I oh I use um",
    "start": "2260619",
    "end": "2267160"
  },
  {
    "text": "IntelliJ at work all the time so I've forgotten all the vs code shortcuts um okay",
    "start": "2267160",
    "end": "2273400"
  },
  {
    "text": "so we run that we get all of our snapshots written everything's good to",
    "start": "2273400",
    "end": "2278500"
  },
  {
    "text": "go except if we scroll up here we get this warning that says an update to product inside a test was not wrapped in",
    "start": "2278500",
    "end": "2285099"
  },
  {
    "text": "Act and the reason that this is happening is if we look at our product here when we change the amount",
    "start": "2285099",
    "end": "2292720"
  },
  {
    "text": "uh it fires off this handle function which or this use effect which uh fires",
    "start": "2292720",
    "end": "2299200"
  },
  {
    "text": "off this calculate postage function calculate postage function the product type is C packets it just returns",
    "start": "2299200",
    "end": "2305079"
  },
  {
    "text": "immediately because C packets have got a hard-coded postage amount when the amount is zero it just returns zero but",
    "start": "2305079",
    "end": "2312339"
  },
  {
    "text": "when the seedlings is selected with an amount it needs to go off and fetch the",
    "start": "2312339",
    "end": "2318040"
  },
  {
    "text": "postage from another service so our test runs we change the amount this gets",
    "start": "2318040",
    "end": "2323320"
  },
  {
    "text": "fired off then the test finishes and then this returns and then the state inside the component updates so the",
    "start": "2323320",
    "end": "2330099"
  },
  {
    "text": "component state is updating after the test is finished and react is kind of gone that's probably not what you",
    "start": "2330099",
    "end": "2335140"
  },
  {
    "text": "intended and it's absolutely right that is not what we intended so thank you react or testing Library",
    "start": "2335140",
    "end": "2340359"
  },
  {
    "text": "whoever it is that came up with this error warning so the way that we can fix that is that",
    "start": "2340359",
    "end": "2346720"
  },
  {
    "text": "we can just make sure that we wait for the postage to be updated before we let",
    "start": "2346720",
    "end": "2352060"
  },
  {
    "text": "the test finish so we can grab a reference to the postage",
    "start": "2352060",
    "end": "2357900"
  },
  {
    "text": "um it says something like postage and we can wait",
    "start": "2360940",
    "end": "2368020"
  },
  {
    "text": "wait for expect prestige",
    "start": "2368020",
    "end": "2375460"
  },
  {
    "text": "to have text content",
    "start": "2375520",
    "end": "2381220"
  },
  {
    "text": "and it's going to be I think stage equals",
    "start": "2381220",
    "end": "2387520"
  },
  {
    "text": "32 dollars okay so now when we run this",
    "start": "2387520",
    "end": "2392980"
  },
  {
    "text": "um it fails oh no oh because we've made this uh we've got",
    "start": "2392980",
    "end": "2398980"
  },
  {
    "text": "no weight now this needs to be async all right so now when that runs",
    "start": "2398980",
    "end": "2405820"
  },
  {
    "text": "um the snapshot doesn't match anymore but the reason it doesn't match anymore is because previously the postage was Zero because it hadn't returned yet and",
    "start": "2405820",
    "end": "2412599"
  },
  {
    "text": "now we've actually got the postage value and because we've got the posted value the actual amount has updated right so",
    "start": "2412599",
    "end": "2418240"
  },
  {
    "text": "we've waited for that update and now we're okay um cool so now that we've done that",
    "start": "2418240",
    "end": "2423820"
  },
  {
    "text": "we're ready to actually do our refactor so if we jump back in here I'm going to",
    "start": "2423820",
    "end": "2429339"
  },
  {
    "text": "pull out this this label into its own component I'm going to start I'm just going to do",
    "start": "2429339",
    "end": "2434440"
  },
  {
    "text": "it in the same file just because it's going to be easier for copying and pasting but you can do it in a separate",
    "start": "2434440",
    "end": "2439839"
  },
  {
    "text": "file if that's how you like to roll and I'm just going to grab all of this",
    "start": "2439839",
    "end": "2447960"
  },
  {
    "text": "whoever put the page down key right next to the arrow key like that it's clearly has skinnier fingers than I do",
    "start": "2448359",
    "end": "2456720"
  },
  {
    "text": "um we can Chuck that in here now there's a couple of problems here um like we need access to this product type so",
    "start": "2457000",
    "end": "2462400"
  },
  {
    "text": "let's pass that in and count as well so we'll pass both of",
    "start": "2462400",
    "end": "2468339"
  },
  {
    "text": "those in now we look at this this code is just like a repeating block with sort of a bit of hard-coded",
    "start": "2468339",
    "end": "2473800"
  },
  {
    "text": "um name in here so I reckon we can get rid of that hard coding for a start by pulling the names out here",
    "start": "2473800",
    "end": "2481859"
  },
  {
    "text": "it's gonna be seed packets and seedlings there's going to be",
    "start": "2484300",
    "end": "2490240"
  },
  {
    "text": "seedlings so now instead of having this we can have",
    "start": "2490240",
    "end": "2496000"
  },
  {
    "text": "names",
    "start": "2496000",
    "end": "2498660"
  },
  {
    "text": "product type and the same here instead of having price and Seed Pockets Hot created",
    "start": "2501280",
    "end": "2506800"
  },
  {
    "text": "we can have product type and down here as well so now we don't need the two labels",
    "start": "2506800",
    "end": "2513220"
  },
  {
    "text": "right we can just have one so",
    "start": "2513220",
    "end": "2516838"
  },
  {
    "text": "and that back up there a little audio form out for us",
    "start": "2523000",
    "end": "2528099"
  },
  {
    "text": "cool so now our label component is nice and refactored and we can stick it in",
    "start": "2528099",
    "end": "2533500"
  },
  {
    "text": "here and use it and we need to pass in the product type",
    "start": "2533500",
    "end": "2541619"
  },
  {
    "text": "come on autocomplete letting me down",
    "start": "2543280",
    "end": "2547740"
  },
  {
    "text": "and we can get rid of all of this isn't that nice okay so now when we run our test we'll",
    "start": "2551800",
    "end": "2557320"
  },
  {
    "text": "see that our snapshot failed uh oh because we didn't update it before Oh no how embarrassing okay so now uh",
    "start": "2557320",
    "end": "2565180"
  },
  {
    "text": "We've updated it and everything is okay um there is sort of one thing here though",
    "start": "2565180",
    "end": "2571180"
  },
  {
    "text": "that we've missed a dependency between our our components is that this html4 4",
    "start": "2571180",
    "end": "2576880"
  },
  {
    "text": "value here needs to match the ID on this input there's a couple ways we could",
    "start": "2576880",
    "end": "2582579"
  },
  {
    "text": "handle that we could pass in like an ID prop into the label that we could use and we could just assume that we're",
    "start": "2582579",
    "end": "2588460"
  },
  {
    "text": "going to do it right but what I would do is just sort of accept that these two components are very tightly coupled and",
    "start": "2588460",
    "end": "2594700"
  },
  {
    "text": "just make them one component so I would instead of this being a label component",
    "start": "2594700",
    "end": "2600540"
  },
  {
    "text": "it's going to be a number input component instead of just a label it's also going",
    "start": "2600540",
    "end": "2608020"
  },
  {
    "text": "to have all of this so that can all go in there",
    "start": "2608020",
    "end": "2615099"
  },
  {
    "text": "now we need something wrapping this and you could use a fragment but the actual",
    "start": "2615099",
    "end": "2621520"
  },
  {
    "text": "original thing is using a div so I'm going to use a div that's all going to work there and then",
    "start": "2621520",
    "end": "2628839"
  },
  {
    "text": "we just need to pass in this handle count change handle count change is kind of a weird name for a prop so I'm just",
    "start": "2628839",
    "end": "2634540"
  },
  {
    "text": "going to call it on change because that's what you would call it normally and we can call it one change down there",
    "start": "2634540",
    "end": "2641740"
  },
  {
    "text": "so now if we jump up to our component we can change this to number input",
    "start": "2641740",
    "end": "2646900"
  },
  {
    "text": "we just need to pass in on change",
    "start": "2646900",
    "end": "2652020"
  },
  {
    "text": "and then we can delete this div and all of this",
    "start": "2653740",
    "end": "2660480"
  },
  {
    "text": "and we run our tests we can see that everything still passes our refactor is all good",
    "start": "2660640",
    "end": "2666640"
  },
  {
    "text": "um so now we've refactor it we're actually ready to start making a change now we could just jump in and make the",
    "start": "2666640",
    "end": "2673660"
  },
  {
    "text": "change but again like I said earlier I don't like snapshot tests for doing tdd but I do like to do tdd so in this case",
    "start": "2673660",
    "end": "2679960"
  },
  {
    "text": "I would spend a bit of time going back and writing tests actually for this component um for the new number input component",
    "start": "2679960",
    "end": "2686619"
  },
  {
    "text": "even if you don't like to do tdd I would still suggest writing extra tests because",
    "start": "2686619",
    "end": "2691960"
  },
  {
    "text": "at the moment this component doesn't have any of its own tests it's just relying on the parent components tests",
    "start": "2691960",
    "end": "2697180"
  },
  {
    "text": "and that to me is a bit weird bit untidy the test that we would write are almost",
    "start": "2697180",
    "end": "2702460"
  },
  {
    "text": "identical to the test that we wrote before so I'll save you all the hassle of watching me write them all again here's some I prepared earlier",
    "start": "2702460",
    "end": "2709720"
  },
  {
    "text": "well you can see they're the same the same scenarios so when we've got seed packets and there's no number when",
    "start": "2709720",
    "end": "2716319"
  },
  {
    "text": "there's seeds there's a number all of the different four scenarios except this time we have explicit values in here",
    "start": "2716319",
    "end": "2721780"
  },
  {
    "text": "right we are expecting the label to see this explicit thing um and we also have an additional",
    "start": "2721780",
    "end": "2729160"
  },
  {
    "text": "uh test up here just to check that it calls the on change Handler because that's a little integration that we have",
    "start": "2729160",
    "end": "2734560"
  },
  {
    "text": "to handle now um it doesn't like that because we didn't export the function",
    "start": "2734560",
    "end": "2743400"
  },
  {
    "text": "all right so now we export that function all of those tests will pass you might argue that that's a bit of a",
    "start": "2745180",
    "end": "2751060"
  },
  {
    "text": "waste of time writing tests for things that we already have tests for and again if you don't have the time then don't do",
    "start": "2751060",
    "end": "2757000"
  },
  {
    "text": "it but I timed myself writing those tests and it took four minutes so I don't know how busy you are but I would",
    "start": "2757000",
    "end": "2763420"
  },
  {
    "text": "take the time to write the test and now we can write the tests for our new functionality",
    "start": "2763420",
    "end": "2770640"
  },
  {
    "text": "so again we can just grab um the scenarios we have here",
    "start": "2771880",
    "end": "2778980"
  },
  {
    "text": "and we can say when the product type is plants and no amount is entered",
    "start": "2780819",
    "end": "2786579"
  },
  {
    "text": "we can pass in type of plants number of plants and if you remember the unit price for a plant was 15 so we can put",
    "start": "2786579",
    "end": "2793599"
  },
  {
    "text": "that in there and when we have an amount",
    "start": "2793599",
    "end": "2799720"
  },
  {
    "text": "then it's going to be 15 and as everybody knows 15 times 12 is of course",
    "start": "2799720",
    "end": "2805599"
  },
  {
    "text": "180 and now we have two failing tests",
    "start": "2805599",
    "end": "2811359"
  },
  {
    "text": "because we haven't done we haven't actually done the implementation for them so now finally we are actually ready to",
    "start": "2811359",
    "end": "2817900"
  },
  {
    "text": "write our implementation and to be honest it's a little bit of an anti-climax because we've done all this work to refactor our code the actual",
    "start": "2817900",
    "end": "2824740"
  },
  {
    "text": "code that we need to write to make our Feature work now is pretty minimal",
    "start": "2824740",
    "end": "2829839"
  },
  {
    "text": "we need to add add our clients to our names object here",
    "start": "2829839",
    "end": "2835060"
  },
  {
    "text": "and we need to add it to our prices object here",
    "start": "2835060",
    "end": "2840220"
  },
  {
    "text": "and then we can run our tests and one of them still fails",
    "start": "2840220",
    "end": "2845940"
  },
  {
    "text": "who can tell the difference oh I still says seedlings uh yeah because this actually should say",
    "start": "2846819",
    "end": "2853300"
  },
  {
    "text": "plots okay and now we have all of our tests passing so we've uh because we spent",
    "start": "2853300",
    "end": "2860020"
  },
  {
    "text": "that little bit of extra time to do that refactor we've made our actual change very simple and because we spend the",
    "start": "2860020",
    "end": "2865300"
  },
  {
    "text": "time writing the test we can be highly confident that this is all going to work as expected",
    "start": "2865300",
    "end": "2871300"
  },
  {
    "text": "all right so uh we don't have time to go through the rest of the changes today but hopefully that's enough to see uh",
    "start": "2871300",
    "end": "2877720"
  },
  {
    "text": "what what we um well the steps that we need to take to get through them",
    "start": "2877720",
    "end": "2883300"
  },
  {
    "text": "okay so what did we learn today we've learned how to decide if we should",
    "start": "2883300",
    "end": "2889780"
  },
  {
    "text": "refactor or not um we learned how to use characterization tests to make sure our",
    "start": "2889780",
    "end": "2894940"
  },
  {
    "text": "refactors are safe we learned how to use Snapshot tests to write characterization tests for jsx and",
    "start": "2894940",
    "end": "2901180"
  },
  {
    "text": "most importantly of all we learned that this y e says the",
    "start": "2901180",
    "end": "2906339"
  },
  {
    "text": "and that's what a thorn actually looks like in some fonts all right sir uh if you wanted to have a",
    "start": "2906339",
    "end": "2912880"
  },
  {
    "text": "look at the slides again that refactor tractor.easide.codes and the code examples are all up in GitHub and",
    "start": "2912880",
    "end": "2918160"
  },
  {
    "text": "there's a completed version as well if you would like to argue with me about this or anything else I'm on Twitter at",
    "start": "2918160",
    "end": "2925119"
  },
  {
    "text": "Aaron J Zimmer and finally we are hiring at catch up so we're looking for",
    "start": "2925119",
    "end": "2930880"
  },
  {
    "text": "engineers across all levels in Australia we're mostly looking for back-end and full stack Engineers it's a fantastic",
    "start": "2930880",
    "end": "2937000"
  },
  {
    "text": "company to work at um really interesting product a heaps of really great perks and",
    "start": "2937000",
    "end": "2943420"
  },
  {
    "text": "honestly the nicest bunch of people I've ever worked with I've never worked at such a big company that cares so much",
    "start": "2943420",
    "end": "2948579"
  },
  {
    "text": "about its people before if you're interested have a chat with me or you can hit our sub on careers and that",
    "start": "2948579",
    "end": "2954520"
  },
  {
    "text": "eyeball is in a disturbing number of places but apparently it's a thing",
    "start": "2954520",
    "end": "2959980"
  },
  {
    "text": "um I'm sorry and that's all I have today sir thank you very much",
    "start": "2959980",
    "end": "2965460"
  }
]