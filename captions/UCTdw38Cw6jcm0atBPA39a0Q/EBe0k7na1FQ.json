[
  {
    "start": "0",
    "end": "365000"
  },
  {
    "text": "let's just jump straight in uh who has not heard this saying",
    "start": "5560",
    "end": "12480"
  },
  {
    "text": "before nobody excellent that's what I expected um who said it like who's doled",
    "start": "12480",
    "end": "21560"
  },
  {
    "text": "it out on a pool request maybe sorry Donald n ah Donald Donald n did say it",
    "start": "21560",
    "end": "26920"
  },
  {
    "text": "originally that's very good um who said it the M themselves who's who's left this comment on a pool request or uh you",
    "start": "26920",
    "end": "34680"
  },
  {
    "text": "know replied to someone no one excellent uh who's heard it being said to",
    "start": "34680",
    "end": "41320"
  },
  {
    "text": "them few more hands now the big question who agrees with",
    "start": "41320",
    "end": "47840"
  },
  {
    "text": "it okay we have some people excellent so I think this uh little eight word",
    "start": "48360",
    "end": "57399"
  },
  {
    "text": "sentence eight yes eight eight words um it kind of gets a bad rap uh and I think",
    "start": "57399",
    "end": "63199"
  },
  {
    "text": "a lot of people maybe don't agree with it or think it's a bad thing that it's",
    "start": "63199",
    "end": "70119"
  },
  {
    "text": "kind of gotten so such notoriety or popularity um I kind of do agree with",
    "start": "70119",
    "end": "77320"
  },
  {
    "text": "what Donald nth is trying to say but I think that he's sort of misre",
    "start": "77320",
    "end": "83799"
  },
  {
    "text": "misrepresented so the way that this has been um said to me in the past uh",
    "start": "83799",
    "end": "90720"
  },
  {
    "text": "would be for example uh if there's a pull request and someone has written let's say there's a a bunch of",
    "start": "90720",
    "end": "97680"
  },
  {
    "text": "Link statements a bunch of Link queries they're all doing some filtering or some grouping or something and you call to",
    "start": "97680",
    "end": "103720"
  },
  {
    "text": "list and then you filter some more and you call to list again Etc um I'm the type of person who would come in and say",
    "start": "103720",
    "end": "110240"
  },
  {
    "text": "Hey you know maybe a for reach Loop would be more efficient even though yes",
    "start": "110240",
    "end": "116039"
  },
  {
    "text": "it would be longer or it would be uh multiple lines of code instead of one line of code or whatever but you know be more efficient and what I've found can",
    "start": "116039",
    "end": "124360"
  },
  {
    "text": "happen is people will say well yeah but premature optimization is the root of all evil let's leave it and see what",
    "start": "124360",
    "end": "129800"
  },
  {
    "text": "happens and I think that use of it is not good because you're kind of saying",
    "start": "129800",
    "end": "136319"
  },
  {
    "text": "let's let the users find the bugs which is not very nice um it's kind of saying",
    "start": "136319",
    "end": "142000"
  },
  {
    "text": "I'm lazy but I want to sound smart about being lazy um not saying that's how you guys said it but um but the thing is I",
    "start": "142000",
    "end": "149400"
  },
  {
    "text": "think it's representing what Donal nth meant and the reason I think this",
    "start": "149400",
    "end": "154640"
  },
  {
    "text": "is so this little eight word thing it's it's not even a sentence right it's not",
    "start": "154640",
    "end": "160280"
  },
  {
    "text": "a complete sentence it's a fragment uh as Microsoft Word would say um and if you take it in context of the",
    "start": "160280",
    "end": "167440"
  },
  {
    "text": "surrounding words I think it adds more meaning and the thing that is um",
    "start": "167440",
    "end": "172720"
  },
  {
    "text": "unfortunate I guess is that surrounding context has basically basically been lost to time right everyone just dos out",
    "start": "172720",
    "end": "179120"
  },
  {
    "text": "these eight words and doesn't think about it but um it turns out it's part of a larger",
    "start": "179120",
    "end": "185959"
  },
  {
    "text": "quote so the rest of the sentence and the one afterwards goes we should forget about",
    "start": "185959",
    "end": "192519"
  },
  {
    "text": "small efficiencies about 97% of the time premat optimization yet we",
    "start": "192519",
    "end": "198879"
  },
  {
    "text": "shouldn't pass up our opportunities in that critical 3% and to me this kind of turns on its head what most people sort",
    "start": "198879",
    "end": "207400"
  },
  {
    "text": "of use this saying to mean um Donald newth is saying that sometimes it's",
    "start": "207400",
    "end": "213720"
  },
  {
    "text": "absolutely critical to think about performance and to prematurely optimize",
    "start": "213720",
    "end": "219319"
  },
  {
    "text": "um and if you take some poetic license and maybe assume that the 97% and 3%",
    "start": "219319",
    "end": "225760"
  },
  {
    "text": "figures are kind of plucked from thin air and not the result of exhaustive user studies um you know he's sort of",
    "start": "225760",
    "end": "234079"
  },
  {
    "text": "saying sometimes performance and performance tuning and all that sort of thing is good",
    "start": "234079",
    "end": "240799"
  },
  {
    "text": "um turns out I do know how to format text in PowerPoint and there's even more to this",
    "start": "240799",
    "end": "247920"
  },
  {
    "text": "um to to to kind to get the the full picture here programmers waste enormous",
    "start": "247920",
    "end": "253599"
  },
  {
    "text": "amounts of time thinking about or worrying about the speed of non-critical parts of their programs and these attempts at efficiency actually have a",
    "start": "253599",
    "end": "259359"
  },
  {
    "text": "strong negative impact when debugging and maintenance are considered it's a long sentence um so this kind of",
    "start": "259359",
    "end": "266120"
  },
  {
    "text": "completes the picture for me and this is where I fully get behind this entire",
    "start": "266120",
    "end": "272400"
  },
  {
    "text": "sentiment um Donald n was saying this in a time",
    "start": "272400",
    "end": "278440"
  },
  {
    "text": "you know it's in the 70s right where perhaps uh processor speed was maybe a little more constrained than we are now",
    "start": "278440",
    "end": "285440"
  },
  {
    "text": "and and you know perhaps there was a culture of how do we get the most out of",
    "start": "285440",
    "end": "291960"
  },
  {
    "text": "that speed and so you know focusing on",
    "start": "291960",
    "end": "297039"
  },
  {
    "text": "performance and worrying about non-critical things when they have a",
    "start": "297039",
    "end": "302919"
  },
  {
    "text": "negative impact I think that's a bad thing I agree",
    "start": "302919",
    "end": "308680"
  },
  {
    "text": "but premature optimization you know just ruling out performance thinking alog together I definitely disagree with and",
    "start": "308680",
    "end": "316560"
  },
  {
    "text": "and I think that's sort of how it's being misrepresented now for for bonus internet points does anyone know what um",
    "start": "316560",
    "end": "322319"
  },
  {
    "text": "book or article this appeared in sorry noted I before I I Googled it",
    "start": "322319",
    "end": "329800"
  },
  {
    "text": "um I think it's kind of funny so people uh dull out this this saying",
    "start": "329800",
    "end": "335639"
  },
  {
    "text": "as a way to say I'm not going to do any work but here I want to sound smart um people who like to sound smart probably",
    "start": "335639",
    "end": "341280"
  },
  {
    "text": "also don't like go-to statements um and the this quote appeared in structured",
    "start": "341280",
    "end": "346440"
  },
  {
    "text": "programming with go-to statements in 1974 I just kind of like as a bit of irony um so the thing",
    "start": "346440",
    "end": "355400"
  },
  {
    "text": "is what we get is we get this really uh blunt saying premature optimization is",
    "start": "355680",
    "end": "361759"
  },
  {
    "text": "the root of all evil no if SPS or Mayes it's terrible and that's not fair and it's not really what he's saying um",
    "start": "361759",
    "end": "368120"
  },
  {
    "start": "365000",
    "end": "492000"
  },
  {
    "text": "coding is all about trade-offs right if if we as programmers didn't have to consider the trade-offs between",
    "start": "368120",
    "end": "374199"
  },
  {
    "text": "readability and debuggability and maintainability and ility ilities um if",
    "start": "374199",
    "end": "380639"
  },
  {
    "text": "we didn't have to think about those things then we'd just be typists right the whole idea of most of our jobs I",
    "start": "380639",
    "end": "385880"
  },
  {
    "text": "think is trying to work out um you know of the 400 I could solve this problem",
    "start": "385880",
    "end": "391080"
  },
  {
    "text": "what's the best way for this scenario and you have to think about performance",
    "start": "391080",
    "end": "396440"
  },
  {
    "text": "as one of the factors that helps you decide which way is appropriate um",
    "start": "396440",
    "end": "401479"
  },
  {
    "text": "sometimes you need to do things and you need to optimize for performance and throw out debug ability and sometimes",
    "start": "401479",
    "end": "408360"
  },
  {
    "text": "you need to go the other way or sometimes you need to focus on readability um you have to balance these",
    "start": "408360",
    "end": "414080"
  },
  {
    "text": "things and you have to use the context of what you're doing and the data that you're processing to inform those",
    "start": "414080",
    "end": "421560"
  },
  {
    "text": "decisions um so thinking about optimization is always good now actually",
    "start": "421560",
    "end": "428599"
  },
  {
    "text": "performing the optimization in a premature way fine maybe that's not good but if you don't consider it if you uh",
    "start": "428599",
    "end": "435720"
  },
  {
    "text": "you know disregard it out of hand that's not good um and I think what we all",
    "start": "435720",
    "end": "441720"
  },
  {
    "text": "should be striving to do as developers and engineers and programmers or whatever you want to call yourselves um",
    "start": "441720",
    "end": "447520"
  },
  {
    "text": "is create a culture of performance in your team in your organization to me I think you want to",
    "start": "447520",
    "end": "453879"
  },
  {
    "text": "get to a point where if you see some code in a pool request which is written",
    "start": "453879",
    "end": "458960"
  },
  {
    "text": "in a either a way that you know is going to perform inefficiently or vice versa",
    "start": "458960",
    "end": "465919"
  },
  {
    "text": "in a convoluted way that is harder to read if you can create a culture of performance in your team and you can",
    "start": "465919",
    "end": "472680"
  },
  {
    "text": "trust that whoever wrote that code considered all of the factors and got to",
    "start": "472680",
    "end": "478039"
  },
  {
    "text": "that point for some reason um then you you know you don't need to",
    "start": "478039",
    "end": "483199"
  },
  {
    "text": "worry about these say and you don't need to worry about uh questioning that work now ideally if that work also companies",
    "start": "483199",
    "end": "489440"
  },
  {
    "text": "with a comment saying hey I know this looks bad but that helps um so how do",
    "start": "489440",
    "end": "494879"
  },
  {
    "start": "492000",
    "end": "731000"
  },
  {
    "text": "you work out whether you're in this critical 3% whether you need to focus on performance um the number one thing well",
    "start": "494879",
    "end": "503319"
  },
  {
    "text": "so there's two things I think are equally important so number one would be knowing the context of your execution",
    "start": "503319",
    "end": "508759"
  },
  {
    "text": "right um if you're writing a web application if you have code that runs on every",
    "start": "508759",
    "end": "514039"
  },
  {
    "text": "request then that's going to have different needs than if you have code that runs uh you know in the admin",
    "start": "514039",
    "end": "520080"
  },
  {
    "text": "console when someone clicks a button which they only do once a month um if you're running a background service",
    "start": "520080",
    "end": "526399"
  },
  {
    "text": "which does something at idle time that's very different um if you're running a Windows app you know responding to user",
    "start": "526399",
    "end": "532920"
  },
  {
    "text": "actions in a desktop application you can usually take a bit more time so you've got to know where your code is running",
    "start": "532920",
    "end": "539279"
  },
  {
    "text": "and and you have to know the shape of the data your code is processing so where I used to work um we",
    "start": "539279",
    "end": "546440"
  },
  {
    "text": "regularly imported data from University Mainframe systems and some of the",
    "start": "546440",
    "end": "551680"
  },
  {
    "text": "customers would give us a single file that had every single student that had ever been to that University and we had",
    "start": "551680",
    "end": "558519"
  },
  {
    "text": "to process it and pluck out the data we wanted and some of the universities were smarter and would give us the data that",
    "start": "558519",
    "end": "563839"
  },
  {
    "text": "has changed since the previous day so the same bit of code you we're not going",
    "start": "563839",
    "end": "569640"
  },
  {
    "text": "to write the same bit of code to process the 10 records that have changed versus the 100,000 records for all time right",
    "start": "569640",
    "end": "576880"
  },
  {
    "text": "if we don't know the shape of that data we'll make the wrong decision if someone says oh yeah we'll only give you 10",
    "start": "576880",
    "end": "581959"
  },
  {
    "text": "records and they end up giving us 100,000 our stuff's not going to work right um You need to validate your",
    "start": "581959",
    "end": "588399"
  },
  {
    "text": "assumptions about those two things as well so again if you uh let's say in",
    "start": "588399",
    "end": "594399"
  },
  {
    "text": "that example if we're given the changes that have happened you need to know roughly how many that's going to be and you need to",
    "start": "594399",
    "end": "600720"
  },
  {
    "text": "then talk to your clients potentially you know you need to validate that that assumption is correct and you need to",
    "start": "600720",
    "end": "605839"
  },
  {
    "text": "know the worst case for that as well um you know what if there's a bulk update and every record gets updated what do",
    "start": "605839",
    "end": "612320"
  },
  {
    "text": "you do then um if your code even the the",
    "start": "612320",
    "end": "617440"
  },
  {
    "text": "context of your execution there's worst cases there as well um so some of these Imports would run at 1:00 a.m. overnight",
    "start": "617440",
    "end": "624160"
  },
  {
    "text": "we'd process this file everything's fine no one's using the system at 1:00 a.m. but as as systems the files grew and",
    "start": "624160",
    "end": "632200"
  },
  {
    "text": "things take longer you know what happens if your 1 a. import starts taking 10 hours to run now you're running into",
    "start": "632200",
    "end": "638200"
  },
  {
    "text": "people using the system so what does that do or what if your daily input takes 26 hours to run do you run it",
    "start": "638200",
    "end": "644519"
  },
  {
    "text": "twice do you run it one straight after each other and then they get offset or do you skip a day you've got to consider",
    "start": "644519",
    "end": "650760"
  },
  {
    "text": "the worst case you got to factor all these things in um and you need to always be thinking about the bigger",
    "start": "650760",
    "end": "658320"
  },
  {
    "text": "picture so with Performance Tuning it can be really tempting to take a method",
    "start": "658320",
    "end": "664680"
  },
  {
    "text": "that does some little bit of work and really sort of drill down on it and and",
    "start": "664680",
    "end": "670000"
  },
  {
    "text": "you know focus in and how can I make this as fast as possible but if you do",
    "start": "670000",
    "end": "675240"
  },
  {
    "text": "that you know if you've got some code that Imports 10 records and you focus on the method that Imports one record no",
    "start": "675240",
    "end": "682440"
  },
  {
    "text": "matter how fast you make that if it now proces 100,000 records it's still going to be slow so you need to step back and",
    "start": "682440",
    "end": "688800"
  },
  {
    "text": "think about you know what what what data structures am I using am I reading everything into a list and processing that list well",
    "start": "688800",
    "end": "695440"
  },
  {
    "text": "maybe instead of getting the processing fast I want to use something other than a list right don't read it all into memory or use a stream or something like",
    "start": "695440",
    "end": "703760"
  },
  {
    "text": "that but then if you can get to the point where you know what your hot path",
    "start": "704040",
    "end": "710680"
  },
  {
    "text": "is you know the answers to all these questions um micro benchmarking and",
    "start": "710680",
    "end": "716480"
  },
  {
    "text": "focusing in on that one thing is by far the e easiest way to reason about",
    "start": "716480",
    "end": "722040"
  },
  {
    "text": "performance because essentially that was loud essentially",
    "start": "722040",
    "end": "727639"
  },
  {
    "text": "there's one way to actually like do performance shooting um you have to",
    "start": "727639",
    "end": "732760"
  },
  {
    "text": "measure your code you have to measure what your code was doing change it measure it again maybe you want to make",
    "start": "732760",
    "end": "738360"
  },
  {
    "text": "five different versions of it and measure them all just measure it's the only way to know you can't look at a",
    "start": "738360",
    "end": "743880"
  },
  {
    "text": "piece of code and know whether it's going to perform well or not um because you don't know",
    "start": "743880",
    "end": "749760"
  },
  {
    "text": "all those other things you don't know when it runs which brings us to this code which",
    "start": "749760",
    "end": "755199"
  },
  {
    "text": "is code that I saw in a pool request that sparked this whole talk because I",
    "start": "755199",
    "end": "761760"
  },
  {
    "text": "did the opposite of everything I've been saying and I left a comment that said don't do that that's slow and uses too much",
    "start": "761760",
    "end": "767360"
  },
  {
    "text": "memory well the first thing I did actually was look at this line of code and go hang on what are we doing here what does the aggregate method do again",
    "start": "767360",
    "end": "773360"
  },
  {
    "text": "cuz I didn't really use it hadn't really used it much um data in this case is a",
    "start": "773360",
    "end": "778399"
  },
  {
    "text": "list of strings and for anyone who hasn't used the aggregate method it's one of the link extension methods um this takes all the",
    "start": "778399",
    "end": "786880"
  },
  {
    "text": "the strings in this list and puts them into one string which is comma separated so it does a string. join",
    "start": "786880",
    "end": "793440"
  },
  {
    "text": "essentially so the code has a couple of problems I think it has a readability",
    "start": "793440",
    "end": "798880"
  },
  {
    "text": "problem because string. jooin would have been clearer in what its intentions are and I know from my experience that",
    "start": "798880",
    "end": "808120"
  },
  {
    "text": "link performs generally speaking worse than the non-link version of whatever it",
    "start": "808120",
    "end": "814320"
  },
  {
    "text": "is but without quantify that it's kind of not helpful right how slow is too",
    "start": "814320",
    "end": "821040"
  },
  {
    "text": "slow when does this code run does it run constantly or does it run once um and then uses too much memory well I can",
    "start": "821040",
    "end": "828320"
  },
  {
    "text": "make this use less memory but how much is too much right is this running on a raspby pi or is it running on a zon well",
    "start": "828320",
    "end": "834199"
  },
  {
    "text": "I guess that's not a measure of memory but you know so anyway I left this comment and was the wrong thing to do so",
    "start": "834199",
    "end": "839880"
  },
  {
    "text": "I deleted my comment I said oh you know what let's Benchmark it so how do we Benchmark some code um",
    "start": "839880",
    "end": "848079"
  },
  {
    "text": "this is kind of the uh the simplest probably you know first type of",
    "start": "848079",
    "end": "853240"
  },
  {
    "text": "benchmarking code people write and it has a few problems um does anyone want to have a shout out well you're not",
    "start": "853240",
    "end": "862480"
  },
  {
    "text": "you're not gr enough on the Tim you're looking at milliseconds and you probably need to be more than that potentially",
    "start": "862480",
    "end": "869160"
  },
  {
    "text": "not granual enough that's cool um daytime has a tix property so you can get um more",
    "start": "869160",
    "end": "875480"
  },
  {
    "text": "Precision any other there's a couple of yeah maybe 100's not enough maybe 100's",
    "start": "875480",
    "end": "881880"
  },
  {
    "text": "not enough that's good point Sorry going to load the",
    "start": "881880",
    "end": "887800"
  },
  {
    "text": "machine load on the machine true so there's a better version um and there's",
    "start": "887800",
    "end": "893440"
  },
  {
    "text": "a the easy way to point out the problems with this one is to to show you the better version um so there's a few",
    "start": "893440",
    "end": "899240"
  },
  {
    "text": "things we're doing here and I'll just talk through roughly so the first thing is setting the priority of the process",
    "start": "899240",
    "end": "905839"
  },
  {
    "text": "and the thread to High um and the idea here is you want to measure if I'm trying to improve some",
    "start": "905839",
    "end": "912600"
  },
  {
    "text": "code then I've probably got an idea of what's wrong with it but I want to measure the current code and I want to",
    "start": "912600",
    "end": "918360"
  },
  {
    "text": "measure my new idea and I want to compare the two so in order to be able to compare two runs I need them to sort",
    "start": "918360",
    "end": "925519"
  },
  {
    "text": "of be as clean as possible right if I measure my old code and then I get you",
    "start": "925519",
    "end": "931440"
  },
  {
    "text": "know I don't know 3 seconds great now I run some new measure my new code but in the middle of that run my virus scanner",
    "start": "931440",
    "end": "938040"
  },
  {
    "text": "kicks in or Chrome decides to use another 300 Mega of Ram or something that's going to affect my results right",
    "start": "938040",
    "end": "944600"
  },
  {
    "text": "so try to get the Benchmark to be the most important thing to run um the next thing that happens is we",
    "start": "944600",
    "end": "950720"
  },
  {
    "text": "call the function once and that's to get the jit overhead so net compiles to ilil",
    "start": "950720",
    "end": "956360"
  },
  {
    "text": "ilil is then run through the jit compiler the just time compiler and it optimizes your code and it you know",
    "start": "956360",
    "end": "962880"
  },
  {
    "text": "converts it to um assembly and runs it and all the rest of that stuff but all those things have an overhead so if you",
    "start": "962880",
    "end": "970040"
  },
  {
    "text": "have that overhead of work done within your measurements then you're measuring more than just your code so the idea is",
    "start": "970040",
    "end": "977480"
  },
  {
    "text": "do it first get it out of the way next up we use a stopwatch instead of datetime and this is probably the",
    "start": "977480",
    "end": "985000"
  },
  {
    "text": "most important part um datetime and stopwatch both both measure to the tick",
    "start": "985000",
    "end": "991040"
  },
  {
    "text": "level but so they they're both as uh precise but they're not as granular",
    "start": "991040",
    "end": "997360"
  },
  {
    "text": "which is to your point before um so if you were if you would have a tight Loop and just output daytime. Tex and",
    "start": "997360",
    "end": "1003319"
  },
  {
    "text": "stopwatch dotex um the value of the date time. TI would just not change as often",
    "start": "1003319",
    "end": "1008720"
  },
  {
    "text": "it doesn't it's it's not as granular it's just as precise but its sampling is less um so always use a",
    "start": "1008720",
    "end": "1015360"
  },
  {
    "text": "stopwatch um then we kick off garbage collection and again that's just to try to make the two runs",
    "start": "1015360",
    "end": "1021519"
  },
  {
    "text": "comparable um you don't want garbage collection to um I mean garbage collection is going to affect your",
    "start": "1021519",
    "end": "1027038"
  },
  {
    "text": "timing and that's fine if it's within one run of one piece of code but if",
    "start": "1027039",
    "end": "1032520"
  },
  {
    "text": "garbage from the first from you know the old code is having to be cleaned up while you're running the new code that's",
    "start": "1032520",
    "end": "1037918"
  },
  {
    "text": "going to not help and then we run our code and then we think now 100 not being enough that's",
    "start": "1037919",
    "end": "1043558"
  },
  {
    "text": "a very good point and that's something you need to know about the context of what what your code is doing and and",
    "start": "1043559",
    "end": "1049840"
  },
  {
    "text": "that's also going to matter roughly how long your code takes if you're measuring a function that takes 3 to 4 seconds",
    "start": "1049840",
    "end": "1056520"
  },
  {
    "text": "then maybe 100 is enough and maybe milliseconds is correct but if you're looking at really micro benchmarks and",
    "start": "1056520",
    "end": "1063160"
  },
  {
    "text": "you're talking about functions that take Nan seconds you might want to run it more often the thing is all of this code",
    "start": "1063160",
    "end": "1069799"
  },
  {
    "text": "here is rubbish don't use it um there's a much better way and that is to use",
    "start": "1069799",
    "end": "1076200"
  },
  {
    "text": "benchmarking to solve with this little iterative bits of improvement um are basically solded for us by",
    "start": "1076480",
    "end": "1082919"
  },
  {
    "text": "benchmark.com Library um so it's supported by the net Foundation which",
    "start": "1082919",
    "end": "1088280"
  },
  {
    "text": "just means it's not going anywhere anytime soon um it's used internally by Microsoft heaps and in fact one of the",
    "start": "1088280",
    "end": "1094679"
  },
  {
    "text": "developers on it works for Microsoft now um and it's super powerful so it can",
    "start": "1094679",
    "end": "1100559"
  },
  {
    "text": "Benchmark net the full framework D core you can use mono you can compare",
    "start": "1100559",
    "end": "1106200"
  },
  {
    "text": "different jit algorithms you can compare different bit um it can measure a whole bunch of different stuff and it's got",
    "start": "1106200",
    "end": "1112240"
  },
  {
    "text": "plugins and extensions and all sorts of things there by far the easiest way to",
    "start": "1112240",
    "end": "1117600"
  },
  {
    "text": "do it um and so the way it works is really dry and boring and I'm not going",
    "start": "1117600",
    "end": "1123840"
  },
  {
    "text": "to talk about it so I'm just going to demo it but it is slow and the reason it's slow",
    "start": "1123840",
    "end": "1130880"
  },
  {
    "start": "1124000",
    "end": "1632000"
  },
  {
    "text": "is because it's really thorough and you'll see why in a minute but I just say this to warn you this is the only demo um the rest is pre-prepared number",
    "start": "1130880",
    "end": "1140039"
  },
  {
    "text": "um so let's write a benchmark uh I have here a console",
    "start": "1140039",
    "end": "1145280"
  },
  {
    "text": "application and all I've done is added a reference to",
    "start": "1145280",
    "end": "1150360"
  },
  {
    "text": "[Applause] uh we tell our runner to run our benchmarks the easiest way to do it is",
    "start": "1168090",
    "end": "1173600"
  },
  {
    "text": "to just use the run method and you just give it the class that contains your benchmarks so I'm using this class it",
    "start": "1173600",
    "end": "1179400"
  },
  {
    "text": "doesn't have to be this one it can be another one um there's also a thing called a benchmark switcher which kind",
    "start": "1179400",
    "end": "1184640"
  },
  {
    "text": "of gives you a nice command line interface for selecting which Benchmark you want to run and as you build up a",
    "start": "1184640",
    "end": "1189760"
  },
  {
    "text": "library these things that one's a good one to use and then the way you tell it which",
    "start": "1189760",
    "end": "1195880"
  },
  {
    "text": "methods are benchmarks in your program is simply with The Benchmark attribute so it kind of feels a lot like um a lot",
    "start": "1195880",
    "end": "1204480"
  },
  {
    "text": "like writing a unit test right we have a function we tag it with an attribute",
    "start": "1204480",
    "end": "1210000"
  },
  {
    "text": "that's it really easy knows how to do it um and so we'll just write our little",
    "start": "1210000",
    "end": "1217080"
  },
  {
    "text": "Benchmark so we'll write the old code version first um if I can remember what",
    "start": "1217080",
    "end": "1222960"
  },
  {
    "text": "it is uh you know what I should probably find",
    "start": "1222960",
    "end": "1228880"
  },
  {
    "text": "some data first and then I won't have to fight uh roson so much so we're just",
    "start": "1228880",
    "end": "1233960"
  },
  {
    "text": "going to have a simple array of data just for this example uh and I'm going to be really lazy and going to say",
    "start": "1233960",
    "end": "1241679"
  },
  {
    "text": "10 and so we have an array of 10 strings",
    "start": "1241679",
    "end": "1248240"
  },
  {
    "text": "pretty boring and we write some",
    "start": "1248240",
    "end": "1252919"
  },
  {
    "text": "code and there's our method now one little quote to notice here is that I'm returning a value um best practice with",
    "start": "1254760",
    "end": "1262440"
  },
  {
    "text": "benchmarks is always return a value from your benchmark just so that nothing in",
    "start": "1262440",
    "end": "1267840"
  },
  {
    "text": "the compiler or the Jitter or the runtime or anything else decides that your code can be improved and sped up in",
    "start": "1267840",
    "end": "1275200"
  },
  {
    "text": "some way like for example if uh if the runtime knows that a method doesn't have",
    "start": "1275200",
    "end": "1281279"
  },
  {
    "text": "any side effects and decides to just not call it well that's going to really throw off your benchmark and your",
    "start": "1281279",
    "end": "1287039"
  },
  {
    "text": "numbers are going to be really good but in your real world code probably not going to be applicable um so that's kind",
    "start": "1287039",
    "end": "1293000"
  },
  {
    "text": "of rule to remember number one and so then we'll just write the",
    "start": "1293000",
    "end": "1299080"
  },
  {
    "text": "good version so this is what I personally would have done for this",
    "start": "1299080",
    "end": "1306400"
  },
  {
    "text": "code and so you can sort of see well I think string. jooin is more readable um",
    "start": "1306400",
    "end": "1314000"
  },
  {
    "text": "it's certainly more readable if you're familiar with the string. join method more than you are with the aggregate",
    "start": "1314000",
    "end": "1319080"
  },
  {
    "text": "method um but you know we can't observe performance right so this is where I run",
    "start": "1319080",
    "end": "1324400"
  },
  {
    "text": "benchmarks and this is it this is the total thing I can run this now I'm actually going to do one more thing though I'm going to put in here a",
    "start": "1324400",
    "end": "1333200"
  },
  {
    "text": "parameter called Baseline I'm going to set it's true and I'm just going to do that because that's our code we're comparing against right we want to",
    "start": "1333200",
    "end": "1338400"
  },
  {
    "text": "improve this code so we're going to compare against this and now I can run it it's all I have to do the thing to",
    "start": "1338400",
    "end": "1344159"
  },
  {
    "text": "check number two is up here and that is that it's a release build always Benchmark release builds in fact",
    "start": "1344159",
    "end": "1350799"
  },
  {
    "text": "benchmark.us to run if you do a debug build so we run our console",
    "start": "1350799",
    "end": "1357440"
  },
  {
    "text": "app which is building and so this is going to",
    "start": "1357440",
    "end": "1364200"
  },
  {
    "text": "run and I'll talk about what it's doing in a minute but you can sort of start to see some numbers already so we have uh a",
    "start": "1364200",
    "end": "1372840"
  },
  {
    "text": "million runs a million operations and we're hovering around 630 is Nan seconds",
    "start": "1372840",
    "end": "1379159"
  },
  {
    "text": "per operation so what it's doing is it's",
    "start": "1379159",
    "end": "1385000"
  },
  {
    "text": "running uh this code so certainly more than a 100 times right a million times but it's then doing those",
    "start": "1385000",
    "end": "1391600"
  },
  {
    "text": "runs um so each one of these is called an iteration it's running these iterations and it's running as many as",
    "start": "1391600",
    "end": "1398000"
  },
  {
    "text": "it uh until it's happy essentially um so it's looking at the numbers it's looking",
    "start": "1398000",
    "end": "1403480"
  },
  {
    "text": "at how the the the spread of results is and trying to just smooth out any Spike",
    "start": "1403480",
    "end": "1408960"
  },
  {
    "text": "trying to it sort of waits to let things settle down so there's a consistent um",
    "start": "1408960",
    "end": "1415120"
  },
  {
    "text": "consistent number consistent results and so now we're doing another run so that",
    "start": "1415120",
    "end": "1420640"
  },
  {
    "text": "first run was for um presumably the aggregate method and what Benchmark does",
    "start": "1420640",
    "end": "1427440"
  },
  {
    "text": "is it generates a brand new exe that it runs for each Benchmark you write so all",
    "start": "1427440",
    "end": "1434440"
  },
  {
    "text": "that garbage collection and thread priority and all that stuff that we done before um it just makes it all Easier by having",
    "start": "1434440",
    "end": "1441600"
  },
  {
    "text": "an exe that just does this one job so there's no sort of way the garbage",
    "start": "1441600",
    "end": "1447039"
  },
  {
    "text": "collection from one run can contaminate the the next run because at the end of one run that whole process just goes away right um but that's what makes it",
    "start": "1447039",
    "end": "1455480"
  },
  {
    "text": "thorough and that's what kind of makes it slow so that took a minute for two very simple methods and for doing no",
    "start": "1455480",
    "end": "1461360"
  },
  {
    "text": "memory um analysis either so it can take a while the more you do so what at the",
    "start": "1461360",
    "end": "1468640"
  },
  {
    "text": "end of the run is you get this table of results and you can see here aggregate took 616 nond on average and string.",
    "start": "1468640",
    "end": "1475240"
  },
  {
    "text": "join took 245 it's pretty clearly string. joints better um our scaled column here tells us that in Spades um",
    "start": "1475240",
    "end": "1483279"
  },
  {
    "text": "and in fact so scale comes from that Baseline parameter so I said aggregate was the Baseline which means it's always",
    "start": "1483279",
    "end": "1489279"
  },
  {
    "text": "going to be one um if you're comparing a bunch of different approaches that's a really easy way because all you do is",
    "start": "1489279",
    "end": "1495559"
  },
  {
    "text": "look at the scale column and whichever number is smaller just go with that one and if there's a number that's bigger",
    "start": "1495559",
    "end": "1500640"
  },
  {
    "text": "you've made it worse um but yeah so so what Benchmark does",
    "start": "1500640",
    "end": "1505679"
  },
  {
    "text": "I'll just scroll up a bit here so you can see here well hopefully you can see it says it's executing this crazy name",
    "start": "1505679",
    "end": "1512960"
  },
  {
    "text": "DXE so it's generated this program just to run my string. jooin Benchmark and",
    "start": "1512960",
    "end": "1520320"
  },
  {
    "text": "then it runs it in a few different stages so firstly we have the pilot stage here and you can see the number of",
    "start": "1520320",
    "end": "1526080"
  },
  {
    "text": "operations here is increasing so tries to determine what's a good amount of time a good number of times to run this",
    "start": "1526080",
    "end": "1532279"
  },
  {
    "text": "code so that it doesn't take forever but we get a decent set of results from it",
    "start": "1532279",
    "end": "1537520"
  },
  {
    "text": "and so it settled on 2 million for this one and you can already start to see it was 1 million for the slower code and",
    "start": "1537520",
    "end": "1544760"
  },
  {
    "text": "now it's 2 million well you know you can already start to see this one's clearly obviously better right then excuse me",
    "start": "1544760",
    "end": "1552320"
  },
  {
    "text": "there are 20 runs to measure the overhead so when you're measuring",
    "start": "1552320",
    "end": "1558880"
  },
  {
    "text": "your code your code you wrote to measure your code takes time right so",
    "start": "1558880",
    "end": "1566720"
  },
  {
    "text": "benchmark.us uh then it warms up our code so it's done nine runs to warm up so that's to get rid of jit overhead",
    "start": "1574679",
    "end": "1580080"
  },
  {
    "text": "that sort of thing um and that thing's going to that that's going to become much more critical as so the new tiered",
    "start": "1580080",
    "end": "1586440"
  },
  {
    "text": "compilation which you might have heard of in so it used to be that the jit would optimize your code when you first",
    "start": "1586440",
    "end": "1591840"
  },
  {
    "text": "ran it now with tiered compilation there's stages of optimization it does depending on how often you run your code",
    "start": "1591840",
    "end": "1598520"
  },
  {
    "text": "like for each method and the more your method is run the longer the jit will spend optimizing your code so getting",
    "start": "1598520",
    "end": "1605000"
  },
  {
    "text": "that warm-up done is going to be more important and then it does the actual run and so 34 iterations at 2 million",
    "start": "1605000",
    "end": "1612240"
  },
  {
    "text": "each right that's fairly exhaustively exercising our code and then calculate",
    "start": "1612240",
    "end": "1617600"
  },
  {
    "text": "the results so it's really thorough you get super you know super detailed numbers if you",
    "start": "1617600",
    "end": "1623399"
  },
  {
    "text": "want them or you just look at the scale column and go with the lowest one it's easy",
    "start": "1623399",
    "end": "1630480"
  },
  {
    "text": "um oh that's better so what do the results look like so in",
    "start": "1630480",
    "end": "1637880"
  },
  {
    "start": "1632000",
    "end": "1725000"
  },
  {
    "text": "the real world when I ran across this code I actually tried five different benchmarks um and so the real Benchmark",
    "start": "1637880",
    "end": "1644360"
  },
  {
    "text": "I ran looked like well this in the next slide and there's a couple more features to about here so firstly up the top we",
    "start": "1644360",
    "end": "1649960"
  },
  {
    "text": "have memory diagnoser and R plot exporter so this is starting to bring in some of the extra things you can add on",
    "start": "1649960",
    "end": "1655720"
  },
  {
    "text": "to Benchmark so memory diagnoser will tell us how much memory is used by each U Benchmark it'll tell us about garbage",
    "start": "1655720",
    "end": "1662760"
  },
  {
    "text": "collection how long was spent um how many garbage collections there were and how long we spent doing them um R plot",
    "start": "1662760",
    "end": "1668600"
  },
  {
    "text": "exporter just makes the pretty graphs you'll see in a minute we have our data that's the same",
    "start": "1668600",
    "end": "1674600"
  },
  {
    "text": "and then we have this iterations property with a params attributes so this is like if you've ever used xunit",
    "start": "1674600",
    "end": "1680960"
  },
  {
    "text": "theories you can specify a bunch of parameters for this property and",
    "start": "1680960",
    "end": "1688480"
  },
  {
    "text": "benchmark.us in this Times by 12 different values of iterations like this",
    "start": "1696279",
    "end": "1701360"
  },
  {
    "text": "thing took I think around about half an hour which is why I'm not doing it on stage um so be aware that you know it is",
    "start": "1701360",
    "end": "1708480"
  },
  {
    "text": "thorough and it can take a while so you want to know that uh and then we have Global setup so this is kind of like",
    "start": "1708480",
    "end": "1713799"
  },
  {
    "text": "class initialize if we think to the unit test analogy uh and so this is just setting up our data but making sure that",
    "start": "1713799",
    "end": "1720279"
  },
  {
    "text": "the setup of the data isn't included in the time to actually run the code and then there's five things to",
    "start": "1720279",
    "end": "1727960"
  },
  {
    "start": "1725000",
    "end": "1766000"
  },
  {
    "text": "Benchmark and this is just mainly for my own personal curiosity um so I set the",
    "start": "1727960",
    "end": "1733200"
  },
  {
    "text": "Baseline to string concatenation which is using the plus equals operator on a",
    "start": "1733200",
    "end": "1738320"
  },
  {
    "text": "in a loop right something that we're told never to do this is terrible practice right so I figured well let's",
    "start": "1738320",
    "end": "1744480"
  },
  {
    "text": "find out how bad it is um and then we have a string Builder which is then the the good way right don't do conation use",
    "start": "1744480",
    "end": "1750399"
  },
  {
    "text": "a string Builder well let's see how good it is and then for a bit of fun to see if it helps I have a string Builder but",
    "start": "1750399",
    "end": "1757080"
  },
  {
    "text": "I'm telling the string Builder how big it needs to be before we start maybe that'll help and then string. jooin and",
    "start": "1757080",
    "end": "1763720"
  },
  {
    "text": "data a so let's check out the results so for between one and 10 strings this is",
    "start": "1763720",
    "end": "1771279"
  },
  {
    "start": "1766000",
    "end": "1895000"
  },
  {
    "text": "what it looks like it's really quite hard to read so I drew some lines uh for one string string concatenation wins",
    "start": "1771279",
    "end": "1777760"
  },
  {
    "text": "which kind of makes sense because it's one string so you're not actually concatenating anything right um for two",
    "start": "1777760",
    "end": "1783200"
  },
  {
    "text": "three and four strings uh four yeah um string Builder",
    "start": "1783200",
    "end": "1789480"
  },
  {
    "text": "sorry string Builder wins for two and three strings and then at four strings the pre-initialized string Builder beats",
    "start": "1789480",
    "end": "1796200"
  },
  {
    "text": "it by like the tiniest little smidge because at some point once it gets to a certain length string Builder allocates",
    "start": "1796200",
    "end": "1803519"
  },
  {
    "text": "another one of itself to hold the rest of the string our string Builder we've initialized has already done that work so there's a slight overhead we saving",
    "start": "1803519",
    "end": "1810519"
  },
  {
    "text": "there and so you kind of would look at this and you'd maybe say well string Builder pre-initialized always wins",
    "start": "1810519",
    "end": "1817679"
  },
  {
    "text": "pretty much so let's just always use that right but the thing is this is where you've got to know how many the",
    "start": "1817679",
    "end": "1824640"
  },
  {
    "text": "context of your execution as we get to 100 strings there's essentially three good methods",
    "start": "1824640",
    "end": "1831279"
  },
  {
    "text": "and two bad methods and the good methods are twice as good as the bad methods as we get to a thousand are good methods",
    "start": "1831279",
    "end": "1836919"
  },
  {
    "text": "are now four times as good right so it's exponentially different that's 10,000 strings if you're concatenating 10,000",
    "start": "1836919",
    "end": "1843679"
  },
  {
    "text": "strings together I would I would bet that it doesn't matter which of those three",
    "start": "1843679",
    "end": "1848720"
  },
  {
    "text": "really good methods you use if you're coming from old code that did one of the bad ways you're getting such an",
    "start": "1848720",
    "end": "1854279"
  },
  {
    "text": "improvement that you maybe don't need to go and this is where Donald I think is sort of coming from with the don't have",
    "start": "1854279",
    "end": "1861679"
  },
  {
    "text": "to focus so much on it doesn't mean throw it out and don't improve but maybe",
    "start": "1861679",
    "end": "1867039"
  },
  {
    "text": "those those three good methods are all the same by the same token anywhere between 0 and 10 you could almost argue",
    "start": "1867039",
    "end": "1874279"
  },
  {
    "text": "it doesn't matter which of the whole five you use right depending on where this code is run now again if this is on every request and you get millions of",
    "start": "1874279",
    "end": "1880720"
  },
  {
    "text": "hits a day sure you might want to optimize this you might want to you you want to know what your hot path is but",
    "start": "1880720",
    "end": "1886799"
  },
  {
    "text": "you know consider it in cont context there's not a huge difference we're talking Nan there so 12200 Nan is the",
    "start": "1886799",
    "end": "1893279"
  },
  {
    "text": "worst sort of figure so after your benchmarking you know always got to",
    "start": "1893279",
    "end": "1898720"
  },
  {
    "start": "1895000",
    "end": "1966000"
  },
  {
    "text": "think about what what's important what are you trying to achieve here right it's totally fine for readability to win",
    "start": "1898720",
    "end": "1904519"
  },
  {
    "text": "so string. jooin was not the best performing bit of code there but it was by far and way the simplest piece of",
    "start": "1904519",
    "end": "1910600"
  },
  {
    "text": "code and I think it communicated what it was doing pretty well so in in this example with this PO request that's what",
    "start": "1910600",
    "end": "1916799"
  },
  {
    "text": "we went with we just change the string. join um and then what's the goal are you",
    "start": "1916799",
    "end": "1922080"
  },
  {
    "text": "trying to increase the time or are you trying to increase uh decrease the RAM",
    "start": "1922080",
    "end": "1927600"
  },
  {
    "text": "because so 3 20 character strings string Builder is faster but it uses slightly",
    "start": "1927600",
    "end": "1932760"
  },
  {
    "text": "more memory now again 236 bytes of memory is not a big deal for most of us",
    "start": "1932760",
    "end": "1938080"
  },
  {
    "text": "but maybe you're running on an embedded system and it is uh maybe you're trying to reduce your RAM usage but you don't",
    "start": "1938080",
    "end": "1943559"
  },
  {
    "text": "have a CPU time problem if you're concatenating two Meg strings that now",
    "start": "1943559",
    "end": "1949159"
  },
  {
    "text": "flips and string Builder is less memory so you really need to know what you're trying to achieve and what you're what",
    "start": "1949159",
    "end": "1955240"
  },
  {
    "text": "you're working with in order to evaluate what's right maybe allocating three two",
    "start": "1955240",
    "end": "1960720"
  },
  {
    "text": "Mig strings and can catting them together is a bit silly you might want to use a stream all right some more fun",
    "start": "1960720",
    "end": "1968279"
  },
  {
    "start": "1966000",
    "end": "2001000"
  },
  {
    "text": "examples uh dictionary versus I dictionary so this one's kind of a",
    "start": "1968279",
    "end": "1973720"
  },
  {
    "text": "bizarre Benchmark because what we have is I'm creating one dictionary and I'm",
    "start": "1973720",
    "end": "1981320"
  },
  {
    "text": "storing two references to it one as a dictionary and one as an iary it's the same dictionary just two references and",
    "start": "1981320",
    "end": "1988200"
  },
  {
    "text": "then the benchmarks they Loop through that dictionary and return it that's it so",
    "start": "1988200",
    "end": "1994240"
  },
  {
    "text": "these are this an empty dictionary there's nothing in it all we're doing is looping through an empty dictionary the difference though is",
    "start": "1994240",
    "end": "2002080"
  },
  {
    "start": "2001000",
    "end": "2056000"
  },
  {
    "text": "quite remarkable if you use a dictionary a concrete class instead of the interface it's twice as fast",
    "start": "2002080",
    "end": "2009760"
  },
  {
    "text": "it also allocates no memory at all well no when is it allocates that means uh on the hip so obviously memory but it's all",
    "start": "2010360",
    "end": "2017679"
  },
  {
    "text": "on the stack um whereas the ey diction allocates 32 bytes does anyone know why",
    "start": "2017679",
    "end": "2023639"
  },
  {
    "text": "this is different boxing boxing very good uh",
    "start": "2023639",
    "end": "2030440"
  },
  {
    "text": "when you use an interface um everything you do has to be boxed and has to be",
    "start": "2030440",
    "end": "2035480"
  },
  {
    "text": "stored on the Heap a dictionary and this is true of most of the collection classes their enumerators are designed",
    "start": "2035480",
    "end": "2042799"
  },
  {
    "text": "as structs so that they don't allocate any memory and they're fast but if you use an i dictionary that can't hold true",
    "start": "2042799",
    "end": "2049358"
  },
  {
    "text": "the compiler can't know what the enumerator actually is because you're getting it through I inumerable",
    "start": "2049359",
    "end": "2056639"
  },
  {
    "start": "2056000",
    "end": "2098000"
  },
  {
    "text": "so this is one of those times when it's really important to think about your trade-offs um it's a fairly commonly",
    "start": "2056720",
    "end": "2062960"
  },
  {
    "text": "held belief that it's always better to code to the interface not the concrete right I personally don't agreee with it it I'm happy to debate you later but it",
    "start": "2062960",
    "end": "2070520"
  },
  {
    "text": "might be something that if you're on the hot path if this is a performance problem for you you might want to break",
    "start": "2070520",
    "end": "2076358"
  },
  {
    "text": "that coding standard you have you might want to question those assumptions right um be open to that possibility this is a",
    "start": "2076359",
    "end": "2082878"
  },
  {
    "text": "code change that we have made in the codebase I work on we have changed parameters from interfaces to concrete",
    "start": "2082879",
    "end": "2088919"
  },
  {
    "text": "types because we want to remove a memory overhead this is a a real world solution",
    "start": "2088919",
    "end": "2094560"
  },
  {
    "text": "so you kind of just got to be open to anything and you got to consider all the fact",
    "start": "2094560",
    "end": "2099640"
  },
  {
    "start": "2098000",
    "end": "2192000"
  },
  {
    "text": "factors uh Loops versus Link so old people like me like to write",
    "start": "2100920",
    "end": "2107000"
  },
  {
    "text": "loops and well that's not true I like to write link as well um but you know",
    "start": "2107000",
    "end": "2112839"
  },
  {
    "text": "swings and roundabouts so in this example we have 10 uh strings in an array it's pretty simple and we're just",
    "start": "2112839",
    "end": "2120839"
  },
  {
    "text": "trying to find element number five nothing nothing fancy but the interesting thing is",
    "start": "2120839",
    "end": "2127240"
  },
  {
    "text": "trying to determine what's the difference between a loop and using a link extension method and then just to",
    "start": "2127240",
    "end": "2134280"
  },
  {
    "text": "go a bit further while we're here is there a difference between so first or default with a predicate or the wear",
    "start": "2134280",
    "end": "2140359"
  },
  {
    "text": "method with a predicate and then first or default so the Loop's going to win I",
    "start": "2140359",
    "end": "2146800"
  },
  {
    "text": "think that's kind of you know obvious it's a bit more close to the metal right it's got no overhead doesn't allocate any memory it's really fast link is",
    "start": "2146800",
    "end": "2154680"
  },
  {
    "text": "slower this is just a fact but obviously it has other advantages so don't rule it",
    "start": "2154680",
    "end": "2160480"
  },
  {
    "text": "out the interesting thing for me is that using first or default",
    "start": "2160480",
    "end": "2165520"
  },
  {
    "text": "directly is not only faster but it also uses less memory and the reason for that",
    "start": "2165520",
    "end": "2170960"
  },
  {
    "text": "is simply that um deferred execution you get with link the wear method has to",
    "start": "2170960",
    "end": "2176319"
  },
  {
    "text": "allocate a wear iterator to remember what your predicate was and then first your default executes that code but it",
    "start": "2176319",
    "end": "2183839"
  },
  {
    "text": "has to store that somewhere right and then there's the overhead of an extra method call first or default just Loop",
    "start": "2183839",
    "end": "2189079"
  },
  {
    "text": "through your collection so again you know Link's going to be",
    "start": "2189079",
    "end": "2195079"
  },
  {
    "start": "2192000",
    "end": "2247000"
  },
  {
    "text": "slower sure but you've got to think through it it definitely has other benefits right The Benchmark code was one line and really simple that's a",
    "start": "2195079",
    "end": "2202720"
  },
  {
    "text": "positive the most important thing if you're ever benchmarking link though is make sure you are benchmarking the right",
    "start": "2202720",
    "end": "2209040"
  },
  {
    "text": "thing so I in a previous life wrote a link provider for some custom to do some",
    "start": "2209040",
    "end": "2215440"
  },
  {
    "text": "custom work and because of the way that was implemented there's no difference between first or default versus where",
    "start": "2215440",
    "end": "2222079"
  },
  {
    "text": "than first or default but that was a fact of the link provider I wrote that's not true of all link providers right if",
    "start": "2222079",
    "end": "2228560"
  },
  {
    "text": "you're using link tosql or Entity framework and you write a benchmark to see which link statement takes",
    "start": "2228560",
    "end": "2234599"
  },
  {
    "text": "longer you've got to write that Benchmark so that that link statement hits Entity framework or link tosql",
    "start": "2234599",
    "end": "2240680"
  },
  {
    "text": "otherwise you're not comparing apples and apples so be aware of of you know what you're running in",
    "start": "2240680",
    "end": "2248440"
  },
  {
    "start": "2247000",
    "end": "2262000"
  },
  {
    "text": "and last one is string case conversions this one's really simple um there are",
    "start": "2248440",
    "end": "2254800"
  },
  {
    "text": "four ways to convert the case of a string and let us Benchmark them all um so the results on this one are",
    "start": "2254800",
    "end": "2263720"
  },
  {
    "text": "interesting you'll notice there are two graphs so the graph on the left is The NET Framework and the graph on the right",
    "start": "2263720",
    "end": "2269319"
  },
  {
    "text": "is net core so the interesting thing here is in NET Framework uh two lower",
    "start": "2269319",
    "end": "2276960"
  },
  {
    "text": "invariance is faster it's the fastest one and I think I remember reading some comment or a blog post somewhere that",
    "start": "2276960",
    "end": "2282400"
  },
  {
    "text": "said it was specifically designed that that one was going to be the fastest one so as a simple tip maybe use that all",
    "start": "2282400",
    "end": "2288960"
  },
  {
    "text": "the time in net core though two upper in variant is faster H that's now hang on",
    "start": "2288960",
    "end": "2294880"
  },
  {
    "text": "now I don't know which one to use so the interesting thing about this graph or these graphs though is have a look at",
    "start": "2294880",
    "end": "2301079"
  },
  {
    "text": "the number in the top left Net Framework is about twice as slow as net core",
    "start": "2301079",
    "end": "2307800"
  },
  {
    "text": "and so again make sure you're thinking about the right things here instead of trying to get an extra what's that 50 m",
    "start": "2307800",
    "end": "2315960"
  },
  {
    "text": "50 NS by going from two lower to two lower in variant you get a full doubling",
    "start": "2315960",
    "end": "2321760"
  },
  {
    "text": "of speed by going to net core so you need to know the quirks of the",
    "start": "2321760",
    "end": "2328359"
  },
  {
    "start": "2325000",
    "end": "2360000"
  },
  {
    "text": "environment you're working in you need to Benchmark the right thing you know if you're running on net full framework",
    "start": "2328359",
    "end": "2334760"
  },
  {
    "text": "Benchmark on net full framework not net core but also consider that bigger picture",
    "start": "2334760",
    "end": "2340079"
  },
  {
    "text": "and consider that you know is there can you switch I mean net switching Frameworks is obviously a big deal but",
    "start": "2340079",
    "end": "2346079"
  },
  {
    "text": "maybe there's you can switch a component or maybe you can um you know try a different Library it might be a bigger",
    "start": "2346079",
    "end": "2352400"
  },
  {
    "text": "win than focusing in on trying to eek out a few milliseconds from some",
    "start": "2352400",
    "end": "2358079"
  },
  {
    "text": "existing code but this is the Pinnacle so this is",
    "start": "2358079",
    "end": "2363319"
  },
  {
    "start": "2360000",
    "end": "2491000"
  },
  {
    "text": "what I think everyone should subscribe to I love this uh this is my favorite piece of code from the NET Framework this screenshot is straight from",
    "start": "2363319",
    "end": "2369240"
  },
  {
    "text": "reference source. microsoft.com uh this is the hybrid dictionary class which I'm kind of going",
    "start": "2369240",
    "end": "2374800"
  },
  {
    "text": "to guess that no one's used because it's very old it predates generics and I'm not sure it has any purpose anymore but",
    "start": "2374800",
    "end": "2381599"
  },
  {
    "text": "here it is the hybrid dictionary has its job is it's a dictionary that",
    "start": "2381599",
    "end": "2390560"
  },
  {
    "text": "changes how it internally stores the data you give",
    "start": "2390560",
    "end": "2395800"
  },
  {
    "text": "it so that it as fast as it can be for the amount of data it's store",
    "start": "2395800",
    "end": "2401119"
  },
  {
    "text": "in and if you were to say to me hey go and write a dictionary and change what backing store you use so that it's",
    "start": "2401119",
    "end": "2407480"
  },
  {
    "text": "fastest depending on how many items there are my mind would go racing and I would be like right okay well we need to",
    "start": "2407480",
    "end": "2414119"
  },
  {
    "text": "uh monitor how slow ad and remove are we need to maybe build up some heuristics about how often ad and remove might be",
    "start": "2414119",
    "end": "2420400"
  },
  {
    "text": "called you know maybe this would be a good opportunity to put in some machine learning I hear that's all the rage you know we can have this really smart",
    "start": "2420400",
    "end": "2426400"
  },
  {
    "text": "collection that does this amazing work it's going to be ideal now none of that nine that's what you want",
    "start": "2426400",
    "end": "2433079"
  },
  {
    "text": "um a hyb dictionary changes from using a linked list to a dictionary or a hashset",
    "start": "2433079",
    "end": "2439480"
  },
  {
    "text": "uh once there are nine items in it it's that simple so the code's really simple",
    "start": "2439480",
    "end": "2444920"
  },
  {
    "text": "it's really easy to debug and understand but that doesn't mean performance was thrown out there was exhaustive",
    "start": "2444920",
    "end": "2450640"
  },
  {
    "text": "performance testing to establish that nine is the right number 10's completely wrong and eight don't even get me started nine",
    "start": "2450640",
    "end": "2458520"
  },
  {
    "text": "is where you want to be but that's what I mean you know I I just think this is the ultimate besides the fact I love how",
    "start": "2458520",
    "end": "2464960"
  },
  {
    "text": "funny the comment is and it reminds me of that dillbert car with the random number generator but um you know if you",
    "start": "2464960",
    "end": "2470760"
  },
  {
    "text": "can get to a point where it's considering performance it's doing you",
    "start": "2470760",
    "end": "2476640"
  },
  {
    "text": "know decent thorough work to establish what the performance is and what we want it to be",
    "start": "2476640",
    "end": "2482079"
  },
  {
    "text": "Etc but still have understandable easy to write code you know not learning",
    "start": "2482079",
    "end": "2487720"
  },
  {
    "text": "algorithms in a dictionary uh I think that's great in summary should you always do",
    "start": "2487720",
    "end": "2494599"
  },
  {
    "start": "2491000",
    "end": "2542000"
  },
  {
    "text": "the things that are faster uh no um pretty much that's and that's what I",
    "start": "2494599",
    "end": "2501960"
  },
  {
    "text": "I'd like to think Donald nth was may be talking about is that it depends right programming it always depends there's",
    "start": "2501960",
    "end": "2508200"
  },
  {
    "text": "there's every question in programming can be answered by saying it depends if you're ever in a meeting just yeah um but yeah exactly um",
    "start": "2508200",
    "end": "2518280"
  },
  {
    "text": "you kind of need to be aware of that right so don't you know throw out all",
    "start": "2518280",
    "end": "2523800"
  },
  {
    "text": "performance by saying premature optimization is the root of all evil but sometimes that's the right approach but",
    "start": "2523800",
    "end": "2529560"
  },
  {
    "text": "by the same token sometimes digging in and violating your coding standards in order to eek out another more you know",
    "start": "2529560",
    "end": "2536240"
  },
  {
    "text": "three more bites of RAM is important um that's all the slides I",
    "start": "2536240",
    "end": "2542240"
  },
  {
    "start": "2542000",
    "end": "2997000"
  },
  {
    "text": "have thank you does anyone have any questions",
    "start": "2542240",
    "end": "2547480"
  },
  {
    "text": "any yes yeah so um I was just wondering obviously those are quite isolated examples you shown um y quite specific",
    "start": "2553480",
    "end": "2561160"
  },
  {
    "text": "you got comparisons if you had to try and do same try and Benchmark more",
    "start": "2561160",
    "end": "2567720"
  },
  {
    "text": "complicated piece of established business logic um how could you if you",
    "start": "2567720",
    "end": "2573319"
  },
  {
    "text": "got an example P put a framework like that into that process lot more dependencies to baggage along with it",
    "start": "2573319",
    "end": "2579680"
  },
  {
    "text": "rather than yeah so the question was about benchmarking",
    "start": "2579680",
    "end": "2585240"
  },
  {
    "text": "more elaborate code with dependencies and business logic and all that sort of thing um and it's definitely a challenge",
    "start": "2585240",
    "end": "2591520"
  },
  {
    "text": "and it's something that you need to be careful with because it can come you kind of don't necessarily want your",
    "start": "2591520",
    "end": "2598319"
  },
  {
    "text": "baggage to affect your benchmark um and it's so I mean if you I had up there if",
    "start": "2598319",
    "end": "2604359"
  },
  {
    "text": "you're using link with Entity framework for example well if you're benchmarking something that accesses a database probably the",
    "start": "2604359",
    "end": "2611640"
  },
  {
    "text": "execution of your code is going to be the smallest component of whatever time that takes right the database hit and",
    "start": "2611640",
    "end": "2617240"
  },
  {
    "text": "the network traval and all those things is going to be huge so you actually don't want to really Benchmark that you want to if you can boil it down to some",
    "start": "2617240",
    "end": "2625520"
  },
  {
    "text": "Essence that you can that you can Benchmark but that's also where you need to think about algorithms more than code",
    "start": "2625520",
    "end": "2632160"
  },
  {
    "text": "so if you're processing data from a database you're going to get improvements in your codee",
    "start": "2632160",
    "end": "2637720"
  },
  {
    "text": "by thinking about how you process the data and not worrying about the time it takes to get that data obviously",
    "start": "2637720",
    "end": "2644040"
  },
  {
    "text": "benchmarking the time it takes to get data is important as well and and you know query tuning and all those things",
    "start": "2644040",
    "end": "2649160"
  },
  {
    "text": "are super important but you do kind of need to separate all these Concepts if you can um because otherwise yeah you",
    "start": "2649160",
    "end": "2655760"
  },
  {
    "text": "just sort of bring along too much baggage with your benchmark and your numbers you'll still get numbers out of",
    "start": "2655760",
    "end": "2661680"
  },
  {
    "text": "it and you'll still be able to pick a winner and all those things it just might not have as much effect in the real world as does in your sort of",
    "start": "2661680",
    "end": "2668440"
  },
  {
    "text": "isolated environment so you kind of need to like you're benchmarking isolation so you kind of need to get your code in",
    "start": "2668440",
    "end": "2675160"
  },
  {
    "text": "that sort of same isolation if that makes sense yeah",
    "start": "2675160",
    "end": "2681920"
  },
  {
    "text": "you uh sorry down the front first um so could you use this to test your bagage",
    "start": "2681920",
    "end": "2687599"
  },
  {
    "text": "so I know let's say you've got dependencies",
    "start": "2687599",
    "end": "2692280"
  },
  {
    "text": "onage you definitely could I mean you you can you can use it for these things you just sort of have to be aware that",
    "start": "2693200",
    "end": "2699400"
  },
  {
    "text": "the numbers you're getting are going to be very end to endend and they're going to be um like they're going to be hard",
    "start": "2699400",
    "end": "2704839"
  },
  {
    "text": "to compare so well even mean even this Benchmark here right so I ran that in a minute on my laptop not plugged into",
    "start": "2704839",
    "end": "2711280"
  },
  {
    "text": "Power if I go home and plug it into the electricity it's going to run faster right so that's not very useful I'm not",
    "start": "2711280",
    "end": "2718319"
  },
  {
    "text": "going to compare this run against one I do when I get back to the hotel but right now on this machine I can still",
    "start": "2718319",
    "end": "2724960"
  },
  {
    "text": "compare those two methods to each other cuz they ran in the same environment so you can do that and you can factor in",
    "start": "2724960",
    "end": "2730720"
  },
  {
    "text": "your DB hits and whatever I just wouldn't sort of put any stake in what the numbers are because it's really",
    "start": "2730720",
    "end": "2737200"
  },
  {
    "text": "isolated to that time you know half an hour from now you could have something else going on on the network you could be routed through a different DNS survey",
    "start": "2737200",
    "end": "2743559"
  },
  {
    "text": "anything's possible so you just want to kind of not put too much weight in it um so there was one other question and then",
    "start": "2743559",
    "end": "2751599"
  },
  {
    "text": "would you use this uh kind of micro benchmarking in order to support",
    "start": "2751599",
    "end": "2758680"
  },
  {
    "text": "yeah so that's so the question was about um preventing degradation in future and",
    "start": "2760839",
    "end": "2766640"
  },
  {
    "text": "it's something that comes up a lot because I think because how much benchmarks look like tests that everyone",
    "start": "2766640",
    "end": "2771920"
  },
  {
    "text": "wants to run them in their CI and you know have it fail when it takes too long um and it's definitely something you can",
    "start": "2771920",
    "end": "2777400"
  },
  {
    "text": "do there's not any built-in Tools in Benchmark to do this but I mean it does",
    "start": "2777400",
    "end": "2783240"
  },
  {
    "text": "export all of its data to exhaustive CSV files and you can build that Inu yourself um I think it's a really good",
    "start": "2783240",
    "end": "2789640"
  },
  {
    "text": "idea it's definitely something that um we do have on my team and we have",
    "start": "2789640",
    "end": "2795640"
  },
  {
    "text": "performance degradation tests but it's all about uh you know you've got to you",
    "start": "2795640",
    "end": "2801280"
  },
  {
    "text": "got to think about the numbers a lot you don't want to have it oh this run took longer than the last run therefore I'll fail the build you want to have some",
    "start": "2801280",
    "end": "2807520"
  },
  {
    "text": "kind of threshold and you probably want to look more at Trends than actual results you know it doesn't matter if",
    "start": "2807520",
    "end": "2813720"
  },
  {
    "text": "one run takes longer but if the trend is upwards that's something to look at um",
    "start": "2813720",
    "end": "2819280"
  },
  {
    "text": "but yeah I don't know if your team is Cora but Cora has a bunch of performance",
    "start": "2819280",
    "end": "2825160"
  },
  {
    "text": "tests um I wonder if they are a good starting point for if my company say",
    "start": "2825160",
    "end": "2830800"
  },
  {
    "text": "wants to start your performance test is that code Bas a good example and what do you guys use for testing if like you",
    "start": "2830800",
    "end": "2837040"
  },
  {
    "text": "said it looks a lot like a testing framework but I don't think it is if so what do you use as a testing framework",
    "start": "2837040",
    "end": "2842160"
  },
  {
    "text": "to support performance tests so performance so okay uh two questions",
    "start": "2842160",
    "end": "2848559"
  },
  {
    "text": "yeah so there's there's testing sorry there's performance stuff in corx there's a net performance team it's sort",
    "start": "2848559",
    "end": "2854599"
  },
  {
    "text": "of separate to core effects it kind of sits across the top and one of the guys on that team is one of the authors of",
    "start": "2854599",
    "end": "2861200"
  },
  {
    "text": "benchmark.us",
    "start": "2861200",
    "end": "2864200"
  },
  {
    "text": "benchmark.us in order to prevent regressions and all those sort of things um a lot of Microsoft internally was",
    "start": "2871359",
    "end": "2877359"
  },
  {
    "text": "using xunit performance before but it's pretty much migrating to",
    "start": "2877359",
    "end": "2882920"
  },
  {
    "text": "benchmark.com workor it's quite complicated and covers a lots of um you",
    "start": "2894760",
    "end": "2900000"
  },
  {
    "text": "know lots of things that most of us don't need to worry about like you know all the different crossplatform type",
    "start": "2900000",
    "end": "2905920"
  },
  {
    "text": "things um yeah any other question yes yeah I'm I'm",
    "start": "2905920",
    "end": "2912520"
  },
  {
    "text": "wondering more on the on the human level how would you promote uh performance conscious work more yeah um that's an",
    "start": "2912520",
    "end": "2922280"
  },
  {
    "text": "interesting question um I think certainly you know introducing tools like this helps",
    "start": "2922280",
    "end": "2929520"
  },
  {
    "text": "because um I think it takes the humanness out of it which is kind of funny considering you asked about the",
    "start": "2929520",
    "end": "2934720"
  },
  {
    "text": "human nature but you know you you want to prevent an argument about performance and having numbers and objective data is",
    "start": "2934720",
    "end": "2941559"
  },
  {
    "text": "a really good way to prevent an argument um so I think encouraging the use of",
    "start": "2941559",
    "end": "2947400"
  },
  {
    "text": "tools like this is is a good step if you get everyone to think about what I mean",
    "start": "2947400",
    "end": "2952680"
  },
  {
    "text": "that's essentially it starts with just making sure people are thinking about what they're doing and so having people write benchmarks in the same way that a",
    "start": "2952680",
    "end": "2958839"
  },
  {
    "text": "lot of places you know you have to write a unit test for any new code you write well maybe you have to write some",
    "start": "2958839",
    "end": "2964200"
  },
  {
    "text": "benchmarks um particularly if you want to prevent regressions that might be a good step um just having them start to",
    "start": "2964200",
    "end": "2970480"
  },
  {
    "text": "think about the numbers um makes it I think an easier conversation to have because it's objective data rather than",
    "start": "2970480",
    "end": "2977680"
  },
  {
    "text": "you know gut feeli and seniority or any of the other factors that can come in um",
    "start": "2977680",
    "end": "2983799"
  },
  {
    "text": "yeah is toar benmar",
    "start": "2983799",
    "end": "2989079"
  },
  {
    "text": "acoss yes um yes I think so um yeah so the the",
    "start": "2989079",
    "end": "2996040"
  },
  {
    "text": "attributes um so like I don't have one yeah so like the",
    "start": "2996040",
    "end": "3001359"
  },
  {
    "text": "memory diagnoser and R plot Expo attributes there's attributes to select the um the type of jit you want to use",
    "start": "3001359",
    "end": "3008240"
  },
  {
    "text": "as attributes to select Fitness and it will just run as many combinations as it has to um and it yes it's exhaustive and",
    "start": "3008240",
    "end": "3016160"
  },
  {
    "text": "because it generates an exe for each run it can I mean it essentially generates code then compiles the code then runs",
    "start": "3016160",
    "end": "3022720"
  },
  {
    "text": "the exe so it can generate the code and it can compile it with net core and then it can compile it with full framework um",
    "start": "3022720",
    "end": "3028599"
  },
  {
    "text": "and Away you go your code you write is just kind of like the shell so it makes it easy because you don't need to worry",
    "start": "3028599",
    "end": "3034599"
  },
  {
    "text": "about all that stuff it doesn't for you yeah should we be trying to run",
    "start": "3034599",
    "end": "3040240"
  },
  {
    "text": "benchmarks in Fairly isolated environment my machine yeah",
    "start": "3040240",
    "end": "3045839"
  },
  {
    "text": "that's that's an interesting question um I know certainly know of a lot of people",
    "start": "3045839",
    "end": "3051640"
  },
  {
    "text": "who you know kill every process on their machine that they can to run the Benchmark um again it comes down to what",
    "start": "3051640",
    "end": "3057440"
  },
  {
    "text": "you're going to do with the numbers if you're going to run if you're going to run a benchmark and then run it again next week and Compare the numbers you",
    "start": "3057440",
    "end": "3063599"
  },
  {
    "text": "probably want to do that if you're going to run it now and just compare within this run doesn't really matter because",
    "start": "3063599",
    "end": "3069079"
  },
  {
    "text": "it's the same environment um I tend to watch The Benchmark and not go off and",
    "start": "3069079",
    "end": "3075000"
  },
  {
    "text": "do something else just in case but that's more about you know if if the first bit of code finishes and then the",
    "start": "3075000",
    "end": "3081040"
  },
  {
    "text": "second bit starts running and something else happens you know it's about it's about um preventing unknowns between the",
    "start": "3081040",
    "end": "3086680"
  },
  {
    "text": "two things um yeah",
    "start": "3086680",
    "end": "3093359"
  },
  {
    "text": "[Music] yeah uh not that I'm aware of no it",
    "start": "3094570",
    "end": "3100280"
  },
  {
    "text": "doesn't uh doesn't really support that but again you're kind of looking for relative you need to look at the numbers",
    "start": "3100280",
    "end": "3107160"
  },
  {
    "text": "as as relative numbers not absolutes you know the fact that this method took 200 nond in The Benchmark doesn't mean it's",
    "start": "3107160",
    "end": "3113720"
  },
  {
    "text": "going to take 200 nond in production it's more more about this method was twice as fast as this method so it's",
    "start": "3113720",
    "end": "3120160"
  },
  {
    "text": "going to be twice as fast on your phone just the actual numbers might be different it's just maybe the code only",
    "start": "3120160",
    "end": "3125839"
  },
  {
    "text": "runs with phones there is that code only runs phon that's true um some meths",
    "start": "3125839",
    "end": "3135480"
  },
  {
    "text": "aun so so mob devices are often",
    "start": "3137920",
    "end": "3143440"
  },
  {
    "text": "memorys might often performance",
    "start": "3143440",
    "end": "3148880"
  },
  {
    "text": "because yes um that's Inter Point actually I I wouldn't be surprised if there is something out there to help",
    "start": "3148880",
    "end": "3154119"
  },
  {
    "text": "with that possibly an extension um yeah that's a good point um but there there",
    "start": "3154119",
    "end": "3159280"
  },
  {
    "text": "probably is a way you can sort of do that anyway I mean there there is lots of options to constrain lots of options",
    "start": "3159280",
    "end": "3165760"
  },
  {
    "text": "around garbage collection and you can I mean these days you can even Supply your own garbage collector right so um I",
    "start": "3165760",
    "end": "3171359"
  },
  {
    "text": "wouldn't be surprised if there is some option around that or if if it doesn't exist it will it it would eventually um",
    "start": "3171359",
    "end": "3178119"
  },
  {
    "text": "particularly as um net core going crossplatform obviously you know it's",
    "start": "3178119",
    "end": "3183839"
  },
  {
    "text": "going to need that any other yeah speaking of running it on multiple platforms performance",
    "start": "3183839",
    "end": "3191440"
  },
  {
    "text": "benchmarks um if one isn't necessarily in control of the of the environment",
    "start": "3191440",
    "end": "3196760"
  },
  {
    "text": "like running in the cloud or something would it be possible from your experience to some sort of base case",
    "start": "3196760",
    "end": "3202559"
  },
  {
    "text": "Benchmark never change just some sort of algorithm that alwayss the same you know it always takes one compare things yeah",
    "start": "3202559",
    "end": "3211079"
  },
  {
    "text": "I think that's a really good idea it is hard to compare numbers and yeah if you're running it in the cloud",
    "start": "3211079",
    "end": "3217599"
  },
  {
    "text": "um you're probably going to get a difference of numbers so running one case first as a baseline yeah I think that's probably a",
    "start": "3217599",
    "end": "3224400"
  },
  {
    "text": "really good idea oh cool thank you very much",
    "start": "3224400",
    "end": "3232560"
  },
  {
    "text": "[Applause]",
    "start": "3232560",
    "end": "3239000"
  },
  {
    "text": "you",
    "start": "3242640",
    "end": "3245000"
  }
]