[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "is it okay now this is cleaner I talk a talk a talk good morning everybody this is about talk about C++ C++ is now one",
    "start": "4480",
    "end": "13750"
  },
  {
    "text": "year old and means we have one year more experience about it and turned out that",
    "start": "13750",
    "end": "20740"
  },
  {
    "text": "in practice a couple of things are interesting and both it's fundamentally",
    "start": "20740",
    "end": "26439"
  },
  {
    "text": "great to use these new features and it's fundamental sometimes well let's say surprising and I have selected this hour",
    "start": "26439",
    "end": "34450"
  },
  {
    "text": "to talk about both the good and ugly that's not many ugly so this was just to",
    "start": "34450",
    "end": "42039"
  },
  {
    "text": "get you all into the room because you all like bad news I know that so but",
    "start": "42039",
    "end": "47170"
  },
  {
    "text": "there's some things you have to beware about and that's something I want to",
    "start": "47170",
    "end": "52449"
  },
  {
    "text": "show you so now it was let's start with",
    "start": "52449",
    "end": "63609"
  },
  {
    "start": "61000",
    "end": "175000"
  },
  {
    "text": "the language features and this is just a selection of the different features we have so let's start with the first thing",
    "start": "63609",
    "end": "69370"
  },
  {
    "text": "we have this is a new ability to say whenever defined something in the header",
    "start": "69370",
    "end": "76120"
  },
  {
    "text": "file which is a globally aesthetic it's no longer necessary to define this",
    "start": "76120",
    "end": "82510"
  },
  {
    "text": "object in a CPP file so that it is in one translation unit defined so which",
    "start": "82510",
    "end": "90400"
  },
  {
    "text": "effectively means that you can now provide full libraries including",
    "start": "90400",
    "end": "97480"
  },
  {
    "text": "providing global objects just inherits here's an example for that one of my",
    "start": "97480",
    "end": "103930"
  },
  {
    "text": "typical things I always need and try out is just the Trekker of cause of new and",
    "start": "103930",
    "end": "109990"
  },
  {
    "text": "delete so to find out when his memory allocated and where not and in the past either I had to I could put everything",
    "start": "109990",
    "end": "117160"
  },
  {
    "text": "in there in a header file or I needed some tricks like statics thankings or I",
    "start": "117160",
    "end": "124240"
  },
  {
    "text": "had to be sure that this header file is only used in one of the translation units but this is gone",
    "start": "124240",
    "end": "130450"
  },
  {
    "text": "now you can simply say this is my class including some static objects so where",
    "start": "130450",
    "end": "137709"
  },
  {
    "text": "we count number of calls of Melek and the size we allocated and just by including this",
    "start": "137709",
    "end": "144219"
  },
  {
    "text": "header file even if you included in 10 different compilation unit so in 10",
    "start": "144219",
    "end": "150250"
  },
  {
    "text": "different CPP fights you can now track all the calls of new and delete because",
    "start": "150250",
    "end": "155469"
  },
  {
    "text": "the new feature here in line static means that we have these elements",
    "start": "155469",
    "end": "163209"
  },
  {
    "text": "defined for each and every translation unit and they all share the same object",
    "start": "163209",
    "end": "169329"
  },
  {
    "text": "so it's in line now for glow objects that's the first thing just to wake up",
    "start": "169329",
    "end": "175739"
  },
  {
    "start": "175000",
    "end": "353000"
  },
  {
    "text": "now let's come to something different",
    "start": "175739",
    "end": "180480"
  },
  {
    "text": "templates are beasts and templates are always well some kind of interesting",
    "start": "180780",
    "end": "187000"
  },
  {
    "text": "surprises and so let's introduce one of the new templates features and we will",
    "start": "187000",
    "end": "192430"
  },
  {
    "text": "come to back to it later this today and the first thing I want to introduce is a",
    "start": "192430",
    "end": "199450"
  },
  {
    "text": "feature called class template argument deduction the acronym is CTA deep noted",
    "start": "199450",
    "end": "205389"
  },
  {
    "text": "we will talk in the community a lot about this acronym and that means that",
    "start": "205389",
    "end": "210549"
  },
  {
    "text": "in our classes you are no longer required to specify the arguments of a",
    "start": "210549",
    "end": "217810"
  },
  {
    "text": "class template if the arguments can be deduced by the constructor so look at",
    "start": "217810",
    "end": "224439"
  },
  {
    "text": "this normally we are you all used if we want to have the complex data type that",
    "start": "224439",
    "end": "229900"
  },
  {
    "text": "we have to specify this is a complex of int although we specify that both the",
    "start": "229900",
    "end": "237699"
  },
  {
    "text": "initial value for the real part and the imaginary part is an int this is no",
    "start": "237699",
    "end": "242889"
  },
  {
    "text": "longer necessary in C++ 17 we can now just let the type of the values of the",
    "start": "242889",
    "end": "252729"
  },
  {
    "text": "real part and the imaginary part deduce according to the constructor independent",
    "start": "252729",
    "end": "258579"
  },
  {
    "text": "which notation you use for the constructor whether you use curly braces or parentheses or even the Neko sign",
    "start": "258579",
    "end": "265210"
  },
  {
    "text": "because we initialized only the real card the type end will be deduced here because you pass to the",
    "start": "265210",
    "end": "272110"
  },
  {
    "text": "constructor and int this works as for function template so also for function",
    "start": "272110",
    "end": "280180"
  },
  {
    "text": "templates types are reduced according to the function now for classes the types are deduced if possible for the classes",
    "start": "280180",
    "end": "288490"
  },
  {
    "text": "according to the constructor called the constructor for complex takes the",
    "start": "288490",
    "end": "293650"
  },
  {
    "text": "same type T for both the real and imaginary part therefore the the next line is an error because the compiler",
    "start": "293650",
    "end": "300970"
  },
  {
    "text": "has no clue what to deduce here we say the real parts have been in the",
    "start": "300970",
    "end": "306660"
  },
  {
    "text": "imaginary part should be a float so our double so there is a contradiction and",
    "start": "306660",
    "end": "312550"
  },
  {
    "text": "this will not compile the example meat can be used in other places here's an",
    "start": "312550",
    "end": "318490"
  },
  {
    "text": "interesting place it's a mutex and a lock card that uses this mutex in the",
    "start": "318490",
    "end": "324100"
  },
  {
    "text": "past we always had to specify the type of the mutex which was a little bit",
    "start": "324100",
    "end": "329290"
  },
  {
    "text": "nasty so you had to write lock god of SED mutex and if you used an SC",
    "start": "329290",
    "end": "335220"
  },
  {
    "text": "recursive time mutex that was a lot of characters to type now simply the",
    "start": "335220",
    "end": "341890"
  },
  {
    "text": "constructor makes it for you because the constructor takes mutex then",
    "start": "341890",
    "end": "347230"
  },
  {
    "text": "the type the parameter of the Locker template is used and of course this also",
    "start": "347230",
    "end": "356080"
  },
  {
    "start": "353000",
    "end": "799000"
  },
  {
    "text": "works for containers so now we can use vectors and we don't have to specify the",
    "start": "356080",
    "end": "362920"
  },
  {
    "text": "element type if it's clear what the element type is according to its",
    "start": "362920",
    "end": "369150"
  },
  {
    "text": "initialization so according to the constructor we call so here are some examples let's in let's declare vector",
    "start": "369150",
    "end": "377940"
  },
  {
    "text": "initialize with the elements 8 and 15 as you see I don't say that the element",
    "start": "377940",
    "end": "384430"
  },
  {
    "text": "type is int it will be deduced because we have a couple of constructors so what",
    "start": "384430",
    "end": "390640"
  },
  {
    "text": "happens here is the compiler tries to find the the constructor that should be",
    "start": "390640",
    "end": "395950"
  },
  {
    "text": "called here well we have here all the constructors listed and the last one is",
    "start": "395950",
    "end": "401320"
  },
  {
    "text": "it according to the overloading rules the last one it's the one called we have black",
    "start": "401320",
    "end": "408310"
  },
  {
    "text": "priority taking the one with the initializer list and in the initializer",
    "start": "408310",
    "end": "414130"
  },
  {
    "text": "list we say it's an initializer list of T and because we have T they're specified we can deduce that because the",
    "start": "414130",
    "end": "421990"
  },
  {
    "text": "elements 8 and 58 and 15 are in that the type T is an int which of course would",
    "start": "421990",
    "end": "429310"
  },
  {
    "text": "not work if we would have different data types there for example so that's okay",
    "start": "429310",
    "end": "436120"
  },
  {
    "text": "that compact and they're also compiled for only one element like here well I",
    "start": "436120",
    "end": "442090"
  },
  {
    "text": "told you we have to talk also about the ugly pieces of C++ 17 or the little bit",
    "start": "442090",
    "end": "449830"
  },
  {
    "text": "strange or nasty consequences of that so there's another interesting consequence if you now specify the",
    "start": "449830",
    "end": "458670"
  },
  {
    "text": "initialization with parenthesis you get a problem which we also introduced in",
    "start": "458670",
    "end": "464920"
  },
  {
    "text": "C++ 11 because we have unfortunately",
    "start": "464920",
    "end": "470130"
  },
  {
    "text": "some history and the history says that there's a constructor that takes in size",
    "start": "470130",
    "end": "477160"
  },
  {
    "text": "and then an initial value if you don't",
    "start": "477160",
    "end": "482740"
  },
  {
    "text": "use curly braces the last constructor is not used initializer lists only work",
    "start": "482740",
    "end": "489880"
  },
  {
    "text": "with curly braces so another constructor will be used the constructor that will be used will be the false one taking a",
    "start": "489880",
    "end": "497650"
  },
  {
    "text": "size and a key or a quantity reference and that consti reference is an int it's",
    "start": "497650",
    "end": "507280"
  },
  {
    "text": "in 15 so what we create here is in vector of in with eight elements all",
    "start": "507280",
    "end": "512409"
  },
  {
    "text": "having the value 15 this is probably not intuitive we now have brace installation",
    "start": "512410",
    "end": "519070"
  },
  {
    "text": "please use it it's better than anything else even if others claim that this is",
    "start": "519070",
    "end": "524320"
  },
  {
    "text": "wrong they have no clue because they don't like changed",
    "start": "524320",
    "end": "529920"
  },
  {
    "text": "autolearn we can't just specify the eight with parentheses because the only",
    "start": "530120",
    "end": "538889"
  },
  {
    "text": "constructor or the constructor that would fit here would be the third one and the third one doesn't deduce T at",
    "start": "538889",
    "end": "546750"
  },
  {
    "text": "all it's just a number so therefore this will not compile and by the way I should",
    "start": "546750",
    "end": "552329"
  },
  {
    "text": "say something here if you'd pass eight and then a string literal that will also",
    "start": "552329",
    "end": "561839"
  },
  {
    "text": "not work why because we take the in the",
    "start": "561839",
    "end": "572730"
  },
  {
    "text": "first constructor we take the parameter T by reference and if it's parameter by",
    "start": "572730",
    "end": "581220"
  },
  {
    "text": "reference that means that the string literal is not decayed which means we",
    "start": "581220",
    "end": "588240"
  },
  {
    "text": "take the original type of the string literal so if our string little is high or hey in Norway",
    "start": "588240",
    "end": "596339"
  },
  {
    "text": "hei you have the type an array of four",
    "start": "596339",
    "end": "603149"
  },
  {
    "text": "constant characters and you try to insensate this template by have being T",
    "start": "603149",
    "end": "610980"
  },
  {
    "text": "an array of four constant characters and that's not allowed so that will not",
    "start": "610980",
    "end": "616019"
  },
  {
    "text": "compile and here's another thing that will not compile which is let's",
    "start": "616019",
    "end": "621540"
  },
  {
    "text": "initialize this by elements of another container so we have a set of strings",
    "start": "621540",
    "end": "628140"
  },
  {
    "text": "and we do something in between and later on we decide that we want to initialize",
    "start": "628140",
    "end": "634440"
  },
  {
    "text": "a vector but by all the elements of that are currently in s this will not compile",
    "start": "634440",
    "end": "642050"
  },
  {
    "text": "because we don't find any appropriate any appropriate constructor where we can",
    "start": "642050",
    "end": "649380"
  },
  {
    "text": "easily did use type T there's a constructor the constructor that's obviously taking is the one in the",
    "start": "649380",
    "end": "656100"
  },
  {
    "text": "middle taking two iterators and an optional a locator and but",
    "start": "656100",
    "end": "662910"
  },
  {
    "text": "this is not used because how do you did use type T from here so how do you did",
    "start": "662910",
    "end": "670320"
  },
  {
    "text": "use the element type that the vector should get well we decided it's",
    "start": "670320",
    "end": "676500"
  },
  {
    "text": "important enough to int it's another feature for yet for that and the feature is deduction guides so we can help the",
    "start": "676500",
    "end": "685350"
  },
  {
    "text": "compiler to deduce the type of the template according to the way we",
    "start": "685350",
    "end": "691710"
  },
  {
    "text": "construct the object and that's a deduction guide and you see it here this",
    "start": "691710",
    "end": "697680"
  },
  {
    "text": "deduction I'd look at the syntax looks like a declaration of a constructor it's",
    "start": "697680",
    "end": "704040"
  },
  {
    "text": "outside the class but in the same scope where the class is defined that's",
    "start": "704040",
    "end": "709950"
  },
  {
    "text": "important both is mandatory and with an error we say well if I initialize in",
    "start": "709950",
    "end": "716700"
  },
  {
    "text": "vector with two arbitrary iterators well",
    "start": "716700",
    "end": "721800"
  },
  {
    "text": "let's did use that the vector element type is the value type were the",
    "start": "721800",
    "end": "728880"
  },
  {
    "text": "iterators point to peter",
    "start": "728880",
    "end": "734090"
  },
  {
    "text": "so the question is the the last but second line wouldn't that now call the",
    "start": "747070",
    "end": "753970"
  },
  {
    "text": "initializer list constructor as far as I know not I'm not sure I immediately have",
    "start": "753970",
    "end": "761899"
  },
  {
    "text": "the answer for that we're talking about the nasty darkness of overloading routes and where things match probably the the",
    "start": "761899",
    "end": "771730"
  },
  {
    "text": "constructor taking to iterators is the better match because it has no type conversion maybe not but I'm pretty sure",
    "start": "771730",
    "end": "778940"
  },
  {
    "text": "or try that out but I might be wrong never trust anybody teaching anything about C++ nobody in this world has",
    "start": "778940",
    "end": "788769"
  },
  {
    "text": "understanding of all the features in C++ yeah I I have to check it afterwards but",
    "start": "788769",
    "end": "796070"
  },
  {
    "text": "I thought I'd write it up okay we love C",
    "start": "796070",
    "end": "801290"
  },
  {
    "start": "799000",
    "end": "1067000"
  },
  {
    "text": "person here see here's a complete definition because I skipped in the directing guides I skipped the allocators and so that's a complete way",
    "start": "801290",
    "end": "811579"
  },
  {
    "text": "to say let's deduce the type of the elements from the iterators we take to",
    "start": "811579",
    "end": "817760"
  },
  {
    "text": "initialize the vector so now there comes",
    "start": "817760",
    "end": "822980"
  },
  {
    "text": "an another interesting thing what happens if I pass two string metals",
    "start": "822980",
    "end": "830589"
  },
  {
    "text": "think a little bit about it",
    "start": "831339",
    "end": "835390"
  },
  {
    "text": "which constructor is called we have curly braces so it could be an",
    "start": "837339",
    "end": "843379"
  },
  {
    "text": "initializer list but this is also two objects so any other constructor taking",
    "start": "843379",
    "end": "849829"
  },
  {
    "text": "two parameters might be called so we have another a couple of other candidates and yes you know what the",
    "start": "849829",
    "end": "859459"
  },
  {
    "text": "initializer list constructor is taking who so we have here the right thing we",
    "start": "859459",
    "end": "867139"
  },
  {
    "text": "have initialized the constructor taking two strings we pass an initializer list",
    "start": "867139",
    "end": "873019"
  },
  {
    "text": "and this is initialized by a vector of construct because T and the initializer",
    "start": "873019",
    "end": "879109"
  },
  {
    "text": "list is not a reference the array type",
    "start": "879109",
    "end": "884569"
  },
  {
    "text": "of the elements is deduced to become Khan's character T so let's use",
    "start": "884569",
    "end": "891579"
  },
  {
    "text": "parentheses instead of curly braces",
    "start": "891579",
    "end": "897309"
  },
  {
    "text": "which routes out the initializer list constructor because it always needs",
    "start": "897309",
    "end": "903189"
  },
  {
    "text": "curly braces which one is called the",
    "start": "903189",
    "end": "913489"
  },
  {
    "text": "next the answer is the one taking two iterators",
    "start": "913489",
    "end": "918970"
  },
  {
    "text": "because a knitter because these are two string literals which decay to cons",
    "start": "922090",
    "end": "929240"
  },
  {
    "text": "character star contesta means we have",
    "start": "929240",
    "end": "934610"
  },
  {
    "text": "two pointers and pointer is a valid iterator and it is used the funny thing",
    "start": "934610",
    "end": "941840"
  },
  {
    "text": "is that the first iterator is the address of high in the second iterator",
    "start": "941840",
    "end": "948230"
  },
  {
    "text": "which is the end of the range it's the end of world which means that the",
    "start": "948230",
    "end": "954680"
  },
  {
    "text": "elements inside our characters cons characters that is deduced but if we are",
    "start": "954680",
    "end": "963650"
  },
  {
    "text": "lucky we get a quorum because when he is",
    "start": "963650",
    "end": "969320"
  },
  {
    "text": "in a location in your program after world so we get an we had no real",
    "start": "969320",
    "end": "978950"
  },
  {
    "text": "distance between the two you get finally you get at runtime and an allocation",
    "start": "978950",
    "end": "984470"
  },
  {
    "text": "error because your your program probably can't allocate all the amount of memory",
    "start": "984470",
    "end": "989510"
  },
  {
    "text": "that lies between these two string literals in your program if it's the",
    "start": "989510",
    "end": "994850"
  },
  {
    "text": "other way around so high is just in front of world it might work if there's something in",
    "start": "994850",
    "end": "1001630"
  },
  {
    "text": "between it might have some the I don't know ten ten hundred elements so this is",
    "start": "1001630",
    "end": "1009220"
  },
  {
    "text": "undefined behavior this is a very nasty runtime error and maybe we should fix",
    "start": "1009220",
    "end": "1014350"
  },
  {
    "text": "that it's not easy to fix that because we want to initialize the vector of of",
    "start": "1014350",
    "end": "1020550"
  },
  {
    "text": "tape from containers where for example by another vector that has characters",
    "start": "1020550",
    "end": "1026110"
  },
  {
    "text": "inside and the other vector natively might use iterators that are ordinary",
    "start": "1026110",
    "end": "1031839"
  },
  {
    "text": "pointers so we have no easy work around this is another problem which we got from C we have no difference between",
    "start": "1031839",
    "end": "1038890"
  },
  {
    "text": "Eros and pointers etc this is a key but",
    "start": "1038890",
    "end": "1044920"
  },
  {
    "text": "you have seen it already so always initialize with three elements that's the rule you learn from that",
    "start": "1044920",
    "end": "1051240"
  },
  {
    "text": "and by the way it's always better to use curly braces and parentheses that's the",
    "start": "1051240",
    "end": "1057520"
  },
  {
    "text": "other rule and I'm serious about that because people think Arantes are better than curly braces we don't have this",
    "start": "1057520",
    "end": "1064750"
  },
  {
    "text": "problem with curly braces okay let's go",
    "start": "1064750",
    "end": "1071470"
  },
  {
    "start": "1067000",
    "end": "1257000"
  },
  {
    "text": "to the next feed compile compile time if means that at compile time we can decide",
    "start": "1071470",
    "end": "1078520"
  },
  {
    "text": "which part of a template or even of an on template is used and compiled here",
    "start": "1078520",
    "end": "1089170"
  },
  {
    "text": "you see an example and this is a good example because it it will not work with run time if look at this we try to",
    "start": "1089170",
    "end": "1097510"
  },
  {
    "text": "convert any type we pass and value of any type we pass to a string and we try",
    "start": "1097510",
    "end": "1103810"
  },
  {
    "text": "different approaches if it's an arithmetic type so integer or floating-point value we caught two",
    "start": "1103810",
    "end": "1111310"
  },
  {
    "text": "string other is if this is a string we just return the string and otherwise we",
    "start": "1111310",
    "end": "1116530"
  },
  {
    "text": "try to call a constructor the important thing here is if we pass 42 42 is an",
    "start": "1116530",
    "end": "1127870"
  },
  {
    "text": "arithmetic type so two string is the appropriate thing but the third the else",
    "start": "1127870",
    "end": "1133750"
  },
  {
    "text": "statement would not compile for this type so if we have a runtime if runtime",
    "start": "1133750",
    "end": "1141040"
  },
  {
    "text": "it means our statements have to be valid with the runtime if this code would not",
    "start": "1141040",
    "end": "1147610"
  },
  {
    "text": "never compile none of these applications so with a compile time if this will",
    "start": "1147610",
    "end": "1153730"
  },
  {
    "text": "compile because the return constructor",
    "start": "1153730",
    "end": "1159850"
  },
  {
    "text": "the last return statement is scattered as we say and that means that it will be",
    "start": "1159850",
    "end": "1167020"
  },
  {
    "text": "ignored provided it depends on a template parameter if it will try to be",
    "start": "1167020",
    "end": "1175870"
  },
  {
    "text": "compiled and it has to be valid unless you use visual C++ because they don't",
    "start": "1175870",
    "end": "1181570"
  },
  {
    "text": "implement templates rules correctly for years now they know that they have to fix it unfortunately the fix will break this",
    "start": "1181570",
    "end": "1187720"
  },
  {
    "text": "thing code so there's an interesting new option for the compiler now / permissive",
    "start": "1187720",
    "end": "1195909"
  },
  {
    "text": "- where you can can turn up whether you can turn on correct handling of",
    "start": "1195909",
    "end": "1201370"
  },
  {
    "text": "templates including correct handling of contacts with and then see whether you",
    "start": "1201370",
    "end": "1207009"
  },
  {
    "text": "made everything correct one common error is that I assume in the first case a",
    "start": "1207009",
    "end": "1214740"
  },
  {
    "text": "string of 42 that if in the else part I have an assertion that this assertion is",
    "start": "1214740",
    "end": "1221830"
  },
  {
    "text": "not triggered this is wrong it will be triggered unless the assertion uses type",
    "start": "1221830",
    "end": "1228879"
  },
  {
    "text": "T or the object X because asset and as",
    "start": "1228879",
    "end": "1234970"
  },
  {
    "text": "for templates in general discarded statements statements that are ignored",
    "start": "1234970",
    "end": "1240549"
  },
  {
    "text": "because according to the compiler and we know that they are not used only you really ignored if they don't depend on",
    "start": "1240549",
    "end": "1248860"
  },
  {
    "text": "the template parameter otherwise they are part of the first five face check of templates and they have to be valid so",
    "start": "1248860",
    "end": "1255279"
  },
  {
    "text": "beware here's another example we have a",
    "start": "1255279",
    "end": "1261610"
  },
  {
    "text": "new way to initialized objects well - excuse me - to call an if statement this",
    "start": "1261610",
    "end": "1268299"
  },
  {
    "text": "is a new if we were so successful with for loop coming different and that we",
    "start": "1268299",
    "end": "1276730"
  },
  {
    "text": "thought oh it's a good idea to extend our control structures even more so now we have an if with an initialization you",
    "start": "1276730",
    "end": "1286990"
  },
  {
    "text": "see what you can do you can say if then you have an initialization and then you",
    "start": "1286990",
    "end": "1293559"
  },
  {
    "text": "have a condition you can do that with if you can do that even with is",
    "start": "1293559",
    "end": "1300539"
  },
  {
    "text": "constructive then the interesting thing is the",
    "start": "1300539",
    "end": "1305649"
  },
  {
    "text": "initialization might be a runtime issue the condition is still a compile time issue so look at this code this is",
    "start": "1305649",
    "end": "1313750"
  },
  {
    "text": "something you can write now I in my estate my I initialize a lock guard that means I",
    "start": "1313750",
    "end": "1321190"
  },
  {
    "text": "try to lock a mutex this is initialized at the beginning of the if and will be",
    "start": "1321190",
    "end": "1328230"
  },
  {
    "text": "distracted at the end of the else if there's any otherwise at the end of the",
    "start": "1328230",
    "end": "1333700"
  },
  {
    "text": "if so in both cases in the then and in the else part we have the mutex lock so",
    "start": "1333700",
    "end": "1340930"
  },
  {
    "text": "that we can use that you can use the object that is protected by this mutex",
    "start": "1340930",
    "end": "1348370"
  },
  {
    "text": "either in the then or in the else part which is decided at compile time so that",
    "start": "1348370",
    "end": "1353680"
  },
  {
    "text": "no unnecessary code is generated when we know at compile time for example what is the value type of the of the object",
    "start": "1353680",
    "end": "1362110"
  },
  {
    "text": "passed here okay another caveat here don't forget to give",
    "start": "1362110",
    "end": "1370000"
  },
  {
    "text": "a name to the lock up if you don't use",
    "start": "1370000",
    "end": "1375580"
  },
  {
    "text": "LG here then you are locking a temporary",
    "start": "1375580",
    "end": "1382300"
  },
  {
    "text": "object which is immediately unlocked before we come to the condition so the",
    "start": "1382300",
    "end": "1390460"
  },
  {
    "text": "lock no longer works a couple of people like this and say well let's use the",
    "start": "1390460",
    "end": "1395950"
  },
  {
    "text": "underscore here make clear it I don't care for the name but I need to underscore as good it's an interesting",
    "start": "1395950",
    "end": "1403600"
  },
  {
    "text": "question whether this is good or bad style good and with this compile time if",
    "start": "1403600",
    "end": "1410590"
  },
  {
    "start": "1407000",
    "end": "1544000"
  },
  {
    "text": "we can come to a couple of things I want to discuss about the core language at the end who's familiar with very attic",
    "start": "1410590",
    "end": "1421270"
  },
  {
    "text": "templates whew ok very attic templates",
    "start": "1421270",
    "end": "1426490"
  },
  {
    "text": "is from C++ ileft hey we have it now seven years time to learn it",
    "start": "1426490",
    "end": "1435750"
  },
  {
    "text": "this this is an example of very attic templates and it works roughly the",
    "start": "1436139",
    "end": "1443289"
  },
  {
    "text": "following you say my print takes one argument of any type and an arbitrary",
    "start": "1443289",
    "end": "1449649"
  },
  {
    "text": "number of arguments of an arbitrary number of other types by saying type",
    "start": "1449649",
    "end": "1455019"
  },
  {
    "text": "name dot on top and then types dot dot dot and then later on ax dot or thought",
    "start": "1455019",
    "end": "1460210"
  },
  {
    "text": "you say this is representing a so called parameter Peck so a couple of arguments",
    "start": "1460210",
    "end": "1466359"
  },
  {
    "text": "either types or objects how is it used",
    "start": "1466359",
    "end": "1471549"
  },
  {
    "text": "well if I call for example print for three arguments then the first argument",
    "start": "1471549",
    "end": "1476619"
  },
  {
    "text": "first arc of type T is hello and the other argument are multiple arguments of",
    "start": "1476619",
    "end": "1483489"
  },
  {
    "text": "different types so what this means is when we follow the guidelines of this of",
    "start": "1483489",
    "end": "1489599"
  },
  {
    "text": "this print let's print out the first argument and then call print for the remaining arguments called",
    "start": "1489599",
    "end": "1495849"
  },
  {
    "text": "acts and that means we recursively call ourselves and that means now the first",
    "start": "1495849",
    "end": "1501729"
  },
  {
    "text": "arc is a double we print the double and we call print again for the remaining arcs which is only one and then it's",
    "start": "1501729",
    "end": "1508809"
  },
  {
    "text": "called this print for the remaining arc and call print for this first ACK string",
    "start": "1508809",
    "end": "1515049"
  },
  {
    "text": "and the remaining arcs is empty so let's call print for empty and empty is a",
    "start": "1515049",
    "end": "1520629"
  },
  {
    "text": "special case we have print for no argument and effectively as a template",
    "start": "1520629",
    "end": "1526059"
  },
  {
    "text": "that will be done at compile time so effectively we it effectively the code",
    "start": "1526059",
    "end": "1532149"
  },
  {
    "text": "generated here just prints out all the arguments good",
    "start": "1532149",
    "end": "1537820"
  },
  {
    "text": "this is C plus was 11 so can we improve",
    "start": "1537820",
    "end": "1543039"
  },
  {
    "text": "this a little bit okay here's the first example let's check whether how many arguments",
    "start": "1543039",
    "end": "1549879"
  },
  {
    "start": "1544000",
    "end": "1693000"
  },
  {
    "text": "we have we have size of dot dot dot we can say",
    "start": "1549879",
    "end": "1555410"
  },
  {
    "text": "how many remaining arguments are there and the F idea might be well if the",
    "start": "1555410",
    "end": "1560720"
  },
  {
    "text": "number of remaining arguments is zero I don't int recursion I don't call print again",
    "start": "1560720",
    "end": "1566150"
  },
  {
    "text": "and fortunately this does not work because I just told you templates in",
    "start": "1566150",
    "end": "1574580"
  },
  {
    "text": "sense e8 everything this is you are using a runtime feature but the question",
    "start": "1574580",
    "end": "1580790"
  },
  {
    "text": "whether print is of and has to be provided is a compile time question so",
    "start": "1580790",
    "end": "1586670"
  },
  {
    "text": "even if you have only one parameter passed the and the remaining arguments are empty do you have to have a print",
    "start": "1586670",
    "end": "1593990"
  },
  {
    "text": "for an empty list of arguments otherwise this does not compile but now we have",
    "start": "1593990",
    "end": "1599000"
  },
  {
    "text": "C++ 70 so what do we do we use a compile time ease and with our time with this",
    "start": "1599000",
    "end": "1607400"
  },
  {
    "text": "box this antsy recursion can we improve",
    "start": "1607400",
    "end": "1613730"
  },
  {
    "text": "it even better oh yes because runtime excuse me compile",
    "start": "1613730",
    "end": "1619190"
  },
  {
    "text": "time instantiation recursive compile time instantiation takes a lot of time and resources of the compiler so let's",
    "start": "1619190",
    "end": "1626330"
  },
  {
    "text": "invent something better we have something better for these cases like",
    "start": "1626330",
    "end": "1632420"
  },
  {
    "text": "this this is a fold expert all the expression is a new feature of C++ 17",
    "start": "1632420",
    "end": "1639020"
  },
  {
    "text": "where you can say for all the Abbott for every number of arguments I give you",
    "start": "1639020",
    "end": "1644210"
  },
  {
    "text": "here please combine them with the lesson operator and on the left there should a",
    "start": "1644210",
    "end": "1650270"
  },
  {
    "text": "CDC out ok this the expression is in parentheses three dots in the middle and",
    "start": "1650270",
    "end": "1658340"
  },
  {
    "text": "then around your parameter pick and your initial value and the operation which",
    "start": "1658340",
    "end": "1664970"
  },
  {
    "text": "has to provide it twice it's not allowed to ask different operations there so",
    "start": "1664970",
    "end": "1670070"
  },
  {
    "text": "this will print all the arguments and fertile it the argument will have no",
    "start": "1670070",
    "end": "1676190"
  },
  {
    "text": "space in between and you can't say internally in this folder expression",
    "start": "1676190",
    "end": "1681380"
  },
  {
    "text": "there's another argument so that we print a space before we print the arguments hey but this is c-plus pass so let's do",
    "start": "1681380",
    "end": "1689749"
  },
  {
    "text": "something better let's let's call a",
    "start": "1689749",
    "end": "1695539"
  },
  {
    "start": "1693000",
    "end": "1787000"
  },
  {
    "text": "helper function to help a template that prints up a space before we send the arc",
    "start": "1695539",
    "end": "1701269"
  },
  {
    "text": "and to see out okay so we print here the",
    "start": "1701269",
    "end": "1710450"
  },
  {
    "text": "first argument because it should not have a space before but for all the other other arguments we say out we",
    "start": "1710450",
    "end": "1716740"
  },
  {
    "text": "sequentially print them out to see how by after we printed the space before so",
    "start": "1716740",
    "end": "1722720"
  },
  {
    "text": "pay space before Prince first a space and then the argument this would have",
    "start": "1722720",
    "end": "1728330"
  },
  {
    "text": "been undefined behavior if we would not",
    "start": "1728330",
    "end": "1733700"
  },
  {
    "text": "have fixed something else in the standard because what is essentially",
    "start": "1733700",
    "end": "1741619"
  },
  {
    "text": "called here is the statement on the right and on the bottom of the right so",
    "start": "1741619",
    "end": "1747369"
  },
  {
    "text": "essentially we compile print to see out space before the second argument and",
    "start": "1747369",
    "end": "1753230"
  },
  {
    "text": "then space before the third argument before c++ seventeen it was not",
    "start": "1753230",
    "end": "1759110"
  },
  {
    "text": "guaranteed when space before is called so space before might be called twice so",
    "start": "1759110",
    "end": "1769100"
  },
  {
    "text": "we print two spaces and then we take the outcome of space before and writes into",
    "start": "1769100",
    "end": "1774649"
  },
  {
    "text": "CL so the outcome might be two spaces then the 7.5 and then world without the",
    "start": "1774649",
    "end": "1782450"
  },
  {
    "text": "space in between what I'm talking about here is a fix we have here you see",
    "start": "1782450",
    "end": "1789830"
  },
  {
    "start": "1787000",
    "end": "1911000"
  },
  {
    "text": "another example that was one of the motivating examples this code was broken before C++ 17 I have a string I want to",
    "start": "1789830",
    "end": "1799100"
  },
  {
    "text": "replace the first eight character and then I want to in place even by sometimes and you don't buy I and the",
    "start": "1799100",
    "end": "1806419"
  },
  {
    "text": "point was it could print if sometimes it's it's sometimes work if I believe",
    "start": "1806419",
    "end": "1812619"
  },
  {
    "text": "this would be the case it's really find",
    "start": "1812619",
    "end": "1818840"
  },
  {
    "text": "stay mint is evaluated after we replace two first eight characters but it turned out",
    "start": "1818840",
    "end": "1826430"
  },
  {
    "text": "that there were possible other outcomes of this o but people also usually think",
    "start": "1826430",
    "end": "1837560"
  },
  {
    "text": "is in this output statements F is called before G which is not guaranteed so if F",
    "start": "1837560",
    "end": "1846680"
  },
  {
    "text": "depends on the outcome as it has a side effect from G this did something",
    "start": "1846680",
    "end": "1852140"
  },
  {
    "text": "different and the other example let's print out I increment it and then I",
    "start": "1852140",
    "end": "1857380"
  },
  {
    "text": "decrement it the outcome of this depending on your compiler could have been all these combinations so we fix",
    "start": "1857380",
    "end": "1865580"
  },
  {
    "text": "that because it was too confusing for a couple of people we define now new",
    "start": "1865580",
    "end": "1871490"
  },
  {
    "text": "evaluation folder for a couple of other operations before did it only for end or",
    "start": "1871490",
    "end": "1877850"
  },
  {
    "text": "and the comma operator now have it for more you see them here listed please",
    "start": "1877850",
    "end": "1884480"
  },
  {
    "text": "note that we still have no defined order for the arguments and a function we only",
    "start": "1884480",
    "end": "1890570"
  },
  {
    "text": "specify that if we have a function the left part so the expression that defines",
    "start": "1890570",
    "end": "1897200"
  },
  {
    "text": "which function is called is evaluated before all the evaluations of the",
    "start": "1897200",
    "end": "1902540"
  },
  {
    "text": "arguments and therefore the example you just saw works and is guaranteed to work",
    "start": "1902540",
    "end": "1909920"
  },
  {
    "text": "correct we can make it up even better so just to give you some more clue about",
    "start": "1909920",
    "end": "1916340"
  },
  {
    "start": "1911000",
    "end": "1977000"
  },
  {
    "text": "the fold expression you can do it that way look at this look at the statement",
    "start": "1916340",
    "end": "1923570"
  },
  {
    "text": "at the bottom the red statement at the bottom this is a fold expression saying I'm using the comma operator to call a",
    "start": "1923570",
    "end": "1932830"
  },
  {
    "text": "sequence of the lambda for each of my arguments so this is effectively",
    "start": "1932830",
    "end": "1939730"
  },
  {
    "text": "combined as follows it says after printing the first argument we print out",
    "start": "1939730",
    "end": "1945320"
  },
  {
    "text": "out with space for 7.5 comma out with space for spring",
    "start": "1945320",
    "end": "1951880"
  },
  {
    "text": "and things like that will now happen maybe not in your code but at least in libraries you use ok and there's",
    "start": "1952120",
    "end": "1961570"
  },
  {
    "text": "something else let's parameterize this because is it a good idea to print a space here no of",
    "start": "1961570",
    "end": "1968500"
  },
  {
    "text": "course we should be able to specify what is printed here as a separator between the different elements we want to print",
    "start": "1968500",
    "end": "1976810"
  },
  {
    "text": "so we have another feature called Auto parameters of templates so I can say now",
    "start": "1976810",
    "end": "1984880"
  },
  {
    "start": "1977000",
    "end": "2074000"
  },
  {
    "text": "my separator that should be printed between the different arguments is by",
    "start": "1984880",
    "end": "1990040"
  },
  {
    "text": "default as separator being a space the outer here means I don't require that",
    "start": "1990040",
    "end": "1996850"
  },
  {
    "text": "this is a character it could be something else and by doing that we",
    "start": "1996850",
    "end": "2004470"
  },
  {
    "text": "could say ok let's use the default so let's print a space within all these",
    "start": "2004470",
    "end": "2009840"
  },
  {
    "text": "words let's use a single other character",
    "start": "2009840",
    "end": "2015150"
  },
  {
    "text": "I could pass the end 7 so between all the different words I would get 7",
    "start": "2015150",
    "end": "2022250"
  },
  {
    "text": "that's probably there will be applications for that I'm pretty sure and we have another way we have another",
    "start": "2022250",
    "end": "2028620"
  },
  {
    "text": "feature now we can now pretty close to find that there's a string you still",
    "start": "2028620",
    "end": "2034320"
  },
  {
    "text": "can't directly pass a string literal to a template that will hopefully come with C++ 20 but you can do it now that way so",
    "start": "2034320",
    "end": "2042750"
  },
  {
    "text": "you need two lines you first have to declare static Const array so comma",
    "start": "2042750",
    "end": "2048450"
  },
  {
    "text": "space and if you pass this to this print function the auto becomes an array and",
    "start": "2048450",
    "end": "2055290"
  },
  {
    "text": "pointer of characters and is used here as a separators who you print out hi",
    "start": "2055290",
    "end": "2061980"
  },
  {
    "text": "comma space 7.5 comma space well that's another feature we had the alto in",
    "start": "2061980",
    "end": "2068909"
  },
  {
    "text": "tablets ok good let's get that let's go through the",
    "start": "2068910",
    "end": "2076260"
  },
  {
    "start": "2074000",
    "end": "2203000"
  },
  {
    "text": "library salting well optionals",
    "start": "2076260",
    "end": "2082820"
  },
  {
    "text": "we have introduced options now for those who know boost it has been there for a long time we can now say I have a value that might",
    "start": "2082820",
    "end": "2090320"
  },
  {
    "text": "be there might be not so I can say if I have an int I have an in I have no end",
    "start": "2090320",
    "end": "2096169"
  },
  {
    "text": "arrow or for a string I have a string or no string at all it's different from being the spring",
    "start": "2096169",
    "end": "2101750"
  },
  {
    "text": "empty so if you have to need two different states for strings distinguish",
    "start": "2101750",
    "end": "2107120"
  },
  {
    "text": "between empty string and no string this is possible but optional and optional",
    "start": "2107120",
    "end": "2113320"
  },
  {
    "text": "salt II can even be sorted look at this example you can say let's initialize a",
    "start": "2113320",
    "end": "2120380"
  },
  {
    "text": "set of optionals you unsigned values the first optional unsigned values 42 the",
    "start": "2120380",
    "end": "2127550"
  },
  {
    "text": "next one is I have no unsigned value that's not up now in boost it's none and",
    "start": "2127550",
    "end": "2132580"
  },
  {
    "text": "then I have a couple of other values then I have not opted and minus 11 which",
    "start": "2132580",
    "end": "2138170"
  },
  {
    "text": "gets converted to a very big number and then seven seven seven so and now in a",
    "start": "2138170",
    "end": "2144800"
  },
  {
    "text": "for loop let's deal with all the different elements in this asset that means we have a follow-up / optional and",
    "start": "2144800",
    "end": "2151760"
  },
  {
    "text": "sides so I first check is there is there an unsigned not so is it this is an",
    "start": "2151760",
    "end": "2158600"
  },
  {
    "text": "option where you if there's no option value then print there's no value otherwise if it's greater than 100 see",
    "start": "2158600",
    "end": "2166160"
  },
  {
    "text": "we can compare directly with the underlying type so with the non sign I",
    "start": "2166160",
    "end": "2171730"
  },
  {
    "text": "print this is a value with star and append a big and then otherwise I print",
    "start": "2171730",
    "end": "2180050"
  },
  {
    "text": "the value so I get output like this looks nice it's helpful as usual with",
    "start": "2180050",
    "end": "2187760"
  },
  {
    "text": "IANA said it yesterday at least that well every new feature is overused so be",
    "start": "2187760",
    "end": "2194180"
  },
  {
    "text": "careful not to be used everywhere an optional value just only use it if all",
    "start": "2194180",
    "end": "2200210"
  },
  {
    "text": "the other ways are not good enough and and you have some surprises",
    "start": "2200210",
    "end": "2208710"
  },
  {
    "start": "2203000",
    "end": "2301000"
  },
  {
    "text": "so here's the first surprise if I have an optional bull and I test whether this",
    "start": "2208710",
    "end": "2216610"
  },
  {
    "text": "optional is less than false the answer is true because in the rule is that any",
    "start": "2216610",
    "end": "2227350"
  },
  {
    "text": "value that is not set is less than the lowest value of the underlying time so",
    "start": "2227350",
    "end": "2233950"
  },
  {
    "text": "the under the various are true and false so no optional no boolean value is less",
    "start": "2233950",
    "end": "2239380"
  },
  {
    "text": "than thoughts and the same is true for optional at mind if I have an optional",
    "start": "2239380",
    "end": "2245800"
  },
  {
    "text": "unsigned I it makes sense to test do I have a value less than zero okay and you",
    "start": "2245800",
    "end": "2256300"
  },
  {
    "text": "have some other consequences if I have an optional boo there's a difference between if no optional and if optional",
    "start": "2256300",
    "end": "2263800"
  },
  {
    "text": "equals false in the first case we check is there value or not and the second",
    "start": "2263800",
    "end": "2271030"
  },
  {
    "text": "case we check is there value that has a value fault and the same is true if I",
    "start": "2271030",
    "end": "2276340"
  },
  {
    "text": "have an optional raw pointer is their various first check the other check is is the value not null pointer so we had",
    "start": "2276340",
    "end": "2286240"
  },
  {
    "text": "some discussion whether we want to enable this or not that's by the way the reason optional comes with sea bass was",
    "start": "2286240",
    "end": "2292870"
  },
  {
    "text": "17 and not before we decided no special handing so you know that now you have seen my slides",
    "start": "2292870",
    "end": "2298600"
  },
  {
    "text": "you don't make this error there's",
    "start": "2298600",
    "end": "2305200"
  },
  {
    "text": "another problem with optional if you",
    "start": "2305200",
    "end": "2310620"
  },
  {
    "text": "have a function returning an optional string and then you call a function",
    "start": "2310620",
    "end": "2318430"
  },
  {
    "text": "giving you the value then beware that",
    "start": "2318430",
    "end": "2324130"
  },
  {
    "text": "this is a reference you gives you a",
    "start": "2324130",
    "end": "2329290"
  },
  {
    "text": "reference to the underlying value if there's some if not it would raise an accept so the naive application of this",
    "start": "2329290",
    "end": "2338410"
  },
  {
    "text": "what people started to use is let's take a function get vector that returns",
    "start": "2338410",
    "end": "2344800"
  },
  {
    "text": "a vector of int and then we iterate over the values oh I need the ability to",
    "start": "2344800",
    "end": "2351609"
  },
  {
    "text": "return that I don't have a vector at all instead of returning an empty vector so",
    "start": "2351609",
    "end": "2357880"
  },
  {
    "text": "what people do is they switch to an optional vector of int and in the loop",
    "start": "2357880",
    "end": "2363400"
  },
  {
    "text": "they say well let's iterate over the value of the optional int the problem is",
    "start": "2363400",
    "end": "2370240"
  },
  {
    "text": "get up Vector will return the temporary object dot value will give you a",
    "start": "2370240",
    "end": "2376780"
  },
  {
    "text": "reference to that and the moment you have yours and start with the loop the temporary object is gone so your access",
    "start": "2376780",
    "end": "2385950"
  },
  {
    "text": "values of an object that's no longer there this is something we have to deal",
    "start": "2385950",
    "end": "2392830"
  },
  {
    "text": "with because more and more we're talking about new types that deal with reference semantics and we discussed solutions for",
    "start": "2392830",
    "end": "2400300"
  },
  {
    "text": "this problem and by the way I had no one big company that problems like this this",
    "start": "2400300",
    "end": "2407020"
  },
  {
    "text": "is not only a problem with optional this is general a problem if in a range based for loop you create a temporary and you",
    "start": "2407020",
    "end": "2413560"
  },
  {
    "text": "call in the range based follow and member functions that gives you a reference to this object and there are",
    "start": "2413560",
    "end": "2420910"
  },
  {
    "text": "companies who say well you shouldn't use the range based follow because of that",
    "start": "2420910",
    "end": "2427140"
  },
  {
    "text": "okay we have to fix that here is another",
    "start": "2427140",
    "end": "2433510"
  },
  {
    "text": "type variant variant is a new Union type you can say I have different possible",
    "start": "2433510",
    "end": "2441310"
  },
  {
    "text": "values one of the values I have you can even have so-called different alternatives of the same type let's look",
    "start": "2441310",
    "end": "2448660"
  },
  {
    "start": "2447000",
    "end": "2717000"
  },
  {
    "text": "at the application of this this is cool this is one of the coolest feature we",
    "start": "2448660",
    "end": "2454359"
  },
  {
    "text": "invented with C++ 17 well we didn't know that we adopted it from boost and look",
    "start": "2454359",
    "end": "2461260"
  },
  {
    "text": "at this the consequence if you have runtime polymorphism yeah so you have a",
    "start": "2461260",
    "end": "2466599"
  },
  {
    "text": "base class geometric objects and you have derived classes there are different",
    "start": "2466599",
    "end": "2471640"
  },
  {
    "text": "geometric object types so you have a circle and the line and they have implemented virtual",
    "start": "2471640",
    "end": "2478240"
  },
  {
    "text": "functions to move and draw the objects so that you can say let's create a",
    "start": "2478240",
    "end": "2484180"
  },
  {
    "text": "vector of geometric objects and in homogenous collection so we need a",
    "start": "2484180",
    "end": "2489520"
  },
  {
    "text": "pointer there that's a drawback we need a pointer with runtime polymorphism and then because we need a pointer we have",
    "start": "2489520",
    "end": "2497230"
  },
  {
    "text": "to call new otherwise we insert something that goes periscope if we",
    "start": "2497230",
    "end": "2502810"
  },
  {
    "text": "insert the address of a local object and then we have to use pointer semantics to",
    "start": "2502810",
    "end": "2509140"
  },
  {
    "text": "deal with it and then at the end don't forget to call the delete yeah new and",
    "start": "2509140",
    "end": "2515470"
  },
  {
    "text": "delete is evil you shouldn't use that anymore we have some workarounds yeah unique pointer SharePoint that they have",
    "start": "2515470",
    "end": "2521020"
  },
  {
    "text": "their own flaws here's some really cool solution for this problem",
    "start": "2521020",
    "end": "2526800"
  },
  {
    "text": "provided you know that this is a closed list of different geometric options so",
    "start": "2526800",
    "end": "2533170"
  },
  {
    "text": "that means you know all the different types the alternative is use a variant",
    "start": "2533170",
    "end": "2540900"
  },
  {
    "text": "use a variant that says my element type is either a circle or line now you no",
    "start": "2540900",
    "end": "2550270"
  },
  {
    "text": "longer need pointers you get back value semantics that means you don't need new",
    "start": "2550270",
    "end": "2556360"
  },
  {
    "text": "and delete and you don't run with the problems of using new and delete so you",
    "start": "2556360",
    "end": "2561820"
  },
  {
    "text": "can now say let's push back a new line let's push back and your circle that's",
    "start": "2561820",
    "end": "2567910"
  },
  {
    "text": "by value I return this a vector of elements that are either circles or",
    "start": "2567910",
    "end": "2573850"
  },
  {
    "text": "lines is rate over them I print them and here's the interesting part here is the",
    "start": "2573850",
    "end": "2581020"
  },
  {
    "text": "part where we need polymorphism because now I want to draw these different",
    "start": "2581020",
    "end": "2586990"
  },
  {
    "text": "objects and gamma but normally we would",
    "start": "2586990",
    "end": "2592060"
  },
  {
    "text": "use runtime polymorphism here here we use a function called visit visit is",
    "start": "2592060",
    "end": "2599340"
  },
  {
    "text": "something like a little local vtable implemented so it says I call for my",
    "start": "2599340",
    "end": "2609760"
  },
  {
    "text": "element types the right function object taking either a circle or line so you",
    "start": "2609760",
    "end": "2616540"
  },
  {
    "text": "can pass you a different function object that has different overloads of the function call operator or you pass the",
    "start": "2616540",
    "end": "2623350"
  },
  {
    "text": "generic lambda a generic lambda is a template that is callable for both a",
    "start": "2623350",
    "end": "2628540"
  },
  {
    "text": "line and a circle so what we'd program here is we have programmed two lambdas one taking a circle one for a line and",
    "start": "2628540",
    "end": "2635530"
  },
  {
    "text": "if it takes a circle its raw for the circle otherwise for the line it's called line draw for the line and the",
    "start": "2635530",
    "end": "2642820"
  },
  {
    "text": "visitor has internally a jump table or something like that to call the right thing pending on the argument type so",
    "start": "2642820",
    "end": "2649840"
  },
  {
    "text": "this works and you don't need any delete anymore you have value semantics in this",
    "start": "2649840",
    "end": "2657990"
  },
  {
    "text": "polymorphic approach the only restriction is you have a closed set so the variant has to know which different",
    "start": "2657990",
    "end": "2664630"
  },
  {
    "text": "options you have and forget about forget about base class forget about local",
    "start": "2664630",
    "end": "2673990"
  },
  {
    "text": "functions we don't need them anymore because this is not using the usual runtime polymorphism just have just",
    "start": "2673990",
    "end": "2682240"
  },
  {
    "text": "different values different data types and it works it could be a city string",
    "start": "2682240",
    "end": "2687790"
  },
  {
    "text": "it could be an int could also be a variant here and you can could have define different handling for different",
    "start": "2687790",
    "end": "2695050"
  },
  {
    "text": "types in the visitors how do you do that to define different type different handling and visitors if you prefer to",
    "start": "2695050",
    "end": "2703630"
  },
  {
    "text": "define handling of types in a lambda",
    "start": "2703630",
    "end": "2709440"
  },
  {
    "text": "instead of a function object because function updates are more complicated and you can't easily program them",
    "start": "2709440",
    "end": "2716530"
  },
  {
    "text": "locally here's a way you can do that look at this I want to have different",
    "start": "2716530",
    "end": "2723910"
  },
  {
    "start": "2717000",
    "end": "2874000"
  },
  {
    "text": "implementation how I handle circles and lines in my example so I call visit and",
    "start": "2723910",
    "end": "2730240"
  },
  {
    "text": "I overload to lambda 1 lambda dealing",
    "start": "2730240",
    "end": "2736420"
  },
  {
    "text": "with a circle 1 lambda dealing with the lime and here you can have totally different code so how is it work",
    "start": "2736420",
    "end": "2743530"
  },
  {
    "text": "what is overload overload will hopefully standardized in c-plus worth 20 but not",
    "start": "2743530",
    "end": "2748780"
  },
  {
    "text": "yet look at this this is the divination definition of overload it's for template",
    "start": "2748780",
    "end": "2755440"
  },
  {
    "text": "took four lines of tricky template code so you define look at this what I define",
    "start": "2755440",
    "end": "2762910"
  },
  {
    "text": "your overload overload is taking is is a",
    "start": "2762910",
    "end": "2768070"
  },
  {
    "text": "constructor as a data type do we create an object and we initialize it by two lambdas this is a template so first of",
    "start": "2768070",
    "end": "2776590"
  },
  {
    "text": "all we need class template argument deduction to deduce the type of the",
    "start": "2776590",
    "end": "2784030"
  },
  {
    "text": "cylinders this is a very a deck template and we did use all the types of all the",
    "start": "2784030",
    "end": "2789910"
  },
  {
    "text": "lambdas and for that we need a deduction guide look at the end of the definition",
    "start": "2789910",
    "end": "2795730"
  },
  {
    "text": "we say if we initialize an overload objects with different factors please",
    "start": "2795730",
    "end": "2801460"
  },
  {
    "text": "did use all the functions to add of the declaration of this type and then we",
    "start": "2801460",
    "end": "2809230"
  },
  {
    "text": "have how do we deal now with these factors so we have abstract overload",
    "start": "2809230",
    "end": "2814360"
  },
  {
    "text": "taking these different functor types and passing them to the base class so we",
    "start": "2814360",
    "end": "2821710"
  },
  {
    "text": "derived from the data type of the first number and from the data type of the second lambda you got that and then we",
    "start": "2821710",
    "end": "2831700"
  },
  {
    "text": "say I wanna in my class inherit all the different function call operators we",
    "start": "2831700",
    "end": "2838330"
  },
  {
    "text": "have in all the base classes by having a using declaration there that's it and that way",
    "start": "2838330",
    "end": "2847030"
  },
  {
    "text": "it works and that way we have now a feature to overload lambdas so that you have kind of different behavior and if",
    "start": "2847030",
    "end": "2853750"
  },
  {
    "text": "you want you can say the first lambda takes out oh that's a general case and for a of special cases for other types",
    "start": "2853750",
    "end": "2861990"
  },
  {
    "text": "okay and that way Rach time volume of us is now replaceable as long we have a closed",
    "start": "2861990",
    "end": "2869350"
  },
  {
    "text": "set of different types I like that so a few other things at 10 minutes left",
    "start": "2869350",
    "end": "2878400"
  },
  {
    "start": "2874000",
    "end": "3027000"
  },
  {
    "text": "first of all let's effectively solve strings or sub strings so let's",
    "start": "2878400",
    "end": "2884530"
  },
  {
    "text": "initialize a vector of strings so that the elements are ID 0 ID 1 etc but we",
    "start": "2884530",
    "end": "2892930"
  },
  {
    "text": "have both ID with lowercase and ID with capital case so the elements out there",
    "start": "2892930",
    "end": "2898560"
  },
  {
    "text": "so I want to sort them two ways I want to solve them in general and I solve",
    "start": "2898560",
    "end": "2905800"
  },
  {
    "text": "them according to ignoring the first two elements so that the first two elements not to stand behind each other because",
    "start": "2905800",
    "end": "2914020"
  },
  {
    "text": "otherwise if we sort them in general and all the lowercase strings would be in",
    "start": "2914020",
    "end": "2919270"
  },
  {
    "text": "front of all the uppercase strings ok we can call salt that's the ordinary salt",
    "start": "2919270",
    "end": "2926560"
  },
  {
    "text": "we have sought four strings that compile and we'll solve the elements so that we",
    "start": "2926560",
    "end": "2931780"
  },
  {
    "text": "have the lowercase ID 0 id-1 id2 and then as a second part the uppercase",
    "start": "2931780",
    "end": "2938140"
  },
  {
    "text": "strings we can say I want to ignore the first two characters so by doing that we",
    "start": "2938140",
    "end": "2944500"
  },
  {
    "text": "might say let's take the substring let's take a substring so let's ignore the",
    "start": "2944500",
    "end": "2949960"
  },
  {
    "text": "first two characters unfortunately this is a pretty expensive operation because",
    "start": "2949960",
    "end": "2958240"
  },
  {
    "text": "substring creates a new temporary string so for each element we in a new spring",
    "start": "2958240",
    "end": "2966420"
  },
  {
    "text": "for both elements and then we compare this is really expensive you see the",
    "start": "2966420",
    "end": "2971800"
  },
  {
    "text": "different different behavior at the different performance here so we have",
    "start": "2971800",
    "end": "2977470"
  },
  {
    "text": "effect of three words in this program that's there's no proof that it's always",
    "start": "2977470",
    "end": "2982990"
  },
  {
    "text": "factor 3 versus just on my laptop it's write it out with a couple of compilations and different number of",
    "start": "2982990",
    "end": "2990010"
  },
  {
    "text": "elements so what can we do we have a new type called saps spring view instead of",
    "start": "2990010",
    "end": "2996220"
  },
  {
    "text": "using a spring we can create a view to a string which refers to the underlying",
    "start": "2996220",
    "end": "3003450"
  },
  {
    "text": "data of the string and call substring there and by that look at this",
    "start": "3003450",
    "end": "3011910"
  },
  {
    "text": "we have almost roughly the same performance I would not claim this as",
    "start": "3011910",
    "end": "3016990"
  },
  {
    "text": "faster than before this is too close to prove here something but this is a close",
    "start": "3016990",
    "end": "3023440"
  },
  {
    "text": "to that so what we you see as a string view a string view is is something where",
    "start": "3023440",
    "end": "3030190"
  },
  {
    "start": "3027000",
    "end": "3234000"
  },
  {
    "text": "you say I have something that looks like a string but it does not own the characters so here's an example",
    "start": "3030190",
    "end": "3037180"
  },
  {
    "text": "that's my string view taking high well be where you might provide a function",
    "start": "3037180",
    "end": "3046140"
  },
  {
    "text": "adding two string views like here of course the outcome is a new string so we",
    "start": "3046140",
    "end": "3054130"
  },
  {
    "text": "declare plus 4 2 string views and then the outcome is a new string we create and then some cool guy might might say",
    "start": "3054130",
    "end": "3062710"
  },
  {
    "text": "oh I have a template called Concord which adds two values of type T and",
    "start": "3062710",
    "end": "3068109"
  },
  {
    "text": "returns this type T which looks pretty reasonable but it's not that reasonable",
    "start": "3068109",
    "end": "3074319"
  },
  {
    "text": "because you have claimed here that's the sum of two objects of type T always",
    "start": "3074319",
    "end": "3080440"
  },
  {
    "text": "created T or convert to a T which is a nightmare now let's call this for the",
    "start": "3080440",
    "end": "3087279"
  },
  {
    "text": "string view so what you get is you get a",
    "start": "3087279",
    "end": "3092440"
  },
  {
    "text": "some object temporarily created in the operator PLAs and now the return value",
    "start": "3092440",
    "end": "3102029"
  },
  {
    "text": "converts because we return a T converts to a string view which means we have an",
    "start": "3102029",
    "end": "3109299"
  },
  {
    "text": "object referring to the characters of this temporary object and then we leave",
    "start": "3109299",
    "end": "3114309"
  },
  {
    "text": "the function bingo we return an object referring to Mary that was freed and",
    "start": "3114309",
    "end": "3120960"
  },
  {
    "text": "then if we use it we have a runtime error so there are some issues with",
    "start": "3120960",
    "end": "3127150"
  },
  {
    "text": "string you be careful it's good if you take it locally and you know it's the",
    "start": "3127150",
    "end": "3133900"
  },
  {
    "text": "object they refer to is still there it's it's it's at least dangerous if you use it as a return type and by the way",
    "start": "3133900",
    "end": "3140859"
  },
  {
    "text": "this is a good example to prove that it's a good idea idea to use Auto as",
    "start": "3140859",
    "end": "3146920"
  },
  {
    "text": "return type in generic code instead of a specific type because by using out who",
    "start": "3146920",
    "end": "3152349"
  },
  {
    "text": "you disable implicit conversions in the return statement want you so can we",
    "start": "3152349",
    "end": "3164499"
  },
  {
    "text": "still improve this example what we said let's use strings instead of a string view yes we can because we now have",
    "start": "3164499",
    "end": "3172089"
  },
  {
    "text": "parallel algorithms so let's use them that's easy",
    "start": "3172089",
    "end": "3178390"
  },
  {
    "text": "at a first argument in front of all the other arguments so just at execution",
    "start": "3178390",
    "end": "3185710"
  },
  {
    "text": "path please execute this in parallel do",
    "start": "3185710",
    "end": "3191319"
  },
  {
    "text": "you think you get a better performance you never know it depends on how long it",
    "start": "3191319",
    "end": "3198640"
  },
  {
    "text": "takes to start a thread on my laptop on my laptop with for car with two cars and",
    "start": "3198640",
    "end": "3207249"
  },
  {
    "text": "hyper-threading this is the outcome so",
    "start": "3207249",
    "end": "3212880"
  },
  {
    "text": "there is a significant factor on my laptop but that might be different on your system wherever you have it but you",
    "start": "3212880",
    "end": "3220869"
  },
  {
    "text": "see there is a chance and at the end it turned out that the prowl execute string",
    "start": "3220869",
    "end": "3226329"
  },
  {
    "text": "using string views is even faster than the original simple sort okay that's",
    "start": "3226329",
    "end": "3235269"
  },
  {
    "start": "3234000",
    "end": "3365000"
  },
  {
    "text": "benefit of prowl algorithms we have we have other examples for that I will show",
    "start": "3235269",
    "end": "3242079"
  },
  {
    "text": "them in one minute first of all I would like to introduce my last topic file",
    "start": "3242079",
    "end": "3248710"
  },
  {
    "text": "system Larry the file system library now is updated is introduced adapted to see",
    "start": "3248710",
    "end": "3255789"
  },
  {
    "text": "about 17 yeah this looks pretty ok I",
    "start": "3255789",
    "end": "3262690"
  },
  {
    "text": "mean you I can pass your path and if the passes exists and there's a regular file",
    "start": "3262690",
    "end": "3271539"
  },
  {
    "text": "I print this is a fire with the size if it's a directory I print the elements etc so this is code",
    "start": "3271539",
    "end": "3278110"
  },
  {
    "text": "we more or less adapt from boost and where we only have to change the header",
    "start": "3278110",
    "end": "3284380"
  },
  {
    "text": "file and the namespaces so if we come to the case where we iterate over a",
    "start": "3284380",
    "end": "3291190"
  },
  {
    "text": "directory the outcome might be this on",
    "start": "3291190",
    "end": "3296860"
  },
  {
    "text": "UNIX if I run this program on Windows if",
    "start": "3296860",
    "end": "3306100"
  },
  {
    "text": "I run this program on Windows the outcome is this so we print out the",
    "start": "3306100",
    "end": "3313270"
  },
  {
    "text": "elements quote and quote it means every backslash is has an additional backslash",
    "start": "3313270",
    "end": "3320640"
  },
  {
    "text": "Lulla yes we sounded I said I think this",
    "start": "3320640",
    "end": "3326320"
  },
  {
    "text": "Muslim is sick but anyway so what do we have to do call string so convert past",
    "start": "3326320",
    "end": "3333640"
  },
  {
    "text": "two thing and put double quotes around to make this really portable two",
    "start": "3333640",
    "end": "3340030"
  },
  {
    "text": "different platforms okay so you see in",
    "start": "3340030",
    "end": "3346140"
  },
  {
    "text": "every little thing we adopted in C++ 17 there's something some drawback we have",
    "start": "3346140",
    "end": "3354010"
  },
  {
    "text": "to talk about and that's that whether or not all examples that were those that",
    "start": "3354010",
    "end": "3359560"
  },
  {
    "text": "fit into this hour so let me close this talk by two slides the first slide is",
    "start": "3359560",
    "end": "3366850"
  },
  {
    "start": "3365000",
    "end": "3443000"
  },
  {
    "text": "this is whose base initialization now",
    "start": "3366850",
    "end": "3373830"
  },
  {
    "text": "you will detect narrowing you will not run in problems we saw by initializing a",
    "start": "3373830",
    "end": "3382420"
  },
  {
    "text": "vector of two strings you can initialize a vector with two elements it's",
    "start": "3382420",
    "end": "3388330"
  },
  {
    "text": "self-explanatory we have fixed and C plus four 17 the combination of curly",
    "start": "3388330",
    "end": "3395050"
  },
  {
    "text": "braces and auto unless you use an equal sign that's a big mistake we made in C++",
    "start": "3395050",
    "end": "3400930"
  },
  {
    "text": "17 so don't use the equal sign with braces we have now introduced",
    "start": "3400930",
    "end": "3408549"
  },
  {
    "text": "class employs a ssin with braces which was not possibly before and that's the only way now you can initiate an enum",
    "start": "3408549",
    "end": "3416079"
  },
  {
    "text": "class object we have extended aggregate initialization so that you could use it",
    "start": "3416079",
    "end": "3422499"
  },
  {
    "text": "and so please use it please use it there are still some flaws we have to fix for",
    "start": "3422499",
    "end": "3428349"
  },
  {
    "text": "example in atomic for example something else that will be fixed in 20",
    "start": "3428349",
    "end": "3433509"
  },
  {
    "text": "but now brace initialization without the equal side is far better than anything",
    "start": "3433509",
    "end": "3439569"
  },
  {
    "text": "else it doesn't serve all the purposes but it's far better so that's it jack up",
    "start": "3439569",
    "end": "3446589"
  },
  {
    "text": "is looking already this is this clock correct I only have 45 minutes I thought",
    "start": "3446589",
    "end": "3455679"
  },
  {
    "text": "I have one hour oh yeah",
    "start": "3455679",
    "end": "3460259"
  },
  {
    "text": "excuse me I didn't know that yeah normally I don't know that Oh take",
    "start": "3465610",
    "end": "3471470"
  },
  {
    "text": "replace by the next talks Li for that yep yeah sorry for that",
    "start": "3471470",
    "end": "3481030"
  }
]