[
  {
    "text": "so hello everybody and given the hour also good morning so uh my name is",
    "start": "6120",
    "end": "11559"
  },
  {
    "text": "Ferdinando papal and I am a mostly net developer at mongodb in uh in Copenhagen",
    "start": "11559",
    "end": "19320"
  },
  {
    "text": "and the reason why I'm here is that I would like to tell you a little bit about why we decide to move away from",
    "start": "19320",
    "end": "25119"
  },
  {
    "text": "Isle weaving and we started using sord generators in the uhet dec of Realm so",
    "start": "25119",
    "end": "32800"
  },
  {
    "text": "who has heard about realm before one person amazing so um I will",
    "start": "32800",
    "end": "39600"
  },
  {
    "text": "tell you more about it later but realm is an um objectoriented database that is",
    "start": "39600",
    "end": "45719"
  },
  {
    "text": "mostly targeting mobile so just to uh set up the context we are going to talk",
    "start": "45719",
    "end": "51640"
  },
  {
    "text": "about code generation. net this because both Isle weaving and sord generators",
    "start": "51640",
    "end": "56879"
  },
  {
    "text": "are two different techniques that can be used to generate code in net and we are talking about the stupid type of code",
    "start": "56879",
    "end": "63280"
  },
  {
    "text": "generation not AI code generation or something like that so just normal code generation let's say so um in particular",
    "start": "63280",
    "end": "71960"
  },
  {
    "text": "we're going to see how these were used in the uh in the reals dek and how uh",
    "start": "71960",
    "end": "78960"
  },
  {
    "text": "and why we decide to move from one approach from the other and what we uh what we got from it so before going into",
    "start": "78960",
    "end": "87159"
  },
  {
    "text": "this part though we have to you have to get an introduction about what is il weaving and what are s",
    "start": "87159",
    "end": "92399"
  },
  {
    "text": "generators okay first of all um so what is il weaving so when you compile um C",
    "start": "92399",
    "end": "100640"
  },
  {
    "text": "code it gets compiled first to something called ilil that stands for Intermediate Language that is a sort of highlevel um",
    "start": "100640",
    "end": "109320"
  },
  {
    "text": "high level assembly then depending on your configuration it either gets compiled to machine code at runtime if",
    "start": "109320",
    "end": "115280"
  },
  {
    "text": "you're using jit or ahead of time if you're using aot the uh but there is always this",
    "start": "115280",
    "end": "122360"
  },
  {
    "text": "intermediate step with the uh with the IL and if you ever work with Java this is a very similar idea to bite code so",
    "start": "122360",
    "end": "129520"
  },
  {
    "text": "this is a platform independent um code that then gets converted to uh machine code when it's",
    "start": "129520",
    "end": "136720"
  },
  {
    "text": "necessary so IL weaving essentially is the process of modifying the I code in",
    "start": "136720",
    "end": "143080"
  },
  {
    "text": "some way to do something it almost feels like magic because you can modify",
    "start": "143080",
    "end": "148400"
  },
  {
    "text": "everything with um weaving you can add classes change the behavioral methods",
    "start": "148400",
    "end": "153519"
  },
  {
    "text": "change uh attributes and so on one important thing to remember is that Isle weaving happens after compilation so the",
    "start": "153519",
    "end": "161319"
  },
  {
    "text": "code already needs to be in a compilable state before the is weaving is doing um",
    "start": "161319",
    "end": "167800"
  },
  {
    "text": "is doing anything and another thing to remember is that this is not visible to the user this happening after the code",
    "start": "167800",
    "end": "174519"
  },
  {
    "text": "is compiled so the user doesn't know that anything has happened so why is this is useful well",
    "start": "174519",
    "end": "180640"
  },
  {
    "text": "it's useful to generate repetitive or um optimized code just to give you an",
    "start": "180640",
    "end": "186400"
  },
  {
    "text": "example about how I code looks like so if you have a um a property like the one",
    "start": "186400",
    "end": "192680"
  },
  {
    "text": "you see on the left with the uh the string name property what you have on the right is the getter and Setter uh in",
    "start": "192680",
    "end": "200280"
  },
  {
    "text": "ilil uh it's not important that you understand what is happening here but it's just to give an idea about how I code looks like and as you can see it's",
    "start": "200280",
    "end": "207480"
  },
  {
    "text": "not really easy to understand what is happening if you don't have um experience with it okay now to give you",
    "start": "207480",
    "end": "215280"
  },
  {
    "text": "an idea about a library that is using uh I weaving and maybe you have used or that could be interesting there is",
    "start": "215280",
    "end": "221480"
  },
  {
    "text": "property change. fodi so if you ever worked with any mvvm framework like uh",
    "start": "221480",
    "end": "227840"
  },
  {
    "text": "Maui zamarin avalonia uh Uno and so on um then you know that if you want to",
    "start": "227840",
    "end": "234280"
  },
  {
    "text": "bind something to the UI you need to implement I notified property change the only thing that is on this property is",
    "start": "234280",
    "end": "241280"
  },
  {
    "text": "this event called uh sorry on this property on this interface is this property change event and the contract",
    "start": "241280",
    "end": "248519"
  },
  {
    "text": "here is that if you're implementing this interface then every time one of the",
    "start": "248519",
    "end": "254519"
  },
  {
    "text": "properties that uh that are in the object are changing you should raise this event with the name of the property",
    "start": "254519",
    "end": "260919"
  },
  {
    "text": "that is change so this is used by this framework so that they get these notifications and the UI gets",
    "start": "260919",
    "end": "268160"
  },
  {
    "text": "updated now if if you have to do this yourself uh then from a class like what",
    "start": "268160",
    "end": "274800"
  },
  {
    "text": "you see here on the left you all to do what you see here on the right so essentially what is happening is that",
    "start": "274800",
    "end": "280199"
  },
  {
    "text": "you need to have a baking field for all the properties and then every time a property changes you need to check if",
    "start": "280199",
    "end": "285880"
  },
  {
    "text": "it's uh if the new value is equal to the previous one then you need to set the Bing field and then you need to call you",
    "start": "285880",
    "end": "291880"
  },
  {
    "text": "need to invoke this event that inside that in this case it's inside this on property change method that you see on",
    "start": "291880",
    "end": "297520"
  },
  {
    "text": "the bottom as you can imagine this is a lot of code to for doing not much and",
    "start": "297520",
    "end": "305400"
  },
  {
    "text": "it's so it's repetitive and it's also error prone for example if you have dependent properties for example if you",
    "start": "305400",
    "end": "311840"
  },
  {
    "text": "have a full name that is dependent on the first name and the C name so in this case you need to uh you need to take",
    "start": "311840",
    "end": "318600"
  },
  {
    "text": "care of these two so what um property change f is doing essentially is going",
    "start": "318600",
    "end": "326160"
  },
  {
    "text": "into your uh dll after it has been compiled finding classes that are declared implementing this I notified",
    "start": "326160",
    "end": "332560"
  },
  {
    "text": "property change interface and change the IL so that the notifications are raised",
    "start": "332560",
    "end": "338000"
  },
  {
    "text": "uh correctly when the properties are changed one important thing to know is that all of this is invisible to the",
    "start": "338000",
    "end": "345280"
  },
  {
    "text": "user so if you if you have this this library in your code you will still be able to see what you have here on the",
    "start": "345280",
    "end": "350919"
  },
  {
    "text": "left what you have here on the right it's not visible at least in the um in",
    "start": "350919",
    "end": "356840"
  },
  {
    "text": "the ID but we'll see a second how you can see it so um now okay how do you see um",
    "start": "356840",
    "end": "365080"
  },
  {
    "text": "I code how do you see whift code this depends what do you want to do if um for",
    "start": "365080",
    "end": "370599"
  },
  {
    "text": "example you're just curious about how I code looks like for something simple for something that you can just copy paste",
    "start": "370599",
    "end": "377280"
  },
  {
    "text": "and so on then you can use something like uh Shar club that is an online.net",
    "start": "377280",
    "end": "384360"
  },
  {
    "text": "playground and that is useful for various different reason but you can go here",
    "start": "384360",
    "end": "390560"
  },
  {
    "text": "and you can write",
    "start": "390560",
    "end": "395199"
  },
  {
    "text": "something like this I could have written before but okay so and then here on the",
    "start": "400080",
    "end": "406400"
  },
  {
    "text": "right you can see the corresponding code for example here you see the getter for the name property and if you select the",
    "start": "406400",
    "end": "413120"
  },
  {
    "text": "body you also have this uh this gray background and on the left it shows to",
    "start": "413120",
    "end": "419120"
  },
  {
    "text": "which part of the code it corresponds and actually if you go over it will also tell you what are these instructions",
    "start": "419120",
    "end": "425800"
  },
  {
    "text": "doing if you're interested in that okay so this is one possibility that you can",
    "start": "425800",
    "end": "430919"
  },
  {
    "text": "use if you are interested in how the code looks like for your code for your project or you want to see what is the",
    "start": "430919",
    "end": "437520"
  },
  {
    "text": "effect of is weaving then you need to use something like uh is spy or any",
    "start": "437520",
    "end": "443280"
  },
  {
    "text": "other the compiler so and I have a small example about it here so here I have a",
    "start": "443280",
    "end": "449720"
  },
  {
    "text": "this person property change class that is declared is implementing this I notifi property change and in this",
    "start": "449720",
    "end": "456680"
  },
  {
    "text": "project I've already added property change of F that I have talked about a second ago so as you can see this is",
    "start": "456680",
    "end": "462960"
  },
  {
    "text": "definition of the class I didn't do anything here now if you get um IL spy",
    "start": "462960",
    "end": "469680"
  },
  {
    "text": "and then you open the dll after compilation then you can navigate to",
    "start": "469680",
    "end": "475479"
  },
  {
    "text": "your class so you need to find first the name space and then the class",
    "start": "475479",
    "end": "481000"
  },
  {
    "text": "okay you can go here and select ilil and you will be able to see all of this that",
    "start": "481000",
    "end": "486840"
  },
  {
    "text": "is extremely unfriendly so if you want to understand what is happening you can select the C here and you can see",
    "start": "486840",
    "end": "493840"
  },
  {
    "text": "actually the compile code so the way that it works so um for example if you",
    "start": "493840",
    "end": "499520"
  },
  {
    "text": "take here the name property as you can see the the both the Setters and Getters",
    "start": "499520",
    "end": "504560"
  },
  {
    "text": "have been changed to do what I've said before so in this case the setter is checking if the new name property is the",
    "start": "504560",
    "end": "511440"
  },
  {
    "text": "same as before if it's not then we set the baking field and then the it calls this onproperty change method that is",
    "start": "511440",
    "end": "518919"
  },
  {
    "text": "also something that has been created by the by the",
    "start": "518919",
    "end": "524200"
  },
  {
    "text": "weaving and all of this is completely invisible to the ID so if you don't know",
    "start": "524200",
    "end": "529720"
  },
  {
    "text": "what the um if you have a library using L weaving the only way to really know what is happening is to use a DEC",
    "start": "529720",
    "end": "537000"
  },
  {
    "text": "compiler because otherwise this is invisible to you but anyway regarding this Library you",
    "start": "537000",
    "end": "542040"
  },
  {
    "text": "can imagine that this is particularly useful if you are working in this kind of um a MVM framework even though",
    "start": "542040",
    "end": "549399"
  },
  {
    "text": "nowadays there are also alternatives to this that are using also sord generators okay so this was just to give",
    "start": "549399",
    "end": "556000"
  },
  {
    "text": "you an idea about how to look at um I",
    "start": "556000",
    "end": "561200"
  },
  {
    "text": "code okay so now you know what is I weaving at least you should have like a",
    "start": "561200",
    "end": "566360"
  },
  {
    "text": "general idea now we need to look at Sur gener ators so um s generators were a",
    "start": "566360",
    "end": "572040"
  },
  {
    "text": "compiler feature that was added in um in Net 5 and are part of the compilation",
    "start": "572040",
    "end": "579000"
  },
  {
    "text": "pipeline essentially when there are s generators in your project the compilation happens like you see in this",
    "start": "579000",
    "end": "584680"
  },
  {
    "text": "screenshot that I've taken from the documentation so there is a first step of the compilation then there is the uh",
    "start": "584680",
    "end": "591200"
  },
  {
    "text": "thir generator part of the compilation in which the um compiler creates something that is called the compilation",
    "start": "591200",
    "end": "597600"
  },
  {
    "text": "object that is passed to the Sur generator with this compilation object the search generator can look into the",
    "start": "597600",
    "end": "604720"
  },
  {
    "text": "uh project code both from a syntactic and a semantic level and then and then",
    "start": "604720",
    "end": "610760"
  },
  {
    "text": "the SAR generator can eventually generate new source code it doesn't need to but it can then these uh new files",
    "start": "610760",
    "end": "618000"
  },
  {
    "text": "are added to the compilation and the compilation continues so s generator are only useful",
    "start": "618000",
    "end": "624120"
  },
  {
    "text": "to generate new code you cannot modify existing code and this is one of the",
    "start": "624120",
    "end": "629320"
  },
  {
    "text": "biggest difference is with ale weaving with weaving you can modify what's already there and you can add new things",
    "start": "629320",
    "end": "635240"
  },
  {
    "text": "with s genitors you can only add things they are only additive and another big difference is",
    "start": "635240",
    "end": "641600"
  },
  {
    "text": "that s generators are um the sord generation is happening during the compilation it's not something that is",
    "start": "641600",
    "end": "648320"
  },
  {
    "text": "happening um afterwards so why are they useful well they use they Camp of",
    "start": "648320",
    "end": "654760"
  },
  {
    "text": "applicability let's say it's very similar to the one of of uh weaving even",
    "start": "654760",
    "end": "659920"
  },
  {
    "text": "though they have some differences so they're very useful to generate um repetitive or optimized code for example",
    "start": "659920",
    "end": "667040"
  },
  {
    "text": "if you have ever used system. text. Json um then this is using a sear",
    "start": "667040",
    "end": "673200"
  },
  {
    "text": "generator at least since net uh six if I remember correctly so uh system. tex.",
    "start": "673200",
    "end": "678800"
  },
  {
    "text": "Json is a library that you can use to serialize and deserialize uh Json object",
    "start": "678800",
    "end": "685079"
  },
  {
    "text": "and the way that works is that um you define your class somewhere in your code",
    "start": "685079",
    "end": "691200"
  },
  {
    "text": "then in the uh then somewhere else you have this uh class that is deriving from",
    "start": "691200",
    "end": "697279"
  },
  {
    "text": "Jason serializer context and that um is decorated with this attribute that has the type of the",
    "start": "697279",
    "end": "704720"
  },
  {
    "text": "object that this context should be responsible for um this class needs to be partial",
    "start": "704720",
    "end": "710160"
  },
  {
    "text": "because s generators are additive so the S generator then is going into your code is generating a lot of other things and",
    "start": "710160",
    "end": "716600"
  },
  {
    "text": "then when you need to serialize some something you need to pass not only the object but also this",
    "start": "716600",
    "end": "722760"
  },
  {
    "text": "context okay but this library has existed much uh earlier than S genitors",
    "start": "722760",
    "end": "729000"
  },
  {
    "text": "so the reason why they decided to use S genitors now is that traditionally this",
    "start": "729000",
    "end": "735079"
  },
  {
    "text": "library was using reflection so there are some issues with reflection um first of all nowadays it's",
    "start": "735079",
    "end": "742560"
  },
  {
    "text": "also getting a little bit of push back because there is a lot of um push for",
    "start": "742560",
    "end": "748000"
  },
  {
    "text": "aot so this will be problematic in aot environment and also it's not very",
    "start": "748000",
    "end": "753240"
  },
  {
    "text": "performant because all of the um all of this is happening at run time so what",
    "start": "753240",
    "end": "760199"
  },
  {
    "text": "the S generator is doing essentially is analyzing your code looking at the properties looking at the type and then",
    "start": "760199",
    "end": "765800"
  },
  {
    "text": "generating the serialization already at compiled time so this is much more efficient and according to the Benchmark",
    "start": "765800",
    "end": "772040"
  },
  {
    "text": "this is at least twice as fast as the um as the runtime reflection approach",
    "start": "772040",
    "end": "780440"
  },
  {
    "text": "okay so um this was just to give an idea about a another sord generator okay so",
    "start": "780440",
    "end": "787720"
  },
  {
    "text": "how do you see s generated code well this really depends on your ID if you're like me and you are using visual studio",
    "start": "787720",
    "end": "793519"
  },
  {
    "text": "for Mach then you're out of luck because you cannot see them um if you're using if you're using visual Studio for",
    "start": "793519",
    "end": "799600"
  },
  {
    "text": "Windows the traditional one then you need to go inside your dependencies under the analyzers maybe it's a little",
    "start": "799600",
    "end": "805519"
  },
  {
    "text": "bit confusing and then you can find the libraries that have either an analyzer and the S generator and then if you",
    "start": "805519",
    "end": "811800"
  },
  {
    "text": "expand them you are able to see the uh generated files and they have this beautiful yellow Banner that tells you",
    "start": "811800",
    "end": "818440"
  },
  {
    "text": "that it's generated so you cannot actually um change it um actually if you want you one one",
    "start": "818440",
    "end": "827760"
  },
  {
    "text": "important thing also is that these files are visible from your ID but are not visible on your file system if you want",
    "start": "827760",
    "end": "834560"
  },
  {
    "text": "you can change something in the project file to make them uh to have them Ed on your um on your file system but it's not",
    "start": "834560",
    "end": "842240"
  },
  {
    "text": "something that is um set on by default and also if you do it you need also to remove them from the compilation",
    "start": "842240",
    "end": "848199"
  },
  {
    "text": "otherwise you have um you will get errors just as a as a note okay so now",
    "start": "848199",
    "end": "855720"
  },
  {
    "text": "you have an idea about what is weaving you have an idea about what our s jator now we need to take a look a little bit at realm so um realm is a reactive",
    "start": "855720",
    "end": "864839"
  },
  {
    "text": "objector andian crossplatform database that has been created mostly with Mobile in mind so with devices with lower",
    "start": "864839",
    "end": "871880"
  },
  {
    "text": "capabilities let's say and it's available for a lot of programming languages like C of course Swift codling",
    "start": "871880",
    "end": "878320"
  },
  {
    "text": "uh typescript and so on and it has a lot of nice features among which device sync",
    "start": "878320",
    "end": "884079"
  },
  {
    "text": "that allows to synchronize automatically objects between multiple devices and",
    "start": "884079",
    "end": "889360"
  },
  {
    "text": "with uh Atlas so mongodb on the cloud those are not the important features",
    "start": "889360",
    "end": "895040"
  },
  {
    "text": "there are two important things that are um that are necessary for the rest of this talk so first of all realm is",
    "start": "895040",
    "end": "902279"
  },
  {
    "text": "objectoriented and this means that when you work with realm there is no translation layer there is no mapping",
    "start": "902279",
    "end": "909360"
  },
  {
    "text": "done there is no irm um everything works with objects uh natively so if you're",
    "start": "909360",
    "end": "916399"
  },
  {
    "text": "using an a library that is wrapping a SQL database then you have a translation",
    "start": "916399",
    "end": "921680"
  },
  {
    "text": "layer that is converting what you get from SQL to your objects this is not happening with realm because everything",
    "start": "921680",
    "end": "927519"
  },
  {
    "text": "is already an object and another important thing is that realm objects are live so this means",
    "start": "927519",
    "end": "935160"
  },
  {
    "text": "that when you get the value of a realm of the property of a realm object this",
    "start": "935160",
    "end": "940519"
  },
  {
    "text": "value is coming directly from the database if you're setting the value of a property you're setting it into the",
    "start": "940519",
    "end": "946120"
  },
  {
    "text": "database so this means that um the objects that you get from realm the",
    "start": "946120",
    "end": "951240"
  },
  {
    "text": "objects the collections and so on always reflect the latest data that is um",
    "start": "951240",
    "end": "956639"
  },
  {
    "text": "stored in realm this is very different to a database that is using for example SQL",
    "start": "956639",
    "end": "964440"
  },
  {
    "text": "because in that case uh when you do a query you are getting some data in your",
    "start": "964440",
    "end": "969600"
  },
  {
    "text": "objects and then this data is static um if you change something in your data then it's not reflect in the database",
    "start": "969600",
    "end": "976399"
  },
  {
    "text": "and the data that you have there reflect the state of the object in the at the time that you did the query instead with",
    "start": "976399",
    "end": "983199"
  },
  {
    "text": "realm you always get the latest data and um you can also do it you can also",
    "start": "983199",
    "end": "989040"
  },
  {
    "text": "freeze let's say the object so they keep the same data but that's another thing and I have a small example actually to",
    "start": "989040",
    "end": "994560"
  },
  {
    "text": "show you how does this look in a in a",
    "start": "994560",
    "end": "999560"
  },
  {
    "text": "project okay so maybe going a little bit uh line by line so on the top I'm",
    "start": "999680",
    "end": "1005560"
  },
  {
    "text": "getting an instance of Realm so an instance of my database then I'm creating a j ID just that I'm using as a",
    "start": "1005560",
    "end": "1012240"
  },
  {
    "text": "primary key uh so that I can retrieve the object later then I have this ron. write um in",
    "start": "1012240",
    "end": "1019319"
  },
  {
    "text": "this case right is a the equivalent of a right transaction on in an SQL",
    "start": "1019319",
    "end": "1025120"
  },
  {
    "text": "database um then I'm calling add to add an object and",
    "start": "1025120",
    "end": "1032360"
  },
  {
    "text": "sorry and I'm adding this person where the ID is the ID I just created the name is Mario and the age is 22 then what I'm",
    "start": "1032360",
    "end": "1040240"
  },
  {
    "text": "doing here is that I am calling real. fine to find this object in the database",
    "start": "1040240",
    "end": "1045640"
  },
  {
    "text": "and then passing the primary key and um as assigning it to this person one variable and I'm doing this a second",
    "start": "1045640",
    "end": "1052480"
  },
  {
    "text": "time to assign it to another variable this is just to have two different",
    "start": "1052480",
    "end": "1057520"
  },
  {
    "text": "objects that are point two different objects in memory that are pointing to the same object in database uh believe",
    "start": "1057520",
    "end": "1064080"
  },
  {
    "text": "me when I tell you that find is not using any kind of caching so these are two different uh C object",
    "start": "1064080",
    "end": "1070280"
  },
  {
    "text": "okay so what I'm doing is that what I'm doing now is that I have a new right transaction and I'm changing the value",
    "start": "1070280",
    "end": "1076200"
  },
  {
    "text": "of the age of person one to 40 and then later I'm just printing the age of",
    "start": "1076200",
    "end": "1081440"
  },
  {
    "text": "person one and the age of person two so if you run",
    "start": "1081440",
    "end": "1088120"
  },
  {
    "text": "this put let me put it on the side and maybe make it a little bit",
    "start": "1088120",
    "end": "1094679"
  },
  {
    "text": "bigger okay so I mean not surprisingly the age of person one has become 40",
    "start": "1095360",
    "end": "1102039"
  },
  {
    "text": "that's not very surprising maybe the surprising thing is that also person two. ages become 40 and is why this is",
    "start": "1102039",
    "end": "1109799"
  },
  {
    "text": "happening this is happening because even though person one and person two are two different objects they're actually",
    "start": "1109799",
    "end": "1114840"
  },
  {
    "text": "pointing to the same object in database so when you get the value you're getting it directly from the database that's why",
    "start": "1114840",
    "end": "1122799"
  },
  {
    "text": "um and that's why realm objects are are live this was just to give you an idea about um how it looks",
    "start": "1122799",
    "end": "1130760"
  },
  {
    "text": "like okay oh so um now you have an idea about what",
    "start": "1130760",
    "end": "1139280"
  },
  {
    "text": "is I weaving you have an idea about what are generator and how realm what is",
    "start": "1139280",
    "end": "1144480"
  },
  {
    "text": "realm um now we need to take a look at why we decided to use uh these code",
    "start": "1144480",
    "end": "1149679"
  },
  {
    "text": "generation techniques in the first place and why we decided to move from using one approach to the other so when the",
    "start": "1149679",
    "end": "1157480"
  },
  {
    "text": "library was created that was before my time uh they decided to um to use um",
    "start": "1157480",
    "end": "1164320"
  },
  {
    "text": "Isle weaving and they decided to use is weaving behind the uh the model",
    "start": "1164320",
    "end": "1169600"
  },
  {
    "text": "definition so um what you have here on the left is how developers could write a",
    "start": "1169600",
    "end": "1176919"
  },
  {
    "text": "model for um for uh for a realm object and I was",
    "start": "1176919",
    "end": "1183720"
  },
  {
    "text": "discussing about this yesterday with someone uh in realm your uh model sorry",
    "start": "1183720",
    "end": "1189000"
  },
  {
    "text": "your objects are your schema there is no other schema defined anywhere else so the way that you define your objects is",
    "start": "1189000",
    "end": "1195200"
  },
  {
    "text": "your schema okay so um as you can see to in order to",
    "start": "1195200",
    "end": "1201039"
  },
  {
    "text": "define the realm object you just define a class that is deriving from this realm object then you define the properties",
    "start": "1201039",
    "end": "1208159"
  },
  {
    "text": "like you will do normally with the Setters and Getters there are also some attributes like primary key because this",
    "start": "1208159",
    "end": "1213720"
  },
  {
    "text": "is a database and that's it it looks almost like a plain old C object apart",
    "start": "1213720",
    "end": "1219559"
  },
  {
    "text": "from deriving from this realm object class okay now as I said before realm",
    "start": "1219559",
    "end": "1225679"
  },
  {
    "text": "objects are live so what we were doing with w is what you see here on the right",
    "start": "1225679",
    "end": "1231280"
  },
  {
    "text": "essentially we were going into the user code after the compilation and we",
    "start": "1231280",
    "end": "1236440"
  },
  {
    "text": "modifying the Setters and getter of the properties to call get value and set",
    "start": "1236440",
    "end": "1241520"
  },
  {
    "text": "value um without going too much into details set value and get value are methods that are getting the value from",
    "start": "1241520",
    "end": "1247919"
  },
  {
    "text": "the database or setting the value in the uh in the database um one important thing here is",
    "start": "1247919",
    "end": "1256159"
  },
  {
    "text": "that what you see here on the right it's an extremely simplified version of what",
    "start": "1256159",
    "end": "1261880"
  },
  {
    "text": "is the weer doing this is because the way that the Setters and Getters need to be modified depends on the type of the",
    "start": "1261880",
    "end": "1269320"
  },
  {
    "text": "property it depends also on the state of the object so if the object has been",
    "start": "1269320",
    "end": "1274360"
  },
  {
    "text": "already added to database or not because if the object has not been added to database then it works like a normal C",
    "start": "1274360",
    "end": "1280880"
  },
  {
    "text": "object you there is nothing else um happening so what you see here it's a",
    "start": "1280880",
    "end": "1286799"
  },
  {
    "text": "very simplified version this also gets much more complicated for collections and so on so this was just to give you",
    "start": "1286799",
    "end": "1292159"
  },
  {
    "text": "an idea so now the question is so why did we decided to do this well we decided to do",
    "start": "1292159",
    "end": "1299480"
  },
  {
    "text": "this because we want to give developer the best experience so the idea here is that developers when they're working",
    "start": "1299480",
    "end": "1305520"
  },
  {
    "text": "with realm they're working with something that looks like at least a native c-p object when you're working",
    "start": "1305520",
    "end": "1312080"
  },
  {
    "text": "realm you don't need to worry about calling get value set value or anything else you just use the object like you",
    "start": "1312080",
    "end": "1318200"
  },
  {
    "text": "will do another another SE object and then we behind the scenes take care of",
    "start": "1318200",
    "end": "1324640"
  },
  {
    "text": "changing the Setters and Getters so that they um they go directly into the",
    "start": "1324640",
    "end": "1330039"
  },
  {
    "text": "database so and as I said before this is something that is actually hidden from",
    "start": "1330039",
    "end": "1335840"
  },
  {
    "text": "developers you could have looked at it if you using a um a DEC compiler of",
    "start": "1335840",
    "end": "1343039"
  },
  {
    "text": "course and just to give you an idea so what you see here on the left is the way",
    "start": "1343039",
    "end": "1348159"
  },
  {
    "text": "that the getter looks like um before weaving and on the right you have the",
    "start": "1348159",
    "end": "1353960"
  },
  {
    "text": "getter after weaving um and this is only for a string property so it gets much",
    "start": "1353960",
    "end": "1360039"
  },
  {
    "text": "more complicated for other kind of um other kind of properties so this is just",
    "start": "1360039",
    "end": "1365320"
  },
  {
    "text": "to give you an an idea about how it looks like it doesn't really matter to understand everything okay so as I said",
    "start": "1365320",
    "end": "1374080"
  },
  {
    "text": "before I weaving is is an extremely powerful technique because it allows us to hide a lot of",
    "start": "1374080",
    "end": "1380520"
  },
  {
    "text": "complexity uh behind the model definition so that user don't need to worry about how the um about how realm",
    "start": "1380520",
    "end": "1389120"
  },
  {
    "text": "Works internally but it also has some major drawbacks so first of all it's not",
    "start": "1389120",
    "end": "1395919"
  },
  {
    "text": "really uh the code that you produce with I weaving is not really readable um I",
    "start": "1395919",
    "end": "1401039"
  },
  {
    "text": "code is made by a series of instructions that looks almost like assembly so it's",
    "start": "1401039",
    "end": "1406919"
  },
  {
    "text": "difficult to um to work with it and this also means that it's very difficult to",
    "start": "1406919",
    "end": "1412559"
  },
  {
    "text": "um extend this part of our code and this is this is obviously part of our code",
    "start": "1412559",
    "end": "1417640"
  },
  {
    "text": "but this is something that is very limited in scope because this is only about the model definition so when you",
    "start": "1417640",
    "end": "1424120"
  },
  {
    "text": "have to work with when we had to work with it you need to work on something that is completely different from the rest of your",
    "start": "1424120",
    "end": "1429799"
  },
  {
    "text": "code and just to give you an idea about um how the um the code that was doing",
    "start": "1429799",
    "end": "1436440"
  },
  {
    "text": "the weaving looks like you have it here on the left so as you can see it's a series of um insert insert insert then",
    "start": "1436440",
    "end": "1444520"
  },
  {
    "text": "you're creating these instructions and so on and this is only for a very simple property so this gets much more",
    "start": "1444520",
    "end": "1451039"
  },
  {
    "text": "complicated because we were also using weaving for some other things okay",
    "start": "1451039",
    "end": "1456200"
  },
  {
    "text": "another problem with weaving is that the changes are not visible for the final user so this almost feels like magic",
    "start": "1456200",
    "end": "1463320"
  },
  {
    "text": "developers don't know exactly what is what has happened to their code but it works in a certain way",
    "start": "1463320",
    "end": "1469480"
  },
  {
    "text": "um there is another problem is that Weavers can interfere with each other",
    "start": "1469480",
    "end": "1474520"
  },
  {
    "text": "because they can modify everything when you have multiple wers in your code then",
    "start": "1474520",
    "end": "1480000"
  },
  {
    "text": "you need to take you need to consider the fact that there could be another we wer that could be working on the same",
    "start": "1480000",
    "end": "1486559"
  },
  {
    "text": "code so you could have some unpredictable effects and that depends essentially on the order of weaving Even",
    "start": "1486559",
    "end": "1492960"
  },
  {
    "text": "in our case um for example this property change of for the library that I've shown you before",
    "start": "1492960",
    "end": "1498840"
  },
  {
    "text": "this this is a library that is implementing I notified property change but this is also something that we are",
    "start": "1498840",
    "end": "1504200"
  },
  {
    "text": "doing because we have internal notifications so we had to uh take care",
    "start": "1504200",
    "end": "1509399"
  },
  {
    "text": "of this essentially so that we don't do the same thing together and another problem is that the",
    "start": "1509399",
    "end": "1516799"
  },
  {
    "text": "um the code is not debuggable it's not debuggable because your debugger as no",
    "start": "1516799",
    "end": "1522679"
  },
  {
    "text": "code to jump to so if in this case it's only Setters and Getters so maybe you don't expect to be be able to step into",
    "start": "1522679",
    "end": "1529480"
  },
  {
    "text": "Setters and Getters but still if even if it was for methods you will not be able to debug it okay and there is another",
    "start": "1529480",
    "end": "1538440"
  },
  {
    "text": "big problem with weaving and that weaving is not part of the compilation",
    "start": "1538440",
    "end": "1543480"
  },
  {
    "text": "so when you're working weaving as I said before you are working with something that happens after the compilation has",
    "start": "1543480",
    "end": "1549520"
  },
  {
    "text": "been done so this means that the code already should be in a compilable state",
    "start": "1549520",
    "end": "1554720"
  },
  {
    "text": "you cannot have in your code and then uh wait for the we were to come and fix something for you so what is the problem",
    "start": "1554720",
    "end": "1563000"
  },
  {
    "text": "well a lot of developers asked us why um why if I want to declare a realm object",
    "start": "1563000",
    "end": "1569080"
  },
  {
    "text": "this needs to derive from the realm object class right why do I need to have a base class why can't I simply have an",
    "start": "1569080",
    "end": "1575320"
  },
  {
    "text": "interface well essentially this was the reason is because if we had the uh",
    "start": "1575320",
    "end": "1582159"
  },
  {
    "text": "classes uh declared this implementing this irm object interface like you have",
    "start": "1582159",
    "end": "1587480"
  },
  {
    "text": "here then this codes needs to be compiled somehow so you the developers",
    "start": "1587480",
    "end": "1593600"
  },
  {
    "text": "will need to go and then out toimplement the um the this interface maybe with",
    "start": "1593600",
    "end": "1599799"
  },
  {
    "text": "this uh not Implement exception for the properties and the methods and this looks extremely ugly so then what we",
    "start": "1599799",
    "end": "1607760"
  },
  {
    "text": "will do is that we will go into the code and then change the",
    "start": "1607760",
    "end": "1613919"
  },
  {
    "text": "um um essentially change the way that all these properties and this methods are working so we decided not to do this",
    "start": "1613919",
    "end": "1621960"
  },
  {
    "text": "for a couple of reasons first of all this is extremely ugly can you imagine",
    "start": "1621960",
    "end": "1627240"
  },
  {
    "text": "doing this for all your um for all your objects from your database it's it looks",
    "start": "1627240",
    "end": "1633320"
  },
  {
    "text": "really bad and also this is really uh this really this gives a really bad",
    "start": "1633320",
    "end": "1639440"
  },
  {
    "text": "experience because you have all these methods that seemingly are just doing",
    "start": "1639440",
    "end": "1644640"
  },
  {
    "text": "exception all the way then you run the code and your code is working as a normal so it feels very strange another problem",
    "start": "1644640",
    "end": "1651840"
  },
  {
    "text": "with this is that um if we had to do this this means that all these properties all these methods we will",
    "start": "1651840",
    "end": "1658600"
  },
  {
    "text": "need to weave them we'll need to do them in the Weaver and as I said before working with the Weaver is extremely",
    "start": "1658600",
    "end": "1664039"
  },
  {
    "text": "annoying so instead with the approach that we had with having a base class all these",
    "start": "1664039",
    "end": "1670240"
  },
  {
    "text": "methods or at least the majority of them were implementing in the base class that was in our project so it was much easier",
    "start": "1670240",
    "end": "1676399"
  },
  {
    "text": "to to manage but this is in the end it's a matter of",
    "start": "1676399",
    "end": "1681720"
  },
  {
    "text": "developer experience we decided to not uh go this way because it looks",
    "start": "1681720",
    "end": "1686919"
  },
  {
    "text": "extremely bad and it gives overall a bad feeling about working with the with the",
    "start": "1686919",
    "end": "1693120"
  },
  {
    "text": "library okay um then at some point I with Net 5",
    "start": "1693120",
    "end": "1698480"
  },
  {
    "text": "S generators came along and after um I think after one year and something we",
    "start": "1698480",
    "end": "1704880"
  },
  {
    "text": "decided to to give it a go because they were giving um more more and more tractions and we decided to uh move our",
    "start": "1704880",
    "end": "1712080"
  },
  {
    "text": "approach from using ale weaving to use third generators and in this time we",
    "start": "1712080",
    "end": "1718080"
  },
  {
    "text": "also had the possibility of doing some changes related to how um realm Works",
    "start": "1718080",
    "end": "1724279"
  },
  {
    "text": "internally so um we also had to change the way that the model definition was uh",
    "start": "1724279",
    "end": "1730480"
  },
  {
    "text": "how the model could be defined so what you see what you have here on the left in this classic Model this is the way",
    "start": "1730480",
    "end": "1737159"
  },
  {
    "text": "that developers could Define their classes before with weaving so you have your class you have your properties and",
    "start": "1737159",
    "end": "1743919"
  },
  {
    "text": "then you have your class deriving from real object what you have here on the right is the new model definition so the",
    "start": "1743919",
    "end": "1750080"
  },
  {
    "text": "one with the S generator approach the uh CL the properties looks the same the",
    "start": "1750080",
    "end": "1755679"
  },
  {
    "text": "attributes looks the same the two major differences are that the class is",
    "start": "1755679",
    "end": "1760960"
  },
  {
    "text": "partial and that the instead of having a base class now we can finally have this",
    "start": "1760960",
    "end": "1766600"
  },
  {
    "text": "interface um why does it uh why does it need to be",
    "start": "1766600",
    "end": "1772559"
  },
  {
    "text": "partial because what is happening with the serator is that we are um looking at",
    "start": "1772559",
    "end": "1778480"
  },
  {
    "text": "your code uh during compilation and then we are um we we",
    "start": "1778480",
    "end": "1784760"
  },
  {
    "text": "have another file with a the rest of the definition of this class that is essentially implementing these um IR",
    "start": "1784760",
    "end": "1792080"
  },
  {
    "text": "object interface so we are doing all the imple all the things that uh I mean we are",
    "start": "1792080",
    "end": "1798799"
  },
  {
    "text": "doing all the implementation uh for you so all the things that before were in",
    "start": "1798799",
    "end": "1804120"
  },
  {
    "text": "this uh realm object class now are in your code base and are implementing by",
    "start": "1804120",
    "end": "1811480"
  },
  {
    "text": "this um irm object interface and as you can see essentially the uh moving from",
    "start": "1811480",
    "end": "1818399"
  },
  {
    "text": "the previous approach to the new approach doesn't require too much time you just need to really change two words",
    "start": "1818399",
    "end": "1824039"
  },
  {
    "text": "in your models and then this is essentially works in the same way for um",
    "start": "1824039",
    "end": "1831760"
  },
  {
    "text": "for developers there is no other difference um in the behavior so it's",
    "start": "1831760",
    "end": "1836799"
  },
  {
    "text": "just a matter of convenience let's say okay so um just to give you an idea this",
    "start": "1836799",
    "end": "1844320"
  },
  {
    "text": "is part of the code that gets generated for a class for a person class with one",
    "start": "1844320",
    "end": "1850399"
  },
  {
    "text": "uh string property and there is actually much more happening underneath and so this was just to give you an idea uh",
    "start": "1850399",
    "end": "1857159"
  },
  {
    "text": "maybe something that forgot to to mention before is that um if you want to take a look at any of this this realm is",
    "start": "1857159",
    "end": "1864039"
  },
  {
    "text": "open source and is free to use at least in the for the local version so you can",
    "start": "1864039",
    "end": "1869440"
  },
  {
    "text": "go and take a look if you're curious about how all of this is um all of this is implemented",
    "start": "1869440",
    "end": "1876519"
  },
  {
    "text": "okay so as I said um third generation for us has a lot of um has a lot of",
    "start": "1876519",
    "end": "1884760"
  },
  {
    "text": "advantages over um a weaving first of all the code that we are generating is",
    "start": "1884760",
    "end": "1891039"
  },
  {
    "text": "essentially readable and um and debuggable you can even even developers",
    "start": "1891039",
    "end": "1897159"
  },
  {
    "text": "can go and take a look at what kind of code we are generating also it's a bable",
    "start": "1897159",
    "end": "1902279"
  },
  {
    "text": "because essentially now there is code that then the buer can uh jump",
    "start": "1902279",
    "end": "1907440"
  },
  {
    "text": "to and because you are working with C code that you already should know how it",
    "start": "1907440",
    "end": "1912880"
  },
  {
    "text": "looks like then it's much easier to understand what is happening and it's much easier to at this",
    "start": "1912880",
    "end": "1919039"
  },
  {
    "text": "code this this meant also that we had the possibility of working in a much",
    "start": "1919039",
    "end": "1925919"
  },
  {
    "text": "easier way on some new features that were regarding the model definition and",
    "start": "1925919",
    "end": "1932799"
  },
  {
    "text": "that was something that was very difficult to do before because imagine that you have to add a new type to your",
    "start": "1932799",
    "end": "1939480"
  },
  {
    "text": "database then if you had to do it with weaving it's really a pain with surge",
    "start": "1939480",
    "end": "1944840"
  },
  {
    "text": "generators it's still a little pain but it's much uh much better and another important thing is",
    "start": "1944840",
    "end": "1951799"
  },
  {
    "text": "that this is part of the compilation pipeline you don't have problem with interference between s generators and",
    "start": "1951799",
    "end": "1958960"
  },
  {
    "text": "this is something that the ecosystem is pushing to so this something that will",
    "start": "1958960",
    "end": "1964799"
  },
  {
    "text": "get is get I mean already has a lot of attention but will get more and more attention there are also some problems",
    "start": "1964799",
    "end": "1971600"
  },
  {
    "text": "with S generators one smaller thing maybe is the fact is that you're generating text and in the end it",
    "start": "1971600",
    "end": "1978559"
  },
  {
    "text": "doesn't really matter how your code looks like as long as it's compiles but if you want to be nice and you want your",
    "start": "1978559",
    "end": "1984919"
  },
  {
    "text": "code to be readable by developers then you need to take care of it because there are no",
    "start": "1984919",
    "end": "1991120"
  },
  {
    "text": "um no internal uh features that allows you for example to do uh to fix the",
    "start": "1991120",
    "end": "1996919"
  },
  {
    "text": "formatting so you need to do it yourself I I admit this is a smaller problem um",
    "start": "1996919",
    "end": "2002039"
  },
  {
    "text": "then performance um so with weaving the uh the modifications are happening after",
    "start": "2002039",
    "end": "2008880"
  },
  {
    "text": "compilation so once you compile this is done once with sear generators this is",
    "start": "2008880",
    "end": "2014039"
  },
  {
    "text": "something that is happening while you're tying your code and as a developer of a sord generator you have no control over",
    "start": "2014039",
    "end": "2020679"
  },
  {
    "text": "when this happens this needs to be like this because for example sord generators",
    "start": "2020679",
    "end": "2025760"
  },
  {
    "text": "can Implement interface so if the sord generator does run you don't have the implementation of the interface and you",
    "start": "2025760",
    "end": "2031480"
  },
  {
    "text": "will have an error so it makes sense but you need to take care that your sord generator is not doing unne work there",
    "start": "2031480",
    "end": "2039279"
  },
  {
    "text": "are also um approaches that allows you to uh like incremental generator that",
    "start": "2039279",
    "end": "2045279"
  },
  {
    "text": "allows you to improve on this but this something for example is only available from net 6 onwards and there is also",
    "start": "2045279",
    "end": "2053040"
  },
  {
    "text": "another problem uh the biggest problem for us about s genitors is that they're only additive they can only add new",
    "start": "2053040",
    "end": "2059878"
  },
  {
    "text": "things they cannot modify what is already there and this means that I can't lie to",
    "start": "2059879",
    "end": "2066240"
  },
  {
    "text": "you because we didn't completely remove I weaving we only reduced it so um and",
    "start": "2066240",
    "end": "2074760"
  },
  {
    "text": "why is that well what you have here on the left this is the model definition with weaving you have your uh class",
    "start": "2074760",
    "end": "2082280"
  },
  {
    "text": "deriving from real object you have your properties with Setters and Getters now if we had to go to a 100% s generated",
    "start": "2082280",
    "end": "2091679"
  },
  {
    "text": "approach then it will need to look like what you have here in the middle and why",
    "start": "2091679",
    "end": "2096839"
  },
  {
    "text": "is that well if you have your properties already defined then we cannot go into",
    "start": "2096839",
    "end": "2105040"
  },
  {
    "text": "your um into your code and define properties with the same name that you cannot do so we will need to use a",
    "start": "2105040",
    "end": "2112480"
  },
  {
    "text": "different approach so for example you will need to declare your properties as",
    "start": "2112480",
    "end": "2118280"
  },
  {
    "text": "fields and then we will go into your code look this fields and then generate properties with the same",
    "start": "2118280",
    "end": "2124160"
  },
  {
    "text": "name this is something that is used for example by if you're working with ma with Zar Son by mvvm toolkit that is",
    "start": "2124160",
    "end": "2132880"
  },
  {
    "text": "that inside also has the um as some features to allow you to implement",
    "start": "2132880",
    "end": "2138240"
  },
  {
    "text": "automatically I notify property change so what they do is that they uh look at these private fields and then they",
    "start": "2138240",
    "end": "2144640"
  },
  {
    "text": "implement the properties that are using these baking fields for uh to to to",
    "start": "2144640",
    "end": "2150839"
  },
  {
    "text": "implement I notifi property change okay so why we decided to go against this",
    "start": "2150839",
    "end": "2156880"
  },
  {
    "text": "well um one reason is that this is that moving from the previous approach to",
    "start": "2156880",
    "end": "2162880"
  },
  {
    "text": "this approach will require more work because now all the properties need to",
    "start": "2162880",
    "end": "2168680"
  },
  {
    "text": "be filled so you will need to change some something in your code first of all",
    "start": "2168680",
    "end": "2174520"
  },
  {
    "text": "um second of all um this feels kind of wrong because uh at least with mvvm tool",
    "start": "2174520",
    "end": "2181760"
  },
  {
    "text": "kit these fields are used by the um by the code that is being generated because these are the baking fields of your",
    "start": "2181760",
    "end": "2188240"
  },
  {
    "text": "properties with realm these fields are only a blueprint and have no use at",
    "start": "2188240",
    "end": "2195200"
  },
  {
    "text": "least for example when the object is coming from the database because we don't really use the biging fields of",
    "start": "2195200",
    "end": "2200520"
  },
  {
    "text": "properties so this will just be there and we'll have no use they were and it",
    "start": "2200520",
    "end": "2206960"
  },
  {
    "text": "looks confusing so overall in order to keep the developer experience the same we",
    "start": "2206960",
    "end": "2213119"
  },
  {
    "text": "decided not to go for a 100% um for a 100% sord generated uh approach and we",
    "start": "2213119",
    "end": "2221079"
  },
  {
    "text": "decide to go for the approach that I've shown you before so this one that I have here on the on the right so essentially",
    "start": "2221079",
    "end": "2229599"
  },
  {
    "text": "the um the proper definition is the is the same so you don't need to worry",
    "start": "2229599",
    "end": "2234920"
  },
  {
    "text": "about um fields and then the difference is that you have a partial class and",
    "start": "2234920",
    "end": "2239960"
  },
  {
    "text": "then you have a a property ah and another problem another time remember uh",
    "start": "2239960",
    "end": "2246319"
  },
  {
    "text": "another problem with the uh the approach here in the middle is that with what we",
    "start": "2246319",
    "end": "2251839"
  },
  {
    "text": "allow is that your properties can be of any accessibility so your properties can",
    "start": "2251839",
    "end": "2257640"
  },
  {
    "text": "be public private protected they are still uh managed by the database let's",
    "start": "2257640",
    "end": "2262760"
  },
  {
    "text": "say if we had to do something like this then we will need to maybe add other",
    "start": "2262760",
    "end": "2270480"
  },
  {
    "text": "attributes so that you can specify how you want your properties to be generated and it looks even worse so this just to",
    "start": "2270480",
    "end": "2277720"
  },
  {
    "text": "give an idea okay but in the end we decided for this uh mixed approach in",
    "start": "2277720",
    "end": "2283160"
  },
  {
    "text": "which we greatly reduce the amount of um of surg generation that we are doing",
    "start": "2283160",
    "end": "2291160"
  },
  {
    "text": "okay now um what exactly are we doing with SE generators now so we are doing",
    "start": "2291160",
    "end": "2298000"
  },
  {
    "text": "what you see here on the right we are still modifying the Setters and Getters but now instead of calling a method we",
    "start": "2298000",
    "end": "2304880"
  },
  {
    "text": "are calling a we are a essentially getting and setting the value on a",
    "start": "2304880",
    "end": "2310160"
  },
  {
    "text": "property with the same name on something called the accessor and um I'm not going to go too",
    "start": "2310160",
    "end": "2317920"
  },
  {
    "text": "much into details but the accessor is something that we are also um",
    "start": "2317920",
    "end": "2323720"
  },
  {
    "text": "generating so the I know that this this one on on the right I think it looks",
    "start": "2323720",
    "end": "2330119"
  },
  {
    "text": "very similar to this one that I've shown in the beginning that was being done by",
    "start": "2330119",
    "end": "2335160"
  },
  {
    "text": "weaving but this one this is an extreme simplified version of what is happening this is just from the very high level",
    "start": "2335160",
    "end": "2341839"
  },
  {
    "text": "instead what we have now with um with the weaving this is 100% what the",
    "start": "2341839",
    "end": "2348240"
  },
  {
    "text": "weaving is doing so this is the same for all properties this is the same independently from the object State this",
    "start": "2348240",
    "end": "2355280"
  },
  {
    "text": "is the same in any case so this is very few lines to do in um Isle",
    "start": "2355280",
    "end": "2362200"
  },
  {
    "text": "weaving so what did we do instead so all the complexity did that before we had in the",
    "start": "2362200",
    "end": "2369560"
  },
  {
    "text": "weiver now it's in the accessor but this is much uh much better for us because",
    "start": "2369560",
    "end": "2375359"
  },
  {
    "text": "the accessory is something that we are search generating so instead of needing to write IL code to do uh all these checks",
    "start": "2375359",
    "end": "2383640"
  },
  {
    "text": "all these for the property types and so on then all these checks are done inside the accessor so it's much easier for us",
    "start": "2383640",
    "end": "2390680"
  },
  {
    "text": "to modify the uh the way that the Setters and Getters works so we still",
    "start": "2390680",
    "end": "2395839"
  },
  {
    "text": "have weaving but but it's at um it's very limited to compar to what we had",
    "start": "2395839",
    "end": "2404440"
  },
  {
    "text": "before so um we worked on this we started working on this about maybe two",
    "start": "2404440",
    "end": "2411319"
  },
  {
    "text": "years ago and now I'm really bad with dates and we worked on this for about um six months uh six months was not I mean",
    "start": "2411319",
    "end": "2419480"
  },
  {
    "text": "this time it's from the from the beginning till the end and so it also",
    "start": "2419480",
    "end": "2425119"
  },
  {
    "text": "regards um other kind of work and it also includes the fact that we",
    "start": "2425119",
    "end": "2430240"
  },
  {
    "text": "had to modify a lot of things that were happening inside the I mean the internals of real because for example we",
    "start": "2430240",
    "end": "2436560"
  },
  {
    "text": "moved from a base class to an interface and we published this the",
    "start": "2436560",
    "end": "2441960"
  },
  {
    "text": "first version of the realm s generator in uh November 2022 so one year and",
    "start": "2441960",
    "end": "2448640"
  },
  {
    "text": "something ago and by the way in in the beginning the round. sord generator was",
    "start": "2448640",
    "end": "2454440"
  },
  {
    "text": "a separate package that was getting picked up with you are getting realm now instead it's inside",
    "start": "2454440",
    "end": "2461040"
  },
  {
    "text": "realm and um so the classic Model definition so the word with weaving with",
    "start": "2461040",
    "end": "2466359"
  },
  {
    "text": "the base class it's still supported if you want to use it but we are really pushing Developers for um for adopting",
    "start": "2466359",
    "end": "2473760"
  },
  {
    "text": "the new um the new Sur generated classes and so the fact that we move to",
    "start": "2473760",
    "end": "2480280"
  },
  {
    "text": "Sur generators also allowed us to add some features that we wanted to implement for some time but it would",
    "start": "2480280",
    "end": "2486440"
  },
  {
    "text": "have been a pain to do with uh with weaving for example the support for",
    "start": "2486440",
    "end": "2491680"
  },
  {
    "text": "nullability in the model definition that was something that was um requested by us we are also uh planning to add",
    "start": "2491680",
    "end": "2499520"
  },
  {
    "text": "incremental generator that is a a sord generator that is caching some parts so",
    "start": "2499520",
    "end": "2506960"
  },
  {
    "text": "it's not so performance hungry as a normal sord generator but uh we still",
    "start": "2506960",
    "end": "2512920"
  },
  {
    "text": "didn't start with this also because generally real is",
    "start": "2512920",
    "end": "2518359"
  },
  {
    "text": "something that is used in mobile applications and normally you don't have",
    "start": "2518359",
    "end": "2523960"
  },
  {
    "text": "you the projects are not huge and the um you don't have like a huge amount of",
    "start": "2523960",
    "end": "2529760"
  },
  {
    "text": "models so so far we didn't have any complaints regarding performance of the",
    "start": "2529760",
    "end": "2534960"
  },
  {
    "text": "um of the surgery return that we have but and yes and going forward anyway we",
    "start": "2534960",
    "end": "2540640"
  },
  {
    "text": "would like to move completely to the developers anyway to this uh surger",
    "start": "2540640",
    "end": "2545760"
  },
  {
    "text": "approach and our idea is to try to add as little as possible to",
    "start": "2545760",
    "end": "2552240"
  },
  {
    "text": "the um weed classes okay so this is our Dream",
    "start": "2552240",
    "end": "2558880"
  },
  {
    "text": "completely remove a weaving but this is not something that we can do in an easy way if we want to",
    "start": "2558880",
    "end": "2564920"
  },
  {
    "text": "keep the developer experience the same and if we want to keep the model definition the same the way that we",
    "start": "2564920",
    "end": "2570599"
  },
  {
    "text": "could do it is that if the language would allow um partial properties uh as",
    "start": "2570599",
    "end": "2577480"
  },
  {
    "text": "you can see from this issue on GitHub there is a lot of uh request for this and actually this screenshot is coming",
    "start": "2577480",
    "end": "2583640"
  },
  {
    "text": "from I think 3 four months ago I checked yesterday there the numbers are higher so um if we had partial properties then",
    "start": "2583640",
    "end": "2591839"
  },
  {
    "text": "we wouldn't need to have the weing because then we can go and generate the implementation of the Setters and the Getters for you so this is not something",
    "start": "2591839",
    "end": "2599400"
  },
  {
    "text": "that we have control on but if you want it just go and vote it and",
    "start": "2599400",
    "end": "2604800"
  },
  {
    "text": "um and this is something that is getting getting more and more attention also because s generators are getting more",
    "start": "2604800",
    "end": "2610880"
  },
  {
    "text": "and more attention especially now that uh Native aot is getting uh is getting",
    "start": "2610880",
    "end": "2618119"
  },
  {
    "text": "all attractions and you and you are and developers are trying to go away from",
    "start": "2618119",
    "end": "2624359"
  },
  {
    "text": "using reflection serg generation doesn't do the same thing that reflection can do but it can offer an help in that",
    "start": "2624359",
    "end": "2631839"
  },
  {
    "text": "direction and uh recently this is a slide that actually just added there's",
    "start": "2631839",
    "end": "2637800"
  },
  {
    "text": "also been a talk about uh interceptors so interceptors have been added in uh",
    "start": "2637800",
    "end": "2644720"
  },
  {
    "text": "net six as an experimental feature the idea with interceptors is",
    "start": "2644720",
    "end": "2651119"
  },
  {
    "text": "that um in somewhere in your code you have an Interceptor method that is",
    "start": "2651119",
    "end": "2658520"
  },
  {
    "text": "intercepting this me another method that is as this path at this row sorry this",
    "start": "2658520",
    "end": "2664800"
  },
  {
    "text": "line and at this column uh and the idea that when that method is called instead",
    "start": "2664800",
    "end": "2671800"
  },
  {
    "text": "of that method being called you have this method so essentially you're doing code",
    "start": "2671800",
    "end": "2678119"
  },
  {
    "text": "substitution the thing here is that this allows a sar gener s generators to be",
    "start": "2678119",
    "end": "2685760"
  },
  {
    "text": "they're still only additive but this allows SAR generator to modify code that already",
    "start": "2685760",
    "end": "2691599"
  },
  {
    "text": "exists so unfortunately first of all this is still an experimental feature so",
    "start": "2691599",
    "end": "2697040"
  },
  {
    "text": "we don't know if it will change if it will go away probably not because it's",
    "start": "2697040",
    "end": "2702400"
  },
  {
    "text": "already used by EF by Entity framework so I really doubt that they will remove",
    "start": "2702400",
    "end": "2708240"
  },
  {
    "text": "it the biggest problem is that there is no property support so for now this",
    "start": "2708240",
    "end": "2713520"
  },
  {
    "text": "works only with uh with methods so it doesn't work with",
    "start": "2713520",
    "end": "2718839"
  },
  {
    "text": "properties another problem is that but it's a it's another I would say it's a different level of problem is that our s",
    "start": "2718839",
    "end": "2725720"
  },
  {
    "text": "generator will do much more work because now our search generator is only looking for the model classes and uh generating",
    "start": "2725720",
    "end": "2733040"
  },
  {
    "text": "something if this was working with properties then we need to look at all your code and find all the way all the",
    "start": "2733040",
    "end": "2740000"
  },
  {
    "text": "places that you're using the properties and then probably have 200 lines of uh intercept location to change the Setters",
    "start": "2740000",
    "end": "2747240"
  },
  {
    "text": "and Getters this is obviously if the Interceptor will work in the same way for properties that obviously I don't",
    "start": "2747240",
    "end": "2755040"
  },
  {
    "text": "know and another problem is that",
    "start": "2755040",
    "end": "2760240"
  },
  {
    "text": "um so our SDK is a library that is used by different developers so we need to",
    "start": "2760240",
    "end": "2766520"
  },
  {
    "text": "support multiple SDK and C versions so if this is something available for the",
    "start": "2766520",
    "end": "2772280"
  },
  {
    "text": "latest.net version then maybe we could make this available but then we'll need to find something to support also",
    "start": "2772280",
    "end": "2779160"
  },
  {
    "text": "developers that cannot use interceptors so I know that there was a lot of negativity but it's a possibility for",
    "start": "2779160",
    "end": "2786160"
  },
  {
    "text": "now it's just a yeah it's just a possibility so I don't think we're going to go this way",
    "start": "2786160",
    "end": "2792480"
  },
  {
    "text": "for for some time because of all these problems but it looks promising because",
    "start": "2792480",
    "end": "2798040"
  },
  {
    "text": "anyway as I said there is a lot of push for S generators to be much more than only",
    "start": "2798040",
    "end": "2805119"
  },
  {
    "text": "additive so to to wrap up so Cod generation has been an extremely uh",
    "start": "2805240",
    "end": "2812040"
  },
  {
    "text": "useful technique for us because it allowed to um to hide the complexity of",
    "start": "2812040",
    "end": "2818119"
  },
  {
    "text": "the realm SDK essentially behind the model definition developers can use realm objects as they would use uh C",
    "start": "2818119",
    "end": "2825800"
  },
  {
    "text": "object without needing to worry about set value get value type of the property and any other things in the beginning we",
    "start": "2825800",
    "end": "2833400"
  },
  {
    "text": "were using um I weaving that is extremely powerful because it allows to modify the code in any way but it's",
    "start": "2833400",
    "end": "2842319"
  },
  {
    "text": "also very difficult to use and gives a I would say a bad experience both to us",
    "start": "2842319",
    "end": "2848720"
  },
  {
    "text": "and developers but I would say mostly for us that had to ride the the weaving uh this is the reason why we",
    "start": "2848720",
    "end": "2854559"
  },
  {
    "text": "decided to move to um Sur generator that are a more modern alternative and that",
    "start": "2854559",
    "end": "2860760"
  },
  {
    "text": "are also what the whole ecosystem is pushing um forward so both of these",
    "start": "2860760",
    "end": "2868400"
  },
  {
    "text": "approaches have their own um pros and cons their own uh quick and limitations",
    "start": "2868400",
    "end": "2874880"
  },
  {
    "text": "but overall we think that the switch was worth it and already with the move to S",
    "start": "2874880",
    "end": "2880079"
  },
  {
    "text": "generators we were able to add the for example support for nullability and also now we're adding another feature to help",
    "start": "2880079",
    "end": "2887680"
  },
  {
    "text": "with the um serialization and the serialization of objects if for example you are working also with uh with",
    "start": "2887680",
    "end": "2895240"
  },
  {
    "text": "mongodb Atlas directly instead of trell so it's another thing so um we think",
    "start": "2895240",
    "end": "2902720"
  },
  {
    "text": "that this was a overall the switch was worth it and the uh so far we didn't get many complaint",
    "start": "2902720",
    "end": "2909280"
  },
  {
    "text": "we didn't get any complaints actually regarding this so we we think that it was a a good idea because in the end it",
    "start": "2909280",
    "end": "2917359"
  },
  {
    "text": "mostly simplified our life when we have to work with this so we think that it was uh definitely work uh worth",
    "start": "2917359",
    "end": "2925920"
  },
  {
    "text": "it so this was was what I had to say if you're curious about uh realm about Sur",
    "start": "2925920",
    "end": "2933799"
  },
  {
    "text": "generators weaving and some other things that I've talked about there are some links here um and uh another thing that",
    "start": "2933799",
    "end": "2942280"
  },
  {
    "text": "I have to say is that so I've use the name realm all the time but now there is",
    "start": "2942280",
    "end": "2947839"
  },
  {
    "text": "a sort of rebranding happening so maybe if you go on the documentation you will see that in some parts it says um Atlas",
    "start": "2947839",
    "end": "2955920"
  },
  {
    "text": "device sync SDK so don't worry about it but we're still talking about the same thing I decided to use this name because",
    "start": "2955920",
    "end": "2962520"
  },
  {
    "text": "this has been the name so far so I think it's still um it's still there and also",
    "start": "2962520",
    "end": "2967960"
  },
  {
    "text": "if you have questions feel free to stop me somewhere and yes that's it thank you",
    "start": "2967960",
    "end": "2974160"
  },
  {
    "text": "very much",
    "start": "2974160",
    "end": "2977359"
  },
  {
    "text": "[Applause]",
    "start": "2979720",
    "end": "2982830"
  }
]