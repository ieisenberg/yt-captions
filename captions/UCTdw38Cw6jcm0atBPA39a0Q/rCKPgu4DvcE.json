[
  {
    "text": "okay everyone good morning uh welcome to ndc oslo in oslo",
    "start": "0",
    "end": "8000"
  },
  {
    "text": "so um this talk is called the power of composition and uh my name is scott veloshan and i",
    "start": "8000",
    "end": "15599"
  },
  {
    "text": "have a website f sharp for fun and profit.com um as you can guess that's mostly about",
    "start": "15599",
    "end": "22960"
  },
  {
    "text": "f sharp uh i'll be using c sharp and f sharp codes",
    "start": "22960",
    "end": "28080"
  },
  {
    "text": "mostly f sharp code examples but these concepts work uh for almost any programming",
    "start": "28080",
    "end": "33760"
  },
  {
    "text": "language um for example there's a lot of people doing this kind of thing in javascript",
    "start": "33760",
    "end": "38800"
  },
  {
    "text": "uh php ruby uh python and so on uh",
    "start": "38800",
    "end": "45280"
  },
  {
    "text": "right so i am going to talk about a couple of things first i'm going to talk about the",
    "start": "45280",
    "end": "50399"
  },
  {
    "text": "philosophy of composition and um there's a there's a certain way of",
    "start": "50399",
    "end": "56160"
  },
  {
    "text": "thinking about doing things and i just want to kind of really hammer that home because what i'm going to be",
    "start": "56160",
    "end": "61680"
  },
  {
    "text": "talking about all the time here i'm going to talk about functional programming some ideas about functional programming which",
    "start": "61680",
    "end": "67760"
  },
  {
    "text": "is functions and how to compose them and types and how to compose them",
    "start": "67760",
    "end": "73600"
  },
  {
    "text": "so i'm assuming that we're using a statically typed functional programming language if you're using um a non",
    "start": "73600",
    "end": "80560"
  },
  {
    "text": "dynamic language like javascript a lot of this doesn't apply in the same way",
    "start": "80560",
    "end": "86000"
  },
  {
    "text": "and then i will actually have some examples of how to do composition so we'll start with some roman numerals",
    "start": "86000",
    "end": "91280"
  },
  {
    "text": "we'll do a functional version of fizzbuzz uh and then we will talk about monads",
    "start": "91280",
    "end": "97920"
  },
  {
    "text": "and then i'll show you how you can build a web service using just composition with no classes",
    "start": "97920",
    "end": "104560"
  },
  {
    "text": "uh no mutability nothing like that so yeah everyone's gonna be scared about the monad bits",
    "start": "104560",
    "end": "110000"
  },
  {
    "text": "and hopefully it won't be so scary when we get there so let's start with philosophy",
    "start": "110000",
    "end": "117600"
  },
  {
    "text": "so there's some important things that you need to have before you can understand how composition works this is",
    "start": "117600",
    "end": "122799"
  },
  {
    "text": "critical first of all you have to have been a child at some point a very important you have to have played",
    "start": "122799",
    "end": "129280"
  },
  {
    "text": "with lego and it also helps if you have ever played with a toy train set",
    "start": "129280",
    "end": "135599"
  },
  {
    "text": "so these are kind of the prerequisites if you haven't done these things then i",
    "start": "135599",
    "end": "140959"
  },
  {
    "text": "i highly suggest you go and play with some lego and you play with some toy trains and in fact you don't actually have to have",
    "start": "140959",
    "end": "146160"
  },
  {
    "text": "been an adult um there's a child though quite a few adults who still play with lego",
    "start": "146160",
    "end": "151760"
  },
  {
    "text": "if you google adult friends and lego you will see a lot of interesting things um so hopefully all of you have met the",
    "start": "151760",
    "end": "159040"
  },
  {
    "text": "requirements for understanding composition and so if you have then the rest of this will be",
    "start": "159040",
    "end": "165040"
  },
  {
    "text": "very easy so let's start with the lego philosophy",
    "start": "165040",
    "end": "170319"
  },
  {
    "text": "so lego actually has a philosophy which is why it's such a great thing to use because all the pieces are",
    "start": "170319",
    "end": "177040"
  },
  {
    "text": "designed to be connected now as i talk about lego every time i talk about lego you think",
    "start": "177040",
    "end": "182640"
  },
  {
    "text": "about programming okay so i'm going to make an analogy very soon so all the pieces are designed",
    "start": "182640",
    "end": "189040"
  },
  {
    "text": "to be connected all the pieces are reusable and if you connect any two pieces",
    "start": "189040",
    "end": "195040"
  },
  {
    "text": "together you get another piece that can be connected okay so let's go",
    "start": "195040",
    "end": "200159"
  },
  {
    "text": "into this all the lego pieces have little bumps on them right and when they design a new lego piece",
    "start": "200159",
    "end": "206959"
  },
  {
    "text": "they always put a bump on it because they know that this piece is going to be reused with other lego",
    "start": "206959",
    "end": "213360"
  },
  {
    "text": "pieces so they when you when you design a lego piece you think about how it's going to be reused and when we design our programs we want",
    "start": "213360",
    "end": "220319"
  },
  {
    "text": "to think about our components of our programs we want to think about how they can be used and the other thing of course is that",
    "start": "220319",
    "end": "226159"
  },
  {
    "text": "lego can be taken apart and put built one thing and then use the same pieces to build something else",
    "start": "226159",
    "end": "232239"
  },
  {
    "text": "and this works because the lego pieces are self-contained they do not have any strings attached literally which means",
    "start": "232239",
    "end": "240400"
  },
  {
    "text": "you don't have to like disentangle them before we can reuse them now if they had like strings attached or",
    "start": "240400",
    "end": "246480"
  },
  {
    "text": "electrical cables or something they would be really hard to reuse them um but they are each piece is completely",
    "start": "246480",
    "end": "253280"
  },
  {
    "text": "independent so from a programming point of view we want to have pieces of our program which are",
    "start": "253280",
    "end": "259120"
  },
  {
    "text": "completely independent that can be reused and uh if you ever try think about like a method refactoring we have to pull out",
    "start": "259120",
    "end": "265520"
  },
  {
    "text": "a method because it's tangled up with other code methods don't are not reasonable this",
    "start": "265520",
    "end": "270639"
  },
  {
    "text": "way right um here is how you build",
    "start": "270639",
    "end": "275680"
  },
  {
    "text": "big things out of small things using lego you connect two pieces together and you get another piece",
    "start": "275680",
    "end": "280880"
  },
  {
    "text": "and once you've put two things together you don't have to stop you can keep adding and adding and adding and you never have",
    "start": "280880",
    "end": "286560"
  },
  {
    "text": "to stop because no matter what you do there's always some more bumps that you can add something to and that's a really important part you",
    "start": "286560",
    "end": "291919"
  },
  {
    "text": "never like hit a brick wall and you have to use an adapter pattern or a bridge pattern or something",
    "start": "291919",
    "end": "298479"
  },
  {
    "text": "yeah you just lego is always connectable so making big things from small things",
    "start": "298479",
    "end": "304720"
  },
  {
    "text": "this is what you get that's awesome and this is the power of",
    "start": "304720",
    "end": "309919"
  },
  {
    "text": "composition that's the buzzword i'm going to say the power of composition over and over it's a great it's a great tool all right",
    "start": "309919",
    "end": "316960"
  },
  {
    "text": "now let's look at uh wooden railways uh hopefully everyone has played with one of these they're also a lot of fun again all the",
    "start": "316960",
    "end": "324479"
  },
  {
    "text": "pieces are designed to be connected all the pieces are usable if you connect two pieces together",
    "start": "324479",
    "end": "329919"
  },
  {
    "text": "you get another piece that can be connected so every single piece is designed to be",
    "start": "329919",
    "end": "337280"
  },
  {
    "text": "connected they all have the little uh bumps sticking out all the holes in them i don't know what you call them",
    "start": "337280",
    "end": "343280"
  },
  {
    "text": "um again they're reusable you can take them apart and stick them back together again and they are designed to be reusable from the",
    "start": "343280",
    "end": "349840"
  },
  {
    "text": "very beginning and if you do connect two pieces you kind of get another piece it's not exactly a",
    "start": "349840",
    "end": "355840"
  },
  {
    "text": "piece but you get another segment of track that can be connected to other segments of track and again you",
    "start": "355840",
    "end": "363039"
  },
  {
    "text": "can keep adding and adding there's nothing that stops you making a really really long piece of track you don't run into any kind of",
    "start": "363039",
    "end": "368560"
  },
  {
    "text": "artificial barriers so making big things from small things boom",
    "start": "368560",
    "end": "374639"
  },
  {
    "text": "this is a big railway model so that's the power of composition all right so now i'm going to say that",
    "start": "374639",
    "end": "381680"
  },
  {
    "text": "if you understand lego and you understand toy railways you know everything you need to know about",
    "start": "381680",
    "end": "386960"
  },
  {
    "text": "composition because what it is is just taking these same principles and applying them",
    "start": "386960",
    "end": "392319"
  },
  {
    "text": "to programming so that's what we're going to be talking about in the rest of talk so let's talk about functional",
    "start": "392319",
    "end": "399600"
  },
  {
    "text": "programming now what are the concepts of functional programming and how do they relate to",
    "start": "399600",
    "end": "405280"
  },
  {
    "text": "this idea of composition so i'm going to talk about four ideas first of all that functions are things",
    "start": "405280",
    "end": "413680"
  },
  {
    "text": "right so i'm going to use a little railway analogy for talking about functions and the way we build bigger functions is",
    "start": "413680",
    "end": "419599"
  },
  {
    "text": "using composition we're going to use the lego approach to build bigger functions now",
    "start": "419599",
    "end": "425520"
  },
  {
    "text": "if you're coming from an object-oriented world with static typing like c-sharp or java",
    "start": "425520",
    "end": "430720"
  },
  {
    "text": "it's very important to know that types are not classes they're more like sets and i will have a",
    "start": "430720",
    "end": "436639"
  },
  {
    "text": "little section explaining that bit too and in a functional programming language you",
    "start": "436639",
    "end": "442639"
  },
  {
    "text": "build bigger types from smaller types using composition just like you do with lego",
    "start": "442639",
    "end": "448560"
  },
  {
    "text": "so again we're using this compositional approach to build big things from small things",
    "start": "448560",
    "end": "454240"
  },
  {
    "text": "right so let's start with functions as things so this is uh something that people",
    "start": "454240",
    "end": "460639"
  },
  {
    "text": "sometimes have a hard hard time with but it's actually pretty straightforward a function is just a thing i'm going to",
    "start": "460639",
    "end": "466000"
  },
  {
    "text": "use the railway analogy so here's a little bit of railway track and imagine there's a tunnel",
    "start": "466000",
    "end": "471360"
  },
  {
    "text": "on the railway track i call this the tunnel of transformation",
    "start": "471360",
    "end": "476639"
  },
  {
    "text": "um we have in this case we have an apple going into the tunnel and it goes out as a banana so this is a",
    "start": "476639",
    "end": "484080"
  },
  {
    "text": "function that turns apples into bananas um",
    "start": "484080",
    "end": "489520"
  },
  {
    "text": "yeah what can i say now the thing about a a function is it's a standalone thing",
    "start": "489840",
    "end": "495919"
  },
  {
    "text": "it's not attached to a class so just like a little bit of railway track i can move it around and put it anywhere i need it",
    "start": "495919",
    "end": "502720"
  },
  {
    "text": "and so a standalone thing is another word for a reusable thing because there's no strings attached i",
    "start": "502720",
    "end": "508960"
  },
  {
    "text": "can in every all everything it needs is provided on the input so this it's not kind of tied into",
    "start": "508960",
    "end": "514159"
  },
  {
    "text": "a dependency on a class or something else no global variables you know nothing like that",
    "start": "514159",
    "end": "520640"
  },
  {
    "text": "so no strings attached is very good now the other thing about a function being a thing is",
    "start": "520640",
    "end": "528000"
  },
  {
    "text": "it can be used as inputs and outputs to other functions so just like a string or an int is a",
    "start": "528000",
    "end": "535040"
  },
  {
    "text": "thing that you can pass around a function is a thing that you can pass around so a function can be used as a parameter",
    "start": "535040",
    "end": "542480"
  },
  {
    "text": "so let's look at some examples here is a a function with a normal input like an essay it has a string as an input",
    "start": "542480",
    "end": "548320"
  },
  {
    "text": "but the output of this function is another function it's just a thing um here is a function with a normal",
    "start": "548320",
    "end": "554880"
  },
  {
    "text": "output but the input is a function here is a function with a normal input and a",
    "start": "554880",
    "end": "560720"
  },
  {
    "text": "normal output but there's another parameter which is another function which kind of controls",
    "start": "560720",
    "end": "565839"
  },
  {
    "text": "how the main function works uh so you could call this the strategy pattern",
    "start": "565839",
    "end": "571040"
  },
  {
    "text": "a functional plugin the functional version of that and so here's all the different things",
    "start": "571040",
    "end": "576399"
  },
  {
    "text": "you can do with functions uh one particular one you can do is you can have a a function which has a function as an",
    "start": "576399",
    "end": "581920"
  },
  {
    "text": "input and a function as an output um which i'm going to call a function transformer",
    "start": "581920",
    "end": "586959"
  },
  {
    "text": "so it's all the whole job of this thing is to transform functions from one kind of function into another kind of function that's a really",
    "start": "586959",
    "end": "593279"
  },
  {
    "text": "really important component of functional programming and we will see one of these uh later on in the talk so",
    "start": "593279",
    "end": "600080"
  },
  {
    "text": "that's the foundations of functional programming that's it that's all you need to know and uh you can see i mean it's it's",
    "start": "600080",
    "end": "608000"
  },
  {
    "text": "that's the basics but you can get you can get very complicated you can have a function that returns another function that has a factory for other functions",
    "start": "608000",
    "end": "613839"
  },
  {
    "text": "and so on and so forth so yeah it gets complicated but the basic ideas are very straightforward right now",
    "start": "613839",
    "end": "622399"
  },
  {
    "text": "we've got our functions how do we compose them together to make bigger functions well",
    "start": "622399",
    "end": "629040"
  },
  {
    "text": "um let's take two of our functions we have an apple to banana function and a banana to cherry function",
    "start": "629040",
    "end": "635760"
  },
  {
    "text": "how can we connect them together well what i like about the railway analogy is",
    "start": "635760",
    "end": "641040"
  },
  {
    "text": "it's really obvious you just take the output of the first one and feed it into the input of the second one and when you",
    "start": "641040",
    "end": "649360"
  },
  {
    "text": "do that you connect them together and you make a new function and this function turns apples into",
    "start": "649360",
    "end": "655839"
  },
  {
    "text": "cherries and what's interesting is that you cannot tell that it was built from smaller functions",
    "start": "655839",
    "end": "662240"
  },
  {
    "text": "um you know the banana has disappeared for example",
    "start": "662240",
    "end": "668399"
  },
  {
    "text": "nobody cares about the banana now this is a new standalone function which you can use and you can hand around to people and um",
    "start": "668399",
    "end": "675760"
  },
  {
    "text": "you can use this as a component an even bigger function so you could you know have another function which takes cherries as",
    "start": "675760",
    "end": "681279"
  },
  {
    "text": "input and and combine it with that one so you can just build compose functions just by connecting the",
    "start": "681279",
    "end": "687920"
  },
  {
    "text": "inputs to the outputs and that's all the composition means for functions so let me show you how",
    "start": "687920",
    "end": "693519"
  },
  {
    "text": "this works in c sharp and f sharp and here is some c sharp functions written",
    "start": "693519",
    "end": "700640"
  },
  {
    "text": "as lambdas add one times two and square now if i was going to call these",
    "start": "700640",
    "end": "707519"
  },
  {
    "text": "functions uh in a kind of multiple different ways i normally have to do this kind of",
    "start": "707519",
    "end": "712800"
  },
  {
    "text": "nesting thing so if i want to say add 1 to 5 and then multiply it by 2 and then take the square",
    "start": "712800",
    "end": "719839"
  },
  {
    "text": "you have to kind of start in the middle and add all these parentheses around the outside and as they get",
    "start": "719839",
    "end": "726480"
  },
  {
    "text": "deeper and deeper it kind of gets kind of complicated and it can get kind of confusing so let me show you a different approach",
    "start": "726480",
    "end": "732720"
  },
  {
    "text": "that is i think less confusing and this is the piping approach and this is based on the idea if you've",
    "start": "732720",
    "end": "740160"
  },
  {
    "text": "ever done unix command line piping you know exactly how it works you take you basically take the input",
    "start": "740160",
    "end": "746480"
  },
  {
    "text": "you feed it into the function and you take the output and then you take that and you feed into the next function",
    "start": "746480",
    "end": "752240"
  },
  {
    "text": "and then you take the output of that and you feed it to the next function and you take the output of that and you feed it into a next function and so on",
    "start": "752240",
    "end": "757760"
  },
  {
    "text": "so you have a pipeline where the data kind of moves through the pipeline so hopefully this is pretty",
    "start": "757760",
    "end": "764399"
  },
  {
    "text": "straightforward um and i think this is actually a lot easier to understand let's let's look at some codes so in",
    "start": "764399",
    "end": "770639"
  },
  {
    "text": "f-sharp this is the standard way of doing things in f sharp which is the pipeline approach and so this is five piped into add one",
    "start": "770639",
    "end": "779200"
  },
  {
    "text": "five piped into add one take the output feed it into times two take the output of times two and feed it",
    "start": "779200",
    "end": "784959"
  },
  {
    "text": "into square and this is how you'd write this kind of chain of functions in f sharp and and that little vertical",
    "start": "784959",
    "end": "791440"
  },
  {
    "text": "bar with an angle bracket is the pipe symbol in f sharp uh the vertical bar on its own which is",
    "start": "791440",
    "end": "797200"
  },
  {
    "text": "what unix uses uh means something else so it's a slightly different uh pipe symbol but that's what it is",
    "start": "797200",
    "end": "803040"
  },
  {
    "text": "and i think a lot of other languages are using this too alexa uses it i'm pretty sure that javascript is going to get it too",
    "start": "803040",
    "end": "809680"
  },
  {
    "text": "it's a great uh great way of doing this kind of thing so you can do this even in c-sharp or",
    "start": "809680",
    "end": "817680"
  },
  {
    "text": "java um it's not as idiomatic but you can basically write an extension",
    "start": "817680",
    "end": "823040"
  },
  {
    "text": "method um that does this so if you do want to do this kind of thing in c sharp you can",
    "start": "823040",
    "end": "828639"
  },
  {
    "text": "i think most other c programmers wouldn't really know what you're doing but it is totally doable it's nothing this is not a language specific",
    "start": "828639",
    "end": "835360"
  },
  {
    "text": "idea you can do this in any programming language right now we know how to connect two",
    "start": "835360",
    "end": "841279"
  },
  {
    "text": "functions together how do we build big things some small things right so i'll just make up a night example of",
    "start": "841279",
    "end": "848160"
  },
  {
    "text": "how you can start with a very small thing and build a very big thing and we will actually see an example of this",
    "start": "848160",
    "end": "853199"
  },
  {
    "text": "at the very end of the talk when i build a web service so we'll start with a low level operation like",
    "start": "853199",
    "end": "859519"
  },
  {
    "text": "say uppercasing a string as an input and an output so this is a function",
    "start": "859519",
    "end": "864959"
  },
  {
    "text": "okay now we have a bunch of these low level operations and let's say we want to make a service",
    "start": "864959",
    "end": "871600"
  },
  {
    "text": "that validates an address so the input is an address and the output is some sort of",
    "start": "871600",
    "end": "877199"
  },
  {
    "text": "result and inside this service you combine these low-level operations to do something useful",
    "start": "877199",
    "end": "883120"
  },
  {
    "text": "and i like to use the word service uh because it's just like a microservice without the micro in front and i'm over",
    "start": "883120",
    "end": "889279"
  },
  {
    "text": "40 and that's what i'm used to so there you go um services",
    "start": "889279",
    "end": "894720"
  },
  {
    "text": "okay so we have all the different things and we combine them into a complete use case a complete scenario complete story",
    "start": "894720",
    "end": "900079"
  },
  {
    "text": "whatever you want to call it uh let's say you want to update your customer data in the database um the input comes in and the output",
    "start": "900079",
    "end": "908000"
  },
  {
    "text": "goes out now this is not this is an input output model this is not a request response model",
    "start": "908000",
    "end": "913760"
  },
  {
    "text": "right so in an object oriented thing that you'd have a request and a response back",
    "start": "913760",
    "end": "919839"
  },
  {
    "text": "in a functional model it's an input output and so you can change this because input output you can change this",
    "start": "919839",
    "end": "926000"
  },
  {
    "text": "this is just another function you can chain it with other functions right so let's say we have all these",
    "start": "926000",
    "end": "931519"
  },
  {
    "text": "different use cases or stories and we want to combine them into a web application now if you think about it a web",
    "start": "931519",
    "end": "936800"
  },
  {
    "text": "application is actually a big function the input is a http",
    "start": "936800",
    "end": "942800"
  },
  {
    "text": "request and the output is an http response so it's actually a function",
    "start": "942800",
    "end": "949360"
  },
  {
    "text": "with an input and output so let's model this as a function and then inside this function",
    "start": "949360",
    "end": "955279"
  },
  {
    "text": "we basically have to choose which one of these stories or use cases to run",
    "start": "955279",
    "end": "960320"
  },
  {
    "text": "so there's a controller or a router or a dispatcher or whatever you want to call it but",
    "start": "960320",
    "end": "966160"
  },
  {
    "text": "there's some way of deciding which one of these things to run based on what the request was but it's",
    "start": "966160",
    "end": "971839"
  },
  {
    "text": "still a function okay we're using the same technique at all scales",
    "start": "971839",
    "end": "977600"
  },
  {
    "text": "so if we take a if we look at the kind of the insides of a complete web function um yeah there's branching",
    "start": "977600",
    "end": "985279"
  },
  {
    "text": "going on you know it's not it's obviously gets kind of complicated but the interesting thing to note is that the data only flows in one direction",
    "start": "985279",
    "end": "992079"
  },
  {
    "text": "something comes in and it flows through and it comes out the other side there's no loops there's no kind of",
    "start": "992079",
    "end": "998639"
  },
  {
    "text": "tangled mess of interrelationships in functional programming it's very very common to",
    "start": "998639",
    "end": "1003759"
  },
  {
    "text": "have this one directional data flow that makes it a lot easier to understand what's going on uh it makes",
    "start": "1003759",
    "end": "1008800"
  },
  {
    "text": "it a lot easier to debug um and it makes it a lot easier to test because you can pull out these little",
    "start": "1008800",
    "end": "1014560"
  },
  {
    "text": "pieces each one of these functions is testable in their own right which is very nice",
    "start": "1014560",
    "end": "1020399"
  },
  {
    "text": "okay so that's the power composition the functions the power composition the wire race the power composition for",
    "start": "1020399",
    "end": "1027280"
  },
  {
    "text": "lego it's the same idea we're using exactly the same idea for all three ways of building things so right",
    "start": "1027280",
    "end": "1034640"
  },
  {
    "text": "now let's move on to types so if you've got a statically typed language this is a bit you might",
    "start": "1034640",
    "end": "1040400"
  },
  {
    "text": "be interested in um so types are not classes as i said they're more like sets",
    "start": "1040400",
    "end": "1046480"
  },
  {
    "text": "so what do i mean by that what do i mean by a type well if you think about a function a",
    "start": "1046480",
    "end": "1052480"
  },
  {
    "text": "function has a set of valid inputs and a set of valid outputs all the things you can pass in and all",
    "start": "1052480",
    "end": "1058640"
  },
  {
    "text": "the things that are invalid to come out so just think of the set of inputs right that is the a type a type is just a name",
    "start": "1058640",
    "end": "1066160"
  },
  {
    "text": "for a set of things so if we have all the possible integers being the",
    "start": "1066160",
    "end": "1071360"
  },
  {
    "text": "valid set of inputs we call that type integer we give it a name integer now we could also have the set of all even",
    "start": "1071360",
    "end": "1077520"
  },
  {
    "text": "numbers we could call that type even number we could have the set of all prime numbers we can call that type prime number",
    "start": "1077520",
    "end": "1084000"
  },
  {
    "text": "so there's nothing special about integers um it's just a set of things we could have all the set of numbers which",
    "start": "1084000",
    "end": "1089760"
  },
  {
    "text": "except zero so non-zero integers or something now there's no behavior right there's no behavior with these",
    "start": "1089760",
    "end": "1095360"
  },
  {
    "text": "integers it's literally just a set of things we can have a set of strings again there's no behavior it's just literally",
    "start": "1095360",
    "end": "1101520"
  },
  {
    "text": "just a set of strings we could have all the set of strings that start with the letter a you know we could have strings which are",
    "start": "1101520",
    "end": "1108559"
  },
  {
    "text": "five characters long it's just a set of things um it's a set of people right they don't have to be programming",
    "start": "1108559",
    "end": "1115440"
  },
  {
    "text": "jargon they can be anything instead of people uh here's the set of little flutes and because it's a set of things you can",
    "start": "1115440",
    "end": "1122320"
  },
  {
    "text": "have anything in the set in particular you can have a set of functions so this is an example of the set of all",
    "start": "1122320",
    "end": "1129760"
  },
  {
    "text": "functions that turn fruits into fruits and we write this as the fruit to fruits",
    "start": "1129760",
    "end": "1136080"
  },
  {
    "text": "type that's the name of the type fruit arrow fruit and we will see this also later on",
    "start": "1136080",
    "end": "1143919"
  },
  {
    "text": "okay so these got these types now the thing about types in a static in a functional",
    "start": "1143919",
    "end": "1149280"
  },
  {
    "text": "programming language is they can be composed just like the just like the railway and",
    "start": "1149280",
    "end": "1154559"
  },
  {
    "text": "the lego and this is due to something called an algebraic type system",
    "start": "1154559",
    "end": "1160000"
  },
  {
    "text": "and algebraic is a bit of a jargon word so i'm going to call it a composable type system because that's exactly how",
    "start": "1160000",
    "end": "1166080"
  },
  {
    "text": "we use it a composable type system and this is only possible because in a",
    "start": "1166080",
    "end": "1172320"
  },
  {
    "text": "functional programming language or in this kind of type system the behavior is separate from the data right because it's just",
    "start": "1172320",
    "end": "1178000"
  },
  {
    "text": "sets of things you can do set intersection and you set union and you can do cartesian",
    "start": "1178000",
    "end": "1183840"
  },
  {
    "text": "product of sets all these kinds of things you can do with sets and that's how you can build bigger sets and smaller sets",
    "start": "1183840",
    "end": "1189120"
  },
  {
    "text": "and that's only possible again because there's no behavior there it would be much harder if you had if the behavior was",
    "start": "1189120",
    "end": "1194400"
  },
  {
    "text": "tangled up with the data so let's look at how you compose things in",
    "start": "1194400",
    "end": "1200640"
  },
  {
    "text": "a functional in an algebraic type system a composable type system well there's two different ways you can",
    "start": "1200640",
    "end": "1206320"
  },
  {
    "text": "compose them with and and you can compose them with or and this is i'm going to use the",
    "start": "1206320",
    "end": "1212000"
  },
  {
    "text": "english words and and all because this is how i think of them so let's look at and what i mean by composing with and",
    "start": "1212000",
    "end": "1218400"
  },
  {
    "text": "let's say that i want to uh make a fruit salad i want to model a fruit salad",
    "start": "1218400",
    "end": "1223840"
  },
  {
    "text": "well in english i would say an apple and a banana and a cherry i use the word and and in a programming",
    "start": "1223840",
    "end": "1231200"
  },
  {
    "text": "language like c sharp for example i say okay here's the different kinds of apples and bananas and cherries they're",
    "start": "1231200",
    "end": "1236320"
  },
  {
    "text": "enums but then i want to compose them together and i would say it's an apple and a banana and a cherry",
    "start": "1236320",
    "end": "1243440"
  },
  {
    "text": "so that's how you do it in c sharp and what it is it's just a struct or a record or a class or whatever a dto however you",
    "start": "1243440",
    "end": "1250960"
  },
  {
    "text": "want to call it it's something with three fields and all three fields are required right",
    "start": "1250960",
    "end": "1256480"
  },
  {
    "text": "so it's an apple and a banana and a cherry so this is something that everybody's had experience with every programming",
    "start": "1256480",
    "end": "1262640"
  },
  {
    "text": "language supports something like this and in f sharp it's very very similar we have something which is called a record",
    "start": "1262640",
    "end": "1269200"
  },
  {
    "text": "and it has three fields notice that the types come afterwards rather than before like in c sharp",
    "start": "1269200",
    "end": "1275200"
  },
  {
    "text": "so this kind of looks a bit like jason so we'll see some of these in a minute",
    "start": "1275200",
    "end": "1280799"
  },
  {
    "text": "now the other way of composing things is to use or so in english i might say",
    "start": "1280799",
    "end": "1286720"
  },
  {
    "text": "i have a snack or a banana or a cherry now you can't really do this in",
    "start": "1286720",
    "end": "1294000"
  },
  {
    "text": "c shop so let me show you the f sharp way of doing this um i say an apple or a banana or a",
    "start": "1294000",
    "end": "1299679"
  },
  {
    "text": "cherry and i'm using a vertical bar to use to mean or and",
    "start": "1299679",
    "end": "1305039"
  },
  {
    "text": "uh in f sharp i like to call these choice types because we're making modeling a choice",
    "start": "1305039",
    "end": "1310159"
  },
  {
    "text": "between different things it can only be one of these things it can't be all three you have to pick one that that is it's either an apple or a",
    "start": "1310159",
    "end": "1316799"
  },
  {
    "text": "banana it's not you know all of them at once it's not a field so uh",
    "start": "1316799",
    "end": "1321840"
  },
  {
    "text": "these are technically called discriminated unions or some types sum um",
    "start": "1321840",
    "end": "1328640"
  },
  {
    "text": "i like to call them choice types because that's how i think of them so you can think of it as almost like an",
    "start": "1328640",
    "end": "1333760"
  },
  {
    "text": "enum in c sharp with a extra information right now what do we do",
    "start": "1333760",
    "end": "1339039"
  },
  {
    "text": "with these types when we want to uh compose them so here's a little exercise for you",
    "start": "1339039",
    "end": "1344559"
  },
  {
    "text": "imagine that you want to implement a payment method and you take three different kinds of payments",
    "start": "1344559",
    "end": "1350320"
  },
  {
    "text": "cash paypal and credit card and for cash you don't need any extra information for paypal you need an email address for",
    "start": "1350320",
    "end": "1357840"
  },
  {
    "text": "credit cards uh you need a card type and a card you need some stuff so you've got three different choices how would you",
    "start": "1357840",
    "end": "1363440"
  },
  {
    "text": "implement this well if you're doing object oriented design you would probably",
    "start": "1363440",
    "end": "1369760"
  },
  {
    "text": "start off with some sort of base class abstract based class or an interface or something and you'd have three different",
    "start": "1369760",
    "end": "1376240"
  },
  {
    "text": "implementations of that interface or that uh abstract base loss and that's this kind",
    "start": "1376240",
    "end": "1382880"
  },
  {
    "text": "of typical object-oriented way of doing things now let me show you a completely different way which is the compositional",
    "start": "1382880",
    "end": "1388480"
  },
  {
    "text": "way where you build things up from smaller things just like with the lego",
    "start": "1388480",
    "end": "1393760"
  },
  {
    "text": "so what we're going to do is we're going to start with the small things and in domain driven design i never use",
    "start": "1393760",
    "end": "1399600"
  },
  {
    "text": "words like string or i want to use the same words that the domain uses so i'm going to use the word email address and the word card number",
    "start": "1399600",
    "end": "1406080"
  },
  {
    "text": "so i've got some aliases for primitive types and then i can make a choice a card type",
    "start": "1406080",
    "end": "1412640"
  },
  {
    "text": "is a visa or mastercard and a credit card information is a car type and",
    "start": "1412640",
    "end": "1418400"
  },
  {
    "text": "a card number so notice i'm using the word or and and so a choice type using or and a record",
    "start": "1418400",
    "end": "1424880"
  },
  {
    "text": "type using and and then i can build my payment method so it's cash",
    "start": "1424880",
    "end": "1430320"
  },
  {
    "text": "or paypal or card so it's a choice type with three",
    "start": "1430320",
    "end": "1436400"
  },
  {
    "text": "different choices and in the paypal case it's got some email it needs an email in the credit card case",
    "start": "1436400",
    "end": "1442159"
  },
  {
    "text": "it needs the credit card information and in the cash case there's no other information but i don't have to stop because i can",
    "start": "1442159",
    "end": "1448320"
  },
  {
    "text": "keep adding and adding this is the thing about composition i can then use this in another class in another type rather",
    "start": "1448320",
    "end": "1454400"
  },
  {
    "text": "so i can make some more helper things like a payment amount is a decimal and a currency",
    "start": "1454400",
    "end": "1459440"
  },
  {
    "text": "is a euro or a dollar or a ruble um and and then i can build a",
    "start": "1459440",
    "end": "1466080"
  },
  {
    "text": "bigger thing which is an amount and a currency and a method",
    "start": "1466080",
    "end": "1471360"
  },
  {
    "text": "i'm now using that payment method that i defined up above and i can keep going and going and building bigger and bigger",
    "start": "1471360",
    "end": "1478080"
  },
  {
    "text": "types from the smaller types so this is exactly like the lego analogy but now we're building it we're",
    "start": "1478080",
    "end": "1484320"
  },
  {
    "text": "using it to build types so this is buildings bigger types and smaller types",
    "start": "1484320",
    "end": "1490320"
  },
  {
    "text": "this is the power of composition applied to a type system so very good power composition",
    "start": "1490320",
    "end": "1499039"
  },
  {
    "text": "right now uh these composable types actually really amazing um first of all they can be used",
    "start": "1499039",
    "end": "1505200"
  },
  {
    "text": "as executable documentation and and i have a big uh this is one of my favorite things so",
    "start": "1505200",
    "end": "1511919"
  },
  {
    "text": "if i show you a whole bunch of types this is a whole bunch of different types here can you guess what i'm programming",
    "start": "1511919",
    "end": "1519919"
  },
  {
    "text": "and i think you probably can it's something to do with the card game and what's nice is even if you don't",
    "start": "1519919",
    "end": "1525279"
  },
  {
    "text": "even understand f sharp you have a good idea of what's going on because all the types are very self-documenting and they're",
    "start": "1525279",
    "end": "1530720"
  },
  {
    "text": "always they're all in the same place they're not scattered over 20 different files so there's one one",
    "start": "1530720",
    "end": "1537919"
  },
  {
    "text": "single file i can look at i get a good idea about what's going on in the domain",
    "start": "1537919",
    "end": "1543039"
  },
  {
    "text": "and you know mostly people think about types as data but you can also model",
    "start": "1543039",
    "end": "1549520"
  },
  {
    "text": "verbs actions so for example here we have some actions um some activities and we can say to",
    "start": "1549520",
    "end": "1556080"
  },
  {
    "text": "pick up a card uh the input is this and the output is this to deal a card",
    "start": "1556080",
    "end": "1561360"
  },
  {
    "text": "the input is a deck and the output is a new deck and a new card um you can model not just nouns but",
    "start": "1561360",
    "end": "1568320"
  },
  {
    "text": "verbs as well and that's very very important so what's very cool about this is we have the entire domain on one screen",
    "start": "1568320",
    "end": "1575120"
  },
  {
    "text": "and uh you know rather this is like nine types and rather having nine different",
    "start": "1575120",
    "end": "1580880"
  },
  {
    "text": "files they're all next to each other on one page so i think this is a great way of doing documentation",
    "start": "1580880",
    "end": "1586400"
  },
  {
    "text": "and if you're a new person if you're a new member of the team and you come aboard and and someone says you know uh find",
    "start": "1586400",
    "end": "1593760"
  },
  {
    "text": "all the payment methods and fix them up or something you know it's really obvious what the payment methods are i mean if",
    "start": "1593760",
    "end": "1600159"
  },
  {
    "text": "again i don't have to go to four different files they're literally all here i don't have to go to the documentation i don't have to ask anybody i can just",
    "start": "1600159",
    "end": "1606559"
  },
  {
    "text": "look at the code and it tells me what's going on so i think this is a fantastic idea um",
    "start": "1606559",
    "end": "1612880"
  },
  {
    "text": "this is a massive topic i have a whole talk on this i have a whole blog post on this and i have a whole book on this",
    "start": "1612880",
    "end": "1619360"
  },
  {
    "text": "so if you're interested check out my book um uh yeah people seem to like it",
    "start": "1619360",
    "end": "1626480"
  },
  {
    "text": "right now let's look at some real examples",
    "start": "1626480",
    "end": "1631600"
  },
  {
    "text": "um let's start off with doing a very simple piping example used for roman numerals okay",
    "start": "1631840",
    "end": "1639039"
  },
  {
    "text": "so here's some roman numerals how do i convert an arabic integer into roman numerals so i mean five",
    "start": "1639039",
    "end": "1645760"
  },
  {
    "text": "becomes v and twelve becomes x one one and hundred and seven becomes c v one uh c v",
    "start": "1645760",
    "end": "1651360"
  },
  {
    "text": "one one i i i should say so that's the kind of thing this is a very standard exercise now we're going to do",
    "start": "1651360",
    "end": "1658000"
  },
  {
    "text": "it using the piping approach now in order for that to work um i'm going to show you",
    "start": "1658000",
    "end": "1663520"
  },
  {
    "text": "a slightly different approach than you might be used to which is going into the fundamentals of how roman",
    "start": "1663520",
    "end": "1669520"
  },
  {
    "text": "numerals came to be which is this tally system right you basically make marks",
    "start": "1669520",
    "end": "1675039"
  },
  {
    "text": "and when you've got five four marks then you put a slash through it and then you know you just make marks on",
    "start": "1675039",
    "end": "1680240"
  },
  {
    "text": "a on a tablet or how on a wall or however you do it um i think this is how they evolved and so",
    "start": "1680240",
    "end": "1688000"
  },
  {
    "text": "we're going to do exactly the same approach for our design we're going to start off with n copies of an i so if you have",
    "start": "1688000",
    "end": "1694399"
  },
  {
    "text": "you know 37 we'll have 37 little scratches and then every time we see five",
    "start": "1694399",
    "end": "1699679"
  },
  {
    "text": "scratches we'll put a v there and then every time we see two v's we'll put an x and every time you see two five x's",
    "start": "1699679",
    "end": "1706240"
  },
  {
    "text": "we'll use an l and so on and so on so this is the design we're going to use",
    "start": "1706240",
    "end": "1711679"
  },
  {
    "text": "for our roman numeral algorithm so how does this convert into",
    "start": "1711679",
    "end": "1717520"
  },
  {
    "text": "a piping model well it's really easy we start off by replicating the number",
    "start": "1717520",
    "end": "1723440"
  },
  {
    "text": "and then we do a replacement we replace the five eyes with the v and that gives out another string",
    "start": "1723440",
    "end": "1729200"
  },
  {
    "text": "then we place two v's with next that changes another string uh we replace the five x's with l",
    "start": "1729200",
    "end": "1736480"
  },
  {
    "text": "and that is another string so we're just passing a string through each section of the pipeline",
    "start": "1736480",
    "end": "1742399"
  },
  {
    "text": "so that's the the design the piping model let's actually look at the code so we'll",
    "start": "1742399",
    "end": "1747600"
  },
  {
    "text": "start with the c sharp code so what i'm going to do in the c sharp code is to find a little helper",
    "start": "1747600",
    "end": "1753520"
  },
  {
    "text": "function for each step and these are going to be nested internal functions inside the main",
    "start": "1753520",
    "end": "1762480"
  },
  {
    "text": "method okay so we start now once we've got our helper functions",
    "start": "1762480",
    "end": "1767520"
  },
  {
    "text": "we can say you know make the string uh however many times and then pipe it",
    "start": "1767520",
    "end": "1773679"
  },
  {
    "text": "into the first function pipe it into the second function pipe into the third function and so on and so",
    "start": "1773679",
    "end": "1779120"
  },
  {
    "text": "forth so we have the helper functions and we use them in in the piping logic this is a little",
    "start": "1779120",
    "end": "1786480"
  },
  {
    "text": "bit ugly and i'm going to make a better version of this very shortly we can do the exactly the",
    "start": "1786480",
    "end": "1792080"
  },
  {
    "text": "same thing in f sharp we have these little helper functions and we define them underneath the main",
    "start": "1792080",
    "end": "1799600"
  },
  {
    "text": "one and then we define them uh that we use these helper functions in the main pipeline",
    "start": "1799600",
    "end": "1804880"
  },
  {
    "text": "so that's the concept of um doing a pipe so",
    "start": "1804880",
    "end": "1811679"
  },
  {
    "text": "that's pretty straightforward um but here's the problem okay it's not always this easy",
    "start": "1811679",
    "end": "1818720"
  },
  {
    "text": "like most things it's like yeah it's easy if it all works out but what happens it doesn't work out so we so far we've had these functions",
    "start": "1818720",
    "end": "1825520"
  },
  {
    "text": "with one output and one input and when we want to compose them together they just connect up very easily that's",
    "start": "1825520",
    "end": "1832480"
  },
  {
    "text": "all good but that's not always the situation we have sometimes we have a",
    "start": "1832480",
    "end": "1840640"
  },
  {
    "text": "function with two inputs and we have another function with one output",
    "start": "1840640",
    "end": "1845919"
  },
  {
    "text": "and we want to try and connect them together and how does that even work",
    "start": "1845919",
    "end": "1851039"
  },
  {
    "text": "so this is a problem how do we compose these things so now let's look at um",
    "start": "1851039",
    "end": "1858799"
  },
  {
    "text": "currying we're going to take the same roman noodles thing and we'll just tweak it to use a different technique so we use",
    "start": "1858799",
    "end": "1865440"
  },
  {
    "text": "this replace function a lot and this replace function actually has three inputs um",
    "start": "1865440",
    "end": "1870720"
  },
  {
    "text": "the input the original the proper input string and then the two values that to find and replace and the output is",
    "start": "1870720",
    "end": "1876399"
  },
  {
    "text": "another string so let's look at if we want to just use these in line without having these helper functions",
    "start": "1876399",
    "end": "1881840"
  },
  {
    "text": "um could we do that well no we couldn't because these replace functions cannot",
    "start": "1881840",
    "end": "1888000"
  },
  {
    "text": "be chained together because it has three inputs and that doesn't work so can we fix this",
    "start": "1888000",
    "end": "1895840"
  },
  {
    "text": "problem and you know it's these composition patterns are really great when functions have one",
    "start": "1895840",
    "end": "1903600"
  },
  {
    "text": "input and one output but they don't work when functions have don't don't fit that pattern",
    "start": "1903600",
    "end": "1909760"
  },
  {
    "text": "so you might think well this is really bad that's a shame but there's actually good news the good news is that every function can",
    "start": "1909760",
    "end": "1916320"
  },
  {
    "text": "be turned into these one parameter functions so there's a trick where you can make",
    "start": "1916320",
    "end": "1921360"
  },
  {
    "text": "every function into one parameter function and then the composition works great and",
    "start": "1921360",
    "end": "1926480"
  },
  {
    "text": "that's what we're going to do now we're going to do this trick and this trick is called currying named",
    "start": "1926480",
    "end": "1931919"
  },
  {
    "text": "after haskell curry even though he was not the person who invented it and um",
    "start": "1931919",
    "end": "1938000"
  },
  {
    "text": "nothing to do with indian food is to do with a person so here we have an uncarried function",
    "start": "1938000",
    "end": "1943120"
  },
  {
    "text": "which is an uncurrent function is a function which has multiple inputs right and what we want to do is",
    "start": "1943120",
    "end": "1949840"
  },
  {
    "text": "transform it into a function that has one input well how can we do that what we do",
    "start": "1949840",
    "end": "1957279"
  },
  {
    "text": "is we make a function with one input and what it spits out at the other end is not the original thing but another",
    "start": "1957279",
    "end": "1963840"
  },
  {
    "text": "function so we have the first function takes one input and it returns a lambda or another you",
    "start": "1963840",
    "end": "1971679"
  },
  {
    "text": "know an anonymous function and that other function has one input which this case is b",
    "start": "1971679",
    "end": "1977760"
  },
  {
    "text": "and then that it returns to c and you can keep doing this as many times if it has three parameters you can have the second one return",
    "start": "1977760",
    "end": "1984640"
  },
  {
    "text": "another intermediate function and so on so forth so this is a bit of a strange thing to get your head around",
    "start": "1984640",
    "end": "1991279"
  },
  {
    "text": "um but it works really really well for doing the kind of thing uh that we want to do with multiple",
    "start": "1991279",
    "end": "1998480"
  },
  {
    "text": "inputs so curried functions are basically a function where every single",
    "start": "1998480",
    "end": "2003600"
  },
  {
    "text": "every part of it has been turned into one input function and then it's a one input function so we",
    "start": "2003600",
    "end": "2009200"
  },
  {
    "text": "can use composition okay so let's actually see what this looks like in practice",
    "start": "2009200",
    "end": "2015519"
  },
  {
    "text": "and this is why this understanding functions as inputs and functions as outputs is such an important idea because we do",
    "start": "2015519",
    "end": "2021039"
  },
  {
    "text": "this a lot in functional programming all right one input here one input there",
    "start": "2021039",
    "end": "2029518"
  },
  {
    "text": "so we've solved instead of having two inputs we now have two functions each with one input",
    "start": "2029679",
    "end": "2035679"
  },
  {
    "text": "so don't worry if you don't understand this it definitely takes a while to get your head around if you're new to this kind of thing",
    "start": "2035679",
    "end": "2043200"
  },
  {
    "text": "right so every function can be converted into a series of one input functions this way",
    "start": "2043200",
    "end": "2050480"
  },
  {
    "text": "all right let's look at an example so here we have our three input function called replace and it's an object",
    "start": "2051119",
    "end": "2057919"
  },
  {
    "text": "oriented function so the the third input is actually the object that it's been called so this is a kind of a three parameter function",
    "start": "2057919",
    "end": "2066000"
  },
  {
    "text": "and what we want to do is fix it up so it turns into a one parameter function now what we're going",
    "start": "2066159",
    "end": "2073200"
  },
  {
    "text": "to do here is have a new thing called replace and it is going to return a lambda okay",
    "start": "2073200",
    "end": "2080638"
  },
  {
    "text": "so we're going to pass in two parameters these two parameters but not the third parameter and the",
    "start": "2080639",
    "end": "2087679"
  },
  {
    "text": "output of this function is going to be a lambda",
    "start": "2087679",
    "end": "2093118"
  },
  {
    "text": "not a value so we're returning a one parameter function",
    "start": "2093119",
    "end": "2098880"
  },
  {
    "text": "so what we're doing here is this new one parameter function can be chained together because it has one input and one output",
    "start": "2098880",
    "end": "2106640"
  },
  {
    "text": "so this is a this is the trick this is the way of kind of carrying the replace",
    "start": "2106640",
    "end": "2111760"
  },
  {
    "text": "function so we can use it in our pipeline",
    "start": "2111760",
    "end": "2117440"
  },
  {
    "text": "so let's look at how we could do this in c sharp so this is our our curried version of replace",
    "start": "2117440",
    "end": "2124480"
  },
  {
    "text": "and it looks a bit more complicated but we only need one of them we don't have to um uh",
    "start": "2124480",
    "end": "2131839"
  },
  {
    "text": "have five helper functions we just need one helper function now and now in the pipeline we can call the",
    "start": "2131839",
    "end": "2138880"
  },
  {
    "text": "place with different parameters over and over so again this returns a lambda which is can be used in",
    "start": "2138880",
    "end": "2145200"
  },
  {
    "text": "the pipeline um and we're passing into the three parameters",
    "start": "2145200",
    "end": "2150560"
  },
  {
    "text": "in the helper function and it returns a lambda and where does the input from the lambda",
    "start": "2150560",
    "end": "2155599"
  },
  {
    "text": "come from it comes from the pipeline so this is uh using a carried function",
    "start": "2155599",
    "end": "2164079"
  },
  {
    "text": "in a pipeline and this is why curried functions are so important in functional programming let's look at",
    "start": "2164079",
    "end": "2170160"
  },
  {
    "text": "the f sharp version of this now in f sharp you don't need help function because everything is carried",
    "start": "2170160",
    "end": "2176000"
  },
  {
    "text": "automatically in f sharp so we can just take this replace function and use it as is without any helping",
    "start": "2176000",
    "end": "2184000"
  },
  {
    "text": "and so this is one of the nice things about a language like f sharp is you don't have to do coin every single function is",
    "start": "2184000",
    "end": "2190320"
  },
  {
    "text": "automatically coded that's very nice so again we're passing in two of the three parameters",
    "start": "2190320",
    "end": "2195920"
  },
  {
    "text": "where is the other parameter coming from it's coming from the pipeline",
    "start": "2195920",
    "end": "2201839"
  },
  {
    "text": "now what we're doing here is actually a technique called partial application which is a really",
    "start": "2202079",
    "end": "2208560"
  },
  {
    "text": "important technique and it's very very closely related to currying it's not the same as currying but it's",
    "start": "2208560",
    "end": "2214160"
  },
  {
    "text": "it's very it's related to the idea of curry so let me let me give you an example let's say we have two functions add and",
    "start": "2214160",
    "end": "2220960"
  },
  {
    "text": "multiply and they both have two parameters now in a pipeline what i can do",
    "start": "2220960",
    "end": "2226640"
  },
  {
    "text": "is just use one of the parameters so if i say add two i'm passing in",
    "start": "2226640",
    "end": "2234000"
  },
  {
    "text": "one of the parameters where is the other parameter coming from it's coming from the pipeline so i am",
    "start": "2234000",
    "end": "2240240"
  },
  {
    "text": "i'm basically passing in one of the two parameters and similarly when i'm passing one of the two",
    "start": "2240240",
    "end": "2246400"
  },
  {
    "text": "parameters here that is called partial application so uh i'm only partially providing",
    "start": "2246400",
    "end": "2252880"
  },
  {
    "text": "the parameters and the other parameters have to come from somewhere else and that's a really like i said this is",
    "start": "2252880",
    "end": "2258400"
  },
  {
    "text": "a very common technique and this only works because the functions are curried so currying means",
    "start": "2258400",
    "end": "2265040"
  },
  {
    "text": "making a bunch of one parameter functions and the partial application means putting some of the parameters back but",
    "start": "2265040",
    "end": "2270880"
  },
  {
    "text": "not all of them some of them but not all of them so you'll see this this is a like i say",
    "start": "2270880",
    "end": "2277040"
  },
  {
    "text": "this is like super common technique in functional programming so if you look at our replace uh thing",
    "start": "2277040",
    "end": "2282560"
  },
  {
    "text": "that we did here that's what we did we passed in two of the three inputs and we sort of baked it in to the uh function here",
    "start": "2282560",
    "end": "2290720"
  },
  {
    "text": "we're passing in two of the inputs uh and the other input is coming from the pipeline so this is partial",
    "start": "2290720",
    "end": "2295760"
  },
  {
    "text": "application uh in our roman numeral example",
    "start": "2295760",
    "end": "2301359"
  },
  {
    "text": "so one of the great things about the pipeline approach is they are extensible so um",
    "start": "2303119",
    "end": "2310240"
  },
  {
    "text": "roman numerals um if i need to add a new feature to the roman numerals i can just add new things",
    "start": "2310240",
    "end": "2315839"
  },
  {
    "text": "i can say i can handle the eight the nine case and the four case uh i can just add new features without",
    "start": "2315839",
    "end": "2322400"
  },
  {
    "text": "touching the other features so a pipeline oriented approach is is really nice because i can",
    "start": "2322400",
    "end": "2327440"
  },
  {
    "text": "have confidence when i add new functionality that i'm not breaking anything else when i add new segments to",
    "start": "2327440",
    "end": "2333200"
  },
  {
    "text": "the pipeline so this is another reason why my piping model is a really nice way of",
    "start": "2333200",
    "end": "2339520"
  },
  {
    "text": "if you can try and get your code to work in this pipeline model there's a lot of other benefits as well",
    "start": "2339520",
    "end": "2345200"
  },
  {
    "text": "okay so this is our challenge how do we compose a function with one output and two inputs and the answer was",
    "start": "2345200",
    "end": "2351920"
  },
  {
    "text": "currying and partial applications so that's challenge has been solved good",
    "start": "2351920",
    "end": "2357440"
  },
  {
    "text": "right now let's look at another challenge which is a function with two outputs um so some",
    "start": "2357440",
    "end": "2364000"
  },
  {
    "text": "functions have more than one output and and how do we connect that to a function",
    "start": "2364000",
    "end": "2370160"
  },
  {
    "text": "with one input and i'll explain what i mean by more than one output shortly and the challenge is how do we",
    "start": "2370160",
    "end": "2377680"
  },
  {
    "text": "compose these kinds of things uh and the answer is monads",
    "start": "2377680",
    "end": "2383119"
  },
  {
    "text": "um more specifically there's a function called bind uh for connecting these kinds of",
    "start": "2383119",
    "end": "2388880"
  },
  {
    "text": "functions together so i'm going to use fizzbuzz as our example here um",
    "start": "2388880",
    "end": "2394160"
  },
  {
    "text": "here's first of all people aren't familiar fizzbuzz you need to print fizz if it's multiple divisible by three for",
    "start": "2394160",
    "end": "2400960"
  },
  {
    "text": "buzz if it's divisible by five and so on and so forth otherwise you print the original number right now in f sharp uh we can have a",
    "start": "2400960",
    "end": "2408560"
  },
  {
    "text": "very simple implementation if it's divisible by 15 print fizz buzz otherwise print fizz otherwise print",
    "start": "2408560",
    "end": "2413839"
  },
  {
    "text": "buzz otherwise the original number so that is the kind of standard implementation that you might write if",
    "start": "2413839",
    "end": "2419200"
  },
  {
    "text": "you're an imperative programmer and there's our little we need a little helper function that does that is divisible by",
    "start": "2419200",
    "end": "2425200"
  },
  {
    "text": "okay um we're not going to do that because this is too easy uh we're",
    "start": "2425200",
    "end": "2431839"
  },
  {
    "text": "functional programmers we need to make it more complicated uh so i'm going to make a more",
    "start": "2431839",
    "end": "2437119"
  },
  {
    "text": "complicated version of fizzbuzz i'm actually not going to make it just for the sake of it i'm going to make it",
    "start": "2437119",
    "end": "2442240"
  },
  {
    "text": "to show you how you can do composition out of something like this this as it stands is not composable and",
    "start": "2442240",
    "end": "2448160"
  },
  {
    "text": "i want a composable version a pipeline version of fsbus so here's how you might do fizzbuzz as a",
    "start": "2448160",
    "end": "2455680"
  },
  {
    "text": "pipeline you say well i want to handle the first case and then i want to handle the",
    "start": "2455680",
    "end": "2460720"
  },
  {
    "text": "second case and the third case and then finally you know the last case so i want to do a pipeline",
    "start": "2460720",
    "end": "2468800"
  },
  {
    "text": "so let's see how we can implement a pipeline for fizzbuzz so when we handle a case in fizzbuzz um",
    "start": "2468800",
    "end": "2475520"
  },
  {
    "text": "there's two choices for the output we could either say well it's unhandled like you know two or something or seven",
    "start": "2475520",
    "end": "2481280"
  },
  {
    "text": "or whatever none of these are handled or it is actually handled in which case we get a string back so we have two two choices for what this",
    "start": "2481280",
    "end": "2489520"
  },
  {
    "text": "function returns it's something or something something or something that makes me think i need a choice type",
    "start": "2489520",
    "end": "2497200"
  },
  {
    "text": "so from a railway or into point of view we now have an input and we have two kind of branches on our",
    "start": "2497200",
    "end": "2504319"
  },
  {
    "text": "on our way track it's not just a one track function now it has two possible outputs and um this is different from what we've",
    "start": "2504319",
    "end": "2512000"
  },
  {
    "text": "seen before so how can we model this in code",
    "start": "2512000",
    "end": "2518079"
  },
  {
    "text": "well i'm going to create a type which is a choice it's either unhandled or it's handled if it's unhandled we still",
    "start": "2518079",
    "end": "2525040"
  },
  {
    "text": "have the original integer and if it is handled we now have a some sort of string like fizz or buzz or something",
    "start": "2525040",
    "end": "2531119"
  },
  {
    "text": "so we have a choice type this is why they're very good uh and i stole this from uh original",
    "start": "2531119",
    "end": "2536720"
  },
  {
    "text": "braithwaite so there's a credit there um let's see how we actually write the code to",
    "start": "2536720",
    "end": "2543520"
  },
  {
    "text": "handle it then so we handle it if it is divisible by the thing then we say okay it's a we're going to",
    "start": "2543520",
    "end": "2550400"
  },
  {
    "text": "make the handle case happen it's at the label the fins of the buzz and if it isn't divisible by the thing",
    "start": "2550400",
    "end": "2555760"
  },
  {
    "text": "we're going to return the unhandled case which is the original number so we either return the label",
    "start": "2555760",
    "end": "2561599"
  },
  {
    "text": "or we return the original integer so we've got two choices in our return",
    "start": "2561599",
    "end": "2568640"
  },
  {
    "text": "okay now notice that this is a three parameter function pay attention to that okay now let's",
    "start": "2568640",
    "end": "2575359"
  },
  {
    "text": "actually test it out interactively now the nice thing is these in these pieces are independent they're standalone so we can test them",
    "start": "2575359",
    "end": "2582240"
  },
  {
    "text": "on their own so we can handle try handling 12 and it says that's good",
    "start": "2582240",
    "end": "2587359"
  },
  {
    "text": "that's fizz if we put 10 into that one uh for three that is unhandled but if we",
    "start": "2587359",
    "end": "2592720"
  },
  {
    "text": "put ten into the five one it is handled so we can test out the little code each of these components is independently testable",
    "start": "2592720",
    "end": "2600560"
  },
  {
    "text": "and notice that we've only got two parameters here and i said it was a three parameter function where's the third parameter",
    "start": "2600560",
    "end": "2607200"
  },
  {
    "text": "coming from it's coming from the pipeline okay so this two parameter function when we when we",
    "start": "2607200",
    "end": "2613119"
  },
  {
    "text": "put it when we bake in two parameter functions we now uh two parameters we now have a one of these kind of switch",
    "start": "2613119",
    "end": "2619440"
  },
  {
    "text": "or points type railway track with one input and two outputs",
    "start": "2619440",
    "end": "2624880"
  },
  {
    "text": "okay so if we try and do an implementation like this uh we say with this handle we're done if",
    "start": "2625520",
    "end": "2631680"
  },
  {
    "text": "it's unhandled we try and handle three okay if it's handled we're done it's unhandled let's try handle five if",
    "start": "2631680",
    "end": "2639200"
  },
  {
    "text": "that's handled we're done otherwise we do the last thing this is a really really ugly implementation",
    "start": "2639200",
    "end": "2645599"
  },
  {
    "text": "um but you often see this kind of thing when you have nested uh when you have kind of different kinds",
    "start": "2645599",
    "end": "2650720"
  },
  {
    "text": "of results that you can return so let's let's try and get rid of this ugly codes",
    "start": "2650720",
    "end": "2655760"
  },
  {
    "text": "um there's actually a pattern here it's not i don't know if it's obvious but here's the pattern every time it's unhandled we do",
    "start": "2655760",
    "end": "2661760"
  },
  {
    "text": "something with the unhandled value but we you know if it's a handle we're done if it's unhandled we do something",
    "start": "2661760",
    "end": "2668720"
  },
  {
    "text": "if it's handled we're done if it's unhandled we do something so that's the pattern if it's handled",
    "start": "2668720",
    "end": "2674720"
  },
  {
    "text": "we're done if it's unhandled we're going to do something so let's turn this into a helper function",
    "start": "2674720",
    "end": "2681359"
  },
  {
    "text": "um if you if you think of it going to the railway oriented example it's like if it's unhandled we call the next",
    "start": "2681359",
    "end": "2687040"
  },
  {
    "text": "function but if it's handled we bypass it that's what's basically going on from a railway",
    "start": "2687040",
    "end": "2692400"
  },
  {
    "text": "point of view uh that's what's that's how we can think about it so let's write a little helper function",
    "start": "2692400",
    "end": "2697440"
  },
  {
    "text": "that's going to do this for us so if unhandled do i'm going to call it so if we're handled",
    "start": "2697440",
    "end": "2704400"
  },
  {
    "text": "we leave it as handled if it's unhandled we're going to do something now what are we going to do",
    "start": "2704400",
    "end": "2709760"
  },
  {
    "text": "i don't know it depends so i'm going to just say some arbitrary function f well where does this function f come",
    "start": "2709760",
    "end": "2715520"
  },
  {
    "text": "from it comes from a parameter so we're going to pass in a function parameter that controls how this function works",
    "start": "2715520",
    "end": "2722560"
  },
  {
    "text": "and that was exactly what i was talking about at the beginning of the talk so and i'm going to call it f because i have no idea what this function is i",
    "start": "2722560",
    "end": "2728240"
  },
  {
    "text": "can't think of a better name than f right so if we have this new",
    "start": "2728240",
    "end": "2733440"
  },
  {
    "text": "helper function we can write unhandled do we can change our logic and we say well",
    "start": "2733440",
    "end": "2739680"
  },
  {
    "text": "handle 15 if it's still unhandled handle three if it's still unhandled handle five and if it's still unhandled",
    "start": "2739680",
    "end": "2746160"
  },
  {
    "text": "do the last step so each of these little steps is one of these branching railway things",
    "start": "2746160",
    "end": "2752800"
  },
  {
    "text": "and we can chain them together now using this if unhandled do the last step",
    "start": "2752800",
    "end": "2759119"
  },
  {
    "text": "brings the two tracks together and basically says if it's handled that's the string and if it's unhandled we just turn the integer into a string",
    "start": "2759119",
    "end": "2765680"
  },
  {
    "text": "so it converts both sides into a string and this is composable unlike the",
    "start": "2765680",
    "end": "2771520"
  },
  {
    "text": "original version because we can handle new things we just stick them in the pipeline and we're not touching any existing code",
    "start": "2771520",
    "end": "2778720"
  },
  {
    "text": "so this is a much more safe version of fizzbuzz than the original version we're guaranteed that we add new features we're not going to",
    "start": "2778720",
    "end": "2784880"
  },
  {
    "text": "break anything now obviously fizzbuzz is a very silly example but you can think of a more complicated thing",
    "start": "2784880",
    "end": "2790319"
  },
  {
    "text": "where turning it into a composable thing like this makes it much more extensible and much easier to understand what's going on",
    "start": "2790319",
    "end": "2797280"
  },
  {
    "text": "now let's look at another example which is chaining tasks often you have tasks you know when the",
    "start": "2797280",
    "end": "2803839"
  },
  {
    "text": "task completes you do something else but when the task doesn't complete you skip it and you know promises futures whatever",
    "start": "2803839",
    "end": "2811359"
  },
  {
    "text": "you want to call them the same idea you need to chain things these things together",
    "start": "2811359",
    "end": "2816720"
  },
  {
    "text": "now if you look at the kind of code that you often see you start a task and when the task is finished do something else when the task is",
    "start": "2816720",
    "end": "2823359"
  },
  {
    "text": "finished do something else and when the task is finished do something else or promises or whatever this is really ugly um",
    "start": "2823359",
    "end": "2831760"
  },
  {
    "text": "however we can use the same pattern when it's finished do something when it's finished do something when it's",
    "start": "2831760",
    "end": "2836960"
  },
  {
    "text": "finished do something and let's write a little helper function for that when it's finished do something now what",
    "start": "2836960",
    "end": "2843440"
  },
  {
    "text": "is it going to do i'm going to pass in a function parameter i don't know exactly what it's",
    "start": "2843440",
    "end": "2849040"
  },
  {
    "text": "going to do so that i'm going to pass any function parameters that's going to do it for me because that's parametrized and once we have a helper function like",
    "start": "2849040",
    "end": "2855440"
  },
  {
    "text": "this we can rewrite the code to be much more linear",
    "start": "2855440",
    "end": "2860720"
  },
  {
    "text": "much more as in a straight line and so this is again this is a really useful approach for tasks and you'll see this i think in",
    "start": "2860720",
    "end": "2867359"
  },
  {
    "text": "javascript there's something called and then which is exactly the same thing as when finished do",
    "start": "2867359",
    "end": "2873520"
  },
  {
    "text": "and this brings us to monads so why monads well",
    "start": "2873520",
    "end": "2880640"
  },
  {
    "text": "what we want to do is a general solution or a general way of thinking about handling functions like this and",
    "start": "2880640",
    "end": "2886960"
  },
  {
    "text": "there's a fun there's a way of thinking called bind a bind is sort of the generic name for uh the function that composes these",
    "start": "2886960",
    "end": "2894960"
  },
  {
    "text": "things together so if we go back to the railway analogy and we want to connect these things together",
    "start": "2894960",
    "end": "2900000"
  },
  {
    "text": "um how do we compose these well we compose them into a two-track model so that's before",
    "start": "2900000",
    "end": "2905839"
  },
  {
    "text": "and that's afterwards and i call this the two-track model otherwise known as railway oriented programming",
    "start": "2905839",
    "end": "2911520"
  },
  {
    "text": "and i have a talk on this one too so that's the idea if we have a two-track model",
    "start": "2911520",
    "end": "2916640"
  },
  {
    "text": "we can connect these things together but here's the problem um composing one track functions is easy",
    "start": "2916640",
    "end": "2922240"
  },
  {
    "text": "we connect the inputs to the outputs composing two track functions is also easy we just connect",
    "start": "2922240",
    "end": "2927440"
  },
  {
    "text": "you know the corresponding inputs and outputs but we don't have that we have one input and two outputs and they can't",
    "start": "2927440",
    "end": "2934640"
  },
  {
    "text": "compose so what we have here is a function like this that is not composable",
    "start": "2934640",
    "end": "2941119"
  },
  {
    "text": "however if we had a function like this a two track function this is composable we can connect these",
    "start": "2941119",
    "end": "2947119"
  },
  {
    "text": "ones together so now our problem is how do we go from the four case to the after case",
    "start": "2947119",
    "end": "2953040"
  },
  {
    "text": "how do we transform the top function into a function that looks like the bottom function",
    "start": "2953040",
    "end": "2959760"
  },
  {
    "text": "and now this is where bind comes in so bind is the name for a generic kind of",
    "start": "2959760",
    "end": "2964800"
  },
  {
    "text": "adapter block that solves this problem and if you're using the model railway approach you often see this kind of thing there's",
    "start": "2964800",
    "end": "2971119"
  },
  {
    "text": "a there's a two-track system and there's a slot on the top where you fit your model railway so we",
    "start": "2971119",
    "end": "2976720"
  },
  {
    "text": "have a slot for function we pass in our our switches or points function we put it in the slot and it comes out",
    "start": "2976720",
    "end": "2983680"
  },
  {
    "text": "as a two-track function so that's what i call a function transformer a function comes in",
    "start": "2983680",
    "end": "2989359"
  },
  {
    "text": "and it comes out as a different shape and the new shape is is a much better shape much more usable",
    "start": "2989359",
    "end": "2995680"
  },
  {
    "text": "shape because we can compose these shapes together so the implementation is really easy",
    "start": "2995680",
    "end": "3002240"
  },
  {
    "text": "um it's a lot more complicated to explain it than it is to write the codes so if we use the the fizzbuzz example",
    "start": "3002240",
    "end": "3009359"
  },
  {
    "text": "you know it comes in on a two-track if it's unhandled we do the next function in the in the",
    "start": "3009359",
    "end": "3015359"
  },
  {
    "text": "track and that's fine and if it was handled already we just don't do anything we just returned",
    "start": "3015359",
    "end": "3020640"
  },
  {
    "text": "the original value so that says bind for the fizzbuzz now if you notice carefully",
    "start": "3020640",
    "end": "3028400"
  },
  {
    "text": "this is exactly the same as the if unhandled do function it's exactly the same design so bind and",
    "start": "3028400",
    "end": "3034720"
  },
  {
    "text": "if one handle do the same thing so bind often has many many different names for yourself is",
    "start": "3034720",
    "end": "3039760"
  },
  {
    "text": "often called flat map sometimes it's called and then and in c sharp it's select many um",
    "start": "3039760",
    "end": "3046640"
  },
  {
    "text": "there's lots of different names for this thing but it's the same concept it's a way of chaining functions together like this so in",
    "start": "3046640",
    "end": "3053200"
  },
  {
    "text": "functional programming terminology we have something called the monads and the monad is actually",
    "start": "3053200",
    "end": "3058240"
  },
  {
    "text": "not as complicated as it might sound it's really just a data type and a bind function and some other stuff",
    "start": "3058240",
    "end": "3064240"
  },
  {
    "text": "so a data type like fizzbuzz results where it's handled unhandled or a task",
    "start": "3064240",
    "end": "3069520"
  },
  {
    "text": "uh and the bind function in our case it was if unhandled do or for the task it was it when finished",
    "start": "3069520",
    "end": "3076559"
  },
  {
    "text": "do you know so it's a data type and an associated function it's a combination of those two things that's what a monad is and sometimes",
    "start": "3076559",
    "end": "3083520"
  },
  {
    "text": "you'll hear the word magnetic function and a magnetic function is one of these switch points functions and we use bind to",
    "start": "3083520",
    "end": "3091119"
  },
  {
    "text": "compose them so in our case in this fizzbuzz case it was the handle function it was one of these",
    "start": "3091119",
    "end": "3096240"
  },
  {
    "text": "switches with one input and and two outputs so that's what a magnetic function is",
    "start": "3096240",
    "end": "3101680"
  },
  {
    "text": "right so this is our challenge how do we have two outputs and one input and we solve that with",
    "start": "3101680",
    "end": "3107760"
  },
  {
    "text": "monads and this is why functional programmers go on and on about monads all the time because this is a very common situation",
    "start": "3107760",
    "end": "3114240"
  },
  {
    "text": "and monads is the way of chaining things together where they are the wrong shape and",
    "start": "3114240",
    "end": "3120000"
  },
  {
    "text": "monads turn them into the right shape where they can be composed so that's what monas are useful for",
    "start": "3120000",
    "end": "3126400"
  },
  {
    "text": "right now just to finish up i'm going to talk about building a web service using another kind of composition called",
    "start": "3126400",
    "end": "3132640"
  },
  {
    "text": "lightly composition if we take our if we think about our two little bits of railway track like this",
    "start": "3132640",
    "end": "3139119"
  },
  {
    "text": "which are you know points functions if we combine them like this it's really obvious how to",
    "start": "3139119",
    "end": "3145119"
  },
  {
    "text": "combine them and then you kind of pretend the middle isn't there it actually has the same shape as the",
    "start": "3145119",
    "end": "3150480"
  },
  {
    "text": "original function right it actually is one of these kinds of functions again right so what we're saying here is a way",
    "start": "3150480",
    "end": "3157680"
  },
  {
    "text": "of composing them so that you combine two of these and you make another one which is the same",
    "start": "3157680",
    "end": "3162880"
  },
  {
    "text": "shape now that's a very important part because if it's some if it's the same kind of thing you can keep adding and",
    "start": "3162880",
    "end": "3169119"
  },
  {
    "text": "adding just like lego so if you if you combine two things and you make something which is the same",
    "start": "3169119",
    "end": "3174240"
  },
  {
    "text": "kind of thing that's a very powerful concept uh and it's a it's a great and very important",
    "start": "3174240",
    "end": "3179839"
  },
  {
    "text": "part of composition and you can build bigger things and smaller things because no matter what you do you always end up something with",
    "start": "3179839",
    "end": "3184880"
  },
  {
    "text": "the same shape right so let's apply this approach to building a web server or web service or whether",
    "start": "3184880",
    "end": "3192000"
  },
  {
    "text": "whatever so we're going to have something called the http handler and also known as a web part okay",
    "start": "3192000",
    "end": "3199440"
  },
  {
    "text": "so the input is an http context and this contains everything about the",
    "start": "3199440",
    "end": "3204880"
  },
  {
    "text": "service has the request it also has the partially built response the cookies everything you need to make a decision",
    "start": "3204880",
    "end": "3210720"
  },
  {
    "text": "about what to do and then what comes out is an asynchronous http context",
    "start": "3210720",
    "end": "3216160"
  },
  {
    "text": "option and it's optional because if you can handle it you're going to return something um and",
    "start": "3216160",
    "end": "3223839"
  },
  {
    "text": "if you can't handle it it's optional you're going to turn nothing so it's either something or nothing and that's what optional means so it's",
    "start": "3223839",
    "end": "3231040"
  },
  {
    "text": "either going to be success or failure and the whole thing is an asynchronous thing because you might be hitting",
    "start": "3231040",
    "end": "3236240"
  },
  {
    "text": "databases or hitting a network who knows how long it's going to take so it's asynchronous right so this is the components that",
    "start": "3236240",
    "end": "3242720"
  },
  {
    "text": "we're going to build our web framework from and uh if you want to know more about the f-sharp version search for f-sharp",
    "start": "3242720",
    "end": "3249359"
  },
  {
    "text": "giraffe and you can see this web framework there so this composition actually has a",
    "start": "3249359",
    "end": "3255359"
  },
  {
    "text": "symbol with a angle bracket equal angle brackets called the kleisler composition symbol and we can combine two things to make",
    "start": "3255359",
    "end": "3261839"
  },
  {
    "text": "another thing of the same type so that's what we're going to do just like lego it's another http handler you can keep",
    "start": "3261839",
    "end": "3268400"
  },
  {
    "text": "adding and adding and adding right so let's look at some examples here's something called",
    "start": "3268400",
    "end": "3273920"
  },
  {
    "text": "path and what that does is just check whether the input path is matches so this matches",
    "start": "3273920",
    "end": "3281760"
  },
  {
    "text": "hello um and if it does match the path it returns success and if it doesn't match the path it's a failure",
    "start": "3281760",
    "end": "3287839"
  },
  {
    "text": "that's all it does it's one little component it's a building block um here is another one called okay and",
    "start": "3287839",
    "end": "3295040"
  },
  {
    "text": "all it does is return 200. okay so it's another building block now",
    "start": "3295040",
    "end": "3300480"
  },
  {
    "text": "we can combine these two building blocks with the clysley composition right",
    "start": "3300480",
    "end": "3306160"
  },
  {
    "text": "first part we'll check the request path the second part will set the response so we have these two little building blocks we combine them and",
    "start": "3306160",
    "end": "3313040"
  },
  {
    "text": "now we have a slightly bigger uh component and this component will check the path",
    "start": "3313040",
    "end": "3319440"
  },
  {
    "text": "and then return okay right now another component another tool",
    "start": "3319440",
    "end": "3325839"
  },
  {
    "text": "is the choose and with choose we pass in a bunch of these things and what it does is it tries the first",
    "start": "3325839",
    "end": "3332000"
  },
  {
    "text": "one and if that doesn't work it tries the second one if it doesn't work it tries the third one and if that doesn't work the whole thing",
    "start": "3332000",
    "end": "3337119"
  },
  {
    "text": "is a failure so what it does is it combines these things and it also returns something of the same shape",
    "start": "3337119",
    "end": "3343920"
  },
  {
    "text": "right either one of them works you get success or none of them work in which case you get failure",
    "start": "3343920",
    "end": "3349280"
  },
  {
    "text": "so that is also the same kind of shape and we can build that into something so",
    "start": "3349280",
    "end": "3355599"
  },
  {
    "text": "for example we could have hello returns okay and goodbye also returns okay and that",
    "start": "3355599",
    "end": "3362319"
  },
  {
    "text": "something else doesn't work at all so we can now pick the first path that succeeds",
    "start": "3362319",
    "end": "3367680"
  },
  {
    "text": "so now we've got our our our handlers here for the path handling and each for each",
    "start": "3367680",
    "end": "3373040"
  },
  {
    "text": "path handling we can have a little web component that handles that particular path in this case we're just returning",
    "start": "3373040",
    "end": "3378319"
  },
  {
    "text": "hello goodbye but obviously it could be a lot more complicated than that now here's another one called get and",
    "start": "3378319",
    "end": "3384640"
  },
  {
    "text": "this returns successful if the request is a get and if it's not a get it doesn't",
    "start": "3384640",
    "end": "3390480"
  },
  {
    "text": "so we can build a get component here so now this only works if it's a get and the path is",
    "start": "3390480",
    "end": "3396000"
  },
  {
    "text": "hello then we're going to do the hello thing and if the if it's a get and the path is goodbye it's going to do",
    "start": "3396000",
    "end": "3402160"
  },
  {
    "text": "a thing and if it's getting it's something else it's going to return nothing so complete web app looks something like",
    "start": "3402160",
    "end": "3408000"
  },
  {
    "text": "this if it's a get do one of these two things otherwise fail if it's a post do one of",
    "start": "3408000",
    "end": "3414000"
  },
  {
    "text": "these two things otherwise fail and the entire application is just choosing between the get and the",
    "start": "3414000",
    "end": "3420160"
  },
  {
    "text": "post so this is our our router written in a composable",
    "start": "3420160",
    "end": "3425280"
  },
  {
    "text": "functional way using clysley composition and the entire web location just looks",
    "start": "3425280",
    "end": "3431359"
  },
  {
    "text": "like this start the web server with this with this with this component",
    "start": "3431359",
    "end": "3436960"
  },
  {
    "text": "so you can see this is building bigger things from smaller things um using composition just like we did",
    "start": "3436960",
    "end": "3443920"
  },
  {
    "text": "for everything else and what's nice about this approach is that each of these individual handlers",
    "start": "3443920",
    "end": "3450079"
  },
  {
    "text": "are composable and they're testable they're reasonable i could test the path bit on its own i could test just the",
    "start": "3450079",
    "end": "3456000"
  },
  {
    "text": "hello the routing part on its own i can test the post part on its own i can test each piece on",
    "start": "3456000",
    "end": "3461760"
  },
  {
    "text": "its own and then when i combine them i have high confidence that they will work together i don't have to like",
    "start": "3461760",
    "end": "3468319"
  },
  {
    "text": "be forced to test the entire application in one go so it's a very nice technique the the",
    "start": "3468319",
    "end": "3474960"
  },
  {
    "text": "lego analogy is very very suitable here so no classes by the way",
    "start": "3474960",
    "end": "3480720"
  },
  {
    "text": "there were no classes there's no factories there's no proxies manager",
    "start": "3480720",
    "end": "3487280"
  },
  {
    "text": "classes all that stuff is just pure functions combined together with composition",
    "start": "3487280",
    "end": "3492799"
  },
  {
    "text": "right now when you take the entire web request like this again i said it was a function right so",
    "start": "3492799",
    "end": "3498640"
  },
  {
    "text": "obviously there's branching and stuff going on but there's no classes no inheritance and it's a one directional",
    "start": "3498640",
    "end": "3504799"
  },
  {
    "text": "data flow and that's so nice for being able to debug things that's the",
    "start": "3504799",
    "end": "3512160"
  },
  {
    "text": "power of composition so let's just quickly review and then i'll i'll finish up um",
    "start": "3512160",
    "end": "3517280"
  },
  {
    "text": "so i talked about the philosophy of composition uh i talked about using connectable reusable parts uh",
    "start": "3517280",
    "end": "3523760"
  },
  {
    "text": "building bigger things from smaller things that's the that's the fundamental idea and we saw this with lego",
    "start": "3523760",
    "end": "3528880"
  },
  {
    "text": "we saw with train tracks and now we saw it with functions as well and then the functional principles you",
    "start": "3528880",
    "end": "3534960"
  },
  {
    "text": "have composable functions and you have composable types so these things are designed to be standalone",
    "start": "3534960",
    "end": "3540880"
  },
  {
    "text": "they're not attached to a class they're not tangled up with anything else there's no they're no they're not there's no",
    "start": "3540880",
    "end": "3547359"
  },
  {
    "text": "strings attached they are completely reusable standalone things and this is a very powerful concept you design your function you",
    "start": "3547359",
    "end": "3553200"
  },
  {
    "text": "assume that other people are going to be reusing your functions to design them that way um",
    "start": "3553200",
    "end": "3558400"
  },
  {
    "text": "we looked at various compositional techniques we looked at piping we looked at currying and partial application",
    "start": "3558400",
    "end": "3564960"
  },
  {
    "text": "we looked at composition using bind which is the monad scary bone adword and we looked at",
    "start": "3564960",
    "end": "3570079"
  },
  {
    "text": "closing composition and all these things are different ways of solving different composition",
    "start": "3570079",
    "end": "3575119"
  },
  {
    "text": "problems so almost everything you do in functional programming all things like monas and stuff they're all techniques to solve composition it's",
    "start": "3575119",
    "end": "3581920"
  },
  {
    "text": "like we want to compose things here's a little way of doing it we use monad so here's another way we use",
    "start": "3581920",
    "end": "3587119"
  },
  {
    "text": "carrying well here's another way you know so all the techniques you hear about in functional programming are really to do with getting composition to",
    "start": "3587119",
    "end": "3593520"
  },
  {
    "text": "work so hopefully this is a very quick whiz through everything i don't expect you to",
    "start": "3593520",
    "end": "3599520"
  },
  {
    "text": "understand all this stuff obviously in an hour however hopefully it's been a little bit demystified and so if you're like homer at least",
    "start": "3599520",
    "end": "3606160"
  },
  {
    "text": "you're not scared by it um you can see that there's a you know it's it is understandable it's not",
    "start": "3606160",
    "end": "3612000"
  },
  {
    "text": "it's not magic it's not mysterious it's not mathematical at all so i would encourage you to go you know",
    "start": "3612000",
    "end": "3618480"
  },
  {
    "text": "and and do more research on this if you think this is an interesting way of doing programming",
    "start": "3618480",
    "end": "3623760"
  },
  {
    "text": "so hopefully it's not so scary um that was if if you come away less scared by moan ads",
    "start": "3623760",
    "end": "3629359"
  },
  {
    "text": "then this talk is a success so why bother with all this stuff like",
    "start": "3629359",
    "end": "3634559"
  },
  {
    "text": "the fizz buzz was that was actually worth it and i think yes there's a lot of benefits to",
    "start": "3634559",
    "end": "3639920"
  },
  {
    "text": "composition first of all everything's reusable everything's testable everything's more",
    "start": "3639920",
    "end": "3645839"
  },
  {
    "text": "understandable because the data flows in one direction everything's more maintainable because everything's explicit",
    "start": "3645839",
    "end": "3651760"
  },
  {
    "text": "and everything's kind of extendable because you can add new parts there's lots and lots of benefits to this kind of compositional way this pipeline way of",
    "start": "3651760",
    "end": "3658880"
  },
  {
    "text": "doing things and the final benefit i think this is a different way of thinking it's good for you to learn new ways of doing things rather",
    "start": "3658880",
    "end": "3664960"
  },
  {
    "text": "than just being stuck in the rut and doing things you're familiar with try getting out of your butt and learning a new way of thinking about",
    "start": "3664960",
    "end": "3671040"
  },
  {
    "text": "building programs so i'm going to put the slides and video up there on my website slash composition",
    "start": "3671040",
    "end": "3678160"
  },
  {
    "text": "uh feel free to contact me on twitter uh this is my book again i have to have to promote my book of course and then",
    "start": "3678160",
    "end": "3684559"
  },
  {
    "text": "thank you very much for coming i will be taking questions in the slack channel and uh or like i say or",
    "start": "3684559",
    "end": "3690640"
  },
  {
    "text": "contact me on twitter thanks i hope you found this useful i will see you later",
    "start": "3690640",
    "end": "3696960"
  }
]