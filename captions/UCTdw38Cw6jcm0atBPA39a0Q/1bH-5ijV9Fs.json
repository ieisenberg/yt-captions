[
  {
    "text": "hello good morning lovely people thank you for joining me",
    "start": "1760",
    "end": "7120"
  },
  {
    "text": "today for from wcf to grpc",
    "start": "7120",
    "end": "12400"
  },
  {
    "text": "um i can see lots of letters and one person",
    "start": "12400",
    "end": "19600"
  },
  {
    "text": "who's obviously got a green screen and is wearing entirely green and has",
    "start": "19600",
    "end": "25599"
  },
  {
    "text": "painted themselves green and is just generally quite green",
    "start": "25599",
    "end": "31840"
  },
  {
    "text": "so yes my name is mark grendel um i am currently working",
    "start": "31840",
    "end": "37920"
  },
  {
    "text": "at uh visual recode or on visual recode with gibraltar",
    "start": "37920",
    "end": "43440"
  },
  {
    "text": "software [Music] and there's somebody they've turned their camera on",
    "start": "43440",
    "end": "50079"
  },
  {
    "text": "um it's actually it's really nice for presenters um or certainly for me if people",
    "start": "50079",
    "end": "56559"
  },
  {
    "text": "are sort of somewhere sensible and private and they have clothes on for them to",
    "start": "56559",
    "end": "63359"
  },
  {
    "text": "uh for people to turn their cameras on so i can see some faces so when i say something hilarious there",
    "start": "63359",
    "end": "68960"
  },
  {
    "text": "you go peter thank you very much um when i say something hilarious i can see you rolling on the floor laughing",
    "start": "68960",
    "end": "74640"
  },
  {
    "text": "um so yeah i really appreciate that thank you very much guys",
    "start": "74640",
    "end": "79759"
  },
  {
    "text": "so much better than talking to a screen full of letters okay right yes um",
    "start": "79759",
    "end": "86880"
  },
  {
    "text": "so you are all here because you are wcf survivors i'm guessing",
    "start": "86880",
    "end": "94320"
  },
  {
    "text": "um or possibly you're even wcf fans and you love wcf and it's done",
    "start": "94320",
    "end": "100079"
  },
  {
    "text": "wonderful things for you and you've built amazing things with it and you want to know what the situation",
    "start": "100079",
    "end": "106399"
  },
  {
    "text": "is and what happens next which is the eternal question of",
    "start": "106399",
    "end": "112880"
  },
  {
    "text": "software development and so as dot net developers",
    "start": "112880",
    "end": "118560"
  },
  {
    "text": "we are now looking to the future of net we had microsoft build last month",
    "start": "118560",
    "end": "125600"
  },
  {
    "text": "and they shared a lot of the plans for net 5 and everything there and you may have",
    "start": "125600",
    "end": "131599"
  },
  {
    "text": "been at microsoft build last year 2019 or you may have watched it online",
    "start": "131599",
    "end": "137040"
  },
  {
    "text": "and you will have seen the announcement they made there so we are currently on net core",
    "start": "137040",
    "end": "145040"
  },
  {
    "text": "3.1 which is a long term service release and then this november uh we're not",
    "start": "145040",
    "end": "151440"
  },
  {
    "text": "getting.net core four we're getting.net five and everything's coming together and xamarin and mono",
    "start": "151440",
    "end": "157280"
  },
  {
    "text": "and winrt and all the things are coming together into dot net five",
    "start": "157280",
    "end": "162720"
  },
  {
    "text": "and then next year they'll be dot net six which gives us another lts release",
    "start": "162720",
    "end": "167920"
  },
  {
    "text": "and then so on every year at new.net and the even numbered ones will be",
    "start": "167920",
    "end": "173440"
  },
  {
    "text": "long-term service releases and looking back um at",
    "start": "173440",
    "end": "179519"
  },
  {
    "text": "the nets of the past nets of history um net four",
    "start": "179519",
    "end": "186720"
  },
  {
    "text": "is no longer and there are certain bits of net four that are not coming across",
    "start": "186720",
    "end": "194800"
  },
  {
    "text": "to net five and are going to stay they'll continue to be supported but",
    "start": "194800",
    "end": "203120"
  },
  {
    "text": "um they're not coming over to dot net core for various reasons so um web forms for example",
    "start": "203120",
    "end": "210959"
  },
  {
    "text": "the old classic from 2001 asp.net web",
    "start": "210959",
    "end": "216000"
  },
  {
    "text": "forms is not coming to net 5 because a lot of web forms was too closely",
    "start": "216000",
    "end": "223599"
  },
  {
    "text": "linked to windows and to iis and also in the modern world",
    "start": "223599",
    "end": "232480"
  },
  {
    "text": "just looks like not quite such a good idea and so microsoft saying if you have web",
    "start": "232480",
    "end": "237519"
  },
  {
    "text": "forms code you should just migrate it to blazer which is not something i would",
    "start": "237519",
    "end": "245040"
  },
  {
    "text": "want to have to try and do but it's it's difficult",
    "start": "245040",
    "end": "252080"
  },
  {
    "text": "web forms and blazer are completely different technologies nothing in common whatsoever so what",
    "start": "252080",
    "end": "257280"
  },
  {
    "text": "they're basically saying there is just rewrite it rewrite your code in this nice",
    "start": "257280",
    "end": "262479"
  },
  {
    "text": "shiny new thing we've built and wcf wcf is not coming to net5 and we'll talk",
    "start": "262479",
    "end": "270000"
  },
  {
    "text": "a little bit more about why that is in a moment and what microsoft said at build 2019",
    "start": "270000",
    "end": "276639"
  },
  {
    "text": "was if you have wcf applications then we recommend migrating them to grpc which is now in net core 3.1",
    "start": "276639",
    "end": "285040"
  },
  {
    "text": "and will continue to be supported going forward in net 5 and workflow foundation",
    "start": "285040",
    "end": "293120"
  },
  {
    "text": "i never used workflow foundation and i never really thought workflow foundation was particularly popular but when i've",
    "start": "293120",
    "end": "298320"
  },
  {
    "text": "done this in talks and said hands up if you use workflow foundation there's always quite a few hands that go",
    "start": "298320",
    "end": "304080"
  },
  {
    "text": "up and and it surprises me so that workflow foundation there is actually an",
    "start": "304080",
    "end": "310560"
  },
  {
    "text": "open source port of workflow foundation taking that over to uh net core and dot",
    "start": "310560",
    "end": "317360"
  },
  {
    "text": "net five uh so that people can continue to use that and there is an open source port of wcf",
    "start": "317360",
    "end": "324080"
  },
  {
    "text": "as well but again we will talk about that in a moment",
    "start": "324080",
    "end": "329680"
  },
  {
    "text": "so i'm going to talk to you today about how you can rescue your wcf investment and",
    "start": "329680",
    "end": "336960"
  },
  {
    "text": "some tricks and things you can use to migrate your existing code to wcf",
    "start": "336960",
    "end": "342479"
  },
  {
    "text": "and also how grpc as a platform and as a.net core technology compares",
    "start": "342479",
    "end": "350320"
  },
  {
    "text": "to windows communication foundation so wcf was created",
    "start": "350320",
    "end": "358000"
  },
  {
    "text": "in uh 2006. it was part of the whole windows vista is going to change the",
    "start": "358000",
    "end": "364000"
  },
  {
    "text": "world and dotnet 3 is going to change the world thing which went so very very well",
    "start": "364000",
    "end": "370479"
  },
  {
    "text": "and we all have happy happy memories of those days",
    "start": "370479",
    "end": "375600"
  },
  {
    "text": "windows presentation foundation windows communication foundation and windows workflow foundation which",
    "start": "375759",
    "end": "382080"
  },
  {
    "text": "then just had to be changed to workflow foundation because the world wildlife fund threatened to sue microsoft",
    "start": "382080",
    "end": "388400"
  },
  {
    "text": "and that's it's a bad look getting sued by a panda people tend to take the pandas aside",
    "start": "388400",
    "end": "394319"
  },
  {
    "text": "when that happens and so microsoft backed down despite their fantastic lawyers um",
    "start": "394319",
    "end": "401039"
  },
  {
    "text": "but wcf was uh the dream it was creating networked applications",
    "start": "401039",
    "end": "408240"
  },
  {
    "text": "service oriented architecture was all the thing at the time and we wanted to build systems that were",
    "start": "408240",
    "end": "413680"
  },
  {
    "text": "spread across dozens or hundreds of machines and communicate between them using",
    "start": "413680",
    "end": "419280"
  },
  {
    "text": "networking and wcf let you do that but without having to",
    "start": "419280",
    "end": "424479"
  },
  {
    "text": "write all the networking code into your controllers or into your your services themselves you just wrote",
    "start": "424479",
    "end": "430160"
  },
  {
    "text": "your services and then you wrote a couple of lines of very simple xml",
    "start": "430160",
    "end": "435520"
  },
  {
    "text": "to configure those services and tell the system how they should be communicating with each other",
    "start": "435520",
    "end": "442800"
  },
  {
    "text": "and for example wcf you could make wcf communicate using",
    "start": "442800",
    "end": "448479"
  },
  {
    "text": "soap over http and so you could have a net server talking to java clients or",
    "start": "448479",
    "end": "456000"
  },
  {
    "text": "python clients and those were the only three programming languages in the world in 2006 and you could have those",
    "start": "456000",
    "end": "463680"
  },
  {
    "text": "services communicating over http uh with the messages formatted",
    "start": "463680",
    "end": "468720"
  },
  {
    "text": "as soap and you could have java servers written in some other language talking",
    "start": "468720",
    "end": "475919"
  },
  {
    "text": "so and you could generate.net clients to talk to your java servers it was all completely brilliant",
    "start": "475919",
    "end": "480960"
  },
  {
    "text": "um and and there was much rejoicing uh and then the other option uh i mean",
    "start": "480960",
    "end": "487280"
  },
  {
    "text": "there were many many options and if you've used wcf you'll know there were many options for formatting messages and for passing",
    "start": "487280",
    "end": "495360"
  },
  {
    "text": "those messages between servers and clients but the other main one that people used",
    "start": "495360",
    "end": "501039"
  },
  {
    "text": "was net tcp and net tcp actually for its time net tcp was",
    "start": "501039",
    "end": "507759"
  },
  {
    "text": "phenomenal it used a binary message format um it used raw tcp",
    "start": "507759",
    "end": "513919"
  },
  {
    "text": "sockets and it just it was incredibly fast it could do two-way communication so",
    "start": "513919",
    "end": "521360"
  },
  {
    "text": "the client could call methods on the server and the server could call methods on the",
    "start": "521360",
    "end": "526959"
  },
  {
    "text": "client with callback interfaces and everything and it really was very very clever stuff",
    "start": "526959",
    "end": "533360"
  },
  {
    "text": "net tcp uh even today is it's really very impressive the problem with net tcp",
    "start": "533360",
    "end": "539519"
  },
  {
    "text": "was that it was a proprietary.net technology which meant that it was a net",
    "start": "539519",
    "end": "545680"
  },
  {
    "text": "wcf server talking to a wcf client",
    "start": "545680",
    "end": "551120"
  },
  {
    "text": "and you lost all of the interop so your entire distributed system",
    "start": "551120",
    "end": "556320"
  },
  {
    "text": "had to be written in one language or potentially two languages some of it",
    "start": "556320",
    "end": "562480"
  },
  {
    "text": "could be written in c sharp some of it could be written in vb.net but it all had to be written in net and",
    "start": "562480",
    "end": "568640"
  },
  {
    "text": "in my experience over the last 15 years what this is actually meant is that people said my",
    "start": "568640",
    "end": "574080"
  },
  {
    "text": "entire distributive system must be contained in a single.net solution in source",
    "start": "574080",
    "end": "579760"
  },
  {
    "text": "control and i will build it all in one go and deploy it all at the same time every time and so",
    "start": "579760",
    "end": "586959"
  },
  {
    "text": "that's not really a distributed system that's just a monolith with socket and",
    "start": "586959",
    "end": "594160"
  },
  {
    "text": "to make the magic of wcf work you needed to configure the binding of",
    "start": "594160",
    "end": "600480"
  },
  {
    "text": "your wcf application in in xml and",
    "start": "600480",
    "end": "606160"
  },
  {
    "text": "uh however this may have started off if anyone has run any services of any complexity in",
    "start": "606160",
    "end": "612399"
  },
  {
    "text": "production you will know that your xml configuration for that service",
    "start": "612399",
    "end": "618000"
  },
  {
    "text": "generally ends up actually being longer than the service code itself you end up with thousands of lines of",
    "start": "618000",
    "end": "624240"
  },
  {
    "text": "xml with no intellisense and no code completion",
    "start": "624240",
    "end": "629279"
  },
  {
    "text": "and no compilation step and the only way to figure out whether your xml is working is to try and run your system in",
    "start": "629279",
    "end": "635440"
  },
  {
    "text": "production and then when it doesn't you can say ah what is wrong with my xml",
    "start": "635440",
    "end": "641600"
  },
  {
    "text": "so yes so now after 15 years of building",
    "start": "641600",
    "end": "648160"
  },
  {
    "text": "some really quite large and impressive and and complicated systems with wcf",
    "start": "648160",
    "end": "654079"
  },
  {
    "text": "uh microsoft have come along and they've said to us no more wcf we are now saying you should use grpc",
    "start": "654079",
    "end": "662320"
  },
  {
    "text": "and i think it's worth stopping for a moment to talk about why they are um",
    "start": "662320",
    "end": "669279"
  },
  {
    "text": "saying this why they are promoting grpc and why they are not putting in the",
    "start": "669279",
    "end": "675839"
  },
  {
    "text": "effort to bring wcf into the.net core and dotnet 5 era",
    "start": "675839",
    "end": "682800"
  },
  {
    "text": "the thing is that soap so the thing that made wcf cross",
    "start": "684160",
    "end": "691440"
  },
  {
    "text": "platform soap xml messages and we'll just look at one of these",
    "start": "691440",
    "end": "697920"
  },
  {
    "text": "uh just go look at the configuration a soap xml message is enormous",
    "start": "697920",
    "end": "704480"
  },
  {
    "text": "if you want to send the value 42 over soap then you need to declare a",
    "start": "704480",
    "end": "710880"
  },
  {
    "text": "model object some xml schema that actually puts um 42 into xml so",
    "start": "710880",
    "end": "719680"
  },
  {
    "text": "that either needs to be as a value of element or an attribute of an element and then you need to wrap that element",
    "start": "719680",
    "end": "726480"
  },
  {
    "text": "in some soap so say this is a soap message with the value 42 in it and then when you want to send that",
    "start": "726480",
    "end": "732560"
  },
  {
    "text": "across the wire you need to wrap it in another soap envelope that says this is the value 42 and this is the message",
    "start": "732560",
    "end": "739519"
  },
  {
    "text": "that i would like to send the value 42 to here are some headers that go along",
    "start": "739519",
    "end": "744639"
  },
  {
    "text": "with value 42 that's necessary for the next server to process this message correctly",
    "start": "744639",
    "end": "750720"
  },
  {
    "text": "and then when the server sends the uh question mark answer back again",
    "start": "750720",
    "end": "759839"
  },
  {
    "text": "i forgot to share my screen i completely forgot to share my screen",
    "start": "762079",
    "end": "768959"
  },
  {
    "text": "there's my screen right hey look excellent",
    "start": "768959",
    "end": "774320"
  },
  {
    "text": "right so yes this is here here is my lovely slide for wcf with soap over http so we've got",
    "start": "774320",
    "end": "781040"
  },
  {
    "text": "net and java and python in the corners there and here was my lovely slide for wcf with net tcp",
    "start": "781040",
    "end": "787360"
  },
  {
    "text": "and so we've got",
    "start": "787360",
    "end": "790320"
  },
  {
    "text": "we've got wcf and wcf and wcf and wcf in the corners there and um and then",
    "start": "794880",
    "end": "801440"
  },
  {
    "text": "here's my lovely slide for the uh oh so simple xml that you use to configure your bindings and",
    "start": "801440",
    "end": "807040"
  },
  {
    "text": "contracts and services and service behaviors um and everything else um and uh yes",
    "start": "807040",
    "end": "814399"
  },
  {
    "text": "um hands up if you loved uh wcf configuration",
    "start": "814399",
    "end": "821360"
  },
  {
    "text": "um and then this is this is the slide that we were on",
    "start": "821360",
    "end": "826480"
  },
  {
    "text": "so yeah um soap is enormous and in 2006 soap seemed like a good idea",
    "start": "826480",
    "end": "832160"
  },
  {
    "text": "because in 2006 xml seemed like a good idea and everybody was using xml for everything",
    "start": "832160",
    "end": "837680"
  },
  {
    "text": "and nobody could ever come up with anything better than xml and so it made perfect sense um and",
    "start": "837680",
    "end": "844639"
  },
  {
    "text": "uh net tcp well that microsoft actually published the",
    "start": "844639",
    "end": "851040"
  },
  {
    "text": "all the specifications for net tcp both for the wire formats and for the actual communication",
    "start": "851040",
    "end": "858399"
  },
  {
    "text": "protocol and said to people like sun microsystems and other platforms hey here are the",
    "start": "858399",
    "end": "865680"
  },
  {
    "text": "specs for net tcp you could get your language talking to our services open at tcp and the",
    "start": "865680",
    "end": "873440"
  },
  {
    "text": "whole of the rest of the ecosystem went no and",
    "start": "873440",
    "end": "879839"
  },
  {
    "text": "and ignored microsoft and so it's it's carried on like that",
    "start": "879839",
    "end": "885760"
  },
  {
    "text": "and in pure microsoft shops it's it's continued to work but since that",
    "start": "885760",
    "end": "891279"
  },
  {
    "text": "time google have released grpc and grpc actually grew out of",
    "start": "891279",
    "end": "898880"
  },
  {
    "text": "an internal um project and standard at google called stubby and stubby was",
    "start": "898880",
    "end": "905680"
  },
  {
    "text": "what mike google were using for communication between all their internal services",
    "start": "905680",
    "end": "911040"
  },
  {
    "text": "and some of those services were written in python and some of those services were written in java",
    "start": "911040",
    "end": "916079"
  },
  {
    "text": "and some of them were written in c plus plus and stubby was very much like net tcp",
    "start": "916079",
    "end": "924880"
  },
  {
    "text": "but google had already had an interest in making it work between multiple languages because they were",
    "start": "924880",
    "end": "931120"
  },
  {
    "text": "using multiple languages um and so protobuf was",
    "start": "931120",
    "end": "936880"
  },
  {
    "text": "public they had shared protobuf and protobuf uh provided data serialization and it",
    "start": "936880",
    "end": "944880"
  },
  {
    "text": "was language neutral and it was platform neutral and it was extensible and it was small and fast and simple um",
    "start": "944880",
    "end": "952000"
  },
  {
    "text": "and they had published the specification for protobuf but",
    "start": "952000",
    "end": "957519"
  },
  {
    "text": "um they also maintained it as an open source project which meant people were more likely to engage with it and",
    "start": "957519",
    "end": "964639"
  },
  {
    "text": "they wrote code generation layers for it for other languages as well",
    "start": "964639",
    "end": "970240"
  },
  {
    "text": "including.net and so protobuf was similar to the wire",
    "start": "970240",
    "end": "975360"
  },
  {
    "text": "format from net tcp but it was open source and everybody could see it and of course",
    "start": "975360",
    "end": "981279"
  },
  {
    "text": "it was google and google as everybody knows aren't evil no they're not shush um",
    "start": "981279",
    "end": "989519"
  },
  {
    "text": "and so internally they were using stubby as their communication library and stubby",
    "start": "989519",
    "end": "998560"
  },
  {
    "text": "sent photograph messages over tcp sockets so in that sense it was a bit",
    "start": "998560",
    "end": "1003920"
  },
  {
    "text": "like net tcp but then http 2 came along",
    "start": "1003920",
    "end": "1009360"
  },
  {
    "text": "and http 2 could do all the things that stubby needed it could do um",
    "start": "1009360",
    "end": "1016639"
  },
  {
    "text": "it could maintain open connections it could send binary data it could compress headers",
    "start": "1016639",
    "end": "1021920"
  },
  {
    "text": "it could do streaming it could do two-way streaming and so when http2",
    "start": "1021920",
    "end": "1028640"
  },
  {
    "text": "arrived which itself was based on technology that had come out of google in the",
    "start": "1028640",
    "end": "1033918"
  },
  {
    "text": "spdy protocol google said hey http 2 actually does all",
    "start": "1033919",
    "end": "1040880"
  },
  {
    "text": "the things that we've got custom code to do in stubby let's rewrite stubby as an http 2",
    "start": "1040880",
    "end": "1047839"
  },
  {
    "text": "thing and so they did and um and then that meant it was more",
    "start": "1047839",
    "end": "1053200"
  },
  {
    "text": "widely applicable and simpler and people could use it more widely and so they open sourced that and",
    "start": "1053200",
    "end": "1059360"
  },
  {
    "text": "called it grpc and so grpc provides remote procedure calls um it's language neutral it's platform",
    "start": "1059360",
    "end": "1066320"
  },
  {
    "text": "neutral it's extensible it's small and fast and on the",
    "start": "1066320",
    "end": "1071840"
  },
  {
    "text": "uh from the user's side at least from the person creating the",
    "start": "1071840",
    "end": "1077360"
  },
  {
    "text": "grpc application it is simple um going into the actual",
    "start": "1077360",
    "end": "1082799"
  },
  {
    "text": "source code for grpc it's a little bit more complicated so grpc gives us the combination",
    "start": "1082799",
    "end": "1089840"
  },
  {
    "text": "of net tcp performance and soap interoperability and",
    "start": "1089840",
    "end": "1096960"
  },
  {
    "text": "microsoft had a choice between bringing wcf up to net core and trying",
    "start": "1096960",
    "end": "1104400"
  },
  {
    "text": "to make it match grpc in terms of both net tcp",
    "start": "1104400",
    "end": "1109760"
  },
  {
    "text": "performance and soap interoperability or bringing wcf to.net core and just",
    "start": "1109760",
    "end": "1116640"
  },
  {
    "text": "letting it continue bwcf and only be fast when talking between.net systems",
    "start": "1116640",
    "end": "1122640"
  },
  {
    "text": "and only be interoperable when using soap which is really totally dead in the water at this point",
    "start": "1122640",
    "end": "1129679"
  },
  {
    "text": "or they could just say hey let's let's adopt grpc",
    "start": "1129679",
    "end": "1135200"
  },
  {
    "text": "and if we adopt grpc then we will be able to enter the ecosystem which currently supports",
    "start": "1135280",
    "end": "1143039"
  },
  {
    "text": "um net java go c plus plus objective c swift node.js python rupee dot php pearl",
    "start": "1143039",
    "end": "1149600"
  },
  {
    "text": "rust haskell scala kotlin elixir and erlang and even web browsers",
    "start": "1149600",
    "end": "1155600"
  },
  {
    "text": "with a little caveat around the web browser bits and pieces",
    "start": "1155600",
    "end": "1160720"
  },
  {
    "text": "and so that's the decision they made and they built first class support the grpc",
    "start": "1160720",
    "end": "1165760"
  },
  {
    "text": "into asp.net core and netcore 3.1",
    "start": "1165760",
    "end": "1171760"
  },
  {
    "text": "and just suggested to people that they migrate their code across and i'm here to show you that that's not",
    "start": "1172960",
    "end": "1179360"
  },
  {
    "text": "actually too complicated so",
    "start": "1179360",
    "end": "1184320"
  },
  {
    "text": "you can actually already do grpc in in.net you can do and grpc.net 4.5",
    "start": "1185919",
    "end": "1193200"
  },
  {
    "text": "google have been supporting.net for a long time with both protobuf and",
    "start": "1193200",
    "end": "1199520"
  },
  {
    "text": "grpc but the net 4.5 implementation is",
    "start": "1199520",
    "end": "1204960"
  },
  {
    "text": "actually a wrapper around the native grpc server",
    "start": "1204960",
    "end": "1210640"
  },
  {
    "text": "that's written in c and c plus plus and microsoft it works but",
    "start": "1210640",
    "end": "1218080"
  },
  {
    "text": "microsoft wanted to make it a first-class way of doing services in asp.net core and so they created",
    "start": "1218080",
    "end": "1225520"
  },
  {
    "text": "asp.net called grpc but they didn't create it as net",
    "start": "1225520",
    "end": "1231679"
  },
  {
    "text": "slash asp.net grpc or anything like that they went to the",
    "start": "1231679",
    "end": "1237039"
  },
  {
    "text": "grpc project and they said hey we'd like to do our own um re-implementation of",
    "start": "1237039",
    "end": "1244720"
  },
  {
    "text": "grpc that sits really nicely in asp.net core and we would like to contribute that",
    "start": "1244720",
    "end": "1252799"
  },
  {
    "text": "into the grpc project and so asp.net core grpc lives in the",
    "start": "1252799",
    "end": "1257919"
  },
  {
    "text": "grpc organization on github and is managed by",
    "start": "1257919",
    "end": "1264320"
  },
  {
    "text": "grpc project members and so it's part of the grpc ecosystem",
    "start": "1264320",
    "end": "1270400"
  },
  {
    "text": "not just part of the asp.net core ecosystem an asp.net core grpc is a fully managed",
    "start": "1270400",
    "end": "1277919"
  },
  {
    "text": "implementation um it's maintained by microsoft developers including james newton king who did a talk about",
    "start": "1277919",
    "end": "1284799"
  },
  {
    "text": "it yesterday morning and who i think basically if he never",
    "start": "1284799",
    "end": "1290799"
  },
  {
    "text": "sees another jason serializer again for as long as he lives he'll be happy and so he's um he's now working on",
    "start": "1290799",
    "end": "1298400"
  },
  {
    "text": "asp.net core grpc and it runs on the kestrel http server",
    "start": "1298400",
    "end": "1303679"
  },
  {
    "text": "and the clients for it in.net use system.net.http client",
    "start": "1303679",
    "end": "1311520"
  },
  {
    "text": "and all these facts the fact that it runs on kestrel http server for example means that when you have",
    "start": "1311520",
    "end": "1318720"
  },
  {
    "text": "your startup code with your grpc application it looks just like a normal asp.net core",
    "start": "1318720",
    "end": "1326720"
  },
  {
    "text": "startup application and we have a services.ad grpc method um",
    "start": "1326720",
    "end": "1334320"
  },
  {
    "text": "and we have within our configure point we have endpoints.map grpc service",
    "start": "1334320",
    "end": "1341360"
  },
  {
    "text": "and it looks exactly like a traditional asp.net core",
    "start": "1341360",
    "end": "1348880"
  },
  {
    "text": "application because you know it's been around for three or four years now we can have traditional asb net core",
    "start": "1348880",
    "end": "1354080"
  },
  {
    "text": "applications it's it's practically historical um",
    "start": "1354080",
    "end": "1360240"
  },
  {
    "text": "so if you've never seen a grpc application before",
    "start": "1360240",
    "end": "1365600"
  },
  {
    "text": "um we can talk about what it looks like and how it is different from a wcf application",
    "start": "1365600",
    "end": "1371280"
  },
  {
    "text": "so grpc applications have a dot proto file and that is the interface definition so",
    "start": "1371280",
    "end": "1378240"
  },
  {
    "text": "in wcf when you created a service you would declare an interface and decorate it as a service contract",
    "start": "1378240",
    "end": "1385120"
  },
  {
    "text": "and you would say hey this is what my service is going to look like it's going to have these methods they're going to take these parameters",
    "start": "1385120",
    "end": "1391520"
  },
  {
    "text": "they're going to use these objects to send data backwards and forwards and this is this is my",
    "start": "1391520",
    "end": "1398559"
  },
  {
    "text": "this is what my service is going to look like and then you would create an implementation of that c sharp",
    "start": "1398559",
    "end": "1404720"
  },
  {
    "text": "interface and you would write all the code that made those actual endpoints and",
    "start": "1404720",
    "end": "1411039"
  },
  {
    "text": "everything else work so you had this separation of the definition of your interface",
    "start": "1411039",
    "end": "1416799"
  },
  {
    "text": "and the definition of your actual service um and grpc works in a very very similar",
    "start": "1416799",
    "end": "1422960"
  },
  {
    "text": "way except it's across it was built from the ground up to be cross-platform",
    "start": "1422960",
    "end": "1428559"
  },
  {
    "text": "and so the interface definition doesn't happen in any particular",
    "start": "1428559",
    "end": "1433679"
  },
  {
    "text": "language it happens in a a separate language just for doing",
    "start": "1433679",
    "end": "1439200"
  },
  {
    "text": "that and then your service implementation can be written in whichever language you like",
    "start": "1439200",
    "end": "1445039"
  },
  {
    "text": "so this is a proto file with some services and this is uh the protobuf",
    "start": "1445039",
    "end": "1452880"
  },
  {
    "text": "interface definition language and here we are saying this is our syntax this is our",
    "start": "1452880",
    "end": "1460559"
  },
  {
    "text": "package is called portfolio service our service is called portfolios",
    "start": "1460559",
    "end": "1468320"
  },
  {
    "text": "and it has two methods get which takes a get request and returns get response and get all which",
    "start": "1468320",
    "end": "1475679"
  },
  {
    "text": "so this is what would be our interface our service contract interface",
    "start": "1475679",
    "end": "1483520"
  },
  {
    "text": "in a wcf application and then our messages",
    "start": "1483520",
    "end": "1490720"
  },
  {
    "text": "look like this and this is what would be our data contracts",
    "start": "1490720",
    "end": "1495760"
  },
  {
    "text": "in awcf application and that we keep it completely separate uh",
    "start": "1495760",
    "end": "1501919"
  },
  {
    "text": "this is a separate language and in these messages you can see we've",
    "start": "1501919",
    "end": "1507120"
  },
  {
    "text": "got a data type and a field name and the field names are actually wrong in this",
    "start": "1507120",
    "end": "1512559"
  },
  {
    "text": "screen grab those should be um lowercase underscore format for our field names um",
    "start": "1512559",
    "end": "1520480"
  },
  {
    "text": "to be properly cross-platform um and then on the end there we have a field number and the field number is a",
    "start": "1520480",
    "end": "1528000"
  },
  {
    "text": "very useful thing um one of the issues with sort of api",
    "start": "1528000",
    "end": "1533919"
  },
  {
    "text": "development and distributed system development is versioning of systems and if you",
    "start": "1533919",
    "end": "1541679"
  },
  {
    "text": "change a field type or add a field name or remove a field",
    "start": "1541679",
    "end": "1548559"
  },
  {
    "text": "then you have a chance of breaking um any existing clients out there",
    "start": "1548559",
    "end": "1556159"
  },
  {
    "text": "or potentially even having a client that's got a newer version of the client code talking to a server that's still running",
    "start": "1556159",
    "end": "1562400"
  },
  {
    "text": "an older version of the server protobuf uses the field numbers as part",
    "start": "1562400",
    "end": "1568720"
  },
  {
    "text": "of the encoding of the message over the wire to keep things nice and small um but it also means that",
    "start": "1568720",
    "end": "1575679"
  },
  {
    "text": "uh if you add a new field and take an old field out as long as you don't reuse the field",
    "start": "1575679",
    "end": "1581440"
  },
  {
    "text": "number you get some level of uh compatibility between the messages um",
    "start": "1581440",
    "end": "1587520"
  },
  {
    "text": "and so if in portfolio item i sort of removed cost as a double and added price as a float",
    "start": "1587520",
    "end": "1597120"
  },
  {
    "text": "um then if i made prices field number five then uh i wouldn't be causing",
    "start": "1597120",
    "end": "1603919"
  },
  {
    "text": "um breakage of my contract there and we have a set of types in protobuf",
    "start": "1603919",
    "end": "1612559"
  },
  {
    "text": "which are available across all the different platforms and then we can construct more complicated types just by creating",
    "start": "1612559",
    "end": "1619360"
  },
  {
    "text": "our own messages and for arrays or lists we have this",
    "start": "1619360",
    "end": "1625440"
  },
  {
    "text": "repeated keyword here which says to the protobuf generator",
    "start": "1625440",
    "end": "1633679"
  },
  {
    "text": "create a list okay so that's a prototype file and",
    "start": "1633679",
    "end": "1638880"
  },
  {
    "text": "we'll look at those in a bit more detail shortly and the way protobuf works",
    "start": "1638880",
    "end": "1645120"
  },
  {
    "text": "is that in whichever platform you are working it generates a base",
    "start": "1645120",
    "end": "1651679"
  },
  {
    "text": "class or certainly in languages where that makes sense it",
    "start": "1651679",
    "end": "1657360"
  },
  {
    "text": "generates a base class which you can inherit from and so that code that protobuf file",
    "start": "1657360",
    "end": "1663600"
  },
  {
    "text": "there in asp.net or grpc will generate a portfolio's base class",
    "start": "1663600",
    "end": "1671760"
  },
  {
    "text": "and that base class declares virtual versions of all the methods so",
    "start": "1671760",
    "end": "1677840"
  },
  {
    "text": "we have a virtual get method that we can override",
    "start": "1677840",
    "end": "1683840"
  },
  {
    "text": "it's important to note that it's not an abstract method it is actually a virtual method",
    "start": "1685120",
    "end": "1691200"
  },
  {
    "text": "if you don't override the method there is a default implementation that will just effectively throw grpc's",
    "start": "1691200",
    "end": "1698880"
  },
  {
    "text": "equivalent of a not implemented exception so the call won't fail exactly",
    "start": "1698880",
    "end": "1705760"
  },
  {
    "text": "but it will throw an exception and you can see in this code sample here",
    "start": "1705760",
    "end": "1711360"
  },
  {
    "text": "that we have a rpc exception and these work like fault exceptions in wcf so you",
    "start": "1711360",
    "end": "1718960"
  },
  {
    "text": "can throw an exception on the server and you can catch that exception on the client",
    "start": "1718960",
    "end": "1725840"
  },
  {
    "text": "and any information inside that exception will be passed across at the moment it doesn't support so",
    "start": "1726159",
    "end": "1732720"
  },
  {
    "text": "fault exception in wcf is a generic type and you can pass a whole object over",
    "start": "1732720",
    "end": "1737919"
  },
  {
    "text": "with it it's technically possible to do that in grpc but it's not supported",
    "start": "1737919",
    "end": "1743919"
  },
  {
    "text": "in the net version of grpc yet it will be at some point in the",
    "start": "1743919",
    "end": "1750840"
  },
  {
    "text": "future so yes rather than declaring interface and",
    "start": "1750840",
    "end": "1756159"
  },
  {
    "text": "implementing it we have our protobuf file with our service definition and our",
    "start": "1756159",
    "end": "1762960"
  },
  {
    "text": "message definitions and we use those to generate the relevant classes",
    "start": "1762960",
    "end": "1768080"
  },
  {
    "text": "in our net application and this is completely integrated with",
    "start": "1768080",
    "end": "1773520"
  },
  {
    "text": "the ms build process there's a grpc.tools package which has",
    "start": "1773520",
    "end": "1779120"
  },
  {
    "text": "uh build targets which build these files build these base classes just as",
    "start": "1779120",
    "end": "1785520"
  },
  {
    "text": "part of the build if you're working in visual studio um they'll actually just run every time you save the proto file",
    "start": "1785520",
    "end": "1792399"
  },
  {
    "text": "it'll run and update the code for you if you",
    "start": "1792399",
    "end": "1798159"
  },
  {
    "text": "if you're running from a visual studio code or vs mac or jetbrains rider you",
    "start": "1799919",
    "end": "1806559"
  },
  {
    "text": "occasionally have to do a sort of manual build to get things to update",
    "start": "1806559",
    "end": "1812960"
  },
  {
    "text": "okay so grpc modes",
    "start": "1812960",
    "end": "1820880"
  },
  {
    "text": "wcf had a lot of modes a lot of different bindings and contracts and service behaviors and",
    "start": "1821360",
    "end": "1829200"
  },
  {
    "text": "everything else which is one of the reasons that people",
    "start": "1829200",
    "end": "1835919"
  },
  {
    "text": "liked it so much and people want to be able to do full duplex and and all these sorts of things and grpc",
    "start": "1835919",
    "end": "1844158"
  },
  {
    "text": "can match most of those things so wcf obviously the simplest one was",
    "start": "1844320",
    "end": "1851039"
  },
  {
    "text": "with basic http binding and you would just have a request and that would send the result",
    "start": "1851039",
    "end": "1857120"
  },
  {
    "text": "and then send another request and that would send another result and so grpc has exactly the same thing",
    "start": "1857120",
    "end": "1863919"
  },
  {
    "text": "you have a call that takes some parameters and returns a parameter a response",
    "start": "1863919",
    "end": "1871679"
  },
  {
    "text": "value which is very straightforward wcf if you were using the right bindings",
    "start": "1871679",
    "end": "1877360"
  },
  {
    "text": "with the right service behaviors and you returned an i innumerable of t",
    "start": "1877360",
    "end": "1882960"
  },
  {
    "text": "from your wcf method then it would actually send the results one at a time so it would send the first",
    "start": "1882960",
    "end": "1889519"
  },
  {
    "text": "result before the enumerator had finished on the server side",
    "start": "1889519",
    "end": "1894559"
  },
  {
    "text": "and so you could stream results from the server to the client and grpc provides this with server",
    "start": "1894559",
    "end": "1901600"
  },
  {
    "text": "streaming and streaming support is built into http 2 and so the grpc is just taking",
    "start": "1901600",
    "end": "1909200"
  },
  {
    "text": "advantage of that wcf also had one way to server",
    "start": "1909200",
    "end": "1915039"
  },
  {
    "text": "which was effectively void methods on your service contract and the client would say hey i'm just",
    "start": "1915039",
    "end": "1921440"
  },
  {
    "text": "going to call that method and i'm not even going to wait for an answer i'm just telling you something i don't care what you think of it don't",
    "start": "1921440",
    "end": "1928159"
  },
  {
    "text": "ask me back and grpc supports client streaming",
    "start": "1928159",
    "end": "1933200"
  },
  {
    "text": "so the client can open a stream to the server and then just send messages over that",
    "start": "1933200",
    "end": "1938559"
  },
  {
    "text": "stream very quickly without needing to wait for a response and then of course wcf had full duplex",
    "start": "1938559",
    "end": "1946880"
  },
  {
    "text": "which worked with either net tcp or with ws dual http binding",
    "start": "1946880",
    "end": "1953519"
  },
  {
    "text": "where the client could send messages to the server or the client could call methods on the",
    "start": "1953519",
    "end": "1958960"
  },
  {
    "text": "server and the server could call methods on the client via a callback interface entirely",
    "start": "1958960",
    "end": "1965120"
  },
  {
    "text": "independently of each other so they didn't have to wait for the other one to ask",
    "start": "1965120",
    "end": "1970399"
  },
  {
    "text": "before being able to trigger behavior on the other side and grpc can do bi-directional streaming",
    "start": "1970399",
    "end": "1978480"
  },
  {
    "text": "and send messages um out of order to each other um",
    "start": "1978480",
    "end": "1986240"
  },
  {
    "text": "in the same way which allows us to implement something similar to wcf's full duplex binding",
    "start": "1986240",
    "end": "1992720"
  },
  {
    "text": "it just works in a very different way and of course wcf also supported asynchronous over cube so you could bind",
    "start": "1992720",
    "end": "1999519"
  },
  {
    "text": "wcf to msmq and grpc doesn't have any equivalent to that",
    "start": "1999519",
    "end": "2006640"
  },
  {
    "text": "because the grpc doesn't have a queuing technology built into its",
    "start": "2006640",
    "end": "2012240"
  },
  {
    "text": "operating system that it would really like to tie you into using",
    "start": "2012240",
    "end": "2018159"
  },
  {
    "text": "so let's look at some sample code let's look at a request response application um and",
    "start": "2018159",
    "end": "2026880"
  },
  {
    "text": "look at how we would convert this to wcf",
    "start": "2026880",
    "end": "2032159"
  },
  {
    "text": "so i'm going to make this a little bit bigger",
    "start": "2032159",
    "end": "2037760"
  },
  {
    "text": "so here we have a wcf service we've got our i hotel service contract",
    "start": "2037760",
    "end": "2044840"
  },
  {
    "text": "here and this has got four operation contracts",
    "start": "2044840",
    "end": "2051760"
  },
  {
    "text": "we've got get available rooms that returns a list of rooms and takes a check-in",
    "start": "2051760",
    "end": "2058960"
  },
  {
    "text": "date and a check out date which is date time offset we have a get room which returns",
    "start": "2058960",
    "end": "2068320"
  },
  {
    "text": "a single room we have a get rooms with the room numbers takes an array of numbers",
    "start": "2068320",
    "end": "2074720"
  },
  {
    "text": "and returns an array of rooms and we finally have an all rooms um operation",
    "start": "2074720",
    "end": "2082000"
  },
  {
    "text": "which returns an i innumerable of room which would therefore",
    "start": "2082000",
    "end": "2088878"
  },
  {
    "text": "stream those to the client if we called that correctly and we have our",
    "start": "2088879",
    "end": "2096280"
  },
  {
    "text": "hotel.data project here and we have our data contract which has got",
    "start": "2096280",
    "end": "2102800"
  },
  {
    "text": "room and we've got four properties we've got a decimal property here and we",
    "start": "2102800",
    "end": "2109280"
  },
  {
    "text": "have our data members within our code here and so it's it's very very",
    "start": "2109280",
    "end": "2116480"
  },
  {
    "text": "simple um and so we just need to figure out to convert this oh and then of course we",
    "start": "2116480",
    "end": "2122960"
  },
  {
    "text": "have our hotel service implementation which isn't decorated with any code",
    "start": "2122960",
    "end": "2129040"
  },
  {
    "text": "particularly it's just the implementation of that interface okay",
    "start": "2129040",
    "end": "2136240"
  },
  {
    "text": "so to convert this to migrate this project to grpc we need to create a",
    "start": "2136240",
    "end": "2144560"
  },
  {
    "text": "proto file that is the equivalent or contains the equivalent",
    "start": "2144560",
    "end": "2149920"
  },
  {
    "text": "of this service contract and contains the equivalent of this",
    "start": "2149920",
    "end": "2158480"
  },
  {
    "text": "data contract and then we need to migrate the implementation code across",
    "start": "2158480",
    "end": "2165839"
  },
  {
    "text": "to our net core application and hook all that up so actually",
    "start": "2165839",
    "end": "2173359"
  },
  {
    "text": "as long as our net for code isn't using anything that is uh not",
    "start": "2173359",
    "end": "2180000"
  },
  {
    "text": "entirely incompatible with net core we should be okay which is not",
    "start": "2180000",
    "end": "2187440"
  },
  {
    "text": "in this instance but",
    "start": "2187440",
    "end": "2190960"
  },
  {
    "text": "um we're not using things like operation context we're not using um",
    "start": "2194800",
    "end": "2200880"
  },
  {
    "text": "a lot of the sort of complicated in code features of wcf",
    "start": "2200880",
    "end": "2206560"
  },
  {
    "text": "we're not using any non-net core apis",
    "start": "2206560",
    "end": "2213040"
  },
  {
    "text": "we're not using entity framework five point something so so we should be okay to move this across",
    "start": "2213040",
    "end": "2220640"
  },
  {
    "text": "to dot net core",
    "start": "2220640",
    "end": "2224000"
  },
  {
    "text": "and here is the equivalent of that",
    "start": "2225760",
    "end": "2232640"
  },
  {
    "text": "application as an asp.net core project so this you can create a grpc",
    "start": "2233680",
    "end": "2240320"
  },
  {
    "text": "project in asp.net core either from visual studio's new projects thing or from the command line you can just",
    "start": "2240320",
    "end": "2246400"
  },
  {
    "text": "say dotnet new grpc and that will create you a project that",
    "start": "2246400",
    "end": "2253680"
  },
  {
    "text": "looks something like this so your program cs file looks",
    "start": "2253680",
    "end": "2258800"
  },
  {
    "text": "like a regular one your startup file here we have service.grpc",
    "start": "2258800",
    "end": "2266320"
  },
  {
    "text": "and we have our mac grpc service here just talking to services.hotel service and",
    "start": "2266800",
    "end": "2274560"
  },
  {
    "text": "we can just we can copy our ihotel service interface over that works exactly the",
    "start": "2274560",
    "end": "2280960"
  },
  {
    "text": "same we don't have the service contract type in.net call we don't have the",
    "start": "2280960",
    "end": "2286839"
  },
  {
    "text": "system.runtime dot service model assembly available",
    "start": "2286839",
    "end": "2294000"
  },
  {
    "text": "anymore so we'll just comment out our service contract",
    "start": "2294000",
    "end": "2299440"
  },
  {
    "text": "and operation contract attributes on there but our hotel",
    "start": "2299440",
    "end": "2306320"
  },
  {
    "text": "service we can literally just copy and paste this across um this is",
    "start": "2306320",
    "end": "2311920"
  },
  {
    "text": "fine nothing in there that doesn't work um and our hotel.data",
    "start": "2311920",
    "end": "2317359"
  },
  {
    "text": "again we can just copy our room class across this is still fine um and we'll just comment out our",
    "start": "2317359",
    "end": "2325119"
  },
  {
    "text": "data contract and data member attributes because those aren't going to work anymore",
    "start": "2325119",
    "end": "2330480"
  },
  {
    "text": "and then we just need to hook these in to our grpc application we're looking at",
    "start": "2330480",
    "end": "2338240"
  },
  {
    "text": "hotel service actually i mean we've got an interface and we've got an implementation of that interface so",
    "start": "2338240",
    "end": "2344560"
  },
  {
    "text": "we could just hook those up with dependency injection in the configure services method of our",
    "start": "2344560",
    "end": "2352000"
  },
  {
    "text": "startup class and so now we have our our old what used to be our wcf hotel service",
    "start": "2352000",
    "end": "2359200"
  },
  {
    "text": "um is is hooked up independency injection and i can just get that injected into my grpc service",
    "start": "2359200",
    "end": "2368560"
  },
  {
    "text": "okay so let's take a look at our proto that we need to create here",
    "start": "2368560",
    "end": "2374880"
  },
  {
    "text": "so here's my proto file that i have constructed",
    "start": "2374880",
    "end": "2383200"
  },
  {
    "text": "to replace my service contract interface but i have a get available",
    "start": "2383200",
    "end": "2389119"
  },
  {
    "text": "rooms takes a get available rooms request and returns a get available rooms response",
    "start": "2389119",
    "end": "2396000"
  },
  {
    "text": "um my get room takes a get room request you can see a sort of pattern emerging here and i'll talk about why",
    "start": "2396000",
    "end": "2402480"
  },
  {
    "text": "i use that pattern in a moment um the all rooms so this is the method that was returning an eye innumerable",
    "start": "2402480",
    "end": "2409200"
  },
  {
    "text": "that's going to return a stream of all rooms response",
    "start": "2409200",
    "end": "2414400"
  },
  {
    "text": "so that will then enable server streaming and allow the rooms to just be sent",
    "start": "2414400",
    "end": "2420160"
  },
  {
    "text": "over a stream one at a time",
    "start": "2420160",
    "end": "2425440"
  },
  {
    "text": "so each of these rpc methods declared here takes a single parameter and returns",
    "start": "2425440",
    "end": "2432720"
  },
  {
    "text": "a single type and that is a hard and fast rule rpc",
    "start": "2432720",
    "end": "2439440"
  },
  {
    "text": "methods in protobuf cannot take more than one parameter and so we always use a message object",
    "start": "2439440",
    "end": "2449280"
  },
  {
    "text": "a message for each parameter and a message for each response and the reason for this is",
    "start": "2449280",
    "end": "2456400"
  },
  {
    "text": "the same as the reason that microsoft have just added default interface implementations in c",
    "start": "2456400",
    "end": "2462880"
  },
  {
    "text": "sharp 8. if you change the number of parameters that a method takes then you've broken",
    "start": "2462880",
    "end": "2469839"
  },
  {
    "text": "um backward and forward compatibility with that method but if a method takes an object",
    "start": "2469839",
    "end": "2476720"
  },
  {
    "text": "and you change the shape of that object you haven't necessarily broken the contract of the method and so",
    "start": "2476720",
    "end": "2483680"
  },
  {
    "text": "your service will still work with older clients as long as you remember to check the",
    "start": "2483680",
    "end": "2489119"
  },
  {
    "text": "message that's been sent and see that the fields that you want are set",
    "start": "2489119",
    "end": "2494400"
  },
  {
    "text": "correctly or that you can work things out from that",
    "start": "2494400",
    "end": "2499760"
  },
  {
    "text": "so a get available rooms request is taking two parameters check-in date and",
    "start": "2499760",
    "end": "2505200"
  },
  {
    "text": "check-out date and funnily enough protobuf has no built-in date type",
    "start": "2505200",
    "end": "2512960"
  },
  {
    "text": "but because date is a compound type it actually made more sense to",
    "start": "2512960",
    "end": "2520800"
  },
  {
    "text": "implement it as a message type in itself and so google have a bunch of",
    "start": "2520800",
    "end": "2529200"
  },
  {
    "text": "standard dot proto files that are built into the compiler um and timestamp is one of those uh",
    "start": "2529200",
    "end": "2536880"
  },
  {
    "text": "the other one that i use a lot is date is uh duration which matches the",
    "start": "2536880",
    "end": "2544000"
  },
  {
    "text": "time span um but there are lots of others in there as well there are",
    "start": "2544000",
    "end": "2549440"
  },
  {
    "text": "we have sort of in 32 and string and so the",
    "start": "2549440",
    "end": "2557119"
  },
  {
    "text": "the built-in scalar types in grpc we have string we have bytes we have",
    "start": "2557119",
    "end": "2562880"
  },
  {
    "text": "boolean we have float and we have double and then we have 10 different types of integer",
    "start": "2562880",
    "end": "2569280"
  },
  {
    "text": "um so we've got n6 in 32 and in 64 and there are five types of each of",
    "start": "2569280",
    "end": "2575359"
  },
  {
    "text": "those and it's all to do with how the encoding is handled so",
    "start": "2575359",
    "end": "2580640"
  },
  {
    "text": "if you know your ins are going to be big numbers then it's more efficient to just use",
    "start": "2580640",
    "end": "2586400"
  },
  {
    "text": "four bytes every time so there's a fixed 32 that uses that if you know that your integer is likely",
    "start": "2586400",
    "end": "2592240"
  },
  {
    "text": "to have as many negative values as positive values then there is an s int um",
    "start": "2592240",
    "end": "2600000"
  },
  {
    "text": "which is more efficient for values that are on both sides of",
    "start": "2600000",
    "end": "2606640"
  },
  {
    "text": "zero um then there's int then there's uint which is for obviously values that are always higher than zero",
    "start": "2606640",
    "end": "2613920"
  },
  {
    "text": "so yes um lots to do with the ends and then everything else is in what they call the well-known types",
    "start": "2613920",
    "end": "2621839"
  },
  {
    "text": "and the other thing that's in there is there's a an int 32 value type inside",
    "start": "2622240",
    "end": "2629000"
  },
  {
    "text": "google.protobuf which and for all the built-in scalar types",
    "start": "2629000",
    "end": "2634160"
  },
  {
    "text": "there's a thing value type which in c-sharp comes out as nullable so if you want a",
    "start": "2634160",
    "end": "2640640"
  },
  {
    "text": "nullable hint here um you would use",
    "start": "2640640",
    "end": "2645119"
  },
  {
    "text": "int google.protobuff. value but that won't work at the moment because i haven't included the wrappers",
    "start": "2647200",
    "end": "2652640"
  },
  {
    "text": "proto okay and then in my services once i create",
    "start": "2652640",
    "end": "2660480"
  },
  {
    "text": "that i will get my um",
    "start": "2660480",
    "end": "2665359"
  },
  {
    "text": "my service base class being generated here and i can just inject my service",
    "start": "2665599",
    "end": "2671839"
  },
  {
    "text": "contract type into here to do my",
    "start": "2671839",
    "end": "2676880"
  },
  {
    "text": "coding to bring my old wcf code in and so let's take a look",
    "start": "2676880",
    "end": "2684400"
  },
  {
    "text": "at the implementation of one of these methods here let's take a look at the um get",
    "start": "2684400",
    "end": "2690960"
  },
  {
    "text": "available rooms response let's start by looking at get room because this is the simplest one",
    "start": "2690960",
    "end": "2697599"
  },
  {
    "text": "and i don't know why it's not at the top so get room every of every one of our grpc methods",
    "start": "2697599",
    "end": "2708079"
  },
  {
    "text": "the definition is created for us and so this is just a",
    "start": "2708079",
    "end": "2713440"
  },
  {
    "text": "simple request response and so it just takes an instance of the",
    "start": "2713440",
    "end": "2718560"
  },
  {
    "text": "request message and returns using task an instance of the response",
    "start": "2718560",
    "end": "2725520"
  },
  {
    "text": "message and every method also gets this server call context",
    "start": "2725520",
    "end": "2731599"
  },
  {
    "text": "so our class service base doesn't it's not like",
    "start": "2731599",
    "end": "2738720"
  },
  {
    "text": "the controller class it doesn't create a context or a user or any view methods or anything like",
    "start": "2738720",
    "end": "2745200"
  },
  {
    "text": "that so everything we need comes through on the context parameter and this",
    "start": "2745200",
    "end": "2751359"
  },
  {
    "text": "actually has no intellisense available at the moment",
    "start": "2751359",
    "end": "2757680"
  },
  {
    "text": "but in asp.net core grpc that context wraps around the http context and it has",
    "start": "2757680",
    "end": "2764079"
  },
  {
    "text": "a get http context method which will return the current http context and then you can get the",
    "start": "2764079",
    "end": "2769839"
  },
  {
    "text": "user if you've got um authentication enabled",
    "start": "2769839",
    "end": "2774960"
  },
  {
    "text": "um you can set headers you can read headers off the request you can write headers the response",
    "start": "2774960",
    "end": "2780720"
  },
  {
    "text": "um and you can do all this sort of stuff through the context here and so we",
    "start": "2780720",
    "end": "2786839"
  },
  {
    "text": "literally um we're just going to",
    "start": "2786839",
    "end": "2791920"
  },
  {
    "text": "uh call our service contract and say hey give me this room so this is giving us",
    "start": "2791920",
    "end": "2798720"
  },
  {
    "text": "the data contract version of room and then we can just return that",
    "start": "2798720",
    "end": "2804720"
  },
  {
    "text": "get room response and pass that across as the value",
    "start": "2804720",
    "end": "2810880"
  },
  {
    "text": "because in our protos folder here to make life easier",
    "start": "2810880",
    "end": "2818319"
  },
  {
    "text": "we created some extensions to the protobuf room message type",
    "start": "2818319",
    "end": "2826640"
  },
  {
    "text": "so protobuf the protobuf compiler declares all the classes that it generates as",
    "start": "2826640",
    "end": "2833119"
  },
  {
    "text": "partial and that means we can add whatever we want to them",
    "start": "2833119",
    "end": "2839280"
  },
  {
    "text": "we don't have to inherit from it we can just add new things to it and that means that one of the things we can add",
    "start": "2839280",
    "end": "2844480"
  },
  {
    "text": "is implicit operators and so we can create implicit operators that magically cast",
    "start": "2844480",
    "end": "2850640"
  },
  {
    "text": "our protobuf room message type to our old",
    "start": "2850640",
    "end": "2856000"
  },
  {
    "text": "what used to be our wcf data contract type and you can see here that we're saying",
    "start": "2856000",
    "end": "2861839"
  },
  {
    "text": "either way number is number and price we'll just convert that to a double",
    "start": "2861839",
    "end": "2867599"
  },
  {
    "text": "so grpc doesn't support decimals natively um and that's okay as long as you",
    "start": "2867599",
    "end": "2875440"
  },
  {
    "text": "only use the protobuf objects for passing data from one side",
    "start": "2875440",
    "end": "2881760"
  },
  {
    "text": "to the other you'll never lose any accuracy on a double by serializing it over protobuf",
    "start": "2881760",
    "end": "2890079"
  },
  {
    "text": "the only time you lose accuracy is if you then use the protobuf object itself to do maths for example if you try and",
    "start": "2890079",
    "end": "2898000"
  },
  {
    "text": "multiply 4.99 by 5.0 then",
    "start": "2898000",
    "end": "2904880"
  },
  {
    "text": "you will be told that the answer is",
    "start": "2904880",
    "end": "2909279"
  },
  {
    "text": "24.9888894 it is possible to do decimals you just",
    "start": "2910040",
    "end": "2916720"
  },
  {
    "text": "need to create your own decimal proto um with units and nanos and it's very straightforward",
    "start": "2916720",
    "end": "2922079"
  },
  {
    "text": "and i blogged about it on the visual recode website so we can now just pass this thing",
    "start": "2922079",
    "end": "2929200"
  },
  {
    "text": "around um we can pass our",
    "start": "2929200",
    "end": "2934640"
  },
  {
    "text": "room that we got from our service contract we can just pass it back over our get room response here you can",
    "start": "2934960",
    "end": "2941599"
  },
  {
    "text": "see that i get room response just as a room value is one now i could just",
    "start": "2941599",
    "end": "2947920"
  },
  {
    "text": "return room from this because that's all that's going at the moment",
    "start": "2947920",
    "end": "2954640"
  },
  {
    "text": "but a good idea um i i may even go so far to say",
    "start": "2954839",
    "end": "2960400"
  },
  {
    "text": "it's a best practice to return a specific response type",
    "start": "2960400",
    "end": "2966720"
  },
  {
    "text": "from each of your messages",
    "start": "2966720",
    "end": "2972559"
  },
  {
    "text": "just in case at some point you decide that what get room returns",
    "start": "2973760",
    "end": "2980240"
  },
  {
    "text": "in its room response that might have a lot more information",
    "start": "2980240",
    "end": "2985760"
  },
  {
    "text": "and you might decide so that might return sort of room details like um who's assigned to cleaning that",
    "start": "2985760",
    "end": "2992319"
  },
  {
    "text": "room and um who stayed in it last and all this sort of thing whereas get rooms which returns a list",
    "start": "2992319",
    "end": "2998960"
  },
  {
    "text": "of rooms might return less information and so rather than returning data",
    "start": "2998960",
    "end": "3004160"
  },
  {
    "text": "objects directly i prefer to return these response",
    "start": "3004160",
    "end": "3010240"
  },
  {
    "text": "messages which means i can change them so i just here is my response and the value on",
    "start": "3010839",
    "end": "3016480"
  },
  {
    "text": "that response is a room and if i wanted to add more things to that response i could do that quite easily",
    "start": "3016480",
    "end": "3023519"
  },
  {
    "text": "um so get available rooms is a little bit more complicated get",
    "start": "3023599",
    "end": "3030240"
  },
  {
    "text": "available rooms um",
    "start": "3030240",
    "end": "3034880"
  },
  {
    "text": "response here has a repeated room values so this is going to be my",
    "start": "3035839",
    "end": "3042000"
  },
  {
    "text": "list of rooms here so i create a new get available rooms response",
    "start": "3042000",
    "end": "3047280"
  },
  {
    "text": "and then i can't actually set this values property that's read only property",
    "start": "3047280",
    "end": "3052319"
  },
  {
    "text": "so i'm just going to add values to it from the service contract here",
    "start": "3052319",
    "end": "3060400"
  },
  {
    "text": "also remember the service contract the request message",
    "start": "3060400",
    "end": "3067119"
  },
  {
    "text": "has check-in date and check-out date and you can see here that check-in date so these have",
    "start": "3067119",
    "end": "3074720"
  },
  {
    "text": "underscores in their name and the reason they have underscores is because um the code gen for",
    "start": "3074720",
    "end": "3081359"
  },
  {
    "text": "all the different languages will turn that into whatever makes the most sense",
    "start": "3081359",
    "end": "3086400"
  },
  {
    "text": "for that particular language so the python code gen will just leave it as check-in date the java code gen will change it to",
    "start": "3086400",
    "end": "3094319"
  },
  {
    "text": "camelcase where the first character's lowercase and each word is uppercase the c-sharp",
    "start": "3094319",
    "end": "3100079"
  },
  {
    "text": "version as you can see here has converted it to pascal case where the first letter of each word is",
    "start": "3100079",
    "end": "3106000"
  },
  {
    "text": "uppercase and if you want to do that yes the code samples will be available on git",
    "start": "3106000",
    "end": "3113680"
  },
  {
    "text": "um and i will link those um in the chat room at the end of the",
    "start": "3113680",
    "end": "3120160"
  },
  {
    "text": "talk um so yes it's easier to do that case shifting if",
    "start": "3120160",
    "end": "3126720"
  },
  {
    "text": "you use the all lower case and underscore",
    "start": "3126720",
    "end": "3131280"
  },
  {
    "text": "form in the first place",
    "start": "3133280",
    "end": "3139040"
  },
  {
    "text": "okay so let's go and look at um",
    "start": "3139040",
    "end": "3146720"
  },
  {
    "text": "get the all rooms code here",
    "start": "3146720",
    "end": "3153119"
  },
  {
    "text": "so here's our get rooms where we have uh a request.numbers and we're just going to convert so this",
    "start": "3153119",
    "end": "3159680"
  },
  {
    "text": "is um in grpc this is a repeated field",
    "start": "3159680",
    "end": "3165040"
  },
  {
    "text": "type which is a generic type very similar to a list so we're going to say create an array",
    "start": "3165040",
    "end": "3172079"
  },
  {
    "text": "populate that array from the repeated field instance",
    "start": "3172079",
    "end": "3176720"
  },
  {
    "text": "which we can uh we can see here then pass that",
    "start": "3178839",
    "end": "3184400"
  },
  {
    "text": "across to our old service contract then create our response and get our values and add our response values",
    "start": "3184400",
    "end": "3191440"
  },
  {
    "text": "into there and then return that back and then we have all rooms and this in our wcf service was the one",
    "start": "3191440",
    "end": "3198400"
  },
  {
    "text": "that returned um and i enumerable",
    "start": "3198400",
    "end": "3204480"
  },
  {
    "text": "and so here we can see how a streaming service works we get our all rooms request and rather",
    "start": "3204480",
    "end": "3210800"
  },
  {
    "text": "than us returning a stream and having to worry about how do you create a stream and how do you set it up properly and all this sort of thing",
    "start": "3210800",
    "end": "3217440"
  },
  {
    "text": "um the grpc framework has already generated all the code to do that and so",
    "start": "3217440",
    "end": "3223760"
  },
  {
    "text": "it just passes the response stream in for us and so all we have to do",
    "start": "3223760",
    "end": "3229200"
  },
  {
    "text": "is write our responses to it one at a time and so this allows us to create",
    "start": "3229200",
    "end": "3235520"
  },
  {
    "text": "streaming services really incredibly easily",
    "start": "3235520",
    "end": "3240558"
  },
  {
    "text": "and you just drop into slack here",
    "start": "3243520",
    "end": "3250319"
  },
  {
    "text": "it's such a nice chat i wasn't even missing the presentation at all anything to do with certificates",
    "start": "3250319",
    "end": "3256079"
  },
  {
    "text": "anything to do with encoding in wcf configuration yes absolutely and now this runs over",
    "start": "3256079",
    "end": "3262720"
  },
  {
    "text": "http 2 um so certificates is just tls certificates attached to",
    "start": "3262720",
    "end": "3267839"
  },
  {
    "text": "http 2 kestrel and anything like that anything to do with encoding it's just",
    "start": "3267839",
    "end": "3272960"
  },
  {
    "text": "protobuf so you don't have to worry about that at all and wcf configuration again there is",
    "start": "3272960",
    "end": "3279599"
  },
  {
    "text": "it it's grpc it's not saying hey you can do this and you can do that and they work this way and that way",
    "start": "3279599",
    "end": "3286079"
  },
  {
    "text": "actually if you dig into it after a couple of years you'll find that you can configure the hell out of grpc and",
    "start": "3286079",
    "end": "3292480"
  },
  {
    "text": "protobuf but there's really no reason why you would so",
    "start": "3292480",
    "end": "3298559"
  },
  {
    "text": "um okay so that's request response that's really quite straightforward",
    "start": "3298559",
    "end": "3303680"
  },
  {
    "text": "um we also have server streaming which we saw from that last method there that was",
    "start": "3303680",
    "end": "3308960"
  },
  {
    "text": "just what used to be an eye innumerable and now we have an eye response stream when we write things asynchronously to",
    "start": "3308960",
    "end": "3315119"
  },
  {
    "text": "it um but there is also bidirectional streaming which is the equivalent of a full duplex",
    "start": "3315119",
    "end": "3323440"
  },
  {
    "text": "and also wcf supported session so you could say session mode",
    "start": "3323440",
    "end": "3330000"
  },
  {
    "text": "required and when the client started talking to the server",
    "start": "3330000",
    "end": "3336319"
  },
  {
    "text": "the server would create an instance of the service contract class and then that would actually be held",
    "start": "3336319",
    "end": "3343520"
  },
  {
    "text": "on the heap permanently and any local fields it had that that stored state would stay around and",
    "start": "3343520",
    "end": "3350960"
  },
  {
    "text": "all the communication from that client would go to that particular instance of that",
    "start": "3350960",
    "end": "3356079"
  },
  {
    "text": "class i mean you know no load balancing or anything like that",
    "start": "3356079",
    "end": "3361119"
  },
  {
    "text": "and we can achieve that using bidirectional streaming and so i'm going to",
    "start": "3361119",
    "end": "3367680"
  },
  {
    "text": "use for this the example of the calculator",
    "start": "3367680",
    "end": "3372720"
  },
  {
    "text": "that microsoft used in all their wcf samples so the calculator is a duplex",
    "start": "3372720",
    "end": "3380559"
  },
  {
    "text": "service and here is the equivalent protobuf file",
    "start": "3380559",
    "end": "3389200"
  },
  {
    "text": "so we have a calculator that takes a stream of calculator",
    "start": "3389280",
    "end": "3394880"
  },
  {
    "text": "actions and returns a stream of calculator callbacks the wcf service took an i calculated",
    "start": "3394880",
    "end": "3402799"
  },
  {
    "text": "callback interface which had a right value and an equation method",
    "start": "3402799",
    "end": "3408000"
  },
  {
    "text": "i think i my computer died i'm doing this off my",
    "start": "3408000",
    "end": "3414160"
  },
  {
    "text": "laptop and i don't seem to be able to find the original wcf implementation of this but it's not the important thing",
    "start": "3414160",
    "end": "3420319"
  },
  {
    "text": "so we have a clear action and an add to action and a subtract from action multiplied by we have a result callback and an",
    "start": "3420319",
    "end": "3426720"
  },
  {
    "text": "equation call back and we can use another feature of",
    "start": "3426720",
    "end": "3435680"
  },
  {
    "text": "um protobuf here so protobuf provides",
    "start": "3435680",
    "end": "3441359"
  },
  {
    "text": "something like a discriminated union you can use this one-off keyword on",
    "start": "3441359",
    "end": "3446799"
  },
  {
    "text": "a message to say here are fields one two three four five only one",
    "start": "3446799",
    "end": "3453040"
  },
  {
    "text": "of these can be set at a time and so if you set the clear field to something it will unset any of",
    "start": "3453040",
    "end": "3460640"
  },
  {
    "text": "the other fields that may have been set so we can guarantee that um this action",
    "start": "3460640",
    "end": "3465760"
  },
  {
    "text": "will only represent one of these things so like an enum or a discriminated union",
    "start": "3465760",
    "end": "3471359"
  },
  {
    "text": "in sharp or thing is there a tool to generate the protofile i love that question",
    "start": "3471359",
    "end": "3478240"
  },
  {
    "text": "i will be answering it at the end of the talk um",
    "start": "3478240",
    "end": "3484400"
  },
  {
    "text": "so our and which is very soon damn",
    "start": "3486880",
    "end": "3493280"
  },
  {
    "text": "um so yes uh our code for this",
    "start": "3493280",
    "end": "3498319"
  },
  {
    "text": "basically looks like this and so here we have",
    "start": "3498319",
    "end": "3505440"
  },
  {
    "text": "our run method and we just we've injected our old calculator",
    "start": "3505440",
    "end": "3511839"
  },
  {
    "text": "contract in here and we read all the messages off here and we",
    "start": "3511839",
    "end": "3518480"
  },
  {
    "text": "invoke messages on our old contract um based on the action so action was that",
    "start": "3518480",
    "end": "3525119"
  },
  {
    "text": "thing that's the one-off field and we can do a switch statement to see which one of them is set and",
    "start": "3525119",
    "end": "3530400"
  },
  {
    "text": "then we can call things back and so forth and there's all sorts of complicated plumbing code in here",
    "start": "3530400",
    "end": "3537280"
  },
  {
    "text": "that makes our old wcf callback and everything code work with our newer um grpc",
    "start": "3537280",
    "end": "3544799"
  },
  {
    "text": "code and all this code will go up onto github at the end of this thing at the end of",
    "start": "3544799",
    "end": "3551599"
  },
  {
    "text": "this talk which is in one minute and they get much more stressed about it security it supports asp net core",
    "start": "3551599",
    "end": "3558880"
  },
  {
    "text": "security asp net authentication and certificate security um and uh",
    "start": "3558880",
    "end": "3565920"
  },
  {
    "text": "you it don't won't do windows authentication so you need to use tokens um that you get from windows",
    "start": "3565920",
    "end": "3571760"
  },
  {
    "text": "authentication and pass them using asp.net authentication in production you can run this in docker",
    "start": "3571760",
    "end": "3578319"
  },
  {
    "text": "kubernetes and service use service meshes and everything else and i will point you to",
    "start": "3578319",
    "end": "3584000"
  },
  {
    "text": "some example code for that i wrote a whole book about this called grpc for wcf developers which is",
    "start": "3584000",
    "end": "3591119"
  },
  {
    "text": "on microsoft's architecture portal on their docs.microsoft.com um that was",
    "start": "3591119",
    "end": "3598799"
  },
  {
    "text": "written with my wife who can write and i can do grpc so between us we made a",
    "start": "3598799",
    "end": "3604400"
  },
  {
    "text": "book um and uh we were pretty pleased with how that turned out",
    "start": "3604400",
    "end": "3610319"
  },
  {
    "text": "and then as far as tools go i have been working very very hard on building visual recode which",
    "start": "3610319",
    "end": "3616640"
  },
  {
    "text": "will actually take your wcf application and generate an asp.net core grpc application",
    "start": "3616640",
    "end": "3623280"
  },
  {
    "text": "including duplex and session um and we've got version coming up we'll take",
    "start": "3623280",
    "end": "3628799"
  },
  {
    "text": "uh old wcf rest and convert that to an asp.net core mvc application we're building on that um it's very",
    "start": "3628799",
    "end": "3635760"
  },
  {
    "text": "reasonably priced um if you've got like more than one wcf service it's probably worth",
    "start": "3635760",
    "end": "3641520"
  },
  {
    "text": "taking a look at because it will save you just the hours of typing proto files and everything else it",
    "start": "3641520",
    "end": "3647839"
  },
  {
    "text": "doesn't do the whole thing it's not 100 guaranteed but it will save you time and yes",
    "start": "3647839",
    "end": "3654000"
  },
  {
    "text": "it isn't it isn't open source i charge money for it we support it um and we will help you",
    "start": "3654000",
    "end": "3660160"
  },
  {
    "text": "with your project and so i'm uh yeah it's it's a thing okay um i hope that was helpful i will",
    "start": "3660160",
    "end": "3667040"
  },
  {
    "text": "put more information into the slack channel now enjoy the rest of your day and thanks very much for listening",
    "start": "3667040",
    "end": "3673520"
  },
  {
    "text": "to me cheers bye",
    "start": "3673520",
    "end": "3677359"
  }
]