[
  {
    "text": "all right time to get started thanks for staying until the very end",
    "start": "4310",
    "end": "10160"
  },
  {
    "text": "this is my slide or sort of is it looks very much like a slide so what I want to",
    "start": "10160",
    "end": "17990"
  },
  {
    "text": "do in this hour and I guess that's why they put me in the last slot because they're expecting higher I'll overrun by",
    "start": "17990",
    "end": "24530"
  },
  {
    "text": "three hours is to write your own Excel 365 so what I want to do is to show you",
    "start": "24530",
    "end": "31880"
  },
  {
    "text": "a couple of nice things in F sharp that will lead us to implement something like",
    "start": "31880",
    "end": "38269"
  },
  {
    "text": "a very simple spreadsheet that runs in the web browser and I'll show you some nice I've sharp patterns and some nice F",
    "start": "38269",
    "end": "45859"
  },
  {
    "text": "sharp tools so here I'm in Visual Studio code and I do have lots of to do here to",
    "start": "45859",
    "end": "54469"
  },
  {
    "text": "start with and the first thing I need to do for my excel is to actually sort of",
    "start": "54469",
    "end": "59870"
  },
  {
    "text": "represent some state of a spreadsheet so if you have a spreadsheet what what",
    "start": "59870",
    "end": "67760"
  },
  {
    "text": "stage does it have so spreadsheet has some columns and I'll have my columns will be just ABC da da",
    "start": "67760",
    "end": "76430"
  },
  {
    "text": "da so I'll remember what columns I have in my spreadsheet I'll have some rows these will be numbers and on so I'm",
    "start": "76430",
    "end": "85909"
  },
  {
    "text": "using character and int as a position so I'll define type for this because it",
    "start": "85909",
    "end": "92149"
  },
  {
    "text": "will be easier so my position is something like a 5 so that's a character",
    "start": "92149",
    "end": "99439"
  },
  {
    "text": "and an int and then the other thing I will have in my state is what's the",
    "start": "99439",
    "end": "107179"
  },
  {
    "text": "active cell so if you click somewhere in a spreadsheet that's the active cell the one you get to edit you might not have",
    "start": "107179",
    "end": "114439"
  },
  {
    "text": "any so this will be optional so active cell is position option and then I'll",
    "start": "114439",
    "end": "121880"
  },
  {
    "text": "have the content of my spreadsheet and this will be a map from positions to",
    "start": "121880",
    "end": "129170"
  },
  {
    "text": "strings so yeah yeah I got typos here",
    "start": "129170",
    "end": "135519"
  },
  {
    "text": "I'll fix this and so my cells will be for some",
    "start": "135519",
    "end": "142970"
  },
  {
    "text": "positions in my spreadsheet I will have a string which is what you typed in there now when I start the spreadsheet",
    "start": "142970",
    "end": "150050"
  },
  {
    "text": "so this is one of those two three snippets that I don't want to type because they're boring so initially I",
    "start": "150050",
    "end": "157340"
  },
  {
    "text": "will start with rows from 1 to 15 and you could add more calls from a to K and",
    "start": "157340",
    "end": "164000"
  },
  {
    "text": "you could add more nothing active and no no entry so this is the setup for my",
    "start": "164000",
    "end": "170180"
  },
  {
    "text": "spreadsheet and what I want to do now is just actually start building it so here",
    "start": "170180",
    "end": "177800"
  },
  {
    "text": "I'm using and I'll say more about this I'm using the Elm style functional reactive architecture and this comes",
    "start": "177800",
    "end": "186500"
  },
  {
    "text": "with this function called app that starts the application you give it a def ID the initial state and then we need to",
    "start": "186500",
    "end": "194390"
  },
  {
    "text": "give it these two functions and I'll tell you more about what they actually do so you can ignore this for now and in",
    "start": "194390",
    "end": "204470"
  },
  {
    "text": "render will just say text hello and DC",
    "start": "204470",
    "end": "209950"
  },
  {
    "text": "and then update that's the one I will explain later I'll just say given a",
    "start": "209950",
    "end": "215630"
  },
  {
    "text": "state and an event return state so nothing this rendering bit this is",
    "start": "215630",
    "end": "221959"
  },
  {
    "text": "you're using a little DSL to build HTML and if I save it I have a process",
    "start": "221959",
    "end": "228410"
  },
  {
    "text": "running in the background that principles of stuff to the console and I have a browser running here where my",
    "start": "228410",
    "end": "236390"
  },
  {
    "text": "application will show now I'm using really nice really nice setup in Fable",
    "start": "236390",
    "end": "241970"
  },
  {
    "text": "where whenever I save things they will get automatically updated so that's what",
    "start": "241970",
    "end": "247010"
  },
  {
    "text": "I that's what I want to do all right is this a spreadsheet yet no we can't",
    "start": "247010",
    "end": "252650"
  },
  {
    "text": "sell it so we have to do more work so the first thing I need to do in the rendering is to actually render this the",
    "start": "252650",
    "end": "258620"
  },
  {
    "text": "the the spreadsheet properly so I'm going to create a table now the first",
    "start": "258620",
    "end": "263690"
  },
  {
    "text": "square brackets that's the CSS attributes or the sort of attributes on the tag the second is the contents so we",
    "start": "263690",
    "end": "271250"
  },
  {
    "text": "will have to with first throw and in the first row we",
    "start": "271250",
    "end": "276930"
  },
  {
    "text": "will generate one empty cell because that's the left upper corner and then",
    "start": "276930",
    "end": "283800"
  },
  {
    "text": "for every column in my columns I will generate heading where the text",
    "start": "283800",
    "end": "293339"
  },
  {
    "text": "inside is this column so I'm using two",
    "start": "293339",
    "end": "298499"
  },
  {
    "text": "things here one is that I have this state argument and that represents my current state of a spreadsheet and so I",
    "start": "298499",
    "end": "305189"
  },
  {
    "text": "can get stuff from it the other thing I'm using this yield keyword and absorb inside square brackets which is a really",
    "start": "305189",
    "end": "312180"
  },
  {
    "text": "nice way to work with lists because you can just generate lists kind of like",
    "start": "312180",
    "end": "317520"
  },
  {
    "text": "yield return in c-sharp and here it",
    "start": "317520",
    "end": "323189"
  },
  {
    "text": "works quite nicely for generating HTML as well based on some data so we've got",
    "start": "323189",
    "end": "329249"
  },
  {
    "text": "one row now we need even more rows so I'll iterate over all the rows and for",
    "start": "329249",
    "end": "336899"
  },
  {
    "text": "every row we will generate a row what will be in the row the first thing will",
    "start": "336899",
    "end": "343259"
  },
  {
    "text": "be the the text with the row number so",
    "start": "343259",
    "end": "348959"
  },
  {
    "text": "this is my row and then I'll have and now I'm getting tired I'll do copy/paste",
    "start": "348959",
    "end": "354979"
  },
  {
    "text": "for every column in the row we will need to render the cell now what do we need",
    "start": "354979",
    "end": "363089"
  },
  {
    "text": "to pass through the cell I'll explain what rigorous in a short while we need to tell it where we are so the position",
    "start": "363089",
    "end": "370709"
  },
  {
    "text": "is my column and my row and we'll also give it the state and I'll do more work",
    "start": "370709",
    "end": "378629"
  },
  {
    "text": "here in render cell so we get position and state and right now just to test",
    "start": "378629",
    "end": "386099"
  },
  {
    "text": "what what I've actually done we'll say text dot dot dot and render is done",
    "start": "386099",
    "end": "393269"
  },
  {
    "text": "render cell will need more work and let's see what we've got looks like a spreadsheet yay now you",
    "start": "393269",
    "end": "399419"
  },
  {
    "text": "can't edit it which is kind of kind of sad I also I think my spreadsheet is a bit",
    "start": "399419",
    "end": "404969"
  },
  {
    "text": "missile I so what did I mess up I forgot the yield keyword it was actually giving me a red",
    "start": "404969",
    "end": "412110"
  },
  {
    "text": "green squiggly to tell me I'm wrong but I was ignoring it so now we've got a",
    "start": "412110",
    "end": "417330"
  },
  {
    "text": "nice grid what do we need to do now so",
    "start": "417330",
    "end": "423770"
  },
  {
    "text": "now I want to show you my second slide - doo doo doo doo so my second slide is actually",
    "start": "423770",
    "end": "431220"
  },
  {
    "text": "explaining this Elm style so this is a really sort of nice nice programming",
    "start": "431220",
    "end": "436830"
  },
  {
    "text": "pattern where you compose user interfaces just by defining these things so you need to define type representing",
    "start": "436830",
    "end": "444720"
  },
  {
    "text": "your state and that's the state of my spreadsheet so I've done that already",
    "start": "444720",
    "end": "450169"
  },
  {
    "text": "then you need to define an event so this is basically what possible things can",
    "start": "450169",
    "end": "456330"
  },
  {
    "text": "happen in your spreadsheet it can be click to select a cell and it can be",
    "start": "456330",
    "end": "461460"
  },
  {
    "text": "entered to update the cell and then you define an initial state and a function",
    "start": "461460",
    "end": "467669"
  },
  {
    "text": "that ignore this units event bit function that takes the state and",
    "start": "467669",
    "end": "473490"
  },
  {
    "text": "produces HTML so you have a state you can render spreadsheet we've just wrote that part and you need to write an",
    "start": "473490",
    "end": "480090"
  },
  {
    "text": "update function that given an state and an event produces a new state so if",
    "start": "480090",
    "end": "486090"
  },
  {
    "text": "something happens you will calculate a new state and then it will automatically call render to re-render the page and",
    "start": "486090",
    "end": "494000"
  },
  {
    "text": "the reason why this works and why it's not stupid is that the update of the",
    "start": "494000",
    "end": "499260"
  },
  {
    "text": "page actually uses different algorithm to figure out what's the minimal changes that actually need to happen in the",
    "start": "499260",
    "end": "505590"
  },
  {
    "text": "browser and that it only does those so it doesn't replace the whole page that's",
    "start": "505590",
    "end": "511620"
  },
  {
    "text": "a really clever trick and we can now use it to add a bit of interactivity to my",
    "start": "511620",
    "end": "519030"
  },
  {
    "text": "spreadsheet and I'm going to move my cheat sheet up here so that I don't get",
    "start": "519030",
    "end": "525300"
  },
  {
    "text": "lost so the first thing I need to do is to define the event so I have my state",
    "start": "525300",
    "end": "535830"
  },
  {
    "text": "what can be my event what can happen so I want two things I won't start at it",
    "start": "535830",
    "end": "545540"
  },
  {
    "text": "so this is when you click on a cell and you want to edit that cell and this will",
    "start": "545540",
    "end": "553920"
  },
  {
    "text": "carry a position so we know what we want to edit and when we click on it we",
    "start": "553920",
    "end": "558930"
  },
  {
    "text": "change the state so that this is the selected cell and we want update value",
    "start": "558930",
    "end": "565050"
  },
  {
    "text": "which happens whenever you do some typing in the in the selected cell so",
    "start": "565050",
    "end": "570600"
  },
  {
    "text": "that we will have position and the new value and we want to update update our",
    "start": "570600",
    "end": "575940"
  },
  {
    "text": "state to reflect this and now we need to go back to rendering and do something",
    "start": "575940",
    "end": "582270"
  },
  {
    "text": "clever here so I'll have whenever I have cell I need to have two different cases one is when there is an editor then I'll",
    "start": "582270",
    "end": "589620"
  },
  {
    "text": "create an input and the other when there is just the value and then I will evaluate the value and render it so I do",
    "start": "589620",
    "end": "598680"
  },
  {
    "text": "have a basic template here because I'm too lazy to write this so render editor",
    "start": "598680",
    "end": "604320"
  },
  {
    "text": "creates a TD element with an input with some stuff it's just an input element",
    "start": "604320",
    "end": "611280"
  },
  {
    "text": "and render view just does this TD with a value and in render cell I need to make",
    "start": "611280",
    "end": "618660"
  },
  {
    "text": "a decision so if the what did I call it",
    "start": "618660",
    "end": "624180"
  },
  {
    "text": "active active if the active cell is the current position then what I'm going to",
    "start": "624180",
    "end": "631260"
  },
  {
    "text": "do is call a render editor and what does render editor take it takes trigger",
    "start": "631260",
    "end": "637770"
  },
  {
    "text": "function takes the position and takes the state now it takes a value and value",
    "start": "637770",
    "end": "644340"
  },
  {
    "text": "I don't have yet so I'll need to do that otherwise we will call render view with",
    "start": "644340",
    "end": "652110"
  },
  {
    "text": "all those things now we don't have a value so we need to get a value to get",
    "start": "652110",
    "end": "659070"
  },
  {
    "text": "the value I will look at my state because my state has this map or",
    "start": "659070",
    "end": "665130"
  },
  {
    "text": "dictionary of its cells and here I can do math dot try find give",
    "start": "665130",
    "end": "673139"
  },
  {
    "text": "to look up key and and the map and it will try to find the cell now this can be optional so what I'm going to do is",
    "start": "673139",
    "end": "680670"
  },
  {
    "text": "just say default value and if it doesn't exist we won't we will use an empty",
    "start": "680670",
    "end": "686790"
  },
  {
    "text": "string it needs to be default art I got the name wrong",
    "start": "686790",
    "end": "693499"
  },
  {
    "text": "so I'm calling a built-in function that will replace nuns with with empty string",
    "start": "693499",
    "end": "700410"
  },
  {
    "text": "so if I render my page now well that's a bit less impressive all my dots are gone",
    "start": "700410",
    "end": "707730"
  },
  {
    "text": "but I haven't done the clicking yet so how do we do the clicking when we render a view in the attributes we can say",
    "start": "707730",
    "end": "715410"
  },
  {
    "text": "things like what I've done here above with the ID arrow cell add that just",
    "start": "715410",
    "end": "722579"
  },
  {
    "text": "says assign this value to this attribute but I can also do on click and here I",
    "start": "722579",
    "end": "731459"
  },
  {
    "text": "define this this nasty operator which says assign an event handler to this to",
    "start": "731459",
    "end": "740610"
  },
  {
    "text": "this event and an event handler is a function that will takes the element",
    "start": "740610",
    "end": "745949"
  },
  {
    "text": "that this happened on we can ignore that and now the clever thing is that we can",
    "start": "745949",
    "end": "754589"
  },
  {
    "text": "say when the old click event happens trigger the start edit event and this",
    "start": "754589",
    "end": "762839"
  },
  {
    "text": "tells my Elm style run time that something has happened it needs to call",
    "start": "762839",
    "end": "768209"
  },
  {
    "text": "the update function response to this event and re-render the page so I just",
    "start": "768209",
    "end": "774839"
  },
  {
    "text": "need to say trigger this and it will all audible all happen the only other thing",
    "start": "774839",
    "end": "781649"
  },
  {
    "text": "I need to do is to go at to the end to my update function and say this is a",
    "start": "781649",
    "end": "786929"
  },
  {
    "text": "function that does pattern matching and if the command is start at it at this",
    "start": "786929",
    "end": "794249"
  },
  {
    "text": "position then we return a new state where we replace the active cell with",
    "start": "794249",
    "end": "800970"
  },
  {
    "text": "some position now I get a green warning here because I'm not handling",
    "start": "800970",
    "end": "806880"
  },
  {
    "text": "the update value that's one of the nice things in EPS our pattern matching I'll fix that later",
    "start": "806880",
    "end": "812610"
  },
  {
    "text": "and let's see if I can click around and add it cells so I can click around type",
    "start": "812610",
    "end": "818160"
  },
  {
    "text": "something in here it never gets stored because I haven't implemented that part yet but at least I",
    "start": "818160",
    "end": "824940"
  },
  {
    "text": "can click around and type numbers so that's a good start and to do the other part so this is",
    "start": "824940",
    "end": "834240"
  },
  {
    "text": "again one snippet that I'm just going to copy because it's a bit longer I need to",
    "start": "834240",
    "end": "841860"
  },
  {
    "text": "go to my input in my editor and add this",
    "start": "841860",
    "end": "847500"
  },
  {
    "text": "command which says own input trigger an",
    "start": "847500",
    "end": "853759"
  },
  {
    "text": "update value event with this position and what I'm doing here is that I'm",
    "start": "853759",
    "end": "861750"
  },
  {
    "text": "dynamically accessing the value of the input that the person is typing in so",
    "start": "861750",
    "end": "871230"
  },
  {
    "text": "the D parameter of this function that's going to be the HTML input element and I",
    "start": "871230",
    "end": "877620"
  },
  {
    "text": "can do not turn or it's some it's some sort of event event object from",
    "start": "877620",
    "end": "882779"
  },
  {
    "text": "JavaScript so it's JavaScript that's why it's so ugly I just do dot target dot",
    "start": "882779",
    "end": "888870"
  },
  {
    "text": "value to get the value and I have a value and I can trigger my nice update",
    "start": "888870",
    "end": "894089"
  },
  {
    "text": "value event and now I need to go back to my update function and actually",
    "start": "894089",
    "end": "899910"
  },
  {
    "text": "implement this so if I get update value for a position here's my new value then",
    "start": "899910",
    "end": "907259"
  },
  {
    "text": "what do I need to do well I need to calculate new cells so state dot cells",
    "start": "907259",
    "end": "912959"
  },
  {
    "text": "is my map with the with the value assignments and I can do map dot add to",
    "start": "912959",
    "end": "920339"
  },
  {
    "text": "say at this position at this value and this is a new map with with representing",
    "start": "920339",
    "end": "928439"
  },
  {
    "text": "the new updated cells and will return a",
    "start": "928439",
    "end": "933750"
  },
  {
    "text": "new state with new cells now the nice thing here that this is this is all",
    "start": "933750",
    "end": "938970"
  },
  {
    "text": "purely functional generating a new state so if I had any",
    "start": "938970",
    "end": "944400"
  },
  {
    "text": "other reference to the state doing some other work in the background I wouldn't just override the state now so let's see",
    "start": "944400",
    "end": "952410"
  },
  {
    "text": "what happens if I save this I saved it I can type 1 T 3 here 4 5 6 7 8 9 10 and",
    "start": "952410",
    "end": "962580"
  },
  {
    "text": "then go back change it I can type equals",
    "start": "962580",
    "end": "967680"
  },
  {
    "text": "1 plus 4 and nothing happens so we've got a spreadsheet where you can edit a",
    "start": "967680",
    "end": "973830"
  },
  {
    "text": "table now this took me 16 minutes exactly so that's a good start we have",
    "start": "973830",
    "end": "979500"
  },
  {
    "text": "some user interface now we actually need to do spreadsheet that does something you can sell so let's let's improve my",
    "start": "979500",
    "end": "987810"
  },
  {
    "text": "spreadsheet so the next thing we need to do in my spreadsheet is use is to do",
    "start": "987810",
    "end": "995160"
  },
  {
    "text": "some parsing when you type a formula and we actually need to parse the formula",
    "start": "995160",
    "end": "1001070"
  },
  {
    "text": "and then evaluate it and to do this I'm going to use a very very minimal parser",
    "start": "1001070",
    "end": "1007970"
  },
  {
    "text": "Combinator library all the code will be will be somewhere on github after the taco I'll tweet a link you can have a",
    "start": "1007970",
    "end": "1014630"
  },
  {
    "text": "look at it so this is a site from the elvish style this is the only thing that",
    "start": "1014630",
    "end": "1019910"
  },
  {
    "text": "I'm not going to implement from scratch during the talk that was maybe we should",
    "start": "1019910",
    "end": "1025699"
  },
  {
    "text": "have done this with Scott blushing where he would write the parser Combinator in an hour and I would do this the nice",
    "start": "1025700",
    "end": "1032329"
  },
  {
    "text": "thing here is that you just have a type called parser and then you can compose these parsers now a parser is something",
    "start": "1032330",
    "end": "1039290"
  },
  {
    "text": "that takes a list of characters and it can fail and produce none or it can",
    "start": "1039290",
    "end": "1045230"
  },
  {
    "text": "succeed and produce some containing a pair with the parsed value and the rest",
    "start": "1045230",
    "end": "1051140"
  },
  {
    "text": "of the characters that it didn't need so if you run a parser it might tell you",
    "start": "1051140",
    "end": "1056600"
  },
  {
    "text": "if you have a string 1 2 3 + 4 it can tell you I parse the number here's 1 2 3",
    "start": "1056600",
    "end": "1063110"
  },
  {
    "text": "it's an end and the rest is +4 parse that next and then there's a bunch of",
    "start": "1063110",
    "end": "1069020"
  },
  {
    "text": "combinators for working with parsers the the or one says try the first part",
    "start": "1069020",
    "end": "1074759"
  },
  {
    "text": "sir if it doesn't work try the second one and return whichever succeeded and",
    "start": "1074759",
    "end": "1080119"
  },
  {
    "text": "the star says parts the first thing then parts the second thing and give me both",
    "start": "1080119",
    "end": "1086179"
  },
  {
    "text": "so these are my parser combinators and now I need to define what the what the",
    "start": "1086179",
    "end": "1098190"
  },
  {
    "text": "formulas look like and actually implement those so I'm going to put that put my hints here and I need to define",
    "start": "1098190",
    "end": "1109379"
  },
  {
    "text": "what is an expression so this will go to my domain model and my expression so you",
    "start": "1109379",
    "end": "1116009"
  },
  {
    "text": "can type a number which is just an int she say 42 or you can define a binary",
    "start": "1116009",
    "end": "1122549"
  },
  {
    "text": "operation which has an expression and",
    "start": "1122549",
    "end": "1128940"
  },
  {
    "text": "operator and another expression so this is really nice way of expressing what",
    "start": "1128940",
    "end": "1134069"
  },
  {
    "text": "what what an equation is and what will add more stuff to this later and now I",
    "start": "1134069",
    "end": "1141479"
  },
  {
    "text": "need to write some parsers so what is an operator an operator can be one of those",
    "start": "1141479",
    "end": "1151940"
  },
  {
    "text": "well-known characters so I'll I'll do some nice copy and pasting here it can",
    "start": "1151940",
    "end": "1159719"
  },
  {
    "text": "be x plus there's more - and divide so",
    "start": "1159719",
    "end": "1167429"
  },
  {
    "text": "this just says recognize any of these special characters now number so my parser Combinator",
    "start": "1167429",
    "end": "1175949"
  },
  {
    "text": "library has a has conveniently a parser for integers which says parser of int so",
    "start": "1175949",
    "end": "1183359"
  },
  {
    "text": "it will recognize and end the other thing that my parser Combinator library has is that it comes with this map",
    "start": "1183359",
    "end": "1190559"
  },
  {
    "text": "function where I can say given and power",
    "start": "1190559",
    "end": "1197789"
  },
  {
    "text": "a parser so so let's see if I do string of n then what this means is it says",
    "start": "1197789",
    "end": "1203629"
  },
  {
    "text": "given a parser that recognizes integers whatever they parse",
    "start": "1203629",
    "end": "1209090"
  },
  {
    "text": "transform it using this function so here I just converted the string and I get a",
    "start": "1209090",
    "end": "1215340"
  },
  {
    "text": "parser that will recognize strings now what I want is a parser that will recognize my expressions so I can say",
    "start": "1215340",
    "end": "1223470"
  },
  {
    "text": "number and and now I've got a parser that will recognize an expression which",
    "start": "1223470",
    "end": "1229230"
  },
  {
    "text": "happens to be an integer now I can use nice features of F sharp and just say",
    "start": "1229230",
    "end": "1238380"
  },
  {
    "text": "this is an integer math number so I can parse numbers that's a good start now I",
    "start": "1238380",
    "end": "1245160"
  },
  {
    "text": "need to parse binary things so a binary thing let's starts up with something",
    "start": "1245160",
    "end": "1250650"
  },
  {
    "text": "simple it's going to be a number followed by an operator followed by",
    "start": "1250650",
    "end": "1256530"
  },
  {
    "text": "another number this doesn't do nest it things that's alright we'll add that",
    "start": "1256530",
    "end": "1262530"
  },
  {
    "text": "later and now we have a parser that recognizes a pair with a pair of",
    "start": "1262530",
    "end": "1268650"
  },
  {
    "text": "expression and character and another expression so this is three things",
    "start": "1268650",
    "end": "1274320"
  },
  {
    "text": "they're bracketed as pair of pairs because the operator just gets sort of",
    "start": "1274320",
    "end": "1280500"
  },
  {
    "text": "associated to the left so but we have we have all the three things we need and we",
    "start": "1280500",
    "end": "1286860"
  },
  {
    "text": "can turn them into a binary operation using map where I get the left thing and",
    "start": "1286860",
    "end": "1294120"
  },
  {
    "text": "the operator and then the right thing and I'll say binary left op right all",
    "start": "1294120",
    "end": "1300960"
  },
  {
    "text": "right so this is this is probably",
    "start": "1300960",
    "end": "1306270"
  },
  {
    "text": "something forgotten that's what did I do",
    "start": "1306270",
    "end": "1311900"
  },
  {
    "text": "binary no this is right let's see if I",
    "start": "1312559",
    "end": "1319530"
  },
  {
    "text": "save it then it magically works all right the demo gods are with me so far that's",
    "start": "1319530",
    "end": "1325950"
  },
  {
    "text": "nice so now I'll have an expression so an expression can be a binary thing or a",
    "start": "1325950",
    "end": "1333260"
  },
  {
    "text": "number and let's see if this works so I've written too much code without",
    "start": "1333260",
    "end": "1339450"
  },
  {
    "text": "running it so I'm feeling kind of nervous so what I want to do now is to go to my view and go to my render cell and",
    "start": "1339450",
    "end": "1350359"
  },
  {
    "text": "whenever I'm rendering that the the view with the value I actually wanted to try",
    "start": "1350359",
    "end": "1356959"
  },
  {
    "text": "evaluating it or try parsing it so what I'm going to do is say well if I don't",
    "start": "1356959",
    "end": "1362969"
  },
  {
    "text": "have a value if there is none no value then I'm just going to say return render",
    "start": "1362969",
    "end": "1371789"
  },
  {
    "text": "empty string if there is some value then let's try parsing it so let's say expert",
    "start": "1371789",
    "end": "1379289"
  },
  {
    "text": "and the parser a library comes with this run function which will run so I'll say",
    "start": "1379289",
    "end": "1386849"
  },
  {
    "text": "parsed run the parser so run takes a",
    "start": "1386849",
    "end": "1392849"
  },
  {
    "text": "parser a sequence of characters and returns a option because the parser",
    "start": "1392849",
    "end": "1399029"
  },
  {
    "text": "might fail so parse is my parse expression or none so what I'm going to",
    "start": "1399029",
    "end": "1404759"
  },
  {
    "text": "do you just to see what happened it's just convert this whole thing to string and say string parsed which is",
    "start": "1404759",
    "end": "1412589"
  },
  {
    "text": "not the real thing yet but a good start you see what's what's going on so now if",
    "start": "1412589",
    "end": "1418529"
  },
  {
    "text": "I say 5 then I get number 5 so it actually sort of formats the FS or data",
    "start": "1418529",
    "end": "1424379"
  },
  {
    "text": "type as something that looks like absorb if I say 5 plus 4 that's not 4 this is 4",
    "start": "1424379",
    "end": "1433939"
  },
  {
    "text": "then I get binary of number 5 plus number 4 so this is this is all I",
    "start": "1433939",
    "end": "1440189"
  },
  {
    "text": "implemented so far and it seems to be working if I type I'd although ABC then",
    "start": "1440189",
    "end": "1448649"
  },
  {
    "text": "it says null that's just because I like to prove the C sharp people wrong and",
    "start": "1448649",
    "end": "1453809"
  },
  {
    "text": "Matz was saying in the morning that F sharp has all this null thing sorted you",
    "start": "1453809",
    "end": "1458939"
  },
  {
    "text": "can get now if you try hard here I'm getting null because that's how fable",
    "start": "1458939",
    "end": "1464369"
  },
  {
    "text": "actually at runtime represents non-event the none value so it's sort of hidden",
    "start": "1464369",
    "end": "1469799"
  },
  {
    "text": "from the F sharp code but Italy still leaks through the JavaScript which actually is",
    "start": "1469799",
    "end": "1475680"
  },
  {
    "text": "of nice because it means when you get an object from JavaScript you can just pattern match it and say none some and",
    "start": "1475680",
    "end": "1483090"
  },
  {
    "text": "handle it so this means the parser has failed so now we've got a parser that",
    "start": "1483090",
    "end": "1490140"
  },
  {
    "text": "sort of works and we want to do some",
    "start": "1490140",
    "end": "1496410"
  },
  {
    "text": "more things so the nice thing that I think is sort of really really elegant",
    "start": "1496410",
    "end": "1503190"
  },
  {
    "text": "here with this example is using the observed discriminated type",
    "start": "1503190",
    "end": "1508310"
  },
  {
    "text": "discriminated union type to represent your expressions so an expression can be",
    "start": "1508310",
    "end": "1514890"
  },
  {
    "text": "a number or a binary expression we will add reference as well when you say like",
    "start": "1514890",
    "end": "1520620"
  },
  {
    "text": "a 1 plus 4 and this is a recursive type",
    "start": "1520620",
    "end": "1525810"
  },
  {
    "text": "because the binary itself contains more expressions so you can say sort of if",
    "start": "1525810",
    "end": "1531090"
  },
  {
    "text": "you say 1 plus 4 times 7 then that's going to be binary of number and another",
    "start": "1531090",
    "end": "1538320"
  },
  {
    "text": "binary and they're not only sort of nice readable thing but they're also very",
    "start": "1538320",
    "end": "1544410"
  },
  {
    "text": "easy to process because we can just write a function that will pattern match on this and handle all the cases and do",
    "start": "1544410",
    "end": "1553440"
  },
  {
    "text": "whatever you need to do to evaluate so I want to write the evaluator now and for",
    "start": "1553440",
    "end": "1562200"
  },
  {
    "text": "that I need to copy my next chunk of cheats so I want to add a recursive",
    "start": "1562200",
    "end": "1569970"
  },
  {
    "text": "evaluator I'm going to put it somewhere here just after my parser so to write an",
    "start": "1569970",
    "end": "1579570"
  },
  {
    "text": "evaluator I'm going to define a function called evaluate that takes an expression",
    "start": "1579570",
    "end": "1585540"
  },
  {
    "text": "and pattern matches on it which I'm writing using this function function",
    "start": "1585540",
    "end": "1590940"
  },
  {
    "text": "construct which is just like take an argument pattern match on it and when",
    "start": "1590940",
    "end": "1596670"
  },
  {
    "text": "it's a number n then my result will be the number so this was really hard when",
    "start": "1596670",
    "end": "1605610"
  },
  {
    "text": "it's binary we get operator and right and this is where we",
    "start": "1605610",
    "end": "1611250"
  },
  {
    "text": "need to do a bit more work so the thing on the left and right they're both expressions themselves so",
    "start": "1611250",
    "end": "1619019"
  },
  {
    "text": "we will need to evaluate those expressions and to make that possible I",
    "start": "1619019",
    "end": "1624059"
  },
  {
    "text": "need to mark this function as recursive and then I can say left evaluated is",
    "start": "1624059",
    "end": "1630980"
  },
  {
    "text": "evaluate L let right evaluate it is evaluate R so now I've evaluated left",
    "start": "1630980",
    "end": "1639690"
  },
  {
    "text": "and right and now I need to do the operator now to do that I'm going to use",
    "start": "1639690",
    "end": "1647159"
  },
  {
    "text": "a bit from the cheat sheet so what I'm doing here is just defining a mapping a",
    "start": "1647159",
    "end": "1654570"
  },
  {
    "text": "dictionary where you can look up using the operator character and it will give you the actual F sharp function or the F",
    "start": "1654570",
    "end": "1661950"
  },
  {
    "text": "sharp operator to do the plus minus times and so on so then I can say",
    "start": "1661950",
    "end": "1667440"
  },
  {
    "text": "operators dot lookup index using the operator and this is a function that",
    "start": "1667440",
    "end": "1674580"
  },
  {
    "text": "takes two integers and I think I'm missing a here oh I can't spell at all",
    "start": "1674580",
    "end": "1682379"
  },
  {
    "text": "that's right so fortunately I'm in a type typed language so I don't have to",
    "start": "1682379",
    "end": "1688500"
  },
  {
    "text": "learn how to spell so now the binary also evaluates and we need to actually",
    "start": "1688500",
    "end": "1697889"
  },
  {
    "text": "call evaluate here when I parse things",
    "start": "1697889",
    "end": "1703110"
  },
  {
    "text": "so once I parse things now this is this is still an option we'll fix error",
    "start": "1703110",
    "end": "1710909"
  },
  {
    "text": "handling later on so now I'm going to be very nasty and just say dot value which",
    "start": "1710909",
    "end": "1716159"
  },
  {
    "text": "will throw an exception if the value isn't there don't do this well do it do",
    "start": "1716159",
    "end": "1722460"
  },
  {
    "text": "it but then remove it so now I can say evaluate this and this is my result and",
    "start": "1722460",
    "end": "1729289"
  },
  {
    "text": "I still can't spell and my result is an",
    "start": "1729289",
    "end": "1735389"
  },
  {
    "text": "int so converted to string and display it now if it reloads and if I don't make",
    "start": "1735389",
    "end": "1742559"
  },
  {
    "text": "any any spelling mistakes while typing my equations I should be able to say 1",
    "start": "1742559",
    "end": "1747570"
  },
  {
    "text": "plus 2 or 4 times 728 all looking good",
    "start": "1747570",
    "end": "1755190"
  },
  {
    "text": "or even just 42 that should still work as well so now I can evaluate really",
    "start": "1755190",
    "end": "1761160"
  },
  {
    "text": "basic equations and there's two things I want to do next one thing I want to do",
    "start": "1761160",
    "end": "1769440"
  },
  {
    "text": "is to actually fix my parser to do nested nested things too so to do that",
    "start": "1769440",
    "end": "1775200"
  },
  {
    "text": "I'm not going to type all of it I'll just paste it in and give you a sketch",
    "start": "1775200",
    "end": "1780750"
  },
  {
    "text": "of or explain what it what it means so the one",
    "start": "1780750",
    "end": "1786690"
  },
  {
    "text": "tricky thing here is that now an expression can actually be inside an",
    "start": "1786690",
    "end": "1792240"
  },
  {
    "text": "expression and I'll add some new lines",
    "start": "1792240",
    "end": "1804870"
  },
  {
    "text": "so that you can see the whole thing so here I'm defining an expression but I'm",
    "start": "1804870",
    "end": "1809910"
  },
  {
    "text": "not saying what it is yet so I'm saying well I'll have some expression but I'll I'll define what it means in a second",
    "start": "1809910",
    "end": "1817470"
  },
  {
    "text": "then I say a bracketed thing is an expression with some spaces and some",
    "start": "1817470",
    "end": "1823890"
  },
  {
    "text": "brackets around a term which is a sort of closed expression as a number or a",
    "start": "1823890",
    "end": "1831150"
  },
  {
    "text": "bracketed expression a binary is a term",
    "start": "1831150",
    "end": "1836820"
  },
  {
    "text": "followed by space followed by operator followed by some more space and followed",
    "start": "1836820",
    "end": "1845700"
  },
  {
    "text": "by one more term and we wrap it in the binary so this is the same thing I was",
    "start": "1845700",
    "end": "1850980"
  },
  {
    "text": "doing before but now with terms and spaces and then I say an expression is",
    "start": "1850980",
    "end": "1856650"
  },
  {
    "text": "now a binary or a term and then I say this is actually expression and I also",
    "start": "1856650",
    "end": "1864390"
  },
  {
    "text": "add a formula which is equals expression and an equation you can put in",
    "start": "1864390",
    "end": "1870360"
  },
  {
    "text": "spreadsheet which is space formula our number and space so the whole",
    "start": "1870360",
    "end": "1876600"
  },
  {
    "text": "business with expressions I'm doing that before because I'm defining an",
    "start": "1876600",
    "end": "1881610"
  },
  {
    "text": "expression as binary or term term could be bracketed and bracketed contains an",
    "start": "1881610",
    "end": "1890280"
  },
  {
    "text": "expression so I need expression to define what is an expression and for",
    "start": "1890280",
    "end": "1897150"
  },
  {
    "text": "that you need to do some recursive recursive tricks so I've defined",
    "start": "1897150",
    "end": "1902660"
  },
  {
    "text": "recursive expressions and now I'm going to change my evaluation my play parser",
    "start": "1902660",
    "end": "1911400"
  },
  {
    "text": "here to actually use that I call it equation or did I call it formula",
    "start": "1911400",
    "end": "1918679"
  },
  {
    "text": "equation is the one with which could be either formula with equals or just a",
    "start": "1919250",
    "end": "1924990"
  },
  {
    "text": "number so this is an equation and if I",
    "start": "1924990",
    "end": "1931320"
  },
  {
    "text": "save it and look at what I've got then now I can just put in numbers like I was",
    "start": "1931320",
    "end": "1937200"
  },
  {
    "text": "doing before so I can have some numbers and then I can say equals five times",
    "start": "1937200",
    "end": "1944900"
  },
  {
    "text": "seven plus two which is 45 does that",
    "start": "1944900",
    "end": "1950820"
  },
  {
    "text": "sound right probably yeah mathematics is difficult yeah I think this is right",
    "start": "1950820",
    "end": "1957120"
  },
  {
    "text": "so this seems to be working we can evaluate equations we're still missing the most important thing which is to be",
    "start": "1957120",
    "end": "1963900"
  },
  {
    "text": "able to say something like a one plus four if I do it it just crashes I get",
    "start": "1963900",
    "end": "1970410"
  },
  {
    "text": "some JavaScript error here so we need to fix this and to do this I need to add a",
    "start": "1970410",
    "end": "1978990"
  },
  {
    "text": "new thing to my expression and that will be a reference so if I go back to my",
    "start": "1978990",
    "end": "1986760"
  },
  {
    "text": "domain model then I can say an expression can be a number or binary or",
    "start": "1986760",
    "end": "1993180"
  },
  {
    "text": "a reference of position and",
    "start": "1993180",
    "end": "2001000"
  },
  {
    "text": "if my if my editor was a bit bigger you could see on the right panel it tells me",
    "start": "2002290",
    "end": "2007450"
  },
  {
    "text": "where am I missing some case there's this little green dot that's telling me",
    "start": "2007450",
    "end": "2012930"
  },
  {
    "text": "you added with reference to your expression but you haven't implemented the handling of references yet so we'll",
    "start": "2012930",
    "end": "2021130"
  },
  {
    "text": "fix that in a second I also need to add references to my parser so if I say what",
    "start": "2021130",
    "end": "2028210"
  },
  {
    "text": "is reference my reference is something like a five so that's a letter followed",
    "start": "2028210",
    "end": "2034900"
  },
  {
    "text": "by an integer and I'm going to just say",
    "start": "2034900",
    "end": "2040410"
  },
  {
    "text": "map reference because the thing on the Left produces a parser that recognizes a pair",
    "start": "2040410",
    "end": "2048550"
  },
  {
    "text": "with a character and an int and this",
    "start": "2048550",
    "end": "2055090"
  },
  {
    "text": "thing takes a position which is character and then and so now I have a parser that recognized one more kind of",
    "start": "2055090",
    "end": "2062590"
  },
  {
    "text": "expression specifically dereference and I can add it as another case to my term",
    "start": "2062590",
    "end": "2069270"
  },
  {
    "text": "which is the sort of basic syntactic constructs so now a term is a number or",
    "start": "2069270",
    "end": "2075908"
  },
  {
    "text": "bracketed thing or reference and so now",
    "start": "2075909",
    "end": "2081040"
  },
  {
    "text": "I can actually parse references and here's the missing bit where I haven't",
    "start": "2081040",
    "end": "2087128"
  },
  {
    "text": "implemented the evaluator yet so here we have evaluator for numbers and for",
    "start": "2087129",
    "end": "2092850"
  },
  {
    "text": "binary and we need to add handling for references so what's a reference it has",
    "start": "2092850",
    "end": "2100960"
  },
  {
    "text": "a position ah no no no let me see",
    "start": "2100960",
    "end": "2105970"
  },
  {
    "text": "yes you are right typing is so hard I don't know how you people managed to do",
    "start": "2105970",
    "end": "2111640"
  },
  {
    "text": "it all day so we need to evaluate references now this is this is difficult",
    "start": "2111640",
    "end": "2119380"
  },
  {
    "text": "because this is just some position but we don't really have the cells available",
    "start": "2119380",
    "end": "2125230"
  },
  {
    "text": "here we just have the expression so we'll need to tweak our evaluate function to actually get all the cells",
    "start": "2125230",
    "end": "2133020"
  },
  {
    "text": "from the spreadsheet because it might need to do cup into the spreadsheet now if I do",
    "start": "2133020",
    "end": "2139460"
  },
  {
    "text": "this then I need to pass the cells through all the recursive calls so that's one thing the other thing is I",
    "start": "2139460",
    "end": "2146840"
  },
  {
    "text": "will actually need to go to my evaluate function which is somewhere somewhere up",
    "start": "2146840",
    "end": "2157400"
  },
  {
    "text": "here no I need to go to the place where I call the evaluate function in render",
    "start": "2157400",
    "end": "2163340"
  },
  {
    "text": "cell and give it the cells from my from",
    "start": "2163340",
    "end": "2169850"
  },
  {
    "text": "my spreadsheet state so now we have",
    "start": "2169850",
    "end": "2175250"
  },
  {
    "text": "access to all those all those cells and if we want to evaluate a reference that",
    "start": "2175250",
    "end": "2182450"
  },
  {
    "text": "we need to find the value for the cell",
    "start": "2182450",
    "end": "2188710"
  },
  {
    "text": "so this is the the code that the person wrote and you can see I'm using map dot",
    "start": "2188710",
    "end": "2195080"
  },
  {
    "text": "find which will just throw if the if the cell doesn't contain anything so this is",
    "start": "2195080",
    "end": "2200720"
  },
  {
    "text": "one more place where I'm doing things in a dangerous way and that's something I'll have to fix later then we will run",
    "start": "2200720",
    "end": "2210140"
  },
  {
    "text": "our equation parser on this code so this",
    "start": "2210140",
    "end": "2216290"
  },
  {
    "text": "is parsed and again this is option and I'll have to do the parsing I'll have to",
    "start": "2216290",
    "end": "2222530"
  },
  {
    "text": "have to do the error checking here eventually but if we just pretend it it will always",
    "start": "2222530",
    "end": "2231380"
  },
  {
    "text": "work then I can say parse dot value this",
    "start": "2231380",
    "end": "2236810"
  },
  {
    "text": "is dangerous we'll remove it later and save my code and let's see if it works",
    "start": "2236810",
    "end": "2244820"
  },
  {
    "text": "so if I put say 3 in a cell c3 then I",
    "start": "2244820",
    "end": "2250790"
  },
  {
    "text": "can go here and say c3 plus 1 that's 4 D",
    "start": "2250790",
    "end": "2257450"
  },
  {
    "text": "4 times 2 that's 8 so it seems to be",
    "start": "2257450",
    "end": "2263210"
  },
  {
    "text": "working fine and if he did if he did spend a lot of time you could we",
    "start": "2263210",
    "end": "2269930"
  },
  {
    "text": "we're now good enough that we can almost implement a Fibonacci numbers so this is",
    "start": "2269930",
    "end": "2274970"
  },
  {
    "text": "f3 plus f4 I don't have the drag down",
    "start": "2274970",
    "end": "2280520"
  },
  {
    "text": "feature yet so I'll just have to have to type all of those manually looks good",
    "start": "2280520",
    "end": "2289099"
  },
  {
    "text": "doesn't it I'll do one more and then I'll stop all right",
    "start": "2289099",
    "end": "2294530"
  },
  {
    "text": "that's just my Fibonacci number calculator implemented in my own spreadsheets now one interesting thing",
    "start": "2294530",
    "end": "2301280"
  },
  {
    "text": "you can do here is you can say equals let's see I'll go here so I can do",
    "start": "2301280",
    "end": "2311200"
  },
  {
    "text": "equals I don't know f1 now as you can",
    "start": "2311200",
    "end": "2316790"
  },
  {
    "text": "see I got some JavaScript error which is why it stopped working it says key not found so that's not very",
    "start": "2316790",
    "end": "2323329"
  },
  {
    "text": "good or I can just say 1 modulo 5 and I",
    "start": "2323329",
    "end": "2333980"
  },
  {
    "text": "don't have that implemented so I have option has no value so my error handling",
    "start": "2333980",
    "end": "2339440"
  },
  {
    "text": "is kind of poor so that's the next that's the next step for my spreadsheet I think I implemented everything I",
    "start": "2339440",
    "end": "2348799"
  },
  {
    "text": "wanted here yep so now it's time to do",
    "start": "2348799",
    "end": "2355099"
  },
  {
    "text": "some error handling and how do you do error handling in F sharp bay might be",
    "start": "2355099",
    "end": "2363200"
  },
  {
    "text": "one answer but I've got the better one which is Rob so if you want to do error",
    "start": "2363200",
    "end": "2370640"
  },
  {
    "text": "handling in F sharp you can I actually so a sort of word of warning you can use",
    "start": "2370640",
    "end": "2380089"
  },
  {
    "text": "exceptions in F sharp and very often they're actually really nice way to handle exceptions because F sharp has",
    "start": "2380089",
    "end": "2387799"
  },
  {
    "text": "has try-catch support and it also works in works inside asynchronous workflows",
    "start": "2387799",
    "end": "2393680"
  },
  {
    "text": "and so if you're if you're doing sort of handling of unexpected exceptions then",
    "start": "2393680",
    "end": "2399730"
  },
  {
    "text": "you can just use exceptions and it's going to be easier most very often but here we sort of want",
    "start": "2399730",
    "end": "2408820"
  },
  {
    "text": "to explicitly say this may be missing so we're going to change our evaluator so",
    "start": "2408820",
    "end": "2414250"
  },
  {
    "text": "that it returns option and option is the F sharp F sharp answer to this sort of",
    "start": "2414250",
    "end": "2421590"
  },
  {
    "text": "null problem that Matz mentioned in the beginning so an option could be none",
    "start": "2421590",
    "end": "2427080"
  },
  {
    "text": "meaning there is no value or sum and then we have the value and the F sharp",
    "start": "2427080",
    "end": "2435250"
  },
  {
    "text": "library comes with two useful functions one of them is option dot map which says",
    "start": "2435250",
    "end": "2441040"
  },
  {
    "text": "if I have an option of T and a function",
    "start": "2441040",
    "end": "2447010"
  },
  {
    "text": "that can turn T's into hours then I can produce an option of R and the other one",
    "start": "2447010",
    "end": "2453910"
  },
  {
    "text": "says if I've got an option of T and I have some more work to do that can also",
    "start": "2453910",
    "end": "2459850"
  },
  {
    "text": "fail that might produce our option then I can sort of unwrap all those options",
    "start": "2459850",
    "end": "2466570"
  },
  {
    "text": "and just give you an option of our so the first one basically says transform a",
    "start": "2466570",
    "end": "2473680"
  },
  {
    "text": "value if it worked the second one says get something that might have failed do",
    "start": "2473680",
    "end": "2480580"
  },
  {
    "text": "some more work that can fail as well and return just a simple value that is either there or not there so we'll need",
    "start": "2480580",
    "end": "2489160"
  },
  {
    "text": "to use those along the way and to do that I'm going to go here in my",
    "start": "2489160",
    "end": "2503550"
  },
  {
    "text": "recursive evaluator and change this so",
    "start": "2503550",
    "end": "2508990"
  },
  {
    "text": "that rather than returning an int it returns an option of and so this case",
    "start": "2508990",
    "end": "2515560"
  },
  {
    "text": "was easy if we have a number we just return some number and now we basically",
    "start": "2515560",
    "end": "2521500"
  },
  {
    "text": "have to go and fix all the errors until the compiler is happy so here the compiler is complaining",
    "start": "2521500",
    "end": "2529390"
  },
  {
    "text": "because these things are in options so",
    "start": "2529390",
    "end": "2534840"
  },
  {
    "text": "rather than just using the value I can say option dot bind and if",
    "start": "2534840",
    "end": "2541180"
  },
  {
    "text": "we actually got successfully evaluated the left thing that we can continue try",
    "start": "2541180",
    "end": "2549190"
  },
  {
    "text": "evaluate the right thing and if this worked as well that we can do a map",
    "start": "2549190",
    "end": "2556000"
  },
  {
    "text": "operation that will run the operator so now I've got I've got the transformation",
    "start": "2556000",
    "end": "2563440"
  },
  {
    "text": "working here this returns an option I've",
    "start": "2563440",
    "end": "2568930"
  },
  {
    "text": "also got a bunch of things that can fail in reference so this should really be try find to handle the case that you're",
    "start": "2568930",
    "end": "2576460"
  },
  {
    "text": "referencing something that doesn't have a value if this works that we get code",
    "start": "2576460",
    "end": "2583500"
  },
  {
    "text": "and then we can run the parser and if",
    "start": "2583500",
    "end": "2590110"
  },
  {
    "text": "that worked as well then we get the parse expression and only then we can",
    "start": "2590110",
    "end": "2596890"
  },
  {
    "text": "actually evaluate it and if the evaluation still fails well we return",
    "start": "2596890",
    "end": "2602560"
  },
  {
    "text": "none and bind will take care of care of that so I've changed the evaluate",
    "start": "2602560",
    "end": "2609220"
  },
  {
    "text": "function and if I go to the place where",
    "start": "2609220",
    "end": "2614260"
  },
  {
    "text": "I'm actually calling it down here in my",
    "start": "2614260",
    "end": "2619600"
  },
  {
    "text": "rendering now this is something that can fail and now I can also fix the thing",
    "start": "2619600",
    "end": "2626710"
  },
  {
    "text": "where previously I said let's just parse it assume it worked so let's let's be a",
    "start": "2626710",
    "end": "2632950"
  },
  {
    "text": "bit nicer and let's run the parser and then say if this worked then we will",
    "start": "2632950",
    "end": "2643060"
  },
  {
    "text": "continue we get the parsed value and we",
    "start": "2643060",
    "end": "2648220"
  },
  {
    "text": "try evaluating it and if this worked as well then whatever result we get we will",
    "start": "2648220",
    "end": "2659380"
  },
  {
    "text": "just format it as string and this gives us a result which is a string option now",
    "start": "2659380",
    "end": "2668530"
  },
  {
    "text": "I want to nicely format this as well so I will change my render view",
    "start": "2668530",
    "end": "2673900"
  },
  {
    "text": "function and give us give it this whole option value and here I'll just say some",
    "start": "2673900",
    "end": "2680620"
  },
  {
    "text": "empty and I'll go to render view now this value may be optional so what I'm",
    "start": "2680620",
    "end": "2687280"
  },
  {
    "text": "going to do here is to say insert a style if it's none then give it a red",
    "start": "2687280",
    "end": "2694630"
  },
  {
    "text": "background otherwise no special styling and I'll add a default value default arc",
    "start": "2694630",
    "end": "2704670"
  },
  {
    "text": "where if it's if it failed then I will",
    "start": "2704670",
    "end": "2710830"
  },
  {
    "text": "display hash error to make it look like excel all right because that's what my",
    "start": "2710830",
    "end": "2719320"
  },
  {
    "text": "boss one's saying so now I can say this is this is this is 5 this is 11 this is",
    "start": "2719320",
    "end": "2730780"
  },
  {
    "text": "C 3 plus C 4 this worked but if I do c8",
    "start": "2730780",
    "end": "2741240"
  },
  {
    "text": "then I get an error if I do something that doesn't parse I get an error if I",
    "start": "2741240",
    "end": "2751660"
  },
  {
    "text": "change this value to 0 then I actually get an error over there so this is a nice thing that works sort of",
    "start": "2751660",
    "end": "2758320"
  },
  {
    "text": "automatically for free because as its updating the the view it will recompute",
    "start": "2758320",
    "end": "2765070"
  },
  {
    "text": "the the cells and so if I delete it it the error will get propagated if I make",
    "start": "2765070",
    "end": "2772090"
  },
  {
    "text": "some changes here it all gets updated so I've now got I now have a have a nice",
    "start": "2772090",
    "end": "2778060"
  },
  {
    "text": "error handling now there's still one case that I'm not really handling well",
    "start": "2778060",
    "end": "2783130"
  },
  {
    "text": "so if I go to cell b2 and I say b2 plus",
    "start": "2783130",
    "end": "2790780"
  },
  {
    "text": "1 then what will happen the the famous",
    "start": "2790780",
    "end": "2796410"
  },
  {
    "text": "nothing it seems broken happened in my",
    "start": "2796410",
    "end": "2802780"
  },
  {
    "text": "JavaScript I get maxximum call stacks I succeeded",
    "start": "2802780",
    "end": "2808190"
  },
  {
    "text": "so my evaluator tried really hard called itself a lot of time but haven't haven't",
    "start": "2808190",
    "end": "2814850"
  },
  {
    "text": "really done that yet what do we do about that well this is this is actually one",
    "start": "2814850",
    "end": "2821300"
  },
  {
    "text": "thing that is now really really easy to fix and by the way the the way the Excel",
    "start": "2821300",
    "end": "2830660"
  },
  {
    "text": "engine does it is that the the render func the evaluate function just counts",
    "start": "2830660",
    "end": "2836420"
  },
  {
    "text": "until it gets called 100 times and then it's as well probably no so we can",
    "start": "2836420",
    "end": "2842930"
  },
  {
    "text": "already already do something that's better than Excel where as I'm doing the",
    "start": "2842930",
    "end": "2849020"
  },
  {
    "text": "evaluation I will keep a set of the reference cells that I've already visited and if I get to the cell again",
    "start": "2849020",
    "end": "2856760"
  },
  {
    "text": "then I'll say none so rather than just counting to 100 we will we will actually",
    "start": "2856760",
    "end": "2863960"
  },
  {
    "text": "check that you either have a have a cycle so I will add a new parameter",
    "start": "2863960",
    "end": "2869510"
  },
  {
    "text": "Refs which will be a set of the references I already visited and",
    "start": "2869510",
    "end": "2876130"
  },
  {
    "text": "whenever I call myself recursively I will have to propagate this information",
    "start": "2876130",
    "end": "2882490"
  },
  {
    "text": "so that's this part and when I'm in the",
    "start": "2882490",
    "end": "2892010"
  },
  {
    "text": "reference case so here then what I want to do is to add this new cell that I've",
    "start": "2892010",
    "end": "2898280"
  },
  {
    "text": "just sort of got to to my set so I'll say sets not add position to my",
    "start": "2898280",
    "end": "2906050"
  },
  {
    "text": "references and now I'm saying I saw this I saw this I walk through this through",
    "start": "2906050",
    "end": "2913250"
  },
  {
    "text": "here if I ever go here again it's an error and to handle that I can now do",
    "start": "2913250",
    "end": "2920380"
  },
  {
    "text": "something like pattern matching on on the reference but with the when Clause",
    "start": "2920380",
    "end": "2928240"
  },
  {
    "text": "where I can't a test whether the set contains this position and if that's the",
    "start": "2928240",
    "end": "2936350"
  },
  {
    "text": "case there we have a reference to a cell that we already had to visit while we were",
    "start": "2936350",
    "end": "2942370"
  },
  {
    "text": "evaluating so we say none this is an error does not support it and now if I",
    "start": "2942370",
    "end": "2948940"
  },
  {
    "text": "go back it didn't it didn't refresh",
    "start": "2948940",
    "end": "2954850"
  },
  {
    "text": "because I get this red error mark here on the side so I forgot one thing when I",
    "start": "2954850",
    "end": "2961420"
  },
  {
    "text": "call evaluate initially I obviously need to give it empty set of things I haven't",
    "start": "2961420",
    "end": "2967900"
  },
  {
    "text": "I haven't seen any references yet so",
    "start": "2967900",
    "end": "2974130"
  },
  {
    "text": "that's what I have to do and now it reloads and I can say see three plus one",
    "start": "2974130",
    "end": "2980230"
  },
  {
    "text": "and I get an error if I go back and",
    "start": "2980230",
    "end": "2985270"
  },
  {
    "text": "change it and you see two plus one then now it works so that's my that's my",
    "start": "2985270",
    "end": "2993550"
  },
  {
    "text": "spreadsheet that's my spreadsheet done and just to show you how sort of",
    "start": "2993550",
    "end": "3000120"
  },
  {
    "text": "complicated this whole thing is from a bird's eye perspective if I delete all",
    "start": "3000120",
    "end": "3005700"
  },
  {
    "text": "the comments then I have some bit here which is defining the domain model so",
    "start": "3005700",
    "end": "3012300"
  },
  {
    "text": "this is just saying what is actually a spreadsheet it has positions it has expressions that",
    "start": "3012300",
    "end": "3018720"
  },
  {
    "text": "you can put in the cells and have stay'd which is what I need to render and it",
    "start": "3018720",
    "end": "3024330"
  },
  {
    "text": "has these two events which is the sort of operations that can happen so here is",
    "start": "3024330",
    "end": "3029550"
  },
  {
    "text": "my domain model then I had second chunk",
    "start": "3029550",
    "end": "3034860"
  },
  {
    "text": "of code here which was implementing all the different parsers so I can parse the",
    "start": "3034860",
    "end": "3042210"
  },
  {
    "text": "things you can type in your in your spreadsheets most importantly equations",
    "start": "3042210",
    "end": "3047370"
  },
  {
    "text": "that are composed of expressions then I",
    "start": "3047370",
    "end": "3053940"
  },
  {
    "text": "had one more chunk of code which was this recursive evaluate function so this",
    "start": "3053940",
    "end": "3060900"
  },
  {
    "text": "is a recursive one recursive function that walks over the expression resolves",
    "start": "3060900",
    "end": "3066450"
  },
  {
    "text": "the references propagates errors correctly and checks for checks for recursive",
    "start": "3066450",
    "end": "3074280"
  },
  {
    "text": "references and then I have all the",
    "start": "3074280",
    "end": "3080800"
  },
  {
    "text": "rendering code here so render editor render view render sell and the main",
    "start": "3080800",
    "end": "3086530"
  },
  {
    "text": "rendering function and the update function I'll move a bit up so in my",
    "start": "3086530",
    "end": "3094750"
  },
  {
    "text": "rendering code that's that's a bit",
    "start": "3094750",
    "end": "3100569"
  },
  {
    "text": "longer because we just had to render else of different elements and render",
    "start": "3100569",
    "end": "3105849"
  },
  {
    "text": "cell does the sort of clever thing of figuring out is it the current one or is",
    "start": "3105849",
    "end": "3112359"
  },
  {
    "text": "it is it just the view in which case we need to evaluate it and my main",
    "start": "3112359",
    "end": "3117369"
  },
  {
    "text": "rendering function and then I have the update function which is handling the",
    "start": "3117369",
    "end": "3122710"
  },
  {
    "text": "events and saying if this happens this is how we update the state and I've got",
    "start": "3122710",
    "end": "3129250"
  },
  {
    "text": "my entry point code which just says this is the initial state and and start so if",
    "start": "3129250",
    "end": "3139030"
  },
  {
    "text": "I figure out how to turn on line numbers I turned them off previously so that I'm",
    "start": "3139030",
    "end": "3149799"
  },
  {
    "text": "not destructed by this then it actually fits in something like 130 lines of code",
    "start": "3149799",
    "end": "3156940"
  },
  {
    "text": "and that's implementing that's implementing a spreadsheet that does not",
    "start": "3156940",
    "end": "3163690"
  },
  {
    "text": "everything that Excel does but still quite a lot of quite a lot of clever",
    "start": "3163690",
    "end": "3169359"
  },
  {
    "text": "things already so there's there's sort of one thing that I haven't done yet",
    "start": "3169359",
    "end": "3176500"
  },
  {
    "text": "that I wasn't really expecting to have time for so I'll just show you tell you",
    "start": "3176500",
    "end": "3182589"
  },
  {
    "text": "what it would be if I did have longer slot one thing that my my spreadsheet",
    "start": "3182589",
    "end": "3189520"
  },
  {
    "text": "was doing is that every time you render it actually evaluates all those cells and that's fine for a small one but it",
    "start": "3189520",
    "end": "3198910"
  },
  {
    "text": "wouldn't really work for something like Excel where people can create too",
    "start": "3198910",
    "end": "3204760"
  },
  {
    "text": "abide Excel spreadsheets and run the entire economy of the state using an Excel spreadsheet or basically",
    "start": "3204760",
    "end": "3212080"
  },
  {
    "text": "everything so the way to do this better would be to keep a dependency graph",
    "start": "3212080",
    "end": "3218860"
  },
  {
    "text": "where if I have a1 and c1 which are just numbers and then I create a cell b3 that",
    "start": "3218860",
    "end": "3224620"
  },
  {
    "text": "reference references these two cells then I would actually build a graph that says I'm a",
    "start": "3224620",
    "end": "3232660"
  },
  {
    "text": "cell this is what I depend on now how",
    "start": "3232660",
    "end": "3237880"
  },
  {
    "text": "would you do that a very simple sort of easy way to do",
    "start": "3237880",
    "end": "3243160"
  },
  {
    "text": "this sort of thing in F sharp is to change my evaluator to construct not a",
    "start": "3243160",
    "end": "3252060"
  },
  {
    "text": "number not an evaluated result but a representation of a cell which has two",
    "start": "3252060",
    "end": "3259330"
  },
  {
    "text": "things it has a way of getting the current value and a way of notifying",
    "start": "3259330",
    "end": "3264970"
  },
  {
    "text": "when it has changed and then you when you rerender you just update the update",
    "start": "3264970",
    "end": "3271750"
  },
  {
    "text": "numbers in the cells and they will say have I changed not well then I'm not",
    "start": "3271750",
    "end": "3277690"
  },
  {
    "text": "going to trigger this observable but if the number of changes then they can say",
    "start": "3277690",
    "end": "3283330"
  },
  {
    "text": "trigger this observable and all the cells that depend on them will subscribe",
    "start": "3283330",
    "end": "3289330"
  },
  {
    "text": "to this notification and do the recomputation so building a graph using",
    "start": "3289330",
    "end": "3295090"
  },
  {
    "text": "these things is the sort of last thing that my spreadsheet is missing and that",
    "start": "3295090",
    "end": "3302590"
  },
  {
    "text": "would that would take sort of 15 more minutes that I wasn't really expecting to have so that's just a just a sort of",
    "start": "3302590",
    "end": "3311190"
  },
  {
    "text": "sketch of what you might need to do so the one thing that I think I often sort",
    "start": "3311190",
    "end": "3318010"
  },
  {
    "text": "of get when people when people see me write some code life is that you say",
    "start": "3318010",
    "end": "3323340"
  },
  {
    "text": "it's nice you can do all this in one hour but is this really what ifs are programming looks like in the real world",
    "start": "3323340",
    "end": "3331290"
  },
  {
    "text": "aren't you like you trimmed this down to the very simple thing so that it fits in",
    "start": "3331290",
    "end": "3337240"
  },
  {
    "text": "a talk and I did that I I did sort of simplify",
    "start": "3337240",
    "end": "3342309"
  },
  {
    "text": "this this a lot but this is really what the FS are programming looks like in the",
    "start": "3342309",
    "end": "3347440"
  },
  {
    "text": "real world because when I need to write some solve some problem most of my time",
    "start": "3347440",
    "end": "3353680"
  },
  {
    "text": "is often spent figuring out how to actually best do this and obviously the",
    "start": "3353680",
    "end": "3360009"
  },
  {
    "text": "way to figure out how to best do things is to use some crazy scaffolding engine",
    "start": "3360009",
    "end": "3367420"
  },
  {
    "text": "to generate 100 classes for me in 100 files and then modify one spent the rest",
    "start": "3367420",
    "end": "3375190"
  },
  {
    "text": "of the afternoon fixing my code base so that it actually builds and then running",
    "start": "3375190",
    "end": "3380529"
  },
  {
    "text": "built and seeing that it didn't work no so in in F sharp I think that the sort",
    "start": "3380529",
    "end": "3387279"
  },
  {
    "text": "of way of developing is that you really very often start with something simple",
    "start": "3387279",
    "end": "3392769"
  },
  {
    "text": "and write a lot of code to explore what's the best way to of doing it and",
    "start": "3392769",
    "end": "3399190"
  },
  {
    "text": "when that code as sort of 200 lines of code or or maybe 400 lines of code then",
    "start": "3399190",
    "end": "3406390"
  },
  {
    "text": "you actually say well now it's a bit long for one file and you split it and I",
    "start": "3406390",
    "end": "3411759"
  },
  {
    "text": "sort of sketched how this would look like here because I do have a bit for domain model that I would put in one",
    "start": "3411759",
    "end": "3418900"
  },
  {
    "text": "file I have a bed for parser that I would put in another file I have an",
    "start": "3418900",
    "end": "3425229"
  },
  {
    "text": "evaluator another file I'll have the rendering and maybe with update and",
    "start": "3425229",
    "end": "3431619"
  },
  {
    "text": "initial I would put it in the main file and that's also a point where I would",
    "start": "3431619",
    "end": "3437759"
  },
  {
    "text": "actually start worrying about adding some more tests because so far I just",
    "start": "3437759",
    "end": "3443049"
  },
  {
    "text": "tested everything interactively and that's that's a way to get the quick feedback that people often want from TDD",
    "start": "3443049",
    "end": "3450279"
  },
  {
    "text": "from sort of test runner a part of that part of that is give me a quick feedback",
    "start": "3450279",
    "end": "3455349"
  },
  {
    "text": "here I get quick feedback in an in another way but when I move to something",
    "start": "3455349",
    "end": "3460719"
  },
  {
    "text": "bigger that I would add some unit tests make sure that it actually does keep",
    "start": "3460719",
    "end": "3466059"
  },
  {
    "text": "working so I start programming really looks like this in the real world",
    "start": "3466059",
    "end": "3471710"
  },
  {
    "text": "and most of the time you're sort of exploring ideas separately and then you",
    "start": "3471710",
    "end": "3477920"
  },
  {
    "text": "then you put it as part of your of your bigger bigger thing so to wrap up I",
    "start": "3477920",
    "end": "3485740"
  },
  {
    "text": "wanted to do a talk that actually shows you how you approach solving one",
    "start": "3485740",
    "end": "3491440"
  },
  {
    "text": "reasonably interesting problem like writing a spreadsheet and along the way",
    "start": "3491440",
    "end": "3497119"
  },
  {
    "text": "I've used a couple of interesting things first of all it was all running in the browser using fable which is an amazing",
    "start": "3497119",
    "end": "3504710"
  },
  {
    "text": "absorb to JavaScript compiler with a lot of lot of active people around in the",
    "start": "3504710",
    "end": "3510020"
  },
  {
    "text": "community this is part of the safe stack which is sort of more more sort of a",
    "start": "3510020",
    "end": "3518589"
  },
  {
    "text": "library a set of libraries that really do everything you need around web development nicely connected and",
    "start": "3518589",
    "end": "3524960"
  },
  {
    "text": "documented together I use the Elm style of programming with the sort of update",
    "start": "3524960",
    "end": "3530720"
  },
  {
    "text": "and render functions and I used it in a very simple way but safe spec comes with",
    "start": "3530720",
    "end": "3536329"
  },
  {
    "text": "a elvish library which does it in a sort of more proper way and I use the nice",
    "start": "3536329",
    "end": "3543589"
  },
  {
    "text": "features of sort of f-sharp compositionality by doing the parsers",
    "start": "3543589",
    "end": "3550430"
  },
  {
    "text": "with with two custom operators to get them composed in two directions and all",
    "start": "3550430",
    "end": "3556099"
  },
  {
    "text": "the way everywhere through my code I used pipes for domain modeling and the",
    "start": "3556099",
    "end": "3561829"
  },
  {
    "text": "option type for error handling so before I let you go I still have 48 seconds so",
    "start": "3561829",
    "end": "3569950"
  },
  {
    "text": "there is a functional track happening here for the next two days with more",
    "start": "3569950",
    "end": "3575660"
  },
  {
    "text": "more talks on functional programming so if that's your if that's your area then",
    "start": "3575660",
    "end": "3581510"
  },
  {
    "text": "do stay here or come or lots of other good talks in the next few days",
    "start": "3581510",
    "end": "3587480"
  },
  {
    "text": "drag your friends in if they if they somehow had to go to something else they",
    "start": "3587480",
    "end": "3592700"
  },
  {
    "text": "totally be here next time and we are also running fpsb lab lunch meeting or",
    "start": "3592700",
    "end": "3600740"
  },
  {
    "text": "lunch hour it is in the program I don't no in which room is it room 10",
    "start": "3600740",
    "end": "3608480"
  },
  {
    "text": "so come come to room 10 tomorrow and the",
    "start": "3608480",
    "end": "3613759"
  },
  {
    "text": "day after if you want to ask any questions I will I will also be there and lots of the other functional Trek",
    "start": "3613759",
    "end": "3620059"
  },
  {
    "text": "speakers will be there so we can we can help you write some code and join the",
    "start": "3620059",
    "end": "3627950"
  },
  {
    "text": "functional functional crowd thank you [Applause]",
    "start": "3627950",
    "end": "3636770"
  }
]