[
  {
    "start": "0",
    "end": "74000"
  },
  {
    "text": "thanks for joining me today my name is hassan barakat and i work as a tech lead with a company here in",
    "start": "6240",
    "end": "11440"
  },
  {
    "text": "sydney called willow this is my twitter handle and website if you would like to follow me or reach out to me with any questions that you have",
    "start": "11440",
    "end": "18800"
  },
  {
    "text": "today i would like to talk to you about practical domain driven design with ef core",
    "start": "18800",
    "end": "24000"
  },
  {
    "text": "if you have any questions during the call or the talk please feel free to send the questions on a slack i will look into all of the",
    "start": "24000",
    "end": "30640"
  },
  {
    "text": "questions after the talk and i will answer them there i've been practicing domain driven",
    "start": "30640",
    "end": "36640"
  },
  {
    "text": "design for a long time now and one of the common challenges that i have found when i work it alongside other",
    "start": "36640",
    "end": "42000"
  },
  {
    "text": "developers is how can we apply the domain driven design concepts to a legacy code base that we have inherited",
    "start": "42000",
    "end": "47360"
  },
  {
    "text": "from a previous team or a previous company or third party vendor that's",
    "start": "47360",
    "end": "52640"
  },
  {
    "text": "basically worked on that code base and that's going to be the focus of my talk today how can we apply",
    "start": "52640",
    "end": "58640"
  },
  {
    "text": "the domain driven design into a legacy code base and we will be using ef core to make",
    "start": "58640",
    "end": "63840"
  },
  {
    "text": "sure that that domain model that we will be building can be materialized into a relational database",
    "start": "63840",
    "end": "70400"
  },
  {
    "text": "let's start by defining what's doing driven design wind-driven design is an approach to",
    "start": "70400",
    "end": "75680"
  },
  {
    "start": "74000",
    "end": "74000"
  },
  {
    "text": "software development that centers the development on programming domain model that has a rich understanding of their",
    "start": "75680",
    "end": "81439"
  },
  {
    "text": "processes and the rules of the domain so as developers will be building a domain model that domain model will have",
    "start": "81439",
    "end": "88320"
  },
  {
    "text": "business rules and processes or will help us to solve that particular problem that we are",
    "start": "88320",
    "end": "93360"
  },
  {
    "text": "trying to solve so what's the domain model a domain model is an object model of the",
    "start": "93360",
    "end": "98880"
  },
  {
    "start": "98000",
    "end": "98000"
  },
  {
    "text": "domain that has both behavior and data so basically we will be building classes to represent the domain",
    "start": "98880",
    "end": "105200"
  },
  {
    "text": "our classes will have behavior which is usually represented with methods in c-sharp",
    "start": "105200",
    "end": "110479"
  },
  {
    "text": "and it will also have data which are usually represented with properties",
    "start": "110479",
    "end": "116880"
  },
  {
    "text": "there is another key definition for the domain model which is it's a system of abstraction that describes selected aspects of a domain and can be",
    "start": "116880",
    "end": "124079"
  },
  {
    "text": "used to solve the problems related to that domain so as developers we will not be representing",
    "start": "124079",
    "end": "129280"
  },
  {
    "text": "every single aspect that exists in the business domain that we are working on we will focus on the areas that will",
    "start": "129280",
    "end": "134720"
  },
  {
    "text": "help us solve the business problem over time our domain model or our",
    "start": "134720",
    "end": "140640"
  },
  {
    "text": "classes will keep growing and growing and this will make it harder to understand and difficult to maintain thanks to",
    "start": "140640",
    "end": "147200"
  },
  {
    "text": "domain driven design there is a solution for that which is using the strategic design pattern the idea is pretty simple but it's",
    "start": "147200",
    "end": "153760"
  },
  {
    "text": "usually hard to apply at the beginning which is when you have a big system you usually want to split that system",
    "start": "153760",
    "end": "160160"
  },
  {
    "text": "into a set of bounded contexts bounded context is a defined part of a",
    "start": "160160",
    "end": "165200"
  },
  {
    "start": "164000",
    "end": "164000"
  },
  {
    "text": "software where particular terms definitions and rules apply in a consistent way it also",
    "start": "165200",
    "end": "170720"
  },
  {
    "text": "provides us with a clear boundary between different parts of the system so as we can see here we have two",
    "start": "170720",
    "end": "176879"
  },
  {
    "text": "bounded contexts sales and support each of them have different terms",
    "start": "176879",
    "end": "181920"
  },
  {
    "text": "and each one has a clear definition that can be understood by both developers and business experts",
    "start": "181920",
    "end": "189599"
  },
  {
    "text": "some of the terms that exist in the pounded context of sale exist also in support like customer or product",
    "start": "189599",
    "end": "196159"
  },
  {
    "text": "the meaning might slightly differ between the different bounded contexts but the key thing here is",
    "start": "196159",
    "end": "201360"
  },
  {
    "text": "both business stakeholders and or domain experts and developers have the same understanding",
    "start": "201360",
    "end": "207599"
  },
  {
    "text": "our focus today will be how can we split a big system into set of grounded contexts but we will",
    "start": "207599",
    "end": "212959"
  },
  {
    "text": "focus on how can we apply the main driven design the tactical parts into a particular bounded context",
    "start": "212959",
    "end": "219760"
  },
  {
    "text": "but which one should we start with when we have multiple bounded contexts we should start focusing on the core domain",
    "start": "219760",
    "end": "226799"
  },
  {
    "text": "the core domain is the bounded context that provides the most value for your for your company so it's that part of",
    "start": "226799",
    "end": "232720"
  },
  {
    "text": "the system if you removed it your company wouldn't exist that's usually where you where you try to start",
    "start": "232720",
    "end": "238560"
  },
  {
    "text": "and this is where you should be applying all of the concepts like services entities value objects and",
    "start": "238560",
    "end": "243840"
  },
  {
    "start": "241000",
    "end": "241000"
  },
  {
    "text": "repositories but this doesn't help us actually solve how can we factor a legacy code based",
    "start": "243840",
    "end": "250480"
  },
  {
    "text": "tools that all of those concepts to be applied in there and this is where we'll spend the rest",
    "start": "250480",
    "end": "256880"
  },
  {
    "text": "of the talk today showing you how it will refactor an existing legacy codepiece but before we do that i",
    "start": "256880",
    "end": "262400"
  },
  {
    "text": "just want to remind you that you shouldn't apply domain-driven design for every bounded context",
    "start": "262400",
    "end": "267520"
  },
  {
    "text": "you need to assess the value that you will get from applying the wind driven design to a particular branded context",
    "start": "267520",
    "end": "273120"
  },
  {
    "text": "because by nature some of the founded context might be just crowd-based operation like maintaining a product catalog with their",
    "start": "273120",
    "end": "280400"
  },
  {
    "text": "names categories and not much business rules like around the pricing or things like that",
    "start": "280400",
    "end": "287360"
  },
  {
    "text": "so in that case if it's just a crowd based operation you will not get much value of applying the domain driven",
    "start": "287360",
    "end": "292800"
  },
  {
    "text": "design sometimes some of the domains are might be uh specific to me like the search",
    "start": "292800",
    "end": "300080"
  },
  {
    "text": "if you have a search you might be bitter using an existing service like elasticsearch or whatever product that",
    "start": "300080",
    "end": "306240"
  },
  {
    "text": "exists it solves this problem and you might not get much value from applying domain driven design in that",
    "start": "306240",
    "end": "311919"
  },
  {
    "text": "particular domain so keep that in mind you shouldn't be applying the main driven design for",
    "start": "311919",
    "end": "317360"
  },
  {
    "text": "every bounded context so let's start by showing how can we refactor a legacy code base",
    "start": "317360",
    "end": "323600"
  },
  {
    "text": "towards more of a rich domain model and we will be applying that by using a sample domain that i have extracted from",
    "start": "323600",
    "end": "329520"
  },
  {
    "text": "a recent project that i have worked on i have simplified really made it very very simple",
    "start": "329520",
    "end": "335280"
  },
  {
    "text": "to make it easy to go through the code base and some of the smells that we can find in the code and",
    "start": "335280",
    "end": "340560"
  },
  {
    "text": "how can those code smells help us reflex refactor the code towards more of a rich domain model",
    "start": "340560",
    "end": "347520"
  },
  {
    "text": "our sample domain will be a florist website that flourish website enables the",
    "start": "347520",
    "end": "352639"
  },
  {
    "start": "349000",
    "end": "349000"
  },
  {
    "text": "customers to subscribe to products such as a small weekly punch large",
    "start": "352639",
    "end": "357759"
  },
  {
    "text": "weekly punch and each product would have a price and one of the other things that",
    "start": "357759",
    "end": "363199"
  },
  {
    "text": "business rule is the more amount of money the customer can portal they will get a discount",
    "start": "363199",
    "end": "369520"
  },
  {
    "text": "based on that money spent the business rules that we have right now will go through the journey of a",
    "start": "369520",
    "end": "374800"
  },
  {
    "text": "customer subscribing to a product and how can we improve the code base that's covering that area of",
    "start": "374800",
    "end": "381680"
  },
  {
    "text": "customer subscribing to a particular product our current domain model that we will be",
    "start": "381680",
    "end": "386720"
  },
  {
    "text": "working with we have a customer that customer has email first name last",
    "start": "386720",
    "end": "392080"
  },
  {
    "text": "name the amount of money spent so whenever they subscribe to a product we can identify the right discount that they will get we",
    "start": "392080",
    "end": "399759"
  },
  {
    "text": "have a product where we have the name paying period if it's weekly or monthly and the amount for that product",
    "start": "399759",
    "end": "406800"
  },
  {
    "text": "whenever a customer subscribed to a product that generates a subscription and that",
    "start": "406800",
    "end": "412560"
  },
  {
    "text": "subscription will have the actual amount that the customer purchases this product with when this product will",
    "start": "412560",
    "end": "418240"
  },
  {
    "text": "expire using the current period in date and then we have a status which is either active or cancelled",
    "start": "418240",
    "end": "425599"
  },
  {
    "text": "immediately once you so once you see this domain model you can say actually this domain model doesn't",
    "start": "425680",
    "end": "431360"
  },
  {
    "text": "satisfy the definition that we said about the domain model that to have both behavior and data because as we can see here we",
    "start": "431360",
    "end": "438560"
  },
  {
    "text": "only have data it's only properties in that particular domain",
    "start": "438560",
    "end": "444160"
  },
  {
    "text": "so let's switch to the ide to go through the code and showing you how can we refactor towards rh domain model",
    "start": "444160",
    "end": "451840"
  },
  {
    "text": "here is my ide i'm using jetbrainwriters for today and our code is written in c-sharp and its.net core api we'll be using.net",
    "start": "453840",
    "end": "462400"
  },
  {
    "text": "5 and e45 the source code of this repository",
    "start": "462400",
    "end": "468080"
  },
  {
    "text": "before the refactoring after the refactoring is available in github i will share the links towards the end of the talk",
    "start": "468080",
    "end": "474960"
  },
  {
    "text": "so here is our controller we have a request for a customer to subscribe to our product we are using the excellent",
    "start": "475199",
    "end": "482000"
  },
  {
    "text": "library mediator from jimmy bogard and this is right now becoming commonly used in a",
    "start": "482000",
    "end": "487440"
  },
  {
    "text": "lot of code bases it provides us with that benefit to make our controllers",
    "start": "487440",
    "end": "493199"
  },
  {
    "text": "really small and we have the business logic in uh class to handle a particular request",
    "start": "493199",
    "end": "500479"
  },
  {
    "text": "so we have that request and we have a request handler to go through we'll go through all of the logic of how",
    "start": "500479",
    "end": "506720"
  },
  {
    "text": "a customer subscribe to our product in a minute just go through the rest of the classes",
    "start": "506720",
    "end": "512159"
  },
  {
    "text": "that we have in our project we are using a of course we have a db context that includes three properties one for each table",
    "start": "512159",
    "end": "521518"
  },
  {
    "text": "we have the domain directory that includes the classes that we have seen in the diagram as we can see it's just properties in",
    "start": "521519",
    "end": "527839"
  },
  {
    "text": "here and we have a base entity that includes",
    "start": "527839",
    "end": "532959"
  },
  {
    "text": "an id which is the primary key of my entities and we have a service which is sending an email",
    "start": "532959",
    "end": "539600"
  },
  {
    "text": "which is just pretty much doing nothing but it just gives us that sample of if we would like to have",
    "start": "539600",
    "end": "544720"
  },
  {
    "text": "a side effect like signaling an email or sending an sms let's get back to our request handler",
    "start": "544720",
    "end": "552880"
  },
  {
    "text": "to see what's actually happening in there also before we start we have an integration",
    "start": "552880",
    "end": "558959"
  },
  {
    "text": "test that we'll be using to make sure that our code as we refactor it is not broken",
    "start": "558959",
    "end": "564480"
  },
  {
    "text": "and this is really important with any code base that you are working on so here is our customer subscribing to a",
    "start": "564480",
    "end": "572080"
  },
  {
    "text": "product we are loading a customer from the database loading the product",
    "start": "572080",
    "end": "577839"
  },
  {
    "text": "then we are calculating the subscription amount and that is based on the amount of money spent by",
    "start": "578000",
    "end": "583440"
  },
  {
    "text": "the customer if the customer spent more than 100 dollars then they get a 20 discount if they",
    "start": "583440",
    "end": "589040"
  },
  {
    "text": "spend more than or equal one thousand they get fifty percent discount",
    "start": "589040",
    "end": "594160"
  },
  {
    "text": "it's really simplified but it will just convey the idea of the rules that could apply whenever a customer subscribed to",
    "start": "594160",
    "end": "599360"
  },
  {
    "text": "approval then we are calculating whenever a subscription will expire",
    "start": "599360",
    "end": "605040"
  },
  {
    "text": "is on the pelling period of a product so if it's a weekly we add seven days if it's a monthly one month",
    "start": "605040",
    "end": "612880"
  },
  {
    "text": "the next section in this method is creating a subscription setting the progress of that",
    "start": "614320",
    "end": "619440"
  },
  {
    "text": "subscription adding it to the customer subscriptions increasing the amount of money spent",
    "start": "619440",
    "end": "625839"
  },
  {
    "text": "saving everything in the database after that we send an email to the",
    "start": "625839",
    "end": "630880"
  },
  {
    "text": "customer letting them know that they have subscribed to upload this is a common pattern that you see in",
    "start": "630880",
    "end": "636959"
  },
  {
    "text": "a lot of code pages and one of the first things that i see with this method it's a long method i",
    "start": "636959",
    "end": "642399"
  },
  {
    "text": "can't even fit it on a single screen i'm using a large font but even if i use a smaller phone it will be hard to",
    "start": "642399",
    "end": "649200"
  },
  {
    "text": "have everything in your mind when you work with such long method and the first thing that i do when i",
    "start": "649200",
    "end": "654640"
  },
  {
    "text": "have such long methods i break them into smaller ones by applying the extract method refactoring so i can minimize the",
    "start": "654640",
    "end": "660880"
  },
  {
    "text": "cognitive load that i require when i work with this code base usually in legacy code bases you find",
    "start": "660880",
    "end": "667040"
  },
  {
    "text": "comments or regions that that's kind of the smell that will hint you to start where to",
    "start": "667040",
    "end": "672399"
  },
  {
    "text": "where and how to create that long method so the first thing we will do we just",
    "start": "672399",
    "end": "678160"
  },
  {
    "text": "extract that section which is calculating subscription amount",
    "start": "678160",
    "end": "683120"
  },
  {
    "text": "then the next part here is calculating the current period in date so i'll extract this to another method",
    "start": "687600",
    "end": "694720"
  },
  {
    "text": "the last part here is creating a subscription and adding it to the customer so we extract a method and we call it",
    "start": "698480",
    "end": "704320"
  },
  {
    "text": "add subscription to customer",
    "start": "704320",
    "end": "707839"
  },
  {
    "text": "here you go so right now as you can see the method is broken and it's much shorter still",
    "start": "714639",
    "end": "721440"
  },
  {
    "text": "there is a lot of things to be improved and we'll see as we go how can we improve that logic right now",
    "start": "721440",
    "end": "729360"
  },
  {
    "text": "so let's start looking at the methods that we have extracted but before we do this since we have done",
    "start": "729360",
    "end": "735519"
  },
  {
    "text": "a refactoring let's make sure that we didn't bring the code as part of that refactoring by running the integration",
    "start": "735519",
    "end": "742240"
  },
  {
    "text": "tests and that is pass let's start by looking",
    "start": "742839",
    "end": "748160"
  },
  {
    "text": "at this first missile that we have extracted we create a subscription we add it to",
    "start": "748160",
    "end": "754880"
  },
  {
    "text": "the customer subscriptions increase the amount of management as i read this through this method i can",
    "start": "754880",
    "end": "760320"
  },
  {
    "text": "identify few good smells the first one with creating the subscription we are using the property",
    "start": "760320",
    "end": "766399"
  },
  {
    "text": "setters to initialize the subscription and we are using the object initializer but the key part here is",
    "start": "766399",
    "end": "772160"
  },
  {
    "text": "we are setting the properties directly and as a consumer of that domain model",
    "start": "772160",
    "end": "778639"
  },
  {
    "text": "nothing is stopping me from creating the subscription in an invalid state so i can create a subscription and i cancel this date",
    "start": "778639",
    "end": "785680"
  },
  {
    "text": "technically that's valid but from a business perspective there is no such thing as creating subscription in cancel it's usually",
    "start": "785680",
    "end": "792480"
  },
  {
    "text": "either active or maybe if you didn't collect the money you will create it impending after getting the money you will make it",
    "start": "792480",
    "end": "797760"
  },
  {
    "text": "active in our domain it's either active or canceled and the default is active",
    "start": "797760",
    "end": "803120"
  },
  {
    "text": "so that's an issue right we wanna we want the code to help us as consumers",
    "start": "803120",
    "end": "808160"
  },
  {
    "text": "of that domain model to avoid making those mistakes nothing stopping me from creating",
    "start": "808160",
    "end": "813600"
  },
  {
    "text": "subscription with a negative amount or a subscription without a customer or product if i did that i will get an",
    "start": "813600",
    "end": "819839"
  },
  {
    "text": "error when i save that data into the database because there is a relation between the tables that might",
    "start": "819839",
    "end": "824959"
  },
  {
    "text": "be broken but i don't want to wait till that last minute when i get an exception from the database",
    "start": "824959",
    "end": "830560"
  },
  {
    "text": "i want to have all of these validation rules as part of my domain model",
    "start": "830560",
    "end": "835600"
  },
  {
    "text": "and the good thing with c-sharp is we can do this by using a constructor so i can go here in my subscription class",
    "start": "835600",
    "end": "842160"
  },
  {
    "text": "i will update all of the properties to be privately set so only methods inside my subscription",
    "start": "842160",
    "end": "848639"
  },
  {
    "text": "entity can change the values of those properties and i will introduce a parameterized",
    "start": "848639",
    "end": "854480"
  },
  {
    "text": "constructor where i can pass the required parameters to initialize a subscription entity",
    "start": "854480",
    "end": "861760"
  },
  {
    "text": "to avoid having spending a lot of time with the writing and all of the spinning mistakes i have",
    "start": "861920",
    "end": "867199"
  },
  {
    "text": "bunch of good snippets that i will be using today so here we go we have our subscription constructor",
    "start": "867199",
    "end": "873760"
  },
  {
    "text": "where i added the validations of the customer product amount i even set the default value for the",
    "start": "873760",
    "end": "879120"
  },
  {
    "text": "status i updated all of the progresses to be privately set as well",
    "start": "879120",
    "end": "885279"
  },
  {
    "text": "with that a change i will update the consumer code to use that parameterized constructor",
    "start": "885279",
    "end": "892480"
  },
  {
    "text": "and with this refactoring let's run the test to make sure that nothing is broken",
    "start": "897760",
    "end": "903279"
  },
  {
    "text": "and we manage it to create the tests the error that we are seeing here is",
    "start": "906720",
    "end": "913440"
  },
  {
    "text": "basically ef core unable to load that entity from the",
    "start": "913440",
    "end": "918480"
  },
  {
    "text": "database because this is a limitation that we have unfortunately for right now when you have a constructor with some of",
    "start": "918480",
    "end": "923839"
  },
  {
    "text": "the complex type it cannot use that parameterized constructor",
    "start": "923839",
    "end": "928959"
  },
  {
    "text": "so the solution to that is to use a private constructor",
    "start": "928959",
    "end": "933759"
  },
  {
    "text": "that can be used by ef core and we are using private constructor here parameter less constructor because",
    "start": "935120",
    "end": "941680"
  },
  {
    "text": "that can be used by af core but the consumers of my code still has to use that constructor with",
    "start": "941680",
    "end": "947440"
  },
  {
    "text": "parameters so it's we kind of satisfying both ef",
    "start": "947440",
    "end": "952480"
  },
  {
    "text": "core and the consumers of my code i know that some developers prefer to have two",
    "start": "952480",
    "end": "958320"
  },
  {
    "text": "domain models like having a subscription domain model that have all of the business rules",
    "start": "958320",
    "end": "963360"
  },
  {
    "text": "and maybe another model to include anything relevant to ef4",
    "start": "963360",
    "end": "968480"
  },
  {
    "text": "in my experience working with basical business i find that over time it it's much easier to work",
    "start": "968480",
    "end": "975040"
  },
  {
    "text": "with those existing entities move behavior into them but again that depends on the code",
    "start": "975040",
    "end": "980639"
  },
  {
    "text": "base and if you are working with two domain models and having a lot of mapping that's up to you to decide but",
    "start": "980639",
    "end": "986880"
  },
  {
    "text": "in today's talk we'll be going through updating the existing entities of the domain model",
    "start": "986880",
    "end": "993279"
  },
  {
    "text": "so now let's run the tests",
    "start": "993920",
    "end": "997839"
  },
  {
    "text": "and the tests pass let's get back to our request handler to",
    "start": "1002399",
    "end": "1007600"
  },
  {
    "text": "see that method the second second code smell that i can see here is",
    "start": "1007600",
    "end": "1012639"
  },
  {
    "text": "there is that relationship between the subscriptions and the money spent so right now whenever as a developer i",
    "start": "1012639",
    "end": "1018959"
  },
  {
    "text": "modify the subscriptions i need to remember to update the money spent and that's not really a good thing",
    "start": "1018959",
    "end": "1025280"
  },
  {
    "text": "because it's usually the source of bugs because i might end up adding a subscription and not updating the",
    "start": "1025280",
    "end": "1031438"
  },
  {
    "text": "amounts of money spent i update the money spent and i forget to update subscription and so on and so forth so ideally",
    "start": "1031439",
    "end": "1039839"
  },
  {
    "text": "those properties should also be privately set and modified by behavior inside an entity",
    "start": "1039839",
    "end": "1045438"
  },
  {
    "text": "and if we read those three lines this is basically like adding a subscription to customer even the method name kind of",
    "start": "1045439",
    "end": "1051200"
  },
  {
    "text": "giving us this hint so we can basically move this whole behavior to be part of the customer",
    "start": "1051200",
    "end": "1056880"
  },
  {
    "text": "entity and we update those two properties to be privately set and they cannot be",
    "start": "1056880",
    "end": "1062559"
  },
  {
    "text": "modified outside the customer entity and this means that when we move that to be part of the",
    "start": "1062559",
    "end": "1068080"
  },
  {
    "text": "customer the consumers of my codepath will not have to remember they don't",
    "start": "1068080",
    "end": "1073840"
  },
  {
    "text": "need to remember that whenever i update a subscription i update the money spend they just want to call add subscription",
    "start": "1073840",
    "end": "1081840"
  },
  {
    "text": "so let's do that i will move this method by making it many static",
    "start": "1081840",
    "end": "1087840"
  },
  {
    "text": "and i will make it an instance method of the customer so now this method is part of the",
    "start": "1087840",
    "end": "1093520"
  },
  {
    "text": "customer i can rename it and remove that two customer suffix",
    "start": "1093520",
    "end": "1098930"
  },
  {
    "text": "[Music]",
    "start": "1098930",
    "end": "1102150"
  },
  {
    "text": "there we go so we have moved the behavior to be part of the customer this enables us to make the money spent",
    "start": "1105360",
    "end": "1113280"
  },
  {
    "text": "as a private property private set and we need to do the same",
    "start": "1113280",
    "end": "1120000"
  },
  {
    "text": "thing for subscription the only difference here is subscription is a list and to make the",
    "start": "1120000",
    "end": "1125360"
  },
  {
    "text": "subscription list exposed as a read only we need to we can use something like i read only collection which is a page",
    "start": "1125360",
    "end": "1131360"
  },
  {
    "text": "interface that the list class inherits from however the problem with that is the",
    "start": "1131360",
    "end": "1137039"
  },
  {
    "text": "consumers can easily cast back to an ex to a list and use all of the methods in that list",
    "start": "1137039",
    "end": "1144559"
  },
  {
    "text": "so in order to properly expose an immutable subscriptions list what we are going to do is we will use a private",
    "start": "1144559",
    "end": "1150480"
  },
  {
    "text": "packing field for this property so we'll introduce a packing field and",
    "start": "1150480",
    "end": "1158080"
  },
  {
    "text": "i'll just move that field closer to the property",
    "start": "1158080",
    "end": "1163200"
  },
  {
    "text": "i will update my behavior inside the customer class to use that private packing field",
    "start": "1163200",
    "end": "1170240"
  },
  {
    "text": "i don't need that setter because we are going to make it a read only so i'll remove that setter and we can",
    "start": "1170240",
    "end": "1176080"
  },
  {
    "text": "move this to be expression body and now we have that private backing field",
    "start": "1176080",
    "end": "1182160"
  },
  {
    "text": "i can modify this property to be i read only collection",
    "start": "1182160",
    "end": "1189360"
  },
  {
    "text": "still nothing is stopping me from a consumer perspective to do something like customer after i",
    "start": "1191360",
    "end": "1197919"
  },
  {
    "text": "add a subscription i can go and say customer dot subscriptions",
    "start": "1197919",
    "end": "1203440"
  },
  {
    "text": "very smart so we can go and cast as list of subscription and when i do this",
    "start": "1203760",
    "end": "1211840"
  },
  {
    "text": "i can call it clear right nothing is stopping me from doing something like we shouldn't but you know we",
    "start": "1211840",
    "end": "1219039"
  },
  {
    "text": "nothing stopping us from doing it and it's pretty easy to cover that scenario as well by going here and using the as read-only",
    "start": "1219039",
    "end": "1226000"
  },
  {
    "text": "method so even though the compiler will not complain immediately in the runtime if we run the",
    "start": "1226000",
    "end": "1232799"
  },
  {
    "text": "tests or if we run this code we will get a runtime exception",
    "start": "1232799",
    "end": "1238480"
  },
  {
    "text": "so it's pretty easy to cover the scenario by using the as read only as part of my method",
    "start": "1238640",
    "end": "1245280"
  },
  {
    "text": "let's get back to the slides to see what we have done so far and then we will see what other good smells we can have",
    "start": "1245280",
    "end": "1253039"
  },
  {
    "text": "the first thing that we have done is minimize the cognitive load required from us as developers by breaking that",
    "start": "1254640",
    "end": "1260240"
  },
  {
    "start": "1256000",
    "end": "1256000"
  },
  {
    "text": "long method into smaller ones which provided us with the three methods that we have worked with which is",
    "start": "1260240",
    "end": "1265840"
  },
  {
    "text": "calculate the subscription amount current period indeed and add the subscription to customer",
    "start": "1265840",
    "end": "1271520"
  },
  {
    "text": "we started looking at the method add subscription to customer and that enabled us to start avoiding",
    "start": "1271520",
    "end": "1278000"
  },
  {
    "start": "1276000",
    "end": "1276000"
  },
  {
    "text": "the public sectors when we are creating a new subscription entity and we moved to a parameterized",
    "start": "1278000",
    "end": "1285679"
  },
  {
    "text": "constructor which enabled that to add validation we added the default value for the status",
    "start": "1285679",
    "end": "1290960"
  },
  {
    "text": "as well we have moved all of our properties to be privately set",
    "start": "1290960",
    "end": "1297120"
  },
  {
    "text": "next we have pushed the behavior of adding subscription to be part of the customer",
    "start": "1297600",
    "end": "1303200"
  },
  {
    "start": "1300000",
    "end": "1300000"
  },
  {
    "text": "so this tells us that usually in those legacy code bases that the behavior exists but it might not be part of the domain",
    "start": "1303200",
    "end": "1309520"
  },
  {
    "text": "model in our case it existed in the request handler in other legacy code bases it could be",
    "start": "1309520",
    "end": "1314559"
  },
  {
    "text": "part of a domain server a domain service is a valid point i should say just a service or a utility",
    "start": "1314559",
    "end": "1321039"
  },
  {
    "text": "uh or sometimes an extension method so usually when you have those kind of anemic domain model the behavior exists",
    "start": "1321039",
    "end": "1328640"
  },
  {
    "text": "but we just need to move it to the domain model which is the right spot for it",
    "start": "1328640",
    "end": "1334080"
  },
  {
    "text": "we have updated our subscription and management to be privately set so the money spent we use the private set for",
    "start": "1334080",
    "end": "1340640"
  },
  {
    "text": "the property and we use a private packing field for the subscription list made it immutable by exposing it via i",
    "start": "1340640",
    "end": "1347679"
  },
  {
    "text": "read only collection and to avoid any runtime casting back to a list we",
    "start": "1347679",
    "end": "1352880"
  },
  {
    "text": "used as read only here which will throw an exception for any consumer",
    "start": "1352880",
    "end": "1358960"
  },
  {
    "text": "let's get back to the code and look into the next method that we have extracted and how can we improve it",
    "start": "1359679",
    "end": "1366399"
  },
  {
    "text": "the next method here is calculate the current period indeed and this method is interesting because",
    "start": "1368480",
    "end": "1373520"
  },
  {
    "text": "it's a static method that accepts a single parameter and all of the code that exists in that",
    "start": "1373520",
    "end": "1379120"
  },
  {
    "text": "method depends only on that past parameter this is usually a smell that tells me",
    "start": "1379120",
    "end": "1384480"
  },
  {
    "text": "that this whole behavior should be an innocence method of that particular clause",
    "start": "1384480",
    "end": "1389520"
  },
  {
    "text": "especially it's a domain model it's the male model entity that exists so what i would do right now is i would",
    "start": "1389520",
    "end": "1396400"
  },
  {
    "text": "refactor this method and we will make it an instance method of the product",
    "start": "1396400",
    "end": "1401600"
  },
  {
    "text": "so we're kind of pushing more behavior towards my domain model",
    "start": "1401600",
    "end": "1406400"
  },
  {
    "text": "now opening the product class we can see here our instance method",
    "start": "1406640",
    "end": "1413679"
  },
  {
    "text": "one thing to keep in mind this method have a switch statement over a c-sharp enumerator which is the filling period",
    "start": "1413679",
    "end": "1421760"
  },
  {
    "text": "in our case we only have a single touch point where we have that's with switch statement however in a lot of the",
    "start": "1421760",
    "end": "1427600"
  },
  {
    "text": "legacy code pages you might find there are heaps of touch points in your code base that have that switches",
    "start": "1427600",
    "end": "1433600"
  },
  {
    "text": "statement or if else condition on an enumerator and that usually makes it harder if you",
    "start": "1433600",
    "end": "1439520"
  },
  {
    "text": "would like to introduce another value in my enumerator if i would like to introduce quarterly or yearly",
    "start": "1439520",
    "end": "1445279"
  },
  {
    "text": "i need to go and find all of those such points and update them usually when when you find such pattern",
    "start": "1445279",
    "end": "1452000"
  },
  {
    "text": "in or smell in your code you should you should refactor from a c-sharp enumerator into",
    "start": "1452000",
    "end": "1457440"
  },
  {
    "text": "enumeration classes we will not cover that today because we only have a single touch point so it would be over",
    "start": "1457440",
    "end": "1463679"
  },
  {
    "text": "complication but it's just something that you need to keep in mind when you work with",
    "start": "1463679",
    "end": "1468880"
  },
  {
    "text": "legacy code bases that have a lot of switch statements over enumerator",
    "start": "1468880",
    "end": "1474960"
  },
  {
    "text": "so as you can see with this change we have more behavior pushed into our domain model and we should run the tests because i",
    "start": "1474960",
    "end": "1481360"
  },
  {
    "text": "forgot to run it in the last refactoring sorry for that",
    "start": "1481360",
    "end": "1487279"
  },
  {
    "text": "here we go the tests are still passing let's get back to the code and see what",
    "start": "1487279",
    "end": "1493760"
  },
  {
    "text": "we have right now the third method that we have extracted this method is also static and it",
    "start": "1493760",
    "end": "1499360"
  },
  {
    "text": "accepts two parameters both of them are entities in my domain model",
    "start": "1499360",
    "end": "1504880"
  },
  {
    "text": "however the logic here of calculating subscription amounts might not really belong to one of them",
    "start": "1504880",
    "end": "1510240"
  },
  {
    "text": "because i need both entities and the values from both entities to calculate the outcome",
    "start": "1510240",
    "end": "1515360"
  },
  {
    "text": "and this is usually an indication that we should use a domain service which is basically a service that can",
    "start": "1515360",
    "end": "1522080"
  },
  {
    "text": "hold a business logic when we have a logic that cannot really fit into a single entity in my domain",
    "start": "1522080",
    "end": "1529039"
  },
  {
    "text": "and that's what we are going to do right now we create a domain service we will call it subscription amount calculator",
    "start": "1529039",
    "end": "1542799"
  },
  {
    "text": "and i will move this method that we have here to that domain service",
    "start": "1542799",
    "end": "1557360"
  },
  {
    "text": "so as we can see with this refactoring we have uh the method become a static method of the",
    "start": "1557360",
    "end": "1562559"
  },
  {
    "text": "calculator i'll just run the test to make sure that nothing is broken another thing that usually find with",
    "start": "1562559",
    "end": "1569679"
  },
  {
    "text": "those services is i would like to still have my unit tests to be able to market the domain service",
    "start": "1569679",
    "end": "1577360"
  },
  {
    "text": "so i can test different paths or different outcomes from the domain service that can be easily achieved by",
    "start": "1577360",
    "end": "1583840"
  },
  {
    "text": "introducing a base interface for my domain service so i'll create the interface here it",
    "start": "1583840",
    "end": "1590960"
  },
  {
    "text": "writers do that for me and then i will update the method and make it manistatic",
    "start": "1590960",
    "end": "1596400"
  },
  {
    "text": "and will pull this member up so it will just add that method to the",
    "start": "1596400",
    "end": "1603120"
  },
  {
    "text": "interface so we have here we have the interface with the calculate subscription amount",
    "start": "1603120",
    "end": "1609278"
  },
  {
    "text": "then in my code a request handler obviously i need to inject that interface",
    "start": "1610799",
    "end": "1616080"
  },
  {
    "text": "via my constructor",
    "start": "1616080",
    "end": "1619278"
  },
  {
    "text": "i will introduce a field and then i will use that field to call the method rather",
    "start": "1624320",
    "end": "1629760"
  },
  {
    "text": "than calling the static method that we used to have",
    "start": "1629760",
    "end": "1634799"
  },
  {
    "text": "so this enables me to register that page interface into my di container and resolve it from the i",
    "start": "1634799",
    "end": "1641679"
  },
  {
    "text": "container and it also enables me in my test to mock the behavior and test different paths in",
    "start": "1641679",
    "end": "1648559"
  },
  {
    "text": "my code base speaking of test let's fix that and introduce the parameter that we just",
    "start": "1648559",
    "end": "1654320"
  },
  {
    "text": "introduced into the request handler and since it's an integration test i will just use the actual",
    "start": "1654320",
    "end": "1660559"
  },
  {
    "text": "method so i will pause the concrete implementation of the interface",
    "start": "1660559",
    "end": "1666398"
  },
  {
    "text": "running the tests",
    "start": "1667200",
    "end": "1670000"
  },
  {
    "text": "so far so good so as you can see all of the three methods that we have extracted so far",
    "start": "1673360",
    "end": "1680720"
  },
  {
    "text": "will actually belonging to different parts of my domain and what we have done is step by step",
    "start": "1680720",
    "end": "1687679"
  },
  {
    "text": "finding the code smells pushing the code towards the domain model so my domain model right now have more",
    "start": "1687679",
    "end": "1693600"
  },
  {
    "text": "behavior into it so it becomes more data and behavior as we would like it to be",
    "start": "1693600",
    "end": "1699760"
  },
  {
    "text": "let's review this request handler we can see here we have two lines the last two methods that",
    "start": "1700240",
    "end": "1705600"
  },
  {
    "text": "we're working on calculate the subscription amount and then calculating the current period",
    "start": "1705600",
    "end": "1710880"
  },
  {
    "text": "indeed we are using the outcome of those methods and pathing to add subscription",
    "start": "1710880",
    "end": "1716240"
  },
  {
    "text": "however there's something interesting with those two lines the first line here of calculating the current period in date",
    "start": "1716240",
    "end": "1721760"
  },
  {
    "text": "is just calling a method of the product passing the outcome to another method that accepts the product as a parameter",
    "start": "1721760",
    "end": "1729200"
  },
  {
    "text": "so this usually tells me that i can push this line of code to be part of the add subscription",
    "start": "1729200",
    "end": "1735200"
  },
  {
    "text": "so let's do that first i will unline the variable so the call of the method becomes part of the call of the ad subscription",
    "start": "1735200",
    "end": "1742799"
  },
  {
    "text": "then in the ad subscription i will just directly call instead of",
    "start": "1742799",
    "end": "1749039"
  },
  {
    "text": "calling the method here or using the parameter path i will just do it as part of the whole",
    "start": "1749039",
    "end": "1755760"
  },
  {
    "text": "to the constructor of the subscription this means that this parameter is no longer required i can safely remove it",
    "start": "1755760",
    "end": "1763840"
  },
  {
    "text": "again looking at that line of code of the subscription i can see that i'm passing the outcome of that",
    "start": "1763840",
    "end": "1770000"
  },
  {
    "text": "calculate current period and date to the subscription constructor which is also accepting the product as a parameter so i can do the same thing",
    "start": "1770000",
    "end": "1776799"
  },
  {
    "text": "which is adding or calling this method directly in the constructor which means",
    "start": "1776799",
    "end": "1782480"
  },
  {
    "text": "that parameter is useless and i can remove it safely so as you can see the code is driving",
    "start": "1782480",
    "end": "1789039"
  },
  {
    "text": "how can i move the behavior towards which part of the domain model and now",
    "start": "1789039",
    "end": "1794399"
  },
  {
    "text": "removing that parameter means in order to create a subscription entity list parameter is required",
    "start": "1794399",
    "end": "1801840"
  },
  {
    "text": "so it makes the code more easier to maintain let's run the tests",
    "start": "1802000",
    "end": "1809840"
  },
  {
    "text": "pistons are possible the second line here that we talked about is slightly complicated because it",
    "start": "1815120",
    "end": "1821200"
  },
  {
    "text": "depends on that domain service that we are resolving from the di container",
    "start": "1821200",
    "end": "1827360"
  },
  {
    "text": "so but still it accepts product and customer and i have the product as well as the customer as part of my ad subscription",
    "start": "1827919",
    "end": "1834840"
  },
  {
    "text": "method so in order to push that behavior to be part of the domain model while maintaining that capability of",
    "start": "1834840",
    "end": "1841679"
  },
  {
    "text": "resolving that the interface via the di container which also enables me to smoke different behaviors or different",
    "start": "1841679",
    "end": "1848720"
  },
  {
    "text": "outcomes of the calculate method i can use the double dispatch pattern",
    "start": "1848720",
    "end": "1854000"
  },
  {
    "text": "the double dispatch pattern enables me to instead of passing the outcome of the",
    "start": "1854000",
    "end": "1859919"
  },
  {
    "text": "domain service i will pass the domain service itself as a parameter to my method here so i will",
    "start": "1859919",
    "end": "1868000"
  },
  {
    "text": "just align this variable so when we delete the parameter it just becomes easy and then",
    "start": "1868000",
    "end": "1874480"
  },
  {
    "text": "i will pause the calculator itself as an additional parameter",
    "start": "1874480",
    "end": "1879840"
  },
  {
    "text": "i will use add parameter and then go into that add subscription method i have the calculator",
    "start": "1880000",
    "end": "1885760"
  },
  {
    "text": "so instead of passing the subscription amount i'm gonna go and call calculate subscription amount",
    "start": "1885760",
    "end": "1893840"
  },
  {
    "text": "this accepts two parameters the product which i have and then it needs the customer",
    "start": "1894480",
    "end": "1899760"
  },
  {
    "text": "and the customer is basically my class so i can just use this with that that subscription amount",
    "start": "1899760",
    "end": "1906000"
  },
  {
    "text": "parameter is no longer required and calling the domain server method",
    "start": "1906000",
    "end": "1911519"
  },
  {
    "text": "becomes part of my domain model and i still can resolve that domain service via the di container and",
    "start": "1911519",
    "end": "1918080"
  },
  {
    "text": "inject it to my request hand so as you can see with these refactorings",
    "start": "1918080",
    "end": "1925120"
  },
  {
    "text": "my request handler is much much smaller right now so this tells me that all of the behavior that existed in here",
    "start": "1925120",
    "end": "1931919"
  },
  {
    "text": "previously should have been part of the domain model and in a lot of legacy code bases",
    "start": "1931919",
    "end": "1937279"
  },
  {
    "text": "that's usually the case that behavior exists either in the controller or a service or a request handlers like what we have",
    "start": "1937279",
    "end": "1944159"
  },
  {
    "text": "seen here let's get back to the slides to see the refactorings that we have done so far",
    "start": "1944159",
    "end": "1951440"
  },
  {
    "text": "with the calculate the current period end date we move the behavior to be part of the product entity",
    "start": "1951440",
    "end": "1958240"
  },
  {
    "text": "with the domain behavior of calculating subscription amount we introduced the domain service to encapsulate that logic",
    "start": "1958240",
    "end": "1964720"
  },
  {
    "start": "1959000",
    "end": "1959000"
  },
  {
    "text": "because the logic didn't really fit into a single entity we have also used the double dispatch",
    "start": "1964720",
    "end": "1970960"
  },
  {
    "text": "pattern to pass the domain service to my domain model which also enables me to still",
    "start": "1970960",
    "end": "1976480"
  },
  {
    "start": "1971000",
    "end": "1971000"
  },
  {
    "text": "inject that interface via the di container into my request header",
    "start": "1976480",
    "end": "1982559"
  },
  {
    "text": "let's get back to the code the last line of the code here is sending the email and usually in",
    "start": "1983600",
    "end": "1990000"
  },
  {
    "text": "legacy code pages or even in any copies you can you can find bunch of side effects that happen",
    "start": "1990000",
    "end": "1995120"
  },
  {
    "text": "because a customer subscribed to a product or something that has happened in my domain",
    "start": "1995120",
    "end": "2001440"
  },
  {
    "text": "and it's an application level responsibility it's not part of my domain model to send an email",
    "start": "2001440",
    "end": "2006960"
  },
  {
    "text": "so what should i do with those code how can i make my code open for extension because if i would",
    "start": "2006960",
    "end": "2012720"
  },
  {
    "text": "like to add another behavior like sending an sms i need to add a few lines of code here",
    "start": "2012720",
    "end": "2018559"
  },
  {
    "text": "to send an sns if i want to let's say at a record of audit entry or something again i need to have another line of",
    "start": "2018559",
    "end": "2025840"
  },
  {
    "text": "code here and so on and so forth the solution to that is to start introducing the domain",
    "start": "2025840",
    "end": "2032000"
  },
  {
    "text": "events and having domain event handler domain events usually used to represent",
    "start": "2032000",
    "end": "2037600"
  },
  {
    "text": "the intent that something has happened in the domain",
    "start": "2037600",
    "end": "2042240"
  },
  {
    "text": "and we don't care who is interested in listening to those domain events as a domain model we just need to raise",
    "start": "2042880",
    "end": "2049839"
  },
  {
    "text": "that domain event and then we have bunch of event handlers that listens to that domain event",
    "start": "2049839",
    "end": "2056480"
  },
  {
    "text": "so if i would like to have a send the email functionality i will have a an email sender handler that will listen",
    "start": "2056480",
    "end": "2063280"
  },
  {
    "text": "to the domain event send an email if i would like to extend the functionality by adding another",
    "start": "2063280",
    "end": "2068560"
  },
  {
    "text": "behavior i can just add another event handler for the sms",
    "start": "2068560",
    "end": "2074240"
  },
  {
    "text": "another event handler to do something else and so on to introduce the domain events into my",
    "start": "2074240",
    "end": "2080158"
  },
  {
    "text": "code base we will do few steps uh it's a little bit involved so i will cover that by the slides first",
    "start": "2080159",
    "end": "2086320"
  },
  {
    "text": "and then we'll see how we applied in the code first we will update our entity so",
    "start": "2086320",
    "end": "2092079"
  },
  {
    "text": "whenever a behavior is called like a customer subscribing to a product we will add a domain event we will raise",
    "start": "2092079",
    "end": "2098560"
  },
  {
    "text": "the domain event so in our entity or each entity in my domain we'll have a list of domain",
    "start": "2098560",
    "end": "2104880"
  },
  {
    "text": "events we'll do this by updating our page base class to include a list of domain events",
    "start": "2104880",
    "end": "2111440"
  },
  {
    "text": "and because any change that happen in my domain usually needs a save to a save to the changes to the",
    "start": "2111440",
    "end": "2116880"
  },
  {
    "text": "database so this mean since we are using ef core we will be calling the save changes",
    "start": "2116880",
    "end": "2122160"
  },
  {
    "text": "right so what we can do is we can use the af core 5",
    "start": "2122160",
    "end": "2127680"
  },
  {
    "text": "save changes interceptor to listen to that call of save changes and that will be kind of the domain",
    "start": "2127680",
    "end": "2134160"
  },
  {
    "text": "event dispatcher that will use the change tracker functionality from efcor to publish the domain events that exist",
    "start": "2134160",
    "end": "2142000"
  },
  {
    "text": "in the entities we'll be using the publish method from mediator which enables us to have that pops up",
    "start": "2142000",
    "end": "2148400"
  },
  {
    "text": "mechanism even though it's in memory but it provides us with that pops up so i can have multiple event handlers",
    "start": "2148400",
    "end": "2154960"
  },
  {
    "text": "for the same event that's what we're gonna do so let's switch back to the code first",
    "start": "2154960",
    "end": "2163200"
  },
  {
    "text": "we need to introduce page interface where all my domain events inherit from",
    "start": "2163200",
    "end": "2173838"
  },
  {
    "text": "since my domain events will be published to mediator i will use i will make this inherit from i",
    "start": "2175119",
    "end": "2180400"
  },
  {
    "text": "notification i can immediately make my domain events inherit from i notification but i think",
    "start": "2180400",
    "end": "2186240"
  },
  {
    "text": "that using that marker interface makes it a little bit clearer",
    "start": "2186240",
    "end": "2191759"
  },
  {
    "text": "since we said we want to maintain list of domain events in the entity i will update the page entity",
    "start": "2193200",
    "end": "2201839"
  },
  {
    "text": "to maintain a list of domain events and similar to what we have done with the list of subscriptions in the customer we",
    "start": "2202800",
    "end": "2208320"
  },
  {
    "text": "are exposing this via an immutable list and you can modify the behavior of those who just add or update via",
    "start": "2208320",
    "end": "2215920"
  },
  {
    "text": "methods in that entity now we have that page interface and the",
    "start": "2215920",
    "end": "2222240"
  },
  {
    "text": "page entity include a list of domain events let's introduce our first domain event which is a customer subscribe to a",
    "start": "2222240",
    "end": "2227920"
  },
  {
    "text": "product",
    "start": "2227920",
    "end": "2230319"
  },
  {
    "text": "and as you can see i'm using the past tense in my domain event and this is usually how you describe",
    "start": "2238560",
    "end": "2243920"
  },
  {
    "text": "your domain events it usually want to describe something that has happened in the past",
    "start": "2243920",
    "end": "2250000"
  },
  {
    "text": "i i have a good snippet with the domain event and how the handler would look like so we don't",
    "start": "2251119",
    "end": "2256720"
  },
  {
    "text": "write all of that",
    "start": "2256720",
    "end": "2259520"
  },
  {
    "text": "import the references so my domain event just inherits from i domain event has two properties customer id product",
    "start": "2264960",
    "end": "2272240"
  },
  {
    "text": "id and then i have a customer subscribe to a product handler in this case it just send an email so i",
    "start": "2272240",
    "end": "2278880"
  },
  {
    "text": "kind of moved the behavior of email sender from the request handler to be part of",
    "start": "2278880",
    "end": "2284160"
  },
  {
    "text": "the event handler so this mean i can update my request",
    "start": "2284160",
    "end": "2289440"
  },
  {
    "text": "handler to remove that logic because that will be triggered by the event handler as we",
    "start": "2289440",
    "end": "2294640"
  },
  {
    "text": "will see in a minute i'll just remove this line of code and i no longer need this parameter",
    "start": "2294640",
    "end": "2303599"
  },
  {
    "text": "and no longer need this field as well because i have moved that logic to be",
    "start": "2303599",
    "end": "2309040"
  },
  {
    "text": "part of my event handler so right now we have an event we have an",
    "start": "2309040",
    "end": "2314800"
  },
  {
    "text": "event handler we need to update our entity so whenever a customer subscribed to a product we",
    "start": "2314800",
    "end": "2320960"
  },
  {
    "text": "need to raise that domain event by calling the add domain event method",
    "start": "2320960",
    "end": "2326000"
  },
  {
    "text": "so each time we add a subscription we update the list of domain events that exist in my entity so far",
    "start": "2326000",
    "end": "2333839"
  },
  {
    "text": "we have an domain events in my entity and we have event handler that can handle that event whenever it's raised the last",
    "start": "2333839",
    "end": "2341040"
  },
  {
    "text": "piece is blowing those together using the save the changes interceptor from ef core",
    "start": "2341040",
    "end": "2347200"
  },
  {
    "text": "i have that behavior here as well instead of writing it i'll just uncomment and we'll read it together",
    "start": "2347200",
    "end": "2355839"
  },
  {
    "text": "so this is my domain event dispatcher which is listening to the save it changes saving the changes",
    "start": "2356400",
    "end": "2362880"
  },
  {
    "text": "so this means that the events that we are publishing will be published before",
    "start": "2362880",
    "end": "2368240"
  },
  {
    "text": "the entities have been saved into the database",
    "start": "2368240",
    "end": "2372560"
  },
  {
    "text": "and that might raise concerns because what if i sent the email and failed to save the data into the database because",
    "start": "2373760",
    "end": "2380160"
  },
  {
    "text": "of some network issue usually after i use this pattern i",
    "start": "2380160",
    "end": "2388079"
  },
  {
    "text": "apply another pattern to improve the resiliency of publishing the domain events which is called store and forward",
    "start": "2388079",
    "end": "2393359"
  },
  {
    "text": "or outbox pattern we will not cover that today but i highly recommend looking into that",
    "start": "2393359",
    "end": "2399119"
  },
  {
    "text": "pattern because it will definitely improve the way you publish the main events and it will improve the resiliency of that",
    "start": "2399119",
    "end": "2404480"
  },
  {
    "text": "so you don't have that concern around did i save the events and for or do they publish the events",
    "start": "2404480",
    "end": "2409680"
  },
  {
    "text": "and failed to save the entities in the database",
    "start": "2409680",
    "end": "2414560"
  },
  {
    "text": "so in our case we are using just in memory pops up so our we use the change tracker",
    "start": "2415119",
    "end": "2420880"
  },
  {
    "text": "to find all of the entries in the changes tracker with domain events loop over the domain events and",
    "start": "2420880",
    "end": "2426319"
  },
  {
    "text": "publish them to mediator mediator will find all of the event handlers",
    "start": "2426319",
    "end": "2431760"
  },
  {
    "text": "and will send them that particular event running the tests obviously i don't have",
    "start": "2431760",
    "end": "2438800"
  },
  {
    "text": "tests in this code base right now for the domain event dispatcher or for the event handlers that we have introduced",
    "start": "2438800",
    "end": "2444720"
  },
  {
    "text": "but ideally as you refactor your code bait you should update your your tests either they are integration",
    "start": "2444720",
    "end": "2450480"
  },
  {
    "text": "or unit based on what you are working on so with that we can see that",
    "start": "2450480",
    "end": "2456000"
  },
  {
    "text": "our code is right now with the request handler it's pretty straightforward loading data",
    "start": "2456000",
    "end": "2461119"
  },
  {
    "text": "from the database calling a behavior in my domain model saving that savings",
    "start": "2461119",
    "end": "2467440"
  },
  {
    "text": "one last thing that i want to cover with that saving the changes interceptor how would you register that in the gi",
    "start": "2467440",
    "end": "2473599"
  },
  {
    "text": "container because my domain event dispatcher have another dependency that we would like to",
    "start": "2473599",
    "end": "2479920"
  },
  {
    "text": "resolve in the runtime from the di container which is imediator what i want to do here in the startup i",
    "start": "2479920",
    "end": "2486480"
  },
  {
    "text": "need to register the domain event dispatcher as a scope because this matches my db context",
    "start": "2486480",
    "end": "2491680"
  },
  {
    "text": "and then when i'm adding the dbcontext there is an overload here that accepts a service provider",
    "start": "2491680",
    "end": "2497599"
  },
  {
    "text": "which means i can easily go and say serviceprovider.getservice and this will enable me to resolve the",
    "start": "2497599",
    "end": "2503920"
  },
  {
    "text": "domain even dispatcher from the di container which will also resolve any dependencies for my domain event dispatch",
    "start": "2503920",
    "end": "2512160"
  },
  {
    "text": "so that's what that's how can we introduce the domain events in my domain in my model",
    "start": "2513920",
    "end": "2520000"
  },
  {
    "text": "let's get back to the slides so as we said we had an entity whenever",
    "start": "2521119",
    "end": "2527839"
  },
  {
    "start": "2523000",
    "end": "2523000"
  },
  {
    "text": "a behavior happens to the entity we raise the domain event listen to that save the changes from db context",
    "start": "2527839",
    "end": "2533520"
  },
  {
    "text": "use the save it changes interceptor to publish the domain events by a mediator and we could have multiple event handlers for my domain",
    "start": "2533520",
    "end": "2540560"
  },
  {
    "text": "event as we have seen so far all of the triggers for the refactoring is the code",
    "start": "2540560",
    "end": "2546240"
  },
  {
    "text": "and that's really good because all of the code smells have been driving those refactorings and we are pushing more",
    "start": "2546240",
    "end": "2551920"
  },
  {
    "text": "behavior into my domain model but that's not the only reason or the only trigger that i would have",
    "start": "2551920",
    "end": "2558800"
  },
  {
    "text": "refactoring in my code base when we work in a domain driven design you usually have a lot of conversations with business",
    "start": "2558800",
    "end": "2565200"
  },
  {
    "text": "experts and one of the key concepts with domain driven design is using ubiquitous language so",
    "start": "2565200",
    "end": "2570880"
  },
  {
    "text": "both developers and business experts or domain experts use the same language and it's not only",
    "start": "2570880",
    "end": "2576960"
  },
  {
    "text": "in conversation my code should also show those behaviors or you show the same language as well so a very",
    "start": "2576960",
    "end": "2584880"
  },
  {
    "text": "simple example is when we talk with business experts they keep using the word customer name",
    "start": "2584880",
    "end": "2591119"
  },
  {
    "text": "like i would like to send an email to the customer with the customer name and that particular content or i would",
    "start": "2591119",
    "end": "2597359"
  },
  {
    "text": "like to have a report and i would like to show the customer name and the amount of money spent for that customer and they never use",
    "start": "2597359",
    "end": "2603599"
  },
  {
    "text": "that customer first name last name however if we look at our code we will",
    "start": "2603599",
    "end": "2609280"
  },
  {
    "text": "find that our code is just all about first name last name and this might be a good trigger to",
    "start": "2609280",
    "end": "2615680"
  },
  {
    "text": "start updating my domain model to use the same language used by the business experts",
    "start": "2615680",
    "end": "2621520"
  },
  {
    "text": "so in this case we can use something like value objects value objects provides us with that",
    "start": "2621520",
    "end": "2627200"
  },
  {
    "text": "capability where we have two objects can be equivalent when they have the same value without being the same",
    "start": "2627200",
    "end": "2634000"
  },
  {
    "text": "object so if i have two instances of the customer name if both instances have the same value",
    "start": "2634000",
    "end": "2640880"
  },
  {
    "text": "for the first name and last name those instances will be equal even though they are not the same object",
    "start": "2640880",
    "end": "2647680"
  },
  {
    "text": "thinking about that with the c-sharp 9 this is pretty much the records in c sharp 9. and that's",
    "start": "2647680",
    "end": "2653280"
  },
  {
    "text": "what we're gonna do right now we'll just introduce a record to represent the customer name",
    "start": "2653280",
    "end": "2662240"
  },
  {
    "text": "so here is our customer name record then i will update my customer class to",
    "start": "2662240",
    "end": "2667760"
  },
  {
    "text": "use that customer name customer name can also be used in a parameterized constructor",
    "start": "2667760",
    "end": "2673520"
  },
  {
    "text": "and i can make it with a private set so i will just update my properties",
    "start": "2673520",
    "end": "2678640"
  },
  {
    "text": "similar to what we have done with the subscription entity",
    "start": "2678640",
    "end": "2682880"
  },
  {
    "text": "so here we go we have a private constructor to be used by af core when loading entities from the database",
    "start": "2683839",
    "end": "2690400"
  },
  {
    "text": "we have a parameterized constructor to be used by developers consuming the domain model and we have the validations here while",
    "start": "2690400",
    "end": "2696800"
  },
  {
    "text": "we are creating the customer entity i have also made the customer name private wizard",
    "start": "2696800",
    "end": "2702480"
  },
  {
    "text": "the next thing that we need to think about with that customer name recorded change is how can i save that customer name into",
    "start": "2702480",
    "end": "2709760"
  },
  {
    "text": "the database with ef code if call provides that concept that's called owned empties",
    "start": "2709760",
    "end": "2715520"
  },
  {
    "text": "which enables us to map those value objects into the same columns that we used to have in the previous",
    "start": "2715520",
    "end": "2722400"
  },
  {
    "text": "sample with the code base of property of customer name and last name",
    "start": "2722400",
    "end": "2727760"
  },
  {
    "text": "so on the entities we just use owns one and then we map the property first name",
    "start": "2728640",
    "end": "2733760"
  },
  {
    "text": "to the column first name and last name to the last name",
    "start": "2733760",
    "end": "2738160"
  },
  {
    "text": "one of the important things to keep in mind when you work with only entities is the default convention it uses a",
    "start": "2738800",
    "end": "2746160"
  },
  {
    "text": "customer name underscore first name excuse me or customer name underscore last name so",
    "start": "2746160",
    "end": "2752400"
  },
  {
    "text": "we have to be explicit with which column we are saving the properties to",
    "start": "2752400",
    "end": "2760640"
  },
  {
    "text": "the second thing that you need to keep in mind is you need to keep an eye on the generated sql statements when you use on the entities and make",
    "start": "2760640",
    "end": "2767920"
  },
  {
    "text": "sure that it's generating the right sql statement because you don't want to end up with performance issues because you use the wrong",
    "start": "2767920",
    "end": "2773920"
  },
  {
    "text": "configurations with that let's update the customer name",
    "start": "2773920",
    "end": "2781040"
  },
  {
    "text": "to be used here in my code to pass the customer name instance let's run the test to make sure",
    "start": "2781040",
    "end": "2788400"
  },
  {
    "text": "that everything is working as expected",
    "start": "2788400",
    "end": "2792240"
  },
  {
    "text": "cool now we have the customer name let's get back to the slide to see what we have done we have moved away from the primitive",
    "start": "2795680",
    "end": "2802240"
  },
  {
    "start": "2802000",
    "end": "2802000"
  },
  {
    "text": "obsession of using string for the first name string for the last name and move towards",
    "start": "2802240",
    "end": "2807440"
  },
  {
    "text": "value objects which enabled us to use the same ubiquitous language that our business experts are using",
    "start": "2807440",
    "end": "2813200"
  },
  {
    "text": "which also enabled us to have that c sharp record to represent our value object we",
    "start": "2813200",
    "end": "2819520"
  },
  {
    "text": "used the on the entities to map our properties to the same columns that we used to have previously",
    "start": "2819520",
    "end": "2825680"
  },
  {
    "text": "one of the things that i want i will mention here with af core 5 is that navigation that is required this",
    "start": "2825680",
    "end": "2830960"
  },
  {
    "text": "is really a cool addition in af core 5 which enables us to have a clear",
    "start": "2830960",
    "end": "2836079"
  },
  {
    "text": "definition that if some of the columns that we are working with are required or mandatory on the database level we",
    "start": "2836079",
    "end": "2842960"
  },
  {
    "text": "can use the is required property and when we run the ef core to generate the migrations if you are using",
    "start": "2842960",
    "end": "2848960"
  },
  {
    "text": "af core migrations those migrations will be generated correctly previously with af core 3.1",
    "start": "2848960",
    "end": "2854480"
  },
  {
    "text": "there was issues that all the entities were always assumed to be nullable which was generating bunch of migrations",
    "start": "2854480",
    "end": "2861440"
  },
  {
    "text": "that are not matching what we want to have if we have required columns",
    "start": "2861440",
    "end": "2867119"
  },
  {
    "text": "the next thing that i would like to talk about is the repository in a lot of legacy code bases you might",
    "start": "2867760",
    "end": "2872960"
  },
  {
    "start": "2870000",
    "end": "2870000"
  },
  {
    "text": "find repositories repositories in general are okay it's a good pattern",
    "start": "2872960",
    "end": "2878240"
  },
  {
    "text": "however with a lot of the legacy code pages i usually find two key issues the first one is the massive amount of",
    "start": "2878240",
    "end": "2883839"
  },
  {
    "text": "methods that exist in a repository line get customer by first name give customer by last name discussion by first name",
    "start": "2883839",
    "end": "2889920"
  },
  {
    "text": "email and last name and so on and the second parameter is or the",
    "start": "2889920",
    "end": "2895200"
  },
  {
    "text": "second concern is that something like that saved method which is calling context.save changes",
    "start": "2895200",
    "end": "2902160"
  },
  {
    "text": "context to save the changes since all of the entity related all of the entities not just the entity",
    "start": "2902160",
    "end": "2907920"
  },
  {
    "text": "of the customer to the database so if i have a little bit of a complex behavior that uses",
    "start": "2907920",
    "end": "2913440"
  },
  {
    "text": "multiple repositories and i call the save method from different repositories i might end up with all",
    "start": "2913440",
    "end": "2919599"
  },
  {
    "text": "sorts of errors because i saved in the wrong timing or data inconsistencies and it usually becomes pretty messy very",
    "start": "2919599",
    "end": "2927119"
  },
  {
    "text": "quickly so what i have seen as pattern is to",
    "start": "2927119",
    "end": "2932480"
  },
  {
    "text": "solve that save method is using the unit of work the unit of work is a solution for that",
    "start": "2932480",
    "end": "2938480"
  },
  {
    "start": "2935000",
    "end": "2935000"
  },
  {
    "text": "issue because we no longer have that same method as part of the repository it just becomes part of the unit of work",
    "start": "2938480",
    "end": "2944160"
  },
  {
    "text": "which abstracts that subscription context or the db context however if we think about it the",
    "start": "2944160",
    "end": "2950800"
  },
  {
    "text": "subscription context itself is a unit of war and it's a clause that we are maintaining",
    "start": "2950800",
    "end": "2956480"
  },
  {
    "text": "so instead of introducing introducing a wrapper for our subscription context what we can",
    "start": "2956480",
    "end": "2961760"
  },
  {
    "text": "use is we embrace the dbcontext class to be our unit of work and in that we",
    "start": "2961760",
    "end": "2967839"
  },
  {
    "start": "2964000",
    "end": "2964000"
  },
  {
    "text": "can have all sorts of methods like begin transaction commit rollback whatever we want we can just",
    "start": "2967839",
    "end": "2974079"
  },
  {
    "text": "add it in here and for testing perspective we can make",
    "start": "2974079",
    "end": "2980000"
  },
  {
    "text": "that subscription context and headed from an interface so that i can test different behaviors",
    "start": "2980000",
    "end": "2985040"
  },
  {
    "text": "for my db context so this will help us with the unit of work and getting",
    "start": "2985040",
    "end": "2991119"
  },
  {
    "text": "around that same method that existed in the repository however that doesn't help us with the",
    "start": "2991119",
    "end": "2996480"
  },
  {
    "text": "massive amount of methods that exist in the repository there are different patterns that can help us with",
    "start": "2996480",
    "end": "3002000"
  },
  {
    "text": "improving that i'll not be able to cover all of them today but like something like query clauses or",
    "start": "3002000",
    "end": "3008400"
  },
  {
    "text": "specification pattern or extension methods but i will quickly skim through a couple",
    "start": "3008400",
    "end": "3013440"
  },
  {
    "text": "of examples with specification pattern and extension methods really quickly go through them",
    "start": "3013440",
    "end": "3019839"
  },
  {
    "text": "there are sample code in the github repository that will explain both patterns and i'll share the links",
    "start": "3019839",
    "end": "3026640"
  },
  {
    "text": "at the end of the talk let's have a look at this example query this is",
    "start": "3026640",
    "end": "3031839"
  },
  {
    "start": "3031000",
    "end": "3031000"
  },
  {
    "text": "could be just a query and a repository to get an active subscriptions for a particular customer so we are",
    "start": "3031839",
    "end": "3037280"
  },
  {
    "text": "getting a subscription that has the status active for a particular customer id and we do",
    "start": "3037280",
    "end": "3042400"
  },
  {
    "text": "the mapping to return the entity to the database what we have in here usually end up with",
    "start": "3042400",
    "end": "3048640"
  },
  {
    "text": "large query conditions large query closes so you might have and or and parents here and there",
    "start": "3048640",
    "end": "3055119"
  },
  {
    "text": "so that query usually gets bigger and bigger and that's why you end up with having this as a method and you want to",
    "start": "3055119",
    "end": "3060480"
  },
  {
    "text": "have you don't want to kind of repeat that method multiple times and you wrap that as a part of",
    "start": "3060480",
    "end": "3065839"
  },
  {
    "text": "your repository but it's usually not readable because even within the same repository you",
    "start": "3065839",
    "end": "3071839"
  },
  {
    "text": "might have two different methods and you might end up repeating the same conditions in those two methods inside",
    "start": "3071839",
    "end": "3078079"
  },
  {
    "text": "the same repository because of a slight difference and the solution to that could be",
    "start": "3078079",
    "end": "3083839"
  },
  {
    "text": "introducing a specification pattern you have a page specification where you identify",
    "start": "3083839",
    "end": "3089599"
  },
  {
    "start": "3088000",
    "end": "3088000"
  },
  {
    "text": "what is the criteria like the where clause that will be used that includes to find which other tables",
    "start": "3089599",
    "end": "3096240"
  },
  {
    "text": "you will load from the database you can also extend this to include like the sorting",
    "start": "3096240",
    "end": "3101839"
  },
  {
    "text": "or vagination and so on for now we just have the criteria as an example",
    "start": "3101839",
    "end": "3108800"
  },
  {
    "text": "with that basic specification class i kind of start creating concrete specifications like get the active",
    "start": "3108800",
    "end": "3115280"
  },
  {
    "start": "3113000",
    "end": "3113000"
  },
  {
    "text": "subscriptions becomes a class where i define the criteria and obviously with more complex",
    "start": "3115280",
    "end": "3120880"
  },
  {
    "text": "i can apply the pagination logic i can apply the sourcing and different things that i would like to",
    "start": "3120880",
    "end": "3126559"
  },
  {
    "text": "add i can have another specification for the customer subscriptions with those two",
    "start": "3126559",
    "end": "3133280"
  },
  {
    "text": "specifications i can have my own my own word method that accepts the specification",
    "start": "3133280",
    "end": "3139920"
  },
  {
    "text": "and this will as you can see here where new active subscription is specification",
    "start": "3139920",
    "end": "3145760"
  },
  {
    "text": "and since the specification is um isolated i can reuse it across different queries",
    "start": "3145760",
    "end": "3152240"
  },
  {
    "text": "and the good thing is with that specification pattern the generated sql statement is exactly",
    "start": "3152240",
    "end": "3157920"
  },
  {
    "text": "the same that was used when we use the where conditions directly",
    "start": "3157920",
    "end": "3163119"
  },
  {
    "text": "so we have a more usable approach and i can share different specifications and it becomes more of a lego right i use",
    "start": "3163119",
    "end": "3169119"
  },
  {
    "text": "different specifications to build my own query however with more complex specifications",
    "start": "3169119",
    "end": "3176640"
  },
  {
    "text": "this becomes a little bit more harder to read and the class names gets bigger and bigger",
    "start": "3176640",
    "end": "3182880"
  },
  {
    "text": "the good thing is we can leverage extension methods to make our code more readable and",
    "start": "3182880",
    "end": "3188319"
  },
  {
    "text": "encapsulate that behavior so i can have something like context dot",
    "start": "3188319",
    "end": "3193839"
  },
  {
    "start": "3192000",
    "end": "3192000"
  },
  {
    "text": "subscriptions that get active subscriptions for customer so this is basically get active subscription is",
    "start": "3193839",
    "end": "3200480"
  },
  {
    "text": "an extension method that's wrapping that where method and for customer is wrapping that",
    "start": "3200480",
    "end": "3207200"
  },
  {
    "text": "where new customer specification so my code becomes much more readable and i can reuse those",
    "start": "3207200",
    "end": "3214000"
  },
  {
    "text": "specification concrete classes as a label",
    "start": "3214000",
    "end": "3218160"
  },
  {
    "text": "there are different approaches as well that can help with with that but the key thing here is with this change in the code i can",
    "start": "3221839",
    "end": "3228720"
  },
  {
    "text": "basically sometimes not even need to have a repository in my codebase",
    "start": "3228720",
    "end": "3234558"
  },
  {
    "text": "the next thing that i would like to talk about is having a base entity id my classes as you have seen inherit from a base",
    "start": "3235599",
    "end": "3242160"
  },
  {
    "start": "3236000",
    "end": "3236000"
  },
  {
    "text": "entity which have primary key of geoid in legacy code bases you might have a mix of tables that were using",
    "start": "3242160",
    "end": "3248720"
  },
  {
    "text": "integers which were created previously and new tables using different data type like guid you can",
    "start": "3248720",
    "end": "3255359"
  },
  {
    "text": "solve this by using a page entity that's a generic but even better you can take this one",
    "start": "3255359",
    "end": "3260480"
  },
  {
    "text": "step forward we are using a strongly typed entity id like subscription id here",
    "start": "3260480",
    "end": "3266640"
  },
  {
    "text": "that enables me first to add validation so i can create only subscription id if it's not",
    "start": "3266640",
    "end": "3272640"
  },
  {
    "text": "empty it also enables me to avoid errors by if i have a method that accepts two geo ids",
    "start": "3272640",
    "end": "3278960"
  },
  {
    "text": "i can pretty easily send the longer id to the wrong parameter so i can send the customer id to the product id parameter",
    "start": "3278960",
    "end": "3286079"
  },
  {
    "text": "and vice versa but if i'm using a strongly typed id i am leveraging the static type features",
    "start": "3286079",
    "end": "3292720"
  },
  {
    "text": "of the c sharp because the compiler will complain if i passed customer id to a product id there are a bunch of",
    "start": "3292720",
    "end": "3300559"
  },
  {
    "text": "other benefits when you work with entity id like refactoring from the old integer id to the new gid with your tables that",
    "start": "3300559",
    "end": "3307200"
  },
  {
    "text": "could also make your refactoring a bit easier it might not be the first thing that you will do when you move towards",
    "start": "3307200",
    "end": "3312960"
  },
  {
    "text": "more of a domain driven design domain model or a rich domain model but it's something that you really need",
    "start": "3312960",
    "end": "3318799"
  },
  {
    "text": "to keep in mind and you try to push to it as you progress with your refractions",
    "start": "3318799",
    "end": "3324799"
  },
  {
    "text": "that's all what i wanted to cover today the slides are available i will share the link on slack",
    "start": "3324799",
    "end": "3331280"
  },
  {
    "text": "the demos also include all of the code that we have seen today with uh before refactoring and after refactoring",
    "start": "3331280",
    "end": "3337440"
  },
  {
    "text": "if you are looking more into that specification pattern i have recently found this uh stevie smith specification library",
    "start": "3337440",
    "end": "3343440"
  },
  {
    "text": "which is doing a lot of covering of the behavior for different",
    "start": "3343440",
    "end": "3348880"
  },
  {
    "text": "specifications with includes pagination sorting all sorts of things",
    "start": "3348880",
    "end": "3354880"
  },
  {
    "text": "thanks a lot for your time uh i will look into the questions that we have that you have sent over slack and i will",
    "start": "3354880",
    "end": "3361680"
  },
  {
    "text": "answer them there again thanks again for your time i wish you enjoyed the talk uh please",
    "start": "3361680",
    "end": "3368559"
  },
  {
    "text": "feel free to reach out with any questions that you have later uh over twitter or slack thanks again",
    "start": "3368559",
    "end": "3374880"
  },
  {
    "text": "and enjoy the rest of the conference",
    "start": "3374880",
    "end": "3390720"
  }
]