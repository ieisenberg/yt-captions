[
  {
    "text": "well this my name is Dimitri I am JVM developer so",
    "start": "7719",
    "end": "14730"
  },
  {
    "text": "I don't necessarily know a lot about dotnet so I was wondering how many people are talking to people how many",
    "start": "14730",
    "end": "22680"
  },
  {
    "text": "know about Java also but I'll try to",
    "start": "22680",
    "end": "27810"
  },
  {
    "text": "refer to c-sharp but if I'm wrong just like correct me okay so all this time",
    "start": "27810",
    "end": "32820"
  },
  {
    "text": "that I'd show you know it including slides and code this job luckily Dropbox link so you don't need to necessarily",
    "start": "32820",
    "end": "40520"
  },
  {
    "text": "take photos of slides it's all there so this you know what Java is of course",
    "start": "40520",
    "end": "47400"
  },
  {
    "text": "the right sensor which is an island it's quite big never been there but there are",
    "start": "47400",
    "end": "54420"
  },
  {
    "text": "nice Java see there is Java sees Java",
    "start": "54420",
    "end": "59940"
  },
  {
    "text": "compiler but there is also Java C as a C so nice photos of this island volcanoes",
    "start": "59940",
    "end": "66479"
  },
  {
    "text": "there never been-- but obviously you should know what coordinates by now",
    "start": "66479",
    "end": "71729"
  },
  {
    "text": "which is an island zoom not far from saint-petersburg it's much smaller and",
    "start": "71729",
    "end": "77760"
  },
  {
    "text": "there is no coordination sorry there is spot means he has a command line so English it's called",
    "start": "77760",
    "end": "88620"
  },
  {
    "text": "Cortana statically typed for dramatic language for JVM and JavaScript right now it would have been statically typed",
    "start": "88620",
    "end": "94710"
  },
  {
    "text": "I guess self-explanatory use like sea shark magnetic means code linting didn't",
    "start": "94710",
    "end": "100290"
  },
  {
    "text": "try to use some new features they tried to create usable language right now",
    "start": "100290",
    "end": "106920"
  },
  {
    "text": "without too much experimentation that's like compared to Scala let's say and for",
    "start": "106920",
    "end": "112380"
  },
  {
    "text": "Java and JavaScript means cotton can compile to multiple platforms that latest feature and this was originally",
    "start": "112380",
    "end": "118409"
  },
  {
    "text": "created for JVM now to compile to JavaScript it works quite fine but there are some with JavaScript I'll say it's",
    "start": "118409",
    "end": "124080"
  },
  {
    "text": "less mature there is also Cortland native which is not released but it's usable and Kraken",
    "start": "124080",
    "end": "129269"
  },
  {
    "text": "books so Koplin is open sources so when github it's not it's Apache 2 license or",
    "start": "129269",
    "end": "135060"
  },
  {
    "text": "anyone can contribute based on this repository that's like very",
    "start": "135060",
    "end": "140280"
  },
  {
    "text": "so you can see that's prison to line",
    "start": "140280",
    "end": "146140"
  },
  {
    "text": "this is time that's quite an amount of commutes but a month so this 2018 so the first three days was",
    "start": "146140",
    "end": "155050"
  },
  {
    "text": "over here 2016 so unlike JavaScript which allegedly was written in two weeks",
    "start": "155050",
    "end": "161400"
  },
  {
    "text": "yes so intelligible what's happening Joe cranes were trying this out and before",
    "start": "161400",
    "end": "167410"
  },
  {
    "text": "releasing lots of features and that's why the language is pragmatic because",
    "start": "167410",
    "end": "174310"
  },
  {
    "text": "they didn't put all the features in they put all the features that they were sure",
    "start": "174310",
    "end": "179320"
  },
  {
    "text": "they need right now or the problem is that once you had a deficiency language very difficult to take it out of the",
    "start": "179320",
    "end": "185740"
  },
  {
    "text": "language and so once he added too many they all interact in very complex ways it slows evolution of the language so",
    "start": "185740",
    "end": "191980"
  },
  {
    "text": "this is why features like tuples they don't say no to them they say not right",
    "start": "191980",
    "end": "197020"
  },
  {
    "text": "now maybe lights will let them and so that was version one no the next version",
    "start": "197020",
    "end": "202240"
  },
  {
    "text": "authorities was 2017 and with",
    "start": "202240",
    "end": "209910"
  },
  {
    "text": "multi-platform support so now it's officially you can compile same code to JavaScript enjoy them within one project",
    "start": "209910",
    "end": "217080"
  },
  {
    "text": "so that's similar thing which vertical bar is amount of commuters per month so",
    "start": "217080",
    "end": "223239"
  },
  {
    "text": "you can see and I think despite it's",
    "start": "223239",
    "end": "229480"
  },
  {
    "text": "probably after Cortland was approved by Google for Android development so many more people started introducing",
    "start": "229480",
    "end": "234930"
  },
  {
    "text": "externally and I haven't really checked this data there so if your analyzer that",
    "start": "234930",
    "end": "240640"
  },
  {
    "text": "gives communities you can prove me not right prove me wrong so why not cease",
    "start": "240640",
    "end": "246190"
  },
  {
    "text": "fire but in reality if you developing right now on dotnet and using C sharp then just don't use Cortland",
    "start": "246190",
    "end": "252190"
  },
  {
    "text": "billion in production right because it's very different platform and in JVM is very different so you probably shouldn't",
    "start": "252190",
    "end": "258669"
  },
  {
    "text": "which so but if you want to have fun of course again so what why not Java in short Java vole slowly it takes ages my",
    "start": "258669",
    "end": "266020"
  },
  {
    "text": "favorite example semicolons there was a panel with Java architects and there was a question",
    "start": "266020",
    "end": "271150"
  },
  {
    "text": "well is there a chance semicolon will be removed and the answer was like technically and be done but there are so",
    "start": "271150",
    "end": "276490"
  },
  {
    "text": "many other things so in reality it's never going to happen so basically I don't know about c-sharp",
    "start": "276490",
    "end": "281530"
  },
  {
    "text": "but it's probably also there forever because there are always more important things to do you can get there and no single colons in code and so why not",
    "start": "281530",
    "end": "288850"
  },
  {
    "text": "Scala is like skull wasn't that pragmatic they added tons of features like XML into language by team and when",
    "start": "288850",
    "end": "295360"
  },
  {
    "text": "to be too far so now they like it's difficult to fix and why not groovy because Scotland is",
    "start": "295360",
    "end": "301900"
  },
  {
    "text": "inspired by groovy c-sharp and Scala because it's dynamically typed and the",
    "start": "301900",
    "end": "307600"
  },
  {
    "text": "argument goes that for large projects when you have hundred people working for ten years then he kind of wants aesthetic types to know if she wrote",
    "start": "307600",
    "end": "313870"
  },
  {
    "text": "things so M Kirkland has its own features which are also which I'll show",
    "start": "313870",
    "end": "319389"
  },
  {
    "text": "you in a minute so this was quick talking did and then I'll show examples",
    "start": "319389",
    "end": "324820"
  },
  {
    "text": "in actual IDE so because I think it's much better way I understand what it really is rather than just look at some",
    "start": "324820",
    "end": "330550"
  },
  {
    "text": "slides so we should start with the hello bro thing I've just realised I was away",
    "start": "330550",
    "end": "338800"
  },
  {
    "text": "from microphone kids so this is hello world so just to show this is just",
    "start": "338800",
    "end": "345039"
  },
  {
    "text": "IntelliJ IDEA so you can see it's like the reason this panel and it's all running in presentation mode this is why",
    "start": "345039",
    "end": "351160"
  },
  {
    "text": "everything is so big so if I run this thing hello world as you can guess it will print forever over there right so",
    "start": "351160",
    "end": "359560"
  },
  {
    "text": "what's going on here fun is a keyword main is entry point like in all C",
    "start": "359560",
    "end": "364930"
  },
  {
    "text": "languages the text arts which is argument specifically on line array is",
    "start": "364930",
    "end": "370090"
  },
  {
    "text": "array of inputs and return type is capital unit which is like void in c-sharp or C so unit is optional so we",
    "start": "370090",
    "end": "378070"
  },
  {
    "text": "can kind of drop it then kill the braces by 16 then print a LAN",
    "start": "378070",
    "end": "383620"
  },
  {
    "text": "if I click on this and go to source code this is in Cortland IO is basically a Java system.out.print to answer so it's",
    "start": "383620",
    "end": "390610"
  },
  {
    "text": "nothing magical going on and as you can guess this is a string literal screens semicolon optional so it is you",
    "start": "390610",
    "end": "397840"
  },
  {
    "text": "might also noticed there is no class unlike a c-sharp or something there is no class surrounding",
    "start": "397840",
    "end": "403510"
  },
  {
    "text": "the main function so you don't really need a class so to show what this like",
    "start": "403510",
    "end": "409240"
  },
  {
    "text": "so I can what one that thing you can do this extract message so what's going on",
    "start": "409240",
    "end": "415330"
  },
  {
    "text": "here this is dollar and message this is string and interpolation and full syntax",
    "start": "415330",
    "end": "421060"
  },
  {
    "text": "for this is concatenate a string right I can also do raw string literals or in",
    "start": "421060",
    "end": "426460"
  },
  {
    "text": "c-sharp I think they're called for betting so if I run this if now we'll print on two lines in separate lines so",
    "start": "426460",
    "end": "433960"
  },
  {
    "text": "I won't do these changes so the type of the message is you can guess there is local type inference and saying like",
    "start": "433960",
    "end": "439960"
  },
  {
    "text": "Java if I specified type explicitly there's that's the type so you probably",
    "start": "439960",
    "end": "445510"
  },
  {
    "text": "notice here args that seems like some like Java and c-sharp so you say the name of the variable colon and then type",
    "start": "445510",
    "end": "452770"
  },
  {
    "text": "so here type is Courtland of string and if I look at the bytecode of this thing",
    "start": "452770",
    "end": "460530"
  },
  {
    "text": "you can see that it kind of becomes well what's looking here in Maine this is the",
    "start": "460530",
    "end": "467680"
  },
  {
    "text": "compiled code which I showed them this is highlight of it is what it actually becomes the trend time so this a compile",
    "start": "467680",
    "end": "474550"
  },
  {
    "text": "time is Copland dot stream at run time it becomes java.lang string and in this",
    "start": "474550",
    "end": "480220"
  },
  {
    "text": "way it's similar to C sharp when you have for example your lower case int and at compile time and then run time into",
    "start": "480220",
    "end": "486370"
  },
  {
    "text": "the counts in 32 like in a way it's just coated thing and in a similar way so if",
    "start": "486370",
    "end": "493390"
  },
  {
    "text": "I click on this string for example it goes into Cortland so it's defined in Cortland source code and if you run it",
    "start": "493390",
    "end": "500650"
  },
  {
    "text": "on JavaScript platform it will be compiled to some JavaScript implementation of a string so this is",
    "start": "500650",
    "end": "505870"
  },
  {
    "text": "how it compares to multiple platforms so here type is for this message of this type is not necessary because there is",
    "start": "505870",
    "end": "512590"
  },
  {
    "text": "type inference so here you can see this interest occurs Val message so Val means",
    "start": "512590",
    "end": "518169"
  },
  {
    "text": "is read-only so if I want to assign something to it it's going to be compilations errors as well can it be",
    "start": "518169",
    "end": "524290"
  },
  {
    "text": "reassigned so I have to make it var which is just like c-sharp syntax if",
    "start": "524290",
    "end": "529660"
  },
  {
    "text": "then it can't be reassigned so I'll undo this bit and I'll extract this as a function",
    "start": "529660",
    "end": "537410"
  },
  {
    "text": "let's go with greetings so what's going",
    "start": "537410",
    "end": "543350"
  },
  {
    "text": "on here extract the function so there are several modify so public is also",
    "start": "543350",
    "end": "550040"
  },
  {
    "text": "defaults the interesting thing that it was the other way around originally in cotton for at least one default was",
    "start": "550040",
    "end": "556310"
  },
  {
    "text": "private and you had to specify public explicitly but then the Chester mind after analyzing Java code bases they the",
    "start": "556310",
    "end": "563570"
  },
  {
    "text": "statistic was that there are way more public methods so they just decided to",
    "start": "563570",
    "end": "569180"
  },
  {
    "text": "save on typing so unlike Java there is no protected but there is internal thing which should be",
    "start": "569180",
    "end": "574550"
  },
  {
    "text": "familiar to c-sharp which means it's visible within this assembly are a compilation module so I'll remove all of",
    "start": "574550",
    "end": "581300"
  },
  {
    "text": "this so this is a greetings function which takes a message of type string and this is the full syntax real is this so",
    "start": "581300",
    "end": "588080"
  },
  {
    "text": "unfamiliar curly braces and then return and this string but the result so expression body just like c-sharp",
    "start": "588080",
    "end": "594530"
  },
  {
    "text": "but if it's one method you can draw return type like this so this is similar",
    "start": "594530",
    "end": "600050"
  },
  {
    "text": "to C sharp 7 I think the expression body so here like one more similarity to",
    "start": "600050",
    "end": "606260"
  },
  {
    "text": "c-sharp there are extension functions so what just I just did was refactoring which I",
    "start": "606260",
    "end": "612290"
  },
  {
    "text": "will do it again so it basically moves this parameter into here so we pretend",
    "start": "612290",
    "end": "617840"
  },
  {
    "text": "that string has a method greetings so in printer and we can say message dot greetings and inside this this",
    "start": "617840",
    "end": "624680"
  },
  {
    "text": "interpolation we were so not argument but to this and this will mean a string again if we look at byte code this is",
    "start": "624680",
    "end": "631300"
  },
  {
    "text": "circling byte code we can see these greetings really it's just as the line",
    "start": "631300",
    "end": "637400"
  },
  {
    "text": "it's just a static method which takes one argument so it is really just",
    "start": "637400",
    "end": "642530"
  },
  {
    "text": "syntactic sugar right now so it's equivalent to this but it makes a big difference surprisingly big difference",
    "start": "642530",
    "end": "648650"
  },
  {
    "text": "once you start using it quite a lot what what I mean is just aesthetic there is no interpolation based on extension",
    "start": "648650",
    "end": "654950"
  },
  {
    "text": "methods nothing like that so it's just a static how do this for a saya",
    "start": "654950",
    "end": "660259"
  },
  {
    "text": "so also unlike few languages you cannot reassign arguments to",
    "start": "660259",
    "end": "666859"
  },
  {
    "text": "functions such as well cannot be reassigned we could try bar but it's also an error so we basically cannot resign arguments",
    "start": "666859",
    "end": "674299"
  },
  {
    "text": "quite strict in terms of that so again similar to c-sharp we can have default",
    "start": "674299",
    "end": "682489"
  },
  {
    "text": "values for unions and like so the default if I run this it will print NDC",
    "start": "682489",
    "end": "688479"
  },
  {
    "text": "yeah unlike c-sharp this is not just compilation time values",
    "start": "688479",
    "end": "693799"
  },
  {
    "text": "can be just some function to uppercase something so this will also work so it's",
    "start": "693799",
    "end": "701689"
  },
  {
    "text": "a bit more flexible similar to this there can be named argument so it can do",
    "start": "701689",
    "end": "707779"
  },
  {
    "text": "message message and inline message so this is a bit more convenient so as I",
    "start": "707779",
    "end": "714139"
  },
  {
    "text": "say it's that one line so so named arguments can be good really good one",
    "start": "714139",
    "end": "721160"
  },
  {
    "text": "more trick with extension methods functions is that we can do something",
    "start": "721160",
    "end": "726619"
  },
  {
    "text": "like this do fun printed and say this and print tool and so we can say any",
    "start": "726619",
    "end": "735379"
  },
  {
    "text": "where any is like object and then instead of greeting we can do printed",
    "start": "735379",
    "end": "742519"
  },
  {
    "text": "this kind of syntax so it still works just prints hello world",
    "start": "742519",
    "end": "747949"
  },
  {
    "text": "the interesting bit comes when we can have nullable type and we can say now it",
    "start": "747949",
    "end": "753589"
  },
  {
    "text": "printed and it will print now and it still works just because as I saw it can converts to static method you can print",
    "start": "753589",
    "end": "760549"
  },
  {
    "text": "now it's okay and to make things a bit more complicated that so it's what I showed",
    "start": "760549",
    "end": "769489"
  },
  {
    "text": "is there is nothing special to it in terms of JVM this is very standard this",
    "start": "769489",
    "end": "776269"
  },
  {
    "text": "is just running on normal JVM component to normal Java code this is why it interacts with Java seamlessly so all",
    "start": "776269",
    "end": "782839"
  },
  {
    "text": "the streams and numbers they interact without so what i'm doing here some java class calling static method on it and",
    "start": "782839",
    "end": "789199"
  },
  {
    "text": "then it just called printed method which I just wrote if I click on bruton from you can see this is actual Java because",
    "start": "789199",
    "end": "795600"
  },
  {
    "text": "there is semicolon so it's basically interaction between cotton and Java so",
    "start": "795600",
    "end": "803189"
  },
  {
    "text": "to show the whole project it's pretty normal Java it's compiled the respond max ml if you know maven",
    "start": "803189",
    "end": "809579"
  },
  {
    "text": "that's huge maven definition or the same definition in Gradle so basically all you need to start using Cortland I guess",
    "start": "809579",
    "end": "816180"
  },
  {
    "text": "it's this line to add the Cortland and apply Cortland plug-in and maybe cotton",
    "start": "816180",
    "end": "822329"
  },
  {
    "text": "reports so it's like few lines editor Gradle and you can start using Colton straight right so that was intense hello",
    "start": "822329",
    "end": "829740"
  },
  {
    "text": "world so this is what we looked at was",
    "start": "829740",
    "end": "836069"
  },
  {
    "text": "basic syntax string abstraction valve are named parameters extension functions",
    "start": "836069",
    "end": "841680"
  },
  {
    "text": "and integration with Java if you want me to go back and type something just give a shout anytime in your comments",
    "start": "841680",
    "end": "848579"
  },
  {
    "text": "whatever okay because it was intense fellow world here's a random joke has nothing to do",
    "start": "848579",
    "end": "855180"
  },
  {
    "text": "with anything so the question what comes first chicken no egg and the recent if occur answer to",
    "start": "855180",
    "end": "861449"
  },
  {
    "text": "it like definitely egg comes first because they were animals before chicken which had eggs",
    "start": "861449",
    "end": "866870"
  },
  {
    "text": "that's why chicken always so this was",
    "start": "866870",
    "end": "874620"
  },
  {
    "text": "whoever old which was all about streams and printing streams now moving into the",
    "start": "874620",
    "end": "879629"
  },
  {
    "text": "next primitive which is basically numbers so factorial just as a reminder for tauriel that's the formula I assume",
    "start": "879629",
    "end": "887579"
  },
  {
    "text": "everyone knows what factorial is so I switch to factorial thing so that's an",
    "start": "887579",
    "end": "895949"
  },
  {
    "text": "example of factorial it's again main function so that's main inside my thing I didn't",
    "start": "895949",
    "end": "902429"
  },
  {
    "text": "show functions can be defined inside functions again it's it's already done it was like can I do it in Java but you",
    "start": "902429",
    "end": "908970"
  },
  {
    "text": "can do it in c-sharp 7si as far as I know so I'll move this Victoria out of",
    "start": "908970",
    "end": "915240"
  },
  {
    "text": "main so inside main we print factorial from 0 to 5 like this if I run this it",
    "start": "915240",
    "end": "920370"
  },
  {
    "text": "should bring something so yeah looks right to me then the",
    "start": "920370",
    "end": "926179"
  },
  {
    "text": "implementation of tourist is naive recursive implementation so again find",
    "start": "926179",
    "end": "932119"
  },
  {
    "text": "this keyword Victoria the name n is an argument has type int before function",
    "start": "932119",
    "end": "937339"
  },
  {
    "text": "returns type int so if and last articles and one then we return 1 otherwise we",
    "start": "937339",
    "end": "942709"
  },
  {
    "text": "call factorial for n minus 1 and multiplied by n so it's all expands to this formula which I showed in Wikipedia",
    "start": "942709",
    "end": "949639"
  },
  {
    "text": "one thing which I will just do we clean up one thing is that if is an expression",
    "start": "949639",
    "end": "955759"
  },
  {
    "text": "in Cortland so return can be lifted out of if so this is a valid thing it's panic yes good decision I really like",
    "start": "955759",
    "end": "962600"
  },
  {
    "text": "this design so but there is right now no",
    "start": "962600",
    "end": "967639"
  },
  {
    "text": "January operator so there is no way to do ternary there is another thing in cotton which is going to switch",
    "start": "967639",
    "end": "973519"
  },
  {
    "text": "statement so I there is a transformation from if to when clause and when Clause means if",
    "start": "973519",
    "end": "979790"
  },
  {
    "text": "n less than 1 then it's 1 so it can be multi-line that's the full syntax and else we do this recursive case I don't",
    "start": "979790",
    "end": "987919"
  },
  {
    "text": "think is it's a good idea to go down this path this way in this code so I'll",
    "start": "987919",
    "end": "993079"
  },
  {
    "text": "just convert everything to one line and so similar to what I showed before this",
    "start": "993079",
    "end": "998989"
  },
  {
    "text": "int is actually if I navigate to it this is defined in quarterly in primitive so",
    "start": "998989",
    "end": "1004449"
  },
  {
    "text": "this is Cortland dot int the full type but as it says in the documentation on",
    "start": "1004449",
    "end": "1009819"
  },
  {
    "text": "JVM it becomes lowercase int so it's a similar idea that there is quadlin compilation time type and then there is",
    "start": "1009819",
    "end": "1017319"
  },
  {
    "text": "a run time it becomes quite fun type so if we could bytecode it should be again just Java this bytecode are capital I",
    "start": "1017319",
    "end": "1024970"
  },
  {
    "text": "means it's a lower case primitive int and again it depends on platform on JavaScript obviously there are no means",
    "start": "1024970",
    "end": "1030938"
  },
  {
    "text": "I'm not really sure what's going to be different may be a float never really checked so and obviously this code is",
    "start": "1030939",
    "end": "1038199"
  },
  {
    "text": "not correct so if I put 17 the result is",
    "start": "1038199",
    "end": "1043870"
  },
  {
    "text": "negative which is definitely not correct for multiplying several positive numbers so the problem is the same I guess for",
    "start": "1043870",
    "end": "1051039"
  },
  {
    "text": "dotnet environment that this lower case in to silently overflows becomes negative so that that's clearly",
    "start": "1051039",
    "end": "1057620"
  },
  {
    "text": "wrong so and there is all the sensor to use something like big integer big decimal use big decimal just because",
    "start": "1057620",
    "end": "1063440"
  },
  {
    "text": "it's a bit easier to do in terms of changing the code so basically these big",
    "start": "1063440",
    "end": "1068510"
  },
  {
    "text": "decimals you can see at the top is just Java math big decimal so it's normal Java class so here and unlike slide say",
    "start": "1068510",
    "end": "1077060"
  },
  {
    "text": "c-sharp there is no interpolation four types coffin is quite Street so you there is",
    "start": "1077060",
    "end": "1083660"
  },
  {
    "text": "no widening conversion no narrowing conversion in a way it makes perfect",
    "start": "1083660",
    "end": "1089150"
  },
  {
    "text": "sense because it makes the whole type system",
    "start": "1089150",
    "end": "1094160"
  },
  {
    "text": "is more straightforward because you have int and long they're all subtitles of a number but int is not some type of a",
    "start": "1094160",
    "end": "1099440"
  },
  {
    "text": "long so you cannot just convert them to one another so here I would need to",
    "start": "1099440",
    "end": "1105380"
  },
  {
    "text": "change all of this say like that now if I print it it should print a positive",
    "start": "1105380",
    "end": "1111800"
  },
  {
    "text": "number I think that's correct so before I move on",
    "start": "1111800",
    "end": "1119120"
  },
  {
    "text": "this is 2018 and clearly I shouldn't be doing it in Maine I should write a test so I'll start with the class code like",
    "start": "1119120",
    "end": "1126920"
  },
  {
    "text": "factorial tests that's now the interesting thing reached not related to",
    "start": "1126920",
    "end": "1132020"
  },
  {
    "text": "coding but there is an argument that all tests the tests classes get late they",
    "start": "1132020",
    "end": "1141470"
  },
  {
    "text": "should be called not just tests but tests with casts plural because you usually have lots of tests inside it's",
    "start": "1141470",
    "end": "1147740"
  },
  {
    "text": "like nobody uses than convention but it only means that everyone is wrong and this is right so it means so here what's",
    "start": "1147740",
    "end": "1154520"
  },
  {
    "text": "going on I defined the class code thing and inside the class there is one function this is at test is an",
    "start": "1154520",
    "end": "1160940"
  },
  {
    "text": "annotation from j-unit so again it's just using straightforward this orbitty unit using annotation from J unit in",
    "start": "1160940",
    "end": "1168590"
  },
  {
    "text": "c-sharp that this is attribute okay and then the interesting bit here is that this backtick notation it means that you",
    "start": "1168590",
    "end": "1175880"
  },
  {
    "text": "can use spaces in functions really useful for test names so yeah so it's",
    "start": "1175880",
    "end": "1182960"
  },
  {
    "text": "just absolutely normal name so you see the here's an autocomplete so it's just normal function but it's not a very good",
    "start": "1182960",
    "end": "1189529"
  },
  {
    "text": "idea to use an actual code but for test this is perfect so I'll remove I'll just",
    "start": "1189529",
    "end": "1195139"
  },
  {
    "text": "move all the printer lens into here's the first step run it again so you can see now it runs inside this J Unitron in",
    "start": "1195139",
    "end": "1203510"
  },
  {
    "text": "IntelliJ so the reason it works is because it compiles to normal bytecode which uses this annotation from J unit",
    "start": "1203510",
    "end": "1210019"
  },
  {
    "text": "so it's not different from Java from unit test written in Java this is not different so in this sense it's the same",
    "start": "1210019",
    "end": "1216769"
  },
  {
    "text": "way Escala groovy languages work in JVM so here I need to also rewrite",
    "start": "1216769",
    "end": "1222620"
  },
  {
    "text": "assertions so I'll do this then to",
    "start": "1222620",
    "end": "1235309"
  },
  {
    "text": "import the right one I'll do there are two ham crest implementations one with K",
    "start": "1235309",
    "end": "1241610"
  },
  {
    "text": "and one is normal I'm using here with K K means for : very common so I guess",
    "start": "1241610",
    "end": "1248539"
  },
  {
    "text": "this one 1 2 6 2 something like that no",
    "start": "1248539",
    "end": "1253760"
  },
  {
    "text": "that's wrong see and the last one I just don't remember",
    "start": "1253760",
    "end": "1262269"
  },
  {
    "text": "so no we're fine",
    "start": "1263020",
    "end": "1266799"
  },
  {
    "text": "so it was a bit like going back to the factorial bit big decimal the what I",
    "start": "1274330",
    "end": "1280610"
  },
  {
    "text": "change just types here and I changed this one to be decimal one this constant",
    "start": "1280610",
    "end": "1285880"
  },
  {
    "text": "and everything else just worked this may be okay for c-sharp but for Java is",
    "start": "1285880",
    "end": "1291440"
  },
  {
    "text": "unusual because there is no operator overload and all languages after Java",
    "start": "1291440",
    "end": "1296690"
  },
  {
    "text": "Longet was like all popular language is the Edit operator overloading not excluding Kotlin so all of these minuses",
    "start": "1296690",
    "end": "1303799"
  },
  {
    "text": "so if I actually put the whole thing this is the actual function name - and",
    "start": "1303799",
    "end": "1308809"
  },
  {
    "text": "this is how it's defined for big decimals extension function so big decimal is a Java class but you can",
    "start": "1308809",
    "end": "1315309"
  },
  {
    "text": "define extension function in Java class this is how all API is extended and then",
    "start": "1315309",
    "end": "1320570"
  },
  {
    "text": "there is convention if your function is called - you can end and it has operator keyword like here then you can replace",
    "start": "1320570",
    "end": "1328040"
  },
  {
    "text": "it with - and this is the same goes for multiply less than and so on so it would",
    "start": "1328040",
    "end": "1334340"
  },
  {
    "text": "be nice though to not have this big decimals but I have have something like that so I'll try one here for examples",
    "start": "1334340",
    "end": "1340429"
  },
  {
    "text": "could do n minus one and one key is going to be integer value so what is",
    "start": "1340429",
    "end": "1345679"
  },
  {
    "text": "wrong here is that it's just there is no such function but it's easy to create so basically that's the whole thing",
    "start": "1345679",
    "end": "1353230"
  },
  {
    "text": "and converts it to expression and so now this will work so what's going on here",
    "start": "1363110",
    "end": "1369320"
  },
  {
    "text": "is that we defined extension function on bigdecimal called - which takes into j",
    "start": "1369320",
    "end": "1375260"
  },
  {
    "text": "as an argument then we just wrap this n into decimal and that's it we can do the",
    "start": "1375260",
    "end": "1380840"
  },
  {
    "text": "same with this but I won't go down there so as you might guess this is still",
    "start": "1380840",
    "end": "1387380"
  },
  {
    "text": "wrong because if I do four torial bigdecimal let's say 30,000 then there is nice",
    "start": "1387380",
    "end": "1395330"
  },
  {
    "text": "thing like in Java 7 you can - underscores for readability it doesn't do anything just to doing it two numbers",
    "start": "1395330",
    "end": "1402590"
  },
  {
    "text": "this big so as you can guess this is just stack overflow because 30,000",
    "start": "1402590",
    "end": "1408529"
  },
  {
    "text": "allocates too many frames so it just explodes so the resell this problem is that you",
    "start": "1408529",
    "end": "1416750"
  },
  {
    "text": "can do tail recursion optimization and there is a way to do is in column there is a keyword called tail rack so I",
    "start": "1416750",
    "end": "1423620"
  },
  {
    "text": "edited but like everything is highlighted as yellow because Cortland can see it that it's not tail recursive",
    "start": "1423620",
    "end": "1429649"
  },
  {
    "text": "it can't analyze source code and understand that is wrong and I think it's a good thing I think in c-sharp",
    "start": "1429649",
    "end": "1434960"
  },
  {
    "text": "it's happens on platform level not in language level and you kind of don't",
    "start": "1434960",
    "end": "1440269"
  },
  {
    "text": "know did it actually work I did not so I think this approach is a bit more clear because it can kind of help you to",
    "start": "1440269",
    "end": "1446029"
  },
  {
    "text": "figure out if you not doing what you intend to do so it's surely easy to fix so I'll do like result of type a big",
    "start": "1446029",
    "end": "1454100"
  },
  {
    "text": "decimal default is one here will return results otherwise to an end result by",
    "start": "1454100",
    "end": "1462169"
  },
  {
    "text": "end things now you see this warning disappears and so should work yeah so I",
    "start": "1462169",
    "end": "1470840"
  },
  {
    "text": "didn't ascertain this but you see this nice small number looks correct",
    "start": "1470840",
    "end": "1477760"
  },
  {
    "text": "so this is complicated factorial just to",
    "start": "1479330",
    "end": "1485269"
  },
  {
    "text": "show one more thing I'm not gonna go into details about this but there is also the other thing which is core",
    "start": "1485269",
    "end": "1491330"
  },
  {
    "text": "routines in Kotlin and I believe this is the right way to write factorial in Cori",
    "start": "1491330",
    "end": "1496460"
  },
  {
    "text": "cursive way this is maybe great Annoying interview question before a twilight SQ",
    "start": "1496460",
    "end": "1502340"
  },
  {
    "text": "about recursion but what about quarry occurs it's my understanding this is basically quarry cursive implementation",
    "start": "1502340",
    "end": "1507799"
  },
  {
    "text": "or factorial so what's going on here I'll quickly show so this is the code",
    "start": "1507799",
    "end": "1515179"
  },
  {
    "text": "you would write in C sharp with yield keywords and we just returned the infinite stream of sequence of integers",
    "start": "1515179",
    "end": "1523279"
  },
  {
    "text": "like integers on here or this that should be a big decimal but anyway so the whole idea is that there is wild",
    "start": "1523279",
    "end": "1529309"
  },
  {
    "text": "true and then it yields and at this point this execution stops now we can go",
    "start": "1529309",
    "end": "1534919"
  },
  {
    "text": "into details of how it works the interesting thing about Gotham I mentioned this is that yield is not a keyword it's just a function so Cortland",
    "start": "1534919",
    "end": "1542419"
  },
  {
    "text": "also has co-routines but they implement it on its a lower level of abstraction so yield is just a function unlike C",
    "start": "1542419",
    "end": "1549350"
  },
  {
    "text": "sure but I said not going into too much details feel free to chat to me later",
    "start": "1549350",
    "end": "1554840"
  },
  {
    "text": "so that was intense Victoria this is what we looked at well one thing I forgot to mention all",
    "start": "1554840",
    "end": "1561379"
  },
  {
    "text": "these big decimal in sensations these are constructors or what is being called here is constructor from Java math but",
    "start": "1561379",
    "end": "1568759"
  },
  {
    "text": "there is no new keyword in Cortland so you don't type in you at home in a way it makes perfect sense because you can",
    "start": "1568759",
    "end": "1575299"
  },
  {
    "text": "think about constructor is a function which creates a new instance of your object so maybe it's not why have",
    "start": "1575299",
    "end": "1580730"
  },
  {
    "text": "different syntax for calling almost the same function so yeah this is what we",
    "start": "1580730",
    "end": "1585950"
  },
  {
    "text": "looked at the influence all numbers are objects no new keyword operator",
    "start": "1585950",
    "end": "1591139"
  },
  {
    "text": "overloading tail call optimization unit test because it was difficult that's",
    "start": "1591139",
    "end": "1598789"
  },
  {
    "text": "random joke so what it says is that from",
    "start": "1598789",
    "end": "1603980"
  },
  {
    "text": "technical point of view unless is never empty because it would be empty in vacuum but we done live in vacuum and",
    "start": "1603980",
    "end": "1610279"
  },
  {
    "text": "difficult to get vacuum so it's always full of air or full of water and discipline very optimism so and the",
    "start": "1610279",
    "end": "1619190"
  },
  {
    "text": "final thing is data munging code cutter so code cut the whole idea of cutter is",
    "start": "1619190",
    "end": "1627440"
  },
  {
    "text": "a small it comes from martial arts where people repeat the same exercise with the same move over and over again to affect",
    "start": "1627440",
    "end": "1634070"
  },
  {
    "text": "it so the same idea was popularized by David Thomas who wrote this book the",
    "start": "1634070",
    "end": "1639169"
  },
  {
    "text": "preventive program there and that's the website it's used to look much more serious maybe 10 years ago when I loaded",
    "start": "1639169",
    "end": "1645440"
  },
  {
    "text": "now that's with cats and there are some examples of programming exercises",
    "start": "1645440",
    "end": "1651320"
  },
  {
    "text": "playing a code cutters so there it is that you do it over and over again maybe you use me short card so you use",
    "start": "1651320",
    "end": "1656960"
  },
  {
    "text": "different editor or do two different programming language or do it with tying linkage something like that so I'll do",
    "start": "1656960",
    "end": "1663529"
  },
  {
    "text": "one in Cortland which I think it's kinda shows in touches on enterprise",
    "start": "1663529",
    "end": "1669200"
  },
  {
    "text": "development so that's got a number for data munging so the coal cutter is about reading and",
    "start": "1669200",
    "end": "1674659"
  },
  {
    "text": "processing files so part one is to read a text file and find the day with",
    "start": "1674659",
    "end": "1680719"
  },
  {
    "text": "minimum temperature spread so there is a file which I'll show and we just get the lines then parse them and find the",
    "start": "1680719",
    "end": "1687440"
  },
  {
    "text": "number of the day for which temperatures record in this file has minimum difference then similar thing for",
    "start": "1687440",
    "end": "1693649"
  },
  {
    "text": "football and then trying to dry like remove duplication from both solutions",
    "start": "1693649",
    "end": "1699309"
  },
  {
    "text": "now I'm not sure we're going to finish this probably but it should give the idea of what it's like to write actual",
    "start": "1699309",
    "end": "1706190"
  },
  {
    "text": "enterprise code and coughing so this is",
    "start": "1706190",
    "end": "1711409"
  },
  {
    "text": "the file that's the weather text file I'm not sure what this thing is at the",
    "start": "1711409",
    "end": "1717859"
  },
  {
    "text": "top is like in typical Enterprise Development you get some file from somebody nobody's in a company knows",
    "start": "1717859",
    "end": "1723229"
  },
  {
    "text": "what that means but you know about these three columns so this is the day and this is maximum temperature and the day",
    "start": "1723229",
    "end": "1729679"
  },
  {
    "text": "in this minimum and there are just thirty days one month so it's quite small in real and surprise it will be",
    "start": "1729679",
    "end": "1735259"
  },
  {
    "text": "like maybe 500 megabytes so that's data munching this is again",
    "start": "1735259",
    "end": "1743980"
  },
  {
    "text": "some code written in Kotlin test framework which is different testing",
    "start": "1743980",
    "end": "1749330"
  },
  {
    "text": "from the previously we using J unions pretty much like it is in Java but this is called in tests and showing it just",
    "start": "1749330",
    "end": "1755480"
  },
  {
    "text": "show something different so to start with quickly I'm just trying to read the",
    "start": "1755480",
    "end": "1761239"
  },
  {
    "text": "file in the first place so what I'm doing here is using Java are your file again there is no new keyboard so the",
    "start": "1761239",
    "end": "1767899"
  },
  {
    "text": "carriages like crates and files then we can do read lines and then for each line",
    "start": "1767899",
    "end": "1773389"
  },
  {
    "text": "to land it so what's going on here is",
    "start": "1773389",
    "end": "1781220"
  },
  {
    "text": "that I'll just run it and see if it works at all so as you can see it prints",
    "start": "1781220",
    "end": "1791269"
  },
  {
    "text": "back the actual file the loop set so at least this bit worked so here we just create file then we do read lines there",
    "start": "1791269",
    "end": "1797809"
  },
  {
    "text": "is no actual function and Java your file so if I click on this I can see this is defined in Cortland IO so it's again an",
    "start": "1797809",
    "end": "1804980"
  },
  {
    "text": "extension function this is how Cortland extends Java API and this returns a list of files list of lines to extract this",
    "start": "1804980",
    "end": "1814100"
  },
  {
    "text": "into lines and I specify type you can see this is list and this is type",
    "start": "1814100",
    "end": "1819200"
  },
  {
    "text": "argument string so then we do dot forage as you can guess this forage doesn't",
    "start": "1819200",
    "end": "1824749"
  },
  {
    "text": "really exist in Java so this is again extension method on each rebel of type T this is how you do generics then for",
    "start": "1824749",
    "end": "1832820"
  },
  {
    "text": "each takes one argument which is action action is a lambda of this type so this",
    "start": "1832820",
    "end": "1838669"
  },
  {
    "text": "is syntax for specifying type of lambda its input is T then it returns unit",
    "start": "1838669",
    "end": "1844039"
  },
  {
    "text": "which means void it just does some side effects so in here does prints align it",
    "start": "1844039",
    "end": "1849109"
  },
  {
    "text": "the actual syntax for this is that like that but because lambda is the last",
    "start": "1849109",
    "end": "1854330"
  },
  {
    "text": "argument then we can drop parents this comes like from Gruden's color so",
    "start": "1854330",
    "end": "1859850"
  },
  {
    "text": "there's normal thing to drop parents if lambda this argument then it's actual syntax is this so we can say line and we",
    "start": "1859850",
    "end": "1866359"
  },
  {
    "text": "can specify type explicitly so this is line of type string but we can infer string and if",
    "start": "1866359",
    "end": "1872659"
  },
  {
    "text": "there is just one argument we can convert this to eat let's default name in Haskell it will be",
    "start": "1872659",
    "end": "1878119"
  },
  {
    "text": "underscore and in Scala is all scientist code but this comes from groovy I think it's called I think it's a bit more",
    "start": "1878119",
    "end": "1884299"
  },
  {
    "text": "readable so this is why it works so there is one more thing to show is that",
    "start": "1884299",
    "end": "1890529"
  },
  {
    "text": "unlike previous tests there is some magic going on because this is not a function even so that was the syntax",
    "start": "1890529",
    "end": "1897289"
  },
  {
    "text": "here we basically have string literal then we have curly braces and something's going on that's a bit odd",
    "start": "1897289",
    "end": "1904039"
  },
  {
    "text": "what's going on here again I'll show the food syntax so the actual thing is operator overloading which takes this",
    "start": "1904039",
    "end": "1910700"
  },
  {
    "text": "thing so our test class extends the strings back and inside strings back",
    "start": "1910700",
    "end": "1917389"
  },
  {
    "text": "class we have this extension function on string invoke which is also an operator what's",
    "start": "1917389",
    "end": "1924290"
  },
  {
    "text": "going on here this invoke can be replaced with direct call which is just parents and then because these parents",
    "start": "1924290",
    "end": "1931520"
  },
  {
    "text": "take the lambdas the last argument we can draw parents so overall it's going",
    "start": "1931520",
    "end": "1938630"
  },
  {
    "text": "to be too clever maybe but it looks like we call in some curly braces thin on the string so this just shows how a",
    "start": "1938630",
    "end": "1945650"
  },
  {
    "text": "combination of just extension functions operator overloading can make you cold things and streams so I don't",
    "start": "1945650",
    "end": "1952070"
  },
  {
    "text": "necessarily saying that's a great thing I'm just saying this is how far you can take it and though there are even more",
    "start": "1952070",
    "end": "1957980"
  },
  {
    "text": "complicated examples so I'll quickly diverge then into least just to show",
    "start": "1957980",
    "end": "1964250"
  },
  {
    "text": "like as the stuff I showed before this is actually the Scotland collection package and he is defined Lee so again",
    "start": "1964250",
    "end": "1972080"
  },
  {
    "text": "it's compilation time it's Cortland collection at run time it's compiled to platform collection and he list doesn't",
    "start": "1972080",
    "end": "1979490"
  },
  {
    "text": "directly correspond to Java list because these least I read only so that's another lesson I guess which few",
    "start": "1979490",
    "end": "1986030"
  },
  {
    "text": "languages took after Java was created that default collections shouldn't be mutable for this in Cortland there is",
    "start": "1986030",
    "end": "1991820"
  },
  {
    "text": "the highlights of this mutable list so if you want to modify it you need to use mutable list he read only means read",
    "start": "1991820",
    "end": "1998240"
  },
  {
    "text": "only it doesn't mean it's persistent data structure that so here's me read only list",
    "start": "1998240",
    "end": "2003760"
  },
  {
    "text": "I hope this all made sense I will inline things back and I'll just move on to the",
    "start": "2003760",
    "end": "2009429"
  },
  {
    "text": "cutter so we just read all the lines and",
    "start": "2009429",
    "end": "2014980"
  },
  {
    "text": "I guess we need to us parse them somehow to I'll do you this is simplicity now to",
    "start": "2014980",
    "end": "2020110"
  },
  {
    "text": "just split it'll use regex to splits its own one or more space so now in output",
    "start": "2020110",
    "end": "2029620"
  },
  {
    "text": "we should see lines like splitters in to at least so now we can see that's the",
    "start": "2029620",
    "end": "2035890"
  },
  {
    "text": "output see commas between the in so that's why they were splitting but we",
    "start": "2035890",
    "end": "2041590"
  },
  {
    "text": "can also see this stuff at the top and I guess stuff at the bottom which we don't",
    "start": "2041590",
    "end": "2047860"
  },
  {
    "text": "need I'll do the simplest thing just also show of things so we can do drop eight lines and then",
    "start": "2047860",
    "end": "2053669"
  },
  {
    "text": "then we'll get rid of those basa mental thing again this drop and take the extension functions divide in Cortland",
    "start": "2053669",
    "end": "2060148"
  },
  {
    "text": "you won't find them in Java so now we have just the lines that we need then",
    "start": "2060149",
    "end": "2065580"
  },
  {
    "text": "next step might be is to extract only the columns that we need for example",
    "start": "2065580",
    "end": "2070919"
  },
  {
    "text": "could you column 1 which will be J number 4 and then I expect a 1 2 3 and so on yeah so but we want at least like",
    "start": "2070919",
    "end": "2082470"
  },
  {
    "text": "three calls probably there are no string literals and code Center there is that's the way to do it it's like function",
    "start": "2082470",
    "end": "2088980"
  },
  {
    "text": "least off and then it takes elements so now it will be three columns",
    "start": "2088980",
    "end": "2096020"
  },
  {
    "text": "there will be a tiny thing you can see this is the star and there is one more star here",
    "start": "2099770",
    "end": "2104780"
  },
  {
    "text": "so need to remove this it's typical Enterprise to housing you don't know",
    "start": "2104780",
    "end": "2110060"
  },
  {
    "text": "what this means nobody knows let's just",
    "start": "2110060",
    "end": "2113890"
  },
  {
    "text": "and now it's okay to have a lease but maybe you will want it to be more",
    "start": "2115480",
    "end": "2121220"
  },
  {
    "text": "semantically reached so we will create class for to hold this like availed you",
    "start": "2121220",
    "end": "2126770"
  },
  {
    "text": "object to hold these three values the way to do it and cotton is this concert",
    "start": "2126770",
    "end": "2132080"
  },
  {
    "text": "of data classes I can say whether entry and it will have value as day-day of",
    "start": "2132080",
    "end": "2138890"
  },
  {
    "text": "type string value max value mean of type",
    "start": "2138890",
    "end": "2146480"
  },
  {
    "text": "and data class you know I think it's coming in c-sharp age very similar thing",
    "start": "2146480",
    "end": "2152390"
  },
  {
    "text": "called record classes lets you know",
    "start": "2152390",
    "end": "2157520"
  },
  {
    "text": "scouts at case classes basically all this thing is does that it says automatically will define hash code",
    "start": "2157520",
    "end": "2163700"
  },
  {
    "text": "equals into string so here we can replace this list with that so gives tiny problems that it once ins",
    "start": "2163700",
    "end": "2170990"
  },
  {
    "text": "should be easy to convert like that doing to int once again this two inch",
    "start": "2170990",
    "end": "2177050"
  },
  {
    "text": "extension method and Cortland which just does this Java integer.parseint but even this time instead of typing this we can",
    "start": "2177050",
    "end": "2183650"
  },
  {
    "text": "do change so looks much nicer to me so I'm running it again and now should",
    "start": "2183650",
    "end": "2190520"
  },
  {
    "text": "expect those weather entries to be printed",
    "start": "2190520",
    "end": "2194890"
  },
  {
    "text": "so now it's a bit more readable heck finally to find in the actual entry",
    "start": "2197630",
    "end": "2202850"
  },
  {
    "text": "which there is a function to say mean by and we can do max minus its mean so",
    "start": "2202850",
    "end": "2210140"
  },
  {
    "text": "there is no for each because there is not one entry so I can say this now it",
    "start": "2210140",
    "end": "2223370"
  },
  {
    "text": "should print the minimum entry here's I'll do a bit of refactoring so I'm",
    "start": "2223370",
    "end": "2229010"
  },
  {
    "text": "putting all this lines in separate like that no it actually printed the right",
    "start": "2229010",
    "end": "2236810"
  },
  {
    "text": "entry for you like 14 I'll do a little bit of cleanup I mean that's an example",
    "start": "2236810",
    "end": "2242630"
  },
  {
    "text": "why names arguments can be helpful because they speeds to trains it's not readable but instead of extracting",
    "start": "2242630",
    "end": "2248780"
  },
  {
    "text": "variables I'm just giving names to things I hope it's more clear and now we should write an assertion probably",
    "start": "2248780",
    "end": "2254840"
  },
  {
    "text": "because this is like what we should do and there is this function for this",
    "start": "2254840",
    "end": "2262010"
  },
  {
    "text": "testing framework called should equal so if I do this the interesting thing is",
    "start": "2262010",
    "end": "2267170"
  },
  {
    "text": "that like should equal is defined again somewhere in strings back I believe yes um the interesting thing is a function",
    "start": "2267170",
    "end": "2273410"
  },
  {
    "text": "defined on T which is type argument but the interesting is that it's in fix it has keyword in fix which means it can be",
    "start": "2273410",
    "end": "2280730"
  },
  {
    "text": "you can drop dots and parents I'll do it again so you can do this kind of thing yeah",
    "start": "2280730",
    "end": "2287180"
  },
  {
    "text": "it's it makes it a bit more readable especially for test I think because it separates what's your actual unexpected",
    "start": "2287180",
    "end": "2293090"
  },
  {
    "text": "so it's a bit more clear what's going on so if I run this now it should pass and",
    "start": "2293090",
    "end": "2298460"
  },
  {
    "text": "this is an actual assertion right arguably this is still not that",
    "start": "2298460",
    "end": "2305500"
  },
  {
    "text": "good because the original thing was about finding day so we should probably",
    "start": "2305500",
    "end": "2311110"
  },
  {
    "text": "search on actual day nutted on everything otherwise it's a bit over specifying the data and if I do this",
    "start": "2311110",
    "end": "2318130"
  },
  {
    "text": "it's kind of looks like a Excel doesn't compile and this is because of now",
    "start": "2318130",
    "end": "2323260"
  },
  {
    "text": "ability in Kotlin so cotton is not happy about this because the actual type of",
    "start": "2323260",
    "end": "2328840"
  },
  {
    "text": "mean entry is where the entry and question mark and question mark its own",
    "start": "2328840",
    "end": "2336280"
  },
  {
    "text": "it's not exactly like c-sharp Naugles yes I understand and correct me if I'm wrong the C sharp the question mark is",
    "start": "2336280",
    "end": "2343240"
  },
  {
    "text": "almost like syntactic sugar wrapping into internal above class and in",
    "start": "2343240",
    "end": "2348250"
  },
  {
    "text": "Cortland is baked into the type system so like similar to c-sharp the answer is to do a question like dot and then if",
    "start": "2348250",
    "end": "2355420"
  },
  {
    "text": "mean entry is now then the whole expression will be now and then it will",
    "start": "2355420",
    "end": "2361090"
  },
  {
    "text": "be now should equal 14 will fail and by the way it's not able because we do mean by and mean by on an empty list is",
    "start": "2361090",
    "end": "2367330"
  },
  {
    "text": "nothing so there is no way to be sure that there is something so that's quick",
    "start": "2367330",
    "end": "2373140"
  },
  {
    "text": "quick divergence into Kotlin type system because of malleability so that's let's",
    "start": "2373140",
    "end": "2379390"
  },
  {
    "text": "not prices blog post this permission I'm sharing it so just really quickly just looking at the picture so the way it",
    "start": "2379390",
    "end": "2386380"
  },
  {
    "text": "works at the top of type hierarchy there is an e which is like stream classes can inherit from any then there are",
    "start": "2386380",
    "end": "2393369"
  },
  {
    "text": "interface so there is single inheritance just like sea shark Java but multiple",
    "start": "2393369",
    "end": "2398410"
  },
  {
    "text": "interface inheritance I have tomato it implements two interfaces I can go and sell it and all classes intern Antonia",
    "start": "2398410",
    "end": "2405609"
  },
  {
    "text": "now we go to move onto nullable types so now both types they basically could be",
    "start": "2405609",
    "end": "2411369"
  },
  {
    "text": "the actual type so if we have fruit there is fruit question mark and there",
    "start": "2411369",
    "end": "2416560"
  },
  {
    "text": "are two parallel type hierarchies and also classes without any without",
    "start": "2416560",
    "end": "2423250"
  },
  {
    "text": "question mark so none malleable are subtypes of malleable so this that's the whole thing like hierarchies kind of",
    "start": "2423250",
    "end": "2428740"
  },
  {
    "text": "connect to each other in this way and it makes sense because malleable type has one more value so it's like",
    "start": "2428740",
    "end": "2434820"
  },
  {
    "text": "the size of normal time then there is Union which is like voice I'll skip this then at the bottom like in here",
    "start": "2434820",
    "end": "2441780"
  },
  {
    "text": "otherwise there is type nothing I can I won't go in details but it can be useful to have nothing because it basically",
    "start": "2441780",
    "end": "2448260"
  },
  {
    "text": "means termination of execution in the program it can be useful and then there",
    "start": "2448260",
    "end": "2453990"
  },
  {
    "text": "is nullable nothing and there is also inaudible units are confusing no it's",
    "start": "2453990",
    "end": "2460830"
  },
  {
    "text": "not really confusing in this way type system is quite well designed and symmetric and so on so in this case",
    "start": "2460830",
    "end": "2467910"
  },
  {
    "text": "going back to the problem it was nullable entries so just like",
    "start": "2467910",
    "end": "2474900"
  },
  {
    "text": "this so the best way is privileged a question mark dot here and this is how like we found minimum day now we can",
    "start": "2474900",
    "end": "2483060"
  },
  {
    "text": "move to part to find team with minimum goal difference fine team go to friends",
    "start": "2483060",
    "end": "2492300"
  },
  {
    "text": "so it's similar we using this tree non strain reason overrated overloaded",
    "start": "2492300",
    "end": "2497760"
  },
  {
    "text": "operator just to show the data for part to this football very similar teams",
    "start": "2497760",
    "end": "2504840"
  },
  {
    "text": "inside text file so I'm not gonna type the whole thing he'll cheat all the I'll",
    "start": "2504840",
    "end": "2510540"
  },
  {
    "text": "just paste some code which is almost what we need so this is going to be football data so it's like the ID is",
    "start": "2510540",
    "end": "2516600"
  },
  {
    "text": "absolutely the same so we have this data class 14 entries will have name go for",
    "start": "2516600",
    "end": "2522630"
  },
  {
    "text": "against then we have this code which",
    "start": "2522630",
    "end": "2527730"
  },
  {
    "text": "what does load the file football date at which we just load then we read lines",
    "start": "2527730",
    "end": "2533360"
  },
  {
    "text": "drop 5 take 21 then there was one line which was raised this - just - its then",
    "start": "2533360",
    "end": "2540930"
  },
  {
    "text": "we keep this line then we do split then we do map and then same thing team entry",
    "start": "2540930",
    "end": "2546150"
  },
  {
    "text": "with : numbers so it's like the same staff basic then slightly different we",
    "start": "2546150",
    "end": "2551580"
  },
  {
    "text": "mean by by absolute value because there is no mean max it just goes and then we",
    "start": "2551580",
    "end": "2556710"
  },
  {
    "text": "do dot printers from color world so hopefully it will just print the right team",
    "start": "2556710",
    "end": "2563089"
  },
  {
    "text": "so if I click yeah that's the team entry I know this is correct so we can also do",
    "start": "2564540",
    "end": "2571380"
  },
  {
    "text": "entry",
    "start": "2571380",
    "end": "2574380"
  },
  {
    "text": "should be named Ike and should they call us to do",
    "start": "2583170",
    "end": "2589579"
  },
  {
    "text": "so that's a calculation so that's the thing now if we want to move on we can",
    "start": "2591670",
    "end": "2598960"
  },
  {
    "text": "do part three or yeah we can try part three so basically now this works and",
    "start": "2598960",
    "end": "2606040"
  },
  {
    "text": "the third page is to extract as much common code as possible so you can see",
    "start": "2606040",
    "end": "2611470"
  },
  {
    "text": "this is quite similar so there my idea would be just to make these bits of code",
    "start": "2611470",
    "end": "2617530"
  },
  {
    "text": "as similar as we can and then we can extract them and like see you see how it goes but no obvious difference here the",
    "start": "2617530",
    "end": "2623620"
  },
  {
    "text": "first difference is like we dropped in different amounts of lines and doing this here so I would attempt to do the",
    "start": "2623620",
    "end": "2632590"
  },
  {
    "text": "following thing so there is a function built in codes and called map not now it basically will do will call create an",
    "start": "2632590",
    "end": "2641740"
  },
  {
    "text": "entry but then here will do now on exception and this is some other",
    "start": "2641740",
    "end": "2649870"
  },
  {
    "text": "function so basically what's going on here if this parsing conversion to",
    "start": "2649870",
    "end": "2654940"
  },
  {
    "text": "integer will explode this with now on exception will catch the exception and return now and this map not now will",
    "start": "2654940",
    "end": "2661510"
  },
  {
    "text": "filter out nulls so this method maps and also filters out Mouse there is alternative way to do it like this for",
    "start": "2661510",
    "end": "2668350"
  },
  {
    "text": "example to fill turn up now but they're equivalent I'll keep map that well I'm not saying",
    "start": "2668350",
    "end": "2674710"
  },
  {
    "text": "this the cleanest way is whole but it was like it was straight few things so with now an exception as I defined it",
    "start": "2674710",
    "end": "2681250"
  },
  {
    "text": "myself in this file that's what it is so it's been line function so that's another keyword in Portland where you",
    "start": "2681250",
    "end": "2687730"
  },
  {
    "text": "can tell compiler to definitely inline this function everywhere yeah the rice",
    "start": "2687730",
    "end": "2693280"
  },
  {
    "text": "case when it's useful and then it's it's a function which takes this F so it's",
    "start": "2693280",
    "end": "2698800"
  },
  {
    "text": "high order function and basically just calls F in try catch ignores the",
    "start": "2698800",
    "end": "2704260"
  },
  {
    "text": "exception and returns now so this will now kind of work for our file so I",
    "start": "2704260",
    "end": "2709870"
  },
  {
    "text": "removed these two lines here just remove them and write test run test again so hopefully it should work",
    "start": "2709870",
    "end": "2717330"
  },
  {
    "text": "so it still works for football so now can do the same thing for weather so do",
    "start": "2718010",
    "end": "2724130"
  },
  {
    "text": "you map not now do with no exception so",
    "start": "2724130",
    "end": "2731920"
  },
  {
    "text": "I can drop this thing now then there is",
    "start": "2731920",
    "end": "2738200"
  },
  {
    "text": "this difference which we remove this tie for weather but don't really remove for football probably should can remove",
    "start": "2738200",
    "end": "2745369"
  },
  {
    "text": "involvement concurs and then the next difference is creating the entry which I",
    "start": "2745369",
    "end": "2752480"
  },
  {
    "text": "don't think can be easily defector so I would extract it as a function outside of conveying then we move to mean by and",
    "start": "2752480",
    "end": "2760280"
  },
  {
    "text": "mean by it they're different because those two entries are different this is where it would maybe help to have some",
    "start": "2760280",
    "end": "2767930"
  },
  {
    "text": "super type for these two data classes and so the naive attempt why did you say",
    "start": "2767930",
    "end": "2773900"
  },
  {
    "text": "is to data class let's say call it entry and have some kind of key of type stream",
    "start": "2773900",
    "end": "2778910"
  },
  {
    "text": "and then these data class will implement entry and say this is a day as a key",
    "start": "2778910",
    "end": "2784730"
  },
  {
    "text": "there is a problem it's not going to work at all because cousin says the type is fine also it can be inherited so it",
    "start": "2784730",
    "end": "2791240"
  },
  {
    "text": "says that entry is final which can't be that's the interesting things that like",
    "start": "2791240",
    "end": "2796820"
  },
  {
    "text": "many other languages in Cortland all the classes are final and all methods everything is final by default so if you",
    "start": "2796820",
    "end": "2803359"
  },
  {
    "text": "want to extend you need to make them open so I'm using this making Cubert open then there is next problem open and",
    "start": "2803359",
    "end": "2810619"
  },
  {
    "text": "data data is just modifier like they don't work together so if I remove data",
    "start": "2810619",
    "end": "2815720"
  },
  {
    "text": "it so becomes all fine but then it kind of defeats the purpose of why we inherited from day anyway and then pass",
    "start": "2815720",
    "end": "2822170"
  },
  {
    "text": "in so it's it's kind of questionable sir yes in general I would do it maybe this way so would define interface and then",
    "start": "2822170",
    "end": "2830390"
  },
  {
    "text": "inherit from interface implement interface and process so something like this so here what we're doing was saying",
    "start": "2830390",
    "end": "2838010"
  },
  {
    "text": "this class inherits implements interface then there is keyword override and it",
    "start": "2838010",
    "end": "2843890"
  },
  {
    "text": "overrides the value value here means read-only field on an object and in real",
    "start": "2843890",
    "end": "2850110"
  },
  {
    "text": "- really just together so the same thing with team so we need one more thing I",
    "start": "2850110",
    "end": "2856830"
  },
  {
    "text": "guess being called criteria and then to implement this as well and this can be",
    "start": "2856830",
    "end": "2863850"
  },
  {
    "text": "my ex - mean and then the same thing we can do for team entry and didn't fill in",
    "start": "2863850",
    "end": "2872130"
  },
  {
    "text": "those two things you might notice here this gets then this is because Cortland",
    "start": "2872130",
    "end": "2877890"
  },
  {
    "text": "also has Gators and I'm gonna go into it but it's also has getters and setters like some other language no apps then go",
    "start": "2877890",
    "end": "2891240"
  },
  {
    "text": "against and so but you can see where it goes the whole thing so now these",
    "start": "2891240",
    "end": "2898620"
  },
  {
    "text": "classes can be replaced with entry so for example here instead of max I should be able to do criteria and here instead",
    "start": "2898620",
    "end": "2908640"
  },
  {
    "text": "of this math perhaps I should be able to do but each criteria",
    "start": "2908640",
    "end": "2913940"
  },
  {
    "text": "so I'll extract then this whole thing what method a function called find entry",
    "start": "2918760",
    "end": "2928900"
  },
  {
    "text": "in and then can extract this file name",
    "start": "2928900",
    "end": "2934680"
  },
  {
    "text": "then the thing which is still specific to each case is this I'll extract this",
    "start": "2937109",
    "end": "2942700"
  },
  {
    "text": "is a function will break because it should take a list of strings and return",
    "start": "2942700",
    "end": "2949869"
  },
  {
    "text": "an entry so here what's going on that",
    "start": "2949869",
    "end": "2954900"
  },
  {
    "text": "and it returns an entry in that team entry and this is a key so with this that's the finding team",
    "start": "2954900",
    "end": "2963430"
  },
  {
    "text": "entry so basically takes the filename and then takes this closure which is again outside of parents and then just",
    "start": "2963430",
    "end": "2969730"
  },
  {
    "text": "create steam entry so this rounds then",
    "start": "2969730",
    "end": "2975070"
  },
  {
    "text": "the same thing should be applied so it still passes so the same thing should be applied to this case",
    "start": "2975070",
    "end": "2982559"
  },
  {
    "text": "I can do this this is key this is so",
    "start": "2984530",
    "end": "2989780"
  },
  {
    "text": "back that did pass so this is basically",
    "start": "2989780",
    "end": "2999140"
  },
  {
    "text": "the reflection it's one way to do this code cutter yeah she'd have any",
    "start": "2999140",
    "end": "3005020"
  },
  {
    "text": "questions or comments tell me I'll",
    "start": "3005020",
    "end": "3010510"
  },
  {
    "text": "switch back this was a collection Tina showed but doesn't matter well this is",
    "start": "3010510",
    "end": "3015880"
  },
  {
    "text": "what we looked at was quite a lot for the Conklin collections lambdas thing I didn't mention those and there are no",
    "start": "3015880",
    "end": "3022270"
  },
  {
    "text": "checked exceptions because in Javan normally if you read from file you will have to catch some exceptions again I",
    "start": "3022270",
    "end": "3028000"
  },
  {
    "text": "think all languages were popular languages so jvm dropped this idea for better or worse and there are data",
    "start": "3028000",
    "end": "3034450"
  },
  {
    "text": "classes we looked at now both types and cost and tests with this tricky invoke thing on the string so again render a",
    "start": "3034450",
    "end": "3041500"
  },
  {
    "text": "joke this is how you do SQL injection on speed cameras and this",
    "start": "3041500",
    "end": "3052000"
  },
  {
    "text": "is it do a little bit more talking so obviously there is homepage for coupling length tour torque right there is a",
    "start": "3052000",
    "end": "3058900"
  },
  {
    "text": "website where you can type some code and run it on line with zero installation then there is like the best guides to",
    "start": "3058900",
    "end": "3067390"
  },
  {
    "text": "learning a little bit of Cortland is this Cortland Cohen's written by JetBrains people is pretty good if you don't know a colon it's a bunch of",
    "start": "3067390",
    "end": "3073720"
  },
  {
    "text": "failing tests and you need to complete the task and then the test will pass you can clone it from github or try it on",
    "start": "3073720",
    "end": "3080230"
  },
  {
    "text": "this website it's really good thing I did 99 for Cortland problems basically",
    "start": "3080230",
    "end": "3085240"
  },
  {
    "text": "there was this what somebody wrote 99 Prolog problems then it was trans",
    "start": "3085240",
    "end": "3090310"
  },
  {
    "text": "transform to Scala I did the Scala wonder every digit and Colton did it too many times then there is great side",
    "start": "3090310",
    "end": "3096940"
  },
  {
    "text": "Copeland EarthLink it has a bunch of stuff if you interesting obviously there is Twitter there is a blog for causing",
    "start": "3096940",
    "end": "3102670"
  },
  {
    "text": "the best thing about this blog is it showed his coffin existed for many years and they've been blogging all alone so",
    "start": "3102670",
    "end": "3108730"
  },
  {
    "text": "he read all the old blog posts you will see evolution of the language is like the yeah there were quite a few",
    "start": "3108730",
    "end": "3114280"
  },
  {
    "text": "interesting things and the way the document is really good there's also cotton it's pretty good there is this discussed",
    "start": "3114280",
    "end": "3121240"
  },
  {
    "text": "forums there is slack cycles quite nice you can see in this screen chooses 5000",
    "start": "3121240",
    "end": "3126610"
  },
  {
    "text": "people now it's 15,000 because I took this connection one time ago before Google approved courtliness",
    "start": "3126610",
    "end": "3133080"
  },
  {
    "text": "first-class language for Android then there was cotton conf in San Francisco",
    "start": "3133080",
    "end": "3138760"
  },
  {
    "text": "and there will be somewhere in other next year or this year sorry there will be another conference",
    "start": "3138760",
    "end": "3145060"
  },
  {
    "text": "it's not announced way yet I hope it's in Europe maybe here and then there is",
    "start": "3145060",
    "end": "3151210"
  },
  {
    "text": "the : future there will be 1 point 3 days there are core routines which already released but the interesting bit",
    "start": "3151210",
    "end": "3157360"
  },
  {
    "text": "is library supports for career scenes and then the risk Oakland native as I said the Scotland is multi can multi",
    "start": "3157360",
    "end": "3163960"
  },
  {
    "text": "platform so right now coordinators actually works you can use it but it's not production quality so hopefully it",
    "start": "3163960",
    "end": "3169780"
  },
  {
    "text": "will be maybe in a year so it will be interesting and this is pretty much in thank you for watching",
    "start": "3169780",
    "end": "3177390"
  },
  {
    "text": "[Applause]",
    "start": "3177390",
    "end": "3182660"
  }
]