[
  {
    "text": "okay uh it's time to start this is uh just a funny thing fromation uh",
    "start": "4960",
    "end": "12160"
  },
  {
    "text": "uh it's actually a game of tic tac to and uh if you cannot read it uh the",
    "start": "12160",
    "end": "19480"
  },
  {
    "text": "font in slide is much bigger so hi what we have been",
    "start": "19480",
    "end": "24800"
  },
  {
    "text": "everything for I am Hana and it's great to be here again after 3 years no third time sorry",
    "start": "24800",
    "end": "33280"
  },
  {
    "text": "I'm nervous uh I'm newly co-chair of e Evolution working group in C committee",
    "start": "33280",
    "end": "39800"
  },
  {
    "text": "I'm also chair of reflection study group and you probably know me about for",
    "start": "39800",
    "end": "46039"
  },
  {
    "text": "CTR and also for c h but I didn't present that and in this in this like",
    "start": "46039",
    "end": "51960"
  },
  {
    "text": "for this talk for Library called Cur and I love",
    "start": "51960",
    "end": "58920"
  },
  {
    "text": "JavaScript yeah by the way uh I know the audience here can be a little bit cold so I have",
    "start": "58920",
    "end": "67400"
  },
  {
    "text": "I have chocolate here and every everyone who ask question will get a chocolate yeah they are great by the",
    "start": "67400",
    "end": "75880"
  },
  {
    "text": "way anyway so uh I love JavaScript and when",
    "start": "75880",
    "end": "82759"
  },
  {
    "text": "I was on committee meeting in wna I got little board one one morning and I wrote",
    "start": "82759",
    "end": "89119"
  },
  {
    "text": "small thingy uh maybe you saw it it's a search",
    "start": "89119",
    "end": "95040"
  },
  {
    "text": "engine where is my csor here and it uh search in uh C++",
    "start": "95040",
    "end": "102320"
  },
  {
    "text": "uh C++ standard and uh CPP reference so you can like type thread and it will",
    "start": "102320",
    "end": "109040"
  },
  {
    "text": "search there it's really quick because everything is happening in your browser",
    "start": "109040",
    "end": "114119"
  },
  {
    "text": "and asynchronously with JavaScript and you can also do you know that C++",
    "start": "114119",
    "end": "119240"
  },
  {
    "text": "standard there is Vel ruptor VY",
    "start": "119240",
    "end": "126159"
  },
  {
    "text": "sorry Vel ruptor there is a V ruptor and",
    "start": "126159",
    "end": "131280"
  },
  {
    "text": "it's here is",
    "start": "131280",
    "end": "137040"
  },
  {
    "text": "it they moov the example for oh my okay anyway that doesn't",
    "start": "137040",
    "end": "143920"
  },
  {
    "text": "matter um okay let's move on and this search engine works like this it will uh",
    "start": "143920",
    "end": "149360"
  },
  {
    "text": "download asynchronously parts of the index it's reverse full Tex andram based index and",
    "start": "149360",
    "end": "155800"
  },
  {
    "text": "it will calculate intersection and it will give you nice results uh and it's using fetch in in",
    "start": "155800",
    "end": "164040"
  },
  {
    "text": "JavaScript like this a fetch some Ural it will give you Pro result of the",
    "start": "164040",
    "end": "169480"
  },
  {
    "text": "promise and you can work with it you can extract Json text whatever how many of you know fetch in",
    "start": "169480",
    "end": "177280"
  },
  {
    "text": "JavaScript please raise your hand okay uh I will count with the uh General",
    "start": "177280",
    "end": "183720"
  },
  {
    "text": "coldness of Norwegian audience so it's like more than half anyway uh so you can also do this",
    "start": "183720",
    "end": "191560"
  },
  {
    "text": "you have multiple fetches and you can have promise all and wait for all of the promises to be",
    "start": "191560",
    "end": "197200"
  },
  {
    "text": "fulfilled and return like one common promise and I think this is really",
    "start": "197200",
    "end": "203239"
  },
  {
    "text": "lovely and I want something similar in C++ I want to have Fetch and C++ because",
    "start": "203239",
    "end": "209319"
  },
  {
    "text": "uh every time you see someone talking about Cod routines or general synchronicity or networking in C++ it's",
    "start": "209319",
    "end": "217439"
  },
  {
    "text": "mostly about sockets not even TLS sockets but just raw sockets and try to",
    "start": "217439",
    "end": "223760"
  },
  {
    "text": "build something high level maybe business logic uh with that it's really hard and",
    "start": "223760",
    "end": "229840"
  },
  {
    "text": "I think it's not fair uh for C+ plus it's just for some reason C++ developers like",
    "start": "229840",
    "end": "236319"
  },
  {
    "text": "to develop everything uh from bottom to understand everything and I think it's",
    "start": "236319",
    "end": "241680"
  },
  {
    "text": "not needed all the time yeah we have as function which marks the function which",
    "start": "241680",
    "end": "247280"
  },
  {
    "text": "is as synchros uh some name with take prefix and we will download each files and yeah wait for that and return the",
    "start": "247280",
    "end": "254159"
  },
  {
    "text": "promise so in C++ and C world we have lip curl how many of you at least once use",
    "start": "254159",
    "end": "262520"
  },
  {
    "text": "lip curl okay that's pretty good number so you probably know it it's pretty simple",
    "start": "262520",
    "end": "269240"
  },
  {
    "text": "API and it uh yeah it's 27 years old it's nice API you have many many uh supported",
    "start": "269240",
    "end": "276600"
  },
  {
    "text": "protocols HTTP htps you don't need to care you just provide your and it will",
    "start": "276600",
    "end": "281840"
  },
  {
    "text": "give you what you want it's really simple so it looks like this you",
    "start": "281840",
    "end": "287600"
  },
  {
    "text": "initialize your uh handle with easy function that is easy API because it's really easy you will check if it's null",
    "start": "287600",
    "end": "294919"
  },
  {
    "text": "because you need to do error checking obviously and adise return some like",
    "start": "294919",
    "end": "300400"
  },
  {
    "text": "error whatever then you set EUR to to be downloaded you will maybe allow to",
    "start": "300400",
    "end": "307919"
  },
  {
    "text": "follow it to follow the directions if you want and then you call perform which",
    "start": "307919",
    "end": "313680"
  },
  {
    "text": "will do all the io for you and it will block you until it's finished and if there was an error you",
    "start": "313680",
    "end": "320240"
  },
  {
    "text": "can print error and at the end you need to do clean up typical C API it's kind",
    "start": "320240",
    "end": "326160"
  },
  {
    "text": "of nice and clean and it map really nicely to Ri so uh let's map it into RI oh not",
    "start": "326160",
    "end": "334440"
  },
  {
    "text": "sorry not yet how do we get the output not to the standard output which is",
    "start": "334440",
    "end": "340039"
  },
  {
    "text": "default Behavior but into let's say string and we are going little bit into C++ for now so we have a string we",
    "start": "340039",
    "end": "347240"
  },
  {
    "text": "provide a pointer to the string through void star pointer because it's the API",
    "start": "347240",
    "end": "353680"
  },
  {
    "text": "and we provide Lambda uh with some like uh defined uh the C definition and uh we",
    "start": "353680",
    "end": "362720"
  },
  {
    "text": "take the string as a pointer to string and get reference to it and every time we",
    "start": "362720",
    "end": "369360"
  },
  {
    "text": "get some BL like piece of data we will just open to the string it's not efficient but I don't care we are",
    "start": "369360",
    "end": "375720"
  },
  {
    "text": "downloading from internet so uh and return size that's",
    "start": "375720",
    "end": "381240"
  },
  {
    "text": "because it's needed and then you will provide uh the pointer to the Lambda uh",
    "start": "381240",
    "end": "386759"
  },
  {
    "text": "as a pointer to the Library call perform and every time there is a piece it will",
    "start": "386759",
    "end": "392560"
  },
  {
    "text": "call your Lambda and store data into the string so far so good same error now",
    "start": "392560",
    "end": "398800"
  },
  {
    "text": "with exceptions because we are living in more modern world and at the end let on the string",
    "start": "398800",
    "end": "405919"
  },
  {
    "text": "if you have any questions don't be afraid to ask because it's going to be little bit weirder yes",
    "start": "405919",
    "end": "412160"
  },
  {
    "text": "you want chocolate yes uh yeah uh I omited because",
    "start": "412160",
    "end": "419919"
  },
  {
    "text": "it's just part it's not like I I'm not even initializing the handle here but uh",
    "start": "419919",
    "end": "426039"
  },
  {
    "text": "yeah sorry yeah that will be some like collateral damage sorry anyway uh let's",
    "start": "426039",
    "end": "433599"
  },
  {
    "text": "say uh the r repper here it's in namespace cural it's called easy handle",
    "start": "433599",
    "end": "439400"
  },
  {
    "text": "you provide Constructor because every time you also providing Cur so it should be part kind of Constructor so I I made",
    "start": "439400",
    "end": "445720"
  },
  {
    "text": "such Constructor too there is a distructor I'm omiting like uh assignment and copy Constructor move",
    "start": "445720",
    "end": "453000"
  },
  {
    "text": "Constructors we have some options we can set later so we again follow location",
    "start": "453000",
    "end": "459199"
  },
  {
    "text": "everything is typed and nice as a like function not like just like uh property",
    "start": "459199",
    "end": "464280"
  },
  {
    "text": "uh with some like op interface and also wrate into which is a template which take any appendable container you can",
    "start": "464280",
    "end": "470759"
  },
  {
    "text": "append into and there is a s perform which is I want to be visible that uh",
    "start": "470759",
    "end": "477159"
  },
  {
    "text": "this perform is like synchronous so it will block you and it should be visible in your",
    "start": "477159",
    "end": "482440"
  },
  {
    "text": "code so this is like highlight of the r",
    "start": "482440",
    "end": "487639"
  },
  {
    "text": "API okay and fetch so fetch uh will declare create the uh handle with",
    "start": "487639",
    "end": "497199"
  },
  {
    "text": "Constructor it will set the like red dire that we will follow red directions we will provide the container to right",
    "start": "497199",
    "end": "503520"
  },
  {
    "text": "into we will call the sense perform if there is an error we will throw an exception otherwise you will return",
    "start": "503520",
    "end": "510680"
  },
  {
    "text": "string I think it's it should be obvious if",
    "start": "510680",
    "end": "515880"
  },
  {
    "text": "not we can redo it anyways what I want to do is same function but which will",
    "start": "515880",
    "end": "522800"
  },
  {
    "text": "return promise and coate for perform which is",
    "start": "522800",
    "end": "527880"
  },
  {
    "text": "not synchronous that's what I want because I don't need to write HTTP",
    "start": "527880",
    "end": "533399"
  },
  {
    "text": "parsing DLS handling I just can use the lip curl for that and and just write a",
    "start": "533399",
    "end": "540160"
  },
  {
    "text": "wer around coroutines and that's we are we been waiting for so and at the end we we have",
    "start": "540160",
    "end": "548680"
  },
  {
    "text": "theore keywords I hate it but it's something I can live it if I can get as",
    "start": "548680",
    "end": "555880"
  },
  {
    "text": "synchronous programming in C++ so scary",
    "start": "555880",
    "end": "560920"
  },
  {
    "text": "coroutines it's coroutines were part of C++ 20 and there was like SC before that",
    "start": "560920",
    "end": "567160"
  },
  {
    "text": "why don't we have them yet we have some libraries and so on there multiple reasons do you have any other reasons",
    "start": "567160",
    "end": "573920"
  },
  {
    "text": "stand these",
    "start": "573920",
    "end": "576399"
  },
  {
    "text": "three sorry support compiler support there",
    "start": "581399",
    "end": "588120"
  },
  {
    "text": "is four like multiple years already some support at least in Clank if you are",
    "start": "588120",
    "end": "593399"
  },
  {
    "text": "targeting multiple compilers I can get it but mostly people just Target one compiler I'm I'm more like be and person",
    "start": "593399",
    "end": "601480"
  },
  {
    "text": "so but yeah that's good reason also some on meet up last week someone show that",
    "start": "601480",
    "end": "607760"
  },
  {
    "text": "exod didn't support tines until recently yeah but now it does so yeah we can",
    "start": "607760",
    "end": "616560"
  },
  {
    "text": "continue but fun uh before I explain how cortin C+ Works let's say function are",
    "start": "616560",
    "end": "623519"
  },
  {
    "text": "just specialized coroutines they are subset of all coroutines",
    "start": "623519",
    "end": "629839"
  },
  {
    "text": "kind of logically so function usually have one starting point you call in",
    "start": "629839",
    "end": "635560"
  },
  {
    "text": "start at the bottom at the top that is one entry point and you can have multiple exits uh you can have multiple",
    "start": "635560",
    "end": "641839"
  },
  {
    "text": "returns and you will never go back uh and because they are behaving as a scope lifetime of the members are really easy",
    "start": "641839",
    "end": "648079"
  },
  {
    "text": "like to think about functions look like this you have",
    "start": "648079",
    "end": "654240"
  },
  {
    "text": "color which will call something and go back call another thing go back call another thing go back back everyone",
    "start": "654240",
    "end": "660320"
  },
  {
    "text": "knows the function and maybe spaget maybe",
    "start": "660320",
    "end": "667079"
  },
  {
    "text": "developers from Italy they don't like function because spaghetti development but yeah uh cortines can have uh still",
    "start": "667079",
    "end": "676519"
  },
  {
    "text": "only one starting uh point but multiple entry points because you can suspend",
    "start": "676519",
    "end": "682120"
  },
  {
    "text": "them and resume them again and uh uh you can continue in code which is",
    "start": "682120",
    "end": "687279"
  },
  {
    "text": "there and they can ALS have multiple exit points as a function but the lifetime of the cin",
    "start": "687279",
    "end": "693800"
  },
  {
    "text": "itself is uh defined by author of the library because uh your coroutine can",
    "start": "693800",
    "end": "701480"
  },
  {
    "text": "have lifetime of the color as same as a function but it can have it can be like longli task or living in background it",
    "start": "701480",
    "end": "708519"
  },
  {
    "text": "can be some like service which communicate with other coroutines it can be uh generator which is going like this",
    "start": "708519",
    "end": "717240"
  },
  {
    "text": "actually I have image for that so you you have color you will call",
    "start": "717240",
    "end": "722320"
  },
  {
    "text": "generator it will return immediately because it's lazy and every time you resume it uh uh it will give you some",
    "start": "722320",
    "end": "729240"
  },
  {
    "text": "value suspend you will resume it and it give you suspend and and so on so on like this that's generator and at the",
    "start": "729240",
    "end": "735800"
  },
  {
    "text": "end when you no longer generator is not needed it's just because cortin is just",
    "start": "735800",
    "end": "741079"
  },
  {
    "text": "an object the lifetime of the generator will uh cease to exist and it will",
    "start": "741079",
    "end": "747839"
  },
  {
    "text": "destroy with D structor pretty cleanly but if you are writing your own cortin",
    "start": "747839",
    "end": "752920"
  },
  {
    "text": "types you are deciding what the lifetime will be so cortin looks like this because uh",
    "start": "752920",
    "end": "759639"
  },
  {
    "text": "that's one thing I got a lot cortines are not threats some people because some",
    "start": "759639",
    "end": "765639"
  },
  {
    "text": "libraries uh will give you thread pool and task and uh it seem complicated but",
    "start": "765639",
    "end": "771199"
  },
  {
    "text": "actually cortines are think which running in one thre in one threat it's like preemptive multitasking it's your",
    "start": "771199",
    "end": "777480"
  },
  {
    "text": "on your responsibility what will be scheduled and when but it's still happening in one threat so you can",
    "start": "777480",
    "end": "783959"
  },
  {
    "text": "think everything is local you don't need Lo anything unless you jump into different different threat but that's not thing",
    "start": "783959",
    "end": "791279"
  },
  {
    "text": "inheritant to coroutines threats on other side they are running definitely",
    "start": "791279",
    "end": "796519"
  },
  {
    "text": "in parallel and whenever you waiting for something the threat is blocked and it's responsibility of operation system to",
    "start": "796519",
    "end": "804279"
  },
  {
    "text": "schedule it or V later but with cortin it's your responsibility to know what",
    "start": "804279",
    "end": "811440"
  },
  {
    "text": "should be scheduled next what should be like resumed and so on so",
    "start": "811440",
    "end": "816639"
  },
  {
    "text": "on so in JavaScript you have function divide which is just normal function",
    "start": "816639",
    "end": "822560"
  },
  {
    "text": "which will take two numbers check for the numbers and through exception and uh",
    "start": "822560",
    "end": "827639"
  },
  {
    "text": "return value as synchronous function will look almost same but there is",
    "start": "827639",
    "end": "834399"
  },
  {
    "text": "the oh sorry that is the asense keyword otherwise it's same in C++ we have the",
    "start": "834399",
    "end": "840160"
  },
  {
    "text": "weird uh Co keybords and they they Mark",
    "start": "840160",
    "end": "845440"
  },
  {
    "text": "the routine so when when you use Co keyword coore keyword the function will",
    "start": "845440",
    "end": "850759"
  },
  {
    "text": "became coroutine and also the like R type of the function will describe like",
    "start": "850759",
    "end": "856399"
  },
  {
    "text": "Define the behavior of the routine in this case uh it's same function I way yeah I I do have error",
    "start": "856399",
    "end": "864000"
  },
  {
    "text": "because you can provide Min minus like numeric liit min for INT and it will",
    "start": "864000",
    "end": "870000"
  },
  {
    "text": "give you yeah and throw exception and at the end it will divide the number and",
    "start": "870000",
    "end": "876639"
  },
  {
    "text": "coron the function in there because cortin are if you use keyboard a CO yeld",
    "start": "876639",
    "end": "884320"
  },
  {
    "text": "coron your function is now coroutine but coroutine also must have defined cortin",
    "start": "884320",
    "end": "890000"
  },
  {
    "text": "traits for your return type and arguments but usually you don't need to",
    "start": "890000",
    "end": "895160"
  },
  {
    "text": "specialize this template because this template is created for you by by default and if you return type contain",
    "start": "895160",
    "end": "902000"
  },
  {
    "text": "subtype promise type it will uh use do type promise uncore type so you have",
    "start": "902000",
    "end": "909079"
  },
  {
    "text": "like type name the arguments which are ignored and uh it will take the promise type from from the uh your return type",
    "start": "909079",
    "end": "916880"
  },
  {
    "text": "and return the promise type uh to the compiler but you can specialize this",
    "start": "916880",
    "end": "922040"
  },
  {
    "text": "coting trait for your uh purposes so you can actually take uh standard uh set",
    "start": "922040",
    "end": "929480"
  },
  {
    "text": "promise and Prov in your code make it coroutine if you want or you can have",
    "start": "929480",
    "end": "936399"
  },
  {
    "text": "different promise type based on the argument of the template of the coutin",
    "start": "936399",
    "end": "942040"
  },
  {
    "text": "it's sometimes used to pass allocator because you want to have",
    "start": "942040",
    "end": "947480"
  },
  {
    "text": "allocator inside of Promise type not just in a body of the function okay but a model of ltin it",
    "start": "947480",
    "end": "955519"
  },
  {
    "text": "looks like this you have program stack which is growing down and and somewhere there you have the function D because",
    "start": "955519",
    "end": "960920"
  },
  {
    "text": "I'm writing function which behaves as a cortin beh as a function and inside the",
    "start": "960920",
    "end": "965959"
  },
  {
    "text": "function there is a cortin handle which you can think it's just pointer like white star pointer pointing at coroutine",
    "start": "965959",
    "end": "972839"
  },
  {
    "text": "which can be allocated somewhere it can be on Heap it can be on stack don't",
    "start": "972839",
    "end": "977880"
  },
  {
    "text": "think about it much and in cortin you have resum point which is a pointer uh to code where uh the cordine will be",
    "start": "977880",
    "end": "986199"
  },
  {
    "text": "like resumed next time when you call resume and there is a function promise type",
    "start": "986199",
    "end": "991959"
  },
  {
    "text": "which can store like result exception if you if you hand handling them avator",
    "start": "991959",
    "end": "997720"
  },
  {
    "text": "scheduler and that is a coutin frame which is frame exact of exact size which",
    "start": "997720",
    "end": "1002759"
  },
  {
    "text": "you need for your all variables at your in your coroutine which will survive any",
    "start": "1002759",
    "end": "1009759"
  },
  {
    "text": "uh suspension point and yellow parts are uh your own",
    "start": "1009759",
    "end": "1015000"
  },
  {
    "text": "to write if you're writing coroutine yellow parts are things you",
    "start": "1015000",
    "end": "1020839"
  },
  {
    "text": "write if you want to just use coroutines you will write only the right one and",
    "start": "1020839",
    "end": "1027120"
  },
  {
    "text": "rest will be Pro provided for you by some library but if you want to write your own cortin Library you need to",
    "start": "1027120",
    "end": "1032520"
  },
  {
    "text": "write these three or first two actually uh yellow",
    "start": "1032520",
    "end": "1039558"
  },
  {
    "text": "blocks I see people noing which is strong agree that they people agree understand so we can move on",
    "start": "1042039",
    "end": "1049160"
  },
  {
    "text": "uh cortin handle just like to let you know how it's just internally just like",
    "start": "1049160",
    "end": "1054320"
  },
  {
    "text": "vo star pointer has some member functions like destroy yeah and it has like it's",
    "start": "1054320",
    "end": "1060679"
  },
  {
    "text": "templated by based on the premise type or it can be polymorphic with void",
    "start": "1060679",
    "end": "1066080"
  },
  {
    "text": "promise type so you can have cortin handle to any coroutine or you can have cortin handle for your special promise",
    "start": "1066080",
    "end": "1072160"
  },
  {
    "text": "type but otherwise it can be destroyed if you call destroy it will destroy the",
    "start": "1072160",
    "end": "1077400"
  },
  {
    "text": "cortin frame and everything everything in it with promise type and it will allocate and do the cleaning for you",
    "start": "1077400",
    "end": "1084200"
  },
  {
    "text": "resume will look on the pointer and resum Deco routine for you uh and it will run Deco routine on on your stack",
    "start": "1084200",
    "end": "1091640"
  },
  {
    "text": "for variables s doesn't need to live like through suspension but uh all",
    "start": "1091640",
    "end": "1097280"
  },
  {
    "text": "variables which are on like which will outlift suspension will be on this Tech frame or stackless frame of the routine",
    "start": "1097280",
    "end": "1105799"
  },
  {
    "text": "and then you have also done and explicit operator which will check if the ctin was finished it reached last suspension",
    "start": "1105799",
    "end": "1113120"
  },
  {
    "text": "point at the end of the function which is provided for you by a compiler and then you have access uh",
    "start": "1113120",
    "end": "1119960"
  },
  {
    "text": "access to promise and uh you can get promise from out of the coutin handle",
    "start": "1119960",
    "end": "1125120"
  },
  {
    "text": "but only if the promised uh type is not void because you cannot get reference to void and you can also build uh detin",
    "start": "1125120",
    "end": "1132760"
  },
  {
    "text": "handle if you have reference to prise type and you can also get uh just wa St",
    "start": "1132760",
    "end": "1138559"
  },
  {
    "text": "address and build a uh cotin handle from the voar",
    "start": "1138559",
    "end": "1144360"
  },
  {
    "text": "address uh because uh sometimes you want to interact with cap API like I do with",
    "start": "1144360",
    "end": "1151679"
  },
  {
    "text": "Co okay and the function the first type you as a like Library author you will",
    "start": "1151840",
    "end": "1158200"
  },
  {
    "text": "write is function with like with some type is my return type contains the",
    "start": "1158200",
    "end": "1165240"
  },
  {
    "text": "premise type I will look at that later contains uh the Handler type which is stored because the function must own the",
    "start": "1165240",
    "end": "1172559"
  },
  {
    "text": "hand like Deco routine actually this function behaves kind of like unique pointer so uh the lifetime accting is",
    "start": "1172559",
    "end": "1179880"
  },
  {
    "text": "tied to the function lifetime because it's a function so so the function shouldn't exist",
    "start": "1179880",
    "end": "1185440"
  },
  {
    "text": "if handle to doesn't exist there is a Constructor which will take the handle",
    "start": "1185440",
    "end": "1190799"
  },
  {
    "text": "and just store it that is a Destructor which will destroy the handle and at the end you can access uh",
    "start": "1190799",
    "end": "1198240"
  },
  {
    "text": "D result value from the Coltin or you can also use cast to the same type if if",
    "start": "1198240",
    "end": "1204880"
  },
  {
    "text": "just assign int a equals function call so you can actually use it as a function",
    "start": "1204880",
    "end": "1211520"
  },
  {
    "text": "call so uh how does like suspension Works imagine you have a Lambda and in",
    "start": "1211520",
    "end": "1218880"
  },
  {
    "text": "Lambda you have some like some like captures and you have one more like uh",
    "start": "1218880",
    "end": "1225200"
  },
  {
    "text": "capture additional capture which is the resum point which will store point to address where it will be like resumed",
    "start": "1225200",
    "end": "1231840"
  },
  {
    "text": "and at start of the Lamb function or Lambda it will always jump sorry there",
    "start": "1231840",
    "end": "1236960"
  },
  {
    "text": "should be resum point I Chang this change the text it will jump to the uh",
    "start": "1236960",
    "end": "1242280"
  },
  {
    "text": "label so it will jump to State one when it's start for first time and then it it",
    "start": "1242280",
    "end": "1248520"
  },
  {
    "text": "will run some code and when there is a suspension point it will store the address for the continuation for the",
    "start": "1248520",
    "end": "1254720"
  },
  {
    "text": "suspension after the suspension point and return from it back to col color let's say let's pretend it will always",
    "start": "1254720",
    "end": "1260679"
  },
  {
    "text": "return return back to color and uh again it will go to and and so on so on so",
    "start": "1260679",
    "end": "1266760"
  },
  {
    "text": "every time you suspend the Lambda it will just store uh the uh address do the",
    "start": "1266760",
    "end": "1272600"
  },
  {
    "text": "some cleaning and return returns or jump somewhere okay uh and each suspend point",
    "start": "1272600",
    "end": "1279919"
  },
  {
    "text": "is marked with co8 in your in application code or Co yield because Co yeld is just",
    "start": "1279919",
    "end": "1286000"
  },
  {
    "text": "syntactic sugar over Co coate so uh more complex",
    "start": "1286000",
    "end": "1292640"
  },
  {
    "text": "suspension is actually like uh when you call aate on something on a table the a table is a type which must have three",
    "start": "1292640",
    "end": "1300080"
  },
  {
    "text": "functions one is a ready so uh when you write coate something it will ask if the",
    "start": "1300080",
    "end": "1308480"
  },
  {
    "text": "something is aate ready which means uh that there is something you are already asking for if",
    "start": "1308480",
    "end": "1315000"
  },
  {
    "text": "it's not you need to suspend and do something uh else to get it later so if",
    "start": "1315000",
    "end": "1320200"
  },
  {
    "text": "it's not a ready then uh we need to store where we will like resume next",
    "start": "1320200",
    "end": "1326520"
  },
  {
    "text": "time when we will like resume this current coroutine if a suspend function of the",
    "start": "1326520",
    "end": "1332679"
  },
  {
    "text": "uh something R void we just suspend with Cent cortin handle so the a table can",
    "start": "1332679",
    "end": "1340120"
  },
  {
    "text": "actually maybe pass the handle of the coroutine to some schedu or to be a like",
    "start": "1340120",
    "end": "1345919"
  },
  {
    "text": "a resume later if uh a suspend returns",
    "start": "1345919",
    "end": "1351159"
  },
  {
    "text": "bull it gives option uh to the Alor uh to the side if it actually wants to",
    "start": "1351159",
    "end": "1357039"
  },
  {
    "text": "suspend or not so if if you return through it will suspend otherwise it will continue and if you return cortin",
    "start": "1357039",
    "end": "1364039"
  },
  {
    "text": "handle from the function it will uh call the suspense toly uh handle somewhere and uh return",
    "start": "1364039",
    "end": "1372120"
  },
  {
    "text": "another handle and it will just jump there so you can jump to different coroutine so like let's say I will coate",
    "start": "1372120",
    "end": "1379240"
  },
  {
    "text": "on something which I know will be done by other coroutine and I know I know the handle so I will just jump to the",
    "start": "1379240",
    "end": "1384679"
  },
  {
    "text": "coroutine uh which will do it for me and later I will be resumed uh here and",
    "start": "1384679",
    "end": "1390600"
  },
  {
    "text": "after and when I'm resumed I will jump here and there is third function a assum",
    "start": "1390600",
    "end": "1396840"
  },
  {
    "text": "and AUM is called uh and it will give me the result of the coate so if I write",
    "start": "1396840",
    "end": "1402360"
  },
  {
    "text": "coate expression the expression will aable and the uh",
    "start": "1402360",
    "end": "1408520"
  },
  {
    "text": "a resume from the aable will give me uh result which I can assign to something",
    "start": "1408520",
    "end": "1414559"
  },
  {
    "text": "or return somewhere okay we in C++ standard we",
    "start": "1414559",
    "end": "1420559"
  },
  {
    "text": "provide two uh Ables ready for you because they are really useful one is",
    "start": "1420559",
    "end": "1426279"
  },
  {
    "text": "suspend always which will always suspend always return false it's Conex",
    "start": "1426279",
    "end": "1431840"
  },
  {
    "text": "uh suspend or will just don't do anything AUM returns Vo",
    "start": "1431840",
    "end": "1438200"
  },
  {
    "text": "not doing anything and suspend never will never suspend because it will through so every suspend is there just",
    "start": "1438200",
    "end": "1445120"
  },
  {
    "text": "like for fun probably and AIT Zoom won't do anything it will",
    "start": "1445120",
    "end": "1451559"
  },
  {
    "text": "void these are two really useful because if you just want to suspend and do something else with some schedule just",
    "start": "1451559",
    "end": "1460480"
  },
  {
    "text": "return suspend always coate on it anyway D function promise type has uh it's like",
    "start": "1460480",
    "end": "1469440"
  },
  {
    "text": "customization point for cortines which sometimes scare people and that's the main reason why people don't use cortin",
    "start": "1469440",
    "end": "1475840"
  },
  {
    "text": "more because there is so many customization point but uh when you start writing coroutines you will find",
    "start": "1475840",
    "end": "1482159"
  },
  {
    "text": "every customization point there is is useful you can you you can uh something",
    "start": "1482159",
    "end": "1488080"
  },
  {
    "text": "is for generator something is for promises something something is for tasks so uh every Co routine needs",
    "start": "1488080",
    "end": "1495840"
  },
  {
    "text": "initial suspend and final suspend initial suspend is uh point before you",
    "start": "1495840",
    "end": "1501399"
  },
  {
    "text": "enter the body of your o routine you give opportunity to auor to decide if",
    "start": "1501399",
    "end": "1506480"
  },
  {
    "text": "the uh task promise will suspend immediately it will be lazy or it will",
    "start": "1506480",
    "end": "1512279"
  },
  {
    "text": "never suspend and it will be immediate so you can actually run uh in Python you",
    "start": "1512279",
    "end": "1518399"
  },
  {
    "text": "have uh as synchronous programming which is lazy and in JavaScript you have",
    "start": "1518399",
    "end": "1524159"
  },
  {
    "text": "immediate model so you can actually do both here here uh and final suspend uh is when uh",
    "start": "1524159",
    "end": "1532760"
  },
  {
    "text": "your function reach end uh of the body with exception with uh coron or just",
    "start": "1532760",
    "end": "1539120"
  },
  {
    "text": "reaching the end you can suspend the promise to wa uh so you can actually uh",
    "start": "1539120",
    "end": "1546080"
  },
  {
    "text": "aate uh not aate you can uh extract the result from it maybe or",
    "start": "1546080",
    "end": "1552120"
  },
  {
    "text": "the exception or maybe you don't care because uh no one will waiting for you so you can just uh never suspend and",
    "start": "1552120",
    "end": "1559720"
  },
  {
    "text": "when uh when the cortin reach past the final final suspend point it's not",
    "start": "1559720",
    "end": "1565720"
  },
  {
    "text": "suspended it will destroy itself and a clean memory and everything is clean clean and",
    "start": "1565720",
    "end": "1572000"
  },
  {
    "text": "removed but uh it depends what you want if you are writing some like uh background task you will never write on",
    "start": "1572080",
    "end": "1579880"
  },
  {
    "text": "just destroy it but if you writing function you want to suspend because you want to extract something from it and",
    "start": "1579880",
    "end": "1586039"
  },
  {
    "text": "you don't want to be destroyed and then there is a function called get return object which will uh con return",
    "start": "1586039",
    "end": "1594640"
  },
  {
    "text": "uh the uh the left one the fun my function of T from the promise type",
    "start": "1594640",
    "end": "1600159"
  },
  {
    "text": "which is uh available to user in this case I will just uh take handle and",
    "start": "1600159",
    "end": "1605240"
  },
  {
    "text": "build uh I I will build handle from quent promise type and R function which is my",
    "start": "1605240",
    "end": "1612880"
  },
  {
    "text": "type uh to user then I have uh something to store the result of the actual",
    "start": "1612880",
    "end": "1619360"
  },
  {
    "text": "function and yeah it's a slight ver so if it's not initialized or some it's is",
    "start": "1619360",
    "end": "1624960"
  },
  {
    "text": "not initial like default initial type it's it's there are slid and then",
    "start": "1624960",
    "end": "1630840"
  },
  {
    "text": "you have also you can also handle exception intin because if you call a function Ander an",
    "start": "1630840",
    "end": "1636840"
  },
  {
    "text": "exception you user expect that uh the exception will fall of the function",
    "start": "1636840",
    "end": "1642480"
  },
  {
    "text": "outside so when you uh when you use Cor in body of your fun",
    "start": "1642480",
    "end": "1649159"
  },
  {
    "text": "coutin or coutin function uh it will actually called Promise return return",
    "start": "1649159",
    "end": "1654799"
  },
  {
    "text": "value and you you can take something and store it inside promise type but you don't need to store it you can send it",
    "start": "1654799",
    "end": "1660559"
  },
  {
    "text": "over Network you can log it you can just throw it away it's up to you as outter",
    "start": "1660559",
    "end": "1667120"
  },
  {
    "text": "and there is another exception so because the block of the uh function of",
    "start": "1667120",
    "end": "1672960"
  },
  {
    "text": "cord function is wrapped in TR catch block and uh if you throw any",
    "start": "1672960",
    "end": "1678039"
  },
  {
    "text": "exception this function will be called and you can take the exception pointer and store it to throw it",
    "start": "1678039",
    "end": "1684279"
  },
  {
    "text": "later but you can actually put there like St terminate and just terminate the uh code because you don't care about",
    "start": "1684279",
    "end": "1692480"
  },
  {
    "text": "exceptions so enter is rest of the function uh same The Constructor or",
    "start": "1692480",
    "end": "1697679"
  },
  {
    "text": "Destructor and get will just check with assert if it's done check if there is an",
    "start": "1697679",
    "end": "1702960"
  },
  {
    "text": "exception if there is an exception it will throw the uh exception out once you try to access it otherwise it will",
    "start": "1702960",
    "end": "1710120"
  },
  {
    "text": "return uh what like the result of the calculation the function that's the",
    "start": "1710120",
    "end": "1715840"
  },
  {
    "text": "function as atin do you have any question before I move",
    "start": "1715840",
    "end": "1722679"
  },
  {
    "text": "on no okay let's say example we have divide",
    "start": "1723360",
    "end": "1730360"
  },
  {
    "text": "function which takes arguments and we kind of return function and that is like it's SL ver so it's kind of like Lambda",
    "start": "1730360",
    "end": "1737679"
  },
  {
    "text": "but it's like handle a frame which will be immediately like run but I will copy the argument because the these are",
    "start": "1737679",
    "end": "1743679"
  },
  {
    "text": "always copied into the coutin frame to be accessible because they will survive",
    "start": "1743679",
    "end": "1748799"
  },
  {
    "text": "any uh like suspension and then uh I will call Initial suspend and coated it because",
    "start": "1748799",
    "end": "1755679"
  },
  {
    "text": "but my uh function uh will never suspend so it's like no op and then uh there is a Dr block I",
    "start": "1755679",
    "end": "1762880"
  },
  {
    "text": "will check for the uh that's the code I actually wrote as a user the exception",
    "start": "1762880",
    "end": "1768799"
  },
  {
    "text": "and instead of coron I have Ron value aide by B and after the Ron I will just",
    "start": "1768799",
    "end": "1775799"
  },
  {
    "text": "uh jump to the finish uh suspension point and there is also catch catch block and uh if I catch anything which",
    "start": "1775799",
    "end": "1783880"
  },
  {
    "text": "wasn't catch by user I call an exception and final suspend point will coate on",
    "start": "1783880",
    "end": "1790080"
  },
  {
    "text": "Final suspend so here you can decide if the function will outlive or like if it live",
    "start": "1790080",
    "end": "1797360"
  },
  {
    "text": "live longer until someone will take it from it or you can just cleanly destroy it it's up to you as",
    "start": "1797360",
    "end": "1804559"
  },
  {
    "text": "outdor okay but that's that was function so you can actually kind of build your",
    "start": "1804559",
    "end": "1810799"
  },
  {
    "text": "model but I need something more I I want promise like uh when you U do",
    "start": "1810799",
    "end": "1818320"
  },
  {
    "text": "asynchronous programming you promising something to user that you will return something so promise that's going to be",
    "start": "1818320",
    "end": "1826080"
  },
  {
    "text": "confusing because I have promised and promise underscore type so promise is similar as the",
    "start": "1826080",
    "end": "1832799"
  },
  {
    "text": "function there some like Constructors from handle type you cannot copy it but you can uh move it and if it's there you",
    "start": "1832799",
    "end": "1841200"
  },
  {
    "text": "will destroy it uh you can assign it uh and the promise like Cur promise is",
    "start": "1841200",
    "end": "1847799"
  },
  {
    "text": "available on its own so you can actually evate on the promise",
    "start": "1847799",
    "end": "1852960"
  },
  {
    "text": "itself so if it's ready then you we know that the uh uh underling routin was",
    "start": "1853039",
    "end": "1860399"
  },
  {
    "text": "finished so so if it's finished then it's ready and uh if not it it will call like",
    "start": "1860399",
    "end": "1868279"
  },
  {
    "text": "suspend and what we will do we will look into promise and call function which is called someone is waiting for me and who",
    "start": "1868279",
    "end": "1875320"
  },
  {
    "text": "is waiting for me a waiter and when some when something uh resume me it it will call a",
    "start": "1875320",
    "end": "1883360"
  },
  {
    "text": "resume of R type T which is the result of the promise if there is an exception because there",
    "start": "1883360",
    "end": "1890039"
  },
  {
    "text": "can be I will throw it otherwise I will just from promise return the",
    "start": "1890039",
    "end": "1896080"
  },
  {
    "text": "result okay and the promise promise promise promise _ type is just like",
    "start": "1896240",
    "end": "1903440"
  },
  {
    "text": "inherent from the function because it's similar with few differences I'm storing uh also aor the",
    "start": "1903440",
    "end": "1911880"
  },
  {
    "text": "cotin which is ating on me so if someone is called to aate on my promise I will just store handle of the promise there",
    "start": "1911880",
    "end": "1920639"
  },
  {
    "text": "so when I'm finished I can actually jump there directly and when initial suspend I'm",
    "start": "1920639",
    "end": "1927559"
  },
  {
    "text": "doing nice trick I will let my St also somewhere some schu I will let my",
    "start": "1927559",
    "end": "1932720"
  },
  {
    "text": "schedule know that uh I'm starting new Co routine this is also like use use use",
    "start": "1932720",
    "end": "1939720"
  },
  {
    "text": "part like interesting thing to do uh with initial suspend and then I will",
    "start": "1939720",
    "end": "1945080"
  },
  {
    "text": "never suspend and in F final suspend I will return my custom final suspend uh",
    "start": "1945080",
    "end": "1950799"
  },
  {
    "text": "type which uh takes the uh reference to promise and uh it will suspend it will",
    "start": "1950799",
    "end": "1961320"
  },
  {
    "text": "doesn't care resume and when it's suspend I will actually let my schedule know that uh I'm suspending this scoutin",
    "start": "1961320",
    "end": "1969240"
  },
  {
    "text": "and please select someone something else and maybe this my promise a avator is",
    "start": "1969240",
    "end": "1975279"
  },
  {
    "text": "waiting for me so so I'm letting schedule know that uh I'm finished and",
    "start": "1975279",
    "end": "1981399"
  },
  {
    "text": "maybe my avator is there maybe it's EMP empty uh ctin",
    "start": "1981399",
    "end": "1986880"
  },
  {
    "text": "handle and then I just return to the like to the compiler and it will suspend",
    "start": "1986880",
    "end": "1995200"
  },
  {
    "text": "my coroutine and there is a function someone is waiting for me with someone some other coroutine I will just store",
    "start": "1995200",
    "end": "2002639"
  },
  {
    "text": "it and ask schedule to suspend and select next gotin because I cannot",
    "start": "2002639",
    "end": "2009360"
  },
  {
    "text": "continue because uh what I'm waiting on is not ready yet because it was like uh",
    "start": "2009360",
    "end": "2016440"
  },
  {
    "text": "so I need uh to wait for something happen so I'm giving opportunity to",
    "start": "2016440",
    "end": "2022080"
  },
  {
    "text": "schedule to do something else so uh when you called uh on handle",
    "start": "2022080",
    "end": "2028240"
  },
  {
    "text": "on handle of for cural easy handle you will called perform it will give you lazy perform",
    "start": "2028240",
    "end": "2035080"
  },
  {
    "text": "type which is just a with reference to the easy handle and it will never be ready",
    "start": "2035080",
    "end": "2042200"
  },
  {
    "text": "because you need to actually do some IO and then uh when you suspend you will",
    "start": "2042200",
    "end": "2048839"
  },
  {
    "text": "associate the handle with curent routine there is like some like uh private",
    "start": "2048839",
    "end": "2054118"
  },
  {
    "text": "private pointer in uh Kur API and you just store pointer to the cortin handle",
    "start": "2054119",
    "end": "2060079"
  },
  {
    "text": "inside of the handle too much handles I know uh you will store cortin handle inside easy",
    "start": "2060079",
    "end": "2068040"
  },
  {
    "text": "handle and then uh you will ask K to suspend and select something",
    "start": "2068040",
    "end": "2073679"
  },
  {
    "text": "else or maybe the schedule will return some like maybe not and uh then resume",
    "start": "2073679",
    "end": "2081440"
  },
  {
    "text": "will return some result code error code doesn't matter how it's done it's like",
    "start": "2081440",
    "end": "2087000"
  },
  {
    "text": "little bit weird trick to do but uh it doesn't matter so we have color coroutine which",
    "start": "2087000",
    "end": "2095679"
  },
  {
    "text": "will start uh cortin just it's just normal call and cortin one will start",
    "start": "2095679",
    "end": "2102359"
  },
  {
    "text": "and until it's suddenly it's blocked because let's say uh I asked to download",
    "start": "2102359",
    "end": "2107680"
  },
  {
    "text": "some file from internet so it's blocked so it will suspend and SK schedule",
    "start": "2107680",
    "end": "2113440"
  },
  {
    "text": "doesn't know what to do yet so it will jump back to the color because the color",
    "start": "2113440",
    "end": "2119680"
  },
  {
    "text": "actually is not coating for the result the color doesn't care about the result yet mean and schedule will uh",
    "start": "2119680",
    "end": "2129160"
  },
  {
    "text": "store the Cod routine so it's associated with it then I will start another Cod routine and it will do same it will do",
    "start": "2129160",
    "end": "2136720"
  },
  {
    "text": "some preparation and then it will try to download something from internet and it will",
    "start": "2136720",
    "end": "2142200"
  },
  {
    "text": "suspend I still don't care about the result because I'm not coating I'm just like taking uh uh creating the uh",
    "start": "2142200",
    "end": "2149480"
  },
  {
    "text": "promise but I'm not Coating in it so schedule will learn about the routine",
    "start": "2149480",
    "end": "2155079"
  },
  {
    "text": "and another Co routine same thing okay and then color is going on",
    "start": "2155079",
    "end": "2161680"
  },
  {
    "text": "and then now I'm coating on the result of first coroutine and now everything is blocked",
    "start": "2161680",
    "end": "2168880"
  },
  {
    "text": "coroutine one is blocked cortin 2 is blocked cortin 3 is blocked color is blocked if I uh know that number of",
    "start": "2168880",
    "end": "2176400"
  },
  {
    "text": "blocked coroutine and started coroutine are same I can actually ask schedule hey",
    "start": "2176400",
    "end": "2182400"
  },
  {
    "text": "complete something for me something needs to happen because I no longer can move in my code so",
    "start": "2182400",
    "end": "2189440"
  },
  {
    "text": "schedule will do some IO and maybe some of thees will start in this case ctin",
    "start": "2189440",
    "end": "2195960"
  },
  {
    "text": "two finished but I'm not ating on it so again complete something for",
    "start": "2195960",
    "end": "2203079"
  },
  {
    "text": "me cortin one was finished so it will uh return return the coate and I'm now",
    "start": "2203079",
    "end": "2208760"
  },
  {
    "text": "coating on Cor 2 but that's done so it's aate ready so I don't need to suspend",
    "start": "2208760",
    "end": "2214839"
  },
  {
    "text": "now and I just continue and I'm waiting for cortin 3 there is uh there are two",
    "start": "2214839",
    "end": "2220880"
  },
  {
    "text": "cortines and like only and both of them are blocked so I will uh ask schedule",
    "start": "2220880",
    "end": "2226160"
  },
  {
    "text": "again to complete something and only thing which can happen is something happen with cortin 3 error finish it",
    "start": "2226160",
    "end": "2233000"
  },
  {
    "text": "will finish the iio but anyway it will like resume detin",
    "start": "2233000",
    "end": "2239000"
  },
  {
    "text": "three and continue and that's done nice thing with this is you you can",
    "start": "2239000",
    "end": "2245079"
  },
  {
    "text": "actually prepare multiple downloads and then Co them and they will happen thanks to the library in background in parallel",
    "start": "2245079",
    "end": "2252440"
  },
  {
    "text": "inside one thread so uh schedule simplified is a number of",
    "start": "2252440",
    "end": "2260440"
  },
  {
    "text": "running tasks or Pro like something and number of block task and every time you inform a that you are starting something",
    "start": "2260440",
    "end": "2267319"
  },
  {
    "text": "you will increase the Run number of running task when you fin final suspend some",
    "start": "2267319",
    "end": "2273640"
  },
  {
    "text": "routine you will decree uh decrement the number of running tasks",
    "start": "2273640",
    "end": "2279400"
  },
  {
    "text": "and then you will select next if there is some possible next maybe is maybe not because maybe someone is ating on the",
    "start": "2279400",
    "end": "2285400"
  },
  {
    "text": "routine maybe some someone is not yet ating if you suspend because you are ating on some IO you will just increment",
    "start": "2285400",
    "end": "2292560"
  },
  {
    "text": "number of block task and ask for something something else to run and",
    "start": "2292560",
    "end": "2298800"
  },
  {
    "text": "something else like select next will take the possible next if there is possible next it will unblock one uh one",
    "start": "2298800",
    "end": "2305160"
  },
  {
    "text": "gutin and uh it will run but if the number of running task",
    "start": "2305160",
    "end": "2310560"
  },
  {
    "text": "and block task is not same so the uh in the Cy I showed you before there is something else which can",
    "start": "2310560",
    "end": "2317720"
  },
  {
    "text": "be done probably because I just initialized I no coroutine which is cortine which will just like uh work",
    "start": "2317720",
    "end": "2325400"
  },
  {
    "text": "like return it will go back uh to color of current coroutine so it's just like",
    "start": "2325400",
    "end": "2331240"
  },
  {
    "text": "suspend current cortin go back and uh maybe later I will uh like resume the",
    "start": "2331240",
    "end": "2336960"
  },
  {
    "text": "function resume the routine otherwise because the number of running task and block task is same I will complete some",
    "start": "2336960",
    "end": "2345838"
  },
  {
    "text": "IO DEC the number of blocked and return the completed Cod routine and that is a function which",
    "start": "2346280",
    "end": "2353000"
  },
  {
    "text": "complete IO and for that I'm using multi op multi",
    "start": "2353000",
    "end": "2358720"
  },
  {
    "text": "multi API how many of you use multi API because uh yeah one person two okay",
    "start": "2358720",
    "end": "2367280"
  },
  {
    "text": "uh easy API is really easy because you just create a handle do some perform and wait for it with multi API you can",
    "start": "2367280",
    "end": "2374720"
  },
  {
    "text": "actually add the easy handle inside inside of multi handle you can remove it also and you",
    "start": "2374720",
    "end": "2381560"
  },
  {
    "text": "can call multiform which will do IO for you on multiple hand handles",
    "start": "2381560",
    "end": "2387200"
  },
  {
    "text": "together in parallel asynchronously and once uh something and you can also pull",
    "start": "2387200",
    "end": "2393319"
  },
  {
    "text": "on the I on read and EV from the network and you can ask the library hey let me",
    "start": "2393319",
    "end": "2401160"
  },
  {
    "text": "know which handle was finished you can get multiple of them by",
    "start": "2401160",
    "end": "2406599"
  },
  {
    "text": "multiple calling this function so uh complete iio look like this like this it's an infinite infinite",
    "start": "2406599",
    "end": "2413240"
  },
  {
    "text": "loop I will perform some IO like operation DLS hand handshakes whatever",
    "start": "2413240",
    "end": "2418920"
  },
  {
    "text": "and if something is finished I will extract the associated coutin from the row handle because uh so I will get the",
    "start": "2418920",
    "end": "2426079"
  },
  {
    "text": "uh easy handle and I I will take the private pointer convert it into coroutine and return it otherwise I will",
    "start": "2426079",
    "end": "2434119"
  },
  {
    "text": "pull maybe some time out and do",
    "start": "2434119",
    "end": "2439480"
  },
  {
    "text": "again and so fetch we will take your all I'm taking",
    "start": "2440079",
    "end": "2445200"
  },
  {
    "text": "copy because lifetime issues I don't know how uh it can it can be problematic and it's fine uh to allocate if you are",
    "start": "2445200",
    "end": "2453359"
  },
  {
    "text": "downloading from internet because the difference of time like spend time is OD",
    "start": "2453359",
    "end": "2458960"
  },
  {
    "text": "you can also specify number of attempts you have like the output string return promise of string you will create a",
    "start": "2458960",
    "end": "2464839"
  },
  {
    "text": "handle you write into the uh string you will follow the directions and there is",
    "start": "2464839",
    "end": "2470240"
  },
  {
    "text": "infinite infinite Loop if you have some attempt left otherwise you will throw",
    "start": "2470240",
    "end": "2476000"
  },
  {
    "text": "exception then you can uh coate on the uh finishing of the task or error",
    "start": "2476000",
    "end": "2482640"
  },
  {
    "text": "whatever and if it failed you can resume on the spot you download some some",
    "start": "2482640",
    "end": "2489839"
  },
  {
    "text": "amount of data so you can resume if you want and continue the loop with another",
    "start": "2489839",
    "end": "2494880"
  },
  {
    "text": "attempt if the response code is not 200 something HTTP it will just throw the",
    "start": "2494880",
    "end": "2501119"
  },
  {
    "text": "exception otherwise it will return the uh finish output and this is fetch in",
    "start": "2501119",
    "end": "2506880"
  },
  {
    "text": "C++ similar as JavaScript one you can have some also utilities you",
    "start": "2506880",
    "end": "2512280"
  },
  {
    "text": "can have like uh all which will take rench of promises",
    "start": "2512280",
    "end": "2517400"
  },
  {
    "text": "and I return promise of vector of the result of the promises so you can have",
    "start": "2517400",
    "end": "2523319"
  },
  {
    "text": "multiple promises for some type and wait for download and when it's finished then hey and you can extract",
    "start": "2523319",
    "end": "2531640"
  },
  {
    "text": "the value type then you just uh because sometimes uh it's useful to uh when you're working with the rench can be",
    "start": "2531640",
    "end": "2537920"
  },
  {
    "text": "like view you need to M materialize The View into",
    "start": "2537920",
    "end": "2543400"
  },
  {
    "text": "something concrete so actually promise type will be created so I create",
    "start": "2543400",
    "end": "2548839"
  },
  {
    "text": "temporary Vector of the from the promises then I will create a output",
    "start": "2548839",
    "end": "2554200"
  },
  {
    "text": "which is the same size as the temporary and for each temporary uh promise I will coate and uh",
    "start": "2554200",
    "end": "2563079"
  },
  {
    "text": "return the result of the uh promise into the output and return",
    "start": "2563079",
    "end": "2568640"
  },
  {
    "text": "output and it seems that it's like uh like it's not parallel but it's actually parallel because",
    "start": "2568640",
    "end": "2575160"
  },
  {
    "text": "the when I create the promises they will start running and they they will be blocked by like by the um dot",
    "start": "2575160",
    "end": "2584440"
  },
  {
    "text": "perform then uh actually uh schedule can finish uh promises in different order",
    "start": "2584440",
    "end": "2591040"
  },
  {
    "text": "and I'm just waiting on them but they will finish based on the size of the data and",
    "start": "2591040",
    "end": "2598839"
  },
  {
    "text": "what you download or speed of your internet so uh you can also have like",
    "start": "2598839",
    "end": "2606200"
  },
  {
    "text": "optional so if you have promises with returning optional you you will uh you will return",
    "start": "2606200",
    "end": "2613440"
  },
  {
    "text": "optional of the vector of the results and only if all of the premises will be",
    "start": "2613440",
    "end": "2619839"
  },
  {
    "text": "successful it's same it's almost same but there is a difference you coate on",
    "start": "2619839",
    "end": "2624960"
  },
  {
    "text": "it and if it's n null opt you will n opt for whole result and funny thing is it",
    "start": "2624960",
    "end": "2631240"
  },
  {
    "text": "will cancel the premises nicely so they will be D destroyed in nice order uh",
    "start": "2631240",
    "end": "2637440"
  },
  {
    "text": "they will be dis disass disassociate from the multi quel there will be no",
    "start": "2637440",
    "end": "2643040"
  },
  {
    "text": "leak and return the output so and then uh to make it even nicer you can create",
    "start": "2643040",
    "end": "2649160"
  },
  {
    "text": "like ranges inter interrupt by creating like",
    "start": "2649160",
    "end": "2654680"
  },
  {
    "text": "uh it's called it's still neid it's called still called neid yeah neid which",
    "start": "2655319",
    "end": "2661040"
  },
  {
    "text": "is operate uh it will take operator pipe uh of promises range of promises which",
    "start": "2661040",
    "end": "2666119"
  },
  {
    "text": "All Tech and it will uh do the same operation I showed you and if it's uh",
    "start": "2666119",
    "end": "2671800"
  },
  {
    "text": "the range of promises optional promises it will do same operation I showed you",
    "start": "2671800",
    "end": "2677040"
  },
  {
    "text": "and then you have like uh fun I forgot the name it's it was yeah yeah it's a name it name is all so everything",
    "start": "2677040",
    "end": "2685839"
  },
  {
    "text": "together question can we change or maybe this is",
    "start": "2685839",
    "end": "2692680"
  },
  {
    "text": "coming further along but uh is the design able to have any function where",
    "start": "2692680",
    "end": "2699119"
  },
  {
    "text": "you can notif when one of themes uh there is a select I'm not",
    "start": "2699119",
    "end": "2704559"
  },
  {
    "text": "showing because it's it's ugly and uh it will uh return F first promise which",
    "start": "2704559",
    "end": "2710119"
  },
  {
    "text": "will be finished from the set you you provide and rest of them will be will be discarded but there is also like in",
    "start": "2710119",
    "end": "2717680"
  },
  {
    "text": "JavaScript you can also like when something finished you will get a vector of promises and some of them it will be",
    "start": "2717680",
    "end": "2723640"
  },
  {
    "text": "all like finished exactly yeah and",
    "start": "2723640",
    "end": "2728839"
  },
  {
    "text": "catch I'm not good at rowing yeah me",
    "start": "2728839",
    "end": "2734079"
  },
  {
    "text": "too so uh let's say we have a struct of resources which contains EUR and content",
    "start": "2734079",
    "end": "2742400"
  },
  {
    "text": "then you have function fetch resource which will take your R return return promise of Resort resource is Just Like",
    "start": "2742400",
    "end": "2748520"
  },
  {
    "text": "Ur you downloaded from and the content is just what you Fetch and then you have fetch all which",
    "start": "2748520",
    "end": "2755520"
  },
  {
    "text": "will take qu of some let's say web page and it will give you Vector of resources so you will download the web page with C",
    "start": "2755520",
    "end": "2763920"
  },
  {
    "text": "you probably should know CT because you know me uh it will extract uh all the absolute link with HTTP or https from",
    "start": "2763920",
    "end": "2771920"
  },
  {
    "text": "the web page gives you view of the uh link uh to the links you will transform",
    "start": "2771920",
    "end": "2777319"
  },
  {
    "text": "the the links into uh into promises with fetch resource so when you actually iterate",
    "start": "2777319",
    "end": "2785000"
  },
  {
    "text": "the range it will start downloading for you you will wait for all them to finish you wait on it and you will return the",
    "start": "2785000",
    "end": "2792319"
  },
  {
    "text": "result Vector of all resources downloaded from web page it's not recursive but it will download all like",
    "start": "2792319",
    "end": "2798960"
  },
  {
    "text": "linked resources from the web page if they are absolute eurs yeah and yeah and that is like the",
    "start": "2798960",
    "end": "2806839"
  },
  {
    "text": "thing I showed you at like at start the search thingy you have like something you are looking for with number of like",
    "start": "2806839",
    "end": "2814720"
  },
  {
    "text": "one like number of results of research you want to show you will take engram uh",
    "start": "2814720",
    "end": "2820480"
  },
  {
    "text": "the text like you want want like you are looking for the veloc ruptor you will",
    "start": "2820480",
    "end": "2825960"
  },
  {
    "text": "create a sliding window the adjacent transform of three characters as an engrams you will enumerate them so it",
    "start": "2825960",
    "end": "2832559"
  },
  {
    "text": "will put also position of the engram in the input string like 0 1 2",
    "start": "2832559",
    "end": "2838559"
  },
  {
    "text": "3 uh then you will uh yeah you will take",
    "start": "2838559",
    "end": "2843880"
  },
  {
    "text": "engrams with some function will start downloading them from some Euro the adjacent you will pass them there and",
    "start": "2843880",
    "end": "2851280"
  },
  {
    "text": "also shift the like the index based on the position in the input string you",
    "start": "2851280",
    "end": "2858200"
  },
  {
    "text": "will get sharts of the index because the index can be a few gigabytes big but you will get just small sharts of the index",
    "start": "2858200",
    "end": "2864920"
  },
  {
    "text": "you will sort them by size of the smallest chart to the largest one and you will fold them uh from the left with",
    "start": "2864920",
    "end": "2872599"
  },
  {
    "text": "first uh uh first item there with intersection so we'll do the",
    "start": "2872599",
    "end": "2877800"
  },
  {
    "text": "intersection operation on the set of the in the index then you will fold them again from",
    "start": "2877800",
    "end": "2883800"
  },
  {
    "text": "the left on the you will get uh you will get like all the hits like across the",
    "start": "2883800",
    "end": "2890839"
  },
  {
    "text": "data set you are searching for you will fold them again uh with uh like document and not because you will get like",
    "start": "2890839",
    "end": "2897240"
  },
  {
    "text": "document and place document and place document and place and this will give you document and number of",
    "start": "2897240",
    "end": "2903760"
  },
  {
    "text": "hits then you will partially sort them by the number of uh",
    "start": "2903760",
    "end": "2910359"
  },
  {
    "text": "like results you are interested in so and you resize the result and give",
    "start": "2910359",
    "end": "2916640"
  },
  {
    "text": "the result to users and that's how the search engine works and I have small hello world",
    "start": "2916640",
    "end": "2923040"
  },
  {
    "text": "example this actually works everything works actually on the side and you will download one second in",
    "start": "2923040",
    "end": "2931880"
  },
  {
    "text": "parall and print them it will print hello world and thank you that's",
    "start": "2931880",
    "end": "2940079"
  },
  {
    "text": "all any questions I have lot of",
    "start": "2944599",
    "end": "2948720"
  },
  {
    "text": "[Music]",
    "start": "2950790",
    "end": "2953929"
  },
  {
    "text": "chocolate yeah probably it can you can just take take the library and probably use it uh send me any bu because it's",
    "start": "2960000",
    "end": "2967040"
  },
  {
    "text": "just like kind of experimental I actually learn myself the on it properly",
    "start": "2967040",
    "end": "2972599"
  },
  {
    "text": "so there were probably some box but uh I use it in one like uh work related Tas",
    "start": "2972599",
    "end": "2978760"
  },
  {
    "text": "like job like project I did and I was like downloading like file from some",
    "start": "2978760",
    "end": "2984559"
  },
  {
    "text": "server index Json file with like links to other files and then download multiple them then I create like view",
    "start": "2984559",
    "end": "2992799"
  },
  {
    "text": "which like join them together as big big view they were mapped in memory and everything worked nicely and it was able",
    "start": "2992799",
    "end": "2999559"
  },
  {
    "text": "to download I think 400 or 500 me megab per second quite nicely and there was no",
    "start": "2999559",
    "end": "3005520"
  },
  {
    "text": "leak so it it works nicely so you can use it let me know how",
    "start": "3005520",
    "end": "3011559"
  },
  {
    "text": "it works for you and let me know if you if that is feature you",
    "start": "3011559",
    "end": "3016078"
  },
  {
    "text": "need yeah you don't need that and if your platform has lip",
    "start": "3021160",
    "end": "3028440"
  },
  {
    "text": "c yeah if you provide your own like allocator for your types you don't need to use Hep at all",
    "start": "3029200",
    "end": "3036680"
  },
  {
    "text": "if but uh yeah if your platform support slip curl you will be fine that's like",
    "start": "3036680",
    "end": "3041720"
  },
  {
    "text": "that's the question but if you want to download from internet you probably have something more like advanced than just",
    "start": "3041720",
    "end": "3047359"
  },
  {
    "text": "like some like like embedded chip with no system chocolate for you and that will",
    "start": "3047359",
    "end": "3054680"
  },
  {
    "text": "be called damage sorry anything",
    "start": "3054680",
    "end": "3060920"
  },
  {
    "text": "else",
    "start": "3061559",
    "end": "3064559"
  },
  {
    "text": "sorry uh I uh this small like theid I wrote I wrote my own it's just like",
    "start": "3070760",
    "end": "3076720"
  },
  {
    "text": "small struct which will just call the all function for me but it's nice because I can just pipe it into",
    "start": "3076720",
    "end": "3083839"
  },
  {
    "text": "all very cool yeah yeah I did I did on my own because",
    "start": "3083839",
    "end": "3089400"
  },
  {
    "text": "easy to do because uh I recommend people to try to implement some some some range",
    "start": "3089400",
    "end": "3096240"
  },
  {
    "text": "algorithms or Range View From The Standard library from the from this draft because actually you just copy",
    "start": "3096240",
    "end": "3103119"
  },
  {
    "text": "paste most of the code from the uh standard and write few more like lines",
    "start": "3103119",
    "end": "3108599"
  },
  {
    "text": "of code and it will work for you and it's good exercise and that's how you learn to write this",
    "start": "3108599",
    "end": "3114359"
  },
  {
    "text": "stuff and chocolate for you",
    "start": "3114359",
    "end": "3120359"
  },
  {
    "text": "w and",
    "start": "3120359",
    "end": "3123720"
  },
  {
    "text": "question yes you can see that but uh with exception of lambas cortines",
    "start": "3134079",
    "end": "3140799"
  },
  {
    "text": "will give gives you things which you before didn't have jumping uh somewhere",
    "start": "3140799",
    "end": "3146680"
  },
  {
    "text": "else and uh storing state of the function you could do it with Lambda",
    "start": "3146680",
    "end": "3151960"
  },
  {
    "text": "kind of yeah you you can think that about",
    "start": "3151960",
    "end": "3157599"
  },
  {
    "text": "that but uh it would be that nice yes and I'm not going to throw that",
    "start": "3157599",
    "end": "3162839"
  },
  {
    "text": "far away so came here for chocolate later yeah anything else I have lot of",
    "start": "3162839",
    "end": "3168880"
  },
  {
    "text": "chocolate and we have time another",
    "start": "3168880",
    "end": "3174240"
  },
  {
    "text": "question",
    "start": "3174240",
    "end": "3177240"
  },
  {
    "text": "guro itself internally is doing something asnos but in C world when with like callbacks but you can actually like",
    "start": "3197839",
    "end": "3205280"
  },
  {
    "text": "write cortines on top of that I'm not using boost AIO because like boost U",
    "start": "3205280",
    "end": "3212400"
  },
  {
    "text": "like focus on building everything from scratch from the bottom and I don't want to like deal with HTTP and TLS I have",
    "start": "3212400",
    "end": "3218839"
  },
  {
    "text": "library for that which is like battle tested and funny stuff it's like currently working on two planets",
    "start": "3218839",
    "end": "3226359"
  },
  {
    "text": "now yeah you can do that if you want uh I'm not doing doing that because I don't need",
    "start": "3231760",
    "end": "3238558"
  },
  {
    "text": "that yeah yeah kod provides you a lot of",
    "start": "3240400",
    "end": "3247319"
  },
  {
    "text": "callbacks you can have call backs to like resolve of DNS you can have callbacks to create socket you can have",
    "start": "3247319",
    "end": "3252880"
  },
  {
    "text": "callbacks or to close socket and you can like write like Co with something like P",
    "start": "3252880",
    "end": "3260880"
  },
  {
    "text": "A but why okay uh any anything else if not thank",
    "start": "3260880",
    "end": "3268400"
  },
  {
    "text": "you for attending it was nice crowd and pretty",
    "start": "3268400",
    "end": "3273160"
  },
  {
    "text": "warm",
    "start": "3282559",
    "end": "3285559"
  }
]