[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": "okay everyone we're gonna get started so my name is Aaron standard I'm the CEO of",
    "start": "9380",
    "end": "16020"
  },
  {
    "text": "peda bridge I'm one of the contributors to Akkad net and today we're gonna talk",
    "start": "16020",
    "end": "21360"
  },
  {
    "text": "about real-time distributed applications with Akkad net kubernetes and dotnet core now before I begin quick show of",
    "start": "21360",
    "end": "28770"
  },
  {
    "text": "hands who here has worked with Akkad net before all right a handful of you good",
    "start": "28770",
    "end": "35100"
  },
  {
    "text": "this talk is intended for people who are interested in learning about using Akkad on net to build these types of systems",
    "start": "35100",
    "end": "41519"
  },
  {
    "text": "we're going to talk about today I'm so I'm not going to assume you have that much familiarity with it now next",
    "start": "41519",
    "end": "46590"
  },
  {
    "text": "question I have is who's used kubernetes before quick show of hands there as well okay about half the room roughly the",
    "start": "46590",
    "end": "54449"
  },
  {
    "text": "purpose of this talk isn't to necessarily hold your hand and give you step-by-step instructions and how to do",
    "start": "54449",
    "end": "60390"
  },
  {
    "text": "all these I'll provide you with the link at the very end for a place we can go do that what this talk is really about is",
    "start": "60390",
    "end": "66810"
  },
  {
    "text": "trying to give you a strategy for how to build a real-time application using",
    "start": "66810",
    "end": "72210"
  },
  {
    "text": "technologies like akka dotnet and kubernetes to do it so real time",
    "start": "72210",
    "end": "77520"
  },
  {
    "start": "76000",
    "end": "123000"
  },
  {
    "text": "applications are becoming increasingly common in the workplace whether you work",
    "start": "77520",
    "end": "82590"
  },
  {
    "text": "in consumer or whether you build enterprise applications there's lots of different business cases like the ones",
    "start": "82590",
    "end": "88560"
  },
  {
    "text": "that have behind me on screen where real time application programming is becoming necessary and the reason why we have to",
    "start": "88560",
    "end": "95130"
  },
  {
    "text": "do this is because the market demands it users want to receive notifications when",
    "start": "95130",
    "end": "100170"
  },
  {
    "text": "they have a bill that's passed do enterprise users want to know what the",
    "start": "100170",
    "end": "105330"
  },
  {
    "text": "real-time position of each of the vehicles and their fleet of ships or their fleet of trucks are at any given",
    "start": "105330",
    "end": "110550"
  },
  {
    "text": "time in order to support these types of business cases engineers like you have",
    "start": "110550",
    "end": "116790"
  },
  {
    "text": "to be able to deliver real-time software experiences to the stakeholders in your organization's now what makes an",
    "start": "116790",
    "end": "124800"
  },
  {
    "start": "123000",
    "end": "131000"
  },
  {
    "text": "application real-time well I'm going to go ahead and break it down into three sort of simple ingredients for you the",
    "start": "124800",
    "end": "131940"
  },
  {
    "start": "131000",
    "end": "264000"
  },
  {
    "text": "first time the first thing that makes an application real-time is you have a soft",
    "start": "131940",
    "end": "137060"
  },
  {
    "text": "processing deadline that every single request must fulfill",
    "start": "137060",
    "end": "142230"
  },
  {
    "text": "a good example is if you're building let's say a real time threat monitoring system or fraud monitoring system you",
    "start": "142230",
    "end": "149159"
  },
  {
    "text": "might be told you have to figure out whether this transaction is legitimate or fraudulent within 1.5 seconds of the",
    "start": "149159",
    "end": "156090"
  },
  {
    "text": "transaction being posted that's an example of a soft real-time deadline if you end up delivering it in 1.6 seconds",
    "start": "156090",
    "end": "163590"
  },
  {
    "text": "that's not great and that impacts the business's throughput but it's not a mission-critical failure like how it",
    "start": "163590",
    "end": "169650"
  },
  {
    "text": "would be in a hard real-time application a hard real-time application being something like the braking system on",
    "start": "169650",
    "end": "176250"
  },
  {
    "text": "your car where if you don't brake at exactly 20 milliseconds the passenger might die so that's the distinction",
    "start": "176250",
    "end": "182760"
  },
  {
    "text": "between hard and soft real-time we're talking about soft real-time in today's course now the next requirement that",
    "start": "182760",
    "end": "190920"
  },
  {
    "text": "makes your application real-time is a non-trivial workload so for instance if you went ahead and created let's say a",
    "start": "190920",
    "end": "197430"
  },
  {
    "text": "static website using github pages and you know Jekyll or something like that",
    "start": "197430",
    "end": "202970"
  },
  {
    "text": "that's not a real-time application even though it might be really fast because the workload is completely trivial",
    "start": "202970",
    "end": "209160"
  },
  {
    "text": "it's stateless in fact and that's the third criteria that usually determines whether an application is real-time or",
    "start": "209160",
    "end": "215579"
  },
  {
    "text": "not it's performing stateful activity so to give you a good example if you're",
    "start": "215579",
    "end": "221160"
  },
  {
    "text": "building something like a monitoring system typically you have to keep a sliding window of state about the power",
    "start": "221160",
    "end": "228120"
  },
  {
    "text": "performance of the system so you might need to know how what's the error rate been on this application I'm monitoring",
    "start": "228120",
    "end": "234329"
  },
  {
    "text": "over the past 30 minutes and what's the error rate also been over the past minute or so and you might want to go to",
    "start": "234329",
    "end": "240569"
  },
  {
    "text": "compare how the current minute compares to the previous 30 and when there's an a a sort of when the two curves pass each",
    "start": "240569",
    "end": "248459"
  },
  {
    "text": "other of the error rate you might have to go and fire an alert see some of the end-users who are responsible for",
    "start": "248459",
    "end": "253739"
  },
  {
    "text": "monitoring that application that's an example of what a real-time application looks like and increasingly more and",
    "start": "253739",
    "end": "260160"
  },
  {
    "text": "more developers are being asked to build applications like this now the first",
    "start": "260160",
    "end": "265830"
  },
  {
    "start": "264000",
    "end": "365000"
  },
  {
    "text": "question I want to address that you might have is why is statefulness a criteria to build a real-time system",
    "start": "265830",
    "end": "272750"
  },
  {
    "text": "well I want to give you two architectures on the screen behind me here on the left",
    "start": "272750",
    "end": "278129"
  },
  {
    "text": "you have a traditional crud architecture where every single time of requests comes in we go ahead and turn that into",
    "start": "278129",
    "end": "284520"
  },
  {
    "text": "a database query we serialize that query over the network we go ahead and execute that query on our database engine we",
    "start": "284520",
    "end": "290909"
  },
  {
    "text": "serialized the results in the engine send that back across the wire transform those database end results back into a",
    "start": "290909",
    "end": "296999"
  },
  {
    "text": "response and then serialize that and send that over the wire that's what traditional crud workloads",
    "start": "296999",
    "end": "302669"
  },
  {
    "text": "look like well compare that to the workload on the right well we're taking advantage of a principle known as state",
    "start": "302669",
    "end": "309209"
  },
  {
    "text": "locality where all the information we need to do the work is available adjacent in memory to the code doing the",
    "start": "309209",
    "end": "315779"
  },
  {
    "text": "work so in that use case we receive the requests we go ahead and access an",
    "start": "315779",
    "end": "320879"
  },
  {
    "text": "object that's already available in memory and serve up a result right away the performance difference between these",
    "start": "320879",
    "end": "328379"
  },
  {
    "text": "two systems is multiple orders of magnitude and it's because we're operating at a very high level of i/o so",
    "start": "328379",
    "end": "335550"
  },
  {
    "text": "in order to build applications that can execute in real-time we often need to take advantage of state locality in",
    "start": "335550",
    "end": "341999"
  },
  {
    "text": "order to do it that's why statefulness is a core ingredient for building real-time applications and the majority",
    "start": "341999",
    "end": "348719"
  },
  {
    "text": "of what this talk is really about is once you start having to manage state inside your application you as a",
    "start": "348719",
    "end": "355259"
  },
  {
    "text": "developer become responsible for a whole bunch of new complexities that you didn't become that you weren't",
    "start": "355259",
    "end": "361259"
  },
  {
    "text": "responsible for under the old stateless crud model but don't worry we're gonna",
    "start": "361259",
    "end": "367289"
  },
  {
    "start": "365000",
    "end": "370000"
  },
  {
    "text": "offer a strategy that'll help you manage that so the big challenges was building",
    "start": "367289",
    "end": "372869"
  },
  {
    "start": "370000",
    "end": "448000"
  },
  {
    "text": "real-time applications is that you're responsible for managing the consistency of your state this used to be something",
    "start": "372869",
    "end": "379469"
  },
  {
    "text": "that sequel server or cosmos DB or as your table storage might have taken care of for you now you have to do it because",
    "start": "379469",
    "end": "386369"
  },
  {
    "text": "your state and the source of truth lives inside your application on top of that",
    "start": "386369",
    "end": "392219"
  },
  {
    "text": "now you're responsible for migrating state from one node to another during",
    "start": "392219",
    "end": "397559"
  },
  {
    "text": "deployments during upgrades and also during failure scenarios or maybe some",
    "start": "397559",
    "end": "403199"
  },
  {
    "text": "of the hardware inside your cluster fails and you have to move that critical state from one area of the cluster to",
    "start": "403199",
    "end": "408329"
  },
  {
    "text": "another this can be a non-trivial problem especially when you have to manage the consistency of it too",
    "start": "408329",
    "end": "414179"
  },
  {
    "text": "and then finally most deployment tools that we've you know is used historically",
    "start": "414179",
    "end": "420149"
  },
  {
    "text": "as developers are not equipped to deal with state they're used to working with stateless web servers so the idea that",
    "start": "420149",
    "end": "427169"
  },
  {
    "text": "you might need to replace nodes one at a time because state needs some time to move from node a to node B during a",
    "start": "427169",
    "end": "434069"
  },
  {
    "text": "deployment is not something that most deployment engines are equipped to handle that's why we're going to be",
    "start": "434069",
    "end": "439589"
  },
  {
    "text": "using kubernetes today it's one of the very few tools that has a natural built-in way of expressing that idea",
    "start": "439589",
    "end": "445709"
  },
  {
    "text": "rather easily for a developer so here's the road map of the tools that we're",
    "start": "445709",
    "end": "451679"
  },
  {
    "start": "448000",
    "end": "457000"
  },
  {
    "text": "going to use how we're gonna connect them together and how they can solve these problems that I showed you on the previous slide the font might be a",
    "start": "451679",
    "end": "459389"
  },
  {
    "start": "457000",
    "end": "504000"
  },
  {
    "text": "little small so I'm gonna go ahead and read this for you the first thing we need to do is create a workable model for managing individual",
    "start": "459389",
    "end": "466289"
  },
  {
    "text": "entities consistently each individual thing we're responsible for so if we're monitoring but say we're a multi tenant",
    "start": "466289",
    "end": "473009"
  },
  {
    "text": "monitoring application we need to come up with a way to monitor each tenant inside of it individually and make sure",
    "start": "473009",
    "end": "479219"
  },
  {
    "text": "that all that data for each tenant is managed consistently on its own next we",
    "start": "479219",
    "end": "485039"
  },
  {
    "text": "have to have a mechanism for routing events and state to those specific entity actors inside our system if we",
    "start": "485039",
    "end": "491969"
  },
  {
    "text": "have a big distributed network of nodes that can all have state on them how can we make sure all the state for the same",
    "start": "491969",
    "end": "498509"
  },
  {
    "text": "entity ends up being made consistent at the end of the day that's the next thing we're gonna have to address and then",
    "start": "498509",
    "end": "505379"
  },
  {
    "start": "504000",
    "end": "522000"
  },
  {
    "text": "we're gonna need to talk about topology awareness inside the network how do I know which state is on which machine and",
    "start": "505379",
    "end": "512159"
  },
  {
    "text": "when one machine needs to restart or be redeployed how can I move that state",
    "start": "512159",
    "end": "517169"
  },
  {
    "text": "from point A to point B in a manner that obeys our consistency principles and",
    "start": "517169",
    "end": "523229"
  },
  {
    "start": "522000",
    "end": "556000"
  },
  {
    "text": "after that we need to come up with a deployment mechanism for being able to go and deploy into these stateful",
    "start": "523229",
    "end": "529110"
  },
  {
    "text": "environments we don't want to go ahead and rip all of our stateful nodes all out at the same time and then replace",
    "start": "529110",
    "end": "534540"
  },
  {
    "text": "them all at once like how you might do with a VIP swamp if you're using a web server that would that would cause some",
    "start": "534540",
    "end": "540660"
  },
  {
    "text": "consistency problems if we did it that way so I need a deployment strategy that allow us to go ahead and replace the",
    "start": "540660",
    "end": "546000"
  },
  {
    "text": "nodes one at a time providing each node with enough time to hand over its state to the next node that's still available",
    "start": "546000",
    "end": "552569"
  },
  {
    "text": "inside the network and then we need to put everything together acha dotnet is gonna help us with the",
    "start": "552569",
    "end": "559319"
  },
  {
    "start": "556000",
    "end": "571000"
  },
  {
    "text": "first three steps of the puzzle here and that's honestly the hardest part using akka dotnet as the building blocks to",
    "start": "559319",
    "end": "565050"
  },
  {
    "text": "give our programmers and our DevOps people a workable model for managing all of this inside our environments and",
    "start": "565050",
    "end": "571490"
  },
  {
    "start": "571000",
    "end": "599000"
  },
  {
    "text": "kubernetes will take care of the latter parts kubernetes has a - a tool built inside of it called a stateful set that",
    "start": "571490",
    "end": "578370"
  },
  {
    "text": "does these very things were discussing automatically so we're going to use docker and dotnet core to deploy our",
    "start": "578370",
    "end": "584310"
  },
  {
    "text": "akka donna applications and a stateful manner using kubernetes that's the overall goal but the first thing we're",
    "start": "584310",
    "end": "591300"
  },
  {
    "text": "gonna learn about is how can we go ahead and use akka dotnet to manage these stateful environments inside our system",
    "start": "591300",
    "end": "599240"
  },
  {
    "text": "so quick show of hands who's worked with actor programming before period whether it's Erlang akka okay",
    "start": "599240",
    "end": "606689"
  },
  {
    "start": "606000",
    "end": "622000"
  },
  {
    "text": "good I'd say about a third of the room or so actors are simple standalone",
    "start": "606689",
    "end": "612750"
  },
  {
    "text": "entities that communicate by processing and sending messages to each other so",
    "start": "612750",
    "end": "618329"
  },
  {
    "text": "this is all locally inside one process when I'm visualizing on screen here after one receives a message from",
    "start": "618329",
    "end": "624899"
  },
  {
    "text": "somewhere it could be another actor it could also be from an external process like a Web API or Kafka or maybe Azure",
    "start": "624899",
    "end": "631860"
  },
  {
    "text": "event hubs whatever you want that message arrives into actor one and actor",
    "start": "631860",
    "end": "638100"
  },
  {
    "text": "one wakes up and gets scheduled on the.net thread pool to go ahead and",
    "start": "638100",
    "end": "643470"
  },
  {
    "text": "process some messages under the covers and the actor will process a burst of up to 30 messages by default before it",
    "start": "643470",
    "end": "650129"
  },
  {
    "text": "yields the thread and lets another actor take a turn behind it well actor one can",
    "start": "650129",
    "end": "655350"
  },
  {
    "text": "send a message to actor two and that will cause actor two to wake up and process some messages all this is done",
    "start": "655350",
    "end": "662309"
  },
  {
    "text": "asynchronously and the big implication here is that actors when they don't have",
    "start": "662309",
    "end": "667860"
  },
  {
    "text": "messages to process don't use CPU actors only do work when",
    "start": "667860",
    "end": "673079"
  },
  {
    "text": "there's something for them to process inside their mailbox and actors mailbox is just a simple",
    "start": "673079",
    "end": "678340"
  },
  {
    "text": "first in first out queue is all that it is by default now this is a little bit",
    "start": "678340",
    "end": "685300"
  },
  {
    "start": "683000",
    "end": "750000"
  },
  {
    "text": "of actor code on screen here and basically what you can see is an actor is just a simple class is all that it is",
    "start": "685300",
    "end": "691780"
  },
  {
    "text": "there's no special infrastructure anything else that you have to manage as a developer you create an actor class",
    "start": "691780",
    "end": "697990"
  },
  {
    "text": "and then what you can do is declare these receive methods here we can go",
    "start": "697990",
    "end": "703750"
  },
  {
    "text": "ahead and see I want to receive a message of type attempt crawl whenever an actor receives a message of that type",
    "start": "703750",
    "end": "710380"
  },
  {
    "text": "we will execute the method that we've declared in there that lambda method is the code this actor is going to run so",
    "start": "710380",
    "end": "716350"
  },
  {
    "text": "the actor will process a little bit of code and then by the time it's done processing this message it'll yield the",
    "start": "716350",
    "end": "722740"
  },
  {
    "text": "threads to either another actor that's got some work to do or if this actor has even more messages it needs to process",
    "start": "722740",
    "end": "729120"
  },
  {
    "text": "it'll move on to processing the next one so we're not going to be showing by the",
    "start": "729120",
    "end": "734140"
  },
  {
    "text": "way a tremendous amount of code in this presentation this is really about trying to provide you with the roadmap for",
    "start": "734140",
    "end": "739300"
  },
  {
    "text": "solving this type of complex problem the link I'm going to provide you with at the end will give you a sort of a",
    "start": "739300",
    "end": "744820"
  },
  {
    "text": "step-by-step do-it-yourself tutorial you can follow to learn how to do this on your own now the next ingredient we need",
    "start": "744820",
    "end": "753010"
  },
  {
    "start": "750000",
    "end": "935000"
  },
  {
    "text": "to talk about with actors is how do we actually send them a message the coda to showed you is how they process them but",
    "start": "753010",
    "end": "759220"
  },
  {
    "text": "how do we actually get a message into them in the first place and that's what this unit of work called the actor",
    "start": "759220",
    "end": "764920"
  },
  {
    "text": "reference does the actor reference is like a handle for talking to an actor I go ahead and I create an actor system",
    "start": "764920",
    "end": "772660"
  },
  {
    "text": "initially an actor system is sort of the environment that hosts the actors it's what allows them to communicate with",
    "start": "772660",
    "end": "778360"
  },
  {
    "text": "each other it provides each actor with the unique address and is responsible for creating things like the actor's",
    "start": "778360",
    "end": "784540"
  },
  {
    "text": "mailbox that it uses for processing messages down below that you can see we",
    "start": "784540",
    "end": "789790"
  },
  {
    "text": "go ahead and declare some props props is the formula we use for starting an actor if an actor crashes and needs to restart",
    "start": "789790",
    "end": "797170"
  },
  {
    "text": "it'll be recreated using the very same props that were used to create it in the first place now I'm a little embarrassed",
    "start": "797170",
    "end": "803560"
  },
  {
    "text": "to admit this but I had worked on a cadet net for close to two years before I figured out that the reason why this",
    "start": "803560",
    "end": "809110"
  },
  {
    "text": "is called props it's because actors need props on stage in order to act so sorry I was a",
    "start": "809110",
    "end": "816280"
  },
  {
    "text": "terrible joke now the last thing you'll see in the sort of 4 the third step here",
    "start": "816280",
    "end": "823840"
  },
  {
    "text": "is we get an actor reference by calling the actor of method on the actor system",
    "start": "823840",
    "end": "829330"
  },
  {
    "text": "and we pass in that props along with the name for that actor now the name is optional if you don't pass in a name",
    "start": "829330",
    "end": "835930"
  },
  {
    "text": "acha dinette we'll assign a random one for you so I get that actor reference back and now that's how I can",
    "start": "835930",
    "end": "842230"
  },
  {
    "text": "communicate with the underlying actor if I want and that's what I do in the final stage here I tell the actor this greet",
    "start": "842230",
    "end": "848860"
  },
  {
    "text": "message saying hey I want you to go ahead and process this and by the way every time you send a message to an",
    "start": "848860",
    "end": "856300"
  },
  {
    "text": "actor via a tell command that is always asynchronous the message will get queued in the actors mailbox and the actor will",
    "start": "856300",
    "end": "863020"
  },
  {
    "text": "get woken up later to go and process it akkad on the actors use fired forget messaging by default and that's what",
    "start": "863020",
    "end": "869200"
  },
  {
    "text": "you're seeing right there so this is getting to the basis of how we go and set up actors now actor references are",
    "start": "869200",
    "end": "875950"
  },
  {
    "text": "really important for another reason which is that when we start with doing networked actors using aqua dot remote",
    "start": "875950",
    "end": "882910"
  },
  {
    "text": "naka nut cluster actor references have a very useful property that we're gonna leverage to build a distributed system",
    "start": "882910",
    "end": "889030"
  },
  {
    "text": "and that property is called location transparency I can tell this message to",
    "start": "889030",
    "end": "894400"
  },
  {
    "text": "an actor running locally inside the same process as this actor system or I could",
    "start": "894400",
    "end": "899800"
  },
  {
    "text": "also tell a message to an actor running in a remote process somewhere else inside our data center and as a",
    "start": "899800",
    "end": "906520"
  },
  {
    "text": "programmer that's a hundred percent transparent to you you don't need to know where the actor is on the network",
    "start": "906520",
    "end": "912730"
  },
  {
    "text": "or necessarily what its implementation type is all you need to know is this actor can handle this type of message",
    "start": "912730",
    "end": "919540"
  },
  {
    "text": "and it'll send me zero to end responses back based on whatever the actors state",
    "start": "919540",
    "end": "925120"
  },
  {
    "text": "is and other sort of factors that can occur inside the system so location transparency with actor references is",
    "start": "925120",
    "end": "931660"
  },
  {
    "text": "one of the little building blocks we can use to build a distributed system now",
    "start": "931660",
    "end": "936850"
  },
  {
    "start": "935000",
    "end": "962000"
  },
  {
    "text": "the whole reason why I've been bringing this up is we're really talking about how we manage state inside a",
    "start": "936850",
    "end": "943810"
  },
  {
    "text": "I'm application well actors have some very useful properties that make them",
    "start": "943810",
    "end": "948970"
  },
  {
    "text": "ideal for managing state the first important property is that actors are",
    "start": "948970",
    "end": "954880"
  },
  {
    "text": "serial processors they process messages in the order in which they were received and processed them one at a time so if",
    "start": "954880",
    "end": "963250"
  },
  {
    "start": "962000",
    "end": "1027000"
  },
  {
    "text": "we have a queue of three messages sitting in our actors mailbox message zero will get pushed into the actors",
    "start": "963250",
    "end": "969700"
  },
  {
    "text": "receive method that code we saw a few slides ago the actor will go and process that and once that received method exits",
    "start": "969700",
    "end": "976920"
  },
  {
    "text": "the actor will move on to processing the next message in the mailbox message one",
    "start": "976920",
    "end": "982860"
  },
  {
    "text": "so one of the implications here of the fact that actors of serial processors means that any state that is held inside",
    "start": "982860",
    "end": "991360"
  },
  {
    "text": "an actor and by the way the state inside an actor is literally just fields and properties just like you'd have in any",
    "start": "991360",
    "end": "997690"
  },
  {
    "text": "other object in dotnet but the state inside that actor can only be mutated in",
    "start": "997690",
    "end": "1003029"
  },
  {
    "text": "a sort of single threaded you have non concurrent fashion which means that the",
    "start": "1003029",
    "end": "1009120"
  },
  {
    "text": "actors state is always consistent with whatever messages it's received you don't need to have any complex",
    "start": "1009120",
    "end": "1014400"
  },
  {
    "text": "synchronization mechanisms or anything else the actors mailbox provides the ordering to guarantee that that state",
    "start": "1014400",
    "end": "1021420"
  },
  {
    "text": "can only be modified linearly which is one of the highest modes of consistency",
    "start": "1021420",
    "end": "1027140"
  },
  {
    "start": "1027000",
    "end": "1054000"
  },
  {
    "text": "now on top of that actors are cheap resources an actor in akka dotnet takes",
    "start": "1027140",
    "end": "1033390"
  },
  {
    "text": "about roughly 1k of memory and doesn't use any CPU when it's not running and we",
    "start": "1033390",
    "end": "1038520"
  },
  {
    "text": "can spawn up to 50,000 actors per second using our standard benchmarking machine which is a d 2v2 Windows Azure VM so two",
    "start": "1038520",
    "end": "1046860"
  },
  {
    "text": "core VM so actors are cheap resources we can afford to have many of them inside a",
    "start": "1046860",
    "end": "1052679"
  },
  {
    "text": "single process so one of the implications of this is is that we have",
    "start": "1052679",
    "end": "1057840"
  },
  {
    "start": "1054000",
    "end": "1124000"
  },
  {
    "text": "an actor hierarchy which is how actors get organized inside Aquanet you have parent and child actors it means that we",
    "start": "1057840",
    "end": "1066120"
  },
  {
    "text": "can use this actor hierarchy inside actors to partition our state meaning in",
    "start": "1066120",
    "end": "1073080"
  },
  {
    "text": "an environment where let's say you're responsible for tracking annarbor fairly large number of entities in real",
    "start": "1073080",
    "end": "1079829"
  },
  {
    "text": "time in your system at any given time well one of the techniques you would have probably used without something",
    "start": "1079829",
    "end": "1086039"
  },
  {
    "text": "like Aqua Net would be a giant sort of cached in memory collection inside each process and you might try to synchronize",
    "start": "1086039",
    "end": "1092459"
  },
  {
    "text": "that by having a copy of that cache saved to some central location like a Redis database and so forth and that can",
    "start": "1092459",
    "end": "1099359"
  },
  {
    "text": "get very nasty very quickly I've done it before myself so I've been there abate I've made I've made those same mistakes",
    "start": "1099359",
    "end": "1105739"
  },
  {
    "text": "what the Akkad net sort of actor model allows you to do is rather than worrying",
    "start": "1105739",
    "end": "1111329"
  },
  {
    "text": "about having this sort of global mutable state that everyone's trying to synchronize we go ahead and concentrate",
    "start": "1111329",
    "end": "1117269"
  },
  {
    "text": "our state for every business entity inside a single actor who has exclusive",
    "start": "1117269",
    "end": "1122669"
  },
  {
    "text": "ownership over it so one actor per entity is sort of the standard pattern",
    "start": "1122669",
    "end": "1128039"
  },
  {
    "start": "1124000",
    "end": "1242000"
  },
  {
    "text": "that you see throughout a lot of actor programming so to give you a little historical example the last business",
    "start": "1128039",
    "end": "1134700"
  },
  {
    "text": "that I ran prior to starting peda Bridge was a marketing automation company for",
    "start": "1134700",
    "end": "1139979"
  },
  {
    "text": "Windows app store developers called marked up and we used Aqua Net we were the very first production akka don''t",
    "start": "1139979",
    "end": "1146309"
  },
  {
    "text": "user we use akkad on actors to keep track of the click streams of all the users using our customers applications",
    "start": "1146309",
    "end": "1153119"
  },
  {
    "text": "in the store and we need to figure out did this user qualify for a campaign",
    "start": "1153119",
    "end": "1158399"
  },
  {
    "text": "that this user might be running this app developer might be running as soon as the user let's say tries to buy it in",
    "start": "1158399",
    "end": "1163799"
  },
  {
    "text": "app purchase and then backs out we could go ahead and target them and send a push notification offering them a discount on",
    "start": "1163799",
    "end": "1170279"
  },
  {
    "text": "that very thing they're looking to buy an order for our application to be effective we had to be able to guarantee",
    "start": "1170279",
    "end": "1175859"
  },
  {
    "text": "that the time between that user triggering that campaign and receiving that notification had to be about a",
    "start": "1175859",
    "end": "1182039"
  },
  {
    "text": "second otherwise our conversion rate for our customers would drop by about 40 percent this is a good example of a",
    "start": "1182039",
    "end": "1188879"
  },
  {
    "text": "real-time application the way we made that work so our engineers could manage all the complexity of doing this was we",
    "start": "1188879",
    "end": "1196109"
  },
  {
    "text": "partitioned the campaign state for every user inside its own actor so the child",
    "start": "1196109",
    "end": "1202049"
  },
  {
    "text": "per entity pattern gives you a simple model for being able to make sure that every single entity inside your system",
    "start": "1202049",
    "end": "1208169"
  },
  {
    "text": "is modified in a consistent and understandable manner this is a very",
    "start": "1208169",
    "end": "1214289"
  },
  {
    "text": "intuitive way of trying to go and manage state inside your application partition each individual entity into its own",
    "start": "1214289",
    "end": "1220799"
  },
  {
    "text": "actor and therefore each entity state can be modified serially which makes consistency a much easier thing to come",
    "start": "1220799",
    "end": "1227940"
  },
  {
    "text": "by than it is and sort of the concurrent shared stay anything-goes universe that",
    "start": "1227940",
    "end": "1233280"
  },
  {
    "text": "we're used to operating in these are the firt this is the first really big lynchpin of trying to build stateful",
    "start": "1233280",
    "end": "1239580"
  },
  {
    "text": "applications now to summarize here",
    "start": "1239580",
    "end": "1244669"
  },
  {
    "start": "1242000",
    "end": "1557000"
  },
  {
    "text": "actors simplify stateful application programming by doing the following four",
    "start": "1244669",
    "end": "1249870"
  },
  {
    "text": "things they process messages serially which means that every single change to",
    "start": "1249870",
    "end": "1254940"
  },
  {
    "text": "your entity state occurs linearly that's the first big change the second is that",
    "start": "1254940",
    "end": "1261150"
  },
  {
    "text": "all actors state is private state can only be modified by passing immutable",
    "start": "1261150",
    "end": "1267690"
  },
  {
    "text": "messages between actors meaning that an actors state can only change atomically",
    "start": "1267690",
    "end": "1273080"
  },
  {
    "text": "inside its own sort of private private area if another actor wants a copy of",
    "start": "1273080",
    "end": "1278640"
  },
  {
    "text": "your state you go ahead and copy your state into a message and send it to that actor that actor will go ahead and get a",
    "start": "1278640",
    "end": "1285030"
  },
  {
    "text": "point-in-time snapshot of what your state looks like now if you want to go ahead and have an actor synchronize with",
    "start": "1285030",
    "end": "1291179"
  },
  {
    "text": "another one the way you do that would be through using something like publish and subscribe where every time an actor",
    "start": "1291179",
    "end": "1297179"
  },
  {
    "text": "State updates it publishes those copies out to someone else inside the network it's a very common pattern in akkad on",
    "start": "1297179",
    "end": "1303179"
  },
  {
    "text": "that on top of that the actor hierarchy itself is a very useful tool for",
    "start": "1303179",
    "end": "1309299"
  },
  {
    "text": "partitioning state where each entity gets its own actor and all those entities can be updated concurrently if",
    "start": "1309299",
    "end": "1315870"
  },
  {
    "text": "you want to which is what helps make actors very high throughput which is one of the things that we need for doing",
    "start": "1315870",
    "end": "1321870"
  },
  {
    "text": "real-time applications and then finally the most important tool is the fact that",
    "start": "1321870",
    "end": "1327750"
  },
  {
    "text": "actor references are transparent they can be spread throughout the cluster and many different nodes in the cluster can",
    "start": "1327750",
    "end": "1334799"
  },
  {
    "text": "all send messages to the same entity actor which allows us to build a consistent view of that entity in a",
    "start": "1334799",
    "end": "1341429"
  },
  {
    "text": "single place inside the cluster now the second part of the puzzle is how",
    "start": "1341429",
    "end": "1347730"
  },
  {
    "text": "do we make sure that happens how can we make sure all those events all get routed to a single place inside our",
    "start": "1347730",
    "end": "1353999"
  },
  {
    "text": "cluster what's the magic trick for pulling this off well the trick is a",
    "start": "1353999",
    "end": "1360090"
  },
  {
    "text": "couple of other modules that are part of the academic framework namely akka dot cluster and aqua dot persistence they're",
    "start": "1360090",
    "end": "1366269"
  },
  {
    "text": "going to be some tools we look at so this is what an aqua dot net cluster",
    "start": "1366269",
    "end": "1371429"
  },
  {
    "text": "looks like each one of these circles here represents an actress system that's the sort of hosting environment we use",
    "start": "1371429",
    "end": "1377460"
  },
  {
    "text": "to go and create actors and typically in a kubernetes environment each one of",
    "start": "1377460",
    "end": "1382529"
  },
  {
    "text": "these actor systems is going to be its own docker container so one container equals one process equals one actor",
    "start": "1382529",
    "end": "1388769"
  },
  {
    "text": "system that's the most granular way of trying to manage an aqua dotnet cluster",
    "start": "1388769",
    "end": "1393919"
  },
  {
    "text": "each one of these nodes is its own actor system and all of these nodes are connected via TCP connections to all of",
    "start": "1393919",
    "end": "1400950"
  },
  {
    "text": "the other nodes and they're able to send messages back and forth between each other's actors transparently all of the",
    "start": "1400950",
    "end": "1407639"
  },
  {
    "text": "serialization and routing is handled automatically by the akka don''t framework itself so you as the developer",
    "start": "1407639",
    "end": "1414090"
  },
  {
    "text": "don't need to worry about whether you're sending a message to a local actor or remote one the framework will make that",
    "start": "1414090",
    "end": "1420600"
  },
  {
    "text": "transparent for you now in terms of what akka dot cluster does so we're not gonna",
    "start": "1420600",
    "end": "1427019"
  },
  {
    "text": "get into a gigantic amount of detail but to give you just enough information so you can start researching it on your own",
    "start": "1427019",
    "end": "1432830"
  },
  {
    "text": "akka dot cluster is fundamentally about building peer-to-peer networks in a",
    "start": "1432830",
    "end": "1437850"
  },
  {
    "text": "server-side you know back-end environment akka dot cluster allows us",
    "start": "1437850",
    "end": "1443220"
  },
  {
    "text": "to discover new nodes automatically and remove old nodes that need to be updated or in the case of a sudden network",
    "start": "1443220",
    "end": "1450989"
  },
  {
    "text": "partition we can detect when a node that was on the network becomes unavailable and stop routing work to it until it",
    "start": "1450989",
    "end": "1458460"
  },
  {
    "text": "becomes available again we don't want to send messages across a bridge to nowhere right now one question you might be",
    "start": "1458460",
    "end": "1466200"
  },
  {
    "text": "asking why would I want a peer-to-peer network in a server-side environment why",
    "start": "1466200",
    "end": "1471509"
  },
  {
    "text": "is that a remotely useful thing to me well the answer is peer-to-peer networks are increasingly a good tool for",
    "start": "1471509",
    "end": "1478440"
  },
  {
    "text": "to guarantee high availability inside a distributed system the reason is I'll",
    "start": "1478440",
    "end": "1483899"
  },
  {
    "text": "move on to the next slide for just a second here the reason why peer-to-peer networks are helpful is they're",
    "start": "1483899",
    "end": "1489570"
  },
  {
    "text": "decentralized there's not a single master that dictates what the total state of the system is at any given time",
    "start": "1489570",
    "end": "1496139"
  },
  {
    "text": "rather that state is distributed across the edges of the system in a peer-to-peer network and one of the",
    "start": "1496139",
    "end": "1502350"
  },
  {
    "text": "profound implications of this is is that this helps us avoid single points of failure and single points of bottleneck",
    "start": "1502350",
    "end": "1508860"
  },
  {
    "text": "if one node goes down and our peer-to-peer network we lose some of the bandwidth and capacity that node had but",
    "start": "1508860",
    "end": "1516360"
  },
  {
    "text": "it doesn't compromise the total availability of the system we're able to stay available and continue processing",
    "start": "1516360",
    "end": "1521789"
  },
  {
    "text": "requests so that's why we want to use a peer-to-peer network here it's one of",
    "start": "1521789",
    "end": "1527070"
  },
  {
    "text": "the tools that can guarantee that we can go and scale out in a linear fashion if you double the number of nodes in a",
    "start": "1527070",
    "end": "1533370"
  },
  {
    "text": "peer-to-peer network you double its capacity right that's not necessarily true in client-server networks where the",
    "start": "1533370",
    "end": "1540750"
  },
  {
    "text": "server that's sort of the root dependency typically your database server can't scale linearly that's",
    "start": "1540750",
    "end": "1546870"
  },
  {
    "text": "always the bottleneck that constrains the growth of the system this is not the case in a stateful peer-to-peer",
    "start": "1546870",
    "end": "1552840"
  },
  {
    "text": "application like the type you can build with a cannot cluster the last thing I",
    "start": "1552840",
    "end": "1557940"
  },
  {
    "start": "1557000",
    "end": "1627000"
  },
  {
    "text": "wanted to mention is that couple of the other important features are connect cluster has one of one feature that's",
    "start": "1557940",
    "end": "1565259"
  },
  {
    "text": "quite useful is called rolls these are tags or labels you can apply to each",
    "start": "1565259",
    "end": "1570299"
  },
  {
    "text": "node inside your cluster this allows you to build a heterogeneous application where there can be different services",
    "start": "1570299",
    "end": "1576899"
  },
  {
    "text": "that all work cooperatively together inside the peer-to-peer network that do different things the sample application",
    "start": "1576899",
    "end": "1582870"
  },
  {
    "text": "that I'm going to try to get to has a total of four different services running inside of it they'll all perform",
    "start": "1582870",
    "end": "1588690"
  },
  {
    "text": "different workloads fundamentally and they're all able to work cooperatively together and they might even be written",
    "start": "1588690",
    "end": "1594240"
  },
  {
    "text": "by different teams within your organization as long as they all have standardized messaging contracts that",
    "start": "1594240",
    "end": "1600419"
  },
  {
    "text": "can work so that's what roles are all about and the last feature that akka dot cluster itself ships is what's called a",
    "start": "1600419",
    "end": "1607259"
  },
  {
    "text": "clustered router which is an actor that can detect when new nodes join the cluster and when old nodes leave or one nodes become",
    "start": "1607259",
    "end": "1614340"
  },
  {
    "text": "temporarily unavailable and can route messages to the appropriate party based on who's inside the network right now",
    "start": "1614340",
    "end": "1620970"
  },
  {
    "text": "and that's the tool we're going to look at today for doing state distribution inside our system now the way it cluster",
    "start": "1620970",
    "end": "1629760"
  },
  {
    "start": "1627000",
    "end": "1657000"
  },
  {
    "text": "forms I'm going to go ahead and skip through some of this real quickly because and the interest of time here",
    "start": "1629760",
    "end": "1634830"
  },
  {
    "text": "but the way it cluster forms is you have at least two nodes that are exist on",
    "start": "1634830",
    "end": "1639990"
  },
  {
    "text": "sort of a well known address maybe even a static address inside your network and they act as the seed nodes that help",
    "start": "1639990",
    "end": "1646140"
  },
  {
    "text": "form the basis of your cluster well one the rest of the nodes start up inside a",
    "start": "1646140",
    "end": "1652140"
  },
  {
    "text": "connect cluster they're all configured to go ahead and communicate with those seeds and seed nodes initially and after",
    "start": "1652140",
    "end": "1658800"
  },
  {
    "start": "1657000",
    "end": "1706000"
  },
  {
    "text": "a period of time every node in the cluster will be connected directly to every other node this forms a specific",
    "start": "1658800",
    "end": "1665340"
  },
  {
    "text": "type of peer-to-peer network known as a mesh network where every node is directly connected to every other node",
    "start": "1665340",
    "end": "1670679"
  },
  {
    "text": "this means that nodes don't have to worry about doing a traffic routing and",
    "start": "1670679",
    "end": "1676260"
  },
  {
    "text": "load balancing because they all have their own connection to each party it also means that failure detection inside",
    "start": "1676260",
    "end": "1682350"
  },
  {
    "text": "a mesh network is pretty close to real-time if one node crashes every",
    "start": "1682350",
    "end": "1687450"
  },
  {
    "text": "other node knows that their connection to it was broken within a very brief window of time here so since we're",
    "start": "1687450",
    "end": "1693390"
  },
  {
    "text": "interested in building real time applications being notified immediately about failures inside our system is",
    "start": "1693390",
    "end": "1699360"
  },
  {
    "text": "quite important that's why a mesh network design like this works pretty well in our favor now we're going",
    "start": "1699360",
    "end": "1708570"
  },
  {
    "text": "through a lot of concepts so I'm gonna put these slides online and be available for questions afterwards but the next",
    "start": "1708570",
    "end": "1715710"
  },
  {
    "text": "thing I want to introduce is probably one of the most important concepts and not just a cadet but distributed",
    "start": "1715710",
    "end": "1721200"
  },
  {
    "text": "programming in general which is how can you partition and distribute state in an",
    "start": "1721200",
    "end": "1726210"
  },
  {
    "text": "intelligible fashion inside a network like the types you can build with a Canuck cluster the technique we're going",
    "start": "1726210",
    "end": "1732330"
  },
  {
    "text": "to look at primarily is known as consistent hash distributions or an octet we're going to use a specific type",
    "start": "1732330",
    "end": "1738360"
  },
  {
    "text": "of router called a consistent hashing router this is an actor that uses a",
    "start": "1738360",
    "end": "1744000"
  },
  {
    "text": "consistent hashing strategy to figure all the entities for a specific hash key",
    "start": "1744000",
    "end": "1749890"
  },
  {
    "text": "should all go to the same place inside the network that way I can build a consistent picture of what that entity",
    "start": "1749890",
    "end": "1756669"
  },
  {
    "text": "state should look like so we're gonna use that but some other techniques that are available inside acha dot cluster",
    "start": "1756669",
    "end": "1763299"
  },
  {
    "text": "for distributing state I'll collect cluster starting is probably the tool that most people use in production it's",
    "start": "1763299",
    "end": "1769510"
  },
  {
    "text": "a little bit more intelligent than a consistent hash router but it uses the same math under the covers and then",
    "start": "1769510",
    "end": "1775090"
  },
  {
    "text": "finally if you saw Bart OSHA's talk a little bit earlier today on CR DTS there",
    "start": "1775090",
    "end": "1780399"
  },
  {
    "text": "is another module akka dotnet for doing in memory replication called distributed data so bartosz gave his talk a little",
    "start": "1780399",
    "end": "1786580"
  },
  {
    "text": "earlier today he's here in the front row if you want to ask him about it but that's yet another way of distributing",
    "start": "1786580",
    "end": "1791620"
  },
  {
    "text": "state inside akka net that we're not going to touch on today our strategy for",
    "start": "1791620",
    "end": "1797019"
  },
  {
    "text": "trying to guarantee consistency inside a naka dot cluster application is we could try to guarantee there is exactly at",
    "start": "1797019",
    "end": "1803830"
  },
  {
    "text": "most one instance of an entity actor insider system at any given time if we",
    "start": "1803830",
    "end": "1810010"
  },
  {
    "text": "started allowing let's say at least one instance of an actor where if a node went down inside the network or assuming",
    "start": "1810010",
    "end": "1816610"
  },
  {
    "text": "if a node became unavailable inside the network and we immediately tried to move that state to another node without",
    "start": "1816610",
    "end": "1822100"
  },
  {
    "text": "knowing if that process had shut down that would violate some of our consistency rules and you'll see an",
    "start": "1822100",
    "end": "1827950"
  },
  {
    "text": "example of that in just a minute but this is our strategy for trying to manage state consistently inside our",
    "start": "1827950",
    "end": "1834070"
  },
  {
    "text": "system now the way a clustered router works in alkyd net is let's suppose we",
    "start": "1834070",
    "end": "1839620"
  },
  {
    "start": "1835000",
    "end": "1902000"
  },
  {
    "text": "have four nodes that are all identical they all run the exact same code they're all going to work cooperatively together",
    "start": "1839620",
    "end": "1845529"
  },
  {
    "text": "to try to give us some scale and some fault tolerance to solve these sort of real-time state processing problems that",
    "start": "1845529",
    "end": "1852010"
  },
  {
    "text": "we have we're going to create a router on one of these nodes 1 nodes 2 and 4",
    "start": "1852010",
    "end": "1859750"
  },
  {
    "text": "are able to connect to node 1 and form a cluster that router will begin adding entries into its routing table for each",
    "start": "1859750",
    "end": "1866799"
  },
  {
    "text": "one of those nodes which will allow us to begin distributing messages to either one of those nodes so as soon as that",
    "start": "1866799",
    "end": "1874059"
  },
  {
    "text": "router a node number one because a router is just an actor as soon as it receives a message",
    "start": "1874059",
    "end": "1879300"
  },
  {
    "text": "it'll be able to going forward that message to the appropriate node based on its routing strategy that strategy could",
    "start": "1879300",
    "end": "1885360"
  },
  {
    "text": "be a round-robin strategy it could be a broadcast strategy where every node gets every message but the one we're going to",
    "start": "1885360",
    "end": "1891450"
  },
  {
    "text": "focus on today is called a consistent hashing strategy and by the way if node",
    "start": "1891450",
    "end": "1896550"
  },
  {
    "text": "four becomes unavailable the router will typically stop sending messages to that node until it comes back again now what",
    "start": "1896550",
    "end": "1903540"
  },
  {
    "start": "1902000",
    "end": "2008000"
  },
  {
    "text": "I really wanted to talk about in the context of distributing state is a mathematical technique called consistent",
    "start": "1903540",
    "end": "1909900"
  },
  {
    "text": "hashing this is used in databases for partitioning keys it's used in caches",
    "start": "1909900",
    "end": "1915750"
  },
  {
    "text": "like M cache D for being able to make sure that each cached object is unique inside the system and we use it inside",
    "start": "1915750",
    "end": "1922950"
  },
  {
    "text": "acha dotnet both inside clustered consistent hashing routers and inside cluster sharding the way this technique",
    "start": "1922950",
    "end": "1930360"
  },
  {
    "text": "works is you take a consistent hashing function so md5 and murmur three are",
    "start": "1930360",
    "end": "1935700"
  },
  {
    "text": "examples of them and what makes the hash function consistent is the fact that the same input always produces the same",
    "start": "1935700",
    "end": "1943350"
  },
  {
    "text": "output each time so that means every node in the cluster when they hash the same key always get the same output back",
    "start": "1943350",
    "end": "1950450"
  },
  {
    "text": "now you might be thinking doesn't every hash function do this and the answer is",
    "start": "1950450",
    "end": "1955830"
  },
  {
    "text": "no a good example of a hash function that does not do this is anytime you call get hash code on object and net",
    "start": "1955830",
    "end": "1962690"
  },
  {
    "text": "those hash codes are all slightly randomized from process to process and",
    "start": "1962690",
    "end": "1967710"
  },
  {
    "text": "that's in order to prevent a specific type of attack called a hash code prediction attack so that's why hash",
    "start": "1967710",
    "end": "1973800"
  },
  {
    "text": "codes from you know the normal dotnet base class aren't reliable for doing",
    "start": "1973800",
    "end": "1978870"
  },
  {
    "text": "this type of distribution we have to go and run our keys through something like a md5 or murmur three algorithm instead",
    "start": "1978870",
    "end": "1986960"
  },
  {
    "text": "now the other thing that makes consistent hashing functions interesting is their hash range can be plotted",
    "start": "1986960",
    "end": "1993290"
  },
  {
    "text": "linearly in a circle in this case a clockwise circle we're going to assume that our hash output is an unsigned long",
    "start": "1993290",
    "end": "2000260"
  },
  {
    "text": "integer for the sake of making it simpler and so that means we have two to the 64 possible hash values that can",
    "start": "2000260",
    "end": "2006470"
  },
  {
    "text": "ever be output from this function well I can go ahead and carve up that hash ring",
    "start": "2006470",
    "end": "2012800"
  },
  {
    "start": "2008000",
    "end": "2039000"
  },
  {
    "text": "into pie slices we're node1 owns the first pie slice no two owns the second",
    "start": "2012800",
    "end": "2019910"
  },
  {
    "text": "node 3 owns the third and you get the idea right we can read Avaya however",
    "start": "2019910",
    "end": "2026720"
  },
  {
    "text": "many times we need depending upon how many nodes there are inside our network",
    "start": "2026720",
    "end": "2032420"
  },
  {
    "text": "that can host this type of entity so the big implication here is whoops sorry",
    "start": "2032420",
    "end": "2039890"
  },
  {
    "start": "2039000",
    "end": "2131000"
  },
  {
    "text": "about that the big implication here is that I go ahead and send two messages to my consistent hash router for both both of",
    "start": "2039890",
    "end": "2047300"
  },
  {
    "text": "them have the hash key aryn as their as their primary as their key value well",
    "start": "2047300",
    "end": "2052340"
  },
  {
    "text": "that means that I know that those hashed values are both here to go to node number one and if I go an input a",
    "start": "2052340",
    "end": "2059090"
  },
  {
    "text": "totally different hash key let's say a grid of some kind I know that that message will be routed to node number",
    "start": "2059090",
    "end": "2064970"
  },
  {
    "text": "two instead of node number one so inside our network if I go ahead and send a",
    "start": "2064970",
    "end": "2072139"
  },
  {
    "text": "message of type errand to one of my consistent hash routers I know that that",
    "start": "2072140",
    "end": "2077360"
  },
  {
    "text": "actor that owns that entity exists on node number three because that's where",
    "start": "2077360",
    "end": "2082610"
  },
  {
    "text": "the hash value was was placed on the ring so I'm gonna go ahead and route that message to node number three if",
    "start": "2082610",
    "end": "2089600"
  },
  {
    "text": "node number four receives another hash key another message with the hash key of",
    "start": "2089600",
    "end": "2094909"
  },
  {
    "text": "Erin I'm gonna route that to the exact same destination actor on the other side of the network and so on you get the",
    "start": "2094910",
    "end": "2102080"
  },
  {
    "text": "idea what this means is is that we're able to form a complete picture of what",
    "start": "2102080",
    "end": "2108110"
  },
  {
    "text": "this entity state must look like inside this actor running on node number three",
    "start": "2108110",
    "end": "2113570"
  },
  {
    "text": "inside our network this helps us form that consistent view we need in order to",
    "start": "2113570",
    "end": "2118940"
  },
  {
    "text": "build these real-time applications that can work effectively so that's the state",
    "start": "2118940",
    "end": "2124340"
  },
  {
    "text": "distribution piece now we need to worry about one of the other complexities that",
    "start": "2124340",
    "end": "2129410"
  },
  {
    "text": "state introduces inside our application which is state has to be moved when the",
    "start": "2129410",
    "end": "2134750"
  },
  {
    "start": "2131000",
    "end": "2149000"
  },
  {
    "text": "topology of our cluster changes so let's say we have these two web nodes talking",
    "start": "2134750",
    "end": "2141560"
  },
  {
    "text": "to a business node under the covers and we need to upgrade this node",
    "start": "2141560",
    "end": "2146840"
  },
  {
    "text": "an updated version of our application well what's gonna happen is we might bring that new note online and we have",
    "start": "2146840",
    "end": "2154940"
  },
  {
    "start": "2149000",
    "end": "2179000"
  },
  {
    "text": "to suddenly move that state from all the actors that were running on the old node",
    "start": "2154940",
    "end": "2160070"
  },
  {
    "text": "onto the new one and this is where some tricky consistency issues can happen how",
    "start": "2160070",
    "end": "2165200"
  },
  {
    "text": "do I make sure the data that's our that our entities saved on the previous node",
    "start": "2165200",
    "end": "2170950"
  },
  {
    "text": "properly gets moved on to the firaon to the new node we just started up how can I make sure that happens well the most",
    "start": "2170950",
    "end": "2179570"
  },
  {
    "start": "2179000",
    "end": "2240000"
  },
  {
    "text": "common technique for doing this is using a technique called akkad uh persistence which uses event sourcing under the",
    "start": "2179570",
    "end": "2186590"
  },
  {
    "text": "covers the way this works is as an actor processes events that cause it to change",
    "start": "2186590",
    "end": "2192470"
  },
  {
    "text": "its state we persist those events or we can even persist a snapshot of what our",
    "start": "2192470",
    "end": "2197960"
  },
  {
    "text": "state looks like to a durable store like a database or a cloud file system or you",
    "start": "2197960",
    "end": "2203930"
  },
  {
    "text": "know any any number of other sort of durable mechanisms 99% of the time it's going to be a database though what this",
    "start": "2203930",
    "end": "2210470"
  },
  {
    "text": "means is that what an actor has moved from one node in our network to another that actor can go ahead and begin",
    "start": "2210470",
    "end": "2217700"
  },
  {
    "text": "replaying the events that persisted and it can use that to rebuild its state and",
    "start": "2217700",
    "end": "2223390"
  },
  {
    "text": "Akkad uh persistence is able to guarantee by the way that that actor will fully recover its previous state",
    "start": "2223390",
    "end": "2229850"
  },
  {
    "text": "before it can begin processing any new messages that's how we can make sure that that data is consistent from one",
    "start": "2229850",
    "end": "2236630"
  },
  {
    "text": "node to another inside the network now if I'm using a clustered router as my",
    "start": "2236630",
    "end": "2244040"
  },
  {
    "start": "2240000",
    "end": "2365000"
  },
  {
    "text": "primary tool for distributing state here's what this whole picture put together looks like inside ANCA dot",
    "start": "2244040",
    "end": "2250370"
  },
  {
    "text": "cluster so we have a clustered consistent hash router on one node routing events to a stateful service",
    "start": "2250370",
    "end": "2258470"
  },
  {
    "text": "that's operating on another node inside the network well what will end up",
    "start": "2258470",
    "end": "2263630"
  },
  {
    "text": "happening is if I bring a new node online and I go ahead and I distribute",
    "start": "2263630",
    "end": "2269390"
  },
  {
    "text": "messages still to this router and that router gets a notification that this new node is available where I'm going to go",
    "start": "2269390",
    "end": "2276440"
  },
  {
    "text": "ahead and do is say ok I want to begin routing messages for some of those entities so this new node that is now here ivory",
    "start": "2276440",
    "end": "2282740"
  },
  {
    "text": "divided that hash range in half well what'll end up happening is will recreate this new entity actor",
    "start": "2282740",
    "end": "2290030"
  },
  {
    "text": "underneath the route key that's on the other end of the router and it'll begin recovering its state from the database",
    "start": "2290030",
    "end": "2296090"
  },
  {
    "text": "and once it's done that it'll go ahead and start updating its state and processing events just like how the old",
    "start": "2296090",
    "end": "2302480"
  },
  {
    "text": "incarnation of that actor did which we can now safely pull offline now you",
    "start": "2302480",
    "end": "2307850"
  },
  {
    "text": "might be wondering if you take a look at this graph if I go back to this stage this looks a little dangerous doesn't it",
    "start": "2307850",
    "end": "2314330"
  },
  {
    "text": "we have an actor recovering its state while there's another incarnation of",
    "start": "2314330",
    "end": "2319760"
  },
  {
    "text": "that same end of the actor running in a different place in the network this is effectively a type of potential",
    "start": "2319760",
    "end": "2325730"
  },
  {
    "text": "consistency problem known as a split brain this is what acha dot cluster sharding consult can help solve it's",
    "start": "2325730",
    "end": "2332900"
  },
  {
    "text": "able to guarantee that before we create the new actor we passivate and terminate the old one before moving it onto a new",
    "start": "2332900",
    "end": "2339530"
  },
  {
    "text": "node now this talk already introduces enough new concepts so I decided to leave cluster sharding as homework for",
    "start": "2339530",
    "end": "2346190"
  },
  {
    "text": "you to explore on your own but it essentially uses the same type of math and distribution mechanism it's just",
    "start": "2346190",
    "end": "2352220"
  },
  {
    "text": "able to buffer any messages that would have gone to the new entity actor until the old entity actor has been terminated",
    "start": "2352220",
    "end": "2359000"
  },
  {
    "text": "that's why cluster sharding is the preferred mechanism for doing this in production I'll go ahead and move on",
    "start": "2359000",
    "end": "2365840"
  },
  {
    "text": "here now these are all the different pieces that you as the application",
    "start": "2365840",
    "end": "2370850"
  },
  {
    "text": "developer need to be concerned with while you're working with akkad annette kubernetes is the next piece of the",
    "start": "2370850",
    "end": "2377000"
  },
  {
    "text": "puzzle and it won't take too long but we're to go ahead and talk about how we can use that to do continuous",
    "start": "2377000",
    "end": "2382190"
  },
  {
    "text": "deployment of this application without having to lose state we'll worry about consistency and if I have enough time at",
    "start": "2382190",
    "end": "2388670"
  },
  {
    "text": "the end I'll go ahead and do a live deployment of one of my own kubernetes clusters that I just set up specifically",
    "start": "2388670",
    "end": "2393920"
  },
  {
    "text": "for you guys so why kubernetes will look like about half the rooms already using",
    "start": "2393920",
    "end": "2399920"
  },
  {
    "start": "2395000",
    "end": "2458000"
  },
  {
    "text": "it so the first point that each that it's ubiquitous appears to be true but",
    "start": "2399920",
    "end": "2405380"
  },
  {
    "text": "the reason why I tend to lean towards kubernetes for my applications is because it's one of the only tools out",
    "start": "2405380",
    "end": "2411530"
  },
  {
    "text": "there that has a really good first party con except for how to manage stateful applications docker swarm by contrast",
    "start": "2411530",
    "end": "2419210"
  },
  {
    "text": "does not have a mechanism like that so that's one of the sort of weaknesses of some of the other orchestration",
    "start": "2419210",
    "end": "2424700"
  },
  {
    "text": "platforms out there but on top of that kubernetes has a really rich ecosystem",
    "start": "2424700",
    "end": "2430160"
  },
  {
    "text": "built around it you're gonna see in a minute here that I'm using Azure kubernetes service but Amazon and Google",
    "start": "2430160",
    "end": "2437060"
  },
  {
    "text": "also have their own kubernetes services that they offer to developers and on top of that there's got to be at least a",
    "start": "2437060",
    "end": "2443420"
  },
  {
    "text": "dozen turnkey kubernetes vendors for building on-premise systems too so if you work in healthcare or finance or",
    "start": "2443420",
    "end": "2449810"
  },
  {
    "text": "government or defense or whatever there's plenty of different options you can use to make sure kubernetes works in",
    "start": "2449810",
    "end": "2455420"
  },
  {
    "text": "an environment that suits you and your organization's needs now as for why a jacuz Benetti service",
    "start": "2455420",
    "end": "2461950"
  },
  {
    "text": "the long story short is it's probably the easiest one of these environments to set up that can actually give you a",
    "start": "2461950",
    "end": "2469070"
  },
  {
    "text": "little bit of scale it only took me a few minutes to do it right before this talk so I recommend that as sort of a",
    "start": "2469070",
    "end": "2474680"
  },
  {
    "text": "set of training wheels for learning how kubernetes works now a couple of core",
    "start": "2474680",
    "end": "2480440"
  },
  {
    "start": "2478000",
    "end": "2695000"
  },
  {
    "text": "concepts in kubernetes kubernetes is fundamentally an orchestration platform",
    "start": "2480440",
    "end": "2485800"
  },
  {
    "text": "we're just designed to do is if you have multiple host machines that can all run",
    "start": "2485800",
    "end": "2490820"
  },
  {
    "text": "docker containers that house your application and maybe some of the other pieces of infrastructure you might need",
    "start": "2490820",
    "end": "2496430"
  },
  {
    "text": "like monitoring or tracing tools kubernetes abstracts the fact that there",
    "start": "2496430",
    "end": "2501980"
  },
  {
    "text": "might be many pieces of hardware all involved in trying to service those requests it gives you sort of a flat",
    "start": "2501980",
    "end": "2507920"
  },
  {
    "text": "surface you can deploy onto and kubernetes will figure out which boxes should on which boxes should each",
    "start": "2507920",
    "end": "2514280"
  },
  {
    "text": "application be deployed and tries to do that to guarantee the maximum degree of fault tolerance and availability inside",
    "start": "2514280",
    "end": "2521180"
  },
  {
    "text": "your system so for instance if you deployed three replicas of one of your applications kubernetes will spread that",
    "start": "2521180",
    "end": "2527750"
  },
  {
    "text": "out across multiple hosts rather than clump them all together on a single box and then lastly kubernetes is",
    "start": "2527750",
    "end": "2536270"
  },
  {
    "text": "highly configurable you can go ahead and for instance specify that what an application needs to be restarted or",
    "start": "2536270",
    "end": "2542870"
  },
  {
    "text": "deployed you can go ahead and say you know what I actually want you to add a new instance of this node before you",
    "start": "2542870",
    "end": "2549290"
  },
  {
    "text": "begin replacing the older nodes give me some more Headroom rather than replacing existing nodes right away it has a lot",
    "start": "2549290",
    "end": "2555980"
  },
  {
    "text": "of different knobs and dials you can use to configure your deployments and that's really useful in environments where you",
    "start": "2555980",
    "end": "2561680"
  },
  {
    "text": "have a large amount of traffic you want to go ahead and make sure you have enough buffer room that any event you",
    "start": "2561680",
    "end": "2567080"
  },
  {
    "text": "start doing a deployment you don't lose some of the capacity you need to stay available and this is fundamentally what",
    "start": "2567080",
    "end": "2573710"
  },
  {
    "text": "sort of a kubernetes deployment might look like in production you might have let's say three hosts three different",
    "start": "2573710",
    "end": "2579980"
  },
  {
    "text": "machines all running the kubernetes agents on it and they're the ones managing the kubernetes pods which are",
    "start": "2579980",
    "end": "2586070"
  },
  {
    "text": "the little units that how's your docker containers and most kubernetes services will be totally hidden from the network",
    "start": "2586070",
    "end": "2591980"
  },
  {
    "text": "aqua dot remote and aqua dot cluster for instance should never be publicly exposed over the network directly",
    "start": "2591980",
    "end": "2597980"
  },
  {
    "text": "instead you might want to go ahead and expose your kubernetes service through the public endpoints you define on",
    "start": "2597980",
    "end": "2603859"
  },
  {
    "text": "something like a web browser or RabbitMQ ingestion service any number of",
    "start": "2603859",
    "end": "2608900"
  },
  {
    "text": "different tools that can provide you with robust security and authorization mechanisms akka dot cluster is just",
    "start": "2608900",
    "end": "2615170"
  },
  {
    "text": "infrastructure it's not meant to provide all that for you it's meant to get messages very rapidly from point A to",
    "start": "2615170",
    "end": "2620720"
  },
  {
    "text": "point B this is fundamentally one of the ployed sort of kubernetes architecture",
    "start": "2620720",
    "end": "2626030"
  },
  {
    "text": "might look like in our case we're just exposing a load balancer service so do some round-robin load balancing around",
    "start": "2626030",
    "end": "2632570"
  },
  {
    "text": "our web application which is what feeds data into this particular application I built and then on as your IKS I took a",
    "start": "2632570",
    "end": "2643280"
  },
  {
    "text": "screenshot here of what all the fully provisioned infrastructure looks like in Azure in fact one thing I'm gonna do real",
    "start": "2643280",
    "end": "2648950"
  },
  {
    "text": "quickly here is I'm gonna change my screen just a second here that looks",
    "start": "2648950",
    "end": "2657980"
  },
  {
    "text": "beautiful doesn't it all right give me just a moment okay",
    "start": "2657980",
    "end": "2665970"
  },
  {
    "text": "now what I'm going to go ahead and do real briefly is I'm gonna pull up my live running cluster here I think I need",
    "start": "2665970",
    "end": "2673770"
  },
  {
    "text": "to here we go so if I take a look here",
    "start": "2673770",
    "end": "2683579"
  },
  {
    "text": "on screen this is what my live running kubernetes cluster looks like it's",
    "start": "2683579",
    "end": "2688619"
  },
  {
    "text": "literally just this little clump of stuff right here but under the cover is what that IKS cluster really is is what",
    "start": "2688619",
    "end": "2696480"
  },
  {
    "start": "2695000",
    "end": "2726000"
  },
  {
    "text": "you see in my presentation might go back it's a series of disks and virtual",
    "start": "2696480",
    "end": "2701819"
  },
  {
    "text": "machines and a network and security groups Azure goes and creates all the infrastructure for you under the covers",
    "start": "2701819",
    "end": "2707069"
  },
  {
    "text": "so you don't have to figure out how to do this on your own if I had to go and build an environment like this on my own",
    "start": "2707069",
    "end": "2712530"
  },
  {
    "text": "probably would have taken me like two weeks to do it instead with Azure Community Service I can get this spun up",
    "start": "2712530",
    "end": "2718319"
  },
  {
    "text": "in a matter of minutes instead that's why I strongly encourage you if you're looking to learn how kubernetes works",
    "start": "2718319",
    "end": "2723810"
  },
  {
    "text": "IKS is a really good way to get started now some key terms for kubernetes in the",
    "start": "2723810",
    "end": "2730800"
  },
  {
    "start": "2726000",
    "end": "2813000"
  },
  {
    "text": "context of akkad Anette first is a pod a pod represents a single unit of work",
    "start": "2730800",
    "end": "2737790"
  },
  {
    "text": "inside kubernetes and typically one pod houses one docker container it's technically possible for multiple",
    "start": "2737790",
    "end": "2744270"
  },
  {
    "text": "containers to run inside one pod so for instance if you're using a cadet net and New Relic",
    "start": "2744270",
    "end": "2749520"
  },
  {
    "text": "and you want to use New Relic for monitoring you might deploy nude relic as a sidecar Pauw a sidecar docker",
    "start": "2749520",
    "end": "2755550"
  },
  {
    "text": "container inside your pod although that's kind of unusual though the really big term that we want to remember as",
    "start": "2755550",
    "end": "2762180"
  },
  {
    "text": "academia developers is a stateful set that's the mechanism we're going to use",
    "start": "2762180",
    "end": "2767280"
  },
  {
    "text": "for deploying akka dotnet services to kubernetes because stateful sets are",
    "start": "2767280",
    "end": "2772940"
  },
  {
    "text": "identified as kubernetes as nodes that have to migrate state from point A to point B so to believe what kubernetes",
    "start": "2772940",
    "end": "2780000"
  },
  {
    "text": "will do during a deployment against the stateful set is they'll go ahead and rotate your nodes out one at a time and",
    "start": "2780000",
    "end": "2786089"
  },
  {
    "text": "they'll provide a long grace period for changing those nodes too and then lastly",
    "start": "2786089",
    "end": "2791760"
  },
  {
    "text": "we have the concept of a service a service is how you go and expose your pods inside the network inside",
    "start": "2791760",
    "end": "2798869"
  },
  {
    "text": "kubernetes so some services can be exposed publicly like a load balancer or an ingress",
    "start": "2798869",
    "end": "2804690"
  },
  {
    "text": "service most services inside a cadet are headless meaning they can only be",
    "start": "2804690",
    "end": "2809820"
  },
  {
    "text": "accessed inside the kubernetes environment so in the case of our little",
    "start": "2809820",
    "end": "2816240"
  },
  {
    "text": "sample here in fact you know what let me go ahead and get my mouse out all of",
    "start": "2816240",
    "end": "2821490"
  },
  {
    "text": "these the containers here contain a cadet net services and they're all networked together inside the kubernetes",
    "start": "2821490",
    "end": "2827940"
  },
  {
    "text": "network the only pawns that are exposed directly to the outside is the service",
    "start": "2827940",
    "end": "2833520"
  },
  {
    "text": "that houses our web pods it goes and allows us to route traffic on port 80 to the asp.net core process that I set up",
    "start": "2833520",
    "end": "2840720"
  },
  {
    "text": "and a steep will set if I want to do a deployment what'll end up happening is",
    "start": "2840720",
    "end": "2846930"
  },
  {
    "text": "I'll go ahead and tell kubernetes I want you to change the version of the docker image that's currently running inside",
    "start": "2846930",
    "end": "2853200"
  },
  {
    "text": "here I want you to move from image number zero point two four to zero point two five and that's gonna be what",
    "start": "2853200",
    "end": "2860460"
  },
  {
    "text": "triggers the deployment inside kubernetes so what kubernetes will do is",
    "start": "2860460",
    "end": "2866010"
  },
  {
    "text": "it'll go ahead and tart kill this first container it'll say okay I'm gonna have you gracefully shut down and it'll give",
    "start": "2866010",
    "end": "2872280"
  },
  {
    "text": "it enough time to hand over its state to someone else so I manually programmed",
    "start": "2872280",
    "end": "2877380"
  },
  {
    "text": "this specific application to give it about 40 seconds to hand over its state from point A to point B which is more",
    "start": "2877380",
    "end": "2883050"
  },
  {
    "text": "than enough time probably only need realistically more like 10 seconds in order to do it once that container is",
    "start": "2883050",
    "end": "2889680"
  },
  {
    "text": "shut down kubernetes will then replace it with the updated version using the new docker image tag that we had before",
    "start": "2889680",
    "end": "2896340"
  },
  {
    "text": "and then once that container boots up and its liveness check passes meaning that kubernetes is able to tell the",
    "start": "2896340",
    "end": "2902340"
  },
  {
    "text": "application started correctly it'll move on to replacing the next one of the replicas inside the cluster somewhere",
    "start": "2902340",
    "end": "2909660"
  },
  {
    "text": "and so you can see we'll go ahead and gradually one by one replace all the",
    "start": "2909660",
    "end": "2914670"
  },
  {
    "text": "nodes for this service and so they're all running this specific version of the docker image that I want now the",
    "start": "2914670",
    "end": "2922560"
  },
  {
    "start": "2920000",
    "end": "2973000"
  },
  {
    "text": "methodology that we're going to use for doing these live deployments is that all applications that use akka dotnet will",
    "start": "2922560",
    "end": "2929100"
  },
  {
    "text": "be deployed as stateful sets since state is fundamental to how akka dot cluster works and essential for building these",
    "start": "2929100",
    "end": "2935310"
  },
  {
    "text": "real-time applications we're looking to develop all internal akka dot cluster",
    "start": "2935310",
    "end": "2940530"
  },
  {
    "text": "functionality will be exposed as AI cluster IP service otherwise known as a headless service in kubernetes and all",
    "start": "2940530",
    "end": "2948630"
  },
  {
    "text": "external functionality can be exposed as a load balancer or an ingress service which allows you to go ahead and punch a",
    "start": "2948630",
    "end": "2955260"
  },
  {
    "text": "hole to the external Network and let traffic in and peda bridge command which",
    "start": "2955260",
    "end": "2960570"
  },
  {
    "text": "you didn't get a chance to talk about today we will use that for some node exits and then deployments and rollbacks",
    "start": "2960570",
    "end": "2966180"
  },
  {
    "text": "or basically doing upgrades or anything else are always done by changing the docker image tag now I'm gonna skip that",
    "start": "2966180",
    "end": "2976140"
  },
  {
    "text": "real quick now I'm gonna do a little bit of a demo here before I take some questions and by the way I'll be available right outside room five if you",
    "start": "2976140",
    "end": "2982890"
  },
  {
    "text": "have questions you want to ask one on one but this URL on screen here will take you to a set of step-by-step",
    "start": "2982890",
    "end": "2988610"
  },
  {
    "text": "tutorials were created for learning how to work with akka dot cluster kubernetes docker step-by-step so it takes about a",
    "start": "2988610",
    "end": "2997410"
  },
  {
    "text": "couple days to do maybe depends on how fast you are but I would go ahead and recommend following up with that if you",
    "start": "2997410",
    "end": "3002810"
  },
  {
    "text": "want to learn how to use all these tools one step at a time we just published this on May 30th so it's brand-new now",
    "start": "3002810",
    "end": "3010100"
  },
  {
    "text": "but I wanted the show real briefly before we before we depart ways here is what I have on screen right here is the",
    "start": "3010100",
    "end": "3017090"
  },
  {
    "text": "output from the kubernetes command line interface called coop cuddle in fact you",
    "start": "3017090",
    "end": "3022100"
  },
  {
    "text": "know what I'll do I'll clear my screen real quick I'm gonna go ahead and get",
    "start": "3022100",
    "end": "3028010"
  },
  {
    "text": "all the resources inside my kubernetes namespace I set up on Azure kubernetes",
    "start": "3028010",
    "end": "3033620"
  },
  {
    "text": "service and this would be a bad time for the internet to go down but I don't",
    "start": "3033620",
    "end": "3039980"
  },
  {
    "text": "think it will no I should be good all right there we go I just got a list of",
    "start": "3039980",
    "end": "3047030"
  },
  {
    "text": "all my services back that are running inside my kubernetes cluster apparently",
    "start": "3047030",
    "end": "3052400"
  },
  {
    "text": "my jäger node Jager is a distributed tracing tool ran out of memory and got evicted by kubernetes so we'll go ahead",
    "start": "3052400",
    "end": "3058400"
  },
  {
    "text": "and pour one out for Jager a little bit later but my akka dotnet cluster is just fine I have a bunch of nodes that are",
    "start": "3058400",
    "end": "3064940"
  },
  {
    "text": "still running and I have about two copies of what you'll also notice is the set of",
    "start": "3064940",
    "end": "3070339"
  },
  {
    "text": "services I have running inside kubernetes right here some of them are publicly available my 3 load balancer",
    "start": "3070339",
    "end": "3076700"
  },
  {
    "text": "services and they have external IPS that are open to the internet created by the azure kubernetes service so if I go for",
    "start": "3076700",
    "end": "3084050"
  },
  {
    "text": "instance to this IP address forty seventy four to forty eight ten if I go",
    "start": "3084050",
    "end": "3089720"
  },
  {
    "text": "and pull that up I believe that is my application right here that's doing this",
    "start": "3089720",
    "end": "3094839"
  },
  {
    "text": "this application is basically a fake stock market is what's going on and I'm getting real-time price and volume",
    "start": "3094839",
    "end": "3100940"
  },
  {
    "text": "notifications so yeah there you go so we get new price notifications about every ten seconds we batch them inside",
    "start": "3100940",
    "end": "3107180"
  },
  {
    "text": "the system so you can see my web app is doing this to give you an example that I'm not totally full of it here I'm",
    "start": "3107180",
    "end": "3114200"
  },
  {
    "text": "gonna do a live deployment for one of our stateful nodes that produces this data and you'll see that the stream of",
    "start": "3114200",
    "end": "3119660"
  },
  {
    "text": "data we receive here does not get interrupted so I'm gonna do that by going to Azure pipeline's here I'm going",
    "start": "3119660",
    "end": "3127880"
  },
  {
    "text": "to grab my trade processor my trade processor is the node that's actually running what's called the order book",
    "start": "3127880",
    "end": "3134599"
  },
  {
    "text": "system matching by trades and sell trades together in order to produce up matches essentially I'm gonna go ahead",
    "start": "3134599",
    "end": "3141500"
  },
  {
    "text": "and do a roll back to a previous version of my docker container this is gonna run that Kubb cuddle command under the",
    "start": "3141500",
    "end": "3147020"
  },
  {
    "text": "covers here so I'm gonna pull this up actually know what I need to create a",
    "start": "3147020",
    "end": "3152540"
  },
  {
    "text": "new release my bad you create release",
    "start": "3152540",
    "end": "3157809"
  },
  {
    "text": "I'm gonna go ahead and pick my deployment step deploy to Kate's I'm",
    "start": "3157809",
    "end": "3164150"
  },
  {
    "text": "gonna go ahead and grab the version I want to deploy I'll do 0.2 and I'm gonna",
    "start": "3164150",
    "end": "3172970"
  },
  {
    "text": "go ahead and kick that off now this is a manual release so I have to go ahead and check a button letting as your pipelines",
    "start": "3172970",
    "end": "3178760"
  },
  {
    "text": "know that I'm not insane I'm gonna go ahead and do that here",
    "start": "3178760",
    "end": "3184630"
  },
  {
    "text": "let's see me get rid of that click deploy there we go",
    "start": "3184960",
    "end": "3193329"
  },
  {
    "text": "so that should run any minute let's see",
    "start": "3193770",
    "end": "3203840"
  },
  {
    "text": "what do you say all I need to scroll down and confirm it oh there you go thank you see we've got some experience",
    "start": "3203840",
    "end": "3211530"
  },
  {
    "text": "as your pipelines users in the audience I see alright thank you all right so that's queued up for",
    "start": "3211530",
    "end": "3217800"
  },
  {
    "text": "deployment and this appointments very fast all we're doing is telling kubernetes to change the version of the docker image that we're using all right",
    "start": "3217800",
    "end": "3225090"
  },
  {
    "text": "in progress hooray all right and that should be done",
    "start": "3225090",
    "end": "3232230"
  },
  {
    "text": "in a second here okay looks like it's",
    "start": "3232230",
    "end": "3238619"
  },
  {
    "text": "finished good now if I go to coop cuddle and I go ahead and I say get all again",
    "start": "3238619",
    "end": "3245160"
  },
  {
    "text": "what we should see is some of the pods for that trader service should be getting swapped out now all right here",
    "start": "3245160",
    "end": "3251670"
  },
  {
    "text": "we go so take a look at this we are in a container creating state here this means",
    "start": "3251670",
    "end": "3258750"
  },
  {
    "text": "that the old version of that pod was already terminated by kubernetes and is now being recreated in place and you'll",
    "start": "3258750",
    "end": "3265260"
  },
  {
    "text": "see in a moment here the lifespan of this node is already set to 6 seconds the other nodes been active for an hour",
    "start": "3265260",
    "end": "3271920"
  },
  {
    "text": "meaning that one hasn't been touched yet by kubernetes if I go and run my query again here let me do that real fast all",
    "start": "3271920",
    "end": "3281970"
  },
  {
    "text": "right if I do that you'll notice both of these nodes have now been replaced so they're both about 30 seconds old and if",
    "start": "3281970",
    "end": "3289710"
  },
  {
    "text": "I go back to my screen here my akka CQRS pricing system I should go ahead and see",
    "start": "3289710",
    "end": "3295260"
  },
  {
    "text": "another price update in a matter of seconds here just a moment there we go",
    "start": "3295260",
    "end": "3302070"
  },
  {
    "text": "got some more pricing information going in the reason why that was able to work is one of the order book nodes when it",
    "start": "3302070",
    "end": "3308970"
  },
  {
    "text": "shut down hands off its state to the next order book node and then when that node had to shut down it handed it back",
    "start": "3308970",
    "end": "3314460"
  },
  {
    "text": "to the new node that just got upgraded so they kind of ping-pong their state back and forth and persisted everything",
    "start": "3314460",
    "end": "3320369"
  },
  {
    "text": "to MongoDB under the covers so that's it for my presentation today I'll go ahead",
    "start": "3320369",
    "end": "3326369"
  },
  {
    "text": "and pull up the URL more time here if you want to learn how to do this step by step please go here otherwise thank you very much for",
    "start": "3326369",
    "end": "3333499"
  },
  {
    "text": "attending my talk today and I'd love to talk to some of you outside if you have questions thank you very much",
    "start": "3333499",
    "end": "3339630"
  },
  {
    "text": "[Applause]",
    "start": "3339630",
    "end": "3343319"
  }
]