[
  {
    "start": "0",
    "end": "147000"
  },
  {
    "text": "okay welcome everyone to my session writing a full text search engine in",
    "start": "5000",
    "end": "10860"
  },
  {
    "text": "typescript before we start I wanna dedicate a huge round of applause for the NDC Creo and the organization this",
    "start": "10860",
    "end": "17340"
  },
  {
    "text": "conference is amazing thank you all",
    "start": "17340",
    "end": "22220"
  },
  {
    "text": "so I know that we just had lunch so the possibility of me borrowing you that",
    "start": "22560",
    "end": "28320"
  },
  {
    "text": "much to go to sleep right now it's really high so I put a couple of memes here and now you know to start making",
    "start": "28320",
    "end": "37020"
  },
  {
    "text": "things a bit more fun and spicy possible you know during the The Talk so before we start I'd like to introduce",
    "start": "37020",
    "end": "43559"
  },
  {
    "text": "myself I am Michaela I'm from Milan in Italy I work as a senior software",
    "start": "43559",
    "end": "48660"
  },
  {
    "text": "architect at near form I'm a Google developer expert in a Microsoft MVP and I built a full text search engine",
    "start": "48660",
    "end": "56219"
  },
  {
    "text": "yet another one so you might be wondering why and we will",
    "start": "56219",
    "end": "62760"
  },
  {
    "text": "get there I promise but before we get there I'd like to thank my company near from for letting me being there today we",
    "start": "62760",
    "end": "70439"
  },
  {
    "text": "are a Professional Services Company we are specialized in node.js typescript devops on Azure Google Cloud AWS",
    "start": "70439",
    "end": "76799"
  },
  {
    "text": "whatever and we are hiring remotely so if you're interested in you know working",
    "start": "76799",
    "end": "82140"
  },
  {
    "text": "with people that maintains the eight percent of all npn modules out there which are responsible for 1 billion",
    "start": "82140",
    "end": "88799"
  },
  {
    "text": "monthly downloads please let me know after this talk but we started with a question why",
    "start": "88799",
    "end": "96960"
  },
  {
    "text": "why do I want to write yet another full text search engine when we have such beautiful Solutions right we have",
    "start": "96960",
    "end": "104180"
  },
  {
    "text": "elasticsearch we have solar we have algolia they are beautiful products and",
    "start": "104180",
    "end": "110460"
  },
  {
    "text": "I would lie if I didn't say that elasticsearch specifically has been the",
    "start": "110460",
    "end": "116399"
  },
  {
    "text": "open source project that made me fall in love with open source and nowadays I'm working full-time open source also",
    "start": "116399",
    "end": "122880"
  },
  {
    "text": "thanks to elasticsearch then I'd like to say that what I cannot create I do not understand and I'm",
    "start": "122880",
    "end": "128819"
  },
  {
    "text": "quoting Richard Feynman in that and I wanted to learn more as I said elasticsearch has been incredibly",
    "start": "128819",
    "end": "135300"
  },
  {
    "text": "influential in my career so I wanted to learn more about how it works and how can I build my own little toy you know",
    "start": "135300",
    "end": "141840"
  },
  {
    "text": "and by the end of this talk I will show you what I built and we can discuss it",
    "start": "141840",
    "end": "147239"
  },
  {
    "start": "147000",
    "end": "325000"
  },
  {
    "text": "so I also want to State now so you are in time to go to another room if you",
    "start": "147239",
    "end": "152879"
  },
  {
    "text": "want this talk is going to be a journey through algorithms and data structures and I know that now you feel like oh my",
    "start": "152879",
    "end": "159239"
  },
  {
    "text": "God I'm trapped in a in a very boring talk about data structures and algorithms but don't worry I promise",
    "start": "159239",
    "end": "165599"
  },
  {
    "text": "this is not gonna be that situation where you have to learn a lot of useless stuff just to pass an interview",
    "start": "165599",
    "end": "170940"
  },
  {
    "text": "I want this to be actual useful information for you and can potentially help you uh in your daily job so with",
    "start": "170940",
    "end": "179280"
  },
  {
    "text": "that being said I also want to convince you being a typescript developer myself that",
    "start": "179280",
    "end": "185940"
  },
  {
    "text": "there is no slow programming language out there there's just bad data structure and algorithm design from now",
    "start": "185940",
    "end": "191459"
  },
  {
    "text": "on DSA so when it comes to measuring performances in programming",
    "start": "191459",
    "end": "197580"
  },
  {
    "text": "languages you know we know that Java and C sharp are faster than JavaScript and PHP Ruby is really slow python is quite",
    "start": "197580",
    "end": "204599"
  },
  {
    "text": "slow well I believe that if you know data structures and algorithms things",
    "start": "204599",
    "end": "209700"
  },
  {
    "text": "can change and I have some benchmarks at the end of this talk so we can eventually start talking about",
    "start": "209700",
    "end": "215760"
  },
  {
    "text": "full text search before getting there we need to ask ourselves what the hell is full text",
    "start": "215760",
    "end": "221340"
  },
  {
    "text": "search right so full text search and I'm going insidebase.com",
    "start": "221340",
    "end": "226920"
  },
  {
    "text": "is a more advanced way to search a database full text search quickly finds all",
    "start": "226920",
    "end": "232319"
  },
  {
    "text": "instances of a term a word in a table without having to scan rows and without having to know which column a term is",
    "start": "232319",
    "end": "240000"
  },
  {
    "text": "stored in full text search works by using text indexes and a taxi index stores",
    "start": "240000",
    "end": "246239"
  },
  {
    "text": "positional information for all terms found in a columns you can create text index on so if you feel a bit confused I",
    "start": "246239",
    "end": "253620"
  },
  {
    "text": "Promise You by the end of this talk you're gonna understand perfectly what is written here",
    "start": "253620",
    "end": "258780"
  },
  {
    "text": "so before we start implementing it let's see a couple of popular Alternatives we already mentioned elasticsearch",
    "start": "258780",
    "end": "265139"
  },
  {
    "text": "installer for example which both relies on Apache Lucin which is the full text",
    "start": "265139",
    "end": "270479"
  },
  {
    "text": "search engine itself we also have algoria which is the only closed Source product in this list and",
    "start": "270479",
    "end": "277139"
  },
  {
    "text": "it's another amazing production ready product just for you to know we also have a new generation of search",
    "start": "277139",
    "end": "283380"
  },
  {
    "text": "engines we have melee search and Sonic both built in Rust with of course performances in mind and I'd encourage",
    "start": "283380",
    "end": "290340"
  },
  {
    "text": "you to take a look in those because these are great products actually when it comes to JavaScript as you may",
    "start": "290340",
    "end": "296580"
  },
  {
    "text": "guess how many JavaScript developers do we have here first of all that's amazing that's awesome okay so you perfectly",
    "start": "296580",
    "end": "303780"
  },
  {
    "text": "know that there are tons and tons of packages I selected the three that I use",
    "start": "303780",
    "end": "310620"
  },
  {
    "text": "the most so mini search which is perfect I love it fuse.js and lunar which sadly",
    "start": "310620",
    "end": "316440"
  },
  {
    "text": "is no longer maintained just for you to know if you need JavaScript embeddable full text search engine you also have",
    "start": "316440",
    "end": "323340"
  },
  {
    "text": "these options so where do we want to start to learn more",
    "start": "323340",
    "end": "329400"
  },
  {
    "start": "325000",
    "end": "773000"
  },
  {
    "text": "about full text search first of all let's try to understand which is the kind of data that we want",
    "start": "329400",
    "end": "334740"
  },
  {
    "text": "to store and retrieve so let's start with the simplest data possible let's say we have the following",
    "start": "334740",
    "end": "340680"
  },
  {
    "text": "documents simple array of documents these are quotes from movies so we have",
    "start": "340680",
    "end": "345720"
  },
  {
    "text": "like it's alive it's alive from Frankenstein we have a bunch of other",
    "start": "345720",
    "end": "351060"
  },
  {
    "text": "um documents and quotes and we need to understand what we want to how we want",
    "start": "351060",
    "end": "356580"
  },
  {
    "text": "to store this data and what we want to run as a process on this data too",
    "start": "356580",
    "end": "361979"
  },
  {
    "text": "so first thing first we want to tokenize our data and we will take in",
    "start": "361979",
    "end": "367440"
  },
  {
    "text": "consideration the quote right now the quote appropriate because it's a sentence and makes more sense possibly so when we go tokenize a sentence uh for",
    "start": "367440",
    "end": "377460"
  },
  {
    "text": "example it's alive it's live you will notice that we are removing the single quote so it's for example becomes an",
    "start": "377460",
    "end": "382919"
  },
  {
    "text": "individual word and you do the same in the second quote with you have you've become you've all",
    "start": "382919",
    "end": "389759"
  },
  {
    "text": "together and because we are tokenizing so we want to remove uh based on particular rules that we are going to",
    "start": "389759",
    "end": "396360"
  },
  {
    "text": "see in a bunch of seconds we want to remove stuff that we don't really care about for example double quotes single",
    "start": "396360",
    "end": "403560"
  },
  {
    "text": "quotes question marks Etc and we do that again by using rules that",
    "start": "403560",
    "end": "410400"
  },
  {
    "text": "can depend on the language of the data we are putting into our search engine for example we have like",
    "start": "410400",
    "end": "417479"
  },
  {
    "text": "um Dutch which has a specific set of rules we have to respect in that case it's a regular expression that helps us",
    "start": "417479",
    "end": "424139"
  },
  {
    "text": "splitting a sentence depending on uh the data sorry on the language we have we",
    "start": "424139",
    "end": "429539"
  },
  {
    "text": "have Greek we have Nepali a break and so on um we also want to remove all the accent",
    "start": "429539",
    "end": "436319"
  },
  {
    "text": "and the diacritics so for example naive as you can see has a diacritics on the letter I we just remove it we do the",
    "start": "436319",
    "end": "442620"
  },
  {
    "text": "same with facade and jalapeno because at the end of the day first of all people is not good at searching I am",
    "start": "442620",
    "end": "450060"
  },
  {
    "text": "the first one so if I have to search for jalapeno I'm Italian I don't have uh this on my uh keyboard it's really oh I",
    "start": "450060",
    "end": "458400"
  },
  {
    "text": "have it but it's really hard for me to reach it so I just type jalapeno with a with an N you know so by removing this",
    "start": "458400",
    "end": "465000"
  },
  {
    "text": "I'm giving more support for um uh type of tolerance for example and also",
    "start": "465000",
    "end": "470099"
  },
  {
    "text": "Spanish users can just type jalapeno the correct way and find the right result",
    "start": "470099",
    "end": "475139"
  },
  {
    "text": "straight away so removing diacritics it's pretty easy actually we have a map of regular",
    "start": "475139",
    "end": "482160"
  },
  {
    "text": "expressions and every time we encounter like an a we look if there's um a diacritics and just remove it and",
    "start": "482160",
    "end": "488580"
  },
  {
    "text": "replace it with capital a lowercase a etc that's really really easy but that's a process we want to do on all of our",
    "start": "488580",
    "end": "495660"
  },
  {
    "text": "Charters we're going to insert in the database so after that we lowercase all the",
    "start": "495660",
    "end": "501479"
  },
  {
    "text": "tokens and of course if we do lowercase the tokens that means we can't perform case sensitive search so keep that in",
    "start": "501479",
    "end": "507180"
  },
  {
    "text": "mind most search engines are lowercasing all the tokens by default but you can",
    "start": "507180",
    "end": "512399"
  },
  {
    "text": "opt in for maintaining uppercase characters too of course",
    "start": "512399",
    "end": "517680"
  },
  {
    "text": "then we want to remove the duplicates why is that we want to remove duplicates",
    "start": "517680",
    "end": "523020"
  },
  {
    "text": "because we just don't want to duplicate data one problem you have when you're building a full text search engine is that the index size and we're gonna see",
    "start": "523020",
    "end": "529860"
  },
  {
    "text": "what an index is it's going to grow exponentially it's going to become very very huge",
    "start": "529860",
    "end": "535019"
  },
  {
    "text": "so we want to remove duplicates to ensure that the index size will will stay you know compact we can store",
    "start": "535019",
    "end": "542880"
  },
  {
    "text": "though uh like um a token like a number two for saying it's alive appears twice",
    "start": "542880",
    "end": "548820"
  },
  {
    "text": "in that sentence and we can use that number when we use a classification method such as TF IDF I don't know which",
    "start": "548820",
    "end": "555720"
  },
  {
    "text": "helps us building more coherent search but we will discuss about that later on",
    "start": "555720",
    "end": "562620"
  },
  {
    "text": "then we want to remove the stop words so there is a lot of process going on right we want to remove the stop word but what",
    "start": "562620",
    "end": "569519"
  },
  {
    "text": "is a stop word in first place so stop words are a set of commonly used",
    "start": "569519",
    "end": "574860"
  },
  {
    "text": "words in a language examples of stop words in English are a d e's are Etc",
    "start": "574860",
    "end": "581339"
  },
  {
    "text": "stop words are commonly used in text Mining and natural language processing to eliminate words that are so commonly used that they carry very little useful",
    "start": "581339",
    "end": "588180"
  },
  {
    "text": "information so let's see if that's the case for us we have like a live it was",
    "start": "588180",
    "end": "593760"
  },
  {
    "text": "it's alive it's alive now just alive because it's as an individual token does",
    "start": "593760",
    "end": "599399"
  },
  {
    "text": "not carry any meaning you know also the same for like God to do I in",
    "start": "599399",
    "end": "606300"
  },
  {
    "text": "the second sentence and those are of what Ghana in the third and last",
    "start": "606300",
    "end": "611940"
  },
  {
    "text": "sentence of course stop words depends on the language if you have to remove Italian stop words or Norwegian stop",
    "start": "611940",
    "end": "618839"
  },
  {
    "text": "words they're gonna be different so you want to have like a dictionary of stop words that you want to remove from your",
    "start": "618839",
    "end": "624540"
  },
  {
    "text": "um from your indexes then we are getting to my favorite part",
    "start": "624540",
    "end": "630540"
  },
  {
    "text": "personally of every tokenization process which is the stemming process so",
    "start": "630540",
    "end": "636180"
  },
  {
    "text": "stemming refers to the process of removing parts of words for example we",
    "start": "636180",
    "end": "641399"
  },
  {
    "text": "have lucky which becomes Lac so we maintain the meaning but we contract the",
    "start": "641399",
    "end": "647820"
  },
  {
    "text": "word to its stem so we have like chocolates which is plural and becomes",
    "start": "647820",
    "end": "653820"
  },
  {
    "text": "chocolate singular which is it's not a problem because the meaning is the same so when a user search for chocolate or",
    "start": "653820",
    "end": "660360"
  },
  {
    "text": "chocolates we can just say okay you you search for something containing chocolate so here you are of course we can keep both",
    "start": "660360",
    "end": "667500"
  },
  {
    "text": "tokens if you want to perform like exact search so that's a possibility of course but",
    "start": "667500",
    "end": "673260"
  },
  {
    "text": "by default we just stamp everything um and of course this depends on the",
    "start": "673260",
    "end": "679019"
  },
  {
    "text": "language again if you're developing a full text search engine which only supports English you can just have a",
    "start": "679019",
    "end": "685440"
  },
  {
    "text": "stammer but like if you want to support all the language in this world you have to build a very different stammer",
    "start": "685440",
    "end": "691140"
  },
  {
    "text": "because the rules for standing a word can depend on the language itself and this is why I want to introduce Noble so",
    "start": "691140",
    "end": "699480"
  },
  {
    "text": "Noble is a personal project of Martin Porter we will see later who is this guy",
    "start": "699480",
    "end": "704880"
  },
  {
    "text": "um and as Noble it's written in C can be compiled in JavaScript it can be",
    "start": "704880",
    "end": "709980"
  },
  {
    "text": "imported in Rust can be used in Ruby C sharp Java whatever and it's meant for",
    "start": "709980",
    "end": "715560"
  },
  {
    "text": "creating stemming rules and basically compiling down uh stemming algorithm in C to be",
    "start": "715560",
    "end": "722880"
  },
  {
    "text": "imported in other languages so an example of snowball which is again open source so everyone can use it is this",
    "start": "722880",
    "end": "729420"
  },
  {
    "text": "one so this is an English stammer we can see oh no it's the other way around okay",
    "start": "729420",
    "end": "735180"
  },
  {
    "text": "we can see like consign which gets sent to consign again Remains the Same but",
    "start": "735180",
    "end": "740279"
  },
  {
    "text": "then we have consigned which gets them to consign that's because these words has the same meaning so we are storing",
    "start": "740279",
    "end": "747600"
  },
  {
    "text": "the meaning of a word not the entire word itself and again I can store both both the meaning and the",
    "start": "747600",
    "end": "755279"
  },
  {
    "text": "um and the stand word if I want to perform except match but this is what you're gonna get by default on pretty",
    "start": "755279",
    "end": "762300"
  },
  {
    "text": "all search engines and so a couple of examples",
    "start": "762300",
    "end": "767940"
  },
  {
    "text": "um again I'm Italian so I could develop like customer for an Italian search",
    "start": "767940",
    "end": "773399"
  },
  {
    "start": "773000",
    "end": "890000"
  },
  {
    "text": "engine but it's easier if I use just this Noble algorithm right and again I know nothing about German so I want to",
    "start": "773399",
    "end": "780180"
  },
  {
    "text": "use Noble or we will say later the stemming algorithm used by the snowball itself and given that we are in Oslo I",
    "start": "780180",
    "end": "787740"
  },
  {
    "text": "want to keep that for a couple of seconds so you can see in a region how it behaves so maybe it can be a bit more",
    "start": "787740",
    "end": "793980"
  },
  {
    "text": "helpful than Italian and German okay so by the way this is Martin Porter and",
    "start": "793980",
    "end": "800399"
  },
  {
    "text": "he is the author of The algorithm that we're gonna see in a couple of seconds so one nice thing about this Noble",
    "start": "800399",
    "end": "806639"
  },
  {
    "text": "project it's that it has some HTML pages that basically tells you like this is the algorithm you have to follow for",
    "start": "806639",
    "end": "812940"
  },
  {
    "text": "example for English which is different from the algorithm the stemming algorithm you're gonna use in France in",
    "start": "812940",
    "end": "819240"
  },
  {
    "text": "French in Italian in Norwegian Etc and this is a screenshot taken directly from",
    "start": "819240",
    "end": "825660"
  },
  {
    "text": "this Noble website so if you don't want to compile like a c program into JavaScript in our case right now you can",
    "start": "825660",
    "end": "832860"
  },
  {
    "text": "just follow these instructions and build the stammer directly into your program in your favorite language beat C sharp F",
    "start": "832860",
    "end": "840060"
  },
  {
    "text": "sharp Haskell I don't care these are the steps you're gonna take to succeed",
    "start": "840060",
    "end": "845820"
  },
  {
    "text": "and of course we were saying it depends on the language so from time to time you don't really know what is the input",
    "start": "845820",
    "end": "852120"
  },
  {
    "text": "language for a given text so you might want to use something like node language detect which is of course a library that",
    "start": "852120",
    "end": "859680"
  },
  {
    "text": "uses an engram algorithm to determine the language of a given sentence we are",
    "start": "859680",
    "end": "864720"
  },
  {
    "text": "not gonna Deep dive into that because I only have 60 minutes but this is really interesting and I really encourage you",
    "start": "864720",
    "end": "870360"
  },
  {
    "text": "go see what it's all about so this is the final result right we",
    "start": "870360",
    "end": "876600"
  },
  {
    "text": "have from it's alive it's alive to just alive and a bunch of other tokens",
    "start": "876600",
    "end": "883740"
  },
  {
    "text": "but now we should ask ourselves how do we want to store those tokens we have just normalized our data right",
    "start": "883740",
    "end": "890940"
  },
  {
    "start": "890000",
    "end": "946000"
  },
  {
    "text": "so how do we store it and get ready for a monster because algorithms and data structures are identified in this talk",
    "start": "890940",
    "end": "897180"
  },
  {
    "text": "as monsters we have to start thinking about data",
    "start": "897180",
    "end": "902579"
  },
  {
    "text": "structures but don't worry it's going to be super easy I promise so let's start from the easiest data",
    "start": "902579",
    "end": "909540"
  },
  {
    "text": "structure possible and let me introduce it that way let's say we have an array of six elements and",
    "start": "909540",
    "end": "915839"
  },
  {
    "text": "we know for sure that there is a document containing the word chocolate we want to find it of course we have a",
    "start": "915839",
    "end": "922380"
  },
  {
    "text": "linear way to do that we enter the document number one we look up all the documents and uh sorry all the sentences",
    "start": "922380",
    "end": "928380"
  },
  {
    "text": "and we say is there the token chocolate for example no it's not there so let's go next one is not there it's not there",
    "start": "928380",
    "end": "935760"
  },
  {
    "text": "it's not there it's not there and eventually we are in the worst case scenario so the last one it was in the",
    "start": "935760",
    "end": "941820"
  },
  {
    "text": "last document and that's a problem because the time complexity required for",
    "start": "941820",
    "end": "948420"
  },
  {
    "start": "946000",
    "end": "1647000"
  },
  {
    "text": "doing that it's on which means if we have one billion documents we have to scan through one billion documents to",
    "start": "948420",
    "end": "954300"
  },
  {
    "text": "find that specific word in our worst case scenario and we might want something more performant",
    "start": "954300",
    "end": "960120"
  },
  {
    "text": "we might want to perform this operation in o1 so cause some time meaning if I have 1 billion elements I perfectly know",
    "start": "960120",
    "end": "966660"
  },
  {
    "text": "where to find the decorative one in one shot",
    "start": "966660",
    "end": "972120"
  },
  {
    "text": "so as a computer science scientist myself I want to introduce overuse data",
    "start": "972120",
    "end": "978720"
  },
  {
    "text": "structure which is called hashmap and yes this is literally me",
    "start": "978720",
    "end": "984139"
  },
  {
    "text": "so let's see what hashmaps are all about hashmaps are used to store data and key",
    "start": "984139",
    "end": "990540"
  },
  {
    "text": "value pairs so this is an example of data of my favorite stuff so animal dog",
    "start": "990540",
    "end": "995699"
  },
  {
    "text": "you know I have a dog it's called Linux I love him that's another story and book",
    "start": "995699",
    "end": "1001220"
  },
  {
    "text": "algorithms to live by highly recommended my favorite city is Florence and food chocolate so let's say we want to find",
    "start": "1001220",
    "end": "1007220"
  },
  {
    "text": "chocolate we can do that in o1 if we have a very good algorithm and we will get there by",
    "start": "1007220",
    "end": "1013759"
  },
  {
    "text": "using hashmaps so by for creating a hashmap and like in JavaScript we",
    "start": "1013759",
    "end": "1018920"
  },
  {
    "text": "typically use maps in PHP we use associative arrays in Rust and Java we just use the hashmap classes I guess and",
    "start": "1018920",
    "end": "1025400"
  },
  {
    "text": "that's really it but if you want to start something from scratch we just create an array of let's say six elements for",
    "start": "1025400",
    "end": "1032660"
  },
  {
    "text": "now where every single element is undefined by default then we use an hashing algorithm",
    "start": "1032660",
    "end": "1040040"
  },
  {
    "text": "we have a key and a value let's say we hash the key in our case food the",
    "start": "1040040",
    "end": "1045079"
  },
  {
    "text": "Hessian algorithm will return a number which is greater than or equal to zero",
    "start": "1045079",
    "end": "1050419"
  },
  {
    "text": "and is less than or equal to the total length of the array like",
    "start": "1050419",
    "end": "1056419"
  },
  {
    "text": "um it will tell us where to position our value inside of this array so food for",
    "start": "1056419",
    "end": "1063440"
  },
  {
    "text": "example with our hashing algorithm we'll put chocolate in position number five so in the sixth position for our element",
    "start": "1063440",
    "end": "1070820"
  },
  {
    "text": "the same for language the hashing algorithm for language will return three so we store it in the",
    "start": "1070820",
    "end": "1076640"
  },
  {
    "text": "fourth position of the array starting from zero of course and the same for book color animal CD and oops you might",
    "start": "1076640",
    "end": "1084500"
  },
  {
    "text": "be wondering okay the hashing algorithm must be very very tough to write at this point right",
    "start": "1084500",
    "end": "1089600"
  },
  {
    "text": "actually it's not it's pretty easy you can condense it in just a few Charters it's not super optimized and this is not",
    "start": "1089600",
    "end": "1095960"
  },
  {
    "text": "guaranteeing you that you will get results in o1 custom time",
    "start": "1095960",
    "end": "1101000"
  },
  {
    "text": "but you can test it like if you create an array of 10 elements and we hash food it will return two if we hash book we'll",
    "start": "1101000",
    "end": "1108140"
  },
  {
    "text": "return seven and hello Oslo will return nine so when asking for a key we know the",
    "start": "1108140",
    "end": "1115280"
  },
  {
    "text": "exact position of its value instead of an array so that means that with a good hashing algorithm the time complexity is",
    "start": "1115280",
    "end": "1121220"
  },
  {
    "text": "o1 and I I want to highlight this you need a good hashing algorithm to be in",
    "start": "1121220",
    "end": "1127220"
  },
  {
    "text": "o1 situation here uh bet hashing algorithm are causing collisions which",
    "start": "1127220",
    "end": "1132260"
  },
  {
    "text": "means that multiple case uh gives the same number as a result so you have to",
    "start": "1132260",
    "end": "1137419"
  },
  {
    "text": "create an hashback instead of a Nash map or put everything inside an array and that Loop over the array so it's not",
    "start": "1137419",
    "end": "1142760"
  },
  {
    "text": "really worth it but that's another story again let's keep things easy so that means that when we say okay but",
    "start": "1142760",
    "end": "1148820"
  },
  {
    "text": "where is City we have the array we have the Asian algorithm where is CD it would say Okay",
    "start": "1148820",
    "end": "1154039"
  },
  {
    "text": "um position number two so third position inside the array and what is food",
    "start": "1154039",
    "end": "1159679"
  },
  {
    "text": "food chocolate is in number five so five fifth index of the array in that case",
    "start": "1159679",
    "end": "1167299"
  },
  {
    "text": "but that's not enough to find chocolate inside of our Railway of elements in o1",
    "start": "1167299",
    "end": "1172880"
  },
  {
    "text": "we need get ready for the other monster we need an inverted index in fact",
    "start": "1172880",
    "end": "1181240"
  },
  {
    "text": "this is a regular Ash map so let's say we have our documents and like alive is in ID the ID for the document alive is",
    "start": "1181280",
    "end": "1189799"
  },
  {
    "text": "ID number one ID for you ask yourself Etc is ID number two so document ID you know and this",
    "start": "1189799",
    "end": "1198020"
  },
  {
    "text": "when the keys are how to say when the elements inside of",
    "start": "1198020",
    "end": "1203660"
  },
  {
    "text": "the arrays in that case are in the right succession succession that you find them",
    "start": "1203660",
    "end": "1209480"
  },
  {
    "text": "in the original phrase this called a forward index we don't need that we need our inverted index which means instead",
    "start": "1209480",
    "end": "1216980"
  },
  {
    "text": "of saying okay the key is the ID of our document we say okay the key right now",
    "start": "1216980",
    "end": "1222200"
  },
  {
    "text": "will be the token itself and the value will be an array containing reference to",
    "start": "1222200",
    "end": "1227660"
  },
  {
    "text": "all the documents containing this word so the token alive is contained in document",
    "start": "1227660",
    "end": "1234200"
  },
  {
    "text": "with the ID of 1. the word u is contained in documents",
    "start": "1234200",
    "end": "1240200"
  },
  {
    "text": "with ID 2 and 3. so two distinct documents in chocolate you can find it",
    "start": "1240200",
    "end": "1245419"
  },
  {
    "text": "only in document where the ID is free so this is how we get the full document in",
    "start": "1245419",
    "end": "1251419"
  },
  {
    "text": "constant time but there's still a problem",
    "start": "1251419",
    "end": "1257299"
  },
  {
    "text": "we want to optimize for space and we will see why and we might want to create",
    "start": "1257299",
    "end": "1262400"
  },
  {
    "text": "prefix based search so let's take this example we have",
    "start": "1262400",
    "end": "1267860"
  },
  {
    "text": "intersect Interstellar Intergalactic International intervene internal so these are all tokens with the same",
    "start": "1267860",
    "end": "1274820"
  },
  {
    "text": "prefix that point to documents and first of all we are wasting a lot of",
    "start": "1274820",
    "end": "1280640"
  },
  {
    "text": "space if you think of like indexes containing like 1 billion tokens how",
    "start": "1280640",
    "end": "1287120"
  },
  {
    "text": "many prefix repetitions do we have that's that's a real problem and if I have like a type ahead functionality in",
    "start": "1287120",
    "end": "1293840"
  },
  {
    "text": "my full texture changing let's say I just type enter for example I want to have all the following results",
    "start": "1293840",
    "end": "1300799"
  },
  {
    "text": "right because I don't have an exact match the inverted index allows us to have an exact match so if I search for",
    "start": "1300799",
    "end": "1306919"
  },
  {
    "text": "intersect that's perfect but if I search for inter there's nothing",
    "start": "1306919",
    "end": "1312620"
  },
  {
    "text": "so trees to the rescue yet another monster and get ready because trees are",
    "start": "1312620",
    "end": "1319460"
  },
  {
    "text": "an amazing source of memes so it's really important to learn trees in order",
    "start": "1319460",
    "end": "1324620"
  },
  {
    "text": "to get these memes please do that and in that case I'm of course talking",
    "start": "1324620",
    "end": "1331340"
  },
  {
    "text": "about the prefix 3. so let's see what's all about so let's say we have the following",
    "start": "1331340",
    "end": "1337820"
  },
  {
    "text": "tokens so private Primark Prime and primate it is clear that they share a",
    "start": "1337820",
    "end": "1342980"
  },
  {
    "text": "common prefix right so a prefix three let's start with something simple like a link to the list",
    "start": "1342980",
    "end": "1349880"
  },
  {
    "text": "right it's really similar at the beginning so when we have just one talk uh one word we have a root node which I",
    "start": "1349880",
    "end": "1356179"
  },
  {
    "text": "don't know if you can notice but it's in a poor choice of colors I'm super sorry but it's in Orange",
    "start": "1356179",
    "end": "1363679"
  },
  {
    "text": "then it's linked there is a pointer to the another node containing P that is",
    "start": "1363679",
    "end": "1371000"
  },
  {
    "text": "linked with a pointer to R Then I then M and finally e e is in green and when",
    "start": "1371000",
    "end": "1378380"
  },
  {
    "text": "there is green it means this is the n oops this is the end of a word",
    "start": "1378380",
    "end": "1383900"
  },
  {
    "text": "or a token as we want to call it so let's say we have Prime and we want to",
    "start": "1383900",
    "end": "1389480"
  },
  {
    "text": "insert Primark as you can see we basically create a common prefix which is p r i m and we",
    "start": "1389480",
    "end": "1396260"
  },
  {
    "text": "Branch so I am at this point one have just one pointer to One Singular single",
    "start": "1396260",
    "end": "1402140"
  },
  {
    "text": "node but to two different nodes which then proceeds in two different roads so",
    "start": "1402140",
    "end": "1408260"
  },
  {
    "text": "Prime and Primark on the left we want to insert primate that's perfect",
    "start": "1408260",
    "end": "1413900"
  },
  {
    "text": "we Branch at the a level so we now Branch here Primark goes there and",
    "start": "1413900",
    "end": "1419840"
  },
  {
    "text": "primates the other way around we want to insert private we Branch a",
    "start": "1419840",
    "end": "1425360"
  },
  {
    "text": "little bit higher at this point so PRI private on the right and all the other",
    "start": "1425360",
    "end": "1430580"
  },
  {
    "text": "branches on the left but if we want to insert something totally different with no connection to",
    "start": "1430580",
    "end": "1437120"
  },
  {
    "text": "other prefixes like art we just Branch at the root level and if we want to",
    "start": "1437120",
    "end": "1442640"
  },
  {
    "text": "insert for example R test which not only has a common prefix with art but includes the whole word",
    "start": "1442640",
    "end": "1449419"
  },
  {
    "text": "we just say okay so this is green as you can see so art T",
    "start": "1449419",
    "end": "1454640"
  },
  {
    "text": "is the end of a token but also has a pointer to I so it means that this is a",
    "start": "1454640",
    "end": "1461000"
  },
  {
    "text": "word on its own but then continues down to artist",
    "start": "1461000",
    "end": "1466779"
  },
  {
    "text": "and then we can use a prefix tree as an inverted index to store reference of a token with the document let me show you",
    "start": "1467240",
    "end": "1473780"
  },
  {
    "text": "how so let's say we have the following words and we say that like Primark is included in documents one and three",
    "start": "1473780",
    "end": "1480020"
  },
  {
    "text": "primate is included in documents two and four for example that's cool we just",
    "start": "1480020",
    "end": "1485480"
  },
  {
    "text": "store this this references at the end of every individual word",
    "start": "1485480",
    "end": "1492380"
  },
  {
    "text": "so that when we say art okay art is contained in document four three five",
    "start": "1492380",
    "end": "1498799"
  },
  {
    "text": "seven artists in document five four and seven and so on so we just migrated from",
    "start": "1498799",
    "end": "1505340"
  },
  {
    "text": "an inverted index to um uh prefix three and of course this is not as efficient as an inverted index in",
    "start": "1505340",
    "end": "1512780"
  },
  {
    "text": "fact the time complexity for this algorithm is typically o w times L where",
    "start": "1512780",
    "end": "1519500"
  },
  {
    "text": "W is the number of words and L is the average length of that word so it's not",
    "start": "1519500",
    "end": "1524720"
  },
  {
    "text": "as efficient but it's still pretty efficient and we will see some benchmarks later on later on",
    "start": "1524720",
    "end": "1531679"
  },
  {
    "text": "and of course when you're building a full-text search engine you can create multiple indexes so you don't have to",
    "start": "1531679",
    "end": "1536720"
  },
  {
    "text": "choose if I want an inverted index or a prefix tree or a direct acyclic graph",
    "start": "1536720",
    "end": "1541940"
  },
  {
    "text": "for example we can have everything maybe depending on the user prompt so if the developer wants to have multiple choice",
    "start": "1541940",
    "end": "1548480"
  },
  {
    "text": "like these search engines or engine only allows perfect search good you only keep",
    "start": "1548480",
    "end": "1554120"
  },
  {
    "text": "the prefix three it allow accessor exact match and prefix search awesome we will put inverted",
    "start": "1554120",
    "end": "1561380"
  },
  {
    "text": "income tax here and prefix tree here so no problem you can create multiple",
    "start": "1561380",
    "end": "1566840"
  },
  {
    "text": "indexes and you can use multiple different data structures such as inverted indexes forward indexes prefix",
    "start": "1566840",
    "end": "1573559"
  },
  {
    "text": "trees direct assigned class graph b3a and tree map so you have a high choice",
    "start": "1573559",
    "end": "1580039"
  },
  {
    "text": "but okay I will keep the following slide while I'm drinking a bit",
    "start": "1580039",
    "end": "1586840"
  },
  {
    "text": "thank you Linus so talk his chips show me the code yeah let's see some code but before we get",
    "start": "1588140",
    "end": "1594559"
  },
  {
    "text": "there I just want you to know that I try to implement a full text search engine with two mainstream paradigms like",
    "start": "1594559",
    "end": "1601460"
  },
  {
    "text": "object oriented programming and functional programming I'm a former Haskell programmer so you know I just",
    "start": "1601460",
    "end": "1606799"
  },
  {
    "text": "wanted to try um but I had some problems with both particles so before we get there I just",
    "start": "1606799",
    "end": "1613460"
  },
  {
    "text": "love to highlight a couple of problems that you might encounter in your JavaScript Development Career",
    "start": "1613460",
    "end": "1619940"
  },
  {
    "text": "so let's say we want a search engine with the following features it has to",
    "start": "1619940",
    "end": "1625159"
  },
  {
    "text": "work on every single JavaScript runtime it must be as small and compact as possible it must be as fast as possible",
    "start": "1625159",
    "end": "1632179"
  },
  {
    "text": "because that that's the point of having a full text search engine you know and it must be easy to serialize data",
    "start": "1632179",
    "end": "1640100"
  },
  {
    "text": "so that means like I can save data in memory on the disk whatever",
    "start": "1640100",
    "end": "1645380"
  },
  {
    "text": "so just for giving you an example about the first point these are some of the popular JavaScript runtimes",
    "start": "1645380",
    "end": "1652100"
  },
  {
    "start": "1647000",
    "end": "1793000"
  },
  {
    "text": "we have like Edge Computing on cloudflare workers and netlify functions or Lambda at Edge for AWS we have",
    "start": "1652100",
    "end": "1660140"
  },
  {
    "text": "node.js Dino and ban which are not very compatible except for Dino which is",
    "start": "1660140",
    "end": "1665299"
  },
  {
    "text": "maintaining compatibility with node we have react native we have browsers so as you can see the JavaScript ecosystem",
    "start": "1665299",
    "end": "1672080"
  },
  {
    "text": "when I say that JavaScript is a universal language that's why it runs literally everywhere",
    "start": "1672080",
    "end": "1678799"
  },
  {
    "text": "but if you write a search engine which is specific to browsers you might want",
    "start": "1678799",
    "end": "1684620"
  },
  {
    "text": "to use browsers API right which are not available on node and you cannot write",
    "start": "1684620",
    "end": "1690799"
  },
  {
    "text": "server-side code inside of your JavaScript bundle which means like if I have a call to the file system just",
    "start": "1690799",
    "end": "1698000"
  },
  {
    "text": "to retrieve some data store some data on the file system is going to crash on the browsers and the same is for servers so I don't",
    "start": "1698000",
    "end": "1705620"
  },
  {
    "text": "have browsers and runtime specific dependencies on servers like Dino dot file save I think it's like that it's",
    "start": "1705620",
    "end": "1712400"
  },
  {
    "text": "not working on browsers it's not working on ban it's not working on node it's not working anywhere it's working only on",
    "start": "1712400",
    "end": "1717679"
  },
  {
    "text": "Dino the same for node.js file system of course and when it comes to Edge functions if",
    "start": "1717679",
    "end": "1724940"
  },
  {
    "text": "you think of cloudflare workers for example it has a limit of one megabyte for your script so it must be small",
    "start": "1724940",
    "end": "1731000"
  },
  {
    "text": "really small tree shakeable if possible so that if you deploy something you don't have like any memory structure",
    "start": "1731000",
    "end": "1736760"
  },
  {
    "text": "that gets updated but you only want to perform search on a pre-made data structures we will see later what",
    "start": "1736760",
    "end": "1743480"
  },
  {
    "text": "that means and of course with react native for example you don't have browser runtime",
    "start": "1743480",
    "end": "1748640"
  },
  {
    "text": "specific dependencies and all of these give me some big trouble when it comes",
    "start": "1748640",
    "end": "1753860"
  },
  {
    "text": "to object-oriented programming for example first of all with object-oriented programming the problem I had with that",
    "start": "1753860",
    "end": "1760580"
  },
  {
    "text": "specific situation I want to be clear with that specific situation is that the state was of",
    "start": "1760580",
    "end": "1766220"
  },
  {
    "text": "course hidden and it was very very complex for me to create um plugin system to allow runtime",
    "start": "1766220",
    "end": "1773120"
  },
  {
    "text": "specific features and it was not tree shakable I know with JavaScript we have prototypical inheritance we can work",
    "start": "1773120",
    "end": "1778760"
  },
  {
    "text": "around this but it's getting more and more complex so if I have like a class with an insert made method for example I",
    "start": "1778760",
    "end": "1785120"
  },
  {
    "text": "have to bring that insert method or delete method or whatever uh on the edge even if I don't want it",
    "start": "1785120",
    "end": "1791539"
  },
  {
    "text": "for example which is not good I also had problems with the FP approach",
    "start": "1791539",
    "end": "1796580"
  },
  {
    "start": "1793000",
    "end": "2007000"
  },
  {
    "text": "so mainly performance is a memory footprint and that's because when compared to imperative approach FP in",
    "start": "1796580",
    "end": "1803179"
  },
  {
    "text": "JavaScript tends to be a bit slower so I know on paper functional programming should be faster we all know that",
    "start": "1803179",
    "end": "1809840"
  },
  {
    "text": "practically that's not very true and about memory footprint functional programming is advocating for immutable",
    "start": "1809840",
    "end": "1817039"
  },
  {
    "text": "data structures which has a larger memory footprint so I'd like you to know",
    "start": "1817039",
    "end": "1824299"
  },
  {
    "text": "um that whenever you work in JavaScript imperative programming most of the times",
    "start": "1824299",
    "end": "1830899"
  },
  {
    "text": "will be the faster fastest alternative you have always no matter what there are",
    "start": "1830899",
    "end": "1836179"
  },
  {
    "text": "some very talented Engineers can that can work around that but this is the norm for people like me",
    "start": "1836179",
    "end": "1842600"
  },
  {
    "text": "that is not so talented you know so interative programming in JavaScript is winning when it comes to performances almost at least for me",
    "start": "1842600",
    "end": "1849919"
  },
  {
    "text": "so yeah let's see some code I don't expect you to like read every single line let me just",
    "start": "1849919",
    "end": "1856460"
  },
  {
    "text": "make you feel what it's written here like let's",
    "start": "1856460",
    "end": "1861500"
  },
  {
    "text": "say a node in our prefix 3 has an ID which is a unique identifier for that",
    "start": "1861500",
    "end": "1867020"
  },
  {
    "text": "node a key which is typically the individual Charter in our world for example if we",
    "start": "1867020",
    "end": "1873380"
  },
  {
    "text": "have the word node and is a key o is another key D and E are two separate",
    "start": "1873380",
    "end": "1879380"
  },
  {
    "text": "keys for separate nodes then we have the entire word stored as a reference",
    "start": "1879380",
    "end": "1885200"
  },
  {
    "text": "pointer to the parent node pointer to parent children and an array of documents so these",
    "start": "1885200",
    "end": "1893179"
  },
  {
    "text": "documents are the document IDs basically so this is where the inverted index comes in",
    "start": "1893179",
    "end": "1898520"
  },
  {
    "text": "and is a Boolean which says this is the end of a token yes or no that's really it",
    "start": "1898520",
    "end": "1903740"
  },
  {
    "text": "and when we go implemented it when we have like the create function as you can see we are not really creating an entire",
    "start": "1903740",
    "end": "1911659"
  },
  {
    "text": "block immediately we just mutate the block after so we create an empty block",
    "start": "1911659",
    "end": "1916700"
  },
  {
    "text": "and then add data so this is where the imperative approach really helps in JavaScript with objects and arrays you",
    "start": "1916700",
    "end": "1924500"
  },
  {
    "text": "can always modify them without having to copy them so we always have a reference to the objects you can just modify it",
    "start": "1924500",
    "end": "1930440"
  },
  {
    "text": "and when it comes to prefix trees you have to know that in JavaScript when it",
    "start": "1930440",
    "end": "1935539"
  },
  {
    "text": "comes to modifying an object shape that's a very expensive operation but with um",
    "start": "1935539",
    "end": "1940899"
  },
  {
    "text": "with the prefix tree we have 26 letters in the alphabet so we have a maximum",
    "start": "1940899",
    "end": "1945919"
  },
  {
    "text": "number of 26 nodes down a single token so we know that we won't go that far so",
    "start": "1945919",
    "end": "1951740"
  },
  {
    "text": "we are not modifying modifying a shape that much um we can then like for example update",
    "start": "1951740",
    "end": "1957919"
  },
  {
    "text": "parent just as an example you can see we take a node as a as a parameter an apparent node so we can update it and we",
    "start": "1957919",
    "end": "1965120"
  },
  {
    "text": "just mutate them we don't copy anything we just go mutate stuff which as a",
    "start": "1965120",
    "end": "1970220"
  },
  {
    "text": "former functional programming I'm pretty scared to say but this works very very",
    "start": "1970220",
    "end": "1975679"
  },
  {
    "text": "fast when we have our tree eventually we have",
    "start": "1975679",
    "end": "1980779"
  },
  {
    "text": "like to insert stuff and we basically Traverse the tree if we can't find the node we create like we have I don't know",
    "start": "1980779",
    "end": "1988220"
  },
  {
    "text": "artist we have art if after the T we can't find the letter I we just created and",
    "start": "1988220",
    "end": "1994820"
  },
  {
    "text": "Traverse the tree again and when we go find all the currencies you will notice I'm not explaining this",
    "start": "1994820",
    "end": "2001659"
  },
  {
    "text": "algorithm it's a simple traversal algorithm but you will notice that a certain point we will see tolerance",
    "start": "2001659",
    "end": "2009039"
  },
  {
    "start": "2007000",
    "end": "2507000"
  },
  {
    "text": "what the hell is tolerance why is that so as a Italian speaker when it comes to",
    "start": "2009039",
    "end": "2016179"
  },
  {
    "text": "writing English I've write a lot of bad things I'm I'm very bad at writing English you know so",
    "start": "2016179",
    "end": "2022480"
  },
  {
    "text": "for example I want to find word but I misspell it but still I want to be able",
    "start": "2022480",
    "end": "2028179"
  },
  {
    "text": "to get all the currencies of the world world inside of our index",
    "start": "2028179",
    "end": "2034299"
  },
  {
    "text": "are you getting scared enough because this solution requires dynamic programming and I wanted to put that",
    "start": "2034299",
    "end": "2042340"
  },
  {
    "text": "slide because I thought that dynamic programming was rocket science it is not actually",
    "start": "2042340",
    "end": "2049179"
  },
  {
    "text": "dynamic programming by its definition is an algorithmic technique for solving an optimization Problem by breaking it down",
    "start": "2049179",
    "end": "2055480"
  },
  {
    "text": "into simple sub problems and utilizing the fact that the optimal solution to the overall problem depends on the",
    "start": "2055480",
    "end": "2061898"
  },
  {
    "text": "optimal solution of its sub problems I understood nothing gonna be super honest so I'm gonna explain you that using the",
    "start": "2061899",
    "end": "2069580"
  },
  {
    "text": "levy stand distance algorithm and here Kermit it's going crazy but don't worry it's",
    "start": "2069580",
    "end": "2075220"
  },
  {
    "text": "I can't say it's easy but I can say that I can try explain it so the Livingston algorithm calculates",
    "start": "2075220",
    "end": "2081820"
  },
  {
    "text": "the last number of edits operations that are necessarily to modify one string to obtain another string",
    "start": "2081820",
    "end": "2088060"
  },
  {
    "text": "it is used it is used in spell checker correction systems and search engines if",
    "start": "2088060",
    "end": "2094000"
  },
  {
    "text": "you use elasticsearch for example they are using lavistan algorithm and also I guess algolia it's closer so",
    "start": "2094000",
    "end": "2100839"
  },
  {
    "text": "I don't know for sure but I guess so um if we pass like Moon and lions",
    "start": "2100839",
    "end": "2108220"
  },
  {
    "text": "as parameters to a leverage then function we want to get 3 as a result why is that let me show you first of all",
    "start": "2108220",
    "end": "2115839"
  },
  {
    "text": "we need to know that we have three allowed operations insertion deletion and replacement",
    "start": "2115839",
    "end": "2121540"
  },
  {
    "text": "so we start we want to transform Lions sorry Moon into Lions okay",
    "start": "2121540",
    "end": "2127300"
  },
  {
    "text": "so we look at the first letter letter M we have to replace M with l",
    "start": "2127300",
    "end": "2134800"
  },
  {
    "text": "then we go in next letter O we have to replace o with I",
    "start": "2134800",
    "end": "2141160"
  },
  {
    "text": "o and n can remain the same but we need to insert a new letter which is s",
    "start": "2141160",
    "end": "2147220"
  },
  {
    "text": "so starting from Moon we have lions in three steps I um this example has been taken from a",
    "start": "2147220",
    "end": "2154720"
  },
  {
    "text": "YouTube video that I'm gonna quote at the end of the talk because it is brilliant and I'm gonna give you the reference if you want to re-watch this",
    "start": "2154720",
    "end": "2161619"
  },
  {
    "text": "from someone that is better than me at explaining this I want to be honest so",
    "start": "2161619",
    "end": "2167260"
  },
  {
    "text": "we just use our intuition but how do we actually compute that right so we have to introduce the dynamic",
    "start": "2167260",
    "end": "2174400"
  },
  {
    "text": "programming table where each cell in that table is a sub problem and again the optimal solution is the total",
    "start": "2174400",
    "end": "2180820"
  },
  {
    "text": "solution of this sub problem Etc I can't even remember but let's make it simple we have Capital Lambda which means empty",
    "start": "2180820",
    "end": "2188440"
  },
  {
    "text": "string for starting then Lions on the x axis and Moon",
    "start": "2188440",
    "end": "2194800"
  },
  {
    "text": "so let's make an example if I have to create sorry if I have to",
    "start": "2194800",
    "end": "2200980"
  },
  {
    "text": "transform Mo to l what is the edit distance someone wants to guess",
    "start": "2200980",
    "end": "2207900"
  },
  {
    "text": "from Mo to l who said",
    "start": "2208240",
    "end": "2213339"
  },
  {
    "text": "to you're correct so it's two we just replace what was that okay we just",
    "start": "2213339",
    "end": "2220599"
  },
  {
    "text": "replace M with L then we remove o so two operations that's correct let's try",
    "start": "2220599",
    "end": "2226240"
  },
  {
    "text": "another one m o o two o super hard to to tell but what is the",
    "start": "2226240",
    "end": "2233440"
  },
  {
    "text": "edit distance in that case it's two again that's that's correct",
    "start": "2233440",
    "end": "2238660"
  },
  {
    "text": "that was a trick but as you can see we basically start like here m-o-o to this letter here",
    "start": "2238660",
    "end": "2248980"
  },
  {
    "text": "so from an empty string to an empty string it's the same so nothing",
    "start": "2248980",
    "end": "2255520"
  },
  {
    "text": "from an empty string to L we insert so insertion has a cost of one every single",
    "start": "2255520",
    "end": "2261820"
  },
  {
    "text": "Lane operation has a cost the cost is one in the case because we insert just one thing",
    "start": "2261820",
    "end": "2267520"
  },
  {
    "text": "from empty string to l i to insertions so the cost is two then three then four",
    "start": "2267520",
    "end": "2274180"
  },
  {
    "text": "then five pretty easy when we go from top to bottom the",
    "start": "2274180",
    "end": "2280119"
  },
  {
    "text": "situation it's a bit different we start from M and we want to get an empty",
    "start": "2280119",
    "end": "2285460"
  },
  {
    "text": "string so we remove so remove operations has a cost of one so we remove one one is the cost",
    "start": "2285460",
    "end": "2292960"
  },
  {
    "text": "Mo causes two m o o cost is three and of",
    "start": "2292960",
    "end": "2298060"
  },
  {
    "text": "course moon to empty string cost is four then we get in that situation",
    "start": "2298060",
    "end": "2305020"
  },
  {
    "text": "how do we do that well I'm about to say thankfully but I'm not",
    "start": "2305020",
    "end": "2310180"
  },
  {
    "text": "thankful for the formula because it's it's messy I I I don't have a degree I",
    "start": "2310180",
    "end": "2315460"
  },
  {
    "text": "have no idea okay I started a bit for this talk but it basically says that the minimum edit distance is defined as the",
    "start": "2315460",
    "end": "2321700"
  },
  {
    "text": "minimum of three operations the lead insertion and replacement minimum is a key word here",
    "start": "2321700",
    "end": "2328420"
  },
  {
    "text": "so let's try we said that we could go from up to",
    "start": "2328420",
    "end": "2334240"
  },
  {
    "text": "bottom so we have to remove one so remove has a cost of one plus the fact that we have",
    "start": "2334240",
    "end": "2340960"
  },
  {
    "text": "one here so the total cost is two okay that's what this formula says hopefully",
    "start": "2340960",
    "end": "2348460"
  },
  {
    "text": "if we move from left to right we have to insert so insertion has a cost of one we have",
    "start": "2348460",
    "end": "2355540"
  },
  {
    "text": "one on the left so the total cost is two again then we have replacement",
    "start": "2355540",
    "end": "2363280"
  },
  {
    "text": "so replacement in our formula is defined as a distance between two Charter if the",
    "start": "2363280",
    "end": "2369400"
  },
  {
    "text": "charters M and L so m in that case is 1 L is one",
    "start": "2369400",
    "end": "2376240"
  },
  {
    "text": "if they are the same which is our case the cost is zero otherwise",
    "start": "2376240",
    "end": "2382359"
  },
  {
    "text": "we have to subtract one to another that case is zero replace operation has a",
    "start": "2382359",
    "end": "2388000"
  },
  {
    "text": "cost of one so we said that the minimum distance is the less costly one in the case is the replacement",
    "start": "2388000",
    "end": "2394420"
  },
  {
    "text": "so we do replace in that situation this is a bit different because the difference between",
    "start": "2394420",
    "end": "2401440"
  },
  {
    "text": "I which is 2 let me show you again so I in that case is 2 m is 1.",
    "start": "2401440",
    "end": "2409420"
  },
  {
    "text": "so we have to subtract one to two from two so one the replacement costs one",
    "start": "2409420",
    "end": "2416740"
  },
  {
    "text": "plus the difference so two total cost and as you can see we have the deletion which causes three because",
    "start": "2416740",
    "end": "2424240"
  },
  {
    "text": "we start from Two and we add one um the insertion costs two and the replacement costs two again in that case",
    "start": "2424240",
    "end": "2431560"
  },
  {
    "text": "we choose whatever I will keep both just for the sake of but we can choose because they are the same",
    "start": "2431560",
    "end": "2438579"
  },
  {
    "text": "we continue we continue again until we get in that situation and don't worry I'll make it easy we",
    "start": "2438579",
    "end": "2444880"
  },
  {
    "text": "basically steal this part of the formula which very very shallowy says okay just",
    "start": "2444880",
    "end": "2451180"
  },
  {
    "text": "bring it from the upper left corner so we basically take this and when we complete our table we end up",
    "start": "2451180",
    "end": "2459040"
  },
  {
    "text": "with that value in the bottom right corner which is three and yes this is the added distance",
    "start": "2459040",
    "end": "2465220"
  },
  {
    "text": "between lions and moon so we replace M with l here",
    "start": "2465220",
    "end": "2471520"
  },
  {
    "text": "which is the first cost then we replace o with um what is that with I",
    "start": "2471520",
    "end": "2479520"
  },
  {
    "text": "um then second o and n can remain and then we insert the S so as you can see",
    "start": "2479859",
    "end": "2485079"
  },
  {
    "text": "um what we saw in this slide we actually have implemented using the programming done I mean dynamic programming table",
    "start": "2485079",
    "end": "2493660"
  },
  {
    "text": "we can actually do that with every single word horse and poser at the",
    "start": "2493660",
    "end": "2499119"
  },
  {
    "text": "distance of 3 raise and raise which is very typical for non-english speaker like me you know raise raise it's rise I",
    "start": "2499119",
    "end": "2508900"
  },
  {
    "text": "don't know they're all rise you know they are really similar to me so I might misspell them while I'm typing",
    "start": "2508900",
    "end": "2516220"
  },
  {
    "text": "and again the levistine algorithm it's quite complex if you ask me to be explained but it's really easy to",
    "start": "2516220",
    "end": "2522880"
  },
  {
    "text": "implement actually so as you can see it's just a bunch of and this is a pretty optimized one okay just a bunch",
    "start": "2522880",
    "end": "2528820"
  },
  {
    "text": "of Charters and not explaining that but I will leave the slides if you're interested and I'll be",
    "start": "2528820",
    "end": "2534820"
  },
  {
    "text": "around later on to explain that so one nice thing is that we can perform",
    "start": "2534820",
    "end": "2540160"
  },
  {
    "start": "2537000",
    "end": "2585000"
  },
  {
    "text": "the edit distance on both strings and trees I'm not going to go through this but I'm quoting again the YouTube video",
    "start": "2540160",
    "end": "2547000"
  },
  {
    "text": "where I took inspiration from uh for this specific explanation this YouTube video is called three edit distance and",
    "start": "2547000",
    "end": "2553599"
  },
  {
    "text": "leverage the distance and it's brilliant if you're interested in porting that reasoning from uh strings to trees this",
    "start": "2553599",
    "end": "2562000"
  },
  {
    "text": "is a beautiful video to start with and if you are more into reading like I am there is a beautiful paper called Simple",
    "start": "2562000",
    "end": "2568660"
  },
  {
    "text": "fast algorithm for the edit distance between trees replay and related problems from Zang and Sasha and again",
    "start": "2568660",
    "end": "2576040"
  },
  {
    "text": "simple fast no it's not simple don't even try",
    "start": "2576040",
    "end": "2581920"
  },
  {
    "text": "we are going through the end of the talk and we have a tokenizer a prefix tree we",
    "start": "2581920",
    "end": "2587980"
  },
  {
    "start": "2585000",
    "end": "2610000"
  },
  {
    "text": "have typo tolerance we also have an inverted index we can finally create a",
    "start": "2587980",
    "end": "2593440"
  },
  {
    "text": "full text search engine and that's what I did so I want to present Lira so Lee",
    "start": "2593440",
    "end": "2598540"
  },
  {
    "text": "writes actually an open source project that you can use today which is full",
    "start": "2598540",
    "end": "2603640"
  },
  {
    "text": "text search engine capable of running literally everywhere so let me show you how it works",
    "start": "2603640",
    "end": "2610359"
  },
  {
    "start": "2610000",
    "end": "2642000"
  },
  {
    "text": "you basically it's tree shakeable as I said so you can create a new instance just by importing stuff you create a",
    "start": "2610359",
    "end": "2617800"
  },
  {
    "text": "schema and when you create like author field or quote field this is where you're gonna insert",
    "start": "2617800",
    "end": "2624280"
  },
  {
    "text": "um like author is a prefix tree or an inverted index code is another inverted",
    "start": "2624280",
    "end": "2629319"
  },
  {
    "text": "index or another prefix tree you then insert or use the insert batch operation to not to block the event Loop",
    "start": "2629319",
    "end": "2636579"
  },
  {
    "text": "of course and just insert stuff of course this must be following the schema",
    "start": "2636579",
    "end": "2642339"
  },
  {
    "start": "2642000",
    "end": "2681000"
  },
  {
    "text": "then you just search so you like search for if with a wild card when it comes to",
    "start": "2642339",
    "end": "2648220"
  },
  {
    "text": "searching properties so that you can also specify an array of properties like search just in code search just in",
    "start": "2648220",
    "end": "2655359"
  },
  {
    "text": "author or in both you choose and we have an elapsed time so a total count of",
    "start": "2655359",
    "end": "2660579"
  },
  {
    "text": "element and it elapsed time can you guess is",
    "start": "2660579",
    "end": "2666520"
  },
  {
    "text": "this seconds microseconds what is that milliseconds",
    "start": "2666520",
    "end": "2671680"
  },
  {
    "text": "this is microseconds you might say okay but you have just four documents it's",
    "start": "2671680",
    "end": "2678160"
  },
  {
    "text": "clear that it's microseconds yes but I made some benchmarks so I took one million movies from the International",
    "start": "2678160",
    "end": "2684339"
  },
  {
    "text": "Movie Database injected everything description cast titles whatever",
    "start": "2684339",
    "end": "2690160"
  },
  {
    "text": "and I started searching for believe for example and I retrieved a lot of documents like",
    "start": "2690160",
    "end": "2696520"
  },
  {
    "text": "should be 1 200 documents I'm sorry I didn't put that by the way in 41",
    "start": "2696520",
    "end": "2704260"
  },
  {
    "text": "microseconds if you search just into the title index 39 microseconds so we are in the",
    "start": "2704260",
    "end": "2711819"
  },
  {
    "start": "2706000",
    "end": "2748000"
  },
  {
    "text": "millionth or a second area here and I didn't do anything special I just followed the algorithms and the data",
    "start": "2711819",
    "end": "2718599"
  },
  {
    "text": "structures Criminal Minds which is composed of two different words of course you have to",
    "start": "2718599",
    "end": "2725020"
  },
  {
    "text": "perform search on criminal you have to perform search on mines you have to look if they appear one after another in the",
    "start": "2725020",
    "end": "2732220"
  },
  {
    "text": "original array so sorry and the original documents so here where you want to use forward indexes for example and in one",
    "start": "2732220",
    "end": "2739480"
  },
  {
    "text": "million of entries you can do that in 187 micro seconds again micro millions",
    "start": "2739480",
    "end": "2746859"
  },
  {
    "text": "of seconds and Lira right now supports 23 languages",
    "start": "2746859",
    "end": "2752500"
  },
  {
    "text": "and you can again it's three shakable so a stemming algorithm it's really heavy because it's it's not an easy algorithm",
    "start": "2752500",
    "end": "2758500"
  },
  {
    "text": "uh so you can import just this timer that it's important to you in that case the Italian one or you can create your own stammer so if",
    "start": "2758500",
    "end": "2765880"
  },
  {
    "text": "you want to play around with stemming algorithm just download Lira and write your own stemming algorithm in that case",
    "start": "2765880",
    "end": "2771460"
  },
  {
    "text": "it's just append ish to every single token ish you know",
    "start": "2771460",
    "end": "2776560"
  },
  {
    "text": "um you can also import custom stop words very easily you can concatenate with existing one depending on the language",
    "start": "2776560",
    "end": "2782079"
  },
  {
    "text": "on which by default is English of course or you can delete them do whatever you want",
    "start": "2782079",
    "end": "2787420"
  },
  {
    "text": "and again at the beginning of this talk we had some goals we wanted our project",
    "start": "2787420",
    "end": "2792460"
  },
  {
    "text": "to work on every single JavaScript runtime to be as small as possible as fast as possible and easy to serialize",
    "start": "2792460",
    "end": "2799480"
  },
  {
    "text": "data we did that and we also added a powerful plugin system",
    "start": "2799480",
    "end": "2805240"
  },
  {
    "start": "2801000",
    "end": "2852000"
  },
  {
    "text": "so if you use for example the Lira search plugin data persistent plugin which is runtime specific because",
    "start": "2805240",
    "end": "2812319"
  },
  {
    "text": "assessing the file system for example is different in node in Dino in band or",
    "start": "2812319",
    "end": "2817359"
  },
  {
    "text": "other runtime in ground VM if there's anyone using this you know but you create your instance you feed",
    "start": "2817359",
    "end": "2824260"
  },
  {
    "text": "the data and eventually you just persist the data on disk you can choose your format by",
    "start": "2824260",
    "end": "2831819"
  },
  {
    "text": "default this message pack which is also format used by radius or you can use Deepak Json you can Implement protocol",
    "start": "2831819",
    "end": "2837819"
  },
  {
    "text": "buffers that just works afterwards you can just import that data",
    "start": "2837819",
    "end": "2843880"
  },
  {
    "text": "so you use the restore from file or restore from memory if you want to run that on a browser and",
    "start": "2843880",
    "end": "2850599"
  },
  {
    "text": "you're good to start searching again or you can deploy a distributed scalable search engine you create a new layer",
    "start": "2850599",
    "end": "2856960"
  },
  {
    "text": "instance feed the data export the indexes persisting them on S3 and just",
    "start": "2856960",
    "end": "2862000"
  },
  {
    "text": "call a Lambda function you call a Lambda function you download the data you perform search and that's it",
    "start": "2862000",
    "end": "2867540"
  },
  {
    "text": "and of course um you don't terminate the functions so the",
    "start": "2867540",
    "end": "2872619"
  },
  {
    "text": "data remains in memory and that's that's really it you can use the same apis on react",
    "start": "2872619",
    "end": "2878380"
  },
  {
    "start": "2875000",
    "end": "2891000"
  },
  {
    "text": "native or browser for example allowing offline search so you create a lira instance fit the data export the index",
    "start": "2878380",
    "end": "2885040"
  },
  {
    "text": "in memory on your browser and use the memory index on react native or browsers",
    "start": "2885040",
    "end": "2890859"
  },
  {
    "text": "or you deploy for the very first time ever a full text search engine on an",
    "start": "2890859",
    "end": "2896140"
  },
  {
    "start": "2891000",
    "end": "2924000"
  },
  {
    "text": "edge network using nebula so Lira it's named after the Lira constellation because of its distributed nature and",
    "start": "2896140",
    "end": "2903700"
  },
  {
    "text": "enable us are you know where Stars Are Born I guess so this is why we named",
    "start": "2903700",
    "end": "2909040"
  },
  {
    "text": "that nebula and I have a little demo let me show you oh yeah I'm not doing that live I want",
    "start": "2909040",
    "end": "2916900"
  },
  {
    "text": "to be honest but yeah so we basically have a pokedex we just installed nebula",
    "start": "2916900",
    "end": "2924339"
  },
  {
    "start": "2924000",
    "end": "2937000"
  },
  {
    "text": "okay we have it so you see we have two documents data.json which is an array of",
    "start": "2924339",
    "end": "2929440"
  },
  {
    "text": "Pokemon Pokemon and luira.yaml which is a configuration file for lira",
    "start": "2929440",
    "end": "2936339"
  },
  {
    "text": "let's see if we cut lira.yaml we'll see a schema definition",
    "start": "2936339",
    "end": "2941920"
  },
  {
    "start": "2937000",
    "end": "2992000"
  },
  {
    "text": "sharding for example automatic sharding so we automatically split the index size because again on cloudflare for example",
    "start": "2941920",
    "end": "2948460"
  },
  {
    "text": "you have a limit you can only have one megabyte of data in memory so we take care of that we deploy multiple workers",
    "start": "2948460",
    "end": "2956680"
  },
  {
    "text": "um the data type so in that case Json but you can also use a Javascript file exporting an asynchronous function to",
    "start": "2956680",
    "end": "2963160"
  },
  {
    "text": "call a database to collect info from a user whatever you can literally use whatever you want and then a Target in",
    "start": "2963160",
    "end": "2969640"
  },
  {
    "text": "that case only cloudflare is supported we will support netlify and AWS Lambda at Edge later on",
    "start": "2969640",
    "end": "2975700"
  },
  {
    "text": "and the worker name which is Pokedex again and if we want to run tests on the data before deploying it",
    "start": "2975700",
    "end": "2983680"
  },
  {
    "text": "so let's cut some data so this is the data format as you can see it follows the schema definition",
    "start": "2983680",
    "end": "2991420"
  },
  {
    "text": "and just run hopefully lira sorry nebula",
    "start": "2991420",
    "end": "2997359"
  },
  {
    "start": "2992000",
    "end": "3016000"
  },
  {
    "text": "deploy so nebula D and in five seconds you deployed it to cloudflare workers",
    "start": "2997359",
    "end": "3004200"
  },
  {
    "text": "and you just use your url to query the database in five seconds",
    "start": "3004200",
    "end": "3009480"
  },
  {
    "text": "you deployed the First full text search engine capable of running at the edge",
    "start": "3009480",
    "end": "3015180"
  },
  {
    "text": "so forget about cluster management because Edge networks are automatically managed",
    "start": "3015180",
    "end": "3021420"
  },
  {
    "start": "3016000",
    "end": "3027000"
  },
  {
    "text": "by service provider deployment data consistency we take care of that with lyrics super easy for us and of course",
    "start": "3021420",
    "end": "3027900"
  },
  {
    "text": "it's free and open so I'm not sending anything that's just a project please open issues please contribute if you",
    "start": "3027900",
    "end": "3033060"
  },
  {
    "text": "want if you're interested in learning more about how search engines works I am here and I will be also on GitHub if you",
    "start": "3033060",
    "end": "3040200"
  },
  {
    "text": "want to follow so that was all for me thank you so much for following",
    "start": "3040200",
    "end": "3046819"
  },
  {
    "text": "I leave my contacts I mostly live on Twitter so if you want to reach out I'll be glad to answer any of your questions",
    "start": "3046819",
    "end": "3052500"
  },
  {
    "text": "I guess we have like five minutes for answer for questions I'd be glad to answer if there's any thank you again",
    "start": "3052500",
    "end": "3060180"
  },
  {
    "text": "[Applause]",
    "start": "3060180",
    "end": "3068940"
  },
  {
    "text": "okay",
    "start": "3074400",
    "end": "3077058"
  },
  {
    "text": "yeah okay I will repeat that so I know that I understood that everyone can hear",
    "start": "3087059",
    "end": "3093240"
  },
  {
    "text": "so you mean during the stemming phase how we deal with for example in German",
    "start": "3093240",
    "end": "3098640"
  },
  {
    "text": "when words are composed right yes that's a good question I had a similar question for a couple of Italian",
    "start": "3098640",
    "end": "3104700"
  },
  {
    "text": "words and the stemming algorithm takes care of that when I say that Martin",
    "start": "3104700",
    "end": "3109740"
  },
  {
    "text": "Porter did an awesome job with a snowball I mean that he literally found",
    "start": "3109740",
    "end": "3115680"
  },
  {
    "text": "a way to deal with that kind of possible inconsistencies so if you followed the step-by-step algorithm in German which",
    "start": "3115680",
    "end": "3122520"
  },
  {
    "text": "is very very complex for that reason specifically you shouldn't have any problem anyway you can always extend",
    "start": "3122520",
    "end": "3130440"
  },
  {
    "text": "your own stemming algorithm to deal with very specific words so if you care about a dictionary of words you can say okay",
    "start": "3130440",
    "end": "3137460"
  },
  {
    "text": "when I see that word I will treat it differently so it is Common from time to time to use",
    "start": "3137460",
    "end": "3143700"
  },
  {
    "text": "dictionaries so that you say okay I see this word I will treat this differently",
    "start": "3143700",
    "end": "3149220"
  },
  {
    "text": "Etc and also when it comes sorry you give me an assist when it comes to edit distance",
    "start": "3149220",
    "end": "3154619"
  },
  {
    "text": "for example you also want to use dictionaries so that for example if you have I don't know word but there's no",
    "start": "3154619",
    "end": "3161400"
  },
  {
    "text": "document containing the word the token word you have addiction an English dictionary and you say okay maybe you",
    "start": "3161400",
    "end": "3167400"
  },
  {
    "text": "are looking for that so dictionaries are an important part of any search engine I forgot to mention so",
    "start": "3167400",
    "end": "3173520"
  },
  {
    "text": "thank you for your question",
    "start": "3173520",
    "end": "3176359"
  },
  {
    "text": "I can't see anything it's incredible",
    "start": "3178980",
    "end": "3182838"
  },
  {
    "text": "okay I guess that's all thank you again so enjoy the rest of the conference",
    "start": "3186000",
    "end": "3191300"
  }
]