[
  {
    "text": "thank you for coming to my talk and today we're going to talk about Linux kernel keystore and",
    "start": "1199",
    "end": "8280"
  },
  {
    "text": "why you should use it in your next application first a big round of thank you I know",
    "start": "8280",
    "end": "14580"
  },
  {
    "text": "it's been a hard day and you all wanna you're all tired but you still find the strengths to find to come to my",
    "start": "14580",
    "end": "20820"
  },
  {
    "text": "presentation and we'll have some bash code and interesting stuff and in the",
    "start": "20820",
    "end": "25980"
  },
  {
    "text": "presentation today so hope hope you will enjoy it yeah before we begin actually how many",
    "start": "25980",
    "end": "33420"
  },
  {
    "text": "of you actually know that the Linux has a key store some people",
    "start": "33420",
    "end": "40340"
  },
  {
    "text": "some people nice okay uh so a little bit about myself my",
    "start": "40340",
    "end": "46500"
  },
  {
    "text": "name is signal I do Linux at Cloud for I'm passionate about system security and",
    "start": "46500",
    "end": "52200"
  },
  {
    "text": "performance and I enjoy low level programming Linux kernel bootloaders iot devices uh",
    "start": "52200",
    "end": "59820"
  },
  {
    "text": "drivers and other low levels scary see stuff since recently I'm actually a fugitive",
    "start": "59820",
    "end": "65760"
  },
  {
    "text": "programmer because usnsa band corporations developing in CNC plus plus",
    "start": "65760",
    "end": "71400"
  },
  {
    "text": "and that's the only thing I do uh so yeah um",
    "start": "71400",
    "end": "76920"
  },
  {
    "text": "so let's get to why it happened why NSA banned me and why do we need to think",
    "start": "76920",
    "end": "83159"
  },
  {
    "text": "about application keys and memory so it's not a joke actually and I say put a",
    "start": "83159",
    "end": "88320"
  },
  {
    "text": "recommendation out there recently that it um kind of like encourages",
    "start": "88320",
    "end": "94259"
  },
  {
    "text": "to develop software in memory safe languages and this is because of a study they made that 70 of all the",
    "start": "94259",
    "end": "101340"
  },
  {
    "text": "vulnerabilities in software for big corporations like Google and Microsoft came from memory various memory access",
    "start": "101340",
    "end": "108000"
  },
  {
    "text": "violations right so let's see how it plays out for application keys or or",
    "start": "108000",
    "end": "113040"
  },
  {
    "text": "cryptographic material or Secrets or whatever to understand this we need to review the",
    "start": "113040",
    "end": "119759"
  },
  {
    "text": "concept of the operating system address space who here",
    "start": "119759",
    "end": "124799"
  },
  {
    "text": "doesn't know what an operating system address or process address space is",
    "start": "124799",
    "end": "130020"
  },
  {
    "text": "cool so it will be quite fast right so we have many processes in our operating",
    "start": "130020",
    "end": "136260"
  },
  {
    "text": "systems because we run a multi-process operating system and each process has an address space so a dedicated chunk of",
    "start": "136260",
    "end": "141840"
  },
  {
    "text": "memory where everything is related to the processes store but what it is exactly stored in the",
    "start": "141840",
    "end": "148920"
  },
  {
    "text": "process address space so first it's main logic right so your business logic your",
    "start": "148920",
    "end": "154680"
  },
  {
    "text": "application logic it resides in the process address space if your code uses some kind of shared",
    "start": "154680",
    "end": "161040"
  },
  {
    "text": "libraries it there are also reside in your process address space",
    "start": "161040",
    "end": "166379"
  },
  {
    "text": "then you have the data for your program so it can be intermediary computations",
    "start": "166379",
    "end": "172700"
  },
  {
    "text": "customer data whatever some temporary data which passes through your",
    "start": "172700",
    "end": "178260"
  },
  {
    "text": "application and we also have either one stack or several Stacks right so if your your",
    "start": "178260",
    "end": "186360"
  },
  {
    "text": "process is multi-threaded each thread has a stack and also your processes don't run in",
    "start": "186360",
    "end": "192300"
  },
  {
    "text": "vacuum so they run on kind of like an operating system like Linux and you have the kernel space address space and and",
    "start": "192300",
    "end": "198840"
  },
  {
    "text": "like the process address space is kind of flat it it doesn't it's not separated between",
    "start": "198840",
    "end": "204840"
  },
  {
    "text": "the different parts of the kernel and again in the kernel we have the kernel code",
    "start": "204840",
    "end": "210480"
  },
  {
    "text": "we also have some static and dynamic data for the kernel also have some drivers right if you use",
    "start": "210480",
    "end": "217560"
  },
  {
    "text": "loadable kernel modules they're loaded directly into the kernel address space which is can be for some scary thing",
    "start": "217560",
    "end": "226799"
  },
  {
    "text": "and again you have the stacks for the kernel threat right and the idea of the process address",
    "start": "226799",
    "end": "233159"
  },
  {
    "text": "space that anything within the address space can access anything like like main logic but mostly",
    "start": "233159",
    "end": "239760"
  },
  {
    "text": "it's main logic and libraries can access any data or anything on the stack within",
    "start": "239760",
    "end": "245099"
  },
  {
    "text": "the process address space and the same thing happens in kernel the kernel space is completely flat and this is why like",
    "start": "245099",
    "end": "251340"
  },
  {
    "text": "low level kernel modules are really scary because once you load the module it can actually access kernel core code",
    "start": "251340",
    "end": "259440"
  },
  {
    "text": "and static and dynamic data whatever or any stack of any other subsystem",
    "start": "259440",
    "end": "265500"
  },
  {
    "text": "but one process cannot access the address space of another process",
    "start": "265500",
    "end": "271500"
  },
  {
    "text": "directly right and also none of the processes can access the kernel address space so this is what called the typical",
    "start": "271500",
    "end": "278820"
  },
  {
    "text": "address space isolation of the operating system right",
    "start": "278820",
    "end": "285500"
  },
  {
    "text": "but why it is important so let's zoom in a little bit into the process and let's",
    "start": "285540",
    "end": "290580"
  },
  {
    "text": "actually zoom in what could we store in its data section not the section it's kind of it",
    "start": "290580",
    "end": "298320"
  },
  {
    "text": "may be several sections but what is what kind of data can be there right so it can be like internal State like",
    "start": "298320",
    "end": "305460"
  },
  {
    "text": "you write your code you store some data structures temporary computations and",
    "start": "305460",
    "end": "311040"
  },
  {
    "text": "and they're stored in the operating system in the process address space it can be user or customer data if you",
    "start": "311040",
    "end": "317940"
  },
  {
    "text": "process your process processes some customer data it can be temporarily stored in the process address space",
    "start": "317940",
    "end": "325680"
  },
  {
    "text": "and the most scary part is cryptographic keys right so if you run an HTTP server",
    "start": "325680",
    "end": "331800"
  },
  {
    "text": "which does TLS you have cryptographic keys in your process address space",
    "start": "331800",
    "end": "338400"
  },
  {
    "text": "and the best thing about it if your code or a library you somehow becomes",
    "start": "338400",
    "end": "343620"
  },
  {
    "text": "compromised because of the process address spaces all your data is compromised right all three of that",
    "start": "343620",
    "end": "352758"
  },
  {
    "text": "but we can say that we just determined that not all data is created equal right",
    "start": "355740",
    "end": "362160"
  },
  {
    "text": "so what if your application internal state is compromised well is it bad well it depends right it",
    "start": "362160",
    "end": "369300"
  },
  {
    "text": "depends on what your application does how your code has been compromised for example if your internal state is",
    "start": "369300",
    "end": "376740"
  },
  {
    "text": "compromised in a way that can change the expected application flow it can actually to further compromise but",
    "start": "376740",
    "end": "383100"
  },
  {
    "text": "sometimes not so it depends right well what if user customer data gets",
    "start": "383100",
    "end": "389940"
  },
  {
    "text": "compromised who here didn't hear about Equifax",
    "start": "389940",
    "end": "395460"
  },
  {
    "text": "oh encourage you to read that because Equifax has a massive data bridge and a",
    "start": "395460",
    "end": "402300"
  },
  {
    "text": "lot of user requests a lot of its customer data has been compromised and it's it's very bad right there are",
    "start": "402300",
    "end": "408000"
  },
  {
    "text": "severe consequences they had many court hearings they paid expensive fines and",
    "start": "408000",
    "end": "413880"
  },
  {
    "text": "they still paying out to some folks for for their data it's bad right but it's",
    "start": "413880",
    "end": "420780"
  },
  {
    "text": "not the end of the world like it's very hard to recover from it but still possible",
    "start": "420780",
    "end": "426479"
  },
  {
    "text": "but whatever cryptographic key gets compromise so this is a game over because the data in your data Integrity",
    "start": "426479",
    "end": "433199"
  },
  {
    "text": "is compromised the your full security may be compromised and your identity",
    "start": "433199",
    "end": "438840"
  },
  {
    "text": "might be taken over and we saw a massive example in the uh who remember here remembers hard bleed so when a lot of",
    "start": "438840",
    "end": "446400"
  },
  {
    "text": "server cryptographic keys were leaked and so we had to rotate the whole internet actually not allow",
    "start": "446400",
    "end": "454259"
  },
  {
    "text": "some malicious entities to present uh website impersonate websites on the",
    "start": "454259",
    "end": "459660"
  },
  {
    "text": "internet right so given this like we should be paying more",
    "start": "459660",
    "end": "465120"
  },
  {
    "text": "attention to crypto protecting cryptographic keys right so how data may be compromised as",
    "start": "465120",
    "end": "471900"
  },
  {
    "text": "cryptographic Keys specifically well there are some typical types of vulnerabilities categories of",
    "start": "471900",
    "end": "477720"
  },
  {
    "text": "vulnerabilities which lead to that trust it can be compromised through untrusted inputs and out-of-bonds memory access so",
    "start": "477720",
    "end": "484080"
  },
  {
    "text": "you have a piece of code and you have a temporary data which is your just",
    "start": "484080",
    "end": "490199"
  },
  {
    "text": "application data stuff in your memory but the way how because process address",
    "start": "490199",
    "end": "495360"
  },
  {
    "text": "space is kind of flat you may have a cryptographic key written next to it in",
    "start": "495360",
    "end": "500460"
  },
  {
    "text": "your memory right and usually the expectation from your code that it can would only access the stuff",
    "start": "500460",
    "end": "507539"
  },
  {
    "text": "but if you somehow misprogram your application and it can",
    "start": "507539",
    "end": "513599"
  },
  {
    "text": "be directed to read past the the expected stuff buffer so it can read the",
    "start": "513599",
    "end": "519839"
  },
  {
    "text": "Crypt and dump the cryptographic key and this is what exactly happened during the hard bleed attack that openssl didn't",
    "start": "519839",
    "end": "525540"
  },
  {
    "text": "properly validate untrusted input and therefore a cryptographic keys it was",
    "start": "525540",
    "end": "531060"
  },
  {
    "text": "possible to dump cryptographically through the network right",
    "start": "531060",
    "end": "536519"
  },
  {
    "text": "secondly you made your code may be vulnerable to arbitrary remote code execution and actually there is nothing",
    "start": "536519",
    "end": "543180"
  },
  {
    "text": "to discuss there so like if somebody can direct your application do something else they can always direct your",
    "start": "543180",
    "end": "549420"
  },
  {
    "text": "application to read the cryptographic key from memory and dump it whatever right so easy and this is what exactly happened",
    "start": "549420",
    "end": "557160"
  },
  {
    "text": "in lock for Shell so one of the examples of this local shop",
    "start": "557160",
    "end": "562320"
  },
  {
    "text": "but there are many others right your keys May leak you some buffer reuse",
    "start": "562320",
    "end": "568920"
  },
  {
    "text": "for example in this simple example we have a process stack and here is your",
    "start": "568920",
    "end": "575700"
  },
  {
    "text": "main code which occupies some part of the stack now imagine this is some kind of like an HTTP server which decrypts",
    "start": "575700",
    "end": "582959"
  },
  {
    "text": "data with TLS so at some point it may call some kind of decrypt function",
    "start": "582959",
    "end": "588300"
  },
  {
    "text": "and that decrypt function will get a cryptographic key from software and store it on the stack yeah and once the",
    "start": "588300",
    "end": "595860"
  },
  {
    "text": "function finishes decrypting data it just terminates but it may leave the key on",
    "start": "595860",
    "end": "602700"
  },
  {
    "text": "the stack and the next function we call for example logging function can accidentally access that material and",
    "start": "602700",
    "end": "610080"
  },
  {
    "text": "dump it to a log right this why basically if anyone here is did",
    "start": "610080",
    "end": "616860"
  },
  {
    "text": "some kind of like security compliance you always meet this requirement that we",
    "start": "616860",
    "end": "622260"
  },
  {
    "text": "should only always zero the cryptographic material before our code finish uh",
    "start": "622260",
    "end": "628620"
  },
  {
    "text": "terminals right so we should always zero the memory where cryptographic keys were",
    "start": "628620",
    "end": "633720"
  },
  {
    "text": "stored in this example shows the buffer using the stack but similar thing can",
    "start": "633720",
    "end": "638880"
  },
  {
    "text": "happen on the hip but actually turns out that satisfinder's requirement is quite hard especially in uh",
    "start": "638880",
    "end": "647100"
  },
  {
    "text": "garbage collected languages let Java go because you don't actually have control in which memory your cryptography maybe",
    "start": "647100",
    "end": "654959"
  },
  {
    "text": "store and it's not only security vulnerabilities which can accidentally",
    "start": "654959",
    "end": "660899"
  },
  {
    "text": "leak your cryptographic keys simple bug scan as well so imagine your application crashes and your system May",
    "start": "660899",
    "end": "667860"
  },
  {
    "text": "create a thing called a core dump which is the exact snapshot of process address",
    "start": "667860",
    "end": "673560"
  },
  {
    "text": "space at the time of Crash and that snapshot can contain cryptographic Keys as well and somebody gets access there",
    "start": "673560",
    "end": "678959"
  },
  {
    "text": "they can get your keys if inappropriate logging debugging all these things",
    "start": "678959",
    "end": "686760"
  },
  {
    "text": "can leak your application data as well as cryptographic keys",
    "start": "686760",
    "end": "691980"
  },
  {
    "text": "right so what should we do about this action well",
    "start": "691980",
    "end": "697200"
  },
  {
    "text": "some may say let's not have the memory violation vulnerabilities they're just bugs let's fix them and we know and like",
    "start": "697200",
    "end": "705180"
  },
  {
    "text": "it's not possible to fix all the bugs otherwise will not be sitting here and continuously discussing like all the",
    "start": "705180",
    "end": "711480"
  },
  {
    "text": "things like about vulnerabilities right so it's not possible to fix all the bugs and therefore it's not possible to fully",
    "start": "711480",
    "end": "718560"
  },
  {
    "text": "protect ourselves from memory access violation and application data leaks",
    "start": "718560",
    "end": "723839"
  },
  {
    "text": "right but because cryptography keys are so much more important than the rest of the",
    "start": "723839",
    "end": "730140"
  },
  {
    "text": "data can we do something specifically for cryptographies can we protect them better and turns out we can so imagine",
    "start": "730140",
    "end": "737220"
  },
  {
    "text": "what we can redesign our software right so we have our main process what if we",
    "start": "737220",
    "end": "743399"
  },
  {
    "text": "spawn another process right and it will have its own data section and we",
    "start": "743399",
    "end": "749040"
  },
  {
    "text": "will move the cryptographic keys from our main process to another process with",
    "start": "749040",
    "end": "754140"
  },
  {
    "text": "its data section right then we will probably need to write some additional code which we'll call a",
    "start": "754140",
    "end": "761279"
  },
  {
    "text": "crypto logic and this code will create like a well-defined interface between the two applications where the main",
    "start": "761279",
    "end": "768180"
  },
  {
    "text": "application will allow you to somehow use the cryptographic key stored in the",
    "start": "768180",
    "end": "773339"
  },
  {
    "text": "process address space of the another application and this model is quite common these",
    "start": "773339",
    "end": "779040"
  },
  {
    "text": "days so it's I call it an agent model so we have two processes the main process and the helper agent and the main",
    "start": "779040",
    "end": "786540"
  },
  {
    "text": "process doesn't have direct access to the cryptographic material and it's insured by the underlying Opera system",
    "start": "786540",
    "end": "792420"
  },
  {
    "text": "via address space isolation and Main kind of communicates with agents through",
    "start": "792420",
    "end": "797880"
  },
  {
    "text": "a well-defined stripped down easy to audit interface to perform cryptographic",
    "start": "797880",
    "end": "803399"
  },
  {
    "text": "operations on its behalf and the way how it works so main process usually processes and trusted input and usually",
    "start": "803399",
    "end": "810360"
  },
  {
    "text": "is Network facing the agent on the other hand doesn't process and trusted input so only requests with this well-defined",
    "start": "810360",
    "end": "817380"
  },
  {
    "text": "interface and is usually not Network facing so there last time think of the agent as",
    "start": "817380",
    "end": "823139"
  },
  {
    "text": "a software security key like ubik implemented in software and we see a lot",
    "start": "823139",
    "end": "828300"
  },
  {
    "text": "of examples out there so who here uses SSH agent who doesn't use SSH agent",
    "start": "828300",
    "end": "837079"
  },
  {
    "text": "hope nobody doesn't use it yeah you have the gpg agent as well so many agents",
    "start": "837180",
    "end": "843240"
  },
  {
    "text": "but there are drawbacks to this model right so now instead of one application we need to develop two application and",
    "start": "843240",
    "end": "850200"
  },
  {
    "text": "processes we also need to design this well-defined interface is it really well",
    "start": "850200",
    "end": "855720"
  },
  {
    "text": "defined is it the minimal that we require can it be like violated by",
    "start": "855720",
    "end": "860880"
  },
  {
    "text": "untrusted input or something we also need to somehow come add communication support between the two",
    "start": "860880",
    "end": "867360"
  },
  {
    "text": "processes like Unix socket shared memory whatever inter process Communications we have",
    "start": "867360",
    "end": "872639"
  },
  {
    "text": "and probably we also need to somehow authenticate the main process in the agent process because now that we have",
    "start": "872639",
    "end": "878940"
  },
  {
    "text": "this agent process how can we ensure that only main process can talk to it to",
    "start": "878940",
    "end": "883980"
  },
  {
    "text": "perform cryptographic operation and not any malicious process on the system right so it's more",
    "start": "883980",
    "end": "890820"
  },
  {
    "text": "work why this is where we come to Linux kernel",
    "start": "890820",
    "end": "896100"
  },
  {
    "text": "key retention service or a simple term you can call it just a Linux key store",
    "start": "896100",
    "end": "901740"
  },
  {
    "text": "and the concepts are quite simple actually so we go back to our agents model but instead what we do is we",
    "start": "901740",
    "end": "908459"
  },
  {
    "text": "replace the agent process with the Linux kernel and we already have the well-defined",
    "start": "908459",
    "end": "914519"
  },
  {
    "text": "interface in place called system calls",
    "start": "914519",
    "end": "918800"
  },
  {
    "text": "so this is exactly what Linux kernel key retention service does it stores your cryptographic keys or Secrets as kernel",
    "start": "922139",
    "end": "929399"
  },
  {
    "text": "objects it was actually initially designed to share its cryptographic material with",
    "start": "929399",
    "end": "934980"
  },
  {
    "text": "the kernel for internal services for example you send the key to do the Linux",
    "start": "934980",
    "end": "941160"
  },
  {
    "text": "disk because Linux disk encryption implemented inside the kernel you need to somehow provide a key decryption key",
    "start": "941160",
    "end": "947519"
  },
  {
    "text": "to the kernel to actually do that operation so it was designed for DM crypto equip the first but it was later",
    "start": "947519",
    "end": "953699"
  },
  {
    "text": "extended for use the space program to manage their keys and the advantages is similar",
    "start": "953699",
    "end": "961199"
  },
  {
    "text": "similar to a typical agent model that keys are stored outside of the process address space and there is a",
    "start": "961199",
    "end": "967440"
  },
  {
    "text": "well-defined system call interface to access and use the keys and now because keys are now kernel objects they like",
    "start": "967440",
    "end": "975300"
  },
  {
    "text": "other kernel objects they have Associated Access Control Bits And they also are subject to Security check",
    "start": "975300",
    "end": "982019"
  },
  {
    "text": "inside the Linux kernels like you can write LSM policies like scl Linux or some use some other LSM modules to",
    "start": "982019",
    "end": "989399"
  },
  {
    "text": "actually really find grain access to the key and one of the most powerful things that",
    "start": "989399",
    "end": "995760"
  },
  {
    "text": "key life cycle can also be implicitly bound to the code life cycle as I will show a little bit later we can solve",
    "start": "995760",
    "end": "1003380"
  },
  {
    "text": "this out of destruction of the key when the pro your code terminates even if",
    "start": "1003380",
    "end": "1008600"
  },
  {
    "text": "your code was written in a garbage collected language because it",
    "start": "1008600",
    "end": "1013699"
  },
  {
    "text": "will be enforced by the operating system and surprisingly for a kernel feature it",
    "start": "1013699",
    "end": "1019399"
  },
  {
    "text": "has good documentation so you can also read that",
    "start": "1019399",
    "end": "1024620"
  },
  {
    "text": "so let's dive into the key store how it works right so to understand to talk about keystore we need to understand",
    "start": "1024620",
    "end": "1030740"
  },
  {
    "text": "some terminology so keystore has keyrings and keys",
    "start": "1030740",
    "end": "1036558"
  },
  {
    "text": "um so keyrings can contain other keyrings and or keyrings can contain",
    "start": "1036559",
    "end": "1042438"
  },
  {
    "text": "keys so it's kind of like you can have this key hierarchy or key structure which is very similar to a file system",
    "start": "1042439",
    "end": "1050660"
  },
  {
    "text": "or on your machine but specifically for keys so keys they are actually objects",
    "start": "1050660",
    "end": "1055880"
  },
  {
    "text": "that contain actual cryptographic material and they can be read written to",
    "start": "1055880",
    "end": "1061039"
  },
  {
    "text": "or used to perform cryptographic operations there can be different types which we'll",
    "start": "1061039",
    "end": "1067580"
  },
  {
    "text": "dive in shortly they can use their logon asymmetric encrypted and trusted and they're very similar to a file in a file",
    "start": "1067580",
    "end": "1074900"
  },
  {
    "text": "system but the difference is that key a key can be included in more than one key",
    "start": "1074900",
    "end": "1081500"
  },
  {
    "text": "ring apart from the file included in only one directory so a key can be present in several key rings at a time",
    "start": "1081500",
    "end": "1089000"
  },
  {
    "text": "keyrings are like the collection of keys they contain so-called links to keys and",
    "start": "1089000",
    "end": "1095480"
  },
  {
    "text": "other keyrings and they kind of enforce this life cycle of a key so as I mentioned the key can",
    "start": "1095480",
    "end": "1101840"
  },
  {
    "text": "be linked to several key rings but a key cannot not be linked to a single key ring as soon as the last link to the key",
    "start": "1101840",
    "end": "1108620"
  },
  {
    "text": "is destroyed the kid gets garbage collected and securely white from from the ram by",
    "start": "1108620",
    "end": "1115580"
  },
  {
    "text": "the kernel keyrings can be explicitly created or",
    "start": "1115580",
    "end": "1121039"
  },
  {
    "text": "special which types like thread process user and session I will dive into them a",
    "start": "1121039",
    "end": "1126200"
  },
  {
    "text": "little bit later they do in as I said they enforce key Lifetime and they're similar to a director and a file system",
    "start": "1126200",
    "end": "1133940"
  },
  {
    "text": "so let's see an example by the way this is like a slide but when",
    "start": "1133940",
    "end": "1142100"
  },
  {
    "text": "it's in this black box it was copy pasted from a real terminal so consider it as a demo and when you get this",
    "start": "1142100",
    "end": "1149000"
  },
  {
    "text": "presentation you can actually copy the comments and run them yourself right so",
    "start": "1149000",
    "end": "1154820"
  },
  {
    "text": "in this example we just we are creating a new key ring in and Link it to my user",
    "start": "1154820",
    "end": "1162500"
  },
  {
    "text": "keyring I will explain what are you and user is a special type of curing which is implicitly created by the system for",
    "start": "1162500",
    "end": "1169100"
  },
  {
    "text": "my user I will dive into a little bit later but as far as like now we just create a custom keyring linking to my",
    "start": "1169100",
    "end": "1175940"
  },
  {
    "text": "keyring and then I can create a key of a user key with the contents cryptographic",
    "start": "1175940",
    "end": "1182539"
  },
  {
    "text": "material Hunter 2 and add it to my key ring right and then I can display the my",
    "start": "1182539",
    "end": "1188240"
  },
  {
    "text": "current key hierarchy so you can see we have yeah",
    "start": "1188240",
    "end": "1194380"
  },
  {
    "text": "the these two are special keyrings this is my session curing this is my user",
    "start": "1194380",
    "end": "1199760"
  },
  {
    "text": "keyring this is my custom keyring which you just created and my custom key right",
    "start": "1199760",
    "end": "1204799"
  },
  {
    "text": "and uh yeah you can see that each key or key ring is designated via a small integer",
    "start": "1204799",
    "end": "1213200"
  },
  {
    "text": "it's called a serial number and I can also Now read my key back like",
    "start": "1213200",
    "end": "1219080"
  },
  {
    "text": "so the key is now stored in the kernel I can ask the kernel give me the key material and I should have access to",
    "start": "1219080",
    "end": "1225020"
  },
  {
    "text": "that because it's my key so I can read the key material but so yeah Hunter too",
    "start": "1225020",
    "end": "1230900"
  },
  {
    "text": "another example which you can use a kernel key store to actually share cryptographic material between users so",
    "start": "1230900",
    "end": "1238220"
  },
  {
    "text": "imagine we have two users on the system and you may notice that these users don't have any common things or they're",
    "start": "1238220",
    "end": "1245299"
  },
  {
    "text": "not part of the same group or anything two completely different users on a single system so let's imagine the first",
    "start": "1245299",
    "end": "1252080"
  },
  {
    "text": "user creates a new key in their key ring in their user key ring called Hunter 2.",
    "start": "1252080",
    "end": "1258320"
  },
  {
    "text": "yeah now the second user may create a new key",
    "start": "1258320",
    "end": "1263600"
  },
  {
    "text": "ring under their user key ring and what the second user can do the",
    "start": "1263600",
    "end": "1270559"
  },
  {
    "text": "second user can allow other users to write into that key ring but not read from it so it can set permission the key",
    "start": "1270559",
    "end": "1277820"
  },
  {
    "text": "ring name is from others to actually receive secrets from other users and then once they're done the first",
    "start": "1277820",
    "end": "1284780"
  },
  {
    "text": "user can actually move their key from their keyring to that to the Bob ski",
    "start": "1284780",
    "end": "1291740"
  },
  {
    "text": "ring and we can now see that Alice doesn't have access to the key",
    "start": "1291740",
    "end": "1298159"
  },
  {
    "text": "anymore so because it was moved to the Bob keyring and Bob actually now having access to the key can actually read the",
    "start": "1298159",
    "end": "1304520"
  },
  {
    "text": "cryptographic material and it has it's the key in their key hierarchy so it's",
    "start": "1304520",
    "end": "1311120"
  },
  {
    "text": "just a simple key sharing mechanism between users",
    "start": "1311120",
    "end": "1316120"
  },
  {
    "text": "so now we see custom keyrings and we see implicit curing so implicit key rings",
    "start": "1321620",
    "end": "1327320"
  },
  {
    "text": "are very powerful they can be over three types so they can be process keyrings",
    "start": "1327320",
    "end": "1332960"
  },
  {
    "text": "implicit means you don't have to explicitly create them the kernel will",
    "start": "1332960",
    "end": "1338120"
  },
  {
    "text": "create these keyrings for you and they are always accessible and their life cycle is bound to whatever the kernel",
    "start": "1338120",
    "end": "1344600"
  },
  {
    "text": "object is creating them right so",
    "start": "1344600",
    "end": "1349720"
  },
  {
    "text": "we have process keyring so we have the session keyring which is accessible to",
    "start": "1349720",
    "end": "1355340"
  },
  {
    "text": "the current process and all its child processes we have a process keyring which is private to a specific process",
    "start": "1355340",
    "end": "1361760"
  },
  {
    "text": "and we have a thread key ring which is private to a thread which is very powerful as well so imagine if you",
    "start": "1361760",
    "end": "1368179"
  },
  {
    "text": "design an HTTP server where it sort of several domains at once and each domain",
    "start": "1368179",
    "end": "1373220"
  },
  {
    "text": "have their own TLS key and you design it in a way that a domain is served by",
    "start": "1373220",
    "end": "1378860"
  },
  {
    "text": "thread so each thread May store the TLs key in the thread key ring and we can",
    "start": "1378860",
    "end": "1384140"
  },
  {
    "text": "guarantee that other threads can never access that key even if they run as part of the same",
    "start": "1384140",
    "end": "1390500"
  },
  {
    "text": "process we also have user keyrings so their lifetime is bound to user objects so we",
    "start": "1390500",
    "end": "1396559"
  },
  {
    "text": "saw in the example the user curing it's shared between all the processes with the specified uid there is another",
    "start": "1396559",
    "end": "1403039"
  },
  {
    "text": "special time type of user session keyrings which is very similar to user curing and the difference are not",
    "start": "1403039",
    "end": "1409880"
  },
  {
    "text": "important for this presentation there is also a type called persistent keyrings and they are not persistent",
    "start": "1409880",
    "end": "1417080"
  },
  {
    "text": "because they have a backing store so none of the keys are back to disk or whatever but they just have a different",
    "start": "1417080",
    "end": "1424100"
  },
  {
    "text": "lifetime so persisting keyrings were designed to not to be automatically destroyed when a bound object is",
    "start": "1424100",
    "end": "1430820"
  },
  {
    "text": "destroyed but for example to have a timeout Before Destruction so they're mostly useful for",
    "start": "1430820",
    "end": "1437559"
  },
  {
    "text": "non-interactive tasks or Chrome jobs which create a random user to run the task and then destroy the user",
    "start": "1437559",
    "end": "1444140"
  },
  {
    "text": "afterwards but you can still store the key material for the job and the persistent keyring so it has access to",
    "start": "1444140",
    "end": "1450140"
  },
  {
    "text": "that key between the runs let's see how the actual what the power",
    "start": "1450140",
    "end": "1457460"
  },
  {
    "text": "of keys and keyring lifetime implicit lifetimes in real world examples so in",
    "start": "1457460",
    "end": "1463580"
  },
  {
    "text": "this example I will create a new key in my",
    "start": "1463580",
    "end": "1469340"
  },
  {
    "text": "session keyring so Hunter 2 adding to my session keyring like at as means the session curing and yeah",
    "start": "1469340",
    "end": "1477860"
  },
  {
    "text": "and I can display my key hierarchy I have my session keyring and under that I",
    "start": "1477860",
    "end": "1483260"
  },
  {
    "text": "have my secret right yeah and we can verify that IDs are the",
    "start": "1483260",
    "end": "1488960"
  },
  {
    "text": "same now in in another terminal in another window I will run a BPF Trace",
    "start": "1488960",
    "end": "1496159"
  },
  {
    "text": "program and put a hook on a kernel user destroy function which is responsible",
    "start": "1496159",
    "end": "1501260"
  },
  {
    "text": "for securely destroying a key and even if in the first terminal",
    "start": "1501260",
    "end": "1507799"
  },
  {
    "text": "I exit my session I log out from the system I would immediately see that the",
    "start": "1507799",
    "end": "1513200"
  },
  {
    "text": "kernel will destroy the key because the session keyring is bound to my current process my SSH session and when I exit",
    "start": "1513200",
    "end": "1520700"
  },
  {
    "text": "the process terminates the session keyring terminates and because the user key was linked only to my session query",
    "start": "1520700",
    "end": "1527539"
  },
  {
    "text": "it also gets terminated securely and I can verify that I can relogin back",
    "start": "1527539",
    "end": "1534020"
  },
  {
    "text": "into the system and I will see that I don't have access to a user secret anymore and we can also see that the",
    "start": "1534020",
    "end": "1542240"
  },
  {
    "text": "session keyring ID is different because on my next login I the system created me",
    "start": "1542240",
    "end": "1547340"
  },
  {
    "text": "a different session keyring so",
    "start": "1547340",
    "end": "1553220"
  },
  {
    "text": "these are powerful because selecting the appropriate key ring type you can ensure the keys will be securely destroyed when",
    "start": "1553220",
    "end": "1559460"
  },
  {
    "text": "not needed if you're writing like server applications probably the typical keyrings you would use will be process",
    "start": "1559460",
    "end": "1566000"
  },
  {
    "text": "or threat keyrings because even if your process crashes for whatever bugs you",
    "start": "1566000",
    "end": "1572000"
  },
  {
    "text": "are guaranteed that the kernel will securely delete all the keys associated",
    "start": "1572000",
    "end": "1577159"
  },
  {
    "text": "with the process you know yeah and from its memory",
    "start": "1577159",
    "end": "1583960"
  },
  {
    "text": "clear so far so now uh we talked about keyring types",
    "start": "1585460",
    "end": "1591260"
  },
  {
    "text": "let's talk about key types so for in the example so far we use only",
    "start": "1591260",
    "end": "1598460"
  },
  {
    "text": "one key type called a user key and it's the most simple type of key it's just a kernel object which stores cryptographic",
    "start": "1598460",
    "end": "1605539"
  },
  {
    "text": "material so imagine we have a user key so a process has some cryptographic",
    "start": "1605539",
    "end": "1610580"
  },
  {
    "text": "material it can create a user key in the kernel and another process can read the",
    "start": "1610580",
    "end": "1615740"
  },
  {
    "text": "key if they're allowed to do so and get the cryptographic material easy like a internal buffer",
    "start": "1615740",
    "end": "1622220"
  },
  {
    "text": "right we have logon keys so log on keys are very similar to user Keys they're",
    "start": "1622220",
    "end": "1627740"
  },
  {
    "text": "just buffers pointing to cryptographic material but the difference is so a",
    "start": "1627740",
    "end": "1632840"
  },
  {
    "text": "process may put a key as a logon key inside the kernel but you can never read the key back and it was mostly designed",
    "start": "1632840",
    "end": "1640340"
  },
  {
    "text": "for internal cryptographic services like Lux dmcrypt or equipped ffs so for",
    "start": "1640340",
    "end": "1646460"
  },
  {
    "text": "example if you're running a very recent Linux distribution and you have full",
    "start": "1646460",
    "end": "1651799"
  },
  {
    "text": "disk encryption enabled and I hope everyone does if you check",
    "start": "1651799",
    "end": "1656840"
  },
  {
    "text": "your full disk encryption setup you will notice that the keys are actually stored",
    "start": "1656840",
    "end": "1662120"
  },
  {
    "text": "in as a logon keys inside the kernel for your disk encryption so you can never read them back you can never get back",
    "start": "1662120",
    "end": "1668080"
  },
  {
    "text": "the uh so the keys are stored there when initially the Crypt setup utility runs",
    "start": "1668080",
    "end": "1673580"
  },
  {
    "text": "but when it terminates you can never read the disk encryption key back from the kernel",
    "start": "1673580",
    "end": "1679778"
  },
  {
    "text": "one of the powerful key type inside the Linux kernel key store are asymmetric",
    "start": "1681860",
    "end": "1688400"
  },
  {
    "text": "keys so imagine you have an RSA key so what you can do is you can store that",
    "start": "1688400",
    "end": "1693980"
  },
  {
    "text": "key inside a Linux key store and other processes may not have to read the key",
    "start": "1693980",
    "end": "1700640"
  },
  {
    "text": "but they can do cryptographic operations on top of that key so they can decrypt",
    "start": "1700640",
    "end": "1705740"
  },
  {
    "text": "or sign the data with the private key navigating have to have access",
    "start": "1705740",
    "end": "1713620"
  },
  {
    "text": "sorry it to to the actual cryptographic material",
    "start": "1713620",
    "end": "1719299"
  },
  {
    "text": "which is very powerful for things like HTTP servers or like LSA",
    "start": "1719299",
    "end": "1727779"
  },
  {
    "text": "SSH agent for example so in this example we're kind of mimicking how would a",
    "start": "1727779",
    "end": "1733760"
  },
  {
    "text": "typical SSH agent replacement would work with the Linux kernel keystore so here we generate a random RSA key the only",
    "start": "1733760",
    "end": "1741980"
  },
  {
    "text": "thing we need to convert it to all right so we need to convert it to",
    "start": "1741980",
    "end": "1748159"
  },
  {
    "text": "pkcs8 format because this is how the kernel understands the private key",
    "start": "1748159",
    "end": "1753279"
  },
  {
    "text": "asymmetric keys and then we can actually add that key as an asymmetric key to our",
    "start": "1753279",
    "end": "1758779"
  },
  {
    "text": "session keyring for example to ensure like we let's say the same way like an",
    "start": "1758779",
    "end": "1763820"
  },
  {
    "text": "SSH agent works right so you add a key to an SSH agent and uh yeah and the",
    "start": "1763820",
    "end": "1770419"
  },
  {
    "text": "session is keyring is very useful for you because once we log out our internal private key would be",
    "start": "1770419",
    "end": "1777980"
  },
  {
    "text": "automatically destroyed right and then we can actually sign some data with the key handle so we",
    "start": "1777980",
    "end": "1784399"
  },
  {
    "text": "can sign ABC and later we can basically verify that",
    "start": "1784399",
    "end": "1790580"
  },
  {
    "text": "whatever signature we produce it it would work we wrote a really extensive blog post on",
    "start": "1790580",
    "end": "1798320"
  },
  {
    "text": "this and I encourage you to read it I will provide Links at the end as well so the blog post deeply explores the",
    "start": "1798320",
    "end": "1806059"
  },
  {
    "text": "asymmetric key type and we actually also provide a working patch for open SSH to",
    "start": "1806059",
    "end": "1813200"
  },
  {
    "text": "replace an SSH agent with Linux kernel keystore so in the future you don't have to run SSH agents so you can just add",
    "start": "1813200",
    "end": "1820520"
  },
  {
    "text": "the key to the Linux to the Linux kernel key store and openssh will just pick it",
    "start": "1820520",
    "end": "1826399"
  },
  {
    "text": "out automatically to authenticate you to the servers",
    "start": "1826399",
    "end": "1832419"
  },
  {
    "text": "clear so far so up until this point we were talking",
    "start": "1834260",
    "end": "1839720"
  },
  {
    "text": "about you know like simple users of Linux keystore",
    "start": "1839720",
    "end": "1845299"
  },
  {
    "text": "how can your application utilize it but let's talk about how we can put it",
    "start": "1845299",
    "end": "1850820"
  },
  {
    "text": "on an Enterprise level right and the big question for Key Management",
    "start": "1850820",
    "end": "1857720"
  },
  {
    "text": "Systems is how can we like in all the previous examples to",
    "start": "1857720",
    "end": "1863539"
  },
  {
    "text": "provision the keys our application still had to touch the cryptographic material some process on the system had to take",
    "start": "1863539",
    "end": "1870679"
  },
  {
    "text": "the cryptographic material and put it inside the kernel so therefore it has this Mo have this moment where the key",
    "start": "1870679",
    "end": "1876559"
  },
  {
    "text": "material is exposed to user space and therefore any vulnerability can potential vulnerability can dump it from",
    "start": "1876559",
    "end": "1883279"
  },
  {
    "text": "there right so how can we actually provision these Keys directly into the kernel memory without user space ever",
    "start": "1883279",
    "end": "1889640"
  },
  {
    "text": "needing to touch a single byte of cryptographic material for that there are interesting new key",
    "start": "1889640",
    "end": "1897260"
  },
  {
    "text": "types one interesting key is like called encrypted key so imagine we have a setup",
    "start": "1897260",
    "end": "1903860"
  },
  {
    "text": "where the kernel already has some kind of like key provision inside right we",
    "start": "1903860",
    "end": "1909020"
  },
  {
    "text": "will call it a wrapping key so what a process can do a process can take a wrapped key",
    "start": "1909020",
    "end": "1915500"
  },
  {
    "text": "so an encrypted key and put it inside the kernel specifying the wrapping key",
    "start": "1915500",
    "end": "1921679"
  },
  {
    "text": "and the kernel will automatically unwrap the key so in this case inside the kernel the key is the key material is",
    "start": "1921679",
    "end": "1928940"
  },
  {
    "text": "plain text but in the user space the key material is always encrypted so user",
    "start": "1928940",
    "end": "1934460"
  },
  {
    "text": "space doesn't touch the cryptographic material in this case and when somebody tries to read the key back the kernel",
    "start": "1934460",
    "end": "1940880"
  },
  {
    "text": "will automatically wrap it again so the the processes can like read the keys back it up but they will never see the",
    "start": "1940880",
    "end": "1947480"
  },
  {
    "text": "actual cryptographic materials but this approach has a chicken and that problem so how do you get the wrapping",
    "start": "1947480",
    "end": "1953240"
  },
  {
    "text": "Keys then right so there is a different type of keys which tries to solve that where we",
    "start": "1953240",
    "end": "1959659"
  },
  {
    "text": "replace a wrap key with the TPM and and this becomes much simpler so",
    "start": "1959659",
    "end": "1965240"
  },
  {
    "text": "with TPM you have a wrap key with the TPM when you try to insert in the kernel",
    "start": "1965240",
    "end": "1971360"
  },
  {
    "text": "the kernel will use the TPM to securely unwrap your key and when you try to read it back it will be wrapped by the TPM",
    "start": "1971360",
    "end": "1977779"
  },
  {
    "text": "again but going back and forth to TPM for each",
    "start": "1977779",
    "end": "1983659"
  },
  {
    "text": "key is quite expensive because TPMS are quite slow and like in our case they",
    "start": "1983659",
    "end": "1989419"
  },
  {
    "text": "actually break at scale to be honest yeah",
    "start": "1989419",
    "end": "1994580"
  },
  {
    "text": "a trusted platform module a security chip which is present on most laptops",
    "start": "1994580",
    "end": "2000580"
  },
  {
    "text": "modern laptops and servers and if it's not present you can actually buy them for like several dollars or pounds",
    "start": "2000580",
    "end": "2008880"
  },
  {
    "text": "so in this case it's very convenient to use some kind of combined schema right so",
    "start": "2009039",
    "end": "2015480"
  },
  {
    "text": "let's say you have a process which needs a key you have a TPM and a kernel and",
    "start": "2015480",
    "end": "2022120"
  },
  {
    "text": "you have some kind of special provisioner process and then you have like some kind of either cloud or",
    "start": "2022120",
    "end": "2027340"
  },
  {
    "text": "on-premise KMS or HSM system which stores the root key for everyone right",
    "start": "2027340",
    "end": "2032860"
  },
  {
    "text": "so now you can provision this root key through the TPM so you can wrap it to",
    "start": "2032860",
    "end": "2038380"
  },
  {
    "text": "the servers TPM send to the provisioner process on your system and the",
    "start": "2038380",
    "end": "2043539"
  },
  {
    "text": "provisioner process will put the key inside the Linux kernel which will be automatically unwrapped so now the",
    "start": "2043539",
    "end": "2049419"
  },
  {
    "text": "kernel has access to the root key and then a specific process like which and",
    "start": "2049419",
    "end": "2055419"
  },
  {
    "text": "that can happen only once on boot for example and then when a process needs a key it requests the wrap key for the",
    "start": "2055419",
    "end": "2063099"
  },
  {
    "text": "from again from our cloud or on-premise HSM and then and puts into the kernel",
    "start": "2063099",
    "end": "2068500"
  },
  {
    "text": "and it gets unwrapped with the root key so this is software operation so it's",
    "start": "2068500",
    "end": "2073898"
  },
  {
    "text": "much faster we don't exercise TPM that much",
    "start": "2073899",
    "end": "2078539"
  },
  {
    "text": "so so far so good we kind of solve this problem but we",
    "start": "2078940",
    "end": "2084280"
  },
  {
    "text": "have some problems right yes we solved that the application never",
    "start": "2084280",
    "end": "2089679"
  },
  {
    "text": "sees the plain text of cryptographic material in the process address space but there are still the schema is",
    "start": "2089679",
    "end": "2095500"
  },
  {
    "text": "inconvenient because applications are still responsible for contacting the centralized HSM or KMS",
    "start": "2095500",
    "end": "2103060"
  },
  {
    "text": "system to get their wrap keys and what it means they need they need to know how",
    "start": "2103060",
    "end": "2108160"
  },
  {
    "text": "to reach that system right so they need to somehow store the URI endpoints in",
    "start": "2108160",
    "end": "2114040"
  },
  {
    "text": "each application configuration you have to explicitly program the code to interact with the KMS or HSM",
    "start": "2114040",
    "end": "2121119"
  },
  {
    "text": "communication protocol and there is also a little administrative control of of the graded",
    "start": "2121119",
    "end": "2129760"
  },
  {
    "text": "key key objects right so let's say if application gets wrapped key puts inside",
    "start": "2129760",
    "end": "2136180"
  },
  {
    "text": "the kernel but SATs on it invalid permission or like lose permissions then some other processing I actually try to",
    "start": "2136180",
    "end": "2143380"
  },
  {
    "text": "read the cryptographic material or use the key right and again then",
    "start": "2143380",
    "end": "2150099"
  },
  {
    "text": "KMS or HSM subsystem needs to somehow authenticate each requesting process because we don't even want to provide",
    "start": "2150099",
    "end": "2156820"
  },
  {
    "text": "wrap keys to arbitrary processes or arbitrary requests so",
    "start": "2156820",
    "end": "2163420"
  },
  {
    "text": "how many of you used vault in you yeah so sounds familiar",
    "start": "2163420",
    "end": "2171400"
  },
  {
    "text": "vault is a great system but you need to interact with Walton like in our case every application needs to somehow",
    "start": "2171400",
    "end": "2177339"
  },
  {
    "text": "interact with Vault and have code for Android or supporting scripts to interact with as well",
    "start": "2177339",
    "end": "2184020"
  },
  {
    "text": "but Linux kernel can help with that so there are actually two system calls",
    "start": "2184300",
    "end": "2190240"
  },
  {
    "text": "which you can use to provision the key so far we've been using a system called",
    "start": "2190240",
    "end": "2196359"
  },
  {
    "text": "called ad key which is basically adds a key to the specified keyring with the",
    "start": "2196359",
    "end": "2202839"
  },
  {
    "text": "provided payload so application takes payload encrypted or not uses a system called to actually store or unwrap the",
    "start": "2202839",
    "end": "2210040"
  },
  {
    "text": "key into the size of the kernel uh inside the kernel and the payload is",
    "start": "2210040",
    "end": "2215260"
  },
  {
    "text": "interpreted according to the key type so plain text payload is taken for user or",
    "start": "2215260",
    "end": "2220900"
  },
  {
    "text": "logon Keys private or public key is taken for asymmetric keys and wrapped Keys taken for encrypted and trusted",
    "start": "2220900",
    "end": "2230079"
  },
  {
    "text": "keys but there is another system called called request key and it's a little bit",
    "start": "2230079",
    "end": "2235300"
  },
  {
    "text": "different applications does not provide payload anymore application just request the key",
    "start": "2235300",
    "end": "2243099"
  },
  {
    "text": "from the kernel it's like a platform feature so give me my key and that's it",
    "start": "2243099",
    "end": "2248280"
  },
  {
    "text": "and naturally every system is different and",
    "start": "2248280",
    "end": "2253480"
  },
  {
    "text": "your kernel probably doesn't know where to give the key where to get the key from but you can help the kernel so you",
    "start": "2253480",
    "end": "2259780"
  },
  {
    "text": "can have a special helper program which will kernel hook into to actually satisfy",
    "start": "2259780",
    "end": "2266079"
  },
  {
    "text": "these requests so and this kernel this helper problem can hook into your external KMS system and it also",
    "start": "2266079",
    "end": "2274300"
  },
  {
    "text": "this helper program can enforce properly key permission on on instantiated keys",
    "start": "2274300",
    "end": "2281079"
  },
  {
    "text": "so it's kind of like it's a more centralized and transparent API to add keys to the keyring",
    "start": "2281079",
    "end": "2288460"
  },
  {
    "text": "so the way how it would work let's say an application May if a process needs a",
    "start": "2288460",
    "end": "2295780"
  },
  {
    "text": "key what it basically does what the only thing it needs to know is",
    "start": "2295780",
    "end": "2302140"
  },
  {
    "text": "what is the key identifier and key identifiers can be arbitrary strings",
    "start": "2302140",
    "end": "2307180"
  },
  {
    "text": "inside the Linux kernel keystore function so you can have like some random key and identifiers assigned to",
    "start": "2307180",
    "end": "2313720"
  },
  {
    "text": "Applications they can either be derived or the application can store them in their configuration file but they're",
    "start": "2313720",
    "end": "2319839"
  },
  {
    "text": "just identified there are no Uris they don't have to have awareness of any KMS",
    "start": "2319839",
    "end": "2325359"
  },
  {
    "text": "or HSS HSM system you use so the process can just issue a request to the Linux kernel give",
    "start": "2325359",
    "end": "2332680"
  },
  {
    "text": "me my key like Cloud app key one and the kernel will create a placeholder",
    "start": "2332680",
    "end": "2337900"
  },
  {
    "text": "inside the kernel address space for that key but with no cryptographic material then the kernel will spawn",
    "start": "2337900",
    "end": "2345700"
  },
  {
    "text": "a special helper program called as bin request key",
    "start": "2345700",
    "end": "2351040"
  },
  {
    "text": "which is part of like modern Linux distributions but that program is modular so you can write your own",
    "start": "2351040",
    "end": "2357520"
  },
  {
    "text": "modules to it in any programming language and you can configure this helper program to actually based on the",
    "start": "2357520",
    "end": "2365440"
  },
  {
    "text": "key ID to actually direct this program to various key sources so for example",
    "start": "2365440",
    "end": "2370960"
  },
  {
    "text": "you can have like keystore in HSM in the cloud and some test keys and depending on like which key was asked like if an",
    "start": "2370960",
    "end": "2378579"
  },
  {
    "text": "application asked a key from like with the cloud prefix it can be directed to your Cloud KMS HSM systems",
    "start": "2378579",
    "end": "2386200"
  },
  {
    "text": "so then the cloud came HSS HSM system provides",
    "start": "2386200",
    "end": "2391480"
  },
  {
    "text": "a response basically with the wrap with the requested wrapped key back to this",
    "start": "2391480",
    "end": "2396760"
  },
  {
    "text": "helper program and that helper program satisfies the request and instantiates the key for the application and then the",
    "start": "2396760",
    "end": "2403599"
  },
  {
    "text": "application can actually use that key",
    "start": "2403599",
    "end": "2407339"
  },
  {
    "text": "clear so far yeah so request key is a is a sync",
    "start": "2409240",
    "end": "2415420"
  },
  {
    "text": "single centralized operating system API to request key for all applications and",
    "start": "2415420",
    "end": "2421180"
  },
  {
    "text": "the advantage of it there are no KMS HSN connection string for each applications no Uris not and just a freeform string",
    "start": "2421180",
    "end": "2430359"
  },
  {
    "text": "ID and this approach actually decouples your application code from your KMS",
    "start": "2430359",
    "end": "2435700"
  },
  {
    "text": "system right the only thing that application needs to know about is its its key identifier and it should be able",
    "start": "2435700",
    "end": "2442660"
  },
  {
    "text": "to do request key operation interact with the with the Linux kernel",
    "start": "2442660",
    "end": "2448420"
  },
  {
    "text": "and it's a more secure way to instantiate keys in in the kernel so",
    "start": "2448420",
    "end": "2455280"
  },
  {
    "text": "the Chrome was designed in a way that once it called this helper program to",
    "start": "2455859",
    "end": "2461260"
  },
  {
    "text": "instantiate the Keys only that helper program have access to actually complete",
    "start": "2461260",
    "end": "2466300"
  },
  {
    "text": "that request so you cannot have a malicious other process which will like dump some garbage into the instantiated",
    "start": "2466300",
    "end": "2472660"
  },
  {
    "text": "keys the cloud process I call it a cloud process can perform additional Security",
    "start": "2472660",
    "end": "2478599"
  },
  {
    "text": "checks this is what we do in our production environment when we get a key request we can actually verify some",
    "start": "2478599",
    "end": "2484900"
  },
  {
    "text": "attributes of the process like what executable started that process uh what",
    "start": "2484900",
    "end": "2491140"
  },
  {
    "text": "is your user ID group ideap process ID so we can technically Implement",
    "start": "2491140",
    "end": "2496300"
  },
  {
    "text": "arbitrary icls and policies for key access we can also support multiple storage",
    "start": "2496300",
    "end": "2502540"
  },
  {
    "text": "backends so for example we can",
    "start": "2502540",
    "end": "2508000"
  },
  {
    "text": "depending on the key ID we can direct some requests to our production KMS system some ideas to the test KMS system",
    "start": "2508000",
    "end": "2515380"
  },
  {
    "text": "some ideas we can just generate a random key and provide it to application an application it's the logic of this is",
    "start": "2515380",
    "end": "2522579"
  },
  {
    "text": "fully decoupled from the application itself and now we have only one process which",
    "start": "2522579",
    "end": "2529000"
  },
  {
    "text": "needs to be authenticated in the in the cloud KMS system so only this process",
    "start": "2529000",
    "end": "2534960"
  },
  {
    "text": "yeah so Cloud KMS doesn't have to authenticate every request so it needs",
    "start": "2534960",
    "end": "2540099"
  },
  {
    "text": "only to authenticate requests coming from these authorite processes on the system and yeah as I mentioned these back-end",
    "start": "2540099",
    "end": "2547060"
  },
  {
    "text": "connectors can be written in any language so the request key binary is written in C but you can actually write",
    "start": "2547060",
    "end": "2553960"
  },
  {
    "text": "modules in in Python go Java whatever",
    "start": "2553960",
    "end": "2559780"
  },
  {
    "text": "so by utilizing request key the key management and distribution it",
    "start": "2559780",
    "end": "2567040"
  },
  {
    "text": "becomes a core service Opera of the operating system itself as it should be even in Enterprise scenarios and you can",
    "start": "2567040",
    "end": "2573940"
  },
  {
    "text": "you know like support arbitrary KMS and HSM setups with it",
    "start": "2573940",
    "end": "2581880"
  },
  {
    "text": "this is basically all what I wanted to say for today so here are some links most of them are",
    "start": "2581880",
    "end": "2589060"
  },
  {
    "text": "links to Kernel documentation and Man pages for all the features I just",
    "start": "2589060",
    "end": "2594960"
  },
  {
    "text": "mentioned so I still encourage you to go and read our blog post about the kernel",
    "start": "2594960",
    "end": "2600760"
  },
  {
    "text": "key service so it has some it has a full working example how to patch an open SSH",
    "start": "2600760",
    "end": "2605859"
  },
  {
    "text": "server to use Linux kernel keyring instead of an SSH agent it also has some",
    "start": "2605859",
    "end": "2611079"
  },
  {
    "text": "fun code which illustrates how you can accidentally leak a cryptographic key",
    "start": "2611079",
    "end": "2616839"
  },
  {
    "text": "with a buffer use scenario so all examples are copy pasteable compilable",
    "start": "2616839",
    "end": "2622300"
  },
  {
    "text": "and ready to use thank you very much and [Applause] um",
    "start": "2622300",
    "end": "2629099"
  },
  {
    "text": "yes please I will put that back",
    "start": "2633940",
    "end": "2638460"
  },
  {
    "text": "uh you get you mentioned earlier that your company had some issues with running TPMS at scale",
    "start": "2645599",
    "end": "2652500"
  },
  {
    "text": "if you can could you share like what was what was breaking I mean it's General I",
    "start": "2652500",
    "end": "2660220"
  },
  {
    "text": "think Hardware reliability of a specific server configuration so one of our",
    "start": "2660220",
    "end": "2665740"
  },
  {
    "text": "Generations when you you know like you try some thing with the TPM and now",
    "start": "2665740",
    "end": "2670900"
  },
  {
    "text": "you're ready to deploy to production let's say I want to like read TPM ID from every server at Cloud for and when",
    "start": "2670900",
    "end": "2677560"
  },
  {
    "text": "I launch it I can see that like a non-zero percentage of the fleet does not respond to the command and TPM",
    "start": "2677560",
    "end": "2683680"
  },
  {
    "text": "becomes unreachable until you reboot a server some TPMS even like stop working",
    "start": "2683680",
    "end": "2689200"
  },
  {
    "text": "at all and then when we open the server we see the burnt kitchens there so",
    "start": "2689200",
    "end": "2694680"
  },
  {
    "text": "basically I'm not sure like this is a lesson for us as well so like",
    "start": "2694680",
    "end": "2700119"
  },
  {
    "text": "when we now procure Hardware we try to incorporate some resilience testing for",
    "start": "2700119",
    "end": "2705520"
  },
  {
    "text": "such things so sometimes they're not very well tested on the factory",
    "start": "2705520",
    "end": "2712559"
  },
  {
    "text": "yes uh should the Linux key store be used",
    "start": "2712900",
    "end": "2720280"
  },
  {
    "text": "and containerized environments and are those cases",
    "start": "2720280",
    "end": "2727300"
  },
  {
    "text": "in that case different from what you showed here this is a very good question",
    "start": "2727300",
    "end": "2734260"
  },
  {
    "text": "so unlike other many other features of the Linux kernel the keystore subsystem",
    "start": "2734260",
    "end": "2740800"
  },
  {
    "text": "is not fully namespaced so I think it only namespace for user namespaces so there are some quirks",
    "start": "2740800",
    "end": "2748599"
  },
  {
    "text": "around that so there are some still possible attacks where for example if",
    "start": "2748599",
    "end": "2754660"
  },
  {
    "text": "you manipulate your own key store inside the container you can actually manipulate something outside on the host",
    "start": "2754660",
    "end": "2760900"
  },
  {
    "text": "system and this is why in modern container setups like kubernetes or even",
    "start": "2760900",
    "end": "2767980"
  },
  {
    "text": "doctor Docker they key rings ciscalls are usually blocked",
    "start": "2767980",
    "end": "2773260"
  },
  {
    "text": "by second for now but we're working on it so I guess for for example managed",
    "start": "2773260",
    "end": "2782740"
  },
  {
    "text": "like fully managed kubernetes like Cloud run would be even a",
    "start": "2782740",
    "end": "2789520"
  },
  {
    "text": "well I guess the way how I approach it it's a blessing and a curse right so",
    "start": "2789520",
    "end": "2796020"
  },
  {
    "text": "on the other hand if I manage my own kubernetes cluster right I don't want",
    "start": "2796020",
    "end": "2802780"
  },
  {
    "text": "the KMS code to run in the container I want it to be the feature of kubernetes",
    "start": "2802780",
    "end": "2808420"
  },
  {
    "text": "itself so kubernetes can be that hook so this has to execute on the horse so for example if a container in some namespace",
    "start": "2808420",
    "end": "2815460"
  },
  {
    "text": "requests the key my host system replies and and supplies",
    "start": "2815460",
    "end": "2820780"
  },
  {
    "text": "that key as it should like with any other kubernetes subsystem I guess you can",
    "start": "2820780",
    "end": "2827859"
  },
  {
    "text": "if you use LSM hooks basically you can design a proper secure solution for that",
    "start": "2827859",
    "end": "2833500"
  },
  {
    "text": "but it has to be very well tested that you can the containers cannot somehow",
    "start": "2833500",
    "end": "2838599"
  },
  {
    "text": "manipulate the keys outside of their jurisdiction I think what it means",
    "start": "2838599",
    "end": "2846000"
  },
  {
    "text": "yes",
    "start": "2848380",
    "end": "2850980"
  },
  {
    "text": "is there a way to generate a key in the key store as well",
    "start": "2854140",
    "end": "2861220"
  },
  {
    "text": "yes so at least for trusted and encrypted keys there is also a way you",
    "start": "2861220",
    "end": "2867460"
  },
  {
    "text": "can can add the key with zero bytes and in this case the kernel will generate",
    "start": "2867460",
    "end": "2872859"
  },
  {
    "text": "one for you internal and provide you the wrapped version so yes technically you can have a setup where you generate a",
    "start": "2872859",
    "end": "2879880"
  },
  {
    "text": "random key get the wrapped version and then provide the wrap version which will be unwrapped and then the user space",
    "start": "2879880",
    "end": "2885160"
  },
  {
    "text": "will never see the cryptographic material associated with that key",
    "start": "2885160",
    "end": "2891000"
  },
  {
    "text": "yes",
    "start": "2895480",
    "end": "2898200"
  },
  {
    "text": "yeah this is just something basic but what's the point of developed key",
    "start": "2901540",
    "end": "2906819"
  },
  {
    "text": "what's the point of the wrapped key yeah if and I've developed key in a process I cannot use it because it's encrypted",
    "start": "2906819",
    "end": "2912460"
  },
  {
    "text": "right so why would I use it the thing is uh Linux kernel itself doesn't provide",
    "start": "2912460",
    "end": "2920079"
  },
  {
    "text": "any mechanisms of key persistence right so every key object inside the kernel is",
    "start": "2920079",
    "end": "2926440"
  },
  {
    "text": "in memory so you lose all your keys when you reboot so for example but you may have your own setup where you extract",
    "start": "2926440",
    "end": "2934119"
  },
  {
    "text": "the wrap key from the kernels and back it up somewhere and then when you have to use it again you take it from the",
    "start": "2934119",
    "end": "2939160"
  },
  {
    "text": "back I put it back in the kernel and it can unwrap it",
    "start": "2939160",
    "end": "2943619"
  },
  {
    "text": "also I guess the quiche key secret sharing example could be extended by",
    "start": "2947440",
    "end": "2953740"
  },
  {
    "text": "using a wrapped key so for example I can just create a rap key and give access to some",
    "start": "2953740",
    "end": "2959859"
  },
  {
    "text": "other application use it but never read the cryptographic material but I can still share that key with that",
    "start": "2959859",
    "end": "2965200"
  },
  {
    "text": "application any question more",
    "start": "2965200",
    "end": "2972160"
  },
  {
    "text": "going once go yes",
    "start": "2972160",
    "end": "2977560"
  },
  {
    "text": "foreign",
    "start": "2977560",
    "end": "2979800"
  },
  {
    "text": "there is a system called to get the key which the process can use yes uh is",
    "start": "2982680",
    "end": "2989020"
  },
  {
    "text": "there any protection if we do this buffer overflow and we inject this calls in the stack",
    "start": "2989020",
    "end": "2995260"
  },
  {
    "text": "I I know where to ask for the case is there any protection",
    "start": "2995260",
    "end": "3000420"
  },
  {
    "text": "well you mean sorry I quite don't understand so you I mean if we have a vulnerability",
    "start": "3000420",
    "end": "3008180"
  },
  {
    "text": "application and with the buffer row of flow I can inject the assembly code and",
    "start": "3008180",
    "end": "3013800"
  },
  {
    "text": "do the system call but like so I could ask",
    "start": "3013800",
    "end": "3018900"
  },
  {
    "text": "I'm still in the same user space so I can ask the kernel to do something with the key so give me the key",
    "start": "3018900",
    "end": "3025500"
  },
  {
    "text": "um but you can only like keys are represented in user space with",
    "start": "3025500",
    "end": "3031020"
  },
  {
    "text": "their serials ID which is kind of similar to a file descriptor so you can only do with it's a well-defined",
    "start": "3031020",
    "end": "3037500"
  },
  {
    "text": "interface in the way that you can only perform operations on these objects you're entitled to so if you're not",
    "start": "3037500",
    "end": "3044700"
  },
  {
    "text": "allowed to read the key you can't do that with the key serial So eventually the kernel will validate what kind of",
    "start": "3044700",
    "end": "3051480"
  },
  {
    "text": "permissions do you have for that key and if you don't have the permissions to read the key material it will not allow",
    "start": "3051480",
    "end": "3057780"
  },
  {
    "text": "you the system call yeah because as understood I mean we use",
    "start": "3057780",
    "end": "3063420"
  },
  {
    "text": "the key store to protect the keys that for example if I'm HTTP server I have uh",
    "start": "3063420",
    "end": "3069420"
  },
  {
    "text": "some key which I I need for decrypt I I store it under my user space but then if",
    "start": "3069420",
    "end": "3076740"
  },
  {
    "text": "there is malicious uh I mean it's not vulnerability um with the buffer overflow",
    "start": "3076740",
    "end": "3082680"
  },
  {
    "text": "I can actually inject the code which asks the kernel to give me the key",
    "start": "3082680",
    "end": "3088680"
  },
  {
    "text": "well you can store it already stored yeah I got the question now so what you",
    "start": "3088680",
    "end": "3094319"
  },
  {
    "text": "can do is for example you can store the key inside the cruise the key store like",
    "start": "3094319",
    "end": "3100980"
  },
  {
    "text": "an asymmetric key and then prohibit yourself to actually read the",
    "start": "3100980",
    "end": "3106140"
  },
  {
    "text": "cryptographic material only to use the key yes you would still be able like to inject some code which will ask your",
    "start": "3106140",
    "end": "3113880"
  },
  {
    "text": "program to use that key to sign something with it but it will never be",
    "start": "3113880",
    "end": "3119099"
  },
  {
    "text": "able to read the key material back so because it will not be allowed anymore",
    "start": "3119099",
    "end": "3124200"
  },
  {
    "text": "okay but the if if the process is allowed they can ask for the key yes",
    "start": "3124200",
    "end": "3130680"
  },
  {
    "text": "don't know the API of this if you have a read permission on a file you can read a file it's similar to a key",
    "start": "3130680",
    "end": "3137640"
  },
  {
    "text": "foreign",
    "start": "3137640",
    "end": "3139880"
  },
  {
    "text": "yes so so um a continuation of the answer or parts of it so you can use a a functionality",
    "start": "3149240",
    "end": "3157380"
  },
  {
    "text": "in Linux called secomp um BPF to to restrict the system calls that are",
    "start": "3157380",
    "end": "3162720"
  },
  {
    "text": "allowed in the process so that after you've done you know your initial key",
    "start": "3162720",
    "end": "3167760"
  },
  {
    "text": "stuff you can say that after this point in time this process is not allowed to do certain system calls and in that way",
    "start": "3167760",
    "end": "3174359"
  },
  {
    "text": "you can if you're compromised after that then then and and it tries to do one of",
    "start": "3174359",
    "end": "3180720"
  },
  {
    "text": "these sensitive system calls then then your policy that you installed can cause the program to crash for example or not",
    "start": "3180720",
    "end": "3187619"
  },
  {
    "text": "do anything or something like that yeah good call regarding saccomp also what we",
    "start": "3187619",
    "end": "3192900"
  },
  {
    "text": "use we recently adopted the BPF LSM system so instead of writing a policy",
    "start": "3192900",
    "end": "3198839"
  },
  {
    "text": "for each application you can have a system policy written in BPF and you can attach to key Hooks and say and you can",
    "start": "3198839",
    "end": "3206220"
  },
  {
    "text": "like write a BPF script which kind of have your specific logic of who can",
    "start": "3206220",
    "end": "3211800"
  },
  {
    "text": "access what so you can like veto it or or do whatever",
    "start": "3211800",
    "end": "3216980"
  },
  {
    "text": "uh is it in any way related with like uh if you use a desktop Linux system there",
    "start": "3218760",
    "end": "3225240"
  },
  {
    "text": "is also a program called keyring is it in any way related or does it use this",
    "start": "3225240",
    "end": "3230520"
  },
  {
    "text": "system under the hood I don't know to be honest you mean the keyring for in the like a",
    "start": "3230520",
    "end": "3238920"
  },
  {
    "text": "gnome keychain application like gnome desktop is it yeah for example I think gnome desktop uses this functionality",
    "start": "3238920",
    "end": "3245460"
  },
  {
    "text": "for logon keys or something like that like many modern Linux",
    "start": "3245460",
    "end": "3250680"
  },
  {
    "text": "things use this but I'm I'm less aware about like how desktop uses this I",
    "start": "3250680",
    "end": "3256680"
  },
  {
    "text": "mostly know that like disk encryption uses it and like we're kind of like use it a lot",
    "start": "3256680",
    "end": "3263780"
  },
  {
    "text": "so I guess you know the big move here is instead of saying okay we're gonna have unencrypted keys in our you know a",
    "start": "3268440",
    "end": "3275339"
  },
  {
    "text": "runtime in our code the idea is to move those keys into the kernel so that like you mentioned Vault earlier Vault has",
    "start": "3275339",
    "end": "3282119"
  },
  {
    "text": "that sort of offloading the encryption default so here you upload the encryption to the kernel so is that",
    "start": "3282119",
    "end": "3287160"
  },
  {
    "text": "something that's scalable and can you know can be used in production as an ongoing thing so we can say look there's",
    "start": "3287160",
    "end": "3292380"
  },
  {
    "text": "no circumstances which have unencrypted keys in user space It should always be only at the kernel level you should be doing all your encryption decryption",
    "start": "3292380",
    "end": "3299099"
  },
  {
    "text": "through the kernels is that sign that scalable a good question so I recently discovered that the actual",
    "start": "3299099",
    "end": "3307140"
  },
  {
    "text": "RSA code inside the kernel is not that great it's very slow and it didn't even use",
    "start": "3307140",
    "end": "3314280"
  },
  {
    "text": "like if you know crypto Chinese reminder the theorem but we're actually like I fixed that",
    "start": "3314280",
    "end": "3320280"
  },
  {
    "text": "it's Upstream now and like if you have it depends on the architecture and like",
    "start": "3320280",
    "end": "3326220"
  },
  {
    "text": "if you have a really fast and secure crypto code inside the kernel yes it's scalable but",
    "start": "3326220",
    "end": "3333000"
  },
  {
    "text": "colonel the Upstream kernel code needs a little bit of work and Improvement but",
    "start": "3333000",
    "end": "3338099"
  },
  {
    "text": "hopefully it will get better as the adoption increases",
    "start": "3338099",
    "end": "3343619"
  },
  {
    "text": "yes so how do you securely authenticate and authorize the call out program",
    "start": "3344760",
    "end": "3353240"
  },
  {
    "text": "so towards your Cloud HSM for instance so it's up to you how you design that so",
    "start": "3353640",
    "end": "3360480"
  },
  {
    "text": "we specifically were using the TPM itself and trusted Boot and secure boot",
    "start": "3360480",
    "end": "3366359"
  },
  {
    "text": "like all the combination of it so we kind of put the system in a trusted State this program is like more",
    "start": "3366359",
    "end": "3372599"
  },
  {
    "text": "important so for example you can hook into if you know Linux IMA Integrity measurement architecture that it wasn't",
    "start": "3372599",
    "end": "3379319"
  },
  {
    "text": "like for example modified or compromised in any way and",
    "start": "3379319",
    "end": "3385140"
  },
  {
    "text": "then you can use TPM attestation to prove that to the cloud system that all these events happened and then you can",
    "start": "3385140",
    "end": "3391140"
  },
  {
    "text": "proceed but it you only need now one program instead of you have to do it for the whole system",
    "start": "3391140",
    "end": "3398059"
  },
  {
    "text": "anymore going one oh yeah okay",
    "start": "3402780",
    "end": "3407880"
  },
  {
    "text": "still have time no worries when it comes to asymmetric is other",
    "start": "3407880",
    "end": "3414540"
  },
  {
    "text": "other algorithms supported than are they uh no",
    "start": "3414540",
    "end": "3420420"
  },
  {
    "text": "but I've been relentlessly trying to submit a patch for a cdsa",
    "start": "3420420",
    "end": "3425700"
  },
  {
    "text": "but I get ignored but the patches are there so you can download it and it was well tested and works it just somehow",
    "start": "3425700",
    "end": "3432059"
  },
  {
    "text": "the maintainer for that specific part of the code is busy with something and they",
    "start": "3432059",
    "end": "3437160"
  },
  {
    "text": "keep not responding to my emails but the patches are there I think yeah ecdsa",
    "start": "3437160",
    "end": "3442920"
  },
  {
    "text": "should work soon and yeah other crypto code is also like Linux crypto API is",
    "start": "3442920",
    "end": "3448680"
  },
  {
    "text": "kind of very extensible so if you have some C skills you can write your own crypto driver implementing arbitrary",
    "start": "3448680",
    "end": "3454559"
  },
  {
    "text": "algorithm as long as you know how to do that right",
    "start": "3454559",
    "end": "3459900"
  },
  {
    "text": "well we have a crypto driver which uses boring SSL inside the kernel",
    "start": "3462839",
    "end": "3468900"
  },
  {
    "text": "I have to write a blog post about it it's also a very interesting story if any more questions like catch me outside",
    "start": "3468900",
    "end": "3476660"
  },
  {
    "text": "thank you [Applause]",
    "start": "3477599",
    "end": "3482189"
  }
]