[
  {
    "text": "all right so let's get started um I hope you had an awesome lunch and",
    "start": "120",
    "end": "6540"
  },
  {
    "text": "now you're ready to see some typescript beside your c-sharp stuff and that stuff you see all day so my name is Christian",
    "start": "6540",
    "end": "12840"
  },
  {
    "text": "I'm a senior full stack engineer and I'm from Switzerland working in the industry for over a decade now I've started with",
    "start": "12840",
    "end": "20939"
  },
  {
    "text": "Java around 12 years ago so I was always in this in this type language field so I",
    "start": "20939",
    "end": "26939"
  },
  {
    "text": "didn't really touch JavaScript until I've joined a team which also was doing angular just a quick note of hand how",
    "start": "26939",
    "end": "33860"
  },
  {
    "text": "how many of you do typescript nice nice nice cool and how many of you",
    "start": "33860",
    "end": "41280"
  },
  {
    "text": "do angular okay yeah all for you so hopefully I can",
    "start": "41280",
    "end": "46559"
  },
  {
    "text": "show you some things you haven't seen by using typescript because many of you and me too often just use normal just simple",
    "start": "46559",
    "end": "53700"
  },
  {
    "text": "types and not really that crazy stuff typescript has to offer so hopefully I can show you something which you haven't",
    "start": "53700",
    "end": "59219"
  },
  {
    "text": "seen in a while so before we start let's dive deep together into typescript and let's see",
    "start": "59219",
    "end": "65220"
  },
  {
    "text": "this animation it took me almost more time to do this in PowerPoint and all the other stuff in",
    "start": "65220",
    "end": "71700"
  },
  {
    "text": "typescript I will show you today but so appreciate it so okay let's get",
    "start": "71700",
    "end": "77280"
  },
  {
    "text": "started so hopefully you can see this well in the background I will make it a little bit",
    "start": "77280",
    "end": "83340"
  },
  {
    "text": "bigger and now the what I'd like to show you is at the",
    "start": "83340",
    "end": "88439"
  },
  {
    "text": "top right here you can see like a small agenda maybe it's a little bit too small for the background but it's not really that important and we can see what we'll",
    "start": "88439",
    "end": "95640"
  },
  {
    "text": "talk about and the important stuff about this to do app here is it's completely",
    "start": "95640",
    "end": "100979"
  },
  {
    "text": "written in types so this is written by I've created a small plugin which does just check your typescript file and",
    "start": "100979",
    "end": "108240"
  },
  {
    "text": "search for a type called result and just shows what's in this result",
    "start": "108240",
    "end": "114360"
  },
  {
    "text": "and there if you would compile this to dos.ts file there would be no JavaScript code it's just a type file basically but",
    "start": "114360",
    "end": "121799"
  },
  {
    "text": "it's interactive so if I change this for example from a zero to a two then as you can see now this changes to",
    "start": "121799",
    "end": "128520"
  },
  {
    "text": "burning symbol so this old on types and so we'll get started with with map types",
    "start": "128520",
    "end": "133680"
  },
  {
    "text": "so that you can show you a little bit about this so let's say we have an event type here and let's say we have an ad",
    "start": "133680",
    "end": "140220"
  },
  {
    "text": "event and we have a remove event and now let's say we want to have like user",
    "start": "140220",
    "end": "145739"
  },
  {
    "text": "actions with which are also typed so let's say we have like a user actions here and this is of type on event",
    "start": "145739",
    "end": "153540"
  },
  {
    "text": "so now you could for example say well I have an on ad which is just a function",
    "start": "153540",
    "end": "159180"
  },
  {
    "text": "which does nothing in our case and on remove which also does nothing in our case now how can we make this on event",
    "start": "159180",
    "end": "166200"
  },
  {
    "text": "type well we can just say of course well I have this type here on event and then",
    "start": "166200",
    "end": "171420"
  },
  {
    "text": "I just say well I have this on ad which is a function which turns anything and",
    "start": "171420",
    "end": "176819"
  },
  {
    "text": "on remove which is a function and which does basically anything we'd like now the problem here is that events and all",
    "start": "176819",
    "end": "184379"
  },
  {
    "text": "events is not connected with each other so if I for example add here A Move string then everything still compiles",
    "start": "184379",
    "end": "192239"
  },
  {
    "text": "because we do not have the connection between this on event and these events but we would like to like get a compile",
    "start": "192239",
    "end": "198120"
  },
  {
    "text": "time error as soon as we change something in the events so how can we do this we can use so-called mapped type so",
    "start": "198120",
    "end": "205440"
  },
  {
    "text": "first let's create a helper type let's say we have an event Keys here and this is key of events so this type contains",
    "start": "205440",
    "end": "214019"
  },
  {
    "text": "all the property Keys as available strings and so what we can now do is we remove",
    "start": "214019",
    "end": "219840"
  },
  {
    "text": "this these types here and we use a map type and can say well our key has to be",
    "start": "219840",
    "end": "226200"
  },
  {
    "text": "in event keys so basically we are only allowing this event Keys properties as",
    "start": "226200",
    "end": "233040"
  },
  {
    "text": "our own event keys so we then can say again well we have just a function and",
    "start": "233040",
    "end": "238260"
  },
  {
    "text": "as you can see user user actions does no longer compile so we have to change this to be the same",
    "start": "238260",
    "end": "245459"
  },
  {
    "text": "and now even user actions doesn't compile anymore because we need to add this move function",
    "start": "245459",
    "end": "252360"
  },
  {
    "text": "now this is nice but the problem here is that we still don't have this on and the uppercased first letter of our of our ad",
    "start": "252360",
    "end": "259799"
  },
  {
    "text": "remove and move property so how can we do this well we can map our key we can",
    "start": "259799",
    "end": "265020"
  },
  {
    "text": "say s and then use back ticks to use template literals and say well I prefixed this with on and then use like",
    "start": "265020",
    "end": "272639"
  },
  {
    "text": "you would do in JavaScript and you can use like a template syntax and can say I",
    "start": "272639",
    "end": "277680"
  },
  {
    "text": "use key in here and as you can see now you can now use on add on remove and on move and this",
    "start": "277680",
    "end": "284820"
  },
  {
    "text": "now compiles again now we're almost there but still it's not uppercased so what we can do is we can use typescripts",
    "start": "284820",
    "end": "291360"
  },
  {
    "text": "and internal intrinsic functions and we can use capitalize",
    "start": "291360",
    "end": "296699"
  },
  {
    "text": "and what this does is as you can see this along compiles I now have to uppercase this",
    "start": "296699",
    "end": "303440"
  },
  {
    "text": "and what this now does is this is an intrinsic function from typescript compiler so typescript",
    "start": "303900",
    "end": "310380"
  },
  {
    "text": "compiler says well we know what you want to do we don't show how we do it but we do it internally in our compiler so it's",
    "start": "310380",
    "end": "317040"
  },
  {
    "text": "just done you can also use uppercase or lowercase and um there are some other intrinsic functions you can just visit",
    "start": "317040",
    "end": "323280"
  },
  {
    "text": "the typescript website and play it and playground with it so but the cool thing",
    "start": "323280",
    "end": "328560"
  },
  {
    "text": "now what we what we achieved is if I for example now say well I will change an",
    "start": "328560",
    "end": "334080"
  },
  {
    "text": "event from move for example to line then we would have to change this also to it",
    "start": "334080",
    "end": "339120"
  },
  {
    "text": "being online because otherwise it our code will not compile and even if I for",
    "start": "339120",
    "end": "344580"
  },
  {
    "text": "example remove an element here then it would get an exception at compile time I know that you can not on runtime you",
    "start": "344580",
    "end": "351000"
  },
  {
    "text": "won't get an unexpected exception this way so this is just a little introduction to",
    "start": "351000",
    "end": "356580"
  },
  {
    "text": "map types because we will use them later in the talk so now let's talk about template literals",
    "start": "356580",
    "end": "363300"
  },
  {
    "text": "and template riddles let's say we have something which we do each day we want to create like all possible positions on",
    "start": "363300",
    "end": "369660"
  },
  {
    "text": "a chessboard so what we could do we could say well we have A1 and they have A2 and so on but you had would have to",
    "start": "369660",
    "end": "376500"
  },
  {
    "text": "do this 64 times and this is quite a boring task so let's type let typescript do this for you so we can say we have a",
    "start": "376500",
    "end": "383580"
  },
  {
    "text": "chest letter type and this is either a or B some typing you have to do and c and",
    "start": "383580",
    "end": "391380"
  },
  {
    "text": "so on you get it and then you have your chest number type here and this is either one or two or three and so on and",
    "start": "391380",
    "end": "398819"
  },
  {
    "text": "now what we say is we say well we want to create a port we use the spec ticks for template literals then we can say",
    "start": "398819",
    "end": "405060"
  },
  {
    "text": "well I want the first element to be a chest letter the second element to be the chest number",
    "start": "405060",
    "end": "412500"
  },
  {
    "text": "and now what typescript here does to it for us",
    "start": "412500",
    "end": "418680"
  },
  {
    "text": "it creates every possible combination of these of these strings so from A1 to C3",
    "start": "418680",
    "end": "425400"
  },
  {
    "text": "and now you could do this of course you can just add other things and then it will create all the possible permutations of it",
    "start": "425400",
    "end": "431160"
  },
  {
    "text": "so but how can we use this in a more real life scenario so let's say we have",
    "start": "431160",
    "end": "436380"
  },
  {
    "text": "like an rgbcs CSS type and let's say we have like a wrong CSS and this is like RGB",
    "start": "436380",
    "end": "444720"
  },
  {
    "text": "one one for example and there is one Element missing in there because you need these three elements and then you",
    "start": "444720",
    "end": "452039"
  },
  {
    "text": "have a correct CSS and this is RGB one one one",
    "start": "452039",
    "end": "458400"
  },
  {
    "text": "now we say these both are of course rgbcss type",
    "start": "458400",
    "end": "463860"
  },
  {
    "text": "now of course currently it is compiles because it's just an alias for a string now we can change this we can say well",
    "start": "463860",
    "end": "469919"
  },
  {
    "text": "we want this to be a template literal and we can say well it's prefixed with RGB and in there there has to be a",
    "start": "469919",
    "end": "476580"
  },
  {
    "text": "number and another number and the third one and as you can see in our wrong CSS does",
    "start": "476580",
    "end": "483000"
  },
  {
    "text": "no long compile because we have stated that we want this exact pattern in our string so if I now add here of course",
    "start": "483000",
    "end": "490139"
  },
  {
    "text": "another element this now compiles but as soon as for example an a here and it's no longer a number typescript also",
    "start": "490139",
    "end": "496800"
  },
  {
    "text": "recognizes this and says oh well this is not this is not a valid number so I would have to change this for example to string to make this compile again",
    "start": "496800",
    "end": "504000"
  },
  {
    "text": "so we can now combine these two things and let's create like a margin padding",
    "start": "504000",
    "end": "510740"
  },
  {
    "text": "validator so let's say we have a gap type here and this is either margin or",
    "start": "510740",
    "end": "517080"
  },
  {
    "text": "padding and now we have our positions which is either left or bottom or top",
    "start": "517080",
    "end": "526440"
  },
  {
    "text": "or right so now what we can say is we have our Gap CSS which then we can take our more",
    "start": "526440",
    "end": "534300"
  },
  {
    "text": "our Gap type error Gap type and",
    "start": "534300",
    "end": "540240"
  },
  {
    "text": "our positions and now of course this creates margin left top right bottom and padding Left",
    "start": "540240",
    "end": "546240"
  },
  {
    "text": "Right top button now we can go further we can say we have our size type here this is either for example rem or M",
    "start": "546240",
    "end": "553320"
  },
  {
    "text": "or pixel and then we have our size CSS and this is then a number prefix",
    "start": "553320",
    "end": "561060"
  },
  {
    "text": "number prefix and a size type",
    "start": "561060",
    "end": "566519"
  },
  {
    "text": "and now what we can do with this is we can combine these two things and can say well let's create a marching padding",
    "start": "566519",
    "end": "572580"
  },
  {
    "text": "type here and we can use like map types again we can say well in the key has to",
    "start": "572580",
    "end": "578459"
  },
  {
    "text": "be in to be in gap CSS and the value is size",
    "start": "578459",
    "end": "583560"
  },
  {
    "text": "CSS and now if we create here our Merchant object with Merchant padding",
    "start": "583560",
    "end": "590640"
  },
  {
    "text": "we now see that if we check for what we have here in our Auto completion we have margin bottom left right top and as",
    "start": "590640",
    "end": "598920"
  },
  {
    "text": "values only these valid types are allowed so if I for example would use one ram instant one ram then we I would",
    "start": "598920",
    "end": "605700"
  },
  {
    "text": "get an error if I change this back then this works but here as we can see a typescript is not completely satisfied",
    "start": "605700",
    "end": "611820"
  },
  {
    "text": "because we said well we want like an object with all the possible margins and paddings specified in there so to fix",
    "start": "611820",
    "end": "618240"
  },
  {
    "text": "this we add a question mark in here and we tell typescript we only want to add certain elements we want to decide",
    "start": "618240",
    "end": "623940"
  },
  {
    "text": "ourselves which elements we want to to add so this is about template literals so",
    "start": "623940",
    "end": "631140"
  },
  {
    "text": "let's talk about a type in typescript which many of you maybe already have",
    "start": "631140",
    "end": "636899"
  },
  {
    "text": "seen but maybe not have used that much it's the never type so let's say we have",
    "start": "636899",
    "end": "642120"
  },
  {
    "text": "in hello object here and it's called hello NDC now of course what we could do",
    "start": "642120",
    "end": "648240"
  },
  {
    "text": "is we can say implicitly this hello is a string now we can explicitly say this is",
    "start": "648240",
    "end": "653579"
  },
  {
    "text": "a string this works but if we change this to never of course we can error",
    "start": "653579",
    "end": "659100"
  },
  {
    "text": "because string is not assignable to type never well if we get such an error we as typescript programs know what to do we",
    "start": "659100",
    "end": "665279"
  },
  {
    "text": "say as any and it's fixed but as you can see something crazy happened it's not",
    "start": "665279",
    "end": "670680"
  },
  {
    "text": "fixed because you can't even assign any to never you can't assign anything to",
    "start": "670680",
    "end": "676740"
  },
  {
    "text": "never which is not never itself so if I would change this to never please don't do this then it would work but that's of course",
    "start": "676740",
    "end": "684959"
  },
  {
    "text": "the case so why is this helpful before we go deeper into this type I have to do quick sign over about conditional types",
    "start": "684959",
    "end": "692040"
  },
  {
    "text": "so what are conditional times let's say we have a type Boolean or else and we pass it in a generic type so",
    "start": "692040",
    "end": "699600"
  },
  {
    "text": "something we can which is which is generic which can change during during runtime so we can then say well in case",
    "start": "699600",
    "end": "706560"
  },
  {
    "text": "of T being a Boolean so if T is is the type Boolean not exactly but it's like",
    "start": "706560",
    "end": "713160"
  },
  {
    "text": "it contains this then in this case we say well we return the Boolean let's",
    "start": "713160",
    "end": "718200"
  },
  {
    "text": "otherwise just return a string now to test this we can just say Boolean or else and",
    "start": "718200",
    "end": "724320"
  },
  {
    "text": "let's just return the Boolean in there and of course",
    "start": "724320",
    "end": "729420"
  },
  {
    "text": "there's no magic it will return Boolean if I change this for example to number then it will return a string because",
    "start": "729420",
    "end": "736740"
  },
  {
    "text": "it's not a Boolean so this can we can use to use our never type so let's say we have a function here",
    "start": "736740",
    "end": "744420"
  },
  {
    "text": "fail on empty string and we pass it in an input",
    "start": "744420",
    "end": "749640"
  },
  {
    "text": "and we want it to fail if the input length is not set",
    "start": "749640",
    "end": "757500"
  },
  {
    "text": "and we say input is empty now this of course throws an error at runtime and I",
    "start": "757500",
    "end": "763560"
  },
  {
    "text": "also want to to emphasize that we are using typescript but if we if we",
    "start": "763560",
    "end": "769079"
  },
  {
    "text": "compile this this all the types will go away so for at runtime we don't have these types so it's always if you for",
    "start": "769079",
    "end": "774540"
  },
  {
    "text": "example write a library and you think maybe someone who uses JavaScript will use my library always make sure that you",
    "start": "774540",
    "end": "780060"
  },
  {
    "text": "also do some runtime checks on the important parts of your of your library to make it easier for the user to or for",
    "start": "780060",
    "end": "786060"
  },
  {
    "text": "the programmer to use your library so that's why it's we will throw an error",
    "start": "786060",
    "end": "791339"
  },
  {
    "text": "at runtime but the sad part here is fail an empty string of course",
    "start": "791339",
    "end": "796500"
  },
  {
    "text": "takes this empty string and doesn't yell at me at compile time even if I clearly State I don't want this empty string so",
    "start": "796500",
    "end": "803279"
  },
  {
    "text": "how can we fix this we can use these conditional types with never we can say we create the type no empty string we",
    "start": "803279",
    "end": "810540"
  },
  {
    "text": "pass it in a t and say well this has to be some kind of string we don't care what string but it has to be a string",
    "start": "810540",
    "end": "816959"
  },
  {
    "text": "and then we say well if T extends an empty string so if T is an empty string",
    "start": "816959",
    "end": "822660"
  },
  {
    "text": "and has nothing in it in this case return never wise return t and now of course nothing",
    "start": "822660",
    "end": "829740"
  },
  {
    "text": "has changed because we haven't used this in our failed on empty string so let's use this let's put this in here say this",
    "start": "829740",
    "end": "835740"
  },
  {
    "text": "is a string here and instead of a string as the input it's now a no empty string",
    "start": "835740",
    "end": "842040"
  },
  {
    "text": "with this t and now something interesting happened you maybe already have seen it and this",
    "start": "842040",
    "end": "848339"
  },
  {
    "text": "code on line 11 doesn't compile anymore because what it tells you is you can't assign string to never so what did we",
    "start": "848339",
    "end": "855120"
  },
  {
    "text": "really do here we put in here this empty string this is just this t",
    "start": "855120",
    "end": "860279"
  },
  {
    "text": "and because T here is an empty string it returns never so what we are basically trying to do here is trying to have this",
    "start": "860279",
    "end": "867300"
  },
  {
    "text": "input here of type never and try to assign an empty string to it and this is of course not allowed so this way you",
    "start": "867300",
    "end": "873420"
  },
  {
    "text": "can create like types which do not allow even primitive types to be in a certain",
    "start": "873420",
    "end": "878700"
  },
  {
    "text": "pattern so this is just a little simple introduction how you can use this never",
    "start": "878700",
    "end": "885000"
  },
  {
    "text": "type to like narrow down your your types which kind of strings",
    "start": "885000",
    "end": "890760"
  },
  {
    "text": "you want to allow in it so but let's go further and a little bit more in a real",
    "start": "890760",
    "end": "895980"
  },
  {
    "text": "life scenario we say we have locations and let's say we have suric and we have Oslo",
    "start": "895980",
    "end": "901620"
  },
  {
    "text": "so let's say we have a function get country for locations and we have our",
    "start": "901620",
    "end": "907019"
  },
  {
    "text": "location which we put in here and we return a string now we want for each of our location the corresponding country",
    "start": "907019",
    "end": "913320"
  },
  {
    "text": "now let's use a switch statement you could also use if else this works fine too and we can then use location here",
    "start": "913320",
    "end": "920519"
  },
  {
    "text": "and we can say well in case of cyric we return",
    "start": "920519",
    "end": "926820"
  },
  {
    "text": "Switzerland So currently now typescript says well",
    "start": "926820",
    "end": "932579"
  },
  {
    "text": "you have only covered this one branch but there is this Oslo possibility and for this you would just return undefined",
    "start": "932579",
    "end": "938339"
  },
  {
    "text": "because the switch case does not cover this this Oslo case so of course we will",
    "start": "938339",
    "end": "943920"
  },
  {
    "text": "fix this we will say Oslo is in here and we turn nor way",
    "start": "943920",
    "end": "949740"
  },
  {
    "text": "and now typescript is satisfied so but the problem is again we don't have to runtime safety so if I say get country",
    "start": "949740",
    "end": "955980"
  },
  {
    "text": "for locations and I pass in anything as any because that's basically what you do if",
    "start": "955980",
    "end": "961920"
  },
  {
    "text": "you work only with JavaScript everything is any because the types will get stripped away so the problem is you can",
    "start": "961920",
    "end": "968339"
  },
  {
    "text": "pass in anything you'd like so to have the runtime safety what you do is you say well I have a default clause and you",
    "start": "968339",
    "end": "975360"
  },
  {
    "text": "say Throw new error and you say well the location is not",
    "start": "975360",
    "end": "981420"
  },
  {
    "text": "known but now something now we have fixed this runtime problem but the problem now is",
    "start": "981420",
    "end": "987060"
  },
  {
    "text": "well if I add here let's say London now if I call this with London I don't",
    "start": "987060",
    "end": "994980"
  },
  {
    "text": "get in I don't get the thing I'd like because I've forgotten to add this in my switch case and it will throw an error",
    "start": "994980",
    "end": "1001160"
  },
  {
    "text": "at runtime but I don't want this I want that at compile time typescript tells me hey you have forgotten to add this here",
    "start": "1001160",
    "end": "1006500"
  },
  {
    "text": "I want to type script to help me as much as possible so how can we fix this how we count how can we have both well",
    "start": "1006500",
    "end": "1013880"
  },
  {
    "text": "we can say we add a new variable here and can call it whatever we want I call this exhaustive and then the important",
    "start": "1013880",
    "end": "1021320"
  },
  {
    "text": "part we assign never the never type to it and then we try to assign location to",
    "start": "1021320",
    "end": "1026900"
  },
  {
    "text": "it and now we get an error why because typescript knows well you will if this is London case is not covered in the",
    "start": "1026900",
    "end": "1033500"
  },
  {
    "text": "switch in this switch case and it will go into the default and then you will try to assign London to never which is",
    "start": "1033500",
    "end": "1040040"
  },
  {
    "text": "not allowed but the cool thing now is as soon as I now say okay I have to add London here",
    "start": "1040040",
    "end": "1047260"
  },
  {
    "text": "then this error goes away so this way you have to compile time and the runtime safety because you have to cover all the",
    "start": "1048860",
    "end": "1054679"
  },
  {
    "text": "branches otherwise typescripts the the typescript code will not compile at all so this is how you can use the never",
    "start": "1054679",
    "end": "1060740"
  },
  {
    "text": "type like to also have like this exhaustive switches without having to lose the runtime the runtime checks and",
    "start": "1060740",
    "end": "1069080"
  },
  {
    "text": "still have the compile time checks for it lender says well",
    "start": "1069080",
    "end": "1076880"
  },
  {
    "text": "you are never you are never using it you're never using it so well you maybe",
    "start": "1076880",
    "end": "1081980"
  },
  {
    "text": "would have to go like this and say Yes Lind I don't care care or something like this",
    "start": "1081980",
    "end": "1088460"
  },
  {
    "text": "but I don't really know yeah but I think you what you could also do is wrap this in a function to reuse it but I think we",
    "start": "1088460",
    "end": "1095000"
  },
  {
    "text": "can live with this I I don't see this lender errors anymore there or just the way if it's not red on",
    "start": "1095000",
    "end": "1101299"
  },
  {
    "text": "the line I don't see it so okay um let's now go to a keyword to the",
    "start": "1101299",
    "end": "1107780"
  },
  {
    "text": "infer keyword so what can the infer keyword do for us",
    "start": "1107780",
    "end": "1114559"
  },
  {
    "text": "let's say we have a really complex function I don't try to explain what it does because it's",
    "start": "1114559",
    "end": "1120200"
  },
  {
    "text": "I don't even know what it does so but the important part here is that we have a function which we can work with so and",
    "start": "1120200",
    "end": "1126679"
  },
  {
    "text": "because this is such a complex function I'd like to have just the return type of this function so let's say we have our",
    "start": "1126679",
    "end": "1132500"
  },
  {
    "text": "add return and then we can use a utility type which typescript itself provides as well called return type",
    "start": "1132500",
    "end": "1139340"
  },
  {
    "text": "and this is a generic type so we can pass it in that we have to pass it in the type of a function so what we do",
    "start": "1139340",
    "end": "1146000"
  },
  {
    "text": "type of this ad here and what this now does here is",
    "start": "1146000",
    "end": "1151460"
  },
  {
    "text": "it returns this number because this is the return type if I change this to string then it returns as the string so",
    "start": "1151460",
    "end": "1158660"
  },
  {
    "text": "but how does typescript do this well let's create this return type ourselves my return type",
    "start": "1158660",
    "end": "1165260"
  },
  {
    "text": "and then let's say we pass it in a t we don't care what it is and then we say well if T extends a function type",
    "start": "1165260",
    "end": "1173240"
  },
  {
    "text": "basically if this is a function with any arguments and which returns anything then for the start just return any",
    "start": "1173240",
    "end": "1180080"
  },
  {
    "text": "otherwise return never because we're not interested in it so but now if we change",
    "start": "1180080",
    "end": "1185419"
  },
  {
    "text": "this to my return type it's got much worse because we just got back any we don't get the real type back",
    "start": "1185419",
    "end": "1192559"
  },
  {
    "text": "why because of course typescript doesn't magically know what we want to get returned from this from this function so",
    "start": "1192559",
    "end": "1198380"
  },
  {
    "text": "how can we fix this we can use the infer keyword we can say well typescript if",
    "start": "1198380",
    "end": "1203900"
  },
  {
    "text": "this T extends a function type then please take the element at this position",
    "start": "1203900",
    "end": "1210080"
  },
  {
    "text": "here and save it in the in a variable let's call it just R for return type and then",
    "start": "1210080",
    "end": "1216919"
  },
  {
    "text": "please return it and as you can see now now we get the number back so",
    "start": "1216919",
    "end": "1222200"
  },
  {
    "text": "we can change this again to string it will get us the string back so this is how we can use the infer type to get",
    "start": "1222200",
    "end": "1228260"
  },
  {
    "text": "certain elements of your types and out and create new types from it you can call it like Advanced map types",
    "start": "1228260",
    "end": "1234559"
  },
  {
    "text": "basically so but how can you use this in in other in other areas so let's say you want to",
    "start": "1234559",
    "end": "1242120"
  },
  {
    "text": "do recursion so we are here just on my local machine not in in AWS or serverless so it can't get expensive",
    "start": "1242120",
    "end": "1248600"
  },
  {
    "text": "really fast so let's say we have a type here and let's say we want to return",
    "start": "1248600",
    "end": "1256360"
  },
  {
    "text": "promise and we have a promise inside a promise inside a promise and there let's say",
    "start": "1256520",
    "end": "1262880"
  },
  {
    "text": "there is gold in there and we want to have the gold so the problem is of course this is wrapped in",
    "start": "1262880",
    "end": "1269720"
  },
  {
    "text": "many layers of promises so but typescript knows that this is a this is",
    "start": "1269720",
    "end": "1276080"
  },
  {
    "text": "a problem that happens really often so how can we fix this well we can use the awaited keyword of typescript what it",
    "start": "1276080",
    "end": "1283760"
  },
  {
    "text": "does is it goes recursively through the through the promises and as soon as it",
    "start": "1283760",
    "end": "1288919"
  },
  {
    "text": "finds something which isn't a promise it just Returns the the type it found so let's do this ourselves let's do this",
    "start": "1288919",
    "end": "1295460"
  },
  {
    "text": "with arrays let's say we have an unwrapped array here we pass it in any type we want and we say well if as long",
    "start": "1295460",
    "end": "1301820"
  },
  {
    "text": "as this type is an array so basically as long as this T extends array please give",
    "start": "1301820",
    "end": "1308720"
  },
  {
    "text": "me this inner type so this generic type of this array and just call this unwrap",
    "start": "1308720",
    "end": "1314179"
  },
  {
    "text": "array again because we want to do this as long as we don't find an array type so we say if this extends array we just",
    "start": "1314179",
    "end": "1322940"
  },
  {
    "text": "call unwrap array again with this inner type otherwise we return just the type",
    "start": "1322940",
    "end": "1329240"
  },
  {
    "text": "because as soon as he as we don't find anything which is an array we return the type so let's say we have our unwrapped array",
    "start": "1329240",
    "end": "1336500"
  },
  {
    "text": "here and we have an array array array",
    "start": "1336500",
    "end": "1342620"
  },
  {
    "text": "and there is called again and then we want to like unwrap this of course if we",
    "start": "1342620",
    "end": "1348500"
  },
  {
    "text": "check this array as we can see this like nested array so but if we use unwrap array on it",
    "start": "1348500",
    "end": "1358039"
  },
  {
    "text": "as you can see now we get the type back because we go recursively through our",
    "start": "1358039",
    "end": "1363740"
  },
  {
    "text": "our type hierarchy and take the first element we found interesting so this is like the simple",
    "start": "1363740",
    "end": "1369980"
  },
  {
    "text": "part of recursion because we don't want like to build an object or like build a type ourselves so let's do it let's do a",
    "start": "1369980",
    "end": "1377539"
  },
  {
    "text": "little bit more complex stuff let's say we have an RGB Tuple here and we say",
    "start": "1377539",
    "end": "1383059"
  },
  {
    "text": "here we have this pupil is a num a number two pull with three elements",
    "start": "1383059",
    "end": "1389059"
  },
  {
    "text": "so for all the ones who haven't used me with with tuples it's just like a fixed length array so if I say I have a heaven",
    "start": "1389059",
    "end": "1396980"
  },
  {
    "text": "an object here which I say this is of type RGB Tuple and I say this is one one",
    "start": "1396980",
    "end": "1402020"
  },
  {
    "text": "one this compiles fine if I remove something then this will throw one error here because",
    "start": "1402020",
    "end": "1408620"
  },
  {
    "text": "um there are not three elements in it so just a quick side note if you use things like these the problem is in typescript",
    "start": "1408620",
    "end": "1415580"
  },
  {
    "text": "you can always just use push or pop on it even if it's a fixed length array so you can still change the amount of",
    "start": "1415580",
    "end": "1423140"
  },
  {
    "text": "filaments in there so to fix this just add read only to it",
    "start": "1423140",
    "end": "1428360"
  },
  {
    "text": "and now push or pop is no longer available just a quick side note so",
    "start": "1428360",
    "end": "1434059"
  },
  {
    "text": "now it's it's cool we have done this we've done this manually with three elements but let's say you are working with like Legacy software or something",
    "start": "1434059",
    "end": "1440539"
  },
  {
    "text": "like this and let's just say you have like something which gives you back an array with 54 elements in it and you",
    "start": "1440539",
    "end": "1447140"
  },
  {
    "text": "want to type this so let's say you could write all the numbers yourself in there",
    "start": "1447140",
    "end": "1452780"
  },
  {
    "text": "but it's quite repetitive and you have to check how many you have really in there and so on so wouldn't it be cool",
    "start": "1452780",
    "end": "1457940"
  },
  {
    "text": "if typescript could do this for us if typescript could say well I have a tupu I want three elements and I want to only",
    "start": "1457940",
    "end": "1465020"
  },
  {
    "text": "allow numbers in it so how could we do this well typescript sadly doesn't support this but we can do this",
    "start": "1465020",
    "end": "1470720"
  },
  {
    "text": "ourselves so how would we do this in a normal a normal pseudocode or in",
    "start": "1470720",
    "end": "1476299"
  },
  {
    "text": "JavaScript or in any other language we would create like an empty array and then loop as long over an index as long",
    "start": "1476299",
    "end": "1482539"
  },
  {
    "text": "as this the length of the array hasn't met the length of the which we put in which we want the array to have this is",
    "start": "1482539",
    "end": "1489620"
  },
  {
    "text": "exactly what we can do in in these types we can say we have our Tuple type here the first element is the length we want",
    "start": "1489620",
    "end": "1496700"
  },
  {
    "text": "it to have so it has to be a number the second element is the type of the Tuple so here it's just the numbers we want to",
    "start": "1496700",
    "end": "1503659"
  },
  {
    "text": "have in there and the third one is like an accumulator like an array where we",
    "start": "1503659",
    "end": "1509059"
  },
  {
    "text": "store all our types so we say this has to extend Tuple type",
    "start": "1509059",
    "end": "1515600"
  },
  {
    "text": "array so because this way we tell typescript you can only store elements only types",
    "start": "1515600",
    "end": "1522559"
  },
  {
    "text": "of this type in there so we can then now close it and we can say well to start with just return any Now typescript",
    "start": "1522559",
    "end": "1529640"
  },
  {
    "text": "isn't satisfied here because it says well you have to pass in this empty array to start with well we can fix this",
    "start": "1529640",
    "end": "1536059"
  },
  {
    "text": "and we can say no if we don't pass in anything just add an empty array so just",
    "start": "1536059",
    "end": "1541580"
  },
  {
    "text": "start off with an empty array so what we now could do",
    "start": "1541580",
    "end": "1547279"
  },
  {
    "text": "what we now could do is we could say instead of returning any we first say what's what is our breakout condition so",
    "start": "1547279",
    "end": "1554120"
  },
  {
    "text": "we say well our accumulator here if the length of this array",
    "start": "1554120",
    "end": "1559580"
  },
  {
    "text": "is the length we have here of of the the length we passed in if this is the same",
    "start": "1559580",
    "end": "1564860"
  },
  {
    "text": "just return every return the accumulated value otherwise if it hasn't reached",
    "start": "1564860",
    "end": "1571100"
  },
  {
    "text": "this length we will just call it again so we will go in there let's put this on",
    "start": "1571100",
    "end": "1577159"
  },
  {
    "text": "new lines and we will go and call Tuple again and we just will",
    "start": "1577159",
    "end": "1582740"
  },
  {
    "text": "call it with the length and with the Tuple type and now we need to add an",
    "start": "1582740",
    "end": "1587900"
  },
  {
    "text": "element to our to our fixed length array so how do we do this like you would do in any immutable language we create a",
    "start": "1587900",
    "end": "1594500"
  },
  {
    "text": "new array spread our existing elements into it and add a tuple type to it",
    "start": "1594500",
    "end": "1603380"
  },
  {
    "text": "and that's already it so we can now see what has this done this is now exactly",
    "start": "1603380",
    "end": "1610220"
  },
  {
    "text": "the same as before with three elements and I now can but go and say well I want to change this to 10.",
    "start": "1610220",
    "end": "1616640"
  },
  {
    "text": "and this will now create a tuple type with 10 elements you can also say you want like on not just straight numbers",
    "start": "1616640",
    "end": "1623000"
  },
  {
    "text": "on but only strings so if you say I want here an element with a one which is a string I can then say Okay I want one",
    "start": "1623000",
    "end": "1630200"
  },
  {
    "text": "with three elements and I want a number or a string and now this works again so",
    "start": "1630200",
    "end": "1636260"
  },
  {
    "text": "you have like a generic type which you can use to create your own tuples or anything you'd like and you can also say",
    "start": "1636260",
    "end": "1643240"
  },
  {
    "text": "this as far as 999 because at a thousand",
    "start": "1643240",
    "end": "1648320"
  },
  {
    "text": "typescript says well that's enough we don't want you to do this anymore because they have like a hard stop for",
    "start": "1648320",
    "end": "1654320"
  },
  {
    "text": "recursion at 999 recursions and prior it was around 40 so they put the number up",
    "start": "1654320",
    "end": "1660740"
  },
  {
    "text": "quite a bit but I think you hardly even need to use this",
    "start": "1660740",
    "end": "1666200"
  },
  {
    "text": "all right so this is how you can use like recursion to build your own types so",
    "start": "1666200",
    "end": "1673039"
  },
  {
    "text": "before I end this this recursion I'd like to ask um How am from the one of",
    "start": "1673039",
    "end": "1678620"
  },
  {
    "text": "you who have worked with angular how many of you have worked with reactive forms prior to where they were typed",
    "start": "1678620",
    "end": "1685279"
  },
  {
    "text": "how many of you okay just some of you okay so for the other ones I think it's also",
    "start": "1685279",
    "end": "1690620"
  },
  {
    "text": "interesting even if you did not have the the pleasure to work with this before they were typed so let's say you have",
    "start": "1690620",
    "end": "1696740"
  },
  {
    "text": "you have a form you have like your form in your in your application and this is an example form and let's",
    "start": "1696740",
    "end": "1703520"
  },
  {
    "text": "say you have a first name which is a string",
    "start": "1703520",
    "end": "1707860"
  },
  {
    "text": "and a last name which is string and now you have like a nested object like you have a street in there which has a",
    "start": "1708980",
    "end": "1715820"
  },
  {
    "text": "street name name which is a string and you have also",
    "start": "1715820",
    "end": "1722720"
  },
  {
    "text": "Street number which is a string now you could create this in typescript and then",
    "start": "1722720",
    "end": "1728000"
  },
  {
    "text": "connect this to your HTML and if you'd like if you wanted to access like a form control like for example this street",
    "start": "1728000",
    "end": "1733940"
  },
  {
    "text": "name here then you could do the following you could say you have your let's call this street name control and",
    "start": "1733940",
    "end": "1741020"
  },
  {
    "text": "then you could access this form group you've created and then you could say well I have I use get and I then have",
    "start": "1741020",
    "end": "1747260"
  },
  {
    "text": "like a string array where I can say well I want the address and in there I want the street",
    "start": "1747260",
    "end": "1753559"
  },
  {
    "text": "and in there I want the street name now the problem with this of course was that this was not typed at all so if I",
    "start": "1753559",
    "end": "1760700"
  },
  {
    "text": "changed anything here in my street if I change this to Street one then there would no be no compile time error but",
    "start": "1760700",
    "end": "1767120"
  },
  {
    "text": "only a runtime error so it could be that sometimes later in your running code you get an error like I can't find this form",
    "start": "1767120",
    "end": "1773659"
  },
  {
    "text": "control because you did not get the result um at compile time so we had to fix this",
    "start": "1773659",
    "end": "1779600"
  },
  {
    "text": "so what I did was I created like a type for it so",
    "start": "1779600",
    "end": "1784700"
  },
  {
    "text": "and this type look like this so let's say we have a type here path and we pass",
    "start": "1784700",
    "end": "1789799"
  },
  {
    "text": "it in a t and what this now for example would give back if we pass it in form example form it should give it should",
    "start": "1789799",
    "end": "1797779"
  },
  {
    "text": "have given us back all the possible paths through our through our object so",
    "start": "1797779",
    "end": "1803299"
  },
  {
    "text": "for example it should give us back first name and then last name and then also address",
    "start": "1803299",
    "end": "1809659"
  },
  {
    "text": "but also address and Street and so on so every possible allowed path that we only",
    "start": "1809659",
    "end": "1815720"
  },
  {
    "text": "get the value paths so how do did we do this well this is now maybe a little bit",
    "start": "1815720",
    "end": "1821240"
  },
  {
    "text": "more complicated because even of um especially after lunch where everyone is a little bit relaxing so but the all the",
    "start": "1821240",
    "end": "1829520"
  },
  {
    "text": "code is on my GitHub which I will show you at the end of the talk so you can go there tomorrow or in a week or never if",
    "start": "1829520",
    "end": "1835580"
  },
  {
    "text": "you don't like it and then just check it out so let's pass it in our tea and what",
    "start": "1835580",
    "end": "1841279"
  },
  {
    "text": "do we really want to do here like we want to iterate um recursively over our property keys",
    "start": "1841279",
    "end": "1846679"
  },
  {
    "text": "and if we find an object we want to go deeper into it and then just like build",
    "start": "1846679",
    "end": "1851960"
  },
  {
    "text": "our our our array which um which way and then we have like a path which looks",
    "start": "1851960",
    "end": "1857000"
  },
  {
    "text": "like a path so how do we do this well we say if T extends object in this case we are interested in it",
    "start": "1857000",
    "end": "1864320"
  },
  {
    "text": "otherwise we are not interested in it and in this case we create like a mapped",
    "start": "1864320",
    "end": "1869659"
  },
  {
    "text": "type we just Loop over our key",
    "start": "1869659",
    "end": "1875000"
  },
  {
    "text": "we say has to be in key of T basically this is just means that we Loop over the",
    "start": "1875000",
    "end": "1880760"
  },
  {
    "text": "key in our current object and now for the value we say well we want to allow",
    "start": "1880760",
    "end": "1886580"
  },
  {
    "text": "the key so basically let's say we are at this at this address here we say the key",
    "start": "1886580",
    "end": "1892520"
  },
  {
    "text": "now is the address so we put the address as an as the only element in this allowed in this in this fixed length",
    "start": "1892520",
    "end": "1899600"
  },
  {
    "text": "array in this two pool and then we but we also what we also want to do we want to like dive deeper into our object and",
    "start": "1899600",
    "end": "1907880"
  },
  {
    "text": "go recursively into it and we can then say yeah well we want to allow this key key being the address but also",
    "start": "1907880",
    "end": "1914000"
  },
  {
    "text": "everything we found later so we then can just call Path again",
    "start": "1914000",
    "end": "1919279"
  },
  {
    "text": "and what do we have to pass into into our recursive call well if we are here",
    "start": "1919279",
    "end": "1924440"
  },
  {
    "text": "at this address we basically want to Loop through this object so we can just",
    "start": "1924440",
    "end": "1929779"
  },
  {
    "text": "say well if T is our address we can say well I want to like access the object at this position so we",
    "start": "1929779",
    "end": "1936980"
  },
  {
    "text": "say t and of K so we like dive go one",
    "start": "1936980",
    "end": "1943220"
  },
  {
    "text": "recursion recursive call deeper into it and now typescript isn't really satisfied because it tells us well yeah",
    "start": "1943220",
    "end": "1949460"
  },
  {
    "text": "rest type must be an array but let's just not think about this let's just say we have the type and let's check what",
    "start": "1949460",
    "end": "1956059"
  },
  {
    "text": "this type does we have our path and we have our example form and what does this really return to us",
    "start": "1956059",
    "end": "1964399"
  },
  {
    "text": "as you can see this returns an object still with the key being a first the",
    "start": "1964399",
    "end": "1969799"
  },
  {
    "text": "first name of the value then being like this array with one element and then here at address something strange",
    "start": "1969799",
    "end": "1975620"
  },
  {
    "text": "happens because we have this address here and then this address with this any here which isn't really what we want",
    "start": "1975620",
    "end": "1981200"
  },
  {
    "text": "and now we do some really black magic and we can now say we are really not",
    "start": "1981200",
    "end": "1987440"
  },
  {
    "text": "interested in the keys we want to use only the values and after we've done everything like we recursively called",
    "start": "1987440",
    "end": "1993500"
  },
  {
    "text": "everything we can now flatten out everything we've created in our in our values by using key off",
    "start": "1993500",
    "end": "2001120"
  },
  {
    "text": "tea and now we got every possible path in our in our",
    "start": "2001120",
    "end": "2007299"
  },
  {
    "text": "object returned as a union type so what this now brings us what this now gives",
    "start": "2007299",
    "end": "2012700"
  },
  {
    "text": "to us is we can just re comment this out and remove the comment and then we can",
    "start": "2012700",
    "end": "2019179"
  },
  {
    "text": "say well this is a path from an example form",
    "start": "2019179",
    "end": "2024640"
  },
  {
    "text": "and if I now for example change here the street to one then this no longer",
    "start": "2024640",
    "end": "2031299"
  },
  {
    "text": "compiles because typescript tells me well this form you have here doesn't have a path which has this street in it",
    "start": "2031299",
    "end": "2037480"
  },
  {
    "text": "so if you now have for example a huge form and you change one or two and parts",
    "start": "2037480",
    "end": "2043059"
  },
  {
    "text": "of it then we'll see in your code first where you really use it and second if this really if the if the path is still",
    "start": "2043059",
    "end": "2049599"
  },
  {
    "text": "working at compile time so you do not have to to worry about and do like full text search and things like this anymore",
    "start": "2049599",
    "end": "2057099"
  },
  {
    "text": "all right so that's how recursions recursion can can be done and the next",
    "start": "2057099",
    "end": "2064300"
  },
  {
    "text": "thing I'd also wanted to show you is branded types and for me this that's why",
    "start": "2064300",
    "end": "2069398"
  },
  {
    "text": "I put it at the end of my talk I really find this extremely powerful also used in in any project even if it's really",
    "start": "2069399",
    "end": "2076240"
  },
  {
    "text": "small so let's say we have an email here and this email is let's call him",
    "start": "2076240",
    "end": "2085378"
  },
  {
    "text": "type dot rocks so um let's say you want to send an email and you use a function here send email",
    "start": "2085960",
    "end": "2092858"
  },
  {
    "text": "you have an input here and now the problem is this input here is just a string because you don't want to pass",
    "start": "2092859",
    "end": "2099099"
  },
  {
    "text": "around like a wrapped object because for example in domain driven design or in in many books there is like yeah you can",
    "start": "2099099",
    "end": "2105099"
  },
  {
    "text": "like create like these these these simple these simple objects which for",
    "start": "2105099",
    "end": "2110260"
  },
  {
    "text": "example are then called email address and you know everywhere that this is an email address but often you then have to",
    "start": "2110260",
    "end": "2115540"
  },
  {
    "text": "like unwrap this object to work with it so it has three types we could do is",
    "start": "2115540",
    "end": "2121000"
  },
  {
    "text": "much easier so let's say how can we fix this send email that we can't pass it",
    "start": "2121000",
    "end": "2126700"
  },
  {
    "text": "anything we'd like well we can have like a function and let's call this is email",
    "start": "2126700",
    "end": "2132700"
  },
  {
    "text": "valid and in there we have like a string and",
    "start": "2132700",
    "end": "2138760"
  },
  {
    "text": "then what we do is we return a Boolean if of course if this is valid or not now I could go to stack Overflow or ask chat",
    "start": "2138760",
    "end": "2145240"
  },
  {
    "text": "GPT for like awesome regex for for email but it will also just catch around 90 of",
    "start": "2145240",
    "end": "2150579"
  },
  {
    "text": "of the stuff so I will do a much much better thing I will say and this is much better I say includes and then I add an",
    "start": "2150579",
    "end": "2157660"
  },
  {
    "text": "at sign here and then I'm satisfied so this will work for you put this in production we don't have an error so as",
    "start": "2157660",
    "end": "2164440"
  },
  {
    "text": "you can now can see we say if is email valid we have this email and then we say",
    "start": "2164440",
    "end": "2171040"
  },
  {
    "text": "send email email well the problem is this hasn't given us anything because of course you can just",
    "start": "2171040",
    "end": "2177640"
  },
  {
    "text": "call the send email address and send email wherever you want because you don't have to wrap this so how can we",
    "start": "2177640",
    "end": "2184359"
  },
  {
    "text": "fix this well start easy and let's say we have a valid email type here and let's say this is just an alias for a",
    "start": "2184359",
    "end": "2190300"
  },
  {
    "text": "string nothing more currently so where do we really only want valid emails so",
    "start": "2190300",
    "end": "2195760"
  },
  {
    "text": "we want it here and now this is email valid function should not return a Boolean but what it",
    "start": "2195760",
    "end": "2202780"
  },
  {
    "text": "should return instead is a type card what is a type card type card is simply we tell typescript listen this is not",
    "start": "2202780",
    "end": "2209380"
  },
  {
    "text": "only a string but we can then say well this input is valid email",
    "start": "2209380",
    "end": "2216640"
  },
  {
    "text": "so we can like narrow the type down but now as you can see everything still compiles so it's not has not really",
    "start": "2216640",
    "end": "2222579"
  },
  {
    "text": "given us anything because typescript knows yeah well valid email is just an 80s for a string so there is there's",
    "start": "2222579",
    "end": "2229180"
  },
  {
    "text": "nothing nothing to do with this type card so and now the the magic happens and we can say well this is not just a",
    "start": "2229180",
    "end": "2235660"
  },
  {
    "text": "string this is also has also a property in it and let's call",
    "start": "2235660",
    "end": "2242740"
  },
  {
    "text": "this property brand you can call this anything you'd like it's not really important I just call this brand so that",
    "start": "2242740",
    "end": "2248380"
  },
  {
    "text": "I know well um this is some something I shouldn't shouldn't touch because it's from typescript and then I say well the value",
    "start": "2248380",
    "end": "2255099"
  },
  {
    "text": "here let's call this a valid email you can call this anything you'd like and now as you can see something interesting happened line 18 doesn't compile anymore",
    "start": "2255099",
    "end": "2262300"
  },
  {
    "text": "everything else still compiles and even if I would say well okay I say this email here is a valid email this also",
    "start": "2262300",
    "end": "2269560"
  },
  {
    "text": "does not compile because typescript tells you well this is just a string it's missing this brand property here so",
    "start": "2269560",
    "end": "2277839"
  },
  {
    "text": "but why is it working in here in this in this in this if Branch because we told typescript listen this is not just the",
    "start": "2277839",
    "end": "2284320"
  },
  {
    "text": "string because we are checking here for a string but it could be like if you have an object and you have a b and c in",
    "start": "2284320",
    "end": "2289960"
  },
  {
    "text": "it if you check if you want to only if you have an input width which where you only check for a being present that",
    "start": "2289960",
    "end": "2296320"
  },
  {
    "text": "could be also that B and C is also in there we all just checking for if this if a string is in there and now we can",
    "start": "2296320",
    "end": "2303160"
  },
  {
    "text": "say well this input is not only a string in this case but also like has this brand and so in there it works like",
    "start": "2303160",
    "end": "2310900"
  },
  {
    "text": "before and in there we can even say for example valid email which is a valid email here and then we",
    "start": "2310900",
    "end": "2317920"
  },
  {
    "text": "can assign email to it we don't have to do it just to show you that it's possible but as soon as we put this",
    "start": "2317920",
    "end": "2323619"
  },
  {
    "text": "outside this branch this will no longer compile this will no longer compile",
    "start": "2323619",
    "end": "2331800"
  },
  {
    "text": "I have to check valid email oh I think there is a type",
    "start": "2331800",
    "end": "2339779"
  },
  {
    "text": "yeah but I think this should no longer oh sorry that I only checked the first yeah",
    "start": "2341320",
    "end": "2347440"
  },
  {
    "text": "I have never seen this before so okay and so the problem here is of course as you can see",
    "start": "2347440",
    "end": "2353200"
  },
  {
    "text": "um this knot doesn't compile because um there is missing this additional brand this additional brand property so",
    "start": "2353200",
    "end": "2359800"
  },
  {
    "text": "but how is this really helpful so this way you can like also work with your",
    "start": "2359800",
    "end": "2365560"
  },
  {
    "text": "primitive types and make sure that everywhere you use this valid email type it's really just a valid email so you",
    "start": "2365560",
    "end": "2372040"
  },
  {
    "text": "for you don't have to wrap it like in like an object with one with one property or something like this you can",
    "start": "2372040",
    "end": "2377260"
  },
  {
    "text": "work with your strings or also with numbers you could work with any primitive types so you could also change",
    "start": "2377260",
    "end": "2383920"
  },
  {
    "text": "this for example to number and only allow like positive numbers in there so to make sure that for example you can",
    "start": "2383920",
    "end": "2391060"
  },
  {
    "text": "only pass in something which is negative you can just create like your own branded types for it so",
    "start": "2391060",
    "end": "2397180"
  },
  {
    "text": "to end this you could of course just do this yourself and each and every time",
    "start": "2397180",
    "end": "2402280"
  },
  {
    "text": "but what you also could do is you could create like yourself a small utility function to create these brand of types",
    "start": "2402280",
    "end": "2408700"
  },
  {
    "text": "for you so before I end my talk I will try to do this so we just return we change this",
    "start": "2408700",
    "end": "2415839"
  },
  {
    "text": "back to Boolean and we leave this all as it is we'll remove this type valid email",
    "start": "2415839",
    "end": "2421800"
  },
  {
    "text": "and now let's create a function we have a function let's call this function brand",
    "start": "2421800",
    "end": "2427660"
  },
  {
    "text": "and this brand function takes some generic arguments the first one is a primitive type this is like a string or",
    "start": "2427660",
    "end": "2434440"
  },
  {
    "text": "a number or a Boolean or something like this the second one is like the brand name it's like the string this valid",
    "start": "2434440",
    "end": "2440320"
  },
  {
    "text": "email we had and the third one is like uh it's like something which gets created from the first two like this",
    "start": "2440320",
    "end": "2446800"
  },
  {
    "text": "brand which we then can say well we extend A Primitive type and",
    "start": "2446800",
    "end": "2454480"
  },
  {
    "text": "we have the brand here with brand name",
    "start": "2454480",
    "end": "2460000"
  },
  {
    "text": "all right I will put this on two lines",
    "start": "2460000",
    "end": "2464820"
  },
  {
    "text": "three lines even so and now what we can do is",
    "start": "2465400",
    "end": "2470980"
  },
  {
    "text": "in your in our inputs what do we want to put into our inputs well we want to put put in like this email valid function so",
    "start": "2470980",
    "end": "2477220"
  },
  {
    "text": "this function we we just want to use to check if this is like the type card function so let's call this is type",
    "start": "2477220",
    "end": "2485160"
  },
  {
    "text": "function and we pass it in our input which is of type primitive in primitive",
    "start": "2485160",
    "end": "2490359"
  },
  {
    "text": "type and of course this returns a Boolean like this is email valid function and the second argument is just",
    "start": "2490359",
    "end": "2496420"
  },
  {
    "text": "the brand name with the type brand name now what do we return I really like from react like",
    "start": "2496420",
    "end": "2503200"
  },
  {
    "text": "this this where we use the hooks this this destructuring of this of the arrays where you have like your your two",
    "start": "2503200",
    "end": "2509619"
  },
  {
    "text": "elements in it so let's do this let's do the same and let's say the first element we return is like this this type card",
    "start": "2509619",
    "end": "2516940"
  },
  {
    "text": "function this primitive is primitive type here and it returns input is brand",
    "start": "2516940",
    "end": "2523839"
  },
  {
    "text": "and the second element we return is just the brand itself so that we know which type we can work with now in our",
    "start": "2523839",
    "end": "2530740"
  },
  {
    "text": "implementation and the five part is the implementation is smaller than the the function interface so we have our Ace",
    "start": "2530740",
    "end": "2537160"
  },
  {
    "text": "brand here and we say this is just a function which takes as an input our primitive type but it returns of course",
    "start": "2537160",
    "end": "2544119"
  },
  {
    "text": "input is a brand now we just call this is type function",
    "start": "2544119",
    "end": "2551260"
  },
  {
    "text": "we we pass in this is email valid here we use and we pass it in this email",
    "start": "2551260",
    "end": "2557260"
  },
  {
    "text": "and now we return it we say is brand gets returned and the second one we just",
    "start": "2557260",
    "end": "2563079"
  },
  {
    "text": "pass it an empty object and say as brand why do we do this I will show you right",
    "start": "2563079",
    "end": "2568359"
  },
  {
    "text": "away so we have now this param function and now how can we really use this",
    "start": "2568359",
    "end": "2573520"
  },
  {
    "text": "we can say we have a const here and let's call this the first element is is email the second one is valid email",
    "start": "2573520",
    "end": "2580540"
  },
  {
    "text": "object and then we can say well we call our brand",
    "start": "2580540",
    "end": "2585940"
  },
  {
    "text": "and in there what we can do is we say we pass it our easy email valid function and our valid email",
    "start": "2585940",
    "end": "2594099"
  },
  {
    "text": "app string now the important part is that this is email here as you can see",
    "start": "2594099",
    "end": "2599800"
  },
  {
    "text": "now the brand is valid email if I remove this as const",
    "start": "2599800",
    "end": "2605859"
  },
  {
    "text": "this brand here is just a string why because if you",
    "start": "2605859",
    "end": "2610960"
  },
  {
    "text": "don't use as cons typescript says well this is just a string it maybe it can maybe change so we will like not narrow",
    "start": "2610960",
    "end": "2618160"
  },
  {
    "text": "it down to the actual string so we have to use as cons so and now what you can do here instead",
    "start": "2618160",
    "end": "2624040"
  },
  {
    "text": "is we can say we have to type valid email and we can say type of valid email",
    "start": "2624040",
    "end": "2630460"
  },
  {
    "text": "object and as you can see now everything um works again I have to just check here",
    "start": "2630460",
    "end": "2638980"
  },
  {
    "text": "why this doesn't work brand string",
    "start": "2638980",
    "end": "2644200"
  },
  {
    "text": "brand valid email oh I have to check here this brand extends",
    "start": "2644200",
    "end": "2652420"
  },
  {
    "text": "funny oh yeah that's I I have when I when I",
    "start": "2652420",
    "end": "2659260"
  },
  {
    "text": "did when I did my my try I had exactly the same error at exactly the center technical scatters because this will not",
    "start": "2659260",
    "end": "2665500"
  },
  {
    "text": "happen again no of course not okay so now as you can see this works and but now we don't haven't really much more",
    "start": "2665500",
    "end": "2672280"
  },
  {
    "text": "much more stuff but what we now can do is let's just remove everything here",
    "start": "2672280",
    "end": "2677560"
  },
  {
    "text": "and what we now could do is we can say is positive number and we say positive",
    "start": "2677560",
    "end": "2684940"
  },
  {
    "text": "number object and we then have here and we say well in what is our check function for a",
    "start": "2684940",
    "end": "2692079"
  },
  {
    "text": "positive number we say well the input is a number and well the input has to be greater than",
    "start": "2692079",
    "end": "2698079"
  },
  {
    "text": "zero and then we can say here positive number and now we can have like create",
    "start": "2698079",
    "end": "2703180"
  },
  {
    "text": "our own branded type and we can just use it we can say we have a number here",
    "start": "2703180",
    "end": "2708220"
  },
  {
    "text": "here which is one and we can say if",
    "start": "2708220",
    "end": "2712800"
  },
  {
    "text": "is positive number we can pass it in our number and now in here we can be sure",
    "start": "2713319",
    "end": "2718359"
  },
  {
    "text": "that this has to be a positive number so we have positive here which is a positive number",
    "start": "2718359",
    "end": "2724180"
  },
  {
    "text": "and not a position but the positive number and this now would work here if I",
    "start": "2724180",
    "end": "2731020"
  },
  {
    "text": "just had created the type here positive number",
    "start": "2731020",
    "end": "2737619"
  },
  {
    "text": "is type of positive number object and as you can see this compiles but as soon as",
    "start": "2737619",
    "end": "2743560"
  },
  {
    "text": "I move this outside this will no longer compile because you don't have the safety so this I will I",
    "start": "2743560",
    "end": "2750160"
  },
  {
    "text": "use always in my projects to be sure that I can pass around strings but can still be sure that this status the data",
    "start": "2750160",
    "end": "2755619"
  },
  {
    "text": "string still comply to the patterns I'd like them to have and the cool thing also is of course because this is just a",
    "start": "2755619",
    "end": "2762040"
  },
  {
    "text": "normal primitive you can still access all its properties or its functions you can work with it like a normal string",
    "start": "2762040",
    "end": "2768700"
  },
  {
    "text": "so that's already it for my talk what I wanted to show you before I end my talk",
    "start": "2768700",
    "end": "2775240"
  },
  {
    "text": "is how you could really bring it to another level so you could do something",
    "start": "2775240",
    "end": "2780940"
  },
  {
    "text": "like this and you could create like a validator like a validator if it's if a string you",
    "start": "2780940",
    "end": "2788200"
  },
  {
    "text": "pass into a function is a valid mathematical equation so for example here this will this at the top always",
    "start": "2788200",
    "end": "2794859"
  },
  {
    "text": "does compile because this is a valid a valid equation if I for example remove this three here I get an error because",
    "start": "2794859",
    "end": "2801160"
  },
  {
    "text": "this is not valid and can't be can be um create an equation from it so but as you",
    "start": "2801160",
    "end": "2807700"
  },
  {
    "text": "can see here is a missing closing bracket mismatched brackets and all everything it's also my GitHub you can",
    "start": "2807700",
    "end": "2812740"
  },
  {
    "text": "check it out and it's yeah it's around 40 lines of code it's a little bit crazy but if you get into it I think it's it's",
    "start": "2812740",
    "end": "2819579"
  },
  {
    "text": "not necessarily crazy at all so yeah",
    "start": "2819579",
    "end": "2825220"
  },
  {
    "text": "yeah that was my talk I'd really really wanted to uh think that you took the time out of your day and also after",
    "start": "2825220",
    "end": "2831040"
  },
  {
    "text": "lunch you you came here and sat down here and listened to me and yeah and if",
    "start": "2831040",
    "end": "2836140"
  },
  {
    "text": "you'd like to ask me anything or so please write me and or link me on LinkedIn or write me an email I'd really",
    "start": "2836140",
    "end": "2842680"
  },
  {
    "text": "like to hear from you and yeah I want to thank you for being here and wish you an awesome NDC conference and yeah thank",
    "start": "2842680",
    "end": "2849520"
  },
  {
    "text": "you foreign",
    "start": "2849520",
    "end": "2857500"
  }
]