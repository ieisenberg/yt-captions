[
  {
    "text": "you can all defrag a bit if you want raise your hand if you know what defragging",
    "start": "4600",
    "end": "11559"
  },
  {
    "text": "means you're all old you age",
    "start": "11559",
    "end": "18039"
  },
  {
    "text": "yourself um for the rest of you back in the day when we had discs of spinning",
    "start": "18039",
    "end": "23080"
  },
  {
    "text": "rust files were not stored in sequence and wherever was a file was stored they had to move physical objects to read the",
    "start": "23080",
    "end": "30160"
  },
  {
    "text": "drives so it was efficient if all of a file was stored in a sequence as you delete it and you erased",
    "start": "30160",
    "end": "38280"
  },
  {
    "text": "and added new files the spacing would get fragmented and you could defragment the",
    "start": "38280",
    "end": "43360"
  },
  {
    "text": "drive by reading everything and putting everything in order it was",
    "start": "43360",
    "end": "48440"
  },
  {
    "text": "glorious Ione to have fun like watching the defrag screen like moving things above like a I felt so good so Hello",
    "start": "48440",
    "end": "56280"
  },
  {
    "text": "friends last person have gotten a seat um welcome",
    "start": "56280",
    "end": "63000"
  },
  {
    "text": "to second last session of the day I'm glad it was so late on a Friday so at",
    "start": "63000",
    "end": "68479"
  },
  {
    "text": "least some people knew where Room 2 was I had a hard time finding it the first",
    "start": "68479",
    "end": "74040"
  },
  {
    "text": "time just because I'm curious who here is currently working with distributed services or microservices and whatever",
    "start": "74040",
    "end": "81200"
  },
  {
    "text": "definition makes sense to you use that quite a few who wish they were working with",
    "start": "81200",
    "end": "87040"
  },
  {
    "text": "microservices who wish they weren't working with microservices okay they win who's working with the",
    "start": "87040",
    "end": "95040"
  },
  {
    "text": "monolith who's working with a distributed monolith isn't that fun okay we're going",
    "start": "95040",
    "end": "100720"
  },
  {
    "text": "to get back to all of these terms uh microservices has been a thing for years",
    "start": "100720",
    "end": "106280"
  },
  {
    "text": "and now monolist and coming back into shape again which kind of makes me feel bad because I've been doing this talk for a while because before it was hip to",
    "start": "106280",
    "end": "113320"
  },
  {
    "text": "talk about glorious monolist but now I feel like I'm just one of the crowd but it's the pendulum is swinging back",
    "start": "113320",
    "end": "120880"
  },
  {
    "text": "so I'm Glenn I work at a small lwtech legal startup trying to become a",
    "start": "120880",
    "end": "129119"
  },
  {
    "text": "scaleup it's called justify you get personal legal Affairs in order and go online to do it but to do this we built",
    "start": "129119",
    "end": "134800"
  },
  {
    "text": "an application and we decided not only to go for to not go for",
    "start": "134800",
    "end": "140680"
  },
  {
    "text": "microservices and a distributed application we had a conscious decision it was tempting though because you want",
    "start": "140680",
    "end": "145959"
  },
  {
    "text": "to do it like it's called resume dur development uh because I could use all kinds of fun Tech but we decided to",
    "start": "145959",
    "end": "154239"
  },
  {
    "text": "build ourselves a glorious monolith now what is a monolith in practice it's not",
    "start": "154239",
    "end": "162319"
  },
  {
    "text": "hard to apply these terms uh a monolith is the definition is a huge a large",
    "start": "162319",
    "end": "169480"
  },
  {
    "text": "single upright block of stone especially one shaped into or serving as a pillar or a monument anyone ever work with a",
    "start": "169480",
    "end": "176519"
  },
  {
    "text": "monument of software or the a large impersonal political",
    "start": "176519",
    "end": "183920"
  },
  {
    "text": "corporate or social structure regards it indivisible and slow to change who worked on that",
    "start": "183920",
    "end": "190519"
  },
  {
    "text": "app it's not hard to apply these terms to software the we have been part of",
    "start": "190519",
    "end": "196440"
  },
  {
    "text": "and a monument sometimes is a monument to remember all of those Consultants that",
    "start": "196440",
    "end": "202879"
  },
  {
    "text": "were on the project for 6 months before transitioning out large impractical slow",
    "start": "202879",
    "end": "208280"
  },
  {
    "text": "to change indivis ible not positive terms",
    "start": "208280",
    "end": "213640"
  },
  {
    "text": "really microservices they're in architectural style structures and",
    "start": "213640",
    "end": "220080"
  },
  {
    "text": "application and uh people talk about features like highly maintainable and testable Loosely",
    "start": "220080",
    "end": "226200"
  },
  {
    "text": "coupled independently Deployable like that's an awesome thing organized one business capability",
    "start": "226200",
    "end": "232640"
  },
  {
    "text": "is great owned by a small team sounds awesome all these things that sound very positive and this is sort of the image",
    "start": "232640",
    "end": "239920"
  },
  {
    "text": "we were given where monoliths are bad and microservices are good except the",
    "start": "239920",
    "end": "245239"
  },
  {
    "text": "site guys is changing a little bit but the you're when people talk about it",
    "start": "245239",
    "end": "250400"
  },
  {
    "text": "like this they're serving a false picture they're saying that every",
    "start": "250400",
    "end": "256239"
  },
  {
    "text": "monolith turns into that which is just this massive organic",
    "start": "256239",
    "end": "262479"
  },
  {
    "text": "piece of blob more than a monolith even",
    "start": "262479",
    "end": "267680"
  },
  {
    "text": "while the microservices are like NE ordered and everything is nice",
    "start": "267680",
    "end": "273880"
  },
  {
    "text": "well starting out with a distributed system seems to be a good idea for",
    "start": "273880",
    "end": "280639"
  },
  {
    "text": "many but in reality you're starting out playing that game on hard mode it's like picking",
    "start": "280639",
    "end": "287960"
  },
  {
    "text": "up anyone played uh Elder",
    "start": "287960",
    "end": "293560"
  },
  {
    "text": "Scrolls like I'm gonna you never picked it up I'm going to play this game I'm going to put on hard mode like 20",
    "start": "293560",
    "end": "300360"
  },
  {
    "text": "minutes later after dying 400 times like no I'm going to go back to something",
    "start": "300360",
    "end": "305639"
  },
  {
    "text": "easier it's cool if you make it and you get huge bragging rights but it's going to take you unnecessarily longer to and",
    "start": "305639",
    "end": "311880"
  },
  {
    "text": "significantly more skilled to actually do it and I'm here to tell you that a",
    "start": "311880",
    "end": "319360"
  },
  {
    "text": "well-crafted monolith is never going to give you up there are some fallacies to",
    "start": "319360",
    "end": "326520"
  },
  {
    "text": "distributed computing who has heard those fallacies before yeah a few the network is",
    "start": "326520",
    "end": "332360"
  },
  {
    "text": "reliable always reliable anyone have uh stuff in Azure blob storage these days",
    "start": "332360",
    "end": "338880"
  },
  {
    "text": "or today in West Europe anyone get a call from someone back home",
    "start": "338880",
    "end": "344520"
  },
  {
    "text": "today because today blob storage in West Europe in Azure was",
    "start": "344520",
    "end": "350840"
  },
  {
    "text": "gone like nope gone away so unless you built in redundancy in your your",
    "start": "351400",
    "end": "357960"
  },
  {
    "text": "configurations like no I don't have blob story today we decided not to have that",
    "start": "357960",
    "end": "363400"
  },
  {
    "text": "today latency is zero always from one side of the globe the other does take no",
    "start": "363400",
    "end": "368880"
  },
  {
    "text": "time no problem bandwidth infinite we can send as much data as we want anyone",
    "start": "368880",
    "end": "373960"
  },
  {
    "text": "in AWS clouds anyone been hit by inter Zone transfer Chargers in AWS that's so fun",
    "start": "373960",
    "end": "382000"
  },
  {
    "text": "that people have built entire consultant agencies that basically assist to find out where you're shipping data wrong and",
    "start": "382000",
    "end": "389680"
  },
  {
    "text": "it's costing you literally tens of thousands of dollars a",
    "start": "389680",
    "end": "395120"
  },
  {
    "text": "month network is always secure nothing that travels across the internet can ever be broken into the poliy doesn't",
    "start": "395120",
    "end": "401440"
  },
  {
    "text": "change nothing happens no no nothing goes anywhere and there's only one administrator there's just one person",
    "start": "401440",
    "end": "406960"
  },
  {
    "text": "you can go to to fix everything he knows everything it doesn't really happen that way it's like yeah you're going to have",
    "start": "406960",
    "end": "413280"
  },
  {
    "text": "to talk to Sheila no you got have to talk to Carl maybe talk to and back and",
    "start": "413280",
    "end": "418400"
  },
  {
    "text": "forth and transport cost is zero network is always homogeneous there's no",
    "start": "418400",
    "end": "424240"
  },
  {
    "text": "differences everything's the same great so these are unique or Amplified when",
    "start": "424240",
    "end": "431479"
  },
  {
    "text": "you're building a distributed system these are things that increase your difficulty level when going in these are",
    "start": "431479",
    "end": "438879"
  },
  {
    "text": "the things that if you don't think about these when building a distributed system will bite you in the",
    "start": "438879",
    "end": "446800"
  },
  {
    "text": "butt all the these things Happ to be handled when you're going down to the microservice path anyone know how old",
    "start": "447240",
    "end": "454199"
  },
  {
    "text": "these rules are they're like 30 plus years",
    "start": "454199",
    "end": "460840"
  },
  {
    "text": "old around 30 years plus minus a couple years so this is nothing new people have",
    "start": "460840",
    "end": "466159"
  },
  {
    "text": "known about this we've just chosen to ignore them for the past 10 years or",
    "start": "466159",
    "end": "472199"
  },
  {
    "text": "so now the monolith also called the big ball of mud which is a technical",
    "start": "472199",
    "end": "478319"
  },
  {
    "text": "term supposedly invariably devolves into this big ball of mud the spaghetti code the",
    "start": "478319",
    "end": "485680"
  },
  {
    "text": "massive code fils disorganized code every change risks breaking a",
    "start": "485680",
    "end": "492400"
  },
  {
    "text": "thousand things however most of these problems",
    "start": "492400",
    "end": "497520"
  },
  {
    "text": "can be overcome I mean there's limitations to",
    "start": "497520",
    "end": "503599"
  },
  {
    "text": "it is it really it's too large to fully understand you can't fully understand",
    "start": "503599",
    "end": "508639"
  },
  {
    "text": "the monolith you can't go into it fully understand it can someone really fully understand",
    "start": "508639",
    "end": "514279"
  },
  {
    "text": "your microservice topology and architecture as well not that different",
    "start": "514279",
    "end": "519479"
  },
  {
    "text": "slows down startup time entire application must be deployed for every",
    "start": "519479",
    "end": "525399"
  },
  {
    "text": "upgrade impact of A Change Is poorly understood and there's barriers to",
    "start": "525399",
    "end": "530880"
  },
  {
    "text": "adopting new technology all of these things are true they're not",
    "start": "530880",
    "end": "536360"
  },
  {
    "text": "wrong but they can be overcome by using various",
    "start": "536360",
    "end": "542240"
  },
  {
    "text": "techniques so building a distributed system is playing the game on hard",
    "start": "542480",
    "end": "547519"
  },
  {
    "text": "mode building a monolith without thought and discipline",
    "start": "547519",
    "end": "553120"
  },
  {
    "text": "is also playing the game on hard",
    "start": "553120",
    "end": "556560"
  },
  {
    "text": "mode complexity always increases as something grows complexity increases",
    "start": "558240",
    "end": "565040"
  },
  {
    "text": "this is practically law of Nature enthropy and all that the problem with complexity as we introduce bits and",
    "start": "565040",
    "end": "570800"
  },
  {
    "text": "pieces in our code we create more and more connections between pieces and these com pieces increase complexity not",
    "start": "570800",
    "end": "578920"
  },
  {
    "text": "linearly but increases exponentially so you get to a point",
    "start": "578920",
    "end": "584200"
  },
  {
    "text": "where every single change introduces a lot of complexity what we need to do is over",
    "start": "584200",
    "end": "592040"
  },
  {
    "text": "time introduce various complexity dampening measures to keep the complexity at a low",
    "start": "592040",
    "end": "598120"
  },
  {
    "text": "and manageable level",
    "start": "598120",
    "end": "601120"
  },
  {
    "text": "the main reason for the problems with monolith is that you get different parts and they're not very",
    "start": "603839",
    "end": "610600"
  },
  {
    "text": "organized they're not clearly defined and after a while you get this unmanageable amount of",
    "start": "610600",
    "end": "617600"
  },
  {
    "text": "coupling coupling is a thing we want to keep low in our monolith coupling is how",
    "start": "617600",
    "end": "623880"
  },
  {
    "text": "many connections how many hard dependencies does your thing one thing",
    "start": "623880",
    "end": "629680"
  },
  {
    "text": "have to other things instead of this mess ha we want something that is cleaner and more",
    "start": "629680",
    "end": "636079"
  },
  {
    "text": "easily reasoned about we want contained boxes more defined smaller boxes and",
    "start": "636079",
    "end": "644360"
  },
  {
    "text": "want to limit their connections to other boxes this helps with a lot of",
    "start": "644360",
    "end": "651320"
  },
  {
    "text": "problems provided that we are reasonably smart with creating these boxes we",
    "start": "651320",
    "end": "657519"
  },
  {
    "text": "should be able to build boxes that are small enough to fully understand small enough to not have a",
    "start": "657519",
    "end": "664959"
  },
  {
    "text": "lot of complexity and small enough to understand the impact of a",
    "start": "664959",
    "end": "671560"
  },
  {
    "text": "change we do this by creating borders around our boxes and thinking hard about",
    "start": "671560",
    "end": "679079"
  },
  {
    "text": "how we cross those borders coupling is one measurement we",
    "start": "679079",
    "end": "685639"
  },
  {
    "text": "have in our application another one is cohesion cohesion is a measurement of",
    "start": "685639",
    "end": "691000"
  },
  {
    "text": "that things that belong together are together so we want a low",
    "start": "691000",
    "end": "698240"
  },
  {
    "text": "coupling and what a high degree of cohesion these",
    "start": "698240",
    "end": "703720"
  },
  {
    "text": "things are the same or talk about the same thing they belong together let's",
    "start": "703720",
    "end": "710040"
  },
  {
    "text": "keep them together let's not spread them all over like butter spread on the",
    "start": "710040",
    "end": "715839"
  },
  {
    "text": "sandwich as assuming into one of these boxes your box should have a clear",
    "start": "715839",
    "end": "723600"
  },
  {
    "text": "boundary it should be absolutely clear on what it communicates out to other boxes what is",
    "start": "723600",
    "end": "732000"
  },
  {
    "text": "internal stuff it should be absolutely clear on how you",
    "start": "732000",
    "end": "738639"
  },
  {
    "text": "define the public surface of your",
    "start": "738639",
    "end": "744519"
  },
  {
    "text": "box and inside the Box will Define the detail s of our box let's call it the",
    "start": "744959",
    "end": "753440"
  },
  {
    "text": "domain the inner domain layer and we have an outro application layer these are terms that people recognize when",
    "start": "754399",
    "end": "761560"
  },
  {
    "text": "people start talking about domain driven design and to be fair domain driven design lends itself well to building",
    "start": "761560",
    "end": "768040"
  },
  {
    "text": "glorious monoliths this domain layer is internal",
    "start": "768040",
    "end": "775600"
  },
  {
    "text": "to our box nothing from that domain layer should leak",
    "start": "775600",
    "end": "782560"
  },
  {
    "text": "out and be coupled to other",
    "start": "782560",
    "end": "787639"
  },
  {
    "text": "boxes the domain layer contains all of your business logic this is where you put your",
    "start": "788279",
    "end": "794279"
  },
  {
    "text": "entities your aggregate roots your value objects your domain Services all of the",
    "start": "794279",
    "end": "800959"
  },
  {
    "text": "things that reason about the things that belong in this",
    "start": "800959",
    "end": "807160"
  },
  {
    "text": "box all your rulle tools all your business knowledge is in",
    "start": "807160",
    "end": "815600"
  },
  {
    "text": "that domain by slicing these boxes",
    "start": "815600",
    "end": "821600"
  },
  {
    "text": "right you can go into one of these boxes and find a clearly defined",
    "start": "821600",
    "end": "828839"
  },
  {
    "text": "subset of your app and you can work with",
    "start": "828839",
    "end": "834800"
  },
  {
    "text": "that but someone's thinking that sounds like a m micro service it",
    "start": "836040",
    "end": "841920"
  },
  {
    "text": "is any change in the domain logic in the domain there is for business",
    "start": "843759",
    "end": "850320"
  },
  {
    "text": "reasons the application layer here decides how this how other boxes",
    "start": "850720",
    "end": "856519"
  },
  {
    "text": "communicate with our domain for this we use our",
    "start": "856519",
    "end": "862040"
  },
  {
    "text": "domain services or and we create application services and we create data transfer",
    "start": "862040",
    "end": "868440"
  },
  {
    "text": "objects object s for instance we can have in our domain",
    "start": "868440",
    "end": "873600"
  },
  {
    "text": "we have a thing maybe we'll make a thing service in our domain in our application",
    "start": "873600",
    "end": "881639"
  },
  {
    "text": "layer and our thing service will communicate out through a thing",
    "start": "881639",
    "end": "887279"
  },
  {
    "text": "dto a data transfer object so if another",
    "start": "887279",
    "end": "892639"
  },
  {
    "text": "box wants to access our thing it will call the thing service",
    "start": "892639",
    "end": "898240"
  },
  {
    "text": "from the application layer it says hey could I get a thing with ID number so and so for instance",
    "start": "898240",
    "end": "906000"
  },
  {
    "text": "sure and things Ser will go into the domain find a thing pick it up translate",
    "start": "906000",
    "end": "911880"
  },
  {
    "text": "it to a transfer data transfer object and ship",
    "start": "911880",
    "end": "917600"
  },
  {
    "text": "that in its simplest fashion it's basically what it",
    "start": "917600",
    "end": "924399"
  },
  {
    "text": "does a thing service can have multiple methods depending on what actions you",
    "start": "924440",
    "end": "930800"
  },
  {
    "text": "want to allow Outsiders to have into your",
    "start": "930800",
    "end": "935360"
  },
  {
    "text": "box by doing this you're making your",
    "start": "936240",
    "end": "942160"
  },
  {
    "text": "domain your thing domain and all the other boxes Loosely",
    "start": "942160",
    "end": "948800"
  },
  {
    "text": "coupled they have an abstraction layer between them and abstractions solve every single",
    "start": "948800",
    "end": "955199"
  },
  {
    "text": "problem in computer science except the problem of too many abstractions but this is just the right",
    "start": "955199",
    "end": "962759"
  },
  {
    "text": "amount controlling the surface that is available to other boxes",
    "start": "962759",
    "end": "968319"
  },
  {
    "text": "is a key instrument in managing the complexity of your",
    "start": "968319",
    "end": "975279"
  },
  {
    "text": "app if you just allow anyone to do anything then you're not controlling",
    "start": "975360",
    "end": "981759"
  },
  {
    "text": "your complexity okay we'll get to more",
    "start": "981759",
    "end": "988720"
  },
  {
    "text": "details as as we go along so using principles from domain driven design you",
    "start": "988720",
    "end": "994839"
  },
  {
    "text": "create these boxes around subdomains or bed contexts helps with keeping these things",
    "start": "994839",
    "end": "1001079"
  },
  {
    "text": "understandable a box should be self-contained with all its logic and all this data you can reason about the",
    "start": "1001079",
    "end": "1007319"
  },
  {
    "text": "domain and uh such a box in the isolation and you don't need to",
    "start": "1007319",
    "end": "1012519"
  },
  {
    "text": "understand all the other parts of the application so you can bring in someone new you can show them hey here's this",
    "start": "1012519",
    "end": "1017600"
  },
  {
    "text": "domain here's how it works we need you to make some changes to the business logic here",
    "start": "1017600",
    "end": "1023519"
  },
  {
    "text": "and they can go in and do that without affecting the rest of the application because we have this isolation layer between it and even if the thing changes",
    "start": "1023519",
    "end": "1030839"
  },
  {
    "text": "the thing dto doesn't so we can change maybe some parts of the thing service which we own",
    "start": "1030839",
    "end": "1036760"
  },
  {
    "text": "and control and everyone else is none the wiser now boxes is a really poor name in",
    "start": "1036760",
    "end": "1043839"
  },
  {
    "text": "our application we call them features it is a pretty arbitrary name",
    "start": "1043839",
    "end": "1049039"
  },
  {
    "text": "pick one that makes sense to you context domains whatever it's not really important but I'll be calling it",
    "start": "1049039",
    "end": "1055360"
  },
  {
    "text": "features from here on on out so these features and the",
    "start": "1055360",
    "end": "1063559"
  },
  {
    "text": "communication boundary of a feature should be treated like a public",
    "start": "1063559",
    "end": "1069720"
  },
  {
    "text": "API you should be vary of changing the public API but that is one of the advantages you get in the",
    "start": "1074280",
    "end": "1080559"
  },
  {
    "text": "monolith whenever you change the surface area you have instant access to all the",
    "start": "1080559",
    "end": "1086799"
  },
  {
    "text": "errors in the rest of your application if you change the name of a method or change the name of",
    "start": "1086799",
    "end": "1094520"
  },
  {
    "text": "a a property or something your I refactors that across all your boxes all",
    "start": "1094520",
    "end": "1101159"
  },
  {
    "text": "the consumers immediately worst case scenario with a",
    "start": "1101159",
    "end": "1107840"
  },
  {
    "text": "microser everything is published as a client as you have to upload it to a n get feed and you have to make sure that",
    "start": "1107840",
    "end": "1113720"
  },
  {
    "text": "all the other clients download the same N Field and then you have a whole bot of trouble with versioning with clients oh",
    "start": "1113720",
    "end": "1119159"
  },
  {
    "text": "yeah that service is using an old version of our client so we need to upgrade that because we made some",
    "start": "1119159",
    "end": "1124679"
  },
  {
    "text": "changes here and we can't make these changes because these other there's a whole mess going on",
    "start": "1124679",
    "end": "1131919"
  },
  {
    "text": "there so refactoring is working like a charm on your ID huge Advantage when building out your application especially",
    "start": "1132760",
    "end": "1138200"
  },
  {
    "text": "with when you're starting out where things are much more in flux than they are",
    "start": "1138200",
    "end": "1143280"
  },
  {
    "text": "later you should be conscious of the changes what a change in your public API",
    "start": "1143280",
    "end": "1149000"
  },
  {
    "text": "can affect but in a monolith you can get a very clear picture of what parts have a dependency on your",
    "start": "1149000",
    "end": "1156960"
  },
  {
    "text": "part the application layer should also handle external dependencies makes your domain easier to",
    "start": "1157919",
    "end": "1166240"
  },
  {
    "text": "uh test because they're not dependent on any external service makes the code easier to test",
    "start": "1166240",
    "end": "1173400"
  },
  {
    "text": "but also reduces the risk from changing stuff in domain driven Ser the domain driven design this is what's called an",
    "start": "1173400",
    "end": "1179600"
  },
  {
    "text": "anti-corruption layer so you have a little thing that stands between you and",
    "start": "1179600",
    "end": "1185080"
  },
  {
    "text": "some external service that external service could be another feature or it could be a third- party service it",
    "start": "1185080",
    "end": "1191039"
  },
  {
    "text": "doesn't really matter it's a piece of code that prevents concerns from external",
    "start": "1191039",
    "end": "1197240"
  },
  {
    "text": "features to infiltrate and drive internal change in your",
    "start": "1197240",
    "end": "1202320"
  },
  {
    "text": "domain in your current feature so we're starting out with this one might be tempted to have a thing",
    "start": "1202320",
    "end": "1208120"
  },
  {
    "text": "service and say that everyone wants something from the thing domain should use the thing",
    "start": "1208120",
    "end": "1213760"
  },
  {
    "text": "service and that might be fine for a while when things are small",
    "start": "1213760",
    "end": "1220840"
  },
  {
    "text": "but unless your application is Trivial the thing service will grow and grow and grow and grow grow it",
    "start": "1220840",
    "end": "1228840"
  },
  {
    "text": "won't stay small for very long indeed also having a single thing dto probably",
    "start": "1228840",
    "end": "1234640"
  },
  {
    "text": "not a good thing either but not intended different situations might need different needs",
    "start": "1234640",
    "end": "1242280"
  },
  {
    "text": "and you end up with multiple things something dto thing list dto thing short dto thing view in a edit",
    "start": "1242280",
    "end": "1251840"
  },
  {
    "text": "screen dto thing delete dto thing this thing that and so on and so forth these",
    "start": "1251840",
    "end": "1258280"
  },
  {
    "text": "service classes have a tendency to grow with every possible use case and have dto that are either reused or have a",
    "start": "1258280",
    "end": "1264880"
  },
  {
    "text": "bunch of them similar that's next to each other anyone been in that",
    "start": "1264880",
    "end": "1271720"
  },
  {
    "text": "situation yeah so what we do is that we",
    "start": "1271720",
    "end": "1276960"
  },
  {
    "text": "make request command handlers along with specialized",
    "start": "1276960",
    "end": "1282679"
  },
  {
    "text": "requests specialized commands or special and specialized responses we basically make one for each",
    "start": "1282679",
    "end": "1289520"
  },
  {
    "text": "use case in our feature we group these in a single I'll assum in you don't have to read all of",
    "start": "1289520",
    "end": "1295600"
  },
  {
    "text": "it I'll we group these handlers in a single file under a single",
    "start": "1295600",
    "end": "1304559"
  },
  {
    "text": "uh not do group handlers in single file we group the requ request response objects and the Handler in one",
    "start": "1304559",
    "end": "1312320"
  },
  {
    "text": "file I like using a class with ness's classes makes me uh",
    "start": "1313360",
    "end": "1319080"
  },
  {
    "text": "use the class name when referring to handl less likely to have name collisions so mostly a stylistic choice",
    "start": "1319080",
    "end": "1325080"
  },
  {
    "text": "but it does remove the need for some discipline so",
    "start": "1325080",
    "end": "1330200"
  },
  {
    "text": "here we have our query object public record",
    "start": "1330200",
    "end": "1335919"
  },
  {
    "text": "query I request Walt dto it Returns the dto from the Walt this is a Handler in",
    "start": "1335919",
    "end": "1342480"
  },
  {
    "text": "our a vault feature it has a vault user ID it's in",
    "start": "1342480",
    "end": "1348720"
  },
  {
    "text": "nested in the nested class get my Vault so this a feature this is a use",
    "start": "1348720",
    "end": "1355559"
  },
  {
    "text": "case for getting my Vault every user has a vault in our application where important documents are stored so this",
    "start": "1355559",
    "end": "1362240"
  },
  {
    "text": "is get a reference to My Vault how do I get a reference I send in a query object the query object has a vault user",
    "start": "1362240",
    "end": "1369200"
  },
  {
    "text": "ID it's the ID of whoever wants to get",
    "start": "1369200",
    "end": "1373760"
  },
  {
    "text": "this in this case we we have a dto object that acts as respon as a response",
    "start": "1376240",
    "end": "1381440"
  },
  {
    "text": "object but it could also be a separate response object that is here so sometimes we'll reuse some objects",
    "start": "1381440",
    "end": "1389360"
  },
  {
    "text": "across handers but other times we'll have separate ones we're using mediator",
    "start": "1389360",
    "end": "1395679"
  },
  {
    "text": "for this uh as a pipeline uh as a as the",
    "start": "1395679",
    "end": "1400720"
  },
  {
    "text": "mediator software and the mediator software acts on the domain's",
    "start": "1400720",
    "end": "1406400"
  },
  {
    "text": "behalf so front end or API level or whatever they don't have a dependency on",
    "start": "1406400",
    "end": "1411559"
  },
  {
    "text": "our domain or our features at all except for the different respond query",
    "start": "1411559",
    "end": "1417360"
  },
  {
    "text": "classes it has a dependency on the mediator which takes in a query and then",
    "start": "1417360",
    "end": "1422440"
  },
  {
    "text": "figures out who serves that query best mediator also has the concept of post and pre uh post and pre-b behaviors so",
    "start": "1422440",
    "end": "1430799"
  },
  {
    "text": "here we have I require a register wal user that is a behavior that we",
    "start": "1430799",
    "end": "1436480"
  },
  {
    "text": "attach to this query which po gets the uh current user",
    "start": "1436480",
    "end": "1443320"
  },
  {
    "text": "ID from the login token and populates the Vault user ID",
    "start": "1443320",
    "end": "1448480"
  },
  {
    "text": "field automatically so we'll say well I require registered Vault user that's an",
    "start": "1448480",
    "end": "1454000"
  },
  {
    "text": "interface it makes us have the Vault user ID and it's automatically populated then we get a nice pipeline",
    "start": "1454000",
    "end": "1460440"
  },
  {
    "text": "for that particular use case and then we have the Handler for that this is the code for",
    "start": "1460440",
    "end": "1466200"
  },
  {
    "text": "getting a vault user Vault servers get to create Vault for Vault user map that to a vault dto and a vault",
    "start": "1466200",
    "end": "1475000"
  },
  {
    "text": "contains a bunch of boxes and for each box get the Vault",
    "start": "1475000",
    "end": "1481240"
  },
  {
    "text": "um is there a partner cuz sometimes you have Partners in your with your",
    "start": "1481240",
    "end": "1486880"
  },
  {
    "text": "boxes and then it's uh oh it updates those as well yeah because it can get or create so it doesn't save changes this",
    "start": "1487159",
    "end": "1494039"
  },
  {
    "text": "is the actual Handler it's re relatively easy to Res about especially if you have some understanding of the domain behind",
    "start": "1494039",
    "end": "1501159"
  },
  {
    "text": "this this is what it does this is also an element of What's called the vertical",
    "start": "1501159",
    "end": "1506240"
  },
  {
    "text": "slice architecture where every use case is one slice of your architecture and every use case can use",
    "start": "1506240",
    "end": "1514200"
  },
  {
    "text": "a different architecture right here we use the Entity framework we don't have",
    "start": "1514200",
    "end": "1520360"
  },
  {
    "text": "to maybe we have some hot paths that are called off and maybe we won't use Entity framework maybe we'll",
    "start": "1520360",
    "end": "1526279"
  },
  {
    "text": "use pure radio.net maybe for some pipelines we're",
    "start": "1526279",
    "end": "1531600"
  },
  {
    "text": "using a store procedure and calling that instead it doesn't matter maybe for some",
    "start": "1531600",
    "end": "1538080"
  },
  {
    "text": "pipelines we won't call the relational database as all we're going to call a document database that has a projected",
    "start": "1538080",
    "end": "1544679"
  },
  {
    "text": "view in it it doesn't matter anymore because",
    "start": "1544679",
    "end": "1550880"
  },
  {
    "text": "architecture decisions are no longer a thing that you have to decide for your entire application but you decide for that that",
    "start": "1550880",
    "end": "1557880"
  },
  {
    "text": "particular use case of course there's always nice with some discipline so we don't evolve into",
    "start": "1557880",
    "end": "1565399"
  },
  {
    "text": "complete chaos but we have the ability to do that if we want",
    "start": "1565399",
    "end": "1570640"
  },
  {
    "text": "to this is the entire code file with the response some dependencies and the actual Handler we",
    "start": "1570640",
    "end": "1578840"
  },
  {
    "text": "have lots of these we make multiple",
    "start": "1578840",
    "end": "1584679"
  },
  {
    "text": "ones it is easy to fit the code in one Handler into your",
    "start": "1584679",
    "end": "1589840"
  },
  {
    "text": "head and a feature needs information another feature we still like use surface service over a mediator Handler",
    "start": "1589840",
    "end": "1597480"
  },
  {
    "text": "because calling handlers from another Handler is not really supported in mediator and most of the features are to",
    "start": "1597480",
    "end": "1604200"
  },
  {
    "text": "endpoints so but it also if we have a certain",
    "start": "1604200",
    "end": "1609679"
  },
  {
    "text": "naming convention it gets pretty easy for us to go into a folder and say okay what are the things we can do with this",
    "start": "1609679",
    "end": "1615000"
  },
  {
    "text": "thing what can I do in a vault I can archive entries I can create entries I can delete them download them",
    "start": "1615000",
    "end": "1622919"
  },
  {
    "text": "get different things move things share things unshare and upload",
    "start": "1622919",
    "end": "1629200"
  },
  {
    "text": "sweet we can even pull our API endpoints into our feature folder this",
    "start": "1631480",
    "end": "1637120"
  },
  {
    "text": "is using the endpoint feature in net orp net where'll have uh add task endpoints",
    "start": "1637120",
    "end": "1644279"
  },
  {
    "text": "this is for adding tasks mapping certain",
    "start": "1644279",
    "end": "1649799"
  },
  {
    "text": "endpoints mediator send get list requests that's how you call a mediator",
    "start": "1649799",
    "end": "1655200"
  },
  {
    "text": "Handler there are other libraries that do the same thing Wolverine is a pretty good one that does pipeline handling it",
    "start": "1655200",
    "end": "1663640"
  },
  {
    "text": "does it in a slightly different way an interesting way but it's really good thing and then when you have all these",
    "start": "1663640",
    "end": "1670159"
  },
  {
    "text": "things here all your API endpoints well you can just add those that's your startup class like",
    "start": "1670159",
    "end": "1678039"
  },
  {
    "text": "hey add task end points maybe you can go even further you can have a a startup",
    "start": "1678039",
    "end": "1683360"
  },
  {
    "text": "class or add tasks that does all defines all the uh dependency injection all the",
    "start": "1683360",
    "end": "1690640"
  },
  {
    "text": "services you need all the middleware that system needs all the end points and the box is very",
    "start": "1690640",
    "end": "1698960"
  },
  {
    "text": "self-contained data is always fun",
    "start": "1702440",
    "end": "1708960"
  },
  {
    "text": "another characteristic of microservices is they are autonomous including with their own data",
    "start": "1708960",
    "end": "1716120"
  },
  {
    "text": "so how do we do this with our Fe features should every feature has its own",
    "start": "1716120",
    "end": "1721440"
  },
  {
    "text": "database sure why not well because multiple databases are expensive sure",
    "start": "1721440",
    "end": "1727519"
  },
  {
    "text": "that's fair we don't have to have multiple databases but we do want to separate data",
    "start": "1727519",
    "end": "1735440"
  },
  {
    "text": "access every feature should own and control its own",
    "start": "1735440",
    "end": "1740559"
  },
  {
    "text": "data in most databases we can use something called a schema as a namespacing",
    "start": "1740559",
    "end": "1747919"
  },
  {
    "text": "functionality we use Entity framework in our application for the very most part",
    "start": "1747919",
    "end": "1753600"
  },
  {
    "text": "and each feature gets its own DB context its own database definition",
    "start": "1753600",
    "end": "1761679"
  },
  {
    "text": "connection definition its own unit of work even so we have a vault it gets a vault",
    "start": "1761679",
    "end": "1769159"
  },
  {
    "text": "context we have a chat feature it gets a chat context some of you are thinking about",
    "start": "1769159",
    "end": "1774720"
  },
  {
    "text": "data duplication do we duplicate data or do we read across the number one",
    "start": "1774720",
    "end": "1780720"
  },
  {
    "text": "rule is never integrate on the database level you integrate on the application",
    "start": "1780720",
    "end": "1788000"
  },
  {
    "text": "level level so yes we have multiple user objects Vault has a concept of a user",
    "start": "1788000",
    "end": "1795480"
  },
  {
    "text": "and chat has a concept of a user these are not the",
    "start": "1795480",
    "end": "1800679"
  },
  {
    "text": "same they represent the same physical thing but they are different",
    "start": "1800679",
    "end": "1808559"
  },
  {
    "text": "representations the things that happen with a vault user are not the same as things that",
    "start": "1810200",
    "end": "1817200"
  },
  {
    "text": "happen with a chat user and not every Vault user is a chat user a vault users",
    "start": "1817200",
    "end": "1823159"
  },
  {
    "text": "for us are are customers but they are also external people that have had a document shared",
    "start": "1823159",
    "end": "1829880"
  },
  {
    "text": "with them they also exist in our vault user table a chat user is only registered",
    "start": "1829880",
    "end": "1839159"
  },
  {
    "text": "customers that have started a conversation with us in the chat",
    "start": "1839159",
    "end": "1844840"
  },
  {
    "text": "interface so now we have data duplication there are mechanisms to get",
    "start": "1847399",
    "end": "1852799"
  },
  {
    "text": "around that I'll I'll touch on that a little later but these tables are not the same and they will coexist in the",
    "start": "1852799",
    "end": "1858200"
  },
  {
    "text": "same database even though it's all both yet named user because they have separate",
    "start": "1858200",
    "end": "1864039"
  },
  {
    "text": "schemas which works the same as namespacing in your programming language we can even assign",
    "start": "1864039",
    "end": "1871519"
  },
  {
    "text": "permissions saying that some parts replication one app is only allowed to",
    "start": "1871519",
    "end": "1877639"
  },
  {
    "text": "access that schema not that",
    "start": "1877639",
    "end": "1880919"
  },
  {
    "text": "schema we use a common DB context a base DB context for",
    "start": "1883799",
    "end": "1890799"
  },
  {
    "text": "this thank you back there that all the uh we have an object",
    "start": "1890799",
    "end": "1898120"
  },
  {
    "text": "Orient language so we just inherit from uh a base DB",
    "start": "1898120",
    "end": "1903600"
  },
  {
    "text": "context it has an abstract property string schema that has",
    "start": "1903600",
    "end": "1910159"
  },
  {
    "text": "to be overwritten in a consuming class or a subass like Vault context it has to",
    "start": "1910159",
    "end": "1916000"
  },
  {
    "text": "override schema I'll say this is schema is called",
    "start": "1916000",
    "end": "1921200"
  },
  {
    "text": "Vault and then on the on model creating in the base class we say that this has a",
    "start": "1921799",
    "end": "1928480"
  },
  {
    "text": "default schema schema so this using abstract properties",
    "start": "1928480",
    "end": "1935200"
  },
  {
    "text": "is a way to enforce discipline to enforce our rules removing the need for the",
    "start": "1935200",
    "end": "1942679"
  },
  {
    "text": "developer to have that discipline on Zone",
    "start": "1942679",
    "end": "1948000"
  },
  {
    "text": "we also like to use a lot of events now events are not just for distributed",
    "start": "1948000",
    "end": "1955279"
  },
  {
    "text": "computing you can use events within a",
    "start": "1955279",
    "end": "1960480"
  },
  {
    "text": "monolith we like to call um instead of just calling other features handlers we",
    "start": "1965679",
    "end": "1971960"
  },
  {
    "text": "like to communicate through events because that makes our future even more Loosely coupled",
    "start": "1971960",
    "end": "1978440"
  },
  {
    "text": "we use inprocess events and mediator is pretty good with this we use a technique from Ard dolls's clean architecture",
    "start": "1978440",
    "end": "1985799"
  },
  {
    "text": "where we have our base entity class which has a listing of domain",
    "start": "1985799",
    "end": "1992320"
  },
  {
    "text": "events where we add domain events and remove domain events and then we have in our DB",
    "start": "1992320",
    "end": "1999320"
  },
  {
    "text": "context class we override the save changes function and then we go through these",
    "start": "1999320",
    "end": "2005960"
  },
  {
    "text": "events and then we publish them with",
    "start": "2005960",
    "end": "2010480"
  },
  {
    "text": "mediator that works very well for inprocess events and what we call we like to separate in domain events and",
    "start": "2011240",
    "end": "2019039"
  },
  {
    "text": "integration events we like to because some events",
    "start": "2019039",
    "end": "2024559"
  },
  {
    "text": "have consequences internally in the domain because this thing changed here",
    "start": "2024559",
    "end": "2029679"
  },
  {
    "text": "then this other thing changes here and that's fine these just happen within the same",
    "start": "2029679",
    "end": "2035840"
  },
  {
    "text": "transaction then we have events some domain events should be translated to external events",
    "start": "2035960",
    "end": "2043880"
  },
  {
    "text": "this is how we do it you might want to do it differently but we found that having Rich domain events using Rich",
    "start": "2043880",
    "end": "2050560"
  },
  {
    "text": "domain objects is helpful in the domain for",
    "start": "2050560",
    "end": "2055800"
  },
  {
    "text": "handling complexity within a domain and then we like to have integration events or external events",
    "start": "2055800",
    "end": "2062638"
  },
  {
    "text": "that go outside the feature that use more dto like data",
    "start": "2062639",
    "end": "2068079"
  },
  {
    "text": "transfer objects they don't use internal types they use external",
    "start": "2068079",
    "end": "2073440"
  },
  {
    "text": "types so we have little classes handlers that pick up internal domain events and publish as integration events",
    "start": "2074639",
    "end": "2081878"
  },
  {
    "text": "as those and here's one of the things you need to be aware of when Crossing DB",
    "start": "2081879",
    "end": "2089158"
  },
  {
    "text": "contexts you don't out of the box have transactional integrity so what we do is that we use",
    "start": "2089159",
    "end": "2096280"
  },
  {
    "text": "the outbox pattern the outbox pattern is you take",
    "start": "2096280",
    "end": "2101560"
  },
  {
    "text": "your event instead of publishing it to something a service or",
    "start": "2101560",
    "end": "2108960"
  },
  {
    "text": "whatever we store it in the database and then we enue a job that",
    "start": "2108960",
    "end": "2116160"
  },
  {
    "text": "we'll pick it up later and actually send it so we send it we send a lot of events",
    "start": "2116160",
    "end": "2121440"
  },
  {
    "text": "through what's Azure event grid but it could be anything it could be rabbit mq it could be",
    "start": "2121440",
    "end": "2127359"
  },
  {
    "text": "service bus it could even be inprocess as well if you want an inprocess event",
    "start": "2127359",
    "end": "2132480"
  },
  {
    "text": "handler we have some things that are separated on other machines or other services so we use event grid to",
    "start": "2132480",
    "end": "2140359"
  },
  {
    "text": "communicate with these the the events storage is also",
    "start": "2140359",
    "end": "2148920"
  },
  {
    "text": "defined on the base DB DB context class so every every DB",
    "start": "2148920",
    "end": "2154920"
  },
  {
    "text": "context gets his own event EV archive or event ceue so they are stored in the",
    "start": "2154920",
    "end": "2161960"
  },
  {
    "text": "same transaction which make sure that whenever we have events",
    "start": "2161960",
    "end": "2170240"
  },
  {
    "text": "happening the changes to my domain objects and all the events external",
    "start": "2171400",
    "end": "2178319"
  },
  {
    "text": "events that are based on those changes are stored in my database in the",
    "start": "2178319",
    "end": "2184319"
  },
  {
    "text": "same transaction so that means if something happens",
    "start": "2184319",
    "end": "2189839"
  },
  {
    "text": "either I get all of the changes and the events or I get none of the changes and none of the events and probably an error",
    "start": "2189839",
    "end": "2196440"
  },
  {
    "text": "somewhere so I don't end up in a half state where the Chang has happened and was never",
    "start": "2196440",
    "end": "2203838"
  },
  {
    "text": "evented you can also with uh Entity framework set up using shared",
    "start": "2206240",
    "end": "2211560"
  },
  {
    "text": "transactions where all your DB context are involved in the same transaction within a request",
    "start": "2211560",
    "end": "2217800"
  },
  {
    "text": "your mileage may vary mine was we were not thrilled with the option it was too",
    "start": "2217800",
    "end": "2223920"
  },
  {
    "text": "much configuration and we weren't quite sure how it would work with in our system we thought this was a better",
    "start": "2223920",
    "end": "2231880"
  },
  {
    "text": "option now we have our clearly defined features",
    "start": "2232200",
    "end": "2237599"
  },
  {
    "text": "we have our domain objects we have application Level handlers we have Services have their own corner of each",
    "start": "2237599",
    "end": "2245599"
  },
  {
    "text": "database external communication is limited to sending off request commands we register some services for",
    "start": "2245599",
    "end": "2255160"
  },
  {
    "text": "notifications we have all the groundwork in place but in a",
    "start": "2255160",
    "end": "2262200"
  },
  {
    "text": "monolith what is stopping our developers from just referring to the internals in",
    "start": "2262200",
    "end": "2267280"
  },
  {
    "text": "one feature from another feature after all if it's in the same",
    "start": "2267280",
    "end": "2272640"
  },
  {
    "text": "application there are no nothing is further away than a using",
    "start": "2272640",
    "end": "2279720"
  },
  {
    "text": "statement so there's basically three options to this",
    "start": "2280359",
    "end": "2285599"
  },
  {
    "text": "one you trust your developers in their",
    "start": "2285599",
    "end": "2289920"
  },
  {
    "text": "discipline which if you say that to a manager they're",
    "start": "2291319",
    "end": "2298079"
  },
  {
    "text": "like really we trust people now when do we start doing that but I",
    "start": "2298560",
    "end": "2305680"
  },
  {
    "text": "find that most of ERS are adults quite incapable of managing",
    "start": "2305680",
    "end": "2310839"
  },
  {
    "text": "themselves and following a set of agreed upon rules so depending on your environment that might work really well",
    "start": "2310839",
    "end": "2317440"
  },
  {
    "text": "we have people tend to do the right things we pair",
    "start": "2317440",
    "end": "2323720"
  },
  {
    "text": "program we review each other's code we say hey oh I see you've did this",
    "start": "2323720",
    "end": "2329760"
  },
  {
    "text": "thing here that doesn't work some people like to create a lot of",
    "start": "2329760",
    "end": "2335800"
  },
  {
    "text": "projects for your features and then use features in your language or in the system to",
    "start": "2335800",
    "end": "2343160"
  },
  {
    "text": "hide stuff for instance you can make classes internal for a",
    "start": "2343160",
    "end": "2348960"
  },
  {
    "text": "feature that way they're not available outside that assembly uh",
    "start": "2348960",
    "end": "2355000"
  },
  {
    "text": "you eliminate the possibility for other classes to reference other classes",
    "start": "2355000",
    "end": "2361880"
  },
  {
    "text": "because you can't sometimes you can't have you can't create Circle references so this thing here cannot reference this",
    "start": "2361880",
    "end": "2367880"
  },
  {
    "text": "thing here because this thing here or reference that thing here and you create a graph of where references can go but",
    "start": "2367880",
    "end": "2375359"
  },
  {
    "text": "it's a very simple graph you can go from here to here but not from here to here",
    "start": "2375359",
    "end": "2381599"
  },
  {
    "text": "and you make big either you make pretty big Islands or you make lots of small",
    "start": "2381599",
    "end": "2388520"
  },
  {
    "text": "ones I'm not a fan of that methodology the multiple projects the whether we",
    "start": "2388520",
    "end": "2394800"
  },
  {
    "text": "need uh an application project project a domain project an infrastructure project we need a web",
    "start": "2394800",
    "end": "2400680"
  },
  {
    "text": "project and then some people go even further we need a feature infrastructure",
    "start": "2400680",
    "end": "2405800"
  },
  {
    "text": "project feature domain project feature thing project and whatever and whatever",
    "start": "2405800",
    "end": "2411079"
  },
  {
    "text": "I'm not a huge fan of that because it tell it forces you to spread your feature out across your",
    "start": "2411079",
    "end": "2418480"
  },
  {
    "text": "application instead of keeping it here there's where it is everything is",
    "start": "2418480",
    "end": "2424880"
  },
  {
    "text": "here is it infrastructure there's application there's domain everything is in one place oh but you reference",
    "start": "2424880",
    "end": "2432480"
  },
  {
    "text": "infrastructure assemblies in the same project as you have your domain code yes I do why not well what if you access the",
    "start": "2432480",
    "end": "2441079"
  },
  {
    "text": "database on your domain objects well I don't that's the discipline part but",
    "start": "2441079",
    "end": "2446960"
  },
  {
    "text": "there's a third option as well you can use enforcable rules there are Frameworks that let you set",
    "start": "2446960",
    "end": "2453079"
  },
  {
    "text": "rules on what part of the application can talk to what other parts of application using",
    "start": "2453079",
    "end": "2459799"
  },
  {
    "text": "namespaces one such as nsep cop and you can make rules such as",
    "start": "2459960",
    "end": "2465640"
  },
  {
    "text": "these saying that everyone is allowed to talk to system whatever and everything Justified do",
    "start": "2465640",
    "end": "2472359"
  },
  {
    "text": "star is allow is allowed to talk to justify common",
    "start": "2472359",
    "end": "2477680"
  },
  {
    "text": "star justify whatever do application",
    "start": "2477680",
    "end": "2483040"
  },
  {
    "text": "whatever is allowed to talk to justify star",
    "start": "2483040",
    "end": "2488240"
  },
  {
    "text": "domain anything that ends in a namespace called Web is is disallowed from talking to",
    "start": "2488680",
    "end": "2495839"
  },
  {
    "text": "anything that ends in justify whatever.",
    "start": "2495839",
    "end": "2501079"
  },
  {
    "text": "doain and if you're in web somewhere you're allowed to talk to application namespaces for instance this is just a",
    "start": "2501079",
    "end": "2507880"
  },
  {
    "text": "simple thing you can make these as easy or as complex as you want but these will create generate",
    "start": "2507880",
    "end": "2514880"
  },
  {
    "text": "build errors on your system system saying hey you're talking to something you're not allowed to talk",
    "start": "2514880",
    "end": "2521720"
  },
  {
    "text": "to and you can make multiple files and so you can have these in your features as well so in your feature you can say",
    "start": "2522240",
    "end": "2530359"
  },
  {
    "text": "what namespaces are allowed to talk to my feature what namespaces are not allowed to talk to what parts of my",
    "start": "2530359",
    "end": "2536280"
  },
  {
    "text": "feature and you can make an hierarchy of this which makes especially if you have larger",
    "start": "2536280",
    "end": "2543119"
  },
  {
    "text": "projects makes it easier to control what who is doing what and it makes it easier to fall into",
    "start": "2543119",
    "end": "2550839"
  },
  {
    "text": "the pit of success it makes it easier for someone new coming into the project and not",
    "start": "2550839",
    "end": "2557160"
  },
  {
    "text": "doing mistakes because it was easy like any if you have tools like if you have a",
    "start": "2557160",
    "end": "2562520"
  },
  {
    "text": "proper IDE using something from the wrong place is like control",
    "start": "2562520",
    "end": "2569119"
  },
  {
    "text": "Dot and then your ID just Imports everything it needs and you're like yeah that was easy sure nice but then this",
    "start": "2569119",
    "end": "2576440"
  },
  {
    "text": "stuff will come up and say hey sorry you can't can't access that from here so you need to fix that oh",
    "start": "2576440",
    "end": "2584519"
  },
  {
    "text": "great so why do we do this we are making things more complex than just file.",
    "start": "2584720",
    "end": "2593119"
  },
  {
    "text": "new yes we are but the complexity we're introducing is",
    "start": "2593119",
    "end": "2599960"
  },
  {
    "text": "actually pretty small I talk to most of the complexity",
    "start": "2599960",
    "end": "2605160"
  },
  {
    "text": "around here in about 40",
    "start": "2605160",
    "end": "2611240"
  },
  {
    "text": "minutes the complexity is fixed compared to the complexity would",
    "start": "2611559",
    "end": "2617240"
  },
  {
    "text": "get as an application grows we have a lot of Base",
    "start": "2617240",
    "end": "2622599"
  },
  {
    "text": "classes we a laid foundation with uh pipeline Handler mediator",
    "start": "2622599",
    "end": "2628880"
  },
  {
    "text": "handlers we have little foundation with who's allowed to talk to",
    "start": "2628880",
    "end": "2635079"
  },
  {
    "text": "who so we make a bunch of foundation things",
    "start": "2635079",
    "end": "2640400"
  },
  {
    "text": "a basic Foundation of your house and we use just reuse",
    "start": "2640400",
    "end": "2646400"
  },
  {
    "text": "that what we're getting back is an application that's pretty",
    "start": "2646400",
    "end": "2652000"
  },
  {
    "text": "modular in its builtup with each module or each feature having a clear",
    "start": "2652000",
    "end": "2658640"
  },
  {
    "text": "responsibility being relatively small in size being easy to reason about because",
    "start": "2658640",
    "end": "2664800"
  },
  {
    "text": "of those things and having fewer reasons for change these are good things these will",
    "start": "2664800",
    "end": "2672440"
  },
  {
    "text": "help you going forward",
    "start": "2672440",
    "end": "2677640"
  },
  {
    "text": "now there are good things about microservices as well I'm not going to trash",
    "start": "2677640",
    "end": "2684480"
  },
  {
    "text": "it anyone heard of Conway's law a",
    "start": "2684480",
    "end": "2689680"
  },
  {
    "text": "couple Conway's law says more or less and I'm paraphrasing because I'm not that good at memorizing but",
    "start": "2689680",
    "end": "2696559"
  },
  {
    "text": "any organization creating a relatively complex system will design a system with",
    "start": "2696559",
    "end": "2703480"
  },
  {
    "text": "an architecture that's the same as this organization so if you have an",
    "start": "2703480",
    "end": "2708680"
  },
  {
    "text": "organization with a bunch of different teams and a bunch of different hierarchies and your organization is",
    "start": "2708680",
    "end": "2714040"
  },
  {
    "text": "making a complex system if you look at the system and your organization charge it will look",
    "start": "2714040",
    "end": "2719720"
  },
  {
    "text": "the same and if you have an organization a",
    "start": "2719720",
    "end": "2726119"
  },
  {
    "text": "bunch of different teams as an organization",
    "start": "2726119",
    "end": "2731440"
  },
  {
    "text": "scales monoliths really don't scale well with them splitting out parts of your",
    "start": "2731440",
    "end": "2737800"
  },
  {
    "text": "monolith to be autonomously managed by autonomous",
    "start": "2737800",
    "end": "2743040"
  },
  {
    "text": "teams that might be a good way to scale saying okay you folks over",
    "start": "2743200",
    "end": "2751319"
  },
  {
    "text": "there because what you're if you keep clinging to the monolith",
    "start": "2751319",
    "end": "2756559"
  },
  {
    "text": "and fighting the organization you've moved all of the distributed fallacies from your software",
    "start": "2756559",
    "end": "2763839"
  },
  {
    "text": "to your organization so instead of all the stuff between Services is not between people",
    "start": "2763839",
    "end": "2770480"
  },
  {
    "text": "because all of these people that are not delayed or not connected now have hard couplings through our",
    "start": "2770480",
    "end": "2778240"
  },
  {
    "text": "monolith and that's not a good thing part of the application might have",
    "start": "2778240",
    "end": "2783359"
  },
  {
    "text": "different technical demands we had one issue where uh we were",
    "start": "2783359",
    "end": "2789400"
  },
  {
    "text": "running a lot of stuff on the Azure app services and we're generating",
    "start": "2789400",
    "end": "2794839"
  },
  {
    "text": "PDFs and we have designers who want a particular font for their PDFs it turns out custom fonts and PDF",
    "start": "2794839",
    "end": "2802280"
  },
  {
    "text": "generation on Azure app Services is not a good thing they've later fixed it but",
    "start": "2802280",
    "end": "2808280"
  },
  {
    "text": "back then we had to split that part out and run on own kind of job in order to get custom fonts going properly",
    "start": "2808280",
    "end": "2816359"
  },
  {
    "text": "because Azure app service is a pretty sandboxed environment and custom fonts didn't do well",
    "start": "2816359",
    "end": "2822319"
  },
  {
    "text": "there scaling one part of the application",
    "start": "2822319",
    "end": "2827720"
  },
  {
    "text": "individually a monolith is deployed as a unit and if you want to scale a part of",
    "start": "2827800",
    "end": "2835359"
  },
  {
    "text": "the monolith you have to scale everything I've I talked to um to one",
    "start": "2835359",
    "end": "2842920"
  },
  {
    "text": "guy they had they had a log on that you could log on to their app and they had a they've",
    "start": "2842920",
    "end": "2850319"
  },
  {
    "text": "been taught well so they encrypted and salted their pass passwords with a really hard encryption method that took",
    "start": "2850319",
    "end": "2857000"
  },
  {
    "text": "a long time because that makes it hard to make the Brute Force",
    "start": "2857000",
    "end": "2862119"
  },
  {
    "text": "things the problem was that this was a service that was used for a particular",
    "start": "2862119",
    "end": "2868440"
  },
  {
    "text": "industry in the UK so every morning hundreds of thousands of people would",
    "start": "2868440",
    "end": "2873880"
  },
  {
    "text": "log on on the same at the same time and their server would just",
    "start": "2873880",
    "end": "2880400"
  },
  {
    "text": "go and the thing that took the most time was the password encryption part so they took that part out and put",
    "start": "2881280",
    "end": "2889960"
  },
  {
    "text": "it somewhere else and scal that",
    "start": "2889960",
    "end": "2895520"
  },
  {
    "text": "enormously which was a lot cheaper than scaling the whole",
    "start": "2895520",
    "end": "2902319"
  },
  {
    "text": "application so you figured out okay I have a reason to build a microservice or at least",
    "start": "2904640",
    "end": "2911359"
  },
  {
    "text": "start making a distributed application if you're not careful you make a distributed",
    "start": "2911359",
    "end": "2917920"
  },
  {
    "text": "monolith with all the disadvantages of both sides of that coin like yes I would",
    "start": "2917920",
    "end": "2923800"
  },
  {
    "text": "like those disadvantages and I'll take those as well it's not really a good",
    "start": "2923800",
    "end": "2930400"
  },
  {
    "text": "idea but you've been paying attention so your application ready for this so you",
    "start": "2930400",
    "end": "2936000"
  },
  {
    "text": "can start carving this monolith you can start taking things out",
    "start": "2936000",
    "end": "2941400"
  },
  {
    "text": "into its own service the thing about distribut application if you're not",
    "start": "2941400",
    "end": "2948480"
  },
  {
    "text": "careful you drag along all the couplings that used to be inside a process are now",
    "start": "2948559",
    "end": "2955119"
  },
  {
    "text": "going across the wire but we have our thing service",
    "start": "2955119",
    "end": "2961599"
  },
  {
    "text": "right and our thing service clearly defines in our thing feature clearly",
    "start": "2961599",
    "end": "2966920"
  },
  {
    "text": "defines how other people should talk to us and the thing dto clearly defines how we should ship data to other services",
    "start": "2966920",
    "end": "2974440"
  },
  {
    "text": "and we have we subscribe to events from other domains through",
    "start": "2974440",
    "end": "2979720"
  },
  {
    "text": "external events so it becomes relatively easy to",
    "start": "2979720",
    "end": "2984839"
  },
  {
    "text": "take our little thing feature and put it on another",
    "start": "2984839",
    "end": "2991160"
  },
  {
    "text": "machine and back on the monolith we leave a",
    "start": "2991160",
    "end": "2996359"
  },
  {
    "text": "I think service interface which can be implanted with HTP or grpc",
    "start": "2996359",
    "end": "3004039"
  },
  {
    "text": "clients and because you've taken care in making the seams in your application",
    "start": "3006240",
    "end": "3014920"
  },
  {
    "text": "explicit It's relatively easy to cut along those lines and say this",
    "start": "3015480",
    "end": "3021160"
  },
  {
    "text": "thing now belongs over here we did hook this up to subscribe to",
    "start": "3021160",
    "end": "3028319"
  },
  {
    "text": "events but it already has the same event consumers that it used to have over",
    "start": "3028319",
    "end": "3033359"
  },
  {
    "text": "there they're talking to the same event system if you have an external event",
    "start": "3033359",
    "end": "3039079"
  },
  {
    "text": "broker if not you have to ince that as well which is not a huge amount of work it's",
    "start": "3039079",
    "end": "3045480"
  },
  {
    "text": "non-trivial but it's not massive anyone still talking to your",
    "start": "3045480",
    "end": "3050760"
  },
  {
    "text": "things service does that through a well-defined API public",
    "start": "3050760",
    "end": "3056160"
  },
  {
    "text": "API anyone talking to all your endpoints if they're API endpoints they come with you you just add endpoints add feature",
    "start": "3056160",
    "end": "3064200"
  },
  {
    "text": "in the new app so carving out parts of your",
    "start": "3064200",
    "end": "3071680"
  },
  {
    "text": "monolith and putting them somewhere else if you follow the general",
    "start": "3071680",
    "end": "3078960"
  },
  {
    "text": "rules this process is never going to make you",
    "start": "3078960",
    "end": "3083240"
  },
  {
    "text": "cry so",
    "start": "3084359",
    "end": "3091520"
  },
  {
    "text": "summarize starting new application with microservices in the beginning or distributed application that's playing",
    "start": "3091520",
    "end": "3096720"
  },
  {
    "text": "this game on hard mode lots of work very little return in whatever foreseeable future you have I call yagy you ain't",
    "start": "3096720",
    "end": "3103240"
  },
  {
    "text": "going to need it most people don't microservices was a thing because",
    "start": "3103240",
    "end": "3108319"
  },
  {
    "text": "Netflix started with it but sorry you're not Netflix there are advantages to it there",
    "start": "3108319",
    "end": "3115040"
  },
  {
    "text": "are places where it is definitely Val valuable I had",
    "start": "3115040",
    "end": "3120079"
  },
  {
    "text": "one person come up to me after I did this talk some other place and he was wondering what he should do because he's",
    "start": "3120079",
    "end": "3125119"
  },
  {
    "text": "starting a new project in six months and he has a team of 40 developers you should probably start with this trib",
    "start": "3125119",
    "end": "3131760"
  },
  {
    "text": "application because this getting 40 developers to start working on a monolith is probably going to be playing",
    "start": "3131760",
    "end": "3137040"
  },
  {
    "text": "that game on hard mod mode as well but you should be very careful on maybe we should make a few",
    "start": "3137040",
    "end": "3143760"
  },
  {
    "text": "monist building a modular monolith would give you many of the advantages of microservices but very few",
    "start": "3144280",
    "end": "3151839"
  },
  {
    "text": "of the disadvantages and you get some extra advantages instead like IDE support",
    "start": "3151839",
    "end": "3158599"
  },
  {
    "text": "refactorings requires a little more thinking but the ab additional complexity is more or less",
    "start": "3158599",
    "end": "3165599"
  },
  {
    "text": "fixed use services or events for cross feature communication making clear seams you can",
    "start": "3165599",
    "end": "3172400"
  },
  {
    "text": "cut along when carving it out the point of",
    "start": "3172400",
    "end": "3178280"
  },
  {
    "text": "this is not to build something ready to be distributed like I can do microservices any day that's not the",
    "start": "3178280",
    "end": "3185720"
  },
  {
    "text": "point the point is to make a maintainable",
    "start": "3185720",
    "end": "3191400"
  },
  {
    "text": "monolith The Carving part is a bonus",
    "start": "3191400",
    "end": "3197839"
  },
  {
    "text": "so summarize again good monolith it's never going to make a cry it's",
    "start": "3197839",
    "end": "3203880"
  },
  {
    "text": "awesome and questions I have prices if you want to ask",
    "start": "3203880",
    "end": "3210359"
  },
  {
    "text": "questions yes",
    "start": "3210640",
    "end": "3214039"
  },
  {
    "text": "sir for example uh like I have a created or Modified by user yes uh and this is",
    "start": "3223000",
    "end": "3229920"
  },
  {
    "text": "an employee but if you use separate context you lose the relational advantages of the database so yes so he",
    "start": "3229920",
    "end": "3237559"
  },
  {
    "text": "also works with multiple uh DB contexts and if you there are some properties",
    "start": "3237559",
    "end": "3244160"
  },
  {
    "text": "that are changed like modified bu uh and then you lose the relational",
    "start": "3244160",
    "end": "3249520"
  },
  {
    "text": "properties true and no because you mult you duplicate the relational properties",
    "start": "3249520",
    "end": "3255240"
  },
  {
    "text": "for instance if you have modified buy as a user ID you will have a user in every",
    "start": "3255240",
    "end": "3260520"
  },
  {
    "text": "context that uses a user and they are d duplicates of",
    "start": "3260520",
    "end": "3266599"
  },
  {
    "text": "whatever for instance the user feature which has the master data so whenever a",
    "start": "3266599",
    "end": "3271960"
  },
  {
    "text": "user is created we have events that make sure that that particular user exists in the domains that need it or the domains",
    "start": "3271960",
    "end": "3279359"
  },
  {
    "text": "that need it they subscribe to a user event create event and they create their own version of that user with the same",
    "start": "3279359",
    "end": "3286839"
  },
  {
    "text": "ID across these domains so that I have a modified buy ID",
    "start": "3286839",
    "end": "3292200"
  },
  {
    "text": "here which is related to a user here",
    "start": "3292200",
    "end": "3297078"
  },
  {
    "text": "so that's what we do in that case you have a a lot of duplicate data then for",
    "start": "3297880",
    "end": "3302960"
  },
  {
    "text": "case I have a lot of duplicate data doesn't matter data is stories is cheaper than",
    "start": "3302960",
    "end": "3308480"
  },
  {
    "text": "dirt um the disadvantage is to keep data",
    "start": "3308480",
    "end": "3314160"
  },
  {
    "text": "updated so you have to do that work in addition we solve that depending on the",
    "start": "3314160",
    "end": "3320599"
  },
  {
    "text": "data we solve it in multiple ways often we go by events",
    "start": "3320599",
    "end": "3325640"
  },
  {
    "text": "so usually we don't need a lot maybe we have just ID and the name so we subscribe to name change events so",
    "start": "3325640",
    "end": "3331920"
  },
  {
    "text": "whenever user changes the name that is updated over there that an event is published in this domain I have",
    "start": "3331920",
    "end": "3339559"
  },
  {
    "text": "a user I subscribe to user created I subscribe to username change events and I make sure to update that thing and",
    "start": "3339559",
    "end": "3346400"
  },
  {
    "text": "this is code that is so common that we have a lot of that code in our common libraries so we just pull in that",
    "start": "3346400",
    "end": "3352119"
  },
  {
    "text": "Handler and just do that thing um in other cases we just have jobs that",
    "start": "3352119",
    "end": "3358039"
  },
  {
    "text": "just synchronize across domains every night saying Hey I want all the",
    "start": "3358039",
    "end": "3363200"
  },
  {
    "text": "customers just give me the give me that list and I'm done uh because we're okay",
    "start": "3363200",
    "end": "3368280"
  },
  {
    "text": "with the eventual consistency that we get we pay that",
    "start": "3368280",
    "end": "3374000"
  },
  {
    "text": "price we pay that toll for data sync to avoid the toll of having hard couplings",
    "start": "3374000",
    "end": "3382559"
  },
  {
    "text": "between domains it's a trade-off like everything else in this",
    "start": "3382559",
    "end": "3388079"
  },
  {
    "text": "business but it's it's an excellent question thank you for asking it and uh come collect your",
    "start": "3388079",
    "end": "3394319"
  },
  {
    "text": "price or catch if you want oh there you go other",
    "start": "3394319",
    "end": "3402319"
  },
  {
    "text": "questions yes over there he saw the mic and was ready to go for it yeah it was",
    "start": "3403960",
    "end": "3409119"
  },
  {
    "text": "close um so I understand that it's a bit like microservices but without all the",
    "start": "3409119",
    "end": "3415799"
  },
  {
    "text": "distributed thing and network connections but uh with data you do duplications so you communicate via",
    "start": "3415799",
    "end": "3422000"
  },
  {
    "text": "events so a lot of like microservices would do um do you find yourself needing",
    "start": "3422000",
    "end": "3428559"
  },
  {
    "text": "um patterns like choreography or orchestration to like connect different",
    "start": "3428559",
    "end": "3433599"
  },
  {
    "text": "features between like if there um there are some time dependencies or things",
    "start": "3433599",
    "end": "3438960"
  },
  {
    "text": "need to happen before one or something waits for multiple events before it",
    "start": "3438960",
    "end": "3444280"
  },
  {
    "text": "happens kind of like sagas and orchestrating between different features we haven't had a lot of that",
    "start": "3444280",
    "end": "3450319"
  },
  {
    "text": "issues uh for us the seams we've been making have been",
    "start": "3450319",
    "end": "3455480"
  },
  {
    "text": "pretty good at so the question was if do we have the need to orchestrate things to happen across domains a lot we have",
    "start": "3455480",
    "end": "3463280"
  },
  {
    "text": "managed to avoid that problem uh if you have that problem",
    "start": "3463280",
    "end": "3468640"
  },
  {
    "text": "there are well established patterns to fix this and it's the same whether you have a module of monolith or you have",
    "start": "3468640",
    "end": "3474520"
  },
  {
    "text": "distrib application except it's actually easier to do it in the distributed monolith um we have things where",
    "start": "3474520",
    "end": "3481359"
  },
  {
    "text": "something happens here at cison events and then something happens here but for",
    "start": "3481359",
    "end": "3486640"
  },
  {
    "text": "us it's we don't have we haven't had the need to orchestrate these um if you do that I'd recommend",
    "start": "3486640",
    "end": "3494880"
  },
  {
    "text": "looking at stuff like mass transit or end service bus to handle the",
    "start": "3494880",
    "end": "3500039"
  },
  {
    "text": "inter feature communication events which has patterns for doing this stuff and",
    "start": "3500039",
    "end": "3506000"
  },
  {
    "text": "all of that whenever you have events orchestrated across feature that is a business process that needs to be",
    "start": "3506000",
    "end": "3512400"
  },
  {
    "text": "modeled and the way you do it is completely dependent on your business think so for instance can you uh can you",
    "start": "3512400",
    "end": "3519960"
  },
  {
    "text": "cancel an order that is in process how does that work that's those are business decisions so we haven't had to but there",
    "start": "3519960",
    "end": "3527760"
  },
  {
    "text": "are established patterns to do orchestrations and sagas so I just lean on I would just lean on those did that",
    "start": "3527760",
    "end": "3533599"
  },
  {
    "text": "answer your question yep yep come collect your PL",
    "start": "3533599",
    "end": "3538440"
  },
  {
    "text": "price I don't know intercept pass it back yes in the back",
    "start": "3539839",
    "end": "3545599"
  },
  {
    "text": "there blue shirt have 48 seconds I just raised my R",
    "start": "3545599",
    "end": "3554680"
  },
  {
    "text": "my hand for the chocolate oh sure that's I can respect that come collect it right um no my question is around managing",
    "start": "3554680",
    "end": "3561920"
  },
  {
    "text": "releases and deployment with when have multiple teams working on the same code",
    "start": "3561920",
    "end": "3567839"
  },
  {
    "text": "base yep so so multiple teams working on the same code base multiple teams is one",
    "start": "3567839",
    "end": "3573559"
  },
  {
    "text": "of the reasons to go to a micros or distributed application shape",
    "start": "3573559",
    "end": "3579480"
  },
  {
    "text": "uh when you do it is sort of up to you you do it when it starts to hurt too",
    "start": "3579480",
    "end": "3584799"
  },
  {
    "text": "much we have a monor repo everything is in one repo in GitHub front end backend",
    "start": "3584799",
    "end": "3590920"
  },
  {
    "text": "everything all everything is there so it's relatively easy for us to do do CI checks make sure that nothing breaks",
    "start": "3590920",
    "end": "3596920"
  },
  {
    "text": "whenever someone makes a change everything still works we're sometimes working in two to three",
    "start": "3596920",
    "end": "3603960"
  },
  {
    "text": "different teams on different things and so far it works well if we get a lot more then maybe if",
    "start": "3603960",
    "end": "3612960"
  },
  {
    "text": "we start allocating and because all of our devs are pretty much all over the place so it works",
    "start": "3612960",
    "end": "3619559"
  },
  {
    "text": "well eventually we'll probably grow to a point where we start assigning more like",
    "start": "3619559",
    "end": "3624720"
  },
  {
    "text": "okay you folks work over there with this thing you folks work over here with this thing then maybe it makes sense to split",
    "start": "3624720",
    "end": "3630599"
  },
  {
    "text": "things apart but even then I'd be hesitant",
    "start": "3630599",
    "end": "3636079"
  },
  {
    "text": "because since we're working in features it's perfectly fine for someone to fix",
    "start": "3636079",
    "end": "3641680"
  },
  {
    "text": "that Fe something in that feature that and someone else to work on that feature and not step on each other's",
    "start": "3641680",
    "end": "3647760"
  },
  {
    "text": "toes and since we we deploy often and automatically so whenever someone does",
    "start": "3647760",
    "end": "3654280"
  },
  {
    "text": "something it's in production shortly after so we don't really have to wait to coordinate different deployments and",
    "start": "3654280",
    "end": "3659480"
  },
  {
    "text": "anything like that because we when we're done we ship it and it gets deployed and",
    "start": "3659480",
    "end": "3665760"
  },
  {
    "text": "nothing goes in to our main branch without being production ready so uh for us it's not an",
    "start": "3665760",
    "end": "3673200"
  },
  {
    "text": "issue but if we grow especially as your organization grows a lot then this",
    "start": "3673200",
    "end": "3679880"
  },
  {
    "text": "becomes a problem if you have a hierarchy in your organization then maybe you'd split",
    "start": "3679880",
    "end": "3685079"
  },
  {
    "text": "yes this was time come up and collect your chocolate I'm not going to throw it down there if anyone else is wondering",
    "start": "3685079",
    "end": "3690119"
  },
  {
    "text": "you look for the guy in the pink T-shirt thank",
    "start": "3690119",
    "end": "3696000"
  },
  {
    "text": "you",
    "start": "3699720",
    "end": "3702720"
  }
]