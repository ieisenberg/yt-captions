[
  {
    "text": "so this is functional design patterns and principles and whether something is",
    "start": "10019",
    "end": "18810"
  },
  {
    "text": "a principle or a pattern sort of depends on what your language is so I'm gonna do",
    "start": "18810",
    "end": "24270"
  },
  {
    "text": "this the language I'm gonna use is f-sharp for demonstrating but the the",
    "start": "24270",
    "end": "29609"
  },
  {
    "text": "concepts work in pretty much any programming language I of them maybe COBOL certainly you know JavaScript or",
    "start": "29609",
    "end": "36690"
  },
  {
    "text": "Python or something so if you're using a you know a language with these things",
    "start": "36690",
    "end": "43080"
  },
  {
    "text": "built-in then there'd be principles and if they're not built-in there's a pattern so whatever you want to call it",
    "start": "43080",
    "end": "49229"
  },
  {
    "text": "okay so my name is Scott blushing just my Twitter handle and can you see there",
    "start": "49229",
    "end": "55860"
  },
  {
    "text": "on the screen just fixing something here",
    "start": "55860",
    "end": "63750"
  },
  {
    "text": "there we go my name's Scott volution I have a website f-sharp for fun and",
    "start": "63750",
    "end": "69930"
  },
  {
    "text": "profit comm which is if you can guess it's about f-sharp and there you go so",
    "start": "69930",
    "end": "76740"
  },
  {
    "text": "let me before I get into a functional programming patterns I just want to tell you a bit about myself because a lot of",
    "start": "76740",
    "end": "82950"
  },
  {
    "text": "people think that functional programmers are you know very academic and very",
    "start": "82950",
    "end": "89850"
  },
  {
    "text": "intellectual and stuff and that certainly doesn't apply to me because I used to be just a normal person this is",
    "start": "89850",
    "end": "96359"
  },
  {
    "text": "me in my childhood as you can tell I'm pretty old this is a childhood photo",
    "start": "96359",
    "end": "101460"
  },
  {
    "text": "that's that's me down there was a family holiday they didn't work out very well",
    "start": "101460",
    "end": "107640"
  },
  {
    "text": "and you know I was my first love was actually small talk so I'm actually an",
    "start": "107640",
    "end": "113369"
  },
  {
    "text": "oo programmer I'm not like a pure functional programmer and even the small talk beeping this motor was real oh oh",
    "start": "113369",
    "end": "119490"
  },
  {
    "text": "by the way people in the Java oo that's not real over so even the small talk people would be snobby and they're a",
    "start": "119490",
    "end": "125969"
  },
  {
    "text": "tease the Java people and you know enterpriser it's like shooting fish in a barrel or marine vertebrates and an",
    "start": "125969",
    "end": "133500"
  },
  {
    "text": "abstract bowel proxy factory so we would make fun of Java just like everyone else does but they're not introduces some",
    "start": "133500",
    "end": "139800"
  },
  {
    "text": "functional programmers and this is what they look like and I especially captured by these people and",
    "start": "139800",
    "end": "146510"
  },
  {
    "text": "taken away to an ivory tower and actually they put me in the ivory tower the Haskell people actually have at the",
    "start": "146510",
    "end": "152720"
  },
  {
    "text": "very top of the RV tower they're sharp people that's me we're on the second floor the Visual Basic people were down",
    "start": "152720",
    "end": "158930"
  },
  {
    "text": "at the basement the list people like on a completely different planet so anyway",
    "start": "158930",
    "end": "164360"
  },
  {
    "text": "so I've come back from the Eiffel Tower thumbs up from the ivory tower and I can",
    "start": "164360",
    "end": "169790"
  },
  {
    "text": "now say with a straight face all these weird functional programming things like you know omona and it's just a mono din",
    "start": "169790",
    "end": "175700"
  },
  {
    "text": "the kabuna functors and yeah that's yeah it's easy what's the problem you know so",
    "start": "175700",
    "end": "181070"
  },
  {
    "text": "this is what's really off-putting to functional program people so I will not",
    "start": "181070",
    "end": "186980"
  },
  {
    "text": "say this in this talk except maybe at the very end so there's going to be a very easy beginners talk on functional",
    "start": "186980",
    "end": "193460"
  },
  {
    "text": "programming so if you're an expert already if you were to understand that you know that I find this interesting but I promise I won't use any weird",
    "start": "193460",
    "end": "199430"
  },
  {
    "text": "words so design plans this is what we were taught in the ivory tower okay so",
    "start": "199430",
    "end": "206210"
  },
  {
    "text": "you know all these low design pans from the Gang of Four and this is what we're",
    "start": "206210",
    "end": "212570"
  },
  {
    "text": "taught it's the functions you know open/close principles do that with functions dependency inversion principle",
    "start": "212570",
    "end": "219380"
  },
  {
    "text": "functions functions you know functions functions and functions so it's and this is true by",
    "start": "219380",
    "end": "228740"
  },
  {
    "text": "the way the problem is functional patterns are different the real thing is I'm not",
    "start": "228740",
    "end": "234620"
  },
  {
    "text": "trying to put down our patents because the function of people have their own patents and anyone who says they don't",
    "start": "234620",
    "end": "240140"
  },
  {
    "text": "is fooling themselves it's just they're very different so it's true that you can",
    "start": "240140",
    "end": "245900"
  },
  {
    "text": "do the strategy pattern with functions but the functional people you know have to do monads and they have to do other",
    "start": "245900",
    "end": "252110"
  },
  {
    "text": "patterns in the program so that's basically what this torts going to be about so I'll talk about some this is",
    "start": "252110",
    "end": "258980"
  },
  {
    "text": "the basic outline of the talk I talk about some core principles functions as parameters which just solve the key",
    "start": "258980",
    "end": "265060"
  },
  {
    "text": "functions as functions and functions everywhere well then I'll talk about",
    "start": "265060",
    "end": "270530"
  },
  {
    "text": "continuations and partial application which are really really important then I'll talk about manners and",
    "start": "270530",
    "end": "276670"
  },
  {
    "text": "hopefully I won't if you can all kind of haven't do a mass exodus at that point but how monads are useful that everyone",
    "start": "276670",
    "end": "283640"
  },
  {
    "text": "thinks about - about Wyatt why why do people go on about monads all the time I'll talk about maps how you deal with",
    "start": "283640",
    "end": "291170"
  },
  {
    "text": "data that's been wrapped up like things like lists and so on and then I'll talk about mono AIDS",
    "start": "291170",
    "end": "296870"
  },
  {
    "text": "that's another mathematical word and one of the problems with the functional",
    "start": "296870",
    "end": "302210"
  },
  {
    "text": "programming world is that all the words that are used all kind of mathematical words you know monads and modes and",
    "start": "302210",
    "end": "307640"
  },
  {
    "text": "functors and sounds really confusing them complicated and kind unfortunately",
    "start": "307640",
    "end": "314300"
  },
  {
    "text": "the math addition sort of got there first the actual concepts are really not that complicated it's just you know if",
    "start": "314300",
    "end": "320600"
  },
  {
    "text": "you just get your head past the words being strange the fundamental concepts are pretty straightforward so some of",
    "start": "320600",
    "end": "328010"
  },
  {
    "text": "these things will be patterns you know if you're doing this in JavaScript you don't have monads built-in so that would be a language pattern if you're doing",
    "start": "328010",
    "end": "334220"
  },
  {
    "text": "Haskell monads built-ins it's not yes just a fundamental thing yeah all right",
    "start": "334220",
    "end": "340150"
  },
  {
    "text": "it's gonna be one of those tours where you whiz round you know you see all the",
    "start": "340150",
    "end": "345320"
  },
  {
    "text": "sites in like five minutes you don't really get a chance to stop and visit probably there's no way you",
    "start": "345320",
    "end": "351170"
  },
  {
    "text": "can understand everything in this in an hour it's really just like I say so super fast or you can say look I saw this I saw the Eiffel Tower",
    "start": "351170",
    "end": "357530"
  },
  {
    "text": "you know I saw Big Ben or whatever I can come back later and actually spend some time if it looks interesting so I'll",
    "start": "357530",
    "end": "363230"
  },
  {
    "text": "show you what they look like if you think it's interesting you can learn all about it later on so don't worry if you",
    "start": "363230",
    "end": "369260"
  },
  {
    "text": "don't understand everything there's no way you could understand it all right so let's start with some core principles",
    "start": "369260",
    "end": "375310"
  },
  {
    "text": "most important things to understand about functional programming first all",
    "start": "375310",
    "end": "380420"
  },
  {
    "text": "functions are things we think in the oow world we differentiate between methods",
    "start": "380420",
    "end": "385970"
  },
  {
    "text": "and data in functional programming they're just things like everything else",
    "start": "385970",
    "end": "391030"
  },
  {
    "text": "composition everywhere so a composition like Lego gluing things together to make bigger things so no inheritance no",
    "start": "391030",
    "end": "399730"
  },
  {
    "text": "onions that's just like composition everywhere you'll see and then types are not the same thing as classes nowhere",
    "start": "399730",
    "end": "404900"
  },
  {
    "text": "it's more like sets and it turns out to be quite useful in some ways and we'll talk about that so",
    "start": "404900",
    "end": "410970"
  },
  {
    "text": "let's talk about functions as things so here's a function and I like to use this kind of railway track analogy a lot so",
    "start": "410970",
    "end": "417419"
  },
  {
    "text": "here's a little piece of railway track and there's little tunnel on it and something comes in like an apple goes in along the railway track and it comes out",
    "start": "417419",
    "end": "423930"
  },
  {
    "text": "of the tunnel that's a banana right and we would say this is a function that turns apples into bananas right and we",
    "start": "423930",
    "end": "431009"
  },
  {
    "text": "like this Apple our banana that's your function it's a standalone thing it's",
    "start": "431009",
    "end": "437159"
  },
  {
    "text": "not attached to it it's not a method it's not attached to class it's just a thing so here is how you might define a",
    "start": "437159",
    "end": "443819"
  },
  {
    "text": "normal thing like is there a equals one and you know the compiler makes this a box and it puts the one in it and it",
    "start": "443819",
    "end": "449190"
  },
  {
    "text": "calls it said I guess you used to that in a functional programming language like F sharp you say here is a function",
    "start": "449190",
    "end": "455370"
  },
  {
    "text": "let add of x and y equals x and soy and it basically meant that good pilot makes them but a railway track but what's",
    "start": "455370",
    "end": "463680"
  },
  {
    "text": "interesting is the same word is used let in both cases and that basically defines",
    "start": "463680",
    "end": "470159"
  },
  {
    "text": "something and it's not coincidence the same word that's used because defining a",
    "start": "470159",
    "end": "476370"
  },
  {
    "text": "function and defining a simple thing not that different I mean you sort of",
    "start": "476370",
    "end": "481889"
  },
  {
    "text": "interchangeable functions are things just like integers and strings as on so functions are things they can be used",
    "start": "481889",
    "end": "489240"
  },
  {
    "text": "anywhere a normal think amuse so they can use be used as inputs and outputs for example so here is a function that",
    "start": "489240",
    "end": "495509"
  },
  {
    "text": "returns a function now don't worry about the actual chef sharp code but look at the pretty pictures instead so there's a",
    "start": "495509",
    "end": "501659"
  },
  {
    "text": "piece of where we track the input there's a normal integer where the output is a function there's the",
    "start": "501659",
    "end": "506969"
  },
  {
    "text": "function there or here's a function which has something as an input a function is the input and the output is",
    "start": "506969",
    "end": "513870"
  },
  {
    "text": "an integer or here is another example which is a some sort of transformation",
    "start": "513870",
    "end": "521490"
  },
  {
    "text": "thing it takes an integer as the input it's a bit certain just output but there's an extra thing an extra parameter which sort of controls how it",
    "start": "521490",
    "end": "528329"
  },
  {
    "text": "works my strategy if you want so",
    "start": "528329",
    "end": "533430"
  },
  {
    "text": "functions as inputs functions out sports functions as parameters that's it once you understand that concept a lot",
    "start": "533430",
    "end": "540440"
  },
  {
    "text": "of the complexity is basically you can see and get really complex stuff building from this right you can have",
    "start": "540440",
    "end": "546560"
  },
  {
    "text": "functions that return functions that in turn return other functions that have functions of family you can't get complicated but the basic principles",
    "start": "546560",
    "end": "553040"
  },
  {
    "text": "that that's it that really is it there are no you know manager classes and",
    "start": "553040",
    "end": "558740"
  },
  {
    "text": "though factories know you know whatever that's really all it is okay so composition composition",
    "start": "558740",
    "end": "565160"
  },
  {
    "text": "everywhere here we have two functions and one is an apple - banana function",
    "start": "565160",
    "end": "570800"
  },
  {
    "text": "another is a banana cherry function and I want to glue them together what is the",
    "start": "570800",
    "end": "576350"
  },
  {
    "text": "obvious way of gluing them together well I take them and I kind of stick them out I take the output of one and I glue it",
    "start": "576350",
    "end": "581930"
  },
  {
    "text": "into the input the other and what we have now is a new function which is an apple to cherry function that's",
    "start": "581930",
    "end": "588949"
  },
  {
    "text": "composition that's all it is just gluing two functions together to make a bigger function but there's a couple of cool things first of all this new function",
    "start": "588949",
    "end": "595490"
  },
  {
    "text": "you can't tell it was built from small functions it's now another function and I can then take this function and glue",
    "start": "595490",
    "end": "601279"
  },
  {
    "text": "it with other functions to make an even bigger function and the cool thing is the banana disappeared weight of the",
    "start": "601279",
    "end": "606800"
  },
  {
    "text": "banana go there was a banana originally and it's not there anymore so this is how you kind of get encapsulation right",
    "start": "606800",
    "end": "613610"
  },
  {
    "text": "the the the low-level code cares about bananas but when I've built up a high level piece of code the bananas have",
    "start": "613610",
    "end": "619250"
  },
  {
    "text": "disappeared and all I care about is apples and cherries so when you're",
    "start": "619250",
    "end": "624290"
  },
  {
    "text": "designing this composition its functions all the way down let's say you start",
    "start": "624290",
    "end": "630350"
  },
  {
    "text": "with some low-level operation like upper casing a string it takes a string as",
    "start": "630350",
    "end": "635510"
  },
  {
    "text": "input it and spits the string as output okay that's a very simple function but then we take a bunch of these kind of low-level operations and we glue them",
    "start": "635510",
    "end": "641779"
  },
  {
    "text": "together and we get like a service like an address validation service okay where",
    "start": "641779",
    "end": "648050"
  },
  {
    "text": "you the input is an address and the output is some sort of validation result and for the min alleles unused I mean",
    "start": "648050",
    "end": "655910"
  },
  {
    "text": "some people might know know what a service is right because you might be a millennial a service is just like a",
    "start": "655910",
    "end": "661430"
  },
  {
    "text": "micro service but without the micro in front",
    "start": "661430",
    "end": "666470"
  },
  {
    "text": "no I they take me services you clear them together you get a particular whole use case like updating your user profile",
    "start": "666470",
    "end": "673830"
  },
  {
    "text": "or something on a website requests comes in and the result comes out and then you",
    "start": "673830",
    "end": "679440"
  },
  {
    "text": "take all these use cases and you stick them together into a web application and the input is an HTTP HTTP request and",
    "start": "679440",
    "end": "685830"
  },
  {
    "text": "the output is an HTTP response and inside now you have to have some sort of switch where you decide which use case",
    "start": "685830",
    "end": "692970"
  },
  {
    "text": "to run you know a controller or a dispatcher or whatever you want to call it so you can see this kind of fractal",
    "start": "692970",
    "end": "699810"
  },
  {
    "text": "composition you build big things out of small things that's the fundamental principle of functional programming all",
    "start": "699810",
    "end": "706830"
  },
  {
    "text": "right another one types are not classes and now we're talking about statically typed function program here so not",
    "start": "706830",
    "end": "712950"
  },
  {
    "text": "JavaScript or closure but F sharp and has two one so on so what is the type if",
    "start": "712950",
    "end": "718380"
  },
  {
    "text": "it's not a class the type is just the name for a set of things that can be",
    "start": "718380",
    "end": "725279"
  },
  {
    "text": "used as inputs or outputs so here we have a function it's got a set of inputs and set of outputs if a set of inputs if",
    "start": "725279",
    "end": "731550"
  },
  {
    "text": "you take all the integers all the possible integers and we say this is the possible inputs for this thing we call",
    "start": "731550",
    "end": "736740"
  },
  {
    "text": "that the type integer here is the type of all strings all possible strings we",
    "start": "736740",
    "end": "742170"
  },
  {
    "text": "call that type string okay so it's just a set it's a it's a set of data there's no behavior right they're not",
    "start": "742170",
    "end": "749370"
  },
  {
    "text": "objects it's literally just data and of course there can be more complex here's",
    "start": "749370",
    "end": "754560"
  },
  {
    "text": "a set of people we call this type person here is a set of fruit we call that type",
    "start": "754560",
    "end": "760589"
  },
  {
    "text": "fruit here is a set of functions which take fruit to fruit so these are fruit -",
    "start": "760589",
    "end": "766950"
  },
  {
    "text": "fruit functions and that is a type as well so you can have type functions can be types as well so that's all the type",
    "start": "766950",
    "end": "773160"
  },
  {
    "text": "is but types can be composed now this fact that the types don't have any",
    "start": "773160",
    "end": "779120"
  },
  {
    "text": "behavior it's just pure data that means they can be glued together it's hard to glue objects together because when you",
    "start": "779120",
    "end": "785580"
  },
  {
    "text": "glue them together how do you what do you do with the behavior this object has this behavior in this one has this behavior and how'd you handle it if they",
    "start": "785580",
    "end": "791760"
  },
  {
    "text": "just peeled 80 that doesn't that's not a problem so this idea of gluing types",
    "start": "791760",
    "end": "797339"
  },
  {
    "text": "together to make bigger types that's what we call an algebraic type system or a comparable type system and",
    "start": "797339",
    "end": "803070"
  },
  {
    "text": "again composable like lego so how do we glue types together well there's two",
    "start": "803070",
    "end": "809670"
  },
  {
    "text": "ways of gluing types together there's only one way of gluing functions together but there's two ways of doing types and the way is and and or alright",
    "start": "809670",
    "end": "819780"
  },
  {
    "text": "so what does that mean and again it's only possible because of the separation of data from behavior so an an type",
    "start": "819780",
    "end": "827430"
  },
  {
    "text": "let's say that you want to make some fruit salads and you have an apple and a banana and show you right so I take one",
    "start": "827430",
    "end": "833910"
  },
  {
    "text": "of each and I make them stick them together and I have a fruit salad okay that is an ending together and this is",
    "start": "833910",
    "end": "840630"
  },
  {
    "text": "your very copious is a very common thing even in other languages it's like when typical is a record type iOS trucks and",
    "start": "840630",
    "end": "847200"
  },
  {
    "text": "in F sharp we'd write it like this it's an apple and a banana and a cherry the Apple is of type apple variety and then",
    "start": "847200",
    "end": "852990"
  },
  {
    "text": "bananas of type and on a variety and so on so far this is just what you'd call the record DTO or something like that",
    "start": "852990",
    "end": "859830"
  },
  {
    "text": "very simple but there's a different way of doing it in F sharp which is not available to you in C sharp and that's a",
    "start": "859830",
    "end": "866400"
  },
  {
    "text": "choice or an oo type so if you have a snack you could say it's a apple or a",
    "start": "866400",
    "end": "871980"
  },
  {
    "text": "banana or a cherry and that's not something you can easily do in C sharp or object or languages and we'd write it",
    "start": "871980",
    "end": "880200"
  },
  {
    "text": "like this a snack is either an apple so the vertical bar is the kiss the clue here it's either just like an or is like a",
    "start": "880200",
    "end": "886590"
  },
  {
    "text": "vertical bar in promo now who knows or an apple or a banana or a cherry and",
    "start": "886590",
    "end": "893670"
  },
  {
    "text": "this turns out to be an incredibly useful concept for domain modeling I don't know if anyone came to my domain",
    "start": "893670",
    "end": "900000"
  },
  {
    "text": "modeling talking it this morning but I talked about this a lot because it's like really powerful thing alright so",
    "start": "900000",
    "end": "906870"
  },
  {
    "text": "let's see how we do composition with types this is that's kind of a silly example let's do a real world example",
    "start": "906870",
    "end": "912000"
  },
  {
    "text": "let's say that you have a payment processing system and you take three kinds of payments let's say you take",
    "start": "912000",
    "end": "917340"
  },
  {
    "text": "cash and check some credit cards and depending on the type of methods we need",
    "start": "917340",
    "end": "924720"
  },
  {
    "text": "to have different kinds of information like if you take a credit card you need to have the credit card information and so on so how would you implement this",
    "start": "924720",
    "end": "931939"
  },
  {
    "text": "well in an object-oriented language like C you'd probably have something like a",
    "start": "931939",
    "end": "938160"
  },
  {
    "text": "interface or a base class and then you'd have a subclass for cash and a subclass for check and a subclass for credit",
    "start": "938160",
    "end": "944579"
  },
  {
    "text": "cards and so on right and each of the subclasses would have that extra information now in F sharp we would",
    "start": "944579",
    "end": "951989"
  },
  {
    "text": "compose this over to we build up a thing from more more pieces so we start off with the kind of primitive types with",
    "start": "951989",
    "end": "958769"
  },
  {
    "text": "check number and a card number say and then we say ok a car type is a Visa or a",
    "start": "958769",
    "end": "964019"
  },
  {
    "text": "MasterCard so we're using the combiner and then we say a credit card information is a card type and a card",
    "start": "964019",
    "end": "972299"
  },
  {
    "text": "number so we've got a composing by adding together and then say ok a",
    "start": "972299",
    "end": "977939"
  },
  {
    "text": "payment method is a cash or check or a card doing or and then okay payment",
    "start": "977939",
    "end": "984389"
  },
  {
    "text": "amount is a decimal and a currency is an or it's either euros or dollars so and",
    "start": "984389",
    "end": "990420"
  },
  {
    "text": "then finally a payment is a record it's an around and a currency and our payment method so what we've done here is we've",
    "start": "990420",
    "end": "997649"
  },
  {
    "text": "built up purely by composing smaller types we've built up quite a useful",
    "start": "997649",
    "end": "1003139"
  },
  {
    "text": "complex type in you know 15 lines of code this is really nice this is why I",
    "start": "1003139",
    "end": "1008779"
  },
  {
    "text": "think for domain modeling functional language is really great ok",
    "start": "1008779",
    "end": "1017340"
  },
  {
    "text": "all right so that's about the Fencibles now let's talk about our first pattern here which is using types to help us",
    "start": "1017340",
    "end": "1024720"
  },
  {
    "text": "design functions better and this is designing for totality that sounds",
    "start": "1024720",
    "end": "1029850"
  },
  {
    "text": "interesting so what do we mean by that let's say we've got a very simple a very",
    "start": "1029850",
    "end": "1035579"
  },
  {
    "text": "silly function 12 divided by okay it's not it's not the function of error actually used in practice but it's good",
    "start": "1035579",
    "end": "1042720"
  },
  {
    "text": "for this demonstration I don't want to make it too complicated so 12 divided by I'm gonna write it kind of in a pseudo C",
    "start": "1042720",
    "end": "1049650"
  },
  {
    "text": "C sharp star so basically if the input is 3 we're going to return for if the inputs 2 we're going to turn 6 if the",
    "start": "1049650",
    "end": "1056010"
  },
  {
    "text": "inputs 1 we're going to then 12 and if the input is 0 what are we going to return all right so that's your first",
    "start": "1056010",
    "end": "1062220"
  },
  {
    "text": "question what happens if the input is 0 well typically people are just like I'm",
    "start": "1062220",
    "end": "1069390"
  },
  {
    "text": "going to throw an exception invalid argument right now if I look at the type",
    "start": "1069390",
    "end": "1074430"
  },
  {
    "text": "signature it says that you give the input is an int and the output an int right you could mean it I'll give you an",
    "start": "1074430",
    "end": "1080400"
  },
  {
    "text": "it back and that is they lie okay that's not true because sometimes it will throw",
    "start": "1080400",
    "end": "1086310"
  },
  {
    "text": "an exception and it's not documented in if I just look at this and I can't tell",
    "start": "1086310",
    "end": "1093150"
  },
  {
    "text": "looking at it and the Plumber is that you've lied because you say you could",
    "start": "1093150",
    "end": "1098640"
  },
  {
    "text": "you told me you can handle any int you said I exception in is input and if I give you a certain kind of n you say sorry I can't handle it it's like well",
    "start": "1098640",
    "end": "1105929"
  },
  {
    "text": "why do you even tell me you can accept it if you can't handle it right don't don't do that all right this is not how",
    "start": "1105929",
    "end": "1111120"
  },
  {
    "text": "this is the bat this is a bad way of writing the function so let's look at how you can solve this a couple of ways",
    "start": "1111120",
    "end": "1116400"
  },
  {
    "text": "to solve it first way is to put a constraint on the input so rather than saying weeks of any int I'll say I",
    "start": "1116400",
    "end": "1122760"
  },
  {
    "text": "accept a nonzero int ok and we'll have a special type because it's just a set of",
    "start": "1122760",
    "end": "1128130"
  },
  {
    "text": "all known servants right and so it's just a type or non servants and 0 is not",
    "start": "1128130",
    "end": "1133650"
  },
  {
    "text": "in that list so I don't have to handle it in my switch statement all right so",
    "start": "1133650",
    "end": "1139320"
  },
  {
    "text": "it's always going to work it's never going to give an error and if I look at the type signature now it says you give",
    "start": "1139320",
    "end": "1145770"
  },
  {
    "text": "me a nonzero integer and I'll give you back an int and that's true that's right that's a good type sees there's never",
    "start": "1145770",
    "end": "1150810"
  },
  {
    "text": "done no lie to me and it's also given me documentation it says here's the constraints you have to follow for this",
    "start": "1150810",
    "end": "1156809"
  },
  {
    "text": "function to work now where you how you get an answer integer it's not my problem that's somebody else's problem though yeah but that's this is a total",
    "start": "1156809",
    "end": "1165269"
  },
  {
    "text": "function in always a never gives an error here's another one you can alternatively well then constrain the",
    "start": "1165269",
    "end": "1171419"
  },
  {
    "text": "input you can extend the output so rather than saying you know I'll return",
    "start": "1171419",
    "end": "1177269"
  },
  {
    "text": "it end it's like well sometimes I will turn into maybe maybe not so you know if",
    "start": "1177269",
    "end": "1182879"
  },
  {
    "text": "you give me a zero I'll say no I can't I can't do it I'll give you back nothing but if you give me a three I'll give you",
    "start": "1182879",
    "end": "1189179"
  },
  {
    "text": "back something if you come here - I'll give you about something and so this is what in F shall we call this the option type you see there's",
    "start": "1189179",
    "end": "1195090"
  },
  {
    "text": "something or nothing so again if I look at the signature it's like you give me",
    "start": "1195090",
    "end": "1200789"
  },
  {
    "text": "energy and I might give you back an integer again it's telling me the truth it's acting this documentation and it's not",
    "start": "1200789",
    "end": "1206789"
  },
  {
    "text": "lying so total functions are really important part of it's a really important functional this whole concept of using",
    "start": "1206789",
    "end": "1215970"
  },
  {
    "text": "types like this I've used you know the nonzero integer type and so on using static types for the main modeling is",
    "start": "1215970",
    "end": "1222179"
  },
  {
    "text": "really fantastic documentation and you also get kind of compiled time checks like I say if I can't pass a zero into",
    "start": "1222179",
    "end": "1229109"
  },
  {
    "text": "that function it won't let me only works for statically typed programming languages so sorry closure people on",
    "start": "1229109",
    "end": "1235049"
  },
  {
    "text": "solid JavaScript people big topic don't have enough time to talk about it I did",
    "start": "1235049",
    "end": "1240419"
  },
  {
    "text": "talk about it early this morning or if you're interested you can go to my website if shot will find and prophets",
    "start": "1240419",
    "end": "1245489"
  },
  {
    "text": "slash ddd and i have the slides and a talker",
    "start": "1245489",
    "end": "1250609"
  },
  {
    "text": "alright functions as parameters so this is a really important principle along",
    "start": "1250669",
    "end": "1256830"
  },
  {
    "text": "with functions everywhere and functions being used for everything another really",
    "start": "1256830",
    "end": "1262710"
  },
  {
    "text": "good tip is to parameterize everything and let me show you what i mean by that so here is a function that prints all",
    "start": "1262710",
    "end": "1270749"
  },
  {
    "text": "the numbers from 1 to 10 that's a very exciting function now if you're a normal experienced programmer you would look at",
    "start": "1270749",
    "end": "1277739"
  },
  {
    "text": "this and say yeah you've hard-coded the numbers 1 to 10 in there what happens if i want to do 1 to 11",
    "start": "1277739",
    "end": "1283720"
  },
  {
    "text": "right YV hard-coded that list and it's like that's a good idea let me pass the list in as a parameter",
    "start": "1283720",
    "end": "1290280"
  },
  {
    "text": "all right so now I'm going to pass the list in as a parameter and for each element in the list I'm going to print",
    "start": "1290280",
    "end": "1295390"
  },
  {
    "text": "the number that's much better and we all think that's a good that's a much better way of programming where if you're a",
    "start": "1295390",
    "end": "1300760"
  },
  {
    "text": "functional programmer you say yuck you've hard-coded the behavior in there too why why are you printing what",
    "start": "1300760",
    "end": "1307450"
  },
  {
    "text": "happens if I don't want to print what I'm so I want to print something else well don't hard-code that pass that in",
    "start": "1307450",
    "end": "1312730"
  },
  {
    "text": "as well all right so I'm gonna pass in a function which is the action to take for",
    "start": "1312730",
    "end": "1318549"
  },
  {
    "text": "each element all right so now what we've done is actually decoupled all things",
    "start": "1318549",
    "end": "1324309"
  },
  {
    "text": "the looping cup the looping action has been decoupled from the the type of list which has been decoupled from the action",
    "start": "1324309",
    "end": "1330669"
  },
  {
    "text": "I'm taking each element in fact this is no longer printing a list this is just looping through a list right so I've now",
    "start": "1330669",
    "end": "1335770"
  },
  {
    "text": "got completely generic list iteration this would basically be it or something",
    "start": "1335770",
    "end": "1342760"
  },
  {
    "text": "I'll come over for each or something I come over it is in the link and it's",
    "start": "1342760",
    "end": "1348220"
  },
  {
    "text": "really easy an f-sharp it helps if your language makes it easy because I'm a lazy programmer I don't want to have to",
    "start": "1348220",
    "end": "1354400"
  },
  {
    "text": "like type a hundred things and figure out what the types are in F sharp you can literally just put in the parameter",
    "start": "1354400",
    "end": "1360580"
  },
  {
    "text": "and the compiler will figure out what the type is for you so you don't have to type it this is very nice",
    "start": "1360580",
    "end": "1366659"
  },
  {
    "text": "let's look at a another example I say have two functions one calculates the",
    "start": "1366659",
    "end": "1373419"
  },
  {
    "text": "product up to a certain number and the other count places some up to a product to a certain number now you can see",
    "start": "1373419",
    "end": "1379539"
  },
  {
    "text": "there's some duplicate code right don't repeat yourself we all know about the DRI principle let's not repeat ourselves",
    "start": "1379539",
    "end": "1385780"
  },
  {
    "text": "so how can we get rid of this duplicate code so what we do is we focus on what's",
    "start": "1385780",
    "end": "1391900"
  },
  {
    "text": "different about each function and what's the same about each function so there's some common code there's the looping",
    "start": "1391900",
    "end": "1397659"
  },
  {
    "text": "code and the returning the last bit that's the common part what's different is that the initial value is different",
    "start": "1397659",
    "end": "1403809"
  },
  {
    "text": "each time and the action that you take each time as you iterate through the list it's different right so what we can",
    "start": "1403809",
    "end": "1412059"
  },
  {
    "text": "do is is get rid of the is is to extract the common code and have everything else be proud",
    "start": "1412059",
    "end": "1418140"
  },
  {
    "text": "so this is how you do it in F sharp in F sharp it's called fold and so we've got",
    "start": "1418140",
    "end": "1423850"
  },
  {
    "text": "a parameter we've got an action parameter and we've got an initial value parameter and then we do it's basically the same code as before we're going to",
    "start": "1423850",
    "end": "1429850"
  },
  {
    "text": "initialize the total value I mean the total we're going to loop through the list and for each item in the list we're",
    "start": "1429850",
    "end": "1435309"
  },
  {
    "text": "going to do this action with the elements and then we're going to return the total at the end okay and this is a",
    "start": "1435309",
    "end": "1441250"
  },
  {
    "text": "this is actually a built-in an f-sharp function didn't have to write it but what again we've done is we've got the",
    "start": "1441250",
    "end": "1447460"
  },
  {
    "text": "common code and we've parameterize everything else the initial value has been parameterised the action has been prioritised what's cool about this is",
    "start": "1447460",
    "end": "1455020"
  },
  {
    "text": "when it comes to when you actually come to use it if there's the f-sharp equivalent the list fold function is",
    "start": "1455020",
    "end": "1462909"
  },
  {
    "text": "built-in and I don't have to do loops so in F sharp it's really unusual to write for loops you tend to use these kinds of",
    "start": "1462909",
    "end": "1470529"
  },
  {
    "text": "collection functions and what it does is it allows you to focus on what's",
    "start": "1470529",
    "end": "1475720"
  },
  {
    "text": "important so what's important is the difference in the initial value of any action I don't care about the looping",
    "start": "1475720",
    "end": "1480760"
  },
  {
    "text": "code that's not relevant to how okay what I really care is what is different between these two things and by by",
    "start": "1480760",
    "end": "1486309"
  },
  {
    "text": "pulling those out as parameters it makes it really obvious and in any decent",
    "start": "1486309",
    "end": "1492039"
  },
  {
    "text": "functional programming languages lots and lots of collection functions like this there's fold as mat there's collect",
    "start": "1492039",
    "end": "1497559"
  },
  {
    "text": "and reduce and the day so if you are learning a function phone language the first thing I'd do is spend a lot of",
    "start": "1497559",
    "end": "1503140"
  },
  {
    "text": "time learning the collection line B because it's really useful and you'll find out you probably know how to write",
    "start": "1503140",
    "end": "1508299"
  },
  {
    "text": "a loop ever again functions as interfaces so functions these function",
    "start": "1508299",
    "end": "1516490"
  },
  {
    "text": "types like fruits food or intend or whatever they provide interfaces for free if we take a kind of c-sharp",
    "start": "1516490",
    "end": "1523179"
  },
  {
    "text": "interface like this I bunch of stuff whatever it is I don't care what it does if you take the single responsibility",
    "start": "1523179",
    "end": "1528700"
  },
  {
    "text": "principle which is only one reason to change and you take the interface segregation principle which is don't",
    "start": "1528700",
    "end": "1534909"
  },
  {
    "text": "make me depend on things I don't care about if you take them to the extreme you end up with the concept where every",
    "start": "1534909",
    "end": "1540340"
  },
  {
    "text": "interface should only have one methods because otherwise you might have an accidental dependency so let's get rid of those two extra methods and now we",
    "start": "1540340",
    "end": "1547690"
  },
  {
    "text": "have in the face of the list it looks like this now this interface is just a function if it's got one method it's really just a",
    "start": "1547690",
    "end": "1554680"
  },
  {
    "text": "function so this is a interface of something that takes an int and a Spitz happening and we do this all the time so",
    "start": "1554680",
    "end": "1561040"
  },
  {
    "text": "we tend not to use interfaces we tend to use functions like this and but the cool thing is that any function that takes it",
    "start": "1561040",
    "end": "1567640"
  },
  {
    "text": "in and spits out an int is compatible with this interface all right so here's add two or more times three these are",
    "start": "1567640",
    "end": "1575230"
  },
  {
    "text": "functions they take it in and they spit at them in so they're compatible into this interface I don't have to inherit",
    "start": "1575230",
    "end": "1582250"
  },
  {
    "text": "from an interface right I just say they're compatible with this interface and I can just use anywhere I see this",
    "start": "1582250",
    "end": "1588040"
  },
  {
    "text": "into int function I can pass in one of these other functions right so after the",
    "start": "1588040",
    "end": "1593350"
  },
  {
    "text": "fact you can design things off a fact without having to preemptively think about what your interfaces are so let's",
    "start": "1593350",
    "end": "1601360"
  },
  {
    "text": "look at a strategy pattern for example so here's the o type strategy pattern I have a class I a dependency injection",
    "start": "1601360",
    "end": "1608610"
  },
  {
    "text": "with an i bunch of stuff that's the strategy and so on you wouldn't do this",
    "start": "1608610",
    "end": "1614410"
  },
  {
    "text": "in a functional language what you do is this you just pass the strategy and as an extra parameter write that so the",
    "start": "1614410",
    "end": "1623410"
  },
  {
    "text": "strategy is just a function that you're parsing and you've kind of little slot for it there you pass in that extra",
    "start": "1623410",
    "end": "1630340"
  },
  {
    "text": "thing and now you've strategized the you parameterize the functional with the strategy and again anything will fit",
    "start": "1630340",
    "end": "1637360"
  },
  {
    "text": "anything will fit their strategy as long as it's you don't have to inherit from a bunch of stuff it's any into int",
    "start": "1637360",
    "end": "1643570"
  },
  {
    "text": "functional work right so you don't need to create an into int function in advance here's another one decorator",
    "start": "1643570",
    "end": "1651760"
  },
  {
    "text": "pattern so let's say have some function like is even okay and it takes in an int",
    "start": "1651760",
    "end": "1657970"
  },
  {
    "text": "and it spits out a boolean here's my little function done as a railway into pool",
    "start": "1657970",
    "end": "1663730"
  },
  {
    "text": "now let's say that I want to log the inputs and the outputs now I want to",
    "start": "1663730",
    "end": "1668950"
  },
  {
    "text": "everywhere where the original function was I want to have the new function so the new function hats are conformed to the same interface it has to have an inn",
    "start": "1668950",
    "end": "1675610"
  },
  {
    "text": "to come in and a boolean come out right so I write a kind of logger wrapper",
    "start": "1675610",
    "end": "1681520"
  },
  {
    "text": "round the original one where it loves the input now but that's the kind of classic a decorator model and there's a",
    "start": "1681520",
    "end": "1686830"
  },
  {
    "text": "little slot where I stick in my function and there's the code don't worry about that you know so I take my my in the",
    "start": "1686830",
    "end": "1695860"
  },
  {
    "text": "bottom part you can see I take that is even function I pass it into this logger function and it spits out the even the",
    "start": "1695860",
    "end": "1701260"
  },
  {
    "text": "log log version of that function that is actually not the functional way of doing",
    "start": "1701260",
    "end": "1707260"
  },
  {
    "text": "it because it's not really using composition let me show you the",
    "start": "1707260",
    "end": "1712330"
  },
  {
    "text": "functional way of doing it so I've got my is even function and I want to log the inputs and outputs so what I do is",
    "start": "1712330",
    "end": "1718510"
  },
  {
    "text": "I'd take my thing and I've stick something in front and I'd stick something behind and I'd glue them all together and I get",
    "start": "1718510",
    "end": "1724840"
  },
  {
    "text": "a new function so this is much more this is more a functional thing I have a you",
    "start": "1724840",
    "end": "1730510"
  },
  {
    "text": "know these little small pieces that I glue together to make bigger functions so my logging my logging version of this",
    "start": "1730510",
    "end": "1736990"
  },
  {
    "text": "is just like the log function composed of the ease even function composed with a lot of function that gives me a thing",
    "start": "1736990",
    "end": "1742510"
  },
  {
    "text": "and again it's completely compatible this combined function it takes an int as input and spits out a bull anywhere I",
    "start": "1742510",
    "end": "1748300"
  },
  {
    "text": "have the original function I could replace it with its log function and be compatible okay so all this Melway track",
    "start": "1748300",
    "end": "1758110"
  },
  {
    "text": "stuff problem is only works with functions which have one input and one output because otherwise doesn't work",
    "start": "1758110",
    "end": "1764950"
  },
  {
    "text": "right so that's a problem good news is",
    "start": "1764950",
    "end": "1771010"
  },
  {
    "text": "that every function in fact does have one input and one output so every function is a one parameter function in a fractional primary language and you",
    "start": "1771010",
    "end": "1778570"
  },
  {
    "text": "think how can that be true what about functions that have two parameters right it's like that's surely that can't be",
    "start": "1778570",
    "end": "1784360"
  },
  {
    "text": "true so let me prove to you that it's true so here is an odd function add and",
    "start": "1784360",
    "end": "1790150"
  },
  {
    "text": "it's got two parameters right now I can also define it as a sort of a 0",
    "start": "1790150",
    "end": "1795429"
  },
  {
    "text": "parameter things this is defining as a thing with a lambda so the adze is just",
    "start": "1795429",
    "end": "1802360"
  },
  {
    "text": "a lambda with two parameters right you can do that see shortly what you can",
    "start": "1802360",
    "end": "1808480"
  },
  {
    "text": "also do is define as a one parameter function which spits out another lambda which is also one parameter",
    "start": "1808480",
    "end": "1815769"
  },
  {
    "text": "so this last one is a one-parameter function that spits out another one parameter function and you can actually",
    "start": "1815769",
    "end": "1823960"
  },
  {
    "text": "do this for every function so every multi parameter function can be turned into a one parameter function that spits",
    "start": "1823960",
    "end": "1830350"
  },
  {
    "text": "out another function and that function in turn can be a you know if it's got an extra proud of one parameter function it",
    "start": "1830350",
    "end": "1836049"
  },
  {
    "text": "spits out another parameter another function and that in turn all the way down until you get down to the end so",
    "start": "1836049",
    "end": "1841240"
  },
  {
    "text": "every complicated function can be reduced into a series of one parameter functions and that means that all these",
    "start": "1841240",
    "end": "1848049"
  },
  {
    "text": "tricks about doing well we try to go that that always works and let's look at a real example let's look at 3 which is",
    "start": "1848049",
    "end": "1855759"
  },
  {
    "text": "1 plus 2 there's some advanced maths here and you can the pluses can be do it",
    "start": "1855759",
    "end": "1862570"
  },
  {
    "text": "in as an infix but you can also write it as a as a prefix so these two things are exactly the same so 1 plus 2 is the same",
    "start": "1862570",
    "end": "1869320"
  },
  {
    "text": "as as the plus treated as a function with two parameters right same thing and",
    "start": "1869320",
    "end": "1876370"
  },
  {
    "text": "then we're going to do is we're going to take the first two of those things like that and we're going to like give it a name we're going to kind of copy and",
    "start": "1876370",
    "end": "1882429"
  },
  {
    "text": "paste it into something else and give it a name like that I've got add 1 all right so it's",
    "start": "1882429",
    "end": "1888879"
  },
  {
    "text": "literally copying and pasting that code now this add 1 is a 1 parameter fighter",
    "start": "1888879",
    "end": "1896080"
  },
  {
    "text": "you think is it missing a parameter well it's sort of is but it's it's a function this that needs an extra parameter to",
    "start": "1896080",
    "end": "1902049"
  },
  {
    "text": "add one you need to pass something to it until then add one to it all right so plus you can think of classes a two",
    "start": "1902049",
    "end": "1908950"
  },
  {
    "text": "parameter function or you think as a one parameter function that was spits out the one parameter function so I can take",
    "start": "1908950",
    "end": "1915610"
  },
  {
    "text": "this add one function that I just created and I can pass it you know pass two into it and it gives me three so",
    "start": "1915610",
    "end": "1921669"
  },
  {
    "text": "every multi parameter function can be converted into it into one parameter",
    "start": "1921669",
    "end": "1927129"
  },
  {
    "text": "function like this and that leaves the really important thing called partial application so here is an example of",
    "start": "1927129",
    "end": "1936340"
  },
  {
    "text": "partial application I'm going to print my name so the print function is two",
    "start": "1936340",
    "end": "1941679"
  },
  {
    "text": "parameters the first parameter is the format string and second parameter is the name I'm gonna",
    "start": "1941679",
    "end": "1947490"
  },
  {
    "text": "print okay so that's a two parameter function but what I'm gonna do is do the same thing I'm gonna put parentheses",
    "start": "1947490",
    "end": "1953549"
  },
  {
    "text": "around the first two bits like that and I'm gonna pull that out and give it a name and then call it hello now this",
    "start": "1953549",
    "end": "1962340"
  },
  {
    "text": "hello is a one-parameter function because it's missing the extra the name",
    "start": "1962340",
    "end": "1967650"
  },
  {
    "text": "thing was missing but I can still use it without the name thing and then I have to provide the name later on does this",
    "start": "1967650",
    "end": "1975240"
  },
  {
    "text": "make sense yeah hopefully it makes sense this is something that's hard to get you head around if you're if you're new to functional programming but you can see",
    "start": "1975240",
    "end": "1982080"
  },
  {
    "text": "it's really useful because I've I've taken this thing I've now kind of made it a Hello function I can use reuse over",
    "start": "1982080",
    "end": "1987270"
  },
  {
    "text": "and over so I can we use this hello in many places for example if I'm working",
    "start": "1987270",
    "end": "1992700"
  },
  {
    "text": "with a list so if I have a list of",
    "start": "1992700",
    "end": "1998010"
  },
  {
    "text": "things there's a list of names and for each name I want to say hello well I can",
    "start": "1998010",
    "end": "2003110"
  },
  {
    "text": "just iterate over the elements in the list and call hello for each one now hello is a function but it needs one",
    "start": "2003110",
    "end": "2010210"
  },
  {
    "text": "parameter and so that will be provided as it loops those lists each parameter",
    "start": "2010210",
    "end": "2015860"
  },
  {
    "text": "and then it'll be passed each element this will be passed in and here's another example I can say add one and",
    "start": "2015860",
    "end": "2023080"
  },
  {
    "text": "define equals two and then they need an extra parameter and that can go take one",
    "start": "2023080",
    "end": "2029390"
  },
  {
    "text": "one 200 which is the list I can take I can map that which is the same as select",
    "start": "2029390",
    "end": "2035299"
  },
  {
    "text": "a link in which is adding one to each one and then after that I can then filter by the ones that equal to 2 and",
    "start": "2035299",
    "end": "2040910"
  },
  {
    "text": "so on so forth so this is a really common way of doing stuff in functional programming and by",
    "start": "2040910",
    "end": "2047210"
  },
  {
    "text": "the way that little vertical bar thing with an angle bracket that is the F sharp pipe operator it works just like",
    "start": "2047210",
    "end": "2053720"
  },
  {
    "text": "the pipe in UNIX where you just take the output of you know you take the output of this thing and feed it as the input",
    "start": "2053720",
    "end": "2059990"
  },
  {
    "text": "the next one so this is take the list of ones or hundreds and feed it in to the",
    "start": "2059990",
    "end": "2065090"
  },
  {
    "text": "list map take the output of that feed it into the list filter and so on so we use that all the time to kind of create a a",
    "start": "2065090",
    "end": "2070908"
  },
  {
    "text": "pipeline again like gluing all these railway tracks together you get this pipeline effect",
    "start": "2070909",
    "end": "2077230"
  },
  {
    "text": "and partial application can be used for dependency injection which is really nice you don't need a special dependency",
    "start": "2077640",
    "end": "2084520"
  },
  {
    "text": "injection framework it's really simple I'll show you now this is a bit",
    "start": "2084520",
    "end": "2090730"
  },
  {
    "text": "complicated so I'm sorry if it's a bit confusing but let's say we have we need to get a customer from a database what",
    "start": "2090730",
    "end": "2098680"
  },
  {
    "text": "we're going to do is define something which gets me a customer given a customer ID it returns me a customer",
    "start": "2098680",
    "end": "2103750"
  },
  {
    "text": "right now I've defined this in such a way that I don't care where the customer comes from does it come from a database",
    "start": "2103750",
    "end": "2109420"
  },
  {
    "text": "does it come from a cache does it come from the far system it's like I don't care because in my code what I want is",
    "start": "2109420",
    "end": "2115300"
  },
  {
    "text": "some way to get a customer alright this is what we call persistence ignorance",
    "start": "2115300",
    "end": "2120400"
  },
  {
    "text": "just like I don't care about the national database now one actually write a real piece of code that uses a",
    "start": "2120400",
    "end": "2126760"
  },
  {
    "text": "database I need to pass on a connection string or of connection or whatever right so here's my actual code and it",
    "start": "2126760",
    "end": "2133180"
  },
  {
    "text": "part by part in a connection and a custom ID and it actually does the work",
    "start": "2133180",
    "end": "2138270"
  },
  {
    "text": "okay now the problem is this function needs a connection so this function says you",
    "start": "2138270",
    "end": "2144490"
  },
  {
    "text": "give me a database connection and a customer ID I'll give you back a customer and that function is not",
    "start": "2144490",
    "end": "2149740"
  },
  {
    "text": "compatible with my my ideal function I want which is the gate customer but what",
    "start": "2149740",
    "end": "2155710"
  },
  {
    "text": "I can do is I can take that DB connection and I can pass in just the database connection and not anything",
    "start": "2155710",
    "end": "2162580"
  },
  {
    "text": "else not passing the customer ID just passing the database connection and that gives me back a new function using",
    "start": "2162580",
    "end": "2168040"
  },
  {
    "text": "partial application I could wreck a new function and this new function no longer has the database connection as part of",
    "start": "2168040",
    "end": "2173170"
  },
  {
    "text": "it it's sort of been baked in to that function so the new function I get let's get",
    "start": "2173170",
    "end": "2178540"
  },
  {
    "text": "customer one you'll want it needs as a customer ID and it gets back a customer so I've basically hidden I've injected",
    "start": "2178540",
    "end": "2184930"
  },
  {
    "text": "the database dependency stuff into it and it's now baked in and it's not for",
    "start": "2184930",
    "end": "2190720"
  },
  {
    "text": "anyone else and just use it without knowing about databases and this is very",
    "start": "2190720",
    "end": "2197110"
  },
  {
    "text": "cool because I don't need to define an interface they don't need to define you know an ioc container and i think i can",
    "start": "2197110",
    "end": "2202450"
  },
  {
    "text": "just literally use partial application and if i do another one let's say yeah",
    "start": "2202450",
    "end": "2207520"
  },
  {
    "text": "you can see that the one I want the top and the one I finally get at the bottom they're exactly the same they're",
    "start": "2207520",
    "end": "2213160"
  },
  {
    "text": "now compatible so I can use any way I want something at the top I can use this this function at the bottom let's look",
    "start": "2213160",
    "end": "2220720"
  },
  {
    "text": "at the equivalent for a cache so let's say I've got a I want to get the customer from a cash like Redis or something well let's say in this case",
    "start": "2220720",
    "end": "2226630"
  },
  {
    "text": "I'm gonna pass in the dictionary okay so I have a dictionary parameter you give me a dictionary you give me a customer",
    "start": "2226630",
    "end": "2233530"
  },
  {
    "text": "ID and I'll give you back the customer again this dictionary parameter is",
    "start": "2233530",
    "end": "2238720"
  },
  {
    "text": "messes UPS is a required interface it's not the same thing I want but if I",
    "start": "2238720",
    "end": "2244150"
  },
  {
    "text": "partially apply the dictionary I get back a new function which all it now needs is the customer ID so again after",
    "start": "2244150",
    "end": "2252340"
  },
  {
    "text": "doing the partial application my ideal function and the actual function match",
    "start": "2252340",
    "end": "2257680"
  },
  {
    "text": "up and I can use this function everywhere I used the original function so that's dependency injection very",
    "start": "2257680",
    "end": "2262870"
  },
  {
    "text": "simple what's nicely so you can see you actually get a lot of functionality without needing any special frameworks that's one of the reasons people like",
    "start": "2262870",
    "end": "2268450"
  },
  {
    "text": "functional programming right continuations don't call us we'll call you",
    "start": "2268450",
    "end": "2275400"
  },
  {
    "text": "here's a divided function again I'm using very simple examples the divide function if the bottom number is zero",
    "start": "2275400",
    "end": "2282910"
  },
  {
    "text": "I'm gonna throw an exception and it's like why right who gave you permission I",
    "start": "2282910",
    "end": "2289150"
  },
  {
    "text": "don't want to throw an exception I want to do something else why who gave you permission to thoroughly well it's like the method decided it's gonna throw an",
    "start": "2289150",
    "end": "2295630"
  },
  {
    "text": "exception let's not do that let let me be in charge I don't want it to be just how can I be in charge the",
    "start": "2295630",
    "end": "2302710"
  },
  {
    "text": "answer is for me to pass in parameters okay parameterize all the things so I'm gonna pass in two extra parameters",
    "start": "2302710",
    "end": "2309120"
  },
  {
    "text": "something to do when it's zero and something to do if it successful and so my code is going to say if it's if the",
    "start": "2309120",
    "end": "2315370"
  },
  {
    "text": "bottom part is zero call the f of zero function and if the bottom part is not zero call the success",
    "start": "2315370",
    "end": "2321250"
  },
  {
    "text": "function right so now at this point I am gonna call it's completely in control of",
    "start": "2321250",
    "end": "2326980"
  },
  {
    "text": "what happens if I want to throw an exception fine if I want to turn it into something else that's fine but the",
    "start": "2326980",
    "end": "2332230"
  },
  {
    "text": "method itself doesn't care about you know doesn't isn't in charge of what's going on so letting the caller decide",
    "start": "2332230",
    "end": "2338860"
  },
  {
    "text": "what happens is a really important principle I decide what happens next so the F",
    "start": "2338860",
    "end": "2344960"
  },
  {
    "text": "sharp version is a little shorter as you can see again it's got the two parameters and the top of the bottom now",
    "start": "2344960",
    "end": "2351500"
  },
  {
    "text": "the only problem with this is four parameters it was originally a tube round of function now so for brand impression that's kind of annoying I",
    "start": "2351500",
    "end": "2357140"
  },
  {
    "text": "don't want to have to pass four parameters around over and over right wouldn't it be nice if we could somehow",
    "start": "2357140",
    "end": "2362569"
  },
  {
    "text": "sort of bake in the behavior we wanted in this particular context so let's say I don't want it I want to throw an",
    "start": "2362569",
    "end": "2368660"
  },
  {
    "text": "exception in this particular context in this other context I don't well let's bake it in so let's define",
    "start": "2368660",
    "end": "2374359"
  },
  {
    "text": "some functions some helper functions so if it's zero I'm going to print bad and if it's successful I'm going to print",
    "start": "2374359",
    "end": "2380299"
  },
  {
    "text": "good okay and then so this is my setup and then what I'm going to do is I'm",
    "start": "2380299",
    "end": "2386029"
  },
  {
    "text": "going to partially apply those two things to my divide function so",
    "start": "2386029",
    "end": "2391250"
  },
  {
    "text": "originally it was a four parameter function after I done partial application it's now a two parameter function so I can go back and I can",
    "start": "2391250",
    "end": "2398510"
  },
  {
    "text": "pretend it was just like the original one it's a two parameter function and I call it all right that's very cool or",
    "start": "2398510",
    "end": "2404890"
  },
  {
    "text": "let's say that I want to say well optionally yes and maybe I'll give you back something I'll give you another",
    "start": "2404890",
    "end": "2410690"
  },
  {
    "text": "thing so again I can set up the helpers I can set up by what I'm going to do I do a",
    "start": "2410690",
    "end": "2416569"
  },
  {
    "text": "partial application and it turns it from a four parameter function into a two parameter function and then when I can",
    "start": "2416569",
    "end": "2421970"
  },
  {
    "text": "just use it just like an original just like I did originally it's a two parameter function or I can go back to",
    "start": "2421970",
    "end": "2427369"
  },
  {
    "text": "the original one I'm going to say okay it's going to fail then the phone exception on zero otherwise it's gonna",
    "start": "2427369",
    "end": "2433430"
  },
  {
    "text": "turn the answer again I can partially apply it and I can call it so by by",
    "start": "2433430",
    "end": "2439279"
  },
  {
    "text": "parameterizing all the behavior like this you can actually get a lot more flexibility in how the code works and",
    "start": "2439279",
    "end": "2446710"
  },
  {
    "text": "then the partial application allows you're going to get it back to something that's easy to call something that's",
    "start": "2446710",
    "end": "2452150"
  },
  {
    "text": "sensible core so let's look at a some real examples of why this kind of stuff",
    "start": "2452150",
    "end": "2458000"
  },
  {
    "text": "is useful here is some some trivial thing I don't know it's doing do something do something else and",
    "start": "2458000",
    "end": "2463250"
  },
  {
    "text": "sometimes there's nulls and we have to handle the nulls so if it's not null we do the next thing and if that's not now",
    "start": "2463250",
    "end": "2468920"
  },
  {
    "text": "we do the third thing and so on and you've probably done a lot of this kind of these kind of nested null checks like really annoying",
    "start": "2468920",
    "end": "2474970"
  },
  {
    "text": "people call this the pyramid of Doom because you're gonna like if you have 20 things you have to go deeper and deeper and deeper and deeper now you can do",
    "start": "2474970",
    "end": "2482680"
  },
  {
    "text": "early returns and stuff but just hold bear with me for a second okay because",
    "start": "2482680",
    "end": "2487930"
  },
  {
    "text": "you can't do that in like tasks if you're waiting for tasks complete you know wait for a task complete and when",
    "start": "2487930",
    "end": "2493780"
  },
  {
    "text": "that's done do another task and when that's done do another toss and stuff you can't your turn out that it's the",
    "start": "2493780",
    "end": "2498940"
  },
  {
    "text": "same problem you end up with this pyramid of Doom right so how can we get",
    "start": "2498940",
    "end": "2505180"
  },
  {
    "text": "rid of that well let's go back for null one you know you might say well nulls or",
    "start": "2505180",
    "end": "2510340"
  },
  {
    "text": "curse no we're gonna use this option right it could be optic and something or nothing so now the code looks like this",
    "start": "2510340",
    "end": "2516010"
  },
  {
    "text": "and it's like actually that's just as bad okay it's not any better than that it's still",
    "start": "2516010",
    "end": "2521080"
  },
  {
    "text": " Lee that's not solving the problem just using a special type doesn't solve the form we have to think about something",
    "start": "2521080",
    "end": "2526990"
  },
  {
    "text": "else there's a pattern we can explore if you see this if it's something do",
    "start": "2526990",
    "end": "2532090"
  },
  {
    "text": "something otherwise do nothing if it's something do something I'll always do nothing if it's something no there's a",
    "start": "2532090",
    "end": "2538300"
  },
  {
    "text": "pattern we can use there so we're going to write it a helper function if it's",
    "start": "2538300",
    "end": "2543550"
  },
  {
    "text": "something do something otherwise do nothing but what do we do what exactly are we going to do when it's something",
    "start": "2543550",
    "end": "2548620"
  },
  {
    "text": "all right how can we make this exists all right well we parameterize it just like we did",
    "start": "2548620",
    "end": "2555340"
  },
  {
    "text": "before we're gonna pass in a parameter so a little function if it's something do something and we pass a little",
    "start": "2555340",
    "end": "2561190"
  },
  {
    "text": "function right there's a little function and if it's something we're going to call that function and if it's nothing we want but once we have this this",
    "start": "2561190",
    "end": "2569350"
  },
  {
    "text": "little helper function our code becomes so much more simple we just say if it's something do this thing and if it still",
    "start": "2569350",
    "end": "2575350"
  },
  {
    "text": "something do this next thing and if it still something do this next thing so now we our code is now nice and straight",
    "start": "2575350",
    "end": "2580420"
  },
  {
    "text": "we don't have any kind of period as doom it's nice and linear so much much cleaner and that is what a monad is",
    "start": "2580420",
    "end": "2588970"
  },
  {
    "text": "really all you need to know okay so it's really thinking about it's just chaining continuations together okay obviously a",
    "start": "2588970",
    "end": "2595810"
  },
  {
    "text": "Mona is a bit more complicated but today that's all you mean no it's not it's not something that's not like rocket science",
    "start": "2595810",
    "end": "2601720"
  },
  {
    "text": "it really is just a way of chaining functions like this together so I'm gonna go and use another railway",
    "start": "2601720",
    "end": "2608439"
  },
  {
    "text": "analogy which I like which is a switch points whatever you call them here it",
    "start": "2608439",
    "end": "2614319"
  },
  {
    "text": "says input and maybe you get something back and maybe get nothing back all right so I'm going to use a branching railway and I want to glue these",
    "start": "2614319",
    "end": "2621009"
  },
  {
    "text": "together so the composition of one way of simple functions is easy but how do you glue these together together all",
    "start": "2621009",
    "end": "2626859"
  },
  {
    "text": "right so if it's on if something happens I want to do this but if nothing happens I want to kind of bypass it the trick is",
    "start": "2626859",
    "end": "2633549"
  },
  {
    "text": "to glue them together is to turn them into this Y so this is before they've been glued together and his are they've",
    "start": "2633549",
    "end": "2639189"
  },
  {
    "text": "been glued together so there you go that's that's the secret of gluing more",
    "start": "2639189",
    "end": "2644559"
  },
  {
    "text": "complicated together now here's the problem gluing one track functions together is really easy you just stick",
    "start": "2644559",
    "end": "2650799"
  },
  {
    "text": "them together even gluing to track functions together is really easy but these kind of switch functions all these",
    "start": "2650799",
    "end": "2655959"
  },
  {
    "text": "points they have one input and two outputs right and so they can't they",
    "start": "2655959",
    "end": "2661119"
  },
  {
    "text": "can't connect you can't glue them together so how are we going to solve this problem all right",
    "start": "2661119",
    "end": "2667959"
  },
  {
    "text": "how are we going to combine these mismatched functions and the answer is bind so bind is some functional",
    "start": "2667959",
    "end": "2674679"
  },
  {
    "text": "programming jargon which functional programmers like to use it's just got a secret handshake if you go up to like a",
    "start": "2674679",
    "end": "2681279"
  },
  {
    "text": "functional programming say and I understand what mine is that yeah you're another club you know people get excited",
    "start": "2681279",
    "end": "2688150"
  },
  {
    "text": "by binds you can read into that way well ok so here's our function that doesn't",
    "start": "2688150",
    "end": "2694269"
  },
  {
    "text": "work right that doesn't work for composition if we could turn it into a two-track function like this then I",
    "start": "2694269",
    "end": "2699459"
  },
  {
    "text": "could glue them together so what we need is something that transforms a function to another function so this is where we",
    "start": "2699459",
    "end": "2706179"
  },
  {
    "text": "have function as an input and a function as an output and we have a function transformer and then we could then we",
    "start": "2706179",
    "end": "2713169"
  },
  {
    "text": "could work with it so let's design our function transformer so here's our function transformer what",
    "start": "2713169",
    "end": "2720009"
  },
  {
    "text": "it is it's a to track and it's got a like a slot on the top like a little if you've ever played with like wooden",
    "start": "2720009",
    "end": "2726539"
  },
  {
    "text": "things you know there's like little slots and stuff so this is something that transforms one of these switches or",
    "start": "2726539",
    "end": "2733689"
  },
  {
    "text": "points into a two track so a to track the points goes in and the to track comes out and it's really easy",
    "start": "2733689",
    "end": "2741300"
  },
  {
    "text": "that's all it is that's the sort bind is it's very simple you just pass something in and if it's something you know you'd",
    "start": "2741300",
    "end": "2747780"
  },
  {
    "text": "call it like it was before you go on to that weave railroad track and if it was nothing you just bypass the whole thing",
    "start": "2747780",
    "end": "2754280"
  },
  {
    "text": "so this is the core of a monad right here I mean I'm not expecting you to understand this like stay away but you",
    "start": "2754280",
    "end": "2761310"
  },
  {
    "text": "can I just want you to realize it's not that complicated it's not so scary it's just a way of changing things together",
    "start": "2761310",
    "end": "2767720"
  },
  {
    "text": "transforming one kind of function into another kind of function so if examples",
    "start": "2767720",
    "end": "2773190"
  },
  {
    "text": "go to our option thing this is what it look like before and when we use bind this is what it looks like now right so",
    "start": "2773190",
    "end": "2780600"
  },
  {
    "text": "it converts this kind of triangular pyramid of Doom into a nice flat thing if we go back to the yeah this monadic",
    "start": "2780600",
    "end": "2789780"
  },
  {
    "text": "bind if we go to the task analogy there we go we're waiting for something and if it completes we go on to the next task",
    "start": "2789780",
    "end": "2795660"
  },
  {
    "text": "if it doesn't completely bypass it and so on again same kind of model we're",
    "start": "2795660",
    "end": "2802590"
  },
  {
    "text": "going to write a special thing called task bind which is again it's just a way of passing in continuation when this task is finished what do you want me to",
    "start": "2802590",
    "end": "2808830"
  },
  {
    "text": "do okay and this is also called a promise or a future mean they're all very similar these kinds of things and",
    "start": "2808830",
    "end": "2816240"
  },
  {
    "text": "this is what it looks like before when it's finished do this other thing when it's finished do this other thing when it's finished did theirs I think when",
    "start": "2816240",
    "end": "2822450"
  },
  {
    "text": "you use the bind this is what looks like it looks very flat very linear very easy to understand and you've also hidden a",
    "start": "2822450",
    "end": "2829200"
  },
  {
    "text": "lot of the complexity it's like you can really focus on what's important which is what the steps are",
    "start": "2829200",
    "end": "2835339"
  },
  {
    "text": "okay so let's chain era handless together here's a function that does",
    "start": "2838410",
    "end": "2844450"
  },
  {
    "text": "some processes a customer request it was seized request you validate request you",
    "start": "2844450",
    "end": "2849550"
  },
  {
    "text": "can authorize the email for some reason you update the database you send an email whatever a bunch of stuff you're doing this is kind of typical thing you",
    "start": "2849550",
    "end": "2856660"
  },
  {
    "text": "might do in a web service the problem is you've got errors like if the request is",
    "start": "2856660",
    "end": "2862900"
  },
  {
    "text": "not valid you have to return and if the database couldn't be found if they can't find the customer record that's an error",
    "start": "2862900",
    "end": "2868599"
  },
  {
    "text": "and if the database times out that's an error and if the server's down that's an error and all of a sudden your clean",
    "start": "2868599",
    "end": "2874599"
  },
  {
    "text": "code has got really ugly with all this error handling and I'm sure you're aware of this in fact you know a lot of 50% of",
    "start": "2874599",
    "end": "2880570"
  },
  {
    "text": "your code is fully a rounding so how can we make this look nicer right we use the",
    "start": "2880570",
    "end": "2889089"
  },
  {
    "text": "same principle we say we do something and I see that a success or a failure right again it's this two-track model so",
    "start": "2889089",
    "end": "2895510"
  },
  {
    "text": "let's say we want to validate the input there's one if the if the name is blank that's a failure if the email is mank",
    "start": "2895510",
    "end": "2901060"
  },
  {
    "text": "that's a failure and otherwise it's successful again it's this branching",
    "start": "2901060",
    "end": "2906190"
  },
  {
    "text": "model right so now again we have all these different things that validation",
    "start": "2906190",
    "end": "2911710"
  },
  {
    "text": "could succeed or if could fail the update database could succeed or fail we're sending an email because succeed",
    "start": "2911710",
    "end": "2917230"
  },
  {
    "text": "or fail and we want to chain all these things together and we've just seen exactly how to do that we transform them",
    "start": "2917230",
    "end": "2922990"
  },
  {
    "text": "into these two tracks and then we can glue them together into a big pipeline so this is what I call well we're your",
    "start": "2922990",
    "end": "2928960"
  },
  {
    "text": "into programming and if you're interest if you google that you'll find I have a whole talk about it so this is what I in",
    "start": "2928960",
    "end": "2936160"
  },
  {
    "text": "in a functional language this is what the code would look like before without error handling you know receive the quest and then pipe",
    "start": "2936160",
    "end": "2941230"
  },
  {
    "text": "it in to validate and point it in to update and point back in to send email and so on now after error handling it's",
    "start": "2941230",
    "end": "2948040"
  },
  {
    "text": "going to look like this okay so that was before after error handling it's gonna look like this okay which is looks the",
    "start": "2948040",
    "end": "2955240"
  },
  {
    "text": "same that's this is the cool thing it looks pretty much the same code because the error handling has been hidden",
    "start": "2955240",
    "end": "2960520"
  },
  {
    "text": "behind the scenes so behind the scenes it's got this two-track model where the errors have been shunted off to the side",
    "start": "2960520",
    "end": "2967450"
  },
  {
    "text": "but it's a nice point the nice things that's been hidden from you as a user looking this go you can your code is not",
    "start": "2967450",
    "end": "2973120"
  },
  {
    "text": "clogged up with lots of our hand in code so yeah CF shava find a profit slash of",
    "start": "2973120",
    "end": "2979420"
  },
  {
    "text": "rock ok maps ok so we have these things",
    "start": "2979420",
    "end": "2987250"
  },
  {
    "text": "like options and lists and stuff this whole often there's a whole world of things with chef apparel is like a",
    "start": "2987250",
    "end": "2993610"
  },
  {
    "text": "parallel universe of these things and in functional programming we offer end up me in this world we we do something we",
    "start": "2993610",
    "end": "2999100"
  },
  {
    "text": "have an optional something we do something have a list of something and then to process it we have to kind of come down to the normal world and we go",
    "start": "2999100",
    "end": "3005400"
  },
  {
    "text": "back up and we go down we go back up and come down and this is really ugly",
    "start": "3005400",
    "end": "3010650"
  },
  {
    "text": "code you end up with code that test like extract this and you know what you",
    "start": "3010650",
    "end": "3015690"
  },
  {
    "text": "really want to do is kind of somehow stay up when you Pro once you've got up into this world of doing something you want to stay in that world and only ever",
    "start": "3015690",
    "end": "3021810"
  },
  {
    "text": "come down at the very end for example that's that's the nice way of doing it so let's let's look at a real example",
    "start": "3021810",
    "end": "3028040"
  },
  {
    "text": "here's my add 42 function because 42 is a very important number this doesn't",
    "start": "3028040",
    "end": "3034740"
  },
  {
    "text": "this only works on normal introduced it doesn't work on optional integers so let's make it work on optional integers",
    "start": "3034740",
    "end": "3039930"
  },
  {
    "text": "so we're going to say add 42 to an optional integer and now we have to say well is it something or is it nothing",
    "start": "3039930",
    "end": "3045900"
  },
  {
    "text": "and if it's something call this function and then take their thing and then turn it back into an option again this is",
    "start": "3045900",
    "end": "3053010"
  },
  {
    "text": "really ugly code we're unwrapping it we're doing the thing and then we're wrapping it again right it's ugly",
    "start": "3053010",
    "end": "3060020"
  },
  {
    "text": "come down unwrap go back up that's exactly what I'm saying this is what you shouldn't do",
    "start": "3060890",
    "end": "3066830"
  },
  {
    "text": "so what we want to do is somehow take this add 42 function have it in lifted",
    "start": "3066830",
    "end": "3071910"
  },
  {
    "text": "into this world of options how do we lift how do we take a normal function and turn it into a function that works",
    "start": "3071910",
    "end": "3077400"
  },
  {
    "text": "on options that's what map is so a map will take a normal function down here option dot map",
    "start": "3077400",
    "end": "3084090"
  },
  {
    "text": "in this case and we'll turn it into a function up here and that's called lifting in this case it's using map so",
    "start": "3084090",
    "end": "3091820"
  },
  {
    "text": "we take our 42 function you do map on it and it lifts it into ad 42",
    "start": "3091820",
    "end": "3097460"
  },
  {
    "text": "- option though in this in the bottom one we can pass in a normal integer get",
    "start": "3097460",
    "end": "3102890"
  },
  {
    "text": "43 then the top one we can pass in an optional integer and we get back an optional 43 so in the code we would just",
    "start": "3102890",
    "end": "3111920"
  },
  {
    "text": "usually say add 42 the option we'll just say it's the Mac of add 42 and we can just use it and often that's very nice",
    "start": "3111920",
    "end": "3119000"
  },
  {
    "text": "we've got a little helper function but often we'd actually literally not even create intermediate function we just call it directly option map add 42 and",
    "start": "3119000",
    "end": "3126890"
  },
  {
    "text": "that creates this at the intermediate function for us and that works with lists so anything you want to do on a",
    "start": "3126890",
    "end": "3132800"
  },
  {
    "text": "list you can take a normal function and lift it into the world of lists and it now works on lists so for example add 42",
    "start": "3132800",
    "end": "3139310"
  },
  {
    "text": "we want to work on a list of things we do list back and it transforms each",
    "start": "3139310",
    "end": "3144860"
  },
  {
    "text": "element in the list if we have async things we have things that it works in a",
    "start": "3144860",
    "end": "3150470"
  },
  {
    "text": "normal world we map it into a lot of async things and so on and so forth it's a very very very common pattern this",
    "start": "3150470",
    "end": "3156890"
  },
  {
    "text": "mapping pattern so in a functional library there's a lot of generic types",
    "start": "3156890",
    "end": "3161990"
  },
  {
    "text": "that have a map function and you've basically learn how to use it and if you write in write your own if it doesn't",
    "start": "3161990",
    "end": "3168290"
  },
  {
    "text": "because it's really important so okay so jargon alert these are called functors",
    "start": "3168290",
    "end": "3175070"
  },
  {
    "text": "in functional programming people but mapable type in a functor same thing but",
    "start": "3175070",
    "end": "3181220"
  },
  {
    "text": "I'm not going to use the word function because it's it's mathematical all right ma nodes okay people who are scared of",
    "start": "3181220",
    "end": "3190550"
  },
  {
    "text": "mathematics should leave right now and if anyone faints oh okay here's the",
    "start": "3190550",
    "end": "3197120"
  },
  {
    "text": "mathematics we're going to deal with okay one plus two equals three so is that too scary for people how about this",
    "start": "3197120",
    "end": "3204020"
  },
  {
    "text": "one one plus two plus three is the same as a 1 plus 2 Plus 3 and what about 1",
    "start": "3204020",
    "end": "3209930"
  },
  {
    "text": "plus 0 is 1 and 0 plus 1 is 1 okay that's not how it's not too scary",
    "start": "3209930",
    "end": "3215470"
  },
  {
    "text": "people aren't freaking out ok so let's let's look at this this isn't really obvious ok let's look at this from a",
    "start": "3215470",
    "end": "3221330"
  },
  {
    "text": "mathematicians point of view and let's give it some mathematical jargon because it doesn't it's too easy to understand",
    "start": "3221330",
    "end": "3227240"
  },
  {
    "text": "let's make it more complicated so let's look at 1 plus 2 cos 3 the mathematician would say oh this is",
    "start": "3227240",
    "end": "3232850"
  },
  {
    "text": "interesting there are some things in you and then some way of combining these things and you get another one of the",
    "start": "3232850",
    "end": "3237890"
  },
  {
    "text": "same kind of things we add two integers and we get another integer multiplication is the same thing we've",
    "start": "3237890",
    "end": "3243440"
  },
  {
    "text": "got two things we've got some way of combining them and we get another one of those things here's strings we've got two things",
    "start": "3243440",
    "end": "3250820"
  },
  {
    "text": "strings and we got some way of combining them which is strength and cat and we get another string or we have two lists",
    "start": "3250820",
    "end": "3257780"
  },
  {
    "text": "or two arrays and we can cap them together and we get another array okay very very common right now what's cool",
    "start": "3257780",
    "end": "3265910"
  },
  {
    "text": "about this is you can do something clever so if you have 1 plus 2 that gives you another integer right well",
    "start": "3265910",
    "end": "3272660"
  },
  {
    "text": "because it's another integer you can add something else to it you can add 3 to it but that's another integer too so you",
    "start": "3272660",
    "end": "3279260"
  },
  {
    "text": "can add another number to it right and so on and so forth so what we've done is we've taken a pairwise operation which",
    "start": "3279260",
    "end": "3285560"
  },
  {
    "text": "is plus and because this because this property you can actually extend it something works on lists so 1 2 3 4 we",
    "start": "3285560",
    "end": "3293720"
  },
  {
    "text": "can add them all together right so that's kind of cool what about the next one this thing of not caring which order",
    "start": "3293720",
    "end": "3301070"
  },
  {
    "text": "you do something dude you add 2 & 3 first or you add 1 & 2 first doesn't matter right now if there's different",
    "start": "3301070",
    "end": "3307130"
  },
  {
    "text": "things subtraction of stuff did you do it doesn't matter but for addition it doesn't matter right so what's",
    "start": "3307130",
    "end": "3312980"
  },
  {
    "text": "interesting about this is because the order doesn't matter 1 plus 2 Plus 3 plus 4 you can either do the 1 plus 2 in",
    "start": "3312980",
    "end": "3318860"
  },
  {
    "text": "the 3 plus 4 separately and then add them later or we can do the 1 plus 2 first and then do the 3 next and then do",
    "start": "3318860",
    "end": "3324950"
  },
  {
    "text": "the 4 next right there's lots of different ways of getting to the same answer that turns out to be really cool",
    "start": "3324950",
    "end": "3330010"
  },
  {
    "text": "because we'll see in a minute okay so like say as subtraction doesn't work",
    "start": "3330010",
    "end": "3335930"
  },
  {
    "text": "right the order of the combining doesn't matter so the multiplication works listen cat works and so on alright last",
    "start": "3335930",
    "end": "3343550"
  },
  {
    "text": "one 1 plus 0 equals 1 so a mathematician so worse interesting you've got a special kind of thing that when you",
    "start": "3343550",
    "end": "3350750"
  },
  {
    "text": "combined it nothing happens you get back the original thing right so for addition that special kind of thing is called a",
    "start": "3350750",
    "end": "3356600"
  },
  {
    "text": "zero for multiplication that special kind of thing is called 1 right it's a special kind of thing where you",
    "start": "3356600",
    "end": "3362369"
  },
  {
    "text": "multiply it you get back the same answer for Strings that special kind of thing is empty string and for lists it's the",
    "start": "3362369",
    "end": "3370740"
  },
  {
    "text": "empty list and someone so forth okay so now we've got a generalization you've got a bunch of things and you've got",
    "start": "3370740",
    "end": "3376680"
  },
  {
    "text": "some way to combine them pairwise first rule you combine two things you get another one of the same thing",
    "start": "3376680",
    "end": "3383360"
  },
  {
    "text": "associativity which is when you combine two things it doesn't matter which order you combine them I mean you have to",
    "start": "3383360",
    "end": "3388710"
  },
  {
    "text": "combine them in the right way but the order doesn't matter and finally there's an identity element there's something that when you add it to something it",
    "start": "3388710",
    "end": "3394500"
  },
  {
    "text": "does make a difference those these things are called a monoid right and",
    "start": "3394500",
    "end": "3399750"
  },
  {
    "text": "that's it so the fancy mathematical word for something which is sort of basically common sense why is that hi do I care as",
    "start": "3399750",
    "end": "3406140"
  },
  {
    "text": "a programmer why do I care about this stuff well we already saw that if you combine two things you'll get another",
    "start": "3406140",
    "end": "3411840"
  },
  {
    "text": "one of the same thing that turns a pairwise operation into something works on lists so one plus two plus three plus",
    "start": "3411840",
    "end": "3418350"
  },
  {
    "text": "four I can say take that plus sign and",
    "start": "3418350",
    "end": "3423619"
  },
  {
    "text": "stick it everywhere between the items so I could have one two three four and in f-sharp this is called reduce right so",
    "start": "3423619",
    "end": "3431400"
  },
  {
    "text": "I'm going to take it the reduced function is the same as taking that operation and sticking it between each number all right so any any pairwise",
    "start": "3431400",
    "end": "3440550"
  },
  {
    "text": "operation can be applied to everything internally using reduce multiplication I",
    "start": "3440550",
    "end": "3447390"
  },
  {
    "text": "can say reduced by an non-possession so",
    "start": "3447390",
    "end": "3452550"
  },
  {
    "text": "stinking cap so take the list of strings and I'm going to reduce them using plus so these two things are the same whether",
    "start": "3452550",
    "end": "3459359"
  },
  {
    "text": "I do it especially or whether I do it reduce okay",
    "start": "3459359",
    "end": "3465020"
  },
  {
    "text": "okay there's Sosa tivity thing why is that useful well because I can because I can calculate things in different orders",
    "start": "3465020",
    "end": "3471260"
  },
  {
    "text": "I can do stuff like divide and conquer I can do parallelization I can do incremental stuff let's look at",
    "start": "3471260",
    "end": "3477710"
  },
  {
    "text": "paralyzation let's say I have I want to add 1 & 2 & 3 & 4 and I have like 2 CPUs",
    "start": "3477710",
    "end": "3483340"
  },
  {
    "text": "what I can do is I can do 1 plus 2 on one CPU and I can do 3 plus 4 and under CPU and then I can combine the answers",
    "start": "3483340",
    "end": "3490340"
  },
  {
    "text": "right and I know it's going to work so I've literally paralyzed my my multiplicate my addition okay obviously",
    "start": "3490340",
    "end": "3497450"
  },
  {
    "text": "pretty trivial but you can see that if if you have this property you can actually split a task into multiple",
    "start": "3497450",
    "end": "3502700"
  },
  {
    "text": "parallel things and then add them up at the end that's paralyzation but even if",
    "start": "3502700",
    "end": "3508340"
  },
  {
    "text": "you don't need paralyzation the incremental accumulation is really important so let's say I do 1 plus 2 Plus 3 and the answer is 6",
    "start": "3508340",
    "end": "3515930"
  },
  {
    "text": "okay and then your boss comes along and says you know what actually we need to do want us to plus 2 plus 4 not just",
    "start": "3515930",
    "end": "3522140"
  },
  {
    "text": "what this do okay so I have to start all the way from the beginning and do all over again no you don't write you've already got",
    "start": "3522140",
    "end": "3529130"
  },
  {
    "text": "the first 3 done you don't need to do the first 3 again you can just say I've already got I've already figured out the",
    "start": "3529130",
    "end": "3534619"
  },
  {
    "text": "answer 6 I can just add 4 to it why I can do an incremental calculation I don't have to do a calculation from",
    "start": "3534619",
    "end": "3540530"
  },
  {
    "text": "scratch and then finally if I want to do",
    "start": "3540530",
    "end": "3545810"
  },
  {
    "text": "is reduce an empty list or I have a divide and conquer and one the steps is empty what do I start with and so this",
    "start": "3545810",
    "end": "3552500"
  },
  {
    "text": "is where the zero comes in it's very useful when you have missing data or empty data and so on so and there's a",
    "start": "3552500",
    "end": "3561320"
  },
  {
    "text": "semi clear if he doesn't have an entity it's still worse there's a thing called a semi we don't care about that all right so let's look at this useful let's",
    "start": "3561320",
    "end": "3567619"
  },
  {
    "text": "say I have some other lines I've got an order by the way I'm just going to go a few minutes over I hope if you need to",
    "start": "3567619",
    "end": "3574070"
  },
  {
    "text": "leave early that's fine I'm just I'm running a little tiny bit late so if you",
    "start": "3574070",
    "end": "3579680"
  },
  {
    "text": "have some order lines and you want to add them together you could say well I could just loop through them add them but what you could do instead is you",
    "start": "3579680",
    "end": "3585230"
  },
  {
    "text": "could say oh I know these are ma nodes so I floated as ma node and insulin are then like a combination of moloids is",
    "start": "3585230",
    "end": "3590869"
  },
  {
    "text": "another one ID so all I need to do is write a pairwise operation I can say pairwise add two lines together",
    "start": "3590869",
    "end": "3597420"
  },
  {
    "text": "by adding the quantity and adding a total and then I can say reduce so I",
    "start": "3597420",
    "end": "3602850"
  },
  {
    "text": "take this pairwise operation and I apply it to the entire list by using reduce and now I've added up my entire order",
    "start": "3602850",
    "end": "3609200"
  },
  {
    "text": "and that might be overkill for this kind of thing but you get the idea that writing a pairwise operations often simpler than writing a more complex",
    "start": "3609200",
    "end": "3615360"
  },
  {
    "text": "operation another really useful one is to convert non more nodes to monoids so",
    "start": "3615360",
    "end": "3622140"
  },
  {
    "text": "let's say you have some customers now customers you can't add customers together they're not things you can add",
    "start": "3622140",
    "end": "3627390"
  },
  {
    "text": "together but let's say you have some customer statistics that you want to add together like how many how many times",
    "start": "3627390",
    "end": "3634080"
  },
  {
    "text": "the customers visit your site or whatever now the customer stats are numbers and stuff they can be added",
    "start": "3634080",
    "end": "3639240"
  },
  {
    "text": "together and that's a monomial but so what you need to do is you need to transform your customers into",
    "start": "3639240",
    "end": "3645590"
  },
  {
    "text": "customer stats right and we're going to use a map function for doing that with the transforms one thing another thing",
    "start": "3645590",
    "end": "3651750"
  },
  {
    "text": "and then once we've got the customer stats we can do reduce which collapses them into a single customer stat okay",
    "start": "3651750",
    "end": "3658740"
  },
  {
    "text": "this is a map followed by a reduce alright so you may have heard of that this is very similar to what Google does",
    "start": "3658740",
    "end": "3666030"
  },
  {
    "text": "obviously it's much more complicated the giggle thing but the concepts are the same it's map followed by reduce yeah",
    "start": "3666030",
    "end": "3672060"
  },
  {
    "text": "there's someone tweeted this this is a very nice little diagram you have in these ingredients for sandwich you can't",
    "start": "3672060",
    "end": "3678360"
  },
  {
    "text": "add you know a loaf of bread to an onion right but you can have the slices of bread and slices of onion and those good",
    "start": "3678360",
    "end": "3684960"
  },
  {
    "text": "when we combined so what you do if you do map you map to the loaf of bread into a bunch of slices you map the onion into",
    "start": "3684960",
    "end": "3690090"
  },
  {
    "text": "a bunch of slices and they need to reduce on the slices to give you a bunch of sandwiches there's kind of a funny",
    "start": "3690090",
    "end": "3695250"
  },
  {
    "text": "way to think about it how do can make me a sandwich right one more expensive more",
    "start": "3695250",
    "end": "3701610"
  },
  {
    "text": "ways to cheat ma9 so let's say you have a log file for each day or your customer logging and you add them together with",
    "start": "3701610",
    "end": "3707910"
  },
  {
    "text": "their strings so you can add them together and you get a really big file if you turn them into summaries the",
    "start": "3707910",
    "end": "3716130"
  },
  {
    "text": "summaries can be added together much more you know much more small you know more efficient code so you can turn a",
    "start": "3716130",
    "end": "3721320"
  },
  {
    "text": "log file into a summary of the loafer and then they can be added up incrementally right you all you just do because it's a mole and you can",
    "start": "3721320",
    "end": "3726660"
  },
  {
    "text": "incrementally add today's summary you know entire five years with a date you can always just add the latest data and that",
    "start": "3726660",
    "end": "3734860"
  },
  {
    "text": "is called a monoid homomorphism this is why this is why the language is kind of off-putting to people no I see ma nodes",
    "start": "3734860",
    "end": "3742450"
  },
  {
    "text": "everywhere so like if you're doing web if you doing metrics for a website or something there's a well-known one using",
    "start": "3742450",
    "end": "3749680"
  },
  {
    "text": "counters rather than rates alternative use ma nodes so using count as well and",
    "start": "3749680",
    "end": "3755650"
  },
  {
    "text": "rates because counters can be aggregated if you want to know how many customer the number account of customers is easier than the number of customers per",
    "start": "3755650",
    "end": "3762190"
  },
  {
    "text": "second and and so the count of customers that's a mono dick and rank aggregation and so on all right almost finished",
    "start": "3762190",
    "end": "3770550"
  },
  {
    "text": "function composition is that a monoid right so I've got two functions I'm going to glue them together and I now",
    "start": "3770550",
    "end": "3776860"
  },
  {
    "text": "get a new function which is an apple to see cherry function and that is not the same you know there is no ones were not",
    "start": "3776860",
    "end": "3783460"
  },
  {
    "text": "the same as any one so I can't clear that together I mean I can't take that it's not the same kind of thing however",
    "start": "3783460",
    "end": "3788580"
  },
  {
    "text": "if I have Apple to Apple functions and I do them together I get another Apple Apple function okay so this is a model",
    "start": "3788580",
    "end": "3795100"
  },
  {
    "text": "this is cool functions confident function composition is a monoid it's",
    "start": "3795100",
    "end": "3800170"
  },
  {
    "text": "not awesome I know it's very awesome so what do we call it we'll call these things functions to have the same input",
    "start": "3800170",
    "end": "3805780"
  },
  {
    "text": "output shall we call them functions with the same kind of input output no now",
    "start": "3805780",
    "end": "3811810"
  },
  {
    "text": "we're going to call them endomorphisms so again more jargon so here's some",
    "start": "3811810",
    "end": "3818380"
  },
  {
    "text": "endomorphism so this is integer integer functions of all net more firms because the thing I can literally do a reduce",
    "start": "3818380",
    "end": "3823930"
  },
  {
    "text": "same kind of thing and I can get a new function which is the combination of all these functions maybe not very useful",
    "start": "3823930",
    "end": "3829300"
  },
  {
    "text": "but it just shows it's not just for numbers and strings you can do for anything so finally mono aids versus monads they",
    "start": "3829300",
    "end": "3837370"
  },
  {
    "text": "both start with M but they're kind of different and they're kind of confusing but there is a connection and I'll",
    "start": "3837370",
    "end": "3843460"
  },
  {
    "text": "quickly go through this so we have these these monads which are like I'm using this kind of branching railway track and",
    "start": "3843460",
    "end": "3849970"
  },
  {
    "text": "if you there's a way of gluing two of them together could get another branching where we track right that's composition monad composition so I get",
    "start": "3849970",
    "end": "3857410"
  },
  {
    "text": "the same kind of thing as closure and it doesn't matter which or do I do in right so I got associativity right",
    "start": "3857410",
    "end": "3863959"
  },
  {
    "text": "and I got a closure I got associative these things are mono EADS okay this is",
    "start": "3863959",
    "end": "3870319"
  },
  {
    "text": "branching where we tracks actually MA notes and so there's something called the Monad laws which we care about but",
    "start": "3870319",
    "end": "3877459"
  },
  {
    "text": "they're really the same as them on ID laws in disguise so this thing of closure an associative in identity and",
    "start": "3877459",
    "end": "3882890"
  },
  {
    "text": "people say you know what happens if I break the Monad laws well of course you go to jail but more importantly you lose",
    "start": "3882890",
    "end": "3888739"
  },
  {
    "text": "things like the benefits of aggregation whole point of having these laws is that you can combine things and get a new thing so there you go a monad it's just",
    "start": "3888739",
    "end": "3897140"
  },
  {
    "text": "a monoid in the kind of in offenders so I haven't really explained this but you can see that you know once the jargon",
    "start": "3897140",
    "end": "3902359"
  },
  {
    "text": "has been demystified a little bit there's a lot of its to do the jargon but it's you can see that monads and Manos kind of related and you don't really",
    "start": "3902359",
    "end": "3908749"
  },
  {
    "text": "have to care so much but it's kind of cool but hopefully your head doesn't explode too much on that one all right thanks",
    "start": "3908749",
    "end": "3915709"
  },
  {
    "text": "very much if you want the slides and the video they'll be on my website at /fp",
    "start": "3915709",
    "end": "3921049"
  },
  {
    "text": "patterns up there if you're interested in F sharp you can go to F sharp org and",
    "start": "3921049",
    "end": "3926329"
  },
  {
    "text": "I have a book coming out called the main modeling made functional if you're interested in it you can get the early",
    "start": "3926329",
    "end": "3932689"
  },
  {
    "text": "access Edition right now and it should be coming out in November and if you've got any questions please come and see me outside I'll be happy to answer any",
    "start": "3932689",
    "end": "3939229"
  },
  {
    "text": "questions thank you [Applause]",
    "start": "3939229",
    "end": "3946129"
  }
]