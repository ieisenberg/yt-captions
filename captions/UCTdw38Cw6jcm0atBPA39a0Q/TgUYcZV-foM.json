[
  {
    "text": "all righty I think it's time to start let's give it a go hello everyone we're",
    "start": "9599",
    "end": "16160"
  },
  {
    "text": "happy here to be here in Sydney first time for me first time in a DC Sydney",
    "start": "16160",
    "end": "21380"
  },
  {
    "text": "first time in Australia and New Zealand nearby right I'm gonna talk about async",
    "start": "21380",
    "end": "27050"
  },
  {
    "text": "demystified today and here's something that you should expect from from this",
    "start": "27050",
    "end": "33800"
  },
  {
    "text": "dog I'm gonna go for the history of async patterns in dotnet and then look",
    "start": "33800",
    "end": "39949"
  },
  {
    "text": "at the kind of history and evolution of tasks and async/await including value tasks some kind of catches you know",
    "start": "39949",
    "end": "46969"
  },
  {
    "text": "what's kind of behind the scenes I you know try this talk in some couple of",
    "start": "46969",
    "end": "52670"
  },
  {
    "text": "local user groups and one feedback was that the first half is kind of boring",
    "start": "52670",
    "end": "57859"
  },
  {
    "text": "for some people however other people find it useful so I still keep it in so I apologize if you're in the first group",
    "start": "57859",
    "end": "63109"
  },
  {
    "text": "you might be bored for you know first off and just that you know kind of all bit context on this talk this is not",
    "start": "63109",
    "end": "70580"
  },
  {
    "text": "something I came up you know you know entirely on my own this is actually rehash of something that the the father",
    "start": "70580",
    "end": "78290"
  },
  {
    "text": "and author of the you know of the async/await and all the sickness things",
    "start": "78290",
    "end": "85100"
  },
  {
    "text": "Steven told it internally and then I heard that I was like oh my gosh this thing has to get out like this is gold",
    "start": "85100",
    "end": "91310"
  },
  {
    "text": "that finally made me kind of understand a little bit more and deeper appreciate async/await stuff so this is one can",
    "start": "91310",
    "end": "98210"
  },
  {
    "text": "present over here and hopefully you're gonna get same value that I did from that so let's start with history a long",
    "start": "98210",
    "end": "105350"
  },
  {
    "text": "long time ago in Docklands framework 1.0 in 1.1 which is Wow 16 years 18 years",
    "start": "105350",
    "end": "112399"
  },
  {
    "text": "ago that's or something like that that's per day that's pretty far far out we",
    "start": "112399",
    "end": "117439"
  },
  {
    "text": "invented something called APM APM patterns stands for asynchronous programming model and what was literally",
    "start": "117439",
    "end": "126020"
  },
  {
    "text": "it was a thing where we had a ia sync result interface we had a couple of",
    "start": "126020",
    "end": "131810"
  },
  {
    "text": "things on it one was is completed its complete its synchronously those are",
    "start": "131810",
    "end": "137810"
  },
  {
    "text": "boolean's it had some object async state usually custom and made handle for the",
    "start": "137810",
    "end": "144320"
  },
  {
    "text": "async like a sink wait handle which usually was like you know manual reset event or",
    "start": "144320",
    "end": "149480"
  },
  {
    "text": "outer is settlement and you know this thing was you know cool back then it was",
    "start": "149480",
    "end": "155870"
  },
  {
    "text": "you know spread across BCL the core effects and the typical function you",
    "start": "155870",
    "end": "162830"
  },
  {
    "text": "would see in NBC L was something like this like there was like begin foo which takes call back",
    "start": "162830",
    "end": "168680"
  },
  {
    "text": "it takes the state and then and foo which would take the ia sync result that",
    "start": "168680",
    "end": "174080"
  },
  {
    "text": "the begin foo created or kind of returned the usage of the api's like",
    "start": "174080",
    "end": "180380"
  },
  {
    "text": "never basically two ways how to use it either you would wait for the callback you would call the you know beginner",
    "start": "180380",
    "end": "185990"
  },
  {
    "text": "fool you would wait for the callback to be called and then inside you would call the n foo or the other option that you",
    "start": "185990",
    "end": "191810"
  },
  {
    "text": "had is actually to directly call the end foo and block that thing would block",
    "start": "191810",
    "end": "197030"
  },
  {
    "text": "until that the asynchronous thing ended so you had two ways how to use it let me",
    "start": "197030",
    "end": "203300"
  },
  {
    "text": "it's actually let's look at that how it looks in code so synchronous call would",
    "start": "203300",
    "end": "208550"
  },
  {
    "text": "look like this you have a foo method is alternative and many functions in bcl-xl",
    "start": "208550",
    "end": "214220"
  },
  {
    "text": "have both synchronous and asynchronous stuff would be begin foo and and foo couple and to achieve exactly the same",
    "start": "214220",
    "end": "221510"
  },
  {
    "text": "thing as calling the synchronous synchronous fool using the asynchronous thing you would do this it would call",
    "start": "221510",
    "end": "227780"
  },
  {
    "text": "and foo on the begin foo and just passed now for callback now for object state magic happens basically the same thing",
    "start": "227780",
    "end": "235900"
  },
  {
    "text": "now to take advantage of the asynchronous nature obviously you would",
    "start": "235900",
    "end": "240920"
  },
  {
    "text": "not do that like that why why would you do the synchronous when you can do a Cygnus the whole pie the whole point of asynchronous is",
    "start": "240920",
    "end": "247040"
  },
  {
    "text": "actually to be a sickness to take the advantage you would call the begin foo and you would create their lambda",
    "start": "247040",
    "end": "254020"
  },
  {
    "text": "callback and inside you would basically as I said called and foo on",
    "start": "254020",
    "end": "260410"
  },
  {
    "text": "on the icing results that was created from the big info and it would get the",
    "start": "260410",
    "end": "265540"
  },
  {
    "text": "value but value out of that and do some stuff anyway thirdly is the pattern you know sounds",
    "start": "265540",
    "end": "271120"
  },
  {
    "text": "good right now this works fine when you have one single operation it breaks down badly when you need",
    "start": "271120",
    "end": "279400"
  },
  {
    "text": "something more complicated especially very for example you're passing things between streams or something like that",
    "start": "279400",
    "end": "284500"
  },
  {
    "text": "you need usually like more than one operation it's rare that you do it like hey one a sync operation I'm done it's",
    "start": "284500",
    "end": "289570"
  },
  {
    "text": "like you know copy I don't know 10 kilobytes buffers across streams or something like that until end and it's",
    "start": "289570",
    "end": "295930"
  },
  {
    "text": "usually a loop so how would that look like in a loop imagine that relay just said",
    "start": "295930",
    "end": "302440"
  },
  {
    "text": "you're copying a stranger stream so normal code would look something like this the synchronous version you would",
    "start": "302440",
    "end": "309100"
  },
  {
    "text": "read from the input into a buffer you would get information how much Beth bites all right",
    "start": "309100",
    "end": "314260"
  },
  {
    "text": "and usually zero is the you know notification how you're done get away and inside you would just like",
    "start": "314260",
    "end": "319390"
  },
  {
    "text": "take the buffer and pass it somewhere else imagine that this is for example taking I don't know disk you know you're",
    "start": "319390",
    "end": "325390"
  },
  {
    "text": "reading from disk one stream and you're sending it to network or the other opposite like you're reading from",
    "start": "325390",
    "end": "330880"
  },
  {
    "text": "network saving it to disk or saving to memory to process it all a bit further so fairly simple how would it look like",
    "start": "330880",
    "end": "338160"
  },
  {
    "text": "you know in an APM in the asynchronous way because doing that synchronously",
    "start": "338160",
    "end": "344650"
  },
  {
    "text": "kind of sucks so you would have the begin rate that's what we've seen before you would pass the you know past the",
    "start": "344650",
    "end": "353260"
  },
  {
    "text": "callback and the callback the first thing it would do it would call and read on that once you have to enter it from",
    "start": "353260",
    "end": "359680"
  },
  {
    "text": "the input what do you want to do with that you want to call the right to call the right you want to do it as well so",
    "start": "359680",
    "end": "367630"
  },
  {
    "text": "you would begin right on the input that's a bug in the code sorry for that",
    "start": "367630",
    "end": "373530"
  },
  {
    "text": "you would you know invoke the begin right again in the in the callback of the right you would call and right and",
    "start": "373530",
    "end": "380140"
  },
  {
    "text": "what do you want to do after so that's basically the one iteration there's the single operation after that you want to go on so you do begin read inside and",
    "start": "380140",
    "end": "388030"
  },
  {
    "text": "operate then do you begin right and again again again and you probably you know do computer science for a while you know",
    "start": "388030",
    "end": "393880"
  },
  {
    "text": "that it doesn't scale you know you know it does not work at all so the thing actually you need to do is to turn this",
    "start": "393880",
    "end": "399850"
  },
  {
    "text": "into loop and I don't try it myself but apparently it's extremely long and tricky and very few people do get it",
    "start": "399850",
    "end": "405580"
  },
  {
    "text": "right so that's kind of this kind of sucks and on top of that like this is",
    "start": "405580",
    "end": "411970"
  },
  {
    "text": "kind of the happy path not happy path it's actually not happy path when everything is asynchronous",
    "start": "411970",
    "end": "418210"
  },
  {
    "text": "but in practice oftentimes you get actually sin has come you know a lot of fun times but in certain scenarios it's quite common that you get synchronous",
    "start": "418210",
    "end": "425050"
  },
  {
    "text": "completion of the asynchronous tasks so we do with that that actually complicates stuff even more I'm going to",
    "start": "425050",
    "end": "430810"
  },
  {
    "text": "look at it in the next side so it's completely synchronously you know when he you know why would you kind of want",
    "start": "430810",
    "end": "437830"
  },
  {
    "text": "to deal with that first of all you want to leave that for performance reasons because if you have the data available",
    "start": "437830",
    "end": "442900"
  },
  {
    "text": "instead of like you know spanning in other tasks why scheduling it on fret pool and that stuff if you have this stuff over there just like go and deal",
    "start": "442900",
    "end": "449110"
  },
  {
    "text": "with that at the moment so the good code would look actually something like this inside inside a callback you would first",
    "start": "449110",
    "end": "456040"
  },
  {
    "text": "think you would say like hey did it complete synchronously and if not then you would do the asynchronous path otherwise you will fall back and do",
    "start": "456040",
    "end": "463090"
  },
  {
    "text": "something different right behind which means that you will have you know have if check like hey if it is completely",
    "start": "463090",
    "end": "469330"
  },
  {
    "text": "completed synchronously do do synchronous path actually there's quite a few BCL functions or you know",
    "start": "469330",
    "end": "476800"
  },
  {
    "text": "especially on networking and other stuff inside BC actually have exactly this pattern now this is not that great",
    "start": "476800",
    "end": "485169"
  },
  {
    "text": "because it has like several programs first of all before the loop that I said before in just the second isolationist",
    "start": "485169",
    "end": "491800"
  },
  {
    "text": "way was complicated this makes it even like you know another level more complicated so that's a no-go very you",
    "start": "491800",
    "end": "499180"
  },
  {
    "text": "know and overall actually you know people would leave but people read it then doing something like this they said",
    "start": "499180",
    "end": "505479"
  },
  {
    "text": "like you know what let me just like put everything on fret tool and that's gonna be easy you know that's kind of asynchronous as",
    "start": "505479",
    "end": "510760"
  },
  {
    "text": "well and you know let me know do the performance improve improvements and everything so that kind of sucked now",
    "start": "510760",
    "end": "518789"
  },
  {
    "text": "when you look at that the kind of is actually another problem",
    "start": "518789",
    "end": "526340"
  },
  {
    "text": "on top of what I said and the problem is that imagine that you have something",
    "start": "526340",
    "end": "531620"
  },
  {
    "text": "like memories stream when you're passing things around and it's actually you know",
    "start": "531620",
    "end": "537380"
  },
  {
    "text": "basically a memory stream typically the data is available right away so what's gonna happen is that if you",
    "start": "537380",
    "end": "542930"
  },
  {
    "text": "have this loop this beautiful loop very complicated right you have all if checks and stuff you take the take the completed",
    "start": "542930",
    "end": "550130"
  },
  {
    "text": "synchronously path all the time because you you know the memory is just available maybe maybe you do you know",
    "start": "550130",
    "end": "556100"
  },
  {
    "text": "compression in memory or something like that right what is what's gonna happen you're gonna have actually in this loop",
    "start": "556100",
    "end": "561620"
  },
  {
    "text": "you're gonna you're gonna get actually records if callbacks you know recursive calls because you're",
    "start": "561620",
    "end": "567260"
  },
  {
    "text": "not just looping but whenever you need to call the next step you're gonna call it yourself and after roughly ten",
    "start": "567260",
    "end": "572600"
  },
  {
    "text": "thousand you know records of course you're gonna stack overflow so that's yet another thing to kind of worry about and something that kind of complicated",
    "start": "572600",
    "end": "579170"
  },
  {
    "text": "things so overall you know it was it's complicated and you know even in BCL we",
    "start": "579170",
    "end": "585980"
  },
  {
    "text": "can have lots of wrappers around these things and working something called lazy async result in the implementation",
    "start": "585980",
    "end": "591380"
  },
  {
    "text": "inside and there's lots of specializations and overall very complicated kind of rocket science code",
    "start": "591380",
    "end": "597380"
  },
  {
    "text": "and actually I had the opportunity to run into that pro last year in networking I was like oh my gosh what is",
    "start": "597380",
    "end": "603890"
  },
  {
    "text": "this doing and we had actually security bugs around that because buffer management because you don't know when things come back and what you can",
    "start": "603890",
    "end": "609530"
  },
  {
    "text": "release and just like pure nightmare nightmare all right one day a little bit",
    "start": "609530",
    "end": "614630"
  },
  {
    "text": "later in dotnet framework 2.0 we decided like let's do something better or oh I",
    "start": "614630",
    "end": "619790"
  },
  {
    "text": "should say better we Pro let's try for do something better we did something different we did event based a",
    "start": "619790",
    "end": "625330"
  },
  {
    "text": "synchronous Potter EAP and it was very similar in its nature as the previous",
    "start": "625330",
    "end": "631220"
  },
  {
    "text": "day I am a p.m. accepted use events so over here you would kind of like hook up events of it like Sandra and event arcs",
    "start": "631220",
    "end": "638750"
  },
  {
    "text": "and live was fairly beautiful now you know it's very straightforward idea and",
    "start": "638750",
    "end": "646000"
  },
  {
    "text": "the the handler would be kind of involved generally by Fred pool the callback when it was completed like you",
    "start": "646000",
    "end": "652610"
  },
  {
    "text": "know cool right the problem is that it did not solve actually the multiple calls problems or",
    "start": "652610",
    "end": "658760"
  },
  {
    "text": "loops so the stuff that I showed before it has exactly the same problems apparently we decided that it will",
    "start": "658760",
    "end": "665600"
  },
  {
    "text": "decide we realize that right after shipping or very quickly but yeah we try to improve things but we did not",
    "start": "665600",
    "end": "671390"
  },
  {
    "text": "actually help with the key programs so it was kind of an interesting experiment",
    "start": "671390",
    "end": "676730"
  },
  {
    "text": "but didn't really go anywhere in BCL it's actually used at a couple of classes especially I'm not working like",
    "start": "676730",
    "end": "683540"
  },
  {
    "text": "SMTP client TCP client and background worker around thread pool and that stuff so it is some use but overall it didn't",
    "start": "683540",
    "end": "691220"
  },
  {
    "text": "kind of kick off much we didn't kind of push for it either it was you know interesting experiment",
    "start": "691220",
    "end": "696380"
  },
  {
    "text": "but one important thing that came out of that was actually execution context which you might have heard about you",
    "start": "696380",
    "end": "703130"
  },
  {
    "text": "know it's something imagine that it's something like you know a sink low go so something that",
    "start": "703130",
    "end": "708260"
  },
  {
    "text": "flows with your asynchronous you know flow through the frets no matter where",
    "start": "708260",
    "end": "713870"
  },
  {
    "text": "you kind of execute so you have a place baby were to kind of put things in and actually a sink logo is built on top of",
    "start": "713870",
    "end": "720950"
  },
  {
    "text": "that in later future versions so even though it's kind of like you know sucks",
    "start": "720950",
    "end": "726260"
  },
  {
    "text": "that we introduced something that was not useful at least kind of some side effects very useful eventually so let's",
    "start": "726260",
    "end": "732650"
  },
  {
    "text": "move to you know next step and that eventually afterwards task came around and it was",
    "start": "732650",
    "end": "740180"
  },
  {
    "text": "in actually dotnet framework 4.0 which again is probably a few years and",
    "start": "740180",
    "end": "746560"
  },
  {
    "text": "interesting that it was created as a part of MSR which is Microsoft Research now and it was strictly about parallel",
    "start": "746560",
    "end": "754070"
  },
  {
    "text": "computing it was has nothing to do with IO and stuff like originally it was",
    "start": "754070",
    "end": "759560"
  },
  {
    "text": "really for you know how to do efficiently on some unified way some divide and conquer so imagine quicksort",
    "start": "759560",
    "end": "765440"
  },
  {
    "text": "right you know we learn it at school so if you went to school if you're not self-taught and that stuff where you",
    "start": "765440",
    "end": "770990"
  },
  {
    "text": "kind of do quicksort you're going to make the pad be what you say the left side sort me left side right side do it recursively divide conquer when you have",
    "start": "770990",
    "end": "777620"
  },
  {
    "text": "results you can emerge it together so that's what the goal was now",
    "start": "777620",
    "end": "783850"
  },
  {
    "text": "you know we got there it kind of shaped the task and honestly like you know how it shaped the task how it created that",
    "start": "783850",
    "end": "790220"
  },
  {
    "text": "that state until today and it's interesting you know note from Steven",
    "start": "790220",
    "end": "796220"
  },
  {
    "text": "that he made is that you know you know the task is pretty good you know it's light weight nice you know is they to",
    "start": "796220",
    "end": "801830"
  },
  {
    "text": "think about it's roughly 90 percent all the things in there are right and 10",
    "start": "801830",
    "end": "806900"
  },
  {
    "text": "percent until today still they gave up at night even after 10 years so I would love to change it but obviously",
    "start": "806900",
    "end": "813190"
  },
  {
    "text": "compatibility everything people depend on that not gonna happen sorry so what is that task and if you",
    "start": "813190",
    "end": "822140"
  },
  {
    "text": "didn't didn't kind of run into that before it really truly represents",
    "start": "822140",
    "end": "827330"
  },
  {
    "text": "something general general work it doesn't care if it's compute if it's IO it's not tied to Fred pool which is the",
    "start": "827330",
    "end": "833060"
  },
  {
    "text": "beautiful thing I mean almost not tied to Fred pool we're gonna get to that you know it's really about you know not",
    "start": "833060",
    "end": "841430"
  },
  {
    "text": "exactly it's not tied to the execution it just represents the war the work you can call it in other languages like",
    "start": "841430",
    "end": "847640"
  },
  {
    "text": "promise future or other terminology but it's basically the same thing you can shove results into it you can it can be",
    "start": "847640",
    "end": "854300"
  },
  {
    "text": "completed and it can wake up somebody who's waiting on the task that's roughly what it does so that we have two",
    "start": "854300",
    "end": "860480"
  },
  {
    "text": "versions task and task of T one is generic basically what would return operation return value is that's the T",
    "start": "860480",
    "end": "866600"
  },
  {
    "text": "if it's white then you have the non-generic part task and what it",
    "start": "866600",
    "end": "871820"
  },
  {
    "text": "contains as I said like first of all it returns the value T in case of the task of T for task it's white so there's",
    "start": "871820",
    "end": "878630"
  },
  {
    "text": "nothing it has some state right to synchronization and as well as some",
    "start": "878630",
    "end": "884450"
  },
  {
    "text": "state related to to callback that you're going to have to call or somebody has to",
    "start": "884450",
    "end": "889520"
  },
  {
    "text": "go now that starts it just represent things there's a beautiful thing called",
    "start": "889520",
    "end": "894740"
  },
  {
    "text": "task completion source which not many people run into if you're consumers of the tasks only and the task completion",
    "start": "894740",
    "end": "901700"
  },
  {
    "text": "source is something that actually are actually coming back first to task task it actually is something that you know",
    "start": "901700",
    "end": "907880"
  },
  {
    "text": "you consume you use it you kind of hook up to that and you say like in hey when you're done you know call me or if you're done",
    "start": "907880",
    "end": "914750"
  },
  {
    "text": "already just call me right now but you basically hook up yourself to something you if you have a task in hand or",
    "start": "914750",
    "end": "920780"
  },
  {
    "text": "somebody gave you a task you're not given the opportunity to actually do something about it like change its state",
    "start": "920780",
    "end": "926900"
  },
  {
    "text": "that is the role of the task completion source so as I said like you know the task is something that you can tell it",
    "start": "926900",
    "end": "933110"
  },
  {
    "text": "like you know hey I have callback you know when you're done or you know even right now when you're ready and it's",
    "start": "933110",
    "end": "938390"
  },
  {
    "text": "completed call me back the other thing that is inside is that hey or you can use it for is like you",
    "start": "938390",
    "end": "944390"
  },
  {
    "text": "know I want to block until it's done so like you know not giving call back but kind of wait on you and the other thing",
    "start": "944390",
    "end": "950480"
  },
  {
    "text": "you cannot really complete it directly by the user now that's a good thing",
    "start": "950480",
    "end": "956270"
  },
  {
    "text": "there's this task completion source which is actually wrapper around tasks which is interesting it calls internal method methods on the",
    "start": "956270",
    "end": "963800"
  },
  {
    "text": "task itself to actually change its state and that stuff but the beauty of the",
    "start": "963800",
    "end": "969320"
  },
  {
    "text": "desk completion source it is something that if your producer of such work like",
    "start": "969320",
    "end": "974510"
  },
  {
    "text": "for example networking or whatever you know I owe you don't give it away because you give it only to trusted",
    "start": "974510",
    "end": "980720"
  },
  {
    "text": "people or trusted colors that you know are not gonna mess up in your workflow because imagine you know you're reading",
    "start": "980720",
    "end": "987080"
  },
  {
    "text": "something from network or something like that and somebody suddenly decides like if you're done like well I'm not done I",
    "start": "987080",
    "end": "993680"
  },
  {
    "text": "you know so you know you want to be in charge of when things are done when",
    "start": "993680",
    "end": "999110"
  },
  {
    "text": "things are you know when you're ready to kind of move and make it complete it so",
    "start": "999110",
    "end": "1004720"
  },
  {
    "text": "the task completions are first kind of like changes you know under new hood the task they're free base which is either",
    "start": "1004720",
    "end": "1011500"
  },
  {
    "text": "you set result which means that if you complete it I know you read some data from some stream or something",
    "start": "1011500",
    "end": "1017170"
  },
  {
    "text": "you set result or there was an exception happening during the time maybe lost connection or something you can set",
    "start": "1017170",
    "end": "1023140"
  },
  {
    "text": "exception or it has been cancelled from the user in that case you say hey it's cancelled so we were done and it's gonna",
    "start": "1023140",
    "end": "1028480"
  },
  {
    "text": "be some canceled exception later on right let's move on the consumption so I",
    "start": "1028480",
    "end": "1035860"
  },
  {
    "text": "said the task how its consumed you know we have a task leak and you know either",
    "start": "1035860",
    "end": "1043030"
  },
  {
    "text": "you can wait on it so you do t to plate that usually creates the manual reset",
    "start": "1043030",
    "end": "1048580"
  },
  {
    "text": "event and it will be signal later with you know if you call the one of the free",
    "start": "1048580",
    "end": "1054220"
  },
  {
    "text": "methods or task completion source if it calls the set set results if exception or set cancel or you can do the you know",
    "start": "1054220",
    "end": "1061779"
  },
  {
    "text": "not blocking way and say like you know hey here's my callback you know when you're done with it you know just call",
    "start": "1061779",
    "end": "1067029"
  },
  {
    "text": "me back the beautiful thing on that that you can call it multiple times or it doesn't have to be only you there can be",
    "start": "1067029",
    "end": "1072190"
  },
  {
    "text": "multiple consumers of the same time task who kind of hook up to that and say like you know hey please wake me up or call",
    "start": "1072190",
    "end": "1079149"
  },
  {
    "text": "me back when you're done so this is how you can hook up into it and the",
    "start": "1079149",
    "end": "1085809"
  },
  {
    "text": "interesting thing that it does not guarantee you no order of execution so it doesn't matter in which order you're going to hook up the callbacks and it's",
    "start": "1085809",
    "end": "1092620"
  },
  {
    "text": "always asynchronous so it doesn't have any you know synchronous way except there's a overloaded tax execution",
    "start": "1092620",
    "end": "1099279"
  },
  {
    "text": "option and we can dance in here and sleep up in you're gonna get into that and if you look at this like you know",
    "start": "1099279",
    "end": "1105460"
  },
  {
    "text": "why is this so much better or than what we talked at the beginning the APM the",
    "start": "1105460",
    "end": "1110649"
  },
  {
    "text": "key difference is that you know in the APM and ia sync result and the original",
    "start": "1110649",
    "end": "1115750"
  },
  {
    "text": "you know asynchronous pattern we didn't have any chart implementation over here you actually you can share lots of code",
    "start": "1115750",
    "end": "1122860"
  },
  {
    "text": "because the continuation is not specific to the call you don't have to pass the delegate at the creation time so you can",
    "start": "1122860",
    "end": "1130210"
  },
  {
    "text": "have like generic code and then whoever needs to kind of be woken up later on is gonna hook up to that that's kind of",
    "start": "1130210",
    "end": "1135700"
  },
  {
    "text": "like very small thing but actually it enabled lots of interesting things and we will see later in the talk that",
    "start": "1135700",
    "end": "1142179"
  },
  {
    "text": "actually that's what the async await uses exactly you know behind who the compiler actually hooks up to these",
    "start": "1142179",
    "end": "1147909"
  },
  {
    "text": "tasks to be called back into some generated code and execute geometry",
    "start": "1147909",
    "end": "1153070"
  },
  {
    "text": "method on your behalf you know small thing but change the world now let's talk about the thing",
    "start": "1153070",
    "end": "1159759"
  },
  {
    "text": "that keeps different up up in night you know we did this function test run which",
    "start": "1159759",
    "end": "1166210"
  },
  {
    "text": "is convenient method every month of it the trouble is that it makes up things it basically this is ty to fret pool",
    "start": "1166210",
    "end": "1174639"
  },
  {
    "text": "because what it does it actually creates the task runs on that fret pool and there's if you remembered as I said task is in",
    "start": "1174639",
    "end": "1181590"
  },
  {
    "text": "general like representation of work it doesn't care about first one I think except this one and on top of that to",
    "start": "1181590",
    "end": "1188070"
  },
  {
    "text": "kind of implement that you know you know this is how the task doctrine looks like we actually",
    "start": "1188070",
    "end": "1193620"
  },
  {
    "text": "editfield to the task just to support this which kind of sucks so we kind of made it larger and actually don't know",
    "start": "1193620",
    "end": "1201480"
  },
  {
    "text": "if we fixed it but I'm gonna see actually why we think it's bad as I said",
    "start": "1201480",
    "end": "1206610"
  },
  {
    "text": "it cues the work on the fret pool you know some fret will grab it execute whatever think and then mark the task",
    "start": "1206610",
    "end": "1212700"
  },
  {
    "text": "completed so it's a convenient method obviously people of it because it's",
    "start": "1212700",
    "end": "1218010"
  },
  {
    "text": "useful but any other day you know it complicated things because it's kind of",
    "start": "1218010",
    "end": "1223440"
  },
  {
    "text": "suddenly everyone things like oh now look around it creates the frets like and their mindset is that hey tasks are",
    "start": "1223440",
    "end": "1229140"
  },
  {
    "text": "about frets which is actually not the fact so we kind of complicated for people to understand it and on top of",
    "start": "1229140",
    "end": "1234270"
  },
  {
    "text": "that kind of messed up with with our implementation so what if we said like",
    "start": "1234270",
    "end": "1240870"
  },
  {
    "text": "hey you know why don't we do it simpler there's actually why how to implement astute ROM you know with existing things",
    "start": "1240870",
    "end": "1248250"
  },
  {
    "text": "that I just showed you and it's well nicely demonstrates how you would use tasks and task completion source",
    "start": "1248250",
    "end": "1253560"
  },
  {
    "text": "actually so what do you do first we say you know inside you get like hey I'm supposed to execute this delegate F and",
    "start": "1253560",
    "end": "1259530"
  },
  {
    "text": "I'm supposed to return some task of T after that so we would create the task completion source because you're the",
    "start": "1259530",
    "end": "1265140"
  },
  {
    "text": "person who will generate the work you don't put it away you would that Q some",
    "start": "1265140",
    "end": "1270870"
  },
  {
    "text": "work on the on the thread pool that would do what it would execute exactly what you were told to execute and once",
    "start": "1270870",
    "end": "1277050"
  },
  {
    "text": "you're done you have some result you will set it on the task completion source now and then eventually at the",
    "start": "1277050",
    "end": "1282540"
  },
  {
    "text": "end you will return the task out of the task completion source which I might",
    "start": "1282540",
    "end": "1287580"
  },
  {
    "text": "because it's basically as I said before it's the wrapper around task the task completion source and cause the internal methods right it's obviously in retail",
    "start": "1287580",
    "end": "1295260"
  },
  {
    "text": "bit more complicated you have some try-catch exceptions are think you know and you do something else with them in",
    "start": "1295260",
    "end": "1300960"
  },
  {
    "text": "this case the step exception and there would be probably you know it's optional the cancellation you know stuff you",
    "start": "1300960",
    "end": "1307470"
  },
  {
    "text": "probably not have to listen to that if and in this case you don't even want to now the task that you return out of this",
    "start": "1307470",
    "end": "1314650"
  },
  {
    "text": "can be awaited on and if you look at that it's not that complicated it's actually fairly simple yet we unfortunately messed up our",
    "start": "1314650",
    "end": "1320110"
  },
  {
    "text": "implementation so yep mistake has been made let's go to async await so little bits",
    "start": "1320110",
    "end": "1326430"
  },
  {
    "text": "positive no so that thing came out in dotnet framework 4.5 just basically the",
    "start": "1326430",
    "end": "1332860"
  },
  {
    "text": "next larger version after the 4.0 where the task came in you will see the pattern that we introduced pieces and",
    "start": "1332860",
    "end": "1339460"
  },
  {
    "text": "then the next release finally starts building on them in a meaningful way which is kind of cool and we're going to",
    "start": "1339460",
    "end": "1346900"
  },
  {
    "text": "look at some kind of example of asynchronous call so imagine that you have methods like get data by the way",
    "start": "1346900",
    "end": "1352090"
  },
  {
    "text": "the async is you if you did a sink in that you probably know that async suffix is typically say like hey I'm a",
    "start": "1352090",
    "end": "1358090"
  },
  {
    "text": "task-based kind of like you know you know convention basically for the",
    "start": "1358090",
    "end": "1364120"
  },
  {
    "text": "methods so imagine that you have get data put data let's say does something across network or i/o or something like",
    "start": "1364120",
    "end": "1369340"
  },
  {
    "text": "that you just like throwing people offering data here and they're not people I believe that you know now how",
    "start": "1369340",
    "end": "1377140"
  },
  {
    "text": "would it look like we would first call the get toss a get data async then you would hook up a",
    "start": "1377140",
    "end": "1382780"
  },
  {
    "text": "continuation on that and say like you know hey when you call me back which means when the thing is done I want to",
    "start": "1382780",
    "end": "1388900"
  },
  {
    "text": "put that into some you know a sink into you know put the data on the other stream on the other side and that's just",
    "start": "1388900",
    "end": "1397270"
  },
  {
    "text": "for the fun printout we're done after we're done you know something like that obviously you don't want to write code",
    "start": "1397270",
    "end": "1402370"
  },
  {
    "text": "like this so how would this code which is exactly the same look like with the",
    "start": "1402370",
    "end": "1407950"
  },
  {
    "text": "you know async await you would start the same you know get that I think you get",
    "start": "1407950",
    "end": "1413770"
  },
  {
    "text": "tasks of T and if we would just evade the T away the task you would get a",
    "start": "1413770",
    "end": "1418960"
  },
  {
    "text": "result which is the a dot result basically in the code above you would",
    "start": "1418960",
    "end": "1424030"
  },
  {
    "text": "put you would take the result and do something with them like you know on the other side put data I think you will get",
    "start": "1424030",
    "end": "1430000"
  },
  {
    "text": "another task and what we do on that you would await it that think returns white if you notice the put because it doesn't",
    "start": "1430000",
    "end": "1435910"
  },
  {
    "text": "have an information just like information like a I'm done and after you're done you can go and write line",
    "start": "1435910",
    "end": "1441100"
  },
  {
    "text": "you're I'm done fairly simple and next if you look at that you know the code",
    "start": "1441100",
    "end": "1446380"
  },
  {
    "text": "above is roughly what the compiler generates for you you know the c-sharp compiler now it's a",
    "start": "1446380",
    "end": "1453190"
  },
  {
    "text": "little hand waving because it's a little bit more complicated from the perspective that compiler doesn't know",
    "start": "1453190",
    "end": "1459670"
  },
  {
    "text": "specifically about tasks even that has small strings I'm gonna get to that but it looks for so-called evader pattern so",
    "start": "1459670",
    "end": "1467820"
  },
  {
    "text": "and task is one of the things that is a waiter which was actually very smart at we kind of it's kind of basically a duck",
    "start": "1467820",
    "end": "1474370"
  },
  {
    "text": "typing you know if anything looks like task it can treat it this way we're",
    "start": "1474370",
    "end": "1480160"
  },
  {
    "text": "going to get to what what does it mean the Vator pattern in there and it actually enabled us us as you will see",
    "start": "1480160",
    "end": "1485320"
  },
  {
    "text": "later on to ship similar things which can deliver even more things that we couldn't imagine at the time we ship",
    "start": "1485320",
    "end": "1491470"
  },
  {
    "text": "this thing so we made it you know generalized enough instead of shipping interfaces and stuff that kind of you",
    "start": "1491470",
    "end": "1498400"
  },
  {
    "text": "know bound you into certain things how you have to behave and thanks to the elevator pattern actually it improve us",
    "start": "1498400",
    "end": "1504490"
  },
  {
    "text": "to you know innovate later on even more so let's look at the aviator pattern how",
    "start": "1504490",
    "end": "1509710"
  },
  {
    "text": "would this think that we've seen in the code before look like so if you have eight tea and you get a result out of it it's actually translated by compiler",
    "start": "1509710",
    "end": "1516910"
  },
  {
    "text": "into something like this you get T dot get away tur which doesn't you know you don't know",
    "start": "1516910",
    "end": "1522070"
  },
  {
    "text": "what the tech you know even compile doesn't know what it is the only thing that it kind of needs it's kind of few methods in there one of them is",
    "start": "1522070",
    "end": "1528460"
  },
  {
    "text": "completed and that thing has to return bull or a bull and if it's not",
    "start": "1528460",
    "end": "1534070"
  },
  {
    "text": "complicated you do something we're going to get to that later and if it is complicated then you call the get result",
    "start": "1534070",
    "end": "1539980"
  },
  {
    "text": "the methods involved are exactly those things that compiler looks for in the",
    "start": "1539980",
    "end": "1545560"
  },
  {
    "text": "tasks like or innovator pattern and not is completed thing is a little bit more",
    "start": "1545560",
    "end": "1551920"
  },
  {
    "text": "complicated we're gonna get to that a little bit later it's shown next slide and basically what it has to do is",
    "start": "1551920",
    "end": "1558460"
  },
  {
    "text": "someone has to it has to hook up some code that you know it because if it's",
    "start": "1558460",
    "end": "1563950"
  },
  {
    "text": "not completed means that it's running asynchronously you don't want to block on that place the whole point of the async is that you don't block parts but",
    "start": "1563950",
    "end": "1570280"
  },
  {
    "text": "you need to somehow hook it up and make sure that next time the vendor thing is completed you're gonna go and resume the",
    "start": "1570280",
    "end": "1575920"
  },
  {
    "text": "egg in this method after the after this and then I'm not gonna going this talk about",
    "start": "1575920",
    "end": "1581320"
  },
  {
    "text": "details but you can totally imagine that you're awaiting multiple things in a method right you know we have large my taught you have a days away that with",
    "start": "1581320",
    "end": "1587830"
  },
  {
    "text": "that and like so all that thing can be multiple you know multiple things and your method so the complicated thing",
    "start": "1587830",
    "end": "1595270"
  },
  {
    "text": "inside and just you know make sure that we're gonna go and dig into that so this is the same code or piece of it and as",
    "start": "1595270",
    "end": "1600970"
  },
  {
    "text": "the knot is completed and then they get result and we gonna kind of return so",
    "start": "1600970",
    "end": "1606000"
  },
  {
    "text": "you know let's look into deeper into that so first of all all this is part of the method which is called to move next",
    "start": "1606000",
    "end": "1612480"
  },
  {
    "text": "and the movement makes the method is basically it's a state machine so you",
    "start": "1612480",
    "end": "1618400"
  },
  {
    "text": "have state and you when you can only get into the knot was completed you say like",
    "start": "1618400",
    "end": "1623620"
  },
  {
    "text": "you know hey I am in this state return and when you come back you will know that hey this is the state you have been",
    "start": "1623620",
    "end": "1629200"
  },
  {
    "text": "in let me I know where to continue next so the state machine has some states for example state zero and this is one of",
    "start": "1629200",
    "end": "1635830"
  },
  {
    "text": "the probably only or few valid uses of go-to otherwise don't use it please but",
    "start": "1635830",
    "end": "1641260"
  },
  {
    "text": "you know in the state 0 we go to label 0 lead 1 what do you do and it's complete",
    "start": "1641260",
    "end": "1646809"
  },
  {
    "text": "it it's some you know it's somewhere in the middle so let's say it's you know state 42 because it's a good number right as we all know when you know you",
    "start": "1646809",
    "end": "1654909"
  },
  {
    "text": "set it and then you call another thing on the Vator pattern that's the uncompleted you basically tell the waiter like you know which is the task",
    "start": "1654909",
    "end": "1661480"
  },
  {
    "text": "like thingy like hey when you're done please call the move next and in between or in the meantime you saved in your in",
    "start": "1661480",
    "end": "1668980"
  },
  {
    "text": "your state in the in your state where you should resume and not surprisingly",
    "start": "1668980",
    "end": "1674440"
  },
  {
    "text": "at the beginning you're gonna check like hey if i'm the state 42 next time you call me i need to resume where i was",
    "start": "1674440",
    "end": "1679900"
  },
  {
    "text": "before so right after the note is completed so that's how it's done now the uncompleted is a little bit more",
    "start": "1679900",
    "end": "1688000"
  },
  {
    "text": "you know complicated signature and i'm gonna go into those details and let's",
    "start": "1688000",
    "end": "1693400"
  },
  {
    "text": "look a little bit deeper into how does the state machine actually look like so imagine that you have a code like this",
    "start": "1693400",
    "end": "1699490"
  },
  {
    "text": "you read something from a user you know x you then you know independently evade",
    "start": "1699490",
    "end": "1707570"
  },
  {
    "text": "thing from network or whatever you know some pacing and then you want to write line something like hey I'm done and buy",
    "start": "1707570",
    "end": "1713390"
  },
  {
    "text": "divide X was something important as you can see you know or as we as we talk",
    "start": "1713390",
    "end": "1719030"
  },
  {
    "text": "about the a twill basically I'll interrupt you know just going to move next and there's gonna be kind of interrupted call and when we come back",
    "start": "1719030",
    "end": "1725500"
  },
  {
    "text": "you know the question is like you know how does the X actually survive debate right you know because it's different",
    "start": "1725500",
    "end": "1732770"
  },
  {
    "text": "calls so there's gonna be state machine created by the compiler on your behalf",
    "start": "1732770",
    "end": "1738200"
  },
  {
    "text": "let's say this is method foo so there's gonna be matter to state machine it's gonna have to move next something that",
    "start": "1738200",
    "end": "1743870"
  },
  {
    "text": "we have seen before it's gonna have the locals so the X from this code will be one of the locals",
    "start": "1743870",
    "end": "1749690"
  },
  {
    "text": "that's gonna be captured in that state machine it's gonna have parameters of the method because they need to survive",
    "start": "1749690",
    "end": "1755560"
  },
  {
    "text": "usually and it's gonna have the you know evader and as well state a Vater is",
    "start": "1755560",
    "end": "1761990"
  },
  {
    "text": "basically you know generated you know dynamically based on whatever it return so it can be different type all the time",
    "start": "1761990",
    "end": "1768890"
  },
  {
    "text": "now the this trick is similar to you know if you've seen lambdas and how they",
    "start": "1768890",
    "end": "1774380"
  },
  {
    "text": "kind of do the closure and capture all your locals this is the machine is basically the same thing it's not rocket",
    "start": "1774380",
    "end": "1779390"
  },
  {
    "text": "science now interestingly and like not surprisingly compiler obviously",
    "start": "1779390",
    "end": "1785230"
  },
  {
    "text": "optimizes optimizes things so if the X would not would not kind of cross the",
    "start": "1785230",
    "end": "1791030"
  },
  {
    "text": "evade boundaries it would not be put inside a state machine because there's no point why would you store locals which you will",
    "start": "1791030",
    "end": "1797060"
  },
  {
    "text": "not need later so you know it's trying to be nice to you to everyone and another thing you probably notice",
    "start": "1797060",
    "end": "1802670"
  },
  {
    "text": "that it's struct its struct from perf reasons but if you have structs it kind of sucks in debug because finding them",
    "start": "1802670",
    "end": "1809330"
  },
  {
    "text": "and you know you know on the heap and whatnot is extremely difficult you cannot enumerate like what's in",
    "start": "1809330",
    "end": "1815150"
  },
  {
    "text": "flight if you have a dump and that stuff so actually in debug mode which is interesting this is a class which",
    "start": "1815150",
    "end": "1822140"
  },
  {
    "text": "obviously allocates I'm gonna get to performance and that stuff and the reason why it is struct now imagine that",
    "start": "1822140",
    "end": "1829420"
  },
  {
    "text": "you have something like buffered stream so you read a buffer 10k and then you",
    "start": "1829420",
    "end": "1835280"
  },
  {
    "text": "know that you know and the user or whoever calls you you're just gonna return pieces and let's say the user is like",
    "start": "1835280",
    "end": "1840940"
  },
  {
    "text": "calling and reading always one bite for example and you're at the 10k right so",
    "start": "1840940",
    "end": "1846519"
  },
  {
    "text": "then each call if it would be you know you know we're gonna see that later if it would be actually you know class you",
    "start": "1846519",
    "end": "1854289"
  },
  {
    "text": "would allocate state machine per each page of this calls of the read now if",
    "start": "1854289",
    "end": "1860289"
  },
  {
    "text": "it's struct and if it completes synchronously because it's buffered because you read the 10k you have it in memory just can immediately return with",
    "start": "1860289",
    "end": "1867070"
  },
  {
    "text": "this struct you can avoid actually these allocations because everything is on the stack so that's the one kind of key",
    "start": "1867070",
    "end": "1872229"
  },
  {
    "text": "motivation for the performance why it's a struct but in the in debug its class for debug ability already let's move on",
    "start": "1872229",
    "end": "1881349"
  },
  {
    "text": "and let's actually look at example of such state machine so over here you know method foo takes time out and inside we",
    "start": "1881349",
    "end": "1889779"
  },
  {
    "text": "just cause something task delay timeout and a weight on it so classic you know wait wait for so many seconds very",
    "start": "1889779",
    "end": "1896769"
  },
  {
    "text": "simple thing how would the state machine look like so it would have the parameter",
    "start": "1896769",
    "end": "1902470"
  },
  {
    "text": "timeout we talked about that it would have locus if there were any crossing the boundaries there are none so just a",
    "start": "1902470",
    "end": "1909639"
  },
  {
    "text": "comment it will have the move next method as we said it will have the state and later information which is actually",
    "start": "1909639",
    "end": "1916509"
  },
  {
    "text": "tasks evader and the compiler generates on top of that instead of the you know",
    "start": "1916509",
    "end": "1921999"
  },
  {
    "text": "async foo it generates a real public foo which is not async and inside what you",
    "start": "1921999",
    "end": "1930580"
  },
  {
    "text": "do first thing you go and allocate the state machine it's a struct so boom default beautiful",
    "start": "1930580",
    "end": "1936809"
  },
  {
    "text": "you will you got the timeout so you store it in the state machine you initialize the state and you move next",
    "start": "1936809",
    "end": "1943929"
  },
  {
    "text": "because the all the logic is actually inside the move next method and then you return something we're gonna get you",
    "start": "1943929",
    "end": "1951369"
  },
  {
    "text": "know it needs to be a task we know that it's a bit more complicated we're gonna you know expand on that in the next",
    "start": "1951369",
    "end": "1956769"
  },
  {
    "text": "slide so how would this work we're gonna keep the foo method and and the state",
    "start": "1956769",
    "end": "1963909"
  },
  {
    "text": "machine and as you have seen the formatter is now a little bit larger missing the bottom curly braces sorry",
    "start": "1963909",
    "end": "1969999"
  },
  {
    "text": "for that but it's basically you know same thing that we saw and on on the slide before not much changed so",
    "start": "1969999",
    "end": "1976490"
  },
  {
    "text": "what we will have here actually yeah I messed up the slide that it doesn't show in the right order sorry for that but",
    "start": "1976490",
    "end": "1983150"
  },
  {
    "text": "the timeout state and move next was from the previous slide and the thing actually we need to do this is in the",
    "start": "1983150",
    "end": "1988820"
  },
  {
    "text": "wrong order oh my goodness sorry so on the state machine we would",
    "start": "1988820",
    "end": "1994400"
  },
  {
    "text": "have the task completion source on top of that so that's the last field I edit and actually it's something that we move",
    "start": "1994400",
    "end": "2001780"
  },
  {
    "text": "in the move next we would set result on if you remember again like you know to",
    "start": "2001780",
    "end": "2007060"
  },
  {
    "text": "return the task the task completion source is the thing that kind of generates and completes the task right and even though that this is a field",
    "start": "2007060",
    "end": "2015610"
  },
  {
    "text": "over here it's logically there it's actually more complicated I'm gonna get to that a little bit later and in the",
    "start": "2015610",
    "end": "2021040"
  },
  {
    "text": "full machine the first thing that's new is that we allocate the task completion source in there and then we're going to",
    "start": "2021040",
    "end": "2028180"
  },
  {
    "text": "return the task which is inside the task completion source you know fairly fairly straightforward now there are two",
    "start": "2028180",
    "end": "2035200"
  },
  {
    "text": "problems here problem number one performance there are two allocations in",
    "start": "2035200",
    "end": "2040390"
  },
  {
    "text": "this code one is the task completion source and the second is actually the",
    "start": "2040390",
    "end": "2046030"
  },
  {
    "text": "task inside the task completion source so pair each call you're gonna do two allocations which you know imagine again",
    "start": "2046030",
    "end": "2052600"
  },
  {
    "text": "the buffered stream you know when you have the 10k and you call it one bite each like you allocate pair each call to two objects kind of sucks the other",
    "start": "2052600",
    "end": "2062230"
  },
  {
    "text": "problematic thing is that as I said a compiler tries to not know anything about tasks it's a white lie a little",
    "start": "2062230",
    "end": "2068320"
  },
  {
    "text": "bit but almost anything so it has the Vator pattern and the same way you know",
    "start": "2068320",
    "end": "2074200"
  },
  {
    "text": "it tries to not understand that there's a task completion source because that's tied to really specifically two tasks so",
    "start": "2074200",
    "end": "2081040"
  },
  {
    "text": "instead of this you know task completion sources what we have is you know builder pattern so instead of the MU of task",
    "start": "2081040",
    "end": "2088389"
  },
  {
    "text": "completion source you're gonna find the right builder just some magic I'm gonna describe and then call create on that",
    "start": "2088390",
    "end": "2094659"
  },
  {
    "text": "the huge advantage of that that think because you're just looking for create method and whatnot of the write builder",
    "start": "2094660",
    "end": "2099910"
  },
  {
    "text": "can return a structure which means again if you complete synchronously you don't have to allocate so with that you're",
    "start": "2099910",
    "end": "2106120"
  },
  {
    "text": "going to get rid of the allocation of the completion source which is awesome and obviously like if you have the Builder",
    "start": "2106120",
    "end": "2111880"
  },
  {
    "text": "like that instead of storing the TCS you're going to store the Builder and the Builder inside has like another you",
    "start": "2111880",
    "end": "2118270"
  },
  {
    "text": "know the the pattern is tasks and that's something that you would return in the code above so a little bit generalized",
    "start": "2118270",
    "end": "2123400"
  },
  {
    "text": "but you know not a super huge thing we actually we actually have this exactly",
    "start": "2123400",
    "end": "2132490"
  },
  {
    "text": "thing for the value task that's the specific metal builder I put there in there and how does she sharp compiler",
    "start": "2132490",
    "end": "2138160"
  },
  {
    "text": "finds for your thing what's your write builder it actually looks for I think everywhere",
    "start": "2138160",
    "end": "2143740"
  },
  {
    "text": "for a for an attribute on types which",
    "start": "2143740",
    "end": "2148870"
  },
  {
    "text": "basically tell the compiled I am builder for that thingy over there so it it know",
    "start": "2148870",
    "end": "2154750"
  },
  {
    "text": "it can stitch just through kind of attributes all these things without knowing anything about tasks and task",
    "start": "2154750",
    "end": "2160000"
  },
  {
    "text": "completion source all its kind of tasks like which is kind of cool just FYI",
    "start": "2160000",
    "end": "2165990"
  },
  {
    "text": "internally we have actually you know structs for the async task method",
    "start": "2165990",
    "end": "2171580"
  },
  {
    "text": "builder which is for the tasks we really have that method method builder we have the async task metal builder of T for",
    "start": "2171580",
    "end": "2178420"
  },
  {
    "text": "the you know generic case and as well for the async white metal builder and",
    "start": "2178420",
    "end": "2184290"
  },
  {
    "text": "that's probably as much as I can say on this slide so we with this builder we",
    "start": "2184290",
    "end": "2192070"
  },
  {
    "text": "enable the option especially for various tasks too you know eliminate one allocation in there per call which is",
    "start": "2192070",
    "end": "2199450"
  },
  {
    "text": "cool still there's this task in there so what do we do about that one thing that",
    "start": "2199450",
    "end": "2205720"
  },
  {
    "text": "actually you can do first of all the builder you know the you know for example for the value tasks can reuse",
    "start": "2205720",
    "end": "2212140"
  },
  {
    "text": "known tasks in this case that's what we kind of enable for example there can be",
    "start": "2212140",
    "end": "2217900"
  },
  {
    "text": "tasks your complete and there is cosgood completed tasks which just represents that hey be undone I don't return",
    "start": "2217900",
    "end": "2223540"
  },
  {
    "text": "anything void but you know I'm done why would you create instance of that per each you know per each goal as soon",
    "start": "2223540",
    "end": "2230320"
  },
  {
    "text": "as you have that case you can always return this thing and you can reuse that",
    "start": "2230320",
    "end": "2235470"
  },
  {
    "text": "we have actually for butene there are only two options there's like can have value true or false you know",
    "start": "2235470",
    "end": "2241300"
  },
  {
    "text": "bus bus that can have like any value in there which is good so that enables us",
    "start": "2241300",
    "end": "2246370"
  },
  {
    "text": "to to actually optimize for you know having two values and based on that we",
    "start": "2246370",
    "end": "2251440"
  },
  {
    "text": "return we return to predefined values we have four integers like there's lots of",
    "start": "2251440",
    "end": "2257170"
  },
  {
    "text": "numbers but from unknown reasons to me we have specific values for -1 and 8",
    "start": "2257170",
    "end": "2263800"
  },
  {
    "text": "inclusive you know probably we did some research somewhere that it's kind of useful 0 to 8 is probably like the",
    "start": "2263800",
    "end": "2271750"
  },
  {
    "text": "typical size that returns in something and minus 1 like error I don't know anyway we have those things buffered and",
    "start": "2271750",
    "end": "2278380"
  },
  {
    "text": "another thing actually we you can you know the Builder can as well cash the",
    "start": "2278380",
    "end": "2283900"
  },
  {
    "text": "last completed one which imagine that it's a memory stream that you read chunks of memory you're somebody who",
    "start": "2283900",
    "end": "2289030"
  },
  {
    "text": "reads 4k or somebody else reach 8k but they usually do the loop so each call",
    "start": "2289030",
    "end": "2294250"
  },
  {
    "text": "typically except the last one when you you know read the rest or whatever is remaining is the same so you can reuse",
    "start": "2294250",
    "end": "2299380"
  },
  {
    "text": "that reuse that thing so that's cool unfortunately does not work for example",
    "start": "2299380",
    "end": "2305410"
  },
  {
    "text": "for SSL stream SSO stream is this thing I'm gonna do SSL because you know or HTTP you have the headers which you kind",
    "start": "2305410",
    "end": "2311950"
  },
  {
    "text": "of do a you kind of sorry you you will",
    "start": "2311950",
    "end": "2318430"
  },
  {
    "text": "kind of encode encrypt and then the body and they are usually different sizes so",
    "start": "2318430",
    "end": "2323970"
  },
  {
    "text": "for something are abhi would have to invent that you have lost two to last completed things and alternate between them because again typically they will",
    "start": "2323970",
    "end": "2330790"
  },
  {
    "text": "be probably you know similar or same size and you know that's how you avoid you know they will not be the numbers",
    "start": "2330790",
    "end": "2336280"
  },
  {
    "text": "between minus 1 and 8 but something larger another thing actually that you know prepare for improvements that we can",
    "start": "2336280",
    "end": "2342310"
  },
  {
    "text": "look at is that you know the size of this thing is actually 64 bytes or 72 bytes based on if you have value or not",
    "start": "2342310",
    "end": "2348100"
  },
  {
    "text": "if it's bit white and you know that is kind of okay in Azure more clothes or in",
    "start": "2348100",
    "end": "2354460"
  },
  {
    "text": "the cloud like you know GC will collect the bytes and whatnot but you know if you're on a hot path and there are cases",
    "start": "2354460",
    "end": "2360520"
  },
  {
    "text": "like that it kind of kind of imprint no hurt your performance up to five to ten",
    "start": "2360520",
    "end": "2365830"
  },
  {
    "text": "percent because by inducing more GCS right I know it's kind of overall if you kind of hammer that I'm at its if it's a",
    "start": "2365830",
    "end": "2372610"
  },
  {
    "text": "whole path that really shows up a lot for example no sockets you know when you do networking and that stuff that's actually when it matters so we went and",
    "start": "2372610",
    "end": "2380230"
  },
  {
    "text": "invented something called value task which I already hinted it was dope net core 2.0 it's available as well for",
    "start": "2380230",
    "end": "2387220"
  },
  {
    "text": "downlevel which means not net framework and like.net core previous versions even though none of them are supported",
    "start": "2387220",
    "end": "2392619"
  },
  {
    "text": "anymore and it's fairly simple it has basically two values it has either",
    "start": "2392619",
    "end": "2399460"
  },
  {
    "text": "holstee or it holds tasks of T and all the methods are basically one-liners it",
    "start": "2399460",
    "end": "2406210"
  },
  {
    "text": "was so before jumping to that you know it can logically hold only one thing you",
    "start": "2406210",
    "end": "2411759"
  },
  {
    "text": "know only one of those things is normal or you know valid either the T and then the task is to be now or the T is",
    "start": "2411759",
    "end": "2418269"
  },
  {
    "text": "default and then the task of T is the real value and based on that chicken just you know on the task of teaching for now you can do basically one-liner",
    "start": "2418269",
    "end": "2425759"
  },
  {
    "text": "things what to do you know which one it is you know you can quickly decide so implementations fairly fairly simple and",
    "start": "2425759",
    "end": "2433529"
  },
  {
    "text": "all this evader thing is and that stuff that actually you know that's what",
    "start": "2433529",
    "end": "2439779"
  },
  {
    "text": "allowed us to create the value tasks because it's tasks like it behaves like that but because we were smart in the",
    "start": "2439779",
    "end": "2446049"
  },
  {
    "text": "compiler number thing you know we didn't kind of require like it has to be tasks and everything we had the option to actually create value tasks which is a",
    "start": "2446049",
    "end": "2451960"
  },
  {
    "text": "struct which means it you know we will avoid actually allocation you know if",
    "start": "2451960",
    "end": "2457420"
  },
  {
    "text": "it's the synchronous case obviously now if you think about that that's awesome",
    "start": "2457420",
    "end": "2464200"
  },
  {
    "text": "we have value tasks but we already had by the time lots of functions that return tasks so what do you do we cannot",
    "start": "2464200",
    "end": "2470619"
  },
  {
    "text": "overload on return parameter return type right luckily in the.net core 2.1 we",
    "start": "2470619",
    "end": "2477190"
  },
  {
    "text": "introduced the span and memory of T so that allows us and we had to add a bunch",
    "start": "2477190",
    "end": "2482650"
  },
  {
    "text": "of overloads in you know NB C L so what we could do is actually when we edit the",
    "start": "2482650",
    "end": "2487749"
  },
  {
    "text": "you know memory of byte overload for example on some stream or something we'd say like you know what don't return the",
    "start": "2487749",
    "end": "2493450"
  },
  {
    "text": "task return to the value task it's gonna be a little bit faster and as that you know nice interesting thing that",
    "start": "2493450",
    "end": "2499089"
  },
  {
    "text": "sometimes you CPRS incur effects when people pass around you know byte array",
    "start": "2499089",
    "end": "2504400"
  },
  {
    "text": "and the PR is basic like you know to byte array in memory stream like why",
    "start": "2504400",
    "end": "2509410"
  },
  {
    "text": "well because it's gonna get cold this overload and it's gonna use the value task are you gonna allocate less I was",
    "start": "2509410",
    "end": "2515140"
  },
  {
    "text": "like wow okay Thank You Steven for you know doing that",
    "start": "2515140",
    "end": "2520680"
  },
  {
    "text": "overall I just want to caution people like value task is awesome but there's a you know basically the design guidelines",
    "start": "2520680",
    "end": "2527769"
  },
  {
    "text": "is that always used with with tasks start with tasks sorry don't use the value task it's really",
    "start": "2527769",
    "end": "2533769"
  },
  {
    "text": "advanced it's you know it's the value task is really for the hot paths only nothing else and and I'm gonna show you",
    "start": "2533769",
    "end": "2541779"
  },
  {
    "text": "a little bit more why so in you know we basically came into value tasks like can",
    "start": "2541779",
    "end": "2548109"
  },
  {
    "text": "we improve it even more and in future in the next versions actually what we discovered that you know there's this",
    "start": "2548109",
    "end": "2553599"
  },
  {
    "text": "kind of one person pacing hands case so most of the time you complete synchronously and as you have seen like",
    "start": "2553599",
    "end": "2559059"
  },
  {
    "text": "everything is like on struct so you don't allocate life is beautiful and but when you have to switch to this to this",
    "start": "2559059",
    "end": "2564849"
  },
  {
    "text": "synchronous so to realize in her case we have to allocate that didn't stop us and",
    "start": "2564849",
    "end": "2571119"
  },
  {
    "text": "in.net core 2.1 we actually introduced one more option the a value task source",
    "start": "2571119",
    "end": "2576420"
  },
  {
    "text": "which is kind of another option on the you know if you saw the tea and tasks of",
    "start": "2576420",
    "end": "2581710"
  },
  {
    "text": "tea and one thing I should have forgot to mention we don't have the struct of value task before before this thingy",
    "start": "2581710",
    "end": "2587769"
  },
  {
    "text": "because if it's that's for the void case you cannot have you know of white you know in generics we would be void it",
    "start": "2587769",
    "end": "2594609"
  },
  {
    "text": "would be task or void so it's only task but in the presence of by value task source you know you have that now I'm",
    "start": "2594609",
    "end": "2602079"
  },
  {
    "text": "not going to go into details but it's basically again a waiter pattern almost like that it can answer the questions",
    "start": "2602079",
    "end": "2607990"
  },
  {
    "text": "like are you completed hook me up to a callback get the result and that stuff and you know inside all that kind of all",
    "start": "2607990",
    "end": "2615069"
  },
  {
    "text": "the methods on the value task now become ternary because only one of these values can be known now or you know meaningful so we have like instead of if task task",
    "start": "2615069",
    "end": "2622809"
  },
  {
    "text": "of T is not now then do this otherwise do that you have like one more if check in there and like ternary operations and",
    "start": "2622809",
    "end": "2630960"
  },
  {
    "text": "what the beautiful of this thing is that actually it can it can reuse the task catch them and reset them this is",
    "start": "2630960",
    "end": "2637630"
  },
  {
    "text": "something that we couldn't do because we didn't know who holds up on so this thing is actually enabled us",
    "start": "2637630",
    "end": "2642700"
  },
  {
    "text": "even do more you know more using that you allocate something you keep it around as soon as it's done you can go",
    "start": "2642700",
    "end": "2649589"
  },
  {
    "text": "reset that thing and use it for another call later on which is actually used",
    "start": "2649589",
    "end": "2654759"
  },
  {
    "text": "heavily for example or heavily in sockets when you have sent a sync or receive a sync typically or not",
    "start": "2654759",
    "end": "2660789"
  },
  {
    "text": "typically but you know you have one object pend percent and one object per receive because you know you cannot do",
    "start": "2660789",
    "end": "2666579"
  },
  {
    "text": "two cents at the same time on the same socket so what you can do you have had you actually have the guarantee that as",
    "start": "2666579",
    "end": "2672220"
  },
  {
    "text": "soon as I'm done somebody kind of you know completes that I can take that object and use it for the next call on",
    "start": "2672220",
    "end": "2677769"
  },
  {
    "text": "the same on the same socket which is kind of pretty neat and you get to zero allocations for sockets kind of as the",
    "start": "2677769",
    "end": "2685029"
  },
  {
    "text": "overhead like it's it's pretty cool but it's exactly why you know we don't want people to do that or because it's you",
    "start": "2685029",
    "end": "2691269"
  },
  {
    "text": "have to be cautious you need to know how you're calling that you have to take care of stuff it's kind of like bringing yourself almost to the C++ land when you",
    "start": "2691269",
    "end": "2697779"
  },
  {
    "text": "have to take care of memory you know lifetime not don't screw up on that stuff so it's easy to kind of mess up in",
    "start": "2697779",
    "end": "2702849"
  },
  {
    "text": "this thing and that's why we don't recommend anyone to use it but it's kind of cool thing that on the hot path inside the BCL there it's most needed",
    "start": "2702849",
    "end": "2709359"
  },
  {
    "text": "it's used and there's like a couple of you know high profile like you know high performance libraries maybe five or ten",
    "start": "2709359",
    "end": "2716200"
  },
  {
    "text": "in the world that actually you do use this because they get the value and it's worth for them to kind of do into the",
    "start": "2716200",
    "end": "2722559"
  },
  {
    "text": "complications you know that are associated with it now it's as well used",
    "start": "2722559",
    "end": "2729099"
  },
  {
    "text": "on network stream pipelines and channels if you follow up latest thing and that's",
    "start": "2729099",
    "end": "2734529"
  },
  {
    "text": "not going to leave it off and do a quick summary would we have learned hopefully today and hopefully you find it useful",
    "start": "2734529",
    "end": "2740079"
  },
  {
    "text": "so we started with the AP and pattern Places programming model from the ancient times which was the icing result",
    "start": "2740079",
    "end": "2747249"
  },
  {
    "text": "begin foo begin end and the Troublesome was actually it was limited nesting and looping that was extremely complicated",
    "start": "2747249",
    "end": "2752769"
  },
  {
    "text": "especially in the synchronous way when you wanted to optimize things then it was there like short period of the EAP",
    "start": "2752769",
    "end": "2758789"
  },
  {
    "text": "event based thing which was same problems as the APM so didn't help relate much the next thing that was",
    "start": "2758789",
    "end": "2765279"
  },
  {
    "text": "introduced was tasks with the mate when you block and continue it so anyone can hook up to tasks and there's the",
    "start": "2765279",
    "end": "2772150"
  },
  {
    "text": "component of the task which is not that much known is the task completion source which is this thing that can manipulate with the task itself",
    "start": "2772150",
    "end": "2778180"
  },
  {
    "text": "we are internal methods then async/await came along key takeaways is that actually it's a beta pattern so it's",
    "start": "2778180",
    "end": "2784480"
  },
  {
    "text": "actually flexible it's not based on tasks but its tasks like there are state",
    "start": "2784480",
    "end": "2789579"
  },
  {
    "text": "machines involved so behind the scenes things are everything for you and in.net course you know 2.0 quite",
    "start": "2789579",
    "end": "2795790"
  },
  {
    "text": "recently we introduced value tasks we actually built on top of the abstraction innovator pattern everywhere that you",
    "start": "2795790",
    "end": "2803380"
  },
  {
    "text": "know it's cool hyper you know hyper optimizations are possible but you have to be extracted",
    "start": "2803380",
    "end": "2808690"
  },
  {
    "text": "for so please don't use it it's dangerous unless you're one of the ten people in the world that's you know really have the business need and really",
    "start": "2808690",
    "end": "2814839"
  },
  {
    "text": "want to go for the pain that's all thank you very much hopefully you enjoyed that [Applause]",
    "start": "2814839",
    "end": "2824710"
  }
]