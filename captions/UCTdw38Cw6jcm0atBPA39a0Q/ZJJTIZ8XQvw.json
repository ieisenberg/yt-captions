[
  {
    "text": "welcome to dawn of a new era glad that the conference organizers noticed the",
    "start": "4750",
    "end": "11480"
  },
  {
    "text": "title actually put me on first thing in the morning I've done this talk a few times now and I think only twice if",
    "start": "11480",
    "end": "17750"
  },
  {
    "text": "they've done that so I'm gonna start my animation this might be the longest",
    "start": "17750",
    "end": "23810"
  },
  {
    "text": "slide animation you've seen around so followed in my introduction so I'm Phil Nash",
    "start": "23810",
    "end": "29570"
  },
  {
    "text": "some of you may know me from various places actually but at the moment I work",
    "start": "29570",
    "end": "34820"
  },
  {
    "text": "at Jeb brain says developer advocate so if you wanna ask me about sea lion",
    "start": "34820",
    "end": "40129"
  },
  {
    "text": "resharper C++ app code or anything JetBrains related do come and see me",
    "start": "40129",
    "end": "45440"
  },
  {
    "text": "afterwards normally we will have a booth at these sort of conferences really a sponsor we're not here which is ittle",
    "start": "45440",
    "end": "51769"
  },
  {
    "text": "bit unusual for us that might change next year but they feel free to track me down and we could talk about anything",
    "start": "51769",
    "end": "58220"
  },
  {
    "text": "you like if you want to know how cool jetbrains is to work for by the way last",
    "start": "58220",
    "end": "63769"
  },
  {
    "text": "December we had a Christmas party out in the Austrian Alps and we were able to",
    "start": "63769",
    "end": "69649"
  },
  {
    "text": "say our whole family's out there that we do this every year and this is the view for the hotel room so of what it's quite",
    "start": "69649",
    "end": "75200"
  },
  {
    "text": "nice that's put on the title slide so it's given everyone a chance to to come",
    "start": "75200",
    "end": "81799"
  },
  {
    "text": "in now hopefully fairly obvious that this talk is about error handling the",
    "start": "81799",
    "end": "88850"
  },
  {
    "text": "future of error handling we're gonna do a little bit of history as well there I've done another talk on error handling",
    "start": "88850",
    "end": "94520"
  },
  {
    "text": "I know some people were wondering if this is going to be the same material or not this is actually the sequel or the",
    "start": "94520",
    "end": "100460"
  },
  {
    "text": "follow up to that talk and that's a little bit of a problem in how I'm",
    "start": "100460",
    "end": "105469"
  },
  {
    "text": "actually presenting the material because of course not everyone has seen the first talk and there's a lot of",
    "start": "105469",
    "end": "110539"
  },
  {
    "text": "background there but the whole talk is basically the background to this so if you haven't seen that talk that sort of",
    "start": "110539",
    "end": "117560"
  },
  {
    "text": "summarizes a lot of that material to begin with but if you need convincing about any of these points you really",
    "start": "117560",
    "end": "124639"
  },
  {
    "text": "need to go back and see that talk or reference it and there'll be a link at the end with load of references to two",
    "start": "124639",
    "end": "130369"
  },
  {
    "text": "other talks and things anyway so let's get started with a bit of history",
    "start": "130369",
    "end": "137240"
  },
  {
    "text": "there we go in fact I probably get to that all dear so far this is really what",
    "start": "137240",
    "end": "143420"
  },
  {
    "text": "we're going to be talking about this is a proposal batted it's only really just started to be discussed at the the",
    "start": "143420",
    "end": "148880"
  },
  {
    "text": "committee but lots of people have heard about it already so we can see the date' there then if you can see that but it's",
    "start": "148880",
    "end": "156140"
  },
  {
    "text": "just from June last year that's interesting because I did that previous talk just a week before that that's a",
    "start": "156140",
    "end": "164180"
  },
  {
    "text": "C++ now so zero overhead deterministic exceptions throwing values a lot to",
    "start": "164180",
    "end": "170090"
  },
  {
    "text": "unpacking that and we're going to talk a bit about this but also some of the supporting proposals there's quite a few",
    "start": "170090",
    "end": "175690"
  },
  {
    "text": "proposes we're going to talk about since all future C++ stuff but hopefully it's going to inform at the current state of",
    "start": "175690",
    "end": "182600"
  },
  {
    "text": "things as well as the idea so I mentioned I've done this ever talk before it's this one optional is not a",
    "start": "182600",
    "end": "188990"
  },
  {
    "text": "failure this is actually from from seat for meeting C++ but interestingly I did",
    "start": "188990",
    "end": "196580"
  },
  {
    "text": "another talk with the same title before that exists at dev connoisseur mobile",
    "start": "196580",
    "end": "201950"
  },
  {
    "text": "developers conference this is in the context of Swift and so my first ideas",
    "start": "201950",
    "end": "207230"
  },
  {
    "text": "around this were actually in in Swift because I have what I consider to be one of if not the best error handling",
    "start": "207230",
    "end": "214430"
  },
  {
    "text": "strategies of any language right now which is quite a big claim especially when you consider you know some of the",
    "start": "214430",
    "end": "219890"
  },
  {
    "text": "particularly academic languages out there I just think they really nailed this and got it right and it was when I",
    "start": "219890",
    "end": "226430"
  },
  {
    "text": "really fully appreciated that that I started thinking you know can we be going in that direction in C++ you know",
    "start": "226430",
    "end": "233540"
  },
  {
    "text": "there are some things that are starting to happen which we'll look at and that's thinking that's why we want to be",
    "start": "233540",
    "end": "239030"
  },
  {
    "text": "heading I want to start talking about this and getting the community interested in it hence the the other",
    "start": "239030",
    "end": "245150"
  },
  {
    "text": "talk and it was during that process before I actually gave the first version of the C++ version of this that I saw",
    "start": "245150",
    "end": "251780"
  },
  {
    "text": "that paper we disturb looked up from herb Sutter and others basically saying",
    "start": "251780",
    "end": "257120"
  },
  {
    "text": "the same thing so that was really reassuring that lots of us are thinking in that same direction so as a result",
    "start": "257120",
    "end": "264650"
  },
  {
    "text": "because that sort of came in quite late that previous tool sort of builds up and to write at the end I introduced that",
    "start": "264650",
    "end": "271110"
  },
  {
    "text": "puzzle and also mentioned there's some others as well and so I really wanted to follow on with this talk to dig much",
    "start": "271110",
    "end": "277650"
  },
  {
    "text": "more into the guts of the proposals and what they actually really mean so continuing the history a little bit",
    "start": "277650",
    "end": "284130"
  },
  {
    "text": "because I've been interested in will Turner error handling strategies for a while and one of the first ones I came",
    "start": "284130",
    "end": "290550"
  },
  {
    "text": "across was this exploding return types oh it's heard of exploding return types no one at all that's amazing so there's",
    "start": "290550",
    "end": "298830"
  },
  {
    "text": "really quite fun and I first heard about them probably here as far as I can remember thinking back from 2007 took by",
    "start": "298830",
    "end": "307380"
  },
  {
    "text": "Andre legs and Resco choose your poison and he introduced this type or template",
    "start": "307380",
    "end": "314070"
  },
  {
    "text": "likely T and this was a type that said",
    "start": "314070",
    "end": "320130"
  },
  {
    "text": "quite revolutionary at the time to me at least fairly commonplace idea now but this idea that it represents either a",
    "start": "320130",
    "end": "327030"
  },
  {
    "text": "value or something else in this case an arrow type and there's a few other",
    "start": "327030",
    "end": "332430"
  },
  {
    "text": "interesting things about it that haven't really stood the test of time but interesting bit this purpose is is this",
    "start": "332430",
    "end": "340380"
  },
  {
    "text": "bit here likely T's destructor frozen exception and even back then I raised a",
    "start": "340380",
    "end": "346320"
  },
  {
    "text": "few eyebrows but this was sort of the whole point of the type was that it",
    "start": "346320",
    "end": "351450"
  },
  {
    "text": "would represent something that may have an error in it and if you didn't check whoever it had an error or not then it",
    "start": "351450",
    "end": "358440"
  },
  {
    "text": "would blow up in the destructor and exploding return type so it sort of forced you to check your errors because",
    "start": "358440",
    "end": "363450"
  },
  {
    "text": "that was one thing we return based error handling that people have to get wrong this is of dis ignore the errors it",
    "start": "363450",
    "end": "369720"
  },
  {
    "text": "stops you from ignoring the errors so that's quite interesting but it wasn't the first time this idea was presented and I actually traced it back to complex",
    "start": "369720",
    "end": "377580"
  },
  {
    "text": "C++ moderated in around 2000 so this one from Ken Hagin out of intellectual",
    "start": "377580",
    "end": "384270"
  },
  {
    "text": "curiosity I wrote the following class and again there we go and the in the destructor it froze if",
    "start": "384270",
    "end": "392090"
  },
  {
    "text": "it's something hasn't been checked us or said our C and even this referenced",
    "start": "392090",
    "end": "398850"
  },
  {
    "text": "earlier work from Lisa Lippincott and James hands and in fact somewhere else in this Fred",
    "start": "398850",
    "end": "406440"
  },
  {
    "text": "James actually suggested that his version predated exceptions so it's actually quite an old idea lease are",
    "start": "406440",
    "end": "414750"
  },
  {
    "text": "actually weighed in to the to the Fred I really like this quote because it's a it sounds a bit odd now but let's not",
    "start": "414750",
    "end": "420990"
  },
  {
    "text": "repeat the mistakes of the past what are the copy construction and Simon on the current auto pointer are not the old",
    "start": "420990",
    "end": "428070"
  },
  {
    "text": "broken one so yeah I think it sounds a bit weird now but so Andre actually",
    "start": "428070",
    "end": "436110"
  },
  {
    "text": "continued his his ideas and in 2012 he had this talk systematic error handling in C++ and his",
    "start": "436110",
    "end": "446190"
  },
  {
    "text": "ideas had evolved a little bit and one of the main reasons for that was of course between 2007 and 2012 but finally",
    "start": "446190",
    "end": "453389"
  },
  {
    "text": "got C++ 11 and one of the things that had now was no except by default on",
    "start": "453389",
    "end": "461010"
  },
  {
    "text": "destructors which is a bit of a problem for the old exploding return types idea but also represented this you know",
    "start": "461010",
    "end": "467310"
  },
  {
    "text": "changing the tide of people say no no we shouldn't be framed from from destructors so had a bit of a bad taste",
    "start": "467310",
    "end": "473550"
  },
  {
    "text": "but there are still some really good ideas in this type so not very clear",
    "start": "473550",
    "end": "479160"
  },
  {
    "text": "because there's a photo of a slide within a slide that this is that the",
    "start": "479160",
    "end": "484169"
  },
  {
    "text": "core of this type that he was presenting now so it still had this idea of it either had a divider you wanted or a",
    "start": "484169",
    "end": "492060"
  },
  {
    "text": "narrow type what you we could actually access there's just no throwing in the",
    "start": "492060",
    "end": "497099"
  },
  {
    "text": "destructor and this type he called expected since",
    "start": "497099",
    "end": "503130"
  },
  {
    "text": "back in 2012 and more recently there's been a proposal for stood expected which",
    "start": "503130",
    "end": "510000"
  },
  {
    "text": "is really based on those ideas that that andre presented to the community so",
    "start": "510000",
    "end": "515750"
  },
  {
    "text": "again i rush up through that a bit but the main idea here is that this type IVA holds a value or a narrow type and so it",
    "start": "515750",
    "end": "524790"
  },
  {
    "text": "could be used for for error returns and again this is not a new idea this has",
    "start": "524790",
    "end": "530190"
  },
  {
    "text": "been around for for quite a long time and many other languages have has something it's just a few that I'm muffin familiar",
    "start": "530190",
    "end": "537259"
  },
  {
    "text": "with and starting of course with Haskell because you always have to start with Haskell in you has its more general",
    "start": "537259",
    "end": "543199"
  },
  {
    "text": "concept of an either type which is either one thing or another and then all",
    "start": "543199",
    "end": "549769"
  },
  {
    "text": "of the other example is a called result because we're a bit more it's gonna be a bit more customized for error handling",
    "start": "549769",
    "end": "556630"
  },
  {
    "text": "it turns out that that that works quite well when you you tailor it a bit more",
    "start": "556630",
    "end": "562389"
  },
  {
    "text": "so the result of T and an arrow type or just T and the arrow type is is fixed as",
    "start": "562389",
    "end": "570350"
  },
  {
    "text": "in the case of Kotlin there note that a swift only got result type as a swift v",
    "start": "570350",
    "end": "577910"
  },
  {
    "text": "I mentioned earlier that I thought Swift actually had one of the most advanced error handling strategies so you know",
    "start": "577910",
    "end": "584000"
  },
  {
    "text": "thinking about the future of error handling and it only got result T just recently this was earlier this year they",
    "start": "584000",
    "end": "590630"
  },
  {
    "text": "got this and that's because we're going to go further than this Swift is already there and this was more like a stepping",
    "start": "590630",
    "end": "596870"
  },
  {
    "text": "stone if anybody to come back and introduce this because it turns out there's actually useful for some other",
    "start": "596870",
    "end": "602689"
  },
  {
    "text": "things we may touch on that a little bit later so we've got this expected so I",
    "start": "602689",
    "end": "611180"
  },
  {
    "text": "stood expected not in the language yet that's still at the proposal stage but hopefully we're getting it there's other",
    "start": "611180",
    "end": "617569"
  },
  {
    "text": "ways that you can you can do it in the language right now but how does it actually work in practice let's start",
    "start": "617569",
    "end": "624949"
  },
  {
    "text": "from there so here's a little contrived example pause int so takes a string and",
    "start": "624949",
    "end": "631750"
  },
  {
    "text": "tries to convert it to an integer just using string string to do this because",
    "start": "631750",
    "end": "636829"
  },
  {
    "text": "it's fairly understandable not necessarily the best way to do it don't worry too much about that what we want",
    "start": "636829",
    "end": "642889"
  },
  {
    "text": "to highlight is how we convey errors so",
    "start": "642889",
    "end": "648009"
  },
  {
    "text": "hopefully you can see the return type I always use trailing return types by the way is still expected of int and I've",
    "start": "648009",
    "end": "657350"
  },
  {
    "text": "just chosen the domain error here you could put anything there but it makes",
    "start": "657350",
    "end": "662569"
  },
  {
    "text": "sense to use an exception so IFIF you're doing error handling and in the case of the failure",
    "start": "662569",
    "end": "669410"
  },
  {
    "text": "it returns stood make unexpected of the arrow type otherwise sprayed out of it",
    "start": "669410",
    "end": "676430"
  },
  {
    "text": "now but returns the integer so that the suit make unexpected if this is sort of",
    "start": "676430",
    "end": "681770"
  },
  {
    "text": "an or helper factory function that allows us to always infer from the from",
    "start": "681770",
    "end": "688820"
  },
  {
    "text": "the underlying fraud type without having to wrap that in anything you only have to use make unexpected for the for the",
    "start": "688820",
    "end": "694970"
  },
  {
    "text": "error case sorry I've got aniline sorry",
    "start": "694970",
    "end": "705910"
  },
  {
    "text": "where does I get it funny it says stringed in in here yeah yeah",
    "start": "705910",
    "end": "712910"
  },
  {
    "text": "don't get distracted by the by the actual code but so they're poor but is",
    "start": "712910",
    "end": "718670"
  },
  {
    "text": "this so it's fairly straightforward we've got a much better understanding of these choice types now we have still",
    "start": "718670",
    "end": "725930"
  },
  {
    "text": "optional we have stood variant they work much the same way and in fact you can you can do this withstood variant and if",
    "start": "725930",
    "end": "732350"
  },
  {
    "text": "you see my previous talk we we do look into that a bit it's just not not as",
    "start": "732350",
    "end": "737750"
  },
  {
    "text": "ergonomic to use so this is much much better fit for error handling more intentional it's easier to use and much",
    "start": "737750",
    "end": "745190"
  },
  {
    "text": "clearer and again as I went into a much greater length than the previous talk",
    "start": "745190",
    "end": "750860"
  },
  {
    "text": "this performance really well as well as it's a very low cost abstraction but",
    "start": "750860",
    "end": "757180"
  },
  {
    "text": "essentially zero cost obstruction and has many advantages over traditional",
    "start": "757180",
    "end": "763250"
  },
  {
    "text": "error code error handling because we're not actually blocking the return channel",
    "start": "763250",
    "end": "769840"
  },
  {
    "text": "where we're sharing it between the thing you actually want you to return an error code we'd have to use all these extra",
    "start": "769840",
    "end": "775520"
  },
  {
    "text": "tricks which I went into in the other talk so this is pretty good and now for",
    "start": "775520",
    "end": "782060"
  },
  {
    "text": "a lot of people this is the future of our handling in C++ but I said no this is a stepping stone to where we really",
    "start": "782060",
    "end": "788300"
  },
  {
    "text": "want to be so game in my previous talk analyze all the trade-offs and",
    "start": "788300",
    "end": "793840"
  },
  {
    "text": "particularly performance trade-offs of all these approaches and this X worked out quite well but not perfectly",
    "start": "793840",
    "end": "800619"
  },
  {
    "text": "and one of the reasons is it's okay in this example this doesn't scale",
    "start": "800619",
    "end": "806350"
  },
  {
    "text": "particularly well so let's have a look at a slightly more complex example we",
    "start": "806350",
    "end": "813009"
  },
  {
    "text": "introduce some more code and when I compose some things together I will shoot before we get to that no missus",
    "start": "813009",
    "end": "818019"
  },
  {
    "text": "bit sorry and example of the usage we should cover that as well so we're",
    "start": "818019",
    "end": "826269"
  },
  {
    "text": "calling pars in here and capturing the result we can test it just using a",
    "start": "826269",
    "end": "832019"
  },
  {
    "text": "boolean conversion as you might expect and do reference it like a pointer so",
    "start": "832019",
    "end": "839379"
  },
  {
    "text": "say it's very much like stood optional it's got a very similar model except that in the error case I've do",
    "start": "839379",
    "end": "845410"
  },
  {
    "text": "that oh there we go we've got error on it which pulls out the error object and",
    "start": "845410",
    "end": "850959"
  },
  {
    "text": "in this case because it's an exception type we can do what on it but really do dot error you'll get in the air a type",
    "start": "850959",
    "end": "856329"
  },
  {
    "text": "out so pretty straightforward to use but the problem here if I highlight that so",
    "start": "856329",
    "end": "864129"
  },
  {
    "text": "the the highlighted part is the happy buff that was really what we wanted to",
    "start": "864129",
    "end": "869529"
  },
  {
    "text": "write everything else is boilerplate coming from the error handling and what",
    "start": "869529",
    "end": "875799"
  },
  {
    "text": "will contrast that with something else in a minute but that's that's a bit of a",
    "start": "875799",
    "end": "880959"
  },
  {
    "text": "problem this there's more code here for the error handling than for the happy path just with one call and this is",
    "start": "880959",
    "end": "886929"
  },
  {
    "text": "where I want to delete on to the more complex example so sad another function now of course one divide two integers",
    "start": "886929",
    "end": "894629"
  },
  {
    "text": "and trivial example but we're trying to guard against division by zero and we're",
    "start": "894629",
    "end": "901089"
  },
  {
    "text": "doing that by again returning I stood expected event and domain error so same",
    "start": "901089",
    "end": "906819"
  },
  {
    "text": "signature there were same return type rather everything else is much the same now if",
    "start": "906819",
    "end": "913509"
  },
  {
    "text": "we want to well throw one more in as well that just takes it into Joe returns an integer it's gonna add one to it if",
    "start": "913509",
    "end": "920350"
  },
  {
    "text": "we're gonna compose these all together now we start to get code like this and",
    "start": "920350",
    "end": "926789"
  },
  {
    "text": "if you're reading it through line by line everything makes sense and it's pretty straightforward but",
    "start": "926789",
    "end": "931980"
  },
  {
    "text": "that's really messy code considering all we're doing is calling one function taking the return buddy's putting into",
    "start": "931980",
    "end": "938770"
  },
  {
    "text": "the next one and so on again most of that code is now boilerplate for the",
    "start": "938770",
    "end": "943810"
  },
  {
    "text": "error handling including all the nesting it's uh yeah it's not nice and in many",
    "start": "943810",
    "end": "952029"
  },
  {
    "text": "cases you might be able to simplify this a bit by using early returns just to",
    "start": "952029",
    "end": "957550"
  },
  {
    "text": "invert the nesting a bit and it's a little bit better not much I think the the essential",
    "start": "957550",
    "end": "962710"
  },
  {
    "text": "problem is still there and you may have additional problems as well but yeah",
    "start": "962710",
    "end": "969010"
  },
  {
    "text": "it's so it's a problem I think if we wanted to adopt this approach for error",
    "start": "969010",
    "end": "975130"
  },
  {
    "text": "handling and in general rather than specific cases then I think this is something we need to address and",
    "start": "975130",
    "end": "981510"
  },
  {
    "text": "fortunately there are some ways that we can address this in fact for those that",
    "start": "981510",
    "end": "987339"
  },
  {
    "text": "know this sort of thing stood expected can actually be treated as a monad so",
    "start": "987339",
    "end": "994210"
  },
  {
    "text": "let's do the obligatory monads bit of a talk we're not really going to talk about what monads are what we're going",
    "start": "994210",
    "end": "1000420"
  },
  {
    "text": "to talk about is the consequences of that for what's it expected so here's",
    "start": "1000420",
    "end": "1006000"
  },
  {
    "text": "another proposal this is actually about stood optional but exactly the same",
    "start": "1006000",
    "end": "1011310"
  },
  {
    "text": "principles apply to sit expected and in fact the author of this there fully intends to do the same thing pursuit",
    "start": "1011310",
    "end": "1016890"
  },
  {
    "text": "expected it's just that stood expected itself not in the language yet so the",
    "start": "1016890",
    "end": "1022050"
  },
  {
    "text": "substitute expected there it worked the same way so I think this was actually accepted into C++ 20 at the last meeting",
    "start": "1022050",
    "end": "1029010"
  },
  {
    "text": "so we are getting this so that's good so men idak operations for stood optional",
    "start": "1029010",
    "end": "1036209"
  },
  {
    "text": "or unexpected what does actually mean that's a drill",
    "start": "1036209",
    "end": "1041790"
  },
  {
    "text": "into the to the abstract at all bit it says I propose adding transform and then",
    "start": "1041790",
    "end": "1047640"
  },
  {
    "text": "and or else member functions to stood optional to support this style of",
    "start": "1047640",
    "end": "1053700"
  },
  {
    "text": "muriatic programming well have a look what that means at the moment but again if you are familiar with magnetic style",
    "start": "1053700",
    "end": "1060360"
  },
  {
    "text": "of programming and many people are these days whether they know it not in coding and you might know that transform is",
    "start": "1060360",
    "end": "1067809"
  },
  {
    "text": "essentially map function and then is a bind so particularly they come from",
    "start": "1067809",
    "end": "1074290"
  },
  {
    "text": "someone like Haskell or something more academic that's what they mean I never",
    "start": "1074290",
    "end": "1079570"
  },
  {
    "text": "got this or else which doesn't really have a counterpart here but in the context of error handling or else that",
    "start": "1079570",
    "end": "1086830"
  },
  {
    "text": "that's the thing that you do if you actually have an error so you sort of",
    "start": "1086830",
    "end": "1093070"
  },
  {
    "text": "that like catch if you like you know an exceptions based system alright so how",
    "start": "1093070",
    "end": "1100840"
  },
  {
    "text": "does this actually help anyway because it's all been very academic so far it's go back to our example this is where we",
    "start": "1100840",
    "end": "1106360"
  },
  {
    "text": "were so very messy indentation error handling mixed in with the with the real",
    "start": "1106360",
    "end": "1112780"
  },
  {
    "text": "code well now we could do this which I think you'll agree is a lot cleaner",
    "start": "1112780",
    "end": "1119710"
  },
  {
    "text": "simpler and just less moving parts mister contrast again that's what we had",
    "start": "1119710",
    "end": "1126150"
  },
  {
    "text": "and now that's what we we're not with the other thing here is that the the",
    "start": "1126150",
    "end": "1133390"
  },
  {
    "text": "flow of data now is much more obvious our inputs going in here I know it's illusions here and to here",
    "start": "1133390",
    "end": "1138970"
  },
  {
    "text": "and what I haven't shown here is the or else at the end to say what happens in",
    "start": "1138970",
    "end": "1144250"
  },
  {
    "text": "the error case but that would just be another line so starting to see you know",
    "start": "1144250",
    "end": "1150490"
  },
  {
    "text": "a nice clean pattern emerge which is good but although it is better we still",
    "start": "1150490",
    "end": "1156910"
  },
  {
    "text": "have a problem that is the happy path the rest is still boilerplate it's",
    "start": "1156910",
    "end": "1162820"
  },
  {
    "text": "cleaner boilerplate but yeah the",
    "start": "1162820",
    "end": "1175870"
  },
  {
    "text": "difference between end end and transform if you remember it's at the top but it's",
    "start": "1175870",
    "end": "1182260"
  },
  {
    "text": "it's a bit small now divided takes it integer and returns us stood expected",
    "start": "1182260",
    "end": "1187870"
  },
  {
    "text": "event an error whereas add one takes an integer and returns an integer so it",
    "start": "1187870",
    "end": "1195100"
  },
  {
    "text": "depends whether you are continuing something that keeps returning errors or if it's something that there's no",
    "start": "1195100",
    "end": "1201010"
  },
  {
    "text": "handling at all there's this we can go deeper into that but that's not really",
    "start": "1201010",
    "end": "1206950"
  },
  {
    "text": "part of this talk about any talk essentially on madenda carry handling we'll go into that more there's also an",
    "start": "1206950",
    "end": "1213400"
  },
  {
    "text": "excellent blog post by a Scott Wallachian who is actually talking about F sharp but it's a really broken out",
    "start": "1213400",
    "end": "1219670"
  },
  {
    "text": "into other communities called railway oriented programming which is a really",
    "start": "1219670",
    "end": "1225370"
  },
  {
    "text": "great visual metaphor for how this all works so I recommend that as well but",
    "start": "1225370",
    "end": "1231550"
  },
  {
    "text": "don't worry too much because we're gonna move beyond this anyway sort of the highlight that there's still a problem here even though this is",
    "start": "1231550",
    "end": "1236860"
  },
  {
    "text": "really now sort of the the leading edge of where we're going in C++ or release was until recently ok so here's here's",
    "start": "1236860",
    "end": "1250660"
  },
  {
    "text": "actually what we're up against this is how we can already do it today in C++ if",
    "start": "1250660",
    "end": "1258160"
  },
  {
    "text": "we use exceptions so sort of a highlight there difference so that it's the best we can do with stuff we don't even have",
    "start": "1258160",
    "end": "1264310"
  },
  {
    "text": "yet using return based error handling compared to this using exceptions we've",
    "start": "1264310",
    "end": "1270010"
  },
  {
    "text": "had for four years now the the flow is still inverted here you know the data",
    "start": "1270010",
    "end": "1275740"
  },
  {
    "text": "comes in the middle and so it goes out to here and to here unfortunately C++ isn't very good",
    "start": "1275740",
    "end": "1282640"
  },
  {
    "text": "functional composition but that's that's another story anyway but it's not",
    "start": "1282640",
    "end": "1288640"
  },
  {
    "text": "cleaner has almost no boilerplate here and obviously haven't shown that the try-catch but we know how that works but",
    "start": "1288640",
    "end": "1297280"
  },
  {
    "text": "ever got to this I wanted to show you what this looks like if we use p0 709",
    "start": "1297280",
    "end": "1303400"
  },
  {
    "text": "that proposal we started talking about the start back my screen and a case you",
    "start": "1303400",
    "end": "1309520"
  },
  {
    "text": "missed it lets you look up the top couple or things that change will dig",
    "start": "1309520",
    "end": "1317679"
  },
  {
    "text": "into what those changes are but pretty comparable you know what if I have to",
    "start": "1317679",
    "end": "1322990"
  },
  {
    "text": "tell you that in doing this we've got all of the benefits of using stood expected instead",
    "start": "1322990",
    "end": "1329410"
  },
  {
    "text": "but without any of those downsides good that's really the meat of my previous talk so I'm going to talk too much about",
    "start": "1329410",
    "end": "1336100"
  },
  {
    "text": "it now so this is really compelling get all the benefits of exceptions and all the benefits of unexpected almost none",
    "start": "1336100",
    "end": "1343090"
  },
  {
    "text": "of the trade-offs she also point out that this bit this try keyword here as of the last",
    "start": "1343090",
    "end": "1351610"
  },
  {
    "text": "standards meeting this was discussed and it looked like the committee is not",
    "start": "1351610",
    "end": "1357400"
  },
  {
    "text": "buying this at the moment this is actually optional part we'll talk about what it means in a bit I'm really hoping",
    "start": "1357400",
    "end": "1365830"
  },
  {
    "text": "we might still get it but as it stands we may not but everything else is still",
    "start": "1365830",
    "end": "1370920"
  },
  {
    "text": "still on the table all right let's dig into this a little",
    "start": "1370920",
    "end": "1376900"
  },
  {
    "text": "bit more so these are the relevant keywords so as well as that try which is",
    "start": "1376900",
    "end": "1382720"
  },
  {
    "text": "optional on the signature of our function instead of having to wrap everything in stood expected we just put",
    "start": "1382720",
    "end": "1390190"
  },
  {
    "text": "this phrase keyword on the end of the signature that's not the same as the",
    "start": "1390190",
    "end": "1397960"
  },
  {
    "text": "deprecated fro keyword that can go in that position although it's somewhat similar but this just says that this",
    "start": "1397960",
    "end": "1404500"
  },
  {
    "text": "this function may throw one of these new types of errors and it's sort of standing in for that stood expected",
    "start": "1404500",
    "end": "1413080"
  },
  {
    "text": "return type but now we can use the normal in return type and then the the",
    "start": "1413080",
    "end": "1419410"
  },
  {
    "text": "fro here looks very much like fro we have now except that rather than throwing an exception object we're",
    "start": "1419410",
    "end": "1427600"
  },
  {
    "text": "throwing this stood earth C which looks very much like a value and it is",
    "start": "1427600",
    "end": "1433050"
  },
  {
    "text": "remember this is called throwing values I'm going to dig into that a lot more but doesn't look too different but it is",
    "start": "1433050",
    "end": "1440740"
  },
  {
    "text": "a bit different and I said this this try keyword here it is optional but one of",
    "start": "1440740",
    "end": "1447580"
  },
  {
    "text": "the reasons that I really keen on this and many of us are is combined with the",
    "start": "1447580",
    "end": "1453310"
  },
  {
    "text": "fros keyword on the the signature and a try keyword here the error handling in",
    "start": "1453310",
    "end": "1460870"
  },
  {
    "text": "your code is no explicit with just a tiny little bit of extra syntax you can see exactly what lines",
    "start": "1460870",
    "end": "1466950"
  },
  {
    "text": "may throw what function is made fro where changes of flow of control I'm",
    "start": "1466950",
    "end": "1474490"
  },
  {
    "text": "actually may come from you can't do right now with exceptions drop it all",
    "start": "1474490",
    "end": "1486520"
  },
  {
    "text": "together so essentially this tri keyword is taken the place of that that the",
    "start": "1486520",
    "end": "1492970"
  },
  {
    "text": "magnetic you know and then and next core",
    "start": "1492970",
    "end": "1499420"
  },
  {
    "text": "audit transform transform its do more of that with all the land of stuff which",
    "start": "1499420",
    "end": "1505270"
  },
  {
    "text": "itself was in a shortcut for there's a lot of code being condensed down into these free letters but that was too much",
    "start": "1505270",
    "end": "1512170"
  },
  {
    "text": "sorry but yeah because because of the froze key well up there the components",
    "start": "1512170",
    "end": "1518440"
  },
  {
    "text": "is why I know that that can throw so it could put that in any way but it's just a nice point to say yeah it's doing work",
    "start": "1518440",
    "end": "1524500"
  },
  {
    "text": "here flow control may change I think it I think it really makes sense yeah yes",
    "start": "1524500",
    "end": "1536160"
  },
  {
    "text": "yeah that is important yep so if this",
    "start": "1536160",
    "end": "1544210"
  },
  {
    "text": "doesn't operate so if if from within here a function Marx froze it calls a",
    "start": "1544210",
    "end": "1550920"
  },
  {
    "text": "function that's not Marx froze that does throw a traditional exception we'll get",
    "start": "1550920",
    "end": "1556330"
  },
  {
    "text": "into how interoperates a little bit later but it will convert it to one of these types and it also works the other",
    "start": "1556330",
    "end": "1561880"
  },
  {
    "text": "way and the funk should not much froze it the call one of these whether or not you put the try key with it it can",
    "start": "1561880",
    "end": "1567250"
  },
  {
    "text": "convert it to a what we call dynamic exception as well how that works hope",
    "start": "1567250",
    "end": "1573100"
  },
  {
    "text": "you'll become clear when we dig into the underlying mechanisms a bit more but yes it does interoperate so this is very",
    "start": "1573100",
    "end": "1580510"
  },
  {
    "text": "brief introduction to this because I went into in more depth before but this one does show you that it's not that",
    "start": "1580510",
    "end": "1586390"
  },
  {
    "text": "much different syntactically it's what we have now with exceptions where it is",
    "start": "1586390",
    "end": "1591430"
  },
  {
    "text": "different just making it more explicit but with far less code than the return",
    "start": "1591430",
    "end": "1598440"
  },
  {
    "text": "code based approach and just a building",
    "start": "1598440",
    "end": "1604049"
  },
  {
    "text": "that a little bit we put this in a in a function we've got the the froze keyword",
    "start": "1604049",
    "end": "1611490"
  },
  {
    "text": "there as well I can highlight it that way so so when you are composing these",
    "start": "1611490",
    "end": "1618090"
  },
  {
    "text": "together you know if the compiler can if we have this the compiler can tell you",
    "start": "1618090",
    "end": "1623880"
  },
  {
    "text": "if you've missed it this is the key it statically checked so again unlike fro or even no except the checking happens",
    "start": "1623880",
    "end": "1631890"
  },
  {
    "text": "at compile time not run time and that's really critical as well and the other",
    "start": "1631890",
    "end": "1637890"
  },
  {
    "text": "concern although people have is this looks very much like checked exceptions again like fro but other languages like",
    "start": "1637890",
    "end": "1644880"
  },
  {
    "text": "Java run with this much more and most people agree but it didn't really work",
    "start": "1644880",
    "end": "1650490"
  },
  {
    "text": "out but it sort of stuck with it the main reason for that is actually because",
    "start": "1650490",
    "end": "1657740"
  },
  {
    "text": "you have to be you have to say what the exception type is and that makes your",
    "start": "1657740",
    "end": "1663630"
  },
  {
    "text": "API is much more brittle because these things can change and then you have to end up changing whole stacks of code",
    "start": "1663630",
    "end": "1669980"
  },
  {
    "text": "just because he changed what exception might be thrown down here so what everyone did is they just say throws",
    "start": "1669980",
    "end": "1675870"
  },
  {
    "text": "exception just like a base class this is baked to the same thing this is",
    "start": "1675870",
    "end": "1681809"
  },
  {
    "text": "saying it froze but never say what it froze because it's just a value so that that's another important consideration",
    "start": "1681809",
    "end": "1687649"
  },
  {
    "text": "all right ma'am I think a little bit more you can use these within try-catch",
    "start": "1687649",
    "end": "1693840"
  },
  {
    "text": "blocks just as you could before but the thing you catch is this stood error it's",
    "start": "1693840",
    "end": "1700740"
  },
  {
    "text": "always stood error you can mix this with dynamic exceptions as well seeking of",
    "start": "1700740",
    "end": "1706620"
  },
  {
    "text": "additional catch blocks for exception types but if you're catching one of these value based exceptions that's what",
    "start": "1706620",
    "end": "1713190"
  },
  {
    "text": "you do a lot of this talk I'm going to be digging into what stood error is so",
    "start": "1713190",
    "end": "1718320"
  },
  {
    "text": "what we'll come ons about so just want to really highlight",
    "start": "1718320",
    "end": "1725250"
  },
  {
    "text": "something here which is that all these keywords we've just introduced i've been new or modified as colors haven't come",
    "start": "1725250",
    "end": "1734010"
  },
  {
    "text": "out of thing they are effectively isomorphic to you the use of stood",
    "start": "1734010",
    "end": "1740160"
  },
  {
    "text": "expected so the previous examples we looked at and all their components map",
    "start": "1740160",
    "end": "1746940"
  },
  {
    "text": "directly onto these new new concepts and i said even the try keyword if we get it",
    "start": "1746940",
    "end": "1752340"
  },
  {
    "text": "it's basically playing the role of those magnetic methods so so that's pretty",
    "start": "1752340",
    "end": "1758820"
  },
  {
    "text": "nice but i have some consequences positive consequences because they say that this is essentially a zero cost",
    "start": "1758820",
    "end": "1765090"
  },
  {
    "text": "abstraction over just using return codes it's about the best we can do and it's",
    "start": "1765090",
    "end": "1771960"
  },
  {
    "text": "actually even better than that because in this case it's a library based",
    "start": "1771960",
    "end": "1778679"
  },
  {
    "text": "solution and it's not adding any other head but when you're making this into",
    "start": "1778679",
    "end": "1784530"
  },
  {
    "text": "something the compiler understands it can do even more it can start putting more things in in",
    "start": "1784530",
    "end": "1790200"
  },
  {
    "text": "registers and it can remove stuff that it knows it doesn't need and in fact",
    "start": "1790200",
    "end": "1795360"
  },
  {
    "text": "there's a there's an unused bit in one of the registers on the return channel that can be used as the discriminator",
    "start": "1795360",
    "end": "1802799"
  },
  {
    "text": "for whether something is a value or an arrow type which means you can get that part essentially for free and for most",
    "start": "1802799",
    "end": "1810390"
  },
  {
    "text": "return types that side is not going to be any bigger so there's essentially no",
    "start": "1810390",
    "end": "1815580"
  },
  {
    "text": "overhead over not using error handling even because on the course I got branch",
    "start": "1815580",
    "end": "1821250"
  },
  {
    "text": "prediction as well so so essentially so that's the promise there's no",
    "start": "1821250",
    "end": "1826260"
  },
  {
    "text": "implementations of this yet so we'll see how it actually plays out but that's that's a really nice promise say there's",
    "start": "1826260",
    "end": "1832590"
  },
  {
    "text": "no implementations yeah yeah I mean I",
    "start": "1832590",
    "end": "1839190"
  },
  {
    "text": "don't know the details of which register but there is a register that's used for",
    "start": "1839190",
    "end": "1844530"
  },
  {
    "text": "the for the stack variables well there's one bit that's unused currently in all the ABI is that do we know about that we",
    "start": "1844530",
    "end": "1852690"
  },
  {
    "text": "could use to say whether if you were effectively doing still expected then you've got to discriminate",
    "start": "1852690",
    "end": "1859650"
  },
  {
    "text": "between the actual value like the integer or an arrow type so you'd normally have like an extra burly in the",
    "start": "1859650",
    "end": "1865470"
  },
  {
    "text": "field well we can stick that in this bit so we don't need any extra storage for that and it's all in registers so that's",
    "start": "1865470",
    "end": "1873000"
  },
  {
    "text": "quite nice effect which means at least size-wise there's no overhead and to",
    "start": "1873000",
    "end": "1879030"
  },
  {
    "text": "some extent even at runtime there's no overhead not just no overhead but no overhead over not doing error handling",
    "start": "1879030",
    "end": "1884670"
  },
  {
    "text": "which is really significant I say there's there's no implementation of",
    "start": "1884670",
    "end": "1890370"
  },
  {
    "text": "this yet of these keywords in C++ but this is essentially what Swift is doing",
    "start": "1890370",
    "end": "1896730"
  },
  {
    "text": "as well a mission that the start and a significant because they've been doing this now for about three years and they",
    "start": "1896730",
    "end": "1904290"
  },
  {
    "text": "make all the same promises and guarantees and they're delivering on it can't always compare one language to",
    "start": "1904290",
    "end": "1910740"
  },
  {
    "text": "another but in this case particularly as Swift was originally designed by people",
    "start": "1910740",
    "end": "1917010"
  },
  {
    "text": "with C++ backgrounds with reasonably confident that we'll be able to get the",
    "start": "1917010",
    "end": "1922710"
  },
  {
    "text": "same benefits but again we can't guarantee it until we're actually there",
    "start": "1922710",
    "end": "1927920"
  },
  {
    "text": "but that's that's really nice I think so",
    "start": "1927920",
    "end": "1933830"
  },
  {
    "text": "go back to to this this is the example we're looking at and I said we're gonna",
    "start": "1933830",
    "end": "1939110"
  },
  {
    "text": "talk a lot more about this type because this is one of the areas that that this",
    "start": "1939110",
    "end": "1947010"
  },
  {
    "text": "very hand wavy in p0 709 mostly because it's actually completely discussed in",
    "start": "1947010",
    "end": "1952890"
  },
  {
    "text": "another paper which also stands alone let's have a look at that one this is p1 0 to 8 it's got quite a long",
    "start": "1952890",
    "end": "1962760"
  },
  {
    "text": "title that the significant part is it says for p0 709 zero overhead",
    "start": "1962760",
    "end": "1969420"
  },
  {
    "text": "deterministic exceptions so it sounds like this is purely a supporting paper for our static exceptions paper don't",
    "start": "1969420",
    "end": "1978000"
  },
  {
    "text": "know they mislead you this actually stands alone and it's very worthwhile in its own right for reasons that hopefully",
    "start": "1978000",
    "end": "1983580"
  },
  {
    "text": "will become obvious so the yep tech starts with a proposal",
    "start": "1983580",
    "end": "1990630"
  },
  {
    "text": "for the replacement in new code of the system header system error with a",
    "start": "1990630",
    "end": "1997380"
  },
  {
    "text": "substantially refactored and lighter weight design which meets modern C++ design and implementation okay sounds",
    "start": "1997380",
    "end": "2005570"
  },
  {
    "text": "nice but so what well first of all who is actually aware of or familiar with the system error",
    "start": "2005570",
    "end": "2012200"
  },
  {
    "text": "header so just a small handful of people that's quite normal",
    "start": "2012200",
    "end": "2017780"
  },
  {
    "text": "this has been around since C++ 11 it's actually quite a big deal and most",
    "start": "2017780",
    "end": "2023270"
  },
  {
    "text": "people haven't heard of it or if they have have probably dismissed it as something not that interesting this is",
    "start": "2023270",
    "end": "2029630"
  },
  {
    "text": "where they get the the type stood error code if you look at in a minute so what",
    "start": "2029630",
    "end": "2036800"
  },
  {
    "text": "we're proposing here is a replacement for that so we need to understand that first so all right so we're talking",
    "start": "2036800",
    "end": "2043700"
  },
  {
    "text": "about stood error so stood error is the the new proposed one this is what it is",
    "start": "2043700",
    "end": "2050860"
  },
  {
    "text": "should explain everything you need to know actually it's not that helpful yet well we're gonna unpack this so it's a",
    "start": "2050860",
    "end": "2057320"
  },
  {
    "text": "so type death for using statement for for this thing so now to understand this",
    "start": "2057320",
    "end": "2063889"
  },
  {
    "text": "thing we need to go back and have a look at stood our code here it is that's a",
    "start": "2063890",
    "end": "2073940"
  },
  {
    "text": "little bit tricky when we discuss in this thing that we've got these types that are very similar playing the same",
    "start": "2073940",
    "end": "2079040"
  },
  {
    "text": "roles with very similar names it can be difficult to keep track of which ones which so this is the C++ 11 one that",
    "start": "2079040",
    "end": "2086300"
  },
  {
    "text": "we've had along for a long time but most people are not familiar with it here's the server sketch of what it actually is",
    "start": "2086300",
    "end": "2092889"
  },
  {
    "text": "at least the data so it's a very small simple type it's got an integer value",
    "start": "2092890",
    "end": "2099170"
  },
  {
    "text": "and a pointer to this thing called an error category and that's it but it's",
    "start": "2099170",
    "end": "2106490"
  },
  {
    "text": "got a whole load of methods its highlight some of the key ones and a",
    "start": "2106490",
    "end": "2112460"
  },
  {
    "text": "couple of accesses to get the value and to get the error category by reference but it's just",
    "start": "2112460",
    "end": "2118640"
  },
  {
    "text": "and as service I like that nope yeah",
    "start": "2118640",
    "end": "2124849"
  },
  {
    "text": "okay I will come to that so it's got this message and boolean operator as",
    "start": "2124849",
    "end": "2130160"
  },
  {
    "text": "well and we'll come back to that but let's talk about that now spread the",
    "start": "2130160",
    "end": "2137539"
  },
  {
    "text": "problem start actually this boolean conversion operator looks like it would be really useful on an object",
    "start": "2137539",
    "end": "2143239"
  },
  {
    "text": "representing errors and say well if forgot this error does it represent an",
    "start": "2143239",
    "end": "2148519"
  },
  {
    "text": "error or or not unfortunately that's not what the boolean conversion operator does here all it does is tell you",
    "start": "2148519",
    "end": "2156859"
  },
  {
    "text": "whether that value is zero or not which may correspond to it being an error or",
    "start": "2156859",
    "end": "2163009"
  },
  {
    "text": "not entirely depends on what what the error categories we'll discuss in a",
    "start": "2163009",
    "end": "2168349"
  },
  {
    "text": "moment and the other significant part is the message returning a string where's",
    "start": "2168349",
    "end": "2174680"
  },
  {
    "text": "the string coming from we're holding a an integer a and a pointer so put a",
    "start": "2174680",
    "end": "2180589"
  },
  {
    "text": "guess it must be coming from the error category so that's less actually dig into that now it's what narrow categories you can",
    "start": "2180589",
    "end": "2187700"
  },
  {
    "text": "think of it as I a domain for errors and within that domain you have usually",
    "start": "2187700",
    "end": "2195200"
  },
  {
    "text": "enums factors always enums but really just like a name space of integers and",
    "start": "2195200",
    "end": "2201049"
  },
  {
    "text": "so one error category can have one any known never occur to curry you can have an array num and you can store that in",
    "start": "2201049",
    "end": "2206900"
  },
  {
    "text": "that integer so what you're actually put in there is in there is a an enum value and the error category tells you how to",
    "start": "2206900",
    "end": "2212239"
  },
  {
    "text": "interpret it so the interesting point there is that in order to explain what",
    "start": "2212239",
    "end": "2219650"
  },
  {
    "text": "an error category is we say it's a domain of errors it would have been probably more useful it's called a",
    "start": "2219650",
    "end": "2225380"
  },
  {
    "text": "narrow domain that well we'll leave that one for now so here you can see we've",
    "start": "2225380",
    "end": "2233989"
  },
  {
    "text": "got the POSIX error codes over here this is actually in the standard so we have this today but you can create your own",
    "start": "2233989",
    "end": "2240410"
  },
  {
    "text": "error categories with whatever types of error you want",
    "start": "2240410",
    "end": "2245588"
  },
  {
    "text": "and what happens is so you create your own arrow category class which is",
    "start": "2246240",
    "end": "2252670"
  },
  {
    "text": "derived from arrow category to to implement some of these methods so one",
    "start": "2252670",
    "end": "2258400"
  },
  {
    "text": "of them is the that message method that we saw or rather there's one in the",
    "start": "2258400",
    "end": "2263740"
  },
  {
    "text": "category as well so because the arrow category knows what you know we're talking about if you pass it that value",
    "start": "2263740",
    "end": "2269680"
  },
  {
    "text": "it knows how to interpret it you can write whatever code you want in there to produce a string it could be a lookup",
    "start": "2269680",
    "end": "2275260"
  },
  {
    "text": "table could be a map it could be a switch statement could just be a string",
    "start": "2275260",
    "end": "2281200"
  },
  {
    "text": "conversion if you like that that's how we get the message and then you've got these equivalent methods they're",
    "start": "2281200",
    "end": "2289630"
  },
  {
    "text": "interesting because if you've got this one error category or error domain then",
    "start": "2289630",
    "end": "2297180"
  },
  {
    "text": "comparing one error code to another is pretty straightforward but if you're",
    "start": "2297180",
    "end": "2302860"
  },
  {
    "text": "dealing with potentially multiple error categories how do you compare an error",
    "start": "2302860",
    "end": "2308470"
  },
  {
    "text": "code over here to an error code over there and I swear equivalence comes in",
    "start": "2308470",
    "end": "2314340"
  },
  {
    "text": "you could actually have a one to one or a many-to-many mapping between codes",
    "start": "2314340",
    "end": "2320650"
  },
  {
    "text": "across domains and the equivalent methods are responsible for and making",
    "start": "2320650",
    "end": "2326710"
  },
  {
    "text": "that work so there's a couple of overloads here you can say one takes error code but this one takes something",
    "start": "2326710",
    "end": "2334240"
  },
  {
    "text": "called error condition so yet another type and this is very guess a little bit",
    "start": "2334240",
    "end": "2339880"
  },
  {
    "text": "hacky and another problem with this particular design error condition is",
    "start": "2339880",
    "end": "2347050"
  },
  {
    "text": "basically exactly the same type is there a code except it's a different type so",
    "start": "2347050",
    "end": "2352600"
  },
  {
    "text": "that we can overload here so that when you're using an error condition you get",
    "start": "2352600",
    "end": "2357610"
  },
  {
    "text": "equivalence comparison and if using an error code which we didn't see before",
    "start": "2357610",
    "end": "2364530"
  },
  {
    "text": "you get an explicit in a bit by bit comparison so you can get about to over",
    "start": "2364530",
    "end": "2372670"
  },
  {
    "text": "type a comparison which is useful but the way it does it is very subtle for easy to get wrong and even people that",
    "start": "2372670",
    "end": "2378610"
  },
  {
    "text": "are very familiar with this design still struggle with this a bit so it's one",
    "start": "2378610",
    "end": "2383750"
  },
  {
    "text": "another one of the weaknesses and strengths of this design but it's a",
    "start": "2383750",
    "end": "2389900"
  },
  {
    "text": "really useful property being able to compare across arrow domains so that",
    "start": "2389900",
    "end": "2396010"
  },
  {
    "text": "explains where message comes from as well let's just summarize some of that",
    "start": "2396010",
    "end": "2403039"
  },
  {
    "text": "and point out a couple of the other problems we've with error code so one of",
    "start": "2403039",
    "end": "2410000"
  },
  {
    "text": "the things we didn't really discuss is that pointer to an error category is also its identity so if you are",
    "start": "2410000",
    "end": "2416720"
  },
  {
    "text": "comparing to error codes directly then the point of value of the error category",
    "start": "2416720",
    "end": "2422599"
  },
  {
    "text": "is part of that comparison and I have some implications particularly to header",
    "start": "2422599",
    "end": "2428599"
  },
  {
    "text": "only libraries if you have a header only library that also references dynamic",
    "start": "2428599",
    "end": "2433670"
  },
  {
    "text": "libraries then even if you have Singleton's for your error categories",
    "start": "2433670",
    "end": "2439400"
  },
  {
    "text": "which you pretty much have to fuel this to work they may not still having",
    "start": "2439400",
    "end": "2444710"
  },
  {
    "text": "different pointer values because you'll have a different point of value in in different dynamic libraries so that",
    "start": "2444710",
    "end": "2451220"
  },
  {
    "text": "really breaks that and that's that's quite a problem and it seems like a bit of an edge case but actually people hit",
    "start": "2451220",
    "end": "2456920"
  },
  {
    "text": "this quite often another problem which may not be same obvious is because of",
    "start": "2456920",
    "end": "2462380"
  },
  {
    "text": "that message method it depends the whole thing depends on string so what's a",
    "start": "2462380",
    "end": "2468470"
  },
  {
    "text": "vocabulary type it's part of the standard but it's actually quite a heavyweight header to bring in and in",
    "start": "2468470",
    "end": "2474980"
  },
  {
    "text": "fact if you can dig into it it starts to depend on i/o streams and and in fact exceptions people are often using this",
    "start": "2474980",
    "end": "2482589"
  },
  {
    "text": "because they can't afford all of that they don't want exceptions as though and I have streams and things secure like an",
    "start": "2482589",
    "end": "2488599"
  },
  {
    "text": "embedded systems so having the thing that makes it easier to to use in those",
    "start": "2488599",
    "end": "2494270"
  },
  {
    "text": "constrained environments bring inserted string is actually a problem so that's",
    "start": "2494270",
    "end": "2500809"
  },
  {
    "text": "another weakness we've mentioned that the boolean conversion is not reliable because it doesn't really do what you",
    "start": "2500809",
    "end": "2506510"
  },
  {
    "text": "think it does I've got this need for this separate error condition site whose only purpose is for overloading",
    "start": "2506510",
    "end": "2514009"
  },
  {
    "text": "because this is all soup us plus 11 ammo stripped I think none of it is context",
    "start": "2514009",
    "end": "2519740"
  },
  {
    "text": "bruh whereas pretty much all of it could be and should be now and the the error code",
    "start": "2519740",
    "end": "2529420"
  },
  {
    "text": "can only be an integral type so it's usually them doesn't seem like a big limitation but that can be a limitation",
    "start": "2529420",
    "end": "2536950"
  },
  {
    "text": "and you know just throw in the fact that categories are actually domains it would",
    "start": "2536950",
    "end": "2542029"
  },
  {
    "text": "be nice to have a better name so there's a few problems with that design but nonetheless it's still a really powerful",
    "start": "2542029",
    "end": "2548480"
  },
  {
    "text": "design it's a shame it's often overlooked so we have this right now it's worth going to look at it's",
    "start": "2548480",
    "end": "2555319"
  },
  {
    "text": "actually used extensively in the file system library and the networking TS",
    "start": "2555319",
    "end": "2562749"
  },
  {
    "text": "it's no coincidence that both of those libraries originally came from boost and now as did era code itself that's the",
    "start": "2562749",
    "end": "2569990"
  },
  {
    "text": "same group of people that worked on on those things and we've got them into the standard so particularly the fuse file",
    "start": "2569990",
    "end": "2578029"
  },
  {
    "text": "system or or networking you really need to know about this anyway but even if not it can be really useful so let's",
    "start": "2578029",
    "end": "2586400"
  },
  {
    "text": "have a look at what we're proposing now",
    "start": "2586400",
    "end": "2591519"
  },
  {
    "text": "stood era to understand that we need to understand this template because it's this is at the heart of it latest code",
    "start": "2591519",
    "end": "2598609"
  },
  {
    "text": "and part printer fact this template looks very similar to where we started with era code we have a value which now",
    "start": "2598609",
    "end": "2608599"
  },
  {
    "text": "is actually more generic because of the template that solved one problem and you have a pointer to something that's now",
    "start": "2608599",
    "end": "2614869"
  },
  {
    "text": "called a domain yeah it fixes the naming problem but otherwise looks very very similar and that's deliberate because",
    "start": "2614869",
    "end": "2622039"
  },
  {
    "text": "we're trying to solve the same problems so here's that using statement again so",
    "start": "2622039",
    "end": "2629680"
  },
  {
    "text": "you can see there's already a bit of a mismatch we're talking about status code but we actually want arrid status code",
    "start": "2629680",
    "end": "2635920"
  },
  {
    "text": "so what's the difference the only difference is that errored status code",
    "start": "2635920",
    "end": "2642799"
  },
  {
    "text": "checks in it's an instructor wherever it's been constructed from a an error or a non error type and",
    "start": "2642799",
    "end": "2650890"
  },
  {
    "text": "will actually throw an exception if you try to construct it with a non error type so it will always be an error code",
    "start": "2650890",
    "end": "2656810"
  },
  {
    "text": "which they've got one we can guarantee represents an error don't have to check you don't even need the boolean conversion it doesn't have one anyway by",
    "start": "2656810",
    "end": "2663590"
  },
  {
    "text": "the way they took it out so for our purposes for stood error that makes",
    "start": "2663590",
    "end": "2670250"
  },
  {
    "text": "sense it's only ever an error don't you check that and then you've got this a",
    "start": "2670250",
    "end": "2676520"
  },
  {
    "text": "raised system code value type bit that's that's what our value up here is yeah we",
    "start": "2676520",
    "end": "2684740"
  },
  {
    "text": "can see that so that was an integer before there seems a bit more complex now is it worth",
    "start": "2684740",
    "end": "2690410"
  },
  {
    "text": "it what is it use of the term erased suggests that",
    "start": "2690410",
    "end": "2695900"
  },
  {
    "text": "it's a type arrays objects and it is and the argument to that system code value",
    "start": "2695900",
    "end": "2704300"
  },
  {
    "text": "type is actually the storage type for the erased object so it's anything that",
    "start": "2704300",
    "end": "2710510"
  },
  {
    "text": "can fit into whatever system code value type is which for our purposes happens",
    "start": "2710510",
    "end": "2715520"
  },
  {
    "text": "to boil down to an int pointer T right would be so far so we have an erased",
    "start": "2715520",
    "end": "2721400"
  },
  {
    "text": "type that can fit into an int pointer T anything that could fit into any point of T which of course could be sorry an",
    "start": "2721400",
    "end": "2730160"
  },
  {
    "text": "erase type okay good question an erased type is something to which the",
    "start": "2730160",
    "end": "2736550"
  },
  {
    "text": "type has been erased more helpfully if you've seen stood any that's an",
    "start": "2736550",
    "end": "2744320"
  },
  {
    "text": "excellent example of an erase type but this there's other examples in the standard and stood function does the same thing so the actual thing it's",
    "start": "2744320",
    "end": "2749930"
  },
  {
    "text": "holding it's not what you get as a value type it's something usually polymorphically derived where the things",
    "start": "2749930",
    "end": "2758090"
  },
  {
    "text": "are here keeping track of what the actual derive type is except for the thing itself that sort of essentially",
    "start": "2758090",
    "end": "2766220"
  },
  {
    "text": "been erased so here anything that we can hold in something the size of an in point of T",
    "start": "2766220",
    "end": "2773470"
  },
  {
    "text": "could be there but if there's something else that that knows what that should be you can get it",
    "start": "2773470",
    "end": "2779360"
  },
  {
    "text": "back out so maybe I'll become clear as we carry on because this is effectively",
    "start": "2779360",
    "end": "2788270"
  },
  {
    "text": "what we're getting from that using statement say not exactly like this but",
    "start": "2788270",
    "end": "2794200"
  },
  {
    "text": "we've got the status code domain and then we've got this in point us in point",
    "start": "2794200",
    "end": "2799460"
  },
  {
    "text": "to T for our storage they think of it like a union where we can actually put something else in there instead as long",
    "start": "2799460",
    "end": "2807050"
  },
  {
    "text": "as it's the size of an int pointer T so we could put any integer before any none and we can put any pointer in there",
    "start": "2807050",
    "end": "2813520"
  },
  {
    "text": "which wasn't quite true before how though in practice it often was so",
    "start": "2813520",
    "end": "2819710"
  },
  {
    "text": "that's nice so a little bit of complexity to explain that because it's a more general design it can be used for",
    "start": "2819710",
    "end": "2826070"
  },
  {
    "text": "other things as well but that's really what we want for our purposes let's go",
    "start": "2826070",
    "end": "2832430"
  },
  {
    "text": "back to that summary was this is a summary of how this fixes things so the mains are called domains",
    "start": "2832430",
    "end": "2839990"
  },
  {
    "text": "ok now that problem with error categories the pointer value being part",
    "start": "2839990",
    "end": "2847400"
  },
  {
    "text": "of its identity that's not the case here to compare to error domains the domain",
    "start": "2847400",
    "end": "2853850"
  },
  {
    "text": "itself at design time is assigned a random you in 64 integer which is you're",
    "start": "2853850",
    "end": "2864890"
  },
  {
    "text": "not going to get clashes is the point it's big enough that if you use the right generator even in the proposal it",
    "start": "2864890",
    "end": "2871790"
  },
  {
    "text": "tells you what generator to use we shouldn't get clashes it'll be unique but that means that don't have worry",
    "start": "2871790",
    "end": "2878360"
  },
  {
    "text": "about points of values being being comparable fix is that the value itself",
    "start": "2878360",
    "end": "2886180"
  },
  {
    "text": "so it's part the general design can actually now be any small trivially copyable or movable type then we're",
    "start": "2886180",
    "end": "2893720"
  },
  {
    "text": "going to discuss what that means in a moment but for our purposes it's an enamel pointer now it also doesn't have",
    "start": "2893720",
    "end": "2903320"
  },
  {
    "text": "the dependency on certain string as it's currently worded in the proposal",
    "start": "2903320",
    "end": "2909580"
  },
  {
    "text": "this hasn't really gone through the committee yet they destroy it for the first time in Cologne positive",
    "start": "2909580",
    "end": "2915400"
  },
  {
    "text": "high-level review but we haven't dug into the details I think this might be one of the sticking points because it",
    "start": "2915400",
    "end": "2921130"
  },
  {
    "text": "actually defines its own string ref type for this purpose which I'm sure people",
    "start": "2921130",
    "end": "2928720"
  },
  {
    "text": "are going to have a problem with hopefully we'll resolve that because I think this could be a sticking point otherwise it's most of context pro as",
    "start": "2928720",
    "end": "2936550"
  },
  {
    "text": "you'd expect took out the bullying perversion we don't need that anyway because we're the arid status code and",
    "start": "2936550",
    "end": "2945089"
  },
  {
    "text": "another thing we took out this separate site the error condition now all comparisons are equivalence comparisons",
    "start": "2945089",
    "end": "2952470"
  },
  {
    "text": "because it turns out that's what if I would use them for anyway so compared to",
    "start": "2952470",
    "end": "2958380"
  },
  {
    "text": "eric stood errors it will always be an equivalence comparison so if they belong",
    "start": "2958380",
    "end": "2963910"
  },
  {
    "text": "to different area domains then that equivalence mapping will come in what if",
    "start": "2963910",
    "end": "2970089"
  },
  {
    "text": "you actually want to do a and explicit identity comparison we can always just",
    "start": "2970089",
    "end": "2976030"
  },
  {
    "text": "prepare the the value and error domain you can still do that manually but most",
    "start": "2976030",
    "end": "2982750"
  },
  {
    "text": "most people don't need that most insan so this gets rid of that confusion with these with a separate title so that's",
    "start": "2982750",
    "end": "2988300"
  },
  {
    "text": "nice so it's how he seems to fix all of the problems we've stood error code so",
    "start": "2988300",
    "end": "2997810"
  },
  {
    "text": "that's that's a good sign let's dig into this this thing about the small Tripoli",
    "start": "2997810",
    "end": "3002940"
  },
  {
    "text": "copyable relocatable type so we talked about this I raised in pointer T type",
    "start": "3002940",
    "end": "3013250"
  },
  {
    "text": "now in pointer T itself is automatically trivially copyable and trivially",
    "start": "3013250",
    "end": "3020040"
  },
  {
    "text": "relocatable and what that means is that what's a copy it",
    "start": "3020040",
    "end": "3025560"
  },
  {
    "text": "you essentially just set it to a mem copy or episode a register just in a",
    "start": "3025560",
    "end": "3031109"
  },
  {
    "text": "copying a register shrivelling relocatable means you have the same",
    "start": "3031109",
    "end": "3036150"
  },
  {
    "text": "property even for move only types so moving something is just a case of a",
    "start": "3036150",
    "end": "3041180"
  },
  {
    "text": "mem copy we don't have that yet there's another proposal for that which we'll look at in a second but those two",
    "start": "3041180",
    "end": "3048769"
  },
  {
    "text": "properties are really important because we're not actually dealing with a ten-pointer tea we're dealing with this arrays type so the compiler doesn't know",
    "start": "3048769",
    "end": "3055930"
  },
  {
    "text": "those properties hold which means it's going to have to be pessimistic about copy these things around and that's",
    "start": "3055930",
    "end": "3063769"
  },
  {
    "text": "really important for our performance guarantees we want this this thing to have zero cost or negative cost",
    "start": "3063769",
    "end": "3070519"
  },
  {
    "text": "abstraction so this this part is key to that so let's have a look at those other",
    "start": "3070519",
    "end": "3077750"
  },
  {
    "text": "proposals there's two actually this one p1 zero to nine move relocates and also",
    "start": "3077750",
    "end": "3087220"
  },
  {
    "text": "p1 one for for object relocation in terms of move plus destroy to see what",
    "start": "3087220",
    "end": "3094099"
  },
  {
    "text": "they actually say it's actually probably better to compare the two side-by-side so 1029 it just has an attribute to",
    "start": "3094099",
    "end": "3103339"
  },
  {
    "text": "indicate that move is trivial I could",
    "start": "3103339",
    "end": "3108589"
  },
  {
    "text": "just be done by man copy which for our purpose is exactly what we need that's all we need nothing else but what we're",
    "start": "3108589",
    "end": "3117079"
  },
  {
    "text": "talking about this there's other things that would be nice to have along with that and that's what p1 1 4 4 gives us",
    "start": "3117079",
    "end": "3123769"
  },
  {
    "text": "in fact the attribute is optional in that paper so there's almost like a",
    "start": "3123769",
    "end": "3131079"
  },
  {
    "text": "disconnect there but additionally has a detection trait so you know is trivially",
    "start": "3131079",
    "end": "3136190"
  },
  {
    "text": "relocatable the controversial bit is can",
    "start": "3136190",
    "end": "3142910"
  },
  {
    "text": "reset the moves from state using mem copy so what happens here is if you've",
    "start": "3142910",
    "end": "3149660"
  },
  {
    "text": "moved from from one layer to another then it can also be for construct the",
    "start": "3149660",
    "end": "3155960"
  },
  {
    "text": "value and move that in the three copy that in as well to reset the the move from so this is",
    "start": "3155960",
    "end": "3161779"
  },
  {
    "text": "what we often call destructive move which should be following along has a long torturous history of being rejected",
    "start": "3161779",
    "end": "3170680"
  },
  {
    "text": "so this is the main reason that we also have this paper because if this gets",
    "start": "3170680",
    "end": "3175990"
  },
  {
    "text": "stuck we can fall back to the thing that we need for our purposes but it'd be",
    "start": "3175990",
    "end": "3181060"
  },
  {
    "text": "nice to forget about what because it's it's actually quite quite nice and it also defines the whole concept of",
    "start": "3181060",
    "end": "3187750"
  },
  {
    "text": "relocatable what that means it's got some algorithms in there but but really it's that destructive move part that",
    "start": "3187750",
    "end": "3193390"
  },
  {
    "text": "could hold this up currently that's actually moving through the committee so it hasn't been rejected yet that's",
    "start": "3193390",
    "end": "3199420"
  },
  {
    "text": "promising I've always forget one of these then we'll be able to make stood error",
    "start": "3199420",
    "end": "3206850"
  },
  {
    "text": "essentially free to copy around which is what we need for the for the low cost",
    "start": "3206850",
    "end": "3212440"
  },
  {
    "text": "obstruction okay so that is really what",
    "start": "3212440",
    "end": "3220090"
  },
  {
    "text": "split areas and how it works and we haven't looked at how you use them but now that you know that",
    "start": "3220090",
    "end": "3226590"
  },
  {
    "text": "basically just contains this this integer that that's an enum got a pretty",
    "start": "3226590",
    "end": "3232720"
  },
  {
    "text": "good idea we can just do like a switch statement or something it's pretty pretty simple to use and you can compare",
    "start": "3232720",
    "end": "3239470"
  },
  {
    "text": "them across domains us that's really nice so these are the proposals we've",
    "start": "3239470",
    "end": "3246100"
  },
  {
    "text": "looked at this morning going up to four proposals so covered a lot of ground",
    "start": "3246100",
    "end": "3252310"
  },
  {
    "text": "actually so the main one zero cross deterministic exceptions throwing values",
    "start": "3252310",
    "end": "3257670"
  },
  {
    "text": "that's the thing that gives us that the froze keyword optionally the try keyword and the whole value based exceptions",
    "start": "3257670",
    "end": "3268800"
  },
  {
    "text": "supporting that status code and standard error object the replacement for stood",
    "start": "3268800",
    "end": "3275830"
  },
  {
    "text": "error code sporting that one of move",
    "start": "3275830",
    "end": "3281440"
  },
  {
    "text": "relocates or the new version of destructive move so hopefully you saw that actually all",
    "start": "3281440",
    "end": "3289900"
  },
  {
    "text": "of those papers can stand alone even if we don't get the supporting papers please area 709 still still worthwhile",
    "start": "3289900",
    "end": "3295800"
  },
  {
    "text": "but it's better if we have use of these optimizations even if we don't get p0",
    "start": "3295800",
    "end": "3301720"
  },
  {
    "text": "709 it's worth having the improvements to state our code and even if we don't get that it's worth having move relocates or",
    "start": "3301720",
    "end": "3309339"
  },
  {
    "text": "destructive move so sorry PE 1144 was",
    "start": "3309339",
    "end": "3315849"
  },
  {
    "text": "presented in do nothing processed in June in July July in Cologne and I don't",
    "start": "3315849",
    "end": "3329289"
  },
  {
    "text": "think don't think it was actually at least I missed it if it was it I know it",
    "start": "3329289",
    "end": "3334630"
  },
  {
    "text": "did have a pass through before certainly in San Diego it's been seen a couple of times and it's still it is progressing",
    "start": "3334630",
    "end": "3340839"
  },
  {
    "text": "through but I don't think it's hit the the big rooms it again material part yet so it's they stood in the queue",
    "start": "3340839",
    "end": "3348160"
  },
  {
    "text": "essentially but it is being discussed and actually all of these were discuss to some extent in in Cologne except I",
    "start": "3348160",
    "end": "3355660"
  },
  {
    "text": "think one one four four but all the others were and you know so things",
    "start": "3355660",
    "end": "3362200"
  },
  {
    "text": "things are moving along about very early days we're still getting twenty at the",
    "start": "3362200",
    "end": "3367720"
  },
  {
    "text": "door and this is all twenty three or later so we're just beginning to discuss",
    "start": "3367720",
    "end": "3374410"
  },
  {
    "text": "that that's why I say although they basically turn their noses up at the try expression that's not off the table yet",
    "start": "3374410",
    "end": "3381789"
  },
  {
    "text": "I'm still hopeful so we looked at those in detail but this a couple of others as",
    "start": "3381789",
    "end": "3389859"
  },
  {
    "text": "well we mentioned still expect it in passing but still going through Israel",
    "start": "3389859",
    "end": "3396180"
  },
  {
    "text": "independently so we may get both we looked at the mimetic except operations",
    "start": "3396180",
    "end": "3402489"
  },
  {
    "text": "forced adoption all that's in that's great that's an update and we're",
    "start": "3402489",
    "end": "3407980"
  },
  {
    "text": "probably get the same forced it expected in that case and then honorable mention and again if never change from Colona a",
    "start": "3407980",
    "end": "3415380"
  },
  {
    "text": "support for contracts I don't really discuss that here I've mentioned it within the the other talk but it is",
    "start": "3415380",
    "end": "3422859"
  },
  {
    "text": "relevant because if we do never get contracts for those that don't know",
    "start": "3422859",
    "end": "3428309"
  },
  {
    "text": "contracts was in C++ twenty but in Cologne we pulled out not for good we",
    "start": "3428309",
    "end": "3435730"
  },
  {
    "text": "pulled out so that we could they a bit more hope you were being 23 that's another story who never talk I mention",
    "start": "3435730",
    "end": "3443390"
  },
  {
    "text": "it here because prior to it being taken out the idea was we wanted to change a",
    "start": "3443390",
    "end": "3449720"
  },
  {
    "text": "lot of places in the standard that currently for exceptions so to use contracts instead because the exceptions",
    "start": "3449720",
    "end": "3456290"
  },
  {
    "text": "they throw are logic errors based on CID logic error and it's been said that stud",
    "start": "3456290",
    "end": "3463340"
  },
  {
    "text": "logic error is itself a logic error because if our exceptions for things that will be recoverable it shouldn't be",
    "start": "3463340",
    "end": "3471200"
  },
  {
    "text": "recovering from logic errors we won't dig into that now because there's some different schools of thought but the",
    "start": "3471200",
    "end": "3477380"
  },
  {
    "text": "point is there's a lot of support for this idea that most of those in the standard should be contracts and by",
    "start": "3477380",
    "end": "3483200"
  },
  {
    "text": "extension probably most people's application code which means you take out a lot of uses of exceptions and",
    "start": "3483200",
    "end": "3489110"
  },
  {
    "text": "another part we didn't discuss much I went in to give a talk is there's a an",
    "start": "3489110",
    "end": "3494240"
  },
  {
    "text": "optional part of p0 709 that says that heap allocation failure should also",
    "start": "3494240",
    "end": "3500600"
  },
  {
    "text": "probably not by default for an exception but instead should should terminate",
    "start": "3500600",
    "end": "3506170"
  },
  {
    "text": "configurable but there's actually a surprising amount of support for the idea I'm not sure if he's going to make",
    "start": "3506170",
    "end": "3512840"
  },
  {
    "text": "it through but again most of the rest of the uses of exceptions in the standard are bad aleck take out bad alec and",
    "start": "3512840",
    "end": "3521180"
  },
  {
    "text": "logic errors there's like one or two places left in the standard and that means they're having a more explicit way",
    "start": "3521180",
    "end": "3527870"
  },
  {
    "text": "of talking about exceptions in your code there's much more palatable because",
    "start": "3527870",
    "end": "3533450"
  },
  {
    "text": "there's so few of them you want them to stand out that's why I've put contracts up there as well it's a shame that we're",
    "start": "3533450",
    "end": "3539570"
  },
  {
    "text": "not getting in 20 but I think it's still relevant to put it in the mix here given the time frames we're talking about so",
    "start": "3539570",
    "end": "3547180"
  },
  {
    "text": "that is actually Bender by talk I mentioned the reference is the role on",
    "start": "3547180",
    "end": "3554720"
  },
  {
    "text": "my website level of indirection comm stash refs slash donned HTML if you",
    "start": "3554720",
    "end": "3561680"
  },
  {
    "text": "can't remember level of indirection comm I also have extra level of indirection comm that redirects there",
    "start": "3561680",
    "end": "3567969"
  },
  {
    "text": "and another level of indirection calm it goes on or you can reach me on Twitter",
    "start": "3567969",
    "end": "3574259"
  },
  {
    "text": "or I'll be here for the rest of day so thank you I mean",
    "start": "3574259",
    "end": "3586380"
  }
]