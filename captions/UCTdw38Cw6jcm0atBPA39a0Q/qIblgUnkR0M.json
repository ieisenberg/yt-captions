[
  {
    "text": "yes welcome to this session I hope I'm in the right room so um",
    "start": "7319",
    "end": "16198"
  },
  {
    "text": "but this is uh 42 Silhouettes to say hello in C",
    "start": "16199",
    "end": "21660"
  },
  {
    "text": "and this point title it is actually serious attempt to talk about important stuff in the C programming language",
    "start": "21660",
    "end": "29220"
  },
  {
    "text": "but I use silliness as an excuse for not necessarily building up all the",
    "start": "29220",
    "end": "36059"
  },
  {
    "text": "arguments correctly all the time so let's start where every",
    "start": "36059",
    "end": "42239"
  },
  {
    "text": "tutorial everything about C should start and that is with the proper hello",
    "start": "42239",
    "end": "50160"
  },
  {
    "text": "and this you might think about this as kind of the correct Scholastic example",
    "start": "50160",
    "end": "57480"
  },
  {
    "text": "should be used checking the return values we are indicating to the",
    "start": "57480",
    "end": "63899"
  },
  {
    "text": "runtime environment whether it's a failure or a success",
    "start": "63899",
    "end": "69020"
  },
  {
    "text": "and it says hello of course so that's the first hello actually I've lost a bit count on how many hellos there are so",
    "start": "70020",
    "end": "76860"
  },
  {
    "text": "maybe it's not exactly 42.",
    "start": "76860",
    "end": "81080"
  },
  {
    "text": "when I show this example to someone at this conference says Oh no you're",
    "start": "83460",
    "end": "89340"
  },
  {
    "text": "showing without phrases and uh I don't use prices coming and",
    "start": "89340",
    "end": "96000"
  },
  {
    "text": "Richard don't use prices on single statements like this um",
    "start": "96000",
    "end": "102659"
  },
  {
    "text": "of course it works but what you are indicating here is actually a compound statement it is okay",
    "start": "102659",
    "end": "109200"
  },
  {
    "text": "I accept it I would do that if the rest of the code is is like that but I don't",
    "start": "109200",
    "end": "114600"
  },
  {
    "text": "accept the argument that it's wrong not to use those braces because this is now",
    "start": "114600",
    "end": "121140"
  },
  {
    "text": "introducing a compound statement with one statement inside actually if you like presses why not add",
    "start": "121140",
    "end": "127560"
  },
  {
    "text": "a few more this also works um so if that's zero cup of tea",
    "start": "127560",
    "end": "134700"
  },
  {
    "text": "a few set of braces is good and more of them must be even better",
    "start": "134700",
    "end": "139760"
  },
  {
    "text": "and another argument that came up was oh you're using puts I accept that one",
    "start": "139800",
    "end": "145920"
  },
  {
    "text": "um and it's quite common to see printf used instead of this",
    "start": "145920",
    "end": "152879"
  },
  {
    "text": "um and then you get on the luxury of adding the new line",
    "start": "152879",
    "end": "158700"
  },
  {
    "text": "yourself if you want so um that's okay so this is also a good",
    "start": "158700",
    "end": "164519"
  },
  {
    "text": "hello a technical um",
    "start": "164519",
    "end": "170580"
  },
  {
    "text": "however trying to be correct about everything",
    "start": "170580",
    "end": "177180"
  },
  {
    "text": "is a bit difficult and in this case we we are not just indicating successor",
    "start": "177180",
    "end": "183599"
  },
  {
    "text": "Arrow by a kind of Silent zero one we are basically shouting it exit failure exit success",
    "start": "183599",
    "end": "192239"
  },
  {
    "text": "and therefore you feel that you have to report things correctly and you have to",
    "start": "192239",
    "end": "199620"
  },
  {
    "text": "do things properly and when you use printer printer has a slightly different way of returning errors so it will",
    "start": "199620",
    "end": "207120"
  },
  {
    "text": "either return end of file or the number of",
    "start": "207120",
    "end": "212940"
  },
  {
    "text": "um of characters printed out",
    "start": "212940",
    "end": "218819"
  },
  {
    "text": "um so this would be the proper way of checking printer",
    "start": "218819",
    "end": "223980"
  },
  {
    "text": "and if you typically when you look at well if you see the discussions around these things",
    "start": "223980",
    "end": "230400"
  },
  {
    "text": "there is some kind of consensus that it is okay not to check stood there and stood out",
    "start": "230400",
    "end": "239220"
  },
  {
    "text": "um on most systems so that's what I'm going to do here as well I'm not going to check",
    "start": "239220",
    "end": "245580"
  },
  {
    "text": "um error on stood out and then maybe we can discuss that later but for now",
    "start": "245580",
    "end": "251099"
  },
  {
    "text": "yeah okay it works but for now I'm just doing it like this actually I'm going to",
    "start": "251099",
    "end": "256380"
  },
  {
    "text": "slim it down even more because this one is shouting success",
    "start": "256380",
    "end": "262199"
  },
  {
    "text": "without me actually not knowing whether it's success or not I like the slightly",
    "start": "262199",
    "end": "268080"
  },
  {
    "text": "more kind of subwoof zero which is the same thing of course and even since I have been doing a lot",
    "start": "268080",
    "end": "276300"
  },
  {
    "text": "of C plus plus and in C plus plus it's very very common to do this",
    "start": "276300",
    "end": "282620"
  },
  {
    "text": "it's not an error and c99 followed so they defined in the",
    "start": "283320",
    "end": "289320"
  },
  {
    "text": "standard that implicitly dropping our domain is okay and if you will be",
    "start": "289320",
    "end": "296100"
  },
  {
    "text": "guaranteed zero as the return status and that's just 23 years ago so",
    "start": "296100",
    "end": "305840"
  },
  {
    "text": "um and that's of course it works and it doesn't give under one into ours um",
    "start": "306840",
    "end": "313820"
  },
  {
    "text": "so there's that here's what happens on an input CPU it",
    "start": "313919",
    "end": "320160"
  },
  {
    "text": "just resets the return value but also not this hair now",
    "start": "320160",
    "end": "325860"
  },
  {
    "text": "it's calling hooks not right there this is important thing to know about C",
    "start": "325860",
    "end": "333560"
  },
  {
    "text": "also C plus plus of course and that is a language defined by Behavior",
    "start": "333560",
    "end": "340560"
  },
  {
    "text": "not by implementation so if you are not supposed to know the difference",
    "start": "340560",
    "end": "346080"
  },
  {
    "text": "between puts or printer and in this case we don't take the return value anyway",
    "start": "346080",
    "end": "351539"
  },
  {
    "text": "the compiler is free to say I probably wanted to use splits so I just flipped",
    "start": "351539",
    "end": "356699"
  },
  {
    "text": "but I'm using put some stuff and this is something that's useful to know if you put on your debugger because",
    "start": "356699",
    "end": "362940"
  },
  {
    "text": "it might not run the code as you think it runs the code and this is what we get when we have a",
    "start": "362940",
    "end": "369600"
  },
  {
    "text": "language defined by Behavior instead of by implementation foreign by the way this is just an",
    "start": "369600",
    "end": "376440"
  },
  {
    "text": "example this happens absolutely all the time that's the assembler and the",
    "start": "376440",
    "end": "381780"
  },
  {
    "text": "Machine the code produced is different from what you think it might be and as long as the compiler knows",
    "start": "381780",
    "end": "389400"
  },
  {
    "text": "according to the standard that you are not supposed to know the difference",
    "start": "389400",
    "end": "394639"
  },
  {
    "text": "now to something completely different right",
    "start": "395819",
    "end": "402479"
  },
  {
    "text": "series of pictures picture and and a lot of the library functions in in C",
    "start": "402479",
    "end": "410220"
  },
  {
    "text": "take integers and return integers it's mostly historically it was mostly so",
    "start": "410220",
    "end": "416880"
  },
  {
    "text": "they were able to report minus one you know and the file but it um",
    "start": "416880",
    "end": "423479"
  },
  {
    "text": "there are probably all the reasons as well and these days with um with large character sets there is",
    "start": "423479",
    "end": "432120"
  },
  {
    "text": "another set of Library functions input output that is",
    "start": "432120",
    "end": "438120"
  },
  {
    "text": "in the C standard I will not cover that but for this talk about silly ways of saying hello",
    "start": "438120",
    "end": "445560"
  },
  {
    "text": "I start out like this and it's getting worse",
    "start": "445560",
    "end": "450380"
  },
  {
    "text": "it's hello this invites to",
    "start": "452340",
    "end": "458960"
  },
  {
    "text": "create an array of integers with these values",
    "start": "459300",
    "end": "465240"
  },
  {
    "text": "and where we use an integer to index into that array step by step onto the",
    "start": "465240",
    "end": "473160"
  },
  {
    "text": "variant but I hope you attended the talk yesterday with Robert secret or today",
    "start": "473160",
    "end": "480479"
  },
  {
    "text": "because he's talking about something very important and I belong to his school of thought",
    "start": "480479",
    "end": "487740"
  },
  {
    "text": "um I am very consistent on your shall use at least not integer to index into",
    "start": "487740",
    "end": "495780"
  },
  {
    "text": "arrays it creates a lot of problems and it also it's not very portable",
    "start": "495780",
    "end": "504240"
  },
  {
    "text": "the portable way of doing it is to use size t and you don't know what size T is except",
    "start": "504240",
    "end": "511979"
  },
  {
    "text": "that it is an unsigned large engine integer that can address enough memory",
    "start": "511979",
    "end": "520740"
  },
  {
    "text": "usually an unsigned long on a lot of machines including mine",
    "start": "520740",
    "end": "526760"
  },
  {
    "text": "all right everyone gives hello notice I didn't claim hello for the",
    "start": "528779",
    "end": "535680"
  },
  {
    "text": "Inked version so I have some decency foreign",
    "start": "535680",
    "end": "542300"
  },
  {
    "text": "let's optimize this one yeah",
    "start": "542839",
    "end": "548540"
  },
  {
    "text": "yeah we we do have go to CNC and I'm not encouraging people to use",
    "start": "548640",
    "end": "555839"
  },
  {
    "text": "scotus but I think it is problematic if you as a c programmer are not able to",
    "start": "555839",
    "end": "562140"
  },
  {
    "text": "read code written with gotas and if you are not able to get beyond the point",
    "start": "562140",
    "end": "569459"
  },
  {
    "text": "of just seeing the go-to's and nothing else there are files in the Linux kernel",
    "start": "569459",
    "end": "575820"
  },
  {
    "text": "um that has I think up to 70 go to's in the same function",
    "start": "575820",
    "end": "580920"
  },
  {
    "text": "and a lot of the gold is used correctly around actually improves the",
    "start": "580920",
    "end": "588360"
  },
  {
    "text": "code not destroys the code so this this idea that go to is always bad",
    "start": "588360",
    "end": "596519"
  },
  {
    "text": "I don't subscribe to that anymore I don't use go to except from educational",
    "start": "596519",
    "end": "602100"
  },
  {
    "text": "purposes um but there are situations where it is",
    "start": "602100",
    "end": "607200"
  },
  {
    "text": "better to even go to than going all the way to go around the",
    "start": "607200",
    "end": "615060"
  },
  {
    "text": "problem it's especially when it comes to cleaning up resources for example",
    "start": "615060",
    "end": "621140"
  },
  {
    "text": "but in this case there is no good reason so I'm going to refactor it but the",
    "start": "621140",
    "end": "626220"
  },
  {
    "text": "reason why I start here is that I would like to show what it",
    "start": "626220",
    "end": "631440"
  },
  {
    "text": "means to be a high level language well high level language like say because",
    "start": "631440",
    "end": "636480"
  },
  {
    "text": "there is a translation that is going on now from",
    "start": "636480",
    "end": "641580"
  },
  {
    "text": "using go to to do one to one two four",
    "start": "641580",
    "end": "646680"
  },
  {
    "text": "and that's the one I'm going to demonstrate but I'm going to claim hello for that",
    "start": "646680",
    "end": "651720"
  },
  {
    "text": "one um C doesn't care about uh indentation and",
    "start": "651720",
    "end": "659519"
  },
  {
    "text": "those kind of things so indenting this thing in",
    "start": "659519",
    "end": "665060"
  },
  {
    "text": "putting these on the same line I do that only because of the next step",
    "start": "665060",
    "end": "671040"
  },
  {
    "text": "because then I can look at those two things",
    "start": "671040",
    "end": "676800"
  },
  {
    "text": "and this is actually more or less exactly what it would look like in assembler assembler doesn't have",
    "start": "676800",
    "end": "684060"
  },
  {
    "text": "this construct do you want so that's the first step into being",
    "start": "684060",
    "end": "690980"
  },
  {
    "text": "slightly above assembler language",
    "start": "690980",
    "end": "696199"
  },
  {
    "text": "but there are situations where do while is the best approach oh I wish I had the",
    "start": "702120",
    "end": "708839"
  },
  {
    "text": "cartoon uh I do have it for that I'm not going to show a channel maybe later",
    "start": "708839",
    "end": "715440"
  },
  {
    "text": "but um there is this thing about actually doing something before checking the invariant",
    "start": "715440",
    "end": "722700"
  },
  {
    "text": "um sometimes it's the right thing to do but very often you should feel encouraged to check the",
    "start": "722700",
    "end": "730200"
  },
  {
    "text": "invariant before you go into the loop it makes the curve easier to reason about",
    "start": "730200",
    "end": "735360"
  },
  {
    "text": "and that is what you have the wild look for so and in this case it makes",
    "start": "735360",
    "end": "740820"
  },
  {
    "text": "absolutely no difference well um in what we are trying to do here",
    "start": "740820",
    "end": "747180"
  },
  {
    "text": "so by swapping these two like this we have a while loop",
    "start": "747180",
    "end": "754220"
  },
  {
    "text": "now we are looking at the situation well back hello yes we are looking at the",
    "start": "755100",
    "end": "760320"
  },
  {
    "text": "situation that is very very very common when you are using one loops you have first uh declaration with an",
    "start": "760320",
    "end": "768240"
  },
  {
    "text": "initialization then you check the loop invariants and then you do an update",
    "start": "768240",
    "end": "776000"
  },
  {
    "text": "um of the variable that you're using to to look with and this pattern",
    "start": "776220",
    "end": "782700"
  },
  {
    "text": "is so common and so useful that a lot of programming languages including C",
    "start": "782700",
    "end": "789420"
  },
  {
    "text": "has a particular keyword and mechanism for looping through those kind of things",
    "start": "789420",
    "end": "795660"
  },
  {
    "text": "and what you're looking at now and I'm going to transfer it into a for Loop is exactly the same as you see in the",
    "start": "795660",
    "end": "802680"
  },
  {
    "text": "for loop I believe you got a success machine code when you compile this this example and",
    "start": "802680",
    "end": "809639"
  },
  {
    "text": "the next thing I'm going to show you so let's look at that transformation so take this one",
    "start": "809639",
    "end": "815160"
  },
  {
    "text": "the for Loop has three spots where you can put these things in",
    "start": "815160",
    "end": "821100"
  },
  {
    "text": "so here I'm only using one of them so that's where it goes that's the",
    "start": "821100",
    "end": "826200"
  },
  {
    "text": "condition Loop condition the invariant and then you can take",
    "start": "826200",
    "end": "831839"
  },
  {
    "text": "the Declaration on the utilization and we can stop it in there and we can take",
    "start": "831839",
    "end": "838320"
  },
  {
    "text": "this one and stuff it in there now if you are able to do this",
    "start": "838320",
    "end": "844260"
  },
  {
    "text": "translation quickly and you have when you look at for Loops then you will be never confused about when is this one",
    "start": "844260",
    "end": "852000"
  },
  {
    "text": "updated because it is at the end of this compound statement",
    "start": "852000",
    "end": "857339"
  },
  {
    "text": "however if you are not used to that then it might be a bit confusing so my",
    "start": "857339",
    "end": "864060"
  },
  {
    "text": "recommendation is try to avoid using the for Loop unless you use it for the",
    "start": "864060",
    "end": "869339"
  },
  {
    "text": "typical scenario this kind of scenario fairly simple stuff as soon as you",
    "start": "869339",
    "end": "875820"
  },
  {
    "text": "start doing Advanced things with rollip you probably want to use",
    "start": "875820",
    "end": "881519"
  },
  {
    "text": "maybe a while loop instead just to indicate being more explicit about what is happening",
    "start": "881519",
    "end": "887220"
  },
  {
    "text": "and I think this is particularly important in C plus because there is so much magic happening",
    "start": "887220",
    "end": "895079"
  },
  {
    "text": "in Ziploc plus when you um for example update variables or objects",
    "start": "895079",
    "end": "902040"
  },
  {
    "text": "and also when you do things in this interaction all right",
    "start": "902040",
    "end": "908160"
  },
  {
    "text": "so now I've simplified this thing and that gives me the pleasure of",
    "start": "908160",
    "end": "915680"
  },
  {
    "text": "this is a pre-increment and this kind of this a lot of C",
    "start": "925860",
    "end": "931500"
  },
  {
    "text": "programmers they seldom use pre-increments unless they have to there is this tendency to use post",
    "start": "931500",
    "end": "938399"
  },
  {
    "text": "increment instead I I don't actually understand why but I",
    "start": "938399",
    "end": "943920"
  },
  {
    "text": "just accept that that's so common that when I program in C I often use post",
    "start": "943920",
    "end": "949260"
  },
  {
    "text": "increment when I programming C plus plus I always use pre-increments and uh I",
    "start": "949260",
    "end": "955260"
  },
  {
    "text": "consider myself be lingual so I can switch between those languages I don't have to kind of do c when I",
    "start": "955260",
    "end": "962639"
  },
  {
    "text": "program C plus plus I don't have to do C plus plus on a program to C so",
    "start": "962639",
    "end": "967740"
  },
  {
    "text": "um I don't mind sweeping those are swapping those around and see it",
    "start": "967740",
    "end": "972980"
  },
  {
    "text": "never really a problem um at least not in this case to do a",
    "start": "972980",
    "end": "978600"
  },
  {
    "text": "positive I haven't post increment instead I'm not encouraging post incremental so",
    "start": "978600",
    "end": "984420"
  },
  {
    "text": "if you go into a code base that is basically using pre-increments yeah go for it because it is it feels slightly better",
    "start": "984420",
    "end": "991320"
  },
  {
    "text": "to do but if you come to a cold base and all the others are using post increment don't be kind of this",
    "start": "991320",
    "end": "998160"
  },
  {
    "text": "strange person that kind of introduces this pre-increment everywhere and",
    "start": "998160",
    "end": "1003380"
  },
  {
    "text": "and uh I'm not able to do anything value-adding services for the group",
    "start": "1003380",
    "end": "1010180"
  },
  {
    "text": "I have a spot a line here I need to fill it with something there it is",
    "start": "1016519",
    "end": "1023019"
  },
  {
    "text": "this is an idiom I like idioms C has plenty of idioms",
    "start": "1023180",
    "end": "1032298"
  },
  {
    "text": "and I think you should get used to just read that one size of something divided the size of an",
    "start": "1032299",
    "end": "1040880"
  },
  {
    "text": "array divided by size of the first element and that gives you the count of element",
    "start": "1040880",
    "end": "1046938"
  },
  {
    "text": "in any kind of array and it is so common so useful",
    "start": "1046939",
    "end": "1053740"
  },
  {
    "text": "that you will find it all over the place and basically what it's doing it's um",
    "start": "1053740",
    "end": "1062179"
  },
  {
    "text": "enables you to remove this one and that is a language language feature",
    "start": "1062179",
    "end": "1069559"
  },
  {
    "text": "um because the compiler will realize well the six elements I will give you six elements",
    "start": "1069559",
    "end": "1075260"
  },
  {
    "text": "and then you can calculate how many elements there are",
    "start": "1075260",
    "end": "1081340"
  },
  {
    "text": "blue uh before I move on uh I need to do some",
    "start": "1082100",
    "end": "1090140"
  },
  {
    "text": "fun with this one um but also because I need to build up you know Insight",
    "start": "1090140",
    "end": "1097520"
  },
  {
    "text": "before I show something else afterwards what you're looking at there the the square brackets they are actually an",
    "start": "1097520",
    "end": "1103640"
  },
  {
    "text": "operator in C ertain spots",
    "start": "1103640",
    "end": "1108980"
  },
  {
    "text": "um that you can that has an equivalent it's just a",
    "start": "1108980",
    "end": "1115280"
  },
  {
    "text": "syntactical nice way of saying this there is",
    "start": "1115280",
    "end": "1120440"
  },
  {
    "text": "it's the same thing it's even says in the standard I think it's used to as one of the examples in the standards it's",
    "start": "1120440",
    "end": "1125780"
  },
  {
    "text": "definitely one of the examples in Canada Richie but they are the same thing well",
    "start": "1125780",
    "end": "1132080"
  },
  {
    "text": "plus oh you can swap them let's do that and then go back to the square bracket",
    "start": "1132080",
    "end": "1139160"
  },
  {
    "text": "thingy and you can do this and it doesn't have to oh it doesn't",
    "start": "1139160",
    "end": "1144500"
  },
  {
    "text": "have to be an object or a variable or symbol it can be a literal",
    "start": "1144500",
    "end": "1150620"
  },
  {
    "text": "so if you want to go to the third element into an array you can do two square brackets say for example in this",
    "start": "1150620",
    "end": "1156620"
  },
  {
    "text": "case and it says hello it works yes it works",
    "start": "1156620",
    "end": "1165580"
  },
  {
    "text": "um I have seen I've seen this uh this use a few times in real code",
    "start": "1166940",
    "end": "1173960"
  },
  {
    "text": "but most of the time well in kind of production code and so on but most of the times when I see it it is",
    "start": "1173960",
    "end": "1181160"
  },
  {
    "text": "um to trigger a completion error so uh this is one of the Plenty",
    "start": "1181160",
    "end": "1188059"
  },
  {
    "text": "count-offs that you typically do look up on stack Overflow and I need a counter",
    "start": "1188059",
    "end": "1195020"
  },
  {
    "text": "macro um eventually someone says they just want to use or something like that",
    "start": "1195020",
    "end": "1201440"
  },
  {
    "text": "and it's uh clever um it gives you a compilation error with",
    "start": "1201440",
    "end": "1207919"
  },
  {
    "text": "actually I haven't studied it that's deep so maybe what I'm saying now is not completely correct but it gives you a",
    "start": "1207919",
    "end": "1214760"
  },
  {
    "text": "complexion error if it's not the type of array you hope that",
    "start": "1214760",
    "end": "1220280"
  },
  {
    "text": "it should be I just realized that I didn't I haven't started enough to talk much about it but",
    "start": "1220280",
    "end": "1227240"
  },
  {
    "text": "there is an example of using this one in real life I have seen um in the in a",
    "start": "1227240",
    "end": "1234500"
  },
  {
    "text": "large code base uh working with the audio video processing I saw this uh use for picking",
    "start": "1234500",
    "end": "1244160"
  },
  {
    "text": "up of the audio particular audio codec",
    "start": "1244160",
    "end": "1249200"
  },
  {
    "text": "and when I looked at it I thought it actually looks quite nice it's strange but it looks nice and it was an",
    "start": "1249200",
    "end": "1255919"
  },
  {
    "text": "appropriate place to do it it was kind of geeky but it was",
    "start": "1255919",
    "end": "1261200"
  },
  {
    "text": "yeah it doesn't matter what's the feeling of it cool uh I think I've also",
    "start": "1261200",
    "end": "1266480"
  },
  {
    "text": "founded a few places in a Linux column um with an acceptable reasons for swapping",
    "start": "1266480",
    "end": "1273320"
  },
  {
    "text": "those two foreign",
    "start": "1273320",
    "end": "1277960"
  },
  {
    "text": "this now that we are calculating um the number of elements uh by the way",
    "start": "1283120",
    "end": "1289940"
  },
  {
    "text": "um I wouldn't suggest replacing this idiom with the macro",
    "start": "1289940",
    "end": "1296419"
  },
  {
    "text": "there are plenty of idioms in C and also C plus plus of course in any language but also in C",
    "start": "1296419",
    "end": "1303980"
  },
  {
    "text": "that replacing it with a macro doesn't add anything uh",
    "start": "1303980",
    "end": "1309799"
  },
  {
    "text": "you just save a few and and I think it just makes it a bit harder to",
    "start": "1309799",
    "end": "1317360"
  },
  {
    "text": "read so uh idioms like this I think you should just accept them",
    "start": "1317360",
    "end": "1323360"
  },
  {
    "text": "um as they are but this one is quite nice because that also means you can change",
    "start": "1323360",
    "end": "1329960"
  },
  {
    "text": "the number of elements of course but you can also change the type and it would just work",
    "start": "1329960",
    "end": "1335059"
  },
  {
    "text": "so going from into short some machines that's the same size but on my machine",
    "start": "1335059",
    "end": "1340220"
  },
  {
    "text": "it's different size um and uh I don't need to care because",
    "start": "1340220",
    "end": "1345679"
  },
  {
    "text": "this calculation takes care of that oh I don't need",
    "start": "1345679",
    "end": "1352539"
  },
  {
    "text": "and then I go further with this one now we come to another learning moment",
    "start": "1352640",
    "end": "1358220"
  },
  {
    "text": "it is Con common well we have kind of a integer assigned integers and signed",
    "start": "1358220",
    "end": "1365780"
  },
  {
    "text": "integer yeah find Long unsigned long we have sine short and signed short there",
    "start": "1365780",
    "end": "1370820"
  },
  {
    "text": "is common to think that there are just two chart types there isn't there are",
    "start": "1370820",
    "end": "1376880"
  },
  {
    "text": "three you have unsigned Char you have sign chart and you have char",
    "start": "1376880",
    "end": "1383919"
  },
  {
    "text": "and this is actually quite important because Char is kind of different from anything else",
    "start": "1384380",
    "end": "1391720"
  },
  {
    "text": "um Char is Implement uh it's um implementation",
    "start": "1391760",
    "end": "1398780"
  },
  {
    "text": "Define if it's signed or not you can switch it on on the during",
    "start": "1399020",
    "end": "1406100"
  },
  {
    "text": "completion time for example and you often shouldn't care whether Char is signed or unsigned",
    "start": "1406100",
    "end": "1414440"
  },
  {
    "text": "if you need to care whether it's on or unsigned you need to be explicit about it and the the rule of thumb is that use",
    "start": "1414440",
    "end": "1422240"
  },
  {
    "text": "if you are really wanting an 8-bit integer",
    "start": "1422240",
    "end": "1427400"
  },
  {
    "text": "you should use assigned and bit integer you see you",
    "start": "1427400",
    "end": "1432620"
  },
  {
    "text": "should use signed jar and if you want to then it's unfined 8-bit and sure you see you should use some unsigned chart if",
    "start": "1432620",
    "end": "1439880"
  },
  {
    "text": "you are dealing with letters characters the alphabet and so on Oscar",
    "start": "1439880",
    "end": "1446320"
  },
  {
    "text": "[Music] um then Char is the one to use",
    "start": "1446320",
    "end": "1452200"
  },
  {
    "text": "hello",
    "start": "1453740",
    "end": "1456280"
  },
  {
    "text": "making some space because what I'm going to do now is to extract the function",
    "start": "1461120",
    "end": "1467960"
  },
  {
    "text": "my pictures it looks like",
    "start": "1467960",
    "end": "1475159"
  },
  {
    "text": "I have created a function that takes uh characterizing all right",
    "start": "1475159",
    "end": "1483260"
  },
  {
    "text": "and then I find the size of that phone and I print that that isn't what happens yeah",
    "start": "1483260",
    "end": "1489820"
  },
  {
    "text": "this might give you help",
    "start": "1493460",
    "end": "1497080"
  },
  {
    "text": "typically almost 32-bits architecture you will get help",
    "start": "1500120",
    "end": "1505280"
  },
  {
    "text": "but on 64-bit architecture it might get much worse",
    "start": "1505280",
    "end": "1512799"
  },
  {
    "text": "because now you're stepping into undefined Behavior and on undefined Behavior Anything Can",
    "start": "1515840",
    "end": "1523460"
  },
  {
    "text": "Happen kind of the universe and the rules of the universe just breaks down",
    "start": "1523460",
    "end": "1528919"
  },
  {
    "text": "attempts to reason about undefined Behavior usually futile",
    "start": "1528919",
    "end": "1534559"
  },
  {
    "text": "and not very healthy but at the same time it is interesting",
    "start": "1534559",
    "end": "1539900"
  },
  {
    "text": "to see what computers do though so I tend to live slightly outside of of",
    "start": "1539900",
    "end": "1546080"
  },
  {
    "text": "defined behavior when preparing more talks and other things and then I try to stay slightly on the inside when I do",
    "start": "1546080",
    "end": "1552980"
  },
  {
    "text": "really work but uh yes that could certainly happen the thing that you see on the bottom",
    "start": "1552980",
    "end": "1558440"
  },
  {
    "text": "there",
    "start": "1558440",
    "end": "1560860"
  },
  {
    "text": "the problem I think is this one and it's it's kind of a syntactical thing that is",
    "start": "1567200",
    "end": "1574220"
  },
  {
    "text": "deceiving you and us because there is no way to transfer",
    "start": "1574220",
    "end": "1582100"
  },
  {
    "text": "arrays like this and see so it looks like it's an array but it is",
    "start": "1582100",
    "end": "1589220"
  },
  {
    "text": "actually a pointer that you're getting and that is the reason why I recommend",
    "start": "1589220",
    "end": "1595659"
  },
  {
    "text": "always and I try to be good myself",
    "start": "1595659",
    "end": "1601220"
  },
  {
    "text": "to always do this and not try to use the square bracket as",
    "start": "1601220",
    "end": "1607700"
  },
  {
    "text": "some kind of Lane documentation um be honest about what it is then it's",
    "start": "1607700",
    "end": "1614419"
  },
  {
    "text": "probably much easier to see but this doesn't work",
    "start": "1614419",
    "end": "1620360"
  },
  {
    "text": "at all so with that insight",
    "start": "1620360",
    "end": "1628220"
  },
  {
    "text": "you probably understand that you need to put this calculation on the outside and then",
    "start": "1628220",
    "end": "1634760"
  },
  {
    "text": "you need to pass this as an argument to the function",
    "start": "1634760",
    "end": "1639860"
  },
  {
    "text": "and this is an acceptable way of doing it now we have using a pattern or",
    "start": "1639860",
    "end": "1648020"
  },
  {
    "text": "of passing the base base pointer and then we pass the length",
    "start": "1648020",
    "end": "1653779"
  },
  {
    "text": "of that array that gives me another one I think this",
    "start": "1653779",
    "end": "1660500"
  },
  {
    "text": "is a decent piece of code",
    "start": "1660500",
    "end": "1663640"
  },
  {
    "text": "there was yesterday an argument about this one and I have followed that",
    "start": "1665840",
    "end": "1671120"
  },
  {
    "text": "argument about this one for at least 15 years",
    "start": "1671120",
    "end": "1677240"
  },
  {
    "text": "um it's not very common in C generally code basis and C to",
    "start": "1677240",
    "end": "1684559"
  },
  {
    "text": "um to use an equal in this case it's perfectly okay of course it gives",
    "start": "1684559",
    "end": "1691340"
  },
  {
    "text": "the rights result um of course",
    "start": "1691340",
    "end": "1696679"
  },
  {
    "text": "um but there is something in the traditional sea that it's less",
    "start": "1696679",
    "end": "1702140"
  },
  {
    "text": "than and at one point this must have been 10 years ago so it probably changed since then someone",
    "start": "1702140",
    "end": "1709340"
  },
  {
    "text": "pointed out to me that well compilers when they're compiling code",
    "start": "1709340",
    "end": "1714740"
  },
  {
    "text": "they typically look for patterns and that I can optimize",
    "start": "1714740",
    "end": "1721400"
  },
  {
    "text": "and he made me aware that one compiler was working with",
    "start": "1721400",
    "end": "1726620"
  },
  {
    "text": "didn't recognize this Loop while if you have less than it optimized",
    "start": "1726620",
    "end": "1731900"
  },
  {
    "text": "the loop so he won the argument I lost",
    "start": "1731900",
    "end": "1738760"
  },
  {
    "text": "however if you are into C plus plus but this is the way to",
    "start": "1738760",
    "end": "1745059"
  },
  {
    "text": "walk through the way to end an iteration for many good reasons so you can there",
    "start": "1745059",
    "end": "1752000"
  },
  {
    "text": "you can see often you can see whether people come from a C plus plus background into the code base or from a",
    "start": "1752000",
    "end": "1757940"
  },
  {
    "text": "C background when we call this but I will leave it there for a while because I'm going to be more inspired by",
    "start": "1757940",
    "end": "1765200"
  },
  {
    "text": "C plus funny fact actually I have been doing",
    "start": "1765200",
    "end": "1770659"
  },
  {
    "text": "both Z Plus and C for many many years and for some reason whenever I give a",
    "start": "1770659",
    "end": "1776480"
  },
  {
    "text": "talk about C people assume that I hate C plus plus and when I do talk about C",
    "start": "1776480",
    "end": "1781580"
  },
  {
    "text": "plus plus people assume that I hate C and I find that fascinating uh I do",
    "start": "1781580",
    "end": "1787880"
  },
  {
    "text": "other program languages as well I also teach python for example and uh and they think I hate CMZ",
    "start": "1787880",
    "end": "1795620"
  },
  {
    "text": "but I'm um I think I'm more like people working in the kindergarten the teachers I love every kid they are just different",
    "start": "1795620",
    "end": "1804580"
  },
  {
    "text": "I also love C but I like to do see in the sea away when I do c another C plus",
    "start": "1804620",
    "end": "1811159"
  },
  {
    "text": "plus one I do C plus plus and so on but sometimes I allow myself to be inspired and I try out IDs from C plus",
    "start": "1811159",
    "end": "1819679"
  },
  {
    "text": "plus also in in C and",
    "start": "1819679",
    "end": "1825759"
  },
  {
    "text": "so yeah maybe I switched that one back to prepare for the next step I'm going",
    "start": "1826460",
    "end": "1832100"
  },
  {
    "text": "to do which is to",
    "start": "1832100",
    "end": "1838220"
  },
  {
    "text": "calculate the beginning and the end of this array",
    "start": "1838220",
    "end": "1843799"
  },
  {
    "text": "and then change the loop so that instead of indexing into an",
    "start": "1843799",
    "end": "1850399"
  },
  {
    "text": "array I start with a pointer to the beginning and I iterate till it points to the end",
    "start": "1850399",
    "end": "1858620"
  },
  {
    "text": "and note that is one past sorry",
    "start": "1858620",
    "end": "1864158"
  },
  {
    "text": "and then I dereferenced it right around I use picture now this one passed diary",
    "start": "1864799",
    "end": "1873200"
  },
  {
    "text": "is a very important thing also in C and of course in simple Plus",
    "start": "1873200",
    "end": "1880240"
  },
  {
    "text": "you shall be able to calculate one address past any array it says in the",
    "start": "1880240",
    "end": "1887000"
  },
  {
    "text": "standard um and that also means for example the compiler is not allowed probably not",
    "start": "1887000",
    "end": "1893179"
  },
  {
    "text": "allowed to put an object in a very far end of",
    "start": "1893179",
    "end": "1899000"
  },
  {
    "text": "the memory so that you would get wrapping or an overflow because pointers overflow by",
    "start": "1899000",
    "end": "1905419"
  },
  {
    "text": "the way they don't wrap pointers overflow um so that the if you calculate the",
    "start": "1905419",
    "end": "1912260"
  },
  {
    "text": "address they have to leave one compute the addressable elements behind",
    "start": "1912260",
    "end": "1919460"
  },
  {
    "text": "however of course it can't be reference it so but this pattern of finding the",
    "start": "1919460",
    "end": "1924860"
  },
  {
    "text": "beginning and ends and the end is one Beyond it's very common in C plus plus and um",
    "start": "1924860",
    "end": "1931880"
  },
  {
    "text": "yeah you can also see and in this case we realize that maybe",
    "start": "1931880",
    "end": "1937340"
  },
  {
    "text": "we should instead of doing the work of sanding the base and the length maybe we",
    "start": "1937340",
    "end": "1942620"
  },
  {
    "text": "should just put them into",
    "start": "1942620",
    "end": "1947659"
  },
  {
    "text": "like this the jars from beginning to that",
    "start": "1947659",
    "end": "1953179"
  },
  {
    "text": "and while I'm on the track of being inspired by C plus plus",
    "start": "1953179",
    "end": "1958659"
  },
  {
    "text": "see if we can do some have some fun with this one instead of my pictures maybe I can do my",
    "start": "1962480",
    "end": "1970399"
  },
  {
    "text": "forage so that I send in the beginning and the",
    "start": "1970399",
    "end": "1976100"
  },
  {
    "text": "end and I also send in a pointer to function and do for each element",
    "start": "1976100",
    "end": "1982539"
  },
  {
    "text": "apply this unary int function",
    "start": "1982539",
    "end": "1987820"
  },
  {
    "text": "and what I sound then is the chart",
    "start": "1987820",
    "end": "1992960"
  },
  {
    "text": "now you need to be a bit careful about sending in this taking the address of",
    "start": "1992960",
    "end": "2000580"
  },
  {
    "text": "of functions especially Library functions",
    "start": "2000580",
    "end": "2006658"
  },
  {
    "text": "and I didn't have time to actually go in and check the wording outside it's just from my memory but I think the wording",
    "start": "2007000",
    "end": "2013840"
  },
  {
    "text": "is around that it is acceptable for the compiler to use um",
    "start": "2013840",
    "end": "2019659"
  },
  {
    "text": "well a date of course they don't mention macros but that you should be careful about the taking pointers is anyone that",
    "start": "2019659",
    "end": "2026380"
  },
  {
    "text": "have done remember that phrase in their head",
    "start": "2026380",
    "end": "2030720"
  },
  {
    "text": "um for example the the is um is Alpha is white space IF function",
    "start": "2032919",
    "end": "2038559"
  },
  {
    "text": "does these kind of uh they are very often macros so if you try to send them",
    "start": "2038559",
    "end": "2043659"
  },
  {
    "text": "in like this I'm not sure what the compiler will do they will probably find that you're trying to do that address",
    "start": "2043659",
    "end": "2049540"
  },
  {
    "text": "for it and then figure out how to compensate for it but at least you should be a bit careful about this but",
    "start": "2049540",
    "end": "2055599"
  },
  {
    "text": "it worked here works for me it's uh taken hello for that one",
    "start": "2055599",
    "end": "2064080"
  },
  {
    "text": "let's rewind well that's the undo symbol isn't it uh undo this one because",
    "start": "2064899",
    "end": "2070658"
  },
  {
    "text": "I will do another attempt of going in the C plus plus Direction um",
    "start": "2070659",
    "end": "2075878"
  },
  {
    "text": "and then I will give an argument for why you shouldn't do that let's rewind",
    "start": "2075879",
    "end": "2081460"
  },
  {
    "text": "this is back to the code that we had now there is",
    "start": "2081460",
    "end": "2088300"
  },
  {
    "text": "another way and here we all have a base on the length there is another way we",
    "start": "2088300",
    "end": "2093700"
  },
  {
    "text": "can communicate what we can send over a pointer and and work with it without knowing exactly how",
    "start": "2093700",
    "end": "2100720"
  },
  {
    "text": "big it is and that is if we do a Convention of adding zero in the end of",
    "start": "2100720",
    "end": "2106240"
  },
  {
    "text": "this particular array and then check our iterator you can then check for that zero so that it knows",
    "start": "2106240",
    "end": "2113560"
  },
  {
    "text": "when to stop iterating",
    "start": "2113560",
    "end": "2116640"
  },
  {
    "text": "and when we do that we don't need the and anymore here we don't need to do the size calculations as we are done we",
    "start": "2118839",
    "end": "2126160"
  },
  {
    "text": "don't need to pass the length into the function so we can get rid of that",
    "start": "2126160",
    "end": "2132400"
  },
  {
    "text": "and it says hello it's by surprise and of course this one is a bit too much",
    "start": "2132400",
    "end": "2140500"
  },
  {
    "text": "because that's exactly what it would say if you just do you reference it as well so you don't",
    "start": "2140500",
    "end": "2146380"
  },
  {
    "text": "need to say unequal zero um depends who you're communicating with",
    "start": "2146380",
    "end": "2153280"
  },
  {
    "text": "but if you're communicating with compilers and other programmers you probably don't want to do that",
    "start": "2153280",
    "end": "2159700"
  },
  {
    "text": "um so uh this is um next time an exact way of communicating and a very",
    "start": "2159700",
    "end": "2166359"
  },
  {
    "text": "acceptable way of doing it okay but um when we are shortening things like",
    "start": "2166359",
    "end": "2172240"
  },
  {
    "text": "this maybe we should shorten it even more",
    "start": "2172240",
    "end": "2177599"
  },
  {
    "text": "this is also an idiom this is how code looks like if you read",
    "start": "2179560",
    "end": "2185380"
  },
  {
    "text": "Corning and Richie this is how code looks like if you read code C code written by experienced",
    "start": "2185380",
    "end": "2192579"
  },
  {
    "text": "people it's should just be something that we should be able to read",
    "start": "2192579",
    "end": "2198579"
  },
  {
    "text": "and appreciate as it is instead of wishing that it was different",
    "start": "2198579",
    "end": "2203740"
  },
  {
    "text": "so um yeah I'll leave it like that I also need this green space and so on so for the",
    "start": "2203740",
    "end": "2209859"
  },
  {
    "text": "rest of exercises so you will see a lot of picture I will not change that one much for the next few pillows",
    "start": "2209859",
    "end": "2218380"
  },
  {
    "text": "but I collect and I'll open up",
    "start": "2222099",
    "end": "2225599"
  },
  {
    "text": "oh it's time to reveal what are these magic numbers what could",
    "start": "2227680",
    "end": "2234760"
  },
  {
    "text": "it be well they are of course asking uh representations of these same letters so",
    "start": "2234760",
    "end": "2243339"
  },
  {
    "text": "what you're looking at here are integers uh well are integer literals these are character",
    "start": "2243339",
    "end": "2250900"
  },
  {
    "text": "literals um that is now initializing this array for",
    "start": "2250900",
    "end": "2258880"
  },
  {
    "text": "us used to initialize this array for us",
    "start": "2258880",
    "end": "2263338"
  },
  {
    "text": "and this what you see here is exactly what you get if you do this",
    "start": "2264400",
    "end": "2271480"
  },
  {
    "text": "now maybe unknown facts well not so common knowledge is that c doesn't",
    "start": "2271480",
    "end": "2277720"
  },
  {
    "text": "support a string type at all C has Aries she has characters it has",
    "start": "2277720",
    "end": "2283180"
  },
  {
    "text": "some support around literals and a few extra things but it doesn't",
    "start": "2283180",
    "end": "2288280"
  },
  {
    "text": "have a string type and people are often dreaming about string types and mind yes it will never",
    "start": "2288280",
    "end": "2295119"
  },
  {
    "text": "happen but I've been wrong before",
    "start": "2295119",
    "end": "2300940"
  },
  {
    "text": "um but I don't think we will have a string type ever in C",
    "start": "2300940",
    "end": "2306119"
  },
  {
    "text": "you might build it yourself though but uh but I don't think you will have we will have one",
    "start": "2306700",
    "end": "2313260"
  },
  {
    "text": "it says hello very important to know now is that the",
    "start": "2313300",
    "end": "2320740"
  },
  {
    "text": "size of a has changed well it's it it looks like it might be",
    "start": "2320740",
    "end": "2327040"
  },
  {
    "text": "just six characters here but there is the seventh character implicitly",
    "start": "2327040",
    "end": "2332859"
  },
  {
    "text": "so when you create an array out of this then you might be surprised that there it's",
    "start": "2332859",
    "end": "2340780"
  },
  {
    "text": "now seven well you shouldn't be but but maybe you get caught once in a while to",
    "start": "2340780",
    "end": "2346119"
  },
  {
    "text": "calculate the wrong size off is not really good for calculating",
    "start": "2346119",
    "end": "2351460"
  },
  {
    "text": "um working on strings anyway oh by the way give me a chance to show that that view that is the portable way of",
    "start": "2351460",
    "end": "2358900"
  },
  {
    "text": "printing out size t so if until actually I don't remember",
    "start": "2358900",
    "end": "2365380"
  },
  {
    "text": "was which standard but before a certain",
    "start": "2365380",
    "end": "2370720"
  },
  {
    "text": "standard it was really difficult to do use printer and and size T for example",
    "start": "2370720",
    "end": "2376180"
  },
  {
    "text": "because when you compile it on a 32-bit machine it was typically different from a",
    "start": "2376180",
    "end": "2381280"
  },
  {
    "text": "64-bit machine and uh but we now have portable way of printing out",
    "start": "2381280",
    "end": "2386980"
  },
  {
    "text": "a size t unsigned integer",
    "start": "2386980",
    "end": "2394020"
  },
  {
    "text": "oh by the way here's another kind of discussion that sometimes happens",
    "start": "2394960",
    "end": "2400900"
  },
  {
    "text": "and it's this one shall we have braces braces is better",
    "start": "2400900",
    "end": "2406599"
  },
  {
    "text": "no this is this is the this is the keyword sizes of the keyboard operator",
    "start": "2406599",
    "end": "2413859"
  },
  {
    "text": "no sorry the size of operator and it has this nice feature that it can",
    "start": "2413859",
    "end": "2420339"
  },
  {
    "text": "only work on objects it cannot work on types so if you want to know the size of the type you have to put the braces in",
    "start": "2420339",
    "end": "2427420"
  },
  {
    "text": "but if you take size of an object you don't need the braces",
    "start": "2427420",
    "end": "2432520"
  },
  {
    "text": "and you shouldn't like braces so uh so therefore prefer to take size of objects",
    "start": "2432520",
    "end": "2438579"
  },
  {
    "text": "instead of size of types um it's usually makes it a more",
    "start": "2438579",
    "end": "2446160"
  },
  {
    "text": "yeah better program if the if the objects change then size",
    "start": "2447160",
    "end": "2453520"
  },
  {
    "text": "of calculates correctly if the object change then if you have specified size of instant it will still be size of it",
    "start": "2453520",
    "end": "2460300"
  },
  {
    "text": "for example then they might argue no but I won't",
    "start": "2460300",
    "end": "2466480"
  },
  {
    "text": "press this anyway yeah you can have as many civilians I say",
    "start": "2466480",
    "end": "2471540"
  },
  {
    "text": "that works also all right let's clean up the code",
    "start": "2472119",
    "end": "2478319"
  },
  {
    "text": "and go to something completely different",
    "start": "2478960",
    "end": "2483480"
  },
  {
    "text": "um it was difficult to make the transitions perfect here so I'm just",
    "start": "2485260",
    "end": "2490780"
  },
  {
    "text": "showing the code and then I'll switch over to something else but what I'm trying to do here is to",
    "start": "2490780",
    "end": "2499300"
  },
  {
    "text": "create the situation where we have some noise in the string dots",
    "start": "2499300",
    "end": "2504940"
  },
  {
    "text": "and I have written a small removed off I hope it's",
    "start": "2504940",
    "end": "2511359"
  },
  {
    "text": "bug free that is basically going through this",
    "start": "2511359",
    "end": "2516579"
  },
  {
    "text": "string and every time it is not the dots then it's copying it",
    "start": "2516579",
    "end": "2523119"
  },
  {
    "text": "into into itself while the Sentinel is always moving",
    "start": "2523119",
    "end": "2529900"
  },
  {
    "text": "forward searching for new things that are not Bots and eventually we zero",
    "start": "2529900",
    "end": "2535720"
  },
  {
    "text": "terminate the string that we are given and uh that works",
    "start": "2535720",
    "end": "2543040"
  },
  {
    "text": "and this is a good time to talk about const if you are in a code base that do this",
    "start": "2543040",
    "end": "2552280"
  },
  {
    "text": "in my opinion correctly and always I'm consistently then when",
    "start": "2552280",
    "end": "2558220"
  },
  {
    "text": "you see a function that takes a cons to comms pointer",
    "start": "2558220",
    "end": "2563740"
  },
  {
    "text": "then it's not it's not intended to kind of",
    "start": "2563740",
    "end": "2569380"
  },
  {
    "text": "change it in any way it's just going to refer to and read it obviously",
    "start": "2569380",
    "end": "2575020"
  },
  {
    "text": "but and that's obvious of course since it's the cause but that also means whenever you see a function that is a",
    "start": "2575020",
    "end": "2582460"
  },
  {
    "text": "non-comp's pointer it's basically a documentation saying I",
    "start": "2582460",
    "end": "2587980"
  },
  {
    "text": "am going to change your objects so uh if you care for it take a copy of it first",
    "start": "2587980",
    "end": "2593200"
  },
  {
    "text": "because I am probably going to change your uh your object and this is something that some kind of",
    "start": "2593200",
    "end": "2600940"
  },
  {
    "text": "communication that you get if you're consistent about it if you're not consistent about it and it's like",
    "start": "2600940",
    "end": "2607180"
  },
  {
    "text": "yeah I don't care instead of construct then you are basically removing that way",
    "start": "2607180",
    "end": "2614560"
  },
  {
    "text": "you're communicating so people would have to look in the documentation and maybe read your code and to figure out",
    "start": "2614560",
    "end": "2620859"
  },
  {
    "text": "whether it's going to change it or not",
    "start": "2620859",
    "end": "2625318"
  },
  {
    "text": "um let's this one let's now",
    "start": "2626980",
    "end": "2633940"
  },
  {
    "text": "try to be inspired once again and instead of uh just returning voids",
    "start": "2633940",
    "end": "2641200"
  },
  {
    "text": "let's return the pointer that we can get",
    "start": "2641200",
    "end": "2647800"
  },
  {
    "text": "with intention so that you can put it into these kind of sequences or some",
    "start": "2647800",
    "end": "2653980"
  },
  {
    "text": "people call them train wrecks um it is tempting to do that it's it's",
    "start": "2653980",
    "end": "2660640"
  },
  {
    "text": "fun to try to make C look like kind of",
    "start": "2660640",
    "end": "2666280"
  },
  {
    "text": "those languages that can build up kind of pipelines and large train wrecks",
    "start": "2666280",
    "end": "2671680"
  },
  {
    "text": "uh going on but my experience is that",
    "start": "2671680",
    "end": "2678700"
  },
  {
    "text": "just works for him for him very narrow situation",
    "start": "2678700",
    "end": "2685960"
  },
  {
    "text": "and um you probably don't want to go down that road with the sea uh C is not",
    "start": "2685960",
    "end": "2694740"
  },
  {
    "text": "it's not inviting to to this kind of clever things",
    "start": "2694900",
    "end": "2700540"
  },
  {
    "text": "but while we are in this train wreck anyway why not uh do something really",
    "start": "2700540",
    "end": "2708220"
  },
  {
    "text": "ugly so that we get the chance to talk about it this one ugly",
    "start": "2708220",
    "end": "2716220"
  },
  {
    "text": "there is I I didn't change anything else there I just changed inside there you can see",
    "start": "2716560",
    "end": "2722859"
  },
  {
    "text": "the difference between that one and just inside the remove dots I just did this one it's doing exactly the same just to",
    "start": "2722859",
    "end": "2729400"
  },
  {
    "text": "prove that it's still printing hello uh what I've done here",
    "start": "2729400",
    "end": "2734800"
  },
  {
    "text": "um and yeah it's the talk is about silly way so saying hello so therefore I",
    "start": "2734800",
    "end": "2740020"
  },
  {
    "text": "allowing myself to do this and what I want to talk about here is",
    "start": "2740020",
    "end": "2745839"
  },
  {
    "text": "this comma operator the comma operator is not very often",
    "start": "2745839",
    "end": "2751420"
  },
  {
    "text": "used um well it sometimes in for Loops it used",
    "start": "2751420",
    "end": "2757540"
  },
  {
    "text": "but it's it's not very often used but you sometimes find cone bases where it",
    "start": "2757540",
    "end": "2762760"
  },
  {
    "text": "is often used and then it's easy this it is nice to be able to read this and",
    "start": "2762760",
    "end": "2769839"
  },
  {
    "text": "understand it and the key point about comma operators is that they introduce",
    "start": "2769839",
    "end": "2776440"
  },
  {
    "text": "sequence points so at this point",
    "start": "2776440",
    "end": "2781900"
  },
  {
    "text": "there is a sequence point and and this expression is",
    "start": "2781900",
    "end": "2788680"
  },
  {
    "text": "sequence before that one so this is not undefined Behavior you can do several",
    "start": "2788680",
    "end": "2795160"
  },
  {
    "text": "updates of the same objects through those um",
    "start": "2795160",
    "end": "2801540"
  },
  {
    "text": "yeah using the common separator like this talking about sequence Point file right",
    "start": "2801640",
    "end": "2807040"
  },
  {
    "text": "this one is also introducing a sequence point and uh",
    "start": "2807040",
    "end": "2812200"
  },
  {
    "text": "and the shortcutting logical and operator is introduced in sequence points so that's the reason why we can",
    "start": "2812200",
    "end": "2818740"
  },
  {
    "text": "also read an update variables both before and after okay",
    "start": "2818740",
    "end": "2824020"
  },
  {
    "text": "there are just to be perhaps failed attempt to be funny",
    "start": "2824020",
    "end": "2831700"
  },
  {
    "text": "um I did the same thing here I'm actually no terminating the thing here uh that nobody cares about then I use",
    "start": "2831700",
    "end": "2838240"
  },
  {
    "text": "the comma operator and then I actually return the value of Q so it's always the",
    "start": "2838240",
    "end": "2844960"
  },
  {
    "text": "last element in the in the chain of comma operators there that is being returned",
    "start": "2844960",
    "end": "2851260"
  },
  {
    "text": "as a result from this expression okay",
    "start": "2851260",
    "end": "2856079"
  },
  {
    "text": "right and then and still just I have to remind myself I'm still just doing changes inside the",
    "start": "2856480",
    "end": "2863500"
  },
  {
    "text": "removed off there um this one I think",
    "start": "2863500",
    "end": "2870520"
  },
  {
    "text": "I would pass on my call radio it's it's idiomatic it's okay",
    "start": "2870520",
    "end": "2877300"
  },
  {
    "text": "this is how C code is often written and this is the type of code you find if",
    "start": "2877300",
    "end": "2885760"
  },
  {
    "text": "you read it's going to Richard for example and a lot of other well actually there isn't any other good books about C",
    "start": "2885760",
    "end": "2893760"
  },
  {
    "text": "well there is one and it came last year and that's the book I gave up to my",
    "start": "2893760",
    "end": "2900040"
  },
  {
    "text": "students I was teaching C earlier this week the new book by Robert C chord is",
    "start": "2900040",
    "end": "2905980"
  },
  {
    "text": "actually really good so um finally after how many years I don't know but",
    "start": "2905980",
    "end": "2912520"
  },
  {
    "text": "this effective C by Robert C code I can recommend it I've read it very very",
    "start": "2912520",
    "end": "2917920"
  },
  {
    "text": "carefully and um it's it is actually a good book so now we have two good books",
    "start": "2917920",
    "end": "2923619"
  },
  {
    "text": "about it right so this one is well yeah something",
    "start": "2923619",
    "end": "2931720"
  },
  {
    "text": "to mention that yeah there's a small trick um when we are doing assignments",
    "start": "2931720",
    "end": "2938260"
  },
  {
    "text": "uh in the expression used to find the condition of the winder it's uh often nice to put",
    "start": "2938260",
    "end": "2945520"
  },
  {
    "text": "these braces around compilers are now often encouraging you to do so",
    "start": "2945520",
    "end": "2950740"
  },
  {
    "text": "um and uh and it kind of communicates",
    "start": "2950740",
    "end": "2956859"
  },
  {
    "text": "but uh yeah I know it's a single um that is an assignment operator that",
    "start": "2956859",
    "end": "2963400"
  },
  {
    "text": "is inside instead of comparing some operator so it's a nice way of communicating",
    "start": "2963400",
    "end": "2969040"
  },
  {
    "text": "um sometimes I see this style where you put kind of 42 equal equal a and and so",
    "start": "2969040",
    "end": "2974260"
  },
  {
    "text": "on and you kind of the older style of writing collisions I don't like that",
    "start": "2974260",
    "end": "2979780"
  },
  {
    "text": "um [Music] that you have other problems then if that's what you feel it's a good idea so",
    "start": "2979780",
    "end": "2986560"
  },
  {
    "text": "this one is uh also giving hello",
    "start": "2986560",
    "end": "2990660"
  },
  {
    "text": "oh by the way one thing even in C I I try to in C plus plus I",
    "start": "2992200",
    "end": "3001380"
  },
  {
    "text": "always teach don't do multiple declarations on the same line",
    "start": "3001380",
    "end": "3008839"
  },
  {
    "text": "um try to do that in in C as well so I would normally not to recommend this way of writing it but at the same time it is",
    "start": "3008880",
    "end": "3015720"
  },
  {
    "text": "so common and it's kind of part of the sea tradition so yeah",
    "start": "3015720",
    "end": "3022040"
  },
  {
    "text": "maybe maybe not right something completely different",
    "start": "3022200",
    "end": "3027480"
  },
  {
    "text": "here uh notice that I have swapped two characters in this string now",
    "start": "3027480",
    "end": "3033180"
  },
  {
    "text": "and I need to um swap them and therefore that gives me a chance to write",
    "start": "3033180",
    "end": "3039540"
  },
  {
    "text": "a my swap function that takes pointers to two elements",
    "start": "3039540",
    "end": "3046440"
  },
  {
    "text": "two characters and use this traditional swapping thingy and this is uh kind of",
    "start": "3046440",
    "end": "3055500"
  },
  {
    "text": "idiomatic way of doing it and see and here is a nice way of taking the",
    "start": "3055500",
    "end": "3062339"
  },
  {
    "text": "address of a particular element you can do this in many other ways you can say a plus 0 and a plus two for example that",
    "start": "3062339",
    "end": "3069960"
  },
  {
    "text": "will give you the same thing I kind of feel this is slightly better because it's communicating that you're",
    "start": "3069960",
    "end": "3076140"
  },
  {
    "text": "taking address of that particular element and uh",
    "start": "3076140",
    "end": "3081720"
  },
  {
    "text": "but at the same time it is very common to do it the other way as well",
    "start": "3081720",
    "end": "3086900"
  },
  {
    "text": "hello and one more here I have written my charcoal",
    "start": "3088800",
    "end": "3097140"
  },
  {
    "text": "that takes two void pointers then cast them into Char construct pointers",
    "start": "3097140",
    "end": "3103079"
  },
  {
    "text": "and use that in an expression that is being returned and this is exactly the kind of function that Q sort wants so in",
    "start": "3103079",
    "end": "3111000"
  },
  {
    "text": "this case I had messed up this string Beyond I wouldn't be able to figure out",
    "start": "3111000",
    "end": "3119579"
  },
  {
    "text": "how I could sort it out myself with swap so therefore I use qsort to do it and",
    "start": "3119579",
    "end": "3125040"
  },
  {
    "text": "notice that I'm here giving at the base of this one and I'm giving the string length minus one so that it doesn't sort",
    "start": "3125040",
    "end": "3131880"
  },
  {
    "text": "a new line for me I say that every element that is sorting because Q sort is very um",
    "start": "3131880",
    "end": "3138720"
  },
  {
    "text": "agnostic in the types so you have to basically say how big is the type maybe I should not use the size of an element",
    "start": "3138720",
    "end": "3145800"
  },
  {
    "text": "there instead of writing one by me and and then here we are uh giving",
    "start": "3145800",
    "end": "3152880"
  },
  {
    "text": "the address to a function for qsort to use to compare every",
    "start": "3152880",
    "end": "3158400"
  },
  {
    "text": "element that is finding um it works yeah",
    "start": "3158400",
    "end": "3164640"
  },
  {
    "text": "here I have um because in C uh 11.",
    "start": "3164640",
    "end": "3170940"
  },
  {
    "text": "before C11 you couldn't do concurrency or move the threading and",
    "start": "3170940",
    "end": "3176520"
  },
  {
    "text": "see kind of pure C you could you could ask the runtime you",
    "start": "3176520",
    "end": "3182940"
  },
  {
    "text": "could import something from the operating system and do threading but you couldn't do portable threading in C",
    "start": "3182940",
    "end": "3187980"
  },
  {
    "text": "but after C11 you can and uh what I'm trying to illustrate",
    "start": "3187980",
    "end": "3194940"
  },
  {
    "text": "here is basically um kind of typewriter thingy",
    "start": "3194940",
    "end": "3200700"
  },
  {
    "text": "so that the output from this one it delays randomly",
    "start": "3200700",
    "end": "3207240"
  },
  {
    "text": "so that it looks like a typewriter when it writes out so it looks like this",
    "start": "3207240",
    "end": "3213980"
  },
  {
    "text": "or something like that that was actually simulating but it works",
    "start": "3215160",
    "end": "3220680"
  },
  {
    "text": "now to something completely different I had actually planned to end the talk",
    "start": "3220680",
    "end": "3227460"
  },
  {
    "text": "here and ask can you turn off the camera another video recording and so on but then I decided an hour again it can be",
    "start": "3227460",
    "end": "3234000"
  },
  {
    "text": "on video as well because I am trying to repair the reputation I have of always",
    "start": "3234000",
    "end": "3239819"
  },
  {
    "text": "presenting undefined Behavior kind of thing and having fun with that but I couldn't resist",
    "start": "3239819",
    "end": "3246359"
  },
  {
    "text": "but first i'm going to show something that isn't undefined Behavior",
    "start": "3246359",
    "end": "3251760"
  },
  {
    "text": "and which is part of the intention of C the spirit of",
    "start": "3251760",
    "end": "3257280"
  },
  {
    "text": "C is to and then um",
    "start": "3257280",
    "end": "3263339"
  },
  {
    "text": "the main inspiration for C came from bcpl and Martin Richards",
    "start": "3263339",
    "end": "3269240"
  },
  {
    "text": "and Martin Richards had this philosophy of bcpl that I want to create a language",
    "start": "3269240",
    "end": "3274859"
  },
  {
    "text": "that is easy to compile but uh assume that programmers are clever people",
    "start": "3274859",
    "end": "3280800"
  },
  {
    "text": "a language that allows them to do whatever they want and that the compiler",
    "start": "3280800",
    "end": "3286319"
  },
  {
    "text": "should just be like a servant obeying the the programmer even when",
    "start": "3286319",
    "end": "3292680"
  },
  {
    "text": "confronted with apparent nonsense and and this is apparent nonsense maybe",
    "start": "3292680",
    "end": "3300559"
  },
  {
    "text": "but it's perfectly okay and in this case I I have decided and",
    "start": "3300559",
    "end": "3306839"
  },
  {
    "text": "the result might be slightly different from different machines as well but on my machine",
    "start": "3306839",
    "end": "3313140"
  },
  {
    "text": "the prince hello um all right so that is of course this can",
    "start": "3313140",
    "end": "3320280"
  },
  {
    "text": "be undefined behavior on certain environments and so on but it's it's within acceptable use of the language in",
    "start": "3320280",
    "end": "3326940"
  },
  {
    "text": "in my book but now we come to a relief cool one",
    "start": "3326940",
    "end": "3333619"
  },
  {
    "text": "I'm not sure if I wanted to show it to you all right I'm doing that anyway",
    "start": "3334920",
    "end": "3341520"
  },
  {
    "text": "I give you time to to read it and reflect on things and think about your",
    "start": "3341520",
    "end": "3347640"
  },
  {
    "text": "life as a programmer and just just give ourselves 30 seconds of",
    "start": "3347640",
    "end": "3353160"
  },
  {
    "text": "Silence while we're reading this",
    "start": "3353160",
    "end": "3356599"
  },
  {
    "text": "30 seconds long all right now 15 seconds should do",
    "start": "3363780",
    "end": "3370920"
  },
  {
    "text": "um what I've been doing here is that I",
    "start": "3370920",
    "end": "3376020"
  },
  {
    "text": "I've declared that there is a blue but I haven't given it a value",
    "start": "3376020",
    "end": "3381079"
  },
  {
    "text": "well that wouldn't actually matter if I did or not and then",
    "start": "3381180",
    "end": "3386760"
  },
  {
    "text": "I create a chart pointer unsung charcoalter",
    "start": "3386760",
    "end": "3392460"
  },
  {
    "text": "and I say to the compiler I know what I'm doing trust me trust me I'm a",
    "start": "3392460",
    "end": "3397740"
  },
  {
    "text": "programmer what could possibly go wrong so I take",
    "start": "3397740",
    "end": "3402960"
  },
  {
    "text": "um a pointer to the address of B and then a dereference that pointer and",
    "start": "3402960",
    "end": "3408059"
  },
  {
    "text": "put it to 42. then",
    "start": "3408059",
    "end": "3414480"
  },
  {
    "text": "attack if B is true I print and if it's not true then I print blue",
    "start": "3414480",
    "end": "3424079"
  },
  {
    "text": "now what do we think might happen here first of all this is undefined this is",
    "start": "3424079",
    "end": "3430980"
  },
  {
    "text": "kind of Beyond typical example of undefined Behavior but uh but something happens on",
    "start": "3430980",
    "end": "3438359"
  },
  {
    "text": "different machines and different compilers and I just checked it before the talk",
    "start": "3438359",
    "end": "3444480"
  },
  {
    "text": "and I could confirm what are both hoped and I kind of knew",
    "start": "3444480",
    "end": "3450000"
  },
  {
    "text": "what was going to happen because the clan compiler without optimization all of this is without",
    "start": "3450000",
    "end": "3456480"
  },
  {
    "text": "optimization the client compiler says no",
    "start": "3456480",
    "end": "3462720"
  },
  {
    "text": "the Intel compiler says hey",
    "start": "3462720",
    "end": "3469220"
  },
  {
    "text": "[Music] did anyone like to guess what GCC says",
    "start": "3469340",
    "end": "3474480"
  },
  {
    "text": "on this code of course thank you very much that was the end of",
    "start": "3474480",
    "end": "3481200"
  },
  {
    "text": "my talk",
    "start": "3481200",
    "end": "3483619"
  }
]