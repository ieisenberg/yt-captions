[
  {
    "text": "okay uh welcome everyone to this talk about the potential existential threat against",
    "start": "3240",
    "end": "9240"
  },
  {
    "text": "C++ um let's let me just start about with two words about me um to give you",
    "start": "9240",
    "end": "15719"
  },
  {
    "text": "my background I've been doing software development professionally for a little over 30 years most of that has been",
    "start": "15719",
    "end": "24000"
  },
  {
    "text": "C++ um so that has been fun I've really enjoyed",
    "start": "24000",
    "end": "29400"
  },
  {
    "text": "it most of the time uh I've also done work in other languages including rust",
    "start": "29400",
    "end": "34680"
  },
  {
    "text": "also for production so what I'm trying to get across is that I'm not some sort",
    "start": "34680",
    "end": "39840"
  },
  {
    "text": "of rust undercover agent trying to bash C++ uh this comes from experience",
    "start": "39840",
    "end": "47559"
  },
  {
    "text": "um the last 11 years has been at a company called Talus Norway and we do",
    "start": "47559",
    "end": "53079"
  },
  {
    "text": "secure Communications so for that time I've tried to make as secure secure uh C++",
    "start": "53079",
    "end": "61280"
  },
  {
    "text": "code as possible which is very hard at times um we are usually hiring we're not",
    "start": "61280",
    "end": "69479"
  },
  {
    "text": "hiring embedded people right now but if you check back in a while it might have changed it usually does so here's the",
    "start": "69479",
    "end": "76080"
  },
  {
    "text": "link if you need it uh I will try to publish the slides afterwards so don't worry if you don't get",
    "start": "76080",
    "end": "81680"
  },
  {
    "text": "this so what is this uh threat well we have a memory safety",
    "start": "81680",
    "end": "87479"
  },
  {
    "text": "problem um there's been a lot of statistic itics and service about this people can argue about the numbers um",
    "start": "87479",
    "end": "94200"
  },
  {
    "text": "and what sort of data that's relevant and so on but you can have a look at this if you like uh this percentage is",
    "start": "94200",
    "end": "101479"
  },
  {
    "text": "typically for stuff that has a lot of c and C++ content uh so have a look if you're",
    "start": "101479",
    "end": "107920"
  },
  {
    "text": "interested uh I won't Aug statistics here we can do that afterwards if you like",
    "start": "107920",
    "end": "113240"
  },
  {
    "text": "um little progress has been made on this it's been known for quite a while",
    "start": "113240",
    "end": "120320"
  },
  {
    "text": "and in many ways the language has not truly responded it's been modernized",
    "start": "120320",
    "end": "125640"
  },
  {
    "text": "generally but there hasn't been much work done specifically to make it safer beyond",
    "start": "125640",
    "end": "131720"
  },
  {
    "text": "that um and importantly it's hard to see any detectable change of priorities uh speed",
    "start": "131720",
    "end": "139000"
  },
  {
    "text": "still seems to be more important than safety and many of the easy fixes are not",
    "start": "139000",
    "end": "144360"
  },
  {
    "text": "made so are we Behaving Badly are we",
    "start": "144360",
    "end": "149519"
  },
  {
    "text": "acting in a in a responsible manner well are we fulfilling our responsibility to",
    "start": "149519",
    "end": "155920"
  },
  {
    "text": "society if you look at this from outside you might be tempted to say no and the dangerous thing about that is",
    "start": "155920",
    "end": "163040"
  },
  {
    "text": "that irresponsible professions will eventually be regulated and there are some signs that",
    "start": "163040",
    "end": "170959"
  },
  {
    "text": "this might be starting to happen uh some of you have seen this it's a report from November 22 by the",
    "start": "170959",
    "end": "178280"
  },
  {
    "text": "NSA about software memory safety and this caused quite a stir uh you can",
    "start": "178280",
    "end": "183560"
  },
  {
    "text": "have a little look at that if you",
    "start": "183560",
    "end": "186640"
  },
  {
    "text": "like so they basically want us to migrate away from C and C++",
    "start": "188840",
    "end": "196640"
  },
  {
    "text": "specifically um a while later uh the cyber security and infrastructure",
    "start": "196920",
    "end": "202120"
  },
  {
    "text": "Security Agency uh quite a mouthful published a report that backs this up",
    "start": "202120",
    "end": "207519"
  },
  {
    "text": "and they also got a lot of other organizations from around the world to coign this to add weight to",
    "start": "207519",
    "end": "215200"
  },
  {
    "text": "it um and then in December of last year",
    "start": "215200",
    "end": "220400"
  },
  {
    "text": "the NSA came out with another report which which turns up the heat quite a bit there's quite a lot lot of",
    "start": "220400",
    "end": "227480"
  },
  {
    "text": "text on this but this is a quote from the report and what they want organizations to do is to",
    "start": "227480",
    "end": "234159"
  },
  {
    "text": "write and publish a document with a strategy to move away from memory unsa",
    "start": "234159",
    "end": "239799"
  },
  {
    "text": "languages basically and well they urge us to do that and they also want us to name an",
    "start": "239799",
    "end": "247239"
  },
  {
    "text": "executive who shall be personally responsible for carrying out this",
    "start": "247239",
    "end": "253319"
  },
  {
    "text": "strategy yeah this is not vague this is almost as close to regulation as you can get without",
    "start": "253319",
    "end": "259280"
  },
  {
    "text": "actually doing it and then there's a report from the White House a little after that again uh",
    "start": "259280",
    "end": "266440"
  },
  {
    "text": "which sort of backs it up but it doesn't bring much new to the table except that they want to make security",
    "start": "266440",
    "end": "273280"
  },
  {
    "text": "measurable which is interesting because you can build stuff on that um so what are the next logical",
    "start": "273280",
    "end": "281320"
  },
  {
    "text": "steps well governments could come with requirements they could require us to",
    "start": "281320",
    "end": "288360"
  },
  {
    "text": "make this plan and follow it uh they could require us as suppliers to document the extent of unsafe languages",
    "start": "288360",
    "end": "295080"
  },
  {
    "text": "in our products um if they put out uh tenders",
    "start": "295080",
    "end": "301160"
  },
  {
    "text": "and we submit bids for that they could penalize us if we use unsafe",
    "start": "301160",
    "end": "306639"
  },
  {
    "text": "practices uh you could possibly see accountability and liability if you have a security breach and that causes",
    "start": "306639",
    "end": "312400"
  },
  {
    "text": "someone to lose money uh you could be liable for that uh finally prohibition I",
    "start": "312400",
    "end": "318160"
  },
  {
    "text": "don't think we will get there but you know it's it's the end State um there was also this which is a",
    "start": "318160",
    "end": "327240"
  },
  {
    "text": "report from Google which is quite interesting it's a good read uh I recommend you have a look at it if you are interested in this",
    "start": "327240",
    "end": "333919"
  },
  {
    "text": "topic um this seems a bit like an answer to to NSA is uh asking for a migration",
    "start": "333919",
    "end": "341400"
  },
  {
    "text": "plan um and the strategy they seem to outline or well they're considering",
    "start": "341400",
    "end": "347560"
  },
  {
    "text": "actually uh is to write new code in Rust uh to rewrite high-risk components",
    "start": "347560",
    "end": "354880"
  },
  {
    "text": "in Rust and to try to make the remaining C++ code as safe as possible uh it",
    "start": "354880",
    "end": "359960"
  },
  {
    "text": "mentions carbon uh but that does not seem to be part of the strategy as of yet um that's not because they don't",
    "start": "359960",
    "end": "366000"
  },
  {
    "text": "believe in carbon I'm sure but you know it will take a while for carbon to be ready and they have stuff they have to",
    "start": "366000",
    "end": "371440"
  },
  {
    "text": "fix now they don't have the luxury of waiting for a new language uh other ma players like",
    "start": "371440",
    "end": "378240"
  },
  {
    "text": "Microsoft putting rust in Windows uh migrating net internals to rust as far as I can tell and famously Linux has",
    "start": "378240",
    "end": "385759"
  },
  {
    "text": "just adopted rust as its second language um so you can try to draw some predictions",
    "start": "385759",
    "end": "393440"
  },
  {
    "text": "from this uh these are my personal ones uh yours might be different but I think",
    "start": "393440",
    "end": "399680"
  },
  {
    "text": "the era of memory unsafe languages is ending it's not the end but you know maybe the beginning of",
    "start": "399680",
    "end": "406000"
  },
  {
    "text": "it and I think that there will be no future",
    "start": "406000",
    "end": "411639"
  },
  {
    "text": "popular languages that are not memory safe I think that's",
    "start": "411639",
    "end": "416720"
  },
  {
    "text": "done so so why can't we just make C++ memory safe and you know what does",
    "start": "418319",
    "end": "425360"
  },
  {
    "text": "memory safe mean anyway well a a good definition is surprisingly difficult",
    "start": "425360",
    "end": "432680"
  },
  {
    "text": "um um there is this paper that you can have a look at uh it will take you deep down into computer science theory which",
    "start": "432680",
    "end": "439680"
  },
  {
    "text": "can be fun if you have the time and inclination uh but it's hard um and most of us will get by with",
    "start": "439680",
    "end": "447039"
  },
  {
    "text": "just an intuition about what isn't that's what we usually do and there are a few things that are obviously not",
    "start": "447039",
    "end": "453199"
  },
  {
    "text": "memory safe uh you know read and write out of bounds we've all done that that usually",
    "start": "453199",
    "end": "459000"
  },
  {
    "text": "goes under the heading spatial memory safety uh use a free temporal memory",
    "start": "459000",
    "end": "464960"
  },
  {
    "text": "safety uh using uninitialized values initialization safety popular topic on",
    "start": "464960",
    "end": "470599"
  },
  {
    "text": "on conferences like this um casting appointed to the wrong type goes usually",
    "start": "470599",
    "end": "476960"
  },
  {
    "text": "under the category type safety and so on iterator invalidation which is also an example of temporal memory safety dat",
    "start": "476960",
    "end": "484080"
  },
  {
    "text": "races thread safety we probably all fallen into that trap as well most of",
    "start": "484080",
    "end": "490319"
  },
  {
    "text": "us and then you have the big one anything else that is undefined Behavior you know undefined Behavior can",
    "start": "490319",
    "end": "497360"
  },
  {
    "text": "give you nasal demons and nasal demons are not memory safe so that's a big one",
    "start": "497360",
    "end": "504039"
  },
  {
    "text": "so what can we do with C++ to make a memory safe or something close to it",
    "start": "504039",
    "end": "509159"
  },
  {
    "text": "well it requires a safe subset somehow so what has to go and",
    "start": "509159",
    "end": "516159"
  },
  {
    "text": "I'll go through a few examples but wait oh that was that was silly uh yeah",
    "start": "516159",
    "end": "525399"
  },
  {
    "text": "we have to forbid poter arithmetic for one fundamentally and safe and range checking for out of",
    "start": "525399",
    "end": "532240"
  },
  {
    "text": "bounds I skipped a bit faster because that's when this comes wait we have rain",
    "start": "532240",
    "end": "538200"
  },
  {
    "text": "shaking in C++ actually even for the indexing",
    "start": "538200",
    "end": "544839"
  },
  {
    "text": "operator you just use this one you define G cxx",
    "start": "544839",
    "end": "550120"
  },
  {
    "text": "assertions so let's see a show of hands how many of you already knew",
    "start": "550120",
    "end": "555560"
  },
  {
    "text": "that okay and how many of you used that in",
    "start": "555800",
    "end": "562720"
  },
  {
    "text": "debug okay so about five and how many of you use that in production",
    "start": "563640",
    "end": "570120"
  },
  {
    "text": "there's one okay good that's it",
    "start": "570120",
    "end": "575720"
  },
  {
    "text": "right so what can we learn from that memory safety must be the",
    "start": "575720",
    "end": "582760"
  },
  {
    "text": "default if you make it opt in then people won't use",
    "start": "582760",
    "end": "589519"
  },
  {
    "text": "it plain and simple it needs to be opt in opt out means nobody uses",
    "start": "589519",
    "end": "595279"
  },
  {
    "text": "it uh I go into a bit more detail about things like that in my talk from last year if you're",
    "start": "595279",
    "end": "601879"
  },
  {
    "text": "interested uh temporal memory safety we need to get rid of old school",
    "start": "601959",
    "end": "607360"
  },
  {
    "text": "new and delete obviously but that doesn't pain anyone we just use small pointers",
    "start": "607360",
    "end": "613680"
  },
  {
    "text": "instead but it's not that simple um here's some simple code using unique pointer so we have a class A",
    "start": "617880",
    "end": "626120"
  },
  {
    "text": "which owns a b so their lifetimes are the same but then someone else needs to",
    "start": "626120",
    "end": "631399"
  },
  {
    "text": "communicate with B at times so Class C has a pointer to b a",
    "start": "631399",
    "end": "636839"
  },
  {
    "text": "dependency and if someone comes along and deletes a then B goes with it and if",
    "start": "636839",
    "end": "642959"
  },
  {
    "text": "you still have the C then it's left with a dangling reference so storing references or pointers in",
    "start": "642959",
    "end": "649800"
  },
  {
    "text": "members or globals is unsafe you can always come up with examples that break",
    "start": "649800",
    "end": "656399"
  },
  {
    "text": "everything so what to do prohibiting that well very difficult it breaks",
    "start": "657000",
    "end": "664240"
  },
  {
    "text": "everything uh you could use a rust borrow Checker maybe the only current thing",
    "start": "664240",
    "end": "669720"
  },
  {
    "text": "that works you don't want to go to garbage collection so this makes it very difficult to make the language",
    "start": "669720",
    "end": "676200"
  },
  {
    "text": "safe um you could say well use share pointer but that has its drawbacks too",
    "start": "676200",
    "end": "681800"
  },
  {
    "text": "it's a bit slower if that matters um but it also removes ownership semantics if it gets",
    "start": "681800",
    "end": "688600"
  },
  {
    "text": "very hard to about the lifetime of things you know how when does the be actually get",
    "start": "688600",
    "end": "694240"
  },
  {
    "text": "destroyed so it's not ideal and it gets worse storing references or pointers in",
    "start": "694240",
    "end": "701880"
  },
  {
    "text": "parameters or locals is also fundamentally unsafe simple example you have a",
    "start": "701880",
    "end": "708720"
  },
  {
    "text": "function that takes an A and that happens to be in a different translation unit you call the function to get a B",
    "start": "708720",
    "end": "716200"
  },
  {
    "text": "from a and then you call this whatever function on a which happens to delete the B and then you call the function on",
    "start": "716200",
    "end": "722880"
  },
  {
    "text": "B and boom you have a use off the free and the problem here is that you",
    "start": "722880",
    "end": "728320"
  },
  {
    "text": "store the reference locally for too long and the language allows that and there's",
    "start": "728320",
    "end": "734720"
  },
  {
    "text": "nothing that compiler can do about this um same thing almost iterator and",
    "start": "734720",
    "end": "742000"
  },
  {
    "text": "validation um you get an iterator to the beginning beginning of a vector you push back which means it can get real at and",
    "start": "742000",
    "end": "750000"
  },
  {
    "text": "then you reference boom now static analysis can detect some of this but",
    "start": "750000",
    "end": "755440"
  },
  {
    "text": "what if you pass this iterator to another translation unit then it can't very difficult to",
    "start": "755440",
    "end": "763079"
  },
  {
    "text": "analyze so iterators invite UB just as pointers do and are also fundamentally",
    "start": "763079",
    "end": "768240"
  },
  {
    "text": "unsafe and to fix that you probably need a new standard",
    "start": "768240",
    "end": "774839"
  },
  {
    "text": "Library so for temporal the problems tend to span translation",
    "start": "776880",
    "end": "782600"
  },
  {
    "text": "units and makes them virtually undetectable by the compiler or static analysis without language changes or",
    "start": "782600",
    "end": "790920"
  },
  {
    "text": "restrictions so can we be Memory safe well it requires some very difficult things we",
    "start": "790920",
    "end": "797920"
  },
  {
    "text": "need a borrow Checker of some sort or we need to forbid references and pointers which breaks",
    "start": "797920",
    "end": "803560"
  },
  {
    "text": "everything the iterators will have to go because they are fundamentally unsafe and we need to remove undefined Behavior",
    "start": "803560",
    "end": "810600"
  },
  {
    "text": "which is all over the language and all over the standard Library as well so it",
    "start": "810600",
    "end": "815839"
  },
  {
    "text": "doesn't help just to fix the language the library needs replacement as",
    "start": "815839",
    "end": "821040"
  },
  {
    "text": "well and of course thread permites uh invite dat",
    "start": "821040",
    "end": "826600"
  },
  {
    "text": "races so this is incredibly difficult um and all safety features must be on by",
    "start": "826600",
    "end": "833160"
  },
  {
    "text": "default or they will not be used as we saw and it's difficult to claim to be",
    "start": "833160",
    "end": "839120"
  },
  {
    "text": "safe otherwise so this will break all C++ coas Cod bases and will in fact be like",
    "start": "839120",
    "end": "846320"
  },
  {
    "text": "a new",
    "start": "846320",
    "end": "848600"
  },
  {
    "text": "language so what's happening with the standardization are there any improvements coming well there is",
    "start": "856279",
    "end": "863600"
  },
  {
    "text": "significant low hanging fruit if you want to fix things you could have spatial safety for container",
    "start": "863600",
    "end": "870279"
  },
  {
    "text": "you could fix some important issues with optional and unique pointer you could trap if someone tries to D reference one",
    "start": "870279",
    "end": "876040"
  },
  {
    "text": "and it's not defined it's not difficult and the Gip cxx assertions do that so it's",
    "start": "876040",
    "end": "882360"
  },
  {
    "text": "available uh you could have guaranteed initialization of variables um so what's coming in",
    "start": "882360",
    "end": "892279"
  },
  {
    "text": "26 there is a paper that has been approved for initialization of local variables which is great it doesn't do",
    "start": "892279",
    "end": "898759"
  },
  {
    "text": "anything for variables on the Heap um it would be nice to fix that too",
    "start": "898759",
    "end": "903959"
  },
  {
    "text": "but this is a start there is a St span at coming which is nice uh stud span did",
    "start": "903959",
    "end": "910720"
  },
  {
    "text": "not have a safe way to index things it was proposed but it was voted out",
    "start": "910720",
    "end": "917839"
  },
  {
    "text": "someone thought it was not important to have a safe API for St span um I won't",
    "start": "917839",
    "end": "923399"
  },
  {
    "text": "say public what publicly what I think about that I can tell you over a beer it",
    "start": "923399",
    "end": "929319"
  },
  {
    "text": "it's not uh something I want on on tape um and then you have a fix for some UB",
    "start": "929319",
    "end": "937720"
  },
  {
    "text": "in connection with INF infinite Loops which is nice but it's not a big big thing and I may have missed something",
    "start": "937720",
    "end": "943480"
  },
  {
    "text": "but that seems to be about it uh there are some other proposals um",
    "start": "943480",
    "end": "951240"
  },
  {
    "text": "B stup has a paper on using uh the CPP call guidelines uh to make some security",
    "start": "951240",
    "end": "956839"
  },
  {
    "text": "profiles but it seems to be not very concrete and actionable at this",
    "start": "956839",
    "end": "962160"
  },
  {
    "text": "point uh there's a lot of work left to be done and if you want to make something usable out of this um I think",
    "start": "962160",
    "end": "969440"
  },
  {
    "text": "you have to break basically everything so I'm not sure if this is going to work uh there's a paper on constrained",
    "start": "969440",
    "end": "975079"
  },
  {
    "text": "numbers which is cool it's a safe numerics if you like which can fix a number of problems um but that's also",
    "start": "975079",
    "end": "982160"
  },
  {
    "text": "oped in and not much else that I could see on spatial or temporal member safety um",
    "start": "982160",
    "end": "989480"
  },
  {
    "text": "I'd like to hear it if if you see something I've I haven't and I haven't checked back in a few months so there might be more but I think we need to see",
    "start": "989480",
    "end": "996519"
  },
  {
    "text": "more soon and if I could make a wish what I would",
    "start": "996519",
    "end": "1002839"
  },
  {
    "text": "like to see is a coordinated effort for security improvements and that we make safety",
    "start": "1002839",
    "end": "1009959"
  },
  {
    "text": "more important it is the most important thing in my opinion at this",
    "start": "1009959",
    "end": "1016279"
  },
  {
    "text": "point and the willingness to trade per for safety modern compilers are incredibly",
    "start": "1016279",
    "end": "1023399"
  },
  {
    "text": "good at optimizing away unnecessary checks um and to do the low hanging",
    "start": "1023399",
    "end": "1031600"
  },
  {
    "text": "fruit um but I think what we can expect is that there will be few and minor",
    "start": "1033039",
    "end": "1038600"
  },
  {
    "text": "improvements for security in 26 uh I feel that we won't see any",
    "start": "1038600",
    "end": "1044678"
  },
  {
    "text": "significant progress until 29 at best which means are five to six years",
    "start": "1044679",
    "end": "1050120"
  },
  {
    "text": "away from any real Improvement uh and that's at best it",
    "start": "1050120",
    "end": "1058080"
  },
  {
    "text": "could be 32 and according to Norwegian law I could be retired by",
    "start": "1058080",
    "end": "1063880"
  },
  {
    "text": "then I would like to see something good happen before that point they'll probably change the law before they",
    "start": "1063880",
    "end": "1070080"
  },
  {
    "text": "changed the language so maybe that just works out",
    "start": "1070080",
    "end": "1076000"
  },
  {
    "text": "um so why is this um is the way the committee is organized",
    "start": "1076039",
    "end": "1082880"
  },
  {
    "text": "hampering project progress um or do the problems just go too deep and wide to",
    "start": "1082880",
    "end": "1089240"
  },
  {
    "text": "fix properly I'm not an expert on this but it frustrates me a bit and does this",
    "start": "1089240",
    "end": "1095880"
  },
  {
    "text": "constitute an existential crisis well we have this combination of",
    "start": "1095880",
    "end": "1101559"
  },
  {
    "text": "of security threats that the language does not seem to be able to handle and respond to we do not seem to",
    "start": "1101559",
    "end": "1108880"
  },
  {
    "text": "be able to adapt fast enough and the problems are deeply rooted and possibly",
    "start": "1108880",
    "end": "1114559"
  },
  {
    "text": "unfixable and you know this does not look sustainable long term so is C++ the new",
    "start": "1114559",
    "end": "1122600"
  },
  {
    "text": "cobalt eventually yes I think so but it will take time but these security",
    "start": "1122600",
    "end": "1127960"
  },
  {
    "text": "problems will drive the language towards obsolescence they will be a a big factor",
    "start": "1127960",
    "end": "1133039"
  },
  {
    "text": "in that and you know our inability to respond May accelerate this and you know",
    "start": "1133039",
    "end": "1139720"
  },
  {
    "text": "if people do not believe that the language can meet the challenge they will eventually move",
    "start": "1139720",
    "end": "1145640"
  },
  {
    "text": "away so something to think about it C++ will be around for a long time but these",
    "start": "1145799",
    "end": "1151400"
  },
  {
    "text": "things will affect the demise of the language it will accelerate",
    "start": "1151400",
    "end": "1158240"
  },
  {
    "text": "it so if you want to go somewhere else where would you go",
    "start": "1158520",
    "end": "1164000"
  },
  {
    "text": "um this is easy stuff though uh there are some existing languages that you could have a look at uh some are partial",
    "start": "1164000",
    "end": "1169960"
  },
  {
    "text": "fits they don't fit all ues but they may fit some and then of course the the drop in",
    "start": "1169960",
    "end": "1178000"
  },
  {
    "text": "replacement that will eventually always be mentioned when you talk about these things um just a quick run through",
    "start": "1178000",
    "end": "1185799"
  },
  {
    "text": "go garbage collected which most of us are not big fans of fans of because we",
    "start": "1185799",
    "end": "1191559"
  },
  {
    "text": "are embedded developers many of us uh it's compiled which is nice it's memory safe when single",
    "start": "1191559",
    "end": "1198919"
  },
  {
    "text": "threaded which is very nice uh but data races are not memory",
    "start": "1198919",
    "end": "1205039"
  },
  {
    "text": "safe which is unfortunate because you know threads are one of the things that",
    "start": "1205039",
    "end": "1210080"
  },
  {
    "text": "go is supposed to be good at bit slower than rust and C++ um it's",
    "start": "1210080",
    "end": "1216799"
  },
  {
    "text": "Google owned so you you are at the mercy of Google in terms of its future um also",
    "start": "1216799",
    "end": "1223960"
  },
  {
    "text": "not that Google migrates much of its code to C++ oh from C++ to rust uh not",
    "start": "1223960",
    "end": "1229080"
  },
  {
    "text": "to go which is not because it's not a good",
    "start": "1229080",
    "end": "1235640"
  },
  {
    "text": "language but because much of the code they migrate I suspect is something that sort of needs C++ and",
    "start": "1235640",
    "end": "1243720"
  },
  {
    "text": "go is maybe not a perfect fit for that uh Swift I haven't used it",
    "start": "1243720",
    "end": "1249480"
  },
  {
    "text": "personally I've had a look and it looks rather nice uh not garbage collected but",
    "start": "1249480",
    "end": "1254919"
  },
  {
    "text": "it uses reference counting and copy on right it's memory safe and then the really cool thing um in",
    "start": "1254919",
    "end": "1262559"
  },
  {
    "text": "Swift 6 it's also thread safe which is quite an achievement so cuos to to Apple",
    "start": "1262559",
    "end": "1268480"
  },
  {
    "text": "on that really really nice work uh C++ interoperability seems to be",
    "start": "1268480",
    "end": "1274159"
  },
  {
    "text": "good uh but again it's a propri proprietary language owned by Apple so",
    "start": "1274159",
    "end": "1280000"
  },
  {
    "text": "you are now at the mercy of Apple um Java uh some might be surprised I even",
    "start": "1280000",
    "end": "1285320"
  },
  {
    "text": "mentioned that but it's memory safe data are memory safe too which is cool um if",
    "start": "1285320",
    "end": "1291640"
  },
  {
    "text": "you have a datab Ras you can get an unexpected value which is a bug but it's still memory",
    "start": "1291640",
    "end": "1297159"
  },
  {
    "text": "safe uh it's reasonably efficient but it is garbage collected um so not ideal for",
    "start": "1297159",
    "end": "1302919"
  },
  {
    "text": "lowlevel system programming but you can build embedded systems in Java if you just put some some C or C++ underneath",
    "start": "1302919",
    "end": "1309039"
  },
  {
    "text": "it's been done I've done it myself once it was fun um then that's rust you know memory",
    "start": "1309039",
    "end": "1315440"
  },
  {
    "text": "safe free from data Ras is uh good for lowlevel programming performance is good it's fairly mature",
    "start": "1315440",
    "end": "1322480"
  },
  {
    "text": "tooling is is really great um and it's the only current",
    "start": "1322480",
    "end": "1327679"
  },
  {
    "text": "dropin replacement for C++ if you can use C++ you can typically use rust as",
    "start": "1327679",
    "end": "1333480"
  },
  {
    "text": "well um some say it's a little harder to learn and uh they talk about fighting",
    "start": "1334039",
    "end": "1341320"
  },
  {
    "text": "the borrow Checker and stuff um in my experience uh C++ is also hard to learn",
    "start": "1341320",
    "end": "1347400"
  },
  {
    "text": "well know we we wouldn't have this big conference talking about all sorts of strange things if it wasn't and if",
    "start": "1347400",
    "end": "1352919"
  },
  {
    "text": "you're smart enough to learn C++ then you're probably smart enough to learn rust it's not",
    "start": "1352919",
    "end": "1359080"
  },
  {
    "text": "harder um but we also have some interesting stuff going in terms of successful languages so languages",
    "start": "1359279",
    "end": "1365880"
  },
  {
    "text": "specifically designed to replace C++ uh lot of cool stuff uh CPP front by",
    "start": "1365880",
    "end": "1371679"
  },
  {
    "text": "hubter uh Circle carbon higho probably",
    "start": "1371679",
    "end": "1377279"
  },
  {
    "text": "more um so I I thought about this and I thought",
    "start": "1377279",
    "end": "1382360"
  },
  {
    "text": "well what would the requirements be for something like",
    "start": "1382360",
    "end": "1386480"
  },
  {
    "text": "that and this is just something I came up with so it's my personal uh ideas",
    "start": "1387440",
    "end": "1393159"
  },
  {
    "text": "yours might differ but these are the ones I came up with it needs to be a cooler language than C++",
    "start": "1393159",
    "end": "1400760"
  },
  {
    "text": "you know or people won't use it um and it needs to be Memory",
    "start": "1400760",
    "end": "1406480"
  },
  {
    "text": "safe and this is where it gets a bit serious um as far as I can see it there",
    "start": "1406480",
    "end": "1412600"
  },
  {
    "text": "is just no say business case for switching to a su successful language that is not memory safe why would anyone",
    "start": "1412600",
    "end": "1419240"
  },
  {
    "text": "fund that in this day and age it just doesn't make sense so any successful",
    "start": "1419240",
    "end": "1425400"
  },
  {
    "text": "language needs to be Memory safe so it means that any successful",
    "start": "1425400",
    "end": "1431440"
  },
  {
    "text": "language that is not memory safe is just a hobby basically will be dead on arrival",
    "start": "1431440",
    "end": "1438120"
  },
  {
    "text": "and it needs better C++ interoperability than rust because you know otherwise",
    "start": "1439600",
    "end": "1445640"
  },
  {
    "text": "just use rust it's available now you don't have to wait for anything um so this one CPP front aim to",
    "start": "1445640",
    "end": "1454600"
  },
  {
    "text": "be a better safe better safer language than C++ uh but so far it does not seem",
    "start": "1454600",
    "end": "1461039"
  },
  {
    "text": "to aim to be Memory safe so you know it's cool but I'm sorry I don't believe",
    "start": "1461039",
    "end": "1467679"
  },
  {
    "text": "in it uh circle on the other hand uh really",
    "start": "1467679",
    "end": "1474000"
  },
  {
    "text": "interesting project uh it's a single man effort by a guy called Sean Baxter and",
    "start": "1474000",
    "end": "1479720"
  },
  {
    "text": "it's probably the best jaob application in history in terms of programming uh it's a C++ compiler built",
    "start": "1479720",
    "end": "1487039"
  },
  {
    "text": "on uh the llvm back end with non-standard",
    "start": "1487039",
    "end": "1492240"
  },
  {
    "text": "extras and it's a Memory safe C++ um you can have a look at this site uh it's",
    "start": "1492240",
    "end": "1497880"
  },
  {
    "text": "incredible interesting very very impressive uh he has built a borrow Checker safer apis",
    "start": "1497880",
    "end": "1504799"
  },
  {
    "text": "all sorts of language features uh there's a demo out as well uh which I recommend that you watch it's really",
    "start": "1504799",
    "end": "1511880"
  },
  {
    "text": "cool um and what he does is that he puts rust inspired features on top of",
    "start": "1511880",
    "end": "1518039"
  },
  {
    "text": "C++ uh and this is just a small list there's a lot more uh all these features",
    "start": "1518039",
    "end": "1525919"
  },
  {
    "text": "are put in not because they are are cool at least not just because they are cool",
    "start": "1525919",
    "end": "1531159"
  },
  {
    "text": "uh they are all necessary in order to achieve the memory safety memory safety uh in",
    "start": "1531159",
    "end": "1536640"
  },
  {
    "text": "circle and you know also notice that there's a new standard library in this",
    "start": "1536640",
    "end": "1541799"
  },
  {
    "text": "because this is also required the one we have is not memory safe uh he he doesn't show a complete",
    "start": "1541799",
    "end": "1548120"
  },
  {
    "text": "new standard Library just the stuff he needs for the demo so as a proof of concept and and there's lot more features he has a long list that you can",
    "start": "1548120",
    "end": "1554760"
  },
  {
    "text": "have a look at um so how do you migrate from C++ using",
    "start": "1554760",
    "end": "1560799"
  },
  {
    "text": "Circle well safe and unsafe code lives side by side and functions are either",
    "start": "1560799",
    "end": "1567840"
  },
  {
    "text": "safe or unsafe and there's a safe keyword to annotate them with and safe functions can call Save",
    "start": "1567840",
    "end": "1574799"
  },
  {
    "text": "functions but save functions do not call unsafe functions that will break which means you can migrate",
    "start": "1574799",
    "end": "1581559"
  },
  {
    "text": "incrementally so you know the uh interop is taken care of which is cool it's a",
    "start": "1581559",
    "end": "1587320"
  },
  {
    "text": "nice solusion",
    "start": "1587320",
    "end": "1590240"
  },
  {
    "text": "but the migrated code must pass the borrow Checker so if you find your F",
    "start": "1592559",
    "end": "1598640"
  },
  {
    "text": "find yourself fighting the Bor Checker in Rust you will find yourself fighting the Bor Checker in",
    "start": "1598640",
    "end": "1604640"
  },
  {
    "text": "circle um but you get interrup for free um but note that if you want to migrate",
    "start": "1605720",
    "end": "1613679"
  },
  {
    "text": "to safe code the borrow Checker will require you to restructure your code",
    "start": "1613679",
    "end": "1620240"
  },
  {
    "text": "because that's part of what the Bor Checker does it does require you to structure your code in a certain way in",
    "start": "1621320",
    "end": "1626799"
  },
  {
    "text": "order to pass the rules so you're not just rewriting line by line you are actually redesigning",
    "start": "1626799",
    "end": "1633480"
  },
  {
    "text": "parts of your code and you also need probably to rewrite for the new library you can't",
    "start": "1633480",
    "end": "1639640"
  },
  {
    "text": "use Vector anymore you have to use the two Vector so it's a bit of work but I don't think it gets much",
    "start": "1639640",
    "end": "1646399"
  },
  {
    "text": "easier than this so where will this go can we bring it",
    "start": "1646399",
    "end": "1652000"
  },
  {
    "text": "into the standard well Sean Baxter estimates that this requires 300 pages",
    "start": "1652000",
    "end": "1657799"
  },
  {
    "text": "of Standards proposals um which is a lot uh that's a",
    "start": "1657799",
    "end": "1663320"
  },
  {
    "text": "great interview with him on on the CPP cast uh podcast I think it's episode 383",
    "start": "1663320",
    "end": "1669720"
  },
  {
    "text": "uh where Tim OD dumler one of the hosts estimates that this will take 10 to 20 years of standard committee",
    "start": "1669720",
    "end": "1676799"
  },
  {
    "text": "work so you know probably impossible and I think the best way",
    "start": "1676799",
    "end": "1682640"
  },
  {
    "text": "forward is probably that someone buys this and funds it and pushes it as a as a fork or something I don't know but",
    "start": "1682640",
    "end": "1690480"
  },
  {
    "text": "it's a cool attempt I think I I wish him well I hope he succeeds uh carbon and if there are any",
    "start": "1690480",
    "end": "1697960"
  },
  {
    "text": "carbon people here and I say something wrong you know just shout um seems to have promising",
    "start": "1697960",
    "end": "1704880"
  },
  {
    "text": "interrup ability will will be unsafe at first in",
    "start": "1704880",
    "end": "1710720"
  },
  {
    "text": "no1 and then as far as I could tell they they TR try to int they plan to introduce safety incrementally in",
    "start": "1710720",
    "end": "1719080"
  },
  {
    "text": "O2 and it seems from the talk I've seen that safe carbon and unsafe carbon will",
    "start": "1719080",
    "end": "1725760"
  },
  {
    "text": "coexist which suggests a two-step migration that you migrate at scale to unsafe carbon using tool support and",
    "start": "1725760",
    "end": "1733600"
  },
  {
    "text": "then you migrate from unsafe carbon to safe carbon with which seems maybe to end up",
    "start": "1733600",
    "end": "1740440"
  },
  {
    "text": "in the same terrain as Circle this second point and I also saw some suggestions",
    "start": "1740440",
    "end": "1746399"
  },
  {
    "text": "that safe carbon will probably use a borrow Checker there aren't that many other",
    "start": "1746399",
    "end": "1751600"
  },
  {
    "text": "Solutions in town um there's a talk by chander cruth from CPP now I believe which goes into",
    "start": "1751600",
    "end": "1761039"
  },
  {
    "text": "thread safety and sorry memory safety and carbon uh so",
    "start": "1761039",
    "end": "1767640"
  },
  {
    "text": "it goes a bit beyond uh the talk from yesterday on those topics so it's worth a",
    "start": "1767640",
    "end": "1773799"
  },
  {
    "text": "look um my fear is that the migration to safe",
    "start": "1773799",
    "end": "1779360"
  },
  {
    "text": "carbon will be a bit expensive because it's like with circle you need to restructure your code to pass the borrow",
    "start": "1779360",
    "end": "1785559"
  },
  {
    "text": "Checker and you need to rewrite for new libraries you can't call the old ones they are not safe there's UB",
    "start": "1785559",
    "end": "1793080"
  },
  {
    "text": "everywhere so there is a risk that and this goes for Circle as well there's a risk that a lot of code will stay",
    "start": "1793080",
    "end": "1799519"
  },
  {
    "text": "unsafe because your boss will not fund it the the final",
    "start": "1799519",
    "end": "1805399"
  },
  {
    "text": "migration and also of course as with circle if safety is oped in is it a memory safe language opinions will",
    "start": "1805399",
    "end": "1812120"
  },
  {
    "text": "differ on that um I've also noticed there a new language called Hyo coming",
    "start": "1812120",
    "end": "1819440"
  },
  {
    "text": "up uh which seems to use mutable value semantics and might be easier to use",
    "start": "1819440",
    "end": "1824760"
  },
  {
    "text": "than rust um maybe that will make it more restrictive I'm not sure I haven't looked closely",
    "start": "1824760",
    "end": "1830399"
  },
  {
    "text": "enough yet uh It looks interesting but it's early days and it seems to be slipping a",
    "start": "1830399",
    "end": "1835960"
  },
  {
    "text": "bit versus the road map I they probably need more people working on it but it could be a very very",
    "start": "1835960",
    "end": "1841880"
  },
  {
    "text": "interesting language um and we need to know more about interop but okay could be a",
    "start": "1841880",
    "end": "1850440"
  },
  {
    "text": "contender should we wait for this well I think that depends",
    "start": "1850440",
    "end": "1858639"
  },
  {
    "text": "on your application these languages are five years away at least and you know",
    "start": "1858639",
    "end": "1864039"
  },
  {
    "text": "new languages the likelihood of success is is not always that great um for many of",
    "start": "1864039",
    "end": "1870360"
  },
  {
    "text": "us they will arrive a little late I think if you're going to migrate eventually to something else",
    "start": "1870360",
    "end": "1876200"
  },
  {
    "text": "then maybe your best bet is to use an existing language instead of waiting 5",
    "start": "1876200",
    "end": "1881720"
  },
  {
    "text": "to 10 years for something that may not arrive and and during those 5 to 10 years you will write a lot of new C++",
    "start": "1881720",
    "end": "1887720"
  },
  {
    "text": "codes that you will also have to migrate later so what to",
    "start": "1887720",
    "end": "1895840"
  },
  {
    "text": "do and why do we need to do anything at all well you know some will say that you",
    "start": "1901720",
    "end": "1907320"
  },
  {
    "text": "know our programmers make few mistakes the problem is just that people use C++",
    "start": "1907320",
    "end": "1912960"
  },
  {
    "text": "wrong well you've probably seen this before all car drivers consider themselves better than average almost",
    "start": "1913159",
    "end": "1919559"
  },
  {
    "text": "all and I think all programmers that are car drivers definitely consider",
    "start": "1919559",
    "end": "1925360"
  },
  {
    "text": "themselves better than average so you know we tend to overestimate how well we can do things",
    "start": "1925360",
    "end": "1933440"
  },
  {
    "text": "uh humans make mistakes and M's law still applies so I don't buy that",
    "start": "1933440",
    "end": "1941080"
  },
  {
    "text": "one tools and discipline will get us safety use sanitizers",
    "start": "1941120",
    "end": "1947960"
  },
  {
    "text": "use static analysis well people are not",
    "start": "1947960",
    "end": "1953720"
  },
  {
    "text": "disciplined not all the time and we tend to opt out of security because we want",
    "start": "1953720",
    "end": "1959000"
  },
  {
    "text": "to deliver software right now and we have pressure to do so and sanitizers only catch the errors",
    "start": "1959000",
    "end": "1966559"
  },
  {
    "text": "that your tests trigger the other ones go undetected static analysis well it",
    "start": "1966559",
    "end": "1973320"
  },
  {
    "text": "usually works for single translation units I'm sure there are tools that can do global analysis but the ones most of",
    "start": "1973320",
    "end": "1980679"
  },
  {
    "text": "us use if we use anything they do not do that um I've been trying to do this for",
    "start": "1980679",
    "end": "1988279"
  },
  {
    "text": "more than a decade and it's incredibly hard it's not impossible you can get close but it's very very difficult it's",
    "start": "1988279",
    "end": "1995000"
  },
  {
    "text": "not for everyone so you know safety is not",
    "start": "1995000",
    "end": "2000919"
  },
  {
    "text": "important we make stuff that's not critical lots of people have thought that and have been proven wrong",
    "start": "2000919",
    "end": "2009760"
  },
  {
    "text": "so what do we do the these are my personal recommendations you know you can make your own",
    "start": "2011559",
    "end": "2017559"
  },
  {
    "text": "um but I think we should consider not using C++ for new",
    "start": "2017559",
    "end": "2022880"
  },
  {
    "text": "products if you have the luxury of starting a new product a new project",
    "start": "2022880",
    "end": "2028200"
  },
  {
    "text": "without having to relate to Old C++ code consider using something else",
    "start": "2028200",
    "end": "2036240"
  },
  {
    "text": "maybe it's no longer the right tool for the job we are engineers and we should use the best tool for the job and given",
    "start": "2039840",
    "end": "2048040"
  },
  {
    "text": "given today's security threats well it could be that this is not C++",
    "start": "2048040",
    "end": "2054480"
  },
  {
    "text": "anymore and if C++ becomes the new cobalt it's because of",
    "start": "2054480",
    "end": "2059878"
  },
  {
    "text": "this if you are making a new major component in an existing product well consider if you should do this in a new",
    "start": "2061440",
    "end": "2067000"
  },
  {
    "text": "language um and if you're doing something where security is",
    "start": "2067000",
    "end": "2072240"
  },
  {
    "text": "important do a security analysis of your system find the attack",
    "start": "2072240",
    "end": "2077398"
  },
  {
    "text": "surfaces and consider rewriting those in a safe language this is I guess to a big",
    "start": "2077399",
    "end": "2083440"
  },
  {
    "text": "extent what what Google is",
    "start": "2083440",
    "end": "2086638"
  },
  {
    "text": "doing and this is really in my guess what the NSA and others want us to do",
    "start": "2088879",
    "end": "2095919"
  },
  {
    "text": "they don't expect us to go and rewrite everything that's not going to happen but they would like us to write as",
    "start": "2095919",
    "end": "2101880"
  },
  {
    "text": "little new C+ C++ code as possible plain",
    "start": "2101880",
    "end": "2107519"
  },
  {
    "text": "andum so if you do",
    "start": "2108680",
    "end": "2114200"
  },
  {
    "text": "migrate are there some things you should think about um well yes interfacing your",
    "start": "2114200",
    "end": "2123599"
  },
  {
    "text": "legacy code um most languages support",
    "start": "2123599",
    "end": "2128640"
  },
  {
    "text": "this but usually through the cabi",
    "start": "2128640",
    "end": "2133800"
  },
  {
    "text": "um some languages have good C++ interoperability as well uh Swift seems",
    "start": "2133800",
    "end": "2138880"
  },
  {
    "text": "to be good at this rust and go has some support um the rust support is improving but it's",
    "start": "2138880",
    "end": "2145720"
  },
  {
    "text": "hard um you can migrate gradually this way bottom up or component by component",
    "start": "2145720",
    "end": "2152200"
  },
  {
    "text": "this all depends on what your architecture looks like and you need to take a close look and try to find",
    "start": "2152200",
    "end": "2157280"
  },
  {
    "text": "opportunity ities in the architecture that you have um there are other things you could",
    "start": "2157280",
    "end": "2164480"
  },
  {
    "text": "consider as well uh you could put new code in separate processes you could use",
    "start": "2164480",
    "end": "2169920"
  },
  {
    "text": "some sort of communication infrastructure to communicate between the old code and new that will give you",
    "start": "2169920",
    "end": "2175480"
  },
  {
    "text": "pure C++ processes and processes in new languages um this works especially well",
    "start": "2175480",
    "end": "2182079"
  },
  {
    "text": "if you have message passing architectures actor models for example uh um and you could migrate one",
    "start": "2182079",
    "end": "2189200"
  },
  {
    "text": "actor at a time or one microservice or what have you",
    "start": "2189200",
    "end": "2196119"
  },
  {
    "text": "um another thing you should think about is to try to start slow this is this is change management which is notoriously",
    "start": "2196640",
    "end": "2204040"
  },
  {
    "text": "hard um you need to ensure support from key players in your organization you",
    "start": "2204040",
    "end": "2209560"
  },
  {
    "text": "need to have management behind you uh you need to have the Architects on board",
    "start": "2209560",
    "end": "2214680"
  },
  {
    "text": "and there will be other key players in your organization that do not have formal roles even that you need to",
    "start": "2214680",
    "end": "2221839"
  },
  {
    "text": "convince um you also need to find a good candidate for",
    "start": "2221839",
    "end": "2228839"
  },
  {
    "text": "migration something where migration will be a big Improvement and by good I also mean",
    "start": "2230640",
    "end": "2237000"
  },
  {
    "text": "likely to succeed because you don't get two or three chances at this you need to",
    "start": "2237000",
    "end": "2242760"
  },
  {
    "text": "make this a success and then you can build some momentum from that developers will enjoy",
    "start": "2242760",
    "end": "2250079"
  },
  {
    "text": "this so if you can make it a success and and uh get people to to uh see it as",
    "start": "2250079",
    "end": "2257920"
  },
  {
    "text": "that and they will talk about it to other developers and then things will start rolling um just be a bit careful because",
    "start": "2257920",
    "end": "2267240"
  },
  {
    "text": "uh especially in the rust Community there are people that are too enthusiastic you know they become",
    "start": "2267240",
    "end": "2272920"
  },
  {
    "text": "almost almost like missionaries like like religious fundamentalists and and",
    "start": "2272920",
    "end": "2277960"
  },
  {
    "text": "they do damage you know they they drive people away it becomes polarizing and",
    "start": "2277960",
    "end": "2283200"
  },
  {
    "text": "you don't want to go there because that damage takes a while to",
    "start": "2283200",
    "end": "2287680"
  },
  {
    "text": "repair um and because I don't do this often and tend to be a bit nous I do this in record time when I go on stage",
    "start": "2289040",
    "end": "2295960"
  },
  {
    "text": "so I I finished this 10 minutes earlier than when I rehearsed",
    "start": "2295960",
    "end": "2301359"
  },
  {
    "text": "so um any questions or opinions even yes",
    "start": "2301359",
    "end": "2306599"
  },
  {
    "text": "you did not mention",
    "start": "2306599",
    "end": "2309440"
  },
  {
    "text": "right uh you mentioned Sig uh no I did not mention Sig it looks cool I haven't looked very closely at it because it's",
    "start": "2314040",
    "end": "2320680"
  },
  {
    "text": "it's a successful language for C right yeah as far as I've heard it has some",
    "start": "2320680",
    "end": "2326079"
  },
  {
    "text": "memory safety issues but it's probably not fully memory safe yeah",
    "start": "2326079",
    "end": "2333560"
  },
  {
    "text": "um it's not a good fit for what I do it might be a better fit for what you do do",
    "start": "2333560",
    "end": "2338920"
  },
  {
    "text": "uh and if it improves the safety versus C then yes sure consider it uh that's also a one man effort isn't",
    "start": "2338920",
    "end": "2346280"
  },
  {
    "text": "it I think so so hopefully he will get some more backing because you need a uh",
    "start": "2346280",
    "end": "2351680"
  },
  {
    "text": "you need a community around this right so the ball is rolling yeah",
    "start": "2351680",
    "end": "2359920"
  },
  {
    "text": "absolutely if it if it uh if it improves safety then sure",
    "start": "2359920",
    "end": "2366440"
  },
  {
    "text": "what languages are um for the products that use C++ we are",
    "start": "2367560",
    "end": "2376960"
  },
  {
    "text": "making a shift towards rust we have other languages as well uh",
    "start": "2376960",
    "end": "2382079"
  },
  {
    "text": "but um yeah we have we have new products and we have old products we have we have",
    "start": "2382079",
    "end": "2388400"
  },
  {
    "text": "big teams maintaining 30y old products and of course mating that is",
    "start": "2388400",
    "end": "2394560"
  },
  {
    "text": "difficult yeah is using I'm sorry is",
    "start": "2394560",
    "end": "2402119"
  },
  {
    "text": "using chips from we are using system on chip from",
    "start": "2402119",
    "end": "2408280"
  },
  {
    "text": "several suppliers yeah but are you contributing back to the NRF or the",
    "start": "2408280",
    "end": "2413400"
  },
  {
    "text": "embedded projects are you involved with those",
    "start": "2413400",
    "end": "2418480"
  },
  {
    "text": "organizations um contributing back is sometimes difficult for us because that might re reveal",
    "start": "2418480",
    "end": "2426680"
  },
  {
    "text": "information about products and libraries that we use so for some products that",
    "start": "2426680",
    "end": "2432160"
  },
  {
    "text": "that can be difficult but we would like to do it when we can um but we haven't done much of that",
    "start": "2432160",
    "end": "2440119"
  },
  {
    "text": "yet unfortunately it's a little difficult yes isort going",
    "start": "2440119",
    "end": "2447720"
  },
  {
    "text": "Curr comp oh",
    "start": "2448480",
    "end": "2453560"
  },
  {
    "text": "something uh no not that specifically um but that would be",
    "start": "2453560",
    "end": "2461280"
  },
  {
    "text": "cool um",
    "start": "2461280",
    "end": "2465880"
  },
  {
    "text": "yeah we tend to have to choose operating systems also based on what sort of platform it runs on so we're not free to",
    "start": "2466760",
    "end": "2473440"
  },
  {
    "text": "choose anything we want of course yes anything",
    "start": "2473440",
    "end": "2480040"
  },
  {
    "text": "else no ah uh still exist or ah um yeah that's a",
    "start": "2480040",
    "end": "2487960"
  },
  {
    "text": "good question um I went to a talk by Robert Secord about two years ago and he presented himself as you know a standard",
    "start": "2487960",
    "end": "2494560"
  },
  {
    "text": "C standard committee guy and said that they plan to outlive C++ um and I think he's right I think",
    "start": "2494560",
    "end": "2502000"
  },
  {
    "text": "they will uh C++ has a niche that will",
    "start": "2502000",
    "end": "2507040"
  },
  {
    "text": "probably always exist not just because of Linux but it's the language of choice",
    "start": "2507040",
    "end": "2512319"
  },
  {
    "text": "for board support packages and example programs for microcontrollers and that sort of thing uh um and you need an an",
    "start": "2512319",
    "end": "2519000"
  },
  {
    "text": "easily accessible language for that so I think that's that's something that you",
    "start": "2519000",
    "end": "2524440"
  },
  {
    "text": "know there will always be C I think what is your thought for the",
    "start": "2524440",
    "end": "2529839"
  },
  {
    "text": "socaled C++",
    "start": "2529839",
    "end": "2533599"
  },
  {
    "text": "for.net uh you mean this this uh what did they Ed to call that I wrote",
    "start": "2536560",
    "end": "2542280"
  },
  {
    "text": "some code in that once I think you know you you run it on the virtual machine if you like yeah",
    "start": "2542280",
    "end": "2548280"
  },
  {
    "text": "wasn't that something Microsoft did for interfacing purposes mostly is it",
    "start": "2548280",
    "end": "2554720"
  },
  {
    "text": "safer I don't know I don't know much about that sorry",
    "start": "2554720",
    "end": "2562240"
  },
  {
    "text": "yes right um at the moment we are running the rust",
    "start": "2567240",
    "end": "2574400"
  },
  {
    "text": "code as a separate process or several actually and then we use communication mechanisms to talk with it uh it was",
    "start": "2574400",
    "end": "2581359"
  },
  {
    "text": "easier for us we had the infrastructure in place to do that easily that worked",
    "start": "2581359",
    "end": "2587839"
  },
  {
    "text": "well yes mention",
    "start": "2587839",
    "end": "2595040"
  },
  {
    "text": "MSC have youing that also um actually",
    "start": "2598359",
    "end": "2607400"
  },
  {
    "text": "okay um I you asked if if we had used Gacy uh I haven't used that myself I",
    "start": "2608680",
    "end": "2614480"
  },
  {
    "text": "mentioned it because it's so common uh and well tested uh we are not using that",
    "start": "2614480",
    "end": "2622599"
  },
  {
    "text": "ourselves uh there are those uh there's a lot of stuff you can use uh so find the one that suits you but you will want",
    "start": "2622599",
    "end": "2629960"
  },
  {
    "text": "one that is good for the language you have and the language you're moving to so you have to test before you invest",
    "start": "2629960",
    "end": "2636000"
  },
  {
    "text": "money in that",
    "start": "2636000",
    "end": "2639040"
  },
  {
    "text": "yeah yeah you don't want to use soap now there are better things",
    "start": "2644240",
    "end": "2651800"
  },
  {
    "text": "available okay any last questions no okay well thank you for",
    "start": "2651800",
    "end": "2658120"
  },
  {
    "text": "[Applause]",
    "start": "2658120",
    "end": "2665389"
  },
  {
    "text": "listening e",
    "start": "2666040",
    "end": "2670079"
  }
]