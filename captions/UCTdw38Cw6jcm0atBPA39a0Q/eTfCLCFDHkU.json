[
  {
    "text": "welcome everyone to this talk uh I know that lunch is coming up so I'll try not",
    "start": "4960",
    "end": "11480"
  },
  {
    "text": "to stay up here longer than necessary um my name is Mark lefter I'm the CTO for a Swedish consultancy firm",
    "start": "11480",
    "end": "19320"
  },
  {
    "text": "called ement where we focus on cloud native app",
    "start": "19320",
    "end": "24439"
  },
  {
    "text": "development with an emphasis on message driven systems and in this talk I want to",
    "start": "24439",
    "end": "31920"
  },
  {
    "text": "explore Access Control in message driven systems perhaps a somewhat esoteric",
    "start": "31920",
    "end": "39160"
  },
  {
    "text": "topic to start up with um how many of you are message driven today say using",
    "start": "39160",
    "end": "46680"
  },
  {
    "text": "Pub Sub in any form a lot of you how many of you do any type of",
    "start": "46680",
    "end": "52879"
  },
  {
    "text": "Access Control permission checks when you consume a",
    "start": "52879",
    "end": "58038"
  },
  {
    "text": "message fewer def definitely okay so this is what my talk",
    "start": "58079",
    "end": "63440"
  },
  {
    "text": "will be about the um action of or actions you take",
    "start": "63440",
    "end": "69240"
  },
  {
    "text": "when you want to authorize whatever is going to happen when you consume and process some type",
    "start": "69240",
    "end": "76479"
  },
  {
    "text": "of message so we're going to focus on a",
    "start": "76479",
    "end": "83520"
  },
  {
    "text": "specific context which is zero trust so we're going to look at what a",
    "start": "83520",
    "end": "88960"
  },
  {
    "text": "zero trust enironment means and why it's so important to uh establish a",
    "start": "88960",
    "end": "94799"
  },
  {
    "text": "functional Zer U Access Control mechanism in this regard for those of you who are not",
    "start": "94799",
    "end": "101399"
  },
  {
    "text": "familiar with messaging we're going to explore that a little bit see what types of messages we are dealing",
    "start": "101399",
    "end": "107280"
  },
  {
    "text": "with and we're going to see how open policy agent helps us to actually",
    "start": "107280",
    "end": "113520"
  },
  {
    "text": "enforce policies where we need them to to",
    "start": "113520",
    "end": "118560"
  },
  {
    "text": "happen and we're going to finally look at how do we actually Implement zero trust for asynchronous",
    "start": "118560",
    "end": "127119"
  },
  {
    "text": "communication that is messaging and hopefully we have some time left for Q&A at the",
    "start": "127119",
    "end": "134239"
  },
  {
    "text": "end so I want to start by setting up a frame of reference for",
    "start": "135800",
    "end": "141560"
  },
  {
    "text": "this talk what are we going to um use as a foundation for this uh",
    "start": "141560",
    "end": "147640"
  },
  {
    "text": "exploration first of all access control that is authorization so we're going to",
    "start": "147640",
    "end": "152720"
  },
  {
    "text": "assume that we have some sort of verified identity to work with meaning a user or",
    "start": "152720",
    "end": "160159"
  },
  {
    "text": "some system has provided credentials we have authenticated them",
    "start": "160159",
    "end": "165440"
  },
  {
    "text": "and we' have received a token or rather the user the system has received a token",
    "start": "165440",
    "end": "170560"
  },
  {
    "text": "which then will provide us for Access Control so in a general sense we're",
    "start": "170560",
    "end": "177200"
  },
  {
    "text": "going to use this verified identity in the form of of a token most of you are probably familiar with the notion of",
    "start": "177200",
    "end": "183319"
  },
  {
    "text": "Json web tokens I'm going to call them tokens for short and they will help us to enforce",
    "start": "183319",
    "end": "190599"
  },
  {
    "text": "that this particular verified identity can perform some type of action on some",
    "start": "190599",
    "end": "196080"
  },
  {
    "text": "type of resource and we're going to use a model",
    "start": "196080",
    "end": "201239"
  },
  {
    "text": "called attribute based access control because it gives us the most flexibility in coming up with a decision can we",
    "start": "201239",
    "end": "208239"
  },
  {
    "text": "perform this operation or action on a resource or not tokens usually contain",
    "start": "208239",
    "end": "213560"
  },
  {
    "text": "claims attributes that we can use resources could do as well and we can",
    "start": "213560",
    "end": "219439"
  },
  {
    "text": "also use perhaps some environmental attributes all of it factors into the decision do we permit or deny this",
    "start": "219439",
    "end": "226400"
  },
  {
    "text": "particular action furthermore the type of system we'll be studying is a distributed one",
    "start": "226400",
    "end": "233319"
  },
  {
    "text": "of services or microservices if you will and our aim is to take this very",
    "start": "233319",
    "end": "239640"
  },
  {
    "text": "verified identity and all of the claims therein and propagated along the",
    "start": "239640",
    "end": "245680"
  },
  {
    "text": "synchronous flow that will set up to perform the type of business logic that",
    "start": "245680",
    "end": "252159"
  },
  {
    "text": "we um desire so this identity context needs to be available at every touch",
    "start": "252159",
    "end": "259120"
  },
  {
    "text": "point along this flow so I mentioned a synchronous communication that is the uh Cornerstone",
    "start": "259120",
    "end": "267040"
  },
  {
    "text": "in this talk as well so it means that services do not interact directly with each other rather we're decoupling them",
    "start": "267040",
    "end": "274280"
  },
  {
    "text": "and we're using some type of intermediary here called a message broker to facilitate the interaction",
    "start": "274280",
    "end": "281320"
  },
  {
    "text": "between services so with this as a",
    "start": "281320",
    "end": "288680"
  },
  {
    "text": "baseline let's look at what zero trust",
    "start": "288680",
    "end": "294039"
  },
  {
    "text": "entails you might be aware of the old adage trust but verify this is sort of the stricter",
    "start": "294039",
    "end": "301639"
  },
  {
    "text": "version of that where we go with Never Trust basically anything always",
    "start": "301639",
    "end": "307400"
  },
  {
    "text": "verify sounds great in theory can be hard to implement in practice but it all",
    "start": "307400",
    "end": "313160"
  },
  {
    "text": "means that we are no longer content with only",
    "start": "313160",
    "end": "318400"
  },
  {
    "text": "enforcing Access Control at a network boundary we're assuming that anything",
    "start": "318400",
    "end": "324720"
  },
  {
    "text": "both outside the boundary and inside the boundary is by default to be untrusted",
    "start": "324720",
    "end": "330520"
  },
  {
    "text": "like a real life example of this is your Wi-Fi network at home or even in your",
    "start": "330520",
    "end": "336600"
  },
  {
    "text": "office a friend or colleague might stop by and ask you for the Wi-Fi password you of course are friendly back",
    "start": "336600",
    "end": "344240"
  },
  {
    "text": "so you provide them with this password and they enter your network in a lot of cases we're fine",
    "start": "344240",
    "end": "350800"
  },
  {
    "text": "with that we're trusting this particular person to operate with our network but do we have any idea what the application",
    "start": "350800",
    "end": "356600"
  },
  {
    "text": "on the particular person's machine do sell",
    "start": "356600",
    "end": "362319"
  },
  {
    "text": "them so for modern use cases this is not",
    "start": "362319",
    "end": "368319"
  },
  {
    "text": "enough we have this divide between application security and network security AS application developers we",
    "start": "368319",
    "end": "374720"
  },
  {
    "text": "have one notion of what it means to secure our applications and interactions but the IT department that",
    "start": "374720",
    "end": "382120"
  },
  {
    "text": "de deal with network security at a lower level they have a different notion than",
    "start": "382120",
    "end": "387680"
  },
  {
    "text": "we do so this gap between different departments and different philosophies and",
    "start": "387680",
    "end": "393919"
  },
  {
    "text": "policies create trouble sometimes for example you might have a kuber cluster",
    "start": "393919",
    "end": "400639"
  },
  {
    "text": "administrator assuring me that yes access to this cluster is fully fully",
    "start": "400639",
    "end": "406240"
  },
  {
    "text": "secured I've done my job but turns out that for some",
    "start": "406240",
    "end": "411280"
  },
  {
    "text": "reason the services that are operating within the cluster are exposed to the outside world yes this can happen and",
    "start": "411280",
    "end": "419000"
  },
  {
    "text": "has happened so yes your cluster might be secure but it turns out you missed a couple of",
    "start": "419000",
    "end": "424639"
  },
  {
    "text": "things because the application developer when writing the kubernetes manifests didn't really agree with what the",
    "start": "424639",
    "end": "431440"
  },
  {
    "text": "network administrator or the cluster administrator had in mind and in this Modern Age we're",
    "start": "431440",
    "end": "438599"
  },
  {
    "text": "dealing with a number of threats inside of our Network boundary its breaches are not in common",
    "start": "438599",
    "end": "446479"
  },
  {
    "text": "we're dealing with malicious applications both externally and internally and it's always uh our fault",
    "start": "446479",
    "end": "453319"
  },
  {
    "text": "so to speak we might be using third-party open source packages and how many times have you seen a particular",
    "start": "453319",
    "end": "459280"
  },
  {
    "text": "mpm package for example uh highlighting certain um vulnerabilities supply chain attacks and",
    "start": "459280",
    "end": "466639"
  },
  {
    "text": "so forth we're not always aware of everything that might be malicious that",
    "start": "466639",
    "end": "471680"
  },
  {
    "text": "we Embrace in our applications so we desire some type of",
    "start": "471680",
    "end": "479840"
  },
  {
    "text": "zero trust philosophy and the implementation of it in our applications",
    "start": "479840",
    "end": "486919"
  },
  {
    "text": "and our networks now this is hard to implement sometimes and we must make",
    "start": "486919",
    "end": "493800"
  },
  {
    "text": "sure that implementing zero trust the cost of it doesn't exceed the value we",
    "start": "493800",
    "end": "499240"
  },
  {
    "text": "derive from it in Practical terms it means that sooner or later you will have to work with your network security",
    "start": "499240",
    "end": "507319"
  },
  {
    "text": "people but we as application should make sure that we have done our part to ensure that along every step in our",
    "start": "507319",
    "end": "514800"
  },
  {
    "text": "synchronous communication we are as sure that we can be that we're not trusting or assuming",
    "start": "514800",
    "end": "520240"
  },
  {
    "text": "anything but rather making sure that our Access Control follows the principles of zero",
    "start": "520240",
    "end": "527040"
  },
  {
    "text": "trust so this talk is about messaging that is asynchronous communication but",
    "start": "529680",
    "end": "534760"
  },
  {
    "text": "it can be helpful to look at what synchronous communication entails and how zero trust might Shape Up in in this",
    "start": "534760",
    "end": "542519"
  },
  {
    "text": "context so in this slide we have a API Gateway we're assuming here that some",
    "start": "542519",
    "end": "550640"
  },
  {
    "text": "client has been authenticated provided with a token which is then passed to us",
    "start": "550640",
    "end": "556560"
  },
  {
    "text": "uh in the Gateway now tokens they have this nice U property of being stateless",
    "start": "556560",
    "end": "564360"
  },
  {
    "text": "or they can be used for stateless authorization we don't maintain any sessions when we're using tokens which",
    "start": "564360",
    "end": "569399"
  },
  {
    "text": "is nice when we try to scale out our distributed systems so this token is",
    "start": "569399",
    "end": "574519"
  },
  {
    "text": "provided to the AP gate API Gateway we validate the token and now",
    "start": "574519",
    "end": "580680"
  },
  {
    "text": "we're inside the network boundary again we're trying to follow",
    "start": "580680",
    "end": "586800"
  },
  {
    "text": "some zero trust principles we start by making a token exchange that is always a good practice so we take the client",
    "start": "586800",
    "end": "593680"
  },
  {
    "text": "token and we exchange it for an internal token with the client information",
    "start": "593680",
    "end": "600440"
  },
  {
    "text": "from our authorization that we defin authorization server that we definitely trust that we have to have some trust in",
    "start": "600440",
    "end": "606880"
  },
  {
    "text": "some things that we deploy the authorization server is one such entity so this token can then be trusted",
    "start": "606880",
    "end": "614600"
  },
  {
    "text": "by all services to operate inside the network boundary so this exchanged token in pink",
    "start": "614600",
    "end": "623160"
  },
  {
    "text": "is then passed to a first service a backend for front end if you will and that service in turn calls",
    "start": "623160",
    "end": "631160"
  },
  {
    "text": "another service using that",
    "start": "631160",
    "end": "635319"
  },
  {
    "text": "token so here we have two layers of security we have the network",
    "start": "636399",
    "end": "643000"
  },
  {
    "text": "part which is illustrated by the blue error labeled mtls have you heard of",
    "start": "643000",
    "end": "650120"
  },
  {
    "text": "mutual TLS some of you probably have it means that each service the BFF and the",
    "start": "650120",
    "end": "655320"
  },
  {
    "text": "service uh that it contacts can be mutually authenticated the client will",
    "start": "655320",
    "end": "661160"
  },
  {
    "text": "trust the the caller will trust the Calli and vice versa this is often what we deploy um or enable in a service mesh",
    "start": "661160",
    "end": "669839"
  },
  {
    "text": "inside of a cators cluster that's on the network layer but we on the application layer",
    "start": "669839",
    "end": "676000"
  },
  {
    "text": "also provide a the token that is to be used inside the network",
    "start": "676000",
    "end": "682160"
  },
  {
    "text": "boundary so it's always good to have as many layers of Defense as possible and",
    "start": "682160",
    "end": "688720"
  },
  {
    "text": "we we making sure that we have that at two different levels in this scenario now synchronous communication implies",
    "start": "688720",
    "end": "695760"
  },
  {
    "text": "shortlived interaction these tokens shouldn't live for very long because if this call and this call chain fails then",
    "start": "695760",
    "end": "702720"
  },
  {
    "text": "we're done or if succeeds we're done as well so it's a pretty simple interaction",
    "start": "702720",
    "end": "710440"
  },
  {
    "text": "style so what happens if we make a slight change if we need to have a syn",
    "start": "712800",
    "end": "718920"
  },
  {
    "text": "inous Communication in this scenario for example let's say that our",
    "start": "718920",
    "end": "724800"
  },
  {
    "text": "back end for front end now instead of calling a service",
    "start": "724800",
    "end": "732120"
  },
  {
    "text": "directly calls it indirectly through a message broker imagine that API that we",
    "start": "732160",
    "end": "738399"
  },
  {
    "text": "support externally a is asynchronous as well you can post something to the API",
    "start": "738399",
    "end": "744639"
  },
  {
    "text": "you get an immediate response and then you can pull the API for a result for example in either way we in the back for",
    "start": "744639",
    "end": "752560"
  },
  {
    "text": "front end we post a message or publish a meage message onto a message broker and sometime later our service",
    "start": "752560",
    "end": "761639"
  },
  {
    "text": "will consume it process it now this is different because this",
    "start": "761639",
    "end": "767760"
  },
  {
    "text": "interaction is typically not short-lived there is different definition of what shortlived",
    "start": "767760",
    "end": "772920"
  },
  {
    "text": "means but imagine that this interaction is long lived maybe the service doesn't",
    "start": "772920",
    "end": "779440"
  },
  {
    "text": "consume the message immediately it might take some time or even requires manual",
    "start": "779440",
    "end": "784760"
  },
  {
    "text": "intervention approval from me before the asynchronous flow can be",
    "start": "784760",
    "end": "790519"
  },
  {
    "text": "completed this is tricky and can cause some problems mostly because the",
    "start": "790839",
    "end": "795880"
  },
  {
    "text": "identity context the JWT or token in pink there is no intrinsic mechanism for",
    "start": "795880",
    "end": "802839"
  },
  {
    "text": "just including it in the message is typically lost that's one problem",
    "start": "802839",
    "end": "808959"
  },
  {
    "text": "another one is that when using messages we're implicitly embracing a",
    "start": "808959",
    "end": "815560"
  },
  {
    "text": "property called location transparency when in the synchronous case when one service calls another we know who we",
    "start": "815560",
    "end": "821519"
  },
  {
    "text": "call we know the name of the service we're calling what the API is ETC here",
    "start": "821519",
    "end": "826839"
  },
  {
    "text": "I'm creating a message I'm putting onto a broker I don't really know where it will end up who will handle it and how",
    "start": "826839",
    "end": "833040"
  },
  {
    "text": "many consumers there will be in the case of events for example so",
    "start": "833040",
    "end": "839279"
  },
  {
    "text": "we're being more transparent about where things will be processed and how we can",
    "start": "839279",
    "end": "846000"
  },
  {
    "text": "still use mtls and ACLS for example when publishing to a Kafka broker and this",
    "start": "846000",
    "end": "852759"
  },
  {
    "text": "ACL can control what topics I'm allowed to publish to again we're on the network layer here but on the application layer",
    "start": "852759",
    "end": "859040"
  },
  {
    "text": "the token is typically lost or there's no um easy way or obvious way to include",
    "start": "859040",
    "end": "866720"
  },
  {
    "text": "it in the communication so this is where our Focus will be uh",
    "start": "866720",
    "end": "873800"
  },
  {
    "text": "for the rest of this talk so we're talking about messaging",
    "start": "873800",
    "end": "882480"
  },
  {
    "text": "there is not one message there's roughly three different kinds if you're building",
    "start": "882480",
    "end": "888839"
  },
  {
    "text": "a message driven system first you have commands you can think of them as normal",
    "start": "888839",
    "end": "896360"
  },
  {
    "text": "requests I've term them sometimes synchronous request reply you send a",
    "start": "896360",
    "end": "902279"
  },
  {
    "text": "command to some command Handler you don't know exactly or typically what command Handler that will be but you can",
    "start": "902279",
    "end": "909360"
  },
  {
    "text": "be assured that some Handler will process your command and return an acknowledgement yes I successfully",
    "start": "909360",
    "end": "916079"
  },
  {
    "text": "process your command typically one command Handler will handle commands for",
    "start": "916079",
    "end": "921759"
  },
  {
    "text": "a range of entities or resources um but commands are pretty",
    "start": "921759",
    "end": "927160"
  },
  {
    "text": "simple you send them out they will be directed towards a single command Handler processed and you'll hopefully",
    "start": "927160",
    "end": "933279"
  },
  {
    "text": "will get an acknowledgement back on the right hand side we have queries mostly",
    "start": "933279",
    "end": "939040"
  },
  {
    "text": "the same semantics though we have different types of them you can send a query to particular destination that you",
    "start": "939040",
    "end": "945319"
  },
  {
    "text": "know of or you can scatter the query and gather results sometimes when you don't",
    "start": "945319",
    "end": "950720"
  },
  {
    "text": "know exactly how many query handlers are out there that might have interesting responses for you and then you have",
    "start": "950720",
    "end": "956920"
  },
  {
    "text": "subscription queries where you initiate a query but it can be long lived so you'll get a result first and",
    "start": "956920",
    "end": "963959"
  },
  {
    "text": "then over time you get additional results as they occur and then we have events which will",
    "start": "963959",
    "end": "970240"
  },
  {
    "text": "be the main focus here as well because they follow the semantics of publish",
    "start": "970240",
    "end": "975800"
  },
  {
    "text": "subscribe you have any number of consumers out there either present or",
    "start": "975800",
    "end": "981480"
  },
  {
    "text": "being added or removed in the future and they typically don't provide any results for you there is no",
    "start": "981480",
    "end": "988560"
  },
  {
    "text": "acknowledgement more than the broker itself telling you yes I successfully got your message and deliver it to to a",
    "start": "988560",
    "end": "998560"
  },
  {
    "text": "consumer so since commands and queres are roughly the same well I'll try to",
    "start": "998560",
    "end": "1005160"
  },
  {
    "text": "combine the semantics for them in in one discussion and then we'll look specifically at events and what makes",
    "start": "1005160",
    "end": "1010319"
  },
  {
    "text": "them so particular so let's look at a simple",
    "start": "1010319",
    "end": "1016959"
  },
  {
    "text": "messaging flow where we have one service trying to trigger",
    "start": "1016959",
    "end": "1022000"
  },
  {
    "text": "something else in a different service so think of this as an operational workload or flow one service calling another",
    "start": "1022000",
    "end": "1028600"
  },
  {
    "text": "service and trigging some business logic or activity in the other service we'll start with",
    "start": "1028600",
    "end": "1034720"
  },
  {
    "text": "command I'm using here some kind of abstraction you can think of the command",
    "start": "1035959",
    "end": "1041240"
  },
  {
    "text": "uh broker or command bus the naming is not really important but this command is routed through some abstraction call a",
    "start": "1041240",
    "end": "1047798"
  },
  {
    "text": "bus to a command Handler this will be our first enforcement",
    "start": "1047799",
    "end": "1053960"
  },
  {
    "text": "point so imagine we have a token as we'll shortly see in the command this is",
    "start": "1053960",
    "end": "1059440"
  },
  {
    "text": "where we'll first have to check for uh proper",
    "start": "1059440",
    "end": "1065279"
  },
  {
    "text": "access in response to processing a command successfully you'll often see an",
    "start": "1065720",
    "end": "1071400"
  },
  {
    "text": "event being emitted as a consequence of processing this",
    "start": "1071400",
    "end": "1076600"
  },
  {
    "text": "command and this command again is routed to one or more event handlers through an",
    "start": "1076600",
    "end": "1082880"
  },
  {
    "text": "abstraction we can call an event bus and then we have the second enforcement point the event handler once",
    "start": "1082880",
    "end": "1089360"
  },
  {
    "text": "we process this message we typically want to enforce some policy to make sure",
    "start": "1089360",
    "end": "1095120"
  },
  {
    "text": "that some action that is to be taken on behalf of the user that is sort of tacked on in this",
    "start": "1095120",
    "end": "1101720"
  },
  {
    "text": "flow is permitted or denied we're still in one service",
    "start": "1101720",
    "end": "1109640"
  },
  {
    "text": "but now we want to propagate the identity context to another",
    "start": "1109640",
    "end": "1115640"
  },
  {
    "text": "service so we'll emit an event this is a subscript with an i so you can think of",
    "start": "1115640",
    "end": "1121720"
  },
  {
    "text": "as an integration event I typically don't like that name so think of this event as a an external event external to",
    "start": "1121720",
    "end": "1128559"
  },
  {
    "text": "the service whereas the first event without a subscript is an internal event",
    "start": "1128559",
    "end": "1134320"
  },
  {
    "text": "and this event for example can then be translated into another command to do something in um in the second service",
    "start": "1134320",
    "end": "1141880"
  },
  {
    "text": "and then you have your additional enforcement points as well in the second service so",
    "start": "1141880",
    "end": "1149240"
  },
  {
    "text": "two Services interacting through some kind of messaging um system using these notion",
    "start": "1149240",
    "end": "1156880"
  },
  {
    "text": "of buses for commands and events and the different types of enforcement points",
    "start": "1156880",
    "end": "1162480"
  },
  {
    "text": "that we uh can encounter again this is for an operational workload I'll be talking",
    "start": "1162480",
    "end": "1168080"
  },
  {
    "text": "about Analytical workloads in a",
    "start": "1168080",
    "end": "1172840"
  },
  {
    "text": "bit now to provide a little bit of abstraction here each of these Services",
    "start": "1173240",
    "end": "1179679"
  },
  {
    "text": "you can think of them as if you borrow some DDD terminology as bounded",
    "start": "1179679",
    "end": "1184919"
  },
  {
    "text": "contexts logical groupings of um Services one or more",
    "start": "1184919",
    "end": "1192919"
  },
  {
    "text": "services where the commands and queries are the apis to this particular bounded context again it can be one service or",
    "start": "1192919",
    "end": "1199919"
  },
  {
    "text": "many depending on your for example scaling needs a command typically means that you're updating some type of State",
    "start": "1199919",
    "end": "1206520"
  },
  {
    "text": "in this context this bounded context you have internal events that you can use to",
    "start": "1206520",
    "end": "1212000"
  },
  {
    "text": "for example uh update a view of some uh of some sort that you can query for",
    "start": "1212000",
    "end": "1218600"
  },
  {
    "text": "information are you familiar with cqrs perhaps you probably command query",
    "start": "1218600",
    "end": "1223960"
  },
  {
    "text": "responsibility segregation then this will probably familiar to you and then we have a bounded context emitting an",
    "start": "1223960",
    "end": "1230039"
  },
  {
    "text": "external event to another bounded context just as we saw in the previous slide these bounded contexts you can",
    "start": "1230039",
    "end": "1237480"
  },
  {
    "text": "make an analogy to vpcs there are logical groupings but the thing is inside of",
    "start": "1237480",
    "end": "1245039"
  },
  {
    "text": "this context the infrastructure we use for example for routing commands and internal events can be completely",
    "start": "1245039",
    "end": "1250880"
  },
  {
    "text": "different from the infrastructure we use between context that is often the",
    "start": "1250880",
    "end": "1256159"
  },
  {
    "text": "case so here we come to the merging of our responsibilities application",
    "start": "1256159",
    "end": "1262400"
  },
  {
    "text": "developers and network security administrators if we can sort of confine",
    "start": "1262400",
    "end": "1269640"
  },
  {
    "text": "ourselves to bound context and reassure ourselves that yes we're very very uh",
    "start": "1269640",
    "end": "1275240"
  },
  {
    "text": "determined to make sure that everything is safe inside of V contexts we can sort of relax our strict always verify never",
    "start": "1275240",
    "end": "1283760"
  },
  {
    "text": "trust um principle inside of the bound the contexts it depends depends on how much it will cost you to implement a",
    "start": "1283760",
    "end": "1290240"
  },
  {
    "text": "fully zero trust architecture inside of a context but typically if we work together application developers network",
    "start": "1290240",
    "end": "1296400"
  },
  {
    "text": "security Personnel we'll find a good compromise however between bounding contexts will",
    "start": "1296400",
    "end": "1303200"
  },
  {
    "text": "be less shed so that's where zero trust principles must typically follow to a l",
    "start": "1303200",
    "end": "1309559"
  },
  {
    "text": "to a larger",
    "start": "1309559",
    "end": "1312240"
  },
  {
    "text": "extent now we've seen that there are different number of enforcement points",
    "start": "1315279",
    "end": "1321520"
  },
  {
    "text": "where we need to check for Access for a particular identity that is propagated",
    "start": "1321520",
    "end": "1326840"
  },
  {
    "text": "along this flow how do we actually do this is there something we can utilize for this",
    "start": "1326840",
    "end": "1333039"
  },
  {
    "text": "purpose some of you might be familiar with open policy agents it's",
    "start": "1333039",
    "end": "1338279"
  },
  {
    "text": "a I would say recent standard or de facto standard but it's an open- Source",
    "start": "1338279",
    "end": "1344520"
  },
  {
    "text": "initiative which defines certain elements in a architecture for us to",
    "start": "1344520",
    "end": "1350520"
  },
  {
    "text": "work with Access Control policies in a straightforward manner so imagine we",
    "start": "1350520",
    "end": "1355840"
  },
  {
    "text": "have some type of request coming into a service or a context we'll have one",
    "start": "1355840",
    "end": "1362840"
  },
  {
    "text": "enforcement point a policy enforcement Point how do we get hold of that actual",
    "start": "1362840",
    "end": "1370080"
  },
  {
    "text": "policy well it's not up to us in the in that particular part we will delegate",
    "start": "1370080",
    "end": "1375799"
  },
  {
    "text": "that to a policy decision Point that's where the actual enforcement will occur",
    "start": "1375799",
    "end": "1381200"
  },
  {
    "text": "that's where the policy resides that's where extra data is available to make come to a decision so we from our policy",
    "start": "1381200",
    "end": "1389559"
  },
  {
    "text": "enforcement Point provide or invoke the PDP to make a decision for us the PDP in",
    "start": "1389559",
    "end": "1397559"
  },
  {
    "text": "turns relies on a policy Administration point to provide it with a policy bundle",
    "start": "1397559",
    "end": "1404240"
  },
  {
    "text": "basically give it give me what I need as a PDP to make a decision on behalf of a",
    "start": "1404240",
    "end": "1411080"
  },
  {
    "text": "p and then if we need additional data we might might be calling out to some external source for additional",
    "start": "1411400",
    "end": "1417799"
  },
  {
    "text": "information we can also let the policy decision Point call out to a policy",
    "start": "1417799",
    "end": "1423600"
  },
  {
    "text": "information point a lot of lingo but this is the basic setup again the enforcement point is what we are in",
    "start": "1423600",
    "end": "1429200"
  },
  {
    "text": "charge of in our code flow but we delegate the responsibility for a decision to a PDP the decision point if",
    "start": "1429200",
    "end": "1435840"
  },
  {
    "text": "everything works out we'll be be granted a green arrow to access to Resource do some action on that",
    "start": "1435840",
    "end": "1442520"
  },
  {
    "text": "resource so how does this all translate into for example handling a",
    "start": "1442520",
    "end": "1449279"
  },
  {
    "text": "command well we have a command we have a",
    "start": "1449279",
    "end": "1454880"
  },
  {
    "text": "token that is valid only inside of our Network boundary inside of our",
    "start": "1454880",
    "end": "1460240"
  },
  {
    "text": "context and this command is being processed by us in our code in our",
    "start": "1460240",
    "end": "1465360"
  },
  {
    "text": "enforcement point we delegate the decision to the PDP it",
    "start": "1465360",
    "end": "1470799"
  },
  {
    "text": "takes action or comes to decision and lets us process the command in our",
    "start": "1470799",
    "end": "1477240"
  },
  {
    "text": "Command Handler if everything turns out okay now you see this there's a box",
    "start": "1477240",
    "end": "1483039"
  },
  {
    "text": "around the p and PDP they are typically collocated why because we have to have",
    "start": "1483039",
    "end": "1488240"
  },
  {
    "text": "as a low latency as possible between those two um elements so in a kubernetes",
    "start": "1488240",
    "end": "1495159"
  },
  {
    "text": "environment you'll typically have them in the same pod two containers as a side car so your your application container",
    "start": "1495159",
    "end": "1502080"
  },
  {
    "text": "is the pp the PDP will be the open policy agent server so they'll be collocated and this will be present in",
    "start": "1502080",
    "end": "1510640"
  },
  {
    "text": "every process so if your service is actually multiple Services you'll have this set up for every service",
    "start": "1510640",
    "end": "1520039"
  },
  {
    "text": "there okay so we've seen what asynchronous communication means what message messaging entails different",
    "start": "1522919",
    "end": "1528919"
  },
  {
    "text": "message types and how Opa can help us to achieve this on a structural",
    "start": "1528919",
    "end": "1536120"
  },
  {
    "text": "level how do we actually go about implementing this if we have all these",
    "start": "1536120",
    "end": "1542120"
  },
  {
    "text": "elements available so first off a token typically",
    "start": "1542120",
    "end": "1549640"
  },
  {
    "text": "as in the synchronous case that we saw earlier is very shortlived it's expiration time is well short",
    "start": "1549640",
    "end": "1559440"
  },
  {
    "text": "now in our case that won't work why because again our operations can be long",
    "start": "1559440",
    "end": "1566960"
  },
  {
    "text": "running so we need to extend the expiration time for our",
    "start": "1566960",
    "end": "1573720"
  },
  {
    "text": "tokens moreover we can just do one token exchange right at the API Gateway that I",
    "start": "1573720",
    "end": "1580039"
  },
  {
    "text": "showed you earlier we need to uh create or generate tokens for each message that",
    "start": "1580039",
    "end": "1587039"
  },
  {
    "text": "we publish or send out again to make sure that no one",
    "start": "1587039",
    "end": "1594799"
  },
  {
    "text": "tampers with our message we'll have to Hash whatever data whatever",
    "start": "1594799",
    "end": "1599919"
  },
  {
    "text": "payload will'll include in our message and we'll have that as a claim that will be an attribute just like any other",
    "start": "1599919",
    "end": "1606399"
  },
  {
    "text": "claim for example who I am my email address and typically we also have a",
    "start": "1606399",
    "end": "1612120"
  },
  {
    "text": "message ID that we generate so at the top you'll have a stock change event",
    "start": "1612120",
    "end": "1620159"
  },
  {
    "text": "say we have our data product ID current quantity and a message ID that we",
    "start": "1620159",
    "end": "1627480"
  },
  {
    "text": "generate it will help us later as I'll show you that's our event that a Raw",
    "start": "1627480",
    "end": "1632919"
  },
  {
    "text": "event that's a data that we want to transmit and maybe this event is a consequence of handling another message",
    "start": "1632919",
    "end": "1639799"
  },
  {
    "text": "before a command that changed the stock say the token that will generate",
    "start": "1639799",
    "end": "1648279"
  },
  {
    "text": "will look like this in a a simpler format we'll have the subject that will",
    "start": "1648279",
    "end": "1654919"
  },
  {
    "text": "be me the user context or the identity context it will include my in this case",
    "start": "1654919",
    "end": "1661279"
  },
  {
    "text": "identity my email address will include the Mig and most importantly the message data hash so",
    "start": "1661279",
    "end": "1666960"
  },
  {
    "text": "we've hashed the data in the top code box that you see there and we have",
    "start": "1666960",
    "end": "1672840"
  },
  {
    "text": "included it in our token which has then been signed so the resulting event with the",
    "start": "1672840",
    "end": "1679320"
  },
  {
    "text": "token will be pretty much like we had before but we've added the token as well",
    "start": "1679320",
    "end": "1685840"
  },
  {
    "text": "now this token and this message this event in this case are",
    "start": "1685840",
    "end": "1691399"
  },
  {
    "text": "bound if for some reason this token were to be um",
    "start": "1691399",
    "end": "1697120"
  },
  {
    "text": "maliciously retrieved to be used in other messages that won't work because",
    "start": "1697120",
    "end": "1702240"
  },
  {
    "text": "we're bounded to this particular event and this payload so it's useless in any",
    "start": "1702240",
    "end": "1707519"
  },
  {
    "text": "other circumstance so if we send us this stock change event with the",
    "start": "1707519",
    "end": "1715559"
  },
  {
    "text": "token how do we consume this token so let's say that we have published this on",
    "start": "1715840",
    "end": "1721360"
  },
  {
    "text": "a message bus or broker and then we have one or more consumers consuming it and",
    "start": "1721360",
    "end": "1726720"
  },
  {
    "text": "processing it well first of all we need to verify the token just like we always do we get the claims the attributes that",
    "start": "1726720",
    "end": "1735320"
  },
  {
    "text": "we'll need use for Access Control we'll first see have we processed this",
    "start": "1735320",
    "end": "1741240"
  },
  {
    "text": "message before so for example let's say that this event was somehow",
    "start": "1741240",
    "end": "1747640"
  },
  {
    "text": "intercepted and some attacker is replaying sent us the same event again",
    "start": "1747640",
    "end": "1752919"
  },
  {
    "text": "we can use the message ID as sort of a check if we have seen this message",
    "start": "1752919",
    "end": "1758120"
  },
  {
    "text": "before it's no different really from how we approach at least once delivery so",
    "start": "1758120",
    "end": "1765679"
  },
  {
    "text": "you can think of it that way so we can reject that event if we've seen it before it's m maliciously",
    "start": "1765679",
    "end": "1773120"
  },
  {
    "text": "replayed then a super important thing we'll see if the hash of the data in",
    "start": "1773120",
    "end": "1778640"
  },
  {
    "text": "this event has been tampered with if this check it doesn't turn out",
    "start": "1778640",
    "end": "1786240"
  },
  {
    "text": "okay we must reject the event we can't consume it or process it because it",
    "start": "1786240",
    "end": "1792039"
  },
  {
    "text": "might have been changed by some attacker and finally the whole reason",
    "start": "1792039",
    "end": "1798120"
  },
  {
    "text": "why we're doing this is to make sure that we can then contact our policy",
    "start": "1798120",
    "end": "1803200"
  },
  {
    "text": "decision Point our open policy agent server with the resource that we want to",
    "start": "1803200",
    "end": "1809960"
  },
  {
    "text": "perform some action on and the claims that we have retrieved from the",
    "start": "1809960",
    "end": "1815440"
  },
  {
    "text": "token so again the token which we generate for every message that we want",
    "start": "1815840",
    "end": "1822760"
  },
  {
    "text": "to publish command event or query will be bound to that message so it doesn't",
    "start": "1822760",
    "end": "1828399"
  },
  {
    "text": "matter if this token would be hijacked somehow because it would be useless in",
    "start": "1828399",
    "end": "1833519"
  },
  {
    "text": "any other case so this is basically the mechanism",
    "start": "1833519",
    "end": "1840960"
  },
  {
    "text": "that we need for zero trust we're enforcing zero trust everywhere we have",
    "start": "1840960",
    "end": "1847320"
  },
  {
    "text": "enforcement points possible enforcement points in our async communication flow",
    "start": "1847320",
    "end": "1852640"
  },
  {
    "text": "and this works again for commands events and queries",
    "start": "1852640",
    "end": "1859240"
  },
  {
    "text": "so there are some things to consider if you actually want to implement this and",
    "start": "1861519",
    "end": "1867039"
  },
  {
    "text": "employ it on a broad basis in your distributed system for",
    "start": "1867039",
    "end": "1873840"
  },
  {
    "text": "one we're exchanging tokens or generating tokens for every type of",
    "start": "1873840",
    "end": "1879679"
  },
  {
    "text": "message that we publish now for low to mid",
    "start": "1879679",
    "end": "1886000"
  },
  {
    "text": "volume uh um messaging that could be fine but when you start to reach a huge",
    "start": "1886000",
    "end": "1891200"
  },
  {
    "text": "volume of messages that you need to publish that can be tricky because",
    "start": "1891200",
    "end": "1897080"
  },
  {
    "text": "you need to contact this authorization server to make sure that your new tokens",
    "start": "1897080",
    "end": "1902559"
  },
  {
    "text": "are exchanged and generated properly so there are some Alternatives",
    "start": "1902559",
    "end": "1907840"
  },
  {
    "text": "you can use what's called self-sign tokens for this um this does require",
    "start": "1907840",
    "end": "1914279"
  },
  {
    "text": "some certificate schemes that can compliment complicate your implementation but it's an option or",
    "start": "1914279",
    "end": "1920720"
  },
  {
    "text": "this authorization server this one instance that I've shown earlier that everybody talks to could also be placed",
    "start": "1920720",
    "end": "1927960"
  },
  {
    "text": "as a side car as a side container in your pod say so you'll both have an open",
    "start": "1927960",
    "end": "1933760"
  },
  {
    "text": "policy agent server which enforces policy and access control and this",
    "start": "1933760",
    "end": "1939240"
  },
  {
    "text": "authorization server to quickly uh create new tokens for this new event or command that you want to",
    "start": "1939240",
    "end": "1946080"
  },
  {
    "text": "publish also we've looked at operational",
    "start": "1946080",
    "end": "1952000"
  },
  {
    "text": "workflows meaning one service needs to indirectly communicate with some other service to trigger some business",
    "start": "1952000",
    "end": "1958240"
  },
  {
    "text": "activity in the in the latter one not all processes or flows are of that",
    "start": "1958240",
    "end": "1963720"
  },
  {
    "text": "nature some are more analytical so for example when I took the CF cab from the airport to my",
    "start": "1963720",
    "end": "1970080"
  },
  {
    "text": "hotel I'm or rather the system the bolt system that I implicitly use gener Ates",
    "start": "1970080",
    "end": "1977240"
  },
  {
    "text": "a price for me how important is the user context there could be useful or maybe",
    "start": "1977240",
    "end": "1983559"
  },
  {
    "text": "not depends on what the analytical workload entails",
    "start": "1983559",
    "end": "1990120"
  },
  {
    "text": "so yes you want to enforce zero trust but it might be less important in",
    "start": "1990120",
    "end": "1996519"
  },
  {
    "text": "certain circumstances but you should probably not avoid it entirely but be aware that",
    "start": "1996519",
    "end": "2001919"
  },
  {
    "text": "not everything uh is as enamored of this identity context that you propagate as",
    "start": "2001919",
    "end": "2007320"
  },
  {
    "text": "you might think some scenarios are less demanding of having that identity",
    "start": "2007320",
    "end": "2012440"
  },
  {
    "text": "context present I'll you see a bit more of this on the next slide event sourcing how",
    "start": "2012440",
    "end": "2019200"
  },
  {
    "text": "many you heard about event sourcing some of you it means that we're storing events long term we're basing",
    "start": "2019200",
    "end": "2027279"
  },
  {
    "text": "all of our state in one bounded context in one or more services in that context",
    "start": "2027279",
    "end": "2032760"
  },
  {
    "text": "on storing events and replaying them when we need to inside of that cont context now typically when you process",
    "start": "2032760",
    "end": "2040480"
  },
  {
    "text": "events without event sourcing you don't store events for a particularly long time you have a window of events that",
    "start": "2040480",
    "end": "2047720"
  },
  {
    "text": "you process and after that if some consumer enters the picture wants to consume events they're not available",
    "start": "2047720",
    "end": "2053720"
  },
  {
    "text": "they have to wait for any new events to be uh sent and then consumed but with",
    "start": "2053720",
    "end": "2060040"
  },
  {
    "text": "event sourcing you're storing them potentially forever what does that mean for your",
    "start": "2060040",
    "end": "2065720"
  },
  {
    "text": "expiration well you have to set it to a really long time we mentioned that we need to extend it",
    "start": "2065720",
    "end": "2071679"
  },
  {
    "text": "in this time what appropriately long time means is up to the actual",
    "start": "2071679",
    "end": "2078000"
  },
  {
    "text": "application but it needs to be set to such a time that if you replay this",
    "start": "2078000",
    "end": "2084000"
  },
  {
    "text": "event stream a year from now say you can still do access control so the token",
    "start": "2084000",
    "end": "2090079"
  },
  {
    "text": "hasn't expired normally this is not such a big deal",
    "start": "2090079",
    "end": "2095679"
  },
  {
    "text": "because um when you process an event inside of a context you might for example send a",
    "start": "2095679",
    "end": "2101800"
  },
  {
    "text": "notification via email but you only do that once if you replay the event stream a second time or a third time you're not",
    "start": "2101800",
    "end": "2108119"
  },
  {
    "text": "sending additional emails you're maybe using the Replay for other purposes say",
    "start": "2108119",
    "end": "2114760"
  },
  {
    "text": "building a view that you can query so we're typically avoiding side effects when we replay these events so",
    "start": "2114760",
    "end": "2121960"
  },
  {
    "text": "again the identity context will not be as important as the first time when you",
    "start": "2121960",
    "end": "2128079"
  },
  {
    "text": "actually wanted to check can this user send out an email to this target of",
    "start": "2128079",
    "end": "2134640"
  },
  {
    "text": "emails email addresses but once you've done that you don't maybe need to check",
    "start": "2134640",
    "end": "2140359"
  },
  {
    "text": "for that second or third time because you're not sending out those emails um after that first",
    "start": "2140359",
    "end": "2147280"
  },
  {
    "text": "time so again if you have these scenarios where the identic context is",
    "start": "2147280",
    "end": "2153640"
  },
  {
    "text": "not that important again for example for analytical workload you might um not disregard but downgrade",
    "start": "2153640",
    "end": "2162280"
  },
  {
    "text": "the importance of me the actual user and exchange me for a system user or system",
    "start": "2162280",
    "end": "2169000"
  },
  {
    "text": "role how many of you are familiar with I am in the cloud you have users that",
    "start": "2169000",
    "end": "2174440"
  },
  {
    "text": "invoke an action for example to uh deploy a Lambda in AWS but that",
    "start": "2174440",
    "end": "2180880"
  },
  {
    "text": "Lambda when it needs to talk to a database it will not use my credentials it will assume a role to contact that",
    "start": "2180880",
    "end": "2188240"
  },
  {
    "text": "database on my behalf so to speak we can have the same um thinking here we will elevate a",
    "start": "2188240",
    "end": "2197240"
  },
  {
    "text": "system role instead of my identity as the primary thing to check for and this comes into play for example",
    "start": "2197240",
    "end": "2204800"
  },
  {
    "text": "when we want to handle user removal so let's say that I've been authenticated",
    "start": "2204800",
    "end": "2211400"
  },
  {
    "text": "and authorized in some async flow and",
    "start": "2211400",
    "end": "2217640"
  },
  {
    "text": "we are replaying an event stream but I have been removed from the",
    "start": "2217640",
    "end": "2223359"
  },
  {
    "text": "system I'm not I don't have an account anymore again events are immutable and",
    "start": "2223359",
    "end": "2228680"
  },
  {
    "text": "if they're stored longterm like with the vent sourcing my token the information about me will still be there even though",
    "start": "2228680",
    "end": "2234839"
  },
  {
    "text": "I'm not a user anymore in the system my account is gone so this is where a system role can",
    "start": "2234839",
    "end": "2241560"
  },
  {
    "text": "probably be better so it's an assumed role and we'll check and do zero trust",
    "start": "2241560",
    "end": "2247880"
  },
  {
    "text": "enforcement with the system role instead of",
    "start": "2247880",
    "end": "2252599"
  },
  {
    "text": "me so again this can come up when you have analytical scenarios like determining a price surging price um or",
    "start": "2252920",
    "end": "2261880"
  },
  {
    "text": "with event sourcing can also happen if the background processing is not fast enough so an event is published onto a",
    "start": "2261880",
    "end": "2268960"
  },
  {
    "text": "broker a consumer is expected to consume it right away but for some reason it doesn't happen so the",
    "start": "2268960",
    "end": "2274960"
  },
  {
    "text": "token um is still there but I might be removed as user then we need to handle",
    "start": "2274960",
    "end": "2282640"
  },
  {
    "text": "it properly in this manner as well through a system user system role and um if I'm removed we can also",
    "start": "2282640",
    "end": "2289839"
  },
  {
    "text": "check this in our Access Control policy so if you use this Opa Rego language you",
    "start": "2289839",
    "end": "2295119"
  },
  {
    "text": "can see that if I as a user am no longer part of it the system if I'm not",
    "start": "2295119",
    "end": "2301680"
  },
  {
    "text": "if I'm present in the user's removed array well okay then access control",
    "start": "2301680",
    "end": "2306920"
  },
  {
    "text": "cannot be enforced for me this is a very special case though so",
    "start": "2306920",
    "end": "2312319"
  },
  {
    "text": "again I just wanted to uh provide the notion of sometimes",
    "start": "2312319",
    "end": "2318079"
  },
  {
    "text": "zero trust and enforcing Access Control will occur for a system level role",
    "start": "2318079",
    "end": "2324560"
  },
  {
    "text": "rather than me which is the sort of original uh user that we need to",
    "start": "2324560",
    "end": "2332560"
  },
  {
    "text": "verify and with that that's that's all I had to say",
    "start": "2332560",
    "end": "2337760"
  },
  {
    "text": "about the topic of access control and message driven systems again this is can",
    "start": "2337760",
    "end": "2343160"
  },
  {
    "text": "be tricky to implement but it's mostly a conversation with you between you as application developers and your your",
    "start": "2343160",
    "end": "2349560"
  },
  {
    "text": "network administrators who work with security on their level but there are",
    "start": "2349560",
    "end": "2355359"
  },
  {
    "text": "some simple mechanisms you can Implement to enforce zero trust hopefully youve",
    "start": "2355359",
    "end": "2360480"
  },
  {
    "text": "got an idea of how to do it in this session thank you very much and if you have any questions please go",
    "start": "2360480",
    "end": "2368760"
  },
  {
    "text": "[Applause]",
    "start": "2368760",
    "end": "2374459"
  },
  {
    "text": "ahead",
    "start": "2381319",
    "end": "2384319"
  }
]