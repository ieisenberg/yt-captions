[
  {
    "start": "0",
    "end": "162000"
  },
  {
    "text": "thanks for joining the typescript for f-sharp zealots talk so this is an this",
    "start": "1129",
    "end": "7589"
  },
  {
    "text": "is a talk I'm doing that's not primarily about f-sharp which might be a surprise to some people watching this as many",
    "start": "7589",
    "end": "16080"
  },
  {
    "text": "people who have seen some talks from you know I'm an f-sharp person but I thought",
    "start": "16080",
    "end": "22619"
  },
  {
    "text": "I'll speak about somewhat different experience that I had had recently so I",
    "start": "22619",
    "end": "28949"
  },
  {
    "text": "couldn't find better illustration for zealots than this meditating meditating kitten but who definitely knows what's",
    "start": "28949",
    "end": "36510"
  },
  {
    "text": "the best programming language to use I thought everybody needs a meditating kitten in these days so this is going to",
    "start": "36510",
    "end": "45539"
  },
  {
    "text": "be a fairly opinionated talk and I'm hoping that people will disagree with",
    "start": "45539",
    "end": "50550"
  },
  {
    "text": "some of the points and we can we can sort of follow up in the in the comments",
    "start": "50550",
    "end": "56879"
  },
  {
    "text": "I'll be on slack as well if people have have more things to say so why should",
    "start": "56879",
    "end": "63359"
  },
  {
    "text": "you why should you listen to this talk I'm going to be talking about my experience with using typescript for a",
    "start": "63359",
    "end": "70439"
  },
  {
    "text": "for one project that I've been working on and I'll say a little bit about the project first just so that you know what",
    "start": "70439",
    "end": "77640"
  },
  {
    "text": "kind of what kind of things are I've been I've been doing what sort of",
    "start": "77640",
    "end": "82830"
  },
  {
    "text": "motivated the the talk and then I'll say a few things about typescript and I'll",
    "start": "82830",
    "end": "91650"
  },
  {
    "text": "cover both the sort of the things that I thought were nice about it coming from",
    "start": "91650",
    "end": "96810"
  },
  {
    "text": "an F sharp perspective and the things that I thought were not so nice coming from an EXOR perspective now I don't",
    "start": "96810",
    "end": "104579"
  },
  {
    "text": "really expect everybody to be an F sharp zealot so the title of the thought was a bit misleading I'll show you some some",
    "start": "104579",
    "end": "113250"
  },
  {
    "text": "relevant bits of F sharp code but it's going to be fairly introductory so the",
    "start": "113250",
    "end": "120240"
  },
  {
    "text": "the thing I've been working working on and this is this is a sort of project",
    "start": "120240",
    "end": "128610"
  },
  {
    "text": "that we've been doing using our base have been using typescript",
    "start": "128610",
    "end": "133860"
  },
  {
    "text": "this system that I've been building in collaboration with some people in the Alan Turing Institute in London which is",
    "start": "133860",
    "end": "142110"
  },
  {
    "text": "trying to produce a new notebook system for doing data science and it's it does",
    "start": "142110",
    "end": "148860"
  },
  {
    "text": "a few interesting things which I'll talk about and the important bit is that",
    "start": "148860",
    "end": "153930"
  },
  {
    "text": "there's a client side that's fairly non-trivial or does some interesting things and that has been implemented in",
    "start": "153930",
    "end": "160080"
  },
  {
    "text": "in typescript so what does this actually do there's a few things that make this",
    "start": "160080",
    "end": "166140"
  },
  {
    "start": "162000",
    "end": "162000"
  },
  {
    "text": "this project interesting first of all if you're doing data science then these",
    "start": "166140",
    "end": "171270"
  },
  {
    "text": "days typically your entire sort of workflow has to be in one language typically Python or R we're doing",
    "start": "171270",
    "end": "179070"
  },
  {
    "text": "something where it's easy to mix multiple languages in a single project",
    "start": "179070",
    "end": "185000"
  },
  {
    "text": "we're also doing quite a lot of clever work to track dependencies between",
    "start": "185000",
    "end": "190020"
  },
  {
    "text": "different different bits of code in your cysts in your code in your notebook so",
    "start": "190020",
    "end": "195600"
  },
  {
    "text": "that when you change something at the beginning the things that are later on get invalidated we want to be able to do",
    "start": "195600",
    "end": "203610"
  },
  {
    "text": "more in the browser so if you just sort of join some interactive data exploration that is something you should",
    "start": "203610",
    "end": "210660"
  },
  {
    "text": "be able to do straight in your web browser and we have this feature called",
    "start": "210660",
    "end": "216180"
  },
  {
    "text": "AI assistants which are our clever tools that help you with with some of the common boring data wrangling problems so",
    "start": "216180",
    "end": "225920"
  },
  {
    "text": "you can actually try this yourself if you go to rattler org we've got a button",
    "start": "225920",
    "end": "232470"
  },
  {
    "text": "which which will load an instance of the system on someone else's computer in the",
    "start": "232470",
    "end": "238530"
  },
  {
    "text": "cloud so you can sort of experiment with it quite easily and what you get is this",
    "start": "238530",
    "end": "245610"
  },
  {
    "text": "is this I'm going to make this a bit bigger just so that it's easier to see",
    "start": "245610",
    "end": "253110"
  },
  {
    "text": "so you get the way the system works is",
    "start": "253110",
    "end": "259169"
  },
  {
    "text": "that it integrates with the standard environment that data scientists use",
    "start": "259169",
    "end": "264720"
  },
  {
    "text": "called Jupiter so this is not really a sort of stand-alone system altogether",
    "start": "264720",
    "end": "270150"
  },
  {
    "text": "it's it integrates with with what people are already using and it adds a new kind",
    "start": "270150",
    "end": "276160"
  },
  {
    "text": "of notebook so this this this whole thing that I'm scrolling through right",
    "start": "276160",
    "end": "282400"
  },
  {
    "text": "now this is actually the bit running the bit of code that we wrote so it's is",
    "start": "282400",
    "end": "289990"
  },
  {
    "text": "hosting sort of standalone notebook inside this the speaker IDE and I can do",
    "start": "289990",
    "end": "298810"
  },
  {
    "text": "various things so here's a sample in Python where I'm just creating some sample plot so I'm not really a data",
    "start": "298810",
    "end": "307450"
  },
  {
    "text": "scientist so I'm not going to tell you much about data science I'm just going to tell you about building tools for",
    "start": "307450",
    "end": "313330"
  },
  {
    "text": "data science now the more interesting thing is here so what I'm doing here is",
    "start": "313330",
    "end": "321010"
  },
  {
    "text": "I've got a cell or code block written in Python and what this does is that it",
    "start": "321010",
    "end": "326860"
  },
  {
    "text": "uses this under sly berry to read a CSV file from github and it reads some",
    "start": "326860",
    "end": "333280"
  },
  {
    "text": "finance charts and then I can evaluate that but following that I've got a",
    "start": "333280",
    "end": "340840"
  },
  {
    "text": "JavaScript code block that loads the plotly data visualization library and",
    "start": "340840",
    "end": "346050"
  },
  {
    "text": "I've got a JavaScript code block that exercise this",
    "start": "346050",
    "end": "353740"
  },
  {
    "text": "[Music] AAPL data set that I load it in the",
    "start": "353740",
    "end": "359530"
  },
  {
    "text": "previous Python code block so the really interesting thing here is I can mix",
    "start": "359530",
    "end": "365590"
  },
  {
    "text": "Python and JavaScript and if I run this without any sort of explicit passing of",
    "start": "365590",
    "end": "371050"
  },
  {
    "text": "data between Python and JavaScript I'm able to build nice interactive charts so",
    "start": "371050",
    "end": "377740"
  },
  {
    "text": "this is showing some finance data my zooming skills are quite bad so that's",
    "start": "377740",
    "end": "384430"
  },
  {
    "text": "one thing we are doing the other interesting thing is how does",
    "start": "384430",
    "end": "389560"
  },
  {
    "text": "the tracking between dependencies work so in a typical data science system what",
    "start": "389560",
    "end": "395650"
  },
  {
    "text": "you get is you just have to run through the code sort of from top to bottom and if you miss something at the beginning",
    "start": "395650",
    "end": "401760"
  },
  {
    "text": "later on you'll get errors saying ah you didn't run or a variable 1 is undefined",
    "start": "401760",
    "end": "409410"
  },
  {
    "text": "so this system does something more clever where here I'm defining data sets",
    "start": "409410",
    "end": "416920"
  },
  {
    "text": "1 2 & 3 in JavaScript Python and in R and then I have a bit of code on again",
    "start": "416920",
    "end": "424240"
  },
  {
    "text": "JavaScript Python and R that just connects all these three data frames together and if I try to run one of",
    "start": "424240",
    "end": "431290"
  },
  {
    "text": "those then it figures out that it has to evaluate all these all these cells that",
    "start": "431290",
    "end": "437890"
  },
  {
    "text": "I had at the beginning so it does that those create some data frames and then it evaluates the one I clicked on but it",
    "start": "437890",
    "end": "446650"
  },
  {
    "text": "doesn't evaluate another sort of cell that I had earlier in the notebook that",
    "start": "446650",
    "end": "453100"
  },
  {
    "text": "doesn't really where the current one doesn't depend on it so it does it does a bit of clever sort",
    "start": "453100",
    "end": "460270"
  },
  {
    "text": "of tracking to figure out what depends on what and I can even visualize this so",
    "start": "460270",
    "end": "467200"
  },
  {
    "text": "we have this little visualizer where you can see how the different bits of code",
    "start": "467200",
    "end": "473430"
  },
  {
    "text": "all depend on each other so there's there some cells those are the bluish",
    "start": "473430",
    "end": "480550"
  },
  {
    "text": "markdown cells which are just code just comments they don't depend on anything",
    "start": "480550",
    "end": "485850"
  },
  {
    "text": "but then there's there's some are code some",
    "start": "485850",
    "end": "493470"
  },
  {
    "text": "Python code and some JavaScript code and you can see that this depends on the inputs and outputs depend on that so",
    "start": "493470",
    "end": "503480"
  },
  {
    "text": "this is what we've been what we've been building and I just wanted to give you a",
    "start": "503480",
    "end": "509610"
  },
  {
    "text": "clear sort of quick quick demo of the system itself so that you know what's",
    "start": "509610",
    "end": "515820"
  },
  {
    "start": "513000",
    "end": "513000"
  },
  {
    "text": "what's my what's my sort of background where I'm coming from so the client-side what I was sort of",
    "start": "515820",
    "end": "522719"
  },
  {
    "text": "playing with in the browser that's all implemented in typescript and as I admitted already",
    "start": "522720",
    "end": "529440"
  },
  {
    "text": "I'm an excerpt person so why did we end up with typescript so this was this was",
    "start": "529440",
    "end": "534930"
  },
  {
    "text": "a project with a larger team we're more more people in the team knew typescript",
    "start": "534930",
    "end": "540000"
  },
  {
    "text": "and that was one of the motivations and I wasn't really working on this",
    "start": "540000",
    "end": "547410"
  },
  {
    "text": "full-time so it was it was quite important so so that sort of work in a",
    "start": "547410",
    "end": "552870"
  },
  {
    "text": "way where others can be in control and and do things even when I disappear for",
    "start": "552870",
    "end": "558900"
  },
  {
    "text": "a few weeks so that was one of the reasons for choosing typescript the",
    "start": "558900",
    "end": "564930"
  },
  {
    "text": "other thing we thought was that the Jupiter platform itself is implemented",
    "start": "564930",
    "end": "569970"
  },
  {
    "text": "in typescript so if we do the same thing then maybe people might contribute a bit more which is a nice nice idea in theory",
    "start": "569970",
    "end": "578400"
  },
  {
    "text": "in practice that actually doesn't happen so getting outside contributors is",
    "start": "578400",
    "end": "584850"
  },
  {
    "text": "always difficult so what are what are the sort of reflections on typescript",
    "start": "584850",
    "end": "591630"
  },
  {
    "text": "based on that project and this is again this is sort of reflections coming from",
    "start": "591630",
    "end": "597000"
  },
  {
    "text": "an F sharp perspective so maybe it's sort of interesting and not necessarily a mainstream B you on typescript so",
    "start": "597000",
    "end": "604740"
  },
  {
    "text": "that's that's why I thought this was an interesting thing to say the good thing",
    "start": "604740",
    "end": "610440"
  },
  {
    "text": "is that you can actually do fairly nice functional programming in typescript or",
    "start": "610440",
    "end": "616500"
  },
  {
    "text": "you can use the sort of elegant beautiful functional",
    "start": "616500",
    "end": "622340"
  },
  {
    "text": "architecture and I'll spent quite a bit of time showing how that worked",
    "start": "622340",
    "end": "627480"
  },
  {
    "text": "the bet is that the typescript system does make some difficult trade-offs in",
    "start": "627480",
    "end": "633570"
  },
  {
    "text": "the type system and this is this is inevitable because that's how typescript was designed it's sort of designed to",
    "start": "633570",
    "end": "640650"
  },
  {
    "text": "deal with full full JavaScript world so you have to make those changes or make those decisions there's nothing else",
    "start": "640650",
    "end": "648450"
  },
  {
    "text": "that could be done but it does make certain certain functional programming",
    "start": "648450",
    "end": "655200"
  },
  {
    "text": "patterns quite annoying and one that I found which I call 2d ugly here is you",
    "start": "655200",
    "end": "664260"
  },
  {
    "text": "would think that typescript has the sort of simple simple JavaScript syntax but",
    "start": "664260",
    "end": "670700"
  },
  {
    "text": "that isn't really the case anymore so I'll have a few complaints about syntax",
    "start": "670700",
    "end": "677060"
  },
  {
    "text": "it's not quite the what talk but you'll see what what happens so I want to start",
    "start": "677060",
    "end": "685770"
  },
  {
    "text": "with the good things so that those of you who are interested and like",
    "start": "685770",
    "end": "691440"
  },
  {
    "text": "typescript can watch the first step part of the talk and then switch to some other session if you don't want to hear",
    "start": "691440",
    "end": "697200"
  },
  {
    "text": "me rambling about the bad and ugly the good thing so the way we structured our",
    "start": "697200",
    "end": "704250"
  },
  {
    "start": "702000",
    "end": "702000"
  },
  {
    "text": "system is we're using this Elm style architecture and we've actually",
    "start": "704250",
    "end": "711590"
  },
  {
    "text": "implemented quite a lot of that ourselves except for one monkey bit and",
    "start": "711590",
    "end": "716960"
  },
  {
    "text": "the reason and the nice thing in this architecture is if you're using function",
    "start": "716960",
    "end": "724020"
  },
  {
    "text": "style you really just have two immutable types representing the state the moral",
    "start": "724020",
    "end": "729930"
  },
  {
    "text": "and event what is happening in your in your notebook and then you have two",
    "start": "729930",
    "end": "735270"
  },
  {
    "text": "functions update and render and they're purely functional and our implementation",
    "start": "735270",
    "end": "741510"
  },
  {
    "text": "has very few dependencies the nice thing about this model is that it's really easy to debug and understand what's",
    "start": "741510",
    "end": "749130"
  },
  {
    "text": "going on and in a system that's fairly interactive we're sort of cells are evaluated in the",
    "start": "749130",
    "end": "755460"
  },
  {
    "text": "background and and stuff like that this has been quite valuable so why why not",
    "start": "755460",
    "end": "762330"
  },
  {
    "text": "just use react and this is a question that I think is is important because I'm",
    "start": "762330",
    "end": "768780"
  },
  {
    "text": "going to show you how to implement a few things from scratch and I think this is",
    "start": "768780",
    "end": "774510"
  },
  {
    "text": "very often a sort of good approach if if certain things are true so our a user",
    "start": "774510",
    "end": "783060"
  },
  {
    "text": "interface in the system it's not very fancy like it's really just this page so",
    "start": "783060",
    "end": "788130"
  },
  {
    "text": "the fancy things here are well there's a few buttons for like moving things around we're using the Monaco editor",
    "start": "788130",
    "end": "796850"
  },
  {
    "text": "that's the only that's the only sort of rich components that we need but we're",
    "start": "796850",
    "end": "803580"
  },
  {
    "text": "not building like complicated forms for entering dates and stuff where react has",
    "start": "803580",
    "end": "808830"
  },
  {
    "text": "a lot of components so we don't really need a lot of components the other thing",
    "start": "808830",
    "end": "813840"
  },
  {
    "text": "is that this is project that's been going on for a few years and it's sort of done at an academic",
    "start": "813840",
    "end": "822840"
  },
  {
    "text": "pace where you get back to it sort of every every once in a while when you add",
    "start": "822840",
    "end": "827850"
  },
  {
    "text": "new things so it's not exactly great if all your dependencies completely change",
    "start": "827850",
    "end": "834600"
  },
  {
    "text": "between every time you sort of get back to your system I think this is something",
    "start": "834600",
    "end": "841110"
  },
  {
    "text": "that's fine if you're sort of constantly working on a project every day or every",
    "start": "841110",
    "end": "846360"
  },
  {
    "text": "week but if you have longer gaps then I think having fewer dependencies is",
    "start": "846360",
    "end": "853200"
  },
  {
    "text": "actually what makes the development more sustainable and we do like the fact that",
    "start": "853200",
    "end": "858570"
  },
  {
    "text": "we have more control over how things work because for example here you need",
    "start": "858570",
    "end": "864060"
  },
  {
    "text": "to integrate with the Jupiter environment all the stuff around so you do need a certain level of control of",
    "start": "864060",
    "end": "871230"
  },
  {
    "text": "how the user interface is rendered and",
    "start": "871230",
    "end": "876270"
  },
  {
    "text": "it turns out that the core logic that that react or all these sort of modern",
    "start": "876270",
    "end": "881480"
  },
  {
    "text": "programming methods for the web what they what they do is actually pretty simple",
    "start": "881480",
    "end": "886720"
  },
  {
    "text": "sorry I'm going to show you that I'm going to show you that the way the",
    "start": "886720",
    "end": "893140"
  },
  {
    "text": "architecture works and for this part I want to show you the F Serb code first",
    "start": "893140",
    "end": "899710"
  },
  {
    "text": "and then how the same things look in same thing looks in typescript so this has really two purposes one is I think",
    "start": "899710",
    "end": "908050"
  },
  {
    "text": "the F sharp version of it is quite clean and it conveys the idea very well so",
    "start": "908050",
    "end": "914290"
  },
  {
    "text": "I'll show you how to do this and F sharp to explain how things work and if you're",
    "start": "914290",
    "end": "919960"
  },
  {
    "text": "familiar with with or you can you can use the F sharp part to make sense of it",
    "start": "919960",
    "end": "926500"
  },
  {
    "text": "and then sort of see how the same thing works in works in typescript and I think",
    "start": "926500",
    "end": "935200"
  },
  {
    "text": "that the other thing is that the sort of typescript version will then help you understand what's going on in F sharp",
    "start": "935200",
    "end": "941380"
  },
  {
    "text": "here so I'm just going to start my sample project",
    "start": "941380",
    "end": "948630"
  },
  {
    "text": "and I've got all my code here already so let's just let's just wait until the",
    "start": "949139",
    "end": "955879"
  },
  {
    "text": "backpack server launches so here in F sharp I'm using fable which is f sharp",
    "start": "955879",
    "end": "962040"
  },
  {
    "text": "to JavaScript compiler that takes my absorb code produces produces JavaScript",
    "start": "962040",
    "end": "967649"
  },
  {
    "text": "and passes it through all standard JavaScript things like backpack for for",
    "start": "967649",
    "end": "974220"
  },
  {
    "text": "building and life reloads and this is running seven oh seven one so right now",
    "start": "974220",
    "end": "986999"
  },
  {
    "text": "I've got a page that says welcome to counter this is not going to be a super super inspiring demo I'll just create a",
    "start": "986999",
    "end": "996449"
  },
  {
    "text": "little counter where I'm going to count the number of clicks on a button so the",
    "start": "996449",
    "end": "1003649"
  },
  {
    "text": "way to do this is I have two types that represent model and event and model is",
    "start": "1003649",
    "end": "1010100"
  },
  {
    "text": "my state in the application so in my",
    "start": "1010100",
    "end": "1016009"
  },
  {
    "text": "state I'll just have count and initially let's start with 0 and then when I'm",
    "start": "1016009",
    "end": "1023449"
  },
  {
    "text": "rendering it then I'm going to I'm going to put I can say current count and then",
    "start": "1023449",
    "end": "1032480"
  },
  {
    "text": "at the add the current count and the current count is something that comes",
    "start": "1032480",
    "end": "1040610"
  },
  {
    "text": "from I need some more parentheses from",
    "start": "1040610",
    "end": "1045620"
  },
  {
    "text": "this state state variable so the way the system works is that I define what's my",
    "start": "1045620",
    "end": "1051529"
  },
  {
    "text": "state I define an initial state so my",
    "start": "1051529",
    "end": "1056659"
  },
  {
    "text": "state has count it's an int initially 0 and then I define a rendering function",
    "start": "1056659",
    "end": "1062659"
  },
  {
    "text": "that uses this little domain-specific language for generating HTML and it can",
    "start": "1062659",
    "end": "1068360"
  },
  {
    "text": "access the state if I save this then I get current count is 0",
    "start": "1068360",
    "end": "1075149"
  },
  {
    "text": "and I can add some buttons to increment and decrement so I'm going to create a",
    "start": "1075149",
    "end": "1085379"
  },
  {
    "text": "button and this is going to be text plus one and I'll add a button for minus one",
    "start": "1085379",
    "end": "1091859"
  },
  {
    "text": "as well if I save this I now get my buttons and how do you handle events in",
    "start": "1091859",
    "end": "1098849"
  },
  {
    "text": "this architecture so the idea is that you define a type for events and here",
    "start": "1098849",
    "end": "1107249"
  },
  {
    "text": "I'll just define one message which says update the state and it's going to take",
    "start": "1107249",
    "end": "1113489"
  },
  {
    "text": "an integer as an argument and that's going to be plus 1 or minus 1 and in the",
    "start": "1113489",
    "end": "1120539"
  },
  {
    "text": "user interface you can then trigger those events so I can say whenever click",
    "start": "1120539",
    "end": "1126029"
  },
  {
    "text": "happens on the +1 button I want to trigger the update event with",
    "start": "1126029",
    "end": "1134249"
  },
  {
    "text": "plus 1 and whenever click happens on the minus 1 button I'm going to get minus 1",
    "start": "1134249",
    "end": "1144419"
  },
  {
    "text": "and the the key thing is I now have to implement this other function called",
    "start": "1144419",
    "end": "1149669"
  },
  {
    "text": "state called update which takes the current state and a message and we're",
    "start": "1149669",
    "end": "1156749"
  },
  {
    "text": "going to pattern match on the message if this is update by some number then we're",
    "start": "1156749",
    "end": "1163080"
  },
  {
    "text": "going to return a new state where the count is the original count plus the",
    "start": "1163080",
    "end": "1170820"
  },
  {
    "text": "difference so I think this should this should actually do all I want it let's",
    "start": "1170820",
    "end": "1177749"
  },
  {
    "text": "see if it if it can count can it count plus works - works all right so this is",
    "start": "1177749",
    "end": "1184109"
  },
  {
    "text": "the core the core thing now I want to make one more change I want to do it so",
    "start": "1184109",
    "end": "1190710"
  },
  {
    "text": "that the count initially is not started like you start with a counter that's not",
    "start": "1190710",
    "end": "1196769"
  },
  {
    "text": "initialized you have to click the start button and the F sharp way of doing this is to use the option type so now I'm",
    "start": "1196769",
    "end": "1204869"
  },
  {
    "text": "saying account can be a number or it can be set and initially this is going to be",
    "start": "1204869",
    "end": "1211840"
  },
  {
    "text": "man indicating this has not been set yet and in my rendering and I'm going to",
    "start": "1211840",
    "end": "1222190"
  },
  {
    "text": "save a bit of typing here in my rendering I'm going to pattern match on",
    "start": "1222190",
    "end": "1227710"
  },
  {
    "text": "the count and if this has not been set meaning I haven't started counting yet",
    "start": "1227710",
    "end": "1233680"
  },
  {
    "text": "I'll generate a pay up page with welcome to counter and a start button if the",
    "start": "1233680",
    "end": "1241180"
  },
  {
    "text": "current count has already been stopped the counting has started I'll generate a page with",
    "start": "1241180",
    "end": "1247590"
  },
  {
    "text": "and the start button is going to send a new type of message which I'm calling",
    "start": "1247590",
    "end": "1253260"
  },
  {
    "text": "reset and one nice thing in F sharp is",
    "start": "1253260",
    "end": "1258900"
  },
  {
    "text": "that all those things are are checked so I get a message here saying in my update",
    "start": "1258900",
    "end": "1264210"
  },
  {
    "text": "function I'm not handling the risk reset message so if I get the reset message",
    "start": "1264210",
    "end": "1272370"
  },
  {
    "text": "then this is the case where I want to return zero to initialize my counter and",
    "start": "1272370",
    "end": "1280559"
  },
  {
    "text": "I'm go also going to have to pattern match on the current count so reset that",
    "start": "1280559",
    "end": "1287970"
  },
  {
    "text": "ignores the current count but if I'm ignoring if I'm updating then I need to",
    "start": "1287970",
    "end": "1295200"
  },
  {
    "text": "get the count and updated by a certain number and this is this is going to be",
    "start": "1295200",
    "end": "1300929"
  },
  {
    "text": "set which is indicated by the some case if i get update but i haven't really",
    "start": "1300929",
    "end": "1307710"
  },
  {
    "text": "started counting yet this is an invalid operation i'm just going to ignore it",
    "start": "1307710",
    "end": "1313080"
  },
  {
    "text": "although you should probably throw an error message in this case so if i if i",
    "start": "1313080",
    "end": "1319679"
  },
  {
    "text": "save it i have a counter where i can start and then i can count so this is",
    "start": "1319679",
    "end": "1328980"
  },
  {
    "text": "this is all i wanted to show an f-sharp thank you shut this down and i think",
    "start": "1328980",
    "end": "1336299"
  },
  {
    "text": "this is really really a nice approach to implementing reactive web applications",
    "start": "1336299",
    "end": "1343529"
  },
  {
    "text": "where you're in sort of it's not i",
    "start": "1343529",
    "end": "1349020"
  },
  {
    "text": "wouldn't necessarily use this if i was using something with like lots of forms where there's standard components for",
    "start": "1349020",
    "end": "1355409"
  },
  {
    "text": "doing that it works really nicely for this case because we're basically creating our own user interface and",
    "start": "1355409",
    "end": "1364200"
  },
  {
    "text": "f-sharp has this really nice way of modeling modeling domain logic so this",
    "start": "1364200",
    "end": "1371100"
  },
  {
    "text": "is another example where i'm saying i'm implementing a to-do list the model is",
    "start": "1371100",
    "end": "1377250"
  },
  {
    "text": "the list of to-do items a to-do item has a title and a due day and what can happen is I can add a new",
    "start": "1377250",
    "end": "1384390"
  },
  {
    "text": "item or I can reset and in the Elm architecture you have these two",
    "start": "1384390",
    "end": "1389670"
  },
  {
    "text": "operations update and render where update takes the current model and a",
    "start": "1389670",
    "end": "1395670"
  },
  {
    "text": "message what's what's happened and it produces the new state new model render",
    "start": "1395670",
    "end": "1400770"
  },
  {
    "text": "takes mainly the model and produces an",
    "start": "1400770",
    "end": "1405990"
  },
  {
    "text": "HTML output and it also has this trigger operation which is this first function",
    "start": "1405990",
    "end": "1411900"
  },
  {
    "text": "here and that's used for triggering events so can we do the same thing in",
    "start": "1411900",
    "end": "1420210"
  },
  {
    "start": "1417000",
    "end": "1417000"
  },
  {
    "text": "typescript there's a few things that I'm going to be using so first of all I",
    "start": "1420210",
    "end": "1428190"
  },
  {
    "text": "really like the way I've sharp type checks everything and if you're using typescript then typescript has various",
    "start": "1428190",
    "end": "1436770"
  },
  {
    "text": "flags that you can turn on for enabling various security checks or checks in the",
    "start": "1436770",
    "end": "1442440"
  },
  {
    "text": "type system so there's strict null checks flag to avoid nulls",
    "start": "1442440",
    "end": "1447540"
  },
  {
    "text": "and no implicit any to avoid this any type which means any any JavaScript",
    "start": "1447540",
    "end": "1453900"
  },
  {
    "text": "value so this is this is really useful and we've been using that and there's a",
    "start": "1453900",
    "end": "1461340"
  },
  {
    "text": "flag just strict which terms all these things on so I'll show you how this how",
    "start": "1461340",
    "end": "1466680"
  },
  {
    "text": "this works and it turns out that you can use typescript actually reasonably well",
    "start": "1466680",
    "end": "1473100"
  },
  {
    "text": "for implementing both the record types that I was using an f-sharp and these",
    "start": "1473100",
    "end": "1478410"
  },
  {
    "text": "discriminated unions that I was using for representing the messages now those",
    "start": "1478410",
    "end": "1485160"
  },
  {
    "text": "aren't really immutable so here you just rely on being disciplined about how to",
    "start": "1485160",
    "end": "1490290"
  },
  {
    "text": "use them and it's it's one thing that we didn't always do well in our project so",
    "start": "1490290",
    "end": "1495780"
  },
  {
    "text": "we then occasionally mutate something by accident and then ended up scratching our heads for for a half an hour to find",
    "start": "1495780",
    "end": "1503340"
  },
  {
    "text": "where we did that so what I want to do now is do basically",
    "start": "1503340",
    "end": "1509400"
  },
  {
    "text": "exactly the same thing but in pipe script so I've got the same stub",
    "start": "1509400",
    "end": "1518780"
  },
  {
    "text": "implemented here and I'll start it",
    "start": "1518780",
    "end": "1523730"
  },
  {
    "text": "and in this project and I'll I'll send link to the code the only thing that I'm",
    "start": "1527590",
    "end": "1536450"
  },
  {
    "text": "not really showing you as this is this Alma GPS file which is using the the",
    "start": "1536450",
    "end": "1542150"
  },
  {
    "text": "market library and what the library does for us is the updating of the back page",
    "start": "1542150",
    "end": "1548750"
  },
  {
    "text": "updating of the Dom so this is the sort of standard virtual Dom trick where",
    "start": "1548750",
    "end": "1554330"
  },
  {
    "text": "we're not really replacing the whole the whole content of the screen we're just",
    "start": "1554330",
    "end": "1559850"
  },
  {
    "text": "updating bits there but you could see that this was this was all my code here",
    "start": "1559850",
    "end": "1566420"
  },
  {
    "text": "is some why is it 50 lines of code so I'm not really hiding anything",
    "start": "1566420",
    "end": "1571460"
  },
  {
    "text": "complicated and I'm just using one external library and I'll do you exactly",
    "start": "1571460",
    "end": "1578990"
  },
  {
    "text": "the same thing as I did before in F sharp so I'll have a type representing my state called model and I'll have a",
    "start": "1578990",
    "end": "1586580"
  },
  {
    "text": "type representing my events and then I'll have a render function which says",
    "start": "1586580",
    "end": "1591890"
  },
  {
    "text": "welcome to counter and an update function where I do the update when some",
    "start": "1591890",
    "end": "1597410"
  },
  {
    "text": "some event happens and I have an initial state and then I just call my helper to",
    "start": "1597410",
    "end": "1602600"
  },
  {
    "text": "start the app so this I thought running on another",
    "start": "1602600",
    "end": "1608210"
  },
  {
    "text": "port there is s just to show that this is actually running if I say from",
    "start": "1608210",
    "end": "1617119"
  },
  {
    "text": "typescript this should sooner or later reload there",
    "start": "1617119",
    "end": "1622729"
  },
  {
    "text": "it is let's reload it says welcome from PI script so I want to recreate the same",
    "start": "1622729",
    "end": "1630799"
  },
  {
    "text": "thing I did in excerpt so the model this is this is going to be quite easy",
    "start": "1630799",
    "end": "1636049"
  },
  {
    "text": "I'll just have count and that's going to be a number and the more interesting",
    "start": "1636049",
    "end": "1645590"
  },
  {
    "text": "thing is how do you actually represent those events so I had two events I had",
    "start": "1645590",
    "end": "1652159"
  },
  {
    "text": "reset event and the representation you",
    "start": "1652159",
    "end": "1657229"
  },
  {
    "text": "can use in typescript realize on on two things it relies on Union types where you can",
    "start": "1657229",
    "end": "1663919"
  },
  {
    "text": "say a type is one type or another type but it also relies on this on this very",
    "start": "1663919",
    "end": "1670129"
  },
  {
    "text": "interesting trick with singleton types or um where I can say a resset event has",
    "start": "1670129",
    "end": "1678229"
  },
  {
    "text": "a kind and the type I'm using here is it's not string is just a constant",
    "start": "1678229",
    "end": "1684859"
  },
  {
    "text": "string called reset and a reset event",
    "start": "1684859",
    "end": "1690799"
  },
  {
    "text": "just doesn't have anything else I also have update event and this is going to",
    "start": "1690799",
    "end": "1696289"
  },
  {
    "text": "have a kind update and a number by how",
    "start": "1696289",
    "end": "1701989"
  },
  {
    "text": "much and then the event is either reset event or update event so this is really",
    "start": "1701989",
    "end": "1709549"
  },
  {
    "text": "pretty much the same as the absorb discriminated Union and we'll see that",
    "start": "1709549",
    "end": "1715639"
  },
  {
    "text": "this is this is quite interesting when we use this the way I'm going to do the",
    "start": "1715639",
    "end": "1722269"
  },
  {
    "text": "rendering well first of all I should I should do my initialization correctly so let's start with count equals one hold",
    "start": "1722269",
    "end": "1730249"
  },
  {
    "text": "on one you can see the biggest problem for an f-sharp person coming to typescript is you have to use colons and",
    "start": "1730249",
    "end": "1737179"
  },
  {
    "text": "multiples and this bit here is the same kind of",
    "start": "1737179",
    "end": "1747019"
  },
  {
    "text": "HTML rendering so we're going to render",
    "start": "1747019",
    "end": "1752919"
  },
  {
    "text": "an h1 with the current count current is",
    "start": "1753159",
    "end": "1763539"
  },
  {
    "text": "followed by we get the count and convert that to string so that should should be",
    "start": "1764409",
    "end": "1772730"
  },
  {
    "text": "a good start and now I need a button I'm going to",
    "start": "1772730",
    "end": "1778489"
  },
  {
    "text": "spare you some of my some of my typing slow typing attempts and copy those two",
    "start": "1778489",
    "end": "1785149"
  },
  {
    "text": "bits from here so I've got two buttons",
    "start": "1785149",
    "end": "1790929"
  },
  {
    "text": "and one is the increment button the other is the decrement button and they",
    "start": "1790929",
    "end": "1798289"
  },
  {
    "text": "do have they do have all click event handler where if I click on the button it will trigger the event now the",
    "start": "1798289",
    "end": "1806570"
  },
  {
    "text": "interesting thing here is when I'm when I'm triggering the event this is really",
    "start": "1806570",
    "end": "1812480"
  },
  {
    "text": "determining that I'm triggering the update event so this is producing a",
    "start": "1812480",
    "end": "1818960"
  },
  {
    "text": "value of the update event type and the interesting thing I need to do here is",
    "start": "1818960",
    "end": "1826299"
  },
  {
    "text": "do the updating so if I get if I get well let me first see if it actually",
    "start": "1826299",
    "end": "1832669"
  },
  {
    "text": "runs so if I save this I do get I do get",
    "start": "1832669",
    "end": "1838909"
  },
  {
    "text": "current count this one so that works and my buttons don't do anything yet so how",
    "start": "1838909",
    "end": "1844190"
  },
  {
    "text": "do I get my buttons to work let's see and this is the bed this is the this is",
    "start": "1844190",
    "end": "1851389"
  },
  {
    "text": "the really interesting bit so if you do EVT dot then you can see that the the",
    "start": "1851389",
    "end": "1856759"
  },
  {
    "text": "event which is my event has this has this property called kind and kind is of",
    "start": "1856759",
    "end": "1868249"
  },
  {
    "text": "type which this can be two strengths it can be either the reset string or it can be the",
    "start": "1868249",
    "end": "1874730"
  },
  {
    "text": "update string now in some cases if this",
    "start": "1874730",
    "end": "1880070"
  },
  {
    "text": "is if this is update there should also be a property called by because then",
    "start": "1880070",
    "end": "1885500"
  },
  {
    "text": "we're specifying whether it's plus one or minus one how do we access that well",
    "start": "1885500",
    "end": "1891549"
  },
  {
    "text": "this is the bit where typescript is doing something quite interesting because if I say switch over the event",
    "start": "1891549",
    "end": "1899870"
  },
  {
    "text": "kind I don't think that if the case is",
    "start": "1899870",
    "end": "1905090"
  },
  {
    "text": "and and actually the editor even knows",
    "start": "1905090",
    "end": "1910130"
  },
  {
    "text": "this the editor knows that EVT dot kind can only be two things it can only be",
    "start": "1910130",
    "end": "1915620"
  },
  {
    "text": "reset or update so if it's reset then we're going to return a new state where",
    "start": "1915620",
    "end": "1922669"
  },
  {
    "text": "the count is zero if this is update then and this is where",
    "start": "1922669",
    "end": "1932030"
  },
  {
    "text": "things get interesting because if I do EVT dot I do actually get by in my",
    "start": "1932030",
    "end": "1937400"
  },
  {
    "text": "autocomplete so how does this work typescript knows that event can be",
    "start": "1937400",
    "end": "1943790"
  },
  {
    "text": "either reset event or update event and it knows that this is determined by the",
    "start": "1943790",
    "end": "1950030"
  },
  {
    "text": "value of the kind now if the kind is reset there's nothing",
    "start": "1950030",
    "end": "1955460"
  },
  {
    "text": "else but if the kind is update there's this by property here which I can now",
    "start": "1955460",
    "end": "1962420"
  },
  {
    "text": "access to increment my count so count is",
    "start": "1962420",
    "end": "1967760"
  },
  {
    "text": "going to be the original count plus by",
    "start": "1967760",
    "end": "1972880"
  },
  {
    "text": "so with a bit of luck this should now make my incrementing and decrementing",
    "start": "1972880",
    "end": "1978380"
  },
  {
    "text": "work seems alright and the one last",
    "start": "1978380",
    "end": "1985880"
  },
  {
    "text": "thing that I haven't implemented yet is this this start button so I do have a",
    "start": "1985880",
    "end": "1993460"
  },
  {
    "text": "improved version of my rendering function here which that's the same",
    "start": "1993460",
    "end": "2001930"
  },
  {
    "text": "thing that I was doing in in f-sharp before so if state dot count is not mal",
    "start": "2001930",
    "end": "2009610"
  },
  {
    "text": "then I'm counting and I'll render the current count and do the plus and minus",
    "start": "2009610",
    "end": "2015280"
  },
  {
    "text": "one button otherwise I'll just say welcome to counter and we will start with count being null now",
    "start": "2015280",
    "end": "2026630"
  },
  {
    "text": "five if I save this then I have the start button and now I can do counting",
    "start": "2026630",
    "end": "2033220"
  },
  {
    "text": "now one thing I haven't done here really is I haven't dealt with these nulls very",
    "start": "2033220",
    "end": "2039770"
  },
  {
    "text": "nicely so um I just said counts Danelle but count is actually a number and if I",
    "start": "2039770",
    "end": "2046970"
  },
  {
    "text": "did not if I wasn't careful I could I could get various errors",
    "start": "2046970",
    "end": "2051980"
  },
  {
    "text": "caused by now so this is the default sort of bad behavior you get you get in",
    "start": "2051980",
    "end": "2057669"
  },
  {
    "text": "old-school JavaScript but the nice thing in typescript is that I can read enable",
    "start": "2057669",
    "end": "2065330"
  },
  {
    "text": "these straight null checks so if I in my config say straight male chicks on then",
    "start": "2065330",
    "end": "2074450"
  },
  {
    "text": "suddenly I get a bunch of errors here",
    "start": "2074450",
    "end": "2078550"
  },
  {
    "text": "like a bunch of errors I get an error here so this is not the most useful",
    "start": "2079629",
    "end": "2086148"
  },
  {
    "text": "place for getting my error message the",
    "start": "2086149",
    "end": "2091280"
  },
  {
    "text": "main issue is that this actually does I'll sort of",
    "start": "2091280",
    "end": "2097060"
  },
  {
    "text": "well typescript doesn't infer that this is model because it's not model it",
    "start": "2098060",
    "end": "2104870"
  },
  {
    "text": "couldn't be modeled because it model doesn't allow no so I have to change my",
    "start": "2104870",
    "end": "2110420"
  },
  {
    "text": "types a little bit and I quite like this this the way that the typescript handles",
    "start": "2110420",
    "end": "2116870"
  },
  {
    "text": "mouths because you can say account is a is of type number or now so you're",
    "start": "2116870",
    "end": "2123230"
  },
  {
    "text": "explicitly saying you can get mal here and well if you do that then suddenly in",
    "start": "2123230",
    "end": "2131900"
  },
  {
    "text": "my update I can't just access access count and do calculations with it because it can be",
    "start": "2131900",
    "end": "2137360"
  },
  {
    "text": "mal so I have to do the same thing which I did in EPS ARP in F sharp I use",
    "start": "2137360",
    "end": "2144020"
  },
  {
    "text": "pattern matching on optional values here I have to say if stable count is not now",
    "start": "2144020",
    "end": "2149750"
  },
  {
    "text": "then I can do this otherwise I can just",
    "start": "2149750",
    "end": "2156140"
  },
  {
    "text": "return state and that's all I have to do to fix it and this is sort of pointing",
    "start": "2156140",
    "end": "2164000"
  },
  {
    "text": "out a potential issue in my code and you have to be explicit about about your",
    "start": "2164000",
    "end": "2170240"
  },
  {
    "text": "your nulls so I do like this strict option and it's pretty much the same as",
    "start": "2170240",
    "end": "2176000"
  },
  {
    "text": "what I did before with f-sharp and option types so option types are sort of",
    "start": "2176000",
    "end": "2181730"
  },
  {
    "text": "a way of doing the same thing without having all this extra machinery in the",
    "start": "2181730",
    "end": "2186890"
  },
  {
    "text": "language now I can be even more strict and turn on strict strict type checking",
    "start": "2186890",
    "end": "2193510"
  },
  {
    "text": "and what this does it gives me an error here so one thing this enabled is that I",
    "start": "2193510",
    "end": "2200990"
  },
  {
    "text": "now have to explicitly well I'm not allowed to have to have variables which",
    "start": "2200990",
    "end": "2207380"
  },
  {
    "text": "will implicitly have a type any so in in",
    "start": "2207380",
    "end": "2214790"
  },
  {
    "text": "typescript the any type is a very useful thing for interoperating with JavaScript",
    "start": "2214790",
    "end": "2220640"
  },
  {
    "text": "because if you don't know what what object you may get from JavaScript you",
    "start": "2220640",
    "end": "2226040"
  },
  {
    "text": "just say it's any and you can do anything you want with it in typescript you can turn this",
    "start": "2226040",
    "end": "2231990"
  },
  {
    "text": "and now I have to be explicit about my types the sad thing is that typescript",
    "start": "2231990",
    "end": "2237960"
  },
  {
    "text": "doesn't really infer all the types so here I have to do it manually and I have",
    "start": "2237960",
    "end": "2243300"
  },
  {
    "text": "to say that trigger is a function which takes an event I guess I have to say",
    "start": "2243300",
    "end": "2252500"
  },
  {
    "text": "takes an event and produces unit Boyd but you have to say you have to call it",
    "start": "2252500",
    "end": "2259440"
  },
  {
    "text": "somehow EVT so I think all those type annotations this is something I don't",
    "start": "2259440",
    "end": "2265500"
  },
  {
    "text": "find very pleasant so that was the counter demo and the main point here is",
    "start": "2265500",
    "end": "2272490"
  },
  {
    "text": "really I think this is this is a very nice architecture and it works quite well with typescript and here I'm just",
    "start": "2272490",
    "end": "2281430"
  },
  {
    "text": "sort of implementing things from scratch because that mode suits suits our",
    "start": "2281430",
    "end": "2286710"
  },
  {
    "text": "project for for two reasons the user interface we're building most of it",
    "start": "2286710",
    "end": "2293130"
  },
  {
    "text": "ourselves so it's a very custom UI that's one thing second this is",
    "start": "2293130",
    "end": "2300150"
  },
  {
    "text": "something that's not going to be sort of updated every single day so we don't want to rely on the sort of breaking",
    "start": "2300150",
    "end": "2306720"
  },
  {
    "text": "changes by others so in typescript you can model what F sharp nose has",
    "start": "2306720",
    "end": "2313440"
  },
  {
    "text": "discriminated unions using using these interfaces with singleton types and the",
    "start": "2313440",
    "end": "2322080"
  },
  {
    "text": "Union constructor and you can put this nicely with the Elm architectural",
    "start": "2322080",
    "end": "2328440"
  },
  {
    "text": "operations and the type signatures of those I think are somewhat painful to",
    "start": "2328440",
    "end": "2337109"
  },
  {
    "text": "read but it's the same thing as in F sharp so you have update takes the state",
    "start": "2337109",
    "end": "2342869"
  },
  {
    "text": "and event and produces a new state trigger a renderer takes this trigger",
    "start": "2342869",
    "end": "2348600"
  },
  {
    "text": "operation for notifying the system that something has happened state and produces an HTML node so what are the",
    "start": "2348600",
    "end": "2359010"
  },
  {
    "text": "the interesting reflections I'll demonstrate this using a few few",
    "start": "2359010",
    "end": "2364980"
  },
  {
    "text": "examples so the first example and coming from",
    "start": "2364980",
    "end": "2370260"
  },
  {
    "text": "from our rattler project is that Brettler is extensible and you can add",
    "start": "2370260",
    "end": "2375270"
  },
  {
    "text": "new kinds of cells so we had Python JavaScript markdown but you can you can",
    "start": "2375270",
    "end": "2382829"
  },
  {
    "text": "build your own cell with your own user interface as well and to do that you",
    "start": "2382829",
    "end": "2389700"
  },
  {
    "start": "2388000",
    "end": "2388000"
  },
  {
    "text": "have to implement some interface so this defines a what is the language plug in a",
    "start": "2389700",
    "end": "2394890"
  },
  {
    "text": "language plug-in defines the language that's just a string has some editor",
    "start": "2394890",
    "end": "2399900"
  },
  {
    "text": "which is another object and then it defines how you parse code how you",
    "start": "2399900",
    "end": "2404940"
  },
  {
    "text": "evaluate code how you sniff code and how you bind which is our name for a sort of",
    "start": "2404940",
    "end": "2413760"
  },
  {
    "text": "step that happens before evaluation where we construct dependencies so all those things you have to implement and",
    "start": "2413760",
    "end": "2421760"
  },
  {
    "text": "in our actual actual system I've got I've got one example",
    "start": "2421760",
    "end": "2429020"
  },
  {
    "text": "we're we're implementing a little language plug-in called merger wear and",
    "start": "2429820",
    "end": "2437530"
  },
  {
    "text": "this is just a demo it's not it's not useful for anything practical where the idea is you have a little little",
    "start": "2437530",
    "end": "2444010"
  },
  {
    "text": "language that okay all it can do is it can merge data frames so if I turn this",
    "start": "2444010",
    "end": "2451570"
  },
  {
    "text": "on and save my files I've got another",
    "start": "2451570",
    "end": "2460570"
  },
  {
    "text": "instance of Rattler running here as a standalone thing so this now reloads and",
    "start": "2460570",
    "end": "2469180"
  },
  {
    "text": "I turned it on and I now have a new cell type so I can add a merger cell and this",
    "start": "2469180",
    "end": "2477550"
  },
  {
    "text": "has this is this is using a little while programming language not even programming language where you just say",
    "start": "2477550",
    "end": "2486210"
  },
  {
    "text": "output data frame name and comma separated list of input data frames so",
    "start": "2486210",
    "end": "2493750"
  },
  {
    "text": "this is a domain-specific language for merging merging data frames it's just a",
    "start": "2493750",
    "end": "2499270"
  },
  {
    "text": "demo and if I evaluate this what happens is it now merged two of my data frames",
    "start": "2499270",
    "end": "2505630"
  },
  {
    "text": "if I add the third one then it it merged three of my data frames so there's",
    "start": "2505630",
    "end": "2514870"
  },
  {
    "text": "there's a bunch of codes running here in and the relevant bits is I need to",
    "start": "2514870",
    "end": "2521530"
  },
  {
    "text": "implement this interface and in my implementation I decided to just create",
    "start": "2521530",
    "end": "2528040"
  },
  {
    "text": "a value using the object notation so this is something I find quite nice you",
    "start": "2528040",
    "end": "2534520"
  },
  {
    "text": "can you can sort of define interface and implement that by constructing an object",
    "start": "2534520",
    "end": "2540280"
  },
  {
    "text": "that has all the required things if I remove one of the things that is",
    "start": "2540280",
    "end": "2546040"
  },
  {
    "text": "required then I get an error message saying you're not you don't have that so",
    "start": "2546040",
    "end": "2552280"
  },
  {
    "text": "I'm implementing that object here and as part of the work and this is this is",
    "start": "2552280",
    "end": "2560980"
  },
  {
    "text": "where the sort of interesting logic comes in Rattler works is that all those all",
    "start": "2560980",
    "end": "2566320"
  },
  {
    "text": "those data frames that I've been merging they're stored in a component called datastore and Python or R will put the",
    "start": "2566320",
    "end": "2576130"
  },
  {
    "text": "data into datastore and when some other component wants to access that they will have to fetch it from the datastore and",
    "start": "2576130",
    "end": "2584230"
  },
  {
    "text": "then the result we put back to the datastore so here we have some code that",
    "start": "2584230",
    "end": "2589410"
  },
  {
    "text": "calculates the current value and puts that into the into the data store and",
    "start": "2589410",
    "end": "2594750"
  },
  {
    "text": "this is a place where you just inevitably have any values because",
    "start": "2594750",
    "end": "2599920"
  },
  {
    "text": "you're working with things that you get from the web now the other interesting",
    "start": "2599920",
    "end": "2607480"
  },
  {
    "text": "thing is that this actually well I'm not I'm not I'm not showing the getting of",
    "start": "2607480",
    "end": "2614320"
  },
  {
    "text": "the data because that's in a separate file but I'll get it get back to that so I think there's few interesting things",
    "start": "2614320",
    "end": "2623830"
  },
  {
    "text": "that I find quite tricky in typescript one is this sort of you can you can",
    "start": "2623830",
    "end": "2629740"
  },
  {
    "text": "often do object-oriented programming with classes and interfaces and if",
    "start": "2629740",
    "end": "2635230"
  },
  {
    "text": "you're doing more object-oriented style which sort of inheritance then you do",
    "start": "2635230",
    "end": "2640690"
  },
  {
    "text": "want you know you do want to use classes another thing that you get with classes",
    "start": "2640690",
    "end": "2647560"
  },
  {
    "text": "is you can actually check whether in a value is an instance of a class using this instance of instance of operator",
    "start": "2647560",
    "end": "2655810"
  },
  {
    "text": "and this does not work with just an interface it only works with classes and",
    "start": "2655810",
    "end": "2661480"
  },
  {
    "text": "if you want to have a runtime checks then you do need that if you but the",
    "start": "2661480",
    "end": "2669640"
  },
  {
    "text": "sort of object implementations of interfaces which is what I've been using give you somewhat lighter syntax there's",
    "start": "2669640",
    "end": "2676900"
  },
  {
    "text": "somewhat easier to use but they don't give you this sort of ability to do two checks so one thing that we've struggled",
    "start": "2676900",
    "end": "2683560"
  },
  {
    "text": "with occasionally in our case was we just started with an with an anonymous",
    "start": "2683560",
    "end": "2690340"
  },
  {
    "start": "2687000",
    "end": "2687000"
  },
  {
    "text": "interface implementation using the object like what I'm what I'm showing here and then for one reason or another",
    "start": "2690340",
    "end": "2696880"
  },
  {
    "text": "we decided we need to turn this into a class and it turns out that you can you",
    "start": "2696880",
    "end": "2703479"
  },
  {
    "text": "can do that but the annoying thing I'm switching between the two versions is",
    "start": "2703479",
    "end": "2710529"
  },
  {
    "text": "that pretty much every single bit of syntax changes so here you do column now",
    "start": "2710529",
    "end": "2717309"
  },
  {
    "text": "this becomes implements here I say equal curly bracket now I just say curly",
    "start": "2717309",
    "end": "2724119"
  },
  {
    "text": "bracket in the code previously I had columns everywhere now I just have",
    "start": "2724119",
    "end": "2729130"
  },
  {
    "text": "equals everywhere my function previously was defined as a attribute which is",
    "start": "2729130",
    "end": "2736559"
  },
  {
    "text": "implemented using the arrow notation followed by curly brackets now it's",
    "start": "2736559",
    "end": "2744329"
  },
  {
    "text": "without that just as a function and the",
    "start": "2744329",
    "end": "2749710"
  },
  {
    "text": "body the body stays the same so this is one case where I thought there's there",
    "start": "2749710",
    "end": "2755650"
  },
  {
    "text": "some pretty crazy inconsistencies between the two different ways of doing the same thing now it makes sense",
    "start": "2755650",
    "end": "2761410"
  },
  {
    "text": "because that's how that's how each other script works but I think it's this is",
    "start": "2761410",
    "end": "2766630"
  },
  {
    "text": "one of the examples where the JavaScript heritage of typescript really means that",
    "start": "2766630",
    "end": "2772059"
  },
  {
    "text": "doing certain things is quite painful the way you do constructors in classes",
    "start": "2772059",
    "end": "2778900"
  },
  {
    "text": "in typescript is the sort of standard way you define a constructor and in that",
    "start": "2778900",
    "end": "2785319"
  },
  {
    "text": "you initialize all the fields and do someone coming from an F sharp",
    "start": "2785319",
    "end": "2790329"
  },
  {
    "text": "background where F sharp has these beautiful implicit constructors where you just as you're defining the type you",
    "start": "2790329",
    "end": "2799599"
  },
  {
    "text": "take all your arguments and then you define all your fields switching to the",
    "start": "2799599",
    "end": "2805779"
  },
  {
    "text": "typescript world where you need to have explicit constructors it's just that that's been a mate it's",
    "start": "2805779",
    "end": "2812200"
  },
  {
    "text": "just it's a tiny thing but if you're writing a lot of classes you'll end up wasting a lot of time now there's a few",
    "start": "2812200",
    "end": "2822489"
  },
  {
    "start": "2819000",
    "end": "2819000"
  },
  {
    "text": "places where where I managed to bring the type system or break where the type",
    "start": "2822489",
    "end": "2829150"
  },
  {
    "text": "system sort of does things according to the necessities of the JavaScript environment which aren't",
    "start": "2829150",
    "end": "2836280"
  },
  {
    "text": "very pleasant so one of those is when you're when you're using fetching some",
    "start": "2836280",
    "end": "2842670"
  },
  {
    "text": "data from HTTP always get response or the data which is of type any and then",
    "start": "2842670",
    "end": "2850320"
  },
  {
    "text": "if you're not careful you can very very easily get into trouble by sort of",
    "start": "2850320",
    "end": "2855990"
  },
  {
    "text": "propagating that any value somewhere else in your code and causing all sorts of troubles and you can remove some of",
    "start": "2855990",
    "end": "2864990"
  },
  {
    "text": "those places where this error can happen by using the strict mode and if you're",
    "start": "2864990",
    "end": "2870570"
  },
  {
    "text": "if you're doing the same thing in F sharp there's I think F sharp type",
    "start": "2870570",
    "end": "2876090"
  },
  {
    "text": "providers are one of the nice nice features that can help you with that when you can sort of strongly type your",
    "start": "2876090",
    "end": "2883380"
  },
  {
    "text": "responses but if you're using Fable if F",
    "start": "2883380",
    "end": "2889470"
  },
  {
    "text": "sharp you'll just this is a place where you will easily notice that this is a problematic place so you have to define",
    "start": "2889470",
    "end": "2896670"
  },
  {
    "text": "some type explicitly or you just won't be accessed won't be able to access it that easily so that's where sort of F",
    "start": "2896670",
    "end": "2903720"
  },
  {
    "text": "sharp makes things harder for you but I think it's actually a price worth paying because it just removes quite a few",
    "start": "2903720",
    "end": "2911640"
  },
  {
    "text": "errors and I do have one one very",
    "start": "2911640",
    "end": "2916770"
  },
  {
    "text": "curious example so this is a place where the fact that pipes rip is still just",
    "start": "2916770",
    "end": "2923700"
  },
  {
    "text": "the JavaScript runtime underneath thus cause a few few surprising issues so",
    "start": "2923700",
    "end": "2930390"
  },
  {
    "text": "this is a this is a bit of code that is actually pretty much",
    "start": "2930390",
    "end": "2935640"
  },
  {
    "text": "based on what we had we have this interface representing a variable a",
    "start": "2935640",
    "end": "2941609"
  },
  {
    "text": "variable has the name and we have an object which we're using as a as a",
    "start": "2941609",
    "end": "2947099"
  },
  {
    "text": "lookup table you can sort of use the square brackets to index into it and",
    "start": "2947099",
    "end": "2954800"
  },
  {
    "text": "it's basically just a map or lookup table we're given a variable name you'll",
    "start": "2954800",
    "end": "2960300"
  },
  {
    "text": "get the variable and and I have a little function which returns the length of the",
    "start": "2960300",
    "end": "2967050"
  },
  {
    "text": "name of a variable so it takes the scope which is our variables or data frames in scope the name of the variable and it",
    "start": "2967050",
    "end": "2974960"
  },
  {
    "text": "says if this variable is not undefined then return the length of the name",
    "start": "2974960",
    "end": "2981720"
  },
  {
    "text": "otherwise return minus one and this is",
    "start": "2981720",
    "end": "2987869"
  },
  {
    "text": "this is even in the strict mode so this can't be no and the question is can this",
    "start": "2987869",
    "end": "2996180"
  },
  {
    "text": "ever fail because because the name is undefined so in my type name is a string it can't",
    "start": "2996180",
    "end": "3004099"
  },
  {
    "text": "be undefined otherwise you'd have to say name on string or undefined but it turns out because this is underneath",
    "start": "3004099",
    "end": "3011030"
  },
  {
    "text": "JavaScript if you just call this and use empty lookup table and to string as the",
    "start": "3011030",
    "end": "3020420"
  },
  {
    "text": "name of the variable then this breaks and your code crashes because this",
    "start": "3020420",
    "end": "3027380"
  },
  {
    "text": "lookup is just the object lookup of JavaScript and all objects in JavaScript",
    "start": "3027380",
    "end": "3032510"
  },
  {
    "text": "have to string that's the method that you can use for converting those to",
    "start": "3032510",
    "end": "3037910"
  },
  {
    "text": "string so this is not undefined but it's not actually as our type requires a",
    "start": "3037910",
    "end": "3044210"
  },
  {
    "text": "variable so it's a it's a function it's not a variable and this is I think a",
    "start": "3044210",
    "end": "3050720"
  },
  {
    "text": "case where the fact that we're building on on JavaScript typescript can remove",
    "start": "3050720",
    "end": "3057710"
  },
  {
    "text": "some of those quirks but not all and this was this was a case where we release this sounds pretty arbitrary but",
    "start": "3057710",
    "end": "3065390"
  },
  {
    "text": "we really did spend an debugging this issue because we did have a variable called stew string the the",
    "start": "3065390",
    "end": "3075720"
  },
  {
    "text": "last bit I wanted to talk about is some of the things that I didn't find particularly elegant in typescript but",
    "start": "3075720",
    "end": "3083730"
  },
  {
    "text": "that were not really a major issue so this is mostly about the syntax and types read inherits the JavaScript",
    "start": "3083730",
    "end": "3091110"
  },
  {
    "text": "syntax which is really sort of designed for not necessarily functional style of",
    "start": "3091110",
    "end": "3096510"
  },
  {
    "text": "programming so this is perfectly expected that's the price you have to pay when you want to use typescript in a",
    "start": "3096510",
    "end": "3102420"
  },
  {
    "text": "functional way and I'll this is again",
    "start": "3102420",
    "end": "3109470"
  },
  {
    "text": "based on an experience of writing a piece of the the Rattler system where",
    "start": "3109470",
    "end": "3115050"
  },
  {
    "text": "one of the one of the really sort of nice interesting innovative pieces of",
    "start": "3115050",
    "end": "3121040"
  },
  {
    "text": "data science to length we've got are these guy assistants which are tools for",
    "start": "3121040",
    "end": "3129630"
  },
  {
    "text": "semi automated data wrangling and I'll show you what this is so I'm going to",
    "start": "3129630",
    "end": "3136080"
  },
  {
    "text": "open another demo and you can go to rattler not orc and play with this later on your own so I've got one example here",
    "start": "3136080",
    "end": "3145260"
  },
  {
    "text": "where I'm downloading some data on air traffic accidents which is actually",
    "start": "3145260",
    "end": "3150810"
  },
  {
    "text": "originally coming from Eurostat and the way the data is structured is that you",
    "start": "3150810",
    "end": "3160290"
  },
  {
    "text": "have a row representing accidents",
    "start": "3160290",
    "end": "3166200"
  },
  {
    "text": "related to all airplanes that were registered in a particular country where",
    "start": "3166200",
    "end": "3173070"
  },
  {
    "text": "the accident happened in a particular country so for example here this would",
    "start": "3173070",
    "end": "3178620"
  },
  {
    "text": "be a road that represents accidents that happened to aircrafts registered in",
    "start": "3178620",
    "end": "3184770"
  },
  {
    "text": "Austria that happened in Cyprus and it's",
    "start": "3184770",
    "end": "3190110"
  },
  {
    "text": "very sparse one of the issue with the data though is that they also include",
    "start": "3190110",
    "end": "3196650"
  },
  {
    "text": "aggregates so there's there's some rows that represent the total for the whole EU and you think that is quite",
    "start": "3196650",
    "end": "3205160"
  },
  {
    "text": "tricky and what I can do is I can say I",
    "start": "3205160",
    "end": "3212569"
  },
  {
    "text": "want to use an AI assistant for outlier detection on my data set and this will",
    "start": "3212569",
    "end": "3219910"
  },
  {
    "text": "create a cell with custom user interface where I can just run the AI assistant",
    "start": "3219910",
    "end": "3226069"
  },
  {
    "text": "and then ask it how do you recommend I I fix this code and the assistant says you",
    "start": "3226069",
    "end": "3232249"
  },
  {
    "text": "should add a filter where see wretches is not u28 and also geo is not u28",
    "start": "3232249",
    "end": "3240859"
  },
  {
    "text": "so it looks at my data and finds the outliers and and it recommends that I",
    "start": "3240859",
    "end": "3247970"
  },
  {
    "text": "add certain filters and I can see what rows it actually removed so this is a",
    "start": "3247970",
    "end": "3254839"
  },
  {
    "text": "tool where if you're cleaning data it can help you with some of the typical boring tasks and in the implementation",
    "start": "3254839",
    "end": "3263539"
  },
  {
    "start": "3261000",
    "end": "3261000"
  },
  {
    "text": "of this there's a few things that I found quite annoying one is that",
    "start": "3263539",
    "end": "3269690"
  },
  {
    "text": "sometimes you have two ways of defining a function you can you can do this using",
    "start": "3269690",
    "end": "3274910"
  },
  {
    "text": "the sort of lambda syntax which works in certain contexts like when you're",
    "start": "3274910",
    "end": "3280009"
  },
  {
    "text": "passing the function as an argument so here I'm defining a function that takes",
    "start": "3280009",
    "end": "3286819"
  },
  {
    "text": "a list of AI assistants and generates an editor where the editor has a certain",
    "start": "3286819",
    "end": "3292670"
  },
  {
    "text": "initialization code now this is written using lambda function but if I need to",
    "start": "3292670",
    "end": "3299059"
  },
  {
    "start": "3298000",
    "end": "3298000"
  },
  {
    "text": "change it to an explicit function then again I go through this process of",
    "start": "3299059",
    "end": "3304549"
  },
  {
    "text": "making so many tiny tweaks in the syntax so here in the function notation you",
    "start": "3304549",
    "end": "3311900"
  },
  {
    "text": "just say curly bracket return and then you return something in the other",
    "start": "3311900",
    "end": "3317089"
  },
  {
    "text": "notation you have to say arrow and then you don't",
    "start": "3317089",
    "end": "3323190"
  },
  {
    "text": "need return but if this starts with curly brackets then you need extra parentheses around because otherwise the",
    "start": "3323190",
    "end": "3330270"
  },
  {
    "text": "interpret the parser will treat it as a code block",
    "start": "3330270",
    "end": "3335060"
  },
  {
    "text": "another thing that I find I find quite tedious is in the code that constructs",
    "start": "3335470",
    "end": "3342610"
  },
  {
    "text": "these HTML blocks using the H notation in in typescript I end up with a lot of",
    "start": "3342610",
    "end": "3350290"
  },
  {
    "text": "helper definitions and then I end up with sort of one messy condition that",
    "start": "3350290",
    "end": "3356050"
  },
  {
    "text": "says depending on the state to do this or this or this and in F sharp this was",
    "start": "3356050",
    "end": "3361540"
  },
  {
    "text": "actually this is this is one thing that can be handled quite nicely with list",
    "start": "3361540",
    "end": "3367690"
  },
  {
    "text": "comprehensions where I just define a list and then I say yield this user interface element or this element or",
    "start": "3367690",
    "end": "3374770"
  },
  {
    "text": "this element so you can embed quite a lot of logic in this code that constructs lists so - - to wrap up",
    "start": "3374770",
    "end": "3383580"
  },
  {
    "text": "so I talked that I talked about F sorry about typescript from the perspective of",
    "start": "3383580",
    "end": "3388810"
  },
  {
    "text": "an observed person and and also from the perspective of a very specific project",
    "start": "3388810",
    "end": "3395200"
  },
  {
    "text": "where our project sort of is long-running not very not very sort of",
    "start": "3395200",
    "end": "3402310"
  },
  {
    "text": "ongoing all the time it's reimplemented a plain user interface from scratch and",
    "start": "3402310",
    "end": "3409080"
  },
  {
    "text": "typescript worked quite nicely with this Elm architecture and I did like the fact",
    "start": "3409080",
    "end": "3414580"
  },
  {
    "text": "that we sort of implemented that ourselves had a nice control over that",
    "start": "3414580",
    "end": "3420570"
  },
  {
    "text": "tight grip isn't really designed for functional style so some of the things will end up being ugly and in some",
    "start": "3420570",
    "end": "3428200"
  },
  {
    "text": "places it's trying to be JavaScript in some places it's not and this often",
    "start": "3428200",
    "end": "3433450"
  },
  {
    "text": "leads to random surprises like this - string thing",
    "start": "3433450",
    "end": "3438869"
  },
  {
    "text": "would I would I sort of when would I prefer f-sharp when would I prefer typescript so I'm obviously biased here",
    "start": "3439120",
    "end": "3446980"
  },
  {
    "text": "as an F sir person I always choose F sharp but I was working in a team where",
    "start": "3446980",
    "end": "3453130"
  },
  {
    "text": "this was a team decision and we did did go for typescript how did how do the two",
    "start": "3453130",
    "end": "3458860"
  },
  {
    "text": "compare so if you're using EPS are pour'd about with fable then I think the",
    "start": "3458860",
    "end": "3464500"
  },
  {
    "text": "remarkable thing is that F Serb has this functional core which is safe and clean",
    "start": "3464500",
    "end": "3469870"
  },
  {
    "text": "and works and the way fable compiles this is that it avoids most of the trade",
    "start": "3469870",
    "end": "3476020"
  },
  {
    "text": "although all those sort of messiness of JavaScript so you have the core language",
    "start": "3476020",
    "end": "3481360"
  },
  {
    "text": "which works nicely is predictable is understandable and then there's the",
    "start": "3481360",
    "end": "3487270"
  },
  {
    "text": "extra integration curve which inevitably has to make trade-offs typescript",
    "start": "3487270",
    "end": "3492820"
  },
  {
    "text": "supports many different styles including sort of object-oriented and functional",
    "start": "3492820",
    "end": "3498040"
  },
  {
    "text": "and it doesn't really hide JavaScript it's sort of JavaScript is one of the",
    "start": "3498040",
    "end": "3503140"
  },
  {
    "text": "styles that's a typescript some supports and unlike an EPS are where the core and",
    "start": "3503140",
    "end": "3508540"
  },
  {
    "text": "the integration is quite clearly separated I felt like in typescript this is not so much the case so you always",
    "start": "3508540",
    "end": "3516040"
  },
  {
    "text": "end up mixing different different bits and you can do it well or you can do it",
    "start": "3516040",
    "end": "3522700"
  },
  {
    "text": "not well and it's really hard to sort of figure out what is well what is not so",
    "start": "3522700",
    "end": "3530050"
  },
  {
    "text": "to go back to my to my meditating meditating kittens a lot",
    "start": "3530050",
    "end": "3535630"
  },
  {
    "text": "who knows that absorb is the right choice for everything all the time I",
    "start": "3535630",
    "end": "3542010"
  },
  {
    "text": "think the important things here from the talk where I was actually actually quite",
    "start": "3542010",
    "end": "3548050"
  },
  {
    "text": "sort of pleased with using typescript in the way we used it I'm using the sort of",
    "start": "3548050",
    "end": "3553600"
  },
  {
    "text": "plain L mich elvish architecture you have to be very disciplined and you're",
    "start": "3553600",
    "end": "3560290"
  },
  {
    "text": "not really you'll you'll end up using typescript in a way that's not obvious",
    "start": "3560290",
    "end": "3566470"
  },
  {
    "text": "so you I sort of thought if we go for top for typescript people won't have to learn",
    "start": "3566470",
    "end": "3573210"
  },
  {
    "text": "too much that's not really the case if you want to do functional programming in typescript you have to learn functional",
    "start": "3573210",
    "end": "3580470"
  },
  {
    "text": "programming in typescript I'm just like if you want to do F sharp you have to learn that sharp so that that learning",
    "start": "3580470",
    "end": "3587400"
  },
  {
    "text": "is still there typescript in a functional way is really different language than typescript in",
    "start": "3587400",
    "end": "3594450"
  },
  {
    "text": "the JavaScript way and a lot of these decisions really depend on the project",
    "start": "3594450",
    "end": "3599820"
  },
  {
    "text": "context so you always have to have to use your use your judgment that's all I",
    "start": "3599820",
    "end": "3604950"
  },
  {
    "text": "wanted to say and I'll have a look at the questions now so thanks for tuning in and for sticking to the end all right",
    "start": "3604950",
    "end": "3614990"
  },
  {
    "text": "question is there a reason you're using interface as opposed to type system",
    "start": "3614990",
    "end": "3622260"
  },
  {
    "text": "seems to me that the interface is just a reference to I have to move my window",
    "start": "3622260",
    "end": "3627960"
  },
  {
    "text": "here haha to Microsoft's inclination 200p yeah I think that this this bit is",
    "start": "3627960",
    "end": "3638190"
  },
  {
    "text": "something I found sort of confusing as well like there's there's so many",
    "start": "3638190",
    "end": "3643920"
  },
  {
    "text": "different ways of doing things that I just ended up using interface because I",
    "start": "3643920",
    "end": "3650580"
  },
  {
    "text": "think that's the first thing I was I was able to get to work and I don't really",
    "start": "3650580",
    "end": "3656580"
  },
  {
    "text": "have a good good answer to that it's true that it's true that this this might",
    "start": "3656580",
    "end": "3663720"
  },
  {
    "text": "be the case where typescript just sort of inherits a lot of different styles",
    "start": "3663720",
    "end": "3669510"
  },
  {
    "text": "and some of them are more Oh like if you use oo you might end up with classes and",
    "start": "3669510",
    "end": "3676710"
  },
  {
    "text": "interfaces if if you're using different style you'll you'll end up more with",
    "start": "3676710",
    "end": "3682280"
  },
  {
    "text": "with types so there's no there's no good good reason for this it's just a random",
    "start": "3682280",
    "end": "3690450"
  },
  {
    "text": "decision based on what I got what I was able to go to get to work easily for",
    "start": "3690450",
    "end": "3696660"
  },
  {
    "text": "what I wanted but yeah if you look at some of my type",
    "start": "3696660",
    "end": "3702500"
  },
  {
    "text": "definitions sort of earlier on there's",
    "start": "3702500",
    "end": "3708410"
  },
  {
    "text": "there's cases where you need to say type there's cases where it doesn't really matter like here this has to be a type",
    "start": "3708410",
    "end": "3715790"
  },
  {
    "text": "because I'm defining a type alias but the way you define the way you define the record types I don't really know if",
    "start": "3715790",
    "end": "3723290"
  },
  {
    "text": "there's sort of subtle differences all right any more questions I don't think",
    "start": "3723290",
    "end": "3729260"
  },
  {
    "text": "there's there's any other question here so I don't think anyone's anyone's",
    "start": "3729260",
    "end": "3735380"
  },
  {
    "text": "joining life on zoom so if that's if that's it then thanks again for joining",
    "start": "3735380",
    "end": "3741589"
  },
  {
    "text": "and I'll post all the code including most importantly the to F sharp and",
    "start": "3741589",
    "end": "3747710"
  },
  {
    "text": "typescript comparisons sort of side by side of the Amish architecture which i think is a fun thing that people can",
    "start": "3747710",
    "end": "3754599"
  },
  {
    "text": "play with later thank you",
    "start": "3754599",
    "end": "3758950"
  },
  {
    "text": "you",
    "start": "3763960",
    "end": "3766020"
  }
]