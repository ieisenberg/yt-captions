[
  {
    "text": "so hello everyone welcome to my talk thank you all for coming i know there's like we said a lot of interesting things",
    "start": "7600",
    "end": "12960"
  },
  {
    "text": "going on here and you came here that's great so uh today we'll be talking about how to work with graphql services from",
    "start": "12960",
    "end": "20560"
  },
  {
    "text": "f-sharp how to connect to them how to get data and work with it so for today we have a",
    "start": "20560",
    "end": "27199"
  },
  {
    "text": "a couple of sections we're talking about first of all going to talk a little bit about myself i'm going to get over that quickly then i'm going to talk about",
    "start": "27199",
    "end": "33200"
  },
  {
    "text": "graphql services because if you want to talk about them we want to consume them we want to know",
    "start": "33200",
    "end": "38399"
  },
  {
    "text": "what they are first and what they um what they bring to the table i'm going to compare a little bit",
    "start": "38399",
    "end": "44160"
  },
  {
    "text": "with rest apis i'm not going to talk about which one is better they both have weaknesses and and strengths but i want to show by",
    "start": "44160",
    "end": "50640"
  },
  {
    "text": "example if you don't know so i will get that also quickly um we'll talk a little bit about what platforms starting are starting to use",
    "start": "50640",
    "end": "57840"
  },
  {
    "text": "graphql and how to and how they expose their data um and why graphql is very a good a good",
    "start": "57840",
    "end": "65518"
  },
  {
    "text": "decision for them and then we will get to the good parts where we connect to graphql and show you",
    "start": "65519",
    "end": "70880"
  },
  {
    "text": "how to do that from f sharp using a tool i've built called snowflake and then of course i'll show you how that works with",
    "start": "70880",
    "end": "76720"
  },
  {
    "text": "a couple of demo applications so we do a little player prayer to the demo deities",
    "start": "76720",
    "end": "81840"
  },
  {
    "text": "that are on our side today okay so a little bit of me i'm from the",
    "start": "81840",
    "end": "86960"
  },
  {
    "text": "netherlands i work there i do everything that has to do with net and javascript so c sharp f sharp whatever you call it",
    "start": "86960",
    "end": "94079"
  },
  {
    "text": "um i do a lot of things that have to do with time series so a lot of data to visualize to analyze and",
    "start": "94079",
    "end": "101439"
  },
  {
    "text": "make nice graphs out of them and then i do a little bit of open source work where i maintain and",
    "start": "101439",
    "end": "107520"
  },
  {
    "text": "contribute to a bunch of a bunch of libraries one of which i'm going to talk about today",
    "start": "107520",
    "end": "113680"
  },
  {
    "text": "uh before we get started on consuming graphql services let's talk a little bit about them and uh what why they're so good so",
    "start": "113680",
    "end": "121040"
  },
  {
    "text": "basically a graphql service is one endpoint on a on some back end one",
    "start": "121040",
    "end": "126719"
  },
  {
    "text": "http endpoint on some back end that expects some query in",
    "start": "126719",
    "end": "132239"
  },
  {
    "text": "like the request body and based on the query it will return some data so instead of having a rest api with a",
    "start": "132239",
    "end": "138400"
  },
  {
    "text": "bunch of data a bunch of endpoints you have one endpoint you get send it to query and based on the query you get the",
    "start": "138400",
    "end": "144640"
  },
  {
    "text": "data okay so it has a bunch of cool stuff instead of reading it out i will just go",
    "start": "144640",
    "end": "149680"
  },
  {
    "text": "through each uh each part and talk talking by example",
    "start": "149680",
    "end": "154959"
  },
  {
    "text": "so the first part is that graphql is a query language for your data",
    "start": "154959",
    "end": "160959"
  },
  {
    "text": "you have data on some back end whatever that is whatever it's coming with from the database whether it has like",
    "start": "160959",
    "end": "166720"
  },
  {
    "text": "in-memory structure or you're generating like fake data it doesn't matter it basically provides a",
    "start": "166720",
    "end": "172640"
  },
  {
    "text": "query language for that data you decide how you decide how the data will look like",
    "start": "172640",
    "end": "179519"
  },
  {
    "text": "but the query language is always the same so it always follows the same specs when it comes to that",
    "start": "179519",
    "end": "185360"
  },
  {
    "text": "so and it provides also a dsl to how you access that data so for example if you",
    "start": "185360",
    "end": "190640"
  },
  {
    "text": "previously with rest endpoints you had something like slash api employees and then some query",
    "start": "190640",
    "end": "196720"
  },
  {
    "text": "parameters for filtering that would look the same in this query that would it would look like",
    "start": "196720",
    "end": "203599"
  },
  {
    "text": "this if you were writing it in graphql you would have a field called employees which",
    "start": "203599",
    "end": "209120"
  },
  {
    "text": "is parameterized by a filter and the filter could have a bunch of things for example here we're filtering by first",
    "start": "209120",
    "end": "214799"
  },
  {
    "text": "name and then we get something back an object or a list and from that list",
    "start": "214799",
    "end": "219840"
  },
  {
    "text": "we want only the id the first name and the last name depending on whether the field returns a single object or an",
    "start": "219840",
    "end": "226560"
  },
  {
    "text": "array only these fields will be selected from the sub query these are like sub queries every time you go one level",
    "start": "226560",
    "end": "232640"
  },
  {
    "text": "deeper all right so it's a query language it's easy for graphql and it's in the",
    "start": "232640",
    "end": "239120"
  },
  {
    "text": "name to combine relational data relational data together in the single graph so if you had previously with rest",
    "start": "239120",
    "end": "246879"
  },
  {
    "text": "endpoints let's say three rest endpoints where one gives you the employees and then you use the ids from each employee",
    "start": "246879",
    "end": "254080"
  },
  {
    "text": "to get their locations and then from each location you use the location id to get the attributes",
    "start": "254080",
    "end": "260160"
  },
  {
    "text": "you could do that it's you could do that with this it's not a problem i think many of us have already done but the same",
    "start": "260160",
    "end": "266000"
  },
  {
    "text": "operation the same procedure would look like this query in graphql and it's one",
    "start": "266000",
    "end": "271840"
  },
  {
    "text": "query to get all of this related information in one go so instead of so it makes it really easy to",
    "start": "271840",
    "end": "278320"
  },
  {
    "text": "consume a lot of data in a expressive manner well building this building graphql apis",
    "start": "278320",
    "end": "285040"
  },
  {
    "text": "itself is not straightforward per se i would think um but from a consumer perspective it's",
    "start": "285040",
    "end": "291040"
  },
  {
    "text": "it's really nice so a lot of front-end people a lot of systems integration people like graphql",
    "start": "291040",
    "end": "297120"
  },
  {
    "text": "but the people who build it are not as happy all right so it's easy to combine",
    "start": "297120",
    "end": "303039"
  },
  {
    "text": "related data into one graph and it's also predictable the things you get are the",
    "start": "303039",
    "end": "309199"
  },
  {
    "text": "things that you ask for so in the same sense that you had if you have a sql query you select a couple of columns",
    "start": "309199",
    "end": "315520"
  },
  {
    "text": "from the table you want if you want just id and name from the table you will just get that back in the same sense graphql",
    "start": "315520",
    "end": "321759"
  },
  {
    "text": "allows you to it defines what fields you can select and then from each thing that is",
    "start": "321759",
    "end": "327120"
  },
  {
    "text": "returned you could you could say i want just the id i want just the first name and if it",
    "start": "327120",
    "end": "333280"
  },
  {
    "text": "has a relation to another uh well table in this case it's another field in the graph like locations you",
    "start": "333280",
    "end": "340000"
  },
  {
    "text": "could immediately ask for fields from that location without having to",
    "start": "340000",
    "end": "345520"
  },
  {
    "text": "manually map the ids to the to the sub table and things like that that's what the back end does so from from consuming",
    "start": "345520",
    "end": "352000"
  },
  {
    "text": "perspective we don't care about that we just get the data we ask for all right and the best thing about",
    "start": "352000",
    "end": "358319"
  },
  {
    "text": "graphql is that it's typed there's a type system up front and actually the type system is",
    "start": "358319",
    "end": "363919"
  },
  {
    "text": "very close well loosely close to f sharp i would i would say because it has things that look like",
    "start": "363919",
    "end": "369919"
  },
  {
    "text": "unions like you have a book and it has a title and pages and you can say whether",
    "start": "369919",
    "end": "376000"
  },
  {
    "text": "it's a string or an integer if you put an exclamation mark it makes it required no exclamation mark is optional",
    "start": "376000",
    "end": "382720"
  },
  {
    "text": "i say required also non-nullable they're interchangeable if i use non-nullable i mean required available is optional",
    "start": "382720",
    "end": "389280"
  },
  {
    "text": "whatever you want to whatever terminology you prefer and it has relations so author here the",
    "start": "389280",
    "end": "395600"
  },
  {
    "text": "definition of author has books it it is a list of it's a required list of",
    "start": "395600",
    "end": "401759"
  },
  {
    "text": "a required book this is the explicit way of saying nothing there can be null and",
    "start": "401759",
    "end": "408160"
  },
  {
    "text": "here it's basically it's just just defining the relationship it's not per se that every",
    "start": "408160",
    "end": "415039"
  },
  {
    "text": "it's not per se that this will be mapped to a relational database it doesn't matter really like how the query is",
    "start": "415039",
    "end": "420960"
  },
  {
    "text": "interpreted on the back end is irrelevant for the consumers they just know when you have an author they might",
    "start": "420960",
    "end": "426880"
  },
  {
    "text": "have a bunch of books that's it and also really nice in graphql is that they have union types so for something when you",
    "start": "426880",
    "end": "434479"
  },
  {
    "text": "when you ask for something say search result it can be one of",
    "start": "434479",
    "end": "439680"
  },
  {
    "text": "multiple things like a book or an author in the same in the same thing so when",
    "start": "439680",
    "end": "445440"
  },
  {
    "text": "you when you for example have the field called search way below which is",
    "start": "445440",
    "end": "451680"
  },
  {
    "text": "the query object is the root object and from there you can have fields and here we have one field called search and it",
    "start": "451680",
    "end": "457840"
  },
  {
    "text": "returns a list of search results each of which might be either a book or or an",
    "start": "457840",
    "end": "463599"
  },
  {
    "text": "author so this is the graphql schema and it very it's very expressive it allows you to",
    "start": "463599",
    "end": "469840"
  },
  {
    "text": "define these kind of things and the way to use unions well i'm using unions because they're interesting",
    "start": "469840",
    "end": "476319"
  },
  {
    "text": "in this case but they're not very common because languages many languages don't know how to work with them",
    "start": "476319",
    "end": "481919"
  },
  {
    "text": "except after so here you have a search query and you search for something like um like something that contains",
    "start": "481919",
    "end": "488960"
  },
  {
    "text": "shakespeare and you actually pattern match inside of the query so in the query you say if my result is a book",
    "start": "488960",
    "end": "496080"
  },
  {
    "text": "then i want the title and isbn otherwise if it's an author i want the name",
    "start": "496080",
    "end": "501599"
  },
  {
    "text": "but i also want the underlying books from there and from their books i just want the title and isbn i'm also asking",
    "start": "501599",
    "end": "507919"
  },
  {
    "text": "for the type name for um for other purposes i'll show you in a bit but the result of this query comes",
    "start": "507919",
    "end": "515200"
  },
  {
    "text": "back from the back end as json so this is how it would look like",
    "start": "515200",
    "end": "520560"
  },
  {
    "text": "if i got actual results so i get my search first search result which is uh which is a title and isbn i also asked",
    "start": "520560",
    "end": "527279"
  },
  {
    "text": "the type name i need that type name later for well type name is part of the graphql specs every every object has has",
    "start": "527279",
    "end": "534000"
  },
  {
    "text": "a type name field that you can ask but here uh for i need it later for the serialization on the runtime",
    "start": "534000",
    "end": "540240"
  },
  {
    "text": "details all right yeah um so basically this is how the data looks like and we can do something about",
    "start": "540240",
    "end": "547279"
  },
  {
    "text": "it now it's interesting because uh because",
    "start": "547279",
    "end": "553279"
  },
  {
    "text": "it's an interesting problem because when you talk about these queries the you ha it is flexible true that you that",
    "start": "553279",
    "end": "560720"
  },
  {
    "text": "the shape of the data is returned is dependent on the input query but that makes it difficult for typed languages",
    "start": "560720",
    "end": "566720"
  },
  {
    "text": "because if you wanted to write a type for each query that would be a lot because you",
    "start": "566720",
    "end": "573360"
  },
  {
    "text": "because you cannot just generate a client for the entire graphql api it has to generate a client just for the",
    "start": "573360",
    "end": "579440"
  },
  {
    "text": "queries you wrote because the shape of the input query dictates the shape of the output so it's an interesting",
    "start": "579440",
    "end": "585279"
  },
  {
    "text": "problem to to to work with but for that but for that",
    "start": "585279",
    "end": "590959"
  },
  {
    "text": "matter graphql has thought about these things before they thought about okay how could we make this tool to be",
    "start": "590959",
    "end": "598480"
  },
  {
    "text": "useful for developers and one of the things about graphql besides that it has a type system it",
    "start": "598480",
    "end": "604320"
  },
  {
    "text": "also meta programmable and meta programming is very broad i know but in this case it",
    "start": "604320",
    "end": "609680"
  },
  {
    "text": "means you can ask about the types in the schema you can ask things about what you",
    "start": "609680",
    "end": "615279"
  },
  {
    "text": "could do with it right so the here what you have on screen is the",
    "start": "615279",
    "end": "620480"
  },
  {
    "text": "standard introspection query and you can send that to any graphql api",
    "start": "620480",
    "end": "625839"
  },
  {
    "text": "and it will inspect the types the schema everything that it can return not the data not the underlying data from the",
    "start": "625839",
    "end": "632399"
  },
  {
    "text": "back end but the but the shape of the schema itself so tools use this snowflake uses this to",
    "start": "632399",
    "end": "640000"
  },
  {
    "text": "generate to generate types for specific queries i will show you so this is a standard query you could write it",
    "start": "640000",
    "end": "646240"
  },
  {
    "text": "against anything and i can show you in a bit how that works all right so far so good",
    "start": "646240",
    "end": "652959"
  },
  {
    "text": "so many platforms already started migrating their apis into graphql or just having both of them work side by",
    "start": "652959",
    "end": "658800"
  },
  {
    "text": "side because they're so nice to work with so github for example desert shopify is one of the first e-commerce",
    "start": "658800",
    "end": "664320"
  },
  {
    "text": "that started doing this but i think the most examples that i've seen applicable to",
    "start": "664320",
    "end": "670000"
  },
  {
    "text": "graphql are data access tools so previously a lot of",
    "start": "670000",
    "end": "675279"
  },
  {
    "text": "back-end developers would write the sql code by hand and it would require a whole back-end to set up a",
    "start": "675279",
    "end": "681360"
  },
  {
    "text": "front-end right but what a lot of companies right now are doing or",
    "start": "681360",
    "end": "686640"
  },
  {
    "text": "these companies to be exact like hasura and postgraphal they're saying okay don't worry about the back",
    "start": "686640",
    "end": "691839"
  },
  {
    "text": "end we will just take your database whatever that is we'll generate we'll automatically generate a graphql api",
    "start": "691839",
    "end": "698800"
  },
  {
    "text": "from it so that the database is immediately applicable to outside consumers like a",
    "start": "698800",
    "end": "705360"
  },
  {
    "text": "front-end so that the people on the front-end team don't have to worry about a back-end that will be their back-end a",
    "start": "705360",
    "end": "711120"
  },
  {
    "text": "hasura enabled database whatever that is so it works like you of course everybody",
    "start": "711120",
    "end": "717920"
  },
  {
    "text": "is panicking about security and how they do it but they it's well done like they do things with",
    "start": "717920",
    "end": "723760"
  },
  {
    "text": "off zero you could you could authenticate on r0 and then use that to connect to the database and i think it's",
    "start": "723760",
    "end": "729680"
  },
  {
    "text": "it's well thought of i hope okay and otherwise we have also amazon web services that are using graphql to what",
    "start": "729680",
    "end": "737200"
  },
  {
    "text": "so appsync is a nice example because they use something called graphql federation which means that if you have",
    "start": "737200",
    "end": "742959"
  },
  {
    "text": "multiple schemas multiple apis you could combine those into one in and make that make it",
    "start": "742959",
    "end": "749200"
  },
  {
    "text": "available from one api which will branch out to other services if they need to but the entry point the gate api",
    "start": "749200",
    "end": "756959"
  },
  {
    "text": "is just one graphql schema so that's what they're doing that's really nice otherwise okay there's some sms",
    "start": "756959",
    "end": "763120"
  },
  {
    "text": "solutions we don't care we all you can also spin up your own of course so on.net you have a bunch of",
    "start": "763120",
    "end": "769120"
  },
  {
    "text": "options you have graphql.net we're using that at our company it is",
    "start": "769120",
    "end": "775120"
  },
  {
    "text": "kind of okay it's a bit low level you have to explicitly define everything but",
    "start": "775120",
    "end": "781680"
  },
  {
    "text": "it has problems that is that are being solved right now with hot chocolate which is another actually not just a",
    "start": "781680",
    "end": "787040"
  },
  {
    "text": "library a platform of tools around graphql with c sharp it's uh it is doing a lot of things good they even have a",
    "start": "787040",
    "end": "793519"
  },
  {
    "text": "code generation tool but they generate c sharp that's not what we want and finally we also have an implementation",
    "start": "793519",
    "end": "800160"
  },
  {
    "text": "in pure f-sharp which i haven't tried before to to implement your own back-end in fsr",
    "start": "800160",
    "end": "806320"
  },
  {
    "text": "but i haven't tried it so i can't say a lot about it okay so how to use a graphql api well first i",
    "start": "806320",
    "end": "813600"
  },
  {
    "text": "have a i have a working uh log i have one working locally i can show you in a bit but",
    "start": "813600",
    "end": "819519"
  },
  {
    "text": "if you think about it it's just an endpoint on some back end it means you can use whatever you usually use to",
    "start": "819519",
    "end": "824720"
  },
  {
    "text": "connect to http to do that so in c sharp or dot net that would be http client you",
    "start": "824720",
    "end": "830399"
  },
  {
    "text": "just replicate whatever you need to do it's a post request to the endpoint with",
    "start": "830399",
    "end": "835920"
  },
  {
    "text": "the query in the request body plus some unnecessary details",
    "start": "835920",
    "end": "841440"
  },
  {
    "text": "so that's if you want to work with it from the from the application but first you",
    "start": "841440",
    "end": "847279"
  },
  {
    "text": "start with what they're called the graphql playground so i'll switch my view to",
    "start": "847279",
    "end": "855120"
  },
  {
    "text": "this do you see it yeah so this is um",
    "start": "855120",
    "end": "860480"
  },
  {
    "text": "well i wanted to have a nice api to for for demoing and i didn't have data so what instead i'm using a tool that",
    "start": "860480",
    "end": "867920"
  },
  {
    "text": "generates fake data by allowing me to basically just write the schema what i want the api to return and then",
    "start": "867920",
    "end": "875680"
  },
  {
    "text": "it generates the data for me so basically this is a really nice way to quickly make something or make changes",
    "start": "875680",
    "end": "882560"
  },
  {
    "text": "to this schema and get the data right off the bat without any details so",
    "start": "882560",
    "end": "888480"
  },
  {
    "text": "let's see okay i have it in here i will run it up",
    "start": "888480",
    "end": "894399"
  },
  {
    "text": "okay running 5000 it's running it's opening up okay so this is the how the schema looks",
    "start": "897680",
    "end": "903360"
  },
  {
    "text": "like oh sorry",
    "start": "903360",
    "end": "908800"
  },
  {
    "text": "okay so this is the schema and i can write queries for it so here okay let's go",
    "start": "910480",
    "end": "915920"
  },
  {
    "text": "back to the schema to explain what it looks like so here i have my",
    "start": "915920",
    "end": "921040"
  },
  {
    "text": "root level query and it has something for example one of the field is something called all",
    "start": "921040",
    "end": "926160"
  },
  {
    "text": "companies and it returns a list of company and each company has an id a name industry and a list of employees",
    "start": "926160",
    "end": "933360"
  },
  {
    "text": "and then the employees have other things like i first name last name but also a",
    "start": "933360",
    "end": "939600"
  },
  {
    "text": "reference back to the to the company and they also have uh there's also a",
    "start": "939600",
    "end": "944800"
  },
  {
    "text": "recursive definition here where you could also define subordinates i don't know why they call that that",
    "start": "944800",
    "end": "951040"
  },
  {
    "text": "this was an example but subordinates in employees so this is how the shape looks like",
    "start": "951040",
    "end": "957759"
  },
  {
    "text": "which means i could ask for this is my query editor",
    "start": "957759",
    "end": "962959"
  },
  {
    "text": "i could ask for all companies okay the nice thing about this is the graphql playground it's like a ui that works",
    "start": "962959",
    "end": "970160"
  },
  {
    "text": "with any graphql api and again it's one of these tools that uses the introspection query to figure out what",
    "start": "970160",
    "end": "976240"
  },
  {
    "text": "it can query from that api so here if i have if i do control space i get already",
    "start": "976240",
    "end": "982160"
  },
  {
    "text": "intelligence about the api because it knows what is possible what is what i can get from it so here if i have all",
    "start": "982160",
    "end": "988800"
  },
  {
    "text": "companies i start expanding it and i see what things i could query from",
    "start": "988800",
    "end": "994000"
  },
  {
    "text": "that and i can go id name industry",
    "start": "994000",
    "end": "999040"
  },
  {
    "text": "and i could run it now i get uh json back in this shape",
    "start": "999040",
    "end": "1005040"
  },
  {
    "text": "because that's what i asked for if i add more things i will get a different i'll get it different jason",
    "start": "1005040",
    "end": "1013360"
  },
  {
    "text": "first name okay so here we have companies and each company has employees and",
    "start": "1013440",
    "end": "1020240"
  },
  {
    "text": "yeah this is how it looks like of course this is random so it means every time i run it i'll get different data but",
    "start": "1020240",
    "end": "1025600"
  },
  {
    "text": "that's okay we don't care okay um so that's how you work with it from that",
    "start": "1025600",
    "end": "1031438"
  },
  {
    "text": "from the playground but that's not how you would want to do it from your application like okay your",
    "start": "1031439",
    "end": "1038319"
  },
  {
    "text": "work you're exploring the api and you came to the conclusion that you made a really nice query and you want to use",
    "start": "1038319",
    "end": "1044079"
  },
  {
    "text": "that how do you do that from your application okay you can you can do that",
    "start": "1044079",
    "end": "1049200"
  },
  {
    "text": "you can set up like a text file you could read from it and put it in the request body and call that api but then",
    "start": "1049200",
    "end": "1056240"
  },
  {
    "text": "you have to deal with the types here and that's not fun to do it so let a tool do that for you and that's what",
    "start": "1056240",
    "end": "1063440"
  },
  {
    "text": "i'm presenting today tool called snowflake so um [Music]",
    "start": "1063440",
    "end": "1069200"
  },
  {
    "text": "so yeah you start with the graphql api you could move what you've seen to a",
    "start": "1069200",
    "end": "1074240"
  },
  {
    "text": "http client from c sharp or any other client that doesn't really matter but then you want to do more because of this",
    "start": "1074240",
    "end": "1080080"
  },
  {
    "text": "because these types are really annoying to work with what and what you can use is actually a type provider in f-sharp",
    "start": "1080080",
    "end": "1086880"
  },
  {
    "text": "uh from the fab data graphql package and it works it works okay",
    "start": "1086880",
    "end": "1093280"
  },
  {
    "text": "except that it comes with all the problems that type providers bring along such as that it",
    "start": "1093280",
    "end": "1098320"
  },
  {
    "text": "generates classes and not records or unions and when i built snowflake in the",
    "start": "1098320",
    "end": "1103679"
  },
  {
    "text": "beginning i wanted to i wanted to support fable fable is the fsharp2 javascript compiler and fable does not",
    "start": "1103679",
    "end": "1110640"
  },
  {
    "text": "know how to work with classes if you do things like json serialization or deserialization and",
    "start": "1110640",
    "end": "1116880"
  },
  {
    "text": "http calls so this type provider is not applicable to fable and that was my first use case for the for snowflake i",
    "start": "1116880",
    "end": "1123440"
  },
  {
    "text": "needed to i needed to generate a client that that can that knows how to run in a browser",
    "start": "1123440",
    "end": "1129360"
  },
  {
    "text": "so graph so the type provider fault falls back we also have a c-sharp code gen like i",
    "start": "1129360",
    "end": "1135440"
  },
  {
    "text": "talked about from hot chocolate is really nice but it's c sharp again can't use it for fable i think you could use that for",
    "start": "1135440",
    "end": "1142080"
  },
  {
    "text": "from f sharp normally so i ended up writing my own uh gold snowflake and this one does work",
    "start": "1142080",
    "end": "1148799"
  },
  {
    "text": "for both.net and fable as i will show you in a bit all right",
    "start": "1148799",
    "end": "1155200"
  },
  {
    "text": "so a little intro to snowflake before we get started so it's a net cli tool it means you can install it like any dot",
    "start": "1155200",
    "end": "1161360"
  },
  {
    "text": "nationalities globally or locally it's up to you it's made for f-sharp and fable",
    "start": "1161360",
    "end": "1167200"
  },
  {
    "text": "and it does a lot to it there's a lot to queries i'll show you in a bit and the nice thing about it it does",
    "start": "1167200",
    "end": "1172720"
  },
  {
    "text": "generate records and unions and you need those when you when you map the types from graphql to f-sharp",
    "start": "1172720",
    "end": "1179760"
  },
  {
    "text": "it also like supports uh supports different async like okay these",
    "start": "1179760",
    "end": "1185039"
  },
  {
    "text": "are like very nice features later that i've added which is for example if you have",
    "start": "1185039",
    "end": "1191120"
  },
  {
    "text": "when you generate the types do you want async or do you want task um do you want to generate a project",
    "start": "1191120",
    "end": "1196960"
  },
  {
    "text": "file or don't or not if you want just to import the files there's lots of lots of uh options you could change",
    "start": "1196960",
    "end": "1203919"
  },
  {
    "text": "the serializer if you don't like newtons of json you could switch to system and that will also work in case you're",
    "start": "1203919",
    "end": "1209039"
  },
  {
    "text": "compiling for f sharp so let me stop talking and actually start writing some code",
    "start": "1209039",
    "end": "1215280"
  },
  {
    "text": "all right i have no not yet so okay i have here my",
    "start": "1215280",
    "end": "1221280"
  },
  {
    "text": "project and it has this file called snowf okay so this project is where i'm running my",
    "start": "1221280",
    "end": "1228320"
  },
  {
    "text": "uh my fake data generator here on the left uh we will keep that working and to work",
    "start": "1228320",
    "end": "1235039"
  },
  {
    "text": "with it from a client i will first start by writing a console app that reads the data and spits out a excel file",
    "start": "1235039",
    "end": "1241919"
  },
  {
    "text": "so if you you start using snowflake by installing it so there's no",
    "start": "1241919",
    "end": "1246960"
  },
  {
    "text": "net tool installed snowflake g and then you make in a directory like this uh these configurations i think",
    "start": "1246960",
    "end": "1253679"
  },
  {
    "text": "those ones are the ones that matter so first you say where is your schema what's the end point",
    "start": "1253679",
    "end": "1259840"
  },
  {
    "text": "you're trying to connect to you give it [Music] you give it a path to the queries that",
    "start": "1259840",
    "end": "1266640"
  },
  {
    "text": "you want to write so i talked about that you want to use the playground to figure out the",
    "start": "1266640",
    "end": "1272159"
  },
  {
    "text": "query you want but after you've done that once you've found a query i want you to just copy paste that query into",
    "start": "1272159",
    "end": "1278880"
  },
  {
    "text": "one of those things right so you copy it to a file you name you name it something",
    "start": "1278880",
    "end": "1284960"
  },
  {
    "text": "like it accompanies or get get company by employee id",
    "start": "1284960",
    "end": "1290480"
  },
  {
    "text": "uh get employee by id um in this case in this case this is a parameterized",
    "start": "1290480",
    "end": "1295840"
  },
  {
    "text": "query which will translate into f sharp inputs later on but we won't use that today but it is it is supported you",
    "start": "1295840",
    "end": "1303039"
  },
  {
    "text": "could use that so after you've said where your queries are where the schema can be okay there are some more some",
    "start": "1303039",
    "end": "1309200"
  },
  {
    "text": "more configuration like what the name of a project should be where the output should be and of course that the target",
    "start": "1309200",
    "end": "1314480"
  },
  {
    "text": "is f sharp uh you could forget about this one this is for details so once you've done that you could run",
    "start": "1314480",
    "end": "1320880"
  },
  {
    "text": "snowflake here and by by default the first thing snowflake",
    "start": "1320880",
    "end": "1327360"
  },
  {
    "text": "does is type checking your queries against the against the graphql backend so it goes it goes out",
    "start": "1327360",
    "end": "1334320"
  },
  {
    "text": "to the schema downloads the schema and checks that the queries are actually",
    "start": "1334320",
    "end": "1339600"
  },
  {
    "text": "compatible before you even have to run them so if i change something like industry",
    "start": "1339600",
    "end": "1345280"
  },
  {
    "text": "to this like have a like if i had some kind of typo it will tell me that this field is",
    "start": "1345280",
    "end": "1352960"
  },
  {
    "text": "unknown uh is unknown because it was selected from this sub query of type company it",
    "start": "1352960",
    "end": "1358320"
  },
  {
    "text": "knows it knows what it knows everything in the graph it knows everything about how to check it so",
    "start": "1358320",
    "end": "1364080"
  },
  {
    "text": "it can find out it can find about find out about the small issues such as typos",
    "start": "1364080",
    "end": "1369679"
  },
  {
    "text": "or maybe fields that are no longer there but it can also figure out",
    "start": "1369679",
    "end": "1375080"
  },
  {
    "text": "industry it can also figure out some non-trivial things such as if you used",
    "start": "1375080",
    "end": "1381600"
  },
  {
    "text": "if you used an optional parameter in a place where an in a place where a required parameter is required so this",
    "start": "1381600",
    "end": "1388799"
  },
  {
    "text": "is kind of it does the nullability checking quite well so here",
    "start": "1388799",
    "end": "1394159"
  },
  {
    "text": "employee expects a required id but the query itself is parameterized with an optional id so if i make it",
    "start": "1394159",
    "end": "1400559"
  },
  {
    "text": "optional now it should tell me that something is wrong indeed because i used an optional",
    "start": "1400559",
    "end": "1406559"
  },
  {
    "text": "id in a place where a required one was expected so it figures it figures out these kind of things i'm sure there are",
    "start": "1406559",
    "end": "1412640"
  },
  {
    "text": "cases that i didn't handle with type checking if you do find one please report an issue",
    "start": "1412640",
    "end": "1417679"
  },
  {
    "text": "okay so after your after you run it and everything is good all green check marks",
    "start": "1417679",
    "end": "1423120"
  },
  {
    "text": "you can say generate and generate will well it first does the",
    "start": "1423120",
    "end": "1429840"
  },
  {
    "text": "validation and if everything is good it will uh write out a full project so this",
    "start": "1429840",
    "end": "1435200"
  },
  {
    "text": "is different from a type provider it will actually generate the full project and has a couple of things",
    "start": "1435200",
    "end": "1442320"
  },
  {
    "text": "a couple of interesting things so first thing is that it has a client the client",
    "start": "1442320",
    "end": "1447520"
  },
  {
    "text": "will have a bunch of functions which will map to the queries and each query",
    "start": "1447520",
    "end": "1453200"
  },
  {
    "text": "will have the output shape in it so for example i have the all",
    "start": "1453200",
    "end": "1458559"
  },
  {
    "text": "companies here i have the all companies query",
    "start": "1458559",
    "end": "1463760"
  },
  {
    "text": "and the shape of the json returned is mapped",
    "start": "1463760",
    "end": "1470320"
  },
  {
    "text": "to these types so this query returns me data that looks like the following it has",
    "start": "1470320",
    "end": "1476400"
  },
  {
    "text": "the root query object which has something called all companies of type list of company",
    "start": "1476400",
    "end": "1482240"
  },
  {
    "text": "and list of company has something that has id name industry and a list of employees",
    "start": "1482240",
    "end": "1487520"
  },
  {
    "text": "and employees have these things notice that um their types generated are only",
    "start": "1487520",
    "end": "1493840"
  },
  {
    "text": "the subsets of the sub queries i selected because because it can be different per query if",
    "start": "1493840",
    "end": "1500000"
  },
  {
    "text": "i had another query where i selected another field from another from another",
    "start": "1500000",
    "end": "1506640"
  },
  {
    "text": "from employee for example i just added another field that's a different type it's not the same type anymore",
    "start": "1506640",
    "end": "1511760"
  },
  {
    "text": "i don't think in fsharp we can say that this type is a subtype of of another there's definitely um",
    "start": "1511760",
    "end": "1518640"
  },
  {
    "text": "an improvement here where i could use fragments fragments allow you to read to reuse parts of your",
    "start": "1518640",
    "end": "1524720"
  },
  {
    "text": "queries in your graphql queries and that's not graph fragments are supported but reusing them will just expand it out",
    "start": "1524720",
    "end": "1531440"
  },
  {
    "text": "instead of making that as a proper subtype but that's okay it's still still very very much usable so these are the",
    "start": "1531440",
    "end": "1538400"
  },
  {
    "text": "types and then you have the craftql client which does all the boring stuff like checking if it's an error and",
    "start": "1538400",
    "end": "1545039"
  },
  {
    "text": "deserializing to the right type etc etc it's not very important so let's start using it and by using it i mean",
    "start": "1545039",
    "end": "1552400"
  },
  {
    "text": "referencing the generated project from the project you want to use so here i have a console application and i'm",
    "start": "1552400",
    "end": "1558799"
  },
  {
    "text": "referencing the project that was generated and that by and that in turn",
    "start": "1558799",
    "end": "1564000"
  },
  {
    "text": "downloads all its dependencies and make sure everything is good the generated project is a net standard 2.0 which",
    "start": "1564000",
    "end": "1571200"
  },
  {
    "text": "means that it's compatible for new.net.net core applications but also for full framework apps if you needed to",
    "start": "1571200",
    "end": "1577840"
  },
  {
    "text": "work with that if you don't know what that is lucky you um so for the excel console",
    "start": "1577840",
    "end": "1585120"
  },
  {
    "text": "starting from nothing uh except for um",
    "start": "1585120",
    "end": "1590159"
  },
  {
    "text": "except for the reference which means i could start using it so this is a",
    "start": "1590159",
    "end": "1596000"
  },
  {
    "text": "net oh not this one",
    "start": "1596000",
    "end": "1600720"
  },
  {
    "text": "excel console and then netron if you haven't seen f sharp before this is a little f sharp",
    "start": "1602000",
    "end": "1607919"
  },
  {
    "text": "console project actually i could use the i could remove the usings the namespaces but you",
    "start": "1607919",
    "end": "1614480"
  },
  {
    "text": "know it's okay all right so while it's running and i don't want to wait so i'll start writing",
    "start": "1614480",
    "end": "1620080"
  },
  {
    "text": "out what i need to write from the um so what i'm doing here is i'm creating an excel file i want to read the data from",
    "start": "1620080",
    "end": "1626480"
  },
  {
    "text": "the graphql api and put out an excel file so i will open up the namespace",
    "start": "1626480",
    "end": "1632080"
  },
  {
    "text": "that was added so companydata is the same name the project was",
    "start": "1632080",
    "end": "1638640"
  },
  {
    "text": "so if you define the project to be something that's the name of the namespace",
    "start": "1638640",
    "end": "1644320"
  },
  {
    "text": "so i think that makes sense and then you open up the namespace you create a client which is",
    "start": "1644320",
    "end": "1651600"
  },
  {
    "text": "this one and it takes well you can you could give it your own http client if",
    "start": "1652000",
    "end": "1657279"
  },
  {
    "text": "you want but you could also just do this so it's pointing out to graphql",
    "start": "1657279",
    "end": "1665679"
  },
  {
    "text": "and now we have a client and client has things like these so it",
    "start": "1665679",
    "end": "1671279"
  },
  {
    "text": "has from each query it generated two functions the asynchronous a non async in the",
    "start": "1671279",
    "end": "1677200"
  },
  {
    "text": "synchronous one i'm in a i'm inside an inside a console app so i don't care about the asynchronous version i'll just",
    "start": "1677200",
    "end": "1682640"
  },
  {
    "text": "use i'll just use the um the synchronous one so get all companies doesn't have any",
    "start": "1682640",
    "end": "1688559"
  },
  {
    "text": "inputs which means it's just a just a function text unit so what it",
    "start": "1688559",
    "end": "1694080"
  },
  {
    "text": "returns it's interesting what it returns it returns a result of either the the query if it was good otherwise it",
    "start": "1694080",
    "end": "1700799"
  },
  {
    "text": "returns a list of errors from graphql so graphql usually",
    "start": "1700799",
    "end": "1705919"
  },
  {
    "text": "returns errors if you do if you had any anything wrong in the query for example",
    "start": "1705919",
    "end": "1710960"
  },
  {
    "text": "it's usually a list of errors and the error have messages now graphql has i think here a",
    "start": "1710960",
    "end": "1717679"
  },
  {
    "text": "limitation because the shape of the errors are not part of the schema there's no way to know",
    "start": "1717679",
    "end": "1723440"
  },
  {
    "text": "what the error will how the error shape will look like whether it's a uppercase message or a lowercase message you don't",
    "start": "1723440",
    "end": "1729279"
  },
  {
    "text": "you don't know you have to make a wrong query you have to you have to get a syntax error or something to know how it",
    "start": "1729279",
    "end": "1734960"
  },
  {
    "text": "looks like and then in snowflake you could actually there's a config to override how the",
    "start": "1734960",
    "end": "1740960"
  },
  {
    "text": "shape of the error looks like if you need to so that's that",
    "start": "1740960",
    "end": "1746240"
  },
  {
    "text": "so a list of errors so either the either the data or the list of errors and that's what",
    "start": "1746240",
    "end": "1751840"
  },
  {
    "text": "each function is generating okay i keep getting back to this one i don't need it",
    "start": "1751840",
    "end": "1757039"
  },
  {
    "text": "so i have get all companies it returns a result it means i could start matching",
    "start": "1757039",
    "end": "1762240"
  },
  {
    "text": "so okay i'd say let response and then match the response with okay data start",
    "start": "1762240",
    "end": "1770720"
  },
  {
    "text": "doing something with the data otherwise you have error with server",
    "start": "1770720",
    "end": "1776880"
  },
  {
    "text": "errors which means you could do stuff um let's not care too much about that for",
    "start": "1776880",
    "end": "1782640"
  },
  {
    "text": "now so here data if i dot into it i already see everything from there so i have all",
    "start": "1782640",
    "end": "1788960"
  },
  {
    "text": "companies because that's what i what i requested so let's say companies is",
    "start": "1788960",
    "end": "1795679"
  },
  {
    "text": "just like that data or companies and then i need to make an excel file so",
    "start": "1795679",
    "end": "1802159"
  },
  {
    "text": "close xml simple sheets small library on top of close xml which",
    "start": "1802960",
    "end": "1809600"
  },
  {
    "text": "is a huge library to make excel and uh and office files so this is a nice api",
    "start": "1809600",
    "end": "1815200"
  },
  {
    "text": "around it okay let's mix file will be excel",
    "start": "1815200",
    "end": "1821200"
  },
  {
    "text": "create from companies and it takes a list of fields that it",
    "start": "1821200",
    "end": "1827200"
  },
  {
    "text": "needs to so that is companies excel field from each",
    "start": "1827200",
    "end": "1833360"
  },
  {
    "text": "company goes to let's say company name",
    "start": "1833360",
    "end": "1839919"
  },
  {
    "text": "copy paste that one and say the industry okay",
    "start": "1840159",
    "end": "1846720"
  },
  {
    "text": "that's our file let's write it out all right all bytes to",
    "start": "1846720",
    "end": "1853760"
  },
  {
    "text": "companies dot xlsx i think file",
    "start": "1854840",
    "end": "1860399"
  },
  {
    "text": "okay let's run it and that should go out to the api",
    "start": "1860399",
    "end": "1868080"
  },
  {
    "text": "and do stuff",
    "start": "1868080",
    "end": "1870720"
  },
  {
    "text": "getting extensive crisis okay uh there you go uh companies it's an excel file",
    "start": "1876159",
    "end": "1881519"
  },
  {
    "text": "this was generated there okay let me open that in file explorer",
    "start": "1881519",
    "end": "1887600"
  },
  {
    "text": "excel console companies hey that's",
    "start": "1887600",
    "end": "1893840"
  },
  {
    "text": "that will be the name of the company and it's industry so there we go that was that was easy",
    "start": "1893840",
    "end": "1900720"
  },
  {
    "text": "that was not bad but that's not very interesting so let's do something more interesting with excel",
    "start": "1900720",
    "end": "1906399"
  },
  {
    "text": "instead of just generating those we'll write some excel functions so",
    "start": "1906399",
    "end": "1911679"
  },
  {
    "text": "i'll switch to visual studio and i have something here oh i already have",
    "start": "1911679",
    "end": "1918880"
  },
  {
    "text": "it written out that saves me some time that's great so i have here um something interesting i think it's an",
    "start": "1918880",
    "end": "1925440"
  },
  {
    "text": "excel plugin which allows me to write f sharp code and that is and that can be executed",
    "start": "1925440",
    "end": "1932480"
  },
  {
    "text": "from excel and the nice thing about it is that it's as reactive as excel is so you can write",
    "start": "1932480",
    "end": "1939039"
  },
  {
    "text": "functions that depend of which the input depend is coming from cells and if though and if those cells",
    "start": "1939039",
    "end": "1945360"
  },
  {
    "text": "change then your function is re-executed to get data back in your excel file so here i have a function called hello and",
    "start": "1945360",
    "end": "1951600"
  },
  {
    "text": "it has a name which means if i use that from excel i should be able to",
    "start": "1951600",
    "end": "1956640"
  },
  {
    "text": "parameterize it so what i have here basically the same as what i had with the excel file i had i have a client here",
    "start": "1956640",
    "end": "1964320"
  },
  {
    "text": "going on so let me just start that off",
    "start": "1964320",
    "end": "1971720"
  },
  {
    "text": "yes so what it does it it builds the extension and it opens up excel with that extension in there so it asks me if",
    "start": "1976000",
    "end": "1982480"
  },
  {
    "text": "i enable it if i want to enable it or not so i will enable just for this session",
    "start": "1982480",
    "end": "1988159"
  },
  {
    "text": "start with a blank notebook let's say ndc oslo that's my input and here i can say",
    "start": "1988159",
    "end": "1995039"
  },
  {
    "text": "equals and then hello and you can see it on screen",
    "start": "1995039",
    "end": "2001279"
  },
  {
    "text": "tap and then let the first cell be the input of that and it says hello and you see also so it",
    "start": "2001279",
    "end": "2007840"
  },
  {
    "text": "runs your f sharp code and generates in this case one cell out of it if this changes",
    "start": "2007840",
    "end": "2015120"
  },
  {
    "text": "then your outputs also change um this is kind of kind of cool for one",
    "start": "2015679",
    "end": "2021120"
  },
  {
    "text": "cell but the nice thing is that you can also generate a table from it so basically the same thing i have as i had",
    "start": "2021120",
    "end": "2027840"
  },
  {
    "text": "uh before i call the client get all companies the api looks a bit different but you get",
    "start": "2027840",
    "end": "2033440"
  },
  {
    "text": "the idea we create a table from the companies and we create some headers and from each header we define what we want",
    "start": "2033440",
    "end": "2040880"
  },
  {
    "text": "to be the content of that header so and if we have errors we'll just output another table",
    "start": "2040880",
    "end": "2047440"
  },
  {
    "text": "okay so that would be equals companies tap",
    "start": "2047440",
    "end": "2053919"
  },
  {
    "text": "close and there you go it used the the graphql client to to get out to the",
    "start": "2053919",
    "end": "2061919"
  },
  {
    "text": "api get data back and show them on screen of course because the data is always",
    "start": "2061919",
    "end": "2067280"
  },
  {
    "text": "random every time i like click on it it will go there and generate",
    "start": "2067280",
    "end": "2072839"
  },
  {
    "text": "something uh if i click on it if i just re-evaluate again it just re it just generates other",
    "start": "2072839",
    "end": "2079679"
  },
  {
    "text": "things every time so it's kind of cool if you if you know you're working a lot with excel instead of having to generate files every time",
    "start": "2079679",
    "end": "2086320"
  },
  {
    "text": "you could just write an api that allows people to get data in inside of excel",
    "start": "2086320",
    "end": "2092320"
  },
  {
    "text": "so yeah that's another place where this is used and that's exactly why i needed this",
    "start": "2092320",
    "end": "2097440"
  },
  {
    "text": "so this is kind of interesting because the x the excel plugin is actually a full framework file it's a full",
    "start": "2097440",
    "end": "2103760"
  },
  {
    "text": "framework project sorry and it it references a net standard project in it",
    "start": "2103760",
    "end": "2108880"
  },
  {
    "text": "and it works but for it to also work properly you need to set",
    "start": "2108880",
    "end": "2114720"
  },
  {
    "text": "uh what is it called the copy local file local lock file assemblies you need that",
    "start": "2114720",
    "end": "2121280"
  },
  {
    "text": "to make it compile the all the dependencies to the output folder again it's just boring details but sometimes",
    "start": "2121280",
    "end": "2127599"
  },
  {
    "text": "you need it so it's there okay so that's for f sharp and",
    "start": "2127599",
    "end": "2133119"
  },
  {
    "text": "full framework i go back to the original reason why i built this in the first place which is to support fable so if we go to a fable",
    "start": "2133119",
    "end": "2142160"
  },
  {
    "text": "project and here i have almost the same except that this time i'm generating",
    "start": "2142160",
    "end": "2149040"
  },
  {
    "text": "i'm targeting fabled same queries same project but the generated code will be different",
    "start": "2149040",
    "end": "2155599"
  },
  {
    "text": "and here i have a simple react application that is rendering out the hello world",
    "start": "2155599",
    "end": "2161599"
  },
  {
    "text": "i'm not sure if it's open yet it is running so we could go to",
    "start": "2161599",
    "end": "2168160"
  },
  {
    "text": "localhost yeah there you go that's a react application written in fsharp compiled to javascript",
    "start": "2168320",
    "end": "2174640"
  },
  {
    "text": "so if we go to components we will change this write something that gets the data from",
    "start": "2174640",
    "end": "2180640"
  },
  {
    "text": "the that gets the data from the api so first thing i need to add well i need",
    "start": "2180640",
    "end": "2186800"
  },
  {
    "text": "the company data uh this is not the same project i generated",
    "start": "2186800",
    "end": "2192240"
  },
  {
    "text": "another project that is targeting fable so this is not the same one but the same name space of course so i need a company",
    "start": "2192240",
    "end": "2199520"
  },
  {
    "text": "data but i also need some react uh goodies i'll use",
    "start": "2199520",
    "end": "2204640"
  },
  {
    "text": "use deferred hook so let's say i have the company's react component",
    "start": "2204640",
    "end": "2212640"
  },
  {
    "text": "and that is a react component that has a client",
    "start": "2212640",
    "end": "2219680"
  },
  {
    "text": "which will be the company data graphql client",
    "start": "2219680",
    "end": "2226320"
  },
  {
    "text": "now this one doesn't need to know the full uh the full url because it's being proxied as if it was the back end so",
    "start": "2226320",
    "end": "2233200"
  },
  {
    "text": "just a just a path is okay i have the client i could get the response which is",
    "start": "2233200",
    "end": "2240560"
  },
  {
    "text": "react hook use deferred and deferred will take something",
    "start": "2240560",
    "end": "2246640"
  },
  {
    "text": "asynchronous so that's client dot get all companies",
    "start": "2246640",
    "end": "2253200"
  },
  {
    "text": "and this has no dependencies because i just wanted to run it once when the component initializes",
    "start": "2253200",
    "end": "2259119"
  },
  {
    "text": "so i have response which is a deferred of whatever that asynchronous function",
    "start": "2259119",
    "end": "2265520"
  },
  {
    "text": "returned and a deferred means that is something that is going to give me results after a while",
    "start": "2265520",
    "end": "2270880"
  },
  {
    "text": "so i could check if it has something then render that out so match response",
    "start": "2270880",
    "end": "2277920"
  },
  {
    "text": "with deferred and if the deferred was",
    "start": "2277920",
    "end": "2283200"
  },
  {
    "text": "resolved with some good data we can start doing something with the",
    "start": "2283200",
    "end": "2288560"
  },
  {
    "text": "data data all companies",
    "start": "2288560",
    "end": "2294640"
  },
  {
    "text": "and then we have something that we can render out on screen which is html unordered list",
    "start": "2294640",
    "end": "2301599"
  },
  {
    "text": "for company in companies do html list item",
    "start": "2301599",
    "end": "2309359"
  },
  {
    "text": "company name okay if i have anything else then i will just assume",
    "start": "2309359",
    "end": "2317359"
  },
  {
    "text": "anything else i'll just assume i'm loading uh you can",
    "start": "2317400",
    "end": "2322800"
  },
  {
    "text": "handle errors separately if you want like there's a there's a resolved error and then failed you could sep for each",
    "start": "2322800",
    "end": "2330000"
  },
  {
    "text": "case you could define what you want to wait what you wanted to return okay so this looks kind of okay it's",
    "start": "2330000",
    "end": "2336079"
  },
  {
    "text": "rebuilding hello world is no longer a component so i need to change that",
    "start": "2336079",
    "end": "2341839"
  },
  {
    "text": "into companies",
    "start": "2341839",
    "end": "2345520"
  },
  {
    "text": "okay recompiled everything and there there you go it went out to the to the back end got the data",
    "start": "2347839",
    "end": "2354480"
  },
  {
    "text": "deserialized it and then rendered it on screen every time every time you run it it will just",
    "start": "2354480",
    "end": "2360720"
  },
  {
    "text": "get the random data from my fake api",
    "start": "2360720",
    "end": "2367000"
  },
  {
    "text": "all right uh i think that was it for the demo",
    "start": "2368560",
    "end": "2374320"
  },
  {
    "text": "i do want to take a quick uh a quick look at the repository itself so",
    "start": "2374320",
    "end": "2381839"
  },
  {
    "text": "snowflake well not the issues oh",
    "start": "2381839",
    "end": "2387440"
  },
  {
    "text": "well that's unfortunate i wanted to show you the options that there are in snowflake because",
    "start": "2387599",
    "end": "2393040"
  },
  {
    "text": "actually i could do that from here so i have it running and go back here go",
    "start": "2393040",
    "end": "2399200"
  },
  {
    "text": "back to the schema and i already showed you [Music] the union so i want to show you how that",
    "start": "2399200",
    "end": "2405440"
  },
  {
    "text": "looks like when you generate it so if we had let's also call it search results so",
    "start": "2405440",
    "end": "2410560"
  },
  {
    "text": "union search results equals either employee",
    "start": "2410560",
    "end": "2419359"
  },
  {
    "text": "or company so that's the union that is returned",
    "start": "2419359",
    "end": "2424640"
  },
  {
    "text": "from something called search and we won't parameterize it it doesn't",
    "start": "2424640",
    "end": "2429839"
  },
  {
    "text": "matter because this is random data it will generate something for us anyways so this returns a list of a required",
    "start": "2429839",
    "end": "2436000"
  },
  {
    "text": "research search result and the list itself is also required so that's nice we can save that go back to our queries",
    "start": "2436000",
    "end": "2443119"
  },
  {
    "text": "and then instead of we have search and then we do the pattern matching we did before like dot",
    "start": "2443119",
    "end": "2449839"
  },
  {
    "text": "dot company if it was a company then",
    "start": "2449839",
    "end": "2455119"
  },
  {
    "text": "i think it's on company yeah",
    "start": "2455119",
    "end": "2460400"
  },
  {
    "text": "on company i want id name industry but i also need the type name",
    "start": "2460400",
    "end": "2468640"
  },
  {
    "text": "that if it was this and",
    "start": "2469839",
    "end": "2473760"
  },
  {
    "text": "on employee i want id first name last name",
    "start": "2475119",
    "end": "2480640"
  },
  {
    "text": "so this kind of works yeah it still generates some something so sometimes it generated okay for employee i also want",
    "start": "2480640",
    "end": "2487440"
  },
  {
    "text": "some type name okay so it will get back the type name and",
    "start": "2487440",
    "end": "2493920"
  },
  {
    "text": "the company in the same in the same output results i'll take that",
    "start": "2493920",
    "end": "2499119"
  },
  {
    "text": "go back to my project go back to queries add a new one",
    "start": "2499119",
    "end": "2507200"
  },
  {
    "text": "search gql add the same query here",
    "start": "2507200",
    "end": "2512480"
  },
  {
    "text": "and run snowflake again well first check out that it works like for example if i do not add type name it",
    "start": "2512480",
    "end": "2520240"
  },
  {
    "text": "will tell me it should tell me after i save uh yeah it's not in the right",
    "start": "2520240",
    "end": "2526960"
  },
  {
    "text": "repository okay so yeah it tells me that you need type name it's not necessary for code",
    "start": "2526960",
    "end": "2533280"
  },
  {
    "text": "generation but it's necessary for the runtime because the way that",
    "start": "2533280",
    "end": "2538560"
  },
  {
    "text": "that types are discriminated upon is using that is the type name field",
    "start": "2538560",
    "end": "2544160"
  },
  {
    "text": "so snowflake generates and from this enum well which is the subw subset of the original type",
    "start": "2544160",
    "end": "2551760"
  },
  {
    "text": "it should generate a full enum in fsharp so if we go to search fs",
    "start": "2551760",
    "end": "2558720"
  },
  {
    "text": "that is the type that it generated so it knows that it has to return a search result but this is like again a subtype",
    "start": "2558720",
    "end": "2566880"
  },
  {
    "text": "of only the things that you selected so we did do the pattern matching from the graphql query but from employee we only",
    "start": "2566880",
    "end": "2574240"
  },
  {
    "text": "selected a couple of things and the same for and the same for the company we didn't select all the things",
    "start": "2574240",
    "end": "2581040"
  },
  {
    "text": "so it knows that it only needs to compile just the things that were um",
    "start": "2581040",
    "end": "2586079"
  },
  {
    "text": "generated and it gives you a union just like you would expect in fsharp and you can pattern match over it and do",
    "start": "2586079",
    "end": "2592000"
  },
  {
    "text": "everything you want to to do with it so yeah this is one of the cool things uh that is that are enabled there's also",
    "start": "2592000",
    "end": "2598400"
  },
  {
    "text": "interfaces um that also supports interfaces which they compile down to",
    "start": "2598400",
    "end": "2603839"
  },
  {
    "text": "they compile down to unions so that's nice um they yeah they they're just supported",
    "start": "2603839",
    "end": "2609760"
  },
  {
    "text": "if you if you need to use them all right so that was a little bit of the demo um",
    "start": "2609760",
    "end": "2617520"
  },
  {
    "text": "yeah we've gone through everything of course some things are still missing from snowflake like i talked about the",
    "start": "2617520",
    "end": "2622560"
  },
  {
    "text": "fact that you cannot reuse fragments across across queries you could just you reuse them in a",
    "start": "2622560",
    "end": "2628480"
  },
  {
    "text": "single query they will be expanded out to the way you use them and there aren't there's no subscription support so in",
    "start": "2628480",
    "end": "2635200"
  },
  {
    "text": "graphql you have subscriptions which are real-time uh real-time mechanism where you could do websocket with them they're",
    "start": "2635200",
    "end": "2641920"
  },
  {
    "text": "not supported yet just because i didn't have a good use case for them but if you do have a good use case just file",
    "start": "2641920",
    "end": "2647839"
  },
  {
    "text": "another issue",
    "start": "2647839",
    "end": "2650400"
  },
  {
    "text": "and with that we've shown the demo we have a couple of links here i'll share the i'll share the presentation",
    "start": "2653200",
    "end": "2659920"
  },
  {
    "text": "later on slack so that you could have access to all these things um so the project that allows us to",
    "start": "2659920",
    "end": "2665359"
  },
  {
    "text": "build the excel functions is called excel dna it's really cool it works with with network.net so it it's not f-sharp",
    "start": "2665359",
    "end": "2673839"
  },
  {
    "text": "specific but it's kind of cool that you could use it from f sharp to build those things uh there's a i made a specific template",
    "start": "2673839",
    "end": "2680560"
  },
  {
    "text": "if you need to start with writing those temp those plugins if you want and i've made a playlist on on youtube",
    "start": "2680560",
    "end": "2688720"
  },
  {
    "text": "for snowflake if you want to get more details into what i've done today",
    "start": "2688720",
    "end": "2694319"
  },
  {
    "text": "uh with that uh one last thing i want to talk about is that when i every time i show this to people they ask me okay",
    "start": "2694319",
    "end": "2700720"
  },
  {
    "text": "what about open api what about restful apis is there something like that for them and yes there is",
    "start": "2700720",
    "end": "2707200"
  },
  {
    "text": "is the hawaii project built this year it's it works you could give it a try i'm",
    "start": "2707200",
    "end": "2713040"
  },
  {
    "text": "sure it requires more testing but i'll leave that to you and with that i think i can i can wrap",
    "start": "2713040",
    "end": "2719839"
  },
  {
    "text": "up i would love to hear from you if anyone has any questions",
    "start": "2719839",
    "end": "2725680"
  },
  {
    "text": "yes",
    "start": "2726480",
    "end": "2729480"
  },
  {
    "text": "yes so i use visual studio because um because of the following so if i go to",
    "start": "2733839",
    "end": "2741040"
  },
  {
    "text": "properties here yes i would have i could have done with visual studio code but i had to",
    "start": "2741040",
    "end": "2748160"
  },
  {
    "text": "set up the debug arguments for my project so what happens is that okay if",
    "start": "2748160",
    "end": "2753280"
  },
  {
    "text": "i if it opens up the debug arguments are that it has to run excel",
    "start": "2753280",
    "end": "2759040"
  },
  {
    "text": "in the path and it gives the generated excel dna back as input for excel so after",
    "start": "2759040",
    "end": "2767040"
  },
  {
    "text": "building it's like a post build event that it runs excel with the generated with a generated excel it it",
    "start": "2767040",
    "end": "2774640"
  },
  {
    "text": "was built in the the template so i didn't have to copy the i didn't have to do that in visual studio because",
    "start": "2774640",
    "end": "2780880"
  },
  {
    "text": "you would need to make like a debug configuration thingy but i could have definitely just used visual studio code",
    "start": "2780880",
    "end": "2789559"
  },
  {
    "text": "yes when using snowflake would you recommend to run snowflake",
    "start": "2790720",
    "end": "2796079"
  },
  {
    "text": "during development and checking in the generated source or as part of the builds then it could be both it could be",
    "start": "2796079",
    "end": "2804000"
  },
  {
    "text": "both you definitely want to use it in development time and that's like the the base use case for",
    "start": "2804000",
    "end": "2809760"
  },
  {
    "text": "for working with it instead of having you having you to write the types yourself you could just let that",
    "start": "2809760",
    "end": "2814880"
  },
  {
    "text": "snowflake do the rest and commit the generated code to to your repository that's totally fine i",
    "start": "2814880",
    "end": "2820480"
  },
  {
    "text": "think but again if you want to if you want to every time make sure that the back end you're",
    "start": "2820480",
    "end": "2826480"
  },
  {
    "text": "you're typing against still works with your queries without having to do the generation at least just",
    "start": "2826480",
    "end": "2832400"
  },
  {
    "text": "the query validation i think would be a valuable step in your in your pipeline you could",
    "start": "2832400",
    "end": "2837599"
  },
  {
    "text": "say just validate my queries make sure that the types that i'm getting back are",
    "start": "2837599",
    "end": "2842640"
  },
  {
    "text": "the same and they don't need to be regenerated again you could also do that as a pre-commit hook",
    "start": "2842640",
    "end": "2847920"
  },
  {
    "text": "just to make sure i think i think the base the base case is already usable for that",
    "start": "2847920",
    "end": "2853440"
  },
  {
    "text": "actually for snowflake there's also a project called snowflake tasks which has",
    "start": "2853440",
    "end": "2858880"
  },
  {
    "text": "ms build integration uh that allows rebuilding the project and regenerating it when needed",
    "start": "2858880",
    "end": "2865920"
  },
  {
    "text": "um when needed for the from from like as a post built as a post built",
    "start": "2865920",
    "end": "2872400"
  },
  {
    "text": "event and not just manually i don't use that yet a lot um a couple of users do so and they're like",
    "start": "2872400",
    "end": "2879599"
  },
  {
    "text": "still working on the uh basically that has some rough edges so they're",
    "start": "2879599",
    "end": "2885119"
  },
  {
    "text": "working on it but when it's fully implemented i will document it properly so for now",
    "start": "2885119",
    "end": "2890960"
  },
  {
    "text": "just use the cli and if you need to automate it you could also add another step in your in your builds build script",
    "start": "2890960",
    "end": "2897680"
  },
  {
    "text": "to either build or validate your queries",
    "start": "2897680",
    "end": "2901838"
  },
  {
    "text": "uh it's like the the default the default snowflake command actually does the check",
    "start": "2913119",
    "end": "2918480"
  },
  {
    "text": "so unless you do generate it will generate right so it does the validation uh",
    "start": "2918480",
    "end": "2924319"
  },
  {
    "text": "it does the validation by default but if you want to say the problem with validation is that you when you validate",
    "start": "2924319",
    "end": "2930079"
  },
  {
    "text": "against a an online service you don't know that it will be online and you",
    "start": "2930079",
    "end": "2935119"
  },
  {
    "text": "don't know and like maybe you don't want to run it from your ci because maybe it's your project and you don't",
    "start": "2935119",
    "end": "2941359"
  },
  {
    "text": "and you can't run it on ci to test against it so what you could do actually in the",
    "start": "2941359",
    "end": "2947200"
  },
  {
    "text": "schema where is it the schema configuration i didn't",
    "start": "2947200",
    "end": "2954480"
  },
  {
    "text": "tackle this but schema can doesn't have to be a url it can be a",
    "start": "2954480",
    "end": "2959599"
  },
  {
    "text": "relative path to a file that contains the output of the introspection query of",
    "start": "2959599",
    "end": "2965920"
  },
  {
    "text": "some schema so that's like offline mode if you want to validate things offline so what you could do either",
    "start": "2965920",
    "end": "2972240"
  },
  {
    "text": "like again before you commit your code you could uh regenerate the schema from the from the external back end you're",
    "start": "2972240",
    "end": "2979359"
  },
  {
    "text": "trying to work against so that the ci only works against the the offline files instead of having it to go out to the",
    "start": "2979359",
    "end": "2986640"
  },
  {
    "text": "uh yeah to the api itself yeah you check out the options in the",
    "start": "2986640",
    "end": "2993680"
  },
  {
    "text": "on the snowflake repository there's a lot of them i didn't cover all of them here of course but you can see what you",
    "start": "2993680",
    "end": "2999200"
  },
  {
    "text": "need there yes",
    "start": "2999200",
    "end": "3004480"
  },
  {
    "text": "it was kind of painful writing the kind of back end api for the graph coil",
    "start": "3004480",
    "end": "3009839"
  },
  {
    "text": "do you know of any tools that could help kind of make that process a bit simpler yeah so i think well you have these",
    "start": "3009839",
    "end": "3016800"
  },
  {
    "text": "tools that auto-generate what you need to do so if it's just a database maybe you go for hasura or post profile that",
    "start": "3016800",
    "end": "3022800"
  },
  {
    "text": "or that automatically generate everything but if you're on.net for example i know that hot chocolate is fixing a lot of the",
    "start": "3022800",
    "end": "3029920"
  },
  {
    "text": "problems that the lower level graphql.net has so i think checking out craft the hot chocolate one will be nice",
    "start": "3029920",
    "end": "3036559"
  },
  {
    "text": "because they have really nice plugins when it comes to like if you have an entity framework project you could just",
    "start": "3036559",
    "end": "3042319"
  },
  {
    "text": "hook up one collection and say okay make this a graphql field and they automatically generate like the",
    "start": "3042319",
    "end": "3048319"
  },
  {
    "text": "relationships and the filters and everything from uh from graphql so they're they're doing really good stuff",
    "start": "3048319",
    "end": "3055838"
  },
  {
    "text": "uh on subscriptions um",
    "start": "3056720",
    "end": "3060800"
  },
  {
    "text": "no it depends like it it's basically without having you to implement it",
    "start": "3066160",
    "end": "3071359"
  },
  {
    "text": "separate from your application it's kind of part of the same api so if you need any real anything that has to do with",
    "start": "3071359",
    "end": "3077280"
  },
  {
    "text": "real-time communication is done through subscription so that it follows the same graphql schema so it follows the same",
    "start": "3077280",
    "end": "3084319"
  },
  {
    "text": "workflow of whatever you're doing but the runtime is different so the queries themselves the",
    "start": "3084319",
    "end": "3090480"
  },
  {
    "text": "runtime we're using here is a basic http make a post request deserialize the results but if we needed subscriptions",
    "start": "3090480",
    "end": "3096960"
  },
  {
    "text": "then the runtime will have to do we have to set up set up websockets to con to connect to it it's all specked out it's",
    "start": "3096960",
    "end": "3103200"
  },
  {
    "text": "just not implemented yet but it's it's i don't think it's common at least not",
    "start": "3103200",
    "end": "3108240"
  },
  {
    "text": "in what i've seen",
    "start": "3108240",
    "end": "3111839"
  },
  {
    "text": "but it would also tell you if like one particular entity had one particular",
    "start": "3119119",
    "end": "3125838"
  },
  {
    "text": "i think the way it works is that you have a subscription query it looks like the normal queries you have there and",
    "start": "3131520",
    "end": "3136960"
  },
  {
    "text": "then you will get an observable that says okay you're you have a new value of that type",
    "start": "3136960",
    "end": "3143280"
  },
  {
    "text": "you could subscribe to that observable",
    "start": "3143280",
    "end": "3146800"
  },
  {
    "text": "oh i think you just get the whole thing on every event yep yep",
    "start": "3151440",
    "end": "3157119"
  },
  {
    "text": "anything else well i guess then we can wrap it up thanks again for coming and thanks for",
    "start": "3158880",
    "end": "3164880"
  },
  {
    "text": "having me",
    "start": "3164880",
    "end": "3167838"
  }
]