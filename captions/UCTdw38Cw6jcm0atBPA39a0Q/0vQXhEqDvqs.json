[
  {
    "text": "all right thank you everybody for coming uh welcome to what's new in C sharp 11.",
    "start": "1560",
    "end": "8700"
  },
  {
    "text": "my name's Dave I work on the Roslin and Razer team and I like C sharp and I like talking",
    "start": "8700",
    "end": "15960"
  },
  {
    "text": "about it so I'm gonna um quick show of hands we'll see if we can do this very quickly who is on C",
    "start": "15960",
    "end": "23220"
  },
  {
    "text": "sharp six or above actually let's do it this way six or above hopefully everybody thank",
    "start": "23220",
    "end": "28439"
  },
  {
    "text": "you right put your hands down if it's only six so keep hands up of seven or above okay keep your hands up there's",
    "start": "28439",
    "end": "33899"
  },
  {
    "text": "eight or above nine ten okay so most of you seem to be on nine",
    "start": "33899",
    "end": "40500"
  },
  {
    "text": "maybe ten that's cool perfect um I",
    "start": "40500",
    "end": "47640"
  },
  {
    "text": "who's heard of parameter null checking um there was a bit of controversy about this feature and so I had to include it",
    "start": "47640",
    "end": "53820"
  },
  {
    "text": "mainly because so I did this talk in June in NDC Melbourne which is where I'm",
    "start": "53820",
    "end": "59579"
  },
  {
    "text": "from and I submitted the talk when all of the drama was happening and I thought this",
    "start": "59579",
    "end": "64978"
  },
  {
    "text": "is great I'm going to get some good mileage out of this and then they can the future and um well the Talk's boring",
    "start": "64979",
    "end": "70260"
  },
  {
    "text": "now but I wanted to mention it because just a reminder in case you didn't know C sharp is open source",
    "start": "70260",
    "end": "77220"
  },
  {
    "text": "uh you can follow along on github.com.net C sharp Lang if you",
    "start": "77220",
    "end": "83340"
  },
  {
    "text": "believe that any one particular feature is the beginning of the apocalypse and the downfall of humanity as we know it",
    "start": "83340",
    "end": "88740"
  },
  {
    "text": "and the end of the C sharp language um I don't think it is I quite like the parameter null chain",
    "start": "88740",
    "end": "94979"
  },
  {
    "text": "feature too but that's a whole other thing um but the fact that the team took the feedback on board and removed the",
    "start": "94979",
    "end": "100560"
  },
  {
    "text": "feature Etc I think that's a good sign so if anything I show you today makes you",
    "start": "100560",
    "end": "106560"
  },
  {
    "text": "go uh maybe you know joining the conversation so what I'm going to do is I'm just",
    "start": "106560",
    "end": "111780"
  },
  {
    "text": "going to go through every single feature of C sharp 11. this is actually the easiest talk I've ever done because it's",
    "start": "111780",
    "end": "116880"
  },
  {
    "text": "the first time I'm talking about something after it's been released and so I know what's in C sharp 11 in June I",
    "start": "116880",
    "end": "122220"
  },
  {
    "text": "had to guess um and so if you have any questions yell out at the time or at the end",
    "start": "122220",
    "end": "128880"
  },
  {
    "text": "whatever that's fine hopefully I'll remember to repeat the question for the recording I'm sure someone down the front will yell at me if I don't but",
    "start": "128880",
    "end": "135480"
  },
  {
    "text": "let's go rostering literals these are in no particular order however this happens to be my favorite",
    "start": "135480",
    "end": "141599"
  },
  {
    "text": "so in C sharp ten and Below there are two ways to Define string literals the",
    "start": "141599",
    "end": "147900"
  },
  {
    "text": "one at the top is a normal string literal I guess it's just called a string literal in the middle we have a",
    "start": "147900",
    "end": "154140"
  },
  {
    "text": "Verbatim string a Verbatim string says you don't have to",
    "start": "154140",
    "end": "159480"
  },
  {
    "text": "escape new lines tabs and because you escape new lines with Slash",
    "start": "159480",
    "end": "166440"
  },
  {
    "text": "n and because you don't have to escape new lines therefore you don't have to escape slashes I'm sure you all know this you do have",
    "start": "166440",
    "end": "172500"
  },
  {
    "text": "to escape quotes though because otherwise how does the compiler know when the string is finished",
    "start": "172500",
    "end": "178739"
  },
  {
    "text": "and that's okay but you know it could be better so raw string literals the the",
    "start": "178739",
    "end": "184019"
  },
  {
    "text": "promise of the feature is you never have to escape anything what you see is exactly what's in the",
    "start": "184019",
    "end": "192780"
  },
  {
    "text": "string in this raw form and so as you can see there in the first one we have to escape new",
    "start": "192780",
    "end": "198120"
  },
  {
    "text": "lines and the second one we only have to escape quotes and then the third one nothing is escaped",
    "start": "198120",
    "end": "203400"
  },
  {
    "text": "let's jump across to visual studio and write a string so firstly with raw",
    "start": "203400",
    "end": "209040"
  },
  {
    "text": "string literals they can be on one line um that's just yeah they can just in so",
    "start": "209040",
    "end": "216599"
  },
  {
    "text": "you know or they can be on multiple lines there's a few little quirks to them though so if they're on multiple",
    "start": "216599",
    "end": "221700"
  },
  {
    "text": "lines there has to be nothing after the first three quotes",
    "start": "221700",
    "end": "227040"
  },
  {
    "text": "and the last three quotes have to be on a line by themselves as well so the delimiters have to be essentially alone",
    "start": "227040",
    "end": "232319"
  },
  {
    "text": "your content is between the delimiters not like non-inclusive and then three",
    "start": "232319",
    "end": "239580"
  },
  {
    "text": "quotes is how we how we delimit them and that's kind of weird and some people",
    "start": "239580",
    "end": "244739"
  },
  {
    "text": "think it's a bit ugly and I'm kind of surprised that people complained about two exclamation marks but they don't complain about three quotes but again",
    "start": "244739",
    "end": "251159"
  },
  {
    "text": "I'm not getting into that so you don't have to escape anything right I can type in quotes this is fine",
    "start": "251159",
    "end": "257760"
  },
  {
    "text": "I can put in tabs new lines slash characters no worries",
    "start": "257760",
    "end": "263100"
  },
  {
    "text": "um but of course that's just a spelling mistake don't worry um",
    "start": "263100",
    "end": "268740"
  },
  {
    "text": "of course how can I promise that I don't have to escape anything right what if I want to put in two talking marks well that's",
    "start": "268740",
    "end": "274500"
  },
  {
    "text": "fine the obvious question is what if I want to put in three talking box now we've broken things",
    "start": "274500",
    "end": "281699"
  },
  {
    "text": "so how does this work the answer is that roster and literals",
    "start": "281699",
    "end": "287040"
  },
  {
    "text": "the Syntax for them is at least three talking marks so if you want to include three talking",
    "start": "287040",
    "end": "293820"
  },
  {
    "text": "marks in your string and if we ignore the editor trying to help me oh God okay he tries to help and anyway",
    "start": "293820",
    "end": "302340"
  },
  {
    "text": "so if I want to include three talking Marks in My string then I use four as my",
    "start": "302340",
    "end": "307979"
  },
  {
    "text": "delimiter right you can include n talking marks by delimiting them with n plus one",
    "start": "307979",
    "end": "313500"
  },
  {
    "text": "now the reason I'm surprised people don't complain about this is because it means this is perfectly valency Sharp and you can keep going like this and see",
    "start": "313500",
    "end": "320160"
  },
  {
    "text": "this is visual shooter is now helping me um I dare you to go and just change every string in your code base so that just",
    "start": "320160",
    "end": "326639"
  },
  {
    "text": "please we can do this obviously hopefully we don't but we can so they're",
    "start": "326639",
    "end": "331979"
  },
  {
    "text": "a little bit weird but they're really really good the reason I love them is so working on",
    "start": "331979",
    "end": "338400"
  },
  {
    "text": "the Ross and Razer team a lot of what I do I write a lot of tests because I'm a good boy but my tests often involve",
    "start": "338400",
    "end": "345539"
  },
  {
    "text": "here's a chunk of code go do something you know a code fix or",
    "start": "345539",
    "end": "350639"
  },
  {
    "text": "an analyzer or whatever and then here's what I want my code to look like and so I can express my test data in its raw",
    "start": "350639",
    "end": "357360"
  },
  {
    "text": "form that's why they're called raw stream literals it's really good for that particularly with C sharp it's got braces in it it's got new lines it's got",
    "start": "357360",
    "end": "363900"
  },
  {
    "text": "all these complex characters that usually cause problems other things this is good for is if you're testing uh web",
    "start": "363900",
    "end": "370919"
  },
  {
    "text": "apis or Json serialization if you've got Blobs of Json the fact that you can grab the contents of a string and assuming it",
    "start": "370919",
    "end": "378060"
  },
  {
    "text": "was Json this would be a better example um well let's type some Json quickly so",
    "start": "378060",
    "end": "383639"
  },
  {
    "text": "I can I can do this I can copy that I can paste it into Postman press send and",
    "start": "383639",
    "end": "389580"
  },
  {
    "text": "see what happens or I can get some result out of Postman copy it and paste it into my expected output I don't have",
    "start": "389580",
    "end": "394979"
  },
  {
    "text": "to fight with it I don't have to fight with the compiler so they're really good now of course we can also do so there's",
    "start": "394979",
    "end": "402240"
  },
  {
    "text": "nothing there's no such thing as a Verbatim raw string because that doesn't make sense but there is interpolated raw strings",
    "start": "402240",
    "end": "407639"
  },
  {
    "text": "so interpolated strings with the dollar sign same thing dollar sign turbulated raw strings of course we now have a",
    "start": "407639",
    "end": "413940"
  },
  {
    "text": "compile error because we have braces in our raw string so in a normal",
    "start": "413940",
    "end": "419039"
  },
  {
    "text": "interpolated string we escape the braces by putting in two braces but we don't have to escape anything in",
    "start": "419039",
    "end": "425039"
  },
  {
    "text": "raw strength so how do we do it well if you want to include up to one brace",
    "start": "425039",
    "end": "431580"
  },
  {
    "text": "in your raw string I'm glad you're all with it this is good it's lovely to see so this is perfectly",
    "start": "431580",
    "end": "438660"
  },
  {
    "text": "validation up and now if I want to make this a proper interpolated string I use two braces whoops to indicate",
    "start": "438660",
    "end": "446099"
  },
  {
    "text": "that this is an interpolation hole and obviously I haven't defined name so ignore the error",
    "start": "446099",
    "end": "451800"
  },
  {
    "text": "so again it's like this can look a bit weird and yes this means that this can be perfectly valid C sharp as well",
    "start": "451800",
    "end": "457759"
  },
  {
    "text": "anyway hopefully again hopefully no one will do this they are really cool",
    "start": "457759",
    "end": "463259"
  },
  {
    "text": "so that's that's the fun part let me make this sensible a fight with the editor again",
    "start": "463259",
    "end": "470819"
  },
  {
    "text": "and one two three okay there is one more trick to Raw string",
    "start": "470819",
    "end": "477000"
  },
  {
    "text": "literals oh actually there's kind of two it's kind of one anyway I'm just going",
    "start": "477000",
    "end": "482280"
  },
  {
    "text": "to make another I'm going to make a Verbatim string here and I'm going to do the same thing",
    "start": "482280",
    "end": "488099"
  },
  {
    "text": "in fact why don't I copy and paste it'll be easier oops",
    "start": "488099",
    "end": "493139"
  },
  {
    "text": "okay so these two strings are nominally the same right",
    "start": "493139",
    "end": "499139"
  },
  {
    "text": "but they're actually not so the the one of the tricks that Royal stringless tools does by requiring the delimiters",
    "start": "499139",
    "end": "504180"
  },
  {
    "text": "to be on the line by themselves they also ignore the first new line so this",
    "start": "504180",
    "end": "509599"
  },
  {
    "text": "uh verbatim string y actually starts with a new line character and depending",
    "start": "509599",
    "end": "515039"
  },
  {
    "text": "on what you're doing this can throw you off right if if you've got a really fussy Json serializer maybe that's an",
    "start": "515039",
    "end": "521159"
  },
  {
    "text": "error and so you end up doing that to get rid of that new line but now the code looks really ugly so the so the",
    "start": "521159",
    "end": "526560"
  },
  {
    "text": "other trick they do is By ignoring that new line it allows you to format your string data really nicely",
    "start": "526560",
    "end": "533339"
  },
  {
    "text": "and this becomes even more prevalent if I do this and add some indentation to the",
    "start": "533339",
    "end": "539040"
  },
  {
    "text": "world so this verbatim string now looks really ugly but this is what it has to look like to get well-formatted string data",
    "start": "539040",
    "end": "546420"
  },
  {
    "text": "into my program with my raw string I can actually do this",
    "start": "546420",
    "end": "552360"
  },
  {
    "text": "and so a raw string literal will ignore any white space that comes before",
    "start": "552360",
    "end": "557459"
  },
  {
    "text": "whatever column the end delimiter is at now that sounds a bit weird and",
    "start": "557459",
    "end": "562620"
  },
  {
    "text": "confusing and there's probably a better way to explain it but if you look that vertical line that Visual Studio is drawing there that is telling you where",
    "start": "562620",
    "end": "569279"
  },
  {
    "text": "that string where each line of that string starts so you can not only get",
    "start": "569279",
    "end": "574860"
  },
  {
    "text": "the string that you want like the data that you want in your program with no escaping you also get to make it look",
    "start": "574860",
    "end": "580920"
  },
  {
    "text": "nice which again is really handy um it's this is the actual reason I really",
    "start": "580920",
    "end": "586680"
  },
  {
    "text": "love this feature is because as I'm scrolling down to test class seeing the code is you know indented I think I mean",
    "start": "586680",
    "end": "591839"
  },
  {
    "text": "it all goes back to line zero for the strings and as I'm scrolling quickly my brain just goes oh that must be the start of a method and it's not it never",
    "start": "591839",
    "end": "597480"
  },
  {
    "text": "is um so this like some little tricks it does",
    "start": "597480",
    "end": "603420"
  },
  {
    "text": "but that's it that's rostring literals they're really good they're my favorite feature question thank you",
    "start": "603420",
    "end": "609380"
  },
  {
    "text": "yes good question if I don't indent one of these lines it's a syntax error the compiler knows also if I have mixed",
    "start": "612120",
    "end": "618180"
  },
  {
    "text": "indentation like if I had two tabs and the other line had four spaces or whatever it was that's all sort of",
    "start": "618180",
    "end": "623700"
  },
  {
    "text": "syntax error so the compiler checks that what you're doing makes sense um and then you know you can either fix",
    "start": "623700",
    "end": "630000"
  },
  {
    "text": "it by doing that or fix it by putting name forward again and I think Ryder also shows the",
    "start": "630000",
    "end": "636300"
  },
  {
    "text": "vertical line as well but I don't know any other questions on roasting literals",
    "start": "636300",
    "end": "641519"
  },
  {
    "text": "before I go on to the next feature it's really quite a weird tool because it's basically like a reference yes",
    "start": "641519",
    "end": "647459"
  },
  {
    "text": "question uh is a syntax highlighting this",
    "start": "647459",
    "end": "653339"
  },
  {
    "text": "question yes but that's not rush English that's just Roslyn being fancy um Roslyn will detect Jason and regex's",
    "start": "653339",
    "end": "660959"
  },
  {
    "text": "and we'll syntax highlight them um in any string so this works in verbatim strings as well and in fact you",
    "start": "660959",
    "end": "667260"
  },
  {
    "text": "can if it's not detecting it you can tell it it's like I can tell this is a Rejects and it'll syntax highlight it",
    "start": "667260",
    "end": "673440"
  },
  {
    "text": "incorrectly but um yeah so that's just Visual Studio being fancy I think writer does the same",
    "start": "673440",
    "end": "679019"
  },
  {
    "text": "as well um we rosin doesn't support SQL but uh the",
    "start": "679019",
    "end": "687000"
  },
  {
    "text": "hope within the rosin team would be that the SQL team will do that in.net 8 James",
    "start": "687000",
    "end": "693240"
  },
  {
    "text": "Newton King has worked on doing it for routes in asp.net so routes automatically highlight with the route",
    "start": "693240",
    "end": "699779"
  },
  {
    "text": "syntax yeah Russell already supports C sharp nvb and",
    "start": "699779",
    "end": "706079"
  },
  {
    "text": "Jason and regex that's enough languages I think right list patterns",
    "start": "706079",
    "end": "711240"
  },
  {
    "text": "who likes patterns because if you don't like patterns you're not going to like list patterns either",
    "start": "711240",
    "end": "716760"
  },
  {
    "text": "um patents are something that's been building up in C sharp since seven point",
    "start": "716760",
    "end": "723180"
  },
  {
    "text": "something or other and every new version there's another little thing a little thing and this patterns is the newest",
    "start": "723180",
    "end": "729240"
  },
  {
    "text": "one to add it's good to know about patterns in",
    "start": "729240",
    "end": "734459"
  },
  {
    "text": "general to talk about list patterns because patterns really build on each other",
    "start": "734459",
    "end": "740000"
  },
  {
    "text": "so let me let's do this",
    "start": "740399",
    "end": "745500"
  },
  {
    "text": "so I can say if args is a string or string array",
    "start": "745500",
    "end": "752700"
  },
  {
    "text": "this is a pattern it's not a very interesting one but it is a pattern this is a type pattern because I'm checking the type of",
    "start": "752700",
    "end": "758820"
  },
  {
    "text": "something and if I go and do this this is a property pattern so I've got a property pattern and a",
    "start": "758820",
    "end": "765540"
  },
  {
    "text": "type pattern now obviously this type pattern is kind of stupid because it's clearly defined as a string array so I",
    "start": "765540",
    "end": "771000"
  },
  {
    "text": "can get rid of that now I've just got a property pattern but so patterns they they build on each other and so list",
    "start": "771000",
    "end": "776220"
  },
  {
    "text": "patterns is the newest one on the list list yep a list pattern the way to think about it",
    "start": "776220",
    "end": "782519"
  },
  {
    "text": "is you're essentially writing into your code what the collection of data should look",
    "start": "782519",
    "end": "790860"
  },
  {
    "text": "like so in this case this looks like an empty array declaration well this is saying is args an empty array",
    "start": "790860",
    "end": "797459"
  },
  {
    "text": "so if Alex was null then this wouldn't pass because it's clearly like an empty",
    "start": "797459",
    "end": "802800"
  },
  {
    "text": "array is a thing I can say well it's strings so I can say one two three so this is checking is",
    "start": "802800",
    "end": "810480"
  },
  {
    "text": "args does it have three but and the compiler will just literally do this does it have three elements in it if it",
    "start": "810480",
    "end": "815880"
  },
  {
    "text": "does the first one one is the second one two right that's okay that's that's you know not",
    "start": "815880",
    "end": "821940"
  },
  {
    "text": "that interesting but where the where patterns really get um interesting is when you then build up",
    "start": "821940",
    "end": "828360"
  },
  {
    "text": "onto them so I can go in here and I can use my length again and I can say link four so this is",
    "start": "828360",
    "end": "833940"
  },
  {
    "text": "saying is arg's got three elements in it first element is one last elements three and the second element",
    "start": "833940",
    "end": "840120"
  },
  {
    "text": "is at least well no not at least is four characters long I can do is least at",
    "start": "840120",
    "end": "845519"
  },
  {
    "text": "least by saying that one anyway maths is hard",
    "start": "845519",
    "end": "850620"
  },
  {
    "text": "um but again that so this is a relational pattern inside a property pattern inside a list pattern so patterns",
    "start": "850620",
    "end": "856680"
  },
  {
    "text": "you know this pattern's great but they can be a bit weird to understand personally for me and I've been using C",
    "start": "856680",
    "end": "862680"
  },
  {
    "text": "sharp 11 like since C sharp 10 was released because we're on nightly builds I'm at the point now where even still I",
    "start": "862680",
    "end": "871139"
  },
  {
    "text": "don't write list patterns from the get-go but I write a bit of code and then I",
    "start": "871139",
    "end": "876959"
  },
  {
    "text": "read it and go oh that could be a list pattern and and that's sort of taken me a while to get to it used to be that I would only notice it a week later that I",
    "start": "876959",
    "end": "883800"
  },
  {
    "text": "could convert to a paddle it takes time to sort of build in because I think we've just got lots of muscle memory about writing if statements",
    "start": "883800",
    "end": "890100"
  },
  {
    "text": "um the other thing you can do with list patterns is use the range",
    "start": "890100",
    "end": "896160"
  },
  {
    "text": "operator I guess and so what this says is does List have at least two elements",
    "start": "896160",
    "end": "902279"
  },
  {
    "text": "first one is one last one is three and any number from zero to n in the middle",
    "start": "902279",
    "end": "908519"
  },
  {
    "text": "we can also capture things from them with patterns um I'm hoping that just says it's not",
    "start": "908519",
    "end": "915120"
  },
  {
    "text": "used yes good oops so this is saying are there three elements is the first one is the last one three and no matter what",
    "start": "915120",
    "end": "922199"
  },
  {
    "text": "the second one is put it in the variable s and then I can go and use this I've used this sort of thing for like path",
    "start": "922199",
    "end": "927779"
  },
  {
    "text": "parsing so you go string dot split and then a list pattern to say well is",
    "start": "927779",
    "end": "933959"
  },
  {
    "text": "it program files Microsoft whatever and then what I'm looking for you know",
    "start": "933959",
    "end": "940980"
  },
  {
    "text": "um and then the other thing oh and so discards also work I should say",
    "start": "940980",
    "end": "947040"
  },
  {
    "text": "um and again that's just another pattern um let me jump over to Sharp lab and I",
    "start": "947040",
    "end": "952980"
  },
  {
    "text": "will show you what's going on here so if I write this code here",
    "start": "952980",
    "end": "959579"
  },
  {
    "text": "um let's go with one dot dot",
    "start": "959579",
    "end": "964860"
  },
  {
    "text": "and three so if you haven't seen it this is sharp lab.io what this does is it compiles",
    "start": "964860",
    "end": "971699"
  },
  {
    "text": "your code with the latest Roslyn and then it tells IL spy to decompile your code as though it was written in C sharp",
    "start": "971699",
    "end": "978600"
  },
  {
    "text": "one so it basically unwinds all the syntactic sugar and so this is why I",
    "start": "978600",
    "end": "984779"
  },
  {
    "text": "love patterns because all of that code I didn't have to write so you can see we get the length we do the length check",
    "start": "984779",
    "end": "990959"
  },
  {
    "text": "check the first element check the second the last element um this is what the compiler is doing now",
    "start": "990959",
    "end": "997620"
  },
  {
    "text": "the compiler doing this is not just saving you time it's also doing the compiler understands your patterns",
    "start": "997620",
    "end": "1004279"
  },
  {
    "text": "so if this was a switch expression it's doing exhaustiveness checks so let's go",
    "start": "1004279",
    "end": "1010339"
  },
  {
    "text": "uh I don't even matter uh switch",
    "start": "1010339",
    "end": "1017500"
  },
  {
    "text": "typing is hard um true little Lou that's a thing",
    "start": "1019399",
    "end": "1025520"
  },
  {
    "text": "okay what the what have I done to the compile no what have I done",
    "start": "1025520",
    "end": "1030740"
  },
  {
    "text": "I can't read my writing type or Nemesis definition what oh I've missed a Mr brace haven't I",
    "start": "1030740",
    "end": "1038360"
  },
  {
    "text": "too many braces keeping you on your toes I knew what I was doing all right",
    "start": "1038360",
    "end": "1045079"
  },
  {
    "text": "so this is the same pattern I had before but in the switch expression but so now if I go one dot dot",
    "start": "1045079",
    "end": "1053919"
  },
  {
    "text": "foreign so this is cool but the compiler knows",
    "start": "1054860",
    "end": "1062059"
  },
  {
    "text": "that we haven't handled all possible cases so that's potentially useful if I move this up one",
    "start": "1062059",
    "end": "1069940"
  },
  {
    "text": "if I'm understanding my own code properly uh did sharper just die",
    "start": "1069980",
    "end": "1077740"
  },
  {
    "text": "anyway what should happen there is it should flag the second one as being unreachable",
    "start": "1079340",
    "end": "1085640"
  },
  {
    "text": "there we go the patterns are so shut up died for a bit never mind um so now it's saying this pattern is unreachable so it knows it understands",
    "start": "1085640",
    "end": "1092299"
  },
  {
    "text": "what you're doing because uh well because it's compiler the",
    "start": "1092299",
    "end": "1097820"
  },
  {
    "text": "downside of patterns is they have to be compile time uh they have to be evaluated at compile time so that the",
    "start": "1097820",
    "end": "1103400"
  },
  {
    "text": "compiler can do this that can be a like a downside sometimes because if I had like let's say I had another argument",
    "start": "1103400",
    "end": "1109820"
  },
  {
    "text": "here um I can't oh I guess that would have to be a string",
    "start": "1109820",
    "end": "1114860"
  },
  {
    "text": "I can't do this oops",
    "start": "1114860",
    "end": "1120500"
  },
  {
    "text": "so this doesn't work because number is not known at compile time so that can sometimes be annoying but",
    "start": "1120500",
    "end": "1126860"
  },
  {
    "text": "it's because of the Extra Protection the compiler is giving you by knowing about what you're doing and whether what",
    "start": "1126860",
    "end": "1132919"
  },
  {
    "text": "you're doing is redundant Etc so list patterns is just another sort of arrow in the quiver of patterns but they are",
    "start": "1132919",
    "end": "1140000"
  },
  {
    "text": "really useful the other thing is like this is a string array but I could easily make this a list",
    "start": "1140000",
    "end": "1147559"
  },
  {
    "text": "um I could make this a collection you know like it the compiler knows about the",
    "start": "1147559",
    "end": "1153320"
  },
  {
    "text": "standard sort of collection-ish things which is good",
    "start": "1153320",
    "end": "1158440"
  },
  {
    "text": "the other thing one other interesting thing I can do is I can say",
    "start": "1158440",
    "end": "1164900"
  },
  {
    "text": "that um no",
    "start": "1164900",
    "end": "1170620"
  },
  {
    "text": "I think wait a minute",
    "start": "1171860",
    "end": "1175900"
  },
  {
    "text": "this is where I have forgot what I was going to show and I've got it wrong oh let's get sex right",
    "start": "1176900",
    "end": "1184120"
  },
  {
    "text": "no unexpected character what",
    "start": "1185000",
    "end": "1189220"
  },
  {
    "text": "oh maybe sometimes sharp lab also gets confused and thinks I've got characters I don't",
    "start": "1190700",
    "end": "1197299"
  },
  {
    "text": "have there we go that's it was it so so now",
    "start": "1197299",
    "end": "1202580"
  },
  {
    "text": "what this is doing is this is saying uh at least one element because dot.com",
    "start": "1202580",
    "end": "1208340"
  },
  {
    "text": "match zero and then any number after that but capture that into another sub array",
    "start": "1208340",
    "end": "1215780"
  },
  {
    "text": "so that can be really useful to pull things out and you can you can pull things out in the middle as well so I could you know I can do this",
    "start": "1215780",
    "end": "1222280"
  },
  {
    "text": "so it can be really powerful you can only have one range operator in a pattern in the list pattern so you can't",
    "start": "1222280",
    "end": "1228740"
  },
  {
    "text": "put two of them in and like it doesn't do like wild card matching but this can be really useful the trick with this or",
    "start": "1228740",
    "end": "1235880"
  },
  {
    "text": "the thing to watch out for with this is if I change this back to a list um yeah so this now is not compiling",
    "start": "1235880",
    "end": "1242419"
  },
  {
    "text": "because it doesn't know how to pull out the middle of a list into something",
    "start": "1242419",
    "end": "1247760"
  },
  {
    "text": "um arrays it knows spans it knows but lists it essentially doesn't know it",
    "start": "1247760",
    "end": "1253880"
  },
  {
    "text": "does know it just doesn't want to allocate memory to do it um that's list patterns any questions on",
    "start": "1253880",
    "end": "1260720"
  },
  {
    "text": "list patterns that's cool if you think one later no worries 20 minutes",
    "start": "1260720",
    "end": "1267380"
  },
  {
    "text": "all right to utf-8 string the tools I'm gonna have to speed up a bit here um this one is relatively Niche if you",
    "start": "1267380",
    "end": "1275299"
  },
  {
    "text": "need this then it's great and if you don't need it then you'll never need it essentially if you have any code",
    "start": "1275299",
    "end": "1282020"
  },
  {
    "text": "in your uh applications in your programs that deal with byte arrays",
    "start": "1282020",
    "end": "1288280"
  },
  {
    "text": "or that deal with utf-8 strings this is useful for you so what this is it says",
    "start": "1288280",
    "end": "1293659"
  },
  {
    "text": "utf-8 string literals but I don't like to think about it this way because it's not really a string",
    "start": "1293659",
    "end": "1299960"
  },
  {
    "text": "if I go over RX equals ABC so the u8 thing on the end is how you denote this",
    "start": "1299960",
    "end": "1307820"
  },
  {
    "text": "as being a utf-8 string just like you do M for decimal and you know f for float but what this is if I hold my mouse over",
    "start": "1307820",
    "end": "1314120"
  },
  {
    "text": "VAR which well you might be able to see it you can't zoom in it's not a string it's a read-only span of bytes",
    "start": "1314120",
    "end": "1321320"
  },
  {
    "text": "um and that's what makes this a little bit Niche and if I go to array then it's a byte array so it's not a string you",
    "start": "1321320",
    "end": "1326659"
  },
  {
    "text": "can't do string operations on it this is a handy way of writing byte arrays",
    "start": "1326659",
    "end": "1332480"
  },
  {
    "text": "so if you do lots of processing of utf-8 strings utf-8 files and you process them",
    "start": "1332480",
    "end": "1338960"
  },
  {
    "text": "as byte arrays and if you've got checks for you know is this equal this if you",
    "start": "1338960",
    "end": "1344600"
  },
  {
    "text": "do a normal string check on it then it's not as performant as it could be because strings in.net are utf-16",
    "start": "1344600",
    "end": "1351740"
  },
  {
    "text": "so if you want performance you compare them against byte arrays but if you compare them against byte arrays you then have magic numbers in your code",
    "start": "1351740",
    "end": "1358100"
  },
  {
    "text": "that don't look good so utf-8 strings string literals are a way to avoid that",
    "start": "1358100",
    "end": "1363500"
  },
  {
    "text": "but as I say if you don't do that you're probably never use them required members okay this one I will",
    "start": "1363500",
    "end": "1370400"
  },
  {
    "text": "take a few more minutes with let me write a person class because that's what you have to do demos with",
    "start": "1370400",
    "end": "1377120"
  },
  {
    "text": "I'm going to write a first name property",
    "start": "1377120",
    "end": "1383440"
  },
  {
    "text": "let's go in no let's go yeah said it was good and I will go",
    "start": "1383440",
    "end": "1391419"
  },
  {
    "text": "middle name and last name so here's my person class it's the same person class",
    "start": "1391520",
    "end": "1397460"
  },
  {
    "text": "we all make that we definitely all have and we have warnings we have null ability warnings because I haven't provided a value I've said",
    "start": "1397460",
    "end": "1404679"
  },
  {
    "text": "these properties are strings not nullable strings and therefore I have to",
    "start": "1404679",
    "end": "1409940"
  },
  {
    "text": "provide a value this is really annoying because I don't want to provide a value I'm just creating a class I want whoever",
    "start": "1409940",
    "end": "1415760"
  },
  {
    "text": "creates my person to provide a value and so I can do that by saying that this is read only what",
    "start": "1415760",
    "end": "1423320"
  },
  {
    "text": "this is doing is this is telling the compiler",
    "start": "1423320",
    "end": "1429140"
  },
  {
    "text": "first name middle name last name they have to have a value they can't be null",
    "start": "1429860",
    "end": "1435260"
  },
  {
    "text": "and they have to have that value set when the person class is created this is presumably complaining",
    "start": "1435260",
    "end": "1442280"
  },
  {
    "text": "uh read only what did I say required thank you",
    "start": "1442280",
    "end": "1447320"
  },
  {
    "text": "ah dear there we go so now if I go up here and I go",
    "start": "1447320",
    "end": "1455000"
  },
  {
    "text": "to create a new person now the compiler is complaining but it's not compiling at me it's complaining to",
    "start": "1455000",
    "end": "1461120"
  },
  {
    "text": "whoever is creating my person class which is exactly what I want because I'm just creating a dto and I can come here and I can say oops I",
    "start": "1461120",
    "end": "1469580"
  },
  {
    "text": "can specify a first name and then you know obviously this is a terrible uh",
    "start": "1469580",
    "end": "1476240"
  },
  {
    "text": "a terrible person API we don't want middle names to be required I don't have a middle name and not everybody has a",
    "start": "1476240",
    "end": "1482539"
  },
  {
    "text": "last name either so now everyone's happy I've defined my detail how I want except for the semicolon and my",
    "start": "1482539",
    "end": "1490580"
  },
  {
    "text": "consumers know what I expect I think about this feature in terms of",
    "start": "1490580",
    "end": "1496760"
  },
  {
    "text": "fixing this whole inull ability but it's actually strictly unrelated so if I make last name",
    "start": "1496760",
    "end": "1502340"
  },
  {
    "text": "required again because no not everybody has a last name but for",
    "start": "1502340",
    "end": "1508220"
  },
  {
    "text": "my target audience of mainly Western people most of them do",
    "start": "1508220",
    "end": "1513260"
  },
  {
    "text": "I still want the consumer of this class to think about the last name",
    "start": "1513260",
    "end": "1518960"
  },
  {
    "text": "so it's still nullable I don't have to set it to a value or I mean I do it's just that null is a valid",
    "start": "1518960",
    "end": "1525260"
  },
  {
    "text": "value so it fills a gap in nullability but don't conflate them necessarily that's",
    "start": "1525260",
    "end": "1531260"
  },
  {
    "text": "just me um what this is really an Adolf is the the",
    "start": "1531260",
    "end": "1536299"
  },
  {
    "text": "style of c-sharp programming that is not using Constructors so object initializers like I have here they're",
    "start": "1536299",
    "end": "1542299"
  },
  {
    "text": "getting a bit more popular now we have records with with syntax and Anonymous types and all these things there's other",
    "start": "1542299",
    "end": "1547700"
  },
  {
    "text": "ways to construct things and so this is a way to say you know in the old days or the current",
    "start": "1547700",
    "end": "1553100"
  },
  {
    "text": "days you create a Constructor and you put on the parameters that are required to be set and you can't construct the",
    "start": "1553100",
    "end": "1558260"
  },
  {
    "text": "class without calling the Constructor this is a way to say well you can be more flexible in how people create the",
    "start": "1558260",
    "end": "1564440"
  },
  {
    "text": "class but you still can denote what is required what isn't speaking of which if I create a",
    "start": "1564440",
    "end": "1570500"
  },
  {
    "text": "Constructor let's create one that takes it first name and we need an empty one so that my code",
    "start": "1570500",
    "end": "1578840"
  },
  {
    "text": "above doesn't error so this is cool and if I create a new person another person",
    "start": "1578840",
    "end": "1585460"
  },
  {
    "text": "we have a problem and the problem is this says you haven't said any required properties",
    "start": "1586279",
    "end": "1592120"
  },
  {
    "text": "but in fact I have in fact if I make if I take required off last name I've said all required properties",
    "start": "1592120",
    "end": "1598039"
  },
  {
    "text": "so that this problem is one that sometimes emerges from the compiler in",
    "start": "1598039",
    "end": "1603080"
  },
  {
    "text": "general the compiler doesn't inspect the code inside a method to see what it's doing",
    "start": "1603080",
    "end": "1608539"
  },
  {
    "text": "and the reason for that is it gets very complicated because your method could call other methods it could hit a database it could call web service the",
    "start": "1608539",
    "end": "1615260"
  },
  {
    "text": "whole thing problem is a thing so generally speaking with null ability with required lots of features it",
    "start": "1615260",
    "end": "1621500"
  },
  {
    "text": "doesn't look inside the method so the way we sort of get around this is there's an attribute called sets",
    "start": "1621500",
    "end": "1627919"
  },
  {
    "text": "required members and what this says is if someone calls this Constructor don't complain about required members of them",
    "start": "1627919",
    "end": "1634340"
  },
  {
    "text": "now you'll note that that Constructor does not set the required members so that's me telling the compiler hey don't",
    "start": "1634340",
    "end": "1640880"
  },
  {
    "text": "worry I've got this if I don't have this that's on me but it does mean that both Styles can",
    "start": "1640880",
    "end": "1647900"
  },
  {
    "text": "live together in the same code you can have Constructors and you can have empty Constructors but you can still denote",
    "start": "1647900",
    "end": "1654260"
  },
  {
    "text": "what you want to be nullable what has to be required what's settable like we've got init properties to say they can only",
    "start": "1654260",
    "end": "1660620"
  },
  {
    "text": "be set once all these things so it's just about more expressiveness in your details any questions",
    "start": "1660620",
    "end": "1668260"
  },
  {
    "text": "static abstract interface members this one's a little weird because static",
    "start": "1669740",
    "end": "1676039"
  },
  {
    "text": "members on interfaces exist already but they don't work this way so this",
    "start": "1676039",
    "end": "1681500"
  },
  {
    "text": "abstract as a keyword to denote which one you want but abstract is kind of redundant on interfaces",
    "start": "1681500",
    "end": "1689620"
  },
  {
    "text": "but anyway what this does is it lets you define a method on an interface and say that it's static and then just",
    "start": "1689659",
    "end": "1696260"
  },
  {
    "text": "like every other method on an interface normally anyone implementing that interface has to implement that member",
    "start": "1696260",
    "end": "1702559"
  },
  {
    "text": "and they have to implement it as a static member so in this case we have a property called can walk on eye animal",
    "start": "1702559",
    "end": "1708200"
  },
  {
    "text": "so anything that implements eye animal has to have a static property called can walk",
    "start": "1708200",
    "end": "1713539"
  },
  {
    "text": "that's the compiler feature it's not super exciting where this comes in where this is useful",
    "start": "1713539",
    "end": "1720500"
  },
  {
    "text": "is with generics because in my class down the bottom here",
    "start": "1720500",
    "end": "1726140"
  },
  {
    "text": "I've got a generic class and I know that t has to be something of this interface but I don't know what that's the whole",
    "start": "1726140",
    "end": "1732860"
  },
  {
    "text": "point of generics that's why I'm using it so I can't call dog.can walk because I don't know it's a dog and if I could",
    "start": "1732860",
    "end": "1737960"
  },
  {
    "text": "call dog.com I didn't need the interface so this lets me call a static method or property on a generic type",
    "start": "1737960",
    "end": "1746059"
  },
  {
    "text": "knowing that it implements interface so where this is really cool",
    "start": "1746059",
    "end": "1751820"
  },
  {
    "text": "there's two there's two things this is really cool for so number one I'm going to create an interface called I async",
    "start": "1751820",
    "end": "1759799"
  },
  {
    "text": "factory and I'm going to make it generic and I'm going to put a static abstract",
    "start": "1759799",
    "end": "1767659"
  },
  {
    "text": "task of T self create async method",
    "start": "1767659",
    "end": "1773860"
  },
  {
    "text": "so what this means is I can spell I swear",
    "start": "1773860",
    "end": "1780860"
  },
  {
    "text": "who decided to spell check when vs was a good idea I'm going to create a class called Google because I like the word",
    "start": "1780860",
    "end": "1787100"
  },
  {
    "text": "goo it's oops I async factory of myself",
    "start": "1787100",
    "end": "1794120"
  },
  {
    "text": "I implemented a geostatic method so this is yeah this isn't very exciting like the generics maybe look confusing but",
    "start": "1794120",
    "end": "1799399"
  },
  {
    "text": "this is just a static method that implements an interface member but what this means is yeah the nicest thing is icing",
    "start": "1799399",
    "end": "1806419"
  },
  {
    "text": "Constructors in sejap I just made them if I have some kind of method that I want to be able to construct in implant",
    "start": "1806419",
    "end": "1813200"
  },
  {
    "text": "instances of things then I can make that method take in a t and I can say where T is an",
    "start": "1813200",
    "end": "1820940"
  },
  {
    "text": "ice icing Factory and now I know that there's a create method I can call that will asynchronously whatever that means",
    "start": "1820940",
    "end": "1828380"
  },
  {
    "text": "create an instance of that class what it actually means it's up to like I don't know wait to stop delay that's that's",
    "start": "1828380",
    "end": "1837220"
  },
  {
    "text": "there you go um I think this is really cool for this sort of thing because this is something we couldn't really do in C sharp for you",
    "start": "1837260",
    "end": "1843980"
  },
  {
    "text": "couldn't you could say a generic type had to be uh had to have an empty Constructor so I had to be able to",
    "start": "1843980",
    "end": "1849320"
  },
  {
    "text": "create it but only empty right not with um well it could be icing couldn't have any",
    "start": "1849320",
    "end": "1855260"
  },
  {
    "text": "properties whatever the other thing you can do here is is uh just allow like have parameters so maybe",
    "start": "1855260",
    "end": "1862580"
  },
  {
    "text": "I say that I want everything in my whole system to be constructed you have to take an eye logger because I want",
    "start": "1862580",
    "end": "1868039"
  },
  {
    "text": "logging to be really important so yeah have this static method uh here have a",
    "start": "1868039",
    "end": "1873080"
  },
  {
    "text": "parameter so then everything in points it has to have that parameter so this is a way to",
    "start": "1873080",
    "end": "1878960"
  },
  {
    "text": "well in the past I would have done this by having this interface and I would",
    "start": "1878960",
    "end": "1884240"
  },
  {
    "text": "have had this create be a normal method not a static method and so you'd pass in an instance of the thing and it would",
    "start": "1884240",
    "end": "1889580"
  },
  {
    "text": "call the method and it really should have been static but it just couldn't this now allows for that the other place",
    "start": "1889580",
    "end": "1895159"
  },
  {
    "text": "this is interesting that you possibly have heard of is generic math so this is a new feature of the.net runtime that",
    "start": "1895159",
    "end": "1902659"
  },
  {
    "text": "takes advantage of this feature so I can make what are we doing we'll do the classic",
    "start": "1902659",
    "end": "1908240"
  },
  {
    "text": "ad method whoops uh I forgot I'm gonna make an Adder no wait no I'm",
    "start": "1908240",
    "end": "1914179"
  },
  {
    "text": "not I'm gonna make a method um so add we're going to add two integers",
    "start": "1914179",
    "end": "1921080"
  },
  {
    "text": "together great no worries I can call add",
    "start": "1921080",
    "end": "1926960"
  },
  {
    "text": "whoops apparently I can't",
    "start": "1926960",
    "end": "1930460"
  },
  {
    "text": "okay that's not very exciting but of course this only works for integers if I want to work for other types that's where",
    "start": "1932360",
    "end": "1939020"
  },
  {
    "text": "generics come in but whoops",
    "start": "1939020",
    "end": "1944200"
  },
  {
    "text": "but with generics I can't add them together because",
    "start": "1945740",
    "end": "1951440"
  },
  {
    "text": "what does that mean so it turns out in C sharp what is what",
    "start": "1951440",
    "end": "1956720"
  },
  {
    "text": "you write as a plus operator is actually a static method and it's a static method called op underscore addition and so if",
    "start": "1956720",
    "end": "1963200"
  },
  {
    "text": "I say where T is an i number of t",
    "start": "1963200",
    "end": "1968299"
  },
  {
    "text": "now my crochet bars the reason for this is I number is an interface that says",
    "start": "1968299",
    "end": "1974360"
  },
  {
    "text": "You must have a static method called op underscore addition and the integer class in 32 class implements that",
    "start": "1974360",
    "end": "1981980"
  },
  {
    "text": "and in fact if we look in I number um",
    "start": "1981980",
    "end": "1987020"
  },
  {
    "text": "it's actually not implementing much",
    "start": "1987020",
    "end": "1993799"
  },
  {
    "text": "weird oh right eye number base apparently there we go there's the list uh there's",
    "start": "1993799",
    "end": "2000100"
  },
  {
    "text": "a lot of interfaces I Edition operators is the one I want",
    "start": "2000100",
    "end": "2005919"
  },
  {
    "text": "and this here it is here's the operator so the n32 class implements our number",
    "start": "2005919",
    "end": "2012159"
  },
  {
    "text": "which in turn implements this method which means the compiler is now happy for me to say a plus b on this generic",
    "start": "2012159",
    "end": "2019480"
  },
  {
    "text": "type of T which I have no idea what it is but I know that it at least has to support I number",
    "start": "2019480",
    "end": "2024880"
  },
  {
    "text": "where this comes in more useful is things like where is this",
    "start": "2024880",
    "end": "2033299"
  },
  {
    "text": "lifespan possible probably yep so I parsable is an interesting one for me this is a new interface in.net and",
    "start": "2033880",
    "end": "2042880"
  },
  {
    "text": "various types will implement this and what this says is whatever type it is has to be able to par be parsed from a",
    "start": "2042880",
    "end": "2049000"
  },
  {
    "text": "string and I can think of a number of times in the past where I would have wanted this behavior in some generic method like a",
    "start": "2049000",
    "end": "2055540"
  },
  {
    "text": "deserialization method is a perfect example digitalize this string as this type well if that type has a parse",
    "start": "2055540",
    "end": "2062260"
  },
  {
    "text": "method you don't have to write any code then right whoever wrote the types written for you so there's a couple of",
    "start": "2062260",
    "end": "2067658"
  },
  {
    "text": "aspects to this you can write your own interfaces and you can now have static methods on them that's good",
    "start": "2067659",
    "end": "2073540"
  },
  {
    "text": "you can take advantage of I number and you can do generic math and if you've got math heavy code then that'll be",
    "start": "2073540",
    "end": "2079179"
  },
  {
    "text": "really useful but also there's lots of other interfaces in.net that you can just explore and a lot of the inbuilt",
    "start": "2079179",
    "end": "2086378"
  },
  {
    "text": "types will support them so that I formatable well iPhone edible existed but there's now an iPhone edible that",
    "start": "2086379",
    "end": "2092440"
  },
  {
    "text": "actually has static methods that mean things any questions on static abstract members",
    "start": "2092440",
    "end": "2097900"
  },
  {
    "text": "or generic math not that I'm very good at math cool",
    "start": "2097900",
    "end": "2103119"
  },
  {
    "text": "generic attributes there's not much to demo about this one it's pretty much what you see on the screen",
    "start": "2103119",
    "end": "2111300"
  },
  {
    "text": "in the past you would always have to use type of attributes and then you had a",
    "start": "2111640",
    "end": "2117099"
  },
  {
    "text": "type and then you had to do something with that type and that can be annoying and now attributes support generics so",
    "start": "2117099",
    "end": "2123220"
  },
  {
    "text": "now in my second attribute there the generic attribute instead of having a type that I have to play with I have a t",
    "start": "2123220",
    "end": "2129160"
  },
  {
    "text": "and because of all of the other things that generics allowed but for example static",
    "start": "2129160",
    "end": "2134380"
  },
  {
    "text": "abstract members might be one of them I can possibly do things with that tea without having to go you know activated",
    "start": "2134380",
    "end": "2140320"
  },
  {
    "text": "or create instance or using reflection to get properties Etc um there's not as far as I know there",
    "start": "2140320",
    "end": "2146619"
  },
  {
    "text": "aren't any generic attributes in the BCL yet this is just for things to take advantage of",
    "start": "2146619",
    "end": "2154619"
  },
  {
    "text": "Auto default structs who does stuff with structs anyone much",
    "start": "2154900",
    "end": "2160480"
  },
  {
    "text": "just you okay I don't um I've managed to avoid drugs but exactly why I like this feature because",
    "start": "2160480",
    "end": "2165700"
  },
  {
    "text": "this I don't use drugs enough that I forget the rules and this feature as well as",
    "start": "2165700",
    "end": "2170980"
  },
  {
    "text": "one from C sharp 10 makes makes them makes the rules more like uh",
    "start": "2170980",
    "end": "2177579"
  },
  {
    "text": "the same rules as having a class so oops order default trucks um",
    "start": "2177579",
    "end": "2183940"
  },
  {
    "text": "in c-sharp nine having this empty Constructor would have",
    "start": "2183940",
    "end": "2189579"
  },
  {
    "text": "been a compiler you weren't allowed to create a parameterless Constructor for structs the compiler creates one for you and",
    "start": "2189579",
    "end": "2196060"
  },
  {
    "text": "that's it in C sharp 10 that restriction was relaxed and now you can create one",
    "start": "2196060",
    "end": "2202480"
  },
  {
    "text": "but in C sharp 10 if I create a field in stitch up 10",
    "start": "2202480",
    "end": "2210520"
  },
  {
    "text": "when I call this no sorry in Cinema 10 this would have",
    "start": "2210520",
    "end": "2217240"
  },
  {
    "text": "been a compiler right now it's not a compile error it's very confusing because what happens is if we scroll",
    "start": "2217240",
    "end": "2223900"
  },
  {
    "text": "down here we can see what the compiler is doing the compiler will now synthesize a Setter essentially so",
    "start": "2223900",
    "end": "2232060"
  },
  {
    "text": "setting the field setting the property whatever it is it'll synthesize that into your code into your Constructors to",
    "start": "2232060",
    "end": "2237700"
  },
  {
    "text": "initialize any field or property to its default values so this is exactly how classes work the difference is that in a",
    "start": "2237700",
    "end": "2244599"
  },
  {
    "text": "class the compiler doesn't actually have to do the work because when the class is allocated on the Heap the runtime clears",
    "start": "2244599",
    "end": "2251920"
  },
  {
    "text": "out the memory for you right that's how classes work structs get allocated on the stack they don't clear memory so the",
    "start": "2251920",
    "end": "2257440"
  },
  {
    "text": "compiler has to actually write the code that says x equals zero but yeah so what this means is that structs just act",
    "start": "2257440",
    "end": "2264480"
  },
  {
    "text": "look essentially it's going to act like classes but the rules for creating them and writing them are now much more",
    "start": "2264480",
    "end": "2270400"
  },
  {
    "text": "aligned which is good because I can never remember them what is worth noting here if you do use",
    "start": "2270400",
    "end": "2277960"
  },
  {
    "text": "structs is the difference between empty Constructor versus defaults versus",
    "start": "2277960",
    "end": "2284800"
  },
  {
    "text": "a real Constructor and you know if I delete this you know you can you can sort of see what's going",
    "start": "2284800",
    "end": "2290440"
  },
  {
    "text": "on here so without an empty Constructor the first structure we create which",
    "start": "2290440",
    "end": "2295839"
  },
  {
    "text": "calls the object structure is the same as defaults if I put my Constructor in it now does",
    "start": "2295839",
    "end": "2301359"
  },
  {
    "text": "something different so this again this came in in C sharp 10 but it's worth calling out that there could be",
    "start": "2301359",
    "end": "2308260"
  },
  {
    "text": "difference between like I mean if I just go like that so there is now a",
    "start": "2308260",
    "end": "2313960"
  },
  {
    "text": "difference between an empty Constructor and a default of this struct and that could be a trap but again it's kind of",
    "start": "2313960",
    "end": "2322000"
  },
  {
    "text": "what the author of destruct intended so it's maybe not a trap you know but worth noting",
    "start": "2322000",
    "end": "2329279"
  },
  {
    "text": "all right we're going okay for time this is the last full slide but I didn't",
    "start": "2329859",
    "end": "2335380"
  },
  {
    "text": "set the number of features in C sharp 11. so the talk only goes for as long as they did work um refills and refscoped",
    "start": "2335380",
    "end": "2343660"
  },
  {
    "text": "in the past I've said this is a niche feature and then people complained that it's not Niche because they use it all",
    "start": "2343660",
    "end": "2349300"
  },
  {
    "text": "the time that's fair I don't use this and I don't know if anyone in this room",
    "start": "2349300",
    "end": "2354339"
  },
  {
    "text": "will it's the kind of feature where if you need it you probably already know about it and don't need to come to this talk",
    "start": "2354339",
    "end": "2360760"
  },
  {
    "text": "but I'm gonna try my best to explain it um structs are weird that's my",
    "start": "2360760",
    "end": "2365859"
  },
  {
    "text": "explanation so structs get allocated On The Stack and",
    "start": "2365859",
    "end": "2370900"
  },
  {
    "text": "there's a certain type of struct called a ref struct which gets allocated on the",
    "start": "2370900",
    "end": "2376060"
  },
  {
    "text": "stack but it also can never be on the Heap it's a rule that's what the ref means and span is one of those so I",
    "start": "2376060",
    "end": "2383920"
  },
  {
    "text": "can't have this span field on my struct even though my structure is going to get",
    "start": "2383920",
    "end": "2389020"
  },
  {
    "text": "allocated on the stack and a span has to live on the strap stack I can't have the field there because what if my strut",
    "start": "2389020",
    "end": "2395380"
  },
  {
    "text": "gets boxed and gets put on the Heap or as part of an async method and gets shoved off to the side and wakes up three seconds later or whatever else so",
    "start": "2395380",
    "end": "2401800"
  },
  {
    "text": "the rule says you can't have uh what's called a ref struct which is what span",
    "start": "2401800",
    "end": "2406839"
  },
  {
    "text": "is you can't have a ref struct on a struct you can have a ref struct on a ref struct so I can say that my struct",
    "start": "2406839",
    "end": "2413560"
  },
  {
    "text": "is now a restaurant so it can only live on the Heap the stack whoops and therefore it can contain things that",
    "start": "2413560",
    "end": "2419980"
  },
  {
    "text": "kind of live on the stack and so the compiler can verify all of this by me declaring what the rules are for my",
    "start": "2419980",
    "end": "2425440"
  },
  {
    "text": "thing that implies the rules for the things I hold but now we have another error up here which we didn't have",
    "start": "2425440",
    "end": "2431020"
  },
  {
    "text": "before I can't pass this parameter to this method on a ref struct because that",
    "start": "2431020",
    "end": "2437320"
  },
  {
    "text": "could allow that parameter which is owned by the caller method could allow it to leak out",
    "start": "2437320",
    "end": "2443740"
  },
  {
    "text": "right this truck could do something with it that would be bad and we can't have things on the stack leaking because when",
    "start": "2443740",
    "end": "2449320"
  },
  {
    "text": "the method that called it with the method itself or the method of course it goes out of scope that memory is used",
    "start": "2449320",
    "end": "2455920"
  },
  {
    "text": "for something else so we can't have anything leaking so the new feature here is that I can say this is scoped and now",
    "start": "2455920",
    "end": "2462220"
  },
  {
    "text": "my code compiles and I can tell from your faces you're just as excited about this as I am what this is doing is essentially",
    "start": "2462220",
    "end": "2469359"
  },
  {
    "text": "there's new ways well the scoped keyword is a new another another way to tell the compiler",
    "start": "2469359",
    "end": "2475599"
  },
  {
    "text": "essentially what you're doing but it's it's you promising to the compile that you won't do bad things but it also",
    "start": "2475599",
    "end": "2482560"
  },
  {
    "text": "allows the compiler to verify that you won't do bad things so scoped this this parameter is scoped so I can I can use",
    "start": "2482560",
    "end": "2491020"
  },
  {
    "text": "it in this method if I tried to pass it to another method that would be a compiler unless that method was scoped and so it's got to be scoped all the way",
    "start": "2491020",
    "end": "2497140"
  },
  {
    "text": "down it's going to be ref structs all the way up right so the rules are kind of straightforward but by building on",
    "start": "2497140",
    "end": "2505000"
  },
  {
    "text": "top of that rule system the compiler essentially can trust that you're doing the right thing",
    "start": "2505000",
    "end": "2510400"
  },
  {
    "text": "so again if you know about ref constructs and structs and Scopes and whatever great and if you don't even",
    "start": "2510400",
    "end": "2516280"
  },
  {
    "text": "better um because I don't either you can even you can do read only ref or",
    "start": "2516280",
    "end": "2522400"
  },
  {
    "text": "ref read only or read only refereed only and they all mean different things and I'm so glad I don't talk about it all",
    "start": "2522400",
    "end": "2527440"
  },
  {
    "text": "right so this is the last slide so if you have any questions if you've been holding back this is the grab bag",
    "start": "2527440",
    "end": "2532660"
  },
  {
    "text": "um of features over 42 minutes which is fine I don't mind I can finish early these are just small things and in fact",
    "start": "2532660",
    "end": "2540579"
  },
  {
    "text": "I'm going to go from the bottom up just to make it quicker so numeric ink pointer is not very interesting there",
    "start": "2540579",
    "end": "2546400"
  },
  {
    "text": "are data types in.net called n int and n u int actually I'm going to type because",
    "start": "2546400",
    "end": "2552520"
  },
  {
    "text": "this one's funny sorry so there's mint right which is native integer and then",
    "start": "2552520",
    "end": "2558820"
  },
  {
    "text": "there's native unsigned int and every single time I type it I type n unit and it really confuses me",
    "start": "2558820",
    "end": "2564820"
  },
  {
    "text": "in C sharp 10 and below these were weird things that would be",
    "start": "2564820",
    "end": "2572619"
  },
  {
    "text": "represented by the int pointer class so the int interpreter and uint pointer",
    "start": "2572619",
    "end": "2578140"
  },
  {
    "text": "these would be represented by this class but the compiler allowed you to do a little bit more with them it was a bit",
    "start": "2578140",
    "end": "2584020"
  },
  {
    "text": "weird so now in C sharp 11 they're just aliases in exactly the same way that int is in 32 and string is string those",
    "start": "2584020",
    "end": "2590500"
  },
  {
    "text": "things again if you don't use them then you don't thing um matching span of char is useful if you",
    "start": "2590500",
    "end": "2597640"
  },
  {
    "text": "use spans so um if you're not don't know what a span is or span or a read-only span is a way",
    "start": "2597640",
    "end": "2604000"
  },
  {
    "text": "of essentially saying that you want to work on the memory that represents a bunch of",
    "start": "2604000",
    "end": "2610599"
  },
  {
    "text": "characters but doesn't have to be a string right it could be a file it could be",
    "start": "2610599",
    "end": "2615700"
  },
  {
    "text": "something else or if it is a string it's just a it's a way of dealing with it without essentially saving memory allocations",
    "start": "2615700",
    "end": "2622660"
  },
  {
    "text": "that's what spans for so span of char specifically is very commonly used to point to Strings but you couldn't do if",
    "start": "2622660",
    "end": "2629920"
  },
  {
    "text": "statements so if you had a span of chars you say well I don't care what the backing memory is for this string",
    "start": "2629920",
    "end": "2635859"
  },
  {
    "text": "essentially I couldn't even check if it equals something else and so you now can we know how to do the pattern matching on",
    "start": "2635859",
    "end": "2641859"
  },
  {
    "text": "spans of jars fire local types are",
    "start": "2641859",
    "end": "2647440"
  },
  {
    "text": "maybe interesting um so this is being able to put the file",
    "start": "2647440",
    "end": "2652599"
  },
  {
    "text": "keyword in front of a class and so this let me go",
    "start": "2652599",
    "end": "2658140"
  },
  {
    "text": "I don't know there's a method so I can go C dot Google",
    "start": "2659200",
    "end": "2664960"
  },
  {
    "text": "but if I create a new file oh God",
    "start": "2664960",
    "end": "2670500"
  },
  {
    "text": "let me do this again and",
    "start": "2670839",
    "end": "2674640"
  },
  {
    "text": "if I create a new file C dot oop C doesn't work",
    "start": "2676540",
    "end": "2683338"
  },
  {
    "text": "um so a farther class is exactly what it sounds like that class C that I created there is only valid in this file and in",
    "start": "2683619",
    "end": "2691240"
  },
  {
    "text": "fact I can create another one over here and it'll work in this file oh",
    "start": "2691240",
    "end": "2697240"
  },
  {
    "text": "whoops",
    "start": "2697240",
    "end": "2699780"
  },
  {
    "text": "because it does what have I done oh that's it helps to",
    "start": "2704940",
    "end": "2710380"
  },
  {
    "text": "be in a method honestly because I used to writing shorthand code I forget you need you need to put things in anyway so",
    "start": "2710380",
    "end": "2716800"
  },
  {
    "text": "I can have multiple classes with the same name in different files and their Skype differently and in fact if I jump",
    "start": "2716800",
    "end": "2723460"
  },
  {
    "text": "across the sharp lab oops",
    "start": "2723460",
    "end": "2727619"
  },
  {
    "text": "you can see Java Diagon push-up",
    "start": "2729220",
    "end": "2734800"
  },
  {
    "text": "I've seen it demoed in at least three talks today so it could just be come on shuffle",
    "start": "2734800",
    "end": "2740020"
  },
  {
    "text": "okay uh yeah check that class name out so a little",
    "start": "2740020",
    "end": "2745240"
  },
  {
    "text": "pile of magic to make it uh unique it's actually a hash of the file name so it's not random it's deterministic and things",
    "start": "2745240",
    "end": "2751780"
  },
  {
    "text": "work um they're mainly useful for Source generators if you're into Source",
    "start": "2751780",
    "end": "2757540"
  },
  {
    "text": "generators because you don't have to worry about class names clashing if you say this is only valid in this file",
    "start": "2757540",
    "end": "2762880"
  },
  {
    "text": "you'll never have a problem name of parameter in attributes that's",
    "start": "2762880",
    "end": "2769540"
  },
  {
    "text": "pretty simple so X and I can say",
    "start": "2769540",
    "end": "2775000"
  },
  {
    "text": "encryption and tablet string name of x",
    "start": "2775000",
    "end": "2782280"
  },
  {
    "text": "hello Talking Max and that should be Embrace that should",
    "start": "2784240",
    "end": "2789460"
  },
  {
    "text": "be bracket there we go um this didn't used to compile in C sharp 10 this would say I don't",
    "start": "2789460",
    "end": "2795460"
  },
  {
    "text": "know what x is and obviously what you meant was the parameter and so now we allow that that is very useful and comes",
    "start": "2795460",
    "end": "2802660"
  },
  {
    "text": "up reasonably often but probably not that you can name right now new lines interpolation holes is",
    "start": "2802660",
    "end": "2808660"
  },
  {
    "text": "fantastic I can do that that's the entire feature I can put new lines in it's actually very useful it's just kind",
    "start": "2808660",
    "end": "2815680"
  },
  {
    "text": "of you know didn't deserve a whole slide um all right and last one 45 minutes",
    "start": "2815680",
    "end": "2823060"
  },
  {
    "text": "it's all on you if this is going to take an out it's all up to you got to ask questions um",
    "start": "2823060",
    "end": "2828579"
  },
  {
    "text": "this one's good so this one is uh a perf Improvement that lots of people",
    "start": "2828579",
    "end": "2835540"
  },
  {
    "text": "do but it's a readability uh detriment and so in C sharp 11 we can",
    "start": "2835540",
    "end": "2842319"
  },
  {
    "text": "now get the Perth benefit without the readability judgment so what this is about is about",
    "start": "2842319",
    "end": "2847420"
  },
  {
    "text": "capturing method groups so I have these two lambdas here",
    "start": "2847420",
    "end": "2852760"
  },
  {
    "text": "one I have written as a full Lambda and one I have just written as the method",
    "start": "2852760",
    "end": "2858160"
  },
  {
    "text": "name because the method signature already matches the Lambda excuse me",
    "start": "2858160",
    "end": "2863800"
  },
  {
    "text": "and if I scroll down to what this compiles down to to these two lines and it's a bit hard to read because the C",
    "start": "2863800",
    "end": "2869740"
  },
  {
    "text": "sharp compiler generates these types with crazy characters but what this is doing",
    "start": "2869740",
    "end": "2874960"
  },
  {
    "text": "so for the full Lambda syntax the first one this says there's a type called C which is this",
    "start": "2874960",
    "end": "2881920"
  },
  {
    "text": "class helper class and there's a field on it called 900 square underscore zero",
    "start": "2881920",
    "end": "2887500"
  },
  {
    "text": "this one and that is that field holds a reference to the the Lambda and so this",
    "start": "2887500",
    "end": "2892900"
  },
  {
    "text": "says use that field it's a static field if it's not null and if it is null then",
    "start": "2892900",
    "end": "2898780"
  },
  {
    "text": "we initialize it to a new Lambda that's caching in order to avoid an",
    "start": "2898780",
    "end": "2904300"
  },
  {
    "text": "allocation right so we only create this Lambda in memory once",
    "start": "2904300",
    "end": "2909460"
  },
  {
    "text": "the second line where we just use the method name is just saying yeah it's a new action this is allocating memory",
    "start": "2909460",
    "end": "2915280"
  },
  {
    "text": "every single time this is called and for the wrong bit of code in the wrong spot",
    "start": "2915280",
    "end": "2920680"
  },
  {
    "text": "this could be a problem and so you go through and you make all of these things actual lambdas and it makes your code a",
    "start": "2920680",
    "end": "2927400"
  },
  {
    "text": "little bit more ugly it's not a huge difference when I'm like creating Fields but if you're passing lambdas into",
    "start": "2927400",
    "end": "2932859"
  },
  {
    "text": "methods it's really nice to just see the name of the method that's going to do the work than a Lambda so what we",
    "start": "2932859",
    "end": "2940180"
  },
  {
    "text": "what what needed to change here interestingly enough was the c-sharp spec which had a line in it that said",
    "start": "2940180",
    "end": "2946599"
  },
  {
    "text": "um something about you know you can't cache Lambda delegates and now",
    "start": "2946599",
    "end": "2952660"
  },
  {
    "text": "it says you sometimes can like that's that was that was a change but so if I make this static we get this new",
    "start": "2952660",
    "end": "2959020"
  },
  {
    "text": "compiler behavior and there's all sorts of reasons why it doesn't do it for non-statics and I'm not going to go into but if I made that method static we can",
    "start": "2959020",
    "end": "2965560"
  },
  {
    "text": "now say these two lines essentially do the same thing the names are different it's a bit quirky but this is now only",
    "start": "2965560",
    "end": "2972040"
  },
  {
    "text": "allocating once and so your performance is better but it's also still more readable",
    "start": "2972040",
    "end": "2978640"
  },
  {
    "text": "and that is the end of the talk because that's all they'd even see sharp 11 and",
    "start": "2978640",
    "end": "2984579"
  },
  {
    "text": "um unless you want me to talk 10 minutes about what's in C sharp 12 but I don't know yet because it's really early",
    "start": "2984579",
    "end": "2989980"
  },
  {
    "text": "is there any questions about anything or you can go get a coffee or you can go get dinner not dinner I",
    "start": "2989980",
    "end": "2997720"
  },
  {
    "text": "don't know it's 2 am where I'm from hello question",
    "start": "2997720",
    "end": "3001520"
  },
  {
    "text": "um",
    "start": "3003480",
    "end": "3005480"
  },
  {
    "text": "uh you declared a hurricane",
    "start": "3009780",
    "end": "3016818"
  },
  {
    "text": "uh okay so what are the implications if you have different implementations of",
    "start": "3025800",
    "end": "3030839"
  },
  {
    "text": "the static method with different instances of the interface",
    "start": "3030839",
    "end": "3036180"
  },
  {
    "text": "yeah so this is this is maybe one of the weird things about static",
    "start": "3036180",
    "end": "3042599"
  },
  {
    "text": "so if I have an interface called this and I say static void",
    "start": "3042599",
    "end": "3052020"
  },
  {
    "text": "that versus saying static abstract",
    "start": "3052020",
    "end": "3058200"
  },
  {
    "text": "oops void I guess I should probably give it a different name",
    "start": "3058200",
    "end": "3064460"
  },
  {
    "text": "um so interfaces could have static methods before and you called them by just doing igoo Dot",
    "start": "3065099",
    "end": "3074819"
  },
  {
    "text": "because they were just static methods on a type an interface is a type class is a type of structure is a type",
    "start": "3074819",
    "end": "3081540"
  },
  {
    "text": "um and what you could then do so I could go class",
    "start": "3081540",
    "end": "3087240"
  },
  {
    "text": "an animal I'm mixing my metaphors now I can do this and I can implement",
    "start": "3087240",
    "end": "3094440"
  },
  {
    "text": "this interface and I can say animal dot Google whoops",
    "start": "3094440",
    "end": "3101339"
  },
  {
    "text": "maybe I can't okay I can't um",
    "start": "3101339",
    "end": "3107760"
  },
  {
    "text": "you can do that with base classes and so maybe I thought that's maybe where you're going um",
    "start": "3107760",
    "end": "3113160"
  },
  {
    "text": "so the answer to the question though is is kind of there isn't a problem because if there",
    "start": "3113160",
    "end": "3118800"
  },
  {
    "text": "was it would already exist with interfaces so if I have a variable if I have a variable of type animal",
    "start": "3118800",
    "end": "3127740"
  },
  {
    "text": "then I can't call that static method on it like it's a static method you have to",
    "start": "3127740",
    "end": "3133859"
  },
  {
    "text": "call it on the type so if you're worried about getting a cat but calling the method on dog you would",
    "start": "3133859",
    "end": "3141180"
  },
  {
    "text": "have to literally type in dog dot goo and in that case well you're calling it on dog there's no ambiguity so it's a",
    "start": "3141180",
    "end": "3147900"
  },
  {
    "text": "bit weird and I get like I understand why the question because this seems odd at first but",
    "start": "3147900",
    "end": "3153300"
  },
  {
    "text": "um they really are only useful with generics you wouldn't normally you",
    "start": "3153300",
    "end": "3159300"
  },
  {
    "text": "wouldn't expect to have a strongly typed uh variable or local that you would use",
    "start": "3159300",
    "end": "3165660"
  },
  {
    "text": "these with because if it was strongly typed you wouldn't worry about the interface",
    "start": "3165660",
    "end": "3171420"
  },
  {
    "text": "I don't know if that makes any sense I got confused halfway through any of",
    "start": "3171420",
    "end": "3178818"
  },
  {
    "text": "them um okay well cool let's yeah we've got seven minutes let's see what I have an objects",
    "start": "3183240",
    "end": "3189079"
  },
  {
    "text": "string so string G that why do people hate this I love this I",
    "start": "3189079",
    "end": "3196319"
  },
  {
    "text": "did a PR into so I work on the Razer editor mainly and I did a PR into that that removed about 2000 lines of code",
    "start": "3196319",
    "end": "3201839"
  },
  {
    "text": "just by putting in talking exclamation marks um",
    "start": "3201839",
    "end": "3206940"
  },
  {
    "text": "and I then had to remove it which was really annoying uh because I couldn't just get revert because we've done a bunch of work",
    "start": "3206940",
    "end": "3212220"
  },
  {
    "text": "anyway don't be an early doctor people didn't like this for a couple of reasons um",
    "start": "3212220",
    "end": "3217680"
  },
  {
    "text": "number one reason they just didn't like the syntax they just thought it looks a bit angry I don't know I I'm I don't",
    "start": "3217680",
    "end": "3225540"
  },
  {
    "text": "mean to make fun because they had valid valid concerns I just don't know um",
    "start": "3225540",
    "end": "3230640"
  },
  {
    "text": "there's a lot of people who wanted it on the type so they kind of you know if you think about nullable is on the type the",
    "start": "3230640",
    "end": "3237420"
  },
  {
    "text": "question mark would be on the type so it makes sense to say not null is on the type but that kind of falls down in a",
    "start": "3237420",
    "end": "3243420"
  },
  {
    "text": "few scenarios um where it doesn't make sense um",
    "start": "3243420",
    "end": "3249660"
  },
  {
    "text": "people I think were well I quite like that you know if you want",
    "start": "3249660",
    "end": "3255359"
  },
  {
    "text": "um the null the the exclamation mark is the null",
    "start": "3255359",
    "end": "3261900"
  },
  {
    "text": "suppression thing right where if you've got a nullable thing and you say uh yeah you go null it's like yeah it's not now",
    "start": "3261900",
    "end": "3268260"
  },
  {
    "text": "trust me um I kind of like that it was an extension of that whereas like one",
    "start": "3268260",
    "end": "3273480"
  },
  {
    "text": "exclamation mark tells the compiler to shut up about nulls two exclamation mark tells the run time like I kind of like",
    "start": "3273480",
    "end": "3280260"
  },
  {
    "text": "that but it's also a bit different because one tells the compiler to stop complaining and the other one tells the",
    "start": "3280260",
    "end": "3285599"
  },
  {
    "text": "runtime to throw an exception which is actively complaining so I kind of those",
    "start": "3285599",
    "end": "3290700"
  },
  {
    "text": "sorts of reasons there's a very long thread on C Sharp Lane and I promise you",
    "start": "3290700",
    "end": "3296760"
  },
  {
    "text": "and again I don't mean to make fun but I promise you every single thought you're having now about why this is good or bad has been discussed in that thread",
    "start": "3296760",
    "end": "3304140"
  },
  {
    "text": "um which is a good thing it's very thorough there's lots of Engagement with the community um at the end of the day the biggest",
    "start": "3304140",
    "end": "3310260"
  },
  {
    "text": "problem problem with C sharp with this sort of thing is that C sharp is 20",
    "start": "3310260",
    "end": "3316020"
  },
  {
    "text": "years old and it is 100 backwards compatible and so any new syntax that goes in now",
    "start": "3316020",
    "end": "3322260"
  },
  {
    "text": "it's there it's there forever it has to be supported forever and you can't use",
    "start": "3322260",
    "end": "3327300"
  },
  {
    "text": "that Syntax for other things so let's say null suppression maybe get some new",
    "start": "3327300",
    "end": "3332819"
  },
  {
    "text": "way to work maybe the logical thing would be to put two exclamation marks on we can't because that means something so",
    "start": "3332819",
    "end": "3338280"
  },
  {
    "text": "it's very hard to introduce new syntax it's very I guess it's it's sort of risky in a way because you are really",
    "start": "3338280",
    "end": "3344940"
  },
  {
    "text": "committing yourself so if the versioning of C sharp was a bit more lacks and we",
    "start": "3344940",
    "end": "3350040"
  },
  {
    "text": "weren't so backwards compatible and we weren't really tied to this forever I think we might have seen a different results but it is hard to put in new",
    "start": "3350040",
    "end": "3357180"
  },
  {
    "text": "syntax that isn't um you know it's not a slam dunk which",
    "start": "3357180",
    "end": "3362819"
  },
  {
    "text": "actually brings up another thing I wonder if I can demo this",
    "start": "3362819",
    "end": "3367819"
  },
  {
    "text": "is a another interesting this is kind of a compiler feature but it's not a language feature so I didn't include it",
    "start": "3368880",
    "end": "3374940"
  },
  {
    "text": "but it's relevant here um one thing that was going to be in C sharp 11 was the field keyword",
    "start": "3374940",
    "end": "3380819"
  },
  {
    "text": "but you could have a typical field or a field called field and that could cause conflicts conflicts is something the",
    "start": "3380819",
    "end": "3387900"
  },
  {
    "text": "c-sharp compiler team the language team has to deal with all the time if you want a new keyword in the language like",
    "start": "3387900",
    "end": "3394020"
  },
  {
    "text": "record or like scoped or whatever you've got to think about well what's going to happen if someone has a type called",
    "start": "3394020",
    "end": "3399300"
  },
  {
    "text": "record or a type called Script or a field call or a parameter or whatever what are the rules what's going to win what's going to what are we going to",
    "start": "3399300",
    "end": "3405599"
  },
  {
    "text": "resolve this to and so one thing that is new in C sharp 11 the compiler is that",
    "start": "3405599",
    "end": "3410700"
  },
  {
    "text": "it will now warn if you have any classes defined with lowercase names",
    "start": "3410700",
    "end": "3416400"
  },
  {
    "text": "because the problem of trying to work out new syntax to add is getting so difficult that we kind of need to stop",
    "start": "3416400",
    "end": "3422819"
  },
  {
    "text": "people from taking all of the good words so",
    "start": "3422819",
    "end": "3428220"
  },
  {
    "text": "so things things like that is why it's it's a big ask to put in new syntax and",
    "start": "3428700",
    "end": "3435180"
  },
  {
    "text": "so it's not just that people didn't like the syntax it's that if we put it in it",
    "start": "3435180",
    "end": "3440700"
  },
  {
    "text": "would be there forever and we'd have to support it forever and we couldn't use it for anything else",
    "start": "3440700",
    "end": "3446059"
  },
  {
    "text": "and if there's no more questions then I will let you escape the room",
    "start": "3447660",
    "end": "3453480"
  },
  {
    "text": "thank you very much",
    "start": "3453480",
    "end": "3456380"
  }
]