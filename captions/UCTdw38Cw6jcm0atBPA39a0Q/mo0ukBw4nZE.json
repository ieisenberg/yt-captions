[
  {
    "text": "first off thank you for coming to listen to me ramble on about javascript meta programming it's a pretty dry topic i'll talk about it for",
    "start": "3360",
    "end": "10639"
  },
  {
    "text": "about an hour here i appreciate you guys coming in and taking your time i genuinely hope you've enjoyed the",
    "start": "10639",
    "end": "15920"
  },
  {
    "text": "conference as much as i have i hope you've been able to get some uh great information out of sessions",
    "start": "15920",
    "end": "21279"
  },
  {
    "text": "uh i'd like to thank the ndc organizers and sponsors for getting us back together i'm sure you guys are",
    "start": "21279",
    "end": "27920"
  },
  {
    "text": "all tired of hearing we're great glad to be back together but it's a lot of work to put on a show like",
    "start": "27920",
    "end": "33200"
  },
  {
    "text": "this and i think the ndc organizers are world class and just wanted to you know publicly thank them for for putting",
    "start": "33200",
    "end": "39600"
  },
  {
    "text": "together this and getting us all back together so with that i'm dave i am a",
    "start": "39600",
    "end": "45920"
  },
  {
    "text": "lead software engineer for the back end of a small company back in",
    "start": "45920",
    "end": "51680"
  },
  {
    "text": "indianapolis indiana called vibinomics and what we do is the background music and advertising you",
    "start": "51680",
    "end": "58960"
  },
  {
    "text": "hear in grocery stores across the united states so there's there's actually it's not just like somebody sitting in the back room push and play on on spotify or",
    "start": "58960",
    "end": "65760"
  },
  {
    "text": "something they get sued for that so there's there's actually a whole industry behind that and i handle the",
    "start": "65760",
    "end": "71119"
  },
  {
    "text": "the back inside so i was saying a little bit before we started mike i came into javascript i've",
    "start": "71119",
    "end": "76960"
  },
  {
    "text": "done javascript years ago in the now during the browser wars and all that that was really my experience with",
    "start": "76960",
    "end": "83040"
  },
  {
    "text": "javascript and when i started at this company i was a",
    "start": "83040",
    "end": "88400"
  },
  {
    "text": "net developer i was an i was a microsoft mvp for five years on uh",
    "start": "88400",
    "end": "94479"
  },
  {
    "text": "visual studio and development tools i got into that through some of my work with with f sharp and f sharp changed",
    "start": "94479",
    "end": "100640"
  },
  {
    "text": "the way i program so if you think about a statically typed",
    "start": "100640",
    "end": "106720"
  },
  {
    "text": "functional programming language going to javascript like talk about a paradigm shift right",
    "start": "106720",
    "end": "115840"
  },
  {
    "text": "f-sharp has flavored everything that i have done since then and",
    "start": "116240",
    "end": "122079"
  },
  {
    "text": "when i started at this company i came in to stabilize our old product that's now retired",
    "start": "122079",
    "end": "129280"
  },
  {
    "text": "and i fell i was on contract and i fell in love with the company so when they decided that now they would keep me on",
    "start": "129280",
    "end": "135680"
  },
  {
    "text": "to start working on this new project but the decision was oh but by the way we're gonna do it in",
    "start": "135680",
    "end": "141920"
  },
  {
    "text": "node i was like oh that's a little bit of a shock so but",
    "start": "141920",
    "end": "148000"
  },
  {
    "text": "all of my memories of what javascript was back during the browser wars",
    "start": "148000",
    "end": "154640"
  },
  {
    "text": "were completely unjustified because javascript is not the same language it was",
    "start": "154640",
    "end": "159760"
  },
  {
    "text": "and now i'm going to approach this talk from my perspective as a node developer",
    "start": "159760",
    "end": "166319"
  },
  {
    "text": "so if you're primarily front end i think you'll be able to get some mileage out of this but i don't do front end",
    "start": "166319",
    "end": "172319"
  },
  {
    "text": "developments so i can't really talk to how it plays with the various compilers",
    "start": "172319",
    "end": "178560"
  },
  {
    "text": "or babel or any of those i'm sure you'll be able to use most of these leverage most of the techniques",
    "start": "178560",
    "end": "184560"
  },
  {
    "text": "but i have not personally tried them but yeah so if i was doing",
    "start": "184560",
    "end": "190400"
  },
  {
    "text": "javascript the way it was during the browser wars i think i would have changed careers",
    "start": "190400",
    "end": "196000"
  },
  {
    "text": "but now with es6 we have so many robust capabilities",
    "start": "196000",
    "end": "201680"
  },
  {
    "text": "that it is absolutely a different language than it once was and one of the things that i think",
    "start": "201680",
    "end": "207200"
  },
  {
    "text": "really has has evolved and matured over the past several years is our ability to",
    "start": "207200",
    "end": "212959"
  },
  {
    "text": "do meta programming so who's familiar with the idea of meta programming okay so half the room",
    "start": "212959",
    "end": "219200"
  },
  {
    "text": "so we always hear about metadata but meta programming is programming about programming so how",
    "start": "219200",
    "end": "227200"
  },
  {
    "text": "can we make our code understand itself and adapt and evolve",
    "start": "227200",
    "end": "232959"
  },
  {
    "text": "itself that's what meta programming is and when you understand",
    "start": "232959",
    "end": "238080"
  },
  {
    "text": "what meta programming can bring to your project you can think in different levels of abstraction",
    "start": "238080",
    "end": "243120"
  },
  {
    "text": "and generalize things that would normally be more single case single use",
    "start": "243120",
    "end": "248400"
  },
  {
    "text": "opportunities so for this talk we're going to go through",
    "start": "248400",
    "end": "255200"
  },
  {
    "text": "a number of the techniques that are available to us in modern javascript but we're going to",
    "start": "255200",
    "end": "260320"
  },
  {
    "text": "start going way back in time so with that",
    "start": "260320",
    "end": "266240"
  },
  {
    "text": "we fall into now three categories for meta programming the first is code",
    "start": "266240",
    "end": "273199"
  },
  {
    "text": "generation and i'm gonna say right up front i never do this in javascript javascript doesn't really",
    "start": "273199",
    "end": "279520"
  },
  {
    "text": "need it it has capabilities for it they all suck uh the first one the obvious one eval",
    "start": "279520",
    "end": "287840"
  },
  {
    "text": "don't use eval right yeah i don't",
    "start": "287840",
    "end": "292400"
  },
  {
    "text": "i'm not going to go into the discussion on why not to use eval it's well documented",
    "start": "292880",
    "end": "298080"
  },
  {
    "text": "even the mdn documentation says don't use this use some other things instead but the",
    "start": "298080",
    "end": "304000"
  },
  {
    "text": "idea is you give eval a string of javascript and it",
    "start": "304000",
    "end": "310720"
  },
  {
    "text": "throws it out to machine code and compiles it every time you need to do anything with it every time you run eval",
    "start": "310720",
    "end": "316720"
  },
  {
    "text": "it needs to do it there's no keeping it around so it also has some",
    "start": "316720",
    "end": "322240"
  },
  {
    "text": "scoping issues and whatnot but yeah the idea is give it some code it runs it don't use it",
    "start": "322240",
    "end": "329440"
  },
  {
    "text": "let's skip through this and i'm and i'll say that a lot of these early examples and the historical things i'm going to",
    "start": "330160",
    "end": "336240"
  },
  {
    "text": "kind of gloss through because it does get a little repetitive but it's all building up to some of the ways that we",
    "start": "336240",
    "end": "341520"
  },
  {
    "text": "can apply the modern interfaces to make our code a little bit more more",
    "start": "341520",
    "end": "348160"
  },
  {
    "text": "self-reflective so to speak so then",
    "start": "348160",
    "end": "353360"
  },
  {
    "text": "we don't use eval we get the function constructor a similar idea solves some but not all of the issues",
    "start": "353360",
    "end": "359520"
  },
  {
    "text": "with eval i have yet to find a need to do it just based on the nature of javascript",
    "start": "359520",
    "end": "365600"
  },
  {
    "text": "but it does isolate your scope a little bit better and it doesn't it doesn't form closures around things like you would",
    "start": "365600",
    "end": "372479"
  },
  {
    "text": "potentially see with eval but yeah you call it the function constructor you pass it the parameters",
    "start": "372479",
    "end": "379280"
  },
  {
    "text": "that it's going to accept and the function body and it takes care of the rest and then you can treat it like",
    "start": "379280",
    "end": "385680"
  },
  {
    "text": "another function hey surprise new function gives you a function",
    "start": "385680",
    "end": "390319"
  },
  {
    "text": "but it doesn't close around things as i mentioned so if i have const name outside of my",
    "start": "392800",
    "end": "398160"
  },
  {
    "text": "function constructor it doesn't have visibility into that so the output of this is going to be name is not defined so it",
    "start": "398160",
    "end": "404880"
  },
  {
    "text": "gives us that little bit better isolation and for the node developers",
    "start": "404880",
    "end": "411039"
  },
  {
    "text": "we have the vm module which suffers from many of the same problems but it does give you some better",
    "start": "411039",
    "end": "416319"
  },
  {
    "text": "isolation than the function constructor or definitely eval",
    "start": "416319",
    "end": "422479"
  },
  {
    "text": "not going to go into this a whole lot it is just another option for how we can dynamically add code to our system",
    "start": "422479",
    "end": "430960"
  },
  {
    "text": "where things start getting interesting in meta programming is in the idea of",
    "start": "430960",
    "end": "436639"
  },
  {
    "text": "reflection or introspection so this is looking at your objects what is the structure of your objects what data",
    "start": "436639",
    "end": "442720"
  },
  {
    "text": "types do they use and how can i manipulate those so we've always had",
    "start": "442720",
    "end": "449039"
  },
  {
    "text": "some capability for this in javascript",
    "start": "449039",
    "end": "454560"
  },
  {
    "text": "the in operator is one of the oldest operators in the language",
    "start": "455759",
    "end": "460879"
  },
  {
    "text": "got an object defined it has three properties first name last name and age",
    "start": "461039",
    "end": "466560"
  },
  {
    "text": "and then i can use the in operator first name in my object well yeah it is i can see it last name in my object yes",
    "start": "467120",
    "end": "474000"
  },
  {
    "text": "it is middle name no it's not and in has another use",
    "start": "474000",
    "end": "479280"
  },
  {
    "text": "probably seen the structure where we have a four variable in this allows us to look at all of the",
    "start": "479280",
    "end": "486080"
  },
  {
    "text": "properties on the object so if we run that and we push",
    "start": "486080",
    "end": "492960"
  },
  {
    "text": "all of those property names into an array we get an array of those property names hey surprise",
    "start": "492960",
    "end": "500400"
  },
  {
    "text": "but we can take it a little bit further even in the old days of javascript we could use that for more practical things",
    "start": "502319",
    "end": "508800"
  },
  {
    "text": "than just saying what is on here we could use it to copy values around now all",
    "start": "508800",
    "end": "513839"
  },
  {
    "text": "references and pointers and everything else that come into play are still a factor but if you're needing to",
    "start": "513839",
    "end": "519680"
  },
  {
    "text": "transform an object perhaps or change from one model to another that",
    "start": "519680",
    "end": "525360"
  },
  {
    "text": "was a particular way to do it it was a little bit more verbose than the ways we have today",
    "start": "525360",
    "end": "530720"
  },
  {
    "text": "but it was certainly an option we could remove properties with the",
    "start": "530720",
    "end": "537600"
  },
  {
    "text": "handy delete operator i was asked why would you ever need to delete a property one of the cases i've had is",
    "start": "537600",
    "end": "544399"
  },
  {
    "text": "the system that i work on is primarily event driven and we want to capture when",
    "start": "544399",
    "end": "549680"
  },
  {
    "text": "a user has changed certain aspects of their user",
    "start": "549680",
    "end": "554880"
  },
  {
    "text": "profile one of those aspects could be a password i don't want to capture the password on my event log so i strip it",
    "start": "554880",
    "end": "560959"
  },
  {
    "text": "out before it with something similar to delete before i write that model to the database",
    "start": "560959",
    "end": "567760"
  },
  {
    "text": "and delete does exactly what you'd think so then if we have age and we delete age and we delete middle name",
    "start": "568480",
    "end": "575279"
  },
  {
    "text": "which doesn't actually exist hey look but but delete returns true anyway",
    "start": "575279",
    "end": "580480"
  },
  {
    "text": "like that so that's one of the shortcomings of delete because it's it did something well no it didn't but",
    "start": "580480",
    "end": "587120"
  },
  {
    "text": "it completed successfully so therefore it definitely deleted something but age we had defined",
    "start": "587120",
    "end": "594000"
  },
  {
    "text": "we deleted it and now age is no longer in my object so that one at least tells us the truth",
    "start": "594000",
    "end": "601920"
  },
  {
    "text": "and start to see a theme with some of these older interfaces these older operators and and",
    "start": "601920",
    "end": "609519"
  },
  {
    "text": "statements that you'd see in the very early days of javascript",
    "start": "610000",
    "end": "615680"
  },
  {
    "text": "type of you need to understand do i have a string do i have an object",
    "start": "617120",
    "end": "622399"
  },
  {
    "text": "do i have a function that's where we go to type of",
    "start": "622399",
    "end": "627200"
  },
  {
    "text": "last time i said those people got on on twitter got mad at me type of lies",
    "start": "627920",
    "end": "634720"
  },
  {
    "text": "now it doesn't really lie everything up here is is the best kind of correct which is technically correct but you",
    "start": "634720",
    "end": "641040"
  },
  {
    "text": "have to understand more about how the value was initialized then one would",
    "start": "641040",
    "end": "648160"
  },
  {
    "text": "necessarily think especially if you're coming from like a.net background and you ask for type of you expect it to",
    "start": "648160",
    "end": "653360"
  },
  {
    "text": "give you a consistent answer but if depending on how your value was constructed in javascript type of can",
    "start": "653360",
    "end": "658959"
  },
  {
    "text": "give you something that is only technically correct",
    "start": "658959",
    "end": "663440"
  },
  {
    "text": "type of string gives a string but type of string constructor gives us object",
    "start": "664240",
    "end": "671360"
  },
  {
    "text": "now if we're in our own code base we can control for this right we know we're not going to call the constructor",
    "start": "671440",
    "end": "678160"
  },
  {
    "text": "so we can be pretty assured that type that if we call typeof and our",
    "start": "678160",
    "end": "683360"
  },
  {
    "text": "value is a string that we should see string but i know that we don't all work in",
    "start": "683360",
    "end": "688959"
  },
  {
    "text": "silos we don't always have our own code we pull in npm packages all the time how",
    "start": "688959",
    "end": "695360"
  },
  {
    "text": "can you be assured that what you're using for what an npm package is giving you is constructed in the way that you",
    "start": "695360",
    "end": "700560"
  },
  {
    "text": "construct everything in your code base so type of",
    "start": "700560",
    "end": "706560"
  },
  {
    "text": "while it can be useful is generally best avoided and i i personally use the",
    "start": "706560",
    "end": "713040"
  },
  {
    "text": "functions from lowdash to do the same thing mdn has um some discussion about",
    "start": "713040",
    "end": "719920"
  },
  {
    "text": "the pragmatism of typeof and it actually provides an alternative implementation",
    "start": "719920",
    "end": "725200"
  },
  {
    "text": "that you can use which i looked at it looks pretty decent but i use lowdash so i didn't care that much",
    "start": "725200",
    "end": "731839"
  },
  {
    "text": "but if you need to understand what your data types are type of may or may not give you the",
    "start": "732079",
    "end": "737440"
  },
  {
    "text": "answer you're looking for",
    "start": "737440",
    "end": "740639"
  },
  {
    "text": "so we looked at these things we see that there's maybe some problems with some of them they did what they were supposed to",
    "start": "743440",
    "end": "748800"
  },
  {
    "text": "do but not necessarily as predictably as as one would like especially me coming from a functional background i like to",
    "start": "748800",
    "end": "754880"
  },
  {
    "text": "make sure that i have things like referential transparency so i want to see that if i call a function or if i",
    "start": "754880",
    "end": "760160"
  },
  {
    "text": "delete a property and it's going to tell me that it deleted something i want it to have actually deleted something",
    "start": "760160",
    "end": "767519"
  },
  {
    "text": "so we come in to a new round of things we get a whole new series of functions most of them",
    "start": "768000",
    "end": "773120"
  },
  {
    "text": "hanging off of the object type we get things like define property",
    "start": "773120",
    "end": "780800"
  },
  {
    "text": "where rather than just manipulating the contents of the dictionary or hash table",
    "start": "780880",
    "end": "786399"
  },
  {
    "text": "whatever you want to call it the the object where you can just dynamically attach things we now have an entire",
    "start": "786399",
    "end": "792560"
  },
  {
    "text": "interface for how to define that not only do we get to control the name of what we put in this object",
    "start": "792560",
    "end": "799600"
  },
  {
    "text": "we get to control various aspects that the interpreters and the runtimes understand",
    "start": "799600",
    "end": "804880"
  },
  {
    "text": "so things like the enumerable property which controls",
    "start": "804880",
    "end": "811040"
  },
  {
    "text": "if you were to do an in against the object whether it is actually listed or not",
    "start": "811040",
    "end": "816639"
  },
  {
    "text": "you can control that aspect you can make them read only and as you'll see later there are ways",
    "start": "816639",
    "end": "822240"
  },
  {
    "text": "to control how you get or set those values",
    "start": "822240",
    "end": "828240"
  },
  {
    "text": "we get a nice function called get own property names so anything that is innumerable on that object",
    "start": "828240",
    "end": "834880"
  },
  {
    "text": "will come back in an array so if we call object get owned property names on this object",
    "start": "834880",
    "end": "840160"
  },
  {
    "text": "we see that we have the two that were defined on the object itself directly and then the next two that were added",
    "start": "840160",
    "end": "846560"
  },
  {
    "text": "programmatically through the reflection operations that are defined on object",
    "start": "846560",
    "end": "852480"
  },
  {
    "text": "and similarly we have keys off of object which are the ones that",
    "start": "852480",
    "end": "858800"
  },
  {
    "text": "are so actually i'm sorry get on property names includes the non-innumerable ones and keys is just the innumerable ones if",
    "start": "858800",
    "end": "865360"
  },
  {
    "text": "we look at define property for middle name enumerable was false it is not in the keys",
    "start": "865360",
    "end": "871360"
  },
  {
    "text": "so there's a distinction between those two and i missed that i apologize",
    "start": "871360",
    "end": "876160"
  },
  {
    "text": "and let's see we already talked about that piece i'll skip over that again part of this gets a little repetitive",
    "start": "879279",
    "end": "884480"
  },
  {
    "text": "just watching this this evolution so property descriptors i talked about",
    "start": "884480",
    "end": "890399"
  },
  {
    "text": "enumerable a bit i talked about writable we want to provide the value well that's conveniently named as value",
    "start": "890399",
    "end": "896959"
  },
  {
    "text": "and configurable i can't remember what it does i meant to look it up because i i don't remember",
    "start": "896959",
    "end": "902959"
  },
  {
    "text": "i have not had an instance where i actually needed to set it so generally i just leave it at the default",
    "start": "902959",
    "end": "911160"
  },
  {
    "text": "but we saw a little while ago they get on property names and we saw keys well we can also do object.values",
    "start": "912639",
    "end": "919440"
  },
  {
    "text": "and so this will iterate over the properties on there and give you the value of them and not just so instead of",
    "start": "919440",
    "end": "925440"
  },
  {
    "text": "getting the name you'll get the value i'd find things like this being useful",
    "start": "925440",
    "end": "931759"
  },
  {
    "text": "if i'm trying to convert to a csv for instance i can get the property names once and then i can get the values on",
    "start": "931759",
    "end": "938079"
  },
  {
    "text": "each object in my array provided they're the same structure that can be convenient",
    "start": "938079",
    "end": "944319"
  },
  {
    "text": "but where things start getting really interesting is bringing back both of those pieces of",
    "start": "948160",
    "end": "953440"
  },
  {
    "text": "data the keys and the values together",
    "start": "953440",
    "end": "957680"
  },
  {
    "text": "so define our object the same way we've been defining it add a couple of new properties then we have the entries function",
    "start": "958639",
    "end": "966000"
  },
  {
    "text": "the entries function gives you an array where since we're calling map",
    "start": "966000",
    "end": "972639"
  },
  {
    "text": "an array of keys and values which you can then",
    "start": "972639",
    "end": "977680"
  },
  {
    "text": "work operate against with operate against as you please so in this case i just map them into a string and join it",
    "start": "977680",
    "end": "984560"
  },
  {
    "text": "on semicolon and so the output of this is first name is dave's last name as fantasy ages 42.",
    "start": "984560",
    "end": "990160"
  },
  {
    "text": "so we can get those pieces of data we're starting to see things about how our code is structured and the values",
    "start": "990160",
    "end": "995279"
  },
  {
    "text": "associated with that structure",
    "start": "995279",
    "end": "998959"
  },
  {
    "text": "and if you've done this or you've got entries maybe you've written that off somewhere",
    "start": "1001440",
    "end": "1007839"
  },
  {
    "text": "and you want to reconstruct your object well you get object from entries on that which does the opposite direction it",
    "start": "1007839",
    "end": "1014399"
  },
  {
    "text": "will recreate an object based on those key and value pairs so you don't have to do it manually",
    "start": "1014399",
    "end": "1023240"
  },
  {
    "text": "and i think in this one yeah so then we get object assign",
    "start": "1027199",
    "end": "1033280"
  },
  {
    "text": "so given some object put other put the properties and values",
    "start": "1033280",
    "end": "1040160"
  },
  {
    "text": "of another object into it so in here i've got my object",
    "start": "1040160",
    "end": "1046079"
  },
  {
    "text": "and i've got an empty object and i pass in my object along with it",
    "start": "1046079",
    "end": "1051679"
  },
  {
    "text": "and we get a new object",
    "start": "1051679",
    "end": "1057039"
  },
  {
    "text": "that has the copies of the first object with a new",
    "start": "1057039",
    "end": "1063840"
  },
  {
    "text": "value being added into it so when we've done the clone we do object assign we start with that empty",
    "start": "1063840",
    "end": "1069919"
  },
  {
    "text": "object this is the object we're going to put stuff into and then we're going to",
    "start": "1069919",
    "end": "1075360"
  },
  {
    "text": "copy those values whatever is on that other object that's what's visible from that object gets added onto this new",
    "start": "1075360",
    "end": "1082880"
  },
  {
    "text": "object which paves the way for merging objects",
    "start": "1082880",
    "end": "1089200"
  },
  {
    "text": "and that's object assign so we had object assign here with an empty now we have object assign with something",
    "start": "1090400",
    "end": "1096320"
  },
  {
    "text": "with some values in it so maybe you have two different data sources that have parts of a data structure",
    "start": "1096320",
    "end": "1103600"
  },
  {
    "text": "and you want to put those back together well object assign i have",
    "start": "1103600",
    "end": "1110640"
  },
  {
    "text": "core object properties like some user profile perhaps and then maybe some posts it's an array i can merge those",
    "start": "1110799",
    "end": "1117520"
  },
  {
    "text": "together easily through object design",
    "start": "1117520",
    "end": "1123480"
  },
  {
    "text": "and these are great like all of the things that we've talked about the hangout of object are great they're incredibly useful but in es6",
    "start": "1129120",
    "end": "1136640"
  },
  {
    "text": "we get yet another api that takes a lot of the lessons learned from those",
    "start": "1136640",
    "end": "1142280"
  },
  {
    "text": "object-based functions and gives us",
    "start": "1142280",
    "end": "1148160"
  },
  {
    "text": "some a bit more consistent interface if you will",
    "start": "1148160",
    "end": "1153840"
  },
  {
    "text": "and these are all defined in the reflect type so there's a lot of overlap between what",
    "start": "1153840",
    "end": "1161280"
  },
  {
    "text": "we've seen on the object functions and in reflect and in fact many of these",
    "start": "1161280",
    "end": "1166799"
  },
  {
    "text": "like the define property have the same signature they take the same parameter so if we",
    "start": "1166799",
    "end": "1172000"
  },
  {
    "text": "look at this instead of calling object defined property we're calling reflect depend define property we're telling it",
    "start": "1172000",
    "end": "1177600"
  },
  {
    "text": "what object to affect which one we're going to mutate what our new property is and then we",
    "start": "1177600",
    "end": "1183200"
  },
  {
    "text": "have that descriptor with our configurable true enumerable true and our value",
    "start": "1183200",
    "end": "1190320"
  },
  {
    "text": "and it does exactly the same thing but it does it in a little bit more consistent way it gives you uh that the",
    "start": "1190320",
    "end": "1196400"
  },
  {
    "text": "differences are really that i think and i kind of forget which one does which off the top of my head",
    "start": "1196400",
    "end": "1202960"
  },
  {
    "text": "one of them throws a type error the other doesn't i i meant to refresh my memory on that but",
    "start": "1202960",
    "end": "1209440"
  },
  {
    "text": "they behave differently and in a little bit more predictably as you're working with them",
    "start": "1209440",
    "end": "1214880"
  },
  {
    "text": "not and because i'm an es6 and these are available in es6 i tend to favor these over anything that",
    "start": "1214880",
    "end": "1220559"
  },
  {
    "text": "i saw and talked about on object",
    "start": "1220559",
    "end": "1224640"
  },
  {
    "text": "and so while object didn't have a delete features there's no object.delete",
    "start": "1229919",
    "end": "1237039"
  },
  {
    "text": "property there is a reflect delete property this behaves more consistently than the",
    "start": "1237039",
    "end": "1245039"
  },
  {
    "text": "delete keyword that we looked at before so if you need to remove a property reflect delete property will do that for you",
    "start": "1245039",
    "end": "1253360"
  },
  {
    "text": "reflect get reflect set so we're just looking at",
    "start": "1255600",
    "end": "1261440"
  },
  {
    "text": "the functions that control reading and writing to properties",
    "start": "1261440",
    "end": "1268399"
  },
  {
    "text": "i never use these they're kind of redundant now they tend to make code a little bit more",
    "start": "1268480",
    "end": "1273520"
  },
  {
    "text": "verbose because those they said it's javascript i can go and do a dot and an equal and and we accomplish the same",
    "start": "1273520",
    "end": "1281120"
  },
  {
    "text": "thing so i don't tend to to use these but they are there and it's nice to be aware of them",
    "start": "1281120",
    "end": "1288720"
  },
  {
    "text": "but enumerating properties remember our friend the in operator",
    "start": "1289280",
    "end": "1294640"
  },
  {
    "text": "this is the basis of how i write a lot of my introspective code",
    "start": "1294640",
    "end": "1300240"
  },
  {
    "text": "on my platform this serves a very similar purpose of in",
    "start": "1300240",
    "end": "1306000"
  },
  {
    "text": "except that it gives us an array of those properties so in here i've got",
    "start": "1306000",
    "end": "1312080"
  },
  {
    "text": "similar structure that we've seen before i did use the object version of define property here but reflect own keys",
    "start": "1312080",
    "end": "1319679"
  },
  {
    "text": "against my object gives us that array we don't have to do a for in to get these values anymore we just get",
    "start": "1319679",
    "end": "1326320"
  },
  {
    "text": "the array and if we have an array that means we can map against it we can reduce against",
    "start": "1326320",
    "end": "1333520"
  },
  {
    "text": "it we can filter against it that leads us into all sorts of composability possibilities",
    "start": "1333520",
    "end": "1340480"
  },
  {
    "text": "that can change the way that you structure your code",
    "start": "1340480",
    "end": "1345960"
  },
  {
    "text": "similarly within we have has so reflect has my object in the property name give",
    "start": "1346559",
    "end": "1352880"
  },
  {
    "text": "you a true or false",
    "start": "1352880",
    "end": "1356440"
  },
  {
    "text": "as i was saying we get into this composability so i have this function here this",
    "start": "1361840",
    "end": "1367840"
  },
  {
    "text": "is a very naive implementation for demonstration purposes only but",
    "start": "1367840",
    "end": "1374400"
  },
  {
    "text": "this is a way that we can start building some more generalized functions for handling validation",
    "start": "1374400",
    "end": "1381280"
  },
  {
    "text": "and keeping our logic separate from our data as a functional programmer i don't want",
    "start": "1381280",
    "end": "1387280"
  },
  {
    "text": "to merge functions and data in classes and all of",
    "start": "1387280",
    "end": "1392880"
  },
  {
    "text": "that pollution that comes with classes i want to keep these separate i want to treat data as data and functions",
    "start": "1392880",
    "end": "1398720"
  },
  {
    "text": "sometimes as data but usually independent of the models so in this i've got a",
    "start": "1398720",
    "end": "1404480"
  },
  {
    "text": "higher order function and that's that's important to that because this this leads again to composability so familiar",
    "start": "1404480",
    "end": "1410240"
  },
  {
    "text": "with higher order functions okay i don't see so there's a lot of hands that didn't go up so higher order",
    "start": "1410240",
    "end": "1415360"
  },
  {
    "text": "functions are functions that accept or return another function think filter think map",
    "start": "1415360",
    "end": "1421840"
  },
  {
    "text": "and think reduce the one function to rule them all pretty much everything that we have in",
    "start": "1422400",
    "end": "1430400"
  },
  {
    "text": "the in terms of these array functions whether it's map whether it's filter whether it's sort it's all a",
    "start": "1430400",
    "end": "1436080"
  },
  {
    "text": "reduce that's all it is they're specializations of reduce so",
    "start": "1436080",
    "end": "1441840"
  },
  {
    "text": "this function called validate model accepts a validation model which is just an object that has some",
    "start": "1441840",
    "end": "1448640"
  },
  {
    "text": "some properties but instead of having values of actual data values they have",
    "start": "1448640",
    "end": "1454480"
  },
  {
    "text": "functions as values and then it accepts the model that we want to validate",
    "start": "1454480",
    "end": "1461278"
  },
  {
    "text": "and we use reflect own keys against our validation model to know what properties we want to",
    "start": "1462640",
    "end": "1469120"
  },
  {
    "text": "validate and we reduce against those essentially looking to see if",
    "start": "1469120",
    "end": "1475600"
  },
  {
    "text": "the value in our model satisfies the predicate from the validation model",
    "start": "1475600",
    "end": "1482480"
  },
  {
    "text": "we'll see an example of this on the next slide if we have any failures we throw an error and and we don't proceed",
    "start": "1482480",
    "end": "1490799"
  },
  {
    "text": "otherwise we return the model so a helper function",
    "start": "1490799",
    "end": "1496080"
  },
  {
    "text": "and then an implementation now that higher order function comes in into play here so we're calling validate model and",
    "start": "1496080",
    "end": "1502240"
  },
  {
    "text": "we're passing in not the data that we want to validate",
    "start": "1502240",
    "end": "1507279"
  },
  {
    "text": "but the way we want to validate that data i've written that validate",
    "start": "1507279",
    "end": "1512960"
  },
  {
    "text": "model function exactly once because the act of validating something is almost always exactly the same thing",
    "start": "1512960",
    "end": "1520960"
  },
  {
    "text": "we know we have some rules that our data model needs to adhere to",
    "start": "1520960",
    "end": "1527200"
  },
  {
    "text": "in order to enter our system",
    "start": "1527200",
    "end": "1531520"
  },
  {
    "text": "so now i've codified the rules i have first name needs to be a non-empty string last name needs to be a",
    "start": "1532720",
    "end": "1539600"
  },
  {
    "text": "non-empty string and age needs to be a number so again naive simplistic but this is",
    "start": "1539600",
    "end": "1546720"
  },
  {
    "text": "the basis of of how i structure my code with and using these meta programming",
    "start": "1546720",
    "end": "1551919"
  },
  {
    "text": "techniques so what is the validate person model anybody",
    "start": "1551919",
    "end": "1558799"
  },
  {
    "text": "what what is the value of the validate person model at this point",
    "start": "1558799",
    "end": "1564158"
  },
  {
    "text": "it's a function okay because validation model goes to",
    "start": "1564720",
    "end": "1570159"
  },
  {
    "text": "model goes to so it's a function that still wants to accept our model",
    "start": "1570159",
    "end": "1575520"
  },
  {
    "text": "so we can invoke validate person model giving it our actual data model",
    "start": "1575520",
    "end": "1581919"
  },
  {
    "text": "first name satisfies is not empty string last name doesn't",
    "start": "1583440",
    "end": "1589919"
  },
  {
    "text": "and age is a string so it's going to fail and hence validation failures",
    "start": "1589919",
    "end": "1596400"
  },
  {
    "text": "are last name and age i can take code like this and hand it to a non-technical person and say are the",
    "start": "1596400",
    "end": "1602480"
  },
  {
    "text": "rules right and they can say if i've named things properly and understandably they can say yeah that",
    "start": "1602480",
    "end": "1609279"
  },
  {
    "text": "looks right or what are you thinking there's some power in that because the",
    "start": "1609279",
    "end": "1615039"
  },
  {
    "text": "code is now more expressive because we've abstracted away all of the extra stuff that we have to write",
    "start": "1615039",
    "end": "1621440"
  },
  {
    "text": "all the boilerplate stuff we have to write to express what rules are in our system we",
    "start": "1621440",
    "end": "1627679"
  },
  {
    "text": "now just have a list that follows the structure and we'll come back to this example a little bit later",
    "start": "1627679",
    "end": "1634080"
  },
  {
    "text": "oh actually i think i just jump into it now let's do that",
    "start": "1634080",
    "end": "1641000"
  },
  {
    "text": "switch this",
    "start": "1643279",
    "end": "1646320"
  },
  {
    "text": "okay nope yes all right let me blow that up",
    "start": "1652399",
    "end": "1660080"
  },
  {
    "text": "is that visible in the back all right cool thank you so this is an extension of that example",
    "start": "1660720",
    "end": "1668640"
  },
  {
    "text": "that we just saw the code is the same i added a couple of extra things into here so i'm using i'm in visual studio",
    "start": "1668640",
    "end": "1674240"
  },
  {
    "text": "code now and what i'm using to drive this is",
    "start": "1674240",
    "end": "1679760"
  },
  {
    "text": "a as an extension for vs code called quaka i know if you've heard about it but it's a fantastic tool it's",
    "start": "1679760",
    "end": "1684960"
  },
  {
    "text": "essentially a repo for javascript that gives you some additional testing capabilities and",
    "start": "1684960",
    "end": "1690399"
  },
  {
    "text": "just an all-around really useful tool so we've already looked at the validate",
    "start": "1690399",
    "end": "1695760"
  },
  {
    "text": "model this is again the same code as before but we can apply the same concepts to",
    "start": "1695760",
    "end": "1701760"
  },
  {
    "text": "transforming our data so say that we have a a web page somewhere somebody's filled out",
    "start": "1701760",
    "end": "1707760"
  },
  {
    "text": "a form and the browser provides the data in one structure but we want to",
    "start": "1707760",
    "end": "1713840"
  },
  {
    "text": "transform it to a different structure we can use these reflection techniques in a very similar manner to what we just",
    "start": "1713840",
    "end": "1720559"
  },
  {
    "text": "saw with validation to do the transformation as well",
    "start": "1720559",
    "end": "1725840"
  },
  {
    "text": "so this particular function transform model i'm sorry yes so transform model they're starting",
    "start": "1726720",
    "end": "1734000"
  },
  {
    "text": "to see a pattern here we have transformation model goes to model goes to reflect",
    "start": "1734000",
    "end": "1739520"
  },
  {
    "text": "this time we're reflecting on the transformation model and we're",
    "start": "1739520",
    "end": "1745200"
  },
  {
    "text": "reducing against those keys so if i've defined a key on the",
    "start": "1745200",
    "end": "1750480"
  },
  {
    "text": "transformation model it will appear in the target the new newly transformed",
    "start": "1750480",
    "end": "1756799"
  },
  {
    "text": "model so we're going to project our model from one structure to another",
    "start": "1756799",
    "end": "1763519"
  },
  {
    "text": "and the body of that is get the transformer get the source value define a property",
    "start": "1764159",
    "end": "1770000"
  },
  {
    "text": "on the target model just iterate over those through reduce",
    "start": "1770000",
    "end": "1775279"
  },
  {
    "text": "as reduce does and return it so then i get two",
    "start": "1775279",
    "end": "1780960"
  },
  {
    "text": "functions below i do a i define a function validate user model which hey",
    "start": "1780960",
    "end": "1786399"
  },
  {
    "text": "that looks familiar i changed it from age but it's uh it's birth date now and we have transform user model",
    "start": "1786399",
    "end": "1795360"
  },
  {
    "text": "there's a theme here i have first name last name birthday age and what do they take what are their",
    "start": "1795360",
    "end": "1801200"
  },
  {
    "text": "prop their values their functions in this case the value so as we try to",
    "start": "1801200",
    "end": "1808960"
  },
  {
    "text": "read a value with the same name off of the input model",
    "start": "1808960",
    "end": "1815120"
  },
  {
    "text": "we put pass it in as value and we also provide the source model in",
    "start": "1815120",
    "end": "1820720"
  },
  {
    "text": "case we want to have something else from that source model available in our transformation",
    "start": "1820720",
    "end": "1828720"
  },
  {
    "text": "when we see the code in a minute that runs these two together we do the validation before we do the",
    "start": "1829840",
    "end": "1834960"
  },
  {
    "text": "transformation so we know what if we meet our validation rules we know that we're in a structure that",
    "start": "1834960",
    "end": "1840559"
  },
  {
    "text": "we can transfer that's safe to transform and then we can apply the transformation",
    "start": "1840559",
    "end": "1845919"
  },
  {
    "text": "so now transform model first name oh we're just trimming it we already know we've got a string because it passed validation so we can just trim it",
    "start": "1845919",
    "end": "1853039"
  },
  {
    "text": "last name okay trim it and go to uppercase because arbitrary reasons",
    "start": "1853039",
    "end": "1859039"
  },
  {
    "text": "birth date we can convert to a date and we can take the format if it was in one format we can translate it to another",
    "start": "1859039",
    "end": "1864559"
  },
  {
    "text": "that's all i'm doing there and oh why not let's just calculate the age too while we're at it",
    "start": "1864559",
    "end": "1871039"
  },
  {
    "text": "so we don't have on our user model a first name property a last name",
    "start": "1871039",
    "end": "1876640"
  },
  {
    "text": "property or an age property we do have fnamelname and birthdate",
    "start": "1876640",
    "end": "1883679"
  },
  {
    "text": "so we can see the validated model is what we saw before and transformed model takes that",
    "start": "1883919",
    "end": "1889200"
  },
  {
    "text": "validated model and applies the transformations i'm going to run this",
    "start": "1889200",
    "end": "1895600"
  },
  {
    "text": "and we'll see in the output window",
    "start": "1897039",
    "end": "1900240"
  },
  {
    "text": "the top group here is the result of our validation",
    "start": "1902640",
    "end": "1910080"
  },
  {
    "text": "and then the bottom object is a result of our transformation",
    "start": "1910080",
    "end": "1916960"
  },
  {
    "text": "does that make sense okay i'm going to jump back over to",
    "start": "1918399",
    "end": "1924320"
  },
  {
    "text": "these slides for a bit",
    "start": "1924320",
    "end": "1927278"
  },
  {
    "text": "all right",
    "start": "1931200",
    "end": "1934278"
  },
  {
    "text": "hello",
    "start": "1937679",
    "end": "1940158"
  },
  {
    "text": "okay apparently uh the presentation and the display got out",
    "start": "1944880",
    "end": "1950240"
  },
  {
    "text": "of sync when i did that all right there we go so who has encountered symbols in",
    "start": "1950240",
    "end": "1956720"
  },
  {
    "text": "javascript okay only a handful so guy doesn't count",
    "start": "1956720",
    "end": "1963840"
  },
  {
    "text": "symbols are one of my favorite things in es6",
    "start": "1965679",
    "end": "1970799"
  },
  {
    "text": "so what symbols allow us to do is define a they're they are a guaranteed unique",
    "start": "1970799",
    "end": "1978399"
  },
  {
    "text": "value let's start there so you are not going to have a collision",
    "start": "1978399",
    "end": "1983679"
  },
  {
    "text": "with something else naming something the same way because every time you create a symbol it's",
    "start": "1983679",
    "end": "1990480"
  },
  {
    "text": "unique to javascript to that to that instance in that environment right",
    "start": "1990480",
    "end": "1996320"
  },
  {
    "text": "they are intended as extension points essentially so you hear things you know prototype",
    "start": "1996720",
    "end": "2003200"
  },
  {
    "text": "pollution evil right well and i think back on my time in",
    "start": "2003200",
    "end": "2009360"
  },
  {
    "text": "in earlier days of javascript and well no don't extend certain things because",
    "start": "2009360",
    "end": "2014640"
  },
  {
    "text": "you're going to have a collision with some other proper or some other library is going to name something the same way and everything is going to step on each",
    "start": "2014640",
    "end": "2020480"
  },
  {
    "text": "other and the last one in wins symbols work around that problem",
    "start": "2020480",
    "end": "2025519"
  },
  {
    "text": "so we can attach we can define a symbol and attach it to an object",
    "start": "2025519",
    "end": "2030880"
  },
  {
    "text": "and then we have a safe extension point on that object",
    "start": "2030880",
    "end": "2036480"
  },
  {
    "text": "so in this case say we just do symbol it's a function not a constructor we can pass in an optional label helps",
    "start": "2036480",
    "end": "2043679"
  },
  {
    "text": "identifying it in the debugger that's about all it does uh kind of lets you differentiate as you're",
    "start": "2043679",
    "end": "2050000"
  },
  {
    "text": "as writing things out in in console and look watching its",
    "start": "2050000",
    "end": "2055358"
  },
  {
    "text": "various traces and and whatnot it does carry that description with it but that's about the only value that",
    "start": "2055359",
    "end": "2061358"
  },
  {
    "text": "that serves but it's generally nice to attach it just so you know what you're looking at in the code",
    "start": "2061359",
    "end": "2067440"
  },
  {
    "text": "and there's the global symbol repository i believe that's what it's called",
    "start": "2067919",
    "end": "2073599"
  },
  {
    "text": "where you can register symbols to be shared more commonly across code so then there's a",
    "start": "2073599",
    "end": "2080240"
  },
  {
    "text": "there's a use case for that that we'll get to in a little bit uh so when we can define our own global symbols we can toss our own symbols into",
    "start": "2080240",
    "end": "2087440"
  },
  {
    "text": "yeah into the repository so this one i'm calling symbol four this is the the four",
    "start": "2087440",
    "end": "2093118"
  },
  {
    "text": "function puts that in the repository and if i do a",
    "start": "2093119",
    "end": "2098400"
  },
  {
    "text": "comparison if i say global symbol which i've just defined is actually equal to",
    "start": "2098400",
    "end": "2103599"
  },
  {
    "text": "the one that's in the repository if you were to have something else you just do symbol without calling for",
    "start": "2103599",
    "end": "2109280"
  },
  {
    "text": "and go my global symbol that is not the same symbol every call to symbol gives you a new symbol",
    "start": "2109280",
    "end": "2117000"
  },
  {
    "text": "so simple case for using these define a symbol which i'm just labeling",
    "start": "2120400",
    "end": "2125440"
  },
  {
    "text": "as greet and i have a function called say hello",
    "start": "2125440",
    "end": "2132319"
  },
  {
    "text": "i'm going to attach say hello to an object with a bracket syntax",
    "start": "2132720",
    "end": "2139200"
  },
  {
    "text": "because it's a it's an expression value it's not a it's not just a name it's actually",
    "start": "2139200",
    "end": "2144400"
  },
  {
    "text": "the key is the symbol and then we can invoke that function",
    "start": "2144400",
    "end": "2151040"
  },
  {
    "text": "as we would any as we would reference anything else more dynamically just put it in brackets make it look like an",
    "start": "2151040",
    "end": "2157119"
  },
  {
    "text": "array this case isn't really all that practical just to shows how you can",
    "start": "2157119",
    "end": "2163280"
  },
  {
    "text": "attach one of the ways you can attach a symbol and and what the symbol is useful for",
    "start": "2163280",
    "end": "2170000"
  },
  {
    "text": "but they are an integral part of modern javascript because there's a whole series of what are called",
    "start": "2170480",
    "end": "2176000"
  },
  {
    "text": "well-known symbols and these well-known symbols are for the dot-net programmers in the",
    "start": "2176000",
    "end": "2182400"
  },
  {
    "text": "room very very conceptually similar in use to how a lot of the built-in.net",
    "start": "2182400",
    "end": "2189200"
  },
  {
    "text": "interfaces are because they drive a lot of the the syntactic sugar",
    "start": "2189200",
    "end": "2196320"
  },
  {
    "text": "things like modern in are driven by symbols and you can customize how your",
    "start": "2196320",
    "end": "2202480"
  },
  {
    "text": "objects behave with things like split and search",
    "start": "2202480",
    "end": "2207760"
  },
  {
    "text": "by tapping into the well-known symbols that the modern javascript runtimes know",
    "start": "2207760",
    "end": "2214240"
  },
  {
    "text": "about in this case i'm using the well-known symbol which is",
    "start": "2214240",
    "end": "2220000"
  },
  {
    "text": "exposed as a as a static property of the symbol type it's called",
    "start": "2220000",
    "end": "2226640"
  },
  {
    "text": "two string tag how many times are you debugging something and you see object object",
    "start": "2226640",
    "end": "2232480"
  },
  {
    "text": "and say wow thanks a lot javascript i'm glad you know what that is",
    "start": "2232480",
    "end": "2238079"
  },
  {
    "text": "tostring tag is one of those well-known symbols that is actually understood",
    "start": "2238480",
    "end": "2244560"
  },
  {
    "text": "inside of the javascript runtime that controls how that string is constructed so",
    "start": "2244560",
    "end": "2251520"
  },
  {
    "text": "instead of object object i'm attaching symbol to string tag",
    "start": "2251520",
    "end": "2257440"
  },
  {
    "text": "through reflect define property to my object and the get this is part of that",
    "start": "2257440",
    "end": "2262960"
  },
  {
    "text": "descriptor for that property the get function returns just",
    "start": "2262960",
    "end": "2268000"
  },
  {
    "text": "the interpolated version of two of the properties so instead of object object i get object with my name in quotes",
    "start": "2268000",
    "end": "2276480"
  },
  {
    "text": "that's more useful than object object now i'm able to make more sense of the code i know exactly what i'm working",
    "start": "2276480",
    "end": "2281520"
  },
  {
    "text": "with and all it did was take attaching a symbol to it",
    "start": "2281520",
    "end": "2286799"
  },
  {
    "text": "so one of the things i really like to do is abuse language features",
    "start": "2296839",
    "end": "2302800"
  },
  {
    "text": "i never i have i've yet to find a language feature that i didn't like to abuse symbols are one of",
    "start": "2303280",
    "end": "2309680"
  },
  {
    "text": "them and did anybody go to mark seaman's talk",
    "start": "2309680",
    "end": "2316160"
  },
  {
    "text": "yesterday so mark seaman talked about",
    "start": "2316160",
    "end": "2321520"
  },
  {
    "text": "fractal architectures and trying to keep your construct your code in such a way",
    "start": "2321520",
    "end": "2327599"
  },
  {
    "text": "that you limit the complexity of your functions to",
    "start": "2327599",
    "end": "2333599"
  },
  {
    "text": "essentially what the typical human can keep in their head so the usual the mantra of",
    "start": "2333599",
    "end": "2340480"
  },
  {
    "text": "seven plus or minus two right well as we start building out our systems and they become",
    "start": "2340480",
    "end": "2346720"
  },
  {
    "text": "more complex it's nice to be able to reduce that surface area and i think symbols",
    "start": "2346720",
    "end": "2352160"
  },
  {
    "text": "in javascript are a great way to do that so take this function another higher",
    "start": "2352160",
    "end": "2358800"
  },
  {
    "text": "order function attach symbol accepts a target and a function and then",
    "start": "2358800",
    "end": "2364400"
  },
  {
    "text": "it returns a function that accepts a function that does something returns a",
    "start": "2364400",
    "end": "2369839"
  },
  {
    "text": "symbol we create our symbol we attach it to",
    "start": "2369839",
    "end": "2375839"
  },
  {
    "text": "our target object through reflect defined property it's not enumerable",
    "start": "2375839",
    "end": "2381040"
  },
  {
    "text": "it's not writable not configurable but the value is just that function",
    "start": "2381040",
    "end": "2388320"
  },
  {
    "text": "so just like what we did back here we're just doing this as a",
    "start": "2388320",
    "end": "2394560"
  },
  {
    "text": "function so we can start attaching symbols that are just defined as we need",
    "start": "2394560",
    "end": "2399599"
  },
  {
    "text": "them and we'll return that symbol so now we have a reference to that symbol",
    "start": "2399599",
    "end": "2406560"
  },
  {
    "text": "which allows us to do things like create a function called attach symbol to object prototype",
    "start": "2407119",
    "end": "2413200"
  },
  {
    "text": "which the target is object prototype and because everything comes from object",
    "start": "2413200",
    "end": "2419040"
  },
  {
    "text": "prototype we can make things more generally available throughout all of the objects in our system",
    "start": "2419040",
    "end": "2424800"
  },
  {
    "text": "and from my functional programming background i like the pipe",
    "start": "2424800",
    "end": "2431200"
  },
  {
    "text": "oh i like functional pipelining i want to take",
    "start": "2431200",
    "end": "2438079"
  },
  {
    "text": "a value and let it flow into a function and let the output of that function flow",
    "start": "2438079",
    "end": "2443119"
  },
  {
    "text": "into the next function and so on i don't want to write code where i have to name variables",
    "start": "2443119",
    "end": "2449920"
  },
  {
    "text": "or constants that have a life cycle or a lifespan of one line of code because that's something else to keep track of",
    "start": "2449920",
    "end": "2457920"
  },
  {
    "text": "so i can just i can attach a symbol to the object prototype i'm going to call that symbol pipe and refer to that",
    "start": "2459040",
    "end": "2465440"
  },
  {
    "text": "as pipe throughout my code it's pretty simple now it's a function",
    "start": "2465440",
    "end": "2471440"
  },
  {
    "text": "that takes a function and returns the result of applying whatever object",
    "start": "2471440",
    "end": "2476640"
  },
  {
    "text": "has been extended where pipe was originated applying the function to that",
    "start": "2476640",
    "end": "2484000"
  },
  {
    "text": "any ideas why i'm using the function the classic function syntax",
    "start": "2484800",
    "end": "2489920"
  },
  {
    "text": "here instead of arrow functions sorry",
    "start": "2489920",
    "end": "2496319"
  },
  {
    "text": "this exactly this is the one place i use a classic function extension uh or use a classic",
    "start": "2496319",
    "end": "2502560"
  },
  {
    "text": "function like in in most of my code i avoid",
    "start": "2502560",
    "end": "2507680"
  },
  {
    "text": "any type of of scoped functions because that just leads to temptation of",
    "start": "2507680",
    "end": "2514400"
  },
  {
    "text": "writing code that is deep that has implicit external dependencies and and i don't want that as a functional",
    "start": "2514560",
    "end": "2520079"
  },
  {
    "text": "programmer i want my function to be given directly and explicitly everything it needs to do its job and give me a",
    "start": "2520079",
    "end": "2527200"
  },
  {
    "text": "value back in a predictable manner",
    "start": "2527200",
    "end": "2532078"
  },
  {
    "text": "so here as i attach that symbol now i have my object pipe was already attached to object",
    "start": "2532560",
    "end": "2539359"
  },
  {
    "text": "prototype so as it tries to resolve that name it's going to go up the tree up the prototype chain it's going to find that",
    "start": "2539359",
    "end": "2544880"
  },
  {
    "text": "symbol and i'm passing a function in which does some transformations",
    "start": "2544880",
    "end": "2550720"
  },
  {
    "text": "and this is essentially writing a log message but i don't have to keep track of that",
    "start": "2550720",
    "end": "2557760"
  },
  {
    "text": "intermediate stage because i know what my input is i know what my transformation is i can",
    "start": "2557760",
    "end": "2564480"
  },
  {
    "text": "transform it again and i can transform it again and it's just a step of operations and there's no capturing",
    "start": "2564480",
    "end": "2569520"
  },
  {
    "text": "variables because we already have a variable defined for these things right it's not on the screen",
    "start": "2569520",
    "end": "2576078"
  },
  {
    "text": "but this is the variable what we would put it in so we just let it flow into the next part of the chain",
    "start": "2576240",
    "end": "2584000"
  },
  {
    "text": "it reduces that surface area",
    "start": "2584480",
    "end": "2589720"
  },
  {
    "text": "okay so if we go back to vs code what am i doing on time we're",
    "start": "2593040",
    "end": "2599280"
  },
  {
    "text": "doing right pretty good it looks like let me go back to vs code and we'll revisit that last example",
    "start": "2599280",
    "end": "2607839"
  },
  {
    "text": "so that example we just looked at with transforming and",
    "start": "2613040",
    "end": "2620319"
  },
  {
    "text": "validation we have our validated model which gets the",
    "start": "2620319",
    "end": "2626160"
  },
  {
    "text": "result of validate user model and we have transformed model which we could then which gets the results of transforming the model and so on",
    "start": "2626160",
    "end": "2633359"
  },
  {
    "text": "by applying that function",
    "start": "2633359",
    "end": "2638960"
  },
  {
    "text": "extending object prototype with that symbol",
    "start": "2638960",
    "end": "2644079"
  },
  {
    "text": "we get rid of a lot of those extra variables and things we have less to keep track of and again we've got us",
    "start": "2645040",
    "end": "2650560"
  },
  {
    "text": "just a checklist of things the series of steps that our code is running through",
    "start": "2650560",
    "end": "2655920"
  },
  {
    "text": "we still have variables and parameters in place but it's allowing us to",
    "start": "2655920",
    "end": "2663200"
  },
  {
    "text": "define things in a way that is a natural flow",
    "start": "2663200",
    "end": "2668000"
  },
  {
    "text": "and nothing in here is is non-standard javascript like this symbols are part of es6 right",
    "start": "2668560",
    "end": "2674480"
  },
  {
    "text": "all of the reflection capabilities we didn't bring we didn't use npm to bring anything in those are all things that are just natively part of",
    "start": "2674480",
    "end": "2681760"
  },
  {
    "text": "javascript reflect own keys gives us that ability to look inside of",
    "start": "2681760",
    "end": "2688720"
  },
  {
    "text": "our objects and see what is there and apply",
    "start": "2688720",
    "end": "2694800"
  },
  {
    "text": "operations to either those keys directly or obtain the values related to those",
    "start": "2694800",
    "end": "2701200"
  },
  {
    "text": "we do that same thing over and over and over then that's half of what programming is it feels like we get some",
    "start": "2701200",
    "end": "2707359"
  },
  {
    "text": "value we got to do something with it right this allows us to get those generalizations and we know that we're",
    "start": "2707359",
    "end": "2713520"
  },
  {
    "text": "applying things in consistent manner",
    "start": "2713520",
    "end": "2717960"
  },
  {
    "text": "okay all right let's see if i can do this and",
    "start": "2718720",
    "end": "2724800"
  },
  {
    "text": "not have it lose my state",
    "start": "2724800",
    "end": "2728680"
  },
  {
    "text": "there we go okay so that's largely the reflection and",
    "start": "2736240",
    "end": "2741599"
  },
  {
    "text": "introspection part but then we have the third part of the metadata triangle and that's",
    "start": "2741599",
    "end": "2747359"
  },
  {
    "text": "intercession so intercession is where",
    "start": "2747359",
    "end": "2753680"
  },
  {
    "text": "while reflection is acting upon",
    "start": "2753680",
    "end": "2758880"
  },
  {
    "text": "the data and understanding the structure and and working with that structure intercession",
    "start": "2758880",
    "end": "2765040"
  },
  {
    "text": "is actually intercepting behavior and doing and manipulating the built-in",
    "start": "2765040",
    "end": "2770880"
  },
  {
    "text": "behavior uh before es6 there really wasn't a",
    "start": "2770880",
    "end": "2777440"
  },
  {
    "text": "whole lot of capability for this but es6 gives us a little bit more",
    "start": "2777440",
    "end": "2784000"
  },
  {
    "text": "capabilities here i actually should have just stayed in vs code i was thinking i had another slide so",
    "start": "2784000",
    "end": "2790000"
  },
  {
    "text": "the es6 gives us some additional capabilities and we've",
    "start": "2790000",
    "end": "2796079"
  },
  {
    "text": "seen some of this and i forgot to extend what's going on come on duplicate there sorry about that",
    "start": "2796079",
    "end": "2803838"
  },
  {
    "text": "so object defined property gives us some of that intercession capability we saw a",
    "start": "2804240",
    "end": "2809359"
  },
  {
    "text": "hint of it earlier when we saw get on something when we define a property",
    "start": "2809359",
    "end": "2815760"
  },
  {
    "text": "using define property that's the reason i like to use define property instead of just saying dot some new",
    "start": "2815760",
    "end": "2822240"
  },
  {
    "text": "identifier because we can control those aspects we've talked about enumerable but get is",
    "start": "2822240",
    "end": "2829680"
  },
  {
    "text": "when we read a value what happens normally it just gives you the value back",
    "start": "2829680",
    "end": "2835599"
  },
  {
    "text": "if it has it or it gives you undefined what happens when you call when you try",
    "start": "2835599",
    "end": "2840720"
  },
  {
    "text": "to set a value well normally it's just going to put it in the dictionary or update whatever is already there",
    "start": "2840720",
    "end": "2847359"
  },
  {
    "text": "but through define property we can define get and",
    "start": "2847359",
    "end": "2852400"
  },
  {
    "text": "set and control what that behavior actually does",
    "start": "2852400",
    "end": "2858200"
  },
  {
    "text": "so in this case i've got a object function called audited object",
    "start": "2862960",
    "end": "2868720"
  },
  {
    "text": "inside of that function it's tracking a context and a log so what this is doing",
    "start": "2869440",
    "end": "2874480"
  },
  {
    "text": "based on its name oh we're going to apply some auditing here i want to know when people read",
    "start": "2874480",
    "end": "2881200"
  },
  {
    "text": "a value or write a value and you could redirect this as you would see fit in your code i'm doing console",
    "start": "2881200",
    "end": "2887520"
  },
  {
    "text": "log for demonstration purposes we can see when we get a value from an audited object",
    "start": "2887520",
    "end": "2896160"
  },
  {
    "text": "we'll log out getting context first name and then we'll return the value of first",
    "start": "2896160",
    "end": "2901760"
  },
  {
    "text": "name from that context object likewise when we set it we provide the",
    "start": "2901760",
    "end": "2907359"
  },
  {
    "text": "value you see here we log out that we're changing that",
    "start": "2907359",
    "end": "2912480"
  },
  {
    "text": "value we set it on the context and then we push that change to our log",
    "start": "2912480",
    "end": "2918160"
  },
  {
    "text": "so not only have we written out to the console log we're managing a",
    "start": "2918160",
    "end": "2923599"
  },
  {
    "text": "history of what those changes were i think that's pretty common",
    "start": "2923599",
    "end": "2929838"
  },
  {
    "text": "so i defined that as first name and then i defined it very similarly on last name",
    "start": "2932720",
    "end": "2939359"
  },
  {
    "text": "and then i defined a property called history again against this",
    "start": "2940640",
    "end": "2947280"
  },
  {
    "text": "and here we only have git we don't allow setting history because what good is is history if you can rewrite it",
    "start": "2947280",
    "end": "2956359"
  },
  {
    "text": "so that we can create an instance of the audited object and i'll run this in a moment so we can see it we can write out",
    "start": "2960480",
    "end": "2965520"
  },
  {
    "text": "we can get the history and this is the i meant to mention this earlier the slashes and the question mark is quacka",
    "start": "2965520",
    "end": "2971920"
  },
  {
    "text": "and how it will automatically log things out when we run it we can see what we call",
    "start": "2971920",
    "end": "2977119"
  },
  {
    "text": "uh where we set the first name and the last name we write them out and so we're going to see a bunch of logging that goes along with this",
    "start": "2977119",
    "end": "2985839"
  },
  {
    "text": "so let me do this run once",
    "start": "2985839",
    "end": "2992558"
  },
  {
    "text": "so we got a bunch of things written out to the console on that one just as we expected as we defined on the",
    "start": "2995680",
    "end": "3003520"
  },
  {
    "text": "get and set for each of those associated properties",
    "start": "3003520",
    "end": "3008640"
  },
  {
    "text": "setting context setting context getting context",
    "start": "3009040",
    "end": "3014640"
  },
  {
    "text": "wrote it out and here's the history so we can see all",
    "start": "3014640",
    "end": "3021680"
  },
  {
    "text": "these changes that we've made that we've captured as we've as the code was executing",
    "start": "3021680",
    "end": "3027280"
  },
  {
    "text": "and so on and we can see every single thing we did to it was written to the logs",
    "start": "3027280",
    "end": "3034000"
  },
  {
    "text": "and this would be powerful but do you really want to write this over",
    "start": "3034319",
    "end": "3041280"
  },
  {
    "text": "and over and over and over for every property because i don't i would never do it this way oh",
    "start": "3041280",
    "end": "3049200"
  },
  {
    "text": "but when you're doing diff when you're doing defined property you get that flexibility but",
    "start": "3049200",
    "end": "3055280"
  },
  {
    "text": "it's really cumbersome to to manage over time so that's where es6",
    "start": "3055280",
    "end": "3062559"
  },
  {
    "text": "gives us the proxy object proxy object and remember i talked about",
    "start": "3062559",
    "end": "3069119"
  },
  {
    "text": "consistency in interfaces earlier es6",
    "start": "3069119",
    "end": "3075440"
  },
  {
    "text": "gives us the reflect type and it gives us the proxy type and they have exactly the same structure",
    "start": "3075440",
    "end": "3082800"
  },
  {
    "text": "they have different different intentions behind them but there's a one-to-one relationship",
    "start": "3082800",
    "end": "3087839"
  },
  {
    "text": "between the functions on reflect and the functions on proxy",
    "start": "3087839",
    "end": "3094960"
  },
  {
    "text": "where on the reflection side it's about looking and controlling what the objects",
    "start": "3094960",
    "end": "3100079"
  },
  {
    "text": "are whereas on the proxy side it's about hooking into those behaviors so if you",
    "start": "3100079",
    "end": "3106000"
  },
  {
    "text": "were trying to call set you may control what set does",
    "start": "3106000",
    "end": "3111838"
  },
  {
    "text": "in in the classic way with setting get and set but you don't really get into some of the the other",
    "start": "3112559",
    "end": "3118000"
  },
  {
    "text": "capabilities that the proxy can give you",
    "start": "3118000",
    "end": "3123520"
  },
  {
    "text": "and the thing about proxy is that it just it does what it sounds like it does it wraps up an object",
    "start": "3123520",
    "end": "3131119"
  },
  {
    "text": "and it hooks into those things as you provide those particular properties to hook into",
    "start": "3131119",
    "end": "3137280"
  },
  {
    "text": "so where we had to in the previous example define a getter and a setter on basically",
    "start": "3137280",
    "end": "3142640"
  },
  {
    "text": "everything we wanted to put on there now with a proxy we can define it more generally",
    "start": "3142640",
    "end": "3149440"
  },
  {
    "text": "so now i have const audit object and it gets an object and we still have the log that we were seeing before",
    "start": "3149440",
    "end": "3156240"
  },
  {
    "text": "but instead of returning a constructed object",
    "start": "3156240",
    "end": "3162240"
  },
  {
    "text": "we return a constructed proxy object and we provide an initializer to the",
    "start": "3162240",
    "end": "3169440"
  },
  {
    "text": "proxy so we provide the object that we want to proxy so whatever we want to to",
    "start": "3169440",
    "end": "3175119"
  },
  {
    "text": "monitor intercept the behavior of we provide that object and then we provide",
    "start": "3175119",
    "end": "3181839"
  },
  {
    "text": "get set and there's a whole series of these again they correlate directly to what is available through",
    "start": "3181839",
    "end": "3188000"
  },
  {
    "text": "uh through the reflect so if we wanted to intercept defining a property or removing a property we could do that",
    "start": "3188000",
    "end": "3195839"
  },
  {
    "text": "so here get takes the target and the key set takes a target and a key and the",
    "start": "3196800",
    "end": "3202720"
  },
  {
    "text": "value right pretty self-explanatory it's exactly what you would expect for those behaviors",
    "start": "3202720",
    "end": "3208640"
  },
  {
    "text": "and we do basically the same thing now one of the things that i think is really nice and and they did a good job with",
    "start": "3208640",
    "end": "3213839"
  },
  {
    "text": "implementation on is proxy knows what object it's proxying",
    "start": "3213839",
    "end": "3220960"
  },
  {
    "text": "and it's not and so there's a potential for a little bit of an infinite loop because if i'm going to intercept the",
    "start": "3220960",
    "end": "3226400"
  },
  {
    "text": "behavior on an object and you then go and do perform that behavior on the object",
    "start": "3226400",
    "end": "3231520"
  },
  {
    "text": "it knows that it's already doing it on that object so it's not going to just keep cycling through it so",
    "start": "3231520",
    "end": "3237680"
  },
  {
    "text": "we're going to extend this which then becomes the tar so the object that we're passing in is essentially the target on each of",
    "start": "3237680",
    "end": "3244400"
  },
  {
    "text": "these and so these functions as they run they're going to operate against the",
    "start": "3244400",
    "end": "3249520"
  },
  {
    "text": "object but in that context and so they you won't get caught in any of those vicious",
    "start": "3249520",
    "end": "3256240"
  },
  {
    "text": "cycles in this case we detect what property we're trying to",
    "start": "3256240",
    "end": "3263440"
  },
  {
    "text": "set and whereas in our previous example we specifically defined a history property",
    "start": "3263440",
    "end": "3269200"
  },
  {
    "text": "well we don't have to define the history property here because it's doesn't exist at all it's just a proxy",
    "start": "3269200",
    "end": "3275440"
  },
  {
    "text": "we're faking it so if somebody tries to set the history object",
    "start": "3275440",
    "end": "3280960"
  },
  {
    "text": "we're going to say you can't rewrite it otherwise we're going to do exactly what we did on everything so now we have arbitrary extension and it doesn't",
    "start": "3280960",
    "end": "3287520"
  },
  {
    "text": "matter how many properties we want on there or what those properties are this",
    "start": "3287520",
    "end": "3292559"
  },
  {
    "text": "behavior whether it's get or set is going to kick in for all of them just by the nature of that proxy",
    "start": "3292559",
    "end": "3300160"
  },
  {
    "text": "and using that object is essentially the same as what we had before so i've got audit objects and i'm wrapping up just",
    "start": "3302079",
    "end": "3307359"
  },
  {
    "text": "an empty object we'll try to get the history we'll do the first name we'll do the last name we'll write it out same",
    "start": "3307359",
    "end": "3312559"
  },
  {
    "text": "steps as we had before",
    "start": "3312559",
    "end": "3316280"
  },
  {
    "text": "getting history from target it's empty setting first name setting last name getting first name",
    "start": "3323119",
    "end": "3328799"
  },
  {
    "text": "and if i scroll down here well now age undefined",
    "start": "3328799",
    "end": "3334880"
  },
  {
    "text": "where'd i get there getting age from target well it was undefined we see that here",
    "start": "3334880",
    "end": "3340000"
  },
  {
    "text": "so then but we still captured it we don't have an age on our object we didn't define it before",
    "start": "3340000",
    "end": "3346160"
  },
  {
    "text": "we've defined it now so we can set a value on it but it wasn't there before but yet we still got the behavior",
    "start": "3346160",
    "end": "3354000"
  },
  {
    "text": "of getting age from target and setting age on target",
    "start": "3354000",
    "end": "3359359"
  },
  {
    "text": "because the pro the proxy handled all of that for us",
    "start": "3359359",
    "end": "3364640"
  },
  {
    "text": "yeah so one final example here using the proxy",
    "start": "3373200",
    "end": "3379680"
  },
  {
    "text": "is i mentioned we can look at other behaviors so similar type of of example",
    "start": "3379680",
    "end": "3386640"
  },
  {
    "text": "but now oops we're hooking into delete property and",
    "start": "3386640",
    "end": "3392240"
  },
  {
    "text": "has so just like we looked at on reflect earlier where we can reflect delete property or reflect has we can proxy",
    "start": "3392240",
    "end": "3400720"
  },
  {
    "text": "delete property and proxy has",
    "start": "3400720",
    "end": "3405400"
  },
  {
    "text": "and run that again notice here",
    "start": "3407440",
    "end": "3413520"
  },
  {
    "text": "we set first name we set last name so we see that behavior",
    "start": "3413520",
    "end": "3420319"
  },
  {
    "text": "scroll these a little bit we set first name",
    "start": "3420319",
    "end": "3425599"
  },
  {
    "text": "and we set last name get first name get last name now scroll through a little further let's go find",
    "start": "3425599",
    "end": "3431680"
  },
  {
    "text": "it in here that reflects delete property",
    "start": "3431680",
    "end": "3436880"
  },
  {
    "text": "and now there is a delete property in here and we can see deleting age from",
    "start": "3438640",
    "end": "3445280"
  },
  {
    "text": "target and we have a series of has",
    "start": "3445280",
    "end": "3450319"
  },
  {
    "text": "looking for first name oh it found it looking for history found it looking for",
    "start": "3450319",
    "end": "3457599"
  },
  {
    "text": "middle name didn't find it because we never defined it to begin with",
    "start": "3457599",
    "end": "3464318"
  },
  {
    "text": "so code generation not so useful in javascript",
    "start": "3464640",
    "end": "3470960"
  },
  {
    "text": "reflection introspection incredibly useful in javascript and proxy depending",
    "start": "3470960",
    "end": "3476079"
  },
  {
    "text": "on your needs could be useful in your projects so",
    "start": "3476079",
    "end": "3481200"
  },
  {
    "text": "i want to thank you all for your time i hope you found this useful and interesting even if you don't",
    "start": "3481200",
    "end": "3486319"
  },
  {
    "text": "take it right away i think that javascript has has definitely come a long way in these capabilities i know",
    "start": "3486319",
    "end": "3492000"
  },
  {
    "text": "that they have certainly changed my opinion of javascript in the number of years uh definitely has",
    "start": "3492000",
    "end": "3498640"
  },
  {
    "text": "matured as a language and i think this has a lot to do with it so i thank you for your time and please enjoy the rest",
    "start": "3498640",
    "end": "3503839"
  },
  {
    "text": "of the conference",
    "start": "3503839",
    "end": "3507000"
  }
]