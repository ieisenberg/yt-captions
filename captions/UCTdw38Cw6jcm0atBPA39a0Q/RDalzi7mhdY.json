[
  {
    "start": "0",
    "end": "107000"
  },
  {
    "text": "all right well I think I'm going to start a minute early because it's pretty much time um so um this talk is",
    "start": "5040",
    "end": "12960"
  },
  {
    "text": "understanding par accominators um my name is Scott Velian",
    "start": "12960",
    "end": "18160"
  },
  {
    "text": "that's my Twitter handle i have a website fundprofit.com and the code and the",
    "start": "18160",
    "end": "24240"
  },
  {
    "text": "slides and the video will be on a directory called Paser at some point",
    "start": "24240",
    "end": "29279"
  },
  {
    "text": "so this is one of my uh talks where I try to squeeze like a whole day's worth",
    "start": "29279",
    "end": "35920"
  },
  {
    "text": "of stuff into like 60 minutes so as usual I'll be going very fast and",
    "start": "35920",
    "end": "41840"
  },
  {
    "text": "covering a lot of ground i don't really as always I don't I don't really expect you to remember everything but if you",
    "start": "41840",
    "end": "47200"
  },
  {
    "text": "can get just some of the concepts and if it gets demystified that's the main thing so it just becomes less",
    "start": "47200",
    "end": "52520"
  },
  {
    "text": "intimidating so I'm going to be using F code examples the concepts will work in um",
    "start": "52520",
    "end": "61359"
  },
  {
    "text": "pretty much any programming language other than cobalt or something so here",
    "start": "61359",
    "end": "67200"
  },
  {
    "text": "is uh some typical code using pars or combinators and um when you look at it",
    "start": "67200",
    "end": "73760"
  },
  {
    "text": "when you first come across code like this it looks kind of intimidating um the main thing is there's all these",
    "start": "73760",
    "end": "79200"
  },
  {
    "text": "strange symbols there's like a vertical bar thing and a angle brackets with dots and stuff and I think that's one of the",
    "start": "79200",
    "end": "85920"
  },
  {
    "text": "things which is particularly intimidating and so uh I guess the goal of this talk is if you can understand",
    "start": "85920",
    "end": "92960"
  },
  {
    "text": "this code or at least not be intimidated by this code that would be a success in my book obviously it's really hard to",
    "start": "92960",
    "end": "99439"
  },
  {
    "text": "learn everything in 60 minutes but um if you can just look at this and say that kind of looks vaguely familiar let me",
    "start": "99439",
    "end": "105920"
  },
  {
    "text": "look that up and see what it does so first of of all I'm going to talk about what is a parasa combinator library and",
    "start": "105920",
    "end": "113600"
  },
  {
    "start": "107000",
    "end": "141000"
  },
  {
    "text": "then we're going to build a very very simple paraser um which will be the foundation for the",
    "start": "113600",
    "end": "118799"
  },
  {
    "text": "rest of the talk we're going to build three very simple paraser combinators uh",
    "start": "118799",
    "end": "124000"
  },
  {
    "text": "and then we'll start using those combinators to build more complex combinators from the simple ones",
    "start": "124000",
    "end": "129840"
  },
  {
    "text": "uh we'll have a little side track little side excursion on improving the error messages and then finally we'll get to",
    "start": "129840",
    "end": "136160"
  },
  {
    "text": "the core thing which is how to build a JSON paraser using these techniques so what is a paraser",
    "start": "136160",
    "end": "143760"
  },
  {
    "start": "141000",
    "end": "230000"
  },
  {
    "text": "combinator library um so when you write a paraser there's something you're trying to match it's a keyword or it's",
    "start": "143760",
    "end": "150560"
  },
  {
    "text": "int or a string or a float or something you're trying to match this thing and in a in in this model you create a step in",
    "start": "150560",
    "end": "157440"
  },
  {
    "text": "a recipe a pausing recipe and you end up with this object which is a par of",
    "start": "157440",
    "end": "163519"
  },
  {
    "text": "something so this pars of something is really a recipe that when you when you",
    "start": "163519",
    "end": "169440"
  },
  {
    "text": "run it later on it'll give you back what whatever is the thing you're trying to look for so you have these pars of",
    "start": "169440",
    "end": "175519"
  },
  {
    "text": "things and then you combine these parser things with other parser things to make new kinds of parser things so this",
    "start": "175519",
    "end": "182720"
  },
  {
    "text": "combination of combining things together that's what a combinator is uh that's all it is it's not not particularly",
    "start": "182720",
    "end": "189120"
  },
  {
    "text": "mysterious but the whole point is that when you combine things you get things of the same type you can then cascade",
    "start": "189120",
    "end": "195519"
  },
  {
    "text": "that you can build on that and make bigger and bigger things from smaller and smaller things this is the whole concept of composition why composition",
    "start": "195519",
    "end": "201120"
  },
  {
    "text": "is so important and especially in functional programming why people are so uh strong on using that",
    "start": "201120",
    "end": "208040"
  },
  {
    "text": "technique so here we have in this case a recipe to make a thing C from an A and a",
    "start": "208040",
    "end": "214120"
  },
  {
    "text": "B and then finally when we've got the the recipe the paraser we have to run it",
    "start": "214120",
    "end": "220080"
  },
  {
    "text": "and when we run it we get a success or a failure depending on whether we succeeded in matching the thing and in",
    "start": "220080",
    "end": "225840"
  },
  {
    "text": "order to run it we also need some input which is the stream of characters that we're running",
    "start": "225840",
    "end": "230920"
  },
  {
    "start": "230000",
    "end": "315000"
  },
  {
    "text": "over so that's it that's paralle combinators in a nutshell now why parinators as opposed to something like",
    "start": "230920",
    "end": "238319"
  },
  {
    "text": "Lex and Yak or Antler or all the various other techniques so the first thing is that they're written in your favorite",
    "start": "238319",
    "end": "244000"
  },
  {
    "text": "programming language which is nice you don't have to kind of drop out into a different language to do it um which",
    "start": "244000",
    "end": "249840"
  },
  {
    "text": "means also you can use your favorite uh tools to do the programming in which is",
    "start": "249840",
    "end": "255519"
  },
  {
    "text": "nice um there's no pre-processing needed so the lexing and you know in traditional pares you have a lexing",
    "start": "255519",
    "end": "261919"
  },
  {
    "text": "stage and a pausing stage and you transform the a and all this kind of stuff in the par accommodator model",
    "start": "261919",
    "end": "268240"
  },
  {
    "text": "that's all one thing and because there's no pre-processing it's very ripple friendly which you can use it",
    "start": "268240",
    "end": "273600"
  },
  {
    "text": "interactively which is kind of nice um because it's such a small kind of thing",
    "start": "273600",
    "end": "278800"
  },
  {
    "text": "you can use it to create little DSLs really quickly like uh Fog Creek um the",
    "start": "278800",
    "end": "284880"
  },
  {
    "text": "the software company they used FP parseek which is the F library for this",
    "start": "284880",
    "end": "290080"
  },
  {
    "text": "um to write a little DSL for parsing query strings a search engine and you know very very simple DSL you say you",
    "start": "290080",
    "end": "296479"
  },
  {
    "text": "know something and something or quoted string and or you know whatever just like Google has a little very simple",
    "start": "296479",
    "end": "303000"
  },
  {
    "text": "DSL and finally from my point of view it's a way of understanding functional composition so even if you're actually",
    "start": "303000",
    "end": "308320"
  },
  {
    "text": "not going to use it for anything it's a fun thing to learn because it gives you insight into what a nice functional",
    "start": "308320",
    "end": "314240"
  },
  {
    "text": "library looks like so let's start with a simple paser and I'm going to create four",
    "start": "314240",
    "end": "320320"
  },
  {
    "start": "315000",
    "end": "690000"
  },
  {
    "text": "versions of this paser starting with something really simple and getting more and more complex so the first version of",
    "start": "320320",
    "end": "327120"
  },
  {
    "text": "the paser is going to be just pinging the character a that's all it is so in",
    "start": "327120",
    "end": "332880"
  },
  {
    "text": "order this is going to be a function there's this parsing function this gray box and there's going to be an input",
    "start": "332880",
    "end": "338240"
  },
  {
    "text": "which is a list of characters or a string or a stream of characters whatever um it's going to return true or",
    "start": "338240",
    "end": "344479"
  },
  {
    "text": "false if it succeeds in matching the character and it's going to return the remaining input now if it matches the",
    "start": "344479",
    "end": "350000"
  },
  {
    "text": "character it's going to it's going to consume that character from the stream and returning and return the remaining",
    "start": "350000",
    "end": "355600"
  },
  {
    "text": "uh characters what's really important is that the inputs and the",
    "start": "355600",
    "end": "360800"
  },
  {
    "text": "outputs are immutable um just like in all functional programming and in",
    "start": "360800",
    "end": "366560"
  },
  {
    "text": "particular that's very useful because that means if the parsing fails you can take another parser and apply it to the same input you don't have to worry that",
    "start": "366560",
    "end": "373039"
  },
  {
    "text": "the file pointers moved around and you're not starting at the same place so uh that's a key aspect of the combinator",
    "start": "373039",
    "end": "382039"
  },
  {
    "text": "design so let's show you the code so here's my pch char i'm going to call it",
    "start": "382039",
    "end": "387280"
  },
  {
    "text": "pars a character a if the input is empty uh I'm going to turn false if the first",
    "start": "387280",
    "end": "393919"
  },
  {
    "text": "character is a then I'm going to return true and I'm also going to take the",
    "start": "393919",
    "end": "398960"
  },
  {
    "text": "remaining characters just by starting from index one and returning the rest of the string um and if it's uh doesn't",
    "start": "398960",
    "end": "405680"
  },
  {
    "text": "match the first if it doesn't match a I'm going to return false so that's really a brain dead kind of paser um if",
    "start": "405680",
    "end": "412479"
  },
  {
    "text": "you're not familiar with F these are actually the return values you don't need a special return keyword in F so that's what we're returning okay so",
    "start": "412479",
    "end": "421360"
  },
  {
    "text": "that's version one version two is a little bit better the problem with version one of course it's hardcoded uh",
    "start": "421360",
    "end": "428560"
  },
  {
    "text": "for character A let's make it a bit more flexible and allow us to pass in any character so I'm going to pass in an",
    "start": "428560",
    "end": "434720"
  },
  {
    "text": "extra parameter now which is the character to match so it could be an A or a B we could get really you know",
    "start": "434720",
    "end": "440000"
  },
  {
    "text": "really uh uh exciting here the other thing is the output is going to be a bit more complex this time",
    "start": "440000",
    "end": "446240"
  },
  {
    "text": "because um if it matches I need to return the character that I match because I don't",
    "start": "446240",
    "end": "451840"
  },
  {
    "text": "know you know whether it matched or not and the remaining input and on a failure I want to return a nice error message i",
    "start": "451840",
    "end": "457599"
  },
  {
    "text": "don't just want to return true or false i want to return a message like you know I was looking for an A and you gave me a",
    "start": "457599",
    "end": "462880"
  },
  {
    "text": "B something like that so let's look at the code for that very similar this time",
    "start": "462880",
    "end": "468479"
  },
  {
    "text": "I'm returning a nice error message no more input uh if it matches the character I return the match character",
    "start": "468479",
    "end": "475280"
  },
  {
    "text": "and the remaining and if it doesn't match I have a nice little error message i was expecting this and I got something",
    "start": "475280",
    "end": "481000"
  },
  {
    "text": "else the problem with this code is it doesn't compile uh because the return",
    "start": "481000",
    "end": "486400"
  },
  {
    "text": "values here are different types uh that return value is different from the other one on the failure case I'm returning a",
    "start": "486400",
    "end": "492960"
  },
  {
    "text": "string but on the su success case I'm returning a pair a tupil of the matched",
    "start": "492960",
    "end": "499680"
  },
  {
    "text": "character and the remaining string so this won't compile so the way to fix this in a functional programming",
    "start": "499680",
    "end": "506319"
  },
  {
    "text": "language is to create a union type a choice type I like to call them which is a choice of either case so we're going",
    "start": "506319",
    "end": "513200"
  },
  {
    "text": "to uh create a type i'm going to call it result and it's got two cases it's either success or it's a failure and if",
    "start": "513200",
    "end": "519839"
  },
  {
    "text": "it's successful it's going to have a tick a that's the F# way of saying it's a generic type in C or Java that would",
    "start": "519839",
    "end": "525920"
  },
  {
    "text": "just be like a capital T or something so there's the two choices um",
    "start": "525920",
    "end": "531120"
  },
  {
    "text": "and then our output now has two choices as well on the success branch it's the",
    "start": "531120",
    "end": "536640"
  },
  {
    "text": "pair and on the failure branch it's the message so let's change see how the code has changed so the now in terms in",
    "start": "536640",
    "end": "544959"
  },
  {
    "text": "instead of returning the string we're going to return the failure of the string and instead of returning the pair",
    "start": "544959",
    "end": "551600"
  },
  {
    "text": "we're going to return success of the pair and again on the failure case uh we're going to return a",
    "start": "551600",
    "end": "558040"
  },
  {
    "text": "failure branch as well so that's our version two code hopefully this is I",
    "start": "558040",
    "end": "563600"
  },
  {
    "text": "know I'm going through it very quickly but uh this hopefully is really kind of obvious roughly again the concepts",
    "start": "563600",
    "end": "570399"
  },
  {
    "text": "really obvious the the details of the code you don't don't have to worry about too much so the return values are now",
    "start": "570399",
    "end": "575519"
  },
  {
    "text": "the same type and the compiler is very happy right so that's version two how",
    "start": "575519",
    "end": "582560"
  },
  {
    "text": "can we make it more complicated so one of the things about",
    "start": "582560",
    "end": "587920"
  },
  {
    "text": "this model is that currently we have this character to match And we know this in advance when I'm",
    "start": "587920",
    "end": "593839"
  },
  {
    "text": "looking for a particular character I know that I'm looking for a a quote or a a semicolon or something i know that",
    "start": "593839",
    "end": "599279"
  },
  {
    "text": "when I'm designing the paser um the input we don't know this in advance we don't know the input until later",
    "start": "599279",
    "end": "605959"
  },
  {
    "text": "on so what I really want to do is be able to work with all the stuff uh with",
    "start": "605959",
    "end": "611200"
  },
  {
    "text": "the with the information that I do know and and kind of delay working with the the rest of the stuff until I actually",
    "start": "611200",
    "end": "616560"
  },
  {
    "text": "have it at runtime so the way to do that in a functional programming language is to return a function so instead of",
    "start": "616560",
    "end": "622720"
  },
  {
    "text": "having a two input function like this I'm going to turn it into a oneinput",
    "start": "622720",
    "end": "627920"
  },
  {
    "text": "function which returns another function so you see there's before and there's after so this thing is now going to",
    "start": "627920",
    "end": "634000"
  },
  {
    "text": "return a function um that function is just like the original one it's got this",
    "start": "634000",
    "end": "639279"
  },
  {
    "text": "little input stream and it's got the result and so on so now what we've done is we we've got a way of building uh a",
    "start": "639279",
    "end": "646320"
  },
  {
    "text": "function that when we run it with an input stream will actually do the work in version four we're going to take",
    "start": "646320",
    "end": "653120"
  },
  {
    "text": "this function which is kind of awkward to use and we're going to wrap it in a type we're going to just wrap it up so",
    "start": "653120",
    "end": "658320"
  },
  {
    "text": "it becomes a thing and we're going to call this thing a paraser and in this case it's a paraser which returns a",
    "start": "658320",
    "end": "665640"
  },
  {
    "text": "char and here is the type this is where it starts getting a little bit ugly so the type of paraser it's uh in it",
    "start": "665640",
    "end": "672480"
  },
  {
    "text": "contains a function inside the type so this is definitely functional programming here it's a function which",
    "start": "672480",
    "end": "679120"
  },
  {
    "text": "is being treated as an object um and the function in there takes a string and it",
    "start": "679120",
    "end": "684399"
  },
  {
    "text": "returns a result and then we're wrapping it up in this paraser",
    "start": "684399",
    "end": "690320"
  },
  {
    "text": "type so that's our basic paraser so let's see go back to our recipe model",
    "start": "690440",
    "end": "697200"
  },
  {
    "text": "and see how it works we got this character we want to match we run it through this thing we now have this paraser right and then we're going to",
    "start": "697200",
    "end": "704320"
  },
  {
    "text": "combine all these pauses and remember that a paraser just basically means it's something that if you give me some input",
    "start": "704320",
    "end": "710640"
  },
  {
    "text": "later on I will then give you a success or failure later on okay and when I want to run it I give",
    "start": "710640",
    "end": "718240"
  },
  {
    "text": "the input and again if you look inside the parser basically it's just a function inside there so all I have to",
    "start": "718240",
    "end": "724160"
  },
  {
    "text": "do is run that function with the input and it gives me the success or",
    "start": "724160",
    "end": "729800"
  },
  {
    "text": "failure so let's look at how the run code works so to run a paraser with an input basically you just unwrap the",
    "start": "729800",
    "end": "736880"
  },
  {
    "text": "paraser to get the inner function and then you call the inner function with input so the running the piece of code",
    "start": "736880",
    "end": "742240"
  },
  {
    "text": "that runs it is really trivial all right let's see some code that's enough",
    "start": "742240",
    "end": "749680"
  },
  {
    "text": "talking so this is the real code there's the result type there's the paraser",
    "start": "749720",
    "end": "755639"
  },
  {
    "text": "type there is the code that uh matches the thing there's the run code let's see",
    "start": "755639",
    "end": "763519"
  },
  {
    "text": "if this works and so here is",
    "start": "763519",
    "end": "770920"
  },
  {
    "text": "a a paser for the character A whoops um there's some input if I run",
    "start": "770920",
    "end": "779440"
  },
  {
    "text": "that character Whoops no I don't thank you very",
    "start": "779440",
    "end": "784000"
  },
  {
    "text": "much uh if I run that paser on that input I get this down here it's a",
    "start": "785480",
    "end": "792120"
  },
  {
    "text": "success this is the character that was returned that's the the the character was matched and this is the remaining",
    "start": "792120",
    "end": "798200"
  },
  {
    "text": "string but if I run it on a bad input like the first character is a zed uh",
    "start": "798200",
    "end": "804000"
  },
  {
    "text": "when I try and run it I get this failure message i was expecting an A but I got a",
    "start": "804000",
    "end": "809839"
  },
  {
    "text": "zed instead so that is it that is our paraser done and dusted pretty",
    "start": "809839",
    "end": "817639"
  },
  {
    "text": "straightforward so hopefully that makes sense that paraser is that's it we're done with the paraser logic everything",
    "start": "817639",
    "end": "824880"
  },
  {
    "text": "else is now combining these pauses so let's look at some basic ways",
    "start": "824880",
    "end": "830880"
  },
  {
    "start": "828000",
    "end": "891000"
  },
  {
    "text": "of combining the pes so this word combinator it has a technical meaning",
    "start": "830880",
    "end": "836560"
  },
  {
    "text": "which is basically any function that depends only on its inputs which is not really a very helpful",
    "start": "836560",
    "end": "842160"
  },
  {
    "text": "function so typically when we talk about combinators we talk about combinator libraries and a combinator library is a",
    "start": "842160",
    "end": "848399"
  },
  {
    "text": "library designed around combining things to make new things okay that's a",
    "start": "848399",
    "end": "854240"
  },
  {
    "text": "combinator library very common in functional programming you have a a par combinator library you have an HTML",
    "start": "854240",
    "end": "860079"
  },
  {
    "text": "combinator library you might have a database combinator library it's it's a common way of designing",
    "start": "860079",
    "end": "865880"
  },
  {
    "text": "libraries so here's an example of a combinator addition is a combinator",
    "start": "865880",
    "end": "870959"
  },
  {
    "text": "adding two integers you get a new integer if you if you concatenate two lists you get a new list and in F the",
    "start": "870959",
    "end": "878000"
  },
  {
    "text": "the at sign is the this concatenation and finally if you add two pauses",
    "start": "878000",
    "end": "883040"
  },
  {
    "text": "together you get a new paraser so here's the question what is what are the different ways you can add two parases together what can go there between the",
    "start": "883040",
    "end": "891160"
  },
  {
    "start": "891000",
    "end": "1052000"
  },
  {
    "text": "two so the first thing is you can chain them in sequence so you can say match",
    "start": "891160",
    "end": "897440"
  },
  {
    "text": "this thing and then match this next thing so I'm calling that the and then",
    "start": "897440",
    "end": "903560"
  },
  {
    "text": "combinator or uh you can say match this thing and if that doesn't work match this thing instead so that's I'm calling",
    "start": "903560",
    "end": "910000"
  },
  {
    "text": "the or else operator um and another really useful one is a map combinator which basically",
    "start": "910000",
    "end": "916480"
  },
  {
    "text": "says whatever you've pared transform it in some way into something else so you might have passed a string and you want",
    "start": "916480",
    "end": "922560"
  },
  {
    "text": "to transform it into an int just because you know it's a string of digits for example so let's look at these three",
    "start": "922560",
    "end": "929199"
  },
  {
    "text": "basic combinators so the and then one so this is the logic for it you run the",
    "start": "929199",
    "end": "934720"
  },
  {
    "text": "first paser if it fails give up um otherwise you take the remaining input and you give it to the second paraser if",
    "start": "934720",
    "end": "941120"
  },
  {
    "text": "that fails give up if they both succeed we're going to return a pair because we got a result from the first paraser we",
    "start": "941120",
    "end": "947440"
  },
  {
    "text": "got a result from the second paraser we're going to combine them into a pair and return it so let's look at the",
    "start": "947440",
    "end": "953639"
  },
  {
    "text": "code so we're going to define an inner function because we've got this inner function all the time we run the first",
    "start": "953639",
    "end": "960199"
  },
  {
    "text": "paraser we check the result if it's a failure return if it's a success we go",
    "start": "960199",
    "end": "966079"
  },
  {
    "text": "to paraser two and now I'm going to page down to the next page so there's the inner function there's the remaining and",
    "start": "966079",
    "end": "972560"
  },
  {
    "text": "we're going to use that remaining input for the next bit um we take this remaining bit we run it on the second",
    "start": "972560",
    "end": "979320"
  },
  {
    "text": "paser we test the second paser results if it's a failure we return if it's a",
    "start": "979320",
    "end": "984920"
  },
  {
    "text": "success we've now know that we have these two pieces that we need to combine so we create a combined value which is",
    "start": "984920",
    "end": "990240"
  },
  {
    "text": "the pair we call that a success and we also we've now got the the remaining",
    "start": "990240",
    "end": "995600"
  },
  {
    "text": "thing after the two pauses so it's the second remaining stream uh and then we finally take this inner function and we",
    "start": "995600",
    "end": "1001920"
  },
  {
    "text": "wrap it up in a par and return it so that is a really uh fundamental",
    "start": "1001920",
    "end": "1007040"
  },
  {
    "text": "combinator written in you know 15 lines of code so there's just important that we",
    "start": "1007040",
    "end": "1013279"
  },
  {
    "text": "we have to keep track of which is the remaining code there's the combined value and there's the inner function that gets wrapped up",
    "start": "1013279",
    "end": "1019480"
  },
  {
    "text": "again the or else is kind of similar uh run the first per if it succeeds we're",
    "start": "1019480",
    "end": "1025400"
  },
  {
    "text": "done if it fails we take the original input which hasn't changed and we run the second paraser on that input and if",
    "start": "1025400",
    "end": "1032480"
  },
  {
    "text": "the second paraser succeeds we return and if the second paraser fails we return anyway so either way we return",
    "start": "1032480",
    "end": "1038160"
  },
  {
    "text": "the result of the second paraser and finally the map similar kind of thing we run the paraser if it succeeds we take",
    "start": "1038160",
    "end": "1045760"
  },
  {
    "text": "the paused value and we run it through this function to transform it into something else and if it fails we just",
    "start": "1045760",
    "end": "1051120"
  },
  {
    "text": "give up so um this is where these funny operators come from because we don't",
    "start": "1051120",
    "end": "1058559"
  },
  {
    "start": "1052000",
    "end": "1088000"
  },
  {
    "text": "really write and then and or else it's quite nice to use infix operators so in",
    "start": "1058559",
    "end": "1064240"
  },
  {
    "text": "uh the f parsing world we use the uh dot angle brackets angle brackets dot to",
    "start": "1064240",
    "end": "1071120"
  },
  {
    "text": "mean the and then and the dots are important we'll see why the dots are important in a minute um the or else is",
    "start": "1071120",
    "end": "1078240"
  },
  {
    "text": "a vertical bar and the map is a vertical bar with double angle brackets so when you see",
    "start": "1078240",
    "end": "1084559"
  },
  {
    "text": "these symbols that's what they are and then or else and map",
    "start": "1084559",
    "end": "1090080"
  },
  {
    "start": "1088000",
    "end": "1254000"
  },
  {
    "text": "so let me actually give you a demo",
    "start": "1090080",
    "end": "1095799"
  },
  {
    "text": "whoops pa two there we go there's the and then",
    "start": "1095799",
    "end": "1104159"
  },
  {
    "text": "code there is the infix version of and then there's the OS",
    "start": "1104760",
    "end": "1111240"
  },
  {
    "text": "code there's the infix version of Oels there's the map code and there is the infix version of",
    "start": "1111240",
    "end": "1118080"
  },
  {
    "text": "map all right so here's some little",
    "start": "1118080",
    "end": "1124520"
  },
  {
    "text": "pauses uh A and then B right so we take A and then we try and",
    "start": "1124520",
    "end": "1130799"
  },
  {
    "text": "get B and we want both of them and if we try and run it on",
    "start": "1130799",
    "end": "1136039"
  },
  {
    "text": "ABC we get a success and we return a pair and the remaining string is",
    "start": "1136039",
    "end": "1142600"
  },
  {
    "text": "C if we run it on Z BC the A is going to",
    "start": "1142600",
    "end": "1147840"
  },
  {
    "text": "fail so it's say I'm expecting an A and I got a zed now if we run it on a different",
    "start": "1147840",
    "end": "1153679"
  },
  {
    "text": "string the first the A is going to match but the zed is going to the B is now going to fail and you actually get the",
    "start": "1153679",
    "end": "1159200"
  },
  {
    "text": "nice error message i was expecting a B",
    "start": "1159200",
    "end": "1164600"
  },
  {
    "text": "uh and I got a zed so it you can actually tell you where it actually knows about the different pauses and it",
    "start": "1164799",
    "end": "1170080"
  },
  {
    "text": "keeps track of where you are in the string so that's not bad uh here's the or else thing very similar so it can",
    "start": "1170080",
    "end": "1178400"
  },
  {
    "text": "match an A zed that works you can also match a B zed that works um and then you",
    "start": "1178400",
    "end": "1186000"
  },
  {
    "text": "can start combining them you can say it's a B or a C uh and then it's an A or L and then a B or a",
    "start": "1186000",
    "end": "1194039"
  },
  {
    "text": "C um and here is a um the map in action so I'm going to take an A and a B and",
    "start": "1194039",
    "end": "1200480"
  },
  {
    "text": "then I'm going to map it i'm going to take this pair which is a pair of characters i'm going to turn each",
    "start": "1200480",
    "end": "1205919"
  },
  {
    "text": "character into a string and then we're going to add the two strings",
    "start": "1205919",
    "end": "1211320"
  },
  {
    "text": "together and when I run that I now get a string back rather than a pair of",
    "start": "1211320",
    "end": "1216559"
  },
  {
    "text": "characters I get a string with two characters in it so there we go and here's let's do an",
    "start": "1216559",
    "end": "1222400"
  },
  {
    "text": "integer one so [Music] um I'm matching these two characters one",
    "start": "1222400",
    "end": "1228880"
  },
  {
    "text": "and two again I got a pair of characters i'm going to turn them into strings and",
    "start": "1228880",
    "end": "1233919"
  },
  {
    "text": "depth and then I'm going to turn the resulting string into an int so this should actually be an int like this and",
    "start": "1233919",
    "end": "1242400"
  },
  {
    "text": "let's see if it is and there it is it returns an int you can actually see it says it's a result which returns an int",
    "start": "1242400",
    "end": "1250320"
  },
  {
    "text": "down here all right so that's it for the",
    "start": "1250320",
    "end": "1257760"
  },
  {
    "start": "1254000",
    "end": "1496000"
  },
  {
    "text": "basic combinators so already we've actually done quite a lot we've got a basic paser",
    "start": "1257760",
    "end": "1264720"
  },
  {
    "text": "we got a couple of basic combinators and now we can really go to town and start combining these basic ones in more",
    "start": "1264720",
    "end": "1270799"
  },
  {
    "text": "complex ways so let's look at some of the ways you can do that um there's a",
    "start": "1270799",
    "end": "1276400"
  },
  {
    "text": "function in functional programming languages is reduce the reduce function um and what it does is it basically",
    "start": "1276400",
    "end": "1283039"
  },
  {
    "text": "given a list of things or a sequence of things it takes some sort of operator and it sticks it between every element",
    "start": "1283039",
    "end": "1288320"
  },
  {
    "text": "in the list so here is 1 2 3 a list with three elements and it's going to be",
    "start": "1288320",
    "end": "1294240"
  },
  {
    "text": "reduced by the plus symbol and that's exactly the same as writing 1 plus 2 plus 3 okay that's what reduce does now",
    "start": "1294240",
    "end": "1302640"
  },
  {
    "text": "if we do it with pares here we have a list of pes so pes are things and we can put them in a list um so here's a list",
    "start": "1302640",
    "end": "1309840"
  },
  {
    "text": "of three different pares and we're going to reduce them using the and then operator so that's exactly the same as",
    "start": "1309840",
    "end": "1316840"
  },
  {
    "text": "writing par character A and then pass character B and then pass character C or",
    "start": "1316840",
    "end": "1323760"
  },
  {
    "text": "uh we can use the or else operator and combine them that way so that's the same as pass character A or else pass",
    "start": "1323760",
    "end": "1330480"
  },
  {
    "text": "character B or else pass character C so that's quite nice and this vertical bar",
    "start": "1330480",
    "end": "1338000"
  },
  {
    "text": "with the thing that's the F# pipe operator if you're not familiar with it is just kind of like the Unix pipe it",
    "start": "1338000",
    "end": "1343440"
  },
  {
    "text": "takes the one thing on the left hand side and it feeds it into the function on the next",
    "start": "1343440",
    "end": "1349720"
  },
  {
    "text": "side okay so here's our first kind of compound combinator choice you give me a",
    "start": "1349720",
    "end": "1357600"
  },
  {
    "text": "list of pauses and I will make a single paraser that matches any of them so I'm just doing list reduce that's very",
    "start": "1357600",
    "end": "1364919"
  },
  {
    "text": "nice but then we can take that and build on that so let's say we have a list of characters we want to match we take that",
    "start": "1364919",
    "end": "1371520"
  },
  {
    "text": "list of characters we run the normal map which is built in and we turn we we map each",
    "start": "1371520",
    "end": "1378480"
  },
  {
    "text": "of those characters to a paraser for that character so we're mapping using phar so now we have a list of",
    "start": "1378480",
    "end": "1386120"
  },
  {
    "text": "pares and then we run choice and now we have a single paraser which matches any",
    "start": "1386120",
    "end": "1391280"
  },
  {
    "text": "of the characters and here's a real example let's say I want to parse any lowercase character",
    "start": "1391280",
    "end": "1397360"
  },
  {
    "text": "i just say any of and I give it a list of characters that I'm looking for or let's say I want to pass any digits i",
    "start": "1397360",
    "end": "1404159"
  },
  {
    "text": "just say here's the list of characters 0 to 9 and any of those things will match",
    "start": "1404159",
    "end": "1409679"
  },
  {
    "text": "so already I can you can see I've built up beginning to build up some complex stuff just for some basic",
    "start": "1409679",
    "end": "1415799"
  },
  {
    "text": "things um another important combinator is a sequencing",
    "start": "1415799",
    "end": "1421360"
  },
  {
    "text": "thing so I have a list of pauses and I want to do them in sequence uh and the code for this is a little",
    "start": "1421360",
    "end": "1426880"
  },
  {
    "text": "more tricky and first of all we're going to write a helper function that given a pair of pauses it takes the the output",
    "start": "1426880",
    "end": "1433280"
  },
  {
    "text": "the pair and it basically lists concats them together um so I have a list of",
    "start": "1433280",
    "end": "1442039"
  },
  {
    "text": "pareser to a list singleton and then I use this reduce with this little helper",
    "start": "1442039",
    "end": "1448960"
  },
  {
    "text": "function don't worry about how this works the point is that in you know six lines of code I've got quite a powerful",
    "start": "1448960",
    "end": "1456840"
  },
  {
    "text": "combinator and I can use that combinator now to make a a pass that matches a string so a string is basically a",
    "start": "1456840",
    "end": "1463679"
  },
  {
    "text": "sequence of characters and I want to match each of those characters in turn so if I'm matching the string true for",
    "start": "1463679",
    "end": "1469200"
  },
  {
    "text": "example the the string literal true t r u e I want to match each of these and if any of them doesn't match then the",
    "start": "1469200",
    "end": "1475440"
  },
  {
    "text": "paraser fails so I take each character in the string I wrap it to a paraser i",
    "start": "1475440",
    "end": "1481600"
  },
  {
    "text": "use sequence to turn it into a a paraser which returns a list of characters i then convert that into a list into an",
    "start": "1481600",
    "end": "1488320"
  },
  {
    "text": "array of characters and then I convert the array of characters back into a string and now I have a paraser for",
    "start": "1488320",
    "end": "1495960"
  },
  {
    "text": "strings and like I say the code you know this I wouldn't I wouldn't worry about the the code",
    "start": "1495960",
    "end": "1501880"
  },
  {
    "start": "1496000",
    "end": "1591000"
  },
  {
    "text": "um really understanding the code the point is that this is like a few lines of code once we got the basic",
    "start": "1501880",
    "end": "1507440"
  },
  {
    "text": "combinators done the uh the other combinators become very simple to",
    "start": "1507440",
    "end": "1514039"
  },
  {
    "text": "write so there's pars lowerase there's par digit so if I'm if I run the lowerase",
    "start": "1514039",
    "end": "1520960"
  },
  {
    "text": "par it says yes I succeeded and I found an A if",
    "start": "1520960",
    "end": "1527080"
  },
  {
    "text": "I pass a lower case and it's the first letter is uppercase A it's a failure i",
    "start": "1527080",
    "end": "1532720"
  },
  {
    "text": "was expecting a zed now it's interesting because it's expecting any of these characters and it's the last one it gave",
    "start": "1532720",
    "end": "1538240"
  },
  {
    "text": "up on the A it gave up on the B when it got to the zed when it gave up that was the error so it's saying I'm expecting a",
    "start": "1538240",
    "end": "1543480"
  },
  {
    "text": "zed that's a kind of ugly error message and we will deal with that",
    "start": "1543480",
    "end": "1548679"
  },
  {
    "text": "shortly similarly with parsing a digit uh let's move down",
    "start": "1548679",
    "end": "1555320"
  },
  {
    "text": "to parsing a string so I want to pass the string ABC",
    "start": "1555320",
    "end": "1561440"
  },
  {
    "text": "if I pass in a proper string that's successful it matches ABC and the",
    "start": "1561440",
    "end": "1567039"
  },
  {
    "text": "remaining string is DE uh if I put a bar in the second position it knows that",
    "start": "1567039",
    "end": "1573919"
  },
  {
    "text": "it's expecting a B there and got a vertical bar if I put a bar in the third",
    "start": "1573919",
    "end": "1579320"
  },
  {
    "text": "position again it knows it's expecting a C there so the error message is you know",
    "start": "1579320",
    "end": "1584720"
  },
  {
    "text": "already pretty good they could be better but that's not bad considering we've literally written like 30 lines of code",
    "start": "1584720",
    "end": "1590159"
  },
  {
    "text": "so far all right so we're not done more",
    "start": "1590159",
    "end": "1597000"
  },
  {
    "start": "1591000",
    "end": "1844000"
  },
  {
    "text": "combinators um many many more combinators you can build a huge library of combinators a combinator library so",
    "start": "1597000",
    "end": "1604720"
  },
  {
    "text": "uh the first set of combinators is what I call the more than one combinators so sometimes you have something where you",
    "start": "1604720",
    "end": "1610400"
  },
  {
    "text": "want to match uh more than one of a certain thing more than one comma more than one uh character whatever so",
    "start": "1610400",
    "end": "1617600"
  },
  {
    "text": "there's a many combinator and a many one combinator which is one or more or zero or more and then an optional which is",
    "start": "1617600",
    "end": "1624400"
  },
  {
    "text": "zero or one those are really common and here's a good example whites space a whites space character is any of",
    "start": "1624400",
    "end": "1632000"
  },
  {
    "text": "a space or a tab or a new line and then whites space in general is one or more",
    "start": "1632000",
    "end": "1638080"
  },
  {
    "text": "whites space character so there we now have a whites space paraser and we can then combine that whitespace paser with other parases",
    "start": "1638080",
    "end": "1646880"
  },
  {
    "text": "um another ones I call the throwing away combinators um we saw this one with a",
    "start": "1646880",
    "end": "1653120"
  },
  {
    "text": "dot on both sides that's the and then combinator sometimes you want to pass something and then ignore what you've",
    "start": "1653120",
    "end": "1659039"
  },
  {
    "text": "passed you just want to match it uh things like double quotes in a quoted string or list literal or something you",
    "start": "1659039",
    "end": "1665440"
  },
  {
    "text": "want to you want to match it and then throw it away so in this one you put the dot on the left hand side that means you keep",
    "start": "1665440",
    "end": "1672400"
  },
  {
    "text": "the left hand side and you throw away the right hand side and the second one you keep the right hand side and you throw away the left",
    "start": "1672400",
    "end": "1678640"
  },
  {
    "text": "hand side and another useful one is a between so you have three pares and you pause",
    "start": "1678640",
    "end": "1686640"
  },
  {
    "text": "the first thing but you throw it away you keep the second one and you throw away the third one and again that's something like a double quoted string so",
    "start": "1686640",
    "end": "1692720"
  },
  {
    "text": "let's look at that there's a double quote pause a single pause a quote and a",
    "start": "1692720",
    "end": "1697919"
  },
  {
    "text": "quoted int basically says between a double quote and par an int and a double",
    "start": "1697919",
    "end": "1703600"
  },
  {
    "text": "quote so it will throw the double quotes away and just return you the int that is passed so there you go that's another",
    "start": "1703600",
    "end": "1710240"
  },
  {
    "text": "one and separators is another one really really common you know a commaepparated list or a semicolon separated list or",
    "start": "1710240",
    "end": "1716600"
  },
  {
    "text": "something same kind of thing one or more zero or more here's a comma pass a comma pause a",
    "start": "1716600",
    "end": "1724960"
  },
  {
    "text": "digit and then parsing one or more digits in a list is is digits separated",
    "start": "1724960",
    "end": "1730799"
  },
  {
    "text": "by commas and you have to have at least one of those so I can demo",
    "start": "1730799",
    "end": "1738600"
  },
  {
    "text": "that and here we go some more and you can see this this is a little bit this",
    "start": "1738600",
    "end": "1743760"
  },
  {
    "text": "some of this code is a bit more complicated the overall paraser library",
    "start": "1743760",
    "end": "1749039"
  },
  {
    "text": "is about uh 500 lines altogether so I can show you the full",
    "start": "1749039",
    "end": "1755600"
  },
  {
    "text": "thing later on all right so there's digits so define a digit and then digits is one",
    "start": "1755600",
    "end": "1764320"
  },
  {
    "text": "or more digit and then an integer is basically one or more digits and then",
    "start": "1764320",
    "end": "1770720"
  },
  {
    "text": "we're going to convert we find the digits and we're going to convert this using map into an int somehow with a",
    "start": "1770720",
    "end": "1777679"
  },
  {
    "text": "little helper function and then when we run that it",
    "start": "1777679",
    "end": "1784880"
  },
  {
    "text": "finds the one but when we have two digits at the beginning it picks up both",
    "start": "1784880",
    "end": "1790120"
  },
  {
    "text": "digits and when we have three digits at the beginning it picks up three digits",
    "start": "1790120",
    "end": "1795919"
  },
  {
    "text": "so it is picking up as it will basically pick up as many digits as you have before it hits a",
    "start": "1795919",
    "end": "1802639"
  },
  {
    "text": "non-digit and similarly here's a list same kind of",
    "start": "1804120",
    "end": "1810158"
  },
  {
    "text": "thing oops so this is a comma separated list and it",
    "start": "1810919",
    "end": "1818320"
  },
  {
    "text": "returns I didn't pass it in",
    "start": "1818320",
    "end": "1821919"
  },
  {
    "text": "properly so you can see it's returning a list of digits that it",
    "start": "1825320",
    "end": "1831559"
  },
  {
    "text": "found and if I change this to one two",
    "start": "1831559",
    "end": "1836080"
  },
  {
    "text": "three it successfully picked up the new one so there you go that's",
    "start": "1837000",
    "end": "1843880"
  },
  {
    "text": "that so I know I'm whizzing through all this stuff but like I say it's really the concepts of how you build these",
    "start": "1843880",
    "end": "1849919"
  },
  {
    "text": "things together all right how we doing for time here",
    "start": "1849919",
    "end": "1856919"
  },
  {
    "start": "1850000",
    "end": "2014000"
  },
  {
    "text": "good um so what can we do now to uh improve",
    "start": "1856919",
    "end": "1862480"
  },
  {
    "text": "the paser um the first thing we can do is is name",
    "start": "1862480",
    "end": "1867520"
  },
  {
    "text": "the passes because as you saw in one of those cases um when it gave an error message it said I was looking for a zed",
    "start": "1867520",
    "end": "1873600"
  },
  {
    "text": "or I was looking for nine and what you're really doing is you're really looking for a digit um and because the",
    "start": "1873600",
    "end": "1880000"
  },
  {
    "text": "it doesn't know that it's a digit it will just give you the last thing it was looking for which is kind of unhelpful",
    "start": "1880000",
    "end": "1886240"
  },
  {
    "text": "so what you can do is you can take this parasa object because it's an object now you can just add a property which is a",
    "start": "1886240",
    "end": "1891360"
  },
  {
    "text": "name property and in this case we'll give it a name we'll give it digit and",
    "start": "1891360",
    "end": "1896640"
  },
  {
    "text": "so when we use it like this we're going again as always we'll we'll create some sort of cryptic operator to make our",
    "start": "1896640",
    "end": "1902240"
  },
  {
    "text": "lives harder uh for to hide it from other people but um in this case it's the question mark um so this is what the",
    "start": "1902240",
    "end": "1910640"
  },
  {
    "text": "code looks like when you run it without a label it's trying to pass a digit the digit is defined as zero up to nine when",
    "start": "1910640",
    "end": "1917440"
  },
  {
    "text": "it when it can't find a nine it'll say I can't find a nine which is really unhelpful message if you give if you",
    "start": "1917440",
    "end": "1924559"
  },
  {
    "text": "take that same paraser and you give it this label digit when it fails now um it",
    "start": "1924559",
    "end": "1932000"
  },
  {
    "text": "will now say I was trying to pass a digit i couldn't find a digit and that again is much more helpful",
    "start": "1932000",
    "end": "1940440"
  },
  {
    "text": "and the other thing you can do obviously which is really nice is to give you the uh line number and the column number",
    "start": "1940720",
    "end": "1946880"
  },
  {
    "text": "where the parsing failed if you have a large file obviously you don't want to just say I was expecting a comma here",
    "start": "1946880",
    "end": "1952640"
  },
  {
    "text": "and it doesn't tell you where it's expecting a comma that's not at all helpful so again we just have to change",
    "start": "1952640",
    "end": "1957760"
  },
  {
    "text": "our input take the input object instead of just having a stream of characters we have a stream of characters along with",
    "start": "1957760",
    "end": "1963519"
  },
  {
    "text": "the current line and the current column and then every time we pass a character we we off you know we increment the the",
    "start": "1963519",
    "end": "1969279"
  },
  {
    "text": "column number and the the the the line number and we can write a nice little uh",
    "start": "1969279",
    "end": "1976240"
  },
  {
    "text": "the error handling the messages become much nicer so here we're trying to pass an integer uh the minus is okay the zed",
    "start": "1976240",
    "end": "1982799"
  },
  {
    "text": "is not a valid integer um and so it says column one is an error and we can put",
    "start": "1982799",
    "end": "1988240"
  },
  {
    "text": "even a little carrot saying here we are in the line um here's a",
    "start": "1988240",
    "end": "1993480"
  },
  {
    "text": "float this Z is wrong so on column four is an error and again we can we can",
    "start": "1993480",
    "end": "2000480"
  },
  {
    "text": "write the the error line and we can also write the little carrot telling you where it is so that's makes the error handling much more",
    "start": "2000480",
    "end": "2006360"
  },
  {
    "text": "friendly so this is not very hard to do i'm not going to show you the code because it's this is where it does get a",
    "start": "2006360",
    "end": "2011600"
  },
  {
    "text": "little bit ugly but it's not that hard you can see it would be obvious how to do it okay so building a JSON paraser um",
    "start": "2011600",
    "end": "2020240"
  },
  {
    "start": "2014000",
    "end": "2092000"
  },
  {
    "text": "I'm going to use the JSON spec at json.org and that has lots of pretty pictures um",
    "start": "2020240",
    "end": "2028640"
  },
  {
    "text": "and this is the first picture which is that the J adjacent value is one of the",
    "start": "2028640",
    "end": "2034799"
  },
  {
    "text": "following things it's a string or it's a number or it's an object or it's an array or it's true or false or it's null",
    "start": "2034799",
    "end": "2040720"
  },
  {
    "text": "so how can we represent this in F well in F we can use a choice",
    "start": "2040720",
    "end": "2048200"
  },
  {
    "text": "type so here's our choice type um a JSON value is either a string with a string",
    "start": "2048200",
    "end": "2054158"
  },
  {
    "text": "inside it a number with a float inside it an object which is a dictionary uh of",
    "start": "2054159",
    "end": "2059440"
  },
  {
    "text": "key value pairs um where the keys are strings and the values are JSON other JSON values uh an array is just a list",
    "start": "2059440",
    "end": "2066720"
  },
  {
    "text": "of JSON values uh a boolean is just a boolean and a null has no value at all",
    "start": "2066720",
    "end": "2072320"
  },
  {
    "text": "so that's a type that represents uh a JSON um value all right let's start parsing",
    "start": "2072320",
    "end": "2080320"
  },
  {
    "text": "it so let's start with some easy ones the true and the false and the null these are just literals so we can just",
    "start": "2080320",
    "end": "2087040"
  },
  {
    "text": "write we've already got a thing that pares string little literals already so that's easy let's start with null yet",
    "start": "2087040",
    "end": "2094560"
  },
  {
    "start": "2092000",
    "end": "2209000"
  },
  {
    "text": "another little helper operator and more cryptic um uh symbols",
    "start": "2094560",
    "end": "2100800"
  },
  {
    "text": "and so I apologize for these cryptic symbols but this is you know part of the",
    "start": "2100800",
    "end": "2106240"
  },
  {
    "text": "reason why the these operate these libraries look complicated because they have all these obscure symbols you just have to get your head around them look",
    "start": "2106240",
    "end": "2112560"
  },
  {
    "text": "make sure you just have the reference sheet on hand there aren't that many though i mean we've seen five or six of",
    "start": "2112560",
    "end": "2119119"
  },
  {
    "text": "them and there you know once the once you get the hang hang of it there's not that many you have to memorize so what",
    "start": "2119119",
    "end": "2124880"
  },
  {
    "text": "this one is going to do is it's going to run the paraser and it's going to take the output but it's going to ignore the output of the paraser assuming it",
    "start": "2124880",
    "end": "2131520"
  },
  {
    "text": "succeeds and give you back some result that you specify and that's very common if you have a string literal um so in",
    "start": "2131520",
    "end": "2138480"
  },
  {
    "text": "this case I'm looking for the string null if I find it I don't really care what what the characters are because I",
    "start": "2138480",
    "end": "2145280"
  },
  {
    "text": "already know it's a null um so I'm just going to give it the null value which is is this J null is an F# type or a type",
    "start": "2145280",
    "end": "2154680"
  },
  {
    "text": "constructor so I don't need to process the the contents of the string in any way so I can just ignore it so that's",
    "start": "2154680",
    "end": "2161760"
  },
  {
    "text": "how you pass a null and then I'm going to give it a label so that when it fails",
    "start": "2161760",
    "end": "2167520"
  },
  {
    "text": "rather than saying uh I couldn't find an L uh it's going to say I couldn't find a null which is much nicer message",
    "start": "2167520",
    "end": "2177079"
  },
  {
    "text": "similarly for booleans I have a a paser for the true literal and then I'm going",
    "start": "2177119",
    "end": "2183520"
  },
  {
    "text": "to map it to the a boolean value called true uh I have a paraser for the false",
    "start": "2183520",
    "end": "2188560"
  },
  {
    "text": "literal and I'm going to map it to the false and then my boolean paraser is",
    "start": "2188560",
    "end": "2193599"
  },
  {
    "text": "just a choice between the true paraser and the false paraser so there it is i'm just using the choice uh the or else",
    "start": "2193599",
    "end": "2202000"
  },
  {
    "text": "operator and then again I'm going to give it a label boolean so that uh if it",
    "start": "2202000",
    "end": "2207359"
  },
  {
    "text": "errors out I get a nice error message all right what about strings okay this is now it starts getting a bit",
    "start": "2207359",
    "end": "2213839"
  },
  {
    "start": "2209000",
    "end": "2302000"
  },
  {
    "text": "more complicated so a JSON string can be any uni code character blah blah blah or",
    "start": "2213839",
    "end": "2219839"
  },
  {
    "text": "it can be various escaped characters or it can be uh hex hex hexodimal so let's start with this one",
    "start": "2219839",
    "end": "2226560"
  },
  {
    "text": "i'm going to break it into components so one of the nice things about uh paraser combinators like this is you can break",
    "start": "2226560",
    "end": "2231839"
  },
  {
    "text": "the task into small pieces and build the bigger one from the smaller ones so I'm",
    "start": "2231839",
    "end": "2237040"
  },
  {
    "text": "going to just work on the individual subsections and then combine them later on so the first subsection I'm going to",
    "start": "2237040",
    "end": "2242320"
  },
  {
    "text": "work on is this one which says any character other than double quote or backslash or control characters and I'm",
    "start": "2242320",
    "end": "2249920"
  },
  {
    "text": "going to call this the unescaped character paser and here is the code unescape",
    "start": "2249920",
    "end": "2256040"
  },
  {
    "text": "character is a something that satisfies uh a character pause so satisfy is the",
    "start": "2256040",
    "end": "2261920"
  },
  {
    "text": "one you haven't seen yet it basically says give me a function uh which is a predicate for characters and if it",
    "start": "2261920",
    "end": "2268400"
  },
  {
    "text": "matches that character it's okay and if it doesn't match the character it does it fails so in this case it'll work as",
    "start": "2268400",
    "end": "2275119"
  },
  {
    "text": "long as the character is not a backslash and is not a uh double quote and I'm",
    "start": "2275119",
    "end": "2281440"
  },
  {
    "text": "going to forget about control characters for now so if it satisfies that condition which is any other character",
    "start": "2281440",
    "end": "2288000"
  },
  {
    "text": "that paraser will succeed we will get an unescaped character okay the next one I'm going to",
    "start": "2288000",
    "end": "2295359"
  },
  {
    "text": "call this set the escaped characters and um there's a lot of them there's like",
    "start": "2295359",
    "end": "2301440"
  },
  {
    "text": "eight of them so what I'm going to do is I'm going to create a list of all the",
    "start": "2301440",
    "end": "2306720"
  },
  {
    "start": "2302000",
    "end": "2417000"
  },
  {
    "text": "all the eight possible things in the list and for each thing I'm going to say here's the string that I'm looking for",
    "start": "2306720",
    "end": "2313920"
  },
  {
    "text": "and if I find that string here is the output that I'm going to return so if I",
    "start": "2313920",
    "end": "2319520"
  },
  {
    "text": "this is unfortunately we got the you know escaped escapes so in this case I'm looking for a backslash followed by a",
    "start": "2319520",
    "end": "2327040"
  },
  {
    "text": "double quote and I have to escape them both and if I find it I'm going to return the quote character",
    "start": "2327040",
    "end": "2334079"
  },
  {
    "text": "if I get a a backslash followed by a backslash uh that's going to return a backslash",
    "start": "2334079",
    "end": "2340400"
  },
  {
    "text": "then it's everything's doubled up um if I have a backslash followed by a forward slash that's going to return a forward",
    "start": "2340400",
    "end": "2346280"
  },
  {
    "text": "slash a backslash followed by B is going to return the backspace character and so on and so",
    "start": "2346280",
    "end": "2352119"
  },
  {
    "text": "forth and then I take all these pairs and for each pair I'm going to convert",
    "start": "2352119",
    "end": "2357680"
  },
  {
    "text": "it into a paraser and the paser is going to take the first item in the pair the",
    "start": "2357680",
    "end": "2362800"
  },
  {
    "text": "the string to match and that's where it says P string to match at the bottom in red um and if I find that thing I'm",
    "start": "2362800",
    "end": "2371040"
  },
  {
    "text": "going to return the result which is the second part of the pair so I can process basically a whole list of items in one",
    "start": "2371040",
    "end": "2377119"
  },
  {
    "text": "go and this is one of the nice things about using a programming language to write your pauses in is that this is",
    "start": "2377119",
    "end": "2384320"
  },
  {
    "text": "standard F code there's just nothing special about you know the parasite library so if I was using C# I could use",
    "start": "2384320",
    "end": "2391359"
  },
  {
    "text": "link for example this would be the equivalent instead of using list map I'd use uh you know dot select and that",
    "start": "2391359",
    "end": "2397440"
  },
  {
    "text": "would give me the same thing and now I have a list of pauses",
    "start": "2397440",
    "end": "2403440"
  },
  {
    "text": "how do I combine a list of perses into one per i use choice and so I've",
    "start": "2403440",
    "end": "2408800"
  },
  {
    "text": "combined all my pauses into a single paser all right and then I'm going to",
    "start": "2408800",
    "end": "2414160"
  },
  {
    "text": "label make it nice and make the error messages nicer and this final one is the",
    "start": "2414160",
    "end": "2419359"
  },
  {
    "start": "2417000",
    "end": "2520000"
  },
  {
    "text": "unic code character i'm not going to show you the code for that but basically you define a pa for an individual unic code character and you have four of",
    "start": "2419359",
    "end": "2426000"
  },
  {
    "text": "those pes in a row starting with a u you know and that's how you define that and",
    "start": "2426000",
    "end": "2431680"
  },
  {
    "text": "now I have my three subpieces and I want to combine them together so uh the",
    "start": "2431680",
    "end": "2438560"
  },
  {
    "text": "string is basically a double quote character followed by zero or more of these characters followed by another",
    "start": "2438560",
    "end": "2444720"
  },
  {
    "text": "double quote character how do I define that here's my quote character so it's a pch of a quote",
    "start": "2444720",
    "end": "2453200"
  },
  {
    "text": "and I'm going to give a label so it says I'm looking for a quote the adjacent character is either an unscaped",
    "start": "2453200",
    "end": "2459760"
  },
  {
    "text": "character or an escape character or a unicode character and then the main",
    "start": "2459760",
    "end": "2465599"
  },
  {
    "text": "paraser for that is going to be a quote character followed by zero or more JSON",
    "start": "2465599",
    "end": "2471040"
  },
  {
    "text": "characters followed by another quote character and I'm going to throw away the quote character so you can see the",
    "start": "2471040",
    "end": "2476240"
  },
  {
    "text": "dot is on the inside so this is basically the same as the between okay so that's the important",
    "start": "2476240",
    "end": "2483520"
  },
  {
    "text": "thing is I can build up um more complex pares by combining the simpler pauses so",
    "start": "2483520",
    "end": "2490240"
  },
  {
    "text": "it's tedious to write a par i mean the JSON spec you know it's not that hard but it's kind of tedious you have quite",
    "start": "2490240",
    "end": "2496000"
  },
  {
    "text": "complicated little things but if you just follow you can just follow the railway diagrams and write the code pretty much corresponds exactly to the",
    "start": "2496000",
    "end": "2501839"
  },
  {
    "text": "railway document that's one of the really nice things about this style of parsing and then a proper JSON string is",
    "start": "2501839",
    "end": "2508160"
  },
  {
    "text": "that is a quoted string and then I have to uh map it into one of this JST",
    "start": "2508160",
    "end": "2513200"
  },
  {
    "text": "objects which is one of those cases in the in the main in the the main type we had and give it a nice name all right",
    "start": "2513200",
    "end": "2522599"
  },
  {
    "start": "2520000",
    "end": "2624000"
  },
  {
    "text": "numbers okay this is a bit more intimidating so break it into smaller",
    "start": "2522599",
    "end": "2528400"
  },
  {
    "text": "pieces there's a sign which is optional there's what I'm calling the integer part which is either a zero or digits 1",
    "start": "2528400",
    "end": "2537119"
  },
  {
    "text": "to nine followed by zero or more normal digits okay so let's look at that so",
    "start": "2537119",
    "end": "2543839"
  },
  {
    "text": "there's the optional sign i match the hyphen and I say it's optional so I can be zero or one of these",
    "start": "2543839",
    "end": "2550599"
  },
  {
    "text": "hyphens uh the zero part is just matching the string zero okay the digits",
    "start": "2550599",
    "end": "2557599"
  },
  {
    "text": "one to nine is basically uh uh any any parser that satisfies where the",
    "start": "2557599",
    "end": "2564079"
  },
  {
    "text": "character is a digit but the character is not zero the normal digits are anything",
    "start": "2564079",
    "end": "2570160"
  },
  {
    "text": "where it satisfies where the character is a digit so and I'm using the chars digit rather",
    "start": "2570160",
    "end": "2576000"
  },
  {
    "text": "than 0 to 9 just in case there are some unic code digits that I that are not an",
    "start": "2576000",
    "end": "2581680"
  },
  {
    "text": "asy digit that I'm not an expert in unic code but almost certainly there's some weird numbers out there",
    "start": "2581680",
    "end": "2587240"
  },
  {
    "text": "somewhere all right so a non-zero integer we said is a one to nine digit",
    "start": "2587240",
    "end": "2593760"
  },
  {
    "text": "followed by zero or more normal digits so I'm going to combine them using that little uh and",
    "start": "2593760",
    "end": "2599720"
  },
  {
    "text": "then and then I want to turn that into something useful so I map that i've got",
    "start": "2599720",
    "end": "2605119"
  },
  {
    "text": "a little pair i turn the first one into a string because the first one's a character this second part is going to",
    "start": "2605119",
    "end": "2610960"
  },
  {
    "text": "be a string and I combine them into a new string so I've now got a string there and then finally the entire",
    "start": "2610960",
    "end": "2617680"
  },
  {
    "text": "integer part is either the zero bit or the non-zero bit so it's tedious but is it follows",
    "start": "2617680",
    "end": "2625440"
  },
  {
    "text": "the design you can see it follows the the railway you know it's not hard to write it's just boring to write same",
    "start": "2625440",
    "end": "2631839"
  },
  {
    "text": "thing for the fractional bits a fraction is a decimal point followed by one or more digits that's easy to write there's",
    "start": "2631839",
    "end": "2639280"
  },
  {
    "text": "a decimal point uh it's a decimal point followed by one or more digits um the exponent part is either a",
    "start": "2639280",
    "end": "2646640"
  },
  {
    "text": "lowerase E or an uppercase E followed by an optional sign followed by one or more digits blah blah blah same kind of thing",
    "start": "2646640",
    "end": "2653200"
  },
  {
    "text": "so you know it kind of gets boring after a while writing all this stuff but there you go the good thing by the way is that",
    "start": "2653200",
    "end": "2658880"
  },
  {
    "text": "when you do write this it will do type checking for you so you won't be able to mess it up too much if you try and",
    "start": "2658880",
    "end": "2664640"
  },
  {
    "text": "combine something that's not the right type it won't compile so you're pretty much guaranteed at least whatever you",
    "start": "2664640",
    "end": "2670240"
  },
  {
    "text": "type in is going to work it might not pause exactly what you want but it won't crash with some weird",
    "start": "2670240",
    "end": "2675480"
  },
  {
    "text": "error so now we have our four different parts we're going to combine them",
    "start": "2675480",
    "end": "2681359"
  },
  {
    "start": "2676000",
    "end": "2700000"
  },
  {
    "text": "so we say it's an optional sign combined with an integer part with an optional fractional part an optional exponent",
    "start": "2681359",
    "end": "2688000"
  },
  {
    "text": "part we're going to take this whole thing and convert it into a J number and give it a",
    "start": "2688000",
    "end": "2693160"
  },
  {
    "text": "label and so on and so on and so on we're going to go through the whole JSON paser but you get the",
    "start": "2693160",
    "end": "2699960"
  },
  {
    "text": "idea and so finally we have all these pauses for these individual pieces now",
    "start": "2699960",
    "end": "2705040"
  },
  {
    "start": "2700000",
    "end": "3013000"
  },
  {
    "text": "we want to combine them into a paser that pauses any JSON function uh and here's the code to pass a JSON",
    "start": "2705040",
    "end": "2713200"
  },
  {
    "text": "value you have a choice of something that passes a null something that passes a boolean something that passes a number",
    "start": "2713200",
    "end": "2719119"
  },
  {
    "text": "something that passes a string something that passes an array something that pass an object so the the code really really",
    "start": "2719119",
    "end": "2725359"
  },
  {
    "text": "matches the the parsing diagrams which makes it which is which is very nice so",
    "start": "2725359",
    "end": "2730400"
  },
  {
    "text": "you know it's pretty easy to write this kind of stuff all right so let's actually see the",
    "start": "2730400",
    "end": "2737319"
  },
  {
    "text": "demo right so before we just get I think I've got enough time just to show you one thing",
    "start": "2737319",
    "end": "2742800"
  },
  {
    "text": "here yeah I just want to show you here's the entire paraser library",
    "start": "2742800",
    "end": "2748240"
  },
  {
    "text": "um including all the line number handling stuff quite a lot of you know",
    "start": "2748240",
    "end": "2753280"
  },
  {
    "text": "it's a little bit complicated but even with all this line number handling um and some some utility stuff um the",
    "start": "2753280",
    "end": "2763119"
  },
  {
    "text": "code itself altogether is",
    "start": "2763119",
    "end": "2768599"
  },
  {
    "text": "There's parsing an integer there's parsing a float 496 lines okay so less than 500 lines um for the entire parsing",
    "start": "2768880",
    "end": "2776800"
  },
  {
    "text": "library which includes utility things for parsing a float parsing integer parsing spaces parsing whites space",
    "start": "2776800",
    "end": "2783440"
  },
  {
    "text": "parsing a string all that stuff all these parases are in less than 500 lines",
    "start": "2783440",
    "end": "2788960"
  },
  {
    "text": "um the JSON par itself here we go here's the the JSON",
    "start": "2788960",
    "end": "2796000"
  },
  {
    "text": "value like I said this is the real code um there's the escaped character",
    "start": "2796000",
    "end": "2802520"
  },
  {
    "text": "code there's the number code tedious tedious tedious but the whole JSON thing",
    "start": "2802520",
    "end": "2808480"
  },
  {
    "text": "is 295 lines so let's actually test",
    "start": "2808480",
    "end": "2815359"
  },
  {
    "text": "that will it come up yes it does come up okay so here here's here's example of the null so there's the J null paser and",
    "start": "2821240",
    "end": "2829839"
  },
  {
    "text": "it succeeds and it returns a J null if I pass in null P rather than just saying I was",
    "start": "2829839",
    "end": "2837040"
  },
  {
    "text": "expecting an L it gives a nice message column 3 error passing null unexpected P",
    "start": "2837040",
    "end": "2844160"
  },
  {
    "text": "at that position so that's a that's a much more helpful error message",
    "start": "2844160",
    "end": "2849520"
  },
  {
    "text": "similarly parsing a boolean if I try and pass trucks",
    "start": "2849520",
    "end": "2855760"
  },
  {
    "text": "uh it says \"I'm trying to pass a boolean you gave me trucks.\" There's an unexpected Oh an unexpected T i guess it",
    "start": "2855760",
    "end": "2862480"
  },
  {
    "text": "gives up on the It can't find the true so it tries to find the false it can't find the false um so that's what that",
    "start": "2862480",
    "end": "2868560"
  },
  {
    "text": "error message is okay it's backtracking",
    "start": "2868560",
    "end": "2873640"
  },
  {
    "text": "um here's the string stuff let's go down to a real piece of JSON code so here is",
    "start": "2873640",
    "end": "2881119"
  },
  {
    "text": "a real JSON fragment and uh you can see it's got uh",
    "start": "2881119",
    "end": "2888560"
  },
  {
    "text": "a string uh it's got a boolean it's got a birthday which has uh another object",
    "start": "2888560",
    "end": "2894800"
  },
  {
    "text": "with three properties in it and then the favorite colors is a list of strings so if I pause",
    "start": "2894800",
    "end": "2902319"
  },
  {
    "text": "this show this up here you can see it successfully pared it uh it returned a",
    "start": "2903000",
    "end": "2908480"
  },
  {
    "text": "JSON object the JSON object contained a map a dictionary inside the dictionary there's the a property called birthday",
    "start": "2908480",
    "end": "2914880"
  },
  {
    "text": "which in turn is a map which in turn has the day property which is a J number a",
    "start": "2914880",
    "end": "2920000"
  },
  {
    "text": "month which is a J number a year which is J number favorite colors is a JSON array which contains a JSON string and",
    "start": "2920000",
    "end": "2926480"
  },
  {
    "text": "another JSON string and so on and so forth if I change this to a a JSON",
    "start": "2926480",
    "end": "2933800"
  },
  {
    "text": "number let's see if this works it should say it's a JSON",
    "start": "2933800",
    "end": "2939119"
  },
  {
    "text": "number and there's the JSON array and the first thing is a JSON string and the",
    "start": "2939160",
    "end": "2944800"
  },
  {
    "text": "second thing is a JSON number now if I put a a bad character in there like an",
    "start": "2944800",
    "end": "2950960"
  },
  {
    "text": "angle bracket or something a square bracket and I try and pass it again line five column zero passing",
    "start": "2950960",
    "end": "2959680"
  },
  {
    "text": "an object uh an unexpected square",
    "start": "2959680",
    "end": "2965119"
  },
  {
    "text": "brackets um and here's a some of the the JSON.org site has some other examples",
    "start": "2966280",
    "end": "2972240"
  },
  {
    "text": "this is this is one from their site so it's quite more complicated",
    "start": "2972240",
    "end": "2978520"
  },
  {
    "text": "one and if I run",
    "start": "2978520",
    "end": "2982319"
  },
  {
    "text": "it I get the complete thing successfully paused it it's a map containing a widget",
    "start": "2984040",
    "end": "2990319"
  },
  {
    "text": "the widget is a map containing debug and image and so on and so forth so there's a full JSON paraser in 300 lines of code",
    "start": "2990319",
    "end": "2999359"
  },
  {
    "text": "not bad I think so um um like I say you know the details",
    "start": "2999359",
    "end": "3007200"
  },
  {
    "text": "can get quite complicated but you can I think you can see the concepts how the how the how you build up the more",
    "start": "3007200",
    "end": "3012319"
  },
  {
    "text": "complicated PS some simpler ones so what have we got i think we're pretty much done the most important thing is we're",
    "start": "3012319",
    "end": "3018720"
  },
  {
    "start": "3013000",
    "end": "3141000"
  },
  {
    "text": "treating functions like objects so the original paraser returned a function right that's a very functional",
    "start": "3018720",
    "end": "3025440"
  },
  {
    "text": "programming kind of thing to do we treat functions as things in their own right and in this case we wrapped that function in a type and once we'd wrapped",
    "start": "3025440",
    "end": "3031599"
  },
  {
    "text": "it in this paraser type we could then manipulate it those types I was calling recipes um",
    "start": "3031599",
    "end": "3041040"
  },
  {
    "text": "people normally call them effects or or uh computations but the point is you you",
    "start": "3041040",
    "end": "3046880"
  },
  {
    "text": "got to these recipes um they don't actually work until you actually give them the input stream but what you can",
    "start": "3046880",
    "end": "3052720"
  },
  {
    "text": "do is combine them before you actually have the input stream you can basically do a little programming with these recipes you can take two recipes and",
    "start": "3052720",
    "end": "3059200"
  },
  {
    "text": "combine them to make a bigger recipe and that's a very cool thing so actually kind of programming with types you're",
    "start": "3059200",
    "end": "3065040"
  },
  {
    "text": "programming with combinators so you have a little program and then you run the program with the input and I think hopefully you get the",
    "start": "3065040",
    "end": "3072559"
  },
  {
    "text": "idea of the power of these combinator libraries we just started with three basic combinators and from that we could",
    "start": "3072559",
    "end": "3079280"
  },
  {
    "text": "build a choice and the any of and the sequence and the string and the",
    "start": "3079280",
    "end": "3085280"
  },
  {
    "text": "um you know all sorts of other ones built from those basic ones um and that's this whole thing of building",
    "start": "3085280",
    "end": "3090559"
  },
  {
    "text": "complex things from smaller things this is really the essence of composition the essence of of functional",
    "start": "3090559",
    "end": "3096119"
  },
  {
    "text": "programming and they're very small but they're very powerful uh like I said the combinator library is 500 characters 500",
    "start": "3096119",
    "end": "3104319"
  },
  {
    "text": "lines not bad and with that library we could actually write a JSON parser in 300",
    "start": "3104319",
    "end": "3109559"
  },
  {
    "text": "lines and people using uh these kinds of things you can you can write binary",
    "start": "3109559",
    "end": "3114960"
  },
  {
    "text": "parses as well you don't have to write string pares so you could write uh you",
    "start": "3114960",
    "end": "3120160"
  },
  {
    "text": "know I would they wouldn't be particularly efficient by the way this code that I've shown you is not at all efficient uh it's really an example to",
    "start": "3120160",
    "end": "3126240"
  },
  {
    "text": "get the concepts across um if you want efficiency I would use a commercial you know a more serious library so for",
    "start": "3126240",
    "end": "3132640"
  },
  {
    "text": "example in F the F parse library is the one to go for and there are similar",
    "start": "3132640",
    "end": "3138240"
  },
  {
    "text": "libraries for all other languages so thanks very much um the code will be at",
    "start": "3138240",
    "end": "3144400"
  },
  {
    "start": "3141000",
    "end": "3185000"
  },
  {
    "text": "the para directory there contact me if you've got any questions uh slides and video if you want help with F works",
    "start": "3144400",
    "end": "3152400"
  },
  {
    "text": "consulting and if you want more about F uh itself go to f.org thanks very much",
    "start": "3152400",
    "end": "3160440"
  },
  {
    "text": "and if you've got any questions just come and see me afterwards and don't forget to fill out the thing at the back",
    "start": "3163680",
    "end": "3169040"
  },
  {
    "text": "thank you",
    "start": "3169040",
    "end": "3172280"
  }
]