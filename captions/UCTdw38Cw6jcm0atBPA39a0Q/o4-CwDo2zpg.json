[
  {
    "start": "0",
    "end": "152000"
  },
  {
    "text": "good morning everyone morning you're late all right",
    "start": "8559",
    "end": "13679"
  },
  {
    "text": "five five pounds all right who's got one of these little batteries itsybitsy",
    "start": "13679",
    "end": "20279"
  },
  {
    "text": "battery you're engineers you're supposed to have one at all times on you comes with a package",
    "start": "20279",
    "end": "28039"
  },
  {
    "text": "uh yeah I could use a clicker thank you so sorry I'm noticing only now this is not working",
    "start": "29760",
    "end": "36120"
  },
  {
    "text": "actually the laser does work so if I put in my eye probably it's going to hurt",
    "start": "36120",
    "end": "43000"
  },
  {
    "text": "it thank you Hubert thanks all right",
    "start": "43000",
    "end": "48559"
  },
  {
    "text": "just a straight USB i got it from here yeah the laser do you want the laser no thanks",
    "start": "48559",
    "end": "55120"
  },
  {
    "text": "okay",
    "start": "56199",
    "end": "59199"
  },
  {
    "text": "of",
    "start": "61879",
    "end": "64878"
  },
  {
    "text": "course terrific good morning my name is Andre and I'm seeing a couple of",
    "start": "68840",
    "end": "74240"
  },
  {
    "text": "familiar faces and a few uh whom I not have seen before uh who's seen me before",
    "start": "74240",
    "end": "80640"
  },
  {
    "text": "like talking the two familiar faces yes thank you um so my name is Andre i'm",
    "start": "80640",
    "end": "87520"
  },
  {
    "text": "going to talk about um fastware which is this is a talk on efficiency in systems",
    "start": "87520",
    "end": "93840"
  },
  {
    "text": "level languages um I've had a great time getting here i hope you had an easier",
    "start": "93840",
    "end": "99920"
  },
  {
    "text": "time uh it was 2 hours 35 to fly from Bucharest to London and 2 hours 35 to",
    "start": "99920",
    "end": "105680"
  },
  {
    "text": "get from the airport to here so that was pretty awesome and then I'm not wearing my badge so the security guy at the door",
    "start": "105680",
    "end": "112479"
  },
  {
    "text": "is like what do you do do you work here and I was like I don't work i mostly talk and that didn't help",
    "start": "112479",
    "end": "119479"
  },
  {
    "text": "either okay um I uh figure out the the following one fact which is I have too",
    "start": "119479",
    "end": "126079"
  },
  {
    "text": "many things to say so I'm going to uh this is I'm I've never done it before and let me tell you",
    "start": "126079",
    "end": "133280"
  },
  {
    "text": "the way I imagined it the way I imagined it was like there's there's like 500 people",
    "start": "133280",
    "end": "138760"
  },
  {
    "text": "here and I would say \"Choose your own adventure.\" and I would give you the choices and you would vote by means of",
    "start": "138760",
    "end": "144840"
  },
  {
    "text": "applause but given that there's like you know 30 of us here probably we're going to do kind of a raise of hands kind of",
    "start": "144840",
    "end": "151480"
  },
  {
    "text": "thing all right so we have two choices i'm not kidding you choose so choice",
    "start": "151480",
    "end": "156879"
  },
  {
    "start": "152000",
    "end": "152000"
  },
  {
    "text": "number one is down to earth discussion and we're going to discuss a few close to silicon optimizations",
    "start": "156879",
    "end": "163440"
  },
  {
    "text": "strength reduction which is uh traditional compiler optimization but in fact it can be done through redesign",
    "start": "163440",
    "end": "169480"
  },
  {
    "text": "algorithms improve instruction level parallelism of code um discuss a bit of",
    "start": "169480",
    "end": "175280"
  },
  {
    "text": "the arithmet arithmetic underpinnings of optimization so what are the links in between uh the sort of the tricks that",
    "start": "175280",
    "end": "182000"
  },
  {
    "text": "we can do in optimization and the actual fundaments of math that make them possible uh we we get we get to rethink",
    "start": "182000",
    "end": "189840"
  },
  {
    "text": "a few simple algorithms such as converting uh integers to strings and and back and we're going to show quite a",
    "start": "189840",
    "end": "196480"
  },
  {
    "text": "bit of code and measurements so the disadvantages would be it's a fairly low-level um talk some of this advice",
    "start": "196480",
    "end": "204000"
  },
  {
    "text": "I'm giving may not age very well uh with improvements in compiler and uh uh CPU",
    "start": "204000",
    "end": "211000"
  },
  {
    "text": "technology and there's plenty of code which not necessarily everybody likes or as a second",
    "start": "211000",
    "end": "219159"
  },
  {
    "start": "219000",
    "end": "219000"
  },
  {
    "text": "choice new research I'm going to um this would be a more researchy kind of topic",
    "start": "219159",
    "end": "225599"
  },
  {
    "text": "uh which focuses on two core computer science algorithms there's only uh maybe a few dozen",
    "start": "225599",
    "end": "233280"
  },
  {
    "text": "essential algorithms in computer science of which two are partition Tony",
    "start": "233280",
    "end": "238640"
  },
  {
    "text": "partition which actually divides an array into um in two halves one is that smaller than an element and the other is",
    "start": "238640",
    "end": "245120"
  },
  {
    "text": "larger than a given element and quick select which is how to find the nth",
    "start": "245120",
    "end": "250879"
  },
  {
    "text": "element the nth smallest element in an array so that talk would focus on these",
    "start": "250879",
    "end": "257199"
  },
  {
    "text": "two algorithms uh by means of sentinels in unexpected places which is kind of an",
    "start": "257199",
    "end": "262880"
  },
  {
    "text": "interesting topic um I'm going to discuss layout in iteration strategy and",
    "start": "262880",
    "end": "268160"
  },
  {
    "text": "I'm going to show significant new results academically speaking in an era considered closed because partition and",
    "start": "268160",
    "end": "274479"
  },
  {
    "text": "quick select are are literally older than all of us in this room except me uh",
    "start": "274479",
    "end": "280960"
  },
  {
    "text": "no not even 69 so uh these are like 61 65 and ever",
    "start": "280960",
    "end": "286880"
  },
  {
    "text": "since then have been considered their optimum nobody worked on improving them anymore so um we're going to show new",
    "start": "286880",
    "end": "293360"
  },
  {
    "text": "results here uh on the downside this is a complex topic if you've never heard of partition and quick select before it's",
    "start": "293360",
    "end": "299360"
  },
  {
    "text": "unlikely this talk is going to cause you a lot of joy and happiness um it's difficult to appreciate without set",
    "start": "299360",
    "end": "305520"
  },
  {
    "text": "background and it doesn't translate to obvious practical advice for your own work that you can take tomorrow it is",
    "start": "305520",
    "end": "312160"
  },
  {
    "text": "however a nice sort of researchy topic so now by means of",
    "start": "312160",
    "end": "317720"
  },
  {
    "text": "um by means of uh a show of hands please uh vote for",
    "start": "317720",
    "end": "325639"
  },
  {
    "text": "this all right vote for this all right well I got to tell you",
    "start": "325639",
    "end": "332000"
  },
  {
    "text": "the following both are interesting so we chose this right the down truth and I I",
    "start": "332000",
    "end": "337440"
  },
  {
    "text": "gotta tell you I've I've done a bit of branch prediction here because the following slides are going to be this so",
    "start": "337440",
    "end": "344000"
  },
  {
    "text": "otherwise I would have to change the slid set and that would kill the tech guys so nice let's talk about strength",
    "start": "344000",
    "end": "352039"
  },
  {
    "text": "reduction so strength reduction is um traditional compiler optimization",
    "start": "352039",
    "end": "358160"
  },
  {
    "text": "so it means reduce try to replace in any algorithm stronger operations with um",
    "start": "358160",
    "end": "366560"
  },
  {
    "text": "you know not so strong operations um for example the classic like when uh when",
    "start": "366560",
    "end": "372720"
  },
  {
    "text": "your um kind of you know 50-year-old guy uh coworker who thinks he's great uh",
    "start": "372720",
    "end": "379520"
  },
  {
    "text": "talks about strength reduction they say \"Oh you should replace that thing with that thing.\" Like the division by two",
    "start": "379520",
    "end": "385440"
  },
  {
    "text": "it's a shift and I'm awesome right he's not that awesome because compilers are",
    "start": "385440",
    "end": "390720"
  },
  {
    "text": "doing this since 1980 last time he looked probably right so um this is sort of a classic example",
    "start": "390720",
    "end": "398080"
  },
  {
    "text": "of strength reduction but I wouldn't recommend you you sit down and do it because you actually open yourself to",
    "start": "398080",
    "end": "403840"
  },
  {
    "text": "liability such as if you know a is unsigned and one is signed one is obviously signed then you you're unclear",
    "start": "403840",
    "end": "411120"
  },
  {
    "text": "on the sideness of the result depending on the sizes of the operators and their types and everything whereas the",
    "start": "411120",
    "end": "416160"
  },
  {
    "text": "division always gets it uh gets it right so um but this is the this is the idea of",
    "start": "416160",
    "end": "422960"
  },
  {
    "text": "strength reduction you want to replace the stronger operations with simpler operations and uh let me give you sort",
    "start": "422960",
    "end": "428720"
  },
  {
    "text": "of the hierarchy of speeds here uh we have comparisons that would be the cheapest i'm saying comparison without a",
    "start": "428720",
    "end": "435479"
  },
  {
    "text": "jump which you know a equals b less than c a gets b less than c that's possible",
    "start": "435479",
    "end": "442479"
  },
  {
    "text": "and it's actually the fastest so less than a cycle you can think of it uh then comes integral add subtract beat",
    "start": "442479",
    "end": "449199"
  },
  {
    "text": "operations and shift all each of which takes one",
    "start": "449199",
    "end": "454840"
  },
  {
    "text": "cycle like it's the absolute awesome awesome you know most awesome thing you can think of is one cycle to do 64-bit",
    "start": "454840",
    "end": "462440"
  },
  {
    "text": "addition which is quite the feat if you think of it like adding two 64-bit numbers kind of you know it's kind of",
    "start": "462440",
    "end": "469599"
  },
  {
    "text": "all the carry and you know all that stuff is not easy and u to in 2004 that",
    "start": "469599",
    "end": "476479"
  },
  {
    "text": "was a paper it was the topic of a paper on hardware how to do 64-bit addition in",
    "start": "476479",
    "end": "482400"
  },
  {
    "text": "one cycle and now everybody does it so right now you can think whenever you need you have uh an addition to do you",
    "start": "482400",
    "end": "489919"
  },
  {
    "text": "can think it's going to take one cycle you know less than one ncond so that's pretty awesome uh then kind of faster",
    "start": "489919",
    "end": "497520"
  },
  {
    "text": "stronger operator so we're kind of getting from weakest to strongest so then comes floating point add and",
    "start": "497520",
    "end": "504599"
  },
  {
    "text": "subtract and those are a separate unit altogether so the the floating point is its own",
    "start": "504599",
    "end": "511240"
  },
  {
    "text": "hardware what follows after that is multiplication of integrals and floating",
    "start": "511240",
    "end": "518440"
  },
  {
    "text": "point so that's more costly stronger and then goes the floating",
    "start": "518440",
    "end": "525360"
  },
  {
    "text": "point division remainder there is a such a thing as a floating point remainder",
    "start": "525360",
    "end": "530640"
  },
  {
    "text": "did you know about this shan's taking a photo like I got to show this on Twitter right now",
    "start": "530640",
    "end": "538320"
  },
  {
    "text": "um and the most expensive thing uh operate primitive operation in a in a",
    "start": "538320",
    "end": "543440"
  },
  {
    "text": "CPU is actually integral division by far it's like we're looking",
    "start": "543440",
    "end": "549440"
  },
  {
    "text": "at a big margin between the last one and everything else now you know this is kind of weird",
    "start": "549440",
    "end": "556880"
  },
  {
    "text": "because consider this integral division takes more time than floatingoint",
    "start": "556880",
    "end": "563240"
  },
  {
    "text": "division which is kind of you know real numbers i mean come on so there's got to be an explanation for",
    "start": "563240",
    "end": "570000"
  },
  {
    "text": "that and for this I'm going to open to the floor so please let me know what why do you think integral",
    "start": "570000",
    "end": "576600"
  },
  {
    "text": "division takes more time than floating point",
    "start": "576600",
    "end": "581519"
  },
  {
    "text": "division all right i give you a hint uh consider this so they told me they told",
    "start": "586680",
    "end": "593120"
  },
  {
    "text": "me not to ever do this but I'm going to kind of walk a bit here um I had my own",
    "start": "593120",
    "end": "598880"
  },
  {
    "text": "pearl so floating point division is faster than integral",
    "start": "598880",
    "end": "604200"
  },
  {
    "text": "division and let's think of the floating point number format so 64 bit floating point versus",
    "start": "604200",
    "end": "612480"
  },
  {
    "text": "64-bit integer in a 64-bit floating point what do we find how is it laid out",
    "start": "612480",
    "end": "619760"
  },
  {
    "text": "how is it structured well floating point come",
    "start": "619760",
    "end": "625959"
  },
  {
    "text": "on mantisa yes",
    "start": "625959",
    "end": "630680"
  },
  {
    "text": "yes thank you so there's an exponent and there's a mantisa the exponent is like I think uh was that 11 bits 53 yeah 10",
    "start": "631200",
    "end": "640079"
  },
  {
    "text": "bits one bit for sign 10 bits for exponent and then 53 bits for the mantisa and the actual number you're",
    "start": "640079",
    "end": "647200"
  },
  {
    "text": "looking for is the mantisa* 2 ^ of exponent minus some constant so that's a",
    "start": "647200",
    "end": "653279"
  },
  {
    "text": "floatingoint number for you right so it's stored in that it just so happens that's the way it's stored now consider",
    "start": "653279",
    "end": "659120"
  },
  {
    "text": "this so the number is actually you know um uh some you know 53 bit number times",
    "start": "659120",
    "end": "664240"
  },
  {
    "text": "2 to the power of whatever right okay now I have two numbers in this format",
    "start": "664240",
    "end": "670000"
  },
  {
    "text": "and I want to divide them so at this point you got to",
    "start": "670000",
    "end": "675040"
  },
  {
    "text": "desperately reach for that high school level algebra that you you know you forgot most about and when you",
    "start": "675040",
    "end": "682920"
  },
  {
    "text": "divide you know a to the power of b to the a to the power of c what do you",
    "start": "682920",
    "end": "690160"
  },
  {
    "text": "get you subtract the exponents thank you so it's actually when you when you divide to floatingoint numbers it turns",
    "start": "690440",
    "end": "697200"
  },
  {
    "text": "out you need to do a much simpler operation which is divide to 53 bit numbers and also take the difference of",
    "start": "697200",
    "end": "705279"
  },
  {
    "text": "two 10- bit numbers so the floating point format is",
    "start": "705279",
    "end": "710480"
  },
  {
    "text": "already rigged to favor fast multiplication and",
    "start": "710480",
    "end": "717000"
  },
  {
    "text": "division which is pretty awesome i mean how come it's amazing they thought of that right",
    "start": "717000",
    "end": "723279"
  },
  {
    "text": "this is pretty cool in contrast integral division not only has 64bit of kind of",
    "start": "723279",
    "end": "730519"
  },
  {
    "text": "payload to deal with it also needs to get to the ultimate precision you can't can get an approximate result when you",
    "start": "730519",
    "end": "737680"
  },
  {
    "text": "divide to integers right you got to get the whole nine yards there to get like the ultimate",
    "start": "737680",
    "end": "743079"
  },
  {
    "text": "bit so um on a more philosophical note I don't agree with division in principle i",
    "start": "743079",
    "end": "749120"
  },
  {
    "text": "don't like division it's unnatural i mean in nature only division by two",
    "start": "749120",
    "end": "754760"
  },
  {
    "text": "occurs but there's no natural phenomenon that is going to divide by",
    "start": "754760",
    "end": "760279"
  },
  {
    "text": "17 there's no there's nothing in this world that naturally is going to be oh yeah sure this is division by 17 in",
    "start": "760279",
    "end": "766959"
  },
  {
    "text": "contrast a lot of other sort of these arithmetic operations do occur in n in",
    "start": "766959",
    "end": "772440"
  },
  {
    "text": "nature all right so enough philosophy for the day I'm getting the",
    "start": "772440",
    "end": "779240"
  },
  {
    "text": "wrong all right so by means of an example let's discuss uh strength",
    "start": "779240",
    "end": "784560"
  },
  {
    "start": "780000",
    "end": "780000"
  },
  {
    "text": "reduction on a simple function which uh goes the following way i want to count",
    "start": "784560",
    "end": "790240"
  },
  {
    "text": "the number of digits in a number what could be simpler and that's kind of a",
    "start": "790240",
    "end": "795519"
  },
  {
    "text": "very nice interview question or a very nice question for those of you have like kids age like 6 to 10 like you know",
    "start": "795519",
    "end": "802959"
  },
  {
    "text": "write a JavaScript little program you know Johnny to uh you know figure out",
    "start": "802959",
    "end": "808720"
  },
  {
    "text": "how many digits are in a number and uh the way the natural",
    "start": "808720",
    "end": "814720"
  },
  {
    "text": "implementation would go is I'm going in a loop to increment the the running result and dividing the number by 10",
    "start": "814720",
    "end": "822160"
  },
  {
    "text": "until I run out of digits and That's the way it works",
    "start": "822160",
    "end": "827120"
  },
  {
    "text": "right all right so now the problem with this guy is of course it's going to use",
    "start": "827240",
    "end": "834160"
  },
  {
    "text": "a bunch of divisions so we want to optimize this right so we want to make this as fast as possible and actually",
    "start": "834160",
    "end": "840079"
  },
  {
    "text": "there's a reason for it even though it doesn't look at terribly useful function it actually is so let's make this a lot",
    "start": "840079",
    "end": "847839"
  },
  {
    "text": "faster by presumably reducing the strength of this division here",
    "start": "847839",
    "end": "853720"
  },
  {
    "text": "however it's actually a multiplication because there's a paper I think in the",
    "start": "853720",
    "end": "858800"
  },
  {
    "text": "'90s that um showed how how division by a constant can be translated with",
    "start": "858800",
    "end": "865760"
  },
  {
    "text": "multiplica in into multiplication by a different weird very large constant with overflow followed by fix up a shift or",
    "start": "865760",
    "end": "873120"
  },
  {
    "text": "an ad uh to width let me actually show you and I'm going to take advantage of",
    "start": "873120",
    "end": "879839"
  },
  {
    "text": "the very nice uh tech guys who let me switch slides here which is a non-trivial thing uh okay so let's do",
    "start": "879839",
    "end": "888680"
  },
  {
    "text": "this i'm going to change an example here you should all use this site",
    "start": "888680",
    "end": "894440"
  },
  {
    "text": "gcc.godbol.org it allows you to type code in C++ and see the",
    "start": "894440",
    "end": "901600"
  },
  {
    "text": "disassembly in real time all right so let's actually say uh return n by",
    "start": "901600",
    "end": "908360"
  },
  {
    "text": "10 and you don't need to know assembler to make kind of very interesting draw",
    "start": "908360",
    "end": "913839"
  },
  {
    "text": "very interesting conclusions from uh from this take a look at the genital",
    "start": "913839",
    "end": "919120"
  },
  {
    "text": "assembly so you're going to see that uh we have this weird negative constant",
    "start": "919120",
    "end": "924160"
  },
  {
    "text": "being multiplied mul is like multiply right you don't have to have a PhD for",
    "start": "924160",
    "end": "929839"
  },
  {
    "text": "this kind of stuff right you don't need to so it's multiply and that kind of stuff and it's going to be followed by a",
    "start": "929839",
    "end": "935600"
  },
  {
    "text": "shift which is the fix up so very interestingly we translated the division by 10 into a multiplication",
    "start": "935600",
    "end": "942240"
  },
  {
    "text": "which is already the compiler at work doing strength reduction for you and that's pretty awesome because",
    "start": "942240",
    "end": "949440"
  },
  {
    "text": "there's a lot of work behind the scenes here that's happening terrific very nice all right oops",
    "start": "949440",
    "end": "957399"
  },
  {
    "text": "sorry so let's make this faster ideas i'm opening this to the I'm opening this",
    "start": "957399",
    "end": "964639"
  },
  {
    "text": "the room here ideas to make this faster get rid of multiplications if you",
    "start": "964639",
    "end": "971639"
  },
  {
    "text": "can sorry use a lookup table excellent idea actually we're going to kind of",
    "start": "971639",
    "end": "978000"
  },
  {
    "text": "there it's a good option to explore use a lookup table how big would the table",
    "start": "978000",
    "end": "984079"
  },
  {
    "text": "be it would be fairly large so unless we kind of find a way to carve the space",
    "start": "985399",
    "end": "990639"
  },
  {
    "text": "better we we would need to uh to um have a very large table or kind of make sure",
    "start": "990639",
    "end": "995759"
  },
  {
    "text": "we we use a table for only like subsets of uh these digits um other",
    "start": "995759",
    "end": "1001720"
  },
  {
    "text": "ideas yes binary search on the number excellent so actually kind of uh take",
    "start": "1001720",
    "end": "1008560"
  },
  {
    "text": "the like the middle bit like 32 that kind of stuff actually that's a very good idea but it runs a bit of fall of",
    "start": "1008560",
    "end": "1015600"
  },
  {
    "text": "the law of small numbers oh I didn't mention that right it's all",
    "start": "1015600",
    "end": "1021519"
  },
  {
    "text": "part of a ploy i paid that guy so um so the point the point is the law of",
    "start": "1021519",
    "end": "1027360"
  },
  {
    "text": "small numbers says this most numbers in a program are small right there's a law of big numbers",
    "start": "1027360",
    "end": "1033038"
  },
  {
    "text": "which is completely different statistics so the law of small numbers says in most programs you're dealing with like",
    "start": "1033039",
    "end": "1038480"
  },
  {
    "text": "numbers between like one and 100 and that's most are zero like 90% are zero",
    "start": "1038480",
    "end": "1044000"
  },
  {
    "text": "and 90% of all strings are empty so that's your baseline and then you have a few small numbers and you have very few",
    "start": "1044000",
    "end": "1050160"
  },
  {
    "text": "very large numbers so uh that binary search is going to assume that you're the the most likely thing you're looking",
    "start": "1050160",
    "end": "1056720"
  },
  {
    "text": "for is a number that's in the billions which is unlikely right so although it's",
    "start": "1056720",
    "end": "1062559"
  },
  {
    "text": "it's a great it's a it's sort of it's a great idea to uh to get us excited here other",
    "start": "1062559",
    "end": "1069840"
  },
  {
    "text": "ideas I kind of uh destroyed the I destroyed the mood here yes huh a bias",
    "start": "1070600",
    "end": "1078080"
  },
  {
    "text": "kind of okay oh all right so that kind of gets us to uh the following",
    "start": "1078080",
    "end": "1083160"
  },
  {
    "text": "point um and here I have a few things to say about this function number one it it",
    "start": "1083160",
    "end": "1088240"
  },
  {
    "text": "features an infinite loop an ostensibly infinite loop like this right semicolons",
    "start": "1088240",
    "end": "1093679"
  },
  {
    "text": "for like forever all right and uh let me pose it the following if you want to write fast",
    "start": "1093679",
    "end": "1101200"
  },
  {
    "text": "code you always have to start with an infinite loop like the first I want to make this",
    "start": "1101200",
    "end": "1106960"
  },
  {
    "text": "function fast the first thing you write is this forever i know it's paradoxical because",
    "start": "1106960",
    "end": "1114000"
  },
  {
    "text": "infinite loops take a very long time right but actually they it's an infinite",
    "start": "1114000",
    "end": "1119440"
  },
  {
    "text": "loop goes like this it's the least it's the least work to loop right because",
    "start": "1119440",
    "end": "1124799"
  },
  {
    "text": "it's a jump at the beginning of the loop it there's not no work there um I've uh been working at Facebook for",
    "start": "1124799",
    "end": "1131120"
  },
  {
    "text": "almost six years and I've interviewed hund literally hundreds of people so I've I've held like the record of like",
    "start": "1131120",
    "end": "1137600"
  },
  {
    "text": "the most whatever the guy who interviewed the most people at Facebook for a while so that was because I kind",
    "start": "1137600",
    "end": "1143760"
  },
  {
    "text": "of was at these events hiring events and university and whatnot so I would ask people please implement for me",
    "start": "1143760",
    "end": "1151400"
  },
  {
    "text": "str brute force but just don't do any unnecessary work str find the substring",
    "start": "1151400",
    "end": "1158240"
  },
  {
    "text": "in a string right it's the C function what could be easier first of all like it's it's amazing like you you look at",
    "start": "1158240",
    "end": "1164880"
  },
  {
    "text": "the social phenomena underlying this question so first of all like 20% of the people can't get it working",
    "start": "1164880",
    "end": "1171880"
  },
  {
    "text": "programmers so 20% of cannot get it off the ground cannot implement it under interview pressure to start with which I",
    "start": "1171880",
    "end": "1180240"
  },
  {
    "text": "found amazing it's very interesting it tells you that you know interview pressure is huge and also So that you",
    "start": "1180240",
    "end": "1186960"
  },
  {
    "text": "know for a not very experienced programmer it's difficult to kind of get this rolling um the second thing is a",
    "start": "1186960",
    "end": "1194240"
  },
  {
    "text": "lot of people would start with a structure loop they say four I equals zero I less than oh wait a second oh str",
    "start": "1194240",
    "end": "1203080"
  },
  {
    "text": "of no no that's not going to get you there right because it's quadratic it's going to evaluate",
    "start": "1203080",
    "end": "1209400"
  },
  {
    "text": "str so then other you know the oh so as soon as I pointed that out they would see oh um size n equals str len and then",
    "start": "1209400",
    "end": "1217840"
  },
  {
    "text": "they would iterate and stuff and the problem there does was in strr if you start with a structured loop like a",
    "start": "1217840",
    "end": "1224400"
  },
  {
    "text": "classic for loop with you know initialization condition increment it's",
    "start": "1224400",
    "end": "1230880"
  },
  {
    "text": "just not going to work it's going you're going to do a lot of unnecessary work so I would say if you want to write",
    "start": "1230880",
    "end": "1237760"
  },
  {
    "text": "fast code start with that forever and then if you get to the",
    "start": "1237760",
    "end": "1243600"
  },
  {
    "text": "structure loops you know naturally you can uh rewrite it but um don't start with a structure loop because it sets up",
    "start": "1243600",
    "end": "1249840"
  },
  {
    "text": "your mind the wrong way to width this cannot be structured",
    "start": "1249840",
    "end": "1255039"
  },
  {
    "text": "in into a classic for loop and the way it works is the following law of being law of small numbers if the value is",
    "start": "1255039",
    "end": "1261600"
  },
  {
    "text": "less than 10 then I know what to do I'm just returning result I'm done and then 100 1,000 and 10,000 and",
    "start": "1261600",
    "end": "1269520"
  },
  {
    "text": "I'm going to do an addition remember one cycle each addition here is one cycle and then if I got to something",
    "start": "1269520",
    "end": "1277840"
  },
  {
    "text": "greater than 10,000 I'm going to reset my calculation by four digits at a time",
    "start": "1277840",
    "end": "1284320"
  },
  {
    "text": "by dividing by 10,000 and then I'm going to add four to the result and",
    "start": "1284320",
    "end": "1291880"
  },
  {
    "text": "continue so what is this is not unrolling because many people look at this and say \"Oh this is unrolling of",
    "start": "1291880",
    "end": "1297919"
  },
  {
    "text": "course it's a classic.\" No it's not unrolling because unrolling is you do the same thing many times and this is",
    "start": "1297919",
    "end": "1304559"
  },
  {
    "text": "sort of it's just different it looks like it um so what what is the strength",
    "start": "1304559",
    "end": "1310240"
  },
  {
    "text": "reduction we've done here what did we get rid of and what did",
    "start": "1310240",
    "end": "1316559"
  },
  {
    "text": "we",
    "start": "1316559",
    "end": "1318799"
  },
  {
    "text": "Yes right so we have u we have more comparisons and we have a few more",
    "start": "1322679",
    "end": "1328120"
  },
  {
    "text": "additions right but uh we do 4x fewer divisions right which is awesome and for",
    "start": "1328120",
    "end": "1335520"
  },
  {
    "text": "small numbers we're in really good shape by the way another mistake that this code has just kind of tactically looking",
    "start": "1335520",
    "end": "1342400"
  },
  {
    "text": "at it you can tell it's inefficient by the zero here you there's no number that",
    "start": "1342400",
    "end": "1348720"
  },
  {
    "text": "has zero digits so starting at zero is already a loss you're wasting time",
    "start": "1348720",
    "end": "1353919"
  },
  {
    "text": "you should start at one like that's the absolute minimum digits a number can have it should be one right so already",
    "start": "1353919",
    "end": "1360159"
  },
  {
    "text": "I'm kind of doing a zero and then I'm incrementing like an idiot and it's just a mess right in contrast this is like",
    "start": "1360159",
    "end": "1366400"
  },
  {
    "text": "clearly just goes the minimum road to wherever it needs to be great how much",
    "start": "1366400",
    "end": "1372799"
  },
  {
    "text": "faster do you think this is going to be how estimate for me who gives me like I",
    "start": "1372799",
    "end": "1378400"
  },
  {
    "text": "don't know 5% or or more 5% raise your hand 5% or More more okay uh 20% or more",
    "start": "1378400",
    "end": "1386320"
  },
  {
    "text": "let's give me 20% 50% one and a half speed improvement",
    "start": "1386320",
    "end": "1391520"
  },
  {
    "text": "or more one and a half 1.5x a few hands all right thank you i have",
    "start": "1391520",
    "end": "1397240"
  },
  {
    "text": "a you know an auction here right i should have that fast talk of",
    "start": "1397240",
    "end": "1403280"
  },
  {
    "text": "auctioneers in America right actually it's a lot better than that we're looking at an improvement between two",
    "start": "1403280",
    "end": "1409039"
  },
  {
    "text": "and six times in speed so it's staggering and by the way",
    "start": "1409039",
    "end": "1418039"
  },
  {
    "text": "um how about this drop here how who can explain it for us there's a drop here",
    "start": "1418039",
    "end": "1424080"
  },
  {
    "text": "there's a drop here and there's a drop here sorry",
    "start": "1424080",
    "end": "1430320"
  },
  {
    "text": "yes it's exactly where we take the total of a division this is we do the division here we're going to do one here and one",
    "start": "1430320",
    "end": "1437039"
  },
  {
    "text": "here so it's exactly at the you know 8 to nine digits and 12 to 13 and that kind of stuff",
    "start": "1437039",
    "end": "1443519"
  },
  {
    "text": "why is it not happening at four excellent question i don't know i'm not kidding so I've been",
    "start": "1443919",
    "end": "1449840"
  },
  {
    "text": "looking at this for for a long time trying to identify the pattern here at the beginning and I can't apparently the",
    "start": "1449840",
    "end": "1456640"
  },
  {
    "text": "you know sort of other noises in the uh in the cost of the function are influencing this to the extent you don't",
    "start": "1456640",
    "end": "1462720"
  },
  {
    "text": "see the cost of the the price of the first division but it's a very pertinent thing to ask yourself about",
    "start": "1462720",
    "end": "1469240"
  },
  {
    "text": "right awesome so we have like a very nice uh going here on a useless function",
    "start": "1469240",
    "end": "1475840"
  },
  {
    "text": "that's terrific i'm very uh pleased by that we improved to up to a zoo a",
    "start": "1475840",
    "end": "1481440"
  },
  {
    "text": "function that nobody has a use for however uh we're going to see soon that it's uh usable within another context",
    "start": "1481440",
    "end": "1488720"
  },
  {
    "text": "and now I'm going to talk about minimization of indirect writes indirect writes are writes",
    "start": "1488720",
    "end": "1494559"
  },
  {
    "start": "1492000",
    "end": "1492000"
  },
  {
    "text": "through a pointer like you have like an array element and you write through the index of the array so it's not like a",
    "start": "1494559",
    "end": "1500240"
  },
  {
    "text": "right to a ver local variable with a name like a equals 5 or a++ or whatever",
    "start": "1500240",
    "end": "1505840"
  },
  {
    "text": "so that's not an indirect right that's a sort of a direct right um the indirect",
    "start": "1505840",
    "end": "1511520"
  },
  {
    "text": "rights are your enemy you should be very very very very um kind of parsimonious",
    "start": "1511520",
    "end": "1518240"
  },
  {
    "text": "about giving them away you shouldn't give them away right why because",
    "start": "1518240",
    "end": "1523919"
  },
  {
    "text": "indirect writes are next to impossible to put and register and registering means the compiler takes automatically",
    "start": "1523919",
    "end": "1530000"
  },
  {
    "text": "for you things and puts them in registers like things like values variables names and puts them in",
    "start": "1530000",
    "end": "1535679"
  },
  {
    "text": "registers and it all goes amazingly well um another thing that uh is kind of",
    "start": "1535679",
    "end": "1541679"
  },
  {
    "text": "subtle is that a write an indirect write is really a read and a",
    "start": "1541679",
    "end": "1546919"
  },
  {
    "text": "write whenever you write something you actually do two things you do a read and then a right who knows why yes Hubert",
    "start": "1546919",
    "end": "1554960"
  },
  {
    "text": "cash line cash line more explanation please",
    "start": "1554960",
    "end": "1560720"
  },
  {
    "text": "you have to take the cash line and put it into a modified statement protocol and then write it back again",
    "start": "1560720",
    "end": "1567919"
  },
  {
    "text": "that's right thank you so all transfers in memory do not occur at word size level people are you know like people",
    "start": "1567919",
    "end": "1574240"
  },
  {
    "text": "who are not kind of hardware sort of um I don't know savvy tend to think that",
    "start": "1574240",
    "end": "1579760"
  },
  {
    "text": "all transfers occur at like it's a 64-bit machine 64-bit transfers from you",
    "start": "1579760",
    "end": "1586559"
  },
  {
    "text": "know of words between memory and the machine yes it's actually not 64bit it's",
    "start": "1586559",
    "end": "1592000"
  },
  {
    "text": "64 byt so they're right about one thing the number is the same it's just different units of measure that was a",
    "start": "1592000",
    "end": "1599159"
  },
  {
    "text": "joke just I'm going to raise my hand whenever I make one so there you know so",
    "start": "1599159",
    "end": "1605039"
  },
  {
    "text": "just laugh everything you know there should be a guy with a note laugh so actually when whenever you want",
    "start": "1605039",
    "end": "1611760"
  },
  {
    "text": "to write a word like eight uh sorry 64 bits like you know like four bytes or",
    "start": "1611760",
    "end": "1617840"
  },
  {
    "text": "eight bytes it's you know what would you do as an engineer if you could only read and write 64 bytes at a time you read",
    "start": "1617840",
    "end": "1624240"
  },
  {
    "text": "the whole goddamn thing you write the little one thing and they write the whole goddamn thing back and that's the",
    "start": "1624240",
    "end": "1629279"
  },
  {
    "text": "way it works so read is actually a write is actually a read followed by write",
    "start": "1629279",
    "end": "1635840"
  },
  {
    "text": "there's no instruction in the Intel set that tells you please write me the whole cache line right now i've looked for a",
    "start": "1635840",
    "end": "1644080"
  },
  {
    "text": "way for a while i couldn't find it there are some other architectures that do allow it and those experience like 2x",
    "start": "1644080",
    "end": "1650159"
  },
  {
    "text": "faster writes because you don't need to read anymore and he makes the cache dirty uh the problem with the making a",
    "start": "1650159",
    "end": "1656559"
  },
  {
    "text": "cache dirty after a write is that you know cache you you need to kind of",
    "start": "1656559",
    "end": "1661679"
  },
  {
    "text": "replace old pages with new pages and caches like classic cache architecture whenever the cache is dirty you need to",
    "start": "1661679",
    "end": "1668559"
  },
  {
    "text": "write back the cache the that particular cache line into memory if it's dirty if",
    "start": "1668559",
    "end": "1674399"
  },
  {
    "text": "it's not dirty just throw it away so it's better to not dirty the cache so all right",
    "start": "1674399",
    "end": "1681240"
  },
  {
    "text": "um let's see how to apply this uh awesome piece of knowledge here so we're",
    "start": "1681240",
    "end": "1686960"
  },
  {
    "text": "going to implement the U64 to ASI and our baseline looks like the following we",
    "start": "1686960",
    "end": "1692640"
  },
  {
    "text": "have a value and we want to deposit the value at some address in form of ASI characters so that's a you know integral",
    "start": "1692640",
    "end": "1700080"
  },
  {
    "text": "to ASKI conversion it's a classic routine and if you crack up on any library or any book on how to do these",
    "start": "1700080",
    "end": "1706720"
  },
  {
    "text": "things you're going to see that the way it works is called Horner scheme the algorithm and it goes well I'm going to",
    "start": "1706720",
    "end": "1714080"
  },
  {
    "text": "deposit the number starting from the least significant digit which is ask zero plus the remainder of dividing",
    "start": "1714080",
    "end": "1721840"
  },
  {
    "text": "value by 10 and that's my last digit this is my last digit here value divided by 10 uh sorry that value um remainder",
    "start": "1721840",
    "end": "1730240"
  },
  {
    "text": "10 is my least significant digit and in order to bring him into the asky realm I'm going to add as zero to it and if",
    "start": "1730240",
    "end": "1737760"
  },
  {
    "text": "it's zero I get aski zero and if it's n I get asking nine is this right this is obvious right okay great just nod for me",
    "start": "1737760",
    "end": "1745520"
  },
  {
    "text": "please smile and nod okay awesome um and then I'm going to make progress by",
    "start": "1745520",
    "end": "1750640"
  },
  {
    "text": "dividing the value by 10 and therefore I'm going to get the the next uh the next digit And I do this in a loop until",
    "start": "1750640",
    "end": "1756799"
  },
  {
    "text": "I run out of value um the problem with this scheme is that I'm obtaining the number in reverse",
    "start": "1756799",
    "end": "1764039"
  },
  {
    "text": "form i'm getting the last significant least significant digit first and I'm getting the most significant digit last",
    "start": "1764039",
    "end": "1770480"
  },
  {
    "text": "which is terrible because then I need to reverse the the whole thing yes so that's what I'm doing in this little uh",
    "start": "1770480",
    "end": "1776159"
  },
  {
    "text": "fix up loop here which is I'm going to swap I'm going to reverse this could be like std reverse start destination so",
    "start": "1776159",
    "end": "1783120"
  },
  {
    "text": "yeah I'm just explicitating the loop here to make it clear that's this is going on um question for everybody how",
    "start": "1783120",
    "end": "1790880"
  },
  {
    "text": "do we improve this function how do we make it faster",
    "start": "1790880",
    "end": "1798000"
  },
  {
    "text": "yes measure the number of that's what we need because right now we're discovering the number of uh digits simultaneously",
    "start": "1799559",
    "end": "1806799"
  },
  {
    "text": "with actually writing them so one one uh approach that was suggested was how about we figure out how many digits",
    "start": "1806799",
    "end": "1813279"
  },
  {
    "text": "there are and then we know how many digits we need to write and we write them backwards in the first",
    "start": "1813279",
    "end": "1819240"
  },
  {
    "text": "place all right well amazingly we actually have a function that does that",
    "start": "1819240",
    "end": "1824799"
  },
  {
    "text": "in it remember digit 10 all right so here you got to understand this is",
    "start": "1824799",
    "end": "1831200"
  },
  {
    "text": "unclear that it's going to make things any better because it's a gambit we're",
    "start": "1831200",
    "end": "1836399"
  },
  {
    "text": "going through the number twice we're doing twice as many kind of primitive",
    "start": "1836399",
    "end": "1841440"
  },
  {
    "text": "operations with the number but we're taking that risk because we just said minimize what was",
    "start": "1841440",
    "end": "1849640"
  },
  {
    "text": "that min minimize indirect writes and these are all all that loop at the end",
    "start": "1849640",
    "end": "1855039"
  },
  {
    "text": "of the function is indirect rights it's rights to the pointers so the gambit is",
    "start": "1855039",
    "end": "1860799"
  },
  {
    "text": "I'm going to do more calculations by looking at the number twice but I'm going to save on the uh on",
    "start": "1860799",
    "end": "1868159"
  },
  {
    "text": "these all of this fix up loop I'm going to throw away all right awesome so great great",
    "start": "1868159",
    "end": "1875520"
  },
  {
    "text": "the first line in the new function is digits 10 yay so we got to use it it's not useless",
    "start": "1875520",
    "end": "1881919"
  },
  {
    "text": "um and we're going to say auto counts result gets digits 10 and then I'm going to position myself at the result minus",
    "start": "1881919",
    "end": "1888080"
  },
  {
    "text": "one which is the position of the last digit and I'm going to write buffer position and decor position so I'm going",
    "start": "1888080",
    "end": "1894080"
  },
  {
    "text": "to write the number backwards in the first place and when I'm done I'm done even better uh remember the law of big",
    "start": "1894080",
    "end": "1901039"
  },
  {
    "text": "numbers uh the law of small numbers while v greater than or equal to 10",
    "start": "1901039",
    "end": "1906720"
  },
  {
    "text": "because if I have a number that's only one digit I can do it a lot simpler look at the last two lines of that thing i'm",
    "start": "1906720",
    "end": "1914720"
  },
  {
    "text": "just going to cast the last digit to u and add the skis0 to it and that's my last digit and if it just so happens I I",
    "start": "1914720",
    "end": "1922159"
  },
  {
    "text": "have a small number that I'm not going to go through that whole loop at all so I'm just going to go through the very",
    "start": "1922159",
    "end": "1927519"
  },
  {
    "text": "end make sense yes all right it's not very",
    "start": "1927519",
    "end": "1933320"
  },
  {
    "text": "complicated awesome so well my question to you is",
    "start": "1933320",
    "end": "1938880"
  },
  {
    "text": "like is this faster how much how many percentage percentage points are going to give me this is actually it's not",
    "start": "1938880",
    "end": "1946559"
  },
  {
    "text": "it's a function that is actually useful it's a library function that is can be",
    "start": "1946559",
    "end": "1951679"
  },
  {
    "text": "actually very intensively used in things like there are databases that only work",
    "start": "1951679",
    "end": "1957039"
  },
  {
    "text": "with ASI transfers and there's a bunch of web frameworks that only work with ASKI data if you transport a lot of",
    "start": "1957039",
    "end": "1963200"
  },
  {
    "text": "numbers across these interfaces you're going to have to do a lot of that you're going to have to do a lot of conversion",
    "start": "1963200",
    "end": "1969120"
  },
  {
    "text": "to ASI and a lot of conversion from ASKI to wit the hive database which is a very",
    "start": "1969120",
    "end": "1974880"
  },
  {
    "text": "large scale database used at Facebook they had this problem which was all transfers occurred in ASKI format and",
    "start": "1974880",
    "end": "1981840"
  },
  {
    "text": "whenever you read a bunch of data you would have to go through this and back a lot of times and it would be like you",
    "start": "1981840",
    "end": "1988080"
  },
  {
    "text": "know 20% of the whole runtime of an interesting application just the conversion which is amazing anyhow",
    "start": "1988080",
    "end": "1995519"
  },
  {
    "text": "getting back here what what is the improvement you're looking at we're looking at Here are we looking at I don't know 25% anyone or",
    "start": "1995519",
    "end": "2004440"
  },
  {
    "text": "more everyone's like fool me once huh all right so not a lot of you are",
    "start": "2004440",
    "end": "2009840"
  },
  {
    "text": "like believers here let me kind of tell you what I believe the the sources of",
    "start": "2009840",
    "end": "2016240"
  },
  {
    "start": "2010000",
    "end": "2010000"
  },
  {
    "text": "possible improvements are few indirect writes regular access patterns so we're",
    "start": "2016240",
    "end": "2022000"
  },
  {
    "text": "going to go through memory just once backwards and that's means prefetching and good things fast on small numbers",
    "start": "2022000",
    "end": "2029120"
  },
  {
    "text": "and data dependencies are reduced you're",
    "start": "2029120",
    "end": "2035159"
  },
  {
    "text": "late all right um you're not missing out i said nothing interesting so far um",
    "start": "2035159",
    "end": "2041919"
  },
  {
    "text": "we're looking at an amazing like two plus improvement on small numbers up to",
    "start": "2041919",
    "end": "2047279"
  },
  {
    "text": "like one point you know 20% improvement for very large numbers on a function that was considered at its optimum",
    "start": "2047279",
    "end": "2056000"
  },
  {
    "text": "like if you crack open GCC or Visual",
    "start": "2056000",
    "end": "2061079"
  },
  {
    "text": "Studio's implementation of this primitive you're going to see that everybody does it the first way or",
    "start": "2061079",
    "end": "2067480"
  },
  {
    "text": "baseline nobody does it this way and the fact that we apply two simple principles",
    "start": "2067480",
    "end": "2074560"
  },
  {
    "text": "strength reduction minimize indirect rights to completely redesign and rethink an algorithm that was considered",
    "start": "2074560",
    "end": "2082679"
  },
  {
    "text": "unimprovable this should get you very excited so this is why uh you're here presumably um so we're looking at a very",
    "start": "2082679",
    "end": "2090480"
  },
  {
    "text": "significant improvement which can actually make a difference in the bottom line of an intensive",
    "start": "2090480",
    "end": "2096280"
  },
  {
    "text": "application so um switching gears a bit right now I'm going to talk about a topic that is very dear to me which I",
    "start": "2096280",
    "end": "2102400"
  },
  {
    "text": "call the forgotten parallelism because it's a very hot topic right now parallel programming and all that and there is",
    "start": "2102400",
    "end": "2109119"
  },
  {
    "text": "something that uh we tend to forget it exists",
    "start": "2109119",
    "end": "2114800"
  },
  {
    "text": "um to wit let me um uh bring up uh can",
    "start": "2114800",
    "end": "2119920"
  },
  {
    "text": "anyone see this like I'm I'm thinking like the distance to the projector and the you",
    "start": "2119920",
    "end": "2125520"
  },
  {
    "text": "know the the resolution here thanks for taking that photo it's not going to help so uh does anyone see the",
    "start": "2125520",
    "end": "2132920"
  },
  {
    "text": "letters all right if you see the letters you're tailgating right so um it's a CPU",
    "start": "2132920",
    "end": "2139359"
  },
  {
    "text": "and the way it works is the data flows top to bottom this is traditional CPU u you know kind of diagrams and we're",
    "start": "2139359",
    "end": "2146320"
  },
  {
    "text": "looking at the the lifetime of an instruction here which is like you know the reddish stuff is uh sort of the",
    "start": "2146320",
    "end": "2151680"
  },
  {
    "text": "prefetch buffer and you know instruction decoder and stuff the instructions go there through the childhood and then",
    "start": "2151680",
    "end": "2157440"
  },
  {
    "text": "they get to the the adolescence which is they're going to have um um sort of a",
    "start": "2157440",
    "end": "2163200"
  },
  {
    "text": "register allocation and there there's going to be some more slicing and dicing but what I'm trying to get here is where",
    "start": "2163200",
    "end": "2169920"
  },
  {
    "text": "the action happens which is the ALU the arithmetic logic unit",
    "start": "2169920",
    "end": "2176320"
  },
  {
    "text": "which contains and this is sort of you don't need to see the letters to figure this out there's a lot of stuff going on",
    "start": "2176320",
    "end": "2182560"
  },
  {
    "text": "in parallel There's there are a lot of things that have like arrows flowing into them and",
    "start": "2182560",
    "end": "2188000"
  },
  {
    "text": "out of them but they are horizontally scaled they are scaled like this and you",
    "start": "2188000",
    "end": "2193440"
  },
  {
    "text": "know presumably I get to kind of feed them all at once if I kind of uh",
    "start": "2193440",
    "end": "2198720"
  },
  {
    "text": "organize my ducks in a row right and then I have like sort of the uh memory",
    "start": "2198720",
    "end": "2204240"
  },
  {
    "text": "order buffer to kind of rearrange properly the rights and stuff and here's how the data goes out from the execution",
    "start": "2204240",
    "end": "2211520"
  },
  {
    "text": "the instructions get retired and it's all good and then we have on the side caches and",
    "start": "2211520",
    "end": "2217400"
  },
  {
    "text": "whatnot so the interesting thing is here that this is just one core it's not one",
    "start": "2217400",
    "end": "2222920"
  },
  {
    "text": "CPU and you have like several of those literally in your",
    "start": "2222920",
    "end": "2228440"
  },
  {
    "text": "pocket in your pocket in your laptop on a desktop machine on your blade in the",
    "start": "2228440",
    "end": "2234000"
  },
  {
    "text": "data center and if you don't light these up if you don't get to use",
    "start": "2234000",
    "end": "2240839"
  },
  {
    "text": "these they remain unlit forever no many no matter how many of these you have no",
    "start": "2240839",
    "end": "2247040"
  },
  {
    "text": "matter how much you scale in the traditional parallelism sense if you don't get to use these they remain",
    "start": "2247040",
    "end": "2253440"
  },
  {
    "text": "unused and you're wasting actually you're wasting hardware and actually you're wasting",
    "start": "2253440",
    "end": "2260000"
  },
  {
    "text": "power as well because I got to tell you even though they're not used they still need to be clocked so they're going to",
    "start": "2260000",
    "end": "2265599"
  },
  {
    "text": "like clock accounts for like 30% of the circuitry and the power in the CPU so you're going to there's a lot there's a",
    "start": "2265599",
    "end": "2271520"
  },
  {
    "text": "bunch of stuff going on and um um essentially you know if they stay",
    "start": "2271520",
    "end": "2277400"
  },
  {
    "text": "dark there's no way you can recover that parallelism that you lost so okay let me actually read to you",
    "start": "2277400",
    "end": "2284160"
  },
  {
    "text": "what this is store data agre addressing unit this is for address computation",
    "start": "2284160",
    "end": "2289440"
  },
  {
    "text": "integer um uh branching unit um add and",
    "start": "2289440",
    "end": "2294800"
  },
  {
    "text": "move SSC integer uh floating point add floatingoint ad SSC add floatingpoint",
    "start": "2294800",
    "end": "2301520"
  },
  {
    "text": "multiplication multiplication multiplication and division so you have all of these things that could actually",
    "start": "2301520",
    "end": "2307440"
  },
  {
    "text": "happen simultaneously and the question is now like for us as engineers like you",
    "start": "2307440",
    "end": "2313680"
  },
  {
    "text": "know I don't know the instructions that take me to that beautiful world inside the core and I have no idea what",
    "start": "2313680",
    "end": "2319839"
  },
  {
    "text": "assembler I need to use to get to light those up and you know yeah I know the concept it sounds very fun and uh but",
    "start": "2319839",
    "end": "2328320"
  },
  {
    "text": "you know what can I do here i'm I'm I know I++ okay what what happens here",
    "start": "2328320",
    "end": "2334160"
  },
  {
    "text": "what happens if I say app I plus equal 2 you know etc so what's how are these instructions going to translate into uh",
    "start": "2334160",
    "end": "2341680"
  },
  {
    "text": "lighting these uh these awesome units up well actually there is a",
    "start": "2341680",
    "end": "2347839"
  },
  {
    "text": "way um this is it this is the secret to",
    "start": "2349000",
    "end": "2354400"
  },
  {
    "text": "everything if you want better instruction level parallelism all you have to do at the",
    "start": "2354400",
    "end": "2361440"
  },
  {
    "text": "source code level is have fewer data dependencies which means we get to",
    "start": "2361440",
    "end": "2366640"
  },
  {
    "text": "define those first what are data",
    "start": "2366640",
    "end": "2371279"
  },
  {
    "text": "dependencies what is a data dependency uh it simply means the the um",
    "start": "2371960",
    "end": "2380960"
  },
  {
    "text": "start of an operation depends on the result of an operation preceding it that",
    "start": "2380960",
    "end": "2386000"
  },
  {
    "text": "means this particular operation is dependent upon the previous operation and we want to make as few of",
    "start": "2386000",
    "end": "2393040"
  },
  {
    "text": "those as possible as humanly possible so we want to minimize data dependencies um",
    "start": "2393040",
    "end": "2399359"
  },
  {
    "start": "2398000",
    "end": "2398000"
  },
  {
    "text": "and my favorite method of teaching is by means of example so let's actually do the opposite function ask it to",
    "start": "2399359",
    "end": "2406599"
  },
  {
    "text": "integer and the way it goes is I'm going to that enforces like an assert you can think of it is going to throw an",
    "start": "2406599",
    "end": "2412400"
  },
  {
    "text": "exception if the condition is not true i'm validating that uh I'm getting the right pointers it's STL style begin and",
    "start": "2412400",
    "end": "2419280"
  },
  {
    "text": "end and I want to convert that particular string into um into a",
    "start": "2419280",
    "end": "2426920"
  },
  {
    "text": "number awesome so then I'm going to start with a result and again if you look at any book they're going to do it",
    "start": "2426920",
    "end": "2432240"
  },
  {
    "text": "the following way result gets result times 10 plus the current digit and I'm",
    "start": "2432240",
    "end": "2438800"
  },
  {
    "text": "going to increase the result by you know going through the digits from most significant to the least significant and",
    "start": "2438800",
    "end": "2445280"
  },
  {
    "text": "at the end I'm going to get the actual number and there's that enforce there inside the loop it's kind of verifying",
    "start": "2445280",
    "end": "2451440"
  },
  {
    "text": "that I'm getting only digits and not something else are are you following is this sort",
    "start": "2451440",
    "end": "2456800"
  },
  {
    "text": "of a classic right so I'm sure any of us could sit down and actually write this",
    "start": "2456800",
    "end": "2462079"
  },
  {
    "text": "down and it's it's It works it's a classic It's a classic approach and of",
    "start": "2462079",
    "end": "2467440"
  },
  {
    "text": "course it's suboptimal that's the theme of the day right it's sub-optimal i hate it it's",
    "start": "2467440",
    "end": "2475599"
  },
  {
    "text": "terrible actually I'm going to prove by the end of this talk you're going to hate this you're going to you're going to have a physical aversion toward this",
    "start": "2475599",
    "end": "2483240"
  },
  {
    "text": "function because I'm going to have you look at the underlying math that's happening inside the function and when",
    "start": "2483240",
    "end": "2490560"
  },
  {
    "start": "2488000",
    "end": "2488000"
  },
  {
    "text": "you write it in math format it just looks awful like first of all like consider",
    "start": "2490560",
    "end": "2497119"
  },
  {
    "text": "this right off the bat I'm multiplying by zero like an idiot there 0 * 10 + 5 that's my most significant",
    "start": "2497119",
    "end": "2503480"
  },
  {
    "text": "digit everything time 10 plus two which is the second digit",
    "start": "2503480",
    "end": "2509440"
  },
  {
    "text": "right everything time 10 + 3 which is the third digit",
    "start": "2509440",
    "end": "2515400"
  },
  {
    "text": "everything multiply by 10 because I'm you know kind of you know making progress with my digits here plus 9",
    "start": "2515400",
    "end": "2523000"
  },
  {
    "text": "everything times 10 I I don't I don't want to have a heart attack right now so I'm not going to continue but in essence",
    "start": "2523000",
    "end": "2529200"
  },
  {
    "text": "what I'm saying here is that we're forcing look at the parenthes it looks ugly on the page you can't format it",
    "start": "2529200",
    "end": "2535800"
  },
  {
    "text": "right and that's not because I parenthesis are fine in lisp the only place where parenthesis is",
    "start": "2535800",
    "end": "2542319"
  },
  {
    "text": "great it's in list because in list they have a different meaning they make a one-dimensional structure represent a",
    "start": "2542319",
    "end": "2548560"
  },
  {
    "text": "two-dimensional uh tree so it's completely different in math what do parenthesis do what is the purpose of",
    "start": "2548560",
    "end": "2556480"
  },
  {
    "text": "you inserting a parenthesis in math you force the order of operation to",
    "start": "2556480",
    "end": "2562960"
  },
  {
    "text": "something that's not natural because if it were natural you would need parenthesis",
    "start": "2562960",
    "end": "2569000"
  },
  {
    "text": "so you know parenthesis are actually dependencies because it means I need to do this before I do anything else so",
    "start": "2569000",
    "end": "2576960"
  },
  {
    "text": "essentially like everything depends on just the step before in this approach and you can see it by showing the",
    "start": "2576960",
    "end": "2584160"
  },
  {
    "text": "arithmetic behind the computation and this looks",
    "start": "2584160",
    "end": "2589640"
  },
  {
    "text": "ugly right so you know one of my goals in rethinking this was you know what I want to get rid of the pars here I want",
    "start": "2589640",
    "end": "2596400"
  },
  {
    "text": "to make it beautiful and beautiful is going to make it fast",
    "start": "2596400",
    "end": "2602200"
  },
  {
    "start": "2602000",
    "end": "2602000"
  },
  {
    "text": "right so you know there's a number of lines of thinking I took and one was how about some divide and conquer thing like",
    "start": "2602200",
    "end": "2608160"
  },
  {
    "text": "a binary search like going to divide the string into two sections and that was kind of an interesting start I kind of",
    "start": "2608160",
    "end": "2614240"
  },
  {
    "text": "uh so yeah so we have like this number is like 523 * 1,000 + 9 to4 so that gave",
    "start": "2614240",
    "end": "2620800"
  },
  {
    "text": "me the following thought how about this representation",
    "start": "2620800",
    "end": "2625920"
  },
  {
    "start": "2621000",
    "end": "2621000"
  },
  {
    "text": "and how what about I implement an algorithm that's going to do this instead of",
    "start": "2625920",
    "end": "2632599"
  },
  {
    "text": "that right oh this is beautiful because it has no pars and it's actually for you",
    "start": "2632599",
    "end": "2639920"
  },
  {
    "text": "can format it nicely it does look beautiful right and it does no",
    "start": "2639920",
    "end": "2645520"
  },
  {
    "text": "unnecessary operation there's no four* 1 or there's no time zero anything it's not it's you know it's just the minimum",
    "start": "2645520",
    "end": "2652480"
  },
  {
    "text": "amount of work that gets you there and you can see the number here on vertical is the same number as there and you have",
    "start": "2652480",
    "end": "2658640"
  },
  {
    "text": "a number of constants multiples of 10 and therefore let us actually implement",
    "start": "2658640",
    "end": "2663760"
  },
  {
    "text": "this guy which has much fewer data dependencies actually okay let me um let me show you",
    "start": "2663760",
    "end": "2671839"
  },
  {
    "start": "2670000",
    "end": "2670000"
  },
  {
    "text": "the code first so I'm going to write like a very large not very large you",
    "start": "2671839",
    "end": "2678319"
  },
  {
    "text": "know 20 powers of 10 it's something I'm very good at",
    "start": "2678319",
    "end": "2683599"
  },
  {
    "text": "writing like large number of zeros is I'm very apt at that so you know and",
    "start": "2683599",
    "end": "2688720"
  },
  {
    "text": "it's going to be a triangle right because it's going to be like that large number followed by numbers smaller by",
    "start": "2688720",
    "end": "2693839"
  },
  {
    "text": "one zero and so on up up until like the power of zero which is one and then I'm",
    "start": "2693839",
    "end": "2699119"
  },
  {
    "text": "going to go through the this particular array of constants uh this don't kind of",
    "start": "2699119",
    "end": "2704400"
  },
  {
    "text": "don't hold it against me this kind of the length of the array i should have written like 20 there it's like 20 minus C minus B what is this I doing where",
    "start": "2704400",
    "end": "2712319"
  },
  {
    "text": "where is it putting me placing me in the array it's placing me exactly at the",
    "start": "2712319",
    "end": "2717839"
  },
  {
    "text": "position of the most significant digit in this particular example here it's going to position me at",
    "start": "2717839",
    "end": "2723000"
  },
  {
    "text": "100,000 so it's positioning me at the right point for the most significant digit in the array and that's my",
    "start": "2723000",
    "end": "2729119"
  },
  {
    "text": "starting point for iteration and then I'm going to iterate from there incrementing I so",
    "start": "2729119",
    "end": "2735720"
  },
  {
    "text": "this this particular um function implements the underlying math that is",
    "start": "2735720",
    "end": "2742040"
  },
  {
    "text": "simpler and again the question for is is this going to be faster and if so is it",
    "start": "2742040",
    "end": "2748160"
  },
  {
    "text": "going to be significantly faster because we're interested in significant results here they think it's going to be better",
    "start": "2748160",
    "end": "2754000"
  },
  {
    "text": "i wouldn't waste your time right so let's look at the results whoa this is awesome or like",
    "start": "2754000",
    "end": "2761720"
  },
  {
    "text": "3.3x improvement for this kind of one digit and then it kind of decays to",
    "start": "2761720",
    "end": "2768200"
  },
  {
    "text": "2x so you got a two times 100% improvement again function that was",
    "start": "2768200",
    "end": "2773599"
  },
  {
    "text": "considered unimprovable i hope this get the silence",
    "start": "2773599",
    "end": "2779760"
  },
  {
    "text": "is not awkward i hope it's a sense like yeah that's kind of a cool thing yes yes and you know all that uh thinking is",
    "start": "2779760",
    "end": "2786560"
  },
  {
    "text": "going on right now in your minds pr is like oh my god I can't believe I'm sitting here it's like when is like that",
    "start": "2786560",
    "end": "2793079"
  },
  {
    "text": "break so 3.x to 2.x and nice enough like the most improvements are for small",
    "start": "2793079",
    "end": "2799359"
  },
  {
    "text": "numbers which is what I care about that's pretty awesome great so don't forget this",
    "start": "2799359",
    "end": "2806240"
  },
  {
    "text": "associative means paralyzable if you get something associative going the CPU",
    "start": "2806240",
    "end": "2811680"
  },
  {
    "text": "knows it's associative everybody knows like the whole the whole you know",
    "start": "2811680",
    "end": "2816720"
  },
  {
    "text": "arithmetic in the comparing the CP are rigged toward they know addition is",
    "start": "2816720",
    "end": "2822280"
  },
  {
    "text": "associative right so they can do it in any order so that's pretty awesome we",
    "start": "2822280",
    "end": "2827760"
  },
  {
    "text": "got a great improvement at high level by uh sorry at low level by using a very high level approach there's no assembly",
    "start": "2827760",
    "end": "2834400"
  },
  {
    "text": "here I mean you don't need to do anything clever you don't need to say oh there's this instruction you didn't know",
    "start": "2834400",
    "end": "2839599"
  },
  {
    "text": "about you know you should use the secret instruction that nobody knows robot and no you just use",
    "start": "2839599",
    "end": "2846800"
  },
  {
    "text": "um simple principles to get you there all right so let's actually make you see",
    "start": "2846800",
    "end": "2852079"
  },
  {
    "start": "2849000",
    "end": "2849000"
  },
  {
    "text": "that red line and force the verification that I'm getting the the right thing so let's make that guy faster because",
    "start": "2852079",
    "end": "2858240"
  },
  {
    "text": "everything that's in a loop is going to count a lot so um how do we make this",
    "start": "2858240",
    "end": "2864599"
  },
  {
    "text": "verification faster what is boiling down to what this is boiling down to is if",
    "start": "2864599",
    "end": "2871520"
  },
  {
    "text": "star B less than zero or star B greater than 9 then you know it's kind of it's an incorrect input otherwise I'm going",
    "start": "2871520",
    "end": "2878960"
  },
  {
    "text": "to continue with the computation this is the core of my loop make it faster make that test",
    "start": "2878960",
    "end": "2885960"
  },
  {
    "text": "faster make that test",
    "start": "2885960",
    "end": "2889760"
  },
  {
    "text": "faster all right not enough too much blood in the caffeine right so well you",
    "start": "2891079",
    "end": "2896800"
  },
  {
    "text": "know it's I'm not doing this real time i've been thinking of this and the way I thought of this first was you know that",
    "start": "2896800",
    "end": "2901920"
  },
  {
    "text": "or the double or means you try the f the left hand first and if it's true you're",
    "start": "2901920",
    "end": "2907839"
  },
  {
    "text": "done if it's false you try the the second right that's the short circuit evaluation in",
    "start": "2907839",
    "end": "2913480"
  },
  {
    "text": "C++ we all know and love but it's actually it imposes a data dependency so",
    "start": "2913480",
    "end": "2918800"
  },
  {
    "text": "actually it's faster to do this way with a pipe with the bitwise because then it can run both in",
    "start": "2918800",
    "end": "2926160"
  },
  {
    "start": "2919000",
    "end": "2919000"
  },
  {
    "text": "parallel Yes it's semantically the same thing",
    "start": "2926160",
    "end": "2931520"
  },
  {
    "text": "it's just getting there faster so I tried this in GCC and guess what happened which do you think is faster",
    "start": "2931520",
    "end": "2938240"
  },
  {
    "text": "this guy or that guy genius they're exactly the same so",
    "start": "2938240",
    "end": "2945280"
  },
  {
    "text": "GCC was way ahead of me there i was like \"Oh I must be smart i use a pipe.\" And GC is like \"Yeah I'm there buddy so no",
    "start": "2945280",
    "end": "2952000"
  },
  {
    "text": "problem there.\" Yeah so GCC actually is generating this code from that source so even though I uh specified the",
    "start": "2952000",
    "end": "2961440"
  },
  {
    "text": "short circuit or whatever GCC figured that the these two can be valid in parallel it doesn't affect the semantics",
    "start": "2961440",
    "end": "2967280"
  },
  {
    "text": "of the program it could if I had like a function call here that would be influence but that would influence this",
    "start": "2967280",
    "end": "2972559"
  },
  {
    "text": "result but you know in this case it's simple enough that the compiler just figured out it generated this so the but",
    "start": "2972559",
    "end": "2979040"
  },
  {
    "text": "then you know I'm a human i'm not a compiler so I can be clever i can use a tabled driven approach by means of vis",
    "start": "2979040",
    "end": "2985800"
  },
  {
    "start": "2982000",
    "end": "2982000"
  },
  {
    "text": "digit is digit is actually a large table and gets you there in like constant",
    "start": "2985800",
    "end": "2991400"
  },
  {
    "text": "time all right so which which do you think is faster is digit or this guy or I mean",
    "start": "2991400",
    "end": "2998240"
  },
  {
    "text": "these guys are equivalent how about is digit is digit faster table",
    "start": "2998240",
    "end": "3004800"
  },
  {
    "text": "driven well actually I was amazed GCC generated the same code for his digit like here so you kind of looked through",
    "start": "3005319",
    "end": "3012960"
  },
  {
    "text": "it and said \"Oh is digit I know what you're doing buddy i know what you're doing there so I'm going to just",
    "start": "3012960",
    "end": "3018640"
  },
  {
    "text": "generate optimal code for you even though you're an idiot because this digit is actually doing extra testing for minus one and whatnot so it's not",
    "start": "3018640",
    "end": "3026040"
  },
  {
    "text": "optimal.\" All right so I kind of gave up on gave up on that line of reasoning but I was still bothered by the two tests",
    "start": "3026040",
    "end": "3032640"
  },
  {
    "text": "here i need to test the same thing twice against zero and against nine so what I did was I used a sign ropper this is a",
    "start": "3032640",
    "end": "3040480"
  },
  {
    "start": "3036000",
    "end": "3036000"
  },
  {
    "text": "scientific term you may not have heard of which is unsigned you know just goes away like if you um take a subtraction",
    "start": "3040480",
    "end": "3047119"
  },
  {
    "text": "of two unsigned numbers it can become a very large unsigned number right if you do like 1 minus two it becomes like the",
    "start": "3047119",
    "end": "3054079"
  },
  {
    "text": "maximum unsigned so I did this I took uh well let me take the unsigned of star B",
    "start": "3054079",
    "end": "3059839"
  },
  {
    "text": "minus 0 and I know if that is greater than",
    "start": "3059839",
    "end": "3064920"
  },
  {
    "text": "10 it's out of range it's not good because it's either number that's below",
    "start": "3064920",
    "end": "3071280"
  },
  {
    "text": "zero or above nine so then I replace this thing with one test and even better I got to reuse",
    "start": "3071280",
    "end": "3077680"
  },
  {
    "text": "that thing uh you see D because I need the difference anyway so I got to reuse the same computation",
    "start": "3077680",
    "end": "3083559"
  },
  {
    "text": "twice but now there's a profound reason for which this whole unsigned",
    "start": "3083559",
    "end": "3089040"
  },
  {
    "text": "replacement worked because you know it's you got to think of it like it's possible that I",
    "start": "3089040",
    "end": "3095280"
  },
  {
    "text": "have like I take the difference of two unsigned numbers and you know I have the roper going on but I still kind of get",
    "start": "3095280",
    "end": "3100720"
  },
  {
    "text": "into the right range by mistake what how can you explain that",
    "start": "3100720",
    "end": "3106160"
  },
  {
    "text": "I'm not going to reach the right result by mistake",
    "start": "3106160",
    "end": "3111960"
  },
  {
    "text": "well yes Sean you're not going to rob that far",
    "start": "3112480",
    "end": "3118000"
  },
  {
    "text": "yes so that's sort of the intuition exactly so you're not going to wrap that far and you know how exactly do you prove mathematically that you're not",
    "start": "3118000",
    "end": "3124319"
  },
  {
    "text": "going to wrap that far and actually the way it goes is the",
    "start": "3124319",
    "end": "3129520"
  },
  {
    "text": "following subtracting with uh with wraparound like modulus subtraction is",
    "start": "3129640",
    "end": "3135200"
  },
  {
    "text": "an injective function at this point everybody's like \"Okay at this point you lost me here talking",
    "start": "3135200",
    "end": "3141760"
  },
  {
    "text": "vaccines what's going on here?\" An injective function is a function that maps different values to different",
    "start": "3141760",
    "end": "3148240"
  },
  {
    "text": "values it is never going to map different values to the same value and it turns out that the the subtraction in",
    "start": "3148240",
    "end": "3155839"
  },
  {
    "text": "uh in um modulus arithmetic has this particular property which means it's",
    "start": "3155839",
    "end": "3160880"
  },
  {
    "text": "always going to take the you know two different input two uh two different inputs to different outputs which means",
    "start": "3160880",
    "end": "3166880"
  },
  {
    "text": "it's never going to go to the right result by mistake so we have this uh very interesting uh kind of principle in",
    "start": "3166880",
    "end": "3175200"
  },
  {
    "text": "basic modulus arithmetic which take us to takes us to an optimization because I",
    "start": "3175200",
    "end": "3180240"
  },
  {
    "text": "saved the comparison and the subtraction there which is awesome so it's not tricks we're doing",
    "start": "3180240",
    "end": "3187119"
  },
  {
    "text": "here we're doing basic math and to actually it is measurable",
    "start": "3187119",
    "end": "3193440"
  },
  {
    "text": "and is significant so I have like uh ILP is our previous",
    "start": "3193440",
    "end": "3198480"
  },
  {
    "text": "the the violet thing and the green thing is um the unsigned rapperu which becomes",
    "start": "3198480",
    "end": "3204240"
  },
  {
    "text": "significant for larger numbers and to I actually plotted this against several functions uh several",
    "start": "3204240",
    "end": "3211680"
  },
  {
    "text": "baselines so on the horizontal axis there at one I have my baseline which is the built-in library function",
    "start": "3211680",
    "end": "3219000"
  },
  {
    "text": "A2UL and then we have uh that yellow thing is a sort of a handwritten function that does sort of our baseline",
    "start": "3219000",
    "end": "3225839"
  },
  {
    "text": "that we uh we showed and then we have the LP and we have A2L and IP plus unsign is the best is the fastest",
    "start": "3225839",
    "end": "3231760"
  },
  {
    "text": "compared to the to A2 UL and what do you think this red thing is like five times",
    "start": "3231760",
    "end": "3236800"
  },
  {
    "text": "slower than anything else including itself what is that guy who can see like lexical cast that",
    "start": "3236800",
    "end": "3244800"
  },
  {
    "text": "uses a stream friends so if you want to do something really really really really",
    "start": "3244800",
    "end": "3250280"
  },
  {
    "text": "slow do like use sedd stream IO streams",
    "start": "3250280",
    "end": "3255359"
  },
  {
    "text": "because they're going to be like super slow um it's actually faster if you sit down and doing with pen and paper it's",
    "start": "3255359",
    "end": "3261119"
  },
  {
    "text": "going to be faster so terrible right that was another joke right there was a",
    "start": "3261119",
    "end": "3266720"
  },
  {
    "text": "guy with a joke banner there all right so we have like very good improvements",
    "start": "3266720",
    "end": "3271920"
  },
  {
    "text": "on classic algorithms and now we're going to apply one of the classical optimizations which",
    "start": "3271920",
    "end": "3277839"
  },
  {
    "start": "3273000",
    "end": "3273000"
  },
  {
    "text": "is loop unrolling thank you loop unrolling uh with loop unrolling we're uh going to simply duplicate the whole",
    "start": "3277839",
    "end": "3286160"
  },
  {
    "text": "thing have the body of the loop several times and then we're going to add everything at the bottom and that is uh",
    "start": "3286160",
    "end": "3292960"
  },
  {
    "text": "a sort of a very well-known optimization technique and guess what it helps boom",
    "start": "3292960",
    "end": "3300000"
  },
  {
    "text": "especially for large val and you see kind of the the ripples there depending on how many passes through the unrul",
    "start": "3300000",
    "end": "3306079"
  },
  {
    "text": "rope I did so that's pretty awesome",
    "start": "3306079",
    "end": "3312119"
  },
  {
    "start": "3308000",
    "end": "3308000"
  },
  {
    "text": "um so don't forget we talked about strength reduction today and uh that's",
    "start": "3312119",
    "end": "3317680"
  },
  {
    "text": "not only a compiler optimization that replaces division with multiplication or division with shift and stuff like that",
    "start": "3317680",
    "end": "3324160"
  },
  {
    "text": "it's um it's a way of thinking that allows you to rethink algorithms that are classic into",
    "start": "3324160",
    "end": "3332480"
  },
  {
    "text": "better version of those algorithms right and then we have um we've discussed",
    "start": "3332480",
    "end": "3338800"
  },
  {
    "text": "minimization of indirect rights which is a very good technique so",
    "start": "3338800",
    "end": "3344000"
  },
  {
    "text": "you know again be extremely sparing with your rights so give away rights like you",
    "start": "3344000",
    "end": "3350400"
  },
  {
    "text": "give away money like don't spend them on like material goods there's another joke",
    "start": "3350400",
    "end": "3357760"
  },
  {
    "text": "jesus okay this today is not going well okay we got to get some coffee who's going to be in my second talk right",
    "start": "3357760",
    "end": "3363440"
  },
  {
    "text": "after this all right so get some coffee okay and actually country those who don't want to come come because it's",
    "start": "3363440",
    "end": "3369680"
  },
  {
    "text": "awesome uh it's much better than this um so don't forget to uh minimize",
    "start": "3369680",
    "end": "3376079"
  },
  {
    "text": "indirect writes make sure you make as few writes to array elements as you can",
    "start": "3376079",
    "end": "3381280"
  },
  {
    "text": "uh rights to name variables are very different because those go are rights to registers and those have much better",
    "start": "3381280",
    "end": "3388319"
  },
  {
    "text": "efficiency profile and uh again don't forget the forgotten parallelism which",
    "start": "3388319",
    "end": "3393520"
  },
  {
    "text": "is the instruction level parallelism that um you should uh you should",
    "start": "3393520",
    "end": "3398559"
  },
  {
    "text": "essentially use by means of minimizing the data dependencies in your code so",
    "start": "3398559",
    "end": "3403599"
  },
  {
    "text": "now you know I've showed you a few examples and actually there's a library embodying those examples um it's the",
    "start": "3403599",
    "end": "3409119"
  },
  {
    "text": "Facebook folly library of which I I wrote a a fair fraction and um you're going to see a bunch of these in there",
    "start": "3409119",
    "end": "3416000"
  },
  {
    "text": "so there are high performance implementations uh of some uh some classic algorithms in there and a few",
    "start": "3416000",
    "end": "3422000"
  },
  {
    "text": "data structures so I highly recommend you take a look at it all right with this I'm done thank",
    "start": "3422000",
    "end": "3430400"
  },
  {
    "text": "you so much you've been awesome thank you",
    "start": "3430400",
    "end": "3435400"
  },
  {
    "text": "minutes for questions yes obviously you like",
    "start": "3437200",
    "end": "3444280"
  },
  {
    "text": "this which tools do you use to find those bottlenecks which tools do you use to find bottl necks in your program i'm",
    "start": "3444280",
    "end": "3451119"
  },
  {
    "text": "going to redirect that question to the audience because I'm sure there are quite a few ideas that are uh people are",
    "start": "3451119",
    "end": "3456440"
  },
  {
    "text": "already Yes what tools are we using all right so first of all like this classic",
    "start": "3456440",
    "end": "3461760"
  },
  {
    "text": "profiling uh prof you know GRO sort of Vtune um uh Intel has another tool i",
    "start": "3461760",
    "end": "3469839"
  },
  {
    "text": "forgot the name actually I just got the license because somebody saw my talk and they said \"Oh do you want a free license",
    "start": "3469839",
    "end": "3474880"
  },
  {
    "text": "for the Intel tools and stuff?\" And I said \"Sure if it's free why not?\" Um so",
    "start": "3474880",
    "end": "3480960"
  },
  {
    "text": "uh indeed and also the the sort of the the classic uh sort of you know roll your own print fbased benchmarking and",
    "start": "3480960",
    "end": "3487599"
  },
  {
    "text": "stuff um it shouldn't be very hard to get to the core of where the bottlenecks are but definitely need to measure",
    "start": "3487599",
    "end": "3494559"
  },
  {
    "text": "because I've seen so many people who optimize amazingly well like command",
    "start": "3494559",
    "end": "3499599"
  },
  {
    "text": "line processing that's another joke so command line processing takes",
    "start": "3499599",
    "end": "3505760"
  },
  {
    "text": "like literally like one microcond out of an hour long running program and people are like spending time on that it's",
    "start": "3505760",
    "end": "3511280"
  },
  {
    "text": "amazing and engineers have this the spirit like in that joke with the guillotine that wasn't working everybody",
    "start": "3511280",
    "end": "3516960"
  },
  {
    "text": "who would not be guillotin would be aggress would be kind of mercied right and the engineer who was about to be",
    "start": "3516960",
    "end": "3523200"
  },
  {
    "text": "executed by the guillotin said I I think I know the problem with that thing I can fix it for you so you can kill me so",
    "start": "3523200",
    "end": "3529760"
  },
  {
    "text": "similarly well not similarly but you know relatedly we have a tendency to work on",
    "start": "3529760",
    "end": "3535440"
  },
  {
    "text": "problems that we find fun and interesting even though they are completely irrelevant or actually work",
    "start": "3535440",
    "end": "3540480"
  },
  {
    "text": "against our uh our best interests so definitely the first step is to measure",
    "start": "3540480",
    "end": "3545760"
  },
  {
    "text": "and you you would find the most surprising results while measuring i've I've developed I've been work I've been",
    "start": "3545760",
    "end": "3551359"
  },
  {
    "text": "at this for a long time and the the one thing I can say is that silicon is",
    "start": "3551359",
    "end": "3557520"
  },
  {
    "text": "um inhuman no not inhuman nonhuman sorry yeah that's the right word nonhuman it's",
    "start": "3557520",
    "end": "3565200"
  },
  {
    "text": "it's not it doesn't work it can't develop the brain uh patterns base are",
    "start": "3565200",
    "end": "3570960"
  },
  {
    "text": "patterns detecting things and silicon is just weird it doesn't work that way so",
    "start": "3570960",
    "end": "3576079"
  },
  {
    "text": "intuition is not a good way to understand performance of software i've seen like the most amazing things in",
    "start": "3576079",
    "end": "3582000"
  },
  {
    "text": "what people think is fast code and what actually is fast code it's amazing other questions so I'm I'm glad this",
    "start": "3582000",
    "end": "3588000"
  },
  {
    "text": "measurement point was brought up questions",
    "start": "3588000",
    "end": "3593559"
  },
  {
    "text": "comments all right so I'll be around here during the break and uh thanks again see you around",
    "start": "3593559",
    "end": "3600880"
  }
]