[
  {
    "text": "okay welcome everybody come on in thanks so much for joining me today my name is Brandon minck and in this session we're",
    "start": "7640",
    "end": "14519"
  },
  {
    "text": "talking about how to correct common mistakes in async and await now I am so",
    "start": "14519",
    "end": "20039"
  },
  {
    "text": "excited to be here with you today because this is a talk that actually made back in 2018 gave it for the first",
    "start": "20039",
    "end": "26960"
  },
  {
    "text": "time at NDC Sydney so it's super cool to come all the way back to Copenhagen and",
    "start": "26960",
    "end": "33480"
  },
  {
    "text": "deliver it but there's been a lot more cool stuff add it to net since 2018 so",
    "start": "33480",
    "end": "38600"
  },
  {
    "text": "it was an hour talk back then it's about an hour and a half talk now that we're just going to cram into an hour so I'm",
    "start": "38600",
    "end": "44640"
  },
  {
    "text": "going to move fast but the good news is I've got a link down here on the slides you'll see this link you'll see this QR",
    "start": "44640",
    "end": "51000"
  },
  {
    "text": "code takes you to the same place this is where you can find everything that we're going to talk about today so we've got some open source code all that's up on",
    "start": "51000",
    "end": "58120"
  },
  {
    "text": "GitHub you can find it at the website that's where you can find the slides you can even find the recording from I also",
    "start": "58120",
    "end": "63480"
  },
  {
    "text": "did this talk at NDC Oslo a couple years ago as well so don't worry about trying to take notes don't worry about trying",
    "start": "63480",
    "end": "69400"
  },
  {
    "text": "to keep up don't worry about trying to memorize anything because we got a lot of stuff to cover and it's all there for",
    "start": "69400",
    "end": "74640"
  },
  {
    "text": "you so make sure to grab a picture of that QR code and feel free to share it with friends and co-workers who maybe",
    "start": "74640",
    "end": "80400"
  },
  {
    "text": "couldn't be here today but let's get rolling so we're going to start by looking at this method this is a async",
    "start": "80400",
    "end": "87360"
  },
  {
    "text": "task method called red dat from URL and yes I made this six years ago so it's a",
    "start": "87360",
    "end": "94159"
  },
  {
    "text": "little out of date but if you ignore the fact that we're using web client because yes today you should be using HTTP",
    "start": "94159",
    "end": "99399"
  },
  {
    "text": "client you should never knew up a new HTTP client inside a method that should be static you should be reusing them",
    "start": "99399",
    "end": "104439"
  },
  {
    "text": "we've got HTTP client Factory now but we're still using it in this example just because you'll see in a bit we dive",
    "start": "104439",
    "end": "110280"
  },
  {
    "text": "real deep into this code and these are really complex slides that take a lot of work to put together but what we're doing here is we are new up a a web",
    "start": "110280",
    "end": "117840"
  },
  {
    "text": "client we're calling download data task async we're returning that as a bite array called result en encoding that",
    "start": "117840",
    "end": "125520"
  },
  {
    "text": "into a string data and then passing that to a method called load data now what's",
    "start": "125520",
    "end": "130599"
  },
  {
    "text": "really going on here with with async AWA with multi-threading is",
    "start": "130599",
    "end": "136200"
  },
  {
    "text": "that the first thread is going to call this chunk of code so let's say thread one calls this code so thread one comes",
    "start": "136200",
    "end": "142879"
  },
  {
    "text": "in it news up web client it initializes bite array result and then it hits that",
    "start": "142879",
    "end": "148280"
  },
  {
    "text": "await keyword and as soon as our thread hits the awake keyword it goes away it it returns and",
    "start": "148280",
    "end": "156160"
  },
  {
    "text": "that's important because thread one is also known as the main thread it's also known as the UI thread it's the most",
    "start": "156160",
    "end": "161760"
  },
  {
    "text": "important thread in our apps because it's the only thread that can interact with the UI it's the only thread that",
    "start": "161760",
    "end": "167239"
  },
  {
    "text": "can interact with the user when the user Taps a button on our app it's the UI thread that reacts and fires off that uh",
    "start": "167239",
    "end": "173560"
  },
  {
    "text": "click Handler uh when the user Scrolls on the screen it's the UI thread that has to redraw everything on the screen",
    "start": "173560",
    "end": "179440"
  },
  {
    "text": "while the user scrolling so if thread one was calling download data task async",
    "start": "179440",
    "end": "184720"
  },
  {
    "text": "it'd be really bad because if download data task async takes 5 Seconds well then the user can't interact with our",
    "start": "184720",
    "end": "190799"
  },
  {
    "text": "app for 5 seconds and our app's basically Frozen and what happens when our app freezes well what do they do",
    "start": "190799",
    "end": "197120"
  },
  {
    "text": "they force quit the app they give us a onear review in the app store they tell their friends don't use this app it's crap it freezes all the time when really",
    "start": "197120",
    "end": "203799"
  },
  {
    "text": "all that's happening is we accidentally locked up the main thread the calling thread so good news with asyn of we as",
    "start": "203799",
    "end": "210040"
  },
  {
    "text": "soon as we hit the await keyword that calling thread in this case thread one returns it's able to now interact with",
    "start": "210040",
    "end": "216040"
  },
  {
    "text": "the user the user can tap buttons all the meanwhile thread 2 in this case is running in the background now it's not",
    "start": "216040",
    "end": "222680"
  },
  {
    "text": "always going to be thread 2 uh what happens under the hood is do net just goes and grabs any thread from the thre",
    "start": "222680",
    "end": "228920"
  },
  {
    "text": "any thread from the thread pool uh we've got this cool thing inet called thread pools where depending on the size of",
    "start": "228920",
    "end": "235120"
  },
  {
    "text": "your computer your server your phone whatever your app code is running on uh that'll determine how many threads you",
    "start": "235120",
    "end": "241239"
  },
  {
    "text": "have in the thread pool so in this case we got thread 2 it's running download data task async and then when it",
    "start": "241239",
    "end": "247480"
  },
  {
    "text": "finishes net goes back to the calling thread in this case thread one and says hey thread one you're back up so thread",
    "start": "247480",
    "end": "254319"
  },
  {
    "text": "one jumps back in picks up where it left off and it does the encoding to turn that into a string and then it jumps",
    "start": "254319",
    "end": "260600"
  },
  {
    "text": "into load data now we're going to go a little deeper and to go a little deeper",
    "start": "260600",
    "end": "267040"
  },
  {
    "text": "we've got to see what the compiler actually generat Ates out of our code so",
    "start": "267040",
    "end": "272199"
  },
  {
    "text": "here's that here's that method again and this is actually what it looks like",
    "start": "272199",
    "end": "277280"
  },
  {
    "text": "after we compile uh so if you're not familiar umet when you click compile it",
    "start": "277280",
    "end": "283360"
  },
  {
    "text": "turns your C code into a dll file and sometimes it does some compiler gener",
    "start": "283360",
    "end": "288600"
  },
  {
    "text": "generated stuff for us which is what we're looking at here and if you ever wanted to you can use a decompiler to",
    "start": "288600",
    "end": "295160"
  },
  {
    "text": "take that dll and convert it back into C code so we're looking back at C code that was created by in the dll file and",
    "start": "295160",
    "end": "302759"
  },
  {
    "text": "then recreated by our decompiler and the first thing you'll notice is we're",
    "start": "302759",
    "end": "307880"
  },
  {
    "text": "looking at a private sealed class called the same as our method name read data",
    "start": "307880",
    "end": "314520"
  },
  {
    "text": "from URL now I didn't write a class I wrote a method but the compiler took my",
    "start": "314520",
    "end": "321120"
  },
  {
    "text": "async method and turned it into a class and this happens anytime we use the",
    "start": "321120",
    "end": "326360"
  },
  {
    "text": "async keyword so you might not realize it but every time we use that async keyword and",
    "start": "326360",
    "end": "332400"
  },
  {
    "text": "we add it on that little on the method line on the meth method signature the compilers got to work a little bit",
    "start": "332400",
    "end": "337800"
  },
  {
    "text": "harder to create this task or create this class and our app size gets just a little bit bigger because it generates",
    "start": "337800",
    "end": "344240"
  },
  {
    "text": "some code for us now that's all insignificant for 99.9% of our projects",
    "start": "344240",
    "end": "349319"
  },
  {
    "text": "but just FYI it'll add a nanc to your compile time and it'll increase your app",
    "start": "349319",
    "end": "354800"
  },
  {
    "text": "size by about a 100 bytes but I don't know if you're like me who cares about 100 byes right like I'm a mobile app",
    "start": "354800",
    "end": "361280"
  },
  {
    "text": "developer I make IOS and Android apps using zamarin and net Maui all and c and",
    "start": "361280",
    "end": "367759"
  },
  {
    "text": "I I don't care about H 100 byes but maybe maybe you're making stuff for the space shuttle and it's got to be really",
    "start": "367759",
    "end": "373080"
  },
  {
    "text": "optimized then you might care what else is in here well we see a couple Fields",
    "start": "373080",
    "end": "378919"
  },
  {
    "text": "so a bunch of private fields and these fields are actually the same variables that we created inside our method so not",
    "start": "378919",
    "end": "386080"
  },
  {
    "text": "only does it generate a class but it also takes those local variables that we created and",
    "start": "386080",
    "end": "392199"
  },
  {
    "text": "turns them into Fields so you can see there's private string data private bite aray result private web client WC uh",
    "start": "392199",
    "end": "399400"
  },
  {
    "text": "public string URL because URL was the parameter passed in so it's public and something else you'll notice is these",
    "start": "399400",
    "end": "405240"
  },
  {
    "text": "weird angle brackets and underscores uh the net compiler actually does that on",
    "start": "405240",
    "end": "410440"
  },
  {
    "text": "purpose because when it generates code it doesn't want to generate anything with a similar variable name that might",
    "start": "410440",
    "end": "416479"
  },
  {
    "text": "already exist in your code and so the trick that the team does is it actually creates illegal file names like if you",
    "start": "416479",
    "end": "423800"
  },
  {
    "text": "tried to create a field called angle bracket data angle bracket 5or 3 it",
    "start": "423800",
    "end": "429319"
  },
  {
    "text": "wouldn't compile so that's how we can kind of get away with creating that or how the net team can get create away",
    "start": "429319",
    "end": "435039"
  },
  {
    "text": "with creating that for us and what else do we have in here we've got this method called move next now if",
    "start": "435039",
    "end": "443199"
  },
  {
    "text": "I'm being totally honest with you this is what started my journey down the async weight rabbit hole about six seven",
    "start": "443199",
    "end": "450440"
  },
  {
    "text": "eight years ago because I pushed my first app to the app store around that time and I kept seeing these weird",
    "start": "450440",
    "end": "458720"
  },
  {
    "text": "errors like weird things were happening in my app that I didn't tell it to do and I had no idea what was going on and",
    "start": "458720",
    "end": "464159"
  },
  {
    "text": "and a lot of my stack traces was move next and I'm like what is this I I never",
    "start": "464159",
    "end": "469479"
  },
  {
    "text": "wrote a method called move next so how is this move next appearing in all my stack traces um well it's because it was",
    "start": "469479",
    "end": "475960"
  },
  {
    "text": "autogenerated for me and if we dive into move move",
    "start": "475960",
    "end": "481440"
  },
  {
    "text": "next this is what it looks like but let's zoom in move next is basically a",
    "start": "481440",
    "end": "487360"
  },
  {
    "text": "state machine so to boil that down into C terms move next is just a giant switch",
    "start": "487360",
    "end": "493879"
  },
  {
    "text": "statement and it creates a case every time we use the await keyword so in our",
    "start": "493879",
    "end": "500000"
  },
  {
    "text": "instance here we have two cases and that's",
    "start": "500000",
    "end": "506039"
  },
  {
    "text": "because in the method I wrote I call the awake keyword once if in My Method I had called the awake",
    "start": "506039",
    "end": "511599"
  },
  {
    "text": "keyword twice we would have three cases if I had used the awake keyword three times we would have four cases so every",
    "start": "511599",
    "end": "517000"
  },
  {
    "text": "time we use that a keyword we get a new case inside of move next inside of our",
    "start": "517000",
    "end": "522760"
  },
  {
    "text": "state machine and if we look at the code case zero this is all the code leading",
    "start": "522760",
    "end": "528160"
  },
  {
    "text": "up to that first await so just like we saw earlier it's newing up web client and then it's calling download data task",
    "start": "528160",
    "end": "535200"
  },
  {
    "text": "async kind of uh really what it's doing it's getting the this what's it's called an a waiter and not to go into too much",
    "start": "535200",
    "end": "541959"
  },
  {
    "text": "detail but that's basically how thread one will know where to come back but",
    "start": "541959",
    "end": "547040"
  },
  {
    "text": "then thread one returns so we hit this return statement and this is actually the magic that frees up that calling",
    "start": "547040",
    "end": "553519"
  },
  {
    "text": "thread once it hits the awake keyword because thread one as far as it knows it returned it's done it exits the method",
    "start": "553519",
    "end": "560200"
  },
  {
    "text": "and now our main thread is able to go back and our users can use our app and not have to worry about it freezing up",
    "start": "560200",
    "end": "566760"
  },
  {
    "text": "but before it returns it sets that value of PC to one and it does that because",
    "start": "566760",
    "end": "572959"
  },
  {
    "text": "when net comes back to thread one and says hey the background task is done you're back",
    "start": "572959",
    "end": "579120"
  },
  {
    "text": "up thread one's going to jump back into case one so it's kind of letting itself know where to pick up where it left off",
    "start": "579120",
    "end": "586000"
  },
  {
    "text": "and just like we expect this is the rest of our method where we we get the result from download data task async we encode",
    "start": "586000",
    "end": "592040"
  },
  {
    "text": "it and then we call that load data method now the other weird thing inside",
    "start": "592040",
    "end": "597920"
  },
  {
    "text": "a move next is this this Tri catch block and I guarantee you everybody in this",
    "start": "597920",
    "end": "603560"
  },
  {
    "text": "room if you've written asyn A8 code you've been burned by this Tri catch block myself included and what's what's",
    "start": "603560",
    "end": "611079"
  },
  {
    "text": "weird about this is I didn't write a TR catch block right there's no TR catch block and my code this is all",
    "start": "611079",
    "end": "616959"
  },
  {
    "text": "autogenerated for us and it's always autogenerated for us and so what this means is if any of my code throws an",
    "start": "616959",
    "end": "624800"
  },
  {
    "text": "exception it's going to get caught right here now the good news is if we use the",
    "start": "624800",
    "end": "630800"
  },
  {
    "text": "awake keyword the awake keyword will essentially rethrow the exception so",
    "start": "630800",
    "end": "636360"
  },
  {
    "text": "when Say thread one comes back to see hey what what happened how'd everything go where do I pick up or I left off it",
    "start": "636360",
    "end": "641800"
  },
  {
    "text": "goes oh there's an exception it'll rethrow it so as long as we use the awake keyword we're good but the biggest",
    "start": "641800",
    "end": "650000"
  },
  {
    "text": "problem I see and this was actually my problem back in the day when I made my first app was we try to be too clever",
    "start": "650000",
    "end": "657800"
  },
  {
    "text": "you know I was I was was making a mobile app and just like we were talking about a minute ago I didn't want to hog the UI",
    "start": "657800",
    "end": "663000"
  },
  {
    "text": "thread so I thought I was being real smart saying I'm going to put this on a background thread by saying task.run here's all my code and you know what",
    "start": "663000",
    "end": "670680"
  },
  {
    "text": "it's on the background I don't care when it finishes so I'm not going to wait task. run and what was happening what",
    "start": "670680",
    "end": "678200"
  },
  {
    "text": "the reason I was getting weird behavior in my app and weird bugs and weird stack traces is that exception or an exception",
    "start": "678200",
    "end": "685440"
  },
  {
    "text": "was being thrown in my code but it was being caught here in decid to move next",
    "start": "685440",
    "end": "690600"
  },
  {
    "text": "and because I didn't await that task that exception never got rethrown and you might think to yourself isn't that a",
    "start": "690600",
    "end": "697040"
  },
  {
    "text": "good thing exceptions crash our apps I try my best to not have exceptions and you're not totally wrong but I would",
    "start": "697040",
    "end": "703360"
  },
  {
    "text": "argue exceptions are a good thing because it lets us know as developers that hey something happened that we",
    "start": "703360",
    "end": "708560"
  },
  {
    "text": "didn't want something happened unexpected something exceptional happened and it's kind of C's way of",
    "start": "708560",
    "end": "714279"
  },
  {
    "text": "letting us know or Net's way of asking us hey what do you want to do with this",
    "start": "714279",
    "end": "720320"
  },
  {
    "text": "so for me my app was throwing exceptions I was not awaiting my task I thought I",
    "start": "720320",
    "end": "726320"
  },
  {
    "text": "was being smart by running stuff inside the background thread doing test out run and all of a sudden now my app's in this",
    "start": "726320",
    "end": "731839"
  },
  {
    "text": "weird state that I never designed it for I never programmed it for and you get really really weird bugs all because of",
    "start": "731839",
    "end": "738720"
  },
  {
    "text": "try catch so let's do a quick review",
    "start": "738720",
    "end": "743880"
  },
  {
    "text": "before we jump into some code so the async keyword adds about 100 bytes so every time we create a new async method",
    "start": "743880",
    "end": "751160"
  },
  {
    "text": "again the compiler creates a class for us and it increases our app size by just a little bit but again what's what's 100",
    "start": "751160",
    "end": "758160"
  },
  {
    "text": "bytes Worth to us in 2023 I don't really mind and then the other thing we want to",
    "start": "758160",
    "end": "765000"
  },
  {
    "text": "remember we want to await every task please don't ever do what I did don't ever say task. run and just let it go",
    "start": "765000",
    "end": "772279"
  },
  {
    "text": "without awaiting it uh the other really bad pattern I see all the time well not all the time but way more often than we",
    "start": "772279",
    "end": "778600"
  },
  {
    "text": "should should is people do underscore equals Tas out run like they're",
    "start": "778600",
    "end": "783639"
  },
  {
    "text": "discarding the task and you definitely don't want to do that because then there's no way to get that",
    "start": "783639",
    "end": "789320"
  },
  {
    "text": "exception back if one bubbles up so make sure we await every task otherwise these",
    "start": "789320",
    "end": "794880"
  },
  {
    "text": "non- awaited tasks are going to hide exceptions all right so let's jump into",
    "start": "794880",
    "end": "800079"
  },
  {
    "text": "some code here and like I said this is all this is all open source it's up on GitHub if you didn't get a chance to",
    "start": "800079",
    "end": "806720"
  },
  {
    "text": "grab that link I'll share it with you later but what we're going to do here is we're",
    "start": "806720",
    "end": "812040"
  },
  {
    "text": "going to take this this app I've created um I don't know if anybody reads Hacker",
    "start": "812040",
    "end": "817360"
  },
  {
    "text": "News but it's a cool website I like that people can post Tech news stories to so",
    "start": "817360",
    "end": "823079"
  },
  {
    "text": "this is just a mobile app that hits hacker news's apis pulls down the top stories and then you know we can click",
    "start": "823079",
    "end": "829120"
  },
  {
    "text": "on any of these and we can read it here in our browser without having to go to the website so what I've got here is this is",
    "start": "829120",
    "end": "838000"
  },
  {
    "text": "a AET Maui app obviously all written in C and again don't worry about memorizing",
    "start": "838000",
    "end": "843160"
  },
  {
    "text": "anything because I've got this file bad asyn weight practices this is the one we're going to live in today this is the",
    "start": "843160",
    "end": "849600"
  },
  {
    "text": "code we're fixing and if you don't remember everything we covered that's okay because it's already fixed inside",
    "start": "849600",
    "end": "854759"
  },
  {
    "text": "of good asyn weight practice so let's dive in so this first refactor here",
    "start": "854759",
    "end": "861920"
  },
  {
    "text": "we're we're actually we're already getting yelled at and we're already getting yelled at because we're doing exactly what I just told you not to do",
    "start": "861920",
    "end": "868279"
  },
  {
    "text": "right uh refresh is an async task method and we're not awaiting it but you know",
    "start": "868279",
    "end": "875759"
  },
  {
    "text": "here we are in the Constructor of the class and so you know I just I just stood up in front of everybody and said",
    "start": "875759",
    "end": "881759"
  },
  {
    "text": "always await every task but we're in the Constructor Constructors can't use asent KO because Constructors aren't designed",
    "start": "881759",
    "end": "889160"
  },
  {
    "text": "for that the whole point of a Constructor is just to initialize your object it's literally assigning a slot",
    "start": "889160",
    "end": "895759"
  },
  {
    "text": "in memory to put this object into and then you know we can use it to assign some variables but you're not supposed",
    "start": "895759",
    "end": "902240"
  },
  {
    "text": "to do any sort of long run thing in a Constructor because again we're just initializing the object assigning it to",
    "start": "902240",
    "end": "908160"
  },
  {
    "text": "a location of memory so we'll never be able to use the awake keyword in the Constructor but so how do we get around",
    "start": "908160",
    "end": "914800"
  },
  {
    "text": "this well there is one cool trick",
    "start": "914800",
    "end": "919040"
  },
  {
    "text": "here we can use an async void method to get away from to",
    "start": "926839",
    "end": "932120"
  },
  {
    "text": "get away from that error now you might be thinking to yourself hold up I was told never to use asyn void and and",
    "start": "932120",
    "end": "939800"
  },
  {
    "text": "you're not wrong um but the problem I have with that that method of teaching because I'm sure we've all been in a",
    "start": "939800",
    "end": "946560"
  },
  {
    "text": "class or watched a video when somebody says never use async void it's only meant for event handlers and yeah if you",
    "start": "946560",
    "end": "953440"
  },
  {
    "text": "subscribe to that then you'll be in pretty good position but this is actually a valid case of acing FOID and",
    "start": "953440",
    "end": "960800"
  },
  {
    "text": "the problem I have when people tell us never to use it is they don't tell you",
    "start": "960800",
    "end": "966000"
  },
  {
    "text": "why so so why is this code dangerous because if we look at it we're we're",
    "start": "966000",
    "end": "971519"
  },
  {
    "text": "covering everything we just talked about in the beginning right because refresh is an acing task method and we're using",
    "start": "971519",
    "end": "979199"
  },
  {
    "text": "we're calling the await keyword so that means if an exception is thrown I'll be able to it'll surface it'll be uh",
    "start": "979199",
    "end": "985759"
  },
  {
    "text": "visible to me because the awake keyword will rethrow that exception and and honestly this is good code you",
    "start": "985759",
    "end": "991720"
  },
  {
    "text": "could push this to production but let's talk about why this is dangerous so uh",
    "start": "991720",
    "end": "998000"
  },
  {
    "text": "one of the reasons why this is dangerous is if we go back to that first example where let's say thread one calls refresh",
    "start": "998000",
    "end": "1005600"
  },
  {
    "text": "so thread one comes into this method and it hits the awake keyword and just like we learned it's going to return and now",
    "start": "1005600",
    "end": "1014560"
  },
  {
    "text": "a different thread let's say thread two is running this method called ref fresh um but what's really happening is thread",
    "start": "1014560",
    "end": "1021519"
  },
  {
    "text": "one's returning to here so thread one's going to return here to continue",
    "start": "1021519",
    "end": "1027880"
  },
  {
    "text": "executing code executing code now why this is dangerous is we've got a",
    "start": "1027880",
    "end": "1035600"
  },
  {
    "text": "couple things going on here so the first thing is this method let's say you know let's",
    "start": "1035600",
    "end": "1041760"
  },
  {
    "text": "say it doesn't exist right here like it's very much in our face here if we were looking at code we would hopefully",
    "start": "1041760",
    "end": "1048799"
  },
  {
    "text": "see this acing void right in our face uh but let's what if it was in a different class let's say this is code I didn't",
    "start": "1048799",
    "end": "1055160"
  },
  {
    "text": "write maybe it's a library right that I don't even have insight into what's going on under the hood uh when I call",
    "start": "1055160",
    "end": "1061240"
  },
  {
    "text": "this method and I look at intellisense and I see intellisense tells me this method returns void as C developers",
    "start": "1061240",
    "end": "1068960"
  },
  {
    "text": "we're rightly Justified into assuming that this refresh method will finish",
    "start": "1068960",
    "end": "1074480"
  },
  {
    "text": "running before it goes to this line and that's totally valid you will never be",
    "start": "1074480",
    "end": "1080640"
  },
  {
    "text": "wrong for assuming that a void method finishes running before it moves to the next next line of code um so one of the",
    "start": "1080640",
    "end": "1086159"
  },
  {
    "text": "reasons this is dangerous is if we look down at refresh you know it's it's getting the top stories we have our top",
    "start": "1086159",
    "end": "1092480"
  },
  {
    "text": "Story collection that it's going to be adding the stories into and in a sorted way because Hacker News likes to sort",
    "start": "1092480",
    "end": "1098480"
  },
  {
    "text": "things by points so you can see people up vote and down vote stories and that's how they bubble up to the top um but",
    "start": "1098480",
    "end": "1105640"
  },
  {
    "text": "what if here I was playing around with top Story collection to and maybe my",
    "start": "1105640",
    "end": "1110679"
  },
  {
    "text": "code here is adding things or maybe I'm clearing it and and now what our code or",
    "start": "1110679",
    "end": "1117000"
  },
  {
    "text": "the problem in our code is that thread one is modifying top Story collection well at the same time in the background",
    "start": "1117000",
    "end": "1123440"
  },
  {
    "text": "on a different thread thread two is also modifying top Story collection so we're going to get weird Behavior here and so",
    "start": "1123440",
    "end": "1130000"
  },
  {
    "text": "this is one of the reasons why async void is dangerous because there's there's no way to await a void method so",
    "start": "1130000",
    "end": "1137600"
  },
  {
    "text": "so we don't we we don't like that um but another reason that async void's super",
    "start": "1137600",
    "end": "1144600"
  },
  {
    "text": "dangerous is let's say this method does throw an exception so we'll just hardcode throw to exception here just to",
    "start": "1144600",
    "end": "1151240"
  },
  {
    "text": "really drive home that issue uh you might think to yourself well okay no big deal you know I'll just I'll wrap this",
    "start": "1151240",
    "end": "1156880"
  },
  {
    "text": "in a try try catch block and I'll just catch it right",
    "start": "1156880",
    "end": "1162440"
  },
  {
    "text": "what's the big deal that's that's how do net works we just catch the exception and we probably do nothing with it cuz",
    "start": "1162440",
    "end": "1168720"
  },
  {
    "text": "that's how we work inet um but the problem with this again is let's say",
    "start": "1168720",
    "end": "1175240"
  },
  {
    "text": "again picture it right thread one comes into here thread one enters the triy catch block thread one calls refresh",
    "start": "1175240",
    "end": "1181480"
  },
  {
    "text": "thread one comes down here hits the awake keyword and now it's returned it's left uh the refresh method and because",
    "start": "1181480",
    "end": "1189240"
  },
  {
    "text": "we're not awaiting refresh thread one's now back here and it's just going to",
    "start": "1189240",
    "end": "1194400"
  },
  {
    "text": "continue on and now thread one's all the way down here out outside of our Tri catch block meanwhile thread 2 in the",
    "start": "1194400",
    "end": "1202159"
  },
  {
    "text": "background is still running this and eventually it's going to throw an exception but we've already exited the",
    "start": "1202159",
    "end": "1207320"
  },
  {
    "text": "tri catch block so another reason why async void is dangerous is because it's",
    "start": "1207320",
    "end": "1214080"
  },
  {
    "text": "kind of almost nearly impossible to catch exceptions that come out of an async void method",
    "start": "1214080",
    "end": "1221440"
  },
  {
    "text": "so what are we going to do now right um so let's actually let's back way way up",
    "start": "1221440",
    "end": "1228559"
  },
  {
    "text": "because we do want to avoid asyn void that's it's good advice it's good advice",
    "start": "1228559",
    "end": "1234400"
  },
  {
    "text": "to avoid using asyn void methods but there are valid use cases as we saw here",
    "start": "1234400",
    "end": "1239919"
  },
  {
    "text": "and so an option we do have and something I've created is this extension",
    "start": "1239919",
    "end": "1246360"
  },
  {
    "text": "method called safe fire and forget and if we dig into the source code here",
    "start": "1246360",
    "end": "1251880"
  },
  {
    "text": "because we're actually in the library for safey and forget we can see how it works and what I'm doing under the hood",
    "start": "1251880",
    "end": "1259280"
  },
  {
    "text": "for you is I'm taking your task I'm awaiting it and then I have some code",
    "start": "1259280",
    "end": "1265919"
  },
  {
    "text": "here to handle exceptions so if we jump back for example we could say if an",
    "start": "1265919",
    "end": "1271559"
  },
  {
    "text": "exception does happen and let's say we'll just tell it to catch every exception then we can handle that",
    "start": "1271559",
    "end": "1278799"
  },
  {
    "text": "exception here um and this is using async void but the nice thing about safe",
    "start": "1278799",
    "end": "1286400"
  },
  {
    "text": "fire and forget is it's really in your face like if you're looking at this code",
    "start": "1286400",
    "end": "1291840"
  },
  {
    "text": "you know just by seeing this method that yes",
    "start": "1291840",
    "end": "1297679"
  },
  {
    "text": "I'm aware that this is a task and no I don't want to await it I just want to send it off to a background task and I",
    "start": "1297679",
    "end": "1304919"
  },
  {
    "text": "know so it's basically we're saying here I know that my thread will continue on",
    "start": "1304919",
    "end": "1311679"
  },
  {
    "text": "well in this case refresh is running",
    "start": "1311679",
    "end": "1317039"
  },
  {
    "text": "so so what you can do uh again all this code's open source but I'll show you",
    "start": "1317039",
    "end": "1322080"
  },
  {
    "text": "it's also up on nugit it's called async AWA best practices so you're more than",
    "start": "1322080",
    "end": "1327400"
  },
  {
    "text": "welcome just to come in here copy paste the code it's just an MIT license it's open source that's what it's there for",
    "start": "1327400",
    "end": "1332600"
  },
  {
    "text": "um but I figured why not noua tize it because I'm lazy too right I didn't want to have to copy this code into all my",
    "start": "1332600",
    "end": "1338760"
  },
  {
    "text": "apps and so you can come download asyn weight best practices slap it into your app we actually just passed over a",
    "start": "1338760",
    "end": "1345279"
  },
  {
    "text": "million downloads which is really really cool uh and so if a million people are using it",
    "start": "1345279",
    "end": "1350480"
  },
  {
    "text": "it's got to be good right and then and then we know again we want to",
    "start": "1350480",
    "end": "1357559"
  },
  {
    "text": "fire and forget this task we want to run it in the background and this is way way",
    "start": "1357559",
    "end": "1363200"
  },
  {
    "text": "way better than what we were talking about earlier where we would do task. run dot dot dot task. run without",
    "start": "1363200",
    "end": "1369240"
  },
  {
    "text": "awaiting it super super dangerous safe fire and forget pretty cool okay so",
    "start": "1369240",
    "end": "1375039"
  },
  {
    "text": "we're going to keep that safe fire and forget and we're done refactoring ing this method here so let's move on to the",
    "start": "1375039",
    "end": "1380760"
  },
  {
    "text": "next one so this is the method called refresh this is the method that executes",
    "start": "1380760",
    "end": "1387360"
  },
  {
    "text": "anytime we do a pull to refresh on the app and you know one of the reasons why",
    "start": "1387360",
    "end": "1392520"
  },
  {
    "text": "I'm calling it here in the Constructor is I want the app to automatically refresh and go get the new stories as",
    "start": "1392520",
    "end": "1398279"
  },
  {
    "text": "soon as the user opens it like how how terrible of that of an experience would it be if you launch my app nothing",
    "start": "1398279",
    "end": "1405080"
  },
  {
    "text": "happens and then you have to manually uh like swipe to refresh that'd be terrible so so that's why we're calling the",
    "start": "1405080",
    "end": "1410159"
  },
  {
    "text": "Constructor um but what I have here is a little trick that we do in mobile apps",
    "start": "1410159",
    "end": "1417240"
  },
  {
    "text": "because sometimes the results come back really fast and users don't don't",
    "start": "1417240",
    "end": "1423320"
  },
  {
    "text": "believe it um so for better or worse I",
    "start": "1423320",
    "end": "1428440"
  },
  {
    "text": "actually inject a task. delay into a lot of my apps so that we get consistency",
    "start": "1428440",
    "end": "1433600"
  },
  {
    "text": "because especially with mobile apps if you do a pulled to refresh and the results come back right away see how it",
    "start": "1433600",
    "end": "1439279"
  },
  {
    "text": "just disappeared it doesn't look like anything happened you're going to go ah what the heck and you're probably going to force quit the app and give me",
    "start": "1439279",
    "end": "1444440"
  },
  {
    "text": "another one star review so as weird as it sounds this is a really common practice where you know it'll always",
    "start": "1444440",
    "end": "1450919"
  },
  {
    "text": "display that activity indicator at the top for two seconds and we do that or I do that by having this minimum refresh",
    "start": "1450919",
    "end": "1458480"
  },
  {
    "text": "time and I'm doing it by calling task. delay and then down here I'll make sure",
    "start": "1458480",
    "end": "1464000"
  },
  {
    "text": "we wait until that task is done so even if all this code completes in 5",
    "start": "1464000",
    "end": "1469440"
  },
  {
    "text": "milliseconds that'd be insane but even if it does you're still going to see that activity indicator show up for 2",
    "start": "1469440",
    "end": "1475520"
  },
  {
    "text": "seconds to let you know that I heard you I did it we're good um so so what's",
    "start": "1475520",
    "end": "1481640"
  },
  {
    "text": "wrong with this code well this isn't bad because we're gonna we're going to await this task later so we can we can kick it",
    "start": "1481640",
    "end": "1487600"
  },
  {
    "text": "off here as like a little timer and then we can await it later um but something",
    "start": "1487600",
    "end": "1492679"
  },
  {
    "text": "that we're missing here is I have a cancellation token refresh gives me a cancellation token token and I'm not",
    "start": "1492679",
    "end": "1498559"
  },
  {
    "text": "using it here and that's a bad practice we should always be using cancellation tokens for all of our async task methods",
    "start": "1498559",
    "end": "1505720"
  },
  {
    "text": "so if we're ever writing a async task method we should give the consumer of",
    "start": "1505720",
    "end": "1512159"
  },
  {
    "text": "the method the ability to pass in a cancellation token because otherwise how are they going to stop it if they want",
    "start": "1512159",
    "end": "1517679"
  },
  {
    "text": "to so it's always a best practice to do that and something cool that I want to show you is we can take that",
    "start": "1517679",
    "end": "1526080"
  },
  {
    "text": "cancellation token and we can just slap it on to the end of a task so what we're",
    "start": "1526080",
    "end": "1532720"
  },
  {
    "text": "looking at here is task. delay obviously returns a task and for any method that",
    "start": "1532720",
    "end": "1539720"
  },
  {
    "text": "returns a task and let's say you know those Library creators aren't as smart as we are they don't know about these",
    "start": "1539720",
    "end": "1545159"
  },
  {
    "text": "best practices like we do and they don't give us the option to pass in a cancellation token well there's this",
    "start": "1545159",
    "end": "1550399"
  },
  {
    "text": "cool extension method that lives Inn net now called weight async that allows us",
    "start": "1550399",
    "end": "1556399"
  },
  {
    "text": "to essentially bolt on on a cancellation token to any method that we want that",
    "start": "1556399",
    "end": "1561720"
  },
  {
    "text": "returns a task so this is really cool because sometimes developers don't sometimes developers don't give us that",
    "start": "1561720",
    "end": "1567440"
  },
  {
    "text": "option to pass in a cancellation token and now it doesn't matter we can just basically bolt on this cancellation",
    "start": "1567440",
    "end": "1573039"
  },
  {
    "text": "token If This Were to uh if we were to cancel this token then it would cancel",
    "start": "1573039",
    "end": "1579120"
  },
  {
    "text": "this task that it's attached to now all that to say that was just kind of a",
    "start": "1579120",
    "end": "1584279"
  },
  {
    "text": "convenient excuse to show it because test. delay actually does accept a cancellation token so kudos to the net",
    "start": "1584279",
    "end": "1590480"
  },
  {
    "text": "team on writing good net code all right next refactor so now what",
    "start": "1590480",
    "end": "1597679"
  },
  {
    "text": "we're looking at is this method that calls get top stories so just like we talked about we want to go to The Hacker",
    "start": "1597679",
    "end": "1604440"
  },
  {
    "text": "News API we want to get the latest top stories off of Hacker News and then we want to display them onto the screen",
    "start": "1604440",
    "end": "1611120"
  },
  {
    "text": "so this looks pretty good right like we're calling a weit we're inside of an acing task",
    "start": "1611120",
    "end": "1617279"
  },
  {
    "text": "method what's bad about this well again let's think about what's going on under the hood so let's assume thread one",
    "start": "1617279",
    "end": "1625440"
  },
  {
    "text": "kicks off this method so thread one comes into here thread one spins up task. delay there's no await keyword yet",
    "start": "1625440",
    "end": "1631480"
  },
  {
    "text": "so thread one's still going and we come here we come here and then we hit this awake keyword and now thread one returns",
    "start": "1631480",
    "end": "1638080"
  },
  {
    "text": "so great because we don't want thread one getting the a or hitting the apis for us because if this takes 5 seconds",
    "start": "1638080",
    "end": "1645480"
  },
  {
    "text": "and thread one's locked up for five seconds making API calls our apps Frozen for 5 seconds um",
    "start": "1645480",
    "end": "1653279"
  },
  {
    "text": "but this isn't great because even though a different thread's doing it let's say a background thread thread 32 is is",
    "start": "1653279",
    "end": "1660279"
  },
  {
    "text": "running G top stories well when G top stories is done remember we return back",
    "start": "1660279",
    "end": "1667000"
  },
  {
    "text": "to the calling thread so once get top stories finishes once the task is",
    "start": "1667000",
    "end": "1672080"
  },
  {
    "text": "completed Net's going to go hey thread one you're back up and then thread one jumps in here here and that's what",
    "start": "1672080",
    "end": "1678399"
  },
  {
    "text": "clears our collection and then run to this for each Loop and is that really",
    "start": "1678399",
    "end": "1683679"
  },
  {
    "text": "what we want I mean I don't because I want thread one to be free I want thread",
    "start": "1683679",
    "end": "1689200"
  },
  {
    "text": "one to stay ready to listen to the user interact with them scroll draw do whatever the user wants to do that's",
    "start": "1689200",
    "end": "1694640"
  },
  {
    "text": "what I want thread one focused on but as we just saw thread one's kind of getting hijacked to come back in so one thing we",
    "start": "1694640",
    "end": "1702600"
  },
  {
    "text": "can do here let's do it in line first we can tack on configure a we false so",
    "start": "1702600",
    "end": "1711440"
  },
  {
    "text": "configure we false kind of like uh what we saw just a second ago with DOT weight async this is an extension method that",
    "start": "1711440",
    "end": "1718240"
  },
  {
    "text": "again bolts onto the task so it doesn't affect the task but what it does it tells do net I don't need to return to",
    "start": "1718240",
    "end": "1725840"
  },
  {
    "text": "the calling thread it tells net hey when I'm done when get top stories is",
    "start": "1725840",
    "end": "1732120"
  },
  {
    "text": "completed grab any thread from the thread pool Don't Wait For Thread one and this is really cool because you know",
    "start": "1732120",
    "end": "1737840"
  },
  {
    "text": "what if you know this is a pretty simple app sure but what if I made a game and there's a lot of you know the screen's",
    "start": "1737840",
    "end": "1744039"
  },
  {
    "text": "constantly moving I'm constantly drawing objects on the screen really really working thread one well if I had to",
    "start": "1744039",
    "end": "1750880"
  },
  {
    "text": "return to thread one I got to wait till thread one's ready so if thread one's busy drawing stuff on the screen it",
    "start": "1750880",
    "end": "1757000"
  },
  {
    "text": "might be a little while I mean little while right like micros seconds we're talking but a little while we're just",
    "start": "1757000",
    "end": "1763600"
  },
  {
    "text": "kind of hanging out here our coach is kind of hanging out it's like yep everybody's ready but thread 's still busy so guess we'll just wait so by",
    "start": "1763600",
    "end": "1771360"
  },
  {
    "text": "tacking on configur O8 false we tell net I don't care and for me as as a mobile",
    "start": "1771360",
    "end": "1778960"
  },
  {
    "text": "app developer uhet Maui developer everything we do is in the mvvm architecture so if I have any other mvvm",
    "start": "1778960",
    "end": "1786519"
  },
  {
    "text": "fans out there my rule of them is if I'm not in my view layer so for mvvm that",
    "start": "1786519",
    "end": "1792320"
  },
  {
    "text": "means I'm in my view model layer I'm in my services layer I'm somewhere where this code doesn't touch the UI this is",
    "start": "1792320",
    "end": "1798880"
  },
  {
    "text": "all business logic so if I'm in my view model layer I know none of this code touches the UI then I configure a weight",
    "start": "1798880",
    "end": "1806320"
  },
  {
    "text": "false everywhere um the I'll say the one downside about configure weight false is",
    "start": "1806320",
    "end": "1813120"
  },
  {
    "text": "once you learn about it you're going to start adding it everywhere and yeah Denny does and then once you",
    "start": "1813120",
    "end": "1820840"
  },
  {
    "text": "once you do you kind of wish there was a default but there's no default uh there's no way to tell net hey let's",
    "start": "1820840",
    "end": "1827320"
  },
  {
    "text": "make configurate false to default because I've got a thousand async methods",
    "start": "1827320",
    "end": "1832559"
  },
  {
    "text": "99,999 of them want configurate false and I only want this one to say configurate true so I'll let you know",
    "start": "1832559",
    "end": "1837679"
  },
  {
    "text": "for that one but now we have to pen configurate false everywhere I've been trying to poke the net team to get them",
    "start": "1837679",
    "end": "1844600"
  },
  {
    "text": "to let us add a default for it but until then we'll just depend configurate false",
    "start": "1844600",
    "end": "1849679"
  },
  {
    "text": "and again this means that we don't return to the calling thread so our code will execute a little bit more quickly",
    "start": "1849679",
    "end": "1855799"
  },
  {
    "text": "and in the case of this this app that it free keeps the UI thread UI thread free",
    "start": "1855799",
    "end": "1862080"
  },
  {
    "text": "to interact with the user all right so check that one off coming down all right",
    "start": "1862080",
    "end": "1869120"
  },
  {
    "text": "now we're in the finally block and we're back to that minimum refresh time task so again this is just a task. delay that",
    "start": "1869120",
    "end": "1877320"
  },
  {
    "text": "I kicked off up here so when I initialized this variable when I called task. delay it started running so this",
    "start": "1877320",
    "end": "1884799"
  },
  {
    "text": "timer this this 2cond timer started running way back here and now I just want to",
    "start": "1884799",
    "end": "1890760"
  },
  {
    "text": "make sure it's been at least 2 seconds before I tell the UI to stop refreshing",
    "start": "1890760",
    "end": "1896120"
  },
  {
    "text": "to remove that little spinny activity indicator at the top um but the problem",
    "start": "1896120",
    "end": "1901159"
  },
  {
    "text": "here is I'm calling dot weight now if there's one thing you take away from",
    "start": "1901159",
    "end": "1906720"
  },
  {
    "text": "this session today it's never never never never never never never never call",
    "start": "1906720",
    "end": "1914159"
  },
  {
    "text": "weightweight is really really dangerous and I'll tell you why so witht weight",
    "start": "1914159",
    "end": "1920360"
  },
  {
    "text": "What's Happening Here is let's say Say thread five we're on",
    "start": "1920360",
    "end": "1926279"
  },
  {
    "text": "thread five now so thread five comes into here and it hits minimum refresh time task and it's still got about a",
    "start": "1926279",
    "end": "1933960"
  },
  {
    "text": "second left before so with DOT weight what happens is you know like we talked",
    "start": "1933960",
    "end": "1939720"
  },
  {
    "text": "about up here normally when a thread sees a weight it returns it either goes back to the thread pool or if it's the main thread it goes back to the UI and",
    "start": "1939720",
    "end": "1946200"
  },
  {
    "text": "to the user uh but with weight weight says no no no no you don't get to go anywhere you're gonna stay right here so",
    "start": "1946200",
    "end": "1953639"
  },
  {
    "text": "weight hijacks that calling thread and says you stay here and it still spends",
    "start": "1953639",
    "end": "1960080"
  },
  {
    "text": "up another thread for that background thread so now with DOT weight we have two things that are really bad the first",
    "start": "1960080",
    "end": "1966720"
  },
  {
    "text": "being if we call that on thread one the main thread well we've just locked our main thread and now our app's Frozen",
    "start": "1966720",
    "end": "1973399"
  },
  {
    "text": "until this is done and we're using two threads when when we only should be using one so even if you don't write any",
    "start": "1973399",
    "end": "1981320"
  },
  {
    "text": "code that has UI maybe you're sitting there going ah Brandon I I make apis I'm a I'm a backend developer who cares",
    "start": "1981320",
    "end": "1988240"
  },
  {
    "text": "about whether the UI gets tho gets frozen well remember your server has a finite number of threads in its thread",
    "start": "1988240",
    "end": "1994880"
  },
  {
    "text": "pool and so if you're calling weight on the server side even though there's no UI to worry about freezing well every",
    "start": "1994880",
    "end": "2001960"
  },
  {
    "text": "time you called out wait you're using two threads instead of one and eventually that server is going to get",
    "start": "2001960",
    "end": "2007760"
  },
  {
    "text": "slammed you're going to hit what's called threadpool exhaustion where now all the threads are used up and your",
    "start": "2007760",
    "end": "2013080"
  },
  {
    "text": "server's basically crippled so not only is weight bad because it'll freeze our UI if that if we call it on the on the",
    "start": "2013080",
    "end": "2020600"
  },
  {
    "text": "UI thread but it also cause our servers to hit that threadpool exhaustion more",
    "start": "2020600",
    "end": "2026080"
  },
  {
    "text": "quickly so the right way to do this is just to await this task and we can even",
    "start": "2026080",
    "end": "2032360"
  },
  {
    "text": "call configurate false here like I said I I put it everywhere in my view model so you'll be seeing that a lot today um",
    "start": "2032360",
    "end": "2038200"
  },
  {
    "text": "but let me let me just show you something real quick because you know it's it's super rare nowadays it's super",
    "start": "2038200",
    "end": "2043760"
  },
  {
    "text": "super rare but there is still a",
    "start": "2043760",
    "end": "2049000"
  },
  {
    "text": "0.001% chance that you might have to call do weight maybe there's an old library you're using that a developer",
    "start": "2049079",
    "end": "2056398"
  },
  {
    "text": "created before asyn a weight existed before task existed and the only way to do it is to call do weight well if",
    "start": "2056399",
    "end": "2064118"
  },
  {
    "text": "you're in this case and again this should be very rare 99.999% of the time you should not be",
    "start": "2064119",
    "end": "2069480"
  },
  {
    "text": "using dot weight but if we're in this scenario what we actually want to call is get a",
    "start": "2069480",
    "end": "2075520"
  },
  {
    "text": "waiter get result now this is still not great geta waer get result does",
    "start": "2075520",
    "end": "2081520"
  },
  {
    "text": "literally the same thing it's still going to hijack that calling thread it's going to say nope thread one you stay right here well I spin up another thread",
    "start": "2081520",
    "end": "2088000"
  },
  {
    "text": "to execute this in the background so we're still locking the calling thread we're still using two threads when we",
    "start": "2088000",
    "end": "2093040"
  },
  {
    "text": "only should be using one but we get better exception",
    "start": "2093040",
    "end": "2098879"
  },
  {
    "text": "handling if that's the right word for this um so one of the problems with weight and maybe you've seen this",
    "start": "2099280",
    "end": "2107280"
  },
  {
    "text": "is if if this code were to throw an exception like yeah this is just task. delay it's probably not going to throw",
    "start": "2107280",
    "end": "2112839"
  },
  {
    "text": "an exception unless this token gets cancelled but let's pretend this is a a long running method and it does throw an",
    "start": "2112839",
    "end": "2119480"
  },
  {
    "text": "exception weight does rethrow that exception for us so just like the await keyword rethrows the exception that gets",
    "start": "2119480",
    "end": "2125599"
  },
  {
    "text": "caught inside of move next weight will do that but when weight throws an exception it throws what's called a",
    "start": "2125599",
    "end": "2132119"
  },
  {
    "text": "system. agregate exception and those are a little weird and it's an aggregate",
    "start": "2132119",
    "end": "2138000"
  },
  {
    "text": "exception is an exception that can hold exceptions so it makes sense why the net",
    "start": "2138000",
    "end": "2144040"
  },
  {
    "text": "team did this because maybe there was a couple exceptions thrown inside of our uh inside of our task so it wants to",
    "start": "2144040",
    "end": "2150079"
  },
  {
    "text": "Bubble Up all of those to us um but for debugging for reading stack traces it",
    "start": "2150079",
    "end": "2155319"
  },
  {
    "text": "makes things a lot more difficult uh especially for new developers so if you've never seen a system. aggregate",
    "start": "2155319",
    "end": "2161000"
  },
  {
    "text": "exception before you might not know that you have to actually dig another layer into it to find the exceptions that are",
    "start": "2161000",
    "end": "2167720"
  },
  {
    "text": "the collection of exceptions inside the aggregate exception and especially with new developers you know those can be",
    "start": "2167720",
    "end": "2173440"
  },
  {
    "text": "really uh difficult to understand and track down so if we instead use geta wa",
    "start": "2173440",
    "end": "2180560"
  },
  {
    "text": "or get result again it does the same dangerous bad behaviors. weight we don't want to do this but if we have to",
    "start": "2180560",
    "end": "2187240"
  },
  {
    "text": "uh get wa get result get a waiter G result is a little bit better because",
    "start": "2187240",
    "end": "2192800"
  },
  {
    "text": "it'll actually rethrow our exception so whatever exception happened in our code that's the exception we get back from",
    "start": "2192800",
    "end": "2198400"
  },
  {
    "text": "geta wait or got get result so it'll make your life easier but in this case",
    "start": "2198400",
    "end": "2203760"
  },
  {
    "text": "we don't got to do that we're inside of async task method so we're going to do best practices and call just a weight",
    "start": "2203760",
    "end": "2212319"
  },
  {
    "text": "and configure weight false and if you didn't know yes you can use async a weight inide of finally",
    "start": "2212319",
    "end": "2218640"
  },
  {
    "text": "blocks okay next on the list so we've got our GP stories method and if we look",
    "start": "2218640",
    "end": "2225520"
  },
  {
    "text": "at it we're making actually two API calls so The Hacker News API is a little",
    "start": "2225520",
    "end": "2230599"
  },
  {
    "text": "a little hokey I wish it was better but you have to first make a call to say hey give me all the IDS for the top stories",
    "start": "2230599",
    "end": "2237400"
  },
  {
    "text": "and then they give you the IDS and then you make another API call for each story",
    "start": "2237400",
    "end": "2242880"
  },
  {
    "text": "that you have to iterate over to get each of them back so it's not great you know why not just give it to me all at",
    "start": "2242880",
    "end": "2248960"
  },
  {
    "text": "once I just want the top stories like what else is Hacker News for other than the top stories but this is the way they",
    "start": "2248960",
    "end": "2255040"
  },
  {
    "text": "designed it um and oh something cool before I forget this is a a new little",
    "start": "2255040",
    "end": "2261720"
  },
  {
    "text": "toy inside ofet 8 uh this has nothing to do with asyn weight but I wanted to show it off here because I am a huge huge fan",
    "start": "2261720",
    "end": "2269880"
  },
  {
    "text": "of immutability so when when I make API calls in my apps and I get data back",
    "start": "2269880",
    "end": "2275880"
  },
  {
    "text": "from another source SCE I don't want that data to change I've been using I readon list the interface I readon list",
    "start": "2275880",
    "end": "2283319"
  },
  {
    "text": "instead of list because that actually will store things inside of a list and",
    "start": "2283319",
    "end": "2288560"
  },
  {
    "text": "you can't change it well in net 8 they came out with this new namespace called",
    "start": "2288560",
    "end": "2294200"
  },
  {
    "text": "system. collections. Frozen and one of them is called Frozen set and there's",
    "start": "2294200",
    "end": "2299240"
  },
  {
    "text": "also Frozen dictionary and kind of similar to a readon list or an mutable",
    "start": "2299240",
    "end": "2306119"
  },
  {
    "text": "list uh this allow this will make sure nothing changes inside you know one of the problems with I readon list",
    "start": "2306119",
    "end": "2314119"
  },
  {
    "text": "is you could still change something if you worked hard enough you could still you know make a reference to something",
    "start": "2314119",
    "end": "2320119"
  },
  {
    "text": "inside of it and swap them out you know with reference types. net can get a little hokey like that and we can kind",
    "start": "2320119",
    "end": "2325920"
  },
  {
    "text": "of hack our own code accidentally a little bit but Frozen set it'll never change so that's why I've got this here because I want to get these top stories",
    "start": "2325920",
    "end": "2333440"
  },
  {
    "text": "back up here and I always want that pure data that came back from the API",
    "start": "2333440",
    "end": "2339280"
  },
  {
    "text": "because who knows maybe you gotta you got to double check it later like hey what what data actually did come back",
    "start": "2339280",
    "end": "2344560"
  },
  {
    "text": "and if we already modified that data that'd be bad so welcome to Frozen set but back to asyn stuff so we're looking",
    "start": "2344560",
    "end": "2352240"
  },
  {
    "text": "at this code here and what are we doing we're getting those top story IDs so we got them and then once we get those IDs",
    "start": "2352240",
    "end": "2360119"
  },
  {
    "text": "we have to iterate over them like I said this this API kind of sucks because now I've got to one by one get make 50 API",
    "start": "2360119",
    "end": "2367280"
  },
  {
    "text": "calls to get 50 stories so I got to make this API call get a new story add it to the list I got to make another API call",
    "start": "2367280",
    "end": "2373240"
  },
  {
    "text": "get the story add to the list and you know if each API call takes 10 seconds and I'm making 50 50 of them serially",
    "start": "2373240",
    "end": "2381800"
  },
  {
    "text": "well my users aren't going to like that so so what can we do here well instead",
    "start": "2381800",
    "end": "2388200"
  },
  {
    "text": "of rewriting this I'm going to jump over here to the good async way practices to",
    "start": "2388200",
    "end": "2393760"
  },
  {
    "text": "show you something that's really really cool inside of net now that we can utilize",
    "start": "2393760",
    "end": "2399040"
  },
  {
    "text": "and it's called I async inumerable so with i async inumerable",
    "start": "2399040",
    "end": "2405560"
  },
  {
    "text": "before we look at the code before we look at that rewrite let's look at how we use it so in the good code here this",
    "start": "2405560",
    "end": "2412839"
  },
  {
    "text": "is our refresh method again but you know we're passing in cancellation tokens best practices um and then here now we",
    "start": "2412839",
    "end": "2420960"
  },
  {
    "text": "see this await for each Loop and this is really really cool because if we look at",
    "start": "2420960",
    "end": "2426960"
  },
  {
    "text": "the bad code side by side the bad code when it calls get",
    "start": "2426960",
    "end": "2433000"
  },
  {
    "text": "stories it just has to wait till all those stories have been retrieved so again it's just sitting there for let's",
    "start": "2433000",
    "end": "2439319"
  },
  {
    "text": "say 500 seconds while we make 50 API calls and then it can display them on the screen with IAS sync innumerable we",
    "start": "2439319",
    "end": "2447720"
  },
  {
    "text": "have this await for each Loop let's make this full screen where we can basically pass in an",
    "start": "2447720",
    "end": "2455359"
  },
  {
    "text": "async method get top stories is an async method um it's a little weird because it's returning async inumerable instead",
    "start": "2455359",
    "end": "2462000"
  },
  {
    "text": "of task but we can still use the async keyword we can still use the awake keyword um but what's cool is",
    "start": "2462000",
    "end": "2470000"
  },
  {
    "text": "once one story is retrieved I can take action on it and if",
    "start": "2470000",
    "end": "2475920"
  },
  {
    "text": "I if I relaunch the app here this is running with the good view model so the good practices you'll see",
    "start": "2475920",
    "end": "2483640"
  },
  {
    "text": "the app updates in real time it doesn't wait for each to come back I'm able to",
    "start": "2483640",
    "end": "2489160"
  },
  {
    "text": "kick off 50 background tasks and then as they finish I can Surface them to the",
    "start": "2489160",
    "end": "2494280"
  },
  {
    "text": "user so even if and you know mobile phones are fickle maybe you're on the bus maybe the you go through a tunnel",
    "start": "2494280",
    "end": "2501800"
  },
  {
    "text": "your internet connection sucks we're at a conference where there's terrible Wi-Fi although I think the Wi-Fi has been pretty good here so far at least",
    "start": "2501800",
    "end": "2507319"
  },
  {
    "text": "for me uh we we don't want the user just sitting there looking at like just",
    "start": "2507319",
    "end": "2512359"
  },
  {
    "text": "little spinning indicator it's so much better if we can start giving them the data first or as as we're waiting for",
    "start": "2512359",
    "end": "2519000"
  },
  {
    "text": "all of it to finish rather so so how does this work this is and this is a little weird if you've never implemented",
    "start": "2519000",
    "end": "2525079"
  },
  {
    "text": "in iyn inumerable before um it's going to feel a little icky but man the",
    "start": "2525079",
    "end": "2530480"
  },
  {
    "text": "results are so good that it's totally worth it um so the first thing I want to point out is these parameters so like I",
    "start": "2530480",
    "end": "2538200"
  },
  {
    "text": "mentioned earlier we always want to be able to pass in a cancellation token if we're making an async task method or",
    "start": "2538200",
    "end": "2543760"
  },
  {
    "text": "even an async i async enumerable method um give me the option to give you a",
    "start": "2543760",
    "end": "2549800"
  },
  {
    "text": "cancellation token because if it's taken more than 10 seconds maybe I just want to call it off so we can still do that",
    "start": "2549800",
    "end": "2558599"
  },
  {
    "text": "but I think nurmes got some extra logic in it that we can take advantage of so",
    "start": "2558599",
    "end": "2563960"
  },
  {
    "text": "there's this enumerator cancellation attribute and if we assign that here as",
    "start": "2563960",
    "end": "2572280"
  },
  {
    "text": "our cancellation token parameter to our cancellation token parameter now now",
    "start": "2572280",
    "end": "2577559"
  },
  {
    "text": "this I async inumerable knows that if this token is ever",
    "start": "2577559",
    "end": "2582960"
  },
  {
    "text": "cancelled stop so and again we shouldn't but let's say none of our methods in",
    "start": "2582960",
    "end": "2588440"
  },
  {
    "text": "here accepted cancellation token so we're not we're not doing anything with this cancellation token it's not being",
    "start": "2588440",
    "end": "2594000"
  },
  {
    "text": "used anywhere um that's okay because thewait for each Loop will automatically",
    "start": "2594000",
    "end": "2600960"
  },
  {
    "text": "break its iteration once it sees that this cancellation token has completed as",
    "start": "2600960",
    "end": "2606480"
  },
  {
    "text": "long as we put this attribute in it now should we ignore it no we should always",
    "start": "2606480",
    "end": "2611839"
  },
  {
    "text": "pass in those cancellation tokens so let's put them back here um so keep that",
    "start": "2611839",
    "end": "2617160"
  },
  {
    "text": "in mind I think you do get yelled at I think I'll get a do I get a squiggle oh wait where'd it",
    "start": "2617160",
    "end": "2624680"
  },
  {
    "text": "go if I get rid of just that part yeah we get a little bit of a squiggle there",
    "start": "2624680",
    "end": "2629920"
  },
  {
    "text": "so it's letting me know that you've got a what's exactly it say you've got a",
    "start": "2629920",
    "end": "2636480"
  },
  {
    "text": "there we go we should decorate with the enumerator cancellation Togo and attribute blah blah blah blah blah so if",
    "start": "2636480",
    "end": "2641559"
  },
  {
    "text": "you forget hopefully that's enough to remind you as well um but yeah if we look at this code the way we take a",
    "start": "2641559",
    "end": "2648880"
  },
  {
    "text": "method like this where we are in the bad way doing a four",
    "start": "2648880",
    "end": "2658520"
  },
  {
    "text": "each Loop and iterating over one story at a time and turn that into an isync inumerable",
    "start": "2658520",
    "end": "2665000"
  },
  {
    "text": "is we basically use a list of tasks so I I created this new list of task of type",
    "start": "2665000",
    "end": "2672280"
  },
  {
    "text": "story Model because that's that's what my API returns back so the API is going to give me a task of type story Model",
    "start": "2672280",
    "end": "2679240"
  },
  {
    "text": "and what I do I say hey for every top Story ID basically kick off that task so kick",
    "start": "2679240",
    "end": "2685079"
  },
  {
    "text": "it off in the background like this get story right here this returns a task but I'm not",
    "start": "2685079",
    "end": "2690599"
  },
  {
    "text": "awaiting it I'm just putting all those tasks into a list because then what I do",
    "start": "2690599",
    "end": "2696079"
  },
  {
    "text": "is I put it in a while loop and I say get top story task list. any if that's",
    "start": "2696079",
    "end": "2702079"
  },
  {
    "text": "still true keep iterating through here and what we get is or what we can do is",
    "start": "2702079",
    "end": "2707680"
  },
  {
    "text": "we can take advantage of task. when any so task. when any totally totally cool",
    "start": "2707680",
    "end": "2713040"
  },
  {
    "text": "um what it does is you pass into task. when a collection so you pass in an inumerable",
    "start": "2713040",
    "end": "2719280"
  },
  {
    "text": "and anytime or rather to be more specific you pass in an inumerable of",
    "start": "2719280",
    "end": "2725280"
  },
  {
    "text": "type t so if you have a list of tasks you can pass those into task. when any and as",
    "start": "2725280",
    "end": "2732160"
  },
  {
    "text": "soon as one of those tasks is completed it'll return it to me so I say a wait t.",
    "start": "2732160",
    "end": "2737760"
  },
  {
    "text": "when any of course configurate false and I get this completed get story task here",
    "start": "2737760",
    "end": "2744400"
  },
  {
    "text": "so the first thing I do is I remove that from my list because I know it's done I don't need to I don't need to await it anymore and then I get the result from",
    "start": "2744400",
    "end": "2751960"
  },
  {
    "text": "that story and I call yield return now if you're familiar with I inumerable",
    "start": "2751960",
    "end": "2758200"
  },
  {
    "text": "you've maybe done a yield return before um but maybe you're not like who who",
    "start": "2758200",
    "end": "2764280"
  },
  {
    "text": "uses yield return really anymore for I innumerables I don't but for I async",
    "start": "2764280",
    "end": "2769480"
  },
  {
    "text": "innumerable what yield return does and the reason it's so beneficial is as soon",
    "start": "2769480",
    "end": "2774880"
  },
  {
    "text": "as we hit this yield return our code jumps into this for each block so now",
    "start": "2774880",
    "end": "2781480"
  },
  {
    "text": "the yield return happens and we can iterate on what just that one result we",
    "start": "2781480",
    "end": "2786920"
  },
  {
    "text": "got back and then the code returns back here to resume the while loop so in this",
    "start": "2786920",
    "end": "2792720"
  },
  {
    "text": "manner we're able to kick off all the background tasks we need and then we can show them to the user as they complete",
    "start": "2792720",
    "end": "2800119"
  },
  {
    "text": "so super super useful like I said creating a list of tasks is a little weird and then a weight dot task. whenn",
    "start": "2800119",
    "end": "2807440"
  },
  {
    "text": "is a little weird but man the the benefits of isnc and neurable huge huge",
    "start": "2807440",
    "end": "2812640"
  },
  {
    "text": "huge so highly highly recommend that for all of our apps just so we don't have to leave the",
    "start": "2812640",
    "end": "2819839"
  },
  {
    "text": "user sitting there waiting for something to happen all right so let's pretend like we refactored that here we're a",
    "start": "2819839",
    "end": "2826920"
  },
  {
    "text": "little low on time so I'm not going to rewrite this whole method for us all right so next one we've got a method called get story",
    "start": "2826920",
    "end": "2834960"
  },
  {
    "text": "This Is Calling The Hacker News API it's getting the story cancellation tokens good um we're not doing configur weight",
    "start": "2834960",
    "end": "2841200"
  },
  {
    "text": "fall so let's slap that in there that'd be good but what else could we do",
    "start": "2841200",
    "end": "2846440"
  },
  {
    "text": "because we're using a weight we're using async configure false well something that's kind of cool here is that if we",
    "start": "2846440",
    "end": "2853800"
  },
  {
    "text": "look at the return type of get story it returns a type of task story Model and",
    "start": "2853800",
    "end": "2861319"
  },
  {
    "text": "if I look at my method My Method signature it also returns a type of task story Model and the only place in this",
    "start": "2861319",
    "end": "2868839"
  },
  {
    "text": "method where I'm using the awake keyword is in the return statement so something I can",
    "start": "2868839",
    "end": "2874280"
  },
  {
    "text": "do I can get get rid of async I can get rid of a",
    "start": "2874280",
    "end": "2879319"
  },
  {
    "text": "weight and I can just return that task now why is this good why would I want to",
    "start": "2879319",
    "end": "2884839"
  },
  {
    "text": "do this well let's put those back and think about what's going on again so again let's pretend thread one kicks off",
    "start": "2884839",
    "end": "2891440"
  },
  {
    "text": "this method so thread one jumps into get story and immediately hits the awake keyword so thread one leaves we grab a",
    "start": "2891440",
    "end": "2897920"
  },
  {
    "text": "background thread now thread 52 is running get story in the background when thread 52 is done it's going to well",
    "start": "2897920",
    "end": "2905520"
  },
  {
    "text": "this case we have configurate false so it won't return to the calling thread it'll let net know hey I'm all done so",
    "start": "2905520",
    "end": "2910920"
  },
  {
    "text": "with configurate false net just goes to the thread pool grabs whatever threads free and let's say thread seven now",
    "start": "2910920",
    "end": "2918040"
  },
  {
    "text": "returns this method so what just happened was with this one line of code",
    "start": "2918040",
    "end": "2923160"
  },
  {
    "text": "we had to switch threads twice and if we can avoid that we should because",
    "start": "2923160",
    "end": "2928559"
  },
  {
    "text": "switching threads switching context is expensive in net so if we get rid of",
    "start": "2928559",
    "end": "2935119"
  },
  {
    "text": "async get get rid of a weight and just return that task essentially what we're doing is",
    "start": "2935119",
    "end": "2940319"
  },
  {
    "text": "deferring that context switch that thread change up to whoever calls this",
    "start": "2940319",
    "end": "2947079"
  },
  {
    "text": "method so wherever I got in the code where are we calling it up here so up here where we call awake get story it's",
    "start": "2947079",
    "end": "2954240"
  },
  {
    "text": "returning that task that we just returned so so by just returning the task we can save a little bit on async",
    "start": "2954240",
    "end": "2960520"
  },
  {
    "text": "of weight our codee's going to run a little bit faster and we got rid of the asyn keyword so our code gets a little bit smaller I mean 100 btes smaller but",
    "start": "2960520",
    "end": "2966880"
  },
  {
    "text": "still a little bit smaller now I've got one more down here um and this one's",
    "start": "2966880",
    "end": "2973319"
  },
  {
    "text": "kind of similar right I mean the only real difference is we've got this if statement to you know instead of getting",
    "start": "2973319",
    "end": "2980240"
  },
  {
    "text": "the top story IDs every time like do they really change that much and if we've already retrieved them and they've",
    "start": "2980240",
    "end": "2986440"
  },
  {
    "text": "done a pull the user does another pull to refresh well I said if it's only been an hour just use the ones we already got",
    "start": "2986440",
    "end": "2992599"
  },
  {
    "text": "we don't need to make another API call so that's a little different we've got a try catch block here but like I was just",
    "start": "2992599",
    "end": "2999760"
  },
  {
    "text": "saying if the only place we're using the awake keyword is in the return",
    "start": "2999760",
    "end": "3005079"
  },
  {
    "text": "statement we can get rid of it and this up here will yell at us because we have to say from result just to pass that",
    "start": "3005079",
    "end": "3012760"
  },
  {
    "text": "into a task since we do have to return a task and this is good",
    "start": "3012760",
    "end": "3018400"
  },
  {
    "text": "right no this is actually really bad so this is the exception um so this is fine",
    "start": "3018400",
    "end": "3025880"
  },
  {
    "text": "up here but down here we're inside of a tri catch block so if we think about what happens is let's say our code comes",
    "start": "3025880",
    "end": "3032240"
  },
  {
    "text": "in the thread gets to here and then the thread hits this return statement it",
    "start": "3032240",
    "end": "3038160"
  },
  {
    "text": "returns we've we've exited this method which means we've exited this TR catch block so now if this method throws an",
    "start": "3038160",
    "end": "3045119"
  },
  {
    "text": "exception we're never going to catch it here because we've already left we've already returned so so we can't do that",
    "start": "3045119",
    "end": "3051440"
  },
  {
    "text": "actually so in this case because we're inside of a tri catch block and we want to catch that exception be able to",
    "start": "3051440",
    "end": "3057000"
  },
  {
    "text": "handle it we do actually want to return a weight so most of the times if the",
    "start": "3057000",
    "end": "3063079"
  },
  {
    "text": "only place in your method where you use the awake keyword is in the return statement you can just return the task",
    "start": "3063079",
    "end": "3069160"
  },
  {
    "text": "but in cases like this where we're inside of a TR catch block or maybe we're inside of a using block like we're",
    "start": "3069160",
    "end": "3074319"
  },
  {
    "text": "disposing of an object make sure to keep the return await because speaking from experience you're going to get real",
    "start": "3074319",
    "end": "3079680"
  },
  {
    "text": "weird bugs in your app and you're like why didn't this why didn't this bug get caught I catch I got a catch right here",
    "start": "3079680",
    "end": "3084960"
  },
  {
    "text": "so we're going to keep this AWA in here we're going to keep configure a weight false um but what we can do to refactor",
    "start": "3084960",
    "end": "3090880"
  },
  {
    "text": "this method is we can use something called a value task now a value task is",
    "start": "3090880",
    "end": "3097839"
  },
  {
    "text": "kind of similar to a task on the surface it feels super super super super similar",
    "start": "3097839",
    "end": "3102960"
  },
  {
    "text": "like if I look at the code that calls this method I still await it I still can basically treat it like a task um but",
    "start": "3102960",
    "end": "3111599"
  },
  {
    "text": "with a value task it's a value type so in net we have value types and we have",
    "start": "3111599",
    "end": "3116839"
  },
  {
    "text": "reference types value types get put onto a stack reference types get put onto a heap and if you remember from your data",
    "start": "3116839",
    "end": "3123559"
  },
  {
    "text": "structures days adding something to a stack super quick super simple you just popping it or push it into the top",
    "start": "3123559",
    "end": "3130319"
  },
  {
    "text": "putting something on a heap more expensive because a heap has to be indexed so adding something to a heap is",
    "start": "3130319",
    "end": "3135599"
  },
  {
    "text": "a little bit more expensive and the reason we can use value task here is because of this part of the code right",
    "start": "3135599",
    "end": "3143319"
  },
  {
    "text": "here so if we look at the code the first time we call it we're not",
    "start": "3143319",
    "end": "3149760"
  },
  {
    "text": "going to have anything our data is not going to be recent so we're not going to return here we're going to come down here and call the API but then the user",
    "start": "3149760",
    "end": "3156520"
  },
  {
    "text": "does a pull to refresh and the second time this code runs we're going to return right away and the third time this code runs we're going to return",
    "start": "3156520",
    "end": "3162920"
  },
  {
    "text": "right away and for the whole next hour the next time this code runs we're going to return right away and if you have a",
    "start": "3162920",
    "end": "3169480"
  },
  {
    "text": "scenario like this where you have a method where the hot path where something like this where nine times out",
    "start": "3169480",
    "end": "3175520"
  },
  {
    "text": "of 10 you're going to return without ever using the awake keyword you can",
    "start": "3175520",
    "end": "3181520"
  },
  {
    "text": "return a value task and you get a nice little performance bump so you don't want a value task everywhere if if your",
    "start": "3181520",
    "end": "3187079"
  },
  {
    "text": "method always calls the awake keyword keep using a task that's what it's there for but with value task we get a little",
    "start": "3187079",
    "end": "3193240"
  },
  {
    "text": "bit of a performance bump because we don't have to go through all the overhead of creating a task and putting out the Heap and they're a little bit",
    "start": "3193240",
    "end": "3199720"
  },
  {
    "text": "more complex than value tasks anyway so we can take advantage of that here and again our app now works a little a",
    "start": "3199720",
    "end": "3205240"
  },
  {
    "text": "little bit faster okay so let's let's do a quick",
    "start": "3205240",
    "end": "3211640"
  },
  {
    "text": "review like I said this is years and years this is like what 15 years of",
    "start": "3211640",
    "end": "3217160"
  },
  {
    "text": "async weight content smash into an hour so what do we talk about well never use weight never use do result we didn't",
    "start": "3217160",
    "end": "3223880"
  },
  {
    "text": "show do result in the examples but it does the same thing that weight does it's going to lock the calling thread",
    "start": "3223880",
    "end": "3229440"
  },
  {
    "text": "it's going to keep it it's going to hold it hostage while the other background threads going we're going to be using two threads we should only be using one",
    "start": "3229440",
    "end": "3236640"
  },
  {
    "text": "so instead we should just use the awake keyword but if in that really really rare instance where we can't use a",
    "start": "3236640",
    "end": "3243640"
  },
  {
    "text": "weight we should use get a weit or get result and get a wait or get result actually replaces both it has the same",
    "start": "3243640",
    "end": "3250000"
  },
  {
    "text": "behavior as that weight and it has the same behavior as result so we can go through all of our code and hopefully",
    "start": "3250000",
    "end": "3255920"
  },
  {
    "text": "replace replace weight with a weight but again in the rare instance where you",
    "start": "3255920",
    "end": "3261400"
  },
  {
    "text": "have to get a wait or get result fired forget task so if you want to run a task on a background thread",
    "start": "3261400",
    "end": "3267599"
  },
  {
    "text": "that's totally cool I do it all the time myself feel free to grab my n package ASN await best practices and then you",
    "start": "3267599",
    "end": "3274119"
  },
  {
    "text": "can use that fire and forget extension method or if your company doesn't like",
    "start": "3274119",
    "end": "3279319"
  },
  {
    "text": "you adding new get packages you can just copy paste the code that's totally cool too avoid return a weit so like we saw",
    "start": "3279319",
    "end": "3286400"
  },
  {
    "text": "earlier if we're if the only place in our method where we use the awake keyword is in the return",
    "start": "3286400",
    "end": "3292440"
  },
  {
    "text": "statement we could just return the task except if you're in a TR catch block or",
    "start": "3292440",
    "end": "3298359"
  },
  {
    "text": "if you're in a using block again this is totally from experience I I return out of a using block once and all of a",
    "start": "3298359",
    "end": "3304079"
  },
  {
    "text": "sudden I'm getting object disposed errors because what I was trying to do in the background that object got",
    "start": "3304079",
    "end": "3309960"
  },
  {
    "text": "disposed so learn from my pain learn from my examples if you're using a TR catch block if you're inside of a using",
    "start": "3309960",
    "end": "3315200"
  },
  {
    "text": "block keep the return await utilize configurate false so if",
    "start": "3315200",
    "end": "3320640"
  },
  {
    "text": "you don't need to return to that calling thread configurate false will help your code run a little bit faster there is a",
    "start": "3320640",
    "end": "3325960"
  },
  {
    "text": "caveat to this net has something called a synchronization context in most",
    "start": "3325960",
    "end": "3331400"
  },
  {
    "text": "Frameworks uh so I've listed out a couple the popular ones or at least the ones I could think of off the top of my",
    "start": "3331400",
    "end": "3337000"
  },
  {
    "text": "head um and kind of a rule of thumb is if it's got a UI it probably has synchronization context because the",
    "start": "3337000",
    "end": "3343480"
  },
  {
    "text": "whole point of a synchronization context is to be able to help Net return to the UI thread so if you have a UI there's a",
    "start": "3343480",
    "end": "3350799"
  },
  {
    "text": "likely likely chance that you have a synchronization context and if that's the case configure weight false will",
    "start": "3350799",
    "end": "3356960"
  },
  {
    "text": "never return back to that calling thread um if there is no config if there is no",
    "start": "3356960",
    "end": "3362760"
  },
  {
    "text": "synchronization context like for example asp.net core doesn't have a conf configuration context synchronization",
    "start": "3362760",
    "end": "3370520"
  },
  {
    "text": "context so in asp.net core you can still use configure weight false I actually do",
    "start": "3370520",
    "end": "3376880"
  },
  {
    "text": "it's partly out of habit and partly kind of best practices because I copy paste code from a lot of places a lot so I",
    "start": "3376880",
    "end": "3382680"
  },
  {
    "text": "just want to follow best practices I still use it in asp core but because asp.net core does not have a",
    "start": "3382680",
    "end": "3388039"
  },
  {
    "text": "synchronization context calling configur rate false is the same thing as calling configur rate true they they don't make",
    "start": "3388039",
    "end": "3394319"
  },
  {
    "text": "a difference because that whole configure weight is actually telling the synchronization context whether or not",
    "start": "3394319",
    "end": "3400799"
  },
  {
    "text": "to returned back to the calling thread so little caveat there uh value task so",
    "start": "3400799",
    "end": "3405960"
  },
  {
    "text": "again if the hot path of your method does not use the await keyword if nine",
    "start": "3405960",
    "end": "3411160"
  },
  {
    "text": "times out of 10 that code in your method will never call await have it return a value task instead of a",
    "start": "3411160",
    "end": "3417640"
  },
  {
    "text": "task isnc inumerable like we saw this is our await for each Loop so for streaming",
    "start": "3417640",
    "end": "3422839"
  },
  {
    "text": "data if we want to update the UI as uh data returns back uh this will give a much much better user experience just",
    "start": "3422839",
    "end": "3429440"
  },
  {
    "text": "keep in mind we do still want to use cancellation tokens and make sure to tell that for each Loop that await for",
    "start": "3429440",
    "end": "3435480"
  },
  {
    "text": "each Loop this enumerator cancellation attribute to let it know that hey this",
    "start": "3435480",
    "end": "3441160"
  },
  {
    "text": "is your cancellation token so anytime this cancels you're done you don't need to keep",
    "start": "3441160",
    "end": "3446839"
  },
  {
    "text": "looping and we async so if you ever have a method where the developer just didn't",
    "start": "3446839",
    "end": "3453160"
  },
  {
    "text": "allow you to include a cancellation token or pass in a cancellation token you can just bolt on a cancellation",
    "start": "3453160",
    "end": "3459240"
  },
  {
    "text": "token with this extension method do weight async and it works just as if",
    "start": "3459240",
    "end": "3464359"
  },
  {
    "text": "they did so it's kind of a little workaround for us for super super helpful for backwards",
    "start": "3464359",
    "end": "3470119"
  },
  {
    "text": "compatibility last one and we actually didn't cover this in the example code mostly because I couldn't really come up",
    "start": "3470119",
    "end": "3475760"
  },
  {
    "text": "with a good example in this app to make this work but if you've ever heard of I",
    "start": "3475760",
    "end": "3480799"
  },
  {
    "text": "disposable there's now an i async disposable and it works super super similar so we have our using block and",
    "start": "3480799",
    "end": "3488079"
  },
  {
    "text": "just like with I disposable when the end of the when we reach the end of the using block that object will be disposed",
    "start": "3488079",
    "end": "3494599"
  },
  {
    "text": "so in this case we're neing up file stream we're going to write all our code we saving data to a file and at the end",
    "start": "3494599",
    "end": "3500599"
  },
  {
    "text": "of this using block the file stream will be disposed so we're being you know Good Shepherd of our memory and good net",
    "start": "3500599",
    "end": "3506440"
  },
  {
    "text": "developers well kind of the same idea with AWA using so there's certain",
    "start": "3506440",
    "end": "3512359"
  },
  {
    "text": "libraries like file stream that are kind of heavy to initialize heavy to tear down and we don't really want to do that",
    "start": "3512359",
    "end": "3518880"
  },
  {
    "text": "on the main thread so they've given us now I async disposable and to use that",
    "start": "3518880",
    "end": "3525039"
  },
  {
    "text": "all we have to do is say await using treat it exactly the same we can even you can see at the end there at the",
    "start": "3525039",
    "end": "3531240"
  },
  {
    "text": "very very end it says do configurate false so we can still tell it configurate false and then the way this",
    "start": "3531240",
    "end": "3536640"
  },
  {
    "text": "works at the end of that block that's when it'll actually await it so it's a",
    "start": "3536640",
    "end": "3543400"
  },
  {
    "text": "little the syntax makes sense and the fact that it looks good um but it's a",
    "start": "3543400",
    "end": "3548520"
  },
  {
    "text": "little weird because that await doesn't really happen till the end but it'll still happen",
    "start": "3548520",
    "end": "3554559"
  },
  {
    "text": "so if you haven't had a chance yet this is this is the time make sure to take out your phones grab a picture of the QR",
    "start": "3554559",
    "end": "3560880"
  },
  {
    "text": "code grab this link because this is where you can find all the resources from today so I've uploaded all of the",
    "start": "3560880",
    "end": "3566520"
  },
  {
    "text": "slides from this presentation I've uploaded a video from a previous time I've given this talk so you don't have",
    "start": "3566520",
    "end": "3572880"
  },
  {
    "text": "to worry about memorizing anything you can re-watch the video you can share it with your co-workers um I've also included a bunch of helpful links in",
    "start": "3572880",
    "end": "3579319"
  },
  {
    "text": "here so if you want to dive deeper into value task you want to dive deeper into isnc disposable you want to dive deeper",
    "start": "3579319",
    "end": "3584359"
  },
  {
    "text": "into isnc innumerable all those cool things we talked about today are on that website for you as",
    "start": "3584359",
    "end": "3590400"
  },
  {
    "text": "well thank you",
    "start": "3590400",
    "end": "3596640"
  },
  {
    "text": "[Applause]",
    "start": "3597800",
    "end": "3600989"
  }
]