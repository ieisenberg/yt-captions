[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "all right we look to be at the 20-minute mark to go ahead and get started i'm seeing",
    "start": "7279",
    "end": "12320"
  },
  {
    "text": "people start to trickle in uh it's always funny to like shame the people when conferences are irl and",
    "start": "12320",
    "end": "18400"
  },
  {
    "text": "they're like trying to creep in the back door but if the speaker calls them up they're like oh no i see you i see you it's one of the",
    "start": "18400",
    "end": "24400"
  },
  {
    "text": "forms of entertainment that i miss is is getting to interact with the audience um so",
    "start": "24400",
    "end": "30000"
  },
  {
    "text": "as far as uh the way that you and i can communicate in this talk um you've got a couple different options",
    "start": "30000",
    "end": "35040"
  },
  {
    "text": "obviously you're probably in the slack for nbc so feel free to drop stuff in the track channel i'll",
    "start": "35040",
    "end": "41360"
  },
  {
    "text": "keep an eye on the chat tool um inside this like citrix",
    "start": "41360",
    "end": "46480"
  },
  {
    "text": "session as well but let's be real slack is way more fun more emojis more reaction gifts",
    "start": "46480",
    "end": "51760"
  },
  {
    "text": "um so do whatever you want you can ask questions as we go i'll try and save time for q a at the end",
    "start": "51760",
    "end": "58239"
  },
  {
    "text": "um and we'll just have some some fun in this remote environment um so if you have been to nbc before",
    "start": "58239",
    "end": "65840"
  },
  {
    "text": "welcome back i'm sorry that we can't hang out in person um very very depressing ndc is one of my favorite conferences just because the people are",
    "start": "65840",
    "end": "72880"
  },
  {
    "text": "so amazing and it makes it really rewarding as a speaker if you're new to ndc um you know we'll be back someday uh but",
    "start": "72880",
    "end": "79680"
  },
  {
    "text": "you're really lucky there are a lot of really talented really brilliant speakers here um covering a lot of great content but",
    "start": "79680",
    "end": "85200"
  },
  {
    "text": "they're also very friendly people they're you know just like you um so don't feel free to reach out you",
    "start": "85200",
    "end": "90880"
  },
  {
    "text": "know ask questions we love that kind of engagement um there aren't a lot of egos running around so a speaker is not going to dv",
    "start": "90880",
    "end": "97680"
  },
  {
    "text": "it's not worth their time though some of us might be popping in and out of client meetings um because we're not uh physically at a",
    "start": "97680",
    "end": "104479"
  },
  {
    "text": "conference and therefore it's sometimes high to maintain those boundaries it's hard to maintain those branches excuse me",
    "start": "104479",
    "end": "110799"
  },
  {
    "text": "all right um but what we're going to be talking about right now is reactive programming state management",
    "start": "110799",
    "end": "116640"
  },
  {
    "text": "and redux for the modern front-end developer and i want to kind of put a disclaimer on this because one of the last times i",
    "start": "116640",
    "end": "121840"
  },
  {
    "text": "gave this talk i got feedback where somebody was very confused that this talk was not about react reactive",
    "start": "121840",
    "end": "127759"
  },
  {
    "text": "programming is a programming style that is used across more places than react um i do angular",
    "start": "127759",
    "end": "134800"
  },
  {
    "text": "development for most my day job so a lot of these examples will be in angular but my hope is that",
    "start": "134800",
    "end": "140800"
  },
  {
    "text": "we're going to talk about stuff at a really conceptual level and so i would hope that regardless of what your framework of preference is",
    "start": "140800",
    "end": "147360"
  },
  {
    "text": "you'll be able to you know take some ideas away from this talk have a better understanding of reactive programming state management um",
    "start": "147360",
    "end": "154160"
  },
  {
    "text": "and i'm going to talk about a really basic pattern called redux um that a lot of different approaches implement and this might",
    "start": "154160",
    "end": "160400"
  },
  {
    "text": "actually be something that you found yourself implementing before without realizing if you're trying to solve a lot of state management problems that we run",
    "start": "160400",
    "end": "166800"
  },
  {
    "text": "into um in the modern web development environment uh so a little bit about me my name is",
    "start": "166800",
    "end": "172879"
  },
  {
    "text": "jennifer wadella you can follow me on twitter at like omg at steady i'm the director of angular development at a consulting firm called",
    "start": "172879",
    "end": "179519"
  },
  {
    "text": "betobe um we specialize in front-end javascript development but really all javascript so we do node we",
    "start": "179519",
    "end": "185519"
  },
  {
    "text": "do devops we have a really talented ux team so if you are ever in need of resources be it training be",
    "start": "185519",
    "end": "191519"
  },
  {
    "text": "it staff augmentation or anything like that my team can definitely help you out i've got a bunch of great experts",
    "start": "191519",
    "end": "197599"
  },
  {
    "text": "in angular on my team that are really smart awesome people that that love to help and share knowledge um",
    "start": "197599",
    "end": "203040"
  },
  {
    "text": "i'm an angular google developer expert which is a program sanctioned by google um before pandemic i would call myself",
    "start": "203040",
    "end": "209760"
  },
  {
    "text": "an international speaker now i guess i'm just going to call myself a sit behind my desk speaker and personal space invaded by cat speaker",
    "start": "209760",
    "end": "216799"
  },
  {
    "text": "um i i did really enjoy that though that brought me a lot of joy um and in normal times i'm a kombucha",
    "start": "216799",
    "end": "223280"
  },
  {
    "text": "brewing crazy plant lady so if you're a kombucha friend fan i want to hear about it if you brew your",
    "start": "223280",
    "end": "228480"
  },
  {
    "text": "own i want to hear about it let me know because i love talking about stuff like that okay but when we get started um to talk",
    "start": "228480",
    "end": "236080"
  },
  {
    "start": "233000",
    "end": "233000"
  },
  {
    "text": "about these concepts we need to understand the reality of the world that we live in and i know dylan is probably here just because he wants to",
    "start": "236080",
    "end": "242080"
  },
  {
    "text": "talk on javascript what what i know so surprised by that um but you know and i i love javascript",
    "start": "242080",
    "end": "248480"
  },
  {
    "text": "but i am not somebody who's going to love something and not stand there and also criticize and point out flaws",
    "start": "248480",
    "end": "254159"
  },
  {
    "text": "um turns out we can do this for presidential figures too who knew anyway um but modern javascript",
    "start": "254159",
    "end": "261440"
  },
  {
    "text": "development has grown rapidly and sometimes it feels like you know we're a bunch of like really labrador retriever",
    "start": "261440",
    "end": "267919"
  },
  {
    "text": "puppies like chasing balls in all sorts of different directions without really understanding what might be the best direction to go in um",
    "start": "267919",
    "end": "274720"
  },
  {
    "text": "we've come ways in building tools and libraries and frameworks to help us conquer a lot of patterns that we see in",
    "start": "274720",
    "end": "280400"
  },
  {
    "text": "um you know modern application development and and really finding better ways to do that but there are a lot of problems",
    "start": "280400",
    "end": "286000"
  },
  {
    "text": "that we've created for ourselves in the meantime um mvc was a really popular approach um",
    "start": "286000",
    "end": "291280"
  },
  {
    "text": "especially when we were making that transition from you know javascript being used to implement",
    "start": "291280",
    "end": "296639"
  },
  {
    "text": "a jquery slider and actually building functional single page applications um and this concept of a",
    "start": "296639",
    "end": "301759"
  },
  {
    "text": "bi-directional data flow was introduced um made popularized i think a lot by angularjs this was their preferred",
    "start": "301759",
    "end": "307600"
  },
  {
    "text": "approach and it was really great for a lot of things but that being said um when you're using this approach",
    "start": "307600",
    "end": "313360"
  },
  {
    "text": "you're very easily able to affect your application state in a bunch of different ways in a bunch of different",
    "start": "313360",
    "end": "318639"
  },
  {
    "text": "places that can be really hard to track um and so i feel like that's something that we've been fighting for quite a long time",
    "start": "318639",
    "end": "324320"
  },
  {
    "text": "is writing better code that is less bug prone and just harder to figure out exactly",
    "start": "324320",
    "end": "331520"
  },
  {
    "text": "what's going on where our problems are coming from um in the front end we're very much uh interested in the state of our ui",
    "start": "331520",
    "end": "338160"
  },
  {
    "text": "reflecting changes of the user responding to interaction with the user and so when you have all these different things going on sometimes you'll have",
    "start": "338160",
    "end": "344240"
  },
  {
    "text": "these undesirable side effects that can be really hard to track down",
    "start": "344240",
    "end": "349120"
  },
  {
    "text": "and so this is where reactive programming comes in um and if you're not familiar with this term i'm gonna spend some time um breaking it down",
    "start": "350479",
    "end": "356880"
  },
  {
    "text": "uh and talking about different approaches first because i feel like this is something that it's a pattern that you have to get used",
    "start": "356880",
    "end": "362720"
  },
  {
    "text": "to and have to really change your mental model of the way you're approaching programming especially if you're used to",
    "start": "362720",
    "end": "367759"
  },
  {
    "text": "the the very common approach where i'll describe first um but this is kind of what we're going to be going for",
    "start": "367759",
    "end": "372880"
  },
  {
    "text": "throughout this presentation is moving towards this idea of reactive programming um writing better code that is less",
    "start": "372880",
    "end": "378080"
  },
  {
    "text": "scientific prone that is easier to debug and just more manageable in my opinion",
    "start": "378080",
    "end": "386000"
  },
  {
    "text": "and so before we talk about that i like to talk about um imperative versus declarative programming and whether you realize this or not you",
    "start": "386000",
    "end": "392560"
  },
  {
    "text": "likely are writing imperative code when you're writing in javascript um so",
    "start": "392560",
    "end": "398160"
  },
  {
    "start": "397000",
    "end": "397000"
  },
  {
    "text": "an imperative approach is essentially some sort of event occurs code runs and changes the state of the program",
    "start": "398160",
    "end": "404000"
  },
  {
    "text": "um and so before we get too far into this i have a demo code base that i'm going to show you all um and so i'm going to be using this",
    "start": "404000",
    "end": "411840"
  },
  {
    "text": "code base to um you know kind of jump between these different styles these different approaches and use it as a demo because",
    "start": "411840",
    "end": "418479"
  },
  {
    "text": "i feel like sometimes it's just way easier to explain this concept kind of coding along",
    "start": "418479",
    "end": "424319"
  },
  {
    "text": "so let me show you my demo app um i'm quarantine life was hard and animal",
    "start": "424319",
    "end": "430479"
  },
  {
    "text": "crossing new horizons was one of the things that like kept me from going like way off the depression cliff early on in animal crossing and it",
    "start": "430479",
    "end": "436800"
  },
  {
    "text": "stayed true so there's actually an individual who has created a great animal crossing new horizons api",
    "start": "436800",
    "end": "442479"
  },
  {
    "text": "um and you can interact with it get all sorts of information and fun stuff like that so i have this silly little app that",
    "start": "442479",
    "end": "448720"
  },
  {
    "text": "displays all of the villagers that are available in animal crossing new horizon and i have some filtering um to interact with",
    "start": "448720",
    "end": "454880"
  },
  {
    "text": "these villagers um so what this application is doing is it's uh you know making a request to a third",
    "start": "454880",
    "end": "460800"
  },
  {
    "text": "party api um to fetch a list of villagers and then from there i want to be able to do all sorts of things",
    "start": "460800",
    "end": "466319"
  },
  {
    "text": "um to manipulate what is displaying to the user based on what they might be looking for um for instance sometimes it's really",
    "start": "466319",
    "end": "472240"
  },
  {
    "text": "hard to remember when your villagers birthdays are so you can make sure to get them a birthday present um so this allows you to sort by",
    "start": "472240",
    "end": "478319"
  },
  {
    "text": "birthday and you can see um you know whose birthday falls when and you can kind of align with the calendar",
    "start": "478319",
    "end": "483840"
  },
  {
    "text": "um you can also filter um villagers by their kind of different attributes so they all",
    "start": "483840",
    "end": "489199"
  },
  {
    "text": "have different personalities so we can look at just all the cranky villagers and see who all our cranky villagers are",
    "start": "489199",
    "end": "494879"
  },
  {
    "text": "uh we can filter by um what type of animal they are um so and this is just gonna compound my",
    "start": "494879",
    "end": "500800"
  },
  {
    "text": "filters it's not like a true narrow down filter system um where it will include alligators um",
    "start": "500800",
    "end": "506240"
  },
  {
    "text": "that are whatever um personality type um my webex thing is blocking my ui um and",
    "start": "506240",
    "end": "513360"
  },
  {
    "text": "then i've got this little reset guy here that's gonna clear all our different filters get us back to um you know a blank slate and",
    "start": "513360",
    "end": "520000"
  },
  {
    "text": "then i've got some favoriting functionality here that will allow me to just show my favorite villagers",
    "start": "520000",
    "end": "525600"
  },
  {
    "text": "so that's kind of the context of the app and i hope this feels like a common pattern uh to you the the idea that we have",
    "start": "525600",
    "end": "532320"
  },
  {
    "text": "information that we're fetching from an endpoint we want to display it in different ways and be able to manipulate it and all kinds of different things without doing",
    "start": "532320",
    "end": "538880"
  },
  {
    "text": "something destructive or we're having to like re-request information or anything like that so that's a little bit of the context of",
    "start": "538880",
    "end": "545440"
  },
  {
    "text": "our code base here um so when we talk about imperative approach",
    "start": "545440",
    "end": "550800"
  },
  {
    "text": "um i'm gonna kind of walk you through the the code i have going on here",
    "start": "550800",
    "end": "556240"
  },
  {
    "text": "and show you what what we're talking about with an imperative approach um so the first thing that we want to do for this ui is we want to make a request",
    "start": "556240",
    "end": "563680"
  },
  {
    "text": "to this um you know api and so i have this mask in the angular service which is going to",
    "start": "563680",
    "end": "568959"
  },
  {
    "text": "make that request for me angular is built on top of rsjs which we will cover shortly because a good understanding of rxjs is",
    "start": "568959",
    "end": "576000"
  },
  {
    "text": "one of our key tools in reactive programming in javascript and so being aware of how that works is important but",
    "start": "576000",
    "end": "581920"
  },
  {
    "text": "for the sake of what we're talking about right now i have a request that i'm making to an api that is going to return an observable",
    "start": "581920",
    "end": "588640"
  },
  {
    "text": "i'm going to subscribe to that observable get the response in my list component i have um an",
    "start": "588640",
    "end": "595279"
  },
  {
    "text": "array uh where i am iterating over a list of displayed villagers and that's",
    "start": "595279",
    "end": "600959"
  },
  {
    "text": "how i'm displaying what you're seeing um in the dawn so um this is something i care about so",
    "start": "600959",
    "end": "608560"
  },
  {
    "text": "what's happening here is i am you know subscribing um to this villagers function and then when that",
    "start": "608560",
    "end": "613680"
  },
  {
    "text": "response completes i'm setting displayed villagers to be the value of that response",
    "start": "613680",
    "end": "619040"
  },
  {
    "text": "but if you look through this code base anytime i want to do something to manipulate the what is displaying in the ui i'm going",
    "start": "619040",
    "end": "625920"
  },
  {
    "text": "in and i am basically resetting the value of the displayed villager so uh a user interacts with the the",
    "start": "625920",
    "end": "631920"
  },
  {
    "text": "application the user decides to update the filter list of what they want okay now i'm going through and imperatively",
    "start": "631920",
    "end": "637600"
  },
  {
    "text": "changing my code to say all right now this has happened i'm going to change the state of my application um in this case the state is display",
    "start": "637600",
    "end": "644839"
  },
  {
    "text": "villagers and make that happen and so the problem here is this could be really hard to",
    "start": "644839",
    "end": "650399"
  },
  {
    "text": "track down and especially when you're jumping into a code base it's really um you know you're new to you don't",
    "start": "650399",
    "end": "655839"
  },
  {
    "text": "understand all the business logic behind who's ever experienced that before right it can be really hard to track down",
    "start": "655839",
    "end": "661360"
  },
  {
    "text": "what's going on and if displayed villager is being updated in a place that you're not aware of this can be really really difficult to deal with um",
    "start": "661360",
    "end": "669680"
  },
  {
    "text": "so that's kind of what's going on with imperative programming and again i hope this feels very",
    "start": "669680",
    "end": "674720"
  },
  {
    "text": "familiar to you because this is what a lot of us have been doing for years and years and years and years",
    "start": "674720",
    "end": "679920"
  },
  {
    "text": "all right um so when we talk about uh declarative coding or using a declarative approach this is specifying",
    "start": "679920",
    "end": "686399"
  },
  {
    "start": "684000",
    "end": "684000"
  },
  {
    "text": "how the state of a program should be altered and so again kind of an easy way to show you this is what",
    "start": "686399",
    "end": "692320"
  },
  {
    "text": "i'll do to manipulate the code but this idea of saying hey we know we care about this piece of state",
    "start": "692320",
    "end": "698160"
  },
  {
    "text": "these different conditions or things might happen to change that state but we're gonna let that kind of have an",
    "start": "698160",
    "end": "705040"
  },
  {
    "text": "understanding or control of itself and and be responsible for managing its state based on that",
    "start": "705040",
    "end": "710720"
  },
  {
    "text": "um instead of us going through and manually changing the state in a bunch of different ways when a bunch of different things happen",
    "start": "710720",
    "end": "716800"
  },
  {
    "text": "so um this example is a little arcgis dependent but i hope it gets the point across for you",
    "start": "716800",
    "end": "722160"
  },
  {
    "text": "um that what i want to do instead of essentially setting this every time to something",
    "start": "722160",
    "end": "727920"
  },
  {
    "text": "different is i want to create a number on my class that is going to be displayed in the ui",
    "start": "727920",
    "end": "734560"
  },
  {
    "text": "that is basically going to be aware of all the different situations that may affect it to cause something to happen",
    "start": "734560",
    "end": "740639"
  },
  {
    "text": "um so what i would start doing is you know i would kind of change my code here to say my displayed villagers is going",
    "start": "740639",
    "end": "747600"
  },
  {
    "text": "to be equal to the response of this api service method and a little bit about",
    "start": "747600",
    "end": "753760"
  },
  {
    "text": "observables is this you have to subscribe to get your value but we can do that in angular",
    "start": "753760",
    "end": "760079"
  },
  {
    "text": "using an async pipe in our template so we don't have to worry about subscription management um so what i would do is i would start",
    "start": "760079",
    "end": "765360"
  },
  {
    "text": "to set this equal to the value but then i need to consider all sorts of other events that might be happening",
    "start": "765360",
    "end": "771360"
  },
  {
    "text": "for instance like the filter list if this changes so what i'm going to be doing is i'm going to be combining",
    "start": "771360",
    "end": "776560"
  },
  {
    "text": "different event streams and different responses from an api to make sure that my definition of displayed",
    "start": "776560",
    "end": "783120"
  },
  {
    "text": "villagers is um pulling all these pieces of information together all i care about",
    "start": "783120",
    "end": "788320"
  },
  {
    "text": "making sure i'm handling the cases here and then my ui will always be updated accordingly",
    "start": "788320",
    "end": "795440"
  },
  {
    "text": "okay so um when we talk about reactive programming",
    "start": "795440",
    "end": "800720"
  },
  {
    "start": "800000",
    "end": "800000"
  },
  {
    "text": "then um to bring this kind of full circle um it's a declarative programming style concerned with data streams and the propagation of",
    "start": "800720",
    "end": "806880"
  },
  {
    "text": "change um you know life in the front end we're dealing a lot with user interaction and constantly responding",
    "start": "806880",
    "end": "812240"
  },
  {
    "text": "and making changes to our code based on that so it's this idea of propagation of change whether it's like some sort of",
    "start": "812240",
    "end": "818720"
  },
  {
    "text": "interaction with a click event or an input change or a form submission or something like that and then integrating that with you know",
    "start": "818720",
    "end": "823839"
  },
  {
    "text": "interacting with an api with dealing with data streams so rfjs",
    "start": "823839",
    "end": "829519"
  },
  {
    "start": "827000",
    "end": "827000"
  },
  {
    "text": "is a library for reactive programming using observables that makes it easier to compose",
    "start": "829519",
    "end": "834880"
  },
  {
    "text": "asynchronous or call back based code if you are new to rxjs you know would",
    "start": "834880",
    "end": "841519"
  },
  {
    "text": "definitely encourage you to check it out this is a library that everybody who you know starts using it understands the benefits but understands it is a large",
    "start": "841519",
    "end": "848000"
  },
  {
    "text": "learning curve so this is not something to get discouraged by um if you don't understand it right away",
    "start": "848000",
    "end": "853040"
  },
  {
    "text": "uh we kind of uh get forced into it in angular because angular is built on top of rxjs which",
    "start": "853040",
    "end": "858160"
  },
  {
    "text": "means a lot of the modules and services we're interacting with are going to be returning observable so we have to have some level",
    "start": "858160",
    "end": "864560"
  },
  {
    "text": "of baseline understanding um but i know it's starting to pick up steam in the react community as well so definitely something worth checking out",
    "start": "864560",
    "end": "870800"
  },
  {
    "text": "if it wasn't on your radar i'm going to try and give you like the the crux of the bare minimum of",
    "start": "870800",
    "end": "876560"
  },
  {
    "text": "what you need to know though to get through this presentation so we have observables which i mentioned",
    "start": "876560",
    "end": "883920"
  },
  {
    "text": "before which are essentially a lazy push collection of values over time um",
    "start": "883920",
    "end": "889120"
  },
  {
    "text": "so if we have a new observable that we're creating um the observer or it has a next method which is going to",
    "start": "889120",
    "end": "895040"
  },
  {
    "text": "emit the new value um so then we are subscribing to our observable every time that next",
    "start": "895040",
    "end": "900560"
  },
  {
    "text": "method emits a new value we're gonna get notified of that change um there are a lot of times in code that",
    "start": "900560",
    "end": "906320"
  },
  {
    "text": "like if we're dealing with an endpoint um we just care about fetching it once a lot of times right so not a big deal",
    "start": "906320",
    "end": "911600"
  },
  {
    "text": "there but consider if a user is engaging with an input we're going to want to get notified when",
    "start": "911600",
    "end": "917279"
  },
  {
    "text": "that input changes and so that that's why rxjs can be a really powerful tool to help us handle really common",
    "start": "917279",
    "end": "922480"
  },
  {
    "text": "front-end situations like that all right um so a subject is a special",
    "start": "922480",
    "end": "928160"
  },
  {
    "text": "type of observable that can be multicasted to many observers um a subject can be both published and",
    "start": "928160",
    "end": "933600"
  },
  {
    "text": "subscribed to uh so a lot of times what i will use subjects for is um setting up events in my dom",
    "start": "933600",
    "end": "939440"
  },
  {
    "text": "so if i want to know when a user has clicked on something i might have a subject um that you know",
    "start": "939440",
    "end": "946320"
  },
  {
    "text": "emits a next event every time that user clicks with the value and then this is something i can",
    "start": "946320",
    "end": "951360"
  },
  {
    "text": "essentially merge into my stream that i might care about um so let's say we're doing filtering that's going to interact",
    "start": "951360",
    "end": "956560"
  },
  {
    "text": "with an api all right i take i i have my display villagers that i care about displaying",
    "start": "956560",
    "end": "961920"
  },
  {
    "text": "um it's going to be based on the response of the api but every time a click event fires i want to merge that code",
    "start": "961920",
    "end": "967600"
  },
  {
    "text": "make a new response to the api with that new value so those are some of the things that we can do with subjects",
    "start": "967600",
    "end": "974240"
  },
  {
    "text": "a behavior subject is very similar to a subject but the the key thing here is that it will re-emit the last emitted value or a",
    "start": "974800",
    "end": "981199"
  },
  {
    "text": "default value if there's a set um so uh when we subscribe to observables they're only going to get a",
    "start": "981199",
    "end": "988800"
  },
  {
    "text": "new value after um they've been created which means if you have something that you care about like let's say",
    "start": "988800",
    "end": "994320"
  },
  {
    "text": "it's the state of an input like an input text field and you need to interact with",
    "start": "994320",
    "end": "1001440"
  },
  {
    "text": "the value that's there and you have a subject hooked up to that that's emitting whatever the value is if you subscribe",
    "start": "1001440",
    "end": "1008240"
  },
  {
    "text": "after that um value has been admitted already you're not going to get anything with a regular subject however a behavior subject",
    "start": "1008240",
    "end": "1014720"
  },
  {
    "text": "will get that last value that was emitted and allow you to use this and so i feel like a lot of people get stuck on this like not understanding you've got",
    "start": "1014720",
    "end": "1020639"
  },
  {
    "text": "this other tool in your belt for handling um a lot of situations all right um then",
    "start": "1020639",
    "end": "1026558"
  },
  {
    "text": "finally we have operators and these are methods that we call on our observables to return a new observable",
    "start": "1026559",
    "end": "1032160"
  },
  {
    "text": "so really common use case here is um we're getting data we need to manipulate it in some sort of way",
    "start": "1032160",
    "end": "1037839"
  },
  {
    "text": "to display it appropriately in our ui maybe it's you know we have um an object that has a data",
    "start": "1037839",
    "end": "1043918"
  },
  {
    "text": "prop an error prop something like that all we care about is returning that that data prop for the array of information",
    "start": "1043919",
    "end": "1049039"
  },
  {
    "text": "um we can call an operator on that like a map operator return the value um we want the observable and do a lot of",
    "start": "1049039",
    "end": "1055200"
  },
  {
    "text": "powerful things like that um we can merge streams we can listen for different events happening at",
    "start": "1055200",
    "end": "1060320"
  },
  {
    "text": "different times and make decisions based on that um all sorts of things uh one thing i",
    "start": "1060320",
    "end": "1066080"
  },
  {
    "text": "like to put on people's radar if they are new to rfjs oh the citrix bar is killing me you're blocking my",
    "start": "1066080",
    "end": "1074160"
  },
  {
    "text": "nav um",
    "start": "1074160",
    "end": "1080240"
  },
  {
    "text": "uh one of the things you can do is if you go to the overview they have this really cool operator decision tree and",
    "start": "1080240",
    "end": "1085360"
  },
  {
    "text": "so i feel like this is really helpful because there are so many different operators to learn to understand the different ways you want to manipulate your data you can",
    "start": "1085360",
    "end": "1092480"
  },
  {
    "text": "use this operator decision tree um where you're doing some different things so let's say i have some observables to",
    "start": "1092480",
    "end": "1098480"
  },
  {
    "text": "combine together as one observable i have a response from an api and i have a click event okay let's proceed through here um and",
    "start": "1098480",
    "end": "1105120"
  },
  {
    "text": "we can kind of step through and it'll point you to the observer or the operator that you should be using so",
    "start": "1105120",
    "end": "1110640"
  },
  {
    "text": "kind of cool cool little trick for you there if you were new and just trying to navigate your way",
    "start": "1110640",
    "end": "1118000"
  },
  {
    "text": "all right um so getting back to this idea of seat",
    "start": "1118320",
    "end": "1123919"
  },
  {
    "text": "management and what rxjs is doing for us what we care about is making sure that we have control of",
    "start": "1123919",
    "end": "1129120"
  },
  {
    "text": "of when parts of our application state change and we want to get notified of those changes um so consider a situation where maybe",
    "start": "1129120",
    "end": "1136160"
  },
  {
    "text": "you have some sort of login methodology and maybe you want to display that user profile in the nav bar",
    "start": "1136160",
    "end": "1141919"
  },
  {
    "text": "but in some component down your tree you want to be setting flags for showing logic or",
    "start": "1141919",
    "end": "1149200"
  },
  {
    "text": "displaying something based on a user's permissions um these are all sorts of things that we want to tie together and have this cohesive idea of",
    "start": "1149200",
    "end": "1155679"
  },
  {
    "text": "of a state that we can pull from understand those changes are made um and the important thing that we need",
    "start": "1155679",
    "end": "1161679"
  },
  {
    "text": "to think about in state management which i'll kind of talk through when we look at some of the library approaches to state management",
    "start": "1161679",
    "end": "1167039"
  },
  {
    "text": "is making sure that we're not causing side effects or adverse changes without realizing it",
    "start": "1167039",
    "end": "1173120"
  },
  {
    "text": "all right um so state management uh defined is basically an organized",
    "start": "1175360",
    "end": "1180480"
  },
  {
    "start": "1177000",
    "end": "1177000"
  },
  {
    "text": "approach to maintaining the state of your application um we want to do this in a way that we can read from it",
    "start": "1180480",
    "end": "1186080"
  },
  {
    "text": "um to update displays in our ui but we also want to make sure that we're writing to our state in a manageable way",
    "start": "1186080",
    "end": "1192320"
  },
  {
    "text": "we don't want to be causing all sorts of changes that are really hard to track down and so when you when we look at these",
    "start": "1192320",
    "end": "1198400"
  },
  {
    "text": "state management libraries that are available a lot of them are concerned with solving these problems how do we keep the side",
    "start": "1198400",
    "end": "1203760"
  },
  {
    "text": "effect or you know imperative behavior from happening and create a really cohesive approach um",
    "start": "1203760",
    "end": "1211120"
  },
  {
    "text": "so we're going to talk through a couple things in this talk we're going to talk about patterns in libraries and so i'm going to start off",
    "start": "1211120",
    "end": "1217520"
  },
  {
    "text": "by kind of talking through the redux pattern which as i mentioned before a lot of current state management libraries are built on um and i think if",
    "start": "1217520",
    "end": "1224400"
  },
  {
    "text": "you kind of have an underlying uh concept of this conceptually it makes a lot easier for you to hop between",
    "start": "1224400",
    "end": "1230240"
  },
  {
    "text": "different approaches and just figure out what's going on and i'm also going to walk through",
    "start": "1230240",
    "end": "1235280"
  },
  {
    "text": "basically home rolling your own solution inside of angular just to show that this is something you can do um all of",
    "start": "1235280",
    "end": "1241760"
  },
  {
    "text": "these things have pros and cons that i will talk through um so if we talk about redux uh this is",
    "start": "1241760",
    "end": "1248640"
  },
  {
    "text": "a predictable state container for applications i'm credited uh by being created by dan in 2015 at a",
    "start": "1248640",
    "end": "1255039"
  },
  {
    "text": "conference i don't remember which one it was but this was kind of the introduction of the concept of redux",
    "start": "1255039",
    "end": "1260400"
  },
  {
    "text": "so redux 101 we've got a couple base concepts one is we have a store um this is an object tree representing",
    "start": "1260400",
    "end": "1266880"
  },
  {
    "text": "the state of your application um so in the uh state of this demo",
    "start": "1266880",
    "end": "1272480"
  },
  {
    "text": "application that i have we would have a couple different things we would have our our displayed list of villagers",
    "start": "1272480",
    "end": "1278559"
  },
  {
    "text": "um would be part of our state we might have our current selected filters as a part of our state we might have available sort options as",
    "start": "1278559",
    "end": "1286159"
  },
  {
    "text": "a part of our state and the idea would be to update these and be able to read from these in in a coherent and cohesive way",
    "start": "1286159",
    "end": "1294559"
  },
  {
    "start": "1295000",
    "end": "1295000"
  },
  {
    "text": "we have an action and so this is an object describing how to modify the state so",
    "start": "1295440",
    "end": "1301120"
  },
  {
    "text": "example we we have this object tree representing the state of our application and let's say we're considering our displayed",
    "start": "1301120",
    "end": "1306880"
  },
  {
    "text": "villagers and you know starting off that we're just going to have an empty array because we haven't done anything yet",
    "start": "1306880",
    "end": "1311919"
  },
  {
    "text": "um an action would be us dispatching a request to an endpoint for instance to get the response of that end point and",
    "start": "1311919",
    "end": "1317600"
  },
  {
    "text": "then telling the state hey i want you to update um and add this to the state so this um displayed list of villagers",
    "start": "1317600",
    "end": "1324080"
  },
  {
    "text": "becomes this response of this api um so we handle that by dispatching actions which will say hey",
    "start": "1324080",
    "end": "1330400"
  },
  {
    "text": "um state you need to do this we have a reducer and this is just a",
    "start": "1330400",
    "end": "1336559"
  },
  {
    "text": "pure function that is going to take a previous state and return a new state based on the action provided",
    "start": "1336559",
    "end": "1344080"
  },
  {
    "text": "so uh a redux demo code if we were to kind of um build this um from scratch",
    "start": "1344400",
    "end": "1350559"
  },
  {
    "text": "like build our own version of redux we would start with something like this um where i have just an initial state",
    "start": "1350559",
    "end": "1356559"
  },
  {
    "text": "where i'm going to be holding uh different information um so i care about villagers i care about which sort option",
    "start": "1356559",
    "end": "1363679"
  },
  {
    "text": "i have selected i care about which filter options i have um and i care about whether show only favorites is selected or not",
    "start": "1363679",
    "end": "1371600"
  },
  {
    "text": "um so here's where we're going to create the store we're going to set our our state for the purpose of this this",
    "start": "1371600",
    "end": "1377440"
  },
  {
    "text": "little app um to be our initial state um and this create store is going to take a reducer that reducer is our",
    "start": "1377440",
    "end": "1383440"
  },
  {
    "text": "function that is going to take an action and then return a new state based on what that action is and it's going to take our initial state and then what we're",
    "start": "1383440",
    "end": "1391200"
  },
  {
    "text": "going to be able to do is we're going to be able to access our store get the current state and then display it",
    "start": "1391200",
    "end": "1397120"
  },
  {
    "text": "appropriately in the ui so next we have actions um actions are",
    "start": "1397120",
    "end": "1403280"
  },
  {
    "text": "typically gonna follow an interface that looks like something like this um we have the type which is a string this is how we're identifying our",
    "start": "1403280",
    "end": "1409360"
  },
  {
    "text": "actions so maybe it's something like fetch api um and then we're gonna have an optional payload and this is if we",
    "start": "1409360",
    "end": "1415679"
  },
  {
    "text": "are dealing with an action where we need to pass something to our reducer that would be a part of the payload um so if we were to write out something",
    "start": "1415679",
    "end": "1423200"
  },
  {
    "text": "like this it might be making a fetch request to this um api endpoint um and then",
    "start": "1423200",
    "end": "1430559"
  },
  {
    "text": "calling this stored dispatch method with this action so it's saying hey action of type load villagers payload is",
    "start": "1430559",
    "end": "1436640"
  },
  {
    "text": "the response of this api call um and so then our reducer is going to say hey i received this action i'm going",
    "start": "1436640",
    "end": "1442320"
  },
  {
    "text": "to return a state based on what this action is telling me how to do",
    "start": "1442320",
    "end": "1447360"
  },
  {
    "text": "all right and finally we have our reducer and it's going to look something like this",
    "start": "1448320",
    "end": "1453279"
  },
  {
    "text": "where it's taking our our application state and it's taking an action and so typically you're going to",
    "start": "1453919",
    "end": "1459200"
  },
  {
    "text": "see some sort of switch statement like this where you are switching based on your type of action",
    "start": "1459200",
    "end": "1464240"
  },
  {
    "text": "and kind of writing out for each of these things what exactly you want to have happen so let's say in the case of load villagers",
    "start": "1464240",
    "end": "1470720"
  },
  {
    "text": "i am returning a copy of the original state and i'm modifying the villagers um prop on that state um bypassing it",
    "start": "1470720",
    "end": "1478000"
  },
  {
    "text": "the the payload of this action and this action was that request to a third-party api um we've got a",
    "start": "1478000",
    "end": "1485360"
  },
  {
    "text": "different one here where okay we've got this select sort where we want to track what our selected sort option is again passing some sort",
    "start": "1485360",
    "end": "1491840"
  },
  {
    "text": "of payload there um and you know this is going to return our new modified state um",
    "start": "1491840",
    "end": "1497120"
  },
  {
    "text": "and then our ui is going to get notified of that state change and reflect things appropriately um",
    "start": "1497120",
    "end": "1504400"
  },
  {
    "text": "one other little tool i want to call out for you is there is something called chrome redux devtools and this is really",
    "start": "1504400",
    "end": "1510320"
  },
  {
    "text": "really powerful if you're new to state management to kind of track what's going on or if you're jumping into somebody",
    "start": "1510320",
    "end": "1515520"
  },
  {
    "text": "who has implemented a redux base state management pattern um you can jump through and see what's going on really easily",
    "start": "1515520",
    "end": "1521679"
  },
  {
    "text": "so kind of is this big enough to see for everybody um yeah okay um",
    "start": "1521679",
    "end": "1530159"
  },
  {
    "text": "all right so we can kind of look through and see what's going on with our state here um actually let me uh switch to a",
    "start": "1530159",
    "end": "1536799"
  },
  {
    "text": "state management branch that would probably make more sense um",
    "start": "1536799",
    "end": "1543840"
  },
  {
    "text": "uh for that to work and we'll kind of poke around and see",
    "start": "1546400",
    "end": "1552320"
  },
  {
    "text": "what's going on",
    "start": "1552320",
    "end": "1557840"
  },
  {
    "text": "ah sorry all i know the golden rule is to not empty an install between",
    "start": "1568840",
    "end": "1575760"
  },
  {
    "text": "um but trying to branch hop to show y'all different things um but apparently",
    "start": "1575760",
    "end": "1583039"
  },
  {
    "text": "the internet gods are humoring me today",
    "start": "1583039",
    "end": "1587039"
  },
  {
    "text": "all right um i'll wait on that to build for a second and while i wait on that to build we can talk about the first state",
    "start": "1595919",
    "end": "1602159"
  },
  {
    "text": "management library that we're going to use um this is both beloved and hated by the angular community",
    "start": "1602159",
    "end": "1607520"
  },
  {
    "text": "um so i feel like it's it's 50 50 at this point whether people prefer to adopt it or not but it is a framework",
    "start": "1607520",
    "end": "1612640"
  },
  {
    "text": "for building reactive applications in angular largely built on the redox pattern um all right now we've got my app",
    "start": "1612640",
    "end": "1618880"
  },
  {
    "text": "compiled successfully",
    "start": "1618880",
    "end": "1626400"
  },
  {
    "text": "don't need to enable something i might need to enable something to show you all how this could work but we can look at",
    "start": "1626400",
    "end": "1631679"
  },
  {
    "text": "that in a minute um",
    "start": "1631679",
    "end": "1635520"
  },
  {
    "text": "oh here we go interesting this will show you different tabs that you have open that have",
    "start": "1637120",
    "end": "1644559"
  },
  {
    "text": "instances that can be selected um all sorts of fun stuff you can do here okay um so ngrx",
    "start": "1644559",
    "end": "1652399"
  },
  {
    "text": "um pop up the documentation here uh you're able to install this and um",
    "start": "1652399",
    "end": "1660080"
  },
  {
    "text": "the first thing you're gonna start installing with this is store and this is very much the same concept of of the store that i explained um talking about",
    "start": "1660080",
    "end": "1665919"
  },
  {
    "text": "the redux pattern um where it's going to be kind of like that place that holds your state that",
    "start": "1665919",
    "end": "1671679"
  },
  {
    "text": "you can read from um and uh dispatch changes too so um in our code here um for",
    "start": "1671679",
    "end": "1679279"
  },
  {
    "text": "angular what we're doing here is we're initializing our store module um passing in our reducer and that's",
    "start": "1679279",
    "end": "1684960"
  },
  {
    "text": "kind of setting everything up um one of my preferred approaches to um like implementing state management is i",
    "start": "1684960",
    "end": "1691120"
  },
  {
    "text": "like to have like a really designated folder for this if you were doing feature-based state management where maybe you have like a larger application and you do need your",
    "start": "1691120",
    "end": "1697440"
  },
  {
    "text": "state broken down into pieces based on what you're going to load in absolutely fine to to do that at a future level but this is a fairly basic",
    "start": "1697440",
    "end": "1704159"
  },
  {
    "text": "app so i'm just putting it kind of in line with everything else we can walk through what i have going on here um so let's start with my actions",
    "start": "1704159",
    "end": "1711600"
  },
  {
    "text": "and these are all the different actions that i have written um that uh need to be dispatched",
    "start": "1711600",
    "end": "1717760"
  },
  {
    "text": "to make the application change the application state in the way we want so the first thing we have is load villagers",
    "start": "1717760",
    "end": "1723200"
  },
  {
    "text": "so this is going to be an initial request um to make that api call one of the things",
    "start": "1723200",
    "end": "1731039"
  },
  {
    "text": "that i really like about ngrx is what are called the effects um and these are basically ways to",
    "start": "1731039",
    "end": "1739760"
  },
  {
    "text": "to deal with all those weird situations where we want to dispatch an action and that actually needs to do something it also returns something that",
    "start": "1739760",
    "end": "1745520"
  },
  {
    "text": "we then want to pass into our reducer so um we use effects to oftentimes interact with an api um so i",
    "start": "1745520",
    "end": "1752640"
  },
  {
    "text": "have this load villagers um effect um that it's listening for this type of load villagers",
    "start": "1752640",
    "end": "1757679"
  },
  {
    "text": "um apologies realizing not everybody might be in typescript land like i am",
    "start": "1757679",
    "end": "1763200"
  },
  {
    "text": "um so here is i am importing this this villager's load string that is defined",
    "start": "1763200",
    "end": "1768240"
  },
  {
    "text": "by my action um so essentially this is listening for that action to be dispensed when that",
    "start": "1768240",
    "end": "1773440"
  },
  {
    "text": "action is dispensed um i'm making that request to my api call um and then i",
    "start": "1773440",
    "end": "1778480"
  },
  {
    "text": "am taking the response of that api call and then i'm calling this new action um that i have defined here uh called uh",
    "start": "1778480",
    "end": "1785760"
  },
  {
    "text": "villagers loaded um and so this is say we've had a successful response from our api",
    "start": "1785760",
    "end": "1791120"
  },
  {
    "text": "i have data that i want to pass to my reducer to do something so this villagers loaded um action",
    "start": "1791120",
    "end": "1797520"
  },
  {
    "text": "uh the the prop method defines the metadata which is the um villagers array that i am getting",
    "start": "1797520",
    "end": "1803440"
  },
  {
    "text": "back from my data so kind of event stream here is all right from my application at the point",
    "start": "1803440",
    "end": "1809120"
  },
  {
    "text": "that i need data i dispatch an action okay that action says hey go do this thing go hit this api so it",
    "start": "1809120",
    "end": "1815760"
  },
  {
    "text": "calls the effect that hits the api and then it calls another action that says hey i have the response now go update",
    "start": "1815760",
    "end": "1821679"
  },
  {
    "text": "the reducer so if we look at our reducer we have",
    "start": "1821679",
    "end": "1826960"
  },
  {
    "text": "uh our create reducer function here um and this essentially is a mildly",
    "start": "1826960",
    "end": "1833520"
  },
  {
    "text": "prettier looking switch statement under the hood um and so what it's doing is it's listening for all of our",
    "start": "1833520",
    "end": "1839760"
  },
  {
    "text": "different actions and then the action that we passed in updating the state accordingly so",
    "start": "1839760",
    "end": "1844799"
  },
  {
    "text": "if we follow kind of this this pattern through what's going on um now that i have my villager loaded",
    "start": "1844799",
    "end": "1850399"
  },
  {
    "text": "action dispensed my reducer is listening for that action um it's saying hey",
    "start": "1850399",
    "end": "1856000"
  },
  {
    "text": "okay you have a payload of villagers i'm going to return um this with this this villagers",
    "start": "1856000",
    "end": "1861679"
  },
  {
    "text": "property set and so that's kind of how we construct this so",
    "start": "1861679",
    "end": "1866960"
  },
  {
    "text": "um this leads to some significant changes in the way we approach our ui uh i kind of want to like",
    "start": "1866960",
    "end": "1874880"
  },
  {
    "text": "have a branch open for y'all just for comparison so we can look back and forth",
    "start": "1874880",
    "end": "1880159"
  },
  {
    "text": "because i don't have a pretty enough diff tool um by the way all of this is available in this repo",
    "start": "1880159",
    "end": "1885200"
  },
  {
    "text": "that i have in the side links um these different approaches are in different branches so if you're ever trying to implement or you're like oh crap what was that one thing she was",
    "start": "1885200",
    "end": "1891360"
  },
  {
    "text": "talking about you can go and get that information here but um here's my main branch this is just like a default this is your",
    "start": "1891360",
    "end": "1897840"
  },
  {
    "text": "straight up imperative approach to code um so i'm just going to pull up this file",
    "start": "1897840",
    "end": "1904240"
  },
  {
    "text": "real quick so we kind of kind of look comparison wise um of what's going on so initially we had",
    "start": "1904240",
    "end": "1909760"
  },
  {
    "text": "a lot of stuff going on in here where i was making this api request i was setting the display villagers member on my",
    "start": "1909760",
    "end": "1916480"
  },
  {
    "text": "component to the response.list i have this sort functionality where i'm i'm doing all this logic",
    "start": "1916480",
    "end": "1922320"
  },
  {
    "text": "um to figure out like what that sort should be um i have my filter list where again i'm",
    "start": "1922320",
    "end": "1929760"
  },
  {
    "text": "imperatively setting uh the value of displayed villagers to be like whatever the response of this filter function is based on some stuff",
    "start": "1929760",
    "end": "1936640"
  },
  {
    "text": "i'm passing in um same thing with with um favorites uh where i'm displaying yeah",
    "start": "1936640",
    "end": "1944799"
  },
  {
    "text": "displayed villagers based on some filtering logic and all sorts of stuff here so quite a bit of code and you know",
    "start": "1944799",
    "end": "1952080"
  },
  {
    "text": "more often than not we're going to be dealing with um situations in our ui that we're going to be implementing",
    "start": "1952080",
    "end": "1957120"
  },
  {
    "text": "similar patterns over and over and over again and have still need this idea of state management this cohesive state where we want to apply changes to our",
    "start": "1957120",
    "end": "1964000"
  },
  {
    "text": "code and so this kind of thing can get messy really really quickly all right",
    "start": "1964000",
    "end": "1969039"
  },
  {
    "text": "um so back to my code base um sorry this is just a helpful function",
    "start": "1969039",
    "end": "1975039"
  },
  {
    "text": "what we're going to do to kind of initialize this application the way we want it is on our init function this is um the lifestyle look",
    "start": "1975039",
    "end": "1981600"
  },
  {
    "text": "for angular so when a component is is loaded into the view um and and ready to do stuff it is this",
    "start": "1981600",
    "end": "1987440"
  },
  {
    "text": "function we're going to go ahead and we're going to dispatch this action to our store said saying load villagers",
    "start": "1987440",
    "end": "1994480"
  },
  {
    "text": "okay so we dispatched our load villagers action we'll go back and we'll trace this just to reiterate okay this is what",
    "start": "1994480",
    "end": "2000480"
  },
  {
    "text": "that action looks like the effect that we've created is listening",
    "start": "2000480",
    "end": "2005679"
  },
  {
    "text": "for this type of load villagers um when it gets that action it is going",
    "start": "2005679",
    "end": "2011120"
  },
  {
    "text": "to make a call to the api that we have written and then it is going to dispatch a new action villagers loaded",
    "start": "2011120",
    "end": "2017279"
  },
  {
    "text": "our reducer is listening for this villagers loaded um and then it is uh returning a new",
    "start": "2017279",
    "end": "2024399"
  },
  {
    "text": "version of our state with that village villagers prop updated on it okay so",
    "start": "2024399",
    "end": "2030960"
  },
  {
    "text": "that's like the the bootstrap of getting our component working in the way we intend um so",
    "start": "2030960",
    "end": "2037919"
  },
  {
    "text": "the next thing we need to think about is okay so this has happened in our store but how are we going to access it and display in",
    "start": "2037919",
    "end": "2044399"
  },
  {
    "text": "our ui um so this is where we get into using what are called selectors",
    "start": "2044399",
    "end": "2050480"
  },
  {
    "text": "and so these are really um nice utility functions uh that you have available in ngrx and",
    "start": "2050480",
    "end": "2056720"
  },
  {
    "text": "these essentially allow you to not only select a slice of state but do whatever you want with the state um so a lot of times if you're",
    "start": "2056720",
    "end": "2063280"
  },
  {
    "text": "displaying maybe you're doing formatting of a list or something like that where you're doing the same thing repeatedly what you can do is you can write a",
    "start": "2063280",
    "end": "2068720"
  },
  {
    "text": "selector that pulls that current state applies whatever change you need and that's what you're going to subscribe to in your ui",
    "start": "2068720",
    "end": "2076800"
  },
  {
    "text": "so here i've got my um get displayed villager selector and this is going to do a couple of",
    "start": "2076960",
    "end": "2082560"
  },
  {
    "text": "different things it's checking my state to see if i'm showing only favorites if i am i've got this villagers property",
    "start": "2082560",
    "end": "2089040"
  },
  {
    "text": "on my state that's going to be the response of the api request it's going to filter whatever's there and return only",
    "start": "2089040",
    "end": "2095440"
  },
  {
    "text": "the favorites in that selection um or the else statement right here is just looking hey is there a filtered",
    "start": "2095440",
    "end": "2100560"
  },
  {
    "text": "list and doing filtering based on what i have selected um and then returning that to me so in",
    "start": "2100560",
    "end": "2107040"
  },
  {
    "text": "angular land as i mentioned um we are very rxjs happy so um the sort",
    "start": "2107040",
    "end": "2112480"
  },
  {
    "text": "out select returns an observable so i have that set as a this displayed",
    "start": "2112480",
    "end": "2118320"
  },
  {
    "text": "villagers member on my component um again if you're new a lot of times we'll use a dollar sign after an",
    "start": "2118320",
    "end": "2123520"
  },
  {
    "text": "observable just to tell the next developer down the line hey this is not just a straight value",
    "start": "2123520",
    "end": "2128640"
  },
  {
    "text": "you're dealing with an observable here and then in our template we",
    "start": "2128640",
    "end": "2134079"
  },
  {
    "text": "are using the async pipe in angular which is essentially saying hey subscribe to this observable every time",
    "start": "2134079",
    "end": "2140240"
  },
  {
    "text": "a value changes update the ui accordingly and the cool thing about this is um we have component lifecycle hooks and so in",
    "start": "2140240",
    "end": "2146160"
  },
  {
    "text": "the on destroy function this um observable will be unsubscribed from so we don't create memory leaks so that's like the",
    "start": "2146160",
    "end": "2151520"
  },
  {
    "text": "magic going on there um if",
    "start": "2151520",
    "end": "2159200"
  },
  {
    "text": "okay so that's kind of the basics here so setting everything up we now have our initial display of all of our villagers",
    "start": "2159200",
    "end": "2166079"
  },
  {
    "text": "as we start interacting with things um we you know start to deal with different actions so in this case um we",
    "start": "2166079",
    "end": "2172240"
  },
  {
    "text": "have a filter list um function that's being called anytime we um",
    "start": "2172240",
    "end": "2177280"
  },
  {
    "text": "apply our filter selection so if i'm wanting to filter by different things and i hit this apply button that's when",
    "start": "2177280",
    "end": "2182720"
  },
  {
    "text": "that function is being executed so there i'm dispatching a new action",
    "start": "2182720",
    "end": "2188960"
  },
  {
    "text": "this is a select filters action and that action is expecting a payload of filter options um which is going to be an array of",
    "start": "2188960",
    "end": "2196240"
  },
  {
    "text": "these these different strings that could be there um so what happens is the select filters option is passed",
    "start": "2196240",
    "end": "2202640"
  },
  {
    "text": "um we can go and look at our reducer see exactly what's going on okay select filters all right we're",
    "start": "2202640",
    "end": "2208000"
  },
  {
    "text": "setting the filter options on our state and know what's going on there",
    "start": "2208000",
    "end": "2215838"
  },
  {
    "text": "okay um so you can see how our our code has gotten quite a bit more simple we're not having",
    "start": "2216000",
    "end": "2222480"
  },
  {
    "text": "to do as much management on our end with handling a lot of this and these can be reused throughout our union throughout",
    "start": "2222480",
    "end": "2228160"
  },
  {
    "text": "our application um so you know definitely some benefits there to using a framework instead of",
    "start": "2228160",
    "end": "2233280"
  },
  {
    "text": "kind of rolling your own approach and having to put it everywhere um uh other things to uh know about um",
    "start": "2233280",
    "end": "2243200"
  },
  {
    "text": "angular does have its own built-in router um and so there are integrations for dealing with that router because a",
    "start": "2243200",
    "end": "2248400"
  },
  {
    "text": "lot of times what we're dealing with is um caring about route changes so for instance in our application",
    "start": "2248400",
    "end": "2254880"
  },
  {
    "text": "if we click on a villager and we go to the route and the id of the villager we want to be able to",
    "start": "2254880",
    "end": "2260960"
  },
  {
    "text": "make a get request to our api to pull back the certain villager at this id",
    "start": "2260960",
    "end": "2266640"
  },
  {
    "text": "so we are often dealing with subscribing to router changes and wanting to be aware of that so that's something that ngr has built in",
    "start": "2266640",
    "end": "2274640"
  },
  {
    "text": "um there's also a component store which is um worth calling out it's a standalone library for managing local component",
    "start": "2275119",
    "end": "2281359"
  },
  {
    "text": "state and so there are a lot of times that you are doing some heavy state management work but it's really only to one component so it doesn't make sense",
    "start": "2281359",
    "end": "2287599"
  },
  {
    "text": "to bring in all this full-blown stuff when you're just doing it at a component level um so they have the component store",
    "start": "2287599",
    "end": "2292880"
  },
  {
    "text": "available so a couple things that i do like a lot about ngrx pro",
    "start": "2292880",
    "end": "2298320"
  },
  {
    "text": "ngrx is i really like the flow control um to me like i know the redux pattern is a",
    "start": "2298320",
    "end": "2304160"
  },
  {
    "text": "bit of a learning curve and you know that that really plays into onboarding with ngrx um",
    "start": "2304160",
    "end": "2309599"
  },
  {
    "text": "but i feel like once you understand it it's very very clear where things should go and you're not",
    "start": "2309599",
    "end": "2314640"
  },
  {
    "text": "having to spend a lot of time thinking about how to solve what are my in my opinion common front-end problems when dealing",
    "start": "2314640",
    "end": "2320960"
  },
  {
    "text": "with state management and making sure making sure our ui is updating accordingly",
    "start": "2320960",
    "end": "2326400"
  },
  {
    "text": "um selectors are a big deal um i like that a lot um effects make it really nice dealing",
    "start": "2326400",
    "end": "2333599"
  },
  {
    "text": "with api data and we'll kind of look at other other approaches and why they require a bit more hand holding for",
    "start": "2333599",
    "end": "2340000"
  },
  {
    "text": "that um and then the great thing about ngrx as well is built-in type safety so if you are a javascript developer who's embraced",
    "start": "2340000",
    "end": "2346480"
  },
  {
    "text": "typescript um it is nice to be working with libraries who have built that in mind and have a lot of great checks in place",
    "start": "2346480",
    "end": "2352640"
  },
  {
    "text": "um just by using their library that help you um some of the cons uh the api is fairly",
    "start": "2352640",
    "end": "2359920"
  },
  {
    "text": "large and extensive there's a lot to learn and the docs aren't great um i'm not even sure what the current version",
    "start": "2359920",
    "end": "2365760"
  },
  {
    "text": "is of everything like for instance you used to have to write a lot more boilerplate code um just to",
    "start": "2365760",
    "end": "2370960"
  },
  {
    "text": "create an action this used to be a much longer thing um and i still like the docs are very scattered",
    "start": "2370960",
    "end": "2377040"
  },
  {
    "text": "on what approach you should use and kind of laying things out so um a lot of times i end up pointing",
    "start": "2377040",
    "end": "2382160"
  },
  {
    "text": "people to like some of the people maintaining ngrx and just saying hey go check out their twitch streams because sometimes it might be more",
    "start": "2382160",
    "end": "2387839"
  },
  {
    "text": "helpful than the documentation um and it is a fairly intimidating learning curve",
    "start": "2387839",
    "end": "2394640"
  },
  {
    "text": "i think these are all valid concerns to call out um based on your team and your capabilities",
    "start": "2395359",
    "end": "2401119"
  },
  {
    "text": "obviously i spend a lot of time in the consulting world which means i'm bouncing around between different projects in different teams",
    "start": "2401119",
    "end": "2406800"
  },
  {
    "text": "um and when you have a team that is you know just learning angular for the",
    "start": "2406800",
    "end": "2412319"
  },
  {
    "text": "first time and a lot of new concepts sometimes something like this can be a bit too overbearing but at the same time",
    "start": "2412319",
    "end": "2419440"
  },
  {
    "text": "if you know you're going to have a bunch of devs hopping in and out of a process and maybe they don't have the rxjs",
    "start": "2419440",
    "end": "2424560"
  },
  {
    "text": "knowledge or understanding sometimes using a framework like this that really has some nice like bumper guards for you um can help",
    "start": "2424560",
    "end": "2431520"
  },
  {
    "text": "eliminate a little bit of that that chaos in your code base where people just don't use don't know a technology well enough and",
    "start": "2431520",
    "end": "2437839"
  },
  {
    "text": "then shoot themselves in the foot accidentally um so there's that",
    "start": "2437839",
    "end": "2443839"
  },
  {
    "text": "so akita is the next framework that i am going to talk about um it's another state management pattern",
    "start": "2443839",
    "end": "2449680"
  },
  {
    "text": "also built on top of rxjs a lot of very similar ideas here um",
    "start": "2449680",
    "end": "2455920"
  },
  {
    "text": "but it is a little more lightweight so if you're like oh and grx is just too much code bloat or it's too much big um",
    "start": "2455920",
    "end": "2461520"
  },
  {
    "text": "akita is a little bit thinner but i feel like you do have to solve some of the problems on your own that ngrx offers you a pattern for solving",
    "start": "2461520",
    "end": "2470720"
  },
  {
    "text": "so if we check out our keto demo",
    "start": "2470800",
    "end": "2475760"
  },
  {
    "text": "and do another npm install because i'm really tempting the fates today i like to live on the edge",
    "start": "2476000",
    "end": "2483599"
  },
  {
    "text": "we can start looking through some of these files where we're going to have a very similar approach it's going to feel somewhat",
    "start": "2487760",
    "end": "2494000"
  },
  {
    "text": "like what we're doing for ngrx",
    "start": "2494000",
    "end": "2497359"
  },
  {
    "text": "and i will say this for akita they have a way cuter logo kudoshiba um so doc's here we've got two",
    "start": "2499040",
    "end": "2506000"
  },
  {
    "text": "basic concepts again we have this idea of store this is you know your uh your bible this",
    "start": "2506000",
    "end": "2511680"
  },
  {
    "text": "is the holy truth for the state of your application um and how you're going to get information from your store",
    "start": "2511680",
    "end": "2517920"
  },
  {
    "text": "we're going to do something very similar where akita has some built-in methods for us so it's a little less action",
    "start": "2517920",
    "end": "2523520"
  },
  {
    "text": "dispatchy but kind of the same concept we're going to say hey we want to do something to update our",
    "start": "2523520",
    "end": "2531280"
  },
  {
    "text": "store okay all right",
    "start": "2531560",
    "end": "2536640"
  },
  {
    "text": "um so let's take a look at my store again this should feel somewhat familiar where we have this initial state um",
    "start": "2536640",
    "end": "2542079"
  },
  {
    "text": "we have our list of villagers our selected sort options filter options favorites",
    "start": "2542079",
    "end": "2547760"
  },
  {
    "text": "um the store extends um this this built-in class offered by akita",
    "start": "2547760",
    "end": "2552880"
  },
  {
    "text": "and so these are where all these different methods are um that they have provided for us for implementing",
    "start": "2552880",
    "end": "2558319"
  },
  {
    "text": "they've done a couple things for us like for instance they have the set loading state um so it has cash get value all sorts of",
    "start": "2558319",
    "end": "2565280"
  },
  {
    "text": "things um so they've done a little bit of legwork of like different actions that you might commonly",
    "start": "2565280",
    "end": "2570720"
  },
  {
    "text": "deal with um but most likely you'll most you'll end up using this update uh function a lot so the problem",
    "start": "2570720",
    "end": "2576960"
  },
  {
    "text": "here is you get a little bit less of a trace because if you're just calling update with this the state callback all",
    "start": "2576960",
    "end": "2582400"
  },
  {
    "text": "the time it can be sometimes harder to follow um what you're trying to do and what",
    "start": "2582400",
    "end": "2587760"
  },
  {
    "text": "modification came from where so worth being aware of oh",
    "start": "2587760",
    "end": "2593839"
  },
  {
    "text": "okay uh let's see here uh the other thing we need to do is",
    "start": "2593839",
    "end": "2599359"
  },
  {
    "text": "figure out how to wire this up so um let's kind of go through the same pattern again where all right we're",
    "start": "2599359",
    "end": "2604400"
  },
  {
    "text": "starting off with our component the first thing that we need to do is we need to um get that request from our api",
    "start": "2604400",
    "end": "2610560"
  },
  {
    "text": "um this is something that i'm not super in love with um with the approach that you have to take with akita so um what i have done",
    "start": "2610560",
    "end": "2617119"
  },
  {
    "text": "to kind of streamline this is i have my my service um i have an api service this",
    "start": "2617119",
    "end": "2622400"
  },
  {
    "text": "is what we do in angular where we'll have a method it'll interact with that and we may have to map some",
    "start": "2622400",
    "end": "2627920"
  },
  {
    "text": "stuff we may have to not this api is like goofy as so i'm using this camel case function um",
    "start": "2627920",
    "end": "2634160"
  },
  {
    "text": "just to make my life easier but uh i like to keep my api service files fairly",
    "start": "2634160",
    "end": "2639839"
  },
  {
    "text": "clean like their only responsibility is fetching an api um so here i have built kind of a",
    "start": "2639839",
    "end": "2645520"
  },
  {
    "text": "wrapper service and what this is going to do is this is going to take my service um",
    "start": "2645520",
    "end": "2650960"
  },
  {
    "text": "it's going to go ahead and it's going to make that request for me to the api um but then i'm going to call a tap",
    "start": "2650960",
    "end": "2656560"
  },
  {
    "text": "function and so this is like a side effect function in rxjs where it's saying hey i'm just",
    "start": "2656560",
    "end": "2661839"
  },
  {
    "text": "gonna pop in i'm gonna transform this as expected um but you can do something in this tap",
    "start": "2661839",
    "end": "2667119"
  },
  {
    "text": "function a lot of times we'll use it for causal locking or something like that um so in this tap function when this",
    "start": "2667119",
    "end": "2674160"
  },
  {
    "text": "uh get this get villagers method has been called i'm going to call this update method on the village store that",
    "start": "2674160",
    "end": "2679920"
  },
  {
    "text": "is made available to us by akita and then i'm going to update the state um with this this villagers response so",
    "start": "2679920",
    "end": "2688240"
  },
  {
    "text": "this i'm not in love with because it's like an extra another extra step that you have to handle um you know there's there's not a whole",
    "start": "2688240",
    "end": "2695119"
  },
  {
    "text": "lot of type safety here and what's going on but again this is a good starter like",
    "start": "2695119",
    "end": "2701040"
  },
  {
    "text": "lightweight solution if you're trying to get the hang of things so um all right we've done that um this",
    "start": "2701040",
    "end": "2707040"
  },
  {
    "text": "is something else that i have to do because this method is returning an observable this is one way to handle it where i'm just going to take the first",
    "start": "2707040",
    "end": "2713359"
  },
  {
    "text": "response because normally when i'm dealing with an api call it's kind of i just want to make that request once and then be done with it um so i'm",
    "start": "2713359",
    "end": "2719920"
  },
  {
    "text": "using this take one operator that is essentially going to take the first one and then it's going to complete the observable so i don't have to worry",
    "start": "2719920",
    "end": "2725839"
  },
  {
    "text": "about cleaning up my subscription okay um so that's going to help us",
    "start": "2725839",
    "end": "2732240"
  },
  {
    "text": "populate our ui but we need to get the information from our store and so again we're going to have some",
    "start": "2732240",
    "end": "2737760"
  },
  {
    "text": "sort of like displayed villagers number on our component that we're indicating to developers behind us it's",
    "start": "2737760",
    "end": "2743359"
  },
  {
    "text": "an observable um and here we have this um villager query that we're accessing in our component",
    "start": "2743359",
    "end": "2749520"
  },
  {
    "text": "and we're going to call this um display villager so if we look at our query this is another piece of akita",
    "start": "2749520",
    "end": "2755760"
  },
  {
    "text": "we're writing these queries that are doing something very similar to selector where they're allowing us to select a slice of of the state and",
    "start": "2755760",
    "end": "2762400"
  },
  {
    "text": "then do something with it so we can kind of look at what's going",
    "start": "2762400",
    "end": "2768560"
  },
  {
    "text": "on here under the hood of this class that they're offering that we're extending um and they're again giving us a couple",
    "start": "2768560",
    "end": "2775040"
  },
  {
    "text": "uh methods already available like if we have some sort of loading state um something like that all sorts of",
    "start": "2775040",
    "end": "2781520"
  },
  {
    "text": "things so um just pretty easy to go and like you know dig through exactly what's going on without having to go update the docs",
    "start": "2781520",
    "end": "2788319"
  },
  {
    "text": "so this will allow us to select our state return something on it we can you know select pieces of our state",
    "start": "2788319",
    "end": "2795200"
  },
  {
    "text": "uh all sorts of different things okay uh then the",
    "start": "2795200",
    "end": "2802400"
  },
  {
    "text": "the other thing that we have to do is let's say we are you know we're filtering our list of villagers how do",
    "start": "2802400",
    "end": "2808000"
  },
  {
    "text": "we how do we handle that i've lost my file",
    "start": "2808000",
    "end": "2816640"
  },
  {
    "text": "okay um again we have this update method um that you know will allow us to pass",
    "start": "2816640",
    "end": "2822800"
  },
  {
    "text": "in anything that we want to update on our um store or our state object",
    "start": "2822800",
    "end": "2827920"
  },
  {
    "text": "um so again like we have this one method that kind of like does everything but again this can lead to making it a",
    "start": "2827920",
    "end": "2835200"
  },
  {
    "text": "little bit harder to track down exactly what's going on or exactly why your state is being modified but it is a really low learning curve",
    "start": "2835200",
    "end": "2841920"
  },
  {
    "text": "and especially if you are not a typescript guru i feel like you might run left into less typing",
    "start": "2841920",
    "end": "2847440"
  },
  {
    "text": "roadblocks because you can do whatever you want which again you might shoot yourself in the foot with but hey at least your code will compile so um",
    "start": "2847440",
    "end": "2855119"
  },
  {
    "text": "different approach there maybe a little bit more easy to grasp uh so with akita i do like the fact that",
    "start": "2855119",
    "end": "2862240"
  },
  {
    "text": "it's a minimalistic api like you can jump into this you can consume it fairly easily i feel like it's a it's an easier way to",
    "start": "2862240",
    "end": "2868800"
  },
  {
    "text": "map out your head when you're you're new to this approach um there is some built-in logic like",
    "start": "2868800",
    "end": "2874559"
  },
  {
    "text": "it's very bare minimum like in not very robust or all i think like",
    "start": "2874559",
    "end": "2879760"
  },
  {
    "text": "hey they just have like one loading state um so they're trying to help you out a little bit if you have some some basic",
    "start": "2879760",
    "end": "2886240"
  },
  {
    "text": "application logic or you don't need anything super hardcore this would probably be a great use case um i really like the fact that you have",
    "start": "2886240",
    "end": "2892880"
  },
  {
    "start": "2891000",
    "end": "2891000"
  },
  {
    "text": "to handle the subscription management on your own which means you do need to have a somewhat decent understanding of rxjs",
    "start": "2892880",
    "end": "2898480"
  },
  {
    "text": "and it's also really not clear how to put logic like i use the tap operator just because a lot of times we'll use",
    "start": "2898480",
    "end": "2903520"
  },
  {
    "text": "that um in other state management approaches in angular but there's really just not a great way so i tend to like guard rails especially",
    "start": "2903520",
    "end": "2910800"
  },
  {
    "text": "for when i'm going to clients that have really differing levels of knowledge um which is why i tend to go to a more",
    "start": "2910800",
    "end": "2917359"
  },
  {
    "text": "framework locked-in solution um if i'm working with a team of you know seasoned front-end developers who've",
    "start": "2917359",
    "end": "2923599"
  },
  {
    "text": "been you know doing a hardcore front-end javascript development for like the last 10 years of their lives it's going to be a different story than",
    "start": "2923599",
    "end": "2929760"
  },
  {
    "text": "on the approaches we choose so the last thing i want to cover is uh",
    "start": "2929760",
    "end": "2934880"
  },
  {
    "text": "diy state management with rxjs um this is kind of an approach that we take in angular if we're wanting to do",
    "start": "2934880",
    "end": "2940319"
  },
  {
    "text": "the minimum or a lot of times i want clients where they're like ooh boo hiss third-party libraries and so you",
    "start": "2940319",
    "end": "2945839"
  },
  {
    "text": "literally can't use any tools that might be more convenient for your use case um so we kind of call this approach",
    "start": "2945839",
    "end": "2951839"
  },
  {
    "text": "simple state management the behavior subject and i will show you what that looks like",
    "start": "2951839",
    "end": "2958880"
  },
  {
    "text": "and we don't have to uh",
    "start": "2958880",
    "end": "2963760"
  },
  {
    "text": "do any npm installs because we have not added any additional libraries to our",
    "start": "2964800",
    "end": "2970079"
  },
  {
    "text": "code um so the first thing i'm going to do is i um i do like to create a store service that",
    "start": "2970079",
    "end": "2977440"
  },
  {
    "text": "i can use throughout my application so maybe i'm just dealing with this at component level i can simply write a new class to manage my state for that",
    "start": "2977440",
    "end": "2983520"
  },
  {
    "text": "component that extends the store it's got some stuff on here now where i basically have",
    "start": "2983520",
    "end": "2988960"
  },
  {
    "text": "a a private state which is a behavior subject that i can both publish to",
    "start": "2988960",
    "end": "2994720"
  },
  {
    "text": "and subscribe to um and then we have our state which is an observable and this is what our components are going to read",
    "start": "2994720",
    "end": "2999920"
  },
  {
    "text": "from our store um so we are going to initialize this behavior subject with our initial state",
    "start": "2999920",
    "end": "3005839"
  },
  {
    "text": "um so like when we were creating that object that had like the empty villagers array and sort options and everything like that",
    "start": "3005839",
    "end": "3011200"
  },
  {
    "text": "we'll be injecting that here and then we've got like a simple get method that is going to return to us the value of",
    "start": "3011200",
    "end": "3016319"
  },
  {
    "text": "our current state and then we also have a set state method um that is going to allow us to dispatch",
    "start": "3016319",
    "end": "3021520"
  },
  {
    "text": "the next um or call the the next method on our state behavior subject",
    "start": "3021520",
    "end": "3027119"
  },
  {
    "text": "with a new version of the state what this is doing and why we like this so much in angular",
    "start": "3027119",
    "end": "3033280"
  },
  {
    "text": "is this is helping us trigger change detection because it's passing an entirely new object as a state and so a lot of times when you're",
    "start": "3033280",
    "end": "3039119"
  },
  {
    "text": "dealing with for instance a nested array you might not get the change detection trigger that you need because it's not considering",
    "start": "3039119",
    "end": "3045200"
  },
  {
    "text": "that array changed if you modify it under the hood um for us to update the ui in ways we",
    "start": "3045200",
    "end": "3050480"
  },
  {
    "text": "would expect okay um so so here's my basic store",
    "start": "3050480",
    "end": "3056160"
  },
  {
    "text": "um i'm going to point out this is my service again i am just interacting with my api so i",
    "start": "3056160",
    "end": "3061760"
  },
  {
    "text": "just have methods for that that's going to return the response in the way i want so when i am writing my own state",
    "start": "3061760",
    "end": "3067920"
  },
  {
    "text": "management approach i might start with something like this where i have my villager state",
    "start": "3067920",
    "end": "3074640"
  },
  {
    "text": "i know that this is just going to be dealing with my my villager list component so i kind of want to handle all that",
    "start": "3074640",
    "end": "3080400"
  },
  {
    "text": "um so i have my initial state what that looks like",
    "start": "3080400",
    "end": "3085839"
  },
  {
    "text": "um so here i'm extending that source service so i can use this throughout my application um i am calling super with my new",
    "start": "3085839",
    "end": "3093599"
  },
  {
    "text": "initial or my initial state that i've created in here and here i'm passing in my api service um and here i'm kind of",
    "start": "3093599",
    "end": "3099839"
  },
  {
    "text": "writing my own methods to handle a lot of this so similarly to ngrx where we had that action that was dispatching the load",
    "start": "3099839",
    "end": "3105599"
  },
  {
    "text": "villagers um i have a load villagers function that is going to interact with my api it's",
    "start": "3105599",
    "end": "3110880"
  },
  {
    "text": "going to take the first response i i mentioned that as kind of a way to deal with the handling subscriptions",
    "start": "3110880",
    "end": "3115920"
  },
  {
    "text": "um and then in my tap function so i'm taking the response of this request i'm calling the set state method",
    "start": "3115920",
    "end": "3122880"
  },
  {
    "text": "on my store class and updating the state or returning a copy of the state with the updated villagers prop",
    "start": "3122880",
    "end": "3130559"
  },
  {
    "text": "so um we're going to approach this very similarly in the way we consume it in",
    "start": "3130559",
    "end": "3136319"
  },
  {
    "text": "our component here uh where we are going to have to dispatch a call",
    "start": "3136319",
    "end": "3142400"
  },
  {
    "text": "the loader of our villagers to kick things off um and so that's going to make the initial",
    "start": "3142400",
    "end": "3147680"
  },
  {
    "text": "request to populate our state um and then as far as getting what we need from our state this is where",
    "start": "3147680",
    "end": "3153280"
  },
  {
    "text": "you do have to have a somewhat decent um understanding of rxjs because you're going to kind of be writing your own",
    "start": "3153280",
    "end": "3159200"
  },
  {
    "text": "selectors almost here where okay i want to get the list of displayed villagers so i want to get my",
    "start": "3159200",
    "end": "3165119"
  },
  {
    "text": "my state um look at that object uh i might have um a function",
    "start": "3165119",
    "end": "3171520"
  },
  {
    "text": "where i um i've written this on my state to update displayed villager so this is going to look at my current state it's",
    "start": "3171520",
    "end": "3177680"
  },
  {
    "text": "going to figure out you know what the status of state favorites is on my state it's going to figure out the status of my filtered",
    "start": "3177680",
    "end": "3183760"
  },
  {
    "text": "list and then it's going to return to me my filtered villagers that i want to display so have have moved some of that logic um",
    "start": "3183760",
    "end": "3190880"
  },
  {
    "text": "and kind of written my own selectors here but again it's not very um distinct what's going on",
    "start": "3190880",
    "end": "3197359"
  },
  {
    "text": "um so it will it will get the job done um but it can be hard to read if",
    "start": "3197359",
    "end": "3203119"
  },
  {
    "text": "somebody doesn't know and you do have to manage a lot of this stuff on your own okay so we can",
    "start": "3203119",
    "end": "3211359"
  },
  {
    "text": "uh when we start to interact further with the state that i've written okay we're just calling methods on our state to do",
    "start": "3211359",
    "end": "3217200"
  },
  {
    "text": "different things and then we're trusting that those methods that we have written on our class we'll be updating our state",
    "start": "3217200",
    "end": "3222400"
  },
  {
    "text": "accordingly and not doing anything weird so we are to the point where we can only interact with our state in this one very",
    "start": "3222400",
    "end": "3228640"
  },
  {
    "text": "certain way so we're cleaning that up a little bit but this is not foolproof um and especially if you are dealing with",
    "start": "3228640",
    "end": "3234640"
  },
  {
    "text": "managing subscriptions or things like that this can get messy in a quick hurry all right so the big pros here are you",
    "start": "3234640",
    "end": "3242000"
  },
  {
    "text": "don't have to install a library there's no api to learn other than rxjs um but like when you",
    "start": "3242000",
    "end": "3247839"
  },
  {
    "text": "start rolling things on your own this way it can be under easier to understand the whys of of rxjs or state management or the",
    "start": "3247839",
    "end": "3254000"
  },
  {
    "text": "approaches that different libraries have taken um because you know we all love to like write our own solution all the time",
    "start": "3254000",
    "end": "3259119"
  },
  {
    "text": "nothing else matters this is a really great way to get familiar and understand the different problems that that state management libraries are",
    "start": "3259119",
    "end": "3265359"
  },
  {
    "text": "solving or things that you might want to solve in a different way big cons are you have to do literally",
    "start": "3265359",
    "end": "3270720"
  },
  {
    "text": "everything so if you have a team that is um less",
    "start": "3270720",
    "end": "3276000"
  },
  {
    "text": "knowledgeable in rxjs less knowledgeable in a lot of these concepts it can be really really hard to get everything on board and again you can",
    "start": "3276000",
    "end": "3282960"
  },
  {
    "text": "really easily shoot yourself on the foot if you do not have a good rxjs understanding",
    "start": "3282960",
    "end": "3288559"
  },
  {
    "text": "so kind of big picture thoughts here are um state management is good like we definitely as much as we can want to get",
    "start": "3288559",
    "end": "3294960"
  },
  {
    "text": "away from this approach of imperative coding where we are constantly manipulating things um based on shape",
    "start": "3294960",
    "end": "3301200"
  },
  {
    "text": "state happening we want to move towards you know a declarative approach where we're saying hey this is something that we care about in",
    "start": "3301200",
    "end": "3306240"
  },
  {
    "text": "our state um we can derive what should happen to this based on these different situations happening",
    "start": "3306240",
    "end": "3311680"
  },
  {
    "text": "and arch.js and reactive programming get us that much closer to that goal um it's perfectly fine to choose an",
    "start": "3311680",
    "end": "3316880"
  },
  {
    "text": "approach that works for you or works for your team you do not need to jump you shiny object of state management",
    "start": "3316880",
    "end": "3321920"
  },
  {
    "text": "um you know it'll be more pragmatic if you understand the skill level of your team understand the constraints that you're going to be working with um and overall",
    "start": "3321920",
    "end": "3328960"
  },
  {
    "text": "don't be scared of rxjs i feel like it's still a very it's the library's been out for i don't know almost years now and it's",
    "start": "3328960",
    "end": "3335040"
  },
  {
    "text": "still a very intimidating concept but um you're not going to leave the house anyway so spend some time learning rxjs",
    "start": "3335040",
    "end": "3343440"
  },
  {
    "start": "3343000",
    "end": "3343000"
  },
  {
    "text": "uh i have my demo here um so if you want to kind of pick through this code see the example see how i wired things",
    "start": "3343440",
    "end": "3349760"
  },
  {
    "text": "up like i'm that person that i have to be like really hands-on and playing with things um you can get it available here",
    "start": "3349760",
    "end": "3356000"
  },
  {
    "text": "if you want the slides they are available at statemanagement.jenniferwadella.com",
    "start": "3356000",
    "end": "3361200"
  },
  {
    "text": "and i think we have about four minutes left if anybody has questions comments concerns",
    "start": "3361200",
    "end": "3369520"
  },
  {
    "text": "thank you that was awesome glad to hear",
    "start": "3370720",
    "end": "3376880"
  },
  {
    "text": "this is the the silence you get at the end of a talk where you're like either everyone has achieved complete enlightenment",
    "start": "3376880",
    "end": "3382319"
  },
  {
    "text": "or nobody wants to be the first one to make a noise because they don't want to cause a fuss so unmute yourselves folks",
    "start": "3382319",
    "end": "3391200"
  },
  {
    "text": "give us a bit of noise doing this in silence is weird well it's also like it's hard for me to",
    "start": "3391200",
    "end": "3397680"
  },
  {
    "text": "gauge too as i'm talking because like i know i've given toxic conferences before and i i go into a little bit advanced",
    "start": "3397680",
    "end": "3403440"
  },
  {
    "text": "and then just like the fear of people's faces and then i could be like oh okay we're terrified let's back the",
    "start": "3403440",
    "end": "3408880"
  },
  {
    "text": "train up a little bit more in depth i was wondering um",
    "start": "3408880",
    "end": "3415280"
  },
  {
    "text": "you showed an approach where you built it yourself uh you've shown ngrx um i kind of like the ngrx thing",
    "start": "3415280",
    "end": "3422720"
  },
  {
    "text": "because in the long run that will give me a lot more um is it is it a bad thing if i'm thinking",
    "start": "3422720",
    "end": "3430240"
  },
  {
    "text": "well for my teams i'm going to take it slow and and basically force them onto the ngrx route",
    "start": "3430240",
    "end": "3437119"
  },
  {
    "text": "or can you switch to the self-made thing and then upgrade to uh you can definitely upgrade and like",
    "start": "3437119",
    "end": "3445839"
  },
  {
    "text": "the thing is um is like the the shift from that imperative code approach to any sort of",
    "start": "3445839",
    "end": "3451040"
  },
  {
    "text": "state management approach is going to get you over a huge hum and so i actually was just like re",
    "start": "3451040",
    "end": "3456240"
  },
  {
    "text": "writing this presentation because i had those like other mono repo and i had like all sorts of other random stuff and i was like all right people might get",
    "start": "3456240",
    "end": "3461680"
  },
  {
    "text": "confused so i like redid all of this in an hour this morning and it was very easy for me",
    "start": "3461680",
    "end": "3467440"
  },
  {
    "text": "to once i had like one approach down then you just kind of go change the things you need to add in the code",
    "start": "3467440",
    "end": "3472720"
  },
  {
    "text": "um there so yep cool yes",
    "start": "3472720",
    "end": "3481359"
  },
  {
    "text": "for the record i think javascript is an awesome language my biggest reservation is that when i",
    "start": "3481920",
    "end": "3487680"
  },
  {
    "text": "use it i have a lot of fun and history has told me that if i enjoyed building something it probably shouldn't be in production",
    "start": "3487680",
    "end": "3494960"
  },
  {
    "text": "word [Laughter] personally i feel that the whole",
    "start": "3495040",
    "end": "3500880"
  },
  {
    "text": "approach with typescript in angular is a lot better for larger teams and larger applications the",
    "start": "3500880",
    "end": "3506720"
  },
  {
    "text": "whole i remember following a course in javascript and they spent one and a half days",
    "start": "3506720",
    "end": "3512559"
  },
  {
    "text": "explaining the conversions between types not the types themselves but the conversions so we would understand what",
    "start": "3512559",
    "end": "3519119"
  },
  {
    "text": "would happen if we misplaced a plus sign or uh anything of that nature",
    "start": "3519119",
    "end": "3524319"
  },
  {
    "text": "yeah no javascript is sorry jennifer go on oh no i was just gonna say like i'm i'm",
    "start": "3524319",
    "end": "3530319"
  },
  {
    "text": "just coming off a code based audit where like literally the first thing i was like type all the things in",
    "start": "3530319",
    "end": "3537040"
  },
  {
    "text": "exactly the cool thing is like you know angular 11 now um basically puts you in strict mode",
    "start": "3537040",
    "end": "3542880"
  },
  {
    "text": "on their recommendation that's their default setting which means you're going to have to type function parameters you're going to have",
    "start": "3542880",
    "end": "3548000"
  },
  {
    "text": "to type function returns no implicit any um so it helps force you into doing things the right way because a lot of",
    "start": "3548000",
    "end": "3553599"
  },
  {
    "text": "people will just slap code out there and they just won't spend the time to learn typescript and then they'll just like do whatever hacks they can",
    "start": "3553599",
    "end": "3559599"
  },
  {
    "text": "tslin ignore next line everywhere the one question that i have then is",
    "start": "3559599",
    "end": "3564720"
  },
  {
    "text": "um so typescripts allows you to skip the types where it's obvious",
    "start": "3564720",
    "end": "3570319"
  },
  {
    "text": "in the sense that the compartment knows how to resolve them um is that still a thing with strict mode",
    "start": "3570319",
    "end": "3577838"
  },
  {
    "text": "yeah so like let's say um in my uh but let's just say like you know um",
    "start": "3581040",
    "end": "3589359"
  },
  {
    "text": "if i do this like this um that's enough for the compiler to know hey i'm gonna go ahead and assert this",
    "start": "3590480",
    "end": "3596880"
  },
  {
    "text": "as a boolean so yeah",
    "start": "3596880",
    "end": "3601839"
  }
]