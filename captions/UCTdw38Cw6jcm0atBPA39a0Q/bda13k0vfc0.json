[
  {
    "text": "all right I think we're ready to get started so before we get started I just want to warn you that I have been",
    "start": "9760",
    "end": "16730"
  },
  {
    "text": "feeling a bit under the weather the last few days so if I fall off the stage I want you all to just remember to go",
    "start": "16730",
    "end": "22400"
  },
  {
    "text": "slowly outside put a green thing in the box and just forget you ever was ever here all right deal",
    "start": "22400",
    "end": "27770"
  },
  {
    "text": "great so we're about to talk about a synchro's programming from the ground up in PHP sounds good okay now it's dotnet",
    "start": "27770",
    "end": "37460"
  },
  {
    "text": "I promise so before we get started I'm Philip Ekberg I used to live in Sydney but now I'm back in Sweden I don't miss",
    "start": "37460",
    "end": "46070"
  },
  {
    "text": "the slow internet here but I do miss the awesome weather and it's true that in",
    "start": "46070",
    "end": "51800"
  },
  {
    "text": "Sweden we do have a lot of polar bears roaming the streets just as we have drop",
    "start": "51800",
    "end": "56809"
  },
  {
    "text": "beers in Sydney all right so what I want you to do is that bring your cameras up",
    "start": "56809",
    "end": "62030"
  },
  {
    "text": "take a photo of me doing this talk ping me on Twitter and I'll send you a free copy of my book sounds good the digital",
    "start": "62030",
    "end": "70700"
  },
  {
    "text": "version you have to buy the one in paper all right let's get started so a synchrony is everyone in here a dotnet",
    "start": "70700",
    "end": "77750"
  },
  {
    "text": "developer excellent so I imagine that for the last few years we've all",
    "start": "77750",
    "end": "83210"
  },
  {
    "text": "probably done a ton of asynchronous programming you'd be using the async and await keywords you've done the TPL using",
    "start": "83210",
    "end": "90350"
  },
  {
    "text": "tasks the parallel extensions and all that but a lot of the times we feel like things just fall apart you feel like the",
    "start": "90350",
    "end": "98210"
  },
  {
    "text": "firefighter you just add a lot of these keywords and the application might work for the most of the times it does work",
    "start": "98210",
    "end": "104990"
  },
  {
    "text": "really well but then you're running to these problems where the app deadlocks and if you've never experienced a",
    "start": "104990",
    "end": "110990"
  },
  {
    "text": "deadlock it's probably because you've left the project before it even run right so a synchronous programming is",
    "start": "110990",
    "end": "118460"
  },
  {
    "text": "really hard the idea here is that you know we want to build applications that perform really well",
    "start": "118460",
    "end": "123799"
  },
  {
    "text": "so I'll take you through what we want to use a sequence programming for how we apply that in ducted applications and",
    "start": "123799",
    "end": "130670"
  },
  {
    "text": "how we can understand the state machine and everything that goes into these applications so hopefully when you go",
    "start": "130670",
    "end": "137270"
  },
  {
    "text": "out of here you've learned how to avoid deadlocks but you know why bother",
    "start": "137270",
    "end": "143300"
  },
  {
    "text": "asynchronous programming at all what's the reason for us wanting to introduce this in our applications like the main",
    "start": "143300",
    "end": "149570"
  },
  {
    "text": "reason when we first started doing this was to you know avoid unreliable apps an unreliable application can be like a",
    "start": "149570",
    "end": "156410"
  },
  {
    "text": "website that loads forever it could be in this case here it's a mobile app that's telling us that well this",
    "start": "156410",
    "end": "161720"
  },
  {
    "text": "application is not it's not responding the problem here might not be that the app actually crashed it could be that",
    "start": "161720",
    "end": "168260"
  },
  {
    "text": "the OS thinks that well your application is doing a lot of work in the wrong place so therefore I'm gonna tell the",
    "start": "168260",
    "end": "174680"
  },
  {
    "text": "user to kill it right so we want to avoid this here and we've got patterns and principles to allow us to build",
    "start": "174680",
    "end": "180860"
  },
  {
    "text": "better apps using async and await and a lot of other cool things in the.net framework that allows us to avoid this",
    "start": "180860",
    "end": "187010"
  },
  {
    "text": "here so ultimately we're here to improve the user experience and the way that we",
    "start": "187010",
    "end": "192470"
  },
  {
    "text": "do that is by introducing async and await and doing that properly and of course you probably want you books",
    "start": "192470",
    "end": "198770"
  },
  {
    "text": "personal UX for you but we are developers and we want to focus on building fast apps that are reliable so",
    "start": "198770",
    "end": "206330"
  },
  {
    "text": "the way that we do that is by leveraging all the resources available to us in our applications so in this case here I'm at",
    "start": "206330",
    "end": "213140"
  },
  {
    "text": "my workstation at home I got a course I got 32 gigs of RAM and I got a ton of",
    "start": "213140",
    "end": "218660"
  },
  {
    "text": "hard drives so leveraging all resources mean I want to be able to use my disks I",
    "start": "218660",
    "end": "224209"
  },
  {
    "text": "want to be able to use my memory I want to be able to use all the cores but those are all different paradigms so",
    "start": "224209",
    "end": "230390"
  },
  {
    "text": "when we talk about leveraging the resources we talked about CPU and i/o and we work with these two different",
    "start": "230390",
    "end": "237230"
  },
  {
    "text": "things separately so if we want to work with CPU bond operations we work with parallel programming we take a problem",
    "start": "237230",
    "end": "244490"
  },
  {
    "text": "we divide that into equally small pieces and we solve that on each core and we've",
    "start": "244490",
    "end": "251150"
  },
  {
    "text": "got parallel extensions to help us do this so that allows us to just say take this problem solve it for me divide that",
    "start": "251150",
    "end": "257780"
  },
  {
    "text": "across all our different course and it'll figure out how many threads to start it will just let us solve our",
    "start": "257780",
    "end": "263690"
  },
  {
    "text": "programs for us which is great and then we've got IO so I oh is a little bit different we might have an application",
    "start": "263690",
    "end": "269990"
  },
  {
    "text": "where we want to say we'll load this large file into memory when it's available in memory I want to be able to",
    "start": "269990",
    "end": "275570"
  },
  {
    "text": "consume that far in my application so what happens is that we introduce asynchronous",
    "start": "275570",
    "end": "280910"
  },
  {
    "text": "programming which allows us to say for instance when this thing here is done notify me so I can work with that result",
    "start": "280910",
    "end": "288160"
  },
  {
    "text": "so those two are really fundamentally different the parallel programming allows us to just solve a problem as",
    "start": "288160",
    "end": "294500"
  },
  {
    "text": "quickly as possible while it's synchro's programming allows us to offload some work somewhere and be notified when we",
    "start": "294500",
    "end": "301430"
  },
  {
    "text": "are ready to handle the result so when we work with parallel programming we",
    "start": "301430",
    "end": "307250"
  },
  {
    "text": "could be using the parallel extensions we could be saying that in this case here I want you to iterate from 0 to 100",
    "start": "307250",
    "end": "313190"
  },
  {
    "text": "and do that with all the available cores so that's great but we're here to talk",
    "start": "313190",
    "end": "319490"
  },
  {
    "text": "about a synchro's programming so how about we have a phone for instance my phone here probably got more coarse than",
    "start": "319490",
    "end": "325370"
  },
  {
    "text": "my my first computer I've got the latest Samsung Galaxy s8 it's like a hexa core",
    "start": "325370",
    "end": "330380"
  },
  {
    "text": "machine it's it's really powerful so if I run stammering and dot bet on this thing here I want to be able to leverage",
    "start": "330380",
    "end": "336169"
  },
  {
    "text": "all the available RAM I want to be able to use all my course and if I take the same dot in this library and run that",
    "start": "336169",
    "end": "342500"
  },
  {
    "text": "across asp.net or if I run that you know on my workstation at home I want that to",
    "start": "342500",
    "end": "347660"
  },
  {
    "text": "leverage all the different types of architectures that I might be running the code on so in this case here we have",
    "start": "347660",
    "end": "353659"
  },
  {
    "text": "this parallel extensions and I want to combine that with asynchronous principles and the ax synchro's",
    "start": "353659",
    "end": "358789"
  },
  {
    "text": "principles allows us to say start this work and tell me when it's done so we can combine these two different",
    "start": "358789",
    "end": "365270"
  },
  {
    "text": "paradigms rather easily so one of the times you might see this being used here is in in this case we have a mobile",
    "start": "365270",
    "end": "371690"
  },
  {
    "text": "application we're simply saying I want you to start off this asynchronous operation and this asynchronous",
    "start": "371690",
    "end": "377720"
  },
  {
    "text": "operation might have something parallel that's that it's executing itself so we",
    "start": "377720",
    "end": "384050"
  },
  {
    "text": "are starting this thing here it's using parallel extensions in that asynchronous operation it's easier if you look at the",
    "start": "384050",
    "end": "390770"
  },
  {
    "text": "code right so in this case here I'm simply saying well start off an asynchronous operation tasks that run",
    "start": "390770",
    "end": "395930"
  },
  {
    "text": "here is in the TPL it allows us to start off an asynchronous operation and then",
    "start": "395930",
    "end": "400970"
  },
  {
    "text": "we can subscribe to notifications when that's done and inside this asynchronous operation we are running this parallel",
    "start": "400970",
    "end": "407000"
  },
  {
    "text": "dot for loop what's interesting about parallel for is that it'll actually lock up the",
    "start": "407000",
    "end": "412430"
  },
  {
    "text": "application unless you did this because it's leveraging all the available resources which means that it's also",
    "start": "412430",
    "end": "418070"
  },
  {
    "text": "going to make use of your UI thread which makes sense so when we talked",
    "start": "418070",
    "end": "423590"
  },
  {
    "text": "about asynchronous programming and making an application more asynchronous we're talking about going from an",
    "start": "423590",
    "end": "428960"
  },
  {
    "text": "application that's synchronous to asynchronous that kind of makes sense right but we can also look at this as",
    "start": "428960",
    "end": "435410"
  },
  {
    "text": "we're going from an application that's blocking code to a non-blocking application so in our first example with",
    "start": "435410",
    "end": "443000"
  },
  {
    "text": "the mobile app it told us that the application is crashing but actually what's happening in the mobile app is",
    "start": "443000",
    "end": "449450"
  },
  {
    "text": "that we are blocking the working thread of the application so there's one main thread running most applications we have",
    "start": "449450",
    "end": "455720"
  },
  {
    "text": "the UI thread for winforms WPF sermon apps there's one thread in asp.net application that's handling our requests",
    "start": "455720",
    "end": "462350"
  },
  {
    "text": "if we're blocking that it means that we're gonna have a really bad experience for whatever is using that thread right",
    "start": "462350",
    "end": "469420"
  },
  {
    "text": "so what we want to do is that we want to go from blocking to non blocking and the",
    "start": "469420",
    "end": "474710"
  },
  {
    "text": "way that we do that is by avoid heavy lifting on our UI thread it kind of",
    "start": "474710",
    "end": "480140"
  },
  {
    "text": "makes sense and in this case here all we can do is that we can introduce this task Gudrun and something just runs",
    "start": "480140",
    "end": "485810"
  },
  {
    "text": "somewhere else right but we can try to understand why we get deadlocks I'm",
    "start": "485810",
    "end": "492620"
  },
  {
    "text": "saying here that we should never do if you're gonna block our synchronous operations and I'll try and reiterate",
    "start": "492620",
    "end": "498380"
  },
  {
    "text": "this a few times blocking an asynchronous operation means that we were saying I want to wait until this thing is done so just imagine for a",
    "start": "498380",
    "end": "506150"
  },
  {
    "text": "while that you are the main thread you are delegating all the work and looking",
    "start": "506150",
    "end": "511310"
  },
  {
    "text": "over your rest synchronous operations and then all of a sudden you just blindfold yourself and you have no",
    "start": "511310",
    "end": "517159"
  },
  {
    "text": "longer any idea of what's going on you can no longer keep track of your asynchronous operations so blocking an",
    "start": "517160",
    "end": "523250"
  },
  {
    "text": "asynchronous operation means that we can no longer look over our asynchronous operations there's no way for us to know",
    "start": "523250",
    "end": "530540"
  },
  {
    "text": "if they're gonna be done which results in a deadlock and we look at some code later on and once we look at the state",
    "start": "530540",
    "end": "537530"
  },
  {
    "text": "machine and what's happening internally when we apply us you can wait you'll get a better understanding of why the",
    "start": "537530",
    "end": "543860"
  },
  {
    "text": "is a problem so ideally we want to take this application the application that's",
    "start": "543860",
    "end": "549310"
  },
  {
    "text": "even the user a pretty bad experience that's blocking the UI and introduce a",
    "start": "549310",
    "end": "555500"
  },
  {
    "text": "loading indicator that's also blocking the UI but what's interesting here is even though these two things are clearly",
    "start": "555500",
    "end": "562220"
  },
  {
    "text": "doing the same thing they're no longer allowing the user to do an input the user is more inclined to actually close",
    "start": "562220",
    "end": "568370"
  },
  {
    "text": "the app in the first one because the user doesn't know about internals right there are more leaning towards just",
    "start": "568370",
    "end": "575420"
  },
  {
    "text": "waiting for a little while longer if it's loading especially if they've done a lot of work in the app so we want to",
    "start": "575420",
    "end": "582860"
  },
  {
    "text": "avoid having the user close our apps even if some if even if in some cases it",
    "start": "582860",
    "end": "588050"
  },
  {
    "text": "actually deadlocked and to do that we introduced the task parallel library so",
    "start": "588050",
    "end": "593269"
  },
  {
    "text": "the task parallel library allows us to simplify working with concurrent and asynchronous code so concurrent code",
    "start": "593269",
    "end": "599510"
  },
  {
    "text": "that's parallel programming and asynchronous code is this a way for us to run something concurrently and then",
    "start": "599510",
    "end": "606140"
  },
  {
    "text": "get notified when that work is done so if we look at this TPL we saw a little",
    "start": "606140",
    "end": "611959"
  },
  {
    "text": "hint of that before and most of you have probably worked with tasks so this task",
    "start": "611959",
    "end": "617120"
  },
  {
    "text": "here allows us to start up some asynchronous operation imagine that we have a lot of work that needs to be done",
    "start": "617120",
    "end": "622640"
  },
  {
    "text": "and we simply want to be notified when that's done so the most simple way for us to start this work is by saying tasks",
    "start": "622640",
    "end": "629000"
  },
  {
    "text": "that run do some work somewhere else so you simply pass a delegate to this here and it just executes that somewhere else",
    "start": "629000",
    "end": "635269"
  },
  {
    "text": "in some cases that we want to return some data from this as well that's where we introduce the generic version of the",
    "start": "635269",
    "end": "642110"
  },
  {
    "text": "task and we were allowed to retrieve values back from this now when we want to subscribe for what results we get",
    "start": "642110",
    "end": "650000"
  },
  {
    "text": "from here we introduce something called the continuation so this is where it starts to get a little bit more",
    "start": "650000",
    "end": "655040"
  },
  {
    "text": "interesting because most of us have probably seen this and think well I already know all this but when it comes to the continuations that's where it",
    "start": "655040",
    "end": "662089"
  },
  {
    "text": "becomes a little bit more interesting so we can subscribe to when this is done here by introducing a continuation by",
    "start": "662089",
    "end": "668930"
  },
  {
    "text": "saying well I want you to continue with this block of code when you're done now",
    "start": "668930",
    "end": "674750"
  },
  {
    "text": "when does this run here so does this draw if there's an exception in the task does",
    "start": "674750",
    "end": "680000"
  },
  {
    "text": "this run if someone cancelled the task or does it only run when there's actually a value that we can use the",
    "start": "680000",
    "end": "687680"
  },
  {
    "text": "continuation runs in all different scenarios so if you cancel the task if it's faulted if it's completed it runs",
    "start": "687680",
    "end": "693410"
  },
  {
    "text": "all of those different scenarios so when you're inside the continuation here you",
    "start": "693410",
    "end": "698660"
  },
  {
    "text": "probably want to check if it's actually completed all right so a lot of cases I see that",
    "start": "698660",
    "end": "703940"
  },
  {
    "text": "well we're inside the continuation so everything probably worked but that's",
    "start": "703940",
    "end": "709190"
  },
  {
    "text": "not necessarily the case so in this case here I'm just referring to the task outside of the scope to check if it's",
    "start": "709190",
    "end": "716390"
  },
  {
    "text": "completed but we can also get that task passed into this delegate so what's",
    "start": "716390",
    "end": "722779"
  },
  {
    "text": "interesting here is that we can work with this here and we can check if the task is completed if there's a result",
    "start": "722779",
    "end": "728570"
  },
  {
    "text": "available you get that by doing T dot result two tasks that result but you",
    "start": "728570",
    "end": "733760"
  },
  {
    "text": "should only use tasks that result once you're inside the continuation now I'll show you why in a little moment but just",
    "start": "733760",
    "end": "740390"
  },
  {
    "text": "to take a look at this in another scenario so imagine we have this WPF application I'll be showing a lot of",
    "start": "740390",
    "end": "747260"
  },
  {
    "text": "demos in WPF but the same thing applies to asp.net mostly console applications",
    "start": "747260",
    "end": "754399"
  },
  {
    "text": "samer in WPF WinForms and all the different types of dotnet apps that you're working with so in this case here",
    "start": "754399",
    "end": "761449"
  },
  {
    "text": "we have a WPF application in the constructor I'm simply saying well I want you to simulate one millisecond of",
    "start": "761449",
    "end": "767750"
  },
  {
    "text": "work so what we're doing here is that I'm simply doing a task deal I for one millisecond now what happens when the",
    "start": "767750",
    "end": "775310"
  },
  {
    "text": "user clicks the button in this case here the task is clearly completed but I'm",
    "start": "775310",
    "end": "781430"
  },
  {
    "text": "telling this here that I want to subscribe for the continuation after it's actually completed so we'll this",
    "start": "781430",
    "end": "788600"
  },
  {
    "text": "here execute how many of you think that this code here will execute excellent so",
    "start": "788600",
    "end": "795170"
  },
  {
    "text": "let's look at the code behind this here so it doesn't matter if you can't read everything in here so this is from the reference source you can go into the",
    "start": "795170",
    "end": "802220"
  },
  {
    "text": "reference source Microsoft comm and you can drill into the dotnet framework and there's comments for everything for the",
    "start": "802220",
    "end": "808430"
  },
  {
    "text": "entire dotnet framework it's really handy so what we can see here is that at the bottom here it's saying well if the",
    "start": "808430",
    "end": "814730"
  },
  {
    "text": "continuation was not previously cued we'll just execute the continuation",
    "start": "814730",
    "end": "820120"
  },
  {
    "text": "right so if everyone in here now expected that the code would actually",
    "start": "820120",
    "end": "825320"
  },
  {
    "text": "not execute you'd all have a bug in your rap right so let's look at a bit of",
    "start": "825320",
    "end": "832670"
  },
  {
    "text": "tasks let's look at how we can work with this here so I'll jump into Visual",
    "start": "832670",
    "end": "838459"
  },
  {
    "text": "Studio 2017 is everyone in here using the latest version of facial studio if you're not I can highly recommend it",
    "start": "838459",
    "end": "844880"
  },
  {
    "text": "because it's got a lot of features when you're looking over your tasks especially if you work with a",
    "start": "844880",
    "end": "849949"
  },
  {
    "text": "synchronous programming you can see all the different tasks that are currently running you can see threads that's being",
    "start": "849949",
    "end": "854990"
  },
  {
    "text": "allocated and you can see if there's any problems in those tasks as well so the idea here is that I have not WPF",
    "start": "854990",
    "end": "861440"
  },
  {
    "text": "application I've simply set up a task here I'm doing tasks that run and in this task of running I'm simply doing",
    "start": "861440",
    "end": "867470"
  },
  {
    "text": "thread dot sleep now threaded sleep just just you know sleeps the thread that is",
    "start": "867470",
    "end": "872930"
  },
  {
    "text": "currently running on which indicates that task that run is running in a different context and then after that",
    "start": "872930",
    "end": "879470"
  },
  {
    "text": "we're simply returning hello world so let's just run this app here and just",
    "start": "879470",
    "end": "885529"
  },
  {
    "text": "make sure that we've set the right one as a sort of project we're gonna look at a bit of asp.net later on as well",
    "start": "885529",
    "end": "891620"
  },
  {
    "text": "because there's some really interesting cases when working with a asynchronous",
    "start": "891620",
    "end": "896779"
  },
  {
    "text": "programming in asp.net so I'll click run here and after two seconds we can see here that it says hello world and if I",
    "start": "896779",
    "end": "902540"
  },
  {
    "text": "click this again here you'll see here that I can move around my window while that is actually you saw that I couldn't",
    "start": "902540",
    "end": "911209"
  },
  {
    "text": "front it moved around the window here because we have teed up result here at",
    "start": "911209",
    "end": "917690"
  },
  {
    "text": "the bottom so the problem here is that I'm simply saying thread out sleep and I'm clearly sleeping on a different",
    "start": "917690",
    "end": "924260"
  },
  {
    "text": "thread so what happens here is that we start off an eye synchronous operation that asynchronous operation tells it to",
    "start": "924260",
    "end": "930649"
  },
  {
    "text": "sleep in that context so it locks up the thread that is currently running on but then what I'm doing here at the bottom",
    "start": "930649",
    "end": "936139"
  },
  {
    "text": "is that I'm blocking my my code from continuing because what's happening here is that I'm saying will give me the",
    "start": "936139",
    "end": "941540"
  },
  {
    "text": "result of the task and when is the task available well it's available after two seconds so",
    "start": "941540",
    "end": "947420"
  },
  {
    "text": "it'll block our application here and if we do this for a longer time like 20 seconds maybe 30 seconds windows will",
    "start": "947420",
    "end": "953990"
  },
  {
    "text": "think that the application crashed and it'll tell us well you should probably terminate the app on mobile apps that",
    "start": "953990",
    "end": "959960"
  },
  {
    "text": "window of when the OS thinks the application should no longer be executing it's much smaller so if you",
    "start": "959960",
    "end": "966170"
  },
  {
    "text": "work with salmon you'll notice that if you don't do this properly if you do that T dot result or T dot wait you'll",
    "start": "966170",
    "end": "972500"
  },
  {
    "text": "have a much worse experience with the app so how do we solve this well one",
    "start": "972500",
    "end": "979160"
  },
  {
    "text": "thing that we can do is that we can introduce the continuation that I talked about so I can say well when this task",
    "start": "979160",
    "end": "984200"
  },
  {
    "text": "is done I want to continue it with with",
    "start": "984200",
    "end": "990260"
  },
  {
    "text": "something else and in here we want to do exactly the same thing so we can skip",
    "start": "990260",
    "end": "996680"
  },
  {
    "text": "that task for now what happens if I just",
    "start": "996680",
    "end": "1002290"
  },
  {
    "text": "paste this code in here and run the app so clearly what I'm saying here is that",
    "start": "1002290",
    "end": "1008950"
  },
  {
    "text": "well after 2 seconds I simply want to set the result text to whatever gets",
    "start": "1008950",
    "end": "1014620"
  },
  {
    "text": "back from that task so if I click run here and move the window around it doesn't lock up anymore",
    "start": "1014620",
    "end": "1020700"
  },
  {
    "text": "which is great but I'm not getting anything in here it's the problem here",
    "start": "1020700",
    "end": "1026230"
  },
  {
    "text": "is that the continuation just as our task runs in a different context so it",
    "start": "1026230",
    "end": "1032470"
  },
  {
    "text": "runs on a different thread which means that we cannot change the UI from a different thread that's basically why",
    "start": "1032470",
    "end": "1037839"
  },
  {
    "text": "programming so if you have two threads one is the UI thread and one is some other thread you can't cross communicate",
    "start": "1037840",
    "end": "1043300"
  },
  {
    "text": "when it comes to the UI so the way that we need to solve this is to use a dispatcher to invoke the UI and change",
    "start": "1043300",
    "end": "1050260"
  },
  {
    "text": "the UI from that but what's interesting here is that we didn't get an exception because the task actually swallows any",
    "start": "1050260",
    "end": "1058240"
  },
  {
    "text": "exceptions and we don't validate our tasks in here so how do we validate the task one way to do it would be to do dot",
    "start": "1058240",
    "end": "1065980"
  },
  {
    "text": "result but we can't do that here because we're not returning anything and we should never do dot result because that",
    "start": "1065980",
    "end": "1072550"
  },
  {
    "text": "walks yep so the way that we can do this is that we can introduce another",
    "start": "1072550",
    "end": "1077740"
  },
  {
    "text": "continuation to check if this one worked so we can say well when the continuation",
    "start": "1077740",
    "end": "1083950"
  },
  {
    "text": "is done which is also an asynchronous operation sort of we can say well I want",
    "start": "1083950",
    "end": "1089440"
  },
  {
    "text": "you to continue with this block here this is where it becomes a little bit",
    "start": "1089440",
    "end": "1095890"
  },
  {
    "text": "nasty working with TPL and the way that we did a synchronous programming prior to async can't wait so now I can in here",
    "start": "1095890",
    "end": "1103000"
  },
  {
    "text": "say well if t2 is completed or is faulted well how about you just tell me",
    "start": "1103000",
    "end": "1109600"
  },
  {
    "text": "that and you give me the exception it's not a breakpoint in here and if I run",
    "start": "1109600",
    "end": "1116620"
  },
  {
    "text": "this with the debugger and click the button it'll tell me earlier because I have the debugger attached but I'll just",
    "start": "1116620",
    "end": "1122140"
  },
  {
    "text": "jump through that and you'll see that we're getting to this second continuation actually we'll set this",
    "start": "1122140",
    "end": "1127179"
  },
  {
    "text": "here as well I'll click the button run here we can see that after two seconds",
    "start": "1127179",
    "end": "1133840"
  },
  {
    "text": "we try to update the UI and that fails it's gonna tell us that well you try to do a cross threading call so that's not",
    "start": "1133840",
    "end": "1139690"
  },
  {
    "text": "gonna work but what actually happens is that we're getting to the second continuation because when we try to",
    "start": "1139690",
    "end": "1145360"
  },
  {
    "text": "change the UI it throw an exception it sets the task to a completed state or a",
    "start": "1145360",
    "end": "1150670"
  },
  {
    "text": "faulted state and we get down here and see well this task here is faulted and we can see information about what",
    "start": "1150670",
    "end": "1157000"
  },
  {
    "text": "actually what's actually going on you seem in here and we can get the",
    "start": "1157000",
    "end": "1164080"
  },
  {
    "text": "exceptions in here as well and see that well you try to change the thread from a different one right so no one wants to",
    "start": "1164080",
    "end": "1172929"
  },
  {
    "text": "do this it's like if you're working with JavaScript and promises it just becomes really nastier for a while because what",
    "start": "1172929",
    "end": "1179500"
  },
  {
    "text": "you need to do now is well you need to check if this one fault right so you say well let's continue with this one as well it just becomes",
    "start": "1179500",
    "end": "1185890"
  },
  {
    "text": "really nasty so we don't do that but this just shows you that while working",
    "start": "1185890",
    "end": "1191140"
  },
  {
    "text": "with the continuation in this sense here isn't really going to work out for larger abs it's gonna be a bit terrible",
    "start": "1191140",
    "end": "1198010"
  },
  {
    "text": "to work with in the long run but if we just make this work what happens is that",
    "start": "1198010",
    "end": "1204490"
  },
  {
    "text": "well we need to use the dispatcher and in asp.net that's called the synchronization context so you can do",
    "start": "1204490",
    "end": "1210130"
  },
  {
    "text": "this WPF in wind forums in asp.net applications the way that you",
    "start": "1210130",
    "end": "1216050"
  },
  {
    "text": "communicate with the original thread is just a little bit different in WPF its dispatcher in asp.net is called the",
    "start": "1216050",
    "end": "1222770"
  },
  {
    "text": "synchronization context so we can say well I want to invoke the main context",
    "start": "1222770",
    "end": "1228970"
  },
  {
    "text": "so we'll just do that and once this is running back on the UI thread there",
    "start": "1228970",
    "end": "1235430"
  },
  {
    "text": "should be no problems updating the UI and the UI no longer locks up so we can",
    "start": "1235430",
    "end": "1242300"
  },
  {
    "text": "move this around here really nicely and after two seconds is this hello world so we kind of made the app a little bit",
    "start": "1242300",
    "end": "1248180"
  },
  {
    "text": "better but we also introduce complexity which makes it easier for us to get an application that's gonna be crashing so",
    "start": "1248180",
    "end": "1255800"
  },
  {
    "text": "not so good but this kind of shows you that well it's rigorous programming is",
    "start": "1255800",
    "end": "1260900"
  },
  {
    "text": "really good but doing it with just the TPL is problematic especially if we have",
    "start": "1260900",
    "end": "1266660"
  },
  {
    "text": "all these different full states that we need to track and just need to make sure that you know we can access the data",
    "start": "1266660",
    "end": "1272600"
  },
  {
    "text": "properly all right so let's jump into this here so we saw that you know tasks",
    "start": "1272600",
    "end": "1277760"
  },
  {
    "text": "are really good allows us to easily offload work somewhere else and get notified when that's done so we got into",
    "start": "1277760",
    "end": "1283760"
  },
  {
    "text": "the continuation and saw that well there's there's some data available here or there was an exception we can check",
    "start": "1283760",
    "end": "1289100"
  },
  {
    "text": "if it's canceled if it's false and if it's completed and so forth so this is where I like to introduce a sinking away",
    "start": "1289100",
    "end": "1294920"
  },
  {
    "text": "you know a sinking a weight is just really two contextual keywords that",
    "start": "1294920",
    "end": "1299990"
  },
  {
    "text": "pretty just pretty much means that all they're doing is that they're taking a lot of complexity and hide that",
    "start": "1299990",
    "end": "1306410"
  },
  {
    "text": "somewhere else it generates a ton of code to keep track off where you are in",
    "start": "1306410",
    "end": "1312650"
  },
  {
    "text": "the state machine builds up the state machine it just does a lot of things for you okay but there's no reason for it to",
    "start": "1312650",
    "end": "1322100"
  },
  {
    "text": "change the runtime which is what the contextual keywords are for so you don't have to rely on a new dotnet framework",
    "start": "1322100",
    "end": "1328580"
  },
  {
    "text": "or a dotnet runtime sorry so that's pretty good so they just need to update the compilers to make sure that this",
    "start": "1328580",
    "end": "1334400"
  },
  {
    "text": "works and compiles down to the same il that can be executed by the current state machine or the current runtime all",
    "start": "1334400",
    "end": "1341060"
  },
  {
    "text": "right so async in a way they pretty much just allows us to hide complexity which is great hiding",
    "start": "1341060",
    "end": "1346820"
  },
  {
    "text": "complexity often means that we increase readability that means that not only does our applications maybe become",
    "start": "1346820",
    "end": "1353690"
  },
  {
    "text": "better for our end-users but also it becomes better for the developer at least that's what we all",
    "start": "1353690",
    "end": "1359989"
  },
  {
    "text": "aim for but the problem here is that it does become a little bit more error-prone so this means that well we",
    "start": "1359989",
    "end": "1366830"
  },
  {
    "text": "are introducing a sink in a weight where we know that working with TPL can be a little bit hard and problematic and now",
    "start": "1366830",
    "end": "1373249"
  },
  {
    "text": "we're just gonna add even more things to make it even more confusing so in this case here we have a simple simple method",
    "start": "1373249",
    "end": "1380950"
  },
  {
    "text": "the idea here is that we want to run this method asynchronously so the first",
    "start": "1380950",
    "end": "1386359"
  },
  {
    "text": "thing that we do is mark it with the keyword async now one of the misconceptions is that this just",
    "start": "1386359",
    "end": "1392570"
  },
  {
    "text": "automatically makes everything inside it asynchronous that's not really the case",
    "start": "1392570",
    "end": "1397609"
  },
  {
    "text": "so marking something with async only prepares for asynchronous operations",
    "start": "1397609",
    "end": "1403690"
  },
  {
    "text": "it's when we introduce the away keyword or it becomes a little bit more interesting and where it actually",
    "start": "1403690",
    "end": "1409940"
  },
  {
    "text": "introduces all these asynchronous principles so we'll look at what happens",
    "start": "1409940",
    "end": "1415129"
  },
  {
    "text": "when we actually add that keyword and both of the keywords and what's generated but just remember that when",
    "start": "1415129",
    "end": "1421279"
  },
  {
    "text": "you add the async keyword you only prepare for using async or synchronous operations and we when you add their",
    "start": "1421279",
    "end": "1427549"
  },
  {
    "text": "weight keyword that's where you introduce it continuations and that's where you start doing yours includes code so basically what that means is",
    "start": "1427549",
    "end": "1436099"
  },
  {
    "text": "that you see the VAR x is equal to 10 that's not going to be executed somewhere else it's gonna be executed on",
    "start": "1436099",
    "end": "1441409"
  },
  {
    "text": "the caller thread so as I said the await keyword is where pretty much all the",
    "start": "1441409",
    "end": "1447950"
  },
  {
    "text": "magic happens the awake keyword marks the continuation so instead of doing the",
    "start": "1447950",
    "end": "1453109"
  },
  {
    "text": "continue would thing that we saw earlier we can simply add their weight keyword which makes it a lot easier to read and",
    "start": "1453109",
    "end": "1459639"
  },
  {
    "text": "what's even better is that it also validates that the task that we were",
    "start": "1459639",
    "end": "1464960"
  },
  {
    "text": "awaiting is completed successfully that means that it's checking if there's any",
    "start": "1464960",
    "end": "1469970"
  },
  {
    "text": "exceptions or if there's any problems if it was canceled if it is canceled or if",
    "start": "1469970",
    "end": "1475099"
  },
  {
    "text": "there's a problem it'll just throw that back to the caller and then it's up to the caller to make",
    "start": "1475099",
    "end": "1480920"
  },
  {
    "text": "sure that handled uh handles that properly so that means that when we mark",
    "start": "1480920",
    "end": "1486260"
  },
  {
    "text": "something with a weight we don't want to run the code after it until it's done so what happens is that when you see their",
    "start": "1486260",
    "end": "1492530"
  },
  {
    "text": "weight keyword it returns back to whoever called the method with a reference to that ongoing work so that's",
    "start": "1492530",
    "end": "1499610"
  },
  {
    "text": "really confusing really so let's look at an example in this case here we have a",
    "start": "1499610",
    "end": "1505040"
  },
  {
    "text": "button click the first thing that we're doing is that we're calling a method called run async so it's gonna go down",
    "start": "1505040",
    "end": "1512450"
  },
  {
    "text": "into run a sink the first thing in run a sink is doing run internal async and then inside running ternal async it does",
    "start": "1512450",
    "end": "1519680"
  },
  {
    "text": "it tossed a delay so this is the first time it doesn't really call anywhere else and we don't really care about what's happening internally in tosco",
    "start": "1519680",
    "end": "1526190"
  },
  {
    "text": "delay but what it's doing here is that it's simulating a hundred millisecond work so when it sees the a weight",
    "start": "1526190",
    "end": "1534440"
  },
  {
    "text": "keyword it's gonna return back to the line or the code that executed that in",
    "start": "1534440",
    "end": "1540830"
  },
  {
    "text": "that code so that'll be a way to run internal async and that in its turn sees their weight keyword which returns up to",
    "start": "1540830",
    "end": "1547520"
  },
  {
    "text": "the button click handler so now we're at the top of the chain what happens now is",
    "start": "1547520",
    "end": "1553940"
  },
  {
    "text": "that it's just keeping track of all the work that's going on so the weight keyword here and the async keyword set",
    "start": "1553940",
    "end": "1560000"
  },
  {
    "text": "up state machines and they're making sure that it's jumping to the correct context and that you're on the correct",
    "start": "1560000",
    "end": "1565040"
  },
  {
    "text": "thread so after 100 milliseconds we're gonna come down to hello world here and",
    "start": "1565040",
    "end": "1570190"
  },
  {
    "text": "after hello world's gonna be returned actually what happens when you see the return keyword is that it takes whatever",
    "start": "1570190",
    "end": "1576140"
  },
  {
    "text": "you want to return the result of that and sits that as a result on the task so",
    "start": "1576140",
    "end": "1581600"
  },
  {
    "text": "what happens is that well we saw their weight keyword up here which means that we grabbed the result not only does it",
    "start": "1581600",
    "end": "1587390"
  },
  {
    "text": "validate that there was no exceptions or cancellations it also grabs the result of that I synchronous operation all",
    "start": "1587390",
    "end": "1595700"
  },
  {
    "text": "right so it takes that hello world and we return hello world - from Ron",
    "start": "1595700",
    "end": "1601340"
  },
  {
    "text": "internal async and then that returns up to our button click event handler right",
    "start": "1601340",
    "end": "1607690"
  },
  {
    "text": "so a lot of steps just to make something a little bit whether for the end-user but there's a",
    "start": "1607690",
    "end": "1614250"
  },
  {
    "text": "lot of things that can go wrong here and if I wrote this in production that would do a lot of different things as well",
    "start": "1614250",
    "end": "1620690"
  },
  {
    "text": "let's look a look at the different example so pretty much the same code but I left out the await keyword here at the",
    "start": "1620690",
    "end": "1629669"
  },
  {
    "text": "top so what we're actually doing now is that we're calling run async without their wakey-wakey word in front of it",
    "start": "1629669",
    "end": "1635600"
  },
  {
    "text": "because actually what happens is that it first calls the method and then it gets a task and then it awaits it but in this",
    "start": "1635600",
    "end": "1642600"
  },
  {
    "text": "case here we don't see their way keyword so it still calls down to run async which calls run internal async which",
    "start": "1642600",
    "end": "1649049"
  },
  {
    "text": "awaits the task at delay and that means that it's gonna be going returning up to",
    "start": "1649049",
    "end": "1655620"
  },
  {
    "text": "the next line that's in queue to be executed and since this has not completed yet so 100 milliseconds is not",
    "start": "1655620",
    "end": "1662100"
  },
  {
    "text": "up it's gonna run the next line after run async because there's no white key",
    "start": "1662100",
    "end": "1667350"
  },
  {
    "text": "word now if we introduce the away keyword it's gonna check well it's the",
    "start": "1667350",
    "end": "1672840"
  },
  {
    "text": "task completed right so we got the the run async task that we're keeping track",
    "start": "1672840",
    "end": "1678149"
  },
  {
    "text": "of the work inside bran async inside run internal async which in its turn it's keeping track of the test at delay so",
    "start": "1678149",
    "end": "1685440"
  },
  {
    "text": "when we introduced a weight keyword here it sees that well this completed now so we can return hello world which returns",
    "start": "1685440",
    "end": "1691379"
  },
  {
    "text": "inside run async and then we can get the result in here alright just to make this",
    "start": "1691379",
    "end": "1696929"
  },
  {
    "text": "even more confusing all of these different ones are running on the same context which means that we call this",
    "start": "1696929",
    "end": "1703080"
  },
  {
    "text": "from the UI thread so whenever we see their weight keyword whatever is after that it's gonna be running in the same",
    "start": "1703080",
    "end": "1709049"
  },
  {
    "text": "context as the code before it all right and just to make that even more",
    "start": "1709049",
    "end": "1715230"
  },
  {
    "text": "confusing it's not true for asp.net if you use configure weight false but we'll",
    "start": "1715230",
    "end": "1721019"
  },
  {
    "text": "try that on later on does this make sense good or just load your mind you're",
    "start": "1721019",
    "end": "1728340"
  },
  {
    "text": "just all sleeping alright so what's the difference between doing a weight versus",
    "start": "1728340",
    "end": "1734460"
  },
  {
    "text": "like task continue with besides the obvious things that well you know it",
    "start": "1734460",
    "end": "1739590"
  },
  {
    "text": "looks better it also makes sure that we execute the code after",
    "start": "1739590",
    "end": "1745410"
  },
  {
    "text": "continuation on the same context so with the continued with here we actually run",
    "start": "1745410",
    "end": "1752040"
  },
  {
    "text": "the continuation on on different context doesn't necessarily mean that we're on",
    "start": "1752040",
    "end": "1757770"
  },
  {
    "text": "the same thread that we did our asynchronous operation on and it doesn't mean that we were on the UI thread we're",
    "start": "1757770",
    "end": "1763380"
  },
  {
    "text": "somewhere else right so we have to worry about the cross threading ourselves and",
    "start": "1763380",
    "end": "1769050"
  },
  {
    "text": "all that but when we come down to just normal continuation with the awake",
    "start": "1769050",
    "end": "1774210"
  },
  {
    "text": "keyword we're at the original context and what also is really good with this",
    "start": "1774210",
    "end": "1779790"
  },
  {
    "text": "is that you know it validated validated the task which means that we don't like the throws the exceptions if there's a",
    "start": "1779790",
    "end": "1786330"
  },
  {
    "text": "problem which is essentially what we really want so the really bad parts",
    "start": "1786330",
    "end": "1791940"
  },
  {
    "text": "about async in a way it is that you know it increases complexity and you can't really see the complexity but it really",
    "start": "1791940",
    "end": "1798330"
  },
  {
    "text": "does make your code if you d compile that a lot more complex and even if it",
    "start": "1798330",
    "end": "1803700"
  },
  {
    "text": "seems like well I can just add the async keyword and whenever there's a task I'll just add a weight oh it's hard to master",
    "start": "1803700",
    "end": "1810500"
  },
  {
    "text": "it's funny because I like I've done ton of workshops and talks on async wrist programming and I learned something",
    "start": "1810500",
    "end": "1816660"
  },
  {
    "text": "every time and I still do deadlocks and I still do crappy applications I don't know if I'm still like a slow learner",
    "start": "1816660",
    "end": "1822270"
  },
  {
    "text": "but it's hard to master let's just leave it at that and if you've never had a",
    "start": "1822270",
    "end": "1827640"
  },
  {
    "text": "deadlock I promise that you'll experience a deadlock sooner or later it's really easy especially when it",
    "start": "1827640",
    "end": "1834540"
  },
  {
    "text": "comes to waste and can await because it becomes harder to you know separate",
    "start": "1834540",
    "end": "1840060"
  },
  {
    "text": "what's running somewhere else and what's running on the same context which is essentially where you seem to run into",
    "start": "1840060",
    "end": "1846180"
  },
  {
    "text": "deadlocks it's when you forget which context you are currently running on normally when you get a deadlock it's because you're",
    "start": "1846180",
    "end": "1851730"
  },
  {
    "text": "saying well run this thing here and I'm gonna block until it's done normally you",
    "start": "1851730",
    "end": "1856950"
  },
  {
    "text": "don't want to block you just want to wait for the work to be done but sometimes it's hard to know where you're",
    "start": "1856950",
    "end": "1864060"
  },
  {
    "text": "running the code and we'll look at that soon as well but before we do that we need to understand what the state machine is all about the state machine",
    "start": "1864060",
    "end": "1871410"
  },
  {
    "text": "allows us to keep track of all our work so whenever we add the async keyword it",
    "start": "1871410",
    "end": "1876870"
  },
  {
    "text": "introduces one of these stay machines and I I tend to say like compare the state machine to a a child",
    "start": "1876870",
    "end": "1883110"
  },
  {
    "text": "that's sitting in the back seat of your car just asking over and over again are we there yet is this annoying little kid",
    "start": "1883110",
    "end": "1889650"
  },
  {
    "text": "just asking you all the time if we were there that's pretty much the state machine it's just keeping track of all the work and when it knows where to go",
    "start": "1889650",
    "end": "1896820"
  },
  {
    "text": "it jumps to the correct context on the correct thread which is essentially what we want to do it keeps track of the",
    "start": "1896820",
    "end": "1902760"
  },
  {
    "text": "state make sense but what it's also doing is that it keeps track it handles",
    "start": "1902760",
    "end": "1908640"
  },
  {
    "text": "all the result handles the results and potential errors so that means that if we're throwing an exception inside our",
    "start": "1908640",
    "end": "1915210"
  },
  {
    "text": "task got run it'll capture that which is really good and also make sure that it can execute the code after we have the",
    "start": "1915210",
    "end": "1922559"
  },
  {
    "text": "awake keyword so it goes into the continuation and it runs that in the correct context so what does applying",
    "start": "1922559",
    "end": "1929850"
  },
  {
    "text": "the async keyword related well it introduces this state machine and introducing a state machine means that",
    "start": "1929850",
    "end": "1936300"
  },
  {
    "text": "it's doing a lot of work it's generating a lot of code and this code is essentially it's gonna take our method",
    "start": "1936300",
    "end": "1943140"
  },
  {
    "text": "body and move that into somewhere else it's not only gonna create a new file it's gonna tear everything apart move",
    "start": "1943140",
    "end": "1949380"
  },
  {
    "text": "lines all over the place and as soon as you have their weight keyword is just gonna make it even more complex so just",
    "start": "1949380",
    "end": "1957420"
  },
  {
    "text": "looking at this very small example here we're adding the async keyword you can",
    "start": "1957420",
    "end": "1962880"
  },
  {
    "text": "see that we have the debug that right line at the bottom so when we compile this here well you would probably expect",
    "start": "1962880",
    "end": "1969030"
  },
  {
    "text": "that it'll live a bit similar to this here how many of you have looked at decompiled async code before okay good",
    "start": "1969030",
    "end": "1976470"
  },
  {
    "text": "so you all know what it's gonna look like pretty much so what happens is that it introduces like nothing that looks",
    "start": "1976470",
    "end": "1983970"
  },
  {
    "text": "like our code it took the entire method body move that into something called run async d underscore underscore one which",
    "start": "1983970",
    "end": "1990929"
  },
  {
    "text": "is the generated state machine and inside the state machine it keeps track of of the asynchronous operations it",
    "start": "1990929",
    "end": "1998070"
  },
  {
    "text": "keeps track of certain errors and in any results and so forth now we can see here at the bottom so keep this in mind this",
    "start": "1998070",
    "end": "2004220"
  },
  {
    "text": "is really interesting so we have this it returns a reference to the ongoing work that means that when we call an",
    "start": "2004220",
    "end": "2011929"
  },
  {
    "text": "asynchronous op operation or and I say my method that's Marcos async and it returns a task we",
    "start": "2011929",
    "end": "2017869"
  },
  {
    "text": "can check if it's if it's faulted we can check if there was an exception you know if there's a result available that's",
    "start": "2017869",
    "end": "2024080"
  },
  {
    "text": "really good that's helpful so keep that in mind so if we take one step further",
    "start": "2024080",
    "end": "2029299"
  },
  {
    "text": "and we look inside the steak machine we will see here that well we do have the",
    "start": "2029299",
    "end": "2034639"
  },
  {
    "text": "task to delay for two seconds here which is the same code that we had earlier and on the line above it it introduces this",
    "start": "2034639",
    "end": "2040789"
  },
  {
    "text": "variable which is our VAR X is equal to 10 and then what it's doing is that it's checking if it's completed and then at",
    "start": "2040789",
    "end": "2047419"
  },
  {
    "text": "the bottom when everything is done and it's in the context of running this the continuation of the code we can see that",
    "start": "2047419",
    "end": "2054020"
  },
  {
    "text": "we have our debugger dried line that's good so this is pretty much our code that we had here now what's really",
    "start": "2054020",
    "end": "2060230"
  },
  {
    "text": "interesting here is that this is all running on the same thread that you're calling the method on so if we just step",
    "start": "2060230",
    "end": "2067280"
  },
  {
    "text": "back a little bit here we have run acing here right so if we go back one step further if you call this method here",
    "start": "2067280",
    "end": "2074000"
  },
  {
    "text": "what I told you earlier is that this doesn't just magically become asynchronous it generates a state",
    "start": "2074000",
    "end": "2079549"
  },
  {
    "text": "machine and we can see here that is running our state machine on the line above this here it's doing builder dot",
    "start": "2079549",
    "end": "2085878"
  },
  {
    "text": "start which is starting and running all the code inside the state machine so all",
    "start": "2085879",
    "end": "2091339"
  },
  {
    "text": "of this code here is in fact running on our UI thread if we're running this in WPF alright so keep that in mind when",
    "start": "2091339",
    "end": "2100970"
  },
  {
    "text": "we're looking at deadlocks because this is where a lot of people seem to be deadlocking at least once or twice third",
    "start": "2100970",
    "end": "2108740"
  },
  {
    "text": "time well you probably shouldn't be a developer I'm joking all right so this",
    "start": "2108740",
    "end": "2115280"
  },
  {
    "text": "is where we talked about a Singh Boyd does anyone know when to use a Singh void never that's the right answer",
    "start": "2115280",
    "end": "2124130"
  },
  {
    "text": "I didn't hear anyone say but let's just imagine a Singh for should never be used",
    "start": "2124130",
    "end": "2129190"
  },
  {
    "text": "except in one case and I'll show you that soon so a Singh Ford is pretty much like you know it's the hottest summer day",
    "start": "2129190",
    "end": "2135470"
  },
  {
    "text": "especially in Sydney you go to the beach you stand in line for 40 minutes to get your ice cream and as soon as they hand",
    "start": "2135470",
    "end": "2141109"
  },
  {
    "text": "you the ice cream and you walk out of the line you just drop it like you just want to lie down and cry right",
    "start": "2141109",
    "end": "2147150"
  },
  {
    "text": "if the Sun doesn't kill you the Sharks will that's that's acing board for you so is it really that bad well let me",
    "start": "2147150",
    "end": "2154509"
  },
  {
    "text": "just show you a little bit of code here so what happens here it's the same code that we had earlier but I've removed a",
    "start": "2154509",
    "end": "2160690"
  },
  {
    "text": "sync task it's doing a sync void instead so if we look the decompile code of this",
    "start": "2160690",
    "end": "2166539"
  },
  {
    "text": "here with a compiled code we can see here that it's doing this exactly the same thing that we had earlier except",
    "start": "2166539",
    "end": "2172509"
  },
  {
    "text": "that we're now using this async void method builder which handles exceptions and problems a little bit different if",
    "start": "2172509",
    "end": "2180400"
  },
  {
    "text": "there's an exception inside this state machine here it'll just tear down the entire application that sounds good",
    "start": "2180400",
    "end": "2187809"
  },
  {
    "text": "right why it's doing that though well it's because as we see here there's no return builder task at the bottom we no",
    "start": "2187809",
    "end": "2195819"
  },
  {
    "text": "longer have a reference to the ongoing work so the only way for the application to tell us that there was a problem is",
    "start": "2195819",
    "end": "2202059"
  },
  {
    "text": "to just kill the app then he will certainly know there was a problem and we have to fix it so you know I heard I",
    "start": "2202059",
    "end": "2209979"
  },
  {
    "text": "don't know if anyone else in here heard that Elon Musk said that I think that AIS are going to destroy humanity and",
    "start": "2209979",
    "end": "2216789"
  },
  {
    "text": "all all of that right everyone heard that well I think ASIC void is gonna kill us all especially if we do it in",
    "start": "2216789",
    "end": "2224259"
  },
  {
    "text": "cars called joking aside how do we fix this it's really easy to fix the way that we",
    "start": "2224259",
    "end": "2231039"
  },
  {
    "text": "fix this is by just don't do a sync void we change this to async task but you",
    "start": "2231039",
    "end": "2236289"
  },
  {
    "text": "know what do we have to do if we mark this as async task so I said earlier",
    "start": "2236289",
    "end": "2243579"
  },
  {
    "text": "that the await keyword is validating that the tasks are all done properly and",
    "start": "2243579",
    "end": "2248979"
  },
  {
    "text": "what we have to do here is that we have to make sure that all the code in this part here executed properly it's better",
    "start": "2248979",
    "end": "2254859"
  },
  {
    "text": "that the app no longer crashes but we also want to make sure that there's not a not any problems in the code so the",
    "start": "2254859",
    "end": "2260710"
  },
  {
    "text": "way that we've checked that this is in fact working is by introducing their weight keyword so if we look at a button",
    "start": "2260710",
    "end": "2267849"
  },
  {
    "text": "event handler can we mark that as async Boyd well we can't mark go on we can't",
    "start": "2267849",
    "end": "2276130"
  },
  {
    "text": "mark this click event handler as async task right because that would break the delegates",
    "start": "2276130",
    "end": "2281510"
  },
  {
    "text": "so this here needs to be void so if we simply do this here I'll just show you",
    "start": "2281510",
    "end": "2286790"
  },
  {
    "text": "this example here if we have a weight task delay delay 2 seconds we have to",
    "start": "2286790",
    "end": "2295940"
  },
  {
    "text": "mark this as async so told you to never do async void but there's not really any",
    "start": "2295940",
    "end": "2301070"
  },
  {
    "text": "options in here right so I can't mark this as async task and pretty much the all the initialization of asynchronous",
    "start": "2301070",
    "end": "2308030"
  },
  {
    "text": "programming is through event handlers when the user clicks a button or something happens right so we need to be",
    "start": "2308030",
    "end": "2314330"
  },
  {
    "text": "able to do this and the only way that it's not going to tear down the application is by making sure that",
    "start": "2314330",
    "end": "2320090"
  },
  {
    "text": "there's no exceptions in here so how do we make sure that there's no exceptions in here well we don't write bad code",
    "start": "2320090",
    "end": "2325510"
  },
  {
    "text": "it's super simple now what we do is that we wrap all our code in a try-catch",
    "start": "2325510",
    "end": "2333200"
  },
  {
    "text": "block gotta catch them all we do this",
    "start": "2333200",
    "end": "2342100"
  },
  {
    "text": "now we want to write as little code as possible inside our try catch block",
    "start": "2342100",
    "end": "2347420"
  },
  {
    "text": "that's what we've all learned before right so we want to make sure that we don't have too much coding here that",
    "start": "2347420",
    "end": "2352580"
  },
  {
    "text": "could potentially fail so what I normally do is that well I try to have very small async void methods when they",
    "start": "2352580",
    "end": "2358340"
  },
  {
    "text": "click event handlers and then I call out somewhere else in this case here I'm simply just validating that our our code",
    "start": "2358340",
    "end": "2366200"
  },
  {
    "text": "worked properly so now this won't tear",
    "start": "2366200",
    "end": "2371270"
  },
  {
    "text": "down the application but I probably have to make sure that there's no problem in the catch block right so we might want",
    "start": "2371270",
    "end": "2377450"
  },
  {
    "text": "to clean up the resources if there's a problem we can clean that up in here and",
    "start": "2377450",
    "end": "2383000"
  },
  {
    "text": "if everything is in the application is async and we might want to log this to a database if you do stuff in here as well",
    "start": "2383000",
    "end": "2390760"
  },
  {
    "text": "that's asynchronous because now we can use a weight inside catch blocks and",
    "start": "2390760",
    "end": "2396050"
  },
  {
    "text": "finally blocks as well just make sure you have one more layer of twine catch it doesn't tear down the app right so",
    "start": "2396050",
    "end": "2404690"
  },
  {
    "text": "this is just an example of if you would have like a database call here like log to DB or clean up or do something",
    "start": "2404690",
    "end": "2411599"
  },
  {
    "text": "like that so it's really handy so in this case here when we run this here and when we have this code compiled it's",
    "start": "2411599",
    "end": "2418170"
  },
  {
    "text": "allowing us to to work really easily with all these a synchronous code right it's it's more beautiful than doing all",
    "start": "2418170",
    "end": "2424619"
  },
  {
    "text": "that task dot run business that we saw earlier even if tasks that run is the way that we initialize our our a synchronous",
    "start": "2424619",
    "end": "2431400"
  },
  {
    "text": "operations we want to avoid doing the continue with on those tasks because you know this is a much better approach",
    "start": "2431400",
    "end": "2437759"
  },
  {
    "text": "because it takes care of looking over if there's any fault it gives you the result it just makes it a lot easier but",
    "start": "2437759",
    "end": "2445410"
  },
  {
    "text": "as we saw earlier there is one use case for using to continue with on tasks it's for instance when we start a task",
    "start": "2445410",
    "end": "2452069"
  },
  {
    "text": "somewhere else and we always want to run something when it's done that we might want to just do continue with because",
    "start": "2452069",
    "end": "2459059"
  },
  {
    "text": "what happens when we introduce the async and a weight keyword is that it improves is all this complexity right in this",
    "start": "2459059",
    "end": "2464819"
  },
  {
    "text": "case here it might not make any sense for me to introduce a state machine to move this entire block of code into that",
    "start": "2464819",
    "end": "2472470"
  },
  {
    "text": "state machine right doesn't really make any sense so as we saw earlier if we",
    "start": "2472470",
    "end": "2479190"
  },
  {
    "text": "have this private async let's say string run async ideally we can in this case",
    "start": "2479190",
    "end": "2490829"
  },
  {
    "text": "here for instance say await a stub delay let's do one second the world so what",
    "start": "2490829",
    "end": "2502890"
  },
  {
    "text": "we're doing here is that we are simply in producing an asynchronous operation and this needs to be task of string",
    "start": "2502890",
    "end": "2510019"
  },
  {
    "text": "workout this keyboard you know I'm acting salmon for too long as you forget a normal keyboard alright so what we",
    "start": "2511400",
    "end": "2519930"
  },
  {
    "text": "want to do now is that we want to grab that whole the world out of this here and what we saw earlier is that well if",
    "start": "2519930",
    "end": "2525269"
  },
  {
    "text": "we call run async this returns a task right so just as we had earlier we can",
    "start": "2525269",
    "end": "2534599"
  },
  {
    "text": "say well give me the task of run async",
    "start": "2534599",
    "end": "2538969"
  },
  {
    "text": "now what happens here is that goes in to run a sink it runs the task of delay and then after that we get the result so it",
    "start": "2539890",
    "end": "2547670"
  },
  {
    "text": "takes that result hello world which we have here it sets that on our tea here",
    "start": "2547670",
    "end": "2553250"
  },
  {
    "text": "so we could say well I wanted to to give me the result but in T dot result this",
    "start": "2553250",
    "end": "2560270"
  },
  {
    "text": "here will in fact give us hello world after one second but this here would block the application and it would most",
    "start": "2560270",
    "end": "2567170"
  },
  {
    "text": "likely deadlock as well so I want you to think about that for a second why this",
    "start": "2567170",
    "end": "2572720"
  },
  {
    "text": "would deadlock and I'll get back to that just a little moment so the way that we get the result out of that without any",
    "start": "2572720",
    "end": "2579460"
  },
  {
    "text": "hassle is to say well give me the result it's equal to result is equal to a wait T it's not",
    "start": "2579460",
    "end": "2590150"
  },
  {
    "text": "pretty see this here validates that there's no exceptions it checks if there's an exceptions if there's an",
    "start": "2590150",
    "end": "2596600"
  },
  {
    "text": "exception in T here it's going to take the exception and set that as a full state on this one and if it sees that",
    "start": "2596600",
    "end": "2604190"
  },
  {
    "text": "it's gonna throw it back to the caller so that way keyword will make sure that we can grab that exception and we can",
    "start": "2604190",
    "end": "2609470"
  },
  {
    "text": "get that Pokemon in here super simple now a lot of people ask me well what if",
    "start": "2609470",
    "end": "2615440"
  },
  {
    "text": "I have an asynchronous operation that returns something as synchronous such as",
    "start": "2615440",
    "end": "2620540"
  },
  {
    "text": "the HTTP client you can actually what we can do then is that we'll say let's say",
    "start": "2620540",
    "end": "2625700"
  },
  {
    "text": "that we do we get hello world from a stream from somewhere we might be doing it from a file so we can do tasks dot",
    "start": "2625700",
    "end": "2632060"
  },
  {
    "text": "from results which is a good way for us to fake that this is running as a task",
    "start": "2632060",
    "end": "2637280"
  },
  {
    "text": "and we have a task of a task of a string and then we can have a wait T here which",
    "start": "2637280",
    "end": "2642650"
  },
  {
    "text": "returns a task of string and then we can have one more wait and sometimes there's",
    "start": "2642650",
    "end": "2650660"
  },
  {
    "text": "even more tasks but you get the point so we can just chain all these subways together so it might not become readable",
    "start": "2650660",
    "end": "2658580"
  },
  {
    "text": "but you can do it so a task can return a task which might be you know an",
    "start": "2658580",
    "end": "2664340"
  },
  {
    "text": "asynchronous operation like an HTTP call and then you need to read the content from the HTTP request which is another a",
    "start": "2664340",
    "end": "2670520"
  },
  {
    "text": "synchronous operation so then you can chain up all these it's like that all right and you know if",
    "start": "2670520",
    "end": "2678090"
  },
  {
    "text": "we compile this here and I'll just close off the app and we head into reflector",
    "start": "2678090",
    "end": "2688010"
  },
  {
    "text": "I'm just gonna refresh this here we'll see if it it's all good",
    "start": "2688010",
    "end": "2693500"
  },
  {
    "text": "compiled so we see here that we have the",
    "start": "2693500",
    "end": "2698910"
  },
  {
    "text": "button click event handler which is introducing this state machine it's introducing the state machine that keeps track of run async and the result of",
    "start": "2698910",
    "end": "2705840"
  },
  {
    "text": "that so we can drill into that and this is a void method so it's doing the async void method builder but if we're going",
    "start": "2705840",
    "end": "2712110"
  },
  {
    "text": "to the state machine we have a method called move next which is running all our code and this here is all the code",
    "start": "2712110",
    "end": "2720360"
  },
  {
    "text": "that's executing and keeping track of everything that we have inside are about the click event Taylor Wow",
    "start": "2720360",
    "end": "2728160"
  },
  {
    "text": "it's a lot of code for just this little part here right so it's a try-catch we're running just a method we're doing",
    "start": "2728160",
    "end": "2735690"
  },
  {
    "text": "a wait right so we have what 70 lines of code in here to do that really simple",
    "start": "2735690",
    "end": "2740910"
  },
  {
    "text": "thing so one thing that I tend to talk about is how it can be more efficient when we when we work with asynchronous",
    "start": "2740910",
    "end": "2749760"
  },
  {
    "text": "programming and one of the things that we want to avoid is of course deadlocks right so deadlocks is pretty easy to",
    "start": "2749760",
    "end": "2757710"
  },
  {
    "text": "avoid an example of getting a deadlock in this case here this example looks",
    "start": "2757710",
    "end": "2763460"
  },
  {
    "text": "difficult to understand but it's really not so we're introducing a one-second delay I continue after that one one",
    "start": "2763460",
    "end": "2771360"
  },
  {
    "text": "millisecond sorry and say well after one millisecond I want you to run something in the UI and then at the bottom here I",
    "start": "2771360",
    "end": "2778470"
  },
  {
    "text": "say well I'm gonna you know lock up the UI until you were done so how do they",
    "start": "2778470",
    "end": "2784080"
  },
  {
    "text": "know that it's done right how does it communicate back to the you I'd say well I'm done yeah if we do this it just",
    "start": "2784080",
    "end": "2790590"
  },
  {
    "text": "blows up which is not so good an easier way for us to get a deadlock is to",
    "start": "2790590",
    "end": "2797070"
  },
  {
    "text": "simply block our state machine so said earlier that well if we do run a singer'",
    "start": "2797070",
    "end": "2803280"
  },
  {
    "text": "salt or run a single way this state machine that's key in track of all their synchronous",
    "start": "2803280",
    "end": "2808440"
  },
  {
    "text": "operations it's running on our calling context so that means if we introduce this code here and do a white or we're",
    "start": "2808440",
    "end": "2815310"
  },
  {
    "text": "blocking this here I'm gonna blow up the app it's not going to blow up at all it says cannot stop responding because it's",
    "start": "2815310",
    "end": "2822270"
  },
  {
    "text": "locking up so always avoid doing dot wait the only time you do wait or dot result",
    "start": "2822270",
    "end": "2828360"
  },
  {
    "text": "is if you work with a console application where there's no UI thread you can even deadlock asp.net so yeah",
    "start": "2828360",
    "end": "2836760"
  },
  {
    "text": "just avoid this another thing that I see a lot is like unnecessary state machines",
    "start": "2836760",
    "end": "2843080"
  },
  {
    "text": "so what do I mean by that well in this case here we have a method called run async run async is an Eastern calling",
    "start": "2843080",
    "end": "2849690"
  },
  {
    "text": "one internal async which is marked as async task it's awaiting something it's calling something async and then it's calling",
    "start": "2849690",
    "end": "2855540"
  },
  {
    "text": "something internal wasting what happens here is that each of these methods are",
    "start": "2855540",
    "end": "2861420"
  },
  {
    "text": "going to introduce their own state machine which is going to keep track of the work inside that state machine and",
    "start": "2861420",
    "end": "2866820"
  },
  {
    "text": "each a weight keyword is going to be working with a continuation to make sure that it's jumping to the correct context",
    "start": "2866820",
    "end": "2873030"
  },
  {
    "text": "each a weight keyword is gonna make sure that there's no exceptions and it's gonna check the result and so forth",
    "start": "2873030",
    "end": "2878460"
  },
  {
    "text": "that's a lot of work just to do one simple thing what do we want to do here really whenever we want to use their",
    "start": "2878460",
    "end": "2884730"
  },
  {
    "text": "weight keyword is when we want to get a result after the execution so if there's nothing after the continuation we don't",
    "start": "2884730",
    "end": "2892260"
  },
  {
    "text": "really need to wait so the way that we clean this up is by simply remove async",
    "start": "2892260",
    "end": "2898110"
  },
  {
    "text": "in the weight from the method that simply return back back to the caller so",
    "start": "2898110",
    "end": "2904230"
  },
  {
    "text": "in some cases look at the method chain here so at the bottom we were returning tasks a delay instead of marking it as",
    "start": "2904230",
    "end": "2909750"
  },
  {
    "text": "async tasks and doing a weight it's simply doing the same thing so when we looked at these the builder earlier when",
    "start": "2909750",
    "end": "2917910"
  },
  {
    "text": "it compiled the the code into the state machine we saw that the method signature changed to just builder tasks which",
    "start": "2917910",
    "end": "2924360"
  },
  {
    "text": "returns a reference to the ongoing work but the reference in this case of the ongoing work is just simply tasks to",
    "start": "2924360",
    "end": "2929940"
  },
  {
    "text": "delay so we can return that up to the to the top level or whoever wants to work",
    "start": "2929940",
    "end": "2936240"
  },
  {
    "text": "with it and then has something after in the continuation so the first time that we need to introduced a continuation in this case",
    "start": "2936240",
    "end": "2942570"
  },
  {
    "text": "is when we do run a sink does that make sense right so another thing I want to",
    "start": "2942570",
    "end": "2954750"
  },
  {
    "text": "talk about is cancellations so cancellations is a really interesting topic is anyone in here doing mobile Sam",
    "start": "2954750",
    "end": "2960060"
  },
  {
    "text": "urn no just a few of you yeah so one of the things that I've been doing a lot is",
    "start": "2960060",
    "end": "2965730"
  },
  {
    "text": "optimizing when user inputs data for instance I want to make sure that well if they still write something and I'm",
    "start": "2965730",
    "end": "2971490"
  },
  {
    "text": "gonna search for something online well I just wait until they've finished writing and I can do that with smart",
    "start": "2971490",
    "end": "2977040"
  },
  {
    "text": "cancellations or tricking it using tasks which is pretty interesting you can probably do the same thing if you're",
    "start": "2977040",
    "end": "2982170"
  },
  {
    "text": "working with WPF or asp.net as well so just an example here this is more like a",
    "start": "2982170",
    "end": "2987359"
  },
  {
    "text": "CPU intensive thing and it's not the best example but it'll give you an idea of the problem that we have here so I",
    "start": "2987359",
    "end": "2993990"
  },
  {
    "text": "want to be able to cancel this operation here so this is a long-running operation there's a little bit of a mixture off",
    "start": "2993990",
    "end": "2999900"
  },
  {
    "text": "talking to the UI and there's some some asynchrony here so I want to make sure",
    "start": "2999900",
    "end": "3005690"
  },
  {
    "text": "that I can use this in my app and I wanta be able to cancel this operation so the way that I introduce this is by",
    "start": "3005690",
    "end": "3012619"
  },
  {
    "text": "introducing something called a cancellation token source so the cancellation token source allows me to",
    "start": "3012619",
    "end": "3018410"
  },
  {
    "text": "get something called a cancellation token now the token is what's traveling throughout all our different",
    "start": "3018410",
    "end": "3023839"
  },
  {
    "text": "asynchronous operations and ideally you pass that down along the line to the call at the bottom and you can just",
    "start": "3023839",
    "end": "3030500"
  },
  {
    "text": "track if it's been canceled along the way now i can use this cancellation token source by simply saying",
    "start": "3030500",
    "end": "3037990"
  },
  {
    "text": "cancellation token source dot cancel can I see a show of hands how many of you think that this is gonna cancel my",
    "start": "3037990",
    "end": "3043760"
  },
  {
    "text": "operation exactly it's do nothing correct",
    "start": "3043760",
    "end": "3049190"
  },
  {
    "text": "so why is it doing nothing well how would it know where to break my app how would it know where to stop executing my",
    "start": "3049190",
    "end": "3055550"
  },
  {
    "text": "code so the way that we introduce the cancellations is by saying well just",
    "start": "3055550",
    "end": "3060980"
  },
  {
    "text": "throw an exception if there's been a cancellation requested so this here is really it's really neat and you can use",
    "start": "3060980",
    "end": "3068000"
  },
  {
    "text": "this in a variety of different scenarios so I've done this in mobile applications like whole is smart cancel",
    "start": "3068000",
    "end": "3075260"
  },
  {
    "text": "so what I do is that I set up a task that's running for let's say 400",
    "start": "3075260",
    "end": "3080450"
  },
  {
    "text": "milliseconds each time the user presses a button I cancel the task and just restarted and if it has not been",
    "start": "3080450",
    "end": "3087290"
  },
  {
    "text": "cancelled I go ahead and do the web call right so that means that if there's",
    "start": "3087290",
    "end": "3092330"
  },
  {
    "text": "nothing input for 400 milliseconds I don't do any cancellations and the user",
    "start": "3092330",
    "end": "3099320"
  },
  {
    "text": "didn't the user wants the data right",
    "start": "3099320",
    "end": "3105100"
  },
  {
    "text": "all right so how many of you doing asp.net who well was all of you that's",
    "start": "3106090",
    "end": "3112190"
  },
  {
    "text": "awesome so everything that we've talked about up until now is applicable in asp.net the",
    "start": "3112190",
    "end": "3117710"
  },
  {
    "text": "only difference in asp.net which makes this really hard is the synchronization context so the synchronization context",
    "start": "3117710",
    "end": "3125840"
  },
  {
    "text": "is pretty much like our dispatcher dotty invoke so imagine we get into our asp.net application we got an action",
    "start": "3125840",
    "end": "3133720"
  },
  {
    "text": "that's running on one thread then we start doing a synchronous operations and",
    "start": "3133720",
    "end": "3139130"
  },
  {
    "text": "the way that we get back to the original thread is by doing synchronization context that current outpost for",
    "start": "3139130",
    "end": "3145430"
  },
  {
    "text": "instance this is what it's doing internally to get back to that original context so how many of you near so all",
    "start": "3145430",
    "end": "3152000"
  },
  {
    "text": "of you are pretty much doing asp.net and how many of you have been told to always do configure right false so a handful of",
    "start": "3152000",
    "end": "3160220"
  },
  {
    "text": "you have been told that so what's interesting here is that if we do just a weight task that dealer here so this is",
    "start": "3160220",
    "end": "3166580"
  },
  {
    "text": "applicable in WPF as well but this is an asp.net application what happens here is that we're not forcing this line back to",
    "start": "3166580",
    "end": "3173480"
  },
  {
    "text": "the colon context which means that all the code after inside our continuation is behaving like we were doing this with",
    "start": "3173480",
    "end": "3180800"
  },
  {
    "text": "dot continue with all right but in this case here we are executing the code on",
    "start": "3180800",
    "end": "3187730"
  },
  {
    "text": "the original context so why is that important and why is that such a big difference well the thread pool in asp.net is",
    "start": "3187730",
    "end": "3195500"
  },
  {
    "text": "limited which means that if it can you just pick whichever thread you want or whichever is available that's gonna be a",
    "start": "3195500",
    "end": "3202100"
  },
  {
    "text": "lot faster so doing configure away falls is a lot of times faster but",
    "start": "3202100",
    "end": "3207740"
  },
  {
    "text": "it's gonna run you into a few different problems so let's look at a few of the",
    "start": "3207740",
    "end": "3212750"
  },
  {
    "text": "interesting cases in asp.net that gives you a little bit of a headache so I've",
    "start": "3212750",
    "end": "3221030"
  },
  {
    "text": "got an example here this is a Web API and I've got my values controller here",
    "start": "3221030",
    "end": "3228140"
  },
  {
    "text": "and I'm just gonna run this here and and you'll see run the right app and you'll",
    "start": "3228140",
    "end": "3236060"
  },
  {
    "text": "see here that what I'm doing is that I'm using something called the cache so I'm using HTTP context current of cache I'm",
    "start": "3236060",
    "end": "3242360"
  },
  {
    "text": "setting that to hello world I'm calling an asynchronous operation that's doing something in the background but I'm just",
    "start": "3242360",
    "end": "3247790"
  },
  {
    "text": "waiting for that to finish before I return something back to the user super",
    "start": "3247790",
    "end": "3253610"
  },
  {
    "text": "simple right so what happens now is that well it's",
    "start": "3253610",
    "end": "3260030"
  },
  {
    "text": "gonna go in here it's gonna set our cache and test here to hello world and",
    "start": "3260030",
    "end": "3266119"
  },
  {
    "text": "then is gonna return that back and we can see that we have hello world here super simple now what happens if I say",
    "start": "3266119",
    "end": "3273080"
  },
  {
    "text": "will configure wait and do Falls here",
    "start": "3273080",
    "end": "3280900"
  },
  {
    "text": "can I see a show of hands how many of you think it's gonna be the exact same result okay couple great",
    "start": "3280900",
    "end": "3290440"
  },
  {
    "text": "I like that my questions aren't all that obvious not to leading in my questions it's",
    "start": "3291890",
    "end": "3298700"
  },
  {
    "text": "actually going to show us nothing at all the problem here is that what we're doing is that we are first setting a",
    "start": "3298700",
    "end": "3305240"
  },
  {
    "text": "value in our dictionary to something and this dictionary lives on our current",
    "start": "3305240",
    "end": "3311799"
  },
  {
    "text": "thread that we are using when we're executing this for the user so it lives in the context off the original thread",
    "start": "3311799",
    "end": "3318440"
  },
  {
    "text": "that's spawning this user request and what we're doing here saying well I don't really care which thread you use",
    "start": "3318440",
    "end": "3323930"
  },
  {
    "text": "to return back to the user so that means that all the code that this part here is",
    "start": "3323930",
    "end": "3329890"
  },
  {
    "text": "no longer running in the same context as this one up here so two different",
    "start": "3329890",
    "end": "3335299"
  },
  {
    "text": "threads which means that it no longer has access to this thread static thing",
    "start": "3335299",
    "end": "3342160"
  },
  {
    "text": "so obviously threads statics aren't really the best thing probably shouldn't use that but it also means that well you",
    "start": "3342160",
    "end": "3349400"
  },
  {
    "text": "couldn't use sessions and everything from the use of principle would probably not transfer over here either right so",
    "start": "3349400",
    "end": "3356630"
  },
  {
    "text": "that that kind of changes it a little bit so you need to think about that but what makes this even more interesting is",
    "start": "3356630",
    "end": "3363380"
  },
  {
    "text": "that configure await false is just context aware so it's it's aware of its",
    "start": "3363380",
    "end": "3370309"
  },
  {
    "text": "own context which means that if we do this here and this is interesting if I introduce a new method called public",
    "start": "3370309",
    "end": "3376460"
  },
  {
    "text": "async task run a sync let's call it one I think one just to make it more",
    "start": "3376460",
    "end": "3381529"
  },
  {
    "text": "confusing I'll just take this code here I'll pop this down here at the bottom",
    "start": "3381529",
    "end": "3387799"
  },
  {
    "text": "and then I'll do a wait run async one",
    "start": "3387799",
    "end": "3394900"
  },
  {
    "text": "now I'm going to think that I'm gonna see hello world half alright",
    "start": "3394900",
    "end": "3404410"
  },
  {
    "text": "let's see what actually happens so what",
    "start": "3404990",
    "end": "3410780"
  },
  {
    "text": "it's doing here is that it contacts the world which means that if I move configure wait somewhere else it's a",
    "start": "3410780",
    "end": "3417560"
  },
  {
    "text": "different context which means that I want to spoil it we can see hello world",
    "start": "3417560",
    "end": "3423980"
  },
  {
    "text": "here right so that means that let's say that we are at thread 1 here that means",
    "start": "3423980",
    "end": "3430730"
  },
  {
    "text": "that we are at thread 1 here as well but that also means that we are at thread 1",
    "start": "3430730",
    "end": "3438440"
  },
  {
    "text": "here and this is returning from thread 2",
    "start": "3438440",
    "end": "3443829"
  },
  {
    "text": "confused yet so this is why it's really important to think about whenever we",
    "start": "3445240",
    "end": "3451040"
  },
  {
    "text": "have a method that's using configure await false just make sure that after you don't need anything from like the",
    "start": "3451040",
    "end": "3456530"
  },
  {
    "text": "use of principal or the context of the previous operations especially if it's",
    "start": "3456530",
    "end": "3462530"
  },
  {
    "text": "static variables right everything else is the same in asp.net as we've talked",
    "start": "3462530",
    "end": "3470390"
  },
  {
    "text": "about earlier in WPF and and WinForms and console apps and so forth so one",
    "start": "3470390",
    "end": "3475940"
  },
  {
    "text": "thing that you want to do is a sink all the way and I'm just saying this because you shouldn't just break your async",
    "start": "3475940",
    "end": "3481480"
  },
  {
    "text": "chain and have like an ASIC void in the middle because that's just gonna make it really horrible it's one way to like",
    "start": "3481480",
    "end": "3487760"
  },
  {
    "text": "tear down the app and get a lot of unexpected exceptions but you know just",
    "start": "3487760",
    "end": "3492830"
  },
  {
    "text": "do a sync all the way and if yours don't have anything in your continuation just return the task that's referencing that",
    "start": "3492830",
    "end": "3498710"
  },
  {
    "text": "ongoing work instead instead of introducing a sink and a weight in that particular method and remember that",
    "start": "3498710",
    "end": "3504500"
  },
  {
    "text": "asp.net makes it easy for us to use async in a weight as well but if we apply just configure way to everything",
    "start": "3504500",
    "end": "3511099"
  },
  {
    "text": "it's gonna be hard right so if you want to sit down at your own time I've got a",
    "start": "3511099",
    "end": "3517609"
  },
  {
    "text": "plural set course and if you want a free trial for that just hit me up on Twitter and I'll figure that out as well and",
    "start": "3517609",
    "end": "3524359"
  },
  {
    "text": "remember take a picture ping me on Twitter and I'll give you a free book nothing's ever free so please put a",
    "start": "3524359",
    "end": "3530720"
  },
  {
    "text": "green thing in the box there I'm gonna stand there and look at you if you didn't you won't get the book I'm just joking so just to wrap this up a sink in",
    "start": "3530720",
    "end": "3538220"
  },
  {
    "text": "a weight is really good it makes it easier for us to build asynchronous applications and even",
    "start": "3538220",
    "end": "3543619"
  },
  {
    "text": "if we go back to the basics there's always something that you know makes us think about what's really going on under",
    "start": "3543619",
    "end": "3549320"
  },
  {
    "text": "the hoods here now hopefully you you'll have a better understanding of how not to get a deadlock and what's really happening",
    "start": "3549320",
    "end": "3555290"
  },
  {
    "text": "when we introduce these keywords so thank you so much I'm Philip Ekberg please hit me up on Twitter if you have",
    "start": "3555290",
    "end": "3561109"
  },
  {
    "text": "any questions [Applause]",
    "start": "3561109",
    "end": "3565989"
  }
]