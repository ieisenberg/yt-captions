[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "well good morning everyone I think I'll see if I do that so welcome to Zen and the Art of code",
    "start": "1199",
    "end": "8280"
  },
  {
    "text": "lifecycle maintenance I'm Phil Nash one of the two film issues here this week actually uh make it extra",
    "start": "8280",
    "end": "14759"
  },
  {
    "text": "confusing we both work at sonar you can meet us both on the on the booth we have down on the floor",
    "start": "14759",
    "end": "20160"
  },
  {
    "text": "uh if you want to reach me um I'm Phil underscore Nash on Twitter the other one is just Phil Nash on",
    "start": "20160",
    "end": "25500"
  },
  {
    "text": "Twitter so make sure you get the right one um if Twitter's not running often not these days I'm also a master",
    "start": "25500",
    "end": "32160"
  },
  {
    "text": "done so all my my details are up there about this title now for those of you",
    "start": "32160",
    "end": "38219"
  },
  {
    "text": "that don't read abstracts for talks or or books in fact",
    "start": "38219",
    "end": "43559"
  },
  {
    "text": "this is based on the title of a book then in the Art of Motorcycle Maintenance",
    "start": "43559",
    "end": "50460"
  },
  {
    "text": "and if you have read the book actually show offense who's read the book",
    "start": "50460",
    "end": "55739"
  },
  {
    "text": "so yeah three or four people well if you ever read the book you know that it's not particularly about Zen or Motorcycle",
    "start": "55739",
    "end": "61379"
  },
  {
    "text": "Maintenance although both of them do feature from time to time and this book's no different",
    "start": "61379",
    "end": "67920"
  },
  {
    "text": "what the book is about is quality and trying to Define quality and that's",
    "start": "67920",
    "end": "74760"
  },
  {
    "text": "sort of what this talk is about as well but in our case it's software quality you won't be surprised to hear",
    "start": "74760",
    "end": "81299"
  },
  {
    "text": "what do we mean by that well that's going to be a subject we're going to address early on but before we get to that",
    "start": "81299",
    "end": "88439"
  },
  {
    "text": "a little bit more about myself I've done lots of talks over the years",
    "start": "88439",
    "end": "93479"
  },
  {
    "start": "90000",
    "end": "126000"
  },
  {
    "text": "in different domains and I should keep track of them on my website they actually go back to 2004.",
    "start": "93479",
    "end": "99540"
  },
  {
    "text": "but I've counted them up recently and uh apparently since 2015",
    "start": "99540",
    "end": "104700"
  },
  {
    "text": "I've done 120 talks and in fact that was a couple of years ago I took",
    "start": "104700",
    "end": "111180"
  },
  {
    "text": "that and uh I think it's closer to 140 now far too many talks so I've covered lots of different subjects and what I",
    "start": "111180",
    "end": "118500"
  },
  {
    "text": "found was many of them actually related to software quality it's been a clean interest of mine over the years",
    "start": "118500",
    "end": "126439"
  },
  {
    "text": "and I sort of broadly categorize him into these four buckets lots of talks about testing",
    "start": "126600",
    "end": "132660"
  },
  {
    "text": "a few talks about functional programming some talks about error handling and some talks about Simplicity and some of those",
    "start": "132660",
    "end": "139500"
  },
  {
    "text": "I've done at NDC conferences before as well but even between those four there was a",
    "start": "139500",
    "end": "145560"
  },
  {
    "text": "Common Thread and that Fred well we've already said it if the software quality in general",
    "start": "145560",
    "end": "154400"
  },
  {
    "text": "so let's come back to that that question then what actually is software quality",
    "start": "154680",
    "end": "160260"
  },
  {
    "text": "in in the book uh that that's the whole subject of the book what is quality and how it's uh",
    "start": "160260",
    "end": "165720"
  },
  {
    "text": "pretty much impossible to really Define it can we do better with software quality",
    "start": "165720",
    "end": "171780"
  },
  {
    "text": "well there's a Blog poster a couple of years ago now um on the the shape of code which is um",
    "start": "171780",
    "end": "177599"
  },
  {
    "text": "a Blog sort of dedicated to evidence-based software engineering so it's quite a quite a good one to follow",
    "start": "177599",
    "end": "183599"
  },
  {
    "text": "and that the title was the aura of software equality and here he takes on that same question",
    "start": "183599",
    "end": "191760"
  },
  {
    "text": "the conclusion in this uh in this article um well actually before we get to the",
    "start": "191760",
    "end": "197159"
  },
  {
    "text": "conclusion that this comment was quite interesting uh it says people in Industry are very",
    "start": "197159",
    "end": "202560"
  },
  {
    "text": "interested in software quality and sometimes they have the confusing experience of talking to me about it",
    "start": "202560",
    "end": "209159"
  },
  {
    "text": "so it might be give you a little hint as to what the author thinks about software quality",
    "start": "209159",
    "end": "215819"
  },
  {
    "text": "um it goes on to say software quality is a meaningless marketing term",
    "start": "215819",
    "end": "221040"
  },
  {
    "text": "and I can understand why he he draws that conclusion I don't entirely agree with it but there is some",
    "start": "221040",
    "end": "227700"
  },
  {
    "text": "substance there and but the problem is about that defining what software quality is and that the problem that the um the",
    "start": "227700",
    "end": "235260"
  },
  {
    "text": "book has is that you know we we know it when we see it",
    "start": "235260",
    "end": "241019"
  },
  {
    "text": "you say yeah that's that's got quality but we can't Define what it is it's very difficult",
    "start": "241019",
    "end": "247980"
  },
  {
    "start": "247000",
    "end": "372000"
  },
  {
    "text": "so uh here is the book um as I say the this book tries to Define quality and ends up splitting it",
    "start": "247980",
    "end": "254700"
  },
  {
    "text": "into two types of quality what of course classical and romantic quality more about the the how things work",
    "start": "254700",
    "end": "260820"
  },
  {
    "text": "versus the how things look or how they're used and we know we have that in software as well",
    "start": "260820",
    "end": "266400"
  },
  {
    "text": "I actually found that the the follow-up book Which is less well known called Lila was even more interesting",
    "start": "266400",
    "end": "273240"
  },
  {
    "text": "and there he splits it into static and dynamic quality",
    "start": "273240",
    "end": "278759"
  },
  {
    "text": "which are you know terms that we use a lot in software as well but the specific meaning in that book is that um",
    "start": "278759",
    "end": "285380"
  },
  {
    "text": "static quality is a quality that's always there it's apparently it's the whole thing whereas",
    "start": "285380",
    "end": "291000"
  },
  {
    "text": "Dynamic quality is more about sort of the Leading Edge of reality things as they happen in the moment",
    "start": "291000",
    "end": "296940"
  },
  {
    "text": "so you're here watching me uh talk now there'll be people watching this on video later",
    "start": "296940",
    "end": "303000"
  },
  {
    "text": "so you're experiencing the dynamic quality and people later experience a static quality and it's the same event",
    "start": "303000",
    "end": "309840"
  },
  {
    "text": "it's quite an interesting way of looking at it that's not really what we're going to be talking about today",
    "start": "309840",
    "end": "315840"
  },
  {
    "text": "so let's try and find some better examples of definitions of software quality so you might turn to Wikipedia",
    "start": "315840",
    "end": "322979"
  },
  {
    "text": "I know there's a whole page on software quality on Wikipedia lots of quotes from for different industry experts",
    "start": "322979",
    "end": "329639"
  },
  {
    "text": "mostly systems theorists it turns out have things to say about software quality I picked out a few Choice",
    "start": "329639",
    "end": "334979"
  },
  {
    "text": "approach here I'm not going to go through them all but there's just one I wanted to draw attention to at the",
    "start": "334979",
    "end": "340919"
  },
  {
    "text": "bottom I really like this one I think guests are like the vagueness of it all quality is value to some person",
    "start": "340919",
    "end": "347940"
  },
  {
    "text": "it's not a bad definition as it goes if you go with this you won't go too far wrong",
    "start": "347940",
    "end": "352979"
  },
  {
    "text": "I didn't find it quite satisfying enough though so we all have our own ideas of what",
    "start": "352979",
    "end": "358320"
  },
  {
    "text": "constitutes software quality and that's really the problem be nice",
    "start": "358320",
    "end": "363780"
  },
  {
    "text": "if there's just some standardized definition of what software quality is that we could all measure against",
    "start": "363780",
    "end": "369539"
  },
  {
    "text": "that'll be great well it turns out that there is an attempt to do this",
    "start": "369539",
    "end": "374580"
  },
  {
    "start": "372000",
    "end": "579000"
  },
  {
    "text": "there is the Consortium for information and software quality cisq it's a whole",
    "start": "374580",
    "end": "379919"
  },
  {
    "text": "website you can go look it up and they have a definition of what they think software quality is so let's have",
    "start": "379919",
    "end": "385680"
  },
  {
    "text": "a look at that actually they like them in the book they divide it into two things first",
    "start": "385680",
    "end": "391199"
  },
  {
    "text": "one of them is more about how things actually apply to the the problem but then it talks about structural",
    "start": "391199",
    "end": "397560"
  },
  {
    "text": "quality this is usually what we're thinking about when we're talking about software quality in our code",
    "start": "397560",
    "end": "404759"
  },
  {
    "text": "so it says software quality refers to the software's security reliability",
    "start": "404759",
    "end": "411120"
  },
  {
    "text": "performance efficiency and maintainability it's a nice list we like lists we can",
    "start": "411120",
    "end": "417300"
  },
  {
    "text": "get heads around those let's let's pull that out now before I actually looked this up",
    "start": "417300",
    "end": "422580"
  },
  {
    "text": "when I was first preparing this material iPhone list in mind I'm going to put that up and see how it compares",
    "start": "422580",
    "end": "428580"
  },
  {
    "text": "so these were four other things from my list um now correctness and security are",
    "start": "428580",
    "end": "434699"
  },
  {
    "text": "certainly not the same thing but there's enough of an overlap that I'm going to say well that's that does correspond to some degree",
    "start": "434699",
    "end": "441960"
  },
  {
    "text": "um doesn't really get to the aspect of safety so much but um that's that's a whole other talk",
    "start": "441960",
    "end": "447960"
  },
  {
    "text": "reliability okay we've both got that I like the way they got performance efficiency I have performance slash",
    "start": "447960",
    "end": "454440"
  },
  {
    "text": "efficiency I think that's a pass and they've got maintainability and I",
    "start": "454440",
    "end": "460800"
  },
  {
    "text": "slid it into malleability and evolvability you know how you can change things for the current design and how",
    "start": "460800",
    "end": "467220"
  },
  {
    "text": "you can evolve it to New Designs over time well they're all part of maintainability and maybe maintainability is the better",
    "start": "467220",
    "end": "472680"
  },
  {
    "text": "word so hopefully those things are all non-controversial add a couple more though",
    "start": "472680",
    "end": "480180"
  },
  {
    "text": "so one that I I think is also really important is reasonability and probably they think of that as part",
    "start": "480180",
    "end": "486780"
  },
  {
    "text": "of maintainability but I think it stands on its own in fact it it runs through all of the others and also stands on its own in its own",
    "start": "486780",
    "end": "493500"
  },
  {
    "text": "right the ability to reason about code how quickly you can understand and comprehend it especially blocks of code",
    "start": "493500",
    "end": "500580"
  },
  {
    "text": "and isolation we often hear the term local reasoning ability to read it about it without",
    "start": "500580",
    "end": "505860"
  },
  {
    "text": "having to consider everything else so that that one for me is a separate Point as well",
    "start": "505860",
    "end": "511919"
  },
  {
    "text": "and the other one I had was applicability I'd say that that one corresponds to the other branch of",
    "start": "511919",
    "end": "517620"
  },
  {
    "text": "quality that uh csq defines straight away so they did get that as well so I",
    "start": "517620",
    "end": "522779"
  },
  {
    "text": "was quite happy with how well this corresponded I think we're on to something here so I'm going to stick with my list",
    "start": "522779",
    "end": "528480"
  },
  {
    "text": "and now we have a list whenever you have a list it's tempting and sometimes valuable",
    "start": "528480",
    "end": "533700"
  },
  {
    "text": "to take the first letters and see if we can make an acronym and help them so you can have a a name that you can",
    "start": "533700",
    "end": "540240"
  },
  {
    "text": "you can refer to them all by unfortunately with these letters that the best I could come up with was um",
    "start": "540240",
    "end": "547380"
  },
  {
    "text": "you arranging this way you get Mr Crap which wasn't particularly compelling so um",
    "start": "547380",
    "end": "554220"
  },
  {
    "text": "I had another go and and those ones with the slashes in I thought we take the second words",
    "start": "554220",
    "end": "559740"
  },
  {
    "text": "evolvability and efficiency and then mix those up a bit let me get career",
    "start": "559740",
    "end": "566459"
  },
  {
    "text": "at least that's that English word that we can get our heads around um I haven't I don't really think of myself as a career programmer but um",
    "start": "566459",
    "end": "573120"
  },
  {
    "text": "yeah it works it works so here you go the career principles that's what we're going to talk about",
    "start": "573120",
    "end": "579420"
  },
  {
    "start": "579000",
    "end": "756000"
  },
  {
    "text": "whatever you call them these are the the six software quality principles that um I spent a lot of my",
    "start": "579420",
    "end": "586320"
  },
  {
    "text": "speaking career talking about and I've done many talks on on various",
    "start": "586320",
    "end": "591480"
  },
  {
    "text": "of these bubbles today I'm going to do something slightly different I'm going to talk about some of the",
    "start": "591480",
    "end": "597240"
  },
  {
    "text": "intersections where these overlap where their attentions trade-offs or",
    "start": "597240",
    "end": "602399"
  },
  {
    "text": "where they work together to give you something even more or whether they even have a a life of Their Own",
    "start": "602399",
    "end": "608700"
  },
  {
    "text": "I found that really useful and not something that we often discuss so much",
    "start": "608700",
    "end": "613740"
  },
  {
    "text": "so we're going to take a look at a few of these and I'm going to start with the intersection",
    "start": "613740",
    "end": "619440"
  },
  {
    "text": "of applicability and correctness now we sometimes talk about this in",
    "start": "619440",
    "end": "626519"
  },
  {
    "text": "terms of doing the right thing versus doing the thing right",
    "start": "626519",
    "end": "631860"
  },
  {
    "text": "and these aren't intention except we have to decide on the order we're going to approach these",
    "start": "631860",
    "end": "638339"
  },
  {
    "text": "do we do the right thing and then do the the thing right or the other way around",
    "start": "638339",
    "end": "644160"
  },
  {
    "text": "and we usually say this is the correct way to do it do the right thing first and then do it right",
    "start": "644160",
    "end": "649800"
  },
  {
    "text": "been do it more correctly and you've probably heard this quote well we usually quote from uh from",
    "start": "649800",
    "end": "656459"
  },
  {
    "text": "Russell acoff one of those systems tourists we talked about earlier he says it's better to do the right thing wrong",
    "start": "656459",
    "end": "661860"
  },
  {
    "text": "than the wrong thing right and the full quote you may be familiar",
    "start": "661860",
    "end": "666959"
  },
  {
    "text": "with the writer would do the wrong thing the wronger we become when we make a mistake doing the wrong",
    "start": "666959",
    "end": "673440"
  },
  {
    "text": "thing I correct it we become wronger when we make a mistake doing the right thing and correct it we become writer",
    "start": "673440",
    "end": "680040"
  },
  {
    "text": "therefore it's better to do the right thing wrong than the wrong thing right",
    "start": "680040",
    "end": "686220"
  },
  {
    "text": "which makes sense it sounds sounds good we've been quoting this for years and almost not not",
    "start": "686220",
    "end": "693180"
  },
  {
    "text": "questioning it but actually he goes on and you're not going to hear this quote very often",
    "start": "693180",
    "end": "699540"
  },
  {
    "text": "for good reason this is very significant because almost every problem confronting our society",
    "start": "699540",
    "end": "706440"
  },
  {
    "text": "is a result of the fact that our public policy makers are doing the wrong things and are trying to make them writer",
    "start": "706440",
    "end": "713519"
  },
  {
    "text": "doesn't sound like software quality at all he was talking about Society politics that sort of thing",
    "start": "713519",
    "end": "721500"
  },
  {
    "text": "his assistant's theorist not a software the quality theorist and sometimes these",
    "start": "721500",
    "end": "727079"
  },
  {
    "text": "things transfer between systems domains and sometimes they don't can automatically apply them does this actually apply to software quality at",
    "start": "727079",
    "end": "733620"
  },
  {
    "text": "all we've been saying that it does for decades one person to challenge that",
    "start": "733620",
    "end": "740459"
  },
  {
    "text": "is Alan Kelly someone I know from the uh the agile Community it did a talk a few",
    "start": "740459",
    "end": "747120"
  },
  {
    "text": "years ago now flipping out on its head it says do it right and then do the right thing",
    "start": "747120",
    "end": "753920"
  },
  {
    "start": "756000",
    "end": "994000"
  },
  {
    "text": "and the centerpiece of his talk is is this slide this really captures the",
    "start": "756959",
    "end": "762180"
  },
  {
    "text": "essence of it you call it the alignment trap and this is based on real data there's a study that's cited down the",
    "start": "762180",
    "end": "767760"
  },
  {
    "text": "side it draws all the data from but it takes out two key metrics from",
    "start": "767760",
    "end": "772920"
  },
  {
    "text": "this data spread across many organizations they're I.T spending",
    "start": "772920",
    "end": "779160"
  },
  {
    "text": "and their their sales growth projected over three years only positive in this quadrant diagram",
    "start": "779160",
    "end": "786899"
  },
  {
    "text": "obviously simplified a bit and so you have the the axis the doing things right access from less",
    "start": "786899",
    "end": "793019"
  },
  {
    "text": "effective to more effective and then up the side doing the right things is less aligned",
    "start": "793019",
    "end": "799320"
  },
  {
    "text": "with the business interest and more aligned now clearly we want to be in that top right yellow quadrant",
    "start": "799320",
    "end": "806040"
  },
  {
    "text": "the it enabled growth but um predictably only seven percent of",
    "start": "806040",
    "end": "811560"
  },
  {
    "text": "companies are so the minority in in the data but they have low I.T spending actually",
    "start": "811560",
    "end": "817200"
  },
  {
    "text": "negative minus six percent so it's going down over time uh but very high sales growth 35 there",
    "start": "817200",
    "end": "825480"
  },
  {
    "text": "so yeah no surprises that's the best one to be in great also no surprise most companies end up",
    "start": "825480",
    "end": "831779"
  },
  {
    "text": "in the maintenance Zone the bottom left so 74 average I.T spending",
    "start": "831779",
    "end": "838800"
  },
  {
    "text": "uh low sales growth is actually going down so yeah not not ideal",
    "start": "838800",
    "end": "844860"
  },
  {
    "text": "but most companies end up there what is more surprising of the other two",
    "start": "844860",
    "end": "851220"
  },
  {
    "text": "in particular the one that's called the alignment trap so this is more aligned but less",
    "start": "851220",
    "end": "857760"
  },
  {
    "text": "effective I.E following akov's advice and he says well they've got actually",
    "start": "857760",
    "end": "863880"
  },
  {
    "text": "quite High it spending in fact the highest of all of these um these quadrants on average",
    "start": "863880",
    "end": "870959"
  },
  {
    "text": "very low sales growth the lowest this is actually the worst quadrant to be in",
    "start": "870959",
    "end": "876600"
  },
  {
    "text": "surprisingly even worse than the maintenance Zone in many ways and the other thing that Adam talks",
    "start": "876600",
    "end": "881880"
  },
  {
    "text": "about is how hard it is to move from that left-hand side",
    "start": "881880",
    "end": "887880"
  },
  {
    "text": "of the graph to the right hand side because you're doing things the wrong way you don't you don't have the agile",
    "start": "887880",
    "end": "893220"
  },
  {
    "text": "mindset that enables you to to move easily so you're trapped there the alignment trap",
    "start": "893220",
    "end": "900540"
  },
  {
    "text": "whereas while old I.T the uh bottom right",
    "start": "900540",
    "end": "906899"
  },
  {
    "text": "give them to reverse it very low spending decent sales growth only a third of",
    "start": "906899",
    "end": "915180"
  },
  {
    "text": "the it Noble growth but but still the second best in the on the board it's actually a pretty good place to be",
    "start": "915180",
    "end": "922560"
  },
  {
    "text": "doing things doing the wrong things but doing them very well and easier to move up",
    "start": "922560",
    "end": "928920"
  },
  {
    "text": "this is where we want to start now I haven't gone back and checked",
    "start": "928920",
    "end": "934139"
  },
  {
    "text": "Alan's figures I haven't checked that study to make sure this actually Bears it out um and he actually said in his talk",
    "start": "934139",
    "end": "941699"
  },
  {
    "text": "uh that he was surprised by these findings he wasn't quite sure if this really held whether it was just an",
    "start": "941699",
    "end": "947639"
  },
  {
    "text": "anomaly of the data or something so he presented it as well this is a",
    "start": "947639",
    "end": "953579"
  },
  {
    "text": "these are my findings anybody got any data to prove me wrong let me know and that was some years ago",
    "start": "953579",
    "end": "959880"
  },
  {
    "text": "now so I asked him just recently what do you think about it now and he said in the years in between",
    "start": "959880",
    "end": "965339"
  },
  {
    "text": "everything that he's seen has strengthened his conviction that this is the case but it's better to do the right thing",
    "start": "965339",
    "end": "971220"
  },
  {
    "text": "wrong sorry the wrong thing right than the right thing wrong the opposite of what we usually taught",
    "start": "971220",
    "end": "978060"
  },
  {
    "text": "there's a lot more to the talk so I encourage you to go and watch it oh by the way at the end I'll give you a single URL with all the references to",
    "start": "978060",
    "end": "984660"
  },
  {
    "text": "all of these other talks and links and things um so don't worry about making notes now",
    "start": "984660",
    "end": "990420"
  },
  {
    "text": "do encourage you to watch the rest of the talk it's very interesting that's what I wanted to talk about",
    "start": "990420",
    "end": "995820"
  },
  {
    "start": "994000",
    "end": "1005000"
  },
  {
    "text": "for the moment with the intersection between correctness and applicability quite surprising",
    "start": "995820",
    "end": "1002079"
  },
  {
    "text": "so let's change gears a little bit look at another another two I can look a bit closer to the code now",
    "start": "1002300",
    "end": "1008180"
  },
  {
    "start": "1005000",
    "end": "1017000"
  },
  {
    "text": "with correctness and reliability now the the union of these two",
    "start": "1008180",
    "end": "1015800"
  },
  {
    "text": "really is mostly the domain of what might call code coverage and if you've used a code coverage tool",
    "start": "1015800",
    "end": "1023300"
  },
  {
    "start": "1017000",
    "end": "1033000"
  },
  {
    "text": "before you know that this is the amount of your uh your code that's covered by tests usually",
    "start": "1023300",
    "end": "1030558"
  },
  {
    "text": "um but it really breaks down into a line or statement coverage",
    "start": "1030559",
    "end": "1036500"
  },
  {
    "start": "1033000",
    "end": "1074000"
  },
  {
    "text": "which is nice it gives you something to measure but it doesn't actually tell you how much of the code is really covered",
    "start": "1036500",
    "end": "1043040"
  },
  {
    "text": "we really need to consider Branch coverage or I like to call it data coverage because from the outside that's",
    "start": "1043040",
    "end": "1048740"
  },
  {
    "text": "what we're really concerned about what values can we pass into these things and it's not really any tool that's",
    "start": "1048740",
    "end": "1054980"
  },
  {
    "text": "going to tell us that it's uh it's a pretty intractable problem beyond anything non-trivial or anything trivial should I say",
    "start": "1054980",
    "end": "1062059"
  },
  {
    "text": "so we have to sort of lead that to a bit of guesswork list in terms of measuring but there are",
    "start": "1062059",
    "end": "1067940"
  },
  {
    "text": "things we can do to improve our Branch coverage the different types of testing",
    "start": "1067940",
    "end": "1075279"
  },
  {
    "start": "1074000",
    "end": "1130000"
  },
  {
    "text": "so one thing that you should look at if you haven't already is property-based testing",
    "start": "1075320",
    "end": "1081500"
  },
  {
    "text": "property-based testing if you don't know it looks very much like unit testing but rather than testing specific examples of",
    "start": "1081500",
    "end": "1087260"
  },
  {
    "text": "things you're testing for properties that always hold and then you can throw large amounts of data at it often",
    "start": "1087260",
    "end": "1092360"
  },
  {
    "text": "randomly generated and just see if these properties always hold and over time you will eventually cover",
    "start": "1092360",
    "end": "1098120"
  },
  {
    "text": "more and more of the the domain of values",
    "start": "1098120",
    "end": "1103520"
  },
  {
    "text": "so it's a really useful way to augment your your unit testing caching all the things you didn't",
    "start": "1103520",
    "end": "1109220"
  },
  {
    "text": "actually think of so if you haven't tried property-based testing already I'd encourage you to do so there are Frameworks dedicated to it",
    "start": "1109220",
    "end": "1115400"
  },
  {
    "text": "there's extra features that they have but even in your unit test Frameworks there are usually facilities for generating data that you can use the",
    "start": "1115400",
    "end": "1122419"
  },
  {
    "text": "same way but you need to think about how you define properties first I'm not going to go into that in a lot of detail today",
    "start": "1122419",
    "end": "1129860"
  },
  {
    "text": "similarly but a little bit high level fast testing this is more of the like System test or",
    "start": "1129860",
    "end": "1136100"
  },
  {
    "start": "1130000",
    "end": "1154000"
  },
  {
    "text": "acceptance test level but a similar principle you're you're pushing data in",
    "start": "1136100",
    "end": "1141140"
  },
  {
    "text": "seeing how things behave whether properties hold whether it crashes whether it's vulnerable it's often used",
    "start": "1141140",
    "end": "1147140"
  },
  {
    "text": "for testing for vulnerabilities so again if you're working at that level I encourage you to check out fuzz",
    "start": "1147140",
    "end": "1152600"
  },
  {
    "text": "testing manual testing as developers we're",
    "start": "1152600",
    "end": "1159679"
  },
  {
    "start": "1154000",
    "end": "1192000"
  },
  {
    "text": "so much focused on how things are implemented how they should be designed that we don't have that um that mindset",
    "start": "1159679",
    "end": "1166880"
  },
  {
    "text": "for breaking things so much that manual testers are really skilled at so yeah we haven't automated the manual",
    "start": "1166880",
    "end": "1174080"
  },
  {
    "text": "test of the way yet uh maybe chat GPT will get there at some point but for now",
    "start": "1174080",
    "end": "1179240"
  },
  {
    "text": "there's still a role for manual testing don't roll that out so this should all help us to find those things that we",
    "start": "1179240",
    "end": "1184760"
  },
  {
    "text": "haven't found using our more targeted unit testing do make use of them",
    "start": "1184760",
    "end": "1192020"
  },
  {
    "start": "1192000",
    "end": "1320000"
  },
  {
    "text": "so that's code coverage but there's a particular part of our",
    "start": "1192020",
    "end": "1198740"
  },
  {
    "text": "code bases that I think doesn't get enough attention most of the time and they're often out they're hidden paths",
    "start": "1198740",
    "end": "1203900"
  },
  {
    "text": "through the code and up there are the error paths and particularly where we have",
    "start": "1203900",
    "end": "1209840"
  },
  {
    "text": "exceptions and we can start talking about language features in a minute and I'm going to mostly talk about um C",
    "start": "1209840",
    "end": "1215900"
  },
  {
    "text": "sharp today originally I did this in the context for C plus one of a bit of that as well later but",
    "start": "1215900",
    "end": "1222980"
  },
  {
    "text": "most of the ideas are generalized pretty well but there are some differences so",
    "start": "1222980",
    "end": "1229940"
  },
  {
    "text": "there's two types of error paths there are what I like to call i o errors and some people call them",
    "start": "1229940",
    "end": "1235760"
  },
  {
    "text": "disappointments these are the predictable errors well they're not what you wanted to happen but we know they can happen but we'll be",
    "start": "1235760",
    "end": "1242840"
  },
  {
    "text": "disappointed if they do you know I try to open this file but I couldn't I was disappointed I'm gonna do",
    "start": "1242840",
    "end": "1248960"
  },
  {
    "text": "something else instead that sort of thing so it's more like a control flow style of error handling",
    "start": "1248960",
    "end": "1254780"
  },
  {
    "text": "I want to do this but if not I can do that instead and then the other type of errors",
    "start": "1254780",
    "end": "1261200"
  },
  {
    "text": "we'll often call them logic errors or sometimes just bugs we expect the system to be in this state",
    "start": "1261200",
    "end": "1267860"
  },
  {
    "text": "everything's fine if it is but if not then I don't know what's happened but it's a logic error all bets are off and",
    "start": "1267860",
    "end": "1275240"
  },
  {
    "text": "some languages that gets more serious than others as I originally did this in the context of C plus where if you get",
    "start": "1275240",
    "end": "1281960"
  },
  {
    "text": "into that state they start to query what's happened before you know like this time travel effect",
    "start": "1281960",
    "end": "1287480"
  },
  {
    "text": "it gets very weird but in any language it's a bad situation to be in",
    "start": "1287480",
    "end": "1293360"
  },
  {
    "text": "they'll put slash contracts here contracts from the general term because this is how we we tend to Define things",
    "start": "1293360",
    "end": "1299780"
  },
  {
    "text": "we have an interface so we say well these are the valid values that um I",
    "start": "1299780",
    "end": "1305480"
  },
  {
    "text": "have functionality for outside of these values I'm not giving any guarantees that's a contract and there may be",
    "start": "1305480",
    "end": "1311059"
  },
  {
    "text": "language features to support that that may not depending on the language let's dig into these two a little bit",
    "start": "1311059",
    "end": "1317240"
  },
  {
    "text": "more so I think it's this is a really interesting area so first of all let's start with a",
    "start": "1317240",
    "end": "1322760"
  },
  {
    "start": "1320000",
    "end": "1476000"
  },
  {
    "text": "simple example say this is these are c-sharp examples I should also say I translated this from",
    "start": "1322760",
    "end": "1328580"
  },
  {
    "text": "my original C plus plus examples uh for this version of the talk and I haven't done day to day C sharp for a number of",
    "start": "1328580",
    "end": "1334159"
  },
  {
    "text": "years so I'm not going to guarantee there's the best ways to do things but",
    "start": "1334159",
    "end": "1339200"
  },
  {
    "text": "here's a simple example to convert a string to an integer I'm going to use in dot tripods here it's obviously not",
    "start": "1339200",
    "end": "1345799"
  },
  {
    "text": "quite how you do it there's some bits missing don't worry about that for now the point is this this will this should",
    "start": "1345799",
    "end": "1351919"
  },
  {
    "text": "work as long as the string you pass in actually has an integer in it if we passed in a string that didn't",
    "start": "1351919",
    "end": "1359299"
  },
  {
    "text": "what would we expect to get now my reading of the things is that I",
    "start": "1359299",
    "end": "1365120"
  },
  {
    "text": "think it's guaranteed to be zero I should get a default value there but there were conflicting places that said",
    "start": "1365120",
    "end": "1371000"
  },
  {
    "text": "it's undefined or implementation defined or it's always defined I don't know the point is we shouldn't be in that",
    "start": "1371000",
    "end": "1376520"
  },
  {
    "text": "situation this is not how we want to do our error handling even if it's defined it's not",
    "start": "1376520",
    "end": "1383000"
  },
  {
    "text": "very helpful we can't distinguish it from an actual zero",
    "start": "1383000",
    "end": "1388700"
  },
  {
    "text": "so of course we don't do it this way silly example but bear with me",
    "start": "1388700",
    "end": "1393980"
  },
  {
    "text": "we'll you do something like this because tripath returns to return to Boolean we",
    "start": "1393980",
    "end": "1399320"
  },
  {
    "text": "can test that and maybe we're on a foreign exception instead so now we converted it to a different",
    "start": "1399320",
    "end": "1405140"
  },
  {
    "text": "type of disappointment it's still a disappointment but now we're using exceptions for it instead",
    "start": "1405140",
    "end": "1410720"
  },
  {
    "text": "and now we can distinguish the error path from the the happy path great",
    "start": "1410720",
    "end": "1416780"
  },
  {
    "text": "so if it fails now we get an exception tells us a bit more I'm not telling you anything new here",
    "start": "1416780",
    "end": "1424419"
  },
  {
    "text": "um I probably wouldn't use exceptions for something like converting a string to an integer though",
    "start": "1425000",
    "end": "1431419"
  },
  {
    "text": "obviously we could just use in dot tripath directly I don't particularly like out parameters so I'm still",
    "start": "1431419",
    "end": "1436880"
  },
  {
    "text": "inclined to wrap it so I might use a nullable type",
    "start": "1436880",
    "end": "1441919"
  },
  {
    "text": "in other languages maybe an optional so now we can return null instead",
    "start": "1441919",
    "end": "1447740"
  },
  {
    "text": "and if that fails this is what it prints nothing so we'll probably",
    "start": "1447740",
    "end": "1454760"
  },
  {
    "text": "put that in an if if statement and now if you have a value we can print",
    "start": "1454760",
    "end": "1460280"
  },
  {
    "text": "it otherwise if we do something else control flow that's what we want to do with disappointments",
    "start": "1460280",
    "end": "1467960"
  },
  {
    "text": "and again if we now print that we get something a bit more helpful",
    "start": "1467960",
    "end": "1473360"
  },
  {
    "text": "so there are a number of ways that we can do these things some c-sharp methods here",
    "start": "1473360",
    "end": "1479059"
  },
  {
    "start": "1476000",
    "end": "1500000"
  },
  {
    "text": "exceptions out parameters nullable types um we don't have first party result type",
    "start": "1479059",
    "end": "1484640"
  },
  {
    "text": "yet as far as I know as far as I plan to find uh has been talked about but you can get third party ones or write your",
    "start": "1484640",
    "end": "1490640"
  },
  {
    "text": "own so this is a type that will contain either the value you wanted or a value that tells you what the error was",
    "start": "1490640",
    "end": "1496460"
  },
  {
    "text": "instead so it's like a mix of your the other ones or more generally",
    "start": "1496460",
    "end": "1502400"
  },
  {
    "start": "1500000",
    "end": "1560000"
  },
  {
    "text": "um I know there's been a lot of talk over the years about discriminated unions maybe they'll make it into C sharp at",
    "start": "1502400",
    "end": "1508940"
  },
  {
    "text": "some point other languages already have them more General way of doing result types",
    "start": "1508940",
    "end": "1514700"
  },
  {
    "text": "um there's a lot that we could talk about here and I have done in the The Talk",
    "start": "1514700",
    "end": "1520820"
  },
  {
    "text": "mentioned here the optional it's not a failure I've done that talk in the context of C",
    "start": "1520820",
    "end": "1525980"
  },
  {
    "text": "plus plus and also Swift but the C plus plus one in particular there's a whole section in there where I",
    "start": "1525980",
    "end": "1531919"
  },
  {
    "text": "I weigh up all the different types of error handling techniques all the costs and trade-offs and give them a scorecard",
    "start": "1531919",
    "end": "1538159"
  },
  {
    "text": "and see how they all Stack Up um and then at the end present a",
    "start": "1538159",
    "end": "1543679"
  },
  {
    "text": "possible optimal way of doing it which we already have in some languages like Swift for example not in C plus plus not",
    "start": "1543679",
    "end": "1550580"
  },
  {
    "text": "in C sharp so if you're interested watch that talk",
    "start": "1550580",
    "end": "1555740"
  },
  {
    "text": "so that's all I'm going to talk about for the disappointments for the moment I want to dig into a little bit more on",
    "start": "1555740",
    "end": "1562580"
  },
  {
    "start": "1560000",
    "end": "1805000"
  },
  {
    "text": "the other branch the logic errors",
    "start": "1562580",
    "end": "1566799"
  },
  {
    "text": "so let's use a different example this time converting an integer to a",
    "start": "1568039",
    "end": "1573380"
  },
  {
    "text": "string but hopefully you can get an idea from the name month for string that there's",
    "start": "1573380",
    "end": "1578900"
  },
  {
    "text": "probably a specific range of values of this integer that this function or method is valid",
    "start": "1578900",
    "end": "1585559"
  },
  {
    "text": "for is it zero to eleven one to twelve well that depends you've got a document that",
    "start": "1585559",
    "end": "1591440"
  },
  {
    "text": "somewhere but we'll start with here this",
    "start": "1591440",
    "end": "1596779"
  },
  {
    "text": "the function can actually take the whole range of an integer which prefer to a bit integer it's going",
    "start": "1596779",
    "end": "1603740"
  },
  {
    "text": "to be like minus two billion to positive two billion approximately but the domain",
    "start": "1603740",
    "end": "1609679"
  },
  {
    "text": "which is the valid range of values that this function has defined behavior for",
    "start": "1609679",
    "end": "1616279"
  },
  {
    "text": "as a much narrower range probably one to twelve",
    "start": "1616279",
    "end": "1622419"
  },
  {
    "text": "okay we're familiar with this but this is really more often than not when we talk about contracts we're talking about this",
    "start": "1623000",
    "end": "1629720"
  },
  {
    "text": "difference between a values range in its domain",
    "start": "1629720",
    "end": "1634720"
  },
  {
    "text": "so how might we handle that well we could reach for the disappointments approach in this case throwing an exception so",
    "start": "1635779",
    "end": "1641059"
  },
  {
    "text": "we'll check that something's in range and if not for an exception and",
    "start": "1641059",
    "end": "1647299"
  },
  {
    "text": "idiomatically I think in in C sharp at least that's probably most often what we would do",
    "start": "1647299",
    "end": "1653360"
  },
  {
    "text": "but there is a cost involved here if we know that we're always going to be passing in a valid value",
    "start": "1653360",
    "end": "1660020"
  },
  {
    "text": "well the painless cost of checking every time and I think code base is where the same value is checked over and over and",
    "start": "1660020",
    "end": "1665960"
  },
  {
    "text": "over again because it has no trust between different layers of the software and there's some advantages to that but",
    "start": "1665960",
    "end": "1672500"
  },
  {
    "text": "it's it gets very tedious and costly and sometimes that matters often it doesn't but sometimes it does",
    "start": "1672500",
    "end": "1680179"
  },
  {
    "text": "so the contracts approach and I'm going to use the contract syntax that I know is",
    "start": "1680179",
    "end": "1685580"
  },
  {
    "text": "considered deprecated these days in C sharp so I'm not suggesting you use this",
    "start": "1685580",
    "end": "1690740"
  },
  {
    "text": "but it's the most direct translation for my my C plus code you can generalize it",
    "start": "1690740",
    "end": "1696440"
  },
  {
    "text": "to other languages you can use your own approach but here we're just going to say well we have a precondition",
    "start": "1696440",
    "end": "1702919"
  },
  {
    "text": "that this is true and you can run it in a mode that checks that at runtime",
    "start": "1702919",
    "end": "1708080"
  },
  {
    "text": "ideally will have bought the process if it fails so it's often spelled assert in",
    "start": "1708080",
    "end": "1713299"
  },
  {
    "text": "other languages um but you can also do an optimized build",
    "start": "1713299",
    "end": "1718340"
  },
  {
    "text": "but it doesn't do the checking but you've still effectively documented that these are what your requirements are",
    "start": "1718340",
    "end": "1723919"
  },
  {
    "text": "and then it's up to you to get remove the bugs because these are bugs",
    "start": "1723919",
    "end": "1729020"
  },
  {
    "text": "before you make the call now if you have a function like this and",
    "start": "1729020",
    "end": "1735440"
  },
  {
    "text": "then you have data that's come from user input or across the network or",
    "start": "1735440",
    "end": "1741200"
  },
  {
    "text": "some untrusted source then you're gonna need to check before you call the function now",
    "start": "1741200",
    "end": "1747140"
  },
  {
    "text": "more of a responsibility on the caller and there's a little bit of a problem the requirements are encoded in the",
    "start": "1747140",
    "end": "1752720"
  },
  {
    "text": "function body and you've got to duplicate them outside fortunately we have a way to avoid code",
    "start": "1752720",
    "end": "1758179"
  },
  {
    "text": "duplication extract method excellent we can take that just the condition",
    "start": "1758179",
    "end": "1765080"
  },
  {
    "text": "write a separate method for it and use that both in our contract",
    "start": "1765080",
    "end": "1771260"
  },
  {
    "text": "or disappointment if you like but we can also use it the same thing before we make the call",
    "start": "1771260",
    "end": "1777620"
  },
  {
    "text": "and we know that we check in the same condition so that's an improvement that's nice and it seems obvious but we",
    "start": "1777620",
    "end": "1783380"
  },
  {
    "text": "often forget this sort of thing for some reason when we're dealing with code like this",
    "start": "1783380",
    "end": "1789820"
  },
  {
    "text": "still not very convenient though if you happen to do this a lot well it's easy to get wrong or miss or forget and even",
    "start": "1790159",
    "end": "1796760"
  },
  {
    "text": "if you do it it's adding extra indentation and code it's it's not great can we have our cake and eat it",
    "start": "1796760",
    "end": "1803659"
  },
  {
    "text": "well we can obviously wrap that in in another function I call this one month for string checked",
    "start": "1803659",
    "end": "1810620"
  },
  {
    "start": "1805000",
    "end": "1879000"
  },
  {
    "text": "so this is doing the the conditional Branch beforehand and then just calling on to the to the unchecked version",
    "start": "1810620",
    "end": "1817279"
  },
  {
    "text": "otherwise well in this case treating it as a nullable or you can throw an exception whatever your choices",
    "start": "1817279",
    "end": "1824200"
  },
  {
    "text": "um okay that's good now we can choose which of these to cool the problem here is the default choice",
    "start": "1824360",
    "end": "1832039"
  },
  {
    "text": "the one that doesn't have the extra word on the end is the unsafe one so I would generally prefer to do it",
    "start": "1832039",
    "end": "1838880"
  },
  {
    "text": "their way around so we'll have a the unchecked version well it doesn't check as the name says",
    "start": "1838880",
    "end": "1844760"
  },
  {
    "text": "and then the one without the suffix actually does the checking safe by default performance by uh by choice",
    "start": "1844760",
    "end": "1852620"
  },
  {
    "text": "opt-in I think we're getting there this is not too bad",
    "start": "1852620",
    "end": "1859220"
  },
  {
    "text": "but it's extra work you've got to remember to do this you've got conventions to respect",
    "start": "1859220",
    "end": "1866120"
  },
  {
    "text": "this all comes up because of this difference between a a values or a types",
    "start": "1866120",
    "end": "1872179"
  },
  {
    "text": "range and its domain for a particular function some other languages have solved this",
    "start": "1872179",
    "end": "1878659"
  },
  {
    "text": "already to some degree like Ada particularly exemplary example here if",
    "start": "1878659",
    "end": "1884299"
  },
  {
    "start": "1879000",
    "end": "1924000"
  },
  {
    "text": "you go to the Wikipedia page for Ada there's an example on there of a date class",
    "start": "1884299",
    "end": "1889460"
  },
  {
    "text": "or deep record but note how the these types are defined",
    "start": "1889460",
    "end": "1896299"
  },
  {
    "text": "there's a month type it's actually defined by range you can only create",
    "start": "1896299",
    "end": "1902419"
  },
  {
    "text": "months with values between 1 and 12. it's correct by Construction",
    "start": "1902419",
    "end": "1908120"
  },
  {
    "text": "once you've got one of those months you don't have to check it you know what its range is it matches matches the domain",
    "start": "1908120",
    "end": "1914480"
  },
  {
    "text": "that would be nice most of us are not working with Ada or languages that have anything like",
    "start": "1914480",
    "end": "1921140"
  },
  {
    "text": "this sort of support but we can roll our own and it's sometimes worth it",
    "start": "1921140",
    "end": "1927679"
  },
  {
    "text": "so we could write a month class I'd probably write it as a strapped in C sharp value type",
    "start": "1927679",
    "end": "1934039"
  },
  {
    "text": "but the principle's the same so we're just going to wrap the integer of property here really important to",
    "start": "1934039",
    "end": "1939799"
  },
  {
    "text": "make that private setter we'll have you do it in your language we",
    "start": "1939799",
    "end": "1945140"
  },
  {
    "text": "don't want to be able to mutate it after the fact because we're going to control it entirely through the Constructor",
    "start": "1945140",
    "end": "1950960"
  },
  {
    "text": "so that we can validate it in the Constructor once it's constructed it's correct by",
    "start": "1950960",
    "end": "1956240"
  },
  {
    "text": "construction we know we can always trust it so we we push that validation to the Constructor in this case we're throwing",
    "start": "1956240",
    "end": "1963320"
  },
  {
    "text": "an exception um but you might actually have a case",
    "start": "1963320",
    "end": "1968480"
  },
  {
    "text": "where you do still know the month is a valid month",
    "start": "1968480",
    "end": "1973940"
  },
  {
    "text": "and we want to construct one of these I should have put that up first so",
    "start": "1973940",
    "end": "1980779"
  },
  {
    "text": "again in C sharp case and I don't know if this is the best way to do it these days but this is what I would do I'll add a a static function",
    "start": "1980779",
    "end": "1988760"
  },
  {
    "text": "that constructs a month using the object initialization syntax can do that now that we are within the",
    "start": "1988760",
    "end": "1995659"
  },
  {
    "text": "class and we'll just do our requires or whatever the check is before that so",
    "start": "1995659",
    "end": "2001299"
  },
  {
    "text": "again we've got both both approaches by default normal Constructor it's safe",
    "start": "2001299",
    "end": "2007659"
  },
  {
    "start": "2006000",
    "end": "2056000"
  },
  {
    "text": "we get the uh the runtime check we can opt in to the contract check",
    "start": "2007659",
    "end": "2013419"
  },
  {
    "text": "by using Create unchecked this way and variations like that you've got to",
    "start": "2013419",
    "end": "2018460"
  },
  {
    "text": "pick a convention and stick with it but this approach has served me well over the years it gives us the best of both",
    "start": "2018460",
    "end": "2024519"
  },
  {
    "text": "worlds safe by default performance by by opt-in",
    "start": "2024519",
    "end": "2031080"
  },
  {
    "text": "so I don't know if you noticed somewhere along the way we've got an extra bubble up there the efficiency bubble",
    "start": "2031659",
    "end": "2038019"
  },
  {
    "text": "because of that reason so we're actually looking at the intersection between three of these properties now",
    "start": "2038019",
    "end": "2043799"
  },
  {
    "text": "okay that's that set of intersections",
    "start": "2044559",
    "end": "2052000"
  },
  {
    "text": "next one I want to look into is between reasonability how easy is to",
    "start": "2052000",
    "end": "2057878"
  },
  {
    "text": "reason about your code and evolvability or maintainability so it's to change the code and there's",
    "start": "2057879",
    "end": "2063580"
  },
  {
    "text": "an obvious correspondence here but let's explore that a little bit more",
    "start": "2063580",
    "end": "2068398"
  },
  {
    "text": "um I've done a few talks in several of these areas",
    "start": "2068800",
    "end": "2074200"
  },
  {
    "text": "so I'm going to do it that way this is the domain particularly of simplicity",
    "start": "2074200",
    "end": "2080560"
  },
  {
    "text": "I've done a talk on that seeking simplicity often functional programming techniques",
    "start": "2080560",
    "end": "2087040"
  },
  {
    "start": "2083000",
    "end": "2099000"
  },
  {
    "text": "doesn't have to be a function of programming language but some of the techniques particularly things like immutability correct by construction we",
    "start": "2087040",
    "end": "2093580"
  },
  {
    "text": "already looked at and some others often implied by the use of simplicity",
    "start": "2093580",
    "end": "2099700"
  },
  {
    "start": "2099000",
    "end": "2105000"
  },
  {
    "text": "and oh jumps ahead actually let's let's carry them",
    "start": "2099700",
    "end": "2105880"
  },
  {
    "start": "2105000",
    "end": "2169000"
  },
  {
    "text": "talking to simplicity uh anyone's seen the talk by Rich hickey",
    "start": "2105880",
    "end": "2111040"
  },
  {
    "text": "simple made easy a couple of people so my seeking Simplicity is partially a",
    "start": "2111040",
    "end": "2118300"
  },
  {
    "text": "riff off of that talk and I I stole these illustrations from from a chicken stock so if they're familiar that's why",
    "start": "2118300",
    "end": "2125440"
  },
  {
    "text": "he defines simple and complex in terms of their um Latin roots simplex and complex which",
    "start": "2125440",
    "end": "2133420"
  },
  {
    "text": "literally mean is a one-fold or braid or many folds and braids so really it's about the crossing over of things the",
    "start": "2133420",
    "end": "2139420"
  },
  {
    "text": "braiding interconnecting and in the simple case well you can see",
    "start": "2139420",
    "end": "2145960"
  },
  {
    "text": "well it's trivial to follow one of these strands from the top to bottom you don't have anything to think about it it's just obvious by looking at it in the",
    "start": "2145960",
    "end": "2152140"
  },
  {
    "text": "complex case you really have to look very carefully to follow something from the top to bottom and there's only a few",
    "start": "2152140",
    "end": "2157420"
  },
  {
    "text": "things going on there and if you think of this as the definition of complexity",
    "start": "2157420",
    "end": "2162820"
  },
  {
    "text": "and then think of all the things in our code which can lead to these sort of things crossing over interconnecting",
    "start": "2162820",
    "end": "2169540"
  },
  {
    "start": "2169000",
    "end": "2291000"
  },
  {
    "text": "boom start an exhaustive list but I think these are typical candidates",
    "start": "2169540",
    "end": "2174940"
  },
  {
    "text": "for things that cause complexity in code threading concurrency is the obvious one perhaps",
    "start": "2174940",
    "end": "2181060"
  },
  {
    "text": "but Global is in Singletons well they make every part of your code interact",
    "start": "2181060",
    "end": "2186099"
  },
  {
    "text": "with every other part of the code in ways you might not expect any sort of shared State can do that",
    "start": "2186099",
    "end": "2192280"
  },
  {
    "text": "even just reference types mutability because now to reason about the value of",
    "start": "2192280",
    "end": "2198760"
  },
  {
    "text": "something you have to consider every line of code that it goes through if it's immutable you don't you always know its value",
    "start": "2198760",
    "end": "2205420"
  },
  {
    "text": "and so on I think leaky abstractions is an interesting one because abstractions ironically are one",
    "start": "2205420",
    "end": "2211900"
  },
  {
    "text": "of our biggest weapons in the fight against complexity helps us to manage it but they're also one of the biggest",
    "start": "2211900",
    "end": "2217780"
  },
  {
    "text": "causes of complexity because they leak and then you have to deal with the abstraction itself and the",
    "start": "2217780",
    "end": "2224079"
  },
  {
    "text": "thing that it attracts mixed together so it's like a meta complexity if you like",
    "start": "2224079",
    "end": "2229540"
  },
  {
    "text": "and talking to meta complexities all of these things can interact well the worst one is is often shared",
    "start": "2229540",
    "end": "2235660"
  },
  {
    "text": "mutable state with reading I think 90 90 of our complexity is right",
    "start": "2235660",
    "end": "2241119"
  },
  {
    "text": "there and dependencies we need to manage our dependencies whether they're between",
    "start": "2241119",
    "end": "2246460"
  },
  {
    "text": "bits of code or between whole modules or libraries package managers",
    "start": "2246460",
    "end": "2252400"
  },
  {
    "text": "they're all sorts of complexity I'm sure you can think of more it's worth identifying them knowing what we're",
    "start": "2252400",
    "end": "2257980"
  },
  {
    "text": "dealing with and of course Trying to minimize them there's always going to be a central complexity",
    "start": "2257980",
    "end": "2263440"
  },
  {
    "text": "but make it only that and that could be hard",
    "start": "2263440",
    "end": "2268720"
  },
  {
    "text": "the point of which hickeys talk was that easy and simple and not the same things and it's often easier to go for the more",
    "start": "2268720",
    "end": "2275320"
  },
  {
    "text": "complex thing you know bring in that big dependency even though you're only using a tiny",
    "start": "2275320",
    "end": "2280480"
  },
  {
    "text": "part of it or just reach for that thing over there Vara Singleton might be easier at the time",
    "start": "2280480",
    "end": "2286000"
  },
  {
    "text": "it's harder in the long run because of the complexity so",
    "start": "2286000",
    "end": "2292240"
  },
  {
    "start": "2291000",
    "end": "2326000"
  },
  {
    "text": "to lower your complexity well if you lower your complexity these are the benefits you can get",
    "start": "2292240",
    "end": "2299140"
  },
  {
    "text": "turns out it's much easier to test all of those things all of those sources of complexity make your code harder to test",
    "start": "2299140",
    "end": "2306040"
  },
  {
    "text": "so if you reduce them it's going to be easier easier to reason about well that was what we started with",
    "start": "2306040",
    "end": "2312099"
  },
  {
    "text": "but also easier to change that's the evolvability part of it think of nicely factored code it's",
    "start": "2312099",
    "end": "2318339"
  },
  {
    "text": "always easier to change things because there's less interactions between things less crossing over",
    "start": "2318339",
    "end": "2323680"
  },
  {
    "text": "and so my formula for Success here is CDD",
    "start": "2323680",
    "end": "2330160"
  },
  {
    "start": "2326000",
    "end": "2373000"
  },
  {
    "text": "and functional programming techniques and to really dive into that more deeply",
    "start": "2330160",
    "end": "2337359"
  },
  {
    "text": "see my over talks but just to talk a little bit about CDD by following tdd practices you're going",
    "start": "2337359",
    "end": "2344859"
  },
  {
    "text": "to get all the problems associated with complexity right at the start at the point you can actually do something about it",
    "start": "2344859",
    "end": "2351040"
  },
  {
    "text": "so we often call them design smells or listening to the tests we listen to the tests well no when",
    "start": "2351040",
    "end": "2357940"
  },
  {
    "text": "we're introducing complexity they shouldn't be there and we'll have a chance to deal with it because if not then the testing becomes",
    "start": "2357940",
    "end": "2363579"
  },
  {
    "text": "impossible and you can't carry on so that's my formula for success",
    "start": "2363579",
    "end": "2370119"
  },
  {
    "text": "your mileage may vary we're gonna have to move on",
    "start": "2370119",
    "end": "2376920"
  },
  {
    "start": "2373000",
    "end": "2415000"
  },
  {
    "text": "the next crossover I want to talk about is between reasonability again",
    "start": "2377320",
    "end": "2382720"
  },
  {
    "text": "and efficiency let's bring efficiency back in and these ones are often intention or at",
    "start": "2382720",
    "end": "2388359"
  },
  {
    "text": "least there's a perception that their intention and I want to challenge that a little bit but after they they genuinely are",
    "start": "2388359",
    "end": "2395440"
  },
  {
    "text": "so we're often told well we should write our code to be readable and then optimize it later if we've measured that",
    "start": "2395440",
    "end": "2403000"
  },
  {
    "text": "the performance isn't where we need it to be but we should make it readable first and so reasonability is not just",
    "start": "2403000",
    "end": "2408700"
  },
  {
    "text": "about readability but if we think of it as the same thing makes sense",
    "start": "2408700",
    "end": "2414760"
  },
  {
    "text": "now this tension exists because of this problem we have the low level machine the the",
    "start": "2414760",
    "end": "2420160"
  },
  {
    "text": "CPUs instruction set Assembly Language but also now much more",
    "start": "2420160",
    "end": "2425560"
  },
  {
    "text": "going on below that with heterogeneous Computing all sorts of things we can worry about at the bottom end but",
    "start": "2425560",
    "end": "2431619"
  },
  {
    "text": "actually where we want to mostly be working is at the higher level high level languages high level",
    "start": "2431619",
    "end": "2436960"
  },
  {
    "text": "abstractions abstracting extract that machine away we want to work in the problem domain not rather than the",
    "start": "2436960",
    "end": "2442540"
  },
  {
    "text": "solution domain and that's great we'll get a long way there but if we are writing the most performant code",
    "start": "2442540",
    "end": "2450400"
  },
  {
    "text": "we sometimes get the tension between those two things now in the middle we have systems languages",
    "start": "2450400",
    "end": "2456820"
  },
  {
    "start": "2454000",
    "end": "2489000"
  },
  {
    "text": "C C plus plus nowadays we've got rust go others maybe just above that we have",
    "start": "2456820",
    "end": "2462460"
  },
  {
    "text": "languages like c-sharp and Java that are higher level but still performance focused",
    "start": "2462460",
    "end": "2469599"
  },
  {
    "text": "but even within those languages there's different levels you can work out different levels of abstraction",
    "start": "2469599",
    "end": "2476140"
  },
  {
    "text": "all the way down to usually C at the bottom the bottom layer C was originally written to be portable",
    "start": "2476140",
    "end": "2482800"
  },
  {
    "text": "assembler only trouble was or is that it was the assembler of the pdp-11",
    "start": "2482800",
    "end": "2491859"
  },
  {
    "text": "you ever seen a pdp-11 there's a picture of one I think I pulled from Wikipedia",
    "start": "2491859",
    "end": "2496960"
  },
  {
    "text": "these are not modern machines not modern architectures",
    "start": "2496960",
    "end": "2502000"
  },
  {
    "text": "things have moved on so even if you're working in C and you're working at low level for performance reasons",
    "start": "2502000",
    "end": "2509200"
  },
  {
    "text": "you may actually be pessimizing your code or at best not having any real Advantage",
    "start": "2509200",
    "end": "2515020"
  },
  {
    "text": "you're just obfuscating things now it turns out that",
    "start": "2515020",
    "end": "2521079"
  },
  {
    "text": "when you write code that's easy to reason about for humans it actually makes it easier to read it",
    "start": "2521079",
    "end": "2526240"
  },
  {
    "text": "about two compilers as well and often the compilers can spot the optimization opportunities",
    "start": "2526240",
    "end": "2533320"
  },
  {
    "text": "that you might not thought of or have the time to to work on",
    "start": "2533320",
    "end": "2538480"
  },
  {
    "text": "and so by starting with the more reasonable or readable code that may be the only step you need",
    "start": "2538480",
    "end": "2545020"
  },
  {
    "text": "so the process is still the same you start with the readability you measure and then you see if you can",
    "start": "2545020",
    "end": "2550900"
  },
  {
    "text": "optimize but you may find that optimization step will make things to us let's look at a concrete example though",
    "start": "2550900",
    "end": "2558040"
  },
  {
    "text": "and for this one I'm going to stick to my C plus bus code because of the the performance um focus but",
    "start": "2558040",
    "end": "2564940"
  },
  {
    "start": "2559000",
    "end": "2641000"
  },
  {
    "text": "don't worry we're not going to get too too deep this the only thing that gives it away is C plus plus is the double",
    "start": "2564940",
    "end": "2570339"
  },
  {
    "text": "colons so pretty simple straightforward code we've got an enum we want to initialize it to a value but to do so we",
    "start": "2570339",
    "end": "2577839"
  },
  {
    "text": "need to call a function and so we can put it in this statement",
    "start": "2577839",
    "end": "2583359"
  },
  {
    "text": "the problem here is the word statement statement is not an expression so the only way to to get the value out",
    "start": "2583359",
    "end": "2591760"
  },
  {
    "text": "of that statement is virus side effects so we're going to need to create an",
    "start": "2591760",
    "end": "2597280"
  },
  {
    "text": "uninitialized variable and the C plus plus that really means uninitialized it's just random",
    "start": "2597280",
    "end": "2603640"
  },
  {
    "text": "memory undefined behavior and then we're going to assign it a value at runtime based on the branch",
    "start": "2603640",
    "end": "2610839"
  },
  {
    "text": "of the if statement doesn't seem like the code is that problematic but has lots of issues",
    "start": "2610839",
    "end": "2616720"
  },
  {
    "text": "hiding there you've got that side effect you've got the mutability we can't actually make our value uh constantly mutable",
    "start": "2616720",
    "end": "2624280"
  },
  {
    "text": "because we need to be able to assign to it and that means that for the rest of its lifetime we need to be thinking about has its value changed can it",
    "start": "2624280",
    "end": "2630940"
  },
  {
    "text": "change for any reason lots of problems I'm not going to go into all of them all of them now",
    "start": "2630940",
    "end": "2637420"
  },
  {
    "text": "um in this particular case certainly C plus plus and many languages will have a similar construct",
    "start": "2637420",
    "end": "2643720"
  },
  {
    "start": "2641000",
    "end": "2714000"
  },
  {
    "text": "um we have the ternary operator we can actually convert it into an expression and that solves all of the issues and",
    "start": "2643720",
    "end": "2651160"
  },
  {
    "text": "more we now make it constant in this case or immutable no side effects",
    "start": "2651160",
    "end": "2657339"
  },
  {
    "text": "no uninitialized values and as a",
    "start": "2657339",
    "end": "2662560"
  },
  {
    "text": "an extra bonus we can use type inference as well because we know that all in one go so",
    "start": "2662560",
    "end": "2668260"
  },
  {
    "text": "this is win-win except that doesn't scale that well both",
    "start": "2668260",
    "end": "2674319"
  },
  {
    "text": "in terms of the amount of code you can easily get very difficult to read but if",
    "start": "2674319",
    "end": "2679359"
  },
  {
    "text": "you've got more values for you if we try this example now we've got just three states well I",
    "start": "2679359",
    "end": "2685839"
  },
  {
    "text": "can't really use the ternary operator for that not without heavy nesting anyway we want to go that route",
    "start": "2685839",
    "end": "2691660"
  },
  {
    "text": "so here we're reaching for a switch statement again back to the same problem as before",
    "start": "2691660",
    "end": "2698740"
  },
  {
    "text": "now if you've got a language uh which I believe c-sharp has now like um pattern",
    "start": "2698740",
    "end": "2704319"
  },
  {
    "text": "matching you maybe have to use that as a more expression oriented version",
    "start": "2704319",
    "end": "2710079"
  },
  {
    "text": "but if not there's ways to fake it so whatever language you're using you can",
    "start": "2710079",
    "end": "2717040"
  },
  {
    "text": "probably do immediately invoked Lambda expressions or immediately invoked function Expressions this is the Syntax",
    "start": "2717040",
    "end": "2724540"
  },
  {
    "text": "for a Lambda and C plus the square brackets is the initializer I'm not going to bore you with the details of",
    "start": "2724540",
    "end": "2729760"
  },
  {
    "text": "that the bit to note is the round brackets at the end it's immediately invoked so we're only creating the the Lander",
    "start": "2729760",
    "end": "2737020"
  },
  {
    "text": "and then invoking it all within the same statement but that means that although we have statements there",
    "start": "2737020",
    "end": "2743200"
  },
  {
    "text": "the whole thing evaluates like an expression we get our value out we can initialize",
    "start": "2743200",
    "end": "2748720"
  },
  {
    "text": "our variable in place and we go back to all the same initial benefits",
    "start": "2748720",
    "end": "2754599"
  },
  {
    "text": "and in this case although it looks like there's more code ironically in C plus plus because of the break statements",
    "start": "2754599",
    "end": "2760900"
  },
  {
    "text": "this is less code than what we had before but that may not be the case in your case but it probably optimizes down to the",
    "start": "2760900",
    "end": "2768160"
  },
  {
    "text": "same as the the first example um okay but that's not better than the",
    "start": "2768160",
    "end": "2774280"
  },
  {
    "text": "first example not in this case because it's just a an enum an integer really under the hood",
    "start": "2774280",
    "end": "2780579"
  },
  {
    "text": "not really much more you can do than that so here's an example with a more expensive object again C plus plus don't",
    "start": "2780579",
    "end": "2787180"
  },
  {
    "text": "worry about the the details just know that it's got two Constructors a default Constructor and a more complex",
    "start": "2787180",
    "end": "2796359"
  },
  {
    "text": "um assignment Constructor they're both doing work so when you have that default",
    "start": "2796359",
    "end": "2803079"
  },
  {
    "text": "initialized variable that's still going to be doing some work that can't be optimized away",
    "start": "2803079",
    "end": "2808359"
  },
  {
    "text": "so to put it to the test in a similar example like this with the Lambda expression",
    "start": "2808359",
    "end": "2814660"
  },
  {
    "text": "well if we did it with the switch the um the bare switch statement and then an initial default initialized",
    "start": "2814660",
    "end": "2821319"
  },
  {
    "text": "variable there is measurably more work going on than this version and I've I've tested that",
    "start": "2821319",
    "end": "2828099"
  },
  {
    "text": "put it in tool that shows you the generated assembler and there's a lot more code generated",
    "start": "2828099",
    "end": "2833619"
  },
  {
    "text": "so this is one case where the arguably simpler example with the Lambda expression",
    "start": "2833619",
    "end": "2841960"
  },
  {
    "text": "when you're used to it that is actually simpler is also the more performant because the compiler can reason about",
    "start": "2841960",
    "end": "2847420"
  },
  {
    "text": "all the guarantees and constraints as well so that's that's the main takeaway I",
    "start": "2847420",
    "end": "2853540"
  },
  {
    "text": "wanted from here there are still going to be cases where compiler can't do that you will have to",
    "start": "2853540",
    "end": "2858819"
  },
  {
    "text": "measure and there may still be cases you have to write to something that's less readable",
    "start": "2858819",
    "end": "2864520"
  },
  {
    "text": "even then there's things we can do so",
    "start": "2864520",
    "end": "2869560"
  },
  {
    "start": "2869000",
    "end": "2873000"
  },
  {
    "text": "go back to testing and specifically property-based testing again I mentioned",
    "start": "2869560",
    "end": "2875140"
  },
  {
    "text": "this earlier strictly speaking what I'm going to show you is not property-based testing but",
    "start": "2875140",
    "end": "2880900"
  },
  {
    "text": "you can use a property-based testing framework to do this very nicely or property-based testing facilities in",
    "start": "2880900",
    "end": "2886960"
  },
  {
    "text": "your unit test framework the idea is well let's say you have some algorithm",
    "start": "2886960",
    "end": "2893200"
  },
  {
    "text": "that you've written and you've written it a nice readable clean way",
    "start": "2893200",
    "end": "2898300"
  },
  {
    "text": "you can look at the code and think yeah that that looks right you write some tests of course it all seems to work",
    "start": "2898300",
    "end": "2905020"
  },
  {
    "text": "but you're pretty confident in it the only trouble is the performance sucks that's the thing with algorithms",
    "start": "2905020",
    "end": "2912040"
  },
  {
    "text": "algorithms very often you need to write much more complex code to get the better performance",
    "start": "2912040",
    "end": "2918280"
  },
  {
    "text": "so you write your more complex version well here's a trivial interface",
    "start": "2918280",
    "end": "2925660"
  },
  {
    "text": "for two such algorithms the slow version and then the fast more complex version",
    "start": "2925660",
    "end": "2932200"
  },
  {
    "text": "keep the old one around because you can then",
    "start": "2932200",
    "end": "2937599"
  },
  {
    "text": "test one against the other so this is some example code from catch my C plus test",
    "start": "2937599",
    "end": "2945040"
  },
  {
    "text": "framework other Frameworks will have something similar we're just generating loads of",
    "start": "2945040",
    "end": "2950079"
  },
  {
    "text": "values and then we are passing them to to both falgrims and comparing the results simple as that the",
    "start": "2950079",
    "end": "2956920"
  },
  {
    "text": "more values to test you test the more confidence you have that they are working as expected if you're doing it randomly over time",
    "start": "2956920",
    "end": "2964180"
  },
  {
    "text": "you're going to get more and more of that coverage and it works in specific cases at least this",
    "start": "2964180",
    "end": "2972880"
  },
  {
    "text": "can get you that little bit further of being able to reason about the code",
    "start": "2972880",
    "end": "2977920"
  },
  {
    "text": "but still get the performance so that's reasonability",
    "start": "2977920",
    "end": "2983859"
  },
  {
    "text": "and efficiency they are the intersections I wanted to",
    "start": "2983859",
    "end": "2988960"
  },
  {
    "text": "talk about today or at least that we have time to uh we actually got to a few in the end",
    "start": "2988960",
    "end": "2994300"
  },
  {
    "text": "um turns out you can even sort of Link these up a bit through just uh",
    "start": "2994300",
    "end": "2999640"
  },
  {
    "text": "boil out the um the commonalities and turns out we've actually covered interceptions between every single one",
    "start": "2999640",
    "end": "3005280"
  },
  {
    "text": "of those so that was nice it also allows me to organize them",
    "start": "3005280",
    "end": "3010980"
  },
  {
    "text": "nicely across the screen for the next bit which is where I talk about all the things that we've we've used to help",
    "start": "3010980",
    "end": "3017220"
  },
  {
    "text": "so we use the type system particularly with the contract based",
    "start": "3017220",
    "end": "3022500"
  },
  {
    "text": "checking correct by construction but there's lots of ways we can use the type system to",
    "start": "3022500",
    "end": "3027780"
  },
  {
    "text": "make things easier to reason about uh we looked at error handling paths",
    "start": "3027780",
    "end": "3033660"
  },
  {
    "text": "make sure that we um take care of handling seriously we know",
    "start": "3033660",
    "end": "3040380"
  },
  {
    "text": "how it divides up and how to deal with it and we did a lot of testing",
    "start": "3040380",
    "end": "3046200"
  },
  {
    "text": "testing helps in lots of different ways I've just scratch the surface really",
    "start": "3046200",
    "end": "3051260"
  },
  {
    "text": "one thing we didn't really talk about but turns out helps with um every single point up stack except for the",
    "start": "3051720",
    "end": "3057660"
  },
  {
    "start": "3053000",
    "end": "3081000"
  },
  {
    "text": "applicability is a code analysis static and dynamic and of course I have to put this in I'll",
    "start": "3057660",
    "end": "3063839"
  },
  {
    "text": "work it sonar we do static analysis tools but the cause and effective way",
    "start": "3063839",
    "end": "3068940"
  },
  {
    "text": "around I work at sonar because this is important to me so do check that out I'm not going to say much more about it for now but",
    "start": "3068940",
    "end": "3076260"
  },
  {
    "text": "we need all the help we can get so use the tools",
    "start": "3076260",
    "end": "3081319"
  },
  {
    "text": "almost ready to wrap up I wanted to say a little bit more tie this all together",
    "start": "3081420",
    "end": "3087359"
  },
  {
    "text": "there was a blog post a few years ago now from Michael feathers probably heard of",
    "start": "3087359",
    "end": "3092579"
  },
  {
    "start": "3089000",
    "end": "3119000"
  },
  {
    "text": "Michael feathers does a lot of Consulting in tdd testing",
    "start": "3092579",
    "end": "3098819"
  },
  {
    "text": "all the things around that so he wrote this post called the flawed theory behind unit testing a little bit of a clickbaity title uh",
    "start": "3098819",
    "end": "3106140"
  },
  {
    "text": "it's not really questioning unit testing itself but it's more talking about mocking as it",
    "start": "3106140",
    "end": "3111480"
  },
  {
    "text": "happens that's what I want to talk about here he goes through lots of different approaches to achieving software quality",
    "start": "3111480",
    "end": "3119880"
  },
  {
    "text": "and in this conclusion it makes a really interesting point",
    "start": "3119880",
    "end": "3125700"
  },
  {
    "text": "he says in the software industry we've been chasing quality for years the interesting thing is",
    "start": "3125700",
    "end": "3131400"
  },
  {
    "text": "there's a number of things that work designed by contract works test driven",
    "start": "3131400",
    "end": "3136680"
  },
  {
    "text": "development works so to clean room code inspections and the use of higher level languages",
    "start": "3136680",
    "end": "3143880"
  },
  {
    "text": "interestingly these are all but maybe clean room things we just discussed today",
    "start": "3143880",
    "end": "3148980"
  },
  {
    "text": "it carries on all of these techniques have been shown to increase quality",
    "start": "3148980",
    "end": "3154380"
  },
  {
    "text": "and if we look closely we can see why all of them forces to reflect on our code",
    "start": "3154380",
    "end": "3162180"
  },
  {
    "text": "and his conclusion was that really this is the main benefit that we get from our",
    "start": "3162180",
    "end": "3168480"
  },
  {
    "text": "approaches to testing it's not necessarily the testing itself it's the focus on the quote code",
    "start": "3168480",
    "end": "3174180"
  },
  {
    "text": "and I think it's got a point even if I don't entirely agree with him that yeah all of these things work and",
    "start": "3174180",
    "end": "3179700"
  },
  {
    "text": "the more we can use aspects of all of them the higher our code quality is going to be",
    "start": "3179700",
    "end": "3186318"
  },
  {
    "text": "so those are six software quality principles one thing we didn't talk about",
    "start": "3186720",
    "end": "3193079"
  },
  {
    "start": "3190000",
    "end": "3237000"
  },
  {
    "text": "with them which interestingly is the Chinese word",
    "start": "3193079",
    "end": "3198119"
  },
  {
    "text": "at least originally for meditation I don't think about meditation so much",
    "start": "3198119",
    "end": "3203700"
  },
  {
    "text": "when we talk about software but if we look at the Wikipedia definition of meditation",
    "start": "3203700",
    "end": "3210660"
  },
  {
    "text": "he says it's a practice of focusing the mind on a particular object falter activity",
    "start": "3210660",
    "end": "3217020"
  },
  {
    "text": "train the attention awareness and achieve a mentally clear and stable state to",
    "start": "3217020",
    "end": "3223140"
  },
  {
    "text": "paraphrase focusing on a particular object and microfiber said about focusing on",
    "start": "3223140",
    "end": "3229440"
  },
  {
    "text": "the code so maybe Zen and quality do actually go",
    "start": "3229440",
    "end": "3234720"
  },
  {
    "text": "together after all this has been Zen and the Art of code lifecycle maintenance",
    "start": "3234720",
    "end": "3241380"
  },
  {
    "start": "3237000",
    "end": "3319000"
  },
  {
    "text": "there's that link with all of the references that I mentioned on my website places you can reach me",
    "start": "3241380",
    "end": "3246960"
  },
  {
    "text": "thank you very much",
    "start": "3246960",
    "end": "3249740"
  },
  {
    "text": "I think we have time for questions if there are any",
    "start": "3253980",
    "end": "3257900"
  },
  {
    "text": "or if not we're gonna grab a coffee oh we've got a question",
    "start": "3262140",
    "end": "3266240"
  },
  {
    "text": "actually having trouble hearing over the background noise maybe we can",
    "start": "3273180",
    "end": "3278540"
  },
  {
    "text": "code review yes uh yes I didn't really talk about code review except",
    "start": "3278640",
    "end": "3284880"
  },
  {
    "text": "what Michael forever said but it's another thing which focuses you on the code",
    "start": "3284880",
    "end": "3290160"
  },
  {
    "text": "well there's lots of benefits but that in particular and you could argue that static analysis is a form of automated",
    "start": "3290160",
    "end": "3296400"
  },
  {
    "text": "code review but uh I think it's worth having the human step in the loop as well yes it's another way to increase",
    "start": "3296400",
    "end": "3302220"
  },
  {
    "text": "your your quality if you can afford the time it takes",
    "start": "3302220",
    "end": "3307440"
  },
  {
    "text": "yeah any others",
    "start": "3307440",
    "end": "3312140"
  },
  {
    "text": "okay well thanks for coming enjoy your coffee",
    "start": "3313920",
    "end": "3318799"
  }
]