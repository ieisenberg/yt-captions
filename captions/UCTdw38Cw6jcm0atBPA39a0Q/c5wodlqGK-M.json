[
  {
    "text": "okay can you guys hear me yeah good right my name is Robert small Shire I",
    "start": "2529",
    "end": "9410"
  },
  {
    "text": "work for one part owned a small consultancy based here in Oslo and in",
    "start": "9410",
    "end": "15170"
  },
  {
    "text": "Stavanger I'm part owner of sixty north and we do work around the world in a",
    "start": "15170",
    "end": "20539"
  },
  {
    "text": "variety of technologies currently we're doing working Puerto Rico we do a lot of",
    "start": "20539",
    "end": "26300"
  },
  {
    "text": "work in Oslo also work in London so we get around quite a bit and although",
    "start": "26300",
    "end": "32360"
  },
  {
    "text": "we're not technology specific python is a tool that we come back to again and again and I'm not sure how many of you",
    "start": "32360",
    "end": "40820"
  },
  {
    "text": "here are familiar with the details of Python a lot of this talk is very accessible Python code is very readable",
    "start": "40820",
    "end": "46280"
  },
  {
    "text": "so even if you're not familiar with the details of Python hopefully you can get a good understanding from this talk of",
    "start": "46280",
    "end": "51619"
  },
  {
    "text": "what co-routines are and how they work and how they facilitate concurrency not",
    "start": "51619",
    "end": "57350"
  },
  {
    "text": "just in Python 3 but in any language which supports some more basic primitives so although all the examples",
    "start": "57350",
    "end": "66410"
  },
  {
    "text": "I'm going to show you today are toy examples for the purposes of illustrating what co-routines are all",
    "start": "66410",
    "end": "73760"
  },
  {
    "text": "about and how concurrency works in Python 3 I think it's important to point",
    "start": "73760",
    "end": "79550"
  },
  {
    "text": "out that a lot of what I've learned and my exposure to co-routines and",
    "start": "79550",
    "end": "84680"
  },
  {
    "text": "asynchronous i/o in python is based on industrial practice so I last year",
    "start": "84680",
    "end": "91490"
  },
  {
    "text": "worked on a system for a company in London which does what's called demand",
    "start": "91490",
    "end": "96530"
  },
  {
    "text": "response management for the power grid and where I was writing actually embedded Python programs that run on",
    "start": "96530",
    "end": "103159"
  },
  {
    "text": "small Odroid single board computers distributed on industrial sites to control power flow to and from those",
    "start": "103159",
    "end": "111500"
  },
  {
    "text": "industrial sites based upon real-time electricity pricing and UK more recently",
    "start": "111500",
    "end": "117440"
  },
  {
    "text": "I'm involved in a nascent startup here in Oslo it's so new that it doesn't even",
    "start": "117440",
    "end": "123920"
  },
  {
    "text": "have a name yet where we're involved in solar power prediction and monitoring",
    "start": "123920",
    "end": "130190"
  },
  {
    "text": "also using async i/o as one of the technologies we use to build our services",
    "start": "130190",
    "end": "136840"
  },
  {
    "text": "I'm also maintainer of a thing called Pye cereal async aiyo you might think of",
    "start": "136840",
    "end": "143330"
  },
  {
    "text": "serial ports as being those all kind of 9 pin D connectors on the back of your",
    "start": "143330",
    "end": "148760"
  },
  {
    "text": "old computer going way back or even further back C 25 pin B connectors and",
    "start": "148760",
    "end": "154160"
  },
  {
    "text": "you probably think that serial ports are rarely used these days that's not the case at all almost every device which",
    "start": "154160",
    "end": "162709"
  },
  {
    "text": "has sensors in it is going to have serial ports onboard so serial ports are",
    "start": "162709",
    "end": "168410"
  },
  {
    "text": "a hugely important thing and we're beginning to see use of async i/o in Python to deal with serial input and",
    "start": "168410",
    "end": "175850"
  },
  {
    "text": "output so no one wants to help me make this work on Windows and understands Windows IO completion ports please get",
    "start": "175850",
    "end": "182480"
  },
  {
    "text": "in touch I'm also the author or co-author I should say of three books so",
    "start": "182480",
    "end": "189170"
  },
  {
    "text": "for those of you who are maybe not familiar at all or very familiar with",
    "start": "189170",
    "end": "194630"
  },
  {
    "text": "Python then please look into our books and if you want a free copy of these come and see me afterwards I'll see what",
    "start": "194630",
    "end": "201709"
  },
  {
    "text": "I can do so on to the structure of the talk I'm going to talk about why we care",
    "start": "201709",
    "end": "209269"
  },
  {
    "text": "about asynchronous i/o why is this something that's important to us why do we need to solve this problem then I'm",
    "start": "209269",
    "end": "216950"
  },
  {
    "text": "going to move on to explaining what Co routines are and we'll do that independently of looking at input/output",
    "start": "216950",
    "end": "223340"
  },
  {
    "text": "we'll just try to explain Co routines and in fact we're going to build something in Python that is equivalent",
    "start": "223340",
    "end": "229579"
  },
  {
    "text": "to what the modern Python language gives us but we're going to build it from the ground up from first principles without",
    "start": "229579",
    "end": "236030"
  },
  {
    "text": "using async i/o we're just going to do it from scratch as a learning exercise then we'll move on and look at what the",
    "start": "236030",
    "end": "242989"
  },
  {
    "text": "language and library gives us in Python and then only at the very end am I going to get on to the actual IO aspect and",
    "start": "242989",
    "end": "250010"
  },
  {
    "text": "we'll plug all this together if we have time at the end I'll finish with a quick",
    "start": "250010",
    "end": "255170"
  },
  {
    "text": "demo so what is asynchronous i io about",
    "start": "255170",
    "end": "261650"
  },
  {
    "text": "anyway well input output is high latency compared to the certainly compared to",
    "start": "261650",
    "end": "267260"
  },
  {
    "text": "the speed of our use these days and as such sequential programs spend a lot of time waiting on",
    "start": "267260",
    "end": "274720"
  },
  {
    "text": "Io so you want to perform some IO and external device a disk or a serial port",
    "start": "274720",
    "end": "279940"
  },
  {
    "text": "you spend a lot of time waiting for the data to come back to you after you've requested it so hit the - the",
    "start": "279940",
    "end": "290260"
  },
  {
    "text": "traditional response to this has been to have multiple threads or multiple processors more recently we've seen",
    "start": "290260",
    "end": "296590"
  },
  {
    "text": "things in no GS which use a similar approach to what I'm going to talk about today the problem with the threading and",
    "start": "296590",
    "end": "304660"
  },
  {
    "text": "multi processing approaches is there are large resource overheads on linux every",
    "start": "304660",
    "end": "309790"
  },
  {
    "text": "thread is going to carry with it at least eight megabytes of stack space even if you don't use that and there's a",
    "start": "309790",
    "end": "316360"
  },
  {
    "text": "large cognitive overhead to synthesise reasoning about shared mutable state communicating between threads is",
    "start": "316360",
    "end": "322960"
  },
  {
    "text": "obviously where a lot of the complexity comes into working with these kind of systems and in python in particular we",
    "start": "322960",
    "end": "329020"
  },
  {
    "text": "have to remember that the entire Python interpreter is a big pile of shared",
    "start": "329020",
    "end": "334120"
  },
  {
    "text": "mutable state that's what it is and that shared mutable state in Python is protected by the infamous now-infamous",
    "start": "334120",
    "end": "340990"
  },
  {
    "text": "of Gil or globe ring global interpreter lock which really prevents Python making",
    "start": "340990",
    "end": "347620"
  },
  {
    "text": "use of the additional compute resources that we give it okay but it turns out",
    "start": "347620",
    "end": "353740"
  },
  {
    "text": "that because programs from most of their time hanging around waiting for IO take the advantage of additional compute",
    "start": "353740",
    "end": "359740"
  },
  {
    "text": "resources isn't actually so important for many applications what we want is the IO to go quicker so I want to",
    "start": "359740",
    "end": "367090"
  },
  {
    "text": "establish a few definitions so many of you this should be it's probably stuff",
    "start": "367090",
    "end": "372940"
  },
  {
    "text": "you know already but I just want to make sure that the terminology I'm using is are you during this talk is something we",
    "start": "372940",
    "end": "379360"
  },
  {
    "text": "can agree on so concurrency versus parallelism concurrency is about dealing with",
    "start": "379360",
    "end": "386169"
  },
  {
    "text": "multiple things at once without necessarily doing the multiple things at once so tasks which overlap in time",
    "start": "386169",
    "end": "392740"
  },
  {
    "text": "their start and end times overlap although we're only progressing one of",
    "start": "392740",
    "end": "397930"
  },
  {
    "text": "those tasks at any given instant and so co-routines which I'm going to show today are very much about",
    "start": "397930",
    "end": "403920"
  },
  {
    "text": "concurrency on the other hand we have parallelism parallelism where tasks are",
    "start": "403920",
    "end": "409290"
  },
  {
    "text": "actually running simultaneously and of course to do this we need more than one computer or more than one core with",
    "start": "409290",
    "end": "415830"
  },
  {
    "text": "multiple threads so I'm very much going to be talking about concurrency today",
    "start": "415830",
    "end": "421850"
  },
  {
    "text": "another word that's going to come up is asynchronous so essentially there's no",
    "start": "421850",
    "end": "427800"
  },
  {
    "text": "way no need to wait very results before proceeding with other work and of course",
    "start": "427800",
    "end": "433380"
  },
  {
    "text": "when we can do this overall duration becomes shorter which is a good thing with less waiting on the latency of the",
    "start": "433380",
    "end": "440430"
  },
  {
    "text": "of the i/o versus sequential or synchronous it's interesting that the",
    "start": "440430",
    "end": "446250"
  },
  {
    "text": "word synchronous which is obviously the opposite of asynchronous and common day usage synchronous means doing multiple",
    "start": "446250",
    "end": "452700"
  },
  {
    "text": "things at the same time but as computer people have inverted that meaning to me to mean doing exactly one thing at the",
    "start": "452700",
    "end": "459210"
  },
  {
    "text": "same time so it's kind of screwed about linguistics a bit here but it essentially means we must complete",
    "start": "459210",
    "end": "464790"
  },
  {
    "text": "something before proceeding of course then the overall duration is longer",
    "start": "464790",
    "end": "470000"
  },
  {
    "text": "another way of thinking about asynchronous and its opposite is asynchronous versus non blocking so the",
    "start": "471590",
    "end": "478470"
  },
  {
    "text": "way we use it in what I'm going to show today asynchronous period returns immediately essentially with the promise",
    "start": "478470",
    "end": "485010"
  },
  {
    "text": "of some future and complete results first it's non blocking which also",
    "start": "485010",
    "end": "490350"
  },
  {
    "text": "returns immediately but it may return immediately with no results a partial result or a complete results and",
    "start": "490350",
    "end": "496320"
  },
  {
    "text": "essentially we need to pull something in order to figure out when the complete result is finally available and then if",
    "start": "496320",
    "end": "506610"
  },
  {
    "text": "then we can think about pre-emptive multitasking versus cooperative multitasking so pre-emptive multitasking",
    "start": "506610",
    "end": "513840"
  },
  {
    "text": "is where the scheduler interrupts the tasks that we're running concurrently and the tasks have no say in when they",
    "start": "513840",
    "end": "521310"
  },
  {
    "text": "are interrupted which of course means you are interrupt your tasks are interrupted at the most inconvenient",
    "start": "521310",
    "end": "526740"
  },
  {
    "text": "moment which means that we have to protect any shared mutable state with locks so inconvenient contexts",
    "start": "526740",
    "end": "534200"
  },
  {
    "text": "and of course pre-emptive multitasking requires some parallelism so even if you",
    "start": "534200",
    "end": "539960"
  },
  {
    "text": "have one core in your computer that is hardware level parallelism going on there are CPU counters Hardware counters",
    "start": "539960",
    "end": "546620"
  },
  {
    "text": "which are counting down ready to generate an interrupt to force context switch versus cooperative multitasking",
    "start": "546620",
    "end": "553910"
  },
  {
    "text": "where tasks have to deliberately yield control back to the scheduler so this is",
    "start": "553910",
    "end": "560090"
  },
  {
    "text": "nice in many ways as a programmer because then we get to choose when we're interrupted okay so that can obviate the",
    "start": "560090",
    "end": "566780"
  },
  {
    "text": "need for locking on the other hand if we forget to yield control to the scheduler",
    "start": "566780",
    "end": "572900"
  },
  {
    "text": "we can essentially hang the whole system we can cause things to grind to a halt because the scheduler has no means of",
    "start": "572900",
    "end": "579350"
  },
  {
    "text": "interrupting of pre-empting at a task so with async i/o and co-routines we're",
    "start": "579350",
    "end": "586280"
  },
  {
    "text": "very much on the cooperative multitasking side of the equation here",
    "start": "586280",
    "end": "592570"
  },
  {
    "text": "so the promise of async i/o and crew routines in Python is that they allow us",
    "start": "592570",
    "end": "597860"
  },
  {
    "text": "to write asynchronous concurrent cooperative tasks in a sequential style",
    "start": "597860",
    "end": "604490"
  },
  {
    "text": "which is great because it means the reasoning about how these things are working becomes much more",
    "start": "604490",
    "end": "610910"
  },
  {
    "text": "straightforward because we're essentially thinking about synchronous programs again which isn't you know what",
    "start": "610910",
    "end": "616520"
  },
  {
    "text": "we've been doing for years but at the same time we get some of the performance advantages of not having to wait on high",
    "start": "616520",
    "end": "623450"
  },
  {
    "text": "latency input/output so let's set the scene if you like let's",
    "start": "623450",
    "end": "632939"
  },
  {
    "text": "move on to actually looking at how co-routines facilitate concurrency and",
    "start": "632939",
    "end": "640670"
  },
  {
    "text": "in fact just what is the crew routine let's try to answer that question as well and in this part of the talk I'm",
    "start": "640670",
    "end": "646740"
  },
  {
    "text": "going to build something that is functionally equivalent to a very important part of pythons",
    "start": "646740",
    "end": "653339"
  },
  {
    "text": "async i/o but we're going to do it from first principles from the ground up without using async i/o at all and",
    "start": "653339",
    "end": "661740"
  },
  {
    "text": "essentially what i'm doing here is i'm recapitulating the journey I went on",
    "start": "661740",
    "end": "667740"
  },
  {
    "text": "when I was first exposed to this stuff I find it's very useful when I'm trying to",
    "start": "667740",
    "end": "672990"
  },
  {
    "text": "understand something to try and build something simpler but which essentially does the same thing and then by the time",
    "start": "672990",
    "end": "679170"
  },
  {
    "text": "I've solved that problem then I have a really good understanding of what's going on I think it's very important",
    "start": "679170",
    "end": "684180"
  },
  {
    "text": "when you're using a technology to be able to have some appreciation of what's",
    "start": "684180",
    "end": "689279"
  },
  {
    "text": "going on one level of abstraction down from the level at which you're writing your program your application code",
    "start": "689279",
    "end": "695490"
  },
  {
    "text": "because when then when things stop working or behave in odd ways you have some insight into what's actually going",
    "start": "695490",
    "end": "702480"
  },
  {
    "text": "on and I find actually building simple versions of things I want to use from scratch is a very good way to do that",
    "start": "702480",
    "end": "709050"
  },
  {
    "text": "that's exactly what I'm going to go through now before we get to that though",
    "start": "709050",
    "end": "715139"
  },
  {
    "text": "we need some code to actually do some work we have a pact in our company that",
    "start": "715139",
    "end": "721589"
  },
  {
    "text": "we are not allowed to use the F word F is Fibonacci and so in this example I'm",
    "start": "721589",
    "end": "729629"
  },
  {
    "text": "going to use a thing called the Lucas sequence which is closely related to the Fibonacci sequence but just has a",
    "start": "729629",
    "end": "735120"
  },
  {
    "text": "different initial starting condition and so what you're seeing on the screen here on the left is a Python generator",
    "start": "735120",
    "end": "743550"
  },
  {
    "text": "function and we know it's a generator function because it has at least one occurrence of the yield keyword within",
    "start": "743550",
    "end": "750029"
  },
  {
    "text": "it which you can see on the penultimate line there in fact we have two occurrences in this and Lucas just the",
    "start": "750029",
    "end": "757259"
  },
  {
    "text": "Lucas function just generates an infinite sequence of numbers on the right here I'm importing that",
    "start": "757259",
    "end": "762899"
  },
  {
    "text": "function I mean also importing a thing called I slice which is like cake just takes a certain number of items from a",
    "start": "762899",
    "end": "769949"
  },
  {
    "text": "sequence and produce it and converting those into a list so I'm taking the",
    "start": "769949",
    "end": "775889"
  },
  {
    "text": "first ten Lucas numbers there we are okay now there's no concurrency or anything going",
    "start": "775889",
    "end": "781559"
  },
  {
    "text": "on here I just need some code that's going to do some work that's the only reason we have this here today the next",
    "start": "781559",
    "end": "792209"
  },
  {
    "text": "function I'm going to introduce is search and search is also a very simple",
    "start": "792209",
    "end": "797610"
  },
  {
    "text": "Python function even if you don't know Python I hope you can read this so search except some if label series of",
    "start": "797610",
    "end": "803579"
  },
  {
    "text": "data and add another function a predicate function and we test that predicate against each item in the",
    "start": "803579",
    "end": "810329"
  },
  {
    "text": "series and if the predicate returns true we return the matching item if we get to",
    "start": "810329",
    "end": "815459"
  },
  {
    "text": "the end of the for loop without having found a matching item we raise an exception called value error right this",
    "start": "815459",
    "end": "821040"
  },
  {
    "text": "is a very very straightforward Python function again no concurrency here yet",
    "start": "821040",
    "end": "826949"
  },
  {
    "text": "so search is just a regular function and here you can see on the right I'm asking",
    "start": "826949",
    "end": "833819"
  },
  {
    "text": "to the first Lucas number that has at least six digits now I'm just converting",
    "start": "833819",
    "end": "839579"
  },
  {
    "text": "the Lucas number to a string checking how long the string is and we can see that the first lucas number with at",
    "start": "839579",
    "end": "844829"
  },
  {
    "text": "least six digits is 103 682 very very simple python code and we can all",
    "start": "844829",
    "end": "850470"
  },
  {
    "text": "understand this what we'd like to do is turn our search",
    "start": "850470",
    "end": "857270"
  },
  {
    "text": "function which is completely non cooperative into a cooperative search so that it can yield control to some other",
    "start": "857270",
    "end": "865840"
  },
  {
    "text": "piece of the program and all we need to do to make that cooperative is to insert a yield keyword so we're just going to",
    "start": "865840",
    "end": "875420"
  },
  {
    "text": "fit yield here inside the loop so that we yield once through the loop and",
    "start": "875420",
    "end": "880660"
  },
  {
    "text": "notice that we're not yielding anything this is a shorthand in Python for yield non so non is like a null or nil object",
    "start": "880660",
    "end": "888400"
  },
  {
    "text": "so we're just we're not yielding anything we're just yielding which will interrupt the flow of this loop and to",
    "start": "888400",
    "end": "895550"
  },
  {
    "text": "remind us that this is now a generator function and not a regular function I'm going to rename it to async search so",
    "start": "895550",
    "end": "904400"
  },
  {
    "text": "let's see how to use async search I'm going to import it and the Lucas generator and I'm going to search again",
    "start": "904400",
    "end": "913190"
  },
  {
    "text": "for the first Lucas number understand we're going to search for the first one that is greater than 10 okay so not with",
    "start": "913190",
    "end": "918920"
  },
  {
    "text": "10 digits but actually just greater than 10 so what is G 1 we call G we get not",
    "start": "918920",
    "end": "927530"
  },
  {
    "text": "the results we get a thing called a generator object okay so the generator object encapsulate this the running",
    "start": "927530",
    "end": "935150"
  },
  {
    "text": "state of this function okay and the generators in Python are also iterators",
    "start": "935150",
    "end": "941330"
  },
  {
    "text": "and so to it to to advance an iterator in Python we pass the iterator to the next function so we do next key every",
    "start": "941330",
    "end": "950180"
  },
  {
    "text": "time we call next year we're running one more iteration of that loop until we get to the yield again and we stop we pause",
    "start": "950180",
    "end": "956150"
  },
  {
    "text": "the suspend execution of the function okay so we run one iteration now and we",
    "start": "956150",
    "end": "962300"
  },
  {
    "text": "can run another iteration and you'll see that next isn't returning anything or that's because yield isn't yielding",
    "start": "962300",
    "end": "967370"
  },
  {
    "text": "anything right so let's do another one and so we can advance this search one",
    "start": "967370",
    "end": "976550"
  },
  {
    "text": "iteration at a time now it's not immediately obvious when I'm doing this but I can actually do more than one",
    "start": "976550",
    "end": "983780"
  },
  {
    "text": "thing that concurrently here while we're our search function is run I can start doing other steps right I",
    "start": "983780",
    "end": "989480"
  },
  {
    "text": "can print hello world so now we have concurrency right using nothing more",
    "start": "989480",
    "end": "994700"
  },
  {
    "text": "than iterators okay now I'm printing hello world and running the search and we can keep",
    "start": "994700",
    "end": "1000700"
  },
  {
    "text": "advancing the search with more calls to next and then eventually next we'll",
    "start": "1000700",
    "end": "1009540"
  },
  {
    "text": "raise a stop iteration exception and stop iteration is how python programs",
    "start": "1009540",
    "end": "1015100"
  },
  {
    "text": "signal that an iterator has reached the end of the data raises an exception called stop iteration what's interesting",
    "start": "1015100",
    "end": "1021700"
  },
  {
    "text": "about python is that that exception carries a payload and here the payload is the item that we found so that return",
    "start": "1021700",
    "end": "1029770"
  },
  {
    "text": "statement in async search actually causes an exception to be raised by the",
    "start": "1029770",
    "end": "1036100"
  },
  {
    "text": "generator machinery in python and the result gets wrapped up in the stop iteration exception we see at the bottom",
    "start": "1036100",
    "end": "1042880"
  },
  {
    "text": "now on the right stop iteration 11 that's the result okay so we can use",
    "start": "1042880",
    "end": "1048580"
  },
  {
    "text": "generators generates functions in Python to support concurrency and all our",
    "start": "1048580",
    "end": "1055900"
  },
  {
    "text": "co-routine is essentially is an interruptible function like this as a function where we can pause execution",
    "start": "1055900",
    "end": "1062020"
  },
  {
    "text": "and then resume execution at the point we left off at some later time",
    "start": "1062020",
    "end": "1067060"
  },
  {
    "text": "and of course that's exactly what we're doing here when we call next yeah so I",
    "start": "1067060",
    "end": "1075220"
  },
  {
    "text": "think that just says what I've just said to you so let's make this a little bit",
    "start": "1075220",
    "end": "1080230"
  },
  {
    "text": "more sophisticated and a bit nicer to use it's not very nice having to call",
    "start": "1080230",
    "end": "1086200"
  },
  {
    "text": "next and have this thing look like an iterator we'd like it to look a bit more like a task because conceptually that's all we're building and thinking in terms",
    "start": "1086200",
    "end": "1092680"
  },
  {
    "text": "of iterators when conceptually we're building tasks there's a bit of a mental mismatch there so let's make let's make",
    "start": "1092680",
    "end": "1098710"
  },
  {
    "text": "a task all the task is is a generator",
    "start": "1098710",
    "end": "1105520"
  },
  {
    "text": "function called routine here and an integer ID to identify that routine so",
    "start": "1105520",
    "end": "1111250"
  },
  {
    "text": "those of you don't know pythons dunder init you can think of it as a constructor the constructor accepts",
    "start": "1111250",
    "end": "1116830"
  },
  {
    "text": "routine and within the constructor I just take the net I D so next ID here is essentially a",
    "start": "1116830",
    "end": "1123849"
  },
  {
    "text": "static class attributes here so the task",
    "start": "1123849",
    "end": "1129639"
  },
  {
    "text": "is a very simple thing is an integer and a routine occur routine so given task",
    "start": "1129639",
    "end": "1137379"
  },
  {
    "text": "which is a very straightforward thing we can now build the scheduler for running tasks right and I'm going to show you",
    "start": "1137379",
    "end": "1145359"
  },
  {
    "text": "the entire code for the scheduler it can be a very very straightforward simple thing so you see the constructor dunder",
    "start": "1145359",
    "end": "1152469"
  },
  {
    "text": "init there for the scheduler has a deck",
    "start": "1152469",
    "end": "1158379"
  },
  {
    "text": "of double ended queue of winnable tasks and we have two dictionaries the things",
    "start": "1158379",
    "end": "1164739"
  },
  {
    "text": "of the curly braces which contain any completed results on completed tasks or",
    "start": "1164739",
    "end": "1170619"
  },
  {
    "text": "any errors from tasks which have failed while they're executing the next message",
    "start": "1170619",
    "end": "1176409"
  },
  {
    "text": "there ad allows us to add or schedule a routine to be run by the scheduler and",
    "start": "1176409",
    "end": "1182619"
  },
  {
    "text": "you can see it as we just give it a routine it wraps it in a task and it appends it to the queue and then returns",
    "start": "1182619",
    "end": "1189759"
  },
  {
    "text": "the task ID for the new task that's just the return an integer and then we have",
    "start": "1189759",
    "end": "1195489"
  },
  {
    "text": "this run to completion I can get down to that so this function is the entirety of",
    "start": "1195489",
    "end": "1203129"
  },
  {
    "text": "the Co routine scheduling program so you",
    "start": "1203129",
    "end": "1210099"
  },
  {
    "text": "can see it's essentially a while loop and it says while we have some runnable tasks pop the next winnable task off the",
    "start": "1210099",
    "end": "1218259"
  },
  {
    "text": "queue call it task print the friendly message and then try to pass the task",
    "start": "1218259",
    "end": "1226080"
  },
  {
    "text": "routine to next ok and capture whatever result comes out of that into yielded",
    "start": "1226080",
    "end": "1232619"
  },
  {
    "text": "now when we call next several things can happen first thing that can happen is it",
    "start": "1232619",
    "end": "1238119"
  },
  {
    "text": "can raise stop iteration which means the task has completed so if it raises stop iteration you can see that we extract",
    "start": "1238119",
    "end": "1246909"
  },
  {
    "text": "the result of that task from stop to value and put it into the completed task",
    "start": "1246909",
    "end": "1252489"
  },
  {
    "text": "results dictionary against that tasks d okay the other thing that can happen",
    "start": "1252489",
    "end": "1257809"
  },
  {
    "text": "is it can raise some other exception I mean obviously it's a task it could be doing anything anything could go wrong",
    "start": "1257809",
    "end": "1262850"
  },
  {
    "text": "if it's some other exception other than stop iteration we capture that as e here",
    "start": "1262850",
    "end": "1269720"
  },
  {
    "text": "and put that into the dictionary of failed task errors the else block here",
    "start": "1269720",
    "end": "1276529"
  },
  {
    "text": "that's a kind of strange Python feature try else blocks are executed if there is no exception",
    "start": "1276529",
    "end": "1282200"
  },
  {
    "text": "so basically if it says yes next advanced without any exception being",
    "start": "1282200",
    "end": "1287450"
  },
  {
    "text": "raised we check that we get nothing back with your search statement there and we",
    "start": "1287450",
    "end": "1294230"
  },
  {
    "text": "take the task that we've just taken popped off the queue and executed and pop it back onto the other end of the",
    "start": "1294230",
    "end": "1299510"
  },
  {
    "text": "queue so you can go around again okay so we're just taking tasks off one end of the queue giving them one chance",
    "start": "1299510",
    "end": "1304880"
  },
  {
    "text": "to run and putting them back on the other end of the queue it's extremely simple thing as you can see it's just a",
    "start": "1304880",
    "end": "1311570"
  },
  {
    "text": "while loop and this will keep running while there are tasks in the queue so",
    "start": "1311570",
    "end": "1318679"
  },
  {
    "text": "let's see what this looks like when we execute it we import the scheduler and Stan she ate the scheduler and then I'm",
    "start": "1318679",
    "end": "1326539"
  },
  {
    "text": "going to add my async search tasks to the scheduler you can see there we're",
    "start": "1326539",
    "end": "1332059"
  },
  {
    "text": "looking for the first Lucas number with more than six digits and then I can run to completion and you can see because I",
    "start": "1332059",
    "end": "1338600"
  },
  {
    "text": "might cure only has one task in it it's just getting popped and pushed repeatedly as we go around you can see",
    "start": "1338600",
    "end": "1344720"
  },
  {
    "text": "it's yielding every time eventually that task will complete and there are no more",
    "start": "1344720",
    "end": "1350539"
  },
  {
    "text": "tasks left and we can pop the results out of the results dictionary there and get the answer great we've basically",
    "start": "1350539",
    "end": "1357350"
  },
  {
    "text": "written a while loop that calls next repeatedly and so as long as it can and it's not very exciting with one task but",
    "start": "1357350",
    "end": "1364279"
  },
  {
    "text": "this is completely sufficient for running of many tasks as you like so let's add two tasks here so here's find",
    "start": "1364279",
    "end": "1372020"
  },
  {
    "text": "the first Lucas number with more than with at least seven digits and the first Lucas number with at least nine digits",
    "start": "1372020",
    "end": "1378549"
  },
  {
    "text": "both of those tasks are added when they went to completion and you can see it's alternately running task 1 task to task",
    "start": "1378549",
    "end": "1384950"
  },
  {
    "text": "want us to one of those will complete earlier because it's a shorter problem to solve",
    "start": "1384950",
    "end": "1392149"
  },
  {
    "text": "then task 2 will continue running until we get to the completed result it's a",
    "start": "1392149",
    "end": "1397999"
  },
  {
    "text": "very very simple straightforward thing and we have concurrency right there's no parallelism parallelism here but there's",
    "start": "1397999",
    "end": "1405320"
  },
  {
    "text": "there's definitely concurrency happening we are dealing with more than one thing at the same time yeah and of course we",
    "start": "1405320",
    "end": "1413389"
  },
  {
    "text": "can get the results out okay so",
    "start": "1413389",
    "end": "1422989"
  },
  {
    "text": "searching for Lucas numbers is all well and good but it's the next part of the demonstration we need to do a little",
    "start": "1422989",
    "end": "1428259"
  },
  {
    "text": "computational work something that will take a bit more time so we're going to search for prime numbers so here's my",
    "start": "1428259",
    "end": "1438369"
  },
  {
    "text": "primarily prime allottee testing function is prime it's extremely naive I",
    "start": "1438369",
    "end": "1444349"
  },
  {
    "text": "wouldn't use this in production for finding prime numbers suits my purposes very well today it's very inefficient",
    "start": "1444349",
    "end": "1450080"
  },
  {
    "text": "and so it takes a long time and that's exactly what I want for the demonstration so you know finding",
    "start": "1450080",
    "end": "1457340"
  },
  {
    "text": "determining whether 12 or 13 is prime is obviously very quick but if some of those other calls they're like 2 to the",
    "start": "1457340",
    "end": "1463639"
  },
  {
    "text": "61 minus 1 you know that takes half an hour to figure out whether that is prime because Python for its wondrousness is",
    "start": "1463639",
    "end": "1470989"
  },
  {
    "text": "not a very fast language",
    "start": "1470989",
    "end": "1475239"
  },
  {
    "text": "I'm also going to introduce another function now very similar to the search function but rather than it another",
    "start": "1478360",
    "end": "1484690"
  },
  {
    "text": "co-routine in fact rather than it returning the first match in a sequence",
    "start": "1484690",
    "end": "1489940"
  },
  {
    "text": "it's going to print every match it's just going to keep iterating through the",
    "start": "1489940",
    "end": "1495100"
  },
  {
    "text": "'trouble and every item that matches we're just going to print it out okay and we can see it's a cool routine",
    "start": "1495100",
    "end": "1502180"
  },
  {
    "text": "because we have that yield in there so let's use our scheduler and add the",
    "start": "1502180",
    "end": "1512560"
  },
  {
    "text": "async print matches on the Lucas numbers which are prime ok so you can see now",
    "start": "1512560",
    "end": "1518500"
  },
  {
    "text": "that we're running and now and again the tasks will print out a message which",
    "start": "1518500",
    "end": "1523600"
  },
  {
    "text": "gets interleaved with the kind of logging messages which are coming out of the scheduler itself okay so nothing to",
    "start": "1523600",
    "end": "1532090"
  },
  {
    "text": "expected unexpected there but you can see the gaps between the prime Lucas numbers are increasing which is a useful",
    "start": "1532090",
    "end": "1538720"
  },
  {
    "text": "property for the demo now alongside us finding the prime Lucas",
    "start": "1538720",
    "end": "1547360"
  },
  {
    "text": "numbers I would like to do something else completely unrelated I would just like to print a message at fixed time",
    "start": "1547360",
    "end": "1554560"
  },
  {
    "text": "intervals okay so I have this other Co routine here repetitive message I can",
    "start": "1554560",
    "end": "1560170"
  },
  {
    "text": "give it a message string and an interval in seconds and every two seconds say it's just going to print that message so",
    "start": "1560170",
    "end": "1567250"
  },
  {
    "text": "you can see we have a couple of loops here we have the infinite while loop which just runs forever and the inner while loop which is",
    "start": "1567250",
    "end": "1574120"
  },
  {
    "text": "essentially a sleep routine in there very simple function we need to make",
    "start": "1574120",
    "end": "1583180"
  },
  {
    "text": "this into a cool routine so we can run it in our scheduler so we insert the yield at the bottom there and as I've",
    "start": "1583180",
    "end": "1591010"
  },
  {
    "text": "done with my other functions we rename it to async repetitive message just to",
    "start": "1591010",
    "end": "1596170"
  },
  {
    "text": "remind us that this is a KO routine rather than just a regular Python function there's a subtle bug here and",
    "start": "1596170",
    "end": "1603940"
  },
  {
    "text": "these things are subtle enough that they they're quite easy to miss and you need",
    "start": "1603940",
    "end": "1610330"
  },
  {
    "text": "to you do need to sit down and think about your code quite carefully and the bug is that if interval seconds is",
    "start": "1610330",
    "end": "1616510"
  },
  {
    "text": "really short the KO routine will never yield alright so you need to be very careful about where you put yield",
    "start": "1616510",
    "end": "1622630"
  },
  {
    "text": "statements in your code through easy to fix we just need to change the ordering of things it doesn't really matter when",
    "start": "1622630",
    "end": "1628630"
  },
  {
    "text": "we yield in this routine in terms of how it behaves other than the fact that with",
    "start": "1628630",
    "end": "1634540"
  },
  {
    "text": "small numbers it might never be interrupted or will never yield control back to the scheduler so it's important",
    "start": "1634540",
    "end": "1641650"
  },
  {
    "text": "to make sure that your co-routines either complete is essentially instantaneously they can just return the",
    "start": "1641650",
    "end": "1646990"
  },
  {
    "text": "result right now or they yield at least once okay very important property of",
    "start": "1646990",
    "end": "1653620"
  },
  {
    "text": "these things otherwise you've built something that can stall your whole system",
    "start": "1653620",
    "end": "1659250"
  },
  {
    "text": "so let's plug these things into our a little scheduler here so I'm going to",
    "start": "1659250",
    "end": "1665850"
  },
  {
    "text": "import my repetitive message co-routine my print match is cout routine my Lucas",
    "start": "1665850",
    "end": "1673230"
  },
  {
    "text": "numbers generator and my priority tester instantiate the scheduler well schedule",
    "start": "1673230",
    "end": "1678990"
  },
  {
    "text": "early with the repetitive message I spent far too long in airports so this is kind of imprinted in my my mind and",
    "start": "1678990",
    "end": "1686669"
  },
  {
    "text": "we'll do the Lucas numbers search and then we'll rent a completion my clicker",
    "start": "1686669",
    "end": "1692700"
  },
  {
    "text": "works",
    "start": "1692700",
    "end": "1694970"
  },
  {
    "text": "okay stop it's great running it's printed the message unattended baggage going off you can see it's running task",
    "start": "1699320",
    "end": "1706440"
  },
  {
    "text": "zero and task one alternately but it seems to have stalled right in spite of",
    "start": "1706440",
    "end": "1712140"
  },
  {
    "text": "the fact that these are co-routines something's are stalled here and the",
    "start": "1712140",
    "end": "1719310"
  },
  {
    "text": "problem is is that even though async print matches is non-blocking and we've designed it that way is prime function",
    "start": "1719310",
    "end": "1727170"
  },
  {
    "text": "for small prime numbers it returns the result effectively instantaneously but the large prime numbers it takes a long",
    "start": "1727170",
    "end": "1733290"
  },
  {
    "text": "time to determine whether that number is prime in our horribly inefficient Python",
    "start": "1733290",
    "end": "1738390"
  },
  {
    "text": "code so these prime function is now essentially blocking progress of the system and you can see it's getting hung",
    "start": "1738390",
    "end": "1744330"
  },
  {
    "text": "up on tasks zero and because it's getting hung up on task zero task 1",
    "start": "1744330",
    "end": "1749610"
  },
  {
    "text": "which is supposed to be printing a message every couple of seconds is not getting an opportunity to run so the",
    "start": "1749610",
    "end": "1757530"
  },
  {
    "text": "guideline here which is that essentially everything you call transitively",
    "start": "1757530",
    "end": "1762570"
  },
  {
    "text": "pharmaco routine needs to be non blocking that doesn't necessarily NEET mean it needs to be another Co routine",
    "start": "1762570",
    "end": "1769320"
  },
  {
    "text": "it could be non blocking in other ways by using threading for example but it mustn't block okay so essentially Co",
    "start": "1769320",
    "end": "1778200"
  },
  {
    "text": "routines and these kind of programs are contagious to Cawley's if you are a Co",
    "start": "1778200",
    "end": "1783210"
  },
  {
    "text": "routine the things you call should probably also be Co routines or at least non blocking so we have a print matches",
    "start": "1783210",
    "end": "1791310"
  },
  {
    "text": "function print matches Co routine calling a regular function we need to make that regular function itself into a",
    "start": "1791310",
    "end": "1797370"
  },
  {
    "text": "cou routine so we take out is prime function and we know how to make these",
    "start": "1797370",
    "end": "1803010"
  },
  {
    "text": "into pro routines now we just stick a yield in there so we put a yield in the in the loop there now a think is playing",
    "start": "1803010",
    "end": "1810360"
  },
  {
    "text": "as a generator it will return a generator object on we call it because",
    "start": "1810360",
    "end": "1815700"
  },
  {
    "text": "it returns a generator object we need to call it differently and the way in Python 3 we yield from kind of nested",
    "start": "1815700",
    "end": "1824490"
  },
  {
    "text": "inner generators is by using yield from the saves of having to write another for loop in the calling function",
    "start": "1824490",
    "end": "1830940"
  },
  {
    "text": "to iterate the Cawley generator when we",
    "start": "1830940",
    "end": "1840360"
  },
  {
    "text": "do this it turns out that this bear with bear yield which is a kind of term I've invented here is no longer needed it's",
    "start": "1840360",
    "end": "1847770"
  },
  {
    "text": "no longer needed because the function we're calling on the right has the bear yield in it as well and that seems kind",
    "start": "1847770",
    "end": "1856470"
  },
  {
    "text": "of irrelevant at this point if we left it in there async quick matches would yield to the scheduler twice per",
    "start": "1856470",
    "end": "1863400"
  },
  {
    "text": "iteration rather than once that may or may not be a problem depending on what you're doing but the point is it's",
    "start": "1863400",
    "end": "1870660"
  },
  {
    "text": "unnecessary and in fact eliminating that bear yield there is an important part of",
    "start": "1870660",
    "end": "1875820"
  },
  {
    "text": "a refactoring that's coming up quite soon factors part of the refactoring",
    "start": "1875820",
    "end": "1881520"
  },
  {
    "text": "that's already started you just haven't realized yet so the second rule is that",
    "start": "1881520",
    "end": "1888420"
  },
  {
    "text": "everything that calls transitively to occur routine must iterate the generator because the KO routines are packaged as",
    "start": "1888420",
    "end": "1897450"
  },
  {
    "text": "generator objects so co-routines are also contagious to callers not just",
    "start": "1897450",
    "end": "1902700"
  },
  {
    "text": "colleagues so you can quickly see how these two rules taken together cause",
    "start": "1902700",
    "end": "1908670"
  },
  {
    "text": "your whole program to be need to be written in a particular style right so",
    "start": "1908670",
    "end": "1914040"
  },
  {
    "text": "if you start out with a sequential synchronous program converting it to this kind of programming style is not",
    "start": "1914040",
    "end": "1921120"
  },
  {
    "text": "necessarily straightforward because of this property that it's contagious down the call stack and contagious up the",
    "start": "1921120",
    "end": "1927210"
  },
  {
    "text": "call stack so this is one of the I would say this is an architectural a significant decision because changing",
    "start": "1927210",
    "end": "1933660"
  },
  {
    "text": "your mind about how you structure your program is going to be quite costly later on so it's something one of the",
    "start": "1933660",
    "end": "1939150"
  },
  {
    "text": "things you want to make your mind up about earlier on in software development rather than later",
    "start": "1939150",
    "end": "1945950"
  },
  {
    "text": "right so we're going to do a little refactoring now so going back to our async repetitive message we have the two",
    "start": "1947230",
    "end": "1958700"
  },
  {
    "text": "loops here and if you think about it the inner loop here with the prelude to it",
    "start": "1958700",
    "end": "1964100"
  },
  {
    "text": "is really a sleep function that's what you're doing sleep so we're going to do an extract co-routine refactoring and",
    "start": "1964100",
    "end": "1972260"
  },
  {
    "text": "we're going to pull out a separate sleep Co routine here okay so now repetitive",
    "start": "1972260",
    "end": "1978530"
  },
  {
    "text": "message now all it does is print the message yields from the sleep KO routine",
    "start": "1978530",
    "end": "1983870"
  },
  {
    "text": "and the the inner loop is now moved out into that overcoat routine so this is",
    "start": "1983870",
    "end": "1989630"
  },
  {
    "text": "also a very significant refactoring as you'll see shortly async sleep has some",
    "start": "1989630",
    "end": "1995720"
  },
  {
    "text": "interesting properties it always yields at least once async sleep Xero yields",
    "start": "1995720",
    "end": "2003220"
  },
  {
    "text": "exactly once and because async 0:18",
    "start": "2003220",
    "end": "2009880"
  },
  {
    "text": "sleep Xero yields exactly once any occurrence of the bare yield anywhere",
    "start": "2009880",
    "end": "2015370"
  },
  {
    "text": "else in our program can be replaced by yield form async sleep zero now then",
    "start": "2015370",
    "end": "2020740"
  },
  {
    "text": "that might not seem like any kind of win at all because we've replaced one word with three and a method call but it is",
    "start": "2020740",
    "end": "2029440"
  },
  {
    "text": "an important refactoring and it's one of those interesting cases we're on the way",
    "start": "2029440",
    "end": "2034540"
  },
  {
    "text": "to simplify and code you have to write more code and the code kind of blooms up before kind of magically shrinking down",
    "start": "2034540",
    "end": "2040420"
  },
  {
    "text": "as all these things cancel out so that's an important step there so then we can",
    "start": "2040420",
    "end": "2047560"
  },
  {
    "text": "take all of our other yield at bear yields and replace them with yield form async sleep zero and when we do that",
    "start": "2047560",
    "end": "2054760"
  },
  {
    "text": "it's important because now we have only one bear yield in the entire program and",
    "start": "2054760",
    "end": "2060370"
  },
  {
    "text": "that is buried deep inside async sleep right that's an important quality",
    "start": "2060370",
    "end": "2068639"
  },
  {
    "text": "so we have plenty of yield Franz but only one yield so our other co-routines",
    "start": "2069550",
    "end": "2078858"
  },
  {
    "text": "are now relying on async sleep and of",
    "start": "2078859",
    "end": "2084470"
  },
  {
    "text": "course we know it's a refactoring in spite of my total absence of tests here because it behaves exactly the same when",
    "start": "2084470",
    "end": "2093770"
  },
  {
    "text": "we run it we schedule our repetitive message just not refactoring from what",
    "start": "2093770",
    "end": "2102260"
  },
  {
    "text": "from the last demo video I showed you because we're now fix the there is prime",
    "start": "2102260",
    "end": "2108410"
  },
  {
    "text": "function to be interrupts abour so now you can see we're finding the prime lucas numbers and we're printing the",
    "start": "2108410",
    "end": "2115099"
  },
  {
    "text": "messages and both of those tasks are nicely interleave because all of our",
    "start": "2115099",
    "end": "2120319"
  },
  {
    "text": "functions are co-routines and therefore they are non blocking now",
    "start": "2120319",
    "end": "2125690"
  },
  {
    "text": "in the 90 minute version of this talk I make you wait for the next prime number but we only have 60 minutes today so",
    "start": "2125690",
    "end": "2131809"
  },
  {
    "text": "we'll keep going okay so at this point I",
    "start": "2131809",
    "end": "2139460"
  },
  {
    "text": "have built something that is functionally equivalent some very",
    "start": "2139460",
    "end": "2144770"
  },
  {
    "text": "important pieces of Python threes async i/o without using any facing code",
    "start": "2144770",
    "end": "2150290"
  },
  {
    "text": "it's just generates functions and a super simple scheduler that literally",
    "start": "2150290",
    "end": "2155329"
  },
  {
    "text": "fits on one slide well what I'm going to do in the next part of the talk part 3",
    "start": "2155329",
    "end": "2160760"
  },
  {
    "text": "of the talk is take that code I've just written and transform it actually mechanically transform it into",
    "start": "2160760",
    "end": "2166990"
  },
  {
    "text": "legitimate Python 3 async i/o code and I",
    "start": "2166990",
    "end": "2173150"
  },
  {
    "text": "think it is important because it demonstrates that there is no magic in async i/o right you've seen you've just",
    "start": "2173150",
    "end": "2179329"
  },
  {
    "text": "seen all the magic could you know it's like all of these things I'm sure open the box understand what's inside it's really really very simple so on this",
    "start": "2179329",
    "end": "2188510"
  },
  {
    "text": "slide I'm showing you I think all of the code except for the scheduler which I've",
    "start": "2188510",
    "end": "2193819"
  },
  {
    "text": "created up to this point all the functions there and I'm going to",
    "start": "2193819",
    "end": "2199250"
  },
  {
    "text": "mechanically refactor this so the first step is every time I've death a sink foo we are now going to",
    "start": "2199250",
    "end": "2206280"
  },
  {
    "text": "write a sink desk through okay so we're using some key words that came into",
    "start": "2206280",
    "end": "2212099"
  },
  {
    "text": "Python 3.5 here so you can see all micro routines and our async death the next",
    "start": "2212099",
    "end": "2220559"
  },
  {
    "text": "thing I'm going to do is just import a sink i/o the reason I imported a sink",
    "start": "2220559",
    "end": "2231119"
  },
  {
    "text": "i/o is so that I can call a sink IOT's sleep function rather than my sleep function so I'm going to replace all the",
    "start": "2231119",
    "end": "2237569"
  },
  {
    "text": "calls to a sink underscore sleep with a sink i/o dot sleep so that's that now",
    "start": "2237569",
    "end": "2246150"
  },
  {
    "text": "I've done that I'm not using my sleep function so we could we can get out of that and have less less code which is",
    "start": "2246150",
    "end": "2252240"
  },
  {
    "text": "great finally I'm going to replace all occurrences of yields from with a wage",
    "start": "2252240",
    "end": "2258660"
  },
  {
    "text": "which is another new keyword in Python 3 point signs so now we have this okay",
    "start": "2258660",
    "end": "2264839"
  },
  {
    "text": "and this is a completely mechanical refactoring obviously I did this by hand I mean you could imagine writing a",
    "start": "2264839",
    "end": "2270900"
  },
  {
    "text": "program to do this it's very very straightforward so let's see what",
    "start": "2270900",
    "end": "2276119"
  },
  {
    "text": "behavior we get now the indications here a little bit different because now I'm using some async i/o stuff so I I get I",
    "start": "2276119",
    "end": "2283260"
  },
  {
    "text": "get the async i/o event loop I no longer need my own scheduler here and I now called create task you can see it",
    "start": "2283260",
    "end": "2289980"
  },
  {
    "text": "returns a task object that's an async i/o task object not one of my task objects but it's essentially exactly the",
    "start": "2289980",
    "end": "2298980"
  },
  {
    "text": "same idea so now we've skipped their scheduler I can run forever and you see",
    "start": "2298980",
    "end": "2305880"
  },
  {
    "text": "we get exactly the same behavior that we just had except now we're using pythons",
    "start": "2305880",
    "end": "2312089"
  },
  {
    "text": "event loop and pythons tasks and pythons futures and all these other things",
    "start": "2312089",
    "end": "2317609"
  },
  {
    "text": "rather than the very simple ones that I showed you previously turns out that the Python ones aren't actually very much",
    "start": "2317609",
    "end": "2324480"
  },
  {
    "text": "more complicated conceptually than what I've showed you earlier",
    "start": "2324480",
    "end": "2330180"
  },
  {
    "text": "so let's not wait for the big prime numbers so having understood the",
    "start": "2330180",
    "end": "2337650"
  },
  {
    "text": "concepts of how async IO and a sink and a weight working Python it turns out",
    "start": "2337650",
    "end": "2344849"
  },
  {
    "text": "that async and await in Python are implemented essentially using generator functions we can move on a little",
    "start": "2344849",
    "end": "2350940"
  },
  {
    "text": "further and see what else a sink IO library gives us for working with these",
    "start": "2350940",
    "end": "2356760"
  },
  {
    "text": "kind of objects so async IO in async",
    "start": "2356760",
    "end": "2361950"
  },
  {
    "text": "code co-routines a used to implement tasks co-routines a wait other co-routines",
    "start": "2361950",
    "end": "2367049"
  },
  {
    "text": "we have an event loop which schedules concurrent tasks tasks must not block a",
    "start": "2367049",
    "end": "2375380"
  },
  {
    "text": "waiting facilitates context switches between the tasks every time your wait that's an opportunity to that's when you",
    "start": "2375380",
    "end": "2382559"
  },
  {
    "text": "yield control back to the event loop and it may choose to continue running your task or some other task but you can be",
    "start": "2382559",
    "end": "2389039"
  },
  {
    "text": "sure that eventually control will come back to you and in async IO you're not",
    "start": "2389039",
    "end": "2395369"
  },
  {
    "text": "allowed to use the bare yield if you just want to yield control to the scheduler the way you do that is by a",
    "start": "2395369",
    "end": "2400740"
  },
  {
    "text": "waiting facing higher loop to 0 which as I've shown is equivalent to that bare",
    "start": "2400740",
    "end": "2407039"
  },
  {
    "text": "yield just a note on terminology I feel",
    "start": "2407039",
    "end": "2413819"
  },
  {
    "text": "I find people aren't very precise when they're writing about these things and documentation which I can be very",
    "start": "2413819",
    "end": "2420480"
  },
  {
    "text": "confusing sometimes so the thing on the left is a KO routine it's a bunch of code and it's callable we call it the",
    "start": "2420480",
    "end": "2428640"
  },
  {
    "text": "thing on the right is a co routine object which is the code plus its",
    "start": "2428640",
    "end": "2434279"
  },
  {
    "text": "execution stage it's executing code and those things are awaited which is a new",
    "start": "2434279",
    "end": "2439529"
  },
  {
    "text": "concept in Python 3.5 so if you are",
    "start": "2439529",
    "end": "2444990"
  },
  {
    "text": "writing documentation about these things please try to be precise because then I can understand your documentation",
    "start": "2444990",
    "end": "2452990"
  },
  {
    "text": "so anything kayo gives us some other tools like futures so a future",
    "start": "2453810",
    "end": "2460560"
  },
  {
    "text": "encapsulate the idea of a potential results or potential error so here I",
    "start": "2460560",
    "end": "2467080"
  },
  {
    "text": "have a front row routine they're",
    "start": "2467080",
    "end": "2472210"
  },
  {
    "text": "monitored search which as you can see just delegates with the weight to the search I wrote earlier except that it it",
    "start": "2472210",
    "end": "2483130"
  },
  {
    "text": "also accepts a future object and the future is descent essentially the future",
    "start": "2483130",
    "end": "2488860"
  },
  {
    "text": "we can either set it with the results to say yes there is the potential result",
    "start": "2488860",
    "end": "2494890"
  },
  {
    "text": "has been realized or we can call set exception and say an error occurred so",
    "start": "2494890",
    "end": "2500590"
  },
  {
    "text": "it's a signaling mechanism that we can use to communicate between tasks I also",
    "start": "2500590",
    "end": "2505750"
  },
  {
    "text": "have another co-routine there monitor future which will accept the same future object and every interval seconds would",
    "start": "2505750",
    "end": "2513760"
  },
  {
    "text": "print out the state of that future so if the future is not done so while future",
    "start": "2513760",
    "end": "2518980"
  },
  {
    "text": "not done print waiting okay and you'll see at the the main program down at the",
    "start": "2518980",
    "end": "2524470"
  },
  {
    "text": "bottom there I have that call to create future when I pass the same future instance into monitored search and",
    "start": "2524470",
    "end": "2532390"
  },
  {
    "text": "monitor future so we're going to run these two tasks simultaneously but they're both using the same future",
    "start": "2532390",
    "end": "2538180"
  },
  {
    "text": "instance to essentially communicate lots",
    "start": "2538180",
    "end": "2544060"
  },
  {
    "text": "of notice when I run this on the right there we get an error form async i/o the event loop saying hang on when this",
    "start": "2544060",
    "end": "2549940"
  },
  {
    "text": "program finished there is a task destroy I had to destroy a task but it was still running it hasn't completed cleanly",
    "start": "2549940",
    "end": "2555910"
  },
  {
    "text": "we'll come back and fix that error later when you're creating futures in async oh",
    "start": "2555910",
    "end": "2563860"
  },
  {
    "text": "you should have there's a very tempting constructor which is the future constructor you should really avoid calling it the problem with calling the",
    "start": "2563860",
    "end": "2570880"
  },
  {
    "text": "constructor is that event loop implementations and there are several our loud to specialize the future",
    "start": "2570880",
    "end": "2576880"
  },
  {
    "text": "implementation if you call that constricted directly you bypass that specialization so you should always call",
    "start": "2576880",
    "end": "2584140"
  },
  {
    "text": "a factory function instead or the event loop which Hall gives the event loop the opportunity to give you a",
    "start": "2584140",
    "end": "2590790"
  },
  {
    "text": "different future so for example the way futures the way the event loop is implemented on Windows is completely",
    "start": "2590790",
    "end": "2597060"
  },
  {
    "text": "different from how its implemented on UNIX so the implementations those futures can then differ when we call",
    "start": "2597060",
    "end": "2604050"
  },
  {
    "text": "this factory function turns out in what",
    "start": "2604050",
    "end": "2610020"
  },
  {
    "text": "I view is a particularly dubious use of inheritance which is not the first time",
    "start": "2610020",
    "end": "2615089"
  },
  {
    "text": "this has happened in Python land is that a task is a future in async i/o so we",
    "start": "2615089",
    "end": "2623880"
  },
  {
    "text": "don't necessarily have to create futures in order to monitor their progress we can actually just directly monitor a",
    "start": "2623880",
    "end": "2631080"
  },
  {
    "text": "task so I've changed my program on the right here so that it does no longer creates the future we no longer need to",
    "start": "2631080",
    "end": "2637080"
  },
  {
    "text": "do that and where we monitor the future down at the bottom I have loop create tasks and monitor future we actually",
    "start": "2637080",
    "end": "2643770"
  },
  {
    "text": "pass the search tasking directly to monitor it and we're allowed to do that because the task is a future the reason",
    "start": "2643770",
    "end": "2650700"
  },
  {
    "text": "I say that this inheritance is dubious is that calling things like set exception on a task is something you",
    "start": "2650700",
    "end": "2658290"
  },
  {
    "text": "should never really need to do and it's a pretty questionable API design",
    "start": "2658290",
    "end": "2667250"
  },
  {
    "text": "yes oh there we are tacky the future so we can directly monitor the task rather",
    "start": "2670930",
    "end": "2676180"
  },
  {
    "text": "than the future when it comes to",
    "start": "2676180",
    "end": "2681460"
  },
  {
    "text": "creating few tasks again there's a very tempting task constructor and for the",
    "start": "2681460",
    "end": "2689980"
  },
  {
    "text": "same reasons as futures you shouldn't ever use this even though it's there in the API because it's the same reasons it",
    "start": "2689980",
    "end": "2697299"
  },
  {
    "text": "prevents the event loops specializing the implementation you should prefer to call the create task factory function",
    "start": "2697299",
    "end": "2703230"
  },
  {
    "text": "even better and in a particularly confusing way the correct way to create",
    "start": "2703230",
    "end": "2709119"
  },
  {
    "text": "a task in async IO is to call a thing called ensure future right this is",
    "start": "2709119",
    "end": "2714630"
  },
  {
    "text": "obscure but it is the right way to do it it's more general in that it accepts a",
    "start": "2714630",
    "end": "2722140"
  },
  {
    "text": "weight of balls not just co-routines and it's also idempotent so you can it will avoid wrapping the same task up in more",
    "start": "2722140",
    "end": "2728859"
  },
  {
    "text": "and more tasks if you happen to call it more than once",
    "start": "2728859",
    "end": "2733559"
  },
  {
    "text": "so yeah in spite of its confusing name it does actually return a task so I if",
    "start": "2734609",
    "end": "2742660"
  },
  {
    "text": "you get the sense that some of this just kind of released to the world prematurely but now we can never go back and fix the API I would agree with that",
    "start": "2742660",
    "end": "2750690"
  },
  {
    "text": "so we are using ensure future to create our tasks that's the right way to do it",
    "start": "2753869",
    "end": "2760329"
  },
  {
    "text": "I definitely need a new battery and my clicker unexpended so I pointed out",
    "start": "2760329",
    "end": "2766420"
  },
  {
    "text": "earlier this bug if you like in my program that one of our tasks is not",
    "start": "2766420",
    "end": "2772119"
  },
  {
    "text": "being correctly wound up that's because our search task completes and if you",
    "start": "2772119",
    "end": "2777220"
  },
  {
    "text": "look at the bottom on my main program there I'm doing run until complete search tasks so as soon as the search tasks we've done completely",
    "start": "2777220",
    "end": "2783579"
  },
  {
    "text": "exit but the monitor task is still running so we would like to wind up the",
    "start": "2783579",
    "end": "2789220"
  },
  {
    "text": "monitor tasks gracefully rather than just killing it so to do that we want to",
    "start": "2789220",
    "end": "2795730"
  },
  {
    "text": "wait oops to do that we want to wait for more than one task and the way we do that in async i/o is using this gather",
    "start": "2795730",
    "end": "2802420"
  },
  {
    "text": "function you can see at the bottom there so gather allows us to combine multiple futures into one essentially it says",
    "start": "2802420",
    "end": "2808690"
  },
  {
    "text": "give me one future that represents the completion of all these other futures so I've created a task I've created a",
    "start": "2808690",
    "end": "2816130"
  },
  {
    "text": "future called search in one of the future by gathering the search tasks on the monitor tasks and now when I do that",
    "start": "2816130",
    "end": "2823210"
  },
  {
    "text": "we get the graceful cleanup gather",
    "start": "2823210",
    "end": "2831220"
  },
  {
    "text": "accepts any number of away table objects which includes futures tasks co-routines",
    "start": "2831220",
    "end": "2838350"
  },
  {
    "text": "okay we haven't talked yet a bit aiyoh so if you look at the event loop api",
    "start": "2838350",
    "end": "2844210"
  },
  {
    "text": "it's huge it has all this stuff in it starting and stopping the event loop scheduling callbacks Factory as I've",
    "start": "2844210",
    "end": "2850540"
  },
  {
    "text": "told you you shouldn't use configuration stuff you really need that's not even the half of it there's exception handling the",
    "start": "2850540",
    "end": "2857140"
  },
  {
    "text": "Diagnostics the signal handling we can run blocking code in other threads or processes there's low level socket",
    "start": "2857140",
    "end": "2864400"
  },
  {
    "text": "operations in there this is all one class it's incredible well even more",
    "start": "2864400",
    "end": "2869440"
  },
  {
    "text": "there's protocol based SSL TCP socket servers we can watch file descriptors we",
    "start": "2869440",
    "end": "2875320"
  },
  {
    "text": "can connect to pipes this is a very substantial public API to the abstract event loop the question is",
    "start": "2875320",
    "end": "2882460"
  },
  {
    "text": "what's all this i/o stuff doing in the event loop so finally we get on to IO so",
    "start": "2882460",
    "end": "2888340"
  },
  {
    "text": "we've got this far talking about kuroh teams without really talking about why we care well the reason all this i/o",
    "start": "2888340",
    "end": "2894670"
  },
  {
    "text": "stuff is in the event loop is to do with when tasks are run so the scheduler I built earlier is super simple",
    "start": "2894670",
    "end": "2901270"
  },
  {
    "text": "round-robin scheduler it just clocks around the tasks for an engaging turn the tasks are in a very simple circular",
    "start": "2901270",
    "end": "2909220"
  },
  {
    "text": "order if instead we had an i/o aware scheduler that could use a pole or",
    "start": "2909220",
    "end": "2916690"
  },
  {
    "text": "select on UNIX or IO completion ports on Windows we can be a bit smarter about",
    "start": "2916690",
    "end": "2923410"
  },
  {
    "text": "when we schedule the tasks and we can distinguish between tasks which are ready to run or are waiting on i/o so",
    "start": "2923410",
    "end": "2932200"
  },
  {
    "text": "essentially that's why we have all this i/o related stuff in the event loop API it's because we have an eye",
    "start": "2932200",
    "end": "2938319"
  },
  {
    "text": "go away event loop which can be a bit smarter about when it rink runs things so it will skip a task which is waiting",
    "start": "2938319",
    "end": "2947229"
  },
  {
    "text": "on IO but then when the data becomes available we can immediately go back and",
    "start": "2947229",
    "end": "2952630"
  },
  {
    "text": "run that before proceeding so it enables us to be smart about scheduling which",
    "start": "2952630",
    "end": "2959529"
  },
  {
    "text": "enables us to reduce the latency okay so",
    "start": "2959529",
    "end": "2968880"
  },
  {
    "text": "the async i/o library in Python has this pretty substantial Tower of abstractions",
    "start": "2968880",
    "end": "2976959"
  },
  {
    "text": "layered upon top of each other we've seen at the bottom that we can build resumable and suspend suspend herbal",
    "start": "2976959",
    "end": "2984099"
  },
  {
    "text": "functions co-routines using generators on top of that we have tasks which in",
    "start": "2984099",
    "end": "2991719"
  },
  {
    "text": "conjunction with the i/o aware event loop can await on sockets and file descriptors and things on top of that",
    "start": "2991719",
    "end": "2998469"
  },
  {
    "text": "async i/o gives us transports and channels which are a higher level",
    "start": "2998469",
    "end": "3004019"
  },
  {
    "text": "abstraction when I'm dealing with a transport I don't need to care about whether I'm dealing with a file or a socket or a pipe it's kind of one level",
    "start": "3004019",
    "end": "3012150"
  },
  {
    "text": "of abstraction up from all of that on top of that it layers a thing called protocols which deals with the lifecycle",
    "start": "3012150",
    "end": "3018839"
  },
  {
    "text": "of connections so connected but a connection created we're working with a",
    "start": "3018839",
    "end": "3025890"
  },
  {
    "text": "connection connection closed and on top of that we have another co-routine based",
    "start": "3025890",
    "end": "3030930"
  },
  {
    "text": "api which is a much higher level use of co-routines so we have 10 minutes left",
    "start": "3030930",
    "end": "3040519"
  },
  {
    "text": "let's see if we can quickly get through some of these I'm going to show you the",
    "start": "3040519",
    "end": "3046249"
  },
  {
    "text": "protocol based api quickly without a demo and then I'll show a stream based API with a demo so this is a simple chat",
    "start": "3046249",
    "end": "3053609"
  },
  {
    "text": "room which is going to consist of two classes this chatroom class and a",
    "start": "3053609",
    "end": "3059489"
  },
  {
    "text": "protocol class and you can see that the chatroom is very simple as a name as a port which we listen on an event loop",
    "start": "3059489",
    "end": "3067769"
  },
  {
    "text": "and some mapping of user names to transport these async i/o transport",
    "start": "3067769",
    "end": "3074249"
  },
  {
    "text": "objects when we run the server with this",
    "start": "3074249",
    "end": "3082529"
  },
  {
    "text": "create server call to the event loop we give it essentially a callback and it will call this it will instantiate a",
    "start": "3082529",
    "end": "3089279"
  },
  {
    "text": "protocol instance for each new connection to the chatroom and you'll see this protocol class in just a moment",
    "start": "3089279",
    "end": "3096209"
  },
  {
    "text": "and then there are some functions in here to deal with new connections which",
    "start": "3096209",
    "end": "3101369"
  },
  {
    "text": "worry register users and do registering users when they leave the chatroom so all this is on github so you can look at",
    "start": "3101369",
    "end": "3109229"
  },
  {
    "text": "it later in detail but it's a very simple thing what's important here is the protocol which I said protocols are",
    "start": "3109229",
    "end": "3116670"
  },
  {
    "text": "callback based API so here's the protocol one of these is instantiated for each new connection to the chatroom",
    "start": "3116670",
    "end": "3123089"
  },
  {
    "text": "you can see as a reference back to the chatroom and it corresponds to a particular username and it has it will own a",
    "start": "3123089",
    "end": "3131059"
  },
  {
    "text": "transport which is the actual channel that we can use to communicate with the user here are the three functions that",
    "start": "3131059",
    "end": "3138269"
  },
  {
    "text": "will be called and the state machine here so they think IO will call on your",
    "start": "3138269",
    "end": "3144180"
  },
  {
    "text": "protocol it will call connection made exactly once they will call data received as many times as data arrives",
    "start": "3144180",
    "end": "3150059"
  },
  {
    "text": "and it will call connection once lost exactly once when you finish the problem with working",
    "start": "3150059",
    "end": "3156390"
  },
  {
    "text": "with their this protocol based API an async i/o is you have to do a lot of",
    "start": "3156390",
    "end": "3162029"
  },
  {
    "text": "work particularly dealing with text data in doing things like finding ends of lines and positioning a chunk of bytes",
    "start": "3162029",
    "end": "3168449"
  },
  {
    "text": "that arrives at you over a socket basically this up to you to find the frames of data within that so it's",
    "start": "3168449",
    "end": "3174989"
  },
  {
    "text": "relatively low-level I'm not going to go through all this now I guess what's",
    "start": "3174989",
    "end": "3180150"
  },
  {
    "text": "important here as you saw on that note that's just flown by is that because",
    "start": "3180150",
    "end": "3185729"
  },
  {
    "text": "only one of these proteins is running at any given instant we don't have to look",
    "start": "3185729",
    "end": "3192599"
  },
  {
    "text": "any of the shared mutable state right because we know that nobody else is modifying that at any given instant so",
    "start": "3192599",
    "end": "3199469"
  },
  {
    "text": "we have shared mutable state between tasks but we don't need to lock okay so normally I would give a demo",
    "start": "3199469",
    "end": "3207920"
  },
  {
    "text": "here I'm a little short of time today I'm not going to give you a callback based demo but I'll show you the",
    "start": "3207920",
    "end": "3214069"
  },
  {
    "text": "stream-based demo I don't need to do both demos because the user experience of the demos is identical so that was",
    "start": "3214069",
    "end": "3223279"
  },
  {
    "text": "the callback based protocol Stefan async i/o let's look at a co-routine based one",
    "start": "3223279",
    "end": "3230660"
  },
  {
    "text": "and the coyote and stuff is much nicer to work with for this reason is that we",
    "start": "3230660",
    "end": "3236420"
  },
  {
    "text": "avoid these horrible we can avoid some really horrible nested callbacks and",
    "start": "3236420",
    "end": "3241579"
  },
  {
    "text": "this kind of this pyramid of doom that you get with this kind of nesting here where we're awaiting tasks on callbacks",
    "start": "3241579",
    "end": "3248329"
  },
  {
    "text": "a wait allows us to transform that kind of horrible code on the left into",
    "start": "3248329",
    "end": "3253490"
  },
  {
    "text": "something exactly equivalent and form on the right so I hope you'll agree it's much easier to read and reason about",
    "start": "3253490",
    "end": "3260180"
  },
  {
    "text": "what's going on and easier to get right so what I just showed you the protocols",
    "start": "3260180",
    "end": "3267109"
  },
  {
    "text": "are those three callbacks connection made lost and receive was the protocol level API let's look at the stream based",
    "start": "3267109",
    "end": "3273440"
  },
  {
    "text": "API this is exactly the same program chatroom and do it in one class now",
    "start": "3273440",
    "end": "3280089"
  },
  {
    "text": "what's important here is that start that the run method here start server does",
    "start": "3280089",
    "end": "3285859"
  },
  {
    "text": "invoke a callback client connected and that's a KO routine and that will be that KO routine will be called once per",
    "start": "3285859",
    "end": "3293269"
  },
  {
    "text": "user connected to the chatroom let's just look at that client connected routine what's interesting is this",
    "start": "3293269",
    "end": "3301249"
  },
  {
    "text": "function can take a very long time to run if you connect to the chatroom for a week it takes a week to execute this",
    "start": "3301249",
    "end": "3308630"
  },
  {
    "text": "function write this function with co-routine client active is the entire",
    "start": "3308630",
    "end": "3314660"
  },
  {
    "text": "life cycle of a particular users connection to the chatroom okay so you",
    "start": "3314660",
    "end": "3320329"
  },
  {
    "text": "can see when they arrive we say welcome then we just await user registration we're going to ask them to register and",
    "start": "3320329",
    "end": "3326329"
  },
  {
    "text": "we just sit there and wait until they register and we because we're using a wait other connections have",
    "start": "3326329",
    "end": "3331369"
  },
  {
    "text": "opportunities to come and go then when they're registered we tell everybody else that your users arrived",
    "start": "3331369",
    "end": "3337440"
  },
  {
    "text": "and then we await user activity so other people can be using the chatroom",
    "start": "3337440",
    "end": "3342570"
  },
  {
    "text": "and then eventually the connection will be closed and they will leave that might be a week later right might be a month",
    "start": "3342570",
    "end": "3349080"
  },
  {
    "text": "later okay then we do register the user and then we're just some housekeeping at",
    "start": "3349080",
    "end": "3354690"
  },
  {
    "text": "the end we just drain our writer so that we're living pending in outgoing vessel and they leave okay so it's very",
    "start": "3354690",
    "end": "3361680"
  },
  {
    "text": "interesting that you can have these cool routines which can take a very very long time to execute the idea of you know we",
    "start": "3361680",
    "end": "3369660"
  },
  {
    "text": "have these little to fast computers these days and you know the idea of having a function that takes a week to run which does almost nothing is it's",
    "start": "3369660",
    "end": "3377160"
  },
  {
    "text": "kind of fascinating so I will demonstrate I think we have a demo you",
    "start": "3377160",
    "end": "3384450"
  },
  {
    "text": "know the rest of this is just housekeeping I will use my last four minutes to give you a demo and you see",
    "start": "3384450",
    "end": "3392520"
  },
  {
    "text": "the entire chatroom is a very simple thing okay",
    "start": "3392520",
    "end": "3400790"
  },
  {
    "text": "so here I have my I've got the callback based chatroom and the streams based",
    "start": "3400790",
    "end": "3407190"
  },
  {
    "text": "chatroom I'm going to run the streams based demo for you here it here's just the the class I just showed you",
    "start": "3407190",
    "end": "3413960"
  },
  {
    "text": "here's the client connected co-routine that might run for a week I'm just going",
    "start": "3413960",
    "end": "3420390"
  },
  {
    "text": "to run this here servers now running will just switch over to a couple of",
    "start": "3420390",
    "end": "3425820"
  },
  {
    "text": "terminals here and it's just just using telnet lights nobody uses telnet these",
    "start": "3425820",
    "end": "3431280"
  },
  {
    "text": "days so I like to keep it in use running",
    "start": "3431280",
    "end": "3436320"
  },
  {
    "text": "on port 1 2 3 4 when we do this that co-routine has started running and",
    "start": "3436320",
    "end": "3441810"
  },
  {
    "text": "remember pretty much the first thing it did he says welcome to the chatroom here's the message and asked me for my",
    "start": "3441810",
    "end": "3447000"
  },
  {
    "text": "name it's now a waiting user registration so Who am I I am she learned today who she has arrived",
    "start": "3447000",
    "end": "3455400"
  },
  {
    "text": "then we telling us again over here and try mine",
    "start": "3455400",
    "end": "3464850"
  },
  {
    "text": "now and Jim and you can see that the message has been sent to the other chat",
    "start": "3464850",
    "end": "3470130"
  },
  {
    "text": "room on reason say hi Sheila so now both of these curry teams are",
    "start": "3470130",
    "end": "3477150"
  },
  {
    "text": "running simultaneously and that alternately doing a weight user activity so every time we try to type something",
    "start": "3477150",
    "end": "3483660"
  },
  {
    "text": "into one of these it was a Jim we do the work of that co-routine eventually I",
    "start": "3483660",
    "end": "3490560"
  },
  {
    "text": "close the connection we do not tell Matt like this when I quit telnet here you'll",
    "start": "3490560",
    "end": "3498660"
  },
  {
    "text": "see that that co-routine ended so one of those co-routines is now finished running the other ones still going and",
    "start": "3498660",
    "end": "3505440"
  },
  {
    "text": "you see picked up the message for Jim departed so it's",
    "start": "3505440",
    "end": "3512240"
  },
  {
    "text": "Wow that's the Demerol very straightforward I think I'm going to",
    "start": "3516030",
    "end": "3523360"
  },
  {
    "text": "stop there because we have like a minute left I will remind you to come up and get a free copy of my books and thank",
    "start": "3523360",
    "end": "3530350"
  },
  {
    "text": "you very much we have a minute or two for questions if you're quick thank you I am aware of see char async/await",
    "start": "3530350",
    "end": "3545380"
  },
  {
    "text": "and I have never used in anger and I've done quite a lot c-sharp programming what I'm not sure well relating with",
    "start": "3545380",
    "end": "3552220"
  },
  {
    "text": "async/await in c-sharp is what the underlying mechanism is whether it works this way or a different way",
    "start": "3552220",
    "end": "3559560"
  },
  {
    "text": "Oh absolutely so I mean I mentioned at the",
    "start": "3570170",
    "end": "3577369"
  },
  {
    "text": "beginning that I am the maintainer of Pi serial async i/o I recently started",
    "start": "3577369",
    "end": "3583490"
  },
  {
    "text": "using a thing called a i/o HTTP which is the most horrible name to say but it's a",
    "start": "3583490",
    "end": "3590270"
  },
  {
    "text": "really nice HTTP server using async i/o and very good performance and very easy",
    "start": "3590270",
    "end": "3595280"
  },
  {
    "text": "to use on Tuesday IRAs using the async io",
    "start": "3595280",
    "end": "3600640"
  },
  {
    "text": "package for the casket API okay so there's Det the community is",
    "start": "3600640",
    "end": "3605780"
  },
  {
    "text": "definitely stepping up and producing a scene kyoto packages for basically",
    "start": "3605780",
    "end": "3610940"
  },
  {
    "text": "anything that deals with eighths and kayo so it's taking time but certainly over the last year it's begun picking up",
    "start": "3610940",
    "end": "3618290"
  },
  {
    "text": "momentum any more questions no okay thank you very much",
    "start": "3618290",
    "end": "3626770"
  }
]