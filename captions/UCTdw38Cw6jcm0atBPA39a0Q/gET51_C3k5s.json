[
  {
    "start": "0",
    "end": "39000"
  },
  {
    "text": "awesome cool all right actually first of all thanks so much for coming I have the",
    "start": "0",
    "end": "5520"
  },
  {
    "text": "worst time for the session so I'm so grateful that you guys make it I know",
    "start": "5520",
    "end": "10950"
  },
  {
    "text": "I'm sitting between you and the Pyke's so hopefully it it will be worth your",
    "start": "10950",
    "end": "16859"
  },
  {
    "text": "time I'm a Technical Evangelist actually software engineer part of technical energy evangelist team at AWS",
    "start": "16859",
    "end": "24029"
  },
  {
    "text": "I specialize mostly in distributed systems resiliency work quite much with our reliability team Amazon in AWS are",
    "start": "24029",
    "end": "33090"
  },
  {
    "text": "working at trying to figure out how do we scale systems and if you look at",
    "start": "33090",
    "end": "38340"
  },
  {
    "text": "these three a little bit of system this is just to give you an idea of what",
    "start": "38340",
    "end": "44010"
  },
  {
    "start": "39000",
    "end": "39000"
  },
  {
    "text": "we're dealing with when we started kind of Amazon back in the days in 1994 it",
    "start": "44010",
    "end": "52199"
  },
  {
    "text": "was a big Java monolith application and we went into splitting that into a set",
    "start": "52199",
    "end": "57629"
  },
  {
    "text": "of micro-services fact there's about 1500 something micro services that serve",
    "start": "57629",
    "end": "64228"
  },
  {
    "text": "as the amazon.com website today no one really knows the number of Mike services",
    "start": "64229",
    "end": "69330"
  },
  {
    "text": "it goes up and down regularly Twitter Netflix very similar right so this tons",
    "start": "69330",
    "end": "75840"
  },
  {
    "text": "of micro services everywhere in fact this is the extreme right but what we",
    "start": "75840",
    "end": "81960"
  },
  {
    "text": "say is if you give an architect about 10 different micro services it becomes very",
    "start": "81960",
    "end": "90479"
  },
  {
    "text": "very difficult for him already trying to make sense of it how things work actually we say that about three or four",
    "start": "90479",
    "end": "97500"
  },
  {
    "text": "systems is enough to create big confusion in the minds right and most of the service we build nowaday actually",
    "start": "97500",
    "end": "103259"
  },
  {
    "text": "have more than four five systems so it's very we easily go into the realm of",
    "start": "103259",
    "end": "109350"
  },
  {
    "text": "complex systems and when we go in the realm of complex systems in systems with hundreds or thousands of micro services",
    "start": "109350",
    "end": "116009"
  },
  {
    "text": "it's actually very normal to have at any given time many of those services that",
    "start": "116009",
    "end": "123270"
  },
  {
    "text": "don't work or that fail and we call that partial failure mode it's actually this",
    "start": "123270",
    "end": "129840"
  },
  {
    "start": "127000",
    "end": "127000"
  },
  {
    "text": "is a representation of what partial failure mode means when you run that in production",
    "start": "129840",
    "end": "135269"
  },
  {
    "text": "this is actually in India and they do a tire repair while the the mud is still",
    "start": "135269",
    "end": "141959"
  },
  {
    "text": "it is still running and this is actually a working system right it still moves",
    "start": "141959",
    "end": "147750"
  },
  {
    "text": "forward discouraged people it just has a little problem which is being fixed in",
    "start": "147750",
    "end": "154140"
  },
  {
    "text": "production it is exactly how we run large-scale software systems all the",
    "start": "154140",
    "end": "160530"
  },
  {
    "text": "time sinks fails right so we always have to deal with those failures at any given",
    "start": "160530",
    "end": "166290"
  },
  {
    "text": "moment so why I'm telling you this I'm telling you this because actually",
    "start": "166290",
    "end": "172609"
  },
  {
    "text": "resiliency is exactly that art is the art of being able to run system with",
    "start": "172609",
    "end": "179760"
  },
  {
    "text": "failures on hand especially how to go around conditions where you can't",
    "start": "179760",
    "end": "188220"
  },
  {
    "text": "predict especially how do you deal with unexpected condition how do you recover from that from them and how do you move",
    "start": "188220",
    "end": "195299"
  },
  {
    "text": "forward so this talk actually is about some of the patterns we've seen through",
    "start": "195299",
    "end": "201959"
  },
  {
    "text": "our customers some of the patterns we use at AWS to build services for you so",
    "start": "201959",
    "end": "208139"
  },
  {
    "text": "there's a bunch of those that I will discuss and show you how we build software system that scales to millions",
    "start": "208139",
    "end": "215120"
  },
  {
    "text": "some of them are very simple some of them are genius in my opinion but more",
    "start": "215120",
    "end": "222060"
  },
  {
    "text": "because they are simple I think people a lot of the time people think about",
    "start": "222060",
    "end": "227150"
  },
  {
    "text": "large-scale system as being very complicated actually if you can simplify them usually that's what is genius this",
    "start": "227150",
    "end": "235319"
  },
  {
    "text": "talk wouldn't have been possible with all the pretty simple engineers that work in Amazon there is hundreds of",
    "start": "235319",
    "end": "241530"
  },
  {
    "text": "those we often run talks inside Amazon to discuss how we build stuff to share",
    "start": "241530",
    "end": "248699"
  },
  {
    "text": "cultures many of those ideas don't come from me directly come from the folks",
    "start": "248699",
    "end": "253889"
  },
  {
    "text": "actually been working in Amazon and for the last 20 years so I just want to call",
    "start": "253889",
    "end": "259949"
  },
  {
    "text": "out some of my favorite on these ones especially that contributes a lot about how Amazon",
    "start": "259949",
    "end": "265650"
  },
  {
    "text": "and they're on Twitter especially calm always as very interesting stories on Twitter so I highly recommend to go",
    "start": "265650",
    "end": "272610"
  },
  {
    "text": "follow that guy before I go into discussing those patterns I'll give you",
    "start": "272610",
    "end": "279210"
  },
  {
    "text": "ten of those and you might want to take them home and try to implement but actually even implementing them doesn't",
    "start": "279210",
    "end": "286680"
  },
  {
    "text": "necessarily solve all the problem what we're figuring that figure out is actually the most important thing is the",
    "start": "286680",
    "end": "292740"
  },
  {
    "text": "habit right is how do you build habits within your team to actually build",
    "start": "292740",
    "end": "297900"
  },
  {
    "text": "quality software it goes from writing code to code review to thinking about the overall system so",
    "start": "297900",
    "end": "306289"
  },
  {
    "text": "actually building that habit or quality habit is often more important than trying to implement a particular pattern",
    "start": "306289",
    "end": "313650"
  },
  {
    "text": "those patterns are good as a direction to go but don't forget that actually to",
    "start": "313650",
    "end": "319139"
  },
  {
    "text": "implement a good pattern and to make it sustainable you need to have all the ecosystems around okay so we're gonna",
    "start": "319139",
    "end": "326669"
  },
  {
    "text": "review ten of those before I dwell in dwell into the first one I want to",
    "start": "326669",
    "end": "332880"
  },
  {
    "start": "329000",
    "end": "329000"
  },
  {
    "text": "remind you the famous nines of availability I think when we talk about resiliency and when we talk about",
    "start": "332880",
    "end": "339090"
  },
  {
    "text": "software it's super important to remember what it means actually in the industry it's very common nowadays to",
    "start": "339090",
    "end": "345389"
  },
  {
    "text": "claim that we have four or five nines of availability that means actually you are",
    "start": "345389",
    "end": "350970"
  },
  {
    "text": "between 15 minute to 5 minute of downtime a year which is ridiculous in",
    "start": "350970",
    "end": "357510"
  },
  {
    "text": "terms of abilities is very very good in practice very very hard to implement in",
    "start": "357510",
    "end": "363449"
  },
  {
    "text": "fact I can tell you one of the some of the outage I've lived seven years ago our escalation path actually failed",
    "start": "363449",
    "end": "371940"
  },
  {
    "text": "while we had a cascading failure inside the system so it was a double failure and it took 27 minutes for us to notice",
    "start": "371940",
    "end": "378930"
  },
  {
    "text": "that there was a cascading failure in the system in fact it was a customer that did call us and say your system is",
    "start": "378930",
    "end": "385860"
  },
  {
    "text": "not working actually the escalation pass I've failed as well so it was you know already we had already blown off of the",
    "start": "385860",
    "end": "395190"
  },
  {
    "text": "credits for our 4/9 right so at the end of the day remember",
    "start": "395190",
    "end": "402520"
  },
  {
    "text": "that value and when you design system be humble with them because they'll catch you back very fast and one of the thing",
    "start": "402520",
    "end": "411820"
  },
  {
    "start": "410000",
    "end": "410000"
  },
  {
    "text": "I want to talk about every ability is actually related to mathematics this equation an is the equation of parallel",
    "start": "411820",
    "end": "419560"
  },
  {
    "text": "systems and it's an equation that actually is at the heart of everything which is happening in the cloud most of",
    "start": "419560",
    "end": "427360"
  },
  {
    "text": "the time when you talk about duplicating workloads if you take a part and you give it like",
    "start": "427360",
    "end": "435820"
  },
  {
    "text": "99% of F ability which is really really bad because it means that particular",
    "start": "435820",
    "end": "440890"
  },
  {
    "text": "part is able to be down for about three days 15 hours a year that's a lot your",
    "start": "440890",
    "end": "447430"
  },
  {
    "text": "customers are not going to be happy if you give them this kind of availability but if you take that component and",
    "start": "447430",
    "end": "453460"
  },
  {
    "text": "actually you don't do anything else but you duplicate it you make it redundant you all of a sudden increase it to 52",
    "start": "453460",
    "end": "460720"
  },
  {
    "text": "minute downtime a year so it's dramatic reduction if you make it three times you",
    "start": "460720",
    "end": "467530"
  },
  {
    "text": "actually go straightaway to six nines of availability actually these ideas of duplicating is at the heart of every",
    "start": "467530",
    "end": "475960"
  },
  {
    "text": "service we built right actually ls3 every bility durability is all based on",
    "start": "475960",
    "end": "482440"
  },
  {
    "text": "this kind of redundancy and it's also at the heart of how we build our regions so",
    "start": "482440",
    "end": "489250"
  },
  {
    "start": "485000",
    "end": "485000"
  },
  {
    "text": "we have 19 different geographic regions on AWS and I want to tell you a little",
    "start": "489250",
    "end": "495040"
  },
  {
    "text": "bit how we build a region because it's very related to mathematics a region is",
    "start": "495040",
    "end": "500050"
  },
  {
    "text": "a set of data centers and those data centers are grouped in what we call",
    "start": "500050",
    "end": "505870"
  },
  {
    "text": "availability zones so if you use AWS you often see everybody's on ABCD in fact",
    "start": "505870",
    "end": "512700"
  },
  {
    "text": "just a pro tip if you see availability in u.s. 1a and you say 1a it doesn't mean it's",
    "start": "512700",
    "end": "520659"
  },
  {
    "text": "the same every ability under the hood right we actually switch those",
    "start": "520660",
    "end": "527020"
  },
  {
    "text": "for resiliency purposes because people would tend to selects always the one a",
    "start": "527020",
    "end": "532899"
  },
  {
    "text": "or to be so if we make actually make them random under the hood we increase",
    "start": "532899",
    "end": "538300"
  },
  {
    "text": "that the distribution of customers across those davidann but all those AZ's",
    "start": "538300",
    "end": "545170"
  },
  {
    "text": "they are jig or geographically separated in fact they are separated by few",
    "start": "545170",
    "end": "551350"
  },
  {
    "text": "kilometers usually one or two millisecond latency and this is so that we can do synchronous replications",
    "start": "551350",
    "end": "557830"
  },
  {
    "text": "between this is easiest right so we have a regional split bit with three or more",
    "start": "557830",
    "end": "563649"
  },
  {
    "text": "AC some of the big regions at seven aces an AC is actually a unit of capacity we",
    "start": "563649",
    "end": "570930"
  },
  {
    "text": "usually tend to limit our AC to a certain capacity if we need to increase",
    "start": "570930",
    "end": "576100"
  },
  {
    "text": "that we build another AZ it is the same one AZ can be one data center up to",
    "start": "576100",
    "end": "581440"
  },
  {
    "text": "several data centers as well and our data centers we usually limit them to 50,000 servers something like this",
    "start": "581440",
    "end": "588850"
  },
  {
    "text": "so a Z's which are although all the Z's have a lot of data centers in them right",
    "start": "588850",
    "end": "595540"
  },
  {
    "text": "sometimes up to 10 or more so this is this is very important and each of those",
    "start": "595540",
    "end": "602709"
  },
  {
    "text": "aces are actually linked by very high speed network so that we can actually do",
    "start": "602709",
    "end": "608770"
  },
  {
    "text": "very very good networking high speed networking in replication",
    "start": "608770",
    "end": "614250"
  },
  {
    "text": "now the first patterns that we use actually that also we recommend all our",
    "start": "614250",
    "end": "620110"
  },
  {
    "start": "616000",
    "end": "616000"
  },
  {
    "text": "customers to use is when you build application is actually leveraged death because by leveraging the three aces",
    "start": "620110",
    "end": "626829"
  },
  {
    "text": "like this you can use the mathematics of",
    "start": "626829",
    "end": "631980"
  },
  {
    "text": "redundancy right so if you have an application and it's only one AZ then",
    "start": "631980",
    "end": "638410"
  },
  {
    "text": "your ability is usually not very good especially it's it's blast radius is",
    "start": "638410",
    "end": "644980"
  },
  {
    "text": "quite high so we always say to our customers and we also do inside for",
    "start": "644980",
    "end": "651190"
  },
  {
    "text": "building services for you that we actually deploy our application across multiple aces so this is the first",
    "start": "651190",
    "end": "657790"
  },
  {
    "text": "patterns we do very often user database which is synchronously replicated across several AZ so that is",
    "start": "657790",
    "end": "665529"
  },
  {
    "text": "there is an AZ that goes down actually we can implement a failover to the other",
    "start": "665529",
    "end": "672160"
  },
  {
    "text": "region and the application will keep working and this is very simple pattern",
    "start": "672160",
    "end": "679110"
  },
  {
    "text": "simply relying on mathematic now if you take what if you take that it's very",
    "start": "679110",
    "end": "688329"
  },
  {
    "text": "good for polymers right because if one a Z's go down well the other edges will",
    "start": "688329",
    "end": "694000"
  },
  {
    "text": "take over so most of our regional service like dynamodb s3 of the e elby's",
    "start": "694000",
    "end": "701290"
  },
  {
    "text": "actually leverage this kind of stuff so under the hood we also implement",
    "start": "701290",
    "end": "706420"
  },
  {
    "text": "services like this and this is also detailing it's also detecting the kind",
    "start": "706420",
    "end": "713529"
  },
  {
    "text": "of service we are offering if you use AWS you probably have noticed that we have regional services like s3 DynamoDB",
    "start": "713529",
    "end": "720490"
  },
  {
    "text": "you can't decide which ACS they are right by default there will be spreading data and load across all those",
    "start": "720490",
    "end": "727089"
  },
  {
    "text": "phases but we also have what we call zonal services which are actually very dependent on the availability zone in",
    "start": "727089",
    "end": "733660"
  },
  {
    "text": "which you launch them like an instance right you have to choose the AZ so the kind of zomo service can't benefit from",
    "start": "733660",
    "end": "741519"
  },
  {
    "text": "this kind of multi AZ architecture so what do we do with this so if you look",
    "start": "741519",
    "end": "748149"
  },
  {
    "text": "at the availability especially the blast reduce of this kind of things for zonal",
    "start": "748149",
    "end": "754410"
  },
  {
    "text": "services or blast radius is actually usually one AZ's so if we have a zonal",
    "start": "754410",
    "end": "761439"
  },
  {
    "text": "service and one particular ACS is experiencing experiencing issues that",
    "start": "761439",
    "end": "766540"
  },
  {
    "text": "all AZ's will go down but the other services will be able to recover right",
    "start": "766540",
    "end": "773740"
  },
  {
    "text": "if you use regional services now if you have instances in this particular zone",
    "start": "773740",
    "end": "779230"
  },
  {
    "text": "and it experiences issue you can't recover from it so this is kind of the",
    "start": "779230",
    "end": "784779"
  },
  {
    "text": "blast radius in that case for zonal service is actually quite quite big now the theoretical blast radius for",
    "start": "784779",
    "end": "792550"
  },
  {
    "start": "790000",
    "end": "790000"
  },
  {
    "text": "actually regional service is is the biggest right so if if we have",
    "start": "792550",
    "end": "798880"
  },
  {
    "text": "regional services that goes down the top layer which actually route the traffic",
    "start": "798880",
    "end": "804370"
  },
  {
    "text": "between different AZ's if this is experiencing issue theoretically we could average all failures in fact in",
    "start": "804370",
    "end": "811329"
  },
  {
    "text": "2007 we had nearly data plane experiencing issues that took actually",
    "start": "811329",
    "end": "817990"
  },
  {
    "text": "some of the traffic out in the entire region so the theoretical blast which is",
    "start": "817990",
    "end": "823899"
  },
  {
    "text": "pretty high now if you think a little bit about how boats are constructed they",
    "start": "823899",
    "end": "831209"
  },
  {
    "text": "implement what we call compartments right bulkheads and those bulkheads are",
    "start": "831209",
    "end": "836319"
  },
  {
    "text": "actually very useful it didn't really work out for Titanic but it could have",
    "start": "836319",
    "end": "842050"
  },
  {
    "text": "but imagine you actually have a hole in in in the boat",
    "start": "842050",
    "end": "847389"
  },
  {
    "text": "the water will feel only one part of that compartment eventually all those",
    "start": "847389",
    "end": "852670"
  },
  {
    "text": "compartments actually waterproof or the the water won't go into the other",
    "start": "852670",
    "end": "857880"
  },
  {
    "text": "compartments so the boat will be resilient to let's say a hole in part of",
    "start": "857880",
    "end": "863649"
  },
  {
    "text": "the box and this is being implemented from the very early days off of navigation and if you take that ID you",
    "start": "863649",
    "end": "870850"
  },
  {
    "text": "can actually use it into the cloud and at AWS how we build our service we use",
    "start": "870850",
    "end": "877870"
  },
  {
    "start": "875000",
    "end": "875000"
  },
  {
    "text": "something called cell sail based architectures a sail is let's take a",
    "start": "877870",
    "end": "884800"
  },
  {
    "text": "service for example an application that is deployed across multiple AZ's we call",
    "start": "884800",
    "end": "890829"
  },
  {
    "text": "that we take that application and we move this in what we call a sail right so I'm reduce it a little bit for",
    "start": "890829",
    "end": "898120"
  },
  {
    "text": "clarity and what we do is we duplicate",
    "start": "898120",
    "end": "903160"
  },
  {
    "text": "that cell so instead of having one application actually we have multiple",
    "start": "903160",
    "end": "908620"
  },
  {
    "text": "application compartmented in sales with a very very thin routing layer actually",
    "start": "908620",
    "end": "914649"
  },
  {
    "text": "that routing layer as as little as possible and tries to do it as fast as",
    "start": "914649",
    "end": "920980"
  },
  {
    "text": "possible in fact that sails routing layer is also",
    "start": "920980",
    "end": "926420"
  },
  {
    "text": "implementing what we call cell architectures so that in case of zulan failure actually the sale router will",
    "start": "926420",
    "end": "933060"
  },
  {
    "text": "stay up and this is deployed in what we",
    "start": "933060",
    "end": "938490"
  },
  {
    "text": "call a regional service so now if you think about sales and the availability",
    "start": "938490",
    "end": "943680"
  },
  {
    "text": "zone and you think about blast radius actually if you have a regional service",
    "start": "943680",
    "end": "948810"
  },
  {
    "text": "initially having an issue in the Celebes architecture you actually are able to be",
    "start": "948810",
    "end": "957060"
  },
  {
    "text": "resilient because now instead of having one big regional service you have multiple sale that serve that service",
    "start": "957060",
    "end": "963870"
  },
  {
    "text": "and for us we build all our services like this so most of that's kind of",
    "start": "963870",
    "end": "971070"
  },
  {
    "text": "architectures you can also implement that actually using DNS so for example if you make a request to route 53 you",
    "start": "971070",
    "end": "980520"
  },
  {
    "text": "can compartiment that you know weezing weezing a sale and",
    "start": "980520",
    "end": "986250"
  },
  {
    "text": "then allocate some of these users to these kind of different sales right so this is very easy to implement as well",
    "start": "986250",
    "end": "993290"
  },
  {
    "text": "so these these services allow you to implement kind of resiliency arm both",
    "start": "993290",
    "end": "1001460"
  },
  {
    "text": "regional and zonal level okay and of course it also allows you to have",
    "start": "1001460",
    "end": "1007720"
  },
  {
    "start": "1004000",
    "end": "1004000"
  },
  {
    "text": "resiliency to partial failures because now you have multiple sale for each of",
    "start": "1007720",
    "end": "1012770"
  },
  {
    "text": "the races so if one sale is expanding issues the other sales are not affected",
    "start": "1012770",
    "end": "1017990"
  },
  {
    "text": "because they are like bulkhead they are not they don't have any relations to each other now the system property is",
    "start": "1017990",
    "end": "1026360"
  },
  {
    "start": "1025000",
    "end": "1025000"
  },
  {
    "text": "very interesting because of course you have work for workload isolation right you have failure competition so that if",
    "start": "1026360",
    "end": "1033890"
  },
  {
    "text": "you have a failure in one of those sales it doesn't propagate to the others the other one still stay up and running but",
    "start": "1033890",
    "end": "1042920"
  },
  {
    "text": "this sale actually for us are really interesting for another dimension for scaling up actually instead of scaling",
    "start": "1042920",
    "end": "1050930"
  },
  {
    "text": "up in terms of power or you know instance was well what we call scaling",
    "start": "1050930",
    "end": "1058850"
  },
  {
    "text": "up we scale out so we take a sale language",
    "start": "1058850",
    "end": "1064470"
  },
  {
    "text": "therapy that sales will have a maximum number of users will have a maximum number of servers and then if this",
    "start": "1064470",
    "end": "1070740"
  },
  {
    "text": "increases will actually will add other sales and actually some of the biggest service have thousands of sales right so",
    "start": "1070740",
    "end": "1078240"
  },
  {
    "text": "this is actually very interesting for us because now those sales allow us to also do rollout by while limiting the blaster",
    "start": "1078240",
    "end": "1088140"
  },
  {
    "text": "use because now we can roll out per sales and we can notice there are issues in each of the cells if there are issues",
    "start": "1088140",
    "end": "1093900"
  },
  {
    "text": "we can roll back easily the blasts reduce is Contin eyes like is minimum we",
    "start": "1093900",
    "end": "1100950"
  },
  {
    "text": "also actually do what we call chaos engineering in those cells so that we can test in real production data how",
    "start": "1100950",
    "end": "1109620"
  },
  {
    "text": "things really behave so that means we are able to understand a system within",
    "start": "1109620",
    "end": "1116280"
  },
  {
    "text": "the cell and then replicate that into other cells because we always have a maximum capacity for cell once we",
    "start": "1116280",
    "end": "1123870"
  },
  {
    "text": "understand it very well we can replicate that learning from one cell to the others so this is very interesting for",
    "start": "1123870",
    "end": "1129390"
  },
  {
    "text": "us in terms of testability and manageability and of course when you",
    "start": "1129390",
    "end": "1134610"
  },
  {
    "text": "want to understand how a system behaves it's a lot easier to have a smaller cell",
    "start": "1134610",
    "end": "1140280"
  },
  {
    "text": "and trying to dig out digging into how the system behaves with ended cells which maybe has thousand people and",
    "start": "1140280",
    "end": "1148320"
  },
  {
    "text": "thousand servers versus a cell which has 10,000 servers and millions of people",
    "start": "1148320",
    "end": "1153510"
  },
  {
    "text": "so the logs all these kind of things it's much more manageable so this is",
    "start": "1153510",
    "end": "1159540"
  },
  {
    "text": "very important for us now there's another pattern that is very interesting is let's take for example an",
    "start": "1159540",
    "end": "1165690"
  },
  {
    "text": "application and if I have an application and I have eight different users right",
    "start": "1165690",
    "end": "1171240"
  },
  {
    "text": "so each of the icons is a particular user now say my user one of the user is",
    "start": "1171240",
    "end": "1180240"
  },
  {
    "text": "experiencing issues or for example it makes a query that damages the backend",
    "start": "1180240",
    "end": "1186390"
  },
  {
    "text": "you know this kind of expensive queries which hit the particular bug which actually take down things",
    "start": "1186390",
    "end": "1193060"
  },
  {
    "text": "easily well what often will do this request will eat one server the server",
    "start": "1193060",
    "end": "1201490"
  },
  {
    "text": "will go down because it was a very expensive request that happens very easily now the user usually has a retry",
    "start": "1201490",
    "end": "1208120"
  },
  {
    "text": "right so we'll eventually retry and actually take down all the other servers",
    "start": "1208120",
    "end": "1213190"
  },
  {
    "text": "and these conditions are very common and there are you know maximizing the",
    "start": "1213190",
    "end": "1219100"
  },
  {
    "text": "blaster it is to pretty much all the servers right so the blast radius is",
    "start": "1219100",
    "end": "1224160"
  },
  {
    "text": "affecting all the customers here so all the customers will suffer from one",
    "start": "1224160",
    "end": "1230230"
  },
  {
    "text": "particular request that one user as as made and this is very common that's what",
    "start": "1230230",
    "end": "1237490"
  },
  {
    "start": "1236000",
    "end": "1236000"
  },
  {
    "text": "we call cascading failures cascading failures representing I think it's very",
    "start": "1237490",
    "end": "1243270"
  },
  {
    "text": "easy to understand cascading failure when you look at this mom if you think about having a load balancer be a load",
    "start": "1243270",
    "end": "1250540"
  },
  {
    "text": "balancing load between two servers she hits a condition where one of the server",
    "start": "1250540",
    "end": "1256330"
  },
  {
    "text": "is in in stable and that moves all our attention to the other server is creating overload and taking it down as",
    "start": "1256330",
    "end": "1262210"
  },
  {
    "text": "well and this is exactly what these conditions happen it doesn't have to be",
    "start": "1262210",
    "end": "1267630"
  },
  {
    "text": "big big problems on with the instance sometimes really just a particular bug a",
    "start": "1267630",
    "end": "1273520"
  },
  {
    "text": "query the way you a condition that you haven't tested can degenerate",
    "start": "1273520",
    "end": "1279100"
  },
  {
    "text": "very easily and take whole clusters down in matters of minutes so to prevent",
    "start": "1279100",
    "end": "1287110"
  },
  {
    "start": "1286000",
    "end": "1286000"
  },
  {
    "text": "these kind of things we also we implement this kind of cell based architectures as well for our our",
    "start": "1287110",
    "end": "1294370"
  },
  {
    "text": "customers so instead of having all the customers being able to utilize a",
    "start": "1294370",
    "end": "1301510"
  },
  {
    "text": "cluster of instance what we do is we compare to my comp complete compartmentalize this cluster into cells",
    "start": "1301510",
    "end": "1308650"
  },
  {
    "text": "and we assigned for example a sale to the same user and this this time the",
    "start": "1308650",
    "end": "1314830"
  },
  {
    "text": "blast radius is actually going to be only one user affected so the other are",
    "start": "1314830",
    "end": "1320230"
  },
  {
    "text": "not going to be affected by that particular dangerous query so the",
    "start": "1320230",
    "end": "1325690"
  },
  {
    "text": "is something that we do for all our services ISO to limit the path less",
    "start": "1325690",
    "end": "1331750"
  },
  {
    "text": "radius and in that case actually the blast radius all of a sudden becomes 25%",
    "start": "1331750",
    "end": "1338559"
  },
  {
    "text": "instead of hundred percent so we have a factor for improvement but that's",
    "start": "1338559",
    "end": "1343929"
  },
  {
    "text": "actually not not all you can do a lot better and this takes me to the third",
    "start": "1343929",
    "end": "1350679"
  },
  {
    "start": "1345000",
    "end": "1345000"
  },
  {
    "text": "pattern pattern that we really like ratable s what we call shuffle charting",
    "start": "1350679",
    "end": "1356519"
  },
  {
    "text": "shuffle charting is very simple instead of allocating a user to the entire set",
    "start": "1356519",
    "end": "1364840"
  },
  {
    "text": "of cluster or to a cell we actually randomize user for a particular instance",
    "start": "1364840",
    "end": "1371110"
  },
  {
    "text": "and actually we assign this user to two particular instance in that case and then all other users we also randomize",
    "start": "1371110",
    "end": "1379080"
  },
  {
    "text": "but what you realize is actually by doing by doing this now if I have an",
    "start": "1379080",
    "end": "1387370"
  },
  {
    "text": "expensive query about the same user the blast radius of course will take down the server's here but the same user is",
    "start": "1387370",
    "end": "1395139"
  },
  {
    "text": "now the heart will just make a retry and we have be able to have a successful",
    "start": "1395139",
    "end": "1401279"
  },
  {
    "text": "request to the other servers and actually in that case it's very",
    "start": "1401279",
    "end": "1407320"
  },
  {
    "text": "interesting because our blast radius is now the number of customers divided by the combinations that we have done the",
    "start": "1407320",
    "end": "1416019"
  },
  {
    "text": "shuffling right so in that case if you have eight nodes and you have shard size of two your percentage of or your blast",
    "start": "1416019",
    "end": "1425110"
  },
  {
    "text": "radius is three point six percent so we went from 125 to three point six percent",
    "start": "1425110",
    "end": "1431919"
  },
  {
    "text": "and it's quite interesting because you only had eight nodes and your",
    "start": "1431919",
    "end": "1439240"
  },
  {
    "text": "combinations already 28 different combinations right so if you have thousands of of those nodes the blast",
    "start": "1439240",
    "end": "1447879"
  },
  {
    "text": "radius goes close to zero point something percent so this is very very",
    "start": "1447879",
    "end": "1452919"
  },
  {
    "text": "useful patterns that you can also use to do that again you can we do the shuffle",
    "start": "1452919",
    "end": "1459500"
  },
  {
    "text": "based on particular ash which assigned sir to servers to that particular users",
    "start": "1459500",
    "end": "1465680"
  },
  {
    "text": "and then render minds the rest it's kind of random kind of not this Ash's is",
    "start": "1465680",
    "end": "1472610"
  },
  {
    "text": "actually depending on the service can can vary but you can think of it as a",
    "start": "1472610",
    "end": "1477700"
  },
  {
    "text": "random shuffling and this is the math the mathematic equation behind so",
    "start": "1477700",
    "end": "1484990"
  },
  {
    "text": "something very interesting and what it does is actually yeah this is actually",
    "start": "1484990",
    "end": "1490070"
  },
  {
    "text": "the number of for a hundred of those the number of a combination is 75 million",
    "start": "1490070",
    "end": "1497030"
  },
  {
    "text": "therefore your last reduce is close to nothing really",
    "start": "1497030",
    "end": "1502540"
  },
  {
    "text": "so shuffle shutting is very interesting because it gives us very mean minimum",
    "start": "1502540",
    "end": "1510380"
  },
  {
    "text": "blast radius the only thing it requires very simple it just requires a client to do retry because if one request fails",
    "start": "1510380",
    "end": "1517550"
  },
  {
    "text": "then you will have to retry that particular request student to another servers it works for a lot of different",
    "start": "1517550",
    "end": "1525530"
  },
  {
    "text": "things like servers queues or a synchronous systems we actually use many",
    "start": "1525530",
    "end": "1532490"
  },
  {
    "text": "many different places both from the route 53 to 2 s 3 to 10 ml d be",
    "start": "1532490",
    "end": "1540290"
  },
  {
    "text": "different services to be able to distribute the loads and of course you",
    "start": "1540290",
    "end": "1546890"
  },
  {
    "text": "need a routing mechanism which you have ok so this is very interesting one now",
    "start": "1546890",
    "end": "1553940"
  },
  {
    "text": "you've probably all heard about auto scaling and auto scaling is mostly known for being able to adapt an",
    "start": "1553940",
    "end": "1560570"
  },
  {
    "text": "infrastructure to the load that it receives right so for example you have maybe a traffic peak traffic during day",
    "start": "1560570",
    "end": "1568040"
  },
  {
    "text": "time and then all your traffic goes very low during the night so you bring back you bring up resources during the day",
    "start": "1568040",
    "end": "1574970"
  },
  {
    "text": "and then shut them down automatically during the night and this is very common way of auto scaling but actually in my",
    "start": "1574970",
    "end": "1581420"
  },
  {
    "text": "opinion is not the best way of it what is very interesting with auto scaling is that you can assign a minimum resource",
    "start": "1581420",
    "end": "1588020"
  },
  {
    "start": "1584000",
    "end": "1584000"
  },
  {
    "text": "right so for example in that case it's just",
    "start": "1588020",
    "end": "1592900"
  },
  {
    "text": "I'm an example if I have two servers distributed across two aces and I set",
    "start": "1594260",
    "end": "1600380"
  },
  {
    "text": "the minimum of instances to super to zero by default the system will self",
    "start": "1600380",
    "end": "1607880"
  },
  {
    "text": "heal so if actually one of the instance go down automatically the load balancer",
    "start": "1607880",
    "end": "1613940"
  },
  {
    "text": "will take it out of the of the of the application and will terminate it and",
    "start": "1613940",
    "end": "1620930"
  },
  {
    "text": "then automatically come back up and this is my opinion very interesting a very simple thing to do like the basic of",
    "start": "1620930",
    "end": "1627860"
  },
  {
    "text": "self-healing systems right and then eventually the load balancer will do some health check figure out nuts this",
    "start": "1627860",
    "end": "1635120"
  },
  {
    "text": "is a new instance so we'll bring it back up inside the the load balancer auto",
    "start": "1635120",
    "end": "1642650"
  },
  {
    "text": "scaling group even this even though this feature has been out for about six years",
    "start": "1642650",
    "end": "1647840"
  },
  {
    "text": "I it's still very common that customers don't know about it so I think this is",
    "start": "1647840",
    "end": "1653240"
  },
  {
    "text": "very important that you know and actually we do use that pattern extensively inside AWS in Amazon as well",
    "start": "1653240",
    "end": "1661840"
  },
  {
    "text": "this is an accelerated video of how this work so this I have a load balancer",
    "start": "1661840",
    "end": "1668210"
  },
  {
    "text": "which which has instances I kill an instance and here you see the system",
    "start": "1668210",
    "end": "1675550"
  },
  {
    "text": "terminates the instance you see is shutting down here and the system",
    "start": "1675550",
    "end": "1680750"
  },
  {
    "text": "realizes that actually one of the instance is going down and ultimate",
    "start": "1680750",
    "end": "1686390"
  },
  {
    "text": "automatically will bring that instance a new instance back up and this really happens in a matter of minutes so very",
    "start": "1686390",
    "end": "1694160"
  },
  {
    "text": "interesting features that that you need to leverage you see it's automatically",
    "start": "1694160",
    "end": "1700250"
  },
  {
    "text": "launching a new one so very simple and yet very very very useful the pattern 5",
    "start": "1700250",
    "end": "1708140"
  },
  {
    "start": "1707000",
    "end": "1707000"
  },
  {
    "text": "is about decoupling a synchronous or decoupling services from each other I",
    "start": "1708140",
    "end": "1715160"
  },
  {
    "text": "think very it's been very common back in the day to have synchronous systems where you make a query you wait for the",
    "start": "1715160",
    "end": "1722060"
  },
  {
    "text": "query to execute and then come come back when that query has been",
    "start": "1722060",
    "end": "1727860"
  },
  {
    "text": "executed now the problem is if my process B doesn't resolve that doesn't respond in time or is slow my process a",
    "start": "1727860",
    "end": "1735750"
  },
  {
    "text": "will suffer so you have coupling of processes or services and this is terrible so we move extensively to a",
    "start": "1735750",
    "end": "1743850"
  },
  {
    "text": "synchronous patterns actually most of the backend framework and front-end framework dos support this kind of",
    "start": "1743850",
    "end": "1750060"
  },
  {
    "text": "pattern but what we really really like and what I suggest you should think of",
    "start": "1750060",
    "end": "1757080"
  },
  {
    "text": "is actually decoupling what we call the API the API layer from the business",
    "start": "1757080",
    "end": "1764300"
  },
  {
    "text": "logic if you look at sets of API in an application I think very often many of",
    "start": "1764300",
    "end": "1772230"
  },
  {
    "text": "those don't need to be synchronous a very very few need to be synchronous like for example bank transactions you",
    "start": "1772230",
    "end": "1778290"
  },
  {
    "text": "probably want that to be synchronous and make sure that that transaction happened",
    "start": "1778290",
    "end": "1783870"
  },
  {
    "text": "but most of the other you can do it as synchronously it doesn't mean then you",
    "start": "1783870",
    "end": "1789390"
  },
  {
    "text": "show it as not synchronous requests to the end-user you can hide the in sakra Nissa T in the UI make it look like that",
    "start": "1789390",
    "end": "1796680"
  },
  {
    "text": "it's synchronous that's what or Instagram Facebook and application that",
    "start": "1796680",
    "end": "1801930"
  },
  {
    "text": "where you upload videos do what you need to do this because it allows you to do",
    "start": "1801930",
    "end": "1808410"
  },
  {
    "text": "very interesting things for example you see in that case have an API and I assign it a job ID in that case in our",
    "start": "1808410",
    "end": "1815580"
  },
  {
    "text": "return immediately now that job of forced goes in and queue most of the a synchronous patterns in",
    "start": "1815580",
    "end": "1821280"
  },
  {
    "text": "the cloud are using queues so you put that job in the queue and then you have",
    "start": "1821280",
    "end": "1827220"
  },
  {
    "text": "kind of a group of working instances or that implement business logic that take that job and execute it and now you",
    "start": "1827220",
    "end": "1834180"
  },
  {
    "text": "might think that actually I it's slower because you have another three parts but",
    "start": "1834180",
    "end": "1841350"
  },
  {
    "text": "it's actually very often as fast a synchronous operation because you can",
    "start": "1841350",
    "end": "1846930"
  },
  {
    "text": "scale you can scale both both clusters",
    "start": "1846930",
    "end": "1852720"
  },
  {
    "text": "on from independent from one another for example worker instance are often",
    "start": "1852720",
    "end": "1858059"
  },
  {
    "text": "cpu-intensive whereas api instances are more memory intensive because you have to open web sockets and things other you",
    "start": "1858059",
    "end": "1865139"
  },
  {
    "text": "have to open network sockets which take memories and then after a particular load as a massive effect on the on the",
    "start": "1865139",
    "end": "1873299"
  },
  {
    "text": "on how your instances behave but this is very interesting so you're working",
    "start": "1873299",
    "end": "1879389"
  },
  {
    "text": "instance take the job from the queue and then once they've executed the job just store that in a cache and then you can",
    "start": "1879389",
    "end": "1886559"
  },
  {
    "text": "actually send a notification to the end user say oh your result is able we'll come and fetch it this is cool and these",
    "start": "1886559",
    "end": "1893340"
  },
  {
    "text": "patterns is used extensively all over the place what I really like about this pattern is actually then you can",
    "start": "1893340",
    "end": "1900470"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "implement degradation and prioritizations so now imagine you're",
    "start": "1900470",
    "end": "1905909"
  },
  {
    "text": "your back-end or your applications or service is experiencing experiencing a",
    "start": "1905909",
    "end": "1911429"
  },
  {
    "text": "slowdown very common practice is actually to do request cancellation and",
    "start": "1911429",
    "end": "1917669"
  },
  {
    "text": "so the services down we contact requests so try later and you see these all over the place now",
    "start": "1917669",
    "end": "1924659"
  },
  {
    "text": "you can actually take the idea of ok what are the API is what are the",
    "start": "1924659",
    "end": "1929700"
  },
  {
    "text": "functions in my application which can be priorities priorities always versus the others and then you can take that idea",
    "start": "1929700",
    "end": "1937080"
  },
  {
    "text": "of prioritization actually build several queues a high priority queue low priority do it when you can kind of",
    "start": "1937080",
    "end": "1944490"
  },
  {
    "text": "queue so you can actually scale the queue in terms of priorities and then do",
    "start": "1944490",
    "end": "1952620"
  },
  {
    "text": "service degradation so for example instead of saying oh you come access Netflix because the authentication",
    "start": "1952620",
    "end": "1960269"
  },
  {
    "text": "system doesn't work you say okay I'm gonna degrade and I'm gonna go into an",
    "start": "1960269",
    "end": "1967529"
  },
  {
    "text": "open and open systems but still handle API calls that do start videos or things",
    "start": "1967529",
    "end": "1975120"
  },
  {
    "text": "like this and then under the hood start fixing the backend in fact many of the services we build as well are based on",
    "start": "1975120",
    "end": "1981899"
  },
  {
    "text": "this kind of pattern so we try to understand what are the api's that are really important and how we want to",
    "start": "1981899",
    "end": "1989519"
  },
  {
    "text": "prioritize those api's into case of failures and this is very",
    "start": "1989519",
    "end": "1995430"
  },
  {
    "text": "interesting now I want to talk a little bit about time outs and retry because in",
    "start": "1995430",
    "end": "2000560"
  },
  {
    "text": "these systems it's very important to add them in place so let's take a simple",
    "start": "2000560",
    "end": "2007280"
  },
  {
    "text": "example of users connecting to an application that connects to a back-end",
    "start": "2007280",
    "end": "2012590"
  },
  {
    "text": "okay now in that makes queries to a database now imagine that database at some point",
    "start": "2012590",
    "end": "2021140"
  },
  {
    "text": "starts to slow down so what happens well what happened actually it's a very",
    "start": "2021140",
    "end": "2027500"
  },
  {
    "text": "interesting question there's tons of things can happen right what we're talking about retries and time out so",
    "start": "2027500",
    "end": "2034540"
  },
  {
    "text": "first thing that you have to figure out is actually what are the timeouts involved right so you look at the",
    "start": "2034540",
    "end": "2041780"
  },
  {
    "text": "timeouts on the clients eyes you look at the timers in the backend size and very often if you ask teams it's the first",
    "start": "2041780",
    "end": "2050600"
  },
  {
    "text": "question Michael oh not sure actually the default huh okay default so let's go",
    "start": "2050600",
    "end": "2057379"
  },
  {
    "text": "with default ok let's have a user one make a query to the app that app make an",
    "start": "2057380",
    "end": "2065030"
  },
  {
    "text": "insert to database that database slows down well mines first slows down right",
    "start": "2065030",
    "end": "2070750"
  },
  {
    "text": "eventually if I have a time out of ten seconds but my inserts as a default",
    "start": "2070750",
    "end": "2077570"
  },
  {
    "text": "timeout well you don't know when is",
    "start": "2077570",
    "end": "2083450"
  },
  {
    "text": "what's gonna happen basically eventually this one will timeout or not if your",
    "start": "2083450",
    "end": "2092270"
  },
  {
    "text": "timeout is twenty thirty one minute or infinite this connection will stay open",
    "start": "2092270",
    "end": "2098000"
  },
  {
    "text": "and actually the client will time out and make a retry all right so my client",
    "start": "2098000",
    "end": "2103610"
  },
  {
    "text": "makes you retry my connection is still open to the database I'll make another Rick retry now the inserts same behavior",
    "start": "2103610",
    "end": "2111650"
  },
  {
    "text": "my query slows down doesn't timeout my client retries and retry and you see at",
    "start": "2111650",
    "end": "2119690"
  },
  {
    "text": "some point you'll have something like this right so how many of you have seen that message",
    "start": "2119690",
    "end": "2125130"
  },
  {
    "text": "right failed to get connection from pause so that means you've exhausted the number of connections available to your",
    "start": "2125130",
    "end": "2131579"
  },
  {
    "text": "database and now actually your users cannot even make requests to the application and this is actually a very",
    "start": "2131579",
    "end": "2138869"
  },
  {
    "text": "very common patterns to having cascading failures because actually that user and",
    "start": "2138869",
    "end": "2144529"
  },
  {
    "text": "we'll do a retry the application cannot be contacted so the load balancer will",
    "start": "2144529",
    "end": "2150569"
  },
  {
    "text": "push that to another servers and the same patterns will happen actually I've seen 120 day servers database servers go",
    "start": "2150569",
    "end": "2159690"
  },
  {
    "text": "down in literally less than 30 minutes because of that so this is very very",
    "start": "2159690",
    "end": "2166049"
  },
  {
    "text": "dangerous pattern now you might be wondering why did the hell I put a",
    "start": "2166049",
    "end": "2171539"
  },
  {
    "text": "timeout of infinite well actually how many of you are Python developers here",
    "start": "2171539",
    "end": "2178339"
  },
  {
    "text": "yeah I mean your view are no the gdbg drivers for not sequel silence anyone",
    "start": "2178339",
    "end": "2185400"
  },
  {
    "text": "want to take a guess what kind of timeouts we have for most of the actually language and defaults well",
    "start": "2185400",
    "end": "2192420"
  },
  {
    "text": "actually it's infinite you'll be scared to actually look at documentation",
    "start": "2192420",
    "end": "2198470"
  },
  {
    "text": "request time' is the most used library for python to do requests default infinite no sequel default 0 which means",
    "start": "2198470",
    "end": "2207180"
  },
  {
    "text": "infinite right actually 80% of the",
    "start": "2207180",
    "end": "2213089"
  },
  {
    "text": "frameworks i've used usually I have a default timeout of zeros and actually if you go to customers and you're in",
    "start": "2213089",
    "end": "2219210"
  },
  {
    "text": "software teams most of the time people don't know that's actually a big big",
    "start": "2219210",
    "end": "2224849"
  },
  {
    "text": "problem and has been responsible for many many outages outage that I've experienced so in Python you would do",
    "start": "2224849",
    "end": "2233069"
  },
  {
    "text": "something like this you put a decorator and you do what some retry you say let's",
    "start": "2233069",
    "end": "2238380"
  },
  {
    "text": "do five retry after five retry you actually cancel the request in cancellation is actually very very good",
    "start": "2238380",
    "end": "2244049"
  },
  {
    "text": "something that should be implemented you should never ever have a client which one definitely it's the best way to",
    "start": "2244049",
    "end": "2250289"
  },
  {
    "text": "never recover from an outage because then your infinite number of customers",
    "start": "2250289",
    "end": "2256440"
  },
  {
    "text": "make in retries your system tries to come back up goes down immediately after so I",
    "start": "2256440",
    "end": "2263070"
  },
  {
    "text": "have a maximum number of time out of retries make them time out okay so",
    "start": "2263070",
    "end": "2269520"
  },
  {
    "start": "2269000",
    "end": "2269000"
  },
  {
    "text": "release them but that's actually not it there's a another thing that could have",
    "start": "2269520",
    "end": "2277440"
  },
  {
    "text": "been don't prevent that to happen from happening well this really tries that",
    "start": "2277440",
    "end": "2283950"
  },
  {
    "start": "2281000",
    "end": "2281000"
  },
  {
    "text": "good but actually you should never retry immediately right you should do what we",
    "start": "2283950",
    "end": "2290490"
  },
  {
    "text": "call back off and there's several ways to do back off my coffees I'll make a",
    "start": "2290490",
    "end": "2296940"
  },
  {
    "text": "request if it fails I'll wait for example two seconds and do retry if my request fails again I'll try four",
    "start": "2296940",
    "end": "2304770"
  },
  {
    "text": "seconds if it fails again I wait eight seconds we call that exponential back-off but actually exponential",
    "start": "2304770",
    "end": "2312780"
  },
  {
    "text": "back-off again is not necessarily the best you see the good thing with back",
    "start": "2312780",
    "end": "2318060"
  },
  {
    "text": "off here is that after four requests if I have a timeout back in of ten seconds",
    "start": "2318060",
    "end": "2323070"
  },
  {
    "text": "eventually we'll start releasing database connections right so eventually your servers won't be so overloaded or",
    "start": "2323070",
    "end": "2331110"
  },
  {
    "text": "won't start canceling requests but that's not enough actually there is a",
    "start": "2331110",
    "end": "2336360"
  },
  {
    "text": "very interesting paper which we we wrote about exponential back-off",
    "start": "2336360",
    "end": "2341970"
  },
  {
    "text": "in and how it behaves at large scale and if you look at a classic back of",
    "start": "2341970",
    "end": "2348630"
  },
  {
    "text": "algorithm which is simply exponential back-off and you put it in kind of",
    "start": "2348630",
    "end": "2356600"
  },
  {
    "text": "distributed systems eventually all the retries will still be clustered in kind",
    "start": "2356600",
    "end": "2363660"
  },
  {
    "text": "of funnels right they will all have this kind of happen more or less at the same",
    "start": "2363660",
    "end": "2370800"
  },
  {
    "text": "time and this is very interesting it's very interesting properties of exponential back-off in distributed",
    "start": "2370800",
    "end": "2375870"
  },
  {
    "text": "systems is they actually are not random most of the time the reach wise will happen at the same times across the",
    "start": "2375870",
    "end": "2383010"
  },
  {
    "text": "network and will sink rise so what we figure out there is actually a very",
    "start": "2383010",
    "end": "2388950"
  },
  {
    "text": "simple way to itemized exponential back-off is to add a jitter so inside inside your slip",
    "start": "2388950",
    "end": "2396930"
  },
  {
    "text": "function for example you are actually a random or a jitter that kind of",
    "start": "2396930",
    "end": "2405030"
  },
  {
    "text": "randomize a little bit your retry and now if your Python again there are some",
    "start": "2405030",
    "end": "2410820"
  },
  {
    "text": "interesting patterns that actually use",
    "start": "2410820",
    "end": "2415920"
  },
  {
    "text": "that full jitter there's a paper written about it if you are interested you should definitely really because it's",
    "start": "2415920",
    "end": "2422010"
  },
  {
    "text": "very very interesting with all the math behind it now of course if you're doing",
    "start": "2422010",
    "end": "2427680"
  },
  {
    "start": "2425000",
    "end": "2425000"
  },
  {
    "text": "retry you have to use in deponent operations independent operations means",
    "start": "2427680",
    "end": "2432960"
  },
  {
    "text": "that for any given retry a request will always have the same behavior but now it",
    "start": "2432960",
    "end": "2441120"
  },
  {
    "text": "does have a problem right if I have a retry and I have if I have a request",
    "start": "2441120",
    "end": "2448650"
  },
  {
    "text": "that writes to database my request actually can fail on the client-side on",
    "start": "2448650",
    "end": "2455430"
  },
  {
    "text": "the backend side how do I know in case of failures that actually the request has been executed if you have",
    "start": "2455430",
    "end": "2463140"
  },
  {
    "text": "independent operation you might have ten ten different inserts and that will blow",
    "start": "2463140",
    "end": "2469440"
  },
  {
    "text": "up your database as well so you need to have a mechanism for example through a query ash so you ash or you try to",
    "start": "2469440",
    "end": "2476880"
  },
  {
    "text": "identify queries you you hash a query to track it across this is it's passed and",
    "start": "2476880",
    "end": "2485820"
  },
  {
    "text": "figuring out is has been executed so there's tons of operations to do at",
    "start": "2485820",
    "end": "2491760"
  },
  {
    "text": "scale to be able to figure out is actually if we try has been executed or",
    "start": "2491760",
    "end": "2497040"
  },
  {
    "text": "not and it's not a simple problem it can make system quite complex but it's",
    "start": "2497040",
    "end": "2502260"
  },
  {
    "text": "something you have to take into consideration so doing timeouts and retry is good doing an important",
    "start": "2502260",
    "end": "2508860"
  },
  {
    "text": "operation is good but make sure that actually operation doesn't blow up your database so make sure that you can try",
    "start": "2508860",
    "end": "2514800"
  },
  {
    "text": "you can figure out if a request has been successful or not so there is some some",
    "start": "2514800",
    "end": "2521130"
  },
  {
    "text": "different strategy there's a bucket strategy so you with a token in a bucket for each",
    "start": "2521130",
    "end": "2526589"
  },
  {
    "text": "request it have been successful you remove it from the bucket interesting if you are interested into that pattern",
    "start": "2526589",
    "end": "2533089"
  },
  {
    "text": "Google as a as tons of answer around on Google search and of course in",
    "start": "2533089",
    "end": "2541529"
  },
  {
    "text": "distributed system there's another thing you need to work with so if I have a",
    "start": "2541529",
    "end": "2548759"
  },
  {
    "text": "client and I want to do retries it's probably a good idea that my client has",
    "start": "2548759",
    "end": "2555749"
  },
  {
    "text": "an ID of what's the condition of the network right so very often distributed systems will have health checks we all",
    "start": "2555749",
    "end": "2562890"
  },
  {
    "text": "have built health checks for our operations even for our systems now there is different type of health checks",
    "start": "2562890",
    "end": "2569009"
  },
  {
    "text": "there is like what we call the shallow health checks and the deep health check so the shallow health check in that case",
    "start": "2569009",
    "end": "2574999"
  },
  {
    "text": "if I have an issue in my application say for example the the the shallow health",
    "start": "2574999",
    "end": "2583289"
  },
  {
    "start": "2577000",
    "end": "2577000"
  },
  {
    "text": "check will check the instance and say my instance is up and running I'm all good and actually will return all good even",
    "start": "2583289",
    "end": "2590700"
  },
  {
    "text": "if for example email servers is down because it's a shallow we doesn't go and",
    "start": "2590700",
    "end": "2597269"
  },
  {
    "text": "check further down the stream if you want to figure out further down the",
    "start": "2597269",
    "end": "2603690"
  },
  {
    "start": "2601000",
    "end": "2601000"
  },
  {
    "text": "stream what you the conditions of network you have to implement deep health checks right so for example a health check that will propagate to all",
    "start": "2603690",
    "end": "2609660"
  },
  {
    "text": "the others services often a synchronously figuring out the condition",
    "start": "2609660",
    "end": "2615089"
  },
  {
    "text": "come back to the instance and say yeah everyone is up and running you can pass it back we're good so where should you",
    "start": "2615089",
    "end": "2623460"
  },
  {
    "text": "employ the deep health check and when she do shallow health check actually a very very very complicated question",
    "start": "2623460",
    "end": "2631079"
  },
  {
    "text": "shallow health check is very good for figuring out networking issues like for example say my instance is having",
    "start": "2631079",
    "end": "2638009"
  },
  {
    "text": "security group networking issue cannot access the database you know something",
    "start": "2638009",
    "end": "2643650"
  },
  {
    "text": "like this or that this resource-constrained doesn't have enough memory doesn't that is enough CPUs so it",
    "start": "2643650",
    "end": "2649440"
  },
  {
    "text": "doesn't answer my health check in time start to timeout this is interesting now",
    "start": "2649440",
    "end": "2654509"
  },
  {
    "text": "it's very bad for understanding the network condition so you know for example shallow health",
    "start": "2654509",
    "end": "2663160"
  },
  {
    "text": "check would have said my instance is healthy and if you will have an API that",
    "start": "2663160",
    "end": "2669550"
  },
  {
    "text": "ask to sent an email your email wouldn't have been sent for example whereas the dippers check will check the condition",
    "start": "2669550",
    "end": "2675190"
  },
  {
    "text": "of that email server and returns are you healthy of course I'm not healthy now",
    "start": "2675190",
    "end": "2680650"
  },
  {
    "text": "you might also think okay but that's actually a problem right because which",
    "start": "2680650",
    "end": "2687130"
  },
  {
    "text": "service actually in in the holes system are critical is actually an email server",
    "start": "2687130",
    "end": "2694599"
  },
  {
    "text": "critical to your application so that for health check you should say no not",
    "start": "2694599",
    "end": "2699940"
  },
  {
    "text": "healthy so don't send me traffic I cannot send the emails well no right so",
    "start": "2699940",
    "end": "2706150"
  },
  {
    "text": "very often what you want to do is have a prioritization of your system thinking",
    "start": "2706150",
    "end": "2711280"
  },
  {
    "text": "out is it a critical service is it not critical what should I do if I have",
    "start": "2711280",
    "end": "2717069"
  },
  {
    "text": "email server going down should I actually report that I'm and healthy or should I just do an asynchronous call to",
    "start": "2717069",
    "end": "2724180"
  },
  {
    "text": "a queue that will allow work instance to take that job and send the job to email",
    "start": "2724180",
    "end": "2730660"
  },
  {
    "text": "server in guess in case this is healthy oh when it goes back online right so",
    "start": "2730660",
    "end": "2737859"
  },
  {
    "text": "that discussions needs to happen right it's not just straightforward to say oh I want to use I want to do a health",
    "start": "2737859",
    "end": "2743920"
  },
  {
    "text": "check is you have to think carefully which one to use deep health checks are very good for when the system is running",
    "start": "2743920",
    "end": "2751660"
  },
  {
    "text": "when the cache has been warmed up to figuring out if actually your application can do complex queries but",
    "start": "2751660",
    "end": "2757450"
  },
  {
    "text": "it's very bad I'd start up a start up time if a cache is not warmed up or if downstream",
    "start": "2757450",
    "end": "2764980"
  },
  {
    "text": "services take a bit longer to start your instance is healthy and then your deep",
    "start": "2764980",
    "end": "2771490"
  },
  {
    "text": "health check will return not available because my cluster for example takes",
    "start": "2771490",
    "end": "2776589"
  },
  {
    "text": "time to start so actually this is very important to do so when you have an",
    "start": "2776589",
    "end": "2783130"
  },
  {
    "text": "architectures and when you build microservices try to build a map of critical services how your API",
    "start": "2783130",
    "end": "2790630"
  },
  {
    "text": "map to that sir to that service path which coal should be a synchronous because in that case you very easy to",
    "start": "2790630",
    "end": "2797979"
  },
  {
    "text": "say my email server is actually not critical instead of having your health",
    "start": "2797979",
    "end": "2803440"
  },
  {
    "text": "check our health check your queue for example say oh can I take the job of and",
    "start": "2803440",
    "end": "2808869"
  },
  {
    "text": "then make an asking for news call to queue and then send that to your servers they should absolutely not be not",
    "start": "2808869",
    "end": "2815619"
  },
  {
    "text": "billing and it might be trivial but actually very very often you see you see",
    "start": "2815619",
    "end": "2821769"
  },
  {
    "text": "through health check couplings of services which you don't necessarily think of so many of the problems have",
    "start": "2821769",
    "end": "2829420"
  },
  {
    "text": "been fixed inside in the architectures I've seen in the last 15 years by doing",
    "start": "2829420",
    "end": "2835869"
  },
  {
    "text": "this kind of very simple mapping of health check and how do we behave other",
    "start": "2835869",
    "end": "2841269"
  },
  {
    "text": "service criticals or not and this health check actually should not just be an",
    "start": "2841269",
    "end": "2849339"
  },
  {
    "start": "2844000",
    "end": "2844000"
  },
  {
    "text": "information for instances in the cloud actually you should bring back that information especially information for",
    "start": "2849339",
    "end": "2854979"
  },
  {
    "text": "deep health check bring it back to the clients because they are very very",
    "start": "2854979",
    "end": "2860019"
  },
  {
    "text": "useful to do service degradation so take the UI of Netflix for example actually when you scroll the UI it's",
    "start": "2860019",
    "end": "2867640"
  },
  {
    "text": "composed of many different let's say micro services like Rick that are powered by recommendation engines like",
    "start": "2867640",
    "end": "2874650"
  },
  {
    "text": "trending now or you watch that movie so you probably like this one this kind of",
    "start": "2874650",
    "end": "2880779"
  },
  {
    "text": "things right so there's about 150 services powering the UI of Netflix if",
    "start": "2880779",
    "end": "2886420"
  },
  {
    "text": "you have a deep health check that brings back kind of information about the",
    "start": "2886420",
    "end": "2891880"
  },
  {
    "text": "condition of those critical service back to the UI you are able to adapt the UI",
    "start": "2891880",
    "end": "2896920"
  },
  {
    "text": "and make the UI not show errors for example right so you can hide you can",
    "start": "2896920",
    "end": "2902349"
  },
  {
    "text": "say okay if my if my service that is recommending is not responding to a",
    "start": "2902349",
    "end": "2910089"
  },
  {
    "text": "health check well actually I'll just cancel it no but you can do something",
    "start": "2910089",
    "end": "2916839"
  },
  {
    "text": "else as well you can Dec take that information from the deep health check and actually do",
    "start": "2916839",
    "end": "2921940"
  },
  {
    "text": "fall backs and this is very interesting thing for example in that case if my recommendation engine doesn't work you",
    "start": "2921940",
    "end": "2928300"
  },
  {
    "text": "would fall back to cash say o popular on Netflix doesn't need any recommendation",
    "start": "2928300",
    "end": "2936250"
  },
  {
    "text": "engine is simply a value an array of ideas in cash right so the whole thing",
    "start": "2936250",
    "end": "2942580"
  },
  {
    "text": "can be degraded simply because we have done a deep health check and then return",
    "start": "2942580",
    "end": "2947920"
  },
  {
    "text": "that value into the arrived amazon.com works like this as well will collapse",
    "start": "2947920",
    "end": "2953080"
  },
  {
    "text": "the UI will will do fallback in case of some of the services downstream not",
    "start": "2953080",
    "end": "2959080"
  },
  {
    "text": "working properly or not returning to create value and it's also very interesting to spread load run if you",
    "start": "2959080",
    "end": "2965950"
  },
  {
    "text": "start identifying clusters in sales that have in our sales architectures that has",
    "start": "2965950",
    "end": "2972070"
  },
  {
    "text": "its degradation of service you can actually start moving traffic around so",
    "start": "2972070",
    "end": "2979900"
  },
  {
    "start": "2979000",
    "end": "2979000"
  },
  {
    "text": "that leads me to pattern 8 actually very very common I'm sure all of you know",
    "start": "2979900",
    "end": "2985090"
  },
  {
    "text": "that pattern is using circuit breaker right which a circuit breaker is simply",
    "start": "2985090",
    "end": "2990160"
  },
  {
    "text": "a way to decouple request from one service to another and you kind of wrap",
    "start": "2990160",
    "end": "2996160"
  },
  {
    "text": "a request call inside an object that objects monitor the conditions of the",
    "start": "2996160",
    "end": "3001290"
  },
  {
    "text": "downstream service that it wants to connect to and if there is a lot of",
    "start": "3001290",
    "end": "3006780"
  },
  {
    "text": "different timeouts going above a threshold you break the circuit now the",
    "start": "3006780",
    "end": "3014970"
  },
  {
    "text": "interesting part with this is actually for developers because if you use circuit breaker it forces developers to",
    "start": "3014970",
    "end": "3021810"
  },
  {
    "text": "think about fallback you say alright when you create your object you have the",
    "start": "3021810",
    "end": "3028670"
  },
  {
    "text": "connection check monitoring that's fine but your object needs a fallback what do",
    "start": "3028670",
    "end": "3034770"
  },
  {
    "text": "you do in case my circuit breaks so this is why I really like that pattern and",
    "start": "3034770",
    "end": "3040550"
  },
  {
    "text": "now database a little bit very classic patterns database Federation is a",
    "start": "3040550",
    "end": "3047880"
  },
  {
    "start": "3042000",
    "end": "3042000"
  },
  {
    "text": "classic way of looking at you know spreading the load across different",
    "start": "3047880",
    "end": "3052910"
  },
  {
    "text": "database is very common in customers or especially that scale to never touch the",
    "start": "3052910",
    "end": "3060980"
  },
  {
    "text": "database until the last moment because everyone is scared of database actually every companies I've worked with it's",
    "start": "3060980",
    "end": "3067160"
  },
  {
    "text": "always been like this so I everything was beautiful and in the database we can touch that piece man",
    "start": "3067160",
    "end": "3073400"
  },
  {
    "text": "so one of the simple patterns database Federation when you look at queries actually very often you will see that",
    "start": "3073400",
    "end": "3081440"
  },
  {
    "text": "tables don't necessary need to whole database don't necessary Oh tables don't",
    "start": "3081440",
    "end": "3086900"
  },
  {
    "text": "need to be shared in the same database because there are no join so performance",
    "start": "3086900",
    "end": "3092780"
  },
  {
    "text": "wise you actually can scale them independently you might have users and",
    "start": "3092780",
    "end": "3097820"
  },
  {
    "text": "product and then have them scale different different ways at Amazon in",
    "start": "3097820",
    "end": "3104480"
  },
  {
    "text": "2017 we actually analyzed as well the database queries that were happening on on the platform and 70% of them were not",
    "start": "3104480",
    "end": "3112250"
  },
  {
    "text": "transactional and guess what we were using only transactional database right",
    "start": "3112250",
    "end": "3117760"
  },
  {
    "text": "that's crazy this is why we started the whole dynamo Domino thing DynamoDB was",
    "start": "3117760",
    "end": "3124100"
  },
  {
    "text": "created simply because we actually realized that patterns were not transaction it was we had we were trying",
    "start": "3124100",
    "end": "3135470"
  },
  {
    "text": "to scale our transactional data is actually Oracle database back in the days and we had massive problem with",
    "start": "3135470",
    "end": "3140510"
  },
  {
    "text": "that because we were not using database for what is good for another way to do",
    "start": "3140510",
    "end": "3147110"
  },
  {
    "start": "3146000",
    "end": "3146000"
  },
  {
    "text": "or to scale a little bit is charting right this is very common when you have global application you shard your",
    "start": "3147110",
    "end": "3153890"
  },
  {
    "text": "database per geography so for example you say okay all my users in Europe will go in a particular database or a",
    "start": "3153890",
    "end": "3159590"
  },
  {
    "text": "particular table and then you can split them you can do Federation after that so this is very common pattern but actually",
    "start": "3159590",
    "end": "3167090"
  },
  {
    "start": "3167000",
    "end": "3167000"
  },
  {
    "text": "very interesting patterns for resiliency is and very simple is readwrite",
    "start": "3167090",
    "end": "3172720"
  },
  {
    "text": "separation and crazy enough it's very rare that people implement that right so",
    "start": "3172720",
    "end": "3179900"
  },
  {
    "text": "if you are using RDS or or transactional database most of them support replicas right so",
    "start": "3179900",
    "end": "3187010"
  },
  {
    "text": "that means you can have a master database which replicate data synchronously or asynchronously to read",
    "start": "3187010",
    "end": "3192800"
  },
  {
    "text": "replicas so that means you can actually preserve your master for all the rights and then do the reads on the replicas of",
    "start": "3192800",
    "end": "3198830"
  },
  {
    "text": "course you are in the realm of eventual consistency because your master and you",
    "start": "3198830",
    "end": "3206150"
  },
  {
    "text": "read replicas might not have exactly the same value for particular data but is",
    "start": "3206150",
    "end": "3212650"
  },
  {
    "text": "price to pay for having this kind of system resilient system and the",
    "start": "3212650",
    "end": "3217940"
  },
  {
    "text": "interesting thing with this is actually you can fall back into read-only mode so for example like Amazon amazon.com",
    "start": "3217940",
    "end": "3225920"
  },
  {
    "text": "business or let's say prime video is how its implemented Prime video business is",
    "start": "3225920",
    "end": "3232130"
  },
  {
    "text": "actually to serve videos right now if the database breaks should we forbid",
    "start": "3232130",
    "end": "3240170"
  },
  {
    "text": "everyone to watch videos because we couldn't fall back now so if the database for master falls down or if the",
    "start": "3240170",
    "end": "3247610"
  },
  {
    "text": "experiencing an issue or if we have to maintain it if we have to change the schema or something",
    "start": "3247610",
    "end": "3252770"
  },
  {
    "text": "we actually fall back into read-only mode and that's it we suffer the",
    "start": "3252770",
    "end": "3258740"
  },
  {
    "text": "consequences for example well we won't be able to track some particular type of data at that time but as a user you can",
    "start": "3258740",
    "end": "3266840"
  },
  {
    "text": "still consume and this is the most important right so this is actually very interesting interesting pattern for",
    "start": "3266840",
    "end": "3273050"
  },
  {
    "text": "degradation and you should definitely think about it when you design",
    "start": "3273050",
    "end": "3278330"
  },
  {
    "text": "application now continuing in the database a very common pattern is",
    "start": "3278330",
    "end": "3284750"
  },
  {
    "start": "3280000",
    "end": "3280000"
  },
  {
    "text": "actually to store transient State in database like values of counters I've",
    "start": "3284750",
    "end": "3289880"
  },
  {
    "text": "seen this ridiculously amount of time a counter which usually use an update",
    "start": "3289880",
    "end": "3296090"
  },
  {
    "text": "queries update queries lock the table so that means you cannot do writes on other",
    "start": "3296090",
    "end": "3301880"
  },
  {
    "text": "fields so that if you have a lot of users or if your database starts to slow down you're gonna have accumulation of",
    "start": "3301880",
    "end": "3307670"
  },
  {
    "text": "update queries eventually your database will go down taking cascading failures",
    "start": "3307670",
    "end": "3313100"
  },
  {
    "text": "and boom-boom-boom I've seen this happen all the time so use the database for",
    "start": "3313100",
    "end": "3319430"
  },
  {
    "text": "immutable data if you have data that is gonna be mutated in a minute 2 minute 5 minute it should not",
    "start": "3319430",
    "end": "3326819"
  },
  {
    "text": "bend a little bit because that scale it's gonna break it's guaranteed",
    "start": "3326819",
    "end": "3332540"
  },
  {
    "text": "especially for sequel and transactional database so transit state move that to",
    "start": "3332540",
    "end": "3338190"
  },
  {
    "text": "no sequel or email restore like you know radius or memcache something like this",
    "start": "3338190",
    "end": "3344930"
  },
  {
    "text": "especially in distributed system but not transactional for people very",
    "start": "3344930",
    "end": "3351450"
  },
  {
    "text": "interesting pattern is think about firefighters right firefighters take",
    "start": "3351450",
    "end": "3357359"
  },
  {
    "text": "about 80 percent of the time to practice fighting fire in an experiment condition",
    "start": "3357359",
    "end": "3366270"
  },
  {
    "text": "or in the test condition so they go into a place train could fire and then try to",
    "start": "3366270",
    "end": "3372030"
  },
  {
    "text": "fight it and really pretty much 80% of the time they do this and you know what",
    "start": "3372030",
    "end": "3378200"
  },
  {
    "text": "simply because they need to build what we call intuition intuition for fighting",
    "start": "3378200",
    "end": "3383309"
  },
  {
    "text": "fighter firefighter if actually they don't use intuition they will have to think too much and it will be dead so",
    "start": "3383309",
    "end": "3391890"
  },
  {
    "text": "you have to take that patterns and actually think about it in in terms of",
    "start": "3391890",
    "end": "3397829"
  },
  {
    "text": "architectures in systems and Amazon in 2017 we brought one of one firefighter",
    "start": "3397829",
    "end": "3403260"
  },
  {
    "text": "to actually lead the resiliency team called Jesse Robbins he was a",
    "start": "3403260",
    "end": "3408960"
  },
  {
    "text": "firefighter and started to do what we called game days back in the day game days it was I it was literally going",
    "start": "3408960",
    "end": "3415559"
  },
  {
    "text": "around the datacenter pulling out cables of stuff and figuring out what happened",
    "start": "3415559",
    "end": "3421280"
  },
  {
    "text": "of course he was a contained environment we really tried to reduce the blast reduce there's a legend I actually went",
    "start": "3421280",
    "end": "3428309"
  },
  {
    "text": "into breaking whole data center the result was dramatic but they learned a lot out of it and actually this practice",
    "start": "3428309",
    "end": "3435390"
  },
  {
    "text": "is still used today we do game days all the time every time we launch a new",
    "start": "3435390",
    "end": "3441089"
  },
  {
    "text": "region we actually spend weeks and weeks breaking things in figuring out if the",
    "start": "3441089",
    "end": "3447450"
  },
  {
    "text": "system is gonna be resilient Netflix called that chaos engineering right y'all know case engineering because of",
    "start": "3447450",
    "end": "3454680"
  },
  {
    "start": "3450000",
    "end": "3450000"
  },
  {
    "text": "the chaos monkey Netflix started to do chaos monkey back in the days when",
    "start": "3454680",
    "end": "3459910"
  },
  {
    "text": "they started to replicate their application across multiple regions and having very complex architectures they",
    "start": "3459910",
    "end": "3466180"
  },
  {
    "text": "needed to start breaking things randomly to see how the system was behaving and",
    "start": "3466180",
    "end": "3471190"
  },
  {
    "text": "actually they realized and you don't listen see start which production environment so don't go Monday and so Adrian say we should do case engineering",
    "start": "3471190",
    "end": "3477820"
  },
  {
    "text": "let's break the data base in production now start in a test environment build confidence into the system figure out if",
    "start": "3477820",
    "end": "3484720"
  },
  {
    "text": "you have the right patterns if all those patterns have been implemented if you've thought about it if your timeouts are",
    "start": "3484720",
    "end": "3490120"
  },
  {
    "text": "correct if your retries are correct this is the only place where you can actually",
    "start": "3490120",
    "end": "3495130"
  },
  {
    "text": "do real test is production eventually and this is why all those patterns are interesting multi AZ's sales because you",
    "start": "3495130",
    "end": "3502000"
  },
  {
    "text": "can have live traffic which has a very",
    "start": "3502000",
    "end": "3507580"
  },
  {
    "text": "limited blast radius you can figure out where to do this of course doing a/b",
    "start": "3507580",
    "end": "3513700"
  },
  {
    "text": "testing or cannery deployments it's very important for that as well so try to",
    "start": "3513700",
    "end": "3519040"
  },
  {
    "text": "experiment with chaos engineering chaos engineering you need to figure out this steady state of the environment and make",
    "start": "3519040",
    "end": "3525750"
  },
  {
    "text": "hypotheses and say oh how is my system going to behave if I remove the database",
    "start": "3525750",
    "end": "3531910"
  },
  {
    "text": "if you ask all this is software engineer in the company often everyone will give",
    "start": "3531910",
    "end": "3538750"
  },
  {
    "text": "a different answer you I will say something the our designer will say something the database guy will say",
    "start": "3538750",
    "end": "3544270"
  },
  {
    "text": "something the backing guy would say something the manager will say something that's actually very interesting data is",
    "start": "3544270",
    "end": "3551410"
  },
  {
    "text": "why is everyone having a different answer and then take that data that's enough to start with and then once",
    "start": "3551410",
    "end": "3558160"
  },
  {
    "text": "everyone has the same answer then go and test it on check your",
    "start": "3558160",
    "end": "3563680"
  },
  {
    "text": "hypothesis and say oh actually is the system really going into read-only mode",
    "start": "3563680",
    "end": "3569260"
  },
  {
    "text": "is my failover really happening after 60 seconds is my client really retrying is",
    "start": "3569260",
    "end": "3574930"
  },
  {
    "text": "my client really supporting read-only mode what happens if I lose a DNS of all",
    "start": "3574930",
    "end": "3583210"
  },
  {
    "text": "the DNS address or domain name of my database or if I change it actually back",
    "start": "3583210",
    "end": "3589960"
  },
  {
    "text": "in the day if you using Java framework you had to restart",
    "start": "3589960",
    "end": "3595290"
  },
  {
    "text": "the whole framework to be able to update the DNS there was no way to do a hot reload all this kind of stuff was very",
    "start": "3595290",
    "end": "3603390"
  },
  {
    "text": "common in all frameworks to do this and many systems still are like this and there's only in these conditions where",
    "start": "3603390",
    "end": "3609180"
  },
  {
    "text": "you can actually test those so try to experiment and think how chaos",
    "start": "3609180",
    "end": "3614640"
  },
  {
    "text": "engineering to do can I help you and it's very simple case engineering it's like vaccination you go into the system",
    "start": "3614640",
    "end": "3620490"
  },
  {
    "text": "and you inoculate with failures the best one is latency latency is a deadly thing",
    "start": "3620490",
    "end": "3627930"
  },
  {
    "text": "it actually will take down system like you've never seen before add 300 milliseconds latency to a back-end and",
    "start": "3627930",
    "end": "3635900"
  },
  {
    "text": "crazy things will happen in fact I'll give you what we've noticed the Amazon",
    "start": "3635900",
    "end": "3641880"
  },
  {
    "text": "hundred percent 100 milliseconds license increase on the UI add an effect of 1%",
    "start": "3641880",
    "end": "3647550"
  },
  {
    "text": "sale drop 100 milliseconds is something the human eye can't even see right and",
    "start": "3647550",
    "end": "3654170"
  },
  {
    "text": "through experiment chaos and genuine we realize actually 100 milliseconds Latins the increase on the UI has an effect on",
    "start": "3654170",
    "end": "3661470"
  },
  {
    "text": "sales of 1 percent for each hundred millisecond increase which is crazy at",
    "start": "3661470",
    "end": "3667710"
  },
  {
    "text": "the sales Amazon is a lot of money so this is a very good way to do it but you",
    "start": "3667710",
    "end": "3673080"
  },
  {
    "text": "don't necessarily have to do like applications on network or host failures you can do people failure I love the",
    "start": "3673080",
    "end": "3680280"
  },
  {
    "text": "attack what I call the pole attack we all have in our company a guy named Paul Paul does everything he knows everything",
    "start": "3680280",
    "end": "3686280"
  },
  {
    "text": "how things work how they fix he takes he looks at the problem fixes it and we move on you know Paul you have a poll",
    "start": "3686280",
    "end": "3693240"
  },
  {
    "text": "right we all have those guys Paul give me your laptop don't come to work today superb attack actually I've seen company",
    "start": "3693240",
    "end": "3701370"
  },
  {
    "text": "fail miserably because of that and that's the buzz factor right it's what if Paul actually dies today what happens",
    "start": "3701370",
    "end": "3708900"
  },
  {
    "text": "how do we recover from that that fix this region attacks once a month they",
    "start": "3708900",
    "end": "3715590"
  },
  {
    "text": "actually break the entire AWS region and do traffic shift live in production",
    "start": "3715590",
    "end": "3721500"
  },
  {
    "text": "while you watch your movie that's how good become they've done they've been",
    "start": "3721500",
    "end": "3726930"
  },
  {
    "text": "practicing chaos engineering for about seven eight years this is actually not impossible it's something that you can",
    "start": "3726930",
    "end": "3733019"
  },
  {
    "text": "also aim for start small I don't necessary to reach in right away",
    "start": "3733019",
    "end": "3738839"
  },
  {
    "text": "you know start small and then build confidence again in my last advice",
    "start": "3738839",
    "end": "3745109"
  },
  {
    "text": "actually and this is totally related to resiliency is always planned for the worst",
    "start": "3745109",
    "end": "3750269"
  },
  {
    "text": "but be prepared for the unexpected because that's didn't expected that will break you in fact my last outage was a",
    "start": "3750269",
    "end": "3756269"
  },
  {
    "text": "squirrel eating electric cable and that's how it happened so we never",
    "start": "3756269",
    "end": "3764009"
  },
  {
    "text": "thought about that okay thanks a lot and thanks for staying here with me if you",
    "start": "3764009",
    "end": "3770219"
  },
  {
    "text": "want to read more about some of the stuff I published quite much on medium and that presentation is actually",
    "start": "3770219",
    "end": "3776700"
  },
  {
    "text": "already downloadable I just uploaded it to speaker deck so if you want that you",
    "start": "3776700",
    "end": "3781950"
  },
  {
    "text": "can get it right away thank you very much have a good evening enjoy your beer",
    "start": "3781950",
    "end": "3787100"
  },
  {
    "text": "[Applause]",
    "start": "3787100",
    "end": "3790100"
  }
]