[
  {
    "text": "okay uh i'll be on great so hello everyone",
    "start": "8080",
    "end": "14480"
  },
  {
    "text": "good to see you all here despite the restrictions great to see uh quite a few of you come along here",
    "start": "14480",
    "end": "21199"
  },
  {
    "text": "um they've given this talk twice before once online and i did manage to give it in person at",
    "start": "21199",
    "end": "26880"
  },
  {
    "text": "nbc tech town over in kongsberg a couple of months ago and i have to say it does work so much nicer in person so",
    "start": "26880",
    "end": "34559"
  },
  {
    "text": "uh so good to see you all here thanks for coming so welcome to solid revisited",
    "start": "34559",
    "end": "40079"
  },
  {
    "text": "and we will revisit that title as we go go through the material of course so i'm phil nash developer",
    "start": "40079",
    "end": "46239"
  },
  {
    "text": "advocate at sonar source uh if you've seen it in my talks before you may have seen uh a jet brains logo",
    "start": "46239",
    "end": "52000"
  },
  {
    "text": "up there before but i'm now at soda sauce so uh i've got the t-shirt as well just to emphasize that",
    "start": "52000",
    "end": "58559"
  },
  {
    "text": "so solid revisited the state of the matter uh what are we talking about here",
    "start": "58559",
    "end": "64400"
  },
  {
    "text": "obviously the solid principles um who's heard of the solid principles so",
    "start": "64400",
    "end": "69760"
  },
  {
    "text": "just about everyone that's uh that's a good start but who can actually tell me",
    "start": "69760",
    "end": "75119"
  },
  {
    "text": "uh what they all are i'm not going to ask you to recite them but uh who thinks they know them all",
    "start": "75119",
    "end": "81360"
  },
  {
    "text": "and of those few people that said that who thinks they really know what they all mean",
    "start": "81360",
    "end": "86960"
  },
  {
    "text": "[Laughter] so this is a set of principles design principles that we're meant to sort of",
    "start": "86960",
    "end": "94560"
  },
  {
    "text": "take quite seriously and follow um in our development and yet nobody in this room that was interested in the",
    "start": "94560",
    "end": "100400"
  },
  {
    "text": "solid principles and came here actually knows what they are unless of course you thought this was an introduction to the",
    "start": "100400",
    "end": "106079"
  },
  {
    "text": "solid principles um in which case maybe there's still time to revisit that",
    "start": "106079",
    "end": "111520"
  },
  {
    "text": "decision actually if you don't know what they are uh you hopefully will learn quite a bit",
    "start": "111520",
    "end": "116799"
  },
  {
    "text": "about them although i'm not gonna use the traditional approach of going through them one by one and and discussing them",
    "start": "116799",
    "end": "123040"
  },
  {
    "text": "it's gonna be more about tearing them down and rebuilding them and they're seeing what's what's behind them and",
    "start": "123040",
    "end": "129039"
  },
  {
    "text": "also a little bit of a history behind them now i i didn't actually set out to to",
    "start": "129039",
    "end": "134400"
  },
  {
    "text": "write this talk originally it sort of evolved uh after some ideas",
    "start": "134400",
    "end": "139440"
  },
  {
    "text": "i'd been i'd have kicking around i do a tdd training course where i talk about",
    "start": "139440",
    "end": "144560"
  },
  {
    "text": "the solid principles and i realize that i really talk about them i sort of talk around them and i reference a talk by kevin henney",
    "start": "144560",
    "end": "151440"
  },
  {
    "text": "uh solid lead construction which he did at this conference a few years ago which",
    "start": "151440",
    "end": "156560"
  },
  {
    "text": "is a great talk but we'll actually discuss it a bit more later as well do a bit of a meta review",
    "start": "156560",
    "end": "162400"
  },
  {
    "text": "um there'll be references to all of the additional material that i'm going to mention through the talk by the way",
    "start": "162400",
    "end": "168080"
  },
  {
    "text": "at the end i'll give you a single link you can follow so you can you can find that talk easily and a few other talks",
    "start": "168080",
    "end": "174879"
  },
  {
    "text": "as well um so yeah as part of that material i do my tdd training i thought i'm not really",
    "start": "174879",
    "end": "181360"
  },
  {
    "text": "doing it justice so finally i decided to put this material together but i first",
    "start": "181360",
    "end": "187599"
  },
  {
    "text": "did it as a more of an interactive thing at the extreme tuesday club in london um earlier in the year and i managed to",
    "start": "187599",
    "end": "193920"
  },
  {
    "text": "get kevin henny and dan north who is another talk that we're going to talk",
    "start": "193920",
    "end": "199519"
  },
  {
    "text": "about um it's part of this material they both came along so we had quite a discussion about it so i've got extra material to",
    "start": "199519",
    "end": "206239"
  },
  {
    "text": "go in so that's really what this is all about so maybe become clear as we go through but",
    "start": "206239",
    "end": "212319"
  },
  {
    "text": "let's start with that history um if you weren't too sure about the solid principles and you did a google search",
    "start": "212319",
    "end": "219200"
  },
  {
    "text": "just to find out you know where should i get started you might hit this blog post",
    "start": "219200",
    "end": "224560"
  },
  {
    "text": "by uh by bob martin aka uncle bob sure we've all heard of bob martin um obviously",
    "start": "224560",
    "end": "231280"
  },
  {
    "text": "the one who put the solid principles together although some nuances there we'll get to that so 2009",
    "start": "231280",
    "end": "238319"
  },
  {
    "text": "this game that's a little while ago now um but you know he does say i'm often asked",
    "start": "238319",
    "end": "243439"
  },
  {
    "text": "ask how should i get started with the solid principles uh so that seems to be the right place",
    "start": "243439",
    "end": "248720"
  },
  {
    "text": "to start but then in that first things first section he says you can read about the solid",
    "start": "248720",
    "end": "255200"
  },
  {
    "text": "principles here it gives a link great let's follow that",
    "start": "255200",
    "end": "260239"
  },
  {
    "text": "and unfortunately it takes you to to this site which is a choose vacation rentals",
    "start": "260239",
    "end": "266080"
  },
  {
    "text": "unfortunately he he no longer is in control of the object mentor um domain name it's been link jacked in",
    "start": "266080",
    "end": "273120"
  },
  {
    "text": "fact most of the links in the article now resolve here so not so useful of course we have a solution to that the wayback",
    "start": "273120",
    "end": "279520"
  },
  {
    "text": "machine so we can find what he was referring to it says design principles and design",
    "start": "279520",
    "end": "285040"
  },
  {
    "text": "patterns paper uh from uh from about 20 years ago now a couple of decades",
    "start": "285040",
    "end": "290960"
  },
  {
    "text": "um and it's quite a long paper actually it's an interesting read",
    "start": "290960",
    "end": "296960"
  },
  {
    "text": "so it's got as i said principles and patterns put some side by side",
    "start": "296960",
    "end": "302000"
  },
  {
    "text": "so just picking up the principles that he talks about and we're just going to use the three-letter acronym acronyms for now we'll get to the",
    "start": "302000",
    "end": "308479"
  },
  {
    "text": "names later these are the principles that he talks about so you might recognize some of them but",
    "start": "308479",
    "end": "315199"
  },
  {
    "text": "there's a few more if we wanted to follow these we might say that we're following the old dica cast principles which doesn't",
    "start": "315199",
    "end": "321919"
  },
  {
    "text": "quite roll off the tongue as well um which yeah might be just a throwaway uh joke",
    "start": "321919",
    "end": "328560"
  },
  {
    "text": "but actually there's a serious point behind that looking at the first four",
    "start": "328560",
    "end": "334639"
  },
  {
    "text": "okay maybe we can get the oldie principles that's a little bit more promising they are getting quite old now but",
    "start": "334639",
    "end": "340160"
  },
  {
    "text": "yeah these are part of what we now think of of the solid principles",
    "start": "340160",
    "end": "345440"
  },
  {
    "text": "it's only a bit later that he added srp to that list to get well the the salty principles",
    "start": "345440",
    "end": "353360"
  },
  {
    "text": "it's still not quite there but forward a couple of years 2003",
    "start": "353360",
    "end": "360240"
  },
  {
    "text": "beginning of bob martin released this book agile software development",
    "start": "360240",
    "end": "366400"
  },
  {
    "text": "principles patterns and practices and in well from chapter seven what is agile",
    "start": "366400",
    "end": "373680"
  },
  {
    "text": "design he then introduces this set of principles notice still in the order soldie",
    "start": "373680",
    "end": "380720"
  },
  {
    "text": "so we haven't actually got the solid principles yet we've got the extra principles themselves but not that acronym",
    "start": "380720",
    "end": "388639"
  },
  {
    "text": "2005 so a couple years later again bob martin",
    "start": "390160",
    "end": "395360"
  },
  {
    "text": "writes the principles of ood or principles of ood and",
    "start": "395360",
    "end": "401600"
  },
  {
    "text": "you notice at the bottom there we've got those principles listed in now the order of solid",
    "start": "401600",
    "end": "409840"
  },
  {
    "text": "there's two matter of a bit easier to read still blurring out the the actual",
    "start": "410400",
    "end": "416080"
  },
  {
    "text": "names for now in fact he then goes on to talk about those other principles as well from from the earlier paper",
    "start": "416080",
    "end": "423440"
  },
  {
    "text": "interestingly in that whole article he never once says the solid principles so he's got",
    "start": "423440",
    "end": "429039"
  },
  {
    "text": "them in the right order but not not by name yet what happened in the meantime though was it had a conversation with michael",
    "start": "429039",
    "end": "435520"
  },
  {
    "text": "feathers uh neither of them could remember exactly when it was so i can't pinpoint that but sometime between 2003 2005",
    "start": "435520",
    "end": "442960"
  },
  {
    "text": "feathers said you know if you just change those last two around you've got a nice acronym there uh this is the first that i could find",
    "start": "442960",
    "end": "449120"
  },
  {
    "text": "he actually put them in that order sometime after that he started talking about the solid",
    "start": "449120",
    "end": "454560"
  },
  {
    "text": "principles so we've got a bit of a timeline all these things we just talked about",
    "start": "454560",
    "end": "459680"
  },
  {
    "text": "from 2000 to 2005 and on um but there's also a little",
    "start": "459680",
    "end": "465440"
  },
  {
    "text": "bit of a pre-history here because while we credit bob martin with the solid principles he didn't actually",
    "start": "465440",
    "end": "472160"
  },
  {
    "text": "come up with the underlying ideas at least not all of them we actually have to go back as far as",
    "start": "472160",
    "end": "477520"
  },
  {
    "text": "the 70s for that 79 tom demarco wrote a structured analysis and system",
    "start": "477520",
    "end": "483919"
  },
  {
    "text": "specification and a big section there is about cohesion",
    "start": "483919",
    "end": "490160"
  },
  {
    "text": "which forms the basis of srp we'll talk about that a bit later 1988 bertrand mayor object-oriented",
    "start": "490160",
    "end": "498000"
  },
  {
    "text": "software construction we get the the open closed principle from that we'll talk about that",
    "start": "498000",
    "end": "503520"
  },
  {
    "text": "later as well also in 1988 barbara liskoff data abstractions and hierarchy",
    "start": "503520",
    "end": "509599"
  },
  {
    "text": "and we get the the well she didn't call it the list of substitution principle but that's where we get that from",
    "start": "509599",
    "end": "516560"
  },
  {
    "text": "um and then in the mid-90s robert martin himself wrote a series of uh papers for the subplus plus report",
    "start": "516560",
    "end": "523760"
  },
  {
    "text": "where he he picked some of those ideas and added a few of his own and that between",
    "start": "523760",
    "end": "529760"
  },
  {
    "text": "all of those that's where we get those five principles are you notice they even come in more or less in",
    "start": "529760",
    "end": "535279"
  },
  {
    "text": "chronological order so that was that was quite nice and the rest as they say",
    "start": "535279",
    "end": "540640"
  },
  {
    "text": "is history we will actually come back to some of these",
    "start": "540640",
    "end": "545839"
  },
  {
    "text": "these uh this historical context a bit later so it's not just as an interesting aside",
    "start": "545839",
    "end": "551920"
  },
  {
    "text": "but let's actually look at the principles themselves",
    "start": "551920",
    "end": "557120"
  },
  {
    "text": "so not many of you actually said you knew what the names were so i'm not going to",
    "start": "557120",
    "end": "563279"
  },
  {
    "text": "get you to call them out but we'll just very quickly sketch them in so srp is the single responsibility",
    "start": "563279",
    "end": "569760"
  },
  {
    "text": "principle and it's probably the most important one in fact many of the other principles are",
    "start": "569760",
    "end": "575839"
  },
  {
    "text": "derivations of this one way or another and in terms of how",
    "start": "575839",
    "end": "580959"
  },
  {
    "text": "the principles interact with things like tdd and just good design in general everything generally comes back to this",
    "start": "580959",
    "end": "589279"
  },
  {
    "text": "uh the open close principle why i mentioned that by name from bertram mayer",
    "start": "589279",
    "end": "595760"
  },
  {
    "text": "but you know we say it's things are open to extension but closed",
    "start": "595760",
    "end": "600959"
  },
  {
    "text": "to modification still some digging we need to do there though",
    "start": "600959",
    "end": "606240"
  },
  {
    "text": "we also mentioned the list of substitution principle interface segregation principle",
    "start": "606240",
    "end": "613120"
  },
  {
    "text": "you can think of as basically the single responsibility principle but applied at the level of",
    "start": "613120",
    "end": "618240"
  },
  {
    "text": "the interface and the dependency inversion in principle",
    "start": "618240",
    "end": "623279"
  },
  {
    "text": "um best known for being confused with uh dependency injection i find myself saying the dependency",
    "start": "623279",
    "end": "629279"
  },
  {
    "text": "injection principle sometimes there's a relation there but they're not the same thing okay",
    "start": "629279",
    "end": "635200"
  },
  {
    "text": "so they're the principles so we're not gonna dig too much into each one um on their own merits but we",
    "start": "635200",
    "end": "641120"
  },
  {
    "text": "will sort of peel them apart a bit i mentioned a couple of talks that",
    "start": "641120",
    "end": "646560"
  },
  {
    "text": "uh have actually um tried to tear them down rebuild them um i particularly",
    "start": "646560",
    "end": "651839"
  },
  {
    "text": "mentioned this one kevin henny's solid deconstruction so here he's doing it at ndc london another",
    "start": "651839",
    "end": "658839"
  },
  {
    "text": "ndc event um anyone here seen this talk already",
    "start": "658839",
    "end": "666000"
  },
  {
    "text": "yeah well you've got some watching to do it's a great talk and we'll dig into a little bit more but",
    "start": "666000",
    "end": "672160"
  },
  {
    "text": "the other one dan north's why every single element of solid is wrong it was a lightning talk so you can give",
    "start": "672160",
    "end": "679200"
  },
  {
    "text": "him a little bit of uh sort of emphasis there there",
    "start": "679200",
    "end": "684399"
  },
  {
    "text": "unfortunately this one i don't think there's a recording of it online but you can find the slides but that's mostly",
    "start": "684399",
    "end": "690399"
  },
  {
    "text": "what you need to know now both of these",
    "start": "690399",
    "end": "697519"
  },
  {
    "text": "they've also proposed their own acronyms for a set of principles",
    "start": "697600",
    "end": "703200"
  },
  {
    "text": "maybe slightly light-heartedly maybe more seriously depending on how much i've had to drink when you ask them",
    "start": "703200",
    "end": "710480"
  },
  {
    "text": "kevin proposes the the fluid principles and we'll we'll look at those a little",
    "start": "710480",
    "end": "715760"
  },
  {
    "text": "bit later obviously a play on on solid when when i did that xtc event with uh",
    "start": "715760",
    "end": "723440"
  },
  {
    "text": "kevin and dan um dan said that he'd been working on his own set of principles and he wasn't",
    "start": "723440",
    "end": "729600"
  },
  {
    "text": "quite ready to announce it yet but since then he has he's written a blog post on it which i'll give you a link to so he's",
    "start": "729600",
    "end": "734880"
  },
  {
    "text": "proposing the cupid principles and he's a little bit more serious about this so that's worth looking up so we're",
    "start": "734880",
    "end": "741839"
  },
  {
    "text": "digging to the references there we're not going to go into that one too much but",
    "start": "741839",
    "end": "747680"
  },
  {
    "text": "let's start with what his lightning talk was about",
    "start": "747680",
    "end": "752800"
  },
  {
    "text": "he does a lot of this so he's talking about the single responsibility principle he says it's the pointlessly",
    "start": "753760",
    "end": "758800"
  },
  {
    "text": "vague principle and this really gets to the heart of uh the big the biggest problem with this one the principle itself is fine it's",
    "start": "758800",
    "end": "765680"
  },
  {
    "text": "actually the the most important one it's the naming i mean he says it's pointlessly vague maybe that's over the top but it is hard",
    "start": "765680",
    "end": "772800"
  },
  {
    "text": "to really get to the meaning of the single responsibility principle what is a responsibility",
    "start": "772800",
    "end": "777920"
  },
  {
    "text": "why can we only have one what if two responsibilities belong together lots of questions that need to be",
    "start": "777920",
    "end": "784240"
  },
  {
    "text": "resolved it's it's hard to actually do something with it even if you can sort of intuitively get what the idea is",
    "start": "784240",
    "end": "791279"
  },
  {
    "text": "behind it um",
    "start": "791279",
    "end": "795360"
  },
  {
    "text": "not there we go then what happened there so",
    "start": "798839",
    "end": "804079"
  },
  {
    "text": "he proposes instead write simple code okay that makes sense you could argue",
    "start": "804079",
    "end": "810240"
  },
  {
    "text": "that's also a bit vague but actually i think he's onto something here we're gonna come back to that",
    "start": "810240",
    "end": "816079"
  },
  {
    "text": "topic a little bit later as well i do like this expression at the end though",
    "start": "816079",
    "end": "821600"
  },
  {
    "text": "refactor until it fits in your head this is one of dan's favorite phrases he uses it a lot and i think it's",
    "start": "821600",
    "end": "829040"
  },
  {
    "text": "typical dan north sort of practical pragmatic insight if something can fit in your head then",
    "start": "829040",
    "end": "835279"
  },
  {
    "text": "it's simple enough and if it can't well you need to refactor until it does that's actually an actionable principle",
    "start": "835279",
    "end": "841680"
  },
  {
    "text": "there so i really like that but in fact this idea of writing simple code turns out to be his answer to all",
    "start": "841680",
    "end": "848160"
  },
  {
    "text": "of them so as i said i think he's actually on to to",
    "start": "848160",
    "end": "853199"
  },
  {
    "text": "something there we'll we'll touch on that a bit later let's have a look at kevin's talk",
    "start": "853199",
    "end": "859920"
  },
  {
    "text": "so go through this one by one kevin says that the single",
    "start": "859920",
    "end": "866000"
  },
  {
    "text": "responsibility principle is really just tom demarco's idea of cohesion that",
    "start": "866000",
    "end": "871920"
  },
  {
    "text": "things that belong together should be together but things that don't belong together of course shouldn't",
    "start": "871920",
    "end": "878160"
  },
  {
    "text": "and kevin adds in this idea of adhesion as being the the opposite so",
    "start": "878160",
    "end": "883519"
  },
  {
    "text": "yeah things are stuck together but really they shouldn't be together there are adhesives and it's a nice concept",
    "start": "883519",
    "end": "888800"
  },
  {
    "text": "too to keep in mind when you see that in code that's adhesive code gives you a name for it",
    "start": "888800",
    "end": "895199"
  },
  {
    "text": "um separation of concerns is another way of of talking about it which is maybe slightly better than single",
    "start": "895199",
    "end": "900800"
  },
  {
    "text": "responsibility um it gets more to the heart of what it's actually about but cohesion is really",
    "start": "900800",
    "end": "906320"
  },
  {
    "text": "the core concept so it's a shame that it got renamed to something that was less useful",
    "start": "906320",
    "end": "913360"
  },
  {
    "text": "ocp i think you could summarize kevlin's view as",
    "start": "913360",
    "end": "918800"
  },
  {
    "text": "well it just means use polymorphism um but also separately",
    "start": "918800",
    "end": "924560"
  },
  {
    "text": "don't publish interfaces prematurely and what it means by that is that the part of the open closed",
    "start": "924560",
    "end": "930639"
  },
  {
    "text": "principle that the closed part closed for modification that feels a bit dated",
    "start": "930639",
    "end": "936320"
  },
  {
    "text": "rooted in in the 80s when it was expensive to uh to change code and to track it we didn't really have version",
    "start": "936320",
    "end": "942480"
  },
  {
    "text": "control systems um we did that but they weren't widely used so yeah we had to be very careful about",
    "start": "942480",
    "end": "948240"
  },
  {
    "text": "how we modified code um now of course you know we should be feel free",
    "start": "948240",
    "end": "953360"
  },
  {
    "text": "to change our code easily that's a that's a big part of this being able to to change embracing change",
    "start": "953360",
    "end": "959759"
  },
  {
    "text": "but as soon as you've published an interface to something outside of your project or team",
    "start": "959759",
    "end": "964959"
  },
  {
    "text": "maybe even outside your your company as soon as somebody else is relying on it now you've got a contract with them and",
    "start": "964959",
    "end": "971279"
  },
  {
    "text": "at that point you are locked in at least at the interface level so don't do that too soon it's just the advice that he",
    "start": "971279",
    "end": "978560"
  },
  {
    "text": "summarizes from that so okay that's maybe not the takeaway",
    "start": "978560",
    "end": "983839"
  },
  {
    "text": "most people get from the open close principle so that's that's interesting",
    "start": "983839",
    "end": "989519"
  },
  {
    "text": "and then the lisk of substitution principle perhaps the most misunderstood of them all",
    "start": "989519",
    "end": "995600"
  },
  {
    "text": "again he summarizes it really as use polymorphism again",
    "start": "995600",
    "end": "1000720"
  },
  {
    "text": "but carefully and really what he meant by that",
    "start": "1000720",
    "end": "1006320"
  },
  {
    "text": "and i think this only really came out in the discussion xtc was that the list of substitution principles the",
    "start": "1006320",
    "end": "1012480"
  },
  {
    "text": "bit that most people misunderstand is that it's really about contracts again if you have a contract",
    "start": "1012480",
    "end": "1018880"
  },
  {
    "text": "on your interface um you know guaranteeing what the behavior is that contract must be preserved",
    "start": "1018880",
    "end": "1025438"
  },
  {
    "text": "across polymorphism so something can do something different as long as it obeys the same contract you",
    "start": "1025439",
    "end": "1031839"
  },
  {
    "text": "get the same guarantees post conditions preconditions that's the sort of contracts we're talking about",
    "start": "1031839",
    "end": "1038000"
  },
  {
    "text": "not normally in the discussion of the list of substitution principle but that's really what it's about",
    "start": "1038000",
    "end": "1044160"
  },
  {
    "text": "so that was quite insightful level isp",
    "start": "1044160",
    "end": "1050640"
  },
  {
    "text": "just single responsibility principle for interfaces so he claims that's a bit redundant do we actually need a whole",
    "start": "1050640",
    "end": "1057200"
  },
  {
    "text": "separate principle for that tend to agree and the dependency injection i did it",
    "start": "1057200",
    "end": "1063200"
  },
  {
    "text": "again the dependency inversion principle it's really again use polymorphism",
    "start": "1063200",
    "end": "1069679"
  },
  {
    "text": "um specifically you know with interfaces rather than implementation",
    "start": "1069679",
    "end": "1075600"
  },
  {
    "text": "inheritance specifically so there you can see some common themes there there's a lot of",
    "start": "1075600",
    "end": "1081760"
  },
  {
    "text": "the same thing being repeated so in fact you can you can regroup them and you get some sort of a graph like",
    "start": "1081760",
    "end": "1087760"
  },
  {
    "text": "this got three three main areas um the cohesion part",
    "start": "1087760",
    "end": "1094480"
  },
  {
    "text": "separation of concerns is quite central and using polymorphism with interfaces",
    "start": "1094480",
    "end": "1100880"
  },
  {
    "text": "do it carefully you know respect contracts and extra bit on the end don't publish",
    "start": "1100880",
    "end": "1106720"
  },
  {
    "text": "prematurely which is good advice i'm not sure it really qualifies as a like a central principle that we should",
    "start": "1106720",
    "end": "1113200"
  },
  {
    "text": "be following so really just boils down to those two things and cohesion with polymorphism",
    "start": "1113200",
    "end": "1119039"
  },
  {
    "text": "you can summarize the whole of the solid principles as being about so",
    "start": "1119039",
    "end": "1124559"
  },
  {
    "text": "that that really summarizes kevin's talk um there's a lot more to it and lots of extra bits of history and insight so",
    "start": "1124559",
    "end": "1130880"
  },
  {
    "text": "it's definitely well worth watching but this is my main takeaway he has a lot of good points and uh as",
    "start": "1130880",
    "end": "1137679"
  },
  {
    "text": "kevin always does interesting asides but i don't necessarily agree with everything he said",
    "start": "1137679",
    "end": "1144320"
  },
  {
    "text": "and in fact at the end of the talk and we'll see if this audio works",
    "start": "1144320",
    "end": "1148720"
  },
  {
    "text": "uh is that gonna work um maybe you didn't agree with everything in fact probably did agree",
    "start": "1149360",
    "end": "1154400"
  },
  {
    "text": "with everything you weren't listening your day didn't work but hopefully you read that so yeah",
    "start": "1154400",
    "end": "1160880"
  },
  {
    "text": "kevin's talks are not designed to do thinking for you",
    "start": "1160880",
    "end": "1166160"
  },
  {
    "text": "they're designed to make you think so he will say things that um he doesn't expect you to agree with",
    "start": "1166160",
    "end": "1172559"
  },
  {
    "text": "but if he gets you thinking then that's his job done and this is no no exception",
    "start": "1172559",
    "end": "1177840"
  },
  {
    "text": "and i think that points missed in a lot of the criticism of this talk",
    "start": "1177840",
    "end": "1183280"
  },
  {
    "text": "so he's not saying that solid principles have no value or they're completely wrong but maybe we just need a more sort of",
    "start": "1183280",
    "end": "1190000"
  },
  {
    "text": "modern view of them and maybe we can simplify them a bit",
    "start": "1190000",
    "end": "1195280"
  },
  {
    "text": "now looking at this slide from his talk it's an example of something kevin likes",
    "start": "1195280",
    "end": "1200960"
  },
  {
    "text": "doing just about every talk he does takes a picture of some of his books usually on a floor or some other surface",
    "start": "1200960",
    "end": "1207600"
  },
  {
    "text": "and i quite like this idea and as it happened on the same day at the same conference i",
    "start": "1207600",
    "end": "1213200"
  },
  {
    "text": "was giving a talk in another room and i said what kevin does about about these books",
    "start": "1213200",
    "end": "1219440"
  },
  {
    "text": "i like the idea problem is i don't actually read physical books anymore so i took a photo",
    "start": "1219440",
    "end": "1224480"
  },
  {
    "text": "of my ipad on the floor now the reason i'm throwing this in is",
    "start": "1224480",
    "end": "1229679"
  },
  {
    "text": "because that talk was about simplicity as it happens which as dan norford already said uh you",
    "start": "1229679",
    "end": "1237600"
  },
  {
    "text": "know he thinks that's really the central theme to the solid principles uh coincidence we're just talking about the same thing",
    "start": "1237600",
    "end": "1244240"
  },
  {
    "text": "in the same room on the same day we'll come back to how simplicity ties",
    "start": "1244240",
    "end": "1249360"
  },
  {
    "text": "this all together a bit later but uh just to set you up there okay so",
    "start": "1249360",
    "end": "1256000"
  },
  {
    "text": "what really are then the problems with the solid principles i've hinted at some of them already but let's",
    "start": "1256000",
    "end": "1262720"
  },
  {
    "text": "just actually call them out so a whole set of criticisms that have been levelled at",
    "start": "1262720",
    "end": "1268320"
  },
  {
    "text": "the solid principles we're going to pick these off and and see whether they apply um",
    "start": "1268320",
    "end": "1273919"
  },
  {
    "text": "they're not actually principles with one of kevin's points actually not excessively named there's these",
    "start": "1273919",
    "end": "1280159"
  },
  {
    "text": "internal redundancies um you know as that graph showed you actually divide up into really two",
    "start": "1280159",
    "end": "1286320"
  },
  {
    "text": "two principles uh maybe some of them are outdated like the open close principle or maybe their language or oo specific",
    "start": "1286320",
    "end": "1294320"
  },
  {
    "text": "well let's take that first one first are they even principles this is one of the questions kevin asked",
    "start": "1294320",
    "end": "1300640"
  },
  {
    "text": "and he i think he quoted from the the oxford english dictionary for the definition of",
    "start": "1300640",
    "end": "1305919"
  },
  {
    "text": "what a principle is i pulled up this quote from the cambridge dictionary it says very very similar",
    "start": "1305919",
    "end": "1311360"
  },
  {
    "text": "there's a reason i've chosen cambridge i'll come to in a minute but it says it's a basic truth that explains",
    "start": "1311360",
    "end": "1317120"
  },
  {
    "text": "or controls how something happens or works or a basic idea or rule that explains or controls again how",
    "start": "1317120",
    "end": "1324080"
  },
  {
    "text": "something happens or works or a moral rule or standard of good behavior",
    "start": "1324080",
    "end": "1330320"
  },
  {
    "text": "fair dealing and calvin says well these are not truths they're not rules",
    "start": "1330320",
    "end": "1336320"
  },
  {
    "text": "and there's nothing moral about them so why why why do we call them principles",
    "start": "1336320",
    "end": "1342240"
  },
  {
    "text": "and you can sort of see where he's going but if you read on in the cambridge",
    "start": "1342240",
    "end": "1348480"
  },
  {
    "text": "dictionary there's a little aside about in principle",
    "start": "1348480",
    "end": "1354000"
  },
  {
    "text": "where it says if you agree with or believe something in principle you agree with the idea in general",
    "start": "1354000",
    "end": "1359919"
  },
  {
    "text": "although you may not support it in reality in every situation that actually sounds a lot closer",
    "start": "1359919",
    "end": "1366559"
  },
  {
    "text": "to the meaning that we think of when we think of the solid principles yeah they're good like guiding principles",
    "start": "1366559",
    "end": "1373120"
  },
  {
    "text": "but they don't necessarily apply in every situation you've got to use your own",
    "start": "1373120",
    "end": "1378400"
  },
  {
    "text": "thinking there so i actually disagree with kevin on this one i think that we're okay to call them",
    "start": "1378400",
    "end": "1384720"
  },
  {
    "text": "principles in fact in that article getting a solid start bob martin",
    "start": "1384720",
    "end": "1390400"
  },
  {
    "text": "he has a section what do i mean by principle and he says society principles are not rules",
    "start": "1390400",
    "end": "1395600"
  },
  {
    "text": "they're not laws and they're not perfect truths they're statements on the order of an",
    "start": "1395600",
    "end": "1400960"
  },
  {
    "text": "apple a day keeps the doctor away it's a good principle it's good advice but it's not a pure truth nor is it a",
    "start": "1400960",
    "end": "1407120"
  },
  {
    "text": "rule someone says if he read that dictionary definition and said no that's not what i mean i'm in this bit",
    "start": "1407120",
    "end": "1413039"
  },
  {
    "text": "and given is actually there in a dictionary i'm happy with that i don't think anyone's really been misled",
    "start": "1413039",
    "end": "1418799"
  },
  {
    "text": "by the use of the word principle here so um i'm happy to take that one off",
    "start": "1418799",
    "end": "1424480"
  },
  {
    "text": "but i'm not going to let him off the hook quite so easily because he actually continues in that same",
    "start": "1424480",
    "end": "1431039"
  },
  {
    "text": "article the principles are mental cubbyholes they give a name to a concept so you can",
    "start": "1431039",
    "end": "1437200"
  },
  {
    "text": "talk and reason about that concept so if the reason for introducing the",
    "start": "1437200",
    "end": "1443279"
  },
  {
    "text": "principles is to give a name to it did it actually do a good job of that",
    "start": "1443279",
    "end": "1448799"
  },
  {
    "text": "which leads us on to the next problem that they're not excessively named by that i mean",
    "start": "1448799",
    "end": "1453840"
  },
  {
    "text": "looking at those names do you immediately know exactly what you're actually trying to do with them",
    "start": "1453840",
    "end": "1460720"
  },
  {
    "text": "i think we've already hinted that that there's some problems there looking at the the single responsibility",
    "start": "1460720",
    "end": "1466080"
  },
  {
    "text": "principle well dan north called it the pointlessly vague principle it's hard to do something with that you sort of",
    "start": "1466080",
    "end": "1472159"
  },
  {
    "text": "intuitively know what we're getting at but you know what's the action required there uh you need to dig a bit more and",
    "start": "1472159",
    "end": "1478400"
  },
  {
    "text": "know about cohesion and how that applies to code",
    "start": "1478400",
    "end": "1482799"
  },
  {
    "text": "the open closed principle problematic as well it's simple enough to say you know open for",
    "start": "1483520",
    "end": "1489440"
  },
  {
    "text": "extension close for modification again what does that really mean should we really be you know stopping things from being",
    "start": "1489440",
    "end": "1495520"
  },
  {
    "text": "modified we already said maybe that was rooted in the 80s and we can move on from that has a slightly different meaning",
    "start": "1495520",
    "end": "1502480"
  },
  {
    "text": "and even the open to extension bob martin's interpretation was",
    "start": "1502480",
    "end": "1508720"
  },
  {
    "text": "extension through inheritance and class hierarchies which is maybe",
    "start": "1508720",
    "end": "1514320"
  },
  {
    "text": "we're sort of moving away from as a unit of reuse these days uh but actually if you go back to bertrand may he was",
    "start": "1514320",
    "end": "1520720"
  },
  {
    "text": "talking about um functions and modules as well so the idea of being able to extend things",
    "start": "1520720",
    "end": "1528240"
  },
  {
    "text": "is a bit more general than what's been captured in the solid principles and it's very difficult to get all of",
    "start": "1528240",
    "end": "1533760"
  },
  {
    "text": "that nuance just just from the name which is why most people go and think yeah i know what that is and then they basically",
    "start": "1533760",
    "end": "1539600"
  },
  {
    "text": "forget the disc of substitution principle well it's based on somebody's name which",
    "start": "1539600",
    "end": "1546720"
  },
  {
    "text": "is not that helpful okay it has the word substitution in there so something could do with",
    "start": "1546720",
    "end": "1552039"
  },
  {
    "text": "substitutability but really the meat of it is in the bit that's not there in the name it's again",
    "start": "1552039",
    "end": "1558159"
  },
  {
    "text": "it's about those contracts and how it relates to to behavior you do need to dig quite a bit more to",
    "start": "1558159",
    "end": "1564320"
  },
  {
    "text": "really get to that meaning interface segregation principle it's",
    "start": "1564320",
    "end": "1569760"
  },
  {
    "text": "fine if it's useful as a principle but maybe it's just it's a bit grand sounding for",
    "start": "1569760",
    "end": "1576000"
  },
  {
    "text": "something that's actually quite a simple derivation of one of the other principles but there you go",
    "start": "1576000",
    "end": "1581679"
  },
  {
    "text": "similar with the dependency inversion principle um it almost obfuscates",
    "start": "1581679",
    "end": "1588240"
  },
  {
    "text": "the actual simple meaning behind it yeah we can get there in the end but i'm not sure this is actually that",
    "start": "1588240",
    "end": "1593760"
  },
  {
    "text": "helpful in understanding it in fact there's an even bigger problem with this one",
    "start": "1593760",
    "end": "1598799"
  },
  {
    "text": "maybe best illustrated with this uh anyone know what this is",
    "start": "1598799",
    "end": "1605120"
  },
  {
    "text": "i'm not sure i'd hear you in this room with everyone's masks on so maybe i shouldn't get you to call out but um",
    "start": "1605120",
    "end": "1612720"
  },
  {
    "text": "normally somebody eventually says upside down glasses or something now you put these on and you see the world upside",
    "start": "1612720",
    "end": "1618240"
  },
  {
    "text": "down and the purpose of these is like part of an experiment",
    "start": "1618240",
    "end": "1624080"
  },
  {
    "text": "because the theory is that when we're born we're not theory it's a fact um but when our eyes are wired to our our",
    "start": "1624080",
    "end": "1630960"
  },
  {
    "text": "brains upside down we literally see the world upside down but",
    "start": "1630960",
    "end": "1636080"
  },
  {
    "text": "within a few days after we're born our brain flips it and we go the rest of our lives seeing things the right way up",
    "start": "1636080",
    "end": "1642960"
  },
  {
    "text": "until of course we put these glasses on and then it flips it back again but if you keep them on for a few days",
    "start": "1642960",
    "end": "1649520"
  },
  {
    "text": "and you know why would you unless you're doing this experiment but apparently it will flip again",
    "start": "1649520",
    "end": "1655919"
  },
  {
    "text": "brain's an amazing thing but what's this got to do with the dependency inversion principle we've got the word inversion",
    "start": "1655919",
    "end": "1662080"
  },
  {
    "text": "in there and the point of this is to you know point out this it's context",
    "start": "1662080",
    "end": "1667279"
  },
  {
    "text": "dependent what are we inverting with you know relation to um are we now seeing the world the right",
    "start": "1667279",
    "end": "1674240"
  },
  {
    "text": "way up or upside down depends what came before so dependency inversion principle",
    "start": "1674240",
    "end": "1679840"
  },
  {
    "text": "was sort of sort of about inverting what we used to do with our dependencies and we used to",
    "start": "1679840",
    "end": "1685840"
  },
  {
    "text": "you know depend on concrete uh implementations and you know we depend on interfaces so that the lines are",
    "start": "1685840",
    "end": "1692000"
  },
  {
    "text": "going the opposite direction they're inverted compared to what we did before but now",
    "start": "1692000",
    "end": "1698080"
  },
  {
    "text": "most people do things that way so if you're going to invert it you're actually going to go back to what we did before",
    "start": "1698080",
    "end": "1704159"
  },
  {
    "text": "so it's a bit problematic a bit problematic but",
    "start": "1704159",
    "end": "1708640"
  },
  {
    "text": "yeah i think there are some problems with the naming i definitely agree with him on that let's have a look at those internal",
    "start": "1709200",
    "end": "1715279"
  },
  {
    "text": "redundancies well we already saw this this graph um it's uh it's definitely",
    "start": "1715279",
    "end": "1721919"
  },
  {
    "text": "definitely true that you can simplify this down to two maybe three key points with some",
    "start": "1721919",
    "end": "1728080"
  },
  {
    "text": "little nuances uh or go as far as dan north and say everything is just about writing simple",
    "start": "1728080",
    "end": "1734080"
  },
  {
    "text": "code but even if you try to stick to the to the main message or the solid principles",
    "start": "1734080",
    "end": "1739919"
  },
  {
    "text": "there's a bit too much repetition there i'm not sure this is a terrible thing",
    "start": "1739919",
    "end": "1745440"
  },
  {
    "text": "it can be good to state things in different ways and think about things in slightly different ways",
    "start": "1745440",
    "end": "1751200"
  },
  {
    "text": "there's no guarantee these are all orthogonal so i think the overlapping part is fine but",
    "start": "1751200",
    "end": "1756320"
  },
  {
    "text": "um it's also useful to dig into the underlying",
    "start": "1756320",
    "end": "1761440"
  },
  {
    "text": "ideas and make sure that they are being captured in our code",
    "start": "1761440",
    "end": "1766720"
  },
  {
    "text": "so yeah i'm not going to talk so much about that what about the fact that maybe some of",
    "start": "1766720",
    "end": "1772320"
  },
  {
    "text": "them are outdated uh we already looked at ocp that the close for modification part um",
    "start": "1772320",
    "end": "1780000"
  },
  {
    "text": "i think we we can agree that that's not really the spirit of agile these days um and dependency injector",
    "start": "1780000",
    "end": "1787279"
  },
  {
    "text": "independency inversion again is it's outdated in the sense that we've",
    "start": "1787279",
    "end": "1793279"
  },
  {
    "text": "moved on from what we're inverting we don't want to go back to that so",
    "start": "1793279",
    "end": "1799039"
  },
  {
    "text": "a little bit but most of the concepts are pretty timeless so",
    "start": "1799039",
    "end": "1804720"
  },
  {
    "text": "i'm not as worried about this part as some of the other problems uh we do have that extra",
    "start": "1804720",
    "end": "1812000"
  },
  {
    "text": "part to ocp about not publishing prematurely and i think that that still holds even if we don't really talk about it anymore",
    "start": "1812000",
    "end": "1818720"
  },
  {
    "text": "uh let's get that okay what about",
    "start": "1818720",
    "end": "1823840"
  },
  {
    "text": "the criticism that solid principles are language specific they're originally formulated in the context of c plus plus",
    "start": "1823840",
    "end": "1831120"
  },
  {
    "text": "but these days are probably most often talked about in the context of something like java",
    "start": "1831120",
    "end": "1837760"
  },
  {
    "text": "what about dynamic languages uh can you apply lsp to a dynamic language well when you know that it's",
    "start": "1837760",
    "end": "1843919"
  },
  {
    "text": "really about contracts then yes absolutely you can even if you don't necessarily have interfaces in the",
    "start": "1843919",
    "end": "1850159"
  },
  {
    "text": "language um you definitely still need to respect the contract of something if something",
    "start": "1850159",
    "end": "1855919"
  },
  {
    "text": "walks like a duck and quacks like a duck um and a base contracts like a duck",
    "start": "1855919",
    "end": "1862240"
  },
  {
    "text": "then then only then is it a duck um and the dependency",
    "start": "1862240",
    "end": "1868960"
  },
  {
    "text": "inversion principle originally was talking more about the c c and c plus plus inclusion model",
    "start": "1868960",
    "end": "1876480"
  },
  {
    "text": "uh which made that really tricky to work i mean i still work with safe plus plus regularly it's still a big problem",
    "start": "1876480",
    "end": "1882559"
  },
  {
    "text": "um but other languages have mostly solved that in a language level it's um not such a big",
    "start": "1882559",
    "end": "1890240"
  },
  {
    "text": "problem to keep those dependencies inverted if you like",
    "start": "1890240",
    "end": "1895840"
  },
  {
    "text": "i still have to think about it but maybe it's not such a core principle anymore",
    "start": "1895840",
    "end": "1901200"
  },
  {
    "text": "maybe that's why it's easy to think about dependency injection instead",
    "start": "1901200",
    "end": "1906799"
  },
  {
    "text": "uh and again um the interface segregation principle",
    "start": "1906799",
    "end": "1912000"
  },
  {
    "text": "uh what i've put here interfaces less using c plus plus uh because i think i originally",
    "start": "1912000",
    "end": "1917360"
  },
  {
    "text": "presented this to a c plus plus audience but",
    "start": "1917360",
    "end": "1921840"
  },
  {
    "text": "interfaces as a main unit are also being questioned these days",
    "start": "1922399",
    "end": "1927440"
  },
  {
    "text": "often packaging things up in different ways can be better but",
    "start": "1927440",
    "end": "1932480"
  },
  {
    "text": "that one's a bit more of a stretch but it definitely needs to be to be looked at i think",
    "start": "1932480",
    "end": "1938159"
  },
  {
    "text": "oh got some extra yeah we covered that",
    "start": "1939519",
    "end": "1944000"
  },
  {
    "text": "okay what about oh drop to the right now what about",
    "start": "1946480",
    "end": "1953279"
  },
  {
    "text": "the oo specific i think this one has more merit but actually when you look into it",
    "start": "1953279",
    "end": "1959200"
  },
  {
    "text": "maybe less so so i've put the isp dip maybe less relevant to a",
    "start": "1959200",
    "end": "1965120"
  },
  {
    "text": "functional language although i think the first time i gave this talk i got a little bit of pushback on that",
    "start": "1965120",
    "end": "1970559"
  },
  {
    "text": "and somebody said that dependency inversion principle is actually still",
    "start": "1970559",
    "end": "1977039"
  },
  {
    "text": "very very useful in a functional language",
    "start": "1977039",
    "end": "1980799"
  },
  {
    "text": "ocp still applies maybe to a data model in a functional language",
    "start": "1982640",
    "end": "1989200"
  },
  {
    "text": "srp definitely still applies to to functions and same with with lsp",
    "start": "1989600",
    "end": "1996480"
  },
  {
    "text": "uh substitutable types if you're working with a functional language all of these things really still apply even if",
    "start": "1996480",
    "end": "2002559"
  },
  {
    "text": "you maybe don't have to work quite so hard to get them because they're sort of baked into the link oh dear",
    "start": "2002559",
    "end": "2008880"
  },
  {
    "text": "okay maybe i said functional language too much um",
    "start": "2008880",
    "end": "2015919"
  },
  {
    "text": "okay i meant to take this slide out first",
    "start": "2016880",
    "end": "2022000"
  },
  {
    "text": "time i did this talk was at the acc conference i had a 90 minute talk so i had like a little section in the middle",
    "start": "2022000",
    "end": "2027279"
  },
  {
    "text": "where we could actually discuss things but uh we're gonna we're gonna move on and",
    "start": "2027279",
    "end": "2034240"
  },
  {
    "text": "get to the second section",
    "start": "2034240",
    "end": "2040559"
  },
  {
    "text": "solid revisited revisited so having presented particularly kevin henny and dan north",
    "start": "2040559",
    "end": "2047200"
  },
  {
    "text": "criticisms of solid and addressed some of them um i want to present my own views on the",
    "start": "2047200",
    "end": "2054000"
  },
  {
    "text": "matter but before we get to that i mentioned some of the other",
    "start": "2054000",
    "end": "2060398"
  },
  {
    "text": "acronyms sets of principles that have been proposed kevin henry's fluid principles",
    "start": "2060399",
    "end": "2066240"
  },
  {
    "text": "i don't actually find the liquid principles as well obviously plays on this idea of states",
    "start": "2066240",
    "end": "2073118"
  },
  {
    "text": "of matter hence the second part of my my title we could definitely say those aren't dry",
    "start": "2073119",
    "end": "2079599"
  },
  {
    "text": "but uh i'll leave that one there kevlin's fluid principles and he did",
    "start": "2079599",
    "end": "2085760"
  },
  {
    "text": "this as a lightning talk again i don't think it was intended to be entirely serious but when i spoke to my xtc he",
    "start": "2085760",
    "end": "2091358"
  },
  {
    "text": "said no no no i didn't actually mean them seriously you decide",
    "start": "2091359",
    "end": "2096398"
  },
  {
    "text": "so he says your code should be functional i tend to agree with him there and the",
    "start": "2096399",
    "end": "2101760"
  },
  {
    "text": "screen hasn't flickered so that's good um should be loosely coupled",
    "start": "2101760",
    "end": "2108480"
  },
  {
    "text": "which sort of gets at the single responsibility principle unit testable",
    "start": "2108960",
    "end": "2114960"
  },
  {
    "text": "which i agree with but it's one of these circular things because we're generally applying these principles in order to",
    "start": "2114960",
    "end": "2120400"
  },
  {
    "text": "make our code more unit testable and we do that by making it more unit testable so it's a little bit",
    "start": "2120400",
    "end": "2126079"
  },
  {
    "text": "problematic but i think i'll see where he's going introspective",
    "start": "2126079",
    "end": "2131200"
  },
  {
    "text": "it's an interesting one i think it's quite a powerful technique that we're going to be seeing more of in the future but i'm not quite",
    "start": "2131200",
    "end": "2138320"
  },
  {
    "text": "sure it qualifies as the principle at least not yet it's more of a an approach to to coding",
    "start": "2138320",
    "end": "2144720"
  },
  {
    "text": "adam potent i think it's definitely a reach uh trying to get that last letter in uh he didn't even quite make that and i'm",
    "start": "2144720",
    "end": "2150720"
  },
  {
    "text": "not really sure how that applies but um what is interesting about this is",
    "start": "2150720",
    "end": "2157440"
  },
  {
    "text": "just the exercise of trying to come up with a set of principles that you think are meaningful and then fit an acronym",
    "start": "2157440",
    "end": "2164960"
  },
  {
    "text": "it was just a useful exercise to do um looking at the liquid principles",
    "start": "2164960",
    "end": "2170880"
  },
  {
    "text": "these are definitely meant to be the joke or a counter example maybe your code should be large",
    "start": "2170880",
    "end": "2177760"
  },
  {
    "text": "long files and classes with lots of interdependencies breaking a single responsibility",
    "start": "2177760",
    "end": "2183680"
  },
  {
    "text": "principle a quagmire undocumented illegible with plenty of duplicated code",
    "start": "2183680",
    "end": "2191599"
  },
  {
    "text": "so unfortunately i have seen many code bases that follow the liquid principles to the letter",
    "start": "2191599",
    "end": "2196640"
  },
  {
    "text": "i'm sure you have as well all right well",
    "start": "2196640",
    "end": "2202800"
  },
  {
    "text": "one of the problems with with this with a fluid in particular is it's not",
    "start": "2202800",
    "end": "2208079"
  },
  {
    "text": "really a state of matter it's sort of two states because it could be a liquid or or gas",
    "start": "2208079",
    "end": "2215040"
  },
  {
    "text": "we didn't i didn't find anyone proposing the gas principles um",
    "start": "2215040",
    "end": "2220320"
  },
  {
    "text": "maybe code that relies too much on getters and setters i don't know maybe you can come up something better but",
    "start": "2220320",
    "end": "2226880"
  },
  {
    "text": "what about plasma some promising letters there maybe we'll do something with that but",
    "start": "2226880",
    "end": "2233119"
  },
  {
    "text": "actually if you if you dig enough there's plenty of exotic states of matter that we could go with i pulled these all",
    "start": "2233119",
    "end": "2239119"
  },
  {
    "text": "off wikipedia i did try to get the bose einstein condensate principles but um",
    "start": "2239119",
    "end": "2245119"
  },
  {
    "text": "i i gave up at some point so let's go with plasma so here is my",
    "start": "2245119",
    "end": "2250640"
  },
  {
    "text": "attempt the plasma principles again it's really this exercise of you",
    "start": "2250640",
    "end": "2256320"
  },
  {
    "text": "know what can i actually fit into this acronym not intended to fully replace the solid principles",
    "start": "2256320",
    "end": "2262640"
  },
  {
    "text": "um let's have a look at these because i think there's something in this",
    "start": "2262640",
    "end": "2268000"
  },
  {
    "text": "so persistence what do i mean by this so i don't mean",
    "start": "2268000",
    "end": "2273520"
  },
  {
    "text": "keep trying you'll get there in the end and i don't mean you know writing to files and databases",
    "start": "2273520",
    "end": "2279440"
  },
  {
    "text": "really talk about persistent data structures and i've done talks on on this",
    "start": "2279440",
    "end": "2284880"
  },
  {
    "text": "um just just very quickly to summarize if you've got a like a a tree structure like this",
    "start": "2284880",
    "end": "2290320"
  },
  {
    "text": "a binary tree could be a red black tree if you want to add something like that a",
    "start": "2290320",
    "end": "2297040"
  },
  {
    "text": "yellow node at the bottom there if you copy all of the",
    "start": "2297040",
    "end": "2302160"
  },
  {
    "text": "the nodes up to the root and put it on your your copy i have links back into the original tree",
    "start": "2302160",
    "end": "2309520"
  },
  {
    "text": "the original tree persists it's still there and you have a new tree which has lots of shared states along with it",
    "start": "2309520",
    "end": "2316800"
  },
  {
    "text": "that's an example of a persistent data structure if you haven't come across that before",
    "start": "2316800",
    "end": "2323200"
  },
  {
    "text": "does this really make a principle though well it's more of a proxy for immutability because this is a great",
    "start": "2323359",
    "end": "2330800"
  },
  {
    "text": "technique for using more immutability in your code while also giving you you know rich data structures",
    "start": "2330800",
    "end": "2337200"
  },
  {
    "text": "and being able to add things to them which is particularly important with data structures",
    "start": "2337200",
    "end": "2342800"
  },
  {
    "text": "so stand in for that so mutability i think is a principle worth striving for",
    "start": "2342800",
    "end": "2350400"
  },
  {
    "text": "local reasoning is the next one so i'm going to",
    "start": "2350880",
    "end": "2356160"
  },
  {
    "text": "use a slide from another talk i did um functional safe plus plus for fun and profit i think i",
    "start": "2356160",
    "end": "2361680"
  },
  {
    "text": "should do it at this conference a few years ago just to illustrate so this is safe plus code but it's",
    "start": "2361680",
    "end": "2368400"
  },
  {
    "text": "it's pretty universal so uh shouldn't be a problem so",
    "start": "2368400",
    "end": "2373520"
  },
  {
    "text": "typical bit of code where you've you've got a variable in this case color and you want to give it a value based on",
    "start": "2373520",
    "end": "2380240"
  },
  {
    "text": "some condition in this case calling this uh this function seems simple enough",
    "start": "2380240",
    "end": "2386079"
  },
  {
    "text": "but there's a few problems packed in there just a few lines of um easy code",
    "start": "2386079",
    "end": "2392800"
  },
  {
    "text": "because we need to make that call in order to know what we're going to assign to it we",
    "start": "2392800",
    "end": "2397920"
  },
  {
    "text": "can't use an initialization here which means we've got an uninitialized variable",
    "start": "2397920",
    "end": "2403119"
  },
  {
    "text": "and maybe we would initialize it to some default state and then change it but that doesn't feel right either it",
    "start": "2403119",
    "end": "2408880"
  },
  {
    "text": "doesn't really reflect the intent um and then it has to be mutable",
    "start": "2408880",
    "end": "2414240"
  },
  {
    "text": "we can't make it uh const in the c plus plus keyword sense",
    "start": "2414240",
    "end": "2419359"
  },
  {
    "text": "so it's mutable and then we've got a side effect in the if statement in order to make that",
    "start": "2419359",
    "end": "2425760"
  },
  {
    "text": "assignment so there's a few things that we would prefer not to to be there but the one i want to particularly draw our attention",
    "start": "2425760",
    "end": "2431839"
  },
  {
    "text": "to is that mutability again um so i know that's connected more to the",
    "start": "2431839",
    "end": "2437200"
  },
  {
    "text": "my first principle but it's so important mentioning again the consequence of that",
    "start": "2437200",
    "end": "2442400"
  },
  {
    "text": "is fine for maybe these few lines of code but now that um that variable its value",
    "start": "2442400",
    "end": "2449760"
  },
  {
    "text": "is entangled with all the rest of the code to go through in order to reason about the value of color you have to",
    "start": "2449760",
    "end": "2456079"
  },
  {
    "text": "look at every line of code it may pass through because something else may change it because we couldn't make it const we've",
    "start": "2456079",
    "end": "2462240"
  },
  {
    "text": "lost that guarantee so we've lost the ability to reason about it locally and it might not seem",
    "start": "2462240",
    "end": "2467680"
  },
  {
    "text": "an important thing these things really add up we sort of uh think of it as the cost of doing",
    "start": "2467680",
    "end": "2473920"
  },
  {
    "text": "business we're so used to just losing track of values and what they what state they may be in because of the default",
    "start": "2473920",
    "end": "2480560"
  },
  {
    "text": "mutability in most of the languages we work in that we don't even think about local reasoning most of the time",
    "start": "2480560",
    "end": "2487119"
  },
  {
    "text": "but when you can get that back and this is why it's uh you'll often hear functional programmers",
    "start": "2487119",
    "end": "2492720"
  },
  {
    "text": "talk about local reasoning because they do have those guarantees it's really hard to to give that up",
    "start": "2492720",
    "end": "2498000"
  },
  {
    "text": "again so that's why i put it as its own principle",
    "start": "2498000",
    "end": "2503920"
  },
  {
    "text": "um yeah so did they propose if c plus plus",
    "start": "2503920",
    "end": "2509920"
  },
  {
    "text": "was more like a functional language you could do something like this where you treat the if statement as an expression",
    "start": "2509920",
    "end": "2515599"
  },
  {
    "text": "um of course you can use a ternary operator in this case uh most languages have that as well but it doesn't scale",
    "start": "2515599",
    "end": "2521040"
  },
  {
    "text": "very well and the other talk i've done i've shown how you can fake it by using",
    "start": "2521040",
    "end": "2527280"
  },
  {
    "text": "an immediately invoked lambda expression so you wrap the statements up in a",
    "start": "2527280",
    "end": "2532400"
  },
  {
    "text": "lambda immediately invoke it and it effectively converts it into an expression really useful technique for",
    "start": "2532400",
    "end": "2537680"
  },
  {
    "text": "getting back local reasoning",
    "start": "2537680",
    "end": "2541440"
  },
  {
    "text": "okay algorithms next and again maybe this is a bit more of a",
    "start": "2542800",
    "end": "2548319"
  },
  {
    "text": "a c plus plus bias um at least my example here uh",
    "start": "2548319",
    "end": "2553839"
  },
  {
    "text": "sean perrin did a talk uh some years ago c plus plus seasonings",
    "start": "2553839",
    "end": "2558960"
  },
  {
    "text": "where he's talking about suplex plus algorithms uh the main message is no raw loops so",
    "start": "2558960",
    "end": "2564319"
  },
  {
    "text": "if you find yourself writing a loop out by hand think about if there's",
    "start": "2564319",
    "end": "2569760"
  },
  {
    "text": "again if it's c plus plus an algorithm uh whatever language you're using will have algorithms or something similar",
    "start": "2569760",
    "end": "2576560"
  },
  {
    "text": "in the standard library hopefully um point is like those little loops even if",
    "start": "2576560",
    "end": "2582240"
  },
  {
    "text": "they may seem simple they're they're just packed full of complexity that can come back to bite us",
    "start": "2582240",
    "end": "2588720"
  },
  {
    "text": "um do something that somebody else is actually optimized and thought through and got got right",
    "start": "2588720",
    "end": "2595359"
  },
  {
    "text": "instead and then we come to simplicity",
    "start": "2595359",
    "end": "2602480"
  },
  {
    "text": "so i said we'll come back to this this was dan north's uh main idea and i tend to agree with him in fact i've done a",
    "start": "2602480",
    "end": "2608480"
  },
  {
    "text": "whole talk on simplicity uh the one that i",
    "start": "2608480",
    "end": "2613760"
  },
  {
    "text": "was giving in nbc london same time as kevin actually that talk was mostly a riff off",
    "start": "2613760",
    "end": "2620240"
  },
  {
    "text": "another talk by rich hickey simple made easy anyone seen simple made easy",
    "start": "2620240",
    "end": "2627599"
  },
  {
    "text": "a couple of hands you should definitely watch that talk again references at the end",
    "start": "2627680",
    "end": "2633200"
  },
  {
    "text": "but i do reference a lot of it in my talk in particular this slide these",
    "start": "2633200",
    "end": "2638400"
  },
  {
    "text": "illustrations i i stole from rich hickey as i think they they really illustrate it uh quite nicely",
    "start": "2638400",
    "end": "2644640"
  },
  {
    "text": "so what rich did and i in my talk as well let's go back to the latin roots of the",
    "start": "2644640",
    "end": "2650960"
  },
  {
    "text": "english words simple and complex so a complex in latin",
    "start": "2650960",
    "end": "2657119"
  },
  {
    "text": "means something with many folds or braids whereas a simplex where we get the",
    "start": "2657119",
    "end": "2663040"
  },
  {
    "text": "modern english word simple from meant something with one fold or braid",
    "start": "2663040",
    "end": "2668160"
  },
  {
    "text": "so simply enough meanings makes sense and you can sort of see how they actually",
    "start": "2668160",
    "end": "2673280"
  },
  {
    "text": "carry the meaning uh forward looking at the illustrations if you look at the the one on the left",
    "start": "2673280",
    "end": "2678880"
  },
  {
    "text": "the simple case if you try to follow one of those strands from the bottom to the top",
    "start": "2678880",
    "end": "2684240"
  },
  {
    "text": "well it's trivial you don't even have to think about it you know exactly where it ends up but try doing that with the complex case",
    "start": "2684240",
    "end": "2691040"
  },
  {
    "text": "on the right follow one of the strength you've got to carefully follow it all the way up and there's only four strands there",
    "start": "2691040",
    "end": "2698319"
  },
  {
    "text": "complexity makes us lose track of things very very quickly and yet our code",
    "start": "2698319",
    "end": "2704400"
  },
  {
    "text": "tends to be full of it with this definition of complexity you can think about all the things in",
    "start": "2704400",
    "end": "2709680"
  },
  {
    "text": "typical code that cause complexity very often not necessarily",
    "start": "2709680",
    "end": "2715839"
  },
  {
    "text": "threading currency is an obvious one and maybe we need it but hopefully we can find ways to protect",
    "start": "2715839",
    "end": "2721680"
  },
  {
    "text": "ourselves from it globals or singletons if we had those in our code",
    "start": "2721680",
    "end": "2728240"
  },
  {
    "text": "they basically bring different parts of the code together as a codependency",
    "start": "2728240",
    "end": "2734319"
  },
  {
    "text": "um often in very hidden ways any other sort of shared state similarly",
    "start": "2734319",
    "end": "2740319"
  },
  {
    "text": "mutability coming back to that one again already talked about immutability earlier again",
    "start": "2740319",
    "end": "2747040"
  },
  {
    "text": "because it uh complicates the value of something and and passage",
    "start": "2747040",
    "end": "2752640"
  },
  {
    "text": "of time as it evolves so it's uh another hidden complexity that uh we're",
    "start": "2752640",
    "end": "2759680"
  },
  {
    "text": "sort of not used to to thinking about maybe cyclomatic complexity but it's got complexity in the name but it's really",
    "start": "2759680",
    "end": "2767040"
  },
  {
    "text": "overuse of conditionals and branches leaky abstractions is an interesting one",
    "start": "2767040",
    "end": "2774240"
  },
  {
    "text": "now i um we'll actually come back to instructions in a bit so i have another section from",
    "start": "2774240",
    "end": "2780800"
  },
  {
    "text": "my simplicity talk that i'm going to revisit code and module dependencies we'll talk a bit less about should be fairly",
    "start": "2780800",
    "end": "2787599"
  },
  {
    "text": "obvious and that's definitely captured in the um in the solid principles",
    "start": "2787599",
    "end": "2793440"
  },
  {
    "text": "so yeah let's fast forward onto obstructions we'll skip over modularity for a moment",
    "start": "2793440",
    "end": "2799440"
  },
  {
    "text": "so this is a slide from my simplicity talk it's actually a quote from joel spolsky you may recognize all non-trivial",
    "start": "2800079",
    "end": "2806720"
  },
  {
    "text": "abstractions to some degree are leaky i grade some words out because i think",
    "start": "2806720",
    "end": "2813680"
  },
  {
    "text": "the statement is stronger if you take those words out and i think it's still accurate and i attempted to prove this in my in",
    "start": "2813680",
    "end": "2820400"
  },
  {
    "text": "my other talk where i actually talked about um for example the evolution of our number theory",
    "start": "2820400",
    "end": "2826640"
  },
  {
    "text": "over the millennia how often that abstraction just of numbers that we rely on every day has",
    "start": "2826640",
    "end": "2831680"
  },
  {
    "text": "been leaky at different points in time so if we can't get that right you know what hope do we have of the code that",
    "start": "2831680",
    "end": "2838000"
  },
  {
    "text": "we're writing in a week so yeah all abstractions are leaky but they're also",
    "start": "2838000",
    "end": "2844400"
  },
  {
    "text": "probably our biggest weapon in the fight against complexity so it's a real dilemma this this",
    "start": "2844400",
    "end": "2850240"
  },
  {
    "text": "double-edged sword so i'll go into some ideas in that talk about how to deal with it but it",
    "start": "2850240",
    "end": "2856480"
  },
  {
    "text": "basically amounts to give up on these all-encompassing metaphors for your abstractions",
    "start": "2856480",
    "end": "2862800"
  },
  {
    "text": "um unless you are going for something like you know building a language or a standard library or",
    "start": "2862800",
    "end": "2868800"
  },
  {
    "text": "something that you're going to invest the time in making it watertight as possible i've always embraced the leakiness it's going to leak anyway",
    "start": "2868800",
    "end": "2875760"
  },
  {
    "text": "so try not to make that too much of a complicating factor when you have to deal with it",
    "start": "2875760",
    "end": "2881680"
  },
  {
    "text": "so be careful with your obstructions so you've probably seen this quote",
    "start": "2882240",
    "end": "2888400"
  },
  {
    "text": "uh george box all models are wrong but some are useful similarly all abstractions are leaking",
    "start": "2888400",
    "end": "2895119"
  },
  {
    "text": "but some are useful oh and here's the slide where i talk about uh",
    "start": "2895119",
    "end": "2900880"
  },
  {
    "text": "what i call global abstractions that's those languages standard libraries things are going to invest the effort in to make as",
    "start": "2900880",
    "end": "2907599"
  },
  {
    "text": "complete and watertight as possible or local abstractions the things you can have in your own code",
    "start": "2907599",
    "end": "2914559"
  },
  {
    "text": "let's say brace the leakiness try to keep those objections shallow do you ever have the experience of like",
    "start": "2914559",
    "end": "2921359"
  },
  {
    "text": "debugging through some code and you're about like 10 abstractions down trying to work out what you're actually",
    "start": "2921359",
    "end": "2926559"
  },
  {
    "text": "dealing with here is you know is it this thing at this level those objections are just complicating things at that point so",
    "start": "2926559",
    "end": "2933040"
  },
  {
    "text": "we need them as an organizational unit to manage that complexity but we just got to be careful",
    "start": "2933040",
    "end": "2938079"
  },
  {
    "text": "try to make them shallow and embrace the leakiness",
    "start": "2938079",
    "end": "2943000"
  },
  {
    "text": "okay modularity i don't have that much to say about it i",
    "start": "2943760",
    "end": "2949520"
  },
  {
    "text": "mostly threw it in because i just needed that other letter it sort of fits with a single responsibility principle",
    "start": "2949520",
    "end": "2955839"
  },
  {
    "text": "but no great insights there but that",
    "start": "2955839",
    "end": "2960880"
  },
  {
    "text": "is the the plasma principles um maybe you want to try your own exercise of coming up with",
    "start": "2960880",
    "end": "2968079"
  },
  {
    "text": "a set of principles that you think are important and see how your encode holds up to them",
    "start": "2968079",
    "end": "2973839"
  },
  {
    "text": "but that's been solid revisited there is the",
    "start": "2973839",
    "end": "2982078"
  },
  {
    "text": "url for where all the references to all of the other materials my talks the other talks i've talked about",
    "start": "2983040",
    "end": "2988960"
  },
  {
    "text": "and articles levitarian direction dot com slash refs slash solid.html",
    "start": "2988960",
    "end": "2995760"
  },
  {
    "text": "if you can't remember that i also have extra level of indirection.com that redirects there",
    "start": "2995760",
    "end": "3001280"
  },
  {
    "text": "so that's the end of the talk thank you very much do we have any",
    "start": "3001280",
    "end": "3006559"
  },
  {
    "text": "questions do we share the means to",
    "start": "3006559",
    "end": "3011839"
  },
  {
    "text": "ask questions mike or no",
    "start": "3011839",
    "end": "3018000"
  },
  {
    "text": "i don't really wanna call out i can't see everyone from here",
    "start": "3020240",
    "end": "3027480"
  },
  {
    "text": "okay last time i did this talk i went a bit over time so i may be rushed a little bit too much this time",
    "start": "3029200",
    "end": "3036880"
  },
  {
    "text": "okay well in that case thank you very much",
    "start": "3039200",
    "end": "3044930"
  },
  {
    "text": "[Applause]",
    "start": "3044930",
    "end": "3050089"
  },
  {
    "text": "you",
    "start": "3057359",
    "end": "3059440"
  }
]