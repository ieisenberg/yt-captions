[
  {
    "start": "0",
    "end": "35000"
  },
  {
    "text": "all right looks like we're good to get underway I know that I'm the only thing standing with",
    "start": "8020",
    "end": "15010"
  },
  {
    "text": "nice and quick welcome to react beyond redux my name is Erin Palin hopefully",
    "start": "15190",
    "end": "22180"
  },
  {
    "text": "the next hour I'm going to teach you some other ways that we can look at the readouts framework so like why are we",
    "start": "22180",
    "end": "30489"
  },
  {
    "text": "here why are we talking about reacts so Redux without react well redux it was a",
    "start": "30489",
    "end": "37780"
  },
  {
    "start": "35000",
    "end": "133000"
  },
  {
    "text": "lover II was created a couple of years ago by a guy named Dan abramov and he",
    "start": "37780",
    "end": "44920"
  },
  {
    "text": "actually works for facebook I don't think II was working at Facebook at the time he was just a reactive user you know works at Facebook with inside of",
    "start": "44920",
    "end": "52059"
  },
  {
    "text": "the react team or the various teams to work on react pieces he first demoed it",
    "start": "52059",
    "end": "58510"
  },
  {
    "text": "at react European 2015 and the premise was it was looking at an alternate way",
    "start": "58510",
    "end": "63699"
  },
  {
    "text": "to do flux and and that was one of the underpinning reasons for reactors that",
    "start": "63699",
    "end": "69940"
  },
  {
    "text": "he wanted something that was very for really wanted something to work with a react application but he wasn't quite a",
    "start": "69940",
    "end": "76000"
  },
  {
    "text": "fan of the way flux worst and and some of the patterns that were involved in that so we put together this really",
    "start": "76000",
    "end": "81070"
  },
  {
    "text": "simple framework and diamond it off and demoed a bunch of really interesting things around how would working inside",
    "start": "81070",
    "end": "88630"
  },
  {
    "text": "of a reactor application but today I want to talk about redux when you're",
    "start": "88630",
    "end": "94090"
  },
  {
    "text": "wanting to use it with inside of a different app application architecture own maybe you're not using react maybe",
    "start": "94090",
    "end": "99370"
  },
  {
    "text": "using another JavaScript framework because it turns out that Redux is actually not specifically tied to react",
    "start": "99370",
    "end": "105130"
  },
  {
    "text": "it just happens you're really popular with inside of the react community and that's where the author and a lot of the",
    "start": "105130",
    "end": "110740"
  },
  {
    "text": "contributors have come from and but it's not specific to Redux to react I'm going",
    "start": "110740",
    "end": "118570"
  },
  {
    "text": "to keep saying react instead of redox or read out instead of reacting it's going to be really annoying throughout the rest of talk because I'm just going to",
    "start": "118570",
    "end": "124480"
  },
  {
    "text": "keep going back over my own words but bear with visas there's only 58 minutes",
    "start": "124480",
    "end": "129550"
  },
  {
    "text": "left to go we'll be fine we'll get there so yes I just talked a bit about Redux",
    "start": "129550",
    "end": "136900"
  },
  {
    "start": "133000",
    "end": "155000"
  },
  {
    "text": "for those that either i'm not familiar with it or haven't used it in any great depth there's three core pieces to it we",
    "start": "136900",
    "end": "143410"
  },
  {
    "text": "have actions reduces and a store this is kind of the Iron Triangle of a",
    "start": "143410",
    "end": "151380"
  },
  {
    "text": "redux architecture these three core components actions in reacts this is",
    "start": "151380",
    "end": "158220"
  },
  {
    "start": "155000",
    "end": "225000"
  },
  {
    "text": "something that has happened with inside of the application that's using redux it's got a unique identifier on it so",
    "start": "158220",
    "end": "166070"
  },
  {
    "text": "it's commonly done with a type property on the object that's being passed as a",
    "start": "166070",
    "end": "171990"
  },
  {
    "text": "redux action but basically it's it's some kind of an event thinking about it",
    "start": "171990",
    "end": "178650"
  },
  {
    "text": "from a dotnet perspectives and that's my background is a net developer it has a lot of similarities to the kind of",
    "start": "178650",
    "end": "184830"
  },
  {
    "text": "events you arrays inside of a donate application fee that a desktop application or a mobile application or",
    "start": "184830",
    "end": "190080"
  },
  {
    "text": "even with server-side events inside of a web application and what I've got here is a very simple action creator function",
    "start": "190080",
    "end": "197340"
  },
  {
    "text": "it's called echo action it has an input to us and returns you an object which is",
    "start": "197340",
    "end": "202710"
  },
  {
    "text": "the actual representation of the action you'll see that we have a type property",
    "start": "202710",
    "end": "208050"
  },
  {
    "text": "here that has value echo so this is the action type that's being raised by our",
    "start": "208050",
    "end": "215400"
  },
  {
    "text": "system we have some kind of data that's being passed to it in this case I've got a payload property which is the the",
    "start": "215400",
    "end": "221310"
  },
  {
    "text": "value that is to be echoed out so the",
    "start": "221310",
    "end": "226530"
  },
  {
    "start": "225000",
    "end": "324000"
  },
  {
    "text": "reducer this is something that listens for actions or a single action it",
    "start": "226530",
    "end": "233640"
  },
  {
    "text": "receives the existing state of your application so the state has been produced based off any previous actions",
    "start": "233640",
    "end": "240030"
  },
  {
    "text": "that have been executed and it combines it with the current action to then",
    "start": "240030",
    "end": "245130"
  },
  {
    "text": "produce new application state so the idea of this is that it's a pure function if you've done punctual",
    "start": "245130",
    "end": "251550"
  },
  {
    "text": "programming the idea of pure function is probably fairly fairly well known to but at the end of the day a pure function is",
    "start": "251550",
    "end": "257760"
  },
  {
    "text": "something that receives all the input that it would need to be able to do something it has no external",
    "start": "257760",
    "end": "263600"
  },
  {
    "text": "dependencies in terms of global variables or global state outside of",
    "start": "263600",
    "end": "269160"
  },
  {
    "text": "that that function and internally it will not mutate anything that it doesn't",
    "start": "269160",
    "end": "275520"
  },
  {
    "text": "own so the the state has passed in it doesn't change you produce new state based off",
    "start": "275520",
    "end": "280740"
  },
  {
    "text": "of that so here's a reducer function and see we've got two arguments that go to it we have an action we have the state",
    "start": "280740",
    "end": "287160"
  },
  {
    "text": "and we have an action we then doing a test here to work out if this particular",
    "start": "287160",
    "end": "293220"
  },
  {
    "text": "reducer is capable of handling some kind of an action so in this case is this reduce able to handle the echo action it",
    "start": "293220",
    "end": "300060"
  },
  {
    "text": "does so if it does it returns the action payload so from the previous slide but",
    "start": "300060",
    "end": "305100"
  },
  {
    "text": "it might not actually deal with there might be other actions are being treated",
    "start": "305100",
    "end": "310170"
  },
  {
    "text": "with inside of our system that this reduces doesn't care about it's got no ability to work with them it doesn't",
    "start": "310170",
    "end": "315570"
  },
  {
    "text": "need to do anything with them so those will just return the current application state because we're not going to change it so we're just going to part it",
    "start": "315570",
    "end": "321630"
  },
  {
    "text": "becomes an operation essentially so then the store is kind of the cornerstone of",
    "start": "321630",
    "end": "327840"
  },
  {
    "start": "324000",
    "end": "488000"
  },
  {
    "text": "your architecture it's where everything lives data so it's the only place in",
    "start": "327840",
    "end": "333750"
  },
  {
    "text": "your application that state would then mutate so an action gets triggered the reducer producers you state the store",
    "start": "333750",
    "end": "340350"
  },
  {
    "text": "knows about that and then it has the state it's the one that's updated based off of the the new state that was produced by the reducer it handles the",
    "start": "340350",
    "end": "348090"
  },
  {
    "text": "marshaling of an action or multiple actions across to the reducers that are valid for them so it will do that sort",
    "start": "348090",
    "end": "355080"
  },
  {
    "text": "of that pass through you can have middleware applied to it so kind of if you if you're familiar with many of the",
    "start": "355080",
    "end": "363180"
  },
  {
    "text": "web server approaches that are happening at the moment the asp net corby that web",
    "start": "363180",
    "end": "368940"
  },
  {
    "text": "api on top of katana be that express or",
    "start": "368940",
    "end": "374310"
  },
  {
    "text": "any of the other no jeaious ones middle where is the idea of being able to just plug into a pipeline and have something",
    "start": "374310",
    "end": "380580"
  },
  {
    "text": "executed at some point in time before the final part of it so we receive some",
    "start": "380580",
    "end": "387090"
  },
  {
    "text": "at and something we do something with it and then we pass it on to the next stage of our pipeline so that their middleware",
    "start": "387090",
    "end": "392130"
  },
  {
    "text": "is handled entirely with inside of your store and the final thing that does is",
    "start": "392130",
    "end": "397590"
  },
  {
    "text": "it has to tell people that the action has happened and that state has changed it be all well and good if it's just",
    "start": "397590",
    "end": "404970"
  },
  {
    "text": "internally updated state and then no one knew about it application still going to do anything now how does the",
    "start": "404970",
    "end": "410190"
  },
  {
    "text": "do I respond to data changes if you're not able to tell it so that's what subscribe to notifications are all about",
    "start": "410190",
    "end": "415740"
  },
  {
    "text": "with inside of the store the store actually is created from a function that",
    "start": "415740",
    "end": "421590"
  },
  {
    "text": "comes from Redux itself so this is the first time that we've actually had something provided by the Redux library everything else has been and ceremonies",
    "start": "421590",
    "end": "428310"
  },
  {
    "text": "around how Redux would work and it's a method called create store it receives",
    "start": "428310",
    "end": "433440"
  },
  {
    "text": "up to three arguments in this case I'm passing in just two arguments the first argument is the reducer that this store",
    "start": "433440",
    "end": "440070"
  },
  {
    "text": "users we pass in some initial state of the application so in this case the",
    "start": "440070",
    "end": "445110"
  },
  {
    "text": "initial state is empty string because we're just going to echo out and things that get get dispatch to it the third",
    "start": "445110",
    "end": "450660"
  },
  {
    "text": "argument would be if using middleware obviously it's a distributed example i'm not using middle way you see I know after we've created the store within",
    "start": "450660",
    "end": "456630"
  },
  {
    "text": "subscribing to change events this we pass a delegate function to it and this",
    "start": "456630",
    "end": "462960"
  },
  {
    "text": "will be triggered every time an action is dispatched here where this one is just really obviously simple it's",
    "start": "462960",
    "end": "468630"
  },
  {
    "text": "updating a UI in the form of a dev tool console so when the application when",
    "start": "468630",
    "end": "474660"
  },
  {
    "text": "action dispatches console dot log will eventually get executed with the state of the current application down the",
    "start": "474660",
    "end": "479970"
  },
  {
    "text": "bottom there were triggering off in your new action so the system has done from the event has fired we're invoking the",
    "start": "479970",
    "end": "485880"
  },
  {
    "text": "echo action so there's some interesting quotes about the way the Redux",
    "start": "485880",
    "end": "492360"
  },
  {
    "start": "488000",
    "end": "637000"
  },
  {
    "text": "architecture works so in action needs to have a type as I said before now this is a little bit problematic inside of",
    "start": "492360",
    "end": "498419"
  },
  {
    "text": "JavaScript kazoo we need some way of being able to identify different kinds of actions in JavaScript because we have",
    "start": "498419",
    "end": "503550"
  },
  {
    "text": "a very simplistic type system the easiest way to do that is just a property on the object that we're passing around the type property that we",
    "start": "503550",
    "end": "510000"
  },
  {
    "text": "saw before yeah reduces they can't change the state that they're given so",
    "start": "510000",
    "end": "516510"
  },
  {
    "text": "your state could be really large you could have tens twenty hundred properties on it and you're getting two",
    "start": "516510",
    "end": "521729"
  },
  {
    "text": "hundred probably properties on your state you've probably got some other architectural decisions you need to think about but with all that data you",
    "start": "521729",
    "end": "528660"
  },
  {
    "text": "need to then build an entirely new object based off of that reduces can't",
    "start": "528660",
    "end": "535530"
  },
  {
    "text": "return undefined your application should never get to a point where the state of the application is undefined if you're",
    "start": "535530",
    "end": "542010"
  },
  {
    "text": "if you're application doesn't have a defined state will what is your application actually",
    "start": "542010",
    "end": "547269"
  },
  {
    "text": "trying to represent and the everything that happens with inside of a store",
    "start": "547269",
    "end": "552550"
  },
  {
    "text": "happens synchronously so when you dispatch an action it goes straight through to the reducer it might pass for",
    "start": "552550",
    "end": "558790"
  },
  {
    "text": "a middleware sure but everything happens synchronously now this is interesting JavaScript if you're doing something that is asynchronous a lot of what we do",
    "start": "558790",
    "end": "565240"
  },
  {
    "text": "in javascript programming is asynchronous you we're using fetch to go out and pull something down or dolls Ajax if we're using jQuery room that's",
    "start": "565240",
    "end": "571839"
  },
  {
    "text": "an asynchronous operation and this is where middleware starts playing in you would have a middleware that can handle",
    "start": "571839",
    "end": "576940"
  },
  {
    "text": "something that's asynchronous attend an asynchronous operation into several synchronous operations we've started an",
    "start": "576940",
    "end": "582760"
  },
  {
    "text": "AJAX call we've finished an AJAX call and our applications then can respond differently to those i'm starting an",
    "start": "582760",
    "end": "588760"
  },
  {
    "text": "AJAX call wish i was spinner to indicate a loading state hey Jess call finishes we hide a spin on that sort of thing now",
    "start": "588760",
    "end": "595690"
  },
  {
    "text": "you might be thinking that you've heard this kind of an architecture before well it's not a unique system but it's",
    "start": "595690",
    "end": "603279"
  },
  {
    "text": "basically an event store this this architecture is very common across a lot",
    "start": "603279",
    "end": "608620"
  },
  {
    "text": "of different programming languages and a lot of different design paradigm you know the idea that you have a single",
    "start": "608620",
    "end": "614560"
  },
  {
    "text": "place where data lives and that's the that owns state as it is I said it's",
    "start": "614560",
    "end": "620110"
  },
  {
    "text": "basically an event also congratulations the JavaScript community you have read this rediscovered something that we've",
    "start": "620110",
    "end": "626140"
  },
  {
    "text": "been doing a long time particularly in server-side programming well done and of course being JavaScript we have to give",
    "start": "626140",
    "end": "632290"
  },
  {
    "text": "it a funky name so that everyone knows that we did it first and it's awesome so",
    "start": "632290",
    "end": "638279"
  },
  {
    "start": "637000",
    "end": "1082000"
  },
  {
    "text": "relax in a nutshell that is now I said the premise of this talk is we want to look at Redux beyond react so with Redux",
    "start": "638279",
    "end": "647050"
  },
  {
    "text": "so the create store is kind of a cool thing that you would work with and then you need some way to plug it into",
    "start": "647050",
    "end": "652449"
  },
  {
    "text": "whichever UI framework that you're working with there's actually bindings out there already for non react",
    "start": "652449",
    "end": "660269"
  },
  {
    "text": "frameworks so things like angular 1 angular 2 and angular 7 which I think I'll announced yesterday version is hard",
    "start": "660269",
    "end": "667540"
  },
  {
    "text": "but you know I think they're up to 12 there's things like backbone there's bindings for that same bindings for",
    "start": "667540",
    "end": "673930"
  },
  {
    "text": "polymer and kind of picture p you big popular you I javascript framework and there's probably there's",
    "start": "673930",
    "end": "679480"
  },
  {
    "text": "probably a rare there's probably a retouch binding for us out there or you",
    "start": "679480",
    "end": "687580"
  },
  {
    "text": "could create something for a less popular framework you could and it's actually fairly trivial to create findings so that's what I've gone and",
    "start": "687580",
    "end": "693910"
  },
  {
    "text": "done and I've created a binding for a very well I'm not going to say unpopular better less than popular or less than",
    "start": "693910",
    "end": "701080"
  },
  {
    "text": "common framework so it's going to open up doodle-do code and who remembers",
    "start": "701080",
    "end": "707890"
  },
  {
    "text": "knockout jas yeah we've got someone over here the remembers not get Jesse I look",
    "start": "707890",
    "end": "713470"
  },
  {
    "text": "I'm going to admit that it's quite a few years since I've written anything with knockout but I thought this was a good illustration of how it doesn't need to",
    "start": "713470",
    "end": "720490"
  },
  {
    "text": "be used with you know any particularly fancy JavaScript framework nothing that has massive ceremony around it like like",
    "start": "720490",
    "end": "726100"
  },
  {
    "text": "you get with angular or polymer or react or anything like that I'm just going to start up some code launch our browser",
    "start": "726100",
    "end": "734890"
  },
  {
    "text": "and so I click a button and the counter goes up excellent Kodomo has succeeded",
    "start": "734890",
    "end": "741520"
  },
  {
    "text": "while i'm clicking on the button and this is a highly technically complex",
    "start": "741520",
    "end": "746910"
  },
  {
    "text": "application that I've got right here so",
    "start": "746910",
    "end": "752170"
  },
  {
    "text": "I have an action to find up on line 28 it receives a value and has a type of",
    "start": "752170",
    "end": "757900"
  },
  {
    "text": "increment or ink payload which is a value and then that gets passed through we have a reducer which i have defined",
    "start": "757900",
    "end": "764230"
  },
  {
    "text": "with some initial states there and has the number of clicks that are in there which starts off 40 unsurprisingly and",
    "start": "764230",
    "end": "769870"
  },
  {
    "text": "then the action if the action was increment then we create a new object based off of the existing statement now",
    "start": "769870",
    "end": "777400"
  },
  {
    "text": "admittedly the existing state is probably only going to have that number of clicks property but if it didn't have the number of clicks property I'm using",
    "start": "777400",
    "end": "784600"
  },
  {
    "text": "object to sign online 37 object to sign is a very simple way to create new",
    "start": "784600",
    "end": "790120"
  },
  {
    "text": "objects based off of other objects and then override properties on them so I'm having I have an empty object which is",
    "start": "790120",
    "end": "796330"
  },
  {
    "text": "the first argument I have an object which is state and then I'm passing another object which is going to",
    "start": "796330",
    "end": "801580"
  },
  {
    "text": "override so the number of clicks property would override the number of clicks property on state which would",
    "start": "801580",
    "end": "807340"
  },
  {
    "text": "override the number of clicks property on the empty object that's how you build up a new object based off of an existing object now",
    "start": "807340",
    "end": "816029"
  },
  {
    "text": "we've got Redux create store with our reducer I'm not passing default state because i'm using a default argument",
    "start": "816029",
    "end": "821399"
  },
  {
    "text": "instead in our reducer just kind of illustrating different ways that you can do that and now we need to bind this to",
    "start": "821399",
    "end": "826499"
  },
  {
    "text": "DUI but I want to take my store and subscribe to the events that are",
    "start": "826499",
    "end": "833609"
  },
  {
    "text": "happening with it the dispatchers that happen and then push those up to the UI so when they happens I'm going to unpack",
    "start": "833609",
    "end": "839399"
  },
  {
    "text": "the states and this is a common way that you would work with reacts and redux",
    "start": "839399",
    "end": "845579"
  },
  {
    "text": "together you have a method that the bindings of you call connect you connect a redux store to a react element and you",
    "start": "845579",
    "end": "855689"
  },
  {
    "text": "do that by mapping the state of the store to the properties that are passed in so I just kind of used some some",
    "start": "855689",
    "end": "862169"
  },
  {
    "text": "common naming that you might come across if you've looked at existing Redux and",
    "start": "862169",
    "end": "867660"
  },
  {
    "text": "react tutorials but the thing is that I've written this for nokia so it works",
    "start": "867660",
    "end": "872669"
  },
  {
    "text": "slightly differently so i have our store The Dispatch two profs and state two",
    "start": "872669",
    "end": "877889"
  },
  {
    "text": "props and that takes sort of the first one takes the use this new state and then returns a new object based off of",
    "start": "877889",
    "end": "883470"
  },
  {
    "text": "that doesn't really provide any particular value but it still works and then dispatch just produces a click",
    "start": "883470",
    "end": "889350"
  },
  {
    "text": "method that we've my knockout binding I can bind up here at the top so how does",
    "start": "889350",
    "end": "897029"
  },
  {
    "text": "this work internally I have knockout JSP model not particularly complex doesn't",
    "start": "897029",
    "end": "902910"
  },
  {
    "text": "really do a whole lot of things other than and has an observable properties that has an initial state passed into it",
    "start": "902910",
    "end": "908939"
  },
  {
    "text": "it has a method called register click that when you click on that it triggers",
    "start": "908939",
    "end": "914879"
  },
  {
    "text": "the dispatch on the store which is what happens there online in line 57 you",
    "start": "914879",
    "end": "921869"
  },
  {
    "text": "create that method so I created some bindings for Redux to react we have a",
    "start": "921869",
    "end": "930539"
  },
  {
    "text": "connect method that receives a store it then returns you a new function that you",
    "start": "930539",
    "end": "936029"
  },
  {
    "text": "pass in dispatch to props and state to props which then returns your new function that you pass interview bottle",
    "start": "936029",
    "end": "941189"
  },
  {
    "text": "the originally hind you would do so the reason you would do something like this is you might want to connect one store to",
    "start": "941189",
    "end": "947130"
  },
  {
    "text": "multiple of your models so I could pass in or you could first off you might want",
    "start": "947130",
    "end": "953470"
  },
  {
    "text": "to take one store and remap the the data with inside of that store differently depending on which you I so you might",
    "start": "953470",
    "end": "959620"
  },
  {
    "text": "have a different implementation of the state to props method for example so we",
    "start": "959620",
    "end": "964900"
  },
  {
    "text": "could be unpacking that slightly differently now so I could invoke lips",
    "start": "964900",
    "end": "972640"
  },
  {
    "text": "back on to here so I can invoke read us KO connect store and then use that",
    "start": "972640",
    "end": "979240"
  },
  {
    "text": "multiple times just catch that as an object I could execute up to these two",
    "start": "979240",
    "end": "984550"
  },
  {
    "text": "lines and then pass that with multiple different view models in knockout so that I could use the same underpinning",
    "start": "984550",
    "end": "990340"
  },
  {
    "text": "set of data but render that differently based off of the needs of a particular part of of my application and the final",
    "start": "990340",
    "end": "998260"
  },
  {
    "text": "thing is I'm passing in the view model so that gets done we create this is the view model we give it the initial state",
    "start": "998260",
    "end": "1004350"
  },
  {
    "text": "of the application and then I subscribe to the store change so every time this",
    "start": "1004350",
    "end": "1011130"
  },
  {
    "text": "patch happens we subscribe to that and we unpacked state on line 18 we then",
    "start": "1011130",
    "end": "1017250"
  },
  {
    "text": "create the new properties by using the state to props in the spatula props so unpacking the new application state and",
    "start": "1017250",
    "end": "1024449"
  },
  {
    "text": "then I go over the view model find all of the observable properties of that",
    "start": "1024450",
    "end": "1029610"
  },
  {
    "text": "view model and then update them based off of the store so and so based off of the application state that's what's",
    "start": "1029610",
    "end": "1036510"
  },
  {
    "text": "happening on line 26 down so we kind of hide away all this guff about updating",
    "start": "1036510",
    "end": "1042839"
  },
  {
    "text": "multiple sections of the UI and and if I had a more complex view model I might have more observables on there and more",
    "start": "1042840",
    "end": "1048060"
  },
  {
    "text": "parts of state that I could be mapping back and forth and that's how kind of simple it would be to plug this into just a different kind of UI framework in",
    "start": "1048060",
    "end": "1056040"
  },
  {
    "text": "this case I picked something right knockout.js but that that's the underlying premise you might have something that you've internally written",
    "start": "1056040",
    "end": "1061740"
  },
  {
    "text": "inside of your company that has no the same sort of analogous components which",
    "start": "1061740",
    "end": "1067050"
  },
  {
    "text": "is view models that you want to be able to update and that's and that's a very",
    "start": "1067050",
    "end": "1072150"
  },
  {
    "text": "simple way that you could use Redux with a different UI it doesn't have existing bindings now",
    "start": "1072150",
    "end": "1083140"
  },
  {
    "start": "1082000",
    "end": "1120000"
  },
  {
    "text": "redux actually works quite nicely with something like angular it helps you move away from the idea of having dollars",
    "start": "1083140",
    "end": "1089440"
  },
  {
    "text": "scope everywhere with inside of your application if you've got a controller and then you've got multiple say ness",
    "start": "1089440",
    "end": "1094480"
  },
  {
    "text": "directives underneath of that and you want to pass data down and you've got a pass data backup from the directives you've rely on things like broadcasts",
    "start": "1094480",
    "end": "1101230"
  },
  {
    "text": "and watches to do all that and those can have some performance impacts so being able to do everything is one-way data",
    "start": "1101230",
    "end": "1106720"
  },
  {
    "text": "binding push it down and then just push down dispatch methods that you can invoke that then updates the the top of",
    "start": "1106720",
    "end": "1112510"
  },
  {
    "text": "the controller and then it just pushes data back down that can really simplify the way that you can understand how data",
    "start": "1112510",
    "end": "1117820"
  },
  {
    "text": "is flowing throughout an application alright so redux is actually pretty",
    "start": "1117820",
    "end": "1124030"
  },
  {
    "start": "1120000",
    "end": "1162000"
  },
  {
    "text": "simple it turns out oops wrong them there's only really three core concepts",
    "start": "1124030",
    "end": "1131169"
  },
  {
    "text": "to it you have create store which is the one that you would use most frequently without creating the store you don't",
    "start": "1131169",
    "end": "1137500"
  },
  {
    "text": "really doing a whole lot with redux it has the ability to create middleware combine multiple functions together to",
    "start": "1137500",
    "end": "1143860"
  },
  {
    "text": "produce a chain of middleware that would be executed it also has the ability to take multiple reducers and combine them",
    "start": "1143860",
    "end": "1150010"
  },
  {
    "text": "together to then allow you to pass actions to that as though that it was a",
    "start": "1150010",
    "end": "1155710"
  },
  {
    "text": "single reducer and it handles the passing that across to multiple different to the appropriate reducer",
    "start": "1155710",
    "end": "1163559"
  },
  {
    "start": "1162000",
    "end": "1205000"
  },
  {
    "text": "it's mostly about the architecture is how things will interact with Redux itself you it describes how an action",
    "start": "1164460",
    "end": "1171610"
  },
  {
    "text": "should look and how you provide that into a reducer that kind of stuff is what is really what the core of Redux is",
    "start": "1171610",
    "end": "1177940"
  },
  {
    "text": "so it can easily translate it elsewhere beyond react so it turns out that",
    "start": "1177940",
    "end": "1183940"
  },
  {
    "text": "relapse itself is actually a really small library it's got slightly bigger over timers and smarter people have",
    "start": "1183940",
    "end": "1190059"
  },
  {
    "text": "worked out better ways to do parts of the architecture they've continually optimized that sort of stuff but at its",
    "start": "1190059",
    "end": "1195850"
  },
  {
    "text": "core it's really quite simple so a little while ago I had I had an idea",
    "start": "1195850",
    "end": "1201549"
  },
  {
    "text": "that I wanted to learn how reacts works a lot better so I decided to create a",
    "start": "1201549",
    "end": "1206679"
  },
  {
    "text": "library called reacts pause for dramatic effect on the humor and continue on so yeah I created a",
    "start": "1206679",
    "end": "1217019"
  },
  {
    "text": "library called Redux to users a learning experience for myself and to share hopefully to share with others about how",
    "start": "1217019",
    "end": "1223139"
  },
  {
    "text": "the internals of this works so let's just have a look at that and have a look at a way that we can use that in a",
    "start": "1223139",
    "end": "1230159"
  },
  {
    "text": "different application style yes terminate the task let's close that one",
    "start": "1230159",
    "end": "1236970"
  },
  {
    "text": "down so I'm just going to open up a different tab and will open up vs code",
    "start": "1236970",
    "end": "1243149"
  },
  {
    "text": "yeah so this is a implementation of",
    "start": "1243149",
    "end": "1252239"
  },
  {
    "text": "Redux that it works pretty much the same as redux and that's going to get really properly confusing for everyone now but",
    "start": "1252239",
    "end": "1260159"
  },
  {
    "text": "my implementation the quacky one it doesn't have all the validation checking",
    "start": "1260159",
    "end": "1265679"
  },
  {
    "text": "internally that is that the actual implementation does but he does most of the same things and i created a demo",
    "start": "1265679",
    "end": "1272489"
  },
  {
    "text": "application that we can use for this so i will just run that Redux dash demo and",
    "start": "1272489",
    "end": "1279739"
  },
  {
    "text": "this time i decided to create a console application again just to kind of illustrate how this application",
    "start": "1279739",
    "end": "1285629"
  },
  {
    "text": "architecture is not specific for web UI implementations of relapse and you ice",
    "start": "1285629",
    "end": "1293609"
  },
  {
    "text": "so I have some applications 8i oh I've created a to applique to do application",
    "start": "1293609",
    "end": "1299429"
  },
  {
    "text": "because so far they see i have not demoed a to do application so at some point in time i needed to do that it's",
    "start": "1299429",
    "end": "1305729"
  },
  {
    "text": "the only way you can really illustrate complex software problems is with to do so we've got a couple of different",
    "start": "1305729",
    "end": "1311759"
  },
  {
    "text": "actions that air system could dispatch dispatch are added to do dispatch let marking all the ones is done and",
    "start": "1311759",
    "end": "1317639"
  },
  {
    "text": "changing the visibility so we'll dispatch to do which is right a talk and",
    "start": "1317639",
    "end": "1322820"
  },
  {
    "text": "then we'll add another one be awesome",
    "start": "1322820",
    "end": "1328070"
  },
  {
    "text": "now is that some additional actions that I could be dispatching so i could find this one i'm pretty sure i've written",
    "start": "1328279",
    "end": "1333720"
  },
  {
    "text": "the talk i can just I can click on a triple interact with it which dispatch",
    "start": "1333720",
    "end": "1340200"
  },
  {
    "text": "is an action that has then removed the list market is done so if I toggle visibility dispatch a different action",
    "start": "1340200",
    "end": "1346710"
  },
  {
    "text": "we get the different states we're seeing a different representation of state with inside their application based off of",
    "start": "1346710",
    "end": "1352630"
  },
  {
    "text": "the action that we've dispatched other than that Omar call is done and oops",
    "start": "1352630",
    "end": "1361560"
  },
  {
    "text": "quit so this is reasonably simplistic",
    "start": "1361560",
    "end": "1368770"
  },
  {
    "text": "internally I've done it in a way that I can use redux or i can use Redux work",
    "start": "1368770",
    "end": "1376180"
  },
  {
    "text": "out which one was which in that statement because I'm not sure either but similar things that we've seen in a",
    "start": "1376180",
    "end": "1382360"
  },
  {
    "text": "couple of demos and things I've talked about so far we we create stores we subscribe to state this time because",
    "start": "1382360",
    "end": "1388000"
  },
  {
    "text": "it's a console application UI we're using console dot log too right to the UI and a couple of different ways that",
    "start": "1388000",
    "end": "1394090"
  },
  {
    "text": "we can do colors ones inside of that don't errors and things like that we build up a series of prompts which gives",
    "start": "1394090",
    "end": "1401290"
  },
  {
    "text": "us a bunch of bound a bunch of actions that can be despatched oh we're",
    "start": "1401290",
    "end": "1406810"
  },
  {
    "text": "dispatching those against the store using action creators all that's fairly simple so let's have a look at the",
    "start": "1406810",
    "end": "1412180"
  },
  {
    "text": "create store method I said this is really the cornerstone of working with reacted you you need to have a create",
    "start": "1412180",
    "end": "1417520"
  },
  {
    "text": "store method Redux because you need to have a create store method without creating the store you're not creating",
    "start": "1417520",
    "end": "1422950"
  },
  {
    "text": "anything for with redux Oh bit of null checking a bit of type checking at the top of the the function we then have our",
    "start": "1422950",
    "end": "1431770"
  },
  {
    "text": "state which as I said that's the only part of the application that's mutable we have subscribers so the list is that",
    "start": "1431770",
    "end": "1438370"
  },
  {
    "text": "are going to be listening to to dispatchers getting done and at the end of the day there's some stuff that I'm",
    "start": "1438370",
    "end": "1445660"
  },
  {
    "text": "not going to talk about inside of here just because essence of time and it's not particularly interesting if we have",
    "start": "1445660",
    "end": "1454540"
  },
  {
    "text": "enhances so enhancers are just the terminology for middleware that I used when I was copying pasting code or",
    "start": "1454540",
    "end": "1461470"
  },
  {
    "text": "reading there's a source code of Redux that they use the term enhances but essentially that's middleware talk about",
    "start": "1461470",
    "end": "1468010"
  },
  {
    "text": "that in just a moment the subscribe method is kind of interesting it was",
    "start": "1468010",
    "end": "1473380"
  },
  {
    "text": "this wasn't something that I noticed until I really dived into the sort code is that when you subscribe a function to a store it returns you a",
    "start": "1473380",
    "end": "1481450"
  },
  {
    "text": "function which is the unsubscribe method so you might be from a memory management",
    "start": "1481450",
    "end": "1487630"
  },
  {
    "text": "perspective particularly if you're working with a console application you might want to unsubscribe when something",
    "start": "1487630",
    "end": "1493330"
  },
  {
    "text": "has been removed from state when your master to do is done we you might be actually removing that instead of just",
    "start": "1493330",
    "end": "1498399"
  },
  {
    "text": "you know hiding and showing it like i was doing so you want to remove some kind of an event listener against that thing so you could be you can be calling",
    "start": "1498399",
    "end": "1505059"
  },
  {
    "text": "the unsubscribe method so it it returns you something that you can actually use as the dispose also what it does is when",
    "start": "1505059",
    "end": "1514019"
  },
  {
    "text": "when the subscribers are executed so the dispatch method is then how the kind of",
    "start": "1514019",
    "end": "1520240"
  },
  {
    "text": "really cornerstone piece of making medicine cornerstone like 10 times I'm sorry it's the brains of it so this is",
    "start": "1520240",
    "end": "1526990"
  },
  {
    "text": "where you pass in the action it checks to make sure that you've provided a type of the action so that we know what we're",
    "start": "1526990",
    "end": "1532570"
  },
  {
    "text": "dispatching will then pass that across to the reducers with the current application state and here's where",
    "start": "1532570",
    "end": "1538090"
  },
  {
    "text": "mutation happens online 49 you'll see that we're updating existing state and that's the only places that should ever",
    "start": "1538090",
    "end": "1544809"
  },
  {
    "text": "happen with inside of your architecture we then go through the the subscriptions execute each of those just so anyone was",
    "start": "1544809",
    "end": "1552490"
  },
  {
    "text": "listening better is updated the very last thing that this does on line 62 is",
    "start": "1552490",
    "end": "1559330"
  },
  {
    "text": "it dispatches an initialization action that you really shouldn't be listening to if you read the Redux docs but I just",
    "start": "1559330",
    "end": "1567789"
  },
  {
    "text": "it's done by their implementation so I did it I can't think of a decent reason",
    "start": "1567789",
    "end": "1573700"
  },
  {
    "text": "as to why it's being done they just say it's a complete Andy patent to ever listen to that action it's really",
    "start": "1573700",
    "end": "1579100"
  },
  {
    "text": "difficult to listen to that action because you can't subscribe until after",
    "start": "1579100",
    "end": "1584230"
  },
  {
    "text": "you've created a store but as soon as you create the store of dispatches that action so it's a chicken and egg problem",
    "start": "1584230",
    "end": "1589480"
  },
  {
    "text": "you you can't really ever actually listen to it because it's five before you could ever subscribe but yeah it's",
    "start": "1589480",
    "end": "1594909"
  },
  {
    "text": "there they do it so I had to do it as well no but it was quite interesting",
    "start": "1594909",
    "end": "1600519"
  },
  {
    "text": "because I said it up here on line fourteen we invoke the enhancer and we",
    "start": "1600519",
    "end": "1607929"
  },
  {
    "text": "actually passed through create store you see here so that actually passes a reference through to this function",
    "start": "1607929",
    "end": "1613000"
  },
  {
    "text": "followed by the reducer initial state that we had up top so the way that works",
    "start": "1613000",
    "end": "1619870"
  },
  {
    "text": "is we have the collection mill where's that we're going to have with each other",
    "start": "1619870",
    "end": "1625720"
  },
  {
    "text": "application we receive create store with reducer and state and it then actually",
    "start": "1625720",
    "end": "1632500"
  },
  {
    "text": "invokes that so we've gone from this file we've gone to create store we then",
    "start": "1632500",
    "end": "1639700"
  },
  {
    "text": "realize we've got middleware we've then gone over the middleware which is then go back to create store but this time we've dropped off the the the middleware",
    "start": "1639700",
    "end": "1648040"
  },
  {
    "text": "here so it actually just creates the store as though there is no middle where it will then grab the dispatch method",
    "start": "1648040",
    "end": "1654040"
  },
  {
    "text": "and then walk through all the middleware and wrap a function around them that",
    "start": "1654040",
    "end": "1659970"
  },
  {
    "text": "eventually will call dispatch so it basically builds this chain with an X function and the next function either",
    "start": "1659970",
    "end": "1665650"
  },
  {
    "text": "points the middleware or to dispatch so just it's essentially a a loop that is",
    "start": "1665650",
    "end": "1671470"
  },
  {
    "text": "executed and if as long as you keep calling next you'll eventually dispatch in action so that's how kind of readouts",
    "start": "1671470",
    "end": "1678100"
  },
  {
    "text": "works internally and this is how you could take redux and not use it with",
    "start": "1678100",
    "end": "1683230"
  },
  {
    "text": "inside of a JavaScript web UI",
    "start": "1683230",
    "end": "1687179"
  },
  {
    "start": "1692000",
    "end": "1712000"
  },
  {
    "text": "so observing Redux saws now we've used the subscribe method so far we've seen",
    "start": "1693340",
    "end": "1698840"
  },
  {
    "text": "how that can be used either console application or it could be used inside of a web UI to listen to events that are",
    "start": "1698840",
    "end": "1705529"
  },
  {
    "text": "happening and changes that have been done and things like that but it turns out that a relaxed store is actually an",
    "start": "1705529",
    "end": "1714740"
  },
  {
    "start": "1712000",
    "end": "1841000"
  },
  {
    "text": "observable object so under the covers it also implements symbol dot observable",
    "start": "1714740",
    "end": "1720590"
  },
  {
    "text": "which is part of es2015 I think those",
    "start": "1720590",
    "end": "1725720"
  },
  {
    "text": "under the symbol was introduced I don't think was 2017 I think pretty sure as 2015 and I'm so under the covers what",
    "start": "1725720",
    "end": "1734269"
  },
  {
    "text": "that gives us is it starts to look and operate a bit like a stream or it allows",
    "start": "1734269",
    "end": "1741230"
  },
  {
    "text": "you to combine it with something like our xjs and if you've done stream based programming and observable based",
    "start": "1741230",
    "end": "1747470"
  },
  {
    "text": "programming in the browser RX is probably the most common way you would go about it's a simplest way to get",
    "start": "1747470",
    "end": "1752510"
  },
  {
    "text": "started so what that means is that we could take it take a stream and we can",
    "start": "1752510",
    "end": "1761169"
  },
  {
    "text": "listen to that in different ways we could do some sort of subscription to that that applies a filter it does a",
    "start": "1761169",
    "end": "1767029"
  },
  {
    "text": "conditional subscription to that and that's executing it's kind of like middleware bit after the action has been",
    "start": "1767029",
    "end": "1773059"
  },
  {
    "text": "done after the reducer is fired we might want to do something different to that to what's happened at the end of the day so we can listen to that and produce a",
    "start": "1773059",
    "end": "1780049"
  },
  {
    "text": "conditional subscription we could remap the data after the state has changed so",
    "start": "1780049",
    "end": "1786380"
  },
  {
    "text": "after something like convert state to props has been invoked we can then remap",
    "start": "1786380",
    "end": "1791750"
  },
  {
    "text": "that to create an entirely new data based off of that stream or we could",
    "start": "1791750",
    "end": "1797720"
  },
  {
    "text": "combine it with another stream so say that you're listening to a web socket and the web socket is just pushing data",
    "start": "1797720",
    "end": "1804019"
  },
  {
    "text": "out that you need to display stock to here is a classic example of that it's just it's firing data down to the UI now",
    "start": "1804019",
    "end": "1809990"
  },
  {
    "text": "you don't want that inside of a redux store because this is really fast changing data it's really continuously",
    "start": "1809990",
    "end": "1817010"
  },
  {
    "text": "incoming data and you might want to be doing some processing on there are we do we need to slice out of it do we want to",
    "start": "1817010",
    "end": "1822860"
  },
  {
    "text": "put a some kind of a buffer that we only get data in a every five",
    "start": "1822860",
    "end": "1828200"
  },
  {
    "text": "seconds even though the server is pumping me out every single second that kind of stuff we can we can combine multiple observable streams one of which",
    "start": "1828200",
    "end": "1836450"
  },
  {
    "text": "happens to be a redux or so let's have a",
    "start": "1836450",
    "end": "1842390"
  },
  {
    "start": "1841000",
    "end": "1928000"
  },
  {
    "text": "look at how that one would work back to vs code and open up another demo cool",
    "start": "1842390",
    "end": "1850970"
  },
  {
    "text": "alright so let's run this one in chrome",
    "start": "1850970",
    "end": "1857260"
  },
  {
    "text": "family phone crashed awesome ah alright so i wrote a clock this clock actually",
    "start": "1860020",
    "end": "1867380"
  },
  {
    "text": "that's just font size that a touch so the clock is showing minutes and hours",
    "start": "1867380",
    "end": "1873560"
  },
  {
    "text": "on it then underneath just to show that there is continual data being pumped to the UI have the it's showing the seconds",
    "start": "1873560",
    "end": "1881360"
  },
  {
    "text": "as well that's taking over continuously and and every minute the minute hand",
    "start": "1881360",
    "end": "1887930"
  },
  {
    "text": "will tick well at least in theory and that seems logical that the minute hand changes at least once a minute so i've",
    "start": "1887930",
    "end": "1893960"
  },
  {
    "text": "only got 23 seconds left that i have to keep talking to make sure that this demo",
    "start": "1893960",
    "end": "1899120"
  },
  {
    "text": "continues to work but the fundamental thing that i wanted to show here is that this is the same underlying store and i",
    "start": "1899120",
    "end": "1907370"
  },
  {
    "text": "can do different things to that to render out the UI I don't want to continuously be checking with inside of",
    "start": "1907370",
    "end": "1914180"
  },
  {
    "text": "my SVG going no I actually don't want to tell me I'm not showing a second hand so you don't have to do anything actually",
    "start": "1914180",
    "end": "1919370"
  },
  {
    "text": "want that element completely ignored until the minute has passed and there we go it should have moved but I was",
    "start": "1919370",
    "end": "1924860"
  },
  {
    "text": "probably talking so you didn't even notice damn so how does this look if we",
    "start": "1924860",
    "end": "1931790"
  },
  {
    "start": "1928000",
    "end": "2165000"
  },
  {
    "text": "scroll down reducer I just have the ability to stop and start time yeah man",
    "start": "1931790",
    "end": "1939770"
  },
  {
    "text": "my jokes is it too late in the day for like really terrible dad humor I think it must be some we have an action that",
    "start": "1939770",
    "end": "1947540"
  },
  {
    "text": "could be fired that tells us to draw the clock so when when the system first starts up the reason I was this is kind",
    "start": "1947540",
    "end": "1955730"
  },
  {
    "text": "of where I realized that you couldn't you is the unit method you can sorry the",
    "start": "1955730",
    "end": "1961290"
  },
  {
    "text": "interaction you can subscribe to that I was like I wanted to just subscribe to that because you know the stores created I want to be doing so no it turns out",
    "start": "1961290",
    "end": "1966870"
  },
  {
    "text": "you can't because well that action doesn't you can't subscribe to that action having been fired then we have",
    "start": "1966870",
    "end": "1973170"
  },
  {
    "text": "another action time when time has changed so now we're no longer drawing the clock because otherwise we just continue drawing the clock on every",
    "start": "1973170",
    "end": "1979290"
  },
  {
    "text": "second and we'd end up with a lot of clocks but we have the previous in previous tick of previous second and the",
    "start": "1979290",
    "end": "1986429"
  },
  {
    "text": "current second and that's just so I can work out whether or not to change the minute hand I have the redox devtools",
    "start": "1986429",
    "end": "1993270"
  },
  {
    "text": "enabled here so that's an example of using middleware i'm subscribing to the",
    "start": "1993270",
    "end": "1999780"
  },
  {
    "text": "store just plain old subscribing to the store and every single time in action is dispatched i will check to see if there",
    "start": "1999780",
    "end": "2007160"
  },
  {
    "text": "is a time component associated with that if there is update an element to choosing moment for some formatting that",
    "start": "2007160",
    "end": "2013000"
  },
  {
    "text": "displays the hours minutes and seconds we there i just realized don't know I",
    "start": "2013000",
    "end": "2021470"
  },
  {
    "text": "was like that is it actually 6pm yes it is 6pm well moving on from that one",
    "start": "2021470",
    "end": "2028610"
  },
  {
    "text": "after after after we've created that one so like I said that's firing continuously at that subscribe is",
    "start": "2028610",
    "end": "2035419"
  },
  {
    "text": "continuously happening on line 62 i'm using RX observable from and passing it an instance of that store now this is",
    "start": "2035419",
    "end": "2042620"
  },
  {
    "text": "our x version 5 not eric version 4 which is what i found out when running this demo and it took me probably an hour to",
    "start": "2042620",
    "end": "2049550"
  },
  {
    "text": "work out why my store wasn't being while I was getting errors trying to subscribe to the store and because it's just like",
    "start": "2049550",
    "end": "2054980"
  },
  {
    "text": "just you can it's an observable just use Eric so I go to reactive extensions and I've download our X and it's not working",
    "start": "2054980",
    "end": "2062030"
  },
  {
    "text": "and then I go back in our original IQs Eric's from our x / RX j it's not our x",
    "start": "2062030",
    "end": "2068148"
  },
  {
    "text": "extensions jason it's like thank you for making that horribly confusing but still we can observe turn-offs are in",
    "start": "2068149",
    "end": "2074030"
  },
  {
    "text": "children's overall and then on 64 of an example of using filter so this is a conditional and this is a conditional",
    "start": "2074030",
    "end": "2081530"
  },
  {
    "text": "state change so if the state is if the state draw a clock is true then we'll",
    "start": "2081530",
    "end": "2089060"
  },
  {
    "text": "subscribe and we'll pass through the draw clock better so this one only happened once obviously because thats",
    "start": "2089060",
    "end": "2094608"
  },
  {
    "text": "that's the only time that action is ever fire I have then a couple of other",
    "start": "2094609",
    "end": "2100450"
  },
  {
    "text": "observables that I'm doing so I'm observing while there is states so while",
    "start": "2100450",
    "end": "2105710"
  },
  {
    "text": "there isn't a previous and there is a current time then we'll update the clock",
    "start": "2105710",
    "end": "2111230"
  },
  {
    "text": "with the current time so while there is previous and there is current time we'll update the clock and then I just wanted",
    "start": "2111230",
    "end": "2118010"
  },
  {
    "text": "to use an example of you could chain multiple filters together so if you had multiple things that you could be",
    "start": "2118010",
    "end": "2123049"
  },
  {
    "text": "conditionals as to why you would be interested in state changes happening here ok we're filtering as long as there",
    "start": "2123049",
    "end": "2128869"
  },
  {
    "text": "is previous a previous time and the previous time minutes is not equal to",
    "start": "2128869",
    "end": "2135410"
  },
  {
    "text": "the current time minutes then i'm going to use map so unpack that state object",
    "start": "2135410",
    "end": "2140660"
  },
  {
    "text": "even further and then we're going to update the clock so redraw the minute hands um I just realize that those two",
    "start": "2140660",
    "end": "2148130"
  },
  {
    "text": "are basically the same so I'm actually updating the clock twice hmm well moving",
    "start": "2148130",
    "end": "2154910"
  },
  {
    "text": "on and then at the bottom I have a button to stop and start the clock which just clears intervals and things like",
    "start": "2154910",
    "end": "2161510"
  },
  {
    "text": "that because i'm using a set interval to do the continuous running so that's an",
    "start": "2161510",
    "end": "2167150"
  },
  {
    "text": "illustration of using observable streams to then combine that with a redux store",
    "start": "2167150",
    "end": "2173089"
  },
  {
    "text": "to make an observable you I",
    "start": "2173089",
    "end": "2176680"
  },
  {
    "text": "okay so step back forward through my slides all right now we've kind of seen",
    "start": "2182430",
    "end": "2189809"
  },
  {
    "text": "how this all works with inside of JavaScript I really wanted to challenge myself when I was putting together the",
    "start": "2189809",
    "end": "2195030"
  },
  {
    "text": "idea of this talk about how could we use Redux even further than just kind of JavaScript view eyes and either that",
    "start": "2195030",
    "end": "2202050"
  },
  {
    "text": "console application versus a browser-based application so I thought well what if we wanted to try and using",
    "start": "2202050",
    "end": "2207150"
  },
  {
    "start": "2205000",
    "end": "2353000"
  },
  {
    "text": "Redux without even using javascript so I set myself a challenge to implement",
    "start": "2207150",
    "end": "2212490"
  },
  {
    "text": "Redux in f-sharp why because I just felt like writing something even more complex",
    "start": "2212490",
    "end": "2218309"
  },
  {
    "text": "than just a sharp implementation also it turns out that someone had already written a c-sharp implementation of",
    "start": "2218309",
    "end": "2224180"
  },
  {
    "text": "redux and if you're in my talk esa morning about bad ideas you would say that just because someone's done it",
    "start": "2224180",
    "end": "2230040"
  },
  {
    "text": "doesn't mean you shouldn't do it anyway so that's what i did i have written an implementation of redux in f-sharp and",
    "start": "2230040",
    "end": "2239099"
  },
  {
    "text": "also this gives me a chance to talk about F sharp and I just like doing that and sorry to anyone that doesn't like f",
    "start": "2239099",
    "end": "2245010"
  },
  {
    "text": "sharp but you're going to like sit through at least a couple minutes of of that so let's open open up this file and",
    "start": "2245010",
    "end": "2253200"
  },
  {
    "text": "we'll marvel in the joys of angle brackets and no semicolons and type",
    "start": "2253200",
    "end": "2259530"
  },
  {
    "text": "inference so we have a couple of types",
    "start": "2259530",
    "end": "2265079"
  },
  {
    "text": "of those are fine and generics in f-sharp fun and interesting and give you",
    "start": "2265079",
    "end": "2270180"
  },
  {
    "text": "all sorts of pain but the important thing here is we have a store which has",
    "start": "2270180",
    "end": "2276089"
  },
  {
    "text": "state and payload as generic arguments now this is where start getting interesting to think about Redux on a",
    "start": "2276089",
    "end": "2282349"
  },
  {
    "text": "compiled language so it could be soo sharper could be F sharp it could be any",
    "start": "2282349",
    "end": "2288000"
  },
  {
    "text": "other it could be typescript even I compiled to language for JavaScript or a",
    "start": "2288000",
    "end": "2293059"
  },
  {
    "text": "so a non browser-based compile compile language because the Redux action has to",
    "start": "2293059",
    "end": "2300450"
  },
  {
    "text": "have some kind of a type when we do that in Java with the type property well this is an actual type system that makes",
    "start": "2300450",
    "end": "2305849"
  },
  {
    "text": "things even easier doesn't it now that's one less property we have to worry about advantages of type systems right there now as we have get state we have",
    "start": "2305849",
    "end": "2312450"
  },
  {
    "text": "dispatch and we have a subscribe method and",
    "start": "2312450",
    "end": "2318470"
  },
  {
    "text": "apologies to anyone that is either not familiar enough with sharp I'm going to not particularly dive into the syntax",
    "start": "2318470",
    "end": "2325290"
  },
  {
    "text": "here I'll try and cover all things that are relevant to understanding what's happening but you know there is",
    "start": "2325290",
    "end": "2330960"
  },
  {
    "text": "obviously a lot of arrows and things like that in weird locations that might not be familiar if you're not not an",
    "start": "2330960",
    "end": "2337980"
  },
  {
    "text": "f-sharp user we have a method that",
    "start": "2337980",
    "end": "2343220"
  },
  {
    "text": "builds up our middleware and builds up that thing where we dispatch and then",
    "start": "2343220",
    "end": "2348720"
  },
  {
    "text": "execute the mill we're in sequence to finally dispatch an action but the",
    "start": "2348720",
    "end": "2354420"
  },
  {
    "start": "2353000",
    "end": "2494000"
  },
  {
    "text": "create store is the really important thing that we have at the end of the day now remember our JavaScript",
    "start": "2354420",
    "end": "2359820"
  },
  {
    "text": "implementation that if we have middleware we then need to re-execute",
    "start": "2359820",
    "end": "2365400"
  },
  {
    "text": "create store but without the middleware and then we do some stuff to it after the fact well to do that in f-sharp we",
    "start": "2365400",
    "end": "2372210"
  },
  {
    "text": "need to create a recursive function so in f-sharp we have a record that tells it this function is going to be",
    "start": "2372210",
    "end": "2378270"
  },
  {
    "text": "recursive that so the compiler understands as a recursive function and can do some optimizations we then have a",
    "start": "2378270",
    "end": "2385109"
  },
  {
    "text": "function that takes a reducer it has some initial state passed to it and then",
    "start": "2385109",
    "end": "2390240"
  },
  {
    "text": "we have a sequence of middle where's the pass to it I've just because this is",
    "start": "2390240",
    "end": "2396270"
  },
  {
    "text": "about 100 characters of type definition i created a type on line 12 represent",
    "start": "2396270",
    "end": "2401430"
  },
  {
    "text": "that but it's a sequence of middleware functions that would be executed now if",
    "start": "2401430",
    "end": "2408210"
  },
  {
    "text": "we have been provided with samil where then they're even so the first thing we",
    "start": "2408210",
    "end": "2413369"
  },
  {
    "text": "do is got like a switch sort of statement and match them in f-sharp if",
    "start": "2413369",
    "end": "2418680"
  },
  {
    "text": "we receive middleware so if we don't receive middleware then we call create store with the initial state and no wait",
    "start": "2418680",
    "end": "2428520"
  },
  {
    "text": "no sorry that's if there is no way so it is empty is false so if there is middleware we then reacts acute creates",
    "start": "2428520",
    "end": "2434220"
  },
  {
    "text": "doable without the middle where we then grabbed a dispatch method we then build up our middleware chain and so on and so",
    "start": "2434220",
    "end": "2440100"
  },
  {
    "text": "forth and then we return the store at the bottom if there wasn't new web provided we get the initial statement",
    "start": "2440100",
    "end": "2447740"
  },
  {
    "text": "you know so this is mutable because state can only be changed with inside of with inside of the state so with inside",
    "start": "2447740",
    "end": "2454400"
  },
  {
    "text": "of the store and in f-sharp everything is immutable by default so we have to explicitly make this mutable which is",
    "start": "2454400",
    "end": "2460310"
  },
  {
    "text": "it's kind of a really good way to think about mutability and immutability inside of a redux or is you kind of have to be",
    "start": "2460310",
    "end": "2467630"
  },
  {
    "text": "forced into choosing what you can and can't change we have our subscriptions which is a mutable collection because",
    "start": "2467630",
    "end": "2473480"
  },
  {
    "text": "you can add and remove subscriptions we have a dispatch function which will invoke the reducer take state with the",
    "start": "2473480",
    "end": "2480200"
  },
  {
    "text": "state in the action and then update the existing state now we have our subscribers that will then iterate over",
    "start": "2480200",
    "end": "2485869"
  },
  {
    "text": "and execute and then we return the action just that's how Redux works internally we have subscribers which",
    "start": "2485869",
    "end": "2491390"
  },
  {
    "text": "subscribe methods and then we return a store at the end of the day so how would",
    "start": "2491390",
    "end": "2497060"
  },
  {
    "start": "2494000",
    "end": "2701000"
  },
  {
    "text": "we use this in a server-side application while I was trying to think of it it was",
    "start": "2497060",
    "end": "2502130"
  },
  {
    "text": "all kind of well and good to write an implementation of Redux that it should theoretically work and write an in",
    "start": "2502130",
    "end": "2507619"
  },
  {
    "text": "f-sharp but what was I going to do with it it lives on a server at the point of",
    "start": "2507619",
    "end": "2514010"
  },
  {
    "text": "Redux is that it said it's for doing a stateful application I'm a web developer so the idea of a stateful application in",
    "start": "2514010",
    "end": "2522050"
  },
  {
    "text": "net that's living on the server well that is not there you don't do that with the web the web it is stateless so how",
    "start": "2522050",
    "end": "2528290"
  },
  {
    "text": "would you do this well WebSockets I decided to go with WebSockets and what",
    "start": "2528290",
    "end": "2533300"
  },
  {
    "text": "do you do with WebSockets you create a chat application because it's the most useful thing that you can do with a WebSocket server so I correct out",
    "start": "2533300",
    "end": "2541990"
  },
  {
    "text": "signaler when I so I have a signal our",
    "start": "2541990",
    "end": "2548630"
  },
  {
    "text": "servers of running in the browser oh so simmilar server running on the server signal our clients running in the browser that will connect when they're",
    "start": "2548630",
    "end": "2555530"
  },
  {
    "text": "connected they subscribe to changes they're going to happen with inside of the store so state entirely lives on the",
    "start": "2555530",
    "end": "2562460"
  },
  {
    "text": "server and every time a dispatch action happens we will then notify the",
    "start": "2562460",
    "end": "2568010"
  },
  {
    "text": "subscribe so actually pushed something down via the web sockets and this is where we can start seeing the advantage",
    "start": "2568010",
    "end": "2574340"
  },
  {
    "text": "of a type system with redux I have the payload which is the action that's being",
    "start": "2574340",
    "end": "2580070"
  },
  {
    "text": "dispatched I know need to have a type I can just have a payload and then based off of the type that it is is it someone typing is that",
    "start": "2580070",
    "end": "2587240"
  },
  {
    "text": "a new user has joined the chat system has the user posted message so you",
    "start": "2587240",
    "end": "2592700"
  },
  {
    "text": "typing so Johnny's typing a user is joined John has joined chat post message",
    "start": "2592700",
    "end": "2598850"
  },
  {
    "text": "someone has hit enter to actually send a message over the chat system so that",
    "start": "2598850",
    "end": "2604250"
  },
  {
    "text": "then would come in to the way that we're",
    "start": "2604250",
    "end": "2609380"
  },
  {
    "text": "using redux and this should hopefully be started making me starting to sound like",
    "start": "2609380",
    "end": "2615080"
  },
  {
    "text": "a broken record we have a reducer it receives state and actions and all those sorts of things here we but instead of",
    "start": "2615080",
    "end": "2622130"
  },
  {
    "text": "having to do if action type we can use a match segment which if it's a message if",
    "start": "2622130",
    "end": "2629210"
  },
  {
    "text": "it's a new user if it's a typing action that's been dispatched we do different things we create new state based off of",
    "start": "2629210",
    "end": "2635240"
  },
  {
    "text": "the existing state and change the parts of it that that particular action should change so when a new user online 26 when",
    "start": "2635240",
    "end": "2641900"
  },
  {
    "text": "a new user joins we take the existing state of the application but we update the users by adding the user who is just",
    "start": "2641900",
    "end": "2648020"
  },
  {
    "text": "joined I've also got an example of how middleware works so when a new user has",
    "start": "2648020",
    "end": "2654020"
  },
  {
    "text": "joined it will just do a comfortable right line essentially if it's a non if",
    "start": "2654020",
    "end": "2660320"
  },
  {
    "text": "the action that was dispatched is not new user then we just perform a no-op we",
    "start": "2660320",
    "end": "2665570"
  },
  {
    "text": "create our store and then that should all be up and up and running so let's run this and hit f5 let's hit f5 again",
    "start": "2665570",
    "end": "2675820"
  },
  {
    "text": "come on demos we just check my solution",
    "start": "2675820",
    "end": "2681050"
  },
  {
    "text": "Explorer and I have the wrong project set as the startup project let's change that yeah five and we'll start up our",
    "start": "2681050",
    "end": "2689020"
  },
  {
    "text": "signal our server now remember that state entirely lives on the server the",
    "start": "2689020",
    "end": "2694820"
  },
  {
    "text": "browser's are just essentially taking messages that are being sent to them and displaying them or they're going to",
    "start": "2694820",
    "end": "2699890"
  },
  {
    "text": "display them in a UI so we're coming to our browser and we are level host 8008",
    "start": "2699890",
    "end": "2706660"
  },
  {
    "start": "2701000",
    "end": "2706000"
  },
  {
    "text": "8888 and I will join the chat and then let's",
    "start": "2706660",
    "end": "2711950"
  },
  {
    "text": "duplicate this tab and John conjoin and",
    "start": "2711950",
    "end": "2719590"
  },
  {
    "text": "let's just pop these side by side so we can see a bit of font size so hello John",
    "start": "2719590",
    "end": "2731020"
  },
  {
    "text": "then and we can send messages back and forth and John can type something now",
    "start": "2731020",
    "end": "2738290"
  },
  {
    "text": "this is entirely living on the server so if I was to reload this tab and this can",
    "start": "2738290",
    "end": "2743630"
  },
  {
    "text": "be genes we get the existing state of the application because state is not inside the browser the state is",
    "start": "2743630",
    "end": "2750170"
  },
  {
    "text": "elsewhere this also then opens up for some really interesting quirks of it if",
    "start": "2750170",
    "end": "2755920"
  },
  {
    "text": "Aaron if someone joins again as Aaron let's just pop that one down here and",
    "start": "2755920",
    "end": "2762740"
  },
  {
    "text": "we'll start typing in there saying hey guys and single shared state you'll see",
    "start": "2762740",
    "end": "2769670"
  },
  {
    "text": "that both errands and now fighting and we send the message and now we've",
    "start": "2769670",
    "end": "2774980"
  },
  {
    "text": "updated state but everyone sees the same thing but Oh shared state something to be mindful of though if you're doing",
    "start": "2774980",
    "end": "2781880"
  },
  {
    "text": "this inside of an application now obviously this is this is a fairly trivial example and a fairly silly",
    "start": "2781880",
    "end": "2787340"
  },
  {
    "text": "example of what you might be using a server-side implementation or a dotnet implementation of redux but a more",
    "start": "2787340",
    "end": "2794720"
  },
  {
    "text": "realistic scenario for this would be a mobile application mobile applications",
    "start": "2794720",
    "end": "2800120"
  },
  {
    "text": "are soon we use it generally speaking they're going to have some kind of data that lose with inside of them you're",
    "start": "2800120",
    "end": "2806270"
  },
  {
    "text": "going to have actions that happen when you interact with those that you need to change data with inside of that",
    "start": "2806270",
    "end": "2812390"
  },
  {
    "text": "applications send it around maybe update different parts of the UI and econ",
    "start": "2812390",
    "end": "2818140"
  },
  {
    "text": "application is a good example you click Add to Cart we need to update the card in the at the top of the application we",
    "start": "2818140",
    "end": "2823820"
  },
  {
    "text": "need to change the amount of the amount with inside of our card costing you all those kinds of things so that's this",
    "start": "2823820",
    "end": "2831380"
  },
  {
    "text": "where it get back to talking about it's really it's events we're triggering event with inside of our system so that",
    "start": "2831380",
    "end": "2836960"
  },
  {
    "text": "that could be a non JavaScript usage of rid us and this is why",
    "start": "2836960",
    "end": "2842540"
  },
  {
    "text": "I just how i came across that there was a c-sharp implementation of redux so",
    "start": "2842540",
    "end": "2854180"
  },
  {
    "start": "2851000",
    "end": "2859000"
  },
  {
    "text": "like I said I'm well aware that I'm the only thing standing between everyone in the after party so hopefully your minds",
    "start": "2854180",
    "end": "2860240"
  },
  {
    "text": "are blown with the possibilities of how you can use redux and not just have to use it with inside of a react codebase",
    "start": "2860240",
    "end": "2865730"
  },
  {
    "text": "you don't even have to use it with inside of a browser you don't even have to use it with inside of a JavaScript",
    "start": "2865730",
    "end": "2871100"
  },
  {
    "text": "application is it's a very simple pattern it's really just an inventing",
    "start": "2871100",
    "end": "2876440"
  },
  {
    "text": "system events or kind of system underneath that it can be very quickly written in whatever programming language",
    "start": "2876440",
    "end": "2883130"
  },
  {
    "text": "for whatever application architecture that you're working with in whatever application target platform you're",
    "start": "2883130",
    "end": "2889430"
  },
  {
    "text": "working with a biet web via desktop via console via mobile thank you any any",
    "start": "2889430",
    "end": "2903110"
  },
  {
    "start": "2894000",
    "end": "2924000"
  },
  {
    "text": "questions if not I believe there is a",
    "start": "2903110",
    "end": "2908270"
  },
  {
    "text": "party happening outside or if not we are going to go start a party happening outside I obviously be around as well if",
    "start": "2908270",
    "end": "2914480"
  },
  {
    "text": "you want to ask me questions or say why would you do any of this in f-sharp I'm",
    "start": "2914480",
    "end": "2920780"
  },
  {
    "text": "more than happy to answer those questions thanks everyone",
    "start": "2920780",
    "end": "2925780"
  }
]