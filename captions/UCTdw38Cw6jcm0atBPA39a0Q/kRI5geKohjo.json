[
  {
    "start": "0",
    "end": "93000"
  },
  {
    "text": "my name is dominic and as always i have way too much content for 60 minutes so",
    "start": "7359",
    "end": "13840"
  },
  {
    "text": "let's get started um thanks for your time and you know as you probably well",
    "start": "13840",
    "end": "21039"
  },
  {
    "text": "if you know me you know that i spent most of my time you know with oauth and open money",
    "start": "21039",
    "end": "26720"
  },
  {
    "text": "connect and token based security systems and so on so",
    "start": "26720",
    "end": "32480"
  },
  {
    "text": "um what this talk is all about is basically the things that if you are having a",
    "start": "32480",
    "end": "38879"
  },
  {
    "text": "wharf up and running the things that might be worthwhile looking at in 2021 to uh",
    "start": "38879",
    "end": "46559"
  },
  {
    "text": "you know improve your system or make it more secure or be ready for certain regulations or",
    "start": "46559",
    "end": "53680"
  },
  {
    "text": "standards um or just you know to be aware of that these things exist",
    "start": "53680",
    "end": "58879"
  },
  {
    "text": "in case in case you need them at some point cool so um the only really",
    "start": "58879",
    "end": "65760"
  },
  {
    "text": "important thing here is in you have my email address um on this page here also you have",
    "start": "65760",
    "end": "72080"
  },
  {
    "text": "i i uploaded the slides already to speakerdeck.com lease privilege i also put the link into",
    "start": "72080",
    "end": "77759"
  },
  {
    "text": "the slack channel so from there you can get the slides and that has all kinds of",
    "start": "77759",
    "end": "82799"
  },
  {
    "text": "extra links and extra reading on it and also my email address and my twitter handle and",
    "start": "82799",
    "end": "88320"
  },
  {
    "text": "and so on and that's how you can get a hold of me cool so um this is not this is primarily",
    "start": "88320",
    "end": "94880"
  },
  {
    "start": "93000",
    "end": "93000"
  },
  {
    "text": "a protocol centric talk but i'm going to show you some demos and as you probably know i've been",
    "start": "94880",
    "end": "100079"
  },
  {
    "text": "working on this uh oauth framework for asp.net core for quite a while it's called identity server",
    "start": "100079",
    "end": "106159"
  },
  {
    "text": "we recently moved the repos so um to a new repo which is under my new",
    "start": "106159",
    "end": "111759"
  },
  {
    "text": "company called wendy software with a new license so we changed the license so that uh you",
    "start": "111759",
    "end": "116799"
  },
  {
    "text": "know commercial projects now need a different license but we still have a free",
    "start": "116799",
    "end": "121840"
  },
  {
    "text": "version for you know us open source work and and smaller companies and so on so",
    "start": "121840",
    "end": "128560"
  },
  {
    "text": "you can just use this uh you you don't even need a license at all to to try the samples and the demos and",
    "start": "128560",
    "end": "134319"
  },
  {
    "text": "so on um so just that you know that all of the new work and some of the newer features actually",
    "start": "134319",
    "end": "140480"
  },
  {
    "text": "that are going to show are now available um in the new version um you can find all the source code and",
    "start": "140480",
    "end": "147280"
  },
  {
    "text": "all those demos in in this repo basically and and organization okay cool so what's",
    "start": "147280",
    "end": "155200"
  },
  {
    "start": "154000",
    "end": "154000"
  },
  {
    "text": "um on the menu so to speak um first of all i want to talk about uh",
    "start": "155200",
    "end": "160560"
  },
  {
    "text": "um 2.1 which is a protocol revision which is probably going to be released",
    "start": "160560",
    "end": "165840"
  },
  {
    "text": "this year um and then which you know makes things a little bit",
    "start": "165840",
    "end": "171040"
  },
  {
    "text": "uh well may make things considerably more secure more well-defined think of it as an updated version of the original spec",
    "start": "171040",
    "end": "177599"
  },
  {
    "text": "then we're gonna look at some topics that i think are really important which are not very",
    "start": "177599",
    "end": "183920"
  },
  {
    "text": "widely used but they should be used i think because they are available as technologies and they",
    "start": "183920",
    "end": "190239"
  },
  {
    "text": "improve the security of your systems yeah and one of them is definitely something around key rotation",
    "start": "190239",
    "end": "195680"
  },
  {
    "text": "and upgrading to more modern finding algorithms um we're going to talk about this new um",
    "start": "195680",
    "end": "202319"
  },
  {
    "text": "json web token profile for of access tokens because funnily enough even if people are using",
    "start": "202319",
    "end": "208640"
  },
  {
    "text": "shots for quite a while now i know off there has never been any sort of standard or anything around it but that",
    "start": "208640",
    "end": "215760"
  },
  {
    "text": "exists now as well so we're going to have a look at that we're going to look at something called resource isolation or",
    "start": "215760",
    "end": "222239"
  },
  {
    "text": "in more detail a stack called resource indicators that allows you to isolate well resources from each other",
    "start": "222239",
    "end": "229280"
  },
  {
    "text": "which is um an interesting thing as soon as your api surface has a certain size we're going to look",
    "start": "229280",
    "end": "237360"
  },
  {
    "text": "at char and par which is basically which are two standards",
    "start": "237360",
    "end": "242480"
  },
  {
    "text": "that help securing the front channel in the browser and making making that more secure and",
    "start": "242480",
    "end": "247680"
  },
  {
    "text": "then finally at the end we're going to look at a topic that many many people have been asking about",
    "start": "247680",
    "end": "252799"
  },
  {
    "text": "and looking looking for is how to um bind access tokens to the client so",
    "start": "252799",
    "end": "259359"
  },
  {
    "text": "that if in case they are leaking on the wire or in log files or wherever someone that you know finds these tokens",
    "start": "259359",
    "end": "266479"
  },
  {
    "text": "or an attacker cannot simply replay them and that is called proof of possession so let's have a look",
    "start": "266479",
    "end": "271759"
  },
  {
    "text": "at those things okay cool um if there are any questions i will look",
    "start": "271759",
    "end": "277280"
  },
  {
    "text": "at the slack channel afterwards and we can also afterwards voice if you want to uh as i said i have",
    "start": "277280",
    "end": "282960"
  },
  {
    "text": "a lot of material so i probably don't have the time to you know answer questions in between but",
    "start": "282960",
    "end": "288160"
  },
  {
    "text": "ping me afterwards i'll be around uh and and answer any question you have",
    "start": "288160",
    "end": "293600"
  },
  {
    "text": "okay let's get started so o of 2.1 um as i said 2.1 is a revision",
    "start": "293600",
    "end": "300639"
  },
  {
    "text": "of the o of 2.0 spec funnily enough i think what they're doing is exactly reverse",
    "start": "300639",
    "end": "306320"
  },
  {
    "text": "semantic versioning so you know in normal semantic versioning you would just add stuff and don't change existing stuff or even remove things",
    "start": "306320",
    "end": "314240"
  },
  {
    "text": "from a library and they're doing exactly the opposite they are not introducing any new features but they are removing",
    "start": "314240",
    "end": "320400"
  },
  {
    "text": "existing ones so let's have a look what they are actually removing um the next thing they do with of 2.1 is",
    "start": "320400",
    "end": "327199"
  },
  {
    "start": "324000",
    "end": "324000"
  },
  {
    "text": "basically consolidating a whole number of different documents that have been um in the works",
    "start": "327199",
    "end": "333199"
  },
  {
    "text": "for quite a while called bcps or best current practices so there's one for native apps and one for",
    "start": "333199",
    "end": "339520"
  },
  {
    "text": "browser-based apps and one for json web tokens and so on and they're basically consolidating all of these that guidance in these",
    "start": "339520",
    "end": "346639"
  },
  {
    "text": "documents along with the updated protocol you know uh",
    "start": "346639",
    "end": "352400"
  },
  {
    "text": "restrictions into a new cohesive document which they call oauth 2.1 so",
    "start": "352400",
    "end": "360240"
  },
  {
    "start": "359000",
    "end": "359000"
  },
  {
    "text": "um probably the biggest change um that you know many people know about",
    "start": "360240",
    "end": "366240"
  },
  {
    "text": "this is that the so-called implicit flow is now deprecated in oauth the implicit flow was added in",
    "start": "366240",
    "end": "374000"
  },
  {
    "text": "2012 now nine years ago to overcome limitations of browsers around doing",
    "start": "374000",
    "end": "379680"
  },
  {
    "text": "cross-origin uh communication with ajax so they found or were looking for a hack if you like how",
    "start": "379680",
    "end": "387199"
  },
  {
    "text": "to transmit tokens across site boundaries and they came up with the url which was by the time",
    "start": "387199",
    "end": "393199"
  },
  {
    "text": "the only solution and everybody knew that this is not really ideal from a security point of view and that there are many caveats apply here and many",
    "start": "393199",
    "end": "400639"
  },
  {
    "text": "yeah you have to think about many things to make this better but by the time this was the only way to",
    "start": "400639",
    "end": "406319"
  },
  {
    "text": "make you know spas work and that was um a high priority so they came up with",
    "start": "406319",
    "end": "411599"
  },
  {
    "text": "this thing called implicit flow so just um to quickly show you how that works basically the the javascript client makes a call",
    "start": "411599",
    "end": "419120"
  },
  {
    "start": "416000",
    "end": "416000"
  },
  {
    "text": "to the authorization server and then instead of the usual back channel communication that is typically",
    "start": "419120",
    "end": "425680"
  },
  {
    "text": "done with um you know server side application for example the authorization server sends back the",
    "start": "425680",
    "end": "431840"
  },
  {
    "text": "token directly in the hash fragment of the url and that has many downsides",
    "start": "431840",
    "end": "438319"
  },
  {
    "start": "432000",
    "end": "432000"
  },
  {
    "text": "things leak in log files and in in in browser history and uh and there are injection attacks",
    "start": "438319",
    "end": "444720"
  },
  {
    "text": "around that so long story short fast forwarding to 2021 this is not needed anymore because we have solved",
    "start": "444720",
    "end": "451440"
  },
  {
    "text": "the cross-origin ajax problem with course yeah and that's a couple of years ago and we have solved to be honest the",
    "start": "451440",
    "end": "458400"
  },
  {
    "text": "original problems that led to the implicit flow which was the limitations around cookies",
    "start": "458400",
    "end": "464400"
  },
  {
    "text": "which are now also um updated with the same side cookie security sandbox if you like so yeah in",
    "start": "464400",
    "end": "472160"
  },
  {
    "text": "long story short the implicit flow is not necessary anymore you are not having a massive security",
    "start": "472160",
    "end": "477520"
  },
  {
    "text": "problem if you implemented it already correctly but it's hard to get it right",
    "start": "477520",
    "end": "483520"
  },
  {
    "text": "so if you have an existing application using it have a look at if you might want to",
    "start": "483520",
    "end": "488720"
  },
  {
    "text": "change that and if you're writing a new one definitely don't use it anymore okay",
    "start": "488720",
    "end": "495199"
  },
  {
    "text": "next thing the next flow that has been removed or deprecated is the so-called",
    "start": "495199",
    "end": "500879"
  },
  {
    "start": "496000",
    "end": "496000"
  },
  {
    "text": "password flow right and the whole idea of instead of collecting",
    "start": "500879",
    "end": "506479"
  },
  {
    "text": "the user credentials on the authorization server instead um in the client application was an",
    "start": "506479",
    "end": "512719"
  },
  {
    "text": "anti-pattern to start with and the spec pointed this out but said like yeah there might be some legacy",
    "start": "512719",
    "end": "518320"
  },
  {
    "text": "reasons you want to do that uh in over 2.1 the password trend is gone okay so from a from a stack point of",
    "start": "518320",
    "end": "526240"
  },
  {
    "text": "view this does not exist anymore it is an empty pattern",
    "start": "526240",
    "end": "531600"
  },
  {
    "text": "if you like users are being educated to typing their passwords in several places instead several times",
    "start": "531600",
    "end": "537839"
  },
  {
    "text": "which you want to avoid this thing is not compatible with modern authentication flows like fido and federation and so on so yeah",
    "start": "537839",
    "end": "545839"
  },
  {
    "text": "it has been removed yeah i know that many of you out there are using it and the main reason they're doing it is for",
    "start": "545839",
    "end": "551760"
  },
  {
    "text": "legacy scenarios where you have existing applications that you simply can't change to use the browser-based flow um",
    "start": "551760",
    "end": "558880"
  },
  {
    "text": "you know i mean there's no over police coming to your door and arresting you if you're doing it still but",
    "start": "558880",
    "end": "564480"
  },
  {
    "text": "it's gone from the spec and you know maybe for good",
    "start": "564480",
    "end": "569680"
  },
  {
    "text": "so um the nice thing about this simplification uh is when you look at",
    "start": "569680",
    "end": "576640"
  },
  {
    "start": "571000",
    "end": "571000"
  },
  {
    "text": "the all the different flows that we used to deal with um for the different types of",
    "start": "576640",
    "end": "581839"
  },
  {
    "text": "applications um some of them are gone yeah implicit and password is gone um some of them have been upgraded the",
    "start": "581839",
    "end": "589600"
  },
  {
    "text": "code flow for example has been upgraded to um provide the same security properties",
    "start": "589600",
    "end": "595519"
  },
  {
    "text": "as the hybrid flow in openid connect which the nice thing is now if you look at that you can really",
    "start": "595519",
    "end": "601519"
  },
  {
    "text": "simplify it basically just saying like if it's a machine to machine style communication",
    "start": "601519",
    "end": "606560"
  },
  {
    "start": "602000",
    "end": "602000"
  },
  {
    "text": "use the oauth client credential flow if it's an interactive application use the code flow with this extra thing",
    "start": "606560",
    "end": "611920"
  },
  {
    "text": "called pixi which i'm going to explain in a second um and that applies to both",
    "start": "611920",
    "end": "617200"
  },
  {
    "text": "o of like pure oauth scenarios as well as openly connect and oauth or openly connect only",
    "start": "617200",
    "end": "623120"
  },
  {
    "text": "scenarios as well so this works for all of them which is good because it simplifies things and",
    "start": "623120",
    "end": "629200"
  },
  {
    "text": "it you know you can focus on these two things make sure you understand these two flows uh which is much easier than trying to",
    "start": "629200",
    "end": "636079"
  },
  {
    "text": "understand seven plus combinations yeah good um what's what's this pixi",
    "start": "636079",
    "end": "642320"
  },
  {
    "start": "641000",
    "end": "641000"
  },
  {
    "text": "thing i just mentioned the pixi is an additional specification an rfc that solves the authorization code",
    "start": "642320",
    "end": "648640"
  },
  {
    "text": "injection attack and um basically the idea is that it adds an additional",
    "start": "648640",
    "end": "654800"
  },
  {
    "text": "secret in the mix which is not statically configured but it's dynamically generated and",
    "start": "655839",
    "end": "661360"
  },
  {
    "text": "the authorization code injection attack the problem here is is that in theory you know the whole idea behind",
    "start": "661360",
    "end": "666640"
  },
  {
    "text": "the code flow is that if an attacker would steal the code it cannot redeem the code because it's missing the client secret",
    "start": "666640",
    "end": "672800"
  },
  {
    "text": "um but this is not always true because some applications don't have client secrets right like",
    "start": "672800",
    "end": "677920"
  },
  {
    "text": "native apps for example and still what the attacker still can do is take the stolen code and inject it into",
    "start": "677920",
    "end": "684160"
  },
  {
    "text": "the legitimate application and make the application redeem the authorization code yeah so",
    "start": "684160",
    "end": "690240"
  },
  {
    "text": "to prove you know to to mitigate this problem um uh pixie was created",
    "start": "690240",
    "end": "697120"
  },
  {
    "start": "696000",
    "end": "696000"
  },
  {
    "text": "you know and that's not new actually um which basically says okay you add an",
    "start": "697120",
    "end": "702640"
  },
  {
    "text": "additional secret as i said to the to the mix which is called the the code challenge which is a hash of a secret",
    "start": "702640",
    "end": "709440"
  },
  {
    "text": "and then on the back channel basically you send the clear text secret and then what the server can do is",
    "start": "709440",
    "end": "715200"
  },
  {
    "text": "compare the hashed secret with the hash of your cleartext secret and if they match you have proven that you are the same",
    "start": "715200",
    "end": "721360"
  },
  {
    "text": "client on the front and the back channel yeah and that prevents basically uh injection attacks where you would use",
    "start": "721360",
    "end": "728639"
  },
  {
    "text": "a different client instance for the front and the back channel and you know that is very effective and very easy to implement because",
    "start": "728639",
    "end": "734959"
  },
  {
    "text": "all you need to do is add this random number hash to your front channel and problem solved",
    "start": "734959",
    "end": "741279"
  },
  {
    "text": "okay so one of the things that of 2.1 introduces is is that you must use pixy",
    "start": "741279",
    "end": "747279"
  },
  {
    "text": "if you're using the authorization code flow to prevent this problem and the good news is like aspinat core",
    "start": "747279",
    "end": "753040"
  },
  {
    "text": "for example since version 3 actually has that built in so there's really nothing you need to",
    "start": "753040",
    "end": "758560"
  },
  {
    "text": "do for these scenarios which is good okay and the last thing i",
    "start": "758560",
    "end": "763680"
  },
  {
    "start": "763000",
    "end": "763000"
  },
  {
    "text": "want to point out is is that the next thing that the over 2.1 spec",
    "start": "763680",
    "end": "769040"
  },
  {
    "text": "explicitly hardens if you like is how you should validate your redirect",
    "start": "769040",
    "end": "774639"
  },
  {
    "text": "uri so and the original spec didn't say anything about that and there are you know different ways how",
    "start": "774639",
    "end": "781279"
  },
  {
    "text": "you could could implement this some people use wildcards some people use regular expressions to provide",
    "start": "781279",
    "end": "787440"
  },
  {
    "text": "certain patterns and all of them have been proven wrong over the past years with various attacks that",
    "start": "787440",
    "end": "794880"
  },
  {
    "text": "specifically targeted weaknesses in your uri validation right",
    "start": "794880",
    "end": "800560"
  },
  {
    "text": "um and that is uh both on the you know the dns name side as on the url",
    "start": "800560",
    "end": "805920"
  },
  {
    "text": "you know task site uh facebook github you name them have been hacked with",
    "start": "805920",
    "end": "810959"
  },
  {
    "text": "these uh problems here so the stack is very clear now you need to validate urls",
    "start": "810959",
    "end": "817519"
  },
  {
    "text": "uh as an exact string match no more wildcards nothing else that the strings",
    "start": "817519",
    "end": "823120"
  },
  {
    "text": "must exactly match from what the client sends here with the thing you have on hold in your in your configuration which is a",
    "start": "823120",
    "end": "829920"
  },
  {
    "text": "small change but very important so long story short what over 2.1 really",
    "start": "829920",
    "end": "834959"
  },
  {
    "start": "832000",
    "end": "832000"
  },
  {
    "text": "is it's rfc 6749 it's rfc 6750 which is the bearer token usage",
    "start": "834959",
    "end": "840720"
  },
  {
    "text": "uh blues all of these pcps i mentioned earlier and that together becomes over 2.1 and just to summarize",
    "start": "840720",
    "end": "847760"
  },
  {
    "text": "the changes no more implicit flow no more password flow pixely must be used for",
    "start": "847760",
    "end": "853040"
  },
  {
    "text": "authorization code flow redirect uris must be compared using exact matching",
    "start": "853040",
    "end": "858240"
  },
  {
    "text": "refresh tokens must be either sender constrained with a client secret or rotated on every usage and",
    "start": "858240",
    "end": "866639"
  },
  {
    "text": "tokens must not be sent anymore in query strings okay and so that's basically the",
    "start": "866639",
    "end": "872000"
  },
  {
    "text": "the six um important things they did in over 2.1 so that's uh",
    "start": "872000",
    "end": "878800"
  },
  {
    "text": "the link to the stack it's not done yet but we expect this to to land this year okay",
    "start": "878800",
    "end": "885760"
  },
  {
    "text": "let's move on so um the next thing i want to talk about is a",
    "start": "885760",
    "end": "892079"
  },
  {
    "text": "feature in oauth and in oak money connect which is rarely used yeah so when i look at all of the",
    "start": "892079",
    "end": "898240"
  },
  {
    "text": "the code reviews i'm doing all the the companies i work with almost no one well or a small percentage",
    "start": "898240",
    "end": "906079"
  },
  {
    "text": "uses this feature and what i what i actually mean is um when we look at well first of all um",
    "start": "906079",
    "end": "913199"
  },
  {
    "start": "911000",
    "end": "911000"
  },
  {
    "text": "many overall systems out there are still using hard coded configuration yeah like urls and key material",
    "start": "913199",
    "end": "919920"
  },
  {
    "text": "and so on um open id connect introduced metadata or what they call the discovery endpoint and this was back",
    "start": "919920",
    "end": "926959"
  },
  {
    "text": "ported um to oauth as well so um there's an oauth metadata or",
    "start": "926959",
    "end": "934240"
  },
  {
    "text": "discovery specification and the one i want to particularly talk about is um is this thing called the jwks",
    "start": "934240",
    "end": "942639"
  },
  {
    "text": "uri and what this brings you to is a json document that describes the key",
    "start": "942639",
    "end": "948240"
  },
  {
    "text": "material that you can use to validate tokens that are being issued by this",
    "start": "948240",
    "end": "954079"
  },
  {
    "text": "authorization server and um you know what you're seeing here on the screen is a public key it's an rsa key",
    "start": "954079",
    "end": "961680"
  },
  {
    "text": "this authorization server has the private key to it then the authorization server would um",
    "start": "961680",
    "end": "968000"
  },
  {
    "text": "sign the token with the private key you can use the public key to um to uh to validate the token right",
    "start": "968000",
    "end": "975759"
  },
  {
    "text": "um no need to hard code these things on the server you can discover them",
    "start": "975759",
    "end": "980800"
  },
  {
    "text": "dynamically at runtime but even better as you can see um this is all",
    "start": "980800",
    "end": "986079"
  },
  {
    "text": "uh designed around the notion that you can rotate those keys there you know like many installations i see if they create",
    "start": "986079",
    "end": "993120"
  },
  {
    "text": "a key pair at installation time and then run for it run with it for many many years yeah as you can see that specifically it's a",
    "start": "993120",
    "end": "999920"
  },
  {
    "text": "keys um entry and it's an it's an array yeah so the whole format is",
    "start": "999920",
    "end": "1007279"
  },
  {
    "text": "designed to have more than one key and being able to rotate your keys periodically also the other",
    "start": "1007279",
    "end": "1015040"
  },
  {
    "text": "thing i want to highlight here is is that you have crypto agility by specifying",
    "start": "1015040",
    "end": "1020399"
  },
  {
    "text": "um which assigning algorithm you are using and you can again have more keys",
    "start": "1020399",
    "end": "1025438"
  },
  {
    "text": "with different signing algorithms yeah so long story short the spec explicitly is prepared for you",
    "start": "1025439",
    "end": "1034400"
  },
  {
    "start": "1033000",
    "end": "1033000"
  },
  {
    "text": "to rotate your keys and that can be completely automated yeah and it's a good crypto hygiene",
    "start": "1034400",
    "end": "1041520"
  },
  {
    "text": "to periodically get a new key throw away the old one and while there are no golden rules how",
    "start": "1041520",
    "end": "1049200"
  },
  {
    "text": "often you should do that um i think since you know let's encrypt exists they show that it's totally",
    "start": "1049200",
    "end": "1056720"
  },
  {
    "text": "possible to to rotate keys even even x 509 certificates which people you know",
    "start": "1056720",
    "end": "1062640"
  },
  {
    "text": "never tried to touch anymore after they got them to rotate them for example every three",
    "start": "1062640",
    "end": "1067760"
  },
  {
    "text": "months yeah um so that's one thing yeah um",
    "start": "1067760",
    "end": "1072799"
  },
  {
    "text": "you should rotate your keys um you should keep or typically you want to keep a history",
    "start": "1072799",
    "end": "1078320"
  },
  {
    "text": "of at least the previous key so that you know at the time of rotating that your old access tokens still",
    "start": "1078320",
    "end": "1084160"
  },
  {
    "text": "validate the ones that are still valid um and then once you know depending on how",
    "start": "1084160",
    "end": "1089280"
  },
  {
    "text": "how old your access tokens can get you can get rid of the old keys at some point the next thing i want to",
    "start": "1089280",
    "end": "1094720"
  },
  {
    "text": "point you to is that our rsa even if it's used everywhere today is not the only signing algorithm",
    "start": "1094720",
    "end": "1101440"
  },
  {
    "text": "that that you can use yeah um open id connect or off uh",
    "start": "1101440",
    "end": "1106640"
  },
  {
    "text": "well at least openly connect mandate that you have to support rsa or rs256 which",
    "start": "1106640",
    "end": "1114480"
  },
  {
    "text": "stands for rsa with sha256 um but newer specs like the open banking",
    "start": "1114480",
    "end": "1121520"
  },
  {
    "text": "or psd2 spec they require ps256 which is an updated version of that which basically",
    "start": "1121520",
    "end": "1129280"
  },
  {
    "text": "you know the idea that um with rsa if you sign the same piece of data multiple times the",
    "start": "1129280",
    "end": "1135120"
  },
  {
    "text": "signature will always be the same but with ps uh the signature will look different every single time which gives",
    "start": "1135120",
    "end": "1140960"
  },
  {
    "text": "you know a crypto analyst less data to work with so that's why this is a better more secure algorithm um you know",
    "start": "1140960",
    "end": "1148160"
  },
  {
    "text": "standards in the healthcare sector require things like um elliptic curve based algorithms for example",
    "start": "1148160",
    "end": "1154160"
  },
  {
    "text": "so you know long story short you can do all these things um but you should you know you have to",
    "start": "1154160",
    "end": "1159760"
  },
  {
    "text": "do it basically let me quickly show you how that looks like um in",
    "start": "1159760",
    "end": "1165280"
  },
  {
    "text": "in in identity server right so if you have um an over of authorization but that",
    "start": "1165280",
    "end": "1170799"
  },
  {
    "text": "supports these features well in our case all you need to do basically is you have to tell us this is how often we want to rotate our",
    "start": "1170799",
    "end": "1177120"
  },
  {
    "text": "keys this is how long before we switch to the new key we want to",
    "start": "1177120",
    "end": "1182160"
  },
  {
    "text": "announce that new key so that clients can learn about it and this is how long we want to",
    "start": "1182160",
    "end": "1187280"
  },
  {
    "text": "keep old keys so that old access tokens will still validate after we made the switch to the to the",
    "start": "1187280",
    "end": "1195039"
  },
  {
    "text": "new key okay um the other thing i wanna um show you is that you can basically",
    "start": "1195039",
    "end": "1201600"
  },
  {
    "text": "just say okay and by the way we wanna offer these algorithms so that",
    "start": "1201600",
    "end": "1206640"
  },
  {
    "text": "clients you know you can on a per client or on a per api basis configure which",
    "start": "1206640",
    "end": "1213280"
  },
  {
    "text": "assigning algorithm you want to use right and the thing is that you you often cannot migrate your system in",
    "start": "1213280",
    "end": "1219280"
  },
  {
    "text": "one go so maybe some of your applications stay on this because they have to but newer apis or newer clients might want",
    "start": "1219280",
    "end": "1226320"
  },
  {
    "text": "to upgrade to these newer algorithms okay so if i run this",
    "start": "1226320",
    "end": "1232399"
  },
  {
    "text": "um let's go here",
    "start": "1232840",
    "end": "1237279"
  },
  {
    "text": "you see that he has a keys folder so by default in development mode we just saw the keys on the file system",
    "start": "1239760",
    "end": "1246799"
  },
  {
    "text": "but basically the very first time you run the server uh you don't have any keys and then",
    "start": "1246799",
    "end": "1253840"
  },
  {
    "text": "when we hit the discovery endpoint there's a short delay that that is used for synchronizing in a",
    "start": "1253840",
    "end": "1259840"
  },
  {
    "text": "web farm but then suddenly something will happen and if we'll have",
    "start": "1259840",
    "end": "1265600"
  },
  {
    "text": "a look here you will see now that there are three keys being created and if we look at here you see that we",
    "start": "1265600",
    "end": "1271679"
  },
  {
    "text": "indeed have three keys now yeah and each of them have a different signing algorithm and each of them",
    "start": "1271679",
    "end": "1277440"
  },
  {
    "text": "are now rotated um um periodically basically",
    "start": "1277440",
    "end": "1283679"
  },
  {
    "text": "so that's fully automated and that's how it should be you never ever again want to shut down your server just to",
    "start": "1283679",
    "end": "1289440"
  },
  {
    "text": "update your key material right so yeah so that's that good",
    "start": "1289440",
    "end": "1295840"
  },
  {
    "text": "what's next so the next thing i want to talk about is basically the chop profile for oauth",
    "start": "1295840",
    "end": "1301600"
  },
  {
    "text": "access token as i said it's quite funny that the industry has been using json web tokens for many many",
    "start": "1301600",
    "end": "1306799"
  },
  {
    "text": "years now but no one you know there was never a standard it just happened right because it was just",
    "start": "1306799",
    "end": "1312400"
  },
  {
    "text": "an easy to use format so um if you look at the overall spec right the overspecs has nothing",
    "start": "1312400",
    "end": "1318000"
  },
  {
    "start": "1315000",
    "end": "1315000"
  },
  {
    "text": "about access tokens yeah all the only example they give you is that that's how an access token looks like right and",
    "start": "1318000",
    "end": "1323679"
  },
  {
    "text": "probably the guy that wrote this back just hit the his head on the keyboard here and that that's the access token yeah um",
    "start": "1323679",
    "end": "1331120"
  },
  {
    "text": "but uh charts are so convenient to use right because they are self-contained they have good",
    "start": "1331120",
    "end": "1337440"
  },
  {
    "start": "1332000",
    "end": "1332000"
  },
  {
    "text": "library support so that's what just happened right um",
    "start": "1337440",
    "end": "1343760"
  },
  {
    "text": "now the problem with with that is is that there was no standard yeah and so whereas in open id",
    "start": "1343760",
    "end": "1348880"
  },
  {
    "text": "connect the standard was very explicit how um how an identity token must look like",
    "start": "1348880",
    "end": "1353919"
  },
  {
    "text": "in o of access tokens are complete you know freestyle yeah it doesn't help that the shot spec",
    "start": "1353919",
    "end": "1360480"
  },
  {
    "start": "1358000",
    "end": "1358000"
  },
  {
    "text": "itself makes all the claims optional yeah um so yeah",
    "start": "1360480",
    "end": "1365760"
  },
  {
    "text": "that's that's another thing um so what we learned is basically um we need or it would be good to have a",
    "start": "1365760",
    "end": "1372640"
  },
  {
    "start": "1369000",
    "end": "1369000"
  },
  {
    "text": "standard way how to convey user and client identity it would be good to have a standard way how to",
    "start": "1372640",
    "end": "1378400"
  },
  {
    "text": "communicate uh lifetimes or or valid time windows yeah so to speak um it",
    "start": "1378400",
    "end": "1385679"
  },
  {
    "text": "would be a good way to to have a standard um a standard format for conveying the scopes",
    "start": "1385679",
    "end": "1392400"
  },
  {
    "text": "um the user granted to the client in the access token um and we uh actually finally enough",
    "start": "1392400",
    "end": "1400159"
  },
  {
    "text": "found some interesting problems that just arose because shots became so successful and they are called um",
    "start": "1400159",
    "end": "1406960"
  },
  {
    "text": "crosstalk confusion uh vulnerabilities or substitution attacks and i'll show that in a second as well so um just to",
    "start": "1406960",
    "end": "1414960"
  },
  {
    "text": "briefly walk through what the the new chat profile for oauth",
    "start": "1414960",
    "end": "1420480"
  },
  {
    "text": "suggests is um first of all the usage of the client id claim",
    "start": "1420480",
    "end": "1427120"
  },
  {
    "text": "which always will identify the o of client id and the usage of the suv the subject",
    "start": "1427120",
    "end": "1432960"
  },
  {
    "text": "identifier claim as well now this here is a bit polarizing i guess but what they",
    "start": "1432960",
    "end": "1440880"
  },
  {
    "text": "describe in the spec is if a user is present the subject identifier is the user id as defined in openmd connect",
    "start": "1440880",
    "end": "1447919"
  },
  {
    "text": "if it's a pure machine to machine communication flow the subject id is the client id",
    "start": "1447919",
    "end": "1454320"
  },
  {
    "text": "okay and what i don't like about it but that's the way it is is that you know if you have both the",
    "start": "1454320",
    "end": "1459760"
  },
  {
    "text": "client id and the subject id and they are the same there is no human being involved if they",
    "start": "1459760",
    "end": "1465039"
  },
  {
    "text": "are different and one is the client id and one is the user id okay um the other the other required",
    "start": "1465039",
    "end": "1471919"
  },
  {
    "start": "1471000",
    "end": "1471000"
  },
  {
    "text": "claims that are now in in that rfc is the issuer claim expiration audience",
    "start": "1471919",
    "end": "1477120"
  },
  {
    "text": "issue that and jti for providing a unique identifier for things like replay attacks yeah so that's basically",
    "start": "1477120",
    "end": "1484720"
  },
  {
    "text": "how one of these tokens could look like you have an issuer an audience an expiration and an issued ad a random id",
    "start": "1484720",
    "end": "1492880"
  },
  {
    "text": "subject id client id and basically um this is the list of scopes that got",
    "start": "1492880",
    "end": "1498799"
  },
  {
    "text": "granted at token issuance times so that the resource that receives the token can do authorization decisions so that's",
    "start": "1498799",
    "end": "1506559"
  },
  {
    "text": "how that would look like and you know to be honest many authorization servers",
    "start": "1506559",
    "end": "1512320"
  },
  {
    "text": "came you know were developed in the past they might they might have used slightly different formats we used slightly",
    "start": "1512320",
    "end": "1519279"
  },
  {
    "text": "different formats as well but we now have um config settings to basically toggle between the old and the new style",
    "start": "1519279",
    "end": "1525760"
  },
  {
    "text": "so it will take quite some time until they harmonize and if they ever will so to speak yeah but",
    "start": "1525760",
    "end": "1531279"
  },
  {
    "text": "at least this document gives you now a common language so to speak in at least knowing how a shot you know",
    "start": "1531279",
    "end": "1537600"
  },
  {
    "text": "should look like okay so the other interesting thing is is that you know shots are so",
    "start": "1537600",
    "end": "1545760"
  },
  {
    "start": "1541000",
    "end": "1541000"
  },
  {
    "text": "so ubiquitous now yeah you know since they're so easy to create and so easy to transmit and so on",
    "start": "1545760",
    "end": "1551679"
  },
  {
    "text": "that people started using jobs for all kinds of purposes yeah for example for access",
    "start": "1551679",
    "end": "1557039"
  },
  {
    "text": "tokens for identity tokens for logout tokens and for all kinds of custom token types",
    "start": "1557039",
    "end": "1562320"
  },
  {
    "text": "and we realized huh they look so similar so that if you are not careful enough",
    "start": "1562320",
    "end": "1567679"
  },
  {
    "text": "you might confuse one type of chart with another type of chart okay and that's uh what is called cross",
    "start": "1567679",
    "end": "1575360"
  },
  {
    "text": "chart confusion so for example if you look at the validation procedures for a logout token right i mean the",
    "start": "1575360",
    "end": "1581200"
  },
  {
    "text": "the most parts look very normal right validate this what are they dead and so on but then they say like um um verify that",
    "start": "1581200",
    "end": "1588559"
  },
  {
    "text": "it does not contain a nonce claim why well because if if there is a nonce claim in",
    "start": "1588559",
    "end": "1594400"
  },
  {
    "text": "it it would be indistinguishable from an identity token yeah and now there's confusion right so",
    "start": "1594400",
    "end": "1601200"
  },
  {
    "text": "long story short i think one of the the best things ever is that they introduced strongly typed charts and that means",
    "start": "1601200",
    "end": "1608400"
  },
  {
    "start": "1604000",
    "end": "1604000"
  },
  {
    "text": "that the type claim or the type field in the header now has a value saying like hey",
    "start": "1608400",
    "end": "1613600"
  },
  {
    "text": "i am an access token so that stands for at access token plus jwt and it's roughly um you know like",
    "start": "1613600",
    "end": "1620640"
  },
  {
    "text": "it's it's inspired by media types in in http okay so now what you should do in the",
    "start": "1620640",
    "end": "1627120"
  },
  {
    "text": "future is when you receive when you are an api and you receive a json web token you should make sure that if you know if",
    "start": "1627120",
    "end": "1633600"
  },
  {
    "text": "your token service supports this that the type header has the word a t plus jwt in it to make",
    "start": "1633600",
    "end": "1640240"
  },
  {
    "text": "sure it is actually an access token cool next thing",
    "start": "1640240",
    "end": "1645600"
  },
  {
    "text": "resource isolation that's a big topic yeah um especially when when you have bigger",
    "start": "1645600",
    "end": "1652640"
  },
  {
    "text": "bigger api services and bigger systems yeah so you know that over uh you know obvious nine years old",
    "start": "1652640",
    "end": "1660240"
  },
  {
    "start": "1658000",
    "end": "1658000"
  },
  {
    "text": "now yeah and uh it you know it it couldn't foresee that it was",
    "start": "1660240",
    "end": "1666240"
  },
  {
    "text": "actually being used in these in these diverse environments yeah so they look for an easy way for a client",
    "start": "1666240",
    "end": "1672880"
  },
  {
    "text": "to express what it wants to access yeah so they introduced this scope parameter and basically you know",
    "start": "1672880",
    "end": "1680480"
  },
  {
    "text": "and i i copied the original text from the stack here um and as always the spec is very",
    "start": "1680480",
    "end": "1687440"
  },
  {
    "text": "relaxed about this yeah it says it's uh something that's specifies the scope of access yeah",
    "start": "1687440",
    "end": "1693760"
  },
  {
    "text": "it's a space delimited list um the more basically the more values are on there the more",
    "start": "1693760",
    "end": "1700320"
  },
  {
    "text": "things you are requesting yeah and also the server may fully or partially you can always go bright",
    "start": "1700320",
    "end": "1706640"
  },
  {
    "text": "because well why not um now",
    "start": "1706640",
    "end": "1711840"
  },
  {
    "text": "there are many ways to model these scopes right because the spec itself doesn't give you anything yeah right it",
    "start": "1713039",
    "end": "1719440"
  },
  {
    "start": "1714000",
    "end": "1714000"
  },
  {
    "text": "just says here's the scope parameter put some random stuff on it yeah so you have basically have to come up with okay",
    "start": "1719440",
    "end": "1726399"
  },
  {
    "text": "so here are the things that a client can access in my organization and now let's give them names right and",
    "start": "1726399",
    "end": "1732880"
  },
  {
    "text": "then once they have names we can start doing some access control maybe which client can access what or we can use",
    "start": "1732880",
    "end": "1739360"
  },
  {
    "text": "them to populate consent screens things like this right so you know just as an example that's",
    "start": "1739360",
    "end": "1744799"
  },
  {
    "text": "how github structures or an excerpt of their scope surface right so they have things",
    "start": "1744799",
    "end": "1751279"
  },
  {
    "text": "like repo the reposco gives you access to repos right the user scope gives you access to user",
    "start": "1751279",
    "end": "1756559"
  },
  {
    "text": "data the packages scope gives you access to the package feed but also they have to subdivide their",
    "start": "1756559",
    "end": "1761840"
  },
  {
    "text": "scopes right because things like write packages read packages delete packages",
    "start": "1761840",
    "end": "1767760"
  },
  {
    "text": "because you want finer granularity right and and they came up with this",
    "start": "1767760",
    "end": "1774880"
  },
  {
    "text": "colon delimiter and as you can see older versions it seems used underscores for example",
    "start": "1774880",
    "end": "1780480"
  },
  {
    "text": "yeah um but yeah so everyone that ever designed",
    "start": "1780480",
    "end": "1785679"
  },
  {
    "text": "an oauth based system is that you end up with many many scopes right and then you pass along these long",
    "start": "1785679",
    "end": "1791039"
  },
  {
    "text": "strings and the more that the more things a client has access to the longer the scope parameter gets right and if",
    "start": "1791039",
    "end": "1798799"
  },
  {
    "text": "the and if the client um you know has access to many things these tokens become super powerful right",
    "start": "1798799",
    "end": "1805760"
  },
  {
    "text": "because now they can access many things and if they leak well whoever gets the token has",
    "start": "1805760",
    "end": "1811360"
  },
  {
    "text": "access to many things right and if you look at an even bigger api surface for example with google right",
    "start": "1811360",
    "end": "1819039"
  },
  {
    "start": "1815000",
    "end": "1815000"
  },
  {
    "text": "they have you can imagine completely different apis that are built by completely different teams",
    "start": "1819039",
    "end": "1824880"
  },
  {
    "text": "and um which are totally independent of each other and they used a similar concept right they had some",
    "start": "1824880",
    "end": "1831120"
  },
  {
    "text": "they introduced namespaces of their scope names yeah this time they used urls right so you",
    "start": "1831120",
    "end": "1836640"
  },
  {
    "text": "can imagine the bigquery api is written by someone completely different than the gmail api",
    "start": "1836640",
    "end": "1842159"
  },
  {
    "text": "so you know again um you look up their documentation you figure out okay what is this",
    "start": "1842159",
    "end": "1847600"
  },
  {
    "text": "string i have to put on the scope parameter um and that's what the client gets access to if the client is authorized",
    "start": "1847600",
    "end": "1854399"
  },
  {
    "text": "of course um as i said this is a simple system and if your if",
    "start": "1854399",
    "end": "1860960"
  },
  {
    "text": "your application space is is small enough easy to handle but as i said you",
    "start": "1860960",
    "end": "1867600"
  },
  {
    "text": "probably know that the bigger your surface gets the more stuff you put on",
    "start": "1867600",
    "end": "1872880"
  },
  {
    "text": "this scope parameter now as i said the problems with this um model is is that tokens can become very",
    "start": "1872880",
    "end": "1880000"
  },
  {
    "start": "1876000",
    "end": "1876000"
  },
  {
    "text": "powerful yeah um the other thing is um and you know let's say a client has",
    "start": "1880000",
    "end": "1886559"
  },
  {
    "text": "access to completely different unrelated apis so nothing is stopping that client to ask",
    "start": "1886559",
    "end": "1892880"
  },
  {
    "text": "for all of the scopes right and they end up all in the same token even if this token you know or even if",
    "start": "1892880",
    "end": "1898960"
  },
  {
    "text": "the scopes are unrelated what if you want to put um api specific data in the access token for",
    "start": "1898960",
    "end": "1905360"
  },
  {
    "text": "example now the other api will see that the data of this api and what if they become",
    "start": "1905360",
    "end": "1910799"
  },
  {
    "text": "ambiguous right and um and so on yeah and um another thing is",
    "start": "1910799",
    "end": "1915840"
  },
  {
    "text": "um what if you have multiple apis that use the same scopes yeah so",
    "start": "1915840",
    "end": "1921760"
  },
  {
    "text": "we have a customer uh in the healthcare sector there's a standard product called smart",
    "start": "1921760",
    "end": "1927039"
  },
  {
    "text": "on fire they define standard scopes but what if you now have multiple systems yeah um when you now ask for the patient",
    "start": "1927039",
    "end": "1934720"
  },
  {
    "text": "scope for which system will that scope be for example yeah and if you grant access to",
    "start": "1934720",
    "end": "1940000"
  },
  {
    "text": "both systems there is a certain concern that um system a could now take the access token",
    "start": "1940000",
    "end": "1946240"
  },
  {
    "text": "and talk to system b directly even if they should be in different trust zones right so that's basically here what i'm",
    "start": "1946240",
    "end": "1951600"
  },
  {
    "text": "what i'm showing you here on that um on that slide right um what what if",
    "start": "1951600",
    "end": "1957120"
  },
  {
    "text": "there is a trust boundary between the apis what if all the orders api should not see the",
    "start": "1957120",
    "end": "1962159"
  },
  {
    "text": "data of the invoicing api should the orders api ever be able to call the invoicing api",
    "start": "1962159",
    "end": "1968559"
  },
  {
    "text": "and so on right so long story short um this becomes a bit messy the more scopes",
    "start": "1968559",
    "end": "1974240"
  },
  {
    "text": "you have um the more complicated it becomes and",
    "start": "1974240",
    "end": "1979279"
  },
  {
    "text": "the more powerful your tokens get and there is no way to well unless the",
    "start": "1979279",
    "end": "1984480"
  },
  {
    "text": "client is very disciplined of course yeah to separate them out okay and that is exactly where",
    "start": "1984480",
    "end": "1991440"
  },
  {
    "start": "1991000",
    "end": "1991000"
  },
  {
    "text": "resource indicators come in that's a an rfc rlc8707 um it introduces um",
    "start": "1991440",
    "end": "1998960"
  },
  {
    "text": "a new request parameter uh called resource and what the resource indicates is is",
    "start": "1998960",
    "end": "2005279"
  },
  {
    "text": "that you can in in addition to just specifying the logical scope names you can also specify",
    "start": "2005279",
    "end": "2012320"
  },
  {
    "text": "physical or logical resource names in which context this scope would be used okay",
    "start": "2012320",
    "end": "2019440"
  },
  {
    "text": "um so how is this useful well basically what it what it allows us to do is is to",
    "start": "2019440",
    "end": "2026399"
  },
  {
    "text": "still do a single front channel request to an authorization server but say like let's give me access to two resources",
    "start": "2026399",
    "end": "2033120"
  },
  {
    "text": "and the ultimate result will be two separate access tokens one for resource one",
    "start": "2033120",
    "end": "2038159"
  },
  {
    "text": "and one for resource two which solves many problems right one is that the tokens get",
    "start": "2038159",
    "end": "2043519"
  },
  {
    "text": "less powerful you can have resource specific processing like for example encryption or claims",
    "start": "2043519",
    "end": "2049358"
  },
  {
    "text": "in that token and obviously since the resources are separated out",
    "start": "2049359",
    "end": "2054480"
  },
  {
    "text": "there is no you know resource calling another resource problem because",
    "start": "2054480",
    "end": "2060560"
  },
  {
    "text": "the token from resource one would not be good at resource two okay so that's basically what what this spec",
    "start": "2060560",
    "end": "2066960"
  },
  {
    "text": "tries to achieve um this is this is not for everyone right but if you feel the pain of a large api",
    "start": "2066960",
    "end": "2073200"
  },
  {
    "text": "service and you would keep things more separate yeah then this is exactly for you",
    "start": "2073200",
    "end": "2079280"
  },
  {
    "text": "so how does it work well basically um the resource parameter is an",
    "start": "2079280",
    "end": "2085118"
  },
  {
    "start": "2080000",
    "end": "2080000"
  },
  {
    "text": "additional parameter on the authorize request yeah so in this case you see that basically we're doing a standard",
    "start": "2085119",
    "end": "2090638"
  },
  {
    "text": "authorized request but we are saying we are indicating that we want an access token",
    "start": "2090639",
    "end": "2096480"
  },
  {
    "text": "for invoice api.com and another access token for customer api.com so we want two",
    "start": "2096480",
    "end": "2103119"
  },
  {
    "text": "separate access tokens so they they are separate from each other um",
    "start": "2103119",
    "end": "2108480"
  },
  {
    "text": "now how does that work well um what you will get back is an authorization code just as normal",
    "start": "2108480",
    "end": "2114800"
  },
  {
    "start": "2112000",
    "end": "2112000"
  },
  {
    "text": "right and then when you redeem the authorization code you say okay and now give me back",
    "start": "2114800",
    "end": "2120640"
  },
  {
    "text": "a token for invoiceapi.com and the access token that will come back",
    "start": "2120640",
    "end": "2126720"
  },
  {
    "text": "from that token request will have the audience set to the resource name which means this",
    "start": "2126720",
    "end": "2133680"
  },
  {
    "text": "token can only be used at invoiceapi.com so now the question is how do i now get the",
    "start": "2133680",
    "end": "2140079"
  },
  {
    "text": "other access token right and the way this works is basically what you also get back",
    "start": "2140079",
    "end": "2145440"
  },
  {
    "text": "is a refresh token so if you now want access to um the order api i think it was called",
    "start": "2145440",
    "end": "2152560"
  },
  {
    "text": "to use the refresh token hand in the refresh or sorry customer api hand in the refresh token",
    "start": "2152560",
    "end": "2158720"
  },
  {
    "start": "2155000",
    "end": "2155000"
  },
  {
    "text": "indicate now that now you want an access token for the customer api and then this will return an an access",
    "start": "2158720",
    "end": "2166320"
  },
  {
    "text": "token that is that which audience is now the customer api okay so ultimately what you end up",
    "start": "2166320",
    "end": "2174000"
  },
  {
    "text": "with is uh well free tokens if you like yeah uh one refresh token that will allow you to",
    "start": "2174000",
    "end": "2179359"
  },
  {
    "text": "get all the others and one token for the api for the customer one and one for the orders",
    "start": "2179359",
    "end": "2184560"
  },
  {
    "text": "yeah and then the client manages these independently and then uses the",
    "start": "2184560",
    "end": "2190640"
  },
  {
    "text": "corresponding access token to call the right api and that as i said allows",
    "start": "2190640",
    "end": "2195680"
  },
  {
    "text": "you to put customer api specific stuff in here to do customer api specific processing",
    "start": "2195680",
    "end": "2202000"
  },
  {
    "text": "and as i said customer the customer api will not be allowed or cannot call the orders api and if you",
    "start": "2202000",
    "end": "2208720"
  },
  {
    "text": "are leaking this token you're only leaking it for one api and not for all the apis which are included",
    "start": "2208720",
    "end": "2215440"
  },
  {
    "text": "okay so again let me show you um a demo of that so the way this works um",
    "start": "2215440",
    "end": "2223760"
  },
  {
    "text": "in identity server is basically when you go to your configuration and you're doing your",
    "start": "2223760",
    "end": "2229200"
  },
  {
    "text": "resource definitions yeah um let's scroll up a little bit um",
    "start": "2229200",
    "end": "2235520"
  },
  {
    "text": "here here are my resource definitions yeah you you know you basically give them",
    "start": "2235520",
    "end": "2240960"
  },
  {
    "text": "give those resources names and these are the names you would use for the resource parameter",
    "start": "2240960",
    "end": "2246400"
  },
  {
    "text": "and for these two you basically say you know you can use the resource parameter if",
    "start": "2246400",
    "end": "2252240"
  },
  {
    "text": "you want to be a well-behaved client but here that's the new thing is",
    "start": "2252240",
    "end": "2257359"
  },
  {
    "text": "we can also say require resource indicator and now",
    "start": "2257359",
    "end": "2262560"
  },
  {
    "text": "you can only get an access token for this resource if you specifically use the resource",
    "start": "2262560",
    "end": "2269280"
  },
  {
    "text": "uh parameter which in other words means that what this resource is expressing here is i want my own access token i don't want",
    "start": "2269280",
    "end": "2277040"
  },
  {
    "text": "to share my access token with anyone else okay that's basically what this is um",
    "start": "2277040",
    "end": "2282160"
  },
  {
    "text": "whatever this is saying so um i have a little test client here that i'm using",
    "start": "2282160",
    "end": "2287520"
  },
  {
    "text": "to you know to to walk through um these scenarios so let me quickly show",
    "start": "2287520",
    "end": "2292560"
  },
  {
    "text": "you that um you know i can do many things here but let's let's just stay with the example",
    "start": "2292560",
    "end": "2299359"
  },
  {
    "text": "we had um on the slides so basically i wanna ask for uh four scopes yeah for um",
    "start": "2299359",
    "end": "2307359"
  },
  {
    "text": "scope one and two of resource three and for scope one and two of resource four",
    "start": "2307359",
    "end": "2313599"
  },
  {
    "text": "okay so if i would not use the resource indicators i would get a single token which had",
    "start": "2313599",
    "end": "2318800"
  },
  {
    "text": "all the scopes for both resources but in addition i am using the resource parameter select and by the way i want",
    "start": "2318800",
    "end": "2325520"
  },
  {
    "text": "two axis tokens one for resource free and one for resource four okay so let's do that um so that",
    "start": "2325520",
    "end": "2333200"
  },
  {
    "text": "will open my front channel i'm i need to authenticate",
    "start": "2333200",
    "end": "2340560"
  },
  {
    "text": "okay and that will well go away",
    "start": "2340560",
    "end": "2347920"
  },
  {
    "text": "just give me back an access token so now you can still redeem the code without",
    "start": "2347920",
    "end": "2354400"
  },
  {
    "text": "specifying the resource otherwise we would break every single client library out there right if we would not accept this",
    "start": "2354400",
    "end": "2361040"
  },
  {
    "text": "anymore but as you can see the access token you get back without specifying the resource",
    "start": "2361040",
    "end": "2366880"
  },
  {
    "text": "does not not have an audience claim okay so if you now would take this access token send it to an api it does the",
    "start": "2366880",
    "end": "2372880"
  },
  {
    "text": "audience check for resource 3 or resource 4. it would fail because this is basically an access token",
    "start": "2372880",
    "end": "2378560"
  },
  {
    "text": "without audience but still you need to do it like this because there are scopes here for example which",
    "start": "2378560",
    "end": "2384560"
  },
  {
    "text": "are not resource bound like the open id scope for example right which which is coming from open",
    "start": "2384560",
    "end": "2389920"
  },
  {
    "text": "connect cool so now we have the refresh token and now we can say that okay now",
    "start": "2389920",
    "end": "2395119"
  },
  {
    "text": "give me a token for resource free right so i'm going to press a c now",
    "start": "2395119",
    "end": "2400640"
  },
  {
    "text": "okay and you see what you're getting back is now an access token which has an audience value of resource free",
    "start": "2400640",
    "end": "2407359"
  },
  {
    "text": "and only includes the two scopes for resource three okay so now this this",
    "start": "2407359",
    "end": "2414079"
  },
  {
    "text": "would be a resource free specific token and now i can do the same thing with resource four",
    "start": "2414079",
    "end": "2420160"
  },
  {
    "text": "so i press d right this time i'm getting a token that has the audience of resource four and only",
    "start": "2420160",
    "end": "2425920"
  },
  {
    "text": "the scopes that belong to resource four so what we have what we achieved in essence",
    "start": "2425920",
    "end": "2431520"
  },
  {
    "text": "is we now have two access tokens for the two resources that we asked for in the first place and they are",
    "start": "2431520",
    "end": "2437200"
  },
  {
    "text": "properly separated okay cool so that's that",
    "start": "2437200",
    "end": "2444960"
  },
  {
    "text": "cool so the next thing i want to talk about is two new standards one is",
    "start": "2446480",
    "end": "2454000"
  },
  {
    "text": "in the last stages of being published and the one the the second one is uh very soon to be",
    "start": "2454000",
    "end": "2460240"
  },
  {
    "text": "published and they care about uh uh strengthening your front channel",
    "start": "2460240",
    "end": "2466000"
  },
  {
    "text": "right what what happens in the browser so as we all know the browser is the weakest link in the",
    "start": "2466000",
    "end": "2471200"
  },
  {
    "text": "chain so you know normally what we do is um we we send this um",
    "start": "2471200",
    "end": "2477119"
  },
  {
    "text": "list of parameters to our authorized endpoint and there is a certain potential for confusion if an attacker can on the",
    "start": "2477119",
    "end": "2484720"
  },
  {
    "text": "fly either read them or manipulate them",
    "start": "2484720",
    "end": "2490000"
  },
  {
    "text": "for example yeah um so you know um and many",
    "start": "2490000",
    "end": "2496880"
  },
  {
    "text": "security researchers have criticized that there are so many parameters here that an implementation that validates",
    "start": "2496880",
    "end": "2503599"
  },
  {
    "text": "all of that must be very you know very s uh battle tested right",
    "start": "2503599",
    "end": "2508720"
  },
  {
    "text": "because you can play around with all of these things yeah so what the job secured authorization request",
    "start": "2508720",
    "end": "2514720"
  },
  {
    "text": "basically proposes is instead of transmitting all of these parameters in clear text as key value",
    "start": "2514720",
    "end": "2521359"
  },
  {
    "text": "pairs on the query string we just take them and turn them into a",
    "start": "2521359",
    "end": "2526800"
  },
  {
    "text": "json web token and this json web token replaces all of the parameters besides the client id",
    "start": "2526800",
    "end": "2533119"
  },
  {
    "text": "okay so basically we took all the parameters here turned them into a json web token",
    "start": "2533119",
    "end": "2538800"
  },
  {
    "text": "removed the parameters and replaced them with a single one called request and this is the json web token and if we",
    "start": "2538800",
    "end": "2544880"
  },
  {
    "text": "would look at the contents of the json web token it looks like this basically",
    "start": "2544880",
    "end": "2550240"
  },
  {
    "start": "2549000",
    "end": "2549000"
  },
  {
    "text": "it's a it's a json-web token you know with a header and a payload and all the parameters you've just seen like response type and",
    "start": "2550240",
    "end": "2556480"
  },
  {
    "text": "redirect uri and scope and so on they're all now inside the json web token this has a",
    "start": "2556480",
    "end": "2562720"
  },
  {
    "text": "couple of um advantages right a those parameters cannot be manipulated",
    "start": "2562720",
    "end": "2568640"
  },
  {
    "text": "anymore in transit because they are signed yeah um so basically um the authorization term i",
    "start": "2568640",
    "end": "2576880"
  },
  {
    "text": "can trust the contents of this token because you know if the signature is valid we know no one has tampered with these",
    "start": "2576880",
    "end": "2583680"
  },
  {
    "text": "data once the signature has been validated we can authenticate the client",
    "start": "2583680",
    "end": "2590560"
  },
  {
    "text": "on the front channel already right we we don't have to wait until the the back channel communication",
    "start": "2590560",
    "end": "2595839"
  },
  {
    "text": "already on the front channel we can um authenticate the client and request reject",
    "start": "2595839",
    "end": "2600960"
  },
  {
    "text": "unknown signatures right this is a nice um a nice touch here um",
    "start": "2600960",
    "end": "2608480"
  },
  {
    "text": "and um this is uh you know and not too hard to implement",
    "start": "2608480",
    "end": "2615920"
  },
  {
    "text": "way to to basically make your front channel much more secure okay again let me quickly show you",
    "start": "2615920",
    "end": "2623280"
  },
  {
    "text": "how that looks like um in um in identity server here's my where's my",
    "start": "2623280",
    "end": "2630640"
  },
  {
    "text": "char client here's my chalk line and basically what you see is uh",
    "start": "2630640",
    "end": "2636000"
  },
  {
    "text": "instead of using a symmetric key here as a secret we in this case we configured an rsa key",
    "start": "2636000",
    "end": "2642079"
  },
  {
    "text": "and that basically means the client will use the private key of that key to to generate",
    "start": "2642079",
    "end": "2648319"
  },
  {
    "text": "the request parameter and on the front channel when the request comes in we will we will validate it using the",
    "start": "2648319",
    "end": "2653839"
  },
  {
    "text": "public key which is stored on the authorization server and again similar to the require resource",
    "start": "2653839",
    "end": "2659920"
  },
  {
    "text": "indicators we can say require request object meaning for this particular client we only accept",
    "start": "2659920",
    "end": "2665680"
  },
  {
    "text": "requests if the authorized request is signed okay again um pretty simple to set up",
    "start": "2665680",
    "end": "2674800"
  },
  {
    "text": "and just to show you an example how that would look like in mvc which would be probably a typical",
    "start": "2674800",
    "end": "2680880"
  },
  {
    "text": "client right so here's my um mbc client and um",
    "start": "2680880",
    "end": "2687520"
  },
  {
    "text": "microsoft has all the extensibility points that you need to add this feature even if you know by the time they wrote",
    "start": "2687520",
    "end": "2693520"
  },
  {
    "text": "it they didn't you know plan for it explicitly um and you can do that by handling the",
    "start": "2693520",
    "end": "2698800"
  },
  {
    "text": "events of the operating connect handler and there's a class called the odc events class",
    "start": "2698800",
    "end": "2704400"
  },
  {
    "text": "and here you see there's a method called redirect to identity provider this happens that directly before we",
    "start": "2704400",
    "end": "2712319"
  },
  {
    "text": "redirect to our provider and then basically you see that on that context we get the",
    "start": "2712319",
    "end": "2718800"
  },
  {
    "text": "the protocol message that is going to be sent to the authorization server and we're going to sign that protocol",
    "start": "2718800",
    "end": "2724880"
  },
  {
    "text": "message and then we're going to clear the protocol message and add the request parameter here now there's",
    "start": "2724880",
    "end": "2731359"
  },
  {
    "text": "one little thing in in hp core that i you cannot change right now is they require this to be",
    "start": "2731359",
    "end": "2736640"
  },
  {
    "text": "present they will write you arrive but that's not a big deal because it will be ignored by the authorization",
    "start": "2736640",
    "end": "2742000"
  },
  {
    "text": "server once the the request object has been found so in other words if you're sending a request object all",
    "start": "2742000",
    "end": "2749359"
  },
  {
    "text": "only the data inside the request object will be considered for for the request okay",
    "start": "2749359",
    "end": "2756560"
  },
  {
    "text": "so let's run this char here it is",
    "start": "2756560",
    "end": "2761520"
  },
  {
    "text": "and just open the network tab here and now authenticate",
    "start": "2763599",
    "end": "2770000"
  },
  {
    "text": "okay so as you can see here here's my authorized request um as it was sent to the authorization",
    "start": "2770000",
    "end": "2777119"
  },
  {
    "text": "server and here you can see here's the request parameter basically yeah so that is replacing all",
    "start": "2777119",
    "end": "2784640"
  },
  {
    "text": "the other normal oauth openly connect parameters with this signed object okay",
    "start": "2784640",
    "end": "2793440"
  },
  {
    "text": "cool so that's that that's called ch char now as people call it for chasing",
    "start": "2793440",
    "end": "2800880"
  },
  {
    "text": "shot secured authorized requests now um the the downside",
    "start": "2800880",
    "end": "2807520"
  },
  {
    "text": "of this approach is obviously is that your urls get very long yeah and that might be an",
    "start": "2807520",
    "end": "2813520"
  },
  {
    "text": "issue for mobile scenarios for example the other thing is uh apparently that",
    "start": "2813520",
    "end": "2818800"
  },
  {
    "text": "the client software that the client library needs to be able to create json web",
    "start": "2818800",
    "end": "2823839"
  },
  {
    "text": "tokens deal with the crypto things and so on so that that's the you know that that's the downside but the security benefit is",
    "start": "2823839",
    "end": "2831280"
  },
  {
    "text": "is pretty good yeah um to to make this a little bit easier there's another spec which sits",
    "start": "2831280",
    "end": "2836880"
  },
  {
    "start": "2835000",
    "end": "2835000"
  },
  {
    "text": "on top of char basically it's called power for pushed authorized requests and the idea is",
    "start": "2836880",
    "end": "2842400"
  },
  {
    "text": "instead of the client having to create that json web token and putting it on",
    "start": "2842400",
    "end": "2847520"
  },
  {
    "text": "the on the query string how about the client would first before he before he even opens the",
    "start": "2847520",
    "end": "2853520"
  },
  {
    "start": "2852000",
    "end": "2852000"
  },
  {
    "text": "front channel um open the back channel to the to the authorization server and",
    "start": "2853520",
    "end": "2859760"
  },
  {
    "text": "basically push all of the parameters uh you know to the server okay again this",
    "start": "2859760",
    "end": "2866720"
  },
  {
    "text": "call can be authenticated yeah which which gives us the same benefits as with jar we can authenticate",
    "start": "2866720",
    "end": "2872079"
  },
  {
    "text": "the client even before the first request happens um but the client does not need",
    "start": "2872079",
    "end": "2878240"
  },
  {
    "text": "to do the crypto it does not need to put all these parameters on the",
    "start": "2878240",
    "end": "2883680"
  },
  {
    "text": "um authorized request it first uploads those parameters and then the authorization server will",
    "start": "2883680",
    "end": "2889280"
  },
  {
    "text": "return as a response to this call just an identifier for the uploaded",
    "start": "2889280",
    "end": "2896000"
  },
  {
    "text": "parameters and then all the client needs to do is when he actually now starts the front",
    "start": "2896000",
    "end": "2902160"
  },
  {
    "text": "channel it will include that identifier on the authorized request and then",
    "start": "2902160",
    "end": "2907359"
  },
  {
    "text": "the authorization server will internally substitute basically the previously pushed",
    "start": "2907359",
    "end": "2914000"
  },
  {
    "text": "parameters on this uh authorization request yeah so same idea authenticate the",
    "start": "2914000",
    "end": "2920240"
  },
  {
    "text": "client um remove the parameters from the front channels so they can't be tampered with and that",
    "start": "2920240",
    "end": "2927040"
  },
  {
    "text": "um i think will be the the most popular way of doing that because it's super easy no",
    "start": "2927040",
    "end": "2932960"
  },
  {
    "text": "crypto required no key material required and so on um so this spec will soon be ready",
    "start": "2932960",
    "end": "2939520"
  },
  {
    "text": "um and i can't wait to implement it to be honest okay cool so next thing we have ten more",
    "start": "2939520",
    "end": "2947920"
  },
  {
    "text": "minutes um proof of possession access tokens yeah as i said that's a hot topic in the",
    "start": "2947920",
    "end": "2954079"
  },
  {
    "text": "overwatch world because basically you know back when back when o off was specified or oh of 2.0 i",
    "start": "2954079",
    "end": "2961359"
  },
  {
    "start": "2958000",
    "end": "2958000"
  },
  {
    "text": "should mention they uh so are to go even one more step back over 1.0 had proof of possession tokens",
    "start": "2961359",
    "end": "2969599"
  },
  {
    "text": "meaning the tokens are bound to the client and only the client can use them by bringing in some key material into",
    "start": "2969599",
    "end": "2976640"
  },
  {
    "text": "the mix yeah with off 2.0 they dropped that feature to make it simpler to use",
    "start": "2976640",
    "end": "2982880"
  },
  {
    "text": "right and not everyone was happy about that um and that was the reason why the the over",
    "start": "2982880",
    "end": "2988400"
  },
  {
    "text": "spec was split up in two specs one was over itself and one they called the bearer token usage and the promise",
    "start": "2988400",
    "end": "2995920"
  },
  {
    "text": "was well that that they will add the proof of procession token usage",
    "start": "2995920",
    "end": "3001280"
  },
  {
    "text": "afterwards and just wanted to get the bearer token thing out of the door to focus on this but guess what this",
    "start": "3001280",
    "end": "3007760"
  },
  {
    "text": "never happened really yeah so um we were from for all for 10 years for",
    "start": "3007760",
    "end": "3012880"
  },
  {
    "text": "almost 10 years i guess in a situation where overof itself did not have a concept",
    "start": "3012880",
    "end": "3018000"
  },
  {
    "text": "besides bearer tokens and the issue with barrel tokens as i said is if they leak whoever has them can use",
    "start": "3018000",
    "end": "3025440"
  },
  {
    "text": "them and impersonate the client and the server right there's nothing stopping them it's like cash you're losing",
    "start": "3025440",
    "end": "3030880"
  },
  {
    "text": "on the street right whoever whoever finds it can use it right now there have been many many attempts",
    "start": "3030880",
    "end": "3038000"
  },
  {
    "text": "to solve this problem yeah um some people wanted to solve it at the application layer some people",
    "start": "3038000",
    "end": "3043520"
  },
  {
    "text": "waited for changes uh in tls called token binding long story short they never happened and",
    "start": "3043520",
    "end": "3050319"
  },
  {
    "text": "so we were you know 10 years almost 10 years later that there was still no no solution for that",
    "start": "3050319",
    "end": "3056640"
  },
  {
    "text": "yeah um but there are industries who absolutely need that feature yeah like",
    "start": "3056640",
    "end": "3062079"
  },
  {
    "text": "banking health care and so on you can you just cannot afford that elite",
    "start": "3062079",
    "end": "3067200"
  },
  {
    "text": "token can be used in a banking system or in the healthcare system to you know cause problems yeah so yeah",
    "start": "3067200",
    "end": "3075280"
  },
  {
    "text": "so one and a half years ago or maybe two years ago um someone jumped",
    "start": "3075280",
    "end": "3081040"
  },
  {
    "text": "into okay even if this is not the most sexiest solution on the planet we we can do something about this and we",
    "start": "3081040",
    "end": "3087520"
  },
  {
    "text": "will basically uh go back to good old mutual tls",
    "start": "3087520",
    "end": "3093040"
  },
  {
    "text": "okay so you know when many people hear mutual tls um they say like uh that sounds",
    "start": "3093040",
    "end": "3099040"
  },
  {
    "text": "complicated and um yeah so you know things like uh pki and cas come to mind and so on",
    "start": "3099040",
    "end": "3106559"
  },
  {
    "text": "but to be honest um these days it's not so bad because mutual tls can be used in many",
    "start": "3106559",
    "end": "3113440"
  },
  {
    "text": "ways it does not require a pki it does not require certification authorities and so on so",
    "start": "3113440",
    "end": "3121040"
  },
  {
    "text": "so there is now a spec that says like if you want to use neutral tls we can give you this disproved possession feature",
    "start": "3121040",
    "end": "3127040"
  },
  {
    "text": "yeah there's another spec which is still in the works called depop which achieves a similar goal",
    "start": "3127040",
    "end": "3135040"
  },
  {
    "text": "but without the whole mutual tls thing around it yeah so i'll show you mutual tls first because that is available today",
    "start": "3135040",
    "end": "3142240"
  },
  {
    "text": "and then i'll quickly show you depop um you know that that's coming maybe this year maybe",
    "start": "3142240",
    "end": "3148079"
  },
  {
    "text": "shortly after i guess okay so ultimately how proof possession works is is that you",
    "start": "3148079",
    "end": "3154240"
  },
  {
    "text": "present some sort of uh proof to the authorization server some some key material typically that",
    "start": "3154240",
    "end": "3161040"
  },
  {
    "text": "you know like um like a public private key pair things like that um that that where you where you only",
    "start": "3161040",
    "end": "3167520"
  },
  {
    "text": "the client knows the private key or the secret so to speak yeah and then what the authorization will do",
    "start": "3167520",
    "end": "3173040"
  },
  {
    "text": "is it will embed um that key material into the access",
    "start": "3173040",
    "end": "3178160"
  },
  {
    "text": "token itself okay and that's called the cnf claim the confirmation claim and then when you send this access token",
    "start": "3178160",
    "end": "3184240"
  },
  {
    "text": "to the api you prove to know that secret in addition and then the api will look at",
    "start": "3184240",
    "end": "3190079"
  },
  {
    "text": "the cnf claim we'll look at the thing that you use to prove your secret and if if they can validate it",
    "start": "3190079",
    "end": "3196240"
  },
  {
    "text": "you have you you have proven that you are the same client that asked for the token in the first place",
    "start": "3196240",
    "end": "3201920"
  },
  {
    "text": "and not someone who just stole it and tries to replay it okay that's the",
    "start": "3201920",
    "end": "3207359"
  },
  {
    "text": "the idea in in short words that could be in a json web token that could be uh via introspection um",
    "start": "3207359",
    "end": "3215280"
  },
  {
    "text": "so basically what mutual tls does is it proves to both parties that the other party knows a private key",
    "start": "3215280",
    "end": "3221680"
  },
  {
    "start": "3216000",
    "end": "3216000"
  },
  {
    "text": "right we know that with server tls right https basically",
    "start": "3221680",
    "end": "3227359"
  },
  {
    "text": "we the server proves to us that it's amazon or whatever before we send them the credit card",
    "start": "3227359",
    "end": "3233040"
  },
  {
    "text": "and client client tls is just the opposite direction where the client proves to the server that it",
    "start": "3233040",
    "end": "3239599"
  },
  {
    "text": "knows some secret and that secret can be used then to bind the token to the client you know",
    "start": "3239599",
    "end": "3246800"
  },
  {
    "text": "um so the way this works is basically um it's it's actually really simple and i think it's um it's a",
    "start": "3246800",
    "end": "3252480"
  },
  {
    "start": "3249000",
    "end": "3249000"
  },
  {
    "text": "nice uh thing to do is that in your client code yeah and i think that is especially",
    "start": "3252480",
    "end": "3259760"
  },
  {
    "text": "uh attractive for things like mobile apps for example right where you have the crypto but you are on",
    "start": "3259760",
    "end": "3265760"
  },
  {
    "text": "typically untrusted networks yeah like the internet uh or you know the hotel starbucks whatever so",
    "start": "3265760",
    "end": "3272400"
  },
  {
    "text": "what the client can do is it can create an x509 certificate on the fly okay so there's no need to",
    "start": "3272400",
    "end": "3279280"
  },
  {
    "text": "pre-register re-register this at the token service just create it on the fly and then use that creative certificate",
    "start": "3279280",
    "end": "3286000"
  },
  {
    "text": "to make the token request okay so basically um you bind that to",
    "start": "3286000",
    "end": "3291280"
  },
  {
    "start": "3290000",
    "end": "3290000"
  },
  {
    "text": "your socket and then you're making a token request okay so now what the token server will",
    "start": "3291280",
    "end": "3296880"
  },
  {
    "start": "3294000",
    "end": "3294000"
  },
  {
    "text": "do is it will issue the token back to the client just as normal but in addition",
    "start": "3296880",
    "end": "3302160"
  },
  {
    "text": "it will add the cnf claim which contains the thumbprint of the used x509",
    "start": "3302160",
    "end": "3309680"
  },
  {
    "text": "certificate okay so now when um when the client now calls the apis it",
    "start": "3309680",
    "end": "3316319"
  },
  {
    "text": "will use the same client certificate and the access token and then the api can look at the tls channel gets the",
    "start": "3316319",
    "end": "3322960"
  },
  {
    "text": "certificate looks at the thumbprint compares that with the thumbprint in the access token and if they match",
    "start": "3322960",
    "end": "3329440"
  },
  {
    "text": "well the client has proved that he is the owner of the token which means",
    "start": "3329440",
    "end": "3335920"
  },
  {
    "text": "proof of possession yeah sounds complicated and it is complicated but it's actually",
    "start": "3335920",
    "end": "3341920"
  },
  {
    "text": "not that hard to implement yeah so let me show you that um so",
    "start": "3341920",
    "end": "3347119"
  },
  {
    "text": "basically um [Music] let's run um",
    "start": "3347119",
    "end": "3354319"
  },
  {
    "text": "let's run the api as well and let's run our mutual tls client",
    "start": "3354319",
    "end": "3363838"
  },
  {
    "text": "so basically now i did i'm doing exactly what i what i showed you on on the slides i created this certificate on the",
    "start": "3366400",
    "end": "3372559"
  },
  {
    "text": "fly i made a token request and by virtue of that client certificate being",
    "start": "3372559",
    "end": "3378319"
  },
  {
    "text": "present on the tls channel to the token service identity server basically creates that",
    "start": "3378319",
    "end": "3384799"
  },
  {
    "text": "cnf claim and embeds that thumbprint inside the access token okay so now when",
    "start": "3384799",
    "end": "3392400"
  },
  {
    "text": "we look at the api so when we when we look at the um pipeline of the api right for that",
    "start": "3392400",
    "end": "3399040"
  },
  {
    "text": "that's our normal h8 core pipeline um but we have now uh",
    "start": "3399040",
    "end": "3404079"
  },
  {
    "text": "two authentication handlers one is for our json web token and one is for our client certificate",
    "start": "3404079",
    "end": "3410240"
  },
  {
    "text": "okay um and as you can see we basically allow um all certificates so in other words",
    "start": "3410240",
    "end": "3417200"
  },
  {
    "text": "they don't need to be bound to a pki they can be created on the fly so and then in our",
    "start": "3417200",
    "end": "3423440"
  },
  {
    "text": "pipeline basically after we do the normal token validation we also validate the",
    "start": "3423440",
    "end": "3428880"
  },
  {
    "text": "confirmation claim meaning we compare the value in the access token with the value on the tls channel so in other words if",
    "start": "3428880",
    "end": "3435920"
  },
  {
    "text": "i now press enter i'm making an api call and that should work because these claims match up and it it did",
    "start": "3435920",
    "end": "3443200"
  },
  {
    "text": "okay so no exception means it's good okay so yeah um as i said this is a huge",
    "start": "3443200",
    "end": "3448720"
  },
  {
    "text": "topic um that we could talk for much much longer but the purpose of this talk is just to make you aware that this exists",
    "start": "3448720",
    "end": "3455440"
  },
  {
    "text": "make you aware that in.net it's pretty easy to implement actually um and yeah something to consider",
    "start": "3455440",
    "end": "3462000"
  },
  {
    "text": "so the very last thing i guess i want to talk about um is this depop thing this is not yet",
    "start": "3462000",
    "end": "3469200"
  },
  {
    "start": "3468000",
    "end": "3468000"
  },
  {
    "text": "a finalized spec but it is in the works and the idea is that this is basically",
    "start": "3469200",
    "end": "3474480"
  },
  {
    "text": "an application level proof of procession mechanism where you don't need the mtls",
    "start": "3474480",
    "end": "3480960"
  },
  {
    "text": "infrastructure for okay and the way this works just to quickly",
    "start": "3480960",
    "end": "3486000"
  },
  {
    "text": "show you um the general idea is is that same same same concept yeah",
    "start": "3486000",
    "end": "3491440"
  },
  {
    "start": "3490000",
    "end": "3490000"
  },
  {
    "text": "when you are asking for a token you're sending along something else that proves the knowledge of a secret and",
    "start": "3491440",
    "end": "3497359"
  },
  {
    "text": "that's what they call the d-pop token or the d-pop header yeah and what this header",
    "start": "3497359",
    "end": "3502400"
  },
  {
    "text": "is it's another json web token where you basically create a public private key pair you you know",
    "start": "3502400",
    "end": "3510319"
  },
  {
    "start": "3505000",
    "end": "3505000"
  },
  {
    "text": "embed the public key into this depop token that's this guy here then you put in some claims like for",
    "start": "3510319",
    "end": "3516480"
  },
  {
    "text": "example the url and the http method and and timestamp and and so on and then",
    "start": "3516480",
    "end": "3524480"
  },
  {
    "text": "you're using that private key that you just created to sign that token so now when the authorization",
    "start": "3524480",
    "end": "3531280"
  },
  {
    "text": "server receives that token request it will validate the signature and that that means you have proven to",
    "start": "3531280",
    "end": "3538240"
  },
  {
    "text": "know the private key um that belongs to that public key here",
    "start": "3538240",
    "end": "3543280"
  },
  {
    "text": "and then what the authorization server will do is basically um embed an identifier",
    "start": "3543280",
    "end": "3549440"
  },
  {
    "start": "3549000",
    "end": "3549000"
  },
  {
    "text": "for that key material into the access token yeah same idea the cnf claim but this time",
    "start": "3549440",
    "end": "3554960"
  },
  {
    "text": "they're using not the thumbprint of the client certificate they're using the base64 url encoding of the jw",
    "start": "3554960",
    "end": "3563359"
  },
  {
    "text": "k sha256 thumbprint of the public key",
    "start": "3563359",
    "end": "3568640"
  },
  {
    "text": "and there's an rlc for that of course long story short this is basically a key identifier",
    "start": "3568640",
    "end": "3574319"
  },
  {
    "text": "okay so now same idea if now the client makes the call to the api it will",
    "start": "3574319",
    "end": "3582160"
  },
  {
    "text": "call the api it will send the access token which includes the cnf claim it will send an additional",
    "start": "3582160",
    "end": "3588160"
  },
  {
    "text": "token the debug depop token and what the depop token is again is um using the same key material that",
    "start": "3588160",
    "end": "3596000"
  },
  {
    "start": "3591000",
    "end": "3591000"
  },
  {
    "text": "we use to you know add the token service we are embedding the url and the http method and again by being",
    "start": "3596000",
    "end": "3603520"
  },
  {
    "text": "able to validate the signature the api knows that we actually know the private key which again",
    "start": "3603520",
    "end": "3610160"
  },
  {
    "text": "proves that we own the access token okay so yeah don't feel bad if this is not",
    "start": "3610160",
    "end": "3618000"
  },
  {
    "text": "crystal clear after just being exposed to it for 10 minutes it's fine it is complicated but my point",
    "start": "3618000",
    "end": "3625119"
  },
  {
    "text": "is that with the ability to be able to",
    "start": "3625119",
    "end": "3630160"
  },
  {
    "text": "to to bind access tokens to clients we eliminate a whole class of of of",
    "start": "3630160",
    "end": "3637359"
  },
  {
    "text": "problems which basically leaked access tokens yeah and they might be leaked by application code they might be leaked",
    "start": "3637359",
    "end": "3643599"
  },
  {
    "text": "by um uh you know like by attacks against your system",
    "start": "3643599",
    "end": "3648799"
  },
  {
    "text": "the point is if the token leaks you don't care anymore right because it's bound to the client",
    "start": "3648799",
    "end": "3654160"
  },
  {
    "text": "and this token can not just be used now to impersonate or you know call apis",
    "start": "3654160",
    "end": "3660960"
  },
  {
    "text": "okay cool so that's it that's all i have um i guess the summary is that as you",
    "start": "3660960",
    "end": "3666720"
  },
  {
    "text": "can see oauth keeps evolving it's not just rfc 6749 there's a lot going on and that base",
    "start": "3666720",
    "end": "3673760"
  },
  {
    "text": "mainly that the reason for a lot going on is because it's so popular right maybe 10 years ago they",
    "start": "3673760",
    "end": "3679200"
  },
  {
    "text": "didn't think it's becoming that popular um but it did and it's used everywhere now right e-governments",
    "start": "3679200",
    "end": "3685359"
  },
  {
    "text": "healthcare banking you name it yeah that's why basically there is a a good",
    "start": "3685359",
    "end": "3692160"
  },
  {
    "text": "interest in in strengthening it and making it ready for the next 10 years i guess yeah",
    "start": "3692160",
    "end": "3697359"
  },
  {
    "text": "so that's why of 2.1 will be released soon and that's why these additional specs",
    "start": "3697359",
    "end": "3702400"
  },
  {
    "text": "exist um that you know add additional security",
    "start": "3702400",
    "end": "3707680"
  },
  {
    "text": "features so you know i'm working as a consultant i'm i'm helping people i'm doing training so if",
    "start": "3707680",
    "end": "3713760"
  },
  {
    "text": "you have any additional questions whatever let me know and um yeah now i'm i'm",
    "start": "3713760",
    "end": "3719280"
  },
  {
    "text": "gonna be in slack um and um you have my email address so yeah thank you for your time and",
    "start": "3719280",
    "end": "3725839"
  },
  {
    "text": "hopefully see you again next year in person i'm pretty sure you heard this sentence",
    "start": "3725839",
    "end": "3731760"
  },
  {
    "text": "before thank you",
    "start": "3731760",
    "end": "3741839"
  },
  {
    "text": "you",
    "start": "3742480",
    "end": "3744559"
  }
]