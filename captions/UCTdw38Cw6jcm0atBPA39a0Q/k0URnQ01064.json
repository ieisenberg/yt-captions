[
  {
    "text": "let us take a moment to reflect on what life was like",
    "start": "659",
    "end": "7259"
  },
  {
    "text": "when it was but you know before the spa before the single page application",
    "start": "7259",
    "end": "13500"
  },
  {
    "text": "when we had things like MVC and asp.net web forms on the.net side",
    "start": "13500",
    "end": "19859"
  },
  {
    "text": "of course you know lots and lots of ways to develop websites",
    "start": "19859",
    "end": "25560"
  },
  {
    "text": "but in a traditional HTTP rest request response type",
    "start": "25560",
    "end": "31920"
  },
  {
    "text": "application there is no state there's no way that you unless you want to store cookies or",
    "start": "31920",
    "end": "39239"
  },
  {
    "text": "have some way to do it on the server side like the session object",
    "start": "39239",
    "end": "45719"
  },
  {
    "text": "um everybody's favorite the session object in asp.net web forms",
    "start": "45719",
    "end": "52199"
  },
  {
    "text": "uh it's sort of um you know you know it's uh putting round pegs into square",
    "start": "52199",
    "end": "57840"
  },
  {
    "text": "holes or Square pegs and round holes or something like that the things don't fit right but with the spa it's a little bit",
    "start": "57840",
    "end": "64320"
  },
  {
    "text": "easier if you've done any react or view or or angular even knockout",
    "start": "64320",
    "end": "70979"
  },
  {
    "text": "um you know a single page application there's places where you can you can",
    "start": "70979",
    "end": "76560"
  },
  {
    "text": "stuff stuff so let's talk about that in Blazer that's what I'm here to talk about the",
    "start": "76560",
    "end": "82619"
  },
  {
    "text": "ways that you can manage state so first of all what is State what is in state to me application state is the things that",
    "start": "82619",
    "end": "90600"
  },
  {
    "text": "are sort of transitory that are in memory that you need to access from",
    "start": "90600",
    "end": "96060"
  },
  {
    "text": "different components that may or may not be in scope right um the canonical idea that comes to mind",
    "start": "96060",
    "end": "104280"
  },
  {
    "text": "is filling out a form now I don't know if you've ever had this uh wonderful experience but in the",
    "start": "104280",
    "end": "111600"
  },
  {
    "text": "states I remember I was filling out a form for the bank it may have been a credit card application or application",
    "start": "111600",
    "end": "120000"
  },
  {
    "text": "for some Finance thing or whatever but they really want like this multiple page",
    "start": "120000",
    "end": "125579"
  },
  {
    "text": "form filled out right and so you know I get all the easy stuff",
    "start": "125579",
    "end": "131340"
  },
  {
    "text": "you know your name your address and your this and that and then you get to this page that's like you know",
    "start": "131340",
    "end": "137879"
  },
  {
    "text": "um was your mortgage payment a b or c on this particular date",
    "start": "137879",
    "end": "144300"
  },
  {
    "text": "so I'm like how the hell should I know right so I gotta get up and I gotta go to the file cabinet and I gotta pull",
    "start": "144300",
    "end": "149819"
  },
  {
    "text": "stuff out by the time I get back oh I'm sorry you've timed out your session has",
    "start": "149819",
    "end": "156060"
  },
  {
    "text": "expired you have to start all over again right what an infuriating experience",
    "start": "156060",
    "end": "161519"
  },
  {
    "text": "that is right so session state or I'm sorry application state in that case",
    "start": "161519",
    "end": "167220"
  },
  {
    "text": "will be everything that I've filled into the form up to that point so when I",
    "start": "167220",
    "end": "172379"
  },
  {
    "text": "reload my session everything is there that I've already done and you know I've",
    "start": "172379",
    "end": "177599"
  },
  {
    "text": "also had that experience where they did that for you and it's like whoa thank you very much but the alternative",
    "start": "177599",
    "end": "185159"
  },
  {
    "text": "is pretty pretty nasty so I think of when I think of State I",
    "start": "185159",
    "end": "190739"
  },
  {
    "text": "don't think of Secrets I don't think of anything that needs to go in a database I think of you know my name my address",
    "start": "190739",
    "end": "197700"
  },
  {
    "text": "my phone number that kind of thing or just data that I have set to use in the",
    "start": "197700",
    "end": "204420"
  },
  {
    "text": "application that I want to be able to access from different places it could be",
    "start": "204420",
    "end": "209519"
  },
  {
    "text": "as simple as a switch like a toggle switch that I turn on in a toolbar or something like that it tells me I want",
    "start": "209519",
    "end": "216120"
  },
  {
    "text": "to see some features or something like that right and it isn't really",
    "start": "216120",
    "end": "221760"
  },
  {
    "text": "isn't really a view model either I mean we think of when we think of state and objects that we want to know when",
    "start": "221760",
    "end": "228599"
  },
  {
    "text": "they've changed you know we think of view models and I notify property change",
    "start": "228599",
    "end": "234959"
  },
  {
    "text": "I actually did a show a Blazer train show revisiting mvbm",
    "start": "234959",
    "end": "240060"
  },
  {
    "text": "and I asked people like Steve Sanderson and Chris Sainte and",
    "start": "240060",
    "end": "247560"
  },
  {
    "text": "um Tim Corey and a couple other people people I really respect in the business",
    "start": "247560",
    "end": "254159"
  },
  {
    "text": "what do you think about mvvm with blazer Jeff Fritz from Microsoft was never and they're all like",
    "start": "254159",
    "end": "259739"
  },
  {
    "text": "yeah you don't really need it you know Steve Sanderson didn't say that he said",
    "start": "259739",
    "end": "265080"
  },
  {
    "text": "he's very diplomatic he said well we made Blazer to be sort of agnostic to whatever patterns you want to use uh we",
    "start": "265080",
    "end": "272759"
  },
  {
    "text": "tried to make it as simple as possible so you wouldn't have to you know put stuff on top of it but if you want to go",
    "start": "272759",
    "end": "278580"
  },
  {
    "text": "ahead yeah he's Steve Sanderson he's diplomatic he has to say that but",
    "start": "278580",
    "end": "284460"
  },
  {
    "text": "everybody else was like you don't need mpvm you know what you need is to be able to have",
    "start": "284460",
    "end": "292280"
  },
  {
    "text": "some properties or you know an object that has properties",
    "start": "292280",
    "end": "297419"
  },
  {
    "text": "where they're accessible from all the different components and all the different pages in The Spa and they're",
    "start": "297419",
    "end": "303120"
  },
  {
    "text": "taken out of the page itself so just a little recap about what Blazer is it is",
    "start": "303120",
    "end": "309419"
  },
  {
    "text": "a single page application there is only one page even though that when you navigate to different pages you can see",
    "start": "309419",
    "end": "316919"
  },
  {
    "text": "up here at the top the the URL changes but that's a route within the same application you're not going and getting",
    "start": "316919",
    "end": "324780"
  },
  {
    "text": "a whole new set of HTML and replacing it in the browser right it is a spa it's a",
    "start": "324780",
    "end": "331380"
  },
  {
    "text": "single page application but the problem is and you can see this right here and I'm sorry to use the counter you know",
    "start": "331380",
    "end": "337680"
  },
  {
    "text": "it's there it's everybody's sick of the counter but you can see if I increment",
    "start": "337680",
    "end": "343440"
  },
  {
    "text": "the counter and I move off the page and I go back it's it's zero again and that's because",
    "start": "343440",
    "end": "350699"
  },
  {
    "text": "every time you go to a page or a component uh and you navigate away from",
    "start": "350699",
    "end": "356220"
  },
  {
    "text": "that page and you come back it re initializes and",
    "start": "356220",
    "end": "362039"
  },
  {
    "text": "any page level variables that are in there get wiped out get re reset",
    "start": "362039",
    "end": "368580"
  },
  {
    "text": "so let me show you what that looks like and here's Blazer Train by the way um",
    "start": "368580",
    "end": "375060"
  },
  {
    "text": "if you haven't seen this resource in your Blazer developer you really should",
    "start": "375060",
    "end": "380880"
  },
  {
    "text": "um if I sort the videos descending the last one was episode 77 revisiting mvdm",
    "start": "380880",
    "end": "386940"
  },
  {
    "text": "so yeah there's quite a lot of stuff in here that you can use",
    "start": "386940",
    "end": "392819"
  },
  {
    "text": "um but if we go back to the application here",
    "start": "392819",
    "end": "398220"
  },
  {
    "text": "and we go to the counter page you can see that this variable right",
    "start": "398220",
    "end": "406020"
  },
  {
    "text": "there current count is just a page level variable and that's why it gets",
    "start": "406020",
    "end": "412380"
  },
  {
    "text": "destroyed and reinitialized every time that page gets navigated to so let's we can use this as an example",
    "start": "412380",
    "end": "420780"
  },
  {
    "text": "but of state but also add a few more things so I'm going to show you three",
    "start": "420780",
    "end": "426360"
  },
  {
    "text": "demos here today the first one we're going to do application State using a",
    "start": "426360",
    "end": "432120"
  },
  {
    "text": "cascading value if you don't know what that is you will soon second we're going to use a service that",
    "start": "432120",
    "end": "439500"
  },
  {
    "text": "we can create a class and add it as a scoped service so that there's one instance per user",
    "start": "439500",
    "end": "445979"
  },
  {
    "text": "and we're going to do that because we might need to to handle an event when",
    "start": "445979",
    "end": "451319"
  },
  {
    "text": "the state changes because we're doing something other than refreshing the UI and the third is to take that App State",
    "start": "451319",
    "end": "458340"
  },
  {
    "text": "and persist it to local storage so that if you're filling out a form for",
    "start": "458340",
    "end": "463680"
  },
  {
    "text": "example and you your session times out or you come back later at a certain time",
    "start": "463680",
    "end": "469500"
  },
  {
    "text": "you give it a timeout window your data will come back to life so let's start with the cascading value",
    "start": "469500",
    "end": "479039"
  },
  {
    "text": "so I have a just a simple Blazer server application here",
    "start": "479039",
    "end": "486800"
  },
  {
    "text": "and all my code and my toolbox is missing that's awesome wow how did that happen",
    "start": "487740",
    "end": "495660"
  },
  {
    "text": "you guys find this happens occasionally like your your toolbox data goes away",
    "start": "495660",
    "end": "500699"
  },
  {
    "text": "and then it comes back and then it goes away okay",
    "start": "500699",
    "end": "507500"
  },
  {
    "text": "shift that's what we're gonna do I'm going to download",
    "start": "508620",
    "end": "514800"
  },
  {
    "text": "from Blazer train actually I don't need to download it I have I have the code here",
    "start": "514800",
    "end": "522080"
  },
  {
    "text": "so yeah I had all these uh things in my toolbar that um that I could uh",
    "start": "527459",
    "end": "534720"
  },
  {
    "text": "just code Snippets and they're gone so we're just going to",
    "start": "534720",
    "end": "540540"
  },
  {
    "text": "do this the easy way we're going to pull up the application app",
    "start": "540540",
    "end": "545940"
  },
  {
    "text": "already already done",
    "start": "545940",
    "end": "549980"
  },
  {
    "text": "so the cascading parameter type is a is a",
    "start": "551040",
    "end": "556260"
  },
  {
    "text": "cascading value it's a um how should we call it a",
    "start": "556260",
    "end": "561839"
  },
  {
    "text": "a component that you wrap around the entire router the entire app and then",
    "start": "561839",
    "end": "567480"
  },
  {
    "text": "you can initialize that or you can access it in any page or other component just by adding a cascading parameter",
    "start": "567480",
    "end": "575640"
  },
  {
    "text": "so um in my shared project here's my",
    "start": "575640",
    "end": "580800"
  },
  {
    "text": "cascading App State now this is Blazer server but it would work just as well on",
    "start": "580800",
    "end": "586440"
  },
  {
    "text": "Blazer web assembly right there's no there's no difference so here's a pair a pattern you might see",
    "start": "586440",
    "end": "594920"
  },
  {
    "text": "when you want to have a component that wraps content that wraps markup",
    "start": "594920",
    "end": "601200"
  },
  {
    "text": "you have a cascading value for this component and you have a render fragment",
    "start": "601200",
    "end": "607700"
  },
  {
    "text": "I call it child content and it's a parameter",
    "start": "607700",
    "end": "612899"
  },
  {
    "text": "and that child content goes inside this cascading value now on this component",
    "start": "612899",
    "end": "621600"
  },
  {
    "text": "I've got some properties I've got a counter property and the only difference between this and",
    "start": "621600",
    "end": "627600"
  },
  {
    "text": "a regular get a regular Setter is that when I set the value I call state has changed and state has changed is",
    "start": "627600",
    "end": "634920"
  },
  {
    "text": "something that you call to tell Blazer that hey something needs to this page needs to be",
    "start": "634920",
    "end": "640320"
  },
  {
    "text": "re-rendered or this component needs to be re-rendered it's actually at a component level",
    "start": "640320",
    "end": "645720"
  },
  {
    "text": "and so anything inside the child content will be re-rendered",
    "start": "645720",
    "end": "651360"
  },
  {
    "text": "okay message is just a string and we call state has changed again when",
    "start": "651360",
    "end": "658019"
  },
  {
    "text": "we set the value and the same with this Boolean property enabled",
    "start": "658019",
    "end": "663720"
  },
  {
    "text": "okay so now if I go to appraiser I can wrap my entire appraiser the",
    "start": "663720",
    "end": "672000"
  },
  {
    "text": "router which is this is what was there beforehand in this cascading App State",
    "start": "672000",
    "end": "677060"
  },
  {
    "text": "param component all right and now I can let's create a",
    "start": "677060",
    "end": "684779"
  },
  {
    "text": "toolbar component which I've added to the shared folder and this has a cascading parameter not",
    "start": "684779",
    "end": "693120"
  },
  {
    "text": "just a parameter but a cascading parameter called cascading App State",
    "start": "693120",
    "end": "699240"
  },
  {
    "text": "and I call the name of it is App State but this basically says Okay I want an I",
    "start": "699240",
    "end": "706019"
  },
  {
    "text": "want to have a reference to that instance and there's only one instance per user",
    "start": "706019",
    "end": "711779"
  },
  {
    "text": "okay so here I just have some markup and I'm",
    "start": "711779",
    "end": "718320"
  },
  {
    "text": "looking at App State enabled and I'm showing a button with that's going to be",
    "start": "718320",
    "end": "724079"
  },
  {
    "text": "green that says enabled if it's enabled and otherwise I'm showing a button that says",
    "start": "724079",
    "end": "730680"
  },
  {
    "text": "disabled that's going to be red now I've also got another button",
    "start": "730680",
    "end": "737100"
  },
  {
    "text": "called update message and when I call that when I click that it calls this update",
    "start": "737100",
    "end": "743940"
  },
  {
    "text": "message button clicked which sets App State message now I don't have to do any notify property changed or anything like",
    "start": "743940",
    "end": "751139"
  },
  {
    "text": "that I just set the message because in the setter I'm calling status changed",
    "start": "751139",
    "end": "757320"
  },
  {
    "text": "wherever it is message updated at the current date time",
    "start": "757320",
    "end": "765019"
  },
  {
    "text": "uh then if we go to main layout instead of the regular about box that I",
    "start": "765860",
    "end": "773519"
  },
  {
    "text": "have normally across the top I'm showing the toolbar right there",
    "start": "773519",
    "end": "779160"
  },
  {
    "text": "that's the only difference there and now let's go to the main page",
    "start": "779160",
    "end": "788880"
  },
  {
    "text": "the index page and look at that and I've also got my app State reference",
    "start": "788880",
    "end": "796620"
  },
  {
    "text": "here so remember this is a reference to the same instance there's only one instance",
    "start": "796620",
    "end": "802260"
  },
  {
    "text": "per user right so here's my app State and I'm I have a",
    "start": "802260",
    "end": "807779"
  },
  {
    "text": "button to toggle enabled which basically sets it to the opposite of what it is and another one to set the",
    "start": "807779",
    "end": "814680"
  },
  {
    "text": "message so now I can set the message in the toolbar which is always visible no",
    "start": "814680",
    "end": "820260"
  },
  {
    "text": "matter what the page is and I have a button to change the",
    "start": "820260",
    "end": "825420"
  },
  {
    "text": "message in the main page as well",
    "start": "825420",
    "end": "829699"
  },
  {
    "text": "so let's check it out",
    "start": "831180",
    "end": "834560"
  },
  {
    "text": "all right so here's my enabled toggle you can see that this button right here is changing",
    "start": "844920",
    "end": "851100"
  },
  {
    "text": "if I update the message I can do that from the page",
    "start": "851100",
    "end": "857639"
  },
  {
    "text": "and I can also update it from the toolbar in the toolbar no",
    "start": "857639",
    "end": "864240"
  },
  {
    "text": "matter where I am I can update it and show it right if I",
    "start": "864240",
    "end": "869639"
  },
  {
    "text": "go back to the home page the message should say 10 34 31.",
    "start": "869639",
    "end": "875459"
  },
  {
    "text": "and it does now I also have this child component and just to show you that we can go down",
    "start": "875459",
    "end": "882300"
  },
  {
    "text": "a level I created a child component also exposing App State and we're setting the",
    "start": "882300",
    "end": "891000"
  },
  {
    "text": "message from there as well so this is a child component that's going to be on the main page",
    "start": "891000",
    "end": "897720"
  },
  {
    "text": "now we're not displaying it but we could we certainly could we just have a we're",
    "start": "897720",
    "end": "902880"
  },
  {
    "text": "setting the message to message updated by child component",
    "start": "902880",
    "end": "908120"
  },
  {
    "text": "so boom there you go so now we've got a page a child",
    "start": "916399",
    "end": "922260"
  },
  {
    "text": "component and another component up at the top the toolbar that are all",
    "start": "922260",
    "end": "927300"
  },
  {
    "text": "accessing the state and I also had Rewritten the counter",
    "start": "927300",
    "end": "932519"
  },
  {
    "text": "page so instead of the counter being a local variable it's App State counter",
    "start": "932519",
    "end": "940920"
  },
  {
    "text": "and here's the the value of that such as it is I could set the counter",
    "start": "940920",
    "end": "946980"
  },
  {
    "text": "here like six or seven I can go to another page and come back and it's still there",
    "start": "946980",
    "end": "953360"
  },
  {
    "text": "and the code for that is just what you'd expect yeah I'm",
    "start": "953519",
    "end": "959820"
  },
  {
    "text": "I've got another app State instance not instance but reference in there",
    "start": "959820",
    "end": "966139"
  },
  {
    "text": "okay so this is where I would start with App State I would start with a",
    "start": "966720",
    "end": "972839"
  },
  {
    "text": "cascading value and the the Restriction is or or the the use case is the only",
    "start": "972839",
    "end": "979560"
  },
  {
    "text": "thing I need to do is update the UI okay if all you need to do is make sure",
    "start": "979560",
    "end": "985680"
  },
  {
    "text": "that this component can update the UI or read the value of something right",
    "start": "985680",
    "end": "991800"
  },
  {
    "text": "great but what if I want to act on",
    "start": "991800",
    "end": "996959"
  },
  {
    "text": "uh you know when another component that's not me changes the state",
    "start": "996959",
    "end": "1002839"
  },
  {
    "text": "okay now you need to have an event handler and it's not that simple",
    "start": "1002839",
    "end": "1008959"
  },
  {
    "text": "because let's say we Implement an event handler in this cascading App State",
    "start": "1008959",
    "end": "1014120"
  },
  {
    "text": "right so we have to have a dispose method right because we have to unhook it when we're done",
    "start": "1014120",
    "end": "1020480"
  },
  {
    "text": "and how do we know who mutated the state how do I know if it wasn't me",
    "start": "1020480",
    "end": "1027678"
  },
  {
    "text": "right I so let's say that you want to do something like um you know write to a",
    "start": "1027679",
    "end": "1034520"
  },
  {
    "text": "law or something like that in the toolbar when the state changes all right so you hook the event but what",
    "start": "1034520",
    "end": "1041178"
  },
  {
    "text": "if the toolbar was the one that changed the state do you know what I'm saying so so you",
    "start": "1041179",
    "end": "1046339"
  },
  {
    "text": "have to think about not getting into a quagmire with your code and so there's",
    "start": "1046339",
    "end": "1053840"
  },
  {
    "text": "another way that we can do this and that's with the scope service so let's open that",
    "start": "1053840",
    "end": "1060860"
  },
  {
    "text": "demo any questions on this one while I'm opening the new one",
    "start": "1060860",
    "end": "1066039"
  },
  {
    "text": "no no it just re-renders the component that you're when you call state has",
    "start": "1071679",
    "end": "1077660"
  },
  {
    "text": "changed it's within that component yeah",
    "start": "1077660",
    "end": "1083080"
  },
  {
    "text": "so let's look at this guy we've got",
    "start": "1083140",
    "end": "1088160"
  },
  {
    "text": "uh in a Services folder we've got a class called App State",
    "start": "1088160",
    "end": "1094039"
  },
  {
    "text": "so app state has a message property an enabled property and a counter property",
    "start": "1094039",
    "end": "1099260"
  },
  {
    "text": "and I've got private Setters on here because I want to control",
    "start": "1099260",
    "end": "1105140"
  },
  {
    "text": "how these things get set I don't want to Simply have a public setter",
    "start": "1105140",
    "end": "1110299"
  },
  {
    "text": "because I need to know who mutated the state",
    "start": "1110299",
    "end": "1115340"
  },
  {
    "text": "if it wasn't me great I can take some action right it's just a little extra bonus",
    "start": "1115340",
    "end": "1121580"
  },
  {
    "text": "that I put into this architecture so I've got a notify State changed",
    "start": "1121580",
    "end": "1128600"
  },
  {
    "text": "method that takes a component base or a component so you could use this",
    "start": "1128600",
    "end": "1136220"
  },
  {
    "text": "from uh inside a component or a page and then the property name",
    "start": "1136220",
    "end": "1141380"
  },
  {
    "text": "and then I'm calling this invoking this event State changed if it's not if it's",
    "start": "1141380",
    "end": "1147320"
  },
  {
    "text": "not no in other words if if somebody is handling it I want to invoke it",
    "start": "1147320",
    "end": "1152480"
  },
  {
    "text": "um passing the source in the property so here's my event it's an action of component base and",
    "start": "1152480",
    "end": "1158900"
  },
  {
    "text": "string State changed so now I have some public methods for updating those",
    "start": "1158900",
    "end": "1165860"
  },
  {
    "text": "values rather than just being able to say you know message equals or enabled",
    "start": "1165860",
    "end": "1171320"
  },
  {
    "text": "equals or counter equals so I have update message update enabled update counter so they're able to do the",
    "start": "1171320",
    "end": "1178340"
  },
  {
    "text": "sets because it's the setter is private and then we're going to call notify",
    "start": "1178340",
    "end": "1183380"
  },
  {
    "text": "State changed so we still have this toolbar",
    "start": "1183380",
    "end": "1189500"
  },
  {
    "text": "right but the toolbar is going to inject the App State and before you can inject",
    "start": "1189500",
    "end": "1197419"
  },
  {
    "text": "and this is an older demo so we're using the startup",
    "start": "1197419",
    "end": "1203059"
  },
  {
    "text": "in configure Services you add a scoped service",
    "start": "1203059",
    "end": "1208100"
  },
  {
    "text": "and a scope service is different from a Singleton in that you get one instance",
    "start": "1208100",
    "end": "1213200"
  },
  {
    "text": "per user us if you add Singleton like weather forecast service you're sharing one",
    "start": "1213200",
    "end": "1218840"
  },
  {
    "text": "instance with all users okay it and this is in Blazer server Blazer",
    "start": "1218840",
    "end": "1224720"
  },
  {
    "text": "web assembly there's no difference because there's only one user right so we're adding App State as a scoped",
    "start": "1224720",
    "end": "1230900"
  },
  {
    "text": "service we're injecting it into the toolbar we're implementing eye disposable",
    "start": "1230900",
    "end": "1238100"
  },
  {
    "text": "because down in on initialized we're handling State changed",
    "start": "1238100",
    "end": "1244460"
  },
  {
    "text": "with uh this guy right here app state state changed",
    "start": "1244460",
    "end": "1249980"
  },
  {
    "text": "and we're in dispose we're unhooking it with minus equals but you can see right",
    "start": "1249980",
    "end": "1255020"
  },
  {
    "text": "here if source is not this than somebody else mutated the state it",
    "start": "1255020",
    "end": "1260539"
  },
  {
    "text": "wasn't the toolbar and then I can take I right here all I'm",
    "start": "1260539",
    "end": "1266240"
  },
  {
    "text": "doing is calling state has changed but you get an event right you can do something that's non-ui related",
    "start": "1266240",
    "end": "1273679"
  },
  {
    "text": "like a log or you know something else follow so that's why this is a",
    "start": "1273679",
    "end": "1281480"
  },
  {
    "text": "completely different model from the cascading parameter if you're wanting to use a cascading parameter or cascading",
    "start": "1281480",
    "end": "1287600"
  },
  {
    "text": "value the only thing you can really do is you know update right or whatever you can do",
    "start": "1287600",
    "end": "1294200"
  },
  {
    "text": "in that setter right but do you really want to do anything in that setter",
    "start": "1294200",
    "end": "1300080"
  },
  {
    "text": "well that's up to you so if a component needs to know when the",
    "start": "1300080",
    "end": "1305360"
  },
  {
    "text": "state has changed then who changed it this is a good model um likewise in the index page",
    "start": "1305360",
    "end": "1314440"
  },
  {
    "text": "we're doing the same thing we're injecting App State implementing disposable same code as before with a child",
    "start": "1314539",
    "end": "1321320"
  },
  {
    "text": "component and instead of saying enabled equals",
    "start": "1321320",
    "end": "1327140"
  },
  {
    "text": "we're saying apps they update and equal update enabled this passing this and App",
    "start": "1327140",
    "end": "1333559"
  },
  {
    "text": "State enabled not App State enabled same with the",
    "start": "1333559",
    "end": "1339200"
  },
  {
    "text": "message so we create a message we call App State update message passing",
    "start": "1339200",
    "end": "1344419"
  },
  {
    "text": "this and the message and",
    "start": "1344419",
    "end": "1350240"
  },
  {
    "text": "counter the same way right injecting the App State disposable",
    "start": "1350240",
    "end": "1356980"
  },
  {
    "text": "update counter there you go and the child component",
    "start": "1356980",
    "end": "1365840"
  },
  {
    "text": "the child component doesn't need to know in anything is changed because we're only setting the value but we're setting",
    "start": "1365840",
    "end": "1373280"
  },
  {
    "text": "it with the update message",
    "start": "1373280",
    "end": "1376419"
  },
  {
    "text": "yes 25 things magic software investigations",
    "start": "1380860",
    "end": "1387460"
  },
  {
    "text": "sure yeah the question is can we see that App State again um",
    "start": "1389000",
    "end": "1395740"
  },
  {
    "text": "here it is sorry about that uh yes so",
    "start": "1398780",
    "end": "1404419"
  },
  {
    "text": "here it is so update message sets",
    "start": "1404419",
    "end": "1410780"
  },
  {
    "text": "met the message property which has a private setter and then calls notify State changed so",
    "start": "1410780",
    "end": "1417559"
  },
  {
    "text": "anybody who's hooking that event can see it",
    "start": "1417559",
    "end": "1421900"
  },
  {
    "text": "okay so this should work exactly as it did before",
    "start": "1424159",
    "end": "1429559"
  },
  {
    "text": "right the only difference is now we could actually in let's say toolbar",
    "start": "1429559",
    "end": "1439120"
  },
  {
    "text": "put a break point here and if the say child component of the",
    "start": "1442880",
    "end": "1449419"
  },
  {
    "text": "page updates it you know let me make this better if if if I update it",
    "start": "1449419",
    "end": "1454640"
  },
  {
    "text": "everything gets ignored but if the page updates it now I get control now I can do something",
    "start": "1454640",
    "end": "1461240"
  },
  {
    "text": "in the toolbar yep and I know that the source is the page I",
    "start": "1461240",
    "end": "1468860"
  },
  {
    "text": "know you can't see that but it's application State page Pages dot index application States the name of my app",
    "start": "1468860",
    "end": "1477640"
  },
  {
    "text": "questions other questions",
    "start": "1478520",
    "end": "1482559"
  },
  {
    "text": "yeah so the the main benefit of the second",
    "start": "1495460",
    "end": "1500960"
  },
  {
    "text": "um of this of this scope service is that you can get",
    "start": "1500960",
    "end": "1506120"
  },
  {
    "text": "control and you can have an event handler in another component that's that's the main it's not really",
    "start": "1506120",
    "end": "1512840"
  },
  {
    "text": "about updating the rendering um I'm doing a a I'm doing this because",
    "start": "1512840",
    "end": "1519380"
  },
  {
    "text": "it has to be done anyway you know and uh so but it's not it's not about that it's",
    "start": "1519380",
    "end": "1524720"
  },
  {
    "text": "really about getting control when something changes which you don't get with the cascading",
    "start": "1524720",
    "end": "1530600"
  },
  {
    "text": "parameter other questions okay",
    "start": "1530600",
    "end": "1535880"
  },
  {
    "text": "Let's uh try this this other one here yes",
    "start": "1535880",
    "end": "1542919"
  },
  {
    "text": "yeah that's a good good question can you have more than one app State class yes of course",
    "start": "1544100",
    "end": "1549980"
  },
  {
    "text": "um I I was of the mind and I still am that you know you can",
    "start": "1549980",
    "end": "1557240"
  },
  {
    "text": "put everything in one state bag if you're just going to have a single App State but if you've got like",
    "start": "1557240",
    "end": "1563299"
  },
  {
    "text": "a whole bunch of things that do different things you might want to break them down by task",
    "start": "1563299",
    "end": "1569799"
  },
  {
    "text": "right which is sort of the Redux way of doing things in that you uh you have",
    "start": "1569799",
    "end": "1576500"
  },
  {
    "text": "every every task that you want to do has a state it gets more complicated but you know you certainly have the the ability",
    "start": "1576500",
    "end": "1582799"
  },
  {
    "text": "to do that if you want it's just a service you know it's just a scope service so you can have one for every",
    "start": "1582799",
    "end": "1588980"
  },
  {
    "text": "different task that you want to do it's just more work because now you have to implement it where you want and not",
    "start": "1588980",
    "end": "1595400"
  },
  {
    "text": "where you don't want yeah great question though all right so let's",
    "start": "1595400",
    "end": "1600440"
  },
  {
    "text": "talk about persisting App State",
    "start": "1600440",
    "end": "1605019"
  },
  {
    "text": "so this is that example that I was telling you about where you're filling",
    "start": "1605539",
    "end": "1610700"
  },
  {
    "text": "out a form and you know you you run out of time and your session",
    "start": "1610700",
    "end": "1616820"
  },
  {
    "text": "expires and you have to do the whole thing over again",
    "start": "1616820",
    "end": "1623440"
  },
  {
    "text": "how horrible and it truly is",
    "start": "1623840",
    "end": "1630080"
  },
  {
    "text": "so for this demo I'm using a tool that uh Chris Santi wrote and Chris is",
    "start": "1630080",
    "end": "1637400"
  },
  {
    "text": "here in at NDC and he he's doing a talk or he did a talk uh he's written a lot",
    "start": "1637400",
    "end": "1644179"
  },
  {
    "text": "of tools he's written a lot of great components open source components for Blazer and one of them is local storage",
    "start": "1644179",
    "end": "1650799"
  },
  {
    "text": "blazered local storage right here Blazer local storage",
    "start": "1650799",
    "end": "1658039"
  },
  {
    "text": "and uh it's a nuget package there's you just Google it you'll find it and what",
    "start": "1658039",
    "end": "1663320"
  },
  {
    "text": "I'm doing with this is I'm using it to store to serialize the state and to store it",
    "start": "1663320",
    "end": "1669980"
  },
  {
    "text": "um in local storage now local storage you get five megabytes per URL per user",
    "start": "1669980",
    "end": "1676820"
  },
  {
    "text": "right so that's all you get so it's not like you're gonna stuff you",
    "start": "1676820",
    "end": "1681919"
  },
  {
    "text": "know thousand records in there you know that's not what it's for right",
    "start": "1681919",
    "end": "1687799"
  },
  {
    "text": "you get five megabytes so here I have a little bit of a different architecture I still have a",
    "start": "1687799",
    "end": "1695299"
  },
  {
    "text": "cascading value but this time the cascading value has an app State",
    "start": "1695299",
    "end": "1700820"
  },
  {
    "text": "Property so I have both in one and the reason I have both in one is I",
    "start": "1700820",
    "end": "1707600"
  },
  {
    "text": "don't want to serialize the cascading App State provider I just want to serialize App State now",
    "start": "1707600",
    "end": "1714260"
  },
  {
    "text": "I wrote this in net 5 when",
    "start": "1714260",
    "end": "1721520"
  },
  {
    "text": "uh the the state of system text Json was such that you couldn't",
    "start": "1721520",
    "end": "1728120"
  },
  {
    "text": "serialize uh properties with private setters and you could do it with newtonsoft Json",
    "start": "1728120",
    "end": "1735080"
  },
  {
    "text": "so this is and you can still do Newton soft Json so this is what you have to do",
    "start": "1735080",
    "end": "1741080"
  },
  {
    "text": "you have a private Setter on a property you have to set it as a Json property which means it will be serialized even",
    "start": "1741080",
    "end": "1747260"
  },
  {
    "text": "though it has a private setter so that's why I'm using Newton soft Json",
    "start": "1747260",
    "end": "1752840"
  },
  {
    "text": "but check this out so app state has the message the enabled the counter but it also has a time to live in",
    "start": "1752840",
    "end": "1759919"
  },
  {
    "text": "seconds so this is our timeout for storing the App State in local storage",
    "start": "1759919",
    "end": "1766399"
  },
  {
    "text": "and I just have it set to 60 seconds to demonstrate to be able to demonstrate up",
    "start": "1766399",
    "end": "1771740"
  },
  {
    "text": "here that if I wait 60 seconds which is easy to do on stage during a demo it",
    "start": "1771740",
    "end": "1777020"
  },
  {
    "text": "will no longer be available but for in the real world you're probably going to want that to live for what a day two",
    "start": "1777020",
    "end": "1783140"
  },
  {
    "text": "days two hours I don't know that's up to you uh and then a date time for last access",
    "start": "1783140",
    "end": "1790340"
  },
  {
    "text": "because I want to compare that obviously to the time to live in seconds how much time has elapsed since I last accessed",
    "start": "1790340",
    "end": "1797539"
  },
  {
    "text": "this now the rest of this update message update enabled update counter and notify",
    "start": "1797539",
    "end": "1804080"
  },
  {
    "text": "State it's all the same as in the service that we had",
    "start": "1804080",
    "end": "1811059"
  },
  {
    "text": "so you'll notice that we're not injecting it as a service because it is",
    "start": "1812779",
    "end": "1820159"
  },
  {
    "text": "uh hanging off of the cascading App State provider right",
    "start": "1820159",
    "end": "1826220"
  },
  {
    "text": "here's my local storage service and you can see here that I'm calling",
    "start": "1826220",
    "end": "1833600"
  },
  {
    "text": "wait let me close this calling local storage service get item as string async",
    "start": "1833600",
    "end": "1839779"
  },
  {
    "text": "Upstate Json and then I'm looking to see if it's not",
    "start": "1839779",
    "end": "1845419"
  },
  {
    "text": "null and again this is this is older code so it's not as efficient as it could be today",
    "start": "1845419",
    "end": "1851320"
  },
  {
    "text": "I'm deserializing the object and then I'm looking at last accessed",
    "start": "1851320",
    "end": "1856640"
  },
  {
    "text": "checking the date time and if it is within the window I'm setting App State",
    "start": "1856640",
    "end": "1864200"
  },
  {
    "text": "to that object otherwise I'm instantiating a new app state",
    "start": "1864200",
    "end": "1870320"
  },
  {
    "text": "now I have a save changes that's synchronous and one that's asynchronous",
    "start": "1870320",
    "end": "1875960"
  },
  {
    "text": "we're setting last accessed is now serializing the object and then storing",
    "start": "1875960",
    "end": "1881659"
  },
  {
    "text": "that in local storage and just in case you need a link to",
    "start": "1881659",
    "end": "1888640"
  },
  {
    "text": "something that shows you how much local storage you have and guess what it's five megabytes here's the link",
    "start": "1888640",
    "end": "1896380"
  },
  {
    "text": "uh again the appraiser we put the cascading App State provider around it",
    "start": "1896740",
    "end": "1904340"
  },
  {
    "text": "and you know our our toolbar looks very much the same",
    "start": "1904340",
    "end": "1911440"
  },
  {
    "text": "right except that when state has changed we're going to save it",
    "start": "1911960",
    "end": "1917179"
  },
  {
    "text": "right here in the toolbar this is the only place we're going to save it even though we're accessing it in the",
    "start": "1917179",
    "end": "1924559"
  },
  {
    "text": "index page we're not going to save it there right we're just going to invoke status",
    "start": "1924559",
    "end": "1930919"
  },
  {
    "text": "changed so let's do this demo",
    "start": "1930919",
    "end": "1937000"
  },
  {
    "text": "value cannot be no yes",
    "start": "1953740",
    "end": "1960220"
  },
  {
    "text": "is there a reason why why I wouldn't want to have the save in",
    "start": "1967519",
    "end": "1973460"
  },
  {
    "text": "of the state itself oh yeah because you can't you can't deserialize yourself and replace yourself",
    "start": "1973460",
    "end": "1980539"
  },
  {
    "text": "that's why yeah yeah um maybe I already in what's occurring",
    "start": "1980539",
    "end": "1987919"
  },
  {
    "text": "to me here is I get this error cannot be no is that it might be this guy right",
    "start": "1987919",
    "end": "1994460"
  },
  {
    "text": "here is something that's already living on my",
    "start": "1994460",
    "end": "2000360"
  },
  {
    "text": "in my application here so let's just change that",
    "start": "2001600",
    "end": "2006720"
  },
  {
    "text": "one more time",
    "start": "2010360",
    "end": "2013140"
  },
  {
    "text": "that's awesome that's so awesome all right let's see",
    "start": "2016240",
    "end": "2023140"
  },
  {
    "text": "here I can figure this out just run it one more time",
    "start": "2023140",
    "end": "2030299"
  },
  {
    "text": "foreign",
    "start": "2031240",
    "end": "2033480"
  },
  {
    "text": "tool called debugging break point",
    "start": "2039179",
    "end": "2044380"
  },
  {
    "text": "I'm going to put one right there and by the way",
    "start": "2044380",
    "end": "2050520"
  },
  {
    "text": "oh yeah okay so this is actually a webassembly application that's why",
    "start": "2050619",
    "end": "2057898"
  },
  {
    "text": "that's what's going on here and I might not actually get that break point because it's a webassembly",
    "start": "2058179",
    "end": "2064540"
  },
  {
    "text": "application",
    "start": "2064540",
    "end": "2067020"
  },
  {
    "text": "value cannot be null parameter input yeah this is awesome",
    "start": "2070659",
    "end": "2077079"
  },
  {
    "text": "it's just great",
    "start": "2077079",
    "end": "2080040"
  },
  {
    "text": "no I didn't need to do that because it is a parameter of",
    "start": "2084820",
    "end": "2090878"
  },
  {
    "text": "um injected no we're not in the sorry",
    "start": "2090879",
    "end": "2098700"
  },
  {
    "text": "um let me check I didn't think I did I don't think I had to because it is a",
    "start": "2102760",
    "end": "2107980"
  },
  {
    "text": "property oh yeah I'm injecting local storage yeah",
    "start": "2107980",
    "end": "2114060"
  },
  {
    "text": "that's great input input",
    "start": "2116680",
    "end": "2123160"
  },
  {
    "text": "foreign builds no problem all right let's",
    "start": "2125440",
    "end": "2134740"
  },
  {
    "text": "see if I can do something else here John you have a",
    "start": "2134740",
    "end": "2141339"
  },
  {
    "text": "um a repo I can download that does this",
    "start": "2141339",
    "end": "2146220"
  },
  {
    "text": "storage right all right let's try let's go back the Blazer train and",
    "start": "2147040",
    "end": "2153760"
  },
  {
    "text": "download it again oh I know what I can do to get this show video of it working",
    "start": "2153760",
    "end": "2160560"
  },
  {
    "text": "yes yes I can",
    "start": "2160900",
    "end": "2164880"
  },
  {
    "text": "persisting App State so we're going to go toward the end here",
    "start": "2169300",
    "end": "2176400"
  },
  {
    "text": "hi I'm Carl Franklin hey Carl Franklin how are you",
    "start": "2177040",
    "end": "2182400"
  },
  {
    "text": "let's go toward the end and",
    "start": "2182500",
    "end": "2188200"
  },
  {
    "text": "create it it's exactly it's okay",
    "start": "2188200",
    "end": "2193780"
  },
  {
    "text": "it's within what's wrong that's 113 bytes by the way we can update the message update the",
    "start": "2193780",
    "end": "2201460"
  },
  {
    "text": "message here updating the child component just like we did before now let's close the app",
    "start": "2201460",
    "end": "2209619"
  },
  {
    "text": "run it again within 60 seconds and there it is this is exactly the way we left it",
    "start": "2209619",
    "end": "2215380"
  },
  {
    "text": "so you're gonna have to trust me",
    "start": "2215380",
    "end": "2218700"
  },
  {
    "text": "and look 90 seconds later",
    "start": "2221079",
    "end": "2224820"
  },
  {
    "text": "there you go all right so there's one other thing I want to bring to your attention",
    "start": "2227320",
    "end": "2234280"
  },
  {
    "text": "which is new is kind of new to me because I was never really a Redux uh",
    "start": "2234280",
    "end": "2239859"
  },
  {
    "text": "person or or but there's um",
    "start": "2239859",
    "end": "2245380"
  },
  {
    "text": "a tool called fluxor and I have a managing app state with fluxor which uses the flux pattern but",
    "start": "2245380",
    "end": "2253420"
  },
  {
    "text": "it's all C sharp and it's all for Blazer so anybody do Redux",
    "start": "2253420",
    "end": "2261700"
  },
  {
    "text": "and yeah okay and react so it's that pattern it's the same flux pattern where",
    "start": "2261700",
    "end": "2268480"
  },
  {
    "text": "you have a state and you have a manager and you've got a store and then you have",
    "start": "2268480",
    "end": "2274000"
  },
  {
    "text": "a dispatcher and you know there's a lot of stuff and there's a lot of steps in here",
    "start": "2274000",
    "end": "2279040"
  },
  {
    "text": "but it does work and it is really cool and I guess the whole reason that you would use this",
    "start": "2279040",
    "end": "2284740"
  },
  {
    "text": "is it the state is immutable so rather than",
    "start": "2284740",
    "end": "2290140"
  },
  {
    "text": "uh rather than just changing the state from from somewhere and then getting you",
    "start": "2290140",
    "end": "2295780"
  },
  {
    "text": "know knowing who changed it right like I do you replace the state and you have",
    "start": "2295780",
    "end": "2302020"
  },
  {
    "text": "the the prescriptive architecture is as you said to have different State uh",
    "start": "2302020",
    "end": "2310420"
  },
  {
    "text": "stores for each task that you want to perform right so whereas you know you might have",
    "start": "2310420",
    "end": "2317859"
  },
  {
    "text": "one for um adding something to your shopping cart that's a completely separate State",
    "start": "2317859",
    "end": "2324940"
  },
  {
    "text": "bag if you will and it's completely separate store because it only deals with those things if you want something that is shared",
    "start": "2324940",
    "end": "2332560"
  },
  {
    "text": "among you know a task where different components have to know when that state",
    "start": "2332560",
    "end": "2337660"
  },
  {
    "text": "changes then those guys can can handle the state in in there without",
    "start": "2337660",
    "end": "2343480"
  },
  {
    "text": "fear of stepping on uh each other",
    "start": "2343480",
    "end": "2349060"
  },
  {
    "text": "um I don't know I'm not convinced that this is a really good way to go it's a bit complex and you know my my colleague",
    "start": "2349060",
    "end": "2356800"
  },
  {
    "text": "uh Dom wiebea from Dev expresses also feels the same that it is cool but it's a lot it's a",
    "start": "2356800",
    "end": "2365680"
  },
  {
    "text": "lot of stuff there so I would start with the cascading option and if you need to",
    "start": "2365680",
    "end": "2372220"
  },
  {
    "text": "get control Beyond um you know if you need to hook an event when somebody else mutates the state",
    "start": "2372220",
    "end": "2377880"
  },
  {
    "text": "then you could use the uh the service the scope service if you want to persist",
    "start": "2377880",
    "end": "2384099"
  },
  {
    "text": "it you can use both you can have the app State service hanging as a property off",
    "start": "2384099",
    "end": "2389680"
  },
  {
    "text": "of your app State provider which you can then use to serialize and deserialize that and store it somewhere it doesn't",
    "start": "2389680",
    "end": "2397420"
  },
  {
    "text": "have to be local storage either it could be you know in a database it could be in a cookie I guess if you",
    "start": "2397420",
    "end": "2404260"
  },
  {
    "text": "really want to it could be in a sqlite database you know so that that is pretty much it I mean if",
    "start": "2404260",
    "end": "2412060"
  },
  {
    "text": "you have any other questions I'll be happy to take them now",
    "start": "2412060",
    "end": "2417000"
  },
  {
    "text": "yeah which is better indexeddb or sqlite um indexeddb has been classically the",
    "start": "2435060",
    "end": "2441760"
  },
  {
    "text": "way people go but sqlite is kind of like the new hotness with blazer",
    "start": "2441760",
    "end": "2447040"
  },
  {
    "text": "um I don't know does anybody else have an opinion on that I haven't used either really so with blazer",
    "start": "2447040",
    "end": "2453940"
  },
  {
    "text": "anyone yeah yeah I I think if you're getting more",
    "start": "2453940",
    "end": "2460240"
  },
  {
    "text": "than five megabytes of State you might want to reconsider what's going in there but I have no idea",
    "start": "2460240",
    "end": "2468339"
  },
  {
    "text": "what your application is so I don't know yeah you might want to use a database on",
    "start": "2468339",
    "end": "2474160"
  },
  {
    "text": "the server side instead anybody else questions",
    "start": "2474160",
    "end": "2480060"
  },
  {
    "text": "I have a question how come I can't get heavy cream in London anywhere",
    "start": "2481480",
    "end": "2488140"
  },
  {
    "text": "double cream yeah how come I can't get that yeah I know but the Barista is like the coffee places they're like",
    "start": "2488140",
    "end": "2495940"
  },
  {
    "text": "why would you want that never all right well that's my talk you're getting out a little early thanks",
    "start": "2495940",
    "end": "2503940"
  }
]