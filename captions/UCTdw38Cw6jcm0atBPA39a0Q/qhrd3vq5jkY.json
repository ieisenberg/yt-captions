[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "all right welcome everybody thank you for coming i hope you're having a great day here of day one of nbc oslo i am",
    "start": "8080",
    "end": "16080"
  },
  {
    "text": "absolutely crushed that i cannot be there with you but it is not all bad in the sense that uh",
    "start": "16080",
    "end": "23519"
  },
  {
    "text": "it is 8 20 a.m here in phoenix arizona usa",
    "start": "23519",
    "end": "28640"
  },
  {
    "text": "and it is a balmy about 17 degrees celsius outside so as soon as this",
    "start": "28640",
    "end": "34320"
  },
  {
    "text": "presentation is over i'm going to be opening up all the windows in the house and enjoying that so uh it's not all",
    "start": "34320",
    "end": "41520"
  },
  {
    "text": "terrible um i am a solution architect at uh carvana and uh i'm i tweet at bs stall and one",
    "start": "41520",
    "end": "49760"
  },
  {
    "text": "of the things i just tweeted was the uh link to the slide deck for that the exact one that you'll be seeing",
    "start": "49760",
    "end": "56399"
  },
  {
    "text": "here back to see we can kind of hopefully you can see that zooming in",
    "start": "56399",
    "end": "62719"
  },
  {
    "text": "now this is a good test of the uh zoom capability that doesn't look like",
    "start": "62719",
    "end": "68320"
  },
  {
    "text": "it's going to work so we'll have to keep that in mind i'll try and make the fonts as big as possible when we're looking at code",
    "start": "68320",
    "end": "75680"
  },
  {
    "text": "so um you may know me",
    "start": "75680",
    "end": "81360"
  },
  {
    "text": "as the guy that keeps a list of his favorite physicists and favorite favorite mathematicians",
    "start": "81360",
    "end": "87280"
  },
  {
    "text": "i see zooming did work excellent um so that is probably all you really need to know about me the fact that i have such",
    "start": "87280",
    "end": "94320"
  },
  {
    "text": "a list but there are other things that are kind of important to know too i do work for carvana we are disrupting the",
    "start": "94320",
    "end": "100720"
  },
  {
    "text": "uh used car space here in the u.s uh we don't have an international presence yet but for",
    "start": "100720",
    "end": "106640"
  },
  {
    "text": "those who are from the us i don't expect an international presence very soon",
    "start": "106640",
    "end": "112960"
  },
  {
    "text": "from carvana but it is an amazing place so uh uh check it out if you're",
    "start": "112960",
    "end": "118320"
  },
  {
    "text": "in the u.s uh i also uh contribute to and shepherd a number of",
    "start": "118320",
    "end": "124799"
  },
  {
    "text": "open source projects none of these are particularly germane to this talk uh but",
    "start": "124799",
    "end": "129840"
  },
  {
    "text": "there is one that may be coming out soon i'm hoping um that would be very germane to this i",
    "start": "129840",
    "end": "136640"
  },
  {
    "text": "won't be talking about that today but maybe next summer at nbc oslo as well",
    "start": "136640",
    "end": "142879"
  },
  {
    "text": "hopefully all right the other thing i do is i'm one of the",
    "start": "142879",
    "end": "147920"
  },
  {
    "text": "founders of arizona's give camp so give camp is an international organization",
    "start": "147920",
    "end": "152959"
  },
  {
    "text": "where we put a bunch of software creators together in a room for a weekend with a bunch of great local",
    "start": "152959",
    "end": "159440"
  },
  {
    "text": "charities and we code for those charities for that weekend um and as a former ndc",
    "start": "159440",
    "end": "165200"
  },
  {
    "text": "speaker has said sleep is optional caffeine is provided so",
    "start": "165200",
    "end": "170640"
  },
  {
    "text": "they are all over the place although obviously covet has put a bit of a damper on much of our activities",
    "start": "170640",
    "end": "177040"
  },
  {
    "text": "i encourage you to check out givecamp.org and see if there's one in your area and if there isn't one maybe",
    "start": "177040",
    "end": "182879"
  },
  {
    "text": "you want to start one feel free to ping me for information and or advice",
    "start": "182879",
    "end": "190080"
  },
  {
    "start": "190000",
    "end": "510000"
  },
  {
    "text": "all right so we're here to talk about reliability patterns today and so we're going to use",
    "start": "190080",
    "end": "195440"
  },
  {
    "text": "this very very simple example of two things that result in a",
    "start": "195440",
    "end": "201920"
  },
  {
    "text": "change to system state these are two things that we need to have happen so the example we're going",
    "start": "201920",
    "end": "207280"
  },
  {
    "text": "to use is sending an email and writing a state to the database",
    "start": "207280",
    "end": "213599"
  },
  {
    "text": "but these are really proxies for any two state updates within a system so you can",
    "start": "213599",
    "end": "219519"
  },
  {
    "text": "think about this in any context but these are the two examples we're going to work with today and our example system might look",
    "start": "219519",
    "end": "225920"
  },
  {
    "text": "something like this to start off with uh it might be a",
    "start": "225920",
    "end": "231040"
  },
  {
    "text": "a web a user connects through a web client to a web service and the web service inside its web",
    "start": "231040",
    "end": "237920"
  },
  {
    "text": "method sends the email and saves to the database",
    "start": "237920",
    "end": "243360"
  },
  {
    "text": "and that might result in some code like this um",
    "start": "243360",
    "end": "248400"
  },
  {
    "text": "there's you know that's pretty straightforward i mean you'll have to kind of trust me that the code does what",
    "start": "248400",
    "end": "255439"
  },
  {
    "text": "it says it does although all of this code is in git github and is linked in the uh",
    "start": "255439",
    "end": "262320"
  },
  {
    "text": "slide deck that i tweeted out so uh you do have access to all of this code",
    "start": "262320",
    "end": "269840"
  },
  {
    "text": "this particular example does a lot of the right things it traps for errors in each",
    "start": "270080",
    "end": "276240"
  },
  {
    "text": "of these methods it retries multiple times if it can't",
    "start": "276240",
    "end": "281759"
  },
  {
    "text": "if it doesn't do what it should do so it does many of the",
    "start": "281759",
    "end": "288320"
  },
  {
    "text": "things we would think of so what does that result in",
    "start": "288320",
    "end": "293680"
  },
  {
    "text": "what we end up with is these possible conditions",
    "start": "293680",
    "end": "298720"
  },
  {
    "text": "so our happy path if everything succeeds great we're in a perfectly good",
    "start": "298720",
    "end": "305280"
  },
  {
    "text": "situation and all as well however when things don't work perfectly",
    "start": "305280",
    "end": "312240"
  },
  {
    "text": "what are we left with well if our first task fails that's the send of the email",
    "start": "312240",
    "end": "318960"
  },
  {
    "text": "we're probably still okay we've done nothing but we've done nothing so it's okay because",
    "start": "318960",
    "end": "325600"
  },
  {
    "text": "we can just kind of retry later and know what state we're in we're in a known state we've",
    "start": "325600",
    "end": "331199"
  },
  {
    "text": "failed but we've failed completely the hard part the bad part is when we get into that",
    "start": "331199",
    "end": "337360"
  },
  {
    "text": "second that last box here where the we've sent the email",
    "start": "337360",
    "end": "343360"
  },
  {
    "text": "but the database update failed now we've got a problem now we're in a situation where",
    "start": "343360",
    "end": "351360"
  },
  {
    "text": "it's going to be hard to remediate it's going to be hard to uh to do something about it's not a good situation to be in",
    "start": "351360",
    "end": "356960"
  },
  {
    "text": "so what can we do about that well a standard example something that i've done in the past i know and i know other",
    "start": "356960",
    "end": "363360"
  },
  {
    "text": "people have done as well is to say well why don't we wrap that database call in a transaction and then",
    "start": "363360",
    "end": "370000"
  },
  {
    "text": "do the email send in the middle so something more like this",
    "start": "370000",
    "end": "375120"
  },
  {
    "text": "where the first step is to begin a transaction do the email send and then all we have",
    "start": "375120",
    "end": "380960"
  },
  {
    "text": "to do at the end is commit that database transaction and we're good",
    "start": "380960",
    "end": "386560"
  },
  {
    "text": "that should be pretty safe right well let's look at what that actually results",
    "start": "386560",
    "end": "393600"
  },
  {
    "text": "in here first of all we've now kind of split that middle that middle box so in the previous one we had",
    "start": "393600",
    "end": "400960"
  },
  {
    "text": "a a box where we were okay because nothing happened",
    "start": "400960",
    "end": "406960"
  },
  {
    "text": "but you know we were in a known state nothing happened now we've got two different conditions that cause that",
    "start": "406960",
    "end": "413440"
  },
  {
    "text": "if the database uh if the begin transaction fails",
    "start": "413440",
    "end": "420879"
  },
  {
    "text": "nothing is done and we roll back if the email send fails that's fine because",
    "start": "421120",
    "end": "428479"
  },
  {
    "text": "we'll roll back the database transactions so we're still good we haven't made any state changes to the system",
    "start": "428479",
    "end": "434319"
  },
  {
    "text": "but we still have this last box here that's a real problem where if we fail on commit",
    "start": "434319",
    "end": "442080"
  },
  {
    "text": "we're still in in a bad situation now the question is how often does that",
    "start": "442080",
    "end": "447759"
  },
  {
    "text": "happen do we really fail on commit and i at least and i suspect others as well",
    "start": "447759",
    "end": "455759"
  },
  {
    "text": "didn't fully understand how the service level agreements work with",
    "start": "455759",
    "end": "461280"
  },
  {
    "text": "our dependencies like databases it turns out that if you look at just about any service level agreement they're not",
    "start": "461280",
    "end": "468000"
  },
  {
    "text": "based on number of actions they're based on time how long a transaction is open or how",
    "start": "468000",
    "end": "475199"
  },
  {
    "text": "long any activity is open tells you how likely it is to fail",
    "start": "475199",
    "end": "482080"
  },
  {
    "text": "so the longer a action is being taken the more likely there is to be a network",
    "start": "482160",
    "end": "487440"
  },
  {
    "text": "failure during that time or a hardware failure or something like that so this because the transaction is open",
    "start": "487440",
    "end": "494560"
  },
  {
    "text": "for a fairly long time is actually more likely to fail than the previous one even though that seems counterintuitive",
    "start": "494560",
    "end": "502960"
  },
  {
    "text": "so where does that leave us well first of all we should always try to",
    "start": "504560",
    "end": "511599"
  },
  {
    "start": "510000",
    "end": "733000"
  },
  {
    "text": "retry we should do always assume that our upstream is going to retry if there's a failure so if we assume that",
    "start": "511599",
    "end": "518880"
  },
  {
    "text": "we've kind of got two different ways we can treat right now in this in this context we've got two different ways we",
    "start": "518880",
    "end": "525200"
  },
  {
    "text": "can treat the uh our failure like we can either continue",
    "start": "525200",
    "end": "532000"
  },
  {
    "text": "if we fail or we can what i called roll back here in this which is really throwing an exception at",
    "start": "532000",
    "end": "538080"
  },
  {
    "text": "this point and that's so those are listed along the top here what these scenarios are",
    "start": "538080",
    "end": "545839"
  },
  {
    "text": "and then along the left side we've got the different conditions that we could run into where we could have",
    "start": "545839",
    "end": "552000"
  },
  {
    "text": "both tasks succeed both tasks fail or combinations there up and what we end up with is",
    "start": "552000",
    "end": "559680"
  },
  {
    "text": "some some states that i just consider [Music] not good at all and those things that we",
    "start": "559680",
    "end": "566000"
  },
  {
    "text": "should never use that's continue on either task failure or continue with a fails but roll back if b",
    "start": "566000",
    "end": "571760"
  },
  {
    "text": "fails although this you could consider a special case of this second one which is rollback if a fails and continue with b",
    "start": "571760",
    "end": "578000"
  },
  {
    "text": "file so let's talk to these two that are here in yellow the um the second column and the fourth column",
    "start": "578000",
    "end": "584640"
  },
  {
    "text": "so this one the rollback if a fails and continue if b fails",
    "start": "584640",
    "end": "590800"
  },
  {
    "text": "what that does is it actually works in most scenarios if um and i've changed my uh my graphics",
    "start": "590800",
    "end": "598160"
  },
  {
    "text": "here a little bit um but the uh if both tests succeed we're always going",
    "start": "598160",
    "end": "603760"
  },
  {
    "text": "to be good but if a succeeds and b fails since we're rolling back on a",
    "start": "603760",
    "end": "611600"
  },
  {
    "text": "um and continuing on b we're going to end up having done a but not b",
    "start": "611760",
    "end": "620079"
  },
  {
    "text": "but if b you know if a fails we're going to roll back completely nothing will have been done and then",
    "start": "621200",
    "end": "626959"
  },
  {
    "text": "we'll retry it the client will be okay so this scenario is okay",
    "start": "626959",
    "end": "632399"
  },
  {
    "text": "if we don't care about action b so i actually consider this the logging",
    "start": "632399",
    "end": "637519"
  },
  {
    "text": "scenario if we're making a state change to the to the system and",
    "start": "637519",
    "end": "642640"
  },
  {
    "text": "logging it or doing something else that is not critical to the operation",
    "start": "642640",
    "end": "648160"
  },
  {
    "text": "then we're okay um so i consider logging to be one of those examples and now i'd say under",
    "start": "648160",
    "end": "654560"
  },
  {
    "text": "these circumstances under a situation like logging it's okay to do this",
    "start": "654560",
    "end": "661200"
  },
  {
    "text": "likewise there's this fourth column here where",
    "start": "661200",
    "end": "666720"
  },
  {
    "text": "the weirdness comes if a succeeds in b fails",
    "start": "666720",
    "end": "672480"
  },
  {
    "text": "and we're roll rolling back if either task fails what that's going to do is since a",
    "start": "672480",
    "end": "677760"
  },
  {
    "text": "succeeded but b failed we're going to roll back and we're going to try again and what happens is a is going to get double",
    "start": "677760",
    "end": "684399"
  },
  {
    "text": "tapped here a is going to get executed twice so if that's sending an email",
    "start": "684399",
    "end": "689920"
  },
  {
    "text": "we're going to send two emails off this is what i consider to be the item potent solution",
    "start": "689920",
    "end": "695920"
  },
  {
    "text": "and that is it's okay to do this if this first task",
    "start": "695920",
    "end": "702480"
  },
  {
    "text": "is item potent can be done over and over again without causing problems and we'll talk more",
    "start": "702480",
    "end": "708160"
  },
  {
    "text": "about item potence here in just a few minutes so what does this mean",
    "start": "708160",
    "end": "713920"
  },
  {
    "text": "knowing that we have all these different scenarios and if we're trying to do two things",
    "start": "713920",
    "end": "721440"
  },
  {
    "text": "and we can only we have this logging scenario that's kind of okay and we have this item",
    "start": "721600",
    "end": "726880"
  },
  {
    "text": "potent scenario that's kind of okay where does that leave us with our applications",
    "start": "726880",
    "end": "734000"
  },
  {
    "start": "733000",
    "end": "781000"
  },
  {
    "text": "and what it comes down to is this it is not possible to reliably make more",
    "start": "734000",
    "end": "739600"
  },
  {
    "text": "than one state change to a system in a single execution context",
    "start": "739600",
    "end": "745839"
  },
  {
    "text": "you can't reliably do it now it's okay to do if the first one is item potent the",
    "start": "745839",
    "end": "752000"
  },
  {
    "text": "first change is item potent or the second change is made unreliably like in our logging example",
    "start": "752000",
    "end": "758240"
  },
  {
    "text": "but if we're making two important changes to system state",
    "start": "758240",
    "end": "763600"
  },
  {
    "text": "and one and neither of them is item potent we cannot do it reliably",
    "start": "763920",
    "end": "771639"
  },
  {
    "text": "so what does all that mean well let's talk about item potentials first item potency is one good way of of uh helping",
    "start": "772560",
    "end": "778800"
  },
  {
    "text": "solve these problems so let's talk about it item potence uh is the ability to",
    "start": "778800",
    "end": "784320"
  },
  {
    "text": "execute a task some arbitrary number of times and have it be the same as if you",
    "start": "784320",
    "end": "789600"
  },
  {
    "text": "executed it once so the kind of canonical example here is these train controls",
    "start": "789600",
    "end": "796000"
  },
  {
    "text": "um that big green start button there the train's off you hit the start button train starts up hopefully",
    "start": "796000",
    "end": "803200"
  },
  {
    "text": "um you hit that start button again nothing new happens because the train remains in a started state so you can",
    "start": "803200",
    "end": "810160"
  },
  {
    "text": "hit that button as many times as you want and the train is going to remain started so it's the same as if it",
    "start": "810160",
    "end": "815839"
  },
  {
    "text": "executed only once the stop button is the same way there are a number of operations",
    "start": "815839",
    "end": "823680"
  },
  {
    "text": "computationally that we can do that are item potent operations uh the absolute value function is one",
    "start": "823680",
    "end": "831360"
  },
  {
    "text": "and there's actually some useful ones too um so first of all anything that's not making",
    "start": "831360",
    "end": "838160"
  },
  {
    "text": "a change to state is item potent right if you're not making a state change you can do it as",
    "start": "838160",
    "end": "844000"
  },
  {
    "text": "many times as you want and the state is going to remain the same so you can say read from a database",
    "start": "844000",
    "end": "850000"
  },
  {
    "text": "and that's not you know there's no there's no state changes there so that's an idempotent operation",
    "start": "850000",
    "end": "855519"
  },
  {
    "text": "another one is a database upsert as long as you send the key along with",
    "start": "855519",
    "end": "861279"
  },
  {
    "text": "all the data that you need to upsert into the database then what",
    "start": "861279",
    "end": "867040"
  },
  {
    "text": "happens well the first time you execute it if you have no data in there at all it inserts the row",
    "start": "867040",
    "end": "872959"
  },
  {
    "text": "and then the next time you execute it since you sent it the key it will see that that key is already",
    "start": "872959",
    "end": "878079"
  },
  {
    "text": "there and i'll just update it and since it's all the same data it updates it with the same thing so database upserts are another example of",
    "start": "878079",
    "end": "885839"
  },
  {
    "text": "item potent operations these are the things that if we execute them multiple times it's all right",
    "start": "885839",
    "end": "893680"
  },
  {
    "text": "so that we can use those to help us make our systems more reliable and less",
    "start": "893680",
    "end": "898880"
  },
  {
    "text": "prone to failures but what all this tells us",
    "start": "898880",
    "end": "904079"
  },
  {
    "text": "this um these states and this these requirements is that we need to try to avoid",
    "start": "904079",
    "end": "912320"
  },
  {
    "text": "dual rights this dual rights anti-pattern so let's",
    "start": "912320",
    "end": "917360"
  },
  {
    "text": "talk about that let's figure out what that is define it and then figure out ways we can avoid it",
    "start": "917360",
    "end": "923199"
  },
  {
    "text": "so a dual right is an attempt to make more than one reliable reliable change",
    "start": "923199",
    "end": "928959"
  },
  {
    "text": "to a system state in a single invocation now there's some words in there that",
    "start": "928959",
    "end": "935199"
  },
  {
    "text": "probably need to be defined so let me uh drill into them a little bit uh in this case what i mean by",
    "start": "935199",
    "end": "941759"
  },
  {
    "text": "reliable is can be expected to occur exactly once in that context",
    "start": "941759",
    "end": "946800"
  },
  {
    "text": "and and really maybe it should say once or zero times in that single",
    "start": "946800",
    "end": "952000"
  },
  {
    "text": "execution context you'll either know it fails or know it succeeds one or the other",
    "start": "952000",
    "end": "958320"
  },
  {
    "text": "and that of course is very dependent on the reliability of the execution environment and such",
    "start": "959440",
    "end": "965279"
  },
  {
    "text": "by change i mean an atomic operation a topic an atomic modification so",
    "start": "965519",
    "end": "970959"
  },
  {
    "text": "you can change as many tables in a relational database for example as you want as long as it's made in a single",
    "start": "970959",
    "end": "976639"
  },
  {
    "text": "transaction one atomic update and then the hardest part of this to",
    "start": "976639",
    "end": "981759"
  },
  {
    "text": "define is an invocation a single invocation what do i mean by that",
    "start": "981759",
    "end": "987360"
  },
  {
    "text": "and maybe the easiest way to uh demonstrate this is with an example and that's the say a web method",
    "start": "987360",
    "end": "993519"
  },
  {
    "text": "so i'm going to send a signal an http call to a web method",
    "start": "993519",
    "end": "1000320"
  },
  {
    "text": "what executes between getting that call and returning the response to the external that's a single",
    "start": "1000560",
    "end": "1007360"
  },
  {
    "text": "invocation so it's one response to a user signal and if we try and do two things in there",
    "start": "1007360",
    "end": "1014880"
  },
  {
    "text": "we may have problems if one fails and one doesn't so we want to avoid making",
    "start": "1014880",
    "end": "1021120"
  },
  {
    "text": "one more than one reliable change or more than one change that needs to be reliable",
    "start": "1021120",
    "end": "1027199"
  },
  {
    "text": "to system state in a single invocation a single execution context",
    "start": "1027199",
    "end": "1034000"
  },
  {
    "text": "and the thing about these are these are really difficult problems to solve when they occur",
    "start": "1034000",
    "end": "1040240"
  },
  {
    "start": "1036000",
    "end": "1152000"
  },
  {
    "text": "these are usually results of hardware changes or network failures or something",
    "start": "1040240",
    "end": "1045520"
  },
  {
    "text": "like that and of course we're all running on on commodity hardware in the cloud right and we have all these all",
    "start": "1045520",
    "end": "1051919"
  },
  {
    "text": "kinds of network hops in between our actions and our users and such um and so what ends up happening is",
    "start": "1051919",
    "end": "1059840"
  },
  {
    "text": "because they are unpredictable errors they manifest in very different ways when they're",
    "start": "1059840",
    "end": "1066960"
  },
  {
    "text": "when there's dual rights involved or multiple rights involved so we could end up with duplicated duplicated data or",
    "start": "1066960",
    "end": "1074559"
  },
  {
    "text": "missing data or missing actions it can be incomplete and the thing about these are",
    "start": "1074559",
    "end": "1082160"
  },
  {
    "text": "supporting these can be really really difficult because you don't have first of all we",
    "start": "1082160",
    "end": "1088160"
  },
  {
    "text": "don't know what they look like because they are they're always different so there's no way to say oh i i know i've",
    "start": "1088160",
    "end": "1093360"
  },
  {
    "text": "seen this error before because they're all different errors generally and our tools don't",
    "start": "1093360",
    "end": "1101120"
  },
  {
    "text": "directly support them because our tools like if we had a web method that had",
    "start": "1101120",
    "end": "1106559"
  },
  {
    "text": "multiple act actions in it and one of them succeeded and one of them failed we can't just call that web method with the",
    "start": "1106559",
    "end": "1112880"
  },
  {
    "text": "proper data because one of them already succeeded we only need to do the other one",
    "start": "1112880",
    "end": "1119919"
  },
  {
    "text": "so our tooling is also much more difficult so what we end up doing for a lot of these kind of things is creating",
    "start": "1119919",
    "end": "1126160"
  },
  {
    "text": "one-off database scripts to handle these problems to do updates things like that",
    "start": "1126160",
    "end": "1132480"
  },
  {
    "text": "if you find yourself doing a lot of one-off database updates that may be a smell",
    "start": "1132480",
    "end": "1138480"
  },
  {
    "text": "that you've got this kind of problem so something we want to avoid these are",
    "start": "1138480",
    "end": "1143760"
  },
  {
    "text": "your nights and weekends that you're spending troubleshooting and supporting these activities on these uh",
    "start": "1143760",
    "end": "1149679"
  },
  {
    "text": "applications so avoid dual rights keep it separate keep",
    "start": "1149679",
    "end": "1156799"
  },
  {
    "start": "1152000",
    "end": "1224000"
  },
  {
    "text": "action separate in order to keep them safe so what we're going to do now is we're",
    "start": "1156799",
    "end": "1162160"
  },
  {
    "text": "going to spend the rest of this talk talking through some patterns that will help us keep it separate",
    "start": "1162160",
    "end": "1169679"
  },
  {
    "text": "we're going to have we're going to talk about three very similar isolation patterns that allow us to separate those",
    "start": "1169679",
    "end": "1176240"
  },
  {
    "text": "activities into different um execution contexts do them individually do one thing at a",
    "start": "1176240",
    "end": "1182559"
  },
  {
    "text": "time so that that one thing can either succeed or fail and then we can react to it downstream",
    "start": "1182559",
    "end": "1190080"
  },
  {
    "text": "so we're going to look at these three uh three isolation patterns transactional outbox change data capture and data",
    "start": "1190080",
    "end": "1195600"
  },
  {
    "text": "streaming and then we're going to look at the saga pattern and two different ways",
    "start": "1195600",
    "end": "1201200"
  },
  {
    "text": "to implement that to bring all of those together so we have all these individual services that are",
    "start": "1201200",
    "end": "1207919"
  },
  {
    "text": "using these isolation patterns and then we'll use these coordination patterns to put it all together",
    "start": "1207919",
    "end": "1216240"
  },
  {
    "text": "and the all three of these isolation patterns transactional outbox cdc change data capture and um streaming",
    "start": "1217120",
    "end": "1224640"
  },
  {
    "text": "all really look something like this for our example so we still have the user that is",
    "start": "1224640",
    "end": "1234000"
  },
  {
    "text": "making a request and that request is still stored in a some form of a data store",
    "start": "1234000",
    "end": "1240880"
  },
  {
    "text": "i'm being in specific about what kind here but the big difference is",
    "start": "1240880",
    "end": "1246400"
  },
  {
    "text": "then downstream of that is where we're going to grab that and send the email",
    "start": "1246400",
    "end": "1252000"
  },
  {
    "text": "and all three of these patterns will do basically this it's just the implementation and when they're best",
    "start": "1252000",
    "end": "1257440"
  },
  {
    "text": "used uh that changes so let's talk about the first of these",
    "start": "1257440",
    "end": "1262799"
  },
  {
    "text": "let's talk about transactional outbox and when i think of transactional outbox i usually think of something like a sql",
    "start": "1262799",
    "end": "1269039"
  },
  {
    "start": "1265000",
    "end": "1336000"
  },
  {
    "text": "server but many many database servers support",
    "start": "1269039",
    "end": "1274559"
  },
  {
    "text": "this kind of in fact anything i believe where yeah any any database that you can make and it's a uh that supports",
    "start": "1274559",
    "end": "1281919"
  },
  {
    "text": "transactions where you can make an atomic update that has two different components to it will work for",
    "start": "1281919",
    "end": "1288840"
  },
  {
    "text": "this um so the goal of transactional outbox is to reliably update a data store",
    "start": "1288840",
    "end": "1296320"
  },
  {
    "text": "and then trigger an additional action just like we saw on the last",
    "start": "1296320",
    "end": "1301440"
  },
  {
    "text": "chart we're gonna update the database in this case and then we're going to trigger an",
    "start": "1301440",
    "end": "1306720"
  },
  {
    "text": "action downstream so what we do is we make a single write to that database so our user request comes in",
    "start": "1306720",
    "end": "1313120"
  },
  {
    "text": "and we make a single atomic write to the database but we're going to write two things in that transaction",
    "start": "1313120",
    "end": "1319280"
  },
  {
    "text": "we're going to write the state chains that we want to make and we're going to also separately write",
    "start": "1319280",
    "end": "1324960"
  },
  {
    "text": "a command that's going to be used to execute a secondary process and that's what's going to be used to",
    "start": "1324960",
    "end": "1331280"
  },
  {
    "text": "send our email it might look something like this",
    "start": "1331280",
    "end": "1337039"
  },
  {
    "start": "1336000",
    "end": "1460000"
  },
  {
    "text": "this is a sequence diagram and you can see that in this case the user is making",
    "start": "1337039",
    "end": "1342960"
  },
  {
    "text": "a request from the request service that request service updates the sql database",
    "start": "1342960",
    "end": "1349440"
  },
  {
    "text": "uh which then responds that it was successful and then we have the separate email",
    "start": "1349440",
    "end": "1355520"
  },
  {
    "text": "service kind of looping in here that's polling that sql server and saying do i",
    "start": "1355520",
    "end": "1360960"
  },
  {
    "text": "have any new messages do i have any new commands in that out box",
    "start": "1360960",
    "end": "1366880"
  },
  {
    "text": "uh that need to be handled and if so it's uses that information to send the",
    "start": "1366880",
    "end": "1372480"
  },
  {
    "text": "email and then has to commit the fact that it did in fact send the message that it's",
    "start": "1372480",
    "end": "1378720"
  },
  {
    "text": "handled that otherwise we'll keep getting emails sent over and over again",
    "start": "1378720",
    "end": "1384080"
  },
  {
    "text": "now when you look at this you may very well say um um",
    "start": "1384080",
    "end": "1390080"
  },
  {
    "text": "isn't that doing two rights and it kind of is um we haven't solved",
    "start": "1390080",
    "end": "1398480"
  },
  {
    "text": "the two generals problem yet and if you're not i'm not going to go into what the two generals problems",
    "start": "1398480",
    "end": "1404159"
  },
  {
    "text": "the problem is in this talk um i do encourage you to do some reading on the subject it's very interesting uh it's a",
    "start": "1404159",
    "end": "1410880"
  },
  {
    "text": "little more computer sciencey than we tend to deal with in application development",
    "start": "1410880",
    "end": "1416240"
  },
  {
    "text": "but it's it is kind of important to understand that there is still no way",
    "start": "1416240",
    "end": "1421600"
  },
  {
    "text": "to truly confirm you know if i send you a confirmation then did you get that confirmation are you going",
    "start": "1421600",
    "end": "1427600"
  },
  {
    "text": "to send me back a confirmation to confirm that you got that confirmation and then if i get that confirmation do i",
    "start": "1427600",
    "end": "1433600"
  },
  {
    "text": "um that's ultimately the two generals problem we still have that but we're going to have that no matter what we do",
    "start": "1433600",
    "end": "1441279"
  },
  {
    "text": "almost so all of these patterns are still going to be susceptible to that the idea is",
    "start": "1441279",
    "end": "1448000"
  },
  {
    "text": "that we don't need an additional one and this is as reliable as we can",
    "start": "1448000",
    "end": "1453840"
  },
  {
    "text": "possibly make it so let's see what that looks like in",
    "start": "1453840",
    "end": "1461200"
  },
  {
    "start": "1460000",
    "end": "1587000"
  },
  {
    "text": "some code and this all this code is uh available in the github repository",
    "start": "1461200",
    "end": "1466559"
  },
  {
    "text": "let's look at the first demo this is outbox now all of the solutions hopefully let's see if we can drill in",
    "start": "1466559",
    "end": "1473039"
  },
  {
    "text": "on that so all of the solutions have both services in them",
    "start": "1473039",
    "end": "1478640"
  },
  {
    "text": "a request service which is our ingress that's where the request comes in",
    "start": "1478640",
    "end": "1483760"
  },
  {
    "text": "and in this case it pushes that all it pushes that out to a sql server so it just gets that request pushes it out to",
    "start": "1483760",
    "end": "1489520"
  },
  {
    "text": "the sql server first thing do to do get it safe get it on disk",
    "start": "1489520",
    "end": "1495039"
  },
  {
    "text": "then once it's on disk the email service is polling for that so all we're going",
    "start": "1495039",
    "end": "1500080"
  },
  {
    "text": "to see in all three of these examples is that the email service the thing that is",
    "start": "1500080",
    "end": "1505279"
  },
  {
    "text": "reading the results and then sending off the email is going to be different in how it has to handle each one those are",
    "start": "1505279",
    "end": "1511200"
  },
  {
    "text": "the biggest differences in these patterns so we're going to focus on that so this is our program for our email",
    "start": "1511200",
    "end": "1518320"
  },
  {
    "text": "service and you can see that what it does is it it gets a service and",
    "start": "1518320",
    "end": "1524400"
  },
  {
    "text": "calls process on it with a cancellation token and what that does",
    "start": "1524400",
    "end": "1530320"
  },
  {
    "text": "is it loops here until it's canceled",
    "start": "1530320",
    "end": "1536400"
  },
  {
    "text": "hopefully this is big enough that you can see it well let's see if we can zoom just a little more uh so it loops until",
    "start": "1536400",
    "end": "1543200"
  },
  {
    "text": "it's cancelled and then calls get unsent messages on the repository so it's calling that sql",
    "start": "1543200",
    "end": "1549600"
  },
  {
    "text": "server and saying give me any unsent or give me an unsent message if you have one",
    "start": "1549600",
    "end": "1555520"
  },
  {
    "text": "and if it does have one it then sends the email and updates that the message has been",
    "start": "1555520",
    "end": "1562080"
  },
  {
    "text": "sent pretty straightforward there right",
    "start": "1562080",
    "end": "1568880"
  },
  {
    "text": "so both of these services are very simple they do one and only one thing with the exception of",
    "start": "1568880",
    "end": "1575760"
  },
  {
    "text": "the two generals problem um",
    "start": "1575760",
    "end": "1580399"
  },
  {
    "text": "and it keeps it separate so what does that all mean what does that do for us",
    "start": "1580960",
    "end": "1587600"
  },
  {
    "start": "1587000",
    "end": "1821000"
  },
  {
    "text": "well we have some advantages first of all it allows us to persist",
    "start": "1587679",
    "end": "1593679"
  },
  {
    "text": "quickly and that's kind of the goal of all of these patterns or one of the goals of all of these patterns is to allow us to",
    "start": "1593679",
    "end": "1599360"
  },
  {
    "text": "immediately get our requests to disk first thing customers send you some data",
    "start": "1599360",
    "end": "1604400"
  },
  {
    "text": "get it on disk get it safe we've got that request",
    "start": "1604400",
    "end": "1609440"
  },
  {
    "text": "and then take some action downstream um the outbox pattern captures every update",
    "start": "1609840",
    "end": "1616080"
  },
  {
    "text": "not every pattern that we're going to talk about today is guaranteed to capture every single update we'll talk",
    "start": "1616080",
    "end": "1621760"
  },
  {
    "text": "about that more when we talk about change data capture next and the other advantage of this is it's",
    "start": "1621760",
    "end": "1628000"
  },
  {
    "text": "very familiar tech everybody has used relational databases before i think uh maybe i'm just old and",
    "start": "1628000",
    "end": "1635679"
  },
  {
    "text": "i i've always used them but it to me at least is very very familiar comfortable",
    "start": "1635679",
    "end": "1640960"
  },
  {
    "text": "technology however it can be very hard to both scale and to",
    "start": "1640960",
    "end": "1647039"
  },
  {
    "text": "fan out so if you think about sql server or any relational database",
    "start": "1647039",
    "end": "1653520"
  },
  {
    "text": "if you're going to scale the number of email services so the downstream",
    "start": "1653520",
    "end": "1658960"
  },
  {
    "text": "if you're growing to the point where you know what you need more than one email server it's not likely that you'd need",
    "start": "1658960",
    "end": "1664080"
  },
  {
    "text": "more than one email processor but um you can imagine uh downstream things",
    "start": "1664080",
    "end": "1669360"
  },
  {
    "text": "that actually require more um capabilities",
    "start": "1669360",
    "end": "1675200"
  },
  {
    "text": "if you're gonna need to scale that out you're gonna have to build all of the row locking and things like that into",
    "start": "1675760",
    "end": "1682480"
  },
  {
    "text": "to make sure that only one instance of your service of your email service gets",
    "start": "1682480",
    "end": "1688000"
  },
  {
    "text": "that record and processes it that's all on you likewise if you're gonna fan it out if",
    "start": "1688000",
    "end": "1694320"
  },
  {
    "text": "you want now i don't only want to send an email message now i also want to",
    "start": "1694320",
    "end": "1699840"
  },
  {
    "text": "take some other action send out a message to a service boss or something else",
    "start": "1699840",
    "end": "1706720"
  },
  {
    "text": "i'm going to have to create a whole new processor which means i'm probably going to need to either create a new column in that database",
    "start": "1706720",
    "end": "1713200"
  },
  {
    "text": "that gets updated or more likely create a new uh table that gets written to",
    "start": "1713200",
    "end": "1718799"
  },
  {
    "text": "a new outbox table that gets written to within our transaction making that transaction even longer",
    "start": "1718799",
    "end": "1725279"
  },
  {
    "text": "um so it's not this is not a good pattern for scale up",
    "start": "1725279",
    "end": "1730559"
  },
  {
    "text": "or for fan out for allowing additional you know extending the capabilities of the application",
    "start": "1730559",
    "end": "1737360"
  },
  {
    "text": "it's also really using the database kind of as a cue and i've always kind of",
    "start": "1737360",
    "end": "1743520"
  },
  {
    "text": "felt kind of queasy about that um we have tools for",
    "start": "1743520",
    "end": "1748880"
  },
  {
    "text": "cueing and things like that maybe we should use them when what we're really doing is trying",
    "start": "1748880",
    "end": "1754720"
  },
  {
    "text": "to create a cue a first in first out data structure um as i mentioned it adds weight to the",
    "start": "1754720",
    "end": "1761760"
  },
  {
    "text": "persistence because now instead of just persisting our state change we're also",
    "start": "1761760",
    "end": "1767279"
  },
  {
    "text": "persisting another thing that goes inside the transaction that's our outbox so",
    "start": "1767279",
    "end": "1772880"
  },
  {
    "text": "the longer our transactions the least less reliable or the more opportunity there is for failure",
    "start": "1772880",
    "end": "1778720"
  },
  {
    "text": "although because they're all in a transaction it will roll back together so we know we haven't done anything if it fails",
    "start": "1778720",
    "end": "1785840"
  },
  {
    "text": "and again like every pattern we're going to see here it is still susceptible to errors on the",
    "start": "1785840",
    "end": "1791520"
  },
  {
    "text": "commit phase so uh we haven't solved two generals with this one",
    "start": "1791520",
    "end": "1797279"
  },
  {
    "text": "all right uh i'm keeping an eye on the uh slido slido um",
    "start": "1797279",
    "end": "1804720"
  },
  {
    "text": "room here so if there's any questions please please feel free to drop them in there and i'll",
    "start": "1804720",
    "end": "1810559"
  },
  {
    "text": "do my best to answer them so i don't see anything in there right now",
    "start": "1810559",
    "end": "1815278"
  },
  {
    "text": "all right so let's move on to change data capture",
    "start": "1815919",
    "end": "1822000"
  },
  {
    "start": "1821000",
    "end": "1946000"
  },
  {
    "text": "so change data capture has a goal of reliably updating a data store and triggering an additional downstream",
    "start": "1822000",
    "end": "1827840"
  },
  {
    "text": "action now if that goal sounds familiar to you it should",
    "start": "1827840",
    "end": "1833600"
  },
  {
    "text": "because that's the exact same goal as outbox pattern had",
    "start": "1833600",
    "end": "1838720"
  },
  {
    "text": "we're going to update the data store and then we're going to use that to do something downstream",
    "start": "1838720",
    "end": "1844320"
  },
  {
    "text": "in this case however we're going to do a single atomic write",
    "start": "1844320",
    "end": "1849760"
  },
  {
    "text": "that makes one update to the database just as we did before the difference is instead of us creating",
    "start": "1849760",
    "end": "1855840"
  },
  {
    "text": "a separate outbox table to help that we're going to use to persist downstream",
    "start": "1855840",
    "end": "1862000"
  },
  {
    "text": "we're going to use the databases features to actually do that so the database is going to do a lot of that work for us",
    "start": "1862000",
    "end": "1869679"
  },
  {
    "text": "um it's captures changes to the database and then can event those out to us so",
    "start": "1869679",
    "end": "1876080"
  },
  {
    "text": "that we can use that to process downstream actions so what does that look like in a",
    "start": "1876080",
    "end": "1882240"
  },
  {
    "text": "sequence well basically the same as before in this",
    "start": "1882240",
    "end": "1887360"
  },
  {
    "text": "case i'm going to use cosmos db as the example and that's the example that's in the sample code in",
    "start": "1887360",
    "end": "1892640"
  },
  {
    "text": "github so we have our request service the request comes in there it updates the",
    "start": "1892640",
    "end": "1897840"
  },
  {
    "text": "cosmos db all it has to do is make our state updates",
    "start": "1897840",
    "end": "1903840"
  },
  {
    "text": "and it confirms that that's done and then we have our separate email service",
    "start": "1903840",
    "end": "1909039"
  },
  {
    "text": "that is actually notified now um the net sdk",
    "start": "1909039",
    "end": "1914720"
  },
  {
    "text": "for cosmos does a great job of handling this and unhiding a lot of the implementation details",
    "start": "1914720",
    "end": "1920399"
  },
  {
    "text": "what really happens behind the scenes is there is some polling going on but from the applications perspective we",
    "start": "1920399",
    "end": "1927440"
  },
  {
    "text": "just get notified that a new message is there and we can handle it so when we get notified that there's a",
    "start": "1927440",
    "end": "1933840"
  },
  {
    "text": "new message there we can send the confirmation email and then um it gets confirmed that the message was sent and",
    "start": "1933840",
    "end": "1941360"
  },
  {
    "text": "we commit so let's look at the code for the back",
    "start": "1941360",
    "end": "1946720"
  },
  {
    "text": "half of that",
    "start": "1946720",
    "end": "1949840"
  },
  {
    "text": "here is our cdc example and so with this one now instead of",
    "start": "1952320",
    "end": "1960240"
  },
  {
    "text": "just running a loop we're actually using a hosted service that that runs a this cosmos change monitor",
    "start": "1960399",
    "end": "1967760"
  },
  {
    "text": "so it's looking for changes now this is the email service so this is the back half we've already pushed the",
    "start": "1967760",
    "end": "1973039"
  },
  {
    "text": "uh change up to cosmos and where we see it",
    "start": "1973039",
    "end": "1979120"
  },
  {
    "text": "is in this process message async so up here we subscribe to it",
    "start": "1979120",
    "end": "1986000"
  },
  {
    "text": "our change feed change feed processor um this utilizes the cosmos change feed in the cosmos sdk",
    "start": "1986000",
    "end": "1994640"
  },
  {
    "text": "and what that tells is what we're doing here is we're giving it a delegate to this method to this method",
    "start": "1994640",
    "end": "2000080"
  },
  {
    "text": "so when a method message comes in here we're subscribing here saying call this method",
    "start": "2000080",
    "end": "2006559"
  },
  {
    "text": "when we get a message and then a message comes in in this input so all i have to do is and it can",
    "start": "2006559",
    "end": "2013440"
  },
  {
    "text": "actually send multiple messages at once you get to control all of that so for each messages in the in each of",
    "start": "2013440",
    "end": "2019279"
  },
  {
    "text": "the messages in the input logging it out deserializing it",
    "start": "2019279",
    "end": "2026159"
  },
  {
    "text": "processing it and executing and then ending and",
    "start": "2026159",
    "end": "2031200"
  },
  {
    "text": "processing it in this case is just turn it into an email message subject",
    "start": "2031200",
    "end": "2036880"
  },
  {
    "text": "message body and then send the message and we're done and with this one",
    "start": "2036880",
    "end": "2043600"
  },
  {
    "text": "um in the uh change monitor the fact that we processed it without throwing an",
    "start": "2043600",
    "end": "2048960"
  },
  {
    "text": "exception the sdk then automatically handles committing it back for us so",
    "start": "2048960",
    "end": "2054720"
  },
  {
    "text": "it's there it's just behind kind of behind the scenes that can be hidden so you want to know it's there",
    "start": "2054720",
    "end": "2061358"
  },
  {
    "text": "but you don't need to deal with it and you know that if you throw an exception in any of this processing in here inside",
    "start": "2061359",
    "end": "2067760"
  },
  {
    "text": "this method or below it's going to roll it back and it's going to try and send it to you again",
    "start": "2067760",
    "end": "2073200"
  },
  {
    "text": "the sdk will do that for you so you don't have to worry about any of those implementation details",
    "start": "2073200",
    "end": "2078638"
  },
  {
    "text": "so i consider this a much better uh a much better implementation than",
    "start": "2078639",
    "end": "2084560"
  },
  {
    "text": "than outbox although i don't want to make it sound like i'm not encouraging you to use",
    "start": "2084560",
    "end": "2090158"
  },
  {
    "text": "outbox um outbox is really useful especially if you already have a relational database",
    "start": "2090159",
    "end": "2096638"
  },
  {
    "text": "in in that you're making updates to and you just want to extend that capability",
    "start": "2096639",
    "end": "2103200"
  },
  {
    "text": "outbox is a really good way of doing it if you're starting from ground zero with greenfield um",
    "start": "2103200",
    "end": "2109440"
  },
  {
    "text": "which we would all love to do someday i'm sure then both cdc and",
    "start": "2109440",
    "end": "2115680"
  },
  {
    "text": "the next pattern that we look at streaming are going to be really good really good choices",
    "start": "2115680",
    "end": "2121920"
  },
  {
    "text": "all right oh make code bigger on this one sorry i didn't do that um",
    "start": "2122320",
    "end": "2128560"
  },
  {
    "text": "hopefully you could all see what you need and also like i said it's all there on github",
    "start": "2128960",
    "end": "2135680"
  },
  {
    "text": "um what happens when we run more than one instance of email service a good question",
    "start": "2136480",
    "end": "2143119"
  },
  {
    "text": "so in this scenario and we'll talk through this on the next side a little bit but in this scenario",
    "start": "2143119",
    "end": "2149920"
  },
  {
    "text": "the database will do a lot of the work for us in balancing that load so we can spin up",
    "start": "2149920",
    "end": "2157040"
  },
  {
    "text": "multiple versions of this and as long as we've configured it properly there's there's a concept of a uh",
    "start": "2157040",
    "end": "2164560"
  },
  {
    "text": "what do they call those a consumer group um if you have multiple",
    "start": "2164560",
    "end": "2171359"
  },
  {
    "text": "applications in the same consumer group only one a message will be sent to one processor",
    "start": "2171359",
    "end": "2178000"
  },
  {
    "text": "in that consumer group and only one and the server and the sdk handle that for you",
    "start": "2178000",
    "end": "2184720"
  },
  {
    "text": "manage all that it's beautiful likewise you can also fan out easily",
    "start": "2184720",
    "end": "2190320"
  },
  {
    "text": "so if you have different consumer groups you run multiple instances of this of of",
    "start": "2190320",
    "end": "2195920"
  },
  {
    "text": "consumer groups you can actually fan it out and actually have different services taking different actions and know that",
    "start": "2195920",
    "end": "2201920"
  },
  {
    "text": "each consumer group will get the message once",
    "start": "2201920",
    "end": "2206880"
  },
  {
    "text": "really really useful and valuable i hope that answered the question",
    "start": "2207040",
    "end": "2214280"
  },
  {
    "text": "so osmo's change data capture again we get to persist quickly",
    "start": "2216000",
    "end": "2222240"
  },
  {
    "start": "2218000",
    "end": "2331000"
  },
  {
    "text": "and it's as we just discussed easy to scale and easy to fan out because the database",
    "start": "2222240",
    "end": "2229359"
  },
  {
    "text": "and the sdk together manage a lot of that for you the biggest disadvantage here is that",
    "start": "2229359",
    "end": "2237040"
  },
  {
    "text": "at least with the current implementation of cosmos db change data capture you're not",
    "start": "2237040",
    "end": "2242720"
  },
  {
    "text": "guaranteed to capture every update if you",
    "start": "2242720",
    "end": "2248320"
  },
  {
    "text": "make a state change and then update that state change again very quickly",
    "start": "2248480",
    "end": "2255040"
  },
  {
    "text": "you may see only the latest state so it looks at the current when it's when it's seeing the uh the changes",
    "start": "2255040",
    "end": "2261680"
  },
  {
    "text": "and you're saying oh what changes do i have it's only going to give you the latest state change in the current",
    "start": "2261680",
    "end": "2267200"
  },
  {
    "text": "instance of cosmos change data capture other implementations may be different",
    "start": "2267200",
    "end": "2273440"
  },
  {
    "text": "and cosmos is actually exploring their cosmos team is working on",
    "start": "2273440",
    "end": "2278480"
  },
  {
    "text": "um i think it's in preview right now something where it will actually give you every message if you choose to do so",
    "start": "2278480",
    "end": "2286160"
  },
  {
    "text": "but right now that's one of the biggest things that you need to understand is that it's not guaranteed to capture every update so be aware of of your",
    "start": "2286160",
    "end": "2293040"
  },
  {
    "text": "implementation and how it works now if you're just writing messages so if you're",
    "start": "2293040",
    "end": "2298560"
  },
  {
    "text": "basically event streaming here where you just throw every message into it and you're never updating a message",
    "start": "2298560",
    "end": "2305119"
  },
  {
    "text": "then you don't have to worry about that because you're just creating new messages every time",
    "start": "2305119",
    "end": "2310800"
  },
  {
    "text": "and of course we are still susceptible to errors on that back commit of the log",
    "start": "2310960",
    "end": "2317839"
  },
  {
    "text": "you know which it handles all for us it's all behind the scenes but it still can fail",
    "start": "2317839",
    "end": "2324079"
  },
  {
    "text": "after it's executed the process it is possible however unlikely",
    "start": "2324079",
    "end": "2332079"
  },
  {
    "text": "all right the last of our isolation patterns data streaming goal reliably persist a message",
    "start": "2332079",
    "end": "2339359"
  },
  {
    "text": "and then trigger a different a additional action so very very similar",
    "start": "2339359",
    "end": "2345599"
  },
  {
    "text": "in this case though we're not talking about necessarily a persistent state store",
    "start": "2345599",
    "end": "2352320"
  },
  {
    "text": "we want to get a message out there and then we want of different things to",
    "start": "2352320",
    "end": "2357359"
  },
  {
    "text": "happen downstream uh and we make a single atomic write that puts it into that stream",
    "start": "2357359",
    "end": "2364320"
  },
  {
    "text": "and it's that stream that's used to trigger all actions so what does that look like in this case",
    "start": "2364320",
    "end": "2370079"
  },
  {
    "text": "well in this case i just have it pushing into a streaming service here",
    "start": "2370079",
    "end": "2376640"
  },
  {
    "text": "but you know the more i think about this the more this is a little bit disingenuous because this is not my",
    "start": "2376640",
    "end": "2382320"
  },
  {
    "text": "state update this is not like if i'm pushing this into say kafka or radiss or",
    "start": "2382320",
    "end": "2388960"
  },
  {
    "text": "rabbit mq um this is not my state update",
    "start": "2388960",
    "end": "2394640"
  },
  {
    "text": "so what i really should have is two different services sitting down here looping and reading these messages one",
    "start": "2394640",
    "end": "2401200"
  },
  {
    "text": "to update my database whatever that data store is and then a separate one to send the email so that really would",
    "start": "2401200",
    "end": "2408640"
  },
  {
    "text": "have been a better way for me to draw this but it's still a very very similar",
    "start": "2408640",
    "end": "2414240"
  },
  {
    "text": "process in the sense that we're pushing a message out to something and that thing is then going",
    "start": "2414240",
    "end": "2420800"
  },
  {
    "text": "to be used to consume the messages and take the downstream actions",
    "start": "2420800",
    "end": "2426560"
  },
  {
    "text": "so if there's examples of this in the github code for both kafka and redis",
    "start": "2426560",
    "end": "2434000"
  },
  {
    "text": "using redis streaming or kafka's streaming sdk um this one is kafka",
    "start": "2434000",
    "end": "2441440"
  },
  {
    "text": "and so you can see just let me make it bigger so just like in the",
    "start": "2441440",
    "end": "2448079"
  },
  {
    "text": "cdc option we're actually using a hosted service so that's sitting in the background and running all the time",
    "start": "2448079",
    "end": "2453920"
  },
  {
    "text": "or this kafka change monitor now um the kafka change monitor also",
    "start": "2453920",
    "end": "2459920"
  },
  {
    "text": "subscribes in this case it subscribes to a what's called a topic so messages get put into a topic",
    "start": "2459920",
    "end": "2466960"
  },
  {
    "text": "and they can fan out from there so it subscribes to that and when it gets a message",
    "start": "2466960",
    "end": "2473520"
  },
  {
    "text": "it calls this process message async so very similar pattern and then handles it",
    "start": "2473520",
    "end": "2481440"
  },
  {
    "text": "in this case just by sending the email out like i said i probably should have a",
    "start": "2481440",
    "end": "2488560"
  },
  {
    "text": "maybe a persistence service that's a third one here for this example that also writes it out to a database to make",
    "start": "2488560",
    "end": "2494800"
  },
  {
    "text": "these use cases exactly equivalent where both of them are updating a data store",
    "start": "2494800",
    "end": "2500160"
  },
  {
    "text": "and sending an email i hope that all makes sense",
    "start": "2500160",
    "end": "2505680"
  },
  {
    "text": "and again the code is in github so feel free to pull it down and play with it",
    "start": "2507599",
    "end": "2513839"
  },
  {
    "start": "2514000",
    "end": "2659000"
  },
  {
    "text": "all right so data streaming again we can persist it quickly",
    "start": "2514079",
    "end": "2519680"
  },
  {
    "text": "very easy to scale and fan out all of our uh streaming systems are designed for",
    "start": "2519680",
    "end": "2525200"
  },
  {
    "text": "that um the one the one that might not be easy to fan out would",
    "start": "2525200",
    "end": "2531520"
  },
  {
    "text": "be if we're just using a plain old cue like for example azure queues or ibm websphere queues or something like that",
    "start": "2531520",
    "end": "2537440"
  },
  {
    "text": "if we're just using a queue that's not really good for fan out but it's great for scale",
    "start": "2537440",
    "end": "2542640"
  },
  {
    "text": "but if we're using a topic where it handles the fan out for you",
    "start": "2542640",
    "end": "2549520"
  },
  {
    "text": "it works great for both of them um so kafka and redis both are",
    "start": "2549520",
    "end": "2555920"
  },
  {
    "text": "really really good for both scale and fano and these will capture every update",
    "start": "2555920",
    "end": "2562560"
  },
  {
    "text": "so you're to be able to get all of your updates with with both of these you won't you you know every message will be",
    "start": "2562560",
    "end": "2568079"
  },
  {
    "text": "seen the uh biggest disadvantage here is that",
    "start": "2568079",
    "end": "2573920"
  },
  {
    "text": "the reliability is really subject to the persistence of the implementation what i mean by that is",
    "start": "2573920",
    "end": "2580319"
  },
  {
    "text": "just to contrast kafka and redis kafka",
    "start": "2580319",
    "end": "2585440"
  },
  {
    "text": "does a great job immediately persists to the log first thing it does is get it to disk as quickly as it can redis very is",
    "start": "2585440",
    "end": "2592800"
  },
  {
    "text": "very dependent on how you configure it most by default redis doesn't really go to disk at all",
    "start": "2592800",
    "end": "2598560"
  },
  {
    "text": "and it's just kind of an in memory store so it's wicked fast",
    "start": "2598560",
    "end": "2605200"
  },
  {
    "text": "but if there happens to be a hardware failure at you know at the wrong time redis is going to be more susceptible to",
    "start": "2605200",
    "end": "2611440"
  },
  {
    "text": "that than something like kafka um and of course we are still susceptible to commit errors",
    "start": "2611440",
    "end": "2620599"
  },
  {
    "text": "all right so as you've seen these patterns are super similar you persist first then act on it you do",
    "start": "2620720",
    "end": "2628079"
  },
  {
    "text": "one and only one thing the only thing you're doing in each of those things is reacting to the signal and then",
    "start": "2628079",
    "end": "2634480"
  },
  {
    "text": "doing the specific work that that service is designed to do um",
    "start": "2634480",
    "end": "2640319"
  },
  {
    "text": "it's easy in cdc and streaming to fan out um",
    "start": "2640319",
    "end": "2646079"
  },
  {
    "text": "as well as scale outbox and streaming both guarantee that all changes will be sent cdc not as much",
    "start": "2646079",
    "end": "2653520"
  },
  {
    "text": "so you have to be careful there but all are susceptible to that commit error problem",
    "start": "2653520",
    "end": "2659839"
  },
  {
    "start": "2659000",
    "end": "2768000"
  },
  {
    "text": "now is there anything we can do to avoid those commit errors this is not going to be a satisfactory",
    "start": "2659839",
    "end": "2665520"
  },
  {
    "text": "answer yet because like i said we have not solved the two generals problem",
    "start": "2665520",
    "end": "2671440"
  },
  {
    "text": "we get very close to four nines with these patterns assuming our dependencies",
    "start": "2671440",
    "end": "2677280"
  },
  {
    "text": "are supporting four nines so we can never get better reliability than our downstream",
    "start": "2677280",
    "end": "2682400"
  },
  {
    "text": "dependencies or our network or hardware etc",
    "start": "2682400",
    "end": "2687520"
  },
  {
    "text": "but if we make proper use of item potence if we use it wherever we reasonably can",
    "start": "2687520",
    "end": "2694400"
  },
  {
    "text": "uh it may be possible to come very very close",
    "start": "2694400",
    "end": "2699760"
  },
  {
    "text": "to exactly what's delivery now kafka has a specific mechanism that they've i i'll i'll defer",
    "start": "2699760",
    "end": "2706880"
  },
  {
    "text": "you to their um their documentation where they have a really good write-up on",
    "start": "2706880",
    "end": "2714240"
  },
  {
    "text": "uh exactly what's delivery what it means why they feel like the two generals",
    "start": "2714240",
    "end": "2720240"
  },
  {
    "text": "problem is not an entirely um germane to that circumstance and how",
    "start": "2720240",
    "end": "2726960"
  },
  {
    "text": "they go about doing it but what it really comes down to is still same as what we've described do one and only one",
    "start": "2726960",
    "end": "2732880"
  },
  {
    "text": "thing do it item potently um and then do something else downstream",
    "start": "2732880",
    "end": "2739680"
  },
  {
    "text": "uh but though there's a lot more complexity there so we're not really going to drill into",
    "start": "2739680",
    "end": "2744720"
  },
  {
    "text": "that in any more detail today know that it exists at the end of this if you're not",
    "start": "2744720",
    "end": "2750000"
  },
  {
    "text": "familiar with the concept of exactly once delivery versus something like um",
    "start": "2750000",
    "end": "2755440"
  },
  {
    "text": "uh at least once or at most once there is a uh",
    "start": "2755440",
    "end": "2760480"
  },
  {
    "text": "an appendix at the end of this slide deck that describes what each one of them means",
    "start": "2760480",
    "end": "2766720"
  },
  {
    "text": "all right so we have all these isolation patterns how do we put them together",
    "start": "2766880",
    "end": "2774079"
  },
  {
    "start": "2768000",
    "end": "2824000"
  },
  {
    "text": "and there's two ways of really putting sagas together sagas are though",
    "start": "2774079",
    "end": "2780319"
  },
  {
    "text": "that coordination of all of those different services we can do it through an orchestration or",
    "start": "2780319",
    "end": "2786640"
  },
  {
    "text": "we can do it through a choreography orchestration has a single controller",
    "start": "2786640",
    "end": "2791760"
  },
  {
    "text": "a state machine generally that is responsible for managing everything and being a single",
    "start": "2791760",
    "end": "2797200"
  },
  {
    "text": "point of failure too a choreography",
    "start": "2797200",
    "end": "2802480"
  },
  {
    "text": "is where all of the services are really independent they consume messages whatever they happen to need",
    "start": "2802480",
    "end": "2809280"
  },
  {
    "text": "transform them appropriately do whatever their work is publish new messages out",
    "start": "2809280",
    "end": "2814880"
  },
  {
    "text": "independent of each other and not necessarily having to know what happens downstream so let's look at",
    "start": "2814880",
    "end": "2820160"
  },
  {
    "text": "each of those examples and see what their uh benefits are so this is a saga it's kind of a",
    "start": "2820160",
    "end": "2827040"
  },
  {
    "start": "2824000",
    "end": "2945000"
  },
  {
    "text": "workflow you could think about this orchestration service as a workflow as a state machine",
    "start": "2827040",
    "end": "2833200"
  },
  {
    "text": "um but ultimately what they're doing is they're still it's still all",
    "start": "2833200",
    "end": "2839040"
  },
  {
    "text": "you know the user submits a request that request is persistent as quickly as possible",
    "start": "2839040",
    "end": "2844559"
  },
  {
    "text": "the orchestration service then has to know i am at this point in the process and i'm going to publish these",
    "start": "2844559",
    "end": "2851839"
  },
  {
    "text": "messages and look for failures and look for responses and",
    "start": "2851839",
    "end": "2856880"
  },
  {
    "text": "those kinds of things from the other services now i kind of showed them all as different",
    "start": "2856880",
    "end": "2864319"
  },
  {
    "text": "different topics here different uh buses but it really it could be one bus as",
    "start": "2864480",
    "end": "2869760"
  },
  {
    "text": "well i don't tend to do that but it uh it's something that can be done if if need be",
    "start": "2869760",
    "end": "2876000"
  },
  {
    "text": "but what this is doing is at least these first two steps are the same as what we've done before the orchestration",
    "start": "2876000",
    "end": "2881520"
  },
  {
    "text": "service is going to notify we need to update the database it's going to send out the email",
    "start": "2881520",
    "end": "2887359"
  },
  {
    "text": "and then it's also got notifications going to billing and the request action service so if this",
    "start": "2887359",
    "end": "2894000"
  },
  {
    "text": "service what is if what it's allowing the users to do is request us to do something hey i'd like i need you guys",
    "start": "2894000",
    "end": "2899520"
  },
  {
    "text": "to go and do this thing uh we can send them the confirmation email write it out",
    "start": "2899520",
    "end": "2905920"
  },
  {
    "text": "send some information you know charge them for it as appropriate and then send",
    "start": "2905920",
    "end": "2911359"
  },
  {
    "text": "it off to whomever is actually doing the work probably fiverr right something like that um",
    "start": "2911359",
    "end": "2918400"
  },
  {
    "text": "and then if this comes back and says sorry we can't do that for some reason the orchestration",
    "start": "2918400",
    "end": "2925280"
  },
  {
    "text": "service then is responsible for saying ah we couldn't service your request let's send a compensating request back",
    "start": "2925280",
    "end": "2932559"
  },
  {
    "text": "to the billing service to say give you your money back so that's the kind of orchestration",
    "start": "2932559",
    "end": "2937839"
  },
  {
    "text": "we're talking about here",
    "start": "2937839",
    "end": "2941720"
  },
  {
    "text": "however choreography i've labeled as my ideal",
    "start": "2943599",
    "end": "2948960"
  },
  {
    "start": "2945000",
    "end": "3074000"
  },
  {
    "text": "architecture this is where i prefer to go because",
    "start": "2948960",
    "end": "2954960"
  },
  {
    "text": "we've come a long way in the last 10 years and and what i see this as is this is what i refer to as the microservices",
    "start": "2954960",
    "end": "2961920"
  },
  {
    "text": "pattern this is what i see as a good implementation of microservices you have",
    "start": "2961920",
    "end": "2967280"
  },
  {
    "text": "simple services where all they're doing is one and only one thing one change to state of the system",
    "start": "2967280",
    "end": "2973280"
  },
  {
    "text": "they're independent they read from some data source",
    "start": "2973280",
    "end": "2979119"
  },
  {
    "text": "transform manage do their one thing and publish some message",
    "start": "2979119",
    "end": "2985599"
  },
  {
    "text": "and they do so kind of independent of what everything else needs so i know i need to react to this stimulus i need to",
    "start": "2985599",
    "end": "2992960"
  },
  {
    "text": "react to some particular message the upstream may not know that i'm responding to it",
    "start": "2992960",
    "end": "3000079"
  },
  {
    "text": "i do my work i publish a message out i don't have to know what downstreams",
    "start": "3000079",
    "end": "3005920"
  },
  {
    "text": "are using that all i know is i publish my canonical example my canonical structure",
    "start": "3005920",
    "end": "3011359"
  },
  {
    "text": "that says here is my message here's the thing i've done or here's what you need to know about or you know generally what",
    "start": "3011359",
    "end": "3018319"
  },
  {
    "text": "what someone downstream might need to know about this thing and then i don't worry about it",
    "start": "3018319",
    "end": "3025119"
  },
  {
    "text": "this i think is an ideal pattern there is nothing more powerful that i've experienced",
    "start": "3025119",
    "end": "3031200"
  },
  {
    "text": "than needing to augment a system needing to add a feature to a system",
    "start": "3031200",
    "end": "3036880"
  },
  {
    "text": "and already having something a a trigger an event in the system that i can",
    "start": "3036880",
    "end": "3042880"
  },
  {
    "text": "subscribe to that is exactly what i need to then go off and build that additional feature",
    "start": "3042880",
    "end": "3049280"
  },
  {
    "text": "that's how we make systems that are extensible because any whatever is doing its work",
    "start": "3049280",
    "end": "3056079"
  },
  {
    "text": "is publishing these messages out and i can find the appropriate trigger",
    "start": "3056079",
    "end": "3061520"
  },
  {
    "text": "that i need to then do whatever it is i need to do in this inside the system the additional work i",
    "start": "3061520",
    "end": "3067200"
  },
  {
    "text": "need to do inside the system but that comes with a caveat",
    "start": "3067200",
    "end": "3073838"
  },
  {
    "start": "3074000",
    "end": "3147000"
  },
  {
    "text": "that additional thing should never be just kind of added on there is always this",
    "start": "3075599",
    "end": "3083119"
  },
  {
    "text": "tendency this this i don't know it's like if you think about i need to add a feature here",
    "start": "3083119",
    "end": "3089599"
  },
  {
    "text": "well i've already got this thing that's doing something that's going to trigger it why don't i just plug that right",
    "start": "3089599",
    "end": "3095280"
  },
  {
    "text": "inside that existing context and you're going to get pressure from",
    "start": "3095280",
    "end": "3100640"
  },
  {
    "text": "your your analysts your product people to say well just plug it in there",
    "start": "3100640",
    "end": "3107119"
  },
  {
    "text": "but this is your nights and weekends that they're telling you to get to sacrifice to support that thing because",
    "start": "3107119",
    "end": "3114319"
  },
  {
    "text": "if you add on inside an execution context you are creating a dual right and you're creating a situation where",
    "start": "3114319",
    "end": "3120319"
  },
  {
    "text": "there are going to be difficult problems to solve at some point it may",
    "start": "3120319",
    "end": "3126000"
  },
  {
    "text": "not happen often it may not happen for a while but at some point it's going to happen",
    "start": "3126000",
    "end": "3131440"
  },
  {
    "text": "and then you're going to have to spend the effort to figure out hey what happened and then how do i fix it",
    "start": "3131440",
    "end": "3138400"
  },
  {
    "text": "so never add on never add on all right so let's sum up here we're just about",
    "start": "3138400",
    "end": "3146000"
  },
  {
    "text": "out of time so",
    "start": "3146000",
    "end": "3152119"
  },
  {
    "start": "3147000",
    "end": "3360000"
  },
  {
    "text": "it is impossible to reliably take two actions inside a single execution context i know i haven't fully proven",
    "start": "3152800",
    "end": "3159440"
  },
  {
    "text": "that to you yet in an hour it's kind of difficult to prove know that i absolutely believe that that",
    "start": "3159440",
    "end": "3165520"
  },
  {
    "text": "with as much scientific certainty as i can as i can give you",
    "start": "3165520",
    "end": "3170880"
  },
  {
    "text": "and that is i know that there is no such thing as certainty but i'm confident",
    "start": "3170880",
    "end": "3177280"
  },
  {
    "text": "um so we can't do it so avoid taking multiple all making",
    "start": "3177280",
    "end": "3184079"
  },
  {
    "text": "multiple state changes to systems in a single context break them up uh the best practice is always",
    "start": "3184079",
    "end": "3191200"
  },
  {
    "text": "persist first get a message persistent then take other actions as necessary",
    "start": "3191200",
    "end": "3197119"
  },
  {
    "text": "ideally in a separate execution context we can use outbox cdc change data",
    "start": "3197119",
    "end": "3204000"
  },
  {
    "text": "capture or streaming to help isolate our the different features of our",
    "start": "3204000",
    "end": "3209119"
  },
  {
    "text": "applications the different things that need to change the state of the system we prefer it's better to use cdc or",
    "start": "3209119",
    "end": "3216640"
  },
  {
    "text": "streaming for best fan out and scalability but outbox is a perfectly good pattern especially if you already",
    "start": "3216640",
    "end": "3222480"
  },
  {
    "text": "have sql server or some equivalent in the mix where you're already populating state",
    "start": "3222480",
    "end": "3230640"
  },
  {
    "text": "and then consider how you're going to do your sagas to either orchestrate or choreograph",
    "start": "3230640",
    "end": "3236079"
  },
  {
    "text": "these complex interactions reliably we have some really you know i mean",
    "start": "3236079",
    "end": "3243280"
  },
  {
    "text": "we've come a long way in terms of our tools to monitor our sagas that was always the biggest",
    "start": "3243280",
    "end": "3248800"
  },
  {
    "text": "concern at the beginning of the microservices era was how do we manage",
    "start": "3248800",
    "end": "3254640"
  },
  {
    "text": "we have all of these different services out here sure they're simple and easy to deal with and easy to deploy and easy to",
    "start": "3254640",
    "end": "3261280"
  },
  {
    "text": "work on independently so i can have lots i can scale my team",
    "start": "3261280",
    "end": "3266480"
  },
  {
    "text": "i can deploy them out frequently all of these great benefits we get from these small micro services",
    "start": "3266480",
    "end": "3273119"
  },
  {
    "text": "but how do we follow a single request through the system and",
    "start": "3273119",
    "end": "3279359"
  },
  {
    "text": "we know there are certain things that we'll have to do there we're going to have to put like correlation ids on every request",
    "start": "3279359",
    "end": "3285920"
  },
  {
    "text": "to be able to follow them through but then with shared logging tools and tools",
    "start": "3285920",
    "end": "3291359"
  },
  {
    "text": "like app insights or app dynamics or whatever it is you're you're you're using we can actually get even",
    "start": "3291359",
    "end": "3298160"
  },
  {
    "text": "visualizations of the interactions of our systems and see where there are problems and see what's causing",
    "start": "3298160",
    "end": "3303280"
  },
  {
    "text": "difficulties and using the correlation id we can go into our shared",
    "start": "3303280",
    "end": "3308480"
  },
  {
    "text": "logs and actually see across all of our different services",
    "start": "3308480",
    "end": "3313760"
  },
  {
    "text": "here is all of the logging for that correlation id so we can get a full",
    "start": "3313760",
    "end": "3319440"
  },
  {
    "text": "picture of the log of all of our services and we can see a picture of the interactions of",
    "start": "3319440",
    "end": "3325760"
  },
  {
    "text": "all of our services and how they work together and what's causing problems",
    "start": "3325760",
    "end": "3331200"
  },
  {
    "text": "with these tools i think we've solved all of the problems",
    "start": "3331200",
    "end": "3336240"
  },
  {
    "text": "all of the big problems anyways and the problem that we still need to solve is",
    "start": "3336240",
    "end": "3341680"
  },
  {
    "text": "avoiding these dual rights so we can avoid spending our nights and weekends figuring out these complicated problems",
    "start": "3341680",
    "end": "3349280"
  },
  {
    "text": "so avoid the urge resist don't add on",
    "start": "3349280",
    "end": "3354400"
  },
  {
    "text": "and keep everything separate one change per execution context",
    "start": "3354400",
    "end": "3361359"
  },
  {
    "start": "3360000",
    "end": "3424000"
  },
  {
    "text": "here's some resources i do work for carvana uh as i said uh the code samples are",
    "start": "3361359",
    "end": "3367520"
  },
  {
    "text": "linked here uh article on item potence articles on each of the three isolation",
    "start": "3367520",
    "end": "3374839"
  },
  {
    "text": "patterns some some specifics on the",
    "start": "3374839",
    "end": "3382240"
  },
  {
    "text": "on ways to do streaming as well as stuff on the saga pattern and this is",
    "start": "3382240",
    "end": "3388960"
  },
  {
    "text": "the actual article that got me started going down the path of why",
    "start": "3388960",
    "end": "3394480"
  },
  {
    "text": "our service level agreements don't actually you know why it is",
    "start": "3394480",
    "end": "3399520"
  },
  {
    "text": "that our transactions don't make things more reliable they actually make them less relaxed so i encourage you to read that",
    "start": "3399520",
    "end": "3408000"
  },
  {
    "text": "it's a little off the bottom of the screen here but there's also an article down at the bottom on",
    "start": "3408000",
    "end": "3413040"
  },
  {
    "text": "the plant uml tools because that is there's diagrams in each of those code that use plant uml to show you the",
    "start": "3413040",
    "end": "3420079"
  },
  {
    "text": "sequence diagrams that i showed so that's there as well and all of that can be garnered either",
    "start": "3420079",
    "end": "3427040"
  },
  {
    "start": "3424000",
    "end": "3462000"
  },
  {
    "text": "by going to my twitter account at bs stall and clicking on this link or by shooting this",
    "start": "3427040",
    "end": "3432480"
  },
  {
    "text": "and pulling down that slide deck and being able to just click directly on all of those links",
    "start": "3432480",
    "end": "3439119"
  },
  {
    "text": "i don't see any additional questions on here but it looks like we have three more minutes so i will",
    "start": "3439119",
    "end": "3446000"
  },
  {
    "text": "happily hang out and answer any questions that you might have and other than that i thank you for",
    "start": "3446000",
    "end": "3451920"
  },
  {
    "text": "attending and hope you have a great conference",
    "start": "3451920",
    "end": "3456119"
  },
  {
    "text": "you",
    "start": "3461920",
    "end": "3464000"
  }
]