[
  {
    "start": "0",
    "end": "10000"
  },
  {
    "text": "so thank you for coming to the Late Show my name is Christine Johnson and I will",
    "start": "2149",
    "end": "7850"
  },
  {
    "text": "be talking to you about the atomic today so who has heard about the atomic for a",
    "start": "7850",
    "end": "13150"
  },
  {
    "start": "10000",
    "end": "57000"
  },
  {
    "text": "few view so the atomic is a fairly new one several years actually but it's a",
    "start": "13150",
    "end": "19099"
  },
  {
    "text": "new wish database that has a lot of unique and quite interesting features it's sometimes referred to as a",
    "start": "19099",
    "end": "25849"
  },
  {
    "text": "append-only database so it only accumulates data over time it never deletes data unless you explicitly tell",
    "start": "25849",
    "end": "32630"
  },
  {
    "text": "it to and it has an interesting architecture that allows you to independently scale reads and writes you",
    "start": "32630",
    "end": "40100"
  },
  {
    "text": "can query historical data you can query across multiple databases and it has a",
    "start": "40100",
    "end": "45559"
  },
  {
    "text": "really nice and flexible schema of at the bottom so hopefully before you leave",
    "start": "45559",
    "end": "51859"
  },
  {
    "text": "this room you'll have a working understanding on what they Tomic is and what you might want to use it for so my",
    "start": "51859",
    "end": "58519"
  },
  {
    "start": "57000",
    "end": "95000"
  },
  {
    "text": "name is Christian Jensen like I said I work as a developer for school to market which is a consultancy here in Oslo and",
    "start": "58519",
    "end": "65199"
  },
  {
    "text": "my experience with stay atomic is somewhat limited I learned yes last year so like my",
    "start": "65200",
    "end": "73670"
  },
  {
    "text": "abstract promised you some juicy details on my dieting habits so I I have a text",
    "start": "73670",
    "end": "80150"
  },
  {
    "text": "file I've been maintaining for seven years with my family's dinners so last",
    "start": "80150",
    "end": "85160"
  },
  {
    "text": "year I decided to put that into a database so I could gain some insight on what's going on like trends and stuff",
    "start": "85160",
    "end": "91580"
  },
  {
    "text": "and then since January of this year I've been working with this company event",
    "start": "91580",
    "end": "97010"
  },
  {
    "text": "enno which has built their service on top of stay Tomic so I've actually now",
    "start": "97010",
    "end": "102740"
  },
  {
    "text": "worked with it on a daily basis in production for six months so I I know",
    "start": "102740",
    "end": "108710"
  },
  {
    "text": "means an expert but at least I've worked with enough to have a working understanding of how to use it well and",
    "start": "108710",
    "end": "115760"
  },
  {
    "text": "and where it shines and what some of the limitations are right so that's me this",
    "start": "115760",
    "end": "125300"
  },
  {
    "start": "124000",
    "end": "175000"
  },
  {
    "text": "is the atomic logo I I'm a hands-on guy so I like concrete stuff so I'll be",
    "start": "125300",
    "end": "132109"
  },
  {
    "text": "showing you I'll be focusing on the data modeling capability is of stay tonic and the practicalities",
    "start": "132109",
    "end": "138620"
  },
  {
    "text": "of working with it as a developer and I'll be doing that against the live database with some queries and so we can",
    "start": "138620",
    "end": "145100"
  },
  {
    "text": "explore it together that's the way I like to do things but before I do that I",
    "start": "145100",
    "end": "150830"
  },
  {
    "text": "think it's interesting to discuss the architecture a little bit because it differs quite a lot from most databases",
    "start": "150830",
    "end": "155959"
  },
  {
    "text": "you've probably ever used whenever you tell someone that they atomic is a",
    "start": "155959",
    "end": "161270"
  },
  {
    "text": "append-only database it never deletes data invariably the first question or remark",
    "start": "161270",
    "end": "167600"
  },
  {
    "text": "back is like that doesn't scale who has can afford to keep all their data around forever right and this is one example of",
    "start": "167600",
    "end": "176600"
  },
  {
    "text": "a system that does that for you and people use this without hesitation right and even I read that Microsoft recently",
    "start": "176600",
    "end": "185120"
  },
  {
    "text": "put a 300 gigs of code in to get so you can't have this historical model and",
    "start": "185120",
    "end": "190610"
  },
  {
    "text": "still have it scale and I also think that if you've used a system like it for",
    "start": "190610",
    "end": "196370"
  },
  {
    "text": "any amount of time you will understand that having this history history of your",
    "start": "196370",
    "end": "202760"
  },
  {
    "text": "data at your fingertips is about more than simple backup like we'd get you have your entire history of your",
    "start": "202760",
    "end": "209239"
  },
  {
    "text": "codebase at your fingertips and it's fast and reliable you can find information and you use it for more than",
    "start": "209239",
    "end": "215690"
  },
  {
    "text": "just backup right you can use it for experiments by creating new branches",
    "start": "215690",
    "end": "221420"
  },
  {
    "text": "where you speculatively apply some changes if you like them maybe you commit them back to master you can go",
    "start": "221420",
    "end": "227090"
  },
  {
    "text": "back in time to look at what happened at a certain date if you find a problem in your code you can run tests against your",
    "start": "227090",
    "end": "233510"
  },
  {
    "text": "code like through time time-traveling and it can help you identify where the",
    "start": "233510",
    "end": "239630"
  },
  {
    "text": "problem occurred and all kinds of interesting stuff that you can do simply because the data is there get them",
    "start": "239630",
    "end": "245570"
  },
  {
    "text": "delete all your data for you and the atomic offers this model for your",
    "start": "245570",
    "end": "250970"
  },
  {
    "start": "248000",
    "end": "272000"
  },
  {
    "text": "database your production data so imagine you create some new feature that tracks",
    "start": "250970",
    "end": "257570"
  },
  {
    "text": "behavior over time then all of a sudden all the existing production data is available for you to test with there's",
    "start": "257570",
    "end": "264740"
  },
  {
    "text": "many interesting applications of destroyed data and I'll show you a few examples for my work",
    "start": "264740",
    "end": "269930"
  },
  {
    "text": "later so this guy's this is rich Hickey he designed the atomic and he also",
    "start": "269930",
    "end": "277670"
  },
  {
    "text": "designed closure the programming language so who here has heard about closure okay good so one of the stated",
    "start": "277670",
    "end": "287420"
  },
  {
    "text": "goals was to design a database that that breaks free from limitations of four",
    "start": "287420",
    "end": "293030"
  },
  {
    "text": "years ago so most of the databases we use today were designed during the 70s",
    "start": "293030",
    "end": "298070"
  },
  {
    "text": "and while there were many great things that happen during the 70s especially in",
    "start": "298070",
    "end": "303290"
  },
  {
    "text": "the prog rock scene and also in the computer science area that the hardware",
    "start": "303290",
    "end": "308660"
  },
  {
    "text": "back then really was something different than what we have today so the atomic is an attempt at designing a modern",
    "start": "308660",
    "end": "314600"
  },
  {
    "text": "database for modern computers and this is basically how it's built up so at the",
    "start": "314600",
    "end": "321590"
  },
  {
    "text": "bottom you have the storage service and the atomic innovates under the database",
    "start": "321590",
    "end": "327830"
  },
  {
    "text": "design but it doesn't necessarily innovate all the individual pieces so storage is handled by existing solutions",
    "start": "327830",
    "end": "334940"
  },
  {
    "text": "you store your actual data with the free version you store it on disk using a",
    "start": "334940",
    "end": "340130"
  },
  {
    "text": "hibernate h2 database on the local filesystem with the pro or the paid",
    "start": "340130",
    "end": "346760"
  },
  {
    "text": "version you can store data in react or cassandra Amazon DynamoDB and pretty",
    "start": "346760",
    "end": "353750"
  },
  {
    "text": "much any sequel server out there and the atomic does not store your data in a",
    "start": "353750",
    "end": "359240"
  },
  {
    "text": "database format that we just use as a database like a database would use the file system stores just blocks of data",
    "start": "359240",
    "end": "366530"
  },
  {
    "text": "inside us but that allows the atomic not to worry about this persistence which is",
    "start": "366530",
    "end": "372080"
  },
  {
    "text": "already a pretty solved problem on top of that the atomic runs one of its two",
    "start": "372080",
    "end": "378830"
  },
  {
    "start": "374000",
    "end": "455000"
  },
  {
    "text": "most central pieces which is the trans actor the trans actor is what you would think of it's a traditional database",
    "start": "378830",
    "end": "385130"
  },
  {
    "text": "server except that it only handles rights that's all it does this trans actor has nothing to do with",
    "start": "385130",
    "end": "392660"
  },
  {
    "text": "queries or any attempts of retrieving information from your database and this design allows you to scale the right",
    "start": "392660",
    "end": "400130"
  },
  {
    "text": "part of a database independently from the reads so you can have long-running queries that will not hamper your ability to",
    "start": "400130",
    "end": "406960"
  },
  {
    "text": "process transactions the trans actor is",
    "start": "406960",
    "end": "412110"
  },
  {
    "text": "interesting for a few more reasons it's the atomic is a single writer system so",
    "start": "412110",
    "end": "419379"
  },
  {
    "text": "there's only ever one active trans actor running and that's you cannot have any more and this is how the trans actor",
    "start": "419379",
    "end": "426339"
  },
  {
    "text": "delivers acid transactions and it handles isolation by simply processing",
    "start": "426339",
    "end": "435189"
  },
  {
    "text": "transactions sequentially so you pop transactions on the queue in the atomic process them one at a time the blue",
    "start": "435189",
    "end": "443080"
  },
  {
    "text": "shading on the box here indicates that you can have a standby trans actor so you can actually have two trans actors",
    "start": "443080",
    "end": "449830"
  },
  {
    "text": "going but only one of them are going to be active the other one is for high availability so when you want to",
    "start": "449830",
    "end": "457240"
  },
  {
    "start": "455000",
    "end": "542000"
  },
  {
    "text": "retrieve data you do that from a peer process and a peer process is",
    "start": "457240",
    "end": "463860"
  },
  {
    "text": "essentially read only database that runs inside your application process if",
    "start": "463860",
    "end": "469029"
  },
  {
    "text": "you're on the JVM so the atomic is implemented in enclosure and it runs on",
    "start": "469029",
    "end": "475270"
  },
  {
    "text": "the JVM and you can basically run the database as part of your application platform process on the JVM and the peer",
    "start": "475270",
    "end": "484180"
  },
  {
    "text": "process is the one that's processing the queries and retrieving all the data it builds up a cache it builds indexes and",
    "start": "484180",
    "end": "492520"
  },
  {
    "text": "it there's always needed for you to have efficient data retrieval from your database the peer process will read",
    "start": "492520",
    "end": "499930"
  },
  {
    "text": "directly from storage and it will also receive updates from the trans actor so whenever someone puts something into the",
    "start": "499930",
    "end": "505870"
  },
  {
    "text": "trans actor the atomic will assume that recent data is probably going to be read back so it's strange that data to the",
    "start": "505870",
    "end": "512500"
  },
  {
    "text": "peers if you're not on the JVM I'm sorry",
    "start": "512500",
    "end": "517510"
  },
  {
    "text": "I should mention this if you're running multiple application processes and you",
    "start": "517510",
    "end": "522578"
  },
  {
    "text": "don't want to pay the memory fee for each process you can run a memcache cluster for a shared object cache now",
    "start": "522579",
    "end": "528880"
  },
  {
    "text": "because the atomic is append-only it has a immutable data data structure",
    "start": "528880",
    "end": "536410"
  },
  {
    "text": "for all this data so there is no need for cache invalidation in this in this architecture the peer server is an",
    "start": "536410",
    "end": "545290"
  },
  {
    "start": "542000",
    "end": "606000"
  },
  {
    "text": "alternative if you are not on the JVM or for some other reason you don't want to run the the peer inside your application",
    "start": "545290",
    "end": "551740"
  },
  {
    "text": "process and it's basically the same thing except that it exposes an HTTP",
    "start": "551740",
    "end": "556839"
  },
  {
    "text": "REST API so you can talk to it and then you will find client libraries for a",
    "start": "556839",
    "end": "563350"
  },
  {
    "text": "multitude of languages which can talk to that HTTP API so the example that we'll",
    "start": "563350",
    "end": "569290"
  },
  {
    "text": "be showing you here today will be with closure with the peer process running if you're going to use it from some other",
    "start": "569290",
    "end": "575459"
  },
  {
    "text": "language it will be similar but the actual API will be slightly different",
    "start": "575459",
    "end": "580680"
  },
  {
    "text": "and I would also say that the peer server is a it's a full-featured",
    "start": "580680",
    "end": "586980"
  },
  {
    "text": "alternative to the peer but the pair gives you probably the best experience because it actually bolts the database",
    "start": "586980",
    "end": "593500"
  },
  {
    "text": "into your application that means that you can do queries and data retrieval with basically no network overhead at",
    "start": "593500",
    "end": "600490"
  },
  {
    "text": "all because it's all local to your process okay so let's start is the font",
    "start": "600490",
    "end": "609399"
  },
  {
    "start": "606000",
    "end": "840000"
  },
  {
    "text": "size readable to you guys okay so first of all I want to talk about the",
    "start": "609399",
    "end": "614829"
  },
  {
    "text": "data mollette atomic cache and data is model in the atomic much like it's model",
    "start": "614829",
    "end": "620199"
  },
  {
    "text": "in RDF so in RDF you talk about triples you have an object predicate and I'm",
    "start": "620199",
    "end": "626199"
  },
  {
    "text": "sorry subject predicate and object and they sound like you have an entity and",
    "start": "626199",
    "end": "631300"
  },
  {
    "text": "attribute and a value and this thing is called a fact so the atomic only stores",
    "start": "631300",
    "end": "637180"
  },
  {
    "text": "facts it's the only data type it knows about and an entity is in practice just",
    "start": "637180",
    "end": "642610"
  },
  {
    "text": "a number it's an ID of some thing and then you have an attribute which is a",
    "start": "642610",
    "end": "650550"
  },
  {
    "text": "closure a keyword if your language does not support keywords it will typically",
    "start": "650550",
    "end": "655600"
  },
  {
    "text": "be a string and then there's some value exists so this is very much like RDF and",
    "start": "655600",
    "end": "664110"
  },
  {
    "text": "like I said the entity is usually just an ID at least technically it is",
    "start": "664110",
    "end": "670390"
  },
  {
    "text": "conceptually and the entity is an ID and all the attributes associated with that",
    "start": "670390",
    "end": "675610"
  },
  {
    "text": "ID but in addition to these three parts atomic tax on two more pieces of",
    "start": "675610",
    "end": "680980"
  },
  {
    "text": "information here and the first one is another number which is the ID of the transaction that created this fact so",
    "start": "680980",
    "end": "688600"
  },
  {
    "text": "whenever you put facts into the atomic it happens part of a transaction and that transaction is also an entity which",
    "start": "688600",
    "end": "695470"
  },
  {
    "text": "has metadata about it and then finally there is a boolean at the end here which",
    "start": "695470",
    "end": "701200"
  },
  {
    "text": "tells the atomic whether this is an assertion data being added or if it's a retraction data being removed from your",
    "start": "701200",
    "end": "708100"
  },
  {
    "text": "database so let's say that this was the first transaction only inserts one",
    "start": "708100",
    "end": "713770"
  },
  {
    "text": "attribute for one entity if I wanted to change my name this would look like the following in the atomic you would have a",
    "start": "713770",
    "end": "720070"
  },
  {
    "text": "new transaction with two facts and there would be a new transaction ID here and",
    "start": "720070",
    "end": "727620"
  },
  {
    "text": "then first of all it would remove the old value and then it would set a new",
    "start": "727620",
    "end": "733180"
  },
  {
    "text": "value this is how datum the atomic Mull's changes at the basic level I for",
    "start": "733180",
    "end": "740860"
  },
  {
    "text": "you as a developer you would just set a new value and then the atomic will actually create it two facts for you so",
    "start": "740860",
    "end": "749460"
  },
  {
    "text": "this is all you really need to know about how they distort the atomic stores",
    "start": "749460",
    "end": "754720"
  },
  {
    "text": "data and we will see this again when we start talking about queries in a little while okay so what about schemas",
    "start": "754720",
    "end": "764250"
  },
  {
    "text": "whenever you use an attribute to store something in the atomic you have to use a named attribute that has been defined",
    "start": "764250",
    "end": "770830"
  },
  {
    "text": "ahead of time so a attribute looks",
    "start": "770830",
    "end": "776320"
  },
  {
    "text": "pretty much like this you give the attribute a name and then you have you",
    "start": "776320",
    "end": "782500"
  },
  {
    "text": "set a type for that attribute like so string and then you have to tell data",
    "start": "782500",
    "end": "790420"
  },
  {
    "text": "the atomic what's the cardinality of the attribute is and the cardinality tells",
    "start": "790420",
    "end": "796540"
  },
  {
    "text": "the atomic that what to do when you add this attribute to an entity the carnality can be one or many",
    "start": "796540",
    "end": "803650"
  },
  {
    "text": "if it's one then writing this attribute will overwrite the existing value if it's many then it will keep adding to a",
    "start": "803650",
    "end": "809950"
  },
  {
    "text": "list of values and then there are some other things you can tell do as well you",
    "start": "809950",
    "end": "815110"
  },
  {
    "text": "can say that an attribute is unique you can have it specifically indexed and a",
    "start": "815110",
    "end": "821920"
  },
  {
    "text": "bunch of other things but this is like the gist of it okay so before we get",
    "start": "821920",
    "end": "831040"
  },
  {
    "text": "into the data retrieval we need an actual scheme and some data to look at so this is one of my dietary habits come",
    "start": "831040",
    "end": "839230"
  },
  {
    "text": "into the picture so this is a this is my database that I told you about earlier",
    "start": "839230",
    "end": "845020"
  },
  {
    "start": "840000",
    "end": "872000"
  },
  {
    "text": "so this is an emacs org-mode file which has been working on for seven years and",
    "start": "845020",
    "end": "851500"
  },
  {
    "text": "it contains like for every week like on a Saturday I will plan what we're going to eat the next week and I put it in",
    "start": "851500",
    "end": "857260"
  },
  {
    "text": "here and then for some reason I just kept it going and I have lots of data so",
    "start": "857260",
    "end": "862990"
  },
  {
    "text": "if you go to the bottom list file literally like shopping lists and budgets and it was very ambitious at",
    "start": "862990",
    "end": "868270"
  },
  {
    "text": "some point but it's now it's just meals so I created a schema to hold this data",
    "start": "868270",
    "end": "875400"
  },
  {
    "start": "872000",
    "end": "1120000"
  },
  {
    "text": "and I'll just walk you very quickly through it so we can have some example queries when I run on it so I defined",
    "start": "875400",
    "end": "883390"
  },
  {
    "text": "some users okay I forgot to say one thing the attributes you specify you",
    "start": "883390",
    "end": "890290"
  },
  {
    "text": "have to specify each attribute you are going to use but what about the entities like the person entity the answer is",
    "start": "890290",
    "end": "896200"
  },
  {
    "text": "that the atomic does not care about entities at all the atomic only cares about attributes so what attributes goes",
    "start": "896200",
    "end": "904720"
  },
  {
    "text": "with what kind of entities is up for your application to decide so in the",
    "start": "904720",
    "end": "910120"
  },
  {
    "text": "atomic you cannot say that an entity can only have these attributes or it must have at least these or this one is",
    "start": "910120",
    "end": "915910"
  },
  {
    "text": "required whatever that's all left to your application this might seem like a",
    "start": "915910",
    "end": "922270"
  },
  {
    "text": "weakness at first but it's actually a strength and it allows your schema to be",
    "start": "922270",
    "end": "927850"
  },
  {
    "text": "flexible and grow organically over time and also because the atomic keeps",
    "start": "927850",
    "end": "933130"
  },
  {
    "text": "historic record of all your data if you if you would add a new attributes how will that apply with the",
    "start": "933130",
    "end": "939889"
  },
  {
    "text": "old ones and so on so and another interesting aspect with this is that if",
    "start": "939889",
    "end": "947360"
  },
  {
    "text": "you do like I've done here is called its users and I have a user name like you",
    "start": "947360",
    "end": "953149"
  },
  {
    "text": "can see here and a user email and then you use the namespace part of this keywords and you can indicate what kind",
    "start": "953149",
    "end": "959930"
  },
  {
    "text": "of entity it is this is similar to a table style designed in a relational",
    "start": "959930",
    "end": "966769"
  },
  {
    "text": "database system but the strength here is that if you have an entity that could",
    "start": "966769",
    "end": "972709"
  },
  {
    "text": "have a hundred different attributes but most entities only have like five or ten",
    "start": "972709",
    "end": "978639"
  },
  {
    "text": "then the atomic can efficiently store that because it does not have to store nil columns right so you can emulate a",
    "start": "978639",
    "end": "987649"
  },
  {
    "text": "table style design with this but you can also store data in a graph if you want",
    "start": "987649",
    "end": "993649"
  },
  {
    "text": "to want to do that and the same entity could have and entity attributes with",
    "start": "993649",
    "end": "998990"
  },
  {
    "text": "different namespaces and it's really up to you so but I've gone for a fairly",
    "start": "998990",
    "end": "1004389"
  },
  {
    "text": "straightforward table like design here or that's the intention at least so there's users there's a group which",
    "start": "1004389",
    "end": "1011769"
  },
  {
    "text": "is just a bunch of users typically this is the user system is me my wife and the",
    "start": "1011769",
    "end": "1017889"
  },
  {
    "text": "group is our house no that's it and then there are dishes and the dishes the",
    "start": "1017889",
    "end": "1023980"
  },
  {
    "text": "thing that you put on a table like Lavanya and it's it's the abstract concept of the dish and then a dish is",
    "start": "1023980",
    "end": "1033120"
  },
  {
    "text": "realized by a recipe so the reason I went this way I wanted to be able to",
    "start": "1033120",
    "end": "1039370"
  },
  {
    "text": "tell how many times if I had Lavanya but from these like 20 different recipes so",
    "start": "1039370",
    "end": "1046288"
  },
  {
    "text": "the details of this schema is not really that important but you can tell here",
    "start": "1046289",
    "end": "1052230"
  },
  {
    "text": "here's a important attributes recipe slash dish so this has the type of ref",
    "start": "1052230",
    "end": "1057640"
  },
  {
    "text": "and that means that the atomic will enforce that this attribute can only ever hold IDs of other entities in the",
    "start": "1057640",
    "end": "1065260"
  },
  {
    "text": "database so this is a relation that the atomic knows about",
    "start": "1065260",
    "end": "1070590"
  },
  {
    "text": "again it doesn't care about what kind of entities there's only ever like one kind",
    "start": "1070590",
    "end": "1075840"
  },
  {
    "text": "of entity but it will ensure that you make valid relations between your data",
    "start": "1075840",
    "end": "1081390"
  },
  {
    "text": "and whenever you're designing relationships there's always a a problem",
    "start": "1081390",
    "end": "1087750"
  },
  {
    "text": "deciding on which end of the relationship you want to model it if you want to have recipe dish or you want to",
    "start": "1087750",
    "end": "1093059"
  },
  {
    "text": "dish recipes if you fall and the atomic makes this decision very simple because",
    "start": "1093059",
    "end": "1099710"
  },
  {
    "text": "no matter where you put it you can navigate both ways of that relationship which I'll show you very soon okay",
    "start": "1099710",
    "end": "1108780"
  },
  {
    "text": "so then in my app I also have some seed data because I started with a bunch of",
    "start": "1108780",
    "end": "1114210"
  },
  {
    "text": "manual data not very important let's get on to the querying part okay when you",
    "start": "1114210",
    "end": "1123330"
  },
  {
    "text": "want to retrieve data from your database if you're in the relational database you",
    "start": "1123330",
    "end": "1128340"
  },
  {
    "text": "are handed a hammer the hammer is called sinkhole queries and you use that hammer to insert data into your database to",
    "start": "1128340",
    "end": "1135690"
  },
  {
    "text": "retrieve data from your database and to solve logic puzzles about your data like who's the most popular eater of",
    "start": "1135690",
    "end": "1142980"
  },
  {
    "text": "vegetarian food stuff like that you use queries for all this in the atomic you",
    "start": "1142980",
    "end": "1148530"
  },
  {
    "text": "are you have more fine-grain tools so like they already saw right is handled",
    "start": "1148530",
    "end": "1154980"
  },
  {
    "text": "by another process altogether so if you think about stuff like sequel injection",
    "start": "1154980",
    "end": "1160850"
  },
  {
    "text": "if you were to ask about information from the atomic about little bobby drop tables he could never drop tables in",
    "start": "1160850",
    "end": "1167700"
  },
  {
    "text": "your database because the writes are handled by another process entirely but",
    "start": "1167700",
    "end": "1174150"
  },
  {
    "text": "then again there's even when you're retrieving data there's different mindsets sometimes you know about a",
    "start": "1174150",
    "end": "1181350"
  },
  {
    "text": "thing I know about this user I want to know where does it live and other times",
    "start": "1181350",
    "end": "1187080"
  },
  {
    "text": "you want to solve like puzzles and the atomic ask queries for the latter thing",
    "start": "1187080",
    "end": "1193049"
  },
  {
    "text": "but for the first thing there's two other api's that are easier to work with so okay this is closer apologize it's if",
    "start": "1193049",
    "end": "1201990"
  },
  {
    "text": "you're not very familiar with it but hopefully it it's going to work for you so first of all you require the atomic API so this",
    "start": "1201990",
    "end": "1210420"
  },
  {
    "text": "is the peer API that I talked about earlier you can also use this from Java or any other JVM language and then you",
    "start": "1210420",
    "end": "1218100"
  },
  {
    "text": "have a connection that I made up front so this is just a connection to my data to my data database and to pull data you",
    "start": "1218100",
    "end": "1226380"
  },
  {
    "text": "can use the entity API here and then you're going to pass in something really",
    "start": "1226380",
    "end": "1232860"
  },
  {
    "text": "strange which I'll discuss very shortly and something else here okay so this is",
    "start": "1232860",
    "end": "1241800"
  },
  {
    "text": "a not very spectacular at this point it was hard for you guys to read okay so",
    "start": "1241800",
    "end": "1249270"
  },
  {
    "text": "what's happening here the entity API retrieves an entity from the database",
    "start": "1249270",
    "end": "1255390"
  },
  {
    "text": "like it says and the entity is identified by a unique attribute so",
    "start": "1255390",
    "end": "1261330"
  },
  {
    "text": "whenever you've said that a attribute can be unique you can reference it directly like this you don't know you",
    "start": "1261330",
    "end": "1267390"
  },
  {
    "text": "don't have to know what the entity ID of this thing is you can use an unique",
    "start": "1267390",
    "end": "1272880"
  },
  {
    "text": "attribute to identify and what is this thing you're passing in here well the",
    "start": "1272880",
    "end": "1279060"
  },
  {
    "text": "connection is a connection to the that",
    "start": "1279060",
    "end": "1284070"
  },
  {
    "text": "trans actor that you're the database is running but you don't run queries on the trans actor you run queries on the",
    "start": "1284070",
    "end": "1290100"
  },
  {
    "text": "client and you have to run the queries on a view of your data so if you",
    "start": "1290100",
    "end": "1297540"
  },
  {
    "text": "remember when we looked at this so your database is basically this part it's",
    "start": "1297540",
    "end": "1307110"
  },
  {
    "text": "just a collection of facts and by default it will contain all the facts",
    "start": "1307110",
    "end": "1312390"
  },
  {
    "text": "ever created in your system but before you ask for information from you you have to define some kind of view because",
    "start": "1312390",
    "end": "1319010"
  },
  {
    "text": "as I told you earlier if we have these three facts then I only actually need",
    "start": "1319010",
    "end": "1324540"
  },
  {
    "text": "one of these facts to know what the name of this person is and the DB function",
    "start": "1324540",
    "end": "1331260"
  },
  {
    "text": "here provides you a compressed view of all the text in your database",
    "start": "1331260",
    "end": "1336720"
  },
  {
    "text": "represents the current state and it does that at some point in time and that",
    "start": "1336720",
    "end": "1343289"
  },
  {
    "text": "point in time is exactly when I call this function it gives you an immutable",
    "start": "1343289",
    "end": "1348870"
  },
  {
    "text": "value back which is your entire database at this point in time with the current information I will show you in a little",
    "start": "1348870",
    "end": "1355980"
  },
  {
    "text": "bit that there are other views you can gain as well to access different kinds of information so this entity function",
    "start": "1355980",
    "end": "1363330"
  },
  {
    "text": "here it returns back to me the recipe but it does it does represent that with",
    "start": "1363330",
    "end": "1371610"
  },
  {
    "text": "a lazy map so it doesn't look very fantastic right now but we can ask it for information like what's the variant",
    "start": "1371610",
    "end": "1378659"
  },
  {
    "text": "name of this recipe okay something like this what kind of dish was this and then",
    "start": "1378659",
    "end": "1386700"
  },
  {
    "text": "you can so this is another entity that I'm getting back so now you can lazily",
    "start": "1386700",
    "end": "1392070"
  },
  {
    "text": "pull information about this entity into your process and with the relational database you probably would not want to",
    "start": "1392070",
    "end": "1398340"
  },
  {
    "text": "go this route because you would have the n plus 1 queries problem which is you're paying the network cost for every time",
    "start": "1398340",
    "end": "1407250"
  },
  {
    "text": "you want to access an attribute with a Tomic you don't do that because the atomic creates indexes that are stored",
    "start": "1407250",
    "end": "1413970"
  },
  {
    "text": "in blocks in the in the underlying storage and whenever you pull out one piece of fact is going to pull out also",
    "start": "1413970",
    "end": "1420799"
  },
  {
    "text": "1 to 20,000 other facts along with it and if we're accessing attributes on the",
    "start": "1420799",
    "end": "1426539"
  },
  {
    "text": "same entity after you've accessed the first one there's a good chance that the rest of them are in memory in the same",
    "start": "1426539",
    "end": "1432390"
  },
  {
    "text": "process so this actually works quite efficiently and most of the time when",
    "start": "1432390",
    "end": "1438299"
  },
  {
    "text": "you when you know who you're talking about you just want to retrieve more",
    "start": "1438299",
    "end": "1443309"
  },
  {
    "text": "data about then you can use the entity API there's no query symbol to do that",
    "start": "1443309",
    "end": "1450710"
  },
  {
    "text": "ok but there are also queries so let's take a look at those and I'll get back",
    "start": "1450710",
    "end": "1457350"
  },
  {
    "start": "1456000",
    "end": "1496000"
  },
  {
    "text": "to the other kinds of database views later so queries are run with a queue function",
    "start": "1457350",
    "end": "1464460"
  },
  {
    "text": "and in the atomic you have a language called data log implemented",
    "start": "1464460",
    "end": "1471140"
  },
  {
    "text": "like I said initially the atomic does not reinvent the things that it doesn't",
    "start": "1471140",
    "end": "1476760"
  },
  {
    "text": "need to reinvent and datalog is one of those things so that allow comes from prologue originally and it's implement",
    "start": "1476760",
    "end": "1484650"
  },
  {
    "text": "is here for diatomic I'm not going to give you like a thorough explanation of",
    "start": "1484650",
    "end": "1490260"
  },
  {
    "text": "all the syntax but I will tell you to notice one interesting thing so here",
    "start": "1490260",
    "end": "1496440"
  },
  {
    "start": "1496000",
    "end": "1734000"
  },
  {
    "text": "remember I told you about the facts at the atomic store they look like this",
    "start": "1496440",
    "end": "1502500"
  },
  {
    "text": "there's an entity and attribute a value a transaction and whether it's being added or not in data log what you can do",
    "start": "1502500",
    "end": "1509040"
  },
  {
    "text": "is to declare relationships between your facts and then the query processor will",
    "start": "1509040",
    "end": "1514950"
  },
  {
    "text": "just solve the logic puzzle and give you back everything that matches and you do",
    "start": "1514950",
    "end": "1520110"
  },
  {
    "text": "that by specifying question mark in a name to put in place holder for four",
    "start": "1520110",
    "end": "1525900"
  },
  {
    "text": "values and you can realize other kinds of values so for instance I could say give me the entity that has the recipe",
    "start": "1525900",
    "end": "1532740"
  },
  {
    "text": "ID that we had before this one and then I don't care what transaction and I",
    "start": "1532740",
    "end": "1540690"
  },
  {
    "text": "don't care if it's being added or removed I just want all the facts that talked about this entity in this",
    "start": "1540690",
    "end": "1547410"
  },
  {
    "text": "attribute with this value and again you have to pass in a database to run the",
    "start": "1547410",
    "end": "1552420"
  },
  {
    "text": "query against and what it gives you back is a list of ID's that matched this",
    "start": "1552420",
    "end": "1561000"
  },
  {
    "text": "thing okay so that's the very basic query most of the time you don't want to",
    "start": "1561000",
    "end": "1568230"
  },
  {
    "text": "inline concrete values like this so instead you would say here's the ID and",
    "start": "1568230",
    "end": "1574740"
  },
  {
    "text": "you would provide it as an input to the query and when you do I have this weird",
    "start": "1574740",
    "end": "1580020"
  },
  {
    "text": "thing here which is the explicit database argument and what this might",
    "start": "1580020",
    "end": "1585810"
  },
  {
    "text": "tell you is that if there's one database here maybe I can put in some more",
    "start": "1585810",
    "end": "1591000"
  },
  {
    "text": "databases into that same query and that you most certainly can okay then you",
    "start": "1591000",
    "end": "1596910"
  },
  {
    "text": "pass in this value from the outside and what you achieve with this is that the",
    "start": "1596910",
    "end": "1603150"
  },
  {
    "text": "query Scizor can cash this query in the efficient manner so basically the same",
    "start": "1603150",
    "end": "1611220"
  },
  {
    "text": "thing we had before okay moving on when you have trailing underscores like this",
    "start": "1611220",
    "end": "1617490"
  },
  {
    "text": "you can just rely them for a more readable query not that one okay but",
    "start": "1617490",
    "end": "1625380"
  },
  {
    "text": "let's take a look at so this is a basically the description of a datum or fact and you can have as many of these",
    "start": "1625380",
    "end": "1632550"
  },
  {
    "text": "as you want and you can cross-reference variables to connect various facts so",
    "start": "1632550",
    "end": "1638450"
  },
  {
    "text": "this one has a transaction associated with it let's first just start by taking",
    "start": "1638450",
    "end": "1645600"
  },
  {
    "text": "a look at it so now I get two ideas and this is the ID of the transaction that could be",
    "start": "1645600",
    "end": "1653490"
  },
  {
    "text": "rested the ID on this thing and the idea of the transaction but like I said",
    "start": "1653490",
    "end": "1658500"
  },
  {
    "text": "before the transaction is an entity in its own right and also has attributes so we can get those as well and the one",
    "start": "1658500",
    "end": "1665280"
  },
  {
    "text": "that the atomic creates for us is the one called VB sorry D BTX",
    "start": "1665280",
    "end": "1675300"
  },
  {
    "text": "instant and this is the time the transaction occurred okay so I'll call",
    "start": "1675300",
    "end": "1681840"
  },
  {
    "text": "that TX I and I'll pick that one instead and what what I'm getting back now is",
    "start": "1681840",
    "end": "1688200"
  },
  {
    "text": "the ID here and the time that this thing was created and you can see that it was created in 2011 and I just explained to",
    "start": "1688200",
    "end": "1695580"
  },
  {
    "text": "you that I put this in the atomic last years when you initially fill data into",
    "start": "1695580",
    "end": "1702420"
  },
  {
    "text": "your database you are allowed to backdate transactions the only thing that the atomic requires is that the",
    "start": "1702420",
    "end": "1709770"
  },
  {
    "text": "time is monotonically increasing so at the very first time you put that in",
    "start": "1709770",
    "end": "1715740"
  },
  {
    "text": "there you're allowed to backdate but you can never put data in that is older than your newest data if you fall and usually",
    "start": "1715740",
    "end": "1725790"
  },
  {
    "text": "by default they tell make a little handle time for you okay so that's good",
    "start": "1725790",
    "end": "1733160"
  },
  {
    "start": "1734000",
    "end": "1801000"
  },
  {
    "text": "most databases nowadays typically have or like tables and relational databases",
    "start": "1734240",
    "end": "1739410"
  },
  {
    "text": "would have an updated ad and they created as attribute in in in their",
    "start": "1739410",
    "end": "1744780"
  },
  {
    "text": "tables and database the atomic Soulstice for you and this is basically what I",
    "start": "1744780",
    "end": "1751140"
  },
  {
    "text": "showed you here we can write this query a little bit different I can say okay",
    "start": "1751140",
    "end": "1757380"
  },
  {
    "text": "give me the entity that has this ID and do not get the transaction from there but I do want to find all the",
    "start": "1757380",
    "end": "1767850"
  },
  {
    "text": "transactions that pertain to this entity so I'm using this first fact to identify",
    "start": "1767850",
    "end": "1775410"
  },
  {
    "text": "the entity and the second one to find all the transactions that are about this entity then I can get the transaction",
    "start": "1775410",
    "end": "1782400"
  },
  {
    "text": "instances back and this is where this database is becoming a poor example because it really only have my initial",
    "start": "1782400",
    "end": "1790560"
  },
  {
    "text": "data loaded into it so I'm going to create a simple database so we can play",
    "start": "1790560",
    "end": "1795810"
  },
  {
    "text": "with the time aspect here okay here's",
    "start": "1795810",
    "end": "1801990"
  },
  {
    "start": "1801000",
    "end": "1967000"
  },
  {
    "text": "another one I have to have a connection I do not okay so we're now just going to",
    "start": "1801990",
    "end": "1808110"
  },
  {
    "text": "create a new database create database and then the atomic and this is just",
    "start": "1808110",
    "end": "1815880"
  },
  {
    "text": "going to be an in-memory database which will be gone when I kill this repple",
    "start": "1815880",
    "end": "1822090"
  },
  {
    "text": "this is just for demonstration purposes but this can also be used for tests if you want to test your code so now I have",
    "start": "1822090",
    "end": "1828630"
  },
  {
    "text": "a database I have to create a connection for it so I connect to that same string",
    "start": "1828630",
    "end": "1834680"
  },
  {
    "text": "like so and then I have to have a schema before I can put data into so we use of",
    "start": "1834680",
    "end": "1841440"
  },
  {
    "text": "transact function comm and then it takes a list of either facts or entity maps",
    "start": "1841440",
    "end": "1848930"
  },
  {
    "text": "which are collection of attributes so I'll create two two attributes for this",
    "start": "1848930",
    "end": "1855720"
  },
  {
    "text": "test person full name which will be a string Oh",
    "start": "1855720",
    "end": "1863810"
  },
  {
    "text": "string and there will only be one this is the one we created before and one and",
    "start": "1863940",
    "end": "1870680"
  },
  {
    "text": "we will have another attributes which will be person email which will also be",
    "start": "1870680",
    "end": "1878460"
  },
  {
    "text": "a string so the atomic offers a few data types that you can use but they're not",
    "start": "1878460",
    "end": "1887700"
  },
  {
    "text": "very finely grained so you can number strings there's a UUID data side you can",
    "start": "1887700",
    "end": "1893070"
  },
  {
    "text": "put in there and a few others but this one is a string as well and then",
    "start": "1893070",
    "end": "1898290"
  },
  {
    "text": "cardinality and this will also just be one and we'll make it unique points",
    "start": "1898290",
    "end": "1908220"
  },
  {
    "text": "identity and this enables absurd behavior for diatomic so whenever you",
    "start": "1908220",
    "end": "1913290"
  },
  {
    "text": "put in data about something with with an email if the email exists from before",
    "start": "1913290",
    "end": "1919560"
  },
  {
    "text": "you will update the existing entity if it's the first time you've seen it it's being created then it gives us a bunch",
    "start": "1919560",
    "end": "1926850"
  },
  {
    "text": "of information back I will get back to the two on top here but the TX data here",
    "start": "1926850",
    "end": "1932280"
  },
  {
    "text": "are the actual facts that were created as part of this transaction finally",
    "start": "1932280",
    "end": "1940290"
  },
  {
    "text": "there's a map here of temporary IDs and this number here was not explicitly",
    "start": "1940290",
    "end": "1947940"
  },
  {
    "text": "available in my transaction but if you need to insert two entities that have a relationship to each other you can",
    "start": "1947940",
    "end": "1954630"
  },
  {
    "text": "generate a temporary ID to use within your transaction and then the transaction result will tell you what",
    "start": "1954630",
    "end": "1961410"
  },
  {
    "text": "entity IDs they were actually assigned when they were created so that's what we can use this for anyway",
    "start": "1961410",
    "end": "1968130"
  },
  {
    "start": "1967000",
    "end": "2044000"
  },
  {
    "text": "I have a schema so we can transact them data okay I will create a person with a",
    "start": "1968130",
    "end": "1975840"
  },
  {
    "text": "full name of my name and my email like",
    "start": "1975840",
    "end": "1984210"
  },
  {
    "text": "so okay so we can tell now that the ID was given here so I can make another",
    "start": "1984210",
    "end": "1991260"
  },
  {
    "text": "transaction for the same entity I'll show you two ways to do that the first",
    "start": "1991260",
    "end": "1996330"
  },
  {
    "text": "one is to use two dB function I will add this entity and then",
    "start": "1996330",
    "end": "2001520"
  },
  {
    "text": "set the full name attributes to my full name that's one way of doing it like I",
    "start": "2001520",
    "end": "2009710"
  },
  {
    "text": "said because the email address is now unique if I write to this thing again",
    "start": "2009710",
    "end": "2015230"
  },
  {
    "text": "it's just going to update the existing entity so I'll just do like this okay",
    "start": "2015230",
    "end": "2022580"
  },
  {
    "text": "boom okay now I have three transactions",
    "start": "2022580",
    "end": "2027620"
  },
  {
    "text": "in my database and I've created one entity and change this name twice you",
    "start": "2027620",
    "end": "2034310"
  },
  {
    "text": "will see that the maybe you don't see it but the ID here and here and here are",
    "start": "2034310",
    "end": "2041420"
  },
  {
    "text": "the same so let's take a look at this entity in the database now entity DB con",
    "start": "2041420",
    "end": "2048408"
  },
  {
    "text": "and then here and then we can do such poof okay this is what this entity looks",
    "start": "2048409",
    "end": "2055250"
  },
  {
    "text": "like currently if I perform another transaction we will study the other",
    "start": "2055250",
    "end": "2061129"
  },
  {
    "text": "result here like so and then you can",
    "start": "2061130",
    "end": "2067550"
  },
  {
    "text": "tell here that the atomic is telling me this is the database before this transaction and this is the database",
    "start": "2067550",
    "end": "2072889"
  },
  {
    "text": "after this transaction so those are alternative views on all the facts that",
    "start": "2072890",
    "end": "2078889"
  },
  {
    "text": "we can use for querying a database right so this rest is okay so now I can say DB",
    "start": "2078890",
    "end": "2087919"
  },
  {
    "text": "before that's a atomic DB okay let's pull out",
    "start": "2087919",
    "end": "2093440"
  },
  {
    "text": "the entity from that one is that entity here touch and then instead of using",
    "start": "2093440",
    "end": "2102830"
  },
  {
    "text": "this database sorry we will use DB before from the rest and then I can see",
    "start": "2102830",
    "end": "2111470"
  },
  {
    "text": "that this is my old name and if I ask the database that was created after I",
    "start": "2111470",
    "end": "2118030"
  },
  {
    "text": "can see my new name so where's different points in time here and we can take a",
    "start": "2118030",
    "end": "2123320"
  },
  {
    "text": "look at what the data looked like just like your get commit log basically I'm doing gets checkout on my database and",
    "start": "2123320",
    "end": "2129260"
  },
  {
    "text": "looking at what's inside but now we can also take a look at the query that I did before with the",
    "start": "2129260",
    "end": "2135579"
  },
  {
    "start": "2131000",
    "end": "2292000"
  },
  {
    "text": "transaction because it's going to tell something interesting now I want the entity and the transaction where let's",
    "start": "2135579",
    "end": "2144609"
  },
  {
    "text": "see II has user email I'll just do this for simplicity and all the transactions",
    "start": "2144609",
    "end": "2154630"
  },
  {
    "text": "here yep did something wrong it's not called user",
    "start": "2154630",
    "end": "2160510"
  },
  {
    "text": "it's called person okay so this is where this is one entity ID and one",
    "start": "2160510",
    "end": "2167440"
  },
  {
    "text": "transaction ID so what happened to the other transactions well all my transactions only wrote to one single",
    "start": "2167440",
    "end": "2174160"
  },
  {
    "text": "attribute right so the compressed view only has to late as one so in order to",
    "start": "2174160",
    "end": "2180190"
  },
  {
    "text": "get the rest of them we can ask the atomic for the history database so they",
    "start": "2180190",
    "end": "2187240"
  },
  {
    "text": "turn the atomic manages for indexes for us in addition to the transaction logs and every time you commit something to a",
    "start": "2187240",
    "end": "2194650"
  },
  {
    "text": "transaction things go into the transaction log which is the source of truth in the atomic but they also go",
    "start": "2194650",
    "end": "2201250"
  },
  {
    "text": "into for other indexes and those are at all covering indexes because they do not contain pointers to your data they",
    "start": "2201250",
    "end": "2207640"
  },
  {
    "text": "contain your actual data so the atomically actually stores when it's running it stores all your data up to",
    "start": "2207640",
    "end": "2214510"
  },
  {
    "text": "five times only one of those is required for recovery though and those indexes",
    "start": "2214510",
    "end": "2222819"
  },
  {
    "text": "are partitioned into three parts and one is the current view and then there's the",
    "start": "2222819",
    "end": "2228040"
  },
  {
    "text": "history view and there's the in memory of you and by default the history of view is not available because most of",
    "start": "2228040",
    "end": "2234880"
  },
  {
    "text": "the time we just want the current state of the database but you can ask for the history of you and now I'm asking all",
    "start": "2234880",
    "end": "2240309"
  },
  {
    "text": "the facts aha okay so I'm making a",
    "start": "2240309",
    "end": "2246579"
  },
  {
    "text": "mistake here as well and let me just do",
    "start": "2246579",
    "end": "2251619"
  },
  {
    "text": "this the mistake I'm making is that I am explicitly now asking for the transaction that touched the email",
    "start": "2251619",
    "end": "2258180"
  },
  {
    "text": "attribute so we're going to have to do this that entity any attribute any value",
    "start": "2258180",
    "end": "2264400"
  },
  {
    "text": "and and give me this transaction and now I get a whole list of transactions that",
    "start": "2264400",
    "end": "2270490"
  },
  {
    "text": "did touch this thing and we can use this if I wanted to know when this entity was",
    "start": "2270490",
    "end": "2276820"
  },
  {
    "text": "created I could give take pick up the minimum transaction sorry about that",
    "start": "2276820",
    "end": "2286560"
  },
  {
    "text": "minimum transaction which gives me the ID if I wanted to know the time when",
    "start": "2286560",
    "end": "2292540"
  },
  {
    "text": "that happened we can do that as well just have to perform the join on this",
    "start": "2292540",
    "end": "2298600"
  },
  {
    "text": "one again DB TX instance TX I okay this",
    "start": "2298600",
    "end": "2307150"
  },
  {
    "text": "is when it was created if we ask ask for the max that's when it was updated if I",
    "start": "2307150",
    "end": "2313600"
  },
  {
    "text": "just want to know when was the name last updated I can put the name in here so as",
    "start": "2313600",
    "end": "2319570"
  },
  {
    "text": "you can see I can get all kinds of information about when things have",
    "start": "2319570",
    "end": "2324880"
  },
  {
    "text": "happened to my data hmm yeah TAS TAS",
    "start": "2324880",
    "end": "2332310"
  },
  {
    "text": "sorry thank you okay and here's another",
    "start": "2332310",
    "end": "2337960"
  },
  {
    "text": "thing you can do I can figure out like what attribute changed when so just give",
    "start": "2337960",
    "end": "2345010"
  },
  {
    "start": "2338000",
    "end": "2407000"
  },
  {
    "text": "me the attribute and the time it changed and you get a list of the attributes and",
    "start": "2345010",
    "end": "2351010"
  },
  {
    "text": "when they changed if I only want to know when they were added I could add true here and I could keep",
    "start": "2351010",
    "end": "2358300"
  },
  {
    "text": "going on this is where you can rough around in your database and find",
    "start": "2358300",
    "end": "2364210"
  },
  {
    "text": "historic data and actually the project that I'm working on now my very first week I use this to answer a question",
    "start": "2364210",
    "end": "2371680"
  },
  {
    "text": "because someone had misused their access to an account and changed some data in",
    "start": "2371680",
    "end": "2377590"
  },
  {
    "text": "their favor and our support staff asked me like gee I don't want the clients a",
    "start": "2377590",
    "end": "2383350"
  },
  {
    "text": "finding out what happened can you figure out what he did and sure I could use",
    "start": "2383350",
    "end": "2388720"
  },
  {
    "text": "this API to tell her exactly what it did and when it did it and then we can just go and revert those changes and",
    "start": "2388720",
    "end": "2394330"
  },
  {
    "text": "everything was back to normal so that's but that's the back of part of this another more interesting",
    "start": "2394330",
    "end": "2401049"
  },
  {
    "text": "use of this is this example I will show you now oh okay here can you see this",
    "start": "2401049",
    "end": "2412019"
  },
  {
    "text": "okay so this is from the application that we're working on so event them does",
    "start": "2412019",
    "end": "2419710"
  },
  {
    "text": "they call himself like Airbnb of event spaces so if you need an event for",
    "start": "2419710",
    "end": "2425230"
  },
  {
    "text": "birthday or party wedding company holiday meeting whatever you can search their site for venues in your area and",
    "start": "2425230",
    "end": "2432430"
  },
  {
    "text": "meldova criteria and you can send request to them or you can call them and",
    "start": "2432430",
    "end": "2437769"
  },
  {
    "text": "then you'll call to a proxy service that we run and you will get access to this kind of like email thread thing and in",
    "start": "2437769",
    "end": "2446769"
  },
  {
    "text": "this app you as the organizer can communicate with the venue owner so here",
    "start": "2446769",
    "end": "2454119"
  },
  {
    "text": "i've placed a phone call lasted one minute i can write a little message to say hey did you think about our talk and",
    "start": "2454119",
    "end": "2463739"
  },
  {
    "text": "i'll send that oh maybe it's not running",
    "start": "2463739",
    "end": "2469559"
  },
  {
    "text": "okay you can attach files i can make changes here so the event is actually in",
    "start": "2471900",
    "end": "2477819"
  },
  {
    "text": "the twenty second and also you should probably want my just pictures of some",
    "start": "2477819",
    "end": "2485529"
  },
  {
    "text": "sort this might not work when I'm offline okay",
    "start": "2485529",
    "end": "2493269"
  },
  {
    "text": "whatever cancel on come on okay so",
    "start": "2493269",
    "end": "2499480"
  },
  {
    "text": "basically what we do is that you can do things here there's two parts I can",
    "start": "2499480",
    "end": "2504759"
  },
  {
    "text": "communicate in various ways and then we build like an event blog down here of",
    "start": "2504759",
    "end": "2510039"
  },
  {
    "text": "the various things that have happened and the way that we implemented this or",
    "start": "2510039",
    "end": "2515589"
  },
  {
    "text": "the way that this is designed in the database is that we have this thing which is called a booking request and",
    "start": "2515589",
    "end": "2521700"
  },
  {
    "text": "then we have a list there's a booking request slash calls attributes which has",
    "start": "2521700",
    "end": "2527529"
  },
  {
    "text": "a list of call entities like this one you see down here and then there's the booking request / messages",
    "start": "2527529",
    "end": "2534309"
  },
  {
    "text": "list which is this thing and this thing and then there's stuff like this like",
    "start": "2534309",
    "end": "2541209"
  },
  {
    "text": "when you edit certain attributes we displayed in the thread here like in the",
    "start": "2541209",
    "end": "2546789"
  },
  {
    "text": "timeline and all this we use the historic record of the booking request",
    "start": "2546789",
    "end": "2553509"
  },
  {
    "text": "like I just show you to build this event log so we haven't had we did not have to",
    "start": "2553509",
    "end": "2558909"
  },
  {
    "text": "explicitly design any part of the time aspect of this the time aspect is fully",
    "start": "2558909",
    "end": "2564159"
  },
  {
    "text": "managed by the atomic I think this is a really neat thing to be able to do without having to think about it up",
    "start": "2564159",
    "end": "2570009"
  },
  {
    "text": "front so we we started this we had not yet gotten the calls part in so when we",
    "start": "2570009",
    "end": "2577209"
  },
  {
    "text": "decided that we wanted to take phones phone calls to the system we just added a list of phone calls and voila we could",
    "start": "2577209",
    "end": "2583839"
  },
  {
    "text": "place it correctly on the timeline on all our data of like existing and and",
    "start": "2583839",
    "end": "2590109"
  },
  {
    "text": "old another thing that we're working on now is to figure out we want to figure",
    "start": "2590109",
    "end": "2596319"
  },
  {
    "text": "out for the venue owners what's their average response time and that would",
    "start": "2596319",
    "end": "2602709"
  },
  {
    "text": "just be a matter of taking a look at these messages when they're sent from the client and when they're sent from",
    "start": "2602709",
    "end": "2609279"
  },
  {
    "text": "the venue owner and we can do some math on the time that elapses between them and we can answer that question and not",
    "start": "2609279",
    "end": "2616119"
  },
  {
    "text": "only for new messages coming in but also for the entire history of our database and I think to be able to do this is",
    "start": "2616119",
    "end": "2625179"
  },
  {
    "text": "very interesting because it means you don't have to think about all the users for your like temporal data upfront you",
    "start": "2625179",
    "end": "2632919"
  },
  {
    "text": "can figure out as you go and I this is similar to doing a git bisect - to find",
    "start": "2632919",
    "end": "2639219"
  },
  {
    "text": "a bug in your code right like you figure out that something is not working now I know that it was working last month",
    "start": "2639219",
    "end": "2644979"
  },
  {
    "text": "let's just replay all the commits in between a figure out where the problems occurred and I also saw another example",
    "start": "2644979",
    "end": "2651999"
  },
  {
    "text": "from someone building a bank in Brazil and they had improved their fraud",
    "start": "2651999",
    "end": "2658449"
  },
  {
    "text": "detection algorithm which we'll take a look at like what cards are being used",
    "start": "2658449",
    "end": "2663550"
  },
  {
    "text": "in what places and what kind of transactions typically change the amount after being used in Starbucks or or",
    "start": "2663550",
    "end": "2671770"
  },
  {
    "text": "whatever and when they improve their fraud detection algorithm they can run in on all their historic data to see if",
    "start": "2671770",
    "end": "2678730"
  },
  {
    "text": "there will be any false positives or if it would like catch things that they haven't cashed in the in the past so my",
    "start": "2678730",
    "end": "2687400"
  },
  {
    "text": "point with all this is that like having all these stories that at your fingertips is really useful for a number",
    "start": "2687400",
    "end": "2693370"
  },
  {
    "text": "of reasons okay I'm running out of time",
    "start": "2693370",
    "end": "2698410"
  },
  {
    "start": "2698000",
    "end": "2802000"
  },
  {
    "text": "I showed you the history database one thing I did not show you but that you",
    "start": "2698410",
    "end": "2703540"
  },
  {
    "text": "also can do you can go back in time but you can also go forward in time so when you have a database and say that I get",
    "start": "2703540",
    "end": "2711850"
  },
  {
    "text": "the current view my database you can speculatively apply changes to that database and query the result to solve",
    "start": "2711850",
    "end": "2719800"
  },
  {
    "text": "problems so I can say with I'll just do that press here and so with this",
    "start": "2719800",
    "end": "2727600"
  },
  {
    "text": "database please apply this transaction data person yeah full name Bob and then we could",
    "start": "2727600",
    "end": "2738690"
  },
  {
    "text": "pick up the entity for instance from VB after salt and then person email",
    "start": "2738690",
    "end": "2749640"
  },
  {
    "text": "shouldn't have such long names okay ah",
    "start": "2749640",
    "end": "2756569"
  },
  {
    "text": "okay and this is this API here with can be useful for as for we use it in in our",
    "start": "2757380",
    "end": "2767560"
  },
  {
    "text": "production code but the easiest example to understand is to use it in tests right so in our tests that touch the",
    "start": "2767560",
    "end": "2775000"
  },
  {
    "text": "database we could create an in-memory database loaded with the schema and then just use with two speculatively apply a",
    "start": "2775000",
    "end": "2781330"
  },
  {
    "text": "bunch of changes run some code and see what happens okay what if the data change it this way what will happen then",
    "start": "2781330",
    "end": "2787150"
  },
  {
    "text": "yeah so there's a way for you to go both for runtime and backwards in time and there's lots of other things that I",
    "start": "2787150",
    "end": "2793810"
  },
  {
    "text": "didn't have the time to show you but you can take a look at for yourself the last thing I want to say is",
    "start": "2793810",
    "end": "2802060"
  },
  {
    "start": "2802000",
    "end": "2967000"
  },
  {
    "text": "that and are there anyone here is usually working on front-end web",
    "start": "2802060",
    "end": "2807430"
  },
  {
    "text": "applications that we used like react or Redux or stuff like that yeah so this is",
    "start": "2807430",
    "end": "2813010"
  },
  {
    "text": "a page from the redux documentation which talks about normalizing stage shape and it shows you that sometimes",
    "start": "2813010",
    "end": "2822070"
  },
  {
    "text": "your state looks like this basically a big nested javascript object of data and the clue here is that lots",
    "start": "2822070",
    "end": "2828730"
  },
  {
    "text": "of this data is duplicated throughout the payload and then they suggest or",
    "start": "2828730",
    "end": "2834130"
  },
  {
    "text": "first of all they say that this might be a problem and I wholeheartedly agree but",
    "start": "2834130",
    "end": "2839829"
  },
  {
    "text": "then they say that maybe this could be the solution and that's where I kind of",
    "start": "2839829",
    "end": "2845410"
  },
  {
    "text": "fall off because here there are suggesting that you hand roll a relational database system in JavaScript",
    "start": "2845410",
    "end": "2854160"
  },
  {
    "text": "which is probably not what you want to do what you can do instead is to use",
    "start": "2854160",
    "end": "2859720"
  },
  {
    "text": "data script which offers you the entire day Tomic model on the client so I don't",
    "start": "2859720",
    "end": "2868900"
  },
  {
    "text": "have any spectacular example for you right now but there's only one but and that is",
    "start": "2868900",
    "end": "2875319"
  },
  {
    "text": "that the data script does not have the historic view of data and that's because",
    "start": "2875319",
    "end": "2880329"
  },
  {
    "text": "it's running on the client perhaps on your phone or you wouldn't want to use unlimited memory but it offers you the",
    "start": "2880329",
    "end": "2887770"
  },
  {
    "text": "same data model and schema possibilities and you have the full query engine at",
    "start": "2887770",
    "end": "2893440"
  },
  {
    "text": "your hands and it's it's really really fun to work with and you can use it from JavaScript you can use some closure",
    "start": "2893440",
    "end": "2899619"
  },
  {
    "text": "script or whatever i really suggest you take a look at it if you work on front-end JavaScript projects in in the",
    "start": "2899619",
    "end": "2907270"
  },
  {
    "text": "example I showed you here we serve a data script database over an event was a",
    "start": "2907270",
    "end": "2916150"
  },
  {
    "text": "call event source event streets or even stream yeah server sent events so when",
    "start": "2916150",
    "end": "2924670"
  },
  {
    "text": "you load this page we send a data script database over the server sent events",
    "start": "2924670",
    "end": "2930790"
  },
  {
    "text": "whenever something happens on the trans actor on the server we calculate what",
    "start": "2930790",
    "end": "2936010"
  },
  {
    "text": "changes you need for your client database and we ship it over and it's yeah it's been a joy to work with so",
    "start": "2936010",
    "end": "2943620"
  },
  {
    "text": "that was it hopefully you now have some idea of what the atomic does and how it",
    "start": "2943620",
    "end": "2949180"
  },
  {
    "text": "might work for you and maybe like I did when I first started working with this maybe you'll realize that this database",
    "start": "2949180",
    "end": "2955360"
  },
  {
    "text": "solve some problems you didn't even realize that you had before his side so",
    "start": "2955360",
    "end": "2960640"
  },
  {
    "text": "yeah I hope you enjoy it and thank you for your attention [Applause]",
    "start": "2960640",
    "end": "2969149"
  }
]