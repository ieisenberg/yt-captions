[
  {
    "start": "0",
    "end": "11000"
  },
  {
    "text": "so hello everybody my name is anjay i'm a solution architect at software mill a",
    "start": "3199",
    "end": "8559"
  },
  {
    "text": "polish software house and you may know us from our technical blog scala times",
    "start": "8559",
    "end": "13679"
  },
  {
    "start": "11000",
    "end": "11000"
  },
  {
    "text": "newsletter scholar conference and few other open source activities mostly from scala",
    "start": "13679",
    "end": "19680"
  },
  {
    "text": "award but not all of them and if you are thinking scala what the heck",
    "start": "19680",
    "end": "25439"
  },
  {
    "text": "yeah i'm the jvm guy but don't worry this presentation is not about technology",
    "start": "25439",
    "end": "30880"
  },
  {
    "text": "is about some concepts some problems and some solutions also this presentation is",
    "start": "30880",
    "end": "36239"
  },
  {
    "text": "constantly evolving currently is based on five different commercial projects completely different domains completely",
    "start": "36239",
    "end": "42480"
  },
  {
    "text": "different problems and the idea was that i will distill the most available lessons learned",
    "start": "42480",
    "end": "49280"
  },
  {
    "text": "and yeah let's see how it will go since you've joined this session i suppose that explaining basics of event",
    "start": "49280",
    "end": "56239"
  },
  {
    "start": "51000",
    "end": "51000"
  },
  {
    "text": "sourcing is quite pointless probably most of you is already pretty familiar with this concept but there is no",
    "start": "56239",
    "end": "63199"
  },
  {
    "text": "presentation about even sourcing without the said slide so let's get it over very quickly in classic systems we are saving",
    "start": "63199",
    "end": "70640"
  },
  {
    "text": "our entities aggregates to the database as the most current state and in case of some changes we will simply override",
    "start": "70640",
    "end": "77280"
  },
  {
    "text": "this state in even sourcing state in database database not exist anymore",
    "start": "77280",
    "end": "84400"
  },
  {
    "text": "yeah you can save a snapshot of the state usually as a performance optimization but this is totally",
    "start": "84400",
    "end": "89920"
  },
  {
    "text": "optional what you are saving and what is your source of truth are events",
    "start": "89920",
    "end": "95439"
  },
  {
    "text": "and when you reply even by event from your database you'll get exactly the",
    "start": "95439",
    "end": "100640"
  },
  {
    "text": "same state as on the left side of the slide so a shopping cart with two items a and b",
    "start": "100640",
    "end": "106880"
  },
  {
    "text": "but with events you will also get more business information so item c was added",
    "start": "106880",
    "end": "112640"
  },
  {
    "text": "and then removed from the shopping cart it looks like a pretty interesting business information",
    "start": "112640",
    "end": "118399"
  },
  {
    "text": "maybe we should send a voter for this item to the user maybe we should figure out some replacement for this item",
    "start": "118399",
    "end": "125040"
  },
  {
    "text": "maybe this information is completely or not important at this point but what is",
    "start": "125040",
    "end": "131360"
  },
  {
    "text": "crucial here is that you as a developer should not decide what business facts",
    "start": "131360",
    "end": "137440"
  },
  {
    "text": "are important what's not you should store all of them and provide necessary",
    "start": "137440",
    "end": "142480"
  },
  {
    "text": "data when needed and fun fact about even sourcing from one of greg's presentations uh by the",
    "start": "142480",
    "end": "148959"
  },
  {
    "text": "way greg young is one of the even sourcing evangelists if you don't know this gentleman well",
    "start": "148959",
    "end": "154080"
  },
  {
    "text": "you should definitely google him a lot of really cool materials about even sourcing so the fun fact is that humans",
    "start": "154080",
    "end": "160400"
  },
  {
    "text": "have been using human sourcing for thousands of years that first let's say implementation of even sourcing was",
    "start": "160400",
    "end": "166319"
  },
  {
    "text": "found on clay tablets in mesopotamia nine thousand years bc and it was used for persisting",
    "start": "166319",
    "end": "172560"
  },
  {
    "text": "marketplace transactions so how many ships brett floss grain were both all sold and this way the mesopotamian",
    "start": "172560",
    "end": "178400"
  },
  {
    "text": "trader could very easily calculate the state of possession not by doing this manually like counting ships or",
    "start": "178400",
    "end": "185120"
  },
  {
    "text": "something just by replaying the facts from the display tablets and in 2005 another famous gentleman",
    "start": "185120",
    "end": "193040"
  },
  {
    "text": "martin power wrote an article about even sourcing where you can read such sentence and there are price",
    "start": "193040",
    "end": "198879"
  },
  {
    "text": "applications that use even sourcing are rare but i have seen a few applications or part of applications that use it",
    "start": "198879",
    "end": "206239"
  },
  {
    "text": "and this is kind of said 11 000 years in total seems like enough time to validate",
    "start": "206239",
    "end": "212000"
  },
  {
    "text": "some concept on production don't you think fortunately we have 20 10 22 or",
    "start": "212000",
    "end": "218560"
  },
  {
    "text": "unfortunately it depends but yeah 2022 and from my observations which are",
    "start": "218560",
    "end": "224080"
  },
  {
    "text": "obviously biased but from my observations this concept is finally getting more and more popular why",
    "start": "224080",
    "end": "230720"
  },
  {
    "text": "because we are building completely different systems than 50 20 years ago and at some point you simply don't have",
    "start": "230720",
    "end": "237599"
  },
  {
    "text": "a choice to scale to move forward to expand you will either end up",
    "start": "237599",
    "end": "243200"
  },
  {
    "text": "with something very close to event sourcing or with full event sourcing adaptation in some places",
    "start": "243200",
    "end": "248959"
  },
  {
    "text": "so i'm observing the same patterns in basically any event driven system",
    "start": "248959",
    "end": "255040"
  },
  {
    "start": "255000",
    "end": "255000"
  },
  {
    "text": "why even sourcing as i mentioned with even sourcing you will get complete block of all stage changes in the system",
    "start": "255040",
    "end": "260959"
  },
  {
    "text": "this is especially useful for your business no data is lost but for you as a developer as well why debugging so",
    "start": "260959",
    "end": "267680"
  },
  {
    "text": "many times when i when i was trying to find a bug in my system it was necessary to replay even by event",
    "start": "267680",
    "end": "274240"
  },
  {
    "text": "and trust me debugging this way is a completely different story it's like",
    "start": "274240",
    "end": "279520"
  },
  {
    "text": "it's like time machine but more real you can move backward forward it's super handy especially if you have a really",
    "start": "279520",
    "end": "286000"
  },
  {
    "text": "really nasty bug and yeah but from perspective of my clients they invest in",
    "start": "286000",
    "end": "293120"
  },
  {
    "text": "even sourcing solution because of these two reasons performance and scalability and of course this depends on the actual",
    "start": "293120",
    "end": "298560"
  },
  {
    "text": "implementation but let's say we've even sourcing it's way easier to achieve these goals",
    "start": "298560",
    "end": "304400"
  },
  {
    "text": "and the last point uh finally with even sourcing and asynchronous decoupled even",
    "start": "304400",
    "end": "309759"
  },
  {
    "text": "driven communication works like a charm and thanks to this pattern you can",
    "start": "309759",
    "end": "315120"
  },
  {
    "text": "embrace this kind of integration much easier and yeah it just works",
    "start": "315120",
    "end": "322639"
  },
  {
    "text": "okay before we jump into more details let's talk about one more acronym which is secures so command query",
    "start": "322639",
    "end": "327919"
  },
  {
    "text": "responsibility segregation in secure assistance the responsibility for handling",
    "start": "327919",
    "end": "333039"
  },
  {
    "text": "commands and rights is separated from handling queries and rates and this separation is not only on a software",
    "start": "333039",
    "end": "339039"
  },
  {
    "text": "level so different repositories but also on the hardware level different deployments different calls different",
    "start": "339039",
    "end": "344639"
  },
  {
    "text": "databases and you can implement cqrs without even sourcing but implementing c even",
    "start": "344639",
    "end": "350800"
  },
  {
    "text": "sourcing without crs is quite pointless i mean you can",
    "start": "350800",
    "end": "356479"
  },
  {
    "text": "but it will be really really hard to squeeze maximum potential from even sourcing without crs that's why these",
    "start": "356479",
    "end": "362880"
  },
  {
    "text": "two are implemented more or less together and during my journey with even sourcing",
    "start": "362880",
    "end": "368800"
  },
  {
    "start": "367000",
    "end": "367000"
  },
  {
    "text": "systems i extracted few different levels of even sourcing adaptation and the first level is so-called transactional",
    "start": "368800",
    "end": "375039"
  },
  {
    "text": "even sourcing when in one big transaction we are saving all the events to the event store and all read model",
    "start": "375039",
    "end": "381039"
  },
  {
    "text": "updates very easy to start very easy to implement no magic zero eventual",
    "start": "381039",
    "end": "386080"
  },
  {
    "text": "consistency but performance of such solution is quite limited of course this huge transaction",
    "start": "386080",
    "end": "392240"
  },
  {
    "text": "might become a problem sooner than later and updating all right models will take",
    "start": "392240",
    "end": "397440"
  },
  {
    "text": "some time and still i'm not saying that you should never ever implement even sourcing this way",
    "start": "397440",
    "end": "404319"
  },
  {
    "text": "this is actually a very good starting point especially if you are working on a proof",
    "start": "404319",
    "end": "410000"
  },
  {
    "text": "of concept or you are working on a project that maybe no one will use it like in one of",
    "start": "410000",
    "end": "416960"
  },
  {
    "text": "my cases so yeah if you want to read more about such",
    "start": "416960",
    "end": "425199"
  },
  {
    "text": "such implementational different sourcing just follow the link from the slide they will",
    "start": "425280",
    "end": "430720"
  },
  {
    "text": "redirect you to very nice articles about how to start with even sourcing how to do this with ration database with a lot",
    "start": "430720",
    "end": "437280"
  },
  {
    "text": "of examples and edge cases etc etc also as a company we created a very small",
    "start": "437280",
    "end": "442880"
  },
  {
    "text": "open source project with an example of such implementation yeah it's in scala but even if scala is not your first language",
    "start": "442880",
    "end": "450080"
  },
  {
    "text": "you should be able to grab the overall concepts and just copy paste them to your code base",
    "start": "450080",
    "end": "455599"
  },
  {
    "text": "so quick summary of the first level easy to implement is it reason about zero eventual",
    "start": "455599",
    "end": "460639"
  },
  {
    "text": "consistency but performance and scalability not so great second level this time the scope of this problematic",
    "start": "460639",
    "end": "467280"
  },
  {
    "text": "transaction is much smaller we are saving only events in transaction to the database and",
    "start": "467280",
    "end": "474240"
  },
  {
    "text": "append only rights is something that any database would love to handle it's",
    "start": "474240",
    "end": "479360"
  },
  {
    "text": "it's like the most the fastest possible write operation for most of the databases so really really fast",
    "start": "479360",
    "end": "486000"
  },
  {
    "text": "we definitely improve the command service side there is a new piece on the diagram a",
    "start": "486000",
    "end": "491440"
  },
  {
    "text": "projector so something needs to read new events and update various street models",
    "start": "491440",
    "end": "497199"
  },
  {
    "text": "and we can scale this part as well because we can launch hundreds of projectors let's say but",
    "start": "497199",
    "end": "502879"
  },
  {
    "text": "there is a cost since this lever and further we are entering the eventual consistency world",
    "start": "502879",
    "end": "508720"
  },
  {
    "text": "and this could materialize in two different problems the first is that maybe not connected to the eventual",
    "start": "508720",
    "end": "514880"
  },
  {
    "text": "constancy but let's say if we launch hundreds of projectors by accident we could increase the even store load",
    "start": "514880",
    "end": "521360"
  },
  {
    "text": "because they will constantly constantly query the database for the new events this is a rare situation but there is a",
    "start": "521360",
    "end": "527760"
  },
  {
    "text": "second problem a lack so how often should i query my database for new events each three second each one second",
    "start": "527760",
    "end": "536160"
  },
  {
    "text": "i can imagine many systems when an additional second of eventual consistency is simply not acceptable",
    "start": "536160",
    "end": "543600"
  },
  {
    "text": "so what can we do about this but a quick summary before a performance and scalability improved but eventual",
    "start": "543600",
    "end": "548959"
  },
  {
    "text": "consistency increased even strolled with a question mark and lux",
    "start": "548959",
    "end": "554800"
  },
  {
    "text": "another new piece on the diagram which is an even bus and yeah probably you might think that",
    "start": "554800",
    "end": "562480"
  },
  {
    "text": "introducing even bus here is an overkill listen over engineering i will agree with you if you have three projectors",
    "start": "562480",
    "end": "569279"
  },
  {
    "text": "then yeah don't go with eventbus but there are many cases where this additional buffer between your event",
    "start": "569279",
    "end": "576160"
  },
  {
    "text": "store and your projectors will give you a lot of benefits so what are the benefits right now you can launch",
    "start": "576160",
    "end": "583200"
  },
  {
    "text": "you need to query the database only once to get new events copy paste them to the eventbus and launching hundreds of",
    "start": "583200",
    "end": "590480"
  },
  {
    "text": "projectors is not a problem anymore because even buses message bus were designed to handle such use cases so",
    "start": "590480",
    "end": "596880"
  },
  {
    "text": "it's it's okay unfortunately the problem of lag still remains so how often should i query my",
    "start": "596880",
    "end": "602640"
  },
  {
    "text": "database maybe each millisecond i suppose that launching 1000 requests",
    "start": "602640",
    "end": "609279"
  },
  {
    "text": "per second is not the best idea so the first solution very naive could be",
    "start": "609279",
    "end": "614720"
  },
  {
    "text": "that we will save events to the event store and send them to the event bus in",
    "start": "614720",
    "end": "621200"
  },
  {
    "text": "transaction yeah transaction on two heterogeneous system is a really really bad idea",
    "start": "621200",
    "end": "627200"
  },
  {
    "text": "so quick patch for that right now we are saving events in transaction and then sending them in the",
    "start": "627200",
    "end": "632880"
  },
  {
    "text": "old style to the even bus and this is the fastest possible way to fill even bus",
    "start": "632880",
    "end": "638399"
  },
  {
    "text": "with new events but of course you need to provide some guarantees here at least once delivery so no no events can be",
    "start": "638399",
    "end": "645519"
  },
  {
    "text": "lost and also events order must be exactly the same",
    "start": "645519",
    "end": "651040"
  },
  {
    "text": "how can you achieve this for example by tracking event sequence number so each event should have its own",
    "start": "651279",
    "end": "657279"
  },
  {
    "text": "monolithically increased sequence number if the sequence number is plus one then yeah i can send it to the even bus if",
    "start": "657279",
    "end": "663120"
  },
  {
    "text": "it's plus zero or uh minus one it's uh duplicate i can",
    "start": "663120",
    "end": "668720"
  },
  {
    "text": "skip it if it's plus two or more it means that i have a gap in my events and i need to fill this gap directly from",
    "start": "668720",
    "end": "674959"
  },
  {
    "text": "the from the database in 99 of cases you won't see any gaps but you need to be",
    "start": "674959",
    "end": "681360"
  },
  {
    "text": "ready for some restarts crashes etc etc and frankly speaking implementing this is",
    "start": "681360",
    "end": "688640"
  },
  {
    "text": "not a piece of cake it's quite challenging but it's possible definitely it's possible",
    "start": "688640",
    "end": "694480"
  },
  {
    "text": "so let's validate our architecture query services or stateless services to scale",
    "start": "694480",
    "end": "699600"
  },
  {
    "text": "this part you just need to launch another instance put some load balancer on top of it and you're fine",
    "start": "699600",
    "end": "705279"
  },
  {
    "text": "read models yeah you can have a separate database period model you can have a separate database per query not a",
    "start": "705279",
    "end": "711519"
  },
  {
    "text": "problem projectors yeah you can definitely scale this part because you will use some",
    "start": "711519",
    "end": "717200"
  },
  {
    "text": "scalable even bus like i don't know kafka pops up whatever scaling even stored this part is tricky",
    "start": "717200",
    "end": "725360"
  },
  {
    "text": "because first we need to [Music] talk about scaling command service can we scale this part",
    "start": "725360",
    "end": "732079"
  },
  {
    "text": "command service must be consistent and to achieve consistency you have at least two options first one is",
    "start": "732079",
    "end": "738399"
  },
  {
    "text": "optimistic locking and then you are forced to use a database that supports such locking",
    "start": "738399",
    "end": "745040"
  },
  {
    "text": "mechanism in most cases a rational database but not only so your scaling capabilities here are",
    "start": "745040",
    "end": "752399"
  },
  {
    "text": "basically limited by scaling capabilities of your event store if you need to handle huge load with",
    "start": "752399",
    "end": "759279"
  },
  {
    "text": "really really a lot of frequents per second i would recommend to handle concurrency on your application level",
    "start": "759279",
    "end": "765839"
  },
  {
    "text": "and implement something called a single writer in this case if you if you implement",
    "start": "765839",
    "end": "771040"
  },
  {
    "text": "single writer you can use any event store you want it could be a distributed database it could be",
    "start": "771040",
    "end": "777519"
  },
  {
    "text": "single host database it doesn't matter but to scale single writer principle you",
    "start": "777519",
    "end": "783680"
  },
  {
    "text": "need a sharded cluster solution with all its advantages and disadvantages and i hope we will cover this as well",
    "start": "783680",
    "end": "790560"
  },
  {
    "text": "and this is a final version of our turboscaling even sourcing architecture",
    "start": "790560",
    "end": "795760"
  },
  {
    "text": "please do not start with something like this most likely you don't need it",
    "start": "795760",
    "end": "801440"
  },
  {
    "text": "the goal is to show you the the ultimate goal the holy grail and your job is to",
    "start": "801440",
    "end": "808079"
  },
  {
    "text": "pick the level that suits your needs and yeah that's your job uh",
    "start": "808079",
    "end": "814959"
  },
  {
    "text": "okay so we know what we want to implement now the question is how",
    "start": "814959",
    "end": "820399"
  },
  {
    "text": "uh no no sorry a quick summary performance and scalability uh very high level eventual consistency yeah complex",
    "start": "820399",
    "end": "828079"
  },
  {
    "text": "implementation i will not lie it will be hard and if you want to read more about this locking versus single writer",
    "start": "828079",
    "end": "834480"
  },
  {
    "text": "principle just follow the link from the slide it's one of my favorites article about event sourcing created stuff",
    "start": "834480",
    "end": "842000"
  },
  {
    "text": "and to cover this topic fully i should mention about two other alternatives which is a cdc so",
    "start": "842000",
    "end": "848639"
  },
  {
    "start": "843000",
    "end": "843000"
  },
  {
    "text": "instead of even bus yeah you can use cdc this is a very nice option especially if you are using a single host database but",
    "start": "848639",
    "end": "855600"
  },
  {
    "text": "if you are using a distributed database then i wouldn't recommend cdc because it will be nightmare to do this in",
    "start": "855600",
    "end": "862399"
  },
  {
    "text": "consistent way and because we desire so much streaming capabilities from our event store maybe",
    "start": "862399",
    "end": "870000"
  },
  {
    "text": "we could use event bus as an event store and this is a link to the",
    "start": "870000",
    "end": "876399"
  },
  {
    "text": "my cto article about how to implement even sourcing based on kafka",
    "start": "876399",
    "end": "881760"
  },
  {
    "text": "and i hope that i'm not signing my resignation later but be careful with that i mean the article is really great and",
    "start": "881760",
    "end": "889120"
  },
  {
    "text": "it will work super awesome for very very very specific use cases",
    "start": "889120",
    "end": "894959"
  },
  {
    "text": "but definitely not as a general purpose solution so make sure that you understand all kafka concepts correctly",
    "start": "894959",
    "end": "901040"
  },
  {
    "text": "before you use it not covered today but really were to check command sourcing and even",
    "start": "901040",
    "end": "907199"
  },
  {
    "text": "collaboration let's say it's your homework so yeah we know what we want to implement now the question is how and we",
    "start": "907199",
    "end": "913839"
  },
  {
    "text": "have options like custom implementation library or framework and if you look like on event sourcing",
    "start": "913839",
    "end": "920240"
  },
  {
    "text": "from a domain perspective this is quite trivial pattern we have three main building blocks so commands event state",
    "start": "920240",
    "end": "927440"
  },
  {
    "text": "and we just need to implement two methods process the command return the list of events that will be",
    "start": "927440",
    "end": "933360"
  },
  {
    "text": "persisted and then apply persistent event and return new version of the state that's why many people recommend",
    "start": "933360",
    "end": "939839"
  },
  {
    "text": "to implement even sourcing from the scratch by yourself",
    "start": "939839",
    "end": "944720"
  },
  {
    "text": "i could agree with that but there is one more problem your application will be production ready when you also deliver",
    "start": "945120",
    "end": "952160"
  },
  {
    "text": "few more set but required features like snapshotting failover recover debugging",
    "start": "952160",
    "end": "958160"
  },
  {
    "text": "sharding theorization schema evolution concrete access etc etc",
    "start": "958160",
    "end": "963279"
  },
  {
    "text": "and trust me implementing this by yourself is a recipe for failure i mean i would love to create my own even",
    "start": "963279",
    "end": "970160"
  },
  {
    "text": "sourcing framework don't get me wrong but at the same time i know i will make all the possible mistakes so",
    "start": "970160",
    "end": "977680"
  },
  {
    "text": "so just use something that's that's created by many programmers tested by thousands of programmers",
    "start": "977680",
    "end": "984240"
  },
  {
    "text": "and yeah do not reinvent the wheel unfortunately using any framework has it",
    "start": "984240",
    "end": "989759"
  },
  {
    "text": "hidden cost this is an example of a gpa implementation jpi is a rm framework",
    "start": "989759",
    "end": "995440"
  },
  {
    "text": "from java world very popular one and the classic implementation could look like the snippet on the slide so we",
    "start": "995440",
    "end": "1001279"
  },
  {
    "text": "have a business entity mixed with some gpa annotations",
    "start": "1001279",
    "end": "1006639"
  },
  {
    "text": "and it looks okay right",
    "start": "1006639",
    "end": "1011839"
  },
  {
    "text": "no what's wrong with this code we just mixed two really important responsibilities first is our domain",
    "start": "1012480",
    "end": "1019440"
  },
  {
    "text": "code with some business code methods and the second one is some instructions",
    "start": "1019440",
    "end": "1025120"
  },
  {
    "text": "how to persist this entity and as uncle bob said many times persistent should be only a plug into",
    "start": "1025120",
    "end": "1032400"
  },
  {
    "text": "our domain and the problem is okay someone could argue so what if i",
    "start": "1032400",
    "end": "1039520"
  },
  {
    "text": "remove all these annotations the code will be exactly the same that's true",
    "start": "1039520",
    "end": "1044798"
  },
  {
    "text": "but this is very simple example and all tutorials to any frameworks are based on",
    "start": "1044799",
    "end": "1050000"
  },
  {
    "text": "the simple examples let's say that i would like to use a map of map in my domain model so translating such fields",
    "start": "1050000",
    "end": "1056720"
  },
  {
    "text": "to jpa or to any rm framework will be problematic so in most cases i will",
    "start": "1056720",
    "end": "1063360"
  },
  {
    "text": "replace the map of map with something framework compatible and personally i hate such compromises",
    "start": "1063360",
    "end": "1069360"
  },
  {
    "text": "where my persistence layer is dictating me how should i implement my domain code",
    "start": "1069360",
    "end": "1074960"
  },
  {
    "text": "and unfortunately the same story applies to even sourcing frameworks so here's an example of axon framework very popular",
    "start": "1074960",
    "end": "1081840"
  },
  {
    "text": "one in java world so user aggregate mixed with some axon framework annotations the same story",
    "start": "1081840",
    "end": "1088320"
  },
  {
    "text": "applies to lag on frameworks from scalaboard user entity extends persistent entity and check out the",
    "start": "1088320",
    "end": "1094559"
  },
  {
    "text": "imports some json formats on my domain level i don't care about",
    "start": "1094559",
    "end": "1100000"
  },
  {
    "text": "json i don't care about summarization i just want to write business code that's it so how to deal with it",
    "start": "1100000",
    "end": "1106400"
  },
  {
    "text": "back to the beginnings and let's start with proper packaging so in my domain",
    "start": "1106400",
    "end": "1112240"
  },
  {
    "text": "package let let's put some all the event sourcing related uh",
    "start": "1112240",
    "end": "1117440"
  },
  {
    "text": "even sourcing domain related pieces like state commands and events an application",
    "start": "1117440",
    "end": "1122720"
  },
  {
    "text": "package is the place for a framework or a library and if you want to read more about this just follow the link from the style",
    "start": "1122720",
    "end": "1129919"
  },
  {
    "text": "the code base is pretty old but the overall idea is still valid",
    "start": "1129919",
    "end": "1134960"
  },
  {
    "text": "so this way your even sourcing user could look like the snippet on the slide",
    "start": "1134960",
    "end": "1140320"
  },
  {
    "text": "so simple case class simple record with just two methods and of course this code is simplified",
    "start": "1140320",
    "end": "1146400"
  },
  {
    "text": "but the imports will be like this one so no imports to any frameworks even",
    "start": "1146400",
    "end": "1151840"
  },
  {
    "text": "sourcing frameworks so once again application package for all the set stuff",
    "start": "1151840",
    "end": "1158400"
  },
  {
    "text": "and domain package for domain logic domain validation and in perfect world zero image sourcing",
    "start": "1158400",
    "end": "1164160"
  },
  {
    "text": "imports framework imports library versus framework because what's",
    "start": "1164160",
    "end": "1169440"
  },
  {
    "start": "1167000",
    "end": "1167000"
  },
  {
    "text": "the difference because i'm using this notions very often so usually removing a library from your",
    "start": "1169440",
    "end": "1175120"
  },
  {
    "text": "code base is much easier than removing and replacing the framework",
    "start": "1175120",
    "end": "1180320"
  },
  {
    "text": "a good example could be a persistent versus legume lagom is a full-blown even sourcing framework you just need to put",
    "start": "1180320",
    "end": "1187200"
  },
  {
    "text": "commands here events there and lagoon will do the magic for you unless you have a very specific business",
    "start": "1187200",
    "end": "1193440"
  },
  {
    "text": "use case and then you need to adjust this use case to the framework aka persistence is",
    "start": "1193440",
    "end": "1199600"
  },
  {
    "text": "one level of abstraction lower it will provide you all the necessary technical requirements",
    "start": "1199600",
    "end": "1205039"
  },
  {
    "text": "to build good even sourcing solution but you will need to handle more stuff by yourself at the same time you will get",
    "start": "1205039",
    "end": "1210880"
  },
  {
    "text": "more freedom uh and yeah which choice is better",
    "start": "1210880",
    "end": "1216240"
  },
  {
    "text": "i suppose i could do another 15 minutes presentation only about this topic",
    "start": "1216240",
    "end": "1222240"
  },
  {
    "text": "but uh the idea behind this slide is that be careful with your choice and create",
    "start": "1222240",
    "end": "1229120"
  },
  {
    "text": "some proof of concepts make sure that you validate the existing solutions correctly do not follow the",
    "start": "1229120",
    "end": "1236640"
  },
  {
    "text": "the hype and actually maybe there is a choice in between in my case i could honestly recommend aka",
    "start": "1236640",
    "end": "1243440"
  },
  {
    "text": "persons typed which is still not a framework but this time everything is really well organized it's it's much",
    "start": "1243440",
    "end": "1250080"
  },
  {
    "text": "harder to do something stupid uh okay so we know what we want to implement how now the question is where",
    "start": "1250080",
    "end": "1258000"
  },
  {
    "text": "to store events and we have options like file operation database event store  kafka cassandra and many many",
    "start": "1258000",
    "end": "1264320"
  },
  {
    "text": "others and this time the storage selection depends on the previous choice so if i go with custom implementation",
    "start": "1264320",
    "end": "1270799"
  },
  {
    "text": "then yeah i could use any database i want if i go with let's say akka stack then my choice is",
    "start": "1270799",
    "end": "1277600"
  },
  {
    "start": "1277000",
    "end": "1277000"
  },
  {
    "text": "limited to relational database or cassandra which is of course not true many databases are supported but",
    "start": "1277600",
    "end": "1285600"
  },
  {
    "text": "for sake of this presentation let's say that you have a choice between single hole database and",
    "start": "1285600",
    "end": "1290640"
  },
  {
    "text": "distributed database and single host database duration database seems like a safe options for the start because everyone",
    "start": "1290640",
    "end": "1298400"
  },
  {
    "text": "know how to use it everyone know how to even maintain on production so it's so it's a safe choice right",
    "start": "1298400",
    "end": "1305679"
  },
  {
    "text": "it depends it depends on your load if you need to handle millions of requests per",
    "start": "1305679",
    "end": "1312240"
  },
  {
    "text": "period of time then vertically scaling a single hose",
    "start": "1312240",
    "end": "1317679"
  },
  {
    "text": "database will hit you that's why i would recommend to use or",
    "start": "1317679",
    "end": "1322720"
  },
  {
    "text": "at least to analyze distributed databases like cassandra why because with cassandra you will get partitioning",
    "start": "1322720",
    "end": "1328480"
  },
  {
    "start": "1327000",
    "end": "1327000"
  },
  {
    "text": "by design so your data will be spread across all nodes in the cluster you will get the replication by design",
    "start": "1328480",
    "end": "1334400"
  },
  {
    "text": "in case of some node failure you will be always able to read your events from a different node",
    "start": "1334400",
    "end": "1341919"
  },
  {
    "text": "leaders architecture no single point of failure so in comparison to where you have a classic leader follower",
    "start": "1341919",
    "end": "1348080"
  },
  {
    "text": "architecture and in case of leader failure strange things could happen",
    "start": "1348080",
    "end": "1353200"
  },
  {
    "text": "and here any node can handle any query cassandra is optimized for writes so",
    "start": "1353200",
    "end": "1358640"
  },
  {
    "text": "just two notes can handle 100 000 transactions per second this is of course marketing materials but if it's",
    "start": "1358640",
    "end": "1366000"
  },
  {
    "text": "not enough for you then just put more notes to the cluster and",
    "start": "1366000",
    "end": "1371520"
  },
  {
    "text": "because you can horizontally scale cassandra really easily uh be aware that there is a growing",
    "start": "1371520",
    "end": "1378240"
  },
  {
    "text": "alternative to cassandra which is still adobe basically slice cassandra without jvm",
    "start": "1378240",
    "end": "1384960"
  },
  {
    "text": "the same concepts the same internal behavior but this time is c plus plus and sister",
    "start": "1384960",
    "end": "1392400"
  },
  {
    "text": "leap and you can handle even more load some time ago it was not fully supported",
    "start": "1392400",
    "end": "1398880"
  },
  {
    "text": "by aka persistent not sure what is the status right now if you follow the link you will be able to check it",
    "start": "1398880",
    "end": "1405280"
  },
  {
    "start": "1405000",
    "end": "1405000"
  },
  {
    "text": "okay so we know where we want to save our events now how to save them",
    "start": "1405280",
    "end": "1410880"
  },
  {
    "text": "and options are like plain texturization json xml yaml and binary formats",
    "start": "1410880",
    "end": "1416880"
  },
  {
    "text": "and i know that you will choose json anyway but let me show you some alternatives",
    "start": "1416880",
    "end": "1423600"
  },
  {
    "text": "first let's compare plain texturization and binary civilization so yeah plaintextualization is definitely human",
    "start": "1423600",
    "end": "1429919"
  },
  {
    "text": "readable it's very convenient to just select some events from the database and analyze them directly from the query in",
    "start": "1429919",
    "end": "1437039"
  },
  {
    "text": "case of binary formats yeah you need to create a tool that will translate it for something human readable and of course",
    "start": "1437039",
    "end": "1443919"
  },
  {
    "text": "such tools should be created up front but there is nothing like a good motivation and burning production is the",
    "start": "1443919",
    "end": "1450400"
  },
  {
    "text": "best motivator you can imagine yeah we've jason be careful with some",
    "start": "1450400",
    "end": "1455840"
  },
  {
    "text": "number precision issues and other links from the slide",
    "start": "1455840",
    "end": "1461200"
  },
  {
    "text": "storage consumption so definitely binary formats are more compressed and",
    "start": "1461200",
    "end": "1466799"
  },
  {
    "text": "the actual saving depends on your events schema but in my case it was from 60 to 70 percent of savings on the disk space",
    "start": "1466799",
    "end": "1474400"
  },
  {
    "text": "and you could argue okay storage is cheap so this is this this is not so relevant",
    "start": "1474400",
    "end": "1480559"
  },
  {
    "text": "yes that's true storage prices usually go down but at the same time the amount of data we are gathering is growing even",
    "start": "1480559",
    "end": "1487360"
  },
  {
    "text": "faster and if you check the prices of good large ssd drives for db purposes",
    "start": "1487360",
    "end": "1493279"
  },
  {
    "text": "well the prices are not so cheap in my opinion okay most of the",
    "start": "1493279",
    "end": "1499200"
  },
  {
    "text": "benchmarks are pretty consistent binary civilization is much faster than plaintexturization and this shouldn't be",
    "start": "1499200",
    "end": "1505360"
  },
  {
    "text": "a surprise because in case of plaintextualization a lot of additional steps is necessary",
    "start": "1505360",
    "end": "1511360"
  },
  {
    "text": "and the last point really important one full scheme evolution support so with",
    "start": "1511360",
    "end": "1517360"
  },
  {
    "text": "good schema evolution support you are able to versioning your events without typical versioning pain so no more we",
    "start": "1517360",
    "end": "1524880"
  },
  {
    "text": "underscore one we underscore two forget about it so in case of binary formats full schema",
    "start": "1524880",
    "end": "1533200"
  },
  {
    "text": "evolution support is on a completely different level than in case of json let's say",
    "start": "1533200",
    "end": "1538720"
  },
  {
    "text": "so as you can see binary selection is pretty nice option now which one should we choose javascriptization yeah it's",
    "start": "1538720",
    "end": "1545440"
  },
  {
    "text": "it's slow it's dangerous it's boring for you out cryo very nice very fast but it will",
    "start": "1545440",
    "end": "1550640"
  },
  {
    "text": "work only jvm applications so let's not limit our ecosystem to jvm applications",
    "start": "1550640",
    "end": "1556799"
  },
  {
    "text": "thrift from facebook very nice very rich when it comes to functionalities but it's more or less the same as protocol",
    "start": "1556799",
    "end": "1562720"
  },
  {
    "text": "buffers and i know the second better so let's say that we have a choice between avro from hadoop and google protocol",
    "start": "1562720",
    "end": "1569840"
  },
  {
    "text": "buffers and now i could spend another 40 minutes or so just explaining the difference but",
    "start": "1569840",
    "end": "1576559"
  },
  {
    "text": "we will do this very quickly so both of them will support many languages",
    "start": "1576559",
    "end": "1583200"
  },
  {
    "text": "but be careful because the level of support might be different so in case of let's say python",
    "start": "1583200",
    "end": "1589440"
  },
  {
    "text": "you can use only avro with the generic schema approach in case of protocol buffers the",
    "start": "1589440",
    "end": "1596159"
  },
  {
    "text": "supporting scala is way better than in java which is for me crazy",
    "start": "1596159",
    "end": "1601840"
  },
  {
    "text": "speed both are really fast when it comes to sterilization and decentralization both will produce really small payload",
    "start": "1601840",
    "end": "1608640"
  },
  {
    "text": "size both will provide you full compatibility support full be backward compatibility",
    "start": "1608640",
    "end": "1615279"
  },
  {
    "text": "because you need to read old events from your event store",
    "start": "1615279",
    "end": "1621360"
  },
  {
    "text": "but you need to also have forward compatibility in case of rolling updates and in case if you would like to",
    "start": "1621360",
    "end": "1629440"
  },
  {
    "text": "introduce new events without the necessary to without the necessity to update all projectors at the same time",
    "start": "1629440",
    "end": "1635840"
  },
  {
    "text": "so with forward compatibility you can update your projectors anytime you want later which is super cool",
    "start": "1635840",
    "end": "1642799"
  },
  {
    "text": "so in both cases yeah you can add the field to remove a field even rename a field from my perspective it's slightly easier",
    "start": "1642799",
    "end": "1649919"
  },
  {
    "text": "in protocol buffers but it's a tie again so what's the difference and the difference is",
    "start": "1649919",
    "end": "1656160"
  },
  {
    "text": "[Music] yeah the difference is in schema management",
    "start": "1656160",
    "end": "1661279"
  },
  {
    "text": "so in case of avro most likely maybe not most likely but it's possible",
    "start": "1661279",
    "end": "1667039"
  },
  {
    "text": "to generate average schema based on your code base so the code is first",
    "start": "1667039",
    "end": "1673039"
  },
  {
    "text": "and it's very convenient you will create definitely less boilerplate code but at the same time avro can pollute your",
    "start": "1673039",
    "end": "1679760"
  },
  {
    "text": "domain code with some other specific add-ons and also written writer schema",
    "start": "1679760",
    "end": "1684799"
  },
  {
    "text": "distribution is painful but let's not discuss it right now in case of proto protocol buffers schema is first and",
    "start": "1684799",
    "end": "1692320"
  },
  {
    "text": "based on that schema you will generate some code this generated code is so ugly",
    "start": "1692320",
    "end": "1697919"
  },
  {
    "text": "that you will create a separate model for your serialization and separate model for your domain",
    "start": "1697919",
    "end": "1704159"
  },
  {
    "text": "which is very nice for me because you will have clean and pure domain but the course of it is that you will need to",
    "start": "1704159",
    "end": "1710159"
  },
  {
    "text": "create a lot of methods from something seriousable to domain from the main to something serviceable",
    "start": "1710159",
    "end": "1715440"
  },
  {
    "text": "uh from my perspective yeah i can pay the price uh if you want to read more about this",
    "start": "1715440",
    "end": "1722159"
  },
  {
    "text": "comparison and about all the slides i just skipped just follow the link from the slide",
    "start": "1722159",
    "end": "1728080"
  },
  {
    "start": "1728000",
    "end": "1728000"
  },
  {
    "text": "okay last big question is what we should put to the event payload",
    "start": "1728080",
    "end": "1733760"
  },
  {
    "text": "and most people will start with delta change so delta event let's say that we would like to emit user funds with drone",
    "start": "1733760",
    "end": "1741600"
  },
  {
    "text": "and in that event we will put only the withdrawal amount",
    "start": "1741600",
    "end": "1746640"
  },
  {
    "text": "this is okay it will work but from my observations and from let's say",
    "start": "1746640",
    "end": "1753240"
  },
  {
    "text": "projector's perspective it's quite painful to process such events",
    "start": "1753240",
    "end": "1759120"
  },
  {
    "text": "let's say that i would like to send an email to the users if i spot that the current balance is below some threshold",
    "start": "1759120",
    "end": "1766240"
  },
  {
    "text": "so it will be nice to enrich such event user phones we run with a current balance",
    "start": "1766240",
    "end": "1772399"
  },
  {
    "text": "this way the projector implementation is really simple i don't have to calculate anything i don't have to query external",
    "start": "1772399",
    "end": "1778720"
  },
  {
    "text": "resources it's really really easy to create a new functionalities so from",
    "start": "1778720",
    "end": "1784399"
  },
  {
    "text": "my perspective events enrichment should be a default choice",
    "start": "1784399",
    "end": "1790000"
  },
  {
    "text": "the extreme version of events enrichment is to put the whole state to the event i've done this once yeah i'm not sure if",
    "start": "1790080",
    "end": "1797360"
  },
  {
    "text": "that was a good idea it that k in this specific case it sounds like a pretty reasonable",
    "start": "1797360",
    "end": "1804799"
  },
  {
    "text": "but the the cause of that is that yeah huge payload size and uh pretty complex schema to support in",
    "start": "1804799",
    "end": "1811279"
  },
  {
    "text": "future and beside business information most likely you will put some technical",
    "start": "1811279",
    "end": "1816480"
  },
  {
    "text": "metadata to your events like a sequence number creation timestamp event id for the",
    "start": "1816480",
    "end": "1822240"
  },
  {
    "text": "duplication command id that was the source of this event and correlation id if you want to track the whole business",
    "start": "1822240",
    "end": "1828640"
  },
  {
    "text": "process so yeah that's the technical metadata so",
    "start": "1828640",
    "end": "1834240"
  },
  {
    "text": "now we know everything what we want to implement how where to store events how to store them",
    "start": "1834240",
    "end": "1839840"
  },
  {
    "text": "how to compose the even payload so let's introduce some even sourcing in our ecosystem",
    "start": "1839840",
    "end": "1844960"
  },
  {
    "text": "where everywhere no this is the first major problem with",
    "start": "1844960",
    "end": "1850000"
  },
  {
    "text": "even sourcing adaptation as you already noticed this pattern is quite powerful but at the same time",
    "start": "1850000",
    "end": "1855760"
  },
  {
    "text": "quite costly so in your core domain you should choose even some subset of this",
    "start": "1855760",
    "end": "1861279"
  },
  {
    "text": "domain most likely the part which brings money and maybe this is the candidate for even",
    "start": "1861279",
    "end": "1866960"
  },
  {
    "text": "sourcing maybe not so remember about the slide and now we could focus on more classic problems and",
    "start": "1866960",
    "end": "1873279"
  },
  {
    "text": "the first one is the time required to replay the state and many people ask about this",
    "start": "1873279",
    "end": "1880559"
  },
  {
    "text": "surprisingly this is pretty fast operation",
    "start": "1880559",
    "end": "1885120"
  },
  {
    "text": "one second",
    "start": "1890559",
    "end": "1893799"
  },
  {
    "start": "1896000",
    "end": "1896000"
  },
  {
    "text": "yeah so surprisingly this is a very fast operation to load let's say 100 events",
    "start": "1896320",
    "end": "1901440"
  },
  {
    "text": "one even 1000 even and replay the state but if this is a problem for you make",
    "start": "1901440",
    "end": "1906880"
  },
  {
    "text": "sure that your even sourcing uh framework supports snapshotting snapshotting is basically",
    "start": "1906880",
    "end": "1913360"
  },
  {
    "text": "saving uh this snapshot of the state every x events and this",
    "start": "1913360",
    "end": "1918720"
  },
  {
    "text": "could be a separate abstraction or let's say it could be in the form of the event",
    "start": "1918720",
    "end": "1925120"
  },
  {
    "text": "uh this is just a detail uh another solution could be to keep",
    "start": "1925120",
    "end": "1932240"
  },
  {
    "text": "everything in memory so once you load the state it will wait to handle next command next",
    "start": "1932240",
    "end": "1938240"
  },
  {
    "text": "command next command and that's why even sourcing based on actual model and aka",
    "start": "1938240",
    "end": "1943519"
  },
  {
    "text": "stack it's so fast because everything is in memory so it's hard to do something",
    "start": "1943519",
    "end": "1949519"
  },
  {
    "text": "faster than that if you don't have to access the database every time you need",
    "start": "1949519",
    "end": "1954720"
  },
  {
    "text": "to replay the state for more information this technique is called write to crash and of course an",
    "start": "1954720",
    "end": "1960720"
  },
  {
    "text": "article about it for you to read later",
    "start": "1960720",
    "end": "1965760"
  },
  {
    "text": "okay because you keep everything in memory you should accept or could accept",
    "start": "1965760",
    "end": "1972720"
  },
  {
    "start": "1966000",
    "end": "1966000"
  },
  {
    "text": "out of member exceptions and out of memory exceptions are pretty boring in java and not sure how it's in your ecosystem",
    "start": "1972720",
    "end": "1981039"
  },
  {
    "text": "so make sure that you are not doing anything stupid with your state and learn how to use some memory analyzer",
    "start": "1981039",
    "end": "1987039"
  },
  {
    "text": "tool and you should be fine and the next question is should my state be",
    "start": "1987039",
    "end": "1992320"
  },
  {
    "text": "immutable or not by default of course immutable it's much harder to do out of more exception this way",
    "start": "1992320",
    "end": "1999200"
  },
  {
    "text": "but as always it depends so in my case when we were using table lists we were",
    "start": "1999200",
    "end": "2004559"
  },
  {
    "text": "able to deliver 17 operations per second and then we switched to good old fashion",
    "start": "2004559",
    "end": "2011200"
  },
  {
    "text": "java 3 map 2200 operation per second and this difference is so huge that it cannot be",
    "start": "2011200",
    "end": "2017360"
  },
  {
    "text": "simply ignored that's why we go with mutable state still",
    "start": "2017360",
    "end": "2023279"
  },
  {
    "text": "an actor is the guard of the state so i'm pretty comfortable with that choice",
    "start": "2023279",
    "end": "2029120"
  },
  {
    "start": "2029000",
    "end": "2029000"
  },
  {
    "text": "fixing the state so from time to time you might",
    "start": "2029120",
    "end": "2033840"
  },
  {
    "text": "you might face the problem that your state is broken and how to fix it in even sourcing",
    "start": "2034320",
    "end": "2040480"
  },
  {
    "text": "and there is a temptation to update events in database no events are",
    "start": "2040480",
    "end": "2045519"
  },
  {
    "text": "immutable they shouldn't be changed so in this case you should apply something called healing command",
    "start": "2045519",
    "end": "2051440"
  },
  {
    "text": "could be a semi-technical semi-business thing could be a business thing and this way",
    "start": "2051440",
    "end": "2057839"
  },
  {
    "text": "this command will most likely produce healing events and that's the recipe for fixing the state",
    "start": "2057839",
    "end": "2064638"
  },
  {
    "text": "this one is boring handling duplicates oh my god this is a nightmare in a distributed",
    "start": "2064639",
    "end": "2070079"
  },
  {
    "text": "systems let me tell you a story this is a fairyland and this first unicorn is exactly once delivery and the",
    "start": "2070079",
    "end": "2077440"
  },
  {
    "text": "second one is transaction between two aggregates none of them exist and",
    "start": "2077440",
    "end": "2083839"
  },
  {
    "text": "you know i'm a happy father of twin sisters and a boy but let's focus on the twins",
    "start": "2083839",
    "end": "2089440"
  },
  {
    "text": "so when i'm saying that there's no such thing as exactly one's delivery trust me",
    "start": "2089440",
    "end": "2094560"
  },
  {
    "text": "i know what i'm talking about so if someone is telling you that you can achieve exactly once delivery in a",
    "start": "2094560",
    "end": "2100960"
  },
  {
    "text": "distributed systems yeah either this person is lying to you or not telling the whole truth or",
    "start": "2100960",
    "end": "2106880"
  },
  {
    "text": "this will be extremely slow and dangerous thing so why duplicates first of all we can",
    "start": "2106880",
    "end": "2113280"
  },
  {
    "start": "2111000",
    "end": "2111000"
  },
  {
    "text": "create duplicates here because we have at least one delivery but even if you are able to filter out duplicates in",
    "start": "2113280",
    "end": "2119520"
  },
  {
    "text": "this part our projectors consumers should be ready to handle duplicates anyway because of",
    "start": "2119520",
    "end": "2125920"
  },
  {
    "text": "some restarts some re-partitioning some crashes etc etc so always be ready for",
    "start": "2125920",
    "end": "2131200"
  },
  {
    "text": "duplicates and the easiest way to handle them is to have idempotent updates so in this case",
    "start": "2131200",
    "end": "2137440"
  },
  {
    "text": "processing the same event twice will not change anything this is super cool but",
    "start": "2137440",
    "end": "2142480"
  },
  {
    "text": "time some project projections are not idempotent by definition so let's say that we are calculating the average",
    "start": "2142480",
    "end": "2149520"
  },
  {
    "text": "so in this case producing the same event twice will corrupt the result and the",
    "start": "2149520",
    "end": "2154560"
  },
  {
    "text": "solution for that is to once again track basically to achieve something called effectively once",
    "start": "2154560",
    "end": "2160720"
  },
  {
    "text": "delivery or the duplication and you can do this by tracking a",
    "start": "2160720",
    "end": "2166560"
  },
  {
    "text": "sequence number so if the sequence number is plus one then i can process it if it's plus zero or minus one this",
    "start": "2166560",
    "end": "2173520"
  },
  {
    "text": "should duplicate i need to skip it if it plus two or more in this case the only thing projector can do is to throw a",
    "start": "2173520",
    "end": "2180160"
  },
  {
    "text": "very nasty exception because we have a gap in our even bus and the problem is on the pro",
    "start": "2180160",
    "end": "2186480"
  },
  {
    "text": "producer side uh be aware that you need to store the",
    "start": "2186480",
    "end": "2192320"
  },
  {
    "text": "actual the current sequence number with the read model update in one transaction and",
    "start": "2192320",
    "end": "2198320"
  },
  {
    "text": "surprisingly not all uh reit model databases support such transaction for",
    "start": "2198320",
    "end": "2203839"
  },
  {
    "text": "example reddis is a very good example here transactions in redis",
    "start": "2203839",
    "end": "2209040"
  },
  {
    "text": "are something completely different than in relational database so be careful with that if you don't have sequence number then",
    "start": "2209040",
    "end": "2215200"
  },
  {
    "text": "you can use event id for the duplication but then you will need to store some history of event ids",
    "start": "2215200",
    "end": "2223359"
  },
  {
    "text": "okay broken read model so when you can broke your read model two main reasons for that softer reasons or back in the",
    "start": "2223520",
    "end": "2229920"
  },
  {
    "start": "2224000",
    "end": "2224000"
  },
  {
    "text": "code or not handling duplicates and harder reasons so some read mode read models",
    "start": "2229920",
    "end": "2236320"
  },
  {
    "text": "are more fragile than the other ones and already this is a very good example once again",
    "start": "2236320",
    "end": "2241599"
  },
  {
    "text": "in case of reddish you should expect some data lost always and",
    "start": "2241599",
    "end": "2247040"
  },
  {
    "text": "actually quite a lot of them depending on your configuration so thanks to event sourcing you can",
    "start": "2247040",
    "end": "2253440"
  },
  {
    "text": "always drop the whole read model and recreate it from the beginning this is super feature super super important",
    "start": "2253440",
    "end": "2259839"
  },
  {
    "text": "feature of even sourcing i think the most important one it saved my",
    "start": "2259839",
    "end": "2265760"
  },
  {
    "text": "very many times unfortunately sometimes processing billions of events",
    "start": "2265760",
    "end": "2272720"
  },
  {
    "text": "in case especially in case of hardware issue will take a lot of time and we don't have this time so in this case if this",
    "start": "2272720",
    "end": "2279760"
  },
  {
    "text": "is a harder issue we could use technique called manual offset management so we are saving in",
    "start": "2279760",
    "end": "2286480"
  },
  {
    "text": "the same transaction the reit model update and current offset from the message bus yeah it's technology",
    "start": "2286480",
    "end": "2292560"
  },
  {
    "text": "dependent it's possible in kafka and few other message buses but not all of them",
    "start": "2292560",
    "end": "2298640"
  },
  {
    "text": "so in case of some hardware failures we just need to read the latest successfully saved offset and start",
    "start": "2298640",
    "end": "2303839"
  },
  {
    "text": "processing from the tops multi-upgrade transactional update the second unicorn",
    "start": "2303839",
    "end": "2310240"
  },
  {
    "start": "2307000",
    "end": "2307000"
  },
  {
    "text": "so if you need to handle a use case that you need to update two aggregates at the same time",
    "start": "2310240",
    "end": "2316160"
  },
  {
    "text": "it's time for pause start with rethinking your upgrades boundaries maybe your aggregates are too",
    "start": "2316160",
    "end": "2321839"
  },
  {
    "text": "thin and if you combine them together you will eliminate this problem very",
    "start": "2321839",
    "end": "2326960"
  },
  {
    "text": "easily sometimes your great boundaries are fine and you still need to handle this",
    "start": "2326960",
    "end": "2332160"
  },
  {
    "text": "and forget about transaction the only way to do this right is a compensating action and compensating action can be",
    "start": "2332160",
    "end": "2338400"
  },
  {
    "text": "optimistic or pessimistic though these are not official names i just made",
    "start": "2338400",
    "end": "2343599"
  },
  {
    "text": "it up uh to explain you how you can approach to this problem so let's say that we are building very simple uh",
    "start": "2343599",
    "end": "2350400"
  },
  {
    "text": "application for selling tickets to some cinema shows and we have two aggregates",
    "start": "2350400",
    "end": "2355520"
  },
  {
    "text": "a user account which represents user with some funds that we can charge and cinema show where we need to select the",
    "start": "2355520",
    "end": "2362320"
  },
  {
    "text": "seat and we cannot sell more seats than available so in case of pessimistic compensating",
    "start": "2362320",
    "end": "2369200"
  },
  {
    "text": "action uh compassing compensation action from the user perspective first we will charge the user",
    "start": "2369200",
    "end": "2376079"
  },
  {
    "text": "and then we will book the seat and it was the last seat so seats are so loud uh unfortunately our",
    "start": "2376079",
    "end": "2382880"
  },
  {
    "text": "applications are used by many users concurrently so right after charging the first user another user can book that",
    "start": "2382880",
    "end": "2390560"
  },
  {
    "text": "last seat so it will be nice to have a transaction here no",
    "start": "2390560",
    "end": "2396800"
  },
  {
    "text": "just look at it as a two separate micro services we know that transaction between two",
    "start": "2396800",
    "end": "2403359"
  },
  {
    "text": "microservices is painful so the same story applies here and we just need to apply compensating",
    "start": "2403359",
    "end": "2410240"
  },
  {
    "text": "action so we found the money in case of optimistic compensation first we'll book the seat and then we will",
    "start": "2410240",
    "end": "2417280"
  },
  {
    "start": "2413000",
    "end": "2413000"
  },
  {
    "text": "charge the user and in case of concurrent booking we will enter the overbooked state so now the question is",
    "start": "2417280",
    "end": "2424640"
  },
  {
    "text": "should we charge the user i suppose in case of cinema business well it's not a good idea but in case of",
    "start": "2424640",
    "end": "2431839"
  },
  {
    "text": "flights and plane tickets it's part of the business strategy over booking is fine so business different business",
    "start": "2431839",
    "end": "2438480"
  },
  {
    "text": "needs different solutions uh the one thing is missing here how to implement this and for that most likely",
    "start": "2438480",
    "end": "2444480"
  },
  {
    "text": "you will use saga pattern saga could be implemented as a horography which is",
    "start": "2444480",
    "end": "2449680"
  },
  {
    "text": "basically consuming two or more stream of events and checking for some inconsistencies",
    "start": "2449680",
    "end": "2456000"
  },
  {
    "text": "or as a orchestration where you have one single place with the whole business process the",
    "start": "2456000",
    "end": "2461920"
  },
  {
    "text": "first one is definitely easier to implement and easier to start",
    "start": "2461920",
    "end": "2467680"
  },
  {
    "text": "the second one is nice in the sense that you have one place with the whole business process",
    "start": "2467680",
    "end": "2474000"
  },
  {
    "text": "and unfortunately implementing saga i mean the pattern is really easy to understand but implementing it is is",
    "start": "2474000",
    "end": "2481440"
  },
  {
    "text": "really challenging because saga must be persistable it must survive restarts events orders you cannot assume any",
    "start": "2481440",
    "end": "2488560"
  },
  {
    "text": "events order and there will be always some time window limitations so let's say that i'm checking for inconsistencies with within",
    "start": "2488560",
    "end": "2496160"
  },
  {
    "text": "10 minutes window and after that i'm applying compensating action but some events might arrive to us after 12",
    "start": "2496160",
    "end": "2503119"
  },
  {
    "text": "minutes that's why compensating actions must be commutative so",
    "start": "2503119",
    "end": "2508480"
  },
  {
    "text": "a few more links about saga pattern for you it's a really huge topic",
    "start": "2508480",
    "end": "2513920"
  },
  {
    "text": "okay even sourcing and rodeo gdpr yeah your application should give",
    "start": "2513920",
    "end": "2520720"
  },
  {
    "text": "user something called the right to forget and how to do this in even sourcing where",
    "start": "2520720",
    "end": "2526000"
  },
  {
    "text": "you cannot delete events to be honest you can but you should avoid it",
    "start": "2526000",
    "end": "2532079"
  },
  {
    "text": "so the technique here is uh it's called data shredding where you can",
    "start": "2532079",
    "end": "2538720"
  },
  {
    "text": "encode some sensitive information and if you need to delete user data you just",
    "start": "2538720",
    "end": "2543920"
  },
  {
    "text": "need to delete the encoding key sounds easy but not so easy again to implement because managing those keys is a pain",
    "start": "2543920",
    "end": "2552560"
  },
  {
    "text": "not to mention about some retention policies of your message brokers backups logs and data before rudolph a piece of",
    "start": "2552560",
    "end": "2559440"
  },
  {
    "text": "advice from my site do not use even sourcing for sensitive information most likely crude",
    "start": "2559440",
    "end": "2565599"
  },
  {
    "text": "application is fine for for it and the only user data should be a user id",
    "start": "2565599",
    "end": "2573359"
  },
  {
    "text": "okay in our final version of our architecture we are using sharded cluster and with",
    "start": "2573359",
    "end": "2579680"
  },
  {
    "text": "any cluster you should expect a nasty problem which is a split brain who knows what is a split brain",
    "start": "2579680",
    "end": "2587440"
  },
  {
    "start": "2580000",
    "end": "2580000"
  },
  {
    "text": "okay so let me explain it very shortly let's say that we have a cluster with five",
    "start": "2587440",
    "end": "2593839"
  },
  {
    "text": "nodes some load balancer on top of it and load balancer is a dummy machine it will just",
    "start": "2593839",
    "end": "2599040"
  },
  {
    "text": "route all the requests to all nodes in the cluster in let's say run robin post",
    "start": "2599040",
    "end": "2604640"
  },
  {
    "text": "so request to update user with id1 will be redirected to node pipe from the load",
    "start": "2604640",
    "end": "2611359"
  },
  {
    "text": "balancer but note 5 is in the shard cluster so this node is aware that",
    "start": "2611359",
    "end": "2616480"
  },
  {
    "text": "actually node 1 is responsible for user 1 so it will redirect this command to node 1.",
    "start": "2616480",
    "end": "2623040"
  },
  {
    "text": "and then we have a disaster in our dc a broken switch or something like that",
    "start": "2623040",
    "end": "2629119"
  },
  {
    "text": "from the load balancer perspective everything is fine so all nodes are working okay all nodes are green but",
    "start": "2629119",
    "end": "2636400"
  },
  {
    "text": "node one and node two cannot communicate with three four and five so they will create two separate",
    "start": "2636400",
    "end": "2642319"
  },
  {
    "text": "clusters in this case command to update user one from node five will be redirected to",
    "start": "2642319",
    "end": "2648800"
  },
  {
    "text": "node 4 because in this small cluster node 4 is responsible for user 1 but",
    "start": "2648800",
    "end": "2655680"
  },
  {
    "text": "next command could go to node 1 which is still responsible for user 1 and there you have classic split brain",
    "start": "2655680",
    "end": "2662640"
  },
  {
    "text": "and fixing the state after such failure is is really really",
    "start": "2662640",
    "end": "2668560"
  },
  {
    "text": "painful so cluster best practices always remember about the split brain in",
    "start": "2668560",
    "end": "2675599"
  },
  {
    "start": "2671000",
    "end": "2671000"
  },
  {
    "text": "case of a cut there is a dedicated solution for that which is a split brain resolver and you need to enable it and",
    "start": "2675599",
    "end": "2682880"
  },
  {
    "text": "configure it correctly also create very good monitoring and alert think of your cluster you should",
    "start": "2682880",
    "end": "2689680"
  },
  {
    "text": "know 24 7 what is going on perform a lot of failover tests on dev",
    "start": "2689680",
    "end": "2696319"
  },
  {
    "text": "tests and even on production create your own chaos monkey and cluster should be deployed not only on production but also",
    "start": "2696319",
    "end": "2703440"
  },
  {
    "text": "on dev and staging environment just to test it more and keep it as small as possible when it comes to code base and",
    "start": "2703440",
    "end": "2709040"
  },
  {
    "text": "number of nodes if you can move something to a stateless service just move it to the",
    "start": "2709040",
    "end": "2714160"
  },
  {
    "text": "stateless service summary of this whole presentation even sourcing is great it's awesome you",
    "start": "2714160",
    "end": "2720800"
  },
  {
    "start": "2716000",
    "end": "2716000"
  },
  {
    "text": "will love it the second time you use it the first time you it will be painful",
    "start": "2720800",
    "end": "2727760"
  },
  {
    "text": "that's why carefully choose your even sourcing library or framework really take your time",
    "start": "2727760",
    "end": "2733119"
  },
  {
    "text": "create proof of concepts there is no perfect database for even sourcing only",
    "start": "2733119",
    "end": "2739440"
  },
  {
    "text": "a good compromise understand event's command state is schema evolution and really once again",
    "start": "2739440",
    "end": "2746640"
  },
  {
    "text": "take your time i'm not talking about hours here i'm talking about days this is really important topic i know",
    "start": "2746640",
    "end": "2753200"
  },
  {
    "text": "it's extremely boring but spend some time on it eventually consistency is your friend do",
    "start": "2753200",
    "end": "2759599"
  },
  {
    "text": "not fight with it just learn how to deal with it scaling is complex yeah launching kafka cluster cassandra",
    "start": "2759599",
    "end": "2765920"
  },
  {
    "text": "cluster acta cluster et cetera et cetera it will require a lot of work",
    "start": "2765920",
    "end": "2771200"
  },
  {
    "text": "but once you do this the reward will be proportional to the effort and this whole event sourcing is",
    "start": "2771200",
    "end": "2776720"
  },
  {
    "text": "basically basically turning your database inside out so",
    "start": "2776720",
    "end": "2782640"
  },
  {
    "text": "once again this asynchronous even driven communication with when sourcing is is",
    "start": "2782640",
    "end": "2789440"
  },
  {
    "text": "really nice unfortunately we didn't cover this topic and",
    "start": "2789440",
    "end": "2794560"
  },
  {
    "text": "the last point a little bit philosophical if you ever if you implement your first",
    "start": "2794560",
    "end": "2801599"
  },
  {
    "text": "system or second where the core is basically processing stream of events",
    "start": "2801599",
    "end": "2807839"
  },
  {
    "text": "you will realize that all big players are using exactly the same techniques so twitter facebook",
    "start": "2807839",
    "end": "2814480"
  },
  {
    "text": "netflix whatever most of the db engines are using exactly the same techniques",
    "start": "2814480",
    "end": "2819839"
  },
  {
    "text": "why because this is the recipe for building reactive easy to scale distributed systems and",
    "start": "2819839",
    "end": "2826800"
  },
  {
    "text": "definitely work to expand your toolbox with even sourcing it will change your",
    "start": "2826800",
    "end": "2832319"
  },
  {
    "text": "mindset in a good way and that was the last idea i want to share with you if you have any questions",
    "start": "2832319",
    "end": "2839680"
  },
  {
    "text": "i'm here for you as well on slack thank you",
    "start": "2839680",
    "end": "2845838"
  },
  {
    "text": "questions no questions",
    "start": "2854480",
    "end": "2859160"
  },
  {
    "text": "you",
    "start": "2873760",
    "end": "2875839"
  }
]