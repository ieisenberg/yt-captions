[
  {
    "start": "0",
    "end": "56000"
  },
  {
    "text": "so I I guess we start now so thank you everybody for joining my talk I'm uh",
    "start": "4380",
    "end": "9780"
  },
  {
    "text": "mukaram and I'm here to tell you about our experience in developing a complete",
    "start": "9780",
    "end": "14880"
  },
  {
    "text": "iot platform in the last six years using almost only serverless Technologies",
    "start": "14880",
    "end": "21060"
  },
  {
    "text": "before I start I I need to ask some questions just to understand like your",
    "start": "21060",
    "end": "26100"
  },
  {
    "text": "level of experience so who have used any Cloud products okay that's that's very good and who's",
    "start": "26100",
    "end": "33780"
  },
  {
    "text": "used AWS okay that's like almost half of you and who has used",
    "start": "33780",
    "end": "39960"
  },
  {
    "text": "um a Lambda or any other serverless product okay almost",
    "start": "39960",
    "end": "45120"
  },
  {
    "text": "um exactly the same have so which is actually good so everybody was using a cloud or or using an AWS is um has",
    "start": "45120",
    "end": "51420"
  },
  {
    "text": "touched at least the Lambda once um before I start with the talk I need",
    "start": "51420",
    "end": "57239"
  },
  {
    "start": "56000",
    "end": "56000"
  },
  {
    "text": "to introduce the company I'm working for that because we are hiring which we are",
    "start": "57239",
    "end": "62640"
  },
  {
    "text": "but because that's a very important factor to understand how that started and how that the history of the company",
    "start": "62640",
    "end": "70220"
  },
  {
    "text": "has affected the choice of Technology we have made so I work for a company called sense",
    "start": "70220",
    "end": "77580"
  },
  {
    "text": "card we started at a bigger company it's called Grohe which is you may have heard",
    "start": "77580",
    "end": "83880"
  },
  {
    "text": "of it for creating Sanitary products like water faucets you can see a lot of",
    "start": "83880",
    "end": "89460"
  },
  {
    "text": "them in the bathrooms here in the hall and we started with two products you see",
    "start": "89460",
    "end": "95040"
  },
  {
    "text": "on the screen with the first big one above is called God which is some device",
    "start": "95040",
    "end": "100619"
  },
  {
    "text": "you install in the water pipe it monitors your water destroys and and",
    "start": "100619",
    "end": "106920"
  },
  {
    "text": "it's also detect animals in case you have a big water withdrawal or for",
    "start": "106920",
    "end": "112380"
  },
  {
    "text": "example you have a leakage a miner or a big one like dropping somewhere it can",
    "start": "112380",
    "end": "117840"
  },
  {
    "text": "detect that it will shut them off your water supply which means it will prevent having damages",
    "start": "117840",
    "end": "124259"
  },
  {
    "text": "the two devices or the like three but it's the same one the sense and the button is called sense and it's you can",
    "start": "124259",
    "end": "131580"
  },
  {
    "text": "put it where you expect water to leak and whenever it detects water it's able",
    "start": "131580",
    "end": "136800"
  },
  {
    "text": "of course to notify you but also to communicate with a bigger device to shut",
    "start": "136800",
    "end": "141900"
  },
  {
    "text": "off your water which means also it prevent having damages both these products so may you have an",
    "start": "141900",
    "end": "148640"
  },
  {
    "text": "understood that there are iot products you connect them to your network and",
    "start": "148640",
    "end": "153780"
  },
  {
    "text": "you're able not only to control them but they are also able to communicate and to prevent having damage at your home these",
    "start": "153780",
    "end": "161760"
  },
  {
    "text": "were the first two digital products at the company which means when we started there was no there were no teams for",
    "start": "161760",
    "end": "168599"
  },
  {
    "text": "developing software no operations team for having like a digital product",
    "start": "168599",
    "end": "173640"
  },
  {
    "text": "and that's why we had to look for a way where we can develop such product using",
    "start": "173640",
    "end": "179879"
  },
  {
    "text": "external companies using like building up the team while we are going but also if we could save or avoid having like an",
    "start": "179879",
    "end": "187980"
  },
  {
    "text": "operation team or if we could use some technologies which help us do the same work with less people we would have",
    "start": "187980",
    "end": "194280"
  },
  {
    "text": "opted in for that product um these products were launched in 2017",
    "start": "194280",
    "end": "201000"
  },
  {
    "text": "as development start 2016 and 2017 the first product was available on the",
    "start": "201000",
    "end": "207480"
  },
  {
    "text": "market from the beginning we have used AWS for",
    "start": "207480",
    "end": "212580"
  },
  {
    "text": "100 there is no nothing at all running in any on-premises so if everything is a",
    "start": "212580",
    "end": "219300"
  },
  {
    "text": "cloud-based currently the solution as it is right now it handles 288 million mqtt messages",
    "start": "219300",
    "end": "227599"
  },
  {
    "text": "mqtt is a pub sub protocol used for low footprint iot devices",
    "start": "227599",
    "end": "234360"
  },
  {
    "text": "it's the one also supported by iot core which is iot service from AWS and that's",
    "start": "234360",
    "end": "241620"
  },
  {
    "text": "why why we use it this mqt messages and other actions are",
    "start": "241620",
    "end": "248640"
  },
  {
    "text": "responsible for triggering more than 1 6 billion actions which means",
    "start": "248640",
    "end": "254519"
  },
  {
    "text": "we have every month more than 1.6 billion Lambda recalls somewhere",
    "start": "254519",
    "end": "260280"
  },
  {
    "text": "triggered either by an mqtt message from a device to the back end or from some",
    "start": "260280",
    "end": "265740"
  },
  {
    "text": "other events which happens like regularly or or something else happens",
    "start": "265740",
    "end": "271380"
  },
  {
    "text": "and as I said from the beginning we went all in for severals everything that was",
    "start": "271380",
    "end": "279180"
  },
  {
    "text": "possible at that time to do to be done with serverless we did it with serverless everything that was not possible but",
    "start": "279180",
    "end": "285960"
  },
  {
    "text": "later was for like because of change in the platform or some new product we",
    "start": "285960",
    "end": "291419"
  },
  {
    "text": "opted in and we exchanged that part of the system",
    "start": "291419",
    "end": "296000"
  },
  {
    "start": "296000",
    "end": "296000"
  },
  {
    "text": "um to understand what's a server so like you can find a lot of definitions of",
    "start": "296699",
    "end": "302220"
  },
  {
    "text": "serverless and almost all of them are wrong so I prefer to take this take on",
    "start": "302220",
    "end": "307680"
  },
  {
    "text": "it it's called trace of servers which means like some kinds of characteristics if you see them you can expect that",
    "start": "307680",
    "end": "314820"
  },
  {
    "text": "technology to be a serverless one um the first trait is you have no managing of a long-lived living",
    "start": "314820",
    "end": "321979"
  },
  {
    "text": "application or a host you don't have an application server you don't have a process which your started one and then",
    "start": "321979",
    "end": "328800"
  },
  {
    "text": "it runs for a few hours everything you write you write to react to an event it's also Limited in that time how long",
    "start": "328800",
    "end": "335940"
  },
  {
    "text": "that lives and then it ends if you are using like a serverless database you",
    "start": "335940",
    "end": "341460"
  },
  {
    "text": "just write for you write something to it and it works you are not responsible for having something running anywhere",
    "start": "341460",
    "end": "349620"
  },
  {
    "text": "the second trade it's uh Auto scale and auto provision it means like outer scale",
    "start": "349620",
    "end": "355440"
  },
  {
    "text": "you create as as many instances as many processes as needed like behind the",
    "start": "355440",
    "end": "360720"
  },
  {
    "text": "scene you don't have to worry about them and also you don't have even to provision a virtual machine for these",
    "start": "360720",
    "end": "367320"
  },
  {
    "text": "processes to run everything is being managed for you we will see of course later that um although it works very",
    "start": "367320",
    "end": "374520"
  },
  {
    "text": "well it doesn't work all the time or it has some limitations and we'll see how to work around them",
    "start": "374520",
    "end": "381860"
  },
  {
    "text": "um a very important aspect of serverless is that it has a very precise cost model",
    "start": "382380",
    "end": "387840"
  },
  {
    "text": "that means if you use it a lot you pay more if you don't use it you pay less",
    "start": "387840",
    "end": "393539"
  },
  {
    "text": "and that goes all the way down to zero if you don't use it you don't pay anything like it's not similar to a web",
    "start": "393539",
    "end": "402120"
  },
  {
    "text": "server where you have something running and you have to pay for it regardless whether you use it or not if you don't",
    "start": "402120",
    "end": "407819"
  },
  {
    "text": "use it you don't pay for it we will see later sometimes that doesn't work well so you have to opt in for a model where",
    "start": "407819",
    "end": "414479"
  },
  {
    "text": "you pay per hour but we will come later to that point the second or the fourth characteristic",
    "start": "414479",
    "end": "422580"
  },
  {
    "text": "is performance capabilities are monitored or measured in terms other than host size and count which is um",
    "start": "422580",
    "end": "429479"
  },
  {
    "text": "like if you have a database and and your performance measurement is the size of the machine that's usually doesn't tell",
    "start": "429479",
    "end": "436319"
  },
  {
    "text": "you how well that handles data like you can say okay if it's a big machine it's probably a good one if I don't know",
    "start": "436319",
    "end": "442740"
  },
  {
    "text": "increase the ram it will be better but that's not a describing precisely how the performance",
    "start": "442740",
    "end": "449099"
  },
  {
    "text": "you are getting out of it whereas in in serverless Technologies usually you have a better measurement so if we are",
    "start": "449099",
    "end": "455460"
  },
  {
    "text": "talking about Lambda which is running code and the performance is is milliseconds Giga gigabyte milliseconds",
    "start": "455460",
    "end": "463500"
  },
  {
    "text": "which means like a number of milliseconds on a specific processor or like a",
    "start": "463500",
    "end": "469080"
  },
  {
    "text": "specific processor size if you are talking about a database or like dynamodb this performance account",
    "start": "469080",
    "end": "476099"
  },
  {
    "text": "is read or write unit which means like the number of kilobytes is they are",
    "start": "476099",
    "end": "482400"
  },
  {
    "text": "divided in units I think five kilobytes like how many of these kilobytes you are",
    "start": "482400",
    "end": "487680"
  },
  {
    "text": "reading or writing per second that's a performance measurement you use for serverless Technologies and that goes",
    "start": "487680",
    "end": "493560"
  },
  {
    "text": "also for other products and also it has high implicit High",
    "start": "493560",
    "end": "499379"
  },
  {
    "text": "availability which means like you don't usually you don't have to take care about scaling it but it's also there",
    "start": "499379",
    "end": "505979"
  },
  {
    "text": "like if you need more more will be there if you started let's say an innocence it",
    "start": "505979",
    "end": "511259"
  },
  {
    "text": "has an error it's it's faulting there you don't need something to restart it it it's there like if you have a Lambda",
    "start": "511259",
    "end": "517800"
  },
  {
    "text": "which has an error the next request which triggers a different Lambda it will start from the beginning it's high",
    "start": "517800",
    "end": "524219"
  },
  {
    "text": "it has a high availability which you don't need to take care of so let's see now these are the",
    "start": "524219",
    "end": "530519"
  },
  {
    "text": "characteristics which like I said properties when you see them you can expect to have a serverless product",
    "start": "530519",
    "end": "536459"
  },
  {
    "text": "behind them but what does it actually mean like what are examples of serverless Technologies",
    "start": "536459",
    "end": "542580"
  },
  {
    "text": "and for that um you can recognize a pattern in at least here in AWS",
    "start": "542580",
    "end": "547800"
  },
  {
    "text": "ecosystem usually you have two flavors of a service one which is um has been",
    "start": "547800",
    "end": "553800"
  },
  {
    "text": "completely developed for the cloud it's a serverless one it has some limitations but it has a very high performance very",
    "start": "553800",
    "end": "561480"
  },
  {
    "text": "high throughput and other is you can say it's your traditional product which has only a",
    "start": "561480",
    "end": "568380"
  },
  {
    "text": "managing product behind it which like you don't need to patch the operating system it's running on you have your",
    "start": "568380",
    "end": "576260"
  },
  {
    "text": "non-api which you are maybe already using in on-premises solution but it's",
    "start": "576260",
    "end": "581700"
  },
  {
    "text": "it's being managed for you if we take the server or the database example so on the serverless side you",
    "start": "581700",
    "end": "588300"
  },
  {
    "text": "have a product called Aurora serverless which is a database which has been implemented completely from scratch for",
    "start": "588300",
    "end": "595080"
  },
  {
    "text": "the cloud it has very good performance it has high",
    "start": "595080",
    "end": "600540"
  },
  {
    "text": "availability it has a replication by default it has like a lot of services",
    "start": "600540",
    "end": "606779"
  },
  {
    "text": "and then you have your RDS which is like your traditional database server which",
    "start": "606779",
    "end": "613260"
  },
  {
    "text": "is only managed for you it can be a postgres or any other product you are",
    "start": "613260",
    "end": "618480"
  },
  {
    "text": "using already it's exactly the same exactly the same API it's just like you don't have to take care of patching the",
    "start": "618480",
    "end": "625980"
  },
  {
    "text": "operating system but you have to choose where to run it on which virtual machine so you are responsible for scaling it",
    "start": "625980",
    "end": "631860"
  },
  {
    "text": "out scaling it down and everything else the second example is queuing messages",
    "start": "631860",
    "end": "638339"
  },
  {
    "text": "so on the serverless side you have sqs which is simple queuing service",
    "start": "638339",
    "end": "645180"
  },
  {
    "text": "which means it's a product which again has been developed completely from scratch to work in a cloud environment",
    "start": "645180",
    "end": "652079"
  },
  {
    "text": "it has very good performance it has some of the limitations or some of or you",
    "start": "652079",
    "end": "659040"
  },
  {
    "text": "lose some of the guarantees you usually have with the queuing products so for example um it doesn't have a first in",
    "start": "659040",
    "end": "666779"
  },
  {
    "text": "first out per default you can opt in for it but you have to pay in performance it has at least once delivery like it",
    "start": "666779",
    "end": "674880"
  },
  {
    "text": "could happens not very often but it could happen that one message is delivered more than once again and you",
    "start": "674880",
    "end": "680100"
  },
  {
    "text": "have also some other limitations very minor if you know how to work around them you will get like a very cheap",
    "start": "680100",
    "end": "685920"
  },
  {
    "text": "product with a very good performance on the other hand you have Amazon Amazon and Q exactly so it's it's like the",
    "start": "685920",
    "end": "692760"
  },
  {
    "text": "managed active mq product which is exactly the same one you know again you choose a virtual machine to run on it",
    "start": "692760",
    "end": "699300"
  },
  {
    "text": "but you don't patch operating system and the third example if you have a data",
    "start": "699300",
    "end": "707519"
  },
  {
    "text": "lake or a big pile of data in files and you want to query them again you have",
    "start": "707519",
    "end": "713940"
  },
  {
    "text": "two ways of doing that at least two ways but the most important ones are Athena",
    "start": "713940",
    "end": "719040"
  },
  {
    "text": "which is again serverless products you write your SQL queries to rec to query this data",
    "start": "719040",
    "end": "725220"
  },
  {
    "text": "again you don't care you don't worry about the infrastructure where it's",
    "start": "725220",
    "end": "730440"
  },
  {
    "text": "running it just runs for you gives you some results but it also means you don't have control over it so if it's like a",
    "start": "730440",
    "end": "737579"
  },
  {
    "text": "big query it can take a long time on the other hand if you opt in for",
    "start": "737579",
    "end": "743399"
  },
  {
    "text": "having more control you can use a redshift Spectrum which doing very similar stuff but you have to choose the",
    "start": "743399",
    "end": "750660"
  },
  {
    "text": "virtual machine you run the product on which means if you know this is query it",
    "start": "750660",
    "end": "755700"
  },
  {
    "text": "will take too long you can choose a bigger device or a bigger virtual machine and you are in control for for",
    "start": "755700",
    "end": "761339"
  },
  {
    "text": "that machine so it may have better performance and last but not least and now we come",
    "start": "761339",
    "end": "768300"
  },
  {
    "text": "actually to the product which I'll be talking about most in this talk which is how to run code again you have either",
    "start": "768300",
    "end": "775860"
  },
  {
    "text": "serverless product I mean there are probably 100 services to run code on any",
    "start": "775860",
    "end": "780959"
  },
  {
    "text": "cloud provider but in this case the most prominent examples are in the Lambda where you can",
    "start": "780959",
    "end": "787680"
  },
  {
    "text": "provide a piece of code in a language you like there are like many options but",
    "start": "787680",
    "end": "793260"
  },
  {
    "text": "you have to choose one of these and provide and the code for that Lambda you provide the triggers for that code",
    "start": "793260",
    "end": "799500"
  },
  {
    "text": "when do you want to run that code we will see later a few examples of how to",
    "start": "799500",
    "end": "804660"
  },
  {
    "text": "or which kind of triggers they are and then it runs like also you can provide",
    "start": "804660",
    "end": "809940"
  },
  {
    "text": "say I want to have that much memory which also influence the processor which will be running off so you you are a",
    "start": "809940",
    "end": "816120"
  },
  {
    "text": "little bit in control for where it runs but you don't have to worry about any of",
    "start": "816120",
    "end": "821160"
  },
  {
    "text": "that whereas ec2 it's a elastic Computing something I don't remember what but",
    "start": "821160",
    "end": "828300"
  },
  {
    "text": "anyway it's like a virtual machine you choose the processor you choose the",
    "start": "828300",
    "end": "833519"
  },
  {
    "text": "memory you choose everything and you're responsible for everything from updating the operating system to installing",
    "start": "833519",
    "end": "840600"
  },
  {
    "text": "software to keeping updated and everything else okay so now we have seen few examples",
    "start": "840600",
    "end": "849000"
  },
  {
    "text": "um of these products and like there are hundreds more so it's not like only these a few ones I mentioned so the most",
    "start": "849000",
    "end": "856680"
  },
  {
    "text": "important one is of course the Lambda because that's the one you can do the most visit or that's where your",
    "start": "856680",
    "end": "862200"
  },
  {
    "text": "and logic will decide but there are hundreds of services which qualify as",
    "start": "862200",
    "end": "867959"
  },
  {
    "text": "serverless but now we have these services and we want to write an application how do we",
    "start": "867959",
    "end": "873959"
  },
  {
    "text": "do that the third step and like I would say just divide the",
    "start": "873959",
    "end": "879779"
  },
  {
    "text": "workflow into simple steps I mean it's it's of course the hardest step in all in this approaches but it's",
    "start": "879779",
    "end": "887399"
  },
  {
    "text": "and we'll see later that you are usually have to do that anyway like it doesn't matter how you implement your software",
    "start": "887399",
    "end": "894000"
  },
  {
    "text": "but when you're doing that with several serverless Technologies you have some limitations which you may need to",
    "start": "894000",
    "end": "900720"
  },
  {
    "text": "consider already at the beginning but anyway you don't you want to do something the third step is divide that",
    "start": "900720",
    "end": "907800"
  },
  {
    "text": "into simpler steps and then every one of these steps will be implemented via",
    "start": "907800",
    "end": "914279"
  },
  {
    "text": "serverless technology either it's code to run in in Lambda it's some data to",
    "start": "914279",
    "end": "920339"
  },
  {
    "text": "store in dynamodb or something similar lambdas can be used in this scenario if",
    "start": "920339",
    "end": "927540"
  },
  {
    "text": "you are two aspects like you have your logic so that's actually the code you you write to do your business logic but",
    "start": "927540",
    "end": "935519"
  },
  {
    "text": "also they can be used as a kind of glue between other services so for example if you have a message arrived from a queue",
    "start": "935519",
    "end": "942779"
  },
  {
    "text": "and you want to write that in into maybe validate that message and then",
    "start": "942779",
    "end": "948000"
  },
  {
    "text": "write that into a three you have a Lambda to do that if you for example have an input coming from a file system",
    "start": "948000",
    "end": "955260"
  },
  {
    "text": "from S3 where you have events new file has been written and you want to somehow store that data in dynamodb you may need",
    "start": "955260",
    "end": "962699"
  },
  {
    "text": "a Lambda to manipulate the data between these two steps and every step can then trigger one or",
    "start": "962699",
    "end": "971040"
  },
  {
    "text": "more additional steps like it's it's um and we will come later to this approach you will see it a lot when working with",
    "start": "971040",
    "end": "977220"
  },
  {
    "text": "serverless you have always some kind of triggering some kind of pushing data from one place to the other",
    "start": "977220",
    "end": "985339"
  },
  {
    "start": "985000",
    "end": "985000"
  },
  {
    "text": "um let's see that in in action with an iot example so imagine you want to implement an iot",
    "start": "985440",
    "end": "992160"
  },
  {
    "text": "um and a temperature sensor you want to have an app for that device using that",
    "start": "992160",
    "end": "998399"
  },
  {
    "text": "app you want to see the current temperature of the room where that device is and you want also to be able",
    "start": "998399",
    "end": "1003860"
  },
  {
    "text": "to see the history of temperature changes maybe also you want to see um history",
    "start": "1003860",
    "end": "1009500"
  },
  {
    "text": "data about I don't know how often something happens or like that average temperature in that room",
    "start": "1009500",
    "end": "1015680"
  },
  {
    "text": "how do you do that using serverless Technologies the first thing is to implement um the",
    "start": "1015680",
    "end": "1022160"
  },
  {
    "text": "iot sensor which is a device and to connect it to the iot core which is AWS",
    "start": "1022160",
    "end": "1028100"
  },
  {
    "text": "offer for iot devices so it's an equity broker and your device is",
    "start": "1028100",
    "end": "1033620"
  },
  {
    "text": "connecting to it all the time maybe maybe only when something happens we will come later about how that affects",
    "start": "1033620",
    "end": "1040160"
  },
  {
    "text": "your bill at the end but your device is connected to that um iot backend",
    "start": "1040160",
    "end": "1047360"
  },
  {
    "text": "it's sending messages maybe every 10 minutes about",
    "start": "1047360",
    "end": "1052520"
  },
  {
    "text": "the temperature the current temperature you are having and then now we start okay we want to do something with this",
    "start": "1052520",
    "end": "1059600"
  },
  {
    "text": "data first thing you do is to implement an iot rule an iot rule is kind of routing",
    "start": "1059600",
    "end": "1065840"
  },
  {
    "text": "which says if a message arrives please forward it to that Lambda or to something else to do something with it",
    "start": "1065840",
    "end": "1072679"
  },
  {
    "text": "so we say okay if the temp is a message arise with temperature in it forwarded to some kind of a Lambda to maybe to",
    "start": "1072679",
    "end": "1079460"
  },
  {
    "text": "manipulate the data and then persist the data in a file on S3 possibly like using",
    "start": "1079460",
    "end": "1084559"
  },
  {
    "text": "also different services to batch this data Maybe using a fire hose which is",
    "start": "1084559",
    "end": "1090200"
  },
  {
    "text": "like for processing data on the Fly and then you may want to push that data",
    "start": "1090200",
    "end": "1096320"
  },
  {
    "text": "in into a redshift to do some other business and analytics on that data",
    "start": "1096320",
    "end": "1101360"
  },
  {
    "text": "and now we have like maybe a different scenario or different use case we want to send alarm if the temperature exceeds",
    "start": "1101360",
    "end": "1108620"
  },
  {
    "text": "one threshold again we have a different rule which says if temperature is higher",
    "start": "1108620",
    "end": "1113900"
  },
  {
    "text": "than 40 degree maybe notify everybody before it's in too hot",
    "start": "1113900",
    "end": "1119360"
  },
  {
    "text": "for that we have a different rule which triggers a different Lambda and then we use SNS for that",
    "start": "1119360",
    "end": "1124580"
  },
  {
    "text": "SNS is a simple notification service which is responsible for either having like a fan out a pattern to trigger",
    "start": "1124580",
    "end": "1131900"
  },
  {
    "text": "multiple lambdas or even to to send push notifications to mobile app and again with a different iot Rule and",
    "start": "1131900",
    "end": "1139340"
  },
  {
    "text": "a different Lambda you store maybe the last temperature so it can be shown on a mobile app",
    "start": "1139340",
    "end": "1146799"
  },
  {
    "text": "okay so um maybe I was too fast okay so that you see the whole application can",
    "start": "1147020",
    "end": "1153200"
  },
  {
    "text": "be implemented using almost serverless Technologies except for the redshift in",
    "start": "1153200",
    "end": "1158240"
  },
  {
    "text": "the middle that's not serverless but even with that like if it depends on your use case you can do use a",
    "start": "1158240",
    "end": "1163880"
  },
  {
    "text": "serverless for that but we have like implemented everything every path of this data separately they",
    "start": "1163880",
    "end": "1169640"
  },
  {
    "text": "are very independent so you can modify any path of this data without even touching the other path it's a very",
    "start": "1169640",
    "end": "1176539"
  },
  {
    "text": "independent of each other so let's see now for a developer",
    "start": "1176539",
    "end": "1182600"
  },
  {
    "text": "um it makes sense maybe you like to work with serverless maybe it's a cool technology but why should a business use",
    "start": "1182600",
    "end": "1189020"
  },
  {
    "text": "servers why like it was in our case a good match at the beginning",
    "start": "1189020",
    "end": "1194919"
  },
  {
    "text": "um the first point is that serverless has an accurate cost estimation",
    "start": "1195740",
    "end": "1200960"
  },
  {
    "text": "and here I'm not saying serverless is cheap or is cheaper I'm saying it has very accurate cost estimation or cost",
    "start": "1200960",
    "end": "1208039"
  },
  {
    "text": "calculation model let's imagine this part of the system we've just talked about",
    "start": "1208039",
    "end": "1215120"
  },
  {
    "text": "so where we send an alarm so if we want to say how much does that cost us",
    "start": "1215120",
    "end": "1222980"
  },
  {
    "text": "um we know exactly how much we pay for um for an mqt connection like we know",
    "start": "1222980",
    "end": "1229940"
  },
  {
    "text": "okay if a device is connected to the back end we pay them per minute if like",
    "start": "1229940",
    "end": "1234980"
  },
  {
    "text": "only it connects whenever something happens we can reduce the cost but we know exactly like how much does that cost us",
    "start": "1234980",
    "end": "1243080"
  },
  {
    "text": "we know for the iot rules how much an evaluation of of that rule cost us and",
    "start": "1243080",
    "end": "1249260"
  },
  {
    "text": "if a it rule trigger something we know also how much we pay for for that and",
    "start": "1249260",
    "end": "1254419"
  },
  {
    "text": "that goes all the way down also for for the lambdas for SNS we know exactly like we pay per request for a Lambda plus how",
    "start": "1254419",
    "end": "1261740"
  },
  {
    "text": "many milliseconds that Trump were on so we can say this path of data will cost",
    "start": "1261740",
    "end": "1267620"
  },
  {
    "text": "us exactly that having some assumptions like okay we need to make some",
    "start": "1267620",
    "end": "1272720"
  },
  {
    "text": "assumptions this device may be sent an alarm once every month but sends a message every 15 minutes so we can know",
    "start": "1272720",
    "end": "1280580"
  },
  {
    "text": "exactly how much that path will cost us you do that for All Passes you have",
    "start": "1280580",
    "end": "1286520"
  },
  {
    "text": "maybe an estimated lifetime of that device so you know how much this device will cost you in the future which means",
    "start": "1286520",
    "end": "1292940"
  },
  {
    "text": "you add that cost to the manufacturing cost and you know how much this device",
    "start": "1292940",
    "end": "1297980"
  },
  {
    "text": "should cost when somebody buys it",
    "start": "1297980",
    "end": "1301658"
  },
  {
    "text": "so that was the accurate cost estimation the second point is shorter time to",
    "start": "1304640",
    "end": "1309860"
  },
  {
    "text": "Market because like everything I have talked about and you didn't see like now we",
    "start": "1309860",
    "end": "1315679"
  },
  {
    "text": "need to figure out how the scaling model works we didn't figure need to figure out where we run that we didn't figure",
    "start": "1315679",
    "end": "1321860"
  },
  {
    "text": "out like how how big or what kind of uh mqt broker we need every that everything of",
    "start": "1321860",
    "end": "1329360"
  },
  {
    "text": "that is already has been taken care of so that's why it's you you can't focus",
    "start": "1329360",
    "end": "1334520"
  },
  {
    "text": "on what matters on the business logic and what you want to do with your data and you which means you can release",
    "start": "1334520",
    "end": "1340760"
  },
  {
    "text": "faster and also it's it's a reduced risk exactly for the same reason because we",
    "start": "1340760",
    "end": "1347419"
  },
  {
    "text": "will not fail because the operating team has failed we will not fail because our",
    "start": "1347419",
    "end": "1352520"
  },
  {
    "text": "system doesn't handle that much of data we will see later that",
    "start": "1352520",
    "end": "1357980"
  },
  {
    "text": "there are some limits and you can reach them and how to work around them but generally speaking you have like",
    "start": "1357980",
    "end": "1363980"
  },
  {
    "text": "eliminated one factor of failing and that's always a good choice now I come to some list of um do's and",
    "start": "1363980",
    "end": "1373820"
  },
  {
    "text": "don'ts and they are like they come out of some specific experience so I'm not",
    "start": "1373820",
    "end": "1378919"
  },
  {
    "text": "here suggesting that makes sense to do all of them in any product but they all",
    "start": "1378919",
    "end": "1384080"
  },
  {
    "text": "have reasons and they all come from the nature of serverless Technologies which means like if you understand them if you",
    "start": "1384080",
    "end": "1389900"
  },
  {
    "text": "understand where do they come from if you understand how to work around them they will always",
    "start": "1389900",
    "end": "1396500"
  },
  {
    "text": "be helpful for you so as I said take them with a grain of salt it's not for they are not meant to be valid for every",
    "start": "1396500",
    "end": "1403220"
  },
  {
    "text": "situation but the reasons behind them are usually valid",
    "start": "1403220",
    "end": "1409480"
  },
  {
    "start": "1409000",
    "end": "1409000"
  },
  {
    "text": "um first thing first is the don't don't use Lambda for long-running calls and",
    "start": "1409760",
    "end": "1415039"
  },
  {
    "text": "like if if something will take very long why first reason is is because you also pay",
    "start": "1415039",
    "end": "1422840"
  },
  {
    "text": "for a Lambda for example even if it's where if it's waiting like if you have 1000 lambdas waiting for something to",
    "start": "1422840",
    "end": "1430039"
  },
  {
    "text": "happen maybe some data to be available you are paying for every single of one of them a Lambda cannot do anything in",
    "start": "1430039",
    "end": "1437419"
  },
  {
    "text": "this time like it's it's waiting for data to be there so it's a cost um it's a cost uh question like whereas if you",
    "start": "1437419",
    "end": "1444679"
  },
  {
    "text": "have a server and then maybe you have a lot of coils which are waiting your server can handle maybe more requests",
    "start": "1444679",
    "end": "1450860"
  },
  {
    "text": "that doesn't apply in serverless in the Lambda scenario you have also limited concurrency which",
    "start": "1450860",
    "end": "1457640"
  },
  {
    "text": "is like me sounds funny I was talking all the time about how much does that scale but at the end there is a maximum",
    "start": "1457640",
    "end": "1464179"
  },
  {
    "text": "number of of concurrent Lambda execution in a region like it's one thousand two thousand three thousand different",
    "start": "1464179",
    "end": "1470120"
  },
  {
    "text": "depends on the region but if you have like 3000 users all connected to a Lambda and this Lambda is",
    "start": "1470120",
    "end": "1477200"
  },
  {
    "text": "just waiting for something to happen nothing else can be done at that time",
    "start": "1477200",
    "end": "1482919"
  },
  {
    "text": "um and then there is also a hard limit on how long our Lambda will run it",
    "start": "1483620",
    "end": "1488900"
  },
  {
    "text": "cannot run more than 15 minutes so if if you don't know how to to handle",
    "start": "1488900",
    "end": "1494480"
  },
  {
    "text": "big data or you have a lot of data to to read and write and that",
    "start": "1494480",
    "end": "1499520"
  },
  {
    "text": "will take more than 50 minutes and maybe a serverless Approach at that point is not workable for you maybe you can",
    "start": "1499520",
    "end": "1505580"
  },
  {
    "text": "divide this data and then use multiple lambdas but without any kind of work around that will not work",
    "start": "1505580",
    "end": "1512960"
  },
  {
    "start": "1512000",
    "end": "1512000"
  },
  {
    "text": "which then brings me to the next point it comes also from the same limitations push don't pull",
    "start": "1512960",
    "end": "1520039"
  },
  {
    "text": "again if you're waiting you are wasting money and you have limited concurrency and",
    "start": "1520039",
    "end": "1526340"
  },
  {
    "text": "duration so it will not work what to do opposite to that is to push like if you",
    "start": "1526340",
    "end": "1532159"
  },
  {
    "text": "have um something which is a complex workflow you have a pre-processing of some data",
    "start": "1532159",
    "end": "1537799"
  },
  {
    "text": "and then doing some call and then after that call has finished to do some post-processing maybe divide that into",
    "start": "1537799",
    "end": "1545840"
  },
  {
    "text": "three steps like pre-processing and then push the data to the party or to the",
    "start": "1545840",
    "end": "1550880"
  },
  {
    "text": "Lambda or whatever will be processing that data whenever the data has been processed let it push be pushed back to",
    "start": "1550880",
    "end": "1557900"
  },
  {
    "text": "you and then do something with that and for doing that you can use a lot of",
    "start": "1557900",
    "end": "1564100"
  },
  {
    "text": "also serverless products on AWS so simplest one of course is another one is",
    "start": "1564100",
    "end": "1569900"
  },
  {
    "text": "to use sqs which is a message queuing like just write a message into a queue but you can also use a system a file",
    "start": "1569900",
    "end": "1577880"
  },
  {
    "text": "system if you want to write a file and that file will trigger something like you can also activate event so a new",
    "start": "1577880",
    "end": "1584120"
  },
  {
    "text": "file has been written with this data Maybe you call want to call a Lambda with that content to do something with",
    "start": "1584120",
    "end": "1589279"
  },
  {
    "text": "it and that works for many other examples like web hooks cook some call",
    "start": "1589279",
    "end": "1594679"
  },
  {
    "text": "some other server or different Lambda core or other stuff and that also work for user interaction",
    "start": "1594679",
    "end": "1602779"
  },
  {
    "text": "so if you have a user which is waiting for something to happen and that usually happens a lot when you are working with",
    "start": "1602779",
    "end": "1608900"
  },
  {
    "text": "real web devices so network is is always slow it's not reliable like if you have",
    "start": "1608900",
    "end": "1614419"
  },
  {
    "text": "a device and you want to control it via your mobile phone that will take few seconds you can do that with",
    "start": "1614419",
    "end": "1620059"
  },
  {
    "text": "milliseconds because you want to send a message to the device and the device needs to report it back",
    "start": "1620059",
    "end": "1625100"
  },
  {
    "text": "and sometimes these devices are in the basement don't have good coverage so that will take if you want just to leave",
    "start": "1625100",
    "end": "1632179"
  },
  {
    "text": "the connection open that will cost you a lot and you may run into timeout the best solution is that send",
    "start": "1632179",
    "end": "1639380"
  },
  {
    "text": "something to the server you get 202 accepted maybe and you the result will come later",
    "start": "1639380",
    "end": "1646100"
  },
  {
    "text": "via websocket maybe you also do the push for the websocket depends of course on the use case",
    "start": "1646100",
    "end": "1653720"
  },
  {
    "start": "1653000",
    "end": "1653000"
  },
  {
    "text": "so what are triggers like um I have mentioned already a few of them but like",
    "start": "1653720",
    "end": "1658760"
  },
  {
    "text": "what can't trigger a Lambda or a different uh serverless product one is an HTTP request either like",
    "start": "1658760",
    "end": "1666860"
  },
  {
    "text": "directly you can say this Lambda can be called by an HTTP request or you have an",
    "start": "1666860",
    "end": "1672080"
  },
  {
    "text": "API Gateway which does the routing for you and then calls some kind of a Lambda",
    "start": "1672080",
    "end": "1677720"
  },
  {
    "text": "but that's always like a solution a different Lambda like of course from",
    "start": "1677720",
    "end": "1682820"
  },
  {
    "text": "your code you can do whatever you want including calling a different Lambda synchronously or asynchronously like",
    "start": "1682820",
    "end": "1688640"
  },
  {
    "text": "also posts possible and dynamodb which is I said it's a kind",
    "start": "1688640",
    "end": "1694820"
  },
  {
    "text": "of a database a document database and it has a very powerful feature whenever you",
    "start": "1694820",
    "end": "1700220"
  },
  {
    "text": "write something you can activate for that table then data stream which means all changes will be then streamed to",
    "start": "1700220",
    "end": "1707120"
  },
  {
    "text": "whatever you want I mean you can be streamed also to a Lambda and that represents some kind of safe",
    "start": "1707120",
    "end": "1714320"
  },
  {
    "text": "points it's like in a game save point you have saved your word to a Lambda and then you will trigger the next uh",
    "start": "1714320",
    "end": "1719960"
  },
  {
    "text": "workflow you know save the data there and then maybe some other party or some other part of the system will be",
    "start": "1719960",
    "end": "1726440"
  },
  {
    "text": "responsible for validating this data or creating an email or doing whatever needed to do",
    "start": "1726440",
    "end": "1734179"
  },
  {
    "text": "exactly the same you write a file to some place and then that triggers a Lambda or triggers whatever you want to",
    "start": "1734179",
    "end": "1741380"
  },
  {
    "text": "process this data ah okay an event Bridge also kind of sqs",
    "start": "1741380",
    "end": "1749840"
  },
  {
    "text": "eventbridge SNS which are very different solutions for handling events",
    "start": "1749840",
    "end": "1755000"
  },
  {
    "text": "either in a persistent way like in the message queue or a Event Event Bridge or",
    "start": "1755000",
    "end": "1760820"
  },
  {
    "text": "as an SNS very similar but the idea behind that that you write a message",
    "start": "1760820",
    "end": "1765980"
  },
  {
    "text": "somewhere and you can getting published to a different receivers and of course many other things so",
    "start": "1765980",
    "end": "1773179"
  },
  {
    "text": "actually um I think there are multiple hundreds of stuff that can trigger a number",
    "start": "1773179",
    "end": "1780760"
  },
  {
    "text": "okay now I come to also a very um important point when it's about the",
    "start": "1780980",
    "end": "1787279"
  },
  {
    "text": "latency latency of a Lambda like when Lambda should not be used if if you want",
    "start": "1787279",
    "end": "1792620"
  },
  {
    "text": "a guaranteed response in milliseconds but before I can and talk about it we need to understand how scaling Works in",
    "start": "1792620",
    "end": "1799760"
  },
  {
    "text": "in the Lambda environment so imagine we have a Lambda which is",
    "start": "1799760",
    "end": "1805520"
  },
  {
    "start": "1802000",
    "end": "1802000"
  },
  {
    "text": "being triggered by an HTTP request so on the image we see we have one",
    "start": "1805520",
    "end": "1811580"
  },
  {
    "text": "request which maps to that Lambda and then at that point it's a fair score so",
    "start": "1811580",
    "end": "1816799"
  },
  {
    "text": "we don't have any Lambda already in in the memory which means we have to start",
    "start": "1816799",
    "end": "1822500"
  },
  {
    "text": "one a new one AWS will manage that for you it will will start like a",
    "start": "1822500",
    "end": "1828080"
  },
  {
    "text": "lightweight virtual machine it will download your code which you have provided for that Lambda it runs the",
    "start": "1828080",
    "end": "1833600"
  },
  {
    "text": "initialization code which you provide also in your code and then that all goes into the edit phase",
    "start": "1833600",
    "end": "1839899"
  },
  {
    "text": "and then the handling Handler will be called which means that the code that will be run every time and an event will",
    "start": "1839899",
    "end": "1846620"
  },
  {
    "text": "come sometimes it's like here you have a small initialization phase and a big",
    "start": "1846620",
    "end": "1852440"
  },
  {
    "text": "invocation phase sometimes it's the other way around and that depends on in many aspects like the language you have",
    "start": "1852440",
    "end": "1858320"
  },
  {
    "text": "written your Lambda and the size of your code base and many other factors",
    "start": "1858320",
    "end": "1865159"
  },
  {
    "text": "if we get another request at the same time it will not wait for the first request to finish another Lambda will be",
    "start": "1865159",
    "end": "1872360"
  },
  {
    "text": "started and that happens like for any request while we don't have an an ideal",
    "start": "1872360",
    "end": "1877760"
  },
  {
    "text": "Lambda to handle that request which means at this point we have five requests and five instances of our",
    "start": "1877760",
    "end": "1884840"
  },
  {
    "text": "Lambda and them in memory later on we get maybe some additional requests but the first three requests",
    "start": "1884840",
    "end": "1892640"
  },
  {
    "text": "are done so we these requests can be handled by the same instance of the Lambda which means now we don't have",
    "start": "1892640",
    "end": "1898340"
  },
  {
    "text": "initialization phase we run actually in the in our handlers which means if our",
    "start": "1898340",
    "end": "1904880"
  },
  {
    "text": "Handler is doing well we can get a result very fast and",
    "start": "1904880",
    "end": "1911059"
  },
  {
    "text": "at some point the fourth and fifth um request is this lambdas or the distance",
    "start": "1911059",
    "end": "1917179"
  },
  {
    "text": "is above they have been idle for some time sometimes it's only one minute is",
    "start": "1917179",
    "end": "1922399"
  },
  {
    "text": "enough but at some time they be then unloaded which means if we get a",
    "start": "1922399",
    "end": "1927500"
  },
  {
    "text": "different request again we will have to go through that init phase and that bring us to the point if you",
    "start": "1927500",
    "end": "1933799"
  },
  {
    "text": "want to have you done a very low latency or at least a guaranteed latency possibly Lambda is",
    "start": "1933799",
    "end": "1941240"
  },
  {
    "text": "not the right solution for you um the init phase as I said it depends on",
    "start": "1941240",
    "end": "1948380"
  },
  {
    "text": "what you do with that how but it can be up like to one second or even more",
    "start": "1948380",
    "end": "1953659"
  },
  {
    "text": "and it's not possible like to say okay I will call this Lambda and then it's a memory and then every consequent request",
    "start": "1953659",
    "end": "1960919"
  },
  {
    "text": "will work with an existing Lambda after one minute or possibly more but yeah",
    "start": "1960919",
    "end": "1966380"
  },
  {
    "text": "there's no instance more in the memory and you have again to go through the init phase",
    "start": "1966380",
    "end": "1971960"
  },
  {
    "text": "there is something which called provisioned concurrency which may say Okay I want always to have five",
    "start": "1971960",
    "end": "1980059"
  },
  {
    "text": "instances of a Lambda in memory and that could help but it also has some",
    "start": "1980059",
    "end": "1985700"
  },
  {
    "text": "limitations so let's have a look into them um why we need them so some of",
    "start": "1985700",
    "end": "1993860"
  },
  {
    "text": "um like we have seen for Lambda it's the initialization phase but also for some other services the handle burst poorly",
    "start": "1993860",
    "end": "2000159"
  },
  {
    "text": "even like the most scalable service which is dynamodb which always has like",
    "start": "2000159",
    "end": "2005980"
  },
  {
    "text": "good performance if at one point like you are not using it and you have like 1",
    "start": "2005980",
    "end": "2011200"
  },
  {
    "text": "000 requests to write data into it some of these requests will fail because because it doesn't scale that well it",
    "start": "2011200",
    "end": "2018220"
  },
  {
    "text": "needs time to scale up um and you for that you have provisioned",
    "start": "2018220",
    "end": "2024220"
  },
  {
    "text": "and provision capacity which works for Lambda with the dynamodb but also with",
    "start": "2024220",
    "end": "2029260"
  },
  {
    "text": "other um Solutions and also can be modified by a schedule so if you know okay my device is connect",
    "start": "2029260",
    "end": "2037360"
  },
  {
    "text": "all in the mid of the night to send data at exactly two o'clock maybe you scale",
    "start": "2037360",
    "end": "2042880"
  },
  {
    "text": "up your your database you say okay now I read more more provision capacity",
    "start": "2042880",
    "end": "2047980"
  },
  {
    "text": "for my lambda's more provision capacity for dynamodb and then scale them down after you're done",
    "start": "2047980",
    "end": "2053260"
  },
  {
    "text": "but it has a very important drawback it defines a pay for usage model now you",
    "start": "2053260",
    "end": "2058599"
  },
  {
    "text": "are paying for our if you the more the less the more you provision the more you pay",
    "start": "2058599",
    "end": "2064960"
  },
  {
    "text": "even if you are doing absolutely nothing with that so it's it's like it's a trade-off",
    "start": "2064960",
    "end": "2070000"
  },
  {
    "text": "um sometimes it can be helpful in some scenarios but um you are losing something for that",
    "start": "2070000",
    "end": "2076800"
  },
  {
    "text": "um let's um have a different look into the whole Lambda and how they are called",
    "start": "2078580",
    "end": "2085379"
  },
  {
    "text": "as I said before a Lambda can call a different Lambda which means also like that Lambda you",
    "start": "2085960",
    "end": "2093220"
  },
  {
    "text": "can call it a different one and you may end up with a chain of course especially if you are waiting for a response from",
    "start": "2093220",
    "end": "2098980"
  },
  {
    "text": "here talking about synchronous calls not um just triggering a Lambda to do something else while the first one has",
    "start": "2098980",
    "end": "2105640"
  },
  {
    "text": "done working in this case you will amplify the cold",
    "start": "2105640",
    "end": "2111520"
  },
  {
    "text": "start time because if the first Lambda has an init phase calling a different one and the second one has also an init",
    "start": "2111520",
    "end": "2118480"
  },
  {
    "text": "phase and the second was calling a third one and so on every one of those may have a init phase and the issue is that",
    "start": "2118480",
    "end": "2126099"
  },
  {
    "text": "now you are paying even for the init phase of different lambdas like if the first one calls you know 10 lambdas and",
    "start": "2126099",
    "end": "2133119"
  },
  {
    "text": "it's paying for the time it's waiting for the second Lambda to to finish the init phase",
    "start": "2133119",
    "end": "2139119"
  },
  {
    "text": "and it also breaks isolation in Independence so we like in this conference I've now seen that multiple",
    "start": "2139119",
    "end": "2145720"
  },
  {
    "text": "times or in one talk about the advanced API usages so try to avoid that if you",
    "start": "2145720",
    "end": "2152680"
  },
  {
    "text": "have something which calling something else synchronously waiting for data and again that one is calling something else",
    "start": "2152680",
    "end": "2158680"
  },
  {
    "text": "that's probably not a good pattern maybe you have to remodel your application",
    "start": "2158680",
    "end": "2163780"
  },
  {
    "text": "as a rule of thumb but it just threw up some it's not like something you you have to do if one Lambda is calling a",
    "start": "2163780",
    "end": "2170560"
  },
  {
    "text": "different one it's okay but if that gets more and deeper maybe you should restructure your data or structure your",
    "start": "2170560",
    "end": "2176859"
  },
  {
    "text": "program um let's sum up how how that works like",
    "start": "2176859",
    "end": "2183400"
  },
  {
    "text": "how the whole scaling how the whole Lambda Auto scaling works",
    "start": "2183400",
    "end": "2189820"
  },
  {
    "text": "so what you have is auto scaling single request application like you can if you",
    "start": "2189820",
    "end": "2196180"
  },
  {
    "text": "have a Lambda which handling one request you can do a lot of stuff that Lambda but you can't handle a different request",
    "start": "2196180",
    "end": "2203740"
  },
  {
    "text": "so you need always always to keep that in mind",
    "start": "2203740",
    "end": "2208320"
  },
  {
    "text": "and you have an upper limit on all number of concurrent lambdas in any region no matter like you can sometimes",
    "start": "2210520",
    "end": "2218800"
  },
  {
    "text": "you can increase that if you asked for more but at one point it's always there's a limit and you can't get more",
    "start": "2218800",
    "end": "2224859"
  },
  {
    "text": "so you can't just run as many lambdas as you want and you have the penalty for the",
    "start": "2224859",
    "end": "2231160"
  },
  {
    "text": "initialization fees so always keep that in mind when you work with Lambda",
    "start": "2231160",
    "end": "2236440"
  },
  {
    "text": "um sometimes if you work around that you can batch and batch and throttle which means like if for example if you have a",
    "start": "2236440",
    "end": "2242260"
  },
  {
    "text": "queue instead of calling one Lambda for every message you can tell it to wait until you have five messages and then",
    "start": "2242260",
    "end": "2248859"
  },
  {
    "text": "call a Lambda that may help sometimes especially if you are not requiring a",
    "start": "2248859",
    "end": "2254380"
  },
  {
    "text": "response immediately which you shouldn't be doing when working with queues anyway so that could maybe a viable solution",
    "start": "2254380",
    "end": "2262420"
  },
  {
    "text": "then just of that don't try to work around it like if you have a Lambda which is waiting don't try to do some",
    "start": "2262420",
    "end": "2269380"
  },
  {
    "text": "other stuff in the time which are not related don't try to handle like a different request you know how that",
    "start": "2269380",
    "end": "2275440"
  },
  {
    "text": "works try just to embrace it and and to use it in the way it was supposed to be used",
    "start": "2275440",
    "end": "2282539"
  },
  {
    "text": "um The Next Step or the next Do's is that um which I call everything as a",
    "start": "2283480",
    "end": "2288640"
  },
  {
    "text": "code I don't know if anybody call it this way but it's like even more than",
    "start": "2288640",
    "end": "2294339"
  },
  {
    "text": "infrastructure as a code so we have seen you have your code you have your lambdas you have a lot of resources like a",
    "start": "2294339",
    "end": "2301180"
  },
  {
    "text": "database or in connection between the lambdas the permissions everything",
    "start": "2301180",
    "end": "2306640"
  },
  {
    "text": "and it can get complicated it's be like a big Jungle of resources so if you want",
    "start": "2306640",
    "end": "2312160"
  },
  {
    "text": "to be able to restore the system to any point or to have like same deployment",
    "start": "2312160",
    "end": "2317500"
  },
  {
    "text": "processes you must use um infrastructure as a code code as a",
    "start": "2317500",
    "end": "2323260"
  },
  {
    "text": "code and everything else what did I do okay wrong button so it goes for code",
    "start": "2323260",
    "end": "2332020"
  },
  {
    "text": "for infrastructure for alarms you will see that later alarm and monitoring is",
    "start": "2332020",
    "end": "2337359"
  },
  {
    "text": "very important when working with serverless and also for the documentation",
    "start": "2337359",
    "end": "2342940"
  },
  {
    "text": "we use for that like one pull request so anybody would change anything must put",
    "start": "2342940",
    "end": "2348400"
  },
  {
    "text": "everything in one pull request like not enough to modify the code if you have some to change something in the",
    "start": "2348400",
    "end": "2354220"
  },
  {
    "text": "infrastructure don't have invalid States in your repository if there is something any",
    "start": "2354220",
    "end": "2360040"
  },
  {
    "text": "state it must be Deployable which means deploy like pull request for everything",
    "start": "2360040",
    "end": "2366240"
  },
  {
    "text": "um what you can use to have some kind of organization so like you can put everything the same place and then you",
    "start": "2368260",
    "end": "2374680"
  },
  {
    "text": "will try need to figure out which Lambda is calling what but you can also use stacks and applications which are like",
    "start": "2374680",
    "end": "2380920"
  },
  {
    "text": "terminology coming from cdk and then from cloud formation which is like the way how you deploy application AWS but",
    "start": "2380920",
    "end": "2388720"
  },
  {
    "text": "it's kind of organizing code in in in parts that can be deployed separately",
    "start": "2388720",
    "end": "2395280"
  },
  {
    "start": "2395000",
    "end": "2395000"
  },
  {
    "text": "um again come to something which relatively new like it's been now I",
    "start": "2397000",
    "end": "2402460"
  },
  {
    "text": "don't know a few years but it's a very important feature which I advertised as",
    "start": "2402460",
    "end": "2407619"
  },
  {
    "text": "low code solution for creating workflows um on the official documentation it says",
    "start": "2407619",
    "end": "2413800"
  },
  {
    "text": "it works with more than 200 services and thousands of apis",
    "start": "2413800",
    "end": "2419859"
  },
  {
    "text": "but it's also very important if you only use it with with calling lambdas it's called a step function which the name",
    "start": "2419859",
    "end": "2426820"
  },
  {
    "text": "says it is a way for organizing workflows you can for example use it for error",
    "start": "2426820",
    "end": "2433480"
  },
  {
    "text": "handling and retries so if you do something and expect it to fail maybe you want to try it five times and then",
    "start": "2433480",
    "end": "2440440"
  },
  {
    "text": "fail after that works it doesn't work so for example if you work as a gain example of working with a physical word",
    "start": "2440440",
    "end": "2447520"
  },
  {
    "text": "device it may not be there it may not be connected so maybe you need to try that",
    "start": "2447520",
    "end": "2452560"
  },
  {
    "text": "few times before you give up you can use um the functions for that",
    "start": "2452560",
    "end": "2458619"
  },
  {
    "text": "it can be used also for parallelization which means like call two lambdas when wait until the result is there and then",
    "start": "2458619",
    "end": "2464980"
  },
  {
    "text": "do something with a result of both goals and also in January for for stateful",
    "start": "2464980",
    "end": "2471339"
  },
  {
    "text": "workflows like if you want to implement the Sega pattern whatever something started manipulating data and at the end",
    "start": "2471339",
    "end": "2477640"
  },
  {
    "text": "you have some result can be used for one way to use that is also for delays",
    "start": "2477640",
    "end": "2483160"
  },
  {
    "text": "which is like a very complicated thing to solve in a serverless world we",
    "start": "2483160",
    "end": "2488320"
  },
  {
    "text": "wouldn't imagine that but if you have nothing running all the time it's very hard to say wait five minutes and then",
    "start": "2488320",
    "end": "2494140"
  },
  {
    "text": "do something I usually you have to do some work around around that",
    "start": "2494140",
    "end": "2499540"
  },
  {
    "text": "but with the step functions you can say like we have only a set function which says always wait something and then coil",
    "start": "2499540",
    "end": "2506200"
  },
  {
    "text": "Lambda will give it the payload it's a Lambda so we can do a lot of stuff with that just say wait and then do something",
    "start": "2506200",
    "end": "2513900"
  },
  {
    "start": "2513000",
    "end": "2513000"
  },
  {
    "text": "um try to avoid um heavy startups like a big time how to",
    "start": "2514660",
    "end": "2520660"
  },
  {
    "text": "minimize that initialization phase",
    "start": "2520660",
    "end": "2524640"
  },
  {
    "text": "um first thing to do is to avoid like using many libraries big Frameworks try",
    "start": "2526540",
    "end": "2532599"
  },
  {
    "text": "to keep your code very compact um that means for example if it doesn't",
    "start": "2532599",
    "end": "2537880"
  },
  {
    "text": "make sense to have like big independent injection libraries in the code you deploy to a Lambda it doesn't make sense",
    "start": "2537880",
    "end": "2544660"
  },
  {
    "text": "to have a big routing mechanism behind it maybe outside that routing to API",
    "start": "2544660",
    "end": "2550780"
  },
  {
    "text": "Gateway which has serverless Solutions so whenever a requests arrives there it's already has you know it's meant for",
    "start": "2550780",
    "end": "2557380"
  },
  {
    "text": "this function and you don't need to do all of that something's wrong with this one okay",
    "start": "2557380",
    "end": "2564160"
  },
  {
    "text": "reduce the package size which means remove everything you don't need like even one one important aspect of it",
    "start": "2564160",
    "end": "2571839"
  },
  {
    "text": "is that reduce the initialization phase and also it means sometimes you are",
    "start": "2571839",
    "end": "2577720"
  },
  {
    "text": "paying less because then the Lambda will will work if only less by few milliseconds if you have like a billion",
    "start": "2577720",
    "end": "2585160"
  },
  {
    "text": "call of that Lambda it will add up should try to reduce that maybe remove the AWS SDK because it's already",
    "start": "2585160",
    "end": "2593260"
  },
  {
    "text": "provided to you by the runtime so remove everything you don't need do a Shakedown",
    "start": "2593260",
    "end": "2598300"
  },
  {
    "text": "and everything which is left out remove it from the deployed package and initialize only what you need",
    "start": "2598300",
    "end": "2605319"
  },
  {
    "text": "if you for example start start your fun a Lambda function don't get every",
    "start": "2605319",
    "end": "2611440"
  },
  {
    "text": "configuration from the database because this Lambda function may only run for one request and then be unloaded",
    "start": "2611440",
    "end": "2617619"
  },
  {
    "text": "so you have like retrieved Big Data from from a database which you don't need but also on the other hand if you have",
    "start": "2617619",
    "end": "2624760"
  },
  {
    "text": "retrieved something keep it in memory and this comes to like a very common",
    "start": "2624760",
    "end": "2630160"
  },
  {
    "text": "misunderstanding of Lambda Lambda is not stateless if you have a Lambda and you have a lot",
    "start": "2630160",
    "end": "2636940"
  },
  {
    "text": "of requests it's very possible to use the same runtime it's like the global variables will be the same for many",
    "start": "2636940",
    "end": "2643780"
  },
  {
    "text": "requests which mean if you have already read some data from database keep it in memory and you can use it later",
    "start": "2643780",
    "end": "2651420"
  },
  {
    "start": "2651000",
    "end": "2651000"
  },
  {
    "text": "and this point is about like um what where where does like what's the the",
    "start": "2652060",
    "end": "2657400"
  },
  {
    "text": "purpose of one Lambda and we like to consider it as a domain boundary whenever you enter a Lambda",
    "start": "2657400",
    "end": "2664720"
  },
  {
    "text": "you entered like from somewhere we don't know where and that's why we always do through input sanitation so it could be",
    "start": "2664720",
    "end": "2672460"
  },
  {
    "text": "that your Lambda is being called by a different Lambda but also possible that this Lambda",
    "start": "2672460",
    "end": "2678880"
  },
  {
    "text": "um is changed later and somebody is calling it from an API Gateway which",
    "start": "2678880",
    "end": "2683920"
  },
  {
    "text": "means you get a user input without any validity so always don't trust the input always consider the data you are",
    "start": "2683920",
    "end": "2690819"
  },
  {
    "text": "receiving to be um dangerous um it's this one is maybe hard to do but",
    "start": "2690819",
    "end": "2698200"
  },
  {
    "text": "yeah if you try if you it's possible consider it as an independent component and it also will reduce the factor which",
    "start": "2698200",
    "end": "2705099"
  },
  {
    "text": "can go wrong so if in your application so if one Lambda fails maybe that's a delay but like you should",
    "start": "2705099",
    "end": "2712300"
  },
  {
    "text": "not the whole system should fail with that and you should also have clear data",
    "start": "2712300",
    "end": "2717880"
  },
  {
    "text": "ownership like that part of a system belonged to the this Lambda or this Lambda so if you",
    "start": "2717880",
    "end": "2723880"
  },
  {
    "text": "have multiple lambdas for Reading Writing the same data you know that data belongs to them but",
    "start": "2723880",
    "end": "2729640"
  },
  {
    "text": "nobody else is allowed to change that that like that will help later if you want to modify the internal of that",
    "start": "2729640",
    "end": "2736599"
  },
  {
    "text": "Lambda that will help to avoid breaking different systems",
    "start": "2736599",
    "end": "2742300"
  },
  {
    "text": "and um yeah the last point is just saying this one is is not easy to achieve like you will start with this",
    "start": "2742300",
    "end": "2747940"
  },
  {
    "text": "design you need to change it later but yeah that's like what you always do",
    "start": "2747940",
    "end": "2754319"
  },
  {
    "start": "2754000",
    "end": "2754000"
  },
  {
    "text": "expect errors because you are working with a highly distributed system so it's",
    "start": "2755020",
    "end": "2760300"
  },
  {
    "text": "by not everything is inside the same process you are pushing data somewhere",
    "start": "2760300",
    "end": "2766359"
  },
  {
    "text": "and you hope it will arrive Lambda may have changed in the time it maybe it was working on this time when",
    "start": "2766359",
    "end": "2773020"
  },
  {
    "text": "you deployed yours but it changed later so always expect to have some errors and you should work around them so if if",
    "start": "2773020",
    "end": "2780880"
  },
  {
    "text": "something is not working if the database is not there if you have a throttling error because there's no instances",
    "start": "2780880",
    "end": "2787480"
  },
  {
    "text": "available to do anything expect them um maybe you just a retry or maybe just",
    "start": "2787480",
    "end": "2792579"
  },
  {
    "text": "write this data in a dead letter queue because if you have for example Lambda which is gets a message from iot device",
    "start": "2792579",
    "end": "2800500"
  },
  {
    "text": "and it fails and you don't store that message then the data is gone like there's no way to retrieve it so use a",
    "start": "2800500",
    "end": "2807760"
  },
  {
    "text": "dead letter queue which can be configured very easily if a Lambda fails the data will be written somewhere",
    "start": "2807760",
    "end": "2814359"
  },
  {
    "text": "you don't need to do a retry on that maybe it can be done later manually like you don't know reprocess all this data",
    "start": "2814359",
    "end": "2821380"
  },
  {
    "text": "but at least the data is not gone um come here to a point which is uh",
    "start": "2821380",
    "end": "2827680"
  },
  {
    "start": "2824000",
    "end": "2824000"
  },
  {
    "text": "important aim for ad importancy if you don't know what an important C is it comes from",
    "start": "2827680",
    "end": "2833980"
  },
  {
    "text": "linear algebra which means like a transformation in a vector which can be",
    "start": "2833980",
    "end": "2839680"
  },
  {
    "text": "applied multiple times without changing the results like if you have some I don't know vector and you apply transformation like",
    "start": "2839680",
    "end": "2846760"
  },
  {
    "text": "a projection so if you have a vector and you get only the X component of it and you do that 10 times you will always get",
    "start": "2846760",
    "end": "2853240"
  },
  {
    "text": "the same one so it doesn't matter if you project it two times on the same axis in computer software it's not as strict",
    "start": "2853240",
    "end": "2860440"
  },
  {
    "text": "so it doesn't have to be exactly the same result but it has to be a result that you that's not completely different",
    "start": "2860440",
    "end": "2867520"
  },
  {
    "text": "and the reason for that why we need that especially when we are working for with serverless technologies that we have",
    "start": "2867520",
    "end": "2873640"
  },
  {
    "text": "lose guarantees like as I mentioned before um queue a message in sqs may be",
    "start": "2873640",
    "end": "2879940"
  },
  {
    "text": "processed multiple times a message coming from mqt broker like an iot message also it doesn't have the",
    "start": "2879940",
    "end": "2886540"
  },
  {
    "text": "guarantee to be processed exactly once the best you you get is at least one which means like one message can arrive",
    "start": "2886540",
    "end": "2893079"
  },
  {
    "text": "multiple times additionally like in a distributed word you don't have transactions usually so",
    "start": "2893079",
    "end": "2900099"
  },
  {
    "text": "you can do half of the work then fail and then you maybe try that and you do the first half again",
    "start": "2900099",
    "end": "2907260"
  },
  {
    "text": "so only once at least one delivery so um you have to be prepared for that and the",
    "start": "2907480",
    "end": "2915400"
  },
  {
    "text": "way to be prepared for that is sometimes very complicated sometimes very very easy if the action is sending a message",
    "start": "2915400",
    "end": "2923260"
  },
  {
    "text": "to a device to close the valve if you do it twice nothing will happen like device will be closed twice if you are sending",
    "start": "2923260",
    "end": "2930099"
  },
  {
    "text": "a push notification to a user probably you shouldn't bother him especially if that happens not twice but 10 times so",
    "start": "2930099",
    "end": "2935980"
  },
  {
    "text": "it depends about the use case but yeah keep that in mind that could happen",
    "start": "2935980",
    "end": "2941520"
  },
  {
    "text": "um and a different property which you should um always do when working with",
    "start": "2945160",
    "end": "2950440"
  },
  {
    "text": "service is to monitor everything you should monitor errors like we have",
    "start": "2950440",
    "end": "2956260"
  },
  {
    "text": "seen um there are a lot of of steps and if an error happens in any step like the",
    "start": "2956260",
    "end": "2962680"
  },
  {
    "text": "caller or the data where that started will will not know that because it's everything is asynchronously happening",
    "start": "2962680",
    "end": "2968859"
  },
  {
    "text": "and like if you don't want to go through every logs and and watch for yourself if something was wrong you should monitor",
    "start": "2968859",
    "end": "2975880"
  },
  {
    "text": "errors in every service and also it's useful to monitor Under",
    "start": "2975880",
    "end": "2981640"
  },
  {
    "text": "and Over usage so let's say if you have a let's take an example of dynamodb",
    "start": "2981640",
    "end": "2987220"
  },
  {
    "text": "again if you know I get data and I have usually about 10 to 20 read",
    "start": "2987220",
    "end": "2994260"
  },
  {
    "text": "units every hour or every second for for that table so maybe you can then create an alarm",
    "start": "2994260",
    "end": "3001200"
  },
  {
    "text": "which will notify you if you have only five lead capacity which means if you're reading less than usually do maybe",
    "start": "3001200",
    "end": "3007380"
  },
  {
    "text": "something went wrong maybe some kind of a routing is not working and the data is",
    "start": "3007380",
    "end": "3012720"
  },
  {
    "text": "not getting there so you can also do that so it's sometimes errors are not just an",
    "start": "3012720",
    "end": "3017880"
  },
  {
    "text": "exceptions in the logs sometimes error manifested by something not being called at all",
    "start": "3017880",
    "end": "3024559"
  },
  {
    "text": "um you can also set up alarms based on business logic so if you example expect",
    "start": "3025079",
    "end": "3030660"
  },
  {
    "text": "to have a new device then new devices every day if you have only five maybe you should",
    "start": "3030660",
    "end": "3036599"
  },
  {
    "text": "then also be notified something is wrong and you can use logs to to correlate or",
    "start": "3036599",
    "end": "3044819"
  },
  {
    "text": "domain identifiers to correlate logs which means if you have a long system where message arrives at one point and",
    "start": "3044819",
    "end": "3052260"
  },
  {
    "text": "then it's being processed by multiple handlers so how you want to know which one like is has caused this error",
    "start": "3052260",
    "end": "3059099"
  },
  {
    "text": "sometimes it's something at the beginning if you don't want to use very expensive services like x-ray maybe you can",
    "start": "3059099",
    "end": "3066140"
  },
  {
    "text": "use a domain identifier and then you'll be able to correlate the different logs",
    "start": "3066140",
    "end": "3071339"
  },
  {
    "text": "of the different services um integration tests are very important",
    "start": "3071339",
    "end": "3078660"
  },
  {
    "start": "3073000",
    "end": "3073000"
  },
  {
    "text": "because it there are a lot of places where you lose control over what's happening you push a message to dynamodb",
    "start": "3078660",
    "end": "3086040"
  },
  {
    "text": "and then you expect it to appear somewhere else in a different in a different place so",
    "start": "3086040",
    "end": "3092339"
  },
  {
    "text": "it's ideal actually for doing unit tests you have very small pieces of quad which you can test you know what the input",
    "start": "3092339",
    "end": "3098040"
  },
  {
    "text": "what the output is but the arrows may lay somewhere else like if you push the wrong data and some",
    "start": "3098040",
    "end": "3104040"
  },
  {
    "text": "kind of service doesn't work with that so you have a lot of touching points with the not operating system but with",
    "start": "3104040",
    "end": "3109559"
  },
  {
    "text": "other codes that you don't control um so you have to do integration test",
    "start": "3109559",
    "end": "3116160"
  },
  {
    "text": "and that can be also easy sometimes so if you have done everything as I said before having infrastructure as a code",
    "start": "3116160",
    "end": "3123119"
  },
  {
    "text": "being able to deploy every pull request to a testing environment that could work very well",
    "start": "3123119",
    "end": "3130619"
  },
  {
    "text": "yeah use them use the ICD pipeline to to deploy on every product where that will",
    "start": "3130619",
    "end": "3136500"
  },
  {
    "text": "help you um one thing what you shouldn't do is to",
    "start": "3136500",
    "end": "3143520"
  },
  {
    "text": "use like maybe very easy with the permissions and that will",
    "start": "3143520",
    "end": "3149700"
  },
  {
    "text": "clarify the responsibility of the data so we're back at the point where every every part of the system should on this",
    "start": "3149700",
    "end": "3156240"
  },
  {
    "text": "data or should be clear what it is supposed to call and that will help if you um use the least privileged",
    "start": "3156240",
    "end": "3162720"
  },
  {
    "text": "principle which means give every part of the system only the permission that it needs if you have a one Lambda should be one",
    "start": "3162720",
    "end": "3170520"
  },
  {
    "text": "roll and a role is in AWS is like the permissions that Lambda will have the identity it will assume when it's run so",
    "start": "3170520",
    "end": "3177780"
  },
  {
    "text": "it's basically speaking just the permissions and avoid using wild cards in in",
    "start": "3177780",
    "end": "3183000"
  },
  {
    "text": "policies uh policies are the building stones for for the permissions for the",
    "start": "3183000",
    "end": "3188400"
  },
  {
    "text": "roles so if you here look at it's a picture you see two examples of the same policy more or less so if you have a",
    "start": "3188400",
    "end": "3195059"
  },
  {
    "text": "Lambda which needs to read device data from dynamodb one way of doing that is on the left to say action is an asterisk",
    "start": "3195059",
    "end": "3203579"
  },
  {
    "text": "I am allowed to do anything with that Lambda include that database including",
    "start": "3203579",
    "end": "3209339"
  },
  {
    "text": "writing data and that's the resource part of the policy you see at the table slash Asterix which means do anything",
    "start": "3209339",
    "end": "3216300"
  },
  {
    "text": "with any table that could be Rewritten in a very specific way on the right to say the",
    "start": "3216300",
    "end": "3222240"
  },
  {
    "text": "action I I need are to describe table query and scan like to get data and I",
    "start": "3222240",
    "end": "3227460"
  },
  {
    "text": "need access only to one table and that will will help later to clarify also",
    "start": "3227460",
    "end": "3232740"
  },
  {
    "text": "who's responsible for what and then not to delete or add data by mistake",
    "start": "3232740",
    "end": "3239119"
  },
  {
    "text": "um serverless can be added to existing applications and then like in our case",
    "start": "3239880",
    "end": "3245160"
  },
  {
    "text": "we didn't have that but as I said in the beginning some part of the system could not be done with serverless Technologies",
    "start": "3245160",
    "end": "3251160"
  },
  {
    "text": "at the beginning but we're possible later and so it's not a binary choice you don't",
    "start": "3251160",
    "end": "3257460"
  },
  {
    "text": "you have either serverless or don't like use it whenever it makes sense",
    "start": "3257460",
    "end": "3262880"
  },
  {
    "text": "you can improve your application um over that time so it either because",
    "start": "3262880",
    "end": "3267960"
  },
  {
    "text": "you learned better or there are new technologies so it's not your grandpa serverless what",
    "start": "3267960",
    "end": "3273599"
  },
  {
    "text": "was possible not possible at one time maybe possible now um",
    "start": "3273599",
    "end": "3279839"
  },
  {
    "start": "3277000",
    "end": "3277000"
  },
  {
    "text": "the takeaways this is the last one so if you like forget everything which I've",
    "start": "3279839",
    "end": "3285300"
  },
  {
    "text": "talked about what what are the ideas behind serverless so serverless trades",
    "start": "3285300",
    "end": "3290640"
  },
  {
    "text": "control for convenience you get a lot um in return but you lose the control so if",
    "start": "3290640",
    "end": "3297599"
  },
  {
    "text": "you need very specific situation where you had to take actions to do very specific stuff",
    "start": "3297599",
    "end": "3302940"
  },
  {
    "text": "then maybe serverless may not or lambda's specific may not be for you",
    "start": "3302940",
    "end": "3309480"
  },
  {
    "text": "um it's not about being cheaper it's about having accurate cost estimation",
    "start": "3309480",
    "end": "3315680"
  },
  {
    "text": "um it has improved a lot over time so if you like tried it once and didn't work",
    "start": "3316500",
    "end": "3322020"
  },
  {
    "text": "for you it doesn't mean it will not work now so maybe give it an a different a next try with your next product just try",
    "start": "3322020",
    "end": "3328500"
  },
  {
    "text": "it or maybe just have a look into what you can do with that and at the end it's not Silver Bullet so",
    "start": "3328500",
    "end": "3335460"
  },
  {
    "text": "don't feel ashamed if it doesn't work for you it's not meant for for every use case to be done",
    "start": "3335460",
    "end": "3342599"
  },
  {
    "text": "and with that have reached the end thanks a lot thanks for visiting my talk I hope you liked it if not please tell",
    "start": "3342599",
    "end": "3349680"
  },
  {
    "text": "me if you like it please don't forget the green papers I think the printer ran",
    "start": "3349680",
    "end": "3354839"
  },
  {
    "text": "out of green ink so there are some other colors but not important thanks a lot and enjoy it",
    "start": "3354839",
    "end": "3361950"
  },
  {
    "text": "[Applause]",
    "start": "3361950",
    "end": "3369300"
  }
]