[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "so hello everybody my name is mikhail svetkin and i'm software engineer at cisco and today we are going to talk about cube",
    "start": "11040",
    "end": "17440"
  },
  {
    "text": "property yep okay",
    "start": "17440",
    "end": "24480"
  },
  {
    "text": "something wrong with the slides they don't wanna go next yeah okay now it works",
    "start": "24880",
    "end": "31519"
  },
  {
    "start": "29000",
    "end": "29000"
  },
  {
    "text": "yeah so the cube property is a new class which is going to bring us a qml property binding into c plus",
    "start": "31519",
    "end": "37920"
  },
  {
    "text": "plus this class is going to be part of q6 and it's going to be one of the major features of the new",
    "start": "37920",
    "end": "44239"
  },
  {
    "text": "release before we go into deep dive and q property first of all we need to refresh our",
    "start": "44239",
    "end": "49600"
  },
  {
    "text": "knowledge about qml properties what does it do what does it provide to us and what we can do with that",
    "start": "49600",
    "end": "57120"
  },
  {
    "text": "after that we can take a look how we are going to have the same features in c",
    "start": "57120",
    "end": "62559"
  },
  {
    "text": "plus plus and how it will affect the q framework itself",
    "start": "62559",
    "end": "68640"
  },
  {
    "text": "so chemical property binding just a fast refreshment that qml is a",
    "start": "68880",
    "end": "74640"
  },
  {
    "text": "declarative language designed to describe the user interface of your program and the javascript is used as a script",
    "start": "74640",
    "end": "80720"
  },
  {
    "text": "language inside of the qml qml property binding was one of the",
    "start": "80720",
    "end": "86320"
  },
  {
    "text": "success story of the qt qml itself it allows to write a ui very very easier",
    "start": "86320",
    "end": "92000"
  },
  {
    "text": "and more readable way so i hope we will get the same things in c plus plus so let's take a look at the",
    "start": "92000",
    "end": "98079"
  },
  {
    "text": "simple example here we have two rectangles uh one inside another one",
    "start": "98079",
    "end": "104560"
  },
  {
    "text": "and one of them has a fixed geometry white and height two hundred and the",
    "start": "104560",
    "end": "109680"
  },
  {
    "text": "second one has only white and the height is kind of referral to the root element",
    "start": "109680",
    "end": "115040"
  },
  {
    "text": "so if i run the example and and just try to resize the object you",
    "start": "115040",
    "end": "121280"
  },
  {
    "text": "will see that wherever i resize the white rectangle the",
    "start": "121280",
    "end": "126880"
  },
  {
    "text": "blue one is also resized his height is calculated it it depends on the white one so",
    "start": "126880",
    "end": "135520"
  },
  {
    "text": "that's basically what is the qml property binding is",
    "start": "135520",
    "end": "140840"
  },
  {
    "start": "138000",
    "end": "138000"
  },
  {
    "text": "uh",
    "start": "140840",
    "end": "143840"
  },
  {
    "text": "the view the qml property binding is designed to find wide protective",
    "start": "146480",
    "end": "151920"
  },
  {
    "text": "property to another one and in that particular example the height of the blue rectangle depends on",
    "start": "151920",
    "end": "158560"
  },
  {
    "text": "the height of the root rectangle so so that's what what property bank",
    "start": "158560",
    "end": "165840"
  },
  {
    "text": "does it's bind one property to another one or to the multiple one so in that as i said in that example the",
    "start": "165840",
    "end": "173280"
  },
  {
    "text": "rectangle height depends on the root height and every time root height changes value it will immediately change the rectangle",
    "start": "173280",
    "end": "179840"
  },
  {
    "text": "um blue rectangle height as well so in that in the terms of the qml the root",
    "start": "179840",
    "end": "187920"
  },
  {
    "text": "height would be a binding expression binary expression is always start as a from the column",
    "start": "187920",
    "end": "193360"
  },
  {
    "start": "188000",
    "end": "188000"
  },
  {
    "text": "we can say it's binding operator and right after the binding operator we write a",
    "start": "193360",
    "end": "198879"
  },
  {
    "text": "javascript expression that evaluates every time when we",
    "start": "198879",
    "end": "204799"
  },
  {
    "text": "one of the properties inside that binding expression will change so the binding expression could contains",
    "start": "204799",
    "end": "212000"
  },
  {
    "text": "like a simple mathematic calculations or it could call that separate functions or you can write the",
    "start": "212000",
    "end": "217360"
  },
  {
    "text": "conditions by using a 10 or 10r operator or you can use a write a",
    "start": "217360",
    "end": "224000"
  },
  {
    "text": "huge lambda and make a lot of conditions and structure your code a bit better you can also call the",
    "start": "224000",
    "end": "231040"
  },
  {
    "text": "functions and then in that case your property is going to depends wherever you use",
    "start": "231040",
    "end": "236480"
  },
  {
    "text": "inside that function [Music]",
    "start": "236480",
    "end": "243120"
  },
  {
    "start": "242000",
    "end": "242000"
  },
  {
    "text": "so let's take a look how to change the property by in runtime so in that particular example we have a",
    "start": "243120",
    "end": "248480"
  },
  {
    "text": "rectangle which has a white 200 and his height depends on the white is by multiple by 2.",
    "start": "248480",
    "end": "254879"
  },
  {
    "text": "if we want to change the property binding there is a two ways",
    "start": "254879",
    "end": "260479"
  },
  {
    "text": "first of all is simple assign operator it destroys a property by and assign a constant",
    "start": "260479",
    "end": "266240"
  },
  {
    "text": "value so in case where the keys on space pressed when we press press and space",
    "start": "266240",
    "end": "272000"
  },
  {
    "text": "the height is going to assign white multiple by three and it will never change again if we",
    "start": "272000",
    "end": "277840"
  },
  {
    "text": "want to create a new property binding then we need to use a function called cube binding and that's creating new binding and",
    "start": "277840",
    "end": "284320"
  },
  {
    "text": "allow us to to continue height will be depends on the byte but we just create a new one",
    "start": "284320",
    "end": "291840"
  },
  {
    "text": "let's take a look what else we can do with qml properties every qml property provide us a signal",
    "start": "293280",
    "end": "300240"
  },
  {
    "text": "it's when you define the property it's implicitly create a changed signal for you then later in",
    "start": "300240",
    "end": "307120"
  },
  {
    "text": "your program you either can subscribe on that signal or you can use the mechanism of signal",
    "start": "307120",
    "end": "312960"
  },
  {
    "text": "slots in the c plus plus to connect to that signal or do something basically the signal",
    "start": "312960",
    "end": "320080"
  },
  {
    "text": "always contains the same name it's it's the name of the property plus a change keyword",
    "start": "320080",
    "end": "326400"
  },
  {
    "text": "that is one of them useful features in qml properties because you don't really want always just assign",
    "start": "328639",
    "end": "336080"
  },
  {
    "text": "something and but you always need to somehow communicate and understand that your property changed then you want to do something",
    "start": "336080",
    "end": "341919"
  },
  {
    "text": "that's one of the way how you do that in qml",
    "start": "341919",
    "end": "346560"
  },
  {
    "text": "there is one more feature of the qml properties it's called alias so",
    "start": "349440",
    "end": "357680"
  },
  {
    "text": "if we take a look at this particular example we have a component called my text inside of this",
    "start": "357680",
    "end": "364000"
  },
  {
    "text": "my text there is a rectangle and text and later we use the my text a bit later",
    "start": "364000",
    "end": "371120"
  },
  {
    "text": "and we bind the text property to the input of the root property so in that case",
    "start": "371120",
    "end": "378479"
  },
  {
    "text": "we propagate the text from the my text to the actual label inside of that my",
    "start": "378479",
    "end": "385360"
  },
  {
    "text": "text that's kind of useful it's allow you don't write the setter or getter functions as we do in c",
    "start": "385360",
    "end": "392720"
  },
  {
    "text": "plus plus just to say oh i want to use that property and that property is the alice to that property",
    "start": "392720",
    "end": "399680"
  },
  {
    "text": "yeah before we go to the summary of the qml property feature because that was",
    "start": "399680",
    "end": "404800"
  },
  {
    "text": "almost all important features of qml we need to take a look one more thing is when we actually evaluate our",
    "start": "404800",
    "end": "412960"
  },
  {
    "start": "411000",
    "end": "411000"
  },
  {
    "text": "bindings expression because that's kind of magic we don't really understand how it works",
    "start": "412960",
    "end": "418560"
  },
  {
    "text": "so i wrote a simple example and that example there is p1",
    "start": "418560",
    "end": "423599"
  },
  {
    "text": "and p2 two boolean variables uh properties uh p2 depends on p1 so wherever p1",
    "start": "423599",
    "end": "430080"
  },
  {
    "text": "changes p2 should be updated and there is a callback called component on completed this is a basically a",
    "start": "430080",
    "end": "436400"
  },
  {
    "text": "callback which is always called after the constructor if we in terms of c plus plus so",
    "start": "436400",
    "end": "442080"
  },
  {
    "text": "wherever the item created the company complete should be called and then we can start to work with our item so in that",
    "start": "442080",
    "end": "449599"
  },
  {
    "text": "particular case if i run the program first what i would i see i would see the",
    "start": "449599",
    "end": "455759"
  },
  {
    "text": "the debug output as evaluated by an expression that means that the binding is actually created during",
    "start": "455759",
    "end": "461759"
  },
  {
    "text": "the construction of the item and only when it's ready we will we can use it so in our case it",
    "start": "461759",
    "end": "469280"
  },
  {
    "text": "would be p one false p two false then when we change the say p one true it immediately will",
    "start": "469280",
    "end": "476879"
  },
  {
    "text": "re-evaluate the binding for p2 and assign a new value to the p2 in that case we will see that the p1 becomes",
    "start": "476879",
    "end": "483039"
  },
  {
    "text": "true and p2 becomes true as well that's kind of an important thing in",
    "start": "483039",
    "end": "488960"
  },
  {
    "text": "terms of how the qml works and what you can do with that because some of you can look at the",
    "start": "488960",
    "end": "496479"
  },
  {
    "text": "example and think we actually don't use the p1 and p2 for anything we don't change any white height color",
    "start": "496479",
    "end": "503759"
  },
  {
    "text": "or something but the steel qml engine is going to relate this property bindings and the reason is for that because",
    "start": "503759",
    "end": "510560"
  },
  {
    "text": "cumulative actually doesn't know what you're going to do in your lambda or where we want in your binding",
    "start": "510560",
    "end": "516479"
  },
  {
    "text": "expression you're actually able to assign new white or hide inside and then will you will trigger the",
    "start": "516479",
    "end": "522959"
  },
  {
    "text": "the system should be updated so that's why they always initialize them all property banners in the beginning",
    "start": "522959",
    "end": "529120"
  },
  {
    "text": "because they don't know what you're going to do inside and just to make sure that everything works",
    "start": "529120",
    "end": "535440"
  },
  {
    "text": "yeah there is a second feature it's called i call it",
    "start": "535440",
    "end": "541920"
  },
  {
    "start": "540000",
    "end": "540000"
  },
  {
    "text": "partial evolution evolution i didn't find the official name for that but let's take a look at the example",
    "start": "541920",
    "end": "549360"
  },
  {
    "text": "here we have a four properties name location remote and event an event",
    "start": "549360",
    "end": "555839"
  },
  {
    "text": "depends inside in his his lambda on remote name and location so if remote is true",
    "start": "555839",
    "end": "563440"
  },
  {
    "text": "then we get name plus online if remote is fall then we get",
    "start": "563440",
    "end": "568800"
  },
  {
    "text": "name plus location so if we run the",
    "start": "568800",
    "end": "576080"
  },
  {
    "text": "if we run that program we will see that first of all we the event will contain synthetic town",
    "start": "576080",
    "end": "581440"
  },
  {
    "text": "kensburg if we say remote true and that automatically will trigger revelation of the event",
    "start": "581440",
    "end": "587680"
  },
  {
    "text": "and it will print the next time it will print online when we assign location change the",
    "start": "587680",
    "end": "592880"
  },
  {
    "text": "location from kensburg to oslo that actually doesn't trigger anything because your property binding",
    "start": "592880",
    "end": "598800"
  },
  {
    "text": "is not anymore depends on the location because even though the application was changed the removal is still true and in your",
    "start": "598800",
    "end": "606000"
  },
  {
    "text": "binding expression you are not going to go to the line return name plus",
    "start": "606000",
    "end": "611360"
  },
  {
    "text": "location so in that case it's kind of a partial relation of your",
    "start": "611360",
    "end": "616560"
  },
  {
    "text": "property binary so then if we assign the name then we will get the",
    "start": "616560",
    "end": "622560"
  },
  {
    "text": "the event will trigger uh the binding expression is dirty we are going to relate it again",
    "start": "622560",
    "end": "628240"
  },
  {
    "text": "and then we will get them a new event",
    "start": "628240",
    "end": "633760"
  },
  {
    "text": "that's a very important part of the qml and uh and it's it will be also important part",
    "start": "633760",
    "end": "640320"
  },
  {
    "text": "and simplest plus because you need to understand when you write a huge projects",
    "start": "640320",
    "end": "645760"
  },
  {
    "text": "you are going to have a lot of properties and one property might trigger millions of other properties to relate",
    "start": "645760",
    "end": "652240"
  },
  {
    "text": "their value even though they don't use it even though they don't change any colors white height",
    "start": "652240",
    "end": "657279"
  },
  {
    "text": "they don't make any visual changes so that's very important to understand",
    "start": "657279",
    "end": "662560"
  },
  {
    "text": "because otherwise you can end up with the change in ones the thing can change rest of the world even you don't see it",
    "start": "662560",
    "end": "670480"
  },
  {
    "text": "that it will take your cpu time so let's go to the small summary of the",
    "start": "670480",
    "end": "678079"
  },
  {
    "text": "binding qml property binding so it's a simple syntax it's very nice and readable it supports",
    "start": "678079",
    "end": "685760"
  },
  {
    "text": "change then property binding in run time it support partial evaluation it's a great implicit value change",
    "start": "685760",
    "end": "693920"
  },
  {
    "text": "signal it's also support analysis so that's kind of common qml property minus features",
    "start": "693920",
    "end": "700800"
  },
  {
    "text": "let's see how we can do the same in c plus plus",
    "start": "700800",
    "end": "706160"
  },
  {
    "text": "so that's the part about the sequence plus please be ready if you have any questions about that",
    "start": "707120",
    "end": "712399"
  },
  {
    "text": "part i assume that you can just write it immediately and i will try to respond because the first part is kind of tricky",
    "start": "712399",
    "end": "720480"
  },
  {
    "text": "and if you don't understand the first part it may be hard to understand the next one so please if you have any questions",
    "start": "720480",
    "end": "726079"
  },
  {
    "text": "write it i will try to respond immediately yeah good then let's take a look at this",
    "start": "726079",
    "end": "734320"
  },
  {
    "start": "731000",
    "end": "731000"
  },
  {
    "text": "this is a simple c plus plus property binding examples it's the same as we used to have before",
    "start": "734320",
    "end": "740639"
  },
  {
    "text": "in qml so we have two properties one is the p1 the second one is p2 p2 depends on p1 and if we run the",
    "start": "740639",
    "end": "749200"
  },
  {
    "text": "program we will see first of all p2 is false when we change the p1 the p2 becomes",
    "start": "749200",
    "end": "755440"
  },
  {
    "text": "true that's kind of a magic and the example is perfectly valid you",
    "start": "755440",
    "end": "760480"
  },
  {
    "text": "if you copy paste it and run it it will work so few things we can notice first of all it doesn't",
    "start": "760480",
    "end": "766720"
  },
  {
    "text": "depends on the q core application hugo application or any queue application he doesn't we",
    "start": "766720",
    "end": "772560"
  },
  {
    "text": "don't use any signal slots we don't use the event loop so it's completely",
    "start": "772560",
    "end": "777760"
  },
  {
    "text": "separated implementation it doesn't you're able to run your code without the",
    "start": "777760",
    "end": "784000"
  },
  {
    "text": "queue itself just basically copy paste a few headers and it's almost going to work",
    "start": "784000",
    "end": "790880"
  },
  {
    "text": "yeah so let's compare to that with the qml what we",
    "start": "792959",
    "end": "799920"
  },
  {
    "start": "797000",
    "end": "797000"
  },
  {
    "text": "have in qml and what we had in c plus plus so as you see the syntax is pretty",
    "start": "799920",
    "end": "805279"
  },
  {
    "text": "similar except that in c plus plus we need to call qt make property binding",
    "start": "805279",
    "end": "810720"
  },
  {
    "text": "we need to call p1 value p2 value set value but actually there is no any technical",
    "start": "810720",
    "end": "816399"
  },
  {
    "text": "limitations in terms of c plus plus so first of all remove cube you make property binding",
    "start": "816399",
    "end": "823279"
  },
  {
    "text": "it's it's kind of it doesn't support it right now but i'm quite sure it's would be one of the interesting features to",
    "start": "823279",
    "end": "829519"
  },
  {
    "text": "request i think instead of writing the q make proper dividing just assign lambda the second one we don't",
    "start": "829519",
    "end": "836639"
  },
  {
    "text": "really need to call any p2 value or p2 p1 value it's basically there is implicit",
    "start": "836639",
    "end": "843120"
  },
  {
    "text": "constructor which will returns the value so we can eliminate this as well",
    "start": "843120",
    "end": "848639"
  },
  {
    "text": "and the same for the set value we don't really need it we can just uh eliminate it as well i",
    "start": "848639",
    "end": "854480"
  },
  {
    "text": "didn't eliminate the p1 value because currently there there is no technical",
    "start": "854480",
    "end": "859600"
  },
  {
    "text": "limitation to remove the p1 value but but it does it just doesn't support it but",
    "start": "859600",
    "end": "864639"
  },
  {
    "text": "we can assume that it will be at some day or somebody will push a patch",
    "start": "864639",
    "end": "870959"
  },
  {
    "text": "yeah so the same we can do for p1 set value we can remove it and just assign it true so if if we now",
    "start": "870959",
    "end": "877839"
  },
  {
    "text": "compare what we got in uh qml and c it's almost the same the difference only",
    "start": "877839",
    "end": "885519"
  },
  {
    "text": "is that in c plus plus we we capture everything in lambda by reference",
    "start": "885519",
    "end": "891760"
  },
  {
    "text": "and in qml we don't do anything it's automatically captured by q male engine",
    "start": "891760",
    "end": "897279"
  },
  {
    "text": "there is advantages and disadvantages of that syntax in qml so first of all for example if the item",
    "start": "897279",
    "end": "903600"
  },
  {
    "text": "doesn't contain p1 then then the cumulation traitor will find in the parent and the parent and the parent",
    "start": "903600",
    "end": "909600"
  },
  {
    "text": "of that item and go up until it will not find anything in c plus plus it's more",
    "start": "909600",
    "end": "916720"
  },
  {
    "text": "straightforward you it's it's c plus plus you set what you want to capture then you get it inside your lambda",
    "start": "916720",
    "end": "924240"
  },
  {
    "text": "so it's kind of i think easier in c plus plus but uh let's take a look a bit deeper in the",
    "start": "924839",
    "end": "930720"
  },
  {
    "text": "simplest plus example and see how the binding relation works in that case because that's a bit different that we",
    "start": "930720",
    "end": "937040"
  },
  {
    "text": "have in qml so i took the same example as we had before i just added a bit more",
    "start": "937040",
    "end": "943199"
  },
  {
    "text": "debug information and let's run the program and see what we will get",
    "start": "943199",
    "end": "948560"
  },
  {
    "text": "in the qml the first line as our output we get was evaluation binary expression",
    "start": "948560",
    "end": "954880"
  },
  {
    "text": "in the c plus bus we actually don't get anything we get the p1 false so we created the binding but the",
    "start": "954880",
    "end": "961600"
  },
  {
    "text": "binding was not evolated when we call p2 value we actually",
    "start": "961600",
    "end": "967680"
  },
  {
    "text": "see that there is evaluated by the expression and then we get the value",
    "start": "967680",
    "end": "974079"
  },
  {
    "text": "so it's kind of a bit it looks like the evaluation of the property bindings in the c plus plus is",
    "start": "974079",
    "end": "980240"
  },
  {
    "text": "kind of lazy way we don't do it unless we want it so let's just check our theory that when",
    "start": "980240",
    "end": "986399"
  },
  {
    "text": "we change the when we say p1 said fellow true in qml we also",
    "start": "986399",
    "end": "991519"
  },
  {
    "text": "saw that the validation binding expression was immediately printed and that's okay that case in c plus plus",
    "start": "991519",
    "end": "997519"
  },
  {
    "text": "it doesn't happen again so p one true and only when we",
    "start": "997519",
    "end": "1002720"
  },
  {
    "text": "we call p two value then we will evaluate the binding expression and then",
    "start": "1002720",
    "end": "1007920"
  },
  {
    "text": "we will print the true that's a one of the main difference between the",
    "start": "1007920",
    "end": "1014079"
  },
  {
    "text": "c plus plus version and qml version in qml version as i said when one property triggers his change it",
    "start": "1014079",
    "end": "1021680"
  },
  {
    "text": "can end up to trigger other millions properties depends on your project and how you wrote it and c plus plus actually nothing is",
    "start": "1021680",
    "end": "1028480"
  },
  {
    "text": "going to happen unless somebody wants to read that property that's kind of lazy evaluation called in",
    "start": "1028480",
    "end": "1035120"
  },
  {
    "text": "simplest way yeah uh let's take a look that example a bit",
    "start": "1035120",
    "end": "1040240"
  },
  {
    "text": "deeper and go step by step and actually understand what's going on here because it still looks like kind of",
    "start": "1040240",
    "end": "1046720"
  },
  {
    "text": "magic how the p1 and p2 knows about each other what is that connection we don't see anything in a source",
    "start": "1046720",
    "end": "1052000"
  },
  {
    "text": "code so let's take a look what the qt make",
    "start": "1052000",
    "end": "1057200"
  },
  {
    "text": "property binding does it's constructed property binding from a lambda it's assigned it to the property",
    "start": "1057200",
    "end": "1065280"
  },
  {
    "text": "and it's also when we first time create the binary and assign it to the property it's marked as dirty because nobody",
    "start": "1065280",
    "end": "1070880"
  },
  {
    "text": "never evaluated binding we don't know what's the result of that binding so but",
    "start": "1070880",
    "end": "1076080"
  },
  {
    "text": "we don't call the lambda to check it because we don't need it nobody didn't ask it for that so the next step",
    "start": "1076080",
    "end": "1082640"
  },
  {
    "text": "when we copy to value the property inside check is there a property binding is that",
    "start": "1082640",
    "end": "1088559"
  },
  {
    "text": "there is there is a property binding as it's dirty then we actually need to",
    "start": "1088559",
    "end": "1094640"
  },
  {
    "text": "the the property um binding so in that case inside the p2",
    "start": "1094640",
    "end": "1101600"
  },
  {
    "text": "value uh the the p2 kind of marks that i started in the",
    "start": "1101600",
    "end": "1108720"
  },
  {
    "text": "global variable it marks well i started the evaluation of of of my property binding and then we call",
    "start": "1108720",
    "end": "1115760"
  },
  {
    "text": "the lambda when we get to the lambda and when we call p-value we know that there is a",
    "start": "1115760",
    "end": "1121039"
  },
  {
    "text": "global state somewhere said well p1 or p2 is going to let his binding",
    "start": "1121039",
    "end": "1126960"
  },
  {
    "text": "that's why how p1 actually can check if somebody started evolution process if",
    "start": "1126960",
    "end": "1132880"
  },
  {
    "text": "that then probably either i i will understand that",
    "start": "1132880",
    "end": "1138480"
  },
  {
    "text": "this property in the global variable is actually i'm going to be the source for that",
    "start": "1138480",
    "end": "1144160"
  },
  {
    "text": "property so the the the p2 and stores that",
    "start": "1144160",
    "end": "1149200"
  },
  {
    "text": "it depends on p1 and the p1 store that it depends on p2 opposite yeah yeah when we call the pset",
    "start": "1149200",
    "end": "1156880"
  },
  {
    "text": "value true we update the value in p1 and we check if somebody depends on p1",
    "start": "1156880",
    "end": "1161919"
  },
  {
    "text": "and we know that it depends on p2 it requires to p2 so then we",
    "start": "1161919",
    "end": "1170640"
  },
  {
    "text": "mark that binding as dirty and the next time when p2 is going to evaluate the binding",
    "start": "1170640",
    "end": "1177360"
  },
  {
    "text": "next time when we call the p2 value then um it's going to check if the property",
    "start": "1177520",
    "end": "1182720"
  },
  {
    "text": "binding is dirty and then repeat the step as previous one evaluate the bindings mark that it started the process and everything",
    "start": "1182720",
    "end": "1189200"
  },
  {
    "text": "so that's how it works if we expand this p-value function just in it's in a bit of the i would say",
    "start": "1189200",
    "end": "1196960"
  },
  {
    "text": "save the code but it's kind of a real c plus plus i quite kind of simplified the version what is",
    "start": "1196960",
    "end": "1202159"
  },
  {
    "text": "in the queue but it's just easier to understand so if you take a look at the p2 value what it does wherever we call",
    "start": "1202159",
    "end": "1210320"
  },
  {
    "text": "the p-value it's it checks is there is a binding is the binding is dirty clear observers so we want to destroy",
    "start": "1210320",
    "end": "1217600"
  },
  {
    "text": "because we don't know what what we are going to depend on next time when we call evaluation",
    "start": "1217600",
    "end": "1223440"
  },
  {
    "text": "so we mark in the global static thread local global variable that's well current binding",
    "start": "1223440",
    "end": "1231679"
  },
  {
    "text": "is that one we have we started correlation of p2 then we call the lambda when we call",
    "start": "1231679",
    "end": "1238159"
  },
  {
    "text": "the lambda and we call the p1 value the same we check is there is a binding is thereby dirty",
    "start": "1238159",
    "end": "1244640"
  },
  {
    "text": "in our case the p1 doesn't depends on anything so it's actually go to the next step you check is there a current binding",
    "start": "1244640",
    "end": "1250559"
  },
  {
    "text": "well yes it is then we create an observer we mark that this observer observe the property",
    "start": "1250559",
    "end": "1257200"
  },
  {
    "text": "this and that terms it would be p2 or p1 and that's how p2 knows that it depends",
    "start": "1257200",
    "end": "1264640"
  },
  {
    "text": "on p1 at the same time we save that observer inside the p1 that pll knows that it's",
    "start": "1264640",
    "end": "1270640"
  },
  {
    "text": "actually it's a source for the p 2 variable",
    "start": "1270640",
    "end": "1276400"
  },
  {
    "text": "so that's basically how it works there is no any magic it's a pure c plus plus there is no no no no",
    "start": "1276400",
    "end": "1282000"
  },
  {
    "text": "involvement of metal object compiler or any other cute macro stuff so it's a",
    "start": "1282000",
    "end": "1288080"
  },
  {
    "text": "it's a valid c plus plus c plus 11 actually uh code so",
    "start": "1288080",
    "end": "1295600"
  },
  {
    "text": "just the question is anybody understand how it works or it's hard to understand how it works",
    "start": "1295600",
    "end": "1301440"
  },
  {
    "text": "because if if you didn't understand i can try to explain again that that part",
    "start": "1301440",
    "end": "1307280"
  },
  {
    "text": "you feel free and mute and ask if it's hard to type in the in the room",
    "start": "1308400",
    "end": "1315440"
  },
  {
    "text": "so i would i would i would accept it as everybody understand how it works so as i said that's basically",
    "start": "1317360",
    "end": "1325120"
  },
  {
    "text": "very very simple way of implementing this i'm not sure why it wasn't implemented",
    "start": "1325120",
    "end": "1330320"
  },
  {
    "text": "many years before maybe because we didn't have a thread local in the standard but",
    "start": "1330320",
    "end": "1336960"
  },
  {
    "text": "but it was from c plus 11. so anyway it's a cool feature actually so let's take a look how we implement",
    "start": "1336960",
    "end": "1344000"
  },
  {
    "text": "the partial binding evaluation in the c plus plus",
    "start": "1344000",
    "end": "1348880"
  },
  {
    "start": "1348000",
    "end": "1348000"
  },
  {
    "text": "i took the same example just rewrote it from the qml to the c plus plus so again",
    "start": "1349039",
    "end": "1355039"
  },
  {
    "text": "we have a four properties two of them name and location",
    "start": "1355039",
    "end": "1361280"
  },
  {
    "text": "second or third one is a remote and then we have an event which depends on all of them at the same and again there is the same",
    "start": "1361280",
    "end": "1367440"
  },
  {
    "text": "condition if the remote is true then we use on the name and idle and",
    "start": "1367440",
    "end": "1374960"
  },
  {
    "text": "line if it's false then we use the name and location so let's just go the same way as step by",
    "start": "1374960",
    "end": "1382080"
  },
  {
    "text": "step and see what's actually going on so the same qt make property bindings create the property of bindings",
    "start": "1382080",
    "end": "1388000"
  },
  {
    "text": "from the binding expression at case lambda when we call first time event",
    "start": "1388000",
    "end": "1394240"
  },
  {
    "text": "event value would trigger first evaluation of the binding expression because the binding was marked as dirty",
    "start": "1394240",
    "end": "1400799"
  },
  {
    "text": "the next step when we when we try to read the lambda we check",
    "start": "1400799",
    "end": "1408240"
  },
  {
    "text": "if remote is false then they haven't even depends on remote",
    "start": "1408240",
    "end": "1413919"
  },
  {
    "text": "name and location like in terms of property bindings it depends on three properties",
    "start": "1413919",
    "end": "1419120"
  },
  {
    "text": "and we call the uh not dot value but it's the residential operator for",
    "start": "1419120",
    "end": "1425679"
  },
  {
    "text": "convert them from the property to wherever they are so in that case we know that",
    "start": "1425679",
    "end": "1434159"
  },
  {
    "text": "evan proper depends only on three properties right now because well access only three properties",
    "start": "1434159",
    "end": "1441520"
  },
  {
    "text": "when we say remote true and we know that the remote property knows that it",
    "start": "1441520",
    "end": "1446960"
  },
  {
    "text": "it is a source for the event property we we mark the binding as dirty one",
    "start": "1446960",
    "end": "1453919"
  },
  {
    "text": "the next time when we call event value we tried to eliminate the lambda and",
    "start": "1453919",
    "end": "1460880"
  },
  {
    "text": "before we started to relate them there as we saw in the previous source code we kind of clear the observers",
    "start": "1460880",
    "end": "1466080"
  },
  {
    "text": "so we don't really know what is who is and what depends on in that case so we started from",
    "start": "1466080",
    "end": "1472880"
  },
  {
    "text": "beginning from the scratch in that case so when we call lambda again and remote is",
    "start": "1472880",
    "end": "1479440"
  },
  {
    "text": "true then we we construct the string only by using the name that means that location was never",
    "start": "1479440",
    "end": "1486159"
  },
  {
    "text": "called and location never registered himself as an observer so",
    "start": "1486159",
    "end": "1493360"
  },
  {
    "text": "that means if we change the location it will not mark the the binding as dirty because location actually doesn't know that it's involved",
    "start": "1493360",
    "end": "1500240"
  },
  {
    "text": "in something and the next time when we print the binding is not dirty we just",
    "start": "1500240",
    "end": "1505919"
  },
  {
    "text": "read the cache value wherever it was in our case it's in the seat account online",
    "start": "1505919",
    "end": "1511760"
  },
  {
    "text": "so um the next time if we change the name for example we know that the name knows that it is a",
    "start": "1512159",
    "end": "1519120"
  },
  {
    "text": "source for the event and when we read the",
    "start": "1519120",
    "end": "1525360"
  },
  {
    "text": "when we try to read the value again then we see that the binding is dirty and then we try to revelate the binding",
    "start": "1525760",
    "end": "1531039"
  },
  {
    "text": "expression so kind of very simple way to do it by the way maybe some of you",
    "start": "1531039",
    "end": "1539120"
  },
  {
    "text": "guessed how does a partial binding evaluation and the binary relation works in the qml actually it works the same way they",
    "start": "1539120",
    "end": "1546159"
  },
  {
    "text": "don't as far as i know they don't check error introspect the ice t3 of the javascript or anything",
    "start": "1546159",
    "end": "1553600"
  },
  {
    "text": "they just do basically the same way",
    "start": "1553600",
    "end": "1557840"
  },
  {
    "text": "so let's go next let's see how the cube property provides the signals in terms as we had an",
    "start": "1559360",
    "end": "1567520"
  },
  {
    "start": "1560000",
    "end": "1560000"
  },
  {
    "text": "ql so basically you're going to have uh two functions one is there on value",
    "start": "1567520",
    "end": "1574559"
  },
  {
    "text": "changed this the callback which you posted on value changed will be called wherever the value changed",
    "start": "1574559",
    "end": "1580559"
  },
  {
    "text": "and the subscribe is kind of the same but only that you call the the lambda when we just pass it so it's",
    "start": "1580559",
    "end": "1586960"
  },
  {
    "text": "immediately called the lambda which you passed so we feel like you want to subscribe and you want to do something with the current value",
    "start": "1586960",
    "end": "1593520"
  },
  {
    "text": "if we compare to the qml property signal syntax well it's kind of the same the",
    "start": "1593520",
    "end": "1599360"
  },
  {
    "start": "1594000",
    "end": "1594000"
  },
  {
    "text": "one thing is there that in qml if you want to subscribe multiple times on the",
    "start": "1599360",
    "end": "1604799"
  },
  {
    "text": "same signal handler of signal you need to use the special type qml connections",
    "start": "1604799",
    "end": "1610320"
  },
  {
    "text": "in c plus password you are allowed to subscribe as many times as you want the only one",
    "start": "1610320",
    "end": "1616720"
  },
  {
    "text": "difference in that case that you see there is after signal handler after signal handler 2",
    "start": "1616720",
    "end": "1621919"
  },
  {
    "text": "subscribe handler so these objects they're like a guards they keep the lifetime of the",
    "start": "1621919",
    "end": "1627520"
  },
  {
    "text": "wherever you subscribe or you want to call your callback when this object dies you will never",
    "start": "1627520",
    "end": "1633120"
  },
  {
    "text": "call your callback lambda again so that's a bit different between the",
    "start": "1633120",
    "end": "1639520"
  },
  {
    "text": "qml and c plus plus also important note that it's in the current implementation of",
    "start": "1639520",
    "end": "1646799"
  },
  {
    "text": "properties you're not able to pass or use the same syntax as you do in a signal slots you can you",
    "start": "1646799",
    "end": "1653760"
  },
  {
    "text": "can basically say on value p1 on value change i want to subscribe on",
    "start": "1653760",
    "end": "1658960"
  },
  {
    "text": "that object and call that slot that's currently is not allowed it's not like there is some technical",
    "start": "1658960",
    "end": "1664480"
  },
  {
    "text": "limitation it just have not been done so probably i think somebody will implement this",
    "start": "1664480",
    "end": "1672399"
  },
  {
    "text": "yeah so if we take a look how we change the property binding in run time",
    "start": "1673360",
    "end": "1680080"
  },
  {
    "start": "1674000",
    "end": "1674000"
  },
  {
    "text": "in the c plus plus there is a few functions you you can take a binding",
    "start": "1680080",
    "end": "1685120"
  },
  {
    "text": "which will just uh disassociate the binding expression from the property",
    "start": "1685120",
    "end": "1691440"
  },
  {
    "text": "the binding is still kind of valid and if we mark the we've changed the location to say oslo",
    "start": "1691440",
    "end": "1696799"
  },
  {
    "text": "that the binding will be marked as the dirty one but it just doesn't trigger the revelation on anything because there is nobody there",
    "start": "1696799",
    "end": "1703440"
  },
  {
    "text": "is no one property who use that property binding then we can always assign it back by calling set binding",
    "start": "1703440",
    "end": "1709679"
  },
  {
    "text": "to set a new binding and if we explicitly say that set the value for",
    "start": "1709679",
    "end": "1714799"
  },
  {
    "text": "the event then the binding destroys it's kind of similar what we had in",
    "start": "1714799",
    "end": "1720559"
  },
  {
    "text": "we have in qml so if we just compare the examples we'll see that syntax is pretty similar",
    "start": "1720559",
    "end": "1728960"
  },
  {
    "text": "the same unless that in qml actually if you want to create a new binding",
    "start": "1728960",
    "end": "1734480"
  },
  {
    "text": "or like restore the previous one you always need to create a new one there is no way how to keep the binding in",
    "start": "1734480",
    "end": "1741520"
  },
  {
    "text": "in the qml so that's that's the difference",
    "start": "1741520",
    "end": "1747200"
  },
  {
    "start": "1749000",
    "end": "1749000"
  },
  {
    "text": "if we look in the property analysis so it's pretty similar as we",
    "start": "1749840",
    "end": "1757600"
  },
  {
    "text": "have in qml and cuba have a special keyword alice in the c plus plus we have a special",
    "start": "1757600",
    "end": "1764480"
  },
  {
    "text": "property alias class basically let's just take the reference pointer",
    "start": "1764480",
    "end": "1770080"
  },
  {
    "text": "to the property so in that particular example as we have in in the qml we have a my text",
    "start": "1770080",
    "end": "1778159"
  },
  {
    "text": "which insect encapsulate the text but to provide them his property on to the public api so",
    "start": "1778159",
    "end": "1785360"
  },
  {
    "text": "then you're able to subscribe or you can change the binding or you set the value or wherever you want yeah",
    "start": "1785360",
    "end": "1792880"
  },
  {
    "text": "so if we take a look in the",
    "start": "1792880",
    "end": "1797120"
  },
  {
    "start": "1795000",
    "end": "1795000"
  },
  {
    "text": "summary of the features of the pq property then we will see that it still keep the",
    "start": "1797919",
    "end": "1803279"
  },
  {
    "text": "simple syntax it support partial elevation it's support analysis it provides signals",
    "start": "1803279",
    "end": "1808960"
  },
  {
    "text": "which is not kind of signals but just the callbacks but still fine it supports change property binary run",
    "start": "1808960",
    "end": "1814960"
  },
  {
    "text": "time the extra feature is lazy related to compared to the qml",
    "start": "1814960",
    "end": "1820960"
  },
  {
    "text": "and uh there are a few also aspects that it doesn't depend on cure and loop it doesn't depend on q core",
    "start": "1820960",
    "end": "1826960"
  },
  {
    "text": "gui or q application so you basically you can use it in your project even though you don't use the qt",
    "start": "1826960",
    "end": "1834000"
  },
  {
    "text": "itself it's it will perfectly file work with your custom types you didn't really need to do anything",
    "start": "1834000",
    "end": "1842559"
  },
  {
    "text": "what it doesn't do is doesn't provide the simple integration with signal slots so there is no way for now quite i'm",
    "start": "1842720",
    "end": "1850880"
  },
  {
    "text": "sure it will it's it only supports only single threats so you're not allowed to",
    "start": "1850880",
    "end": "1857039"
  },
  {
    "text": "make a binding from the properties which is leaving separate threats",
    "start": "1857039",
    "end": "1862960"
  },
  {
    "text": "i i don't know was it made like this intentional or is it just because nobody didn't think",
    "start": "1863200",
    "end": "1870240"
  },
  {
    "text": "about it but i know that the c plus plus fully library open source library from facebook",
    "start": "1870240",
    "end": "1875919"
  },
  {
    "text": "they implemented the same thing but they allowed to use the properties from the different",
    "start": "1875919",
    "end": "1883120"
  },
  {
    "text": "threads in one property bindings so should be fine i don't think that cute",
    "start": "1883120",
    "end": "1888720"
  },
  {
    "text": "is going to do that but maybe they will",
    "start": "1888720",
    "end": "1893840"
  },
  {
    "text": "okay the next step is what i propose is take a look what's actually happened what's going to",
    "start": "1894240",
    "end": "1900240"
  },
  {
    "text": "happen with the queue itself because that's kind of a new api and we curious how it's going to be integrated inside",
    "start": "1900240",
    "end": "1906559"
  },
  {
    "text": "the cube because we as the developers who use the queue then we kind of might be affected",
    "start": "1906559",
    "end": "1912640"
  },
  {
    "text": "because the cute sixes is not going to keep the promise of don't break the api or api capability of switching from the",
    "start": "1912640",
    "end": "1919440"
  },
  {
    "text": "q5 so the api might change but it doesn't have to it might",
    "start": "1919440",
    "end": "1927840"
  },
  {
    "text": "so the current status in the dev branch contains two approaches one of them is",
    "start": "1927840",
    "end": "1934000"
  },
  {
    "start": "1928000",
    "end": "1928000"
  },
  {
    "text": "it provided in uq private property macro it's already merged in dev and the all",
    "start": "1934000",
    "end": "1941120"
  },
  {
    "text": "changes in queue kind of done it's not change any other current classes but you can use it if",
    "start": "1941120",
    "end": "1948399"
  },
  {
    "text": "you want and there is a new way how to do that it was proposed kind of recently by lars it's a new",
    "start": "1948399",
    "end": "1956880"
  },
  {
    "text": "keyword to the q property statement it's called bindable and we will take a look both of them and compare what one is better",
    "start": "1956880",
    "end": "1963360"
  },
  {
    "text": "what ends worse and how does it work in general because from as i said from developer's",
    "start": "1963360",
    "end": "1969760"
  },
  {
    "text": "point of view i would like if the q6 will kind of keep the abi and api capability that i don't need to change",
    "start": "1969760",
    "end": "1975200"
  },
  {
    "text": "all my source code just to to get that feature yeah so let's take a look from the first",
    "start": "1975200",
    "end": "1980559"
  },
  {
    "text": "one option one so let's take an example of the simple",
    "start": "1980559",
    "end": "1986159"
  },
  {
    "text": "class in q5 let's take a look at the queue object key object",
    "start": "1986159",
    "end": "1991519"
  },
  {
    "text": "has a cube property the statement which defined there is one property object name",
    "start": "1991519",
    "end": "1998240"
  },
  {
    "text": "let's provide two functions to read and write object name and set object name and it's also has a signal object name",
    "start": "1998240",
    "end": "2006159"
  },
  {
    "text": "changed so pretty simple example we already get used to the cute i would",
    "start": "2006159",
    "end": "2014080"
  },
  {
    "text": "say magic with the macros and it's used by met object compiler to generate meta",
    "start": "2014080",
    "end": "2019519"
  },
  {
    "text": "type information and the that's basically it so let's take a look what's going to",
    "start": "2019519",
    "end": "2025120"
  },
  {
    "text": "what kind can be happened in cute sick it's not decided yet but they're they're still ongoing",
    "start": "2025120",
    "end": "2030320"
  },
  {
    "text": "conversation but let's take a look so in q6",
    "start": "2030320",
    "end": "2036399"
  },
  {
    "text": "on the right side and q5 on the left side we can see there is slightly difference",
    "start": "2036399",
    "end": "2041919"
  },
  {
    "text": "between what we had and what is going to have or can have yeah i just highlight the changes we see",
    "start": "2041919",
    "end": "2048638"
  },
  {
    "text": "that in the private object we change the q string to bq property and",
    "start": "2048639",
    "end": "2054320"
  },
  {
    "text": "in the public class we see that the q property is gone there is a q private property this kind",
    "start": "2054320",
    "end": "2061200"
  },
  {
    "text": "of unreally understandable syntax what do we pass there nobody can guess unless you go and see",
    "start": "2061200",
    "end": "2067599"
  },
  {
    "text": "we also don't see any more object name and set object name functions we don't have a signal as well",
    "start": "2067599",
    "end": "2076000"
  },
  {
    "text": "and there is some kind of weird three microscope properties begin property implementation",
    "start": "2076000",
    "end": "2081679"
  },
  {
    "text": "and end so let's take a look what they do by expanding one macro by",
    "start": "2081679",
    "end": "2086960"
  },
  {
    "text": "by one so yeah before we expand the macro just a",
    "start": "2086960",
    "end": "2093679"
  },
  {
    "text": "few explanations the q pro q private pro q property macro first of all it's a",
    "start": "2093679",
    "end": "2100800"
  },
  {
    "text": "mock talking when the meta object compiler reads the header he will find that he will understand well",
    "start": "2100800",
    "end": "2107359"
  },
  {
    "text": "that is my property i need to register that in the meta type information",
    "start": "2107359",
    "end": "2112480"
  },
  {
    "text": "the second purpose is that provide the wrapper for queue property or hide the implementation of the queue",
    "start": "2112480",
    "end": "2118480"
  },
  {
    "text": "property from the the end user to keep the api we will talk a bit about that a bit later",
    "start": "2118480",
    "end": "2125040"
  },
  {
    "text": "but in general let's expand the q private property and see what what does it do so",
    "start": "2125040",
    "end": "2132640"
  },
  {
    "start": "2130000",
    "end": "2130000"
  },
  {
    "text": "if we expand the queue private property we will see there is a structure this kind of weird",
    "start": "2132640",
    "end": "2138960"
  },
  {
    "text": "naming cute underscore queue underscore property underscore api underscore object",
    "start": "2138960",
    "end": "2145520"
  },
  {
    "text": "that structure actually replicates the queue property api",
    "start": "2145520",
    "end": "2150960"
  },
  {
    "text": "that structure doesn't contains any members it's basically the size of that",
    "start": "2151119",
    "end": "2157119"
  },
  {
    "text": "structure is should be zero but it will be only one because on c plus plus you cannot have a structure",
    "start": "2157119",
    "end": "2163440"
  },
  {
    "text": "which is zero at least one so and also we see that there is kind of",
    "start": "2163440",
    "end": "2169280"
  },
  {
    "text": "set object name so it's also provide that by that macro",
    "start": "2169280",
    "end": "2176240"
  },
  {
    "text": "so let's expand the the three last macros and see what does it do",
    "start": "2176400",
    "end": "2183280"
  },
  {
    "text": "so if we expand the macro we will see that actually it's a union we see it a declare",
    "start": "2183280",
    "end": "2191200"
  },
  {
    "text": "we see a declaration of our object name and is that structure some of you might",
    "start": "2191200",
    "end": "2197280"
  },
  {
    "text": "ask why is the union and why it's like that the answer is very simple the cube",
    "start": "2197280",
    "end": "2203839"
  },
  {
    "text": "doesn't want to they don't want to grow in size of their objects or their classes",
    "start": "2203839",
    "end": "2210720"
  },
  {
    "text": "so basically since the cute property api object name structures is size of one",
    "start": "2210720",
    "end": "2217040"
  },
  {
    "text": "and the rest of them all other properties would be also size of one and well they can share the same kind of",
    "start": "2217040",
    "end": "2225520"
  },
  {
    "text": "other space since they don't contain any members and everything so just they don't want that every time",
    "start": "2225520",
    "end": "2231119"
  },
  {
    "text": "when you create a new property you will get extra eight bytes for the pointer to that property",
    "start": "2231119",
    "end": "2238960"
  },
  {
    "text": "yeah but as we see that this uh um",
    "start": "2238960",
    "end": "2246960"
  },
  {
    "text": "this macro q private property it's gives us a structure but it doesn't",
    "start": "2246960",
    "end": "2252800"
  },
  {
    "text": "give it's only declare the function inside it doesn't provide the definition of the function so if we go inside and take a look",
    "start": "2252800",
    "end": "2261280"
  },
  {
    "text": "what's actually mock generate for us that is his job to provide some extra",
    "start": "2261280",
    "end": "2267359"
  },
  {
    "text": "helper functions for us we will see what's going on so that's how",
    "start": "2267359",
    "end": "2275680"
  },
  {
    "start": "2272000",
    "end": "2272000"
  },
  {
    "text": "mock object.cpp could look like so it will generate the set object name",
    "start": "2275680",
    "end": "2281119"
  },
  {
    "text": "for us the body of that function it's very simple just get the",
    "start": "2281119",
    "end": "2286880"
  },
  {
    "text": "pointer to the private class take the property and say set value",
    "start": "2286880",
    "end": "2292000"
  },
  {
    "text": "pretty fine if it then we also see that it generates the",
    "start": "2292000",
    "end": "2297119"
  },
  {
    "text": "api or the body of the body functions for the that weird structure i would say",
    "start": "2297119",
    "end": "2305040"
  },
  {
    "text": "so if you take a look inside what's actually mock generates for that q property api object name structure",
    "start": "2305040",
    "end": "2312079"
  },
  {
    "text": "will find a quite surprisingly interesting thing so let's take a look at one of them",
    "start": "2312079",
    "end": "2319680"
  },
  {
    "text": "so the object name function",
    "start": "2319680",
    "end": "2327838"
  },
  {
    "text": "yeah so there are just three lines first of them is trying to calculate",
    "start": "2333920",
    "end": "2339680"
  },
  {
    "text": "offset from the object name in the it's it's trying to create the",
    "start": "2339680",
    "end": "2346160"
  },
  {
    "text": "offset of that of the property which we define in the union",
    "start": "2346160",
    "end": "2352320"
  },
  {
    "text": "the the to the key object itself",
    "start": "2352320",
    "end": "2357520"
  },
  {
    "text": "by doing and the second line is kind of try to calculate that this pointer of the queue object itself",
    "start": "2358240",
    "end": "2365680"
  },
  {
    "text": "not that this point of that structure but this the point of the queue object so basically since the",
    "start": "2365680",
    "end": "2371920"
  },
  {
    "text": "q property api object name structure doesn't have any doesn't contain any members it doesn't actually know where's the queue property",
    "start": "2371920",
    "end": "2378720"
  },
  {
    "text": "or the deep private d pointer of the queue object exists so it basically calculates it on",
    "start": "2378720",
    "end": "2386079"
  },
  {
    "text": "the in runtime all the time actually yeah it's kind of",
    "start": "2386079",
    "end": "2392240"
  },
  {
    "text": "tricky that it kind of works there are just few problems uh first of all",
    "start": "2392240",
    "end": "2400480"
  },
  {
    "text": "the static cost of queue timer to the null pointer like now pointer static has to the queue timer and then they get the",
    "start": "2400480",
    "end": "2407280"
  },
  {
    "text": "others of the object name is undefined behavior but that works in the qt qml",
    "start": "2407280",
    "end": "2415119"
  },
  {
    "text": "it's in production since release 2010 there is a class called static cast",
    "start": "2415119",
    "end": "2422319"
  },
  {
    "text": "selector something like that and it's do exactly the same it works so the cute claims that",
    "start": "2422319",
    "end": "2429119"
  },
  {
    "text": "well on all modern platforms that works so",
    "start": "2429119",
    "end": "2436079"
  },
  {
    "text": "we can trust them we can don't trust them that's how it is",
    "start": "2436079",
    "end": "2441200"
  },
  {
    "text": "the solution was proposed in the mail is to replace this calculation by using offset macro",
    "start": "2441359",
    "end": "2447200"
  },
  {
    "text": "which is standardized and provided by the standard library but offset though doesn't support",
    "start": "2447200",
    "end": "2454400"
  },
  {
    "text": "non-standard layout so in that case when you try to use offset in that particular case it will it will you will get a compiler error",
    "start": "2454400",
    "end": "2461040"
  },
  {
    "text": "you of course you're able to ignore it you can disable that error but still that's that's what you will get",
    "start": "2461040",
    "end": "2468480"
  },
  {
    "text": "and as i said even though if you use dev set off and it's not supported it still works okay on all",
    "start": "2468880",
    "end": "2476960"
  },
  {
    "text": "the modern compilers you don't need to do anything else it's just work just disable the warning and it will",
    "start": "2476960",
    "end": "2482079"
  },
  {
    "text": "calculate but standard doesn't guarantee anything it's kind of undefined behavior as well yeah",
    "start": "2482079",
    "end": "2490000"
  },
  {
    "text": "so if we take a look in the second yeah so since we calculate the",
    "start": "2490000",
    "end": "2497359"
  },
  {
    "text": "property member offset by using undefined the hero the calculator now this this pointer is also kind of undefined we you",
    "start": "2497359",
    "end": "2504720"
  },
  {
    "text": "can you cannot rely that it's it's correct so",
    "start": "2504720",
    "end": "2509920"
  },
  {
    "text": "but as i said it will it works fine all modern compilers so you shouldn't worry",
    "start": "2509920",
    "end": "2515440"
  },
  {
    "text": "about that and it's 10 years in production it's that's what we use nowadays yeah",
    "start": "2515440",
    "end": "2524800"
  },
  {
    "text": "so let's compare the what the changes of the api of the queue object will become when we will switch to that",
    "start": "2524800",
    "end": "2530720"
  },
  {
    "text": "approach for example so on the q5 if we create the object we had the three functions",
    "start": "2530720",
    "end": "2537200"
  },
  {
    "text": "we can get the object name we can set the new object name and we could call it signal object name changed or when you set the",
    "start": "2537200",
    "end": "2545119"
  },
  {
    "text": "when you call set object name that signal will be immediately sent when you the the name is new",
    "start": "2545119",
    "end": "2552000"
  },
  {
    "text": "on the qt6 sites q6 side you you actually will get the object name uh",
    "start": "2552000",
    "end": "2559760"
  },
  {
    "text": "you can get the set object name then you can object dot object name set buying when you provide",
    "start": "2559760",
    "end": "2565200"
  },
  {
    "text": "the binding you can subscribe on the value you can just just make a subscription you can set a new value",
    "start": "2565200",
    "end": "2572400"
  },
  {
    "text": "and optionally can be supported the signal and object name i didn't show it in the",
    "start": "2572400",
    "end": "2578240"
  },
  {
    "text": "previous example because when i tried to implement the support of the signal that the example grows it becomes very",
    "start": "2578240",
    "end": "2586400"
  },
  {
    "text": "very ugly to see in a slide so just just believe me that's possible to do but the source code",
    "start": "2586400",
    "end": "2592000"
  },
  {
    "text": "doesn't looks very nice let's go to the second option what we",
    "start": "2592000",
    "end": "2598160"
  },
  {
    "text": "can do with another proposal which was made recently it's still under discussion",
    "start": "2598160",
    "end": "2604800"
  },
  {
    "text": "but again we go back to the key object in q5 so we have in private class we have a q",
    "start": "2604960",
    "end": "2612160"
  },
  {
    "text": "string object name the q property macro and we have two functions object name",
    "start": "2612160",
    "end": "2617359"
  },
  {
    "text": "and set object name and we have object name changed as a signal so in q06",
    "start": "2617359",
    "end": "2624480"
  },
  {
    "start": "2622000",
    "end": "2622000"
  },
  {
    "text": "what we are going to have is the second approach is that basically the changes is happening only",
    "start": "2624480",
    "end": "2630960"
  },
  {
    "text": "in the almost only in the private class you need to use q object compa property",
    "start": "2630960",
    "end": "2637599"
  },
  {
    "text": "macro which will do some magic for you",
    "start": "2637599",
    "end": "2642720"
  },
  {
    "text": "and then inside the public class you just need to use bindable keyword to say",
    "start": "2642720",
    "end": "2648319"
  },
  {
    "text": "that oh there you actually your properties support bindings and you need to say which",
    "start": "2648319",
    "end": "2653520"
  },
  {
    "text": "function gives you that binding i'll like give you support so you see there is a",
    "start": "2653520",
    "end": "2659119"
  },
  {
    "text": "new function called bindable object name that's kind of a syntax which is uh",
    "start": "2659119",
    "end": "2666560"
  },
  {
    "text": "cute is is kind of enforcing you wherever you want to create a bindable function then you need to call bindable",
    "start": "2667040",
    "end": "2672240"
  },
  {
    "text": "and then the name so so what do we get with the second",
    "start": "2672240",
    "end": "2679520"
  },
  {
    "text": "approach we have a new keyword bindable for the q property we have a new api function bindable",
    "start": "2679520",
    "end": "2685280"
  },
  {
    "text": "object name in that case we don't get the q property but we get the cube bindable because",
    "start": "2685280",
    "end": "2690319"
  },
  {
    "text": "this is the same purpose the qt wants to keep promise of the abi and api capability so they just return",
    "start": "2690319",
    "end": "2697680"
  },
  {
    "text": "your eq bindable which is basically repeats all api of the queue property but just high that you actually",
    "start": "2697680",
    "end": "2703680"
  },
  {
    "text": "get the cube property that they they can change it later some internals or the queue property",
    "start": "2703680",
    "end": "2709119"
  },
  {
    "text": "or something yeah you will get three different macros it's called q object compact property",
    "start": "2709119",
    "end": "2715040"
  },
  {
    "text": "it's for capability with the old one code if you use that then the source code works the same way as it used to be you",
    "start": "2715040",
    "end": "2722079"
  },
  {
    "text": "don't really need to change anything unless adding a new function then the second",
    "start": "2722079",
    "end": "2728319"
  },
  {
    "text": "macro is a computed property it's for the read only properties it will not store any cash value inside",
    "start": "2728319",
    "end": "2735359"
  },
  {
    "text": "the property binding or the property it will always calculate it on the fly",
    "start": "2735359",
    "end": "2740400"
  },
  {
    "text": "may be good maybe not question yeah and there is q object bindable property",
    "start": "2740400",
    "end": "2745680"
  },
  {
    "text": "this is the meant to be used for the new code and",
    "start": "2745680",
    "end": "2751040"
  },
  {
    "text": "yeah the question which macrocute is going to use in their classes",
    "start": "2751040",
    "end": "2756400"
  },
  {
    "text": "is also questionable because in q6 they allow to break the api",
    "start": "2756400",
    "end": "2761760"
  },
  {
    "text": "they can remove the functions they that's also fine but i hope they will",
    "start": "2761760",
    "end": "2767280"
  },
  {
    "text": "not going to do that because otherwise we need to i don't know what we need to do to adapt our source code to",
    "start": "2767280",
    "end": "2773359"
  },
  {
    "text": "to that yeah [Music]",
    "start": "2773359",
    "end": "2778560"
  },
  {
    "text": "let's take a look just how the bindable object name function looks like inside so it's a",
    "start": "2778560",
    "end": "2784960"
  },
  {
    "text": "pretty simple just get the pointer to the d uh to the private class and just say",
    "start": "2784960",
    "end": "2790240"
  },
  {
    "text": "object name and basically everything down that's what you need to do with the option two with the option one",
    "start": "2790240",
    "end": "2797680"
  },
  {
    "text": "you need to completely change your class or how it looks like on the public",
    "start": "2797680",
    "end": "2802960"
  },
  {
    "text": "so if you compare what do we get in if we compare q5 and q6 and option two what",
    "start": "2802960",
    "end": "2808160"
  },
  {
    "text": "do we get we will see that basically you get the same api you get the object name you get the set object",
    "start": "2808160",
    "end": "2814400"
  },
  {
    "start": "2809000",
    "end": "2809000"
  },
  {
    "text": "name you get the signal and you get the new function where you",
    "start": "2814400",
    "end": "2820480"
  },
  {
    "text": "allow to call set the binding subscript and value change set the value or get the value wherever",
    "start": "2820480",
    "end": "2827520"
  },
  {
    "text": "you want yeah so if we compare option one versus",
    "start": "2827520",
    "end": "2833599"
  },
  {
    "start": "2831000",
    "end": "2831000"
  },
  {
    "text": "option two in my opinion the first one is looks easier",
    "start": "2833599",
    "end": "2840800"
  },
  {
    "text": "but you just get your object name you don't need to type or call a function or the name of the",
    "start": "2840800",
    "end": "2847520"
  },
  {
    "text": "function's object name bindables kind of i don't know looks ugly for me but then",
    "start": "2847520",
    "end": "2853119"
  },
  {
    "text": "you kind of my lost you can lose the",
    "start": "2853119",
    "end": "2858960"
  },
  {
    "text": "the previous api which you had before so in terms of keeping avi and api",
    "start": "2858960",
    "end": "2865359"
  },
  {
    "text": "capability the second option is much better because it doesn't break the",
    "start": "2865359",
    "end": "2871040"
  },
  {
    "text": "api it doesn't break the api capabilities so you it's allow you to use a switch from q5 q26 without any",
    "start": "2871040",
    "end": "2876960"
  },
  {
    "text": "changes then the the news the new way the new feature is available for you",
    "start": "2876960",
    "end": "2882960"
  },
  {
    "text": "you still need to change your source code a bit because wherever you call set object name just as you used to have it used to do",
    "start": "2882960",
    "end": "2890400"
  },
  {
    "text": "it then you will destroy the binding if you create the binding so you need to change your code but still is like it",
    "start": "2890400",
    "end": "2896160"
  },
  {
    "text": "doesn't break anything but allow you to experiment with the new feature",
    "start": "2896160",
    "end": "2901839"
  },
  {
    "text": "so when do we get the cube property it's currently available in dev branch",
    "start": "2903280",
    "end": "2909040"
  },
  {
    "text": "doesn't work everything i had to modify the source code of the meta object compiler",
    "start": "2909040",
    "end": "2914319"
  },
  {
    "text": "i had to modify some internals of uq property to make it work perfectly",
    "start": "2914319",
    "end": "2921200"
  },
  {
    "text": "but basically it's there it's going to be arrived at the qt6.0",
    "start": "2921599",
    "end": "2928319"
  },
  {
    "text": "it was planned for the december but actually i'm not sure that it will be in december because of the well the",
    "start": "2928319",
    "end": "2936720"
  },
  {
    "text": "skew property discussion is still ongoing and and nobody understand when it's going to end so i don't know when it will be",
    "start": "2936720",
    "end": "2944800"
  },
  {
    "text": "but i hope soon and as i said the integration how to integrate your property inside",
    "start": "2944800",
    "end": "2951200"
  },
  {
    "text": "cute is still ongoing discussion should we break the api should we break the abi capability or should we just",
    "start": "2951200",
    "end": "2956720"
  },
  {
    "text": "keep it as it is but if if we don't break the abi and api capability in q6 then",
    "start": "2956720",
    "end": "2962160"
  },
  {
    "text": "the next time we can do it we can do it in q7 so it could be in the next 13 years",
    "start": "2962160",
    "end": "2970559"
  },
  {
    "text": "so that's the question what the cute company is going to decide in that in that case yeah",
    "start": "2970559",
    "end": "2977119"
  },
  {
    "text": "so some useful links",
    "start": "2977119",
    "end": "2980318"
  },
  {
    "start": "2978000",
    "end": "2978000"
  },
  {
    "text": "the original inspiration of this cube property stuff is actually based on the",
    "start": "2982240",
    "end": "2987680"
  },
  {
    "text": "the article on the voboc.com it's a block of the meta object compiler container",
    "start": "2987680",
    "end": "2994880"
  },
  {
    "text": "olivier olivier coffee if i spell it correctly he wrote it in 2013 and he described how",
    "start": "2994880",
    "end": "3001440"
  },
  {
    "text": "it can be done and later in after seven years we kind of get it so it's cool and there is api design",
    "start": "3001440",
    "end": "3009839"
  },
  {
    "text": "principle in the cute wiki when and how you supposed to use queue property it doesn't actually say how",
    "start": "3009839",
    "end": "3015760"
  },
  {
    "text": "the you should use it in the user code or what to do is that that's probably we should figure out how",
    "start": "3015760",
    "end": "3021520"
  },
  {
    "text": "to do that and there is a good mail thread",
    "start": "3021520",
    "end": "3027040"
  },
  {
    "text": "in the developer mail list where a lot of conversation was happening about what it",
    "start": "3027040",
    "end": "3032160"
  },
  {
    "text": "is and how does it work and basically you need to study the source code there is no",
    "start": "3032160",
    "end": "3038839"
  },
  {
    "text": "currently a lot of documentation so if you want you you need to",
    "start": "3038839",
    "end": "3045200"
  },
  {
    "text": "go and read the source code it's kind of messy right now it's going to be better at least i say",
    "start": "3045200",
    "end": "3051680"
  },
  {
    "text": "that the lars pushes the patches to clean up the source code because the first time when i saw like what is that it's hard to read it's",
    "start": "3051680",
    "end": "3057520"
  },
  {
    "text": "hard to understand what it's doing but it's it's with his patches it becomes much much better",
    "start": "3057520",
    "end": "3063040"
  },
  {
    "text": "yeah so we will see so thank you all for the",
    "start": "3063040",
    "end": "3069520"
  },
  {
    "text": "hearing me if you have any questions please and mute yourself and ask a",
    "start": "3069520",
    "end": "3075760"
  },
  {
    "text": "question",
    "start": "3080599",
    "end": "3083599"
  }
]