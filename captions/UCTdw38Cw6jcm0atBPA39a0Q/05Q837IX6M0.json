[
  {
    "text": "okay oh it's all now hello um my name is hannes and today i want to",
    "start": "8400",
    "end": "14799"
  },
  {
    "text": "talk to you about um aka.net um so what's going to be on the agenda for",
    "start": "14799",
    "end": "21199"
  },
  {
    "text": "today um i'm going to start with a little bit of history where it comes from and how we came to the point where we",
    "start": "21199",
    "end": "27519"
  },
  {
    "text": "are today and then i'm going to give you a brief introduction um about how academic works",
    "start": "27519",
    "end": "33200"
  },
  {
    "text": "and what goes on behind the scenes then then i'm going to explain you what problem we tried to solve with it um and",
    "start": "33200",
    "end": "41040"
  },
  {
    "text": "then i'm going to explain how aka.net fit into all that and then we'll dive into some of the",
    "start": "41040",
    "end": "46800"
  },
  {
    "text": "implementation details and some of the stuff that we ran into",
    "start": "46800",
    "end": "52239"
  },
  {
    "text": "and then i'll try to wrap it up and send you off with some resources that you can use to go beyond what we're gonna talk",
    "start": "52559",
    "end": "58800"
  },
  {
    "text": "to today because there's gonna be so much more now to dive into a bit of history um",
    "start": "58800",
    "end": "65280"
  },
  {
    "text": "we're gonna have to think about why we even have echo.net and",
    "start": "65280",
    "end": "70640"
  },
  {
    "text": "the first idea is about building software in a way that resembles physics",
    "start": "70640",
    "end": "76479"
  },
  {
    "text": "and that resembles the real world world date from the 1970s just like a lot of things that we're",
    "start": "76479",
    "end": "82799"
  },
  {
    "text": "using today um is it because people back then were less distracted by their smartphone or",
    "start": "82799",
    "end": "88400"
  },
  {
    "text": "did they have better drugs i don't know but a lot of the stuff was invented around those times",
    "start": "88400",
    "end": "93759"
  },
  {
    "text": "and those ideas they were refined throughout the 70s into the early 80s but they didn't have all these",
    "start": "93759",
    "end": "100360"
  },
  {
    "text": "multi-processor machines that we have now um to actually bring everything into practice",
    "start": "100360",
    "end": "107360"
  },
  {
    "text": "and the first moment where they actually made an attempt to bring everything into into",
    "start": "107360",
    "end": "112560"
  },
  {
    "text": "practice was uh ericsson and erickson was a telco uh a a company",
    "start": "112560",
    "end": "118960"
  },
  {
    "text": "that made hardware for telcos and the way that these telcos made money is you pay for your phone connection then you",
    "start": "118960",
    "end": "125360"
  },
  {
    "text": "then you pay per second that the connection lasts so downtime costs measurable money",
    "start": "125360",
    "end": "132480"
  },
  {
    "text": "and what they were after is like we want to minimize our downtime and they had all these ideas in the",
    "start": "132480",
    "end": "138080"
  },
  {
    "text": "actor model that they thought thought that okay we can use this we can use an actor system to actually achieve what",
    "start": "138080",
    "end": "143680"
  },
  {
    "text": "we're after but they didn't have a program programming language to do so",
    "start": "143680",
    "end": "149120"
  },
  {
    "text": "so they invented their own they made erlang and erlang is a language that has an actor model built into it and they",
    "start": "149120",
    "end": "156400"
  },
  {
    "text": "used that to build a huge code base that run these multi-node telco systems",
    "start": "156400",
    "end": "162800"
  },
  {
    "text": "that allowed them to get up to nine nines of uptime and to put that into",
    "start": "162800",
    "end": "167920"
  },
  {
    "text": "perspective nine nines of uptime is about 31 milliseconds of downtime a year",
    "start": "167920",
    "end": "174239"
  },
  {
    "text": "who runs a system that has not time like that yeah none of us really yeah",
    "start": "174239",
    "end": "180640"
  },
  {
    "text": "so that existed since the 80s but then on the.net ecosystem",
    "start": "180640",
    "end": "187760"
  },
  {
    "text": "the year that we got all the actor systems that we have to today was 2015.",
    "start": "187760",
    "end": "193200"
  },
  {
    "text": "it's incidentally the first year that i came to ndc oslo and it's also the year that i decided that i wanted to be a",
    "start": "193200",
    "end": "199360"
  },
  {
    "text": "speaker but that is the year that we got all these actor system microsoft in february",
    "start": "199360",
    "end": "205440"
  },
  {
    "text": "released orleans which was the actor system that they used to build the back end for halo 4.",
    "start": "205440",
    "end": "212560"
  },
  {
    "text": "and the way that you make money on a video game is you get good reviews in the first couple of weeks and then your sales will peak",
    "start": "212560",
    "end": "218959"
  },
  {
    "text": "so if your back end isn't able to handle the load you're going to get bad reviews and your game will flop so that was kind",
    "start": "218959",
    "end": "225120"
  },
  {
    "text": "of like a big deal and they were really successful in doing so and then just two months later the first",
    "start": "225120",
    "end": "232159"
  },
  {
    "text": "production stable version of akka.net came out in the same month microsoft came up with",
    "start": "232159",
    "end": "238400"
  },
  {
    "text": "service fabric reliable actors and if something like this happens",
    "start": "238400",
    "end": "244879"
  },
  {
    "text": "it makes me wonder it's like why 2015 because we had these ideas since the 70s",
    "start": "244879",
    "end": "252080"
  },
  {
    "text": "we've had the first implementation since the 80s on the jvm it had been happening a few",
    "start": "252080",
    "end": "258160"
  },
  {
    "text": "years earlier but why now and basically because the free lunch was",
    "start": "258160",
    "end": "264720"
  },
  {
    "text": "over before that we were building software and we could scale in a classical way we would add a couple of",
    "start": "264720",
    "end": "270240"
  },
  {
    "text": "nodes to our web form maybe add some read nodes to our database cluster",
    "start": "270240",
    "end": "275520"
  },
  {
    "text": "if that didn't hold up you added some kind of caching but that went on pretty well because all",
    "start": "275520",
    "end": "281600"
  },
  {
    "text": "these processors processor manufacturers were putting out faster processors every year and most of the applications that",
    "start": "281600",
    "end": "288479"
  },
  {
    "text": "were written were inside companies where the user base didn't grow as much but then we got the internet and",
    "start": "288479",
    "end": "294800"
  },
  {
    "text": "smartphones and internet of things and that scaling scenario didn't hold up anymore and that's that left a lot of",
    "start": "294800",
    "end": "300960"
  },
  {
    "text": "people looking for other solutions that why we got that's why we got all these actor models",
    "start": "300960",
    "end": "306960"
  },
  {
    "text": "now the thing is that free lunch was over because of this graph this is about 40",
    "start": "306960",
    "end": "312639"
  },
  {
    "text": "years of data about process the processor market and you can see a couple of trend lines that are really",
    "start": "312639",
    "end": "318880"
  },
  {
    "text": "not giving us hope like the clock frequency has stabilized for more than a decade we've had three gigahertz",
    "start": "318880",
    "end": "325840"
  },
  {
    "text": "processors that we could overclock to about five gigahertz on liquid nitrogen since early 2000s",
    "start": "325840",
    "end": "334639"
  },
  {
    "text": "but also the single thread performance is tapering off there's only one line on this graph that's giving us a little bit",
    "start": "334639",
    "end": "340080"
  },
  {
    "text": "of hope and that's the number of cores when i started out as a programmer it was it was very normal to have a desktop",
    "start": "340080",
    "end": "346639"
  },
  {
    "text": "with a single core now you all have eight in your pocket right",
    "start": "346639",
    "end": "352320"
  },
  {
    "text": "so that's the number that we want to take advantage of that's the one that we want to use to be able to scale really",
    "start": "352320",
    "end": "357360"
  },
  {
    "text": "well now i don't know how many of you have tried to do treading inside an application",
    "start": "357360",
    "end": "363520"
  },
  {
    "text": "did it make you happy not that much right because treading especially multi-training is",
    "start": "363520",
    "end": "370319"
  },
  {
    "text": "hard because at some point you're gonna end up inevitably with a little bit of shared state and",
    "start": "370319",
    "end": "376800"
  },
  {
    "text": "you'll get race conditions on that shared state so you'll try to solve them by blocking them you lock the resource",
    "start": "376800",
    "end": "383680"
  },
  {
    "text": "and then you have the potential to actually cause deadlocks between threats and i mean it's it's all misery and",
    "start": "383680",
    "end": "388960"
  },
  {
    "text": "downhill from there and you'll end up inevitably with a little bit of serialized code code that",
    "start": "388960",
    "end": "396000"
  },
  {
    "text": "can always only run on one trend and there's a smart guy called amdahl who",
    "start": "396000",
    "end": "401440"
  },
  {
    "text": "spoke about that it's like how much can you speed up a workload by throwing more resources at it in function of how much",
    "start": "401440",
    "end": "409599"
  },
  {
    "text": "of the code you can actually paralyze and on this graph you can see even the green line that is like 95 of the code",
    "start": "409599",
    "end": "417919"
  },
  {
    "text": "can be parallelized it doesn't matter how many cpus you throw up a throw at it",
    "start": "417919",
    "end": "424000"
  },
  {
    "text": "you'll never end up with something that is more than 20 times faster because you'll have that five percent that needs",
    "start": "424000",
    "end": "429440"
  },
  {
    "text": "to run in series so we're gonna need to get to a much higher number than 95 percent if we",
    "start": "429440",
    "end": "436319"
  },
  {
    "text": "actually want to be able to scale across many many many cores",
    "start": "436319",
    "end": "441680"
  },
  {
    "text": "and that's where the actual model comes in it promises us a couple of things it promises us an extremely high degree of",
    "start": "441680",
    "end": "448960"
  },
  {
    "text": "parallelism for stateful systems because parallelizing something that is stateless that's really easy that's",
    "start": "448960",
    "end": "455440"
  },
  {
    "text": "basically a web server serving files you can parallelize that to infinity and put a",
    "start": "455440",
    "end": "460880"
  },
  {
    "text": "load balancer in front of it but as soon as you're dealing with state it becomes hard and that's where we get",
    "start": "460880",
    "end": "466160"
  },
  {
    "text": "the reactive patterns that will make up what is the actor model",
    "start": "466160",
    "end": "472639"
  },
  {
    "text": "so that's the history let's dive into how that actually works",
    "start": "472720",
    "end": "477759"
  },
  {
    "text": "because there's a couple of building blocks that we need to familiarize ourselves to and the simplest building",
    "start": "477759",
    "end": "483039"
  },
  {
    "text": "block inside an actor model is an actor and an actor is basically an instance",
    "start": "483039",
    "end": "488560"
  },
  {
    "text": "of a class that holds its own states and its own logic",
    "start": "488560",
    "end": "495039"
  },
  {
    "text": "and it the only way to talk to this actor is actually to send it a message and that message get this gets",
    "start": "495039",
    "end": "501360"
  },
  {
    "text": "dispatched to this actor on a single thread one by one in order",
    "start": "501360",
    "end": "507520"
  },
  {
    "text": "right and that's important because inside the scope of your actor you don't need to",
    "start": "507520",
    "end": "513919"
  },
  {
    "text": "worry about locking you don't need to worry about multi-trading because you can always assume that the code that's",
    "start": "513919",
    "end": "520640"
  },
  {
    "text": "executing inside your actor is going to be the only thread that is dealing with this state so you can just",
    "start": "520640",
    "end": "526480"
  },
  {
    "text": "write very easy clean code",
    "start": "526480",
    "end": "531519"
  },
  {
    "text": "and that is the power when you're dealing with this this makes it easier from a developer",
    "start": "531920",
    "end": "537200"
  },
  {
    "text": "perspective and the simplest thing you can do is something that looks like this this is probably the simplest actor you",
    "start": "537200",
    "end": "543120"
  },
  {
    "text": "can write you'll inherit from untyped actor and an untyped actor um has an",
    "start": "543120",
    "end": "548800"
  },
  {
    "text": "unreceived method that you need to implement and all the messages get dispatched to that one uh one by one",
    "start": "548800",
    "end": "556880"
  },
  {
    "text": "of course if you use the untyped actor you'll need to figure out what type of messages you're getting and then you'll be able to deal with these messages",
    "start": "556880",
    "end": "565519"
  },
  {
    "text": "now speaking about messages also your messages they're very very simple objects",
    "start": "565519",
    "end": "571920"
  },
  {
    "text": "but you best design them to be immutable the fun thing there is akka.net doesn't",
    "start": "571920",
    "end": "578160"
  },
  {
    "text": "really enforce them to be if the message doesn't cross a machine boundary",
    "start": "578160",
    "end": "583360"
  },
  {
    "text": "the object reference just remains in the process and it gets passed along so theoretically it would be possible to",
    "start": "583360",
    "end": "589920"
  },
  {
    "text": "change a message that is being processed by another actor just don't do that and make your own",
    "start": "589920",
    "end": "595839"
  },
  {
    "text": "life miserable because as soon as it crosses a machine boundary it gets serialized and",
    "start": "595839",
    "end": "601920"
  },
  {
    "text": "deserialized and and you use that behavior that you're trying to exploit",
    "start": "601920",
    "end": "607680"
  },
  {
    "text": "now the people from aca from petabridge they're claiming that we can get up to 50 million messages on a single",
    "start": "607680",
    "end": "614160"
  },
  {
    "text": "server i can consistently consistently get over 2 million on my laptop so it's probably ballpark correct",
    "start": "614160",
    "end": "622240"
  },
  {
    "text": "um now immutable messages now in.net we have record types which makes it a lot",
    "start": "622240",
    "end": "628000"
  },
  {
    "text": "easier to do immutable classes if you're not using those features you might want to design your classes like this",
    "start": "628000",
    "end": "635200"
  },
  {
    "text": "make sure that your properties only have getters set them in the constructors and think about using immutable collections",
    "start": "635200",
    "end": "642399"
  },
  {
    "text": "because it's still possible to change the contents of a collection after it has been instantiated so with the",
    "start": "642399",
    "end": "647760"
  },
  {
    "text": "immutable collections you can actually solve that so we've got our actors we've got our",
    "start": "647760",
    "end": "654160"
  },
  {
    "text": "messages and then we need to tie all that together right and for that we have an actor system and an actor system is",
    "start": "654160",
    "end": "660880"
  },
  {
    "text": "basically the glue to to make everything happen",
    "start": "660880",
    "end": "666000"
  },
  {
    "text": "it manages the actual life cycle it instantiates your object instances your actor instances it will also kill them",
    "start": "666000",
    "end": "673360"
  },
  {
    "text": "for you it will handle all their inboxes and it will dispatch their messages to um to",
    "start": "673360",
    "end": "679839"
  },
  {
    "text": "these individual actors it will also take care of all the threat scheduling for you and that's nice",
    "start": "679839",
    "end": "685680"
  },
  {
    "text": "because we already established that we don't want to do that ourselves there's also a published subscribe",
    "start": "685680",
    "end": "692240"
  },
  {
    "text": "system in there where you can do uh pops up messaging between actors we're not gonna cover that in this talk today but",
    "start": "692240",
    "end": "697920"
  },
  {
    "text": "it is there it's basically your puppet master is the puppet master that controls the whole",
    "start": "697920",
    "end": "702959"
  },
  {
    "text": "system this is the metallica album that i first listened to when i was young it's still the best one out there fight",
    "start": "702959",
    "end": "708160"
  },
  {
    "text": "me on that um now how do you create an actor system um",
    "start": "708160",
    "end": "715040"
  },
  {
    "text": "it's not really harder than calling actorssystem.create and that will create an actor system",
    "start": "715040",
    "end": "721600"
  },
  {
    "text": "inside the process that you're running in at that moment doesn't do much but it's an actor system",
    "start": "721600",
    "end": "729480"
  },
  {
    "text": "and then when we when we want to create our first actor the first thing we're gonna have to do",
    "start": "732079",
    "end": "738639"
  },
  {
    "text": "is to create props because i told you we are not creating our own actors the actor system is going",
    "start": "738639",
    "end": "744880"
  },
  {
    "text": "to do that for us so what props are are basically a pointer to a constructor",
    "start": "744880",
    "end": "751440"
  },
  {
    "text": "you can pass constructor parameters using the pro the create props methods",
    "start": "751440",
    "end": "756800"
  },
  {
    "text": "and that will actually point to a certain constructor on a certain object that will get instantiated as an actor",
    "start": "756800",
    "end": "763200"
  },
  {
    "text": "and when you tell the system to create the actor for you by calling the system.actor off",
    "start": "763200",
    "end": "770399"
  },
  {
    "text": "method and you're giving your actor a name what you'll get get back is an actor",
    "start": "770399",
    "end": "776000"
  },
  {
    "text": "reference and an actor reference is not a reference to the actual object it's a",
    "start": "776000",
    "end": "781680"
  },
  {
    "text": "small object that you can use to communicate with the actor you can use it to send messages to the actor you can",
    "start": "781680",
    "end": "788639"
  },
  {
    "text": "use it to do other stuff you can even do like a synchronous call where you wait for a",
    "start": "788639",
    "end": "793680"
  },
  {
    "text": "response but the simplest thing is to just tell a message and that sends it to the inbox",
    "start": "793680",
    "end": "799519"
  },
  {
    "text": "of the actor and it will get processed now",
    "start": "799519",
    "end": "805920"
  },
  {
    "text": "these actor references are really awesome because they um you can pass them around",
    "start": "805920",
    "end": "811920"
  },
  {
    "text": "in your software and you can use them anywhere to talk to that actor even if you don't have any references to the",
    "start": "811920",
    "end": "818000"
  },
  {
    "text": "original actor system so that's a pretty powerful thing i'll show you later what they can do on top of that",
    "start": "818000",
    "end": "825199"
  },
  {
    "text": "but if we could only make a few actors um inside our actor system that would",
    "start": "825839",
    "end": "830880"
  },
  {
    "text": "really not help us with scaling that much what we'll need to do is design our hierarchy in a proper way",
    "start": "830880",
    "end": "838639"
  },
  {
    "text": "and actors have this hierarchy there's the three top level ones that we get for free the three blue ones and under the",
    "start": "838800",
    "end": "844480"
  },
  {
    "text": "user actor that's where the ones that you will create actually go so if you call the system.actor off that will be",
    "start": "844480",
    "end": "852240"
  },
  {
    "text": "the top level ones the the a1 and the a2 those are the top level actors that are",
    "start": "852240",
    "end": "857279"
  },
  {
    "text": "the ones that you do that you create by calling actor off on the system",
    "start": "857279",
    "end": "863680"
  },
  {
    "text": "and your address in the hierarchy define is defined by your position in it and this is important because that allows",
    "start": "863680",
    "end": "870160"
  },
  {
    "text": "you to address certain actors directly and this hierarchy is not just important",
    "start": "870160",
    "end": "877360"
  },
  {
    "text": "by managing and keeping everything separated it's also important for supervision",
    "start": "877360",
    "end": "882959"
  },
  {
    "text": "are there any parents in the room like yeah quite a few i have three so um",
    "start": "882959",
    "end": "888959"
  },
  {
    "text": "i don't know why i did that um but if you take your kids to the supermarket what happens",
    "start": "888959",
    "end": "895199"
  },
  {
    "text": "if they knock something over if they misbehave who's responsible you right exactly",
    "start": "895199",
    "end": "901680"
  },
  {
    "text": "and that's how it works with actors as well if your children misbehave you are responsible",
    "start": "901680",
    "end": "907839"
  },
  {
    "text": "which means in more concrete terms if an actor throws an uncaught exception",
    "start": "907839",
    "end": "913680"
  },
  {
    "text": "the exception is escalated to the parent and the parent will then need a supervision strategy to deal with this",
    "start": "913680",
    "end": "920000"
  },
  {
    "text": "exception so you can expect which kind of exception you're getting and you can define a certain behavior",
    "start": "920000",
    "end": "926079"
  },
  {
    "text": "and you can apply that behavior to all of your children or just the one that failed",
    "start": "926079",
    "end": "932480"
  },
  {
    "text": "sometimes you're splitting up a huge workload into multiple chunks and you're delegating them to different actors if",
    "start": "932480",
    "end": "937920"
  },
  {
    "text": "the whole workload is invalidated by a single child failing that's the",
    "start": "937920",
    "end": "943440"
  },
  {
    "text": "moment that you will take action on all your children except except for instead of just on a failing one",
    "start": "943440",
    "end": "951199"
  },
  {
    "text": "and you can you can basically take three kinds of actions you can um",
    "start": "951199",
    "end": "956480"
  },
  {
    "text": "tell your kids like they will look at you and they knock something over and they'll look at you it's like and you'll be nah it's fine",
    "start": "956480",
    "end": "963120"
  },
  {
    "text": "continue like the message that you just got you can discard it i mean that error is not",
    "start": "963120",
    "end": "969120"
  },
  {
    "text": "that bad we can continue take the next message of the inbox and start processing that",
    "start": "969120",
    "end": "976240"
  },
  {
    "text": "but if your child is like severely misbehaving you're gonna tell it to stop it's like stop whatever you're doing",
    "start": "976399",
    "end": "982800"
  },
  {
    "text": "right now in the actor system that would mean that you would actually kill that child don't do that with your children um but",
    "start": "982800",
    "end": "989360"
  },
  {
    "text": "basically what you'll do is you'll you'll eliminate the actor instance and you'll throw away the entire inbox and that",
    "start": "989360",
    "end": "995519"
  },
  {
    "text": "actor is done at that moment or you can restart and restart is the default behavior restart is basically",
    "start": "995519",
    "end": "1003440"
  },
  {
    "text": "what you'll do is you'll kill of the instance recreate it with the same props which is",
    "start": "1003440",
    "end": "1009120"
  },
  {
    "text": "basically you'll call the same constructor with the same constructor parameters and create the new actor",
    "start": "1009120",
    "end": "1015279"
  },
  {
    "text": "um and once it has been instantiated it starts it starts with the same message",
    "start": "1015279",
    "end": "1020959"
  },
  {
    "text": "over again it will retry the same message on the new actor instance so the inbox gets preserved by the actor",
    "start": "1020959",
    "end": "1028160"
  },
  {
    "text": "system and that's why it's the default behavior now all of these you'll have to figure out for yourself which you're going to",
    "start": "1028160",
    "end": "1034160"
  },
  {
    "text": "need in your case but you have a lot of options there and it's a really powerful mechanism and this is what helps you",
    "start": "1034160",
    "end": "1040000"
  },
  {
    "text": "create these resilient systems now there's a couple of development",
    "start": "1040000",
    "end": "1045760"
  },
  {
    "text": "ideas that you're going to have to do differently when you're doing actors instead of a",
    "start": "1045760",
    "end": "1051440"
  },
  {
    "text": "simple object-oriented orientation and there are so many that we can dive",
    "start": "1051440",
    "end": "1057120"
  },
  {
    "text": "into but the general uh idea is that you're going to take every workload and cut it into really small pieces and then",
    "start": "1057120",
    "end": "1063440"
  },
  {
    "text": "cut that into even smaller pieces and you're gonna delegate all of those into separate actors and that's the way that",
    "start": "1063440",
    "end": "1068799"
  },
  {
    "text": "you manage your scaling and you can instantiate separate actors",
    "start": "1068799",
    "end": "1073840"
  },
  {
    "text": "for every task and what you want to do is you want to push all the risk to the bottom of the tree that i showed you",
    "start": "1073840",
    "end": "1080400"
  },
  {
    "text": "earlier because if those actors fail their parents can recover they can use their",
    "start": "1080400",
    "end": "1085440"
  },
  {
    "text": "supervision strategy to recover from any failures and one thing you have to watch out for",
    "start": "1085440",
    "end": "1091520"
  },
  {
    "text": "and we learned that the hard way is it is possible to get an overflowing",
    "start": "1091520",
    "end": "1096799"
  },
  {
    "text": "inbox on an actor if you have an actor that handles has to handle too many messages",
    "start": "1096799",
    "end": "1102480"
  },
  {
    "text": "um and this is caused by the single treadedness of an actor there's always only a single threat so you're always",
    "start": "1102480",
    "end": "1108240"
  },
  {
    "text": "limited by how many messages you can process on a single core on that single actor",
    "start": "1108240",
    "end": "1114080"
  },
  {
    "text": "um but it's easy to design around that like talk to the child actors directly instead of talking through parents and",
    "start": "1114080",
    "end": "1120240"
  },
  {
    "text": "that will solve a lot of it there's also a whole bunch of design patterns patterns um a lot of them are documented",
    "start": "1120240",
    "end": "1126960"
  },
  {
    "text": "in the petabridge blog and they also have a course that you can take online pedobridge is the company",
    "start": "1126960",
    "end": "1132960"
  },
  {
    "text": "that maintains akka.net and you can get training from them by the people who actually built the framework which is",
    "start": "1132960",
    "end": "1139280"
  },
  {
    "text": "really nice there's one that i didn't want to withhold from you because it really resonates with geeks um any star star",
    "start": "1139280",
    "end": "1146640"
  },
  {
    "text": "trek people in the room yeah okay what happens if they have a guest actor",
    "start": "1146640",
    "end": "1152960"
  },
  {
    "text": "what happens with the guest actor yeah so they arrive at a new planet you you",
    "start": "1152960",
    "end": "1158880"
  },
  {
    "text": "have these guest actors that that do like one or two shows right and they arrive at a new planet",
    "start": "1158880",
    "end": "1164640"
  },
  {
    "text": "and who do they send down the guest actor and that guy dies",
    "start": "1164640",
    "end": "1170080"
  },
  {
    "text": "but that's okay because because that guy dies the main cast can survive the entire series right",
    "start": "1170080",
    "end": "1177039"
  },
  {
    "text": "um and this is what you're going to be doing if you're designing for resiliency",
    "start": "1177039",
    "end": "1182240"
  },
  {
    "text": "when you are going to do anything risky you're actually going to make a child",
    "start": "1182240",
    "end": "1187840"
  },
  {
    "text": "actor for it and your delegate you're going to delegate that risky operation to your child and because of supervision you can deal",
    "start": "1187840",
    "end": "1194480"
  },
  {
    "text": "with the outcome of this risky operation what is risky anything that goes over",
    "start": "1194480",
    "end": "1200400"
  },
  {
    "text": "the network anything that goes to disk basically anything that leaves your process is potentially a risky operation",
    "start": "1200400",
    "end": "1206080"
  },
  {
    "text": "even if you're talking to another node in your actor system that is potentially a risky operation",
    "start": "1206080",
    "end": "1212880"
  },
  {
    "text": "but this makes sure that your main cast your main actor survives and that you can preserve the state that",
    "start": "1212880",
    "end": "1219200"
  },
  {
    "text": "is important to you that card is annoying you can preserve the state that you",
    "start": "1219200",
    "end": "1225280"
  },
  {
    "text": "really care about and not risk it by doing something that potentially blows up your rector",
    "start": "1225280",
    "end": "1232159"
  },
  {
    "text": "i feel like we're deep enough into how this whole thing is pieced together to explain to you what",
    "start": "1232640",
    "end": "1239679"
  },
  {
    "text": "we were trying to solve when we were um dealing with this um these will probably",
    "start": "1239679",
    "end": "1245200"
  },
  {
    "text": "look familiar this this is what they look like in my house but they're probably very similar in norway it's my",
    "start": "1245200",
    "end": "1251520"
  },
  {
    "text": "electricity gas and water meter and the company that i was working for at the time",
    "start": "1251520",
    "end": "1257520"
  },
  {
    "text": "was providing an iot solution we had a gateway and iot device that we could",
    "start": "1257520",
    "end": "1262960"
  },
  {
    "text": "put in the customer's house and that would connect to these meters we could connect to the new and fancy",
    "start": "1262960",
    "end": "1268640"
  },
  {
    "text": "digital ones that had serial ports we could also we also had ones with optical",
    "start": "1268640",
    "end": "1273679"
  },
  {
    "text": "senders that could sensors that could actually read the spinning dials um and that data was sent to our back",
    "start": "1273679",
    "end": "1281039"
  },
  {
    "text": "end and we wanted to process that at a very large scale and based on that back-end we would offer insights to our",
    "start": "1281039",
    "end": "1287520"
  },
  {
    "text": "users dashboards alerts all that sort of stuff",
    "start": "1287520",
    "end": "1292640"
  },
  {
    "text": "now to simplify the problem for today um what we're going to look at is what we",
    "start": "1292640",
    "end": "1298080"
  },
  {
    "text": "want to achieve with these meters is we want to store that data so that we can monitor it over a longer period of time",
    "start": "1298080",
    "end": "1305440"
  },
  {
    "text": "and that our consumer can actually get the graphs that they want to have and we want to be able to compare time",
    "start": "1305440",
    "end": "1312320"
  },
  {
    "text": "periods it's like i installed light lead light bulbs in my house how is that affecting my usage that that should be",
    "start": "1312320",
    "end": "1318000"
  },
  {
    "text": "something that we'll be able to do and then we want to put on some alerts like momentary or periodic threshold",
    "start": "1318000",
    "end": "1324960"
  },
  {
    "text": "alerts first thing you need to understand there is meter readings first versus",
    "start": "1324960",
    "end": "1330840"
  },
  {
    "text": "consumption these meters they show a number right and that number doesn't really mean",
    "start": "1330840",
    "end": "1336480"
  },
  {
    "text": "anything to you as the consumer it's usually the number of the amount of",
    "start": "1336480",
    "end": "1341840"
  },
  {
    "text": "consumption that was measured by this meter since it was produced at the factory",
    "start": "1341840",
    "end": "1347360"
  },
  {
    "text": "usually that correlates with the amount of consumption that was measured",
    "start": "1347360",
    "end": "1353440"
  },
  {
    "text": "since it had been installed in your house but even that's not true because these companies they reuse meters",
    "start": "1353440",
    "end": "1359440"
  },
  {
    "text": "or you bought the house from somebody else and the meter was already there what you care about is how much this",
    "start": "1359440",
    "end": "1364480"
  },
  {
    "text": "number changes because that's what you're going to get a bill for and if this number changes then we're",
    "start": "1364480",
    "end": "1369919"
  },
  {
    "text": "talking about consumption we're not talking about the meter reading right and that's the first calculation that",
    "start": "1369919",
    "end": "1376320"
  },
  {
    "text": "we're gonna have to do on this um it's very simple is subtracting two numbers i think you can all figure that out",
    "start": "1376320",
    "end": "1383120"
  },
  {
    "text": "and thresholds and alerts are really not that hard to grasp either if i give you a threshold like when is my consumption",
    "start": "1383120",
    "end": "1389679"
  },
  {
    "text": "over 90 okay that happened at 10 30.",
    "start": "1389679",
    "end": "1395120"
  },
  {
    "text": "now if i'll tell you it's like okay what happens if my consumption is over 90",
    "start": "1395120",
    "end": "1400240"
  },
  {
    "text": "for more over a certain number for 20 minutes the red line is pretty clear we've been",
    "start": "1400240",
    "end": "1406799"
  },
  {
    "text": "over that for 20 minutes but the green line could be a discussion point that you have with your product owner because",
    "start": "1406799",
    "end": "1412240"
  },
  {
    "text": "we have dipped under it for one of the buckets but on average we've still been above it so that's",
    "start": "1412240",
    "end": "1418240"
  },
  {
    "text": "um we had different rules for that between different types of devices which was fun",
    "start": "1418240",
    "end": "1425679"
  },
  {
    "text": "now where did aka.net fit into the solution that we had if you ask microsoft which stack you would need to",
    "start": "1426000",
    "end": "1433120"
  },
  {
    "text": "build a typical iot solution this is probably like a picture that they would paint for you and they would promote all",
    "start": "1433120",
    "end": "1439760"
  },
  {
    "text": "their azure services you'll get similar ones on aws so so don't worry if you are on the amazon side",
    "start": "1439760",
    "end": "1446559"
  },
  {
    "text": "now the left the left side is everything you'll need to communicate to your device now we built this way way before",
    "start": "1446559",
    "end": "1454080"
  },
  {
    "text": "iot hub existed so we ended up doing a lot of that ourselves presence detection sending events from",
    "start": "1454080",
    "end": "1461039"
  },
  {
    "text": "the device to the back end sending control from the back end to the device authenticating devices all of that",
    "start": "1461039",
    "end": "1468960"
  },
  {
    "text": "now that's a solved problem i wouldn't recommend building that over again just use iot hub it's good",
    "start": "1468960",
    "end": "1475840"
  },
  {
    "text": "um then you're gonna need to process that data somehow you're gonna want to",
    "start": "1475840",
    "end": "1480880"
  },
  {
    "text": "capture it all dump it into storage somehow probably enrich it um all that",
    "start": "1480880",
    "end": "1487039"
  },
  {
    "text": "sort of stuff and they'll give you things like french functions and stream analytics and event hub and",
    "start": "1487039",
    "end": "1492480"
  },
  {
    "text": "that sort of stuff but you still haven't provided any business value the value comes from",
    "start": "1492480",
    "end": "1498480"
  },
  {
    "text": "sending alerts to your users giving them dashboards all that sort of stuff and that's the stuff that's going to be on the right",
    "start": "1498480",
    "end": "1504720"
  },
  {
    "text": "now akka.net can help with um a lot of this it can help with all the shaping and enriching",
    "start": "1504720",
    "end": "1511279"
  },
  {
    "text": "and even with the storing of the data it's not going to be the storage technology itself",
    "start": "1511279",
    "end": "1516320"
  },
  {
    "text": "but it can help doing so and it can also be very very beneficial",
    "start": "1516320",
    "end": "1521440"
  },
  {
    "text": "in generating alerts because when you're generating alerts you usually you're",
    "start": "1521440",
    "end": "1526559"
  },
  {
    "text": "looking at the longer time windows and we set out first before we did this we set out",
    "start": "1526559",
    "end": "1532480"
  },
  {
    "text": "in doing it with stream analytics but stream analytics wasn't really good at that time to take uh changing",
    "start": "1532480",
    "end": "1538640"
  },
  {
    "text": "configuration data to change the window sizes of the windows that you're looking at which kind of threw it out",
    "start": "1538640",
    "end": "1545679"
  },
  {
    "text": "as a use case for us and icon.net is really it's really easy to keep a little bit of data in memory",
    "start": "1545679",
    "end": "1551919"
  },
  {
    "text": "and then evaluate whether you have passed a certain threshold or not and generate an alert condition based on",
    "start": "1551919",
    "end": "1557440"
  },
  {
    "text": "that so very simply put our back end looked like this and the user got a web portal",
    "start": "1557440",
    "end": "1564480"
  },
  {
    "text": "that talked to our aca.net cluster and the cluster was actually responsible",
    "start": "1564480",
    "end": "1570240"
  },
  {
    "text": "for fetching the data from storage and the ingestion happened through",
    "start": "1570240",
    "end": "1575679"
  },
  {
    "text": "iot hub after we built this we switched to iot hub iot hub was ingested by an app service",
    "start": "1575679",
    "end": "1583520"
  },
  {
    "text": "if you've never worked with event hub or iot hub it's a little bit like kafka it's a stream where you have a pointer",
    "start": "1583520",
    "end": "1589600"
  },
  {
    "text": "where you are with your reads right and and to delegate all those messages into our net cluster we used an app",
    "start": "1589600",
    "end": "1596720"
  },
  {
    "text": "service why because we could pause that and that meant that the ingestion part",
    "start": "1596720",
    "end": "1602080"
  },
  {
    "text": "of the whole solution stopped for a little bit so we could do stuff on the cluster like a redeploy something like",
    "start": "1602080",
    "end": "1607200"
  },
  {
    "text": "that now one of my pet peeves is developers using stuff that it wasn't meant for",
    "start": "1607200",
    "end": "1612799"
  },
  {
    "text": "and you all live in europe or most of you sorry not you michael",
    "start": "1612799",
    "end": "1619840"
  },
  {
    "text": "but the myth around all of europe is that the magpie this black and white bird it's the bird that is attracted",
    "start": "1620080",
    "end": "1626080"
  },
  {
    "text": "attracted to shiny things right and so are we developers we are attracted to shiny things that we want to use in our",
    "start": "1626080",
    "end": "1633039"
  },
  {
    "text": "code base so what would in my opinion be a good fit for is",
    "start": "1633039",
    "end": "1638399"
  },
  {
    "text": "anything that manages a stateful application and that you want to really generate",
    "start": "1638399",
    "end": "1644240"
  },
  {
    "text": "high throughput on um that would be a really good fit if you want to get close to real-time gaming back-end that would",
    "start": "1644240",
    "end": "1651760"
  },
  {
    "text": "be really good with an actor model stock trading systems",
    "start": "1651760",
    "end": "1657120"
  },
  {
    "text": "iot solutions even yeah any any system that that needs to be scaled out across multiple",
    "start": "1657120",
    "end": "1664399"
  },
  {
    "text": "machines and that benefits from threading and using state now",
    "start": "1664399",
    "end": "1671200"
  },
  {
    "text": "i think you all get what we wanted to build i want to show you some of the parts that we",
    "start": "1671200",
    "end": "1676480"
  },
  {
    "text": "maybe struggled with um and how we solved some of it and i think that's probably valuable um",
    "start": "1676480",
    "end": "1684960"
  },
  {
    "text": "so think about the problem domain that we had um we're gonna dive into four",
    "start": "1684960",
    "end": "1690559"
  },
  {
    "text": "four topics and that should bring us pretty much to the end of this slot so the first thing that you're going to",
    "start": "1690559",
    "end": "1696559"
  },
  {
    "text": "deal with not just in an iot solution but it was very painful for us is normalizing data",
    "start": "1696559",
    "end": "1703279"
  },
  {
    "text": "making sure that you have consistent data to work with is a",
    "start": "1703279",
    "end": "1708480"
  },
  {
    "text": "it's not a complex task but it can save you a lot of pain",
    "start": "1708480",
    "end": "1713600"
  },
  {
    "text": "some of the devices that we were dealing with they were these microprocessors and i i know that when i speak to",
    "start": "1713919",
    "end": "1721600"
  },
  {
    "text": "object-oriented developers or whatever like microprocessors they think about something like a raspberry pi right",
    "start": "1721600",
    "end": "1728399"
  },
  {
    "text": "get like two gigs of ram something like that these were devices that had",
    "start": "1728399",
    "end": "1734000"
  },
  {
    "text": "eight kilobytes of ram eight kilobytes of ram is just about",
    "start": "1734000",
    "end": "1739919"
  },
  {
    "text": "enough to construct an http request and send it to a dedicated sock that would",
    "start": "1739919",
    "end": "1746000"
  },
  {
    "text": "actually do the wi-fi stuff and and send that out so",
    "start": "1746000",
    "end": "1751440"
  },
  {
    "text": "the biggest problem with these microprocessors is that they didn't have real-time clocks",
    "start": "1751440",
    "end": "1756799"
  },
  {
    "text": "they would have a guesstimation on how long had passed since the last time you asked for the",
    "start": "1756799",
    "end": "1762799"
  },
  {
    "text": "timestamp but a minute was never really a minute so you get something called clock drift",
    "start": "1762799",
    "end": "1768960"
  },
  {
    "text": "so when you if you send out your message now exactly on the minute mark in 15",
    "start": "1768960",
    "end": "1774000"
  },
  {
    "text": "minutes it will be like one or two seconds past the minute and that drifts through time",
    "start": "1774000",
    "end": "1781480"
  },
  {
    "text": "also people are stupid so they turn off their internet they unplug cables power goes out i mean you're gonna get gaps in",
    "start": "1781679",
    "end": "1788000"
  },
  {
    "text": "your data there's gonna be data that's missing and then the fun thing is when i",
    "start": "1788000",
    "end": "1793200"
  },
  {
    "text": "explained to you earlier that we had these optical sensors and we had the ones that talk to the serial ports most",
    "start": "1793200",
    "end": "1799279"
  },
  {
    "text": "of you probably thought that those serial ports would be the easy ones to deal with right but they were serial ports without error",
    "start": "1799279",
    "end": "1806080"
  },
  {
    "text": "correction so every once in a while you would get a flipped bit and if that flipped bit was",
    "start": "1806080",
    "end": "1811840"
  },
  {
    "text": "in your meter reading you would get like a huge spike and a huge dip and then your graph would continue as normal so",
    "start": "1811840",
    "end": "1817279"
  },
  {
    "text": "we wanted to filter that out as well and keeping into account that all of",
    "start": "1817279",
    "end": "1823039"
  },
  {
    "text": "these things might happen throughout your entire code base that's just way too much work we had logic dealing with",
    "start": "1823039",
    "end": "1829279"
  },
  {
    "text": "a lot of these problems in a lot of different places and when we um at one point we decided to centralize",
    "start": "1829279",
    "end": "1835600"
  },
  {
    "text": "it and do it in one place and that made things so much easier",
    "start": "1835600",
    "end": "1841039"
  },
  {
    "text": "so if you get this clock drifted data on the left um",
    "start": "1841760",
    "end": "1846960"
  },
  {
    "text": "you see that at this point the clock has drifted for about 25 seconds past the minute mark",
    "start": "1846960",
    "end": "1852080"
  },
  {
    "text": "and we're getting these meter readings right and we only care about the we only get the meter readings so we can",
    "start": "1852080",
    "end": "1858559"
  },
  {
    "text": "extrapolate the consumption from that but we only get the media readings but what we actually want is",
    "start": "1858559",
    "end": "1865120"
  },
  {
    "text": "data like this we decided for our applications that five minute buckets were fine but a lot of the devices would",
    "start": "1865120",
    "end": "1872159"
  },
  {
    "text": "report report more frequently so we would interpolate the data these are simple uh",
    "start": "1872159",
    "end": "1879200"
  },
  {
    "text": "interpolation um calculations we would interpolate it uh exactly on the five",
    "start": "1879200",
    "end": "1885039"
  },
  {
    "text": "minute mark we would calculate the consumption from um from the meter",
    "start": "1885039",
    "end": "1890240"
  },
  {
    "text": "readings so we would actually go from stuff like this to stuff on the right and hopefully end up with like an",
    "start": "1890240",
    "end": "1897519"
  },
  {
    "text": "extrapolated meter reading on the five minute mark and then there was gap filling",
    "start": "1897519",
    "end": "1905120"
  },
  {
    "text": "gap filling sounds easy right we miss a couple of the blue dots so let's do",
    "start": "1905120",
    "end": "1911440"
  },
  {
    "text": "something to the orange bars at the bottom so that we can continue because we want all of our downstream actors to",
    "start": "1911440",
    "end": "1917760"
  },
  {
    "text": "be dealing with a consistent stream where they get messages that are five minutes apart",
    "start": "1917760",
    "end": "1924399"
  },
  {
    "text": "now the question is how do we fill that and does the downstream do the downstream actors need to know about the",
    "start": "1924399",
    "end": "1930880"
  },
  {
    "text": "fact that it has been gap-filled because sometimes you don't you might not want to trigger",
    "start": "1930880",
    "end": "1937039"
  },
  {
    "text": "certain alert conditions when the data has been gap filled because it's never going to be correct",
    "start": "1937039",
    "end": "1944080"
  },
  {
    "text": "and the ones that you can all come up with really easily is we cannot fill it at all or put it in",
    "start": "1944080",
    "end": "1951919"
  },
  {
    "text": "as like one big big spike at the end or at the beginning or in the middle",
    "start": "1951919",
    "end": "1957360"
  },
  {
    "text": "or we can just divide it amongst the three buckets and get a flat line or we can look at the bucket before it and the",
    "start": "1957360",
    "end": "1962799"
  },
  {
    "text": "bucket after it and then plot the trend line between the two well all of this will look pretty okay",
    "start": "1962799",
    "end": "1969279"
  },
  {
    "text": "if you're missing three quarters it's gonna look like when you miss two days and i can tell you",
    "start": "1969279",
    "end": "1975279"
  },
  {
    "text": "more people than you would imagine have devices going offline for extended periods of time",
    "start": "1975279",
    "end": "1981360"
  },
  {
    "text": "so the solution that we ended up implementing was something that looked at the same time period the week before",
    "start": "1981360",
    "end": "1988320"
  },
  {
    "text": "and then scaled all the sizes of the buckets to make sure that the total sum matched up with the sum that we knew",
    "start": "1988320",
    "end": "1994799"
  },
  {
    "text": "that we were missing and that way we knew that the total sum at the end would end up and that it would match the bill that they were",
    "start": "1994799",
    "end": "2000880"
  },
  {
    "text": "getting from their electricity company so everybody was happy it looked a lot more correct it still",
    "start": "2000880",
    "end": "2007519"
  },
  {
    "text": "wasn't so take it all with a grain of salt um that was actually one of the harder problems",
    "start": "2007519",
    "end": "2013600"
  },
  {
    "text": "that we had to solve mathematically",
    "start": "2013600",
    "end": "2018600"
  },
  {
    "text": "now how do you do that if you have a device actor that takes in the data from the event stream what we're getting in",
    "start": "2018799",
    "end": "2025760"
  },
  {
    "text": "is the raw meter readings the numbers that are shown on the meters that is the stuff that we're getting in and that we",
    "start": "2025760",
    "end": "2031840"
  },
  {
    "text": "have to deal with so we spun up a child actor that was actually responsible for",
    "start": "2031840",
    "end": "2038080"
  },
  {
    "text": "um was responsible for for converting that into consistent data",
    "start": "2038080",
    "end": "2044559"
  },
  {
    "text": "it would keep into memory the last messages it got so it didn't have to go to disk or anything it just got work out",
    "start": "2044559",
    "end": "2050158"
  },
  {
    "text": "of memory and spawn like the normalized media meter readings and send them back",
    "start": "2050159",
    "end": "2055679"
  },
  {
    "text": "up to the device actor and from that from then on that one could distribute it to all",
    "start": "2055679",
    "end": "2062398"
  },
  {
    "text": "the downstream actors that needed to do anything with this data now this is also these a design pattern",
    "start": "2062399",
    "end": "2069440"
  },
  {
    "text": "that you'll see a lot and that you'll want to use a lot because it makes refactoring actor systems a lot easier",
    "start": "2069440",
    "end": "2075839"
  },
  {
    "text": "um it's called the parent proxy pattern where actors will talk to each other",
    "start": "2075839",
    "end": "2082240"
  },
  {
    "text": "through a common parent so you'll go up the tree until you hit the common parent and then escalate down",
    "start": "2082240",
    "end": "2088638"
  },
  {
    "text": "again this makes sure that if you refactor some of the actors and the way that the",
    "start": "2088639",
    "end": "2094720"
  },
  {
    "text": "hierarchy sits it doesn't affect anybody else",
    "start": "2094720",
    "end": "2100320"
  },
  {
    "text": "it doesn't affect anybody else and you don't need to refactor all the other branches be below the common parent as",
    "start": "2100320",
    "end": "2105520"
  },
  {
    "text": "well um so normalizing this data um",
    "start": "2105520",
    "end": "2111680"
  },
  {
    "text": "made it so that in all of the other actors we could just assume that we got five minute data and that made stuff so",
    "start": "2111680",
    "end": "2118640"
  },
  {
    "text": "much easier now you see we we had this gra this this",
    "start": "2118640",
    "end": "2124000"
  },
  {
    "text": "drawing about the actors uh sitting in our actor system and we have messages coming from um",
    "start": "2124000",
    "end": "2131839"
  },
  {
    "text": "from the iot hub at some point you're gonna have to try and get those those messages to your",
    "start": "2131839",
    "end": "2137680"
  },
  {
    "text": "central actor system and you're gonna need to be able to dispatch them to the device actor that i just showed you",
    "start": "2137680",
    "end": "2144960"
  },
  {
    "text": "and the package that you can use for that is a kada remote and the way this works is a little bit",
    "start": "2144960",
    "end": "2151760"
  },
  {
    "text": "tricky actor systems you cannot really",
    "start": "2151760",
    "end": "2157119"
  },
  {
    "text": "address another actor system from the outside you can address actors i showed you that",
    "start": "2157119",
    "end": "2163280"
  },
  {
    "text": "earlier you have your actor reference and you can do a tell and that will get dispatched to the inbox of that actor",
    "start": "2163280",
    "end": "2169920"
  },
  {
    "text": "but you cannot really address a remote actor system unless you do it from another actor system so actor systems",
    "start": "2169920",
    "end": "2176800"
  },
  {
    "text": "can talk to each other but you cannot talk to an actor that lives on the other side of the wire unless you have its",
    "start": "2176800",
    "end": "2182000"
  },
  {
    "text": "actor reference and this remote addressing is a very important",
    "start": "2182000",
    "end": "2189280"
  },
  {
    "text": "part you can remotely address an actor if you know its location and the",
    "start": "2189280",
    "end": "2195280"
  },
  {
    "text": "location is a protocol that you're going to use to talk to the other actor system that lives on the other side of the wire",
    "start": "2195280",
    "end": "2201920"
  },
  {
    "text": "you're going to need that actor system's name you're going to need the port and the ip address that it lives on and then",
    "start": "2201920",
    "end": "2208000"
  },
  {
    "text": "you're going to need to know the location in the actor tree to actually talk to it",
    "start": "2208000",
    "end": "2215838"
  },
  {
    "text": "now this address is encapsulated inside an actor reference and what is really",
    "start": "2215920",
    "end": "2221200"
  },
  {
    "text": "really cool is that you have something called location transparency",
    "start": "2221200",
    "end": "2226400"
  },
  {
    "text": "and location transparency is pretty cool",
    "start": "2226400",
    "end": "2231920"
  },
  {
    "text": "if you serialize that eye actor reference and you pass it on to another actor system that lives somewhere else",
    "start": "2231920",
    "end": "2238160"
  },
  {
    "text": "in your cluster or somewhere else in another actor system that is acting as a client",
    "start": "2238160",
    "end": "2244560"
  },
  {
    "text": "that actor reference will still work you can still use that to send a message",
    "start": "2244560",
    "end": "2249839"
  },
  {
    "text": "to an actor that lives somewhere else you don't even have to know what a reference to the actual extra system is",
    "start": "2249839",
    "end": "2255760"
  },
  {
    "text": "you can talk to that actor using the actual reference and that's what you need to end up using when you do things",
    "start": "2255760",
    "end": "2263520"
  },
  {
    "text": "like this so what we had is we had",
    "start": "2263520",
    "end": "2268640"
  },
  {
    "text": "a simple client actor system on the left and the left side system here is the app",
    "start": "2268640",
    "end": "2274880"
  },
  {
    "text": "service that i showed you the one that was wedged between the iot hub and our real cluster",
    "start": "2274880",
    "end": "2281200"
  },
  {
    "text": "and inside that app service we spun up a separate actor system that was responsible just for talking",
    "start": "2281200",
    "end": "2287599"
  },
  {
    "text": "to and relaying the messages to the device actors that lived on the other side",
    "start": "2287599",
    "end": "2293680"
  },
  {
    "text": "now that client actor system it's just something that we instantiated",
    "start": "2293920",
    "end": "2299040"
  },
  {
    "text": "in process just like i showed you earlier so what we did is if we",
    "start": "2299040",
    "end": "2304480"
  },
  {
    "text": "got a message for a device that we didn't have a proxy for yet is we used the",
    "start": "2304480",
    "end": "2311839"
  },
  {
    "text": "to create a top level actor in that actor system and that is the proxy that we were going to use to talk to the",
    "start": "2311839",
    "end": "2318320"
  },
  {
    "text": "device actor that lived on the other side inside the bigger cluster",
    "start": "2318320",
    "end": "2323520"
  },
  {
    "text": "and as soon as that actor spun up it would actually talk to the device manager on the other",
    "start": "2323920",
    "end": "2330720"
  },
  {
    "text": "side that is an actor that was managing all the device actors inside the cluster",
    "start": "2330720",
    "end": "2337359"
  },
  {
    "text": "and what that one did is check like okay do you already know about this device if yes it would just pass back the actor",
    "start": "2337359",
    "end": "2343599"
  },
  {
    "text": "reference to that device if not it would instantiate that actor and then send back",
    "start": "2343599",
    "end": "2350320"
  },
  {
    "text": "the i actor f to our proxy and from then on our proxy could actually use that extra reference to talk directly to the",
    "start": "2350320",
    "end": "2357920"
  },
  {
    "text": "device actor and this is also how we solved the bottleneck issue that device manager might be a",
    "start": "2357920",
    "end": "2363359"
  },
  {
    "text": "bottleneck if you try to send all your messages through that one so don't do that if you talk to individual device",
    "start": "2363359",
    "end": "2369119"
  },
  {
    "text": "actors directly you avoid that you have this bottleneck",
    "start": "2369119",
    "end": "2375760"
  },
  {
    "text": "now i want to show you a little bit how that works in code and we have something really cool that's called free start",
    "start": "2375760",
    "end": "2381200"
  },
  {
    "text": "pre-start is a method that you can use to do stuff in your actor before it",
    "start": "2381200",
    "end": "2386720"
  },
  {
    "text": "starts accepting its first messages so everything that you do in pre-start is called after the constructor has been",
    "start": "2386720",
    "end": "2393200"
  },
  {
    "text": "called then pre-start is called and only then do we start dispatching messages to this actor",
    "start": "2393200",
    "end": "2400480"
  },
  {
    "text": "and that one makes the connection to the other side and for that here we used something called an actor selection and",
    "start": "2400720",
    "end": "2406319"
  },
  {
    "text": "an actor selection is a lot slower than an actor reference but it's it allows you to talk to actors based on their",
    "start": "2406319",
    "end": "2413280"
  },
  {
    "text": "address so what we used is we we knew that the device manager was on the other side and",
    "start": "2413280",
    "end": "2418319"
  },
  {
    "text": "it was user slash devices so we used that to make an actor selection so that we could",
    "start": "2418319",
    "end": "2424319"
  },
  {
    "text": "actually send our connect request to the other side to the other actor system",
    "start": "2424319",
    "end": "2431040"
  },
  {
    "text": "and that would basically send the message back and if that message came back we would actually keep the reference the i actor reference um",
    "start": "2431040",
    "end": "2439680"
  },
  {
    "text": "from the other side so we get a device connected back and from then on we can actually use",
    "start": "2439680",
    "end": "2444800"
  },
  {
    "text": "that to talk to the device actor now you might have noticed that we're not doing untyped vectors anymore we're doing",
    "start": "2444800",
    "end": "2450960"
  },
  {
    "text": "typed actors the receive actors is the strongly typed version of the untyped actor that i",
    "start": "2450960",
    "end": "2456480"
  },
  {
    "text": "showed you earlier now what's cool about the receive actor is you can register handlers for certain",
    "start": "2456480",
    "end": "2463280"
  },
  {
    "text": "types of messages and that will feel a lot more comfortable for most of you is if you're",
    "start": "2463280",
    "end": "2468800"
  },
  {
    "text": "coming from a normal c c sharp background and what you do with this receive is",
    "start": "2468800",
    "end": "2474880"
  },
  {
    "text": "you're registering a handler so if you call receive again at some point you can actually switch the behavior of your",
    "start": "2474880",
    "end": "2481280"
  },
  {
    "text": "actor when a certain type of message comes in because it just replaces the handler for",
    "start": "2481280",
    "end": "2488319"
  },
  {
    "text": "that message from then on and this is also a pattern i'm not going to dive too deeply into that but that's something",
    "start": "2488319",
    "end": "2494000"
  },
  {
    "text": "that's also really important you want actors to have switchable behaviors for instance until we receive our device",
    "start": "2494000",
    "end": "2500880"
  },
  {
    "text": "connected back from the other side we might want to stash all the messages that we got from the stream",
    "start": "2500880",
    "end": "2506960"
  },
  {
    "text": "and then as soon as we become connected we replace the handler on that message we replay all the messages that we",
    "start": "2506960",
    "end": "2512640"
  },
  {
    "text": "stashed and then start handling the rest that comes in",
    "start": "2512640",
    "end": "2517920"
  },
  {
    "text": "it's a pattern that's not that hard to implement uh there there are methods to do so um inside",
    "start": "2517920",
    "end": "2524400"
  },
  {
    "text": "ico.net is the become and the unbecome messages um methods that you can use to do such things",
    "start": "2524400",
    "end": "2531680"
  },
  {
    "text": "and we just use the ixref that we got back to talk to the actor",
    "start": "2531680",
    "end": "2537680"
  },
  {
    "text": "on the other side and this is a tip that i'm going to give to all of you if you dive into this and",
    "start": "2537680",
    "end": "2544560"
  },
  {
    "text": "as i explained earlier props are a pointer to a certain constructor",
    "start": "2544560",
    "end": "2549599"
  },
  {
    "text": "and you have a params array of objects that you can pass along to that function to give the right",
    "start": "2549599",
    "end": "2556640"
  },
  {
    "text": "constructor parameters to your actor when it gets instantiated",
    "start": "2556640",
    "end": "2561680"
  },
  {
    "text": "but you can already feel that a params array is not really the way that you",
    "start": "2561680",
    "end": "2567280"
  },
  {
    "text": "want to deal with it because if you want to refactor something you might have runtime errors because",
    "start": "2567280",
    "end": "2573200"
  },
  {
    "text": "there's no compile time checks that you're actually using the correct number of arguments of",
    "start": "2573200",
    "end": "2578480"
  },
  {
    "text": "the correct type so what i usually do is i make a static method on every actor where the",
    "start": "2578480",
    "end": "2585200"
  },
  {
    "text": "parameters of that method map to the parameters that we see in the constructor which is at the top",
    "start": "2585200",
    "end": "2591839"
  },
  {
    "text": "of this file and then we do the props.create inside that function",
    "start": "2591839",
    "end": "2597760"
  },
  {
    "text": "now if i refactor this one my codebase breaks in all the places that i have used this actor and i can really re",
    "start": "2597760",
    "end": "2604800"
  },
  {
    "text": "really easily deal with it so that's a tip that you get from me",
    "start": "2604800",
    "end": "2610160"
  },
  {
    "text": "um in that device manager um on the other",
    "start": "2610160",
    "end": "2615760"
  },
  {
    "text": "side we're just gonna do very simple things and what is important here",
    "start": "2615760",
    "end": "2622319"
  },
  {
    "text": "are things we can just check if we already have a child that has this id",
    "start": "2622640",
    "end": "2629599"
  },
  {
    "text": "and then what we need is unique names i told you that the address is defined by",
    "start": "2629599",
    "end": "2635440"
  },
  {
    "text": "your place in the hierarchy if you would spin up 25 actors called device below the device manager they would all have",
    "start": "2635440",
    "end": "2641920"
  },
  {
    "text": "the same address i cannot we'll make them unique for you",
    "start": "2641920",
    "end": "2647680"
  },
  {
    "text": "but they will not have a controllable name so usually what you do is you'll put an id or a guide in there so that",
    "start": "2647680",
    "end": "2654720"
  },
  {
    "text": "you know which actor is which and then you'll use context.actoroff and this is how you",
    "start": "2654720",
    "end": "2660160"
  },
  {
    "text": "spin up a child if you use context it means it is the message processing contest context of your actor at that",
    "start": "2660160",
    "end": "2667200"
  },
  {
    "text": "time and you can use that to instantiate a child",
    "start": "2667200",
    "end": "2672880"
  },
  {
    "text": "and all you'll have to do is reply to the sender and there are a couple of properties that are really relevant",
    "start": "2672880",
    "end": "2679680"
  },
  {
    "text": "there and sender is the sender of the message that you're handling at that moment",
    "start": "2679680",
    "end": "2684800"
  },
  {
    "text": "and the actor system does this for you it sets this property before it dispatches the threats to process the",
    "start": "2684800",
    "end": "2691440"
  },
  {
    "text": "message so sender is a is a message that and a property that is always set",
    "start": "2691440",
    "end": "2696960"
  },
  {
    "text": "and that's also very valuable because there is a way to actually forward messages you can use tell",
    "start": "2696960",
    "end": "2704800"
  },
  {
    "text": "and i'm gonna come back to tell in a second you can use tell to send a message to um",
    "start": "2704800",
    "end": "2714079"
  },
  {
    "text": "to another actor you can always you also use forward and forward",
    "start": "2714079",
    "end": "2719200"
  },
  {
    "text": "is basically we're gonna preserve the sender of this message that we're processing right now",
    "start": "2719200",
    "end": "2725440"
  },
  {
    "text": "and we're gonna send the message along so when you're doing these proxy patterns what you can do is you can",
    "start": "2725440",
    "end": "2731599"
  },
  {
    "text": "reply to the original sender without knowing where that actor lives you can",
    "start": "2731599",
    "end": "2736640"
  },
  {
    "text": "just if you use forward and sender in the correct way you can basically get those patterns to",
    "start": "2736640",
    "end": "2743200"
  },
  {
    "text": "work really easily for you and in account net you have two ways of interacting with an actor you can do",
    "start": "2743200",
    "end": "2749680"
  },
  {
    "text": "tell which is basically i'm gonna put a message in your inbox and you're gonna be able to process it",
    "start": "2749680",
    "end": "2755920"
  },
  {
    "text": "process it you can also do ask and ask is basically i'm gonna put a",
    "start": "2755920",
    "end": "2761040"
  },
  {
    "text": "message in your inbox but i'm gonna wait for you to do a reply to sender so that i get a response from that actor",
    "start": "2761040",
    "end": "2769838"
  },
  {
    "text": "and there is a saying in the in the us military they have ask don't tell but when you're building",
    "start": "2770160",
    "end": "2775920"
  },
  {
    "text": "actor models they have tell don't ask basically what you'll want to do is you'll you'll try to avoid ask as much",
    "start": "2775920",
    "end": "2783200"
  },
  {
    "text": "as you can when do you use ask use ask when you want to get some data out of your",
    "start": "2783200",
    "end": "2788960"
  },
  {
    "text": "out of your actor system for instance on an on an edge of the system and you want to get something for",
    "start": "2788960",
    "end": "2795359"
  },
  {
    "text": "an api response that's an acceptable place to use ask like inside your actor system try and avoid it at all costs",
    "start": "2795359",
    "end": "2802400"
  },
  {
    "text": "because it only causes problems now we've been talking about actors for",
    "start": "2802400",
    "end": "2808720"
  },
  {
    "text": "45 minutes now and i've been always talking about them as if they just had",
    "start": "2808720",
    "end": "2813760"
  },
  {
    "text": "all of their state in memory and you've all felt the elephant in the room right if i recycle my process what happens to",
    "start": "2813760",
    "end": "2820960"
  },
  {
    "text": "my data and with what i told you until now your data will be gone",
    "start": "2820960",
    "end": "2827119"
  },
  {
    "text": "luckily we have solution for that because there's always a couple of actors that you really gonna want to reinstate with the correct state after",
    "start": "2827119",
    "end": "2834160"
  },
  {
    "text": "your system reboots and we've got a persistence library for",
    "start": "2834160",
    "end": "2839440"
  },
  {
    "text": "that um underlying it can use a lot of different things it can use a sql server",
    "start": "2839440",
    "end": "2844800"
  },
  {
    "text": "or azure to azure tables or a lot of different things and what you'll need to do is you'll",
    "start": "2844800",
    "end": "2850400"
  },
  {
    "text": "need to create a persistent actor and a persistent actor is an actor that will allow you",
    "start": "2850400",
    "end": "2856400"
  },
  {
    "text": "to preserve its state and to recreate that state after it has been",
    "start": "2856400",
    "end": "2861520"
  },
  {
    "text": "um after it has been recreated now there's a couple of",
    "start": "2861520",
    "end": "2867760"
  },
  {
    "text": "ideas you need to give it a unique persistence id id it is event sourced so what you will",
    "start": "2867760",
    "end": "2873280"
  },
  {
    "text": "do is you will persist the messages that mutate your state",
    "start": "2873280",
    "end": "2878480"
  },
  {
    "text": "and at some points you can also save a snapshot so that you don't have to replay all eternity when you recreate an",
    "start": "2878480",
    "end": "2884640"
  },
  {
    "text": "actor that's like a boot performance optimization that you might want to do",
    "start": "2884640",
    "end": "2890960"
  },
  {
    "text": "so how do you do that we have a couple of classes that you can inherit from and",
    "start": "2891200",
    "end": "2896640"
  },
  {
    "text": "they will all have persistent actor in their name this is the receive persistent actor",
    "start": "2896640",
    "end": "2902160"
  },
  {
    "text": "first thing you do is you give it a unique persistent id you can do that with the device guit in the constructor",
    "start": "2902160",
    "end": "2908880"
  },
  {
    "text": "and what i always do when i write persistent actors is i'll group all the",
    "start": "2908880",
    "end": "2914160"
  },
  {
    "text": "state into a state object it makes snapshotting a lot easier it",
    "start": "2914160",
    "end": "2919839"
  },
  {
    "text": "also makes reasoning about what is actually muting mutating my state also a lot easier um so that's why i usually",
    "start": "2919839",
    "end": "2927440"
  },
  {
    "text": "group that into one of those and then instead of receive we now have two methods we have command and recover",
    "start": "2927440",
    "end": "2936000"
  },
  {
    "text": "when an a persistent actor is created it will actually query the underlying",
    "start": "2936000",
    "end": "2943280"
  },
  {
    "text": "snapshot store and event store it will reinstate the snapshot it will replay",
    "start": "2943280",
    "end": "2950160"
  },
  {
    "text": "all of the events and only then it will start accepting new messages from the inbox",
    "start": "2950160",
    "end": "2957838"
  },
  {
    "text": "and commands is a message that comes from the inbox it's something that comes in from the outside recover is a message",
    "start": "2958400",
    "end": "2965520"
  },
  {
    "text": "that comes in from the persistence layer when the actor is recreated and you're gonna want to deal with these a little",
    "start": "2965520",
    "end": "2971520"
  },
  {
    "text": "bit differently you can also register for the recover snapshot event",
    "start": "2971520",
    "end": "2979119"
  },
  {
    "text": "which is basically what happens when the snapshot is fetched from the storage",
    "start": "2979119",
    "end": "2984160"
  },
  {
    "text": "technology that you're using and to reinstate the the actor's state you can also",
    "start": "2984160",
    "end": "2990559"
  },
  {
    "text": "deal with the because saving a snapshot is something that happens out of out of threat",
    "start": "2990559",
    "end": "2996559"
  },
  {
    "text": "so when you trigger a safe snapshot your threat will continue and it will be put on a queue for snap snapshots to save to",
    "start": "2996559",
    "end": "3003599"
  },
  {
    "text": "disk if it's important to you to know if this operation failed or succeeded you can register for the snapshot success",
    "start": "3003599",
    "end": "3010559"
  },
  {
    "text": "and snapshot failure which will be sent back to the uh the actor that tried to save the snapshot",
    "start": "3010559",
    "end": "3018240"
  },
  {
    "text": "usually you don't care that much you'll snapshot every once in a while and missing one is not that big of a deal",
    "start": "3018240",
    "end": "3026920"
  },
  {
    "text": "when a command comes in a command that is going to mutate your state you're one gonna want to persist",
    "start": "3028640",
    "end": "3034960"
  },
  {
    "text": "that to your storage technology and that command gets persisted in the event table and",
    "start": "3034960",
    "end": "3041599"
  },
  {
    "text": "you're gonna want to pair that with actually mutating your state so you have this persist",
    "start": "3041599",
    "end": "3046800"
  },
  {
    "text": "method that takes in your command message and that'll get persisted it will also",
    "start": "3046800",
    "end": "3052559"
  },
  {
    "text": "dispatch that to the method that actually mutates the stage uh the state which is my handle message internal and",
    "start": "3052559",
    "end": "3060000"
  },
  {
    "text": "incidentally that's the one that i'm gonna want to call on a recover because that will do all the state mutations",
    "start": "3060000",
    "end": "3065359"
  },
  {
    "text": "and snapshots are better done in the um",
    "start": "3065359",
    "end": "3071119"
  },
  {
    "text": "in the command part you don't want to trigger new snapshots while you're recovering i mean that's that's a loop",
    "start": "3071680",
    "end": "3077200"
  },
  {
    "text": "and a rabbit hole that you don't want to go into um and i told you that a state object makes",
    "start": "3077200",
    "end": "3082800"
  },
  {
    "text": "it a lot easier to reason about this if you have methods like this like state dot at and that adds your message to the",
    "start": "3082800",
    "end": "3089359"
  },
  {
    "text": "state object and that mutates all the fields inside it it makes life a lot easier",
    "start": "3089359",
    "end": "3096000"
  },
  {
    "text": "now when you get a snapshot back from disk",
    "start": "3096000",
    "end": "3101119"
  },
  {
    "text": "it's really easy you take the snapshot object from your snapshot offer you cast",
    "start": "3101119",
    "end": "3106880"
  },
  {
    "text": "it to whatever type you expect it to be and then you just replace your state object makes life so much easier and you",
    "start": "3106880",
    "end": "3114079"
  },
  {
    "text": "can register these i didn't do anything with it in the example but those are the ones that are going to trigger if you're",
    "start": "3114079",
    "end": "3119599"
  },
  {
    "text": "saving a snapshot field now how did we do that in our device",
    "start": "3119599",
    "end": "3124720"
  },
  {
    "text": "actor when normalized meter readings came in on the device actor you know",
    "start": "3124720",
    "end": "3129839"
  },
  {
    "text": "where these came for uh from it's the normalization actor that i talked about",
    "start": "3129839",
    "end": "3135200"
  },
  {
    "text": "a couple of examples ago that normalized meter reading comes on the in on the device actor and we actually",
    "start": "3135200",
    "end": "3142480"
  },
  {
    "text": "spawn a child which will deal with persistent persistence and we had a value storage actor and",
    "start": "3142480",
    "end": "3149119"
  },
  {
    "text": "that's an actor that was actually using the akka.net persistence mechanism",
    "start": "3149119",
    "end": "3156000"
  },
  {
    "text": "but that one only held the working set of data the working set of meter readings and and and consumptions that",
    "start": "3156000",
    "end": "3163839"
  },
  {
    "text": "we actually cared about for the operation of the system the window that you needed to trigger your alerts",
    "start": "3163839",
    "end": "3170319"
  },
  {
    "text": "or the window that the use user would usually query like one day maybe two",
    "start": "3170319",
    "end": "3175760"
  },
  {
    "text": "days worth of data all of the rest got relayed to a second actor that lived as a child of the",
    "start": "3175760",
    "end": "3181920"
  },
  {
    "text": "storage actor and that one would actually persist to cold starch being in our case just a simple sql",
    "start": "3181920",
    "end": "3188720"
  },
  {
    "text": "database but that's the data that only got queried occasionally and that we didn't need to get back when the system",
    "start": "3188720",
    "end": "3194720"
  },
  {
    "text": "rebooted it was fine living on cold storage until somebody queried it",
    "start": "3194720",
    "end": "3200079"
  },
  {
    "text": "but the hot set of data that's what we wanted to recover when the system rebooted because that that's what we",
    "start": "3200079",
    "end": "3205520"
  },
  {
    "text": "would generate our alerts against and so on and when we did that because i already",
    "start": "3205520",
    "end": "3211760"
  },
  {
    "text": "explained how that all worked when we did all that um",
    "start": "3211760",
    "end": "3217359"
  },
  {
    "text": "it became important to think about what happens if you recycle your cluster because there's a couple of things that",
    "start": "3217359",
    "end": "3223839"
  },
  {
    "text": "you want to do you recreate recreate all your actors that's not that hard to do",
    "start": "3223839",
    "end": "3230319"
  },
  {
    "text": "but you want to minimize how many of your persistent actors actually hit your",
    "start": "3231040",
    "end": "3237599"
  },
  {
    "text": "your persistence infrastructure because if you just build all of the actors as persistent actors yes you will",
    "start": "3237599",
    "end": "3244480"
  },
  {
    "text": "get all your state back but it's also going to be held to reinstate your cluster so what we did is we made",
    "start": "3244480",
    "end": "3251680"
  },
  {
    "text": "actually one value storage actor that persisted for every device",
    "start": "3251680",
    "end": "3258240"
  },
  {
    "text": "and all of the other ones the ones that needed state to operate for instance the value normalization actor that we talked",
    "start": "3258240",
    "end": "3264880"
  },
  {
    "text": "about earlier that one needs the previous message but it's not going to persist that",
    "start": "3264880",
    "end": "3271119"
  },
  {
    "text": "up on startup it will use its pre-start to request it from the value storage actor that we now just created and that",
    "start": "3271119",
    "end": "3277920"
  },
  {
    "text": "will actually make sure that that one can do its operation and also there we use those switchable behaviors to stash",
    "start": "3277920",
    "end": "3284880"
  },
  {
    "text": "stuff in the meanwhile same thing for alert actors those also needed a working set they would also query on startup the",
    "start": "3284880",
    "end": "3292240"
  },
  {
    "text": "value storage actor they would not persist their own state and that's how we got these system recycles up to an",
    "start": "3292240",
    "end": "3299040"
  },
  {
    "text": "acceptable speed and we made sure that we could actually reinstate the system after a redeploy really easily",
    "start": "3299040",
    "end": "3306640"
  },
  {
    "text": "yeah i already talked about all of this and we've got like five minutes left so",
    "start": "3306640",
    "end": "3311839"
  },
  {
    "text": "we've gotten to the point where i want to be that's good um there's so much stuff that i didn't talk",
    "start": "3311839",
    "end": "3317280"
  },
  {
    "text": "about today um first of all i talked about a lot of concepts today",
    "start": "3317280",
    "end": "3322319"
  },
  {
    "text": "but this is nowhere near what you need to run this in production um we didn't really talk about",
    "start": "3322319",
    "end": "3328400"
  },
  {
    "text": "configuration um configuring an actor system uses a language called hokon it's",
    "start": "3328400",
    "end": "3334400"
  },
  {
    "text": "the human optimized configuration object notation i always have to think about that one for a",
    "start": "3334400",
    "end": "3339920"
  },
  {
    "text": "second it's something that comes from jvm aka that they ported to net it looks a bit",
    "start": "3339920",
    "end": "3346400"
  },
  {
    "text": "like like jason but it's not fella jason so there there's that um",
    "start": "3346400",
    "end": "3352240"
  },
  {
    "text": "you'll need to set up your cluster we didn't really talk about what goes into that you'll when you're doing clustering",
    "start": "3352240",
    "end": "3357760"
  },
  {
    "text": "you're gonna have to think mainly about how am i sharding my top level actors or like my just below top level",
    "start": "3357760",
    "end": "3364960"
  },
  {
    "text": "actors because that's going to be the tricky part if you have a correct sharding mechanism to divide your actors",
    "start": "3364960",
    "end": "3371680"
  },
  {
    "text": "across all your cluster notes you can basically scale to infinity",
    "start": "3371680",
    "end": "3376799"
  },
  {
    "text": "but that's the stuff that goes into that and your clustering setup if you spawn children they live on the same note",
    "start": "3376799",
    "end": "3382960"
  },
  {
    "text": "unless you tell them otherwise so that's the easy part for us it meant distributing the device actors across",
    "start": "3382960",
    "end": "3389599"
  },
  {
    "text": "the notes and that made sure that we could scale out the cluster you're gonna want to lock things um",
    "start": "3389599",
    "end": "3397359"
  },
  {
    "text": "there's adapters for all the popular.net logging frameworks so that's not really that",
    "start": "3397359",
    "end": "3403440"
  },
  {
    "text": "tricky there is dependency injection and the reason i mentioned it is because that's",
    "start": "3403440",
    "end": "3408960"
  },
  {
    "text": "like a huge anti-pattern if you feel the need to inject a complete object graph",
    "start": "3408960",
    "end": "3414160"
  },
  {
    "text": "into every actor you're probably doing something wrong and so you'll need to think about redesigning that but there",
    "start": "3414160",
    "end": "3420720"
  },
  {
    "text": "is support for di containers and if you want to monitor your system",
    "start": "3420720",
    "end": "3426160"
  },
  {
    "text": "in production like monitor inbox sizes queue times how many actors you have on each note all that sort of stuff there",
    "start": "3426160",
    "end": "3433119"
  },
  {
    "text": "is a phobos which is basically the only paid net component it is built by petabridge",
    "start": "3433119",
    "end": "3440000"
  },
  {
    "text": "licensing is affordable it's probably around four thousand dollars for a company-wide license a year",
    "start": "3440000",
    "end": "3446799"
  },
  {
    "text": "if you're doing something of this scale that should not be an issue for you but it allows you also to plug into um some",
    "start": "3446799",
    "end": "3453200"
  },
  {
    "text": "of the popular dashboarding systems and uh and logging systems so that's really powerful",
    "start": "3453200",
    "end": "3459359"
  },
  {
    "text": "so if you're triggered after this and you want to start learning there is an awesome boot camp on github that",
    "start": "3459359",
    "end": "3464480"
  },
  {
    "text": "familiar familiarizes you with a lot of the basic concepts of ico.net and you",
    "start": "3464480",
    "end": "3469839"
  },
  {
    "text": "can go and follow that and you can do that on your own there's some stuff on on sites like",
    "start": "3469839",
    "end": "3476720"
  },
  {
    "text": "youtube and pluralsight the petabridge block is a gold mine i",
    "start": "3476720",
    "end": "3481839"
  },
  {
    "text": "mean i really love all the people at petabridge who are building this because they really light right",
    "start": "3481839",
    "end": "3489200"
  },
  {
    "text": "very thoughtful blog posts posts about all the new features they release about all the stuff that they run into so if",
    "start": "3489200",
    "end": "3495680"
  },
  {
    "text": "you dig in there you're probably gonna find the info that you want um you can get remote training from them",
    "start": "3495680",
    "end": "3502240"
  },
  {
    "text": "that is paid but it's really good and you get it from the people who actually built this stuff so that is um a huge",
    "start": "3502240",
    "end": "3509040"
  },
  {
    "text": "plus and then there's one thing that is was the most worrisome for us it's",
    "start": "3509040",
    "end": "3515520"
  },
  {
    "text": "deployment i mean redeploying your cluster is something that you're gonna do on new features quite a lot",
    "start": "3515520",
    "end": "3522079"
  },
  {
    "text": "but it's also a scary part because at some point you're gonna need to take down the cluster and and spin it back up",
    "start": "3522079",
    "end": "3528000"
  },
  {
    "text": "and that's the moment that you'll lose all your inboxes right um so what we did is we",
    "start": "3528000",
    "end": "3534720"
  },
  {
    "text": "paused the app service that i talked about in the beginning um i'm getting into ooh the timer gets",
    "start": "3534720",
    "end": "3541040"
  },
  {
    "text": "red when you go into the last minute so we're almost there you pause that",
    "start": "3541040",
    "end": "3546160"
  },
  {
    "text": "so that you don't get any any incoming messages on the cluster um you wait for the processing of all your",
    "start": "3546160",
    "end": "3553119"
  },
  {
    "text": "inboxes to end so that's something that you will want to monitor and that's the moment that you can actually redeploy",
    "start": "3553119",
    "end": "3559200"
  },
  {
    "text": "reboot let persistence do its work and you'll recreate your actors and then",
    "start": "3559200",
    "end": "3565520"
  },
  {
    "text": "you can resume sending from the event stream and if you do this right you're not gonna miss a beat",
    "start": "3565520",
    "end": "3571359"
  },
  {
    "text": "but you'll have to automate this right um if you do this by hand it'll go wrong",
    "start": "3571359",
    "end": "3576400"
  },
  {
    "text": "eventually and then you're in a huge  storm ask me how i know",
    "start": "3576400",
    "end": "3581440"
  },
  {
    "text": "so my conclusion um check if you have a problem that is actually fit for actor models um decide",
    "start": "3581440",
    "end": "3588720"
  },
  {
    "text": "which part of your solution you're going to use icon.net for design your extra hierarchies",
    "start": "3588720",
    "end": "3594480"
  },
  {
    "text": "appropriately so that you don't get bottleneck actors and so that you can easily chart the important parts across",
    "start": "3594480",
    "end": "3600240"
  },
  {
    "text": "your cluster normalizing data is something that is going to help you a lot not just in an",
    "start": "3600240",
    "end": "3606240"
  },
  {
    "text": "actor system but in any message driven data stream and you're going to have to think about",
    "start": "3606240",
    "end": "3612400"
  },
  {
    "text": "what happens when you recycle stuff because that's one of the harder problems my name is hannes i'm the head",
    "start": "3612400",
    "end": "3617680"
  },
  {
    "text": "of learning and development at a company in belgium called access this is my twitter handle and my icq",
    "start": "3617680",
    "end": "3623200"
  },
  {
    "text": "number i'm trying to make icq great again you'll find a whole repository with all",
    "start": "3623200",
    "end": "3628240"
  },
  {
    "text": "the code samples and more that i used today so if you check out that repo a lot of the concepts are going to be in",
    "start": "3628240",
    "end": "3634000"
  },
  {
    "text": "there and you can explore that on your own i'm already over time it says time up",
    "start": "3634000",
    "end": "3640000"
  },
  {
    "text": "here so what i suggest is if you have questions i'm going to make room for the next speaker but hit me up in the",
    "start": "3640000",
    "end": "3645119"
  },
  {
    "text": "hallway and you can ask me anything thank you so much for being here",
    "start": "3645119",
    "end": "3650530"
  },
  {
    "text": "[Applause]",
    "start": "3650530",
    "end": "3657629"
  },
  {
    "text": "you",
    "start": "3665520",
    "end": "3667599"
  }
]