[
  {
    "text": "good morning Porto woo are you all excited to be here",
    "start": "80",
    "end": "7040"
  },
  {
    "text": "excellent so to show our appreciation for this really amazing conference do you want to give a round of applause to",
    "start": "7040",
    "end": "12400"
  },
  {
    "text": "the organizers",
    "start": "12400",
    "end": "17520"
  },
  {
    "text": "awesome thank you now everyone else is going to be truly confused that I",
    "start": "17520",
    "end": "22640"
  },
  {
    "text": "finished very early we're going to be spending the next hour talking about what's new in net 9 and C 13 there's",
    "start": "22640",
    "end": "29240"
  },
  {
    "text": "quite a lot happening with both the runtime the platform itself the SDK the",
    "start": "29240",
    "end": "34360"
  },
  {
    "text": "language the tooling so there's a lot that we're going to be discovering here today it's going to be a little bit of a roller coaster before that my name is",
    "start": "34360",
    "end": "40800"
  },
  {
    "text": "Philip eberg I've been here a couple of times before and I do always like to tell people to send me emails ping me on",
    "start": "40800",
    "end": "47000"
  },
  {
    "text": "Twitter let me know if you have any questions I'm always happy to talk about what's happening with c and net in",
    "start": "47000",
    "end": "53320"
  },
  {
    "text": "general so with that out of the way we're going to talk about net right now the latest stable version or the latest",
    "start": "53320",
    "end": "60199"
  },
  {
    "text": "supported version is net 8 net 9 will be released in November which is it's just",
    "start": "60199",
    "end": "66240"
  },
  {
    "text": "in a couple of weeks every year Microsoft releases one iteration of net every second year that's a longtime",
    "start": "66240",
    "end": "72560"
  },
  {
    "text": "support version what they try to do now is focus on stability and performance and not maybe introducing so many",
    "start": "72560",
    "end": "79439"
  },
  {
    "text": "groundbreaking features there are a couple of features that are really interesting in doet 9 and we're going to",
    "start": "79439",
    "end": "85000"
  },
  {
    "text": "be trying to look at a couple of those here today so let's start off talking about exactly what's happening with net",
    "start": "85000",
    "end": "90640"
  },
  {
    "text": "9 they're kind of focusing on developer productivity and performance performance",
    "start": "90640",
    "end": "96200"
  },
  {
    "text": "has been a really important aspect of building net over the past decade I",
    "start": "96200",
    "end": "101479"
  },
  {
    "text": "would say especially since Net 5 six 7 and and 8 and N so what's actually the",
    "start": "101479",
    "end": "108680"
  },
  {
    "text": "contents of a net release there's quite a lot of things when you talk about net it's not just like it used to be the",
    "start": "108680",
    "end": "115560"
  },
  {
    "text": "framework there's a lot of things around Net that's important with a release off of net so with net 9 they focus on the",
    "start": "115560",
    "end": "123759"
  },
  {
    "text": "stability portions that goes for both mobile development using Blazer doing things in the runtime making things",
    "start": "123759",
    "end": "131000"
  },
  {
    "text": "faster in general and more stable and that also brings us into the performance pieces they do a lot of work making",
    "start": "131000",
    "end": "138000"
  },
  {
    "text": "things a lot faster be it how the compiler compiles the application optimizing the instructions that that",
    "start": "138000",
    "end": "144280"
  },
  {
    "text": "use but also introducing performance apis and Performance Tools in the framework in the runtime and we're going",
    "start": "144280",
    "end": "151160"
  },
  {
    "text": "to look at a couple of that those improvements here today as well there's also a focus on productivity and that's",
    "start": "151160",
    "end": "156800"
  },
  {
    "text": "not only in terms of using visual studio and visual studio code but also in terms of making it easier to use certain apis",
    "start": "156800",
    "end": "163720"
  },
  {
    "text": "in net making it easier to write more flexible and scalable code and doing so in a quite easy Manner and also letting",
    "start": "163720",
    "end": "170800"
  },
  {
    "text": "us know if we're doing something incorrectly and of course they're also focusing on security be that",
    "start": "170800",
    "end": "176959"
  },
  {
    "text": "improvements of the cryptographic apis or making sure that we are using the best practices when it comes to for",
    "start": "176959",
    "end": "183560"
  },
  {
    "text": "example open ID connect which has a really groundbreaking change in net 9",
    "start": "183560",
    "end": "189879"
  },
  {
    "text": "there's also of course focus on web and tooling and mobile and a lot more such",
    "start": "189879",
    "end": "195319"
  },
  {
    "text": "as the languages so when we talk about a release of net it's going to be all of these different things which is quite a",
    "start": "195319",
    "end": "201720"
  },
  {
    "text": "lot to cover in an hour so I've picked my favorite pieces of net together with the language but it all really boils",
    "start": "201720",
    "end": "208280"
  },
  {
    "text": "down to one thing and that's really building anything we can build any application for any platform and they",
    "start": "208280",
    "end": "214439"
  },
  {
    "text": "also want us to be able to build it from any platform so if we're working on Linux or Mac OS or Windows it doesn't",
    "start": "214439",
    "end": "220879"
  },
  {
    "text": "really matter as long as we publish this to Asher and pay Microsoft money they're all",
    "start": "220879",
    "end": "226799"
  },
  {
    "text": "happy that's the end goal though right net is free C is free but eventually",
    "start": "226799",
    "end": "232159"
  },
  {
    "text": "they want to get uh money from somewhere which is why they make the experience using ashure quite great as well now if",
    "start": "232159",
    "end": "238680"
  },
  {
    "text": "we want to use in C and use the latest version of net then we also get the",
    "start": "238680",
    "end": "244040"
  },
  {
    "text": "latest version of the language together with that so when we're using the latest version of net and the latest version of",
    "start": "244040",
    "end": "250680"
  },
  {
    "text": "Visual Studio or vs code and its tooling you will also get the language features uh from that as well while you can use",
    "start": "250680",
    "end": "258239"
  },
  {
    "text": "newer versions of C with older versions of net that's not really supported and",
    "start": "258239",
    "end": "263280"
  },
  {
    "text": "not something really you should experiment with all right so let's talk about some of the important pieces of",
    "start": "263280",
    "end": "268840"
  },
  {
    "text": "net 9 we have all these performance improvements over the years that's been working with spans of tea and allowing",
    "start": "268840",
    "end": "275520"
  },
  {
    "text": "us to ranges and slice off data and do that very efficiently they continue to do that by enabling us to use the spans",
    "start": "275520",
    "end": "282479"
  },
  {
    "text": "with more apis and and the runtime will make use of that and the built-in stuff",
    "start": "282479",
    "end": "287720"
  },
  {
    "text": "in net will make use of that as well but performance is also about fine-tuning things internally so bear with me here",
    "start": "287720",
    "end": "295240"
  },
  {
    "text": "there's when we're using the 64-bit compiler and that sees a for for Loop it",
    "start": "295240",
    "end": "301759"
  },
  {
    "text": "will take the integer like 4 I is equal to zero that will be a 4 byte on um on",
    "start": "301759",
    "end": "308720"
  },
  {
    "text": "the stack but when you're accessing an array inside that for Loop that will have to be converted into an 8bit number",
    "start": "308720",
    "end": "316440"
  },
  {
    "text": "or an 8 byte number so what they've done is to in introduce something called induction variable widening this is very",
    "start": "316440",
    "end": "323680"
  },
  {
    "text": "low-level stuff but basically that means they reduce one instruction for the CPU",
    "start": "323680",
    "end": "328800"
  },
  {
    "text": "to use with each for with each for Loop or for with each iteration and I guess",
    "start": "328800",
    "end": "335520"
  },
  {
    "text": "all of us here are actually using for Loops so by introducing this performance Improvement they can speed up our",
    "start": "335520",
    "end": "342199"
  },
  {
    "text": "applications marginally for all of us without us having to do anything that type of work together with allowing us",
    "start": "342199",
    "end": "349080"
  },
  {
    "text": "to use span offt is something that makes our applications a lot more performant and the idea here is that we can just",
    "start": "349080",
    "end": "355800"
  },
  {
    "text": "upgrade to the latest version of net and we're going to get all of this by default by just recompiling the",
    "start": "355800",
    "end": "362000"
  },
  {
    "text": "application we're going to be looking at some of the system. Tex Jason Json changes they've introduced feature",
    "start": "362000",
    "end": "368319"
  },
  {
    "text": "switches we're going to talk about some improvements to time spans there's debugging improvements that I want to",
    "start": "368319",
    "end": "373599"
  },
  {
    "text": "show you as well they've also deprecated the binary formatter is anyone in here using the binary",
    "start": "373599",
    "end": "380000"
  },
  {
    "text": "formatter I'm sorry with net nights actually two out of what 150 people are",
    "start": "380000",
    "end": "385560"
  },
  {
    "text": "using the binary format there's a strategy for how you can position from that but it's now fully deprecated and",
    "start": "385560",
    "end": "392080"
  },
  {
    "text": "no longer available in net 9 so you have to find a way forward basically and there's a lot more of course there's a",
    "start": "392080",
    "end": "399280"
  },
  {
    "text": "lot more in net they've done some work with link by adding group buy and aggregate byy for example but we won't",
    "start": "399280",
    "end": "405440"
  },
  {
    "text": "have time to look at all of that I only have an hour and I'd like to go through as much as possible uh in visual studio",
    "start": "405440",
    "end": "412039"
  },
  {
    "text": "and show you a lot of interesting demos so as you'll see here I have a couple of demos for the base.net stuff this is",
    "start": "412039",
    "end": "418520"
  },
  {
    "text": "basically what's available in all different applications using net 9 no matter if it's hp. net core Blazer",
    "start": "418520",
    "end": "426759"
  },
  {
    "text": "net Maui a Windows application and so forth some of these are a little bit smaller than the others but hopefully",
    "start": "426759",
    "end": "434400"
  },
  {
    "text": "you'll all find a little bit of a nugget that you can apply in your applications the first one is using what's known as a",
    "start": "434400",
    "end": "440360"
  },
  {
    "text": "b 64 URL encoding how many you're using B 64 URL encoding almost all of you now",
    "start": "440360",
    "end": "448520"
  },
  {
    "text": "traditionally when we we have our B right here and we want to B 64 URL B 64 encode this we then also have to apply",
    "start": "448520",
    "end": "456599"
  },
  {
    "text": "some string replace or run this through a a URL encoder but now we have an API",
    "start": "456599",
    "end": "462599"
  },
  {
    "text": "available for us built into net that allows us to do this so of course if I run this you'll see here that the data",
    "start": "462599",
    "end": "469479"
  },
  {
    "text": "that I get here let's zoom in here at the end here we have a slash which is not something that works when it's",
    "start": "469479",
    "end": "476240"
  },
  {
    "text": "supposed to be in a URL and therefore we have to replace the slash with an under score and that would require an extra",
    "start": "476240",
    "end": "481680"
  },
  {
    "text": "operation an extra method call and more allocations having this built into net and doing this as performance as",
    "start": "481680",
    "end": "487840"
  },
  {
    "text": "possible means that we can reduce allocations we can have more performant code as well small addition but it's nice to",
    "start": "487840",
    "end": "494199"
  },
  {
    "text": "have that as a part of the the net um I'm not going to call it a framework but it is a collection of things right now",
    "start": "494199",
    "end": "502520"
  },
  {
    "text": "next up which is a little bit more interesting they've introduced a concept called collection lookups with",
    "start": "502520",
    "end": "508199"
  },
  {
    "text": "spans so said this is going to be a roller coaster of different things we're going to look at a lot of different features of both net net Aspire um the",
    "start": "508199",
    "end": "516120"
  },
  {
    "text": "SDK we're going to look at the language features as well but here you know I can",
    "start": "516120",
    "end": "521320"
  },
  {
    "text": "implicitly convert a string into a readon span of character so here I can say I have the string philli this can",
    "start": "521320",
    "end": "527800"
  },
  {
    "text": "always be implicitly converted into a readon span of a character a span is simply a way for you to represent a",
    "start": "527800",
    "end": "534399"
  },
  {
    "text": "piece of memory be like pointers right so it points to a start and the end of something in this this case here it's a",
    "start": "534399",
    "end": "540360"
  },
  {
    "text": "content of characters and I have a dictionary of a string and a string here",
    "start": "540360",
    "end": "546079"
  },
  {
    "text": "since a read only span of a character could be implicitly converted into a string would I be able to then say I'd",
    "start": "546079",
    "end": "553399"
  },
  {
    "text": "like to use my cache and use the key uh which is a readon span of character but",
    "start": "553399",
    "end": "558720"
  },
  {
    "text": "I cannot do that so the only way to solve this in net 8 would have been to introduce an extra allocation which is",
    "start": "558720",
    "end": "565640"
  },
  {
    "text": "not essentially a good idea right cuz now I'm doing an a an extra method call I have extra allocations on my stack and",
    "start": "565640",
    "end": "573959"
  },
  {
    "text": "on my Heap as well uh which is not very good so they've introduced a concept called um uh an alternative lookup so I",
    "start": "573959",
    "end": "583320"
  },
  {
    "text": "can now say that from my dictionary called a cache I'm going to get an alternate lookup based off a readon span",
    "start": "583320",
    "end": "591200"
  },
  {
    "text": "of a character so now this gives me a way to then work with my dictionary with this different type of lookup basically",
    "start": "591200",
    "end": "598120"
  },
  {
    "text": "what I can say is like hey in my lookup I'm going to use this key here which is",
    "start": "598120",
    "end": "603720"
  },
  {
    "text": "really just allowing me to access elements inside my dictionary using a span instead and the reason we want to",
    "start": "603720",
    "end": "610040"
  },
  {
    "text": "be able to do this is because a lot of data now should be actually stored in",
    "start": "610040",
    "end": "615240"
  },
  {
    "text": "spans or read only spans especially if you're working with net components that are optimized for",
    "start": "615240",
    "end": "620839"
  },
  {
    "text": "performance this here is all possible because there's a new feature in C 13",
    "start": "620839",
    "end": "626440"
  },
  {
    "text": "that that is called allow ref structs so what I can do is that I can use my lookup which will then look up something",
    "start": "626440",
    "end": "633120"
  },
  {
    "text": "in the dictionary based off my read only span of a character I find this pretty interesting as well so more apis",
    "start": "633120",
    "end": "640040"
  },
  {
    "text": "internally will allow us to then leverage these highly performant types all right so next up is a I would",
    "start": "640040",
    "end": "647680"
  },
  {
    "text": "say an important feature as well a little bit of a smaller one how many of you using feature",
    "start": "647680",
    "end": "653279"
  },
  {
    "text": "switches not nearly enough okay so about 10%",
    "start": "653279",
    "end": "659720"
  },
  {
    "text": "feature switches is a way for me to toggle things on and off we can do this in different ways I can have a feature",
    "start": "659720",
    "end": "665240"
  },
  {
    "text": "switch that enables something when the application is running based off a key in Asher for example I could also have a",
    "start": "665240",
    "end": "671560"
  },
  {
    "text": "feature switch that disables code when I compile my application imagine I have my CDN C",
    "start": "671560",
    "end": "678639"
  },
  {
    "text": "pipeline that compiles one application version for development and one for production the development version might",
    "start": "678639",
    "end": "685639"
  },
  {
    "text": "have some experimental features but the release version of that build shouldn't have those experimental features turned",
    "start": "685639",
    "end": "691160"
  },
  {
    "text": "on now in net 9 this is something that's built in by default so I'm going to show",
    "start": "691160",
    "end": "696360"
  },
  {
    "text": "you a little bit of a sample here I have this class called a user service the user service should have a flag telling",
    "start": "696360",
    "end": "702800"
  },
  {
    "text": "me that if a feature is enabled or not this is dictated by introducing an",
    "start": "702800",
    "end": "707959"
  },
  {
    "text": "attribute called feature switch definition and to make it easy I've just named it the class name as well as the",
    "start": "707959",
    "end": "714360"
  },
  {
    "text": "property name and then where the magic happens is that I'm saying here that from this I'm going to get rid of my",
    "start": "714360",
    "end": "720639"
  },
  {
    "text": "regions here just to make it easier for you all to read and",
    "start": "720639",
    "end": "726200"
  },
  {
    "text": "now I'm saying that well based on my application context I'm going to try and get a feature switch called the same",
    "start": "726200",
    "end": "731519"
  },
  {
    "text": "thing if it's enabled I'm going to return true if it's disabled I'm going to return false so this looks very",
    "start": "731519",
    "end": "736639"
  },
  {
    "text": "simple it basically just looks up a specific key inside the Cs Pro File",
    "start": "736639",
    "end": "742959"
  },
  {
    "text": "this is where this feature becomes a little bit difficult to work with because you have to introduce an item group with a",
    "start": "742959",
    "end": "748880"
  },
  {
    "text": "run time host configuration option with the exact name and then of course the value if this feature toggle is turned",
    "start": "748880",
    "end": "754680"
  },
  {
    "text": "on or not but where it's extra interesting is with this second parameter called trim which is now",
    "start": "754680",
    "end": "760440"
  },
  {
    "text": "saying that when I publish this it's going to trim the application and what",
    "start": "760440",
    "end": "766120"
  },
  {
    "text": "that actually means is that all the code that relies on this feature switch for example if is enabled is false here it",
    "start": "766120",
    "end": "772760"
  },
  {
    "text": "will remove that from the compiled binary so that will actually not be included at all unless I recompile the application",
    "start": "772760",
    "end": "781079"
  },
  {
    "text": "which is why we have this in the Cs prod file so that Ms build can look at this so feature switches are an interesting",
    "start": "781079",
    "end": "787040"
  },
  {
    "text": "addition as well there's also a lot of improvements to system. text.",
    "start": "787040",
    "end": "793040"
  },
  {
    "text": "Json so how many of you using Newton soft. Json still how many are using system. tex.",
    "start": "793040",
    "end": "800639"
  },
  {
    "text": "Json the other half interesting should we have an open",
    "start": "800639",
    "end": "805760"
  },
  {
    "text": "fight about which one is the best let's do it so system. tex. Json was never meant to",
    "start": "805760",
    "end": "812720"
  },
  {
    "text": "be a fully replacement for Newton soft. Json because newtonsoft dojon allows you",
    "start": "812720",
    "end": "818160"
  },
  {
    "text": "to deserialize and serialize stuff that's complex and it can do so with",
    "start": "818160",
    "end": "823399"
  },
  {
    "text": "malform Json it can just understand anything system. text. Json is built for",
    "start": "823399",
    "end": "829160"
  },
  {
    "text": "performance it's and it's it's made because they want a performant",
    "start": "829160",
    "end": "834240"
  },
  {
    "text": "alternative and now they're of course introducing things that everyone wants as well which might make it a little bit",
    "start": "834240",
    "end": "839800"
  },
  {
    "text": "less performant but they have to make a trade of somewhere so there's one option called indentation options and here's",
    "start": "839800",
    "end": "845800"
  },
  {
    "text": "where we're going to have the second fight of the this talk uh I can now say that which character I want to indent my",
    "start": "845800",
    "end": "851600"
  },
  {
    "text": "code with should we use tabs or spaces",
    "start": "851600",
    "end": "857639"
  },
  {
    "text": "tabs oh spaces so the rest of you that didn't",
    "start": "857639",
    "end": "863240"
  },
  {
    "text": "raise your hands for either of them what do you want like an at actually this is not going to work",
    "start": "863240",
    "end": "870160"
  },
  {
    "text": "work should have raised your hand so this is actually going to look at if",
    "start": "870160",
    "end": "875320"
  },
  {
    "text": "it's tab or a Bas so they're kind of forcing us into using one of one or the other but this is nice so now I can I",
    "start": "875320",
    "end": "881639"
  },
  {
    "text": "can specify exactly how I want this indented when I when I output this and I have to also then say that I want to",
    "start": "881639",
    "end": "886959"
  },
  {
    "text": "write this as indented as well so that when I output this it's actually readable now the next Improvement is to",
    "start": "886959",
    "end": "894199"
  },
  {
    "text": "allow us to use a a um a predefined client here a singl ton to say that I",
    "start": "894199",
    "end": "901079"
  },
  {
    "text": "want this to be using the asp.net core defaults so there's now a singlet ton saying I want to use the Json serializer",
    "start": "901079",
    "end": "907839"
  },
  {
    "text": "options that are built for the web and this will be identical to what you would then get for asp.net core it will be",
    "start": "907839",
    "end": "914839"
  },
  {
    "text": "camel case and no spaces and no tabs no white space at all basically now how many of you have heard",
    "start": "914839",
    "end": "921839"
  },
  {
    "text": "of open API oh almost all of you amazing so we",
    "start": "921839",
    "end": "927360"
  },
  {
    "text": "can now actually use a exporter so open API is a specification to allow us to",
    "start": "927360",
    "end": "933040"
  },
  {
    "text": "represent our apis and our objects to get a representation of what it requires",
    "start": "933040",
    "end": "938600"
  },
  {
    "text": "you to specify when creating that the data types and essentially it's just adjacent representation of your data and",
    "start": "938600",
    "end": "945480"
  },
  {
    "text": "your endpoints in hp. net core but here I can say that I have a Jason schema exporter and I can say that I'd like to",
    "start": "945480",
    "end": "952160"
  },
  {
    "text": "get a representation of a class user and it's going to use my default Json",
    "start": "952160",
    "end": "957279"
  },
  {
    "text": "serializer options I could of course change this to web to make it then representable and use the hp. N core",
    "start": "957279",
    "end": "963959"
  },
  {
    "text": "defaults so when I run this I'm going to run this method called export",
    "start": "963959",
    "end": "969639"
  },
  {
    "text": "schema this will actually output exactly what my object is is is containing so we",
    "start": "970759",
    "end": "976759"
  },
  {
    "text": "can see here that it's an object it has a couple of different properties and two of them are in fact required as well so",
    "start": "976759",
    "end": "983319"
  },
  {
    "text": "it will maintain those annotations as well which is tremendously useful and",
    "start": "983319",
    "end": "988440"
  },
  {
    "text": "something that needed when we then deserialize our object so we need to know exactly what's required and not and",
    "start": "988440",
    "end": "993920"
  },
  {
    "text": "the schema exporter is something that the open API addition to asp.net core which I'm going to show you later is",
    "start": "993920",
    "end": "999920"
  },
  {
    "text": "relying on and we could have this as a part of the build process so that it generates the schema when we build the",
    "start": "999920",
    "end": "1005480"
  },
  {
    "text": "application and not actually expose a full endpoint in hp. net core but we'll get to that later on we can also",
    "start": "1005480",
    "end": "1013399"
  },
  {
    "text": "introduce uh something called respect nullable annotations so when I've set up my Json sterilizer option",
    "start": "1013399",
    "end": "1020240"
  },
  {
    "text": "I can say that I'd like you to respect The nullable annotation The nullable annotation",
    "start": "1020240",
    "end": "1026079"
  },
  {
    "text": "is this here the question mark or if it's a",
    "start": "1026079",
    "end": "1031600"
  },
  {
    "text": "nullable reference type or not and it should respect that um in",
    "start": "1031600",
    "end": "1036760"
  },
  {
    "text": "this should really be the default so now if I try to deserialize an object where I've said that well first name can be",
    "start": "1036760",
    "end": "1043798"
  },
  {
    "text": "null in this case here which would be valid Json but if the deserializer says that it has to respect the nullable",
    "start": "1043799",
    "end": "1050520"
  },
  {
    "text": "annotations and by default string first name shouldn't be null right so if I run this it's going to",
    "start": "1050520",
    "end": "1057520"
  },
  {
    "text": "give me an exception here we go first name on type",
    "start": "1057520",
    "end": "1064320"
  },
  {
    "text": "user does not allow null values this actually brings me into another thing that I forgot to mention about",
    "start": "1064320",
    "end": "1069480"
  },
  {
    "text": "performance how many of you are using exceptions as control",
    "start": "1069480",
    "end": "1074960"
  },
  {
    "text": "flow ouch that's four more people than I hope",
    "start": "1074960",
    "end": "1080080"
  },
  {
    "text": "for um exceptions are extremely expensive because it needs to gather a lot of information about the call stack",
    "start": "1080080",
    "end": "1087440"
  },
  {
    "text": "and a lot of information about what happened when your application runs so using this for control flow can lead to",
    "start": "1087440",
    "end": "1093799"
  },
  {
    "text": "a less performant application with net 9 they've introduced faster exceptions",
    "start": "1093799",
    "end": "1099720"
  },
  {
    "text": "which is a new way of looking at how it captures the information when there is an exception it's still a lot slower",
    "start": "1099720",
    "end": "1106840"
  },
  {
    "text": "than the alternative which would be to validate data using normal if and else's rather than relying on exceptions but",
    "start": "1106840",
    "end": "1113120"
  },
  {
    "text": "there is a slight Improvement in performance so now when I have this uh back to the nullable annotations if I",
    "start": "1113120",
    "end": "1120120"
  },
  {
    "text": "were to set this to a value or actually change this back to false I would then be able to deserialize this object",
    "start": "1120120",
    "end": "1125520"
  },
  {
    "text": "without any issues but honestly I'd like to respect the nullable annotations and",
    "start": "1125520",
    "end": "1131080"
  },
  {
    "text": "do true here which I believe is the default inside as.net cor so if you",
    "start": "1131080",
    "end": "1136200"
  },
  {
    "text": "passing a model into an action and it's not nullable then it will throw an exception if if it can't deserialize",
    "start": "1136200",
    "end": "1142720"
  },
  {
    "text": "that because it's actually a bad request now next up we can respect",
    "start": "1142720",
    "end": "1149480"
  },
  {
    "text": "nullable um for generics as well so how would that work if I have this type here",
    "start": "1149480",
    "end": "1155320"
  },
  {
    "text": "I'm going to have the exact same code I'm going to say that I'm going to respect the nullable annotations I'm going to set some",
    "start": "1155320",
    "end": "1162320"
  },
  {
    "text": "property to null on my generic object let's actually look at what this this looks like I have a generic record here",
    "start": "1162320",
    "end": "1169960"
  },
  {
    "text": "that Simply Now wraps a string so really this is the same as saying string data here",
    "start": "1169960",
    "end": "1175679"
  },
  {
    "text": "right actually it's not it's a lot more complex than that but basically that's what it's going to end up being the",
    "start": "1175679",
    "end": "1182120"
  },
  {
    "text": "problem is that when I run this method it's the exact same code I'm saying that it should respect",
    "start": "1182120",
    "end": "1189000"
  },
  {
    "text": "the nullable annotations the data here should not be able to be null because it's it's a you know it's it's non",
    "start": "1189000",
    "end": "1195880"
  },
  {
    "text": "nullable I'm going to run this and it allows me to derer IES with null value even though that I'm saying that it",
    "start": "1195880",
    "end": "1201679"
  },
  {
    "text": "should respect The nullable annotation the problem with generic parameters is that this here can be a struct it can be",
    "start": "1201679",
    "end": "1208520"
  },
  {
    "text": "a value type so it won't actually apply that check for this unless I apply this",
    "start": "1208520",
    "end": "1214919"
  },
  {
    "text": "condition here to say that this will always be a reference type and now when I work with the",
    "start": "1214919",
    "end": "1220320"
  },
  {
    "text": "generics and this respect denable annotations this would be a little bit different so this is a little bit of a",
    "start": "1220320",
    "end": "1226159"
  },
  {
    "text": "gotcha that you may run into if you enable this feature",
    "start": "1226159",
    "end": "1230640"
  },
  {
    "text": "all right the final one in terms of improvements to uh to system. tex. Json",
    "start": "1232039",
    "end": "1239320"
  },
  {
    "text": "is to respect the there's a lot of respect in system. tex. Json nowadays there's going to be respect required",
    "start": "1239320",
    "end": "1245520"
  },
  {
    "text": "Constructor parameters this here means that when we are deserializing an object",
    "start": "1245520",
    "end": "1250760"
  },
  {
    "text": "if there is required uh the default Constructor requires a couple of parameters should it use the default",
    "start": "1250760",
    "end": "1256919"
  },
  {
    "text": "values if one is not provided in the Json El inside the Json data as you see",
    "start": "1256919",
    "end": "1262720"
  },
  {
    "text": "here I'm going to try and deserialize an empty object traditionally what happens is that it tries to deserialize this and",
    "start": "1262720",
    "end": "1269480"
  },
  {
    "text": "it will use the default values so if I say that you don't respect",
    "start": "1269480",
    "end": "1275320"
  },
  {
    "text": "anything and I'm going to run this and I ran the incorrect code let's do this let's run this",
    "start": "1275320",
    "end": "1284519"
  },
  {
    "text": "again why is this not working let's try that again there we go",
    "start": "1287039",
    "end": "1295080"
  },
  {
    "text": "name is empty so something didn't really work as it should have it's actually the",
    "start": "1295080",
    "end": "1300159"
  },
  {
    "text": "thing is that I'm saying here I'm not really going to respect that we have required Constructor parameters which",
    "start": "1300159",
    "end": "1305919"
  },
  {
    "text": "means that it's going to use the default value of a string if I say that it should always respect the Constructor",
    "start": "1305919",
    "end": "1313320"
  },
  {
    "text": "parameters and I rerun that it's going to tell me that I'm missing both the first name and the last name so it",
    "start": "1313320",
    "end": "1319120"
  },
  {
    "text": "cannot instantiate this object so all of these additions to system. text. Json just makes it easier",
    "start": "1319120",
    "end": "1326240"
  },
  {
    "text": "and better to work with Json documents it makes it a little bit more complete",
    "start": "1326240",
    "end": "1331360"
  },
  {
    "text": "and I imagine that they're going to add a lot more um features in the coming versions as",
    "start": "1331360",
    "end": "1336559"
  },
  {
    "text": "well so speaking of adding things that lets us write more performant code",
    "start": "1336559",
    "end": "1341799"
  },
  {
    "text": "there's now span support for more different types of apis so having spans",
    "start": "1341799",
    "end": "1347240"
  },
  {
    "text": "available inet means that we can write more performant code as it doesn't have to produce extra allocations but there's",
    "start": "1347240",
    "end": "1353520"
  },
  {
    "text": "a lot of built-in stuff in net that still haven't been able to use spans properly so let's take a look at the",
    "start": "1353520",
    "end": "1359480"
  },
  {
    "text": "additions here one of them is the file helpers for example when we call file. write all",
    "start": "1359480",
    "end": "1366640"
  },
  {
    "text": "text previously this only supported passing a an array of of um let's see",
    "start": "1366640",
    "end": "1372919"
  },
  {
    "text": "here it only supports string content so basically what it had to do if you passed a span was to convert convert",
    "start": "1372919",
    "end": "1378840"
  },
  {
    "text": "that into a new string which meant extra allocations now all of these different file helpers will allow you to use a",
    "start": "1378840",
    "end": "1385480"
  },
  {
    "text": "readonly span of a character instead just reducing the amount of allocations and what's good about having",
    "start": "1385480",
    "end": "1392400"
  },
  {
    "text": "these overloads is that it will try to use the better overload when it can so",
    "start": "1392400",
    "end": "1398039"
  },
  {
    "text": "if you're just upgrading to net 9 if you have similar code to this here it will",
    "start": "1398039",
    "end": "1403120"
  },
  {
    "text": "try to implicitly look at your code or implicitly convert that into a readon span of a character",
    "start": "1403120",
    "end": "1410440"
  },
  {
    "text": "next one is that there's a couple of extension methods to the span of t uh pretty much there's a an extension",
    "start": "1410600",
    "end": "1416880"
  },
  {
    "text": "method called starts with and ends with so if we take a look at this text that I",
    "start": "1416880",
    "end": "1421919"
  },
  {
    "text": "have up here again let me get rid of the regions that's just to make it easier",
    "start": "1421919",
    "end": "1427679"
  },
  {
    "text": "initially I have my text and I'm going to say that well if this here starts with hello and I'm",
    "start": "1427679",
    "end": "1434919"
  },
  {
    "text": "going to use an ordinal ignore case so I don't really care um about the casing",
    "start": "1434919",
    "end": "1440320"
  },
  {
    "text": "then I'm going to get a true or false back basically and this here actually will implicitly convert that as well",
    "start": "1440320",
    "end": "1445520"
  },
  {
    "text": "into a readon span of a character and it will then match you to the start of that span doing this previously was a little",
    "start": "1445520",
    "end": "1452080"
  },
  {
    "text": "bit tedious but this isn't only in relation to using strings and characters I can do the same for a bite array so",
    "start": "1452080",
    "end": "1458960"
  },
  {
    "text": "here I've used a collection expression from C2 to set up a collection of bytes",
    "start": "1458960",
    "end": "1464559"
  },
  {
    "text": "and I'm using bytes here because it really makes me look like a hacker",
    "start": "1464559",
    "end": "1469880"
  },
  {
    "text": "doesn't make a difference so I have a read only span of bytes here which is essentially just a",
    "start": "1469880",
    "end": "1475200"
  },
  {
    "text": "list of bytes I have a pattern that I want to look for I want to look for ZX12 and now I can say well if my data ends",
    "start": "1475200",
    "end": "1481679"
  },
  {
    "text": "with that pattern then this is going to be true or false I could also pass an actual a collection of let's do this I",
    "start": "1481679",
    "end": "1490000"
  },
  {
    "text": "could do that as well and pass a collection of bite and that would also",
    "start": "1490000",
    "end": "1497320"
  },
  {
    "text": "work so we can do more than one if we wanted to so this is very flexible and",
    "start": "1497320",
    "end": "1502480"
  },
  {
    "text": "having these extension methods or these additions to what we can do with with the spans is going to make our",
    "start": "1502480",
    "end": "1507760"
  },
  {
    "text": "applications a little bit better and this really boils down also to a new feature called params of collections",
    "start": "1507760",
    "end": "1514679"
  },
  {
    "text": "added in C 13 where I can say that um this here will in fact be converted when",
    "start": "1514679",
    "end": "1521360"
  },
  {
    "text": "using string. jooin has added a params for spans of T and read only span of a",
    "start": "1521360",
    "end": "1526559"
  },
  {
    "text": "character so that this will will be implicitly converted into an a readon",
    "start": "1526559",
    "end": "1531760"
  },
  {
    "text": "span of strings or actually a params of readonly",
    "start": "1531760",
    "end": "1537240"
  },
  {
    "text": "uh span of a string so having that addition using params with collections means that we",
    "start": "1537240",
    "end": "1543440"
  },
  {
    "text": "can have a more performance string. join as well without having extra allocations seems like a small addition",
    "start": "1543440",
    "end": "1550640"
  },
  {
    "text": "but it can be important in some cases where I find myself um something that",
    "start": "1550640",
    "end": "1555760"
  },
  {
    "text": "I've actually missed is being able to split content so I have a pretty recent",
    "start": "1555760",
    "end": "1561360"
  },
  {
    "text": "course on plural site where I talk about performance in C where I had exactly this sample where I have an input which",
    "start": "1561360",
    "end": "1567679"
  },
  {
    "text": "is which is a comma separated content I'd like to split that and do so",
    "start": "1567679",
    "end": "1572880"
  },
  {
    "text": "effectively now I can implicitly look at my string as a read only span of character as I've mentioned now a couple",
    "start": "1572880",
    "end": "1578600"
  },
  {
    "text": "of times this doesn't produce any extra allocations doesn't have to copy any data over it just lets me represent this",
    "start": "1578600",
    "end": "1585279"
  },
  {
    "text": "content in a little bit of a different manner now what I'd like to do is to say that I'd like to take my input and I'd like",
    "start": "1585279",
    "end": "1592960"
  },
  {
    "text": "to to split this on a comma right normally what happens when you do dot",
    "start": "1592960",
    "end": "1599159"
  },
  {
    "text": "split on a string is that it's going to allocate a lot of extra data it's going to allocate a new array with all those",
    "start": "1599159",
    "end": "1605320"
  },
  {
    "text": "different split portions what this will do is that it will look for the first",
    "start": "1605320",
    "end": "1611320"
  },
  {
    "text": "object because this here is going to give me an enumerator all right so I'm going to get",
    "start": "1611320",
    "end": "1618320"
  },
  {
    "text": "get an enumerator that lets me get the different ranges so basically something that points to my my first name here up",
    "start": "1618320",
    "end": "1624880"
  },
  {
    "text": "until that comma something that points to the second one and third one and fourth so I can use a for each Loop to",
    "start": "1624880",
    "end": "1632080"
  },
  {
    "text": "say that well for each range of commas that I'm going to find here or separated elements I can iterate through this and",
    "start": "1632080",
    "end": "1639559"
  },
  {
    "text": "I can use my original content or the original read only P of a character to",
    "start": "1639559",
    "end": "1645440"
  },
  {
    "text": "slice off that range so basically now I can slice of Phillip Sophie Mila and",
    "start": "1645440",
    "end": "1651159"
  },
  {
    "text": "Elise here without having to do any extra allocations whatsoever this is a very memory efficient way of doing a",
    "start": "1651159",
    "end": "1657320"
  },
  {
    "text": "split on a string the only actra allocation that I have here is when I convert that back to a string to just",
    "start": "1657320",
    "end": "1663159"
  },
  {
    "text": "print it to the console but this is a very nice way of scanning a document or parsing things and do so in a pretty",
    "start": "1663159",
    "end": "1670600"
  },
  {
    "text": "memory efficient manner um so this addition is actually something that I'm going to use quite a",
    "start": "1670600",
    "end": "1676679"
  },
  {
    "text": "lot myself finally there's a update to time span time span. from seconds which has",
    "start": "1676679",
    "end": "1684320"
  },
  {
    "text": "been available for a very long time I don't know if you can see that in the back but by default it takes a double",
    "start": "1684320",
    "end": "1690200"
  },
  {
    "text": "doubles are inherently bad with precisions because um this number if I",
    "start": "1690200",
    "end": "1697120"
  },
  {
    "text": "run this that number is actually not the",
    "start": "1697120",
    "end": "1703919"
  },
  {
    "text": "same I guess it depends on who you ask but a 2 2999999 is not the same as",
    "start": "1703919",
    "end": "1710679"
  },
  {
    "text": "823 right unless we we get we get these rounding",
    "start": "1710679",
    "end": "1716039"
  },
  {
    "text": "errors so that's why they introduced an overload and the funny thing is like this is the only number I found where",
    "start": "1716039",
    "end": "1721399"
  },
  {
    "text": "it's a problem so I'm very curious who reported this bug but it's in the release note so I'd",
    "start": "1721399",
    "end": "1728039"
  },
  {
    "text": "like to just talk a little bit about this as well because I find it interesting that they add a bug fix for something that could potentially be a",
    "start": "1728039",
    "end": "1734200"
  },
  {
    "text": "problem but it's probably very rare but now we can um we an overload for from",
    "start": "1734200",
    "end": "1739360"
  },
  {
    "text": "for from seconds that takes both the second portion and the millisecond so that we don't get this rounding problem",
    "start": "1739360",
    "end": "1746679"
  },
  {
    "text": "we should really all just avoid using doubles all right so there's a lot of new stuff in net and",
    "start": "1746679",
    "end": "1754279"
  },
  {
    "text": "we've seen a lot of the things that are essentially added to the core Library portions that's going to be applicable",
    "start": "1754279",
    "end": "1761120"
  },
  {
    "text": "in all different types of applications be hp. net core net Maui Blazer wind fors and whatnot",
    "start": "1761120",
    "end": "1768519"
  },
  {
    "text": "so some of my favorite editions was actually the span improvements and being able to more effectively work with",
    "start": "1768519",
    "end": "1774279"
  },
  {
    "text": "system. tex. Json now next up I'd like to talk about a couple of things in asp.net",
    "start": "1774279",
    "end": "1780240"
  },
  {
    "text": "core of course that's also a big part of the net release adding things to asp.net",
    "start": "1780240",
    "end": "1785720"
  },
  {
    "text": "core that are missing or making sure that we can use apis more effectively or",
    "start": "1785720",
    "end": "1791399"
  },
  {
    "text": "more securely so there's open API improvements in fact it's replacing the",
    "start": "1791399",
    "end": "1798039"
  },
  {
    "text": "swashbuckle asp.net core package because that's now gone from asp.net core um",
    "start": "1798039",
    "end": "1803519"
  },
  {
    "text": "they used to bundle that together with the project template but it's now gone because the project is no longer",
    "start": "1803519",
    "end": "1808760"
  },
  {
    "text": "maintained for some reason it's better to build your own thing rather than jumping on an open source project and",
    "start": "1808760",
    "end": "1814080"
  },
  {
    "text": "contributing to it but yeah that's what happened so now they have their open API",
    "start": "1814080",
    "end": "1819519"
  },
  {
    "text": "improvements added to asp.net core which is a good addition I guess they've done some signal art",
    "start": "1819519",
    "end": "1825600"
  },
  {
    "text": "trimming and ative aot improvements as well which could be interesting if you're using signal R how many of you are using signal",
    "start": "1825600",
    "end": "1831200"
  },
  {
    "text": "R oh that's awesome about half that's awesome so if you're doing native a as",
    "start": "1831200",
    "end": "1836279"
  },
  {
    "text": "well this is going to be a nice update there's um there's something called a typed uh result which has now had the",
    "start": "1836279",
    "end": "1843799"
  },
  {
    "text": "introduction of the internal server error I don't know why you would ever want to face internal server error",
    "start": "1843799",
    "end": "1849600"
  },
  {
    "text": "externally so I I kind of like the idea of this not being a part of the typed results in asp.net core but now it's",
    "start": "1849600",
    "end": "1856200"
  },
  {
    "text": "been added because a lot of people uh kept adding it themselves there's improvements to authentication and",
    "start": "1856200",
    "end": "1861679"
  },
  {
    "text": "authorization there's a thing called a hybrid cache you can now use keyed di in",
    "start": "1861679",
    "end": "1867159"
  },
  {
    "text": "middlewares and of course there's a lot more the first thing that I like to talk about I'm going to pick a couple of",
    "start": "1867159",
    "end": "1873480"
  },
  {
    "text": "things and show you in Visual Studio soon as well but the first thing I want to talk about is the improvements to authentication and",
    "start": "1873480",
    "end": "1879880"
  },
  {
    "text": "authorization how many of you have heard of par or pushed authorization request oh amazing one person",
    "start": "1879880",
    "end": "1888799"
  },
  {
    "text": "all right so let's for the next hour talk about open ID connect um so par is a pushed",
    "start": "1888799",
    "end": "1896840"
  },
  {
    "text": "authorization request basically and I can now see here that this is a little bit difficult to read but pushed",
    "start": "1896840",
    "end": "1902080"
  },
  {
    "text": "authorization request is going to be the default behavior for openid connect authorization and authentication in net",
    "start": "1902080",
    "end": "1908399"
  },
  {
    "text": "9 traditionally maybe this is easier to read when you try to access a private page that is going to tell the browser",
    "start": "1908399",
    "end": "1915639"
  },
  {
    "text": "to redirect to the IDP or the authorization server and it's going to send everything inside the the get URL",
    "start": "1915639",
    "end": "1922519"
  },
  {
    "text": "the problem with this is that I could try and spoof it I could try to change the the Scopes that I have access to I",
    "start": "1922519",
    "end": "1928600"
  },
  {
    "text": "could misuse this uh this data here I could change the redirect URI hoping that someone would not validate this and",
    "start": "1928600",
    "end": "1935600"
  },
  {
    "text": "I could then create some really malicious requests this is a little bit problematic so instead what what's going",
    "start": "1935600",
    "end": "1942039"
  },
  {
    "text": "to be happening is that there's going to be an extra addition to the website has",
    "start": "1942039",
    "end": "1947639"
  },
  {
    "text": "to first talk with the authorization server so we're adding a request here a post request which is going to validate",
    "start": "1947639",
    "end": "1954080"
  },
  {
    "text": "your client ID the the secret it's going to validate the requ return URL and then",
    "start": "1954080",
    "end": "1959480"
  },
  {
    "text": "it's going to send back something that doesn't have any details to it back to the client this means that the website will",
    "start": "1959480",
    "end": "1967080"
  },
  {
    "text": "have to do an extra call to the authorization server which means a little bit of extra load on the",
    "start": "1967080",
    "end": "1972679"
  },
  {
    "text": "authorization server one extra call that is uh but it's for security so it's good",
    "start": "1972679",
    "end": "1978320"
  },
  {
    "text": "it's a quite new addition to the specification but it's something that will greatly improve the security at",
    "start": "1978320",
    "end": "1984880"
  },
  {
    "text": "least that's the the idea it prevents um scope modifications and really spoofing",
    "start": "1984880",
    "end": "1990559"
  },
  {
    "text": "the clients and otherwise tampering or misusing with any of this data so this will be enabled if you're",
    "start": "1990559",
    "end": "1996720"
  },
  {
    "text": "using the use open ID connect middleware this will going to be the default in net9 onwards as long as the",
    "start": "1996720",
    "end": "2003320"
  },
  {
    "text": "authorization server tells you that it allows pushed authorization requests",
    "start": "2003320",
    "end": "2008559"
  },
  {
    "text": "which it actually should so let's take a look at some of the other things added in asp.net",
    "start": "2008559",
    "end": "2015398"
  },
  {
    "text": "core I realized I could be talking all day about all of these different things but we don't have time first thing I",
    "start": "2016519",
    "end": "2023679"
  },
  {
    "text": "want to show you is one addition uh now you might have seen map",
    "start": "2023679",
    "end": "2028799"
  },
  {
    "text": "static files um map static or or",
    "start": "2028799",
    "end": "2034880"
  },
  {
    "text": "map whatever the old thing that allow you to map the static files is now going",
    "start": "2034880",
    "end": "2040360"
  },
  {
    "text": "to be replaced with map static assets and what this will do is allow you to compress the assets as it's building the",
    "start": "2040360",
    "end": "2047120"
  },
  {
    "text": "application and reduce the sizes of your JavaScript CSS and HTML so that when it",
    "start": "2047120",
    "end": "2052960"
  },
  {
    "text": "delivers this to the browser it will have a proper e tag it will know exactly if things have been updated or not and",
    "start": "2052960",
    "end": "2059040"
  },
  {
    "text": "effectively you should be able to just say that you're going to use maps static assets instead of uh the old static",
    "start": "2059040",
    "end": "2065679"
  },
  {
    "text": "files so tiny addition making the requests and responses a little bit",
    "start": "2065679",
    "end": "2071040"
  },
  {
    "text": "smaller next up there's uh a little bit of a problem here how many of you are",
    "start": "2071040",
    "end": "2076480"
  },
  {
    "text": "seeing a problem with this if you just ignore this squiggly there's just one person seeing a problem with this that was really",
    "start": "2076480",
    "end": "2082720"
  },
  {
    "text": "quickly as well if it's the same problem that is um so the issue here is that I'm",
    "start": "2082720",
    "end": "2088560"
  },
  {
    "text": "saying that I have a controller where I want to allow Anonymous AIS but I have one endpoint inside this controller",
    "start": "2088560",
    "end": "2095280"
  },
  {
    "text": "where I require the user to be authorized does this work it's a rhetorical question no it",
    "start": "2095280",
    "end": "2102800"
  },
  {
    "text": "doesn't because this will actually be overridden and I realized that the text",
    "start": "2102800",
    "end": "2108000"
  },
  {
    "text": "here in Visual Studio is a little bit tricker to read but it's basically saying that authorized here is going to",
    "start": "2108000",
    "end": "2113079"
  },
  {
    "text": "be overridden by a low Anonymous so you won't be able to do this and previously you didn't get any hints whatsoever",
    "start": "2113079",
    "end": "2119839"
  },
  {
    "text": "until you ran the application and realized it doesn't work this will also look at base classes",
    "start": "2119839",
    "end": "2126520"
  },
  {
    "text": "and and if this is in erting from a base controller that would work as well um so that's a nice um uh addition",
    "start": "2126520",
    "end": "2135760"
  },
  {
    "text": "being able to scan the library to find these problems and let you know about them as well and if we treat warnings as",
    "start": "2135760",
    "end": "2141320"
  },
  {
    "text": "errors this would become a compiler error which is great now there's a couple of more",
    "start": "2141320",
    "end": "2147280"
  },
  {
    "text": "minimal API improvements there's the addition of open API so we can say that I'm going to add open API and then map",
    "start": "2147280",
    "end": "2154160"
  },
  {
    "text": "open API to my application and when I do so this will expose an open API endpoint",
    "start": "2154160",
    "end": "2159480"
  },
  {
    "text": "and I could then get a very nice representation of my uh let's see if I",
    "start": "2159480",
    "end": "2165200"
  },
  {
    "text": "can zoom in that's a little bit too much there we go um this will now give me a",
    "start": "2165200",
    "end": "2170920"
  },
  {
    "text": "representation of my entire API basically um it will have all the types",
    "start": "2170920",
    "end": "2177200"
  },
  {
    "text": "it will know about all the different response codes that your um endpoints can return and it will know that because",
    "start": "2177200",
    "end": "2184359"
  },
  {
    "text": "in this case if we look at the code that I have here I have an endpoint that allows me to",
    "start": "2184359",
    "end": "2191720"
  },
  {
    "text": "return two different results so this the root of my application can return either an okay of a string or an internal",
    "start": "2191720",
    "end": "2198760"
  },
  {
    "text": "server error and this here is one of those additions to uh to asp.net core as",
    "start": "2198760",
    "end": "2205160"
  },
  {
    "text": "well let me just do this here we go um so the open API middleware will scan our",
    "start": "2205160",
    "end": "2212040"
  },
  {
    "text": "application and we'll know exactly what's going to be returned from this as well now",
    "start": "2212040",
    "end": "2218880"
  },
  {
    "text": "I'd like to show you a couple of debugging improvements so I have first of all I'm going to put a break point in",
    "start": "2218880",
    "end": "2224160"
  },
  {
    "text": "here I'm going to run this with the debugger attached and I'm going to navigate to",
    "start": "2224160",
    "end": "2230319"
  },
  {
    "text": "slash sign in and when I hover this here and go",
    "start": "2230319",
    "end": "2235599"
  },
  {
    "text": "into the request I'm going to zoom in I just have to find this thing first",
    "start": "2235599",
    "end": "2242720"
  },
  {
    "text": "hopefully fail let's try that again request",
    "start": "2242960",
    "end": "2249519"
  },
  {
    "text": "here we go come on oh that's a nice addition isn't it so",
    "start": "2250640",
    "end": "2256000"
  },
  {
    "text": "instead of having a really bad experience when debugging the application and looking at a dictionary now it actually shows the dictionary key",
    "start": "2256000",
    "end": "2262319"
  },
  {
    "text": "on the left hand side and the value on the right hand side here small addition but it makes all the difference when",
    "start": "2262319",
    "end": "2268319"
  },
  {
    "text": "we're debugging our applications so again the developer productivity portion of improving net and the developer",
    "start": "2268319",
    "end": "2274880"
  },
  {
    "text": "experience I'm going to release this debugger and this here is going to create some fake data and then I have a",
    "start": "2274880",
    "end": "2281079"
  },
  {
    "text": "I believe data endpoint or whatever that endpoint was called uh let's see here uh I'm going to release the",
    "start": "2281079",
    "end": "2288520"
  },
  {
    "text": "debugger run this without debugging go to SL sign in create some",
    "start": "2288520",
    "end": "2295720"
  },
  {
    "text": "data and then go to the data endpoint hopefully after a couple of",
    "start": "2295720",
    "end": "2301200"
  },
  {
    "text": "seconds this here should show me a developer exception page and for some reason it doesn't do that anymore",
    "start": "2301200",
    "end": "2307880"
  },
  {
    "text": "I was going to show you some of the really interesting oh here we go of course because I don't have any Internet",
    "start": "2307880",
    "end": "2313680"
  },
  {
    "text": "connection I would have gotten an exception anyways so they've improved this as well there's now a little bit of",
    "start": "2313680",
    "end": "2319599"
  },
  {
    "text": "more information in here I can scroll down and I can I could if this was actually um uh I can see here at the",
    "start": "2319599",
    "end": "2326920"
  },
  {
    "text": "bottom I can even expand the code portions of where this is going to be a problem um and if I would have had",
    "start": "2326920",
    "end": "2334319"
  },
  {
    "text": "internet connections this here would actually have thrown a null null reference exception which is what I",
    "start": "2334319",
    "end": "2339680"
  },
  {
    "text": "wanted to demonstrate because it will now actually show you exactly where the null reference exception happened even",
    "start": "2339680",
    "end": "2345079"
  },
  {
    "text": "if it's an asynchronous operation which was a little bit problematic before and not only that this developer exception",
    "start": "2345079",
    "end": "2352280"
  },
  {
    "text": "page now has information about the query string the available cookies the headers",
    "start": "2352280",
    "end": "2357599"
  },
  {
    "text": "and the routing and so forth you can use this to analyze exactly what's going to go on all right small addition to asp.net",
    "start": "2357599",
    "end": "2365960"
  },
  {
    "text": "cor so there's of course a lot more happening in asp.net core but basically the the most important ones here are um",
    "start": "2365960",
    "end": "2372800"
  },
  {
    "text": "the improved debugging experience and the open API Edition as well together with one more interesting thing called a",
    "start": "2372800",
    "end": "2379560"
  },
  {
    "text": "hybrid cache a hybrid cache which is added by simply adding a call to add",
    "start": "2379560",
    "end": "2384920"
  },
  {
    "text": "hybrid cache after you've added a reference to that extension package gives you the capability of Simply",
    "start": "2384920",
    "end": "2390839"
  },
  {
    "text": "replacing all inmemory caches the hybrid cache is actually a two two-way or two",
    "start": "2390839",
    "end": "2398119"
  },
  {
    "text": "it will cash in two places or allow you to cash in two places primarily it will cash in memory but if you've also set up",
    "start": "2398119",
    "end": "2405640"
  },
  {
    "text": "a distributed cache like you normally do with for example ad stack exchange re",
    "start": "2405640",
    "end": "2410880"
  },
  {
    "text": "cache which is implementing the ID distributed cache if that's available it will also use that secondary cache so",
    "start": "2410880",
    "end": "2418319"
  },
  {
    "text": "you can have an inmemory cache running on your system and you can also have an offsite cache running in red in Asher",
    "start": "2418319",
    "end": "2424359"
  },
  {
    "text": "for example if you restart the web server it will first try to fetch something from memory there's no cash",
    "start": "2424359",
    "end": "2430800"
  },
  {
    "text": "hit so it will go ahead and ask the external cach provider if there is a cash hit it will then populate the in",
    "start": "2430800",
    "end": "2436520"
  },
  {
    "text": "memory cache and return the value the reason is this is a hybrid and two uh",
    "start": "2436520",
    "end": "2441760"
  },
  {
    "text": "two Store Cache is because that will then allow you to be very performant but also you can restart your web",
    "start": "2441760",
    "end": "2448280"
  },
  {
    "text": "application and the cache is persistent and of course I can also if I",
    "start": "2448280",
    "end": "2454160"
  },
  {
    "text": "if I use this hybrid cache in one of my minimal apis I can say that I'd like to use the",
    "start": "2454160",
    "end": "2460800"
  },
  {
    "text": "hybrid cache to create get or create something here's my cash key if there's",
    "start": "2460800",
    "end": "2467000"
  },
  {
    "text": "a cash hit in memory it's going to return that if there's a cash hit in the distributed cache it's going to return",
    "start": "2467000",
    "end": "2473000"
  },
  {
    "text": "that as well if there's no cache hit I can tell it to retrieve that specific",
    "start": "2473000",
    "end": "2478680"
  },
  {
    "text": "thing and I've just added some sample data here and then if I have somewhere in my",
    "start": "2478680",
    "end": "2484200"
  },
  {
    "text": "application where I still rely on the ID distributed cache that would also be able to retrieve this data as",
    "start": "2484200",
    "end": "2490160"
  },
  {
    "text": "well so this is a very nice addition and",
    "start": "2490160",
    "end": "2495599"
  },
  {
    "text": "um so you should be able to Simply replace all your in-memory caches using this instead the approach of using this",
    "start": "2495599",
    "end": "2502200"
  },
  {
    "text": "is a slightly different from reading and writing to uh to the inmemory cache as well and this will also bake it into a",
    "start": "2502200",
    "end": "2508800"
  },
  {
    "text": "specific type when it's serializing and deserializing the data you can even override how it serializes if you like",
    "start": "2508800",
    "end": "2515720"
  },
  {
    "text": "like to use protobot for example in instead of Json so it's very flexible all right so",
    "start": "2515720",
    "end": "2522240"
  },
  {
    "text": "being conscious of time let's see here we've talked about all of the things inside asp.net core that I find are",
    "start": "2522240",
    "end": "2527640"
  },
  {
    "text": "interesting optimizing static files the authorization attribute and of course the hybrid cache let's now switch gears",
    "start": "2527640",
    "end": "2535200"
  },
  {
    "text": "and talk a little bit about net Aspire is anyone using net Aspire for local",
    "start": "2535200",
    "end": "2541040"
  },
  {
    "text": "development okay about handful hopefully more of you will start using this because it's a great tool it",
    "start": "2541040",
    "end": "2547599"
  },
  {
    "text": "allows you to very easily set up or I would say set up a a tool that",
    "start": "2547599",
    "end": "2553240"
  },
  {
    "text": "orchestrate your different services so let's say that you have a web application you have a couple of apis",
    "start": "2553240",
    "end": "2558319"
  },
  {
    "text": "you might have a R's cache and you want to spin all of that up locally and do so quite easily net aspiral allows you to",
    "start": "2558319",
    "end": "2566079"
  },
  {
    "text": "do this and Define all of those different dependencies it allows some",
    "start": "2566079",
    "end": "2571240"
  },
  {
    "text": "service Discovery so that if your web application is relying on an API or relying on a r cache it can feed that",
    "start": "2571240",
    "end": "2578800"
  },
  {
    "text": "application with information about how to find it it also gives you structured logs it gives you the capability of",
    "start": "2578800",
    "end": "2585280"
  },
  {
    "text": "restarting and starting applications and doing a whole lot of things where people tend to uh be a little bit baffled is",
    "start": "2585280",
    "end": "2592119"
  },
  {
    "text": "when you're going to release the application so while this is meant for local development you still have to have",
    "start": "2592119",
    "end": "2597880"
  },
  {
    "text": "a process of Distributing the application if you'd like to distribute this to Asher and use Asher container",
    "start": "2597880",
    "end": "2604720"
  },
  {
    "text": "apps there's a lot of good information about how to to do that but if you want to have a different structure it's a little bit more difficult and a little",
    "start": "2604720",
    "end": "2611359"
  },
  {
    "text": "bit more Hands-On that you have to do so with net Aspire 9 which was um released",
    "start": "2611359",
    "end": "2617319"
  },
  {
    "text": "as released candidate one yesterday they introduced the the uh",
    "start": "2617319",
    "end": "2622680"
  },
  {
    "text": "support for persistent containers also introduced custom commands health checks",
    "start": "2622680",
    "end": "2629200"
  },
  {
    "text": "um aure function supports and an overall better experience so I think let's jump over to visual studio and take a look at",
    "start": "2629200",
    "end": "2635839"
  },
  {
    "text": "what net aspire is actually all about so when you create a new sample application",
    "start": "2635839",
    "end": "2641760"
  },
  {
    "text": "with net Aspire basically you get your API as a sample I have an API service if",
    "start": "2641760",
    "end": "2647720"
  },
  {
    "text": "this is just an asp.net core application I then have my blazer application which is my web front end I",
    "start": "2647720",
    "end": "2654359"
  },
  {
    "text": "don't know why you want to open that up but I have my blazer application and my blazer application references the API it",
    "start": "2654359",
    "end": "2660960"
  },
  {
    "text": "also references um a red cache for example and setting up that dependency",
    "start": "2660960",
    "end": "2667119"
  },
  {
    "text": "is done in an app host project this is net Aspire so I'm going to go in here",
    "start": "2667119",
    "end": "2672240"
  },
  {
    "text": "and I'm going to show you that just ignore the warnings um I promise this",
    "start": "2672240",
    "end": "2678319"
  },
  {
    "text": "works so for example I'm creating a redish cache and what this will actually",
    "start": "2678319",
    "end": "2684359"
  },
  {
    "text": "do is that this will pull down a Docker image and start that for me and since",
    "start": "2684359",
    "end": "2689800"
  },
  {
    "text": "I've said that the container life time is persistent this will be running outside of my application as well if",
    "start": "2689800",
    "end": "2696160"
  },
  {
    "text": "there's no docker container running it will pull it down from docker.io or whatever register you're using and it",
    "start": "2696160",
    "end": "2702480"
  },
  {
    "text": "will start that and when you kill your application that container will still be running in the background the reason you",
    "start": "2702480",
    "end": "2709240"
  },
  {
    "text": "want to have this support is because it uh increases or decreases the startup time uh then I'm saying that well my",
    "start": "2709240",
    "end": "2716520"
  },
  {
    "text": "application also have a API Services project that references my cache I also",
    "start": "2716520",
    "end": "2723240"
  },
  {
    "text": "have a web front end where I've introduced a custom command called dump database sounds very very interesting",
    "start": "2723240",
    "end": "2732079"
  },
  {
    "text": "this also has external HTP end points it has a reference to my API service and before starting this application it",
    "start": "2732079",
    "end": "2737920"
  },
  {
    "text": "should wait for the API service to start so before I actually go into the web UI let me just show you exactly what",
    "start": "2737920",
    "end": "2744720"
  },
  {
    "text": "that command is so I've set up an extension here where I simply have a",
    "start": "2744720",
    "end": "2750240"
  },
  {
    "text": "dump database command which takes a project and then has a text for a button",
    "start": "2750240",
    "end": "2756319"
  },
  {
    "text": "in the UI called delete database and then I can run some code in here to delete the database and return true or",
    "start": "2756319",
    "end": "2762760"
  },
  {
    "text": "false based on if that worked or not so keep that in mind when I know go ahead and and start the project I'm going to",
    "start": "2762760",
    "end": "2768160"
  },
  {
    "text": "jump over to Mac OS because I'm running uh in parallels and parallels",
    "start": "2768160",
    "end": "2774720"
  },
  {
    "text": "doesn't have support for um nested virtualization and if this doesn't work",
    "start": "2774720",
    "end": "2779920"
  },
  {
    "text": "the first time just run it again then it should work but this time it work the first time uh come on there we go",
    "start": "2779920",
    "end": "2787760"
  },
  {
    "text": "and now we can see here that this here has a little persistent icon on it means that",
    "start": "2787760",
    "end": "2793880"
  },
  {
    "text": "this here is in fact a Docker image from docker.io and I can see that by going",
    "start": "2793880",
    "end": "2799119"
  },
  {
    "text": "and doing Docker PS and see that this is actually a Docker run Docker container that I created 23 hours ago and it's",
    "start": "2799119",
    "end": "2805720"
  },
  {
    "text": "been up for 14 hours if I restart the or start the application",
    "start": "2805720",
    "end": "2810880"
  },
  {
    "text": "again and refresh come on here we go now I can see my applications I have my API",
    "start": "2810880",
    "end": "2816559"
  },
  {
    "text": "server I have my web front end I have my let's see here I have my delete database command",
    "start": "2816559",
    "end": "2823800"
  },
  {
    "text": "here at the bottom I could run that and that will then run that command as well so this here is is meant to speed up the",
    "start": "2823800",
    "end": "2829880"
  },
  {
    "text": "development process of local development it allows you to point to the different projects that you rely on be it a Docker",
    "start": "2829880",
    "end": "2836640"
  },
  {
    "text": "container be it a your own asp.net core project or web frontends and can feed",
    "start": "2836640",
    "end": "2841680"
  },
  {
    "text": "information between the different ones all right so I find this very interesting and I could use the same",
    "start": "2841680",
    "end": "2847800"
  },
  {
    "text": "Reddit container for my distributed cach in the other application if I wanted to as well all right so and also here's one",
    "start": "2847800",
    "end": "2855079"
  },
  {
    "text": "more change when you click one of these things it opens up the panel on the right hand side they're very proud of",
    "start": "2855079",
    "end": "2860960"
  },
  {
    "text": "that because previously it opened at the bottom I don't know what they were",
    "start": "2860960",
    "end": "2866279"
  },
  {
    "text": "thinking kidding if that would have been the biggest addition to net Aspire I would",
    "start": "2866440",
    "end": "2873280"
  },
  {
    "text": "probably not have included it all right so there's a lot of things happening with net Aspire uh and if you haven't",
    "start": "2873280",
    "end": "2879480"
  },
  {
    "text": "checked it out try and add it to a new project and see if it helps you build your applications locally and with the",
    "start": "2879480",
    "end": "2885640"
  },
  {
    "text": "support of ashro functions and building health checks and stuff like showing you the Telemetry logs and all of that this",
    "start": "2885640",
    "end": "2891680"
  },
  {
    "text": "is a good Tool uh how many are using Blazer okay about half there's a lot of",
    "start": "2891680",
    "end": "2898119"
  },
  {
    "text": "additions to Blazer as well there's for example there's now a new template when you're creating a new project if you",
    "start": "2898119",
    "end": "2903559"
  },
  {
    "text": "want to do that that lets you do a hybrid application between Laser Web as well as mobile there's additions to net",
    "start": "2903559",
    "end": "2911079"
  },
  {
    "text": "Maui who's using net Maui okay about handful that's great",
    "start": "2911079",
    "end": "2916960"
  },
  {
    "text": "there's also a lot of additions to net Maui being conscious of time I'm not going to spend too much time talking",
    "start": "2916960",
    "end": "2922200"
  },
  {
    "text": "about Blazer and net Maui but they're both powered by all of greatness added to net 9 in terms of performance and all",
    "start": "2922200",
    "end": "2929559"
  },
  {
    "text": "the language features as well and in net Maui there's a lot of bug fixes I've",
    "start": "2929559",
    "end": "2935160"
  },
  {
    "text": "personally been looking forward to this release because there's a lot of fixes as well as xcode 16",
    "start": "2935160",
    "end": "2941160"
  },
  {
    "text": "support so I'd like to spend the last 10 minutes talking about C 13 and the",
    "start": "2941160",
    "end": "2947160"
  },
  {
    "text": "reason we don't spend more time talking about C 13 is because there's already so",
    "start": "2947160",
    "end": "2953319"
  },
  {
    "text": "many great language features added to C this feature or this release of the",
    "start": "2953319",
    "end": "2959079"
  },
  {
    "text": "language includes a couple of interesting features but mainly they're focusing on performance just like",
    "start": "2959079",
    "end": "2965280"
  },
  {
    "text": "they're doing in net they're also focusing on stability and ensuring that they're relying on those old language",
    "start": "2965280",
    "end": "2971240"
  },
  {
    "text": "features that they introduced to make them a little bit better so C 13 while",
    "start": "2971240",
    "end": "2976440"
  },
  {
    "text": "it does introduce a couple of things it's not as major as C 12 so it introduces a new thing a new keyword a",
    "start": "2976440",
    "end": "2982440"
  },
  {
    "text": "field keyword it introduces params collections it introduces a new lock",
    "start": "2982440",
    "end": "2988559"
  },
  {
    "text": "object which was something added to the net runtime as well as net to allow us",
    "start": "2988559",
    "end": "2994200"
  },
  {
    "text": "to use a new semantics internally and also so allow us to more effectively lock on object if you're working in",
    "start": "2994200",
    "end": "3000040"
  },
  {
    "text": "multi-threaded applications there's implicit index axis overload resolution priority and potentially uh there's also",
    "start": "3000040",
    "end": "3007760"
  },
  {
    "text": "partials and potentially a couple of more things it's still a couple of weeks out until they released the final",
    "start": "3007760",
    "end": "3014200"
  },
  {
    "text": "versions of net 9 as well as C 13 so bear in mind that they could scratch a",
    "start": "3014200",
    "end": "3020040"
  },
  {
    "text": "couple of the language features or make some additions to what's already been added to net but uh I would be very",
    "start": "3020040",
    "end": "3027280"
  },
  {
    "text": "surprised if they did any major changes a couple of weeks before they actually release and go live it's just me that do",
    "start": "3027280",
    "end": "3034280"
  },
  {
    "text": "things the night before I go live with any product probably not so the field keyword is going to be an ince",
    "start": "3034280",
    "end": "3041319"
  },
  {
    "text": "interesting addition so notice here that there's inside my auto property I can now",
    "start": "3041319",
    "end": "3048280"
  },
  {
    "text": "reference a field so who in here thinks I'm actually",
    "start": "3048280",
    "end": "3054319"
  },
  {
    "text": "referencing this thing who in here thinks I'm referencing",
    "start": "3054319",
    "end": "3059440"
  },
  {
    "text": "this oh great you got you got the idea of this being a rhetorical question it's",
    "start": "3059440",
    "end": "3064680"
  },
  {
    "text": "actually not going to reference that field at all this here is now a new contextual keyword that allows you to",
    "start": "3064680",
    "end": "3070200"
  },
  {
    "text": "reference the backing field of the auto property and the reason you can do that is so that you can then access it and",
    "start": "3070200",
    "end": "3076119"
  },
  {
    "text": "for example trim the value before you set the field to a value or modify it before you return it to whoever calls",
    "start": "3076119",
    "end": "3082040"
  },
  {
    "text": "that auto property but then if you already have code that look like this in C 12 because",
    "start": "3082040",
    "end": "3089119"
  },
  {
    "text": "this is valid right this will then reference that uh previous field then what",
    "start": "3089119",
    "end": "3094440"
  },
  {
    "text": "happens I think this is the first time they introduce a breaking change in the compiler because that will actually",
    "start": "3094440",
    "end": "3100640"
  },
  {
    "text": "break your code so doing this if you already have a",
    "start": "3100640",
    "end": "3105760"
  },
  {
    "text": "variable called field this here is a breaking change because you have to use keyword escaping the at here the at",
    "start": "3105760",
    "end": "3112880"
  },
  {
    "text": "symbol we have to use this to escape the keyword just like we do for any other keywords or contextual keywords to",
    "start": "3112880",
    "end": "3118599"
  },
  {
    "text": "escape that and remove what it actually means right so I think this is a nice",
    "start": "3118599",
    "end": "3124160"
  },
  {
    "text": "addition as well because it now allows you to modify the values or or or work",
    "start": "3124160",
    "end": "3129319"
  },
  {
    "text": "with it before you return it back to whoever is consuming this there's also this addition of a",
    "start": "3129319",
    "end": "3135359"
  },
  {
    "text": "params collection so notice here I have a lot of different overloads for this process method I can say that I have a",
    "start": "3135359",
    "end": "3141880"
  },
  {
    "text": "params of a string array I have a params of I enumerable a span a uh readon span",
    "start": "3141880",
    "end": "3147960"
  },
  {
    "text": "beable list and list we can use the pars with anything and this Builds on the",
    "start": "3147960",
    "end": "3153200"
  },
  {
    "text": "collection Expressions it works with spans it works with read only spans it works with all iables it tries to avoid",
    "start": "3153200",
    "end": "3161280"
  },
  {
    "text": "implicit conversions and this here if we have both a span of string as well as the",
    "start": "3161280",
    "end": "3168760"
  },
  {
    "text": "array of a string it will favor the span of a string because that's more performant right reduce allocations and",
    "start": "3168760",
    "end": "3175480"
  },
  {
    "text": "copying information over um and when it can it will pass this as a value parameter for implicit",
    "start": "3175480",
    "end": "3182680"
  },
  {
    "text": "conversions so then here I we can pass it as both as a collection as you see",
    "start": "3182680",
    "end": "3189200"
  },
  {
    "text": "here there's two different call to process the first one passes it as perams the second one passes it as a",
    "start": "3189200",
    "end": "3195720"
  },
  {
    "text": "collection and both of these different ones work but how will it know which one is most",
    "start": "3195720",
    "end": "3202240"
  },
  {
    "text": "suitable because these two are in fact going to be ambiguous there's a new thing called overload",
    "start": "3202240",
    "end": "3209119"
  },
  {
    "text": "resolution priority if it cannot determine which one of these two is more suitable we can tell the compiler which",
    "start": "3209119",
    "end": "3216720"
  },
  {
    "text": "one we'd like to have priority right so I can say that read only span of a string should have higher",
    "start": "3216720",
    "end": "3222880"
  },
  {
    "text": "priority if there's an ambiguity and that would both reduce the or remove the compiler error it will also uh favor the",
    "start": "3222880",
    "end": "3231400"
  },
  {
    "text": "one that's more performant okay so I think that's a nice addition as well",
    "start": "3231400",
    "end": "3237079"
  },
  {
    "text": "next up is this new lock object this here is a new type available in net and",
    "start": "3237079",
    "end": "3243359"
  },
  {
    "text": "this provides better um thread synchronization through a new API it was added in the net runtime and",
    "start": "3243359",
    "end": "3251799"
  },
  {
    "text": "also added in net the STK as a type available and now it's using this API",
    "start": "3251799",
    "end": "3257200"
  },
  {
    "text": "instead of that old monitor based API or monitor based locking the idea is that",
    "start": "3257200",
    "end": "3263400"
  },
  {
    "text": "it's going to be a little bit more um suitable and um a little bit performant",
    "start": "3263400",
    "end": "3269200"
  },
  {
    "text": "I guess so that's a nice addition as well and then we also have this um",
    "start": "3269200",
    "end": "3276960"
  },
  {
    "text": "introduction of partial properties now this here actually let me show you this in Visual Studio",
    "start": "3276960",
    "end": "3283160"
  },
  {
    "text": "instead partial properties um we had partial types for a very long",
    "start": "3283160",
    "end": "3292400"
  },
  {
    "text": "time but uh they've kind of been missing from uh from properties right so I have this",
    "start": "3292400",
    "end": "3299319"
  },
  {
    "text": "partial class where I have a partial property called name and a partial method called process why on Earth would",
    "start": "3299319",
    "end": "3306520"
  },
  {
    "text": "you do this well it's because of source generators so I could say that this here",
    "start": "3306520",
    "end": "3312640"
  },
  {
    "text": "is a partial property that I want you to generate some source code for and that Source generator can look at which",
    "start": "3312640",
    "end": "3318960"
  },
  {
    "text": "Target platform you're currently building for and generate the appropriate method for example reg exes",
    "start": "3318960",
    "end": "3325319"
  },
  {
    "text": "right um but of course if we want to implement the um this user we simply just create a new partial class in the",
    "start": "3325319",
    "end": "3332280"
  },
  {
    "text": "same project and this would have worked with a source generator as well that's exactly what it's doing behind the",
    "start": "3332280",
    "end": "3338920"
  },
  {
    "text": "scenes um and actually finally let's take a look at the uh while I'm in Visual Studio I might as well show you",
    "start": "3338920",
    "end": "3345119"
  },
  {
    "text": "the implicit index AIS as well so here I have a data type called",
    "start": "3345119",
    "end": "3350319"
  },
  {
    "text": "data which exposes a public bite array which I initialize to five available",
    "start": "3350319",
    "end": "3356680"
  },
  {
    "text": "spots and let's say that I'd like to initialize this with some predefined values and of course being a hacker I'm",
    "start": "3356680",
    "end": "3363880"
  },
  {
    "text": "still using my my bites here so I can now say that from the first uh or from one off the",
    "start": "3363880",
    "end": "3371920"
  },
  {
    "text": "end which is in fact the last element the the last element should be",
    "start": "3371920",
    "end": "3377599"
  },
  {
    "text": "zx5 um the second to last third to last fourth fifth to last which is in fact",
    "start": "3377599",
    "end": "3383680"
  },
  {
    "text": "the first element and if I run this it should then say 1 two 3 four five right",
    "start": "3383680",
    "end": "3390520"
  },
  {
    "text": "so this implicit index axis allows us to then reference different values depending on which where in that array",
    "start": "3390520",
    "end": "3396480"
  },
  {
    "text": "you want to set those values and we don't have to specify all of them uh let's see actually what happens if I do",
    "start": "3396480",
    "end": "3402440"
  },
  {
    "text": "this that would then also work of course so I can use this to set particular values based off the end of that",
    "start": "3402440",
    "end": "3409480"
  },
  {
    "text": "collection all right",
    "start": "3409480",
    "end": "3413680"
  },
  {
    "text": "so then I guess what's next what's coming next in net what's happening with",
    "start": "3417839",
    "end": "3423559"
  },
  {
    "text": "c as a programming language having a couple of minutes left let's talk about the entire road",
    "start": "3423559",
    "end": "3429319"
  },
  {
    "text": "map probably not going to happen there's a lot happening with C andet in general",
    "start": "3429319",
    "end": "3435400"
  },
  {
    "text": "we've kind of scratched the surface of some of the more important features being added to net the most important",
    "start": "3435400",
    "end": "3441200"
  },
  {
    "text": "parts are probably performance and how the language uses these different",
    "start": "3441200",
    "end": "3446240"
  },
  {
    "text": "features when it's compiling your application making use of smarter optimizations when it's compiling for",
    "start": "3446240",
    "end": "3451880"
  },
  {
    "text": "64-bit processes making sure that it uses native aot when possible and then trimming away information that it",
    "start": "3451880",
    "end": "3458119"
  },
  {
    "text": "doesn't need internally net will heavily use the new feature switches to allow it to then remove and reduce the final",
    "start": "3458119",
    "end": "3465680"
  },
  {
    "text": "binary when you're producing one of those native ahead of time compiled code pieces and in terms of the language",
    "start": "3465680",
    "end": "3471640"
  },
  {
    "text": "there's still a lot that they would probably have want to add like discriminated unions for example that's",
    "start": "3471640",
    "end": "3478280"
  },
  {
    "text": "something that they've talked about for a very long time and another quite important one is extensions everything",
    "start": "3478280",
    "end": "3485480"
  },
  {
    "text": "they talked about a concept of extensions everything ever since they I think they started with a rosling",
    "start": "3485480",
    "end": "3491200"
  },
  {
    "text": "compiler the russling compiler is what's powering this new C and VB compiler it's",
    "start": "3491200",
    "end": "3497599"
  },
  {
    "text": "the new compilers basically which is now called the Microsoft compiler platform ever since they started this work they",
    "start": "3497599",
    "end": "3503440"
  },
  {
    "text": "talked about extensions everything which is basically the same idea of allowing you to have an extension method but you",
    "start": "3503440",
    "end": "3509760"
  },
  {
    "text": "could add to any type and add anything you could add properties and methods and so forth to anything available in your",
    "start": "3509760",
    "end": "3517119"
  },
  {
    "text": "application but this didn't make it into C 13 they talked about this right up",
    "start": "3517119",
    "end": "3522520"
  },
  {
    "text": "until I think build this year but then a couple of months ago they announced that they R through this from the language",
    "start": "3522520",
    "end": "3528599"
  },
  {
    "text": "and they tend to do that for things that they don't feel is essentially completed so hopefully extensions everything gets",
    "start": "3528599",
    "end": "3535119"
  },
  {
    "text": "into the next version of C as well so with that being said there's a lot happening in net and in C and I hope",
    "start": "3535119",
    "end": "3542559"
  },
  {
    "text": "this has given some inspiration as to what you can look at and if you like to listen more to what I have to say I have",
    "start": "3542559",
    "end": "3548880"
  },
  {
    "text": "a bunch of courses on plural site uh covering things from security to Performance in C and all the advanced",
    "start": "3548880",
    "end": "3556160"
  },
  {
    "text": "language features you could think of in a little bit more of a slow paced manner so hopefully again you like this if you",
    "start": "3556160",
    "end": "3562799"
  },
  {
    "text": "have any questions I'm always available to have a chat ping me on Twitter sent me an email experiment with the new",
    "start": "3562799",
    "end": "3568359"
  },
  {
    "text": "stuff inet I got a ping like last night about a new version of Visual Studio who",
    "start": "3568359",
    "end": "3574680"
  },
  {
    "text": "thinks I updated exactly I didn't because that would have been interesting today would",
    "start": "3574680",
    "end": "3581720"
  },
  {
    "text": "break all my demos but they just released a new preview version and it's all go live license as well so if you",
    "start": "3581720",
    "end": "3587480"
  },
  {
    "text": "want to experiment with net9 it's a go live license you can do that and it's all supported so thank you so much for",
    "start": "3587480",
    "end": "3593680"
  },
  {
    "text": "coming if you would like to leave a green ticket on the box if you didn't like this talk you can skip the line and",
    "start": "3593680",
    "end": "3599480"
  },
  {
    "text": "go and get a coffee all right thank [Applause]",
    "start": "3599480",
    "end": "3606699"
  },
  {
    "text": "you",
    "start": "3624960",
    "end": "3627960"
  },
  {
    "text": "e",
    "start": "3654920",
    "end": "3657920"
  },
  {
    "text": "e",
    "start": "3684920",
    "end": "3687920"
  },
  {
    "text": "e",
    "start": "3714839",
    "end": "3717839"
  },
  {
    "text": "e for",
    "start": "3744839",
    "end": "3748880"
  }
]