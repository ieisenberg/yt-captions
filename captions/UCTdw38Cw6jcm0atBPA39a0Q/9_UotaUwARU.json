[
  {
    "text": "so we are ready to go it's so nice to be back in person",
    "start": "2879",
    "end": "9599"
  },
  {
    "text": "I mean conference talk talking to a video at home is never ever the same so",
    "start": "9599",
    "end": "15540"
  },
  {
    "text": "thank you for being here and uh now we will spend one hour talking about",
    "start": "15540",
    "end": "21779"
  },
  {
    "text": "oauth the good parts I am Anders",
    "start": "21779",
    "end": "27420"
  },
  {
    "text": "um and I'm working as a software architect",
    "start": "27420",
    "end": "32460"
  },
  {
    "text": "and developer at duendo software my background is that I've always been",
    "start": "32460",
    "end": "38940"
  },
  {
    "text": "interested in Security Solutions so when I wasn't a development team where we had",
    "start": "38940",
    "end": "44520"
  },
  {
    "text": "to add some kind of security I was always the one saying yes I'll take that and that made me end up implementing a",
    "start": "44520",
    "end": "52379"
  },
  {
    "text": "lot of saml 2 work which felt modern at the time but looking at the history line here that is",
    "start": "52379",
    "end": "59460"
  },
  {
    "text": "really the origin all the way back to the left in 2005 Samuel 2 was introduced and that",
    "start": "59460",
    "end": "68460"
  },
  {
    "text": "was the first true web-based single sign-on protocol to evolve",
    "start": "68460",
    "end": "73860"
  },
  {
    "text": "we had single sign-on or sign-on protocols before that that could be used with web",
    "start": "73860",
    "end": "80159"
  },
  {
    "text": "and tlm Kerberos Etc but those were non-web-based protocols that were",
    "start": "80159",
    "end": "86400"
  },
  {
    "text": "adapted to work together with the web while Channel 2 was built on Modern Technologies",
    "start": "86400",
    "end": "92100"
  },
  {
    "text": "like http XML soap XML signatures modern at the time",
    "start": "92100",
    "end": "102259"
  },
  {
    "text": "uh and that worked fine for a few years",
    "start": "102299",
    "end": "107340"
  },
  {
    "text": "until someone find out that if you're looking at the timing here this is around the same time a single page",
    "start": "107340",
    "end": "113939"
  },
  {
    "text": "applications evolved where JavaScript really took off from being some awkward thing that people used to do weird stuff",
    "start": "113939",
    "end": "121259"
  },
  {
    "text": "in their pages to being a major tool for modern",
    "start": "121259",
    "end": "127020"
  },
  {
    "text": "applications and that's when it turned out we needed something that worked better with",
    "start": "127020",
    "end": "133500"
  },
  {
    "text": "JavaScript than the XML based standard did that's where it was first one and",
    "start": "133500",
    "end": "138780"
  },
  {
    "text": "then two were born uh what one was born on a I think it was",
    "start": "138780",
    "end": "144840"
  },
  {
    "text": "an initiative by Twitter to be able to create a clients that could act on",
    "start": "144840",
    "end": "150599"
  },
  {
    "text": "behalf of a user unfortunately everyone had some flaws",
    "start": "150599",
    "end": "156000"
  },
  {
    "text": "so I was two was created a few years yet later I was two was based on the solid",
    "start": "156000",
    "end": "161940"
  },
  {
    "text": "foundation on security threat models security considerations looking at active research on security",
    "start": "161940",
    "end": "170300"
  },
  {
    "text": "and it turned out to work I mean we are here 10 years later and the foundations",
    "start": "170300",
    "end": "176099"
  },
  {
    "text": "are still the same that means that it made a good job back then",
    "start": "176099",
    "end": "181800"
  },
  {
    "text": "some more things to note here is that two years later open ID connect core was",
    "start": "181800",
    "end": "186900"
  },
  {
    "text": "added oauth 2 is an authorization protocol it's all about getting access to an API",
    "start": "186900",
    "end": "193260"
  },
  {
    "text": "and soon people realize they could abuse it to create a login experience to log in with Facebook",
    "start": "193260",
    "end": "199980"
  },
  {
    "text": "but in fact it was not a proper sign-in protocol and that's why open ID connect was added on top of oauth 2 as an add-on",
    "start": "199980",
    "end": "208260"
  },
  {
    "text": "that supports a true single sign-on set of features",
    "start": "208260",
    "end": "213860"
  },
  {
    "text": "we have some best current practices BCPS being published later on 2017 for Native",
    "start": "214500",
    "end": "220260"
  },
  {
    "text": "apps uh uh in 1920 Json web token and upcoming",
    "start": "220260",
    "end": "225900"
  },
  {
    "text": "what I think is an important part is the best current practice is for browser-based applications browser-based",
    "start": "225900",
    "end": "232860"
  },
  {
    "text": "applications means single page applications and we will get back to that a bit later",
    "start": "232860",
    "end": "237959"
  },
  {
    "text": "today and I will make a full talk tomorrow Shameless plug about",
    "start": "237959",
    "end": "243840"
  },
  {
    "text": "best current practices for browser-based applications so oauth 2 has been around for a while",
    "start": "243840",
    "end": "250980"
  },
  {
    "text": "and just within the standard that that has been around for a while there are a lot of different flavors in it",
    "start": "250980",
    "end": "257699"
  },
  {
    "text": "flavors that might be of hypothetical interest or if",
    "start": "257699",
    "end": "264000"
  },
  {
    "text": "you are one of those liking code archeology working on Legacy systems you might need",
    "start": "264000",
    "end": "271500"
  },
  {
    "text": "to dig into how the Legacy flows and features as well with two works but for",
    "start": "271500",
    "end": "276600"
  },
  {
    "text": "modern applications it's fairly simple there is a correspondence to the JavaScript the good parts",
    "start": "276600",
    "end": "282440"
  },
  {
    "text": "where we just need to pick out a few key things that solves 95 of all the",
    "start": "282440",
    "end": "289080"
  },
  {
    "text": "scenarios so today we will look at why oauth",
    "start": "289080",
    "end": "294240"
  },
  {
    "text": "exists protocol flows some typical application scenarios open at the connect and why oauth is not",
    "start": "294240",
    "end": "300660"
  },
  {
    "text": "user Authentication and of course I will also talk about a bit about how openid connect works if we",
    "start": "300660",
    "end": "307440"
  },
  {
    "text": "do want proper user authentication as a further reading so why does it exist",
    "start": "307440",
    "end": "314160"
  },
  {
    "text": "well the simple problem that erworth tries to solve is something a thing over",
    "start": "314160",
    "end": "321479"
  },
  {
    "text": "here want to call an API over there",
    "start": "321479",
    "end": "326720"
  },
  {
    "text": "we could use a simple API key which is just another name for a",
    "start": "326759",
    "end": "332400"
  },
  {
    "text": "password right so what do we think if we have multiple apis",
    "start": "332400",
    "end": "338280"
  },
  {
    "text": "is it a good idea to reuse the same password for multiple services",
    "start": "338280",
    "end": "343440"
  },
  {
    "text": "no is it a good idea to send our password in every single request where it's at",
    "start": "343440",
    "end": "351240"
  },
  {
    "text": "risk for being stored in logs if we send it as payload",
    "start": "351240",
    "end": "357419"
  },
  {
    "text": "in a post buddy for example it might be logged by a web server it's not a good idea we do not want to",
    "start": "357419",
    "end": "365820"
  },
  {
    "text": "send our precious password all over again our precious password should be used once to establish a session or",
    "start": "365820",
    "end": "373280"
  },
  {
    "text": "retrieve a token and then we should use something less valuable and that's a",
    "start": "373280",
    "end": "382380"
  },
  {
    "text": "token something that proves that we once had the password",
    "start": "382380",
    "end": "387780"
  },
  {
    "text": "so what is a token and I'm happy to show you a sample to",
    "start": "387780",
    "end": "393120"
  },
  {
    "text": "assertion this slide both shows an example of a",
    "start": "393120",
    "end": "399120"
  },
  {
    "text": "token and the contents that are needed in the typical token",
    "start": "399120",
    "end": "404580"
  },
  {
    "text": "but I also think it's index it's a splendid example of why saml 2 is",
    "start": "404580",
    "end": "410460"
  },
  {
    "text": "horrible because it's so much other stuff in here compared to more modern token formats",
    "start": "410460",
    "end": "416699"
  },
  {
    "text": "a token should contain an issue and a signature who issued this token and a digital",
    "start": "416699",
    "end": "423780"
  },
  {
    "text": "signature proving that it was actually this entity that issued the token and",
    "start": "423780",
    "end": "429180"
  },
  {
    "text": "that the token has not been tampered with after issuing it should contain a Time window",
    "start": "429180",
    "end": "437220"
  },
  {
    "text": "and this token this means I should update my slides I think the this token was valid in 2015",
    "start": "437220",
    "end": "445259"
  },
  {
    "text": "in August and it was valid for uh like half a minute half an hour",
    "start": "445259",
    "end": "453479"
  },
  {
    "text": "which means it's perfectly fine to publish it here because it's not would never be accepted in a way else no",
    "start": "453479",
    "end": "461720"
  },
  {
    "text": "it should contain scoping which is where is this",
    "start": "461759",
    "end": "467400"
  },
  {
    "text": "token valid so remember we had two issues with using our password or API key one being that",
    "start": "467400",
    "end": "474720"
  },
  {
    "text": "if it got stolen it could be used forever a token if it is stolen this",
    "start": "474720",
    "end": "480300"
  },
  {
    "text": "token was only valid for half an hour access tokens are typically only valid for half an hour maybe up to an hour and",
    "start": "480300",
    "end": "488039"
  },
  {
    "text": "after that they are worthless for an attacker that stole it and they are also designated a specific",
    "start": "488039",
    "end": "495840"
  },
  {
    "text": "API our password might uh mostly credentials",
    "start": "495840",
    "end": "500940"
  },
  {
    "text": "is pro are probably valid for multitude of apis we because we have access to",
    "start": "500940",
    "end": "506520"
  },
  {
    "text": "multiple apis but the token is restricted it's restrained it's just valid at this specific API",
    "start": "506520",
    "end": "513719"
  },
  {
    "text": "so if that token is stolen it cannot be used to call other apis",
    "start": "513719",
    "end": "519180"
  },
  {
    "text": "we have some information in here on authentication how was the user originally authenticated at the issuer",
    "start": "519180",
    "end": "525360"
  },
  {
    "text": "and claims key value pairs just information about the user",
    "start": "525360",
    "end": "530940"
  },
  {
    "text": "so what should go into claims what should we put into an access token",
    "start": "530940",
    "end": "537839"
  },
  {
    "text": "it's entirely up to the consumer so the contents of the access Turkish",
    "start": "537839",
    "end": "543240"
  },
  {
    "text": "should be whatever the API needs so it's the API that dictates",
    "start": "543240",
    "end": "549959"
  },
  {
    "text": "the content ideally the access token should be small while",
    "start": "549959",
    "end": "555540"
  },
  {
    "text": "on the same time contain everything the API needs to make authorization decisions",
    "start": "555540",
    "end": "560700"
  },
  {
    "text": "and typically we do not want the API to have to make outbound calls to external",
    "start": "560700",
    "end": "566160"
  },
  {
    "text": "Services due to latency to make authorization decisions so when the API receives an access token",
    "start": "566160",
    "end": "573959"
  },
  {
    "text": "the information in the access token combined with any information it has in its own storage should be enough to make",
    "start": "573959",
    "end": "580080"
  },
  {
    "text": "all authorization decisions",
    "start": "580080",
    "end": "583519"
  },
  {
    "text": "in oath 2 we have some before we see I want to just get some basic architecture",
    "start": "585420",
    "end": "592140"
  },
  {
    "text": "and a special terminology we're talking about the API but the",
    "start": "592140",
    "end": "598260"
  },
  {
    "text": "oauth term is actually resource server and authorization server",
    "start": "598260",
    "end": "605100"
  },
  {
    "text": "then we have clients clients are things a client is never a human being or user",
    "start": "605100",
    "end": "611640"
  },
  {
    "text": "a client is a thing that communicates with the other the",
    "start": "611640",
    "end": "616740"
  },
  {
    "text": "authorization server and the resource server",
    "start": "616740",
    "end": "621740"
  },
  {
    "text": "clients could be a browser it could be mobile app it could be a server running",
    "start": "622200",
    "end": "627240"
  },
  {
    "text": "in the data center these have some different properties the red ones here",
    "start": "627240",
    "end": "632339"
  },
  {
    "text": "are what we call public clients the reason is that anything that runs in",
    "start": "632339",
    "end": "638040"
  },
  {
    "text": "the browser a single page application the source code of that is publicly available anyone run when my browser",
    "start": "638040",
    "end": "645420"
  },
  {
    "text": "gets to run the single-page application it first has to download it of a public place",
    "start": "645420",
    "end": "651779"
  },
  {
    "text": "and then I am a developer I can of course use the browse developer tools to inspect the code of the single page",
    "start": "651779",
    "end": "658440"
  },
  {
    "text": "application I can inspect the local storage I can inspect anything that",
    "start": "658440",
    "end": "663600"
  },
  {
    "text": "happens in the browser and affect it and tamper with it that means that if we would put a client secret or",
    "start": "663600",
    "end": "671760"
  },
  {
    "text": "password for the client in the bundle that is get downloaded with the single",
    "start": "671760",
    "end": "676980"
  },
  {
    "text": "page application that would not stay secret for very long right same with the mobile app",
    "start": "676980",
    "end": "684120"
  },
  {
    "text": "I need to be able to download it to my phone so from the App Store so if I embed anything embed anything secret in",
    "start": "684120",
    "end": "690600"
  },
  {
    "text": "the app code it can be extracted the server running in the data center on",
    "start": "690600",
    "end": "697019"
  },
  {
    "text": "the other hand is confidential we deploy it it's under our control we can have any kind of Secrets passwords connection",
    "start": "697019",
    "end": "704040"
  },
  {
    "text": "strings whatever configured in our confidential client and this is important later on when we",
    "start": "704040",
    "end": "711540"
  },
  {
    "text": "look at security models that it's of course more challenging to solve the public clients than the confidential",
    "start": "711540",
    "end": "717240"
  },
  {
    "text": "ones and then we have the user sorry resource owner so why is it called resource owner",
    "start": "717240",
    "end": "725640"
  },
  {
    "text": "well first we have the resource server imagine if the client application is a cool Google Calendar widget to display",
    "start": "725640",
    "end": "732480"
  },
  {
    "text": "my upcoming meetings in making me turn up in time to my meetings in the future that would be a good idea wouldn't it",
    "start": "732480",
    "end": "740180"
  },
  {
    "text": "then uh the resource is my Google Calendar another word my so I'm the",
    "start": "740180",
    "end": "747120"
  },
  {
    "text": "owner of my calendar data so from the perspective oauth 2 why we",
    "start": "747120",
    "end": "752339"
  },
  {
    "text": "need to authentic the authorizes the client to access the resource I am the",
    "start": "752339",
    "end": "757680"
  },
  {
    "text": "one owning it but of course I'm also a user and the flow is fairly simple first",
    "start": "757680",
    "end": "764100"
  },
  {
    "text": "there is some interaction between the client and the authorization server to get a token",
    "start": "764100",
    "end": "770700"
  },
  {
    "text": "we return the access token and then we use that access token and calling apis",
    "start": "770700",
    "end": "776700"
  },
  {
    "text": "when we request to the Token we should also indicate a scope so what is it we want to be allowed to access",
    "start": "776700",
    "end": "785420"
  },
  {
    "text": "so if we go back to the example of the Google Calendar widget",
    "start": "785579",
    "end": "791000"
  },
  {
    "text": "it would make perfect sense that the Google Calendar widget would be able to read my calendar",
    "start": "791579",
    "end": "798360"
  },
  {
    "text": "if it can't it won't be much of a calendar widget right but should my Google Calendar widget be",
    "start": "798360",
    "end": "805079"
  },
  {
    "text": "able to read my Gmail the Google Calendar widget be able to send emails on my behalf without me",
    "start": "805079",
    "end": "811920"
  },
  {
    "text": "knowing that or if people sign in using the Facebook",
    "start": "811920",
    "end": "818220"
  },
  {
    "text": "credential to sign in to some cool game or whatever link on Facebook should that",
    "start": "818220",
    "end": "824519"
  },
  {
    "text": "cool game or whatever be allowed to post new spam on the user's timeline no",
    "start": "824519",
    "end": "831000"
  },
  {
    "text": "that's why scope is important we indicate with the scope what the access",
    "start": "831000",
    "end": "836100"
  },
  {
    "text": "token should be valid for some examples are GitHub Scopes where we",
    "start": "836100",
    "end": "842459"
  },
  {
    "text": "have for example the master user scope see if I can get a",
    "start": "842459",
    "end": "849200"
  },
  {
    "text": "get a better pointer here pen we have a user scope",
    "start": "850380",
    "end": "856879"
  },
  {
    "text": "ah here it is here we have a user scope which is the entire access to the user but we have also partitioned it to do",
    "start": "859320",
    "end": "866100"
  },
  {
    "text": "some lower for example read-only access to the user so they've done a great job at GitHub at",
    "start": "866100",
    "end": "873000"
  },
  {
    "text": "petitioning their Scopes and setting up a design but take a moment to look at the naming",
    "start": "873000",
    "end": "879480"
  },
  {
    "text": "conventions is it user Canal read or read kernel user",
    "start": "879480",
    "end": "884579"
  },
  {
    "text": "is it even colon or or is it public underscore repo",
    "start": "884579",
    "end": "891019"
  },
  {
    "text": "name means hard Google takes a similar approach but they use full URLs to indicate the apis",
    "start": "891420",
    "end": "901279"
  },
  {
    "text": "then once we have the foundations uh we have two protocol flows that we need to",
    "start": "902160",
    "end": "907320"
  },
  {
    "text": "really care about that covers 95 of the cases we need the first one is much into machine communication we have no",
    "start": "907320",
    "end": "914040"
  },
  {
    "text": "interactive user present and the protocol flow is that first we",
    "start": "914040",
    "end": "919980"
  },
  {
    "text": "make a post to the Token endpoint of the authorization server at this point",
    "start": "919980",
    "end": "926399"
  },
  {
    "text": "here we do include our",
    "start": "926399",
    "end": "932480"
  },
  {
    "text": "we do include our client secret to password but we are only sending that to the authorization server",
    "start": "932480",
    "end": "940820"
  },
  {
    "text": "and we get a response back with the token an access token that we can subsequently",
    "start": "941160",
    "end": "946680"
  },
  {
    "text": "use for correlate the apis we get in clear text back also in the",
    "start": "946680",
    "end": "953519"
  },
  {
    "text": "token response that this scope token is valid for API one",
    "start": "953519",
    "end": "959880"
  },
  {
    "text": "and how for how long it is valid",
    "start": "959880",
    "end": "963980"
  },
  {
    "text": "the contents of the tokens uh if we decode it looks like there's a Json it's a head and it's a payload",
    "start": "966000",
    "end": "973500"
  },
  {
    "text": "we have an issue and the signature much the same as we had in the saml 2 token we have a Time window here represented",
    "start": "973500",
    "end": "980820"
  },
  {
    "text": "by a much shorter format issued at and expiry EXP and we have the scope where it is valid",
    "start": "980820",
    "end": "987540"
  },
  {
    "text": "and also the client ID when doing client ID is just one of many",
    "start": "987540",
    "end": "993720"
  },
  {
    "text": "possible claims that could be in here some information about the client when we do make authorization decisions",
    "start": "993720",
    "end": "1001399"
  },
  {
    "text": "on the API should we look at the client ID specifically is that a good idea",
    "start": "1001399",
    "end": "1008000"
  },
  {
    "text": "no it's like hard coding in admin username in your application we're not",
    "start": "1008000",
    "end": "1013040"
  },
  {
    "text": "doing that anymore we are using roles aren't we expect except if we are using Linux then",
    "start": "1013040",
    "end": "1018860"
  },
  {
    "text": "we still have user zero root which is the admin user but everybody else has",
    "start": "1018860",
    "end": "1025938"
  },
  {
    "text": "moved on to using assigned roles for permissions same with apis we should use",
    "start": "1025939",
    "end": "1032058"
  },
  {
    "text": "the scope parameters as the authorization decision base for the",
    "start": "1032059",
    "end": "1037520"
  },
  {
    "text": "authorization decision this token is then transmitted via the",
    "start": "1037520",
    "end": "1043459"
  },
  {
    "text": "authorization header or form body and then we have some access token processing rules what",
    "start": "1043459",
    "end": "1050540"
  },
  {
    "text": "should we do the first and most important thing is the access token is something between",
    "start": "1050540",
    "end": "1055640"
  },
  {
    "text": "the authorization server and API as a client application as you never ever look into it",
    "start": "1055640",
    "end": "1062059"
  },
  {
    "text": "the document the format of the access token might even not be a jot or anything that is documented in fact it",
    "start": "1062059",
    "end": "1069799"
  },
  {
    "text": "used to be at least that Microsoft Azure active directory when you got an access token for if you create your an",
    "start": "1069799",
    "end": "1076520"
  },
  {
    "text": "application of your own in and register with Azure ID it will issue George standard tokens",
    "start": "1076520",
    "end": "1083299"
  },
  {
    "text": "that is easily consumable but the tokens that are used for Microsoft growth for Microsoft's own apis",
    "start": "1083299",
    "end": "1089960"
  },
  {
    "text": "or in another undocumented format or at least they used to be you couldn't inspect them you couldn't do anything",
    "start": "1089960",
    "end": "1095660"
  },
  {
    "text": "with them I think that was deliberate",
    "start": "1095660",
    "end": "1099700"
  },
  {
    "text": "when the API receives the token on their hand it should validate the signature so",
    "start": "1101360",
    "end": "1107539"
  },
  {
    "text": "that it is not tampered with it should validate it that it is an allowed signature",
    "start": "1107539",
    "end": "1113720"
  },
  {
    "text": "this is important don't use Legacy crypto that are not considered strong anymore",
    "start": "1113720",
    "end": "1119960"
  },
  {
    "text": "and there is actually one interesting weakness or flaw that has been found in",
    "start": "1119960",
    "end": "1125539"
  },
  {
    "text": "our wealth implementation that is that in oauth 2 there is a signature",
    "start": "1125539",
    "end": "1131120"
  },
  {
    "text": "algorithm named none it was introduced in the standard for testing purposes so you would be able to",
    "start": "1131120",
    "end": "1138620"
  },
  {
    "text": "run flows without having to do all the overhead of creating a signature so if you have a complaint level 2",
    "start": "1138620",
    "end": "1145640"
  },
  {
    "text": "library that allows all signatures in this pack that Library will also allow",
    "start": "1145640",
    "end": "1152500"
  },
  {
    "text": "non-signed tokens because the non-algorithm is valid of course it",
    "start": "1152500",
    "end": "1158059"
  },
  {
    "text": "should not be blocked a client configuration should of course",
    "start": "1158059",
    "end": "1163520"
  },
  {
    "text": "block the non-algorithm we should check the type issue must be what we expect",
    "start": "1163520",
    "end": "1170240"
  },
  {
    "text": "the current time must be within the time window defined by expiry and issue that and the scope must be the expected value",
    "start": "1170240",
    "end": "1177860"
  },
  {
    "text": "that so that the token is actually for this API not for something else",
    "start": "1177860",
    "end": "1184960"
  },
  {
    "text": "foreign is fine isn't it then we can use the token forever",
    "start": "1185120",
    "end": "1191360"
  },
  {
    "text": "no not forever it was an expiry so this is where we get to a bit of http",
    "start": "1191360",
    "end": "1196880"
  },
  {
    "text": "geekiness four one versus four or three",
    "start": "1196880",
    "end": "1202240"
  },
  {
    "text": "both of these means you're not allowed four one four or three but there is a",
    "start": "1204080",
    "end": "1209299"
  },
  {
    "text": "huge difference in them 401 means a teenager shows up at the pub and tries",
    "start": "1209299",
    "end": "1216980"
  },
  {
    "text": "to con wins the guard they are about 18 I think it's in Norway to be able to",
    "start": "1216980",
    "end": "1222620"
  },
  {
    "text": "enter four or three on the other hand is that a teenager shows up at the pub showing",
    "start": "1222620",
    "end": "1228860"
  },
  {
    "text": "an ID card proving they are 16 and trying to convince the guard they should be let in anyways so 401 means we have",
    "start": "1228860",
    "end": "1236360"
  },
  {
    "text": "no idea who the user is 403 means we have a perfect idea who you are and you're not allowed",
    "start": "1236360",
    "end": "1242480"
  },
  {
    "text": "and this can be used when we're handling token refresh and token expiry",
    "start": "1242480",
    "end": "1248419"
  },
  {
    "text": "because we should of course not go and get a new token for every Alpha API call that would cause horrible latency we",
    "start": "1248419",
    "end": "1255320"
  },
  {
    "text": "should get a token and then reuse it for as long as it as it is valid once it's no longer valid we need to get",
    "start": "1255320",
    "end": "1263059"
  },
  {
    "text": "a new token in the machine to meditation scenarios it's really simple we're just making another call to the Token",
    "start": "1263059",
    "end": "1268220"
  },
  {
    "text": "endpoint we can do this in two ways proactive what we just keep track of the",
    "start": "1268220",
    "end": "1274340"
  },
  {
    "text": "expiration time and if we are had a one hour expiration",
    "start": "1274340",
    "end": "1280280"
  },
  {
    "text": "after 55 minutes we go and get a new token and use that instead or we could",
    "start": "1280280",
    "end": "1285799"
  },
  {
    "text": "be reactive wait for through the 401 which indicates that the token was not",
    "start": "1285799",
    "end": "1291320"
  },
  {
    "text": "accepted and then retry proactive feels a bit better but on the",
    "start": "1291320",
    "end": "1296720"
  },
  {
    "text": "other hand reactive in a modern cloud-based environment we always need retry logic because things fail so we",
    "start": "1296720",
    "end": "1303860"
  },
  {
    "text": "might as well build build in retail Logic for this as well",
    "start": "1303860",
    "end": "1309220"
  },
  {
    "text": "so that's uh what we have the theory behind an application",
    "start": "1309559",
    "end": "1316760"
  },
  {
    "text": "um and if we look at a some code",
    "start": "1316760",
    "end": "1324460"
  },
  {
    "text": "what would it look like well first we have the authority sorry I should have switched to dark mode is",
    "start": "1324500",
    "end": "1331760"
  },
  {
    "text": "horrible isn't it uh let's see it's the to a",
    "start": "1331760",
    "end": "1339640"
  },
  {
    "text": "tells it's on the first page of the options I'll just switch to high contrast and blue extra contrast and",
    "start": "1339640",
    "end": "1348500"
  },
  {
    "text": "I'll move it to the right monitor of course",
    "start": "1348500",
    "end": "1352419"
  },
  {
    "text": "here we go too many yeah I think I can get it",
    "start": "1362059",
    "end": "1369260"
  },
  {
    "text": "here we go right uh so first in our machine to machine",
    "start": "1369260",
    "end": "1376880"
  },
  {
    "text": "Communications we need to just point out where is the authority where is the authorization server do you",
    "start": "1376880",
    "end": "1384140"
  },
  {
    "text": "see at the back or should I make it larger it works yep",
    "start": "1384140",
    "end": "1389840"
  },
  {
    "text": "and then we request a token and then we call an API it's not worse than that",
    "start": "1389840",
    "end": "1398140"
  },
  {
    "text": "there is a mechanism here we get a discover document where that is essentially containing information about",
    "start": "1398500",
    "end": "1405679"
  },
  {
    "text": "the token endpoint where that is and then we send request to get it and then we can just call the",
    "start": "1405679",
    "end": "1412220"
  },
  {
    "text": "API now and if I did this right and prepared",
    "start": "1412220",
    "end": "1417440"
  },
  {
    "text": "that right we should be able to Simply run it",
    "start": "1417440",
    "end": "1421658"
  },
  {
    "text": "so here we go we got the token response and please note that in this Json we got",
    "start": "1426740",
    "end": "1433760"
  },
  {
    "text": "this expires in I mean when we looked if we look at the",
    "start": "1433760",
    "end": "1438860"
  },
  {
    "text": "actual token contents we do have the expiry date in there why do we put the expiration in the",
    "start": "1438860",
    "end": "1446780"
  },
  {
    "text": "payload also in the wrapping well it is because the client is not",
    "start": "1446780",
    "end": "1452120"
  },
  {
    "text": "expected to decode the token but the client needs to know how the expiration time of the token",
    "start": "1452120",
    "end": "1460000"
  },
  {
    "text": "so much into machine fairly simple",
    "start": "1463100",
    "end": "1468400"
  },
  {
    "text": "but how often are we interested in adjustment into machine we need the user involver don't we",
    "start": "1469039",
    "end": "1475159"
  },
  {
    "text": "so we then interactive applications we're using another flow called the authorization code flow which is a bit",
    "start": "1475159",
    "end": "1482000"
  },
  {
    "text": "more complicated the good thing about the authorization code flow is that it turns out that it",
    "start": "1482000",
    "end": "1489200"
  },
  {
    "text": "works for any kind of interactive application if you were looking in this area for",
    "start": "1489200",
    "end": "1494600"
  },
  {
    "text": "five six years ago you would have heard about the implicit flow the hybrid flow the code flow and",
    "start": "1494600",
    "end": "1501380"
  },
  {
    "text": "they should be used for different kinds of application to solve different kinds of problems scenarios depending on",
    "start": "1501380",
    "end": "1508280"
  },
  {
    "text": "things nowadays we have pixie proof key code exchange",
    "start": "1508280",
    "end": "1514039"
  },
  {
    "text": "which is a later on addition to the authorization code flow that",
    "start": "1514039",
    "end": "1521179"
  },
  {
    "text": "makes authorization code flow secure for all interactive applications",
    "start": "1521179",
    "end": "1527000"
  },
  {
    "text": "it allows UI for during the login and that is dependent on the browser",
    "start": "1527000",
    "end": "1533659"
  },
  {
    "text": "that's the good thing because that means that the client application do not know have",
    "start": "1533659",
    "end": "1539419"
  },
  {
    "text": "has no knowledge about the user interface or the login experience we",
    "start": "1539419",
    "end": "1544520"
  },
  {
    "text": "could use well the Swedish mobile bank ID app Etc",
    "start": "1544520",
    "end": "1549740"
  },
  {
    "text": "and it's called it's a net ID netid here in Norway",
    "start": "1549740",
    "end": "1555940"
  },
  {
    "text": "for sign in and the client application would not have to know about bangidia",
    "start": "1558279",
    "end": "1564620"
  },
  {
    "text": "we could even make an application that works in both read and Norway and access both Sweden Norwegian Bank IDs and the",
    "start": "1564620",
    "end": "1571640"
  },
  {
    "text": "client application would not know about it it's up to the authorization server",
    "start": "1571640",
    "end": "1576980"
  },
  {
    "text": "the bad thing about it is that whenever you the user needs to log in to an app they are redirected to the browser in my",
    "start": "1576980",
    "end": "1585200"
  },
  {
    "text": "opinion it is maybe not the best user experience and people get a bit why are we but",
    "start": "1585200",
    "end": "1594140"
  },
  {
    "text": "the advantages to me are so strongly that is best to do it that way",
    "start": "1594140",
    "end": "1601840"
  },
  {
    "text": "and the authorization code flow supports refresh tokens for ux friendly token management I mean",
    "start": "1602419",
    "end": "1608659"
  },
  {
    "text": "when we were looking in machine to machine communication if the token was about to expire it was just to recall",
    "start": "1608659",
    "end": "1614659"
  },
  {
    "text": "the token endpoint to get a new token that is we redid the login",
    "start": "1614659",
    "end": "1620659"
  },
  {
    "text": "but what if it is a interactive application what would you say if you were in the middle of working with",
    "start": "1620659",
    "end": "1626539"
  },
  {
    "text": "something on your computer and it says we are sorry your access token is about to expire just a second we will read or",
    "start": "1626539",
    "end": "1633799"
  },
  {
    "text": "write you right now right away where you need to log in again and sorry if you had any ongoing work it is now lost",
    "start": "1633799",
    "end": "1640880"
  },
  {
    "text": "that would be quite awkward so we need a better mechanism for to how can",
    "start": "1640880",
    "end": "1646400"
  },
  {
    "text": "for refreshing the token",
    "start": "1646400",
    "end": "1650380"
  },
  {
    "text": "the authorization code flow happens in two phases the first one is uh a front",
    "start": "1651679",
    "end": "1658039"
  },
  {
    "text": "Channel where the client redirects the browser or opens the user system browser to",
    "start": "1658039",
    "end": "1665140"
  },
  {
    "text": "communicate with the authorization server while the actual sign-on happens and the",
    "start": "1665140",
    "end": "1671659"
  },
  {
    "text": "second phase is a back Channel called where it retrieves the tokens",
    "start": "1671659",
    "end": "1678940"
  },
  {
    "text": "on the front Channel request it's a simple redirect to [Music] um the authorization server with a bunch of",
    "start": "1679940",
    "end": "1687140"
  },
  {
    "text": "protocol parameters we include the let's see if",
    "start": "1687140",
    "end": "1693140"
  },
  {
    "text": "we get them here we have the client ID who is the client",
    "start": "1693140",
    "end": "1701779"
  },
  {
    "text": "the reader should we go whereas we're done that the mode is code what API or what scope do we want a",
    "start": "1701779",
    "end": "1709880"
  },
  {
    "text": "state that is just echoed back to the client so the client can correlate the answer okay I sent a request what is",
    "start": "1709880",
    "end": "1718039"
  },
  {
    "text": "this response for and then the pkce pixie part a hash of a verifier",
    "start": "1718039",
    "end": "1726400"
  },
  {
    "text": "let's come back to that when we look at the response so then a couple of things happens on the authorization server user",
    "start": "1726500",
    "end": "1732740"
  },
  {
    "text": "authentication if required if the user signs on to the authentication server or authorization server then we have the",
    "start": "1732740",
    "end": "1739340"
  },
  {
    "text": "consent screen where the user should",
    "start": "1739340",
    "end": "1744700"
  },
  {
    "text": "carefully investigate what permission it gives to this bogus calendar viewing",
    "start": "1744700",
    "end": "1749960"
  },
  {
    "text": "application that wants to read your Gmail and approve it if",
    "start": "1749960",
    "end": "1755480"
  },
  {
    "text": "once the front Channel response then is very",
    "start": "1755480",
    "end": "1762500"
  },
  {
    "text": "basic it just contains a code which is a handle representation of the",
    "start": "1762500",
    "end": "1768320"
  },
  {
    "text": "authentication occurrence and the status that go back now the back Channel request the client",
    "start": "1768320",
    "end": "1776179"
  },
  {
    "text": "makes a back-end request to the Token sorry here we are to the Token endpoint",
    "start": "1776179",
    "end": "1781880"
  },
  {
    "text": "where it includes the code ABC that it got and now it needs to prove that it is the",
    "start": "1781880",
    "end": "1789860"
  },
  {
    "text": "right client actually Redeeming the code and this is a guard against codex",
    "start": "1789860",
    "end": "1796279"
  },
  {
    "text": "filtration attacks where someone somehow got hold of the talk of the code I mean",
    "start": "1796279",
    "end": "1801679"
  },
  {
    "text": "the code is passed over the client's browser so if you have a bogus client browser plugin you have a cross",
    "start": "1801679",
    "end": "1808760"
  },
  {
    "text": "if site scripting vulnerability on the site things like that you have a bogus",
    "start": "1808760",
    "end": "1814360"
  },
  {
    "text": "a malicious app installed on your phone that register the same URL prefix",
    "start": "1814360",
    "end": "1822260"
  },
  {
    "text": "there are various scenarios where the code could get stolen so before we are redeeming that for the",
    "start": "1822260",
    "end": "1827720"
  },
  {
    "text": "actual access token which should have the client should authenticate to the",
    "start": "1827720",
    "end": "1832760"
  },
  {
    "text": "authorization server that it is the right client",
    "start": "1832760",
    "end": "1837820"
  },
  {
    "text": "if this is a confidential client what can we use",
    "start": "1838340",
    "end": "1843398"
  },
  {
    "text": "something running in our data center that is able to keep secrets we can use a password a client secret",
    "start": "1843860",
    "end": "1850399"
  },
  {
    "text": "that is stored on the client on the client server in our data center",
    "start": "1850399",
    "end": "1856100"
  },
  {
    "text": "but what if it is a public client is a browser my mobile phone this is where",
    "start": "1856100",
    "end": "1861260"
  },
  {
    "text": "pkc proof key code exchange is so clever remember that",
    "start": "1861260",
    "end": "1867919"
  },
  {
    "text": "in the previous step we did send a hash of a verifier on the request",
    "start": "1867919",
    "end": "1873919"
  },
  {
    "text": "the authorization service saved that way so essentially the client creates a",
    "start": "1873919",
    "end": "1879260"
  },
  {
    "text": "one-time password and then sends the hash of it and now it sends the actual verifier long so the authorization",
    "start": "1879260",
    "end": "1886039"
  },
  {
    "text": "server can take the hash in the token request it takes or take the verifier in",
    "start": "1886039",
    "end": "1892279"
  },
  {
    "text": "the token request hash it and compare it to the one that was sent in the initial request and that way the authorization",
    "start": "1892279",
    "end": "1899120"
  },
  {
    "text": "server can know for sure that the client that is actually Redeeming the code",
    "start": "1899120",
    "end": "1905000"
  },
  {
    "text": "is also the one that initiated the flow",
    "start": "1905000",
    "end": "1910100"
  },
  {
    "text": "and this was a guard that was originally introduced to guard against malicious mobile apps that stole uh that that read",
    "start": "1910100",
    "end": "1918080"
  },
  {
    "text": "registered the um the same redirect URI and override it and it thus was invoked and took and",
    "start": "1918080",
    "end": "1927760"
  },
  {
    "text": "stole the code when it was coming back but they never had the verifier just the",
    "start": "1927760",
    "end": "1934220"
  },
  {
    "text": "legitimate app in the beginning had that and a back Channel response very much",
    "start": "1934220",
    "end": "1940220"
  },
  {
    "text": "the same access token refresh token expires in",
    "start": "1940220",
    "end": "1946159"
  },
  {
    "text": "we have a user Central Access token it looks very much the same as the previous",
    "start": "1946159",
    "end": "1951860"
  },
  {
    "text": "token with a just a few additions the sub subject ID",
    "start": "1951860",
    "end": "1958120"
  },
  {
    "text": "and here the specs are a bit confusing they're say a bit different things but in that vanity connects back it's very",
    "start": "1959299",
    "end": "1965779"
  },
  {
    "text": "clear it says sub unique I uh and persistent identifier of",
    "start": "1965779",
    "end": "1972740"
  },
  {
    "text": "the human in the human participant in the flows it is a human participant the sub subject",
    "start": "1972740",
    "end": "1979700"
  },
  {
    "text": "ID is the actual user it's never a client or anything and that's how we can",
    "start": "1979700",
    "end": "1986179"
  },
  {
    "text": "differentiate between a an access token that is for machine to machine flow it has no",
    "start": "1986179",
    "end": "1993019"
  },
  {
    "text": "sub claim while a user-centric access token has the subclaim note that it still has the",
    "start": "1993019",
    "end": "2000340"
  },
  {
    "text": "client ID claim so this access token here actually authenticates both the",
    "start": "2000340",
    "end": "2006100"
  },
  {
    "text": "user and the client so when we an API receives this it can know that it is",
    "start": "2006100",
    "end": "2011500"
  },
  {
    "text": "Anders using the the cool Google Calendar widget",
    "start": "2011500",
    "end": "2017159"
  },
  {
    "text": "and it has the scope that indicates what API access does this actual token give",
    "start": "2017200",
    "end": "2024519"
  },
  {
    "text": "and that allows us to handle the case where I of course have full access to my",
    "start": "2024519",
    "end": "2030399"
  },
  {
    "text": "Google account but when using the calendar widget the calendar widget only gets an access token that can read the",
    "start": "2030399",
    "end": "2037539"
  },
  {
    "text": "calendar nothing more we have AMR or authentication",
    "start": "2037539",
    "end": "2044340"
  },
  {
    "text": "mechanism reference or no sorry authentication method reference password",
    "start": "2044340",
    "end": "2051960"
  },
  {
    "text": "but still access tokens are typical short-lived or should typically be",
    "start": "2052960",
    "end": "2058540"
  },
  {
    "text": "short-lived I've seen projects where they run into problems that okay the",
    "start": "2058540",
    "end": "2065679"
  },
  {
    "text": "access token expired during the workday let's make the access token 12 hours long",
    "start": "2065679",
    "end": "2071858"
  },
  {
    "text": "and that is really the wrong approach to it the access token should expire after at maximum one hour",
    "start": "2071859",
    "end": "2079118"
  },
  {
    "text": "which means a client application has to have a mechanism to refresh and get a",
    "start": "2079119",
    "end": "2086080"
  },
  {
    "text": "new access token and as we said we should not interrupt the user we need to be able to do that",
    "start": "2086080",
    "end": "2091599"
  },
  {
    "text": "on a back channel in the background refresh token or a way for that",
    "start": "2091599",
    "end": "2097780"
  },
  {
    "text": "the refresh token is simple we just make another request to the authorization",
    "start": "2097780",
    "end": "2102940"
  },
  {
    "text": "server the token endpoint sending in the refresh token that we got on the original request",
    "start": "2102940",
    "end": "2109180"
  },
  {
    "text": "and we are getting back a new access token and a new refresh token",
    "start": "2109180",
    "end": "2114460"
  },
  {
    "text": "the reason we are getting back a new refresh token is that the refresh token should in most cases be single use",
    "start": "2114460",
    "end": "2122140"
  },
  {
    "text": "because if I somehow steal your refresh token and I managed to use it before you use it",
    "start": "2122140",
    "end": "2128140"
  },
  {
    "text": "then when you your legitimate client comes along five minutes later to try to",
    "start": "2128140",
    "end": "2133420"
  },
  {
    "text": "use it we can detect that we can detect that this refresh token was already used",
    "start": "2133420",
    "end": "2138880"
  },
  {
    "text": "and then we can invalidate also the new refresh token that I got so we can",
    "start": "2138880",
    "end": "2144160"
  },
  {
    "text": "detect that fraud and and block it from further usage",
    "start": "2144160",
    "end": "2149480"
  },
  {
    "text": "[Music] so we said that the tokens should be short-lived in case they were leaked",
    "start": "2149480",
    "end": "2155500"
  },
  {
    "text": "right but the refresh token needs to be long-lived because it should be usable",
    "start": "2155500",
    "end": "2161500"
  },
  {
    "text": "when the access token has expired so there are actually two ways we can",
    "start": "2161500",
    "end": "2166540"
  },
  {
    "text": "handle tokens either they should be short-lived if they can not be re if",
    "start": "2166540",
    "end": "2171640"
  },
  {
    "text": "they are valid as soon as we've passed them out or they should be revocable we",
    "start": "2171640",
    "end": "2176740"
  },
  {
    "text": "should be able to uh we can have a list where the user can actually see what",
    "start": "2176740",
    "end": "2183520"
  },
  {
    "text": "refresh tokens do you have and then remove a refresh token if you would don't want that client to be able to",
    "start": "2183520",
    "end": "2190540"
  },
  {
    "text": "acquire tokens in our name anymore you actually all have seen this if you",
    "start": "2190540",
    "end": "2196000"
  },
  {
    "text": "go into your Google GitHub Facebook Twitter account anything and you look for authorized applications",
    "start": "2196000",
    "end": "2203820"
  },
  {
    "text": "then you will have a list of applications those are actually a list",
    "start": "2204339",
    "end": "2209440"
  },
  {
    "text": "of refresh tokens and if you remove one of them that application will not be able to get a new access token after",
    "start": "2209440",
    "end": "2216880"
  },
  {
    "text": "that time and we can revoke [Music]",
    "start": "2216880",
    "end": "2223540"
  },
  {
    "text": "we can of course also revoke tokens programmatically for example at",
    "start": "2223540",
    "end": "2230020"
  },
  {
    "text": "uninstalled old time or log out time for an interactive application we might want",
    "start": "2230020",
    "end": "2235060"
  },
  {
    "text": "to revoke the token um",
    "start": "2235060",
    "end": "2241740"
  },
  {
    "text": "so looking at application architecture we have some",
    "start": "2244359",
    "end": "2249520"
  },
  {
    "text": "oh let's see let's make it take a break you take your demo here instead",
    "start": "2249520",
    "end": "2254800"
  },
  {
    "text": "um and we have a",
    "start": "2254800",
    "end": "2260520"
  },
  {
    "text": "I'll bring up the right thing just a second here here we go no not the double console",
    "start": "2260560",
    "end": "2267579"
  },
  {
    "text": "why did I put here I have it and we'll actually go and run another",
    "start": "2267579",
    "end": "2274300"
  },
  {
    "text": "solution",
    "start": "2274300",
    "end": "2276839"
  },
  {
    "text": "so let's run an interactive client uh debug",
    "start": "2280780",
    "end": "2287140"
  },
  {
    "text": "start new instance and I have of course an identity server running in the background to be able to do this",
    "start": "2287140",
    "end": "2294240"
  },
  {
    "text": "so here we go we'll bring up the browser Dev tools to be able to see a bit what's happening",
    "start": "2306220",
    "end": "2311740"
  },
  {
    "text": "and I'll click the secure page here",
    "start": "2311740",
    "end": "2316800"
  },
  {
    "text": "and we can now see that we got the request to the authorized endpoint",
    "start": "2319240",
    "end": "2325500"
  },
  {
    "text": "and if I remove that it's usually possible to see something at least on the monitor",
    "start": "2329079",
    "end": "2335980"
  },
  {
    "text": "payload we can see that we are crossing around about",
    "start": "2335980",
    "end": "2341220"
  },
  {
    "text": "we are passing the client ID the redirect ID URI where do we want to give",
    "start": "2341220",
    "end": "2346540"
  },
  {
    "text": "back this is actually full open idea connect line so there's more Scopes in here",
    "start": "2346540",
    "end": "2352839"
  },
  {
    "text": "the code challenge and the state we're logging in",
    "start": "2352839",
    "end": "2360060"
  },
  {
    "text": "let's login as Alice Alice",
    "start": "2360060",
    "end": "2365160"
  },
  {
    "text": "and let's close the dev tools for now",
    "start": "2365440",
    "end": "2371500"
  },
  {
    "text": "so here I have the consent screen what's the authorization server who am I",
    "start": "2371500",
    "end": "2376660"
  },
  {
    "text": "logged in is as what do I what do I want the application to do offline access is",
    "start": "2376660",
    "end": "2382359"
  },
  {
    "text": "one important thing to point out this actually means refresh token because initially the refresh tokens were used",
    "start": "2382359",
    "end": "2390040"
  },
  {
    "text": "for offline access when an application should be able to continue working on your behalf after you left it",
    "start": "2390040",
    "end": "2398280"
  },
  {
    "text": "so that's why the scope to get a refresh token is called offline access",
    "start": "2398280",
    "end": "2405180"
  },
  {
    "text": "so yes do allow it's back the dev tools",
    "start": "2407740",
    "end": "2413260"
  },
  {
    "text": "so I get to",
    "start": "2413260",
    "end": "2416220"
  },
  {
    "text": "and that was not quick enough let's just do this",
    "start": "2419260",
    "end": "2425380"
  },
  {
    "text": "um yeah",
    "start": "2425380",
    "end": "2427740"
  },
  {
    "text": "let's redo the login I'll make what I call a developer logout first",
    "start": "2431859",
    "end": "2438960"
  },
  {
    "text": "develop only get means deleting the cookie so if I do",
    "start": "2439480",
    "end": "2445119"
  },
  {
    "text": "here now I am logged out secure and I should open it",
    "start": "2445119",
    "end": "2451500"
  },
  {
    "text": "more Network I wanted to remember the",
    "start": "2454000",
    "end": "2459940"
  },
  {
    "text": "because here I wanted to show you we have the Callback where we are getting the",
    "start": "2459940",
    "end": "2465400"
  },
  {
    "text": "we are redirected back to our application and we do have in the Callback we do",
    "start": "2465400",
    "end": "2473880"
  },
  {
    "text": "have the um no here inside this is the Callback",
    "start": "2473920",
    "end": "2479619"
  },
  {
    "text": "uh we have the code so this is the code representing the sign-in attempt and",
    "start": "2479619",
    "end": "2484839"
  },
  {
    "text": "then the actual sign-in hap and retrieving bowl of cookie of the um",
    "start": "2484839",
    "end": "2491140"
  },
  {
    "text": "uh tokens happen on the back Channel so let's get back to presentation",
    "start": "2491140",
    "end": "2498240"
  },
  {
    "text": "when we are looking at some um [Music]",
    "start": "2499359",
    "end": "2506020"
  },
  {
    "text": "application architectures we looked at the machine machine which is fairly simple and then we have the browser based",
    "start": "2506020",
    "end": "2512700"
  },
  {
    "text": "applications which can be split into server-side application the single page applications or webassembly",
    "start": "2512700",
    "end": "2519839"
  },
  {
    "text": "applications and then we have the not browser-based applications if you look at a traditional server to",
    "start": "2519839",
    "end": "2526240"
  },
  {
    "text": "server application it has an open ID connector a wealth client Library",
    "start": "2526240",
    "end": "2531400"
  },
  {
    "text": "session management What mechanisms do we use to establish a session",
    "start": "2531400",
    "end": "2536500"
  },
  {
    "text": "okay how do we prefer sessions I have a handout to anyone who know it can help me what is are we using",
    "start": "2536500",
    "end": "2543220"
  },
  {
    "text": "cookies who want cookies someone said it over there you get cookies",
    "start": "2543220",
    "end": "2550540"
  },
  {
    "text": "and token management can happen on the server side UI assets all of that we",
    "start": "2550540",
    "end": "2557200"
  },
  {
    "text": "have browser-based applications and this is what's part of the open ID connector now both too standard to do all of this",
    "start": "2557200",
    "end": "2564400"
  },
  {
    "text": "protocol workflow in the browser Brock Allen created the oydc client JavaScript",
    "start": "2564400",
    "end": "2570339"
  },
  {
    "text": "library that did was a full open ID connect client in the browser it turned",
    "start": "2570339",
    "end": "2575560"
  },
  {
    "text": "out that that was a bad idea I'll spend an hour tomorrow talking about why it was a bad idea and what we",
    "start": "2575560",
    "end": "2582099"
  },
  {
    "text": "should do instead but uh simply put making a browser secure",
    "start": "2582099",
    "end": "2590020"
  },
  {
    "text": "trusted environment to keep tokens is not really feasible so it's better to have them on the server side and that's",
    "start": "2590020",
    "end": "2596560"
  },
  {
    "text": "why we entered the back end for front-end pattern so at this stage we would have to store",
    "start": "2596560",
    "end": "2603339"
  },
  {
    "text": "the tokens in local storage Etc that any script kid with access to the browser Dev tools can read them",
    "start": "2603339",
    "end": "2610780"
  },
  {
    "text": "or malicious plugins at this place we store the",
    "start": "2610780",
    "end": "2616680"
  },
  {
    "text": "session we create the session server side and once more what did we do to",
    "start": "2616680",
    "end": "2622060"
  },
  {
    "text": "create the session server side cookies who was first yeah and actually",
    "start": "2622060",
    "end": "2629440"
  },
  {
    "text": "now that we move them server side and we're modern these cookies are same size straight HTTP only and secure so they",
    "start": "2629440",
    "end": "2636640"
  },
  {
    "text": "should really be trustworthy",
    "start": "2636640",
    "end": "2640200"
  },
  {
    "text": "non-browser-based applications on the other hand [Music]",
    "start": "2642839",
    "end": "2647920"
  },
  {
    "text": "they have some better ways to handle it on mobile phone we have the key ring storage Etc that we can utilize from the",
    "start": "2647920",
    "end": "2655180"
  },
  {
    "text": "operating system and so far we have talked about API",
    "start": "2655180",
    "end": "2662560"
  },
  {
    "text": "access and erwort so let me spend the last few minutes here with adding user and session",
    "start": "2662560",
    "end": "2670480"
  },
  {
    "text": "Authentication so we turned out that people were using sign in with Facebook",
    "start": "2670480",
    "end": "2676900"
  },
  {
    "text": "long ago what they did was they asked for a scope saying I want to read the",
    "start": "2676900",
    "end": "2682240"
  },
  {
    "text": "current user's profile so they got an access Tokyo they couldn't understand made an API call",
    "start": "2682240",
    "end": "2688780"
  },
  {
    "text": "and say give me the name of the current user and then figure it out then that must been have must have been the person",
    "start": "2688780",
    "end": "2695200"
  },
  {
    "text": "that signed on let's log that person in that's abusing I was too",
    "start": "2695200",
    "end": "2703140"
  },
  {
    "text": "because if we have single sign-on we also want single logout we want this",
    "start": "2705460",
    "end": "2710800"
  },
  {
    "text": "notion of a Shad distributed session that we can terminate",
    "start": "2710800",
    "end": "2716819"
  },
  {
    "text": "and or and handle it and that is where open ID connect is added on top of",
    "start": "2716819",
    "end": "2723819"
  },
  {
    "text": "oauth 2. uh it works really much the same for the",
    "start": "2723819",
    "end": "2731980"
  },
  {
    "text": "authorization code flow we just add another scope which is open ID which indicates that we",
    "start": "2731980",
    "end": "2740140"
  },
  {
    "text": "do not only want an access token back we also want an ID token back and if I said",
    "start": "2740140",
    "end": "2746380"
  },
  {
    "text": "that the access token should never be consumed by the client",
    "start": "2746380",
    "end": "2752980"
  },
  {
    "text": "application the ID token on the other hand is meant to be consumed by the client application",
    "start": "2752980",
    "end": "2758380"
  },
  {
    "text": "and it is meant to be kept secret between the client application and the authorization server",
    "start": "2758380",
    "end": "2764859"
  },
  {
    "text": "never ever send an ID token long with an API request that's equally bad is",
    "start": "2764859",
    "end": "2771400"
  },
  {
    "text": "inspecting the access token if we look at the ID token we can see some things here",
    "start": "2771400",
    "end": "2778420"
  },
  {
    "text": "the first part up here it looks very much the same uh but here we have something new an",
    "start": "2778420",
    "end": "2786400"
  },
  {
    "text": "audience client which indicates that this particular",
    "start": "2786400",
    "end": "2791859"
  },
  {
    "text": "uh ID token is meant to be consumed by the client",
    "start": "2791859",
    "end": "2798119"
  },
  {
    "text": "and then we have information about the claims with information about",
    "start": "2798160",
    "end": "2803380"
  },
  {
    "text": "the user here the flow",
    "start": "2803380",
    "end": "2809400"
  },
  {
    "text": "it's the same as the authorization code flow first retrieve the code and then on",
    "start": "2809880",
    "end": "2815619"
  },
  {
    "text": "the back Channel and return the ID token and retrieve the access token after while Redeeming the authorization code",
    "start": "2815619",
    "end": "2822520"
  },
  {
    "text": "the normal way doing the default pixie any client secret Etc all of that",
    "start": "2822520",
    "end": "2828460"
  },
  {
    "text": "then on the client we validate the token and once we validate the token you take",
    "start": "2828460",
    "end": "2834700"
  },
  {
    "text": "one of your cookies and establish a session on the client application",
    "start": "2834700",
    "end": "2840838"
  },
  {
    "text": "so that's the good part of Earth 2 and some brief",
    "start": "2843220",
    "end": "2849819"
  },
  {
    "text": "openly connect on top of that as well we have some time left so I'll just",
    "start": "2849819",
    "end": "2856420"
  },
  {
    "text": "bring up some further reading uh I will actually I can actually show",
    "start": "2856420",
    "end": "2862119"
  },
  {
    "text": "you one more thing about uh uh worth two and using that for",
    "start": "2862119",
    "end": "2868540"
  },
  {
    "text": "interactive browser-based applications there is a draw for best current practices for browser-based applications",
    "start": "2868540",
    "end": "2876099"
  },
  {
    "text": "using auth2 in that draft RFC it looks like this",
    "start": "2876099",
    "end": "2883359"
  },
  {
    "text": "Earl auth adds additional attack vectors that could be avoided with a different solution",
    "start": "2883359",
    "end": "2889000"
  },
  {
    "text": "I find it hilariously funny that we do have a specification on how to use oauth",
    "start": "2889000",
    "end": "2894099"
  },
  {
    "text": "2 which opens with don't use something else but it's true",
    "start": "2894099",
    "end": "2899859"
  },
  {
    "text": "don't use oauth 2 from the browser and then this back goes on with introduced",
    "start": "2899859",
    "end": "2905500"
  },
  {
    "text": "in the backend for front-end pad and then how we could move the responsibility of handling the oauth 2",
    "start": "2905500",
    "end": "2911920"
  },
  {
    "text": "interaction to the server side layer instead of doing it in the in JavaScript",
    "start": "2911920",
    "end": "2917560"
  },
  {
    "text": "in the browser and uh",
    "start": "2917560",
    "end": "2924960"
  },
  {
    "text": "we have some let's see if I'm on the right page yeah I'll leave this further reading",
    "start": "2926079",
    "end": "2934119"
  },
  {
    "text": "up here after afterwards but the summary is oauth",
    "start": "2934119",
    "end": "2939400"
  },
  {
    "text": "is a token risk question response framework and it's allowed designed to allow third-party access it's designed",
    "start": "2939400",
    "end": "2945940"
  },
  {
    "text": "for the Modern Age on internet where I want to give a third party application access",
    "start": "2945940",
    "end": "2952599"
  },
  {
    "text": "to part of my Google account but not full access to my account the authorization server is what keeps",
    "start": "2952599",
    "end": "2960640"
  },
  {
    "text": "track of everything it knows the resources knows the protocols or to authenticate clients and users and",
    "start": "2960640",
    "end": "2965920"
  },
  {
    "text": "issues tokens and then we have the client that retrieves tokens and the API or resource",
    "start": "2965920",
    "end": "2972220"
  },
  {
    "text": "that consumes it and on top of that openfeconnect is a",
    "start": "2972220",
    "end": "2977380"
  },
  {
    "text": "user Authentication Protocol so whenever you hear someone saying we'll do singles and on using award",
    "start": "2977380",
    "end": "2983619"
  },
  {
    "text": "you should run or ask them if they really meant to open a reconnect",
    "start": "2983619",
    "end": "2989680"
  },
  {
    "text": "yes the question",
    "start": "2989680",
    "end": "2992520"
  },
  {
    "text": "yes I said you should never send the ID token and because when I am I have an organized",
    "start": "2994839",
    "end": "3001680"
  },
  {
    "text": "server and I have a Firebase instance that I have connected to the same server and in the",
    "start": "3001680",
    "end": "3008339"
  },
  {
    "text": "instructions they say I should",
    "start": "3008339",
    "end": "3012440"
  },
  {
    "text": "so you have an open Eddie connect server and your Firebase server and the instructions said that you should send the ID token",
    "start": "3014579",
    "end": "3021560"
  },
  {
    "text": "in my opinion they are wrong the eye detail gets to stay with the client there is just one uh there's one",
    "start": "3021560",
    "end": "3030720"
  },
  {
    "text": "single occurrence where it is legal to send the ID token away and that is on",
    "start": "3030720",
    "end": "3037619"
  },
  {
    "text": "some occasions you might want to send the ID token back to the authorization server for example on login logout you",
    "start": "3037619",
    "end": "3045599"
  },
  {
    "text": "can pass the ID token used to establish the session as an ID token hint back to",
    "start": "3045599",
    "end": "3052319"
  },
  {
    "text": "the of the rotation server by then the ID token is probably expired but the ID",
    "start": "3052319",
    "end": "3058859"
  },
  {
    "text": "token contains all the information about the session and what the client is ETC",
    "start": "3058859",
    "end": "3063960"
  },
  {
    "text": "so it can be used by the authorization server to validate the logout request",
    "start": "3063960",
    "end": "3070099"
  },
  {
    "text": "there are also some places where you can send an old id token back in the",
    "start": "3070099",
    "end": "3076980"
  },
  {
    "text": "authorized request and say hey uh what you know authorized request is why we",
    "start": "3076980",
    "end": "3082260"
  },
  {
    "text": "ask the authorization server to sign the sign on the user to login the user",
    "start": "3082260",
    "end": "3087960"
  },
  {
    "text": "in that case we can send an ID token hint and say that I'm fairly sure that this is the user we",
    "start": "3087960",
    "end": "3093900"
  },
  {
    "text": "want to sign in can you please sign in the same user as we did the last time when I got that ID token can you just",
    "start": "3093900",
    "end": "3100020"
  },
  {
    "text": "sign the user in again so I get a new ID token for that user uh but the ID token should not be sent",
    "start": "3100020",
    "end": "3106559"
  },
  {
    "text": "along to other but I know it happened I've seen interactions like that myself",
    "start": "3106559",
    "end": "3113099"
  },
  {
    "text": "I know that people are doing that and there is also sometimes confusion about",
    "start": "3113099",
    "end": "3118559"
  },
  {
    "text": "uh tokens I've seen people talk about the user token and user token might mean they an ID",
    "start": "3118559",
    "end": "3127260"
  },
  {
    "text": "token but it might also mean an access token that has a subject claim because",
    "start": "3127260",
    "end": "3132839"
  },
  {
    "text": "it is representing a user as opposed to a machine to machine access token that",
    "start": "3132839",
    "end": "3137940"
  },
  {
    "text": "is no user but catch me afterwards and I can help you have a look at what the instruction",
    "start": "3137940",
    "end": "3143760"
  },
  {
    "text": "says so do we have any more questions",
    "start": "3143760",
    "end": "3148980"
  },
  {
    "text": "I'm unfortunately after cookies",
    "start": "3148980",
    "end": "3152359"
  },
  {
    "text": "it's hard to see back I have to shout if there's it's here",
    "start": "3155579",
    "end": "3162920"
  },
  {
    "text": "sorry I was looking at that yes",
    "start": "3162920",
    "end": "3167119"
  },
  {
    "text": "strategies to renew that how can yep",
    "start": "3172800",
    "end": "3177200"
  },
  {
    "text": "silently new versus refresh token So Silent renew is part of the open Audi",
    "start": "3178339",
    "end": "3184980"
  },
  {
    "text": "connect session management specification which is for JavaScript single page",
    "start": "3184980",
    "end": "3190740"
  },
  {
    "text": "applications which relies on a hidden iframe uh where",
    "start": "3190740",
    "end": "3195960"
  },
  {
    "text": "the uh the client renders a hidden iframe that contains a check session end point",
    "start": "3195960",
    "end": "3202920"
  },
  {
    "text": "on the authorization server that is the third party request in an iframe",
    "start": "3202920",
    "end": "3210599"
  },
  {
    "text": "if you have Safari they are for privacy racing and blocking",
    "start": "3210599",
    "end": "3216300"
  },
  {
    "text": "all cookies on third-party requests uh Chrome is about to start doing it",
    "start": "3216300",
    "end": "3221400"
  },
  {
    "text": "actually if you're running incognito mode in Chrome by default now there is a setting block third-party cook is",
    "start": "3221400",
    "end": "3227099"
  },
  {
    "text": "enabled and if you have that enabled the the cookies for the check session",
    "start": "3227099",
    "end": "3232859"
  },
  {
    "text": "doesn't work actually you can try it if you anyone who has a teams account",
    "start": "3232859",
    "end": "3238260"
  },
  {
    "text": "open Google Chrome try to sign into teams with in incognito",
    "start": "3238260",
    "end": "3244380"
  },
  {
    "text": "mode with that third party cookie blocking enabled we can try",
    "start": "3244380",
    "end": "3249500"
  },
  {
    "text": "let's get a browser in an incognito window teams dot microsoft.com",
    "start": "3249540",
    "end": "3257640"
  },
  {
    "text": "and sorry I need to just check that I have the switch on no I didn't because",
    "start": "3257640",
    "end": "3262859"
  },
  {
    "text": "I'm doing this I'm using this with various applications where I needed to",
    "start": "3262859",
    "end": "3268260"
  },
  {
    "text": "work where is my mouse pointer here it is",
    "start": "3268260",
    "end": "3274380"
  },
  {
    "text": "so here we go I'll flip that block third body cookies team start my cruise",
    "start": "3274380",
    "end": "3280380"
  },
  {
    "text": "oft.com and log in",
    "start": "3280380",
    "end": "3287420"
  },
  {
    "text": "I'll use a valid account",
    "start": "3287420",
    "end": "3291619"
  },
  {
    "text": "and of course you wouldn't expect me to run this without",
    "start": "3298200",
    "end": "3303480"
  },
  {
    "text": "two-factor do you and whatever keep me signed in it",
    "start": "3303480",
    "end": "3310920"
  },
  {
    "text": "doesn't matter so welcome to the team's sign-in experience in the modern world",
    "start": "3310920",
    "end": "3316020"
  },
  {
    "text": "where we do have third-party cookie blocking",
    "start": "3316020",
    "end": "3320660"
  },
  {
    "text": "it showed something you didn't didn't it says something again",
    "start": "3324540",
    "end": "3331619"
  },
  {
    "text": "we found a problem please try okay try to get it it tries again so what's happening here is that the",
    "start": "3331619",
    "end": "3338460"
  },
  {
    "text": "team's application uses the check session mechanism with the hidden iframe so it's it is signed in",
    "start": "3338460",
    "end": "3345900"
  },
  {
    "text": "and immediately when it is signed in it opens that check session iframe to see are we still signing into to take the",
    "start": "3345900",
    "end": "3351359"
  },
  {
    "text": "log out but since third-party cookies are not blocked that iframe signals you are signed out",
    "start": "3351359",
    "end": "3359940"
  },
  {
    "text": "and it goes back to change the settings in your browser please",
    "start": "3359940",
    "end": "3365579"
  },
  {
    "text": "my suggestion is go to my talk tomorrow at the same time in room four I think it",
    "start": "3365579",
    "end": "3371760"
  },
  {
    "text": "is tomorrow and learn about the back end for front-end pattern which is the right way to solve it and we'll talk more",
    "start": "3371760",
    "end": "3378000"
  },
  {
    "text": "about cookies tomorrow yes more questions right okay",
    "start": "3378000",
    "end": "3385319"
  },
  {
    "text": "do you have another question yeah we can take that one you are still using your ADC client",
    "start": "3385319",
    "end": "3393799"
  },
  {
    "text": "uh the others DC client JS is archived the project I mean it's an excellent",
    "start": "3394940",
    "end": "3402180"
  },
  {
    "text": "project by Brock but he got sick of maintaining it and keeping up with all",
    "start": "3402180",
    "end": "3407940"
  },
  {
    "text": "the quirks all the different browser vendors that did new Stuff",
    "start": "3407940",
    "end": "3412980"
  },
  {
    "text": "Etc so you should join the talk tomorrow I might have more cookies",
    "start": "3412980",
    "end": "3418380"
  },
  {
    "text": "and well I look forward to see you tomorrow thank you [Applause]",
    "start": "3418380",
    "end": "3427239"
  }
]