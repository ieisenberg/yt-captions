[
  {
    "text": "I hope you all had a great morning and that you're ready to get started to",
    "start": "4590",
    "end": "10350"
  },
  {
    "text": "learning a little bit about the future of c-sharp and what's coming in the next versions of c-sharp so over the past two",
    "start": "10350",
    "end": "18720"
  },
  {
    "text": "decades c-sharp has evolved into a really interesting programming language we've seen the c-sharp team and the",
    "start": "18720",
    "end": "25200"
  },
  {
    "text": "f-sharp and the VB teams taking in inspiration from other programming languages like we've seen them take",
    "start": "25200",
    "end": "32279"
  },
  {
    "text": "inspiration from Kotlin and swift and java and c++ and a whole lot of other different languages and a few of these",
    "start": "32279",
    "end": "38519"
  },
  {
    "text": "features are making it into c-sharp and has over the years like generics for instance came out of the research team",
    "start": "38519",
    "end": "45179"
  },
  {
    "text": "at Microsoft and we had pattern matching that comes from other interesting programming languages as well and a lot",
    "start": "45179",
    "end": "50850"
  },
  {
    "text": "of these features are what we're gonna cover in this session we'll talk about c-sharp aid and what's coming beyond",
    "start": "50850",
    "end": "56579"
  },
  {
    "text": "that and a little bit around when we can expect to get this into Visual Studio so is everyone in here a c-sharp developer",
    "start": "56579",
    "end": "63710"
  },
  {
    "text": "excellent excellent so then I don't have to teach you the basic of c-sharp that's",
    "start": "63710",
    "end": "71310"
  },
  {
    "text": "good so before we get into what's new in c-sharp I just want to introduce myself I'm Phillip Ekberg I'm in Microsoft MVP",
    "start": "71310",
    "end": "77460"
  },
  {
    "text": "it doesn't mean that I'm employed by Microsoft it just means that I can I go around to conferences and talk about the",
    "start": "77460",
    "end": "83520"
  },
  {
    "text": "new scene c-sharp and talk about using Visual Studio and things around the language and things I like about",
    "start": "83520",
    "end": "88759"
  },
  {
    "text": "Microsoft so I'm kind of working for free as a marketing person joking aside you can follow me on Twitter just ping",
    "start": "88759",
    "end": "95549"
  },
  {
    "text": "me if you have any questions during after probably couldn't do it before the talk but you can ping me on Twitter if you have any questions and I've got a",
    "start": "95549",
    "end": "101640"
  },
  {
    "text": "free book on c-sharp as well that you can grab if you just check out my Twitter and if you ever come to Sweden",
    "start": "101640",
    "end": "107490"
  },
  {
    "text": "I'll take it for our dive as well because I love diving alright so in c-sharp we have all these",
    "start": "107490",
    "end": "113310"
  },
  {
    "text": "amazing features over the years we've had in productions of things like you know generics we have a sick cannot wait",
    "start": "113310",
    "end": "119429"
  },
  {
    "text": "things that make the language a lot easier for us to work with it also makes",
    "start": "119429",
    "end": "125130"
  },
  {
    "text": "it easier for us to write code that breaks so we need to be very cautious about the features that we introduce in",
    "start": "125130",
    "end": "131100"
  },
  {
    "text": "our programming language and especially how we use them you know in the early days of c-sharp c-sharp came out almost",
    "start": "131100",
    "end": "137819"
  },
  {
    "text": "two decades I think it's 18 years old now a lot happens in 18 years the first version of",
    "start": "137819",
    "end": "142950"
  },
  {
    "text": "c-sharp had what you needed and the reason they released his sharp is to compete with Java so we got only the",
    "start": "142950",
    "end": "149310"
  },
  {
    "text": "normal things it runs in a run time you got the finals and then switch and stuff but then you want more things in the",
    "start": "149310",
    "end": "154709"
  },
  {
    "text": "language to make it easier for you to write better applications so they produce things like generics which is kind of a groundbreaking feature in the",
    "start": "154709",
    "end": "161040"
  },
  {
    "text": "language changes the way that we write applications right the same goes for async Anna wait it changed this the way",
    "start": "161040",
    "end": "167849"
  },
  {
    "text": "that we work with resources no matter if it's web resources or a database call or reading files from the disk",
    "start": "167849",
    "end": "175170"
  },
  {
    "text": "if this was a feature released in c-sharp 5 we still see improvements in the coming versions of c-sharp and i'll",
    "start": "175170",
    "end": "182459"
  },
  {
    "text": "show you a few of the features that they're adding in c-sharp probably 10 but we'll get into those features later on but what they're making changes in",
    "start": "182459",
    "end": "189299"
  },
  {
    "text": "async/await means that we need to just learn a little bit more about how this affects our applications and how to you",
    "start": "189299",
    "end": "195540"
  },
  {
    "text": "know get accustomed to these features to write better applications we all have favorite features in the language and",
    "start": "195540",
    "end": "201630"
  },
  {
    "text": "stories around things that change the way that we write the applications I have an interesting thing happening to",
    "start": "201630",
    "end": "208049"
  },
  {
    "text": "me when c-sharp 3 came out they introduced the implicitly typed local variable also known as the VAR keyword I",
    "start": "208049",
    "end": "214829"
  },
  {
    "text": "remember having a conversation with a co-worker he tried to convince me that when you use the VAR keyword you're not",
    "start": "214829",
    "end": "221010"
  },
  {
    "text": "running dynamic code so I had to decompile the application just to prove him wrong or just to educate ourselves",
    "start": "221010",
    "end": "227130"
  },
  {
    "text": "because I wasn't really understanding all of these features either so one of the really good ways to learn these new",
    "start": "227130",
    "end": "233130"
  },
  {
    "text": "features is to introduce them in the language D compile the application then look at the il and see how it effects",
    "start": "233130",
    "end": "238980"
  },
  {
    "text": "your application that's how I've learned a lot around how c-sharp works internally and of course dynamic came",
    "start": "238980",
    "end": "245400"
  },
  {
    "text": "later on in c-sharp 4 and then he later on in c-sharp 6 and so forth we got even more things at a two language but I",
    "start": "245400",
    "end": "252420"
  },
  {
    "text": "won't bother you going into all the features released in c-sharp one through seven point three an interesting fact",
    "start": "252420",
    "end": "258870"
  },
  {
    "text": "though is that with seven and seven point one two and three they did something that they haven't done before",
    "start": "258870",
    "end": "264120"
  },
  {
    "text": "so in the first fifteen or sixteen years of the c-sharp language they never done a point release of the language",
    "start": "264120",
    "end": "271580"
  },
  {
    "text": "so think about that for a second how come that they can now do point releases which means that they can just with a small update of visual studio that can",
    "start": "271580",
    "end": "278419"
  },
  {
    "text": "increase the or incrementally change the compiler this is due to the fact that of this project the Rosslyn project",
    "start": "278419",
    "end": "284840"
  },
  {
    "text": "rustling is an effort inside Microsoft to rewrite the c-sharp and VB compilers it's also known as the darknet compiler",
    "start": "284840",
    "end": "291080"
  },
  {
    "text": "platform this has been around for a while as well so I imagine a few of you already know about this but what you",
    "start": "291080",
    "end": "296659"
  },
  {
    "text": "might not know is that they were working on this as an open source project and they have for a few years as well this",
    "start": "296659",
    "end": "301879"
  },
  {
    "text": "doesn't mean that they work with this as an open source project like Apple does they're open source Apple does internal",
    "start": "301879",
    "end": "307940"
  },
  {
    "text": "development and then release the source somewhere and you could just download that Microsoft work as a true open",
    "start": "307940",
    "end": "313490"
  },
  {
    "text": "source project with the rustling project which means that they take contributions from the community they have discussions",
    "start": "313490",
    "end": "319400"
  },
  {
    "text": "on github about language Steve about language features so this here is a page for language features status it's things",
    "start": "319400",
    "end": "326960"
  },
  {
    "text": "that they want to introduce in the language for instance we have something called default interface methods at the",
    "start": "326960",
    "end": "332210"
  },
  {
    "text": "bottom here now we're getting to that a little bit later on but we have a ton of more features here that they talk about I want to add into the language so what",
    "start": "332210",
    "end": "340069"
  },
  {
    "text": "happens is that they might not have people internally that have capacity to build these things or they might not just have the time right now so the",
    "start": "340069",
    "end": "346279"
  },
  {
    "text": "community can help out to build these features as well and that's a great addition as well so this means that we",
    "start": "346279",
    "end": "351349"
  },
  {
    "text": "can help evolve c-sharp as a programming language and you'll notice here that it's my avatar up here so I've made this",
    "start": "351349",
    "end": "357770"
  },
  {
    "text": "huge contribution to the darknet compiler platform my in fact went in here and picked a spelling mistake so",
    "start": "357770",
    "end": "364669"
  },
  {
    "text": "that's my great contribution to this project all joking aside though ever anyone can go in here and help out not",
    "start": "364669",
    "end": "371000"
  },
  {
    "text": "only with spelling mistakes but help out with things like introducing features into the language a few of the features",
    "start": "371000",
    "end": "376669"
  },
  {
    "text": "that I'm going to show you here today is things that have been introduced by the community or the community have been very involved in making sure that this",
    "start": "376669",
    "end": "383750"
  },
  {
    "text": "adapts to what a c-sharp developer expects we also have another page which",
    "start": "383750",
    "end": "390800"
  },
  {
    "text": "is another repository called the c-sharp language repository this is kind of the",
    "start": "390800",
    "end": "395839"
  },
  {
    "text": "specification of things they want to get into the language so Rhossili is the compiler part of things this is the",
    "start": "395839",
    "end": "401120"
  },
  {
    "text": "language I guess the specification of what's going into the language some time so they have all of these champions",
    "start": "401120",
    "end": "406820"
  },
  {
    "text": "or epics or whatever you want to call them they have things here like how do",
    "start": "406820",
    "end": "412490"
  },
  {
    "text": "we make nullable work better in the language so they have a champion for null reference types which I'll also",
    "start": "412490",
    "end": "419690"
  },
  {
    "text": "show you later on and they have all of these different things that they want to add to the language and people can go on",
    "start": "419690",
    "end": "424850"
  },
  {
    "text": "and discuss these different features and they can even say that I want to improve",
    "start": "424850",
    "end": "429950"
  },
  {
    "text": "this I want to build this and I wanna help out contribute to this so if you have a really sharp eyes or maybe",
    "start": "429950",
    "end": "434960"
  },
  {
    "text": "binoculars on because I made the fonts that's really small here but at the top here it says that this is c-sharp a",
    "start": "434960",
    "end": "440060"
  },
  {
    "text": "candidate is due to be released somewhere around 2080 I don't imagine how we're doing in",
    "start": "440060",
    "end": "446240"
  },
  {
    "text": "c-sharp by then so whoever set this is end date yeah I don't know what they",
    "start": "446240",
    "end": "454400"
  },
  {
    "text": "were thinking but anyways it's probably just a placeholder right so they'll update that and I'll talk a little bit more soon about when this is coming into",
    "start": "454400",
    "end": "460580"
  },
  {
    "text": "Visual Studio but it's based on all the things that we have listed here it's about seven percent complete right so",
    "start": "460580",
    "end": "468820"
  },
  {
    "text": "based on that if we know that C sharp eight is gonna be released soon",
    "start": "468820",
    "end": "474020"
  },
  {
    "text": "some of the features might not make it into the language even though we're talking about them but just because they're not making to this version of",
    "start": "474020",
    "end": "480530"
  },
  {
    "text": "c-sharp doesn't make mean that they're not getting into c-sharp 8.1 or 8.2 or nine or ten or X or whatever even want",
    "start": "480530",
    "end": "486500"
  },
  {
    "text": "to call the next version so when is he sharp eight gonna be released well I had hopes for this to be released with",
    "start": "486500",
    "end": "493010"
  },
  {
    "text": "Visual Studio 2019 which is due to be released on April 2nd they have this launch event that anyone can participate",
    "start": "493010",
    "end": "498740"
  },
  {
    "text": "in online and they're gonna release official CP 2019 now I just read an announcement I think they released",
    "start": "498740",
    "end": "505760"
  },
  {
    "text": "yesterday where they said well we're not going to release c-sharp eight with Visual Studio not 2019 we're gonna wait",
    "start": "505760",
    "end": "511850"
  },
  {
    "text": "until we feel comfortable with both c-sharp eight and dotnet four three and then packages in Visual Studio 2019 when",
    "start": "511850",
    "end": "519169"
  },
  {
    "text": "it's available when it's ready for for you to work with but that doesn't mean that you can't use the features we chose to be 2019",
    "start": "519169",
    "end": "524990"
  },
  {
    "text": "that's totally confusing so they will actually ship c-sharp eight as well as",
    "start": "524990",
    "end": "530090"
  },
  {
    "text": "dead core 3.0 with Visual Studio 2019 but you have to enable the preview of the compiler as well as the SDK that",
    "start": "530090",
    "end": "536900"
  },
  {
    "text": "you're working with so you'll get gradual updates with visual studio where they update the compilers but as long as you don't",
    "start": "536900",
    "end": "543779"
  },
  {
    "text": "enable any preview features the next version of facial studio will still be C sharp 7.3 so C sharp aid and dotnet core",
    "start": "543779",
    "end": "551699"
  },
  {
    "text": "3.0 is going to be released some sometime this year and a few of the features that we're going to get into",
    "start": "551699",
    "end": "557519"
  },
  {
    "text": "the language is some of these she's our bait features and I'll go through a few of these features in Visual Studio now I",
    "start": "557519",
    "end": "564180"
  },
  {
    "text": "did something really stupid I updated Visual Studio a few days ago and everything broke so a few of the",
    "start": "564180",
    "end": "571680"
  },
  {
    "text": "features we'll just have to imagine that they work most of them still work but you know so this here is Visual Studio",
    "start": "571680",
    "end": "579360"
  },
  {
    "text": "2019 it's the release candidate version official City 2019 but before we can get",
    "start": "579360",
    "end": "585000"
  },
  {
    "text": "into exactly the features that are getting into c-sharp 8 I just want to",
    "start": "585000",
    "end": "590399"
  },
  {
    "text": "quickly run through two features added in c-sharp 7 just in case someone doesn't know them it gets really hard",
    "start": "590399",
    "end": "596490"
  },
  {
    "text": "following along because a lot of the bigger improvements in c-sharp 8 is due to things like tuples and pattern",
    "start": "596490",
    "end": "602730"
  },
  {
    "text": "matching we could probably spend an hour talking about just couple of pattern matching but that's not the point",
    "start": "602730",
    "end": "608100"
  },
  {
    "text": "so in c-sharp 7 they introduced this thing called tuples now temples have been around for for a long time but in",
    "start": "608100",
    "end": "615000"
  },
  {
    "text": "kind of a different way now it's a first-class citizen in the language which means that in this case here I can",
    "start": "615000",
    "end": "620819"
  },
  {
    "text": "say well this method call here returns two things I could even say that it",
    "start": "620819",
    "end": "626550"
  },
  {
    "text": "returns a lot of things but I don't know why you want to do that you could just",
    "start": "626550",
    "end": "631800"
  },
  {
    "text": "introduce a class gets more readable right but you could do this if you want you this creates a couple with multiple different fields and what's interesting",
    "start": "631800",
    "end": "639750"
  },
  {
    "text": "with these tuples I'm not going to do that because it breaks everything else is that I can create this couple here of",
    "start": "639750",
    "end": "645420"
  },
  {
    "text": "values that will be mapped into the tupple that's returned so 100 will be mapped into X and 200 will be mapped",
    "start": "645420",
    "end": "651600"
  },
  {
    "text": "into Y kind of kind of obvious right and then when we call this method I can save our point is equal to get point",
    "start": "651600",
    "end": "660199"
  },
  {
    "text": "sidenote the reason I update the visual studio was because when I started coding some of the demos visual studio would",
    "start": "660199",
    "end": "666029"
  },
  {
    "text": "deadlock so I just had to update just to make sure that I could still live code right so when I call four points here",
    "start": "666029",
    "end": "673770"
  },
  {
    "text": "sequel to get point what would you expect that I get out of this thing here",
    "start": "673770",
    "end": "679220"
  },
  {
    "text": "well if we say point dot we in fact get it way for us to use x and y so this",
    "start": "679220",
    "end": "687240"
  },
  {
    "text": "here is a really nice addition previously when using tuples you would get item 1 item 2 and so forth so that's",
    "start": "687240",
    "end": "692760"
  },
  {
    "text": "a really nice addition but this brings us into something that they call deconstruction now this is another way",
    "start": "692760",
    "end": "700380"
  },
  {
    "text": "just to do the same thing instead of for doing VAR point here you can do int",
    "start": "700380",
    "end": "706830"
  },
  {
    "text": "exiting fly inside this tuple syntax here and that would just map the values but what would you imagine happens if I",
    "start": "706830",
    "end": "714000"
  },
  {
    "text": "change these around actually this is the wrong way around so what would you",
    "start": "714000",
    "end": "720000"
  },
  {
    "text": "imagine happening now so I'm returning X&Y from my get point I'm expecting Y an",
    "start": "720000",
    "end": "725490"
  },
  {
    "text": "X down here at the bottom it's actually not mapping this by naming its mapping",
    "start": "725490",
    "end": "731490"
  },
  {
    "text": "it by position it's called positioning matching position matching so Y here",
    "start": "731490",
    "end": "737880"
  },
  {
    "text": "will in fact get the x value so this here just shows that it can be a little bit fragile so don't do this it would",
    "start": "737880",
    "end": "744930"
  },
  {
    "text": "probably be better off just saying more here that will make more sense so this",
    "start": "744930",
    "end": "750210"
  },
  {
    "text": "brings us into deconstruction deconstruction is a way for us to take the topple and create some other tuple",
    "start": "750210",
    "end": "755460"
  },
  {
    "text": "that looks similar but in this case here I say well I have this tuple here of x1 and y1 in fact this crates two local",
    "start": "755460",
    "end": "763350"
  },
  {
    "text": "fields instead of putting this in a new type of variable so I can simply use x1 and y1 here but it's still tuples syntax",
    "start": "763350",
    "end": "770060"
  },
  {
    "text": "and then we can make this in different ways we can say that will we have this",
    "start": "770060",
    "end": "776070"
  },
  {
    "text": "simplified version of saying well I have a variable or have two variables x2 and y2 and just map those values correctly",
    "start": "776070",
    "end": "783090"
  },
  {
    "text": "so that's tuples it's super simple really but still we need to understand",
    "start": "783090",
    "end": "789840"
  },
  {
    "text": "tuples and just how how they work and that they are existing in the language now another thing added to UC sharp 7 is",
    "start": "789840",
    "end": "795600"
  },
  {
    "text": "pattern matching as anyone done any other programming done C sharp like Coughlin's or swift no one perfect",
    "start": "795600",
    "end": "802490"
  },
  {
    "text": "um why don't you so that's perfect because that means that pattern matching might be be new to you now pattern",
    "start": "802490",
    "end": "809390"
  },
  {
    "text": "matching is a way for us to say well I have this class or I have this thing and I want to apply patterns to understand",
    "start": "809390",
    "end": "814790"
  },
  {
    "text": "which thing it is but I don't want to be too explicit about that and of course",
    "start": "814790",
    "end": "820040"
  },
  {
    "text": "we've been able to do this in the past if I want to have this shape here and I want to check well is this shape a",
    "start": "820040",
    "end": "825350"
  },
  {
    "text": "triangle is it a rectangle and then I want to cast this to something else we could of course do shape get type and",
    "start": "825350",
    "end": "832360"
  },
  {
    "text": "then type off so forth right so this here becomes really verbose and then you",
    "start": "832360",
    "end": "839240"
  },
  {
    "text": "need to be typecasting if you want to use that particular rectangle and so forth you get the idea right so how do we do this better",
    "start": "839240",
    "end": "844880"
  },
  {
    "text": "well we introduce pattern matching in this case we use this switch syntax to say based on the shape data that I have",
    "start": "844880",
    "end": "851540"
  },
  {
    "text": "here in the case of it being a triangle capture this as a local variable of T and then I can use T inside this context",
    "start": "851540",
    "end": "858080"
  },
  {
    "text": "so that's neat what I can also do something that they",
    "start": "858080",
    "end": "863900"
  },
  {
    "text": "introduced earlier in c-sharp is a way for us to do you know exception filters where we can say if this exception is a",
    "start": "863900",
    "end": "870250"
  },
  {
    "text": "HTTP exception and the status code is 400 or something like that there's a syntax for doing this it's the one",
    "start": "870250",
    "end": "876620"
  },
  {
    "text": "keyword we can apply that here as well so I can say in case of this being a triangle capture T and when when T and",
    "start": "876620",
    "end": "887030"
  },
  {
    "text": "we have two sides we have a it's not equal to T to be then run this context",
    "start": "887030",
    "end": "892580"
  },
  {
    "text": "here and then I can have another case down here which is where triangle we're",
    "start": "892580",
    "end": "897620"
  },
  {
    "text": "trying triangle captured as T wanted something else right so you could have multiple different cases here using pattern matching this is really nice",
    "start": "897620",
    "end": "904100"
  },
  {
    "text": "because this means that I don't have I don't have to do any typecasting I can use this syntax to just ensure that this",
    "start": "904100",
    "end": "909350"
  },
  {
    "text": "is a little bit better but we've been able to do this for quite some time now this has been available since c-sharp 7",
    "start": "909350",
    "end": "915590"
  },
  {
    "text": "which is a while so how it has this improved in c-sharp 8 the reason that we",
    "start": "915590",
    "end": "921230"
  },
  {
    "text": "talk about this is because the next things get really confusing if you don't know anything about pattern matching so",
    "start": "921230",
    "end": "927230"
  },
  {
    "text": "in c-sharp a they introduce something they call recursive patterns now recursive patterns is let's think of it",
    "start": "927230",
    "end": "933200"
  },
  {
    "text": "as a way of us to apply multiple different patterns we can match on certain different things",
    "start": "933200",
    "end": "938750"
  },
  {
    "text": "so in our case we said when this is a triangle I can match to a few different conditions right now I want to say that",
    "start": "938750",
    "end": "945710"
  },
  {
    "text": "we're a link case of I want different patterns to say well if the it has these kinds of attributes or these kinds of",
    "start": "945710",
    "end": "951170"
  },
  {
    "text": "traits or these property values then I want to get into the context so just to",
    "start": "951170",
    "end": "956570"
  },
  {
    "text": "show you an example of this I'm creating a shape here just a triangle super simple then I call a method call",
    "start": "956570",
    "end": "962480"
  },
  {
    "text": "explain shape which is going to use a few different things first of all it's",
    "start": "962480",
    "end": "968180"
  },
  {
    "text": "introducing a new way of us to do pattern matching it's introducing something called switch expressions so",
    "start": "968180",
    "end": "974930"
  },
  {
    "text": "you'll notice here that I have this weird syntax or this weird expression where I'm saying well I want to return",
    "start": "974930",
    "end": "980330"
  },
  {
    "text": "something which in this case it's going to be a string I'm gonna return a string based off what the shape is and then",
    "start": "980330",
    "end": "986390"
  },
  {
    "text": "each case inside this switch is in fact going to be a um and then this",
    "start": "986390",
    "end": "994220"
  },
  {
    "text": "expression here right so this is like an expression body member pretty much so on",
    "start": "994220",
    "end": "1000310"
  },
  {
    "text": "the left hand side we have a pattern this is the same that we saw earlier so I can say we're need to triangle then do this only when a is not equal to B and",
    "start": "1000310",
    "end": "1007480"
  },
  {
    "text": "when that's the case we return this string super simple then we have other ways of us to apply patterns which is a",
    "start": "1007480",
    "end": "1013660"
  },
  {
    "text": "new way for doing this in C sharp 8 we have something called positional patterns so how does that work",
    "start": "1013660",
    "end": "1019480"
  },
  {
    "text": "in this case here I'm saying when there's a rectangle and it's when these things have these different values but",
    "start": "1019480",
    "end": "1026319"
  },
  {
    "text": "what are those things so this here is in fact a tuple but what does that what",
    "start": "1026320",
    "end": "1031839"
  },
  {
    "text": "does that mean in this case here well if we're going to the rectangle we've introduced something called a deconstruct a deconstruct is a way for",
    "start": "1031840",
    "end": "1039790"
  },
  {
    "text": "us to get a representation of the object so I'm saying here that the first thing that you get out of the deconstruct",
    "start": "1039790",
    "end": "1045610"
  },
  {
    "text": "which is simply just a way for us to get a topple out of this the first one is with its height then it's a point so now",
    "start": "1045610",
    "end": "1052510"
  },
  {
    "text": "if we go back and look at our switch expression in fact what's happening here",
    "start": "1052510",
    "end": "1057520"
  },
  {
    "text": "it's saying when the width is 0 for the rectangle and when the height is 0 and I don't care about the point then run this",
    "start": "1057520",
    "end": "1064630"
  },
  {
    "text": "thing here that make sense that's pretty cool",
    "start": "1064630",
    "end": "1069870"
  },
  {
    "text": "so we can use this in different ways as well and I get I'll get into on permutation of this where it makes a lot",
    "start": "1069870",
    "end": "1076360"
  },
  {
    "text": "more sense in just a little bit but let's stick to the the shapes and the rectangles now so this here uses or",
    "start": "1076360",
    "end": "1081460"
  },
  {
    "text": "leverages to deconstruct the deconstruction so it could change these two different things here and I could",
    "start": "1081460",
    "end": "1086649"
  },
  {
    "text": "even capture the point like this and then I can use that point here as well",
    "start": "1086649",
    "end": "1094260"
  },
  {
    "text": "alright so you can do all kinds of crazy things and then we have something called",
    "start": "1094260",
    "end": "1103149"
  },
  {
    "text": "a property pattern so in case I don't have the deconstruct in case this here",
    "start": "1103149",
    "end": "1108480"
  },
  {
    "text": "the one at the top here is a little bit too verbose for me saying what I'm",
    "start": "1108480",
    "end": "1113950"
  },
  {
    "text": "looking for values that I want to use when for all of them so I can use this property pattern instead where I say",
    "start": "1113950",
    "end": "1119260"
  },
  {
    "text": "we're just match these two rectangles where the width is 100 and then this",
    "start": "1119260",
    "end": "1124480"
  },
  {
    "text": "returns this string here as well so this is multiple different ways for us to match on different types of patterns of",
    "start": "1124480",
    "end": "1130390"
  },
  {
    "text": "objects and their different traits and then of course we can have multiple patterns in here and they're all matched",
    "start": "1130390",
    "end": "1136480"
  },
  {
    "text": "in order so the one at the top will be matched first so we have this example here where I just match any any",
    "start": "1136480",
    "end": "1142330"
  },
  {
    "text": "rectangle if I were to move this above this one here hopefully this this doesn't break Visual Studio whoo that",
    "start": "1142330",
    "end": "1149679"
  },
  {
    "text": "was close every time I see that little thing come up say I'm working on",
    "start": "1149679",
    "end": "1155110"
  },
  {
    "text": "something I'm just whoa this is gonna be crazy so this here it's gonna say that well this case will never be you reached",
    "start": "1155110",
    "end": "1161559"
  },
  {
    "text": "because you're catching all the rectangles right so that's a few nice",
    "start": "1161559",
    "end": "1168340"
  },
  {
    "text": "additions and then of course how do you do a default for this what if there's other types of shapes in my application",
    "start": "1168340",
    "end": "1173529"
  },
  {
    "text": "well you can say you have a default pattern where this underscore just as",
    "start": "1173529",
    "end": "1178779"
  },
  {
    "text": "with with this thing here at the top or I say I don't care the underscore I don't care",
    "start": "1178779",
    "end": "1184179"
  },
  {
    "text": "pretty much it's short for I don't care then we do the same thing here at the bottom for anything else just catch all of these different things so this is",
    "start": "1184179",
    "end": "1191710"
  },
  {
    "text": "pretty cool so this here means that we can do all kinds of crazy things now imagine if you have expression body",
    "start": "1191710",
    "end": "1198039"
  },
  {
    "text": "members which is a way for us to introduce a syntax like this here right so I could",
    "start": "1198039",
    "end": "1205940"
  },
  {
    "text": "do this instead now I can say I have this explained shape thing now I don't need to have the curly braces and the",
    "start": "1205940",
    "end": "1212270"
  },
  {
    "text": "other things right how would you do this previously when you have the if it's",
    "start": "1212270",
    "end": "1217640"
  },
  {
    "text": "type off and then you cast it in and you check the different values that syntax gets really nasty but in this case here",
    "start": "1217640",
    "end": "1223520"
  },
  {
    "text": "when you use a switch expression you can use this with with expression body members in all honesty we're just saving",
    "start": "1223520",
    "end": "1232130"
  },
  {
    "text": "these characters plus the the curly brace at the bottom but someone who I",
    "start": "1232130",
    "end": "1237140"
  },
  {
    "text": "said that it's all about saving characters because we don't have too many characters of writing our entire life so we just make the C sharp team",
    "start": "1237140",
    "end": "1243530"
  },
  {
    "text": "write them for us all right so we have some other ways to do this as well this",
    "start": "1243530",
    "end": "1249950"
  },
  {
    "text": "here if we run this it'll of course work in this case here it's gonna say that these different sides are not equal it's",
    "start": "1249950",
    "end": "1260210"
  },
  {
    "text": "gonna say it's not equal to B because we passed this triangle or the sides are",
    "start": "1260210",
    "end": "1265580"
  },
  {
    "text": "different and then we can run these against the other patterns as well another example of this is a topple",
    "start": "1265580",
    "end": "1271640"
  },
  {
    "text": "pattern now imagine the case where this example actually comes from the c-sharp blog where they talk about these",
    "start": "1271640",
    "end": "1277370"
  },
  {
    "text": "features and i think it's a really good explanation of how to do tuple patterns",
    "start": "1277370",
    "end": "1283040"
  },
  {
    "text": "so imagine we call this method called open the door or open door we send the current state of the door which in this",
    "start": "1283040",
    "end": "1289070"
  },
  {
    "text": "case is locked we want to open the door and the final parameter here indicates that we have a valid key to open the",
    "start": "1289070",
    "end": "1295490"
  },
  {
    "text": "door kind of makes sense right so there are multiple different ways for us to",
    "start": "1295490",
    "end": "1300560"
  },
  {
    "text": "build this state machine or this logic in our applications but with expressions",
    "start": "1300560",
    "end": "1305890"
  },
  {
    "text": "and would switch expressions this here gets pretty nice especially with the topple patterns so in this case here I",
    "start": "1305890",
    "end": "1312680"
  },
  {
    "text": "create this topple with values so we switch based off on these three",
    "start": "1312680",
    "end": "1318200"
  },
  {
    "text": "different values so this is look at this as a topple right and then we have more tuples in here which need to match those",
    "start": "1318200",
    "end": "1324230"
  },
  {
    "text": "particular values so we can say when the state is open then you want to close and you don't have a key well you can close",
    "start": "1324230",
    "end": "1330170"
  },
  {
    "text": "the door you don't have me the key for that and then of course are different cases for what you don't have",
    "start": "1330170",
    "end": "1336110"
  },
  {
    "text": "kena tried to lock it or you tried to open the door it's locked you don't have the key and so forth so you can build all of these really amazing things using",
    "start": "1336110",
    "end": "1342919"
  },
  {
    "text": "the pattern matching and switch expressions and then of course if you try the close to door when it's not closed or when you tried to close the",
    "start": "1342919",
    "end": "1348620"
  },
  {
    "text": "door and it's already is closed you'll throw an exception so you don't have to return everything from these different",
    "start": "1348620",
    "end": "1354590"
  },
  {
    "text": "things so this expression here allows you to return which state the door will",
    "start": "1354590",
    "end": "1360320"
  },
  {
    "text": "be in once you perform your operation doing this with traditional approaches",
    "start": "1360320",
    "end": "1365330"
  },
  {
    "text": "it's a lot more chatty there's a lot more code to it now of course you",
    "start": "1365330",
    "end": "1371480"
  },
  {
    "text": "shouldn't take this to the extreme extent I've seen people kind of",
    "start": "1371480",
    "end": "1377809"
  },
  {
    "text": "replacing all the original statements with this so imagine this case where we have I want to take a boolean and get",
    "start": "1377809",
    "end": "1385010"
  },
  {
    "text": "the visibility out of that so let's say that we work in WPF we rinse Ameren I want to change the visibility of an",
    "start": "1385010",
    "end": "1390860"
  },
  {
    "text": "element based off a between so in this case here we simply say well we're gonna",
    "start": "1390860",
    "end": "1396710"
  },
  {
    "text": "switch based on the current state which is the boolean and then for true it's gonna return visible and if we fall it's",
    "start": "1396710",
    "end": "1401899"
  },
  {
    "text": "gonna return hidden even if it's null because we all know that you have three states on a boolean it's gonna blink so",
    "start": "1401899",
    "end": "1408080"
  },
  {
    "text": "don't do that it's like it's this is a really bad approach to do it don't replace all your if and else blocks with switches and pattern matching because it",
    "start": "1408080",
    "end": "1415100"
  },
  {
    "text": "doesn't really make any sense now finally there's one more interesting approach to this so a more real-world",
    "start": "1415100",
    "end": "1422299"
  },
  {
    "text": "scenario as well as apposed like as opposed to the explain shape example you",
    "start": "1422299",
    "end": "1428960"
  },
  {
    "text": "might have this idea of well I want you to grab something from the web so we have this example where I show you the",
    "start": "1428960",
    "end": "1436340"
  },
  {
    "text": "code here we get a shape from a web response so let's say that we call on",
    "start": "1436340",
    "end": "1442850"
  },
  {
    "text": "API this is need to be converted into something it's going to give us a HTTP",
    "start": "1442850",
    "end": "1448010"
  },
  {
    "text": "response meditation this method is going to be asynchronous now of course we can use the switch expression for this as",
    "start": "1448010",
    "end": "1453080"
  },
  {
    "text": "well so we could say here that this Sena synchron's method it returns a shape when it's done when the only asynchronous operation is done we use",
    "start": "1453080",
    "end": "1459289"
  },
  {
    "text": "this switch or the switch expression syntax to say when the message is has",
    "start": "1459289",
    "end": "1464330"
  },
  {
    "text": "the status code of these different values then run these different things so when it's a 200 okay we can extract",
    "start": "1464330",
    "end": "1469929"
  },
  {
    "text": "shape from the message if it's not modified we might have a cache where we load this thing from and then if it's a",
    "start": "1469929",
    "end": "1475360"
  },
  {
    "text": "bad request forbidden or other types of exceptions for other types of aesthetics codes we just throw different exceptions",
    "start": "1475360",
    "end": "1481090"
  },
  {
    "text": "of course you can solve this with a normal switch in case syntax as well but",
    "start": "1481090",
    "end": "1488019"
  },
  {
    "text": "then you get more like every case you need to have a break or a return and so forth this is just a little bit less",
    "start": "1488019",
    "end": "1493570"
  },
  {
    "text": "chatty in your application makes it a little bit more nice to read and probably a little bit more hard to work",
    "start": "1493570",
    "end": "1500470"
  },
  {
    "text": "with all right so that's recursive patterns next up is a feature called",
    "start": "1500470",
    "end": "1507249"
  },
  {
    "text": "ranges now this is the thing that broke when I update a visual studio so what's interesting though is that I can code",
    "start": "1507249",
    "end": "1513519"
  },
  {
    "text": "everything in the show studio and I can run it from command line so I'll do that two things that we have in here it's",
    "start": "1513519",
    "end": "1519580"
  },
  {
    "text": "features introduced in earlier versions of c-sharp where this span of T it's a way for us to reference a chunk of",
    "start": "1519580",
    "end": "1525879"
  },
  {
    "text": "memory and then work on this chunk of memory without copying this array or copying the sequence of data so imagine",
    "start": "1525879",
    "end": "1533619"
  },
  {
    "text": "that I have this huge array of numbers or strings and I want to say I want to get the middle ones you don't have to",
    "start": "1533619",
    "end": "1539169"
  },
  {
    "text": "copy the middle ones into a new array you can just simply point to the start and finish element and you get a new array out of that or new reference to",
    "start": "1539169",
    "end": "1546429"
  },
  {
    "text": "that part particular part of memory so they did a lot of this in I believe unites p.net core and just improve",
    "start": "1546429",
    "end": "1552580"
  },
  {
    "text": "performance a lot so ranges is a way for us to express how we want to grab this",
    "start": "1552580",
    "end": "1558460"
  },
  {
    "text": "piece of data so you see the squiggle is here telling me that you don't have the things you need a visual studio to run",
    "start": "1558460",
    "end": "1563889"
  },
  {
    "text": "this but I know I do but there's some mismatch between visual studio and the at the runtime or the compiler so what",
    "start": "1563889",
    "end": "1570399"
  },
  {
    "text": "I'm saying here is that I want you to start off from the fifth element and then give me everything one from the end",
    "start": "1570399",
    "end": "1576759"
  },
  {
    "text": "so start off with number five index five which is number six and they gave me everything until one from the end so",
    "start": "1576759",
    "end": "1583929"
  },
  {
    "text": "this should give us six through nine and then of course this gives us a reference",
    "start": "1583929",
    "end": "1589809"
  },
  {
    "text": "to that particular part of memory and we can run a for each on that because it's a lineman role so if we run this it",
    "start": "1589809",
    "end": "1597359"
  },
  {
    "text": "should the first section here in this example should say six seven eight nine which you can see here it at",
    "start": "1597359",
    "end": "1603070"
  },
  {
    "text": "the top hopefully then next up we have another example of this where we don't",
    "start": "1603070",
    "end": "1610570"
  },
  {
    "text": "do a slice we simply say I want you to use the normal array syntax and pass this this range in as a not as an index",
    "start": "1610570",
    "end": "1620110"
  },
  {
    "text": "you can do multiple different things here now so you can say I want to get either an index an index is a reference to a particular item as well using this",
    "start": "1620110",
    "end": "1626950"
  },
  {
    "text": "kind of syntax then you can pass an index which is normal if there's an integer and then you can pass the range",
    "start": "1626950",
    "end": "1632080"
  },
  {
    "text": "that gives you a new span of the type that you're working with so this here will of course give us one through four",
    "start": "1632080",
    "end": "1640440"
  },
  {
    "text": "but it's a little bit more compact than the first example then of course we can",
    "start": "1640440",
    "end": "1646120"
  },
  {
    "text": "use this in index syntax as well to say just give me the index this will give us the index to the fifth element from the",
    "start": "1646120",
    "end": "1652240"
  },
  {
    "text": "end and then it can be really confusing",
    "start": "1652240",
    "end": "1657960"
  },
  {
    "text": "to specify two index s if I can just expand this here you can say that I want",
    "start": "1657960",
    "end": "1664419"
  },
  {
    "text": "to get I want to start off from four from the end and go to two from the end I don't know what you might want to do",
    "start": "1664419",
    "end": "1670809"
  },
  {
    "text": "this but this just shows a way for you to express that so you have to index s and then you can use that together with",
    "start": "1670809",
    "end": "1676450"
  },
  {
    "text": "this range syntax like you have two different variables and you start with the range syntax and if we run this it",
    "start": "1676450",
    "end": "1682330"
  },
  {
    "text": "should give us you can see that seven and eight so it's starting off at four from the end and then gave us two elements from that we could of course",
    "start": "1682330",
    "end": "1691120"
  },
  {
    "text": "also say just give us some more elements or give us everything until the end",
    "start": "1691120",
    "end": "1697390"
  },
  {
    "text": "right so we could do different ways suffice to expressing this using ranges and this is something that's been a way",
    "start": "1697390",
    "end": "1703000"
  },
  {
    "text": "around for a long time if you work with Python or other types of programming languages so those two are pretty much",
    "start": "1703000",
    "end": "1712090"
  },
  {
    "text": "coming into c-sharp eight because they're in this release candidate as previews now next up is one of the",
    "start": "1712090",
    "end": "1719500"
  },
  {
    "text": "probably the most sawed off feature and the language is null reference types so",
    "start": "1719500",
    "end": "1725350"
  },
  {
    "text": "the idea behind null reference types is that when they started off building c-sharp they made one huge mistake and",
    "start": "1725350",
    "end": "1730600"
  },
  {
    "text": "that was introducing nulls in the language it's really hard to remove nulls now so a way for us to solve this problem is",
    "start": "1730600",
    "end": "1737290"
  },
  {
    "text": "to make it easier for us to know when there's potential no reference exceptions or no reference problems so",
    "start": "1737290",
    "end": "1743140"
  },
  {
    "text": "imagine that we simply now say in my I could change something in my configuration of this project and say I",
    "start": "1743140",
    "end": "1749770"
  },
  {
    "text": "want to enable noble context what this",
    "start": "1749770",
    "end": "1755080"
  },
  {
    "text": "does is that it then interprets everything as unknowable it's not gonna",
    "start": "1755080",
    "end": "1761920"
  },
  {
    "text": "break the application it'll simply give you warnings when you look at in you can get hints that well you should probably",
    "start": "1761920",
    "end": "1768370"
  },
  {
    "text": "do something about this so in this case here I'm saying well string in this case can be null and that's totally fine my my application handles the cases where",
    "start": "1768370",
    "end": "1775480"
  },
  {
    "text": "the name is not initialized but what if I say that this here shouldn't be no",
    "start": "1775480",
    "end": "1782130"
  },
  {
    "text": "well then we get some squiggle is here on the constructor to tell us that you should probably initialize name because",
    "start": "1782130",
    "end": "1788080"
  },
  {
    "text": "you require that in your application this here is just a hint for for the time being but imagine being able to",
    "start": "1788080",
    "end": "1793600"
  },
  {
    "text": "turn this into compiler warnings or into accept or into breaking things in your compiler right it breaks the build that",
    "start": "1793600",
    "end": "1799780"
  },
  {
    "text": "would be great because this here is gonna tell us that well you have a potential problem and of course if you",
    "start": "1799780",
    "end": "1805660"
  },
  {
    "text": "were really good you would then change name as well so you cannot change it externally if you introduce a",
    "start": "1805660",
    "end": "1811140"
  },
  {
    "text": "constructor parameter for it you would make it immune Amol and so forth but that kind of requires a huge effort in",
    "start": "1811140",
    "end": "1817360"
  },
  {
    "text": "most applications it's easier for us to simply just remove it and see where it kind of breaks because what this does",
    "start": "1817360",
    "end": "1823840"
  },
  {
    "text": "now is that it doesn't give us any problems inside our person class but where does cost interesting implications",
    "start": "1823840",
    "end": "1830710"
  },
  {
    "text": "is if we look at where we use this so imagine that we use this in this mythical insert or update we can say I",
    "start": "1830710",
    "end": "1836170"
  },
  {
    "text": "have this person here am i trying to access name here but it's going to tell us that well there's a possibility that you're gonna get a null reference",
    "start": "1836170",
    "end": "1841870"
  },
  {
    "text": "exception so it's Kurt it's gonna start telling us inside our applications or",
    "start": "1841870",
    "end": "1846910"
  },
  {
    "text": "inside our code here that your potential issues you should probably solve that I have two ways that I can solve this",
    "start": "1846910",
    "end": "1852190"
  },
  {
    "text": "right off the bat here if I know that this is not going to be a problem or if I'm if I'm worried that this is gonna be",
    "start": "1852190",
    "end": "1858340"
  },
  {
    "text": "a problem I can simply say well don't get the length if this is no or I can",
    "start": "1858340",
    "end": "1864370"
  },
  {
    "text": "say that I promise that this thing here is not going to be null and just go ahead and give me the length anyways if you do this you're gonna get into",
    "start": "1864370",
    "end": "1870890"
  },
  {
    "text": "trouble not by me you're gonna get into trouble by the compiler the same goes for the parameter the parameter that we",
    "start": "1870890",
    "end": "1877070"
  },
  {
    "text": "have here we can say here that this would potentially be no which then tells",
    "start": "1877070",
    "end": "1883730"
  },
  {
    "text": "us that well you should probably do something about that because person here shouldn't beam also in case this person it's no we don't get the name and then",
    "start": "1883730",
    "end": "1890240"
  },
  {
    "text": "we don't get the length but then you can also say well I really want to get the name and this here starts to get pretty",
    "start": "1890240",
    "end": "1896600"
  },
  {
    "text": "nasty I don't particularly like all the banks in the code but you can do this if",
    "start": "1896600",
    "end": "1901730"
  },
  {
    "text": "you really want to you now an interesting take on this is what happens if we say that this here is not knowable",
    "start": "1901730",
    "end": "1910700"
  },
  {
    "text": "and we pass and we pass actually we do this we'll pass null into the to the",
    "start": "1910700",
    "end": "1919520"
  },
  {
    "text": "method that's probably not a good idea right so passing Nolan here now is a",
    "start": "1919520",
    "end": "1925190"
  },
  {
    "text": "potential problem but I know that I can promise that no it's not gonna be no the problem goes away that's awesome I don't",
    "start": "1925190",
    "end": "1935000"
  },
  {
    "text": "know if this is gonna make it into the final version but we'll see",
    "start": "1935000",
    "end": "1939429"
  },
  {
    "text": "all right so and then we have something else in here which is interesting we",
    "start": "1940390",
    "end": "1945650"
  },
  {
    "text": "have this new coalescing assignment so instead of me having to say person is equal to person and if it's not all the",
    "start": "1945650",
    "end": "1951200"
  },
  {
    "text": "you've initialized that I can say if person is not I'll just create a new person for it I like the syntax but it",
    "start": "1951200",
    "end": "1957980"
  },
  {
    "text": "can get pretty confusing because what happens if you kind of remove that you can have a problem it's hard to it's",
    "start": "1957980",
    "end": "1965270"
  },
  {
    "text": "easier to make a this a problem rather than the old syntax this is just easier",
    "start": "1965270",
    "end": "1971090"
  },
  {
    "text": "to misunderstanding anyway so that I think this is a great addition to the language and John skeet has a great blog",
    "start": "1971090",
    "end": "1976520"
  },
  {
    "text": "post on how he did this in no time where he just introduced these Noah built Noah nullable types mobile reference types",
    "start": "1976520",
    "end": "1983539"
  },
  {
    "text": "and just found a lot of potential issues I think someone made a calculation of",
    "start": "1983539",
    "end": "1989150"
  },
  {
    "text": "how much money has been lost due to null reference exceptions and that's a lot question",
    "start": "1989150",
    "end": "1997150"
  },
  {
    "text": "so your question is if that maybe pattern came out of this so that if if it's null he do something in the mood to",
    "start": "2015540",
    "end": "2020860"
  },
  {
    "text": "not know Li do something else yeah for sure",
    "start": "2020860",
    "end": "2025080"
  },
  {
    "text": "so you have multiple different ways to solve this right so you have you can either you just handle it like you normally do that you create a new object",
    "start": "2026220",
    "end": "2032620"
  },
  {
    "text": "if it's no but we want to get into a place where we don't have any nulls at all in the language pretty much but",
    "start": "2032620",
    "end": "2039760"
  },
  {
    "text": "that's gonna take a law a lot of effort and a lot of time the next feature is",
    "start": "2039760",
    "end": "2045059"
  },
  {
    "text": "using electricians this is simply a way for us to not have to write color braces",
    "start": "2045059",
    "end": "2050470"
  },
  {
    "text": "again it's about saving characters so look at this example here I don't have using around my HTTP client I'm simply",
    "start": "2050470",
    "end": "2057669"
  },
  {
    "text": "saying create this HTTP client as soon as this context that it's Houston is",
    "start": "2057669",
    "end": "2063310"
  },
  {
    "text": "completed go ahead and dispose of that so this means that when we reach the this here it'll dispose that it's a nice",
    "start": "2063310",
    "end": "2072669"
  },
  {
    "text": "addition again saving characters and just making the code a little bit more readable because it doesn't make sense",
    "start": "2072669",
    "end": "2078340"
  },
  {
    "text": "to I guess it it makes a lot more sense because a lot of cases you want to do this alright then we have another",
    "start": "2078340",
    "end": "2085898"
  },
  {
    "text": "preview feature now when I install the the release candidate this feature took",
    "start": "2085899",
    "end": "2092740"
  },
  {
    "text": "a little while to get get going because you had to change the compiler to look at the preview features in c-sharp eight",
    "start": "2092740",
    "end": "2098320"
  },
  {
    "text": "so we have C sharp eight and then you have C sharp a preview features they're apparently different so in this case",
    "start": "2098320",
    "end": "2104590"
  },
  {
    "text": "here I'm creating this application inside my application I call something called compute here which then runs some",
    "start": "2104590",
    "end": "2110200"
  },
  {
    "text": "over-engineered method to compute something I like to over engineer my solutions now I really don't but in this",
    "start": "2110200",
    "end": "2116020"
  },
  {
    "text": "case I like to do it because what I'm trying to do here is I'm just concatenate the the integers or I'm just",
    "start": "2116020",
    "end": "2121119"
  },
  {
    "text": "adding these together to get the length of something or a value out of something but the problem with local functions is",
    "start": "2121119",
    "end": "2127030"
  },
  {
    "text": "that they can capture the context they can change things in your class so if we remove this static from here",
    "start": "2127030",
    "end": "2133300"
  },
  {
    "text": "which is what's introduced in c-sharp eight we have this local function that's now capturing the context outside of it",
    "start": "2133300",
    "end": "2138670"
  },
  {
    "text": "it captures the class the instance and the captures everything that it has access to in the method so we can go ahead and change the",
    "start": "2138670",
    "end": "2145000"
  },
  {
    "text": "name which is a property in our class and we can go ahead and change this value where we used to value inside the",
    "start": "2145000",
    "end": "2150160"
  },
  {
    "text": "method now in order for us to speed up the performance a little bit we can introduce the static keyword this",
    "start": "2150160",
    "end": "2157600"
  },
  {
    "text": "introduces a way for us to not only increase the performance but also it promises that there's no side effects",
    "start": "2157600",
    "end": "2164340"
  },
  {
    "text": "the local functions have their use case some cases you can just break them out",
    "start": "2164340",
    "end": "2169540"
  },
  {
    "text": "into external functions but in a lot of cases it might be nice to just have them in this this nested context this world",
    "start": "2169540",
    "end": "2175830"
  },
  {
    "text": "it's a nice thing if you tend to use set local functions the final feature that I",
    "start": "2175830",
    "end": "2182050"
  },
  {
    "text": "can show you in Visual Studio there's a ton more features that we're going to talk about but I have to use PowerPoint slides for that unfortunately because",
    "start": "2182050",
    "end": "2188650"
  },
  {
    "text": "they don't have they haven't made them into the language yet and honestly I didn't have time to build it myself",
    "start": "2188650",
    "end": "2193860"
  },
  {
    "text": "because I don't know how to cover a lot more I just know what to show all these cool things again joking aside in this",
    "start": "2193860",
    "end": "2200440"
  },
  {
    "text": "example here we have something called a synchronous stream so a lot of the times you might want to work with data that's",
    "start": "2200440",
    "end": "2207790"
  },
  {
    "text": "streaming to your application imagine that you're reading a file from disk you're reading something from memory you're talking to a website you get",
    "start": "2207790",
    "end": "2214990"
  },
  {
    "text": "bytes and chunks at a time right it downloads the data as it goes so would it be very nice for us to be able to say",
    "start": "2214990",
    "end": "2221320"
  },
  {
    "text": "a weight for each item that we're getting out of this enumerable now we can of course say a weight in front of",
    "start": "2221320",
    "end": "2228790"
  },
  {
    "text": "get here but what that does is waiting for the entire thing to complete well",
    "start": "2228790",
    "end": "2234400"
  },
  {
    "text": "this new syntax where we put their weight keyword in front of the for each says is that each item is going to be",
    "start": "2234400",
    "end": "2240280"
  },
  {
    "text": "brought to you asynchronously so if we have a look inside actually let's run it first and just see",
    "start": "2240280",
    "end": "2248500"
  },
  {
    "text": "what the output is like hopefully this feature works this is going to stream",
    "start": "2248500",
    "end": "2254890"
  },
  {
    "text": "out the numbers to the consoles as we get them into the application ill you say console.writeline to print out the",
    "start": "2254890",
    "end": "2261010"
  },
  {
    "text": "data into the console so get here allows us to do a few different things",
    "start": "2261010",
    "end": "2269470"
  },
  {
    "text": "first of all we marked this as a sink like would do with any type of asynchronous methods then we use something new call on a ie a sink",
    "start": "2269470",
    "end": "2275530"
  },
  {
    "text": "enumerable which is going to return a string one for each item so each item is going to be an integer and then I simply",
    "start": "2275530",
    "end": "2282310"
  },
  {
    "text": "have a for each for loop that for each item is going to return a value but each value is only brought to you",
    "start": "2282310",
    "end": "2290109"
  },
  {
    "text": "after 300 milliseconds because we were just delaying for its vanna milliseconds here and then this thing here returns to",
    "start": "2290109",
    "end": "2295810"
  },
  {
    "text": "value a less confusing piece of code",
    "start": "2295810",
    "end": "2301020"
  },
  {
    "text": "would be to look at how do we do this for if we're loading something from the disk so I have something here that loads",
    "start": "2301020",
    "end": "2307750"
  },
  {
    "text": "some lyrics from a file so again I'm using this using declaration here just",
    "start": "2307750",
    "end": "2313060"
  },
  {
    "text": "to make sure that I can use my entire stream inside my method here and then",
    "start": "2313060",
    "end": "2319380"
  },
  {
    "text": "side note again this thing here I don't think this particularly looks nice and",
    "start": "2319380",
    "end": "2325569"
  },
  {
    "text": "in addition to c-sharp sometime in the future is to be able to do this in one line like this so you can get rid of",
    "start": "2325569",
    "end": "2332140"
  },
  {
    "text": "that that's also a nice addition anyway doesn't work now so what this is doing here is that it's loading each line",
    "start": "2332140",
    "end": "2338200"
  },
  {
    "text": "asynchronously let me just pull it up and then it's going to return the line and then just",
    "start": "2338200",
    "end": "2343720"
  },
  {
    "text": "to simulate that this is going to be loaded from the web or something or that I have a really slow mechanical disk it'll delay for 400 milliseconds so this",
    "start": "2343720",
    "end": "2352810"
  },
  {
    "text": "means that it's going to load a line from my file and for each line that we're going to get it'll do something",
    "start": "2352810",
    "end": "2358599"
  },
  {
    "text": "with that line it'll return that to you whoever calls this method as long as they're using this weight for each",
    "start": "2358599",
    "end": "2363790"
  },
  {
    "text": "syntax so if we run this the the syntax for this is very similar so again we",
    "start": "2363790",
    "end": "2374260"
  },
  {
    "text": "were saying a weight for each item or for each line that we're getting out of lyrics get lyrics so now if we run this",
    "start": "2374260",
    "end": "2381069"
  },
  {
    "text": "you can get this song",
    "start": "2381069",
    "end": "2383819"
  },
  {
    "text": "rickrolled all right so this just shows",
    "start": "2386200",
    "end": "2392900"
  },
  {
    "text": "you that you can now use these as secret streams to get data in an asynchronous manner so you don't have to wait for an",
    "start": "2392900",
    "end": "2399050"
  },
  {
    "text": "entire chunk of code to be completed and prior to this feature being added to the",
    "start": "2399050",
    "end": "2404750"
  },
  {
    "text": "language I've had situations where I've tried to write the syntax without knowing that this is coming in c-sharp aid but it just doesn't work like when",
    "start": "2404750",
    "end": "2411770"
  },
  {
    "text": "you do this you try to return something from an asynchronous context and it just",
    "start": "2411770",
    "end": "2416780"
  },
  {
    "text": "doesn't work because it does there's no support for it in the language but now we see char right there it is supported so I think this is pretty pretty great",
    "start": "2416780",
    "end": "2424040"
  },
  {
    "text": "features and this is what we can try now in this show Studio 2019 except for the ranges but I might that might just be",
    "start": "2424040",
    "end": "2430070"
  },
  {
    "text": "something local on my machine alright so let's go back into PowerPoint and I have",
    "start": "2430070",
    "end": "2435560"
  },
  {
    "text": "a huge chunk of features or a lot of features that are potentially getting into c-sharp 8 or c-sharp 10 or who",
    "start": "2435560",
    "end": "2441920"
  },
  {
    "text": "knows which version of language they're going to get into one of the things they're looking at and you'll see I have",
    "start": "2441920",
    "end": "2447200"
  },
  {
    "text": "links at the bottom of each slide to the particular language features of the discussions on github and I'll share",
    "start": "2447200",
    "end": "2452900"
  },
  {
    "text": "these slides later on on my Twitter so you can go ahead and check these out if you want you now one of the things I",
    "start": "2452900",
    "end": "2457970"
  },
  {
    "text": "want to add is this thing called target type view exception so again saving characters we no longer have to write",
    "start": "2457970",
    "end": "2464540"
  },
  {
    "text": "var triangle is equal to new triangle instead we say triangle is equal to new so we saved 3 characters that's great",
    "start": "2464540",
    "end": "2472240"
  },
  {
    "text": "although in situations where we have this dictionary here we have a dictionary where the keys of string and",
    "start": "2472240",
    "end": "2478340"
  },
  {
    "text": "then we have a list of integers as the values we can simply say new here and that'll just create that entire thing so",
    "start": "2478340",
    "end": "2483790"
  },
  {
    "text": "the amount of characters that we say it or the amount of code that we don't have to write is starting to expand right and",
    "start": "2483790",
    "end": "2491180"
  },
  {
    "text": "then the same goes for this internal thing here we can say that just create a new thing for what the dictionary expects and I do believe they had to",
    "start": "2491180",
    "end": "2500390"
  },
  {
    "text": "modify the wrong time to make this work because there's no support for doing this I'm not entirely sure but again",
    "start": "2500390",
    "end": "2507140"
  },
  {
    "text": "this is actually a feature that one of the community members helped out building into the language and then",
    "start": "2507140",
    "end": "2514430"
  },
  {
    "text": "here's a small feature if we work in deconstruction what we had to do earlier was in order for to create the default",
    "start": "2514430",
    "end": "2520010"
  },
  {
    "text": "values for these two things in this deconstruction would have to do this but why not just be able to say that gave us",
    "start": "2520010",
    "end": "2525110"
  },
  {
    "text": "a default of this and the compilers figured it out just making the code a little bit more readable and more maintainable I guess",
    "start": "2525110",
    "end": "2532420"
  },
  {
    "text": "now how many of you have tried to do have done your own custom attributes and",
    "start": "2532420",
    "end": "2537530"
  },
  {
    "text": "wanted them to be generic one two three a few if you do asp.net I've had many",
    "start": "2537530",
    "end": "2545360"
  },
  {
    "text": "situations where I wanted to do this so in c-sharp a introducing generic attributes so previously you had to do",
    "start": "2545360",
    "end": "2551090"
  },
  {
    "text": "your custom attribute and pass the type into the constructor and the code just got a little bit nasty we don't want to",
    "start": "2551090",
    "end": "2557480"
  },
  {
    "text": "do that's this anymore but instead what we want to say is give us just a custom attribute often you or",
    "start": "2557480",
    "end": "2562880"
  },
  {
    "text": "you can just introduce this generic constraint or your type I think this is",
    "start": "2562880",
    "end": "2568280"
  },
  {
    "text": "a good addition this is probably something that's going to be very useful next up is something called color",
    "start": "2568280",
    "end": "2573320"
  },
  {
    "text": "attribute caller expression attribute imagine we have this this function lives",
    "start": "2573320",
    "end": "2578750"
  },
  {
    "text": "inside the debug class so we have debug data search which takes a condition",
    "start": "2578750",
    "end": "2583790"
  },
  {
    "text": "which is if you say my name is equal to Phillip or array it's not equal to null or array dot length is equal to 1 or so",
    "start": "2583790",
    "end": "2591020"
  },
  {
    "text": "forth you have a condition that you need to assert on now the second parameter is",
    "start": "2591020",
    "end": "2597080"
  },
  {
    "text": "the message that you want to pass that's gonna tell you if this assertion did fail or or not what this caller argument",
    "start": "2597080",
    "end": "2605210"
  },
  {
    "text": "expression is doing is kind of pointing to the same thing here right so it's pointing to the condition so that means that we no longer have to specify this",
    "start": "2605210",
    "end": "2612460"
  },
  {
    "text": "manually what's gonna happen here is this thing here is going to be compiled",
    "start": "2612460",
    "end": "2617660"
  },
  {
    "text": "down to something looking like this so it'll just take the entire expression and put that inside a string so this",
    "start": "2617660",
    "end": "2625810"
  },
  {
    "text": "this attribute here just figured this out for you this is a great addition",
    "start": "2625810",
    "end": "2632810"
  },
  {
    "text": "especially if you do logging or we're building a logging framework right so",
    "start": "2632810",
    "end": "2640490"
  },
  {
    "text": "don't have to pass this message to yourself and somehow it just figures this out",
    "start": "2640490",
    "end": "2645460"
  },
  {
    "text": "now imagine if you worked in programming languages like go there's this really",
    "start": "2645920",
    "end": "2651080"
  },
  {
    "text": "interesting feature that allows you to pass any type into a method that expects",
    "start": "2651080",
    "end": "2657470"
  },
  {
    "text": "something that looks like the type it doesn't have to implement the interface doesn't have to be the exact same class you just need to share the same traits",
    "start": "2657470",
    "end": "2664460"
  },
  {
    "text": "as that particular type so what they're doing with usings is that they were",
    "start": "2664460",
    "end": "2671420"
  },
  {
    "text": "doing a pattern based approach to this so in this case here our class has a dispose method which means that I don't",
    "start": "2671420",
    "end": "2678080"
  },
  {
    "text": "have to implement I disposable to to be able to use this inside my using block now in programming languages like we're",
    "start": "2678080",
    "end": "2685460"
  },
  {
    "text": "just like go they take this one step further and I hope that they're gonna do this in c-sharp as well so imagine the",
    "start": "2685460",
    "end": "2690920"
  },
  {
    "text": "case where you can pass anything into a method that expects an interface an interface should just tell you which",
    "start": "2690920",
    "end": "2697970"
  },
  {
    "text": "type of methods you should have on your class it should be a requirement that you class implement the interface as",
    "start": "2697970",
    "end": "2703700"
  },
  {
    "text": "long as it has the same methods and the same signatures I think it would be a great addition to the language to just allow you to pass anything into a method",
    "start": "2703700",
    "end": "2710630"
  },
  {
    "text": "that expects the interface right not everyone probably agrees with that but I",
    "start": "2710630",
    "end": "2715790"
  },
  {
    "text": "think will be a good addition to the language now one feature that I don't",
    "start": "2715790",
    "end": "2722930"
  },
  {
    "text": "think that I particularly like I'm not convinced that this is a great addition to the language its default interface methods so this means that we can now",
    "start": "2722930",
    "end": "2730160"
  },
  {
    "text": "introduce methods that have a body on our interfaces or an implementation on our interfaces so our interfaces is now",
    "start": "2730160",
    "end": "2736930"
  },
  {
    "text": "taking a different turn and allowing us to provide logic inside the interfaces I",
    "start": "2736930",
    "end": "2742010"
  },
  {
    "text": "don't think that makes a lot of sense so in this case here we have this is an occasion interface in version one the",
    "start": "2742010",
    "end": "2749180"
  },
  {
    "text": "the person that built this thing just introduced a normal synchronous version of authenticating the user and we",
    "start": "2749180",
    "end": "2755360"
  },
  {
    "text": "implement this in our application and everything is well and then someone decides to well I want to update the interface now what happens is I pull",
    "start": "2755360",
    "end": "2762200"
  },
  {
    "text": "this into my project and I get compiler errors because it no longer compiles because you're not implementing the",
    "start": "2762200",
    "end": "2767660"
  },
  {
    "text": "members but what I'm doing here is I'm providing a default implementation for this now this here is of course very",
    "start": "2767660",
    "end": "2773690"
  },
  {
    "text": "very this here is good this here works and will allow us to just compile the application and run the code",
    "start": "2773690",
    "end": "2780130"
  },
  {
    "text": "so imagine that we have the same application we update our nougat package we'll get this new thing we don't",
    "start": "2780130",
    "end": "2786020"
  },
  {
    "text": "influence anything in our application we can then still call authenticate async and it'll give us an old user so this",
    "start": "2786020",
    "end": "2795170"
  },
  {
    "text": "here is a valid case for it but I can put whatever I want in here like I can put a lot of really nasty logic in here",
    "start": "2795170",
    "end": "2801520"
  },
  {
    "text": "this here starts to turning to multiple inheritance because if you have multiple different interfaces having multiple",
    "start": "2801520",
    "end": "2806930"
  },
  {
    "text": "different implementations of things you can just pull in the implementations from a lot of different places now",
    "start": "2806930",
    "end": "2812420"
  },
  {
    "text": "compared to you multiple inheritance you don't have the the instance or this diamond problem that you would in C++",
    "start": "2812420",
    "end": "2818900"
  },
  {
    "text": "but it's still a wave like it's still not the best thing ever I guess I'm a",
    "start": "2818900",
    "end": "2826760"
  },
  {
    "text": "particularly sold on this but I know that a lot of people that provide packages and you get and provide libraries out there really love this",
    "start": "2826760",
    "end": "2833750"
  },
  {
    "text": "feature because they get a lot of hate back when they break applications so",
    "start": "2833750",
    "end": "2847160"
  },
  {
    "text": "you're saying you still do get the diamond problem now that's interesting okay so this is like multiple inheritance it",
    "start": "2847160",
    "end": "2853880"
  },
  {
    "text": "is alright so I definitely don't like this feature then again it's probably",
    "start": "2853880",
    "end": "2860870"
  },
  {
    "text": "the people that provide you with this packages if you do the libraries and stuff they like this because they don't",
    "start": "2860870",
    "end": "2866210"
  },
  {
    "text": "get a lot of hate back when they break your applications because they can just add things instead of just requiring you",
    "start": "2866210",
    "end": "2871730"
  },
  {
    "text": "to implement all their new things then again they could just introduce a new interface I don't know what the problem",
    "start": "2871730",
    "end": "2878060"
  },
  {
    "text": "is with that all right so that's an interesting feature being added to the language we'll see if it gets into",
    "start": "2878060",
    "end": "2883340"
  },
  {
    "text": "c-sharp eight or nine or ten or whichever feature get the language or it gets into now we talked about the",
    "start": "2883340",
    "end": "2888980"
  },
  {
    "text": "neutralizing assignment I like the one at the top here this is a normal traditional syntax that we do you can",
    "start": "2888980",
    "end": "2895130"
  },
  {
    "text": "also be a bit more expressive to say if X is not equal to null does introduce in Teresa why we're going to X but now you",
    "start": "2895130",
    "end": "2901790"
  },
  {
    "text": "can say X question mark question mark is equal to Y I guess it's sometimes it's a",
    "start": "2901790",
    "end": "2907070"
  },
  {
    "text": "little bit better to save up on characters but this is a little bit more explains it a little bit more especially",
    "start": "2907070",
    "end": "2912860"
  },
  {
    "text": "if you come developers that worked in different languages but I need to see sharp this thing here might be very confusing and",
    "start": "2912860",
    "end": "2919610"
  },
  {
    "text": "that's also something that you struggle with when getting people into your teams right we're also getting things like I",
    "start": "2919610",
    "end": "2925910"
  },
  {
    "text": "talked about the switch expressions relaxed ordering off referent partial modifiers alternative interpolate",
    "start": "2925910",
    "end": "2931310"
  },
  {
    "text": "converting strings stack allocation as the context these are just features that I don't know not worth showing off",
    "start": "2931310",
    "end": "2938240"
  },
  {
    "text": "they're just very edge case features but not a lot of us believes so with that",
    "start": "2938240",
    "end": "2943730"
  },
  {
    "text": "being said that's C sharp 8 right so what's happening after C sharp 8 what can we expect coming in the next version",
    "start": "2943730",
    "end": "2949490"
  },
  {
    "text": "after the one that we have now well to be honest we can't really expect that",
    "start": "2949490",
    "end": "2954650"
  },
  {
    "text": "we're getting any of these features in c-sharp by it either because when they're gonna drop c-sharp a they might pull back features and they've done that",
    "start": "2954650",
    "end": "2960710"
  },
  {
    "text": "in the past so we just have to be very glad if we do get a lot of features in the language hopefully they're gonna",
    "start": "2960710",
    "end": "2967310"
  },
  {
    "text": "skip 9 and just call it C sharp X because I think that would be a much better naming for the language you",
    "start": "2967310",
    "end": "2974420"
  },
  {
    "text": "probably shows you that I've done more marketing than programming for the past years sorry ok so what's gonna come in",
    "start": "2974420",
    "end": "2980480"
  },
  {
    "text": "the next version of c-sharp and again don't be sad if they cut the features and they don't make the cutting through language I've been bitten by this a few",
    "start": "2980480",
    "end": "2986930"
  },
  {
    "text": "times before I'm really excited about a language feature getting into for instance C sharp 6 record types and this",
    "start": "2986930",
    "end": "2992930"
  },
  {
    "text": "just didn't make it into the language and IV pumped and you know getting people really excited about the features",
    "start": "2992930",
    "end": "2998090"
  },
  {
    "text": "and then they just don't make it into the language so one of the features that they're looking at and these are all",
    "start": "2998090",
    "end": "3004030"
  },
  {
    "text": "suggestions from get up so I took all the the champions and the different things they're talking about adding it to the language we can do this today we",
    "start": "3004030",
    "end": "3010600"
  },
  {
    "text": "can see we can have this negated condition if statement where we say well if shape is not a triangle or shape if",
    "start": "3010600",
    "end": "3015670"
  },
  {
    "text": "not shape you say triangle this here doesn't really read very well so what",
    "start": "3015670",
    "end": "3020980"
  },
  {
    "text": "about what changes up and say if shape is not a triangle that's nice or if not shape is a triangle I don't",
    "start": "3020980",
    "end": "3026440"
  },
  {
    "text": "like that or introduce give you key word and say on let's shape is a triangle I don't like that either I'm not trying to",
    "start": "3026440",
    "end": "3033970"
  },
  {
    "text": "convince you which one is best but this one is because we already have the keywords but",
    "start": "3033970",
    "end": "3040140"
  },
  {
    "text": "would have it's not in the language right increasing one more keyword for just one purpose doesn't make a lot of sense in this case anyways and then",
    "start": "3040140",
    "end": "3048420"
  },
  {
    "text": "we're might get some updates to the way that we can work with null so we get this way of if it's null we just return",
    "start": "3048420",
    "end": "3055319"
  },
  {
    "text": "and then if it's not we can await the task for no conditional Waits how about we simply have syntax for",
    "start": "3055319",
    "end": "3061020"
  },
  {
    "text": "saying well if bang tasks or sorry a wait bang tasks this here would then just await this if it's not know this is",
    "start": "3061020",
    "end": "3069119"
  },
  {
    "text": "an old suggestion so this here is probably gonna change to I don't know question mark double bang underscore who",
    "start": "3069119",
    "end": "3075660"
  },
  {
    "text": "knows something else the bang here says it promises that it shouldn't be no in other cases so this here should say",
    "start": "3075660",
    "end": "3081900"
  },
  {
    "text": "await this I promise task is not gonna be null so maybe should be question working and then of course we have",
    "start": "3081900",
    "end": "3088170"
  },
  {
    "text": "record types record types has been one of those things I mentioned I hope to get this into c-sharp six when they",
    "start": "3088170",
    "end": "3094349"
  },
  {
    "text": "started writing the c-sharp compilers this is what's one of the features they talked about introducing especially",
    "start": "3094349",
    "end": "3100920"
  },
  {
    "text": "since it made a lot easier to use features with a Roslin project so record types is a way for us to kind of make",
    "start": "3100920",
    "end": "3106680"
  },
  {
    "text": "this a little bit better as well as making the code that we write a little bit shorter so in this case here I can",
    "start": "3106680",
    "end": "3112770"
  },
  {
    "text": "convert my triangle of shape with all these different properties in the constructor into this thing here that I call a record that's really good",
    "start": "3112770",
    "end": "3120750"
  },
  {
    "text": "so what benefits do we get out of this well it introduces a whole lot of things under the hood imagine the case I have",
    "start": "3120750",
    "end": "3127920"
  },
  {
    "text": "this simple one-liner that says that says what I had here at the other slide and then it just introduces the",
    "start": "3127920",
    "end": "3134609"
  },
  {
    "text": "constructor it makes everything immutable because you can't change a mean C will get true equality checks",
    "start": "3134609",
    "end": "3140849"
  },
  {
    "text": "where you can check the values against each other it doesn't have to check just a reference will get things like the",
    "start": "3140849",
    "end": "3146910"
  },
  {
    "text": "width method which allows us to work with this in a true immutable manner so you can say I want to get a new version",
    "start": "3146910",
    "end": "3152819"
  },
  {
    "text": "of my triangle as a totally new object but with a little bit changed value and",
    "start": "3152819",
    "end": "3158609"
  },
  {
    "text": "of course then we get the deconstructs you can use it with pattern matching now the reason that this hasn't made it to",
    "start": "3158609",
    "end": "3163740"
  },
  {
    "text": "the language is because it's really hard to implement getting this implemented it E is easy but making it work for",
    "start": "3163740",
    "end": "3169410"
  },
  {
    "text": "inheritance is really hard if you have to mutable objects then you inherit from one of them it's gonna be",
    "start": "3169410",
    "end": "3175800"
  },
  {
    "text": "costly interesting side effects so I would suggest just don't allow inheritance from record types but they",
    "start": "3175800",
    "end": "3183150"
  },
  {
    "text": "just want to make it perfect for all the different cases so this might make it into a future version of c-sharp",
    "start": "3183150",
    "end": "3188550"
  },
  {
    "text": "hopefully and then declaration expressions I mentioned this I would like to change the way that we can",
    "start": "3188550",
    "end": "3194820"
  },
  {
    "text": "initialize that character or the line of text that we saw in the the demo that we had so just move this into the context",
    "start": "3194820",
    "end": "3201450"
  },
  {
    "text": "instead just make the code flow a little bit better and of course why not make an",
    "start": "3201450",
    "end": "3207900"
  },
  {
    "text": "update to dictionaries as well this here is a way for us to do a collection initialize our own dictionaries but what",
    "start": "3207900",
    "end": "3213900"
  },
  {
    "text": "about we can make this look more like Python that would be great yeah it looks",
    "start": "3213900",
    "end": "3220200"
  },
  {
    "text": "really good right so if you like these things you should go on to get up and just plus one and hopefully someone's",
    "start": "3220200",
    "end": "3226620"
  },
  {
    "text": "gonna build them I don't think everyone is loving this feature but I think it's a great addition just makes the code",
    "start": "3226620",
    "end": "3231990"
  },
  {
    "text": "more readable and in a little bit more nice alright so a few more features that I don't have code for type classes is",
    "start": "3231990",
    "end": "3238860"
  },
  {
    "text": "one of the features that we might be getting into the language the reason I didn't I don't have a slide for it is because I'm not smart enough to explain",
    "start": "3238860",
    "end": "3245040"
  },
  {
    "text": "it simple as that and then we don'twe struck members parents of span of T now I don't understand",
    "start": "3245040",
    "end": "3250800"
  },
  {
    "text": "so span of T say sequence of an array right it's a sequence of bytes so how",
    "start": "3250800",
    "end": "3256530"
  },
  {
    "text": "would params of span of T work I don't know how that would it would just be a longer a right right and then we might",
    "start": "3256530",
    "end": "3263760"
  },
  {
    "text": "get an that is equal and or or II sequel assignment operators just like the no equalizing assignment where you say",
    "start": "3263760",
    "end": "3269910"
  },
  {
    "text": "question mark question mark equals this this here would somehow figure out a condition and just set your variable",
    "start": "3269910",
    "end": "3275820"
  },
  {
    "text": "based on something I don't know how that would work but they were looking into adding these things as well so with all",
    "start": "3275820",
    "end": "3283320"
  },
  {
    "text": "that being said like in c-sharp one through seven points we've got all these really interesting features and",
    "start": "3283320",
    "end": "3289830"
  },
  {
    "text": "especially past c-sharp six we've seen a huge amount of features being added due to the fact that they introduced a lot",
    "start": "3289830",
    "end": "3295830"
  },
  {
    "text": "of the Rossum project you know we have improvements the async in it wait then we even have the a so you can await",
    "start": "3295830",
    "end": "3301080"
  },
  {
    "text": "capabilities which are now also make it into languages like JavaScript so not only is the c-sharp team looking at",
    "start": "3301080",
    "end": "3307099"
  },
  {
    "text": "other languages like Auckland and Swift and Java and JavaScript but they're also helping other programming languages",
    "start": "3307099",
    "end": "3314270"
  },
  {
    "text": "becoming better by introducing things that are working really well in c-sharp",
    "start": "3314270",
    "end": "3320349"
  },
  {
    "text": "so your question is the proposals that I've talked about are they endorsed by the c-sharp language team so that's a",
    "start": "3332319",
    "end": "3340220"
  },
  {
    "text": "very good question and what happens is that you can put up one of these suggestions or an issue on the Rosslyn",
    "start": "3340220",
    "end": "3345319"
  },
  {
    "text": "project and what happens is it goes through language design meetings and they talk about them internally as well",
    "start": "3345319",
    "end": "3350660"
  },
  {
    "text": "so if a lot of people from the community really wants a language feature they're gonna vote on it and then it goes",
    "start": "3350660",
    "end": "3355910"
  },
  {
    "text": "through a process of where they internally talk about how would this work in the compiler and then it translates into one of these champions I",
    "start": "3355910",
    "end": "3362779"
  },
  {
    "text": "think that's the word process that they were using so it is people internally on Microsoft that work together with the",
    "start": "3362779",
    "end": "3369589"
  },
  {
    "text": "community and the c-sharp specification team to make sure that we don't introduce things that shouldn't be in",
    "start": "3369589",
    "end": "3375559"
  },
  {
    "text": "the language yeah they're all champions so you're asking if all the things that",
    "start": "3375559",
    "end": "3382010"
  },
  {
    "text": "I've talked about these champions yes they're all in the champions list there might be one or two that have been from",
    "start": "3382010",
    "end": "3389420"
  },
  {
    "text": "other places as well or on the Ralston repository where they're also talking about features but there's nothing in",
    "start": "3389420",
    "end": "3394579"
  },
  {
    "text": "here that's that's from a community member that's not on the rosslyn or",
    "start": "3394579",
    "end": "3399650"
  },
  {
    "text": "c-sharp language repository where it's been talked about internally so we got",
    "start": "3399650",
    "end": "3404869"
  },
  {
    "text": "all of these features prior to c-sharp aidan with c-sharp aid we get pretty much even more features we get kind of",
    "start": "3404869",
    "end": "3410960"
  },
  {
    "text": "the same amount of really amazing additions to the language and I think it's a really interesting time to see",
    "start": "3410960",
    "end": "3416150"
  },
  {
    "text": "that c-sharp takes shape from other languages and takes shape of how we build applications now versus how we",
    "start": "3416150",
    "end": "3423500"
  },
  {
    "text": "build applications 20 years ago it's a huge different how a huge difference how",
    "start": "3423500",
    "end": "3428779"
  },
  {
    "text": "we work with with the web how we work with databases and all of that and the language evolves into that with a",
    "start": "3428779",
    "end": "3435020"
  },
  {
    "text": "sinking a weight and with things like record types which is really good for when you're generating code and so forth",
    "start": "3435020",
    "end": "3440880"
  },
  {
    "text": "so I think my favorite feature is being added now to see her babies the pattern matching improvements in the way that",
    "start": "3440880",
    "end": "3446620"
  },
  {
    "text": "you do switch expressions having worked a lot with Conklin recently I found that it just makes the application a lot more",
    "start": "3446620",
    "end": "3453700"
  },
  {
    "text": "readable the code is a lot easier to work with if you don't make it hard on yourself and do things like I did with",
    "start": "3453700",
    "end": "3459010"
  },
  {
    "text": "the boolean right so you're asking if he",
    "start": "3459010",
    "end": "3464290"
  },
  {
    "text": "feels more like functional programming I haven't done much of functional programming so I couldn't say but maybe someone from from an F sharp experience",
    "start": "3464290",
    "end": "3471130"
  },
  {
    "text": "no yes so you're saying that it seems",
    "start": "3471130",
    "end": "3480070"
  },
  {
    "text": "like c-sharp is taking the approach of being more functional and that's a very good point and over the years that's",
    "start": "3480070",
    "end": "3485740"
  },
  {
    "text": "been the case as well they've taken things from imperative functional and declarative programming languages that's why language integrated query",
    "start": "3485740",
    "end": "3492580"
  },
  {
    "text": "made it into c-sharp as well so they took sequel into c-sharp right and now they're taking F sharp stuff into the",
    "start": "3492580",
    "end": "3498130"
  },
  {
    "text": "language as well just making it work for anyone and although I like writing the switch expressions and more functional",
    "start": "3498130",
    "end": "3504490"
  },
  {
    "text": "approaches you can still use the traditional approaches and don't use that so well a problem with this it's",
    "start": "3504490",
    "end": "3511870"
  },
  {
    "text": "that we'll have a lot of different permutations of the same type of application the code will look very much",
    "start": "3511870",
    "end": "3516970"
  },
  {
    "text": "different than what it could do in the past all right so that's all of the features in c-sharp 1 through 8 pretty",
    "start": "3516970",
    "end": "3524290"
  },
  {
    "text": "much so it's been a real pleasure being here if you have any questions after the talk just ping me on Twitter come up",
    "start": "3524290",
    "end": "3531070"
  },
  {
    "text": "here and talk to me I'll be around the conference and hopefully I'll see you next year as well and don't forget on",
    "start": "3531070",
    "end": "3536740"
  },
  {
    "text": "your to vote on your way out ah got a question so you're saying that",
    "start": "3536740",
    "end": "3552850"
  },
  {
    "text": "some of the features that require you to get things into dotnet the framework or dotnet core will make it into core but",
    "start": "3552850",
    "end": "3559120"
  },
  {
    "text": "not the full framework so yes that's that I think it's true I couldn't swear",
    "start": "3559120",
    "end": "3566770"
  },
  {
    "text": "on it but things like ranges will probably be across the framework as well as as dotnet core it really depends on",
    "start": "3566770",
    "end": "3574660"
  },
  {
    "text": "if it's a runtime change or if it's a change as in how you use things in the framework so if the runtime change they",
    "start": "3574660",
    "end": "3581770"
  },
  {
    "text": "need to make like this new thing that I talked about if they need to do a change in the runtime that's that's probably",
    "start": "3581770",
    "end": "3587350"
  },
  {
    "text": "only gonna happen in darknet core but I couldn't promise you on that so you have to to look out for that alright thank",
    "start": "3587350",
    "end": "3594190"
  },
  {
    "text": "you so much for coming don't forget to vote on your way out [Applause]",
    "start": "3594190",
    "end": "3603900"
  }
]