[
  {
    "text": "good afternoon thank you very much for coming to my talk",
    "start": "3520",
    "end": "9759"
  },
  {
    "text": "so yes the title on the agenda is automate yourself out of a job with roslyn which gets people to come in",
    "start": "9840",
    "end": "17119"
  },
  {
    "text": "and then you find out that i'm not actually going to teach you how to do that so what i am going to teach and and",
    "start": "17119",
    "end": "22960"
  },
  {
    "text": "then the title that's on the slide is write code that writes code with roslyn and it's just occurred to me i've done",
    "start": "22960",
    "end": "29359"
  },
  {
    "text": "this talk a few times but it's just occurred to me that even that's not really accurate um",
    "start": "29359",
    "end": "35760"
  },
  {
    "text": "it's more write code that reads code with roslyn and then and then use that to write code",
    "start": "35760",
    "end": "44079"
  },
  {
    "text": "with c sharp but anyway let's just dive in and",
    "start": "44079",
    "end": "49520"
  },
  {
    "text": "so before we kind of kick off too much i'm going to put up",
    "start": "49520",
    "end": "54640"
  },
  {
    "text": "a visual studio if you can't see the font if you can't see the text",
    "start": "54640",
    "end": "61840"
  },
  {
    "text": "come this way a bit because i really i can't make it much big if i make it much",
    "start": "61840",
    "end": "66960"
  },
  {
    "text": "bigger then the only thing you'll be able to see is the words package reference so we're not doing that",
    "start": "66960",
    "end": "74000"
  },
  {
    "text": "okay i am mark rendall um i am a net",
    "start": "74000",
    "end": "79840"
  },
  {
    "text": "developer and uh i am the creator and maintainer of visual recode",
    "start": "79840",
    "end": "87200"
  },
  {
    "text": "more about that later i'm also just brand new announced today a",
    "start": "87200",
    "end": "93600"
  },
  {
    "text": "developer advocate for a company called polyscale so i have to mention that now",
    "start": "93600",
    "end": "99920"
  },
  {
    "text": "because if i mention that i can get them to pay me for this hour which is brilliant uh but polyscale if",
    "start": "99920",
    "end": "107119"
  },
  {
    "text": "you use um postgresql on mysql databases uh on on the web on the cloud um it's",
    "start": "107119",
    "end": "114640"
  },
  {
    "text": "like cloudflare but via database and so you can connect to your database",
    "start": "114640",
    "end": "121759"
  },
  {
    "text": "uh in an aws data center and that database might be the other side of the world in an azure data center but you're",
    "start": "121759",
    "end": "128319"
  },
  {
    "text": "still getting millisecond response times it's super awesome and i'm very excited about it",
    "start": "128319",
    "end": "134640"
  },
  {
    "text": "but that's not what this is about this is about roslyn and roslyn",
    "start": "134640",
    "end": "140480"
  },
  {
    "text": "the easiest way to describe it these days is in visual studio",
    "start": "140480",
    "end": "146400"
  },
  {
    "text": "roslyn is the thing that looks at your code and tells you you're an idiot and you're doing it wrong",
    "start": "146400",
    "end": "153360"
  },
  {
    "text": "and and offers to fix it for you if you press control dot",
    "start": "153360",
    "end": "159360"
  },
  {
    "text": "i should point out that if you have resharper installed then that's got nothing to do with",
    "start": "159360",
    "end": "166080"
  },
  {
    "text": "rosslyn at all resharper doesn't use roslyn they have their own c sharp code engine and so that's resharper that",
    "start": "166080",
    "end": "173200"
  },
  {
    "text": "tells you that you're an idiot and offers to fix your code for you",
    "start": "173200",
    "end": "178560"
  },
  {
    "text": "but if you just have vanilla visual studio or if you're using code rush code rush also uses roslyn in increasingly",
    "start": "178560",
    "end": "187040"
  },
  {
    "text": "uh no i'm not going to say that what didn't he say",
    "start": "187040",
    "end": "193200"
  },
  {
    "text": "so yeah i knew about roslyn but i hadn't really done anything with it and then uh",
    "start": "193440",
    "end": "200319"
  },
  {
    "text": "microsoft basically uh in",
    "start": "200319",
    "end": "205040"
  },
  {
    "text": "2018 2017 2018 when dot net call 3.1 came out and",
    "start": "205879",
    "end": "213599"
  },
  {
    "text": "scott hunter said the next version of.net after dot net core 3.1 will not",
    "start": "213599",
    "end": "218879"
  },
  {
    "text": "be net core 4 it will be net 5 because we're not having a net core 4 because",
    "start": "218879",
    "end": "224799"
  },
  {
    "text": "that's just too confusing even for us even microsoft",
    "start": "224799",
    "end": "230400"
  },
  {
    "text": "didn't want that that confusing a version number so they're only going to go to net5",
    "start": "230400",
    "end": "235599"
  },
  {
    "text": "by the way if any of your api if any of the stuff that you're using in the full",
    "start": "235599",
    "end": "240959"
  },
  {
    "text": "fat old fashioned net framework has not been ported over to net core it's not",
    "start": "240959",
    "end": "247439"
  },
  {
    "text": "gonna be and that included wcf and",
    "start": "247439",
    "end": "253200"
  },
  {
    "text": "that made a lot of people very unhappy and microsoft said hey if you're using",
    "start": "253200",
    "end": "258239"
  },
  {
    "text": "wcf then we recommend you go to grpc we've got a brand new implementation of grpc and it's brilliant",
    "start": "258239",
    "end": "265280"
  },
  {
    "text": "and people looked at their their solution the average solution that contains wcf has over a million lines of",
    "start": "265280",
    "end": "273680"
  },
  {
    "text": "code in it now to be fair that's because the same",
    "start": "273680",
    "end": "278720"
  },
  {
    "text": "solution contains your wcf application your windows forms application your wpf",
    "start": "278720",
    "end": "283840"
  },
  {
    "text": "application that you started to migrate from windows forms but never finished your web forms application your asp.net",
    "start": "283840",
    "end": "290880"
  },
  {
    "text": "mvc application the same thing as the wpf and winforms applications and um in",
    "start": "290880",
    "end": "297199"
  },
  {
    "text": "in some cases that i have seen this year some classic asp pages and it won't",
    "start": "297199",
    "end": "303039"
  },
  {
    "text": "build if you don't have visual basic six installed but there's some wcf code in there",
    "start": "303039",
    "end": "311360"
  },
  {
    "text": "the thing is though the wcf code the code that's actually wcf is just",
    "start": "311360",
    "end": "317280"
  },
  {
    "text": "it's a service contract and that's got some methods that call into your business logic and then it's",
    "start": "317280",
    "end": "324240"
  },
  {
    "text": "got some data contracts and those are the things that are used to send messages backwards and forwards the bit",
    "start": "324240",
    "end": "330320"
  },
  {
    "text": "of the solution that is wcf is actually very small",
    "start": "330320",
    "end": "335600"
  },
  {
    "text": "and i thought i wonder if you could just write something maybe using that roslyn thing",
    "start": "335600",
    "end": "341440"
  },
  {
    "text": "that i've heard about that analyzes your service contracts and your operation",
    "start": "341440",
    "end": "347520"
  },
  {
    "text": "contracts and your data contracts and generates the grpc protobuf",
    "start": "347520",
    "end": "354080"
  },
  {
    "text": "equivalent and so i tried that and yeah actually that's really easy and then i thought i wonder if i could",
    "start": "354080",
    "end": "361600"
  },
  {
    "text": "then also write code that maps from the grpc service implementation",
    "start": "361600",
    "end": "368800"
  },
  {
    "text": "and just calls into the old wcf service contract implementation and handles all the",
    "start": "368800",
    "end": "375440"
  },
  {
    "text": "translation between the different data contracts versus grpc messages and yeah",
    "start": "375440",
    "end": "380960"
  },
  {
    "text": "yeah turns out you can do that as well and by that point i'd kind of managed to",
    "start": "380960",
    "end": "387120"
  },
  {
    "text": "teach myself roslyn reasonably well because roslyn",
    "start": "387120",
    "end": "392400"
  },
  {
    "text": "is amazing but what it isn't is very well documented",
    "start": "392400",
    "end": "399280"
  },
  {
    "text": "um so the best way to learn roslyn is uh",
    "start": "399280",
    "end": "405440"
  },
  {
    "text": "josh varti has some blog posts which are incredibly helpful but actually the the simplest",
    "start": "405440",
    "end": "412880"
  },
  {
    "text": "way is to dive into the open source roslyn analyzers that microsoft have so all those squiggly analyzers in visual",
    "start": "412880",
    "end": "420000"
  },
  {
    "text": "studio they're mostly open source they're mostly built into roslyn rather than visual studio and so i taught",
    "start": "420000",
    "end": "425680"
  },
  {
    "text": "myself um how to roslyn uh using those code samples and i",
    "start": "425680",
    "end": "431039"
  },
  {
    "text": "thought well i'll try and kind of summarize the the key points into a talk",
    "start": "431039",
    "end": "436240"
  },
  {
    "text": "and here we all are so roslyn um",
    "start": "436240",
    "end": "442240"
  },
  {
    "text": "if you don't know sort of what roslyn actually is up until sort of the early 2010s",
    "start": "442240",
    "end": "450160"
  },
  {
    "text": "the c-sharp compiler was written in c plus and the vb.net compiler was written",
    "start": "450160",
    "end": "456319"
  },
  {
    "text": "in c plus plus and it was becoming extremely difficult to maintain it and",
    "start": "456319",
    "end": "462880"
  },
  {
    "text": "one of the kind of uh maturity signals for any programming language is",
    "start": "462880",
    "end": "469919"
  },
  {
    "text": "is the compiler for that language written in that language they call that being self-hosted",
    "start": "469919",
    "end": "475759"
  },
  {
    "text": "and nearly all languages are self-hosted like the typescript compiler is written",
    "start": "475759",
    "end": "481360"
  },
  {
    "text": "in typescript for example and the c-sharp compiler still wasn't written in c sharp and so they went we're going to",
    "start": "481360",
    "end": "487120"
  },
  {
    "text": "rewrite it in c-sharp and that will make it work better in visual studio which by then was a wpf",
    "start": "487120",
    "end": "494400"
  },
  {
    "text": "application and uh and we can do it so it'll be a compiler as a service so we can package",
    "start": "494400",
    "end": "501520"
  },
  {
    "text": "up all the different bits of the compiler the passer and the",
    "start": "501520",
    "end": "507039"
  },
  {
    "text": "syntax trees and all that sort of thing and we can distribute them on nougat and so they rewrote the c-sharp compiler in",
    "start": "507039",
    "end": "514320"
  },
  {
    "text": "c-sharp yay and they rewrote the vb.net compiler in vb.net which serves them",
    "start": "514320",
    "end": "520320"
  },
  {
    "text": "right and they put it all up on nougat and so all the roslin packages",
    "start": "520320",
    "end": "527200"
  },
  {
    "text": "most most of the roster packages start with microsoft code analysis",
    "start": "527200",
    "end": "533640"
  },
  {
    "text": "am i hissing why am i hissing",
    "start": "534080",
    "end": "538800"
  },
  {
    "text": "this noise okay there we go that's better thank you very",
    "start": "539680",
    "end": "545760"
  },
  {
    "text": "much now i'm going to go",
    "start": "545760",
    "end": "552959"
  },
  {
    "text": "just to wind him up sorry mate thank you",
    "start": "553519",
    "end": "559519"
  },
  {
    "text": "so yes uh and we've got uh microsoft.codeanalysis.csharp.workspaces",
    "start": "560080",
    "end": "565880"
  },
  {
    "text": "and workspaces is is your kind of top level thing so your workspace contains",
    "start": "567120",
    "end": "572480"
  },
  {
    "text": "your solution and your solution contains your project and your projects contain",
    "start": "572480",
    "end": "577680"
  },
  {
    "text": "your documents and your documents contain code and so",
    "start": "577680",
    "end": "583120"
  },
  {
    "text": "the thing that you nearly always need to bring in before anything else is microsoft.codeanalysis.com",
    "start": "583120",
    "end": "590600"
  },
  {
    "text": "and then there's also",
    "start": "592000",
    "end": "595920"
  },
  {
    "text": "microsoft.codeanalysis.workspaces.various things and there's an ms build and there's an ad hoc",
    "start": "597080",
    "end": "602880"
  },
  {
    "text": "and there's a visual studio one but that only works if you're working on a visual studio extension",
    "start": "602880",
    "end": "609120"
  },
  {
    "text": "the ms build one is the most useful one because that's the one where you can say hey see that dot sln file there",
    "start": "609120",
    "end": "616160"
  },
  {
    "text": "open that and do your thing and so that's what we're going to be looking at today",
    "start": "616160",
    "end": "622480"
  },
  {
    "text": "we also have microsoft.build.locator which",
    "start": "622480",
    "end": "627760"
  },
  {
    "text": "finds the right version of ms build that is installed on your machine",
    "start": "627760",
    "end": "634160"
  },
  {
    "text": "so every time you install the net sdk the modern.net sdk so net 6 or net core",
    "start": "634160",
    "end": "640720"
  },
  {
    "text": "3.1 you get a version of ms build installed along with that sdk every time",
    "start": "640720",
    "end": "646399"
  },
  {
    "text": "you install visual studio you get two or three versions of ms build installed",
    "start": "646399",
    "end": "652079"
  },
  {
    "text": "along with that and you also have the ms build that is compiled using.net core or",
    "start": "652079",
    "end": "659279"
  },
  {
    "text": "net sex and you have the ms build that is compiled using net 4.7.2",
    "start": "659279",
    "end": "666480"
  },
  {
    "text": "and none of these things work together and so what microsoft.build.locator is supposed to",
    "start": "666480",
    "end": "672240"
  },
  {
    "text": "do is find the right one that's going to work for your application so if you",
    "start": "672240",
    "end": "678000"
  },
  {
    "text": "include microsoft.build.locator in a.net 6 application it will find the net 6",
    "start": "678000",
    "end": "684399"
  },
  {
    "text": "version of ms build if you put it in a net framework application it will find the net framework version",
    "start": "684399",
    "end": "692079"
  },
  {
    "text": "if it gets that wrong everything explodes and your projects don't build and nothing works",
    "start": "692079",
    "end": "697920"
  },
  {
    "text": "and then for reasons that i'm really not entirely clear on you also need to bring in new get.project model",
    "start": "697920",
    "end": "705200"
  },
  {
    "text": "just you just do so workspaces",
    "start": "707440",
    "end": "712959"
  },
  {
    "text": "go away mr insect that's my screen workspaces are the top level thing and",
    "start": "712959",
    "end": "718560"
  },
  {
    "text": "you can essentially think of your workspace as being like a virtual invisible visual studio",
    "start": "718560",
    "end": "725040"
  },
  {
    "text": "um that's that's that kind of top level container of all the things and",
    "start": "725040",
    "end": "731440"
  },
  {
    "text": "within your so the types of workspace you have ad hoc workspace",
    "start": "731440",
    "end": "737040"
  },
  {
    "text": "and this is one where you can just go create an ad hoc workspace add a pretend",
    "start": "737040",
    "end": "742639"
  },
  {
    "text": "solution to it add a pretend project to that solution add a pretend document to that project",
    "start": "742639",
    "end": "748480"
  },
  {
    "text": "and you can muck about with it ad hoc workspaces are fantastic for writing unit tests and entirely and for sort of",
    "start": "748480",
    "end": "755600"
  },
  {
    "text": "messing about and experimenting and entirely useless for anything else ms",
    "start": "755600",
    "end": "761120"
  },
  {
    "text": "build workspace is the one that you'll be using the majority of the time unless you are actually using the visual studio",
    "start": "761120",
    "end": "768000"
  },
  {
    "text": "sdk to write an extension in which case you get the visual studio workspace which is almost identical to the ms",
    "start": "768000",
    "end": "774639"
  },
  {
    "text": "build workspace so your workspace has a solution and your solution has a",
    "start": "774639",
    "end": "781120"
  },
  {
    "text": "one or more projects and your projects have documents and not all of those documents are c-sharp files they could",
    "start": "781120",
    "end": "788240"
  },
  {
    "text": "be json files so your appsettings.json that's the document",
    "start": "788240",
    "end": "793839"
  },
  {
    "text": "and so we have to check when we're going through documents to make sure that they are actually c-sharp documents",
    "start": "793839",
    "end": "801839"
  },
  {
    "text": "so for ms build we have to use microsoft.build.locator",
    "start": "802480",
    "end": "807920"
  },
  {
    "text": "and we install that package and then the first thing we do",
    "start": "807920",
    "end": "813600"
  },
  {
    "text": "in our program and i mean literally like class",
    "start": "813600",
    "end": "819040"
  },
  {
    "text": "program main ms build locator dot register defaults",
    "start": "819040",
    "end": "825440"
  },
  {
    "text": "don't let it do anything else at all that's the first thing you do because",
    "start": "825440",
    "end": "830720"
  },
  {
    "text": "otherwise nine times out of ten it will find the wrong one and then you get your ms build workspace",
    "start": "830720",
    "end": "837760"
  },
  {
    "text": "and then you can start loading things into it",
    "start": "837760",
    "end": "842839"
  },
  {
    "text": "so let's jump over to the code quickly and i will demonstrate that so here",
    "start": "843920",
    "end": "851279"
  },
  {
    "text": "we have our program.cs",
    "start": "851279",
    "end": "855000"
  },
  {
    "text": "and we call ms build locator dot register defaults and then we create a workspace using ms",
    "start": "856720",
    "end": "865040"
  },
  {
    "text": "build workspace.create and then we set a flag to say load",
    "start": "865040",
    "end": "871279"
  },
  {
    "text": "metadata for reference project equals true that funnily enough is the thing that needs that new get.project model",
    "start": "871279",
    "end": "878320"
  },
  {
    "text": "because referenced projects includes nuget packages so if you don't have that load metadata",
    "start": "878320",
    "end": "884079"
  },
  {
    "text": "for reference projects then it'll only know about your source code it won't know about and stuff that's in the",
    "start": "884079",
    "end": "891160"
  },
  {
    "text": "baseclasslibraryfor.net it won't know about anything outside of that then we add an event handler to",
    "start": "891160",
    "end": "898240"
  },
  {
    "text": "workspace failed because when the compilation fails that's where it goes",
    "start": "898240",
    "end": "904160"
  },
  {
    "text": "because when we say var solution equals await workspace.open solution async",
    "start": "904160",
    "end": "909920"
  },
  {
    "text": "that will always work it'll always give you a solution back it's just that solution might not have any projects in",
    "start": "909920",
    "end": "916240"
  },
  {
    "text": "it all those projects might not have any documents in it because if a document that's supposed to compile doesn't",
    "start": "916240",
    "end": "922639"
  },
  {
    "text": "compile it won't be in the project but the only way you can know about that is",
    "start": "922639",
    "end": "929360"
  },
  {
    "text": "if you've added an event handler for workspace failed all of this",
    "start": "929360",
    "end": "935440"
  },
  {
    "text": "all of this i learned painfully one thing at a time",
    "start": "935440",
    "end": "941199"
  },
  {
    "text": "sometimes in production yes",
    "start": "941199",
    "end": "946639"
  },
  {
    "text": "so the",
    "start": "948560",
    "end": "954279"
  },
  {
    "text": "unit of information in roslyn is the syntax tree",
    "start": "954639",
    "end": "960399"
  },
  {
    "text": "and this is an abstract representation of your code",
    "start": "960399",
    "end": "967440"
  },
  {
    "text": "so we have a syntax tree a document if it is a compilable document we'll be",
    "start": "967600",
    "end": "973839"
  },
  {
    "text": "able to give you a syntax tree and that syntax tree",
    "start": "973839",
    "end": "979360"
  },
  {
    "text": "contains syntax nodes and it's essentially just like a dom",
    "start": "979360",
    "end": "985440"
  },
  {
    "text": "for your code so you have a root node and then that has child nodes and each",
    "start": "985440",
    "end": "990880"
  },
  {
    "text": "of those nodes have child nodes and some of these nodes will be things like a",
    "start": "990880",
    "end": "996079"
  },
  {
    "text": "declaration of a class or a declaration of a property and some of these nodes will be an opening brace",
    "start": "996079",
    "end": "1004320"
  },
  {
    "text": "or a semicolon it goes right down to that sort of level",
    "start": "1004320",
    "end": "1010880"
  },
  {
    "text": "and then we have tokens within that so a token is something like an identifier",
    "start": "1010880",
    "end": "1017600"
  },
  {
    "text": "so a node might say i am a property declaration syntax and within that node",
    "start": "1017600",
    "end": "1025120"
  },
  {
    "text": "there is a token which is the identifier which is the name of the property",
    "start": "1025120",
    "end": "1031600"
  },
  {
    "text": "or it could be a semicolon then we have syntax trivia",
    "start": "1031600",
    "end": "1036839"
  },
  {
    "text": "because we also have white space and we have",
    "start": "1036839",
    "end": "1043038"
  },
  {
    "text": "commas in lists of attributes and we have comments and documentation comments",
    "start": "1043039",
    "end": "1050559"
  },
  {
    "text": "anything that the compiler doesn't actually compile into intermediate language is called trivia",
    "start": "1050559",
    "end": "1059200"
  },
  {
    "text": "and if you don't put trivia in then all your code will be generated as one great big long string and it'll be",
    "start": "1059200",
    "end": "1066720"
  },
  {
    "text": "completely unreadable like cobalt",
    "start": "1066720",
    "end": "1070720"
  },
  {
    "text": "there's a brilliant thing built into visual studio has he got the thing installed into visual studio he asks",
    "start": "1073280",
    "end": "1078480"
  },
  {
    "text": "himself we go to view here and we go to other windows",
    "start": "1078480",
    "end": "1084640"
  },
  {
    "text": "and syntax visualizer",
    "start": "1084640",
    "end": "1088160"
  },
  {
    "text": "very real chance you're not going to be able to see this but so",
    "start": "1090960",
    "end": "1096240"
  },
  {
    "text": "this is the uh the best way to learn about",
    "start": "1096240",
    "end": "1102880"
  },
  {
    "text": "what syntax trees look like and how they relate to actual code so if you install",
    "start": "1102880",
    "end": "1110400"
  },
  {
    "text": "the visual studio sdk tools and the",
    "start": "1110400",
    "end": "1115600"
  },
  {
    "text": "compiler tools as part of your visual studio setup you can go in and modify it and so forth one of the things it will",
    "start": "1115600",
    "end": "1122160"
  },
  {
    "text": "install for you is this syntax visualizer and then you can click on bits of your code",
    "start": "1122160",
    "end": "1128880"
  },
  {
    "text": "in your editor window here and it will jump to that bit of code",
    "start": "1128880",
    "end": "1134960"
  },
  {
    "text": "over in the syntax tree and so you can see here",
    "start": "1134960",
    "end": "1140160"
  },
  {
    "text": "if we go up to the top we've got a using directive there and that using directive consists of the",
    "start": "1140160",
    "end": "1147120"
  },
  {
    "text": "using keyword and then it's got some white space after",
    "start": "1147120",
    "end": "1152160"
  },
  {
    "text": "it for just that single space there and then it has an identifier name which is an",
    "start": "1152160",
    "end": "1158400"
  },
  {
    "text": "identifier token which is system and then it has the semicolon token",
    "start": "1158400",
    "end": "1164880"
  },
  {
    "text": "and end of line trivia or new line trivia okay and so you can go bouncing around",
    "start": "1164880",
    "end": "1171679"
  },
  {
    "text": "so if you wanted to say well i need to find the place in my code where somebody has",
    "start": "1171679",
    "end": "1177280"
  },
  {
    "text": "called new sequel connection because i want to check to see if they've called using",
    "start": "1177280",
    "end": "1183600"
  },
  {
    "text": "when they create their sequel connection because i thought it might be a good idea not to leak memory all over the",
    "start": "1183600",
    "end": "1188720"
  },
  {
    "text": "place more on that at the party this evening",
    "start": "1188720",
    "end": "1193840"
  },
  {
    "text": "yeah you can essentially look at the code that you want to be able to find and in the syntax",
    "start": "1196000",
    "end": "1202960"
  },
  {
    "text": "visualizer you can click on it and then you can read through everything in there and",
    "start": "1202960",
    "end": "1209600"
  },
  {
    "text": "find out where that would actually be in the abstract representation that's literally all it's for",
    "start": "1209600",
    "end": "1217919"
  },
  {
    "text": "so that's a brilliant tool um so just to restate it if you go looking for that and it's not",
    "start": "1219200",
    "end": "1225440"
  },
  {
    "text": "there you need to install the sdk tools and the compiler toolkit as part of your",
    "start": "1225440",
    "end": "1230559"
  },
  {
    "text": "visual studio setup so",
    "start": "1230559",
    "end": "1235760"
  },
  {
    "text": "you've got your syntax tree loaded in and there are uh",
    "start": "1235760",
    "end": "1241200"
  },
  {
    "text": "two main ways that you can work with that syntax tree and the simplest one is",
    "start": "1241200",
    "end": "1247200"
  },
  {
    "text": "that it has a link api so if you've used link to xml where you say",
    "start": "1247200",
    "end": "1253919"
  },
  {
    "text": "element.elements and maybe give it a name and then you can for reach through those and you can do select and where",
    "start": "1254039",
    "end": "1260559"
  },
  {
    "text": "and of type and all this sort of stuff and it's exactly the same with a roslin",
    "start": "1260559",
    "end": "1266640"
  },
  {
    "text": "syntax tree so i can say node.descendant nodes dot of type class declaration",
    "start": "1266640",
    "end": "1272480"
  },
  {
    "text": "syntax and that if i do that from the root of a document it will go through and it will find all",
    "start": "1272480",
    "end": "1279919"
  },
  {
    "text": "instances of public class or internal class inside that document",
    "start": "1279919",
    "end": "1287520"
  },
  {
    "text": "ideally it will only find one because you should only have one class",
    "start": "1287520",
    "end": "1292720"
  },
  {
    "text": "declaration syntax in your application",
    "start": "1292720",
    "end": "1298480"
  },
  {
    "text": "however i have metrics i have i have metrics that that show at",
    "start": "1298480",
    "end": "1304880"
  },
  {
    "text": "least one application that my tools been used with that had one project that had",
    "start": "1304880",
    "end": "1310320"
  },
  {
    "text": "one document that had over 100 classes all in the same document",
    "start": "1310320",
    "end": "1316559"
  },
  {
    "text": "and the person when it did its thing and it copied those classes over to a new solution it",
    "start": "1316559",
    "end": "1323120"
  },
  {
    "text": "split them all into separate so a class file per class and the customer reported",
    "start": "1323120",
    "end": "1330159"
  },
  {
    "text": "that as a bug welcome to my world",
    "start": "1330159",
    "end": "1336320"
  },
  {
    "text": "so yeah descendant nodes uh so that's not the same as child knows there's a child modes which goes get everything at",
    "start": "1336960",
    "end": "1343200"
  },
  {
    "text": "this level descendant modes is all of them go down",
    "start": "1343200",
    "end": "1348400"
  },
  {
    "text": "through the entire tree and just find me all the ones that are of the type class declaration syntax",
    "start": "1348400",
    "end": "1355280"
  },
  {
    "text": "so let's take a look at what this looks like",
    "start": "1355280",
    "end": "1360880"
  },
  {
    "text": "so here we've got a syntax query demo so we do this open solution here",
    "start": "1360880",
    "end": "1369039"
  },
  {
    "text": "and we go to list async",
    "start": "1369039",
    "end": "1373480"
  },
  {
    "text": "and we get our solution at the top level there and we say for each um",
    "start": "1376159",
    "end": "1382000"
  },
  {
    "text": "we're going to say solution.projects.select many and we're going to say um",
    "start": "1382000",
    "end": "1390159"
  },
  {
    "text": "project dot documents and then we're going to say",
    "start": "1390159",
    "end": "1395360"
  },
  {
    "text": "await document.getsyntax root async we say if root is null continue because",
    "start": "1395360",
    "end": "1401760"
  },
  {
    "text": "that's if it doesn't return a syntax root then it means either the compiler wasn't able to make sense",
    "start": "1401760",
    "end": "1408320"
  },
  {
    "text": "of that for reasons probably to do with it having loaded the wrong ms build",
    "start": "1408320",
    "end": "1413760"
  },
  {
    "text": "or it's not a c-sharp document or a vb document if it's neither of those two",
    "start": "1413760",
    "end": "1418960"
  },
  {
    "text": "things won't work with f sharp there's no rosalind for f-sharp that's a whole different set of tools and i don't know them",
    "start": "1418960",
    "end": "1425520"
  },
  {
    "text": "and then we can say for each type declaration syntax in root dot",
    "start": "1425520",
    "end": "1430799"
  },
  {
    "text": "descendant nodes dot of type base type declaration",
    "start": "1430799",
    "end": "1438400"
  },
  {
    "text": "syntax so class declaration syntax and struct declaration syntax and interface",
    "start": "1439120",
    "end": "1446240"
  },
  {
    "text": "declaration syntax and enum and delegate",
    "start": "1446240",
    "end": "1451600"
  },
  {
    "text": "and have i forgotten anything in c sharp that types at the top",
    "start": "1451600",
    "end": "1456840"
  },
  {
    "text": "level oh record now yes see that's i don't forgotten that i'm",
    "start": "1456840",
    "end": "1462159"
  },
  {
    "text": "just still living in 2018. um so yes that will find all of those uh",
    "start": "1462159",
    "end": "1469279"
  },
  {
    "text": "all the things that come from that and then from there we can get the name space declaration",
    "start": "1469279",
    "end": "1476159"
  },
  {
    "text": "syntax so we can go navigate back up the tree by saying first ancestor or self",
    "start": "1476159",
    "end": "1482720"
  },
  {
    "text": "and so go back up the tree until we find something that is a namespace declaration syntax",
    "start": "1482720",
    "end": "1488559"
  },
  {
    "text": "and then from the type declaration syntax we can get the identifier.txt which is just the name of the type",
    "start": "1488559",
    "end": "1495200"
  },
  {
    "text": "and from the namespace declaration syntax might not have found one might be the root file might just be the",
    "start": "1495200",
    "end": "1501240"
  },
  {
    "text": "program.cs from a net 6 application in which case it won't find a program class because",
    "start": "1501240",
    "end": "1506799"
  },
  {
    "text": "weird things are happening there and don't get me started but if it does find it then it'll give you that there and then it'll do",
    "start": "1506799",
    "end": "1513279"
  },
  {
    "text": "console.writeline namespacename.typename and so if i switch over to",
    "start": "1513279",
    "end": "1520240"
  },
  {
    "text": "my powershell here and i make that a bit bigger there we go",
    "start": "1520240",
    "end": "1528480"
  },
  {
    "text": "and i do net run and it embarrasses me by oh no it",
    "start": "1528480",
    "end": "1535279"
  },
  {
    "text": "doesn't next time when i've changed it and it has to build that it'll tell me i've done something wrong and i don't care",
    "start": "1535279",
    "end": "1541760"
  },
  {
    "text": "so we can see here that we've got a sample.program and a sample.library.greater",
    "start": "1541760",
    "end": "1547000"
  },
  {
    "text": "thank you very much good night uh no so that is one way",
    "start": "1547039",
    "end": "1553279"
  },
  {
    "text": "to to navigate through",
    "start": "1553279",
    "end": "1558240"
  },
  {
    "text": "your syntax tree using roslyn but that's um",
    "start": "1558960",
    "end": "1566158"
  },
  {
    "text": "it can get quite hairy sort of writing all those queries and where clauses and",
    "start": "1566320",
    "end": "1572080"
  },
  {
    "text": "and whatever else and also it's not the most efficient approach to doing this",
    "start": "1572080",
    "end": "1578960"
  },
  {
    "text": "and one of the things that you can do with roslyn that we'll look at at the end of the talk is you can create your own",
    "start": "1578960",
    "end": "1584799"
  },
  {
    "text": "visual studio analyzers and code fixes and when you're doing that",
    "start": "1584799",
    "end": "1590320"
  },
  {
    "text": "essentially your analyzer is running kind of like every keystroke and so you want it to be fast and the link api is",
    "start": "1590320",
    "end": "1597520"
  },
  {
    "text": "not the fast way of doing this so this is great for something that's sort of analyzing code on check-in or",
    "start": "1597520",
    "end": "1604320"
  },
  {
    "text": "rewriting wcf as grpc or whatever it might be but if you want something that's a little",
    "start": "1604320",
    "end": "1610240"
  },
  {
    "text": "bit more performant and easier to work with",
    "start": "1610240",
    "end": "1615840"
  },
  {
    "text": "then there is the c-sharp syntax walker so this is the visitor pattern",
    "start": "1615840",
    "end": "1623440"
  },
  {
    "text": "except i hate calling it that because there's another class called c-sharp syntax visitor and you don't want to use",
    "start": "1623440",
    "end": "1630240"
  },
  {
    "text": "that one you want to use c-sharp syntax walker c-sharp syntax walker",
    "start": "1630240",
    "end": "1635760"
  },
  {
    "text": "you give it a syntax node like the root syntax node from the document and you",
    "start": "1635760",
    "end": "1641440"
  },
  {
    "text": "say there you go visit that and what you're actually saying is walk that and it will go",
    "start": "1641440",
    "end": "1647039"
  },
  {
    "text": "through all the nodes and then it will call visit class declaration every time it",
    "start": "1647039",
    "end": "1653279"
  },
  {
    "text": "finds a class declaration syntax mode and it will call visit interface",
    "start": "1653279",
    "end": "1658640"
  },
  {
    "text": "declaration and so forth that is the visitor pattern",
    "start": "1658640",
    "end": "1664080"
  },
  {
    "text": "c sharp syntax visitor will only walk to one level",
    "start": "1664080",
    "end": "1669360"
  },
  {
    "text": "um as soon as it hits something it'll go i found it and now i'm stopping",
    "start": "1669360",
    "end": "1674559"
  },
  {
    "text": "which isn't really the visitor pattern as i understand it so the one that you want",
    "start": "1674559",
    "end": "1679679"
  },
  {
    "text": "is c-sharp syntax walker and so we have a demonstration of c-sharp syntax walker",
    "start": "1679679",
    "end": "1686880"
  },
  {
    "text": "and for some reason",
    "start": "1686880",
    "end": "1693520"
  },
  {
    "text": "we've used syntax visitor",
    "start": "1694880",
    "end": "1699520"
  },
  {
    "text": "i'm going to rename that just because",
    "start": "1704720",
    "end": "1709240"
  },
  {
    "text": "that's terrible there we go syntax walker demo much better",
    "start": "1712399",
    "end": "1717840"
  },
  {
    "text": "right so in here we create a new list types",
    "start": "1717840",
    "end": "1723919"
  },
  {
    "text": "walker and then we have our for reach through our documents and and everything else",
    "start": "1723919",
    "end": "1728960"
  },
  {
    "text": "and then we call this walker dot visit and if i go to my list types walker",
    "start": "1728960",
    "end": "1734320"
  },
  {
    "text": "you can see here that we have visit class declaration",
    "start": "1734320",
    "end": "1739360"
  },
  {
    "text": "and visit interface declaration and then we have this write method down here that",
    "start": "1739360",
    "end": "1744480"
  },
  {
    "text": "essentially does the same thing as the link code was doing",
    "start": "1744480",
    "end": "1751039"
  },
  {
    "text": "the important thing here is that when i override these methods",
    "start": "1751039",
    "end": "1758159"
  },
  {
    "text": "i have to call that base method if i don't call that base method then it",
    "start": "1758159",
    "end": "1764480"
  },
  {
    "text": "stops so if there's a class declaration nested inside my class declaration it won't",
    "start": "1764480",
    "end": "1770960"
  },
  {
    "text": "find it so what that base method does is essentially say and continue walking",
    "start": "1770960",
    "end": "1778799"
  },
  {
    "text": "so and this is this is one of those things where i thought i should do a talk because",
    "start": "1778799",
    "end": "1784399"
  },
  {
    "text": "that's not intuitive and um if you go on to microsoft docs and you",
    "start": "1784399",
    "end": "1790480"
  },
  {
    "text": "look at the documentation for visit class declaration it says visits a class declaration",
    "start": "1790480",
    "end": "1797039"
  },
  {
    "text": "and that's it and seriously it's it's they um i love the ruslin team they've built",
    "start": "1797039",
    "end": "1804240"
  },
  {
    "text": "something amazing and i wouldn't have been able to do a bunch of the stuff that i've done without them and i",
    "start": "1804240",
    "end": "1809279"
  },
  {
    "text": "wouldn't be here giving this talk but they use bloody ghost stock to generate their documentation",
    "start": "1809279",
    "end": "1814960"
  },
  {
    "text": "and yeah so you have to call that base method um and this is this is fantastic because",
    "start": "1814960",
    "end": "1822240"
  },
  {
    "text": "this essentially let's just do a control shift s and",
    "start": "1822240",
    "end": "1827679"
  },
  {
    "text": "so if i go out to here and do dot net run",
    "start": "1827679",
    "end": "1832080"
  },
  {
    "text": "there we go got some build warnings and exactly the same thing happens um",
    "start": "1834640",
    "end": "1841200"
  },
  {
    "text": "and it took seven seconds but that included the build um so yeah exactly the same thing you just",
    "start": "1841200",
    "end": "1846960"
  },
  {
    "text": "have to trust me when i say that it used less memory and less cpu to do that and therefore it",
    "start": "1846960",
    "end": "1853919"
  },
  {
    "text": "is better okay",
    "start": "1853919",
    "end": "1858880"
  },
  {
    "text": "so we can walk syntax and you can literally just kind of do uh",
    "start": "1860880",
    "end": "1868399"
  },
  {
    "text": "use intellisense and you can see um if you put syntax it'll just show you",
    "start": "1868399",
    "end": "1873600"
  },
  {
    "text": "all the types that end in syntax which is basically everything um i actually",
    "start": "1873600",
    "end": "1880399"
  },
  {
    "text": "learned i can't remember what it was but i distinctly remember i learned that a c-sharp feature existed",
    "start": "1880399",
    "end": "1886480"
  },
  {
    "text": "because i saw syntax for it when i was working with roslyn and i was kind of like what the hell is that",
    "start": "1886480",
    "end": "1892720"
  },
  {
    "text": "um and yeah that's you know it was um it's everything is in there record",
    "start": "1892720",
    "end": "1899760"
  },
  {
    "text": "syntax and all this sort of stuff but it's really difficult to make sense of",
    "start": "1899760",
    "end": "1905919"
  },
  {
    "text": "what all that syntax means by yourself so for example",
    "start": "1905919",
    "end": "1911600"
  },
  {
    "text": "let's say that i see",
    "start": "1911600",
    "end": "1916720"
  },
  {
    "text": "the word string although there's a type string",
    "start": "1917760",
    "end": "1922799"
  },
  {
    "text": "now is that it's got a capital s so it's possible that someone's just",
    "start": "1923600",
    "end": "1930159"
  },
  {
    "text": "written capital s string instead of the keyword string in which case i should be",
    "start": "1930159",
    "end": "1935360"
  },
  {
    "text": "writing an analyzer that fixes that for them because you shouldn't do it the keyword string though shows up as the",
    "start": "1935360",
    "end": "1941279"
  },
  {
    "text": "same type as if you had system.string but could it be",
    "start": "1941279",
    "end": "1946640"
  },
  {
    "text": "that i'm actually going through the wcf application for a company that",
    "start": "1946640",
    "end": "1952480"
  },
  {
    "text": "manufactures distributes and sells string",
    "start": "1952480",
    "end": "1957519"
  },
  {
    "text": "possibly so how do i know if this string is so",
    "start": "1957519",
    "end": "1963039"
  },
  {
    "text": "and this is up at the top of the class there i've got um using system",
    "start": "1963039",
    "end": "1969360"
  },
  {
    "text": "but i might also have using stringcode.stockcontrol.models",
    "start": "1969360",
    "end": "1974440"
  },
  {
    "text": "and there might be something else and i don't want to have to bounce around all over the place trying to work out from",
    "start": "1974480",
    "end": "1980240"
  },
  {
    "text": "the syntax whether we're talking about a string of characters or string for tying up your christmas",
    "start": "1980240",
    "end": "1987039"
  },
  {
    "text": "presents i had a conversation with my wife once i was just going oh just the string",
    "start": "1987039",
    "end": "1993440"
  },
  {
    "text": "handling's so bad and she just she looked at me and she went the what",
    "start": "1993440",
    "end": "1998720"
  },
  {
    "text": "and i went the string handling in this application it's terrible and she went why is the application handling string",
    "start": "1998720",
    "end": "2004960"
  },
  {
    "text": "and it occurred to me that to the kinds of people that we're not",
    "start": "2004960",
    "end": "2010960"
  },
  {
    "text": "that's not what string means you know which makes it even more terrifying that when i go on to google",
    "start": "2010960",
    "end": "2017120"
  },
  {
    "text": "and search for string it takes me to the microsoft documentation and not amazon",
    "start": "2017120",
    "end": "2023679"
  },
  {
    "text": "and i know that's terrifying because i'm trying using duckduckgo for a month and when i put string in go it takes me to",
    "start": "2024480",
    "end": "2030480"
  },
  {
    "text": "amazon so anyway making sense of what these syntax tokens and nodes and everything",
    "start": "2030480",
    "end": "2037039"
  },
  {
    "text": "actually means is where semantic models comes in so the semantic model",
    "start": "2037039",
    "end": "2042320"
  },
  {
    "text": "is the combination of the syntax tree and the in-memory compilation of the",
    "start": "2042320",
    "end": "2049200"
  },
  {
    "text": "code and so there is a semantic model and for every",
    "start": "2049200",
    "end": "2054638"
  },
  {
    "text": "point in the syntax tree you can go give me the bit of the semantic model",
    "start": "2054639",
    "end": "2061280"
  },
  {
    "text": "that is what this syntax means and that is where roslin gets really clever because that is where you can go",
    "start": "2061280",
    "end": "2068800"
  },
  {
    "text": "okay i have a type here give me this type information and then i",
    "start": "2068800",
    "end": "2074560"
  },
  {
    "text": "can say is this system.string or stringcode.stock.string",
    "start": "2074560",
    "end": "2079599"
  },
  {
    "text": "and so semantic models uh you don't compile documents obviously in",
    "start": "2079599",
    "end": "2086240"
  },
  {
    "text": "c you compile projects and so we create a compilation by saying",
    "start": "2086240",
    "end": "2091599"
  },
  {
    "text": "await project dot get compilation async we will always get something back off",
    "start": "2091599",
    "end": "2097680"
  },
  {
    "text": "that it may just be full of errors so this this tends to work best with code",
    "start": "2097680",
    "end": "2103119"
  },
  {
    "text": "that does compile but it'll give it a good try with code that doesn't and then we can get a semantic model",
    "start": "2103119",
    "end": "2109599"
  },
  {
    "text": "from that by saying a weight compilation.getsemantic model that should say async sorry um from the",
    "start": "2109599",
    "end": "2117200"
  },
  {
    "text": "semantic tree which we've got from our document so our document goes here is all the code represented as a syntax",
    "start": "2117200",
    "end": "2124240"
  },
  {
    "text": "tree and then we throw that to the compilation and we go give me the semantic model for this syntax tree and",
    "start": "2124240",
    "end": "2130640"
  },
  {
    "text": "it gives us back our model and within that model",
    "start": "2130640",
    "end": "2136079"
  },
  {
    "text": "where in the syntax tree we have nodes and the nodes have tokens and",
    "start": "2136079",
    "end": "2142160"
  },
  {
    "text": "identifiers and trivia the semantic model has symbols",
    "start": "2142160",
    "end": "2148799"
  },
  {
    "text": "and so let's say i've got my from this test application that i got",
    "start": "2149440",
    "end": "2154800"
  },
  {
    "text": "here i've got a greeter and that's a class declaration syntax um that is called greeter and so i can",
    "start": "2154800",
    "end": "2162000"
  },
  {
    "text": "get the symbol info from that by saying model dot get symbol info and passing in",
    "start": "2162000",
    "end": "2167200"
  },
  {
    "text": "that identifier name syntax and then that will give me an ie named type symbol in this",
    "start": "2167200",
    "end": "2173599"
  },
  {
    "text": "particular instance and then i can get all the information about that from",
    "start": "2173599",
    "end": "2180078"
  },
  {
    "text": "from that semantic model and this works with everything so an awful lot of stuff that",
    "start": "2180960",
    "end": "2188160"
  },
  {
    "text": "comes through in c-sharp is an expression syntax so x equals 42 is an expression syntax",
    "start": "2188160",
    "end": "2195280"
  },
  {
    "text": "that's an assignment expression but it has a return value",
    "start": "2195280",
    "end": "2200480"
  },
  {
    "text": "i plus plus is an expression syntax it's a unary expression but it has a return",
    "start": "2201040",
    "end": "2206240"
  },
  {
    "text": "value and i can get the type of that expression which is insanely",
    "start": "2206240",
    "end": "2212960"
  },
  {
    "text": "useful because it means that i can do i can sort of work out if i look at a",
    "start": "2212960",
    "end": "2218079"
  },
  {
    "text": "method and then i look at all the expressions in that method then i can find all the types that that method",
    "start": "2218079",
    "end": "2225440"
  },
  {
    "text": "needs to work which is super helpful so",
    "start": "2225440",
    "end": "2232560"
  },
  {
    "text": "let me just go back to here and we'll just check um",
    "start": "2233200",
    "end": "2240520"
  },
  {
    "text": "so here's my symbol demo",
    "start": "2244480",
    "end": "2248079"
  },
  {
    "text": "and so we're going to say go through each project and for each project get the compilation and if the",
    "start": "2249599",
    "end": "2255359"
  },
  {
    "text": "compilation is null continue so i said compilation will always return",
    "start": "2255359",
    "end": "2261040"
  },
  {
    "text": "something it won't necessarily always return something because one of the types of project in a",
    "start": "2261040",
    "end": "2267359"
  },
  {
    "text": "solution is a solution folder and so you might have a solution folder that's just got like your docker files and your",
    "start": "2267359",
    "end": "2274160"
  },
  {
    "text": "readme.txt and so if you call get compilation async on a solution folder project you'll get null back and then we",
    "start": "2274160",
    "end": "2281200"
  },
  {
    "text": "go for each one of those of the documents in that project get its syntax tree and if it hasn't got a",
    "start": "2281200",
    "end": "2288079"
  },
  {
    "text": "syntax tree then carry on then get its semantic model",
    "start": "2288079",
    "end": "2293680"
  },
  {
    "text": "then we get the root out of that tree and then we can say for each type",
    "start": "2293680",
    "end": "2300720"
  },
  {
    "text": "declaration syntax in root descendant nodes dot of type get our base type",
    "start": "2300720",
    "end": "2306240"
  },
  {
    "text": "declaration syntax then we can say get the declared symbol",
    "start": "2306240",
    "end": "2312640"
  },
  {
    "text": "for this type declaration syntax that should always return an i named type symbol but sometimes it will return an i",
    "start": "2312640",
    "end": "2319359"
  },
  {
    "text": "error type symbol which says it's there i kind of know about it but i can't make sense of it",
    "start": "2319359",
    "end": "2325359"
  },
  {
    "text": "and then we can write our type kind which is class or interface or struct or",
    "start": "2325359",
    "end": "2331359"
  },
  {
    "text": "enum and then with now we have that thing about we",
    "start": "2331359",
    "end": "2337280"
  },
  {
    "text": "don't have to go find ancestor node namespace declaration because this i",
    "start": "2337280",
    "end": "2343200"
  },
  {
    "text": "named type symbol once you get to the point of working with this it's really nice because it",
    "start": "2343200",
    "end": "2348960"
  },
  {
    "text": "looks almost exactly like type from the net framework itself it's just you're",
    "start": "2348960",
    "end": "2354240"
  },
  {
    "text": "doing it at design time with the code rather than at runtime with",
    "start": "2354240",
    "end": "2359760"
  },
  {
    "text": "object.gettype but it's pretty much it maps",
    "start": "2359760",
    "end": "2365280"
  },
  {
    "text": "directly even if it doesn't use the same words for everything so our symbol. containing namespace and symbol.name and",
    "start": "2365280",
    "end": "2372320"
  },
  {
    "text": "then we can say symbol.getmembers.of type method symbol so there's no get methods",
    "start": "2372320",
    "end": "2378720"
  },
  {
    "text": "um or get properties or get fields it's just get members and then you can say of type i method symbol",
    "start": "2378720",
    "end": "2385680"
  },
  {
    "text": "or once you get fed up with doing that you can write three extension methods called get properties get fields and get",
    "start": "2385680",
    "end": "2391520"
  },
  {
    "text": "methods and then uh for",
    "start": "2391520",
    "end": "2398160"
  },
  {
    "text": "um for that method symbol we can say is",
    "start": "2398160",
    "end": "2404000"
  },
  {
    "text": "implicitly declared and if it's not we can write out the symbol name like that",
    "start": "2404000",
    "end": "2412240"
  },
  {
    "text": "so now if we run that again",
    "start": "2415599",
    "end": "2419800"
  },
  {
    "text": "so yeah so because we have a class called sample.program and that has a method",
    "start": "2426880",
    "end": "2433200"
  },
  {
    "text": "main and a method ask name and we have a class sample.library.greater and that has a method called dotsetor",
    "start": "2433200",
    "end": "2440000"
  },
  {
    "text": "which is the constructor and it has a method called greet",
    "start": "2440000",
    "end": "2447920"
  },
  {
    "text": "that is implicitly declared that's kind of important because",
    "start": "2450560",
    "end": "2456160"
  },
  {
    "text": "uh a lot of these classes have implicitly declared methods they all have an",
    "start": "2456160",
    "end": "2462160"
  },
  {
    "text": "implicitly declared static constructor that does nothing if you haven't specified a parameter list constructor",
    "start": "2462160",
    "end": "2468800"
  },
  {
    "text": "it will have an implicitly declared parameter list constructor unless it's a static class",
    "start": "2468800",
    "end": "2474720"
  },
  {
    "text": "because all classes have to have a constructor if you've got properties on there then",
    "start": "2474720",
    "end": "2480480"
  },
  {
    "text": "it will have implicitly declared get and set methods for those properties",
    "start": "2480480",
    "end": "2485839"
  },
  {
    "text": "and if god help you you've got an async method on there it will have",
    "start": "2485839",
    "end": "2492240"
  },
  {
    "text": "like warren piece of of implicitly declared types and methods and fields",
    "start": "2492240",
    "end": "2498000"
  },
  {
    "text": "and state machines and lord knows what else so basically that um on all these",
    "start": "2498000",
    "end": "2504400"
  },
  {
    "text": "symbols there's an is implicitly declared method that basically says did i write this or did the c-sharp compiler",
    "start": "2504400",
    "end": "2512160"
  },
  {
    "text": "write this because if the c-sharp compiler wrote it i don't care i don't want to know about it just keep it away",
    "start": "2512160",
    "end": "2518800"
  },
  {
    "text": "from me just",
    "start": "2518800",
    "end": "2524000"
  },
  {
    "text": "it's a brilliant website that i use a lot called sharplab.io and you type in some c sharp code and on",
    "start": "2524000",
    "end": "2531040"
  },
  {
    "text": "the right hand side it will show you the c sharp code that the c-sharp",
    "start": "2531040",
    "end": "2536160"
  },
  {
    "text": "compiler generates for the c-sharp code that you wrote which includes things like async state machines and then it",
    "start": "2536160",
    "end": "2542560"
  },
  {
    "text": "will show you the il code that's generated and then if you give it a target platform it will show you the",
    "start": "2542560",
    "end": "2547760"
  },
  {
    "text": "machine code that it generates for like windows x64 or linux x64",
    "start": "2547760",
    "end": "2554240"
  },
  {
    "text": "so yeah so we found all the methods but we can",
    "start": "2554240",
    "end": "2560400"
  },
  {
    "text": "use this to find all the used types in this entire solution by looking at the",
    "start": "2560400",
    "end": "2565920"
  },
  {
    "text": "expressions within those methods so if we go back to here",
    "start": "2565920",
    "end": "2571599"
  },
  {
    "text": "and we're going to use oh no we've got a symbol visitor",
    "start": "2571599",
    "end": "2579359"
  },
  {
    "text": "which i tend to skip over",
    "start": "2579359",
    "end": "2582799"
  },
  {
    "text": "so we have a list types visitor here so in the same way that there is a c-sharp syntax walker there is a symbol visitor",
    "start": "2585599",
    "end": "2593680"
  },
  {
    "text": "i'm going to mention it because it's there and",
    "start": "2593680",
    "end": "2598720"
  },
  {
    "text": "if you know it's there then you might sort of go and explore it and you might use it and if you use it you might find",
    "start": "2598720",
    "end": "2605680"
  },
  {
    "text": "out what it's for and if you do can you please email me and tell me",
    "start": "2605680",
    "end": "2611599"
  },
  {
    "text": "but it's there it's it's another way that you can go through all the types so this will actually let you go through",
    "start": "2612319",
    "end": "2617920"
  },
  {
    "text": "all the types in a solution this symbol all the symbols in a model without",
    "start": "2617920",
    "end": "2623599"
  },
  {
    "text": "worrying about the syntax tree at all and i have never found a a useful use",
    "start": "2623599",
    "end": "2629359"
  },
  {
    "text": "case for that because it's the syntax that you kind of really care about it's not the symbols the symbols give you",
    "start": "2629359",
    "end": "2635440"
  },
  {
    "text": "information about the syntax but never mind so so that is there but i'm going to",
    "start": "2635440",
    "end": "2640800"
  },
  {
    "text": "skip over it because um it it takes time but finding all used",
    "start": "2640800",
    "end": "2646880"
  },
  {
    "text": "types so if we go back to here",
    "start": "2646880",
    "end": "2651920"
  },
  {
    "text": "and we can go into the dependencies demo and we can go into list",
    "start": "2652480",
    "end": "2658319"
  },
  {
    "text": "all used types like this",
    "start": "2658319",
    "end": "2663640"
  },
  {
    "text": "so i'm going to pass in a solution and we're going to",
    "start": "2663760",
    "end": "2669520"
  },
  {
    "text": "we're going to create a new set of types which is just going to be a hash set of string which is going to make sure that",
    "start": "2669520",
    "end": "2674960"
  },
  {
    "text": "we don't list the same type twice i'm going to go through each of our projects we're going to get a compilation",
    "start": "2674960",
    "end": "2681599"
  },
  {
    "text": "make sure we've got a compilation and then we're going to go through our documents",
    "start": "2681599",
    "end": "2687680"
  },
  {
    "text": "in our projects and then we're going to do another thing we're going to say if document dot is",
    "start": "2687680",
    "end": "2694880"
  },
  {
    "text": "auto generated and this has become even more important recently",
    "start": "2694880",
    "end": "2702560"
  },
  {
    "text": "and i need to update this probably",
    "start": "2702560",
    "end": "2709280"
  },
  {
    "text": "in the same way that your your classes have implicitly declared uh fields and",
    "start": "2709280",
    "end": "2718079"
  },
  {
    "text": "methods and that sort of thing your project has implicitly declared or",
    "start": "2718079",
    "end": "2724000"
  },
  {
    "text": "generated documents so for every xaml file in the wpf",
    "start": "2724000",
    "end": "2729280"
  },
  {
    "text": "application there's a generated dot g dot cs or xaml.cs for that xaml file",
    "start": "2729280",
    "end": "2736480"
  },
  {
    "text": "um these tend to have designer dot generated dot g or dot gi in the file",
    "start": "2736480",
    "end": "2744319"
  },
  {
    "text": "name but not reliably so and this is just the ones that microsoft",
    "start": "2744319",
    "end": "2749359"
  },
  {
    "text": "have done by the way never mind sort of third-party things also if you've got source generators in",
    "start": "2749359",
    "end": "2755359"
  },
  {
    "text": "there then those throw stuff in and one of the things that they say in source generators which is not in this talk but",
    "start": "2755359",
    "end": "2761760"
  },
  {
    "text": "i'm writing a whole other talk about source generators is that you should put dot g dot cs as",
    "start": "2761760",
    "end": "2767359"
  },
  {
    "text": "the file name for the generated source or sometimes you get temporary generated",
    "start": "2767359",
    "end": "2774079"
  },
  {
    "text": "file underscore that goes in there as well",
    "start": "2774079",
    "end": "2778960"
  },
  {
    "text": "and then we also have this begins with auto-generated comment and this is quite useful so we",
    "start": "2782400",
    "end": "2789520"
  },
  {
    "text": "can say if we've got this root syntax node if it has leading trivia then let's go through the leading trivia",
    "start": "2789520",
    "end": "2797280"
  },
  {
    "text": "and find if it's a multi-line comment so that's a comment that starts with",
    "start": "2797280",
    "end": "2802560"
  },
  {
    "text": "slash asterisk and ends with asterisk slash because one of the nice things that everybody",
    "start": "2802560",
    "end": "2809280"
  },
  {
    "text": "always does when they auto generate a file is put a multi-line comment at the top of the file saying this file was",
    "start": "2809280",
    "end": "2816160"
  },
  {
    "text": "generated by a tool as opposed to some of the stuff in source control which would say",
    "start": "2816160",
    "end": "2823040"
  },
  {
    "text": "this code was written by a tool",
    "start": "2823040",
    "end": "2827200"
  },
  {
    "text": "so yes and then we can look there and we can just see if it's got the words auto generated or auto dash generated this",
    "start": "2828480",
    "end": "2834480"
  },
  {
    "text": "catches honestly probably about 50 of generated code but it's better than",
    "start": "2834480",
    "end": "2841040"
  },
  {
    "text": "nothing one of the things it does catch in net core or net five six applications is the",
    "start": "2841040",
    "end": "2848960"
  },
  {
    "text": "auto generated assembly info.cs file um that goes in there now because that's",
    "start": "2848960",
    "end": "2855599"
  },
  {
    "text": "now auto generated from cs proj but that does have the leading comments",
    "start": "2855599",
    "end": "2862800"
  },
  {
    "text": "although i believe it is still just called assemblyinfo.cs so in our dependencies",
    "start": "2862800",
    "end": "2870000"
  },
  {
    "text": "demo here we say if it's an auto generated document just crack on because i don't",
    "start": "2870000",
    "end": "2876240"
  },
  {
    "text": "care about that then we're going to say you get the syntax tree from this",
    "start": "2876240",
    "end": "2881839"
  },
  {
    "text": "and if that's null then we can continue on then we'll say get the semantic model",
    "start": "2881839",
    "end": "2888079"
  },
  {
    "text": "for that and then we can say get the root",
    "start": "2888079",
    "end": "2893119"
  },
  {
    "text": "uh syntax node from that tree check for that auto generated comment at the start",
    "start": "2893119",
    "end": "2898240"
  },
  {
    "text": "and then we have this get types method here and we're going to pass in our",
    "start": "2898240",
    "end": "2903440"
  },
  {
    "text": "route and our model",
    "start": "2903440",
    "end": "2907760"
  },
  {
    "text": "and here we're going to properly get our link on",
    "start": "2909520",
    "end": "2915839"
  },
  {
    "text": "so we're going to say descendant nodes dot of type identifier name syntax",
    "start": "2915839",
    "end": "2922640"
  },
  {
    "text": "and then we're going to say model dot get symbol info in there and then of type i named uh type symbol so",
    "start": "2922640",
    "end": "2930720"
  },
  {
    "text": "identifier name syntax is a variable name which could be in a method",
    "start": "2930720",
    "end": "2937839"
  },
  {
    "text": "or it's a field declaration or a property declaration or a parameter",
    "start": "2937839",
    "end": "2943280"
  },
  {
    "text": "declaration in a method this will find all of those",
    "start": "2943280",
    "end": "2948480"
  },
  {
    "text": "and then we get the symbol info for that identifier which will tell us what kind",
    "start": "2948480",
    "end": "2954079"
  },
  {
    "text": "of identifier that is and then for the ones where it is a known type then that will",
    "start": "2954079",
    "end": "2961119"
  },
  {
    "text": "be an i named type symbol so that gets us all our variables our parameters and all those sorts of things",
    "start": "2961119",
    "end": "2967200"
  },
  {
    "text": "and then we can do the same thing again except this time we're looking for expression syntax and so this gets us",
    "start": "2967200",
    "end": "2973760"
  },
  {
    "text": "things like you may somebody might have called a method",
    "start": "2973760",
    "end": "2979119"
  },
  {
    "text": "and passed in 101024",
    "start": "2979119",
    "end": "2984599"
  },
  {
    "text": "1024 as an expression because they couldn't be bothered to do the maths to work out how many bytes there are in a",
    "start": "2984760",
    "end": "2991599"
  },
  {
    "text": "megabyte um and so expression syntax will find 1024 times 1024",
    "start": "2991599",
    "end": "2998800"
  },
  {
    "text": "and the type of that will just be int and so we get a named types that are",
    "start": "2998800",
    "end": "3004960"
  },
  {
    "text": "from our identifiers and our expression types that are from expressions within the code and then we push them all into",
    "start": "3004960",
    "end": "3013760"
  },
  {
    "text": "one innumerable here name types and expression types and then",
    "start": "3013760",
    "end": "3019280"
  },
  {
    "text": "we call distinct on that and distinct",
    "start": "3019280",
    "end": "3024400"
  },
  {
    "text": "those yellow lines that keep coming out when i do that run thing",
    "start": "3024400",
    "end": "3029440"
  },
  {
    "text": "is symbol equality comparer",
    "start": "3029440",
    "end": "3035920"
  },
  {
    "text": "dot default and now that isn't going to build at all",
    "start": "3035920",
    "end": "3043680"
  },
  {
    "text": "because it won't let you do that",
    "start": "3043680",
    "end": "3047838"
  },
  {
    "text": "named type symbol equality comparer dot instance",
    "start": "3052319",
    "end": "3058319"
  },
  {
    "text": "so yeah i use name type symbol equality comparer.instance and they still get the",
    "start": "3062480",
    "end": "3068079"
  },
  {
    "text": "warning saying use symbol equality comparer when comparing symbols i am",
    "start": "3068079",
    "end": "3074960"
  },
  {
    "text": "it bothers me that that's an analyzer",
    "start": "3075920",
    "end": "3081280"
  },
  {
    "text": "written by the person who wrote the thing that writes the analyzers",
    "start": "3081280",
    "end": "3086160"
  },
  {
    "text": "and it's quite clearly telling me something wrong",
    "start": "3086960",
    "end": "3092400"
  },
  {
    "text": "anyway let's just do a save on this and then we can",
    "start": "3092400",
    "end": "3098079"
  },
  {
    "text": "come back out to here and we can do a net run again",
    "start": "3098079",
    "end": "3102880"
  },
  {
    "text": "and it takes it a while but yes so it started off with the main",
    "start": "3109520",
    "end": "3114880"
  },
  {
    "text": "application and the first thing it found in there that was used was system.library.greater because it creates an instance of",
    "start": "3114880",
    "end": "3120319"
  },
  {
    "text": "greeter but it's also found usages of system.boolean child console in 32",
    "start": "3120319",
    "end": "3125359"
  },
  {
    "text": "string and void void is a type",
    "start": "3125359",
    "end": "3132000"
  },
  {
    "text": "and it's i always always forget that but the",
    "start": "3132000",
    "end": "3137040"
  },
  {
    "text": "return type of a void method is not it's system.void",
    "start": "3137040",
    "end": "3143838"
  },
  {
    "text": "and you know you messed up when your protobuf generator",
    "start": "3148319",
    "end": "3154240"
  },
  {
    "text": "um you sort of didn't write the tests properly and you release a new version of your project and then someone comes",
    "start": "3154240",
    "end": "3160079"
  },
  {
    "text": "back and goes my protobuf compiler is giving me errors saying system.void is not a known protobuf type and you're",
    "start": "3160079",
    "end": "3166800"
  },
  {
    "text": "kind of like [ __ ] maybe roll back to the previous version while i fix that",
    "start": "3166800",
    "end": "3173920"
  },
  {
    "text": "so yeah system.void is a type",
    "start": "3173920",
    "end": "3178799"
  },
  {
    "text": "okay so now we can understand code we can read code we can look at code we can go",
    "start": "3179680",
    "end": "3187440"
  },
  {
    "text": "hunting for patterns within code we can write link queries and we can write",
    "start": "3187440",
    "end": "3192720"
  },
  {
    "text": "walkers not visitors walkers against our code so now we get to the",
    "start": "3192720",
    "end": "3198640"
  },
  {
    "text": "interesting bit can we rewrite code and",
    "start": "3198640",
    "end": "3203680"
  },
  {
    "text": "you're not going to automate yourself out of a job by doing this by the way but what you can do",
    "start": "3203680",
    "end": "3209440"
  },
  {
    "text": "sometimes is let's say you're upgrading to a new",
    "start": "3209440",
    "end": "3215680"
  },
  {
    "text": "version of a nuget package or",
    "start": "3215680",
    "end": "3221359"
  },
  {
    "text": "a new version of net and there's a better way of doing something now",
    "start": "3221359",
    "end": "3226880"
  },
  {
    "text": "and your team lead or or somebody who hates you says can you go through all the code",
    "start": "3226880",
    "end": "3234400"
  },
  {
    "text": "and change all of these things to use this new way",
    "start": "3234400",
    "end": "3239680"
  },
  {
    "text": "of doing something or more likely can you go through the code and change",
    "start": "3239680",
    "end": "3247200"
  },
  {
    "text": "them to do this the company approved way of doing",
    "start": "3247200",
    "end": "3253119"
  },
  {
    "text": "something because you know if it's like can you go through some people don't like the var keyword",
    "start": "3253119",
    "end": "3259280"
  },
  {
    "text": "because it makes code reviews difficult and it's kind of like if you find that makes code reviews difficult personally",
    "start": "3259280",
    "end": "3265520"
  },
  {
    "text": "i don't want you reviewing my code but never mind um so somebody might say oh just we never",
    "start": "3265520",
    "end": "3271520"
  },
  {
    "text": "used the var keyword never ever ever now that's actually quite easy to fix you can sort of all enter with resharper",
    "start": "3271520",
    "end": "3278559"
  },
  {
    "text": "and just say go through the entire solution and just replace var with the actual type of whatever it is",
    "start": "3278559",
    "end": "3286079"
  },
  {
    "text": "as if your manager doesn't know about resharper then you can take the rest of the week off just make sure you commit",
    "start": "3286079",
    "end": "3292880"
  },
  {
    "text": "it kind of a few files at a time and",
    "start": "3292880",
    "end": "3298319"
  },
  {
    "text": "write a python script to do pushes every 2.43 hours",
    "start": "3298400",
    "end": "3303680"
  },
  {
    "text": "and go to the beach hire me",
    "start": "3303680",
    "end": "3309359"
  },
  {
    "text": "this people go oh do talks for exposure and it's kind of like yeah no really i can't i know",
    "start": "3311760",
    "end": "3319359"
  },
  {
    "text": "so yeah we want to rewrite code but yes you can use this to automate incredibly",
    "start": "3319680",
    "end": "3325280"
  },
  {
    "text": "boring um bits of code but it becomes interesting it's it's challenging",
    "start": "3325280",
    "end": "3332480"
  },
  {
    "text": "because one of the things with roslyn is everything in there is immutable",
    "start": "3332480",
    "end": "3339119"
  },
  {
    "text": "so the thing that you can change is the syntax tree and",
    "start": "3339119",
    "end": "3344960"
  },
  {
    "text": "but you can't change a syntax node you can only replace it",
    "start": "3344960",
    "end": "3351280"
  },
  {
    "text": "with another syntax node and [Music] when you replace that",
    "start": "3351280",
    "end": "3357760"
  },
  {
    "text": "syntax node in a syntax tree it essentially invalidates that entire",
    "start": "3357760",
    "end": "3363520"
  },
  {
    "text": "syntax tree right the way up to the root node there is now a completely new syntax tree",
    "start": "3363520",
    "end": "3369839"
  },
  {
    "text": "with that new node in it and the old one is dead and",
    "start": "3369839",
    "end": "3375200"
  },
  {
    "text": "uh and you you've broken it so the syntax tree is immutable",
    "start": "3375200",
    "end": "3381520"
  },
  {
    "text": "so you think all right well i'll just go to the document and i'll set the documents new syntax set document syntax",
    "start": "3381520",
    "end": "3387280"
  },
  {
    "text": "tree equals this new syntax tree where i've done this thing documents immutable as well so",
    "start": "3387280",
    "end": "3393280"
  },
  {
    "text": "now you have to go back to the project and say hey project replace this document here with this new version with",
    "start": "3393280",
    "end": "3399599"
  },
  {
    "text": "the syntax tree that i updated because i added a new line character",
    "start": "3399599",
    "end": "3405839"
  },
  {
    "text": "somewhere in the source code um except it turns out project is",
    "start": "3405839",
    "end": "3410880"
  },
  {
    "text": "immutable as well i say all right so i go to the solution and say no no no solution that's",
    "start": "3410880",
    "end": "3417200"
  },
  {
    "text": "immutable as well so",
    "start": "3417200",
    "end": "3421839"
  },
  {
    "text": "the point at which it stops being immutable is the workspace and so what you do is you change your",
    "start": "3423200",
    "end": "3429599"
  },
  {
    "text": "syntax node all the way down in the code over here and then you come back all the way up to the top here and you go",
    "start": "3429599",
    "end": "3436640"
  },
  {
    "text": "work workspace dot apply changes and then workspace dot save and it'll",
    "start": "3436640",
    "end": "3443280"
  },
  {
    "text": "write everything out that changed which is lots of fun",
    "start": "3443280",
    "end": "3448640"
  },
  {
    "text": "you think about doing that let's say well let's just use the example i'm",
    "start": "3448640",
    "end": "3454640"
  },
  {
    "text": "about to show here i want to go through this is more like an april fools joke",
    "start": "3454640",
    "end": "3460640"
  },
  {
    "text": "that you might play on somebody i want to go through every string instance",
    "start": "3460640",
    "end": "3467119"
  },
  {
    "text": "anywhere in this entire solution whether it's a literal string or the returned",
    "start": "3467119",
    "end": "3472559"
  },
  {
    "text": "value from a method or a property or whatever it might be and i just want to add two upper invariant on the end of it",
    "start": "3472559",
    "end": "3481359"
  },
  {
    "text": "that's the kind of nice version the nasty version would be to add a dot replace",
    "start": "3481440",
    "end": "3487839"
  },
  {
    "text": "the time i hacked my wife's microsoft word to replace any references to margaret thatcher with that [ __ ]",
    "start": "3487839",
    "end": "3496880"
  },
  {
    "text": "would probably be okay but she worked for margaret thatcher",
    "start": "3499680",
    "end": "3505520"
  },
  {
    "text": "okay so yes what things in rosalind are immutable everything solutions projects",
    "start": "3506720",
    "end": "3512000"
  },
  {
    "text": "um documents syntax so you think if you've got like a thousand line class",
    "start": "3512000",
    "end": "3517359"
  },
  {
    "text": "and you want to go through and replace every syntax node in there that is a string with a new syntax node that is",
    "start": "3517359",
    "end": "3523599"
  },
  {
    "text": "basically that syntax node but now with dot to upper invariant tacked onto the end of it",
    "start": "3523599",
    "end": "3529359"
  },
  {
    "text": "and that so i've changed one so now i've got to go i'll go back up to here and i'll",
    "start": "3529359",
    "end": "3534559"
  },
  {
    "text": "start again and then now i've now i changed is hang on no i've just changed the same one and",
    "start": "3534559",
    "end": "3541359"
  },
  {
    "text": "now it says dot 2 upper invariant dot to upper invariant because it is at least",
    "start": "3541359",
    "end": "3546640"
  },
  {
    "text": "deterministic and i'm hitting the same string expression every time um",
    "start": "3546640",
    "end": "3552160"
  },
  {
    "text": "how do i keep track of which so unfortunately um the the team realized this and so",
    "start": "3552160",
    "end": "3559040"
  },
  {
    "text": "they gave a c-sharp syntax rewriter and this is almost exactly like c-sharp",
    "start": "3559040",
    "end": "3565040"
  },
  {
    "text": "syntax walker except instead of returning void or",
    "start": "3565040",
    "end": "3570200"
  },
  {
    "text": "system.void these methods return a syntax node so they look at the syntax",
    "start": "3570200",
    "end": "3575680"
  },
  {
    "text": "node and they say do i need to change you and if i do here's a new syntax node with those changes and i'll return that",
    "start": "3575680",
    "end": "3582960"
  },
  {
    "text": "and if i don't i'll just return the node as it was passed in and this",
    "start": "3582960",
    "end": "3588480"
  },
  {
    "text": "lets us take care of",
    "start": "3588480",
    "end": "3593520"
  },
  {
    "text": "all those nastiness is around immutable code so let us",
    "start": "3593520",
    "end": "3601440"
  },
  {
    "text": "close all but this and we will go to here and here",
    "start": "3601440",
    "end": "3609200"
  },
  {
    "text": "and we will go into rewrite a demo dot up shift all strings",
    "start": "3609200",
    "end": "3614920"
  },
  {
    "text": "so go through all the projects get the compilation do the blah blah blah blah",
    "start": "3618799",
    "end": "3624000"
  },
  {
    "text": "make sure it's not auto generated because we don't want to do that get the semantic model now we have",
    "start": "3624000",
    "end": "3631200"
  },
  {
    "text": "an a new string literal up shifter",
    "start": "3631200",
    "end": "3636558"
  },
  {
    "text": "and so this is a c sharp syntax rewriter but we're going to pass in our semantic model",
    "start": "3636880",
    "end": "3644960"
  },
  {
    "text": "so that we can use that to make sure that we're up shifting",
    "start": "3644960",
    "end": "3650000"
  },
  {
    "text": "text and not balls of string from stringcode's stock control system",
    "start": "3650000",
    "end": "3655520"
  },
  {
    "text": "and we just have visit literal expression this is one of the things that we can override in here so we're",
    "start": "3655520",
    "end": "3660720"
  },
  {
    "text": "only going to find the hard-coded strings with quote quote around them we're not going to do this on everything",
    "start": "3660720",
    "end": "3666799"
  },
  {
    "text": "so visit literal expression we can say if model dot get type info of node.type is",
    "start": "3666799",
    "end": "3675200"
  },
  {
    "text": "i name type symbol type if type name equals string",
    "start": "3675200",
    "end": "3680799"
  },
  {
    "text": "now i could stop there because",
    "start": "3680799",
    "end": "3686400"
  },
  {
    "text": "if it's a literal expression and it's a string it's system.string because you can't have literal expressions for",
    "start": "3687280",
    "end": "3694079"
  },
  {
    "text": "anything else but c sharp 12 maybe possibly c sharp 30 you",
    "start": "3694079",
    "end": "3700720"
  },
  {
    "text": "know it might be c sharp 27. at some point they're going to put utf-8 string literals into c-sharp",
    "start": "3700720",
    "end": "3707359"
  },
  {
    "text": "and then to upper invariant might not be available because what does to upper",
    "start": "3707359",
    "end": "3712480"
  },
  {
    "text": "invariant mean on a string that consists entirely of emoji because it's an elon",
    "start": "3712480",
    "end": "3719039"
  },
  {
    "text": "musk business tweet",
    "start": "3719039",
    "end": "3722319"
  },
  {
    "text": "so let's just belton braces as we say in britain we'll make double sure",
    "start": "3725520",
    "end": "3731200"
  },
  {
    "text": "we'll just say give me the members of this",
    "start": "3731200",
    "end": "3736480"
  },
  {
    "text": "and make sure it's got string dot two upper invariant in it make sure it's got that method because i",
    "start": "3736480",
    "end": "3743200"
  },
  {
    "text": "don't want to i don't want my april fool's joke to result in my friend's um",
    "start": "3743200",
    "end": "3749760"
  },
  {
    "text": "program not compiling because then he might not deploy it into production and hilarity might not ensue",
    "start": "3749760",
    "end": "3757440"
  },
  {
    "text": "okay so then in here we can now use a syntax factory",
    "start": "3759200",
    "end": "3766559"
  },
  {
    "text": "and so this is where we write code that writes code so we can say",
    "start": "3766559",
    "end": "3772319"
  },
  {
    "text": "create a an invocation expression so that's essentially a call a method call",
    "start": "3772319",
    "end": "3778319"
  },
  {
    "text": "so we're going to invoke and then we have a member access expression to say",
    "start": "3778319",
    "end": "3784240"
  },
  {
    "text": "uh we are accessing a member on a on this field",
    "start": "3784240",
    "end": "3789280"
  },
  {
    "text": "and then we have our syntax kind is simple member access expression so",
    "start": "3789280",
    "end": "3794319"
  },
  {
    "text": "string dot two upper invariant that dot that's a simple member access expression",
    "start": "3794319",
    "end": "3801039"
  },
  {
    "text": "and then the node which is whatever that string literal was in the first place",
    "start": "3801039",
    "end": "3806079"
  },
  {
    "text": "and then on the end of that we're going to add syntax factory dot identifier name name of string.2 upper invariant",
    "start": "3806079",
    "end": "3815200"
  },
  {
    "text": "now the other thing i could do in here is i could get the text of that node",
    "start": "3816799",
    "end": "3824880"
  },
  {
    "text": "and i could put it in a string and to the end of that string i could",
    "start": "3824880",
    "end": "3831119"
  },
  {
    "text": "concatenate dot to upper invariant open parens close parens and then i",
    "start": "3831119",
    "end": "3837680"
  },
  {
    "text": "could use syntaxfactory.pass to turn that into a syntax node that",
    "start": "3837680",
    "end": "3843359"
  },
  {
    "text": "works just as well and in an awful lot of cases that is the",
    "start": "3843359",
    "end": "3849119"
  },
  {
    "text": "easier way to do these things i'm just using this to kind of demonstrate i'll",
    "start": "3849119",
    "end": "3855599"
  },
  {
    "text": "show you an example of the syntax factory.pass later there are people who say if you are",
    "start": "3855599",
    "end": "3863200"
  },
  {
    "text": "generating c sharp code you should do it like this",
    "start": "3863200",
    "end": "3868400"
  },
  {
    "text": "with roslyn to make sure that you are generating c-sharp code correctly",
    "start": "3868400",
    "end": "3874160"
  },
  {
    "text": "i am not one of those people for the most part i say if you are generating c-sharp code generating it not",
    "start": "3874160",
    "end": "3881920"
  },
  {
    "text": "modifying it if you're generating an entire c sharp file for for whatever reason",
    "start": "3881920",
    "end": "3888559"
  },
  {
    "text": "then just use a string builder use an indented string builder for sure but use a string builder because this",
    "start": "3888559",
    "end": "3896559"
  },
  {
    "text": "it's really invocation expressions and member access expressions and all this sort of stuff and that is literally",
    "start": "3896559",
    "end": "3902160"
  },
  {
    "text": "we're just going add dot to upper invariant to the end of whatever's already there so yes but you you can do this like this",
    "start": "3902160",
    "end": "3911119"
  },
  {
    "text": "so um we",
    "start": "3911119",
    "end": "3915359"
  },
  {
    "text": "if uh we this if the type is type and if the thing is",
    "start": "3917200",
    "end": "3923760"
  },
  {
    "text": "string then we are returning this so we're returning our brand new syntax",
    "start": "3923760",
    "end": "3929119"
  },
  {
    "text": "node that includes our old syntax node and then c sharp syntax rewriter is",
    "start": "3929119",
    "end": "3935039"
  },
  {
    "text": "going to take care of working out which node it passed in",
    "start": "3935039",
    "end": "3940720"
  },
  {
    "text": "and which node has come back out and then at the end of this whole",
    "start": "3940720",
    "end": "3946000"
  },
  {
    "text": "process when it's visited all the nodes in this tree it will call replace nodes and pass in a",
    "start": "3946000",
    "end": "3953599"
  },
  {
    "text": "bunch of tuples saying replace this node with this node and this node with this node and this node with this node",
    "start": "3953599",
    "end": "3959119"
  },
  {
    "text": "and you will get something out where a whole bunch of nodes have been replaced",
    "start": "3959119",
    "end": "3966558"
  },
  {
    "text": "and then we can say so we say new root equals up shifter dot visit root",
    "start": "3967280",
    "end": "3974400"
  },
  {
    "text": "and then syntax nodes have a dot is equivalent to",
    "start": "3974400",
    "end": "3981359"
  },
  {
    "text": "and dot is equivalent to basically says is this syntax tree equivalent to this",
    "start": "3981359",
    "end": "3988240"
  },
  {
    "text": "syntax tree annoyingly that will return false if you've added",
    "start": "3988240",
    "end": "3993599"
  },
  {
    "text": "some white space or other things that don't bloody matter you can hack around that but",
    "start": "3993599",
    "end": "3999760"
  },
  {
    "text": "i'm not going to here but if it's not equivalent then we literally say new solution equals new",
    "start": "3999760",
    "end": "4007920"
  },
  {
    "text": "solution dot with document syntax root and we pass in the document id here and",
    "start": "4007920",
    "end": "4014640"
  },
  {
    "text": "we pass in our new root and it finds where that document id is in the existing solution and it replaces",
    "start": "4014640",
    "end": "4022319"
  },
  {
    "text": "that document in that project with this new document with our new syntax route and so that is how you work with the",
    "start": "4022319",
    "end": "4029599"
  },
  {
    "text": "immutability in roslyn it's fun right",
    "start": "4029599",
    "end": "4034720"
  },
  {
    "text": "it is for me the really great thing about this is it means that writing visual recode",
    "start": "4034720",
    "end": "4042079"
  },
  {
    "text": "is hard and so it puts other people off from doing it that's really what i'm doing here is",
    "start": "4042079",
    "end": "4047200"
  },
  {
    "text": "i'm going look you can do this but it's so difficult please don't",
    "start": "4047200",
    "end": "4051680"
  },
  {
    "text": "god i sound lucky eddie murphy when i laugh",
    "start": "4053920",
    "end": "4059039"
  },
  {
    "text": "or possibly stampy anyone's kids watch stampy long nose on",
    "start": "4059039",
    "end": "4064880"
  },
  {
    "text": "youtube are you lucky",
    "start": "4064880",
    "end": "4069279"
  },
  {
    "text": "okay so when we get to the top and we can say have we done have we made any changes",
    "start": "4070000",
    "end": "4075440"
  },
  {
    "text": "because there's it's a chance that there are no string literals anywhere in this thing and if there aren't then we don't undo this but um and we say",
    "start": "4075440",
    "end": "4082079"
  },
  {
    "text": "workspace.try apply changes and we pass the new solution in one of the nice things that will happen at this point is",
    "start": "4082079",
    "end": "4088880"
  },
  {
    "text": "that if anything else on and say another thread has changed the solution",
    "start": "4088880",
    "end": "4095520"
  },
  {
    "text": "since the solution that we based this on so if you've got like a conflicting thing",
    "start": "4095520",
    "end": "4102238"
  },
  {
    "text": "then it will try and apply the changes from this new solution and do a sort of git merge in memory but if somebody else",
    "start": "4102239",
    "end": "4109120"
  },
  {
    "text": "has changed it it'll just go no sorry yours is out of date i can't make sense of it you changed the same documents",
    "start": "4109120",
    "end": "4115679"
  },
  {
    "text": "that they changed that's not going to fly for me go back around to the top and",
    "start": "4115679",
    "end": "4121440"
  },
  {
    "text": "essentially do it again and hope that eventually nothing else on any other threads is",
    "start": "4121440",
    "end": "4127278"
  },
  {
    "text": "going to do nasty things so",
    "start": "4127279",
    "end": "4132798"
  },
  {
    "text": "if we go over to code here",
    "start": "4132799",
    "end": "4137758"
  },
  {
    "text": "um and we just go bang bang bang bang bang",
    "start": "4139359",
    "end": "4144560"
  },
  {
    "text": "so we got our greeter here which is going to return hello",
    "start": "4144560",
    "end": "4150798"
  },
  {
    "text": "underscore name and we've got what's your name here",
    "start": "4150799",
    "end": "4156318"
  },
  {
    "text": "this is essentially the c-sharp version of the very first program i ever wrote on a sinclair zx81",
    "start": "4156319",
    "end": "4162480"
  },
  {
    "text": "in 1982 um but yeah it's also the first",
    "start": "4162480",
    "end": "4168159"
  },
  {
    "text": "program that i showed my daughter how to write and she's now building games with unity so that's fun",
    "start": "4168159",
    "end": "4175838"
  },
  {
    "text": "so yeah if i go back to here and",
    "start": "4176640",
    "end": "4182560"
  },
  {
    "text": "we go into programs that we're on up shift all strings",
    "start": "4182560",
    "end": "4189318"
  },
  {
    "text": "and we do dotnet run",
    "start": "4189839",
    "end": "4193278"
  },
  {
    "text": "one change is applied that's interesting there were two strings mark your demos broken it hasn't",
    "start": "4198800",
    "end": "4205679"
  },
  {
    "text": "worked no it has so yeah there you go console.rightline",
    "start": "4205679",
    "end": "4212080"
  },
  {
    "text": "what's your name dot to upper invariant uh so it found that string literal and it",
    "start": "4212080",
    "end": "4218960"
  },
  {
    "text": "replaced it and then in greeter.cs",
    "start": "4218960",
    "end": "4223960"
  },
  {
    "text": "and i have honestly i've done this on purpose because this caught me",
    "start": "4224080",
    "end": "4229120"
  },
  {
    "text": "again with released software dollar hello underscore name is not a string",
    "start": "4229120",
    "end": "4236320"
  },
  {
    "text": "literal expression it's an invocation because it's actually",
    "start": "4236320",
    "end": "4242239"
  },
  {
    "text": "underneath it's being turned into an interpolation method and a call to string dot format",
    "start": "4242239",
    "end": "4248320"
  },
  {
    "text": "or whatever it is so yeah if you wanted to stick dot to upper invariant on the end of that you would",
    "start": "4248320",
    "end": "4255280"
  },
  {
    "text": "have to be catching that separately and i'm not going to tell you how you can do that as an exercise if you've ever",
    "start": "4255280",
    "end": "4261520"
  },
  {
    "text": "actually used anything you've learned in this workshop okay",
    "start": "4261520",
    "end": "4268800"
  },
  {
    "text": "so um there are uses for this around change",
    "start": "4270840",
    "end": "4276480"
  },
  {
    "text": "all the way we do this in the entire solution and i expect it to take you six weeks aha",
    "start": "4276480",
    "end": "4281760"
  },
  {
    "text": "one half day right roslin thing start it running set get thing go to beach um",
    "start": "4281760",
    "end": "4289920"
  },
  {
    "text": "but the thing where it's really useful is uh for writing analyzers that's the place",
    "start": "4289920",
    "end": "4296480"
  },
  {
    "text": "where you can most easily put it in and roslyn analyzers",
    "start": "4296480",
    "end": "4301920"
  },
  {
    "text": "can be used in uh in two different contexts so you can",
    "start": "4301920",
    "end": "4307679"
  },
  {
    "text": "publish them as a visual studio extension and then they'll run on anything that's",
    "start": "4307679",
    "end": "4313199"
  },
  {
    "text": "opened in that instance of visual studio but you can",
    "start": "4313199",
    "end": "4318000"
  },
  {
    "text": "it's the end times run",
    "start": "4318880",
    "end": "4322639"
  },
  {
    "text": "you can also publish them as new get packages and then when someone installs your new get package the analyzer",
    "start": "4324719",
    "end": "4330320"
  },
  {
    "text": "becomes active just in that project that they've got that installed in so for example if you use x unit for",
    "start": "4330320",
    "end": "4336320"
  },
  {
    "text": "testing um x unit puts squiggles so if you use theory and inline data",
    "start": "4336320",
    "end": "4342480"
  },
  {
    "text": "and the number of things in the inline data attribute don't match the number of parameters to the method that's the x",
    "start": "4342480",
    "end": "4348320"
  },
  {
    "text": "unit roslin analyzer that's noticing that for you so they're super useful for that they're",
    "start": "4348320",
    "end": "4354880"
  },
  {
    "text": "super useful if you've got a shared library that you're using throughout your organization then you can put in",
    "start": "4354880",
    "end": "4361120"
  },
  {
    "text": "analyzers to make sure that people are using that properly as well so they and i have worked",
    "start": "4361120",
    "end": "4368480"
  },
  {
    "text": "at companies that have internal nuget packages and it became a best practice",
    "start": "4368480",
    "end": "4374880"
  },
  {
    "text": "to sort of put a roslin analyzer alongside your",
    "start": "4374880",
    "end": "4379920"
  },
  {
    "text": "library package just to make sure that people were using it correctly or to make it easier for them to use it",
    "start": "4379920",
    "end": "4387280"
  },
  {
    "text": "and one example of this was i was working for a bank and i went",
    "start": "4387280",
    "end": "4393120"
  },
  {
    "text": "through and i added system.diagnostics.diagnostic source all",
    "start": "4393120",
    "end": "4398239"
  },
  {
    "text": "the way through this wpf application and they went this is great and we want",
    "start": "4398239",
    "end": "4404239"
  },
  {
    "text": "more of this and we want everybody to be able to",
    "start": "4404239",
    "end": "4410000"
  },
  {
    "text": "use this and so this code sample here is wrong",
    "start": "4411040",
    "end": "4418320"
  },
  {
    "text": "okay because this is just saying i've got this diagnostics field here and that set something and i'm just going to call",
    "start": "4418320",
    "end": "4424000"
  },
  {
    "text": "diagnostics.right which means i'm going to create this object here this new a",
    "start": "4424000",
    "end": "4431199"
  },
  {
    "text": "equals 42 every time we come through here even if nothing's listening on that",
    "start": "4431199",
    "end": "4438080"
  },
  {
    "text": "diagnostics listener so if there's nothing at the other end i'm still creating an object that's coming through",
    "start": "4438080",
    "end": "4443840"
  },
  {
    "text": "here and we had this in stuff that was running a hundred times a second because this was",
    "start": "4443840",
    "end": "4450320"
  },
  {
    "text": "a trading system and it was just going bang bang bang bang bang get the stock update get the stock update get the stock update and so what you're supposed",
    "start": "4450320",
    "end": "4457360"
  },
  {
    "text": "to do is say if diagnostic stock is enabled then do",
    "start": "4457360",
    "end": "4463840"
  },
  {
    "text": "the diagnostics.right so you don't incur the overhead and this",
    "start": "4463840",
    "end": "4469199"
  },
  {
    "text": "was really important because we wanted to put this everywhere in the application but we only wanted it active",
    "start": "4469199",
    "end": "4477199"
  },
  {
    "text": "if we turned the listener on with a line in config on a particular desktop machine we did",
    "start": "4477199",
    "end": "4484400"
  },
  {
    "text": "not want that overhead of creating objects and doing measuring and everything else",
    "start": "4484400",
    "end": "4490800"
  },
  {
    "text": "sorry five minutes yeah",
    "start": "4490800",
    "end": "4497840"
  },
  {
    "text": "are we supposed to have finished i thought we finished at 3 20.",
    "start": "4505360",
    "end": "4510640"
  },
  {
    "text": "[ __ ] me i talk i am so sorry",
    "start": "4510640",
    "end": "4515520"
  },
  {
    "text": "i thought we still anyway",
    "start": "4516719",
    "end": "4523320"
  },
  {
    "text": "go i am i am so so sorry um there there's a diagnostic source",
    "start": "4524400",
    "end": "4530000"
  },
  {
    "text": "analyzer oh i am the worst person in the entire world um what i'll do is i'll tweet that",
    "start": "4530000",
    "end": "4535920"
  },
  {
    "text": "with the ndc portal hashtag and you can go and look at it and maybe you can refine me and ask about it",
    "start": "4535920",
    "end": "4541440"
  },
  {
    "text": "honestly i've been looking at my watch been quite happily looking at my watch going i've got five minutes i'm really really sorry um go and grab coffee and",
    "start": "4541440",
    "end": "4547760"
  },
  {
    "text": "do the things and and have fun and um yeah i'll be back in here in an hour doing the.net rocks live and i'll do",
    "start": "4547760",
    "end": "4554960"
  },
  {
    "text": "stuff at the party and everything thank you very much for coming sorry for running over and i'll see you again",
    "start": "4554960",
    "end": "4562158"
  },
  {
    "text": "[ __ ]",
    "start": "4563920",
    "end": "4566920"
  }
]