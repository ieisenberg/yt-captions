[
  {
    "text": "it's 20 P now when's the all right good time start awesome good afternoon everyone",
    "start": "2399",
    "end": "9360"
  },
  {
    "text": "how's everyone enjoying NDC Sydney so far having fun see a couple of thums up yeah Woos awesome fantastic that's good",
    "start": "9360",
    "end": "16000"
  },
  {
    "text": "to hear uh my name is wi valer and in this talk we're going to talk about",
    "start": "16000",
    "end": "21960"
  },
  {
    "text": "implementing scalable messaging patterns in Azure now just a show of hands in the",
    "start": "21960",
    "end": "27359"
  },
  {
    "text": "room how many of you have worked with azure All Hands fantastic that's what we like",
    "start": "27359",
    "end": "32880"
  },
  {
    "text": "to see um how many of you are building kind of like distributed architectures working extensively with different",
    "start": "32880",
    "end": "38800"
  },
  {
    "text": "messaging services less hands well more hands oh yeah come fre um cool uh so",
    "start": "38800",
    "end": "45640"
  },
  {
    "text": "today this session's really going to it's really intended to go a little bit",
    "start": "45640",
    "end": "50920"
  },
  {
    "text": "deeper into some of the patents that we can actually Implement using um using different messaging services in Azure so",
    "start": "50920",
    "end": "58280"
  },
  {
    "text": "if you have that foundational knowledge I think I was chatting to a couple of you beforehand like you're in the right",
    "start": "58280",
    "end": "63480"
  },
  {
    "text": "place great uh we're not going to touch too much on the foundations we're just going to actually go a little bit deeper and try and see what patterns and",
    "start": "63480",
    "end": "70240"
  },
  {
    "text": "problems we can solve um using different messaging services in Azure a little",
    "start": "70240",
    "end": "75880"
  },
  {
    "text": "introduction of who I am uh I'm a lead software engineer at manal group uh",
    "start": "75880",
    "end": "81360"
  },
  {
    "text": "based out of Melbourne I used to live in Oakland but I moved to Melbourne last year it's great to be on this side of the the tasmin Melbourne's great love it",
    "start": "81360",
    "end": "89280"
  },
  {
    "text": "um I'm former Microsoft MVP and microsof uh but my primary um experience I've",
    "start": "89280",
    "end": "95680"
  },
  {
    "text": "been a net developer um working a variety of different industries from banking agriculture if you live in New",
    "start": "95680",
    "end": "101399"
  },
  {
    "text": "Zealand you're going to meet a couple of farmers here or there um writing code for them is something I didn't think I'd",
    "start": "101399",
    "end": "106680"
  },
  {
    "text": "ever do but here I am and also the health Industries and also health insurance as well so little bit of round",
    "start": "106680",
    "end": "112399"
  },
  {
    "text": "of experience um a former average rugby player as well I used to be a lot bigger than this um a little bit chubbier but",
    "start": "112399",
    "end": "119039"
  },
  {
    "text": "um yeah now I don't need to run into people I now just bash my head against the screen when my code doesn't work",
    "start": "119039",
    "end": "125880"
  },
  {
    "text": "so today uh we're going to start off with a little bit of difference um what",
    "start": "125880",
    "end": "131200"
  },
  {
    "text": "the difference is between events and messages um I know that's a really foundational question um I have had a",
    "start": "131200",
    "end": "136879"
  },
  {
    "text": "lot of conversations over my career uh chatting to Architects software Engineers who may get confused between",
    "start": "136879",
    "end": "144760"
  },
  {
    "text": "the two concepts um and then we're going to cover the messaging services available in azure the difference",
    "start": "144760",
    "end": "150840"
  },
  {
    "text": "between them and what purpose they serve uh and then we'll start diving into some",
    "start": "150840",
    "end": "156360"
  },
  {
    "text": "of the problems we might face when we're architecting systems and dealing with messages within our architectures and",
    "start": "156360",
    "end": "161720"
  },
  {
    "text": "how we can actually Implement patterns to solve those problems finally and then finally just go away with a few",
    "start": "161720",
    "end": "170000"
  },
  {
    "text": "takeaways so messages versus events um there's an important distinction between",
    "start": "170000",
    "end": "176720"
  },
  {
    "text": "services that deliver events and those that deliver messages so to take a step back a bit events are really lightweight",
    "start": "176720",
    "end": "183480"
  },
  {
    "text": "notifications that kind of indicate to us a condition or state that's uh been",
    "start": "183480",
    "end": "188519"
  },
  {
    "text": "changed when Publishers uh publish events they don't have any expectation on how that event is going to be handled",
    "start": "188519",
    "end": "195440"
  },
  {
    "text": "um they essentially say Something's Happened off you go and then the consumers of that event will essentially",
    "start": "195440",
    "end": "200680"
  },
  {
    "text": "say okay we're going to decide what we want to do of it events can be discreet or as part of a series so discret events",
    "start": "200680",
    "end": "207360"
  },
  {
    "text": "are really events that report State change and their actionable uh to move on consumers only need to know that",
    "start": "207360",
    "end": "213480"
  },
  {
    "text": "something happened um it has that information but not necessarily the data that triggered that event and then a",
    "start": "213480",
    "end": "219439"
  },
  {
    "text": "series of events are events where we can actually report conditions analyze them they're time ordered and interrelated uh",
    "start": "219439",
    "end": "226200"
  },
  {
    "text": "and consumers kind of need that sequence of events to analyze what happens uh",
    "start": "226200",
    "end": "231360"
  },
  {
    "text": "what happened next and then messages are really raw data produced by a service to be",
    "start": "231360",
    "end": "236680"
  },
  {
    "text": "consumed and stored elsewhere uh the publisher will have an expectation of how that consumer is going to handle the",
    "start": "236680",
    "end": "243000"
  },
  {
    "text": "message so there's a bit of a contract that exists between the two sides so going uh into our first kind of",
    "start": "243000",
    "end": "251000"
  },
  {
    "text": "um Azure service Azure event grid anyone work with Azure event grid extensively or even a little bit one hand it was a",
    "start": "251000",
    "end": "258639"
  },
  {
    "text": "very slow hand very like yes almost reluctantly no I'm just kidding um it's an inventing back plane that enables",
    "start": "258639",
    "end": "264919"
  },
  {
    "text": "event- driven reactive programming so it uses pubsub where Publishers will admit events um but have no expectation about",
    "start": "264919",
    "end": "271919"
  },
  {
    "text": "how those events are handled uh it's deeply integrated with Azure services so I wouldn't be surprised if some of you",
    "start": "271919",
    "end": "277240"
  },
  {
    "text": "who didn't put your hands up have actually used event grid because a lot of event grid is used for a lot of a services in the back end um but it can",
    "start": "277240",
    "end": "284880"
  },
  {
    "text": "also be integrated with uh third party Services um if you actually look at the",
    "start": "284880",
    "end": "289919"
  },
  {
    "text": "payload of events that are sent by event grid it doesn't contain the actual",
    "start": "289919",
    "end": "295120"
  },
  {
    "text": "object that was updated it just says Hey something happened so if a blobs um yeah",
    "start": "295120",
    "end": "300840"
  },
  {
    "text": "if a blob was created in Azure storage you get that event saying hey a blob's been created along with some metadata",
    "start": "300840",
    "end": "306520"
  },
  {
    "text": "like timestamps e tags all of that stuff it's available as p on Azure or if",
    "start": "306520",
    "end": "311560"
  },
  {
    "text": "you're running kubernetes uh with Azure Arc you can also use event grid that way as",
    "start": "311560",
    "end": "316759"
  },
  {
    "text": "well next is azure event hubs uh this is a big it's designed for Big Data",
    "start": "316759",
    "end": "322800"
  },
  {
    "text": "streaming platforms and invent uh ingestion Services it's really great for processing millions of events per second",
    "start": "322800",
    "end": "330639"
  },
  {
    "text": "it can capture retain replay telary and event stream data um and that data can",
    "start": "330639",
    "end": "336400"
  },
  {
    "text": "come from many concurrent sources it's made available to various stream processing infrastructures and analytic",
    "start": "336400",
    "end": "342600"
  },
  {
    "text": "services so out in the wild I've seen event hubs use extensively with uh",
    "start": "342600",
    "end": "348919"
  },
  {
    "text": "Cosmos DB asure synapse analytics um it's really great for those scenarios where you've got millions of events you",
    "start": "348919",
    "end": "354560"
  },
  {
    "text": "want to analyze them um it's also great for low latency um scenarios as well so",
    "start": "354560",
    "end": "360800"
  },
  {
    "text": "if you're working with millions of events and you need to process them quickly uh event hubs is really good for that they also come with a guarantee of",
    "start": "360800",
    "end": "367800"
  },
  {
    "text": "at least once delivery now a a service bus is a fully",
    "start": "367800",
    "end": "374840"
  },
  {
    "text": "managed Enterprise broker with message cues and also Pub sub topics um it's",
    "start": "374840",
    "end": "379919"
  },
  {
    "text": "designed for Enterprise applications they're going to need transactions message message ordering duplicate",
    "start": "379919",
    "end": "386479"
  },
  {
    "text": "detection and consistency and when we're working with cloud native applications service bus provides kind of reliable",
    "start": "386479",
    "end": "392919"
  },
  {
    "text": "State transition management for your business processes making it really ideal for those situations where you",
    "start": "392919",
    "end": "398120"
  },
  {
    "text": "have to handle messages that have extremely high value and they can't be lost or duplicated it's also good for",
    "start": "398120",
    "end": "403960"
  },
  {
    "text": "hybrid Cloud um Solutions as well I've been in teams in the past where we've kind of had to commute from on Prem to",
    "start": "403960",
    "end": "409720"
  },
  {
    "text": "the cloud and service bus can actually help connect those systems together it's",
    "start": "409720",
    "end": "414919"
  },
  {
    "text": "a broken message system so meaning that until consumers are actually ready to receive messages service bus will store",
    "start": "414919",
    "end": "421759"
  },
  {
    "text": "them uh in the me um in a topic or a queue and it has advanced messaging features like first in first out",
    "start": "421759",
    "end": "428280"
  },
  {
    "text": "capabilities batching sessions transactions dead lettering Etc which will go into detail about how you can",
    "start": "428280",
    "end": "434440"
  },
  {
    "text": "use these uh features Within These patents um you do get a guaranteed of at",
    "start": "434440",
    "end": "439639"
  },
  {
    "text": "least once delivery with messages um sent from service bus low battery that's good um and the option for order",
    "start": "439639",
    "end": "446440"
  },
  {
    "text": "delivery of your messages as well now storage cues are really considered",
    "start": "446440",
    "end": "452639"
  },
  {
    "text": "more a part of azure storage rather than part of the messaging infrastructure particularly from an aszure perspective",
    "start": "452639",
    "end": "458199"
  },
  {
    "text": "but they do provide that messaging functionality so it's it's worth chatting about it Q storage is really",
    "start": "458199",
    "end": "464800"
  },
  {
    "text": "designed for storing a large number number of uh messages that you can access via HTTP or https and these",
    "start": "464800",
    "end": "472000"
  },
  {
    "text": "contain millions of messages up to around 80 gb worth um within a que um we",
    "start": "472000",
    "end": "478560"
  },
  {
    "text": "see as just storage being used in um scenarios where you want to track progress of processing messages in a",
    "start": "478560",
    "end": "484479"
  },
  {
    "text": "queue so if you have a worker and it crashes and you need to pick up from where you left off another worker can",
    "start": "484479",
    "end": "489919"
  },
  {
    "text": "come in at that point and pick up those messages um it's also handy for when you require sured logs of all transactions",
    "start": "489919",
    "end": "496360"
  },
  {
    "text": "that are actually executed against your queue so just from a high level you can",
    "start": "496360",
    "end": "501800"
  },
  {
    "text": "see that there's a variety of different messaging services that Azure provides uh serving different purposes uh some",
    "start": "501800",
    "end": "508319"
  },
  {
    "text": "work better for events and then some are um designed better for handling messages and for those Enterprise",
    "start": "508319",
    "end": "514279"
  },
  {
    "text": "applications so some of the questions that we might ask ourselves when we're actually building our systems is okay",
    "start": "514279",
    "end": "520039"
  },
  {
    "text": "are we dealing with messages or events are we reacting to events are we processing events do we need kind of",
    "start": "520039",
    "end": "526360"
  },
  {
    "text": "those Advanced capabilities like ordering do we need it sessions transactions how many events and",
    "start": "526360",
    "end": "532519"
  },
  {
    "text": "messages do we need to process I've seen and have been in a couple of teams where",
    "start": "532519",
    "end": "537800"
  },
  {
    "text": "we've used event hubs for some something where maybe Service Plus was a little bit more suitable um and vice versa uh",
    "start": "537800",
    "end": "544600"
  },
  {
    "text": "and do we need to architect our systems to kind of handle events or messages are there Parts where okay we just need to",
    "start": "544600",
    "end": "550680"
  },
  {
    "text": "know something happened and we can go and react however we like or do we need messages for those kind of advanced",
    "start": "550680",
    "end": "557480"
  },
  {
    "text": "features and as I kind of continue and move on in my career the my best answer",
    "start": "557480",
    "end": "563440"
  },
  {
    "text": "that I've had to every technical question is it depends um this is kind of the it depends approach you may find",
    "start": "563440",
    "end": "570440"
  },
  {
    "text": "that you'll use multiple or different Services together to fulfill different roles um so you may want to link all",
    "start": "570440",
    "end": "577720"
  },
  {
    "text": "these Services together to kind of create a data pipeline so something might happen within Azure resource you",
    "start": "577720",
    "end": "583120"
  },
  {
    "text": "might want to capture that with event grid and processor that and send that event to event Hub there's it's",
    "start": "583120",
    "end": "589519"
  },
  {
    "text": "important as we go through some of these problems and patents I'm going to talk about today to realize that it's not one",
    "start": "589519",
    "end": "595839"
  },
  {
    "text": "size fits all there are different Fe um services Azure that serve different",
    "start": "595839",
    "end": "602600"
  },
  {
    "text": "purposes awesome so that's kind of just like a quick tour of of azure messaging",
    "start": "602600",
    "end": "608440"
  },
  {
    "text": "um so what I'm going to do now is go through some of the problems that we might face when building or architecting",
    "start": "608440",
    "end": "614240"
  },
  {
    "text": "um our applications using messages and then just talk about some of the patterns that um solve these",
    "start": "614240",
    "end": "619839"
  },
  {
    "text": "problems so the first problem we might have is when we're sending messages or events to different consumers is who's",
    "start": "619839",
    "end": "625839"
  },
  {
    "text": "interested in this um so in distributed architect systems will need to provide",
    "start": "625839",
    "end": "631120"
  },
  {
    "text": "information to other systems when stuff happens um and asynchronous me messaging",
    "start": "631120",
    "end": "636880"
  },
  {
    "text": "is great is a great way to actually decouple senders from consumers uh to avoid blocking senders to waiting for a",
    "start": "636880",
    "end": "643079"
  },
  {
    "text": "response from a um from a consumer um however if we try to",
    "start": "643079",
    "end": "649680"
  },
  {
    "text": "dedicate um a consumer for each or dedicate a q sorry for each consumer",
    "start": "649680",
    "end": "655360"
  },
  {
    "text": "this isn't going to scale too well um because you might have numerous consumers and then provisioning cues for",
    "start": "655360",
    "end": "660839"
  },
  {
    "text": "each one of those consumers that's going to introduce a lot of overhead and um it's going to be very difficult to",
    "start": "660839",
    "end": "667079"
  },
  {
    "text": "manage so we need a method of sending events to all who are interested all the",
    "start": "667079",
    "end": "672160"
  },
  {
    "text": "consumers who are interested without necessarily knowing who they are so this is where good old pubsub really comes in",
    "start": "672160",
    "end": "678920"
  },
  {
    "text": "or publish subscribe model comes in here we introduce an A A synchronous mesing",
    "start": "678920",
    "end": "684480"
  },
  {
    "text": "subsystem um where we have an input Channel that's used by the publisher and then we have an output Pub uh messaging",
    "start": "684480",
    "end": "691360"
  },
  {
    "text": "Channel per sub consumer which we refer to as subscribers so the mechanism for",
    "start": "691360",
    "end": "696880"
  },
  {
    "text": "copying each message from our input Channel or from our publisher to all of our interested subscribers um is",
    "start": "696880",
    "end": "704120"
  },
  {
    "text": "typically handled by our message broker so when we think about this from an Azure",
    "start": "704120",
    "end": "709639"
  },
  {
    "text": "perspective we could have an Azure function that publishes messages to a service bus topic and then multiple aure",
    "start": "709639",
    "end": "716639"
  },
  {
    "text": "functions could um subscribe to that particular ular C uh topic and each subscriber will receive a copy of that",
    "start": "716639",
    "end": "723920"
  },
  {
    "text": "message from the topic so all from an Azure perspective that the consumers are",
    "start": "723920",
    "end": "729040"
  },
  {
    "text": "really worried about is can I subscribe to this um subscribe to this topic topic",
    "start": "729040",
    "end": "734480"
  },
  {
    "text": "and then the publisher just posts a message to the topic without having to worry okay who are these specific",
    "start": "734480",
    "end": "739880"
  },
  {
    "text": "consumers that this message needs to go out to and with this we actually get the",
    "start": "739880",
    "end": "746360"
  },
  {
    "text": "benefit of kind of decoupling our systems that need to communicate with each other uh if anything happens to a",
    "start": "746360",
    "end": "752279"
  },
  {
    "text": "particular subscriber we can use the message broker to handle the messages that can't be picked up so if we're",
    "start": "752279",
    "end": "758320"
  },
  {
    "text": "taking example from the queue um if a consumer needs uh crashes for whatever",
    "start": "758320",
    "end": "763680"
  },
  {
    "text": "reason that message can stay on the Queue you can also stay on the topic as well this pattern will also give us some",
    "start": "763680",
    "end": "770160"
  },
  {
    "text": "control about how we uh process um messages as well subscribers don't necessarily have to immediately pick up",
    "start": "770160",
    "end": "776519"
  },
  {
    "text": "messages from the queue itself we can pick up messages with off peak hours or at a certain",
    "start": "776519",
    "end": "782399"
  },
  {
    "text": "schedule we'll talk a little bit about scalability and reliability under load in the moment because there are",
    "start": "782399",
    "end": "788040"
  },
  {
    "text": "different patterns that we can use for that but essentially deferring communication responsibilities to the",
    "start": "788040",
    "end": "793320"
  },
  {
    "text": "message broker can take away handling um the responsibility of handling load the delivery of our messages Etc and allow",
    "start": "793320",
    "end": "800959"
  },
  {
    "text": "the application to focus on its core capabilities integration between these",
    "start": "800959",
    "end": "806760"
  },
  {
    "text": "subsystems becomes a lot simpler because all we need to really do is interact with the message bus so a producer of a",
    "start": "806760",
    "end": "813320"
  },
  {
    "text": "message doesn't need to worry about the semantics about how um the consum is going to pick up the message that all",
    "start": "813320",
    "end": "819240"
  },
  {
    "text": "its responsibility really focused on is publish something to a queue and then the consumer's like I'll pick up",
    "start": "819240",
    "end": "824639"
  },
  {
    "text": "something from the queue and then do the work there are some things that we do",
    "start": "824639",
    "end": "829720"
  },
  {
    "text": "need to keep in mind how we handle the subscribers um ideally we need to be",
    "start": "829720",
    "end": "835839"
  },
  {
    "text": "flexible enough to allow consumers to unsubscribe from the channels when needed we also need to keep Security in",
    "start": "835839",
    "end": "841880"
  },
  {
    "text": "mind as well who is actually authorized to listen to a queue or a topic becomes",
    "start": "841880",
    "end": "846959"
  },
  {
    "text": "a um a point of conversation with your security team if you're concerned about",
    "start": "846959",
    "end": "852440"
  },
  {
    "text": "ordering and priority we'll talk about some patterns in um in a moment that can handle that but essentially throughout",
    "start": "852440",
    "end": "858759"
  },
  {
    "text": "all of these patterns particularly this one you need to start designing your systems to be either imp potent to",
    "start": "858759",
    "end": "864079"
  },
  {
    "text": "remove any dependencies on order handling if um if that's an issue",
    "start": "864079",
    "end": "869959"
  },
  {
    "text": "handling poisoning uh poison messages as well um requires a dead letter CU um so",
    "start": "869959",
    "end": "875240"
  },
  {
    "text": "you can turn return the messages back to the queue if something fails rather than causing your consumer instance to fail",
    "start": "875240",
    "end": "881399"
  },
  {
    "text": "so if something's not quite right with your message or it's Mal U Mal formed having a dead Le queue that you can send",
    "start": "881399",
    "end": "886720"
  },
  {
    "text": "messages back to will help um will prevent failures within your",
    "start": "886720",
    "end": "892199"
  },
  {
    "text": "consumers we'll talk a little bit about scaling a little bit about how we can um Implement some patents to actually scale",
    "start": "892199",
    "end": "898519"
  },
  {
    "text": "out consum consumers because there's some um different or there are different patterns that we can use to do that um",
    "start": "898519",
    "end": "904880"
  },
  {
    "text": "and then also communication within Pub sub is uh uni uh unidirectional uh which",
    "start": "904880",
    "end": "910680"
  },
  {
    "text": "brings us to our next pattern or next problem is that do we need a response",
    "start": "910680",
    "end": "915959"
  },
  {
    "text": "there are some uh scenarios where you will kick off some work um and we'll",
    "start": "915959",
    "end": "921880"
  },
  {
    "text": "need an immediate response um that something has happened or a message has been received um now we",
    "start": "921880",
    "end": "929360"
  },
  {
    "text": "may have uh an API that gets an immediate response with a particular status code so 200 404 Etc uh and most",
    "start": "929360",
    "end": "937079"
  },
  {
    "text": "of the time the responses to those kind of calls are very very quick however as part of the API call or whatever um work",
    "start": "937079",
    "end": "944279"
  },
  {
    "text": "that we're doing to initiate some work we'll actually initiate background tasks that takes longer so seconds minutes",
    "start": "944279",
    "end": "950199"
  },
  {
    "text": "even hours so in these situations it doesn't make sense for us to kind of make the request and then expect and",
    "start": "950199",
    "end": "956720"
  },
  {
    "text": "then to wait for a response since that going to be long um background processing",
    "start": "956720",
    "end": "963120"
  },
  {
    "text": "work so a solution to this um is really through acnc um request and reply for HD",
    "start": "963120",
    "end": "969040"
  },
  {
    "text": "polling uh this is useful for client side code um as it can be difficult to provide callback endpoints or long use",
    "start": "969040",
    "end": "975880"
  },
  {
    "text": "long running connections so here a client application will make a call to",
    "start": "975880",
    "end": "981440"
  },
  {
    "text": "an a um API that actually triggers the um long running operation in the background the API will um kind of send",
    "start": "981440",
    "end": "989720"
  },
  {
    "text": "a response as quickly as possible this is usually HTTP 202 so accepted um to",
    "start": "989720",
    "end": "994959"
  },
  {
    "text": "tell us that the request has been received and now we're going to kick off some processing that response should hold a",
    "start": "994959",
    "end": "1001279"
  },
  {
    "text": "location reference uh to pointing to an endpoint that we can poke consistently to uh check the status of that long",
    "start": "1001279",
    "end": "1007880"
  },
  {
    "text": "running operation and in the background this API will actually um offload the processing",
    "start": "1007880",
    "end": "1014959"
  },
  {
    "text": "to another component that will complete uh the long process um background processing work such as a message CU and",
    "start": "1014959",
    "end": "1021800"
  },
  {
    "text": "then once that work is complete the status endpoint can either return a resource that indicates okay this has",
    "start": "1021800",
    "end": "1027720"
  },
  {
    "text": "been completed or redirects to another resource URL so looking at how we could implement",
    "start": "1027720",
    "end": "1033640"
  },
  {
    "text": "this in Azure say we've got a client application that's making a call to an API it will send a message to a queue",
    "start": "1033640",
    "end": "1039760"
  },
  {
    "text": "that kicks off the background processing work and then in the meantime we have another um status endpoint that's um",
    "start": "1039760",
    "end": "1046038"
  },
  {
    "text": "been provided through the web API so to check the status of that work we continuously pull that status endpoint",
    "start": "1046039",
    "end": "1053160"
  },
  {
    "text": "who will say for example this background processor is writing results to a blob storage",
    "start": "1053160",
    "end": "1059520"
  },
  {
    "text": "um that status endpoint can query that endpoint to check for um to see if that",
    "start": "1059520",
    "end": "1066080"
  },
  {
    "text": "file has been written to storage now some things to consider um",
    "start": "1066080",
    "end": "1072880"
  },
  {
    "text": "with that um initial um accepted response you should kind of indicate in the header okay where",
    "start": "1072880",
    "end": "1079640"
  },
  {
    "text": "um where should I Poll for the response and how long so um you should have retry",
    "start": "1079640",
    "end": "1084760"
  },
  {
    "text": "um after headers within your uh response so consumers know okay where should I",
    "start": "1084760",
    "end": "1091120"
  },
  {
    "text": "Poll for location um for the background work and how long can I continue to pull this to make uh to uh make sure that the",
    "start": "1091120",
    "end": "1099039"
  },
  {
    "text": "work's been done um and what progress that long status code that status is um",
    "start": "1099039",
    "end": "1105039"
  },
  {
    "text": "this is great for client side code where it's or this pattern is great for client side code where it's difficult to provide those kind of callback endpoints",
    "start": "1105039",
    "end": "1111760"
  },
  {
    "text": "or long running connections um where it adds too much uh complexity so it's not",
    "start": "1111760",
    "end": "1117159"
  },
  {
    "text": "suitable for kind of real-time streaming scenarios or asynchronous notifications and if your clients need to collect a",
    "start": "1117159",
    "end": "1123320"
  },
  {
    "text": "lot of results and latency is important this pattern's not um fantastic for that",
    "start": "1123320",
    "end": "1129880"
  },
  {
    "text": "either now some of the messages we deal with in architecture uh may be very large so if you're working with images",
    "start": "1130080",
    "end": "1137200"
  },
  {
    "text": "sound files these files uh could be or these messages could be extremely large",
    "start": "1137200",
    "end": "1142400"
  },
  {
    "text": "sending them directly to the bus is not recommended because the larger um your",
    "start": "1142400",
    "end": "1147600"
  },
  {
    "text": "message is the more resources the more bandwidth you're going to consume uh which can cause bottlenecks within your",
    "start": "1147600",
    "end": "1154000"
  },
  {
    "text": "solution now Azure um messaging services in Azure have limits on how big your",
    "start": "1154000",
    "end": "1159080"
  },
  {
    "text": "message can be because essentially they're designed to handle a huge quantity of small",
    "start": "1159080",
    "end": "1165240"
  },
  {
    "text": "messages so just having a look at some of the limits um in Azure you might think that if you have to deal with",
    "start": "1165240",
    "end": "1171559"
  },
  {
    "text": "large messages now and then you can just solve the problem um by just scaling up it's my boss's problem he can pay for or",
    "start": "1171559",
    "end": "1178080"
  },
  {
    "text": "she can pay for um um uh higher tiar uh for our message broker this isn't going",
    "start": "1178080",
    "end": "1184960"
  },
  {
    "text": "to make you any friends I know that from experience um nor is it a practical way",
    "start": "1184960",
    "end": "1190000"
  },
  {
    "text": "to kind of deal with large messages so a pattern that we can use to kind of uh solve this problem is the claim check",
    "start": "1190000",
    "end": "1197039"
  },
  {
    "text": "pattern this can this is also referred to as reference-based messaging and the solution here is to",
    "start": "1197039",
    "end": "1203919"
  },
  {
    "text": "split your message into two parts um the claim check or a reference and the payload of the message the idea here is",
    "start": "1203919",
    "end": "1211039"
  },
  {
    "text": "you store the payload of the message into an external service such as a database you get the reference of that",
    "start": "1211039",
    "end": "1217039"
  },
  {
    "text": "message and then you send that to the bus this reference acts as like a claim",
    "start": "1217039",
    "end": "1222360"
  },
  {
    "text": "check hence the name of the pattern uh and a consumer can use that to retrieve the payload from the data store",
    "start": "1222360",
    "end": "1229240"
  },
  {
    "text": "so this is really useful for when we do deal with large messages um and we don't",
    "start": "1229240",
    "end": "1234440"
  },
  {
    "text": "want to send them directly to the bus or we can't send them to the bus directly because they're too large um and it's",
    "start": "1234440",
    "end": "1240960"
  },
  {
    "text": "also useful for situations where we want to authorize um particular only particular services or a subset of our",
    "start": "1240960",
    "end": "1247200"
  },
  {
    "text": "services to access the payload so by offloading it to an external resource you can apply strictor authentication",
    "start": "1247200",
    "end": "1253400"
  },
  {
    "text": "authorization rules in place to ensure that the payload is stored securely within the database",
    "start": "1253400",
    "end": "1260600"
  },
  {
    "text": "some things to keep in mind when you're using the claim check pattern um if you don't need to Archive the message",
    "start": "1260880",
    "end": "1266559"
  },
  {
    "text": "payload you need to think about how you're going to manage that particular piece of data and consider its lifetime",
    "start": "1266559",
    "end": "1272000"
  },
  {
    "text": "do you want it sitting there in the database for any archival processes or once um your consumers have kind of done",
    "start": "1272000",
    "end": "1278840"
  },
  {
    "text": "what they needed to do with the payload do we need to delete it so just think about data management there save a bit",
    "start": "1278840",
    "end": "1284200"
  },
  {
    "text": "of money and um all that good stuff because we've stored the payload",
    "start": "1284200",
    "end": "1289840"
  },
  {
    "text": "of the data elsewhere there do there will be um you do need to consider the",
    "start": "1289840",
    "end": "1295799"
  },
  {
    "text": "additional overhead and latency that that external service involves um so because you've provisioned um",
    "start": "1295799",
    "end": "1303840"
  },
  {
    "text": "since you're storing in another database um it's essentially another resource that you actually have to manage now you",
    "start": "1303840",
    "end": "1310440"
  },
  {
    "text": "may not want to use a claim check for every single message that gets passed to the bus you may be dealing with large me",
    "start": "1310440",
    "end": "1316600"
  },
  {
    "text": "uh messages once in a while uh so you might want to include logic within your application to deal with messages that",
    "start": "1316600",
    "end": "1323480"
  },
  {
    "text": "are too large for your bus this is a conditional claim check as well so you don't have to apply the claim check to",
    "start": "1323480",
    "end": "1329840"
  },
  {
    "text": "every single message just messages that are too large for your bus um to",
    "start": "1329840",
    "end": "1336559"
  },
  {
    "text": "handle so prioritizing background processes um we touched a little bit on",
    "start": "1337240",
    "end": "1343320"
  },
  {
    "text": "background processors earlier uh in your architecture there are going to be some",
    "start": "1343320",
    "end": "1349120"
  },
  {
    "text": "tasks that are more important to deal with uh than others the order in which requests are usually received aren't too",
    "start": "1349120",
    "end": "1356919"
  },
  {
    "text": "important but there are going to be cases um within your applications where they'll have different priorities so you",
    "start": "1356919",
    "end": "1363000"
  },
  {
    "text": "need to process them faster than lower priority tasks now priority could mean",
    "start": "1363000",
    "end": "1368679"
  },
  {
    "text": "different things to different scenarios um it could apply to the task itself um",
    "start": "1368679",
    "end": "1374320"
  },
  {
    "text": "if you're working with multi-tenor systems it could apply to different users or tenants um of your system so",
    "start": "1374320",
    "end": "1381440"
  },
  {
    "text": "say if you've got some customers who are have a premium subscription and you need them to process their orders quicker uh",
    "start": "1381440",
    "end": "1388080"
  },
  {
    "text": "that could be their higher priority uh customers compared to lower priority customers it could be a mixture of the",
    "start": "1388080",
    "end": "1395919"
  },
  {
    "text": "two so this is where the priority Q pattern comes in now Q's work on a first",
    "start": "1395919",
    "end": "1401440"
  },
  {
    "text": "in first out basis and consumers receive messages in the same order that they're posted to the queue however some cues",
    "start": "1401440",
    "end": "1409279"
  },
  {
    "text": "support priority messaging so essentially your application when it sends a message will assign a priority",
    "start": "1409279",
    "end": "1415760"
  },
  {
    "text": "to that message and messages in the queue are then reordered so that those",
    "start": "1415760",
    "end": "1420880"
  },
  {
    "text": "that have a higher priority are received um before those that have a lower",
    "start": "1420880",
    "end": "1427000"
  },
  {
    "text": "priority however in Azure there's no native support for automatic prioritization of messages via sorting",
    "start": "1427000",
    "end": "1433960"
  },
  {
    "text": "so in service bus this is where you can use topics and filtering on and topics",
    "start": "1433960",
    "end": "1439200"
  },
  {
    "text": "um to kind of implement this so using topics you can create subscriptions that support queuing",
    "start": "1439200",
    "end": "1445400"
  },
  {
    "text": "mechanisms that support uh provides message filtering uh you can use topics that an application um can post messages",
    "start": "1445400",
    "end": "1452159"
  },
  {
    "text": "to and then within the metadata of that message you can assign priority to that message so you can say this is a high",
    "start": "1452159",
    "end": "1458600"
  },
  {
    "text": "priority message this is a low priority message and then that message can you can be filtered on within service bus",
    "start": "1458600",
    "end": "1465320"
  },
  {
    "text": "and then high priority consumers can listen to that particular subscription and do their processing work and then",
    "start": "1465320",
    "end": "1470880"
  },
  {
    "text": "lower priority ones would listen to lower priority um now you may think or you may",
    "start": "1470880",
    "end": "1477799"
  },
  {
    "text": "be sitting there thinking well isn't this essentially we're just adding more resources this is more overhead",
    "start": "1477799",
    "end": "1483960"
  },
  {
    "text": "um how are we're going to manage all of this um this is actually kind of design this is an",
    "start": "1483960",
    "end": "1490440"
  },
  {
    "text": "intentional design from Azure so this guy Clemens of vs principal architect of",
    "start": "1490440",
    "end": "1496559"
  },
  {
    "text": "messaging at Microsoft basically I wrote a blog post um about",
    "start": "1496559",
    "end": "1502120"
  },
  {
    "text": "the priority Q last month and he actually replied to me um on this where a queue with built-in priority sorting",
    "start": "1502120",
    "end": "1509600"
  },
  {
    "text": "um is not implemented by Design so Microsoft have really taken the approach that for higher priority tasks or",
    "start": "1509600",
    "end": "1516399"
  },
  {
    "text": "tenants we should separate up cues so the analogy of kind of this the uses here about airport processing is that",
    "start": "1516399",
    "end": "1524399"
  },
  {
    "text": "for higher priority messages we send them to a dedicated queue and we prioritize the processing of",
    "start": "1524399",
    "end": "1531360"
  },
  {
    "text": "those messages um and this depending on how you rank priority it the advantages",
    "start": "1531360",
    "end": "1537159"
  },
  {
    "text": "to this you can be a little bit more granular you can assign different priority um priority levels to your",
    "start": "1537159",
    "end": "1543480"
  },
  {
    "text": "messaging if priority changes over the life cycle of your application it then becomes at the resource level where you",
    "start": "1543480",
    "end": "1549440"
  },
  {
    "text": "can decommission some cues introduce different priorities say if you're doing um different offer types as part of a",
    "start": "1549440",
    "end": "1557320"
  },
  {
    "text": "subscription then you can kind of um split your cues and uh subscriptions",
    "start": "1557320",
    "end": "1562960"
  },
  {
    "text": "that way within service bus so taking this approach each queue",
    "start": "1562960",
    "end": "1569440"
  },
  {
    "text": "will have its own kind of like separate pools of consumers so you've got your pool of consumers for high priority",
    "start": "1569440",
    "end": "1575000"
  },
  {
    "text": "messages and um consumers for lower priority messages and this allows you to",
    "start": "1575000",
    "end": "1580080"
  },
  {
    "text": "be a little bit um Implement some a little bit be a little bit more clever about how you manage your pool of",
    "start": "1580080",
    "end": "1585840"
  },
  {
    "text": "consumers so your higher priority cues can run on a larger pool of consumers that run on larger Hardware um than",
    "start": "1585840",
    "end": "1592559"
  },
  {
    "text": "lower priority of consumers so if you're low priority um consumers you could run on cheaper Hardware provision lower skes",
    "start": "1592559",
    "end": "1600399"
  },
  {
    "text": "um and while you're higher ones you can dedicate more resources to them another way you could implement this is to",
    "start": "1600399",
    "end": "1606600"
  },
  {
    "text": "implement a single pool of consumers that check for messages on higher priority cues first and then once those",
    "start": "1606600",
    "end": "1613559"
  },
  {
    "text": "higher priority messages have been processed you then start to fet fetch messages from lower priority cues um",
    "start": "1613559",
    "end": "1621559"
  },
  {
    "text": "once the higher ones have been processed now with the single pool approach you need to be a little bit",
    "start": "1621559",
    "end": "1627799"
  },
  {
    "text": "careful um because higher priority messages are always received and processed before lower priority ones",
    "start": "1627799",
    "end": "1633960"
  },
  {
    "text": "whereas here we've split the pools between different priority levels um you",
    "start": "1633960",
    "end": "1639720"
  },
  {
    "text": "don't want to get into a situation if you um couple all these pools together and you're just pulling um messages from",
    "start": "1639720",
    "end": "1645880"
  },
  {
    "text": "high priority cues that you don't forget to process lower priority cues uh priority messages um so don't um if",
    "start": "1645880",
    "end": "1654000"
  },
  {
    "text": "you're going to use a single pool of consumers just to read off uh the queue um just be mindful that your lower",
    "start": "1654000",
    "end": "1660519"
  },
  {
    "text": "priority messages aren't just left on the Queue never being touched and never being",
    "start": "1660519",
    "end": "1666919"
  },
  {
    "text": "processed so really when implementing a priority Q pattern the questions you might want to ask yourselves um when",
    "start": "1667200",
    "end": "1674039"
  },
  {
    "text": "thinking about prior um priority for your messages is okay do we assign priority to the type of tasks that we're",
    "start": "1674039",
    "end": "1681240"
  },
  {
    "text": "performing do we have multi are we building multi-tenanted uh systems where we have users or tenants that are more",
    "start": "1681240",
    "end": "1687559"
  },
  {
    "text": "important than others um with higher priority tasks do we need to process all",
    "start": "1687559",
    "end": "1693679"
  },
  {
    "text": "of them before lower priority tasks if so then maybe a single pool of consumers approach would work um if not then we",
    "start": "1693679",
    "end": "1702159"
  },
  {
    "text": "can start to kind of split our pool of consumers out to higher and lower priorities and then think about what kind of um infrastructure we're going to",
    "start": "1702159",
    "end": "1708640"
  },
  {
    "text": "use to support those um support those consumers um and then thinking about",
    "start": "1708640",
    "end": "1715799"
  },
  {
    "text": "yeah so with that we can think okay do we need to be clever about how we petition our um consumers for priority",
    "start": "1715799",
    "end": "1721159"
  },
  {
    "text": "and what kind of infrastructure uh do we need to process those messages",
    "start": "1721159",
    "end": "1727120"
  },
  {
    "text": "faster so the next problem that we can really think about is handling a large number of",
    "start": "1728120",
    "end": "1733559"
  },
  {
    "text": "requests uh and this is where we're going to now focus a little bit more on consumers of our message me so one",
    "start": "1733559",
    "end": "1739720"
  },
  {
    "text": "problem we may encounter is handling the large number of requests that come through our system and how we can",
    "start": "1739720",
    "end": "1745080"
  },
  {
    "text": "actually scale our consumers to handle that because rather than passing requests synchronously between Services",
    "start": "1745080",
    "end": "1752399"
  },
  {
    "text": "we're now implementing a message CU to deal with requests asynchronously and to ensure that our applications don't get",
    "start": "1752399",
    "end": "1758399"
  },
  {
    "text": "blocked while process is ongoing or processing of those messages is ongoing now the number of requests uh that our",
    "start": "1758399",
    "end": "1765000"
  },
  {
    "text": "applications receive can vary over time so you might have peak hours where you're experiencing a lot of traffic or",
    "start": "1765000",
    "end": "1771039"
  },
  {
    "text": "a lot of requests coming through um and other periods of time might be um very",
    "start": "1771039",
    "end": "1776960"
  },
  {
    "text": "low traffic and low have to deal with low messages the work performed by those tasks can also vary as well so you might",
    "start": "1776960",
    "end": "1784360"
  },
  {
    "text": "have to perform a lot of work you might be doing Simple tasks Etc if we have a single instance of our",
    "start": "1784360",
    "end": "1790720"
  },
  {
    "text": "consumer we can run into situations where it becomes flooded with requests",
    "start": "1790720",
    "end": "1796799"
  },
  {
    "text": "or even the messaging brok ER itself might be overloaded with messages now one approach that we could",
    "start": "1796799",
    "end": "1803880"
  },
  {
    "text": "uh take to kind of handle this is we could run multiple instances of the consumer but this is where we run into",
    "start": "1803880",
    "end": "1810080"
  },
  {
    "text": "challenges of making sure that they are coordinated so that a single message is delivered to a single",
    "start": "1810080",
    "end": "1816559"
  },
  {
    "text": "consumer we also need to consider how we're actually going to load balance across consumers to prevent a single",
    "start": "1816559",
    "end": "1822760"
  },
  {
    "text": "instance becoming a bottom neck to our entire application so the the answer to this is",
    "start": "1822760",
    "end": "1829240"
  },
  {
    "text": "using the message CU to kind of implement a communication Channel between an application and an instance",
    "start": "1829240",
    "end": "1834679"
  },
  {
    "text": "of a particular instance of a consumer service so this is uh what we refer to as Computing consumers um pattern where",
    "start": "1834679",
    "end": "1842240"
  },
  {
    "text": "applications will um post requests in form of messages to the queue and then instances of our consumer service",
    "start": "1842240",
    "end": "1849480"
  },
  {
    "text": "receive messages from the queue and process them so this approach allows the same pool of consumers to handle message",
    "start": "1849480",
    "end": "1856480"
  },
  {
    "text": "uh handle messages from our message um broker from any instance of the application this is a little different",
    "start": "1856480",
    "end": "1863000"
  },
  {
    "text": "from pubsub where all consumers will get past every single message in competing consumers each message is passed to a",
    "start": "1863000",
    "end": "1869600"
  },
  {
    "text": "single consumer now with Azure functions and service bus cues we can actually",
    "start": "1869600",
    "end": "1874960"
  },
  {
    "text": "implement this pattern really easily using triggers and bindings in Azure functions so service bus enables",
    "start": "1874960",
    "end": "1881159"
  },
  {
    "text": "consumers to use Peak lock mode when it retrieves a message from the queue so",
    "start": "1881159",
    "end": "1886279"
  },
  {
    "text": "what this does it what doesn't remember moove a message from the queue but it hides it from other consumers that could",
    "start": "1886279",
    "end": "1892080"
  },
  {
    "text": "be attempted to read from the queue so the functions runtime will receive the message in peock mode and if the",
    "start": "1892080",
    "end": "1898480"
  },
  {
    "text": "function successfully executes it completes the message um but if the function runs longer than the peak loock",
    "start": "1898480",
    "end": "1905279"
  },
  {
    "text": "period you can um essentially add or yeah add a timeout period to the peak clock um duration on your message that",
    "start": "1905279",
    "end": "1913880"
  },
  {
    "text": "lock is renewed as long as the function is running um now those of you who have worked with",
    "start": "1913880",
    "end": "1919600"
  },
  {
    "text": "Azure functions before um we can actually scale in and out based on the depth of our Q uh and multiple instances",
    "start": "1919600",
    "end": "1927000"
  },
  {
    "text": "of that function can independently pull and process messages from our que so what we achieve with the",
    "start": "1927000",
    "end": "1934279"
  },
  {
    "text": "consuming um competing consumers pattern is the ability to use the messaging queue to act as a buffer between our",
    "start": "1934279",
    "end": "1940960"
  },
  {
    "text": "producer and consumer and use it to kind of load level um the variation in volume",
    "start": "1940960",
    "end": "1946919"
  },
  {
    "text": "of requests we also get the benefit of improved reliability since we aren't sending",
    "start": "1946919",
    "end": "1952679"
  },
  {
    "text": "messages to a specific consumer so if that consumer instance of that consumer fails uh the producer isn't blocked from",
    "start": "1952679",
    "end": "1959519"
  },
  {
    "text": "doing further work then another instance of our consumer service can actually pick the message up from the messaging",
    "start": "1959519",
    "end": "1965080"
  },
  {
    "text": "uh message broker we also gain um the benefit of scalability here as consumers are able",
    "start": "1965080",
    "end": "1971320"
  },
  {
    "text": "to dynamically scale as the volume of messages um increase for transactional",
    "start": "1971320",
    "end": "1977279"
  },
  {
    "text": "read oper operations we gain a little bit of extra resiliency should we read and process messages as part of a",
    "start": "1977279",
    "end": "1983559"
  },
  {
    "text": "transactional process and a particular instance fails we can use the competing consumers to ensure that messages are",
    "start": "1983559",
    "end": "1990279"
  },
  {
    "text": "actually returned to the queue uh so that another consumer instance can come along and pick it up if you're running",
    "start": "1990279",
    "end": "1996679"
  },
  {
    "text": "into situations where your messages are continuously failing um my",
    "start": "1996679",
    "end": "2001919"
  },
  {
    "text": "recommendation is to utilize dead letter cues to actually return that message um to the dead letter que could be a poison",
    "start": "2001919",
    "end": "2008120"
  },
  {
    "text": "message um it could be any a number of reasons um if a particular message is",
    "start": "2008120",
    "end": "2014080"
  },
  {
    "text": "failing for multiple reasons it's better just to send it to the dead letter queue rather than sending it directly to the",
    "start": "2014080",
    "end": "2019960"
  },
  {
    "text": "queue to try and pick up um over and over again now the order of messages um that",
    "start": "2019960",
    "end": "2028000"
  },
  {
    "text": "are received aren't always guaranteed um so item potencies will be important to factor in here so if a consumer fails we",
    "start": "2028000",
    "end": "2035320"
  },
  {
    "text": "need to actually minimize the effect of um processing a message more than once will have malform messages and po or",
    "start": "2035320",
    "end": "2042799"
  },
  {
    "text": "poison messages may cause out instances to fail so like I said earlier we need to ensure that those messages aren't",
    "start": "2042799",
    "end": "2048839"
  },
  {
    "text": "returned to the queue so a consumer instance picks up and you just have the all these consumer instances failing um",
    "start": "2048839",
    "end": "2054720"
  },
  {
    "text": "you need to return that message elsewhere such as a dead Le queue so you can analyze it and see what's going",
    "start": "2054720",
    "end": "2060440"
  },
  {
    "text": "on now because in this with this pattern there's no direct communication between",
    "start": "2060440",
    "end": "2066000"
  },
  {
    "text": "the producer and the consumer um if we need to resend a result back uh from our",
    "start": "2066000",
    "end": "2071679"
  },
  {
    "text": "consumer to the producer saying yes this message has been picked up you're going to need a mechanism or a way to actually",
    "start": "2071679",
    "end": "2077960"
  },
  {
    "text": "do that that's accessible by both um so in Azure what you can do you can use work processes to send results back um",
    "start": "2077960",
    "end": "2086040"
  },
  {
    "text": "to the application using a dedicated message reply cue um but this does require correlation of the message um",
    "start": "2086040",
    "end": "2092720"
  },
  {
    "text": "between the two now for scaling we need to be mindful of messages overwhelming a",
    "start": "2092720",
    "end": "2099119"
  },
  {
    "text": "single Q uh in some cases what you can do is you can actually petition your broker to send message from specific",
    "start": "2099119",
    "end": "2105560"
  },
  {
    "text": "cons uh producers to specific cues or you can actually distribute messages across multiple message",
    "start": "2105560",
    "end": "2113760"
  },
  {
    "text": "cues so that covers kind of scaling from the consumer side um those situations",
    "start": "2113960",
    "end": "2119680"
  },
  {
    "text": "can be quite complex to handle particularly when it comes to actually petitioning consumers um of our messages",
    "start": "2119680",
    "end": "2125720"
  },
  {
    "text": "and these design choices aren't really true um because the more consumers you have the more orchestration is required the",
    "start": "2125720",
    "end": "2132079"
  },
  {
    "text": "more cues the more complexity if you find that your workloads are a lot simpler um just introducing a single cue",
    "start": "2132079",
    "end": "2139960"
  },
  {
    "text": "uh can actually help level the load between application instances and and other resources that are going to pick up messages from that queue so taking",
    "start": "2139960",
    "end": "2147359"
  },
  {
    "text": "the following example here I've got a bunch of app instances that are performing heavy rights to Azure Cosmos",
    "start": "2147359",
    "end": "2152800"
  },
  {
    "text": "DB for those of you who've worked with Azure Cosmos DB before if I say what a",
    "start": "2152800",
    "end": "2157839"
  },
  {
    "text": "429 error is you'll be familiar um that's essentially um too many requests",
    "start": "2157839",
    "end": "2164400"
  },
  {
    "text": "so we're essentially what our heavy rights are doing they're overwhelming that resources uh with concurrent",
    "start": "2164400",
    "end": "2170800"
  },
  {
    "text": "requests so what we can do here is Implement a queue to kind of level the load between our application instances",
    "start": "2170800",
    "end": "2177839"
  },
  {
    "text": "and the data store itself so we read messages from the queue and then perform the right requests from a single",
    "start": "2177839",
    "end": "2184640"
  },
  {
    "text": "instance now the trick to be mindful of here is how the consuming service",
    "start": "2184640",
    "end": "2190760"
  },
  {
    "text": "processes messages coming from the queue we need to implement logic that kind of controls the rate that we pass requests",
    "start": "2190760",
    "end": "2198000"
  },
  {
    "text": "to the data store otherwise all we've done is taken the pro um problem from our producers and pushed it further down",
    "start": "2198000",
    "end": "2204079"
  },
  {
    "text": "the line and added a Quee for no",
    "start": "2204079",
    "end": "2207920"
  },
  {
    "text": "reason so as you can probably guess implementing this logic to actually handle the rate that messages are being",
    "start": "2209319",
    "end": "2215599"
  },
  {
    "text": "sent uh needs to be tested make sure your resources aren't overwhelmed so that may introduce the need for more",
    "start": "2215599",
    "end": "2221839"
  },
  {
    "text": "cues and instances to handle your volume so you can test that by um doing some",
    "start": "2221839",
    "end": "2226920"
  },
  {
    "text": "performance tests on that to validate if your application logic is going to be able to control those requests being",
    "start": "2226920",
    "end": "2233040"
  },
  {
    "text": "sent to the data store that's going to be required again if you need a reply from",
    "start": "2233040",
    "end": "2238240"
  },
  {
    "text": "your service to say hey this message has been um uh processed and it needs to send that to the consumer you're going",
    "start": "2238240",
    "end": "2244119"
  },
  {
    "text": "to need to implement that yourself um and depending on how much load you actually experience uh you can",
    "start": "2244119",
    "end": "2251000"
  },
  {
    "text": "run into situations where your system is always queuing up more requests than your processing um this is where you",
    "start": "2251000",
    "end": "2257720"
  },
  {
    "text": "need to be mindful of the persistence um capabilities of your queue because you don't want to lose information if your",
    "start": "2257720",
    "end": "2263880"
  },
  {
    "text": "queue isn't un um your messaging broker isn't able to persist messages that are um sent to the",
    "start": "2263880",
    "end": "2271760"
  },
  {
    "text": "queue for whatever reason that your queue crashes uh or drops information messages will be lost",
    "start": "2271760",
    "end": "2278280"
  },
  {
    "text": "um and then autoscaling can introduce some interesting problems um in this pattern as well so if there's increased",
    "start": "2278280",
    "end": "2284400"
  },
  {
    "text": "contention for resources that um Services share that can effectively",
    "start": "2284400",
    "end": "2289440"
  },
  {
    "text": "cancel out the effectiveness of using the queue to level the",
    "start": "2289440",
    "end": "2294599"
  },
  {
    "text": "load so let's talk about ordering so often when we are dealing with messages",
    "start": "2294599",
    "end": "2300599"
  },
  {
    "text": "we'll need to process a sequence of messages in the order they arrived while still being able to scale out under the",
    "start": "2300599",
    "end": "2307480"
  },
  {
    "text": "increased loads so a good example is if you've um bought something online you might have paid for the um order you",
    "start": "2307480",
    "end": "2314319"
  },
  {
    "text": "want to track the order is the order delivered and these all need to happen within a sequence and in distributed",
    "start": "2314319",
    "end": "2320720"
  },
  {
    "text": "architectures this isn't always straightforward because workers will scale independently and pull messages",
    "start": "2320720",
    "end": "2326960"
  },
  {
    "text": "independently like we talked about in the competing consumers pattern so the way that we can solve",
    "start": "2326960",
    "end": "2333960"
  },
  {
    "text": "this is using a sequential Convoy pattern where we push related messages",
    "start": "2333960",
    "end": "2339319"
  },
  {
    "text": "into categories within the queuing system and then have the queue listeners kind of lock onto that category and only",
    "start": "2339319",
    "end": "2345720"
  },
  {
    "text": "pull messages from that category one message at a time now in service Bush there's a",
    "start": "2345720",
    "end": "2353040"
  },
  {
    "text": "feature called sessions that we can use to provide concurrent de multiplexing of interlead message streams while",
    "start": "2353040",
    "end": "2359400"
  },
  {
    "text": "preserving the guaranteed order delivery so essentially a session receiver uh is",
    "start": "2359400",
    "end": "2364880"
  },
  {
    "text": "created by clients once created uh accepting a session when the session is",
    "start": "2364880",
    "end": "2370040"
  },
  {
    "text": "accepted and got held by a client that client holds an exclusive lock on all",
    "start": "2370040",
    "end": "2375560"
  },
  {
    "text": "messages with that session ID in the queue or subscription it also holds exclusive",
    "start": "2375560",
    "end": "2381079"
  },
  {
    "text": "lock on all messages with the same uh session ID that will arrive uh within the queue so with the lock we can renew",
    "start": "2381079",
    "end": "2389480"
  },
  {
    "text": "it um should we need that session to stay alive um but once we no longer need",
    "start": "2389480",
    "end": "2394720"
  },
  {
    "text": "that session we can close it and discard a it um so think of the lifetime of an",
    "start": "2394720",
    "end": "2399839"
  },
  {
    "text": "order we can keep it um that session for Associated to a particular order ID um",
    "start": "2399839",
    "end": "2406079"
  },
  {
    "text": "and then once that order is completed it's delivered we're happy with what we bought we can close that um close that",
    "start": "2406079",
    "end": "2412560"
  },
  {
    "text": "session because we no longer need it so thinking about this in a practical",
    "start": "2412560",
    "end": "2419480"
  },
  {
    "text": "sense in Azure um we can implement the sequential Convoy pattern using sessions",
    "start": "2419480",
    "end": "2426520"
  },
  {
    "text": "and our consumers can utilize the peak loock functionality to receive messages from that particular session so using",
    "start": "2426520",
    "end": "2433040"
  },
  {
    "text": "our order tracking application we process each Ledger U message in the um order that it's received and then send",
    "start": "2433040",
    "end": "2440119"
  },
  {
    "text": "each transaction to another queue where we set that category to the order ID uh",
    "start": "2440119",
    "end": "2445400"
  },
  {
    "text": "that transaction doesn't span multiple orders so consumers that process that particular order can process um or",
    "start": "2445400",
    "end": "2453599"
  },
  {
    "text": "consumers that process orders can process um each category in p um parallel but in a first in first out",
    "start": "2453599",
    "end": "2459640"
  },
  {
    "text": "manner within that order so our Ledger processor function here takes processing",
    "start": "2459640",
    "end": "2465200"
  },
  {
    "text": "uh care of processing the transaction uh one at a time and then setting that session ID to the IDE of our",
    "start": "2465200",
    "end": "2472000"
  },
  {
    "text": "order our consumers will listen to the secondary queue where they process all messages with matching order IDs from",
    "start": "2472000",
    "end": "2478280"
  },
  {
    "text": "that Quee using peock mode so in that kind of scenario we used",
    "start": "2478280",
    "end": "2483920"
  },
  {
    "text": "our order ID as the category for your own scenarios you you need to kind of think about what property of um the",
    "start": "2483920",
    "end": "2489440"
  },
  {
    "text": "incoming message um you can use and you can scale out on and you should also consider how easy it is to add uh new",
    "start": "2489440",
    "end": "2496400"
  },
  {
    "text": "categories of messages to the system so using our ordering example for um using our ordering um example if we needed to",
    "start": "2496400",
    "end": "2503760"
  },
  {
    "text": "onboard a new customer could we have a set of of uh different processes that distribute the work uh for our different",
    "start": "2503760",
    "end": "2511280"
  },
  {
    "text": "customers for High throughput um scenarios we do need to think about kind of like a start and end property to the",
    "start": "2511280",
    "end": "2517640"
  },
  {
    "text": "message um do we need to sort it by time and then process it as a batch um if",
    "start": "2517640",
    "end": "2522680"
  },
  {
    "text": "it's very high uh if the throughput is very high the kind of uh first in first out requirements we may need to consider",
    "start": "2522680",
    "end": "2529839"
  },
  {
    "text": "that um and there's always that with this pattern there's no guarantee that messages are going to be won't be",
    "start": "2529839",
    "end": "2535640"
  },
  {
    "text": "received out of order um because there's Network latency um intermittent issues um those kind of uh Cloud um issues",
    "start": "2535640",
    "end": "2543119"
  },
  {
    "text": "still exist so one method you could use is kind of implement sequence numbers",
    "start": "2543119",
    "end": "2548319"
  },
  {
    "text": "for your messaging to kind of verify the order of your message um another thing",
    "start": "2548319",
    "end": "2554640"
  },
  {
    "text": "that you can use is kind of a flag to indicate okay this is the last message um of our uh sequence this is the last",
    "start": "2554640",
    "end": "2561440"
  },
  {
    "text": "one in our transaction so we just put that within the message metadata to indicate that this is the last",
    "start": "2561440",
    "end": "2568760"
  },
  {
    "text": "message so our final problem which we're going to discuss is handling distributed",
    "start": "2570319",
    "end": "2575960"
  },
  {
    "text": "transactions anyone here kind of handled or worked in scenarios where you've had to work with distributed",
    "start": "2575960",
    "end": "2581640"
  },
  {
    "text": "transactions is yeah it's uh it's painful uh one of the first jobs I had",
    "start": "2581640",
    "end": "2587680"
  },
  {
    "text": "coming out of um coming out of uni was working for a bank in New Zealand where",
    "start": "2587680",
    "end": "2593040"
  },
  {
    "text": "we're trying to build a payment system using microservices um someone upstairs drank the",
    "start": "2593040",
    "end": "2599880"
  },
  {
    "text": "Kool-Aid yep and we had distributed transactions everywhere and it was a",
    "start": "2599880",
    "end": "2605720"
  },
  {
    "text": "nightmare so talk about the good things first try and end the day on some positivity um so",
    "start": "2605720",
    "end": "2611440"
  },
  {
    "text": "using microservices having a database per microservice can provide the benefit um",
    "start": "2611440",
    "end": "2618359"
  },
  {
    "text": "for us at a microservice level so if we have a particular domain that's going to",
    "start": "2618359",
    "end": "2624040"
  },
  {
    "text": "and particular data within a microservice that uh has you know various Natures of you know heavy rights",
    "start": "2624040",
    "end": "2630760"
  },
  {
    "text": "heavy reads whatever we can use the best data store type and schema for that particular microservice",
    "start": "2630760",
    "end": "2638400"
  },
  {
    "text": "however if you think of all your microservices using various different types of data store trying to ensure",
    "start": "2638400",
    "end": "2643800"
  },
  {
    "text": "data consistencies across your architecture poses one or two absolute",
    "start": "2643800",
    "end": "2651839"
  },
  {
    "text": "nightmares and distributed transaction uh protocols like two-phase commit protocols require all participants in",
    "start": "2651839",
    "end": "2658839"
  },
  {
    "text": "the transaction to either commit or roll back before the transaction can proceed not all database Technologies not all",
    "start": "2658839",
    "end": "2665880"
  },
  {
    "text": "message broken Brokers are going to support this another problem that we",
    "start": "2665880",
    "end": "2671000"
  },
  {
    "text": "have um interprocess communication syn um availability that the operating",
    "start": "2671000",
    "end": "2676119"
  },
  {
    "text": "system uh provided IPC allows separate processes to share data for all of your",
    "start": "2676119",
    "end": "2682400"
  },
  {
    "text": "microservices to commit distributed transactions all of those Services must",
    "start": "2682400",
    "end": "2687680"
  },
  {
    "text": "be available and that's going to that's going to cause you a lot of sleepless",
    "start": "2687680",
    "end": "2693680"
  },
  {
    "text": "nights so one approach that we can take here or the approach that we can take is",
    "start": "2693680",
    "end": "2698920"
  },
  {
    "text": "perform a sequence of local transactions using a saga pattern so if you think about all of",
    "start": "2698920",
    "end": "2705720"
  },
  {
    "text": "your individual microservices each local transaction will be the overall Atomic work effort",
    "start": "2705720",
    "end": "2711599"
  },
  {
    "text": "committed by a particular participant in The Saga so each local transaction um",
    "start": "2711599",
    "end": "2716960"
  },
  {
    "text": "transaction will update the database and then publish a message or an event to the next um uh participant along saying",
    "start": "2716960",
    "end": "2724280"
  },
  {
    "text": "that the local transaction has been committed and you need to go and execute the next step if a local transaction",
    "start": "2724280",
    "end": "2730680"
  },
  {
    "text": "fails so say on service B here um uh our transactions should fail for any reason",
    "start": "2730680",
    "end": "2737680"
  },
  {
    "text": "the Saga then executes a series of compensating transactions that undo changes that were made by the previous",
    "start": "2737680",
    "end": "2744119"
  },
  {
    "text": "one in service a and there are different types of transactions that we can actually",
    "start": "2744119",
    "end": "2749920"
  },
  {
    "text": "Implement within the Saga so compensate uh compensating transactions so these",
    "start": "2749920",
    "end": "2755240"
  },
  {
    "text": "are transactions that can potentially be reversed by processing another transaction with the opposite effect um",
    "start": "2755240",
    "end": "2762520"
  },
  {
    "text": "we also have pivot transaction so this is kind of the go noo stage uh in The Saga if this commits essentially The",
    "start": "2762520",
    "end": "2769920"
  },
  {
    "text": "Saga will attempt to run until it's done or it could be the last compensating or first retryable uh transaction within",
    "start": "2769920",
    "end": "2776160"
  },
  {
    "text": "the Saga so if we say no go we then try and retry all the different transactions we made in Prior participants in The",
    "start": "2776160",
    "end": "2783119"
  },
  {
    "text": "Saga and then retriable transactions are essentially ones that just kind of uh",
    "start": "2783119",
    "end": "2788280"
  },
  {
    "text": "triy to reverse the local commits p u made on um prior local transactions now",
    "start": "2788280",
    "end": "2795200"
  },
  {
    "text": "there are two common uh implementations of The Saga pattern um that I'll discuss",
    "start": "2795200",
    "end": "2800920"
  },
  {
    "text": "today so the first one is orchestration so orchestration is a way",
    "start": "2800920",
    "end": "2807280"
  },
  {
    "text": "to coordinate sagas where there's a centralized controller and it tells the Saga participants what local",
    "start": "2807280",
    "end": "2814200"
  },
  {
    "text": "transactions to execute the orchestra here will handle all the transactions",
    "start": "2814200",
    "end": "2819800"
  },
  {
    "text": "and tell the participants which operation to perform based on events the orchestrator will then ex um",
    "start": "2819800",
    "end": "2826800"
  },
  {
    "text": "execute Saga requests stores and interprets the state of each task whether it's failed or not and if it has",
    "start": "2826800",
    "end": "2833200"
  },
  {
    "text": "been any failures it will handle that by using compensating transactions and this is really good for",
    "start": "2833200",
    "end": "2840400"
  },
  {
    "text": "situations where you have quite complex and complicated workflows um CU you get",
    "start": "2840400",
    "end": "2846119"
  },
  {
    "text": "control over every participant in the process as a central controller essentially controlling every um",
    "start": "2846119",
    "end": "2851400"
  },
  {
    "text": "participant if you have numerous participants um a good way to kind of handle all of them is VI an orchestrator",
    "start": "2851400",
    "end": "2857640"
  },
  {
    "text": "there's no cyclical dependencies and Saga participants don't need to know about other um participants all they're",
    "start": "2857640",
    "end": "2864319"
  },
  {
    "text": "concerned about is what the orchestrator tells them to do however with that orchestration um",
    "start": "2864319",
    "end": "2871400"
  },
  {
    "text": "there is additional design complexity that we introduce because there has to be coordination um um within the",
    "start": "2871400",
    "end": "2877880"
  },
  {
    "text": "orchestrator to make sure that the workflow is being followed as um as intended and also the orchestrator",
    "start": "2877880",
    "end": "2885160"
  },
  {
    "text": "becomes the point of failure it's managing the entire workflow so it becomes a central point of your um appc",
    "start": "2885160",
    "end": "2892359"
  },
  {
    "text": "um of your architecture that becomes the point of failure so for more simple workflows we",
    "start": "2892359",
    "end": "2898079"
  },
  {
    "text": "can actually Implement uh choreography so here we coordinate sagas",
    "start": "2898079",
    "end": "2903200"
  },
  {
    "text": "where participants exchange events without that centralized point of control so each local transaction will",
    "start": "2903200",
    "end": "2910000"
  },
  {
    "text": "publish an event that triggers local transactions in other services so a client for example a",
    "start": "2910000",
    "end": "2917559"
  },
  {
    "text": "client could publish a request to a message quue and then as messages arrive they publish two subscribers interested",
    "start": "2917559",
    "end": "2924400"
  },
  {
    "text": "in that particular message each subscriber will do its own thing and respond to the message cube with a",
    "start": "2924400",
    "end": "2930079"
  },
  {
    "text": "success or failure of that particular operation this way the services rather",
    "start": "2930079",
    "end": "2935440"
  },
  {
    "text": "than relying on a central Orchestra Ator they'll actually choreograph the workflow amongst themselves without",
    "start": "2935440",
    "end": "2940680"
  },
  {
    "text": "having depend to depend on that orchestrator or having direct communication between",
    "start": "2940680",
    "end": "2947440"
  },
  {
    "text": "them and this is really great for simple workflows that don't require that coordination logic because there's no",
    "start": "2947440",
    "end": "2954319"
  },
  {
    "text": "orchestrator there we don't require additional service implementation and maintenance of that orchestrator as well",
    "start": "2954319",
    "end": "2960440"
  },
  {
    "text": "so we remove that single point of failure since now the responsibility for executing that workflow is just",
    "start": "2960440",
    "end": "2966720"
  },
  {
    "text": "distributed amongst all participants within the Saga however and this is one of the",
    "start": "2966720",
    "end": "2972119"
  },
  {
    "text": "situations that we've kind of fell into um or Fallen to a couple of times as",
    "start": "2972119",
    "end": "2977400"
  },
  {
    "text": "your workflow grows as you add more services um into your architecture adding more participants the complexity",
    "start": "2977400",
    "end": "2984040"
  },
  {
    "text": "increases and it becomes difficult for your Saga to um to to track what your",
    "start": "2984040",
    "end": "2989880"
  },
  {
    "text": "Saga participants what commands are going to be listening to what events they should be subscribed in ETC here there is a risk of",
    "start": "2989880",
    "end": "2997880"
  },
  {
    "text": "s cycle dependencies between the Saga participants uh because they have to",
    "start": "2997880",
    "end": "3003000"
  },
  {
    "text": "they could run into situations where they have to consume each other's commands um and then finally integration",
    "start": "3003000",
    "end": "3009520"
  },
  {
    "text": "testing for this can be an absolute nightmare um because essentially all services have to be running to kind of",
    "start": "3009520",
    "end": "3016640"
  },
  {
    "text": "simulate a transaction so the Saga pattern is a bit",
    "start": "3016640",
    "end": "3022440"
  },
  {
    "text": "of a challenge uh to implement so distributed transactions really require a new way of thinking you're not",
    "start": "3022440",
    "end": "3029040"
  },
  {
    "text": "committing a transaction within the scope of just one service you're trying to um achieve that data consistency",
    "start": "3029040",
    "end": "3034960"
  },
  {
    "text": "across multiple microservices um which is kind of one of the reasons you should ask if people say",
    "start": "3034960",
    "end": "3041440"
  },
  {
    "text": "we want a microservices architecture you should be saying why why do you need it do you actually need",
    "start": "3041440",
    "end": "3047440"
  },
  {
    "text": "it it's hard to debug as well so as more participants are involved um in in the",
    "start": "3047440",
    "end": "3054079"
  },
  {
    "text": "in the Saga this only gets more challenging this is where it becomes really important to implement",
    "start": "3054079",
    "end": "3059640"
  },
  {
    "text": "observability and monitoring to be able to track the workflow of your Saga to see where the points of failure are and",
    "start": "3059640",
    "end": "3065359"
  },
  {
    "text": "see things where where things have gone wrong now using the Saga pattern data",
    "start": "3065359",
    "end": "3071960"
  },
  {
    "text": "can't necessarily be rolled back um because your participants will commit changes to their local",
    "start": "3071960",
    "end": "3078319"
  },
  {
    "text": "databases and your implementation has to be capable of handling a set of",
    "start": "3078319",
    "end": "3083400"
  },
  {
    "text": "potential transient eror uh failures so this is where itm potency comes back into play uh to it must you know try and",
    "start": "3083400",
    "end": "3091160"
  },
  {
    "text": "design your services to be itm potent to reduce the side effects and to um ensure data",
    "start": "3091160",
    "end": "3098400"
  },
  {
    "text": "consistency uh the lack of uh participant data isolation also in imposes some durability challenges um",
    "start": "3098400",
    "end": "3105160"
  },
  {
    "text": "there's a lot of things that can go wrong here and you have to try and Implement counter measures to reduce anomalies like lost updates dirty reads",
    "start": "3105160",
    "end": "3112400"
  },
  {
    "text": "non-re repeatable reads Etc",
    "start": "3112400",
    "end": "3116599"
  },
  {
    "text": "so when we're starting to think about okay how are we going to design our messaging systems",
    "start": "3117520",
    "end": "3124200"
  },
  {
    "text": "um some of the takeaways that I wanted to like impart to you today is really start from the very Basics what are we",
    "start": "3124200",
    "end": "3130599"
  },
  {
    "text": "communicating are we communicating messages to different services are we communicating events do we respect a",
    "start": "3130599",
    "end": "3136599"
  },
  {
    "text": "response back or do we just want to tell our consumers hey Something's Happened go and do some",
    "start": "3136599",
    "end": "3142960"
  },
  {
    "text": "work then we can start to think about okay how can we break up our um architecture using specific D message",
    "start": "3142960",
    "end": "3149119"
  },
  {
    "text": "Brokers do we want to use something like event hubs to process millions of events or do we want Azure service bus so we",
    "start": "3149119",
    "end": "3154960"
  },
  {
    "text": "can um benefit from those um kind of features that Service Plus provides uh",
    "start": "3154960",
    "end": "3160440"
  },
  {
    "text": "think about the complexity of your architecture as well a general rule of farm is don't try and be too clever",
    "start": "3160440",
    "end": "3166119"
  },
  {
    "text": "about it try and make it as simple as possible um for the scope of what your",
    "start": "3166119",
    "end": "3171240"
  },
  {
    "text": "application is trying to achieve uh is ordering your messages important um is ordering um an important factor for your",
    "start": "3171240",
    "end": "3178200"
  },
  {
    "text": "architecture um and think about ways that you can design your application to do that um and also who's listening to",
    "start": "3178200",
    "end": "3184280"
  },
  {
    "text": "messages and events as well how are you going to manage scaling those consumers are you how are you going to be able to",
    "start": "3184280",
    "end": "3190000"
  },
  {
    "text": "manage the different variability um in traffic that will come to your application and then finally you don't",
    "start": "3190000",
    "end": "3196920"
  },
  {
    "text": "need to implement all of these patterns in one application some patterns are going to be more applicable than others",
    "start": "3196920",
    "end": "3203960"
  },
  {
    "text": "some um some you won't need some will be too complex for what you're trying to achieve so just think about what you",
    "start": "3203960",
    "end": "3211359"
  },
  {
    "text": "actually are trying to achieve and then think of a pattern that could actually you can use to solve the problems you're",
    "start": "3211359",
    "end": "3219000"
  },
  {
    "text": "facing awesome uh thanks for listening um I'm going to be hanging around until",
    "start": "3219000",
    "end": "3224880"
  },
  {
    "text": "Friday so I'm at the mantle Booth if you want have questions or you want a a",
    "start": "3224880",
    "end": "3230040"
  },
  {
    "text": "mantle group we are hiring so you know if you um are looking for looking for your next gig come and talk to talk to",
    "start": "3230040",
    "end": "3236079"
  },
  {
    "text": "myself for a couple of others who are in the audience today um you don't have to follow me but I do write about messaging",
    "start": "3236079",
    "end": "3242440"
  },
  {
    "text": "patterns Azure architecture um all the good stuff of on my blog so if you want to read uh some of the stuff I done feel",
    "start": "3242440",
    "end": "3250040"
  },
  {
    "text": "free to do so I'm also doing uh a lot of stuff on GitHub as well so if you want to check that out please do awesome",
    "start": "3250040",
    "end": "3258480"
  },
  {
    "text": "thanks for",
    "start": "3258480",
    "end": "3260838"
  },
  {
    "text": "coming for",
    "start": "3265359",
    "end": "3269359"
  }
]