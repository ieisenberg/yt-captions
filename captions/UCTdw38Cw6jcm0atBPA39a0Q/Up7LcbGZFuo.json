[
  {
    "text": "sorry this is the last talk of the day so you politte tired I'll try to keep it",
    "start": "2760",
    "end": "8490"
  },
  {
    "text": "under now if I can so while everyone's",
    "start": "8490",
    "end": "14930"
  },
  {
    "text": "coming in I thought I'd have the slides on the screen and this talk is about the",
    "start": "14930",
    "end": "24000"
  },
  {
    "text": "main modeling and how the kind of type system in a function language like",
    "start": "24000",
    "end": "30029"
  },
  {
    "text": "f-sharp or Haskell can do a kind of domain modeling that's different and so",
    "start": "30029",
    "end": "36210"
  },
  {
    "text": "I thought I'd put up a little quiz at the beginning how many things are wrong with this design so this is how you do",
    "start": "36210",
    "end": "43260"
  },
  {
    "text": "it another record type in F sharp you can see it sort of looks a little bit like Jason and I'm going to ask you how",
    "start": "43260",
    "end": "51239"
  },
  {
    "text": "many things along with this and we will through this talk we'll go through and fix them so before we get started on",
    "start": "51239",
    "end": "60239"
  },
  {
    "text": "that let's just talk about process so if you think of the software development",
    "start": "60239",
    "end": "66450"
  },
  {
    "text": "process like a pipeline if there's an input and do something in this output",
    "start": "66450",
    "end": "74090"
  },
  {
    "text": "and we normally focus on the software development side of things we talk about",
    "start": "74090",
    "end": "80150"
  },
  {
    "text": "compilers and tooling and testing and globally value blah because that's what",
    "start": "80150",
    "end": "86640"
  },
  {
    "text": "we care about but just like any kind of process if you have garbage in and get garbage out so",
    "start": "86640",
    "end": "94040"
  },
  {
    "text": "no matter how good your your coding is if you have bad requirements or unclear",
    "start": "94040",
    "end": "100230"
  },
  {
    "text": "requirements you're going to have a bad product so this talk is really going to",
    "start": "100230",
    "end": "105750"
  },
  {
    "text": "focus on the requirements side what does the inputs to our development process the design phase trying to understand",
    "start": "105750",
    "end": "111360"
  },
  {
    "text": "the requirements trying to document requirements if we can have good requirements then there's a whole belief",
    "start": "111360",
    "end": "118409"
  },
  {
    "text": "that we'll have a decent product so this is the design and that's really the focus of this talk ok so let's go back",
    "start": "118409",
    "end": "125280"
  },
  {
    "text": "to the challenge I gave you before the first thing from this thing is it's not",
    "start": "125280",
    "end": "131099"
  },
  {
    "text": "very clear which things are optional in you no strings could be null or",
    "start": "131099",
    "end": "136980"
  },
  {
    "text": "something is the first name optional is the middle initial optional is the last name optional some of them are required",
    "start": "136980",
    "end": "143099"
  },
  {
    "text": "some of them optional it's not at all clear from this design right so that's a problem in terms of documentation you",
    "start": "143099",
    "end": "149909"
  },
  {
    "text": "might have tests in the code you might have a piece of code that says here well this has to be a non null or non empty",
    "start": "149909",
    "end": "155340"
  },
  {
    "text": "before it's loud but that's in the code I'm talking about in the design in this design here that we're looking at so in",
    "start": "155340",
    "end": "162419"
  },
  {
    "text": "this case the middle initial is optional and the other fields are required it's not at all clear so that's we're going",
    "start": "162419",
    "end": "167579"
  },
  {
    "text": "to try and change our design to fix that what about the constraints can the",
    "start": "167579",
    "end": "175139"
  },
  {
    "text": "strings be infinitely long or can they be you know 32 bits long or 64 bits long",
    "start": "175139",
    "end": "181530"
  },
  {
    "text": "however long strings you know a couple of gig can they contain non-printable characters can they attain line feeds",
    "start": "181530",
    "end": "187609"
  },
  {
    "text": "you know there's probably some constraints on the string right especially if you have to actually print",
    "start": "187609",
    "end": "193799"
  },
  {
    "text": "it out on a mailing label or on a envelope or something or you put it in a database you know for example here we",
    "start": "193799",
    "end": "200220"
  },
  {
    "text": "have a constraint that the string can't be more than 50 characters and again you might have some validation rule",
    "start": "200220",
    "end": "205439"
  },
  {
    "text": "somewhere but that's not in the design I have to go and try and find out which piece of code has its foundation or than fine fix it what about which feels a",
    "start": "205439",
    "end": "212669"
  },
  {
    "text": "linked so if we have many people using the system and somebody updates the first name when somebody up dates the",
    "start": "212669",
    "end": "218939"
  },
  {
    "text": "last name in two different devices is that an error what happens if one person updates the name the other person",
    "start": "218939",
    "end": "225540"
  },
  {
    "text": "updates the email at the same time is that an error well in this case the name",
    "start": "225540",
    "end": "231269"
  },
  {
    "text": "fields are linked and the email fields are links they have to be updated at the same time atomically but you couldn't if",
    "start": "231269",
    "end": "237900"
  },
  {
    "text": "they could be separately bit of one person up it that you mail no there's not being a name and that's fine and that's not clear from this design either",
    "start": "237900",
    "end": "243949"
  },
  {
    "text": "and finding what's the domain logic we have this some flag here is email",
    "start": "243949",
    "end": "251159"
  },
  {
    "text": "verified and this is set when you know you put in the email dressing we actually send you back a link and have",
    "start": "251159",
    "end": "256889"
  },
  {
    "text": "to click the link to prove that your own that email when is that flag set right",
    "start": "256889",
    "end": "263400"
  },
  {
    "text": "under what circumstances is it set it's just a boolean it conveys absolutely things right now you know you have to",
    "start": "263400",
    "end": "272090"
  },
  {
    "text": "read the documentation to find out so that's a really bad design let's see if we can improve this design as well so in",
    "start": "272090",
    "end": "278660"
  },
  {
    "text": "this particular case the logic says if you change the email you have to reset at the false because I need to send you another verification message all right",
    "start": "278660",
    "end": "286430"
  },
  {
    "text": "so which value is optional what are the constraints which feels a linked and what's the domain logic f-sharp is great",
    "start": "286430",
    "end": "292910"
  },
  {
    "text": "for all this stuff and I think by the end of the talk you'll see what I mean",
    "start": "292910",
    "end": "297970"
  },
  {
    "text": "so the main modeling made function lets me get to this talk my name is Claude",
    "start": "297970",
    "end": "303110"
  },
  {
    "text": "Russian I have a web site F sharp on coffee comm so obviously a little bias towards F sharp but these techniques",
    "start": "303110",
    "end": "310100"
  },
  {
    "text": "will actually work with any type system like this so a camel or Haskell maybe even Scala so a lot of the ideas",
    "start": "310100",
    "end": "319310"
  },
  {
    "text": "in this talk come from the domain driven design book if you haven't read it I",
    "start": "319310",
    "end": "324740"
  },
  {
    "text": "highly recommend it but the main point of this book is you focus on the domain rather than technology okay I don't care",
    "start": "324740",
    "end": "330950"
  },
  {
    "text": "about the database I don't care about the web browser I care about what is the business domain what would people",
    "start": "330950",
    "end": "336740"
  },
  {
    "text": "actually care about when they do their jobs that's normally considered sort of a low thing but I like to do it in a",
    "start": "336740",
    "end": "343820"
  },
  {
    "text": "functional way so this is a kind of intersection of the functional programming people and the domain modeling people and we're sort of right",
    "start": "343820",
    "end": "350060"
  },
  {
    "text": "in the middle here so I'm going to first of all I'm going to demystify functional programming because a lot of people are",
    "start": "350060",
    "end": "355610"
  },
  {
    "text": "scared by functional programming so I always stick this at the bean for my talks I think I won't have to in a few",
    "start": "355610",
    "end": "361729"
  },
  {
    "text": "years but for now I will so if you're not scared affront to the program that's great",
    "start": "361729",
    "end": "367100"
  },
  {
    "text": "and then talk about functional programming for real-world applications because a lot of people think it's sort of an academic thing and then I'm going",
    "start": "367100",
    "end": "373280"
  },
  {
    "text": "to talk about what is the F sharp type system and why is it different from an object-oriented model of classes and",
    "start": "373280",
    "end": "380900"
  },
  {
    "text": "then we'll actually dive into the meat of it and actually design this domain using the types so functional",
    "start": "380900",
    "end": "388130"
  },
  {
    "text": "programming sounds very scary because there's always words functor and catabolism and carry",
    "start": "388130",
    "end": "394320"
  },
  {
    "text": "ma nodes and the dreaded monad and you",
    "start": "394320",
    "end": "399390"
  },
  {
    "text": "look at all these words and it's like oh my god they're awful you know it's too way too scary his homer being very scared now I think",
    "start": "399390",
    "end": "409470"
  },
  {
    "text": "it's actually not they're scary but it's unfamiliar these are words that you don't know what they mean that doesn't",
    "start": "409470",
    "end": "416310"
  },
  {
    "text": "mean you couldn't know what they mean and one of the problems is that the words tend to be kind of mathematical if you rename the words to something like",
    "start": "416310",
    "end": "422430"
  },
  {
    "text": "it's a functor as a matter ball so the cat amorphousness a collapsible or something aggregated or attainable these",
    "start": "422430",
    "end": "431070"
  },
  {
    "text": "words would sound less scary you still wouldn't know they me I mean here's",
    "start": "431070",
    "end": "436260"
  },
  {
    "text": "Homer he's still kind of puzzled but it's not it's now just something you just need to learn it's not something so scary that I'm going to give up",
    "start": "436260",
    "end": "443310"
  },
  {
    "text": "completely so just be aware that the concepts are actually not that hard it's",
    "start": "443310",
    "end": "449100"
  },
  {
    "text": "just the words can be off-putting I tell you what's really scary is on your own you're programming object-oriented",
    "start": "449100",
    "end": "455670"
  },
  {
    "text": "program has all these really scary words like polymorphism and inheritance and interface generics and covariance and",
    "start": "455670",
    "end": "462180"
  },
  {
    "text": "solid and solids has five other things inside it and IO C and di and ABC LM",
    "start": "462180",
    "end": "468150"
  },
  {
    "text": "procedure what makes you think that functional programming is bad like object or program is way scarier than",
    "start": "468150",
    "end": "473820"
  },
  {
    "text": "front something there's all these things you have to know all these strange terminology you have to understand right",
    "start": "473820",
    "end": "478950"
  },
  {
    "text": "this is not scary to you because you probably know other stuff so I guess it's my point is if you know if it seems",
    "start": "478950",
    "end": "485550"
  },
  {
    "text": "quite sensible and if you don't know it it seems scary so please don't be put off by the terminology so the thing in",
    "start": "485550",
    "end": "496950"
  },
  {
    "text": "this talk is we actually don't need either stuff in this talk we're not going to be doing any of this stuff no monads in this talk so monad for you",
    "start": "496950",
    "end": "503760"
  },
  {
    "text": "talk we're going to be talking about everything else other than blow notes all right so that's my little rant on",
    "start": "503760",
    "end": "510210"
  },
  {
    "text": "please don't be scared let's talk about real-world applications so a lot of",
    "start": "510210",
    "end": "515400"
  },
  {
    "text": "people heard that functional programming is good for mathematical stuff and it's good of algorithms and it's good for parallel processing but you need a PhD",
    "start": "515400",
    "end": "523229"
  },
  {
    "text": "to understand it right well it's true that it is good for",
    "start": "523229",
    "end": "528250"
  },
  {
    "text": "mathematical stuff and it's good for algorithms and so on but it's not true",
    "start": "528250",
    "end": "533650"
  },
  {
    "text": "that you the PhD you can you know like I say it's actually really simple once you get the hang of it so what I think",
    "start": "533650",
    "end": "541210"
  },
  {
    "text": "functional programming is really good for is boring line of business applications okay which I call blubbers",
    "start": "541210",
    "end": "549570"
  },
  {
    "text": "so this is what most of us do in our day job probably it's enterprise software",
    "start": "549570",
    "end": "555310"
  },
  {
    "text": "it's accountants its inventory management fulfillment ecommerce",
    "start": "555310",
    "end": "561070"
  },
  {
    "text": "websites I don't know but it's pretty boring I mean we know mostly it's not exactly the most exciting stuff but if",
    "start": "561070",
    "end": "567790"
  },
  {
    "text": "you think about blob a development there's some things that you really need you need to express requirements clearly",
    "start": "567790",
    "end": "575110"
  },
  {
    "text": "because you're trying to communicate with people who are clueless you need a rapid development cycle because you want",
    "start": "575110",
    "end": "581320"
  },
  {
    "text": "to get the stuff out there before the first emerge changing their mind you want high quality deliverables because",
    "start": "581320",
    "end": "587650"
  },
  {
    "text": "you don't want to have to go back and fix a bug from six months ago when you have swamped with stuff today right so",
    "start": "587650",
    "end": "592990"
  },
  {
    "text": "these are very important things and what's interesting is that these are the same principles of the agile movement",
    "start": "592990",
    "end": "599740"
  },
  {
    "text": "has and they also came from global development they came from a payroll system I think originally so F sharp is",
    "start": "599740",
    "end": "607420"
  },
  {
    "text": "really good for this it's very concise it's really easy to do Express requirements clearly and we'll talk about that today it's a rapid",
    "start": "607420",
    "end": "614110"
  },
  {
    "text": "development cycle because not only can you do all the unit tests and stuff but you have an interactive environment you",
    "start": "614110",
    "end": "619270"
  },
  {
    "text": "can do stuff and it's high-quality to the bubbles and we'll talk about how we can bake quality into the design so we",
    "start": "619270",
    "end": "626350"
  },
  {
    "text": "can avoid even writing unit tests and of course the most important things fund because if you're going to be writing",
    "start": "626350",
    "end": "632070"
  },
  {
    "text": "boring business applications and if you have fun doing it okay and it happens a",
    "start": "632070",
    "end": "637450"
  },
  {
    "text": "fun is a key word in a shop so there you go all right so here is a cat and a dog",
    "start": "637450",
    "end": "643270"
  },
  {
    "text": "and this is like functional programming and beloved elements very happy together",
    "start": "643270",
    "end": "649260"
  },
  {
    "text": "all right so domain driven design so for people who don't aren't familiar with",
    "start": "649260",
    "end": "654970"
  },
  {
    "text": "domain driven design I'll just quickly go some of the kind of points but the the most important about",
    "start": "654970",
    "end": "660590"
  },
  {
    "text": "domain design is about communication is about you have a model of what you think",
    "start": "660590",
    "end": "666230"
  },
  {
    "text": "what you think is happening and the domain experts have a model and often the model of difference and so the point",
    "start": "666230",
    "end": "672320"
  },
  {
    "text": "of domains of design is to get your model and the domain expert to share the same model are you basically are working",
    "start": "672320",
    "end": "678740"
  },
  {
    "text": "on the same shared mental model because remember it's your model that goes into production right and if your model is",
    "start": "678740",
    "end": "684590"
  },
  {
    "text": "wrong the system will not do what it's supposed to do and the domain experts will get angry at you so if you can try",
    "start": "684590",
    "end": "691700"
  },
  {
    "text": "and communicate if you can try and get a shared model going that's great the only way to get a shared model is to have",
    "start": "691700",
    "end": "696920"
  },
  {
    "text": "really good communication so let's look at communication so what is this word un",
    "start": "696920",
    "end": "702440"
  },
  {
    "text": "IO n is red e okay so some people might",
    "start": "702440",
    "end": "708530"
  },
  {
    "text": "think it's unionize right power to the people and other people especially if",
    "start": "708530",
    "end": "714080"
  },
  {
    "text": "you're chemist you might think it's an ionized okay so which one is it which one is it well the answers it's",
    "start": "714080",
    "end": "720860"
  },
  {
    "text": "both of course it depends on the context so this is the first point about domain",
    "start": "720860",
    "end": "727160"
  },
  {
    "text": "design is there's a context for everything in business unionized means one thing and in the chemistry context",
    "start": "727160",
    "end": "733430"
  },
  {
    "text": "it means an ionized so we have to be very careful about thinking that the other person understands what we're",
    "start": "733430",
    "end": "738920"
  },
  {
    "text": "saying because there might be different words here's another one spam okay in a",
    "start": "738920",
    "end": "744770"
  },
  {
    "text": "supermarket spam means canned meat in an email system spamming junk mail right so",
    "start": "744770",
    "end": "751670"
  },
  {
    "text": "in the different contexts the same word means something different but okay that's really obvious what about",
    "start": "751670",
    "end": "757160"
  },
  {
    "text": "products okay this is where it starts getting painful because in one business",
    "start": "757160",
    "end": "762410"
  },
  {
    "text": "the sales team might think of a product as something you can sell in the",
    "start": "762410",
    "end": "767720"
  },
  {
    "text": "warehouse management team they think of product something that's physically in the warehouse and stuff that you can",
    "start": "767720",
    "end": "773630"
  },
  {
    "text": "sell might not be the same things in the warehouse there might be slightly different so there's a potential for confusion here without customer there's",
    "start": "773630",
    "end": "780740"
  },
  {
    "text": "another one sometimes you see businesses where they try and create a domain model that stretches over the entire",
    "start": "780740",
    "end": "785780"
  },
  {
    "text": "enterprise and everyone is supposed to use the same words that's doomed to failure because different parts of the",
    "start": "785780",
    "end": "791690"
  },
  {
    "text": "business users same words mean different things so in marketing you know a customer means somebody who can send an email to",
    "start": "791690",
    "end": "797780"
  },
  {
    "text": "somebody who can spam in finance world the finance department is somebody who",
    "start": "797780",
    "end": "803150"
  },
  {
    "text": "owes you money that's what a customer is so again different definitions other customers and the best way one of them",
    "start": "803150",
    "end": "809420"
  },
  {
    "text": "trying to have a generic customer that matches everybody's thing you divide the",
    "start": "809420",
    "end": "814700"
  },
  {
    "text": "business world or the domain into little chunks which is called a context a bounded context and you work inside",
    "start": "814700",
    "end": "820340"
  },
  {
    "text": "those chunks now within those chunks the word means the same to everybody but",
    "start": "820340",
    "end": "825500"
  },
  {
    "text": "when you cross the boundaries of these chunks when you get outside your world and then for something else as well it's quite possible the word means something",
    "start": "825500",
    "end": "831920"
  },
  {
    "text": "different so another important concept in domain driven design is the concept",
    "start": "831920",
    "end": "838280"
  },
  {
    "text": "of a ubiquitous language so ubiquitous language is the language you use in the",
    "start": "838280",
    "end": "844040"
  },
  {
    "text": "shared mental model so a nice a customer and user customer we're talking about the same thing and we have a we need a",
    "start": "844040",
    "end": "849500"
  },
  {
    "text": "language to communicate let's all use the same language okay so in chemistry",
    "start": "849500",
    "end": "855320"
  },
  {
    "text": "here is the victimís language don't you want to have a polymer now it's very important that we don't talk techie we",
    "start": "855320",
    "end": "862070"
  },
  {
    "text": "don't say a linked list of molecules or something we use the words that the domain experts use which is like a knot",
    "start": "862070",
    "end": "868130"
  },
  {
    "text": "in a polymer we don't say a linked list even though we may implement that in our code it's very important that the code",
    "start": "868130",
    "end": "875350"
  },
  {
    "text": "uses these terms the same terminology so that when I look at the code I see the domain model and we call this",
    "start": "875350",
    "end": "882740"
  },
  {
    "text": "the ubiquitous language and of course every domain has their own ubiquitous language so in sales you might have a",
    "start": "882740",
    "end": "889790"
  },
  {
    "text": "product on a customer and the tracking and again in a different domain same in",
    "start": "889790",
    "end": "896300"
  },
  {
    "text": "another side a little bit because language some of the words are the same but they mean something different because it's a different context so",
    "start": "896300",
    "end": "903500"
  },
  {
    "text": "here's some code let's look at actually how you do this can you guess what this",
    "start": "903500",
    "end": "908510"
  },
  {
    "text": "code is what kind of domain are we talking about here any ideas well first",
    "start": "908510",
    "end": "914630"
  },
  {
    "text": "of all you can see I've got clear there it's a card game now you might think",
    "start": "914630",
    "end": "919940"
  },
  {
    "text": "well it's obviously a card game but for example if I didn't say it was a card game then the word suits could be",
    "start": "919940",
    "end": "925850"
  },
  {
    "text": "to do with clothing right and maybe the word hand was something to do with you",
    "start": "925850",
    "end": "931940"
  },
  {
    "text": "know medicine doctors as an I don't know but um the fact that there's a card game",
    "start": "931940",
    "end": "937519"
  },
  {
    "text": "context then these words make sense within the card game context so that's the bounded context and then this is the",
    "start": "937519",
    "end": "943940"
  },
  {
    "text": "ubiquitous language genocide all these are the nouns and the verbs that you use in that context so this is f sharp code",
    "start": "943940",
    "end": "952120"
  },
  {
    "text": "let me explain it to you quickly so the vertical bar means a choice so a suit is",
    "start": "952120",
    "end": "957290"
  },
  {
    "text": "a club or a diamond or a spade or heart rank is a two or three or up to an ace",
    "start": "957290",
    "end": "962480"
  },
  {
    "text": "the card is a pair so that little thing means a pair and we'll see why we use",
    "start": "962480",
    "end": "967670"
  },
  {
    "text": "multiplication giman community R so the card is a pair of a suit and a rank a hand is a list of",
    "start": "967670",
    "end": "975949"
  },
  {
    "text": "cards a deck is a list of cards a player is a name plus a hand and a game as a",
    "start": "975949",
    "end": "981290"
  },
  {
    "text": "deck that's a list of players the list I just built into a chart is very nice and",
    "start": "981290",
    "end": "986600"
  },
  {
    "text": "here's a verb so when you see this arrow in F sharp that means it's a function so this is a function where the input the",
    "start": "986600",
    "end": "993110"
  },
  {
    "text": "thing on the left hand side is a deck and the output the thing on the right hand side is a deck and a card a pair so",
    "start": "993110",
    "end": "1000399"
  },
  {
    "text": "I can read this and say well the input is a deck the output when ideal is a new",
    "start": "1000399",
    "end": "1005680"
  },
  {
    "text": "deck because the deck is going to be immutable and there's also going to be a card on the table so that's what the output is and when I pick up a card from",
    "start": "1005680",
    "end": "1012759"
  },
  {
    "text": "the table the input is my hand and the card on the table that's the input the pair and the output is my new hand and",
    "start": "1012759",
    "end": "1020709"
  },
  {
    "text": "the card on tables disappeared so this is a documentation of that the nouns involved and the verbs involved so",
    "start": "1020709",
    "end": "1028168"
  },
  {
    "text": "here's a question do you think this is a reasonable amount of code to write to",
    "start": "1028169",
    "end": "1033548"
  },
  {
    "text": "document this domain basically a page code I would say yeah not bad I've got",
    "start": "1033549",
    "end": "1040209"
  },
  {
    "text": "like you know nine different things on on one slide pretty good do you think a",
    "start": "1040209",
    "end": "1045970"
  },
  {
    "text": "non programmer could understand this if I if I was showing it something I say you know I'm not sure you know is there",
    "start": "1045970",
    "end": "1051549"
  },
  {
    "text": "is a diamond one of the suits or something they could correct me and say yes it is I know it isn't whatever you",
    "start": "1051549",
    "end": "1056919"
  },
  {
    "text": "know if I've missed something they could probably check it one of the things about this model is",
    "start": "1056919",
    "end": "1062870"
  },
  {
    "text": "it's what we call persistence persistence ignorant there's nothing about databases there's",
    "start": "1062870",
    "end": "1069620"
  },
  {
    "text": "nothing about foreign keys there's nothing about primary keys there's nothing about tables",
    "start": "1069620",
    "end": "1075380"
  },
  {
    "text": "there's nothing about classes there's nothing about inheritance there's nothing about interfaces there's nothing except the domain this",
    "start": "1075380",
    "end": "1082340"
  },
  {
    "text": "is purely all about the domain this is why it's called the main driven design is not called object-oriented design",
    "start": "1082340",
    "end": "1088160"
  },
  {
    "text": "it's not called database driven design domain dove in design the whole point is to focus on what's important in the",
    "start": "1088160",
    "end": "1094520"
  },
  {
    "text": "domain and everything else is irrelevant right now so what's interesting is the",
    "start": "1094520",
    "end": "1101480"
  },
  {
    "text": "design this is the design and it's also compatible code one of the goals of",
    "start": "1101480",
    "end": "1107480"
  },
  {
    "text": "agile development you know is to make the code be the design because if you have the design and the separate UML",
    "start": "1107480",
    "end": "1113750"
  },
  {
    "text": "diagram or a separate document it's always going to get out of sync so you can keep the design and code in sync",
    "start": "1113750",
    "end": "1119660"
  },
  {
    "text": "that's fantastic and the best way to keep the design and the code in sync is to be its have the design in the code so",
    "start": "1119660",
    "end": "1126430"
  },
  {
    "text": "I think this is a great example of how you can do this so this is not",
    "start": "1126430",
    "end": "1132530"
  },
  {
    "text": "pseudocode this is executable code you could stick this is like the first file in your f sharp project and it kind of",
    "start": "1132530",
    "end": "1137870"
  },
  {
    "text": "defined the domain for the rest of the project so we don't need any stinking",
    "start": "1137870",
    "end": "1143150"
  },
  {
    "text": "UML diagrams in our F sharp driven design here all right so that's the basics of domain",
    "start": "1143150",
    "end": "1151280"
  },
  {
    "text": "driven design I kind of like the key ideas so let's look at the F sharp type system and C wise I think it's really",
    "start": "1151280",
    "end": "1156800"
  },
  {
    "text": "good for doing this the exit up type system is what they call an algebraic type system algebra just like X's and",
    "start": "1156800",
    "end": "1164390"
  },
  {
    "text": "Y's and adding and multiplying things we'll see it's a kind of mathematical word so I actually prefer composable so",
    "start": "1164390",
    "end": "1171710"
  },
  {
    "text": "composable means you can glue things together like Lego and you can build bigger things from smaller things so",
    "start": "1171710",
    "end": "1178850"
  },
  {
    "text": "there you go this and Lego right so in",
    "start": "1178850",
    "end": "1184750"
  },
  {
    "text": "the F sharp license well first of all F sharp types are not",
    "start": "1184750",
    "end": "1190780"
  },
  {
    "text": "they're just data structures so they don't have any behavior which means it's really easy to glue them together",
    "start": "1190780",
    "end": "1196460"
  },
  {
    "text": "because you don't have to worry about what is the behavior of them when they're going to get that as a different problem so to create a new type you can",
    "start": "1196460",
    "end": "1203780"
  },
  {
    "text": "just glue them together in two different ways you can multiply them together and",
    "start": "1203780",
    "end": "1208820"
  },
  {
    "text": "you can add them together okay now that sounds a bit weird but how can you not",
    "start": "1208820",
    "end": "1214190"
  },
  {
    "text": "apply a type how can you add a type what does it mean so let's look at what this",
    "start": "1214190",
    "end": "1219380"
  },
  {
    "text": "means okay so here's a function and we're going to use the classic thing as a functions with a box and there's an input and as an output so for example",
    "start": "1219380",
    "end": "1226160"
  },
  {
    "text": "the add one function the input is a list of numbers so the input is one of the",
    "start": "1226160",
    "end": "1232130"
  },
  {
    "text": "integers from the list of integers and the output is another one of the integers from the disturbances okay and",
    "start": "1232130",
    "end": "1238210"
  },
  {
    "text": "in F sharp we write this as an int arrow int meaning enters the input and enters",
    "start": "1238210",
    "end": "1243380"
  },
  {
    "text": "the output with the error telling you there's a function so that's how you you",
    "start": "1243380",
    "end": "1249650"
  },
  {
    "text": "know there's a set of integers which could be the possible inputs what happens if the input is a pair let's say",
    "start": "1249650",
    "end": "1255290"
  },
  {
    "text": "we want to add a pair of numbers together and and you know the output we",
    "start": "1255290",
    "end": "1260720"
  },
  {
    "text": "can say well that's an integer but what is the input how can we define what the input type is when in object-oriented",
    "start": "1260720",
    "end": "1267679"
  },
  {
    "text": "would would define a pair class we're not going to do that we're going to build a class we're going to build a type by composing listing types right so",
    "start": "1267679",
    "end": "1275660"
  },
  {
    "text": "let's have a look at this if you think about it the pair means you have a pile you take one from the first pile and one",
    "start": "1275660",
    "end": "1283309"
  },
  {
    "text": "from the second pile right so if there are four things in the first pile and there are four things in the second pile",
    "start": "1283309",
    "end": "1289010"
  },
  {
    "text": "how many possible pairs are there altogether 16 yes four times four",
    "start": "1289010",
    "end": "1296900"
  },
  {
    "text": "there's 16 possible combinations all right so this is this is where the",
    "start": "1296900",
    "end": "1302600"
  },
  {
    "text": "multiplication comes in okay what about if you have a pair of boolean's okay so",
    "start": "1302600",
    "end": "1308150"
  },
  {
    "text": "there's two possible billions in the first pile to possible Williams in the second pile how many possible pairs are",
    "start": "1308150",
    "end": "1314720"
  },
  {
    "text": "there there's four possible pairs it's two times two so we call this a we call them like",
    "start": "1314720",
    "end": "1323610"
  },
  {
    "text": "multiplying the types so a pair of intz is written is in two times int and a",
    "start": "1323610",
    "end": "1329340"
  },
  {
    "text": "pair of billions is written as all times ball okay so that's why we use the multiplication and we call these kinds",
    "start": "1329340",
    "end": "1338940"
  },
  {
    "text": "of things product types prototypes so here's an example use okay works very theoretical let's look at a real example",
    "start": "1338940",
    "end": "1344670"
  },
  {
    "text": "let's say we want to model people's birthdays okay so what is a birthday well a birthday is a person and a date I",
    "start": "1344670",
    "end": "1354360"
  },
  {
    "text": "mean get a pick a person a typical date that makes somebody's birthday so we're",
    "start": "1354360",
    "end": "1359429"
  },
  {
    "text": "going to say well there's all the possible people and all possible dates and the combination you multiply them",
    "start": "1359429",
    "end": "1366120"
  },
  {
    "text": "together gives you all the possible birthdays all right so we're just going to say a birthday is a person times a",
    "start": "1366120",
    "end": "1372210"
  },
  {
    "text": "date so that's our type we've created a new type that we can actually use in our code the representatives all right so",
    "start": "1372210",
    "end": "1381360"
  },
  {
    "text": "that's the multiplication and I also said you can add types together what does that mean so let's say we have a",
    "start": "1381360",
    "end": "1387870"
  },
  {
    "text": "function that tells you whether you have a fever or not so we're going to pass in your temperature and it's going to",
    "start": "1387870",
    "end": "1394380"
  },
  {
    "text": "return a boolean true or false but the problem is is the temperature in Fahrenheit or is it in Celsius well we",
    "start": "1394380",
    "end": "1403080"
  },
  {
    "text": "want to design our function so that works with both of them so the input is a Fahrenheit or Celsius how can we model",
    "start": "1403080",
    "end": "1410100"
  },
  {
    "text": "them well let's say that there are four possible Fahrenheit temperatures",
    "start": "1410100",
    "end": "1416520"
  },
  {
    "text": "obviously they're more than that and let's say there are four possible Celsius temperatures how many possible",
    "start": "1416520",
    "end": "1422299"
  },
  {
    "text": "inputs are there eight thank you",
    "start": "1422299",
    "end": "1428549"
  },
  {
    "text": "there's eight there's four possible from this but it's 4 from this part or 4 from this part so that's eight possible",
    "start": "1428549",
    "end": "1435390"
  },
  {
    "text": "combinations and that's why we call it an addition right because it's this pile",
    "start": "1435390",
    "end": "1440580"
  },
  {
    "text": "plus this part now in this case they might both be integers or something so",
    "start": "1440580",
    "end": "1445620"
  },
  {
    "text": "we need to distinguish between the Fahrenheit cases and the Celsius cases so when we write our code we're going to",
    "start": "1445620",
    "end": "1451650"
  },
  {
    "text": "have to tag saying well this is the found high case this is the Celsius case and we write you like this we say the temperature",
    "start": "1451650",
    "end": "1457230"
  },
  {
    "text": "type is a choice between an F where there's an insulated with it or a sea",
    "start": "1457230",
    "end": "1463350"
  },
  {
    "text": "where there's a float associated with it so that's how rude right a choice type or some type okay it's a",
    "start": "1463350",
    "end": "1471149"
  },
  {
    "text": "choice between these two things and this is the kind of type that you don't have in c-sharp this is very unique to sort",
    "start": "1471149",
    "end": "1477749"
  },
  {
    "text": "of functional programming so choice types are really really useful for domain modeling I mean here is a payment",
    "start": "1477749",
    "end": "1484950"
  },
  {
    "text": "method and it says okay this is a cash there's a choice there's three choices you can take cash you can take a check",
    "start": "1484950",
    "end": "1491159"
  },
  {
    "text": "or you can take a credit card if you take cash there's no other information associated with it if you take a check",
    "start": "1491159",
    "end": "1496499"
  },
  {
    "text": "there's a check number if you take a credit card there's a pair and the pair is a card type and a card number so in",
    "start": "1496499",
    "end": "1504179"
  },
  {
    "text": "this one type we've actually got quite a lot of domain knowledge very compactly written make sense so there we go check",
    "start": "1504179",
    "end": "1513749"
  },
  {
    "text": "number and so what's nice is each choice can have its own set of data associated",
    "start": "1513749",
    "end": "1519330"
  },
  {
    "text": "with it",
    "start": "1519330",
    "end": "1521720"
  },
  {
    "text": "now once we've got one of these choice types how do we actually work with it and this is where the concept called",
    "start": "1525190",
    "end": "1531340"
  },
  {
    "text": "pattern matching comes in so let's say we have a payment methods if we want to print it the way it works is we",
    "start": "1531340",
    "end": "1538389"
  },
  {
    "text": "basically deconstruct it in the same way that it was constructed so we have to have a case there's three possible cases",
    "start": "1538389",
    "end": "1544529"
  },
  {
    "text": "in the data type so we have to have three possible choices when we analyze",
    "start": "1544529",
    "end": "1550809"
  },
  {
    "text": "it so we do this match it's like we're going to do a pattern match and there are three possible cases the first cases",
    "start": "1550809",
    "end": "1557320"
  },
  {
    "text": "is cash the second case is a check and the third case is as a card and what's",
    "start": "1557320",
    "end": "1562389"
  },
  {
    "text": "interesting is when it does the deconstruction it also extracts the Associated data so you don't have to",
    "start": "1562389",
    "end": "1568869"
  },
  {
    "text": "like find out like you know deficit is it this kind of class and then if it's this kind of class cast it to a class",
    "start": "1568869",
    "end": "1574720"
  },
  {
    "text": "and then the extracting it does it all in one step very nice so if you think",
    "start": "1574720",
    "end": "1583419"
  },
  {
    "text": "about the object-oriented version of this so I wanted to implement this kind of payment method in our what I'd pull",
    "start": "1583419",
    "end": "1590080"
  },
  {
    "text": "in to do is create you know a base class or interface or something and then I have to create three separate sub",
    "start": "1590080",
    "end": "1596529"
  },
  {
    "text": "classes that implement that payment method that's fine but it's kind of",
    "start": "1596529",
    "end": "1602019"
  },
  {
    "text": "annoying because this interface there's nothing in there there's no common behavior it's just data so this would be",
    "start": "1602019",
    "end": "1609399"
  },
  {
    "text": "a like a method list interface or marker interface which is always kind of a bit of an anti-pattern and and the other",
    "start": "1609399",
    "end": "1616509"
  },
  {
    "text": "problem is the you doing c-sharp you probably have a different file for each of these things so your code is sort of",
    "start": "1616509",
    "end": "1621580"
  },
  {
    "text": "scattered all around and your your data modeling code is going to mixed in with your implementation code which is kind",
    "start": "1621580",
    "end": "1628809"
  },
  {
    "text": "of annoying if you wanted to find out all the methods you'd have to look at all the different files and most",
    "start": "1628809",
    "end": "1634330"
  },
  {
    "text": "importantly I think is that this is it with inheritance it's an open set of choices write anything that implements I",
    "start": "1634330",
    "end": "1640119"
  },
  {
    "text": "penguin ethic is valid so for example if I create a thing called evil and it",
    "start": "1640119",
    "end": "1645519"
  },
  {
    "text": "implements our payment method that will be fine now sometimes that is useful to",
    "start": "1645519",
    "end": "1651009"
  },
  {
    "text": "be able to extend the thing but often in business modeling you actually want a restricted set of cases it's like I only",
    "start": "1651009",
    "end": "1656679"
  },
  {
    "text": "accept these three payment methods just add another paint method without like changing quite a lot of stuff in",
    "start": "1656679",
    "end": "1662020"
  },
  {
    "text": "the business it's not just as simple as inheriting from something and implementing you know this has to be",
    "start": "1662020",
    "end": "1667150"
  },
  {
    "text": "more complicated than that so if you go to the F sharp model what's",
    "start": "1667150",
    "end": "1672670"
  },
  {
    "text": "nice is that all the choices in one place and it's a closed set of options it's like you know exactly it's only",
    "start": "1672670",
    "end": "1679270"
  },
  {
    "text": "these three choices and the extra data that put these choices right there",
    "start": "1679270",
    "end": "1685060"
  },
  {
    "text": "in your face you don't have to like search or management class it's right by pair so from a modeling point of view",
    "start": "1685060",
    "end": "1690340"
  },
  {
    "text": "this kind of approach is very very nice so if you think about types in most",
    "start": "1690340",
    "end": "1698350"
  },
  {
    "text": "programming languages we think of types is sort of a an annotation that helps you type check you know you make sure",
    "start": "1698350",
    "end": "1704530"
  },
  {
    "text": "this is integer it's not a string it's not a boolean so we think of it's just something that helps the compiler you",
    "start": "1704530",
    "end": "1710530"
  },
  {
    "text": "know stay accurate but what we're doing here is we're doing using types as a",
    "start": "1710530",
    "end": "1716110"
  },
  {
    "text": "terrain modeling tool so when we say that we're dealing is a deck and you know the inputs and the outputs and",
    "start": "1716110",
    "end": "1721990"
  },
  {
    "text": "stuff this is not about type checking this is about modeling your domain so",
    "start": "1721990",
    "end": "1727980"
  },
  {
    "text": "we're using types for two things and what's cool is that in a language like F",
    "start": "1727980",
    "end": "1733090"
  },
  {
    "text": "sharp you can get both at once you get the type checking and you also get the domain modeling which means that the",
    "start": "1733090",
    "end": "1740260"
  },
  {
    "text": "type checker the compiler can check your domain logic for you okay so if you have",
    "start": "1740260",
    "end": "1745870"
  },
  {
    "text": "a good static type system it's almost like having compile time unit tests you",
    "start": "1745870",
    "end": "1751630"
  },
  {
    "text": "literally will not be able to write code that doesn't match the domain model you don't have to write a a unit test to",
    "start": "1751630",
    "end": "1758830"
  },
  {
    "text": "test something because it literally won't compile it is wrong and we'll see an example of that shortly so type all the things it's all very",
    "start": "1758830",
    "end": "1766120"
  },
  {
    "text": "good all right so there's the type system now let's take it out for spin let's see what can we do with it",
    "start": "1766120",
    "end": "1772890"
  },
  {
    "text": "so the first thing is we talked about we want to have some sort of optional values right we want to say something's",
    "start": "1772890",
    "end": "1778300"
  },
  {
    "text": "optional we don't want it to be you know we want to make it very clear there's optional so how can we do that so here's",
    "start": "1778300",
    "end": "1783430"
  },
  {
    "text": "our is our personal name and that will the middle one is optional",
    "start": "1783430",
    "end": "1788850"
  },
  {
    "text": "so how do we represent optional values well let's kind of go back the beginning let's say that we have a length function",
    "start": "1788850",
    "end": "1796610"
  },
  {
    "text": "that takes a string as input and spits out an int as output right so the input",
    "start": "1796610",
    "end": "1802799"
  },
  {
    "text": "is a list of possible Springs now one of the problems in most type systems is",
    "start": "1802799",
    "end": "1809370"
  },
  {
    "text": "that null is a valid string okay null is",
    "start": "1809370",
    "end": "1814740"
  },
  {
    "text": "in the list of things that you can pass into this function and that's a problem",
    "start": "1814740",
    "end": "1820380"
  },
  {
    "text": "because know is not a string you can't set phasers to no it just doesn't make",
    "start": "1820380",
    "end": "1825720"
  },
  {
    "text": "any sense you know so this null is really bad having null as a valid value",
    "start": "1825720",
    "end": "1832440"
  },
  {
    "text": "for a string is really bad because it's not really a string it's",
    "start": "1832440",
    "end": "1837600"
  },
  {
    "text": "pretending to be a string but when you actually use it it will blow up in your face the compiler work captured the",
    "start": "1837600",
    "end": "1843840"
  },
  {
    "text": "compiler says yeah sure null so string no problem and then when you try and access the length of the string of in a",
    "start": "1843840",
    "end": "1849179"
  },
  {
    "text": "crash so I like to say that null is sort of the cerumen of static typing he's",
    "start": "1849179",
    "end": "1854190"
  },
  {
    "text": "going to pretend to be your friend is going to stab you in the back when you're not looking so so okay so nulls",
    "start": "1854190",
    "end": "1860970"
  },
  {
    "text": "are really bad so in functional languages nulls are not allowed to be",
    "start": "1860970",
    "end": "1866820"
  },
  {
    "text": "part of the bad set of values okay so we",
    "start": "1866820",
    "end": "1871860"
  },
  {
    "text": "can't model an optional thing by saying yeah we just use null to me that's missing what we really want to do is",
    "start": "1871860",
    "end": "1878070"
  },
  {
    "text": "model it using what we described you want to say well it's either you know a valid string or it's missing okay how",
    "start": "1878070",
    "end": "1885809"
  },
  {
    "text": "can we model that in our type system well I think we've seen this it's either one of these things or it's one of these",
    "start": "1885809",
    "end": "1892620"
  },
  {
    "text": "other things so we model it as a choice it's either a string or it's a nothing all right so it's a it's a plus source",
    "start": "1892620",
    "end": "1900450"
  },
  {
    "text": "of some type so we're going to tag the top one with some string and we're going",
    "start": "1900450",
    "end": "1905639"
  },
  {
    "text": "to tag the bottom one with nothing and then we can define a type like this is optional string it's either something",
    "start": "1905639",
    "end": "1911370"
  },
  {
    "text": "and there's a string associated with it or it's nothing all right so this is how we would model an optional string using",
    "start": "1911370",
    "end": "1918419"
  },
  {
    "text": "our very cool type system alright this is awesome and we get very excited by this and say yeah",
    "start": "1918419",
    "end": "1924880"
  },
  {
    "text": "optional strings fantastic and then actually we also need an optional integer oh yeah we need an optional boolean and I think you can see there's",
    "start": "1924880",
    "end": "1932710"
  },
  {
    "text": "something wrong with this because there's quite a lot of duplicate code so this is where we say okay let's not",
    "start": "1932710",
    "end": "1938440"
  },
  {
    "text": "rewrite this over and over every possible type let's make it generic version okay and here's the generic",
    "start": "1938440",
    "end": "1945010"
  },
  {
    "text": "version it's called option it's a built-in type in a sharp you don't have to define it and that little tick T is f sharp spy of",
    "start": "1945010",
    "end": "1952660"
  },
  {
    "text": "saying it's a generic so in c-sharp it doesn't have a ticket and intercept it does have a tick so that's a generic",
    "start": "1952660",
    "end": "1958840"
  },
  {
    "text": "type and then we can say okay so the middle initial is not just a string it's an option of a string and one of the",
    "start": "1958840",
    "end": "1966070"
  },
  {
    "text": "nice things in F sharp is you can actually put it backwards you can see as a string option so this looks very nice I think if I say first one's a string",
    "start": "1966070",
    "end": "1972850"
  },
  {
    "text": "second one's an optional string and the third one's a string that's a nice design and it's captured the intent of",
    "start": "1972850",
    "end": "1978400"
  },
  {
    "text": "which ones are required and in F sharp if it's if it's not optional it's required that's basically a rule of",
    "start": "1978400",
    "end": "1985180"
  },
  {
    "text": "thumb all right another kind of thing we can do is what I call single choice types so",
    "start": "1985180",
    "end": "1990700"
  },
  {
    "text": "a single choice type is one of these choice types except there's only one choice right",
    "start": "1990700",
    "end": "1995890"
  },
  {
    "text": "so hopefully here's an email and there's only one choice of email here's another one customer ID and there's only one",
    "start": "1995890",
    "end": "2002070"
  },
  {
    "text": "choice customer ID why would you do something as silly as only having one",
    "start": "2002070",
    "end": "2007140"
  },
  {
    "text": "choice all right well if you think about it an email address isn't a string it's",
    "start": "2007140",
    "end": "2014490"
  },
  {
    "text": "a wrapper for a string right it may be represented as a stream kind scene but that email address is not a string",
    "start": "2014490",
    "end": "2020430"
  },
  {
    "text": "because there's constraints around it it has to have an out sign and it has to be less than hundred characters and you",
    "start": "2020430",
    "end": "2025770"
  },
  {
    "text": "know and so on so it's not just a normal string a custom ID is not an integer it",
    "start": "2025770",
    "end": "2031890"
  },
  {
    "text": "might be represented by an integer in your database but it's not that industry you can't add five to a customer ID you",
    "start": "2031890",
    "end": "2037260"
  },
  {
    "text": "can't you know take the square root of a custom idea just just making sense so these things are not you have to make a",
    "start": "2037260",
    "end": "2045360"
  },
  {
    "text": "distinction between what it is whether the main point of view and what it is from the representation point of view and what we want to do is represent",
    "start": "2045360",
    "end": "2051210"
  },
  {
    "text": "there's a thing called an email address in the domain there's a thing called accustom ID and they are distinct the fact that there's",
    "start": "2051210",
    "end": "2057490"
  },
  {
    "text": "a representation behind the scenes is not relevant to the domain model so what we do something like this an email",
    "start": "2057490",
    "end": "2063490"
  },
  {
    "text": "address is an email address it wraps a string but it's not a string a phone number wraps a string but it's not a",
    "start": "2063490",
    "end": "2069368"
  },
  {
    "text": "string and as soon as we do this we now have distinct types so an email address and a phone number and now different",
    "start": "2069369",
    "end": "2075908"
  },
  {
    "text": "types and it cannot be mixed up you can't accidentally pass a phone number to the email address okay even even",
    "start": "2075909",
    "end": "2082720"
  },
  {
    "text": "though the strings behind the scenes they're now completely different types and of course you can do this in object you could create a special object that",
    "start": "2082720",
    "end": "2089260"
  },
  {
    "text": "contains a value it's different and for example custom ID and an order ID there are different types right you shouldn't",
    "start": "2089260",
    "end": "2096700"
  },
  {
    "text": "mix up an order ID in a custom ID that could be really bad so doing these single choice types allow us to do that",
    "start": "2096700",
    "end": "2103950"
  },
  {
    "text": "so let's create the email address so we pass in a string and we have some",
    "start": "2103950",
    "end": "2109750"
  },
  {
    "text": "horrible regex that checks whether it's got an out sign in it or whatever so if",
    "start": "2109750",
    "end": "2115089"
  },
  {
    "text": "it does match the regex we're going to wrap that string in the email address and return it and if it",
    "start": "2115089",
    "end": "2121780"
  },
  {
    "text": "doesn't match the regex what are we going to do we're going to throw an exception we're going to return null oh",
    "start": "2121780",
    "end": "2128760"
  },
  {
    "text": "you can't do that what we need to do is say ok you gave me a string that I can't",
    "start": "2128760",
    "end": "2134200"
  },
  {
    "text": "handle I have to give you nothing back so what we have to do is make a distinction between something and",
    "start": "2134200",
    "end": "2139630"
  },
  {
    "text": "nothing so rather than just giving you the emails respec I'm going to give you some email address back and if it",
    "start": "2139630",
    "end": "2146470"
  },
  {
    "text": "doesn't work I'm going to give you nothing back so if you look at the type signature the original one said you give",
    "start": "2146470",
    "end": "2152650"
  },
  {
    "text": "me a string and I'll give you back an email address and it's like no you give me a string and I might give you back an",
    "start": "2152650",
    "end": "2158950"
  },
  {
    "text": "emitters I'll optionally give you back images if you give me a good string and if you don't give me a good string I'll give",
    "start": "2158950",
    "end": "2164200"
  },
  {
    "text": "you nothing back so now what we've done is it's now in the dock that the code is being document is documenting the fact",
    "start": "2164200",
    "end": "2170800"
  },
  {
    "text": "that it might not always work I think so well than just throwing exception I don't have to read the documentation I can just look at this and says yeah you",
    "start": "2170800",
    "end": "2176710"
  },
  {
    "text": "know you might not work there's some validation going on another very useful",
    "start": "2176710",
    "end": "2182020"
  },
  {
    "text": "type is a constrain string right we have you know a string that has to be 50 characters or less and we do the same",
    "start": "2182020",
    "end": "2188230"
  },
  {
    "text": "things like if the length is 50 is good and if the length is not 50 it is longer than 50 or something that's bad so again",
    "start": "2188230",
    "end": "2195730"
  },
  {
    "text": "if we look at the signature you give me a string and I might give you back a string 50 or I might not so you have to",
    "start": "2195730",
    "end": "2202900"
  },
  {
    "text": "handle that but in F sharp these things are immutable so once you have got a string 50 or once you've got an email",
    "start": "2202900",
    "end": "2208690"
  },
  {
    "text": "address you never have to check it ever again nobody can change it after it's been created so you never have to do any",
    "start": "2208690",
    "end": "2215200"
  },
  {
    "text": "kind of defensive programming the initial thing of like when you've loaded from the database so you've parsing the JSON for whatever's you have to do this",
    "start": "2215200",
    "end": "2221710"
  },
  {
    "text": "checking but after that you never have to check whether it's null you know how",
    "start": "2221710",
    "end": "2226990"
  },
  {
    "text": "to check whether it's valid you never have to check it is it going to fit in the database because the strings too long so the defensive programming sort",
    "start": "2226990",
    "end": "2233740"
  },
  {
    "text": "of goes away once you've done the initial has been a foundation of the edges of your app there's a lot less code you have to write inside the app",
    "start": "2233740",
    "end": "2241260"
  },
  {
    "text": "here's another good one this is a website they need and you can order nine hundred nine nine thousand nine or nine",
    "start": "2241260",
    "end": "2247360"
  },
  {
    "text": "nine things that's a problem that's probably a bug why is it bug because the",
    "start": "2247360",
    "end": "2252580"
  },
  {
    "text": "person writing website probably isn't int as their quantity right so that's",
    "start": "2252580",
    "end": "2257740"
  },
  {
    "text": "not that's not right how can we stop people using an int well we say okay",
    "start": "2257740",
    "end": "2263830"
  },
  {
    "text": "we're not going to use me we're going to use a special type called an order line quantity it's different from in it it's",
    "start": "2263830",
    "end": "2268840"
  },
  {
    "text": "the main specific type it's just for this particular domain an order line as a special thing it's not a normal in",
    "start": "2268840",
    "end": "2274200"
  },
  {
    "text": "again you can't multiply it by five and stuff so we're creating a new type just",
    "start": "2274200",
    "end": "2279460"
  },
  {
    "text": "to represent one thing in the domain okay and how many people ever do this",
    "start": "2279460",
    "end": "2284619"
  },
  {
    "text": "how often do you write a new class just to represent a little thing like an integer a lot of times we can't be",
    "start": "2284619",
    "end": "2290680"
  },
  {
    "text": "bothered because it's too much work and then one of these days we have a bug because we have a negative number in our",
    "start": "2290680",
    "end": "2295990"
  },
  {
    "text": "order qty or something this one you can never have a bug because let's say we we can do the validation when we plate it",
    "start": "2295990",
    "end": "2302410"
  },
  {
    "text": "and if it is valid it's a new one and if it's not valid it's a bad one so again",
    "start": "2302410",
    "end": "2309640"
  },
  {
    "text": "once we've got this or line quantity it's immutable it can never change and it can never be bad we never have to check it ever again",
    "start": "2309640",
    "end": "2316530"
  },
  {
    "text": "all right so let's revisit the challenge we had our original contacts so the",
    "start": "2316530",
    "end": "2322330"
  },
  {
    "text": "first thing we did is we recreated the way of making optional stuff really visible it was this different type the",
    "start": "2322330",
    "end": "2328090"
  },
  {
    "text": "second thing is we now have special types for each of these wheels to make",
    "start": "2328090",
    "end": "2335350"
  },
  {
    "text": "it very clear it's not just a normal string it's a 50 character string it's not just a string is an email address",
    "start": "2335350",
    "end": "2341020"
  },
  {
    "text": "okay by creating special types this is now more self documenting and it's also",
    "start": "2341020",
    "end": "2346150"
  },
  {
    "text": "more self validation - the other thing is we talked about is keeping them separate well of course it's really easy",
    "start": "2346150",
    "end": "2352120"
  },
  {
    "text": "we just create two separate types each one is an atomic thing and then we",
    "start": "2352120",
    "end": "2358990"
  },
  {
    "text": "create a new contacts which has the name and the email content info so we've now made it very clear that these are",
    "start": "2358990",
    "end": "2364510"
  },
  {
    "text": "separate on of things and we can now pass this in when we persist these things we can say well I want to save",
    "start": "2364510",
    "end": "2369730"
  },
  {
    "text": "the person lame I want to save the email contact info those will be separate transactions and the daily basis of a we",
    "start": "2369730",
    "end": "2375700"
  },
  {
    "text": "don't have to worry about them climbing all right there's one thing we forgot about which is this email verified flag",
    "start": "2375700",
    "end": "2382170"
  },
  {
    "text": "so let's have a look at that in more detail there's some rules around this",
    "start": "2382170",
    "end": "2389050"
  },
  {
    "text": "okay if the email has changed we have to reset it to false okay and we should",
    "start": "2389050",
    "end": "2395380"
  },
  {
    "text": "have a rule that we can only set the verified flag by special verification",
    "start": "2395380",
    "end": "2400840"
  },
  {
    "text": "service because when we verify you know you click the link in the some kind of hash code you check the hash code matches the email and if that's all good",
    "start": "2400840",
    "end": "2407790"
  },
  {
    "text": "we've got a very email we want to make sure that rule is followed we don't want",
    "start": "2407790",
    "end": "2412990"
  },
  {
    "text": "anyone just verifying it because that could open us up it could be a security issue if I could if I could hack into",
    "start": "2412990",
    "end": "2419440"
  },
  {
    "text": "the system and change the email verify flag then I could send myself a password reset message you know to the wrong",
    "start": "2419440",
    "end": "2424990"
  },
  {
    "text": "email address and so on so it's really bad we really want these rules to be followed as it stands now the design",
    "start": "2424990",
    "end": "2431230"
  },
  {
    "text": "does not communicate these rules so can we embed these rules in the design okay not in some documentation not in some",
    "start": "2431230",
    "end": "2438010"
  },
  {
    "text": "piece of code that checks validation something literally in the design so that's the next challenge all right so",
    "start": "2438010",
    "end": "2445000"
  },
  {
    "text": "right now anyone who set this true there's nothing it's just asking for trouble all right so what we're going to do is",
    "start": "2445000",
    "end": "2450770"
  },
  {
    "text": "create a new type and one of the rules in domain modeling in a sharp is there's",
    "start": "2450770",
    "end": "2456440"
  },
  {
    "text": "no problem that can't be solved by wrapping it in another type okay so we have our email address type and we're",
    "start": "2456440",
    "end": "2462200"
  },
  {
    "text": "going to wrap it in another type called a verified email all right we're going to take and get another type and now",
    "start": "2462200",
    "end": "2468980"
  },
  {
    "text": "we're going to have our verification service and the verification service for its input it takes a normal email",
    "start": "2468980",
    "end": "2474620"
  },
  {
    "text": "address and it takes some sort of hash and it spits out a verified email or maybe not it's maybe the verification",
    "start": "2474620",
    "end": "2482570"
  },
  {
    "text": "verification has doesn't match so it's very clear that this is returning you know you give me email address I might",
    "start": "2482570",
    "end": "2489320"
  },
  {
    "text": "give you back a verified email so it's now very clear you can tell straight away from this didn't mind our work you",
    "start": "2489320",
    "end": "2494660"
  },
  {
    "text": "don't have to look and see does it throw an exception or something and then what we also do is make this verify the email",
    "start": "2494660",
    "end": "2500590"
  },
  {
    "text": "type a private constructor so that the only person who created is the",
    "start": "2500590",
    "end": "2506150"
  },
  {
    "text": "verification service so that's just like any any kind of thing you can just make it a private sort of type and then now",
    "start": "2506150",
    "end": "2513740"
  },
  {
    "text": "we do now we go back now we've got this thing we go back to our original thing and we say rather than saying there's a",
    "start": "2513740",
    "end": "2518930"
  },
  {
    "text": "flag we say it's a choice so it's either an unverified email address or it's a",
    "start": "2518930",
    "end": "2525200"
  },
  {
    "text": "verified verified email address okay so there's a choice of two things and what's cool is that in order to use the",
    "start": "2525200",
    "end": "2534050"
  },
  {
    "text": "unverified choice all we need is a regular email address and I can create an email that's that's fine but to",
    "start": "2534050",
    "end": "2540230"
  },
  {
    "text": "create the verified choice I'm going to need a verified email where can I get a verified email form well I can't create",
    "start": "2540230",
    "end": "2546890"
  },
  {
    "text": "it myself because it's private the only way I can get a verified email is from the verification service because it's",
    "start": "2546890",
    "end": "2553280"
  },
  {
    "text": "the only one has permission to write it so by doing this I have actually",
    "start": "2553280",
    "end": "2558320"
  },
  {
    "text": "embedded those business rules right in the design okay I've guaranteed I don't have to write a unit test for this",
    "start": "2558320",
    "end": "2564890"
  },
  {
    "text": "anymore because the code is the design could capsulate those rules and not only",
    "start": "2564890",
    "end": "2570170"
  },
  {
    "text": "does that it also you know looks nice okay we'll see in a minute so here's our self completed challenge",
    "start": "2570170",
    "end": "2575770"
  },
  {
    "text": "email address we've got all these new types before we had one type and now we've got email address you've got a",
    "start": "2575770",
    "end": "2581300"
  },
  {
    "text": "verified email as I male contact okay we've got a personal name we've got a contact we've got spring 50 in Ozone so let's go back and",
    "start": "2581300",
    "end": "2589640"
  },
  {
    "text": "visit the challenge which manager optional what the constraints which feels linked and what's the domain logic",
    "start": "2589640",
    "end": "2595460"
  },
  {
    "text": "so we can clearly see which values are optional because they've got an option",
    "start": "2595460",
    "end": "2600500"
  },
  {
    "text": "next to it okay that's right in in my face I don't have to go and read the documentation what the constraints will",
    "start": "2600500",
    "end": "2606170"
  },
  {
    "text": "is really obvious this is a 50 character string this is a 1 character string and so on again I don't have to read the",
    "start": "2606170",
    "end": "2612440"
  },
  {
    "text": "documentation I don't have to dive into the code looking the validation rules or anything which feels a links we've now",
    "start": "2612440",
    "end": "2620720"
  },
  {
    "text": "broken the original thing into two these pieces I can show you haven't got every",
    "start": "2620720",
    "end": "2626120"
  },
  {
    "text": "detail in here but you could also show that they get updated separately and it's the domain logic clear yes so",
    "start": "2626120",
    "end": "2632870"
  },
  {
    "text": "before we had a boolean flag and now we have a choice and what's interesting is",
    "start": "2632870",
    "end": "2639890"
  },
  {
    "text": "that the bigoted language the set of words that we use to talk about the domain has evolved as we've done this",
    "start": "2639890",
    "end": "2646490"
  },
  {
    "text": "process because originally we just had you know a contact and everything was a string and a boolean and now we have",
    "start": "2646490",
    "end": "2653600"
  },
  {
    "text": "things like we have a concept called an email address and we have a concept called a verified email address and we have a concept called a personal name",
    "start": "2653600",
    "end": "2659930"
  },
  {
    "text": "and a concept called an email contact and so on this is these are the words that business reduce I mean we've",
    "start": "2659930",
    "end": "2665630"
  },
  {
    "text": "actually discovered something not only have we got a better design we've also got a design actually reflects the",
    "start": "2665630",
    "end": "2671660"
  },
  {
    "text": "terminology that the business would use when they're talking about this thing so this is good so we've actually killed",
    "start": "2671660",
    "end": "2676970"
  },
  {
    "text": "two birds with one stone better design and a more accurate characterization of the model from a",
    "start": "2676970",
    "end": "2684080"
  },
  {
    "text": "business point of view and of course this is all compatible code this is not a Word document and this is not a UML",
    "start": "2684080",
    "end": "2689450"
  },
  {
    "text": "diagram all right let's do one more thing making illegal states",
    "start": "2689450",
    "end": "2694840"
  },
  {
    "text": "unrepresentable so sometime later we",
    "start": "2694840",
    "end": "2700340"
  },
  {
    "text": "decide to add an address so well as having an email a contact could have an address and a postal address as well",
    "start": "2700340",
    "end": "2707050"
  },
  {
    "text": "okay fair enough now the business says you know we need a business rule a",
    "start": "2707050",
    "end": "2712940"
  },
  {
    "text": "contact must have an email address or postal address sounds sensible all right so let's look",
    "start": "2712940",
    "end": "2719039"
  },
  {
    "text": "at this design does this design meet the requirements right it's like we've got",
    "start": "2719039",
    "end": "2724589"
  },
  {
    "text": "these two fields email and address right no it doesn't because remember what I said everything is required unless you",
    "start": "2724589",
    "end": "2731039"
  },
  {
    "text": "say it's optional is required so this design says that the email and the address are both required fields that's",
    "start": "2731039",
    "end": "2737069"
  },
  {
    "text": "not what I said I said I could be one or the other right all right let's make them both optional well that doesn't",
    "start": "2737069",
    "end": "2744690"
  },
  {
    "text": "work either because they could both be missing and that doesn't meet the rule either we said we need to have one or",
    "start": "2744690",
    "end": "2749849"
  },
  {
    "text": "the other right but they can't both be missing so how can we model this okay",
    "start": "2749849",
    "end": "2755539"
  },
  {
    "text": "there's a great phrase make illegal states unrepresentable so rather than saying okay well they can't both be",
    "start": "2755539",
    "end": "2761819"
  },
  {
    "text": "missing but we'll put a unit test in we'll put some validation in we'll try and make sure that never happens it's",
    "start": "2761819",
    "end": "2767430"
  },
  {
    "text": "like no don't do that try and make sure the design captures the business rule so",
    "start": "2767430",
    "end": "2772829"
  },
  {
    "text": "you literally can't happen you literally cannot light codes that doesn't meet the business rule okay how can we do that",
    "start": "2772829",
    "end": "2779789"
  },
  {
    "text": "well if you think about it a contact must have an email or post address what",
    "start": "2779789",
    "end": "2784859"
  },
  {
    "text": "does that mean well it means that you either have an email us or they have a personal address or they have both okay",
    "start": "2784859",
    "end": "2789990"
  },
  {
    "text": "that's three possibilities those are the three possibilities and then missing other than missing there's not a",
    "start": "2789990",
    "end": "2795510"
  },
  {
    "text": "possibility so there's three choices how do we model something with three choices well we've seen how to do this right we",
    "start": "2795510",
    "end": "2802980"
  },
  {
    "text": "say well it's an email only or lesson dress only or it's both so now we have a",
    "start": "2802980",
    "end": "2808380"
  },
  {
    "text": "type the represents of three choices and what's great about this is like the",
    "start": "2808380",
    "end": "2814230"
  },
  {
    "text": "choice where they're both missing is not an available choice it literally cannot happen there's not the top fold will not",
    "start": "2814230",
    "end": "2819630"
  },
  {
    "text": "compile it's just not there not only that it also documents it communicates",
    "start": "2819630",
    "end": "2825240"
  },
  {
    "text": "if I come across this code and I say well you know what are the business rules around these things it's like well yeah you can either have one or even how",
    "start": "2825240",
    "end": "2830849"
  },
  {
    "text": "the other wouldn't have both so it's a self-documenting code which is very nice and then we take this choice and we",
    "start": "2830849",
    "end": "2837329"
  },
  {
    "text": "stick it in our context so the requirements are now included in the type system we don't have to write unit",
    "start": "2837329",
    "end": "2843869"
  },
  {
    "text": "tests that's great the code is also self documenting which is great all right so we can build this thing up",
    "start": "2843869",
    "end": "2851430"
  },
  {
    "text": "now we've got yet another type okay we start off with one type now we have like twenty types so the types really not apply luckily they're all really short",
    "start": "2851430",
    "end": "2858510"
  },
  {
    "text": "and they all fit in one page so that's good so before they were separate and after afterwards we've merged them into",
    "start": "2858510",
    "end": "2865050"
  },
  {
    "text": "one time all right this is awesome so static types for domain modeling they're",
    "start": "2865050",
    "end": "2872010"
  },
  {
    "text": "almost as awesome as a cat on a unicorn not maybe not as quite as awesome but I think they're pretty awesome let's do",
    "start": "2872010",
    "end": "2879480"
  },
  {
    "text": "one mother one more little tweak chances are the business doesn't really",
    "start": "2879480",
    "end": "2886349"
  },
  {
    "text": "want that rule that's what they said they wanted as always what they say the one is maybe not what they really want",
    "start": "2886349",
    "end": "2891570"
  },
  {
    "text": "and now go back to them and say is that what you really want so actually now all we want is we have to have at least one",
    "start": "2891570",
    "end": "2896640"
  },
  {
    "text": "way of being contacted okay I don't care first of all incentives kind of looks kind of ugly so we just say you have to",
    "start": "2896640",
    "end": "2902760"
  },
  {
    "text": "have at least one way up in contact it's fine how do we model that well we say here's all different ways you can be contacted you can be contacted by email",
    "start": "2902760",
    "end": "2908760"
  },
  {
    "text": "who can be contacted by postal address we could add you know Twitter or Skype",
    "start": "2908760",
    "end": "2914700"
  },
  {
    "text": "or something those are different ways have been contacted and then when we have a contact we have two fields one is",
    "start": "2914700",
    "end": "2921420"
  },
  {
    "text": "the primary contact info and the second second one is the secondary contact",
    "start": "2921420",
    "end": "2926880"
  },
  {
    "text": "enter and it's very clear from this design that the primary one is a required fields and the second one is",
    "start": "2926880",
    "end": "2933000"
  },
  {
    "text": "optional so you have to have at least one way of being contacted and you might have a second way of being contacted as well it's not quite the same because you",
    "start": "2933000",
    "end": "2939510"
  },
  {
    "text": "could have two email addresses this officer it's not exactly the same logic as the previous one so let's look at",
    "start": "2939510",
    "end": "2946770"
  },
  {
    "text": "what we've covered I talked about this challenge right could we make that original design better I talked about",
    "start": "2946770",
    "end": "2955140"
  },
  {
    "text": "your victus language I talked about self-documenting designs I talked about algebraic types and products and sums",
    "start": "2955140",
    "end": "2961950"
  },
  {
    "text": "and using choices to model things rather than inheritance this would kind of key takeaway and then we talked about",
    "start": "2961950",
    "end": "2968369"
  },
  {
    "text": "designing with types and using options instead of null using these single case unions to wrap types and making illegal",
    "start": "2968369",
    "end": "2975510"
  },
  {
    "text": "states representable kind of trying to capture the domain rule in the pipe system directly so that's a",
    "start": "2975510",
    "end": "2982830"
  },
  {
    "text": "good time to stop there I think there's a lot of things I can't cover right now I could talk about states state machines",
    "start": "2982830",
    "end": "2989340"
  },
  {
    "text": "that's a really interesting one how does services work and love of law there's lots of stuff to talk about but I'm not",
    "start": "2989340",
    "end": "2994740"
  },
  {
    "text": "going to talk about them thank you for just the end of the day so okay the slides and the video for this",
    "start": "2994740",
    "end": "3000770"
  },
  {
    "text": "talk will be on my website if shop for fun and profit coms slash DVD and in fact they're already there because I've",
    "start": "3000770",
    "end": "3006980"
  },
  {
    "text": "done this talk before so if you want to see this talk again or you want to look at the slides that's all there if you",
    "start": "3006980",
    "end": "3013850"
  },
  {
    "text": "want consulting business F sharp works if you want to know more about F sharp if you think their shop is just awesome",
    "start": "3013850",
    "end": "3020120"
  },
  {
    "text": "go to F sharp that all you can download it it's a cross-platform language it",
    "start": "3020120",
    "end": "3025190"
  },
  {
    "text": "works on a Mac it works on Linux it works in Visual Studio but it also works in vs codes you don't need to have a",
    "start": "3025190",
    "end": "3030710"
  },
  {
    "text": "whole video studio thing if you don't want to and you can also join their shop foundation for free and then participate",
    "start": "3030710",
    "end": "3037430"
  },
  {
    "text": "in the slack channel and finally I have a book coming out soon called domain modeling main functional what a",
    "start": "3037430",
    "end": "3044060"
  },
  {
    "text": "coincidence the same title as let's talk so it's just the it's in the early",
    "start": "3044060",
    "end": "3049850"
  },
  {
    "text": "access it's in the beta right now it's not finished you can buy it now if you like if you want if you're desperate to",
    "start": "3049850",
    "end": "3055880"
  },
  {
    "text": "read it or you can wait a couple of months and you can get it when it's finally ready but I hope you will like",
    "start": "3055880",
    "end": "3060890"
  },
  {
    "text": "it it's basically the store extended into a book and I think that is it so",
    "start": "3060890",
    "end": "3066410"
  },
  {
    "text": "thanks very much",
    "start": "3066410",
    "end": "3069069"
  },
  {
    "text": "and of course feel free to grab me ask questions whatever and there's a by the way if you're interested in a shop",
    "start": "3073579",
    "end": "3079410"
  },
  {
    "text": "there's a functional lab every day at 1:40 it's in room 10 you have to go out",
    "start": "3079410",
    "end": "3085200"
  },
  {
    "text": "the towards its front and then go up the stairs so if you if you want to see some demos of this I can demo this stuff to",
    "start": "3085200",
    "end": "3091859"
  },
  {
    "text": "you directly if you're interested so definitely check out the functional lab Cheers",
    "start": "3091859",
    "end": "3097849"
  }
]