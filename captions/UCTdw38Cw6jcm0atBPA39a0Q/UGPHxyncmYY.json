[
  {
    "start": "0",
    "end": "135000"
  },
  {
    "text": "hello everyone thanks for joining me too my name is Hasan Barakat and I work as a",
    "start": "10900",
    "end": "17310"
  },
  {
    "text": "lead consultant with Telstra purple today we are going to talk about micro services and how would we empower micro",
    "start": "17310",
    "end": "24000"
  },
  {
    "text": "services using SEO service Mich my agenda for today is to talk about what is service message in general and then",
    "start": "24000",
    "end": "31560"
  },
  {
    "text": "we'll spend the rest of the talk focusing on SQ so we will dig into what is the su main building plugs and its",
    "start": "31560",
    "end": "36750"
  },
  {
    "text": "architecture after that we will spend the rest of the talk showing you how would we leverage the SEO capabilities",
    "start": "36750",
    "end": "42570"
  },
  {
    "text": "from traffic routing reliability and observability and apply them on a real",
    "start": "42570",
    "end": "47640"
  },
  {
    "text": "world micro services application so why we should care about SEO service mesh or",
    "start": "47640",
    "end": "53699"
  },
  {
    "text": "service mesh in general a lot of development teams have started their journey and pricking their monolith",
    "start": "53699",
    "end": "59549"
  },
  {
    "text": "applications into a set of micro services or even building their new applications using micro service",
    "start": "59549",
    "end": "65100"
  },
  {
    "text": "architecture micro service architecture in general has a lot of benefits from modularity autonomy and flexibility and",
    "start": "65100",
    "end": "72200"
  },
  {
    "text": "in a micro service based architecture each micro service should be deployed independently and thanks to the",
    "start": "72200",
    "end": "78690"
  },
  {
    "text": "container technology we can easily achieve that so I'll build my micro service con terrorized it and then push",
    "start": "78690",
    "end": "84840"
  },
  {
    "text": "it to production but the container technology itself brings a bunch of a challenges how could we have pol",
    "start": "84840",
    "end": "92010"
  },
  {
    "text": "tolerance so if one of the containers died another one will be automatically spend up or how could we scale the",
    "start": "92010",
    "end": "98160"
  },
  {
    "text": "number of container instances that I have to match the demand coming to my application how could we have service",
    "start": "98160",
    "end": "104520"
  },
  {
    "text": "discovery and bunch of other things required to run micro service based environment and thanks to container",
    "start": "104520",
    "end": "110610"
  },
  {
    "text": "orchestration platforms such as kubernetes a lot of those challenges have already been addressed but there",
    "start": "110610",
    "end": "116790"
  },
  {
    "text": "are still few challenges that we need to address because those micro services will need to communicate with each other",
    "start": "116790",
    "end": "122280"
  },
  {
    "text": "at a certain point and when we think about this communication we need to make",
    "start": "122280",
    "end": "128129"
  },
  {
    "text": "sure it's serial reliable secure and we can observe all those service to service communication but there is a bit of a",
    "start": "128129",
    "end": "136500"
  },
  {
    "start": "135000",
    "end": "135000"
  },
  {
    "text": "challenge there because previously the micro services were living on the same host so we didn't have much a challenge",
    "start": "136500",
    "end": "142019"
  },
  {
    "text": "in terms of communication but right now they are going to communicate over the network",
    "start": "142019",
    "end": "147550"
  },
  {
    "text": "but how hard could it be to have a real-time reliable and secure service to",
    "start": "147550",
    "end": "153800"
  },
  {
    "text": "service communication if we take into consideration the fallacies of distributed computing which is a bunch",
    "start": "153800",
    "end": "161090"
  },
  {
    "text": "of false assumption that as developers we make about distributed systems such as network is reliable latency is",
    "start": "161090",
    "end": "166790"
  },
  {
    "text": "zero bandwidth is infinite and the rest of the assumptions all of those assumptions are pretty much false",
    "start": "166790",
    "end": "173240"
  },
  {
    "text": "assumptions so when we think about those we will find it's really challenging to achieve a reliable connectivity between",
    "start": "173240",
    "end": "179630"
  },
  {
    "text": "the services but as developers we start try to solve those problems by thinking",
    "start": "179630",
    "end": "185989"
  },
  {
    "text": "about abstraction so we try to abstract those infrastructure Network related concerns and use libraries so in the",
    "start": "185989",
    "end": "192739"
  },
  {
    "text": "dotnet wallet we could be using something like pulley that would provide us with reliable connectivity so we",
    "start": "192739",
    "end": "197780"
  },
  {
    "text": "could have like retrials circuit breakers and bunch of other features so our application will be something like",
    "start": "197780",
    "end": "204020"
  },
  {
    "start": "202000",
    "end": "202000"
  },
  {
    "text": "this we will have two services would like to communicate with each other and then we have bunch of libraries providing us with those resiliency",
    "start": "204020",
    "end": "210260"
  },
  {
    "text": "features but then in a micro-services environment each micro service could be",
    "start": "210260",
    "end": "217340"
  },
  {
    "text": "written in its own language so at a certain point someone will come and say it makes sense to write this new micro",
    "start": "217340",
    "end": "223549"
  },
  {
    "text": "service in elixir or closure or Haskell or whatever language that makes sense because it fits this problem domain and",
    "start": "223549",
    "end": "230440"
  },
  {
    "text": "at that point you'd realize do I have to solve the same problems that I solve it just in c-sharp on whatever language",
    "start": "230440",
    "end": "237320"
  },
  {
    "text": "that I was working with and the answer is yes because it's different language so you might need to have another",
    "start": "237320",
    "end": "243200"
  },
  {
    "text": "library and with the using another libraries there is a challenge there because some of those resiliency things",
    "start": "243200",
    "end": "249860"
  },
  {
    "text": "doesn't have a standard so it means that we will have inconsistencies in terms of the implementation between the services",
    "start": "249860",
    "end": "256010"
  },
  {
    "text": "and as developers with what we would do is apply another level of abstraction so",
    "start": "256010",
    "end": "261620"
  },
  {
    "text": "we should extract those infrastructure concerns from within the service to be outside the service because they are",
    "start": "261620",
    "end": "267919"
  },
  {
    "text": "really undifferentiated heavy-lifting unless your company main business is to",
    "start": "267919",
    "end": "273320"
  },
  {
    "start": "272000",
    "end": "272000"
  },
  {
    "text": "build those infrastructure related concerns so we end up with what's called the sidecar proxy pattern",
    "start": "273320",
    "end": "278620"
  },
  {
    "text": "so we have our service will will be split into two components the first one contains our business application and",
    "start": "278620",
    "end": "285190"
  },
  {
    "text": "second one is a sidecar proxy which is intercepting the traffic going in and",
    "start": "285190",
    "end": "290980"
  },
  {
    "text": "out of my service and applying all of those infrastructure concerns from retries having security in terms of the",
    "start": "290980",
    "end": "298420"
  },
  {
    "text": "communication we can also leverage it to applied traffic routing capabilities so we can have advanced traffic routing so",
    "start": "298420",
    "end": "305020"
  },
  {
    "text": "we could have split the traffic to 80% to one version and 20% to another",
    "start": "305020",
    "end": "311200"
  },
  {
    "text": "version and the South called proxy is the the core pattern that the service mesh platform is have been built on top",
    "start": "311200",
    "end": "317620"
  },
  {
    "text": "of it the service which platform in general is a dedicated piece of infrastructure responsible for",
    "start": "317620",
    "end": "324520"
  },
  {
    "text": "connecting controlling and observing any service to service communication and",
    "start": "324520",
    "end": "330060"
  },
  {
    "text": "it's typically implemented as an array of sidecar proxies living alongside the application so each service will have a",
    "start": "330060",
    "end": "337780"
  },
  {
    "text": "sidecar proxy living beside that service and that sidecar proxy will be intercepting the traffic but in terms of",
    "start": "337780",
    "end": "345070"
  },
  {
    "text": "service the service communications so it enables us to apply a lot of traffic routing capabilities and it doesn't have",
    "start": "345070",
    "end": "351190"
  },
  {
    "text": "a centralized server that's that I have to communicate with all the time but where would those sidecar proxies get",
    "start": "351190",
    "end": "357580"
  },
  {
    "text": "their configurations or traffic routing rules from they will get them from the control plane and the control plane",
    "start": "357580",
    "end": "363880"
  },
  {
    "start": "362000",
    "end": "362000"
  },
  {
    "text": "responsibility is to get the rules and configurations from the users and push",
    "start": "363880",
    "end": "369100"
  },
  {
    "text": "them to all of the sidecar proxies living inside the mesh there are",
    "start": "369100",
    "end": "374710"
  },
  {
    "text": "multiple service mesh classroom is available right now that we can leverage but today we will be focusing on SEO",
    "start": "374710",
    "end": "379990"
  },
  {
    "text": "which is an open source service mesh platform that provides us with a uniform way to connect control and observe the",
    "start": "379990",
    "end": "387550"
  },
  {
    "text": "service to service communication so let's take a little bit deeper into SEO",
    "start": "387550",
    "end": "392680"
  },
  {
    "text": "and its main building clocks so to understand is to let's assume that there",
    "start": "392680",
    "end": "398770"
  },
  {
    "text": "are two services would like to communicate with each other service a would like to communicate with service B this could be over any protocol like",
    "start": "398770",
    "end": "405790"
  },
  {
    "text": "HTTP 1.1 2g RPC or TCP once we deploy those two services on top",
    "start": "405790",
    "end": "411940"
  },
  {
    "text": "of service mesh each service would have a sidecar proxy living alongside this service and it will be automatically",
    "start": "411940",
    "end": "418870"
  },
  {
    "text": "intercepting the traffic so I don't need to modify my application code to give those benefits so this means that the",
    "start": "418870",
    "end": "426010"
  },
  {
    "text": "traffic right now will be going from service a to service a proxy or automatically intercepted by service a",
    "start": "426010",
    "end": "431200"
  },
  {
    "text": "proxy then goes to service B proxy and finally we'll go to service B and the",
    "start": "431200",
    "end": "436390"
  },
  {
    "text": "response will go back in the same path and then so this is representing the",
    "start": "436390",
    "end": "442510"
  },
  {
    "text": "data plane what are the control playing components of the SU service mission the",
    "start": "442510",
    "end": "447580"
  },
  {
    "text": "first component is a pilot and pilot accepts the traffic routing rules from the users pushes them to all of the",
    "start": "447580",
    "end": "453550"
  },
  {
    "text": "sidecar proxies living in the mesh second component is the mixer and makes",
    "start": "453550",
    "end": "459220"
  },
  {
    "text": "a prophetess with two key benefits the first one is policies and second one is telemetry so polices means I can start",
    "start": "459220",
    "end": "466210"
  },
  {
    "text": "applying traffic routing policies for any service to service communication because whenever a call happens between two",
    "start": "466210",
    "end": "473440"
  },
  {
    "text": "services before that the code proceeds the sidecar proxy will go and ask the mixer am I allowed to do this call or",
    "start": "473440",
    "end": "480460"
  },
  {
    "text": "not and if I'm allowed then the call would proceed and after the call",
    "start": "480460",
    "end": "485950"
  },
  {
    "text": "completes asynchronously the sidecar proxy will be sending telemetry information to the mixer when the mixer",
    "start": "485950",
    "end": "493690"
  },
  {
    "text": "will grab those telemetry information share it with other monitoring platforms",
    "start": "493690",
    "end": "499210"
  },
  {
    "text": "as we will see later finally the citadel and the responsibility of the citadel all of the",
    "start": "499210",
    "end": "505180"
  },
  {
    "text": "security related aspects in the service mesh so if I would like to encrypt the traffic between the services or all of",
    "start": "505180",
    "end": "511360"
  },
  {
    "text": "the services in the mesh the Citadel will be generating the certificates that could be used for encrypting the traffic",
    "start": "511360",
    "end": "517570"
  },
  {
    "text": "and this is basically the architecture of su we have the data plane representing represented with the",
    "start": "517570",
    "end": "523870"
  },
  {
    "text": "sidecar proxies and then the control plane which is pilot mixer and citadel",
    "start": "523870",
    "end": "529770"
  },
  {
    "text": "SEO itself could be deployed on multiple classrooms but today I'll show you how",
    "start": "529770",
    "end": "534850"
  },
  {
    "text": "would we leverage s2 features on top of capabilities and to do that I would like to make sure that all of us have a",
    "start": "534850",
    "end": "541480"
  },
  {
    "text": "shared understanding about two concepts with cabinets usually do that how many of you have heard of you or",
    "start": "541480",
    "end": "547149"
  },
  {
    "text": "used keep uni destroy like right now all right so that's a good number of people",
    "start": "547149",
    "end": "552240"
  },
  {
    "text": "so we for those who didn't use carries previously Kunis is a container",
    "start": "552240",
    "end": "557709"
  },
  {
    "text": "orchestration platform that enables us to run containers at scales so if I have a large number of containers and I would",
    "start": "557709",
    "end": "563740"
  },
  {
    "text": "like to execute those in a production environment I would usually use cube annuities and then order to deploy a",
    "start": "563740",
    "end": "570490"
  },
  {
    "text": "container on top of keep your natives the containers of will always be living in what's called coda pod so a pod is",
    "start": "570490",
    "end": "578949"
  },
  {
    "text": "the atomic unit of scaling inside kubernetes our container will always be",
    "start": "578949",
    "end": "583959"
  },
  {
    "text": "living inside the pot it will never it will never ever be living outside the pot the pot itself might have multiple",
    "start": "583959",
    "end": "590350"
  },
  {
    "text": "containers living inside of it and those containers will we'll be sharing the",
    "start": "590350",
    "end": "595600"
  },
  {
    "text": "same network name a space and as because they are sharing the same network name",
    "start": "595600",
    "end": "601329"
  },
  {
    "text": "is paste it enables them to communicate seamlessly and as you might have guessed this is how the sidecut proxy pattern",
    "start": "601329",
    "end": "607209"
  },
  {
    "text": "has been implemented on cuban et's you deploy your application inside the pod",
    "start": "607209",
    "end": "612730"
  },
  {
    "text": "the pod will contain two containers the first one is your application and the second one is the sidecar proxy provided",
    "start": "612730",
    "end": "619420"
  },
  {
    "text": "from the service mesh the second key object that we need to know about cuban",
    "start": "619420",
    "end": "625389"
  },
  {
    "text": "it is while we are working with the service mesh is the service and the service is an abstraction that enables",
    "start": "625389",
    "end": "631269"
  },
  {
    "text": "us to logically group set of poles and using a label selector and label",
    "start": "631269",
    "end": "636970"
  },
  {
    "text": "selector levels are basically a set of key values that could be assigned to any objects so i each pod will have a label",
    "start": "636970",
    "end": "643529"
  },
  {
    "text": "and we use the service to group those labels the service also have a DNS",
    "start": "643529",
    "end": "649089"
  },
  {
    "text": "record that could be used by the consumers so my pod here if it would",
    "start": "649089",
    "end": "654940"
  },
  {
    "text": "like to communicate with any of those back-end pods it wouldn't need to recognize the IPS of",
    "start": "654940",
    "end": "659949"
  },
  {
    "text": "those back-end pods it will just use the DNS record in addition to having a diene",
    "start": "659949",
    "end": "665260"
  },
  {
    "text": "as the service itself do apply some load balancing capabilities it's pretty",
    "start": "665260",
    "end": "670329"
  },
  {
    "text": "limited though so those are the two key concepts that we need to know about when we use",
    "start": "670329",
    "end": "676040"
  },
  {
    "text": "servus mesh on top of Copernicus so I'd like to spend the rest of the talk",
    "start": "676040",
    "end": "681380"
  },
  {
    "text": "showing you how would we apply the capabilities of East you using a",
    "start": "681380",
    "end": "686480"
  },
  {
    "text": "real-world microservices application it's pretty simple it's showing a bunch of products and if you click on one of",
    "start": "686480",
    "end": "693139"
  },
  {
    "text": "the products it will show us the product description as well as the reviews of that particular product the reviews has",
    "start": "693139",
    "end": "699529"
  },
  {
    "text": "two versions v1 is the one that we see right now and v2 is the one with those little stores the application consists",
    "start": "699529",
    "end": "708259"
  },
  {
    "start": "708000",
    "end": "708000"
  },
  {
    "text": "of three micro services whip which is a fitness core application accepting the",
    "start": "708259",
    "end": "713810"
  },
  {
    "text": "request from the user and returning the UI for that catalog and reviews the art back-end services exposing the product",
    "start": "713810",
    "end": "721160"
  },
  {
    "text": "information and the product reviews through a set of restful api s' so what",
    "start": "721160",
    "end": "726709"
  },
  {
    "text": "we will do today is we'll deploy those three micro services on top of kubernetes then we will inject the",
    "start": "726709",
    "end": "733279"
  },
  {
    "text": "sidecar proxies for each service so we can start controlling the traffic going between the services after that we'll",
    "start": "733279",
    "end": "740329"
  },
  {
    "text": "see how would we apply advanced traffic routing so we can split the traffic between the versions using multiple",
    "start": "740329",
    "end": "747589"
  },
  {
    "text": "approaches so the first one is we will have a percentage pace so 80 percent of the traffic goes to v1 20% goes to v2",
    "start": "747589",
    "end": "755180"
  },
  {
    "text": "also we will apply a voltage rating so if the obtained user is an administrator",
    "start": "755180",
    "end": "761120"
  },
  {
    "text": "we'll send the traffic to v2 otherwise in the to v1 also will apply some of the",
    "start": "761120",
    "end": "766730"
  },
  {
    "text": "reliability features so how could we make sure that our application is reliable if one of the downstream",
    "start": "766730",
    "end": "772610"
  },
  {
    "text": "service is too slow or actually it's faulty it's not available or anything like that finally we will see how could",
    "start": "772610",
    "end": "780230"
  },
  {
    "text": "we have a holistic view of our system so if something went wrong we can easily identify the source of the failure so",
    "start": "780230",
    "end": "789889"
  },
  {
    "text": "let's start with actually deploying the three services on top of copernicus and start injecting the sidecar proxies to",
    "start": "789889",
    "end": "796370"
  },
  {
    "text": "each service so source code of the application is",
    "start": "796370",
    "end": "802400"
  },
  {
    "text": "available in github I will share it at the end of the talk and all of the demos that I will do today is going to be on a",
    "start": "802400",
    "end": "809630"
  },
  {
    "text": "mini mini cube cluster on my local machine so to deploy the three micro",
    "start": "809630",
    "end": "815060"
  },
  {
    "text": "services we will deploy for each service we'll deploy two objects the pods and",
    "start": "815060",
    "end": "820070"
  },
  {
    "text": "the service sitting in front of the pod and the way we do this so for example the espresso shop web will be using a",
    "start": "820070",
    "end": "826550"
  },
  {
    "text": "deployment object the deployment object is an object that enables us to spend multiple pods of the same structure so",
    "start": "826550",
    "end": "834590"
  },
  {
    "text": "in here we will be creating a pod for the three deployment for the espresso shop web with only one replicas you will",
    "start": "834590",
    "end": "841430"
  },
  {
    "text": "only have one pot and in the specs section here we define how that pod will look like so the pod could have multiple",
    "start": "841430",
    "end": "849860"
  },
  {
    "text": "containers inside of it and in this case we only have one container the the sta service mesh proxy will be injected in",
    "start": "849860",
    "end": "857180"
  },
  {
    "text": "it as we will see later so we define the image of that container I am using the",
    "start": "857180",
    "end": "864410"
  },
  {
    "text": "image pool policy if not present this is to not depend on the internet for the demo but if you are using in a",
    "start": "864410",
    "end": "869540"
  },
  {
    "text": "production you should have always and then the name of the container the container will be listening on port 80",
    "start": "869540",
    "end": "875960"
  },
  {
    "text": "and it has two dependencies in terms of environment variables the first one is the product catalog URL and this is the",
    "start": "875960",
    "end": "883010"
  },
  {
    "text": "key thing to notice here is the name of the DNS record that you are using this is the name of the product catalog",
    "start": "883010",
    "end": "888980"
  },
  {
    "text": "service that we will create in a second and similarly for the reviews so this is how would we create the pods of the",
    "start": "888980",
    "end": "895610"
  },
  {
    "text": "espresso shop web then we have a service to accept the traffic from the consumers",
    "start": "895610",
    "end": "900890"
  },
  {
    "text": "so the service itself is pretty simple we use a label selector and in this case",
    "start": "900890",
    "end": "907010"
  },
  {
    "text": "the level selector are basically the label that we have applied to any pod",
    "start": "907010",
    "end": "912110"
  },
  {
    "text": "that will be created which is the one that we have here we have two labels for the pods the the app name and the",
    "start": "912110",
    "end": "918860"
  },
  {
    "text": "version and we will use the version later to traffic the control the traffic between the services then for the",
    "start": "918860",
    "end": "926150"
  },
  {
    "text": "service there are we are using load balancer which is basically allowing us to accept traffic from outside the cluster the service will be listening to",
    "start": "926150",
    "end": "933680"
  },
  {
    "text": "port 89 and will forward the traffic to port 80 80 90 is basically an arbitrary number",
    "start": "933680",
    "end": "939709"
  },
  {
    "text": "that I picked there is nothing stopping us from using any other number so this is how would we deploy the first service",
    "start": "939709",
    "end": "945430"
  },
  {
    "text": "similarly we will deploy the product catalog so we will have a deployment for the product catalog it's pretty much",
    "start": "945430",
    "end": "951410"
  },
  {
    "text": "similar to the one that we have seen the only difference is going to be the container name and the image and the",
    "start": "951410",
    "end": "957260"
  },
  {
    "text": "names of the objects and again we have a service setting on front of it and finally for the reviews because we have",
    "start": "957260",
    "end": "963949"
  },
  {
    "text": "two versions of the reviews are I've created two deployments so the deployment the first one will be",
    "start": "963949",
    "end": "969019"
  },
  {
    "text": "deploying the version one of the reviews and another deployment object review to deploy reviews v2 and the reviews itself",
    "start": "969019",
    "end": "977029"
  },
  {
    "text": "it's it's logically one service with two different versions of the pods running at the same time we will have one",
    "start": "977029",
    "end": "982639"
  },
  {
    "text": "service sitting in front of both versions so we have service and this",
    "start": "982639",
    "end": "988370"
  },
  {
    "text": "service will be sending that traffic to the reviews I can control which versions of the reviews if I added the version to",
    "start": "988370",
    "end": "995959"
  },
  {
    "text": "the label selector here but I would like to start controlling the traffic using",
    "start": "995959",
    "end": "1001029"
  },
  {
    "text": "SEO service mesh not using Copernicus so I'll not add that right now so let's go",
    "start": "1001029",
    "end": "1008110"
  },
  {
    "text": "and actually deploy those three services and you see the font right now",
    "start": "1008110",
    "end": "1016920"
  },
  {
    "text": "so I'll use cube c2l apply F which will we can provide it with the file that we",
    "start": "1018010",
    "end": "1024280"
  },
  {
    "text": "just went through on the right hand side here I'm just monitoring all of the services or all of the pods in the",
    "start": "1024280",
    "end": "1030790"
  },
  {
    "text": "service all of them had been created if I go to the kubernetes dashboard I can",
    "start": "1030790",
    "end": "1036819"
  },
  {
    "text": "see all of the pods that have been created as well as the services I finished that and if I go into any of",
    "start": "1036820",
    "end": "1044650"
  },
  {
    "text": "the pods we can see we have only one container living inside of it so that's",
    "start": "1044650",
    "end": "1050560"
  },
  {
    "text": "that means that the applications have been created and if I go to the services opening one of the services will show us",
    "start": "1050560",
    "end": "1057160"
  },
  {
    "text": "the actual application and here's the application I can go to the product details and we see the product scription",
    "start": "1057160",
    "end": "1064270"
  },
  {
    "text": "as well as the reviews if I keep refreshing I'll keep getting different",
    "start": "1064270",
    "end": "1070240"
  },
  {
    "text": "versions of the reviews v1 and v2 and show you that I have created a little script that will go and we head the",
    "start": "1070240",
    "end": "1077680"
  },
  {
    "text": "reviews service and we'll show us which version did we get from that reviews so",
    "start": "1077680",
    "end": "1085840"
  },
  {
    "text": "as you can see it will keep switching between v1 and v2 obviously on very small scale it will not be like v1 v2",
    "start": "1085840",
    "end": "1093550"
  },
  {
    "text": "all the time it will not be like 5050 exactly it will be a little bit",
    "start": "1093550",
    "end": "1098920"
  },
  {
    "text": "different all right now we have deployed the services let's start injecting the",
    "start": "1098920",
    "end": "1106330"
  },
  {
    "text": "sidecar proxies so we can start controlling the traffic and there are two ways to inject the sidecar proxies",
    "start": "1106330",
    "end": "1112630"
  },
  {
    "text": "the first one is to configure Copernicus to automatically inject the sidecar",
    "start": "1112630",
    "end": "1119230"
  },
  {
    "text": "proxy to any pod that will be created inside a particular namespace or we can",
    "start": "1119230",
    "end": "1124240"
  },
  {
    "text": "do it manually using the SU CTL so today I'll do it manually so you can understand what's happening behind the",
    "start": "1124240",
    "end": "1130750"
  },
  {
    "text": "scene but usually in a new environment you can just use configure a particular enemy space to automatically inject the",
    "start": "1130750",
    "end": "1137080"
  },
  {
    "text": "sidecar proxy so to do that I will use the command line tool of sq which is",
    "start": "1137080",
    "end": "1144100"
  },
  {
    "text": "askew CTL will use a command cube inject and the command cube inject",
    "start": "1144100",
    "end": "1151120"
  },
  {
    "text": "accepts the same file that we use to deploy the services so what will happen",
    "start": "1151120",
    "end": "1158830"
  },
  {
    "text": "here is that command will accept the the kubernetes services it will parse them",
    "start": "1158830",
    "end": "1164080"
  },
  {
    "text": "augment the file and will create a new file and the outcome is that new file is just another ML file so as we can see",
    "start": "1164080",
    "end": "1171280"
  },
  {
    "text": "here the the service of the reviews as an example didn't they change nothing it changed in there but what has it changed",
    "start": "1171280",
    "end": "1178630"
  },
  {
    "text": "it is the deployment so if we go to the review service which is becoming the",
    "start": "1178630",
    "end": "1183700"
  },
  {
    "text": "reviews object becoming very very large because right now we have mainly a bunch",
    "start": "1183700",
    "end": "1190120"
  },
  {
    "text": "of annotations and we have two containers the first one is our container the espresso shop reviews and",
    "start": "1190120",
    "end": "1196240"
  },
  {
    "text": "it has bunch of arguments have been passed to it and in addition to that we have another container which is the SQ",
    "start": "1196240",
    "end": "1203470"
  },
  {
    "text": "proxy and this once we deploy those services or update them it will",
    "start": "1203470",
    "end": "1208780"
  },
  {
    "text": "automatically start intercepting the traffic between the services so let's go",
    "start": "1208780",
    "end": "1214720"
  },
  {
    "text": "and apply this cube this UML file using",
    "start": "1214720",
    "end": "1219730"
  },
  {
    "text": "cube city L so this will go it will",
    "start": "1219730",
    "end": "1230710"
  },
  {
    "text": "terminate the existing pods and will initiate new pods running my application",
    "start": "1230710",
    "end": "1242110"
  },
  {
    "text": "should be working right now and if I keep refreshing the traffic it will keep switching between V 1 and V 2 so we",
    "start": "1242110",
    "end": "1248110"
  },
  {
    "text": "still don't have much control over which version the traffic is going to but we",
    "start": "1248110",
    "end": "1253809"
  },
  {
    "text": "will do that in a second and if we open the dashboard we can see with any if we",
    "start": "1253809",
    "end": "1259240"
  },
  {
    "text": "opened any of the pods that's right now we're gonna have two containers the first one is espresso shop web which is",
    "start": "1259240",
    "end": "1264309"
  },
  {
    "text": "the main business application and the second one is the issue proxy and this is the one that was automatically",
    "start": "1264309",
    "end": "1270280"
  },
  {
    "text": "injected using the cube inject command so what if I would like to have a more",
    "start": "1270280",
    "end": "1276820"
  },
  {
    "text": "control over that traffic how can i how can I apply that and to do that while",
    "start": "1276820",
    "end": "1281950"
  },
  {
    "text": "you get back to the slides for a second so we need to understand how the traffic routing is getting applied inside SEO",
    "start": "1281950",
    "end": "1288390"
  },
  {
    "text": "service mesh so there are two key concepts or two key objects that we need to understand the avoid proxy and pilot",
    "start": "1288390",
    "end": "1295290"
  },
  {
    "text": "avoid proxy is the sidecar proxy that gets injected to all of our pods it's an",
    "start": "1295290",
    "end": "1302040"
  },
  {
    "start": "1298000",
    "end": "1298000"
  },
  {
    "text": "open source service proxy and this has people from scratch to support cloud native applications it's built using C++",
    "start": "1302040",
    "end": "1309180"
  },
  {
    "text": "so it's hell it has a very good performance and it's also have a low memory footprint it also doesn't have",
    "start": "1309180",
    "end": "1317210"
  },
  {
    "text": "doesn't add a lot of overhead in terms of latency for the service the service communication it's a post a lot of",
    "start": "1317210",
    "end": "1323670"
  },
  {
    "text": "protocols HTTP 1.1 G RPC HTTP to TCP",
    "start": "1323670",
    "end": "1328700"
  },
  {
    "text": "it's really very powerful because it also has HTTP level saving capabilities",
    "start": "1328700",
    "end": "1335280"
  },
  {
    "text": "so we can intercept that request themselves and apply traffic rules based on the content or the headers as an",
    "start": "1335280",
    "end": "1341760"
  },
  {
    "text": "example of a particular request the second component is a pilot and the mob",
    "start": "1341760",
    "end": "1347160"
  },
  {
    "text": "pilot my responsibility as we said accept the rules from the users push them to all of the sidecar proxies",
    "start": "1347160",
    "end": "1352559"
  },
  {
    "text": "living in the mesh the pilot maintains a canonical model of the services and it",
    "start": "1352559",
    "end": "1358950"
  },
  {
    "text": "also has a adapter pattern implemented which enables the pilot to be deployed on multiple platforms",
    "start": "1358950",
    "end": "1364920"
  },
  {
    "text": "so we can deploy the pilot on kubernetes as we will see today or meters or Cloud Foundry or even virtual machines if we",
    "start": "1364920",
    "end": "1371640"
  },
  {
    "text": "would like to but what if I have a cluster and they have services living on",
    "start": "1371640",
    "end": "1376800"
  },
  {
    "start": "1375000",
    "end": "1375000"
  },
  {
    "text": "the cluster and I'd like to start controlling the traffic so sto itself have extended kubernetes so it's used it",
    "start": "1376800",
    "end": "1384300"
  },
  {
    "text": "has used custom resource definitions which means they have introduced bunch of new objects similar to the pod and",
    "start": "1384300",
    "end": "1391110"
  },
  {
    "text": "service and the deployment that we have seen so far we just create another queue beliefs object that enable us to control",
    "start": "1391110",
    "end": "1397320"
  },
  {
    "text": "the traffic using them so what are those objects if I have a cube aeneas cluster",
    "start": "1397320",
    "end": "1402720"
  },
  {
    "text": "and I would like to start controlling the traffic coming to my cluster I need to create an object called gateway and",
    "start": "1402720",
    "end": "1408179"
  },
  {
    "text": "this enables me to start applying the traffic routing capabilities to the traffic coming to my cluster if I would",
    "start": "1408179",
    "end": "1414510"
  },
  {
    "text": "like to control the traffic going outside my cluster then I need to have a service entry object but what if I need to",
    "start": "1414510",
    "end": "1421610"
  },
  {
    "text": "control the service to service communication for the service to service communication first we need to create a",
    "start": "1421610",
    "end": "1426890"
  },
  {
    "text": "destination rule object the destination rule object enables me to partition a",
    "start": "1426890",
    "end": "1432320"
  },
  {
    "text": "particular service into subsets using label selector so as an example for the",
    "start": "1432320",
    "end": "1439310"
  },
  {
    "text": "review service that we have right now we have two versions those two versions could be defined it could be split in",
    "start": "1439310",
    "end": "1445310"
  },
  {
    "text": "two it will create one destination rule and inside the destination room we split it into two subsets v1 and v2 but so far",
    "start": "1445310",
    "end": "1453410"
  },
  {
    "text": "we didn't define the traffic routing rules because to define the traffic routing rules we use a destination rule",
    "start": "1453410",
    "end": "1458960"
  },
  {
    "text": "to pack a virtual service object and that virtual service object will we actually define the traffic routing",
    "start": "1458960",
    "end": "1465860"
  },
  {
    "text": "rules there is one more object which is a very nice object which is the sidecar",
    "start": "1465860",
    "end": "1470900"
  },
  {
    "text": "because this object enables us to tune the performance of the service service",
    "start": "1470900",
    "end": "1476060"
  },
  {
    "text": "communication so if we have a database and that database I don't want to apply",
    "start": "1476060",
    "end": "1481100"
  },
  {
    "text": "any traffic routing rules to it I can opt out from applying any traffic",
    "start": "1481100",
    "end": "1486650"
  },
  {
    "text": "routing to that database and obviously this will minimize the rules that needs to be applied by the sidecar and hence",
    "start": "1486650",
    "end": "1492380"
  },
  {
    "text": "gaining a bit of performance improvement so this is an example for how would we",
    "start": "1492380",
    "end": "1499880"
  },
  {
    "start": "1498000",
    "end": "1498000"
  },
  {
    "text": "use the destination rule and virtual services to control the traffic going between the web microservice and the",
    "start": "1499880",
    "end": "1507380"
  },
  {
    "text": "reviews so first we create a destination rule and that destination rule will enable us to split the review service",
    "start": "1507380",
    "end": "1513500"
  },
  {
    "text": "into v1 and v2 the destination rule itself also applies this enables us to apply a bunch of other capabilities such",
    "start": "1513500",
    "end": "1520160"
  },
  {
    "text": "as TLS settings or circuit breakers then to control the traffic as an example to",
    "start": "1520160",
    "end": "1526460"
  },
  {
    "text": "go to v1 I create a virtual service and I say in the virtual service that any",
    "start": "1526460",
    "end": "1531650"
  },
  {
    "text": "traffic going to the reviews should always go to v1 so this is how I can",
    "start": "1531650",
    "end": "1536900"
  },
  {
    "text": "apply those traffic routing capabilities so let's go and create the destination",
    "start": "1536900",
    "end": "1542300"
  },
  {
    "text": "rules and the virtual services or our micro services and then once we have that we can stay as we will see that all",
    "start": "1542300",
    "end": "1548990"
  },
  {
    "text": "of the traffic going to V 1 or V - but it's based on our decision so here",
    "start": "1548990",
    "end": "1559909"
  },
  {
    "text": "is a destination rules but this nation rules as we said it's just another Yemen object for keeping it is a serie a",
    "start": "1559909",
    "end": "1566600"
  },
  {
    "text": "curious object which we define using Yemen so we have the the kind of the object is destination rule we define the",
    "start": "1566600",
    "end": "1573740"
  },
  {
    "text": "name of the destination rule and the spec section which is the most important part we define the host and host here is",
    "start": "1573740",
    "end": "1580429"
  },
  {
    "text": "the service where the traffic will be received or the destination for the traffic then we subdivide the subsets in",
    "start": "1580429",
    "end": "1587990"
  },
  {
    "text": "our case for the web it's only one subset it's one version so we define the subset name and the label selector that",
    "start": "1587990",
    "end": "1594919"
  },
  {
    "text": "we will use to define that subset in this case I'm using the version label",
    "start": "1594919",
    "end": "1600220"
  },
  {
    "text": "similarly for the product catalog I have another destination rule and finally for the reviews I have another destination",
    "start": "1600220",
    "end": "1607789"
  },
  {
    "text": "rule that defined v1 and v2 because this is the only service that I have two versions running at the same time after",
    "start": "1607789",
    "end": "1615020"
  },
  {
    "text": "that we create the virtual service I have three virtual services one for each",
    "start": "1615020",
    "end": "1620240"
  },
  {
    "text": "service so the first virtual service is the one for the web and in the specs",
    "start": "1620240",
    "end": "1626059"
  },
  {
    "text": "section we define the host that will be receiving the traffic and here we say for any HTTP traffic coming to the",
    "start": "1626059",
    "end": "1632900"
  },
  {
    "text": "service route that's traffic to the destination rule and sorry the",
    "start": "1632900",
    "end": "1638120"
  },
  {
    "text": "destination subset v1 and the host is the name of the service so we have three",
    "start": "1638120",
    "end": "1643490"
  },
  {
    "text": "virtual services one for each mark service and for the reviews here we are sending all the traffic to v1 so once we",
    "start": "1643490",
    "end": "1650539"
  },
  {
    "text": "deploy the destination rules and the virtual services all the traffic going between the web going to the reviews",
    "start": "1650539",
    "end": "1656840"
  },
  {
    "text": "will always go to v1 so we never go get those stars and in the response let's go",
    "start": "1656840",
    "end": "1664250"
  },
  {
    "text": "and deploy that and because they are just another community object we will",
    "start": "1664250",
    "end": "1669350"
  },
  {
    "text": "use cube CTL to deploy them",
    "start": "1669350",
    "end": "1672850"
  },
  {
    "text": "Stacia rules first and then we'll deploy the virtual services I created",
    "start": "1677340",
    "end": "1684930"
  },
  {
    "text": "getting back to the browser so right now if we refresh all the traffic will always go to v1 so we never get those",
    "start": "1684930",
    "end": "1691920"
  },
  {
    "text": "stars in the reviews but if I would like to see the reviews traffic going to v2",
    "start": "1691920",
    "end": "1697710"
  },
  {
    "text": "or what I have to do is just a change the virtual service from v1 to v2 deploy",
    "start": "1697710",
    "end": "1703710"
  },
  {
    "text": "the object again and this will immediately send the traffic to the new version which is v2 and we can start",
    "start": "1703710",
    "end": "1709620"
  },
  {
    "text": "seeing those stars so as we can see we started getting more control over the traffic going between the services",
    "start": "1709620",
    "end": "1715380"
  },
  {
    "text": "living in the mesh but this is really primitive I can still apply this with the kubernetes services a lot I have to",
    "start": "1715380",
    "end": "1722220"
  },
  {
    "text": "do is just add the other label what I can do in addition to that which is the capabilities that doesn't exist in",
    "start": "1722220",
    "end": "1728760"
  },
  {
    "text": "psychic abilities now which is I can split the traffic to enable canary pace deployment so if I have a new version",
    "start": "1728760",
    "end": "1735090"
  },
  {
    "start": "1731000",
    "end": "1731000"
  },
  {
    "text": "can redeploy pace deployment will enable me to send one percent of the traffic to the new version",
    "start": "1735090",
    "end": "1740310"
  },
  {
    "text": "and as I gain more confidence I can increase the traffic going to that new version till I reach to 100% and the old",
    "start": "1740310",
    "end": "1747840"
  },
  {
    "text": "version is gone so let me show you how we have a split traffic between v1 and",
    "start": "1747840",
    "end": "1753990"
  },
  {
    "text": "v2 so we'll send 80% of the traffic to v1 20% of the traffic to v2 so the way",
    "start": "1753990",
    "end": "1763290"
  },
  {
    "text": "we do this is using a virtual service and the virtual service here in the specs section we define the hosts",
    "start": "1763290",
    "end": "1769440"
  },
  {
    "text": "similar to what we have done previously and we say for any HTTP traffic route",
    "start": "1769440",
    "end": "1775560"
  },
  {
    "text": "that traffic into two destinations v1 and v2 the v1 and v2 are the subsets of",
    "start": "1775560",
    "end": "1781740"
  },
  {
    "text": "the that we have defined in the destination rule and the way we split the traffic is using the weight",
    "start": "1781740",
    "end": "1786960"
  },
  {
    "text": "parameter which enables us to define the percentage of the traffic that will be going to the services so here we define",
    "start": "1786960",
    "end": "1793320"
  },
  {
    "text": "80/20 and it's pretty easy so if I would like to increment Lee rollout of a",
    "start": "1793320",
    "end": "1799590"
  },
  {
    "text": "specific version or what I have to do is just keep playing around with those two numbers so let's go and deploy that",
    "start": "1799590",
    "end": "1807950"
  },
  {
    "text": "we deploy oil once we deploy it and if we get back to the browser if we refresh",
    "start": "1809850",
    "end": "1816550"
  },
  {
    "text": "a lot of the requests will go to v1 and eventually one request will go to v2 and",
    "start": "1816550",
    "end": "1822780"
  },
  {
    "text": "this is how to keep working so I can keep playing with those numbers till I",
    "start": "1822780",
    "end": "1828070"
  },
  {
    "text": "reach to 100% to v2 and then only 0% to",
    "start": "1828070",
    "end": "1833890"
  },
  {
    "text": "v1 the good thing with this approach is it enables me to have more confidence i as a whole new versions of the",
    "start": "1833890",
    "end": "1840670"
  },
  {
    "text": "application to production so I don't need to impact a large number of customers I can get early feedback and",
    "start": "1840670",
    "end": "1847090"
  },
  {
    "text": "if something went wrong with the new version I can pretty easily roll this back to the old version because I've",
    "start": "1847090",
    "end": "1853150"
  },
  {
    "text": "just sent only to 1% change the numbers and get back to the old version of my application in other cases where I have",
    "start": "1853150",
    "end": "1861220"
  },
  {
    "text": "seen will you have micro services I would like to sometimes test the traffic with internal users only or internal",
    "start": "1861220",
    "end": "1867070"
  },
  {
    "text": "employees before I roll my application to a broader audience so for those cases",
    "start": "1867070",
    "end": "1874570"
  },
  {
    "text": "are something else I can do is using the HTTP level 7 capabilities of the of",
    "start": "1874570",
    "end": "1879940"
  },
  {
    "start": "1877000",
    "end": "1877000"
  },
  {
    "text": "avoid proxy so I can inspect the traffic between the services so in my",
    "start": "1879940",
    "end": "1885580"
  },
  {
    "text": "application for the service the service communication I have added a header called the user role which includes the",
    "start": "1885580",
    "end": "1891760"
  },
  {
    "text": "current logged in user the role of the current logged in user so I can apply traffic rule to say for all of the",
    "start": "1891760",
    "end": "1898960"
  },
  {
    "text": "traffic coming from the administrators send that traffic to v2 otherwise in the - v1 and it's pretty simple with is -",
    "start": "1898960",
    "end": "1907540"
  },
  {
    "text": "because it's just another rule that we can apply using the virtual service so I",
    "start": "1907540",
    "end": "1915160"
  },
  {
    "text": "have updated the virtual service to say for the HTTP traffic that held that",
    "start": "1915160",
    "end": "1920170"
  },
  {
    "text": "matches the following rule it has a header with the vet with the key user",
    "start": "1920170",
    "end": "1925480"
  },
  {
    "text": "role and the value of that header contains the word administrator if this",
    "start": "1925480",
    "end": "1930790"
  },
  {
    "text": "rule has been matched I please send this traffic to v2 of the review service",
    "start": "1930790",
    "end": "1936340"
  },
  {
    "text": "otherwise in the - v1 so as you can see with the virtual service I can apply",
    "start": "1936340",
    "end": "1941620"
  },
  {
    "text": "multiple matching rules so if I would like to have three versions and I would like to send the administrators to v2 and maybe",
    "start": "1941620",
    "end": "1949090"
  },
  {
    "text": "finance to v3 and everyone else to v1 I can apply multiple rules in my virtual",
    "start": "1949090",
    "end": "1956290"
  },
  {
    "text": "service so let's go and deploy that use",
    "start": "1956290",
    "end": "1962410"
  },
  {
    "text": "cube city I'll provide it with the name of my user paste routing and right now I",
    "start": "1962410",
    "end": "1971020"
  },
  {
    "text": "have a not logged in user so it's showing me v1 once I log in as an",
    "start": "1971020",
    "end": "1977140"
  },
  {
    "text": "administrator I should be able to see v2",
    "start": "1977140",
    "end": "1982720"
  },
  {
    "text": "which is the one with the stores I don't know honest opinion so this is providing us",
    "start": "1982720",
    "end": "1988840"
  },
  {
    "text": "with a greater control of how would we roll my my services into production and giving me early feedback as I increment",
    "start": "1988840",
    "end": "1996640"
  },
  {
    "text": "ly roll out the version so there are heaps of other features or capabilities",
    "start": "1996640",
    "end": "2002880"
  },
  {
    "text": "that I can do with the traffic routing but as you can see it's all about playing with the traffic rules using the",
    "start": "2002880",
    "end": "2008490"
  },
  {
    "text": "destination rules as well as a virtual service SQ itself doesn't do that but",
    "start": "2008490",
    "end": "2024540"
  },
  {
    "text": "there are frameworks that have been built on top of su that enables you to apply those rules dynamically and you",
    "start": "2024540",
    "end": "2031049"
  },
  {
    "text": "can even integrate it with like your feature flying system so you can play around with those values without even",
    "start": "2031049",
    "end": "2037380"
  },
  {
    "text": "needing to do a deployment for a new version but not out of the books from s2 as far as they know good question so",
    "start": "2037380",
    "end": "2045600"
  },
  {
    "text": "let's talk a little bit about reliability as we have seen all of those distributed computing fallacies is",
    "start": "2045600",
    "end": "2052260"
  },
  {
    "text": "making it really hard to have a reliable connectivity between of the services and since we extracted those infrastructure",
    "start": "2052260",
    "end": "2059429"
  },
  {
    "text": "concerns in the sidecar proxy I kind of start getting benefits to have more confidence in terms of reliability of my",
    "start": "2059429",
    "end": "2065970"
  },
  {
    "start": "2064000",
    "end": "2064000"
  },
  {
    "text": "overall service to service communication so if one of the downstream service is too slow and I would like to make sure",
    "start": "2065970",
    "end": "2072388"
  },
  {
    "text": "that all of the requests or all of the responses doesn't take more than 1 second or half a second I",
    "start": "2072389",
    "end": "2079129"
  },
  {
    "text": "can start applying rules to do that because it's a network communication I",
    "start": "2079130",
    "end": "2084379"
  },
  {
    "text": "can also have rules to avoid intermittent connectivity issues so if I have a service to service communication",
    "start": "2084380",
    "end": "2090320"
  },
  {
    "text": "and one of the requests failed because of intermittent network issue I can",
    "start": "2090320",
    "end": "2095898"
  },
  {
    "text": "apply a retry policy I can also have a little bit of chaos engineering in there",
    "start": "2095899",
    "end": "2101030"
  },
  {
    "text": "so if you are in testing a micro services environment it's pretty common to request from the testing team to test",
    "start": "2101030",
    "end": "2108080"
  },
  {
    "text": "the application if one of the downstream services went down how would the application behave with the whole system",
    "start": "2108080",
    "end": "2114050"
  },
  {
    "text": "crash or not this is pretty important because as an example if we are Amazon",
    "start": "2114050",
    "end": "2119870"
  },
  {
    "text": "and the review service went down that's not really critical for like such",
    "start": "2119870",
    "end": "2126170"
  },
  {
    "text": "application because your key feature here is to show the product itself so",
    "start": "2126170",
    "end": "2132200"
  },
  {
    "text": "you might need to test how would the application behave if the review service went down and how how to test that it's",
    "start": "2132200",
    "end": "2138290"
  },
  {
    "text": "just very easy using the fault injection features coming out of issue and finally the circuit breakers",
    "start": "2138290",
    "end": "2144310"
  },
  {
    "text": "sometimes one of the downstream service couldn't accept any further connection so how would I enable my application to",
    "start": "2144310",
    "end": "2151190"
  },
  {
    "text": "keep working while this service is really slow so I shouldn't be sending more requests to that downstream service",
    "start": "2151190",
    "end": "2159020"
  },
  {
    "text": "because if I send any further requests most probably it will not be served so all of those features in a much service",
    "start": "2159020",
    "end": "2165710"
  },
  {
    "text": "environment could be easily applied if we leverage the sto features so I'll show you a couple of demos with one",
    "start": "2165710",
    "end": "2172520"
  },
  {
    "text": "about the timeout and another one with the fault injection so in my application for some of the products I have except",
    "start": "2172520",
    "end": "2179780"
  },
  {
    "start": "2176000",
    "end": "2176000"
  },
  {
    "text": "licit Lee made a delay to return the reviews in 6 seconds and 6 seconds is a",
    "start": "2179780",
    "end": "2185480"
  },
  {
    "text": "very long duration so what I have here is basically a traffic routing rule to say any traffic going to the review",
    "start": "2185480",
    "end": "2192500"
  },
  {
    "text": "service shouldn't take more than 500 milliseconds which will give me a guarantee that my system will always be",
    "start": "2192500",
    "end": "2199670"
  },
  {
    "text": "behaving in or returning a response in a very short duration so let me show you that",
    "start": "2199670",
    "end": "2206560"
  },
  {
    "text": "so here's a virtual service I have removed all of the rules just to make it",
    "start": "2210830",
    "end": "2216000"
  },
  {
    "text": "simple and in the traffic routing section we say for the HTTP traffic send",
    "start": "2216000",
    "end": "2221220"
  },
  {
    "text": "all the traffic to v1 but time out the traffic with half a second so if there",
    "start": "2221220",
    "end": "2228330"
  },
  {
    "text": "is if the downstream service is too slow I will not wait more than 500",
    "start": "2228330",
    "end": "2233340"
  },
  {
    "text": "milliseconds before we deploy that I would like to show you that right now",
    "start": "2233340",
    "end": "2239220"
  },
  {
    "text": "that some of the products that we have such as this one will take six seconds",
    "start": "2239220",
    "end": "2244440"
  },
  {
    "text": "to return the response so just three",
    "start": "2244440",
    "end": "2252480"
  },
  {
    "text": "loads we can see the response time if I",
    "start": "2252480",
    "end": "2258510"
  },
  {
    "text": "go to the network and show old so here",
    "start": "2258510",
    "end": "2264690"
  },
  {
    "text": "is my request and this request is taking let me put it this has taken six seconds",
    "start": "2264690",
    "end": "2275640"
  },
  {
    "text": "to come back and as we can see here in the reviews it shows we don't have reviews for that particular product so",
    "start": "2275640",
    "end": "2283260"
  },
  {
    "text": "let's go and deploy our timeout rule",
    "start": "2283260",
    "end": "2287450"
  },
  {
    "text": "once we deploy it and if we refresh the page again we will see that now it took",
    "start": "2292970",
    "end": "2298920"
  },
  {
    "text": "only 519 milliseconds and the good thing is the application didn't crash it",
    "start": "2298920",
    "end": "2305490"
  },
  {
    "text": "should fail to retrieve the product reviews it might not make sense in your case to show this error message you",
    "start": "2305490",
    "end": "2311550"
  },
  {
    "text": "might obtain for having degrade the user experience by hiding this whole section but again the whole application didn't",
    "start": "2311550",
    "end": "2318660"
  },
  {
    "text": "crash",
    "start": "2318660",
    "end": "2320869"
  },
  {
    "text": "it's so the client application knows it's time out because it is basically a",
    "start": "2327020",
    "end": "2332960"
  },
  {
    "text": "network error like right now if you are communicating with an external service what will happen is a sidecar proxy",
    "start": "2332960",
    "end": "2339740"
  },
  {
    "text": "itself will not wait for more than 500 milliseconds and once it fails it just sorry once that rule fails it will fail",
    "start": "2339740",
    "end": "2347300"
  },
  {
    "text": "or reject the request and will return the failure to the client itself it's",
    "start": "2347300",
    "end": "2354050"
  },
  {
    "text": "Network error yep yeah yep but the sidecar proxy itself is the one",
    "start": "2354050",
    "end": "2360770"
  },
  {
    "text": "that's controlling the timeout so the",
    "start": "2360770",
    "end": "2366800"
  },
  {
    "text": "second thing that I would like to show you is the fault injection which is very important because like in my last gig",
    "start": "2366800",
    "end": "2373550"
  },
  {
    "start": "2369000",
    "end": "2369000"
  },
  {
    "text": "what we had is a bunch of services communicating with each other and in order to make sure that the system is",
    "start": "2373550",
    "end": "2379130"
  },
  {
    "text": "always up and we have a highly available environment we had to test all of those cases in our case we didn't have sto we",
    "start": "2379130",
    "end": "2386390"
  },
  {
    "text": "used a different tool which is called gremlin that enables us to like pray stop one of the services while it's",
    "start": "2386390",
    "end": "2393589"
  },
  {
    "text": "running to make sure that the service the main service or the main application didn't go down but with this you can",
    "start": "2393589",
    "end": "2399619"
  },
  {
    "text": "easily apply that because if I have a review service and I'd like to make sure that the review service is down without",
    "start": "2399619",
    "end": "2406940"
  },
  {
    "text": "actually bringing it bringing it down I can easily apply that using the fault injection so what we have here is I have",
    "start": "2406940",
    "end": "2419390"
  },
  {
    "text": "the updated the virtual service to say for the HTTP traffic inject the fault of",
    "start": "2419390",
    "end": "2424820"
  },
  {
    "text": "the type up port and apply this fault two hundred percent of the traffic I obviously shouldn't do this in",
    "start": "2424820",
    "end": "2433220"
  },
  {
    "text": "production because if you apply the whole thing will go down unless you know what what you are doing and the response",
    "start": "2433220",
    "end": "2439339"
  },
  {
    "text": "status code with that fault injection you should return is five hundred over this is what will the sidecar proxy",
    "start": "2439339",
    "end": "2445700"
  },
  {
    "text": "return to the client then we have this",
    "start": "2445700",
    "end": "2451369"
  },
  {
    "text": "to be applied to all of the traffic going to v1 so let's go and apply that",
    "start": "2451369",
    "end": "2459730"
  },
  {
    "text": "once we send that the last time this call to the review service took 500",
    "start": "2461890",
    "end": "2468560"
  },
  {
    "text": "milliseconds but right now if we review it or send the request it took 17 milliseconds because sidecar proxy",
    "start": "2468560",
    "end": "2474890"
  },
  {
    "text": "immediately rejected the request because it's 400 percent of the traffic so this",
    "start": "2474890",
    "end": "2480350"
  },
  {
    "text": "is really handy when it comes to service the service communication and making sure that the whole system is up and",
    "start": "2480350",
    "end": "2485600"
  },
  {
    "text": "running even if one of the downstream services is not really working one of",
    "start": "2485600",
    "end": "2491390"
  },
  {
    "text": "the other features are not you show you a demo about it but we'll just explain how easy it is to apply a circuit",
    "start": "2491390",
    "end": "2497000"
  },
  {
    "start": "2493000",
    "end": "2493000"
  },
  {
    "text": "breaker using su so if we have the review service is pretty slow and it",
    "start": "2497000",
    "end": "2502190"
  },
  {
    "text": "cannot accept any further connections what I can do with issue is I can define a rule to say if I get X number of",
    "start": "2502190",
    "end": "2509300"
  },
  {
    "text": "errors five errors five consecutive errors within a certain duration please",
    "start": "2509300",
    "end": "2515060"
  },
  {
    "text": "don't send the traffic to this downstream service for a certain",
    "start": "2515060",
    "end": "2520460"
  },
  {
    "text": "duration which is three minutes in this case and during those three minutes then",
    "start": "2520460",
    "end": "2526550"
  },
  {
    "text": "don't send 80% of the traffic so I will send only 20% of the traffic to that",
    "start": "2526550",
    "end": "2531890"
  },
  {
    "text": "downstream service and this means that during those three minutes I will not be",
    "start": "2531890",
    "end": "2538310"
  },
  {
    "text": "sending the whole traffic and after the three minutes are passed we will start",
    "start": "2538310",
    "end": "2544700"
  },
  {
    "text": "sending the whole traffic again and if the rule applied we will keep applying that ejection of this downstream service",
    "start": "2544700",
    "end": "2552550"
  },
  {
    "text": "so this is obviously on and on the network communication level we could also have same thing or the same circuit",
    "start": "2552550",
    "end": "2560240"
  },
  {
    "text": "breaker logic in the application but again it's if we have both both of them will be applied all right so enough",
    "start": "2560240",
    "end": "2569090"
  },
  {
    "text": "about the reliability let's move on to the observability features coming out of issue when I think about micro services",
    "start": "2569090",
    "end": "2576770"
  },
  {
    "text": "based environment with observability I think about two key things the first one is distributed tracing so each micro",
    "start": "2576770",
    "end": "2585830"
  },
  {
    "start": "2581000",
    "end": "2581000"
  },
  {
    "text": "service generates its own logs and ideally in a micro service based environment our",
    "start": "2585830",
    "end": "2591470"
  },
  {
    "text": "shipping all of those logs into a centralized location and that centralized location could be",
    "start": "2591470",
    "end": "2597550"
  },
  {
    "text": "elasticsearch or any other service but because for one particular request I",
    "start": "2597550",
    "end": "2603590"
  },
  {
    "text": "could have more than one service communicating with each other to list to return the response I need to and if",
    "start": "2603590",
    "end": "2609980"
  },
  {
    "text": "something went wrong I need to find the logs relevant to that particular request and what we usually do is we have a",
    "start": "2609980",
    "end": "2615830"
  },
  {
    "text": "correlation ID and for all of the logs getting out of all of the services we include this correlation ID so this",
    "start": "2615830",
    "end": "2623660"
  },
  {
    "text": "enables me to find out which service contributed to a particular error and",
    "start": "2623660",
    "end": "2629020"
  },
  {
    "text": "this is really regardless of we are using SEO or not SEO it's it's just in a micro service environment I need to have",
    "start": "2629020",
    "end": "2635270"
  },
  {
    "text": "such visibility for my am for my application and one of the benefits of s",
    "start": "2635270",
    "end": "2641060"
  },
  {
    "text": "2 which is the mixer as we will see it enables us to have such capability with a very limited it changes to I to my",
    "start": "2641060",
    "end": "2647660"
  },
  {
    "text": "application or sometimes no changes the second thing is the matrices what is the",
    "start": "2647660",
    "end": "2653300"
  },
  {
    "text": "success rate what is the failure rate how many requests is coming to my request if I have two versions I need to",
    "start": "2653300",
    "end": "2659089"
  },
  {
    "text": "compare the success rate and failure rate going to the those new versions as long as they are running in parallel all",
    "start": "2659089",
    "end": "2665030"
  },
  {
    "text": "the time and the SD has this mixer component and as we told each after each",
    "start": "2665030",
    "end": "2672560"
  },
  {
    "text": "service to service communication the sidecar proxy will be sending telemetry information to the mixer and the mixer",
    "start": "2672560",
    "end": "2679700"
  },
  {
    "text": "has applied the adapter pattern which means it can be configured to connect to multiple monitoring and observe",
    "start": "2679700",
    "end": "2687859"
  },
  {
    "text": "observability systems such as elasticsearch Prometheus graph Anna",
    "start": "2687859",
    "end": "2693440"
  },
  {
    "text": "whatever platform that you are working with and the good thing as well is the",
    "start": "2693440",
    "end": "2699440"
  },
  {
    "text": "sto itself comes out-of-the-box with heaps of adapters that you can immediately plug into your environment",
    "start": "2699440",
    "end": "2705040"
  },
  {
    "text": "without so much of an overhead and the documentation is really good in terms of how would you configure those adapters",
    "start": "2705040",
    "end": "2710990"
  },
  {
    "text": "to work with issue so what I will show",
    "start": "2710990",
    "end": "2716480"
  },
  {
    "text": "you today is I'm not sure how would you do the configurations themselves because they are really well documented but I",
    "start": "2716480",
    "end": "2722660"
  },
  {
    "text": "will show you after you come an adapter how would you get the benefits out of those systems with a",
    "start": "2722660",
    "end": "2728010"
  },
  {
    "text": "very limited a change to your application so the first demo that I'll show you is about the distributed tracing and we'll use a system called",
    "start": "2728010",
    "end": "2734789"
  },
  {
    "text": "Jaeger and Jagger in a wood is an open source distributed tracing platform that has been provided by uber and it will",
    "start": "2734789",
    "end": "2742410"
  },
  {
    "text": "enable us to find all of the traffic going between the services for a particular request the second demo will",
    "start": "2742410",
    "end": "2749250"
  },
  {
    "text": "be about Agrafena which is an another open source that provides us with the capability to see the matrices of the",
    "start": "2749250",
    "end": "2755730"
  },
  {
    "text": "services running in my platform such as success rate or failure rate or the the",
    "start": "2755730",
    "end": "2760920"
  },
  {
    "text": "response duration and all those kind of matrices",
    "start": "2760920",
    "end": "2765109"
  },
  {
    "text": "let me first remove all of the fault injection rules all right now if I open",
    "start": "2766760",
    "end": "2777779"
  },
  {
    "text": "any of the applications I can see that the application is running so it just",
    "start": "2777779",
    "end": "2783150"
  },
  {
    "text": "generates some traffic and then we'll open Jaeger this is the home screen of Jaeger it enables us to see all of the",
    "start": "2783150",
    "end": "2789510"
  },
  {
    "text": "services running in my cluster and without any additional configuration after the adapter it can immediately",
    "start": "2789510",
    "end": "2795630"
  },
  {
    "text": "understand what are the services running in my mesh and if I select one of the",
    "start": "2795630",
    "end": "2800789"
  },
  {
    "text": "services I can also see all of the requests that came to that particular service but what if I have a particular",
    "start": "2800789",
    "end": "2809220"
  },
  {
    "text": "low service so as we as we know that we have that product that usually take a lot of time to get back to us what I",
    "start": "2809220",
    "end": "2817020"
  },
  {
    "text": "have done in my application is I have included the request ID which is the correlation ID that we usually use to",
    "start": "2817020",
    "end": "2822990"
  },
  {
    "text": "generate the logs and if I copy that correlation ID and go to Jaeger",
    "start": "2822990",
    "end": "2829140"
  },
  {
    "text": "search for that trace I can see a holistic view of the request help and it",
    "start": "2829140",
    "end": "2836400"
  },
  {
    "text": "shows me how all of the services collaborated with each other to return the response so in this case I can see",
    "start": "2836400",
    "end": "2842849"
  },
  {
    "text": "that the request came to the web service and then there is from the web I made",
    "start": "2842849",
    "end": "2848849"
  },
  {
    "text": "another recall to the product catalog and the call to the product catalog took one millisecond",
    "start": "2848849",
    "end": "2856430"
  },
  {
    "text": "and there was another call that happened in parallel to the review service and the review service took four seconds so",
    "start": "2856430",
    "end": "2862670"
  },
  {
    "text": "as you can see with this tool I can easily identify which service will very",
    "start": "2862670",
    "end": "2867890"
  },
  {
    "text": "slow to return the response and although all of the changes that I had to do to",
    "start": "2867890",
    "end": "2873529"
  },
  {
    "text": "my application was very simple so if I go here it's a sweet tooth core",
    "start": "2873529",
    "end": "2878869"
  },
  {
    "text": "application previously I had the correlation ID anyway so all what I had",
    "start": "2878869",
    "end": "2883880"
  },
  {
    "text": "to do is just add those few headers for all of the service to service communication so any requests to my",
    "start": "2883880",
    "end": "2890119"
  },
  {
    "text": "downstream service I just add those headers and this provides me with this kind of nice hierarchical view if I",
    "start": "2890119",
    "end": "2897289"
  },
  {
    "text": "didn't include the headers I would still get the telemetry information from jäger but it will be a little bit harder to",
    "start": "2897289",
    "end": "2904039"
  },
  {
    "text": "understand how the services are cooperating with each other",
    "start": "2904039",
    "end": "2908740"
  },
  {
    "text": "the second thing that I would like to show you is the matrices and actually",
    "start": "2909880",
    "end": "2917720"
  },
  {
    "text": "before we go to the matrices one of the other nice features of jäger is we can see how the services are dependent on",
    "start": "2917720",
    "end": "2924529"
  },
  {
    "text": "each other so there is a dependency graph here that will show me that I have three services the product catalog and",
    "start": "2924529",
    "end": "2932299"
  },
  {
    "text": "the reviews and I can see that the product the web depends on post product catalog and reviews and the three of",
    "start": "2932299",
    "end": "2938569"
  },
  {
    "text": "them depends on the mixer obviously the more services you're deployed to the service mesh this graph would become",
    "start": "2938569",
    "end": "2945049"
  },
  {
    "text": "harder to understand that it's there are different tools that will help us to visualize those services the second",
    "start": "2945049",
    "end": "2953359"
  },
  {
    "text": "thing that I'd like to show you is the graph on a dashboard which is another very handy open-source tool and it will",
    "start": "2953359",
    "end": "2958970"
  },
  {
    "text": "help us with the matrices so we can understand how the services are working in the system let's just delete some",
    "start": "2958970",
    "end": "2965539"
  },
  {
    "text": "traffic as well and in a second we can",
    "start": "2965539",
    "end": "2972440"
  },
  {
    "text": "start C as well similar to the jäger I can see the services running in my wish so I can see the review service as an",
    "start": "2972440",
    "end": "2979069"
  },
  {
    "text": "example we can see the success rate and the server success rate I can see the",
    "start": "2979069",
    "end": "2984109"
  },
  {
    "text": "request duration and heaps of other valuable information that I didn't actually need to",
    "start": "2984109",
    "end": "2989710"
  },
  {
    "text": "apply or configure my application to send anything extra all what I had to do",
    "start": "2989710",
    "end": "2995410"
  },
  {
    "text": "is just plug in the adapter of st of Graf Ana with the SQ mixer and the good",
    "start": "2995410",
    "end": "3004740"
  },
  {
    "text": "thing that I would like to show here is with the graph Ana because if I have multiple versions running I would like",
    "start": "3004740",
    "end": "3010560"
  },
  {
    "text": "to compare the response time or the response duration for a particular version I can see that graph Ana by",
    "start": "3010560",
    "end": "3018000"
  },
  {
    "text": "default it grabbed the running versions and it's showing me the response time of each version so this is very handy",
    "start": "3018000",
    "end": "3024810"
  },
  {
    "text": "because I don't have to apply any additional logic or any additional rules to my application to get benefit of all",
    "start": "3024810",
    "end": "3030060"
  },
  {
    "text": "of those features so let's summarize what we have discussed so far so sto is",
    "start": "3030060",
    "end": "3036630"
  },
  {
    "start": "3034000",
    "end": "3034000"
  },
  {
    "text": "a service mesh platform that is providing us with traffic routing observability and security features we",
    "start": "3036630",
    "end": "3043170"
  },
  {
    "text": "didn't cover so much about the security because of time but there are heaps of benefits of using Sto for security such",
    "start": "3043170",
    "end": "3049290"
  },
  {
    "text": "as encrypting the traffic between the services it has running certificate rules and policy PI server it has a",
    "start": "3049290",
    "end": "3055320"
  },
  {
    "text": "bunch of beneficial features that we can leverage in terms of security they still",
    "start": "3055320",
    "end": "3060480"
  },
  {
    "text": "is similar to any service mesh platform consists of a data plane and control plane so for the data plane we have as a",
    "start": "3060480",
    "end": "3067260"
  },
  {
    "text": "sidecar proxy and in the South card proxy in sq is in void proxy and then we",
    "start": "3067260",
    "end": "3073350"
  },
  {
    "text": "have the control plane components the control plane component is the pilot which is providing us with a traffic",
    "start": "3073350",
    "end": "3079050"
  },
  {
    "text": "management as well as a service discovery control plane providing us with access control and telemetry",
    "start": "3079050",
    "end": "3084810"
  },
  {
    "text": "citadel which is providing us with a traffic encryption authentication",
    "start": "3084810",
    "end": "3089820"
  },
  {
    "text": "authorization and generating certificates and bunch of security related features so this is pretty much",
    "start": "3089820",
    "end": "3096330"
  },
  {
    "text": "what I wanted to cover if you would like to learn more about Sto I highly recommend reading the STI documentation",
    "start": "3096330",
    "end": "3102210"
  },
  {
    "text": "it's really well well-written and it's always up to date if you would like to",
    "start": "3102210",
    "end": "3107340"
  },
  {
    "text": "play around with su without having to install mini cube locally or even",
    "start": "3107340",
    "end": "3113340"
  },
  {
    "text": "kubernetes I highly recommend cata coder it's a platform that enables you to spin up containers in the browser apply a",
    "start": "3113340",
    "end": "3119700"
  },
  {
    "text": "deploy sto play around with it and get its really really handy and it's very easy",
    "start": "3119700",
    "end": "3124980"
  },
  {
    "text": "to start working with all of the demos are available my github repo and slides",
    "start": "3124980",
    "end": "3130079"
  },
  {
    "text": "themselves are available in this URL so that's pretty much what I have and I",
    "start": "3130079",
    "end": "3135780"
  },
  {
    "text": "think we have time for questions",
    "start": "3135780",
    "end": "3139160"
  },
  {
    "text": "so the sto itself has a helmet chart so you can use the sto helmet chart to",
    "start": "3145920",
    "end": "3151380"
  },
  {
    "text": "deploy it on top of Cuba natives in any environment regardless of the azure or AWS or GCP any other questions yeah so",
    "start": "3151380",
    "end": "3167819"
  },
  {
    "text": "all of this all of those features comes with a cost yes there is an additional deal there is",
    "start": "3167819",
    "end": "3175619"
  },
  {
    "text": "an additional cost in terms of overhead for the service to service communication but because of the invoice proxy is",
    "start": "3175619",
    "end": "3180930"
  },
  {
    "text": "written in C++ and they have a heaps of focus in terms of performance to not add",
    "start": "3180930",
    "end": "3186450"
  },
  {
    "text": "too much overhead for the service to service communication I would say that the benefits kind of cover the cost and",
    "start": "3186450",
    "end": "3193380"
  },
  {
    "text": "there is also as far as I know there is a plan right now to have a package that",
    "start": "3193380",
    "end": "3200940"
  },
  {
    "text": "you include in your application so there is no to minimize the overhead so the proxy becomes part of the code if the",
    "start": "3200940",
    "end": "3207299"
  },
  {
    "text": "performance is really one of the key critical things that you would like to have and the additional overhead is kind",
    "start": "3207299",
    "end": "3213780"
  },
  {
    "text": "of impacting your application but I think it's still under development any other questions",
    "start": "3213780",
    "end": "3221240"
  },
  {
    "text": "so it depends on the application that you are using but any service to service",
    "start": "3234380",
    "end": "3239750"
  },
  {
    "text": "communication because s T also supports TCP so if you have a TCP connection you cannot enter intercept that traffic and",
    "start": "3239750",
    "end": "3245839"
  },
  {
    "text": "the up light but it depends on the application features and to what extent",
    "start": "3245839",
    "end": "3251660"
  },
  {
    "text": "you would like to apply those traffic routing rules I would expect that most of the people will be using them for",
    "start": "3251660",
    "end": "3257890"
  },
  {
    "text": "like the service to service communication pretty much I haven't seen",
    "start": "3257890",
    "end": "3263540"
  },
  {
    "text": "it used with like Azure service bus or anything like that",
    "start": "3263540",
    "end": "3268869"
  },
  {
    "text": "alright any other questions go ahead",
    "start": "3269470",
    "end": "3276220"
  },
  {
    "text": "sorry I can't hear you yeah there is",
    "start": "3277930",
    "end": "3287000"
  },
  {
    "text": "actually there is a standard coming out for the service mesh platform is right now and it's just released I think",
    "start": "3287000",
    "end": "3296349"
  },
  {
    "text": "humans is back so if you are worried about vendor lock-in or something like that then yes there is going to be a",
    "start": "3296349",
    "end": "3302630"
  },
  {
    "text": "standard that I think most of the service mushrooms would be following all",
    "start": "3302630",
    "end": "3309049"
  },
  {
    "text": "right I think that's pretty much it so thanks for your time and I hope you",
    "start": "3309049",
    "end": "3314960"
  },
  {
    "text": "enjoyed the talk [Applause]",
    "start": "3314960",
    "end": "3320469"
  }
]