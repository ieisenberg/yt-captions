[
  {
    "text": "all right um hello everyone i hope you're having i'm thinking it's good",
    "start": "8160",
    "end": "13599"
  },
  {
    "text": "afternoon at this point during the day i obviously am virtual and um stateside back in the us",
    "start": "13599",
    "end": "19680"
  },
  {
    "text": "because we don't have super shiny uh digital coded vaccine cards yet",
    "start": "19680",
    "end": "25039"
  },
  {
    "text": "so sad that i am not able to be there presenting to you all in person but i'm happy that nec was able to provide a way",
    "start": "25039",
    "end": "31439"
  },
  {
    "text": "for us to connect virtually so very happy to be here with you talking about reactive programming um this is",
    "start": "31439",
    "end": "37760"
  },
  {
    "text": "specifically a crash course for angular developers because the code snippets are in angular i have given this talk before",
    "start": "37760",
    "end": "44879"
  },
  {
    "text": "in a more general sense because i think that reactive programming is great and if you are a javascript developer in a",
    "start": "44879",
    "end": "50879"
  },
  {
    "text": "modern environment where you can take advantage of libraries like rxjs i think it's awesome",
    "start": "50879",
    "end": "56399"
  },
  {
    "text": "um but this will be angular specific only uh for what we're talking about today",
    "start": "56399",
    "end": "62879"
  },
  {
    "text": "uh so before we get started i'd like to introduce myself my name is jennifer wadella i'm on twitter at like omg at",
    "start": "62879",
    "end": "68000"
  },
  {
    "text": "study i'm the director of angular development at beethoven we're a boutique javascript consulting firm so",
    "start": "68000",
    "end": "73600"
  },
  {
    "text": "we consult with a lot of clients to help them build better javascript applications um and obviously i lead our",
    "start": "73600",
    "end": "79119"
  },
  {
    "text": "angular team and so we do everything from you know helping clients with staff augmentation to help ship features",
    "start": "79119",
    "end": "85759"
  },
  {
    "text": "better to kind of coming in as act and acting as uh coaches and kind of mentoring and coaching their teams on on",
    "start": "85759",
    "end": "91360"
  },
  {
    "text": "how to do best practices and teaching things like reactive programming i'm an angular gde",
    "start": "91360",
    "end": "98240"
  },
  {
    "text": "once upon a time i called myself an international speaker i hope to get there someday again um but we'll we'll",
    "start": "98240",
    "end": "104240"
  },
  {
    "text": "see about that uh and in my free time i enjoy brewing kombucha and being a crazy plant lady um both hobbies that are very",
    "start": "104240",
    "end": "111200"
  },
  {
    "text": "sustainable during a pandemic it turns out um so let's get started because you may",
    "start": "111200",
    "end": "118320"
  },
  {
    "text": "or may not have heard of reactive programming um and so i want to kind of lay this stage for what we're talking",
    "start": "118320",
    "end": "125680"
  },
  {
    "text": "about and why it matters so we have modern javascript development which a lot of us are fairly used to",
    "start": "125680",
    "end": "130879"
  },
  {
    "text": "we lovingly joke about the spaghetti code we write we've gotten away from some of that due to frameworks and in",
    "start": "130879",
    "end": "136239"
  },
  {
    "text": "the guidances that they provide us but by and large we are writing code",
    "start": "136239",
    "end": "143440"
  },
  {
    "text": "that uh changes over time and can make it very hard to track state um we joke that",
    "start": "143440",
    "end": "149680"
  },
  {
    "text": "you know we can do whatever with variables they could be a string they could they could be an int whatever like",
    "start": "149680",
    "end": "154720"
  },
  {
    "text": "we can do what we want um but this does lead to a lot of problems where we're creating code that's very unmaintainable",
    "start": "154720",
    "end": "161440"
  },
  {
    "text": "and hard to debug um we've gotten a little bit better about",
    "start": "161440",
    "end": "166959"
  },
  {
    "text": "our approach to solving problems in building applications in javascript we've adopted a lot of principles from",
    "start": "166959",
    "end": "173519"
  },
  {
    "text": "other areas of programming of course we started going down the direction of taking an mvc approach",
    "start": "173519",
    "end": "179920"
  },
  {
    "text": "but the problem with that is and this is speaking to our angularjs days especially we got into this kind of",
    "start": "179920",
    "end": "186000"
  },
  {
    "text": "bi-directional data flow situation um where we could be modifying our state in multiple places and making it really",
    "start": "186000",
    "end": "192560"
  },
  {
    "text": "really hard to track um so not only does that make it harder for us to figure out and debug and change our code as we're",
    "start": "192560",
    "end": "199200"
  },
  {
    "text": "dealing with uh ongoing shifting requirements um but just can lead to a lot of messiness so",
    "start": "199200",
    "end": "205200"
  },
  {
    "text": "still a better step in the direction than some of the squirrely stuff we used to do just manually and jquery trying to make um",
    "start": "205200",
    "end": "211760"
  },
  {
    "text": "the web behave like an application um but we've still got miles to go uh so this brings us to talking about",
    "start": "211760",
    "end": "218879"
  },
  {
    "text": "the the styles of programming that we do in javascript and this may not be something you've ever thought about maybe you have but most likely in your",
    "start": "218879",
    "end": "225120"
  },
  {
    "text": "career as a javascript developer you've been by and large writing imperative code so i want to talk about that what that",
    "start": "225120",
    "end": "231440"
  },
  {
    "text": "is versus declarative to set the stage for what reactive programming is and then talk about how we can really take",
    "start": "231440",
    "end": "237200"
  },
  {
    "text": "advantage of that so this is something my team and i like to use um to kind of open the",
    "start": "237200",
    "end": "243360"
  },
  {
    "text": "conversation about imperative code um so if we look at the code snippet above",
    "start": "243360",
    "end": "248560"
  },
  {
    "text": "um we have a variable called myvar and we are changing the the state um is what i'm",
    "start": "248560",
    "end": "255840"
  },
  {
    "text": "going to refer to as my var if a condition is true um this is a manual change we are making and so",
    "start": "255840",
    "end": "261840"
  },
  {
    "text": "um because this is a variable that can be modified there are a million places in our code that we could be changing",
    "start": "261840",
    "end": "267120"
  },
  {
    "text": "the value of my var and if that is related to something we're seeing in the ui maybe it's whether we're displaying a",
    "start": "267120",
    "end": "273440"
  },
  {
    "text": "piece of information or not um you know if that is being modified through various places throughout the code base",
    "start": "273440",
    "end": "278560"
  },
  {
    "text": "that can be very difficult to track down very quickly",
    "start": "278560",
    "end": "283319"
  },
  {
    "text": "um when we look at the the line below the const um where we have a my var we're using a ternary operator here and",
    "start": "284400",
    "end": "291120"
  },
  {
    "text": "at the end of the day this is the same thing right we're um changing the value of my var to be a or b based on on the",
    "start": "291120",
    "end": "297919"
  },
  {
    "text": "um the value of this condition um but the difference here is we are only setting this once um it's deriving",
    "start": "297919",
    "end": "305120"
  },
  {
    "text": "its value from what we're telling it so we're saying okay my var is always going to be this thing it's only ever going to",
    "start": "305120",
    "end": "311199"
  },
  {
    "text": "be illustrated or determined in this one spot and then we are simply going to give it instructions on what its value",
    "start": "311199",
    "end": "317759"
  },
  {
    "text": "should be based on any number of things we pass to it and so a ternary operator is the most basic way we do this in",
    "start": "317759",
    "end": "323280"
  },
  {
    "text": "javascript and so i feel like this is a really good starting point um to kind of illustrate the difference between imperative",
    "start": "323280",
    "end": "329520"
  },
  {
    "text": "programming and declarative programming um so when a repair when we're using this imperative approach this means",
    "start": "329520",
    "end": "336000"
  },
  {
    "text": "an event occurs we're going to run code that we're going to change the state of our program um when i talk about this is um a",
    "start": "336000",
    "end": "343199"
  },
  {
    "text": "javascript developer somebody who spent my career in front end you know there are two things that we're typically ever",
    "start": "343199",
    "end": "348240"
  },
  {
    "text": "interested in um it's it's getting data from some sort of backend that we want to display to a user and then reacting",
    "start": "348240",
    "end": "353919"
  },
  {
    "text": "to information or input from the user whether it's a click um scroll you know form input something like that",
    "start": "353919",
    "end": "360240"
  },
  {
    "text": "and so with our imperative code we're going to be listening for something to happen whether we're receiving you know data from an api call or a user",
    "start": "360240",
    "end": "367600"
  },
  {
    "text": "is selecting a radio button and then we're going to write code that's going to change the state of our program that's our imperative code",
    "start": "367600",
    "end": "373919"
  },
  {
    "text": "so that's going to look something a lot like this this is a little bit of angular code where i have my on init lifecycle hook",
    "start": "373919",
    "end": "381039"
  },
  {
    "text": "that's running at the beginning of this component where i'm making a call to an api",
    "start": "381039",
    "end": "386720"
  },
  {
    "text": "service making an http request i'm getting the response of that and then i'm just setting",
    "start": "386720",
    "end": "392880"
  },
  {
    "text": "a member on my component that's going to be linked to whatever that is equal to the value of that",
    "start": "392880",
    "end": "399199"
  },
  {
    "text": "the response of that api call um let's say i have an event where i want to fetch an initial",
    "start": "399199",
    "end": "405199"
  },
  {
    "text": "list of data from uh from an api and then i want to filter that list based on",
    "start": "405199",
    "end": "410800"
  },
  {
    "text": "user input a user decides they want to you know only see certain elements in that list i'm going to write code like",
    "start": "410800",
    "end": "417360"
  },
  {
    "text": "this where i have my filter list function and then i'm going to change the value of my displayed villagers",
    "start": "417360",
    "end": "422720"
  },
  {
    "text": "member on my component to be whatever this new operation i've performed and so i might have something like this",
    "start": "422720",
    "end": "428639"
  },
  {
    "text": "in my template where i am binding to my displayed villagers member to illustrate things and so i am constantly in",
    "start": "428639",
    "end": "435360"
  },
  {
    "text": "different places in my code changing the value um of displayed villagers and so",
    "start": "435360",
    "end": "441039"
  },
  {
    "text": "as this gets more complex as we add features and allow users to change what they want to see",
    "start": "441039",
    "end": "447120"
  },
  {
    "text": "i'm constantly redefining the displayed villages member on my component that can be really really difficult to manage",
    "start": "447120",
    "end": "454720"
  },
  {
    "text": "all right so when we take the declarative approach we're specifying how the state of a program should be",
    "start": "454720",
    "end": "460160"
  },
  {
    "text": "altered um it's it's a little bit more like we're giving instructions of how something should be rather than doing the manual",
    "start": "460160",
    "end": "466720"
  },
  {
    "text": "work themselves ourselves so in comparison our declarative code is going to look a little bit something",
    "start": "466720",
    "end": "472319"
  },
  {
    "text": "like this one of the really big advantages we have as angular",
    "start": "472319",
    "end": "477520"
  },
  {
    "text": "developers with rxjs built into angular under the hood is we are already forced into kind of starting to have to",
    "start": "477520",
    "end": "482879"
  },
  {
    "text": "understand reactive programming in rxjs but what i can do here is i can set the response of that api call um equal to my",
    "start": "482879",
    "end": "490400"
  },
  {
    "text": "display villagers and then i can manipulate this over time we're going to talk a little bit more about rxjs in case some of you are less",
    "start": "490400",
    "end": "496639"
  },
  {
    "text": "familiar with it but this is the declarative approach that we would take um",
    "start": "496639",
    "end": "502080"
  },
  {
    "text": "implementing this as we would set the member displayed villagers on our component to be the responsible",
    "start": "502080",
    "end": "507120"
  },
  {
    "text": "villagers api and then we would create a subscription with the async pipe in the template um",
    "start": "507120",
    "end": "512800"
  },
  {
    "text": "and so we're going to go much more in depth but i kind of want to just illustrate as a starting point the difference between our imperative code",
    "start": "512800",
    "end": "518159"
  },
  {
    "text": "approach and declarative code and then what we're going to be moving towards with reactive code",
    "start": "518159",
    "end": "524640"
  },
  {
    "text": "all right um so the big thing about declarative programming is it's going to give us more readability because we're kind of describing things versus having",
    "start": "524640",
    "end": "531360"
  },
  {
    "text": "to hunt and chase where we might have modified the save our program um it gives us a lot more power again for reflectability refactorability for those",
    "start": "531360",
    "end": "538640"
  },
  {
    "text": "exact same reasons that we are not searching for a million different places and we're never really quite sure of how",
    "start": "538640",
    "end": "543760"
  },
  {
    "text": "we might unintentionally be altering the state of our program and it makes it a lot easier to track state changes in our",
    "start": "543760",
    "end": "549279"
  },
  {
    "text": "ui especially if you're a new developer into a code base um and you're trying to figure out why",
    "start": "549279",
    "end": "555040"
  },
  {
    "text": "you're dealing with this bug what qa is found what's modifying that it gives you one kind of source of truth",
    "start": "555040",
    "end": "560640"
  },
  {
    "text": "to look for and then be able to isolate what the problem might be in there and how to correct it so it's behaving in the way the business expects",
    "start": "560640",
    "end": "567680"
  },
  {
    "text": "all right so now when we talk about reactive programming this is a declarative programming style concerned with data",
    "start": "567680",
    "end": "573440"
  },
  {
    "text": "streams and the propagation of change and rxjs is what enables us to be able to take advantage of reactive",
    "start": "573440",
    "end": "579680"
  },
  {
    "text": "programming because it treats what we deal with as as living streams that we can use and bring together to create",
    "start": "579680",
    "end": "586560"
  },
  {
    "text": "that end definition that we're looking for for the state of our program so reactive code might look a little bit",
    "start": "586560",
    "end": "592800"
  },
  {
    "text": "something like this um where uh and we'll walk through this in depth in my in my code sample but again",
    "start": "592800",
    "end": "599040"
  },
  {
    "text": "we have an api call i am making the i'm using hp client in angular which",
    "start": "599040",
    "end": "604240"
  },
  {
    "text": "returns unobservable um in order to start getting the value of that we need to create a subscription um so i just",
    "start": "604240",
    "end": "610160"
  },
  {
    "text": "have a const that's going to represent that initial api request and then i have my display villagers uh member on my",
    "start": "610160",
    "end": "616399"
  },
  {
    "text": "component which is going to be what we're displaying in the ui so whatever the value of displayed villagers is is what's going to be reflected in the uidr",
    "start": "616399",
    "end": "623120"
  },
  {
    "text": "user um so what i'm doing here is i'm taking a couple different events um",
    "start": "623120",
    "end": "628880"
  },
  {
    "text": "i'm starting this stream so this is living data so displayed villagers that value is going to change over time based",
    "start": "628880",
    "end": "634720"
  },
  {
    "text": "on what inputs it's taking into it um and so this is this is our source of truth this is our place to look for that",
    "start": "634720",
    "end": "641279"
  },
  {
    "text": "in reactive code um so i'm going to start by merging a couple different streams i'm",
    "start": "641279",
    "end": "646640"
  },
  {
    "text": "bringing in the initial api call so we we make that a call we get that code back that's going to be the initial",
    "start": "646640",
    "end": "652320"
  },
  {
    "text": "value of our displayed villagers um and then i'm also taking in this filter subject which is going to allow me to",
    "start": "652320",
    "end": "658399"
  },
  {
    "text": "apply filtering options so instead of reassigning the value of this.displayed",
    "start": "658399",
    "end": "663600"
  },
  {
    "text": "villagers over and over and over again in different places throughout my code i have it isolated in this one place and",
    "start": "663600",
    "end": "668720"
  },
  {
    "text": "anytime i want to change that i'm building it into this stream and i'm taking these different events and inputs",
    "start": "668720",
    "end": "674480"
  },
  {
    "text": "and saying okay when the culmination of all these different things happen these are the results i want to give to",
    "start": "674480",
    "end": "680079"
  },
  {
    "text": "the user and so it's a very backwards way we have to start thinking about writing our code",
    "start": "680079",
    "end": "685600"
  },
  {
    "text": "to achieve this but then it ends up being really really powerful um a big part of why we can do this so",
    "start": "685600",
    "end": "692959"
  },
  {
    "text": "productively in angular is because angular gives us the in-sync pipe which allows us to create subscriptions to our",
    "start": "692959",
    "end": "699760"
  },
  {
    "text": "observables in our templates and handle unsubscribing in our on destroy lifecycle hook um i feel like this is",
    "start": "699760",
    "end": "706560"
  },
  {
    "text": "probably a lot of black magic if you've never really thought about the async pipe maybe you've never even heard of it before a lot of my clients",
    "start": "706560",
    "end": "712800"
  },
  {
    "text": "definitely haven't um but so we know if we want to get data we need to create a subscription but we",
    "start": "712800",
    "end": "718639"
  },
  {
    "text": "also know that if we destroy our component not subscription is still active we can cause memory leaks and so",
    "start": "718639",
    "end": "724079"
  },
  {
    "text": "a big part of what we need to be making sure we're doing as angular and rxjs developers is cleaning up after",
    "start": "724079",
    "end": "729680"
  },
  {
    "text": "ourselves and so the reason why the async pipe is so awesome is it allows us to just handle that in the template and",
    "start": "729680",
    "end": "735360"
  },
  {
    "text": "then it handles all the logic for us um so if you actually look at this um it creates a subscription if there isn't um",
    "start": "735360",
    "end": "741760"
  },
  {
    "text": "one already it updates the value and then it has an on-destroy function that when the component that this",
    "start": "741760",
    "end": "747680"
  },
  {
    "text": "pipe is used in is destroyed then it goes ahead and disposes of that subscription it's created um so just",
    "start": "747680",
    "end": "754880"
  },
  {
    "text": "kind of cool i feel like we don't spend enough time looking at the angular source code to really understand how things work under the hood and so i'll",
    "start": "754880",
    "end": "761040"
  },
  {
    "text": "help just i think that having an understanding of how the async pipe actually like looks like in angular just",
    "start": "761040",
    "end": "766720"
  },
  {
    "text": "can help cement that concept for you a little bit better",
    "start": "766720",
    "end": "771800"
  },
  {
    "text": "all right um so keep mentioning it but just to redefine um arcgis reactive extensions for javascript um is a",
    "start": "772480",
    "end": "778720"
  },
  {
    "text": "library for reactive programming um using observables that makes it easier for us to compose asynchronous or",
    "start": "778720",
    "end": "784720"
  },
  {
    "text": "callback-based code so if you're less familiar with rxjs or",
    "start": "784720",
    "end": "791120"
  },
  {
    "text": "you kind of know it's a thing you know you should be using it better but it's not something you really feel comfortable with i want to cover a",
    "start": "791120",
    "end": "797360"
  },
  {
    "text": "couple base level concepts because these are things that i'm going to refer to as we begin to talk about how you can",
    "start": "797360",
    "end": "802959"
  },
  {
    "text": "approach reactive programming um so number one the concept of observables this is a lazy push collection of multiple values over time",
    "start": "802959",
    "end": "810079"
  },
  {
    "text": "um so we have this observable function here we have a next method that is on the observable and every time that emits",
    "start": "810079",
    "end": "816240"
  },
  {
    "text": "we're going to get a new value from that when we have subscribed to that we're not going to get any values from",
    "start": "816240",
    "end": "821920"
  },
  {
    "text": "an observable until we subscribe to it and so that's why having a good knowledge of the async pipe and how to",
    "start": "821920",
    "end": "827040"
  },
  {
    "text": "deal with subscriptions is such a key part of understanding this um we also have a subject um so subject",
    "start": "827040",
    "end": "834000"
  },
  {
    "text": "is a special type of observable that can be multicasted to many observers they can be published to and subscribed to",
    "start": "834000",
    "end": "840560"
  },
  {
    "text": "um i really like subjects because i feel like they help people get an understanding of how to merge their idea",
    "start": "840560",
    "end": "847199"
  },
  {
    "text": "of observable to dealing with user interactions and help them bridge that gap between moving from imperative code",
    "start": "847199",
    "end": "853120"
  },
  {
    "text": "where we get an interaction event from the user and we manually alter the state um to bridging that gap in in creating",
    "start": "853120",
    "end": "858639"
  },
  {
    "text": "and dealing with just streams of data that are then represented and reflected in our ui um so",
    "start": "858639",
    "end": "864959"
  },
  {
    "text": "an observable can only be subscribed to it handles its own um execution uh with",
    "start": "864959",
    "end": "870240"
  },
  {
    "text": "a subject um we can subscribe to these but we can also um publish to them by calling the next event so let's say i",
    "start": "870240",
    "end": "877120"
  },
  {
    "text": "want to um i have a string and i want to collect something from a user i want to understand if there was a click event",
    "start": "877120",
    "end": "882639"
  },
  {
    "text": "maybe i wire up a subject and when i get that click event from the user i call next on that subject with whatever that",
    "start": "882639",
    "end": "888480"
  },
  {
    "text": "that user clicked on um so this allows us to um take things take anything",
    "start": "888480",
    "end": "893600"
  },
  {
    "text": "really into a stream uh and we also have behavior subjects um",
    "start": "893600",
    "end": "898959"
  },
  {
    "text": "these are the same as the subject both are still types of observables but they are going to re-emit the last emitted",
    "start": "898959",
    "end": "904079"
  },
  {
    "text": "value or take a default value of set um this can be really powerful to know about because as",
    "start": "904079",
    "end": "910560"
  },
  {
    "text": "we get more in depth into rxjs sometimes you might have a stream and you're going to take multiple different inputs",
    "start": "910560",
    "end": "917600"
  },
  {
    "text": "and you want to have an initial value for one of those inputs let's say we have a loading state we",
    "start": "917600",
    "end": "923279"
  },
  {
    "text": "haven't really done anything yet but we want to have that state have like a default definition a behavior subject is",
    "start": "923279",
    "end": "928720"
  },
  {
    "text": "a really good example of how we do can do that where it'll have an initial value or if we subscribe to it after the",
    "start": "928720",
    "end": "933839"
  },
  {
    "text": "fact we can pull the last value it had instead of having to wait for the new one so it's something very good to be aware",
    "start": "933839",
    "end": "939759"
  },
  {
    "text": "of very powerful to use in in different situations that we might run into",
    "start": "939759",
    "end": "945040"
  },
  {
    "text": "all right um so it can be a bit tricky to figure out when to use observables versus subjects",
    "start": "945600",
    "end": "950720"
  },
  {
    "text": "and this is something that i definitely see a lot when i'm teaching programmers new to reactive programming like kind of",
    "start": "950720",
    "end": "956480"
  },
  {
    "text": "the the mistakes they get and not that they're bad mistakes like these are the baby steps that you're taking to learn",
    "start": "956480",
    "end": "961839"
  },
  {
    "text": "and grow and figure out how to do this better but it's a good idea to have these socks in your head of observables versus",
    "start": "961839",
    "end": "968399"
  },
  {
    "text": "subjects when you care about execution context um and when you need unidirectional data",
    "start": "968399",
    "end": "974720"
  },
  {
    "text": "flow which is pretty much always so we can do some powerful stuff with subjects but we can also accidentally use them as",
    "start": "974720",
    "end": "980959"
  },
  {
    "text": "a crutch and so i want to find a balance between that um so when we talk about execution",
    "start": "980959",
    "end": "986320"
  },
  {
    "text": "context this is something i feel like a lot of people miss right off the bat and then can very quickly shoot themselves in the foot with",
    "start": "986320",
    "end": "992560"
  },
  {
    "text": "being new to rxjs and in new observables um they have this observable they're like okay great i'm going to subscribe",
    "start": "992560",
    "end": "998560"
  },
  {
    "text": "i'm going to get that thing that i need from it and then i'm going to be on my way away and maybe like i have this other",
    "start": "998560",
    "end": "1004079"
  },
  {
    "text": "instance and i need the value from that observable again in a different place so okay i'm going to create my new subscription and get that that value",
    "start": "1004079",
    "end": "1010000"
  },
  {
    "text": "again um well every time you're creating a new subscription you're re-executing that",
    "start": "1010000",
    "end": "1015759"
  },
  {
    "text": "that observable's context so everything in there is is going to execute again and this can get really dangerous in",
    "start": "1015759",
    "end": "1021839"
  },
  {
    "text": "angular very quickly because we're using http client which is um you know returning an observable so if i subs i",
    "start": "1021839",
    "end": "1028880"
  },
  {
    "text": "have this api uh method and i say hey get request and then i subscribe to that",
    "start": "1028880",
    "end": "1034640"
  },
  {
    "text": "and then oh well i need this data because i want to create a list from it over here and i subscribe again every time i do that i'm re-executing that api",
    "start": "1034640",
    "end": "1041600"
  },
  {
    "text": "call because that's in the execution context of that observable um and so i feel like that's something very easy to",
    "start": "1041600",
    "end": "1047918"
  },
  {
    "text": "miss right away that people may not even realize that they're doing um so an example of that is exactly like this",
    "start": "1047919",
    "end": "1054880"
  },
  {
    "text": "where maybe i have this service where i am making this api call um so my code is",
    "start": "1054880",
    "end": "1060559"
  },
  {
    "text": "gonna look something like this i'm using the http client get method passing in my api i'm creating a subscription here i'm",
    "start": "1060559",
    "end": "1067520"
  },
  {
    "text": "doing something with that and i'm doing it again so this api call will be made twice and that very likely is not what",
    "start": "1067520",
    "end": "1074320"
  },
  {
    "text": "we want to be doing in this instance um another question people kind of ask",
    "start": "1074320",
    "end": "1080480"
  },
  {
    "text": "is you know why can't i just make everything behaviors or everything uh subjects or behavior subjects and just",
    "start": "1080480",
    "end": "1086559"
  },
  {
    "text": "call next on everything um the the problem there is then you're still writing imperative code you're",
    "start": "1086559",
    "end": "1092640"
  },
  {
    "text": "just doing it with behavior subjects um and so you're you're thinking less about",
    "start": "1092640",
    "end": "1098080"
  },
  {
    "text": "how to derive and more about how to alter um and so it can be a difficult thing that i see people get into",
    "start": "1098080",
    "end": "1105039"
  },
  {
    "text": "i'll link these slides later there's kind of a stacklist demo that goes more in depth about why this can be problematic and how to see the",
    "start": "1105039",
    "end": "1110400"
  },
  {
    "text": "differences but um i want to move on through um my slides being weird okay",
    "start": "1110400",
    "end": "1117679"
  },
  {
    "text": "i want to keep touching on some of our our core concepts of rxjs so we can get to the actual reactive programming",
    "start": "1117679",
    "end": "1124080"
  },
  {
    "text": "exercise um so we we talked about observables we talked about types of observables like",
    "start": "1124080",
    "end": "1129200"
  },
  {
    "text": "subjects and behavior subjects now we also have operators um and these are methods that we call in observables to",
    "start": "1129200",
    "end": "1134640"
  },
  {
    "text": "transform and in almost all cases return a new observable um and so this is how we can start to",
    "start": "1134640",
    "end": "1140640"
  },
  {
    "text": "manipulate our data um you know biggest use case is okay we're making hp",
    "start": "1140640",
    "end": "1146000"
  },
  {
    "text": "requests we want to display a list of data we know that that hp request is going to return us an object and maybe",
    "start": "1146000",
    "end": "1152160"
  },
  {
    "text": "all we want to display in the ui is inside of that that data prop on that object so we might throw a map",
    "start": "1152160",
    "end": "1157760"
  },
  {
    "text": "operator in there and we're going to map take that response and then return only what we want out of the response",
    "start": "1157760",
    "end": "1163520"
  },
  {
    "text": "so there are a ton of operators a lot of people get really overwhelmed when they're new to rxjs um",
    "start": "1163520",
    "end": "1169280"
  },
  {
    "text": "keep it simple i feel like map tends to be that like that safe space for us we we've done this kind of thing throughout",
    "start": "1169280",
    "end": "1175679"
  },
  {
    "text": "our careers and in different versions maybe you're using low dash when that that first hit the scene",
    "start": "1175679",
    "end": "1180880"
  },
  {
    "text": "um but don't get overwhelmed by all the different operators you'll kind of get more comfortable and learn them over time",
    "start": "1180880",
    "end": "1186240"
  },
  {
    "text": "we do have a couple different operator types though and these are important to know when you start to get into",
    "start": "1186240",
    "end": "1191679"
  },
  {
    "text": "composing your code and have an understanding where you need to start so we have combinational so things that are going",
    "start": "1191679",
    "end": "1198400"
  },
  {
    "text": "to bring streams together to create a single observable we have",
    "start": "1198400",
    "end": "1203840"
  },
  {
    "text": "creational where maybe we're trying to um instantiate something from event is a",
    "start": "1203840",
    "end": "1208960"
  },
  {
    "text": "really great one uh this allows us to you know capture click event scroll then anything that you would normally do in",
    "start": "1208960",
    "end": "1214080"
  },
  {
    "text": "javascript um tracking like user engagement in the dom we have multicasting uh these are",
    "start": "1214080",
    "end": "1219200"
  },
  {
    "text": "helpful we're not going to touch on it super in depth today um but it's good to be aware of how you can",
    "start": "1219200",
    "end": "1225520"
  },
  {
    "text": "handle situations where you might need a value of an observable in multiple different areas but you don't want to",
    "start": "1225520",
    "end": "1231120"
  },
  {
    "text": "re-execute that subscription context every time so we've got tools or operators available to us to help with",
    "start": "1231120",
    "end": "1237039"
  },
  {
    "text": "what we call multicasting which is kind of where you can share these values without re-executing that context",
    "start": "1237039",
    "end": "1242880"
  },
  {
    "text": "and then we have filtering and these are things that these are operators that will allow us to kind of",
    "start": "1242880",
    "end": "1249039"
  },
  {
    "text": "constantly be taking these these values from our observables that change over time but maybe only doing things in in",
    "start": "1249039",
    "end": "1254799"
  },
  {
    "text": "certain scenarios um so lots of different operator types to be aware of and learn",
    "start": "1254799",
    "end": "1262039"
  },
  {
    "text": "all right um so let's let's switch gears let's kind of shift back to talking about just",
    "start": "1262960",
    "end": "1268640"
  },
  {
    "text": "reactive programming angular what we care about um we are going to focus on creating unidirectional data flow and we",
    "start": "1268640",
    "end": "1274480"
  },
  {
    "text": "want to control pieces of our application state change and we want to get notified of that so if we have we",
    "start": "1274480",
    "end": "1280559"
  },
  {
    "text": "have the state of our our program we want to know what's happening when that's going to happen and and then we can begin to define how we should be",
    "start": "1280559",
    "end": "1286880"
  },
  {
    "text": "reacting to those changes um so i have a demo application and so i",
    "start": "1286880",
    "end": "1291919"
  },
  {
    "text": "want to talk y'all through this because i feel like it's easier to talk through these concepts if you have some sort of",
    "start": "1291919",
    "end": "1297039"
  },
  {
    "text": "real world demo i've been on an animal crossing kick since the beginning of the pandemic the new release on november 5th is quality",
    "start": "1297039",
    "end": "1304000"
  },
  {
    "text": "we can do cooking now so a lot of my demos these days are themed using an animal crossing api",
    "start": "1304000",
    "end": "1311520"
  },
  {
    "text": "but here i'll have a basic representation of you know a lot of what we do when we're building modern",
    "start": "1312000",
    "end": "1318159"
  },
  {
    "text": "javascript applications we have a list of data if we want to display the user we want them to be able to filter the data or sort the data or do all sorts of",
    "start": "1318159",
    "end": "1325200"
  },
  {
    "text": "things that are relevant to them so this is a very simple application where i am making an http request to get",
    "start": "1325200",
    "end": "1331840"
  },
  {
    "text": "a list of these villagers um i have a bunch of different sort options so if i want to sort them by",
    "start": "1331840",
    "end": "1338159"
  },
  {
    "text": "let's say their birthday because i want to make sure that i can go to their house and celebrate their birthday party and give them a gift i can know when",
    "start": "1338159",
    "end": "1343840"
  },
  {
    "text": "that happens um maybe i can filter and i only want to see like certain species of um you know",
    "start": "1343840",
    "end": "1350559"
  },
  {
    "text": "crossing villagers and i also i want them sorted at the same time uh i can do this and then maybe i want to reset and",
    "start": "1350559",
    "end": "1356640"
  },
  {
    "text": "clear all my options and be back to just my initial list so this is what we're going to be",
    "start": "1356640",
    "end": "1361760"
  },
  {
    "text": "talking about and we're going to um look at this uh",
    "start": "1361760",
    "end": "1367039"
  },
  {
    "text": "is our example so i'm going to pull up my code and i have this initially written very imperatively",
    "start": "1367039",
    "end": "1373039"
  },
  {
    "text": "so this is probably going to be very familiar to any angular developer this is kind of the way you start writing code and then i'm going to walk through",
    "start": "1373039",
    "end": "1379679"
  },
  {
    "text": "what it's going to take to refactor it into a more reactive approach and kind of talk about the the benefits there",
    "start": "1379679",
    "end": "1386159"
  },
  {
    "text": "um so if you check out this code um the imperative branch is just in main and then there's a reactive branch called",
    "start": "1386159",
    "end": "1391440"
  },
  {
    "text": "reactive that you can check out to kind of see the the differences in what we did um",
    "start": "1391440",
    "end": "1396799"
  },
  {
    "text": "all right so i have been told the screens are a little tiny um so i'm hoping",
    "start": "1396799",
    "end": "1402960"
  },
  {
    "text": "uh that you all can see this um i don't know can you guys like raise hands or",
    "start": "1402960",
    "end": "1408080"
  },
  {
    "text": "something to tell me if this is acceptable",
    "start": "1408080",
    "end": "1411679"
  },
  {
    "text": "okay people in the front okay okay all right cool all right so um",
    "start": "1413120",
    "end": "1421440"
  },
  {
    "text": "actually let me make sure i'm in the right branch for you before we get started talking about this oh this is so hard to be this big um",
    "start": "1421440",
    "end": "1428080"
  },
  {
    "text": "yes okay all right so let's take a look at the code that is um uh building our our application here um",
    "start": "1428080",
    "end": "1436080"
  },
  {
    "text": "i have my list component and um let's kind of look through what's going on here i have my displayed villagers and",
    "start": "1436080",
    "end": "1441840"
  },
  {
    "text": "this is what i have in the dom that i'm iterating over um",
    "start": "1441840",
    "end": "1448320"
  },
  {
    "text": "and so that's kind of our starting point um other things i care about i have my list of check boxes um and so i",
    "start": "1448320",
    "end": "1457039"
  },
  {
    "text": "the the checkboxes are going to allow me to filter by the different things that are either personality species or hobby",
    "start": "1457039",
    "end": "1462480"
  },
  {
    "text": "and then i also have my sorting options which are just strings right now of those those different attributes that i",
    "start": "1462480",
    "end": "1467840"
  },
  {
    "text": "know are on my animal crossing villagers um so that's kind of what our code looks like here so let's let's start with the",
    "start": "1467840",
    "end": "1474159"
  },
  {
    "text": "basics um what we need to do is we need to um get this data from the api um so i already",
    "start": "1474159",
    "end": "1481279"
  },
  {
    "text": "have this pre-created method that's making a request to that and it's returning that and that's an observable um so you can see here",
    "start": "1481279",
    "end": "1488000"
  },
  {
    "text": "um sorry actually i think i why does this look like i am in the wrong branch stand",
    "start": "1488000",
    "end": "1493120"
  },
  {
    "text": "by so big i can't do this",
    "start": "1493120",
    "end": "1501840"
  },
  {
    "text": "do some weird things",
    "start": "1508640",
    "end": "1513320"
  },
  {
    "text": "all right this looks more appropriate sorry my bad um i have not reset this internally apparently okay um so here we",
    "start": "1530799",
    "end": "1538320"
  },
  {
    "text": "go again uh we're we are making our api request um and then we are subscribing",
    "start": "1538320",
    "end": "1544799"
  },
  {
    "text": "to get the value of that observable and then inside of um that subscription function we are setting the value of",
    "start": "1544799",
    "end": "1551919"
  },
  {
    "text": "displayed villagers to um be and i'm just storing um that initial request in",
    "start": "1551919",
    "end": "1557279"
  },
  {
    "text": "this this villagers member initially um and then calling sort list on that we're just going to sort by name so there's an",
    "start": "1557279",
    "end": "1562880"
  },
  {
    "text": "initial default um sort value um so in here um i have",
    "start": "1562880",
    "end": "1571440"
  },
  {
    "text": "a couple different things going on so we have the sort list method and so this is just going to take an input of",
    "start": "1571440",
    "end": "1577760"
  },
  {
    "text": "the list take an input of the the property that we're going to sort on and then return",
    "start": "1577760",
    "end": "1583440"
  },
  {
    "text": "what we want our list to be after that um so any time we do that um do that",
    "start": "1583440",
    "end": "1591200"
  },
  {
    "text": "sorting we're going to handle that so let's kind of look at the different things we have going on here um i have a",
    "start": "1591200",
    "end": "1596960"
  },
  {
    "text": "form control that i am you know getting the the value change of a user for what sort option they're selecting um and",
    "start": "1596960",
    "end": "1603919"
  },
  {
    "text": "then i have my filter option and so um if we look again in the ui i basically have all these different check boxes and",
    "start": "1603919",
    "end": "1609919"
  },
  {
    "text": "so you can check these and nothing's going to happen until you hit apply filter so that's what we have happening here is",
    "start": "1609919",
    "end": "1616559"
  },
  {
    "text": "when we click this apply filters button we're executing code so",
    "start": "1616559",
    "end": "1622720"
  },
  {
    "text": "when we hit our apply filters we're doing this we're closing our accordion which is",
    "start": "1623520",
    "end": "1628799"
  },
  {
    "text": "just ui display but then we are again modifying the displayed villager's value and we're",
    "start": "1628799",
    "end": "1634799"
  },
  {
    "text": "setting it equal to whatever this is the same with the sort we are again changing the value of villagers and",
    "start": "1634799",
    "end": "1641279"
  },
  {
    "text": "whatever it should be and so i think by now you can see how many different times we're altering the value of displayed",
    "start": "1641279",
    "end": "1647600"
  },
  {
    "text": "villagers and understand how hard it can be to figure out okay why am i seeing",
    "start": "1647600",
    "end": "1654000"
  },
  {
    "text": "the villagers list in the ui displayed this certain way if i'm changing it in all these different places and that can",
    "start": "1654000",
    "end": "1659039"
  },
  {
    "text": "be really hard to track down and figure out um or maybe we have to refactor and we're like oh well it should only do",
    "start": "1659039",
    "end": "1664799"
  },
  {
    "text": "this in this certain circumstance okay now i have these you know five or six different touch points for this very",
    "start": "1664799",
    "end": "1669919"
  },
  {
    "text": "basic functionality that i need to figure out how to make work all right um so let's see here let's um",
    "start": "1669919",
    "end": "1677200"
  },
  {
    "text": "let's break this apart and let's try and get this into a more reactive state so",
    "start": "1677200",
    "end": "1682480"
  },
  {
    "text": "the first thing i'm typically going to do is uh and i'm going to get rid of my subscription and i'm going to use the",
    "start": "1682480",
    "end": "1688880"
  },
  {
    "text": "async pipe wherever i can so right now we have our list of villagers that we're iterating over",
    "start": "1688880",
    "end": "1695600"
  },
  {
    "text": "this is just being manually set again every time we're changing the value in our component so what i'm going to do here is i'm going",
    "start": "1695600",
    "end": "1702799"
  },
  {
    "text": "to create a new member on my component and one of the things that we do",
    "start": "1702799",
    "end": "1708000"
  },
  {
    "text": "in angular or well in general as best practices is if we're dealing with an",
    "start": "1708000",
    "end": "1713600"
  },
  {
    "text": "observable we like to use a dollar sign after it to indicate to the user hey this isn't just a normal variable here",
    "start": "1713600",
    "end": "1720000"
  },
  {
    "text": "you were dealing with an observable that you need to understand that you'll have to subscribe to it to get the value or",
    "start": "1720000",
    "end": "1725279"
  },
  {
    "text": "other concerns that you might have um so that's just kind of um best practice that we adopt there's actually",
    "start": "1725279",
    "end": "1731600"
  },
  {
    "text": "um a typescript guide um i think it's ts.dev um that was published and they",
    "start": "1731600",
    "end": "1736720"
  },
  {
    "text": "talk a little bit about some of the options like this um",
    "start": "1736720",
    "end": "1741520"
  },
  {
    "text": "uh and so i am uh all right so that's my starting point is",
    "start": "1741840",
    "end": "1748080"
  },
  {
    "text": "i'm i'm defining my type um so now here i'm going to change things up and instead of doing this",
    "start": "1748080",
    "end": "1753520"
  },
  {
    "text": "method called where i'm manually setting displayed villagers i'm just going to set this um to",
    "start": "1753520",
    "end": "1759039"
  },
  {
    "text": "the um to the observable that we will get returned when we execute this method um",
    "start": "1759039",
    "end": "1768158"
  },
  {
    "text": "and let me make sure it's been a while since i've looked at this typing um",
    "start": "1769360",
    "end": "1774799"
  },
  {
    "text": "see here um let me just make sure my types are correct",
    "start": "1775520",
    "end": "1781520"
  },
  {
    "text": "um oh that's why all right sorry get villagers um so this is going to return",
    "start": "1781520",
    "end": "1788240"
  },
  {
    "text": "an observable of villagers it would help if i type this correctly apologies this is what happens when i try and write",
    "start": "1788240",
    "end": "1793840"
  },
  {
    "text": "code before i've consumed my first cup of coffee",
    "start": "1793840",
    "end": "1797919"
  },
  {
    "text": "yes oh god that's oof",
    "start": "1803600",
    "end": "1808398"
  },
  {
    "text": "okay there we go all right um can can you see that",
    "start": "1811600",
    "end": "1818000"
  },
  {
    "text": "sorry that's awful um sure um okay",
    "start": "1818000",
    "end": "1824240"
  },
  {
    "text": "all right so there we go um so now we are setting um this",
    "start": "1824240",
    "end": "1829600"
  },
  {
    "text": "to the response of our display villagers and then what we can do is we can come in here and just simply add our async",
    "start": "1829600",
    "end": "1836240"
  },
  {
    "text": "pipe here",
    "start": "1836240",
    "end": "1838799"
  },
  {
    "text": "and now we have converted this to be just a teeny tiny bit more reactive",
    "start": "1842159",
    "end": "1847279"
  },
  {
    "text": "and we can go ahead and get rid of this code um and actually what i might do here is um",
    "start": "1847279",
    "end": "1853600"
  },
  {
    "text": "uh okay let's say i want to include this sort function um where i want to do some",
    "start": "1853600",
    "end": "1858960"
  },
  {
    "text": "sort of initial sorting let's use our our first operator so instead of kind of doing something like this where we're",
    "start": "1858960",
    "end": "1864159"
  },
  {
    "text": "setting it very imperatively um i can go ahead and i can use uh my map operator",
    "start": "1864159",
    "end": "1871039"
  },
  {
    "text": "so i'm going to pipe off of here pop in my pass in my map operator this is uh villagers and from here we can do um",
    "start": "1871039",
    "end": "1880720"
  },
  {
    "text": "this dot sort list uh villagers and then we're gonna do",
    "start": "1880720",
    "end": "1886880"
  },
  {
    "text": "that on name yelling at me",
    "start": "1886880",
    "end": "1893840"
  },
  {
    "text": "oh my gosh you guys i cannot spell villagers villagers",
    "start": "1898880",
    "end": "1905440"
  },
  {
    "text": "what is wrong with my spelling",
    "start": "1905440",
    "end": "1908799"
  },
  {
    "text": "oh do i just not have this type imported sorry my bad um",
    "start": "1914960",
    "end": "1921159"
  },
  {
    "text": "my intellisense is not helping me today",
    "start": "1924320",
    "end": "1928158"
  },
  {
    "text": "i understand why my type definitions are not here",
    "start": "1930399",
    "end": "1935640"
  },
  {
    "text": "oh never mind okay sorry jennifer is a spaz this morning i don't",
    "start": "1936480",
    "end": "1942320"
  },
  {
    "text": "have a type of villagers because i can just use an array all right there we go all right snap who's aside um",
    "start": "1942320",
    "end": "1949919"
  },
  {
    "text": "so now we have some reactive code where we have our api call we're um getting",
    "start": "1949919",
    "end": "1955200"
  },
  {
    "text": "the value of that and we are executing that subscription in our template using the async pipe",
    "start": "1955200",
    "end": "1960960"
  },
  {
    "text": "okay so step one handled um one of the other things we can do now is",
    "start": "1960960",
    "end": "1966000"
  },
  {
    "text": "we can do some cleanup um so one of the things that you may have seen before is this",
    "start": "1966000",
    "end": "1971039"
  },
  {
    "text": "using of an unsubscriber subject and so this is sometimes something we do to make unsubscribing in our templates a",
    "start": "1971039",
    "end": "1977760"
  },
  {
    "text": "lot easier so there are going to be cases where you just can't use the async pipe you need to create a subscription in your template um and so kind of the",
    "start": "1977760",
    "end": "1984640"
  },
  {
    "text": "preferred method is to use the take until operator and that's going to say hey we're going to keep taking values",
    "start": "1984640",
    "end": "1990960"
  },
  {
    "text": "from this observable until this observable is finished um so in this code we have our unsubscriber in our on",
    "start": "1990960",
    "end": "1998159"
  },
  {
    "text": "destroy lifecycle hook we are calling next and complete which is completing that observable when this observable gets the completion",
    "start": "1998159",
    "end": "2004960"
  },
  {
    "text": "of this observable it is then going to complete itself and then will no longer be open and subscribing to new values so",
    "start": "2004960",
    "end": "2010159"
  },
  {
    "text": "that's how we handle subscription management um so one of the things i can do uh by",
    "start": "2010159",
    "end": "2015360"
  },
  {
    "text": "getting rid of this is um i i can get rid of the need to do this take until because we're now",
    "start": "2015360",
    "end": "2021360"
  },
  {
    "text": "managing our subscription inside the template um all right so moving on let's um tackle",
    "start": "2021360",
    "end": "2028720"
  },
  {
    "text": "the sort options next so we we have our displayed villagers and all this is now is it's the response of our api call",
    "start": "2028720",
    "end": "2035919"
  },
  {
    "text": "um and so what we want to do now is we want to be able to modify displayed villagers",
    "start": "2035919",
    "end": "2041760"
  },
  {
    "text": "if a user chooses a a different sort option so how would we begin to make that happen",
    "start": "2041760",
    "end": "2048000"
  },
  {
    "text": "um this is uh when we begin to deal with",
    "start": "2048000",
    "end": "2053599"
  },
  {
    "text": "merging streams so what i'm going to do right now is i'm going to change this because this is",
    "start": "2053599",
    "end": "2059599"
  },
  {
    "text": "just like our our starting oh my gosh i keep dragging this is just our starting definition for what this is going to be",
    "start": "2059599",
    "end": "2064960"
  },
  {
    "text": "this might not be the end result so i'm just going to kind of like go step by step here and so i'm going to change this um and this is just going to be a",
    "start": "2064960",
    "end": "2071839"
  },
  {
    "text": "const for now we're going to we're gonna call this maybe um displayed villagers api and so we're gonna know okay this is",
    "start": "2071839",
    "end": "2078158"
  },
  {
    "text": "an observable containing our initial api request all right so let's let's start building our observable that's actually gonna be",
    "start": "2078159",
    "end": "2084800"
  },
  {
    "text": "the um what we're gonna display in the ui and so i can start and i can just say okay this is going to be my display",
    "start": "2084800",
    "end": "2090720"
  },
  {
    "text": "villagers api um so here's my initial request but i want to know when a user has sorted",
    "start": "2090720",
    "end": "2098079"
  },
  {
    "text": "something and so my sort is a form control and so form controls are built using rxjs and",
    "start": "2098079",
    "end": "2104880"
  },
  {
    "text": "so um they have an observable called value changes and so i can get notified of a value change when i subscribe to",
    "start": "2104880",
    "end": "2111520"
  },
  {
    "text": "this every time and then i can do something with that um so what can i do here um i can start to combine these",
    "start": "2111520",
    "end": "2118720"
  },
  {
    "text": "things together uh so i i have my initial value but i want to listen for changes of things that are happening",
    "start": "2118720",
    "end": "2124800"
  },
  {
    "text": "like this is pretty much always going to execute um and so i want to start with and say okay",
    "start": "2124800",
    "end": "2130400"
  },
  {
    "text": "anytime something changes i want that to be accounted for and so i",
    "start": "2130400",
    "end": "2135839"
  },
  {
    "text": "might do something like this where i say this dot sort option control and then i",
    "start": "2135839",
    "end": "2142720"
  },
  {
    "text": "might do value changes um and so this again is an observable uh",
    "start": "2142720",
    "end": "2150880"
  },
  {
    "text": "and so um what i need to do now is i want to manipulate things in here so",
    "start": "2153280",
    "end": "2160000"
  },
  {
    "text": "when this value changes i want to manipulate whatever the displayed villagers is um and so let's let's let's",
    "start": "2160000",
    "end": "2167680"
  },
  {
    "text": "leave this guy out for now um so value changes happens i want to do",
    "start": "2167680",
    "end": "2173200"
  },
  {
    "text": "something um to change what displayed villagers is um so what i need to do is i need to",
    "start": "2173200",
    "end": "2178560"
  },
  {
    "text": "start um combining different things and so i'm going to change this a little bit",
    "start": "2178560",
    "end": "2183760"
  },
  {
    "text": "um and i'm going to use an operator called combine latest and so this is one of those combined combat",
    "start": "2183760",
    "end": "2189520"
  },
  {
    "text": "combinational excuse me operators and so this is going to take an array um and so",
    "start": "2189520",
    "end": "2194720"
  },
  {
    "text": "uh this is going to get the latest changes of of anything that we pass into it and then allow us to merge that into",
    "start": "2194720",
    "end": "2201280"
  },
  {
    "text": "a stream and then do something with it um and excuse me that's not quite semantically correct we're not merging",
    "start": "2201280",
    "end": "2207520"
  },
  {
    "text": "these into a stream we're simply able to kind of get them together and then make decisions based on these different",
    "start": "2207520",
    "end": "2213599"
  },
  {
    "text": "things happening there all right um so we have uh this",
    "start": "2213599",
    "end": "2220640"
  },
  {
    "text": "which is our value changes so this is going to be the value of whatever our sort option is and then we also want to pass in our",
    "start": "2220640",
    "end": "2227280"
  },
  {
    "text": "initial value that we're getting which is our display villagers api response um",
    "start": "2227280",
    "end": "2233280"
  },
  {
    "text": "so at this point when we pipe off of here we are going to be able to do whatever",
    "start": "2233280",
    "end": "2240000"
  },
  {
    "text": "we want and take an array of these different things and deal with it so i'm going to use my trusty map operator",
    "start": "2240000",
    "end": "2246320"
  },
  {
    "text": "because i know it's i'm going to want to do something to this displayed villagers data that i have",
    "start": "2246320",
    "end": "2251599"
  },
  {
    "text": "so i'm going to take in my sort option my villagers that i'm getting and then i'm",
    "start": "2251599",
    "end": "2257680"
  },
  {
    "text": "going to return um i know i'm going to return my villagers um because that's what i'm going to do i",
    "start": "2257680",
    "end": "2263520"
  },
  {
    "text": "may just have done something to sort it um and so",
    "start": "2263520",
    "end": "2268560"
  },
  {
    "text": "what i've done here is i'm listening and so anytime sort option changes this this",
    "start": "2268560",
    "end": "2273680"
  },
  {
    "text": "pipe this execution context is going to re-execute and it's going to implement whatever is in here um so i i have to",
    "start": "2273680",
    "end": "2279920"
  },
  {
    "text": "pass this in because i want that initial list to be able to do something with um",
    "start": "2279920",
    "end": "2285280"
  },
  {
    "text": "i can't remember why this one is deprecated um i don't know maybe i imported it at the wrong place anyway um",
    "start": "2285280",
    "end": "2292079"
  },
  {
    "text": "so i'm going to kind of change things here and so here i'm declaring again the value of displayed villagers i'm",
    "start": "2292079",
    "end": "2298320"
  },
  {
    "text": "declaring it it's always going to be the same thing based on anything that i'm going to pass in here so instead of manually",
    "start": "2298320",
    "end": "2304480"
  },
  {
    "text": "updating displayed villagers over and over and over again i'm creating a definition here of what state should be based on anything here so if i am",
    "start": "2304480",
    "end": "2312079"
  },
  {
    "text": "somebody trying to debug why i'm not seeing displayed villagers in the way that i would expect this is my source of truth this is the place i come and try",
    "start": "2312079",
    "end": "2319280"
  },
  {
    "text": "and understand how it is being altered based on what's coming into it in in these different streams",
    "start": "2319280",
    "end": "2325520"
  },
  {
    "text": "all right um so we're just going to take something like this",
    "start": "2325520",
    "end": "2331680"
  },
  {
    "text": "and so we we care about our sword option here um and so i'm going to just have this",
    "start": "2331680",
    "end": "2338320"
  },
  {
    "text": "cons where it's going to be a sorted list based on whether there's a sort of um a sort option or not um and then uh call",
    "start": "2338320",
    "end": "2346560"
  },
  {
    "text": "my my shortlist method that i've already written my sort list excuse me method",
    "start": "2346560",
    "end": "2351760"
  },
  {
    "text": "that i've already dealt with um so it's not picking up my type very well",
    "start": "2351760",
    "end": "2358160"
  },
  {
    "text": "always fun debugging my typescript is yelling at me today oh did i set this as a",
    "start": "2363599",
    "end": "2369280"
  },
  {
    "text": "sort of option option",
    "start": "2369280",
    "end": "2373040"
  },
  {
    "text": "oh um",
    "start": "2374480",
    "end": "2380560"
  },
  {
    "text": "all right so here we are",
    "start": "2380560",
    "end": "2384960"
  },
  {
    "text": "changes not sure why it's yelling it oh okay",
    "start": "2388400",
    "end": "2397119"
  },
  {
    "text": "never mind i just told myself um so um",
    "start": "2397119",
    "end": "2402320"
  },
  {
    "text": "sword option does not have a value yet because um it has not emitted anything at this point and so i've got some",
    "start": "2403680",
    "end": "2409680"
  },
  {
    "text": "goofiness going on there so um ignore red squigglies for now um they're just much more obnoxious because my text",
    "start": "2409680",
    "end": "2416240"
  },
  {
    "text": "is so zoomed in um what i'm doing here is i'm taking in our sort option value changes um dealing with that and uh",
    "start": "2416240",
    "end": "2424720"
  },
  {
    "text": "bringing things in and i'm actually going to refactor this just a little slightly and we're going to say just to make this clear so you can kind",
    "start": "2424720",
    "end": "2430720"
  },
  {
    "text": "of track the track the pattern better sort options and so we know this is an observable and it's going to be equal to",
    "start": "2430720",
    "end": "2437119"
  },
  {
    "text": "my sort options control value changes and one of the things i'm going to do is i it's not going to have",
    "start": "2437119",
    "end": "2444480"
  },
  {
    "text": "an initial value um and so and this is by nature of the form controls there's not going to be a value until you change",
    "start": "2444480",
    "end": "2450079"
  },
  {
    "text": "it or admit it's an event and this is a situation where we might run in and say hey we need a behavior subject because",
    "start": "2450079",
    "end": "2455839"
  },
  {
    "text": "we need either an initial value or something to re-execute but we can also do a couple other different things so a",
    "start": "2455839",
    "end": "2461200"
  },
  {
    "text": "lot of times what i'll do is i'll use the start with operator and that's going to give you an initial value",
    "start": "2461200",
    "end": "2466720"
  },
  {
    "text": "and i'll just say null for now all right and so let's pass this in so this is a little bit more readable",
    "start": "2466720",
    "end": "2472400"
  },
  {
    "text": "especially because we have zero screen real estate um",
    "start": "2472400",
    "end": "2478280"
  },
  {
    "text": "uh got my mouth he's yelling at me",
    "start": "2480560",
    "end": "2486079"
  },
  {
    "text": "let's deal with this for now um gosh this is hard to read this big um all right",
    "start": "2486079",
    "end": "2491680"
  },
  {
    "text": "so we've got that handled we don't have to deal with this guy anymore um because we know we're going to be handling any",
    "start": "2491680",
    "end": "2498160"
  },
  {
    "text": "sort of sorting inside here let me make sure my sort method",
    "start": "2498160",
    "end": "2503440"
  },
  {
    "text": "taking list taking property um",
    "start": "2503440",
    "end": "2509560"
  },
  {
    "text": "okay we'll just assert that this is gonna be this sorry we'll just have to go over the",
    "start": "2510079",
    "end": "2517040"
  },
  {
    "text": "line okay all right so here we go um now we're",
    "start": "2517040",
    "end": "2523040"
  },
  {
    "text": "gonna go ahead and return our sorted list um because we know this is going to be either like our default villagers",
    "start": "2523040",
    "end": "2528800"
  },
  {
    "text": "that we got passed in or um the sorted version based on whatever we passed to it",
    "start": "2528800",
    "end": "2535640"
  },
  {
    "text": "it's very comfy right outside okay um so next up what we want to do is we want to",
    "start": "2540640",
    "end": "2545920"
  },
  {
    "text": "think about filtering so um we've we've handled the sort functionality at this point where um if we",
    "start": "2545920",
    "end": "2552400"
  },
  {
    "text": "execute a sort event here it is going to go into that that pipeline and handle",
    "start": "2552400",
    "end": "2557520"
  },
  {
    "text": "that um and so anytime we sort we are going to have our our displayed",
    "start": "2557520",
    "end": "2563040"
  },
  {
    "text": "villagers this this map function is going to execute because we've received a new a new value in the sort options",
    "start": "2563040",
    "end": "2568720"
  },
  {
    "text": "observable it's going to re-execute this code and and make displayed villagers what we want and so the next piece that",
    "start": "2568720",
    "end": "2574400"
  },
  {
    "text": "we need to bring in then is our filter piece and so this is where we're selecting check boxes um and then",
    "start": "2574400",
    "end": "2579440"
  },
  {
    "text": "hitting our apply filters button all right um so",
    "start": "2579440",
    "end": "2584640"
  },
  {
    "text": "what we need to do here and we can handle this a couple different ways um and so i'm going to show you kind of",
    "start": "2584640",
    "end": "2589680"
  },
  {
    "text": "just a cool way that's really fun but it's not necessarily the easiest way the easiest way is going to say okay we",
    "start": "2589680",
    "end": "2596480"
  },
  {
    "text": "have a click event here called apply filters actually you know what let's just do the easy way first all right so we already",
    "start": "2596480",
    "end": "2603200"
  },
  {
    "text": "have this method wired up when a user clicks on this button it calls this apply filters method so let's just go and let's modify that",
    "start": "2603200",
    "end": "2610160"
  },
  {
    "text": "we need to bring um whatever's happening this event into our stream somehow",
    "start": "2610160",
    "end": "2617680"
  },
  {
    "text": "and so i'll go ahead and just create a new behavior subject and we're just going to call it um",
    "start": "2617680",
    "end": "2624560"
  },
  {
    "text": "uh filter event um and",
    "start": "2624560",
    "end": "2629760"
  },
  {
    "text": "leave it at that all right so um here",
    "start": "2629760",
    "end": "2635040"
  },
  {
    "text": "actually we'll we'll go ahead and we'll um we'll set that equal to new um",
    "start": "2635040",
    "end": "2640800"
  },
  {
    "text": "subjects uh okay and uh it's just initialized as an empty subject so that's what we have",
    "start": "2640800",
    "end": "2647280"
  },
  {
    "text": "there all right so now what we can do is um get a value here so",
    "start": "2647280",
    "end": "2653440"
  },
  {
    "text": "uh what is our here's our apply filters um so we we have this value here so what",
    "start": "2653440",
    "end": "2658800"
  },
  {
    "text": "i can do here is i can call my filter event and then i'm gonna pass in filters um so anytime this happens um",
    "start": "2658800",
    "end": "2666480"
  },
  {
    "text": "excuse me dot next there we go can't type i'm gonna call next on my",
    "start": "2666480",
    "end": "2672640"
  },
  {
    "text": "filter event and pass it in filter um which is where's my filter",
    "start": "2672640",
    "end": "2680880"
  },
  {
    "text": "it's checkbox group um sort options i think okay so new subject",
    "start": "2680880",
    "end": "2688000"
  },
  {
    "text": "and i'm gonna make it a type of builder sort options okay",
    "start": "2688000",
    "end": "2693280"
  },
  {
    "text": "all right so now we've made this a little bit more imperative or excuse me a little bit more reactive",
    "start": "2693280",
    "end": "2699200"
  },
  {
    "text": "where i'm going to call next on this filter event which is a subject",
    "start": "2699200",
    "end": "2704640"
  },
  {
    "text": "and now what i can do is instead of doing this manual manipulation this manually setting displayed villagers to",
    "start": "2704640",
    "end": "2710160"
  },
  {
    "text": "a different value i can bring this filter event into my displayed villagers",
    "start": "2710160",
    "end": "2715680"
  },
  {
    "text": "observable here and then do something else with it so let's say this guy i've got my filter",
    "start": "2715680",
    "end": "2721520"
  },
  {
    "text": "event oh",
    "start": "2721520",
    "end": "2727839"
  },
  {
    "text": "there we go um and so now i can be listening for",
    "start": "2727839",
    "end": "2733280"
  },
  {
    "text": "something happening on this filter event and when this happens or this happens whatever happens the latest this is going to re-execute and reissue that",
    "start": "2733280",
    "end": "2740160"
  },
  {
    "text": "code again so that's kind of the basic way to get started um fairly easy with with subjects um but if",
    "start": "2740160",
    "end": "2747680"
  },
  {
    "text": "you want to do this maybe a little bit less imperatively you can do something else really cool which is to use the",
    "start": "2747680",
    "end": "2752720"
  },
  {
    "text": "from event operator um so instead of this um let's go ahead and do a filter",
    "start": "2752720",
    "end": "2760400"
  },
  {
    "text": "event um where we are doing um sorry let me remember",
    "start": "2760400",
    "end": "2767839"
  },
  {
    "text": "where i put this okay we've got our filter list here this",
    "start": "2767839",
    "end": "2773200"
  },
  {
    "text": "is for turning our list um well let's we'll we can bring it in here first um okay so we want to",
    "start": "2773200",
    "end": "2782240"
  },
  {
    "text": "uh decide if we're going to do something with our our filter event um there may",
    "start": "2782240",
    "end": "2787680"
  },
  {
    "text": "or may not be one and so if there's not one that might want to modify how we handle things so um",
    "start": "2787680",
    "end": "2794240"
  },
  {
    "text": "uh here we're i'm just gonna change this real quick all right here um we've got our sorted list um then we're gonna",
    "start": "2794240",
    "end": "2800240"
  },
  {
    "text": "check if there's a filter if there are filters if there are filters we're going to go ahead and return that filtered list if not we're",
    "start": "2800240",
    "end": "2806079"
  },
  {
    "text": "going to return that sorted list you can see here we're very declarative with the ternary operator all right so",
    "start": "2806079",
    "end": "2811760"
  },
  {
    "text": "at this point in time instead of redefining displayed villagers in three different places once with the initial",
    "start": "2811760",
    "end": "2817920"
  },
  {
    "text": "api request once any time sort option changes and and once any time filter event changes we now have done that all",
    "start": "2817920",
    "end": "2825040"
  },
  {
    "text": "in one place here so we have one place to look for this code change happening which is really really cool",
    "start": "2825040",
    "end": "2832160"
  },
  {
    "text": "um all right so i want to do a couple other things right now um i want to",
    "start": "2832160",
    "end": "2839440"
  },
  {
    "text": "show you how to do our um filter from event a little better um",
    "start": "2839440",
    "end": "2846880"
  },
  {
    "text": "see here uh okay well okay let's",
    "start": "2846960",
    "end": "2852160"
  },
  {
    "text": "let's refactor this a little bit um",
    "start": "2852160",
    "end": "2857318"
  },
  {
    "text": "about this um by the way i switched to like management only about three months ago so i don't write code on the daily anymore which is",
    "start": "2858079",
    "end": "2864720"
  },
  {
    "text": "depressing but then it like takes away all my all my fine motor skills um",
    "start": "2864720",
    "end": "2870319"
  },
  {
    "text": "okay so we've dealt with our sort list we've dealt with our filter lists um we've got our apply filter function",
    "start": "2870319",
    "end": "2876240"
  },
  {
    "text": "happening um we don't need our set sort um happening because we're not using that anymore",
    "start": "2876240",
    "end": "2882319"
  },
  {
    "text": "all right let's talk about our reset functionality um so i have a reset",
    "start": "2882319",
    "end": "2888160"
  },
  {
    "text": "method here that is tied to a button click um",
    "start": "2888160",
    "end": "2893760"
  },
  {
    "text": "if i can find it yep all right here's our reset",
    "start": "2893760",
    "end": "2899359"
  },
  {
    "text": "um so this is you know now a fourth place that we are altering the the state of our program that can be hard to check",
    "start": "2899359",
    "end": "2905680"
  },
  {
    "text": "down so i have reset where i'm setting this.displayedvillagers to just like that initial um villagers value that",
    "start": "2905680",
    "end": "2912160"
  },
  {
    "text": "i've set with that was the response of the api um so again this is",
    "start": "2912160",
    "end": "2917440"
  },
  {
    "text": "another place that we you know are doing some imperative code that can be really hard to track down state changes of",
    "start": "2917440",
    "end": "2923040"
  },
  {
    "text": "what's happening with our displayed list of villagers um so let's talk about how to refactor this",
    "start": "2923040",
    "end": "2928640"
  },
  {
    "text": "um so what we can do is um we'll do a reset event um",
    "start": "2928640",
    "end": "2935920"
  },
  {
    "text": "and what we're going to do is we're going to use the from event operator um",
    "start": "2937440",
    "end": "2943520"
  },
  {
    "text": "which is not populating for me right now um and so what we can do is uh we can",
    "start": "2943520",
    "end": "2949040"
  },
  {
    "text": "use i already have i believe my my button accessible or maybe i don't um",
    "start": "2949040",
    "end": "2955040"
  },
  {
    "text": "here's my reset button um",
    "start": "2955040",
    "end": "2958960"
  },
  {
    "text": "i'm getting access to that reset button that i have um",
    "start": "2960559",
    "end": "2965680"
  },
  {
    "text": "all right so now i can get access here to be able to hook into that",
    "start": "2966319",
    "end": "2973520"
  },
  {
    "text": "so now i can do stop button dot element ref dot native element",
    "start": "2973520",
    "end": "2980319"
  },
  {
    "text": "i want to handle a click event from there i want to spell click properly which i cannot um",
    "start": "2980319",
    "end": "2986240"
  },
  {
    "text": "and now i want to do some different things so let's kind of recreate what was",
    "start": "2986240",
    "end": "2992960"
  },
  {
    "text": "happening in this reset functionality because you'll notice i'm doing some toggling here",
    "start": "2992960",
    "end": "2999839"
  },
  {
    "text": "and there are times uh that you're going to face if you're trying to adopt reactive programming there are situations that you're going",
    "start": "2999839",
    "end": "3005680"
  },
  {
    "text": "to have to do some imperative stuff and so dealing with toggling or dealing",
    "start": "3005680",
    "end": "3011119"
  },
  {
    "text": "with modals is a really great example where there's not necessarily a great way it's something you kind of flip on and off and it can be too hard to do",
    "start": "3011119",
    "end": "3017280"
  },
  {
    "text": "right off the bat so there are a couple like kind of hacks that we can do so one of the things we can use is the",
    "start": "3017280",
    "end": "3023680"
  },
  {
    "text": "the tap operator and so this is when we don't necessarily need to return anything here um we just need to do some",
    "start": "3023680",
    "end": "3031520"
  },
  {
    "text": "kind of like imperative code and we want to do it in place of a stream um this is also good for console locking if you're",
    "start": "3031520",
    "end": "3037760"
  },
  {
    "text": "ever trying to figure out exactly what's going on inside of your observable but so what we can do here is we can",
    "start": "3037760",
    "end": "3043440"
  },
  {
    "text": "take a lot of this gross imperative code and we can put it in there so we can kind of get rid of this function and",
    "start": "3043440",
    "end": "3050160"
  },
  {
    "text": "start to move everything into a stream",
    "start": "3050160",
    "end": "3054838"
  },
  {
    "text": "all right um and then one of the other things we'll have to do",
    "start": "3056720",
    "end": "3061519"
  },
  {
    "text": "is just um call",
    "start": "3062079",
    "end": "3066880"
  },
  {
    "text": "dot set this.optioncontrol.setval to null um because we're doing a reset um and that's just kind of like an angular",
    "start": "3067200",
    "end": "3073680"
  },
  {
    "text": "specific thing because we also want to handle the reset of our our sort option that was selected",
    "start": "3073680",
    "end": "3079280"
  },
  {
    "text": "all right um so now we have our reset event which uh",
    "start": "3079280",
    "end": "3084400"
  },
  {
    "text": "there we go all right um so that's gonna take the the button click that we're dealing with here that's going to",
    "start": "3084559",
    "end": "3089839"
  },
  {
    "text": "execute um this this tap operator this is the execution context every time that happens",
    "start": "3089839",
    "end": "3095760"
  },
  {
    "text": "and perform all these different things so that's handling some of the ui pieces there now the other thing that we need",
    "start": "3095760",
    "end": "3101200"
  },
  {
    "text": "to do is we need to bring our our reset um into here",
    "start": "3101200",
    "end": "3107200"
  },
  {
    "text": "and so there are a couple different ways i can do this um and",
    "start": "3107200",
    "end": "3113040"
  },
  {
    "text": "uh i like to start more simply of breaking things together before um",
    "start": "3113040",
    "end": "3119599"
  },
  {
    "text": "like starting to do some some more combinational things um so i might start thinking okay well can i take and can i",
    "start": "3119599",
    "end": "3125760"
  },
  {
    "text": "do something with this this reset event um maybe i do something like this i'm not",
    "start": "3125760",
    "end": "3130880"
  },
  {
    "text": "returning anything at this point so i'm just gonna say map to um and anytime this",
    "start": "3130880",
    "end": "3137760"
  },
  {
    "text": "reset event executes i'm just going to map the value to false and so maybe i want to listen for this",
    "start": "3137760",
    "end": "3144720"
  },
  {
    "text": "reset event i'm getting the reset event in my in my stream here",
    "start": "3144720",
    "end": "3150000"
  },
  {
    "text": "and then if false i want to i want to do some logic here i can do that um so",
    "start": "3150000",
    "end": "3156000"
  },
  {
    "text": "let's see here um uh reset event",
    "start": "3156000",
    "end": "3163359"
  },
  {
    "text": "i just you know do something like this if reset event um and then change my change the the value",
    "start": "3163359",
    "end": "3170960"
  },
  {
    "text": "of whatever displayed villager should be which is pretty much going to be back to the initial api um that's a method i",
    "start": "3170960",
    "end": "3176240"
  },
  {
    "text": "could go but then i can start to get really really bloated inside of everything in my i'm passing into here so what if",
    "start": "3176240",
    "end": "3182559"
  },
  {
    "text": "instead um on my reset event i changed um and",
    "start": "3182559",
    "end": "3187680"
  },
  {
    "text": "brought that into my sort option so if i receive a reset event my my sort options takes that and then it sets its value to",
    "start": "3187680",
    "end": "3194000"
  },
  {
    "text": "null um that's something that we can do that's really powerful and really composable and and you'll start to see",
    "start": "3194000",
    "end": "3199680"
  },
  {
    "text": "some fun patterns all right um so i want to oh shoot uh that's a lot of",
    "start": "3199680",
    "end": "3207119"
  },
  {
    "text": "time we don't have much time left um so that's kind of a basic intro into how we can start refactoring our imperative",
    "start": "3207119",
    "end": "3213200"
  },
  {
    "text": "code into more reactive code in angular so i want to talk through a couple things that we looked at doing which was",
    "start": "3213200",
    "end": "3219040"
  },
  {
    "text": "you know dealing with that stream from http client which returns an observable um we dealt with merging that that api",
    "start": "3219040",
    "end": "3226240"
  },
  {
    "text": "response and bringing in forms observables um we talked about creating streams from click events manipulating",
    "start": "3226240",
    "end": "3232000"
  },
  {
    "text": "streams but i want to talk about some beginner mistakes and so the number one we kind",
    "start": "3232000",
    "end": "3237520"
  },
  {
    "text": "of talked about already but i want to retouch on it which is recreating streams if you're recreating um execution context because you're",
    "start": "3237520",
    "end": "3244000"
  },
  {
    "text": "subscribing when you don't need to that can be really really problematic or getting into imperative coding habits",
    "start": "3244000",
    "end": "3249520"
  },
  {
    "text": "with behavior subjects so i've got a couple tips for you to start your reactive programming",
    "start": "3249520",
    "end": "3256720"
  },
  {
    "text": "journey and so number one is to think backwards you need to start with what you want to display in the ui list the different",
    "start": "3256720",
    "end": "3262720"
  },
  {
    "text": "things that would cause that state to change and then begin to to build your reactive code so very much how we were",
    "start": "3262720",
    "end": "3268000"
  },
  {
    "text": "looking at this displayed villagers this is ultimately what we want we want to show in the ui and these are all the sorts of different inputs that might",
    "start": "3268000",
    "end": "3274400"
  },
  {
    "text": "change it that's how we want to think about doing this um we want to use typescript as much as",
    "start": "3274400",
    "end": "3281119"
  },
  {
    "text": "we can i say this out loud because i'm in consulting and so i would say a vast",
    "start": "3281119",
    "end": "3286640"
  },
  {
    "text": "majority of my client code bases use what i call mvt minimum viable typescript",
    "start": "3286640",
    "end": "3291760"
  },
  {
    "text": "where they just type things enough so the compiler won't yell at them and then they go on their merry way um the dealing with streams are very abstract",
    "start": "3291760",
    "end": "3298880"
  },
  {
    "text": "and it can be hard to visualize what you're dealing with and so if you",
    "start": "3298880",
    "end": "3304000"
  },
  {
    "text": "are trying to type things you're going to get better hints of of what you're doing wrong in those",
    "start": "3304000",
    "end": "3309359"
  },
  {
    "text": "areas where help will help you better learn how operators work um number three",
    "start": "3309359",
    "end": "3316400"
  },
  {
    "text": "be chunky um so you saw me starting to like break apart things but i started just dumping",
    "start": "3316720",
    "end": "3323119"
  },
  {
    "text": "everything in that map function um and i feel like that's a really great starting point it's just like deal with that first initial map of what you need to do",
    "start": "3323119",
    "end": "3330079"
  },
  {
    "text": "to display your different data throw everything in there and then as you start to need to reuse pieces or",
    "start": "3330079",
    "end": "3335920"
  },
  {
    "text": "recreate things then start to break pieces apart but it's completely okay to be chunky in the beginning and kind of",
    "start": "3335920",
    "end": "3341280"
  },
  {
    "text": "throw everything in one spot while you're trying to get a handle on this this declarative approach",
    "start": "3341280",
    "end": "3348319"
  },
  {
    "text": "all right um tip number four is to start with just a few operators i've mentioned this already um like map and tapper are",
    "start": "3348319",
    "end": "3354799"
  },
  {
    "text": "great go-to's to just get you more comfortable visibility what's going on um but in case you weren't aware um",
    "start": "3354799",
    "end": "3360880"
  },
  {
    "text": "there is a really cool operator decision tree available at rxjs.dev um that it will actually i'll pop this",
    "start": "3360880",
    "end": "3367440"
  },
  {
    "text": "open right now um that you can uh answer a couple questions and it's going to guide you towards what operator you should",
    "start": "3367440",
    "end": "3373680"
  },
  {
    "text": "probably be using so in our instance we did have some observables to combine together we had",
    "start": "3373680",
    "end": "3378960"
  },
  {
    "text": "some data response and we had some input from a user um and so this will give you all sorts of different options to help",
    "start": "3378960",
    "end": "3384880"
  },
  {
    "text": "you make your decision or at least point you in the right direction of where to look",
    "start": "3384880",
    "end": "3390559"
  },
  {
    "text": "oops there we go all right um then once you start to get the handle things start working towards breaking",
    "start": "3390559",
    "end": "3396799"
  },
  {
    "text": "apart your streams um you you know it's easy to put everything in the beginning like i said just throw",
    "start": "3396799",
    "end": "3402559"
  },
  {
    "text": "everything together but then you can start to break things out into separate columns you can name them more significantly especially for other",
    "start": "3402559",
    "end": "3407920"
  },
  {
    "text": "people who maybe are less familiar they can say oh okay this is a reset event because you've named it something human",
    "start": "3407920",
    "end": "3413440"
  },
  {
    "text": "readable and then bring those in to compose things this is also going to help you just spot these patterns more easily and create",
    "start": "3413440",
    "end": "3420000"
  },
  {
    "text": "more composability as you grow um and finally um tip number six is you",
    "start": "3420000",
    "end": "3425119"
  },
  {
    "text": "are not allowed to go back to work and rewrite your entire code base over the weekend to adopt reactive programming um",
    "start": "3425119",
    "end": "3431440"
  },
  {
    "text": "this is cool it's it's something awesome it's a it's a really great way to program with a lot of benefits but",
    "start": "3431440",
    "end": "3436640"
  },
  {
    "text": "anything like this any architectural decisions or patterned adoptions must be discussed and approved by everyone",
    "start": "3436640",
    "end": "3442000"
  },
  {
    "text": "committing code to the project so please do not go be that that rogue cowboy",
    "start": "3442000",
    "end": "3447599"
  },
  {
    "text": "who refactors the code base in a way that people aren't able to understand because they haven't experienced or become aware of reactive",
    "start": "3447599",
    "end": "3453599"
  },
  {
    "text": "programming yet a couple codes must watch out for in your journey you want to look out for",
    "start": "3453599",
    "end": "3459119"
  },
  {
    "text": "nested subscriptions this is definitely something i see early on where people don't understand how to use the async",
    "start": "3459119",
    "end": "3464640"
  },
  {
    "text": "pipe or deal with with values as they need things from those nested um those",
    "start": "3464640",
    "end": "3470400"
  },
  {
    "text": "observables so they're creating nested subscriptions so definite code smell there you want to look out for imperative logic and subscription",
    "start": "3470400",
    "end": "3476480"
  },
  {
    "text": "functions i showed you an example of that with the the reset um and kind of some imperative logic some of it will be",
    "start": "3476480",
    "end": "3482240"
  },
  {
    "text": "needed some of it will be code smelly and you'll you'll learn to tell the difference pretty quickly um you want to look out for not",
    "start": "3482240",
    "end": "3487680"
  },
  {
    "text": "unsubscribing because i still see this a lot in different code bases um yeah uh just again watch out for",
    "start": "3487680",
    "end": "3494000"
  },
  {
    "text": "imperative logic in the top operators because sometimes it is needed and can't be avoided",
    "start": "3494000",
    "end": "3500319"
  },
  {
    "text": "um and and this is hard um like this is an hour-long talk and i feel like it felt really short for me trying to",
    "start": "3500319",
    "end": "3506000"
  },
  {
    "text": "convey some of these concepts to you um and it's something that takes practice it's something that you know even me",
    "start": "3506000",
    "end": "3511920"
  },
  {
    "text": "sitting out and haven't written code in the last couple months um because manage your life it's a skill and it's a habit and it's a",
    "start": "3511920",
    "end": "3518000"
  },
  {
    "text": "way of thinking to get back into and so it's one of those things that you need to practice at and the best way i can",
    "start": "3518000",
    "end": "3523680"
  },
  {
    "text": "describe it is as a javascript developer when you finally figured out what this means",
    "start": "3523680",
    "end": "3529200"
  },
  {
    "text": "um it's that same sort of thing where it's so hard and then as soon as you hit it as soon as you reach that peak of",
    "start": "3529200",
    "end": "3534960"
  },
  {
    "text": "understanding um it really unlocks potential and but it's an uphill climb and it takes part to get there but it's",
    "start": "3534960",
    "end": "3540720"
  },
  {
    "text": "worth it um so these slides are available at reactive programming for angularbase.jenniferwadella.com",
    "start": "3540720",
    "end": "3547200"
  },
  {
    "text": "um if you have any questions i have i think i have the slido um pulled",
    "start": "3547200",
    "end": "3553200"
  },
  {
    "text": "open so feel free to drop anything in there um for the remaining time that we have",
    "start": "3553200",
    "end": "3558400"
  },
  {
    "text": "um but thank you i hope uh this was informative i hope you're excited to at least poke around and try reactive",
    "start": "3558400",
    "end": "3564240"
  },
  {
    "text": "programming if you ever have any questions or your company wants to adopt this and needs help um feel free to reach out to me",
    "start": "3564240",
    "end": "3570240"
  },
  {
    "text": "thanks so much for your time",
    "start": "3570240",
    "end": "3573839"
  }
]