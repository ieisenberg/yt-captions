[
  {
    "start": "0",
    "end": "122000"
  },
  {
    "text": "okay hi everybody I think I got the cue to start so my name is Dina I'm really",
    "start": "10269",
    "end": "16970"
  },
  {
    "text": "really excited to be here especially since this is my first time in Australia so you're going to see a sort of",
    "start": "16970",
    "end": "22640"
  },
  {
    "text": "Australian theme going on my slides I'm going to talk to you today about a",
    "start": "22640",
    "end": "28279"
  },
  {
    "text": "mantra that I'm trying to push forward and that's automatic monitoring and even",
    "start": "28279",
    "end": "34130"
  },
  {
    "text": "possibly profiling and Diagnostics of your production environment so what are",
    "start": "34130",
    "end": "41329"
  },
  {
    "text": "we going to talk about today I always like to start with a little motivation before we get to business",
    "start": "41329",
    "end": "47839"
  },
  {
    "text": "so first I will try to convince you while monitoring of your production is you know pretty important and sometimes",
    "start": "47839",
    "end": "54710"
  },
  {
    "text": "even an absolute must then I'll present to you sort of a general scheme that I",
    "start": "54710",
    "end": "61159"
  },
  {
    "text": "think that we can use in order to approach this self monitoring plan that",
    "start": "61159",
    "end": "69680"
  },
  {
    "text": "we that we want to implement and then after all the introductory hand-waving and and stuff will actually see four",
    "start": "69680",
    "end": "79610"
  },
  {
    "text": "demos that will show you different aspects of your dot mostly dotnet",
    "start": "79610",
    "end": "86690"
  },
  {
    "text": "applications that you can monitor and as I said before perhaps even diagnose on",
    "start": "86690",
    "end": "92300"
  },
  {
    "text": "your production systems before we continue though I would like to mention a few things that we're not going to",
    "start": "92300",
    "end": "98630"
  },
  {
    "text": "cover today you know so you want to be disappointed at the end of the talk so",
    "start": "98630",
    "end": "103700"
  },
  {
    "text": "we're not going to talk about profiling tools we're not going to talk about dashboards or like any kind of",
    "start": "103700",
    "end": "110660"
  },
  {
    "text": "representation of the data we're not talking about third-party monitoring today we're going to do everything with",
    "start": "110660",
    "end": "118040"
  },
  {
    "text": "our own bare hands so be prepared as I",
    "start": "118040",
    "end": "123140"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "said a little motivation well in case it's not obvious by the name and you",
    "start": "123140",
    "end": "129530"
  },
  {
    "text": "know the two minutes that I've been talking just now I think that's monitoring is an absolute",
    "start": "129530",
    "end": "135019"
  },
  {
    "text": "must you know not just debugging and profiling during our development process but the actual live monitoring of our",
    "start": "135019",
    "end": "142700"
  },
  {
    "text": "products systems now if you're developing a server or basically anything at scale I",
    "start": "142700",
    "end": "148480"
  },
  {
    "text": "think it's kind of obvious that you need to monitor I mean like you have to be on",
    "start": "148480",
    "end": "153490"
  },
  {
    "text": "top of things you can't wait for your users and you have a lot of users if you develop a server you can wait for users",
    "start": "153490",
    "end": "159820"
  },
  {
    "text": "to to contact you and say that something is wrong you have to be on top of things and make sure to kind of address the",
    "start": "159820",
    "end": "166390"
  },
  {
    "text": "problems before you cause actual negative value to your users and obviously you can't do it manually like",
    "start": "166390",
    "end": "173500"
  },
  {
    "text": "you can't just log on from time to time to your server you know check check its metrics and check its health and stuff",
    "start": "173500",
    "end": "180130"
  },
  {
    "text": "like that because there's just usually too many instances to monitor so you can't do it manually this isn't quite",
    "start": "180130",
    "end": "187510"
  },
  {
    "text": "obvious case though as I said what I want to add here is that these from my perspective it's also very very",
    "start": "187510",
    "end": "195430"
  },
  {
    "text": "important to monitor or self monitor simple desktop applications as well",
    "start": "195430",
    "end": "202739"
  },
  {
    "text": "because unlike in servers where you usually are always but usually have",
    "start": "202739",
    "end": "208329"
  },
  {
    "text": "access to your servers so you can check them and you know connect if you have problems and and monitor them like at",
    "start": "208329",
    "end": "215950"
  },
  {
    "text": "least the simple metrics with a desktop app you just like ship it to the customer and they install it and you",
    "start": "215950",
    "end": "223390"
  },
  {
    "text": "have no control over what's going on there from that point in time you don't know the exact environment where it's",
    "start": "223390",
    "end": "230320"
  },
  {
    "text": "going to be installed you don't know exactly what they're going to do with it and you kind of lose visibility into",
    "start": "230320",
    "end": "235390"
  },
  {
    "text": "what's going on and so in that sense I think the situation is kind of worse than with servers and so to have the",
    "start": "235390",
    "end": "242829"
  },
  {
    "text": "ability to self monitor and to be able to kind of provide the extra data and",
    "start": "242829",
    "end": "249190"
  },
  {
    "text": "not just like our usual login like we're doing this we're doing that this was the input you know some error happened they",
    "start": "249190",
    "end": "255100"
  },
  {
    "text": "actually be able to to know more general flows in our application like what's",
    "start": "255100",
    "end": "262150"
  },
  {
    "text": "consuming time what's consuming resources that's a very crucial ability",
    "start": "262150",
    "end": "267250"
  },
  {
    "text": "for our desktop applications so I think I convinced you that monitoring monitoring is important why should we",
    "start": "267250",
    "end": "275020"
  },
  {
    "text": "write our own monitor well I didn't write in the slides but",
    "start": "275020",
    "end": "280230"
  },
  {
    "text": "personally I think that researching performance is very important so I mean",
    "start": "280230",
    "end": "285610"
  },
  {
    "text": "it's very interesting I'm sorry so like for me it's a fun feature to develop and",
    "start": "285610",
    "end": "290740"
  },
  {
    "text": "like I hope that for you as well it's like all about software and how stuff",
    "start": "290740",
    "end": "295840"
  },
  {
    "text": "works and getting into internals of things so I think it's fun but a more practical note first and foremost the",
    "start": "295840",
    "end": "303970"
  },
  {
    "text": "reason to write something on your own is that it means that your monitoring can be tailored to your specific business",
    "start": "303970",
    "end": "311620"
  },
  {
    "text": "needs it's not just going to be about this generic metric such as CPU and memory and garbage collection I don't",
    "start": "311620",
    "end": "319210"
  },
  {
    "text": "know disk whatever it can be for your actual application it can be your algorithms that are monitored your",
    "start": "319210",
    "end": "325960"
  },
  {
    "text": "queues your requests whatever it is that you have in your application you can",
    "start": "325960",
    "end": "331030"
  },
  {
    "text": "monitor it specifically and it's going to give you much more insight than just generic monitoring the second reason you",
    "start": "331030",
    "end": "340690"
  },
  {
    "text": "were going but to benefit from writing your own art or is that the diagnostic",
    "start": "340690",
    "end": "345870"
  },
  {
    "text": "Diagnostics data it will flow from ground up and what I mean by that is",
    "start": "345870",
    "end": "351670"
  },
  {
    "text": "that you don't have to kind of redirect the data into external dashboard or tool",
    "start": "351670",
    "end": "358380"
  },
  {
    "text": "wait for it to analyze the data wait to get a notification and alert in the",
    "start": "358380",
    "end": "363669"
  },
  {
    "text": "middle of the night wake up scratch your head start thinking well what should I do",
    "start": "363669",
    "end": "369400"
  },
  {
    "text": "know like the application can become aware of itself self-aware it builds",
    "start": "369400",
    "end": "377770"
  },
  {
    "text": "like it collects the telemetry and it knows what's going on and you can even",
    "start": "377770",
    "end": "382990"
  },
  {
    "text": "actually and we're going to see examples of that later you can even perhaps you know do",
    "start": "382990",
    "end": "388990"
  },
  {
    "text": "something with that data and try to mitigate some you know some negative",
    "start": "388990",
    "end": "394450"
  },
  {
    "text": "value that might be going on or like try to restart or well again we'll see later some examples of what you can do and the",
    "start": "394450",
    "end": "402880"
  },
  {
    "text": "last ring is and that's what all the cool kids do right so I mean I think that like currently with a DevOps state",
    "start": "402880",
    "end": "410410"
  },
  {
    "text": "of mine the development community kind of convergence converging on the idea that",
    "start": "410410",
    "end": "416710"
  },
  {
    "text": "it's very important to automate well basically anything but especially monitoring so again like I'm not",
    "start": "416710",
    "end": "425229"
  },
  {
    "text": "advising you to do something just because like everybody else does that but there's good reason the good reasons",
    "start": "425229",
    "end": "430780"
  },
  {
    "text": "that we just discussed just now why people are converging on this idea of automatic monitoring and you can't stay",
    "start": "430780",
    "end": "437979"
  },
  {
    "text": "behind if your software doesn't do as well as others you will be left behind",
    "start": "437979",
    "end": "443410"
  },
  {
    "text": "and you don't want that I guess cool so how do we go about implementing this or",
    "start": "443410",
    "end": "451419"
  },
  {
    "start": "445000",
    "end": "445000"
  },
  {
    "text": "a grand target of self-awareness self-aware applications after all we",
    "start": "451419",
    "end": "457930"
  },
  {
    "text": "can't just you know attach a profiler or a debugger to our production system",
    "start": "457930",
    "end": "463120"
  },
  {
    "text": "because you know obviously the overhead is going to be too too big so I suggest",
    "start": "463120",
    "end": "469240"
  },
  {
    "text": "I think it's not surprising to use a kind of a hierarchical scheme okay so",
    "start": "469240",
    "end": "476740"
  },
  {
    "text": "what we're going to do is that we're going to use the cheapest tools available for us to monitor anything",
    "start": "476740",
    "end": "483610"
  },
  {
    "text": "that like we need to monitor frequently for all of our basics right so that's",
    "start": "483610",
    "end": "490539"
  },
  {
    "text": "that could be CPU memory disk all of those generic stuff that I talked about",
    "start": "490539",
    "end": "496840"
  },
  {
    "text": "before usually these would be just numerical values that represent resource",
    "start": "496840",
    "end": "502870"
  },
  {
    "text": "consumption now if we have something which is a little rarer or requires",
    "start": "502870",
    "end": "509380"
  },
  {
    "text": "slightly more resources to analyze we can use more advanced tools so for",
    "start": "509380",
    "end": "516459"
  },
  {
    "text": "example if we have some rare exceptions or if we're afraid we might have deadlocks then we can I mean that's",
    "start": "516459",
    "end": "523240"
  },
  {
    "text": "something that doesn't happen a lot we don't have to you know monitor for deadlocks every hundred milliseconds so excuse me",
    "start": "523240",
    "end": "530040"
  },
  {
    "text": "so we can invest a little more time into that but just like do it less frequently",
    "start": "530040",
    "end": "535959"
  },
  {
    "text": "and then if worse comes to worst and we actually diagnose that our application",
    "start": "535959",
    "end": "542380"
  },
  {
    "text": "is having a problem it's deadlocked it's using too much CPU does too much GC it leaks memory I don't",
    "start": "542380",
    "end": "551620"
  },
  {
    "text": "know your queues are too large or requests timeout everything's failing well everything is",
    "start": "551620",
    "end": "558160"
  },
  {
    "text": "so bad anyway so we can just you know use some more resources and do some more",
    "start": "558160",
    "end": "563530"
  },
  {
    "text": "deep deep analysis of what's going on and perhaps even diagnose memory leaks",
    "start": "563530",
    "end": "570730"
  },
  {
    "text": "or what our application is doing where the CPU is spending time and again this",
    "start": "570730",
    "end": "577270"
  },
  {
    "text": "is very important because not always you can like reproduce these problems and",
    "start": "577270",
    "end": "583320"
  },
  {
    "text": "again in this information right from production we'll give you a huge benefit",
    "start": "583320",
    "end": "588480"
  },
  {
    "text": "in debugging later and trying to figure out what exactly happened we'll just",
    "start": "588480",
    "end": "593770"
  },
  {
    "text": "have the information coming straight from your primer application so before",
    "start": "593770",
    "end": "600160"
  },
  {
    "text": "we continue though let's just do a quick overview of the tools which are available for us in each of these",
    "start": "600160",
    "end": "606280"
  },
  {
    "text": "categories so I think that the easiest way on Windows at least to get to get",
    "start": "606280",
    "end": "614710"
  },
  {
    "start": "608000",
    "end": "608000"
  },
  {
    "text": "information about our system or the process is performance counters",
    "start": "614710",
    "end": "619800"
  },
  {
    "text": "performance counters are kind of like these data emitting objects and windows",
    "start": "619800",
    "end": "627930"
  },
  {
    "text": "which provide numerical information sample numerical information about all",
    "start": "627930",
    "end": "633760"
  },
  {
    "text": "sorts of aspects of our system both from a specific process could be our process",
    "start": "633760",
    "end": "639430"
  },
  {
    "text": "and from system-wide so you can get the CPU usage of your process you can get",
    "start": "639430",
    "end": "644500"
  },
  {
    "text": "the memory usage of your process you could not get the number of handles now",
    "start": "644500",
    "end": "650050"
  },
  {
    "text": "the cool thing about these performance counters is that you don't have to restore it your application to get them",
    "start": "650050",
    "end": "655870"
  },
  {
    "text": "or anything like that you just need to turn on the specific performance counter",
    "start": "655870",
    "end": "661030"
  },
  {
    "text": "that you want to monitor and kind of tap into it using an API which is available",
    "start": "661030",
    "end": "667030"
  },
  {
    "text": "for us both an and C++ as a side note",
    "start": "667030",
    "end": "672430"
  },
  {
    "text": "I'll mention that you can also emit your own performance counters so I was saying",
    "start": "672430",
    "end": "677930"
  },
  {
    "text": "for that you can monitor for example cue Silas you can emit these cue sizes as a",
    "start": "677930",
    "end": "684620"
  },
  {
    "text": "performance counter and then that would sit like very nicely with the",
    "start": "684620",
    "end": "689690"
  },
  {
    "text": "architecture of the monitoring if we're monitoring performance counters anyway then we can also monitor our own custom",
    "start": "689690",
    "end": "696950"
  },
  {
    "text": "values this way if you don't want to use performance counters for some reason for",
    "start": "696950",
    "end": "703399"
  },
  {
    "text": "example because of locale localization issues actually they have like string",
    "start": "703399",
    "end": "709490"
  },
  {
    "text": "names and they can depend on the locale of your machine so you might have some",
    "start": "709490",
    "end": "715100"
  },
  {
    "text": "German name for a performance counter or even worse I know Japanese or something",
    "start": "715100",
    "end": "721430"
  },
  {
    "text": "like that so type it so you might want to not use performance counters so you basically",
    "start": "721430",
    "end": "727790"
  },
  {
    "text": "have win32 api is to do the same things i mean after all the performance",
    "start": "727790",
    "end": "733310"
  },
  {
    "text": "counters are implemented using such such native api's so you can get for example",
    "start": "733310",
    "end": "738620"
  },
  {
    "text": "CPU information using get process times that will give you how like how much CPU",
    "start": "738620",
    "end": "745490"
  },
  {
    "text": "your process uses and if you want memory information you could use get process memory info or if you need information",
    "start": "745490",
    "end": "751970"
  },
  {
    "text": "about specific threads in your application then you can get then you can use get read times so all of that is",
    "start": "751970",
    "end": "760310"
  },
  {
    "text": "available for you and if you need something very specific a specific",
    "start": "760310",
    "end": "766250"
  },
  {
    "text": "component a specific function inside your code then you can of course always",
    "start": "766250",
    "end": "771800"
  },
  {
    "text": "use stopwatches or some other similar mechanisms to measure very specific",
    "start": "771800",
    "end": "779920"
  },
  {
    "text": "locations in your code now all of these",
    "start": "779920",
    "end": "785540"
  },
  {
    "start": "784000",
    "end": "784000"
  },
  {
    "text": "tools that we talked about they provide you with those numerical values that I keep talking about and they're great in",
    "start": "785540",
    "end": "792829"
  },
  {
    "text": "the sense that it's very easy to diagnose that you have high GC pauses or",
    "start": "792829",
    "end": "798529"
  },
  {
    "text": "that you have high CPU consumption or high memory consumption but they have no",
    "start": "798529",
    "end": "804920"
  },
  {
    "text": "way to tell you where the source of the problem is",
    "start": "804920",
    "end": "810030"
  },
  {
    "text": "you just know that you have high resource consumption but you don't know why you don't know where your CPU is",
    "start": "810030",
    "end": "817140"
  },
  {
    "text": "spending time you don't know which objects were allocated and where so we",
    "start": "817140",
    "end": "822720"
  },
  {
    "text": "have a solution for that as well windows also comes with a built in",
    "start": "822720",
    "end": "828920"
  },
  {
    "text": "structured logging framework which is called etw event tracing for Windows as",
    "start": "828920",
    "end": "836010"
  },
  {
    "text": "I said it's a structured login framework so what it provides you is that it can give you not just numerical value values",
    "start": "836010",
    "end": "844170"
  },
  {
    "text": "but also other data regarding this trace point that the log message is emitted",
    "start": "844170",
    "end": "851460"
  },
  {
    "text": "from and similarly to performance counters etw is also incorporated inside",
    "start": "851460",
    "end": "856740"
  },
  {
    "text": "Windows and it's really all over the system it's in user mode functions in",
    "start": "856740",
    "end": "862890"
  },
  {
    "text": "kernel mode it's in drivers and services and all over dotnet you can get lots of",
    "start": "862890",
    "end": "868590"
  },
  {
    "text": "information about dotnet from e TW [Music] instead third-party components in fact a",
    "start": "868590",
    "end": "874920"
  },
  {
    "text": "while ago I found out that even chrome can emit it to W if you configure it in",
    "start": "874920",
    "end": "880440"
  },
  {
    "text": "a special way so so it's pretty much everywhere and it gives a lot more",
    "start": "880440",
    "end": "885540"
  },
  {
    "text": "information that you can use excuse me at this point it's worth mentioning that",
    "start": "885540",
    "end": "892140"
  },
  {
    "text": "in fact Windows relies on etw for some",
    "start": "892140",
    "end": "897930"
  },
  {
    "text": "of its own monitoring so for example some of the events in the Windows Event",
    "start": "897930",
    "end": "903060"
  },
  {
    "text": "log are actually the result of some analysis of etw messages that windows",
    "start": "903060",
    "end": "911570"
  },
  {
    "text": "collected collects so why am I saying that because this gives rise to the idea",
    "start": "911570",
    "end": "917970"
  },
  {
    "text": "that maybe you can analyze your own logs in a similar fashion now why would you",
    "start": "917970",
    "end": "926520"
  },
  {
    "text": "do that the same reason that Windows does it you have the data and so you can",
    "start": "926520",
    "end": "932820"
  },
  {
    "text": "analyze it now you're probably asking yourself well ok so I just you know wrote down the data in my log why do I",
    "start": "932820",
    "end": "940020"
  },
  {
    "text": "need to write it down then you know read it Aarseth try to figure it out why not",
    "start": "940020",
    "end": "946619"
  },
  {
    "text": "just like pass the data straight to my monitor well kind of again for the same",
    "start": "946619",
    "end": "952230"
  },
  {
    "text": "reason that Windows does its separation of concerns collecting the telemetry and",
    "start": "952230",
    "end": "958139"
  },
  {
    "text": "analyze and get are two separate things so by keeping them separate you allow",
    "start": "958139",
    "end": "964709"
  },
  {
    "text": "your application to be more flexible and more extendable in the sense that you",
    "start": "964709",
    "end": "971699"
  },
  {
    "text": "could always add more telemetry and you can add more analysis logic and the",
    "start": "971699",
    "end": "977100"
  },
  {
    "text": "things are going to be kind of separated so it's most in architectural thing now",
    "start": "977100",
    "end": "983699"
  },
  {
    "text": "another route you might choose to take is the use seal our MD seal our MD is an",
    "start": "983699",
    "end": "990689"
  },
  {
    "text": "c-sharp open-source library it's available in nougat it's developed by Microsoft and what it gives you is a",
    "start": "990689",
    "end": "998040"
  },
  {
    "text": "programmatic API for all sorts of debugging operations which before this",
    "start": "998040",
    "end": "1005709"
  },
  {
    "text": "library came to be we're only available when you were using like a fully fledged",
    "start": "1005709",
    "end": "1012829"
  },
  {
    "text": "UI debugger so you can attach to a",
    "start": "1012829",
    "end": "1018079"
  },
  {
    "text": "process you can read its memory you can look at its treads look what the threads",
    "start": "1018079",
    "end": "1024889"
  },
  {
    "text": "are waiting for so you analyze locks you can see the types that are allocated you can get",
    "start": "1024889",
    "end": "1031459"
  },
  {
    "text": "information about the generations and like everything basically that's in the memory space you can get using CLR they",
    "start": "1031459",
    "end": "1038688"
  },
  {
    "text": "be MD sorry and it's actually available both for both for managed and native",
    "start": "1038689",
    "end": "1045019"
  },
  {
    "text": "applications so just take note of that now the good thing about CLR MD aside",
    "start": "1045019",
    "end": "1055760"
  },
  {
    "start": "1049000",
    "end": "1049000"
  },
  {
    "text": "from it's convenient API and it is very convenient that it's actually able to",
    "start": "1055760",
    "end": "1061490"
  },
  {
    "text": "attach to applications in a passive mode non-invasive and that means that the",
    "start": "1061490",
    "end": "1068330"
  },
  {
    "text": "same terms exists for when you attach the bugger to an application I think that when the bag asks you if you want",
    "start": "1068330",
    "end": "1074659"
  },
  {
    "text": "to attach passive were non passive and what it means is that if you",
    "start": "1074659",
    "end": "1079799"
  },
  {
    "text": "attached an application in a non-invasive manner then the time that",
    "start": "1079799",
    "end": "1085049"
  },
  {
    "text": "it pauses is going to be well non-existent or at the very least minimal and that's very important",
    "start": "1085049",
    "end": "1091350"
  },
  {
    "text": "because you're in production right you don't want to pause your application for too long because you're collecting",
    "start": "1091350",
    "end": "1097890"
  },
  {
    "text": "statistics you need to do work so that was an advantage of CLR MD if you're",
    "start": "1097890",
    "end": "1105059"
  },
  {
    "text": "willing to invest more time into your Diagnostics on production you can use",
    "start": "1105059",
    "end": "1111059"
  },
  {
    "text": "the CLR profiling api's they're much more extensive than what CLR MD provides",
    "start": "1111059",
    "end": "1118410"
  },
  {
    "text": "they give you a ton of information basically about anything that happens in your dotnet runtime so that's app",
    "start": "1118410",
    "end": "1125970"
  },
  {
    "text": "domains assembly loading JIT tread creation everything that's going on in",
    "start": "1125970",
    "end": "1132960"
  },
  {
    "text": "GC but as you can imagine it has quite a large overhead and even the official",
    "start": "1132960",
    "end": "1139049"
  },
  {
    "text": "documentation states that using the CLR profiling API is not supported on on",
    "start": "1139049",
    "end": "1145350"
  },
  {
    "text": "production for high availability systems so this is really a last resort if you",
    "start": "1145350",
    "end": "1154049"
  },
  {
    "text": "absolutely like all hell broke loose and you have to do something along with the",
    "start": "1154049",
    "end": "1160470"
  },
  {
    "text": "CLR profiling API there's also a sailor debugging API which again provides much",
    "start": "1160470",
    "end": "1166350"
  },
  {
    "text": "more functionality than what CLR MD does it actually allows you to set breakpoints to get notified about",
    "start": "1166350",
    "end": "1173490"
  },
  {
    "text": "exceptions to modify state really I don't think you're going to use it but",
    "start": "1173490",
    "end": "1179730"
  },
  {
    "text": "just felt like you know if I'm talking about the CLR profiling API I should probably mention the debugging API as",
    "start": "1179730",
    "end": "1185970"
  },
  {
    "text": "well and lastly there's always the option of hooking the API that you want",
    "start": "1185970",
    "end": "1192510"
  },
  {
    "text": "to monitor now the overhead of using hooks basically depends on the amount of work",
    "start": "1192510",
    "end": "1199890"
  },
  {
    "text": "that you're going to do inside the hook so I wrote it down as an invasive analysis API it is invasive it's very",
    "start": "1199890",
    "end": "1207000"
  },
  {
    "text": "invasive but it doesn't it doesn't have to be costly but the main problem with",
    "start": "1207000",
    "end": "1212580"
  },
  {
    "text": "hooks is that it's usually pretty hard to implement them like a hundred percent correctly and from my experience at",
    "start": "1212580",
    "end": "1220380"
  },
  {
    "text": "least when there are several software's on your machine the do hooks and for example anti",
    "start": "1220380",
    "end": "1227280"
  },
  {
    "text": "viruses tend to do that and like all sorts of security software do that if",
    "start": "1227280",
    "end": "1232620"
  },
  {
    "text": "it's not done a hundred percent correctly and all these applications kind of start clashing with each other and it doesn't end well so I don't",
    "start": "1232620",
    "end": "1241200"
  },
  {
    "text": "recommend doing that unless you absolutely have to and in general today we're not going to see examples of",
    "start": "1241200",
    "end": "1247710"
  },
  {
    "text": "anything on that slide both because it's too complicated and like I don't think",
    "start": "1247710",
    "end": "1253260"
  },
  {
    "text": "that you'd usually get to it we will see examples of etw and shield RMD which I",
    "start": "1253260",
    "end": "1259110"
  },
  {
    "text": "think are suitable for production and you can get lots of useful information from which finally gets us to ending all",
    "start": "1259110",
    "end": "1269100"
  },
  {
    "text": "the hand waving and the introductory stuff and we'll finally see some",
    "start": "1269100",
    "end": "1275910"
  },
  {
    "text": "examples of what can be done and what data we can get from our production",
    "start": "1275910",
    "end": "1281760"
  },
  {
    "text": "systems so the first thing we're going to see is CPU profiling now I have to I",
    "start": "1281760",
    "end": "1291630"
  },
  {
    "start": "1283000",
    "end": "1283000"
  },
  {
    "text": "was talking before how we do our own monitoring because it's going to be tailored and customized through our own",
    "start": "1291630",
    "end": "1297690"
  },
  {
    "text": "specific needs and like then all my demos are going to be generic stuff like CPU and memory and well first of all",
    "start": "1297690",
    "end": "1304830"
  },
  {
    "text": "because these are stuff although they're generic they're important but also because I just want to show you like the",
    "start": "1304830",
    "end": "1310410"
  },
  {
    "text": "general idea of what can be done and you obviously like there are a lot of people in the audience each of you probably has",
    "start": "1310410",
    "end": "1317130"
  },
  {
    "text": "different business needs so I want to show you the general stuff so that you can later use the tools and ideas that",
    "start": "1317130",
    "end": "1324090"
  },
  {
    "text": "alertly learn today and apply them to your own applications so back to CPU",
    "start": "1324090",
    "end": "1329640"
  },
  {
    "text": "profiling it's going to be relatively straightforward but I think that even",
    "start": "1329640",
    "end": "1336270"
  },
  {
    "text": "that is going to add a huge benefit to your applications imagine",
    "start": "1336270",
    "end": "1343520"
  },
  {
    "text": "that instead of the users calling you in complaining that the application is",
    "start": "1343520",
    "end": "1348980"
  },
  {
    "text": "hogging CPU and then and they don't know how to reproduce it like they don't know what happens right and so instead of you",
    "start": "1348980",
    "end": "1356750"
  },
  {
    "text": "having to immediately schedule a support meeting with them maybe one of them in",
    "start": "1356750",
    "end": "1362240"
  },
  {
    "text": "the states another in Australia another one somewhere in the Middle East so three different time zones you have to",
    "start": "1362240",
    "end": "1369350"
  },
  {
    "text": "get all the people together start attaching a profiler and like you need to get approval with a profiler on the",
    "start": "1369350",
    "end": "1375470"
  },
  {
    "text": "customers machine which is trust me it's not trivial so it's gets messy and imagine that the",
    "start": "1375470",
    "end": "1384590"
  },
  {
    "text": "application could just you know like write down in the in the log file here",
    "start": "1384590",
    "end": "1391880"
  },
  {
    "text": "and you know at this time at this date I used 80% CPU this is the function that",
    "start": "1391880",
    "end": "1400400"
  },
  {
    "text": "you know was cold most of the you know use 70% of the CPU and this one was 10",
    "start": "1400400",
    "end": "1405800"
  },
  {
    "text": "30 % of the CPU and here's all the data and you know like go fix it so that's a",
    "start": "1405800",
    "end": "1411800"
  },
  {
    "text": "huge thing and and especially huge on these desktop application scenarios that",
    "start": "1411800",
    "end": "1417290"
  },
  {
    "text": "I mentioned before because the environments of the users are so different and many times they really",
    "start": "1417290",
    "end": "1423110"
  },
  {
    "text": "don't know how to recreate the issue how to reproduce it you have no idea like they say I click this button and you you",
    "start": "1423110",
    "end": "1430550"
  },
  {
    "text": "know you click the button and everything is ok plus their machines are different they",
    "start": "1430550",
    "end": "1437210"
  },
  {
    "text": "have you know maybe they have two cores on your development machine you have eight cores so it's all very different",
    "start": "1437210",
    "end": "1443180"
  },
  {
    "text": "so this will allow you to just kind of get the answer that you were looking for",
    "start": "1443180",
    "end": "1449080"
  },
  {
    "text": "so that was little motivation let's let's actually start how are you going",
    "start": "1449080",
    "end": "1454100"
  },
  {
    "text": "to get about this so as I said before the first thing we're going to need to do is to monitor the basics right so a",
    "start": "1454100",
    "end": "1462170"
  },
  {
    "text": "simple numerical value representing the resource consumption and in our case that CPU usage so we're going to use",
    "start": "1462170",
    "end": "1469670"
  },
  {
    "text": "performance counters to monitor that there's a performance counter which provides CPU usage for every application",
    "start": "1469670",
    "end": "1476420"
  },
  {
    "text": "on our machine and we could for example you might have",
    "start": "1476420",
    "end": "1481500"
  },
  {
    "text": "a better logic like on your machines but what I'm lamented in the demo that we're about to see is that for example if the",
    "start": "1481500",
    "end": "1488220"
  },
  {
    "text": "application uses more than I don't know say 80% CPU over 10 seconds then you",
    "start": "1488220",
    "end": "1498090"
  },
  {
    "text": "know something is wrong let's start getting more data and what this data is",
    "start": "1498090",
    "end": "1505950"
  },
  {
    "text": "going to be is that it's going to be data from etw I didn't tell it to you",
    "start": "1505950",
    "end": "1511560"
  },
  {
    "text": "before but etw is actually able to provide me with call stacks for each of",
    "start": "1511560",
    "end": "1518160"
  },
  {
    "text": "the events that it emits and so in fact by simply sampling the CPU every say 100",
    "start": "1518160",
    "end": "1525750"
  },
  {
    "text": "milliseconds I can get a pretty good sample of what the application is doing",
    "start": "1525750",
    "end": "1532400"
  },
  {
    "text": "and this is in fact the same result that you would get by attaching a sampling profiler to your application so we're",
    "start": "1532400",
    "end": "1541050"
  },
  {
    "text": "going to turn on etw and collect these call stacks for a while now usually what",
    "start": "1541050",
    "end": "1546930"
  },
  {
    "text": "you would do with etw is that you would record it into a file and pass it to",
    "start": "1546930",
    "end": "1552330"
  },
  {
    "text": "development for analysis in you know some freely available etw tools but",
    "start": "1552330",
    "end": "1557490"
  },
  {
    "text": "using an open source project which is available on github called live stacks you can actually translate the program",
    "start": "1557490",
    "end": "1568250"
  },
  {
    "text": "pointers the addresses memory into real function names and so you will be able",
    "start": "1568250",
    "end": "1576570"
  },
  {
    "text": "to figure out these call stacks live on production and actually print them out",
    "start": "1576570",
    "end": "1582540"
  },
  {
    "text": "to the log file making the developers lives very very easy so once you have",
    "start": "1582540",
    "end": "1589740"
  },
  {
    "text": "these call stacks you can find of course the hot paths of your application you",
    "start": "1589740",
    "end": "1595110"
  },
  {
    "text": "can produce flame graphs and you can even suggest some recommendations for",
    "start": "1595110",
    "end": "1601320"
  },
  {
    "text": "what can be done to solve the issue now if you're wondering well what on earth",
    "start": "1601320",
    "end": "1606420"
  },
  {
    "text": "can we suggest how can we fix the problem so here are a few examples just like a few",
    "start": "1606420",
    "end": "1614610"
  },
  {
    "text": "things at the top of my head let's say that your authentication controller is taking a lot of CPU time you might be",
    "start": "1614610",
    "end": "1622530"
  },
  {
    "text": "getting attacked alright you might be getting DDOS'd so that's interesting",
    "start": "1622530",
    "end": "1627990"
  },
  {
    "text": "information if you know where the CPU is coming from it might give you hints as to what the problem is or maybe you have",
    "start": "1627990",
    "end": "1635340"
  },
  {
    "text": "some data processing component in your application that suddenly take in a hundred percent CPU okay so a good",
    "start": "1635340",
    "end": "1642990"
  },
  {
    "text": "recommendation might be to scale and in fact if you can even do that automatically the scaling based on your",
    "start": "1642990",
    "end": "1649590"
  },
  {
    "text": "CPU consumption how cool would that be right so we have automation all the way",
    "start": "1649590",
    "end": "1654600"
  },
  {
    "text": "DevOps for the whim and you know at the very least if you don't have anything",
    "start": "1654600",
    "end": "1660600"
  },
  {
    "text": "smart to say then you can say well okay there's a problem please reports to develop and hear all",
    "start": "1660600",
    "end": "1668730"
  },
  {
    "text": "the details or you can even you know if you're connected to the Internet you can even no report it yourself from the",
    "start": "1668730",
    "end": "1674940"
  },
  {
    "text": "application with all in all of the information and hope that the developers will know what to do and again I'm sure",
    "start": "1674940",
    "end": "1682650"
  },
  {
    "text": "that you will have more ideas that are more relevant for your lines of business okey dokey so let's look at some code",
    "start": "1682650",
    "end": "1693050"
  },
  {
    "text": "okay let's look at some code so we have a web application here here is amazing",
    "start": "1696800",
    "end": "1704820"
  },
  {
    "text": "web application doesn't do doesn't do a",
    "start": "1704820",
    "end": "1710130"
  },
  {
    "text": "lot of interesting stuff just some fine",
    "start": "1710130",
    "end": "1715140"
  },
  {
    "text": "Taylor demos with problems that we're going to encounter today so we're going",
    "start": "1715140",
    "end": "1720690"
  },
  {
    "text": "to start looking at the CPU let's first look at the code for the CPU usage",
    "start": "1720690",
    "end": "1726000"
  },
  {
    "text": "monitor and then we'll run the application and see what happens",
    "start": "1726000",
    "end": "1731990"
  },
  {
    "text": "can everybody see the phone like right back in the end no you can't right I was hoping it was too small",
    "start": "1732470",
    "end": "1739280"
  },
  {
    "text": "hoping now I was afraid it was too small sorry is that",
    "start": "1739280",
    "end": "1745680"
  },
  {
    "text": "so we have our CPU monitor before we",
    "start": "1745680",
    "end": "1752980"
  },
  {
    "text": "look at the CPU monitor let's just look at some base classes that we have here",
    "start": "1752980",
    "end": "1758130"
  },
  {
    "text": "I'm not sure that like code wise this is the best design so don't necessarily go",
    "start": "1758130",
    "end": "1764590"
  },
  {
    "text": "copying it the way it is it's just something for the demos but here the",
    "start": "1764590",
    "end": "1771760"
  },
  {
    "text": "idea is that we have like this general concept of a monitor which is something",
    "start": "1771760",
    "end": "1777460"
  },
  {
    "text": "that samples something and wait for a",
    "start": "1777460",
    "end": "1785430"
  },
  {
    "text": "certain number of violations so for example in our case it would be sampling",
    "start": "1785430",
    "end": "1792730"
  },
  {
    "text": "the CPU performance counter every gosh I don't remember few milliseconds and if",
    "start": "1792730",
    "end": "1800290"
  },
  {
    "text": "it passes 80 90 whatever percent then we",
    "start": "1800290",
    "end": "1808120"
  },
  {
    "text": "start doing some intensive sampling okay so this is the base class it does",
    "start": "1808120",
    "end": "1814930"
  },
  {
    "text": "nothing so there's nothing inside here but here we can see the implementation",
    "start": "1814930",
    "end": "1820480"
  },
  {
    "text": "so we have the performance counter and we have a timer which samples the",
    "start": "1820480",
    "end": "1826450"
  },
  {
    "text": "counter every interval and we can see",
    "start": "1826450",
    "end": "1832330"
  },
  {
    "text": "that here we sample the counter using the next value API and we count the",
    "start": "1832330",
    "end": "1838870"
  },
  {
    "text": "number of thresholds and if we passed the number of violations if we passed",
    "start": "1838870",
    "end": "1845860"
  },
  {
    "text": "the threshold but we're never supposed to pass then we start our intensive",
    "start": "1845860",
    "end": "1853740"
  },
  {
    "text": "sampling or intensive data collection and so again in this case the intensive",
    "start": "1853740",
    "end": "1859810"
  },
  {
    "text": "data collection basically does nothing this is the base class it just calls",
    "start": "1859810",
    "end": "1865300"
  },
  {
    "text": "start then stop and then it marks that we're done and again in this base class",
    "start": "1865300",
    "end": "1871480"
  },
  {
    "text": "it just does not so our case is the CPU monitor",
    "start": "1871480",
    "end": "1877570"
  },
  {
    "text": "which is so we can see here that it uses the performance counter from the",
    "start": "1877570",
    "end": "1882909"
  },
  {
    "text": "processor group the percentage of processor time that's what we're going",
    "start": "1882909",
    "end": "1887919"
  },
  {
    "text": "to monitor and this is the threshold that we want to monitor for but this",
    "start": "1887919",
    "end": "1894159"
  },
  {
    "text": "specific monitor it actually inherits not from the base monitor but from the event stack monitor and you can",
    "start": "1894159",
    "end": "1900489"
  },
  {
    "text": "understand from the name what it does and this monitor actually takes samples",
    "start": "1900489",
    "end": "1906009"
  },
  {
    "text": "of the stack of the CPU stocks when on",
    "start": "1906009",
    "end": "1912489"
  },
  {
    "text": "the intensive mode so let's look there so this is a type of monitor again and",
    "start": "1912489",
    "end": "1921330"
  },
  {
    "text": "here is what we do when we start our intensive sampling we're not going to go",
    "start": "1921330",
    "end": "1930190"
  },
  {
    "text": "over the entire code it's available on github and specifically live session is",
    "start": "1930190",
    "end": "1935739"
  },
  {
    "text": "copied from the live stacks project that I told you about I just want to show you",
    "start": "1935739",
    "end": "1941259"
  },
  {
    "text": "the general idea like the data flow that goes on because talking about you know",
    "start": "1941259",
    "end": "1947379"
  },
  {
    "text": "reading etw and parsing stacks can take an entire hour on its own so you're not",
    "start": "1947379",
    "end": "1953139"
  },
  {
    "text": "gonna dive into that just know that it's copied from the live stacks project then it works so what we do when we want to",
    "start": "1953139",
    "end": "1961299"
  },
  {
    "text": "start the intensive sampling is that we start an etw session and in this case",
    "start": "1961299",
    "end": "1969129"
  },
  {
    "text": "this is the base class the CTW session is just going to collect call stacks",
    "start": "1969129",
    "end": "1974769"
  },
  {
    "text": "it's going to sample the CPU every 100 milliseconds and when we stop the",
    "start": "1974769",
    "end": "1980830"
  },
  {
    "text": "session after a sampling duration we",
    "start": "1980830",
    "end": "1985929"
  },
  {
    "text": "will just be able to get a call stack tree representing everything that",
    "start": "1985929",
    "end": "1991479"
  },
  {
    "text": "happened in the application in that time and so this session that we created here",
    "start": "1991479",
    "end": "1997389"
  },
  {
    "text": "actually also has a property stacks which provides us with the top stacks so",
    "start": "1997389",
    "end": "2004289"
  },
  {
    "text": "these are the top usage stacks the stacks that used most CPU during that",
    "start": "2004289",
    "end": "2010950"
  },
  {
    "text": "time and what we do is just print them to our log file so let's see that in action",
    "start": "2010950",
    "end": "2019159"
  },
  {
    "text": "I have perfmon here it's monitoring my IAS application which in the meantime stopped running so I will start it again",
    "start": "2019159",
    "end": "2028959"
  },
  {
    "text": "excuse me starting it again okay here it's running",
    "start": "2032440",
    "end": "2042049"
  },
  {
    "text": "and I have perfmon perfmon is just a tool that comes with Windows and it",
    "start": "2042049",
    "end": "2047359"
  },
  {
    "text": "allows me to monitor performance counters which I select so we can see them here",
    "start": "2047359",
    "end": "2052638"
  },
  {
    "text": "I'm sorry it's a little small I don't know how to make it larger but we monitor the processor time that's the",
    "start": "2052639",
    "end": "2060888"
  },
  {
    "text": "blue line here that we see so I am going to login into my website and we will see",
    "start": "2060889",
    "end": "2077000"
  },
  {
    "text": "right away that CPU has gone up to basically a hundred percent so so",
    "start": "2077000",
    "end": "2085789"
  },
  {
    "text": "there's something going on here and it was bad it was unexpected and our",
    "start": "2085789",
    "end": "2091789"
  },
  {
    "text": "monitor is going to catch that so let's look at the log file this is I have to",
    "start": "2091789",
    "end": "2098720"
  },
  {
    "text": "admit this is a log file that I created before before the talk because now all",
    "start": "2098720",
    "end": "2104690"
  },
  {
    "text": "the monitors are turned on and I wanted to have a log file for each monitor just",
    "start": "2104690",
    "end": "2110539"
  },
  {
    "text": "so it's easier for us to understand what's going on but it works so this is",
    "start": "2110539",
    "end": "2116960"
  },
  {
    "text": "a real log I didn't manufacture anything so let's see this is the start",
    "start": "2116960",
    "end": "2124400"
  },
  {
    "text": "everything is fine there was one one violation of CPU second violation of CPU",
    "start": "2124400",
    "end": "2132380"
  },
  {
    "text": "and third violation of CPU and that kicked in the etw collection for CPU",
    "start": "2132380",
    "end": "2140089"
  },
  {
    "text": "stacks and here are the top three stacks that were gathered during intensive",
    "start": "2140089",
    "end": "2146290"
  },
  {
    "text": "sampling so let's start looking at them we'll just scroll quickly to where the",
    "start": "2146290",
    "end": "2152380"
  },
  {
    "text": "important and interesting things are so the first stack here and this is",
    "start": "2152380",
    "end": "2158290"
  },
  {
    "text": "actually we're going to talk about it later the first stack is actually for the monitoring code itself which is a little",
    "start": "2158290",
    "end": "2166900"
  },
  {
    "text": "sad I know but this is a very weak machine it's a VM it's on my Mac it",
    "start": "2166900",
    "end": "2174010"
  },
  {
    "text": "doesn't work very well and I will talk a little more about it later so if we go",
    "start": "2174010",
    "end": "2179680"
  },
  {
    "text": "down more we see more stacks and and this is actually this is actually",
    "start": "2179680",
    "end": "2185020"
  },
  {
    "text": "interesting I'm not sure if there is much to do about it can you see the font at the end by the",
    "start": "2185020",
    "end": "2190150"
  },
  {
    "text": "way good so this stack is actually from asp.net",
    "start": "2190150",
    "end": "2197980"
  },
  {
    "text": "itself and so I'm not sure if like there's I'm on asp.net expert so I'm not",
    "start": "2197980",
    "end": "2204010"
  },
  {
    "text": "sure if there's anything we can do about that but I think it's interesting information to see that like building",
    "start": "2204010",
    "end": "2210340"
  },
  {
    "text": "the controller or whatever it is that it was doing here took a lot of time and so",
    "start": "2210340",
    "end": "2216070"
  },
  {
    "text": "we scroll down and the log and oh there were more CPU violations and finally we",
    "start": "2216070",
    "end": "2226170"
  },
  {
    "text": "find our own code in these call stacks and what we can see here is that account",
    "start": "2226170",
    "end": "2234010"
  },
  {
    "text": "controller called a good hash function so the name is already suspicious right",
    "start": "2234010",
    "end": "2239470"
  },
  {
    "text": "we calculated hash might take time right let's look at the code and see if",
    "start": "2239470",
    "end": "2245740"
  },
  {
    "text": "there's anything there to explain what was going on so let's open our good hash",
    "start": "2245740",
    "end": "2252160"
  },
  {
    "text": "function here it is and it indeed",
    "start": "2252160",
    "end": "2260170"
  },
  {
    "text": "calculates a hash but maybe it's like it's not clear this is a lot of",
    "start": "2260170",
    "end": "2267460"
  },
  {
    "text": "iterations for for calculating hash so that explains why it took such a long",
    "start": "2267460",
    "end": "2274420"
  },
  {
    "text": "time but we're not sure why it was called so I mean this has to do more with like",
    "start": "2274420",
    "end": "2280240"
  },
  {
    "text": "knowing your own code but we can see that in our specific example only emails",
    "start": "2280240",
    "end": "2285460"
  },
  {
    "text": "that end with Gmail call the good hash function so we have a CPU hog in our",
    "start": "2285460",
    "end": "2294910"
  },
  {
    "text": "code and we found it because the log actually contained the data saying which function was using all that CPU and I",
    "start": "2294910",
    "end": "2302140"
  },
  {
    "text": "think it's pretty cool okay so our next",
    "start": "2302140",
    "end": "2307690"
  },
  {
    "start": "2305000",
    "end": "2305000"
  },
  {
    "text": "example is going to be about monitoring for GC performance or in fact not",
    "start": "2307690",
    "end": "2315040"
  },
  {
    "text": "exactly GC performance but rather certain usage of memory traffic in our",
    "start": "2315040",
    "end": "2323230"
  },
  {
    "text": "application then can lead to GC performance and specifically what we're going to monitor is the is the",
    "start": "2323230",
    "end": "2332530"
  },
  {
    "text": "allocations the rate of allocations that our application does and the reason that",
    "start": "2332530",
    "end": "2338620"
  },
  {
    "text": "I want to monitor that is that again if we have too much allocation then we might cause long GC pauses and these are",
    "start": "2338620",
    "end": "2346540"
  },
  {
    "text": "very important to avoid of course in servers where we have to answer requests",
    "start": "2346540",
    "end": "2352690"
  },
  {
    "text": "we can't we can't allow ourselves to stop for a long time but it's also very",
    "start": "2352690",
    "end": "2358420"
  },
  {
    "text": "important in those simple desktop application they keep coming back to because imagine a UI that has hiccups",
    "start": "2358420",
    "end": "2366670"
  },
  {
    "text": "because of long GC problems users are not going to like that in a sense I mean",
    "start": "2366670",
    "end": "2373480"
  },
  {
    "text": "I like I'm not sure but like as a user myself I think that when I you I get",
    "start": "2373480",
    "end": "2378640"
  },
  {
    "text": "stuck it's more frustrating for me than like having to wait for Google to return",
    "start": "2378640",
    "end": "2383980"
  },
  {
    "text": "results I don't know because like you know the server is doing something ok I don't know it takes a while but when new",
    "start": "2383980",
    "end": "2390040"
  },
  {
    "text": "UI is stuck it's really annoying so we needed to avoid that and I want to be able to monitor for such potential",
    "start": "2390040",
    "end": "2397690"
  },
  {
    "text": "problems in our applications so very similarly to what we did with the CPU",
    "start": "2397690",
    "end": "2403000"
  },
  {
    "text": "we're going to monitor the rate of allocations performance counter and when",
    "start": "2403000",
    "end": "2409540"
  },
  {
    "text": "it exceeds threshold again similarly to what we did with a CPU we can use more data from",
    "start": "2409540",
    "end": "2417940"
  },
  {
    "text": "other sources to get more information so for example we can use etw to get",
    "start": "2417940",
    "end": "2423910"
  },
  {
    "text": "information about GC and about allocations we can actually get information about all the allocations",
    "start": "2423910",
    "end": "2430299"
  },
  {
    "text": "that happen in our application what type is allocated what's the size of their locations we can also get information",
    "start": "2430299",
    "end": "2437770"
  },
  {
    "text": "from etw about GCS about how long GC takes about how many GCS we have about",
    "start": "2437770",
    "end": "2444880"
  },
  {
    "text": "what kind they are what generation how much memory was reclaimed how much memory was promoted and we can even",
    "start": "2444880",
    "end": "2452559"
  },
  {
    "text": "attach and we're going to see CLR MD in action with this demo we can attach CLR MD to analyze the heap and see even more",
    "start": "2452559",
    "end": "2461589"
  },
  {
    "text": "information about what's going on inside our application how many instances we",
    "start": "2461589",
    "end": "2468130"
  },
  {
    "text": "have of each type what's the type of the memory what segments we have and so on",
    "start": "2468130",
    "end": "2474390"
  },
  {
    "text": "so let's see that in action this time",
    "start": "2474390",
    "end": "2480040"
  },
  {
    "text": "we're going to look at sorry not the leak the lock monitor so a lock monitor",
    "start": "2480040",
    "end": "2488200"
  },
  {
    "text": "is again it's inheriting the event stacks monitor because we're also going",
    "start": "2488200",
    "end": "2495579"
  },
  {
    "text": "to be interested in stacks but this time it's not going to be CPU stacks it's",
    "start": "2495579",
    "end": "2501309"
  },
  {
    "text": "going to be the stacks of where allocations are made because the egw",
    "start": "2501309",
    "end": "2508450"
  },
  {
    "text": "provider that we're going to turn on is the one providing us with information about allocations and as I said etw is",
    "start": "2508450",
    "end": "2516369"
  },
  {
    "text": "able to provide a call stack for each of its events so this time the events are of allocations and so the call stacks",
    "start": "2516369",
    "end": "2523210"
  },
  {
    "text": "are going to be of the allocations and we will also have information about the",
    "start": "2523210",
    "end": "2528700"
  },
  {
    "text": "type and the size as we will see in a moment so let's just quickly have a look",
    "start": "2528700",
    "end": "2534880"
  },
  {
    "text": "like in the CPU monitoring we're going to monitor the basic data using",
    "start": "2534880",
    "end": "2542859"
  },
  {
    "text": "performance counters use we are located by its per second performance counter and once we pass",
    "start": "2542859",
    "end": "2550089"
  },
  {
    "text": "this threshold we are going to invoke the intensive mode data collection and",
    "start": "2550089",
    "end": "2559359"
  },
  {
    "text": "as I said in this case what we're going to be interested in is the event of",
    "start": "2559359",
    "end": "2565740"
  },
  {
    "text": "allocation and let's see what happens",
    "start": "2565740",
    "end": "2571329"
  },
  {
    "text": "here each time we get an allocation event the type of the data is GC",
    "start": "2571329",
    "end": "2579460"
  },
  {
    "text": "allocation ticket race data whatever but it has some interesting properties for",
    "start": "2579460",
    "end": "2585369"
  },
  {
    "text": "example it has a property of the allocation amount and it has a property",
    "start": "2585369",
    "end": "2590800"
  },
  {
    "text": "of the type that is allocated the name of the type and so what we're going to",
    "start": "2590800",
    "end": "2596890"
  },
  {
    "text": "do is that we're going to keep this dictionary here Alex per type which will",
    "start": "2596890",
    "end": "2603700"
  },
  {
    "text": "tell us how many allocations we did throughout the time of the intensive",
    "start": "2603700",
    "end": "2610180"
  },
  {
    "text": "sampling from each of the types in our application so like in the end you would",
    "start": "2610180",
    "end": "2615760"
  },
  {
    "text": "know we had 10k of strings 1k of ends and I don't know a hundred mega of byte",
    "start": "2615760",
    "end": "2624040"
  },
  {
    "text": "arrays or something like that so that's the data that we are going to collect",
    "start": "2624040",
    "end": "2631359"
  },
  {
    "text": "throughout our intensive mower and when we're done what we're going to do is",
    "start": "2631359",
    "end": "2637480"
  },
  {
    "text": "that we can just take all of these allocations order them by the size and",
    "start": "2637480",
    "end": "2646290"
  },
  {
    "text": "print them to our log specifying the",
    "start": "2646290",
    "end": "2651430"
  },
  {
    "text": "most allocated types during the intensive mode another thing that we can",
    "start": "2651430",
    "end": "2657130"
  },
  {
    "text": "do is to print the heap breakdown now what's the difference the allocations",
    "start": "2657130",
    "end": "2664660"
  },
  {
    "text": "data were allocations that happened in those five seconds of intensive mode but",
    "start": "2664660",
    "end": "2671380"
  },
  {
    "text": "the heap breakdown can also provide information about what's going on in the heap like this moment",
    "start": "2671380",
    "end": "2678309"
  },
  {
    "text": "because maybe there were things that were allocated before we started at the intensive mode so it's also interesting",
    "start": "2678309",
    "end": "2683349"
  },
  {
    "text": "to see what's in the heap right now that didn't start like five seconds ago but",
    "start": "2683349",
    "end": "2688890"
  },
  {
    "text": "from the beginning of when our application began running so again I'm",
    "start": "2688890",
    "end": "2695499"
  },
  {
    "text": "not going to go deep inside the code but the idea is as we attach data target is",
    "start": "2695499",
    "end": "2700539"
  },
  {
    "text": "a steal our MD type we attach it to our process and and then we have you know",
    "start": "2700539",
    "end": "2706509"
  },
  {
    "text": "all sorts of useful properties like for example the total heap size or the size",
    "start": "2706509",
    "end": "2712089"
  },
  {
    "text": "of jens zero or the size of Gen 2 and we can just enumerate all of the objects in",
    "start": "2712089",
    "end": "2719619"
  },
  {
    "text": "the heap and I'm not going to go inside this very long link doesn't really",
    "start": "2719619",
    "end": "2726939"
  },
  {
    "text": "matter its technical but the point is that we can traverse the heap get types",
    "start": "2726939",
    "end": "2733930"
  },
  {
    "text": "by name get their sizes get all the objects sum them up so we know like the",
    "start": "2733930",
    "end": "2741489"
  },
  {
    "text": "total amount of strings that we now have the total amount of byte arrays and we can order them and we can print them to",
    "start": "2741489",
    "end": "2748569"
  },
  {
    "text": "our log so let's see that here we have",
    "start": "2748569",
    "end": "2754959"
  },
  {
    "text": "our perfmon and I will try to make it make a lot of allocations so I'll just",
    "start": "2754959",
    "end": "2762670"
  },
  {
    "text": "go to the about page oh that's sad out",
    "start": "2762670",
    "end": "2767890"
  },
  {
    "text": "of memory yeah let's start it again don't have a lot of time okay bout bout",
    "start": "2767890",
    "end": "2779130"
  },
  {
    "text": "about let's see okay good so the green",
    "start": "2779130",
    "end": "2784779"
  },
  {
    "text": "graph is the number of allocations in it spiked we have a lot of allocations",
    "start": "2784779",
    "end": "2790869"
  },
  {
    "text": "right this moment and and now it calms down but like while I was going to the",
    "start": "2790869",
    "end": "2796299"
  },
  {
    "text": "about page it caused a lot of allocations so let's look at the log and",
    "start": "2796299",
    "end": "2805029"
  },
  {
    "text": "so again everything is okay everything is okay and then we start getting",
    "start": "2805029",
    "end": "2811269"
  },
  {
    "text": "violations so here we actually got two violations and then the allocations went back down",
    "start": "2811269",
    "end": "2816640"
  },
  {
    "text": "so the counter restarted but then just right after that we got we got three",
    "start": "2816640",
    "end": "2822820"
  },
  {
    "text": "consecutive violations and so we invoked our intensive collection mode and here",
    "start": "2822820",
    "end": "2829840"
  },
  {
    "text": "is the first call stack that caused the largest amount of allocations and we can",
    "start": "2829840",
    "end": "2836980"
  },
  {
    "text": "see straight away that it comes from string concatenation which comes from",
    "start": "2836980",
    "end": "2842560"
  },
  {
    "text": "our own home controller about and we can look at the code and we can see that we",
    "start": "2842560",
    "end": "2851860"
  },
  {
    "text": "do some sort of xml processing here and so it's probably not the most efficient",
    "start": "2851860",
    "end": "2859600"
  },
  {
    "text": "code and we have a lot of string concatenation z' and we know that that causes a lot of intermediate objects and",
    "start": "2859600",
    "end": "2865390"
  },
  {
    "text": "so we have this allocation spike let's look what else our log was able to tell",
    "start": "2865390",
    "end": "2872230"
  },
  {
    "text": "us so first of all straight ahead here's the problem very cool",
    "start": "2872230",
    "end": "2877540"
  },
  {
    "text": "let's also look at the statistics okay",
    "start": "2877540",
    "end": "2885490"
  },
  {
    "text": "here we have the statistics so we know how many allocations we had during the",
    "start": "2885490",
    "end": "2890920"
  },
  {
    "text": "intensive mode so of course most allocations were from string but we also",
    "start": "2890920",
    "end": "2896320"
  },
  {
    "text": "had some others it might be interesting to know and here is the total heap",
    "start": "2896320",
    "end": "2902650"
  },
  {
    "text": "breakdown and of course most of the objects are strings problem solved",
    "start": "2902650",
    "end": "2912420"
  },
  {
    "start": "2913000",
    "end": "2913000"
  },
  {
    "text": "our next demo is also going to be about memory but from the much-feared scenario",
    "start": "2913350",
    "end": "2918880"
  },
  {
    "text": "of a memory leak so again it's going to be very similar we're going to be",
    "start": "2918880",
    "end": "2924220"
  },
  {
    "text": "monitoring the total size of the memory this time because we want to know that there's a week now in this case though",
    "start": "2924220",
    "end": "2931090"
  },
  {
    "text": "there's not much point and looking at call stacks because we just like",
    "start": "2931090",
    "end": "2936280"
  },
  {
    "text": "basically need to know what's going on inside the heap and we want to diagnose",
    "start": "2936280",
    "end": "2941290"
  },
  {
    "text": "a memory leak and a memory leak is",
    "start": "2941290",
    "end": "2946140"
  },
  {
    "text": "by a difference that like going on over time in our application so what we can",
    "start": "2946809",
    "end": "2953980"
  },
  {
    "text": "do is that we can take several snapshots of our application and compare using CLR",
    "start": "2953980",
    "end": "2959799"
  },
  {
    "text": "MD which you already saw that it has access to the heap and all the information all the object information",
    "start": "2959799",
    "end": "2964990"
  },
  {
    "text": "and compare the snapshots and find the objects that weren't released from",
    "start": "2964990",
    "end": "2972039"
  },
  {
    "text": "between the snapshots so let's look at that excuse me leak monitor so again",
    "start": "2972039",
    "end": "2986859"
  },
  {
    "text": "this we don't need coal stacks here so it's just a monitor and it's monitors the bytes in all heaps performance",
    "start": "2986859",
    "end": "2994809"
  },
  {
    "text": "counter and what it does in the intensive mode is that it simply takes a",
    "start": "2994809",
    "end": "3003000"
  },
  {
    "text": "heap snapshot several times from our application in the slope here using",
    "start": "3003000",
    "end": "3011869"
  },
  {
    "text": "using CLR MD now note that before taking",
    "start": "3011869",
    "end": "3016980"
  },
  {
    "text": "a heap snapshot we call GC collect and that's because if we want to compare",
    "start": "3016980",
    "end": "3022079"
  },
  {
    "text": "which objects weren't released we need to make sure it's kind of like a clean heap snapshot because we don't want to",
    "start": "3022079",
    "end": "3032940"
  },
  {
    "text": "take into account objects that are about to be released anyway so we take a",
    "start": "3032940",
    "end": "3040020"
  },
  {
    "text": "snapshot wait a little take another snapshot wait a little and after we're",
    "start": "3040020",
    "end": "3045630"
  },
  {
    "text": "done with that we just compare all of the snapshots to each other so again",
    "start": "3045630",
    "end": "3052859"
  },
  {
    "text": "I'll just show you really quickly there's a big link query here basically",
    "start": "3052859",
    "end": "3061200"
  },
  {
    "text": "what it does is again it creates like dictionaries by type of the number of",
    "start": "3061200",
    "end": "3066750"
  },
  {
    "text": "objects and the that's the number of objects and the total size that these",
    "start": "3066750",
    "end": "3072390"
  },
  {
    "text": "objects take in the memory and once we have these two dictionaries for each of",
    "start": "3072390",
    "end": "3077880"
  },
  {
    "text": "the snapshots its really easy to just like go over them and this may calculate the difference",
    "start": "3077880",
    "end": "3085400"
  },
  {
    "text": "between them I won't go over that because first its technical and second we don't have much time",
    "start": "3085400",
    "end": "3092070"
  },
  {
    "text": "and also I'm afraid that because of the time I won't show you the demo live but like believe me that there's a certain",
    "start": "3092070",
    "end": "3100050"
  },
  {
    "text": "page that I can go to and it's going to you know what I have to show it to you",
    "start": "3100050",
    "end": "3105710"
  },
  {
    "text": "so okay we have our perfmon here maybe we should start again to make it clean",
    "start": "3105710",
    "end": "3112920"
  },
  {
    "text": "[Music] okay here we have our perfmon it's nice",
    "start": "3112920",
    "end": "3123810"
  },
  {
    "text": "and clean and I will try to register",
    "start": "3123810",
    "end": "3129680"
  },
  {
    "text": "and let's see what happens here so the bytes in all heaps is the red graph and",
    "start": "3140140",
    "end": "3146010"
  },
  {
    "text": "you can see that it's growing see every",
    "start": "3146010",
    "end": "3152530"
  },
  {
    "text": "few seconds it grows so we have a memory leak let's look at the code at the log",
    "start": "3152530",
    "end": "3158230"
  },
  {
    "text": "file leak okay so again like before at first everything",
    "start": "3158230",
    "end": "3167170"
  },
  {
    "text": "was okay memory was pretty pretty flat",
    "start": "3167170",
    "end": "3173070"
  },
  {
    "text": "and then suddenly it passed the threshold that we defined so it invoked",
    "start": "3173070",
    "end": "3180250"
  },
  {
    "text": "the intensive sampling mode and it calculated all those dictionaries and it",
    "start": "3180250",
    "end": "3185800"
  },
  {
    "text": "took three snapshots and differentiated between them and what we got here is the",
    "start": "3185800",
    "end": "3191410"
  },
  {
    "text": "well they're sorted by by size so the most memory consuming type that we have",
    "start": "3191410",
    "end": "3200170"
  },
  {
    "text": "are byte array is byte array and so in the beginning there were 26 of them and",
    "start": "3200170",
    "end": "3207250"
  },
  {
    "text": "this was the amount of memory that they consumed and then in the second snapshot",
    "start": "3207250",
    "end": "3212920"
  },
  {
    "text": "we already had a hundred and sixty six of them and this was the amount of",
    "start": "3212920",
    "end": "3218230"
  },
  {
    "text": "memory that they consumed so it grew now here of course the log is not able to",
    "start": "3218230",
    "end": "3225130"
  },
  {
    "text": "tell me well this is the leak right like I need to know my own code and indeed if",
    "start": "3225130",
    "end": "3231130"
  },
  {
    "text": "I go to the code to the account controller which is what caused the leak",
    "start": "3231130",
    "end": "3238290"
  },
  {
    "text": "and I searched for a byte array this is",
    "start": "3238290",
    "end": "3243760"
  },
  {
    "text": "not the one then I can see that we have this byte array which is for some reason",
    "start": "3243760",
    "end": "3250980"
  },
  {
    "text": "created every 200 milliseconds and added to this static list so of course it's",
    "start": "3250980",
    "end": "3259120"
  },
  {
    "text": "not a real-life example but this is indeed a leak and we were able to see in the log that what we leaked or byte",
    "start": "3259120",
    "end": "3265450"
  },
  {
    "text": "arrays and once we have that data we can now go back to the code and try to find",
    "start": "3265450",
    "end": "3270610"
  },
  {
    "text": "the actual source of the problem the last demo that we're going to see today is the case of a deadlock",
    "start": "3270610",
    "end": "3278980"
  },
  {
    "start": "3274000",
    "end": "3274000"
  },
  {
    "text": "now deadlocks are a tiny bit more complicated to diagnose or maybe not",
    "start": "3278980",
    "end": "3286210"
  },
  {
    "text": "more complicated but like memory monitoring is a little more straightforward because there is no",
    "start": "3286210",
    "end": "3292299"
  },
  {
    "text": "single numerical value which tells us that there is a deadlock right so we",
    "start": "3292299",
    "end": "3297819"
  },
  {
    "text": "need to kind of think about it what in our application could represent",
    "start": "3297819",
    "end": "3302859"
  },
  {
    "text": "a possible potential deadlock which knew easy to calculate numeric value",
    "start": "3302859",
    "end": "3308920"
  },
  {
    "text": "represents such a case so here I have a few ideas you might have more for",
    "start": "3308920",
    "end": "3314349"
  },
  {
    "text": "example if your application is only using very low CPU you might be bad locked if your requests start timeing",
    "start": "3314349",
    "end": "3320950"
  },
  {
    "text": "out then maybe like the tread the handling tread is is blocked or maybe",
    "start": "3320950",
    "end": "3327280"
  },
  {
    "text": "your tread pool suddenly creates more and more treads than maybe that's because other treads are blocked and so",
    "start": "3327280",
    "end": "3334599"
  },
  {
    "text": "it has to create more of them in order to handle whatever it is that it's handling so these are all examples again",
    "start": "3334599",
    "end": "3341500"
  },
  {
    "text": "you might think of more but I think what's more interesting here is that you can actually diagnose the deadlock once",
    "start": "3341500",
    "end": "3348579"
  },
  {
    "text": "you suspect there's a deadlock you can check it you can check it using CLR MD",
    "start": "3348579",
    "end": "3353890"
  },
  {
    "text": "so far we saw how we traverse the heap but you can also get stack information",
    "start": "3353890",
    "end": "3359950"
  },
  {
    "text": "and blocking objects information about each tread and so by simply traversing",
    "start": "3359950",
    "end": "3367510"
  },
  {
    "text": "all of the treads and doing a simple search you can find out if you have a deadlock now in the case of a deadlock",
    "start": "3367510",
    "end": "3374290"
  },
  {
    "text": "I'm not sure there's you know something you can do pray for a miracle I don't know but at the very least you",
    "start": "3374290",
    "end": "3381040"
  },
  {
    "text": "can totally log-log it and you know and report it to development so let's see",
    "start": "3381040",
    "end": "3388588"
  },
  {
    "text": "good I have the deadlock monitor so I didn't",
    "start": "3391020",
    "end": "3397150"
  },
  {
    "text": "implement the performance counter monitoring because we saw a lot of it and it's less interesting in this case",
    "start": "3397150",
    "end": "3402790"
  },
  {
    "text": "so I'll just show you the deadlock detection itself so basically what we do",
    "start": "3402790",
    "end": "3410050"
  },
  {
    "text": "is that we attach using CLR MD to our process to our process and we go over",
    "start": "3410050",
    "end": "3418960"
  },
  {
    "text": "all of the trends and by the way along the demos that you see you can see how simple the CLR MD API is and I think",
    "start": "3418960",
    "end": "3426609"
  },
  {
    "text": "it's really nice you should do more stuff with it and basically for each of its treads you kind of use a simple",
    "start": "3426609",
    "end": "3435760"
  },
  {
    "text": "recursive search which goes over all of",
    "start": "3435760",
    "end": "3441970"
  },
  {
    "text": "the blocking objects of that tread and",
    "start": "3441970",
    "end": "3447180"
  },
  {
    "text": "you keep a list of all of the treads",
    "start": "3447180",
    "end": "3452800"
  },
  {
    "text": "that this tread is waiting for that's the visited tread",
    "start": "3452800",
    "end": "3457960"
  },
  {
    "text": "IDs and basically if you hit a loop if your list already contains that tread it",
    "start": "3457960",
    "end": "3465910"
  },
  {
    "text": "means you're in a loop and you have a deadlock and in that case you can just write it to the log and with all of the",
    "start": "3465910",
    "end": "3474369"
  },
  {
    "text": "information I know I'm kind of jumping from place to place but like it's really",
    "start": "3474369",
    "end": "3480340"
  },
  {
    "text": "if you take five minutes and look it's a simple recursion just to search for a",
    "start": "3480340",
    "end": "3485650"
  },
  {
    "text": "loop in a in a graph okay and for each of the treads we keep the call stack so",
    "start": "3485650",
    "end": "3493180"
  },
  {
    "text": "that when we finally report that there's a deadlock you can see the tread IDs",
    "start": "3493180",
    "end": "3499240"
  },
  {
    "text": "which are deadlocked and the call stack the functions that they are inside that",
    "start": "3499240",
    "end": "3504250"
  },
  {
    "text": "caused the deadlock so let's cause that lock will go to contact and although the",
    "start": "3504250",
    "end": "3512260"
  },
  {
    "text": "site wasn't fast to begin with I think you do get the idea that this specific link is taking even more time than the",
    "start": "3512260",
    "end": "3520630"
  },
  {
    "text": "rest of them and that's because there is a deadlock and it's stuck so let's look",
    "start": "3520630",
    "end": "3526150"
  },
  {
    "text": "at the log that I have here and okay so first time we try to find that locks",
    "start": "3526150",
    "end": "3532690"
  },
  {
    "text": "there was no deadlock everything was fine second time it already found a deadlock this deadlock was in a thread",
    "start": "3532690",
    "end": "3540880"
  },
  {
    "text": "number so-and-so and it was deadlocked in the process details function along",
    "start": "3540880",
    "end": "3548380"
  },
  {
    "text": "with this other tread which was also in process details for some reason so let's",
    "start": "3548380",
    "end": "3555880"
  },
  {
    "text": "look at the code and what we see here is",
    "start": "3555880",
    "end": "3562470"
  },
  {
    "text": "that we have LOC first and locks second",
    "start": "3562470",
    "end": "3567670"
  },
  {
    "text": "and what happens in between is that we call the same function only we reverse",
    "start": "3567670",
    "end": "3573520"
  },
  {
    "text": "the second with the first so that's a classic deadlock trying to take two",
    "start": "3573520",
    "end": "3579790"
  },
  {
    "text": "locks in reverse order cool so again report the development and problem is",
    "start": "3579790",
    "end": "3585849"
  },
  {
    "text": "hopefully solved so that was our last demo for today of course there are many",
    "start": "3585849",
    "end": "3591880"
  },
  {
    "text": "other scenarios possible just a few more ideas for you to think about for example",
    "start": "3591880",
    "end": "3598750"
  },
  {
    "text": "you could monitor heat fragmentation and that's important because you can use",
    "start": "3598750",
    "end": "3605050"
  },
  {
    "text": "that knowledge in order to invoke large object heap compaction the CLR is",
    "start": "3605050",
    "end": "3611560"
  },
  {
    "text": "actually not going to compact the LOH for you unless you explicitly ask for it but it's large and it takes time so if",
    "start": "3611560",
    "end": "3619720"
  },
  {
    "text": "you monitor heap fragmentation you can make an educated decision whether you want to spend that time or not second",
    "start": "3619720",
    "end": "3627220"
  },
  {
    "text": "all the demos that we saw were for managed applications but a lot of the stuff are also applicable for native etw",
    "start": "3627220",
    "end": "3634780"
  },
  {
    "text": "collects information about native CLR MD can connect to native applications as",
    "start": "3634780",
    "end": "3640599"
  },
  {
    "text": "well it wouldn't have as nice API is for traversing the heaps of course because it relies on dotnet metadata but but",
    "start": "3640599",
    "end": "3648400"
  },
  {
    "text": "it's still it's possible to do some things and there are two side notes that I want to mention here about other",
    "start": "3648400",
    "end": "3653740"
  },
  {
    "text": "things that you can automate and the first is dump analysis we're talking about CLR MD",
    "start": "3653740",
    "end": "3660170"
  },
  {
    "text": "me in this only in the sense of attaching to live processes but it can",
    "start": "3660170",
    "end": "3666020"
  },
  {
    "text": "actually be used to analyze dump files so if you have crashes in your application you can totally analyze them",
    "start": "3666020",
    "end": "3672200"
  },
  {
    "text": "like at least triage them automatically using CRM D which is pretty cool and",
    "start": "3672200",
    "end": "3677510"
  },
  {
    "text": "second if you have a lot of problems I would definitely suggest to aggregate and with solid items somehow you don't",
    "start": "3677510",
    "end": "3684200"
  },
  {
    "text": "want your developers to go over this you know similar logs over and over again so",
    "start": "3684200",
    "end": "3689780"
  },
  {
    "text": "it's a good idea to to aggregate those and just before we finish it's obvious",
    "start": "3689780",
    "end": "3695780"
  },
  {
    "text": "from everything that we saw what the upside of these monitoring scheme is you",
    "start": "3695780",
    "end": "3701000"
  },
  {
    "text": "get a visibility into your production you don't have to reproduce problems you",
    "start": "3701000",
    "end": "3706280"
  },
  {
    "text": "don't have to reproduce problems you have to you can now grow your product scale your product without having to",
    "start": "3706280",
    "end": "3712460"
  },
  {
    "text": "grow the team these are big advantages but they do come with a price and I'm",
    "start": "3712460",
    "end": "3718339"
  },
  {
    "text": "you need to be aware of it so the first problem is I think that's pretty",
    "start": "3718339",
    "end": "3724160"
  },
  {
    "text": "understandable is but it adds complexity you add code to your system and the more",
    "start": "3724160",
    "end": "3729559"
  },
  {
    "text": "code you have the more problems you might have but this risk can actually be reduced",
    "start": "3729559",
    "end": "3734569"
  },
  {
    "text": "because in all of the cases that we saw today we implemented the monitoring inside the application but most of the",
    "start": "3734569",
    "end": "3741410"
  },
  {
    "text": "things that we did we could also do them from an outside watchdog process because",
    "start": "3741410",
    "end": "3746869"
  },
  {
    "text": "performance counters and etw are collected in the machine level anyway and seal RMD I mean you saw that we just",
    "start": "3746869",
    "end": "3753349"
  },
  {
    "text": "passed the process name it doesn't have to connect to my own process so we can totally do most of the things from an",
    "start": "3753349",
    "end": "3760430"
  },
  {
    "text": "outside process and in fact in containerized environments it's already",
    "start": "3760430",
    "end": "3765710"
  },
  {
    "text": "pretty common to create a separate container which does monitoring on each",
    "start": "3765710",
    "end": "3772190"
  },
  {
    "text": "of which notes so for example you can look up sis dig which is a such",
    "start": "3772190",
    "end": "3778930"
  },
  {
    "text": "monitoring agent that you can use on your containers the second thing is of",
    "start": "3778930",
    "end": "3784520"
  },
  {
    "text": "course that it adds overhead and we try to overcome that by using this hierarchical scheme but it adds overhead",
    "start": "3784520",
    "end": "3792829"
  },
  {
    "text": "I can't to you and in fact you already saw in the logs today that some of the stacks",
    "start": "3792829",
    "end": "3800539"
  },
  {
    "text": "were from our own monitoring code and if in fact it happened to me with like a",
    "start": "3800539",
    "end": "3806390"
  },
  {
    "text": "real clients a couple of weeks ago client was complaining him about high",
    "start": "3806390",
    "end": "3811819"
  },
  {
    "text": "CPU usage and we attach the profiler and we saw that our code was writing down",
    "start": "3811819",
    "end": "3816859"
  },
  {
    "text": "stacks and that's what was causing the high CPU so extremely high CPU so it was",
    "start": "3816859",
    "end": "3823520"
  },
  {
    "text": "already in high CPU so it wanted to write down some data and it only made it worse it was a laptop with a single core",
    "start": "3823520",
    "end": "3830900"
  },
  {
    "text": "which we don't see much these days so you know I don't feel too bad about it but it happens and of course it adds",
    "start": "3830900",
    "end": "3837770"
  },
  {
    "text": "development time but it's up to you or your managers to decide whether it's worth it or not",
    "start": "3837770",
    "end": "3844569"
  },
  {
    "text": "so that's it I'm sorry I'm a little late a little recap of what you did today I",
    "start": "3844569",
    "end": "3850280"
  },
  {
    "text": "hope I convinced you that Martone monitoring is important no matter what kind of software or what kind of the",
    "start": "3850280",
    "end": "3856720"
  },
  {
    "text": "deployment scheme you use we saw how to approach the problem using a",
    "start": "3856720",
    "end": "3862640"
  },
  {
    "text": "hierarchical structure and we saw some samples of what can be diagnosed on production all of demos are available",
    "start": "3862640",
    "end": "3869750"
  },
  {
    "text": "here thank you and I'm sorry for keeping you a little late again [Applause]",
    "start": "3869750",
    "end": "3878130"
  },
  {
    "text": "you",
    "start": "3878130",
    "end": "3880190"
  }
]