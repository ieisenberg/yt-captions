[
  {
    "text": "uh the first thing is this is not a basic tdd talk and I won't explain how",
    "start": "6240",
    "end": "11559"
  },
  {
    "text": "to do tdd right so I would expect you to understand at least that tdd is a",
    "start": "11559",
    "end": "17520"
  },
  {
    "text": "process by which we write test before we write code and there is a cycle of red green and refactor where we write a",
    "start": "17520",
    "end": "24320"
  },
  {
    "text": "failing test we then get that test to pass and then we do a new refactoring to",
    "start": "24320",
    "end": "29439"
  },
  {
    "text": "improve the quality of our code right you need to know kind of that much it doesn't matter if you're practicing tddd",
    "start": "29439",
    "end": "36079"
  },
  {
    "text": "currently um it just matters that you understand kind of what tdd is about and how gener gets",
    "start": "36079",
    "end": "42039"
  },
  {
    "text": "presented uh the other thing about this talk is I will definitely be having a um",
    "start": "42039",
    "end": "48879"
  },
  {
    "text": "I will be criticizing what is often seen as the prevailing approach to test driven development right I'll be",
    "start": "48879",
    "end": "55199"
  },
  {
    "text": "criticizing a kind of approach based on unit test mocks everything else and even uh gkin based syntax style acceptance",
    "start": "55199",
    "end": "63360"
  },
  {
    "text": "tests if you are deeply wedded to those and no one is ever going to persuade you",
    "start": "63360",
    "end": "69000"
  },
  {
    "text": "that that is the wrong way of doing something you may want to find somebody else to talk to because that is what I'm",
    "start": "69000",
    "end": "74119"
  },
  {
    "text": "going to try and do today and if that's that's something you're going to go I don't want to hear any of that right no",
    "start": "74119",
    "end": "79560"
  },
  {
    "text": "point in you're being here right if you have an open mind we'll try and explain different ways of doing things right and",
    "start": "79560",
    "end": "86640"
  },
  {
    "text": "if you've tried tdd and you have bounced off it this may help you understand why and may",
    "start": "86640",
    "end": "92640"
  },
  {
    "text": "help you understand a way that may work for you better right hopefully you will be able to write less uh simpler better",
    "start": "92640",
    "end": "100479"
  },
  {
    "text": "tests uh this is not a code based talk as well right this is a theory based",
    "start": "100479",
    "end": "105960"
  },
  {
    "text": "talk it explains the theory of how you do tdd correctly so if you want something demo heavy that isn't this",
    "start": "105960",
    "end": "111680"
  },
  {
    "text": "talk either all right so anyone who wants to run away I am really happy that you go and find the talk that will work",
    "start": "111680",
    "end": "117960"
  },
  {
    "text": "for you rather than sort of s through my talk and being disappointed because it didn't give you what you wanted right",
    "start": "117960",
    "end": "123680"
  },
  {
    "text": "it's your time I don't want to waste it all right most of this is dull I tend to",
    "start": "123680",
    "end": "130679"
  },
  {
    "text": "call out the point at the bottom there is often in lecture style relationships a bit of a impression that I am somehow",
    "start": "130679",
    "end": "138040"
  },
  {
    "text": "you know the expert and you are not um we're all just software Engineers I just",
    "start": "138040",
    "end": "143160"
  },
  {
    "text": "got lucky enough early on in my career to um have to go and talk at the user",
    "start": "143160",
    "end": "149480"
  },
  {
    "text": "group was running we all had to share talking because there were no experts that we could draw on in the early days of net so I got past the confidence",
    "start": "149480",
    "end": "156200"
  },
  {
    "text": "issue of standing up and talking to you all but I'm no smarter than any of you right and you should you could do this",
    "start": "156200",
    "end": "161400"
  },
  {
    "text": "you just need to get audiences like user groups and stuff locally where you can build up the confidence to talk in front",
    "start": "161400",
    "end": "167200"
  },
  {
    "text": "of people um doet developers in the",
    "start": "167200",
    "end": "172760"
  },
  {
    "text": "room I work on an open source uh project for messaging called brighter and doing",
    "start": "172760",
    "end": "177840"
  },
  {
    "text": "cqrs we are very friendly towards W open source contribution other open source and Commercial open source messaging",
    "start": "177840",
    "end": "183799"
  },
  {
    "text": "Frameworks do exist we not better or worse but give us a try right what's the agenda there's not",
    "start": "183799",
    "end": "190400"
  },
  {
    "text": "really an agenda actually clean architecture is not on there anymore I don't think um we're just going to talk about the fallaces of tdd and the",
    "start": "190400",
    "end": "196519"
  },
  {
    "text": "principles right okay the first and perhaps the most",
    "start": "196519",
    "end": "204360"
  },
  {
    "text": "significant fallacy of test driven development is the developers right unit",
    "start": "204360",
    "end": "209840"
  },
  {
    "text": "test s nothing could be further from the truth tdd has nothing zero to do with",
    "start": "209840",
    "end": "219360"
  },
  {
    "text": "unit tests so if I look on Wikipedia I can",
    "start": "219360",
    "end": "225400"
  },
  {
    "text": "get a reasonable definition of unit testing right Wikipedia says to isolate issues that may arise each test case",
    "start": "225400",
    "end": "233120"
  },
  {
    "text": "should be tested independently substitutes such as method stubs mock objects fakes and test",
    "start": "233120",
    "end": "239239"
  },
  {
    "text": "harnesses can be used to assist testing a module in isolation what does that mean right",
    "start": "239239",
    "end": "245120"
  },
  {
    "text": "so once upon a time when we talked about how we were going to automate testing we",
    "start": "245120",
    "end": "251120"
  },
  {
    "text": "tested modules modules are neously defined right it could be a class could be much bigger and the idea was that",
    "start": "251120",
    "end": "258840"
  },
  {
    "text": "module was treated as a black box and your test probed the module from the",
    "start": "258840",
    "end": "264120"
  },
  {
    "text": "outside and you wanted to make sure that any failures your testing gave you were",
    "start": "264120",
    "end": "270120"
  },
  {
    "text": "inside the box so any dependencies that box have you would replace with a fake",
    "start": "270120",
    "end": "275600"
  },
  {
    "text": "or a substitute that's classical automated testing okay the",
    "start": "275600",
    "end": "282280"
  },
  {
    "text": "problem is trying to apply this as a paradigm to test driven development so",
    "start": "282280",
    "end": "288600"
  },
  {
    "text": "what happened was when test driven development emerged some people who were familiar",
    "start": "288600",
    "end": "293960"
  },
  {
    "text": "with automated testing assumed and began to teach other",
    "start": "293960",
    "end": "300400"
  },
  {
    "text": "people tdd on the basis that it was just automated testing and it's",
    "start": "300400",
    "end": "306680"
  },
  {
    "text": "not so there are some problems with that right the first problem is there's a lot of focus on isolation in tdd right the",
    "start": "306680",
    "end": "316080"
  },
  {
    "text": "idea is that for defect localization I need to understand that",
    "start": "316080",
    "end": "321240"
  },
  {
    "text": "all the errors are in this component not one of its collaborators therefore I must use substitutes that I understand",
    "start": "321240",
    "end": "327759"
  },
  {
    "text": "for all of its collaborators test doubles are a term we tend to use",
    "start": "327759",
    "end": "335240"
  },
  {
    "text": "to describe these things the IDE is of like a stunt double right something that stands in for the actor who we can't",
    "start": "335240",
    "end": "341120"
  },
  {
    "text": "expose to danger and so that what happens in a lot of people who are influenced by unit testing is they take",
    "start": "341120",
    "end": "347479"
  },
  {
    "text": "a class because they decide that's the equivalent of a module from automated software engineer testing and they",
    "start": "347479",
    "end": "354120"
  },
  {
    "text": "replace all of its dependencies with substitutes and eventually what this led",
    "start": "354120",
    "end": "360680"
  },
  {
    "text": "to was a paradigm of thought in test driven development sometimes called need- driven development those of you",
    "start": "360680",
    "end": "367080"
  },
  {
    "text": "who have read the book growing objectoriented software with tests this book espouses particularly this",
    "start": "367080",
    "end": "373280"
  },
  {
    "text": "philosophy of what's called need- driven development it's a variation on the test driven development process where code is",
    "start": "373280",
    "end": "379360"
  },
  {
    "text": "written from the outside in so in other words you start effectively at the",
    "start": "379360",
    "end": "385199"
  },
  {
    "text": "outside with the kind of function or method that you're getting under test",
    "start": "385199",
    "end": "390840"
  },
  {
    "text": "and all dependent upon code is replaced by mock objects that verify the expected",
    "start": "390840",
    "end": "397639"
  },
  {
    "text": "indirect outputs of the code being written so in other words if I have any kind of",
    "start": "397639",
    "end": "403280"
  },
  {
    "text": "collaborator then I'm going to replace it with a substitute and I'm going to verify in my test the calls I make to",
    "start": "403280",
    "end": "411919"
  },
  {
    "text": "that substitute one of the issues here is that generally this involves upfront",
    "start": "411919",
    "end": "418960"
  },
  {
    "text": "design I have to either understand perhaps I did cic cards perhaps I had a",
    "start": "418960",
    "end": "425759"
  },
  {
    "text": "whiteboard why how I'm partitioning my domain space into",
    "start": "425759",
    "end": "431759"
  },
  {
    "text": "objects because I have to know well this responsibility isn't the thing under test it's the responsibility of",
    "start": "431759",
    "end": "438720"
  },
  {
    "text": "something else which I will effectively replace with a mock or a stop so I'm doing upfront design I'm not letting the",
    "start": "438720",
    "end": "445879"
  },
  {
    "text": "tests inform my design",
    "start": "445879",
    "end": "451319"
  },
  {
    "text": "okay another alternative to this which is the one that growing object turn to with software test tends to basically um",
    "start": "452120",
    "end": "459520"
  },
  {
    "text": "uh offer is that as you begin to do your implementation in response to test you",
    "start": "459520",
    "end": "465840"
  },
  {
    "text": "realize oh this next bit probably needs to be another another class the",
    "start": "465840",
    "end": "471639"
  },
  {
    "text": "responsibility needs to be handed off so at that point I will then I'm doing Discovery so I will now write my test",
    "start": "471639",
    "end": "477919"
  },
  {
    "text": "for that mock right there's an overall problem with this right that's basically began to hamper a",
    "start": "477919",
    "end": "485039"
  },
  {
    "text": "lot of our development and that is that",
    "start": "485039",
    "end": "490479"
  },
  {
    "text": "essentially we now in our test understand the implementation",
    "start": "490479",
    "end": "497639"
  },
  {
    "text": "details of the method or class that we are going to basically test we must",
    "start": "497639",
    "end": "504280"
  },
  {
    "text": "understand its details because we have to understand the interaction it has with collaborators in order to get its",
    "start": "504280",
    "end": "509599"
  },
  {
    "text": "job done we also tend to get forced into a world where most those collaborators are",
    "start": "509599",
    "end": "515640"
  },
  {
    "text": "public things that we can otherwise test they're not internal or private they are not",
    "start": "515640",
    "end": "522440"
  },
  {
    "text": "hidden as long ago as 2007 which makes me feel really old I wrote this because the tdd",
    "start": "522599",
    "end": "530399"
  },
  {
    "text": "community understood at the time that people were going in the wrong direction and we tried shouting a lot but this",
    "start": "530399",
    "end": "537839"
  },
  {
    "text": "automated software engineering mirroring kind of like Paradigm had really took taken over and back in then I said when",
    "start": "537839",
    "end": "544519"
  },
  {
    "text": "I look around now I see a lot of people using mocks to replace all of their dependencies my concern is they will",
    "start": "544519",
    "end": "550959"
  },
  {
    "text": "begin to hit the fragile test issues that mocks present Gerard ma mazos identifies the issues we hear as two",
    "start": "550959",
    "end": "556720"
  },
  {
    "text": "specific smells over specified software and behavior",
    "start": "556720",
    "end": "562279"
  },
  {
    "text": "sensitivity so typically what happens is in a strugly type language like Java or C you say oh my collaborat",
    "start": "562279",
    "end": "569720"
  },
  {
    "text": "I need to be able to substitute those I will create an interface for them so rather than neing anything up in the",
    "start": "569720",
    "end": "575480"
  },
  {
    "text": "Constructor of my class if I want to basically use components so I can effectively compose behaviors rather",
    "start": "575480",
    "end": "580880"
  },
  {
    "text": "than using inheritance I have to inject to my dependencies previously we tended",
    "start": "580880",
    "end": "586680"
  },
  {
    "text": "to use dependency injection for things like strategy pan or effectively to support layering where effectively I",
    "start": "586680",
    "end": "592399"
  },
  {
    "text": "couldn't know basically about the concrete class and a lad that was above me for example but suddenly we were",
    "start": "592399",
    "end": "598760"
  },
  {
    "text": "using interfaces to inject all of our dependencies and the result of that was",
    "start": "598760",
    "end": "604720"
  },
  {
    "text": "we couldn't any even more use any kind of like what we call Poor Man's di where composition was from the root and",
    "start": "604720",
    "end": "611200"
  },
  {
    "text": "everything just well I can just new up my dependencies Etc and pass into some config suddenly we had these really long",
    "start": "611200",
    "end": "617959"
  },
  {
    "text": "chains of interfaces in our Constructors which meant we needed to all start using ioc Frameworks to build",
    "start": "617959",
    "end": "625480"
  },
  {
    "text": "our code bases right if you ever wondered hang on a minute my class seems to be",
    "start": "625480",
    "end": "631399"
  },
  {
    "text": "this mess of dependencies I can't actually create anything without ioc Frameworks is this the right thing and",
    "start": "631399",
    "end": "637560"
  },
  {
    "text": "the answer is probably no we've kind of Trapped ourselves right what do you mean by Behavior",
    "start": "637560",
    "end": "644000"
  },
  {
    "text": "sensitivity we mean the problem is that essentially we",
    "start": "644000",
    "end": "649680"
  },
  {
    "text": "should be able to change the implementation details of our code",
    "start": "649680",
    "end": "654880"
  },
  {
    "text": "without breaking tests right tests are intended to focus",
    "start": "654880",
    "end": "660800"
  },
  {
    "text": "on the contract but actually our tests are focused on the implementation details and generally what you see you see this",
    "start": "660800",
    "end": "668160"
  },
  {
    "text": "behavior when as you try and change something and then you go ah I got to",
    "start": "668160",
    "end": "673320"
  },
  {
    "text": "fix the 300 broken tests because I changed the way we co that interface on that other class right that shouldn't",
    "start": "673320",
    "end": "680240"
  },
  {
    "text": "happen you're changing an implementation detail that shouldn't break your tests and that also leads to this",
    "start": "680240",
    "end": "686920"
  },
  {
    "text": "problem where people stop refactoring or they try and work around basically",
    "start": "686920",
    "end": "692360"
  },
  {
    "text": "avoiding making changes because it's kind of like yeah I can't do that so many tests will break that would take us",
    "start": "692360",
    "end": "697600"
  },
  {
    "text": "days to fix let's do something else but tests were supposed to make our code more Supple they're supposed to enable",
    "start": "697600",
    "end": "702959"
  },
  {
    "text": "refactoring why are they preventing us from refactoring okay so the principle you",
    "start": "702959",
    "end": "710519"
  },
  {
    "text": "need to understand a principle that's been around since the beginning of tdd is that developers write developer tests",
    "start": "710519",
    "end": "717600"
  },
  {
    "text": "sometimes called programmer tests not unit tests it's worth noting so when Kent",
    "start": "717600",
    "end": "724519"
  },
  {
    "text": "writes tdd by example Kent is not the originator of tdd and he would admit to that I think um Kent is documenting a",
    "start": "724519",
    "end": "732160"
  },
  {
    "text": "practice that he and others in various software communities have been using for",
    "start": "732160",
    "end": "737560"
  },
  {
    "text": "some time and if you go and read tdd by example it has information on marks exceptions from development lots of",
    "start": "737560",
    "end": "744120"
  },
  {
    "text": "ideas that people think came much later they already knew about they already understood and it's discussed right so",
    "start": "744120",
    "end": "750519"
  },
  {
    "text": "he's documenting practice that people are using for a wider audience and Kent says I call the unit",
    "start": "750519",
    "end": "757000"
  },
  {
    "text": "tests but they don't match the accepted definition of unit tests very well this is the only reference to unit tests in",
    "start": "757000",
    "end": "764480"
  },
  {
    "text": "the entire book you can go and search it that's the only time it's mentioned what it means is in casual conversation we",
    "start": "764480",
    "end": "771560"
  },
  {
    "text": "occasionally say unit tests when he built junit he referred to them as unit test it's one of these kind of like you",
    "start": "771560",
    "end": "777360"
  },
  {
    "text": "know billion dollar mistakes right a bit like using the word micro with micr Services right people started get to go",
    "start": "777360",
    "end": "784199"
  },
  {
    "text": "off on a tangent of completely the wrong set of ideas and they brought in units from automated software",
    "start": "784199",
    "end": "791000"
  },
  {
    "text": "engineering okay all right so we can understand what we",
    "start": "791000",
    "end": "797600"
  },
  {
    "text": "should be doing better if we look at refactoring so this is Martin Fowler's definition of refactoring a change made",
    "start": "797600",
    "end": "803600"
  },
  {
    "text": "to the internal structure of software to make it easier to understand and cheap",
    "start": "803600",
    "end": "808959"
  },
  {
    "text": "to modify without changing its observable Behavior so refactoring is very clear",
    "start": "808959",
    "end": "816519"
  },
  {
    "text": "right I've got some observable Behavior things that other people depend upon that my class effectively does right if",
    "start": "816519",
    "end": "823320"
  },
  {
    "text": "I want to change how it does it a more efficient algorithm better structure effectively breaking it into small",
    "start": "823320",
    "end": "829360"
  },
  {
    "text": "classes I should be able to do that right Guided by my tests to ensure that",
    "start": "829360",
    "end": "837560"
  },
  {
    "text": "effectively I don't break anything thing so red green refractor is the tdd cycle",
    "start": "837560",
    "end": "843639"
  },
  {
    "text": "refractor is the last step often you see people practicing tdd going yeah I mean",
    "start": "843639",
    "end": "849440"
  },
  {
    "text": "we just do a lot of red and green we never really refactor right that's a smell it's a smell that effectively",
    "start": "849440",
    "end": "856000"
  },
  {
    "text": "what's happened is you've got a design up front you are now trying to get under test because in the green phase what you",
    "start": "856000",
    "end": "863800"
  },
  {
    "text": "should be doing is anything you can to find the algorithm that you need to pass",
    "start": "863800",
    "end": "870079"
  },
  {
    "text": "the test so you can go and copy code from stack Overflow copy Pastor it that's",
    "start": "870079",
    "end": "875959"
  },
  {
    "text": "absolutely fine in the green phase you can go and ask chat gbt to tell you how you should write that code and cut and",
    "start": "875959",
    "end": "882720"
  },
  {
    "text": "paste it in that's absolutely fine in the green phase you will make the code good once it passes the test because now",
    "start": "882720",
    "end": "890000"
  },
  {
    "text": "you know exactly the code you need to pass the test and you can then refactor",
    "start": "890000",
    "end": "895600"
  },
  {
    "text": "to write high quality code right you can improve on what chat GPT gave you",
    "start": "895600",
    "end": "902399"
  },
  {
    "text": "right so your code is exposing a contract and what we want you to do is",
    "start": "902880",
    "end": "909320"
  },
  {
    "text": "test that contract test I can Implement that contract and then have tests which",
    "start": "909320",
    "end": "915040"
  },
  {
    "text": "say I continue to meet that contract but you should be able to",
    "start": "915040",
    "end": "920320"
  },
  {
    "text": "change how you implement that contract without breaking any of your tests and",
    "start": "920320",
    "end": "925519"
  },
  {
    "text": "the problem with mocks is that every time you trying to change the implementation details you will keep",
    "start": "925519",
    "end": "932120"
  },
  {
    "text": "breaking your tests km Beck said basically I think somewhere in uh mid teens basically if a",
    "start": "932120",
    "end": "939360"
  },
  {
    "text": "program's behavior is stable from an observer's perspective no tests should change in other words when I'm",
    "start": "939360",
    "end": "945040"
  },
  {
    "text": "refactoring and I change the contract change the implementation rather than the contract then I",
    "start": "945040",
    "end": "950680"
  },
  {
    "text": "shouldn't change any tests right so it's a contract first approach to testing in",
    "start": "950680",
    "end": "956160"
  },
  {
    "text": "tdd right behavior is the cont contract the API that you are exposing in other",
    "start": "956160",
    "end": "961279"
  },
  {
    "text": "words the public methods of a class right okay and again Kent said even more",
    "start": "961279",
    "end": "969639"
  },
  {
    "text": "recently because this whole thing you know we we we never seem to win against the the bad ideas of automated software",
    "start": "969639",
    "end": "976160"
  },
  {
    "text": "engineering test should be coupled to the behavior of code and decoupled from the structure of code seeing tests that",
    "start": "976160",
    "end": "982880"
  },
  {
    "text": "fail on both counts in other words the tests Express the contract that you want",
    "start": "982880",
    "end": "989040"
  },
  {
    "text": "to see from that particular class right not how you've chosen to implement",
    "start": "989040",
    "end": "997319"
  },
  {
    "text": "that uh there's a big uh kind of Meetup with uh dhh greater ran rails on for",
    "start": "997959",
    "end": "1004120"
  },
  {
    "text": "toer of our industry um Kent Beck also by Martin Fowler because um dhh in his",
    "start": "1004120",
    "end": "1010880"
  },
  {
    "text": "usual way to obtain clicks had effectively said um I'm done with tdd uh and I feel good",
    "start": "1010880",
    "end": "1017759"
  },
  {
    "text": "about saying that it's basically not done me any good I end up with these test Suites that make changing my code",
    "start": "1017759",
    "end": "1023519"
  },
  {
    "text": "hard and everything else right and the thing is I think to be to be fair what he' done is fallen into the very much",
    "start": "1023519",
    "end": "1029640"
  },
  {
    "text": "the automated software engineering unit test based approach effectively to testing and and Kent said in that",
    "start": "1029640",
    "end": "1035240"
  },
  {
    "text": "interview that the dialogue that Martin basically created between the two of them my personal style is I just don't",
    "start": "1035240",
    "end": "1041400"
  },
  {
    "text": "go very far down the mock path your test is completely coupled to the implementation of the interface of",
    "start": "1041400",
    "end": "1047678"
  },
  {
    "text": "course you can't change anything without breaking the tests right so we don't do this kind of",
    "start": "1047679",
    "end": "1055679"
  },
  {
    "text": "mock driven testing right because that means effectively we",
    "start": "1055679",
    "end": "1061720"
  },
  {
    "text": "are observing the thing under test by indirect outputs not by simply saying",
    "start": "1061720",
    "end": "1067200"
  },
  {
    "text": "something on the lines of there is State before there is state after and I've somehow transformed it right",
    "start": "1067200",
    "end": "1074120"
  },
  {
    "text": "preconditions and post conditions that's really what you want to focus on right",
    "start": "1074120",
    "end": "1079240"
  },
  {
    "text": "preconditions and post conditions what does the world look like before I did this exercise this Behavior what does",
    "start": "1079240",
    "end": "1084760"
  },
  {
    "text": "the world look like now okay",
    "start": "1084760",
    "end": "1089840"
  },
  {
    "text": "so this is the definition effectively of a unit test right failure of a unit test",
    "start": "1089840",
    "end": "1095520"
  },
  {
    "text": "shall implicate one and one only unit a method class module or package so unit",
    "start": "1095520",
    "end": "1101799"
  },
  {
    "text": "tests do defect localization via substitution okay this is the definition",
    "start": "1101799",
    "end": "1108960"
  },
  {
    "text": "of a programmer or developer test that you use in test driven development failure of a program or",
    "start": "1108960",
    "end": "1115440"
  },
  {
    "text": "developer test under test driven development implicates only the most recent",
    "start": "1115440",
    "end": "1121200"
  },
  {
    "text": "edit so the way you do defect localization is I have a sweet of green tests I make a small change to my",
    "start": "1121200",
    "end": "1128919"
  },
  {
    "text": "code if the if any tests now go red which used to be",
    "start": "1128919",
    "end": "1134240"
  },
  {
    "text": "green the defect is localized to them to the code I just wrote",
    "start": "1134240",
    "end": "1139440"
  },
  {
    "text": "this is the reason in tdd we recommend that you take small jumps what's the smallest increment of",
    "start": "1139440",
    "end": "1147320"
  },
  {
    "text": "behavior that you could now get under test because that localizes the defect",
    "start": "1147320",
    "end": "1153720"
  },
  {
    "text": "so Kent has a thing about driving in Gears which I think must confuse Americans because I'm pretty sure they drive automatic rather than stick shift",
    "start": "1153720",
    "end": "1161720"
  },
  {
    "text": "but what he's talking about is this idea that the higher the gear you in the more",
    "start": "1161720",
    "end": "1168360"
  },
  {
    "text": "more code you write at any one time the more confident you have to be about what",
    "start": "1168360",
    "end": "1173880"
  },
  {
    "text": "you're doing the more you have to feel I've done this a thousand times it's okay I can write 80 lines of code",
    "start": "1173880",
    "end": "1179440"
  },
  {
    "text": "without there being too many defects I'm good the less comfortable you feel the",
    "start": "1179440",
    "end": "1185120"
  },
  {
    "text": "smaller the amount of code the narrower the test you need to write in order to",
    "start": "1185120",
    "end": "1191159"
  },
  {
    "text": "essentially um understand where the defects are so I typically get questions about oh when you talk about tdd in this",
    "start": "1191159",
    "end": "1198480"
  },
  {
    "text": "in this way could I do it by tdd my HTTP API and the answer is sure you could if that works for you but you're taking a",
    "start": "1198480",
    "end": "1204960"
  },
  {
    "text": "big jump so defect localization now is right across that span of your you know",
    "start": "1204960",
    "end": "1210360"
  },
  {
    "text": "your your web controller um the marshalling basically of stuff into format Etc all the way down to your",
    "start": "1210360",
    "end": "1215880"
  },
  {
    "text": "Handler if that's actually quite simple maybe you're comfortable driving at the level where effectively you make those",
    "start": "1215880",
    "end": "1221280"
  },
  {
    "text": "big jumps and you you're okay with figuring out where defects are in that right if not you want to go a bit lower",
    "start": "1221280",
    "end": "1228679"
  },
  {
    "text": "right so maybe you want to use a ports and adapter's architecture and test at the port or maybe it's a really complex",
    "start": "1228679",
    "end": "1234080"
  },
  {
    "text": "algorithm when you want to test lower down at the individual class but it's kind of up to you to make a choice tdd",
    "start": "1234080",
    "end": "1240360"
  },
  {
    "text": "doesn't really have a rule other than driving a gear you feel comfortable with that you can localize the defect in the",
    "start": "1240360",
    "end": "1247559"
  },
  {
    "text": "amount of code you've just committed and if you find yourself hitting the debugger a lot you're making",
    "start": "1247559",
    "end": "1254159"
  },
  {
    "text": "too big a jump right real the hard hardcore tdd",
    "start": "1254159",
    "end": "1259640"
  },
  {
    "text": "folks from back in the early two late '90s early 2000s used to say oh if",
    "start": "1259640",
    "end": "1265320"
  },
  {
    "text": "you've added a whole if you added sort of a whole L of lines of code and then you break stuff just in test break",
    "start": "1265320",
    "end": "1271240"
  },
  {
    "text": "delete that code and try again right and it's pretty hardcore I'm okay I'd be like you can use a debugger right but",
    "start": "1271240",
    "end": "1278320"
  },
  {
    "text": "the reason they had that rule was to try and persuade people not to write 200 lines of code with each test because",
    "start": "1278320",
    "end": "1285240"
  },
  {
    "text": "you'd have to lose 200 lines of code so that's the reason for the ru is trying to basically say to people don't jump",
    "start": "1285240",
    "end": "1290640"
  },
  {
    "text": "too far okay um but a full definition of test",
    "start": "1290640",
    "end": "1298000"
  },
  {
    "text": "development is so the C2 Wiki which is kind of slowly fading in the way that",
    "start": "1298000",
    "end": "1303440"
  },
  {
    "text": "you know the our history on the Internet is slowly getting killed which is never a great thing says test driven",
    "start": "1303440",
    "end": "1309840"
  },
  {
    "text": "development produces developer tests the failure of a test case implicates only the developer most recent edit this",
    "start": "1309840",
    "end": "1317000"
  },
  {
    "text": "implies that Developers don't need to use mock objects to split their code up into testable units and it implies a",
    "start": "1317000",
    "end": "1323039"
  },
  {
    "text": "developer may always avoid debugging by reverting that last edit",
    "start": "1323039",
    "end": "1329080"
  },
  {
    "text": "right so I tend to basically in casual conversation where I can try and use program developer test even I will",
    "start": "1329080",
    "end": "1335400"
  },
  {
    "text": "occasionally use the word unit right because it's become so prevalent um tdd is a process of",
    "start": "1335400",
    "end": "1342919"
  },
  {
    "text": "discovery right in other words you are seeking to effectively not do huge",
    "start": "1342919",
    "end": "1348159"
  },
  {
    "text": "amounts of design up front take your contract and then effectively slowly explore the implementation that you",
    "start": "1348159",
    "end": "1356840"
  },
  {
    "text": "need and so you don't use mock objects to the same extent you would in this classical model you don't need to",
    "start": "1357039",
    "end": "1363559"
  },
  {
    "text": "isolate the thing under test there are some cases Mo objects will take talk about them in a minute okay um and that",
    "start": "1363559",
    "end": "1372039"
  },
  {
    "text": "means essentially you can do stuff like use new to create a class in your con a",
    "start": "1372039",
    "end": "1377600"
  },
  {
    "text": "component in your Constructor rather than injector it's amazingly liberating when you can say hey I don't actually",
    "start": "1377600",
    "end": "1383440"
  },
  {
    "text": "need to use di for everything right there is one use case where",
    "start": "1383440",
    "end": "1390679"
  },
  {
    "text": "effectively we may want to think about using substitutes so the confusion",
    "start": "1390679",
    "end": "1395960"
  },
  {
    "text": "around unit test actually really stems most of all from this statement by Kent how should the running of tests affect",
    "start": "1395960",
    "end": "1402400"
  },
  {
    "text": "one another not at all so when he was using unit his thing was your test",
    "start": "1402400",
    "end": "1408279"
  },
  {
    "text": "should be able to run in parallel tests need to be fast because we don't want to break your flow and force you out of",
    "start": "1408279",
    "end": "1416240"
  },
  {
    "text": "basically the work you're doing in incrementally working towards solving a requirement by making you go and do a",
    "start": "1416240",
    "end": "1422679"
  },
  {
    "text": "whole making you go I'll go and make coffee while my tests run right we don't want that we want test to be I press a",
    "start": "1422679",
    "end": "1429159"
  },
  {
    "text": "button within 30 seconds okay that's all green I can keep moving right whereas if",
    "start": "1429159",
    "end": "1434640"
  },
  {
    "text": "he's kind of like I run my tests any want Fanci a coffee then that's a disaster because I break",
    "start": "1434640",
    "end": "1440360"
  },
  {
    "text": "my flow the model gets torn down I have to St step things up again so Kent's",
    "start": "1440360",
    "end": "1445440"
  },
  {
    "text": "thing was isolation of tests from each other and that's why he inadvertently used the word unit and that's what",
    "start": "1445440",
    "end": "1451960"
  },
  {
    "text": "caused all the problems a little bit right tests are isolated from each other so that they can run in parel which",
    "start": "1451960",
    "end": "1457559"
  },
  {
    "text": "keeps them fast the most common problem that causes tests not be able to run",
    "start": "1457559",
    "end": "1463120"
  },
  {
    "text": "together is what we call shared fixture in other words that means something where a itively two tests will change",
    "start": "1463120",
    "end": "1470120"
  },
  {
    "text": "the same set of state so for example you have a table in a database and one thing says I'm going to count the number of",
    "start": "1470120",
    "end": "1476080"
  },
  {
    "text": "rows after I do this operation and another test says oh I'm going to add some rows and if you run those two",
    "start": "1476080",
    "end": "1481559"
  },
  {
    "text": "they're going to come run in a random order and essentially if the one that adds the other rows runs basically at",
    "start": "1481559",
    "end": "1487440"
  },
  {
    "text": "the wrong moment in time it could affect the result of the other and you get this erratic test that fails occasionally",
    "start": "1487440",
    "end": "1492720"
  },
  {
    "text": "right some some of you may seen that right or static um uh and you know",
    "start": "1492720",
    "end": "1497880"
  },
  {
    "text": "languages like C we use a static variable so effectively you have Global State and you're basically impacting",
    "start": "1497880",
    "end": "1504080"
  },
  {
    "text": "Global state in your test so where you have a shared fixture you need to avoid",
    "start": "1504080",
    "end": "1509919"
  },
  {
    "text": "the problem with the shared fixture one way to do that is to use basically a test up like a mock or a fake it isn't",
    "start": "1509919",
    "end": "1516679"
  },
  {
    "text": "the only way right you may be able to actually make sure that you protect that you may be able to run those some of",
    "start": "1516679",
    "end": "1522520"
  },
  {
    "text": "those tests sequentially because you don't have too many of them but one way to do that so IO is most commonly the",
    "start": "1522520",
    "end": "1528440"
  },
  {
    "text": "problem we experience for shared fixtures and so quite it's quite common to decide I will replace this thing",
    "start": "1528440",
    "end": "1535440"
  },
  {
    "text": "that's doing IO like talking to a database with a shared with a with a mock in order to avoid the shared",
    "start": "1535440",
    "end": "1540840"
  },
  {
    "text": "fixture problem okay the other reason we may want to use a mock for Io is just speed right if",
    "start": "1540840",
    "end": "1548600"
  },
  {
    "text": "this thing is slow fragile because it involves some kind of network connection or talks to resources that might not be",
    "start": "1548600",
    "end": "1554600"
  },
  {
    "text": "available in order to avoid the problem of test break it's fragile or test take",
    "start": "1554600",
    "end": "1559840"
  },
  {
    "text": "a long time again it's another reason to replace something with a mock so tdd by",
    "start": "1559840",
    "end": "1565080"
  },
  {
    "text": "example kect talks all about mocks but that's the reason they want to use them right to to allow your tests to run fast",
    "start": "1565080",
    "end": "1572799"
  },
  {
    "text": "and run independently not to isolate the thing under",
    "start": "1572799",
    "end": "1578360"
  },
  {
    "text": "test okay so let's dig a bit deeper the next thing I tend to see is that people get T",
    "start": "1578360",
    "end": "1586120"
  },
  {
    "text": "okay before you write any method write a test for that method right so",
    "start": "1586120",
    "end": "1592279"
  },
  {
    "text": "typically the rule people have is the trigger for a new test is writing a new function even Wikipedia bless its heart",
    "start": "1592279",
    "end": "1601200"
  },
  {
    "text": "says write a test it defines a function or impr improvements of a function okay",
    "start": "1601200",
    "end": "1606760"
  },
  {
    "text": "Wikipedia is very wrong okay it seems to make sense right",
    "start": "1606760",
    "end": "1611960"
  },
  {
    "text": "we talked about basically saying tests well you have preconditions how does the world look before I run my test and I",
    "start": "1611960",
    "end": "1617480"
  },
  {
    "text": "have post conditions how does the the world look after I Pally run my function seems to make sense that would be a good",
    "start": "1617480",
    "end": "1623720"
  },
  {
    "text": "interception point right implementation is just how do I Implement that function there are some",
    "start": "1623720",
    "end": "1630600"
  },
  {
    "text": "problems the function basically is the system under test is basically what we're saying right so we want to conf",
    "start": "1630600",
    "end": "1636720"
  },
  {
    "text": "testing them then becomes confirming that functions work so you have a function that says for example um uh you",
    "start": "1636720",
    "end": "1643919"
  },
  {
    "text": "know calculate Fu right and you say okay here are my parameters maybe I'll do a",
    "start": "1643919",
    "end": "1650520"
  },
  {
    "text": "parameterized test and I say effective I'm going to run calculate Fu and here's",
    "start": "1650520",
    "end": "1655760"
  },
  {
    "text": "the results I expect when I run calculate F okay um one of the questions that then",
    "start": "1655760",
    "end": "1663000"
  },
  {
    "text": "comes up is oh uh private methods you occasionally see this uh how do I get those under test and you see people go C",
    "start": "1663000",
    "end": "1670320"
  },
  {
    "text": "sh people go oh use internal visible internals visible to so you can reach in and get that one and the answer is never test your private methods right they're",
    "start": "1670320",
    "end": "1677000"
  },
  {
    "text": "an implementation detail anything that is internal or private to your module never test it you",
    "start": "1677000",
    "end": "1685000"
  },
  {
    "text": "only test the public interface that other people depend upon",
    "start": "1685000",
    "end": "1690159"
  },
  {
    "text": "right because those are implementation details you're at liberty to change them that's the whole reason you put them",
    "start": "1690159",
    "end": "1695200"
  },
  {
    "text": "made them basically internal to your module or uh private is so you could just change them when you felt like it",
    "start": "1695200",
    "end": "1702440"
  },
  {
    "text": "right you only to test the things that other people depend upon that's where behavior is expressed",
    "start": "1702440",
    "end": "1709440"
  },
  {
    "text": "okay well that look all right that doesn't really yeah we'll come back to that um often when you return to your",
    "start": "1710000",
    "end": "1717039"
  },
  {
    "text": "test it's difficult to understand the intent the trouble with basically the kind of get Fu thing is it has a whole lot of parameterized numbers and assert",
    "start": "1717039",
    "end": "1723200"
  },
  {
    "text": "values right and sometimes it breaks and I go okay so has it broken when I give",
    "start": "1723200",
    "end": "1732600"
  },
  {
    "text": "get Fu 20 and 30 because I've I've",
    "start": "1732600",
    "end": "1738000"
  },
  {
    "text": "broken the implementation of G Fu or is the change the customer wanted mean that",
    "start": "1738000",
    "end": "1743480"
  },
  {
    "text": "20 and 30 don't have that result anymore it's probably not clear from the test it's just give get food 20 and 30 check",
    "start": "1743480",
    "end": "1750399"
  },
  {
    "text": "that value equals whatever right one of the promises we were made",
    "start": "1750399",
    "end": "1756159"
  },
  {
    "text": "about tdd that people sometimes Mock and laugh about on the internet because people on the on Twitter are experts in",
    "start": "1756159",
    "end": "1762120"
  },
  {
    "text": "things right and one of those things they go ah yeah there was this idea we didn't need documentation any anymore",
    "start": "1762120",
    "end": "1768279"
  },
  {
    "text": "because our test would be an executable specification which would enable us to understand how to use the code haaha",
    "start": "1768279",
    "end": "1775039"
  },
  {
    "text": "have you ever tried re seeing any tests isn't that awful right and the answer is the way you write tests absolutely I can",
    "start": "1775039",
    "end": "1782080"
  },
  {
    "text": "I can believe that but genuine tdd doesn't have that problem we actually get genuine executable specifications",
    "start": "1782080",
    "end": "1788080"
  },
  {
    "text": "for our code that's B one a second okay so somewhat alarmingly",
    "start": "1788080",
    "end": "1795320"
  },
  {
    "text": "perhaps for people who like to go and use spec flow and tools like that tdd as",
    "start": "1795320",
    "end": "1801679"
  },
  {
    "text": "in programmer and developer tests by origin say the trigger for a new test is a new",
    "start": "1801679",
    "end": "1807440"
  },
  {
    "text": "behavior that is the level tdd has always been at so K back tdd by example this is a",
    "start": "1807440",
    "end": "1814640"
  },
  {
    "text": "typical this is one of the things that Kent by example is showing you how to build tddd we need to be able to add",
    "start": "1814640",
    "end": "1820559"
  },
  {
    "text": "amounts in two different currencies and convert the result given a set of exchange rates not we need to test the",
    "start": "1820559",
    "end": "1828360"
  },
  {
    "text": "um uh add amounts method and see that basically when we add 20 and 30 together",
    "start": "1828360",
    "end": "1834399"
  },
  {
    "text": "we will get 50 or whatever Right add amounts convert result given a set of",
    "start": "1834399",
    "end": "1840320"
  },
  {
    "text": "exchange rates given a set of exchange rates when we add amounts in two different",
    "start": "1840320",
    "end": "1846399"
  },
  {
    "text": "currencies then we convert the result we can rewrite that as what's",
    "start": "1846399",
    "end": "1852360"
  },
  {
    "text": "called GWT or given when then test which basically is an observation from uh down",
    "start": "1852360",
    "end": "1857880"
  },
  {
    "text": "North basically given a set of exchange rates when I add two amounts in different",
    "start": "1857880",
    "end": "1863279"
  },
  {
    "text": "currencies together then I get a result in the first currency that is how tdd works and always has done since tdd by",
    "start": "1863279",
    "end": "1871240"
  },
  {
    "text": "example not here is my method I want to add one given the state of the world",
    "start": "1871240",
    "end": "1877080"
  },
  {
    "text": "before the test when I exercise the behavior under test tdd works against",
    "start": "1877080",
    "end": "1883440"
  },
  {
    "text": "behaviors right then we expect the the following changes the same thing so as a four-fold test",
    "start": "1883440",
    "end": "1890559"
  },
  {
    "text": "model by Jared mazaris setup exercise verify tear down same thing as actor",
    "start": "1890559",
    "end": "1896000"
  },
  {
    "text": "range aert from Bill wake right given a set basically of given the world before",
    "start": "1896000",
    "end": "1901519"
  },
  {
    "text": "a test when I exercise a behavior not a method a behavior which might include",
    "start": "1901519",
    "end": "1907519"
  },
  {
    "text": "calls to more than one method then we expect the following changes right and it's this because Dan",
    "start": "1907519",
    "end": "1915279"
  },
  {
    "text": "North created the term Behavior driven development very early on in the public",
    "start": "1915279",
    "end": "1920559"
  },
  {
    "text": "life of tdd right early in the ughs Dan said I found the shift from thinking and",
    "start": "1920559",
    "end": "1925600"
  },
  {
    "text": "Testa thinking of behavior so profound that I started to refer to tdd as bdd or",
    "start": "1925600",
    "end": "1931840"
  },
  {
    "text": "behavior driven development note there is no difference at this point in time between what tdd and bdd are he simply",
    "start": "1931840",
    "end": "1939679"
  },
  {
    "text": "renames tdd as bdd for his consultancy clients because he finds they are",
    "start": "1939679",
    "end": "1945360"
  },
  {
    "text": "confused by the word test they start thinking about automated software engineering and unit tests so he says",
    "start": "1945360",
    "end": "1951799"
  },
  {
    "text": "let's just call it Behavior driven development so you understand it's about testing behaviors not units",
    "start": "1951799",
    "end": "1959399"
  },
  {
    "text": "okay um so this was an really important observation because it said we're all about the contracts we're all about the",
    "start": "1959399",
    "end": "1965440"
  },
  {
    "text": "behaviors that's what tdd does right now I I would caution you that bdd has since",
    "start": "1965440",
    "end": "1973480"
  },
  {
    "text": "become its own thing and I'm pretty down on bdd too to so for those of you thinking yay I like bdd in about to tell",
    "start": "1973480",
    "end": "1980200"
  },
  {
    "text": "me that's great no sorry um but uh the original blog post that Dan gave and the",
    "start": "1980200",
    "end": "1985919"
  },
  {
    "text": "original kind of naming strategy where he said it's Behavior driven development is good some of the things bdd has",
    "start": "1985919",
    "end": "1992600"
  },
  {
    "text": "become are bad I'll explain why when we talk about acceptance testing in a minute all",
    "start": "1992600",
    "end": "1997960"
  },
  {
    "text": "right uh so B all these slides by the way they're in my GitHub you can just go to uh GitHub for Ian Cooper and",
    "start": "1997960",
    "end": "2005360"
  },
  {
    "text": "presentations uh Kemp seven years after I think it's called or something because when I wrote this it was seven years",
    "start": "2005360",
    "end": "2010600"
  },
  {
    "text": "after in the pandemic basically uh talk I gave in 2014 so you can find this talk in there um so those of you want the",
    "start": "2010600",
    "end": "2017639"
  },
  {
    "text": "slides particularly to look at the little detail bits all there for you so you can reference it later the idea",
    "start": "2017639",
    "end": "2023159"
  },
  {
    "text": "behind some of the blue text is so you can reference the material later with your colleagues who are crying when you",
    "start": "2023159",
    "end": "2029760"
  },
  {
    "text": "tell them that what Ian said right okay the next test you write in tdd is",
    "start": "2029760",
    "end": "2036480"
  },
  {
    "text": "just the most the obvious step that you can make towards implementing a requirement given by a use case or a",
    "start": "2036480",
    "end": "2041639"
  },
  {
    "text": "user story right however you basically decide to take in your requirements use cases user storage whatever it is you",
    "start": "2041639",
    "end": "2047840"
  },
  {
    "text": "use doesn't matter you've got some criteria from a customer that says well this is the thing we want right and then",
    "start": "2047840",
    "end": "2054480"
  },
  {
    "text": "what you need to do is say okay how do I make the thing we want what are the behaviors that entails what would be a",
    "start": "2054480",
    "end": "2060398"
  },
  {
    "text": "nice contract for everyone that really expressed that so that they could really understand that's what we're trying to",
    "start": "2060399",
    "end": "2066320"
  },
  {
    "text": "basically build right so think about how the quality of the contract from the point of view of",
    "start": "2066320",
    "end": "2071358"
  },
  {
    "text": "someone using the methods that you're writing to implement it make it obvious how it works right that's the point of",
    "start": "2071359",
    "end": "2077720"
  },
  {
    "text": "tdd you can in when you write the test you can really explore for yourself wonder if that API is obvious does it",
    "start": "2077720",
    "end": "2083280"
  },
  {
    "text": "make sense is it self-documenting you can do all that stuff that's what the test is for exploring the contract not",
    "start": "2083280",
    "end": "2089440"
  },
  {
    "text": "for adding mocks and substitutes okay so the next test right",
    "start": "2089440",
    "end": "2094960"
  },
  {
    "text": "typically one of the problems in development is is always what do I do next how do I start right you start by",
    "start": "2094960",
    "end": "2101040"
  },
  {
    "text": "saying what is the behavior I need to implement what is the simplest test I could write what is the smallest bit of that functionality I could get under",
    "start": "2101040",
    "end": "2107400"
  },
  {
    "text": "test right so what is the smallest challenge the reason the smallest challenge is",
    "start": "2107400",
    "end": "2112440"
  },
  {
    "text": "because comfort about the number of lines of code you are adding defect localization so try and moveing smaller chunks so you get better defect",
    "start": "2112440",
    "end": "2119560"
  },
  {
    "text": "localization okay and the user story or use case tells you what the requirements are right so one one one or two of you",
    "start": "2119560",
    "end": "2127359"
  },
  {
    "text": "may be saying oh that's interesting when I do uh my kind of development I end up",
    "start": "2127359",
    "end": "2132680"
  },
  {
    "text": "with some unit tests that test all the little methods of my classes then I have specflow or cucumber or something and",
    "start": "2132680",
    "end": "2140000"
  },
  {
    "text": "that tests all the behaviors that the the actual behaviors wouldn't that be better in shouldn't I be using that no",
    "start": "2140000",
    "end": "2146560"
  },
  {
    "text": "I'll talk about that in a minute okay the other thing that people Miss is",
    "start": "2146560",
    "end": "2152440"
  },
  {
    "text": "this you do not write new tests if you introduce methods when refractor to clean code so what happens typically",
    "start": "2152440",
    "end": "2159839"
  },
  {
    "text": "what in the best world right when I get to the green phase I write this method that's about like a 100 lines long uh",
    "start": "2159839",
    "end": "2168000"
  },
  {
    "text": "Scrolls over several Pages probably has lines that are too long and is awful right frankly awful a chat GPT has",
    "start": "2168000",
    "end": "2174000"
  },
  {
    "text": "generated at for me and I've just cut and pasted the goddamn thing in right do that honestly it's perfectly fine Ian go",
    "start": "2174000",
    "end": "2180000"
  },
  {
    "text": "and tell your boss Ian said that's fine you can get chat GPT to tell you the answer right get how a co-pilot will",
    "start": "2180000",
    "end": "2186880"
  },
  {
    "text": "look at your test for you and it will write the answer based on the test the better you make the test in terms of",
    "start": "2186880",
    "end": "2192280"
  },
  {
    "text": "behavior the easier chck copilot's going to find it to do that for you right but",
    "start": "2192280",
    "end": "2197520"
  },
  {
    "text": "then what you do is say that's really unmaintainable code and I can't possibly ship that I'd like to express intent so",
    "start": "2197520",
    "end": "2203079"
  },
  {
    "text": "I will take this chunk of methods and refactor it into a refactor into a method expresses intent right I don't",
    "start": "2203079",
    "end": "2209960"
  },
  {
    "text": "need a new test refactoring is a safe operation I don't introduce branches like if statements and things like that",
    "start": "2209960",
    "end": "2217040"
  },
  {
    "text": "that code is under test it's the test that I wrote at the beginning of this process",
    "start": "2217040",
    "end": "2223160"
  },
  {
    "text": "when I it's it's covered because essentially I'm not introducing a new Branch or path right I'm just saying be",
    "start": "2223160",
    "end": "2230000"
  },
  {
    "text": "nice if that was a method explain stuff typically if you have a language that has access modifiers that may be a",
    "start": "2230000",
    "end": "2235720"
  },
  {
    "text": "private or internal to the module method right you're typically not exposing it to Consumers it's just clearing up how",
    "start": "2235720",
    "end": "2242280"
  },
  {
    "text": "you implement if I have a 100 lines of code I might say hm that looks like at quite a separate",
    "start": "2242280",
    "end": "2248400"
  },
  {
    "text": "responsibility it's going to be easier to maintain that by making a new class I can refactor something into a class",
    "start": "2248400",
    "end": "2254720"
  },
  {
    "text": "right typical way to do that extract the method figure out basically what in the method should be the state that belongs",
    "start": "2254720",
    "end": "2261400"
  },
  {
    "text": "to the class and should be hidden create a new class put the method across and effectively threw a",
    "start": "2261400",
    "end": "2267280"
  },
  {
    "text": "Constructor set the behavior it depends upon right I still don't need a new",
    "start": "2267280",
    "end": "2272680"
  },
  {
    "text": "test right it is covered by the original t test that expresses the",
    "start": "2272680",
    "end": "2278359"
  },
  {
    "text": "behavior you should have many less tests than you do because you are effectively",
    "start": "2278359",
    "end": "2283560"
  },
  {
    "text": "only testing the observable Behavior because I might break it into two classes and you might go Ah that's made",
    "start": "2283560",
    "end": "2290839"
  },
  {
    "text": "it a bit complicated I prefer to see they all in line it' be easier to understand I'm going to in line all that",
    "start": "2290839",
    "end": "2296319"
  },
  {
    "text": "and that's perfectly valid as a team we will eventually land on what is the most",
    "start": "2296319",
    "end": "2302079"
  },
  {
    "text": "maintainable way we should do this right but you'll be frustrated won't do that",
    "start": "2302079",
    "end": "2307319"
  },
  {
    "text": "if someone makes a new class and it has tests be go like well I have to delete all the tests and right don't do",
    "start": "2307319",
    "end": "2314520"
  },
  {
    "text": "that refactoring is changed implementation that changes the Behavior Uh but implication we must be covered by",
    "start": "2315280",
    "end": "2321200"
  },
  {
    "text": "the existing tests um including a new class right so the reason you're not",
    "start": "2321200",
    "end": "2326839"
  },
  {
    "text": "refactoring quite often is because you're not understanding refactoring effectively you shouldn't be breaking your",
    "start": "2326839",
    "end": "2333520"
  },
  {
    "text": "implementation all right customers write acceptance tests cucumber spef plans",
    "start": "2333520",
    "end": "2340280"
  },
  {
    "text": "okay uh I am sorry okay so where do these come from",
    "start": "2340280",
    "end": "2347160"
  },
  {
    "text": "originally they were called functional tests because each acceptance test Tri has to test the functionality of a user Story the idea was acceptance tests are",
    "start": "2347160",
    "end": "2354520"
  },
  {
    "text": "modeled and possibly even written by a customer thus customer test nowadays we don't have XP style customers nowadays",
    "start": "2354520",
    "end": "2361000"
  },
  {
    "text": "we have product owners or product managers or whatever your particular flavor is called at your organization uh",
    "start": "2361000",
    "end": "2366200"
  },
  {
    "text": "the same thing they're just a proxy for the customer we began to introduce proxies because we couldn't get hold of actual customers right",
    "start": "2366200",
    "end": "2374319"
  },
  {
    "text": "okay so this idea from XP was originally you got some on-site customer representative of the customer right",
    "start": "2374319",
    "end": "2380440"
  },
  {
    "text": "they were domain expert and they could answer questions about what the requirement was right and the idea is",
    "start": "2380440",
    "end": "2386480"
  },
  {
    "text": "the customer defines the acceptance criteria haven't we just said that tdd",
    "start": "2386480",
    "end": "2391680"
  },
  {
    "text": "should be working against acceptance criteria why do I need this additional indirection of acceptance test then",
    "start": "2391680",
    "end": "2397680"
  },
  {
    "text": "isn't what haven't I already got tests with acceptance criteria oh okay I",
    "start": "2397680",
    "end": "2404240"
  },
  {
    "text": "understand they're tests that are written by the product owner or the customer they write them not the",
    "start": "2404240",
    "end": "2409960"
  },
  {
    "text": "developer how many of you have tests written in Spec flow Fitness something like that come on be",
    "start": "2409960",
    "end": "2415240"
  },
  {
    "text": "brave okay keep your hands up if the customer genuinely goes and writes those",
    "start": "2415240",
    "end": "2420480"
  },
  {
    "text": "tests right none of you every time I ask this question I've never had a hand in the air but that is their point",
    "start": "2420480",
    "end": "2427079"
  },
  {
    "text": "that is why you that is why those tools exist for the customer to write the test directly if you're writing the test as a",
    "start": "2427079",
    "end": "2433760"
  },
  {
    "text": "developer just use your xunit junit nunit tool right there's no point in you",
    "start": "2433760",
    "end": "2440359"
  },
  {
    "text": "having the indirection of taking English language trying to push it through",
    "start": "2440359",
    "end": "2446000"
  },
  {
    "text": "something where effectively to become a real test they're hard to maintain they break all the time",
    "start": "2446000",
    "end": "2453240"
  },
  {
    "text": "right so James Shaw was one of the guys that wrote fit fit was a very early basically acceptance testing Tool uh it",
    "start": "2453560",
    "end": "2461319"
  },
  {
    "text": "essentially worked by effectively right this origin by using HTML tables later basically use wikis and it allowed",
    "start": "2461319",
    "end": "2467640"
  },
  {
    "text": "customers to write tests so James has skin in the game right James actually is one of the people that wrote one of",
    "start": "2467640",
    "end": "2473200"
  },
  {
    "text": "these tools and he said there are two problems customers don't participate which eliminates the purpose of",
    "start": "2473200",
    "end": "2478720"
  },
  {
    "text": "acceptance testing and they create a significant maintenance burden meaning acceptance testing is not worth the cost",
    "start": "2478720",
    "end": "2485160"
  },
  {
    "text": "I no longer use a commender I forced teams to try and do specflow and Fitness in my in my in my younger years they",
    "start": "2485160",
    "end": "2492240"
  },
  {
    "text": "hated me and I understand why because I was being an idiot right someone told me",
    "start": "2492240",
    "end": "2497839"
  },
  {
    "text": "last night 27s about Peete Dunning Krueger for men I I can believe it right so um",
    "start": "2497839",
    "end": "2505640"
  },
  {
    "text": "uh there's no point in using things like cucumber style or fit right unless the",
    "start": "2505640",
    "end": "2511079"
  },
  {
    "text": "customer is actively participating writing the testt and the part the problem is they're much harder to maintain",
    "start": "2511079",
    "end": "2516960"
  },
  {
    "text": "than your unit test suite and because they're much harder to maintain you effectively pay a huge cost but you're",
    "start": "2516960",
    "end": "2522640"
  },
  {
    "text": "getting no benefit because it's developers reading the test and they could have just read it in the xunit tool Kemp Beck well this is me bet you",
    "start": "2522640",
    "end": "2531000"
  },
  {
    "text": "uh ATD is paral because implies that tdd does not deal with acceptance criteria for user Stories part of the problem",
    "start": "2531000",
    "end": "2536560"
  },
  {
    "text": "with this whole acceptance test model in specflow and fitness other places is it implies well what are unit what are the",
    "start": "2536560",
    "end": "2542359"
  },
  {
    "text": "other tests for there must be units then they're the small bits that build up to how I implement this right so we've kind",
    "start": "2542359",
    "end": "2548680"
  },
  {
    "text": "of helped reinforce this broken automated testing model of how we do tdd its units",
    "start": "2548680",
    "end": "2556520"
  },
  {
    "text": "integration tests and everything else rather than developer and programmer tests by introducing these tools which means we're asking the question well",
    "start": "2556520",
    "end": "2562880"
  },
  {
    "text": "what is what the developer tests for then right or there must be units if we just said everybody test behavior in TD",
    "start": "2562880",
    "end": "2570040"
  },
  {
    "text": "we'd realize we didn't need these tools excuse me",
    "start": "2570040",
    "end": "2576760"
  },
  {
    "text": "get back again in tdd by example so we already knew from existing experience",
    "start": "2576760",
    "end": "2582240"
  },
  {
    "text": "about the practice at the point when Kent writes the book right an aspect of",
    "start": "2582240",
    "end": "2587680"
  },
  {
    "text": "tdd is the length of cycle between test and feedback if the customer writes a test in 10 days later it finally Works",
    "start": "2587680",
    "end": "2594160"
  },
  {
    "text": "you're staring at a Red Bar most of the time right and that is my experience of them what happens is we go and write a",
    "start": "2594160",
    "end": "2599880"
  },
  {
    "text": "sweet tests they can't pass until we've effectively implemented all of the code",
    "start": "2599880",
    "end": "2605160"
  },
  {
    "text": "so they're red because they're red we don't do it until basically we want to ship when we want to ship there's this",
    "start": "2605160",
    "end": "2611599"
  },
  {
    "text": "mad scramble to try and write these tests afterwards they're not driving anything",
    "start": "2611599",
    "end": "2616880"
  },
  {
    "text": "right so these tests spend all their time red and they are hard to maintain okay so what should you do customers",
    "start": "2616880",
    "end": "2624119"
  },
  {
    "text": "should specify acceptance criteria so James again customers illustrate their descriptions with concrete examples",
    "start": "2624119",
    "end": "2629640"
  },
  {
    "text": "programmers use these examples to guide their work sometimes programmers use the examples directly in their tests more",
    "start": "2629640",
    "end": "2635359"
  },
  {
    "text": "often programmers use examples as a guide writing a multitude of more Focus focused program entric tests as they use",
    "start": "2635359",
    "end": "2641480"
  },
  {
    "text": "tdd right sometimes this is called example driven development as well as as well um",
    "start": "2641480",
    "end": "2648559"
  },
  {
    "text": "really it's just how it how we should have been doing tdd all along right and that helps give us self-documenting",
    "start": "2648559",
    "end": "2655359"
  },
  {
    "text": "code all right another fallacy it doesn't matter if you write your test afterwards right see a lot of developers",
    "start": "2655359",
    "end": "2661720"
  },
  {
    "text": "do this they say yeah I I I do tdd but I write the tests after because that's the same I the same effect right um I still",
    "start": "2661720",
    "end": "2668040"
  },
  {
    "text": "under under test I know some really good developers that say this right okay a development process that",
    "start": "2668040",
    "end": "2674680"
  },
  {
    "text": "entails this is what test after is a development process that entails executing unit test after the development of the corresponding units",
    "start": "2674680",
    "end": "2680839"
  },
  {
    "text": "is finished",
    "start": "2680839",
    "end": "2686319"
  },
  {
    "text": "okay let's do this one implicitly what this implies is that I have chosen to do",
    "start": "2686559",
    "end": "2692359"
  },
  {
    "text": "my design not by exploration through tdd but by upfront design which I then",
    "start": "2692359",
    "end": "2698640"
  },
  {
    "text": "Implement and then write test to preserve so the design decisions I have made have not been Guided by tests and",
    "start": "2698640",
    "end": "2705359"
  },
  {
    "text": "not been Guided by Discovery through exploration okay it's a long feedback",
    "start": "2705359",
    "end": "2712119"
  },
  {
    "text": "loop because I don't write the test until the end so I'm getting no feedback on the work as I go along I could go in",
    "start": "2712119",
    "end": "2717200"
  },
  {
    "text": "very much the wrong direction be faced with a significant amount of rework tdd is guiding you because it's saying only",
    "start": "2717200",
    "end": "2724760"
  },
  {
    "text": "the things that the except criteria require are things that you should be writing",
    "start": "2724760",
    "end": "2730520"
  },
  {
    "text": "not stuff and so what happens is if you write code that's not forced by the",
    "start": "2730520",
    "end": "2735839"
  },
  {
    "text": "given requirements which is what tddd gives you you're engaging in speculation most likely you are wrong you find end",
    "start": "2735839",
    "end": "2742240"
  },
  {
    "text": "up doing rework at the end typically under this kind of model rework is about 30% of the time that you spent",
    "start": "2742240",
    "end": "2749160"
  },
  {
    "text": "developing so for 10 days that's about 3 days worth of rework because you realize this doesn't actually implement the",
    "start": "2749160",
    "end": "2755200"
  },
  {
    "text": "requirements and often you end up with speculative code that isn't",
    "start": "2755200",
    "end": "2760880"
  },
  {
    "text": "needed because you just say oh at some point maybe we'll need to do this so I add a whole L of code that does that",
    "start": "2760880",
    "end": "2769440"
  },
  {
    "text": "right so you need to do two things right um let me just skip on that one I",
    "start": "2769440",
    "end": "2776920"
  },
  {
    "text": "think okay um you need to have design help and you need to have scope",
    "start": "2776920",
    "end": "2783720"
  },
  {
    "text": "control tdd gives you Scope control because it says you only write tests in",
    "start": "2783720",
    "end": "2788760"
  },
  {
    "text": "response to there being an acceptance criteria that you need to implement so I don't write any other code I only write",
    "start": "2788760",
    "end": "2794640"
  },
  {
    "text": "code that the customer needs I don't speculate about future",
    "start": "2794640",
    "end": "2800079"
  },
  {
    "text": "implementation because it's almost certain I have to rework that right and my design evolves to be only as",
    "start": "2800079",
    "end": "2807280"
  },
  {
    "text": "complicated as I need to meet those needs because effective my design is",
    "start": "2807280",
    "end": "2813000"
  },
  {
    "text": "informed by the test as I go so our principle is only write production code in response to a test",
    "start": "2813000",
    "end": "2819920"
  },
  {
    "text": "right and only write a a test in response to a requirement so I basically don't write",
    "start": "2819920",
    "end": "2827240"
  },
  {
    "text": "speculative code right I have some acceptance criteria and that's what drives me to towards done and so I have",
    "start": "2827240",
    "end": "2834640"
  },
  {
    "text": "my my contract which I'm exposing okay so Kent Beck again need a",
    "start": "2834640",
    "end": "2840559"
  },
  {
    "text": "way to think about design need a way to think about scope control tdd is basically designed by contract right",
    "start": "2840559",
    "end": "2848160"
  },
  {
    "text": "here is the contract I'm exposing to my collaborators I don't want to write more",
    "start": "2848160",
    "end": "2853319"
  },
  {
    "text": "code than is G needed by given requirements you want 100% test coverage",
    "start": "2853319",
    "end": "2859000"
  },
  {
    "text": "of your code this is a funny fallacy but it is one right so um even Kent says oh",
    "start": "2859000",
    "end": "2864440"
  },
  {
    "text": "look tdd if it's followed basically religiously should result in 100% statement coverage right if you can't",
    "start": "2864440",
    "end": "2870400"
  },
  {
    "text": "write code unless there's basically a requirement to drive that code and you're not writing speculative code then",
    "start": "2870400",
    "end": "2878680"
  },
  {
    "text": "any code you write is in response to a test and should be Behavior that's needed by that test therefore you shouldn't have uncovered code right if",
    "start": "2878680",
    "end": "2885319"
  },
  {
    "text": "in your code um code coverage tools help keep you honest right it's very easy to go oh I better have a check for if null",
    "start": "2885319",
    "end": "2891280"
  },
  {
    "text": "or whatever there right and you don't have the actual test that conforms to that and what you have to do is go back sometimes and say okay I need a test",
    "start": "2891280",
    "end": "2897680"
  },
  {
    "text": "about that behavior we all we all get into that right but in theory if you're",
    "start": "2897680",
    "end": "2902839"
  },
  {
    "text": "not writing code code unless the test demands it then you should get 100% coverage out the box",
    "start": "2902839",
    "end": "2910040"
  },
  {
    "text": "right okay but I would say there are plenty of",
    "start": "2910040",
    "end": "2915559"
  },
  {
    "text": "teams out there that don't have 100% code coverage that are doing a great job so so where does this discrepancy come",
    "start": "2915559",
    "end": "2921359"
  },
  {
    "text": "between the two right so this is why tdd is a tool for",
    "start": "2921359",
    "end": "2928880"
  },
  {
    "text": "use at some points in when you're doing development but not all points tdd has",
    "start": "2928880",
    "end": "2934079"
  },
  {
    "text": "specific characteristics and does some things very very well does other things very badly okay so what TD gives you is",
    "start": "2934079",
    "end": "2942640"
  },
  {
    "text": "what's called Fast binary feedback binary green or red either the test passes or the test fa test failes binary",
    "start": "2942640",
    "end": "2949960"
  },
  {
    "text": "feedback is very easy to understand right I made I added 10 lines of code",
    "start": "2949960",
    "end": "2955160"
  },
  {
    "text": "half my test went red there's probably a problem in that 10 lines of code non-binary feedback is stuff like you",
    "start": "2955160",
    "end": "2961720"
  },
  {
    "text": "know you get a whole range of rows come out and you have to kind of manually compare them or whatever and or you're",
    "start": "2961720",
    "end": "2968200"
  },
  {
    "text": "looking at basically a screen and trying to go is that is that positioned right effective Etc so that's non-binary",
    "start": "2968200",
    "end": "2974559"
  },
  {
    "text": "feedback it's quite often giving you um information which you have to then interpret logs for example if you if you",
    "start": "2974559",
    "end": "2981119"
  },
  {
    "text": "are nonbinary feedback right so it turns out the binary feedback particularly if you can get it",
    "start": "2981119",
    "end": "2988160"
  },
  {
    "text": "in like under 30 seconds is great because it keeps guiding your development without taking too much time and context shifting for you out of your",
    "start": "2988160",
    "end": "2994880"
  },
  {
    "text": "head right so don't use tdd to drive visual output",
    "start": "2994880",
    "end": "3001559"
  },
  {
    "text": "you're not exploring anything when you try and test the user interface basically with effectively right someone",
    "start": "3001559",
    "end": "3006960"
  },
  {
    "text": "some ux person has said make this happen right the exploration already been done by the ux person you are just",
    "start": "3006960",
    "end": "3014000"
  },
  {
    "text": "implementing so use exploratory testing because these things are fragile and very slow they're not very good for",
    "start": "3014000",
    "end": "3019520"
  },
  {
    "text": "binary testing um if you need to have proof against regression that's when you",
    "start": "3019520",
    "end": "3024720"
  },
  {
    "text": "use classical automation right that test after approach similarly if you're doing",
    "start": "3024720",
    "end": "3030160"
  },
  {
    "text": "spikes or throw away code don't use TTD that's not its purpose right just explore the goddamn",
    "start": "3030160",
    "end": "3036000"
  },
  {
    "text": "thing use a CLI to do it um",
    "start": "3036000",
    "end": "3042240"
  },
  {
    "text": "integration right there will be points right as particularly if you go the tdd route saying this needs to be fast and",
    "start": "3042240",
    "end": "3050480"
  },
  {
    "text": "and nonfragile where you may say that IO I'm going to replace with a mock or a stub and then I'm need to go and",
    "start": "3050480",
    "end": "3056680"
  },
  {
    "text": "Implement that so my access to the database for example or my access to a messaging system or whatever",
    "start": "3056680",
    "end": "3062839"
  },
  {
    "text": "right to implement that I've now got an interface which tells me whatever what",
    "start": "3062839",
    "end": "3068280"
  },
  {
    "text": "the actual code under test needs and I've got an SDK somewhere that tells me how I actually Implement that you're not",
    "start": "3068280",
    "end": "3075720"
  },
  {
    "text": "exploring anything the contract already exists right what you want to do is just",
    "start": "3075720",
    "end": "3080880"
  },
  {
    "text": "implement it so implement it debug it if you have to follow the SDC okay and then",
    "start": "3080880",
    "end": "3086319"
  },
  {
    "text": "afterwards write some regression tests to say I want to keep I want to keep this working so that's a point where you",
    "start": "3086319",
    "end": "3092440"
  },
  {
    "text": "may want to use classical automated testing right and do a test after",
    "start": "3092440",
    "end": "3098119"
  },
  {
    "text": "approach okay and don't drive third party code right you bought third party",
    "start": "3098119",
    "end": "3104000"
  },
  {
    "text": "code to speed things up don't test drive third party code so what this leads to",
    "start": "3104000",
    "end": "3112040"
  },
  {
    "text": "usually is what we call the testing pyramid right some folks are down on the testing pyramid I still am good on the",
    "start": "3112040",
    "end": "3118240"
  },
  {
    "text": "testing pyramid okay so what happens is as you go up the pyramid your time to",
    "start": "3118240",
    "end": "3123319"
  },
  {
    "text": "feedback increases it's slower to get the results of these tests slow means",
    "start": "3123319",
    "end": "3129760"
  },
  {
    "text": "context shifting for a developer which is expensive the whole thing you get someone really interrupts you for 10",
    "start": "3129760",
    "end": "3134920"
  },
  {
    "text": "minutes and you're like oh where was I right take 20 minutes to get back we don't want that so slow means context",
    "start": "3134920",
    "end": "3141319"
  },
  {
    "text": "shifting and basically effort means how binary was it how much work do I have to",
    "start": "3141319",
    "end": "3147119"
  },
  {
    "text": "do to interpret the results and fr agility how much am I getting false posit positives where test breaks yeah",
    "start": "3147119",
    "end": "3155119"
  },
  {
    "text": "because basically we didn't have access to that QA environment or whatever right more fragile something is the more time",
    "start": "3155119",
    "end": "3163880"
  },
  {
    "text": "it will take us to essentially investigate every time go oh yeah those",
    "start": "3163880",
    "end": "3168960"
  },
  {
    "text": "tests always break right we've all got them in suet somewhere someone goes that test is ready someone goes yeah that",
    "start": "3168960",
    "end": "3174359"
  },
  {
    "text": "always breaks don't worry about it right um and that is a burden right because now I don't trust results Etc so",
    "start": "3174359",
    "end": "3181880"
  },
  {
    "text": "developer tests right have some acceptance criteria look at the next smallest bit",
    "start": "3181880",
    "end": "3188920"
  },
  {
    "text": "of behavior I could Implement write a failing test for that bit of behavior get it to pass refactor",
    "start": "3188920",
    "end": "3195880"
  },
  {
    "text": "introducing lots of lovely new classes and methods against that test I've already got That's The Sweet Spot that's",
    "start": "3195880",
    "end": "3202280"
  },
  {
    "text": "where you want to be most of the time some things will not be suitable for that",
    "start": "3202280",
    "end": "3208040"
  },
  {
    "text": "testing right so where you had to substitute IO where you need to vent to",
    "start": "3208040",
    "end": "3213079"
  },
  {
    "text": "Wi um confirmation that things are working and all the configuration works correctly so just basically get that",
    "start": "3213079",
    "end": "3219119"
  },
  {
    "text": "working with your debugger and then write a classic automated test which means you can then begin to use that unit integration or whatever vocabulary",
    "start": "3219119",
    "end": "3225760"
  },
  {
    "text": "if you need to right to cover that then monitoring and alerting right",
    "start": "3225760",
    "end": "3233160"
  },
  {
    "text": "your logs are really valuable sources of information right observability from traces is a",
    "start": "3233160",
    "end": "3238400"
  },
  {
    "text": "already valuable source of information use those to then test your code and then",
    "start": "3238400",
    "end": "3244960"
  },
  {
    "text": "finally at the top manual testing manual testing is kind of dying unfortunate there a bit of slight rant from me right",
    "start": "3244960",
    "end": "3251880"
  },
  {
    "text": "um what's happened is I mean even Microsoft killed its software engineering test and now we effectively just have developers everywhere and a",
    "start": "3251880",
    "end": "3258760"
  },
  {
    "text": "number of teams that have genuine QA practitioners is becoming vanishingly small and it's an awful decision because",
    "start": "3258760",
    "end": "3265400"
  },
  {
    "text": "we as developers tend to basically be people that go I will make this pass it will succeed what you need is someone",
    "start": "3265400",
    "end": "3272480"
  },
  {
    "text": "that goes I wonder what happens if I do this really crazy thing and you looking at this person going why did you do that",
    "start": "3272480",
    "end": "3278760"
  },
  {
    "text": "and it breaks obviously right and the kind of people that naturally in life just seem to break everything around them because they go oh I wonder what",
    "start": "3278760",
    "end": "3285480"
  },
  {
    "text": "happens if I press the button right uh and it's a real shame that we are losing those people but we need those a certain",
    "start": "3285480",
    "end": "3291880"
  },
  {
    "text": "number of those to actually basically do the kind of crazy stuff that you wouldn't just think of ever doing to the",
    "start": "3291880",
    "end": "3297720"
  },
  {
    "text": "thing right and those that's manual testing manual testing really is still valuable it's just you can't keep doing",
    "start": "3297720",
    "end": "3304680"
  },
  {
    "text": "it all the time right if you want a continuous deployment model you can't keep um doing man test if you build",
    "start": "3304680",
    "end": "3311040"
  },
  {
    "text": "something new it's okay to manually test that explore it see what was wrong and then effectively get that kind of",
    "start": "3311040",
    "end": "3316720"
  },
  {
    "text": "feedback before you ship to customers to get feedback right okay so let's",
    "start": "3316720",
    "end": "3323640"
  },
  {
    "text": "review the Comm fallacies people have about tdd is that it's based around unit",
    "start": "3323640",
    "end": "3330400"
  },
  {
    "text": "tests right that's a concept from uh test automation but it's not applicable",
    "start": "3330400",
    "end": "3336920"
  },
  {
    "text": "to tdd that the trigger for a new test is a new function before I can write a new",
    "start": "3336920",
    "end": "3342200"
  },
  {
    "text": "function I have to write a new test right is a typical problem the idea that",
    "start": "3342200",
    "end": "3347599"
  },
  {
    "text": "essentially you're focusing tests around functions makes them very hard to read right very hard to understand when you",
    "start": "3347599",
    "end": "3353319"
  },
  {
    "text": "come back to them customers write acceptance tests right it's less of a fallacy just and more of a it just",
    "start": "3353319",
    "end": "3359839"
  },
  {
    "text": "doesn't happen right uh but customers right acceptance test means just give up on those tools",
    "start": "3359839",
    "end": "3366240"
  },
  {
    "text": "like SPL for Fitness right honestly really just give up it doesn't matter if you test first or test there are people",
    "start": "3366240",
    "end": "3373280"
  },
  {
    "text": "in the industry make they're living who hate me right now um it doesn't matter if you test first or test last right there're two quite different strategies",
    "start": "3373280",
    "end": "3380079"
  },
  {
    "text": "right test first is about design or scope control test last is about basically regression proofing yourself",
    "start": "3380079",
    "end": "3385720"
  },
  {
    "text": "against change right they have their point in a life cycle of doing software development isn't the same point and you",
    "start": "3385720",
    "end": "3393160"
  },
  {
    "text": "want 100% test coverage of your code right actually that may not be the most effective way to get feedback on all of",
    "start": "3393160",
    "end": "3399520"
  },
  {
    "text": "your code do the most effective thing to get feedback if you find yourself writing a whole lot of tests and go God",
    "start": "3399520",
    "end": "3405760"
  },
  {
    "text": "it would just be easy to run it just run it run it and then come back and figure out how you get it under aggression",
    "start": "3405760",
    "end": "3411799"
  },
  {
    "text": "right so developers write developer or program a test tests right tests that essentially are",
    "start": "3411799",
    "end": "3419160"
  },
  {
    "text": "be exploring the behaviors of the system the trigger for a new test is a new",
    "start": "3419160",
    "end": "3424280"
  },
  {
    "text": "Behavior the smallest increment you can think to get in that behavior under control customers write acceptance",
    "start": "3424280",
    "end": "3432359"
  },
  {
    "text": "criteria right your product owner or someone should be telling you what success looks like and you put that into",
    "start": "3432359",
    "end": "3438119"
  },
  {
    "text": "your developer tests you only write production code in response to a test right but not all of",
    "start": "3438119",
    "end": "3447640"
  },
  {
    "text": "the code should be driven by tdd so where we want to get production code under tdd control what we do is",
    "start": "3447640",
    "end": "3453200"
  },
  {
    "text": "effectively we use tdd to do it where we don't think that's the right model right my one typical most typical one is a",
    "start": "3453200",
    "end": "3459280"
  },
  {
    "text": "user interface user interfaces typically a designer has helped us design them we are just implementing that there is no",
    "start": "3459280",
    "end": "3465319"
  },
  {
    "text": "design by contract the contract exists typically you just want to get that running and then regression proof it there's no real exploration of the user",
    "start": "3465319",
    "end": "3472880"
  },
  {
    "text": "interface what's your red green Factor cycle look like under that model right I Implement a failing",
    "start": "3472880",
    "end": "3479480"
  },
  {
    "text": "UI uh I then get the UI to pass and then I refactor the UI to improve its design",
    "start": "3479480",
    "end": "3486160"
  },
  {
    "text": "doesn't make any sense right so just to use um automated testing when you do",
    "start": "3486160",
    "end": "3491720"
  },
  {
    "text": "that all right and that's the end uh I think that is on time so I won't invite",
    "start": "3491720",
    "end": "3498359"
  },
  {
    "text": "questions but feel free to wander up right and and for those of you that um",
    "start": "3498359",
    "end": "3503920"
  },
  {
    "text": "you know say oh that's a really good idea the slides are available you can talk to your colleagues about it there",
    "start": "3503920",
    "end": "3508960"
  },
  {
    "text": "are versions of me doing this talk online in the pandemic right it's me in my room huddled against the you know the",
    "start": "3508960",
    "end": "3515160"
  },
  {
    "text": "impending doom uh if you need to share with anybody but I think you might better hopefully they'll record this so you can share it um my other talk uh",
    "start": "3515160",
    "end": "3523079"
  },
  {
    "text": "where did it all go wrong is a bit more of a rant if you like a rant that's more of a rant to share with your colleagues",
    "start": "3523079",
    "end": "3528200"
  },
  {
    "text": "instead and then they can come to this and get specific actionable advice all right thanks very",
    "start": "3528200",
    "end": "3533720"
  },
  {
    "text": "much",
    "start": "3533720",
    "end": "3536720"
  },
  {
    "text": "for",
    "start": "3563640",
    "end": "3566640"
  },
  {
    "text": "for",
    "start": "3593640",
    "end": "3596640"
  },
  {
    "text": "for",
    "start": "3623559",
    "end": "3626559"
  },
  {
    "text": "e",
    "start": "3743359",
    "end": "3746359"
  },
  {
    "text": "e",
    "start": "3953079",
    "end": "3956079"
  },
  {
    "text": "e",
    "start": "3983000",
    "end": "3986000"
  },
  {
    "text": "e",
    "start": "4072920",
    "end": "4075920"
  },
  {
    "text": "e",
    "start": "4102839",
    "end": "4105838"
  },
  {
    "text": "for",
    "start": "4162719",
    "end": "4165719"
  },
  {
    "text": "e",
    "start": "4192719",
    "end": "4195719"
  },
  {
    "text": "e",
    "start": "4222640",
    "end": "4225640"
  },
  {
    "text": "for",
    "start": "4252640",
    "end": "4255640"
  },
  {
    "text": "e",
    "start": "4312560",
    "end": "4315560"
  }
]