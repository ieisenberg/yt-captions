[
  {
    "text": "welcome to software and database refactor patterns my name is bill penberthy and i'm a dot",
    "start": "6480",
    "end": "13040"
  },
  {
    "text": "net developer advocate with aws so that means my job is really working with net developers and helping them",
    "start": "13040",
    "end": "18720"
  },
  {
    "text": "understand how best to take advantage of aws services uh we then take that interaction back",
    "start": "18720",
    "end": "25039"
  },
  {
    "text": "into our internal teams and we work with them to make our net developers experience better",
    "start": "25039",
    "end": "30880"
  },
  {
    "text": "prior to joining aws i probably had spent oh wow 25 plus years in software with",
    "start": "30880",
    "end": "40640"
  },
  {
    "text": "most of that doing development with companies ranging from new startups to government agencies to",
    "start": "40640",
    "end": "48000"
  },
  {
    "text": "established enterprises um this gave me a lot of exposure to how useful software patterns are when",
    "start": "48000",
    "end": "54000"
  },
  {
    "text": "developing regardless of what industry or company what the level of technical maturation",
    "start": "54000",
    "end": "60239"
  },
  {
    "text": "in the company is what development languages or frameworks you use software pattern is a way of showing",
    "start": "60239",
    "end": "66560"
  },
  {
    "text": "intent when your intent is to refactor your software such as moving to microservices or",
    "start": "66560",
    "end": "72960"
  },
  {
    "text": "something else like that it makes sense to evaluate your process in the light of well-reasoned refactor software patterns",
    "start": "72960",
    "end": "79119"
  },
  {
    "text": "that's kind of what we're going to go over today so the first thing we'll do is we'll start by spending some time with some",
    "start": "79119",
    "end": "84799"
  },
  {
    "text": "med with some major software refactor patterns we'll then tackle some database refactor patterns",
    "start": "84799",
    "end": "91280"
  },
  {
    "text": "we'll then briefly go over some of the other things to consider when choosing refactor patterns external influences and things that",
    "start": "91280",
    "end": "97759"
  },
  {
    "text": "could could impact the way that you would adopt your refactor patterns and lastly we'll do a",
    "start": "97759",
    "end": "103840"
  },
  {
    "text": "quick walk through an example using the patterns in in real life",
    "start": "103840",
    "end": "108960"
  },
  {
    "text": "so let's jump right into this and start going through some of the most common software refactor patterns",
    "start": "109600",
    "end": "115280"
  },
  {
    "text": "so these strategies or refactor design patterns are different ways in which you can uh",
    "start": "115280",
    "end": "121840"
  },
  {
    "text": "change your system as you consider the evolution of of your application in your entire system and this is certainly not a a",
    "start": "121840",
    "end": "128720"
  },
  {
    "text": "complete list but they offer different approaches for refactoring systems",
    "start": "128720",
    "end": "133840"
  },
  {
    "text": "these patterns are also not exclusive you'll find as you work through the changes that you'll use many of these if not all",
    "start": "133840",
    "end": "140640"
  },
  {
    "text": "sometimes together so the patterns that we're going to go over for software refactoring today are",
    "start": "140640",
    "end": "146319"
  },
  {
    "text": "strangler fig branch by abstraction parallel run change data capture ui composition",
    "start": "146319",
    "end": "153920"
  },
  {
    "text": "and decorating collaborator and just as a warning as i go through",
    "start": "153920",
    "end": "159599"
  },
  {
    "text": "these you'll see that i'll typically be using a let's go to microservices as i describe their practical use i'm",
    "start": "159599",
    "end": "166800"
  },
  {
    "text": "kind of taking that approach because this is the type of change that i've i've seen the most frequently over the last five or six",
    "start": "166800",
    "end": "173280"
  },
  {
    "text": "years basically taking those old big ol applications that were in vogue a while",
    "start": "173280",
    "end": "179200"
  },
  {
    "text": "ago and breaking them down into more discrete manageable parts the user interface whether it's",
    "start": "179200",
    "end": "184959"
  },
  {
    "text": "web-based or mobile or desktop might still have a lot going on with it but uh",
    "start": "184959",
    "end": "190000"
  },
  {
    "text": "the business logic is being pulled out of that application and deployed in a way that gives more granular control over the processor set of code",
    "start": "190000",
    "end": "196879"
  },
  {
    "text": "so that's kind of what most of my diagrams and and everything that we're going to talk through will show but",
    "start": "196879",
    "end": "201920"
  },
  {
    "text": "that's not necessarily the only way that we'll we'll use these patterns and we'll talk about those as we go through there",
    "start": "201920",
    "end": "208799"
  },
  {
    "text": "so the most well known of these refactor patterns is a strangler fig implementing this approach typically",
    "start": "208799",
    "end": "214799"
  },
  {
    "text": "means that you'll create a new system running in parallel with your existing system as kind of shown by the purple pentagon",
    "start": "214799",
    "end": "220879"
  },
  {
    "text": "in the center over time you'll move responsibility and",
    "start": "220879",
    "end": "226000"
  },
  {
    "text": "functionality from the current system to the new system the primary differentiator in the strangler fig is that it really depends",
    "start": "226000",
    "end": "232480"
  },
  {
    "text": "from a on a call from outside of the system that will eventually go to the new",
    "start": "232480",
    "end": "238720"
  },
  {
    "text": "system so when you completely finish up you'll",
    "start": "238840",
    "end": "244080"
  },
  {
    "text": "basically have a large number of uh of purple pentagons with little blue boxes in each one and you may or may not",
    "start": "244080",
    "end": "250159"
  },
  {
    "text": "have any functionality left over in that what we've got labeled there is the monolith also",
    "start": "250159",
    "end": "256799"
  },
  {
    "text": "as the slide kind of indicates the external calling system may need to be changed because they have to now",
    "start": "256799",
    "end": "262639"
  },
  {
    "text": "call some different part of the business than they did historically so let's take a look at what this could",
    "start": "262639",
    "end": "268080"
  },
  {
    "text": "look like so we have a company that builds and sells an online product say",
    "start": "268080",
    "end": "273600"
  },
  {
    "text": "a software that you use to build mind maps their management platform where visitors would go and look at",
    "start": "273600",
    "end": "279919"
  },
  {
    "text": "videos read about the software etc is all in a customized off-the-shelf",
    "start": "279919",
    "end": "285120"
  },
  {
    "text": "e-commerce system that was that was really designed to sell things that would be pulled off a rack and shipped",
    "start": "285120",
    "end": "291280"
  },
  {
    "text": "the company has been successful so they're looking at redoing this management system in a more more customized and distributed approach",
    "start": "291280",
    "end": "298560"
  },
  {
    "text": "one of the first things that they realize is they were breaking out their ubiquitous language or their common language that they share",
    "start": "298560",
    "end": "304320"
  },
  {
    "text": "with the business was that there's a disconnect in how the business saw what should be happening from",
    "start": "304320",
    "end": "309520"
  },
  {
    "text": "what the technology was requiring and that was the concept of a purchase",
    "start": "309520",
    "end": "314880"
  },
  {
    "text": "so a customer purchased the software and it was immediately available there were no order details or other",
    "start": "314880",
    "end": "321360"
  },
  {
    "text": "concepts like that either it bought the software or you hadn't since the purchase is a core concept of",
    "start": "321360",
    "end": "328240"
  },
  {
    "text": "the business it's basically what their business runs on it was determined that this would be the first thing that was changed",
    "start": "328240",
    "end": "334160"
  },
  {
    "text": "so if you take a look at the screen you'll see a really simple snippet from the order controller if you're familiar with uh asp.net web",
    "start": "334160",
    "end": "341120"
  },
  {
    "text": "api you can see that the actions in this snippet will be listening restfully at",
    "start": "341120",
    "end": "346960"
  },
  {
    "text": "api slash order so that's what we're going to change so in the case of a strangler fig",
    "start": "346960",
    "end": "352720"
  },
  {
    "text": "pattern you replace the area that would take the call in this case we simply created a new set",
    "start": "352720",
    "end": "358800"
  },
  {
    "text": "of endpoints that were listing restfully at api slash purchase assuming that the purchase in the order",
    "start": "358800",
    "end": "364560"
  },
  {
    "text": "looks similar this call may not require any changes on the client's end other than pointing to",
    "start": "364560",
    "end": "370160"
  },
  {
    "text": "a new endpoint and theoretically you could eliminate that need by putting some kind of a",
    "start": "370160",
    "end": "376000"
  },
  {
    "text": "a reverse proxy in there that would redirect the call to the appropriate place",
    "start": "376000",
    "end": "381840"
  },
  {
    "text": "so for the serving of fig pattern this is really what we did we replaced a a monolithic",
    "start": "383840",
    "end": "391840"
  },
  {
    "text": "service.controllers.ordercontroller.getwitha a sneakily named microservice.controllers.purchasecontroller.get",
    "start": "392840",
    "end": "399600"
  },
  {
    "text": "this new service with these new sets of endpoints are the new microservice so as you can see there is one very big",
    "start": "399600",
    "end": "407039"
  },
  {
    "text": "requirement for the strangler fig pattern to be successful and that's that you have to have the ability to clearly map the inbound",
    "start": "407039",
    "end": "412960"
  },
  {
    "text": "functionality that you want to refactor if your code being migrated is deeper so",
    "start": "412960",
    "end": "419039"
  },
  {
    "text": "that there's not a direct path to it from the external system or if there are existing calls coming to",
    "start": "419039",
    "end": "425280"
  },
  {
    "text": "it from both inside and outside of your system the strangler fig is not your best approach",
    "start": "425280",
    "end": "432080"
  },
  {
    "text": "obviously this is you know back to what i mentioned about microservice this is a pattern that's really clear when you're looking at building microservices from a",
    "start": "432560",
    "end": "439440"
  },
  {
    "text": "a monolithic application however there's another way to look at the strangler fig",
    "start": "439440",
    "end": "444639"
  },
  {
    "text": "and that's within the system we all know that a well-designed system has its own layers",
    "start": "444639",
    "end": "450240"
  },
  {
    "text": "up to n of them that in many ways can be looked at as discrete apis",
    "start": "450240",
    "end": "455440"
  },
  {
    "text": "these discrete api calls can be strangler figured away in the same same fashion that we",
    "start": "455440",
    "end": "460560"
  },
  {
    "text": "just talked about with the external calls and that's kind of what this slide is showing the existing call is no longer",
    "start": "460560",
    "end": "466639"
  },
  {
    "text": "shown as coming from outside the application instead it's defined as being just a consumer of that service",
    "start": "466639",
    "end": "473759"
  },
  {
    "text": "most generally from a layer that's higher up in the system and in this case the purple pentagon is",
    "start": "473759",
    "end": "478960"
  },
  {
    "text": "not necessarily a new microservice it is instead just somewhere else that's going to be doing the processing",
    "start": "478960",
    "end": "486000"
  },
  {
    "text": "but like the microservices approach that i showed earlier it still requires that you change the existing call to go",
    "start": "486000",
    "end": "491759"
  },
  {
    "text": "somewhere else and that may not always be ideal",
    "start": "491759",
    "end": "496800"
  },
  {
    "text": "so in that case if that's kind of what you're looking at you should probably evaluate the uh the next pattern the branch by",
    "start": "496879",
    "end": "503360"
  },
  {
    "text": "abstraction pattern is very similar to the strangler fig pattern however the strangler fig",
    "start": "503360",
    "end": "509360"
  },
  {
    "text": "pattern it really it depends upon external calls coming into the system",
    "start": "509360",
    "end": "514959"
  },
  {
    "text": "while the branch by abstraction approach stays completely within your application it does not require",
    "start": "514959",
    "end": "521039"
  },
  {
    "text": "any changes to external systems outside that one application area that you're refactoring",
    "start": "521039",
    "end": "527360"
  },
  {
    "text": "now many people combine both of these architectural approaches and call it the strangler pattern or sometimes strangler",
    "start": "527360",
    "end": "533839"
  },
  {
    "text": "fig pattern but they're actually uniquely different approaches to solving complex refactorings",
    "start": "533839",
    "end": "539839"
  },
  {
    "text": "and and i really feel that it's important to talk about these patterns separately and using the appropriate terminology",
    "start": "539839",
    "end": "545920"
  },
  {
    "text": "and hopefully you'll see why as we go through this in the branch play abstraction pattern",
    "start": "545920",
    "end": "550959"
  },
  {
    "text": "you determine what functionality is going to be removed and then you build an abstraction layer for it",
    "start": "550959",
    "end": "556080"
  },
  {
    "text": "you slide that abstraction into the code and you ensure all of your consuming code is calling that abstraction",
    "start": "556080",
    "end": "562480"
  },
  {
    "text": "once all the code to be replaced has been updated to use the abstraction then you can start replacing",
    "start": "562480",
    "end": "567680"
  },
  {
    "text": "that implementation the image shows the implementation being replaced by a microservice",
    "start": "567680",
    "end": "573760"
  },
  {
    "text": "but it could be anything that's different than what's already being called",
    "start": "573760",
    "end": "578880"
  },
  {
    "text": "you've probably seen this approach multiple times i know i've seen it quite a bit most commonly when we were implementing",
    "start": "578880",
    "end": "585040"
  },
  {
    "text": "a repository for data persistence by abstracting out those crudly calls",
    "start": "585040",
    "end": "590640"
  },
  {
    "text": "you can you can do things like switch in and out databases uh or you can even turn your persistence",
    "start": "590640",
    "end": "596399"
  },
  {
    "text": "implementation into a call to arrest service rather than to a database this approach is also common if you're",
    "start": "596399",
    "end": "603200"
  },
  {
    "text": "doing a a refactor with the hope of moving to inversion of control or dependency",
    "start": "603200",
    "end": "608480"
  },
  {
    "text": "injection so in this case we're looking at an implementation where the order service",
    "start": "608480",
    "end": "615040"
  },
  {
    "text": "basically the class that has a lot of the business logic for orders is newed up this makes changing the",
    "start": "615040",
    "end": "620800"
  },
  {
    "text": "behavior difficult because it means that you would have to change the order service itself",
    "start": "620800",
    "end": "625839"
  },
  {
    "text": "in the branch by abstraction pattern you have more flexibility by adding in",
    "start": "625839",
    "end": "631120"
  },
  {
    "text": "the ability to uh kind of switch back and forth between multiple code lines",
    "start": "631120",
    "end": "636320"
  },
  {
    "text": "you do that by putting in an abstraction you can then have your old way i.e the order service and then you can",
    "start": "636320",
    "end": "643279"
  },
  {
    "text": "build a new one which in this case would be the purchase implementation",
    "start": "643279",
    "end": "648320"
  },
  {
    "text": "so this is what it would look like after the abstraction we know that we have an abstraction the",
    "start": "648320",
    "end": "653440"
  },
  {
    "text": "ipurchase server that for the time being will be implemented by the same order service",
    "start": "653440",
    "end": "658640"
  },
  {
    "text": "that we saw in the last slide once we get the new service completed we now have a uh",
    "start": "658640",
    "end": "664480"
  },
  {
    "text": "a way to switch back and forth we change the run time to use the new functionality that implements the i",
    "start": "664480",
    "end": "670560"
  },
  {
    "text": "purchase service and if it works great if for some reason it doesn't",
    "start": "670560",
    "end": "675839"
  },
  {
    "text": "then we can switch back to the previous implementation and everything should still work just like it did earlier",
    "start": "675839",
    "end": "682160"
  },
  {
    "text": "also note how i named the abstraction for what its future implementation will",
    "start": "682560",
    "end": "687920"
  },
  {
    "text": "be this helps bring the idea of the future",
    "start": "687920",
    "end": "693040"
  },
  {
    "text": "and the ubiquitous language how you're going to be communicating between the business and the in technology",
    "start": "693040",
    "end": "698399"
  },
  {
    "text": "in sooner even if it's in an area that will probably be replaced i'm a big fan of ubiquitous language and",
    "start": "698399",
    "end": "704720"
  },
  {
    "text": "getting on the same language or it's the same understanding of of words and terminology that between the technology",
    "start": "704720",
    "end": "710800"
  },
  {
    "text": "and the business and the more you practice it the better",
    "start": "710800",
    "end": "716000"
  },
  {
    "text": "so the branch by abstraction layer adding in a new abstraction layer that will allow you to replace the",
    "start": "716000",
    "end": "721600"
  },
  {
    "text": "implementation behind the abstraction now however you replace that implementation is up to you",
    "start": "721600",
    "end": "727519"
  },
  {
    "text": "here we show it as a microservice so the next pattern is parallel run",
    "start": "727519",
    "end": "734880"
  },
  {
    "text": "strangler fig and branch by abstraction allow old and new code to coexist in production at the same time",
    "start": "735360",
    "end": "741519"
  },
  {
    "text": "however you generally only run one path at a time typically there'd be a switch somewhere",
    "start": "741519",
    "end": "748079"
  },
  {
    "text": "like a configuration file or in the database that tells the system to use either the the new or old branches of the code",
    "start": "748079",
    "end": "755200"
  },
  {
    "text": "if the new branch breaks you switch back to the old one and everything should be running like it was before",
    "start": "755200",
    "end": "760800"
  },
  {
    "text": "parallel run does this a bit different in that it runs through both the old and the new at the same time it then",
    "start": "760800",
    "end": "767440"
  },
  {
    "text": "compares the results i mean it sounds a little crazy though but can think about this situation",
    "start": "767440",
    "end": "774639"
  },
  {
    "text": "your current state is a web application that you want to move to microservices of course by running an example and you",
    "start": "774639",
    "end": "780639"
  },
  {
    "text": "want each of those uh those services to be responsible for its own data management",
    "start": "780639",
    "end": "785680"
  },
  {
    "text": "this would be a very good way to test the system but the system you know works continue to do the heavy lifting",
    "start": "785680",
    "end": "791920"
  },
  {
    "text": "but completely exercise the new system as if it's also doing the work and then you compare the results your",
    "start": "791920",
    "end": "798720"
  },
  {
    "text": "comparison engine could be as simple as a sql script to compare data or it could be as complex as a",
    "start": "798720",
    "end": "804240"
  },
  {
    "text": "fully running service that's listening to database calls and event queues or whatever you've got",
    "start": "804240",
    "end": "809360"
  },
  {
    "text": "going on and comparing those results whatever makes the most sense based off of the changes that you're",
    "start": "809360",
    "end": "814639"
  },
  {
    "text": "planning on making also the last time that i used this",
    "start": "814639",
    "end": "820399"
  },
  {
    "text": "approach we were able to find a lot of edge cases that were missed when we were rebuilding out the application",
    "start": "820399",
    "end": "826240"
  },
  {
    "text": "some of those were by design we decided that we just weren't going to support that anymore but some were coincidental also we",
    "start": "826240",
    "end": "833279"
  },
  {
    "text": "found several instances where the current system the the older system was actually doing work incorrectly it's",
    "start": "833279",
    "end": "839920"
  },
  {
    "text": "just that no one had noticed it so i highly recommend parallel run if you have the ability to be able to",
    "start": "839920",
    "end": "846399"
  },
  {
    "text": "design your system in such a way as to support both the old one and the new way so this example shows a",
    "start": "846399",
    "end": "853839"
  },
  {
    "text": "simple version of a comparison engine that's calling that that i've that's kind of called out there and that's the center part of the",
    "start": "853839",
    "end": "859920"
  },
  {
    "text": "image excuse me um this sql script compares the number of orders that were found for",
    "start": "859920",
    "end": "866320"
  },
  {
    "text": "a date range between two different tables and two different databases more robust versions of the engine would",
    "start": "866320",
    "end": "872079"
  },
  {
    "text": "perform more robust analysis once you're confident that your comparison engine is measuring the items",
    "start": "872079",
    "end": "878560"
  },
  {
    "text": "correctly and demonstrating that the old and new approaches are showing equivalent results",
    "start": "878560",
    "end": "884399"
  },
  {
    "text": "you're able to move to that far right part of the uh the image and switch completely away from the old",
    "start": "884399",
    "end": "889839"
  },
  {
    "text": "functionality to your shiny new functionality",
    "start": "889839",
    "end": "894399"
  },
  {
    "text": "so the next pattern is change data capture all of the other patterns that we talked about so far rely on",
    "start": "895279",
    "end": "902399"
  },
  {
    "text": "on changing or acting upon calls made into an existing system in the change data capture approach we",
    "start": "902399",
    "end": "909600"
  },
  {
    "text": "instead listen for and react to changes in the data while this is generally a transitive",
    "start": "909600",
    "end": "916079"
  },
  {
    "text": "pattern i.e it's it's something that you would implement for a while during a conversion it can also become part of your move to",
    "start": "916079",
    "end": "922800"
  },
  {
    "text": "a more distributed approach um especially in systems where more than",
    "start": "922800",
    "end": "928399"
  },
  {
    "text": "one application using various data tables uh especially when say you're you're",
    "start": "928399",
    "end": "933600"
  },
  {
    "text": "working with a third-party software package and you don't have the ability to make any changes to that code",
    "start": "933600",
    "end": "940160"
  },
  {
    "text": "so this approach relies upon support from within the database management system uh for example sql server allows you to understand",
    "start": "940160",
    "end": "947199"
  },
  {
    "text": "table data change events in that case you could take advantage of that change and either push the data to",
    "start": "947199",
    "end": "952320"
  },
  {
    "text": "a different database or send a message that talks about what data was changed whatever makes the most",
    "start": "952320",
    "end": "957839"
  },
  {
    "text": "sense for the architecture that you're that you're moving to",
    "start": "957839",
    "end": "962480"
  },
  {
    "text": "so ui composition this is an implementation approach that takes",
    "start": "963120",
    "end": "968480"
  },
  {
    "text": "takes advantage of various ui implementation patterns such as mvp mvc and mvvm",
    "start": "968480",
    "end": "975279"
  },
  {
    "text": "so that new functionality is added or replaced by by splitting the calls at the ui level",
    "start": "975279",
    "end": "981440"
  },
  {
    "text": "and splicing the results back into the data being presented to the ui basically you'll split out the data from",
    "start": "981440",
    "end": "987920"
  },
  {
    "text": "the new service that's being deployed and in your management framework such as your controller and an mvc app",
    "start": "987920",
    "end": "993759"
  },
  {
    "text": "call the new service and stitch that data into the data being presented to the ui",
    "start": "993759",
    "end": "1000079"
  },
  {
    "text": "the source of the new information that's being captured and displayed could be anything whether it's a newly created microservice a refactored microservice",
    "start": "1001600",
    "end": "1009120"
  },
  {
    "text": "some new body of code a new library that you've built anything that you could do for that it then becomes the source of the data that",
    "start": "1009120",
    "end": "1015360"
  },
  {
    "text": "you would split into the ui excuse me",
    "start": "1015360",
    "end": "1020800"
  },
  {
    "text": "it's a shame being a developer and having to talk this long it's just not right um so on the screen is a simple asp.net",
    "start": "1022880",
    "end": "1030720"
  },
  {
    "text": "mvc controller that gets some information from the business layer based upon uh based upon the session id that you",
    "start": "1030720",
    "end": "1036798"
  },
  {
    "text": "gotta love server side state um we're adding new functionality in by an additional service call whose results",
    "start": "1036799",
    "end": "1043199"
  },
  {
    "text": "are being passed into the view model we've been able to add this composition by",
    "start": "1043199",
    "end": "1048880"
  },
  {
    "text": "adding a new property on the checkout view model that gets passed to the view instantiating the controller",
    "start": "1048880",
    "end": "1054240"
  },
  {
    "text": "with an additional service in this case the content service we've then used that new service to",
    "start": "1054240",
    "end": "1059840"
  },
  {
    "text": "populate the new property on the checkout view model and then which we don't see we've",
    "start": "1059840",
    "end": "1064960"
  },
  {
    "text": "updated the ui to use the new information in the view model",
    "start": "1064960",
    "end": "1069679"
  },
  {
    "text": "so the last design pattern for software that we're going to talk about is the decorating collaborator approach",
    "start": "1070400",
    "end": "1076400"
  },
  {
    "text": "so this approach uses the decorator design pattern to uh to take advantage of the results of your",
    "start": "1076400",
    "end": "1081600"
  },
  {
    "text": "code if any of you've written uh an http handler for iis for example",
    "start": "1081600",
    "end": "1087440"
  },
  {
    "text": "then you've implemented a type of decorating collaborator especially if you've done it using the http result rather than the http",
    "start": "1087440",
    "end": "1094080"
  },
  {
    "text": "request if you're not running iis then this would normally be done by creating a proxy between the caller and the",
    "start": "1094080",
    "end": "1099760"
  },
  {
    "text": "current system the proxy would receive the incoming request pass it through to the current",
    "start": "1099760",
    "end": "1105760"
  },
  {
    "text": "system and then when the response the response comes back the uh the proxy would call a different system",
    "start": "1105760",
    "end": "1112400"
  },
  {
    "text": "this slide shows an example of the proxy calling a microservices the response gets returned to the proxy by the server",
    "start": "1112400",
    "end": "1119840"
  },
  {
    "text": "generally the call to the microservices that that's orchestrated within the proxy is asynchronous and",
    "start": "1119840",
    "end": "1125120"
  },
  {
    "text": "will complete on its own so that it doesn't need to be any additional weighting however obviously that's not always true",
    "start": "1125120",
    "end": "1131039"
  },
  {
    "text": "sometimes there will be a asynchronous not an asynchronous asynchronous call that can affect the",
    "start": "1131039",
    "end": "1137440"
  },
  {
    "text": "user's experience so i mentioned earlier how it is not",
    "start": "1137440",
    "end": "1143919"
  },
  {
    "text": "uncommon when a team uses more than a single pattern when performing a refactor here are some of",
    "start": "1143919",
    "end": "1149919"
  },
  {
    "text": "the most common combinations that i've seen out in the wild as we go through these in a little bit more detail you'll see how even more",
    "start": "1149919",
    "end": "1156559"
  },
  {
    "text": "patterns can be brought into play as you start to determine both your end state and your implementation",
    "start": "1156559",
    "end": "1161679"
  },
  {
    "text": "approach because usage of these patterns does not mean that the evolution is going to end",
    "start": "1161679",
    "end": "1167679"
  },
  {
    "text": "once you get the pattern implemented many times a pattern is really used as a part of an",
    "start": "1167679",
    "end": "1173679"
  },
  {
    "text": "implementation path and not as the full expected end result it's okay to use these patterns in a",
    "start": "1173679",
    "end": "1180160"
  },
  {
    "text": "transitive nature to support the migration from your your current system to your your future",
    "start": "1180160",
    "end": "1187039"
  },
  {
    "text": "system your refactor of a complex system",
    "start": "1187039",
    "end": "1192559"
  },
  {
    "text": "and so this is the most common combination in fact i think i mentioned it earlier many times when you see",
    "start": "1192559",
    "end": "1197840"
  },
  {
    "text": "strangler pattern uh referred to they really are talking about this combination",
    "start": "1197840",
    "end": "1204400"
  },
  {
    "text": "and yes this is very close to the branch by abstraction by itself with the only difference being that the",
    "start": "1204400",
    "end": "1209679"
  },
  {
    "text": "call is coming in from an external source rather than the internal source that you would expect on the branch by",
    "start": "1209679",
    "end": "1215760"
  },
  {
    "text": "abstraction so as you can imagine this combination of patterns also works",
    "start": "1215760",
    "end": "1222080"
  },
  {
    "text": "really well as a transitive pattern if you take a look at the items on the screen in this set of examples",
    "start": "1222080",
    "end": "1228320"
  },
  {
    "text": "the abstraction layer is built while the microservice is being built once both of those are built you start",
    "start": "1228320",
    "end": "1233760"
  },
  {
    "text": "moving the implementation from behind the abstraction layer to in this case the microservice you",
    "start": "1233760",
    "end": "1239280"
  },
  {
    "text": "then continue moving the functionality bit by bit until the whole set of functionality that you want to move has been finished",
    "start": "1239280",
    "end": "1246640"
  },
  {
    "text": "and yes this is an implementation approach which is why i said this works as a transitive pattern",
    "start": "1246640",
    "end": "1252000"
  },
  {
    "text": "the end result looks like what we saw in the last slide but the process of getting there is more evolutionary",
    "start": "1252000",
    "end": "1259280"
  },
  {
    "text": "and this is a slightly different take on the combination of strangler fig and branch by abstraction where the abstraction happens outside of",
    "start": "1259360",
    "end": "1266080"
  },
  {
    "text": "the writing application this approach means that there's no need to change the existing call which could",
    "start": "1266080",
    "end": "1271760"
  },
  {
    "text": "be important especially if working with third parties may be calling into your system",
    "start": "1271760",
    "end": "1277280"
  },
  {
    "text": "so this approach is different from decorating collaborator though because in that pattern the proxy takes the results of the call",
    "start": "1277280",
    "end": "1283679"
  },
  {
    "text": "into the current application and sends it to the new microservice or new destination",
    "start": "1283679",
    "end": "1288960"
  },
  {
    "text": "so when in fact a decorating collaborator acts as a as an add-on to the current",
    "start": "1288960",
    "end": "1295200"
  },
  {
    "text": "functionality um in this case you're basically redirecting it rather than adding it on",
    "start": "1295200",
    "end": "1304799"
  },
  {
    "text": "also as you may have picked up when going through the patterns parallel run is not so much a",
    "start": "1304799",
    "end": "1310559"
  },
  {
    "text": "development pattern really as it is an imp or an evaluation approach",
    "start": "1310559",
    "end": "1316159"
  },
  {
    "text": "highly recommended to run this for a while in production to evaluate whether or not your new system may be working",
    "start": "1316159",
    "end": "1321280"
  },
  {
    "text": "appropriately so we talked about software refactor",
    "start": "1321280",
    "end": "1326640"
  },
  {
    "text": "patterns let's spend a little bit of time on database refactor patterns",
    "start": "1326640",
    "end": "1333840"
  },
  {
    "text": "so as we go through the database refactor patterns there are a couple of things that you should consider when looking at patterns",
    "start": "1335679",
    "end": "1342000"
  },
  {
    "text": "to use the first is the differences between physical and logical database separation",
    "start": "1342000",
    "end": "1349039"
  },
  {
    "text": "i would say that the requirement that you should really consider is that of logical database separation",
    "start": "1349039",
    "end": "1354240"
  },
  {
    "text": "at a minimum we're going to talk about that more in the next few slides but remember that the important thing is",
    "start": "1354240",
    "end": "1360640"
  },
  {
    "text": "at a minimum perhaps some kind of a logical database separation as you look at how you're going to be",
    "start": "1360640",
    "end": "1366000"
  },
  {
    "text": "refactoring your code the next is the implementation approach that you're going to use",
    "start": "1366000",
    "end": "1373120"
  },
  {
    "text": "if you're going to do a big bang approach where one release you don't have a microservice and the next one you",
    "start": "1373120",
    "end": "1378320"
  },
  {
    "text": "have a fully functional microservice or refactored set of code",
    "start": "1378320",
    "end": "1383440"
  },
  {
    "text": "that it's really not much of a concern but if you're going to take an incremental approach to implementation then you need to make that decision",
    "start": "1383440",
    "end": "1389679"
  },
  {
    "text": "about whether you split the database first the code first or you split them both simultaneously",
    "start": "1389679",
    "end": "1397360"
  },
  {
    "text": "then we also need to talk about consistency of the data whether or not you can support strong consistency",
    "start": "1398480",
    "end": "1403840"
  },
  {
    "text": "or eventual consistency so splitting the database first means",
    "start": "1403840",
    "end": "1409360"
  },
  {
    "text": "that you define the data to be used by the microservice and you segregate that data first this approach gives you the opportunity",
    "start": "1409360",
    "end": "1416000"
  },
  {
    "text": "to to iterate through changes while supporting data reversion if something goes wrong",
    "start": "1416000",
    "end": "1422960"
  },
  {
    "text": "consider a system where there's a lot of intertwining within the data say a single data table say the product",
    "start": "1422960",
    "end": "1431360"
  },
  {
    "text": "it contains pieces of information that's useful for many different parts of the business",
    "start": "1431360",
    "end": "1436400"
  },
  {
    "text": "let's say it has data about who set in the last purchase order for it or",
    "start": "1436400",
    "end": "1444000"
  },
  {
    "text": "how many of those items are left in inventory what employee did the most recent",
    "start": "1444000",
    "end": "1449679"
  },
  {
    "text": "physical inventory count or its location in the warehouse all of that information makes sense to",
    "start": "1449679",
    "end": "1456400"
  },
  {
    "text": "be part of the product table but not every piece of your business is going to need all of that",
    "start": "1456400",
    "end": "1462320"
  },
  {
    "text": "information so with this approach you determine the data needed by",
    "start": "1462320",
    "end": "1468000"
  },
  {
    "text": "by your microservice or the part of the code that you're refactoring and you start pulling it out",
    "start": "1468000",
    "end": "1473760"
  },
  {
    "text": "as you pull it out by watching it iterate through the system you know you'll likely find some places",
    "start": "1473760",
    "end": "1479279"
  },
  {
    "text": "where either data was missed or data was moved in that was unnecessary and then you can fix that",
    "start": "1479279",
    "end": "1486720"
  },
  {
    "text": "the next approach splitting the code first is probably the most common incremental",
    "start": "1486720",
    "end": "1492960"
  },
  {
    "text": "approach and most of the patterns that i'll talk about moving forward really support this best",
    "start": "1492960",
    "end": "1498880"
  },
  {
    "text": "an advantage is that it helps you understand the data definition because you create the model with the functioning data service",
    "start": "1498880",
    "end": "1505440"
  },
  {
    "text": "by starting at the model first you're able to identify just the data that's needed",
    "start": "1505440",
    "end": "1510960"
  },
  {
    "text": "however and i really want to call this out many teams tend to stop here they may",
    "start": "1510960",
    "end": "1517120"
  },
  {
    "text": "have a new microservice or a new set of functionality that they can deploy independently is probably more performant maybe better",
    "start": "1517120",
    "end": "1523440"
  },
  {
    "text": "testable so they deprioritize the last step of moving the data",
    "start": "1523440",
    "end": "1528880"
  },
  {
    "text": "however that means that it's not completely independent nor is it completely testable nor is it actually in full control of",
    "start": "1528880",
    "end": "1535279"
  },
  {
    "text": "its responsiveness if you get this far sure it's better than it was but it's not as good as it",
    "start": "1535279",
    "end": "1541360"
  },
  {
    "text": "could be and then the last uh approach would be",
    "start": "1541360",
    "end": "1547919"
  },
  {
    "text": "splitting the database and the code together in this case you basically go from having one data source",
    "start": "1547919",
    "end": "1553679"
  },
  {
    "text": "and no microservices to a functional microservice that controls its own data",
    "start": "1553679",
    "end": "1559200"
  },
  {
    "text": "that's the only incrementing that you would do is going through building out additional functionality",
    "start": "1559200",
    "end": "1565120"
  },
  {
    "text": "now this is generally a much bigger step that takes more work and it also seems to require",
    "start": "1565120",
    "end": "1571200"
  },
  {
    "text": "a really rich understanding of your business domain and what you're trying to accomplish in",
    "start": "1571200",
    "end": "1577600"
  },
  {
    "text": "many ways this may be the most ideal pattern but it's also the most difficult one to do",
    "start": "1577600",
    "end": "1585919"
  },
  {
    "text": "so also i kind of mentioned it during the beginning of this but something to consider when doing database refactoring",
    "start": "1587520",
    "end": "1593360"
  },
  {
    "text": "is whether or not the refactor database can get by with eventual consistency instead of strong consistency",
    "start": "1593360",
    "end": "1600799"
  },
  {
    "text": "not every part of your business needs to know everything about the data models within the other parts",
    "start": "1600799",
    "end": "1606880"
  },
  {
    "text": "of the business at all times instead they simply need to eventually know some of the things",
    "start": "1606880",
    "end": "1613840"
  },
  {
    "text": "if you look at the time graph on the slide uh the column of green dots demonstrates strong consistency that's",
    "start": "1613840",
    "end": "1620400"
  },
  {
    "text": "what a system with a single shared database has now because all of the data is stored in a in a single place",
    "start": "1620400",
    "end": "1626400"
  },
  {
    "text": "and so becomes available to every other consumer of the data at the same time once the save is committed everyone",
    "start": "1626400",
    "end": "1633360"
  },
  {
    "text": "knows about it the only lack of consistency is during the milliseconds of that database transaction",
    "start": "1633360",
    "end": "1639440"
  },
  {
    "text": "eventual consistency is different that's the staggered orange dots it means that data will be consistent",
    "start": "1639440",
    "end": "1646240"
  },
  {
    "text": "eventually there'll be some time before all of the other systems and business areas",
    "start": "1646240",
    "end": "1651440"
  },
  {
    "text": "understand that data and the meaning of eventually is something that you consider when you architect out your system",
    "start": "1651440",
    "end": "1659039"
  },
  {
    "text": "so in my mind eventual consistency is important for any effort that expects decoupling so if",
    "start": "1660640",
    "end": "1667360"
  },
  {
    "text": "you're doing any kind of refactoring in which decoupling your your business",
    "start": "1667360",
    "end": "1672399"
  },
  {
    "text": "is is a strong consideration then this is something that you should be thinking of as you as you think about",
    "start": "1672399",
    "end": "1677520"
  },
  {
    "text": "how you're going to implement your refactoring approaches because it provides the business area the most control over itself",
    "start": "1677520",
    "end": "1684080"
  },
  {
    "text": "the first bullet there pretty much tells the main story if strong consistency was required uh my",
    "start": "1684080",
    "end": "1692320"
  },
  {
    "text": "a two business areas or microservices needed to know the same information at the same time",
    "start": "1692320",
    "end": "1698480"
  },
  {
    "text": "that means that either one of those business areas has to have enough knowledge about the",
    "start": "1698480",
    "end": "1703840"
  },
  {
    "text": "other so they can go get the information from the other service or they both have to access the same",
    "start": "1703840",
    "end": "1709279"
  },
  {
    "text": "data store so doing that means changes in one business area such as to the table",
    "start": "1709279",
    "end": "1715120"
  },
  {
    "text": "could impact another business area and this is where the business area or microservice having its own data",
    "start": "1715120",
    "end": "1721440"
  },
  {
    "text": "really started to speak to me it enforces decoupling shared databases means you generally",
    "start": "1721440",
    "end": "1727200"
  },
  {
    "text": "have to worry about other systems when making a change in one and that",
    "start": "1727200",
    "end": "1732240"
  },
  {
    "text": "and that makes me uncomfortable i'd really have ex appreciate my code being a little bit",
    "start": "1732240",
    "end": "1738799"
  },
  {
    "text": "more distinct than that um because i don't want changes in one",
    "start": "1738799",
    "end": "1744080"
  },
  {
    "text": "system to affect another system even if those systems are still part of a monolithic application i'd rather have",
    "start": "1744080",
    "end": "1750640"
  },
  {
    "text": "them be decoupled enough that one change won't affect another one",
    "start": "1750640",
    "end": "1757840"
  },
  {
    "text": "also one of the implementation paths that when talking about eventual consistency is through messaging so i thought i'd throw this in here and we'll",
    "start": "1759600",
    "end": "1765679"
  },
  {
    "text": "talk about it briefly a messaging is a system that an architectural approach that allows for",
    "start": "1765679",
    "end": "1771200"
  },
  {
    "text": "communications between multiple interested parties there are many different examples of messaging",
    "start": "1771200",
    "end": "1776799"
  },
  {
    "text": "platforms rabbitmq apache kafka aws we have a couple of those products",
    "start": "1776799",
    "end": "1782880"
  },
  {
    "text": "as well there are different behavioral approaches such as pub sub or message queues",
    "start": "1782880",
    "end": "1788720"
  },
  {
    "text": "but what messaging provides to distributed architecture such as microservices could not be",
    "start": "1788720",
    "end": "1794399"
  },
  {
    "text": "overstated first you know messaging system decouples providers from consumers",
    "start": "1794399",
    "end": "1801039"
  },
  {
    "text": "this means that a consumer does not have to know where to go to find the information that they care about they just need to be able to recognize",
    "start": "1801039",
    "end": "1806880"
  },
  {
    "text": "that information as goes by second is the use of messaging can",
    "start": "1806880",
    "end": "1812799"
  },
  {
    "text": "provide simple horizontal scaling especially in the case of microservices because if the",
    "start": "1812799",
    "end": "1818480"
  },
  {
    "text": "if the machines that are handling the messages become overworked you just add more uh",
    "start": "1818480",
    "end": "1825679"
  },
  {
    "text": "you know platform and language integration typically with messaging you don't have to worry about them all being",
    "start": "1825679",
    "end": "1831279"
  },
  {
    "text": "written in the same language or running on the same operating system messaging queue provides reliable",
    "start": "1831279",
    "end": "1837360"
  },
  {
    "text": "communications because it takes a store and forward approach where the messages",
    "start": "1837360",
    "end": "1843279"
  },
  {
    "text": "is stored in the queue and then forwarded to all of the subscribed listeners and you'll find that messaging is an",
    "start": "1843279",
    "end": "1849600"
  },
  {
    "text": "ideal approach when needing to work with disconnected systems that may or may not always have communications uh using that store and forward approach",
    "start": "1849600",
    "end": "1856559"
  },
  {
    "text": "means that regardless of when the system connects to the the network you're able to catch up on all the",
    "start": "1856559",
    "end": "1862159"
  },
  {
    "text": "messages they've missed the last is that the messaging system automatically acts as a mediator",
    "start": "1862159",
    "end": "1868320"
  },
  {
    "text": "and this is what i really appreciate almost the most about this",
    "start": "1868320",
    "end": "1873519"
  },
  {
    "text": "is that with the mediator pattern communication between different microservices encapsulated within a mediator object",
    "start": "1873519",
    "end": "1879919"
  },
  {
    "text": "these microservices or business areas no longer need to communicate directly with each other",
    "start": "1879919",
    "end": "1885360"
  },
  {
    "text": "but instead communicate through the mediator this reduces the dependencies between",
    "start": "1885360",
    "end": "1890559"
  },
  {
    "text": "communicating systems thereby reducing coupling excuse me again",
    "start": "1890559",
    "end": "1897200"
  },
  {
    "text": "with this if an application becomes disconnected from the others it need only reconnect to the messaging",
    "start": "1898240",
    "end": "1903919"
  },
  {
    "text": "system not to all of the other messaging applications cuts down a lot of that interdependency that you tend to worry about when you",
    "start": "1903919",
    "end": "1910240"
  },
  {
    "text": "have larger more complicated and interconnected applications so let's go into the database refactor",
    "start": "1910240",
    "end": "1916960"
  },
  {
    "text": "patterns and talk about this now so we'll talk about shared database database view",
    "start": "1916960",
    "end": "1922399"
  },
  {
    "text": "data synchronization and current application is data source so the first database pattern is shared",
    "start": "1922399",
    "end": "1928880"
  },
  {
    "text": "database i know it kind of sounds horrible and i talked earlier about how it may not be the best idea",
    "start": "1928880",
    "end": "1936000"
  },
  {
    "text": "however there are times when it does make the most sense the first is if your business needs to",
    "start": "1936000",
    "end": "1941200"
  },
  {
    "text": "not support eventual consistency there are cases where that can happen",
    "start": "1941200",
    "end": "1946960"
  },
  {
    "text": "the next is if you're simply using it as an intermediate or transient approach with code first",
    "start": "1946960",
    "end": "1952640"
  },
  {
    "text": "so there'll be implementation needs that may require your your new service to initially access the",
    "start": "1952640",
    "end": "1959200"
  },
  {
    "text": "existing database for a period then switch over to a different data store as you continue to work through the refactor",
    "start": "1959200",
    "end": "1966320"
  },
  {
    "text": "another time excuse me",
    "start": "1966320",
    "end": "1970480"
  },
  {
    "text": "nothing like you guys didn't watch me drink coffee from that far away another time where it makes sense um",
    "start": "1975120",
    "end": "1981919"
  },
  {
    "text": "would be when the data contains something that's shared across multiple microservices and rarely changes",
    "start": "1981919",
    "end": "1987120"
  },
  {
    "text": "a list of states and provinces for example would fit that example sure you can recreate that list in",
    "start": "1987120",
    "end": "1993279"
  },
  {
    "text": "multiple parts of the business but why",
    "start": "1993279",
    "end": "1997600"
  },
  {
    "text": "this approach is database view this pattern relies on a shared database but",
    "start": "1998320",
    "end": "2003360"
  },
  {
    "text": "it uses views to present the data differently this database view which in sql server",
    "start": "2003360",
    "end": "2010399"
  },
  {
    "text": "supports both read and write can carry out transformation between different data designs or it can simply",
    "start": "2010399",
    "end": "2016480"
  },
  {
    "text": "be used to help support decoupling this could be done through either a code first or database first",
    "start": "2016480",
    "end": "2022240"
  },
  {
    "text": "but it's probably most common to do this as a code first",
    "start": "2022240",
    "end": "2026960"
  },
  {
    "text": "what you do is treating the view as a contract basically means that the underlying structural changes should not",
    "start": "2028480",
    "end": "2034080"
  },
  {
    "text": "be making breaking changes in the view it also assumes that the view will support both",
    "start": "2034080",
    "end": "2039200"
  },
  {
    "text": "reading writing and editing and of course assuming your database supports the use",
    "start": "2039200",
    "end": "2044320"
  },
  {
    "text": "of the view ma'am i apologize",
    "start": "2044320",
    "end": "2052000"
  },
  {
    "text": "this pattern also works without the use of database views however through the use of cqrs or command query",
    "start": "2052399",
    "end": "2057760"
  },
  {
    "text": "responsibility segregation in cqrs reads and writes are broken apart by separating these two you allow",
    "start": "2057760",
    "end": "2064079"
  },
  {
    "text": "them to be managed differently you can uh scale reads or writes differently use different schemas",
    "start": "2064079",
    "end": "2070960"
  },
  {
    "text": "you know you could denormalize for reads which will also lead to simpler queries also segregating the read and right",
    "start": "2070960",
    "end": "2077280"
  },
  {
    "text": "sides can result in models that are more maintainable and flexible generally you'll find that most of the",
    "start": "2077280",
    "end": "2083520"
  },
  {
    "text": "complex business logic goes into the right model the read model can be relatively simple and there could be multiple right models",
    "start": "2083520",
    "end": "2089839"
  },
  {
    "text": "and read models however the separation of concerns is happening and that really",
    "start": "2089839",
    "end": "2094960"
  },
  {
    "text": "isn't a is a implementation pattern that you could use that's similar that's literally the same",
    "start": "2094960",
    "end": "2100960"
  },
  {
    "text": "as a database view so the next pattern is data",
    "start": "2100960",
    "end": "2106800"
  },
  {
    "text": "synchronization in this approach which is generally a database first approach",
    "start": "2106800",
    "end": "2112079"
  },
  {
    "text": "the current application of the new microservice or business area have their own data sources",
    "start": "2112079",
    "end": "2117119"
  },
  {
    "text": "however there's a third party application say a background worker like shown on the slide",
    "start": "2117119",
    "end": "2123200"
  },
  {
    "text": "that ensures that the data stays in sync between the two different data sources this is also an approach that you can",
    "start": "2123200",
    "end": "2129440"
  },
  {
    "text": "use transiently if your end result is going to a an eventual consistency through message",
    "start": "2129440",
    "end": "2135760"
  },
  {
    "text": "approach or something like that an intermediate step could be an implementation of the data synchronization pattern",
    "start": "2135760",
    "end": "2142240"
  },
  {
    "text": "if your microservice ends up being completed before your messaging framework you can start with this pattern and",
    "start": "2142240",
    "end": "2148079"
  },
  {
    "text": "migrate over to a messaging based eventual consistency model rather than this background worker based eventual",
    "start": "2148079",
    "end": "2154800"
  },
  {
    "text": "consistency model also the change data capture plat pattern",
    "start": "2154800",
    "end": "2160400"
  },
  {
    "text": "is is frequently used when the uh when you're interacting with a",
    "start": "2160400",
    "end": "2168079"
  },
  {
    "text": "third-party system that you don't have control over the code but instead you want to take take advantage of any background data",
    "start": "2168079",
    "end": "2174240"
  },
  {
    "text": "changes the last one is the current application",
    "start": "2174240",
    "end": "2179760"
  },
  {
    "text": "as a data source this is an interesting pattern it's",
    "start": "2179760",
    "end": "2184880"
  },
  {
    "text": "generally a transient pattern as it's not something that's recommended as a long-term solution uh because it's kind",
    "start": "2184880",
    "end": "2191520"
  },
  {
    "text": "of backwards from our overall goal of a refactor in this case you would basically create",
    "start": "2191520",
    "end": "2197680"
  },
  {
    "text": "a new endpoint in the current application that provides the appropriate information ideally the contract that you would",
    "start": "2197680",
    "end": "2204000"
  },
  {
    "text": "define for this would be the same as the contract that you anticipate using for your for your new system as you're rolling it",
    "start": "2204000",
    "end": "2210320"
  },
  {
    "text": "out so that your only change really would be where you're going to make that call it seems weird on the first look",
    "start": "2210320",
    "end": "2218400"
  },
  {
    "text": "but if you think through what a complete representation of especially a fully distributed",
    "start": "2218400",
    "end": "2224480"
  },
  {
    "text": "architecture would look like it becomes obvious that there's a lot of different development that needs to happen",
    "start": "2224480",
    "end": "2230240"
  },
  {
    "text": "and not all of it can run in pl and up in parallel that means that it may be in your best",
    "start": "2230240",
    "end": "2235680"
  },
  {
    "text": "interest to use a pattern such as this rather than needing to rely on enough services to have launched so that you",
    "start": "2235680",
    "end": "2242079"
  },
  {
    "text": "can get the appropriate support use your existing application in the business logic that's already in there",
    "start": "2242079",
    "end": "2247760"
  },
  {
    "text": "as a crutch as you continue to build out the rest of your systems",
    "start": "2247760",
    "end": "2253119"
  },
  {
    "text": "so we've defined some implementation points talked about some patterns these patterns help you understand",
    "start": "2253280",
    "end": "2259440"
  },
  {
    "text": "reasoned and thought out ways to evolve your software architecture but there are other things that need to be considered because they affect your",
    "start": "2259440",
    "end": "2266000"
  },
  {
    "text": "ability to implement these patterns let's look at those now so these are the other considerations that we'll talk",
    "start": "2266000",
    "end": "2272000"
  },
  {
    "text": "about things that may impact your ability to succeed when considering your architectural approaches these include equipment and software uh",
    "start": "2272000",
    "end": "2280240"
  },
  {
    "text": "the experience and knowledge that your team has as well as their day-to-day routine and your internal systems",
    "start": "2280240",
    "end": "2286079"
  },
  {
    "text": "administration experience and knowledge so the first one is your equipment and",
    "start": "2286079",
    "end": "2291200"
  },
  {
    "text": "software this is a very common problem when you're looking at refactors especially if they're designed to",
    "start": "2291200",
    "end": "2296240"
  },
  {
    "text": "support scalability redundancy and any changes in deployments or devops",
    "start": "2296240",
    "end": "2301520"
  },
  {
    "text": "why because many of those approaches mean running more systems such as web servers",
    "start": "2301520",
    "end": "2308240"
  },
  {
    "text": "and depending upon your setup this can be very difficult each of these new systems will require",
    "start": "2308560",
    "end": "2314480"
  },
  {
    "text": "you know some kind of processing and storage so even if you're rolling your own virtual machines in your private data",
    "start": "2314480",
    "end": "2320320"
  },
  {
    "text": "center there's likely going to be need for you to to have additional computing capacity",
    "start": "2320320",
    "end": "2326320"
  },
  {
    "text": "those machines then may need additional licensing if you're a net framework shop then those new vms",
    "start": "2326320",
    "end": "2331599"
  },
  {
    "text": "may need to have windows on them so you'll incur additional licensing costs just for the os",
    "start": "2331599",
    "end": "2337040"
  },
  {
    "text": "that doesn't even include any other licensing that you may need to manage but just simply because you've increased",
    "start": "2337040",
    "end": "2342079"
  },
  {
    "text": "the number of processors that are running services and obviously one of the biggest ones",
    "start": "2342079",
    "end": "2348720"
  },
  {
    "text": "will be the experience and knowledge of your developers developers are the most confident when",
    "start": "2348720",
    "end": "2355599"
  },
  {
    "text": "working in those frameworks in which they're already comfortable just like everybody else thus if your",
    "start": "2355599",
    "end": "2361040"
  },
  {
    "text": "developers have spent a decade writing say new functionality into a large monolithic",
    "start": "2361040",
    "end": "2367440"
  },
  {
    "text": "application then moving to a more service oriented architecture such as microservices may",
    "start": "2367440",
    "end": "2372960"
  },
  {
    "text": "very well be very jarring same with potential database changes",
    "start": "2372960",
    "end": "2378160"
  },
  {
    "text": "moving from a relational database to a nosql or even key value or some other purpose-built database is a really",
    "start": "2378160",
    "end": "2384800"
  },
  {
    "text": "different design paradigm and a different design paradigm is going to lead to some cognitive",
    "start": "2384800",
    "end": "2390079"
  },
  {
    "text": "dissonance and nothing really talks like a different design paradigm",
    "start": "2390079",
    "end": "2396000"
  },
  {
    "text": "that a change in domain or the interpretation about how you're either going to run your business or how you're going to write the",
    "start": "2396000",
    "end": "2401839"
  },
  {
    "text": "software to fulfill your business and when you're not only affecting the way that they approach the coding",
    "start": "2401839",
    "end": "2407680"
  },
  {
    "text": "process but also maybe making changes that impact the way that they do their day-to-day work such as",
    "start": "2407680",
    "end": "2414079"
  },
  {
    "text": "even changes how they check in code and manage their code or even more importantly how they run",
    "start": "2414079",
    "end": "2419599"
  },
  {
    "text": "their debugging and tracing as they do their work those little things add complexity to the refactor attempt",
    "start": "2419599",
    "end": "2425599"
  },
  {
    "text": "and increase the chance of failure so they should really be taken into account when you uh when you look at what software refactor",
    "start": "2425599",
    "end": "2431599"
  },
  {
    "text": "patterns you think make the most sense for the changes that you want to fill",
    "start": "2431599",
    "end": "2436880"
  },
  {
    "text": "the last main area to consider is what your is when your proposed refactor includes changes that may be out of your",
    "start": "2437280",
    "end": "2443839"
  },
  {
    "text": "current system administrator's knowledge imagine being a system administrator that's used to running virtual machines",
    "start": "2443839",
    "end": "2450720"
  },
  {
    "text": "but being asked to pick up containers or in supporting serverless functions",
    "start": "2450720",
    "end": "2456240"
  },
  {
    "text": "or your sysadmins are used to running and optimizing big windows web server vms and now have to do linux vms or even",
    "start": "2456240",
    "end": "2462960"
  },
  {
    "text": "linux containers with all of that adding some additional new areas such as how managing and supporting user",
    "start": "2462960",
    "end": "2470640"
  },
  {
    "text": "rights and managing access may be different based upon the type of refactor that's being performed",
    "start": "2470640",
    "end": "2476240"
  },
  {
    "text": "none of these are really suggested to be show stoppers they shouldn't stop your refactor",
    "start": "2476240",
    "end": "2481440"
  },
  {
    "text": "but they all indicate areas where external factors can influence the success of your refactor so as you make your plans you really",
    "start": "2481440",
    "end": "2488160"
  },
  {
    "text": "should be considering these as well as the patterns that you want to follow so we've talked some implementation",
    "start": "2488160",
    "end": "2494560"
  },
  {
    "text": "points to talk some patterns let's get a little bit more into the actual use of these and look at a system",
    "start": "2494560",
    "end": "2500160"
  },
  {
    "text": "so there's two specific refactors that i want to talk about the first is within a web application and the second is from a",
    "start": "2500160",
    "end": "2505760"
  },
  {
    "text": "soa type web service to a microservice so the right side here is a bunch of",
    "start": "2505760",
    "end": "2513520"
  },
  {
    "text": "servers represents the load balance big old web app just kind of you know an old monolithic application",
    "start": "2513520",
    "end": "2521760"
  },
  {
    "text": "that is calling to a service based or a service oriented architecture set of",
    "start": "2521760",
    "end": "2526800"
  },
  {
    "text": "services behind it and these are the communication lines that are going on um the web app calls a lot of these",
    "start": "2526800",
    "end": "2534480"
  },
  {
    "text": "services but there's also a lot of service to service call going on as well",
    "start": "2534480",
    "end": "2539680"
  },
  {
    "text": "that's just kind of nuts imagine how scary it would be to try to figure out how to add some new functionality into",
    "start": "2539680",
    "end": "2545119"
  },
  {
    "text": "the purchasing module how do you wedge that in there what's with the current design approach you",
    "start": "2545119",
    "end": "2550400"
  },
  {
    "text": "could do anything to one module and it could potentially affect any of these other modules",
    "start": "2550400",
    "end": "2556160"
  },
  {
    "text": "and also what this diagram shows is how business rules tend to get scattered amongst different areas of the",
    "start": "2557040",
    "end": "2562160"
  },
  {
    "text": "system and this tends to be why you end up having to do a lot of refactors",
    "start": "2562160",
    "end": "2567280"
  },
  {
    "text": "because your business rules end up getting scattered around and you need to be able to bring them back",
    "start": "2567280",
    "end": "2572319"
  },
  {
    "text": "together in this case for example there's orchestration going on in the web app as it determines what services",
    "start": "2572319",
    "end": "2578079"
  },
  {
    "text": "to call as well as all of the inner communications that are going on so this is what a typical request would",
    "start": "2578079",
    "end": "2584480"
  },
  {
    "text": "look like the big old web app would uh call the user service for authorization",
    "start": "2584480",
    "end": "2590079"
  },
  {
    "text": "and authentication it then calls the customer service to get the customer information",
    "start": "2590079",
    "end": "2596000"
  },
  {
    "text": "the website calls the order service with the order that the user submitted the order service saves the information",
    "start": "2596000",
    "end": "2602240"
  },
  {
    "text": "calls the product information to decrement the available product account and then calls the communication service",
    "start": "2602240",
    "end": "2607760"
  },
  {
    "text": "to send the order confirmation email five different services are involved",
    "start": "2607760",
    "end": "2613760"
  },
  {
    "text": "other business flows are very similar in some of them the website does some orchestration and then hands it off to a service the",
    "start": "2613760",
    "end": "2620560"
  },
  {
    "text": "service generally handles the persistence then performs additional processing based upon",
    "start": "2620560",
    "end": "2626400"
  },
  {
    "text": "whatever business rules were defined for that service so this is what we're going to refactor",
    "start": "2626400",
    "end": "2631680"
  },
  {
    "text": "so this is pretty much what a typical website especially one that server side mvc based looks like",
    "start": "2631680",
    "end": "2637119"
  },
  {
    "text": "there's a bunch of client-side language in that hippie javascript stuff there's the controller layer that",
    "start": "2637119",
    "end": "2642880"
  },
  {
    "text": "accepts the user input returns the ui elements there's the business logic layer that does all the processing and",
    "start": "2642880",
    "end": "2648720"
  },
  {
    "text": "orchestration and you can kind of think of this as a model for that big old web application",
    "start": "2648720",
    "end": "2653839"
  },
  {
    "text": "that i that i showed earlier so in this case you need to add an",
    "start": "2653839",
    "end": "2659760"
  },
  {
    "text": "abstraction layer between the controllers and the business logic that's you know assuming that you don't already have one ideally you'll have one",
    "start": "2659760",
    "end": "2667040"
  },
  {
    "text": "it's amazing how many times we don't um once you get that done and you've verified that all the communications between the controller",
    "start": "2667040",
    "end": "2673440"
  },
  {
    "text": "and the business logic pass through the abstraction layer you then refactor the previous business",
    "start": "2673440",
    "end": "2679040"
  },
  {
    "text": "layer to call the new microservice instead assuming that that's how we're going to be going through this for those sections",
    "start": "2679040",
    "end": "2684800"
  },
  {
    "text": "of the logic that care about that area though to be honest it could be debated as to whether or not it's a new service",
    "start": "2684800",
    "end": "2690960"
  },
  {
    "text": "or simply a completely redone service which we're going to look at now before we leave the slide however i want",
    "start": "2690960",
    "end": "2696079"
  },
  {
    "text": "to call out a few things the first is that while this abstraction layer in the slide seems to be completely between the controller and",
    "start": "2696079",
    "end": "2702560"
  },
  {
    "text": "the business logic it can simply start as the area that will cover the business logic that's going to",
    "start": "2702560",
    "end": "2707920"
  },
  {
    "text": "be refactored so if you think about we talked about",
    "start": "2707920",
    "end": "2713680"
  },
  {
    "text": "the abstraction software pattern you don't have to actually do it across everything",
    "start": "2713680",
    "end": "2719040"
  },
  {
    "text": "you just need to keep it above the level in which you're going to try to abstract and refactor out",
    "start": "2719040",
    "end": "2726240"
  },
  {
    "text": "so this is what it and sorry i'm starting to rush through it looks like i'm running out of time and this is what these typical solo web",
    "start": "2726560",
    "end": "2732160"
  },
  {
    "text": "services look like traditional end tier layered architecture with data either coming from the database through the data",
    "start": "2732160",
    "end": "2738079"
  },
  {
    "text": "persistence layer or from a different service through the cleverly named other services data so this is what an",
    "start": "2738079",
    "end": "2745040"
  },
  {
    "text": "idea what a soa like service would look like after it's been refactored first we need to add a message handler",
    "start": "2745040",
    "end": "2750800"
  },
  {
    "text": "because that's what we're going to use to do communication because eventual consistency is okay",
    "start": "2750800",
    "end": "2756880"
  },
  {
    "text": "i put this up at the top because it's much like a request even though it's rather than being an http request it's a",
    "start": "2756880",
    "end": "2763040"
  },
  {
    "text": "request caused by a sent message we'll need to add a messaging layer to",
    "start": "2763040",
    "end": "2768400"
  },
  {
    "text": "to process outpower messages if the service is going to send any and",
    "start": "2768400",
    "end": "2773440"
  },
  {
    "text": "we will redo the persistence layer because we're no longer going to be saving information in the shared database",
    "start": "2773440",
    "end": "2778560"
  },
  {
    "text": "and our model is able to change because it only has to track the things that care about lastly we'll need to refactor the",
    "start": "2778560",
    "end": "2784560"
  },
  {
    "text": "business logic layer because all of the changes will be going on in this area we're likely removing a lot of",
    "start": "2784560",
    "end": "2789680"
  },
  {
    "text": "responsibility from the service because it doesn't belong here there are things that the current",
    "start": "2789680",
    "end": "2794800"
  },
  {
    "text": "version of service is doing that it should not be doing in the future",
    "start": "2794800",
    "end": "2799599"
  },
  {
    "text": "that means that i've seen it every time i've done this that you'll probably end up especially if you're looking to go to microservices",
    "start": "2799920",
    "end": "2806400"
  },
  {
    "text": "with many more services than what you would anticipated and what you're already running this is but what you're going to see is",
    "start": "2806400",
    "end": "2812240"
  },
  {
    "text": "the responsibilities around each of these microservices is going to be much more clear",
    "start": "2812240",
    "end": "2817838"
  },
  {
    "text": "so let's talk about what this would be like to refactor based off of the patterns that we talked about first of all we added in a message",
    "start": "2820160",
    "end": "2826480"
  },
  {
    "text": "handler and updated the api generally removing a bunch of endpoints that the refactored service wouldn't care about",
    "start": "2826480",
    "end": "2832400"
  },
  {
    "text": "though to be honest it's probably not removed but is instead moved to a different service so let's not worry about those parts",
    "start": "2832400",
    "end": "2838319"
  },
  {
    "text": "instead let's look at the brand new messaging layer that we're adding in how would this be added in",
    "start": "2838319",
    "end": "2845200"
  },
  {
    "text": "this is what we had minus the api layer this is the list of patterns which of",
    "start": "2845280",
    "end": "2851359"
  },
  {
    "text": "them makes the most sense if you're going to consider this specific case adding in a new horizontal layer for messaging which would be",
    "start": "2851359",
    "end": "2858400"
  },
  {
    "text": "appropriate strangler fig doesn't work branch by abstraction works so let's leave that",
    "start": "2858400",
    "end": "2866960"
  },
  {
    "text": "parallel run that may work but in this case it really isn't an implementation",
    "start": "2866960",
    "end": "2872000"
  },
  {
    "text": "pattern so let's drop that change data capture that's that's an",
    "start": "2872000",
    "end": "2877680"
  },
  {
    "text": "interesting one so we had the yellow box between the business layer and the persistence layer",
    "start": "2877680",
    "end": "2883280"
  },
  {
    "text": "but if we're actually flexible about this then this could actually work um we would essentially be switching",
    "start": "2883280",
    "end": "2889280"
  },
  {
    "text": "those two boxes around so let's keep this one in for a second um",
    "start": "2889280",
    "end": "2894400"
  },
  {
    "text": "ui composition yeah i don't think that would help us in this route norwood decorating collaborator which",
    "start": "2894400",
    "end": "2901760"
  },
  {
    "text": "kind of leaves us with two potential patterns to use in this case branch by abstraction or change data capture",
    "start": "2901760",
    "end": "2909119"
  },
  {
    "text": "but if we're firm about adding the abstraction between the currently existing business logic in the persistence layer",
    "start": "2909200",
    "end": "2914880"
  },
  {
    "text": "you can re-implement that abstraction in the messaging layer and then pass the calls through using that same abstraction into the",
    "start": "2914880",
    "end": "2921119"
  },
  {
    "text": "persistence layer which is going to have to be redone anyway to save the new models to the new database system so how could you do this",
    "start": "2921119",
    "end": "2928960"
  },
  {
    "text": "iteratively this is a lot of work what can you do to make it more iterative",
    "start": "2928960",
    "end": "2934079"
  },
  {
    "text": "you could do that by keeping the persistence layer evolve your business logic changes",
    "start": "2934079",
    "end": "2939200"
  },
  {
    "text": "implement change data capture and that will manage the outbound messaging so you'll take a code first approach",
    "start": "2939200",
    "end": "2947119"
  },
  {
    "text": "this allows you to get some benefits like the outbound messaging while still not having to complete the full set of work",
    "start": "2947119",
    "end": "2953040"
  },
  {
    "text": "you can release this send messages and then keep working on your refactor until you get to the point where your",
    "start": "2953040",
    "end": "2959200"
  },
  {
    "text": "work is pretty much finished and you've released in this case your new microservice through several",
    "start": "2959200",
    "end": "2964720"
  },
  {
    "text": "iterations so i know we tried to cover a lot of",
    "start": "2964720",
    "end": "2970800"
  },
  {
    "text": "things in a short period i appreciate you sticking with me especially since we couldn't get as deep",
    "start": "2970800",
    "end": "2976400"
  },
  {
    "text": "into the weeds as i imagined some of you were hoping um any questions",
    "start": "2976400",
    "end": "2983839"
  },
  {
    "text": "see if i can figure out how to get the question pane up here",
    "start": "2983839",
    "end": "2989839"
  },
  {
    "text": "also if you're interested at all in what uh aws has going on on the dot that",
    "start": "2990960",
    "end": "2996160"
  },
  {
    "text": "platform make sure that you follow us our net on aws handle that's where all of our releases and discussions",
    "start": "2996160",
    "end": "3003040"
  },
  {
    "text": "anything interesting that we're doing gets published there",
    "start": "3003040",
    "end": "3013839"
  },
  {
    "text": "you",
    "start": "3018720",
    "end": "3020800"
  }
]