[
  {
    "text": "all right good morning and thanks for coming um today we're going to dive into Chrome",
    "start": "4480",
    "end": "11320"
  },
  {
    "text": "exploitation uh we go through the inner working of Chrome's architecture uh",
    "start": "11320",
    "end": "16440"
  },
  {
    "text": "focusing on the va8 JavaScript engine and its um exploitation",
    "start": "16440",
    "end": "22160"
  },
  {
    "text": "Pathways um right let's get started so mm",
    "start": "22160",
    "end": "31960"
  },
  {
    "text": "see yeah all right uh my name is mat malvika I'm a Content Dev and researcher",
    "start": "32440",
    "end": "39760"
  },
  {
    "text": "um at offc I'm Italian living in Norway and occasionally I play drums in a local",
    "start": "39760",
    "end": "46199"
  },
  {
    "text": "band um so that's the agenda for today uh we'll start by exploring uh the",
    "start": "46199",
    "end": "52160"
  },
  {
    "text": "Chrome architecture and the V8 pipeline to set a foundation for understanding how things work uh under the hood then",
    "start": "52160",
    "end": "59359"
  },
  {
    "text": "we'll look at vulnerability class named type confusion which will serve as a stepping stone into discussing our three",
    "start": "59359",
    "end": "66200"
  },
  {
    "text": "CVS for today the first one predates the V8 Hep sandbox then we move to the",
    "start": "66200",
    "end": "71720"
  },
  {
    "text": "modern sandbox ERA with the second CV and then we wrap it up with a third and last one CV which serves as fresh",
    "start": "71720",
    "end": "78920"
  },
  {
    "text": "example of present day pabilities in Google Chrome um for each one of this",
    "start": "78920",
    "end": "84880"
  },
  {
    "text": "bug I'm going to demonstrate uh Windows base exploit and for the last two I'm going to show how also we can um bypass",
    "start": "84880",
    "end": "92399"
  },
  {
    "text": "the new uh Heap sandbox as well um so why it matters um first of all uh",
    "start": "92399",
    "end": "101119"
  },
  {
    "text": "browser are one of the most used software worldwide so meaning they are really avilable",
    "start": "101119",
    "end": "107079"
  },
  {
    "text": "Target and they're always connected so it means if we if we have a if you can exploit vulnerability in the in the",
    "start": "107079",
    "end": "113960"
  },
  {
    "text": "browser we can get remote code execution to some extent um and um browser also demand",
    "start": "113960",
    "end": "121719"
  },
  {
    "text": "speeds meaning that we need to serve fast um every day many different types",
    "start": "121719",
    "end": "127880"
  },
  {
    "text": "open at the same time right and that's why we have jit compilers more on that later but jit compilers basically helps",
    "start": "127880",
    "end": "134560"
  },
  {
    "text": "browser to be fast and jit compilers are also very complex software meaning",
    "start": "134560",
    "end": "140280"
  },
  {
    "text": "meaning that will lead to bugs like most of the complex software uh will do so today's focus is",
    "start": "140280",
    "end": "147640"
  },
  {
    "text": "on Chrome and specifically it's G engine V8 on Windows why Windows because it's",
    "start": "147640",
    "end": "153360"
  },
  {
    "text": "one of the most widely deployed operating system in the world and it's very enticing during uh red teaming",
    "start": "153360",
    "end": "161360"
  },
  {
    "text": "so uh yeah let's now get a brief overview of the Chrome your architecture",
    "start": "161360",
    "end": "168480"
  },
  {
    "text": "first um before we jump at first into mobilities let's let's see how Chrome",
    "start": "168480",
    "end": "173560"
  },
  {
    "text": "Works uh behind the scene so like many browsers Chrome uses multiple processes",
    "start": "173560",
    "end": "179200"
  },
  {
    "text": "the main process proc communicates with the isolated render renderer processor through uh IPC or interprocess",
    "start": "179200",
    "end": "185920"
  },
  {
    "text": "Communication channel to keep them all the process separate so but what's the",
    "start": "185920",
    "end": "191120"
  },
  {
    "text": "what's the renderer process basically the render process handles JavaScript Dom and CSS um rendering and it's most",
    "start": "191120",
    "end": "198200"
  },
  {
    "text": "vulnerable as it processes untrusted code and trusted JavaScript code right so to protect it Chrome uh uses a",
    "start": "198200",
    "end": "205159"
  },
  {
    "text": "process handbooks which is outside the scope of this talk so if we if I'm talking talking about sandbox from now",
    "start": "205159",
    "end": "211000"
  },
  {
    "text": "on it's the Heap sandbox not the process sandbox which is I'm not talking about this today um so historically gaining",
    "start": "211000",
    "end": "219599"
  },
  {
    "text": "code execution uh on the host require two bugs uh one in the in the in the",
    "start": "219599",
    "end": "226560"
  },
  {
    "text": "renderer process and one sandbox Escape right and then you could get a full remote shell but now with the new V V8",
    "start": "226560",
    "end": "233480"
  },
  {
    "text": "Heap sandbox it's more complicated so we need three CDs basically the renderer",
    "start": "233480",
    "end": "238519"
  },
  {
    "text": "the Heap sandbox by pass and and the process sbox by passs right cool um but",
    "start": "238519",
    "end": "245760"
  },
  {
    "text": "before analyzing the first bug let's zoom in and get more familiar with V8 uh",
    "start": "245760",
    "end": "251040"
  },
  {
    "text": "the Chrome JavaScript engine so first off let's get a bir eye",
    "start": "251040",
    "end": "256759"
  },
  {
    "text": "view on the V8 pipeline from high level perspective so any modern JavaScript engine consists of several key",
    "start": "256759",
    "end": "263880"
  },
  {
    "text": "components um the parser which basically processes the source code uh",
    "start": "263880",
    "end": "270320"
  },
  {
    "text": "JavaScript and it breaks into tokens and generate an as an abstract syntax tree",
    "start": "270320",
    "end": "277400"
  },
  {
    "text": "and it's what the uh abstract synex Tre does basically tokenize the the code the",
    "start": "277400",
    "end": "282680"
  },
  {
    "text": "source code into into uh fundamental unit code like for instance a a line of",
    "start": "282680",
    "end": "288680"
  },
  {
    "text": "cod like let let equal x let x equal 10 will just result in a four different",
    "start": "288680",
    "end": "294880"
  },
  {
    "text": "unit of code and from that we build the a which is a tree structure that represent the code syntax and the",
    "start": "294880",
    "end": "301560"
  },
  {
    "text": "relationship between the different unit of code from that we have The Interpreter um which basically takes the",
    "start": "301560",
    "end": "309479"
  },
  {
    "text": "a in the the syntax tree syntax tree as an in input and then it generates bite",
    "start": "309479",
    "end": "315280"
  },
  {
    "text": "code right for execution so basically older browser we just have an sort of an",
    "start": "315280",
    "end": "321759"
  },
  {
    "text": "interpreter and just execute whatever JavaScript code in The Interpreter right um the bite code itself it's an",
    "start": "321759",
    "end": "328360"
  },
  {
    "text": "intermediate representation of the program that is designed to be executed in a in a virtual",
    "start": "328360",
    "end": "333759"
  },
  {
    "text": "machine and recently in the last like 10 15 years probably even more recently",
    "start": "333759",
    "end": "339440"
  },
  {
    "text": "from browser history perspective we also have a more advanced compiler called jit",
    "start": "339440",
    "end": "345080"
  },
  {
    "text": "compilers which are basically optimized uh compiler so they takes the bite code in basically and try to",
    "start": "345080",
    "end": "351720"
  },
  {
    "text": "optimize the resulting machine code for more efficient execution the actual version of the V V8",
    "start": "351720",
    "end": "359960"
  },
  {
    "text": "pipeline from 2022 it's here so like 2 3 years",
    "start": "359960",
    "end": "365319"
  },
  {
    "text": "old uh that's V8 how was were working two three years ago and we have The",
    "start": "365319",
    "end": "371240"
  },
  {
    "text": "Interpreter which is named ignition and and then we have spark plug and Tran which are two compilers to jit compiler",
    "start": "371240",
    "end": "379000"
  },
  {
    "text": "spark plug is a nonoptimized jit compiler and trofan is the optimized jit",
    "start": "379000",
    "end": "384160"
  },
  {
    "text": "compiler more on Trine later on today um the relationship here is that ignition",
    "start": "384160",
    "end": "390479"
  },
  {
    "text": "works with something called the profiler so it analyze the uh JavaScript function at run times profiles them and in case",
    "start": "390479",
    "end": "398319"
  },
  {
    "text": "it deems that a function calls many many times it might Mark that function as a a",
    "start": "398319",
    "end": "404599"
  },
  {
    "text": "hot hot function so that's called hot code meanings that it triggers turbofun",
    "start": "404599",
    "end": "409880"
  },
  {
    "text": "to compile the function into more optimized code since we're executed the function many times so uh more on hot",
    "start": "409880",
    "end": "416360"
  },
  {
    "text": "function and hot code later in in a second uh that's the actually it's 2025 so it's",
    "start": "416360",
    "end": "424520"
  },
  {
    "text": "it's uh the same uh from 2024 that's the uh upto-date pipeline that we have today",
    "start": "424520",
    "end": "430440"
  },
  {
    "text": "in uh in Chrome in V8 uh we have a new compiler um called",
    "start": "430440",
    "end": "436720"
  },
  {
    "text": "magv uh a new new jit compiler so in December 23 magv has been introduced and",
    "start": "436720",
    "end": "443560"
  },
  {
    "text": "acts as a compromise between spark plug and U and tropon",
    "start": "443560",
    "end": "449720"
  },
  {
    "text": "so and so we have a 4 years pipeline now and and magav sits basically in between",
    "start": "449720",
    "end": "456280"
  },
  {
    "text": "the non-optimized um compiler spark log and turbofun which is the most optimized",
    "start": "456280",
    "end": "463080"
  },
  {
    "text": "uh Jet compilers and we more more on um on magb on the on the last bag that",
    "start": "463080",
    "end": "470120"
  },
  {
    "text": "we're going to we're going to uh see today so that's zooming in into into the four tier uh compiler pipeline so we",
    "start": "470120",
    "end": "477599"
  },
  {
    "text": "basically see that when we have ignition mag Tron and um and uh spark plug the",
    "start": "477599",
    "end": "486319"
  },
  {
    "text": "ignition and spark plug they're unoptimized while Mac 11 trun are optimized so whenever the compiler",
    "start": "486319",
    "end": "492560"
  },
  {
    "text": "decide that the uh code execution require optimization so they will just",
    "start": "492560",
    "end": "498039"
  },
  {
    "text": "optimize it and and likewise they will they will uh um like switch back to",
    "start": "498039",
    "end": "503919"
  },
  {
    "text": "unoptimized code um in case there's a need for that right so it's a everything",
    "start": "503919",
    "end": "509560"
  },
  {
    "text": "happens at run time and depending on the JavaScript code that we we are processing and the profile helps in",
    "start": "509560",
    "end": "516240"
  },
  {
    "text": "deciding which compiler is going to execute a specific piece of JavaScript code at run",
    "start": "516240",
    "end": "523080"
  },
  {
    "text": "time um so having a bit of a review of the uh of the V8 uh pipeline so let's",
    "start": "523080",
    "end": "530040"
  },
  {
    "text": "now see how JavaScript gets actually executed inside V8 um so um ignition is not optimal as",
    "start": "530040",
    "end": "540519"
  },
  {
    "text": "it doesn't generate efficient machine code but",
    "start": "540519",
    "end": "545760"
  },
  {
    "text": "um even though we have like like The Interpreter as we said there his name ignition so it um basically execute it's",
    "start": "545760",
    "end": "553600"
  },
  {
    "text": "the first stage of executing code inside inside the The Interpreter right so we",
    "start": "553600",
    "end": "560079"
  },
  {
    "text": "execute JavaScript here and uh what The Interpreter does it takes uh bite code",
    "start": "560079",
    "end": "565640"
  },
  {
    "text": "as an input and execute it via the JavaScript virtual machine that's what uh The Interpreter does and the virtual",
    "start": "565640",
    "end": "572560"
  },
  {
    "text": "machine is responsible for generating and executing machine code right um so let's see how actually",
    "start": "572560",
    "end": "580680"
  },
  {
    "text": "JavaScript by code looks in in reality here we have an example of um of",
    "start": "580680",
    "end": "588519"
  },
  {
    "text": "a function that adds to to whatever number we are we are passing as a as a",
    "start": "588519",
    "end": "593800"
  },
  {
    "text": "property right you can see that we have something called d8 here so uh",
    "start": "593800",
    "end": "600360"
  },
  {
    "text": "whenever we want to work on V on V8 on the on the JavaScript engine we don't have to compile the entire uh chromium",
    "start": "600360",
    "end": "608040"
  },
  {
    "text": "right because it normally will take few hours on on a even of a on a b laptop right so we just we we could just",
    "start": "608040",
    "end": "614240"
  },
  {
    "text": "compile V8 and together with V8 we we have something called d8 which is the",
    "start": "614240",
    "end": "619320"
  },
  {
    "text": "the debugger so we can just debug debug uh V8 as as a standalone mean just by",
    "start": "619320",
    "end": "624800"
  },
  {
    "text": "using d8 so we can test any any property any any feature of V8 just right inside",
    "start": "624800",
    "end": "631040"
  },
  {
    "text": "the8 and that works both both on Linux and windows and and on Ma of course as well um so back to our jav um JavaScript",
    "start": "631040",
    "end": "641000"
  },
  {
    "text": "bite code function so here we see we can print with the8 the resulting um bite",
    "start": "641000",
    "end": "647360"
  },
  {
    "text": "code so the first instruction basically loads to into the accumulator which is a load a the",
    "start": "647360",
    "end": "653720"
  },
  {
    "text": "accumulator uh it saves it into um then",
    "start": "653720",
    "end": "658760"
  },
  {
    "text": "it saves whatever value that is in accumulator into register zero R zero",
    "start": "658760",
    "end": "665279"
  },
  {
    "text": "and then we load the function argument a z uh the first argument into the accumulator next we add um r0 whatever",
    "start": "665279",
    "end": "674200"
  },
  {
    "text": "we saved r0 to the value into the accumulator uh which is 13 in this case",
    "start": "674200",
    "end": "679720"
  },
  {
    "text": "because we are calling the function with 13 and then in the end we return whatever we have in the accumulator uh",
    "start": "679720",
    "end": "686279"
  },
  {
    "text": "to the calling function which is 15 this is very straightforward example of um",
    "start": "686279",
    "end": "692959"
  },
  {
    "text": "JavaScript bod um so just in time compilation",
    "start": "692959",
    "end": "698920"
  },
  {
    "text": "um Again The Interpreter generate uh The Interpreter generated code is not",
    "start": "698920",
    "end": "704519"
  },
  {
    "text": "actually optimal since it it works inside the VM so it it requires an",
    "start": "704519",
    "end": "710399"
  },
  {
    "text": "obstruction layer and it's it's not optimal for some kind of function that requires more more more performance but",
    "start": "710399",
    "end": "717800"
  },
  {
    "text": "how do we solve this with with uh we mentioned before is just in time compilation so if we want to produce",
    "start": "717800",
    "end": "723480"
  },
  {
    "text": "more efficient machine code in memory then we need some kind of different compilers um so is if if a unit of code",
    "start": "723480",
    "end": "731320"
  },
  {
    "text": "is is executed more frequently um we we can move the this uh this this function",
    "start": "731320",
    "end": "737240"
  },
  {
    "text": "to high compiler tiers and then produce better um machine code at run",
    "start": "737240",
    "end": "745360"
  },
  {
    "text": "time um now we we could we can take a look at JavaScript object how they can",
    "start": "745360",
    "end": "750600"
  },
  {
    "text": "be represented in memory and uh and they values types right so uh first off how",
    "start": "750600",
    "end": "757040"
  },
  {
    "text": "do we store uh type information in JavaScript um",
    "start": "757040",
    "end": "763399"
  },
  {
    "text": "so since JavaScript is a dynamically tapped language the engine must associate type information with every",
    "start": "763399",
    "end": "770279"
  },
  {
    "text": "runtime values and in VA this is achieved using combination of pointer tagging and",
    "start": "770279",
    "end": "776320"
  },
  {
    "text": "dedicated type information objects called Maps more more on that later and",
    "start": "776320",
    "end": "782079"
  },
  {
    "text": "notably memories small integers known as SMI have their least significant bits at",
    "start": "782079",
    "end": "787199"
  },
  {
    "text": "zero while pointers um to hip object have the least significant bit to set to one so this is",
    "start": "787199",
    "end": "793760"
  },
  {
    "text": "a way to distinguish between SMI and basically JavaScript object and this is",
    "start": "793760",
    "end": "800079"
  },
  {
    "text": "actually pointer tagging in in action um so again we mentioned that JavaScript",
    "start": "800079",
    "end": "808480"
  },
  {
    "text": "is a is a loose typed uh language uh so",
    "start": "808480",
    "end": "814199"
  },
  {
    "text": "unlike C or C C C++ when we compile something C++ uh like this function we",
    "start": "814199",
    "end": "820760"
  },
  {
    "text": "can get more or less a deterministic assembly output right that's what happens with with with",
    "start": "820760",
    "end": "827440"
  },
  {
    "text": "compilers and on the other hand with JavaScript um we have a function uh",
    "start": "827440",
    "end": "834160"
  },
  {
    "text": "simply takes to two two object and adds them what's the result of this compile",
    "start": "834160",
    "end": "839480"
  },
  {
    "text": "time we don't know because types can change at Prim Time That's How JavaScript works unfortunately but uh",
    "start": "839480",
    "end": "845399"
  },
  {
    "text": "that that's how it is um so it's impossible to determine the program's",
    "start": "845399",
    "end": "851160"
  },
  {
    "text": "exact Behavior at compile time but we are allowed to infer the types at run times instead um jit compiler doesn't",
    "start": "851160",
    "end": "858240"
  },
  {
    "text": "know how the data types in advance but it can learn from past runs and guesses how the code will be used in the future",
    "start": "858240",
    "end": "864759"
  },
  {
    "text": "so that's how the jet uh compiler works with the with the profiler",
    "start": "864759",
    "end": "870320"
  },
  {
    "text": "and it makes some kind of optim op optimization based on those assumptions with the profiler and like creating",
    "start": "870320",
    "end": "877240"
  },
  {
    "text": "faster code assuming that those types will stay the same over",
    "start": "877240",
    "end": "882360"
  },
  {
    "text": "time uh but how does the JavaScript engine in this case V8 keeps tracks of",
    "start": "882360",
    "end": "887720"
  },
  {
    "text": "those data types at R times how how can we do that with something called Maps so um maps are also referred as uh",
    "start": "887720",
    "end": "898440"
  },
  {
    "text": "heting clust class ES in the JavaScript uh official terminology in spider monkey Firefox G",
    "start": "898440",
    "end": "906639"
  },
  {
    "text": "engine they referred as shapes in uh JavaScript core Safari uses butterfly",
    "start": "906639",
    "end": "913399"
  },
  {
    "text": "structures and chakra the old Edge used the hidden types not confusing at all",
    "start": "913399",
    "end": "919600"
  },
  {
    "text": "so um but here Chrome uh decided Google decided to call them Maps right so we",
    "start": "919600",
    "end": "926480"
  },
  {
    "text": "stick with this terminology for today and so in this example we have an object",
    "start": "926480",
    "end": "932000"
  },
  {
    "text": "and we add two property and we assign two different values to this uh properties X and Y of one and two right",
    "start": "932000",
    "end": "941279"
  },
  {
    "text": "and again with d8 we can inspect those property right and we can see how those",
    "start": "941279",
    "end": "949519"
  },
  {
    "text": "properties are mapped in the in memory right they have those addresses so let's",
    "start": "949519",
    "end": "955199"
  },
  {
    "text": "see what happens when we add another object with the same type two different values on the new",
    "start": "955199",
    "end": "962920"
  },
  {
    "text": "object so the surprise here is that uh they share the same addresses why for",
    "start": "962920",
    "end": "969480"
  },
  {
    "text": "efficiency so uh if we have two objects sharing the same types they they will",
    "start": "969480",
    "end": "974759"
  },
  {
    "text": "also share the same maps in memory so this is not to clutter memory with so many maps and many different uh data",
    "start": "974759",
    "end": "981800"
  },
  {
    "text": "structure so this is a means of optimiz optimization and memory efficiency uh they both share the same",
    "start": "981800",
    "end": "988720"
  },
  {
    "text": "map and fix array in memory these two objects so that's that's a cool feature of",
    "start": "988720",
    "end": "993839"
  },
  {
    "text": "maps um so let's zoom in on Tran we mentioned Turan earlier and Turan is the",
    "start": "993839",
    "end": "1001399"
  },
  {
    "text": "uh most optimized jit compiler and uh on top of spark plug and and mag",
    "start": "1001399",
    "end": "1010240"
  },
  {
    "text": "the new new new compiler it basically converts the bite code to a custom intermediate representation uh or or IR uh the IR is",
    "start": "1010240",
    "end": "1019759"
  },
  {
    "text": "a is basically a graph made of of three components nodes which are basically the",
    "start": "1019759",
    "end": "1025079"
  },
  {
    "text": "operations and Contra flow edges and uh which are contra flow edges obviously",
    "start": "1025079",
    "end": "1031400"
  },
  {
    "text": "like like for any any functions or and dat flow edges which are the inputs and",
    "start": "1031400",
    "end": "1036600"
  },
  {
    "text": "and the outs of the of the functions so let's take a look at how Trine P line works from high level perspective",
    "start": "1036600",
    "end": "1043480"
  },
  {
    "text": "now um so first of all what trun does is to build a graph it's analyze the bite",
    "start": "1043480",
    "end": "1049720"
  },
  {
    "text": "code at run times and make speculations and about whatever operation the",
    "start": "1049720",
    "end": "1056039"
  },
  {
    "text": "function it it has to do and what types are involved and it tries to uh have",
    "start": "1056039",
    "end": "1062440"
  },
  {
    "text": "some kind of Safeguard with something called speculation guards because we mentioned that JavaScript can change its",
    "start": "1062440",
    "end": "1068160"
  },
  {
    "text": "Dynamics so types can change so um turbofun makes put something called",
    "start": "1068160",
    "end": "1074240"
  },
  {
    "text": "speculation guards to prevents uh that if a types will change and we what we do",
    "start": "1074240",
    "end": "1080640"
  },
  {
    "text": "is to roll back to non-optimized compiler so basically we uh go back executing uh bite code in in The",
    "start": "1080640",
    "end": "1087200"
  },
  {
    "text": "Interpreter why is that important we'll see that later because if we start executing uh optimized code without",
    "start": "1087200",
    "end": "1094080"
  },
  {
    "text": "speculation guards we might risk bugs um so um whenever we have built our",
    "start": "1094080",
    "end": "1101919"
  },
  {
    "text": "our graph we can start optimizing code with the with the jit compilers so",
    "start": "1101919",
    "end": "1107760"
  },
  {
    "text": "um it basically uh transform and optimize the the original bite code into",
    "start": "1107760",
    "end": "1114159"
  },
  {
    "text": "more optimized code in memory uh without affecting correctness and the last phase called",
    "start": "1114159",
    "end": "1120480"
  },
  {
    "text": "lowering which basically uh writes the optimized code into memory that's how",
    "start": "1120480",
    "end": "1126000"
  },
  {
    "text": "tuber fform Works in in three steps um right a quick J example so we",
    "start": "1126000",
    "end": "1134520"
  },
  {
    "text": "mentioned hot function in at the beginning of the of this presentation um so here is an example of a hot function",
    "start": "1134520",
    "end": "1141880"
  },
  {
    "text": "we can always test this in d8 so we execute this this function basically uh",
    "start": "1141880",
    "end": "1148760"
  },
  {
    "text": "10,000 times and most likely the the jit compiler will pick it up so trun will",
    "start": "1148760",
    "end": "1155400"
  },
  {
    "text": "pick it up so um and we with with calling this",
    "start": "1155400",
    "end": "1162159"
  },
  {
    "text": "function 10,000 time with uh we have dynamically created objects and we made",
    "start": "1162159",
    "end": "1167320"
  },
  {
    "text": "the function hot uh which as we said will will trigger uh jit compilation so",
    "start": "1167320",
    "end": "1173760"
  },
  {
    "text": "let's see how this will uh will have an impact with spe with speculation guards",
    "start": "1173760",
    "end": "1180799"
  },
  {
    "text": "um so we mentioned that um turbofun will generates some speculation guards so",
    "start": "1180799",
    "end": "1186120"
  },
  {
    "text": "we'll put some speculation guards in the in the optimized code uh we also have",
    "start": "1186120",
    "end": "1191200"
  },
  {
    "text": "maps that stores uh the type dynamically so we have maps that keeps track of the",
    "start": "1191200",
    "end": "1196240"
  },
  {
    "text": "those types changing at r r time uh but we have no guarantees that Maps",
    "start": "1196240",
    "end": "1201640"
  },
  {
    "text": "will stay the same for a given object in time uh The Interpreter will generate",
    "start": "1201640",
    "end": "1207280"
  },
  {
    "text": "feedback that is used by trund to make informed type speculation so that's this this workflow between The Interpreter",
    "start": "1207280",
    "end": "1214240"
  },
  {
    "text": "and the jit compiler is really important to keep track of the data types of",
    "start": "1214240",
    "end": "1220440"
  },
  {
    "text": "JavaScript and and as as we said as as we as we see speculation guards are",
    "start": "1220440",
    "end": "1226320"
  },
  {
    "text": "runtime checks and those are really important to make sure that the optimized code doesn't doesn't um uh",
    "start": "1226320",
    "end": "1235159"
  },
  {
    "text": "doesn't take into account different types basically um and if a failure occurs",
    "start": "1235159",
    "end": "1241280"
  },
  {
    "text": "then we de optimize that's uh two different example of speculation guards in the first example we ensure that we",
    "start": "1241280",
    "end": "1248320"
  },
  {
    "text": "are dealing with this small integer so we are testing whatever value is in it's",
    "start": "1248320",
    "end": "1254039"
  },
  {
    "text": "in um RDI and in if the last bit is uh um is not one we we bail out basically",
    "start": "1254039",
    "end": "1263159"
  },
  {
    "text": "uh has one sorry ba out so meaning if if we have a pointer we we build out and um",
    "start": "1263159",
    "end": "1269840"
  },
  {
    "text": "the second one it checks a map checks if if a specific map map is assigned to the",
    "start": "1269840",
    "end": "1275000"
  },
  {
    "text": "value that it's in in in RDI register right and we are uh subtracting one to",
    "start": "1275000",
    "end": "1281480"
  },
  {
    "text": "RDI because every pointers in V8 is tagged with one so whenever we need to",
    "start": "1281480",
    "end": "1286520"
  },
  {
    "text": "to perform an operation with pointers we need we to to subtract one and then we compare it with this dummy value which",
    "start": "1286520",
    "end": "1293400"
  },
  {
    "text": "is associated with a with a specific map if not then we we bail out and we go",
    "start": "1293400",
    "end": "1299120"
  },
  {
    "text": "back to the um interpreter to execute this code in in interpreter this is again to avoid any any consequence to",
    "start": "1299120",
    "end": "1305720"
  },
  {
    "text": "the optimized code which might lead to to bug uh or vulnerabilities",
    "start": "1305720",
    "end": "1312080"
  },
  {
    "text": "right um a specific case of um of these",
    "start": "1312080",
    "end": "1317360"
  },
  {
    "text": "guards is called redundance elimination which is a popular class of optimization",
    "start": "1317360",
    "end": "1323320"
  },
  {
    "text": "um that aims to remove safety checks from the machine code if they are determined to be unnecessary so um on",
    "start": "1323320",
    "end": "1332120"
  },
  {
    "text": "one hand we have speculation guards on the other hand we have optimiz optimization uh means by uh by by um",
    "start": "1332120",
    "end": "1341039"
  },
  {
    "text": "trun so in a in practice what we have is that",
    "start": "1341039",
    "end": "1346080"
  },
  {
    "text": "if we have this function uh um we could we could have this resulting intermediate",
    "start": "1346080",
    "end": "1352600"
  },
  {
    "text": "representation but as we can see the second optimization but might be",
    "start": "1352600",
    "end": "1358039"
  },
  {
    "text": "unnecessary is redundant right the second check he object and check map are",
    "start": "1358039",
    "end": "1363760"
  },
  {
    "text": "redundant so what does redundance elimination which is one of the optimization phases of turbofun is that",
    "start": "1363760",
    "end": "1370000"
  },
  {
    "text": "it might remove it however are we really sure that we cannot have any possible",
    "start": "1370000",
    "end": "1375200"
  },
  {
    "text": "side effect in between those elimination I see what could possibly go",
    "start": "1375200",
    "end": "1383720"
  },
  {
    "text": "wrong so let's introduce type confusion",
    "start": "1384240",
    "end": "1389360"
  },
  {
    "text": "vulnerabilities um right so G engines are complex because",
    "start": "1389360",
    "end": "1396279"
  },
  {
    "text": "compiling at runtime requires balancing speed optimization and secure coding",
    "start": "1396279",
    "end": "1401480"
  },
  {
    "text": "bugs arise dur during jit compilation due to most likely and uh missing checks",
    "start": "1401480",
    "end": "1409440"
  },
  {
    "text": "um so the G tangine assumed that data is one type at compile time however at run",
    "start": "1409440",
    "end": "1415279"
  },
  {
    "text": "time type changes without the related type checks that's basically what leads to a type confusion",
    "start": "1415279",
    "end": "1422080"
  },
  {
    "text": "bug which also ultimately lead to um uh out of bound read and then um code",
    "start": "1422080",
    "end": "1430600"
  },
  {
    "text": "execution so let's now discuss the first of our three bugs which it's really cool",
    "start": "1430600",
    "end": "1435960"
  },
  {
    "text": "bug from 2018 pre Heap sandbox this is very classic",
    "start": "1435960",
    "end": "1441480"
  },
  {
    "text": "type confusion bugs in in browser so it's very typical and predates the the",
    "start": "1441480",
    "end": "1446679"
  },
  {
    "text": "Heap sandbox uh so we can we can get a sense on how V8 buug can get exploited",
    "start": "1446679",
    "end": "1451840"
  },
  {
    "text": "without any extra mitigation we're not going to do into the need GRE of every bug or every",
    "start": "1451840",
    "end": "1458600"
  },
  {
    "text": "exploit so I'm trying to keep it very high level now uh because also we don't have much time in general but um that's",
    "start": "1458600",
    "end": "1466039"
  },
  {
    "text": "the that's the root cause for the CVS so basically uh this is part of the bug the root C and we have the can of right",
    "start": "1466039",
    "end": "1473919"
  },
  {
    "text": "operator that states that the engine assume that the operation will observe no consequence no side",
    "start": "1473919",
    "end": "1480480"
  },
  {
    "text": "effects um so whatever we call this create object with this no operator we",
    "start": "1480480",
    "end": "1486640"
  },
  {
    "text": "just say hey engine don't don't don't worry the object won't change",
    "start": "1486640",
    "end": "1492360"
  },
  {
    "text": "okay um obviously the object map has changed when becoming a prototype",
    "start": "1492360",
    "end": "1498880"
  },
  {
    "text": "um so here the function generates a new map for the object so even though we we",
    "start": "1498880",
    "end": "1504399"
  },
  {
    "text": "told the the the the G tangent and don't worry this is not going to change but it does change so that's a bug basically uh",
    "start": "1504399",
    "end": "1512720"
  },
  {
    "text": "so the newly created object is converted to a prototype object which also change the object associate map so the map",
    "start": "1512720",
    "end": "1519080"
  },
  {
    "text": "changes without informing the jit compiler uh this is a very typical",
    "start": "1519080",
    "end": "1524159"
  },
  {
    "text": "unseen uh side effect that the jit compiler hasn't taken into account",
    "start": "1524159",
    "end": "1529399"
  },
  {
    "text": "so it's it's sort of a Maps confusion uh here we're going to",
    "start": "1529399",
    "end": "1535080"
  },
  {
    "text": "demonstrate the the root cause in again in d8 in debugger uh first we um print the object",
    "start": "1535080",
    "end": "1542360"
  },
  {
    "text": "memory then we um create the object via the vable function which is object",
    "start": "1542360",
    "end": "1548000"
  },
  {
    "text": "object create and then we print again the object so as we can see from d8 uh",
    "start": "1548000",
    "end": "1554000"
  },
  {
    "text": "we have first we have a map at this address of fast property types after",
    "start": "1554000",
    "end": "1559919"
  },
  {
    "text": "triggering the vulnerabilities we have another types uh of the for the same map with the dictionary properties so",
    "start": "1559919",
    "end": "1566000"
  },
  {
    "text": "meaning meaning the types has changed from turbon from the jit comp",
    "start": "1566000",
    "end": "1572279"
  },
  {
    "text": "perspective even though the types in the function hasn't changed really so we could abuse this fact by accessing",
    "start": "1572279",
    "end": "1579440"
  },
  {
    "text": "memory uh out of bound so we can obtain from this type",
    "start": "1579440",
    "end": "1585240"
  },
  {
    "text": "confusion uh we can obtain relative r right um and then arbitrary read and",
    "start": "1585240",
    "end": "1593279"
  },
  {
    "text": "write this is typically way to exploit type confusion bugs and how do we perform code",
    "start": "1593279",
    "end": "1601120"
  },
  {
    "text": "execution um so we hate Heap as um an X",
    "start": "1601120",
    "end": "1606399"
  },
  {
    "text": "so we cannot execute code or dep on windows so B basically uh the memory is",
    "start": "1606399",
    "end": "1612679"
  },
  {
    "text": "uh either writeable or or executable um",
    "start": "1612679",
    "end": "1619080"
  },
  {
    "text": "yeah so how can we execute Shell Code if the memory is read",
    "start": "1619080",
    "end": "1626039"
  },
  {
    "text": "right um let's introduce web assembly Shell Code so in in the v8p we also have",
    "start": "1626039",
    "end": "1634840"
  },
  {
    "text": "memory region assigned for web assembly um and we also have jump jump tables uh",
    "start": "1634840",
    "end": "1640480"
  },
  {
    "text": "that are reference inside the vhp uh so wasm is basically a binary",
    "start": "1640480",
    "end": "1645880"
  },
  {
    "text": "format that can execute F faster than than JavaScript code right and it's",
    "start": "1645880",
    "end": "1651039"
  },
  {
    "text": "compiled by LOF uh which is another uh V8",
    "start": "1651039",
    "end": "1656720"
  },
  {
    "text": "component and inside the again this bug is from 2018 so back then the uh one",
    "start": "1656720",
    "end": "1663519"
  },
  {
    "text": "jump tables or read writer and executable so perfect for to hijack uh",
    "start": "1663519",
    "end": "1669320"
  },
  {
    "text": "code execution and that's a brief demo of the",
    "start": "1669320",
    "end": "1675760"
  },
  {
    "text": "exploit let see if that works so we have a shell on Cali we execute on Windows and we get a reversal it's very high",
    "start": "1677120",
    "end": "1684240"
  },
  {
    "text": "level we don't need to go into all details of the exploit but that's just to show you that is",
    "start": "1684240",
    "end": "1689720"
  },
  {
    "text": "working okay right uh so preheat sandbox what do",
    "start": "1689720",
    "end": "1696200"
  },
  {
    "text": "we have uh basically how do we do we exploit any bug in",
    "start": "1696200",
    "end": "1701960"
  },
  {
    "text": "201819 so pre uh Heap sandbox um we gain out of bounds",
    "start": "1701960",
    "end": "1710120"
  },
  {
    "text": "uh we harness have confusion to to uh abuse the object that we are um that we",
    "start": "1710320",
    "end": "1717200"
  },
  {
    "text": "are that is vulnerable and then from that we gain arbitary Rhythm right and",
    "start": "1717200",
    "end": "1722360"
  },
  {
    "text": "from that we code we we generate we we gain code execution uh by writing",
    "start": "1722360",
    "end": "1728240"
  },
  {
    "text": "function pointers as as we saw just saw so typically VR wasm web assembly uh",
    "start": "1728240",
    "end": "1735240"
  },
  {
    "text": "import table um right an important thing here is that normally when we try to build",
    "start": "1735240",
    "end": "1742200"
  },
  {
    "text": "our Primitives out of bound Primitives we abuse something called the backing store pointers which is basically a",
    "start": "1742200",
    "end": "1749080"
  },
  {
    "text": "pointers in an object in JavaScript object that reference actual memory region so from that we have basically",
    "start": "1749080",
    "end": "1754880"
  },
  {
    "text": "the coordinates to build up and and create arbitary read and WR the second CV for today is uh um from",
    "start": "1754880",
    "end": "1765159"
  },
  {
    "text": "2023 and it's where's the Heap uh the V8 sandbox was already rolled",
    "start": "1765159",
    "end": "1770960"
  },
  {
    "text": "out uh this has been discovered by Mano which is a vulnerability researcher from",
    "start": "1770960",
    "end": "1776440"
  },
  {
    "text": "gab research and it's another type of confusion uh again this this time is in",
    "start": "1776440",
    "end": "1781640"
  },
  {
    "text": "in the magb compiler so I mentioned the magler compiler has been rolled out in 2023 and like any new software new",
    "start": "1781640",
    "end": "1789120"
  },
  {
    "text": "software contains bugs so uh it still possible to find bugs in in MV uh but",
    "start": "1789120",
    "end": "1796000"
  },
  {
    "text": "before analyzing the bug itself let's first explore the whole purpose of the Heap",
    "start": "1796000",
    "end": "1802200"
  },
  {
    "text": "sandbox so this has been rolled out by some G from uh formerly project zero now",
    "start": "1802200",
    "end": "1809000"
  },
  {
    "text": "part of chromium security and um so as I mentioned",
    "start": "1809000",
    "end": "1815559"
  },
  {
    "text": "earlier up until 2023 we just needed two vulnerabilities to uh get full code",
    "start": "1815559",
    "end": "1821720"
  },
  {
    "text": "remote execution on a system via a browser mobilities on Chrome so on the",
    "start": "1821720",
    "end": "1826960"
  },
  {
    "text": "runner process and and one sandbox Escape for the for the process sandbox now with the V8 Hep sandbox it's",
    "start": "1826960",
    "end": "1834120"
  },
  {
    "text": "becoming uh more costly so we need three V bees one on the renderer one Heap",
    "start": "1834120",
    "end": "1839480"
  },
  {
    "text": "sandbox bypass and one process sandbox bypass and so how the the Heap sandbox",
    "start": "1839480",
    "end": "1846399"
  },
  {
    "text": "Works um so basically the V Hep is contained in a sandbox now referred also",
    "start": "1846399",
    "end": "1852960"
  },
  {
    "text": "a cage or Uber cage so it's a predefined Memory region and this design ensure",
    "start": "1852960",
    "end": "1859200"
  },
  {
    "text": "that any out of bounds axis is confined within the sandbox so what they try to",
    "start": "1859200",
    "end": "1864679"
  },
  {
    "text": "achieve is to remove any kind of pointer so all the pointers are being removed outside the sandbox so we now have a",
    "start": "1864679",
    "end": "1871240"
  },
  {
    "text": "pointer table so only the offset of those pointers are stored inside the hip",
    "start": "1871240",
    "end": "1876440"
  },
  {
    "text": "and it's still software based the sandbox not fully Hardware based which is still not optimal probably so at some",
    "start": "1876440",
    "end": "1883320"
  },
  {
    "text": "point it will be Hardware based and this has been rolled out in in 2022 23 uh and um yes the the main uh",
    "start": "1883320",
    "end": "1894320"
  },
  {
    "text": "key takeway is is that we have a pointer table so the backin store pointer that we typically have used before is not",
    "start": "1894320",
    "end": "1901720"
  },
  {
    "text": "available anymore so we don't have pointers um so in practice here the in",
    "start": "1901720",
    "end": "1909880"
  },
  {
    "text": "yellow uh so this is just a simple JavaScript array buffer that we are dumping preheat um sandbox we had the",
    "start": "1909880",
    "end": "1918799"
  },
  {
    "text": "back full pointers for the backing store pointer here and what we have here is just an offset 45C which cannot be",
    "start": "1918799",
    "end": "1926440"
  },
  {
    "text": "abused anymore because the um pointer table leaves outside outside the Heap",
    "start": "1926440",
    "end": "1932880"
  },
  {
    "text": "sandbox so we can access that anymore sorry so this bug back to our",
    "start": "1932880",
    "end": "1939919"
  },
  {
    "text": "bug this again is a type confusion this time in magav in the magav",
    "start": "1939919",
    "end": "1944960"
  },
  {
    "text": "compiler now the that now that we have some background on the on the Heap sandbox let's let's see how this bug",
    "start": "1944960",
    "end": "1951720"
  },
  {
    "text": "works so as mentioned is a new meter uh compiler maglev uh it generates less",
    "start": "1951720",
    "end": "1958600"
  },
  {
    "text": "optimized code but it does that quickly than trun so it compiles quicker and so for some use cases it's better to use",
    "start": "1958600",
    "end": "1965480"
  },
  {
    "text": "magb and for other JavaScript code which is requires more performance then we uh",
    "start": "1965480",
    "end": "1971320"
  },
  {
    "text": "the profiler would suggest to use turbofun so this specific uh CVS was a",
    "start": "1971320",
    "end": "1977000"
  },
  {
    "text": "check failure while initiating a specific object in in the in the",
    "start": "1977000",
    "end": "1982120"
  },
  {
    "text": "compiler so as a result the same map is used for a different type so it's very",
    "start": "1982120",
    "end": "1988360"
  },
  {
    "text": "similar to what we saw earlier um",
    "start": "1988360",
    "end": "1993600"
  },
  {
    "text": "yeah so the standard WM shell code is not possible anymore due to Heap sandbox",
    "start": "1993600",
    "end": "1999880"
  },
  {
    "text": "so on top of what we saw like moving the pointers out they also implemented other mitigation like you cannot use WM Shell",
    "start": "1999880",
    "end": "2007399"
  },
  {
    "text": "Code anymore however not every pointer in the V8 Heap is an offset so the Heap sandbox is in",
    "start": "2007399",
    "end": "2014440"
  },
  {
    "text": "contacts in in the um in continuous Evolution and in constant improvements",
    "start": "2014440",
    "end": "2022080"
  },
  {
    "text": "so uh back in 20123 wasn't perfect so not every pointer in the v80 is an",
    "start": "2022080",
    "end": "2029080"
  },
  {
    "text": "offset so they they they they left some full pointers there um one of those are J compile",
    "start": "2029080",
    "end": "2036440"
  },
  {
    "text": "function pointers are still they were uh still present in the in the V8 back",
    "start": "2036440",
    "end": "2042919"
  },
  {
    "text": "then uh solution how do we deliver our Shell Code so how whenever we start to",
    "start": "2042919",
    "end": "2048200"
  },
  {
    "text": "exploit our bug how do we deliver our Shell Code by modifying the function",
    "start": "2048200",
    "end": "2053480"
  },
  {
    "text": "pointer to jump right into into jet spraying Shell Code what is actually jet spraying Shell",
    "start": "2053480",
    "end": "2061398"
  },
  {
    "text": "Code so let's see it in practice um here at this point we already abused use the",
    "start": "2061399",
    "end": "2068000"
  },
  {
    "text": "type confusion bug to obtain uh arbitrary read and right in the",
    "start": "2068000",
    "end": "2073520"
  },
  {
    "text": "hip and um so how do we exploit it",
    "start": "2073520",
    "end": "2079118"
  },
  {
    "text": "further to to generate Shell Code this is an simple example um we have a function that",
    "start": "2079119",
    "end": "2086240"
  },
  {
    "text": "returns three floats uh 1.1 2.2 and 3.3 and then what",
    "start": "2086240",
    "end": "2091520"
  },
  {
    "text": "we do is that we trigger in from the8 we can trigger the jit compiler with this",
    "start": "2091520",
    "end": "2096760"
  },
  {
    "text": "special function so prepare function for optimization then optimize function next call so this will effectively trigger",
    "start": "2096760",
    "end": "2103280"
  },
  {
    "text": "turbofun and then we print our our Shell Code and see what does it look in the in",
    "start": "2103280",
    "end": "2109200"
  },
  {
    "text": "the bugger so let's compile the code and see how it looks in memory so that's a really ugly number",
    "start": "2109200",
    "end": "2116760"
  },
  {
    "text": "here so what's this so we move this float into r10",
    "start": "2116760",
    "end": "2123119"
  },
  {
    "text": "register what's that oh it's our first double so it's 1.1 that we Define in our",
    "start": "2123119",
    "end": "2130280"
  },
  {
    "text": "dummy function so what what where are we going here",
    "start": "2130280",
    "end": "2136560"
  },
  {
    "text": "actually with this so what if we can treat uh this float data as code instead",
    "start": "2136560",
    "end": "2141839"
  },
  {
    "text": "of of of just floating numbers so let's uh revise this function",
    "start": "2141839",
    "end": "2147000"
  },
  {
    "text": "to something different we we now have even more uglier uh floating numbers",
    "start": "2147000",
    "end": "2152359"
  },
  {
    "text": "here we have three floating numbers that doesn't look really anything reasonable from this output but how do they look in",
    "start": "2152359",
    "end": "2159200"
  },
  {
    "text": "memory let's see so here we moving another value",
    "start": "2159200",
    "end": "2165000"
  },
  {
    "text": "which seems different into r10 if we disassemble this at this",
    "start": "2165000",
    "end": "2170720"
  },
  {
    "text": "address so at this memory address plus two we can see a break point a KN and a",
    "start": "2170720",
    "end": "2176000"
  },
  {
    "text": "jump instruction so we can treat this as Shell Code basically and we can chain",
    "start": "2176000",
    "end": "2182599"
  },
  {
    "text": "those instruction together and jump between each of these uh floating numbers basic in between so we can jump",
    "start": "2182599",
    "end": "2189440"
  },
  {
    "text": "between um this this move instruction the only caveat here is that we have",
    "start": "2189440",
    "end": "2195560"
  },
  {
    "text": "only six byte for the Shell Code at a time that that we can encode so it doesn't look really simple to do that um",
    "start": "2195560",
    "end": "2204200"
  },
  {
    "text": "how can we automate the whole shell generation process we have a simple python tool based on uh pone tools so we",
    "start": "2204200",
    "end": "2212359"
  },
  {
    "text": "can just translate uh simple assembly shell Cod into uh floating numbers",
    "start": "2212359",
    "end": "2217800"
  },
  {
    "text": "floating Point numbers uh let's demonstrate now the full exploit with the second demo again",
    "start": "2217800",
    "end": "2223599"
  },
  {
    "text": "just from d8 not the full Chrome build um even the first demo that that we saw",
    "start": "2223599",
    "end": "2228680"
  },
  {
    "text": "today was from from d8 so whenever we have a bug that just is is affecting uh",
    "start": "2228680",
    "end": "2235000"
  },
  {
    "text": "the V8 engine we can just test it with with d8 we don't need to compile the whole Chrome build um yes so that's a resulting",
    "start": "2235000",
    "end": "2244079"
  },
  {
    "text": "output from from the uh python script so it just prints the the um the three",
    "start": "2244079",
    "end": "2249440"
  },
  {
    "text": "Floats or even more floats that we need for our share code in the JavaScript exploit um so here we just",
    "start": "2249440",
    "end": "2259640"
  },
  {
    "text": "um calling the8 with the maglev attribute so we trigger MLV we enable",
    "start": "2259640",
    "end": "2265800"
  },
  {
    "text": "MLV and we execute exploit and we pop C okay with the new Shell Code uh jet",
    "start": "2265800",
    "end": "2272040"
  },
  {
    "text": "spraying technique that we mentioned um right time for for the last",
    "start": "2272040",
    "end": "2278400"
  },
  {
    "text": "uh CV so this is a present day hip sandbox from uh 2024 uh again from uh Mano so uh the",
    "start": "2278400",
    "end": "2287960"
  },
  {
    "text": "GitHub researcher uh this time H A type confusion object transition",
    "start": "2287960",
    "end": "2295240"
  },
  {
    "text": "so um type confusion in maps handling via prepare for data property so again",
    "start": "2295240",
    "end": "2303040"
  },
  {
    "text": "when an object structure changes a new map is created we have bug because when this",
    "start": "2303040",
    "end": "2309400"
  },
  {
    "text": "transition leads to type confusion where one bug is is expected but another",
    "start": "2309400",
    "end": "2314880"
  },
  {
    "text": "one uh one map sorry is expected but another one is provided so again we have some sort of map confusion so the jit",
    "start": "2314880",
    "end": "2322880"
  },
  {
    "text": "compiler uh thinks that the type um so the the type stays the same but another",
    "start": "2322880",
    "end": "2329680"
  },
  {
    "text": "map is provided so we can access memory that it's outside the original map",
    "start": "2329680",
    "end": "2334760"
  },
  {
    "text": "structure basically um with the new re uh recent version of the",
    "start": "2334760",
    "end": "2340640"
  },
  {
    "text": "Heap sandbox uh we don't have wasm function pointers anymore so we had this in in",
    "start": "2340640",
    "end": "2346720"
  },
  {
    "text": "the last version from from the previous pack we don't we don't have uh was pointer",
    "start": "2346720",
    "end": "2352119"
  },
  {
    "text": "anymore and they're fully removed from the V8 hip um um however V8 hip is only one part of",
    "start": "2352119",
    "end": "2359839"
  },
  {
    "text": "the picture this time so we need to be more creative at run time we have other objects outside the the Heap that we can",
    "start": "2359839",
    "end": "2366160"
  },
  {
    "text": "abuse um blink blink object like d w are",
    "start": "2366160",
    "end": "2371680"
  },
  {
    "text": "stored in in blink which is the Chrome's renderer uh blink is responsible for rendering web pages like HTML CSS",
    "start": "2371680",
    "end": "2379160"
  },
  {
    "text": "anything that is that is not JavaScript basically uh and those are outside the V Hep but referenced uh by embed Fields",
    "start": "2379160",
    "end": "2386760"
  },
  {
    "text": "inside the Hep that's that's important and we see why in a second so basically",
    "start": "2386760",
    "end": "2393040"
  },
  {
    "text": "we can abuse the first type confusion of the cve and the second one with this",
    "start": "2393040",
    "end": "2398760"
  },
  {
    "text": "type confusion we can trigger second layer type confusion between between uh blink objects so like derect and Dom",
    "start": "2398760",
    "end": "2406359"
  },
  {
    "text": "type array by swapping the types basically via these embedder fields that are referenced inside the V8",
    "start": "2406359",
    "end": "2413119"
  },
  {
    "text": "Hep um so we can still generate one uh",
    "start": "2413119",
    "end": "2418520"
  },
  {
    "text": "shell code uh with blink second level um type confusion we we can gain read right",
    "start": "2418520",
    "end": "2425880"
  },
  {
    "text": "uh um uh Primitives outside the Heap sandbox right um we can leak then the uh",
    "start": "2425880",
    "end": "2434640"
  },
  {
    "text": "Base address of The Trusted cage trusted cage is simply uh a data structure of the Heap sandbox itself since we don't",
    "start": "2434640",
    "end": "2442119"
  },
  {
    "text": "have pointer anymore we need some kind of pointers to build our shell codes right as as also to bypass XLR obviously",
    "start": "2442119",
    "end": "2449200"
  },
  {
    "text": "and this is obtained via the second uh level uh type Confusion And since we",
    "start": "2449200",
    "end": "2455400"
  },
  {
    "text": "have a reference now in the Heap we can ID identify the jit compiler was that we",
    "start": "2455400",
    "end": "2461079"
  },
  {
    "text": "have outside the V8 tip so we are act acting outside our our hip with our",
    "start": "2461079",
    "end": "2466160"
  },
  {
    "text": "exploit now so the the Cod pointer is is overwritten by setting n w in um toew",
    "start": "2466160",
    "end": "2472760"
  },
  {
    "text": "was offes so basically we hijack the our W Shell Code and make it point to to to",
    "start": "2472760",
    "end": "2479960"
  },
  {
    "text": "the function so we're not going through the details of the whole exploit but basically under normal condition calling",
    "start": "2479960",
    "end": "2485960"
  },
  {
    "text": "the web assembly function alone wouldn't let uh executing anything to be executed",
    "start": "2485960",
    "end": "2491119"
  },
  {
    "text": "from the from the V8 hip but now since we have arbitrary code ex read and R sorry in the from um in blink so outside",
    "start": "2491119",
    "end": "2500319"
  },
  {
    "text": "the the VA hip we we can do that because we we have abused uh the type confusion bugs at the extent uh of bringing it",
    "start": "2500319",
    "end": "2508040"
  },
  {
    "text": "outside the hip uh Dev devi8 hip right so to recap this this exploit which is",
    "start": "2508040",
    "end": "2515319"
  },
  {
    "text": "it's a bit more complex than the other two we basically trigger the Dual type confusion first via V8 and then via",
    "start": "2515319",
    "end": "2521240"
  },
  {
    "text": "blink leak the Heap address uh via the",
    "start": "2521240",
    "end": "2526520"
  },
  {
    "text": "um via the sandbox address we identify the jit function pointers and then we",
    "start": "2526520",
    "end": "2532319"
  },
  {
    "text": "overwrite the pointers and as soon as we overwrite the um the was pointers we can",
    "start": "2532319",
    "end": "2537960"
  },
  {
    "text": "invoke compromise was function pointer as we did before uh this is the last demo for",
    "start": "2537960",
    "end": "2544599"
  },
  {
    "text": "today and this one is going to be live uh before jumping into the actual exploit I'll just show you how to",
    "start": "2544599",
    "end": "2550760"
  },
  {
    "text": "convert regular ASM into Shell Code into web assembly this time we're going to",
    "start": "2550760",
    "end": "2556599"
  },
  {
    "text": "use another another way to to generate our shell gon not with the python script that we saw earlier uh so this going to",
    "start": "2556599",
    "end": "2563720"
  },
  {
    "text": "be live to a Windows machine that I have at home so let's hope everything works fine",
    "start": "2563720",
    "end": "2571280"
  },
  {
    "text": "uh yeah I'm still connected good sign",
    "start": "2571359",
    "end": "2577880"
  },
  {
    "text": "so not sure if you can see but that's the final exploit so we don't need to go",
    "start": "2578119",
    "end": "2584359"
  },
  {
    "text": "into every details but basically this is a was buffer as you can imagine this is the actual Shell Code the final Shell",
    "start": "2584359",
    "end": "2590000"
  },
  {
    "text": "Code how do we generate that so every d8 release or V8 has",
    "start": "2590000",
    "end": "2597040"
  },
  {
    "text": "something called was module Builder depending on the version we can use this wasm modu Builder to generate was wasm",
    "start": "2597040",
    "end": "2605559"
  },
  {
    "text": "code specific for the uh V8 version so we can basically export a function and",
    "start": "2605559",
    "end": "2611400"
  },
  {
    "text": "specify um inline assembly instruction this way so in this Shell Code what",
    "start": "2611400",
    "end": "2616800"
  },
  {
    "text": "we're doing we're simply retrieving the base for kernel 32 dll in in Windows",
    "start": "2616800",
    "end": "2623559"
  },
  {
    "text": "then find wixc and then pass uh caul this is basically uh the string for caul",
    "start": "2623559",
    "end": "2629559"
  },
  {
    "text": "and then we pop cul this way it's very simple very straightforward and then we call uh the address that is stored in",
    "start": "2629559",
    "end": "2635680"
  },
  {
    "text": "Rax um which is wixc in in this case uh I",
    "start": "2635680",
    "end": "2642040"
  },
  {
    "text": "just ported the the check for the latest Windows 11 version so this works on the on on the latest Windows version how do",
    "start": "2642040",
    "end": "2648160"
  },
  {
    "text": "we test this um for this this time I couldn't test this in just with the8 of V8 as the",
    "start": "2648160",
    "end": "2655599"
  },
  {
    "text": "previous two box I had to compile the whole Chrome version because um we are",
    "start": "2655599",
    "end": "2661079"
  },
  {
    "text": "exploiting blink objects blink are outside V8 right uh so we need to to uh run the",
    "start": "2661079",
    "end": "2668160"
  },
  {
    "text": "full Chrome with no sandbox as I mentioned this no sandbox argument um removes the the process sandbox which we",
    "start": "2668160",
    "end": "2675160"
  },
  {
    "text": "haven't touched in in today talks right so so we can test the full",
    "start": "2675160",
    "end": "2680839"
  },
  {
    "text": "exploit right and we also have a warning you are using a support on flug uh yeah",
    "start": "2680839",
    "end": "2687079"
  },
  {
    "text": "of course so it's normal and from here we just load the",
    "start": "2687079",
    "end": "2692359"
  },
  {
    "text": "exploit and then we have Co cool",
    "start": "2692359",
    "end": "2698200"
  },
  {
    "text": "yes that's about",
    "start": "2699800",
    "end": "2703400"
  },
  {
    "text": "it so uh a few key takeaways so browser are",
    "start": "2704839",
    "end": "2710680"
  },
  {
    "text": "complex High valuable targets today's it was 10 15 years ago still today it's",
    "start": "2710680",
    "end": "2716000"
  },
  {
    "text": "obviously it's more complex to find bugs and exploit bugs but type confusion box",
    "start": "2716000",
    "end": "2722000"
  },
  {
    "text": "will likely persist in VA due to uh the jet andine nature so jet are complex",
    "start": "2722000",
    "end": "2728240"
  },
  {
    "text": "Microsoft has tried to remove Microsoft now in Edge they're running um Chrome",
    "start": "2728240",
    "end": "2734319"
  },
  {
    "text": "chromium version on on edge they they ditched a chakra a few years ago now they're running um chromium but they did",
    "start": "2734319",
    "end": "2741839"
  },
  {
    "text": "some modification to chromium they claim to have removed jit I don't know uh but",
    "start": "2741839",
    "end": "2747880"
  },
  {
    "text": "still most of the world is is using is using uh the Google version of of chrome",
    "start": "2747880",
    "end": "2753200"
  },
  {
    "text": "and this has now we have two jit compilers which are optimized magl and",
    "start": "2753200",
    "end": "2758920"
  },
  {
    "text": "rubber fun and those those compiler we're going to find bags no matter what because jit compilation is a hard",
    "start": "2758920",
    "end": "2765040"
  },
  {
    "text": "problem to solve securely um but now they made this V8",
    "start": "2765040",
    "end": "2770599"
  },
  {
    "text": "Heap sandbox which is definitely increased the attacker cost but it's not bulletproof as as we saw so now uh if",
    "start": "2770599",
    "end": "2776920"
  },
  {
    "text": "you're interested the sandbox the V sandbox is fully um promoted into the",
    "start": "2776920",
    "end": "2783720"
  },
  {
    "text": "the the Google bu bouny Pro program so you can you can file actual bugs and and get a bounty for that uh so now three",
    "start": "2783720",
    "end": "2790920"
  },
  {
    "text": "bugs are required to get a full system shell in browser which is it is a game changer for from a few years ago you can",
    "start": "2790920",
    "end": "2798800"
  },
  {
    "text": "find all the all the all the code for today presentation here if you want uh",
    "start": "2798800",
    "end": "2803960"
  },
  {
    "text": "on p.org thanks for today everyone",
    "start": "2803960",
    "end": "2809960"
  },
  {
    "text": "and any question yes",
    "start": "2809960",
    "end": "2817960"
  },
  {
    "text": "uh the question if is just let me repeat the question if we can use typescript to",
    "start": "2848640",
    "end": "2854440"
  },
  {
    "text": "to to improve uh the the prediction of JavaScript types",
    "start": "2854440",
    "end": "2860559"
  },
  {
    "text": "right maybe the I think one of one of the biggest problem is that uh we are",
    "start": "2865319",
    "end": "2870400"
  },
  {
    "text": "building something we are using something build in in C++ to to predict something uh that is that is that is",
    "start": "2870400",
    "end": "2877880"
  },
  {
    "text": "written in JavaScript so that's also a big problem and and the thing is that it's everything happens in runtime and",
    "start": "2877880",
    "end": "2885040"
  },
  {
    "text": "by nature of JavaScript so they have a lot of uh uh nuances in JavaScript so",
    "start": "2885040",
    "end": "2890480"
  },
  {
    "text": "it's really hard to to predict all the different use case and uh and uh and",
    "start": "2890480",
    "end": "2896040"
  },
  {
    "text": "exception that that could happen in in the language itself so to map all of those into into compilers to ke and uh",
    "start": "2896040",
    "end": "2902960"
  },
  {
    "text": "yeah and and and they are creating new jit compilers so if you create a new compilers well MLB is simpler than",
    "start": "2902960",
    "end": "2908800"
  },
  {
    "text": "tround for sure it is a simpler way to to op for for optimiz optimization but",
    "start": "2908800",
    "end": "2914680"
  },
  {
    "text": "um but still it's it's new software so they will have bug no matter",
    "start": "2914680",
    "end": "2919839"
  },
  {
    "text": "what yes any other question",
    "start": "2919839",
    "end": "2926079"
  },
  {
    "text": "nope cool thanks everyone",
    "start": "2926079",
    "end": "2931079"
  }
]