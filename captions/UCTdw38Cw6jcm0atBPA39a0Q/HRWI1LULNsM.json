[
  {
    "text": "my name is stel Marbach you can reach out to me if you have any questions on Twitter or X it's called these days I",
    "start": "5000",
    "end": "11320"
  },
  {
    "text": "believe but I'm holding on to the icon that's why I have it I refuse to call it X so uh you can reach out to me there on",
    "start": "11320",
    "end": "19000"
  },
  {
    "text": "Daniel Marbach and you can also send me emails I also have business cards over there if you have any questions should I",
    "start": "19000",
    "end": "24240"
  },
  {
    "text": "not have time to answer any questions during uh during the talk so I personally I'm the kind of person I call",
    "start": "24240",
    "end": "31199"
  },
  {
    "text": "myself a practical learner I I don't know if that's an official term but one of the problems that I have is when I'm",
    "start": "31199",
    "end": "36840"
  },
  {
    "text": "reading a book uh about for example Performance optimizations because I had this dream I wanted to become better in",
    "start": "36840",
    "end": "43399"
  },
  {
    "text": "understanding performance optimizations and the context of my code how I can make the code faster and I was reading",
    "start": "43399",
    "end": "49199"
  },
  {
    "text": "books I was watching talks online and then I was like yeah now I got it figured out and then I was sitting in front of my code and I was like how did",
    "start": "49199",
    "end": "56000"
  },
  {
    "text": "that work again I wasn't sure and then I usually go through a ser series of sort of trial and errors and tears and sweat",
    "start": "56000",
    "end": "63320"
  },
  {
    "text": "and at some point I really got it figured out but I can't just read a book and then I have it sort of in in my",
    "start": "63320",
    "end": "68680"
  },
  {
    "text": "memories and one of the things that I usually do when I'm learning something I'm trying to find something practical I",
    "start": "68680",
    "end": "75000"
  },
  {
    "text": "can apply and that was looking I was like okay there are open source projects out there that probably maybe need a",
    "start": "75000",
    "end": "80320"
  },
  {
    "text": "hand to help out so I was looking around I found the Azure net SDK which is a pretty large repository I started making",
    "start": "80320",
    "end": "86640"
  },
  {
    "text": "contributions to it trying to apply my learnings and lo and behold I'm now probably around 90 pull requests against",
    "start": "86640",
    "end": "93799"
  },
  {
    "text": "the as service.net SDK and some people have called me have called out that them",
    "start": "93799",
    "end": "99320"
  },
  {
    "text": "probably have done more pull requests against at SDK than some other internal Microsoft employees I'm not sure if",
    "start": "99320",
    "end": "106320"
  },
  {
    "text": "that's true but it's in honor that someone said that but anyway what I wanted to basically condense into this",
    "start": "106320",
    "end": "111439"
  },
  {
    "text": "talk is sort of the experience that I got from doing performance optimizations with that repository so that you can",
    "start": "111439",
    "end": "117520"
  },
  {
    "text": "sort of get the chest out of that and then you don't have to go through tears and sweat like I had I had to do good um",
    "start": "117520",
    "end": "126360"
  },
  {
    "text": "let's get started so what I want to get across here so this talk is not going to be about s so horizontal or vertical",
    "start": "126360",
    "end": "133640"
  },
  {
    "text": "scaling it's also not going to be about tools like",
    "start": "133640",
    "end": "138480"
  },
  {
    "text": "benchmark.us it's also not going to be about sort of memory and performance profiling because that would be a whole",
    "start": "142080",
    "end": "147640"
  },
  {
    "text": "lot of talk so I'm not going to cover that so this talk is really about sort of performance optimizations you can",
    "start": "147640",
    "end": "153120"
  },
  {
    "text": "apply to your cp. net code so that your for uh your code gets faster where it",
    "start": "153120",
    "end": "158519"
  },
  {
    "text": "really matters on on the hot path and uh some people ask me and said well but why would you do that with c.net just use",
    "start": "158519",
    "end": "165720"
  },
  {
    "text": "C++ or something like that because those are a rust because those are truly high performance languages and I truly",
    "start": "165720",
    "end": "171920"
  },
  {
    "text": "believe that the net runtime including C and also of course other languages that are running on net run time have become",
    "start": "171920",
    "end": "179159"
  },
  {
    "text": "good languages and also the stack the runtime has become extremely good over the last few years to be a high",
    "start": "179159",
    "end": "185400"
  },
  {
    "text": "performance platform and there are many many project large scales project um",
    "start": "185400",
    "end": "190519"
  },
  {
    "text": "that are running on net for example Bing is also running on net right and maybe you have also read that being uh",
    "start": "190519",
    "end": "196560"
  },
  {
    "text": "recently when they migrated to newer. net versions they had like huge improvements in ter terms of cloud",
    "start": "196560",
    "end": "202760"
  },
  {
    "text": "expenditure that got all reduced so I believe that net is a really good platform to write high performance code",
    "start": "202760",
    "end": "208840"
  },
  {
    "text": "uh upon it and as a matter of fact one of the things that for example even the C team did right they there was there's",
    "start": "208840",
    "end": "214879"
  },
  {
    "text": "the threat pool and the threat pool was a highly complicated sort of monster between sort of unmanaged code and",
    "start": "214879",
    "end": "221480"
  },
  {
    "text": "managed code and at some point the team basically decided to rewrite the threadpool and lifted it up into manag",
    "start": "221480",
    "end": "226920"
  },
  {
    "text": "land and the performance of the threat pool that is now entirely in the manag land is at least on par with the the",
    "start": "226920",
    "end": "233040"
  },
  {
    "text": "other version and in some cases even better right and now they have sort of a single language uh or that the Fret boo",
    "start": "233040",
    "end": "240680"
  },
  {
    "text": "is written in and that's also from a maintainability standpoint is is much better right so I believe that c C++ is",
    "start": "240680",
    "end": "247840"
  },
  {
    "text": "less and less needed these days to achieve perform to achieve code that sort of scales really well but then when",
    "start": "247840",
    "end": "255040"
  },
  {
    "text": "I do these types of performance optimizations I sometimes hear from my colleagues and peers wow but Daniel this",
    "start": "255040",
    "end": "261160"
  },
  {
    "text": "is really crazy isn't that premature optimizations This is highly esoteric stuff why would we even bother right so",
    "start": "261160",
    "end": "269120"
  },
  {
    "text": "well I I must say that some of the optimizations that I'm going to sh Show you today there are they can be called",
    "start": "269120",
    "end": "274840"
  },
  {
    "text": "out as esoteric but I'm going to give you lots of context why I think they're not and but what's really important to",
    "start": "274840",
    "end": "282080"
  },
  {
    "text": "me is don't blindly jump to conclusions and take what I'm showing you today and",
    "start": "282080",
    "end": "287320"
  },
  {
    "text": "go to your project and say I'm going to apply this everywhere because that wouldn't make sense because you would be",
    "start": "287320",
    "end": "293000"
  },
  {
    "text": "wasting your employer time your own time and also your customer time if you do that right so what's important to me to",
    "start": "293000",
    "end": "299240"
  },
  {
    "text": "give them way as a message is the types of optimizations that I'm going to show you today it is only relevant when you",
    "start": "299240",
    "end": "306440"
  },
  {
    "text": "actually have code that is sort of on the hot path that is executed thousands and thousands of time a second right and",
    "start": "306440",
    "end": "313880"
  },
  {
    "text": "I'm going to talk a little bit more about that one of the things that I've also seen for myself is that uh those",
    "start": "313880",
    "end": "320360"
  },
  {
    "text": "performance optimizations when you start once you start to grasp it you start to see it everywhere and it gets really",
    "start": "320360",
    "end": "326560"
  },
  {
    "text": "addictive right and you start like hacking your code than changing it everywhere and I must say that I'm the",
    "start": "326560",
    "end": "332639"
  },
  {
    "text": "kind of person that sometimes I go really wild I do lots of optimizations and at some point I had to sort of apply",
    "start": "332639",
    "end": "339000"
  },
  {
    "text": "a heck so that I'm switching off the internet at midnight because what I'm doing then is then I'm not going into",
    "start": "339000",
    "end": "345160"
  },
  {
    "text": "sort of past midnight and calling all night long because I need to sort of stop myself from doing that so um",
    "start": "345160",
    "end": "352080"
  },
  {
    "text": "hopefully I'm giving you enough context so that you're not falling into this uh pitfalls and you don't have to apply",
    "start": "352080",
    "end": "357720"
  },
  {
    "text": "hacks like that to switch off the internet uh at Mid midnight so when code is executed at scale then sort of the",
    "start": "357720",
    "end": "364440"
  },
  {
    "text": "performance characteristics of the code really matters and code that is executed",
    "start": "364440",
    "end": "369520"
  },
  {
    "text": "at scale it should be highly efficient in terms of resource usage execution",
    "start": "369520",
    "end": "374560"
  },
  {
    "text": "time throughput and memory usage okay but let's discover a little bit what it",
    "start": "374560",
    "end": "379960"
  },
  {
    "text": "actually means and I have here a sort of a quote from David Fowler he had a really excellent talk about at scale",
    "start": "379960",
    "end": "385960"
  },
  {
    "text": "implementation Details Matter and scale for an application can mean the number of users that will concurrently connect",
    "start": "385960",
    "end": "391840"
  },
  {
    "text": "to the application at any given time the amount of input to process or the number of times data needs to be processed and",
    "start": "391840",
    "end": "398160"
  },
  {
    "text": "for me the last part is the most important part for us as Engineers it means we have to know what to ignore and",
    "start": "398160",
    "end": "403919"
  },
  {
    "text": "knowing what to pay close attention to right and what it means is essentially",
    "start": "403919",
    "end": "409280"
  },
  {
    "text": "when I go to a code base I usually assume that the people have that have written this this Co Cod base they they",
    "start": "409280",
    "end": "416199"
  },
  {
    "text": "they were smart and they made a bunch of assumptions and they how to make trade-offs right sometimes these sort of",
    "start": "416199",
    "end": "422319"
  },
  {
    "text": "assumptions and trade-off they're written down if you're lucky we have architecture records or decision records and then we can grab them or maybe it's",
    "start": "422319",
    "end": "428680"
  },
  {
    "text": "a comment in the source code right but sometimes they're not written down and we sort of have to go and understand",
    "start": "428680",
    "end": "434319"
  },
  {
    "text": "well what were the people thinking right because maybe someone said well it's only going to be executed 10 times a",
    "start": "434319",
    "end": "439639"
  },
  {
    "text": "second right and then suddenly the project grows we get more customers and then it's executed 100 times a thousand",
    "start": "439639",
    "end": "444800"
  },
  {
    "text": "times a second right so what might have not mattered in the past suddenly matters over sort of the time of the",
    "start": "444800",
    "end": "450639"
  },
  {
    "text": "project and we need to sort of go and think about well have people assumed that this is only going to do a new Once",
    "start": "450639",
    "end": "457440"
  },
  {
    "text": "once a day or what not right and sort of when we have code that is executed",
    "start": "457440",
    "end": "462759"
  },
  {
    "text": "thousands of times of seconds all these assumptions um start uh to matter because allocations will essentially",
    "start": "462759",
    "end": "469599"
  },
  {
    "text": "affect the memory throughput it will also slow down your code right also CPU uh algorithmic complexity will also be",
    "start": "469599",
    "end": "476240"
  },
  {
    "text": "will also start to matter on the code that is um executed um at scale so what I've done is I've",
    "start": "476240",
    "end": "483720"
  },
  {
    "text": "also tried to sort of uh condense the things that I learned into the two most important rules and I want to present",
    "start": "483720",
    "end": "489680"
  },
  {
    "text": "them here so that you can take it away and should you be already a little bit tired because it's already late today",
    "start": "489680",
    "end": "495639"
  },
  {
    "text": "right then these are the two most important rules that you should take away from the stock and then you can fall asleep hopefully you're not falling",
    "start": "495639",
    "end": "501800"
  },
  {
    "text": "asleep but I'm just saying so avoid excessive allocations to reduce the cheesy overhead and chees is the garbage",
    "start": "501800",
    "end": "507680"
  },
  {
    "text": "collection overhead and avoid un unnecessary copying of memory so these are the two handy rules that you should",
    "start": "507680",
    "end": "514320"
  },
  {
    "text": "remember and if you follow those then and you're trying to look out for those things then you're going to be mostly uh",
    "start": "514320",
    "end": "521200"
  },
  {
    "text": "fine and the first rule under the category avoid excessive allocations to reduce the cheesy overhead is think at",
    "start": "521200",
    "end": "527720"
  },
  {
    "text": "least twice before using link or unnecessary enumerations on a the hot path so don't get me wrong I'm a huge",
    "start": "527720",
    "end": "534920"
  },
  {
    "text": "fan of link right so link is an amazing language feature it's highly prod dtive and as a matter of fact the first",
    "start": "534920",
    "end": "541240"
  },
  {
    "text": "version of my code I'm always using link even if it's on the hot path because it's so easy it's so natural to me right",
    "start": "541240",
    "end": "547680"
  },
  {
    "text": "and I don't want to miss this language feature and I'm not going to say to you never use Link right apply it where it's",
    "start": "547680",
    "end": "554360"
  },
  {
    "text": "where it's useful so for example if the code is only executed once a day or something like that then use Link right",
    "start": "554360",
    "end": "560440"
  },
  {
    "text": "but if the code is executed hundreds thousands of times of seconds then do not use Link because it's going to sort",
    "start": "560440",
    "end": "566760"
  },
  {
    "text": "of slow down the code because it has hidden allocations that you don't see when you're writing the code and it's",
    "start": "566760",
    "end": "573000"
  },
  {
    "text": "very hard for the chit that's adjust in time compiler to sort of optimize it and I know there might be some people in",
    "start": "573000",
    "end": "578760"
  },
  {
    "text": "here that thinking yeah but Daniel I've read all the blog flows that the net team has recently published and there",
    "start": "578760",
    "end": "584560"
  },
  {
    "text": "are a bunch of optimizations that they're applying to the to the link versions as well and that's absolutely",
    "start": "584560",
    "end": "589920"
  },
  {
    "text": "true so the things that I'm going to show you today some of the things might no longer be true maybe two three four",
    "start": "589920",
    "end": "595680"
  },
  {
    "text": "years down the line right because link gets optimized more and more more and more um and for example also with net 8",
    "start": "595680",
    "end": "602560"
  },
  {
    "text": "there also another bunch of optimizations that are coming out that will also make link faster but still or",
    "start": "602560",
    "end": "608120"
  },
  {
    "text": "to summarize it on this blog post it's actually Steven to's blog post that do which which is almost the book right",
    "start": "608120",
    "end": "614279"
  },
  {
    "text": "that they recently published about the RC version ofn net they saying of course sometimes the most efficient use of link",
    "start": "614279",
    "end": "620560"
  },
  {
    "text": "is simply not using it right and they added a bunch of analyzers as well that helps to sort of find out where where",
    "start": "620560",
    "end": "627560"
  },
  {
    "text": "you should not be using link and and also do some other means of it but I just want to say link is great when it's",
    "start": "627560",
    "end": "633079"
  },
  {
    "text": "applied in the right context cool let's have a look at a piece of code um here I",
    "start": "633079",
    "end": "638279"
  },
  {
    "text": "have the mqp receiver so mqp is an advanced message queuing protocol and",
    "start": "638279",
    "end": "643880"
  },
  {
    "text": "the ash. net SDK uses it for ash service bus and event HPS and it's basically sort of a tcpip communication uh",
    "start": "643880",
    "end": "651120"
  },
  {
    "text": "protocol where they're s sort of doing hand shaking with Ash service bus and for example in vent Toops and this is um",
    "start": "651120",
    "end": "658000"
  },
  {
    "text": "this is the sort of the core infrastructure logic that sort of does for example acknowledge message messages",
    "start": "658000",
    "end": "664720"
  },
  {
    "text": "and here um what I what what we seeing here is the Azure SDK has a bunch of design guidelines and one of the uh",
    "start": "664720",
    "end": "672440"
  },
  {
    "text": "design guidelines is uh for ever when when uh when you're getting sort of",
    "start": "672440",
    "end": "678800"
  },
  {
    "text": "enumerables in you have to use the broadest possible enumeration type which is I enumerable and here we're getting",
    "start": "678800",
    "end": "684680"
  },
  {
    "text": "an i enumerable of lock tokens and for for those who have never heard that term lock token to is basically sort of",
    "start": "684680",
    "end": "690399"
  },
  {
    "text": "almost it's a guid it's a glorified GID that sort of you are going to use when you receive a message from Ash service",
    "start": "690399",
    "end": "696480"
  },
  {
    "text": "bus you're going to have sort of that quid and then once you're done handling that message you send it back to the server and saying hey I'm done handling",
    "start": "696480",
    "end": "702720"
  },
  {
    "text": "this message and then this it will be acknowledge and this is how the code uh looked like so we got the broadest",
    "start": "702720",
    "end": "708240"
  },
  {
    "text": "possible enumeration type in and then it does a select it then turns those strings into uh guids it does a two",
    "start": "708240",
    "end": "715040"
  },
  {
    "text": "array and then what it does it has an if statement where it sort of does a link any right it checks whether it has",
    "start": "715040",
    "end": "721320"
  },
  {
    "text": "already seen uh this this GID in sort of an internal inmemory U thing and then",
    "start": "721320",
    "end": "727600"
  },
  {
    "text": "once it has done that it essentially decides well if I have already seen it I go on One path or I go on the other code",
    "start": "727600",
    "end": "733720"
  },
  {
    "text": "path and now if you want to understand what this code is actually doing is we have to sort of look at how this code is",
    "start": "733720",
    "end": "739800"
  },
  {
    "text": "going to be lowered lowered is just a fancy way of basically saying well there's some compiler trickery happening",
    "start": "739800",
    "end": "745600"
  },
  {
    "text": "right that takes sort of the high level C and puts it into sort of the the underlying um C that um is the most",
    "start": "745600",
    "end": "752399"
  },
  {
    "text": "basic one and if we decompile this code what we're going to see is that the code looks like this and I know this is",
    "start": "752399",
    "end": "758079"
  },
  {
    "text": "probably a little bit overwhelming so let me sort of zoom in what we can see here is that we have this enumeral do",
    "start": "758079",
    "end": "764440"
  },
  {
    "text": "any and then hopefully I can actually show it to you here no doesn't work okay",
    "start": "764440",
    "end": "770600"
  },
  {
    "text": "you you can see that C C do9 uncore uncore 2core 0 question mark question",
    "start": "770600",
    "end": "776360"
  },
  {
    "text": "mark and then equals new funk so what we're seeing here is in this specific",
    "start": "776360",
    "end": "781639"
  },
  {
    "text": "code we're actually having sort of um a statically cach delegate and whenever we",
    "start": "781639",
    "end": "787000"
  },
  {
    "text": "are seeing sort of this pattern of C9 underscore underscore question mark",
    "start": "787000",
    "end": "792880"
  },
  {
    "text": "question mark equals what it means we're usually in the safe Zone we don't really have to worry about it so this code is",
    "start": "792880",
    "end": "798519"
  },
  {
    "text": "fine but if we're going uh and look over here what we can see is we have a new funk of guid of pool uh allocation that",
    "start": "798519",
    "end": "805120"
  },
  {
    "text": "sort of points to complete internal async method right and this allocation is totally unnecessary and we can get",
    "start": "805120",
    "end": "812279"
  },
  {
    "text": "rid of it how can we do that well it's actually pretty simple right we can basically just take the for each and we",
    "start": "812279",
    "end": "818639"
  },
  {
    "text": "can or the any and we take it turn it into for each and then we Loop through",
    "start": "818639",
    "end": "823880"
  },
  {
    "text": "the things and then we look whether it was already contained if it was we go on one C path otherwise we go on the other",
    "start": "823880",
    "end": "829680"
  },
  {
    "text": "C path so we are still structuring semantically exactly doing the same but we're no using no longer using link any",
    "start": "829680",
    "end": "836959"
  },
  {
    "text": "now when we uh when we have done that and we decompile it we get this so now",
    "start": "836959",
    "end": "842279"
  },
  {
    "text": "we can see here while we have now a while loop but that doesn't really matter we have now this sort of safe",
    "start": "842279",
    "end": "848600"
  },
  {
    "text": "pattern that I talked about we have this C do _ 2core 0 question mark question",
    "start": "848600",
    "end": "854880"
  },
  {
    "text": "workk equals right so now we have a statically cach delegate and now we have no longer an allocation and now the code",
    "start": "854880",
    "end": "861160"
  },
  {
    "text": "is going to get faster and we are hopefully fine and now the question is well what does hopefully fine mean how",
    "start": "861160",
    "end": "868440"
  },
  {
    "text": "can we be not just hopeful but actually know that we're doing fine well one way of doing it is we have to measure it",
    "start": "868440",
    "end": "875759"
  },
  {
    "text": "right because whenever we're doing performance optimizations it's super super crucial to actually not just",
    "start": "875759",
    "end": "881680"
  },
  {
    "text": "assume it's going to be faster because we want to know that it's going to be faster otherwise we don't have to sort",
    "start": "881680",
    "end": "887120"
  },
  {
    "text": "of increase the complexity of the code right because we're not achieving anything other than increasing the complexity and we can do that for",
    "start": "887120",
    "end": "893399"
  },
  {
    "text": "example with a tool like Benchmark do. net and I've here run with Benchmark net sort of the before example with the any",
    "start": "893399",
    "end": "900360"
  },
  {
    "text": "against the the one version with for each and I presenting here you the result I know it's a huge table don't",
    "start": "900360",
    "end": "905959"
  },
  {
    "text": "worry too much the I I'm going to summarize it for you so with that sort of small change we essentially got the",
    "start": "905959",
    "end": "912880"
  },
  {
    "text": "upper level is a throughput Improvement of 20 to 40% more throughput and we got",
    "start": "912880",
    "end": "918040"
  },
  {
    "text": "a garbage collection s gen zero garbage collection reduction by 20 to 40% right",
    "start": "918040",
    "end": "924399"
  },
  {
    "text": "just by getting rid of the any we got almost double more throughput right and we got lots of lots of um gen zero",
    "start": "924399",
    "end": "931120"
  },
  {
    "text": "garbage collection uh improvements that's super nice with a small change",
    "start": "931120",
    "end": "937480"
  },
  {
    "text": "now the question is can we do even better and yes we can even do better right because the ones that were paying",
    "start": "937480",
    "end": "943839"
  },
  {
    "text": "attention saw that there was still a select statement in the code right because I only optimized the any and you",
    "start": "943839",
    "end": "950279"
  },
  {
    "text": "might be thinking yeah but Daniel you have to be getting rid of this this as well and we can do that and I have a",
    "start": "950279",
    "end": "955920"
  },
  {
    "text": "bunch of rules that I'm going to show you here so so the first one is whenever you sort of um representing empty arrays",
    "start": "955920",
    "end": "963279"
  },
  {
    "text": "use array. empty because it's a statically cached empty array and then you don't have an allocation the next",
    "start": "963279",
    "end": "969800"
  },
  {
    "text": "one is when you have empty enumerables use enumerable do empty sort of to represent empty enumerables again",
    "start": "969800",
    "end": "975839"
  },
  {
    "text": "because it's statically cached right for every T so you don't have allocations anymore if you're using C 12 you're",
    "start": "975839",
    "end": "983440"
  },
  {
    "text": "already on the new stack what you can also do is you can now use the new awesome C 12 collect",
    "start": "983440",
    "end": "989160"
  },
  {
    "text": "Expressions uh that you can write and then sort of the compiler understands whether you're mutating the the empty",
    "start": "989160",
    "end": "996120"
  },
  {
    "text": "array or not and if it's not mutated on the cold path it actually automatically propagates it for you to an empty array",
    "start": "996120",
    "end": "1003480"
  },
  {
    "text": "which is super super Nifty right I do prefer personally to be more explicit in my code instead of relying on Magic but",
    "start": "1003480",
    "end": "1010360"
  },
  {
    "text": "your mileage might may vary and I want to let you know that this is a possibility okay then the next one is",
    "start": "1010360",
    "end": "1016399"
  },
  {
    "text": "something that most people forget right collections when you initialize collections they have a sort of set of",
    "start": "1016399",
    "end": "1022360"
  },
  {
    "text": "buckets associated with it right and then that means it has a capacity and when you start adding more elements then",
    "start": "1022360",
    "end": "1028640"
  },
  {
    "text": "it has capacity what it essentially has to do it has to grow its capacity and that usually happens in sort of a twofa",
    "start": "1028640",
    "end": "1034798"
  },
  {
    "text": "sort of way way right and that growing capacity means it has to sort of allocate more memory and then it has to",
    "start": "1034799",
    "end": "1040438"
  },
  {
    "text": "reshuffle its internal backet Pockets so when you know how many things you're going to add to collections if you know",
    "start": "1040439",
    "end": "1046720"
  },
  {
    "text": "that you should make sure that you initialize the collection type with a with the dedicated count that you know",
    "start": "1046720",
    "end": "1052400"
  },
  {
    "text": "you're going to insert and then everything is also going to be uh much faster and then this is a little bit",
    "start": "1052400",
    "end": "1058440"
  },
  {
    "text": "counterintuitive the last one uh or this one use concrete collection types because most of the time I hear people",
    "start": "1058440",
    "end": "1064080"
  },
  {
    "text": "saying yeah but I always want to use I enumerable or I read only connection the interfaces I don't like using the",
    "start": "1064080",
    "end": "1069840"
  },
  {
    "text": "directly the list or the array uh it goes against my ethos of writing uh writing code I don't know what but for",
    "start": "1069840",
    "end": "1075880"
  },
  {
    "text": "performance sensitive code you should actually using the concrete collection types um because then what's going to",
    "start": "1075880",
    "end": "1082080"
  },
  {
    "text": "happen is in the majority in all the cases you're actually getting the enumerator that is struct and you're not",
    "start": "1082080",
    "end": "1087720"
  },
  {
    "text": "getting to boxing cases by the way this one is also something that gets optimized more and more so with new",
    "start": "1087720",
    "end": "1093280"
  },
  {
    "text": "versions of the chit and also with Dynamic PTO you're getting sort of more um analysis in in your ID and your code",
    "start": "1093280",
    "end": "1100720"
  },
  {
    "text": "and then it essentially when the code is sort of um chitted and everything then some of these cases they're not even if",
    "start": "1100720",
    "end": "1106559"
  },
  {
    "text": "you're using a I read only collection can actually discover that you're using an array or a list and then it makes",
    "start": "1106559",
    "end": "1112960"
  },
  {
    "text": "sure the code is written in an optimized way but still if you really want to make sure that um you don't have sort of that",
    "start": "1112960",
    "end": "1119679"
  },
  {
    "text": "boxing of the of the enumerator then use the concrete collection types and then",
    "start": "1119679",
    "end": "1125120"
  },
  {
    "text": "when you have to sort of instantiate collections with sort of the right size right you have to know how much you're",
    "start": "1125120",
    "end": "1130640"
  },
  {
    "text": "going to insert right and then sometimes you have to do some sort of counting and the most intuitive version is to use",
    "start": "1130640",
    "end": "1136880"
  },
  {
    "text": "Link count right but that's not really cool because then it has to sort of the iterate it has to materialize the",
    "start": "1136880",
    "end": "1143280"
  },
  {
    "text": "collection and what you can do is if you're using a version that doesn't have the enumerable do try get non-enumerated",
    "start": "1143280",
    "end": "1149400"
  },
  {
    "text": "count and try do try get non-enumerated count what a mouthful is basically a",
    "start": "1149400",
    "end": "1154960"
  },
  {
    "text": "method that sort of gives you the count if it's a collection that provides you a count even if you have an i enumerable",
    "start": "1154960",
    "end": "1161440"
  },
  {
    "text": "without actually enumerating and looping through the collection right because that's super efficient because otherwise it has to go through the whole",
    "start": "1161440",
    "end": "1167400"
  },
  {
    "text": "collection but what you can also do is if if you don't have that because you're on a net version that is a little bit earlier you can use for example pattern",
    "start": "1167400",
    "end": "1174400"
  },
  {
    "text": "matching to sort of check whether the collection is of a of a collection type that has a count and then you get the",
    "start": "1174400",
    "end": "1180080"
  },
  {
    "text": "count to sort of initialize another collection and then it's already sort of materialized with the number of buckets",
    "start": "1180080",
    "end": "1185400"
  },
  {
    "text": "and then you can insert it in a faster way and then when you're writing high performance code one of the things is if",
    "start": "1185400",
    "end": "1191640"
  },
  {
    "text": "you're needing if you need collections then make sure you're only instantiating collections when you really need them if",
    "start": "1191640",
    "end": "1197400"
  },
  {
    "text": "you don't need them for for example if you have boundary conditions in your code where you for example check well if this condition is true then I'm just",
    "start": "1197400",
    "end": "1203679"
  },
  {
    "text": "going to return and I don't need the collection then don't initialize it right so sort of restructure your code",
    "start": "1203679",
    "end": "1209880"
  },
  {
    "text": "to only instantiate it when you really need it and then the last ones there be dragons um but I'm going to mention it",
    "start": "1209880",
    "end": "1215520"
  },
  {
    "text": "for completeness reasons is what you can do is when you're accessing collections there is this for safety precautions",
    "start": "1215520",
    "end": "1222679"
  },
  {
    "text": "measurements there is sort of these boundary checks right that you're not sort of going outside the boundaries of a collection and you can sort of avoid",
    "start": "1222679",
    "end": "1229720"
  },
  {
    "text": "these bound checks uh by sort of using the unsafe um or align the access to the",
    "start": "1229720",
    "end": "1235440"
  },
  {
    "text": "collections and there are a bunch of helper methods now in the net rtime like collection marshalling or memory marshal",
    "start": "1235440",
    "end": "1241679"
  },
  {
    "text": "or unsafe uh in the system compiler R system roundtime compiler services namespace that help you to sort of get",
    "start": "1241679",
    "end": "1249280"
  },
  {
    "text": "direct access to the underlying data structure of a collection type okay this is Super Evil right you can squeeze out",
    "start": "1249280",
    "end": "1256600"
  },
  {
    "text": "more performance out of your code if you if you want to if you have to but it's super super dangerous because then",
    "start": "1256600",
    "end": "1263640"
  },
  {
    "text": "you're sort of outside the safety checks of of the net runtime and again there be",
    "start": "1263640",
    "end": "1269000"
  },
  {
    "text": "dragons right okay and last but not least keep yourself up to dat with the latest performance improvements right",
    "start": "1269000",
    "end": "1275400"
  },
  {
    "text": "because read those block post because then you're also evolving your understanding of performance improvements um over time cool then",
    "start": "1275400",
    "end": "1283559"
  },
  {
    "text": "let's have a look how this looks like so again we had this still this select statement in there with uh new GID and",
    "start": "1283559",
    "end": "1289919"
  },
  {
    "text": "then two array so now if we apply all those rules what we can do is and I'm showing here the version with pattern",
    "start": "1289919",
    "end": "1295720"
  },
  {
    "text": "matching because at the time so we were on net standard 2.0 on the ash. net SDK",
    "start": "1295720",
    "end": "1301600"
  },
  {
    "text": "and we didn't have latest t uh support and we did we don't have to try get non enumerated count so we had to apply",
    "start": "1301600",
    "end": "1308720"
  },
  {
    "text": "pattern matching and what we did there is even though there is inumerable of strings coming in so the team basically",
    "start": "1308720",
    "end": "1315520"
  },
  {
    "text": "had sort of um Telemetry of how this method is mostly going to be to be used",
    "start": "1315520",
    "end": "1321120"
  },
  {
    "text": "and what we did there is we were sort of saying okay in the majority of the cases we were actually getting materialized",
    "start": "1321120",
    "end": "1326919"
  },
  {
    "text": "collections that are passed into that method so we're getting arrays list and stuff like that only in for example unit",
    "start": "1326919",
    "end": "1333320"
  },
  {
    "text": "testing cases people are actually passing lazy enumerated enumerables so we can do that and we can essentially do",
    "start": "1333320",
    "end": "1339600"
  },
  {
    "text": "a type check to see is the collection that is passed in of type I read only collection because then we have the",
    "start": "1339600",
    "end": "1345640"
  },
  {
    "text": "count and then we can pass that to the method and now you might be saying but Daniel you just told me that I should",
    "start": "1345640",
    "end": "1352400"
  },
  {
    "text": "always be using the concrete collection types right and now you're not applying your own rule uh why are you doing that",
    "start": "1352400",
    "end": "1358480"
  },
  {
    "text": "you cheeky bastard right well um I must say that like everything in software",
    "start": "1358480",
    "end": "1363880"
  },
  {
    "text": "development there are trade-offs right and in this specific case because they have these rules that you always have to",
    "start": "1363880",
    "end": "1369880"
  },
  {
    "text": "accept from sort of the customer code the broadest possible enumeration type we can't just blindly break the public",
    "start": "1369880",
    "end": "1375960"
  },
  {
    "text": "apis right so we have to sort of play with the the boundary conditions that are given right so we I have to pass I",
    "start": "1375960",
    "end": "1383000"
  },
  {
    "text": "read only collection of string here okay and then what I'm doing is basically I'm doing a quick check right whether",
    "start": "1383000",
    "end": "1388919"
  },
  {
    "text": "essentially the count is zero if the count is zero I can directly use array. empty otherwise I'm allocating an array",
    "start": "1388919",
    "end": "1395000"
  },
  {
    "text": "with the number of buckets and then I can just sort of uh new up the good and add it there and now I have Wast more uh",
    "start": "1395000",
    "end": "1404159"
  },
  {
    "text": "way more complex code right but now the question is did it actually help",
    "start": "1404159",
    "end": "1409320"
  },
  {
    "text": "anything and have a let's have a look again we have to measure it and when we Benchmark it and here I'm showing on the",
    "start": "1409320",
    "end": "1416000"
  },
  {
    "text": "screen the first optimized version that that's after version one the first",
    "start": "1416000",
    "end": "1421400"
  },
  {
    "text": "optimized version as a quick reminder was still using um um the this the select uh select statement with a two",
    "start": "1421400",
    "end": "1428600"
  },
  {
    "text": "array and was was only getting rid of the any call right and compareed to the",
    "start": "1428600",
    "end": "1433640"
  },
  {
    "text": "more complex no longer using link based version and I executed it against again",
    "start": "1433640",
    "end": "1439679"
  },
  {
    "text": "against a bunch of sort of collection types like enumerable arrays and hash set and what we can see here is we're",
    "start": "1439679",
    "end": "1445520"
  },
  {
    "text": "getting on top of the previous improvements we're getting 5 to 64% additional improvements and we're",
    "start": "1445520",
    "end": "1452039"
  },
  {
    "text": "getting 23 to 61% um garbage collections uh reduction as well now we can say cool we can",
    "start": "1452039",
    "end": "1459080"
  },
  {
    "text": "switch off the internet and go to bed and be happy campers right well can we",
    "start": "1459080",
    "end": "1464120"
  },
  {
    "text": "well we have to look very closely if you look very closely what we can see is in some cases we're actually slower we are",
    "start": "1464120",
    "end": "1471120"
  },
  {
    "text": "56% slower and those are the cases where we're getting non-m materialized",
    "start": "1471120",
    "end": "1476559"
  },
  {
    "text": "collection when someone gives us an ion numerable that first has to be iterated",
    "start": "1476559",
    "end": "1481720"
  },
  {
    "text": "through in order to even know what's in there in those cases the actually the the first optimized version that just",
    "start": "1481720",
    "end": "1488240"
  },
  {
    "text": "got rid of the any is actually the better version right and now is the question should we not do this type of",
    "start": "1488240",
    "end": "1494520"
  },
  {
    "text": "optimization and here again the context of the code comes into play because the team had",
    "start": "1494520",
    "end": "1500520"
  },
  {
    "text": "Telemetry and we knew only in unit testing cases we're actually getting a sort of lazy enumerated enumerables and",
    "start": "1500520",
    "end": "1507760"
  },
  {
    "text": "in the sort of the production case we're always getting or essentially materialized collections we can apply",
    "start": "1507760",
    "end": "1514559"
  },
  {
    "text": "sort of the full link no longer link version and then we're actually faster",
    "start": "1514559",
    "end": "1520279"
  },
  {
    "text": "right because we have sort of excluded sort of the boundary case of this optimized code where we are essentially",
    "start": "1520279",
    "end": "1526320"
  },
  {
    "text": "getting lazy enumerated enumerables but if that's not the case then I would say",
    "start": "1526320",
    "end": "1531720"
  },
  {
    "text": "use the version that you feel most comfortable with right um because when you're saying well we did we removed the",
    "start": "1531720",
    "end": "1537279"
  },
  {
    "text": "any and now we know that we're actually much better than before right but we want to leave the select two array",
    "start": "1537279",
    "end": "1544320"
  },
  {
    "text": "because we know we're going to be mostly in the cases of the LA enumerated numerals then leave it as is right um",
    "start": "1544320",
    "end": "1550200"
  },
  {
    "text": "because you have to sort of make the trade-offs and understand the code and what's also important is it's quite",
    "start": "1550200",
    "end": "1557080"
  },
  {
    "text": "likely that that you probably have other uh positions in your cold base that have",
    "start": "1557080",
    "end": "1562120"
  },
  {
    "text": "much more sort of impact when you're going to change that instead of sort of trying to gold plate every piece of the",
    "start": "1562120",
    "end": "1568000"
  },
  {
    "text": "Cod base that you're working with right so what I want to give you away is again think and discuss it with your teams",
    "start": "1568000",
    "end": "1574279"
  },
  {
    "text": "about how far should we go in terms of sort of sacrificing readability increasing the complexity of the cold",
    "start": "1574279",
    "end": "1580360"
  },
  {
    "text": "base right for the sake of squeezing the last bits out of it whereas it's just leaving the more simple version right",
    "start": "1580360",
    "end": "1586440"
  },
  {
    "text": "and again the hot is we need to think about uh the hot path and what's also important fire up your favorite sort of",
    "start": "1586440",
    "end": "1593640"
  },
  {
    "text": "uh memory and performance profiler to actually uh in inspect the code at rantom to see what's actually going on",
    "start": "1593640",
    "end": "1599840"
  },
  {
    "text": "and to also sort of even if you use for example tool like",
    "start": "1599840",
    "end": "1604720"
  },
  {
    "text": "benchmark.us executed then put it into your production system and actually attach a profile to see if actually G it",
    "start": "1610240",
    "end": "1616880"
  },
  {
    "text": "if if it gives you you sort of the performance improvements in the larger context that you are looking for and",
    "start": "1616880",
    "end": "1623159"
  },
  {
    "text": "like with everything in software it's sort of crucial to understand how far we should go and when we should stop and",
    "start": "1623159",
    "end": "1629159"
  },
  {
    "text": "focus on our attention on other parts of the of the piece of the code cool then",
    "start": "1629159",
    "end": "1634840"
  },
  {
    "text": "let's look at let's look at the other one be aware of closure and allocations so I already touched a",
    "start": "1634840",
    "end": "1641440"
  },
  {
    "text": "little bit about closure allocations during the link performance optimization slides that I talked here but closures",
    "start": "1641440",
    "end": "1647640"
  },
  {
    "text": "can essentially occur anywhere where you have sort of delegates lambdas so action and function delegates when they're",
    "start": "1647640",
    "end": "1654720"
  },
  {
    "text": "invoked that access State outside of the Lambda and what does that mean right let's have a let's do a quick example",
    "start": "1654720",
    "end": "1661720"
  },
  {
    "text": "here so the Azure SDK has sort of this re poly retry capability and it's",
    "start": "1661720",
    "end": "1667200"
  },
  {
    "text": "actually a very simple while loop so every method for example in the ash service bus SDK that is talking to the",
    "start": "1667200",
    "end": "1674000"
  },
  {
    "text": "ash service bus broker essentially goes to this poly retri capability and what",
    "start": "1674000",
    "end": "1679039"
  },
  {
    "text": "it essentially does it it um has this method it's called run operation it returns a task it returns a task because",
    "start": "1679039",
    "end": "1686080"
  },
  {
    "text": "we are in the sort of iob bound domain for those who have attended Brandon's talk who has probably talked about this",
    "start": "1686080",
    "end": "1691399"
  },
  {
    "text": "as well right when we're sort of doing uh calls to over HTTP over tcpip",
    "start": "1691399",
    "end": "1697279"
  },
  {
    "text": "database calls we want to return a task because then we are essentially not blocking the threat and then we're",
    "start": "1697279",
    "end": "1702440"
  },
  {
    "text": "getting sort of this function uh with a time span of task which is the actual operation and then what this thing is",
    "start": "1702440",
    "end": "1709519"
  },
  {
    "text": "actually doing it sort of is a while loop right it checks whether the cancellation token is not canceled it then sort of executes the actual",
    "start": "1709519",
    "end": "1716399"
  },
  {
    "text": "operation which is that function delegate and if there was an exception it sort of retries again and if the",
    "start": "1716399",
    "end": "1722000"
  },
  {
    "text": "server returns hey I'm currently busy I'm doing back pressure for you because you're you're calling me too many times",
    "start": "1722000",
    "end": "1728200"
  },
  {
    "text": "right then sort of we do an await Tas delay we wait a little bit until hopefully the server has had time to to",
    "start": "1728200",
    "end": "1734080"
  },
  {
    "text": "catch up and then we're doing it again right so that's sort of this this this piece of code that was there and if we",
    "start": "1734080",
    "end": "1739919"
  },
  {
    "text": "look at how this is going to be used I have here a method it was used this way so for example um here what we're seeing",
    "start": "1739919",
    "end": "1747640"
  },
  {
    "text": "is that this retry let me this retry policy run operation um it had sort of",
    "start": "1747640",
    "end": "1753399"
  },
  {
    "text": "this it was called this create message batch internal acing within the curly braces and as we can see on line one on",
    "start": "1753399",
    "end": "1760880"
  },
  {
    "text": "the top we have this message batch local variable right and then on line four and five between the curly braces line three",
    "start": "1760880",
    "end": "1768519"
  },
  {
    "text": "and six we essentially access the state which is this local variable that is",
    "start": "1768519",
    "end": "1773600"
  },
  {
    "text": "outside of the curly braces and that state that is outside of the Lambda so that is a closure allocation and how uh",
    "start": "1773600",
    "end": "1781279"
  },
  {
    "text": "would we know that well let's decompile the code right let's see what's actually being lowered and here I have this",
    "start": "1781279",
    "end": "1787799"
  },
  {
    "text": "giberish code that is sort of created by the compiler and if we zoom in we can see here there is this display class 16",
    "start": "1787799",
    "end": "1794919"
  },
  {
    "text": "allocation and there is this new funk of time span of task allocation that points to some sort of giberish method",
    "start": "1794919",
    "end": "1801519"
  },
  {
    "text": "somewhere right and we have here two allocations that are totally unary that we can get get rid of and this is just",
    "start": "1801519",
    "end": "1808159"
  },
  {
    "text": "because we're using a Lambda that accesses data that is outside of the curly braces and we can do that and we",
    "start": "1808159",
    "end": "1815559"
  },
  {
    "text": "have to do a little bit of sort of infrastructure Library type of coding so what we can do is we can create a new",
    "start": "1815559",
    "end": "1821799"
  },
  {
    "text": "run operation method and that run operation is going to use a value task for those who haven't heard about value",
    "start": "1821799",
    "end": "1827519"
  },
  {
    "text": "task valid task is basically a discriminated unit of a result and a yielding operation that is doing I bound",
    "start": "1827519",
    "end": "1834760"
  },
  {
    "text": "stuff when is that when is that a helpful thing to use some people would argue always use valid task your M your",
    "start": "1834760",
    "end": "1841440"
  },
  {
    "text": "mileage may vary I'm usually applying it when I have cases where I know that for example in eight or nine nine out of 10",
    "start": "1841440",
    "end": "1847760"
  },
  {
    "text": "times I'm actually getting a result and I'm only yielding to do as actual asynchronous work in only maybe 10% of",
    "start": "1847760",
    "end": "1854720"
  },
  {
    "text": "the cases that's when I use for example a while valid task and I design it so we were sort of using that because we said",
    "start": "1854720",
    "end": "1861559"
  },
  {
    "text": "well we have actually also other methods that returning a valid task so we want to make sure that we're more performant",
    "start": "1861559",
    "end": "1866840"
  },
  {
    "text": "and more modern and so we do return a valid task of T result and then what",
    "start": "1866840",
    "end": "1872360"
  },
  {
    "text": "we're doing is we're sort of passing in a funk of T1 time spending cancellation token that returns a valid task and then",
    "start": "1872360",
    "end": "1879799"
  },
  {
    "text": "on line three we're adding a T1 uh par parameter why why I'm using a generic if",
    "start": "1879799",
    "end": "1886159"
  },
  {
    "text": "we would be passing the state that we want to pass to the Lambda as an object",
    "start": "1886159",
    "end": "1891480"
  },
  {
    "text": "and if if we would pass in an INT what then would happen right we would be boxing that in so we want to use a",
    "start": "1891480",
    "end": "1897000"
  },
  {
    "text": "generic that we're not boxing because then we would create allocations for sort of value types and we don't want to do that and then um what I'm doing is",
    "start": "1897000",
    "end": "1904600"
  },
  {
    "text": "I'm simply calling this uh operation method and I passing T1 the state that is coming into that sort of uh delegate",
    "start": "1904600",
    "end": "1911960"
  },
  {
    "text": "that was passed into this run operation method and now when I have this in in place we can sort of do almost like",
    "start": "1911960",
    "end": "1918639"
  },
  {
    "text": "functional programming and we can start building on top of this Library function something that doesn't return a result",
    "start": "1918639",
    "end": "1925120"
  },
  {
    "text": "how would we do that again we return a value task we need to get access to the state and then we declare sort of funk",
    "start": "1925120",
    "end": "1933080"
  },
  {
    "text": "of T1 again but this time we're not doing valid task of T result we're passing in the state from the from the",
    "start": "1933080",
    "end": "1939200"
  },
  {
    "text": "outside and then what we're doing is we can sort of Leverage C 9 has this Nifty",
    "start": "1939200",
    "end": "1944440"
  },
  {
    "text": "feature where you can declare static lambdas so what it's basically a compiler trick what you can say is when",
    "start": "1944440",
    "end": "1950000"
  },
  {
    "text": "you have a Lambda you add the static thing and then the compiler will ensure that you can only access state that is",
    "start": "1950000",
    "end": "1956320"
  },
  {
    "text": "inside the Lambda so that means with this static async on line six we can only ever access state that is within",
    "start": "1956320",
    "end": "1963200"
  },
  {
    "text": "the curly braces between line seven and line 11 right so we are sort of guaranteed by design that we never have",
    "start": "1963200",
    "end": "1970039"
  },
  {
    "text": "a closure allocation and then uh what we can do is on line 12 we pass in a value",
    "start": "1970039",
    "end": "1976320"
  },
  {
    "text": "topple of sort of the state and the actual operation and then inside the",
    "start": "1976320",
    "end": "1981600"
  },
  {
    "text": "Lambda because we get access to the state we sort of deconstruct uh that state into T1 and",
    "start": "1981600",
    "end": "1987799"
  },
  {
    "text": "the actual operation by using sort of the value tle deconstruction and then we're calling this method and then we're",
    "start": "1987799",
    "end": "1993880"
  },
  {
    "text": "simply returning a default of object and now we have sort of removed uh the closure uh allocation by adding uh this",
    "start": "1993880",
    "end": "2002279"
  },
  {
    "text": "trick here cool now let's have a look how this actually look like when we compile it and what we can see now is we",
    "start": "2002279",
    "end": "2009559"
  },
  {
    "text": "have sort of the Beloved pattern that I was already talking about to say we're now in the safe Zone because we can see",
    "start": "2009559",
    "end": "2015440"
  },
  {
    "text": "now that we have this sort of um 9 uncore uncore 16 uncore 0 question mark",
    "start": "2015440",
    "end": "2020720"
  },
  {
    "text": "question mark and then equals pattern right and now we have sort of we're pointing to a statically cached Lambda",
    "start": "2020720",
    "end": "2027120"
  },
  {
    "text": "and now we have no longer allocations so the two allocations that we got got got rid of H they're now well they're fully",
    "start": "2027120",
    "end": "2034480"
  },
  {
    "text": "gone now but how would you actually detect those allocations in your code right because you don't want to",
    "start": "2034480",
    "end": "2040240"
  },
  {
    "text": "decompile everything and look for that so they're actually more proactive way how you can do that how you can do this",
    "start": "2040240",
    "end": "2047320"
  },
  {
    "text": "so one way to do it is you can use a memory profiler and you can watch out in your production code for excessive",
    "start": "2047320",
    "end": "2053240"
  },
  {
    "text": "allocations of display class and various variant of action and function delegate",
    "start": "2053240",
    "end": "2058440"
  },
  {
    "text": "allocations that's one way to do it I personally prefer to do it this way so when you for example use chat brains",
    "start": "2058440",
    "end": "2064280"
  },
  {
    "text": "Rider there is a heap allocation viewer plugin in writer that you can use and then it will tell you directly when",
    "start": "2064280",
    "end": "2070560"
  },
  {
    "text": "you're writing your code that you have that you have an allocation a closure allocation then you can get rid of it",
    "start": "2070560",
    "end": "2076638"
  },
  {
    "text": "for those who are using visual studio you can use the Heap allocation analyzer plugin in visual studio and it will tell",
    "start": "2076639",
    "end": "2082320"
  },
  {
    "text": "you that you have a closure allocation but then you might be thinking but hey Daniel I I don't have this problem in my",
    "start": "2082320",
    "end": "2088878"
  },
  {
    "text": "code I've never seen it why are you even talking about this well for example one sort of uh example that most people",
    "start": "2088879",
    "end": "2095358"
  },
  {
    "text": "probably have is the concurrent dictionary right concurrent dictionary has an has an get or add method and an",
    "start": "2095359",
    "end": "2102720"
  },
  {
    "text": "add or update method where you have a lamb where you pass in a delegate and when you for example in your add or",
    "start": "2102720",
    "end": "2109560"
  },
  {
    "text": "update method or get or add method when you're accessing state that is outside of the Lambda and you do this on the hot",
    "start": "2109560",
    "end": "2115560"
  },
  {
    "text": "path because you're trying to cash some stuff right then you have closure allocations that will affect your a",
    "start": "2115560",
    "end": "2121119"
  },
  {
    "text": "runtime performance right but then maybe you're still skeptical and you're saying but Daniel come on like all this sort of",
    "start": "2121119",
    "end": "2128000"
  },
  {
    "text": "mental gymnastic to just get rid of two allocations is that even worth it I have",
    "start": "2128000",
    "end": "2133280"
  },
  {
    "text": "an example here from I work for a company called particular software and we have a product that's called OSS and",
    "start": "2133280",
    "end": "2139400"
  },
  {
    "text": "the whole platform around it where we're doing sort of messaging type of middleware where you sort of communicate",
    "start": "2139400",
    "end": "2144680"
  },
  {
    "text": "with Ash storage cues Ash service bus sqs SNS and some other types of queuing system and in there we have the pipeline",
    "start": "2144680",
    "end": "2152280"
  },
  {
    "text": "execution engine and the pipeline execution engine is basically the core of ENT bu that make sure that we execute",
    "start": "2152280",
    "end": "2158960"
  },
  {
    "text": "our customers code AS efficiently as possible and it shouldn't be in in in the way and I did their closure",
    "start": "2158960",
    "end": "2166480"
  },
  {
    "text": "allocation optimizations uh to remove uh all sort of the these closure allocations that were happening inside",
    "start": "2166480",
    "end": "2172960"
  },
  {
    "text": "this sort of execution engine and as you can see here on the screen we actually just by getting rid of all the closure",
    "start": "2172960",
    "end": "2179599"
  },
  {
    "text": "allocations we got a throughput Improvement of 74 to 78% which is massive right a four 4X",
    "start": "2179599",
    "end": "2188040"
  },
  {
    "text": "sort of throughput improvement by just getting rid of all closure allocations inside this sort of core infrastructure",
    "start": "2188040",
    "end": "2194119"
  },
  {
    "text": "layer of of an service bus and all the allocations are gone so we went down from a whooping 20 megabyte of",
    "start": "2194119",
    "end": "2200680"
  },
  {
    "text": "allocations to one byte of allocation which is probably I don't know a rounding error I don't know but um if",
    "start": "2200680",
    "end": "2206560"
  },
  {
    "text": "you want to know more what I did there you can go to go particular.net nc- portal d23 pipeline to read up wrote an",
    "start": "2206560",
    "end": "2214560"
  },
  {
    "text": "entire blog post that talks about the optimizations that I that I did there",
    "start": "2214560",
    "end": "2219599"
  },
  {
    "text": "okay then the next one is pull and reuse buffers and larger objects under avoid excessive uh",
    "start": "2219599",
    "end": "2225520"
  },
  {
    "text": "allocations so one of the things that that is that is happening I already talked about this concept of lock tokens",
    "start": "2225520",
    "end": "2232520"
  },
  {
    "text": "and essentially whenever we whenever a message is received from Ash service bus",
    "start": "2232520",
    "end": "2237920"
  },
  {
    "text": "essentially this good comes over the network right comes over tcpip and this I have this data segment array segment",
    "start": "2237920",
    "end": "2244480"
  },
  {
    "text": "on line one and what the code was doing inside sort of the the SDK it was taking",
    "start": "2244480",
    "end": "2249800"
  },
  {
    "text": "this sort of bite stream and then it was allocating uh on line three it was",
    "start": "2249800",
    "end": "2254920"
  },
  {
    "text": "allocating a buffer of 16 bytes and then it was using buffer block copy to sort",
    "start": "2254920",
    "end": "2260000"
  },
  {
    "text": "of take the array segment and copy all the by arrays that were sort of in on on the network into that buffer and then it",
    "start": "2260000",
    "end": "2267640"
  },
  {
    "text": "was creating a a guid and because it has to do imagine you're using maybe ashes",
    "start": "2267640",
    "end": "2274200"
  },
  {
    "text": "service bu and you're receiving thousands and thousands of mess messages a second from your production system we're essentially allocating 16 bytes",
    "start": "2274200",
    "end": "2281640"
  },
  {
    "text": "for every message that we're receiving uh multiply by the throughput that we're getting per second right so these",
    "start": "2281640",
    "end": "2287079"
  },
  {
    "text": "allocations are essentially uh totally uh unnecessary and uh at that time I heard",
    "start": "2287079",
    "end": "2293520"
  },
  {
    "text": "of this thing called array pool who has heard from about the array pool in net",
    "start": "2293520",
    "end": "2298680"
  },
  {
    "text": "few people so array pool is basically it's almost like a car rental except you're not getting cars you're getting a",
    "start": "2298680",
    "end": "2304839"
  },
  {
    "text": "race right so essentially when when you when you want to have fun with your six friends right and you're saying well my",
    "start": "2304839",
    "end": "2310720"
  },
  {
    "text": "car only fits like four people you can go to the car rental and you can say I want to have a car that fits at least",
    "start": "2310720",
    "end": "2316160"
  },
  {
    "text": "six people into the car right and then you might getting a car that fits eight people at but you can at least six put",
    "start": "2316160",
    "end": "2322760"
  },
  {
    "text": "six people into the car then you're having fun with your friends right and then um you at the end of the day you",
    "start": "2322760",
    "end": "2329040"
  },
  {
    "text": "give back the car to the car rental you might clean it or you might not clean it that's extremely similar to the sort of",
    "start": "2329040",
    "end": "2334880"
  },
  {
    "text": "the array pool the array pool just gives you basically a race you can rent a race instead of of cars and that was I heard",
    "start": "2334880",
    "end": "2340800"
  },
  {
    "text": "about that I was like oh cool I can actually apply this trick because I know I have 16 bytes and I can optimize it",
    "start": "2340800",
    "end": "2347640"
  },
  {
    "text": "let's use the array pool so what I did is I used I introduced the array pool in the as SDK and I rented an array for 16",
    "start": "2347640",
    "end": "2355920"
  },
  {
    "text": "bytes as a quick reminder when I'm saying 16 bytes I'm not getting an array that fits exactly 60 bytes I might get",
    "start": "2355920",
    "end": "2363319"
  },
  {
    "text": "24 36 whatever I'm getting sort of at least that I can fit 16 bytes into that",
    "start": "2363319",
    "end": "2368640"
  },
  {
    "text": "array and then we were doing buffer block copy and at the end of the day I have to return it I have to sort of do",
    "start": "2368640",
    "end": "2375000"
  },
  {
    "text": "array pool shared return and I was like cool now I got rid of an allocation 60 bytes on the hot path multipli by number",
    "start": "2375000",
    "end": "2382280"
  },
  {
    "text": "of messages I've done a great service to the ash service buts uh Team there um",
    "start": "2382280",
    "end": "2387520"
  },
  {
    "text": "and I learned something about it and that was the first time I was being able to apply the sort of the array pool",
    "start": "2387520",
    "end": "2392960"
  },
  {
    "text": "stuff right I was pretty proud of myself and I was like oh cool hm let's have a look if it actually is faster so I",
    "start": "2392960",
    "end": "2399040"
  },
  {
    "text": "forced myself to write a test um a benchmark and then sad strombone as you",
    "start": "2399040",
    "end": "2404920"
  },
  {
    "text": "can see here on the screen uh well there is like I actually got rid of all the allocations but the problem is that even",
    "start": "2404920",
    "end": "2413000"
  },
  {
    "text": "though I got rid of all the allocations the code that I introduced was actually uh 226 per slower than the original code",
    "start": "2413000",
    "end": "2421359"
  },
  {
    "text": "so now you might be asking yourself well hm is that a problem well again the context comes into play right because we",
    "start": "2421359",
    "end": "2428560"
  },
  {
    "text": "could say if we are in a memory constrainted environment we can actually say we achieved something because we got",
    "start": "2428560",
    "end": "2434119"
  },
  {
    "text": "rid of memory allocations so this might be an optimization where we're willing to trade a throughput against memory",
    "start": "2434119",
    "end": "2440440"
  },
  {
    "text": "allocations we might be saying that's the thing we can do right um but there",
    "start": "2440440",
    "end": "2445680"
  },
  {
    "text": "is actually something we can apply that makes this code even faster and we're going now to the next rule so for small",
    "start": "2445680",
    "end": "2452240"
  },
  {
    "text": "local buffers consider using the stack and and I'm giving you here an example",
    "start": "2452240",
    "end": "2458760"
  },
  {
    "text": "so instead of using array pool to sort of rent an array what you can do is with C 7.3 uh and the introduction of span",
    "start": "2458760",
    "end": "2466560"
  },
  {
    "text": "and memory on T I'm going to talk a little bit about more about this a little bit later you can actually use",
    "start": "2466560",
    "end": "2472079"
  },
  {
    "text": "the stack collect keyword and you can say please allocate an array on the stack of the method and one of the great",
    "start": "2472079",
    "end": "2478119"
  },
  {
    "text": "things there is is that when the method returns that array is gone so there is no garbage collection that has to happen",
    "start": "2478119",
    "end": "2484000"
  },
  {
    "text": "there so that's super efficient and then what we can do is when we stack allocates that array we can then use the",
    "start": "2484000",
    "end": "2490440"
  },
  {
    "text": "aspan and copy2 method to sort of copy the bytes that we got from the network",
    "start": "2490440",
    "end": "2495720"
  },
  {
    "text": "into sort of that memory and then we can new up the guid right and then we actually got rid of uh all these sort of",
    "start": "2495720",
    "end": "2502880"
  },
  {
    "text": "memory allocations but some of you I don't know I'm I'm always exposed to nerds and stuff like that so some of you",
    "start": "2502880",
    "end": "2509319"
  },
  {
    "text": "might be thinking about Daniel I actually went through the msdn article and they know all the guid Constructor",
    "start": "2509319",
    "end": "2514800"
  },
  {
    "text": "and there is actually a guid construct structor that accepts a readon span why are you even copying the memory that's a",
    "start": "2514800",
    "end": "2520160"
  },
  {
    "text": "really good question because you should actually not copy the memory if you don't have to I'm showing this here as",
    "start": "2520160",
    "end": "2525560"
  },
  {
    "text": "sort of a demonstration uh because at the time when we were sort of writing these optimizations the actual code that",
    "start": "2525560",
    "end": "2532520"
  },
  {
    "text": "we actually wrote was way more complex and there is another thing uh but I feel it's it's a very good example to sort of",
    "start": "2532520",
    "end": "2539119"
  },
  {
    "text": "show what you can do but there is another thing with sort of goods that for example you have to take into account the bite representation of of a",
    "start": "2539119",
    "end": "2547040"
  },
  {
    "text": "guid is actually in indianness so depending on your system it's either in big Indian or in little Indian so it's a",
    "start": "2547040",
    "end": "2553720"
  },
  {
    "text": "network bite order or the other order and this code here the original version",
    "start": "2553720",
    "end": "2558800"
  },
  {
    "text": "that I showed you is using buffer block copy and buffer block copy actually takes care of end so it always copies it",
    "start": "2558800",
    "end": "2565440"
  },
  {
    "text": "in in the right end of your sort of Target system but this version wouldn't",
    "start": "2565440",
    "end": "2570640"
  },
  {
    "text": "do that right so again it's it's a simplified version of the code and the actual code that we wrote was way more",
    "start": "2570640",
    "end": "2577480"
  },
  {
    "text": "uh complex and some of the things that we had to trade off because we were on net standard we didn't have those GID",
    "start": "2577480",
    "end": "2582720"
  },
  {
    "text": "Constructors that actually take a read only span and the team at that point felt like we need to copy the buffer but",
    "start": "2582720",
    "end": "2588920"
  },
  {
    "text": "then over time we actually learned that's actually nonsense we don't have to do this and then we did further iterations of the code okay I just want",
    "start": "2588920",
    "end": "2596200"
  },
  {
    "text": "to give you the full picture while still showing you a simple example hopefully that's clear uh and I will talk a bit",
    "start": "2596200",
    "end": "2602520"
  },
  {
    "text": "more about copying of memory and when you should not do that a little bit later let's measure this one and as we",
    "start": "2602520",
    "end": "2608400"
  },
  {
    "text": "can see if we compare these different versions here is the last version that is using for the smaller buff is no",
    "start": "2608400",
    "end": "2614280"
  },
  {
    "text": "longer the ray pool is now 45% faster and also all the allocations are gone",
    "start": "2614280",
    "end": "2619480"
  },
  {
    "text": "right so we actually now achieved something and we we made the right uh tradeoffs and by the way you might be",
    "start": "2619480",
    "end": "2626160"
  },
  {
    "text": "thinking now well stack really cool Daniel thank you very much for showing me this I'm going to do this now",
    "start": "2626160",
    "end": "2631640"
  },
  {
    "text": "everywhere right and there is things you should not be doing because one of of the things that a stack has it has a",
    "start": "2631640",
    "end": "2638319"
  },
  {
    "text": "certain sort of size limit right and you should for example never actually stack Al look unbounded stuff so if stuff is",
    "start": "2638319",
    "end": "2644800"
  },
  {
    "text": "out of your control you should not do that luckily we have now compiler warnings that actually are telling you",
    "start": "2644800",
    "end": "2650040"
  },
  {
    "text": "no no Daniel don't do this this is really stupid right uh when you're sitting in front of when I'm sitting in",
    "start": "2650040",
    "end": "2655280"
  },
  {
    "text": "front of the ID but for example if you stack a look more than a megabyte as an example right things will go horribly",
    "start": "2655280",
    "end": "2661400"
  },
  {
    "text": "wrong and things will explode in production right so be careful to not overdo this um again the context is is",
    "start": "2661400",
    "end": "2669119"
  },
  {
    "text": "quite quite important so I have summarized here the rules under avoid excessive allocations to reduce the",
    "start": "2669119",
    "end": "2674760"
  },
  {
    "text": "chesc overhead think at least twice before using link or unnecessary enumerations on the hot path be aware of",
    "start": "2674760",
    "end": "2680440"
  },
  {
    "text": "closure allocations pull and reuse buffers for small and local buffers consider using the stack and there are",
    "start": "2680440",
    "end": "2686200"
  },
  {
    "text": "two more things that I haven't talked about be aware of parameter overloads where is for example have params arrays",
    "start": "2686200",
    "end": "2691800"
  },
  {
    "text": "this is always an allocation where possible and feasible use value types but pay attention to unnecessary boxing",
    "start": "2691800",
    "end": "2698000"
  },
  {
    "text": "we talked quickly about that and whenever you can move allocations away from the hot path where possible right",
    "start": "2698000",
    "end": "2704119"
  },
  {
    "text": "because for example if you have a bite array and you know you only have a single threet that is executing and",
    "start": "2704119",
    "end": "2709400"
  },
  {
    "text": "accessing this bite array but is sort of cycling you can sort of instead of doing it in the while loop you can move it out",
    "start": "2709400",
    "end": "2715000"
  },
  {
    "text": "of the while loop right and you can allocate one bite array and then you can work with this bite array all the time",
    "start": "2715000",
    "end": "2720280"
  },
  {
    "text": "and you don't have an allocation anymore on the hot path right these are things that you can do to optimize your code",
    "start": "2720280",
    "end": "2726480"
  },
  {
    "text": "and let's go to the last one which is the avoid unnecessary copying of memory um so with the introduction of sort of",
    "start": "2726480",
    "end": "2733920"
  },
  {
    "text": "span and memory of T and I'm giving you a very quick sort of introduction to span so span is essentially just a",
    "start": "2733920",
    "end": "2740599"
  },
  {
    "text": "pointer to a memory uh location and that can be any sort of arbitrary memory can",
    "start": "2740599",
    "end": "2745760"
  },
  {
    "text": "be unmanaged memory or whatnot right and then you have a length to it and I usually conceptualize it with almost",
    "start": "2745760",
    "end": "2752119"
  },
  {
    "text": "like a curtain right so basically if I have a chunk of memory like this I basically have a pointer to somewhere in",
    "start": "2752119",
    "end": "2757640"
  },
  {
    "text": "the memory and then I pull in the curtain which is the length to essentially only see a specific slid and then I'm guaranteed to only ever operate",
    "start": "2757640",
    "end": "2764319"
  },
  {
    "text": "in that specific slce so that's conceptually a span I know it's a very highly simplified version of a span and",
    "start": "2764319",
    "end": "2770240"
  },
  {
    "text": "there are people that are giving talks about this topic about span and memory of T and all these types of things that are hourly long but I want to give you a",
    "start": "2770240",
    "end": "2777119"
  },
  {
    "text": "quick introduction and span is the one that is happening on the stack and there is memory right and memory you can you",
    "start": "2777119",
    "end": "2783000"
  },
  {
    "text": "can only use you cannot use span or for example on async methods you have to use",
    "start": "2783000",
    "end": "2788680"
  },
  {
    "text": "then me memory of of T so that's sort of a really simplified version of span and",
    "start": "2788680",
    "end": "2794079"
  },
  {
    "text": "memory of T let's have a look at the the most important rules and recently David fer was tweeting about this so the first",
    "start": "2794079",
    "end": "2801119"
  },
  {
    "text": "look for stream and bite array usages that are copied or manipulated without using span or memory so apparently",
    "start": "2801119",
    "end": "2807520"
  },
  {
    "text": "according to David Fowler uh using things like two array as as an example",
    "start": "2807520",
    "end": "2812920"
  },
  {
    "text": "is still one of D on for example simple streams is still one of the major",
    "start": "2812920",
    "end": "2818040"
  },
  {
    "text": "sources of allocations on many many net projects so uh make sure that you're not",
    "start": "2818040",
    "end": "2824240"
  },
  {
    "text": "doing that when you don't have to or replace existing data manipulation methods with newer span or memory based",
    "start": "2824240",
    "end": "2830760"
  },
  {
    "text": "uh overloads and the last example that I'm going to show you now in this talk will sort of bring all the rules that",
    "start": "2830760",
    "end": "2837119"
  },
  {
    "text": "I've showed you together and I'm going to talk about the event tops client so event tops is sort of like Kafka it's a",
    "start": "2837119",
    "end": "2844200"
  },
  {
    "text": "streaming system where sort of have uh topics that I that I can sort of send events to and what it has it also has a",
    "start": "2844200",
    "end": "2851920"
  },
  {
    "text": "a partitioning thing and partitions again highly simplified is basically almost like when you have a bookshelf",
    "start": "2851920",
    "end": "2858040"
  },
  {
    "text": "right and you have sort of books with authors and you're saying well I'm going to take all the books with with the",
    "start": "2858040",
    "end": "2863839"
  },
  {
    "text": "authors that start with letter A I'm going to take them out of the bookshelf and put it into a box that has the",
    "start": "2863839",
    "end": "2868960"
  },
  {
    "text": "letter A on it right and then I take the ones that are off with b and put it into a box with v that's basically highly",
    "start": "2868960",
    "end": "2875359"
  },
  {
    "text": "concept viralized it's is basically partitioning and they also do do that in this sort of event HPS client and we",
    "start": "2875359",
    "end": "2882800"
  },
  {
    "text": "their partition key algorithm that is is used on 30 to 40% on the hot path uh",
    "start": "2882800",
    "end": "2889520"
  },
  {
    "text": "that that we that I had a look at and that was looking at this piece of code and this this is how the code looked",
    "start": "2889520",
    "end": "2895280"
  },
  {
    "text": "like um and sometimes allocations or things that slow down are",
    "start": "2895280",
    "end": "2901880"
  },
  {
    "text": "very sort of hidden in the code and you have to sort of develop a really good understanding of sort of the runtime the",
    "start": "2901880",
    "end": "2908839"
  },
  {
    "text": "BCL that that you that you're using in order to spot it but what we can see here is we have this method here in this",
    "start": "2908839",
    "end": "2916400"
  },
  {
    "text": "partition key algorithm that basically says encoding get bites and get bites already hints that well there will be a",
    "start": "2916400",
    "end": "2923960"
  },
  {
    "text": "bite array that is going to be returned and if you look at the method signature on line 11 we can see that a bite array",
    "start": "2923960",
    "end": "2930720"
  },
  {
    "text": "is going to be passed into this uh partition key algorithm right and because uh net gives us an array it",
    "start": "2930720",
    "end": "2938520"
  },
  {
    "text": "cannot do any sort of buffer pooling right because net doesn't know what we're going to what kind of trickery we",
    "start": "2938520",
    "end": "2944280"
  },
  {
    "text": "going to do with that bite rate right we might be assigning it to a static local field or to sorry to a static field or",
    "start": "2944280",
    "end": "2952280"
  },
  {
    "text": "do whatever right and essentially that's why it's sort of creating a new array and giving it back uh back to us and the",
    "start": "2952280",
    "end": "2959760"
  },
  {
    "text": "problem of this code is the partition key algorithm is essentially depending on user input right so you when you're",
    "start": "2959760",
    "end": "2966359"
  },
  {
    "text": "using event Ops you can set a a partition key for example if you're using names of people like I have swiss",
    "start": "2966359",
    "end": "2973200"
  },
  {
    "text": "German Roots I have already a pretty long name right so if you use my name uh then it's going to basically allocate as",
    "start": "2973200",
    "end": "2979960"
  },
  {
    "text": "much memory as needed to sort of fill in my name right and if you add even more if you add twice my name it's going to",
    "start": "2979960",
    "end": "2986839"
  },
  {
    "text": "allocate twice as much memory if you put it in the name that is shorter it's going to allocate less memory but we",
    "start": "2986839",
    "end": "2992319"
  },
  {
    "text": "have basically have Vari variable size of memory that is is going to be allocated in this piece of code and that",
    "start": "2992319",
    "end": "2998280"
  },
  {
    "text": "is something we want to get rid of and what we can do is we can essentially bring everything together and then",
    "start": "2998280",
    "end": "3004280"
  },
  {
    "text": "optimize this algorithm this partition key algorithm so the first thing we're going to apply is we're going to take the string we're going to turn it into a",
    "start": "3004280",
    "end": "3011079"
  },
  {
    "text": "span because we want to use the span based overloads to essentially make sure we're uh we're not sort of um copying",
    "start": "3011079",
    "end": "3017480"
  },
  {
    "text": "stuff where we don't need it and we can arbitrary slice the memory that we need to and then once we have done that what",
    "start": "3017480",
    "end": "3023720"
  },
  {
    "text": "we are going to apply apply here is we're going to uh ask basically our encoding how large is that string and",
    "start": "3023720",
    "end": "3030799"
  },
  {
    "text": "maybe some people have heard about the get bite count and get bite count is basically an exact length of a string",
    "start": "3030799",
    "end": "3037839"
  },
  {
    "text": "but we don't need that because we're going to apply another performance trick that I call over renting so what we're",
    "start": "3037839",
    "end": "3043480"
  },
  {
    "text": "going to do is we're going to use get Max bite count and get Max bite count is basically an approximation it is just a",
    "start": "3043480",
    "end": "3049920"
  },
  {
    "text": "simple math it multiplies sort of the length here with encoding utf8 by four",
    "start": "3049920",
    "end": "3055839"
  },
  {
    "text": "right so it basically takes the length of string multiplies it by four so it's a really fast operation and then what",
    "start": "3055839",
    "end": "3061480"
  },
  {
    "text": "we're going to do is we're essentially going to say well if the partition key is smaller than an arbitrary stack limit",
    "start": "3061480",
    "end": "3068640"
  },
  {
    "text": "and here I'm using 256 byte we're going to be in the things where we use for uh for small and local buffers use the",
    "start": "3068640",
    "end": "3075119"
  },
  {
    "text": "stack right so what we're going to do is we're going to stack allocate and for things that they are bigger than that",
    "start": "3075119",
    "end": "3081160"
  },
  {
    "text": "arbitrary defined stack limit we're going to use the array pool to actually rent memory um and then we're going going to",
    "start": "3081160",
    "end": "3088880"
  },
  {
    "text": "call a method that essentially accepts the hash buffer that we just rented or",
    "start": "3088880",
    "end": "3094400"
  },
  {
    "text": "stack allocated and we pass it to that method and now because we sort of over rented right because if you remember I",
    "start": "3094400",
    "end": "3101880"
  },
  {
    "text": "said arbitrary stack limit 256 and I did Stack allocate of 256 so if you have for",
    "start": "3101880",
    "end": "3108119"
  },
  {
    "text": "example string that actually only needs 16 bytes we're still going to allocate 256 bytes and I'm going to talk about",
    "start": "3108119",
    "end": "3114599"
  },
  {
    "text": "why that's actually better than actually allocate the exact amount of memory a little bit later but then what we're",
    "start": "3114599",
    "end": "3119839"
  },
  {
    "text": "going to do is we call this method and it will fill in the btes into the hash buffer and it will tell us how much bite",
    "start": "3119839",
    "end": "3126480"
  },
  {
    "text": "it has actually written right it gives us that back and now we can basically slice bring in the curtain right because",
    "start": "3126480",
    "end": "3132839"
  },
  {
    "text": "we know that it's 256 as an example of the 16 bytes right but it will tell us I",
    "start": "3132839",
    "end": "3138079"
  },
  {
    "text": "only wrote 16 bytes into this your hash buffer that you gave me right and now we can pull in the curtain and say we slice",
    "start": "3138079",
    "end": "3144240"
  },
  {
    "text": "it on line 19 from basically the start point to the 16 bytes right and now we're safe and then uh we give this sort",
    "start": "3144240",
    "end": "3151680"
  },
  {
    "text": "of read only span to the method and then what we have to do is when we are in the cases where we actually sort of rented",
    "start": "3151680",
    "end": "3158040"
  },
  {
    "text": "uh the buffer uh then uh we can uh we can have to return it again and maybe",
    "start": "3158040",
    "end": "3163960"
  },
  {
    "text": "you're saying but why are you not using a try finally are you nuts well we actually looked at because we're on a",
    "start": "3163960",
    "end": "3170319"
  },
  {
    "text": "high performance sort of code where because we're executing on 30 to 40% on the top half this partition key",
    "start": "3170319",
    "end": "3176319"
  },
  {
    "text": "algorithm we were thinking about sort of the boundary conditions of when can this code actually go wrong and we couldn't",
    "start": "3176319",
    "end": "3182160"
  },
  {
    "text": "come up with with with a with a thing where we said well it's probably not going to go wrong we might be wrong but",
    "start": "3182160",
    "end": "3188440"
  },
  {
    "text": "we will'll see right so we said we're going to avoid the try finally to sort of not blow up sort of the method uh",
    "start": "3188440",
    "end": "3194839"
  },
  {
    "text": "stack stack size because again we're High performant and the method stack size actually is also relevant how large",
    "start": "3194839",
    "end": "3201319"
  },
  {
    "text": "the method is in high performance uh systems so we essentially avoided uh the",
    "start": "3201319",
    "end": "3206920"
  },
  {
    "text": "the TR Final in this specific case Okay and then we pass in the read only span to this compute ha method and",
    "start": "3206920",
    "end": "3213799"
  },
  {
    "text": "the rest is exactly the same and now I told you about this over renting thing",
    "start": "3213799",
    "end": "3219119"
  },
  {
    "text": "so there is actually a trick that you can apply in cases so because the net wants to be safe by default when you",
    "start": "3219119",
    "end": "3225960"
  },
  {
    "text": "stack allocate it gives you always sort of clean memory right there will never be any garbage in there and if you alloc",
    "start": "3225960",
    "end": "3233280"
  },
  {
    "text": "stack allocate 256 bytes it will basically go and say oh that person needs memory of 260 bytes let's give",
    "start": "3233280",
    "end": "3240559"
  },
  {
    "text": "that person a clean memory array so if there was stuff in there in that memory",
    "start": "3240559",
    "end": "3245599"
  },
  {
    "text": "that you're trying to stack allocate it's going to clear 256 position for you",
    "start": "3245599",
    "end": "3251400"
  },
  {
    "text": "so that you're getting all zeros basically right and you can say well I'm smart I know what I'm doing or maybe I'm",
    "start": "3251400",
    "end": "3258720"
  },
  {
    "text": "just crazy uh and then you can add on line one you can see up up there the skips locals init attribute and then",
    "start": "3258720",
    "end": "3265160"
  },
  {
    "text": "you're basically is telling the compiler don't uh emit sort of that that that",
    "start": "3265160",
    "end": "3270680"
  },
  {
    "text": "code that clears the memory and you might thinking what why would you ever do that well I told you right that we",
    "start": "3270680",
    "end": "3277839"
  },
  {
    "text": "are in exact control of this code and we know exactly how much bites we're going to write and we're then pulling in the",
    "start": "3277839",
    "end": "3284680"
  },
  {
    "text": "curtain so even if there is garbage in this 256 bites right because we only",
    "start": "3284680",
    "end": "3289880"
  },
  {
    "text": "wrote 16 bytes we're never going to see this garbage that is in there so we don't care about the rest being all",
    "start": "3289880",
    "end": "3296319"
  },
  {
    "text": "zeros or arbitrary bytes so we can basically optimize it and then this Cod becomes faster than actually getting",
    "start": "3296319",
    "end": "3303160"
  },
  {
    "text": "exact lengths and stack allocating um the the exact number of bites so that's",
    "start": "3303160",
    "end": "3308960"
  },
  {
    "text": "a trickery that you can do as well let's measure it and what we can see here is",
    "start": "3308960",
    "end": "3315079"
  },
  {
    "text": "the before and after uh executed against multiple uh string sizes and again when",
    "start": "3315079",
    "end": "3321200"
  },
  {
    "text": "you're doing benchmarks right you also have to think about what are the boundary conditions of my code and",
    "start": "3321200",
    "end": "3326880"
  },
  {
    "text": "because I have uh stack allocated memory on 256 I also want to Benchmark things",
    "start": "3326880",
    "end": "3333240"
  },
  {
    "text": "that are around sort of the 256 byte uh string length uh by length uh area and",
    "start": "3333240",
    "end": "3339760"
  },
  {
    "text": "also things that is higher right so I have basically permutations of things where I execute this Benchmark and",
    "start": "3339760",
    "end": "3345480"
  },
  {
    "text": "overall what we can see is the new code is now 38 to 74% faster and all the",
    "start": "3345480",
    "end": "3351760"
  },
  {
    "text": "allocations are gone right so previously we were basically the depending on the input and had sort of arbitrary",
    "start": "3351760",
    "end": "3358200"
  },
  {
    "text": "allocations happening right and and now this is no longer here because we have stack allocated and we we're doing buff",
    "start": "3358200",
    "end": "3365400"
  },
  {
    "text": "rental and everything like that and it's also way way way faster okay um I'm",
    "start": "3365400",
    "end": "3371240"
  },
  {
    "text": "going to summarize the the rules that we looked at look for stream and bite usages that are copied and manipulated",
    "start": "3371240",
    "end": "3376960"
  },
  {
    "text": "without using span or memory replace existing data manipulation methods with newer span or memory based variants and",
    "start": "3376960",
    "end": "3383599"
  },
  {
    "text": "the one the last one watch out for immutable readon data that is copied whenever you have data that is immutable",
    "start": "3383599",
    "end": "3389839"
  },
  {
    "text": "or readon you don't have to copy it right because it's by Design not going to be modified you might be laughing but",
    "start": "3389839",
    "end": "3395920"
  },
  {
    "text": "I've have seen code even in the ash. net SDK where this happened right and then",
    "start": "3395920",
    "end": "3401079"
  },
  {
    "text": "you can just for free you can get less allocations by not doing that okay here I have also summarized",
    "start": "3401079",
    "end": "3408319"
  },
  {
    "text": "for those who haven't uh had a chance to uh to to sort of uh make a picture all",
    "start": "3408319",
    "end": "3413760"
  },
  {
    "text": "the avoid excess allocation rules I have it here on the slides should you wish to take a picture and you might also get it",
    "start": "3413760",
    "end": "3420559"
  },
  {
    "text": "in the recording but I want to show it here sort of um for completeness reason and the last one that I've already",
    "start": "3420559",
    "end": "3426960"
  },
  {
    "text": "showed here as well avoid unnecessary copying of memory here on the screen and",
    "start": "3426960",
    "end": "3432520"
  },
  {
    "text": "uh because I want to use the time quickly to give you a little challenge because it's almost the end of the day",
    "start": "3432520",
    "end": "3438480"
  },
  {
    "text": "so uh in case you're up for a challenge you can reach out to me over Twitter LinkedIn or whatever and because what",
    "start": "3438480",
    "end": "3445240"
  },
  {
    "text": "happened was when we when I optimized this code what actually happened was the",
    "start": "3445240",
    "end": "3450640"
  },
  {
    "text": "original version of the compute hash method had a bug in it can you spot it",
    "start": "3450640",
    "end": "3456480"
  },
  {
    "text": "um this is the algorithm that I'm showing here on the code if you're up for this challenge take a picture think",
    "start": "3456480",
    "end": "3462119"
  },
  {
    "text": "about it and and and shout it out to me you can also reach out in the hallways if you want uh if you're up for that",
    "start": "3462119",
    "end": "3467839"
  },
  {
    "text": "challenge and let me know what bu was in there luckily we discovered the bu be",
    "start": "3467839",
    "end": "3473839"
  },
  {
    "text": "before we shipped that version so it's actually not shipped in the Azure SDK",
    "start": "3473839",
    "end": "3479039"
  },
  {
    "text": "because it was failing uh on some environments and in some environments it",
    "start": "3479039",
    "end": "3484720"
  },
  {
    "text": "was successfully passing and I'm giving you a hint think about what is the most important characteristics of a hashing",
    "start": "3484720",
    "end": "3491960"
  },
  {
    "text": "function and think about can this be guaranteed with this with this uh with",
    "start": "3491960",
    "end": "3498760"
  },
  {
    "text": "this uh type of code um or or not and especially with the uh optimization",
    "start": "3498760",
    "end": "3505640"
  },
  {
    "text": "let me wrap it up so again at scale implementation detail Details Matter",
    "start": "3505640",
    "end": "3511799"
  },
  {
    "text": "again I don't want you to go back to your projects and apply all these types of optimizations everywhere right first",
    "start": "3511799",
    "end": "3517680"
  },
  {
    "text": "of all if you have expensive database calls hdp calls right iob bound stuff",
    "start": "3517680",
    "end": "3523319"
  },
  {
    "text": "tweak those first because you're getting tens tens or hundreds of sort of orders",
    "start": "3523319",
    "end": "3528400"
  },
  {
    "text": "of magnitude more throughput Improvement in your production system when you optimize your database calls your Entity",
    "start": "3528400",
    "end": "3534200"
  },
  {
    "text": "Framework B loading and all that type of stuff first right only if you have optimized that and you understand sort",
    "start": "3534200",
    "end": "3540520"
  },
  {
    "text": "of the ramifications of these things then think about potentially on the hot path applying the things the tips and",
    "start": "3540520",
    "end": "3546839"
  },
  {
    "text": "tricks that I have showed you here uh today because then you can combine these things together and you get like a",
    "start": "3546839",
    "end": "3552119"
  },
  {
    "text": "really really high throughput system um out of it and in all other cases don't",
    "start": "3552119",
    "end": "3558039"
  },
  {
    "text": "even bother right okay and just to sort of summarize it uh in the event hops",
    "start": "3558039",
    "end": "3563280"
  },
  {
    "text": "case all the optimization that I contributed to event Toops ended up sort of in real production scenarios",
    "start": "3563280",
    "end": "3569359"
  },
  {
    "text": "increasing the through put by 8% on sort of the publishing throughput",
    "start": "3569359",
    "end": "3574920"
  },
  {
    "text": "and uh to three to 4% on the sort of incoming path and as you can imagine if",
    "start": "3574920",
    "end": "3580520"
  },
  {
    "text": "you have a system that pumps 20 megabyte sort of peration or whatever uh data through and you're getting just by",
    "start": "3580520",
    "end": "3586559"
  },
  {
    "text": "upgrading the aure service the event tops SDK to the next version you're getting 8% more frut Improvement or 3 to",
    "start": "3586559",
    "end": "3593280"
  },
  {
    "text": "4% fruit you're actually getting more value out of the library for the money that you're paying Microsoft right so",
    "start": "3593280",
    "end": "3599839"
  },
  {
    "text": "that's uh pretty cool and who wouldn't want to have an 8% faster car just for free right except I'm only allowed to to",
    "start": "3599839",
    "end": "3606240"
  },
  {
    "text": "drive a Kia seat because I lost the conversation with my wife to get a faster car but anyway I'm digressing so",
    "start": "3606240",
    "end": "3613839"
  },
  {
    "text": "again uh it really it it truly matters for me think about the context of the code uh apply these principles that I",
    "start": "3613839",
    "end": "3620799"
  },
  {
    "text": "showed you where it matters in all other cases potentially favor readability and just use whatever version that you feel",
    "start": "3620799",
    "end": "3626559"
  },
  {
    "text": "most comfortable with and don't even bother about the optimization that I show you today in other all all the other cases do apply those for those who",
    "start": "3626559",
    "end": "3633920"
  },
  {
    "text": "want to sort of get more details about the code the examples I have a full full readme on gith hop.com danani Maru",
    "start": "3633920",
    "end": "3641400"
  },
  {
    "text": "performance tricks as esates also in the sort of uh code up there and here on the",
    "start": "3641400",
    "end": "3647760"
  },
  {
    "text": "bottom I also have a q a QR code should you uh wish to sort of get um sort of my",
    "start": "3647760",
    "end": "3654079"
  },
  {
    "text": "expertise on your message based system you can also sort of make a screenshot of this code and then you can reach out",
    "start": "3654079",
    "end": "3660880"
  },
  {
    "text": "to me and I'll help you gladly to make your message based system uh faster and",
    "start": "3660880",
    "end": "3666119"
  },
  {
    "text": "uh for sort of a free Consulting if you want that but that's all from my end the happy coding for all of you and if you",
    "start": "3666119",
    "end": "3673000"
  },
  {
    "text": "have any questions feel free to quickly ask a [Applause]",
    "start": "3673000",
    "end": "3680069"
  },
  {
    "text": "question I I just saw I'm in interest of time I think I'm already on the time",
    "start": "3683039",
    "end": "3688200"
  },
  {
    "text": "boundary so I guess uh you can come to me and ask me questions",
    "start": "3688200",
    "end": "3694318"
  },
  {
    "text": "directly",
    "start": "3695520",
    "end": "3698520"
  }
]