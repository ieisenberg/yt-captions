[
  {
    "text": "let's get started so with clean architecture the domain and the application layer are at the",
    "start": "10400",
    "end": "17539"
  },
  {
    "text": "center of the design this is known as the core now the domain contains",
    "start": "17539",
    "end": "22880"
  },
  {
    "text": "enterprise logic and types and the application layer contains business logic and types the difference being",
    "start": "22880",
    "end": "28939"
  },
  {
    "text": "that enterprise logic could be shared across many systems whereas business logic would only be typically used in",
    "start": "28939",
    "end": "34790"
  },
  {
    "text": "this application now rather than have core depend on concerns such as data access and infrastructure we invert",
    "start": "34790",
    "end": "42350"
  },
  {
    "text": "those dependencies so infrastructure and presentation depend on core but core has",
    "start": "42350",
    "end": "48320"
  },
  {
    "text": "no dependencies this is achieved by adding interfaces or abstractions into",
    "start": "48320",
    "end": "53690"
  },
  {
    "text": "core which are then implemented by their outside layers so you can see with this design all dependencies point inwards",
    "start": "53690",
    "end": "60770"
  },
  {
    "text": "and this results in an architecture and design that is independent of frameworks we don't need some framework to build",
    "start": "60770",
    "end": "67070"
  },
  {
    "text": "and maintain our solution its testable and in fact it's really really easy to test with everything inside of core we",
    "start": "67070",
    "end": "74329"
  },
  {
    "text": "can write unit tests for a hundred percent of our logic and it's all logic as I said it's business logic and",
    "start": "74329",
    "end": "79340"
  },
  {
    "text": "enterprise logic it's independent of the UI right now we're using asp.net core",
    "start": "79340",
    "end": "84590"
  },
  {
    "text": "three front-end with angular but we can switch that out and it's easy to do so and that's because inside of core we",
    "start": "84590",
    "end": "90859"
  },
  {
    "text": "have well-defined view models and all of our logic is encapsulated we haven't let any of that logic creep into the",
    "start": "90859",
    "end": "96770"
  },
  {
    "text": "front-end it's independent of the database right now we use in sequel server we've switched it successfully to",
    "start": "96770",
    "end": "102859"
  },
  {
    "text": "Postgres later on we're gonna switch it to cosmos TV probably back to Postgres again and we can do that because we have",
    "start": "102859",
    "end": "109520"
  },
  {
    "text": "a wonderful abstraction in place and finally it's independent of anything external and with this design that's the",
    "start": "109520",
    "end": "116659"
  },
  {
    "text": "difference between an applications go in the last three years and an application are still going to be here in 20 years",
    "start": "116659",
    "end": "121899"
  },
  {
    "text": "now you can see with these layers there's only three but think of this as a starting point you can add more if you",
    "start": "121899",
    "end": "129530"
  },
  {
    "text": "need to add additional layers just remember to keep those dependencies flowing inwards let's take a look at a",
    "start": "129530",
    "end": "136010"
  },
  {
    "text": "couple of examples so when I first started doing this talk in 2018 we were",
    "start": "136010",
    "end": "141829"
  },
  {
    "text": "using the Northwind traders sent solution why you might ask well because I still think Northwind traders is cool",
    "start": "141829",
    "end": "148599"
  },
  {
    "text": "and I wanted to share it with the world and the good news is I wasn't wrong this",
    "start": "148599",
    "end": "154120"
  },
  {
    "text": "project has taken off it's now starred by almost 3,000 people and forked by",
    "start": "154120",
    "end": "160000"
  },
  {
    "text": "almost 1000 people and that's amazing so I wanted to take a moment to thank that",
    "start": "160000",
    "end": "165069"
  },
  {
    "text": "community thank you for your contributions thank you for your pull request thank you for the tough questions thank you",
    "start": "165069",
    "end": "171909"
  },
  {
    "text": "for your support it's amazing keep that up but based on Northwind traders I've now built a clean",
    "start": "171909",
    "end": "178629"
  },
  {
    "text": "architecture template and with this template I now have a very simple file new project experience and that's what",
    "start": "178629",
    "end": "185560"
  },
  {
    "text": "it's all about right kiss keep it simple so we're going to use this template today and have a look at some of the",
    "start": "185560",
    "end": "191739"
  },
  {
    "text": "features that I've built into it and then at the end I'll show you how to install it and how to get started can't",
    "start": "191739",
    "end": "204579"
  },
  {
    "text": "actually see my mouse that's tricky I'll work with it okay so you can see",
    "start": "204579",
    "end": "212709"
  },
  {
    "text": "here in our clean architecture template we've got basically a sample application now I started this off by going for a",
    "start": "212709",
    "end": "219069"
  },
  {
    "text": "new project with an angular asp.net core solution and then built in a clean architecture back-end with all the",
    "start": "219069",
    "end": "225459"
  },
  {
    "text": "features we've come to know and love from from the Northwind traders solution so you can see here we've got the domain",
    "start": "225459",
    "end": "232780"
  },
  {
    "text": "layer the application layer the infrastructure layer and the web UI layer in addition to that we've got a",
    "start": "232780",
    "end": "240459"
  },
  {
    "text": "bunch of tests so for domain and application we've got unit tests and for infrastructure and web UI we've got",
    "start": "240459",
    "end": "246579"
  },
  {
    "text": "integration tests",
    "start": "246579",
    "end": "249599"
  },
  {
    "text": "you know hopefully I get my mouse back okay so the key points domain contains",
    "start": "253069",
    "end": "260180"
  },
  {
    "text": "enterprise-wide logic and types the application contains business logic and types remember enterprise can be shared",
    "start": "260180",
    "end": "266810"
  },
  {
    "text": "across many systems but the business logic is specific to this application infrastructure contains all external",
    "start": "266810",
    "end": "273050"
  },
  {
    "text": "concerns and that now includes persistence presentation and infrastructure depend on only on",
    "start": "273050",
    "end": "278509"
  },
  {
    "text": "application they don't depend on each other and that way we ensure that these components can be replaced with minimal",
    "start": "278509",
    "end": "285199"
  },
  {
    "text": "effort but just take a moment to think about presentation infrastructure relationship it's very easy to go ahead",
    "start": "285199",
    "end": "291169"
  },
  {
    "text": "and add in dependency to infrastructure and then start using infrastructure services for example in the web",
    "start": "291169",
    "end": "297500"
  },
  {
    "text": "front-end we might want to send an email and it's easy enough to do in a controller but then that's logic in the",
    "start": "297500",
    "end": "303139"
  },
  {
    "text": "front-end and we need to keep that logic out of the front-end because it can't be reused all right let's all look at the",
    "start": "303139",
    "end": "310610"
  },
  {
    "text": "domain layer so in the domain layer we",
    "start": "310610",
    "end": "316490"
  },
  {
    "text": "have entities value objects enumerations logic and exceptions hey my mouse came",
    "start": "316490",
    "end": "325520"
  },
  {
    "text": "back that's so good I'm really pleased about that so the first thing that I want to point",
    "start": "325520",
    "end": "332090"
  },
  {
    "text": "out in the domain layer is to avoid using data annotations so you can see",
    "start": "332090",
    "end": "337130"
  },
  {
    "text": "here we've kept this solution simple because it's a file new project solution we're going to be adding our own",
    "start": "337130",
    "end": "342349"
  },
  {
    "text": "entities but you can see nonetheless I have a to-do item and I haven't used data annotations and why is that",
    "start": "342349",
    "end": "349580"
  },
  {
    "text": "well I won't complete mine keep mine domain model clean I want to keep data annotations out of my domain model later",
    "start": "349580",
    "end": "355430"
  },
  {
    "text": "on when we look at infrastructure of course we'll look at using fluent API configuration which will help with our",
    "start": "355430",
    "end": "360650"
  },
  {
    "text": "and laughing but for now we'll keep it clean one thing you can see there is",
    "start": "360650",
    "end": "366830"
  },
  {
    "text": "I've also got an auditable entity base class on this so this solution is jam-packed with examples auditable",
    "start": "366830",
    "end": "373310"
  },
  {
    "text": "entity is one of those just by attaching that base class to this entity will actually have a number of fields Auto",
    "start": "373310",
    "end": "379909"
  },
  {
    "text": "populated when Save Changes is fine including the user ID who create",
    "start": "379909",
    "end": "384980"
  },
  {
    "text": "to date time their credit these are ID who modified it and the date time that was last modified so one of the key",
    "start": "384980",
    "end": "394040"
  },
  {
    "text": "points I'd like to make is using value objects so I have a sample value object in here and it's an ID account and you",
    "start": "394040",
    "end": "400760"
  },
  {
    "text": "might be thinking well ad accounts pretty trivial why not just use a string and that's because it's not a string",
    "start": "400760",
    "end": "406460"
  },
  {
    "text": "it's um it has a specific logic that's associated with it and specific logic",
    "start": "406460",
    "end": "411530"
  },
  {
    "text": "that will have to write when we use it for example it's often common when you're using an ad account to grab the",
    "start": "411530",
    "end": "417560"
  },
  {
    "text": "domain part and to use that it's often common to also grab the username part and you also need to display it in its",
    "start": "417560",
    "end": "424220"
  },
  {
    "text": "normal format so this value object actually encapsulates all of that you can see it's got a factory which will",
    "start": "424220",
    "end": "430370"
  },
  {
    "text": "take in an account string split it up into a domain and name and it will throw an invalid exception if the format's not",
    "start": "430370",
    "end": "436820"
  },
  {
    "text": "supported and you might think well why bother throw in that exception and it's because it's a custom exception it's",
    "start": "436820",
    "end": "443060"
  },
  {
    "text": "something that we can understand ad account invalid exception is much easier",
    "start": "443060",
    "end": "448580"
  },
  {
    "text": "to understand and index out of range exception so you can see here it's",
    "start": "448580",
    "end": "454250"
  },
  {
    "text": "pretty simple it's just got a couple of properties domain and name and we have some unit tests associated with that",
    "start": "454250",
    "end": "459800"
  },
  {
    "text": "which make it really easy to understand how it works so looking in here we've got a test should have correct domain",
    "start": "459800",
    "end": "466250"
  },
  {
    "text": "and name and basically we take an account string we use the factory method to construct an account and then we",
    "start": "466250",
    "end": "472190"
  },
  {
    "text": "assert that those properties are correct so you can see that it's quite easy to use and it's going to be easy for new",
    "start": "472190",
    "end": "477470"
  },
  {
    "text": "developers to use as well they're not going to think how do I work with this ad account object it's a string what",
    "start": "477470",
    "end": "483410"
  },
  {
    "text": "logic do I have to write it's all built into it so then we have a two string method we check that it returns the",
    "start": "483410",
    "end": "488990"
  },
  {
    "text": "correct former we have an implicit conversion method which basically can take an ID account implicitly convert it",
    "start": "488990",
    "end": "495170"
  },
  {
    "text": "to a string it should be the correct account string we have an explicit conversion method where we can cast an",
    "start": "495170",
    "end": "500990"
  },
  {
    "text": "idea and their Cal string into an ID account test those results and we've got a quick test to ensure that if the",
    "start": "500990",
    "end": "507140"
  },
  {
    "text": "format's invalid such as it is here SSW jason moe backslash that it throws that",
    "start": "507140",
    "end": "512780"
  },
  {
    "text": "exception so this is really simple to use so you just have to think about when you're",
    "start": "512780",
    "end": "518710"
  },
  {
    "text": "defining your entities and you're utilizing primitive types is it really a primitive type or is it something more",
    "start": "518710",
    "end": "524740"
  },
  {
    "text": "complicated is a postcode just an integer or is it a complex system with rules that are associated with it that",
    "start": "524740",
    "end": "531400"
  },
  {
    "text": "you're going to have to program into your application and those rules which couldn't start a period in many places throughout your application because",
    "start": "531400",
    "end": "537640"
  },
  {
    "text": "there's not a central location so pretty simple one thing to point out is that",
    "start": "537640",
    "end": "543430"
  },
  {
    "text": "behind the scenes here there is a value object base class and that's basically about equality so two value objects are",
    "start": "543430",
    "end": "552310"
  },
  {
    "text": "the same if they share the same value what this does is get all of the values associated with the value object and",
    "start": "552310",
    "end": "558190"
  },
  {
    "text": "compare them so that implementation actually came from the Microsoft Docs so you can learn more about it here okay",
    "start": "558190",
    "end": "568330"
  },
  {
    "text": "one point that I like to make and this is a simple point it's just in your entities make sure you that you",
    "start": "568330",
    "end": "573640"
  },
  {
    "text": "initialize all collections and also set them to have a private set or just",
    "start": "573640",
    "end": "579160"
  },
  {
    "text": "remove the setter altogether it might seem like a trivial thing but it really helps and especially helps new",
    "start": "579160",
    "end": "584980"
  },
  {
    "text": "developers if you don't do that you'll be writing logic such as order order",
    "start": "584980",
    "end": "590440"
  },
  {
    "text": "details and you'll check if order dot order details equals null then order dot",
    "start": "590440",
    "end": "595720"
  },
  {
    "text": "order details equals a new collection and you'll have that logic start to appear all over the place wherever",
    "start": "595720",
    "end": "600880"
  },
  {
    "text": "you're dealing with order details by doing it this way it's always initialized it doesn't matter whether",
    "start": "600880",
    "end": "606040"
  },
  {
    "text": "you created a new order yourself or whether it came back from energy framework and new developers won't have",
    "start": "606040",
    "end": "611980"
  },
  {
    "text": "this problem they won't kind of run into the issue and if they do try to initialize it because it's got a private",
    "start": "611980",
    "end": "617920"
  },
  {
    "text": "setter they're going to see actually that doesn't work I can't actually do that that's not the way they do things",
    "start": "617920",
    "end": "624370"
  },
  {
    "text": "within these solution so we're actually teaching our developers how to work with this solution and how to fall into the",
    "start": "624370",
    "end": "630790"
  },
  {
    "text": "pit of success we make it easy to do the right thing and hard for them to do the wrong thing",
    "start": "630790",
    "end": "637350"
  },
  {
    "text": "one of the things that I've changed in this solution is I've added a let's see",
    "start": "641140",
    "end": "647510"
  },
  {
    "text": "well that's the Northwind one in this one I've added an interface for I date/time",
    "start": "647510",
    "end": "652610"
  },
  {
    "text": "so previously I had that in a common project as a cross-cutting concern but I just thought why have it there why not",
    "start": "652610",
    "end": "658459"
  },
  {
    "text": "move it to the very center of the design so that everywhere in the application it's easy to add and we don't actually",
    "start": "658459",
    "end": "664700"
  },
  {
    "text": "have a common project that has to be a dependency on every other project it's",
    "start": "664700",
    "end": "669769"
  },
  {
    "text": "just there it's ready to use and it's implemented within an infrastructure so",
    "start": "669769",
    "end": "678740"
  },
  {
    "text": "that's it for the domain lawyer key points I'd like to make there is avoid using data annotations there's a better",
    "start": "678740",
    "end": "683810"
  },
  {
    "text": "way we can keep our entities clean use value objects where appropriate just think is it really a primitive type or",
    "start": "683810",
    "end": "689930"
  },
  {
    "text": "is it something more complex than that initialize all collections and use private setters create custom domain",
    "start": "689930",
    "end": "696140"
  },
  {
    "text": "exceptions because they're a lot easier to debug and automatically track changes using auditable entity we're going to",
    "start": "696140",
    "end": "702410"
  },
  {
    "text": "take another look at that at the implementation once we get to the infrastructure layer oh and avoid",
    "start": "702410",
    "end": "709160"
  },
  {
    "text": "dependency on the system clock with I date/time and why would we want to do that well because the system clock is an",
    "start": "709160",
    "end": "715700"
  },
  {
    "text": "is infrastructure it's an external dependency and if we have logic that depends on say something like date/time",
    "start": "715700",
    "end": "721640"
  },
  {
    "text": "dot now and that logic is only going to run on a Tuesday we can only test that effectively on a Tuesday we'll have to",
    "start": "721640",
    "end": "727670"
  },
  {
    "text": "have an if statement or something that says hey is today Tuesday we can run this unit test otherwise we'll wait so by doing an I date time we can lock that",
    "start": "727670",
    "end": "734690"
  },
  {
    "text": "out and then we can make it to be whatever we want it is so now let's have",
    "start": "734690",
    "end": "739940"
  },
  {
    "text": "a look at the application layer so in the application layer we've got interfaces so those are the abstractions",
    "start": "739940",
    "end": "745220"
  },
  {
    "text": "and interfaces that are going to be implemented by the outside layers will see those will have models view models",
    "start": "745220",
    "end": "751339"
  },
  {
    "text": "and details will have logic commands and queries we're gonna look at that fella",
    "start": "751339",
    "end": "756440"
  },
  {
    "text": "data's and exceptions so first up I want to introduce a concept I'm sure a lot of",
    "start": "756440",
    "end": "762110"
  },
  {
    "text": "you are familiar with it CQRS the command query responsibility segregation pattern",
    "start": "762110",
    "end": "767420"
  },
  {
    "text": "so with this we actually separate our reads our queries from our rights our commands and this can result in",
    "start": "767420",
    "end": "773990"
  },
  {
    "text": "maximizing performance scalability and simplicity but for me it's all about the simplicity and the first time I tried it",
    "start": "773990",
    "end": "780380"
  },
  {
    "text": "I was amazed at how simple I was making able to make my system just by following this pattern it's easy to add new",
    "start": "780380",
    "end": "787940"
  },
  {
    "text": "features when were following this pattern because we can just add a new query or command so generally a feature",
    "start": "787940",
    "end": "793280"
  },
  {
    "text": "is going to relate to one query and/or one command and it's easy to maintain because our changes only affect a single",
    "start": "793280",
    "end": "800300"
  },
  {
    "text": "command or query we try to encapsulate everything that belongs to that command",
    "start": "800300",
    "end": "805550"
  },
  {
    "text": "or query into a single folder so that we when we go to that folder everything that we need to update that feature can",
    "start": "805550",
    "end": "812510"
  },
  {
    "text": "be changed in the one place we try to minimize sharing between those commands and queries so that we can avoid",
    "start": "812510",
    "end": "818060"
  },
  {
    "text": "breaking changes we do encourage code reuse just not when it's a different feature so if you like secure us your",
    "start": "818060",
    "end": "826880"
  },
  {
    "text": "log mediator perfect perfect partnership so with mediator we can do some simple",
    "start": "826880",
    "end": "833090"
  },
  {
    "text": "things such as defining commands and queries as requests so we use I request and I request handler but after that our",
    "start": "833090",
    "end": "841610"
  },
  {
    "text": "application layer just becomes a series of request response objects so everything in our application layer is",
    "start": "841610",
    "end": "847520"
  },
  {
    "text": "either a command or query we define them as requests and then we have this basic pipeline and that's the next point we",
    "start": "847520",
    "end": "854810"
  },
  {
    "text": "get the ability to attach additional behavior before and/or after each request such as logging validation",
    "start": "854810",
    "end": "861500"
  },
  {
    "text": "caching authorization and so on so I'm going to give you two examples in this presentation one to automatically",
    "start": "861500",
    "end": "867830"
  },
  {
    "text": "validate every request that comes into the system and another to automatically log every request that comes into the system so",
    "start": "867830",
    "end": "875510"
  },
  {
    "text": "let's have a look",
    "start": "875510",
    "end": "877990"
  },
  {
    "text": "the first point I want to make is using CQRS to simplify our system design so if",
    "start": "880980",
    "end": "886350"
  },
  {
    "text": "we come to this application lay here you can see and especially if you know Northwind traders I've tried to clean it",
    "start": "886350",
    "end": "892800"
  },
  {
    "text": "up significantly really what I want to see here is just feature folders and now I have just this common folder and that",
    "start": "892800",
    "end": "899310"
  },
  {
    "text": "common folder contains all of the infrastructure so we're going to look at these but right now I want to focus on",
    "start": "899310",
    "end": "904769"
  },
  {
    "text": "these feature folders so there's basically two features in this template there's a to-do items list and there's",
    "start": "904769",
    "end": "911430"
  },
  {
    "text": "the existing weather forcast lists which I've moved the logic from that from the controller into the backend into that",
    "start": "911430",
    "end": "916949"
  },
  {
    "text": "application layer let's have a look at the two items commands and crews so you",
    "start": "916949",
    "end": "922139"
  },
  {
    "text": "can see there that we have great clarity just from the folder structure if we want to modify the feature that gets to",
    "start": "922139",
    "end": "929010"
  },
  {
    "text": "to-do items file we know where to go everything that we need to modify that",
    "start": "929010",
    "end": "934860"
  },
  {
    "text": "feature is in there it's the same with create delete and update so it's very easy to navigate you",
    "start": "934860",
    "end": "940800"
  },
  {
    "text": "can see here I have a create to-do item command and it's responsibility is to create a new to-do item you can see I've",
    "start": "940800",
    "end": "947250"
  },
  {
    "text": "got to create to-do item command validator and that's because this is partly a DTO for everything that we need",
    "start": "947250",
    "end": "953579"
  },
  {
    "text": "to create it to-do item and we need a validator for that so the the behavior so the responsibility of the validator",
    "start": "953579",
    "end": "960209"
  },
  {
    "text": "of course is to validate to create to do it on command let's have a look at this",
    "start": "960209",
    "end": "965550"
  },
  {
    "text": "interesting num create to-do items file so it's got a get to-do items file query",
    "start": "965550",
    "end": "972260"
  },
  {
    "text": "and oh my god bingo and",
    "start": "972260",
    "end": "982120"
  },
  {
    "text": "see it's dependencies right up the top here it's dependent on I application dbcontext which is an interface for",
    "start": "982120",
    "end": "988060"
  },
  {
    "text": "working with our DB context is dependent on the mapper and the solutions using Auto mapper now and it's dependent on",
    "start": "988060",
    "end": "994660"
  },
  {
    "text": "this I CSV file builder so you can see it's dependencies are all on interfaces there's actually no dependencies on",
    "start": "994660",
    "end": "1001020"
  },
  {
    "text": "infrastructure even though what it's doing is something very much related to infrastructure if we come down here we",
    "start": "1001020",
    "end": "1007350"
  },
  {
    "text": "can see it's quite simple we grab the records from the database we do a projection which we'll look at shortly",
    "start": "1007350",
    "end": "1013580"
  },
  {
    "text": "we then call our infrastructure service file builder to build it to do items",
    "start": "1013580",
    "end": "1019020"
  },
  {
    "text": "file we pass it the records we construct a view model and we return that so really when this request is made what",
    "start": "1019020",
    "end": "1026760"
  },
  {
    "text": "they'll get back is a view model so you can see that we're really simplifying the design and not only that because",
    "start": "1026760",
    "end": "1034199"
  },
  {
    "text": "we're moving away from domain services in this implementation we actually have",
    "start": "1034199",
    "end": "1039540"
  },
  {
    "text": "a single file for each feature in our system rather than our domain service",
    "start": "1039540",
    "end": "1044640"
  },
  {
    "text": "that has a collection of kind of related features we just have a single file and",
    "start": "1044640",
    "end": "1049650"
  },
  {
    "text": "it's really easy to find it's really easy to modify and it's really easy to avoid breaking changes one of the things",
    "start": "1049650",
    "end": "1057840"
  },
  {
    "text": "that you may have noticed that I've done here is that I've actually nested the handler inside of the query and that",
    "start": "1057840",
    "end": "1065100"
  },
  {
    "text": "improves discoverability greatly when you developers start working with this solution they'll go to the to-do items",
    "start": "1065100",
    "end": "1073140"
  },
  {
    "text": "controller and they'll say I want to look at this get to-do items this query now if I had separate files it would be",
    "start": "1073140",
    "end": "1080160"
  },
  {
    "text": "easy for them to navigate to the query but they wouldn't see the handle or I want them to be able to see both so we",
    "start": "1080160",
    "end": "1086250"
  },
  {
    "text": "press f12 on that we go to the query we can see the handler and it's just a nice",
    "start": "1086250",
    "end": "1091260"
  },
  {
    "text": "experience for them they don't kind of have to even pick up the mouse to make the changes that they need to make now",
    "start": "1091260",
    "end": "1098460"
  },
  {
    "text": "we talked about how we're using mediator with the solution for our commands and Cruz and you can see that here so we're",
    "start": "1098460",
    "end": "1104490"
  },
  {
    "text": "defining this get to-do items list query as an I request a mediator I request and",
    "start": "1104490",
    "end": "1110130"
  },
  {
    "text": "it's going to return the type to do items list via so it's very simple to define that then",
    "start": "1110130",
    "end": "1116340"
  },
  {
    "text": "we have the request Handler and you can see here it's a request handler for a get to do items query which returns it",
    "start": "1116340",
    "end": "1123150"
  },
  {
    "text": "to do items list via so that's all of the kind of plumbing we need to do to define all of our commands and queries",
    "start": "1123150",
    "end": "1129810"
  },
  {
    "text": "as a request and with that we get some really wonderful benefits so we",
    "start": "1129810",
    "end": "1134850"
  },
  {
    "text": "essentially get this pipeline where we can add cross-cutting concerns so if you have a look in here I've added three",
    "start": "1134850",
    "end": "1141270"
  },
  {
    "text": "cross-cutting concerns I've got a request logger a request performance behavior and a request validation",
    "start": "1141270",
    "end": "1147450"
  },
  {
    "text": "behavior let's look at the logger so the",
    "start": "1147450",
    "end": "1153210"
  },
  {
    "text": "logger is responsible for logging every request that comes through the application layer so every command and",
    "start": "1153210",
    "end": "1159750"
  },
  {
    "text": "query that comes through the application layer will be logged it's using Donaire cause built-in logger and it takes in an",
    "start": "1159750",
    "end": "1167520"
  },
  {
    "text": "I current user service and an I identity service so this solutions using asp.net",
    "start": "1167520",
    "end": "1173610"
  },
  {
    "text": "core identity obviously I don't want a dependency on identity in my core so",
    "start": "1173610",
    "end": "1179070"
  },
  {
    "text": "I've made an interface so that I can have the implementation elsewhere you can see it's quite simple essentially it",
    "start": "1179070",
    "end": "1185640"
  },
  {
    "text": "gets the name of the request it gets the user ID from the current user service and then it gets the user name from the",
    "start": "1185640",
    "end": "1191820"
  },
  {
    "text": "identity service and then it logs all of that information out to add to the",
    "start": "1191820",
    "end": "1197100"
  },
  {
    "text": "dotnet core logger and depending on which provider you have associated with that is where the log will end up so",
    "start": "1197100",
    "end": "1203790"
  },
  {
    "text": "that's for every single request with a single a single file now I also have",
    "start": "1203790",
    "end": "1211160"
  },
  {
    "text": "performance logger so this for Qwest performance behavior is a little",
    "start": "1211160",
    "end": "1216880"
  },
  {
    "text": "bit different that the request logo was just running before each request this one runs during each request it's part",
    "start": "1216880",
    "end": "1223810"
  },
  {
    "text": "of the pipeline so we're injecting the same services but essentially we start a timer a system Diagnostics timer we wait",
    "start": "1223810",
    "end": "1234100"
  },
  {
    "text": "for the request to finish we get the response we stop the timer and we're saying if the elapsed milliseconds was",
    "start": "1234100",
    "end": "1239530"
  },
  {
    "text": "greater than 500 then we're going to log a warning to the database so it's so a",
    "start": "1239530",
    "end": "1244930"
  },
  {
    "text": "similar kind of effect but it shows how we can use a behavior to do something",
    "start": "1244930",
    "end": "1250180"
  },
  {
    "text": "before and/or after each request comes through the pipeline and the last one",
    "start": "1250180",
    "end": "1255790"
  },
  {
    "text": "that I've got is the request validation behavior but I better show you how validation works first so I've got a",
    "start": "1255790",
    "end": "1262420"
  },
  {
    "text": "very simple validator here using fluent validation now of course I could use data annotations and they're great for",
    "start": "1262420",
    "end": "1268750"
  },
  {
    "text": "simple validation scenarios but they don't work so well for complex validation scenarios if I wanted to do",
    "start": "1268750",
    "end": "1274570"
  },
  {
    "text": "Crossfield validation or if I wanted to interact with some service as part of that I can do that effectively with",
    "start": "1274570",
    "end": "1280510"
  },
  {
    "text": "fluent validation this one is quite simple it's basically saying that the",
    "start": "1280510",
    "end": "1285940"
  },
  {
    "text": "name property is a minimum a maximum length of 200 and it shouldn't be empty if we have a look at the Northwind",
    "start": "1285940",
    "end": "1292810"
  },
  {
    "text": "traders solution we've got a slightly more complex validator you can see here",
    "start": "1292810",
    "end": "1299320"
  },
  {
    "text": "we've got kind of standard simple rules but then down here we've got a rule for the postal code we basically say when",
    "start": "1299320",
    "end": "1305680"
  },
  {
    "text": "the country is Australia and the postal code the postal code must have four",
    "start": "1305680",
    "end": "1312850"
  },
  {
    "text": "digits and so if that fails we'll say the Australian post codes must have four digits and we've also got a rule for the",
    "start": "1312850",
    "end": "1319360"
  },
  {
    "text": "phone number so we say must have a Queensland landline so we're coming down here and we're actually looking at two",
    "start": "1319360",
    "end": "1325840"
  },
  {
    "text": "properties on on the model we're saying that the phone all the facts must start with us at our a7 or that will fail so",
    "start": "1325840",
    "end": "1333580"
  },
  {
    "text": "we can do complex more complex validation including validation on child collections as well and we can also",
    "start": "1333580",
    "end": "1340420"
  },
  {
    "text": "inject services with that we just have to be careful of the scope for those services",
    "start": "1340420",
    "end": "1346410"
  },
  {
    "text": "so coming back here we have these validators and you can see how they're associated with the command so basically",
    "start": "1346710",
    "end": "1354399"
  },
  {
    "text": "an abstract validator create create to-do item command now if we come to the request validation behavior then we just",
    "start": "1354399",
    "end": "1361749"
  },
  {
    "text": "have the single behavior to validate all requests that are coming into the system so you can see we essentially grab the",
    "start": "1361749",
    "end": "1368619"
  },
  {
    "text": "validation context we check to see if there's any validators and if there's any failures then we return a validation",
    "start": "1368619",
    "end": "1375610"
  },
  {
    "text": "exception later on when we look at the front-end we'll see how that's actually transit translated using a custom",
    "start": "1375610",
    "end": "1382360"
  },
  {
    "text": "exception bitl where to return that into a more normalized response for an api such as a bad request or are not found",
    "start": "1382360",
    "end": "1389470"
  },
  {
    "text": "those sorts of things okay next thing",
    "start": "1389470",
    "end": "1395049"
  },
  {
    "text": "that I wanted to show you is that I've implemented something that I'm really excited about and that's automap ah I",
    "start": "1395049",
    "end": "1401139"
  },
  {
    "text": "know not everyone's excited about automata but I've done it in a way where I think it's going to be a really great",
    "start": "1401139",
    "end": "1407769"
  },
  {
    "text": "experience and I think that I'm not going to run into too many troubles so the first thing that I did was to use",
    "start": "1407769",
    "end": "1414519"
  },
  {
    "text": "one of the new c-sharp eight features which is a default implementation for an",
    "start": "1414519",
    "end": "1419710"
  },
  {
    "text": "interface so you can see here I have an interface I'm at from type so I'm essentially able to say I map from to-do",
    "start": "1419710",
    "end": "1427690"
  },
  {
    "text": "item in this example and I can add that to my DTO and we'll have a look at that and then I have this mapping method and",
    "start": "1427690",
    "end": "1435309"
  },
  {
    "text": "I've got a default implementation for the interface and it basically says I'm gonna create a map or map from to-do",
    "start": "1435309",
    "end": "1444129"
  },
  {
    "text": "item to to-do item DTO and what that does is it creates just a",
    "start": "1444129",
    "end": "1449649"
  },
  {
    "text": "natural conventions based mapping for a mapper so if this mapping is very",
    "start": "1449649",
    "end": "1454690"
  },
  {
    "text": "straightforward and it's conventions based you won't need to do anything more let's have a look at that in the door in",
    "start": "1454690",
    "end": "1461679"
  },
  {
    "text": "the context of a to-do item so",
    "start": "1461679",
    "end": "1468140"
  },
  {
    "text": "you can see this mapping is straightforward it is convention base we don't need to do anything else that's",
    "start": "1468140",
    "end": "1474170"
  },
  {
    "text": "now mapped is recognized by Auto mapper and we can go ahead in our query and we",
    "start": "1474170",
    "end": "1484160"
  },
  {
    "text": "can just say project two and that's it we can also do nested projections in the",
    "start": "1484160",
    "end": "1490730"
  },
  {
    "text": "same way if we have a look at a more complex example on this one so you know",
    "start": "1490730",
    "end": "1499010"
  },
  {
    "text": "it's in employees so it in get employee",
    "start": "1499010",
    "end": "1507020"
  },
  {
    "text": "details it's actually not a convention space mapping there is some handling we have to do so all we had to do was",
    "start": "1507020",
    "end": "1513080"
  },
  {
    "text": "actually implement the interface so we add the mapping by profile we create the",
    "start": "1513080",
    "end": "1518210"
  },
  {
    "text": "map and then we then we add any any custom mappings that we'd like to have so you can see here they're for member",
    "start": "1518210",
    "end": "1525440"
  },
  {
    "text": "ID on the on the on the DTO which is right at the top here that's going to be",
    "start": "1525440",
    "end": "1532250"
  },
  {
    "text": "mapped from the employee ID and then you can see down the bottom here that were",
    "start": "1532250",
    "end": "1537260"
  },
  {
    "text": "mapping a child collection so we've got this collection of territories and we're mapping it from employee territories so",
    "start": "1537260",
    "end": "1544100"
  },
  {
    "text": "if we go to the employee territory DTO you can see it also implements eye map from and it specifies the mapping",
    "start": "1544100",
    "end": "1551600"
  },
  {
    "text": "profile now we don't actually have to do anything else because I've added a",
    "start": "1551600",
    "end": "1557900"
  },
  {
    "text": "little helper class to wire it all up automatically for us because now I can",
    "start": "1557900",
    "end": "1564049"
  },
  {
    "text": "set and forget so you can see the mapping profile will apply mappings from",
    "start": "1564049",
    "end": "1569090"
  },
  {
    "text": "assembly which is this method here and it essentially scans the assembly to find any types that implement I map from",
    "start": "1569090",
    "end": "1575450"
  },
  {
    "text": "and then it calls the mapping method it calls the mapping method either from the derive type if the mapping method has",
    "start": "1575450",
    "end": "1583340"
  },
  {
    "text": "been implemented or from the interface if it hasn't been implemented and that's it very simple so it's invoking method",
    "start": "1583340",
    "end": "1590929"
  },
  {
    "text": "mapping for each of those so we don't have to we can just add my map from and it's done to you",
    "start": "1590929",
    "end": "1596990"
  },
  {
    "text": "now there's one more thing that I've done which is really important for the workaround order mapper which is",
    "start": "1596990",
    "end": "1602850"
  },
  {
    "text": "to add some tests and the tests are really simple and they're gonna kind of",
    "start": "1602850",
    "end": "1608370"
  },
  {
    "text": "help me with 80% of the issues I'm likely to experience so you can see here",
    "start": "1608370",
    "end": "1614970"
  },
  {
    "text": "I've got the assert configuration as valid and that will basically check the mappings that I've created and make sure",
    "start": "1614970",
    "end": "1621660"
  },
  {
    "text": "that the properties in the DT OS have been correctly mapped and then I also have a list of the maps that I",
    "start": "1621660",
    "end": "1627930"
  },
  {
    "text": "expect to exist so I'm expecting there to be a map from a to-do item to to a to-do item DTO and to to-do item VM it's",
    "start": "1627930",
    "end": "1636480"
  },
  {
    "text": "my responsibility to put those in there if I do forget and obviously I'm gonna get a runtime error this is the first",
    "start": "1636480",
    "end": "1642450"
  },
  {
    "text": "place I'm gonna come I'm gonna add that in and then I'll be protected in the future so these two tests are just gonna",
    "start": "1642450",
    "end": "1648510"
  },
  {
    "text": "help in a big way I've found them to be very useful and I'm not running into many problems at all and as you can see",
    "start": "1648510",
    "end": "1654720"
  },
  {
    "text": "it's trivial for me to do projections I'm not writing projections except in the most complex of cases even with",
    "start": "1654720",
    "end": "1661350"
  },
  {
    "text": "nested projections so I'm very I'm very happy with that result one of the other",
    "start": "1661350",
    "end": "1667890"
  },
  {
    "text": "things that I've done in until in many of the layers is just to add a",
    "start": "1667890",
    "end": "1673200"
  },
  {
    "text": "dependency injection extension and so you can see with this extension here that were basically just configuring our",
    "start": "1673200",
    "end": "1680670"
  },
  {
    "text": "services so in our web project in startup we just go services dot add",
    "start": "1680670",
    "end": "1686400"
  },
  {
    "text": "application because it's an extension method and we're adding Auto mapper mediator and those couple of behaviors",
    "start": "1686400",
    "end": "1692370"
  },
  {
    "text": "that we've created and that just cuts down on the amount of code that's in start-up dot see us when we're wiring up",
    "start": "1692370",
    "end": "1698400"
  },
  {
    "text": "dependencies in there so it provides a nice clean approach and also means that kind of add the dependency injection",
    "start": "1698400",
    "end": "1703560"
  },
  {
    "text": "that were handling in application layer and infrastructure layer is actually in the layers",
    "start": "1703560",
    "end": "1709970"
  },
  {
    "text": "so see we've looked at the behaviors we've",
    "start": "1715940",
    "end": "1721070"
  },
  {
    "text": "got some customer exceptions so for example in the let they see in their",
    "start": "1721070",
    "end": "1730340"
  },
  {
    "text": "to-do items if we try to get a to-do item that doesn't exist it's rose they're not found exception and then in",
    "start": "1730340",
    "end": "1737360"
  },
  {
    "text": "our custom middleware that we've got on the front end it converts that into a 404 and returns that to the client we",
    "start": "1737360",
    "end": "1745760"
  },
  {
    "text": "have a lot of interfaces so you can see there's an eye application dbcontext will so we're trying to get good",
    "start": "1745760",
    "end": "1751220"
  },
  {
    "text": "separation of concerns from our infrastructure project there we've got",
    "start": "1751220",
    "end": "1756770"
  },
  {
    "text": "our CSV file builder which will have a look when we get to infrastructure our current user service and how identity",
    "start": "1756770",
    "end": "1762440"
  },
  {
    "text": "service I think that covers everything",
    "start": "1762440",
    "end": "1768050"
  },
  {
    "text": "I'd like to cover in that layer so let's go back okay so key points for the",
    "start": "1768050",
    "end": "1773720"
  },
  {
    "text": "application layer using CQRS plus mediator simplifies your overall design it gives us a single pipeline in which",
    "start": "1773720",
    "end": "1780710"
  },
  {
    "text": "we can implement a lot of the same behaviors that we'd like to implement as cross-cutting concerns fluent validation",
    "start": "1780710",
    "end": "1786770"
  },
  {
    "text": "is useful for all validation scenarios yes we could use data annotations for our simple validations but we can use",
    "start": "1786770",
    "end": "1793130"
  },
  {
    "text": "fluent validation for simple and complex validation scenarios automap are simplified our mapping and projections",
    "start": "1793130",
    "end": "1799190"
  },
  {
    "text": "and we've got some tests behind the scenes to help back that up and keep that working nicely and this is",
    "start": "1799190",
    "end": "1805180"
  },
  {
    "text": "application layer is independent of the infrastructure and data access concerns we've been very careful to use",
    "start": "1805180",
    "end": "1811100"
  },
  {
    "text": "interfaces and to keep the implementations outside of this project so next we're going to have a look at",
    "start": "1811100",
    "end": "1816920"
  },
  {
    "text": "the infrastructure layer so the infrastructure layer contains our persistence concerns how identity concerns we're using asp.net core",
    "start": "1816920",
    "end": "1823550"
  },
  {
    "text": "identity it's both things related to the file system perhaps the system clock and API clients essentially anything",
    "start": "1823550",
    "end": "1830630"
  },
  {
    "text": "external now in this solution I've used one project but there's nothing stopping you for a particularly complex",
    "start": "1830630",
    "end": "1837290"
  },
  {
    "text": "infrastructure component creating a second project and the way that I would do that is call it infrastructure dot",
    "start": "1837290",
    "end": "1843590"
  },
  {
    "text": "say identity if I had a lot of of identity work but for this solution and for a lot of my solutions",
    "start": "1843590",
    "end": "1849850"
  },
  {
    "text": "I can I can actually get by with just one project because we can separate things by folders as well it's not",
    "start": "1849850",
    "end": "1855669"
  },
  {
    "text": "necessary always to create lots and lots of projects so before we get into this",
    "start": "1855669",
    "end": "1860860"
  },
  {
    "text": "when we talk about persistence we often talk about the unit of work and repository patterns and I thought that",
    "start": "1860860",
    "end": "1866590"
  },
  {
    "text": "this was had been put to rest but then I saw a big argument flare up on Twitter the other day and some of the some of",
    "start": "1866590",
    "end": "1873159"
  },
  {
    "text": "the best people were just arguing you know it's we should still be using the repository pattern no we don't need it",
    "start": "1873159",
    "end": "1878350"
  },
  {
    "text": "it's not useful for anything so I want to show a hands who thinks we should implement these patterns okay about 20%",
    "start": "1878350",
    "end": "1887679"
  },
  {
    "text": "of the rounds who thinks we shouldn't awesome so look the thing is it's not",
    "start": "1887679",
    "end": "1895120"
  },
  {
    "text": "always the best choice because if core insulates your code from database changes it didn't itself is an",
    "start": "1895120",
    "end": "1900700"
  },
  {
    "text": "abstraction the DB context acts as a unit of work and the DB set acts as a",
    "start": "1900700",
    "end": "1905769"
  },
  {
    "text": "repository so if we're looking to get the primary advantages from those two patterns that is abstraction from our",
    "start": "1905769",
    "end": "1911769"
  },
  {
    "text": "database we don't need to do that if core already does that for us in the",
    "start": "1911769",
    "end": "1917649"
  },
  {
    "text": "past we would always implement these patterns because it was the only way we could affect effectively test logic that",
    "start": "1917649",
    "end": "1923649"
  },
  {
    "text": "depended on these things but we don't need to do that anymore because we have tools such as e of court in memory to do",
    "start": "1923649",
    "end": "1929860"
  },
  {
    "text": "that for us but I'm not saying you shouldn't use the unit of work in the repository pattern just as I'm not",
    "start": "1929860",
    "end": "1935500"
  },
  {
    "text": "saying you shouldn't use the singleton pattern I'm saying design patterns are there to solve a problem all you need to",
    "start": "1935500",
    "end": "1942130"
  },
  {
    "text": "know is what problem you're trying to solve and then implement the appropriate design pattern so for example if you",
    "start": "1942130",
    "end": "1948610"
  },
  {
    "text": "were creating a repository because you're only one repository at an aggregate root and you didn't want",
    "start": "1948610",
    "end": "1953679"
  },
  {
    "text": "access to entities at lower levels such as you wanted to provide your client",
    "start": "1953679",
    "end": "1960399"
  },
  {
    "text": "with access to order but not directly to order details if they want to manage order details then they go through their",
    "start": "1960399",
    "end": "1965590"
  },
  {
    "text": "repository that's a good reason to implement that pattern okay another reason why you might",
    "start": "1965590",
    "end": "1971409"
  },
  {
    "text": "implement the unit of work pattern in the repository pattern is because you wanted abstraction not from your",
    "start": "1971409",
    "end": "1977110"
  },
  {
    "text": "database but from entity my core you want an abstraction from your chosen ORM that's a good reason to",
    "start": "1977110",
    "end": "1983950"
  },
  {
    "text": "implement that pattern if that's important to you for the system that you're designing so it's a design",
    "start": "1983950",
    "end": "1989200"
  },
  {
    "text": "pattern use it to solve the problem that you're having what did the experts thing",
    "start": "1989200",
    "end": "1995140"
  },
  {
    "text": "this is interesting so this is Jimmy Bogart he's at this conference probably not him my talk hopefully and he thinks",
    "start": "1995140",
    "end": "2002039"
  },
  {
    "text": "I'm over repositories and definitely over abstracting your data layer so he's against it and then we have Steve Smith",
    "start": "2002039",
    "end": "2009809"
  },
  {
    "text": "and he says no you don't need a repository but there are many benefits and you should consider it and he's",
    "start": "2009809",
    "end": "2015510"
  },
  {
    "text": "being diplomatic if you've heard Steve talked about repositories he loves them and I think if you went to him and said",
    "start": "2015510",
    "end": "2021210"
  },
  {
    "text": "hey Steve I'm thinking about not using a repository for this he'll tell you why you should and he has excellent reasons",
    "start": "2021210",
    "end": "2027270"
  },
  {
    "text": "for doing so and then we have John Smith and he says no the repository slash unit of work pattern isn't useful with EF",
    "start": "2027270",
    "end": "2034020"
  },
  {
    "text": "core so even the experts agree but I think keep it simple remember it's a design pattern it's",
    "start": "2034020",
    "end": "2039809"
  },
  {
    "text": "there to solve a problem just make sure you know the problem that you're trying to solve so let's have a look at the",
    "start": "2039809",
    "end": "2045630"
  },
  {
    "text": "infrastructure layer",
    "start": "2045630",
    "end": "2048260"
  },
  {
    "text": "have a mouse cursor again and its back wonderful okay so you can see in the",
    "start": "2053340",
    "end": "2063750"
  },
  {
    "text": "infrastructure layer I've separated kind of the features that are built into it by files are sorry by folders so you can",
    "start": "2063750",
    "end": "2070080"
  },
  {
    "text": "see I have a files folder and that's where I've put my CSV file builder along with some maps we'll look at that I've",
    "start": "2070080",
    "end": "2076649"
  },
  {
    "text": "got my ant identity folder and those are the things that I'm using that are related to identity I have my",
    "start": "2076650",
    "end": "2082200"
  },
  {
    "text": "persistence folder which is where all of my EF course topper stored and I have my services folder which is just my",
    "start": "2082200",
    "end": "2088409"
  },
  {
    "text": "date/time service let's have a look at the persistence folder first because I",
    "start": "2088410",
    "end": "2094200"
  },
  {
    "text": "want to come back to configuration identities so I said you know we're not going to use data annotations but we are",
    "start": "2094200",
    "end": "2100410"
  },
  {
    "text": "going to use fluent API configuration so you can see here I've got a very simple example where we're actually just saying",
    "start": "2100410",
    "end": "2106860"
  },
  {
    "text": "hey this name has a max length of 200 and it is required and all that's going to do is construct instruct our on how",
    "start": "2106860",
    "end": "2114390"
  },
  {
    "text": "to map that to the relational database if we're using a relational database there's some more complex examples over",
    "start": "2114390",
    "end": "2120390"
  },
  {
    "text": "in the Northwind solution so if I bring up Y the configurations there this one",
    "start": "2120390",
    "end": "2130410"
  },
  {
    "text": "that's not very complex this one so you",
    "start": "2130410",
    "end": "2136410"
  },
  {
    "text": "can see that we're configuring a lot more properties most of it is relatively simple some of it is because of the schema that",
    "start": "2136410",
    "end": "2142620"
  },
  {
    "text": "was designed for energy frame sorry for Northwind traders it's a little bit non-standard but you can see that with",
    "start": "2142620",
    "end": "2149010"
  },
  {
    "text": "this fluent configuration we're keeping it out of our domain and out of our entities and there's actually a lot of",
    "start": "2149010",
    "end": "2155610"
  },
  {
    "text": "things that you can't do with data annotations when it comes time to configure in your R and so you have to use plugin configuration anyway so why",
    "start": "2155610",
    "end": "2162690"
  },
  {
    "text": "not have it all in the same place now when you when you're using those configurations there's a handy little",
    "start": "2162690",
    "end": "2168990"
  },
  {
    "text": "method which you can use to apply all configurations from your assembly and you can see there it's just applied",
    "start": "2168990",
    "end": "2174690"
  },
  {
    "text": "configurations from assembly and we're saying hey everything from disassembly",
    "start": "2174690",
    "end": "2180890"
  },
  {
    "text": "okay so one thing that I wanted to show you in relation to the DB context that",
    "start": "2184490",
    "end": "2192960"
  },
  {
    "text": "I've created is the Save Changes method it's actually responsible for implementing the auditable entity",
    "start": "2192960",
    "end": "2199650"
  },
  {
    "text": "feature and it's on Save Changes so you can see here is quite simple but you can extend this example to be whatever it is",
    "start": "2199650",
    "end": "2206490"
  },
  {
    "text": "that you want if you want to track value changes this is where you'll come to and start to implement that so you can see",
    "start": "2206490",
    "end": "2212040"
  },
  {
    "text": "on Save Changes I think it basically gets any entries that are implementing auditable entity if the entity state is",
    "start": "2212040",
    "end": "2218670"
  },
  {
    "text": "added which means we're going to insert it into the database it goes ahead and sets the created by the use of idea for",
    "start": "2218670",
    "end": "2224280"
  },
  {
    "text": "who created this entity and it created the date/time now so this is coming from",
    "start": "2224280",
    "end": "2229350"
  },
  {
    "text": "our service which is backed by an infrastructure implementation same thing for modified we grab the user ID assign",
    "start": "2229350",
    "end": "2236370"
  },
  {
    "text": "it to last modified by and the date time now and assign it to last modified and then we save our changes so that's a",
    "start": "2236370",
    "end": "2242370"
  },
  {
    "text": "very nice way to implement one point to",
    "start": "2242370",
    "end": "2247410"
  },
  {
    "text": "note here that could catch you out in in the past when we overrode on model",
    "start": "2247410",
    "end": "2253770"
  },
  {
    "text": "creating we could actually leave out this based on our model creating because it in the.net core code it didn't",
    "start": "2253770",
    "end": "2259320"
  },
  {
    "text": "actually do anything well now it does with with asp.net core identity if you're using identity that line is",
    "start": "2259320",
    "end": "2265410"
  },
  {
    "text": "required and if you leave it out it will break I",
    "start": "2265410",
    "end": "2269570"
  },
  {
    "text": "I'll show you some of the work that I've been doing around identity sub viously with the implementation of asp.net core",
    "start": "2280010",
    "end": "2286880"
  },
  {
    "text": "identity in this we want to be able to access some of those identity services in our application layer so I've",
    "start": "2286880",
    "end": "2293660"
  },
  {
    "text": "implemented a few you've seen get users by get user name I think being used in some of those behaviors",
    "start": "2293660",
    "end": "2300440"
  },
  {
    "text": "I've also implemented a create user a sink and a delete user I think what's",
    "start": "2300440",
    "end": "2305810"
  },
  {
    "text": "important about this is not really what it's doing it's the fact that we've implemented this which is an application layer interface and we can now use this",
    "start": "2305810",
    "end": "2313640"
  },
  {
    "text": "logic in our commands and queries so we can continue to build this out we can start to work with user roles and claims",
    "start": "2313640",
    "end": "2320240"
  },
  {
    "text": "and all that sort of thing we can even separate this into a couple of services whatever it is that our needs are but",
    "start": "2320240",
    "end": "2326510"
  },
  {
    "text": "this shows how you can get started doing that it was one of the most requested features for Northwind traders was just",
    "start": "2326510",
    "end": "2332840"
  },
  {
    "text": "to see kind of that identity experience and how that would flow through to that application layer and how users could",
    "start": "2332840",
    "end": "2338270"
  },
  {
    "text": "interact with it something that I have",
    "start": "2338270",
    "end": "2344869"
  },
  {
    "text": "to do commonly on projects is to generate CSV files and in the past I would use file helpers it's a great tool",
    "start": "2344869",
    "end": "2352100"
  },
  {
    "text": "but unfortunately I couldn't get it to work nicely within this solution architecture because we have to decorate",
    "start": "2352100",
    "end": "2357470"
  },
  {
    "text": "our DT OS with a lot of attributes or so related to the creation of a CSV file so",
    "start": "2357470",
    "end": "2363020"
  },
  {
    "text": "I found a new tool which is very popular tool called CSV helper and the wonderful",
    "start": "2363020",
    "end": "2368840"
  },
  {
    "text": "thing about this is it allows us to create file maps inside of our infrastructure to define how these",
    "start": "2368840",
    "end": "2375109"
  },
  {
    "text": "things will be implemented within the CSV file so we have this DTO which belongs to the application layer",
    "start": "2375109",
    "end": "2381619"
  },
  {
    "text": "and we have this map which will define how it's going to end up in the CSV file",
    "start": "2381619",
    "end": "2386890"
  },
  {
    "text": "so with that implementation it's very clean we can just build a CSV file builder which I still have to make",
    "start": "2386890",
    "end": "2393200"
  },
  {
    "text": "generic and we can basically take in a bunch of records from an application layer write it out to CSV it'll it'll",
    "start": "2393200",
    "end": "2400640"
  },
  {
    "text": "use the maps and then return the memory stream so if you remember we were using that in this query and then we're",
    "start": "2400640",
    "end": "2407930"
  },
  {
    "text": "returning the results back to the client so the dependency injection",
    "start": "2407930",
    "end": "2415819"
  },
  {
    "text": "and this one is sorry an infrastructure is interesting to just a little bit just",
    "start": "2415819",
    "end": "2421549"
  },
  {
    "text": "because I've passed over the configuration and the web host",
    "start": "2421549",
    "end": "2426769"
  },
  {
    "text": "environment okay so I've passed that over from startup and so that allows me to just configure this this layer with with a",
    "start": "2426769",
    "end": "2433789"
  },
  {
    "text": "few more options so you can see I'm at in the DB context and so grabbing the",
    "start": "2433789",
    "end": "2439150"
  },
  {
    "text": "connection string but I'm also looking at the environment to see how I should configure identity server there's a lot",
    "start": "2439150",
    "end": "2445609"
  },
  {
    "text": "of tests associated with this project and now that we're using identity server we've have to have authenticated tests",
    "start": "2445609",
    "end": "2450980"
  },
  {
    "text": "and so if it's in the test environment we add a test client and you can see",
    "start": "2450980",
    "end": "2457760"
  },
  {
    "text": "we're basically enabling the resource owner flow and we add a test user so",
    "start": "2457760",
    "end": "2462769"
  },
  {
    "text": "that makes our testing very easy if it's not then we just are wiring up these services we don't worry up the date time",
    "start": "2462769",
    "end": "2470119"
  },
  {
    "text": "service the identity service or the CSV file builder service in tests we have just mocks that we're using for that",
    "start": "2470119",
    "end": "2476420"
  },
  {
    "text": "because there's only so much we want to test so the important thing and I think",
    "start": "2476420",
    "end": "2485000"
  },
  {
    "text": "I've made this point is that no layers should depend on infrastructure and and",
    "start": "2485000",
    "end": "2490640"
  },
  {
    "text": "that can be a little bit confusing at first but we have to remember that infrastructure is there just to provide",
    "start": "2490640",
    "end": "2496309"
  },
  {
    "text": "an implementation now having said that the web project does have a dependency on infrastructure that's for dependency",
    "start": "2496309",
    "end": "2503150"
  },
  {
    "text": "injection only so we should only see the reference to infrastructure in the startup dot CS so if you see it outside",
    "start": "2503150",
    "end": "2508730"
  },
  {
    "text": "of startup don't see us in a controller you know that's a red flag hopefully you'll pick that up as part of a code",
    "start": "2508730",
    "end": "2513829"
  },
  {
    "text": "review now you can implement more complex behavior such as assembly scanning to wire up your dependency",
    "start": "2513829",
    "end": "2519200"
  },
  {
    "text": "injection but I find that to be a little bit over the top we have code reviews we",
    "start": "2519200",
    "end": "2525140"
  },
  {
    "text": "have pull requests so I tend to pick those things up",
    "start": "2525140",
    "end": "2529269"
  },
  {
    "text": "all right so key points there infrastructure is independent of the",
    "start": "2534000",
    "end": "2539760"
  },
  {
    "text": "database I didn't actually show that let me just show that quickly so we know and",
    "start": "2539760",
    "end": "2544830"
  },
  {
    "text": "love energy framework or at least a lot of us so you can see that with energy framework or we have these providers so",
    "start": "2544830",
    "end": "2552810"
  },
  {
    "text": "you can see we find it there we go else is gone again",
    "start": "2552810",
    "end": "2558650"
  },
  {
    "text": "sequel server so it's that provider reference that allows us to remain independent of the database so energy",
    "start": "2558650",
    "end": "2565470"
  },
  {
    "text": "framework core is one big abstraction and we use providers to define which",
    "start": "2565470",
    "end": "2570990"
  },
  {
    "text": "database we'll be interacting with we can switch that out for Postgres and the solution will still work we just have to",
    "start": "2570990",
    "end": "2576180"
  },
  {
    "text": "rebuild our migrations okay so we prefer to use fluent API configuration over",
    "start": "2576180",
    "end": "2582420"
  },
  {
    "text": "data annotations we can do more with fluent API configuration we provoke conventions over configuration so I",
    "start": "2582420",
    "end": "2588599"
  },
  {
    "text": "didn't touch on that but that's an important point when you're working with these convention based frameworks such as Auto",
    "start": "2588599",
    "end": "2593670"
  },
  {
    "text": "mapper and such as EF core it's really important to know the convention so take the time to learn them that just means",
    "start": "2593670",
    "end": "2599849"
  },
  {
    "text": "reading the documentation because these conventions allow us to write less code and allow us to write code that's",
    "start": "2599849",
    "end": "2605940"
  },
  {
    "text": "simpler easier to understand but if you don't know the conventions then you're going to end up writing things that you",
    "start": "2605940",
    "end": "2611730"
  },
  {
    "text": "don't need to okay so it's important so we automatically apply all entity type",
    "start": "2611730",
    "end": "2616950"
  },
  {
    "text": "configurations in our DB contacts using a little helper method and we can know that no layers depend on the",
    "start": "2616950",
    "end": "2621990"
  },
  {
    "text": "infrastructure layer for example the presentation layer we want to keep that logic out and within the core of our",
    "start": "2621990",
    "end": "2629130"
  },
  {
    "text": "solution so next we're going to have a look at the presentation layer so in the",
    "start": "2629130",
    "end": "2634830"
  },
  {
    "text": "presentation layer is basically our client we could be we can have a sparkline this one's angular can be a",
    "start": "2634830",
    "end": "2640619"
  },
  {
    "text": "web api razor pages MVC web forms blazer whatever we want it's it's not going to",
    "start": "2640619",
    "end": "2646470"
  },
  {
    "text": "be too hard to change our front-end now because we have a really nicely defined core it's dealing with really",
    "start": "2646470",
    "end": "2653250"
  },
  {
    "text": "well-defined view models and so all of our logics inside of there and not in the front end",
    "start": "2653250",
    "end": "2658819"
  },
  {
    "text": "let's have a look Mouse yes great so the",
    "start": "2658819",
    "end": "2665479"
  },
  {
    "text": "first thing that I want to touch on is that controllers should not contain any logic and we're gonna have a look at the",
    "start": "2665479",
    "end": "2671419"
  },
  {
    "text": "history of the Northwind products controller for that so you can see this",
    "start": "2671419",
    "end": "2676669"
  },
  {
    "text": "products controller in the beginning was a very typical example of how we build controllers would go ahead and inject",
    "start": "2676669",
    "end": "2683390"
  },
  {
    "text": "the context we would return entities and we had lots of logic in there and the",
    "start": "2683390",
    "end": "2689869"
  },
  {
    "text": "reason that we had logic logic in there was because there was nowhere else to put it we had taken a very high-level",
    "start": "2689869",
    "end": "2696469"
  },
  {
    "text": "concepts such as the controller on the outer edges of our application and injected something that was in the",
    "start": "2696469",
    "end": "2702229"
  },
  {
    "text": "lowest levels of our application the DB context where else are we going to put our logic so there's kind of a trap",
    "start": "2702229",
    "end": "2708019"
  },
  {
    "text": "right from the beginning of course we know returning entities from the controller was just asking for trouble circular references security issues all",
    "start": "2708019",
    "end": "2715699"
  },
  {
    "text": "those things so this wasn't a very good state okay so let's",
    "start": "2715699",
    "end": "2727340"
  },
  {
    "text": "look we very quickly did an update and we were working with commands and",
    "start": "2727340",
    "end": "2733130"
  },
  {
    "text": "queries at this point and you might think well that's not much of a changes well you probably think actually that's crazy James look at all those things",
    "start": "2733130",
    "end": "2739100"
  },
  {
    "text": "being injected but it was still good we can see what this controller depended on",
    "start": "2739100",
    "end": "2744560"
  },
  {
    "text": "in order to operate sure that's their never noticed that before my god I've",
    "start": "2744560",
    "end": "2752330"
  },
  {
    "text": "got a look that's weird it's not being used never noticed it all",
    "start": "2752330",
    "end": "2758150"
  },
  {
    "text": "right but regardless they have our queries and our commands they're being injected and our our actions have become",
    "start": "2758150",
    "end": "2765620"
  },
  {
    "text": "simple they're trivial we're also returning GTRs without returning entities anymore and look they've become",
    "start": "2765620",
    "end": "2771080"
  },
  {
    "text": "one or maximum two lines of code so just that change just implementing CQRS has",
    "start": "2771080",
    "end": "2777980"
  },
  {
    "text": "made this solution so much simpler and that's why I say yeah we love CQRS it's all about performance and simplicity and",
    "start": "2777980",
    "end": "2784610"
  },
  {
    "text": "scalability but really for me its simplicity and this is this is a reflection of that so much switched over",
    "start": "2784610",
    "end": "2794120"
  },
  {
    "text": "to look at the to do items controller in clean architecture now because it's",
    "start": "2794120",
    "end": "2799640"
  },
  {
    "text": "reflective of where we're kind of at now",
    "start": "2799640",
    "end": "2804549"
  },
  {
    "text": "okay so the two items controller is very simple let go there we go so you can see",
    "start": "2809140",
    "end": "2821390"
  },
  {
    "text": "it's actually implementing a base API controller so that's something that's in this solution and it's responsibility at",
    "start": "2821390",
    "end": "2826820"
  },
  {
    "text": "the moment is just basically to decorate with the API controller a default route and then to inject mediator by property",
    "start": "2826820",
    "end": "2834380"
  },
  {
    "text": "injection so you can see here it just essentially requests the mediator service so then we know we don't need to",
    "start": "2834380",
    "end": "2839840"
  },
  {
    "text": "do that for each controller so you can see here in to get all method we're basically just sending a mediator",
    "start": "2839840",
    "end": "2846170"
  },
  {
    "text": "request so queries and commands are requests and everything goes through the mediator pipeline so you can see how",
    "start": "2846170",
    "end": "2853340"
  },
  {
    "text": "simple things have become and that's it that's how we're building these today and that's how you build it if you",
    "start": "2853340",
    "end": "2859180"
  },
  {
    "text": "in this solution so you can also see that for each of the queries I'm taking",
    "start": "2859180",
    "end": "2866290"
  },
  {
    "text": "the time to create well-defined view models and what I want is for my client to request something such as a to-do",
    "start": "2866290",
    "end": "2873339"
  },
  {
    "text": "item and to receive everything that they need to render that view I don't want",
    "start": "2873339",
    "end": "2878920"
  },
  {
    "text": "them to make additional API calls to receive more information I want that view to be very well defined",
    "start": "2878920",
    "end": "2884890"
  },
  {
    "text": "and provide everything the client needs and by the same way I also want to be able to test that view you know if a",
    "start": "2884890",
    "end": "2891579"
  },
  {
    "text": "buttons meant to be disabled I want to be able to test the view to see if the button should be disabled so I can have",
    "start": "2891579",
    "end": "2897309"
  },
  {
    "text": "properties like allow create and that on the front-end that can be a silly binding just to a button but on the",
    "start": "2897309",
    "end": "2903460"
  },
  {
    "text": "backend that allows me to write a unit test to see how the how the view is going to respond and so we're even",
    "start": "2903460",
    "end": "2908800"
  },
  {
    "text": "encapsulating that kind of logic inside of core now one of my absolute favorite",
    "start": "2908800",
    "end": "2918010"
  },
  {
    "text": "things with this solution is the open API integration so we might launch this",
    "start": "2918010",
    "end": "2923950"
  },
  {
    "text": "solution so we can have a look at that so from the web UI project all we have",
    "start": "2923950",
    "end": "2929049"
  },
  {
    "text": "to do is go dot net run now I've currently got it configured so that it starts the angular so angular CLI server",
    "start": "2929049",
    "end": "2937359"
  },
  {
    "text": "at the same time I've got a blog the last blog post I did was at NDC Sydney",
    "start": "2937359",
    "end": "2942430"
  },
  {
    "text": "last year and there's a blog post that tells you all about that behavior and why you might want to disable it so it",
    "start": "2942430",
    "end": "2948609"
  },
  {
    "text": "might be worth checking out so when we start this it's going to launch the backend Web API and it's going to launch",
    "start": "2948609",
    "end": "2954730"
  },
  {
    "text": "the front-end angular client while that's happening I want to show you a couple of pieces you can see in WWE",
    "start": "2954730",
    "end": "2962619"
  },
  {
    "text": "I've got a specification file now that's being automatically generated by n swag",
    "start": "2962619",
    "end": "2968049"
  },
  {
    "text": "who's heard of n swag awesome almost 50% of the room so n swag is an",
    "start": "2968049",
    "end": "2974260"
  },
  {
    "text": "open API tool chain it allows you to generate open API specifications and it also allows you to generate clients",
    "start": "2974260",
    "end": "2980890"
  },
  {
    "text": "based off those specifications so I have n swag actually generating the specification here and putting it into",
    "start": "2980890",
    "end": "2988030"
  },
  {
    "text": "the WWE root for now using that I'm able to generate an",
    "start": "2988030",
    "end": "2993519"
  },
  {
    "text": "angular client for my front-end and if I come in here into app into here you can",
    "start": "2993519",
    "end": "3002759"
  },
  {
    "text": "see the client so this is a typescript client for interacting with this API and",
    "start": "3002759",
    "end": "3008880"
  },
  {
    "text": "so I don't have to write this code anymore and what's more all of those well defined view models that I worked",
    "start": "3008880",
    "end": "3014999"
  },
  {
    "text": "so hard to create including the DT OS are also generated for me so when I go to interact with my",
    "start": "3014999",
    "end": "3021720"
  },
  {
    "text": "API from the front end if I have a look at say my to do component all I actually",
    "start": "3021720",
    "end": "3029099"
  },
  {
    "text": "have to do is inject the client that I want to work with and start working with",
    "start": "3029099",
    "end": "3034410"
  },
  {
    "text": "it so you can see this is me getting all of the to-do items this is me creating a",
    "start": "3034410",
    "end": "3039779"
  },
  {
    "text": "new to-do item I didn't write any of that code I didn't write this view model on the client it's all being generated",
    "start": "3039779",
    "end": "3045630"
  },
  {
    "text": "from the backend so with something like an swag we're actually bridging the gap",
    "start": "3045630",
    "end": "3050700"
  },
  {
    "text": "between the back end and the front end the source of truth remains our back end it remains the core and we generate what",
    "start": "3050700",
    "end": "3056880"
  },
  {
    "text": "we need for the front end and what's more when it changes I have n swag",
    "start": "3056880",
    "end": "3062119"
  },
  {
    "text": "automatically rebuilding all of that so if you have a look in the web UI and you",
    "start": "3062119",
    "end": "3069180"
  },
  {
    "text": "can see here I've got two references and so I goes peanut core and an swag",
    "start": "3069180",
    "end": "3074700"
  },
  {
    "text": "msbuild msbuild with n swag actually has this task so when I build the web UI",
    "start": "3074700",
    "end": "3082229"
  },
  {
    "text": "project it runs an swag and an swag will pick up a configuration file that I've generated",
    "start": "3082229",
    "end": "3088950"
  },
  {
    "text": "and it will build a new specification and put it in WWE route and we'll build a new typescript client and put it in my",
    "start": "3088950",
    "end": "3095190"
  },
  {
    "text": "angular app and I'm good to go like it's set and forget so not only do we have ensberg sorry open API bridging",
    "start": "3095190",
    "end": "3102089"
  },
  {
    "text": "the gap between the front end in the back end we've also created an automation process with ends work where",
    "start": "3102089",
    "end": "3107849"
  },
  {
    "text": "we never have to look at it again unless it breaks it does sometimes but that's okay we can fix it",
    "start": "3107849",
    "end": "3114470"
  },
  {
    "text": "so let's have a look at that configuration I've done a little bit",
    "start": "3114470",
    "end": "3121310"
  },
  {
    "text": "further so there's our inspired configuration I didn't have to build",
    "start": "3121310",
    "end": "3126349"
  },
  {
    "text": "that myself because ensberg has a studio which is very good at building configurations unfortunately it's only",
    "start": "3126349",
    "end": "3132800"
  },
  {
    "text": "for Windows but I understand a lot of Mac users have Windows on the flip side so that's okay",
    "start": "3132800",
    "end": "3139849"
  },
  {
    "text": "let's see okay so we've got our application running now so that's the",
    "start": "3139849",
    "end": "3151040"
  },
  {
    "text": "angular but we don't want to go to the angular one we want to go to the asp.net core one because it's being hosted by",
    "start": "3151040",
    "end": "3157190"
  },
  {
    "text": "kestrel all right now so what's that do",
    "start": "3157190",
    "end": "3177680"
  },
  {
    "text": "that time hey Stevie let's just let's let it handle it then oh good thank you JK okay so you can see",
    "start": "3177680",
    "end": "3187400"
  },
  {
    "text": "this is the sample app and you can see it's got the basic things in the template also my last to-do list so get",
    "start": "3187400",
    "end": "3194720"
  },
  {
    "text": "things done it's going to ask me to log in which is great I'll go ahead and log in there's my to-do list I",
    "start": "3194720",
    "end": "3201829"
  },
  {
    "text": "you might notice on the entity that I defined the key instead of being an int",
    "start": "3201829",
    "end": "3206900"
  },
  {
    "text": "I've defined it as a long because I feel like I have so much to do that to billions gonna be a little bit of a",
    "start": "3206900",
    "end": "3212119"
  },
  {
    "text": "limitation so let's get started so I can add items I can delete items and I can",
    "start": "3212119",
    "end": "3219470"
  },
  {
    "text": "mark them as complete and remember when I showed you the code behind that that",
    "start": "3219470",
    "end": "3224510"
  },
  {
    "text": "client was all generated all the details were all generated and so that's the kind of experience and this is what",
    "start": "3224510",
    "end": "3230089"
  },
  {
    "text": "we're using for real projects as well now behind the scenes we have that open",
    "start": "3230089",
    "end": "3236630"
  },
  {
    "text": "API happening right within swag we also are exposing swagger UI and we've we've provided a mechanism which",
    "start": "3236630",
    "end": "3243740"
  },
  {
    "text": "you can supply the bearer token so that we can try out those offender request so for those of you don't know",
    "start": "3243740",
    "end": "3249230"
  },
  {
    "text": "swagger UI is really great it reads the specification it generates an interface",
    "start": "3249230",
    "end": "3254510"
  },
  {
    "text": "and allows us to learn about the API and it also allows us to interact with the API so it's great if you learn in a new",
    "start": "3254510",
    "end": "3261020"
  },
  {
    "text": "API and it's also great for your developers who need to test something out so you see here there's all about",
    "start": "3261020",
    "end": "3266810"
  },
  {
    "text": "different actions that are available our operations that are available for our to-do items and here's our weather",
    "start": "3266810",
    "end": "3272270"
  },
  {
    "text": "forecast I better grab a token so it so that I can show you how that works so if I grab that tea paste that in I'm",
    "start": "3272270",
    "end": "3282320"
  },
  {
    "text": "gonna get a token by going that start I have a look at a network request token",
    "start": "3282320",
    "end": "3287660"
  },
  {
    "text": "it'll be here so you know with this template that Microsoft's provided that integrates identity we don't have to do",
    "start": "3287660",
    "end": "3295100"
  },
  {
    "text": "as much work they've really I think it was mostly Dominic and Brock who",
    "start": "3295100",
    "end": "3301210"
  },
  {
    "text": "contributed to this identity servers built in and behind the scenes in in the",
    "start": "3301210",
    "end": "3306950"
  },
  {
    "text": "angular implementation the services there's interceptors there's guards everything we basically need to get",
    "start": "3306950",
    "end": "3313040"
  },
  {
    "text": "started anyway I want to grab this token so I can show you making our authentic",
    "start": "3313040",
    "end": "3318110"
  },
  {
    "text": "ated requests so I'll grab that I click authorize I can paste that in and I just",
    "start": "3318110",
    "end": "3323600"
  },
  {
    "text": "need to trim off that first part so we need everything including bearer and onwards to click authorize you just hide",
    "start": "3323600",
    "end": "3330500"
  },
  {
    "text": "that and now we can make requests so we go try it out execute and we get back",
    "start": "3330500",
    "end": "3335660"
  },
  {
    "text": "our results and that's good and we can do that like we can create items we can delete items we can update items it's",
    "start": "3335660",
    "end": "3342260"
  },
  {
    "text": "it's a really useful tool and and you can see here you know it's not it's not a backdoor by any means we still have to",
    "start": "3342260",
    "end": "3348260"
  },
  {
    "text": "be off then okay do we still have to pass through a token but it does allow us to troubleshoot and debug and learn",
    "start": "3348260",
    "end": "3354080"
  },
  {
    "text": "about the API which is wonderful so I promise to show you the exception",
    "start": "3354080",
    "end": "3359840"
  },
  {
    "text": "middleware so let me show you that now",
    "start": "3359840",
    "end": "3363280"
  },
  {
    "text": "there we go so it's very simple something - something definitely to build on so I've",
    "start": "3366010",
    "end": "3372279"
  },
  {
    "text": "got a customer exception middleware down the bottom I have an extension for I application builder so if in within",
    "start": "3372279",
    "end": "3378250"
  },
  {
    "text": "startup ICS we just go use custom exception handler I'll show you that",
    "start": "3378250",
    "end": "3383410"
  },
  {
    "text": "really quickly there you go so just like that so that wise it in and then up the top here you can see",
    "start": "3383410",
    "end": "3389410"
  },
  {
    "text": "essentially any requests that come through we'll look at them if they're an exception we'll figure out what type of",
    "start": "3389410",
    "end": "3396849"
  },
  {
    "text": "exception they are if it's a validation exception will change it to a bad request or some people like to use and",
    "start": "3396849",
    "end": "3402099"
  },
  {
    "text": "processable entity we can do that to whatever suits our needs if it's a not firm or change it to a not found and",
    "start": "3402099",
    "end": "3409240"
  },
  {
    "text": "we'll provide some information the the validation exception actually uses this failures property and what I'm doing",
    "start": "3409240",
    "end": "3415930"
  },
  {
    "text": "there is just taking all of those fluent validation errors and putting it into a format that's just like model States so",
    "start": "3415930",
    "end": "3422380"
  },
  {
    "text": "if you used to programming against model state on your front-end I want to provide the same experience or whatever code you've got now we'll continue to",
    "start": "3422380",
    "end": "3429220"
  },
  {
    "text": "work with that I should show you the",
    "start": "3429220",
    "end": "3436029"
  },
  {
    "text": "current user service because it's it's very simple but it is an important part of the story so for an authenticated",
    "start": "3436029",
    "end": "3442599"
  },
  {
    "text": "user we just grabbed a claim name identifier and that's the user ID so we",
    "start": "3442599",
    "end": "3447880"
  },
  {
    "text": "can use that when we're trying to find out more about the user such as their roles and that sort of thing I pass it",
    "start": "3447880",
    "end": "3454900"
  },
  {
    "text": "into the identity service where I'm getting the user name and that sort of thing so pretty simple one thing that",
    "start": "3454900",
    "end": "3463720"
  },
  {
    "text": "I've neglected to show a little bit are the tests I'll probably just show you the web UI",
    "start": "3463720",
    "end": "3469630"
  },
  {
    "text": "tests they're really great so I've got tests for the controller and this is a",
    "start": "3469630",
    "end": "3475630"
  },
  {
    "text": "test for the create method and so you can see here that I've got a method that",
    "start": "3475630",
    "end": "3480970"
  },
  {
    "text": "I've created which is factory get authenticated client which gets an authenticated client so that I don't",
    "start": "3480970",
    "end": "3486369"
  },
  {
    "text": "have to deal with that it's got a test user behind the scenes and we can actually then test requests against the",
    "start": "3486369",
    "end": "3493510"
  },
  {
    "text": "API and these tests are really powerful we can test a lot when we test against the API layer because it's an exercise",
    "start": "3493510",
    "end": "3500569"
  },
  {
    "text": "of the stack so when you write these tests you can see they're really simple to ride but but they have a big payoff",
    "start": "3500569",
    "end": "3508839"
  },
  {
    "text": "I've also got tests for infrastructure so you can see I've got some application",
    "start": "3508839",
    "end": "3515479"
  },
  {
    "text": "dbcontext tests to test my orders for entity behaviors so you can see how that works and in the domain and application",
    "start": "3515479",
    "end": "3523279"
  },
  {
    "text": "layer i have tests that will work with the commands in queries including",
    "start": "3523279",
    "end": "3528559"
  },
  {
    "text": "providing a an in-memory DB context so that you can write very effective tests",
    "start": "3528559",
    "end": "3535579"
  },
  {
    "text": "and they're quite simple to write to so if you have a look at this one we can",
    "start": "3535579",
    "end": "3542269"
  },
  {
    "text": "test the create to-do items command we don't have to deal with the context because that's provided by the base",
    "start": "3542269",
    "end": "3547819"
  },
  {
    "text": "class it's all injected for us and we can write very simple tests so that was a big goal for me was to be able to",
    "start": "3547819",
    "end": "3555349"
  },
  {
    "text": "write really effective tests not have to for each project wire up all of the authentication needs all of the",
    "start": "3555349",
    "end": "3561349"
  },
  {
    "text": "in-memory needs just be able to use this project and get started so key points",
    "start": "3561349",
    "end": "3570650"
  },
  {
    "text": "controllers should not contain any application logic that logic is not easy to use to reuse we want that outside",
    "start": "3570650",
    "end": "3577880"
  },
  {
    "text": "sorry inside of our core we should create and consume while to find view models we don't want our clients to",
    "start": "3577880",
    "end": "3583880"
  },
  {
    "text": "think too much for themselves just provide them everything they need and let them render the view open API",
    "start": "3583880",
    "end": "3590239"
  },
  {
    "text": "bridges the gap between the front end and back end you saw how we've done that we're generating clients and we're generating",
    "start": "3590239",
    "end": "3595789"
  },
  {
    "text": "DT owes and makes our life very easy code that we would have had to have written ourself in the past and n swag",
    "start": "3595789",
    "end": "3601819"
  },
  {
    "text": "in this case is automating the generation of open API specification and the clients that we need we didn't see",
    "start": "3601819",
    "end": "3608659"
  },
  {
    "text": "it here today but you can also generate c-sharp clients fetch clients is a great",
    "start": "3608659",
    "end": "3613669"
  },
  {
    "text": "lot of options that you can use within this tool so next steps so if you like",
    "start": "3613669",
    "end": "3619789"
  },
  {
    "text": "what you saw today then you might want to install the solution template so to do that all you have to do is run net",
    "start": "3619789",
    "end": "3625640"
  },
  {
    "text": "new install clean architecture solution template and then you can create a new",
    "start": "3625640",
    "end": "3630650"
  },
  {
    "text": "solution by running net new see a hyper - SLN so clean architecture",
    "start": "3630650",
    "end": "3636750"
  },
  {
    "text": "solution so I demonstrate that for you really quickly so from our command",
    "start": "3636750",
    "end": "3644730"
  },
  {
    "text": "window we go net new install clean",
    "start": "3644730",
    "end": "3651560"
  },
  {
    "text": "architecture solution template just like that so this is backed by a new get",
    "start": "3651560",
    "end": "3658170"
  },
  {
    "text": "package I updated at last night at about midnight and I've dated again at about 9:00 a.m. I'm updated again at about",
    "start": "3658170",
    "end": "3665240"
  },
  {
    "text": "12:00 midday I've been working on it a lot but you can see here we now have this short name the clean architecture",
    "start": "3665240",
    "end": "3671160"
  },
  {
    "text": "solution and see a solution so if we want to create a new project let's make",
    "start": "3671160",
    "end": "3676260"
  },
  {
    "text": "a directory NDC's Sydney 2019 okay and",
    "start": "3676260",
    "end": "3686100"
  },
  {
    "text": "then we can go dotnet you see a solution clean architecture solution it will generate that and everything that you've",
    "start": "3686100",
    "end": "3692310"
  },
  {
    "text": "seen here today will be ready for you to use and correctly named spaced based on the directory that you created it in so",
    "start": "3692310",
    "end": "3699390"
  },
  {
    "text": "if we come in here we can see we've got an NDC Sydney solution we've got our layers ready to use all of our tests",
    "start": "3699390",
    "end": "3705960"
  },
  {
    "text": "including an infrastructure associated with those tests ready to use and it's all namespace as I said - based on you",
    "start": "3705960",
    "end": "3714210"
  },
  {
    "text": "know the folder name that you specified so you're basically ready to just get underway so thank you very much for",
    "start": "3714210",
    "end": "3722850"
  },
  {
    "text": "attending my talk today I hope you've liked what you saw if you did be sure to install the template also check out the",
    "start": "3722850",
    "end": "3729720"
  },
  {
    "text": "repository this was only made possible through the contributions of thousands of people around the world so I'm hoping",
    "start": "3729720",
    "end": "3735750"
  },
  {
    "text": "that we can see the same sort of effort with the clean architecture template don't be afraid to ask the tough questions sometimes I get stumped I'm",
    "start": "3735750",
    "end": "3742410"
  },
  {
    "text": "still learning but in the end we we end up with a better solution thank you",
    "start": "3742410",
    "end": "3747680"
  },
  {
    "text": "[Applause]",
    "start": "3747680",
    "end": "3751550"
  }
]