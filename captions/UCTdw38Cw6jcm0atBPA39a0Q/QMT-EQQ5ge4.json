[
  {
    "text": "okay let's get started um it's cool to see that many people in here I was like",
    "start": "9040",
    "end": "14679"
  },
  {
    "text": "up until about few minutes ago there were like a few people here but it's actually quite cool to see that many people who wants to get away from",
    "start": "14679",
    "end": "20920"
  },
  {
    "text": "JavaScript I would I would kind of expect it to get the the big room one if",
    "start": "20920",
    "end": "27039"
  },
  {
    "text": "it was talk about getting away from JavaScript but apparently I get one of the uh so the talk is about typescript",
    "start": "27039",
    "end": "32360"
  },
  {
    "text": "JavaScript for C developers and that's quite pretty much what it's going to be so my name is Chris clug uh I work as a",
    "start": "32360",
    "end": "39280"
  },
  {
    "text": "software developer SL Mentor SL speaker slash uh basically whatever you pay me",
    "start": "39280",
    "end": "46039"
  },
  {
    "text": "to do within it uh I will do uh I work at a company",
    "start": "46039",
    "end": "52239"
  },
  {
    "text": "called novat TR it used to be nov Tru Consulting is renamed it's no I'm at a new company called nov Tru division",
    "start": "52239",
    "end": "57840"
  },
  {
    "text": "where I basically go around um building stuff and telling other people how to build stuff which is much more",
    "start": "57840",
    "end": "64239"
  },
  {
    "text": "fun than actually building it yourself because you can blame other people um so",
    "start": "64239",
    "end": "69439"
  },
  {
    "text": "the talk is about typescript uh or JavaScript scales which is what it says I think on the typescript",
    "start": "69439",
    "end": "75759"
  },
  {
    "text": "website so typescript is according to the typescript website which is typescript typescript l.org says",
    "start": "75759",
    "end": "82799"
  },
  {
    "text": "typescript is a type superet of JavaScript that compiles to plain JavaScript okay um it's actually pretty",
    "start": "82799",
    "end": "90799"
  },
  {
    "text": "spot on for obvious reasons it's on that website uh but what we get is",
    "start": "90799",
    "end": "95960"
  },
  {
    "text": "this so you have that little core of of JavaScript or ecmascript 3 uh which",
    "start": "95960",
    "end": "102079"
  },
  {
    "text": "every single browser and pretty much your hair dryer will support then you've got ecmascript 5",
    "start": "102079",
    "end": "108159"
  },
  {
    "text": "which is what most browsers support the biggest part of and then you got ecmascript 6 which is new stuff and then",
    "start": "108159",
    "end": "114600"
  },
  {
    "text": "you got other other new stuff that's going to come in the future the cool thing with JavaScript is that very little happened for a very long time and",
    "start": "114600",
    "end": "122000"
  },
  {
    "text": "then all of a sudden a whole heap of thing happened in a very short amount of time and now they're looking at like",
    "start": "122000",
    "end": "127880"
  },
  {
    "text": "three versions ahead sometime in 2097 we're going to have this feature and",
    "start": "127880",
    "end": "133000"
  },
  {
    "text": "they're already talking about it so what typescript does is that it actually takes pretty much all of everything",
    "start": "133000",
    "end": "140120"
  },
  {
    "text": "that's in JavaScript three and five and six and features are coming in the",
    "start": "140120",
    "end": "146840"
  },
  {
    "text": "future in in typescript as well so whenever they start looking at getting the spec for JavaScript done before the",
    "start": "146840",
    "end": "152840"
  },
  {
    "text": "browsers start supporting those features if it's possible to build them into typescript and have it",
    "start": "152840",
    "end": "160120"
  },
  {
    "text": "transpiled into some weird version of that that really works in an old",
    "start": "160120",
    "end": "165400"
  },
  {
    "text": "JavaScript environment as well you will get that feature so with typescript you'll always be working on the kind of",
    "start": "165400",
    "end": "170640"
  },
  {
    "text": "the latest and the greatest but in the end you are going to compile it down or",
    "start": "170640",
    "end": "176080"
  },
  {
    "text": "transpile it down to JavaScript that runs in the browser but we also get a few other features we",
    "start": "176080",
    "end": "182200"
  },
  {
    "text": "get um object orientation so we get classes and interfaces um classes are coming in",
    "start": "182200",
    "end": "189400"
  },
  {
    "text": "JavaScript or ecmascript uh it's just not no no browser will support it at the moment but with typescript we get it we",
    "start": "189400",
    "end": "196560"
  },
  {
    "text": "get static typing static typing is freaking awesome I'll come back to why",
    "start": "196560",
    "end": "202080"
  },
  {
    "text": "uh and finally we get typings which is um it's not really a typescript thing but we get separate typescript files",
    "start": "202080",
    "end": "208239"
  },
  {
    "text": "that only include definitions so basically they only include interfaces but it means that JavaScript libraries",
    "start": "208239",
    "end": "214560"
  },
  {
    "text": "that weren't built in typescript can still be used from typescript and we can still get intelligence we can still get",
    "start": "214560",
    "end": "221560"
  },
  {
    "text": "typing we can still get all that static stuff that we want from typescript even though it's a pure JavaScript library so",
    "start": "221560",
    "end": "227760"
  },
  {
    "text": "there there are typing files for most big JavaScript libraries out there so if you're doing jQuery jQuery is written in",
    "start": "227760",
    "end": "233760"
  },
  {
    "text": "JavaScript but there are typings file in typescript that makes it possible for you to integrate with J jQuery using",
    "start": "233760",
    "end": "241159"
  },
  {
    "text": "typescript in a nice way so why is static typing a big deal",
    "start": "241159",
    "end": "246319"
  },
  {
    "text": "well is it the big deal yes it's a huge deal it's the the",
    "start": "246319",
    "end": "252079"
  },
  {
    "text": "main reason for going to typescript in my world it gives you tooling it's kind",
    "start": "252079",
    "end": "257799"
  },
  {
    "text": "of impossible to give you good tooling without a staty typed language but Chris",
    "start": "257799",
    "end": "263040"
  },
  {
    "text": "if I go into typt or into visual studio and I open a Javascript file and I write something I press dot I get intelligence",
    "start": "263040",
    "end": "269960"
  },
  {
    "text": "it opens up a drop down right right have any of you ever seen vious",
    "start": "269960",
    "end": "275520"
  },
  {
    "text": "studio uh it it opens up this little thing that is not intelligence that is a box in which",
    "start": "275520",
    "end": "283360"
  },
  {
    "text": "microft takes every single string it has ever seen you type ever in a drop down",
    "start": "283360",
    "end": "290120"
  },
  {
    "text": "and goes you might want to use one of these and then it it it sort of invents a few strings as well not things you've",
    "start": "290120",
    "end": "295840"
  },
  {
    "text": "never written they will be in that drop down as well with static type we can get proper intelligence we can",
    "start": "295840",
    "end": "302360"
  },
  {
    "text": "get proper feedback from Visual Studio of what's available or not so we get",
    "start": "302360",
    "end": "307840"
  },
  {
    "text": "real intelligence with our tooling with static typing we get squigglies never",
    "start": "307840",
    "end": "313000"
  },
  {
    "text": "underestimate the squigglies if you get squigglies you're doing it wrong squigglies are awesome you get code",
    "start": "313000",
    "end": "319120"
  },
  {
    "text": "navigation you can put your your marker on a piece of code and press F12 and it",
    "start": "319120",
    "end": "324360"
  },
  {
    "text": "will jump to that implementation inside of typescript as well ever tried doing that in JavaScript",
    "start": "324360",
    "end": "330919"
  },
  {
    "text": "not a fun experience the way you find something in a big JavaScript program is you press control shift F which is",
    "start": "330919",
    "end": "338440"
  },
  {
    "text": "basically find all and then you write some weird awesome regular expression that fits into what you're searching for",
    "start": "338440",
    "end": "344120"
  },
  {
    "text": "and it gives you 990,000 files back and it goes do you want to look inside the source code of jQuery",
    "start": "344120",
    "end": "350120"
  },
  {
    "text": "nope this will give you proper code navigation it will give you",
    "start": "350120",
    "end": "356400"
  },
  {
    "text": "productivity okay productivity was not high on your list is high on my list cuz",
    "start": "356400",
    "end": "362039"
  },
  {
    "text": "U my clients pay me per minute actually it's per hour uh but but they want me",
    "start": "362039",
    "end": "367120"
  },
  {
    "text": "out of there as fast as possible so they're happy if I'm productive and it also reduces my errors there are very",
    "start": "367120",
    "end": "374160"
  },
  {
    "text": "few pieces of technology that I will say straight up will reduce errors in your code but in this case if we compare to",
    "start": "374160",
    "end": "381240"
  },
  {
    "text": "JavaScript with static typing you don't end up passing in a number when it was",
    "start": "381240",
    "end": "386319"
  },
  {
    "text": "supposed to be a string or you pass in a Boolean that is then converted to a string and returned as number and things like that which kind of happens in",
    "start": "386319",
    "end": "392720"
  },
  {
    "text": "JavaScript so that gets reduced and removed in this case and in the end we get",
    "start": "392720",
    "end": "398840"
  },
  {
    "text": "maintainability I have actually gone to the point where I have cancelled a contract with a client because they",
    "start": "398840",
    "end": "405080"
  },
  {
    "text": "would not switch from JavaScript to typescript because they were building a huge system it had a lifespan of at",
    "start": "405080",
    "end": "411319"
  },
  {
    "text": "least 10 years and they were writing everything in JavaScript and about four weeks into the project it was more or",
    "start": "411319",
    "end": "418240"
  },
  {
    "text": "less impossible to maintain it because it was so hard to figure out what was happening and there was only one guy that knew what it was actually doing",
    "start": "418240",
    "end": "424840"
  },
  {
    "text": "typescript will remove that and make it much much easier for us to maintain a system in the long run according to",
    "start": "424840",
    "end": "431440"
  },
  {
    "text": "me so how do we install this thing well if you're in visual studio 2013 before",
    "start": "431440",
    "end": "437960"
  },
  {
    "text": "update 2 you won't have it you will also have a very old environment you're",
    "start": "437960",
    "end": "443759"
  },
  {
    "text": "working in so you might want to update it so if you get past update 2 of 2013",
    "start": "443759",
    "end": "449120"
  },
  {
    "text": "you get it it if you have Visual Studio 2015 you have it if you have Visual Studio code you will have it if you have",
    "start": "449120",
    "end": "454680"
  },
  {
    "text": "writer I think you'll have it you'll basically have it in every ID that you download and install um and if you're",
    "start": "454680",
    "end": "461199"
  },
  {
    "text": "not doing an ID you want to write all of your stuff in notepad and compile it on",
    "start": "461199",
    "end": "467280"
  },
  {
    "text": "your command line you can just use npm to install it on your machine and you're good to go uh one thing to note though",
    "start": "467280",
    "end": "473680"
  },
  {
    "text": "is that I am using the latest version of typescript version two um and some of",
    "start": "473680",
    "end": "479120"
  },
  {
    "text": "the feat I show might not work unless you update the in the installation in visual studio so you need to install the",
    "start": "479120",
    "end": "484960"
  },
  {
    "text": "the extension for visual studio within with the 2.0 version for it to work but that's easy to",
    "start": "484960",
    "end": "491400"
  },
  {
    "text": "do syntax um I will show you code I promise I will actually do a code demo",
    "start": "491400",
    "end": "497039"
  },
  {
    "text": "uh but I want to show syntax in an easy to do like PowerPoint way first to focus on the syntax and then we can write",
    "start": "497039",
    "end": "503319"
  },
  {
    "text": "something so first of all the types that we've got pretty much what we'd expect to have the only thing on the left",
    "start": "503319",
    "end": "510199"
  },
  {
    "text": "column there that we don't know is any that's not available in C any means yeah",
    "start": "510199",
    "end": "515360"
  },
  {
    "text": "JavaScript variable you can do whatever you want I don't care put things in it take things away you can literally",
    "start": "515360",
    "end": "521518"
  },
  {
    "text": "delete properties on it if you want to and things like that string fine Boolean fine number yeah there's nothing like",
    "start": "521519",
    "end": "528600"
  },
  {
    "text": "integers and things like that there in 16 and in 32 and in 64 there there's a number that's it JavaScript only has",
    "start": "528600",
    "end": "536959"
  },
  {
    "text": "floats uh we've got arrays we've got which you can have two syntaxes of youve got the bracket bracket which is",
    "start": "536959",
    "end": "542720"
  },
  {
    "text": "Javascript notation and you've got the array of T which is the generic typescript version of of array we've got",
    "start": "542720",
    "end": "549160"
  },
  {
    "text": "tupes uh we've got enumerations we've got nullable types so you just go with the type and a question mark and it's",
    "start": "549160",
    "end": "555839"
  },
  {
    "text": "nullable uh we have return values we have void I'm not returning anything we have null I'm returning something else",
    "start": "555839",
    "end": "562279"
  },
  {
    "text": "but it's not it's not something but it's not nothing makes sense right uh and then we",
    "start": "562279",
    "end": "568560"
  },
  {
    "text": "can return undefined which is kind of also kind of like null but not null but it kind of means nothing but is still",
    "start": "568560",
    "end": "575760"
  },
  {
    "text": "something um yeah don't don't ask uh and we've got never which is a new one I",
    "start": "575760",
    "end": "581200"
  },
  {
    "text": "love returning never you can it's it's actually what it says H it's a function",
    "start": "581200",
    "end": "587680"
  },
  {
    "text": "that never returns so if you do a while true inside of it you can have a return type of never if you always throw an",
    "start": "587680",
    "end": "595240"
  },
  {
    "text": "exception inside of your function you can have a never if you write a function that always throws you've got",
    "start": "595240",
    "end": "602880"
  },
  {
    "text": "issues uh so I've never actually used never but I found it funny to have uh and we've got classes and we've got",
    "start": "602880",
    "end": "608880"
  },
  {
    "text": "interfaces so it's pretty much our our standard C that we used to but typescript we've got",
    "start": "608880",
    "end": "616480"
  },
  {
    "text": "namespaces that looks pretty familiar right namespaces are kind of going away",
    "start": "616480",
    "end": "622279"
  },
  {
    "text": "I will come back to that later on namespaces are kind of leaving typescript a little bit because of",
    "start": "622279",
    "end": "627920"
  },
  {
    "text": "JavaScript modules but we we look at at the end we got classes sweet we export classes Nam",
    "start": "627920",
    "end": "636760"
  },
  {
    "text": "spaces in typescript are actually containers and anything inside of a",
    "start": "636760",
    "end": "642240"
  },
  {
    "text": "namespace is not visible outside of the namespace unless you export it so everything is is private inside of the",
    "start": "642240",
    "end": "649279"
  },
  {
    "text": "namespace we have Constructors named a little bit different than CP we have Constructor parameters and as you see",
    "start": "649279",
    "end": "656800"
  },
  {
    "text": "the types are then noted as colon and type instead of having it before so",
    "start": "656800",
    "end": "662040"
  },
  {
    "text": "instead of string first name it's first name colon string not very complicated we have private members",
    "start": "662040",
    "end": "669160"
  },
  {
    "text": "which is awesome because JavaScript generally goes you want to have it private just use underscore of the",
    "start": "669160",
    "end": "675639"
  },
  {
    "text": "variable and all of the developers around you will know that it's a private variable that you shouldn't touch very",
    "start": "675639",
    "end": "682120"
  },
  {
    "text": "private um we have public uh members this is",
    "start": "682120",
    "end": "688680"
  },
  {
    "text": "something that work me as a c developer cuz everybody has forced down my throat my entire life that we should never just",
    "start": "688680",
    "end": "695680"
  },
  {
    "text": "have public strings in our classes we should have properties with Getters and Setters uh we do a whole lot of public",
    "start": "695680",
    "end": "702079"
  },
  {
    "text": "members in in typescript that's just it it happens we've got Shand members which is",
    "start": "702079",
    "end": "708560"
  },
  {
    "text": "really cool it's a feature that I think is available in C some version um you",
    "start": "708560",
    "end": "713680"
  },
  {
    "text": "can just put public or it's coming in cop I think you just put public in front of your Constructor parameters and it",
    "start": "713680",
    "end": "719880"
  },
  {
    "text": "becomes a public member of that class so we don't have to go ahead and have a uh",
    "start": "719880",
    "end": "726160"
  },
  {
    "text": "a member in our class and then in our Constructor say this do first name equals first name this do last name",
    "start": "726160",
    "end": "732200"
  },
  {
    "text": "equals last name we just go and say public and all the sudden our members are public in our class works as well",
    "start": "732200",
    "end": "738040"
  },
  {
    "text": "with private and protected as well uh we have properties so if you do want to go with full-blown properties we",
    "start": "738040",
    "end": "744360"
  },
  {
    "text": "can do that we just do get and Set uh there functions both of them uh so not",
    "start": "744360",
    "end": "750480"
  },
  {
    "text": "very complicated to do we have obviously",
    "start": "750480",
    "end": "756000"
  },
  {
    "text": "functions um by default everything in typescript is public everything in C is",
    "start": "756000",
    "end": "762639"
  },
  {
    "text": "by default private so you have to keep that in mind um we have function",
    "start": "762639",
    "end": "768560"
  },
  {
    "text": "parameters um if you look at to do something else y equals 2 we have default values as well for optional",
    "start": "768560",
    "end": "774160"
  },
  {
    "text": "parameters uh we can add a nullable parameter which basically means it's an an optional parameter that you don't",
    "start": "774160",
    "end": "779680"
  },
  {
    "text": "have to pass in we do have function overloading and things like that as well uh we have Arrow functions or",
    "start": "779680",
    "end": "788040"
  },
  {
    "text": "lambdas these are awesome and I will come back to why they're awesome later on uh my main recommendation uh is",
    "start": "788040",
    "end": "794920"
  },
  {
    "text": "whenever you write a function in in uh like a callback or something like that in typescript always use a Lambda",
    "start": "794920",
    "end": "801639"
  },
  {
    "text": "expression don't write function e curly brace use the arrow thingy instead or",
    "start": "801639",
    "end": "808040"
  },
  {
    "text": "the arrow function they do actually work differently this thing will work as you",
    "start": "808040",
    "end": "813079"
  },
  {
    "text": "expected to a JavaScript function will not work as you expected to as I said I'll come back to why just keep in mind",
    "start": "813079",
    "end": "819959"
  },
  {
    "text": "always do Arrow functions if you can we have delegates which is quite",
    "start": "819959",
    "end": "825880"
  },
  {
    "text": "obvious because JavaScript is a language built on functions so being able to have delegates that we can pass around and",
    "start": "825880",
    "end": "831880"
  },
  {
    "text": "things like that is fine so here we have a a uh FN member which is of type the",
    "start": "831880",
    "end": "838040"
  },
  {
    "text": "type is inline there so basically it says it's a function that takes two strings and returns a string and then we",
    "start": "838040",
    "end": "844720"
  },
  {
    "text": "assign it to a function which is basically then Arrow function or a Lambda expression and then we can execute at the",
    "start": "844720",
    "end": "851600"
  },
  {
    "text": "bottom we have enams or enums enums are awesome uh very simple we can just go I",
    "start": "851600",
    "end": "857639"
  },
  {
    "text": "have a color and do the names of them like we would do in C we can give them numbers uh so we can Define that red is",
    "start": "857639",
    "end": "864920"
  },
  {
    "text": "one and green is two or whatever um and we can even have small calculations to calculate which value it should have and",
    "start": "864920",
    "end": "871199"
  },
  {
    "text": "things like that and whenever you use an enum it actually converts it into a little dictionary as well so you can go",
    "start": "871199",
    "end": "877560"
  },
  {
    "text": "color. red will give you actually in JavaScript will give you the number but then you can use the color and index and",
    "start": "877560",
    "end": "885000"
  },
  {
    "text": "basically say can I get the string version of this number so it's a little bit different than than c c in that",
    "start": "885000",
    "end": "894199"
  },
  {
    "text": "respect we have casting which you'd expect it's a statically type language we do have to change types once in a",
    "start": "894480",
    "end": "900399"
  },
  {
    "text": "while so in this case uh we we BR bring out a element by ID from our document",
    "start": "900399",
    "end": "905839"
  },
  {
    "text": "and then we cast it to an HTML button element but the casting is done using less than and greater than signs instead",
    "start": "905839",
    "end": "911800"
  },
  {
    "text": "of using parenthesis we have generics everybody loves generics right generics are in",
    "start": "911800",
    "end": "918560"
  },
  {
    "text": "there a whole lot and makes a lot of sense to use um so you will see a lot of",
    "start": "918560",
    "end": "923639"
  },
  {
    "text": "generics going on when you do your typescript stuff we have inheritance",
    "start": "923639",
    "end": "930079"
  },
  {
    "text": "um inheritance works exactly as you expect it to do according to C the main difference is we use extends in instead",
    "start": "930079",
    "end": "936120"
  },
  {
    "text": "of just colon and to call our par parent class or the inherited class uh we use",
    "start": "936120",
    "end": "943399"
  },
  {
    "text": "super so if you want to call your base classes uh Constructor you do super and",
    "start": "943399",
    "end": "948720"
  },
  {
    "text": "then you pass in the parameters that needs to be passed onto the The Base Class super has to be the first call as",
    "start": "948720",
    "end": "955000"
  },
  {
    "text": "well in your Constructor we can do interfaces",
    "start": "955000",
    "end": "960199"
  },
  {
    "text": "um cool thing with interfaces here is that they're actually a lot more flexible than than C",
    "start": "960199",
    "end": "966279"
  },
  {
    "text": "interfaces the first the I do stuff is what you'd expect it's an interface it declares to one method called do stuff",
    "start": "966279",
    "end": "973440"
  },
  {
    "text": "it takes a couple of parameters returns to string the second one is just it says it has to have a property of type string",
    "start": "973440",
    "end": "979480"
  },
  {
    "text": "string and then we on our class we can say that class that does stuff implements I do",
    "start": "979480",
    "end": "986319"
  },
  {
    "text": "stuff pretty much CP but we can also go ahead as we do in",
    "start": "986319",
    "end": "991839"
  },
  {
    "text": "that that thing at the bottom here and actually inline our interfaces and say basically I want to have a function here",
    "start": "991839",
    "end": "998560"
  },
  {
    "text": "that takes a a parameter called vals and that parameter has to fulfill that",
    "start": "998560",
    "end": "1004920"
  },
  {
    "text": "interface it has to have an X property and a y property and they should both be numbers so we just inline it here I",
    "start": "1004920",
    "end": "1011160"
  },
  {
    "text": "don't have to declare a specific interface I just inline the type and say this is what I need give me one of those",
    "start": "1011160",
    "end": "1019000"
  },
  {
    "text": "that brings us to the fact that interfaces in typescript are actually structural they're not real interfaces",
    "start": "1019000",
    "end": "1026038"
  },
  {
    "text": "like we'd expect in C where when you pass in an object into a method that",
    "start": "1026039",
    "end": "1031120"
  },
  {
    "text": "expects an interface it looks as whe if you have actually implemented that interface instead typescript looks at",
    "start": "1031120",
    "end": "1037600"
  },
  {
    "text": "whatever you're passing in and makes sure that that object actually fulfills the interface whether or not it says",
    "start": "1037600",
    "end": "1044839"
  },
  {
    "text": "implements interface as long as it has the correct members it's B so in this",
    "start": "1044839",
    "end": "1050440"
  },
  {
    "text": "case I declare I values which basically has an X and A Y I have a function that",
    "start": "1050440",
    "end": "1055760"
  },
  {
    "text": "takes an i values but if you look down here I am more than happily allowed to",
    "start": "1055760",
    "end": "1061120"
  },
  {
    "text": "pass in a new my values which is a class which doesn't actually Implement that",
    "start": "1061120",
    "end": "1066960"
  },
  {
    "text": "interface at all it doesn't say implements I values but I Valu says that it has to",
    "start": "1066960",
    "end": "1072679"
  },
  {
    "text": "have an X property and a y property of type number and my values does have that",
    "start": "1072679",
    "end": "1077720"
  },
  {
    "text": "so it's going to be happy to let me pass that in I can also do an inline one I can do object literal and basically just",
    "start": "1077720",
    "end": "1083480"
  },
  {
    "text": "go curly brace curly brace X1 Y 2 and it's going to go okay he needed an",
    "start": "1083480",
    "end": "1090080"
  },
  {
    "text": "interface with those properties that's what you're passing in I'm happy so we do a b bunch of quite funky things that",
    "start": "1090080",
    "end": "1096240"
  },
  {
    "text": "I kind of miss when I go back to C to be perfectly honest because C is just a little bit",
    "start": "1096240",
    "end": "1101919"
  },
  {
    "text": "stricter thing to note about interfaces though um when you transpile your typescript to Java script",
    "start": "1101919",
    "end": "1109760"
  },
  {
    "text": "your interfaces goes poof and disappear they are only structures that",
    "start": "1109760",
    "end": "1115480"
  },
  {
    "text": "work within typescript they are never transpiled into anything else in the JavaScript world as soon as you",
    "start": "1115480",
    "end": "1121480"
  },
  {
    "text": "transpile they go away and modules this is the reason why",
    "start": "1121480",
    "end": "1128480"
  },
  {
    "text": "I'm saying that namespaces are kind of going away Nam spaces in C kind of makes sense",
    "start": "1128480",
    "end": "1135120"
  },
  {
    "text": "because we take all of these different files that all declare that members in a different namespace and they get",
    "start": "1135120",
    "end": "1140520"
  },
  {
    "text": "compiled into an assembly right and then we deploy that assembly",
    "start": "1140520",
    "end": "1146360"
  },
  {
    "text": "right have you seen C uh yes that's the way it works um in",
    "start": "1146360",
    "end": "1152840"
  },
  {
    "text": "JavaScript or in typescript if we declare namespaces and we transpile it we don't",
    "start": "1152840",
    "end": "1159960"
  },
  {
    "text": "get a unit we actually get every single file gets individually transpiled into JavaScript and every single individual",
    "start": "1159960",
    "end": "1166480"
  },
  {
    "text": "file will have stuff that goes into that name space so what is actually in that",
    "start": "1166480",
    "end": "1171919"
  },
  {
    "text": "namespace depends on what JavaScript files you are loading into your web page which is a little bit weird so basically",
    "start": "1171919",
    "end": "1178039"
  },
  {
    "text": "I know that in this namespace I have these things oh I don't because I forgot to load that one file but that other",
    "start": "1178039",
    "end": "1184720"
  },
  {
    "text": "file still has my namespace and also there is no connection in typescript that says this",
    "start": "1184720",
    "end": "1191720"
  },
  {
    "text": "file over here that declar something in namespace X actually belongs together with this file over here that that also",
    "start": "1191720",
    "end": "1197760"
  },
  {
    "text": "declares stuff in name Space X they are completely different things they just happen to declare things in the same",
    "start": "1197760",
    "end": "1203760"
  },
  {
    "text": "namespace modules is a JavaScript um notion uh and it's it's straight out of",
    "start": "1203760",
    "end": "1209840"
  },
  {
    "text": "JavaScript so it's not a typescript specific thing at all but it allows us",
    "start": "1209840",
    "end": "1215039"
  },
  {
    "text": "to say in one file that I am dependent on another module and a module is",
    "start": "1215039",
    "end": "1221640"
  },
  {
    "text": "basically a file so I can say here I want to import the definition of my",
    "start": "1221640",
    "end": "1226799"
  },
  {
    "text": "other class from a file that's located in slash basically same folder as I am",
    "start": "1226799",
    "end": "1234280"
  },
  {
    "text": "and it's going to be named my other dots but we removed the TS at the end we can",
    "start": "1234280",
    "end": "1240320"
  },
  {
    "text": "also go ahead and say I want to import the definition of a magic class from my magic",
    "start": "1240320",
    "end": "1246280"
  },
  {
    "text": "framework my magic framework in turn is then not a file on disk it's probably",
    "start": "1246280",
    "end": "1252080"
  },
  {
    "text": "something I've downloaded off of npm and used used from the node repo and then",
    "start": "1252080",
    "end": "1259080"
  },
  {
    "text": "the IDE has to be smart enough rather typescript comp transpiler has to be smart enough to figure out that my magic",
    "start": "1259080",
    "end": "1265840"
  },
  {
    "text": "framework actually refers to this thing over here so I need to make sure that I get that definition yada y y but it's a",
    "start": "1265840",
    "end": "1272559"
  },
  {
    "text": "way for us to actually link files and and modules together so that when we build it we can then go ahead and say",
    "start": "1272559",
    "end": "1279559"
  },
  {
    "text": "can you please load this thing here and it will figure out all of the other",
    "start": "1279559",
    "end": "1284600"
  },
  {
    "text": "dependencies and all of the other files that needs to be included for everything to work instead of that old JavaScript",
    "start": "1284600",
    "end": "1290799"
  },
  {
    "text": "mishmash that we used to have which is for every Javascript file I generate I add a script tag on my page and if they",
    "start": "1290799",
    "end": "1297640"
  },
  {
    "text": "end up in the wrong order tough your application goes poof this will sort",
    "start": "1297640",
    "end": "1303159"
  },
  {
    "text": "that out so a module kind of replaces the idea of a namespace uh and justce with",
    "start": "1303159",
    "end": "1309919"
  },
  {
    "text": "namespaces anything that needs to be exposed outside of that module needs to",
    "start": "1309919",
    "end": "1315000"
  },
  {
    "text": "have an export keyword on it um any questions on on um",
    "start": "1315000",
    "end": "1323120"
  },
  {
    "text": "syntax kind of similar to C right is at least okay transpile compile I call it",
    "start": "1323120",
    "end": "1330840"
  },
  {
    "text": "transpile because I don't find that it does a proper compile but it's called either",
    "start": "1330840",
    "end": "1336000"
  },
  {
    "text": "or you can transpile compile your typescript to JavaScript using a bunch of different tools Visual Studio will do",
    "start": "1336000",
    "end": "1343279"
  },
  {
    "text": "it for you automatically so if you add a typescript file Visual Studio will transpile it to JavaScript for you",
    "start": "1343279",
    "end": "1349360"
  },
  {
    "text": "you can use TSC doxe which is the typescript compiler it will do it for you you can use gulp grunt you can use",
    "start": "1349360",
    "end": "1356480"
  },
  {
    "text": "some node stuff you can use a whole heap of different things to do the translation it's up to you just one",
    "start": "1356480",
    "end": "1361919"
  },
  {
    "text": "thing that I want to say is do not check in your transpiled Java files into",
    "start": "1361919",
    "end": "1367440"
  },
  {
    "text": "Source control transp I at least I don't I check in my typescript file and as part",
    "start": "1367440",
    "end": "1373279"
  },
  {
    "text": "of my build I will generate my JavaScript files and bundle them and Minify them and all of that I don't",
    "start": "1373279",
    "end": "1379159"
  },
  {
    "text": "check all of that stuff",
    "start": "1379159",
    "end": "1382360"
  },
  {
    "text": "in yes code uh let's do some code uh and see what we can actually do so I have",
    "start": "1385120",
    "end": "1391120"
  },
  {
    "text": "Visual Studio here with a um it's a asp.net core project obviously we have",
    "start": "1391120",
    "end": "1396159"
  },
  {
    "text": "to run core the reason that I'm running core is that uh it's that much code to",
    "start": "1396159",
    "end": "1401240"
  },
  {
    "text": "get my web server up and running um it just serves static files and it says that the default file to",
    "start": "1401240",
    "end": "1407559"
  },
  {
    "text": "serve is index HTML and if I go in and have a look at the dubd DU root index HTML it's an HTML",
    "start": "1407559",
    "end": "1416320"
  },
  {
    "text": "file it has an input a button and a UL so if I run",
    "start": "1416320",
    "end": "1423600"
  },
  {
    "text": "this it builds maybe it runs and it's",
    "start": "1424320",
    "end": "1431159"
  },
  {
    "text": "beautiful oh I was supposed to be an art director I ended up being a coder um so",
    "start": "1431159",
    "end": "1437240"
  },
  {
    "text": "what I'm going to do is I'm going to build a little uh Spotify Searcher anyone who's ever seen me before knows that I love doing stuff with Spotify",
    "start": "1437240",
    "end": "1443600"
  },
  {
    "text": "because their API is open and very very simple to work with so I'm going to go here into my scripts folder and I'm",
    "start": "1443600",
    "end": "1450240"
  },
  {
    "text": "going to go ahead and I'm going to add a new typescript file so add new item typescript file and I'm going to call it",
    "start": "1450240",
    "end": "1457000"
  },
  {
    "text": "app. TS in here I'm going to say window dot",
    "start": "1457000",
    "end": "1462440"
  },
  {
    "text": "look at that intelligence proper intelligence onload can everybody see",
    "start": "1462440",
    "end": "1467559"
  },
  {
    "text": "what I'm well like you can at least see what I'm typing the intelligence might be a little bit blurry but so on load is",
    "start": "1467559",
    "end": "1474000"
  },
  {
    "text": "what I want to use going to say that that is a uh function like",
    "start": "1474000",
    "end": "1480720"
  },
  {
    "text": "that inside window do onload I want to go ahead and I want to pull out my resources from my page so I'm going to",
    "start": "1480720",
    "end": "1486320"
  },
  {
    "text": "say let and let's pull out my career text box equals",
    "start": "1486320",
    "end": "1493640"
  },
  {
    "text": "document dot get element by ID once again typescript gives me intellisense",
    "start": "1493640",
    "end": "1499000"
  },
  {
    "text": "that's what you want to take out of this presentation I'm going to pull out uh my career text box going to go ahead and",
    "start": "1499000",
    "end": "1506039"
  },
  {
    "text": "say copy a couple of those I'm going to pull out my search [Music] button like that I'm going to pull out",
    "start": "1506039",
    "end": "1513440"
  },
  {
    "text": "my UL like that that didn't work like that so I get",
    "start": "1513440",
    "end": "1519880"
  },
  {
    "text": "all my resources the cool thing now is that these are actually typed so this it might not be seen visible in the back",
    "start": "1519880",
    "end": "1525640"
  },
  {
    "text": "but it does say that this is an HTML ele element and I can cast this into different types of element and stuff",
    "start": "1525640",
    "end": "1531720"
  },
  {
    "text": "like that so what I want to do is I want to hook up my my click event on my button so I'm going to go um search",
    "start": "1531720",
    "end": "1539000"
  },
  {
    "text": "button do onclick",
    "start": "1539000",
    "end": "1543960"
  },
  {
    "text": "equals uh Lambda function like that and then in here I'm going to take and pull out my query so",
    "start": "1544080",
    "end": "1550480"
  },
  {
    "text": "I'm going to say let query equals query textbox do van dot value doesn't exist",
    "start": "1550480",
    "end": "1559320"
  },
  {
    "text": "right I got node value and node type and a bunch of that but nothing that says value reason my query textbox is an HTML",
    "start": "1559320",
    "end": "1568399"
  },
  {
    "text": "element HTML elements do not have a Val value property only input elements do so",
    "start": "1568399",
    "end": "1575000"
  },
  {
    "text": "this is types I'm just going to go in and say HTML input element it's casted",
    "start": "1575000",
    "end": "1580279"
  },
  {
    "text": "over to an H HTML input element and all of a sudden I get intellisense that",
    "start": "1580279",
    "end": "1586120"
  },
  {
    "text": "corresponds to being an input element and and there's a value property on it and if I look at it it says that it's a",
    "start": "1586120",
    "end": "1592799"
  },
  {
    "text": "string now we can say if query nope if not query",
    "start": "1592799",
    "end": "1600440"
  },
  {
    "text": "return uh we'll come back to that a little bit later but JavaScript has a weird truthy falsy kind of thing it",
    "start": "1600440",
    "end": "1606039"
  },
  {
    "text": "doesn't have true and false so this thing will basically say if not query and that means that if the query is",
    "start": "1606039",
    "end": "1612320"
  },
  {
    "text": "empty or null or undefined or a bunch of other things it will just be false sorry",
    "start": "1612320",
    "end": "1617880"
  },
  {
    "text": "false um yes it's weird it's JavaScript in the end there is there's it's still",
    "start": "1617880",
    "end": "1623919"
  },
  {
    "text": "JavaScript right we get some stuff from typescript but it's still JavaScript in the base of it so we we do get some of",
    "start": "1623919",
    "end": "1631039"
  },
  {
    "text": "the JavaScript features let's call them features quirks",
    "start": "1631039",
    "end": "1637880"
  },
  {
    "text": "is another useful one so I'm going to just go console. log just to see that",
    "start": "1637880",
    "end": "1643159"
  },
  {
    "text": "this works uh I want to log out query like that",
    "start": "1643159",
    "end": "1649840"
  },
  {
    "text": "so uh next up I need to go to my index file I as you can see here my Javascript",
    "start": "1649840",
    "end": "1656279"
  },
  {
    "text": "file is available now because types or Visual Studio has already transpiled it for me it has figured out that I have a",
    "start": "1656279",
    "end": "1661720"
  },
  {
    "text": "typescript file and this is what it transpiles it into which is very very similar to my typescript but it it's not",
    "start": "1661720",
    "end": "1668640"
  },
  {
    "text": "typescript um I pull that in down here save go out here press F5 pull up",
    "start": "1668640",
    "end": "1675559"
  },
  {
    "text": "the uh the little console I go in here here and I search for iron and there it",
    "start": "1675559",
    "end": "1681799"
  },
  {
    "text": "is it says iron okay that didn't work um I just",
    "start": "1681799",
    "end": "1687360"
  },
  {
    "text": "want to take it slow so it's step by step to see that everything works so I don't screw up along the way so I know",
    "start": "1687360",
    "end": "1692880"
  },
  {
    "text": "that I can I can use my UI next step is I want to do some Spotify stuff so I'm going to go ahead and I'm going to add a",
    "start": "1692880",
    "end": "1699159"
  },
  {
    "text": "Spotify Searcher class so let's go add new item typescript file",
    "start": "1699159",
    "end": "1705760"
  },
  {
    "text": "Spotify searcher like that and inside this file I'm",
    "start": "1705760",
    "end": "1711960"
  },
  {
    "text": "actually going to use a namespace just to show you how namespaces Works we're going to do namespace",
    "start": "1711960",
    "end": "1717679"
  },
  {
    "text": "space typescript do demo like that just like we would in C uh and in here we say",
    "start": "1717679",
    "end": "1725760"
  },
  {
    "text": "export class Spotify Searcher like",
    "start": "1725760",
    "end": "1732200"
  },
  {
    "text": "that anybody not following this good cuz if you not following what",
    "start": "1732200",
    "end": "1738760"
  },
  {
    "text": "I'm doing right now another profession um sorry I'm yeah search",
    "start": "1738760",
    "end": "1745679"
  },
  {
    "text": "artist it's not complicated yet it won't actually get very complicated so you'll be fine uh search artists uh is my my",
    "start": "1745679",
    "end": "1752559"
  },
  {
    "text": "method that I want to have it's going to take a query which is going to be of type string and it's going to return a",
    "start": "1752559",
    "end": "1760640"
  },
  {
    "text": "promise of type um any like",
    "start": "1760640",
    "end": "1766399"
  },
  {
    "text": "that so two things here first of all I don't actually have to explicitly tell a",
    "start": "1766399",
    "end": "1771799"
  },
  {
    "text": "function what it returns because typescript will actually figure out that if I inside this function return a",
    "start": "1771799",
    "end": "1778360"
  },
  {
    "text": "promise it will figure out return value on its own so I don't have to do it but I'll do it here because it's simple and",
    "start": "1778360",
    "end": "1784559"
  },
  {
    "text": "it it proves a point this is the point uh it will now give me squigglies it's",
    "start": "1784559",
    "end": "1789679"
  },
  {
    "text": "going to tell me if I hover over here it says could not cannot find name promise the promise JavaScript library",
    "start": "1789679",
    "end": "1797679"
  },
  {
    "text": "is not part of the standard stuff in typescript because it's not available in every single browser so typescript will",
    "start": "1797679",
    "end": "1804200"
  },
  {
    "text": "only pull in by default things that is available in all",
    "start": "1804200",
    "end": "1811320"
  },
  {
    "text": "browsers um so what we have to do is we have to tell typescript that by the way I know that this thing is going to run",
    "start": "1811320",
    "end": "1817200"
  },
  {
    "text": "in Chrome so I know that with chrome promises available just give it to me",
    "start": "1817200",
    "end": "1822320"
  },
  {
    "text": "stop being a um the way to do that is you go to your project and you go",
    "start": "1822320",
    "end": "1830399"
  },
  {
    "text": "add new item you go to typescript Json configuration file it has to be called",
    "start": "1830399",
    "end": "1837320"
  },
  {
    "text": "TSC config.js and you get this thing here that uh tells typescript how to do",
    "start": "1837320",
    "end": "1844000"
  },
  {
    "text": "its transpilation we can add a bunch of configuration in here the only thing I'm interested in is removing that and I",
    "start": "1844000",
    "end": "1851159"
  },
  {
    "text": "want to say lib not there I want to say lib",
    "start": "1851159",
    "end": "1858840"
  },
  {
    "text": "and then I can tell it what libraries I want you to load while doing the translation so I want to use the Dom and",
    "start": "1858840",
    "end": "1864480"
  },
  {
    "text": "I want to use equiscript 2015 so please load all of those stuff those things for",
    "start": "1864480",
    "end": "1869720"
  },
  {
    "text": "me uh so that I can work with those features and then a little while later",
    "start": "1869720",
    "end": "1876799"
  },
  {
    "text": "it goes green and everything is fine and then it goes red again uh it",
    "start": "1876799",
    "end": "1883440"
  },
  {
    "text": "goes red because I I'm not actually returning anything so it's saying here that a function who's declared type is neither void nor any must return a value",
    "start": "1883440",
    "end": "1891639"
  },
  {
    "text": "sweet I need to return something fine I I'll do that so what I'll do in here is I'm going to run off to uh Spotify and",
    "start": "1891639",
    "end": "1899320"
  },
  {
    "text": "do a web request I'm going to use a feature called Fetch fetches an API in",
    "start": "1899320",
    "end": "1905799"
  },
  {
    "text": "Chrome and future browsers that will allow me to do an HTML request or HTP request problem number two here it gives",
    "start": "1905799",
    "end": "1912919"
  },
  {
    "text": "me squiggly lines again it's telling me cannot find name fetch fetch is not available in all browsers orgo not",
    "start": "1912919",
    "end": "1919360"
  },
  {
    "text": "available in typescript so there are two ways to solve that I can either go up here and I",
    "start": "1919360",
    "end": "1925639"
  },
  {
    "text": "can say declare V deare VAR",
    "start": "1925639",
    "end": "1932159"
  },
  {
    "text": "fetch any and that's telling typescript that dude there will be a variable called",
    "start": "1932159",
    "end": "1939279"
  },
  {
    "text": "Fetch when this thing runs I know it you don't have to know it",
    "start": "1939279",
    "end": "1944760"
  },
  {
    "text": "you as a transpiler just have to realize that there will be something called f and it's of type any and I can do whatever I want with it and then I can",
    "start": "1944760",
    "end": "1951679"
  },
  {
    "text": "go ahead and I can say fetch and I can go away and I can fetch my the URL and then I happen to know that it's a",
    "start": "1951679",
    "end": "1958000"
  },
  {
    "text": "promise that comes back so I'll write this uh response and that takes one of",
    "start": "1958000",
    "end": "1964120"
  },
  {
    "text": "days it's kind of annoying though that I'm not getting intelligence right",
    "start": "1964120",
    "end": "1969519"
  },
  {
    "text": "because I one of the things with typescript is I want intellisense I can solve that not in the",
    "start": "1969519",
    "end": "1975600"
  },
  {
    "text": "same way that I did before I can't go to type script to the config file and say can you please add fetch stuff because",
    "start": "1975600",
    "end": "1981200"
  },
  {
    "text": "it's typescript doesn't know what fetch is but I can do this I can go to my",
    "start": "1981200",
    "end": "1986799"
  },
  {
    "text": "folder open the command line that's not very visible at the back",
    "start": "1986799",
    "end": "1992399"
  },
  {
    "text": "I assume so let's make you all see sick by flying around my screen and in here I can write npm",
    "start": "1992399",
    "end": "2000000"
  },
  {
    "text": "install at types which is a a new git module where they can they have uh",
    "start": "2000000",
    "end": "2005720"
  },
  {
    "text": "typings for jav for typescript at types slash and let's say",
    "start": "2005720",
    "end": "2012399"
  },
  {
    "text": "what- fetch obviously uh you obviously Google this",
    "start": "2012399",
    "end": "2019360"
  },
  {
    "text": "you don't know these things by hard trust me I Googled it uh and that installs two things it installs uh",
    "start": "2019360",
    "end": "2025639"
  },
  {
    "text": "typings for Fetch and for streams which is another um typing file it needs to",
    "start": "2025639",
    "end": "2031600"
  },
  {
    "text": "run that in turn if we look inside Visual Studio adds a node modules folder",
    "start": "2031600",
    "end": "2039240"
  },
  {
    "text": "in which it adds an add types in which it adds these in which it adds a typescript file called index. D.S and if",
    "start": "2039240",
    "end": "2046840"
  },
  {
    "text": "we look at that it's basically a typescript file that only includes interfaces that",
    "start": "2046840",
    "end": "2053960"
  },
  {
    "text": "defines what fetch actually does what the API for fetch is the cool thing is that now this",
    "start": "2053960",
    "end": "2062118"
  },
  {
    "text": "complains and goes uh cannot declare block scoped variable fetch nope I can't",
    "start": "2062119",
    "end": "2068800"
  },
  {
    "text": "because Visual Studio has already looked into the at types folder located the index.ts file figure out that there is",
    "start": "2068800",
    "end": "2076040"
  },
  {
    "text": "something called Fetch available and now it gives me",
    "start": "2076040",
    "end": "2082679"
  },
  {
    "text": "intelligence sweet so what I need now is I need to tell it what to go and fetch",
    "start": "2082679",
    "end": "2088280"
  },
  {
    "text": "so let's head over to Spotify which is like one of the best",
    "start": "2088280",
    "end": "2093720"
  },
  {
    "text": "things Sweden has ever produced way way way head of",
    "start": "2093720",
    "end": "2099079"
  },
  {
    "text": "ABA um so I'm going to pull out this this URL here because that's what I use to",
    "start": "2099079",
    "end": "2105240"
  },
  {
    "text": "search for an artist so I'm going to go in here and I'm going to switch these things here for back",
    "start": "2105240",
    "end": "2111240"
  },
  {
    "text": "ticks what the hell is a back tick back tick is the key that you have next to your backspace so you go shift and that",
    "start": "2111240",
    "end": "2118200"
  },
  {
    "text": "key twice it gives you two back ticks back ticks will allow you to have a line breaks inside of your strings and",
    "start": "2118200",
    "end": "2126640"
  },
  {
    "text": "it will also allow you to do string Interpol interp that's really hard to say when you're from Sweden",
    "start": "2126640",
    "end": "2132079"
  },
  {
    "text": "interpolation something like that um like we do in csharp so I can go in here and I can",
    "start": "2132079",
    "end": "2138119"
  },
  {
    "text": "say dollar curly brace curly brace and code U and all of sudden I'm doing",
    "start": "2138119",
    "end": "2144119"
  },
  {
    "text": "JavaScript inside my string and I want to encode the query as a URI",
    "start": "2144119",
    "end": "2150079"
  },
  {
    "text": "parameter and insert into my uh my query and then it has some issues with",
    "start": "2150079",
    "end": "2155839"
  },
  {
    "text": "coloring and then it goes in like that so this should Now give me all I need to",
    "start": "2155839",
    "end": "2161000"
  },
  {
    "text": "do my request what I don't like is I get Jason back but we want typing I want I want to",
    "start": "2161000",
    "end": "2168240"
  },
  {
    "text": "know what I get back so if I go in here and I look at the uh the um Json that I",
    "start": "2168240",
    "end": "2175200"
  },
  {
    "text": "get back the sample I have here which I can do that so you can see it whoops there it is it will give me back an an",
    "start": "2175200",
    "end": "2182560"
  },
  {
    "text": "object that has an artist's property which has an items property which which",
    "start": "2182560",
    "end": "2187839"
  },
  {
    "text": "has a list of items for every single artist that I found and inside that",
    "start": "2187839",
    "end": "2195280"
  },
  {
    "text": "object I will find a name property and I will find an ID so I know that those are the two properties that I'm interested",
    "start": "2195280",
    "end": "2201040"
  },
  {
    "text": "in and I know that they are come going to come back from my Json",
    "start": "2201040",
    "end": "2207720"
  },
  {
    "text": "so what I can do is I can in here say export let's scroll export interface",
    "start": "2207720",
    "end": "2216240"
  },
  {
    "text": "I artist I artist like that and I can say that it",
    "start": "2216240",
    "end": "2222200"
  },
  {
    "text": "will have a property called ID which is string it's going to have a name which is of type string and I can now convert",
    "start": "2222200",
    "end": "2228920"
  },
  {
    "text": "my function here to say I when you call me I will return an array of I",
    "start": "2228920",
    "end": "2235040"
  },
  {
    "text": "artist so I can type even my Json that comes back from my web web request and",
    "start": "2235040",
    "end": "2240560"
  },
  {
    "text": "get that typed into whatever I need I need to do a few more things here this thing is not complaining yes yes",
    "start": "2240560",
    "end": "2247760"
  },
  {
    "text": "it's it it's complaining like it should I need to type this thing to say that it's of any I need to say response dot I",
    "start": "2247760",
    "end": "2255040"
  },
  {
    "text": "happen to know that it's Json that comes back so I do that and then I take this and I type I pipe that this is now my",
    "start": "2255040",
    "end": "2263839"
  },
  {
    "text": "Json so I get a response back then I tell the response I want to get Json out of it and then I pipe that result into",
    "start": "2263839",
    "end": "2271079"
  },
  {
    "text": "another Promise This is complicated stuff I know um if you don't know JavaScript and JavaScript promises it gets weird just trust me this is way you",
    "start": "2271079",
    "end": "2277800"
  },
  {
    "text": "do it so I get my Json and I say I want to return json. artists.",
    "start": "2277800",
    "end": "2284319"
  },
  {
    "text": "items because that's what what it's going to be and when we read out items which is this thing here it will be an",
    "start": "2284319",
    "end": "2291800"
  },
  {
    "text": "array of objects that happen to have an ID and a name which is what I defined it",
    "start": "2291800",
    "end": "2297480"
  },
  {
    "text": "as everyone okay with that sweet so what we can do now is we can go back to our",
    "start": "2297480",
    "end": "2303280"
  },
  {
    "text": "app. TS and we can say here somewhere around there say let Spotify equals",
    "start": "2303280",
    "end": "2311800"
  },
  {
    "text": "new typescript do demo. Spotify Searcher",
    "start": "2311800",
    "end": "2317599"
  },
  {
    "text": "look at that intellisense all the way through this thing oops control say",
    "start": "2317599",
    "end": "2323920"
  },
  {
    "text": "there it is let's do dot intellisense search artist what I want to search for",
    "start": "2323920",
    "end": "2329839"
  },
  {
    "text": "it asks for a query so I'm going to pass in my query and then it returns a promise so I can go and say dot then so",
    "start": "2329839",
    "end": "2337119"
  },
  {
    "text": "when you're you're done hard to see but it actually says that you will get an",
    "start": "2337119",
    "end": "2342400"
  },
  {
    "text": "array of I artists back so artists and we'll do a a a callback",
    "start": "2342400",
    "end": "2347920"
  },
  {
    "text": "function like this inside this I can then go and say",
    "start": "2347920",
    "end": "2353280"
  },
  {
    "text": "artists do4",
    "start": "2353280",
    "end": "2358880"
  },
  {
    "text": "artist like that so basically it's a it's a loop mechanism inside of of U",
    "start": "2361480",
    "end": "2366560"
  },
  {
    "text": "JavaScript and then we say let Li Li equals",
    "start": "2366560",
    "end": "2373440"
  },
  {
    "text": "document create element so I want to create a new element it's going to be an Li element and this is awesome this kind",
    "start": "2373960",
    "end": "2380839"
  },
  {
    "text": "of took me by surprise when I tried this if I go and say Li and I look at that thing it has actually figured out that",
    "start": "2380839",
    "end": "2387160"
  },
  {
    "text": "it is an HTML Li element so even though I'm passing in a string that says that",
    "start": "2387160",
    "end": "2392280"
  },
  {
    "text": "create element can return any type of thing if you're passing in Li typescript figures out that will return An Li",
    "start": "2392280",
    "end": "2398640"
  },
  {
    "text": "version of that uh HTML Li element okay inner HTML no inner text",
    "start": "2398640",
    "end": "2405560"
  },
  {
    "text": "equals artist so artist is one the currently iterating artist out of my artist array",
    "start": "2405560",
    "end": "2412480"
  },
  {
    "text": "so if I go and look at that it will now give me intelligence telling me that there's a name property I can pull out",
    "start": "2412480",
    "end": "2417920"
  },
  {
    "text": "and then finally we say result dot append child and we append the LI to",
    "start": "2417920",
    "end": "2426400"
  },
  {
    "text": "get a result list out of what I've searched for make sense there's a bug in this code right now right now if I",
    "start": "2426400",
    "end": "2432440"
  },
  {
    "text": "search many times it will populate that Li over and or that U over and over again so I'm just going to push this say",
    "start": "2432440",
    "end": "2439480"
  },
  {
    "text": "while result do uh first",
    "start": "2439480",
    "end": "2446200"
  },
  {
    "text": "child there's something with my connection that makes it blink sorry about that result do this is getting",
    "start": "2446599",
    "end": "2453200"
  },
  {
    "text": "ridiculous result. delete now remove",
    "start": "2453200",
    "end": "2459240"
  },
  {
    "text": "child uh result do first child like that",
    "start": "2459880",
    "end": "2464920"
  },
  {
    "text": "so that should basically just Loop through until there there are no more CH no more child elements to remove",
    "start": "2464920",
    "end": "2470920"
  },
  {
    "text": "you're kidding",
    "start": "2470920",
    "end": "2473400"
  },
  {
    "text": "me okay that works I can't touch my computer anymore but you can see the",
    "start": "2476200",
    "end": "2481440"
  },
  {
    "text": "screen uh if I go out now and I try running this there's a there's an interesting thing that comes up when",
    "start": "2481440",
    "end": "2488520"
  },
  {
    "text": "when I do this if I go in and search for Britney I I still guess",
    "start": "2488520",
    "end": "2496760"
  },
  {
    "text": "just okay I I'll just keep going I I hope you can see most of it it still just writes out Britney down here I",
    "start": "2499520",
    "end": "2506760"
  },
  {
    "text": "actually I I rewrote this thing this is different it doesn't even have a console log anymore and it's still just right",
    "start": "2506760",
    "end": "2512480"
  },
  {
    "text": "doing a console log and the reason is that for some reason I don't know why this happens in in aset core projects",
    "start": "2512480",
    "end": "2519599"
  },
  {
    "text": "but it doesn't recompile typescripts as you save them that is easily fixed by",
    "start": "2519599",
    "end": "2525000"
  },
  {
    "text": "going into TS config and down here say compile on Save equals",
    "start": "2525000",
    "end": "2530560"
  },
  {
    "text": "true and then we go back and we compile the app. TS and we go and we compile",
    "start": "2530560",
    "end": "2536920"
  },
  {
    "text": "this thing and also one more thing that I need to do is I need to add my Spotify",
    "start": "2536920",
    "end": "2542960"
  },
  {
    "text": "Searcher Javascript file like that if I go back out here and I search",
    "start": "2542960",
    "end": "2549040"
  },
  {
    "text": "for Britney",
    "start": "2549040",
    "end": "2554480"
  },
  {
    "text": "okay Iron Maiden is that better let's let's search for Iron",
    "start": "2554480",
    "end": "2560040"
  },
  {
    "text": "Maiden i c could go and search for Abba uh yeah exactly we don't want we don't",
    "start": "2560040",
    "end": "2566280"
  },
  {
    "text": "want to search for ABA that's that's very very true so that's actually kind of cool because I've got intelligence all the way through and it might not",
    "start": "2566280",
    "end": "2573079"
  },
  {
    "text": "look hard to write this uh or in JavaScript but honestly I would probably have made spelling mistakes and type",
    "start": "2573079",
    "end": "2580599"
  },
  {
    "text": "mistakes and things like that going through this I get all that help from from visal Studio so what I want to do",
    "start": "2580599",
    "end": "2586319"
  },
  {
    "text": "is I want to remove the namespace because I want to do modular loading instead so by doing that I'm going to go",
    "start": "2586319",
    "end": "2591800"
  },
  {
    "text": "ahead and I'm going to say or to do that I'm going to go and say I don't want namespaces anymore like that so now this is a",
    "start": "2591800",
    "end": "2599440"
  },
  {
    "text": "module so my Spotify search. TS is now the module and that module exports a",
    "start": "2599440",
    "end": "2605160"
  },
  {
    "text": "class and an interface that's all I have to do to change it into a module then I go into my app. ts and I go up here and",
    "start": "2605160",
    "end": "2612599"
  },
  {
    "text": "this is now complaining because there's no such namespace so I'm going to go in here and say import curly brace curly",
    "start": "2612599",
    "end": "2619720"
  },
  {
    "text": "brace from and then we do do/ Spotify",
    "start": "2619720",
    "end": "2627440"
  },
  {
    "text": "Searcher and then we go back here and we call press control space uh if you go",
    "start": "2627480",
    "end": "2633119"
  },
  {
    "text": "home and do that it's going to take a little while um when I present and I got time for it to load so from the time",
    "start": "2633119",
    "end": "2639520"
  },
  {
    "text": "when you write the last R in Spotify Searcher it takes a little while before Vis Studio actually catches it so you",
    "start": "2639520",
    "end": "2646200"
  },
  {
    "text": "might have to go back and then go control space and then hammer it for about 10 seconds and then it give you",
    "start": "2646200",
    "end": "2651800"
  },
  {
    "text": "gives you intelligence so if you see me up here frantically killing my keyboard that is what I'm actually doing I am",
    "start": "2651800",
    "end": "2659119"
  },
  {
    "text": "coding and now that I've got that I'm basically saying can you please import the class Spotify Searcher from that",
    "start": "2659119",
    "end": "2666599"
  },
  {
    "text": "that module and then down here I basically just say can I can you go and create a new",
    "start": "2666599",
    "end": "2671839"
  },
  {
    "text": "instance of that class for me to use the cool thing now is that since I",
    "start": "2671839",
    "end": "2678520"
  },
  {
    "text": "have references between my files now I can use a module loader well oh sorry we're going to make",
    "start": "2678520",
    "end": "2684880"
  },
  {
    "text": "one more change I need to remove that because I won't have an A window. onload",
    "start": "2684880",
    "end": "2690359"
  },
  {
    "text": "anymore whoops uh because this module here my",
    "start": "2690359",
    "end": "2695599"
  },
  {
    "text": "app. ts module will be loaded dynamically so it will be loaded after window.onload",
    "start": "2695599",
    "end": "2701359"
  },
  {
    "text": "so to do that I'm going to go out to my index.html and I'm going to remove these",
    "start": "2701359",
    "end": "2708040"
  },
  {
    "text": "files like that going to pull out a little Library here called system.js",
    "start": "2708040",
    "end": "2713440"
  },
  {
    "text": "which is a JavaScript module loader there are a bunch of them available but systemjs is the one that I normally",
    "start": "2713440",
    "end": "2719599"
  },
  {
    "text": "use and then we say system. configure nope config",
    "start": "2719599",
    "end": "2727880"
  },
  {
    "text": "that look at that how nice it would have been to have done this in typescript instead where we've got intelligence because this kind of sucks especially",
    "start": "2727880",
    "end": "2735359"
  },
  {
    "text": "since base URL is capital URL it should be like a capital u in lowercase RL but",
    "start": "2735359",
    "end": "2742280"
  },
  {
    "text": "that just goes so we want to tell it that all of my files are in the scripts folder",
    "start": "2742280",
    "end": "2748839"
  },
  {
    "text": "scripts like that we have to tell it system do uh default JS extension",
    "start": "2748839",
    "end": "2757960"
  },
  {
    "text": "equals true that's just a little work around for a little thing in typescript and then we say",
    "start": "2757960",
    "end": "2764800"
  },
  {
    "text": "system system. import and we tell it can you please go",
    "start": "2764800",
    "end": "2771640"
  },
  {
    "text": "and import the module app the module loader will then go and say Cool Base URL scripts you want app",
    "start": "2771640",
    "end": "2779119"
  },
  {
    "text": "I'm going to go and download app.js it's going to look in app.js and figure out that it depends on a different module",
    "start": "2779119",
    "end": "2785800"
  },
  {
    "text": "called Spotify Searcher it goes and downloads the Spotify Searcher module and then loads them in the correct order",
    "start": "2785800",
    "end": "2791480"
  },
  {
    "text": "so in my page I only load the systemjs I tell it where my files are tell it what",
    "start": "2791480",
    "end": "2797240"
  },
  {
    "text": "first initial file I want to load and if we run this and we look into the network tab you'll see down",
    "start": "2797240",
    "end": "2804880"
  },
  {
    "text": "here in CC mode uh that it actually goes and load systemjs and then systemjs goes",
    "start": "2804920",
    "end": "2811200"
  },
  {
    "text": "and gets appjs which then needs Spotify Searcher JS and it figures out all that for me",
    "start": "2811200",
    "end": "2818319"
  },
  {
    "text": "whoop that's really cool Chris yes I know it's awesome when you got like 4,000 files when you got two files like",
    "start": "2818319",
    "end": "2824160"
  },
  {
    "text": "this it's kind of useless but I'm going to step it up one one level uh I'm going to go because I",
    "start": "2824160",
    "end": "2831040"
  },
  {
    "text": "really dislike the fact that my file my Spotify Searcher takes the dependency on fetch because fetch is not going to be",
    "start": "2831040",
    "end": "2837640"
  },
  {
    "text": "available if I'm not using Chrome so what I want to do is I want to have my HTTP Service as a service instead so",
    "start": "2837640",
    "end": "2844640"
  },
  {
    "text": "we're going to do and go and say new item typescript file HTTP service.ts we",
    "start": "2844640",
    "end": "2851559"
  },
  {
    "text": "do export interface I HTTP",
    "start": "2851559",
    "end": "2856760"
  },
  {
    "text": "service like that it's going to have a get method which is generic it's going to take a path which is a string and",
    "start": "2856760",
    "end": "2865640"
  },
  {
    "text": "it's going to return uh a promise of type",
    "start": "2865640",
    "end": "2872040"
  },
  {
    "text": "T that's the interface that I want to implement that's my HTP interface then",
    "start": "2872040",
    "end": "2877119"
  },
  {
    "text": "we're going to say export class um fetch HTTP service which implement this is",
    "start": "2877119",
    "end": "2886119"
  },
  {
    "text": "completely unnecessary as such you don't really don't have to write implements ihtp service or anything I just have to",
    "start": "2886119",
    "end": "2892920"
  },
  {
    "text": "make sure that I implement it in my code having implements here will let",
    "start": "2892920",
    "end": "2899000"
  },
  {
    "text": "intelligence tell me that I'm stupid I'm missing an a part of the implementation which just helps so I'm going to take",
    "start": "2899000",
    "end": "2905520"
  },
  {
    "text": "this thing here shove that in here like that I'm going",
    "start": "2905520",
    "end": "2911480"
  },
  {
    "text": "to go over to my Spotify Searcher and I'm going to copy",
    "start": "2911480",
    "end": "2917078"
  },
  {
    "text": "that like that so basically I I've put it all out",
    "start": "2919000",
    "end": "2924319"
  },
  {
    "text": "there I'm going to change this so it's all encapsulated in here so I'm going to say path instead like that so this thing",
    "start": "2924319",
    "end": "2930799"
  },
  {
    "text": "will use fetch to run off it will then take the response convert it into Json and it will return to Json back",
    "start": "2930799",
    "end": "2938280"
  },
  {
    "text": "which then means that I can go in here in my Spotify Searcher say",
    "start": "2938280",
    "end": "2943400"
  },
  {
    "text": "import import curra clyra from dot SL HTTP service like",
    "start": "2943400",
    "end": "2954559"
  },
  {
    "text": "that go back press control space frantically and pull in the I HB service",
    "start": "2954559",
    "end": "2961640"
  },
  {
    "text": "interface create a Constructor all of this is stuff we should be kind of used to when it comes",
    "start": "2961640",
    "end": "2968040"
  },
  {
    "text": "to C so I need a Constructor which HTP it's going to be of type I HTP service",
    "start": "2968040",
    "end": "2973440"
  },
  {
    "text": "like that and since I need it inside of my class I'm just going to make it private so that I can down here go and",
    "start": "2973440",
    "end": "2983559"
  },
  {
    "text": "say this. http.get and what I want is an any and",
    "start": "2985559",
    "end": "2992520"
  },
  {
    "text": "this is the path that I want to use I can remove this thing and this is now abstracted away which",
    "start": "2992520",
    "end": "3000799"
  },
  {
    "text": "means I can go to my app. ts it's going to complain squiggly line",
    "start": "3000799",
    "end": "3006079"
  },
  {
    "text": "saying that I'm stupid so I'm going to go here and say I want to import from HTTP",
    "start": "3006079",
    "end": "3011599"
  },
  {
    "text": "service and there it is um it",
    "start": "3011599",
    "end": "3018839"
  },
  {
    "text": "works and then we pass in one of those instead so now I've got a modular abstracted away HTTP service with",
    "start": "3018839",
    "end": "3025799"
  },
  {
    "text": "interfaces and everything thing like we would have in C cool right the last little part trick",
    "start": "3025799",
    "end": "3032400"
  },
  {
    "text": "I want to show is one that I haven't actually used that much because it's it's a very late addition to to",
    "start": "3032400",
    "end": "3039240"
  },
  {
    "text": "typescript but most people or a lot of people don't like the then then is a um",
    "start": "3039240",
    "end": "3047480"
  },
  {
    "text": "it's a um JavaScript thing with promises but cool enough is we actually have",
    "start": "3047480",
    "end": "3054240"
  },
  {
    "text": "async stuff so we can go up and we can make this meth function async we can go and say let",
    "start": "3054240",
    "end": "3062280"
  },
  {
    "text": "artists artists equal await just go and kill that remove that",
    "start": "3062280",
    "end": "3070640"
  },
  {
    "text": "remove that and we also have a sync await in",
    "start": "3070640",
    "end": "3076000"
  },
  {
    "text": "JavaScript so anything that returns a promise we can just go and say a sync a wait and await that thing and the",
    "start": "3076000",
    "end": "3083319"
  },
  {
    "text": "transpiler will transpile or a syn awaits into an a waiter thingy that uses",
    "start": "3083319",
    "end": "3088559"
  },
  {
    "text": "promises and figures everything out for us on the flight so just a final thing does this",
    "start": "3088559",
    "end": "3094799"
  },
  {
    "text": "actually work it loads all of the files and that that's one of the cool things about using systemjs it's I just added",
    "start": "3094799",
    "end": "3102640"
  },
  {
    "text": "htb service.ts and transpiled it and added a reference to it in my file and then systemjs figures out that that",
    "start": "3102640",
    "end": "3109480"
  },
  {
    "text": "thing is needed as well so it downloads that on the Fly for me instead of me having to add another link statement or",
    "start": "3109480",
    "end": "3115280"
  },
  {
    "text": "modify some build thing somewhere does it work let's see",
    "start": "3115280",
    "end": "3121880"
  },
  {
    "text": "um Metallica cuz you guys didn't like ABA there it is it it still works so that is",
    "start": "3121880",
    "end": "3130119"
  },
  {
    "text": "actually kind of the demo that I have um I I must say having started with",
    "start": "3130119",
    "end": "3135559"
  },
  {
    "text": "it once you get your intelligence going and you get typing inside of this stuff all of your front and stuff gets so much",
    "start": "3135559",
    "end": "3142440"
  },
  {
    "text": "easier to build however",
    "start": "3142440",
    "end": "3147640"
  },
  {
    "text": "sorry they were supposed to be called features I think um we are still doing",
    "start": "3147640",
    "end": "3153160"
  },
  {
    "text": "JavaScript no we're not we're doing typescript yes we are but we're doing JavaScript um and JavaScript comes with",
    "start": "3153160",
    "end": "3159640"
  },
  {
    "text": "features SL quirks slash completely messed up stuff we don't get rid of",
    "start": "3159640",
    "end": "3165040"
  },
  {
    "text": "those they are still there but they are managed a little bit better for example for in we would expect this Loop",
    "start": "3165040",
    "end": "3173680"
  },
  {
    "text": "4 x in my strings to Output and James right nope it outputs zero and",
    "start": "3173680",
    "end": "3180680"
  },
  {
    "text": "one why does it do that because if we put in an object and go for X in my",
    "start": "3180680",
    "end": "3188200"
  },
  {
    "text": "object it will output name and age it actually outputs the property names of the object that you tell it to iterate",
    "start": "3188200",
    "end": "3195160"
  },
  {
    "text": "over for of on the other hand that works as we expect it to that's just a",
    "start": "3195160",
    "end": "3202000"
  },
  {
    "text": "JavaScript syntax thingy so four of is what we need in most cases scope scoping",
    "start": "3202000",
    "end": "3207240"
  },
  {
    "text": "scoping is screwed up in JavaScript or it's not screwed up it's just different it's a feature right if we",
    "start": "3207240",
    "end": "3215520"
  },
  {
    "text": "have a method that takes a call back that will then that I pass in a call back and I execute it when something has",
    "start": "3215520",
    "end": "3221520"
  },
  {
    "text": "happened if I pass in a function like this you would expect this to be an",
    "start": "3221520",
    "end": "3226880"
  },
  {
    "text": "instance of my first class right because the class I am in is called my first class so when I pass in",
    "start": "3226880",
    "end": "3233680"
  },
  {
    "text": "a function I would expect this to still be this thing here nope it is uh",
    "start": "3233680",
    "end": "3239319"
  },
  {
    "text": "something else let's not go into what it is it's just something else it's not that class however if you do a Lambda",
    "start": "3239319",
    "end": "3246799"
  },
  {
    "text": "function or an arrow function this is actually the right",
    "start": "3246799",
    "end": "3252760"
  },
  {
    "text": "thing this is messed up yes it is it is completely messed up and it has to do",
    "start": "3252760",
    "end": "3257880"
  },
  {
    "text": "with closures and complicated JavaScript stuff that takes a while to get your head around if you always just go ahead",
    "start": "3257880",
    "end": "3263720"
  },
  {
    "text": "and use Arrow functions you are sort of safe because all of a sudden scoping works as in C and not as in JavaScript",
    "start": "3263720",
    "end": "3272000"
  },
  {
    "text": "next if you do this this is something that's quite easy to do you go and say I have a call back this is my callback I",
    "start": "3272000",
    "end": "3278480"
  },
  {
    "text": "pass in my function on my object this is not my first class this is that other",
    "start": "3278480",
    "end": "3284480"
  },
  {
    "text": "thing why because I'm passing in this function I'm not passing in a reference",
    "start": "3284480",
    "end": "3289599"
  },
  {
    "text": "to this class that has the function to solve this you do an arrow function so you",
    "start": "3289599",
    "end": "3296119"
  },
  {
    "text": "pass in an arrow function that in that in turn uses this do callback and that works fine because inside of our Arrow",
    "start": "3296119",
    "end": "3302960"
  },
  {
    "text": "function this is the right thing JavaScript is awesome um this is another one those I",
    "start": "3302960",
    "end": "3311119"
  },
  {
    "text": "love I don't know if you noticed it but I declared all of my variables using let and not VAR like you would do in",
    "start": "3311119",
    "end": "3317359"
  },
  {
    "text": "JavaScript let is a JavaScript syntax thing as well but this is what you can do in JavaScript and in typescript I can",
    "start": "3317359",
    "end": "3324799"
  },
  {
    "text": "write a function that declares variable X inside of an if statement and then",
    "start": "3324799",
    "end": "3329960"
  },
  {
    "text": "outside of the if statement I can log that X however at runtime if I were to pass",
    "start": "3329960",
    "end": "3336640"
  },
  {
    "text": "into something false it's going to go poof because variable X is not",
    "start": "3336640",
    "end": "3343079"
  },
  {
    "text": "declared awesome um we solve that by using yeah",
    "start": "3343079",
    "end": "3349359"
  },
  {
    "text": "we solve that by using let instead let is the same thing as VAR it declares a",
    "start": "3349359",
    "end": "3355400"
  },
  {
    "text": "variable but let uses uh block scoping which is what we have in C basically it",
    "start": "3355400",
    "end": "3361440"
  },
  {
    "text": "Scopes it within the next curly braces is One Step Up whereas JavaScript Scopes is to the function",
    "start": "3361440",
    "end": "3369039"
  },
  {
    "text": "upwards so using let will remove some of that problems and typescript will then tell you you are a nut case that's not",
    "start": "3369039",
    "end": "3375520"
  },
  {
    "text": "possible to do and then you have to fix it so use let instead of R truthy and falsey you would think a",
    "start": "3375520",
    "end": "3382079"
  },
  {
    "text": "language would have a sense of true and false nope JavaScript has it's truthy or",
    "start": "3382079",
    "end": "3388280"
  },
  {
    "text": "falsy I'm so introducing that at home for my wife nope that's kind of kind of",
    "start": "3388280",
    "end": "3394559"
  },
  {
    "text": "not true but kind of yeah so the deal is that anything that is false zero empty",
    "start": "3394559",
    "end": "3400720"
  },
  {
    "text": "string null undefined or not a number is considered",
    "start": "3400720",
    "end": "3405760"
  },
  {
    "text": "falsey if it's not in that list of things it's truthy yes please that is awesome it",
    "start": "3405760",
    "end": "3412960"
  },
  {
    "text": "means that we can do things like if my object and that will then verif instead of",
    "start": "3412960",
    "end": "3418079"
  },
  {
    "text": "having to write if my object is not equal to null do this I can just go if my object I can go and do my array.",
    "start": "3418079",
    "end": "3425520"
  },
  {
    "text": "length which is awesome I can also do my array question mark. length and that",
    "start": "3425520",
    "end": "3430599"
  },
  {
    "text": "will go and say if my array is not defined then do this if my array is defined and there's nothing in it then",
    "start": "3430599",
    "end": "3436920"
  },
  {
    "text": "do this so we have a bunch of other scenarios we can do with if statements based on truthy and faly and we can also",
    "start": "3436920",
    "end": "3442960"
  },
  {
    "text": "add exclamation mark exclamation mark exclamation mark will take a truthy",
    "start": "3442960",
    "end": "3449240"
  },
  {
    "text": "statement and make it false true false like a Boolean false so if we do exclamation mark exclamation mark we",
    "start": "3449240",
    "end": "3456200"
  },
  {
    "text": "take a truthy value we turn it into false and then we turn it back to true",
    "start": "3456200",
    "end": "3461400"
  },
  {
    "text": "so it exclamation mark exclamation mark takes a truthy or falsey value and turning it into its bull",
    "start": "3461400",
    "end": "3468799"
  },
  {
    "text": "equivalent you can add a third exclamation mark also but it doesn't actually make any",
    "start": "3468799",
    "end": "3474039"
  },
  {
    "text": "sense also one thing to notice everything is a dictionary so if I have a string here",
    "start": "3474039",
    "end": "3480280"
  },
  {
    "text": "called S I can go and say s. length and pull out the property length but I can also",
    "start": "3480280",
    "end": "3486359"
  },
  {
    "text": "go and use a dictionary State um indexer to it so basically every every object",
    "start": "3486359",
    "end": "3491720"
  },
  {
    "text": "that we create no matter what type of object it is it will always have an indexer that you can pass in a string to",
    "start": "3491720",
    "end": "3498240"
  },
  {
    "text": "and ask to get the value of that property which means that property values that you can't actually use",
    "start": "3498240",
    "end": "3504559"
  },
  {
    "text": "things like property values with spaces in the name and uh weird characters and stuff like that they cannot be used",
    "start": "3504559",
    "end": "3511039"
  },
  {
    "text": "using the dot notation but you can use them using the index notation that's fine so you can go ah I get the question",
    "start": "3511039",
    "end": "3518000"
  },
  {
    "text": "once in a while how do I do a dictionary in JavaScript you create an object it's a dictionary you're done so that's worth",
    "start": "3518000",
    "end": "3524680"
  },
  {
    "text": "having in mind because in once in a while you end up in in typescript and it says it tells you that that property is not",
    "start": "3524680",
    "end": "3530400"
  },
  {
    "text": "available I know because the interface says so but I know it's there and then you can get around typescript by using",
    "start": "3530400",
    "end": "3536079"
  },
  {
    "text": "using the index or notation instead and it works fine thank you it's been awesome to",
    "start": "3536079",
    "end": "3541680"
  },
  {
    "text": "having you here H I hope you got something out of of my typ presentation um any",
    "start": "3541680",
    "end": "3547559"
  },
  {
    "text": "questions that thing just went red like now it's the best time presentation",
    "start": "3547559",
    "end": "3554640"
  },
  {
    "text": "ever yeah I'm I'm scared of letting you ask me a let me let you ask me a question okay in that case",
    "start": "3554640",
    "end": "3563720"
  },
  {
    "text": "uh it's no it's an any well actually it kind of it it does",
    "start": "3567280",
    "end": "3573720"
  },
  {
    "text": "have some logic I haven't figured out really how it works but in some cases certain objects when you do that in this",
    "start": "3573720",
    "end": "3579839"
  },
  {
    "text": "case it would figure out the length I think because in this case it knows that string is an a string or S is a string",
    "start": "3579839",
    "end": "3586359"
  },
  {
    "text": "and then it looks at the the variable you pass in and then it basically goes and figures it out based on that so if",
    "start": "3586359",
    "end": "3592440"
  },
  {
    "text": "it knows that the type that you're using in this case string has a length it I think it returns a number but if you're",
    "start": "3592440",
    "end": "3597960"
  },
  {
    "text": "doing it for something that typescript doesn't figure out it doesn't know it will give an any",
    "start": "3597960",
    "end": "3603079"
  },
  {
    "text": "back make sense",
    "start": "3603079",
    "end": "3607359"
  },
  {
    "text": "cool yes you can debug typ Studio when I build this you can turn on something",
    "start": "3609640",
    "end": "3614839"
  },
  {
    "text": "called Source Maps Source Maps will map all of your JavaScript back into typescript so if you make the source",
    "start": "3614839",
    "end": "3621200"
  },
  {
    "text": "Maps available and have them configured correctly when you go into to for example Chrome in developer tools when",
    "start": "3621200",
    "end": "3627799"
  },
  {
    "text": "you go into the source you can go and actually set breakpoints in your typescript in the browser and I do",
    "start": "3627799",
    "end": "3633400"
  },
  {
    "text": "believe that if you do it in IE and you enable types or client side typescript",
    "start": "3633400",
    "end": "3639319"
  },
  {
    "text": "debugging and press F5 in your project it will attached to IE and it will debug the JavaScript which has Source maps",
    "start": "3639319",
    "end": "3645640"
  },
  {
    "text": "that turns it into typescript so you can debug straight into typescript yes any other",
    "start": "3645640",
    "end": "3652798"
  },
  {
    "text": "questions testing works fine",
    "start": "3653480",
    "end": "3658599"
  },
  {
    "text": "um anybody attend my other presentations where I say I hate testing um it would",
    "start": "3660280",
    "end": "3666280"
  },
  {
    "text": "you would generally transpile it into JavaScript and and test test it running it in JavaScript but it's it's it works",
    "start": "3666280",
    "end": "3672720"
  },
  {
    "text": "fine it has it's basically just JavaScript with a layer on top of it so you don't test the typescript you have",
    "start": "3672720",
    "end": "3679079"
  },
  {
    "text": "to transpile typescript to JavaScript and then you run those tests but it's it's perfectly fine to write unit tests",
    "start": "3679079",
    "end": "3684440"
  },
  {
    "text": "and integration tests in in typescript and typescript tests your other typescript classes but in the end it's",
    "start": "3684440",
    "end": "3690480"
  },
  {
    "text": "going to be JavaScript testing JavaScript kind of perverse but yeah it it's possible to do there was one more",
    "start": "3690480",
    "end": "3696480"
  },
  {
    "text": "hand",
    "start": "3696480",
    "end": "3698799"
  },
  {
    "text": "yes um so in in in the question is uh how I manage different browsers and and",
    "start": "3712319",
    "end": "3717480"
  },
  {
    "text": "stuff like like I did with the fetch library in this case I I would so for fetch there is a there's a polyfill for",
    "start": "3717480",
    "end": "3723480"
  },
  {
    "text": "it so I would add the the fetch polyfill and make sure it's available in all browsers it's just that I didn't feel like showing that because it didn't make",
    "start": "3723480",
    "end": "3729799"
  },
  {
    "text": "sense for my typescript stuff uh but in all situations where I go beyond what is in typescript because typescript will",
    "start": "3729799",
    "end": "3736559"
  },
  {
    "text": "tell you that this is what's available in your browser and that's it and then you can go in out like I did and tell it",
    "start": "3736559",
    "end": "3742000"
  },
  {
    "text": "I want promises as well but as soon as you modify what typescript the typescript compiler includes you're",
    "start": "3742000",
    "end": "3749039"
  },
  {
    "text": "responsible for making sure that it's available because typescript can care",
    "start": "3749039",
    "end": "3754279"
  },
  {
    "text": "less I I'm kind of out of time I will be around if you have any more questions uh don't forget to to vote on the way out",
    "start": "3754440",
    "end": "3760920"
  },
  {
    "text": "if you want to give me a green one if you want to give anything else then just forget that box on outside thank you",
    "start": "3760920",
    "end": "3768318"
  }
]