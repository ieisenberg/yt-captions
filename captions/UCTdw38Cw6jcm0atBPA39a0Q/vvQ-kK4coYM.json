[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "nine o'clock so let's start I am doing the felon and I'm going to talk to you",
    "start": "2690",
    "end": "9799"
  },
  {
    "text": "about using some player mocking framework for modern C++ a bit of",
    "start": "9799",
    "end": "15530"
  },
  {
    "text": "background before I start I work in Stockholm for a company named net inside",
    "start": "15530",
    "end": "21170"
  },
  {
    "text": "where I developed embedded software for communications devices in modern C++",
    "start": "21170",
    "end": "28990"
  },
  {
    "text": "complaining is not my job it's a hobby project going has to have",
    "start": "28990",
    "end": "34219"
  },
  {
    "text": "hobbies Cyril this is one of them I've been working on it for about three years",
    "start": "34219",
    "end": "40489"
  },
  {
    "text": "I think I don't remember exactly when I started some player is used at not the inside though and it's kind of cool that",
    "start": "40489",
    "end": "48859"
  },
  {
    "text": "they let me travel and talk about my hobby project I think this is known fact",
    "start": "48859",
    "end": "56569"
  },
  {
    "text": "a a long long long time ago I was a teenager I had a summer job here in Oslo",
    "start": "56569",
    "end": "63309"
  },
  {
    "text": "who woulda known work for the Norwegian geotechnical Institute that was before I",
    "start": "63309",
    "end": "71450"
  },
  {
    "text": "was into computers very much from play the name is always an issue for",
    "start": "71450",
    "end": "79280"
  },
  {
    "text": "surprising reasons here's what concise encyclopedia says complain is a style of",
    "start": "79280",
    "end": "85640"
  },
  {
    "text": "representation in which a painted object is intended to deceive the viewer into believing it is the object itself so it",
    "start": "85640",
    "end": "92930"
  },
  {
    "text": "can play is not for a visual deception literal translation is trick the eye or",
    "start": "92930",
    "end": "98900"
  },
  {
    "text": "deceive the eye this actually makes sense from a testing perspective a",
    "start": "98900",
    "end": "105560"
  },
  {
    "text": "mocking perspective because when you write unit tests you want to test your",
    "start": "105560",
    "end": "111010"
  },
  {
    "text": "your unit in isolation cutting off all",
    "start": "111010",
    "end": "116180"
  },
  {
    "text": "dependencies that this is trivial if it is a lease closet doesn't have any dependencies but if it has a lot of lot",
    "start": "116180",
    "end": "122659"
  },
  {
    "text": "of collaborators you don't want to involve them too in your test so you",
    "start": "122659",
    "end": "129830"
  },
  {
    "text": "replace them with moxie of you deceive if you like the object being",
    "start": "129830",
    "end": "136060"
  },
  {
    "text": "tested into thinking that it's operating in in a world that looks the way you",
    "start": "136060",
    "end": "141790"
  },
  {
    "text": "have described it in your test so when you write your test code you're in in",
    "start": "141790",
    "end": "146950"
  },
  {
    "text": "effect painting a picture for your unit being tested and you verify that you're",
    "start": "146950",
    "end": "156250"
  },
  {
    "text": "given behaves according to that picture so I think that may the name from that",
    "start": "156250",
    "end": "161800"
  },
  {
    "text": "makes a lot of sense for a mocking framework some examples of Trump layered",
    "start": "161800",
    "end": "168070"
  },
  {
    "start": "167000",
    "end": "269000"
  },
  {
    "text": "this is what you get if you go to Wikipedia page on something for some reason they do not mention mocking very",
    "start": "168070",
    "end": "174820"
  },
  {
    "text": "words it's a search hashtag from play on say Instagram or",
    "start": "174820",
    "end": "181030"
  },
  {
    "text": "Twitter you find a lot of street art also some finer arts like the boy",
    "start": "181030",
    "end": "186370"
  },
  {
    "text": "escaping from the frame some are amazingly subtle I really like the",
    "start": "186370",
    "end": "191860"
  },
  {
    "text": "portrait to the right I don't know if you can see the fly that is painted on the frame below the pocket there is",
    "start": "191860",
    "end": "198810"
  },
  {
    "text": "great when it comes to mugging in C++",
    "start": "198810",
    "end": "204930"
  },
  {
    "text": "the basically two schools of mocking frameworks because thus one thing that",
    "start": "204930",
    "end": "211750"
  },
  {
    "text": "C++ does not have that most other languages does and that is reflection so",
    "start": "211750",
    "end": "219190"
  },
  {
    "text": "one school uses knowledge of how to interpret debugging data compiled into",
    "start": "219190",
    "end": "225549"
  },
  {
    "text": "your binaries to find out how the data structures are laid out a popular",
    "start": "225549",
    "end": "231880"
  },
  {
    "text": "technique from there is to create their own vtable representation redirect the",
    "start": "231880",
    "end": "237430"
  },
  {
    "text": "vtable pointer to to their the table then you can intercept any calls you like very handy from a secret language",
    "start": "237430",
    "end": "245980"
  },
  {
    "text": "perspective that is so undefined behavior it's difficult to imagine the",
    "start": "245980",
    "end": "252730"
  },
  {
    "text": "other technique is work within the language and then you have to compensate for for this lack of reflection in other",
    "start": "252730",
    "end": "259959"
  },
  {
    "text": "ways and typically that is done by or the pre-process so their macro heavy from",
    "start": "259959",
    "end": "269290"
  },
  {
    "start": "269000",
    "end": "324000"
  },
  {
    "text": "toy belongs to the leather kind it stays true to the language to the best of my",
    "start": "269290",
    "end": "274540"
  },
  {
    "text": "knowledge anyway there are no deviations or any undefined behavior its equals of",
    "start": "274540",
    "end": "280060"
  },
  {
    "text": "14 it's implemented in a single header file it's about a little more than three",
    "start": "280060",
    "end": "285970"
  },
  {
    "text": "and a half thousand lines of horrendous macros and template black magic it's on",
    "start": "285970",
    "end": "292930"
  },
  {
    "text": "the boost license so at least from a legal perspective anyone should be able to use it if they want it it's available",
    "start": "292930",
    "end": "298660"
  },
  {
    "text": "from Kona the package manager and it's adaptable to any unit testing framework",
    "start": "298660",
    "end": "305620"
  },
  {
    "text": "at least I think it is this adaptation is important if you go to the github",
    "start": "305620",
    "end": "313600"
  },
  {
    "text": "page or you scroll down below the source code you find this documentation the first link is integrating with unit",
    "start": "313600",
    "end": "321340"
  },
  {
    "text": "testing frameworks when you click on that you see this text that says by",
    "start": "321340",
    "end": "327550"
  },
  {
    "start": "324000",
    "end": "409000"
  },
  {
    "text": "default from toei reports violations by throwing exceptions many modern",
    "start": "327550",
    "end": "332800"
  },
  {
    "text": "frameworks do that but I find it to be a little bit troubling that's why I",
    "start": "332800",
    "end": "338280"
  },
  {
    "text": "strongly suggested to use an adapter for your unit testing framework because if",
    "start": "338280",
    "end": "344380"
  },
  {
    "text": "you think about it your mocks are by definition called by your units being",
    "start": "344380",
    "end": "350860"
  },
  {
    "text": "tested so if they throw an exception that exception will flow through your code that is being tested so at the very",
    "start": "350860",
    "end": "358570"
  },
  {
    "text": "least this particular strain on your code that you really really really shouldn't catch that exception because",
    "start": "358570",
    "end": "364900"
  },
  {
    "text": "then they have sort of defeated the whole purpose below this description is",
    "start": "364900",
    "end": "371590"
  },
  {
    "text": "a list longer than that one with some popular unit testing frameworks you",
    "start": "371590",
    "end": "376600"
  },
  {
    "text": "click on it you get a code snippet of ten fifteen or so lines that you copy",
    "start": "376600",
    "end": "382450"
  },
  {
    "text": "pasted into your test program then you're done if your favorite unit testing framework isn't listed please",
    "start": "382450",
    "end": "390100"
  },
  {
    "text": "write an adapter it's not difficult and it is documented how you do so and when you have done it please submit a pull request to",
    "start": "390100",
    "end": "398760"
  },
  {
    "text": "documentation in the cookbook so that others can take advantage of that unit",
    "start": "398760",
    "end": "404080"
  },
  {
    "text": "testing framework - I'm going to tell",
    "start": "404080",
    "end": "410650"
  },
  {
    "start": "409000",
    "end": "465000"
  },
  {
    "text": "you about how you use some play by following an example in 2004 Martin",
    "start": "410650",
    "end": "418870"
  },
  {
    "text": "Fowler wrote this blog post mocks aren't stubs the ID behind that blog post was",
    "start": "418870",
    "end": "427419"
  },
  {
    "text": "to set the terminology straight what do we mean when we talk about fake what what do we mean we'll talk about mocks",
    "start": "427419",
    "end": "433540"
  },
  {
    "text": "what would mean when we talk about just doubles in general but he used an",
    "start": "433540",
    "end": "440710"
  },
  {
    "text": "example in that blog post that was a whisky store and your to implement an",
    "start": "440710",
    "end": "447610"
  },
  {
    "text": "order clause and the order Clause uses a store and to be able to write tests for",
    "start": "447610",
    "end": "455590"
  },
  {
    "text": "the order clause we mock the store so",
    "start": "455590",
    "end": "461640"
  },
  {
    "text": "back to from play how to mock something",
    "start": "461640",
    "end": "467320"
  },
  {
    "start": "465000",
    "end": "495000"
  },
  {
    "text": "you begin with writing a source code file and you include from play dot h PP",
    "start": "467320",
    "end": "472390"
  },
  {
    "text": "when that compares you have really done the most difficult part you have spelled it correctly and then introduced some",
    "start": "472390",
    "end": "480220"
  },
  {
    "text": "type in this case of struttin in my mock and what you want to mock the only thing",
    "start": "480220",
    "end": "485590"
  },
  {
    "text": "you can mock in from players member functions so this make mock one funk and",
    "start": "485590",
    "end": "492250"
  },
  {
    "text": "the function signature means is are you",
    "start": "492250",
    "end": "497860"
  },
  {
    "start": "495000",
    "end": "557000"
  },
  {
    "text": "familiar with Google mock by the way some people are nodding yeah this should",
    "start": "497860",
    "end": "504880"
  },
  {
    "text": "look quite familiar it's the same ID I couldn't choose and the same macro name but I elected not to because that could",
    "start": "504880",
    "end": "511390"
  },
  {
    "text": "be confusing so you make mock a function",
    "start": "511390",
    "end": "516669"
  },
  {
    "text": "name and a signature and the one in make mock one is because the number of",
    "start": "516669",
    "end": "523030"
  },
  {
    "text": "arguments to this function is one so this makes a mock inclement ation of",
    "start": "523030",
    "end": "529640"
  },
  {
    "text": "the function funk that that takes a string or value reference and returns an",
    "start": "529640",
    "end": "535560"
  },
  {
    "text": "int I found that many modern frameworks even today have difficulties with some",
    "start": "535560",
    "end": "542640"
  },
  {
    "text": "modern constructions like our value references or move on the types like unique pointer compare is not one of",
    "start": "542640",
    "end": "548730"
  },
  {
    "text": "them it's written in C++ fourth secret of 1440 prefers 14 a problem with this",
    "start": "548730",
    "end": "557880"
  },
  {
    "start": "557000",
    "end": "631000"
  },
  {
    "text": "approach though is a boy who has not done made this mistake so you know the",
    "start": "557880",
    "end": "568410"
  },
  {
    "text": "drill you have template code with horrendous constructions hidden behind",
    "start": "568410",
    "end": "574800"
  },
  {
    "text": "macros you get a thousand lines of completely incomprehensible garbage like",
    "start": "574800",
    "end": "580529"
  },
  {
    "text": "that function signature does not have",
    "start": "580529",
    "end": "585900"
  },
  {
    "text": "two parameters in make maneuver okay that is comprehensible and that is the",
    "start": "585900",
    "end": "592620"
  },
  {
    "text": "full error message from D purpose 5.4 I made a quite an effort to trap these",
    "start": "592620",
    "end": "600770"
  },
  {
    "text": "easy to make mistakes and make sure that you get a helpful compilation error",
    "start": "600770",
    "end": "606720"
  },
  {
    "text": "message that that directs you to what is wrong and gives you a short message that",
    "start": "606720",
    "end": "612839"
  },
  {
    "text": "does not have a lot of unrelated nonsense in fact there is a test suite of currently 37 test programs that do",
    "start": "612839",
    "end": "619890"
  },
  {
    "text": "not compile and I ensure that they fail in unexpected ways with good information",
    "start": "619890",
    "end": "627230"
  },
  {
    "text": "back to this one very common scene idiom",
    "start": "629710",
    "end": "637430"
  },
  {
    "start": "631000",
    "end": "694000"
  },
  {
    "text": "in writing just with boxes that you implement to an interface a pure",
    "start": "637430",
    "end": "644270"
  },
  {
    "text": "abstract base cloth this of course works well it's not by anything is required I",
    "start": "644270",
    "end": "649850"
  },
  {
    "text": "will show that later on but when you do please add override it will send you a",
    "start": "649850",
    "end": "655670"
  },
  {
    "text": "lot of headache and here by the way is that code duplication that I mentioned",
    "start": "655670",
    "end": "661850"
  },
  {
    "text": "in the beginning that we need because of the lack of introspection it really",
    "start": "661850",
    "end": "667490"
  },
  {
    "text": "shouldn't be necessary to say make mock of this function because it is already",
    "start": "667490",
    "end": "673280"
  },
  {
    "text": "known by the interface but the language is the way it is I don't think that this is a horrendous problem there are other",
    "start": "673280",
    "end": "681230"
  },
  {
    "text": "things that are more important but this is a drawback and there's currently no way around it given the way the language",
    "start": "681230",
    "end": "686750"
  },
  {
    "text": "works if you want to stay within the language back to modern flawless example",
    "start": "686750",
    "end": "697100"
  },
  {
    "text": "here's the example that he is examples of course in Java but the idea is saying",
    "start": "697100",
    "end": "702770"
  },
  {
    "text": "somebody I would start with following his example more or less exactly and",
    "start": "702770",
    "end": "708110"
  },
  {
    "text": "then a little stops improvising around it deviating as we go so it's idea is",
    "start": "708110",
    "end": "714590"
  },
  {
    "text": "that we have a store we can clear it inventory for an article and we can remove some quantity of an article from",
    "start": "714590",
    "end": "722420"
  },
  {
    "text": "the store and then we have an order clause we can add certain quantities of",
    "start": "722420",
    "end": "729320"
  },
  {
    "text": "some article as you wish and then you can fill the order with the store so a",
    "start": "729320",
    "end": "735950"
  },
  {
    "text": "usage could be like this code snippet here where you have an order clause you",
    "start": "735950",
    "end": "741410"
  },
  {
    "text": "add 50 telescope that is actually his example I guess it really likes this which gives his turns get and then you",
    "start": "741410",
    "end": "749140"
  },
  {
    "text": "get a store from somewhere and you fill the order so doing this in front play",
    "start": "749140",
    "end": "756820"
  },
  {
    "text": "the created glass mock store that he inherits from the store that make",
    "start": "756820",
    "end": "762970"
  },
  {
    "text": "Mauck and you've mentioned that what consulates for making a constant member function the name of the signature and",
    "start": "762970",
    "end": "768819"
  },
  {
    "text": "override since we're implementing to an interface and making up to the full remove assisted us to parameters and",
    "start": "768819",
    "end": "776889"
  },
  {
    "text": "then we can write tests in this example I'm using the catch unit test framework",
    "start": "776889",
    "end": "781899"
  },
  {
    "start": "777000",
    "end": "833000"
  },
  {
    "text": "reading but by filner she can talk to him down in the deep brain space if you want to is also talking later today in",
    "start": "781899",
    "end": "790629"
  },
  {
    "text": "catch you may use your cache is actually quite naive in here he will tell you a",
    "start": "790629",
    "end": "796930"
  },
  {
    "text": "lot more interesting things but for these examples all you need is a test this expressed by saying test case and",
    "start": "796930",
    "end": "803620"
  },
  {
    "text": "the name as a string and then you have the test body so here I have a test case",
    "start": "803620",
    "end": "809439"
  },
  {
    "text": "feeling does nothing if stock is insufficient so create an order plus",
    "start": "809439",
    "end": "814750"
  },
  {
    "text": "order object we add 51 telescas to it",
    "start": "814750",
    "end": "820860"
  },
  {
    "text": "get a mock store and then we'll play some expectation to say that I want",
    "start": "820860",
    "end": "827250"
  },
  {
    "text": "inventory to be called now with whiskey",
    "start": "827250",
    "end": "832470"
  },
  {
    "text": "what happens here is to begin with the reason we can place this expectation is",
    "start": "832470",
    "end": "838180"
  },
  {
    "start": "833000",
    "end": "952000"
  },
  {
    "text": "to begin with that store is of a mock type or rather that inventory is the",
    "start": "838180",
    "end": "843879"
  },
  {
    "text": "most function in a type and that it is",
    "start": "843879",
    "end": "850779"
  },
  {
    "text": "possible to call store dot inventory with whiskey because whiskey is a control store and control store can be",
    "start": "850779",
    "end": "858689"
  },
  {
    "text": "implicitly converted to the string so this works and you can make an equality",
    "start": "858689",
    "end": "863709"
  },
  {
    "text": "comparison to see that they are the same it creates an expectation object right",
    "start": "863709",
    "end": "872620"
  },
  {
    "text": "here in this scope it doesn't have a name that you can know but it is a local",
    "start": "872620",
    "end": "878559"
  },
  {
    "text": "object and this parameter whiskey is copied into that object so if you change",
    "start": "878559",
    "end": "885689"
  },
  {
    "text": "the whiskey variable to point to something else this will not matter it has its own local copy if you want to",
    "start": "885689",
    "end": "892929"
  },
  {
    "text": "have a reference to just call it with stress and then it works equally well this",
    "start": "892929",
    "end": "900490"
  },
  {
    "text": "expectation of the ethics placed first in the list of expectations for the inventory function in that type in that",
    "start": "900490",
    "end": "907450"
  },
  {
    "text": "object and this expectation must be fulfilled by the time the expectation",
    "start": "907450",
    "end": "912850"
  },
  {
    "text": "object goes out of the scope or is destroyed which it is when it goes out the scope and here is where Trumpler may",
    "start": "912850",
    "end": "921070"
  },
  {
    "text": "need to report errors during destruction because the expectation object is",
    "start": "921070",
    "end": "928810"
  },
  {
    "text": "destroyed it sees that wait a minute this expectation this requirement is not fulfilment violation report so that is",
    "start": "928810",
    "end": "938020"
  },
  {
    "text": "also one of the reasons you really want to use an adapter - for your unit",
    "start": "938020",
    "end": "943870"
  },
  {
    "text": "testing framework to report errors because showing an exception in this point is well stirred terminated so",
    "start": "943870",
    "end": "953709"
  },
  {
    "start": "952000",
    "end": "1016000"
  },
  {
    "text": "let's make a smallest possible implementation of order that actually compiles and it didn't compile buying it",
    "start": "953709",
    "end": "964650"
  },
  {
    "text": "returned missing for non-void function and that is the full error messages",
    "start": "964740",
    "end": "972209"
  },
  {
    "text": "nothing else many unit testing frameworks just to return a default in",
    "start": "972209",
    "end": "978430"
  },
  {
    "text": "this case I found that being explicit requiring you to say what it should",
    "start": "978430",
    "end": "984850"
  },
  {
    "text": "return does reduce number of WTFs over time because the code is much more",
    "start": "984850",
    "end": "991480"
  },
  {
    "text": "explicit it may increase the frequency of WCS early when writing the code but",
    "start": "991480",
    "end": "997740"
  },
  {
    "text": "after half year when you make a change you're really happy that is it that it is explicit now actually seeing errors",
    "start": "997740",
    "end": "1006779"
  },
  {
    "text": "that were hidden because it wasn't obvious what the test code actually did",
    "start": "1006779",
    "end": "1011940"
  },
  {
    "text": "require",
    "start": "1011940",
    "end": "1014270"
  },
  {
    "start": "1016000",
    "end": "1037000"
  },
  {
    "text": "so we are the returned 50/50 here is actually any expression you can write",
    "start": "1017540",
    "end": "1023990"
  },
  {
    "text": "well whatever you like as long as the type of the expression is convertible you could call random probably a really",
    "start": "1023990",
    "end": "1031770"
  },
  {
    "text": "bad idea that we could so with this change we can compile it and it says at",
    "start": "1031770",
    "end": "1041100"
  },
  {
    "text": "one time obviously with the message expected store that inventory whiskey to",
    "start": "1041100",
    "end": "1047459"
  },
  {
    "text": "be called once actually never call which makes sense because the implementation of order was just nonsense",
    "start": "1047459",
    "end": "1052980"
  },
  {
    "text": "so let's improve the ordered class",
    "start": "1052980",
    "end": "1058220"
  },
  {
    "text": "substudy it remembers the article and one we call SIL it actually calls inventory and that",
    "start": "1058220",
    "end": "1065000"
  },
  {
    "text": "works so let's write another test",
    "start": "1065000",
    "end": "1070190"
  },
  {
    "text": "feeling removes from story it's in stock I'm still using modern folders example",
    "start": "1070190",
    "end": "1078120"
  },
  {
    "text": "by the way so here we have exactly the same as before that patient expectation",
    "start": "1078120",
    "end": "1084720"
  },
  {
    "text": "a requirement that the inventory is called return safety and a requirement",
    "start": "1084720",
    "end": "1092610"
  },
  {
    "text": "that remove is called you may note now that these two are added to separate",
    "start": "1092610",
    "end": "1100020"
  },
  {
    "start": "1096000",
    "end": "1126000"
  },
  {
    "text": "lists there's one list of expectations for inventory and there's one list of expectations for remove so from from",
    "start": "1100020",
    "end": "1107100"
  },
  {
    "text": "place point of view these expectations are logically parallel we don't care if",
    "start": "1107100",
    "end": "1113690"
  },
  {
    "text": "inventory is called before remove or the reverse which often makes sense but in",
    "start": "1113690",
    "end": "1119940"
  },
  {
    "text": "this case it's kind of weird isn't it so we can change that we can add a sequence",
    "start": "1119940",
    "end": "1128670"
  },
  {
    "start": "1126000",
    "end": "1183000"
  },
  {
    "text": "object to impose an order this is more or less exactly the way that Google mock",
    "start": "1128670",
    "end": "1135780"
  },
  {
    "text": "works by the way you have a sequence object and you for every every",
    "start": "1135780",
    "end": "1140820"
  },
  {
    "text": "expectation where the order is important you say in sequence and the name of the",
    "start": "1140820",
    "end": "1146040"
  },
  {
    "text": "sequence object and the way this works is that the sequence object must see events in the",
    "start": "1146040",
    "end": "1153140"
  },
  {
    "text": "order they appear in these in sequence modifiers and you can have several",
    "start": "1153140",
    "end": "1159560"
  },
  {
    "text": "sequence obviously like if you want to describe sequences that are themselves important but logically and related to",
    "start": "1159560",
    "end": "1167150"
  },
  {
    "text": "each other and you can also have several sequence object in one dot in sequence modifier to sort of join them and say",
    "start": "1167150",
    "end": "1175790"
  },
  {
    "text": "here is a common point and then we can split again so by doing this we all have",
    "start": "1175790",
    "end": "1185390"
  },
  {
    "start": "1183000",
    "end": "1216000"
  },
  {
    "text": "ensured that they are calling in the proper order the test fails because we haven't implemented the call to remove",
    "start": "1185390",
    "end": "1192110"
  },
  {
    "text": "so let's do that remember not only the article but also the quantity and ensure",
    "start": "1192110",
    "end": "1200300"
  },
  {
    "text": "that when we call feel it cause remove provided that the quantity returned was",
    "start": "1200300",
    "end": "1208040"
  },
  {
    "text": "sufficient and everything works yay so",
    "start": "1208040",
    "end": "1217400"
  },
  {
    "start": "1216000",
    "end": "1251000"
  },
  {
    "text": "that was model for as example as as far as he took it because his only intention",
    "start": "1217400",
    "end": "1223100"
  },
  {
    "text": "was to show what do we mean with a mock and that shows for all the well here",
    "start": "1223100",
    "end": "1229180"
  },
  {
    "text": "let's extend I'm a big trouble by this",
    "start": "1229180",
    "end": "1235360"
  },
  {
    "text": "interface really if they buried doesn't",
    "start": "1235360",
    "end": "1240560"
  },
  {
    "text": "work at all if you have several orders that are working in parallel to one store perhaps over a network you have",
    "start": "1240560",
    "end": "1248000"
  },
  {
    "text": "raised on inventory and remove what if we want different types maybe we should",
    "start": "1248000",
    "end": "1256750"
  },
  {
    "start": "1251000",
    "end": "1277000"
  },
  {
    "text": "think a bit more generic strings as articles are really good for testing it",
    "start": "1256750",
    "end": "1262370"
  },
  {
    "text": "makes everything clear but perhaps the real implementation we want to use some other type and they would really want to",
    "start": "1262370",
    "end": "1270800"
  },
  {
    "text": "know Victorian to design but feels like 1990",
    "start": "1270800",
    "end": "1276730"
  },
  {
    "text": "let's do it a different way let's work with concrete types templatized on the",
    "start": "1276730",
    "end": "1282879"
  },
  {
    "start": "1277000",
    "end": "1328000"
  },
  {
    "text": "article type and we have a reserve that",
    "start": "1282879",
    "end": "1288539"
  },
  {
    "text": "is just say I want fifty Tallis girls and it says you got twenty sorry and if",
    "start": "1288539",
    "end": "1295269"
  },
  {
    "text": "you're really disappointed you just cancel those twenty because how much fun is just twenty telescas or if you have",
    "start": "1295269",
    "end": "1302710"
  },
  {
    "text": "to be this they'll remove $20 gift from the store that's fine and a convenient",
    "start": "1302710",
    "end": "1308639"
  },
  {
    "text": "type alias for the test you may note now that we're mocking a class template some",
    "start": "1308639",
    "end": "1317710"
  },
  {
    "text": "mocking frameworks have trouble with this others use different syntax just because it's a template not here it's",
    "start": "1317710",
    "end": "1325929"
  },
  {
    "text": "all the same and to reduce typing a little bit let's create a record type",
    "start": "1325929",
    "end": "1333369"
  },
  {
    "start": "1328000",
    "end": "1341000"
  },
  {
    "text": "that has both article and quantity because we always work with them as pairs so now we can see a slightly",
    "start": "1333369",
    "end": "1344019"
  },
  {
    "start": "1341000",
    "end": "1368000"
  },
  {
    "text": "different you situation where we have a",
    "start": "1344019",
    "end": "1350529"
  },
  {
    "text": "store from somewhere we create an order object that refers to the store and if",
    "start": "1350529",
    "end": "1356109"
  },
  {
    "text": "the return value from add is what we wanted then we feel the order otherwise we just give up or something order",
    "start": "1356109",
    "end": "1364809"
  },
  {
    "text": "something else whatever so let's load some other test add returns to return",
    "start": "1364809",
    "end": "1372009"
  },
  {
    "start": "1368000",
    "end": "1382000"
  },
  {
    "text": "the mount so I create an order object",
    "start": "1372009",
    "end": "1379179"
  },
  {
    "text": "from my mobile store and paste a",
    "start": "1379179",
    "end": "1384309"
  },
  {
    "start": "1382000",
    "end": "1434000"
  },
  {
    "text": "requirement that it's called with a record of 51 telescas this won't compile",
    "start": "1384309",
    "end": "1391840"
  },
  {
    "text": "because there is no equality comparison operator for record I could implement one but let's have fun in that",
    "start": "1391840",
    "end": "1398700"
  },
  {
    "text": "so instead use the underscore wild carding in namespace from place the",
    "start": "1398700",
    "end": "1406779"
  },
  {
    "text": "underscore it's a matter for any value of any type so you could use this for a",
    "start": "1406779",
    "end": "1413230"
  },
  {
    "text": "unique pointer or value reference or whatever works fine so replace a",
    "start": "1413230",
    "end": "1419859"
  },
  {
    "text": "requirement that reserve is called which anything which is not really very useful but then we can constrain it and say",
    "start": "1419859",
    "end": "1426929"
  },
  {
    "text": "with I guess that should really have been when but I made a mistake I guess",
    "start": "1426929",
    "end": "1434940"
  },
  {
    "text": "and then we have a dual and expressions of describe the constraint one thing is",
    "start": "1434940",
    "end": "1442509"
  },
  {
    "text": "see now is I'll just go one underscore one even these in which here the in this",
    "start": "1442509",
    "end": "1449230"
  },
  {
    "text": "expression you refer to the parameters of the call by the positional name so",
    "start": "1449230",
    "end": "1454269"
  },
  {
    "text": "I'm just going on it's the first parameter underscore two would be the second if this had two parameters now",
    "start": "1454269",
    "end": "1459909"
  },
  {
    "text": "I'm just going to as a compilation error but that way you can build up you or",
    "start": "1459909",
    "end": "1467349"
  },
  {
    "text": "express whatever you like in that are using the the parameters to the code",
    "start": "1467349",
    "end": "1472749"
  },
  {
    "text": "just by their positional lens and you can call functions in there which is actually implicitly done here because",
    "start": "1472749",
    "end": "1479259"
  },
  {
    "text": "we're comparing the two string article operator equals cost char store",
    "start": "1479259",
    "end": "1488638"
  },
  {
    "start": "1491000",
    "end": "1506000"
  },
  {
    "text": "and then at the end I use a catch assertion so this is knowledge from",
    "start": "1491399",
    "end": "1496830"
  },
  {
    "text": "placing is a captured certian to see that the return value is indeed the one",
    "start": "1496830",
    "end": "1502139"
  },
  {
    "text": "it should be otherwise the test fails so",
    "start": "1502139",
    "end": "1508249"
  },
  {
    "start": "1506000",
    "end": "1533000"
  },
  {
    "text": "implementing the order class template which is now attempted I saw on the",
    "start": "1508249",
    "end": "1513719"
  },
  {
    "text": "store type the constructor remembers the store and the add function calls Reserve",
    "start": "1513719",
    "end": "1521070"
  },
  {
    "text": "and returns whatever we got from there and this works you may notice that I feed it now and didn't show you the",
    "start": "1521070",
    "end": "1527909"
  },
  {
    "text": "failure but you've already seen those so nothing new there so we can create yet",
    "start": "1527909",
    "end": "1536429"
  },
  {
    "text": "one test field removes the reserved item so the first part is exactly the same as",
    "start": "1536429",
    "end": "1542639"
  },
  {
    "text": "we saw before no difference at all but then the second scope with the requirement to call remove this is an",
    "start": "1542639",
    "end": "1549509"
  },
  {
    "text": "anatomy that is very typical of tests written in from place if your test involves several steps you get one local",
    "start": "1549509",
    "end": "1556799"
  },
  {
    "text": "scope per step where you set the requirements expectations for what should happen in this step first and",
    "start": "1556799",
    "end": "1563159"
  },
  {
    "text": "then a trigger event and then the new scope with its requirements and the",
    "start": "1563159",
    "end": "1568409"
  },
  {
    "text": "trigger length and this is also one of the reasons that sequence objects are really usually not needed there are",
    "start": "1568409",
    "end": "1578009"
  },
  {
    "text": "situations where that there are absolutely necessary but both of them you just get this natural sequences by",
    "start": "1578009",
    "end": "1586129"
  },
  {
    "text": "by these scopes if you have very many of the issue you probably have a design",
    "start": "1586129",
    "end": "1591629"
  },
  {
    "text": "flaw but also code with foul smells",
    "start": "1591629",
    "end": "1596940"
  },
  {
    "text": "needs tests so there you go in this case I place a requirement if we move is",
    "start": "1596940",
    "end": "1603479"
  },
  {
    "text": "called with safety even though we call add with 51 because we in the first step",
    "start": "1603479",
    "end": "1611809"
  },
  {
    "text": "record the reserved call returns 50 so we ensure that it is remembering the",
    "start": "1611809",
    "end": "1620039"
  },
  {
    "text": "right thing remembering what was returned from reserving not remembering what we asked for and doing",
    "start": "1620039",
    "end": "1629390"
  },
  {
    "text": "so I need to improve again the order",
    "start": "1629390",
    "end": "1634580"
  },
  {
    "text": "class better have a another map of reserved items and I ensure that ad safe",
    "start": "1634580",
    "end": "1640940"
  },
  {
    "text": "what would what the result was and then field just reverses the identity in",
    "start": "1640940",
    "end": "1645980"
  },
  {
    "text": "reserve and call because remove on them and this is of course that's fine so we",
    "start": "1645980",
    "end": "1652580"
  },
  {
    "start": "1651000",
    "end": "1686000"
  },
  {
    "text": "have more tests destructor cancels the items you may have noticed on the",
    "start": "1652580",
    "end": "1658760"
  },
  {
    "text": "previous slides that I cheated on actually leaf memory because I didn't want to run the destructor debatable",
    "start": "1658760",
    "end": "1666049"
  },
  {
    "text": "technique I know but again the same first scope identical",
    "start": "1666049",
    "end": "1671679"
  },
  {
    "text": "and then just expectations that Council is called and we said to run the",
    "start": "1671679",
    "end": "1679279"
  },
  {
    "text": "destructor nothing new implements the destructor and everything works this",
    "start": "1679279",
    "end": "1686510"
  },
  {
    "start": "1686000",
    "end": "1707000"
  },
  {
    "text": "getting bit boring ah sorry multiple asset in same or combined so we have one",
    "start": "1686510",
    "end": "1691640"
  },
  {
    "text": "scope for the first remove and one reserve and one scope for the second reserve and it's not there's so much",
    "start": "1691640",
    "end": "1700130"
  },
  {
    "text": "repetition with doing the same with the same the same the same the same I hate that absolutely either one possible way",
    "start": "1700130",
    "end": "1707779"
  },
  {
    "start": "1707000",
    "end": "1734000"
  },
  {
    "text": "to do this get away from it a little bit is to say a local instead of required",
    "start": "1707779",
    "end": "1713059"
  },
  {
    "text": "call a lower call is anywhere between no calls at all and infinity or well",
    "start": "1713059",
    "end": "1718880"
  },
  {
    "text": "unsigned long long marks I guess we can approximate that with infinity and we",
    "start": "1718880",
    "end": "1726080"
  },
  {
    "text": "just return whatever was asked for then we're going to have two calls to add right after one another",
    "start": "1726080",
    "end": "1733450"
  },
  {
    "text": "perhaps a little coal isn't great perhaps it's better to say that I want",
    "start": "1735330",
    "end": "1740520"
  },
  {
    "text": "this to be called exactly twice because we we know we make two calls to add and",
    "start": "1740520",
    "end": "1747800"
  },
  {
    "text": "just for completeness you can say at least twice or at most five or even",
    "start": "1747800",
    "end": "1753540"
  },
  {
    "text": "anywhere between two and five I've actually never once used that but I'm sure if I remove it somewhat will complain I guess there is a need maybe",
    "start": "1753540",
    "end": "1764090"
  },
  {
    "text": "and then the requirement to remove these",
    "start": "1764120",
    "end": "1770540"
  },
  {
    "text": "50 because 50 is assemble 20 and 30 and that sort of work shouldn't it and what",
    "start": "1770540",
    "end": "1777390"
  },
  {
    "start": "1773000",
    "end": "1852000"
  },
  {
    "text": "is this hex dump hmm when from plane",
    "start": "1777390",
    "end": "1782760"
  },
  {
    "text": "must report an error for a type it checks if there a print function in nine",
    "start": "1782760",
    "end": "1788760"
  },
  {
    "text": "states complain that matches this type if it is it's used if not is there a no",
    "start": "1788760",
    "end": "1795060"
  },
  {
    "text": "stream insertion operator if so it is used it's not exactly if this a a pair I",
    "start": "1795060",
    "end": "1801180"
  },
  {
    "text": "know how to bring person left currently first Kalmar second right curly it's not",
    "start": "1801180",
    "end": "1806400"
  },
  {
    "text": "a pair is it at two four if it is tuple left currently elements come element come element come element right curly if",
    "start": "1806400",
    "end": "1812850"
  },
  {
    "text": "it's not it is it something that has begin an end is so less curly elements come element come element come all right",
    "start": "1812850",
    "end": "1818760"
  },
  {
    "text": "curly and it does this recursively so if you want to print a map a map has a",
    "start": "1818760",
    "end": "1824850"
  },
  {
    "text": "beginning them so let's curl the elements come element every element is pairs or less curly element comma element and session let's see again",
    "start": "1824850",
    "end": "1831750"
  },
  {
    "text": "everything and if all that fails it does a hex dump of the memory region occupied",
    "start": "1831750",
    "end": "1837870"
  },
  {
    "text": "by the object and of course everybody can read telesco than in yellow County",
    "start": "1837870",
    "end": "1844640"
  },
  {
    "text": "so this uses a short string of demise ation for falsehood string let's write a",
    "start": "1844640",
    "end": "1853550"
  },
  {
    "start": "1852000",
    "end": "1886000"
  },
  {
    "text": "print function small thing just in nice bass drum type print that takes an",
    "start": "1853550",
    "end": "1859950"
  },
  {
    "text": "Australian reference and your type and do something that makes a little bit",
    "start": "1859950",
    "end": "1865650"
  },
  {
    "text": "more sense this can actually be useful even if you do have a no street insertion abrade because the might be information says your object has some",
    "start": "1865650",
    "end": "1873210"
  },
  {
    "text": "cache that cache may be important in tests to understand what's happening but",
    "start": "1873210",
    "end": "1879659"
  },
  {
    "text": "it may not be something you'd normally want to write so with this we see",
    "start": "1879659",
    "end": "1887850"
  },
  {
    "start": "1886000",
    "end": "1903000"
  },
  {
    "text": "instead this failure that was an unexpected call to remove 30 Taylor's",
    "start": "1887850",
    "end": "1895350"
  },
  {
    "text": "gifts when there was an expectation to call remove 50 all right that was",
    "start": "1895350",
    "end": "1906149"
  },
  {
    "start": "1903000",
    "end": "1911000"
  },
  {
    "text": "embarrassing okay easy to fix and everything worked I think still that",
    "start": "1906149",
    "end": "1916440"
  },
  {
    "start": "1911000",
    "end": "2006000"
  },
  {
    "text": "there was unhealthy amount of repetition in the tests that I wrote so I want to",
    "start": "1916440",
    "end": "1924480"
  },
  {
    "text": "be able to express a mock store on a higher level that has some intelligence",
    "start": "1924480",
    "end": "1930029"
  },
  {
    "text": "on how to behave so I want to create this mob store and say this is the stock",
    "start": "1930029",
    "end": "1936899"
  },
  {
    "text": "of whiskey's that it has and as long as calls are made to it within the rules I'm all right with it and if it's calls",
    "start": "1936899",
    "end": "1944460"
  },
  {
    "text": "are made outside the rules report it and it doesn't have to handle every possible",
    "start": "1944460",
    "end": "1951690"
  },
  {
    "text": "situation because the observations can still handle exactly like before but if",
    "start": "1951690",
    "end": "1957000"
  },
  {
    "text": "it manages the bulk of important situations then we can save a lot of code code repetition things that are",
    "start": "1957000",
    "end": "1965730"
  },
  {
    "text": "tedious if we actually want to make change the effect several tests",
    "start": "1965730",
    "end": "1972470"
  },
  {
    "text": "obviously it's not required to handle several parallel orders because it's not deal it is the order Clause we are",
    "start": "1972470",
    "end": "1979860"
  },
  {
    "text": "testing itself no not not the mock and I",
    "start": "1979860",
    "end": "1985289"
  },
  {
    "text": "think it should suffice to have an object that keep track of what stock is",
    "start": "1985289",
    "end": "1990899"
  },
  {
    "text": "and manipulated and has a map of what is reserved by the order class so we can",
    "start": "1990899",
    "end": "1997289"
  },
  {
    "text": "manipulate these and then it also has the required",
    "start": "1997289",
    "end": "2002629"
  },
  {
    "text": "expectation so we know what is allowed and what is not allowed so how do we do that",
    "start": "2002629",
    "end": "2008059"
  },
  {
    "start": "2006000",
    "end": "2021000"
  },
  {
    "text": "I can have a stock with reserve type that takes a store a mock store and",
    "start": "2008059",
    "end": "2016360"
  },
  {
    "text": "under stock and has these maps but how",
    "start": "2016360",
    "end": "2022100"
  },
  {
    "start": "2021000",
    "end": "2034000"
  },
  {
    "text": "do we handle the expectations allow coal it's no good because it must be fulfilled by the end of the scope and",
    "start": "2022100",
    "end": "2028159"
  },
  {
    "text": "that is when the constructor runs out you don't have much use for that there",
    "start": "2028159",
    "end": "2034580"
  },
  {
    "text": "is named a local name the local gives a unique pointer to it from play expectation so now it's now we combined",
    "start": "2034580",
    "end": "2041749"
  },
  {
    "text": "that expectation to something in this case a member variable e at the bottom",
    "start": "2041749",
    "end": "2048339"
  },
  {
    "text": "so now this expectation stays alive as long as our stock with the reserve",
    "start": "2049450",
    "end": "2055730"
  },
  {
    "text": "object is live and then I can refer to",
    "start": "2055730",
    "end": "2061700"
  },
  {
    "start": "2060000",
    "end": "2100000"
  },
  {
    "text": "the member variables in the width constraint so I say that as long as it's",
    "start": "2061700",
    "end": "2067099"
  },
  {
    "text": "called with a quantity that is greater than zero because we don't want to call reserve nothing that doesn't make sense",
    "start": "2067099",
    "end": "2073010"
  },
  {
    "text": "and call with something that is in stock we handle out of stock situations",
    "start": "2073010",
    "end": "2079220"
  },
  {
    "text": "different they are in other cases and as",
    "start": "2079220",
    "end": "2084888"
  },
  {
    "text": "a side effect when this happens we manipulate the store we decrement the",
    "start": "2084889",
    "end": "2090710"
  },
  {
    "text": "the available stock and increment the reserved quantities and return what was",
    "start": "2090710",
    "end": "2098960"
  },
  {
    "text": "asked for and with this I can write the test differently I'll say stop with or serve 50 taels guess that is all we have",
    "start": "2098960",
    "end": "2106310"
  },
  {
    "start": "2100000",
    "end": "2169000"
  },
  {
    "text": "in this store and I can refer to the",
    "start": "2106310",
    "end": "2112310"
  },
  {
    "text": "store in the risk I can researchers reserved items in the",
    "start": "2112310",
    "end": "2117870"
  },
  {
    "text": "constraint now LR here is an intentionally ugly seeing is a",
    "start": "2117870",
    "end": "2123270"
  },
  {
    "text": "construction similar to the secret of course that they are they're ugly because they are visual warning local",
    "start": "2123270",
    "end": "2130080"
  },
  {
    "text": "reference means that they refer every name referred to in this constraint that",
    "start": "2130080",
    "end": "2135630"
  },
  {
    "text": "is local variable it's actually referred to by reference so there may be lifetime",
    "start": "2135630",
    "end": "2142140"
  },
  {
    "text": "issues here so we must ensure that the",
    "start": "2142140",
    "end": "2147270"
  },
  {
    "text": "variable s lives at least as long as this expectation does in this case it's",
    "start": "2147270",
    "end": "2154500"
  },
  {
    "text": "perfectly safe require color it's destroyed the expectation object for",
    "start": "2154500",
    "end": "2160050"
  },
  {
    "text": "require call is destroyed by the end of this local scope and s is in an otoscope so it's perfectly safe",
    "start": "2160050",
    "end": "2166340"
  },
  {
    "text": "so we can do that and now I guess I just",
    "start": "2166340",
    "end": "2171960"
  },
  {
    "start": "2169000",
    "end": "2200000"
  },
  {
    "text": "exposed a little bit of what happens under the hood here that this macro expands into a lambda expression among",
    "start": "2171960",
    "end": "2180570"
  },
  {
    "text": "other things and if LR changes the capture to be a reference capture",
    "start": "2180570",
    "end": "2186570"
  },
  {
    "text": "instead of an a copy capture so a little bit of a crack here in the facade I",
    "start": "2186570",
    "end": "2193380"
  },
  {
    "text": "guess but there you go",
    "start": "2193380",
    "end": "2198660"
  },
  {
    "text": "this works fine if you're a little bit on the paranoid side maybe worried that",
    "start": "2198660",
    "end": "2203940"
  },
  {
    "start": "2200000",
    "end": "2217000"
  },
  {
    "text": "maybe for whatever reasons feel calls we serve we serve this load to be call",
    "start": "2203940",
    "end": "2209520"
  },
  {
    "text": "because we have an expectation on it from this stock with resolve objects and",
    "start": "2209520",
    "end": "2216000"
  },
  {
    "text": "I can override that by explicitly saying for vehicle this must not happen this",
    "start": "2216000",
    "end": "2224640"
  },
  {
    "text": "creates another expectation object it is placed first in the list of expectations",
    "start": "2224640",
    "end": "2230040"
  },
  {
    "text": "for call to reserve and",
    "start": "2230040",
    "end": "2237350"
  },
  {
    "start": "2235000",
    "end": "2298000"
  },
  {
    "text": "when there are several competing expectations for the same call they are tried in the order they are found tried",
    "start": "2237640",
    "end": "2244120"
  },
  {
    "text": "in the list in the reverse the order of creation so if the Bitcoin was created",
    "start": "2244120",
    "end": "2250180"
  },
  {
    "text": "last therefore its first in the list and this one is completely unconstrained it's it matches anything and it is",
    "start": "2250180",
    "end": "2256870"
  },
  {
    "text": "forbidden so if there is a call to reserve here we will get a failed test so that's good and this is also a",
    "start": "2256870",
    "end": "2266410"
  },
  {
    "text": "pattern that I've found useful perhaps not necessarily with forbid call but that you can early in your test and",
    "start": "2266410",
    "end": "2273640"
  },
  {
    "text": "patent the test fixture you can set up the default behavior for how you want",
    "start": "2273640",
    "end": "2279490"
  },
  {
    "text": "something to to act and then in a local scope you can override that and say in this context I want it to behave this",
    "start": "2279490",
    "end": "2286720"
  },
  {
    "text": "way instead for example this location call will fail",
    "start": "2286720",
    "end": "2293530"
  },
  {
    "text": "or whatever perhaps a better way the is",
    "start": "2293530",
    "end": "2302470"
  },
  {
    "start": "2298000",
    "end": "2323000"
  },
  {
    "text": "instead to just let our stock with resort be on a narrower scope this means",
    "start": "2302470",
    "end": "2307870"
  },
  {
    "text": "that we obviously came up with 30 B the map called reserve in here because it's",
    "start": "2307870",
    "end": "2314710"
  },
  {
    "text": "dead and gone a matter of taste I guess",
    "start": "2314710",
    "end": "2320849"
  },
  {
    "start": "2323000",
    "end": "2343000"
  },
  {
    "text": "I've been told kittens make presentations better so they are so we",
    "start": "2323040",
    "end": "2331990"
  },
  {
    "text": "want to be able to order several whiskey's so we stock up with both both telescas an urban add a few of both and",
    "start": "2331990",
    "end": "2343680"
  },
  {
    "start": "2343000",
    "end": "2398000"
  },
  {
    "text": "then we want to ensure that what is renewed when we call field is exactly",
    "start": "2343680",
    "end": "2350440"
  },
  {
    "text": "what is reserved for each of them so I",
    "start": "2350440",
    "end": "2355720"
  },
  {
    "text": "have enough again the LR with to ensure that it is the expected quantity and",
    "start": "2355720",
    "end": "2362830"
  },
  {
    "text": "that is exists there to begin with and as a side effect I remove it from",
    "start": "2362830",
    "end": "2367980"
  },
  {
    "text": "from the map probably better again to",
    "start": "2367980",
    "end": "2373630"
  },
  {
    "text": "not use a low but please say times two because we know that there are two whiskeys in there and perhaps I should",
    "start": "2373630",
    "end": "2383530"
  },
  {
    "text": "have added a requirement an assertion that after this then this map really",
    "start": "2383530",
    "end": "2391360"
  },
  {
    "text": "should be empty I should have erased every elements but I've run out of slide space I guess so question is this an",
    "start": "2391360",
    "end": "2400900"
  },
  {
    "start": "2398000",
    "end": "2430000"
  },
  {
    "text": "improvement for readability depends I think if you try to widen the scope and",
    "start": "2400900",
    "end": "2407650"
  },
  {
    "text": "see a longer test suite with the same repetitions going over and over I think it does for this toyish example",
    "start": "2407650",
    "end": "2415770"
  },
  {
    "text": "debatable but generally speaking I think it is okay no for something a little bit",
    "start": "2415770",
    "end": "2426460"
  },
  {
    "text": "more advanced evil product manager comes",
    "start": "2426460",
    "end": "2434290"
  },
  {
    "start": "2430000",
    "end": "2470000"
  },
  {
    "text": "in with the new requirement it must be",
    "start": "2434290",
    "end": "2440050"
  },
  {
    "text": "possible to get notifications when we tried to order something that wasn't in",
    "start": "2440050",
    "end": "2446080"
  },
  {
    "text": "stock at least not to the extent that we",
    "start": "2446080",
    "end": "2451270"
  },
  {
    "text": "wanted to so we've been disappointed and this should be an optional parameter",
    "start": "2451270",
    "end": "2456450"
  },
  {
    "text": "Osten function parameter to add and we want the implementation that add to",
    "start": "2456450",
    "end": "2462730"
  },
  {
    "text": "request a notification when the return quantity is lower than the requested quantity okay add this extra parameter",
    "start": "2462730",
    "end": "2473740"
  },
  {
    "text": "that we're not using yet just to ensure that we haven't destroyed anything add a",
    "start": "2473740",
    "end": "2481000"
  },
  {
    "text": "notify function and convenience type alias and I should slow down now because",
    "start": "2481000",
    "end": "2490690"
  },
  {
    "start": "2487000",
    "end": "2538000"
  },
  {
    "text": "a lot will happen on these few next slides so as place a requirement that notify is",
    "start": "2490690",
    "end": "2498940"
  },
  {
    "text": "called without them and I cannot really do much with a",
    "start": "2498940",
    "end": "2504490"
  },
  {
    "text": "callback to ensure that it is the right one when the callback is expressive as a",
    "start": "2504490",
    "end": "2510480"
  },
  {
    "text": "state function but I can say any and",
    "start": "2510480",
    "end": "2517770"
  },
  {
    "text": "then as a side effect I can save that",
    "start": "2517770",
    "end": "2522840"
  },
  {
    "text": "parameter that can be the function call back in a local variable so I use LR",
    "start": "2522840",
    "end": "2529450"
  },
  {
    "text": "side effect to actually refer to this local variable so that I'm changing its",
    "start": "2529450",
    "end": "2534520"
  },
  {
    "text": "value then I call ad with a lambda that",
    "start": "2534520",
    "end": "2542800"
  },
  {
    "start": "2538000",
    "end": "2571000"
  },
  {
    "text": "operates on an another local variable lambda is a boolean that sets it to true",
    "start": "2542800",
    "end": "2549400"
  },
  {
    "text": "and since I'm adding 11 albums when they only turn the stoker really should get",
    "start": "2549400",
    "end": "2555040"
  },
  {
    "text": "this to happen and to ensure things or find a call it and then I check that",
    "start": "2555040",
    "end": "2563460"
  },
  {
    "text": "this local variable this boolean called is now true it's obviously fails because",
    "start": "2563460",
    "end": "2573280"
  },
  {
    "start": "2571000",
    "end": "2584000"
  },
  {
    "text": "I haven't implemented yet",
    "start": "2573280",
    "end": "2576420"
  },
  {
    "text": "but that is okay it is compiled so we're on to something I can add some things to",
    "start": "2579090",
    "end": "2587970"
  },
  {
    "text": "to the head function so if the quantity returned was a disappointment then I",
    "start": "2587970",
    "end": "2595090"
  },
  {
    "text": "call the stored of notify with the callback so a great and shouldn't that",
    "start": "2595090",
    "end": "2603280"
  },
  {
    "text": "have worked it should have ended ah so",
    "start": "2603280",
    "end": "2613020"
  },
  {
    "text": "the fix worked but we broke another test Oh",
    "start": "2613020",
    "end": "2618220"
  },
  {
    "text": "interesting okay TDD works we capture mistakes good I can fix this easily but",
    "start": "2618220",
    "end": "2631780"
  },
  {
    "text": "let's take a step back and try to look at a bigger picture this stock which we",
    "start": "2631780",
    "end": "2636970"
  },
  {
    "text": "serve it might be prudent to allow cause",
    "start": "2636970",
    "end": "2642220"
  },
  {
    "text": "to notify as long as they are within the",
    "start": "2642220",
    "end": "2648100"
  },
  {
    "text": "rules that is that is not called with an uninitialized function did you know that",
    "start": "2648100",
    "end": "2654700"
  },
  {
    "text": "you can compare stood function with a null pointer if it compares the equal to",
    "start": "2654700",
    "end": "2660460"
  },
  {
    "text": "null pointer existed function that just not what call anything it's default initialized",
    "start": "2660460",
    "end": "2667860"
  },
  {
    "start": "2673000",
    "end": "2708000"
  },
  {
    "text": "when we have tests where where we really want to check things with its notify",
    "start": "2675239",
    "end": "2683680"
  },
  {
    "text": "like the one we just wrote we can have local deviations like I said earlier we did it's a good idea I think to state",
    "start": "2683680",
    "end": "2692170"
  },
  {
    "text": "defaults that works for most cases and when needed you say that in this context",
    "start": "2692170",
    "end": "2699999"
  },
  {
    "text": "I want a different behavior so we have a default that just checks on it plays by",
    "start": "2699999",
    "end": "2705009"
  },
  {
    "text": "the rules just for completeness a different way of doing the same exactly",
    "start": "2705009",
    "end": "2710559"
  },
  {
    "start": "2708000",
    "end": "2789000"
  },
  {
    "text": "the same thing is to use a mattress in 9th place from play n E is not a not",
    "start": "2710559",
    "end": "2717489"
  },
  {
    "text": "equal mattress you can use it as the parameter so you just say here we allow",
    "start": "2717489",
    "end": "2723400"
  },
  {
    "text": "cos to store notify with any whiskey and anything that is not equal to the null",
    "start": "2723400",
    "end": "2729489"
  },
  {
    "text": "pointer comparing has 7 mattress is not equally equal less than less equal",
    "start": "2729489",
    "end": "2735489"
  },
  {
    "text": "greater than greater equal and regular expressions you can actually if you want",
    "start": "2735489",
    "end": "2743589"
  },
  {
    "text": "to you can negate a match it doesn't make any sense whatsoever for the first six but for regular expressions it can",
    "start": "2743589",
    "end": "2749950"
  },
  {
    "text": "actually be easier to say instead of trying to reverse in invert a regular",
    "start": "2749950",
    "end": "2756039"
  },
  {
    "text": "expression it can be easier to say match is not this regular expression so you",
    "start": "2756039",
    "end": "2761559"
  },
  {
    "text": "just resort invert it with operator not the exclamation mark if you have really",
    "start": "2761559",
    "end": "2770140"
  },
  {
    "text": "messed up your design you may have overloads of this notified function with",
    "start": "2770140",
    "end": "2776190"
  },
  {
    "text": "different signatures where the second parameter is actually equal comparable",
    "start": "2776190",
    "end": "2781839"
  },
  {
    "text": "to the null pointer I've actually seen such programs for real if you have that",
    "start": "2781839",
    "end": "2789759"
  },
  {
    "text": "you can disambiguate the caller say it's this one",
    "start": "2789759",
    "end": "2795238"
  },
  {
    "text": "when you need this really think about your design it's it's not healthy but like I mentioned",
    "start": "2795630",
    "end": "2803160"
  },
  {
    "text": "earlier also programs with souls and health needs tests so doing that it",
    "start": "2803160",
    "end": "2811110"
  },
  {
    "start": "2809000",
    "end": "2828000"
  },
  {
    "text": "still fails because we haven't done anything about the problem with but we have an a different error message as we",
    "start": "2811110",
    "end": "2816780"
  },
  {
    "text": "see that there was no match for this call with my pointer but there was an",
    "start": "2816780",
    "end": "2823590"
  },
  {
    "text": "expectation for another call so you see",
    "start": "2823590",
    "end": "2829980"
  },
  {
    "start": "2828000",
    "end": "2857000"
  },
  {
    "text": "the bug it's on the highlighted line we",
    "start": "2829980",
    "end": "2837960"
  },
  {
    "text": "should only call notify when we actually have a call back that is not a default constructor one so now everything is",
    "start": "2837960",
    "end": "2845030"
  },
  {
    "text": "absolutely fine so now it's time for me",
    "start": "2845030",
    "end": "2852180"
  },
  {
    "text": "to wrap up because I don't have time to talk about more advanced stuff it's one",
    "start": "2852180",
    "end": "2859860"
  },
  {
    "start": "2857000",
    "end": "2970000"
  },
  {
    "text": "thing from play I have if you go to the github page click on documentation video",
    "start": "2859860",
    "end": "2866010"
  },
  {
    "text": "you will find a cheat sheet the cheat sheet has its actually to pay to a four",
    "start": "2866010",
    "end": "2871920"
  },
  {
    "text": "pages print them out pin them to the wall next to your screen and here we can",
    "start": "2871920",
    "end": "2878490"
  },
  {
    "text": "see pretty much everything that I've talked about today so you've seen how to use make mock and make cosmic with a",
    "start": "2878490",
    "end": "2885480"
  },
  {
    "text": "name and a signature and optionally an override to create multi member",
    "start": "2885480",
    "end": "2891900"
  },
  {
    "text": "functions you've seen how to use require call allow calls for beard core and also",
    "start": "2891900",
    "end": "2897150"
  },
  {
    "text": "the name diff counterparts where you get a unique pointer instead of a local",
    "start": "2897150",
    "end": "2902970"
  },
  {
    "text": "object that leaves spin with the local scope you've seen a brief introduction",
    "start": "2902970",
    "end": "2908760"
  },
  {
    "text": "to in the sequence you can do a lot more with sequences than our show but you you",
    "start": "2908760",
    "end": "2914250"
  },
  {
    "text": "would please seen it and you've seen how to use dot x to deviate from the default",
    "start": "2914250",
    "end": "2920250"
  },
  {
    "text": "of being exactly one call for require call you seen how to use width and the",
    "start": "2920250",
    "end": "2927980"
  },
  {
    "text": "conditions to constrain calls that are otherwise wide open",
    "start": "2927980",
    "end": "2933100"
  },
  {
    "text": "and side-effect to manipulate data and return to get values with any expression",
    "start": "2933100",
    "end": "2939700"
  },
  {
    "text": "I have not shown you doctoral but I think you can figure that one out it",
    "start": "2939700",
    "end": "2945880"
  },
  {
    "text": "seems that in all these you can use positional names for the parameters underscore underscore two etc and then",
    "start": "2945880",
    "end": "2953830"
  },
  {
    "text": "the LR versions of them local reference where you manipulate local variables by",
    "start": "2953830",
    "end": "2962680"
  },
  {
    "text": "reference he'll be a dragons be careful with lifetimes I'm not showing you very",
    "start": "2962680",
    "end": "2971740"
  },
  {
    "text": "much of page two but you've seen the underscore matter that match is",
    "start": "2971740",
    "end": "2978040"
  },
  {
    "text": "absolutely anything at all there is a typed version of it's a macro of any so",
    "start": "2978040",
    "end": "2985210"
  },
  {
    "text": "you can say any int again if you have overloads that would be ambiguous with",
    "start": "2985210",
    "end": "2990580"
  },
  {
    "text": "just the underscore and you seen how to use it not equal and I mentioned",
    "start": "2990580",
    "end": "2995850"
  },
  {
    "text": "disambiguating that one to is needed and a briefly mentioned that you can use the",
    "start": "2995850",
    "end": "3001440"
  },
  {
    "text": "exclamation mark to invert amateur unfortunately I haven't had time to",
    "start": "3001440",
    "end": "3006500"
  },
  {
    "text": "describe how you write your own matters it's it's not difficult at all but given",
    "start": "3006500",
    "end": "3012090"
  },
  {
    "text": "that I have seven minutes left or of this lot there's not a chance I can do that you can also actually if your",
    "start": "3012090",
    "end": "3023510"
  },
  {
    "text": "parameters to call our pointer like a roll point or a unique pointer of shared",
    "start": "3023510",
    "end": "3031260"
  },
  {
    "text": "pointer or anything with that can be referenced with the operator store you",
    "start": "3031260",
    "end": "3036870"
  },
  {
    "text": "can actually use matches for that and say star equal five meaning that this",
    "start": "3036870",
    "end": "3045030"
  },
  {
    "text": "pointer when the referenced must be have the value 5",
    "start": "3045030",
    "end": "3050810"
  },
  {
    "text": "in the rare case when you need to have",
    "start": "3052110",
    "end": "3059580"
  },
  {
    "text": "control of lifetime of objects in your test when for example if you give your",
    "start": "3059580",
    "end": "3066220"
  },
  {
    "text": "unit under test amok and gives it ownership of it and it is required to delete it at some point you can use this",
    "start": "3066220",
    "end": "3074740"
  },
  {
    "text": "convenience with horror movie time Death",
    "start": "3074740",
    "end": "3080080"
  },
  {
    "text": "Watch and required destruction or name required destruction again debatable if",
    "start": "3080080",
    "end": "3087130"
  },
  {
    "text": "that is good a sign of good design if you have that but again sometimes you",
    "start": "3087130",
    "end": "3092620"
  },
  {
    "text": "need to test code that isn't great this is not needed but it is a convenience it",
    "start": "3092620",
    "end": "3099070"
  },
  {
    "text": "makes life easier and that is pretty",
    "start": "3099070",
    "end": "3107830"
  },
  {
    "start": "3107000",
    "end": "3152000"
  },
  {
    "text": "much it I'm here the rest of the conference going home on Friday evening",
    "start": "3107830",
    "end": "3113950"
  },
  {
    "text": "catch me if you want something I can even show you how to write custom matrices if you buy an idea here's where",
    "start": "3113950",
    "end": "3122950"
  },
  {
    "text": "you find the complain and here's how you can spam me should you want to do that and there is time for questions if you",
    "start": "3122950",
    "end": "3131230"
  },
  {
    "text": "want",
    "start": "3131230",
    "end": "3133320"
  },
  {
    "text": "when I say thank you for your attention and don't forget to write to paint weird",
    "start": "3137800",
    "end": "3144920"
  },
  {
    "text": "pictures for your programs thank you",
    "start": "3144920",
    "end": "3149890"
  },
  {
    "text": "[Applause]",
    "start": "3151340",
    "end": "3154229"
  }
]