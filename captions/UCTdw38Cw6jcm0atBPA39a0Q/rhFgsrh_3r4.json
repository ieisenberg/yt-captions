[
  {
    "start": "0",
    "end": "119000"
  },
  {
    "text": "thank you for coming I know it's the after lunch slot so everybody's a little",
    "start": "4600",
    "end": "9889"
  },
  {
    "text": "sleepy I know I am usually I hope you brought coffee or tea or something and I thank you for joining me and we're",
    "start": "9889",
    "end": "18259"
  },
  {
    "text": "gonna spend almost an hour talking about some already present constructs and",
    "start": "18259",
    "end": "27939"
  },
  {
    "text": "objects in the standard library and some new stuff coming in C++ 20 and maybe",
    "start": "27939",
    "end": "33470"
  },
  {
    "text": "some even more exotic stuff coming even later and we're gonna discuss all of",
    "start": "33470",
    "end": "39680"
  },
  {
    "text": "this through our regular lens and do some some some a little dry mathematical",
    "start": "39680",
    "end": "47960"
  },
  {
    "text": "analysis of the of the subject and hopefully we'll draw some useful conclusions out of all the theory",
    "start": "47960",
    "end": "55549"
  },
  {
    "text": "I'm Victor sure like I said I've been working on advanced solar for over a",
    "start": "55549",
    "end": "62780"
  },
  {
    "text": "decade now building a large set of tools and applications helping clients",
    "start": "62780",
    "end": "68560"
  },
  {
    "text": "visualize and migrate their Windows applications to a new application format",
    "start": "68560",
    "end": "74049"
  },
  {
    "text": "MSI X and I've been known to tinker with our huge codebase and modernize it and",
    "start": "74049",
    "end": "81530"
  },
  {
    "text": "even build tools to help along the way such as clan portals has anybody seen one of the versions of",
    "start": "81530",
    "end": "90170"
  },
  {
    "text": "my previous talk on regular types anybody no okay",
    "start": "90170",
    "end": "95630"
  },
  {
    "text": "excellent because I'm gonna spend a little bit of time reviewing those",
    "start": "95630",
    "end": "101689"
  },
  {
    "text": "aspects and reiterating the important bits before we really dive in and",
    "start": "101689",
    "end": "107799"
  },
  {
    "text": "analyze some of the examples the good and the bad parts of the designs in the",
    "start": "107799",
    "end": "115549"
  },
  {
    "text": "library features in C++ 17 and coming in 20 so why regular types why are we",
    "start": "115549",
    "end": "121700"
  },
  {
    "start": "119000",
    "end": "470000"
  },
  {
    "text": "talking about this well it's a it's a",
    "start": "121700",
    "end": "126770"
  },
  {
    "text": "moment to reflect back on STL and its design principles and as best stated by",
    "start": "126770",
    "end": "132200"
  },
  {
    "text": "Alexander Stepanov in his seminal paper from more than 20 years ago now the",
    "start": "132200",
    "end": "138170"
  },
  {
    "text": "on fundamentals of generic programming and we shall see that regular types naturally appear as necessary",
    "start": "138170",
    "end": "144560"
  },
  {
    "text": "foundational blocks for building programs and we try to investigate the",
    "start": "144560",
    "end": "150560"
  },
  {
    "text": "requirements that STL imposes on our types and its types in order for",
    "start": "150560",
    "end": "157370"
  },
  {
    "text": "algorithms to work properly but this talk is not about not just about regular types it's about values about objects",
    "start": "157370",
    "end": "165790"
  },
  {
    "text": "concepts as defined by the next standard ordering relations requirements on types",
    "start": "165790",
    "end": "172459"
  },
  {
    "text": "about equality which you will see it's a difficult subject to define properly about whole-part semantics for objects",
    "start": "172459",
    "end": "180110"
  },
  {
    "text": "about object lifetimes of course about standard span because it's in the title",
    "start": "180110",
    "end": "187030"
  },
  {
    "text": "about cpp core guidelines and we shall see bits and pieces of these ideas in",
    "start": "187030",
    "end": "195160"
  },
  {
    "text": "c++ 1720 and even stuff coming later on has anyone seen these two-part series of",
    "start": "195160",
    "end": "204230"
  },
  {
    "text": "talks by titus winters from cpp con okay",
    "start": "204230",
    "end": "209440"
  },
  {
    "text": "just one hand i do highly recommend that you watch them when you have the time",
    "start": "209440",
    "end": "215450"
  },
  {
    "text": "and I'm gonna draw your attention to part two which focuses on type properties and what properties can",
    "start": "215450",
    "end": "222799"
  },
  {
    "text": "describe types and type families that is combination of properties that make",
    "start": "222799",
    "end": "228470"
  },
  {
    "text": "useful type design but let's start with the basics before we begin analysis we",
    "start": "228470",
    "end": "235310"
  },
  {
    "text": "have to build a common vocabulary so we know what we're talking about as a group and feel free to interject if we have",
    "start": "235310",
    "end": "242570"
  },
  {
    "text": "questions or opinions so a datum is a finite sequence of zeros and ones that's",
    "start": "242570",
    "end": "249079"
  },
  {
    "text": "it a value type is a correspondence between species and a set of datums a",
    "start": "249079",
    "end": "258100"
  },
  {
    "text": "value is a datum together with its interpretation for example an integer",
    "start": "258100",
    "end": "263660"
  },
  {
    "text": "represented that 32-bit two's complement in big endian architecture is a value",
    "start": "263660",
    "end": "268880"
  },
  {
    "text": "and the value cannot change and if a value type is uniquely",
    "start": "268880",
    "end": "275840"
  },
  {
    "text": "represented equality means representational equality if value is not ambiguous if a value type is not",
    "start": "275840",
    "end": "283100"
  },
  {
    "text": "ambiguous representational equality implies equality and an object notice as",
    "start": "283100",
    "end": "289610"
  },
  {
    "text": "in all P object but as in computer architecture object is representation of",
    "start": "289610",
    "end": "295940"
  },
  {
    "text": "a concrete entity as a value in computer memory characterized by address and length and an object has state and the",
    "start": "295940",
    "end": "305660"
  },
  {
    "text": "value of that value type so the state of an object can change as opposed to the",
    "start": "305660",
    "end": "311540"
  },
  {
    "text": "value itself a type is a set of values with the same interpretation function",
    "start": "311540",
    "end": "316880"
  },
  {
    "text": "that give it a meaning an operation on these values and the concept is just a",
    "start": "316880",
    "end": "322460"
  },
  {
    "text": "collection of similar types that share some properties has anyone heard of yo p",
    "start": "322460",
    "end": "328390"
  },
  {
    "text": "EO p so yo P stands for elements of",
    "start": "328390",
    "end": "333740"
  },
  {
    "text": "programming is this book right here by Alexander Stepanov it talks about the",
    "start": "333740",
    "end": "339830"
  },
  {
    "text": "foundation of programming concepts about operations orderings concepts iterators",
    "start": "339830",
    "end": "347050"
  },
  {
    "text": "algebraic data types and various algorithms and strategies on composing algorithms as the good news as of this",
    "start": "347050",
    "end": "356480"
  },
  {
    "text": "year is available as a free pdf on the official website so it's very handy too",
    "start": "356480",
    "end": "362210"
  },
  {
    "text": "if you want to look up stuff and it's searchable and you can reference stuff from it much much more easier than the",
    "start": "362210",
    "end": "368450"
  },
  {
    "text": "tip painted version I have here much more obscure acronym there FM 2gp",
    "start": "368450",
    "end": "374650"
  },
  {
    "text": "anybody guessing no it's this book from mathematics generic programming and this",
    "start": "374650",
    "end": "382910"
  },
  {
    "text": "book follows the story of starting with a Gyptian multiplication like 2000 BC",
    "start": "382910",
    "end": "390200"
  },
  {
    "text": "and going through number theory Euclid's GCD algorithm various abstractions",
    "start": "390200",
    "end": "397270"
  },
  {
    "text": "stages in mathematics and deriving generic algorithms all the way up to the 20th century with RSA",
    "start": "397270",
    "end": "405120"
  },
  {
    "text": "it's a fantastic book and it has a little bit of history tidbits and it's",
    "start": "405120",
    "end": "410310"
  },
  {
    "text": "very entertaining to to follow along and it's all about because of this guy",
    "start": "410310",
    "end": "416100"
  },
  {
    "text": "Alexander Stepanov but where am I going with this well my point is that mathematics really",
    "start": "416100",
    "end": "422580"
  },
  {
    "text": "does matter and I think this presentation by Alex a few years back is",
    "start": "422580",
    "end": "429360"
  },
  {
    "text": "a profound presentation for our field and I think everybody has a duty to at",
    "start": "429360",
    "end": "439020"
  },
  {
    "text": "least watch it once and it's full of wisdom and important concepts that",
    "start": "439020",
    "end": "444620"
  },
  {
    "text": "profoundly influence the way we have to think today about programming specifically if we really think about",
    "start": "444620",
    "end": "451880"
  },
  {
    "text": "generic algorithms and STL so the mathematics really is the language that",
    "start": "451880",
    "end": "458750"
  },
  {
    "text": "we use to think and internalize nature",
    "start": "458750",
    "end": "464639"
  },
  {
    "text": "and scientific processes and it is the way we should think about programming as well but you might say that hold on I've",
    "start": "464639",
    "end": "472020"
  },
  {
    "start": "470000",
    "end": "1133000"
  },
  {
    "text": "been programming for X number of years and I've never needed any math to do it and I don't really believe you and the",
    "start": "472020",
    "end": "481380"
  },
  {
    "text": "reason that things just worked for you is because others have thought long and hard and they've built abstractions and",
    "start": "481380",
    "end": "488280"
  },
  {
    "text": "algorithms and concepts that made it easier for you to use it in an intuitive",
    "start": "488280",
    "end": "495870"
  },
  {
    "text": "way giving you a feeling that you don't have the pressure of actually building",
    "start": "495870",
    "end": "501840"
  },
  {
    "text": "everything from first principles so stay with me I'm going somewhere with this and to further emphasize my points for",
    "start": "501840",
    "end": "510690"
  },
  {
    "text": "the really enthusiastic so of you I'm going to recommend a pretty big series",
    "start": "510690",
    "end": "516450"
  },
  {
    "text": "of lectures given by Alex at a nine it's all about an algorithmic journey that",
    "start": "516450",
    "end": "525600"
  },
  {
    "text": "you're going to take with with him and his class and exploring various concepts in mathematics as they evolved over",
    "start": "525600",
    "end": "532470"
  },
  {
    "text": "years and it's all the way a parallel to programming concepts",
    "start": "532470",
    "end": "538410"
  },
  {
    "text": "building abstractions and generic algorithms from these ancient ideas it's",
    "start": "538410",
    "end": "543480"
  },
  {
    "text": "a fantastic resource many hours I've seen it all and it's fabulous and I do",
    "start": "543480",
    "end": "550980"
  },
  {
    "text": "recommend that you you follow along so it all leads up to this fundamentals of",
    "start": "550980",
    "end": "556800"
  },
  {
    "text": "generic programming there's the paper from 98 and generic programming depends",
    "start": "556800",
    "end": "563370"
  },
  {
    "text": "on the composition of programs into components that may be developed separately but combined arbitrarily and",
    "start": "563370",
    "end": "569930"
  },
  {
    "text": "subject to the well-defined interfaces and among the interfaces of interest the",
    "start": "569930",
    "end": "575220"
  },
  {
    "text": "most pervasive lien unconsciously used and are the fundamental operations common to all simply C++ types and",
    "start": "575220",
    "end": "581820"
  },
  {
    "text": "including built-in types and the way we extend these semantics to our",
    "start": "581820",
    "end": "587880"
  },
  {
    "text": "user-defined types that we construct like assignment equality copy",
    "start": "587880",
    "end": "593010"
  },
  {
    "text": "construction and so on and we must investigate the relations which must hold among these operations to preserve",
    "start": "593010",
    "end": "599670"
  },
  {
    "text": "consistency with their semantics with the built-in types and with the expectation of the programmers that are",
    "start": "599670",
    "end": "605700"
  },
  {
    "text": "using our libraries or our api's in other words we want a foundation",
    "start": "605700",
    "end": "611580"
  },
  {
    "text": "powerful enough to support any sophisticated programming tasks but simple and intuitive to reason about but",
    "start": "611580",
    "end": "619710"
  },
  {
    "text": "its simplicity a good goal where C++ developers are we not we thrive on",
    "start": "619710",
    "end": "624960"
  },
  {
    "text": "complexity well I just hate it when C++ developers brag about being able to",
    "start": "624960",
    "end": "630330"
  },
  {
    "text": "comprehend some complicated concept and showing off to others so I think we",
    "start": "630330",
    "end": "638220"
  },
  {
    "text": "should strive for simplicity and simple code is more readable code unsurprising",
    "start": "638220",
    "end": "644400"
  },
  {
    "text": "code is more maintainable code that moves complexity to abstractions often has fewer bugs and compilers and",
    "start": "644400",
    "end": "653100"
  },
  {
    "text": "libraries are very often much better than us at doing stuff so simplicity is",
    "start": "653100",
    "end": "658260"
  },
  {
    "text": "an act of generosity not just for you but for others that work with you so we",
    "start": "658260",
    "end": "665520"
  },
  {
    "text": "should strive for this and I'm going to draw your attention to",
    "start": "665520",
    "end": "670620"
  },
  {
    "text": "a recent paper again by titus winters revisiting regular types which evokes",
    "start": "670620",
    "end": "677610"
  },
  {
    "text": "the Anna Karenina principle for designing proper types in terms of that good types are lower all alike each",
    "start": "677610",
    "end": "685520"
  },
  {
    "text": "poorly defined type it's poorly designed in its own way so to paraphrase Tolstoy",
    "start": "685520",
    "end": "691310"
  },
  {
    "text": "so I think this paper is both the best",
    "start": "691310",
    "end": "696960"
  },
  {
    "text": "up-to-date synthesis on the original Stepanov paper from 21 years ago as well as a good investigation in what what it",
    "start": "696960",
    "end": "705660"
  },
  {
    "text": "means to using known values as if there are regular types and we're going to see some prominent examples in this talk",
    "start": "705660",
    "end": "712500"
  },
  {
    "text": "string of view and span and the analysis provides the basis to evaluate non",
    "start": "712500",
    "end": "719010"
  },
  {
    "text": "owning references and we should investigate how we can deal with these",
    "start": "719010",
    "end": "724140"
  },
  {
    "text": "kinds of new vocabulary types in terms of trying to stay close to the regular",
    "start": "724140",
    "end": "733920"
  },
  {
    "text": "design principles that STL expects and programmers expect so we'll have to go",
    "start": "733920",
    "end": "739290"
  },
  {
    "text": "back a little bit to STL any design routes and if you want the absolute",
    "start": "739290",
    "end": "745110"
  },
  {
    "text": "original presentation on this that's the Alec Stepanov gave a lecture at Adobe Systems back in 2002 so again a",
    "start": "745110",
    "end": "755670"
  },
  {
    "text": "very good presentation I do recommend the follow on the early days of STL and its adoption and the reception in the",
    "start": "755670",
    "end": "761280"
  },
  {
    "text": "community and I'm gonna draw some main",
    "start": "761280",
    "end": "767000"
  },
  {
    "text": "points from this presentation to build a",
    "start": "767000",
    "end": "772200"
  },
  {
    "text": "framework for us to analyze further so fundamental principles systematically",
    "start": "772200",
    "end": "777660"
  },
  {
    "text": "identifying and organizing algorithms and data structures seems obvious now finding the most general representation",
    "start": "777660",
    "end": "785250"
  },
  {
    "text": "of algorithms not always easy using whole-part value semantics for data",
    "start": "785250",
    "end": "791250"
  },
  {
    "text": "structures I think this bit eludes us as the community in general so we we tend to",
    "start": "791250",
    "end": "797370"
  },
  {
    "text": "have difficulty defining proper data structures that enforce this rule and using abstraction of addresses that",
    "start": "797370",
    "end": "804530"
  },
  {
    "text": "means iterators and nowadays ranges as an interface between algorithms and data structures again since obvious in",
    "start": "804530",
    "end": "811880"
  },
  {
    "text": "hindsight but back then this was brand-new and algorithms are associated",
    "start": "811880",
    "end": "819530"
  },
  {
    "text": "with a set of common properties for example addition multiplication min/max",
    "start": "819530",
    "end": "824900"
  },
  {
    "text": "are all associative operations and because of that you can reorder operands and you can paralyze and reduce",
    "start": "824900",
    "end": "831890"
  },
  {
    "text": "operations so it gives you automatic scalability just drawing on these common",
    "start": "831890",
    "end": "837230"
  },
  {
    "text": "properties and there are natural extension of 4,000 years of mathematics and of course that there is a generic",
    "start": "837230",
    "end": "844670"
  },
  {
    "text": "algorithm before behind every while and for loop I think after some talk",
    "start": "844670",
    "end": "850460"
  },
  {
    "text": "influential talk a few years back everybody should have this intuition by",
    "start": "850460",
    "end": "855620"
  },
  {
    "text": "now so STL data structures extend the semantics of C structures at two objects",
    "start": "855620",
    "end": "864440"
  },
  {
    "text": "should never intersect they should have separate they should be separate entities with separate lifetimes if",
    "start": "864440",
    "end": "870500"
  },
  {
    "text": "possible and STL little structures do have whole part semantics when you copy",
    "start": "870500",
    "end": "877820"
  },
  {
    "text": "the whole you copy the parts when the whole is destroyed all the parts are destroyed two things are equal if they",
    "start": "877820",
    "end": "884570"
  },
  {
    "text": "have the same number of parts and their corresponding parts are equal so makes sense but like I said we usually break",
    "start": "884570",
    "end": "891230"
  },
  {
    "text": "this rule when designing our or our own types we tend to forget this when we get",
    "start": "891230",
    "end": "896630"
  },
  {
    "text": "very practical and marché up all the things in our types generic programming",
    "start": "896630",
    "end": "904130"
  },
  {
    "text": "does have its drawbacks like very rarely abstraction penalty you have the",
    "start": "904130",
    "end": "909680"
  },
  {
    "text": "implementation in interface and c++ early binding horrible error messages",
    "start": "909680",
    "end": "914780"
  },
  {
    "text": "because we don't have a formal specification of interfaces yet we're going to have it soon duck typing the",
    "start": "914780",
    "end": "921740"
  },
  {
    "text": "algorithm could work for some data types but fail to compile when later apply to some other data types which which don't",
    "start": "921740",
    "end": "928370"
  },
  {
    "text": "have the required semantics so in order to get this to work we need to fully",
    "start": "928370",
    "end": "933800"
  },
  {
    "text": "specify requirements the algorithm pipes that means what",
    "start": "933800",
    "end": "939320"
  },
  {
    "text": "requirements does my type need to meet in order for this class of algorithms to",
    "start": "939320",
    "end": "944600"
  },
  {
    "text": "work on it so few examples of named requirements in the STL not going to go",
    "start": "944600",
    "end": "951110"
  },
  {
    "text": "through all of them so name requirements are used in the normal normative text of",
    "start": "951110",
    "end": "957770"
  },
  {
    "text": "the C++ standard to define expectations of the standard library and we're going to see some examples some of these",
    "start": "957770",
    "end": "964339"
  },
  {
    "text": "requirements are being formalized as C++ 20 using concepts and until then the",
    "start": "964339",
    "end": "970100"
  },
  {
    "text": "burden is on the programmer to ensure that the library templates are instantiated with the template arguments",
    "start": "970100",
    "end": "977240"
  },
  {
    "text": "that satisfy those requirements otherwise and we know the horrible error messages and sometimes it all compiles",
    "start": "977240",
    "end": "985490"
  },
  {
    "text": "fine but the behavior is not what we expect but what is a concept anyway",
    "start": "985490",
    "end": "991330"
  },
  {
    "text": "formal specification of concepts may see is possible for us to verify those template arguments that they satisfy the",
    "start": "991330",
    "end": "997970"
  },
  {
    "text": "expectations of the function and during overload resolution of course each",
    "start": "997970",
    "end": "1003940"
  },
  {
    "text": "concept is a predicate evaluated at compile time it becomes part of the interface of that function of that",
    "start": "1003940",
    "end": "1010149"
  },
  {
    "text": "algorithm and it's used as it has a constraint if you've been following",
    "start": "1010149",
    "end": "1016089"
  },
  {
    "text": "along maybe you've heard that the proposal of C++ concepts in C++ 20 have",
    "start": "1016089",
    "end": "1025540"
  },
  {
    "text": "been has been has suffered a recent renaming so the they went from Pascal",
    "start": "1025540",
    "end": "1032230"
  },
  {
    "text": "camelcase to snake case I think ID for this wonderful depiction of what",
    "start": "1032230",
    "end": "1038530"
  },
  {
    "text": "happened there anybody read little prince now I'm reading it right now with",
    "start": "1038530",
    "end": "1046420"
  },
  {
    "text": "my daughter so we basically went from this on the left to that on the right and my",
    "start": "1046420",
    "end": "1055000"
  },
  {
    "text": "personal rant I like the original Pascal case notation because and by the way all",
    "start": "1055000",
    "end": "1063070"
  },
  {
    "text": "these rationales are properly explained in the papers proposing the rename",
    "start": "1063070",
    "end": "1068080"
  },
  {
    "text": "whether I'm on the their side so I get the stage I get the rent so I think it's desirable to make",
    "start": "1068080",
    "end": "1075670"
  },
  {
    "text": "concepts stand out because it's something new and it's something that it's very different from anything else",
    "start": "1075670",
    "end": "1081880"
  },
  {
    "text": "we've had in the standard there are not types concepts are not types so giving",
    "start": "1081880",
    "end": "1088600"
  },
  {
    "text": "them a regular naming scheme to be uniform with the other types in the center I think leads to confusion we",
    "start": "1088600",
    "end": "1097090"
  },
  {
    "text": "might want consistency with the standard notation for template parameters for example if we take basic string STD",
    "start": "1097090",
    "end": "1104050"
  },
  {
    "text": "string template the template types are all using pass connotation so and it",
    "start": "1104050",
    "end": "1113440"
  },
  {
    "text": "leads to a little bit of confusion with type traits those of us who have been using type traits might be confused by",
    "start": "1113440",
    "end": "1120220"
  },
  {
    "text": "concepts being very similar in naming with type traits so and not always",
    "start": "1120220",
    "end": "1126820"
  },
  {
    "text": "giving the same results subtle subtleties are there so my preference",
    "start": "1126820",
    "end": "1132970"
  },
  {
    "text": "was the Pascal notation but what can you do so what's the practical apps upside if",
    "start": "1132970",
    "end": "1139570"
  },
  {
    "start": "1133000",
    "end": "1490000"
  },
  {
    "text": "I'm not a library developer wait what I care about all these things well because",
    "start": "1139570",
    "end": "1144640"
  },
  {
    "text": "you're hopefully using STL algorithms and data structures and because when you",
    "start": "1144640",
    "end": "1150160"
  },
  {
    "text": "design your own types and your own vocabulary types and AP is and public interfaces you need to think about the",
    "start": "1150160",
    "end": "1157930"
  },
  {
    "text": "expectations of programmers and you need to meet the expectations which regards",
    "start": "1157930",
    "end": "1163120"
  },
  {
    "text": "do what they're accustomed to in terms of using the standard library for example I'll give you just a short",
    "start": "1163120",
    "end": "1171130"
  },
  {
    "text": "example the sort algorithms from STL",
    "start": "1171130",
    "end": "1176190"
  },
  {
    "text": "expects a compare predicate and what are the requirements on a compare type well",
    "start": "1176190",
    "end": "1182770"
  },
  {
    "text": "must be some kind of function object that's a predicate the binary function",
    "start": "1182770",
    "end": "1187990"
  },
  {
    "text": "learn a predicate per se and it looks something like this but what kind of",
    "start": "1187990",
    "end": "1194140"
  },
  {
    "text": "ordering relationship is needed between the elements of the collection how can",
    "start": "1194140",
    "end": "1200500"
  },
  {
    "text": "we compare stuff if we define our own types what's the criteria we're gonna use what properties does our",
    "start": "1200500",
    "end": "1208330"
  },
  {
    "text": "criterion needs to meet in order to force or to work properly so we'll have",
    "start": "1208330",
    "end": "1214240"
  },
  {
    "text": "to see this the standard says it must be",
    "start": "1214240",
    "end": "1219850"
  },
  {
    "text": "strict with ordering and if you do a random survey if programmers actually",
    "start": "1219850",
    "end": "1226900"
  },
  {
    "text": "understand what's the quick ordering is you're not going to be very impressed but intuition tells you how it should",
    "start": "1226900",
    "end": "1234820"
  },
  {
    "text": "behave if we must formalize it it must satisfies these axioms reflectivity and",
    "start": "1234820",
    "end": "1242080"
  },
  {
    "text": "the symmetry transitivity and importantly transitivity of equivalence because it's important to to have this",
    "start": "1242080",
    "end": "1251020"
  },
  {
    "text": "property in case you cannot decide if a goes before B or B goes before a my",
    "start": "1251020",
    "end": "1258490"
  },
  {
    "text": "previous talk on regular types I gave a very thorough it go through through this",
    "start": "1258490",
    "end": "1264520"
  },
  {
    "text": "analysis using some examples and I'm going to refer you to that talk if you want to learn more so like I said most",
    "start": "1264520",
    "end": "1274180"
  },
  {
    "text": "programmers won't be able to give you formal specification and explanation",
    "start": "1274180",
    "end": "1279490"
  },
  {
    "text": "like this one but they have built an intuition on how they should implement a predicate for comparing types during a",
    "start": "1279490",
    "end": "1288310"
  },
  {
    "text": "sort for example and we'll see that into that intuition comes from a parallel",
    "start": "1288310",
    "end": "1295060"
  },
  {
    "text": "with built-in types and the standard library types and how they behave very",
    "start": "1295060",
    "end": "1301090"
  },
  {
    "text": "closely related to stick with ordering we have the less than comparable requirement and it's the same thing as",
    "start": "1301090",
    "end": "1310000"
  },
  {
    "text": "before but instead of the generic comparator we use the less than mathematical relation and the",
    "start": "1310000",
    "end": "1316900"
  },
  {
    "text": "equivalence is same the same thing and so far we've covered a bunch of",
    "start": "1316900",
    "end": "1325110"
  },
  {
    "text": "requirements and we're going to focus now on equality comparable and we'll see",
    "start": "1325110",
    "end": "1331300"
  },
  {
    "text": "that this one is a little more difficult to grasp",
    "start": "1331300",
    "end": "1336720"
  },
  {
    "text": "again we have to define a vocabulary and we shall define a semi-regular type",
    "start": "1336820",
    "end": "1342250"
  },
  {
    "text": "something that is the full constructible move constructible copy constructible move assignable blah blah ba swappable",
    "start": "1342250",
    "end": "1348430"
  },
  {
    "text": "indestructible and a regular type is a semi-regular type that is equality",
    "start": "1348430",
    "end": "1354460"
  },
  {
    "text": "comparable and why is this important because regular as in Stepanov regular",
    "start": "1354460",
    "end": "1362470"
  },
  {
    "text": "as i'll call it as STL assumes equality is always defined or at least an",
    "start": "1362470",
    "end": "1367900"
  },
  {
    "text": "equivalence relations for all its types and the types we provide into it and",
    "start": "1367900",
    "end": "1373950"
  },
  {
    "text": "algorithms assume regular data structures STL was written with regularity in at its core and I'm going",
    "start": "1373950",
    "end": "1382180"
  },
  {
    "text": "to refer you to another older paper the Palo Alto technical report written by a",
    "start": "1382180",
    "end": "1389220"
  },
  {
    "text": "week or so of debates and discussions by lots of very smart people it's a it's a",
    "start": "1389220",
    "end": "1396910"
  },
  {
    "text": "very nice paper by the way everything",
    "start": "1396910",
    "end": "1402610"
  },
  {
    "text": "that's links in in my slides is navigable so later on when you get the",
    "start": "1402610",
    "end": "1408760"
  },
  {
    "text": "slides I do encourage you if you're interested to follow on the links and investigate on your own I do have plenty",
    "start": "1408760",
    "end": "1415450"
  },
  {
    "text": "of references in my slides so getting back to equality the axioms that must",
    "start": "1415450",
    "end": "1421870"
  },
  {
    "text": "stand for an inequality is reflectivity symmetry in transitivity we know this",
    "start": "1421870",
    "end": "1427210"
  },
  {
    "text": "from high school math or something like that yeah and the type must work with",
    "start": "1427210",
    "end": "1435030"
  },
  {
    "text": "comparator operator and the result should have standard semantics we cannot",
    "start": "1435030",
    "end": "1440170"
  },
  {
    "text": "impose some weird behavior or the the Equality yielding some weird semantics",
    "start": "1440170",
    "end": "1447430"
  },
  {
    "text": "that were not not expecting",
    "start": "1447430",
    "end": "1451620"
  },
  {
    "text": "so there is a distinction between equality and equivalence and four types",
    "start": "1455450",
    "end": "1462090"
  },
  {
    "text": "that satisfy both equality comparable and less than comparable stl it makes a clear distinction between those two and",
    "start": "1462090",
    "end": "1470029"
  },
  {
    "text": "equality and equivalence are defined as shown here and we can easily see that",
    "start": "1470029",
    "end": "1476700"
  },
  {
    "text": "equality is just a special case of equivalence and we say that equality",
    "start": "1476700",
    "end": "1483059"
  },
  {
    "text": "builds it's both an equivalence relation and builds partial ordering relation so",
    "start": "1483059",
    "end": "1490590"
  },
  {
    "text": "defining the Equality is hard as Stepanov himself said in that paper two",
    "start": "1490590",
    "end": "1497789"
  },
  {
    "text": "objects are equal if their corresponding parts are equal applied recursively including remote parts but not comparing",
    "start": "1497789",
    "end": "1504779"
  },
  {
    "text": "their addresses excluding in essential components and excluding components which identify related objects so kind",
    "start": "1504779",
    "end": "1511769"
  },
  {
    "text": "of a long-winded definition there and Stepanova himself says that this",
    "start": "1511769",
    "end": "1518490"
  },
  {
    "text": "definition leaves room for judgment because it's not always the case that it's so clear cut for our types so",
    "start": "1518490",
    "end": "1527960"
  },
  {
    "text": "strictly related to this and less than comparable concept we have in C++ 20 the",
    "start": "1527960",
    "end": "1534539"
  },
  {
    "start": "1528000",
    "end": "1623000"
  },
  {
    "text": "spaceship operator a very quick overview it brings consistent comparison table operations two types I think it's a",
    "start": "1534539",
    "end": "1542179"
  },
  {
    "text": "wonderful addition and it's very useful and saves you a lot of boilerplate code right and the theory behind it and the",
    "start": "1542179",
    "end": "1551580"
  },
  {
    "text": "specification in the standard is much more than we had on this slide so it's",
    "start": "1551580",
    "end": "1558299"
  },
  {
    "text": "all about defining comparison categories and types of orderings and the some kind",
    "start": "1558299",
    "end": "1567000"
  },
  {
    "text": "of relations between these types of warnings and I will caution you about weak equality here because there lies a",
    "start": "1567000",
    "end": "1575940"
  },
  {
    "text": "problem so the mothership has landed and very",
    "start": "1575940",
    "end": "1582210"
  },
  {
    "text": "recently we we have operator spaceship in throughout STL so",
    "start": "1582210",
    "end": "1588570"
  },
  {
    "text": "for its data structures and types so that should make things a lot more easy",
    "start": "1588570",
    "end": "1596279"
  },
  {
    "text": "for us I think it's this is a great contribution and if you wanna this is if",
    "start": "1596279",
    "end": "1603000"
  },
  {
    "text": "this is something very new to you and you want to read up more I recommend to you sources here to get you started",
    "start": "1603000",
    "end": "1608240"
  },
  {
    "text": "there they're not addressed at all there are they have examples and it's easy to",
    "start": "1608240",
    "end": "1613799"
  },
  {
    "text": "follow along so going from theory to practice if you want to dip your toes and you can try",
    "start": "1613799",
    "end": "1620850"
  },
  {
    "text": "out the examples in this blog post now getting to C++ 17 string view our first",
    "start": "1620850",
    "end": "1628679"
  },
  {
    "start": "1623000",
    "end": "1698000"
  },
  {
    "text": "candidate for analyst analysis stink view is a class template that describes",
    "start": "1628679",
    "end": "1635220"
  },
  {
    "text": "an object that can refer to constant continuous sequence of charlyk characters which are like object and it",
    "start": "1635220",
    "end": "1642179"
  },
  {
    "text": "does not manage the storage it refers to the lifetime is up to the color obviously as the name view and I have a",
    "start": "1642179",
    "end": "1651570"
  },
  {
    "text": "whole talk that I did last year on string view if you want to learn more",
    "start": "1651570",
    "end": "1657029"
  },
  {
    "text": "about problems with string view and some guidance and some parallels there and",
    "start": "1657029",
    "end": "1663570"
  },
  {
    "text": "what's it good for and again we should see a few things",
    "start": "1663570",
    "end": "1669899"
  },
  {
    "text": "today I do recommend that you watch that and does anybody know why I have this",
    "start": "1669899",
    "end": "1677629"
  },
  {
    "text": "watermark on this slide do you recognize it rust yeah so Arthur O'Dwyer has a very nice",
    "start": "1677629",
    "end": "1687000"
  },
  {
    "text": "article very accessible and insightful I think on string view and he defines it",
    "start": "1687000",
    "end": "1694169"
  },
  {
    "text": "as a burrow type boring from rust terminology there and string view",
    "start": "1694169",
    "end": "1700080"
  },
  {
    "start": "1698000",
    "end": "1768000"
  },
  {
    "text": "basically succeeds admirably at the goal that would that was its design goal to",
    "start": "1700080",
    "end": "1705840"
  },
  {
    "text": "be a drop-in replacement for a constituent reference for parameters the problem is that it's something new up to",
    "start": "1705840",
    "end": "1715440"
  },
  {
    "text": "up to C + + 17 we were used to object types that have reference semantics and",
    "start": "1715440",
    "end": "1721379"
  },
  {
    "text": "value at our values so string who is neither",
    "start": "1721379",
    "end": "1726390"
  },
  {
    "text": "it's a new kind of Beast and Arthur calls it a burro type and Perot types",
    "start": "1726390",
    "end": "1733080"
  },
  {
    "text": "are essentially borrowed references to existing objects they lack ownership they are short-lived",
    "start": "1733080",
    "end": "1739230"
  },
  {
    "text": "hopefully they generally can do without an assignment operator although for",
    "start": "1739230",
    "end": "1746160"
  },
  {
    "text": "singly that's not the case they generally appeal orient function parameter lists and cannot be stored",
    "start": "1746160",
    "end": "1753210"
  },
  {
    "text": "safely in data structures all returned from functions because problems later",
    "start": "1753210",
    "end": "1759060"
  },
  {
    "text": "and all about these kinds of problems you can find details in examples in my",
    "start": "1759060",
    "end": "1765240"
  },
  {
    "text": "other talk on string D string view is",
    "start": "1765240",
    "end": "1770640"
  },
  {
    "start": "1768000",
    "end": "1846000"
  },
  {
    "text": "perhaps the first mainstream borrow type we've seen this kind of things in exotic",
    "start": "1770640",
    "end": "1776430"
  },
  {
    "text": "types in STL before but those are types that are not used that much or are used",
    "start": "1776430",
    "end": "1783840"
  },
  {
    "text": "by library developers or stn maintainer and string view begs to be used by mere",
    "start": "1783840",
    "end": "1792390"
  },
  {
    "text": "mortals like us in mainstream code so it's very it's very inviting as a type",
    "start": "1792390",
    "end": "1798690"
  },
  {
    "text": "very appealing and its value proposition it's good so that's why we need to be",
    "start": "1798690",
    "end": "1803910"
  },
  {
    "text": "very careful that we understand and use it properly so still view is assignable",
    "start": "1803910",
    "end": "1809790"
  },
  {
    "text": "but assignment has shallow semantics and because this is okay because the",
    "start": "1809790",
    "end": "1818070"
  },
  {
    "text": "underlying strings are immutable so we're pointing we have a view to a constant the continuous sequence of",
    "start": "1818070",
    "end": "1824010"
  },
  {
    "text": "characters meanwhile the comparison has deep semantics because that's what you",
    "start": "1824010",
    "end": "1829110"
  },
  {
    "text": "would expect when comparing two strings you would expect to compare the strings behind that they point to so like a",
    "start": "1829110",
    "end": "1836340"
  },
  {
    "text": "lexicographic counter so already we have",
    "start": "1836340",
    "end": "1842400"
  },
  {
    "text": "some interesting design choices here so people need to be aware of this so when",
    "start": "1842400",
    "end": "1848400"
  },
  {
    "start": "1846000",
    "end": "1895000"
  },
  {
    "text": "the underlying data type is excellent and constant we can kind of determine",
    "start": "1848400",
    "end": "1854430"
  },
  {
    "text": "the rest from analyzing the context and we can see if this usage looks regular and when",
    "start": "1854430",
    "end": "1862770"
  },
  {
    "text": "used properly as a function parameter stream view works well as if it's a",
    "start": "1862770",
    "end": "1868440"
  },
  {
    "text": "regular type so it's not quite regular but in properly used context and if we",
    "start": "1868440",
    "end": "1877280"
  },
  {
    "text": "by construction know that the the data it points to it's still around because",
    "start": "1877280",
    "end": "1884280"
  },
  {
    "text": "it's constant we kind of can use it as if it's a regular type so not great not",
    "start": "1884280",
    "end": "1892350"
  },
  {
    "text": "terrible and we get to span so span it",
    "start": "1892350",
    "end": "1898940"
  },
  {
    "start": "1895000",
    "end": "1912000"
  },
  {
    "text": "it's an interesting design so it's a very confusing type that the world's",
    "start": "1898940",
    "end": "1905310"
  },
  {
    "text": "best C+ past experts are not quite sure what to make off and we're going to see",
    "start": "1905310",
    "end": "1910410"
  },
  {
    "text": "why think of span as in a review as in",
    "start": "1910410",
    "end": "1916440"
  },
  {
    "text": "we've seen string view but the underlying data is mutable this is a big",
    "start": "1916440",
    "end": "1922380"
  },
  {
    "text": "difference so we have to go to the historical background for this it all",
    "start": "1922380",
    "end": "1930150"
  },
  {
    "start": "1924000",
    "end": "1958000"
  },
  {
    "text": "originated in the C++ core guidelines have you heard of the core guidelines",
    "start": "1930150",
    "end": "1935910"
  },
  {
    "text": "pretty all by now 2008 15 or 16 I think so we have F 24 clause it's properly",
    "start": "1935910",
    "end": "1945240"
  },
  {
    "text": "organized like a legal document I love that F 24 use span T or span PT to",
    "start": "1945240",
    "end": "1952110"
  },
  {
    "text": "designate a half-open sequence and pro bounce bounce safety profile what do",
    "start": "1952110",
    "end": "1958170"
  },
  {
    "start": "1958000",
    "end": "2042000"
  },
  {
    "text": "those mean well in formal non-explicit",
    "start": "1958170",
    "end": "1963840"
  },
  {
    "text": "ranges are often a source of errors that's true and Ray J ranges are extremely common in",
    "start": "1963840",
    "end": "1970650"
  },
  {
    "text": "C++ code again true we're accustomed to using pointers but it typically implicit",
    "start": "1970650",
    "end": "1976470"
  },
  {
    "text": "and the correct usage is hard to ensure okay true given a pair of arguments P",
    "start": "1976470",
    "end": "1985020"
  },
  {
    "text": "and n designated by PN P plus in general it's impossible to know if",
    "start": "1985020",
    "end": "1991450"
  },
  {
    "text": "there really are n elements that we can access safely after the referencing P",
    "start": "1991450",
    "end": "1997510"
  },
  {
    "text": "and going forward so you kind of have to be careful and understand the context",
    "start": "1997510",
    "end": "2003630"
  },
  {
    "text": "and see where the data comes from GL GSL span GS l stands for guideline support",
    "start": "2003630",
    "end": "2011340"
  },
  {
    "text": "library it's a small header library that comes with the core guidelines and helps",
    "start": "2011340",
    "end": "2017400"
  },
  {
    "text": "you build your applications and helps tool vendors to build better tools we're",
    "start": "2017400",
    "end": "2022920"
  },
  {
    "text": "going to see more about that Spain and Spain T were designed to solve this problem by giving it an explicit context",
    "start": "2022920",
    "end": "2030150"
  },
  {
    "text": "making you explicitly say you define this range and taking this range as a",
    "start": "2030150",
    "end": "2035520"
  },
  {
    "text": "parameter as opposed to taking pair of iterators or pair of pointers or a pointer plus a",
    "start": "2035520",
    "end": "2041280"
  },
  {
    "text": "length almost because the main",
    "start": "2041280",
    "end": "2049590"
  },
  {
    "text": "difference being slices checked this bounds checked so you don't have any",
    "start": "2049590",
    "end": "2056510"
  },
  {
    "text": "runtime support here if you make mistakes you make mistakes there's no runtime and the bound safety profiles",
    "start": "2056510",
    "end": "2065540"
  },
  {
    "text": "gives us good recommendations don't use pointer arithmetic use pan instead only",
    "start": "2065540",
    "end": "2072720"
  },
  {
    "text": "index into arrays using constant expressions make sense no we're into pointer decay generally",
    "start": "2072720",
    "end": "2081300"
  },
  {
    "text": "good advice don't use standard library functions and types that are not bounce checked well",
    "start": "2081300",
    "end": "2087139"
  },
  {
    "text": "okay but sometimes we want performance we cannot always afford bounds checking",
    "start": "2087140",
    "end": "2092610"
  },
  {
    "text": "and a few links their own passing pointers to single objects about pointer",
    "start": "2092610",
    "end": "2099510"
  },
  {
    "text": "arithmetic and using the STL in a type safe matter all interesting with",
    "start": "2099510",
    "end": "2107040"
  },
  {
    "text": "examples and interesting recommendations how does this relate to our span",
    "start": "2107040",
    "end": "2112410"
  },
  {
    "start": "2110000",
    "end": "2170000"
  },
  {
    "text": "discussion well like I said the corgin has come with GSL like the gesture library and this includes types like",
    "start": "2112410",
    "end": "2119310"
  },
  {
    "text": "span string span owner and others many useful and its purpose was to introduce helpers",
    "start": "2119310",
    "end": "2125940"
  },
  {
    "text": "before things get standardized so you can get the ready access and experiment and use them right now before they get",
    "start": "2125940",
    "end": "2132620"
  },
  {
    "text": "standardized and Microsoft and others have been maintaining this implementation and the span proposal",
    "start": "2132620",
    "end": "2141900"
  },
  {
    "text": "that we have now in C++ 20 comes directly from the C++ core guidelines",
    "start": "2141900",
    "end": "2147750"
  },
  {
    "text": "from GSL explicitly and is intended as a replacement for unsafe pointer and",
    "start": "2147750",
    "end": "2153690"
  },
  {
    "text": "length parameter pairs so we expect it to be pervasively used as a vocabulary type for function parameters in",
    "start": "2153690",
    "end": "2161010"
  },
  {
    "text": "particular this quote is directly from verbs other okay and we have tools to",
    "start": "2161010",
    "end": "2171480"
  },
  {
    "start": "2170000",
    "end": "2222000"
  },
  {
    "text": "help with this we do have automatic checkers both in so",
    "start": "2171480",
    "end": "2177960"
  },
  {
    "text": "we have called guideline checkers that are installed by default with Visual Studio 2017 and 2019 and there's a new",
    "start": "2177960",
    "end": "2184830"
  },
  {
    "text": "gate package for Visual Studio 2015 if you're on the older version so from",
    "start": "2184830",
    "end": "2191670"
  },
  {
    "text": "Visual Studio 2015 to up to 2019 you get most of the checks there in the box and",
    "start": "2191670",
    "end": "2198110"
  },
  {
    "text": "you have 11 client ID that has many checks related to CPP core guidelines",
    "start": "2198110",
    "end": "2203700"
  },
  {
    "text": "and if you like to combine both like I do you can use client power tools that's",
    "start": "2203700",
    "end": "2210120"
  },
  {
    "text": "a plugin for Visual Studio and it uses LLVM client ID on the Visual Studio",
    "start": "2210120",
    "end": "2215730"
  },
  {
    "text": "Projects if you want so you can have both of both two words so to speak and",
    "start": "2215730",
    "end": "2222050"
  },
  {
    "start": "2222000",
    "end": "2261000"
  },
  {
    "text": "automatic checkers for example in any event client ID we have two checks that",
    "start": "2222050",
    "end": "2228450"
  },
  {
    "text": "are relevant to this discussion or a two-pointer DK and bounce pointer",
    "start": "2228450",
    "end": "2234240"
  },
  {
    "text": "arithmetic and basically it does check the recommendations in those two clauses",
    "start": "2234240",
    "end": "2240450"
  },
  {
    "text": "that I showed you earlier and they",
    "start": "2240450",
    "end": "2246240"
  },
  {
    "text": "generally work well this is the case for Visual Studio you have settings to",
    "start": "2246240",
    "end": "2252360"
  },
  {
    "text": "control which checks we're on and warning codes that",
    "start": "2252360",
    "end": "2258770"
  },
  {
    "text": "are of interest to our discussion today if we see a small very trivial example",
    "start": "2258770",
    "end": "2264830"
  },
  {
    "text": "of this you can see the lines were these warnings are emitted you have a legend",
    "start": "2264830",
    "end": "2270050"
  },
  {
    "text": "there for each error code to see what it means and you do have a way to suppress",
    "start": "2270050",
    "end": "2275600"
  },
  {
    "text": "those warnings locally if you wish personally I think it's ugly but if",
    "start": "2275600",
    "end": "2281510"
  },
  {
    "text": "that's the way you want to go it's there it's an option if you want to read more",
    "start": "2281510",
    "end": "2286609"
  },
  {
    "text": "link to the documentation and you can certainly have your way with it I love automatic checkers I use them but",
    "start": "2286609",
    "end": "2295340"
  },
  {
    "text": "in this case I think it's more noise than benefit for spans in general like",
    "start": "2295340",
    "end": "2303680"
  },
  {
    "text": "this example that I picked up from Twitter don't use pointer arithmetic use pen",
    "start": "2303680",
    "end": "2311210"
  },
  {
    "text": "instead and that's developers reaction you don't have to understand the code",
    "start": "2311210",
    "end": "2317930"
  },
  {
    "text": "just the fact that some innocent pointer addition there it should give you in a",
    "start": "2317930",
    "end": "2325310"
  },
  {
    "text": "pretty large code base you can imagine that the amount of false positives these checks might be check my brain or this",
    "start": "2325310",
    "end": "2332780"
  },
  {
    "text": "one that recommends using span instead I don't know I'm not sure I would",
    "start": "2332780",
    "end": "2338660"
  },
  {
    "text": "recommend using span here so in general",
    "start": "2338660",
    "end": "2343670"
  },
  {
    "text": "these sorry these reviews are a little skewed because they come from the games industry but and they're not such big",
    "start": "2343670",
    "end": "2351350"
  },
  {
    "text": "fans of modern C++ techniques but I think I share the sentiment I I wouldn't",
    "start": "2351350",
    "end": "2360380"
  },
  {
    "text": "jump on fixing stuff that these checkers start to percolate in my code base",
    "start": "2360380",
    "end": "2366160"
  },
  {
    "text": "because it's very easy to introduce bugs and make code even more unreadable that",
    "start": "2366160",
    "end": "2371330"
  },
  {
    "text": "it is now now getting back to span this is how it looks like it's basically a",
    "start": "2371330",
    "end": "2377090"
  },
  {
    "start": "2372000",
    "end": "2424000"
  },
  {
    "text": "pointer in a size you can have either a static extent or a dynamic extent so we",
    "start": "2377090",
    "end": "2383390"
  },
  {
    "text": "can see this by the way we can construct it you can construct it from a static array or you can have a dynamic size",
    "start": "2383390",
    "end": "2390080"
  },
  {
    "text": "which is to be expected notable functions front back index",
    "start": "2390080",
    "end": "2397010"
  },
  {
    "text": "operator data getting the span as bytes or as writable bytes for streaming",
    "start": "2397010",
    "end": "2406059"
  },
  {
    "text": "useful stuff first last you can get sub",
    "start": "2406210",
    "end": "2411710"
  },
  {
    "text": "views and subs pans just like with string view you can have remove prefix",
    "start": "2411710",
    "end": "2417290"
  },
  {
    "text": "remove suffix stuff like that so things that you would expect for a view like object and useful stuff but",
    "start": "2417290",
    "end": "2427099"
  },
  {
    "start": "2424000",
    "end": "2493000"
  },
  {
    "text": "there have been some usability enhancements in span over over time for example the two front and back member",
    "start": "2427099",
    "end": "2433880"
  },
  {
    "text": "functions that were added actually to have consistency with standard lebryk",
    "start": "2433880",
    "end": "2439430"
  },
  {
    "text": "containers for example like vector again for consistency we've marked those empty",
    "start": "2439430",
    "end": "2447349"
  },
  {
    "text": "as no discard to because it's a such a crazy name but being consistent with",
    "start": "2447349",
    "end": "2454190"
  },
  {
    "text": "vector is a requirement I guess removing operator parentheses this is a vestigial",
    "start": "2454190",
    "end": "2460700"
  },
  {
    "text": "trace from the back in the original proposal when we it was designed as an array view as a multi-dimensional span",
    "start": "2460700",
    "end": "2468430"
  },
  {
    "text": "so it's not really necessary and being",
    "start": "2468430",
    "end": "2473450"
  },
  {
    "text": "able to use structural bindings with fixed size spans again it's a very useful construct and we have some",
    "start": "2473450",
    "end": "2479810"
  },
  {
    "text": "utilities there some functions to get to the tuple elements and span pieces out",
    "start": "2479810",
    "end": "2487550"
  },
  {
    "text": "of it and when it when it has a static extent WWSD what does this mean what",
    "start": "2487550",
    "end": "2500510"
  },
  {
    "start": "2493000",
    "end": "2506000"
  },
  {
    "text": "would step on off do getting back to they get getting back to the beginning",
    "start": "2500510",
    "end": "2505730"
  },
  {
    "text": "of the talk so I don't know I think he would quit at this point but let's see I",
    "start": "2505730",
    "end": "2515089"
  },
  {
    "text": "like this paper very much I don't read a lot of standard proposals I read some",
    "start": "2515089",
    "end": "2521450"
  },
  {
    "text": "but not a lot I'm not part of the committee so I'm just here to rant I would help but I",
    "start": "2521450",
    "end": "2529280"
  },
  {
    "text": "mainly rent but I like this paper by Tony Bernard and should Spain be regular",
    "start": "2529280",
    "end": "2538210"
  },
  {
    "text": "true story I didn't know about this paper until I started until I proposed",
    "start": "2538210",
    "end": "2543230"
  },
  {
    "text": "this talk and I started researching this talk so coincidence in the title I think not but it's a very nice paper and it",
    "start": "2543230",
    "end": "2552050"
  },
  {
    "text": "starts copy or copy not there is no shallow and Giza gives a very succinct",
    "start": "2552050",
    "end": "2562220"
  },
  {
    "text": "and insightful analysis on span at as it",
    "start": "2562220",
    "end": "2567710"
  },
  {
    "text": "was almost a year ago and gives some",
    "start": "2567710",
    "end": "2573680"
  },
  {
    "text": "strategies some recommendations I wanna Harvey can deal with it and I'm gonna anywhere it's some some of these things",
    "start": "2573680",
    "end": "2580460"
  },
  {
    "text": "do now Oprah nineteen overloading operators can be dangerous when you change the common meaning of the",
    "start": "2580460",
    "end": "2586250"
  },
  {
    "text": "operator we've seen this when it we talked earlier about comparison we cannot make it mean something else",
    "start": "2586250",
    "end": "2592190"
  },
  {
    "text": "we could but it's not something we would expect the meaning of copy construction",
    "start": "2592190",
    "end": "2597800"
  },
  {
    "text": "and copy assignment is to copy the value of the object this is generally what people expect the meaning of equals and",
    "start": "2597800",
    "end": "2606650"
  },
  {
    "text": "less than is to compare the value of the object copy assignment and equality are",
    "start": "2606650",
    "end": "2611960"
  },
  {
    "text": "expected to go together as is as if for built-in types so if we copy something",
    "start": "2611960",
    "end": "2618110"
  },
  {
    "text": "or we assign something and then we test for equality we expect to get consistent results when we design a class type",
    "start": "2618110",
    "end": "2626720"
  },
  {
    "text": "where ever possible we should strive to make it regular and Tony makes a direct",
    "start": "2626720",
    "end": "2633710"
  },
  {
    "text": "reference to this yellow book elements of programming and the copy for span is",
    "start": "2633710",
    "end": "2642380"
  },
  {
    "start": "2637000",
    "end": "2645000"
  },
  {
    "text": "shallow so it just copies the pointer in the size and we have two strategies we",
    "start": "2642380",
    "end": "2649490"
  },
  {
    "start": "2645000",
    "end": "2759000"
  },
  {
    "text": "can make the comparison deep the elements of the span are called compared",
    "start": "2649490",
    "end": "2654860"
  },
  {
    "text": "using standard equal and this is what this was actually the first design of",
    "start": "2654860",
    "end": "2660059"
  },
  {
    "text": "span just like with string view all the way through this talk I'm gonna make",
    "start": "2660059",
    "end": "2666329"
  },
  {
    "text": "parallels to string view because people are gonna make it are gonna make them because string vido is already there and",
    "start": "2666329",
    "end": "2672779"
  },
  {
    "text": "it's inviting to compare it to something you know so the initial implementation",
    "start": "2672779",
    "end": "2679049"
  },
  {
    "text": "with a deep compare that means comparing each element in the span",
    "start": "2679049",
    "end": "2685160"
  },
  {
    "text": "however string you can't modify the elements it points to because it's a constant buffer as opposed to span so",
    "start": "2685160",
    "end": "2693150"
  },
  {
    "text": "shallow copy of string is similar to kind of a copy-on-write optimization so",
    "start": "2693150",
    "end": "2698569"
  },
  {
    "text": "that kind of thing when you implement like a string class and use copy-on-write for it so shallow copy",
    "start": "2698569",
    "end": "2705180"
  },
  {
    "text": "before seeing who makes perfect sense and like I said earlier deep compare",
    "start": "2705180",
    "end": "2710730"
  },
  {
    "text": "it's something that I think everyone would expect for a string view or string",
    "start": "2710730",
    "end": "2716309"
  },
  {
    "text": "type but for span we're talking about generic memory we're not talking about strings anything can be in a span so",
    "start": "2716309",
    "end": "2725720"
  },
  {
    "text": "span is span of value do we need a deep compare for span in all its generality",
    "start": "2725720",
    "end": "2733910"
  },
  {
    "text": "span is trying to act like a collection of the elements of which it spans so it",
    "start": "2733910",
    "end": "2739829"
  },
  {
    "text": "gives you the feeling that it's a drop in replacement work for a vector but",
    "start": "2739829",
    "end": "2745980"
  },
  {
    "text": "it's not regular as it stands basically span has reference semantics",
    "start": "2745980",
    "end": "2753349"
  },
  {
    "text": "anyway any where you try to cut it span is basically a span ref and a deep",
    "start": "2753349",
    "end": "2761490"
  },
  {
    "text": "comparison operator implies deep cost as in logical cost that means extending the",
    "start": "2761490",
    "end": "2767519"
  },
  {
    "text": "cost protection to all its parts the thing that is properly analyzed in elements of proper programming in",
    "start": "2767519",
    "end": "2773099"
  },
  {
    "text": "general and all the parts of that type that constitute its value and participate for example in comparison",
    "start": "2773099",
    "end": "2780150"
  },
  {
    "text": "operator or in copy so all the parts that you compare or that you copy all those parts should be cost protected",
    "start": "2780150",
    "end": "2787349"
  },
  {
    "text": "if we go that route and deep equality means the value of the",
    "start": "2787349",
    "end": "2792979"
  },
  {
    "text": "span elements it spends not just pointers and size we talked about this",
    "start": "2792979",
    "end": "2798799"
  },
  {
    "text": "already so if we want span to act like a lightweight representation of element in two references",
    "start": "2798799",
    "end": "2804049"
  },
  {
    "text": "we need to shallow compare that compares just the viewport that means the pointer and the length so",
    "start": "2804049",
    "end": "2811160"
  },
  {
    "text": "if we want it to be a lightweight helper object then we it implies shallow",
    "start": "2811160",
    "end": "2816739"
  },
  {
    "text": "cymatics and we cannot impose logical cost anyway so we were kind of drawn to",
    "start": "2816739",
    "end": "2825130"
  },
  {
    "text": "this conclusion that shallow const means shallow compared but shallow compare",
    "start": "2825130",
    "end": "2833660"
  },
  {
    "text": "might be really confusing to users expression especially if they already know string view and other types in STL",
    "start": "2833660",
    "end": "2841670"
  },
  {
    "text": "for example vector does not do shallow compare vector does deep compare yeah so",
    "start": "2841670",
    "end": "2849309"
  },
  {
    "text": "a shallow compare would become really confusing for people using it so the",
    "start": "2849309",
    "end": "2854710"
  },
  {
    "text": "final decision was to actually remove the compare all together from span so",
    "start": "2854710",
    "end": "2860450"
  },
  {
    "text": "this is the actual state it's in right now so but this is make this makes it",
    "start": "2860450",
    "end": "2867519"
  },
  {
    "start": "2866000",
    "end": "2903000"
  },
  {
    "text": "highly irregular so it's definitely not a regular design by now so it's a case",
    "start": "2867519",
    "end": "2874519"
  },
  {
    "text": "of it's a strange beast it's a case of unmet expectations span users of STL can reasonably expect span to be a drop-in",
    "start": "2874519",
    "end": "2881029"
  },
  {
    "text": "replacement for a constant vector reference just like Street View is for a constant string reference and that",
    "start": "2881029",
    "end": "2887890"
  },
  {
    "text": "happens to be mostly the case it works until of course you try to copy or",
    "start": "2887890",
    "end": "2893059"
  },
  {
    "text": "change its value and then it stops acting like a vector it's a so totally different beast altogether so span its",
    "start": "2893059",
    "end": "2900430"
  },
  {
    "text": "utmost semi-regular it's kind of like this by the way this was a very",
    "start": "2900430",
    "end": "2909920"
  },
  {
    "start": "2903000",
    "end": "2918000"
  },
  {
    "text": "interesting article by quarantine that I've linked to there are they if you can",
    "start": "2909920",
    "end": "2916119"
  },
  {
    "text": "read it it's really interesting so four",
    "start": "2916119",
    "end": "2921710"
  },
  {
    "start": "2918000",
    "end": "2969000"
  },
  {
    "text": "types for not only reference that like string view and spine you need more contextual information when working on",
    "start": "2921710",
    "end": "2928549"
  },
  {
    "text": "when when with such an instance to make up your mind about what's going on is it",
    "start": "2928549",
    "end": "2935750"
  },
  {
    "text": "safe to use here for example if you see a pull request you see a diff and you see a string you used or span it's not",
    "start": "2935750",
    "end": "2943460"
  },
  {
    "text": "enough to see the lines changed you need to understand the context you need to understand where is this data coming",
    "start": "2943460",
    "end": "2949160"
  },
  {
    "text": "from how is it used what's the outer context who's calling it so things to consider",
    "start": "2949160",
    "end": "2955390"
  },
  {
    "text": "we've talked about them earlier shallow copy shallow versus deep compare",
    "start": "2955390",
    "end": "2961670"
  },
  {
    "text": "constant mutability do we have logical cost or not and how operator equals",
    "start": "2961670",
    "end": "2969260"
  },
  {
    "text": "equals is implemented so we have reference semantics but without the",
    "start": "2969260",
    "end": "2976039"
  },
  {
    "text": "magic that can make reference is safer for example lifetime ex extension again",
    "start": "2976039",
    "end": "2981170"
  },
  {
    "text": "same as string view so that's why you have to be very careful how to how you",
    "start": "2981170",
    "end": "2986750"
  },
  {
    "text": "use it because string view or span will not extend the lifetime of the thing it points to so be careful there if you",
    "start": "2986750",
    "end": "2996829"
  },
  {
    "start": "2995000",
    "end": "3024000"
  },
  {
    "text": "want a compiler support this is how the situation stands right now the only",
    "start": "2996829",
    "end": "3002410"
  },
  {
    "text": "thing that works is clang seven or greater but using using just the pointer",
    "start": "3002410",
    "end": "3013359"
  },
  {
    "text": "doesn't work using just the lip C++ STL so the GCC STL doesn't have it yet so",
    "start": "3013359",
    "end": "3021190"
  },
  {
    "text": "this is the situation right now and it kind of evolved from clang 7 up to crank",
    "start": "3021190",
    "end": "3029710"
  },
  {
    "start": "3024000",
    "end": "3050000"
  },
  {
    "text": "9 so they were very early on adopting it and this is how the from the initial spec they remove the comparison",
    "start": "3029710",
    "end": "3036760"
  },
  {
    "text": "operators they did the usability improvements like first last and stuff",
    "start": "3036760",
    "end": "3043839"
  },
  {
    "text": "like that and up to extending sign size and extent for span span will evolve",
    "start": "3043839",
    "end": "3052349"
  },
  {
    "text": "even further we have proposals for a range constructor for same for string view and proposers to",
    "start": "3052349",
    "end": "3061240"
  },
  {
    "text": "use span of char as a stress dream replacement these are not yet approved",
    "start": "3061240",
    "end": "3067810"
  },
  {
    "text": "their into consideration so you cannot wait to use pan I'm sure you do have",
    "start": "3067810",
    "end": "3075820"
  },
  {
    "start": "3070000",
    "end": "3103000"
  },
  {
    "text": "implementations available you have implementations in chromium already you have implementations in Firefox the",
    "start": "3075820",
    "end": "3083800"
  },
  {
    "text": "implementation by the way related to your question the implementation in chromium is bounce checked so the one by",
    "start": "3083800",
    "end": "3090730"
  },
  {
    "text": "Christian brindle is more close to the spec in the standard so I would recommend that one because it's the the",
    "start": "3090730",
    "end": "3097360"
  },
  {
    "text": "most the one that's most close to what we're going to get in the C++ 20 and you",
    "start": "3097360",
    "end": "3105040"
  },
  {
    "text": "do have these five phases of joy can you guess what the problem is what I think",
    "start": "3105040",
    "end": "3112480"
  },
  {
    "text": "you can guess what the C++ feature was it was pan but can you guess the problem",
    "start": "3112480",
    "end": "3119580"
  },
  {
    "text": "Timur was having it lacks a feature test macro so you know what feature test",
    "start": "3119580",
    "end": "3127030"
  },
  {
    "start": "3126000",
    "end": "3184000"
  },
  {
    "text": "macros are it's a way to query to see if you have that feature as opposed as",
    "start": "3127030",
    "end": "3133030"
  },
  {
    "text": "opposed to using weird macros and compiler versions like we used to so",
    "start": "3133030",
    "end": "3141900"
  },
  {
    "text": "can't you use has equipped for that because 10 is that it's in its own header well not exactly because for",
    "start": "3142170",
    "end": "3149050"
  },
  {
    "text": "example leap C++ always has well it's headers in it has implemented and they're empty if you don't select the",
    "start": "3149050",
    "end": "3155920"
  },
  {
    "text": "right C++ version when you compile so that doesn't quite work and yeah you",
    "start": "3155920",
    "end": "3162850"
  },
  {
    "text": "care about this stuff if you want to be an early adopter for example using that",
    "start": "3162850",
    "end": "3168030"
  },
  {
    "text": "implementation on github so it you can",
    "start": "3168030",
    "end": "3173320"
  },
  {
    "text": "do it but it's tricky if you want to have zero impact when you actually get",
    "start": "3173320",
    "end": "3178480"
  },
  {
    "text": "to the type and you don't want change all your code just because you switched compilers to annual burn what do you",
    "start": "3178480",
    "end": "3185830"
  },
  {
    "start": "3184000",
    "end": "3237000"
  },
  {
    "text": "think about this combining two of my favorite pet peeves",
    "start": "3185830",
    "end": "3193040"
  },
  {
    "text": "into one glorious disaster this is what I call this slide so a span of steen",
    "start": "3193040",
    "end": "3198829"
  },
  {
    "text": "views as arguments to me from a language",
    "start": "3198829",
    "end": "3205609"
  },
  {
    "text": "standpoint make sense from a practical standpoint it doesn't because you're",
    "start": "3205609",
    "end": "3211130"
  },
  {
    "text": "most probably going to end up passing one of those arguments or a process in there off to some kind of API that",
    "start": "3211130",
    "end": "3219170"
  },
  {
    "text": "expects a null terminated string and string view it doesn't guarantee it's not terminated so that - and that's - so",
    "start": "3219170",
    "end": "3232150"
  },
  {
    "text": "it looks nice on paper not practical in reality beyond span possible areas of",
    "start": "3232150",
    "end": "3240890"
  },
  {
    "text": "interest in ranges I like this part more let's try the view slice view sliding",
    "start": "3240890",
    "end": "3248329"
  },
  {
    "text": "view cycle view chunk view what you said about those slices were something",
    "start": "3248329",
    "end": "3254690"
  },
  {
    "text": "similar so these are things that I would much prefer over just a simple wrapper",
    "start": "3254690",
    "end": "3261410"
  },
  {
    "text": "around a pointer in a length add other dimensions there are proposals for way",
    "start": "3261410",
    "end": "3269660"
  },
  {
    "start": "3264000",
    "end": "3304000"
  },
  {
    "text": "in the future for multi-dimensional span and multiple dimensional array one is",
    "start": "3269660",
    "end": "3275630"
  },
  {
    "text": "owning one is non owning so big difference here you can learn more about",
    "start": "3275630",
    "end": "3281210"
  },
  {
    "text": "it I've put links here the reason or implementation for EM this span already available it's all about defining data",
    "start": "3281210",
    "end": "3288170"
  },
  {
    "text": "layout in memory in how you traverse it how its laid out for exotic",
    "start": "3288170",
    "end": "3294410"
  },
  {
    "text": "architectures it's very useful and high performance computing again in graphics so these are interesting areas of",
    "start": "3294410",
    "end": "3301040"
  },
  {
    "text": "development that take it way for the way further so call to action would be to",
    "start": "3301040",
    "end": "3308599"
  },
  {
    "start": "3304000",
    "end": "3333000"
  },
  {
    "text": "make your value types regular the best regular types are those that model",
    "start": "3308599",
    "end": "3313880"
  },
  {
    "text": "building types so they don't have dependent preconditions you don't have to evaluate a context in which they're",
    "start": "3313880",
    "end": "3319819"
  },
  {
    "text": "used you can just look at them and understand the use which locally think integer or standard",
    "start": "3319819",
    "end": "3326119"
  },
  {
    "text": "string or standard vector those are easy to reason about you don't have to see the whole dependency tree there and for",
    "start": "3326119",
    "end": "3334579"
  },
  {
    "start": "3333000",
    "end": "3381000"
  },
  {
    "text": "no knowning reference types like stream view or span you do need contextual",
    "start": "3334579",
    "end": "3339769"
  },
  {
    "text": "information when working one on those and when you see and do code reviews and",
    "start": "3339769",
    "end": "3344900"
  },
  {
    "text": "simple requests and if you design types like this because you need to let's face",
    "start": "3344900",
    "end": "3350569"
  },
  {
    "text": "it we're not living in a bubble we need to design we're types sometimes try to restrict",
    "start": "3350569",
    "end": "3355729"
  },
  {
    "text": "them to be semi-regular don't don't do the same mistakes span did early on don't define operators and operations",
    "start": "3355729",
    "end": "3362779"
  },
  {
    "text": "that don't follow these standard semantics don't try to make them look regular if they're not don't pretend",
    "start": "3362779",
    "end": "3368719"
  },
  {
    "text": "their values give your users the honest expectation they're not values they're",
    "start": "3368719",
    "end": "3375529"
  },
  {
    "text": "not regular so try to restrict them to be semi regular at best I have lots of",
    "start": "3375529",
    "end": "3382219"
  },
  {
    "start": "3381000",
    "end": "3395000"
  },
  {
    "text": "resources here as I said when you get the slides if you're interesting to",
    "start": "3382219",
    "end": "3387829"
  },
  {
    "text": "explore more I have tons of articles and tons of papers and resources that you can follow along and drink on your own",
    "start": "3387829",
    "end": "3394579"
  },
  {
    "text": "pace and that's why I care about regular types and span in particular and thank",
    "start": "3394579",
    "end": "3402619"
  },
  {
    "text": "you for coming to my talk and if you have questions I'm happy to answer them",
    "start": "3402619",
    "end": "3407949"
  },
  {
    "text": "[Applause]",
    "start": "3408310",
    "end": "3415429"
  }
]