[
  {
    "text": "all right i think we can get started uh first off i want to say thanks a lot for being here today",
    "start": "6319",
    "end": "11759"
  },
  {
    "text": "uh and then you know i can get started with my talk good morning good afternoon or good evening depending on where",
    "start": "11759",
    "end": "17039"
  },
  {
    "text": "you're joining us from my name is janani subhaya and today we are going to be talking about designing",
    "start": "17039",
    "end": "22400"
  },
  {
    "text": "apis and we'll also be building one along the way a little more about me my name is janani",
    "start": "22400",
    "end": "29599"
  },
  {
    "text": "and i currently work as a product architect for a company called detroit labs based in detroit michigan usa i love to",
    "start": "29599",
    "end": "37200"
  },
  {
    "text": "read and travel i really enjoy the harry potter and the aragon series reading has definitely been happening a",
    "start": "37200",
    "end": "43760"
  },
  {
    "text": "lot especially with how last year went and i haven't traveled in a long time as i'm sure with most of us",
    "start": "43760",
    "end": "49680"
  },
  {
    "text": "but one of the good things that happened to me last year was i discovered the world of gardening i",
    "start": "49680",
    "end": "55120"
  },
  {
    "text": "don't have a lot of space to grow food but i have been trying to garden in my balcony where i",
    "start": "55120",
    "end": "60640"
  },
  {
    "text": "just tried to grow fruits vegetables and herbs from store-bought produce and it's been so much fun it's more of",
    "start": "60640",
    "end": "66479"
  },
  {
    "text": "an experiment for me than gardening and i cannot wait for this year's growing season",
    "start": "66479",
    "end": "72479"
  },
  {
    "text": "so in today's talk we'll start off with some introductions we'll talk about what apis are what arrest is and",
    "start": "72479",
    "end": "79600"
  },
  {
    "text": "uh what who and when api design happens and then we'll go over a six step",
    "start": "79600",
    "end": "85759"
  },
  {
    "text": "process to designing apis um and then there'll be a conclusion so",
    "start": "85759",
    "end": "91040"
  },
  {
    "text": "on that note what is an api when i say api i am referring to what's called application",
    "start": "91040",
    "end": "96960"
  },
  {
    "text": "programming interface and think of it as a packaging of some functionality",
    "start": "96960",
    "end": "102079"
  },
  {
    "text": "so apis for all intents and purposes expose functionality as a usable",
    "start": "102079",
    "end": "107759"
  },
  {
    "text": "interface so there are two sides to an api the people who actually build that functionality and packaged into a unit",
    "start": "107759",
    "end": "114240"
  },
  {
    "text": "that is usable by the consumers on the other side some very popular examples",
    "start": "114240",
    "end": "119280"
  },
  {
    "text": "are the collections library from java utils uh which provides methods for creating or",
    "start": "119280",
    "end": "125119"
  },
  {
    "text": "managing you know adding removing updating elements in collections like maps",
    "start": "125119",
    "end": "130160"
  },
  {
    "text": "lists and set other examples uh or other type of example would be the api is exposed by open weather map where",
    "start": "130160",
    "end": "138480"
  },
  {
    "text": "these are more http based meaning that you make a call to the services that are running and that",
    "start": "138480",
    "end": "144400"
  },
  {
    "text": "will then feed you information about whether uh given you know coordinates or the location of a place",
    "start": "144400",
    "end": "151360"
  },
  {
    "text": "so those are apis in a nutshell next let's talk about rest rest stands",
    "start": "151360",
    "end": "157440"
  },
  {
    "text": "for representational state transfer it is an architectural concept it is abstract and it doesn't uh",
    "start": "157440",
    "end": "165200"
  },
  {
    "text": "necessarily conform to languages or frameworks or it is agnostic of languages and frameworks",
    "start": "165200",
    "end": "170720"
  },
  {
    "text": "and it was introduced by roy fleeting in his phd dissertation in 2000 and it allows for building systems which",
    "start": "170720",
    "end": "177280"
  },
  {
    "text": "are scalable and distributed uh it also allows for standardizing communication between software entities",
    "start": "177280",
    "end": "183920"
  },
  {
    "text": "as abstract as rest may sound there are still some non-optional guiding principles to",
    "start": "183920",
    "end": "189840"
  },
  {
    "text": "rest the first one is rest allows for uniform interfaces where interfaces can be thought of as",
    "start": "189840",
    "end": "196239"
  },
  {
    "text": "very similar to contracts that we write in code there is a contract that is promised between two parties one of the parties",
    "start": "196239",
    "end": "202879"
  },
  {
    "text": "building it and the other one actually consuming it um uniform interfaces also allow for",
    "start": "202879",
    "end": "208799"
  },
  {
    "text": "both these parties or software entities to evolve independently of each other so as far as both of them are referring",
    "start": "208799",
    "end": "215680"
  },
  {
    "text": "to and building towards the same contract or spec in our case the next one is client server architecture",
    "start": "215680",
    "end": "222159"
  },
  {
    "text": "client server architecture helps with distributed applications building",
    "start": "222159",
    "end": "227680"
  },
  {
    "text": "and also helps with separating concerns a good example here would be say you have a client a web",
    "start": "227680",
    "end": "233200"
  },
  {
    "text": "ui client that is responsible for displaying some data for your website and you have the service running the",
    "start": "233200",
    "end": "238560"
  },
  {
    "text": "background that's feeding up all that data because there is a clear separation of concerns in",
    "start": "238560",
    "end": "244000"
  },
  {
    "text": "what each of these parties do the web client is supposed to be displaying all the data and is supposed to be making calls to the service",
    "start": "244000",
    "end": "250159"
  },
  {
    "text": "the service is supposed to be feeding up all that information so there is a separate uh separation of concerns here",
    "start": "250159",
    "end": "256160"
  },
  {
    "text": "and it also helps with building distributed systems where all the functionality is not crammed into a single service",
    "start": "256160",
    "end": "262240"
  },
  {
    "text": "the next one stateless um and what this means in very simple terms is a request should contain all the",
    "start": "262240",
    "end": "269280"
  },
  {
    "text": "information that is required for processing it successfully within itself it cannot depend on",
    "start": "269280",
    "end": "274880"
  },
  {
    "text": "requests that came prior or will be coming afterwards it should be a self-contained uh unit",
    "start": "274880",
    "end": "280880"
  },
  {
    "text": "next is cachable everything on the internet basically needs to be cacheable or rather",
    "start": "280880",
    "end": "286479"
  },
  {
    "text": "it is important to make sure that we are indicating if a response can be",
    "start": "286479",
    "end": "292240"
  },
  {
    "text": "cacheable so when i say cacheable implementation wise it could translate to cache control headers which dictate",
    "start": "292240",
    "end": "298560"
  },
  {
    "text": "if something is cacheable and how long it can be cached for the next one is layer systems",
    "start": "298560",
    "end": "304320"
  },
  {
    "text": "where rest allows for functionality to be split across say services or servers in general and a",
    "start": "304320",
    "end": "310960"
  },
  {
    "text": "good example is say as a client and making a request to a service i think it's going to go to a single",
    "start": "310960",
    "end": "317360"
  },
  {
    "text": "service that's say running behind a proxy or a load balancer but it is possible that that functionality",
    "start": "317360",
    "end": "323039"
  },
  {
    "text": "i'm looking for is actually split across multiple servers meaning one of them could be taking care of authentication the other one could be",
    "start": "323039",
    "end": "329840"
  },
  {
    "text": "taking care of actually receiving the request and uh you know feeding up all the data that is required for that request",
    "start": "329840",
    "end": "335520"
  },
  {
    "text": "and there could be a third one that actually takes care of all the storage uh or you know you there can also be a",
    "start": "335520",
    "end": "340720"
  },
  {
    "text": "bunch of load balancers that your request is going to travel through before it actually gets to an end server",
    "start": "340720",
    "end": "346720"
  },
  {
    "text": "and all of this is abstracted from the client the client doesn't know where the request is going or how",
    "start": "346720",
    "end": "352560"
  },
  {
    "text": "it is going to travel through different systems before it gets to an end uh service and that's the",
    "start": "352560",
    "end": "357759"
  },
  {
    "text": "beauty of rest all of that's abstracted but at the same time it can be layered uh and in some ways this also allows for",
    "start": "357759",
    "end": "363680"
  },
  {
    "text": "building services that are more application focused versus having everything like",
    "start": "363680",
    "end": "368720"
  },
  {
    "text": "crammed into a single cells before we get into the meat of my talk i want to set the stage for what is to",
    "start": "368720",
    "end": "375440"
  },
  {
    "text": "come and i think it's important to differentiate between rest and http here actually",
    "start": "375440",
    "end": "381520"
  },
  {
    "text": "differentiate between addressed apis and http apis when i say http apis they are not always purely",
    "start": "381520",
    "end": "389199"
  },
  {
    "text": "restful while there are some reasons for this the top two ones are this rest does not dictate a",
    "start": "389199",
    "end": "396800"
  },
  {
    "text": "particular transport layer protocol as we just saw rest stands for representational state transfer and http",
    "start": "396800",
    "end": "403280"
  },
  {
    "text": "stands for hyper text transfer protocol which is a transport layer uh protocol that is used",
    "start": "403280",
    "end": "408479"
  },
  {
    "text": "for transmitting information between entities other examples of transport layer protocols are the file transfer protocol",
    "start": "408479",
    "end": "414800"
  },
  {
    "text": "and there are several others http is probably one of the or you know the most popularly used one",
    "start": "414800",
    "end": "421120"
  },
  {
    "text": "just um because one it's popular and number two the components that are required for building http clients and servers are",
    "start": "421120",
    "end": "428880"
  },
  {
    "text": "widely available um i don't know which one came first so because of those reasons http is very",
    "start": "428880",
    "end": "435120"
  },
  {
    "text": "very widely used on the internet but rest in itself doesn't dictate that the transport protocol",
    "start": "435120",
    "end": "440880"
  },
  {
    "text": "needs to be http and the second reason why these are different is because of what is called helios that",
    "start": "440880",
    "end": "447440"
  },
  {
    "text": "stands for hybrid media as the engine of application state think of it as additional links to",
    "start": "447440",
    "end": "454240"
  },
  {
    "text": "processing resources so say for example you have a service that's serving up all the list of books available in a",
    "start": "454240",
    "end": "460639"
  },
  {
    "text": "library part of that response if implemented correctly and if it is really uh radios aligned would be",
    "start": "460639",
    "end": "468720"
  },
  {
    "text": "also links that contain all allowed operations on those list of books",
    "start": "468720",
    "end": "474080"
  },
  {
    "text": "meaning operations to probably add a book or delete a book so in this case all the client needs to",
    "start": "474080",
    "end": "480319"
  },
  {
    "text": "do is probably have a base url to talk to the service and all other apis that the client might",
    "start": "480319",
    "end": "486400"
  },
  {
    "text": "need and also allowed operations are actually a part of the response itself",
    "start": "486400",
    "end": "491919"
  },
  {
    "text": "in the form of hypermedia links again this is one of the this is the final level of what's called",
    "start": "491919",
    "end": "498160"
  },
  {
    "text": "richardson's maturity model and i highly recommend reading it if this is of interest to you but because of these two reasons among",
    "start": "498160",
    "end": "505039"
  },
  {
    "text": "others i'm going to go ahead and say today that we will be building an http api service",
    "start": "505039",
    "end": "510080"
  },
  {
    "text": "and we are going to be looking at the different steps that go into building one the other reason i want to say this is",
    "start": "510080",
    "end": "516560"
  },
  {
    "text": "one my talk is a beginner's guide and number two i want this to be a practical approach where everything i",
    "start": "516560",
    "end": "522399"
  },
  {
    "text": "talk about in my talk today is something i'm hoping we all can use in like say monday or the projects that are",
    "start": "522399",
    "end": "528160"
  },
  {
    "text": "happening next week uh so for those reasons today we'll be looking at building an http api service",
    "start": "528160",
    "end": "534399"
  },
  {
    "text": "so on that note let's talk about what it is at a very very high level when i say",
    "start": "534399",
    "end": "540240"
  },
  {
    "text": "http api design i am talking about identifying resources",
    "start": "540240",
    "end": "545360"
  },
  {
    "text": "i want to manage in my system resources could be books if we are managing uh if you're",
    "start": "545360",
    "end": "550480"
  },
  {
    "text": "building a service to manage our library system um they could be users if we are building a",
    "start": "550480",
    "end": "555600"
  },
  {
    "text": "user management system they could be any of those things so the first step to http api design is to identify what",
    "start": "555600",
    "end": "562080"
  },
  {
    "text": "resource we want to manage and when i say manage i'm talking about operations allowed on that resource",
    "start": "562080",
    "end": "567360"
  },
  {
    "text": "so i'm going to need a bunch of inputs for that and i'm going to be producing a bunch of outputs so this is api or",
    "start": "567360",
    "end": "573519"
  },
  {
    "text": "rather http api design at a very high level next who is it for it's obviously for",
    "start": "573519",
    "end": "580320"
  },
  {
    "text": "developers because on one side of the aisle we can have developers who are actually consuming this api on the other side",
    "start": "580320",
    "end": "587120"
  },
  {
    "text": "we're going to have developers who are building the api but developers are probably the most obvious audience",
    "start": "587120",
    "end": "593519"
  },
  {
    "text": "of http api design it is not specific to developers it also pertains to other roles the",
    "start": "593519",
    "end": "600000"
  },
  {
    "text": "first one is designers i like to um i think it's helpful to have designers at least",
    "start": "600000",
    "end": "605519"
  },
  {
    "text": "be able to read and understand the spec at its most basic level because design and development",
    "start": "605519",
    "end": "610959"
  },
  {
    "text": "definitely go hand in hand if you have a design component to your project if you don't maybe it's another team the",
    "start": "610959",
    "end": "616560"
  },
  {
    "text": "services team that consumes your service so if that's not the case",
    "start": "616560",
    "end": "622000"
  },
  {
    "text": "you know it's always helpful to have designers understand what the api is capable of and also point out the things that the",
    "start": "622000",
    "end": "627920"
  },
  {
    "text": "api should be doing in order for the designs to work next is managers probably not as much as designers but i",
    "start": "627920",
    "end": "634160"
  },
  {
    "text": "think it's helpful to have uh people managing teams actually understand api design because it's",
    "start": "634160",
    "end": "639760"
  },
  {
    "text": "easier for them to know progress or for them to have access to these documents if they're required in meetings they go to",
    "start": "639760",
    "end": "646160"
  },
  {
    "text": "the next one is quality engineers because they are the people who are going to be testing the system and they are also first advocates for",
    "start": "646160",
    "end": "652000"
  },
  {
    "text": "users uh in any given system so it's important for quality engineers again to be able to understand what the spec",
    "start": "652000",
    "end": "658800"
  },
  {
    "text": "indicates so that they can be testing systems and making sure that the builders and the consumers of the api",
    "start": "658800",
    "end": "664880"
  },
  {
    "text": "actually conform to that spec so those would be some of the important audiences",
    "start": "664880",
    "end": "670640"
  },
  {
    "text": "for http api design so the next one is when does it happen",
    "start": "670640",
    "end": "675760"
  },
  {
    "text": "ideally it starts pre-development just so that you have a spec that has been promised",
    "start": "675760",
    "end": "681279"
  },
  {
    "text": "between two parties and both the parties like it and have agreed upon it that's ideal",
    "start": "681279",
    "end": "686560"
  },
  {
    "text": "and it continues alongside development it is not very different from code itself where you build something you",
    "start": "686560",
    "end": "692079"
  },
  {
    "text": "build the first draft of something and then you receive feedback and then it is iteratively improved starting from there and it's iteratively improved",
    "start": "692079",
    "end": "699040"
  },
  {
    "text": "this could be based on maybe new requirements which could come from design or other consumers or maybe",
    "start": "699040",
    "end": "704399"
  },
  {
    "text": "you've just discovered that certain ways that you've uh decided to build your service doesn't really",
    "start": "704399",
    "end": "710079"
  },
  {
    "text": "conform to um security standards and practices so maybe you want to change things uh it could be based on any of those",
    "start": "710079",
    "end": "716480"
  },
  {
    "text": "things but the important point here is it's not set in stone uh the first draft is what comes out",
    "start": "716480",
    "end": "721839"
  },
  {
    "text": "first and then it's just a draft from there it keeps getting i treated up upon and improved continues",
    "start": "721839",
    "end": "728079"
  },
  {
    "text": "so with all our definitions uh out of the way let's now talk about the six step",
    "start": "728079",
    "end": "733200"
  },
  {
    "text": "process to http api design i want to call out that i believe these first six steps",
    "start": "733200",
    "end": "739279"
  },
  {
    "text": "will give you a good first draft to build on top of definitely not all the steps involved in",
    "start": "739279",
    "end": "744800"
  },
  {
    "text": "designing apis so on that note the first step is api naming",
    "start": "744800",
    "end": "750000"
  },
  {
    "text": "and when i say api naming i'm talking about two things the first one is to actually identify",
    "start": "750000",
    "end": "756079"
  },
  {
    "text": "the resource i'm managing in my system if you have multiple resources you want to build um",
    "start": "756079",
    "end": "761360"
  },
  {
    "text": "an api spec for then maybe start with one of them and start with the one that is independent of everything else",
    "start": "761360",
    "end": "768240"
  },
  {
    "text": "so identify the resource that you want to build an api for and figure out if it belongs to another",
    "start": "768240",
    "end": "773279"
  },
  {
    "text": "resource that probably already exists in your system or hasn't been built yet if it hasn't",
    "start": "773279",
    "end": "778320"
  },
  {
    "text": "been built yet i would say start with the one that's probably the most independent one and the reason here is this will drive",
    "start": "778320",
    "end": "784079"
  },
  {
    "text": "uh not just how you process the request under the hood but will also drive how you name your apis",
    "start": "784079",
    "end": "790800"
  },
  {
    "text": "so once that has been done make sure to come up with a consistent url naming strategy a couple of options here are to use",
    "start": "790800",
    "end": "797440"
  },
  {
    "text": "camel casing or to use the hyphenated uh or to use hyphenated words again there is no hard and fast rule",
    "start": "797440",
    "end": "803519"
  },
  {
    "text": "here i've seen other options too on the internet um it's just a matter of i guess team preference",
    "start": "803519",
    "end": "809760"
  },
  {
    "text": "and if you already have a url naming strategy going i would just stick to it because consistency wins all it just",
    "start": "809760",
    "end": "816240"
  },
  {
    "text": "makes building and using services uh that are consistent in how they expose api it's very very easy",
    "start": "816240",
    "end": "822399"
  },
  {
    "text": "because it makes it more predictable uh for the people building it and for the people consuming it so consistency",
    "start": "822399",
    "end": "827680"
  },
  {
    "text": "throughout uh and make sure if this is the first api you're building make sure to pick one of the options available",
    "start": "827680",
    "end": "834079"
  },
  {
    "text": "so as an example today uh let's come up with a resource we want to manage so i'm",
    "start": "834079",
    "end": "839680"
  },
  {
    "text": "going to say i want to manage login history and say i already have a system where",
    "start": "839680",
    "end": "845760"
  },
  {
    "text": "users exist so i'm going to identify login history as belonging to the user's",
    "start": "845760",
    "end": "851440"
  },
  {
    "text": "resource that my system already manages so if i were to come up with uris this would be a uri",
    "start": "851440",
    "end": "857279"
  },
  {
    "text": "i would use for representing login histories for any given user with user id the user",
    "start": "857279",
    "end": "863680"
  },
  {
    "text": "id there is replaceable with whichever user id is in context and if i wanted",
    "start": "863680",
    "end": "868959"
  },
  {
    "text": "a representation for a specific login history id for a given user this is an api i would use where the",
    "start": "868959",
    "end": "876000"
  },
  {
    "text": "user id and login history id will be replaced by the specific user analog history id so we remember",
    "start": "876000",
    "end": "882800"
  },
  {
    "text": "the first step of http api design we've looked at api naming we've identified our resource",
    "start": "882800",
    "end": "887839"
  },
  {
    "text": "and we've come up with a consistent naming strategy next let's look at http verbs the second step",
    "start": "887839",
    "end": "894639"
  },
  {
    "text": "is to identify all the operations that we want to allow on the resource we have just identified",
    "start": "894639",
    "end": "900480"
  },
  {
    "text": "four of the very popularly used ones are the post for creating a new resource the get for fetching either one resource",
    "start": "900480",
    "end": "907760"
  },
  {
    "text": "or a list of resources the put is for updating or modifying a resource and the delete is for",
    "start": "907760",
    "end": "913199"
  },
  {
    "text": "deleting a resource um so when it comes to the second step of api design the first thing to do is to identify",
    "start": "913199",
    "end": "920240"
  },
  {
    "text": "what operations we can allow or we want to allow on the resource we identified in step one",
    "start": "920240",
    "end": "926720"
  },
  {
    "text": "and the second step is to pick the right word that corresponds to it before we get into an example i want to",
    "start": "926720",
    "end": "933680"
  },
  {
    "text": "talk about a couple of http verbs that are probably not as frequently used as the ones we just",
    "start": "933680",
    "end": "939360"
  },
  {
    "text": "saw but these are very close to one of the four ones we just saw so i think it's",
    "start": "939360",
    "end": "944399"
  },
  {
    "text": "important to understand the difference the first one is the head verb the head verb is very",
    "start": "944399",
    "end": "950720"
  },
  {
    "text": "similar to the get in that the response is very similar but it doesn't actually contain the entire",
    "start": "950720",
    "end": "956880"
  },
  {
    "text": "response of say the get request itself instead it is useful",
    "start": "956880",
    "end": "962079"
  },
  {
    "text": "in retrieving metadata about the data so basically data about the data itself um i think an example will help here say",
    "start": "962079",
    "end": "968959"
  },
  {
    "text": "we had a service that exposed a get api for a resource or a list of resources and uh for some reason it just takes a",
    "start": "968959",
    "end": "975839"
  },
  {
    "text": "long time to process or the response is really huge and the client uh wants to make sure",
    "start": "975839",
    "end": "981040"
  },
  {
    "text": "that there will be a valid response or once just get more information about the response that is",
    "start": "981040",
    "end": "986480"
  },
  {
    "text": "to come um the one way to do that is to expose a head api that will have the same uri as the get",
    "start": "986480",
    "end": "993440"
  },
  {
    "text": "one and this fetches all the information about uh what the response will look like without",
    "start": "993440",
    "end": "999279"
  },
  {
    "text": "the response itself so in a lot of cases it's usually faster uh metadata could mean uh maybe content",
    "start": "999279",
    "end": "1006079"
  },
  {
    "text": "length or it could be as simple as will this uh api request succeed you know if i were",
    "start": "1006079",
    "end": "1011199"
  },
  {
    "text": "to make a get request the head request would give me a sneak peek into will that might get richness be successful so that is the",
    "start": "1011199",
    "end": "1018800"
  },
  {
    "text": "head work the next one is the patch the patch is very similar to the put in its",
    "start": "1018800",
    "end": "1024000"
  },
  {
    "text": "intentions meaning it is also used to modify the resource but how it is done under the hood and",
    "start": "1024000",
    "end": "1029839"
  },
  {
    "text": "the request itself looks a little different so if you look at some diagrams here let's consider the put",
    "start": "1029839",
    "end": "1035918"
  },
  {
    "text": "as our first example so we have our http api service that contains a certain version of the",
    "start": "1035919",
    "end": "1041280"
  },
  {
    "text": "resource and that resource is what we want to update uh so we have fetched the current state",
    "start": "1041280",
    "end": "1046319"
  },
  {
    "text": "of the resource we have made modifications on our client and that gives rise to the resource outside the service and now",
    "start": "1046319",
    "end": "1052720"
  },
  {
    "text": "we're going to be making a put call to our service that under the hood will replace the",
    "start": "1052720",
    "end": "1058320"
  },
  {
    "text": "whole resource in its entirety irrespective of which specific fields were modified even if there was just one",
    "start": "1058320",
    "end": "1064640"
  },
  {
    "text": "field modified the intention is to have a whole new version replace it",
    "start": "1064640",
    "end": "1069840"
  },
  {
    "text": "but as far as the patch goes the first difference you'll notice here is the request is not the entire resource instead",
    "start": "1069840",
    "end": "1076160"
  },
  {
    "text": "we identify a specific field or value within our resource that needs to be modified",
    "start": "1076160",
    "end": "1082160"
  },
  {
    "text": "so in our case assuming we have a resource and that resource has a field called",
    "start": "1082160",
    "end": "1087360"
  },
  {
    "text": "square and that's the one we want to update we can use a patch request to uh that",
    "start": "1087360",
    "end": "1093120"
  },
  {
    "text": "looks like this the request can contain the name of the field and the operation which in our",
    "start": "1093120",
    "end": "1098160"
  },
  {
    "text": "case is update and then it can contain or rather it should in the case of an update contain the new value that we want to",
    "start": "1098160",
    "end": "1104799"
  },
  {
    "text": "replace the old value with and assuming everything else looks good a patch request",
    "start": "1104799",
    "end": "1109919"
  },
  {
    "text": "basically replaces the old value with the new value we passed in",
    "start": "1109919",
    "end": "1115200"
  },
  {
    "text": "so if you're wondering which one to use because they look very similar and they kind of do the same thing under the hood",
    "start": "1115200",
    "end": "1120799"
  },
  {
    "text": "i would say a lot of things go into uh consideration when you're picking between a put versus a patch",
    "start": "1120799",
    "end": "1126400"
  },
  {
    "text": "the first one is uh the obvious one i guess is the patch request is probably in some ways not as simple as",
    "start": "1126400",
    "end": "1132640"
  },
  {
    "text": "the put where you maybe um you may need a parcel to actually be able to read the request",
    "start": "1132640",
    "end": "1139360"
  },
  {
    "text": "it's not as simple as the request is always going to contain the entire resource instead it consists of the specific name",
    "start": "1139360",
    "end": "1146000"
  },
  {
    "text": "it consists of the operation and there can be a lot of combinations there so depending on how big your services or",
    "start": "1146000",
    "end": "1152240"
  },
  {
    "text": "how complicated it is there might be a tiny performance hit there so that might be something to consider",
    "start": "1152240",
    "end": "1157280"
  },
  {
    "text": "the second thing is maybe how you have everything stored in your system do you have everything in a distributed manner",
    "start": "1157280",
    "end": "1162640"
  },
  {
    "text": "and uh you know would it be more worthwhile to update a resource in a piecewise",
    "start": "1162640",
    "end": "1168960"
  },
  {
    "text": "fashion versus just updating the entire thing that's the other one uh so there's a couple of considerations there when you want to",
    "start": "1168960",
    "end": "1175360"
  },
  {
    "text": "pick between a patch versus input so if we were to circle back and you know go back to our example of login",
    "start": "1175360",
    "end": "1181840"
  },
  {
    "text": "histories um and pick the words that we want to allow on our login history resource",
    "start": "1181840",
    "end": "1187120"
  },
  {
    "text": "um let's start off with making an assumption we want our login history resources to be mutable",
    "start": "1187120",
    "end": "1192400"
  },
  {
    "text": "we only want users to be able to create a new login history or read the one they've already created so",
    "start": "1192400",
    "end": "1200000"
  },
  {
    "text": "for the reading part we're going to expose a get api that basically allows fetching all",
    "start": "1200000",
    "end": "1206000"
  },
  {
    "text": "login history resources for a given user and there's going to be one more get api for fetching a specific login history",
    "start": "1206000",
    "end": "1213200"
  },
  {
    "text": "for a given user and for actually being able to create a new login history resource we're going",
    "start": "1213200",
    "end": "1219440"
  },
  {
    "text": "to use the post and because we have said we don't want to allow users to be able to update or",
    "start": "1219440",
    "end": "1224480"
  },
  {
    "text": "delete them the put the patch and the deletes are out of the way so we're not going to use them",
    "start": "1224480",
    "end": "1230159"
  },
  {
    "text": "so so far we looked at identifying a resource and then we",
    "start": "1230159",
    "end": "1235520"
  },
  {
    "text": "picked operations that we want to allow on our resource",
    "start": "1235520",
    "end": "1239760"
  },
  {
    "text": "the next thing we're going to be looking at is the request body which is going to be the inputs required for managing our resource",
    "start": "1240559",
    "end": "1248559"
  },
  {
    "text": "so when it comes to the request body i like to ask three questions the first question is is a request body",
    "start": "1248559",
    "end": "1254640"
  },
  {
    "text": "needed i like to answer this question with another question which is am i getting sufficient information from",
    "start": "1254640",
    "end": "1261440"
  },
  {
    "text": "other request components that i might need to successfully process this request so in our example if say the user id and",
    "start": "1261440",
    "end": "1269360"
  },
  {
    "text": "the login history id for which your api is in context is sufficient to perform that",
    "start": "1269360",
    "end": "1274880"
  },
  {
    "text": "operation successfully then i'm going to say maybe a request body is not required right now",
    "start": "1274880",
    "end": "1279919"
  },
  {
    "text": "so that's the first question to ask next is to take a look at rfc recommendations",
    "start": "1279919",
    "end": "1284960"
  },
  {
    "text": "rfc stands for request request for comment um and again it's a central document i",
    "start": "1284960",
    "end": "1290559"
  },
  {
    "text": "haven't touched on it as much but i will be leaving a link to at the end of my talk uh it's a request for common document",
    "start": "1290559",
    "end": "1297120"
  },
  {
    "text": "that has guidelines to building http apis it talks about all the response statuses",
    "start": "1297120",
    "end": "1302640"
  },
  {
    "text": "all the request bodies and you know all the other guidelines that might be useful when you're",
    "start": "1302640",
    "end": "1307919"
  },
  {
    "text": "building an http api so i would say referring to that rfc for everything is very helpful especially",
    "start": "1307919",
    "end": "1313840"
  },
  {
    "text": "when it comes to the request body making sure that the worm or the http verb isn't that is",
    "start": "1313840",
    "end": "1318960"
  },
  {
    "text": "in context allows for a request body is helpful and say you've decided that there is a request",
    "start": "1318960",
    "end": "1325280"
  },
  {
    "text": "body needed and the rfc allows for it the next step is to finalize a format",
    "start": "1325280",
    "end": "1330559"
  },
  {
    "text": "json again is most popularly used but it doesn't have to be json all the time it can be xml text or anything else that",
    "start": "1330559",
    "end": "1335919"
  },
  {
    "text": "works well for your system and works well for the particular api you're trying to solve",
    "start": "1335919",
    "end": "1341600"
  },
  {
    "text": "so these three questions will help answer if a request body is required and say we have said yes the next step",
    "start": "1341600",
    "end": "1348720"
  },
  {
    "text": "is to actually come up with a structure for the request body so the first thing i like to do here is to figure out what is needed to perform",
    "start": "1348720",
    "end": "1354799"
  },
  {
    "text": "the operation i like to keep it minimalistic because again api design is not set in stone so if new things are needed",
    "start": "1354799",
    "end": "1361760"
  },
  {
    "text": "maybe we just add them when they are needed down the road and let the system evolve organically versus trying to solve for",
    "start": "1361760",
    "end": "1368000"
  },
  {
    "text": "all future problems that might actually not be problems um so in this step we just try to figure",
    "start": "1368000",
    "end": "1373679"
  },
  {
    "text": "out what fields we'll absolutely need to be able to perform this operation the next step is to come up with",
    "start": "1373679",
    "end": "1379760"
  },
  {
    "text": "validation rules these could be as simple as just figuring out what is required and what is optional they could",
    "start": "1379760",
    "end": "1385440"
  },
  {
    "text": "be more complicated like only allowing certain values for certain fields or inter-field",
    "start": "1385440",
    "end": "1391520"
  },
  {
    "text": "validations whatever those might be just coming up with a set of validation rules",
    "start": "1391520",
    "end": "1396960"
  },
  {
    "text": "and the third one is a word of caution just make sure not to avoid duplicating request component values by",
    "start": "1396960",
    "end": "1403679"
  },
  {
    "text": "this i mean say the user id is coming from the url as well as the request body so as far as the user ids in both these",
    "start": "1403679",
    "end": "1410720"
  },
  {
    "text": "places point to the same value everything is good but if they start diverging then one there is confusion on",
    "start": "1410720",
    "end": "1416559"
  },
  {
    "text": "the server side figuring out which one to use and number two if the server were to just make a",
    "start": "1416559",
    "end": "1421919"
  },
  {
    "text": "call and use one that might not be what the client intended so always good to make sure you don't",
    "start": "1421919",
    "end": "1427039"
  },
  {
    "text": "have request components duplicating the same information and this doesn't just have to be the uri and the request body it also includes",
    "start": "1427039",
    "end": "1433440"
  },
  {
    "text": "things like headers and anything else that might be a part of the request so with that out of the way let's get",
    "start": "1433440",
    "end": "1439919"
  },
  {
    "text": "back to our example so we identified two get requests in our system the one uh to get all login histories for a user",
    "start": "1439919",
    "end": "1446480"
  },
  {
    "text": "and the other one to get a particular login history id so the first question we're going to be asking for both these",
    "start": "1446480",
    "end": "1452400"
  },
  {
    "text": "uh requests or apis is do we need a request body for successfully performing",
    "start": "1452400",
    "end": "1457440"
  },
  {
    "text": "this operation i'm going to say no here because i think for the first case",
    "start": "1457440",
    "end": "1462640"
  },
  {
    "text": "just having the user id and knowing that i'm fetching all the login histories for that user is sufficient",
    "start": "1462640",
    "end": "1468240"
  },
  {
    "text": "um and for the second one i have the specific login history id and say under the hood that is how i'm",
    "start": "1468240",
    "end": "1473440"
  },
  {
    "text": "storing them and that is probably if i get into storage if it's the primary key on my login history table",
    "start": "1473440",
    "end": "1479520"
  },
  {
    "text": "i'm going to say these things that are coming from the uri are sufficient for me to perform these requests",
    "start": "1479520",
    "end": "1484880"
  },
  {
    "text": "successfully so i'm going to say we don't need a request body so we're not going to get into a request",
    "start": "1484880",
    "end": "1490720"
  },
  {
    "text": "body for both the get apis the next one is the post so the first question here is",
    "start": "1490720",
    "end": "1495760"
  },
  {
    "text": "do we have enough information to be able to perform these operations the answer is uh no we don't so we are",
    "start": "1495760",
    "end": "1502880"
  },
  {
    "text": "going to need a request body and we don't because the only thing we have so far is the user id we don't",
    "start": "1502880",
    "end": "1508080"
  },
  {
    "text": "actually have any information regarding the login history event itself so we definitely need a request body the",
    "start": "1508080",
    "end": "1515279"
  },
  {
    "text": "next question is does the rfc recommend it yes the rfc allows for request bodies in",
    "start": "1515279",
    "end": "1520320"
  },
  {
    "text": "post so the answer is yes here and the next one is to come up with a format",
    "start": "1520320",
    "end": "1525760"
  },
  {
    "text": "so i'm going to pick json just because i think it does the job for me so here is a sample request body that i",
    "start": "1525760",
    "end": "1532960"
  },
  {
    "text": "can use for creating new login histories i have identified device time registered device ip address and location as",
    "start": "1532960",
    "end": "1539279"
  },
  {
    "text": "possible fields and keeping my validations very simple and i'm going to just pick the fields that i think are required and optional",
    "start": "1539279",
    "end": "1546080"
  },
  {
    "text": "so i'm going to say device time registered device and location are absolutely required the iprs is not if the user were to",
    "start": "1546080",
    "end": "1552960"
  },
  {
    "text": "provide it great but if they don't that's fine too i can still process their request successfully um",
    "start": "1552960",
    "end": "1559200"
  },
  {
    "text": "so that brings us to the end of request body so we identified login history as a resource",
    "start": "1559200",
    "end": "1564320"
  },
  {
    "text": "we looked at all the operations we want to allow on login history and we also talked about some inputs",
    "start": "1564320",
    "end": "1569679"
  },
  {
    "text": "next let's talk about some outputs the first one we're going to be discussing is the response status",
    "start": "1569679",
    "end": "1576240"
  },
  {
    "text": "the response status is the first indicator to anybody who's consuming your apis about",
    "start": "1576240",
    "end": "1582080"
  },
  {
    "text": "if the operation that they were trying to perform actually succeeded and it plays a huge role in driving next",
    "start": "1582080",
    "end": "1588159"
  },
  {
    "text": "steps a very common example is where a lot of services and clients",
    "start": "1588159",
    "end": "1593520"
  },
  {
    "text": "use the response status to figure out if that request needs to be retried that's just one example i'm sure there are several others um",
    "start": "1593520",
    "end": "1600559"
  },
  {
    "text": "including things like maybe a bunch of other api calls need to go out depending on whatever error happened",
    "start": "1600559",
    "end": "1606400"
  },
  {
    "text": "uh or maybe a bunch of updates need to happen on their site depending on you know what the status was so irrespective of which one it is the",
    "start": "1606400",
    "end": "1613200"
  },
  {
    "text": "response status is the first peak into what happened with the request was it successful",
    "start": "1613200",
    "end": "1618480"
  },
  {
    "text": "and you know it drives next steps and there are two uh big categories of response statuses",
    "start": "1618480",
    "end": "1624880"
  },
  {
    "text": "the first one is the error status code again there are several other error status codes today i'm going to focus on",
    "start": "1624880",
    "end": "1630559"
  },
  {
    "text": "the 400s and the 500s because i think uh understanding them is very helpful uh and they're probably the",
    "start": "1630559",
    "end": "1636559"
  },
  {
    "text": "first ones you'll be using in your service the 400 series uh basically indicates a",
    "start": "1636559",
    "end": "1641840"
  },
  {
    "text": "client level error so somebody who's consuming an api if they see a 400 from the service that",
    "start": "1641840",
    "end": "1647760"
  },
  {
    "text": "actually serves up all information it means that some data that was presented as a part of the request is",
    "start": "1647760",
    "end": "1653760"
  },
  {
    "text": "incorrect some popular 400 level errors include the 400 itself which is a bad request",
    "start": "1653760",
    "end": "1659120"
  },
  {
    "text": "others 401 which means the credentials presented were incorrect so it stands for unauthorized",
    "start": "1659120",
    "end": "1664799"
  },
  {
    "text": "403 is when somebody is trying to access a resource they don't have the permissions to access and it",
    "start": "1664799",
    "end": "1670080"
  },
  {
    "text": "stands for forbidden 404 is not found and those are some examples of a 400 level error",
    "start": "1670080",
    "end": "1675840"
  },
  {
    "text": "as far as the 500 ones go it indicates a server level error something on the server side went wrong",
    "start": "1675840",
    "end": "1681840"
  },
  {
    "text": "and the client necessarily doesn't have to make changes right now to uh you know the",
    "start": "1681840",
    "end": "1687200"
  },
  {
    "text": "requests that they're trying to uh submit and get a successful response for uh the popular one is 500 which",
    "start": "1687200",
    "end": "1693200"
  },
  {
    "text": "stands for internal server error and those are 400 and 500s at a very",
    "start": "1693200",
    "end": "1698799"
  },
  {
    "text": "high level and they mean different things the success status codes on the other side",
    "start": "1698799",
    "end": "1704000"
  },
  {
    "text": "are again i guess the most popular ones are the 200s which means literally okay and it is",
    "start": "1704000",
    "end": "1709520"
  },
  {
    "text": "usually used with get requests uh where you know we are indicating to the client that everything went well and here is",
    "start": "1709520",
    "end": "1716480"
  },
  {
    "text": "the response for your request a 201 is usually used for creating requests or for the post http work um",
    "start": "1716480",
    "end": "1724240"
  },
  {
    "text": "again it indicates that not only was the request successful but as a result of the request something",
    "start": "1724240",
    "end": "1729840"
  },
  {
    "text": "on the server changed in most cases for a post a new resource was created so that's what it indicates a 24",
    "start": "1729840",
    "end": "1736159"
  },
  {
    "text": "stands for new content usually used with deleting a resource and what that means is as a result of",
    "start": "1736159",
    "end": "1743120"
  },
  {
    "text": "this request something was deleted but there is nothing for the service to respond back with except a 204 so there is usually no",
    "start": "1743120",
    "end": "1749760"
  },
  {
    "text": "response body with the 204. the consequences of mixing up error",
    "start": "1749760",
    "end": "1755279"
  },
  {
    "text": "status codes is far more far-reaching when it comes to the error ones versus the success ones um i think as",
    "start": "1755279",
    "end": "1761760"
  },
  {
    "text": "far as the success one goes it's always helpful to pick the status quo that uh",
    "start": "1761760",
    "end": "1766880"
  },
  {
    "text": "indicates more precisely what the success ca what the category of the success",
    "start": "1766880",
    "end": "1772000"
  },
  {
    "text": "falls uh which bucket it falls into but if you were to mix up a 201 versus a",
    "start": "1772000",
    "end": "1777279"
  },
  {
    "text": "200 and basically pass back a 200 for a post request the consequences are probably not as",
    "start": "1777279",
    "end": "1783600"
  },
  {
    "text": "drastic but if you were to mix up those response statuses within the realm of the error status",
    "start": "1783600",
    "end": "1790240"
  },
  {
    "text": "code say the service decided to pass back a 500 when it's actually a 400 and the client always",
    "start": "1790240",
    "end": "1796720"
  },
  {
    "text": "retries on a 500 the client is now going to keep retrying a request that's never going to succeed",
    "start": "1796720",
    "end": "1802399"
  },
  {
    "text": "um because something needs to change on their side and they don't know that something needs to change on their side because the service",
    "start": "1802399",
    "end": "1808320"
  },
  {
    "text": "messed up and passed back the wrong status code um so as far as error status codes go my recommendation is",
    "start": "1808320",
    "end": "1814720"
  },
  {
    "text": "read through the rfc read through just http statuses in general to understand",
    "start": "1814720",
    "end": "1819840"
  },
  {
    "text": "which status actually most precisely reflects the error you're trying to convey",
    "start": "1819840",
    "end": "1825440"
  },
  {
    "text": "and in a lot of cases usually error status quotes could be accompanied by a response body with more",
    "start": "1825440",
    "end": "1831440"
  },
  {
    "text": "information but it is also important to pick the right status code as far as the success one goes i guess it's nice to have again a more",
    "start": "1831440",
    "end": "1838159"
  },
  {
    "text": "concise uh status code be passed back depending on the operation that was performed um but that's more nice to have so",
    "start": "1838159",
    "end": "1846000"
  },
  {
    "text": "if we were to look at some examples for response statuses and the error ones in particular say a",
    "start": "1846000",
    "end": "1851760"
  },
  {
    "text": "user is trying to create a new login history resource and they don't pass in the device field",
    "start": "1851760",
    "end": "1858640"
  },
  {
    "text": "which we have identified as a required field they should be seeing a 400 which stands for bad request",
    "start": "1858640",
    "end": "1864159"
  },
  {
    "text": "and it indicates that something in the request body was incorrect and the status quo can also be",
    "start": "1864159",
    "end": "1871200"
  },
  {
    "text": "accompanied by a response body that contains more information maybe it can see something as simple as",
    "start": "1871200",
    "end": "1876240"
  },
  {
    "text": "device was not provided um so that's one example the other one is say if a user is trying",
    "start": "1876240",
    "end": "1882720"
  },
  {
    "text": "to fetch login histories for another user who actually doesn't exist in the system so basically using an invalid user id they should see",
    "start": "1882720",
    "end": "1890399"
  },
  {
    "text": "a 404 that means basically that the resource that this user is trying to access does",
    "start": "1890399",
    "end": "1896000"
  },
  {
    "text": "not exist in the system and as far as the successfulness goes say user a is trying to access",
    "start": "1896000",
    "end": "1902320"
  },
  {
    "text": "user a's login history resources in this case the status code should be a 200 and",
    "start": "1902320",
    "end": "1907440"
  },
  {
    "text": "the response body should contain the list of login history resources that user is trying to access another example is when user a tries to",
    "start": "1907440",
    "end": "1914399"
  },
  {
    "text": "create a new login history resource again for themselves they should see a 201 meaning everything went well uh and the",
    "start": "1914399",
    "end": "1920480"
  },
  {
    "text": "res and the request was successful and something on the server changed basically a new login history resource",
    "start": "1920480",
    "end": "1925519"
  },
  {
    "text": "was created for user a so status check we identified login history as a resource we talked about",
    "start": "1925519",
    "end": "1931519"
  },
  {
    "text": "the allowed operations we talked about the input in terms of this body and we also",
    "start": "1931519",
    "end": "1936640"
  },
  {
    "text": "partially talked about the output the first output we talked about was the response status next we're going to be looking at the",
    "start": "1936640",
    "end": "1942320"
  },
  {
    "text": "response body for the response body i am going to start off with a word of caution",
    "start": "1942320",
    "end": "1948159"
  },
  {
    "text": "make sure that the response body is on par with the response status code and what is a big no no here is",
    "start": "1948159",
    "end": "1956240"
  },
  {
    "text": "if you were to pass back say a 200 as the response status but your response",
    "start": "1956240",
    "end": "1961600"
  },
  {
    "text": "body actually contains an error that is just so confusing and it makes no sense it's very frustrating to",
    "start": "1961600",
    "end": "1966640"
  },
  {
    "text": "work with so always make sure that your response body if it's a success that you know it contains a list of",
    "start": "1966640",
    "end": "1971919"
  },
  {
    "text": "successfully returned items if it's an error then that is what is indicated in your response body make sure to have your response status",
    "start": "1971919",
    "end": "1978320"
  },
  {
    "text": "and your response body be on par with each other because after all they form the together from the output of the",
    "start": "1978320",
    "end": "1984080"
  },
  {
    "text": "system and the second step or rather the first step in actually figuring out the response body is to decide what",
    "start": "1984080",
    "end": "1990000"
  },
  {
    "text": "information actually needs to be sent back again i like to keep this minimalistic to start with uh and not plan for things that might",
    "start": "1990000",
    "end": "1997679"
  },
  {
    "text": "never show up in the future so i like to focus this on what is required to be passed back for",
    "start": "1997679",
    "end": "2002880"
  },
  {
    "text": "say the ui or other consumers this could be driven by design this could be driven by requirements from other consumers",
    "start": "2002880",
    "end": "2009039"
  },
  {
    "text": "um depending on how you're building a system and what your api service does another suggestion i think this is just",
    "start": "2009039",
    "end": "2015600"
  },
  {
    "text": "a personal preference i like to always look for places where i can break up my api responses versus you know having",
    "start": "2015600",
    "end": "2022720"
  },
  {
    "text": "a single api server all the possible information um i guess a good example here is if you",
    "start": "2022720",
    "end": "2028960"
  },
  {
    "text": "had a list of items displayed on the ui again assuming your project has a design component and in that design component",
    "start": "2028960",
    "end": "2036000"
  },
  {
    "text": "there's one page where you have a list of items and each of those items in the list are clickable and you click on them",
    "start": "2036000",
    "end": "2042000"
  },
  {
    "text": "and that takes you to another page that gives you more information about the item that was clicked we can do this",
    "start": "2042000",
    "end": "2047600"
  },
  {
    "text": "with two apis the first one is the very paired down version of you know all",
    "start": "2047600",
    "end": "2054158"
  },
  {
    "text": "the i entities or resources that need to be displayed on the list itself um so this is not going to contain",
    "start": "2054159",
    "end": "2060079"
  },
  {
    "text": "everything about that resource and the second page can contain additional information depending on how things are displayed so that's",
    "start": "2060079",
    "end": "2065760"
  },
  {
    "text": "just one example where breaking up the apis versus having the first api pass everything back uh is helpful",
    "start": "2065760",
    "end": "2073599"
  },
  {
    "text": "so in that spirit when say we have a ui component and we want to be able to",
    "start": "2073599",
    "end": "2078638"
  },
  {
    "text": "fetch all login histories for a given user here is a sample response which is",
    "start": "2078639",
    "end": "2084398"
  },
  {
    "text": "it doesn't contain all the information that is uh all the login history related information for the resources",
    "start": "2084399",
    "end": "2090638"
  },
  {
    "text": "instead it only contains three fields probably driven by design again and if the user were to fetch more",
    "start": "2090639",
    "end": "2096720"
  },
  {
    "text": "information about a single login history resource that can contain more information like the one shown here",
    "start": "2096720",
    "end": "2102880"
  },
  {
    "text": "um and for the post again assuming that we are not handling any sensitive information and the newly created login",
    "start": "2102880",
    "end": "2110400"
  },
  {
    "text": "history can actually be passed back to the client here is an example of what that would look like",
    "start": "2110400",
    "end": "2116320"
  },
  {
    "text": "the only field we'll add is the id itself that id in this case refers to the id that the resource was",
    "start": "2116320",
    "end": "2122640"
  },
  {
    "text": "probably given when it was created in the system um something to keep uh in mind for the for returning",
    "start": "2122640",
    "end": "2130000"
  },
  {
    "text": "responsibilities for post is make sure that you don't have any sensitive information here uh especially if you have things",
    "start": "2130000",
    "end": "2135839"
  },
  {
    "text": "like card information or whatnot make sure to thoroughly read through all the pci compliance uh which is payment card industry they",
    "start": "2135839",
    "end": "2142800"
  },
  {
    "text": "have a set of rules for displaying or not displaying uh certain information so general rule of thumb always good to",
    "start": "2142800",
    "end": "2149040"
  },
  {
    "text": "make sure your response body doesn't contain any uh sensitive information so with",
    "start": "2149040",
    "end": "2154480"
  },
  {
    "text": "that we are almost done with the six step process we are finally in our sixth step and we're going to be talking about",
    "start": "2154480",
    "end": "2160640"
  },
  {
    "text": "path versus query parameters and uh which ones um i like to use where so for path",
    "start": "2160640",
    "end": "2166960"
  },
  {
    "text": "parameters i like to use all the unique identifiers as path parameters and i also like to make sure they're",
    "start": "2166960",
    "end": "2172560"
  },
  {
    "text": "nested appropriately which is probably the best way to do it and when i say nested i guess i'm talking about putting",
    "start": "2172560",
    "end": "2178400"
  },
  {
    "text": "them in a sequential order uh the same order in which they probably belong to each other",
    "start": "2178400",
    "end": "2183920"
  },
  {
    "text": "if we were to consider the apis that we were working with we have users followed by user id",
    "start": "2183920",
    "end": "2188960"
  },
  {
    "text": "and then we have login histories and that basically says a story right it says that login history belongs to",
    "start": "2188960",
    "end": "2194480"
  },
  {
    "text": "users so make sure to have your query parameters nested correctly so if user id where i'm sorry make sure",
    "start": "2194480",
    "end": "2200320"
  },
  {
    "text": "to have your pad parameters nested correctly if user id is a parameter make sure it comes after users",
    "start": "2200320",
    "end": "2206240"
  },
  {
    "text": "and before any other resource that might belong to the user resource",
    "start": "2206240",
    "end": "2211359"
  },
  {
    "text": "as far as query parameters go they're great for functionalities like searching sorting and pagination so if we were to",
    "start": "2211359",
    "end": "2217920"
  },
  {
    "text": "look at examples in the system that we just built uh we have a couple of apis here where the user id",
    "start": "2217920",
    "end": "2223760"
  },
  {
    "text": "and the login history id are examples of pad parameters and if we want to talk",
    "start": "2223760",
    "end": "2229760"
  },
  {
    "text": "about query parameters and say we wanted to make our system more fancy and implement searching here is an",
    "start": "2229760",
    "end": "2234800"
  },
  {
    "text": "example of an api that we could use for searching through login histories where we want to search by a device",
    "start": "2234800",
    "end": "2241359"
  },
  {
    "text": "doesn't have to be a single value for device and it also doesn't have to be searching by just device",
    "start": "2241359",
    "end": "2246880"
  },
  {
    "text": "this can be a bunch of search criteria meaning we can search by device and time and ip address and they can all be just",
    "start": "2246880",
    "end": "2254240"
  },
  {
    "text": "separated after the question mark in the uri um by an ampersand so that is an example",
    "start": "2254240",
    "end": "2260320"
  },
  {
    "text": "and again device also doesn't need to just contain one value it can have iphone maybe google phone um and",
    "start": "2260320",
    "end": "2266320"
  },
  {
    "text": "anything else like that and as far as sorting goes here is an example of how we could expose apis for",
    "start": "2266320",
    "end": "2272560"
  },
  {
    "text": "sorting i like to use the ascending or descending fields because i think it's a lot more obvious which fields are being",
    "start": "2272560",
    "end": "2278560"
  },
  {
    "text": "started on uh some applications also do the plus or the minus i guess it conveys the same",
    "start": "2278560",
    "end": "2284240"
  },
  {
    "text": "thing but i just like this better because it's more obvious and in the face once again very similar to the searching",
    "start": "2284240",
    "end": "2291359"
  },
  {
    "text": "apis these don't have to contain a single value they can have multiple values",
    "start": "2291359",
    "end": "2296720"
  },
  {
    "text": "and sorting can happen consecutively so if we had time and device and if the time stamp on two different login histories",
    "start": "2296720",
    "end": "2303359"
  },
  {
    "text": "were the same then they can be sorted within that set based on the device on the login history",
    "start": "2303359",
    "end": "2309760"
  },
  {
    "text": "and the same thing for descending and if we were to include pagination in our api service here is an example a",
    "start": "2309760",
    "end": "2317839"
  },
  {
    "text": "very simple example of how pagination would look basically just trying to fetch uh the second page for login history",
    "start": "2317839",
    "end": "2325280"
  },
  {
    "text": "resources of a given user another parameter that might come into play as far as pagination goes is the results",
    "start": "2325280",
    "end": "2331040"
  },
  {
    "text": "per page uh if we don't if we want to allow the client to be able to uh take control of how many results they",
    "start": "2331040",
    "end": "2338079"
  },
  {
    "text": "want return page so with that we've gone through the six steps of",
    "start": "2338079",
    "end": "2343440"
  },
  {
    "text": "http api design um i want to talk about what's next a couple of things that we",
    "start": "2343440",
    "end": "2349680"
  },
  {
    "text": "didn't touch on but i think are very important as you know things that could come next are security uh security is a huge",
    "start": "2349680",
    "end": "2356320"
  },
  {
    "text": "part of any application it's one of those things but there are many options but at the same time there are just so many other options for",
    "start": "2356320",
    "end": "2363119"
  },
  {
    "text": "uh malicious attack and you know things to keep track of uh so as you're adding security to your system not only does your system change",
    "start": "2363119",
    "end": "2370079"
  },
  {
    "text": "but your spec also changes a good example is if you have a layer of authentication",
    "start": "2370079",
    "end": "2375359"
  },
  {
    "text": "followed by a layer of authorization where first the user has to present the right credentials",
    "start": "2375359",
    "end": "2380480"
  },
  {
    "text": "and prove who they say they are followed by making sure that they have permissions to access the resource",
    "start": "2380480",
    "end": "2386240"
  },
  {
    "text": "they're trying to access your response body is going to be different depending on which layer they've got through maybe if they",
    "start": "2386240",
    "end": "2393119"
  },
  {
    "text": "aren't authorized um but they're authenticated you should be passing back a 403 versus giving them",
    "start": "2393119",
    "end": "2399119"
  },
  {
    "text": "more information about the system maybe not a 404 even if that user id that they're trying to use is invalid",
    "start": "2399119",
    "end": "2405680"
  },
  {
    "text": "so things like this um especially you know the response status and the response body change depending on how you decide to",
    "start": "2405680",
    "end": "2412800"
  },
  {
    "text": "implement security on your system and depending on how much of um depending on the sensitivity of the data that's being handled",
    "start": "2412800",
    "end": "2419440"
  },
  {
    "text": "um and the other thing we didn't touch on today was headers uh headers are like the silent things in",
    "start": "2419440",
    "end": "2424880"
  },
  {
    "text": "your uh request they will be passed in whether you use postman or your browser um and they can be used for a lot of",
    "start": "2424880",
    "end": "2432079"
  },
  {
    "text": "custom things and are so understanding how headers work and understanding the default ones again the",
    "start": "2432079",
    "end": "2437200"
  },
  {
    "text": "rfc here really is very helpful uh is very useful in understanding how you can use them in",
    "start": "2437200",
    "end": "2442480"
  },
  {
    "text": "your system and where they make i guess a good choice of a request component",
    "start": "2442480",
    "end": "2448400"
  },
  {
    "text": "so on that note i have reached the conclusion of my talk we started with some introductions we talked about",
    "start": "2448400",
    "end": "2454480"
  },
  {
    "text": "rest apis and rest in general uh apis and api design we talked about",
    "start": "2454480",
    "end": "2460160"
  },
  {
    "text": "who it's for when it's done and um what it is and then we talked about the six step process to http api",
    "start": "2460160",
    "end": "2466880"
  },
  {
    "text": "design we start off with identifying our resource identifying the operations and identifying the input in terms of",
    "start": "2466880",
    "end": "2472800"
  },
  {
    "text": "the request body and then we talked about output components we talked about are the response status uh error versus success",
    "start": "2472800",
    "end": "2478880"
  },
  {
    "text": "ones and which ones best fit different scenarios um and we also talked about the response body",
    "start": "2478880",
    "end": "2483920"
  },
  {
    "text": "and finally we talked about the path uh we talked about path versus query parameters and which one fits where better",
    "start": "2483920",
    "end": "2491760"
  },
  {
    "text": "and if there's one thing that you all take away from my talk today i hope it's this there exists an rfc which is the central",
    "start": "2491760",
    "end": "2498480"
  },
  {
    "text": "document that is uh referenced by several developers who are doing uh hood building apis just like each",
    "start": "2498480",
    "end": "2505440"
  },
  {
    "text": "other and that rfc is going to be your friend when you're building a spec because it has all the information that you might need",
    "start": "2505440",
    "end": "2511760"
  },
  {
    "text": "uh would be picking the right status code or picking the right http word it's going to have all that information there uh please use",
    "start": "2511760",
    "end": "2518319"
  },
  {
    "text": "it as your friend it's a reference and it's there to help you so thanks a lot for being here uh i",
    "start": "2518319",
    "end": "2524800"
  },
  {
    "text": "really enjoy my talk i hope you did too uh if you have any questions i plan on hanging out here for a little bit so",
    "start": "2524800",
    "end": "2530160"
  },
  {
    "text": "feel free to ask away i will be monitoring the chat on webex and slack so if you have questions there",
    "start": "2530160",
    "end": "2535920"
  },
  {
    "text": "i'll be more than happy to answer them uh if you have any other questions or feedback come up later i am generally",
    "start": "2535920",
    "end": "2541599"
  },
  {
    "text": "underscored by on twitter uh so please feel free to reach out to me i'll be very happy to hear from you",
    "start": "2541599",
    "end": "2547440"
  },
  {
    "text": "thanks and have a wonderful day that was excellent john annie thank you so much",
    "start": "2547440",
    "end": "2552480"
  },
  {
    "text": "thanks folks if there are any questions feel free to unmute say hello um ask",
    "start": "2552480",
    "end": "2558720"
  },
  {
    "text": "your questions here um or as generally says we can we can pick up questions in chat or in slack",
    "start": "2558720",
    "end": "2564880"
  },
  {
    "text": "there's always a moment now when you wait to see whether people are reaching for the unmute button or everyone just they get it and it's all fine",
    "start": "2564880",
    "end": "2571060"
  },
  {
    "text": "[Laughter] i think everybody's getting good so there's a question from",
    "start": "2571060",
    "end": "2576880"
  },
  {
    "text": "peter simpson in the chat here says do you version your rest apis that is a great question um i have",
    "start": "2576880",
    "end": "2585040"
  },
  {
    "text": "worked with apis that have been versioned i've been i think in a lot of conversations where",
    "start": "2585040",
    "end": "2590160"
  },
  {
    "text": "it's turned into like really heated conversations with the mention of some i guess trigger words for lack of a",
    "start": "2590160",
    "end": "2595760"
  },
  {
    "text": "better word um no um but",
    "start": "2595760",
    "end": "2601520"
  },
  {
    "text": "i guess i am curious to find out if you're thinking of what options would be best to pick uh",
    "start": "2601520",
    "end": "2608079"
  },
  {
    "text": "or you know is there another question like within versioning itself",
    "start": "2608079",
    "end": "2613520"
  },
  {
    "text": "so maybe just a sort of interesting spin on that is um when you put an api into production do",
    "start": "2614319",
    "end": "2619920"
  },
  {
    "text": "you do anything in case you need to version it in future um uh",
    "start": "2619920",
    "end": "2627839"
  },
  {
    "text": "i guess that is something i have to think about because there's just so many ways of doing it i think the uri",
    "start": "2628000",
    "end": "2633280"
  },
  {
    "text": "is uh is very popularly used for versioning um but i think not a problem but",
    "start": "2633280",
    "end": "2639280"
  },
  {
    "text": "something that needs to be taken into consideration with uri based versioning is how you deploy things or how you want to deploy them",
    "start": "2639280",
    "end": "2645839"
  },
  {
    "text": "headers is another option and i think i personally like using headers for versioning because",
    "start": "2645839",
    "end": "2653040"
  },
  {
    "text": "i think uris need to represent like your resource under the hood um and i don't think versions are really",
    "start": "2653040",
    "end": "2659920"
  },
  {
    "text": "a part of that but that's just a personal preference so i'll say that too um yeah does that help for the question",
    "start": "2659920",
    "end": "2667040"
  },
  {
    "text": "peter i assume so um tom has a question come up and chat about uh you showed us atomic operations",
    "start": "2667040",
    "end": "2673760"
  },
  {
    "text": "on resources um what about bulk operations on resources and then an eg api sku slash recalculate",
    "start": "2673760",
    "end": "2681359"
  },
  {
    "text": "price dot dot dot um uh so it's a question again like you",
    "start": "2681359",
    "end": "2687280"
  },
  {
    "text": "know how we would design that or yeah i guess so it's a tom you want to",
    "start": "2687280",
    "end": "2694160"
  },
  {
    "text": "unmute and jump on and elaborate a little",
    "start": "2694160",
    "end": "2698640"
  },
  {
    "text": "yes the question is how do you go about that in terms of naming and designing the api",
    "start": "2700079",
    "end": "2706319"
  },
  {
    "text": "because it's it's not really attached to a http verb it's rather an operation on a set",
    "start": "2706319",
    "end": "2712880"
  },
  {
    "text": "of resources so what is your take that",
    "start": "2712880",
    "end": "2718160"
  },
  {
    "text": "that's a great question um i think the first question i would ask for operations like that",
    "start": "2718160",
    "end": "2724000"
  },
  {
    "text": "is does it actually change something under the hood uh you know is it creating new resources",
    "start": "2724000",
    "end": "2730079"
  },
  {
    "text": "or is it uh you know uh is it just a facade for a bunch of operations",
    "start": "2730079",
    "end": "2735359"
  },
  {
    "text": "um and a lot of times i i've also seen this like done like that the other option is to look at it from a",
    "start": "2735359",
    "end": "2741599"
  },
  {
    "text": "client's point of view like you know if somebody is trying to say recalculate prices what are they",
    "start": "2741599",
    "end": "2747920"
  },
  {
    "text": "getting like are they getting a list of new prices are they creating a new order uh and if",
    "start": "2747920",
    "end": "2753200"
  },
  {
    "text": "there are multiple of them i think sometimes i like to look at the one that's probably of the biggest value to the client you",
    "start": "2753200",
    "end": "2759920"
  },
  {
    "text": "know maybe if they're trying to recalculate prices you know fetching the",
    "start": "2759920",
    "end": "2764960"
  },
  {
    "text": "newly calculated prices might be the biggest operation there versus anything else that might be created as a part of that",
    "start": "2764960",
    "end": "2771119"
  },
  {
    "text": "um i think that is my i guess i thought about this in two minutes answer [Laughter]",
    "start": "2771119",
    "end": "2779960"
  },
  {
    "text": "um one one interesting uh just tom something you said there is about you know what if it's not a resource it's a list of resources um one",
    "start": "2780240",
    "end": "2787680"
  },
  {
    "text": "of the things that i found really changed the way i think about building apis is no no there is a resource and there is",
    "start": "2787680",
    "end": "2794560"
  },
  {
    "text": "another resource which is a list so like there's a customer and there's a customer list and if you're used to you know",
    "start": "2794560",
    "end": "2800800"
  },
  {
    "text": "conventional programming you're like it's just an array of customer but actually once you start thinking no no a list of customers",
    "start": "2800800",
    "end": "2806640"
  },
  {
    "text": "is the customer list is a different kind of resource it's addressable it has its own uri it has its own operations",
    "start": "2806640",
    "end": "2812960"
  },
  {
    "text": "and then you can sort of start thinking ah so now like it makes sense to say patch a price list",
    "start": "2812960",
    "end": "2818800"
  },
  {
    "text": "and perform some operation on it um i've been i thought that was really great talk there's a lot of stuff",
    "start": "2818800",
    "end": "2824319"
  },
  {
    "text": "in here i wish somebody had told me when i was first starting out because i spent a lot of years getting all this stuff wrong the hard",
    "start": "2824319",
    "end": "2830160"
  },
  {
    "text": "way so that definitely makes two of us so i'm glad you found it useful",
    "start": "2830160",
    "end": "2836720"
  },
  {
    "text": "thank you um so actually just as a suggestion in the",
    "start": "2836720",
    "end": "2841920"
  },
  {
    "text": "chat version and deploy your your two versions so you have strategy and experience in versioning",
    "start": "2841920",
    "end": "2847280"
  },
  {
    "text": "um the best rule of versioning is don't do it if you can possibly make everything future proof but eventually reality will",
    "start": "2847280",
    "end": "2854079"
  },
  {
    "text": "bite you any other questions in the in the chat folks",
    "start": "2854079",
    "end": "2859838"
  },
  {
    "text": "if not thank you very much for oh was that a question yeah um i have",
    "start": "2860319",
    "end": "2866559"
  },
  {
    "text": "one question around how can we allow our first time consumers to kind of explore our api",
    "start": "2866559",
    "end": "2872880"
  },
  {
    "text": "uh in a lower environment so they go to our website they go to our documentation um",
    "start": "2872880",
    "end": "2880160"
  },
  {
    "text": "how can we make them sort of use a different version of different",
    "start": "2880160",
    "end": "2885839"
  },
  {
    "text": "environments that's again a great question i think if you're getting into tools uh swagger hub",
    "start": "2885839",
    "end": "2892880"
  },
  {
    "text": "is very popular uh and you know swagger is also very popular if you want to spin up your own",
    "start": "2892880",
    "end": "2898079"
  },
  {
    "text": "mock swagger service and it has an option in there to be able to pick between environments so they can not just and if you have the",
    "start": "2898079",
    "end": "2905119"
  },
  {
    "text": "right uri for your environments they can explore apis in say the test environment or in beta or in certification and in",
    "start": "2905119",
    "end": "2912000"
  },
  {
    "text": "production um so that's one option uh i guess in a lot of time in a",
    "start": "2912000",
    "end": "2917920"
  },
  {
    "text": "lot of places um the other option is to actually give them like an entire spec which is just a spec but",
    "start": "2917920",
    "end": "2923520"
  },
  {
    "text": "it's not backed by any service so it's you just have to believe that the spec",
    "start": "2923520",
    "end": "2928640"
  },
  {
    "text": "contains all the true information versus actually knowing what is you know uh returned um",
    "start": "2928640",
    "end": "2934400"
  },
  {
    "text": "and i have used this with swagger uh so that's the first example that comes to mind for exploring",
    "start": "2934400",
    "end": "2939920"
  },
  {
    "text": "actual apis under the hood like making actual api calls um i'm not sure i'm i'm sure there are",
    "start": "2939920",
    "end": "2946800"
  },
  {
    "text": "other tools i'm just not sure what they are thank you",
    "start": "2946800",
    "end": "2952319"
  },
  {
    "text": "thanks thanks for the question all right cool let's wrap it up",
    "start": "2952319",
    "end": "2958800"
  },
  {
    "text": "thank you so much janani for speaking and being part of nbc london 2021 uh thanks everyone for",
    "start": "2958800",
    "end": "2965680"
  },
  {
    "text": "coming along",
    "start": "2965680",
    "end": "2971838"
  },
  {
    "text": "you",
    "start": "2978559",
    "end": "2980640"
  }
]