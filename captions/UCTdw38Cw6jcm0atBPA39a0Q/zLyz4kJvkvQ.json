[
  {
    "text": "okay um so uh good I well good afternoon",
    "start": "6040",
    "end": "11639"
  },
  {
    "text": "everybody um my name is John hean I go by a bunch of bunch of different names PhD Bor historicus I do a lot of yelling",
    "start": "11639",
    "end": "18880"
  },
  {
    "text": "on Twitter I uh I'm still currently a student unfortunately um working through",
    "start": "18880",
    "end": "25199"
  },
  {
    "text": "that with the pandemic kind of threw everything off a little bit um but this is my first time I guess coming back and being able to speak um in person um",
    "start": "25199",
    "end": "32439"
  },
  {
    "text": "rather than just online which is you know pretty fantastic um and so uh what",
    "start": "32439",
    "end": "38840"
  },
  {
    "text": "I'm going to kind of talk to you about today um is going to be not necessarily",
    "start": "38840",
    "end": "45200"
  },
  {
    "text": "a topic that's immediately going that's going to be immediately practical to your software engineering Endeavors but sort of talking about um the direction",
    "start": "45200",
    "end": "52600"
  },
  {
    "text": "of a programing language that you know a lot of us in this room use daily um or at least did use daily or have to",
    "start": "52600",
    "end": "59000"
  },
  {
    "text": "interrupt with daily or struggle with daily um and it's C right",
    "start": "59000",
    "end": "65280"
  },
  {
    "text": "um and I want to talk about the idea of C coming back right um so it wasn't",
    "start": "65280",
    "end": "71159"
  },
  {
    "text": "necessarily dead because it was kind of everywhere but people had sort of consigned to the idea that like oh it's",
    "start": "71159",
    "end": "76240"
  },
  {
    "text": "not going to see updates anytime soon and if there are updates they're not going to be very significant and no one's going to really do anything with it and so on and so forth um and that",
    "start": "76240",
    "end": "85920"
  },
  {
    "text": "could not have been further from the truth um there was an explosive number of additions in the latest release that",
    "start": "85920",
    "end": "91520"
  },
  {
    "text": "is going to be uh c23 which is in tradition of c89 C excuse me C90",
    "start": "91520",
    "end": "100040"
  },
  {
    "text": "um c99 being published a year later C7 not being published in 20 2018 um c23",
    "start": "100040",
    "end": "107360"
  },
  {
    "text": "is going to be published in 2024 um so uh you know it's just scheduling and you have to get ISO to agree to stuff and",
    "start": "107360",
    "end": "113759"
  },
  {
    "text": "you do balloting and do National body comments the iso process is very",
    "start": "113759",
    "end": "118840"
  },
  {
    "text": "heavy uh yes the standard has an off by one error which you know that's that's that",
    "start": "118840",
    "end": "125079"
  },
  {
    "text": "that's why you you know it plagues you because we we didn't get it right when we keep keep publishing the standard right but the one time we do get it",
    "start": "125079",
    "end": "131080"
  },
  {
    "text": "right all the one by off by one errors will disappear um I hope I'm hoping that's like a cursing because if it's",
    "start": "131080",
    "end": "136760"
  },
  {
    "text": "not then we're all just you know we're in trouble but um but yeah so specifically I want to talk about C",
    "start": "136760",
    "end": "143000"
  },
  {
    "text": "coming back into the Zeitgeist I guess um and more importantly I want to talk",
    "start": "143000",
    "end": "148920"
  },
  {
    "text": "about this idea of Unbreaking this Charter",
    "start": "148920",
    "end": "154360"
  },
  {
    "text": "right and so what do I what do I mean by Charter right so generally a charter for",
    "start": "154360",
    "end": "161640"
  },
  {
    "text": "any organization is like your goals your mission what am I going to do what are we going to do out in the world what are we you know how are we going to help",
    "start": "161640",
    "end": "167000"
  },
  {
    "text": "people or maybe not help people if that's what your mission is I hope that's not your mission but you know you",
    "start": "167000",
    "end": "172360"
  },
  {
    "text": "can say whatever you want in your Charter and that's supposed to Define your organization your goals your mission right and so as a standards body",
    "start": "172360",
    "end": "179040"
  },
  {
    "text": "um you don't actually have to have a charter but we do have one for c um in particular we have one for every",
    "start": "179040",
    "end": "186120"
  },
  {
    "text": "revision major revision of C we usually put out a charter that defines what it is we're doing right um",
    "start": "186120",
    "end": "194959"
  },
  {
    "text": "You can see the 1994 one is a little bit too old um so we don't actually have like a a link to that one um but we got",
    "start": "194959",
    "end": "202799"
  },
  {
    "text": "one next year right from talking about c9x Charter right so this is one we talking about c99 right so we're past",
    "start": "202799",
    "end": "208640"
  },
  {
    "text": "the c89 threshold we're coming up on like 10 years old or getting closer to the 10-y old thresh Mark which is about",
    "start": "208640",
    "end": "214560"
  },
  {
    "text": "every time we release a standard right once every 10 years basically um and",
    "start": "214560",
    "end": "220239"
  },
  {
    "text": "so we have a c9x charter we have a c1x charter for C11 um and then we have a",
    "start": "220239",
    "end": "225560"
  },
  {
    "text": "preliminary c2x Charter and then we eventually got to an actual c23 Charter um with you know like scheduling and",
    "start": "225560",
    "end": "231519"
  },
  {
    "text": "other stuff right um and the authors of all these papers are conveners the people who were leading the committee so",
    "start": "231519",
    "end": "236799"
  },
  {
    "text": "I think at some point Robert you might actually have to be responsible for writing the charter um and telling us",
    "start": "236799",
    "end": "243120"
  },
  {
    "text": "what we're going to be doing with our lives for the next uh I don't know I think you said you were you were committed for 3 years at least minim my",
    "start": "243120",
    "end": "252159"
  },
  {
    "text": "plan six years okay so six years you heard it here first six years",
    "start": "252159",
    "end": "257280"
  },
  {
    "text": "um but the idea behind this document is that it tells us what exactly the",
    "start": "257280",
    "end": "264160"
  },
  {
    "text": "committee wants to do and what exactly the standard is supposed to be for right who's it supposed to serve um who",
    "start": "264160",
    "end": "269639"
  },
  {
    "text": "supposed to be helping who we supposed I mean I wouldn't say hurting but you know maybe who we're not supposed to be prioritizing right things we're supposed",
    "start": "269639",
    "end": "274919"
  },
  {
    "text": "to be focusing on that sort of thing right and so kind of as we did this um",
    "start": "274919",
    "end": "281160"
  },
  {
    "text": "there's some particularly notable principles or things that kind of pop out from this uh uh document right um",
    "start": "281160",
    "end": "291560"
  },
  {
    "text": "now all of these have like c89 and c99 and C11 and whatever listed on them but",
    "start": "291560",
    "end": "296680"
  },
  {
    "text": "what's important to not is that all of these principles actually still remain the same same more or less throughout the entire duration of the standard",
    "start": "296680",
    "end": "302600"
  },
  {
    "text": "right each time there was a charter all we really did was add additional principles we didn't really remove any",
    "start": "302600",
    "end": "307880"
  },
  {
    "text": "or uh change too many except for like in one specific case where we should where",
    "start": "307880",
    "end": "313759"
  },
  {
    "text": "I'm going to talk about that a little bit um but in c89 it was about existing",
    "start": "313759",
    "end": "318919"
  },
  {
    "text": "code right like there was a bunch of code written by on on k&r from the 70s and 80s and they had to make sure that that stuff kept working um and so a lot",
    "start": "318919",
    "end": "326160"
  },
  {
    "text": "of that Focus was on existing code existing you know make sure that the code work but they kind of said yeah we",
    "start": "326160",
    "end": "331400"
  },
  {
    "text": "can throw your implementation in the garbage right if you write an implementation and you know we make some changes and you you know you know your",
    "start": "331400",
    "end": "337960"
  },
  {
    "text": "compiler Falls over well that's your problem right um in practice that's not actually what happened we actually bend",
    "start": "337960",
    "end": "343160"
  },
  {
    "text": "over backwards to accommodate compilers and and implementers and being able to implement things in the worst way",
    "start": "343160",
    "end": "348199"
  },
  {
    "text": "possible um we uh we love letting we love we love this the term called",
    "start": "348199",
    "end": "353440"
  },
  {
    "text": "quality of implementation where you know we say you can have a really good implementation and then we kind of leave off the fact that you can also have",
    "start": "353440",
    "end": "359560"
  },
  {
    "text": "really bad one um but what we said is that existing code is very important and the idea is that the standard is this",
    "start": "359560",
    "end": "366400"
  },
  {
    "text": "kind of treaty between you know you and your vendor right your implementer the person who's giving you your compiler",
    "start": "366400",
    "end": "372319"
  },
  {
    "text": "and maybe your standard library and any other utilities that come along with it um c99 we were trying to focus on",
    "start": "372319",
    "end": "379520"
  },
  {
    "text": "Simplicity which not sure we hit that Mark but we",
    "start": "379520",
    "end": "385400"
  },
  {
    "text": "definitely tried um but that was the focus for c99 it was like maintain conceptual Simplicity kind of focus on",
    "start": "385400",
    "end": "390639"
  },
  {
    "text": "that C11 was more about trusting the programmer but then we kind of realized around C1 time it's like oh we've got a",
    "start": "390639",
    "end": "396039"
  },
  {
    "text": "lot of you know like hacking became real like in like the 21st century like it started actually hitting a lot of people",
    "start": "396039",
    "end": "402280"
  },
  {
    "text": "a lot of targets um it started blowing up a little bit and so for C11 it was like yeah we should trust the programmer",
    "start": "402280",
    "end": "408039"
  },
  {
    "text": "like you know as like a a thing that's like a general purpose thing but you know when it comes to security we should",
    "start": "408039",
    "end": "413639"
  },
  {
    "text": "probably maybe tone it down a little bit you know you know wind it back some um and and go",
    "start": "413639",
    "end": "422120"
  },
  {
    "text": "about that way right and then finally in c23 we added one just one principle and that was that um apis that we write",
    "start": "422120",
    "end": "428560"
  },
  {
    "text": "should be kind of self-documenting right so if you can have if you can use a uh an attribute or something else to",
    "start": "428560",
    "end": "434080"
  },
  {
    "text": "describe what is going on in the function whether or not it uh modifies Global State um or if what the size of",
    "start": "434080",
    "end": "440599"
  },
  {
    "text": "the array is where possible um you should use that kind of markup right that is available in the standard that almost nobody knows about right um",
    "start": "440599",
    "end": "447639"
  },
  {
    "text": "question who here knows about stat array extents that you can use on",
    "start": "447639",
    "end": "453160"
  },
  {
    "text": "parameters one of you and you're on the committee so yeah it's",
    "start": "453160",
    "end": "460520"
  },
  {
    "text": "it's yeah it's it's it's it's uh it's C exclusive it's not supported by C++",
    "start": "460520",
    "end": "466120"
  },
  {
    "text": "which is why it's usually thrown out because you have a header file you try to use stack extens to document your API",
    "start": "466120",
    "end": "471800"
  },
  {
    "text": "um and then you have to throw it out when you compile with C++ or you get a bug report because somebody's like I compiled this with my GCC g++ whatever",
    "start": "471800",
    "end": "478479"
  },
  {
    "text": "and it broke and it's like I what is this and it's like oh it doesn't matter and you just throw it out and then you go back to using raw",
    "start": "478479",
    "end": "484199"
  },
  {
    "text": "pointers ah um okay but we tried to say that where possible you know API should",
    "start": "484199",
    "end": "490280"
  },
  {
    "text": "be self-documenting they should describe themselves right so if you have a size you can you know add the array extension the parameter and put static in there",
    "start": "490280",
    "end": "496560"
  },
  {
    "text": "and then put the actual like parameter name and that would like describe like this is an array of at least size n and",
    "start": "496560",
    "end": "502479"
  },
  {
    "text": "stuff like that right um and so we wanted to make sure that this was self-documenting where",
    "start": "502479",
    "end": "508240"
  },
  {
    "text": "possible yeah it's also not I mean Microsoft is a c89 compiler with",
    "start": "508240",
    "end": "515518"
  },
  {
    "text": "extensions and that's kind of fa to treat it um unfortunately uh but they are making leaps and strides and",
    "start": "515519",
    "end": "521320"
  },
  {
    "text": "improving their support for Stuff um so they might not get static extents um I they probably figure it's just like not",
    "start": "521320",
    "end": "526399"
  },
  {
    "text": "worth supporting um and I mean they wouldn't be too terribly wrong because most people don't use it um but uh they",
    "start": "526399",
    "end": "532399"
  },
  {
    "text": "are making improvements um but we'll talk about Microsoft and the things they did in particular um and their effect on",
    "start": "532399",
    "end": "539399"
  },
  {
    "text": "the ecosystem um specifically one of the things that's in this giant Charter document is this idea of keep the spirit",
    "start": "539399",
    "end": "545760"
  },
  {
    "text": "of sea right so you know you have all these things right a trust the programmer B don't prevent the the programmer from doing what needs to be",
    "start": "545760",
    "end": "551880"
  },
  {
    "text": "done C keep the language small and simple which constantly gets thrown at me um provide only one way to do an",
    "start": "551880",
    "end": "557360"
  },
  {
    "text": "operation Robert mentioned this in his in his keynote earlier today um e is you have to make it fast even if it's",
    "start": "557360",
    "end": "562959"
  },
  {
    "text": "guaranteed to not be portable right um and F is something we added and we kind",
    "start": "562959",
    "end": "568079"
  },
  {
    "text": "of kind of we kind of shoveled in there you know at C C11 time when you know the world was on fire and",
    "start": "568079",
    "end": "573440"
  },
  {
    "text": "we were getting a lot of CVS and stuff um we said make support for Safety and Security demonstrable right and that was",
    "start": "573440",
    "end": "579040"
  },
  {
    "text": "kind of temper a right you know we had to like you know yeah trust the programmer but not all the time right you know it's a trade-off you know that",
    "start": "579040",
    "end": "584600"
  },
  {
    "text": "sort of thing um did we do that right did we actually",
    "start": "584600",
    "end": "590839"
  },
  {
    "text": "like achieve that goal in standardizing any of the versions of C that we've been standardizing so far right so all the",
    "start": "590839",
    "end": "596000"
  },
  {
    "text": "way from c99 to c23 have we been doing that have we been following our Charter",
    "start": "596000",
    "end": "601519"
  },
  {
    "text": "right um and it really depends on who you ask right um some people think that",
    "start": "601519",
    "end": "607079"
  },
  {
    "text": "c23 is going to you know set the world on fire and Destroy Everything other people think you know uh you know we've",
    "start": "607079",
    "end": "613959"
  },
  {
    "text": "we've wrecked the the process and we're doing everything backwards and inappropriate and that's why we keep",
    "start": "613959",
    "end": "619519"
  },
  {
    "text": "making worse and worse standards that's a from from their perspective um and other people think it's like it has some really good improvements in there that",
    "start": "619519",
    "end": "625240"
  },
  {
    "text": "they want right um it really does depend on who you talk to right but you know um",
    "start": "625240",
    "end": "630279"
  },
  {
    "text": "we're going to kind of go through some very specific pieces of criticism from both inside and outside the committee so this was a paper from someone inside the",
    "start": "630279",
    "end": "636600"
  },
  {
    "text": "committee Martin seore very longtime C member I think he dates all the way back to um I like how I'm dating committee",
    "start": "636600",
    "end": "642639"
  },
  {
    "text": "members he dates all the way back to uh uh mid late 990s um been on the",
    "start": "642639",
    "end": "647920"
  },
  {
    "text": "committee for a while been helping people been implementing stuff at GCC and in other places for a long time um",
    "start": "647920",
    "end": "653680"
  },
  {
    "text": "and so he kind of wrote this paper during like the end like 2020 like like",
    "start": "653680",
    "end": "659160"
  },
  {
    "text": "you know like yeah 2022 um about how we've been standardizing stuff for c23",
    "start": "659160",
    "end": "665399"
  },
  {
    "text": "in particular right and basically you know his contention was that we were",
    "start": "665399",
    "end": "672800"
  },
  {
    "text": "kind of violating the charter right a lot of what the charter said is that we're not supposed to be um that we're",
    "start": "672800",
    "end": "678440"
  },
  {
    "text": "supposed to be codifying existing practice that we're supposed to be taking things from things that exist in implementations right that we're not",
    "start": "678440",
    "end": "684600"
  },
  {
    "text": "supposed to be inventing things right and especially in C11 and later on we really double down on that when we put a",
    "start": "684600",
    "end": "690399"
  },
  {
    "text": "clause no invention no exceptions right like no exceptions to like not like no exceptions like C++ exceptions but like",
    "start": "690399",
    "end": "696480"
  },
  {
    "text": "no exceptions the rule of not inventing anything you're not supposed to invent anything when you put it in the standard right you have to cleave as closely as",
    "start": "696480",
    "end": "702320"
  },
  {
    "text": "possible to existing practice and we kind of did and kind of didn't",
    "start": "702320",
    "end": "710040"
  },
  {
    "text": "right there's some new things that come in there that didn't show up in any other languages and there's some things that were had lots of existing practice",
    "start": "710040",
    "end": "715680"
  },
  {
    "text": "that existed in a lot of different other places um but this this was kind of Martin's kind of saying like we need to",
    "start": "715680",
    "end": "723639"
  },
  {
    "text": "pump the brakes and kind of look at what we're standardizing and what we're doing in the standard right of course it",
    "start": "723639",
    "end": "729560"
  },
  {
    "text": "wasn't just inside the committee it was outside the committee right this is a uh paper called how isoc became unusable",
    "start": "729560",
    "end": "736199"
  },
  {
    "text": "for operating system development which is just a fantastic paper title um but the",
    "start": "736199",
    "end": "743240"
  },
  {
    "text": "contention that Victor has is that because of the things that people are doing with undefined behavior in",
    "start": "743240",
    "end": "748279"
  },
  {
    "text": "particular and the way that compilers are optimizing code these days under the",
    "start": "748279",
    "end": "753839"
  },
  {
    "text": "rules of isoc that makes it less suitable for doing actual operating systems work or",
    "start": "753839",
    "end": "761760"
  },
  {
    "text": "other systems programming lowlevel work tasks um and so that was Victor's contention when he wrote this paper he",
    "start": "761760",
    "end": "767240"
  },
  {
    "text": "shipped it out in January um I I guess I wouldn't say he's outside the committee because like he did show up for like a",
    "start": "767240",
    "end": "772320"
  },
  {
    "text": "time he was like there and then he kind of he was there for a while he kind of observed watched participated um",
    "start": "772320",
    "end": "779560"
  },
  {
    "text": "got on a lot of people's nerves um publicly not this is not like private he did did that publicly unfortunately um",
    "start": "779560",
    "end": "786160"
  },
  {
    "text": "and then he kind of left and then published his paper um and so kind of the contention of his paper was that you",
    "start": "786160",
    "end": "792360"
  },
  {
    "text": "know if you're going to be writing for operating system whatever you're not really writing ISO C you're writing you know some special flavor of C right that",
    "start": "792360",
    "end": "799000"
  },
  {
    "text": "is you know chalk full of compiler Flags like so uh you know you want to have",
    "start": "799000",
    "end": "804480"
  },
  {
    "text": "flags that you know well with well-defined over uh well-defined rap on over flow right um you want to have",
    "start": "804480",
    "end": "810320"
  },
  {
    "text": "flags that don't uh that prevent the compiler from doing things like deleting null pointer checks if you use a standard Library function because stand",
    "start": "810320",
    "end": "816160"
  },
  {
    "text": "all standard Library functions do not have do not accept null pointers as an input and it's undefined Behavior to",
    "start": "816160",
    "end": "821920"
  },
  {
    "text": "give give standard Library functions from c n pointer so if you give it a n",
    "start": "821920",
    "end": "829199"
  },
  {
    "text": "if you give it a pointer and then you try to check after that function that null pointer the compiler will just",
    "start": "829199",
    "end": "834360"
  },
  {
    "text": "delete that check because like it's not supposed to happen right you're never supposed to give a n pointer to stir copy to whatever right um or mem copy or",
    "start": "834360",
    "end": "841920"
  },
  {
    "text": "similar to that and that actually did eventually result in some vulnerabilities in certain places um",
    "start": "841920",
    "end": "847199"
  },
  {
    "text": "because again a lot of people like to pair null pointer with a size of zero rather than like some funky pointer that like is of size zero with size zero um",
    "start": "847199",
    "end": "854920"
  },
  {
    "text": "and so naturally when people were just writing normal code that happen to have no point plus zero you know you you",
    "start": "854920",
    "end": "860519"
  },
  {
    "text": "delete some checks and suddenly you're scribbling over the bootloader of your very important modem or device or small",
    "start": "860519",
    "end": "866880"
  },
  {
    "text": "thing that's supposed to make sure you don't crash um and that's not good so that's the perspective of this",
    "start": "866880",
    "end": "872800"
  },
  {
    "text": "paper right it talked about undefined Behavior it talked about from the perspective outside rather than like are we standardizing things correctly this",
    "start": "872800",
    "end": "879040"
  },
  {
    "text": "was the things you were standardizing do not help us as systems programmers right and so this was a different perspective",
    "start": "879040",
    "end": "885320"
  },
  {
    "text": "then there was yet a third perspective unfortunately also negative um that c23",
    "start": "885320",
    "end": "892160"
  },
  {
    "text": "was basically a I wouldn't say dumpster fire he didn't quite call it dumpster fire because he does praise certain",
    "start": "892160",
    "end": "897440"
  },
  {
    "text": "things but he you know he says that you know standardization is the The Whiskey Tango Fox Trot which is you know just a",
    "start": "897440",
    "end": "903399"
  },
  {
    "text": "fancy way of saying WTF which is you know what the exactly um and so again",
    "start": "903399",
    "end": "908959"
  },
  {
    "text": "Terence Kelly and uh Mr Pon wrote this paper cash 23 the new C standard sets",
    "start": "908959",
    "end": "914399"
  },
  {
    "text": "the world on fire right and in this when they lambasted a lot of different things that did and didn't go into the standard",
    "start": "914399",
    "end": "920040"
  },
  {
    "text": "right like so real loock becoming undefined Behavior was a particularly fun Target that came out of this paper",
    "start": "920040",
    "end": "925720"
  },
  {
    "text": "um and a bunch of other stuff that we changed in c23 that I'm also going to have to talk about uh as we go",
    "start": "925720",
    "end": "931959"
  },
  {
    "text": "forward so that's a lot that's a lot of negativity um you know um I of course",
    "start": "931959",
    "end": "938360"
  },
  {
    "text": "write a lot of positive stuff so I'll kind of be focusing on the negatives um so this talk might be a little bit depressing about c23 um but we're going",
    "start": "938360",
    "end": "946000"
  },
  {
    "text": "to kind of talk about talk through a lot of that negativity and like what's what's what and how we can kind of",
    "start": "946000",
    "end": "953360"
  },
  {
    "text": "approach it really so the first thing we have to ask is are we failing right basic question",
    "start": "953360",
    "end": "959639"
  },
  {
    "text": "to ask are we failing in our mission right we have a charter we have a set of principles right we're supposed to codify existing practice we're supposed",
    "start": "959639",
    "end": "965560"
  },
  {
    "text": "to trust a programmer except when it comes to security stuff we're supposed to uh make sure that we you know give",
    "start": "965560",
    "end": "971480"
  },
  {
    "text": "them the tools they need to get the job done it the code can be both portable and non portable right um you",
    "start": "971480",
    "end": "977920"
  },
  {
    "text": "know where did things go wrong right where are we going wrong what are we doing wrong right if or is it maybe the charter that's",
    "start": "977920",
    "end": "984839"
  },
  {
    "text": "fails right do we not have the right set of principles are we guiding ourselves in the wrong direction ction and that's why we keep making you know what people",
    "start": "984839",
    "end": "990720"
  },
  {
    "text": "consider to be mistakes right and we have to ask ourselves like know is the spirit of seed like dying",
    "start": "990720",
    "end": "997240"
  },
  {
    "text": "right is this this idea of a simple small language that you know can be compiled by everybody but has like this",
    "start": "997240",
    "end": "1003040"
  },
  {
    "text": "Universal appeal and that works everywhere right is is that Spirit going away are we losing it right with c23 are",
    "start": "1003040",
    "end": "1008639"
  },
  {
    "text": "we losing what made see good right and are we going to keep losing it as we keep kind of chasing features and fixes",
    "start": "1008639",
    "end": "1015680"
  },
  {
    "text": "and whatever else right so so that's kind of the biger",
    "start": "1015680",
    "end": "1022399"
  },
  {
    "text": "question around all of this right are we actually doing something proper in service of sea and this is this is the",
    "start": "1022399",
    "end": "1028798"
  },
  {
    "text": "spirit of SE gets thrown at me all the time right um it doesn't matter what",
    "start": "1028799",
    "end": "1034480"
  },
  {
    "text": "discussion I'm in um new feature old feature bug fix talking about undefined",
    "start": "1034480",
    "end": "1039798"
  },
  {
    "text": "Behavior right I always hear about the spirit of sea like you know it's like the the Ghost of Christmas Past come to",
    "start": "1039799",
    "end": "1046160"
  },
  {
    "text": "tell me about you know how evil and and scroogie I am but you",
    "start": "1046160",
    "end": "1051400"
  },
  {
    "text": "know obviously we have these you know these these principles right you know you're you're supposed to you know don't",
    "start": "1051400",
    "end": "1056440"
  },
  {
    "text": "for the program from doing what needs to be done keep the language small and simple right this is supposed to be the spirit of sea this is literally there's a heading called the spirit of sea and",
    "start": "1056440",
    "end": "1063320"
  },
  {
    "text": "then this comes after it right so a through F this is what's in the spirit of sea right this is what the charter",
    "start": "1063320",
    "end": "1068440"
  },
  {
    "text": "says Spirit of sea is right and of course they people you know take and take one of these lines and slap me over",
    "start": "1068440",
    "end": "1073960"
  },
  {
    "text": "the head with it whenever I write a proposal or something and that's usually what you know they say this spirit is supposed to be about um so obviously",
    "start": "1073960",
    "end": "1081960"
  },
  {
    "text": "right there are the full set of principles I showed you a glimpse of them before but really um c89 we had",
    "start": "1081960",
    "end": "1087280"
  },
  {
    "text": "existing code is important C code can be portable C code can be non-portable those two sound contradictory but the idea is that you know there's some stuff",
    "start": "1087280",
    "end": "1094000"
  },
  {
    "text": "that can be portable and then there's other stuff where you just have to let the vendor make an extension and you can't really you know I can't really",
    "start": "1094000",
    "end": "1100799"
  },
  {
    "text": "properly describe your bus memory with your you know uh chip memory and all",
    "start": "1100799",
    "end": "1105880"
  },
  {
    "text": "that stuff correctly I'm just going to assume that's all unified address space but like you know you can write some",
    "start": "1105880",
    "end": "1111360"
  },
  {
    "text": "things that might be non-portable that will talk to the fact that they'll know the fact that you are dealing with several different address spaces right",
    "start": "1111360",
    "end": "1118480"
  },
  {
    "text": "um so obviously the ports that are portable are the stuff that we Define the stuff that's non-portable is undefined behavior and you know",
    "start": "1118480",
    "end": "1124799"
  },
  {
    "text": "implementation defined behavior and unspecified Behavior three different kinds of traps for you to run into and then",
    "start": "1124799",
    "end": "1131320"
  },
  {
    "text": "your vendor extensions that go all around that um obviously want to avoid quiet changes",
    "start": "1131320",
    "end": "1136640"
  },
  {
    "text": "so when we break something we want to make sure that it's compile time break so we don't like you know change something and then like your code just silently does something different and",
    "start": "1136640",
    "end": "1142200"
  },
  {
    "text": "then everything explodes right that's you know that's bad um obviously we have",
    "start": "1142200",
    "end": "1147240"
  },
  {
    "text": "the treaty between the Implement and the programmer right you every time you compile the programmer you basically shake the hand of your implementor and they say good luck and you say thank you",
    "start": "1147240",
    "end": "1153440"
  },
  {
    "text": "and then you hope that you know you get a good program on the other side um that's part of it um obviously it says",
    "start": "1153440",
    "end": "1159080"
  },
  {
    "text": "keep the spirit of C which references that list um and then c99 we had support International programming that was when",
    "start": "1159080",
    "end": "1164640"
  },
  {
    "text": "everybody was like on the like posix and local kick and so like we put that in there we put a bunch of like local and like Global mutable State and everybody",
    "start": "1164640",
    "end": "1171120"
  },
  {
    "text": "was happy until we started sharing stuff and then everybody was sad because you",
    "start": "1171120",
    "end": "1176400"
  },
  {
    "text": "know you called the library function and it changed the local of something or mess with the local and so this like",
    "start": "1176400",
    "end": "1181480"
  },
  {
    "text": "Library all the way over here that didn't have anything to do with you um is broken now because you changed to",
    "start": "1181480",
    "end": "1187280"
  },
  {
    "text": "using the uh comma for your decimal point and that was expecting a period and now everything's gone to hell um and",
    "start": "1187280",
    "end": "1194760"
  },
  {
    "text": "so a little bit iffy but we do have support International programming um codify",
    "start": "1194760",
    "end": "1201720"
  },
  {
    "text": "existing practice to address evident deficiencies right so always focusing on existing practice more principles right um so",
    "start": "1201720",
    "end": "1209000"
  },
  {
    "text": "there're about 15 so in c99 we continued with that we got minimizing compatibility with c89 minimiz Inc",
    "start": "1209000",
    "end": "1214440"
  },
  {
    "text": "compatibility with C++ maintain conceptual Simplicity and then C1 we added some more right we had trust a",
    "start": "1214440",
    "end": "1219520"
  },
  {
    "text": "programmer but that's kind of outdated you know because security and we're getting our butts kicked in you know uh",
    "start": "1219520",
    "end": "1225919"
  },
  {
    "text": "in in in all of these uh C databases um we uh wanted to say that you know there",
    "start": "1225919",
    "end": "1234360"
  },
  {
    "text": "should be no invention without exception that's very important right we're not supposed to do anything unless a compiler vendor does it first right so",
    "start": "1234360",
    "end": "1240120"
  },
  {
    "text": "they got to do it first and then then we follow what they do you know and no no inventing stuff no making new features",
    "start": "1240120",
    "end": "1245559"
  },
  {
    "text": "none of that um you know obviously we have to talk about migration of existing codebase you have to make sure that you",
    "start": "1245559",
    "end": "1250919"
  },
  {
    "text": "know if you have a c89 Cod base you can Port it to C 11 or even to c23 not quite",
    "start": "1250919",
    "end": "1259000"
  },
  {
    "text": "fully possible without some tweaks but we I think we did a decent job there and then c23 obviously you're",
    "start": "1259000",
    "end": "1264679"
  },
  {
    "text": "self-documenting applications um but more than the principles of the charter it's used in Internet arguments",
    "start": "1264679",
    "end": "1271559"
  },
  {
    "text": "a lot um and in committee arguments a lot I get to hear the word the spirit of SE so much uh to the point that it",
    "start": "1271559",
    "end": "1279279"
  },
  {
    "text": "actually drives me insane every time I hear it I just like want to take off the headphones I just want to like just just",
    "start": "1279279",
    "end": "1285000"
  },
  {
    "text": "just God I don't want to hear this but I have to hear it um this this is the the phras that gets thrown at me so much",
    "start": "1285000",
    "end": "1291240"
  },
  {
    "text": "this isn't in line with the spirit of sea and I just I just God um it's a very common cudel",
    "start": "1291240",
    "end": "1298000"
  },
  {
    "text": "right but why is it a common cudel why does it keep showing up why do people keep telling me that this isn't in line with",
    "start": "1298000",
    "end": "1304159"
  },
  {
    "text": "C right when we talk about defer I keep hearing that oh this is garbage and it is in line with c and you know uh you",
    "start": "1304159",
    "end": "1309480"
  },
  {
    "text": "know you should have to keep the language small and simple right when we hear about conix sper we hear oh it's not in line with C it's erasing um the",
    "start": "1309480",
    "end": "1317320"
  },
  {
    "text": "ability for compiler do optimizations at compile time or run time whatever it wants to you shouldn't be able to do that it's not in line with the spirit of",
    "start": "1317320",
    "end": "1323320"
  },
  {
    "text": "C right um almost every feature vas complex imaginary uh a lot of Library",
    "start": "1323320",
    "end": "1330480"
  },
  {
    "text": "functions right all of them is this in the spirit of sea somebody always says no and it gets confusing like who are",
    "start": "1330480",
    "end": "1337360"
  },
  {
    "text": "you supposed to be trusting here right because sometimes they say no to stuff that looks like they should say yes to it and sometimes say yes stuff that you",
    "start": "1337360",
    "end": "1343480"
  },
  {
    "text": "think they should they would say no to and it doesn't seem like there's any consistency and it drives me nuts um but",
    "start": "1343480",
    "end": "1348679"
  },
  {
    "text": "I hear it a lot the spirit of sea again father Christmas bothering me",
    "start": "1348679",
    "end": "1354640"
  },
  {
    "text": "um it gets applied to everything literally everything right new stuff old",
    "start": "1354640",
    "end": "1359679"
  },
  {
    "text": "stuff stuff we put in c23 stuff that was there a long time ago right um you know",
    "start": "1359679",
    "end": "1365440"
  },
  {
    "text": "if you use generic you know you should be fired right that c of thing right con complex shouldn't have been there embed",
    "start": "1365440",
    "end": "1372320"
  },
  {
    "text": "didn't didn't need to be put in lambdas shouldn't be put in right um why do we",
    "start": "1372320",
    "end": "1377679"
  },
  {
    "text": "have a atomics when we have volatile right which is which was a very fun discussion and by fun I mean depressing",
    "start": "1377679",
    "end": "1384520"
  },
  {
    "text": "you know obviously you know atomics were not in the spirit of sea the way we standardized them right",
    "start": "1384520",
    "end": "1390159"
  },
  {
    "text": "um and that whole conversation drove me",
    "start": "1390159",
    "end": "1397279"
  },
  {
    "text": "absolutely up the wall um you know and the reason some of these have Aster there is that we actually",
    "start": "1397279",
    "end": "1403760"
  },
  {
    "text": "only started saying this after we adopted the feature right",
    "start": "1403760",
    "end": "1408799"
  },
  {
    "text": "and after we saw that it wasn't picked up very quickly in the ecosystem so we kind of it's like an it's like it's it's",
    "start": "1408799",
    "end": "1414120"
  },
  {
    "text": "an expost facto justification like oh it didn't get good adoption must not have been in the spirit of sea we should roll",
    "start": "1414120",
    "end": "1419760"
  },
  {
    "text": "it back and in some cases we did right variable length arrays complex imaginary",
    "start": "1419760",
    "end": "1426840"
  },
  {
    "text": "and a couple of other things when were standardized in c99 they were made mandatory features in c99 but when C11",
    "start": "1426840",
    "end": "1432880"
  },
  {
    "text": "came around we kind of rolled a lot of them back and made them optional um and again this was idea because well",
    "start": "1432880",
    "end": "1438200"
  },
  {
    "text": "adoption is slow and you know they're not really seeing that the implementations might not be good right",
    "start": "1438200",
    "end": "1443840"
  },
  {
    "text": "along this time we were also getting a lot of you know vulnerabilities off of the stack thanks FAS um where people",
    "start": "1443840",
    "end": "1450159"
  },
  {
    "text": "would you know un not take an unsanitized number and use it as the",
    "start": "1450159",
    "end": "1455440"
  },
  {
    "text": "runtime parameter into an array and that created a VA that would either blow up your stack or manage it in the way you",
    "start": "1455440",
    "end": "1462159"
  },
  {
    "text": "didn't expect and things would go wrong very quickly um you know and so a lot of people had misgiving about things like",
    "start": "1462159",
    "end": "1468279"
  },
  {
    "text": "variable length arrays and other things and so kind of retroactively after they were standardized to kind of put us on",
    "start": "1468279",
    "end": "1474399"
  },
  {
    "text": "par with APL and Fortran as like numerical Computing languages we then rolled it back and said e it's optional",
    "start": "1474399",
    "end": "1480760"
  },
  {
    "text": "you can you can you can throw it out right and so a lot of compilers do throw it out msvc in particular throws it right out the",
    "start": "1480760",
    "end": "1487440"
  },
  {
    "text": "window so you know obviously we want to adhere to this chart right when there's a document that tells us what we're",
    "start": "1488279",
    "end": "1493559"
  },
  {
    "text": "supposed to be doing you know everybody says that we're abandoning the spirit of sea or that we're doing we're adding complexity where you know we don't have",
    "start": "1493559",
    "end": "1499200"
  },
  {
    "text": "enough user experience or commercial compiler experience it has to be a commercial compiler by the way you can't just like Tinker some compiler yourself",
    "start": "1499200",
    "end": "1505399"
  },
  {
    "text": "they put a clause in it needs to be a commercial compil so you got to get you to be getting paid for it which sucks",
    "start": "1505399",
    "end": "1510919"
  },
  {
    "text": "because I'm not getting paid for a lot the work I do um unless I can swing my",
    "start": "1510919",
    "end": "1516159"
  },
  {
    "text": "GitHub sponsors as payment for the I don't know I'll figure out how to make it a I'll make my implementation a commercial implementation I'll figure it out but it has to be a commercial",
    "start": "1516159",
    "end": "1522799"
  },
  {
    "text": "compiler um that has the experience with these features you can't be too inventive obviously and you know you",
    "start": "1522799",
    "end": "1528880"
  },
  {
    "text": "can't be using new features for all the stuff that we've been doing above right so how do we adhere to this this this",
    "start": "1528880",
    "end": "1534600"
  },
  {
    "text": "this this this document ah how do we make sure that we're hearing to the standard how do we make sure that we're pleasing people who you know kind of",
    "start": "1534600",
    "end": "1541080"
  },
  {
    "text": "have been for a very long time saying you're ruining C you're ruining C you're ruining C you're ruining C you're ruining c",
    "start": "1541080",
    "end": "1547559"
  },
  {
    "text": "um so let's talk about some of those features right because like if we're going to say that vas or threads or",
    "start": "1547559",
    "end": "1553799"
  },
  {
    "text": "atomics or generics ruin C right we have to find where we failed the charter right right that would be a good place",
    "start": "1553799",
    "end": "1558919"
  },
  {
    "text": "to start right so that we know where we failed so that we can you know stop failing right like it's like a postmortem sort of deal right although",
    "start": "1558919",
    "end": "1565520"
  },
  {
    "text": "it's not dead so postmortem isn't right the exact right term but like we're gonna we're going to do a little small dissection right yeah",
    "start": "1565520",
    "end": "1574240"
  },
  {
    "text": "um so variable length arrays and variably modifies types vmts um this was",
    "start": "1574240",
    "end": "1582279"
  },
  {
    "text": "actually originally proposed by a man by the name of Tom McDonald on behalf of cig cig CNC plus cray research um some",
    "start": "1582279",
    "end": "1590080"
  },
  {
    "text": "of you might have never heard of them but if you're in the numeric world they're all over the place because they are huge National Labs um and they're",
    "start": "1590080",
    "end": "1595880"
  },
  {
    "text": "also huge in you know not just National Labs in the United States but Labs all over the world um they were the ones who",
    "start": "1595880",
    "end": "1601360"
  },
  {
    "text": "cooked up vas right as we know them today right they made the feature right",
    "start": "1601360",
    "end": "1606640"
  },
  {
    "text": "back in what is it 1994 1994 um and I kind of have some check boxes",
    "start": "1606640",
    "end": "1613440"
  },
  {
    "text": "here about things they kind of adhere to the c99 princip principles right that were there at the time so you know they",
    "start": "1613440",
    "end": "1622200"
  },
  {
    "text": "had three years of secret proposals and editing so there was lots of back and forth made sure everybody was in in eror they didn't really Rush the process um",
    "start": "1622200",
    "end": "1629120"
  },
  {
    "text": "they were trusting the programmer right I mean it's vas right you're typically supposed to allocate something on the stack so like you're responsible don't",
    "start": "1629120",
    "end": "1635080"
  },
  {
    "text": "blow out your stack don't you know connect it to unsanitized user input right all that stuff right we are trusting the programmer right that",
    "start": "1635080",
    "end": "1640799"
  },
  {
    "text": "turned out to be a mistake in some cases but like we were following the charter um it was implemented in multiple",
    "start": "1640799",
    "end": "1646080"
  },
  {
    "text": "compilers right so this wasn't pure invention where somebody just said I have an idea and just like scribbled it on the back of the napkin and like",
    "start": "1646080",
    "end": "1651440"
  },
  {
    "text": "folded it up and then like mailed it into ISO um this was actually implemented in place right so obviously",
    "start": "1651440",
    "end": "1657159"
  },
  {
    "text": "c c and C++ had it but then the EG this was around the time when there was the I",
    "start": "1657159",
    "end": "1662480"
  },
  {
    "text": "wouldn't say violent but there was the explosive split between GCC and EGCC um",
    "start": "1662480",
    "end": "1668120"
  },
  {
    "text": "where they parted ways from one another right they forked GCC at a time um and so for a while there was",
    "start": "1668120",
    "end": "1674600"
  },
  {
    "text": "like it wasn't quite red hat but it was basically red hsh folk who forked GCC",
    "start": "1674600",
    "end": "1681679"
  },
  {
    "text": "and basically maintained their own version and vastly improved it and they improved it so well that it was around",
    "start": "1681679",
    "end": "1687080"
  },
  {
    "text": "that time around the 2.x DAT I think 2.8 2.9 2.95 they merged back into the GC",
    "start": "1687080",
    "end": "1693720"
  },
  {
    "text": "main Tre and they became the like the actual stewards of GCC right um so that was where and around that time they also",
    "start": "1693720",
    "end": "1700320"
  },
  {
    "text": "had support for VAs right um and there were other compilers as well that also had support fre so we have multiple",
    "start": "1700320",
    "end": "1706440"
  },
  {
    "text": "commercial widely used implementations right so we're we're following the chart over now some things that people want to",
    "start": "1706440",
    "end": "1713200"
  },
  {
    "text": "ding it on is that it's not simple right it's runtime right so you've taken size of which is originally a compile time",
    "start": "1713200",
    "end": "1720240"
  },
  {
    "text": "thing a constant time number right that you can use in various different places that require integer constant",
    "start": "1720240",
    "end": "1725440"
  },
  {
    "text": "expressions and it would work right it would give you you know statically sized arrays you could you know use it in in",
    "start": "1725440",
    "end": "1732600"
  },
  {
    "text": "certain computations and it would do exactly what you would expect it to um then we chy to change it to the this runtime thing right so you have the same",
    "start": "1732600",
    "end": "1739320"
  },
  {
    "text": "syntax everything looks the same but it has subtly different properties um",
    "start": "1739320",
    "end": "1745519"
  },
  {
    "text": "and the other issue and this is kind of post after the standardization of vas it",
    "start": "1745519",
    "end": "1751399"
  },
  {
    "text": "mess poorly with existing implementation so a lot of impation didn't have a lot of Stack to give and a lot of impation didn't have a heap so where is this",
    "start": "1751399",
    "end": "1759720"
  },
  {
    "text": "runtime data coming from and the standard was very quiet about that right",
    "start": "1759720",
    "end": "1764880"
  },
  {
    "text": "we don't really say where this memory is supposed to come from right is a conforming implementation that you can pull vaa memory off of the Heap every",
    "start": "1764880",
    "end": "1771760"
  },
  {
    "text": "time you can just call Malo every time and then call free at the end of the block and like that's valid that's a valid implementation um I wouldn't",
    "start": "1771760",
    "end": "1778600"
  },
  {
    "text": "recommend it but like go for it um so it meshed poorly with existing",
    "start": "1778600",
    "end": "1784600"
  },
  {
    "text": "implementation a lot of people had trouble implementing it and they also struggled with suddenly having this runtime size of and consequentially down",
    "start": "1784600",
    "end": "1791799"
  },
  {
    "text": "the line as we got things like a line of and other things that we're supposed to like compute the you know things at compile time time those things became",
    "start": "1791799",
    "end": "1798200"
  },
  {
    "text": "runtime entities when you put vas with them right and so this became kind of like a very big contention Point like it",
    "start": "1798200",
    "end": "1804600"
  },
  {
    "text": "felt clunky to use and not everybody was Implement correctly and you know what",
    "start": "1804600",
    "end": "1809799"
  },
  {
    "text": "was it it wasn't until 2020 that GCC actually implemented what's called stack probing which is really just check the",
    "start": "1809799",
    "end": "1815960"
  },
  {
    "text": "size of the stack before you decide to allocate this this huge buffer off of the stack so you don't like blow up the stack right so it'll seg fault instead",
    "start": "1815960",
    "end": "1822320"
  },
  {
    "text": "of just like going off into space um",
    "start": "1822320",
    "end": "1827760"
  },
  {
    "text": "and so you know it took a long time for impation to get kind of even remotely",
    "start": "1827760",
    "end": "1833600"
  },
  {
    "text": "decent with vas and so that had a very negative impact on a",
    "start": "1833600",
    "end": "1838679"
  },
  {
    "text": "lot of people who were using it right so they noticed the code gen was bad they noticed that a lot of the features were just not up to Snuff and so it kind of",
    "start": "1838679",
    "end": "1846760"
  },
  {
    "text": "contributed this nasty feedback cycle where everybody was like V they want to use vas but like they have this bad code",
    "start": "1846760",
    "end": "1852399"
  },
  {
    "text": "gen and you know it's difficult to control where the memory comes from and how does your implementation implement M",
    "start": "1852399",
    "end": "1857559"
  },
  {
    "text": "the the feature right I don't have any control over this so I just had to depend on my implement but what if my implementor not necessarily hostile to",
    "start": "1857559",
    "end": "1862880"
  },
  {
    "text": "me but they kind of phoned it in and they just they did whatever right and they didn't add any of the bells and whistles that I needed right and so it",
    "start": "1862880",
    "end": "1868159"
  },
  {
    "text": "obviously uh uh it was obviously difficult right a difficult time for a lot of people um the numerical people",
    "start": "1868159",
    "end": "1873919"
  },
  {
    "text": "were happy though because again they exist on their own planet in their own island with their own supercomputers they get their own compilers they can",
    "start": "1873919",
    "end": "1879679"
  },
  {
    "text": "hack them up as much as they want to um so they were partying right they were like yeah vas we got it we got vmts we got vas we're on they're on Cloud9 right",
    "start": "1879679",
    "end": "1886960"
  },
  {
    "text": "um but this is kind of what V look like and honestly it kind of checked all the",
    "start": "1886960",
    "end": "1893120"
  },
  {
    "text": "boxes right except for the runtime size of bit but even then this was back in like n this was back in 94 right like",
    "start": "1893120",
    "end": "1900000"
  },
  {
    "text": "compilers were barely doing constant propagation back then right like do you really need a constant time size of I",
    "start": "1900000",
    "end": "1906080"
  },
  {
    "text": "mean it turned out to be super important later as we got like better compilers that could do better optimizations but",
    "start": "1906080",
    "end": "1912240"
  },
  {
    "text": "like I mean do did you really need it and so it turned out yes we did need it it was kind of an important property um",
    "start": "1912240",
    "end": "1919200"
  },
  {
    "text": "but you know we degraded into this runtime size of and all these interesting questions about when the type of vaa is made available and",
    "start": "1919200",
    "end": "1926279"
  },
  {
    "text": "whatnot to to the end user and so that kind of became a point but like for the most part this passes like what the",
    "start": "1926279",
    "end": "1933000"
  },
  {
    "text": "charter asked of it right so even though retroactively we say it was a bad feature right like at the time it it",
    "start": "1933000",
    "end": "1938960"
  },
  {
    "text": "checked boxes it checked the boxes it had all it had the implementations we knew how to implement it right that sort of stuff",
    "start": "1938960",
    "end": "1945600"
  },
  {
    "text": "right threads threads. actually proposed back in 2005",
    "start": "1945600",
    "end": "1952799"
  },
  {
    "text": "um had a lot of experience which is weird because when you read some of the papers especially Martin seor is like oh",
    "start": "1952799",
    "end": "1958720"
  },
  {
    "text": "there's only like one implementation of it and like they didn't know what they were doing and we standardize you know unbaked stuff right um but it turns out",
    "start": "1958720",
    "end": "1966279"
  },
  {
    "text": "it was actually well implemented it was actually in fact a joint effort between wg21 and wg4 it was around this time",
    "start": "1966279",
    "end": "1972000"
  },
  {
    "text": "that like both C and C++ both committees were like swapping papers back and forth they were really talking to each other a",
    "start": "1972000",
    "end": "1977679"
  },
  {
    "text": "lot like almost every meeting every every time right um and so they did this",
    "start": "1977679",
    "end": "1982880"
  },
  {
    "text": "kind of together right um and it was implemented and Deployable on multiple platforms now we didn't get threads.",
    "start": "1982880",
    "end": "1989320"
  },
  {
    "text": "exactly right but we got X threads. on MSC Windows because Windows can't help",
    "start": "1989320",
    "end": "1994519"
  },
  {
    "text": "themselves and can't be standard with anything um and we got obviously a form of it based",
    "start": "1994519",
    "end": "2001440"
  },
  {
    "text": "on lib P threads now the LI P threads version was a little bit late to the party um when this first got proposed",
    "start": "2001440",
    "end": "2007960"
  },
  {
    "text": "and eventually standardized in C11 um the thread studies didn't come for like what another six years on GCC um they",
    "start": "2007960",
    "end": "2015000"
  },
  {
    "text": "could have implemented it but I think there just wasn't any pressure because they weren't really doing much code sharing and everybody was using Li P",
    "start": "2015000",
    "end": "2020120"
  },
  {
    "text": "threads um P threads was basically the way to do threading on anytime you want touch the nxs machine um so it didn't",
    "start": "2020120",
    "end": "2028480"
  },
  {
    "text": "really manifest very quickly um and so it didn't see much use um and so at the",
    "start": "2028480",
    "end": "2035760"
  },
  {
    "text": "bottom there you can see not implemented by by most vendors it was be because of this idea that you know GCC took such a",
    "start": "2035760",
    "end": "2041159"
  },
  {
    "text": "long time to implement it Microsoft still hasn't implemented it though I've been told on the down low that they're",
    "start": "2041159",
    "end": "2046720"
  },
  {
    "text": "implementing threads. H and maybe they'll get it in their compiler eventually um which would be great for msvc um but it's not implemented yet",
    "start": "2046720",
    "end": "2054800"
  },
  {
    "text": "um but it was very much a collaboration between a lot of different people from both C and C++ there was a lot of",
    "start": "2054800",
    "end": "2061079"
  },
  {
    "text": "implementation experience there was a lot of eyes on it so this wasn't quite Half Baked it just you know we had all",
    "start": "2061079",
    "end": "2067240"
  },
  {
    "text": "the buyin we had all the people there we standardized it and then it took such a long time to actually get off the ground",
    "start": "2067240",
    "end": "2073320"
  },
  {
    "text": "right and so and that and that's a little bit weird right it's sort of the same story with vas right like we standardized it we knew what we were",
    "start": "2073320",
    "end": "2078480"
  },
  {
    "text": "supposed to be doing and then people kind of stumbled a lot in implementing it and getting it on platforms right um",
    "start": "2078480",
    "end": "2084638"
  },
  {
    "text": "and so it was a bit of a weird thing right like we had the standard thread facility that almost nobody was using",
    "start": "2084639",
    "end": "2090520"
  },
  {
    "text": "because they would rather just hit the plat they'd rather just hit the platform specific API to do it right or in some cases some people would literally wrap",
    "start": "2090520",
    "end": "2096878"
  },
  {
    "text": "c++'s stood thread and use that to create their own platform agnostic API which is just like",
    "start": "2096879",
    "end": "2103000"
  },
  {
    "text": "what huh um but that's what we got um so",
    "start": "2103000",
    "end": "2108680"
  },
  {
    "text": "that was kind of the trouble with thread and again it was mentioned by a couple papers it was mentioned by a couple people that like this was like a reason this like a one thing that we failed to",
    "start": "2108680",
    "end": "2114880"
  },
  {
    "text": "do properly in C11 um but again they",
    "start": "2114880",
    "end": "2120320"
  },
  {
    "text": "kind of did everything right right they had the Droid enfort they had the multiple Deployable implementations they had all the stuff that would qualify it",
    "start": "2120320",
    "end": "2127160"
  },
  {
    "text": "as a feature for C but kind of again retroactively we say it was a bad",
    "start": "2127160",
    "end": "2132800"
  },
  {
    "text": "feature right um and it seemed most of that stem from the fact that it just wasn't implemented by our",
    "start": "2132800",
    "end": "2139640"
  },
  {
    "text": "vendors atomics this one's super fun and by fun I mean painful um lots of talk",
    "start": "2139720",
    "end": "2147160"
  },
  {
    "text": "about this one right this one spent more time baking than thread stuff the thread stuff kind of came with the the the",
    "start": "2147160",
    "end": "2153400"
  },
  {
    "text": "atomics um but the atomics were the really big part because at this time this is when everybody was like losing",
    "start": "2153400",
    "end": "2158640"
  },
  {
    "text": "their minds about the memory model in C++ right they weren't able to like there's no well- defined way to like talk between threads data races how do",
    "start": "2158640",
    "end": "2165079"
  },
  {
    "text": "you share stuff right and so in C11 and and C++ 11 and later iterations of C++",
    "start": "2165079",
    "end": "2172560"
  },
  {
    "text": "they really hammered down on the memory model like what does it mean to have a data Ras what is happens what is that happens before relationship for our code",
    "start": "2172560",
    "end": "2179040"
  },
  {
    "text": "right how do you you know Define reorder reordering optimizations and so on and so forth right um so",
    "start": "2179040",
    "end": "2187680"
  },
  {
    "text": "originally this was implemented as a library at first right this was what like Hans and Lawrence and and Paul",
    "start": "2187680",
    "end": "2193680"
  },
  {
    "text": "McKinny who's a prolific uh Linn kernel contributor Crowley obviously does a whole bunch of numeric stuff and lots of",
    "start": "2193680",
    "end": "2200240"
  },
  {
    "text": "asynchronous work um and Hans is just again a a Titan of just uh multi-threaded programming",
    "start": "2200240",
    "end": "2205680"
  },
  {
    "text": "multi-threaded modeling and everything right he powered a lot of the work to get this a this model for",
    "start": "2205680",
    "end": "2212240"
  },
  {
    "text": "multi-threading into the standard right um and so you have all these Powerhouse people working together they implement",
    "start": "2212240",
    "end": "2218319"
  },
  {
    "text": "the stuff they share their implementation they share their notes they're sharing between C and C++ making sure that everybody's up to date um but",
    "start": "2218319",
    "end": "2224720"
  },
  {
    "text": "one of the things that they actually discovered which is what you're supposed to do right when you're doing when you're getting user experience by",
    "start": "2224720",
    "end": "2229800"
  },
  {
    "text": "testing stuff in the field they tested the fact that they had these libraries and they would deploy these libraries",
    "start": "2229800",
    "end": "2234920"
  },
  {
    "text": "and then the compiler would reorder their crap on them right and like that that's not that's not supposed to happen",
    "start": "2234920",
    "end": "2241480"
  },
  {
    "text": "right you're not supposed to have a compiler that reordering your atomics",
    "start": "2241480",
    "end": "2247119"
  },
  {
    "text": "Beyond its fences and everything else right and the reason it was reordering things Beyond its fences is because the compiler didn't understand that like",
    "start": "2247119",
    "end": "2253440"
  },
  {
    "text": "this was like a fence and I'm not supposed to do that right so there was always this game of cat and mouse where they would deploy the library and then",
    "start": "2253440",
    "end": "2260160"
  },
  {
    "text": "the compiler would be like Oh I'm smarter now and then they would start reordering stuff again and they like no no stop doing that and so what",
    "start": "2260160",
    "end": "2265480"
  },
  {
    "text": "eventually ended up happening is that especially for uh the C stand for the C",
    "start": "2265480",
    "end": "2272240"
  },
  {
    "text": "standard committee right because again they don't have the same kind of commitment to overpowered Library",
    "start": "2272240",
    "end": "2278000"
  },
  {
    "text": "features like C++ does um they said listen we can't kind of keep playing this cat and mouse game we have to give",
    "start": "2278000",
    "end": "2284040"
  },
  {
    "text": "the compiler a set of things that it knows about for sure so that it doesn't do things like reorder fences or",
    "start": "2284040",
    "end": "2290119"
  },
  {
    "text": "anything else right so we have to bless certain things bless certain operations bless certain types as atomic as having",
    "start": "2290119",
    "end": "2296520"
  },
  {
    "text": "these properties so that we can get the ordering guarantees that we wanted in the first place right and so that's why",
    "start": "2296520",
    "end": "2303440"
  },
  {
    "text": "this thing that was started as a library had the transition into the compiler",
    "start": "2303440",
    "end": "2309280"
  },
  {
    "text": "right but that's invention right so people like freaked out like whoa hold on you're doing invention here we shouldn't be doing that but they explain",
    "start": "2309280",
    "end": "2316319"
  },
  {
    "text": "themselves at the time like listen like if you do this as a library you're going to be forever playing this game of cat and mouse or you're going to have to",
    "start": "2316319",
    "end": "2321359"
  },
  {
    "text": "request built-in from your compiler anyway so they stop reordering your stuff like at some point the compiler",
    "start": "2321359",
    "end": "2326839"
  },
  {
    "text": "has to be aware of what's going on you can't just do this as a library forever right and so that's why it",
    "start": "2326839",
    "end": "2335520"
  },
  {
    "text": "became something built into the C language right now unfortunately that caused a lot of",
    "start": "2335520",
    "end": "2343680"
  },
  {
    "text": "issues right um a lot of people want the atomics that happen in C to match up",
    "start": "2343680",
    "end": "2350200"
  },
  {
    "text": "kind of pretty perfectly with the ones that happened in C++ and it turns out that a lot of implementations weren't really",
    "start": "2350200",
    "end": "2356599"
  },
  {
    "text": "communicating with other like GBC wasn't talking to liod C++ when they Implement their atomics or whatever right um and",
    "start": "2356599",
    "end": "2362119"
  },
  {
    "text": "so there was cases where you would attempt to use a uh uh an atomic int",
    "start": "2362119",
    "end": "2368839"
  },
  {
    "text": "from C and you'd pass it to a stood Atomic of int to uh C++ and it was not",
    "start": "2368839",
    "end": "2374599"
  },
  {
    "text": "ABI compatible it was not compatible in any way shape or form and so things just broke in horrific ways um and it meant",
    "start": "2374599",
    "end": "2381720"
  },
  {
    "text": "that you couldn't mix C and cs plus code so now we have a compatibility issue right so you have C code that you want to write atomics with and then you have",
    "start": "2381720",
    "end": "2387720"
  },
  {
    "text": "C++ code that has atomics and you can't mix the two right you have to like serialize and Bridge and that's obviously slow because you're trying to",
    "start": "2387720",
    "end": "2392920"
  },
  {
    "text": "use Atomic trying to go fast trying to you know reduce contention but now you have have to introduce these manual sync points to make sure that you're doing",
    "start": "2392920",
    "end": "2398920"
  },
  {
    "text": "things the right way right to sync between the two languages and so usually what happened is somebody either completely abandoned C++ atomics and",
    "start": "2398920",
    "end": "2405599"
  },
  {
    "text": "went with the c1s or completely abandoned the C++ atomics and went with the c uh C++ atomics and went with the the c1s or or vice",
    "start": "2405599",
    "end": "2412839"
  },
  {
    "text": "versa so that was a pain um we also of course had a little bit of a usability issue with the way we made them types in",
    "start": "2412839",
    "end": "2420880"
  },
  {
    "text": "C so you can be a qualifier you can atomically qualify a type or you can actually make a type out of it by doing",
    "start": "2420880",
    "end": "2427319"
  },
  {
    "text": "underscore Atomic and then putting the type in the parentheses um and these are supposed to be like identical is but uh",
    "start": "2427319",
    "end": "2433599"
  },
  {
    "text": "you know it has interesting being a qualifier means it has it's being a qualifier means it's",
    "start": "2433599",
    "end": "2439280"
  },
  {
    "text": "it's it's like const or volatile right and that's not great when you're doing certain kinds of programming right um",
    "start": "2439280",
    "end": "2445640"
  },
  {
    "text": "and it also kind of violates the mental model that some people have about like I can drop qualifiers or I can gain qualifiers right and so it didn't",
    "start": "2445640",
    "end": "2451400"
  },
  {
    "text": "actually work like that so this qualifier version sort of made it difficult for some people program but",
    "start": "2451400",
    "end": "2456800"
  },
  {
    "text": "other people loved it right particularly numerical people because they wanted to do something like saycore Atomic in Star",
    "start": "2456800",
    "end": "2462200"
  },
  {
    "text": "and say this is a atomic uh this is a pointer to an atomic integer right and they want to basically access it like",
    "start": "2462200",
    "end": "2468400"
  },
  {
    "text": "it's an atomic um and so for them that was really good and they wanted like",
    "start": "2468400",
    "end": "2473760"
  },
  {
    "text": "lots of ABI there was a lot of people who wanted a lot of different kinds of ABI uh Styles right and so typically",
    "start": "2473760",
    "end": "2480480"
  },
  {
    "text": "what the two different ABI Styles you could have would be Lock Free atomics where the CPUs uh the CPU can guarantee",
    "start": "2480480",
    "end": "2487720"
  },
  {
    "text": "that if any operation that you're doing on say an integer or a car or a double or not maybe not double but whatever um",
    "start": "2487720",
    "end": "2495280"
  },
  {
    "text": "could be guaranteed to be done in a certain amount of time that would always happen right either happen or doesn't happen right so either you observe it",
    "start": "2495280",
    "end": "2500319"
  },
  {
    "text": "before it happens or You observe it after happen and there's no like racing there um the other approach is obviously",
    "start": "2500319",
    "end": "2506119"
  },
  {
    "text": "not lock free right there's a lock inside right so there's a type you have the actual value stored in there and then you have a lock next to it or you",
    "start": "2506119",
    "end": "2512000"
  },
  {
    "text": "have a lock table stored next nearby somewhere and so the whole Point um is",
    "start": "2512000",
    "end": "2517680"
  },
  {
    "text": "that there were mismatches between C and C++ there were mismatches even internally in implementations um about",
    "start": "2517680",
    "end": "2523640"
  },
  {
    "text": "whether they were lock free or not and that prevented a lot of people from sharing the stuff and you know obviously",
    "start": "2523640",
    "end": "2529680"
  },
  {
    "text": "you have if you have a lock based implementation it could be a little bit slower than a lock free one and so some people wanted to be able to do things",
    "start": "2529680",
    "end": "2534960"
  },
  {
    "text": "like oh if I have an inar just a plain pointer to instar of a bunch of data I want to be able to make an atomic point",
    "start": "2534960",
    "end": "2541240"
  },
  {
    "text": "of that and then access each integer atomically and like did that work was that supposed to work right depends if",
    "start": "2541240",
    "end": "2546319"
  },
  {
    "text": "it's lock free or not and so it was hard to kind of guarantee that stuff and so that's why atomic was kind of really",
    "start": "2546319",
    "end": "2551599"
  },
  {
    "text": "rough for the usability um which was strange because we didn't catch this even though some of the stuff was",
    "start": "2551599",
    "end": "2556839"
  },
  {
    "text": "implemented we didn't kind of catch that and you probably wouldn't be able to catch it until much later right because",
    "start": "2556839",
    "end": "2562240"
  },
  {
    "text": "it's not something whether or not your type is Lock Free is very much a platform dependent choice and you only really",
    "start": "2562240",
    "end": "2567880"
  },
  {
    "text": "figure that out until you like get down to the platform and you start mixing and matching and doing lots of big code um",
    "start": "2567880",
    "end": "2573359"
  },
  {
    "text": "and so even though they had like between them implementation experience between their compilers like they were all",
    "start": "2573359",
    "end": "2578680"
  },
  {
    "text": "self-consistent right when you start handing it off to vendors they can do whatever they want and again again quality of implementation right so they",
    "start": "2578680",
    "end": "2584760"
  },
  {
    "text": "could be Lock Free they could be not lock free and so vendors freely mixed and matched for whatever they could get out of their",
    "start": "2584760",
    "end": "2590760"
  },
  {
    "text": "platform right and sometimes they made suboptimal choices but because of application uh uh because of the",
    "start": "2590760",
    "end": "2596720"
  },
  {
    "text": "application binary interface ABI um they couldn't change their implementation so even their suboptimal it's like well we",
    "start": "2596720",
    "end": "2602960"
  },
  {
    "text": "got to keep it because we got to make sure that we're stable you know if some you take some you know C11 code and a",
    "start": "2602960",
    "end": "2608599"
  },
  {
    "text": "composite with c23 even if we know better than the c23 code like we can't change to a lock free implementation because our ABI is just like that right",
    "start": "2608599",
    "end": "2615280"
  },
  {
    "text": "and so you have all these issues surrounding atomics that despite kind of",
    "start": "2615280",
    "end": "2620400"
  },
  {
    "text": "passing the initial muster and kind of being a ready feature as far as C11 uh was concerned um still ended up failing",
    "start": "2620400",
    "end": "2627280"
  },
  {
    "text": "kind of in the final leg because of these compatibility issues right and again it's not it's hard to not it's",
    "start": "2627280",
    "end": "2632720"
  },
  {
    "text": "hard to see that coming when you know you're with your you're with your people who know what they're doing and then you kind of fan out and you go to Exotic",
    "start": "2632720",
    "end": "2638599"
  },
  {
    "text": "platforms and you go to different places that you don't you know have full control over and now things don't quite",
    "start": "2638599",
    "end": "2643640"
  },
  {
    "text": "pan out the way you expected to right and so that was kind of a large motivation what was going on",
    "start": "2643640",
    "end": "2649960"
  },
  {
    "text": "there oh I went too far um generic also called out as a terrible feature that",
    "start": "2649960",
    "end": "2655200"
  },
  {
    "text": "you should get fired for um but this was actually originally conceived by uh PJ",
    "start": "2655200",
    "end": "2661480"
  },
  {
    "text": "plugger who also worked on you know one of the most I guess well-known stls the dware STL um which got used in a lot of",
    "start": "2661480",
    "end": "2667359"
  },
  {
    "text": "different places and was actually bought by Microsoft and it's actually was the foundation of their STL that is currently in the GitHub",
    "start": "2667359",
    "end": "2673720"
  },
  {
    "text": "repository um it was sourced from existing practice but it wasn't exactly the same as",
    "start": "2673720",
    "end": "2680040"
  },
  {
    "text": "existing practice right so GC had this thing called built-in choose expression where you would give an expression then you start listing out some types and it'",
    "start": "2680040",
    "end": "2686079"
  },
  {
    "text": "kind of be like an if tree where um you say if it's this type then do this otherwise if it's this type do that",
    "start": "2686079",
    "end": "2692119"
  },
  {
    "text": "otherwise if it's this type do that right um gener generic the way it works is it's kind of more like a switch",
    "start": "2692119",
    "end": "2698040"
  },
  {
    "text": "statement you say here's all the types and you only match one of them right um so it's a little bit different than built-in choose expression",
    "start": "2698040",
    "end": "2705720"
  },
  {
    "text": "um it was picked up and implemented and the reason it was picked up and implemented by EDG I think possibly",
    "start": "2705720",
    "end": "2712280"
  },
  {
    "text": "Intel at the time um was because they were having trouble implementing what was called type generic macros which we'll talk about in a second um but they",
    "start": "2712280",
    "end": "2719040"
  },
  {
    "text": "basically proved it could work and it could solve the problem without introducing C templates or function overloading at the time there were a lot",
    "start": "2719040",
    "end": "2725319"
  },
  {
    "text": "of math fun that they were adding to C um if you ever looked at the the like annx f or anx H you'll see like a",
    "start": "2725319",
    "end": "2730880"
  },
  {
    "text": "million different like floating Point functions in fact for c23 we added like what was it over 500",
    "start": "2730880",
    "end": "2736599"
  },
  {
    "text": "new math like floating Point math functions um but there's a lot of those",
    "start": "2736599",
    "end": "2742599"
  },
  {
    "text": "functions and so a lot of people want easier ways to program that stuff um and so they came up with this idea of type",
    "start": "2742599",
    "end": "2747720"
  },
  {
    "text": "generic macros and kind of on the behind for some of this what they were doing is they were abusing function overloading",
    "start": "2747720",
    "end": "2753559"
  },
  {
    "text": "right which is a feature that comes from C++ and it's not really in see but they kind of said well we're just going to",
    "start": "2753559",
    "end": "2759680"
  },
  {
    "text": "standardize these macros and you'll put the arguments in there and then you know through some magic we'll know we'll know",
    "start": "2759680",
    "end": "2765240"
  },
  {
    "text": "whether they call the float version the double version or the long version or the long double version or whatever",
    "start": "2765240",
    "end": "2771319"
  },
  {
    "text": "um and so that's kind of what happened there um so it was implemented it did",
    "start": "2771319",
    "end": "2778079"
  },
  {
    "text": "have existing practice there was a slight bit of invention obviously going from built and choose expression which was more like an if Cascade to generic",
    "start": "2778079",
    "end": "2785440"
  },
  {
    "text": "um but they proved it could work and they was able to do it without introducing templates into C and or",
    "start": "2785440",
    "end": "2790760"
  },
  {
    "text": "function overloading right which was kind of the main driver right they didn't want to the they the committee",
    "start": "2790760",
    "end": "2797280"
  },
  {
    "text": "explicitly rejected overloading um fun or that kind of overloading as a solution for C right um so they had to",
    "start": "2797280",
    "end": "2804200"
  },
  {
    "text": "do something else right this was like then again to kind of talk about this right this was the TG math header right",
    "start": "2804200",
    "end": "2809280"
  },
  {
    "text": "the type generic math header um this was part of technical specification right so again they use",
    "start": "2809280",
    "end": "2816359"
  },
  {
    "text": "this technical specification mechanism a TS right they can ship things out in the world through this document early before",
    "start": "2816359",
    "end": "2821680"
  },
  {
    "text": "the standard goes and get experience with it so they got all this experience with it they understood what the TG math is but the overloading features were",
    "start": "2821680",
    "end": "2828559"
  },
  {
    "text": "rejected before but the TG math was still kind of going through the committee right and they wanted it so",
    "start": "2828559",
    "end": "2833640"
  },
  {
    "text": "they said okay we need generic right and so that's this is kind of where generic was born in the first place right um",
    "start": "2833640",
    "end": "2839160"
  },
  {
    "text": "there's actually some very there's some very interesting papers where people are like Hey so uh I'm trying to implement",
    "start": "2839160",
    "end": "2845079"
  },
  {
    "text": "your generic this generic function thing and I can't because there's no mechanism to do it in C and normally that's okay",
    "start": "2845079",
    "end": "2851040"
  },
  {
    "text": "because one of the things we say in the committee is that it's okay if your library performs magic right um your",
    "start": "2851040",
    "end": "2856440"
  },
  {
    "text": "implementor is allowed to perform magic right so for example in offset of you can take a old pointer and create a",
    "start": "2856440",
    "end": "2861760"
  },
  {
    "text": "pointer to something and then go to the member inside that no pointer and then subtract that from no pointer to get the offset to the member inside the thing",
    "start": "2861760",
    "end": "2868440"
  },
  {
    "text": "right and that's like that's like the favorite that's like a favorite language lawyer question right you go to stack Overflow you ask about offset of it's",
    "start": "2868440",
    "end": "2873640"
  },
  {
    "text": "like can I Implement offset of and standard C and they get like a millionaire is like no you can't yes you can no close we already entered this",
    "start": "2873640",
    "end": "2878760"
  },
  {
    "text": "before right you know all that stuff um but like your library is allowed to do magic",
    "start": "2878760",
    "end": "2885720"
  },
  {
    "text": "right um but this was too much magic and it was more than most implementation can handle and so that's why they needed",
    "start": "2885720",
    "end": "2891319"
  },
  {
    "text": "generic right they needed a way of saying listen if you give me a float I will call the float version of cosine",
    "start": "2891319",
    "end": "2897079"
  },
  {
    "text": "right if you give me a double I'm going to call the double version and so on and so forth right and then you know you get you know these these quadratic versions",
    "start": "2897079",
    "end": "2902720"
  },
  {
    "text": "where you know you're passing two arguments and you have to pick the right one and it's very fun um but that's where generic came from",
    "start": "2902720",
    "end": "2909920"
  },
  {
    "text": "that's where TG math came from right and again these were things that were implemented and shipped and so nobody's really violating the charter with any of",
    "start": "2909920",
    "end": "2916000"
  },
  {
    "text": "this right they're they're kind of having to do a little bit of invention which is a a violation of the charter but like it's in service of these",
    "start": "2916000",
    "end": "2921400"
  },
  {
    "text": "features right and you're supposed to allow to balance the idea and they did Implement generic before they actually standardized it so like they kind of",
    "start": "2921400",
    "end": "2927839"
  },
  {
    "text": "checked all the boxes right and so what what we're really",
    "start": "2927839",
    "end": "2933599"
  },
  {
    "text": "seeing is that maybe these features were not all that illc conceived right like sure it's not like don't get me wrong",
    "start": "2933599",
    "end": "2939400"
  },
  {
    "text": "like vas are not my favorite feature and neither is generic and a bunch of other stuff that's in the see but like these",
    "start": "2939400",
    "end": "2945680"
  },
  {
    "text": "things didn't violate the charter right like they weren't doing the wrong thing",
    "start": "2945680",
    "end": "2951200"
  },
  {
    "text": "they weren't making the wrong choices when they were doing this right they were following all the rules in so far",
    "start": "2951200",
    "end": "2957599"
  },
  {
    "text": "as they could follow all the rules for being put in imposs situations like the committee is committing is considering",
    "start": "2957599",
    "end": "2963079"
  },
  {
    "text": "some kind of overloading and then kind of swaps it out from under you while you're trying to standardize your your your well-considered stuff so you know",
    "start": "2963079",
    "end": "2971480"
  },
  {
    "text": "maybe it wasn't the features that were ill conceives right again not that there aren't room for some improvements in this",
    "start": "2971480",
    "end": "2978119"
  },
  {
    "text": "stuff you know for example vas and vmts have a lot of holes right so this syntax",
    "start": "2978119",
    "end": "2984880"
  },
  {
    "text": "looks super ugly don't worry about it um but basically what I'm doing here is I'm passing two sizes and then I'm using",
    "start": "2984880",
    "end": "2990440"
  },
  {
    "text": "those sizes to create a pointer to VA right and the reason I'm creating a",
    "start": "2990440",
    "end": "2995839"
  },
  {
    "text": "pointer to VA is because I want this pointer to VA this this variably modified type to hold its size right and",
    "start": "2995839",
    "end": "3004920"
  },
  {
    "text": "the idea is that if I use size of star P right it's a runtime thing because again it's a it's a variably modified type I",
    "start": "3004920",
    "end": "3011559"
  },
  {
    "text": "can get the size out of this right without consulting M or n right directly and so this seems like hold on",
    "start": "3011559",
    "end": "3018000"
  },
  {
    "text": "does this mean that we have bounce checked arrays like arrays we can do bounce checking or poters where we can do bounce checking and C right like that",
    "start": "3018000",
    "end": "3024520"
  },
  {
    "text": "that would be pretty cool right right except not quite I have Nal 2 and m equal 3 right I",
    "start": "3024520",
    "end": "3033559"
  },
  {
    "text": "put them in a vaa and I create uh a pointer to vaa right I maloc my vaa",
    "start": "3033559",
    "end": "3039280"
  },
  {
    "text": "right and this is how I get a variably modified type I just get a pointer to a VA right and so you can maloc these right um this is again probably blowing",
    "start": "3039280",
    "end": "3046000"
  },
  {
    "text": "certain people's mind numerical people are all up on this stuff but this is the stuff they don't tell you about that they're using all the time um but you",
    "start": "3046000",
    "end": "3052119"
  },
  {
    "text": "can malop this right so I now I have a pointer to an array that contains its own size right so if I printf the size",
    "start": "3052119",
    "end": "3058839"
  },
  {
    "text": "right that's that first print is 24 if I print aay size and I pass in n and M",
    "start": "3058839",
    "end": "3064520"
  },
  {
    "text": "unmodified I get 24 right so like it's contain the size properly I then modify",
    "start": "3064520",
    "end": "3071000"
  },
  {
    "text": "M to be four I then print half the size from",
    "start": "3071000",
    "end": "3076160"
  },
  {
    "text": "locally right just directly referencing p and I get 24 I then ask to print the",
    "start": "3076160",
    "end": "3081760"
  },
  {
    "text": "array size and now the size is 32 and this is where vmts fall in their",
    "start": "3081760",
    "end": "3087599"
  },
  {
    "text": "face this is where vas fall on their face you can lie about them which is fair because you can lie about any",
    "start": "3087599",
    "end": "3093559"
  },
  {
    "text": "pointer in C but like this I thought this was going to be like the holy gra like oh finally I have a sized pointer I",
    "start": "3093559",
    "end": "3100520"
  },
  {
    "text": "can do something with this I can make something happen with this I can put some safety in some code bases or something right and I can but only if",
    "start": "3100520",
    "end": "3108839"
  },
  {
    "text": "people don't lie but like the entire point of things like heart bleed was",
    "start": "3108839",
    "end": "3114000"
  },
  {
    "text": "that it lied about about the size it was a mistake they didn't mean to but it lied about the size of the pointer and",
    "start": "3114000",
    "end": "3119920"
  },
  {
    "text": "then they just read a bunch of stuff they weren't supposed to like everybody's secrets and then dumped them out to attackers and then they had",
    "start": "3119920",
    "end": "3125240"
  },
  {
    "text": "access to everything so vas didn't learn the lesson right we still get to lie right",
    "start": "3125240",
    "end": "3132480"
  },
  {
    "text": "and so we're like this close like we could have a syntax where like because you because you can see this right even",
    "start": "3132480",
    "end": "3139280"
  },
  {
    "text": "though I modify M and N in this function I print for the print locally",
    "start": "3139280",
    "end": "3147799"
  },
  {
    "text": "for p it's still 24 so like the size is stored in the vaa this the VA knows its",
    "start": "3147799",
    "end": "3153920"
  },
  {
    "text": "size so but when I pass to a function it's just like well I'm going to throw that size out the window and then I get",
    "start": "3153920",
    "end": "3160240"
  },
  {
    "text": "32 or 800 and now I'm reading data I'm not supposed to right now I'm accessing",
    "start": "3160240",
    "end": "3166079"
  },
  {
    "text": "things I'm not supposed to and that's emblematic of C right you know",
    "start": "3166079",
    "end": "3173040"
  },
  {
    "text": "you pass an array somewhere it decays to a pointer where' the size go who knows um and so this was this was this close",
    "start": "3173040",
    "end": "3180520"
  },
  {
    "text": "to being like the solution for stuff and then it stop being the solution for stuff but again this is what I say when",
    "start": "3180520",
    "end": "3187640"
  },
  {
    "text": "there's there's room for improvement for some of these features right there's room to make them better and we haven't",
    "start": "3187640",
    "end": "3192880"
  },
  {
    "text": "quite utilized ourselves to do that yet similarly uh generic loses",
    "start": "3192880",
    "end": "3198799"
  },
  {
    "text": "qualifiers and array information right so if I have a constant n and I want a generic on it and I say oh I know this",
    "start": "3198799",
    "end": "3204760"
  },
  {
    "text": "is a const n I'm going to match on the fact that it's constant in N um that doesn't work if you're on clang or GCC",
    "start": "3204760",
    "end": "3211680"
  },
  {
    "text": "like Mo a recent version it'll warn you and say this Branch this Con in Branch will never be reached because when you",
    "start": "3211680",
    "end": "3217559"
  },
  {
    "text": "do generic it strips off qualifiers and it strips off array information so",
    "start": "3217559",
    "end": "3222680"
  },
  {
    "text": "arrays will Decay into like pointers or yes I think so someone double check",
    "start": "3222680",
    "end": "3229559"
  },
  {
    "text": "me on that they decay in the poins right probably yeah I mean it's",
    "start": "3229559",
    "end": "3237160"
  },
  {
    "text": "I think you might be able to match specifically on the exact size of an array but I think it might also just it might it might just Decay um",
    "start": "3237520",
    "end": "3245119"
  },
  {
    "text": "but oh yeah there is a pointer conversion okay yeah because right it performs L value conversion which the same thing that is happens on when you",
    "start": "3245119",
    "end": "3253319"
  },
  {
    "text": "pass things to a function call yes sorry that was nerd speake for uh it decays",
    "start": "3253319",
    "end": "3259480"
  },
  {
    "text": "um but you can't do this right you can't match on the fact that it's constant n it strips out those qualifiers so like",
    "start": "3259480",
    "end": "3264880"
  },
  {
    "text": "you can't match all that stuff right so if I wanted to implement say uh is const or is a ray or is some some other kind",
    "start": "3264880",
    "end": "3270359"
  },
  {
    "text": "of way of implementing this um I just can't do that",
    "start": "3270359",
    "end": "3275880"
  },
  {
    "text": "uh you know I will just get return one I'll just get one here the will return one and then we'll just kind of go on on",
    "start": "3276200",
    "end": "3281880"
  },
  {
    "text": "our lives so we lose the ability to do some kind of very cool matching and stuff that normally we would uh be able",
    "start": "3281880",
    "end": "3288799"
  },
  {
    "text": "to do in maybe other languages or if generic was a little bit better than it is fun fact Aon Balman isn't here but",
    "start": "3288799",
    "end": "3295079"
  },
  {
    "text": "Aaron Balman actually implemented a version of generic where if you wrap this n in type of which I standardized",
    "start": "3295079",
    "end": "3300880"
  },
  {
    "text": "for c23 so it's now actually you can use it everywhere assuming msvc catches up",
    "start": "3300880",
    "end": "3306079"
  },
  {
    "text": "um you can wrap that in type of and then they have an extension where because you passing a type into generic it will",
    "start": "3306079",
    "end": "3312359"
  },
  {
    "text": "actually keep the qualifiers and keep the array and not do L value Decay so fun little for all of you who are here you get this a fun little clang secret",
    "start": "3312359",
    "end": "3318720"
  },
  {
    "text": "and that you could that's when you can start doing like is constant do it like normally and cool and stuff like that but that's that's like Advanced like C",
    "start": "3318720",
    "end": "3324160"
  },
  {
    "text": "meta programming and like that's something i' you know I'd give a talk on or something later um th obviously we're talking",
    "start": "3324160",
    "end": "3331720"
  },
  {
    "text": "about it weakness it's not everywhere um it's not on Microsoft Visual c and a few POS based platforms don't have it",
    "start": "3331720",
    "end": "3337160"
  },
  {
    "text": "because they just say well I have P threads I don't need this threads. H nonsense and then you know you you write code and then it just fails because they",
    "start": "3337160",
    "end": "3343160"
  },
  {
    "text": "don't have it um even if it's perfectly capable of being on that platform um and",
    "start": "3343160",
    "end": "3348280"
  },
  {
    "text": "so that kind of suffers in that way there's also other existential problems right enumerations cannot be size",
    "start": "3348280",
    "end": "3354319"
  },
  {
    "text": "controlled right um undefined Behavior obviously continues to punch people in the face um we're actually not",
    "start": "3354319",
    "end": "3362319"
  },
  {
    "text": "standardizing a lot of existing extensions in practice so like statement Expressions really cool stuff nested functions and blocks really cool stuff",
    "start": "3362319",
    "end": "3369000"
  },
  {
    "text": "that we haven't standardized right um there's also ABI problems right so the 32-bit time and specifically the 2038",
    "start": "3369000",
    "end": "3376400"
  },
  {
    "text": "problem right it's not necessarily like oh we need to use 64-bit time that if we change the 64bit time we break every",
    "start": "3376400",
    "end": "3383440"
  },
  {
    "text": "program that was depending on time te being a 32-bit value right um and so we",
    "start": "3383440",
    "end": "3388960"
  },
  {
    "text": "need to be able to do things like fix the application binary interface be able to patch those binary interface without",
    "start": "3388960",
    "end": "3394280"
  },
  {
    "text": "blowing up the old code and we don't really have any tools to do that which",
    "start": "3394280",
    "end": "3400280"
  },
  {
    "text": "hilariously um other platforms have already figured out how to do this since like 25 years ago um BSD has a way of",
    "start": "3400280",
    "end": "3406280"
  },
  {
    "text": "solving ABI and they solve this problem it's literally it's literally an example on their Wei on like yeah this is how we solved this problem like 25 years ago",
    "start": "3406280",
    "end": "3412400"
  },
  {
    "text": "and I wish people would solve it in the standard um and we haven't done that yet so again more existential crisis in the",
    "start": "3412400",
    "end": "3418119"
  },
  {
    "text": "standard um and so you know it's 2023 right so",
    "start": "3418119",
    "end": "3425240"
  },
  {
    "text": "where's our portable bit function right where's our simd where like C is build as this access to the hardware language",
    "start": "3425240",
    "end": "3431440"
  },
  {
    "text": "right even though it's it's supposed to just be a normal high level abstract machine right it's build as accs to the hardware the fast language the dangerous",
    "start": "3431440",
    "end": "3437640"
  },
  {
    "text": "language you could do all the cool stuff okay but I can't even like I can't even use my xsm xmm registers right like",
    "start": "3437640",
    "end": "3446000"
  },
  {
    "text": "you know I can't even do uh uh a portable bit packing on my structures right without you know getting a drink",
    "start": "3446000",
    "end": "3452880"
  },
  {
    "text": "getting a manual and then you know praying a tribute packed or pragma packed one or whatever gets the job done",
    "start": "3452880",
    "end": "3458520"
  },
  {
    "text": "with all the crazy bit stuff which you would think that this is such a old problem that it would be solved by now",
    "start": "3458520",
    "end": "3464240"
  },
  {
    "text": "but there's compilers that pack things differently than like GCC or mscc or whatever else right so not piling on",
    "start": "3464240",
    "end": "3470480"
  },
  {
    "text": "this implementor he implemented it the way he did for a good reason but secc does things differently than GCC and",
    "start": "3470480",
    "end": "3478240"
  },
  {
    "text": "that has actually resulted in a lot of people like hey I'm compiling for libu I'm trying to compile something for lib USB and I have this structure and I'm",
    "start": "3478240",
    "end": "3484760"
  },
  {
    "text": "trying to put it on the wire so it goes to my USB device and it actually is not correct and it's like well it's because",
    "start": "3484760",
    "end": "3490400"
  },
  {
    "text": "we do different packing for our structure even if you use a tribute packed even if you use these bit fields",
    "start": "3490400",
    "end": "3496760"
  },
  {
    "text": "that uh is different from GCC and that person is effectively up you know bleep",
    "start": "3496760",
    "end": "3502680"
  },
  {
    "text": "creek without a paddle because you know it's just implementation to",
    "start": "3502680",
    "end": "3507760"
  },
  {
    "text": "find what happens with your structure right um where do the bits go uh who controls those bits uh right like it's",
    "start": "3507760",
    "end": "3515000"
  },
  {
    "text": "just whatever the implementation decides to do or feels like doing that day right and we haven't solved that problem right",
    "start": "3515000",
    "end": "3520319"
  },
  {
    "text": "which is really weird because the Ada programming language solved this problem like in the 80s and like we just we keep",
    "start": "3520319",
    "end": "3528559"
  },
  {
    "text": "like we keep like writing papers like H how are we going to solve this very difficult tough problem and it's like just look at the language right there um",
    "start": "3528559",
    "end": "3534240"
  },
  {
    "text": "but we don't do do that unic code conversion functions obviously I'm a text guy that's how I actually ended up",
    "start": "3534240",
    "end": "3540160"
  },
  {
    "text": "getting down to C in the first place um I was asking too many questions about local and text and I ended up down here and I'm the product editor um so Unicode",
    "start": "3540160",
    "end": "3547520"
  },
  {
    "text": "not even once um but Unicode conversion functions are something we don't have um and that's kind of my fault it was supposed to be in c23 but I didn't get",
    "start": "3547520",
    "end": "3553920"
  },
  {
    "text": "it in in time um and then of course we have a whole gaggle of posix style",
    "start": "3553920",
    "end": "3559280"
  },
  {
    "text": "functions that kind of affect global mutable State um you know we want to be",
    "start": "3559280",
    "end": "3564319"
  },
  {
    "text": "able to call is upper and have it kind of be consistent you usually think it'd be asky or something right but you know",
    "start": "3564319",
    "end": "3569400"
  },
  {
    "text": "it changes based on the local and so you get different kinds of behaviors and performance characteristics from is",
    "start": "3569400",
    "end": "3574720"
  },
  {
    "text": "upper and things like that right because it's tied to the local and so that's all kind of controlled by global shared mutable data",
    "start": "3574720",
    "end": "3581319"
  },
  {
    "text": "right that implies locks that implies you know bottlenecks in your algorithms and whatever else and so now you're kind",
    "start": "3581319",
    "end": "3586799"
  },
  {
    "text": "of suffering and so again it's 2023 and like where where is the stuff that would make this all easier right",
    "start": "3586799",
    "end": "3593640"
  },
  {
    "text": "um why haven't this stuff been Sol why haven't we gotten to a place where this",
    "start": "3593640",
    "end": "3598880"
  },
  {
    "text": "all is kind of cleaned up and makes sense and if we're relying on standardizing existing practice",
    "start": "3598880",
    "end": "3606680"
  },
  {
    "text": "right and existing practice in many of these cases like for the ABI from FreeBSD and other places has fixed this",
    "start": "3606680",
    "end": "3612240"
  },
  {
    "text": "stuff like why haven't we actually gone and done it um and that kind of calls into question the charter right",
    "start": "3612240",
    "end": "3618880"
  },
  {
    "text": "like so I had to get my hands dirty right so re23 right this is the first standard release I've been a part of",
    "start": "3618880",
    "end": "3625000"
  },
  {
    "text": "right so I started doing things to get involved right and that's that's how I got like again like I said I did unit",
    "start": "3625000",
    "end": "3630039"
  },
  {
    "text": "code not even once but I did it and now I'm NE deep in this stuff um so we got bit functions right now we have bit",
    "start": "3630039",
    "end": "3635440"
  },
  {
    "text": "functions that describe like endian things like endianness and zero leading ones and all this other stuff in the",
    "start": "3635440",
    "end": "3640880"
  },
  {
    "text": "standard now and they're all part of the standard right they're going to be shipping with c23 you should be able to access them they should give you direct",
    "start": "3640880",
    "end": "3645920"
  },
  {
    "text": "access to all these intrinsics and everything else that have been on compilers for I mean come on some of these instructions are literally like",
    "start": "3645920",
    "end": "3651839"
  },
  {
    "text": "from the 80s literally Intel 8080 like it that why why did it take so long to get here",
    "start": "3651839",
    "end": "3657200"
  },
  {
    "text": "but anyway it's in it's in it's there now it's there now I made sure it's in there now so we're all good we have endian stuff and we have bit operations",
    "start": "3657200",
    "end": "3663280"
  },
  {
    "text": "we have to get the rest of the bit stuff in later right enumerations I fixed those you can actually add a colon after",
    "start": "3663280",
    "end": "3668799"
  },
  {
    "text": "the name of the enumeration and then specify a type right this is similar to if you're seeed this like wow this is",
    "start": "3668799",
    "end": "3673839"
  },
  {
    "text": "old news but like if you're see this like oh my God finally right because now you have Dependable data types",
    "start": "3673839",
    "end": "3679039"
  },
  {
    "text": "underlying your numeration so you can put them in structures you can generic match on them and they have the expected Behavior right",
    "start": "3679039",
    "end": "3684960"
  },
  {
    "text": "um all of that stuff so that just works the way you expect it now we also have checked integer stuff right mentioned",
    "start": "3684960",
    "end": "3690920"
  },
  {
    "text": "earlier in the panel and and Robert's talk and in other places but now we have standard way to opt out of undefined",
    "start": "3690920",
    "end": "3697200"
  },
  {
    "text": "behavior for integers right so if you want to do a wrapping ad and you know that's what you want to do then you use the checked ad function or the check sub",
    "start": "3697200",
    "end": "3702799"
  },
  {
    "text": "function right to do subtraction or check mole to do mole we didn't include division because there's only one case where division is UB and that's if",
    "start": "3702799",
    "end": "3708559"
  },
  {
    "text": "you're I believe it's if you're dividing it's it's it's it's not the 0",
    "start": "3708559",
    "end": "3713680"
  },
  {
    "text": "by0 case it's like if dividing in Min by something by minus one yeah and and that's the I mean we should probably add",
    "start": "3713680",
    "end": "3720279"
  },
  {
    "text": "CKD div anyway just to cover that case but you know it's it's simple enough I mean we say trust the",
    "start": "3720279",
    "end": "3726480"
  },
  {
    "text": "programmer but like you know this is also a security feature so maybe we should just add check div right but you know we didn't do that um and also",
    "start": "3726480",
    "end": "3731839"
  },
  {
    "text": "implementations didn't have check div like GCC has built in that map to the CKD ad and CKD sub stuff and like they",
    "start": "3731839",
    "end": "3739400"
  },
  {
    "text": "didn't have a div so we just didn't include it right um there's a hand back there",
    "start": "3739400",
    "end": "3745160"
  },
  {
    "text": "yes microphone so you don't do check if I'm assuming you also then don't do check",
    "start": "3745160",
    "end": "3752000"
  },
  {
    "text": "modul uh we because this has the exact same overflow yeah we don't do check modul yeah we don't we only have these",
    "start": "3752000",
    "end": "3758520"
  },
  {
    "text": "we only have checked ad checked sub and checked uh mole um so again we probably",
    "start": "3758520",
    "end": "3764240"
  },
  {
    "text": "should add those but you know we it's it's a top for another time um but you know you can do this right you can do",
    "start": "3764240",
    "end": "3769960"
  },
  {
    "text": "City ad right so I'm uh imple I'm uh initializing this 32t to zero we added",
    "start": "3769960",
    "end": "3776359"
  },
  {
    "text": "empty brace initialization that was an extension that was implemented everywhere so I was like it's very silly that we don't put this in the standard",
    "start": "3776359",
    "end": "3782039"
  },
  {
    "text": "so I did put it in the standard so now you can just use empty braces and that means you can initialize everything with it um and it will Zero the bits",
    "start": "3782039",
    "end": "3788119"
  },
  {
    "text": "including the padding bits which is different from C++ in C++ the padding bits will be whatever with C when you do",
    "start": "3788119",
    "end": "3794720"
  },
  {
    "text": "this with the empty brace you'll get padding bits at equal zero right which means it's also secure to use in your kernel right just fun fact um so that",
    "start": "3794720",
    "end": "3803079"
  },
  {
    "text": "will work and you you can do you can use the Boolean to check if it did wrap and obviously you'll get a Boolean back that",
    "start": "3803079",
    "end": "3808200"
  },
  {
    "text": "says it did wrap and then the value is zero right because you did one plus you and Max and so it just rolls over one",
    "start": "3808200",
    "end": "3813319"
  },
  {
    "text": "and so you get zero right and so well- defined Behavior no UB San won't trigger all that stuff is good",
    "start": "3813319",
    "end": "3819200"
  },
  {
    "text": "right we also have proper keywords now right so we got our hands dirty and we said all right we're we're sick of this",
    "start": "3819200",
    "end": "3825200"
  },
  {
    "text": "whole you uncore boore capital S stuff we're doing with these keywords like let's just make them real keywords and",
    "start": "3825200",
    "end": "3830880"
  },
  {
    "text": "so we did so you don't have to clue to header anymore you just get these keywords and you get false and true and all other stuff right there's some",
    "start": "3830880",
    "end": "3836279"
  },
  {
    "text": "mitigation techniques we had to do for false and true to make sure that we didn't break anybody right um and so",
    "start": "3836279",
    "end": "3841520"
  },
  {
    "text": "vendors can do you know uh hash toine for their true and false to make sure that you know your people who are",
    "start": "3841520",
    "end": "3846640"
  },
  {
    "text": "checking for if true or if false will not be broken and stuff like that but uh we did add some mitigations for that to",
    "start": "3846640",
    "end": "3852640"
  },
  {
    "text": "make sure that they're okay and a ton more like this is actually two pages of what's called nxm",
    "start": "3852640",
    "end": "3858680"
  },
  {
    "text": "in the standard that just lists a bunch of changes we made a lot of the changes we made right",
    "start": "3858680",
    "end": "3865160"
  },
  {
    "text": "um and we have to ask ourselves like maybe the common denominator was",
    "start": "3865160",
    "end": "3872200"
  },
  {
    "text": "never existing practice right we kept going harder and harder in like no invention without no inventing stuff no",
    "start": "3872200",
    "end": "3878000"
  },
  {
    "text": "exceptions right always standardized existing practice right but the things we added solve material problems that",
    "start": "3878000",
    "end": "3883799"
  },
  {
    "text": "actually will help people and in this case for a lot of these",
    "start": "3883799",
    "end": "3891319"
  },
  {
    "text": "cases this is stuff that like implementers did do some of these things but for most of the changes that gotten",
    "start": "3891319",
    "end": "3897119"
  },
  {
    "text": "see they came from people right Tom McDonald",
    "start": "3897119",
    "end": "3903279"
  },
  {
    "text": "put vas in the standard because he had a numerical Computing background he wanted C to compete with Fortran and APL and",
    "start": "3903279",
    "end": "3909119"
  },
  {
    "text": "the other languages that he was using in his lab right Hans Bim right for the atomics and the memory model right he",
    "start": "3909119",
    "end": "3915039"
  },
  {
    "text": "did tons of work right he's still he's still active in the committee he's still doing work for atomics and and the memory model right both C and C++ you",
    "start": "3915039",
    "end": "3921640"
  },
  {
    "text": "know people who fight against status quo like Jen gustad he's the one who's respons responsible for the keywords he fixed up several language and Library",
    "start": "3921640",
    "end": "3927319"
  },
  {
    "text": "features fixed up atomics a bunch of other stuff Aaron Balman who's not here um but did a tributes to bit in right",
    "start": "3927319",
    "end": "3933480"
  },
  {
    "text": "which is a variably sized integer right um not variably sized as in runtime but like you can stick a constant expression",
    "start": "3933480",
    "end": "3939880"
  },
  {
    "text": "in the bit int and you can basically say it's 63 uh bits wide or you can say it's 72 bits wide or you can say it's 24 bits",
    "start": "3939880",
    "end": "3946039"
  },
  {
    "text": "wide and you can actually choose how big it is right so this stuff kind of applies directly to fpgas where you want",
    "start": "3946039",
    "end": "3951359"
  },
  {
    "text": "to be able to PR precisely code how many bits you're using right save you know on",
    "start": "3951359",
    "end": "3956640"
  },
  {
    "text": "on your fpj's resources right and then of course we got things like consur and V start with a list without having to pass the first parameter so you can have",
    "start": "3956640",
    "end": "3962760"
  },
  {
    "text": "a dot dot dot function in C that doesn't require our first parameter anymore right so you can literally just have a a",
    "start": "3962760",
    "end": "3969279"
  },
  {
    "text": "plain dot do Dot and then just go through the list as normal right without any kind of like extra format parameter or like number parameter whatever",
    "start": "3969279",
    "end": "3975240"
  },
  {
    "text": "telling you what to do um and all of these came from people right they didn't come from implementations we didn't try",
    "start": "3975240",
    "end": "3980559"
  },
  {
    "text": "to like standardizing practice it was just somebody saw a need and fulfill that need",
    "start": "3980559",
    "end": "3986000"
  },
  {
    "text": "right and that was the actual Spirit of SE",
    "start": "3986000",
    "end": "3991839"
  },
  {
    "text": "right this is Dennis Richie I mean most of you probably know who this is right when they were starting to",
    "start": "3991839",
    "end": "3999039"
  },
  {
    "text": "standardize c89 before they started writing charters before they started getting you know they started trying to codify everything right Dennis",
    "start": "3999039",
    "end": "4007200"
  },
  {
    "text": "Richie changed something about SE just before it was standardized right in",
    "start": "4007200",
    "end": "4012400"
  },
  {
    "text": "particular in 198 9 right he made sure that bna's changes in",
    "start": "4012400",
    "end": "4019480"
  },
  {
    "text": "C++ because at this time B was actually actively working on C++ and it was a real",
    "start": "4019480",
    "end": "4024599"
  },
  {
    "text": "thing he actually cribbed the function prototypes he actually I wouldn't say crib or stole",
    "start": "4024599",
    "end": "4031000"
  },
  {
    "text": "because it was with consent obviously but like he took the Syntax for actual",
    "start": "4031000",
    "end": "4036559"
  },
  {
    "text": "types with your arguments because you didn't have that in C before c89 you didn't have types you could associate",
    "start": "4036559",
    "end": "4041920"
  },
  {
    "text": "with arguments and so we actually took that from C++ and put it in C and not only did he put it in C but he",
    "start": "4041920",
    "end": "4047640"
  },
  {
    "text": "immediately deprecated the feature that has his name on it K andr declarations",
    "start": "4047640",
    "end": "4053160"
  },
  {
    "text": "are named after kernigan and Richie but this guy",
    "start": "4053160",
    "end": "4058319"
  },
  {
    "text": "knew that what he was going to be standardizing what he was going to be working with was more important than the thing that had its",
    "start": "4058319",
    "end": "4065039"
  },
  {
    "text": "own name on it right and so this is an interview from 2000 but he also writes this down",
    "start": "4065039",
    "end": "4071000"
  },
  {
    "text": "in in his writings right about the fact that they when they were standardized in c89 they crib this feature right and",
    "start": "4071000",
    "end": "4078359"
  },
  {
    "text": "so we need to be able to embrace making changes and we need to be able to brace them the same way that Dennis did",
    "start": "4078359",
    "end": "4085880"
  },
  {
    "text": "right if Richie can see that something",
    "start": "4085880",
    "end": "4091200"
  },
  {
    "text": "is better and put it in his language and deprecate his own beloved",
    "start": "4091200",
    "end": "4097120"
  },
  {
    "text": "feature if he can do that if he can look at that that situation and make that kind of technical call",
    "start": "4097120",
    "end": "4104520"
  },
  {
    "text": "then maybe it's not about how much we standardize dising practice maybe it's not about how much we're focusing on oh",
    "start": "4104520",
    "end": "4111838"
  },
  {
    "text": "does this come with a comp uh uh commercial implementation of comp maybe it's just if it's a good idea or",
    "start": "4111839",
    "end": "4117400"
  },
  {
    "text": "not and maybe we should start focusing our Charter not on how many compilers",
    "start": "4117400",
    "end": "4124440"
  },
  {
    "text": "implement the thing but whether or not it's a good idea and whether or not it passes design",
    "start": "4124440",
    "end": "4130120"
  },
  {
    "text": "muster and if we do I think that we will see",
    "start": "4132080",
    "end": "4137480"
  },
  {
    "text": "better hopefully sometime within our life thanks",
    "start": "4137480",
    "end": "4144279"
  }
]