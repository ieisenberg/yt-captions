[
  {
    "start": "0",
    "end": "288000"
  },
  {
    "text": "hi everybody how are we today enjoying the",
    "start": "12639",
    "end": "17760"
  },
  {
    "text": "conference good I love the NDC conferences I've been doing them for years now they're my favorite conference",
    "start": "17760",
    "end": "25039"
  },
  {
    "text": "and I'm not just saying that because I'm here so uh this talk is all",
    "start": "25039",
    "end": "31360"
  },
  {
    "text": "about the new Javas new features of the JavaScript language I was very excited two years ago when I found out that",
    "start": "31360",
    "end": "37280"
  },
  {
    "text": "there was a new specification coming for the JavaScript language and looking at the JavaScript looking at that",
    "start": "37280",
    "end": "42760"
  },
  {
    "text": "specification I could see that this was a huge step forward for the JavaScript language I mean it had been years since",
    "start": "42760",
    "end": "50160"
  },
  {
    "text": "anything significant really meaty had been added to the JavaScript language",
    "start": "50160",
    "end": "55320"
  },
  {
    "text": "and I was very excited to start working with these new features even before the specific ification was Final and that",
    "start": "55320",
    "end": "61840"
  },
  {
    "text": "was possible because back then when it was still called ecmascript 6 there were",
    "start": "61840",
    "end": "67560"
  },
  {
    "text": "transpilers available so I could start writing this code into projects and not really worry about it screwing up in",
    "start": "67560",
    "end": "73479"
  },
  {
    "text": "production because the transpilers would just put it into es5 code and I knew everything would work in the browser so that was all great but it's been two",
    "start": "73479",
    "end": "80360"
  },
  {
    "text": "years now of working with some of these new features and I've discovered that um",
    "start": "80360",
    "end": "85560"
  },
  {
    "text": "just like ancient cartographers when they were drawing out maps of the world there are some of those areas that just",
    "start": "85560",
    "end": "91799"
  },
  {
    "text": "haven't been fully explored uh areas where ships just kind of disappear we don't know why so they",
    "start": "91799",
    "end": "99000"
  },
  {
    "text": "used to draw dragons and other myth mythological beasts on the map just to",
    "start": "99000",
    "end": "104040"
  },
  {
    "text": "represent those areas where you need to be a little bit cautious if you're venturing into that area so my goal in",
    "start": "104040",
    "end": "109880"
  },
  {
    "text": "this presentation is maybe you've looked at some of these features or using some of these features maybe not but over the",
    "start": "109880",
    "end": "116840"
  },
  {
    "text": "last two years I've picked up on areas where developers run into problems and where things don't work like you would",
    "start": "116840",
    "end": "123039"
  },
  {
    "text": "expect them to work and we will start as an example with arrow functions how hard",
    "start": "123039",
    "end": "129759"
  },
  {
    "text": "could they be they're actually one of the one of those features of ecmascript",
    "start": "129759",
    "end": "134840"
  },
  {
    "text": "2015 where I've seen people struggle the most so I'll also give you a little bit",
    "start": "134840",
    "end": "140000"
  },
  {
    "text": "of an overview of what these specifications are just in case you haven't worked with some of these new languages but if you're a c developer",
    "start": "140000",
    "end": "147720"
  },
  {
    "text": "error functions are just like Lambda EX in C almost identical the rules are almost the same for example this first",
    "start": "147720",
    "end": "154200"
  },
  {
    "text": "bit of code here that represents an executable function",
    "start": "154200",
    "end": "160680"
  },
  {
    "text": "which I think my computer just",
    "start": "160720",
    "end": "165599"
  },
  {
    "text": "uh got very unhappy again yeah there we",
    "start": "166280",
    "end": "173159"
  },
  {
    "text": "go strange patterns on the",
    "start": "173159",
    "end": "177239"
  },
  {
    "text": "screen so I think I might have to reboot real quick one second I'm GNA focus on this",
    "start": "178760",
    "end": "184640"
  },
  {
    "text": "for just a second and as soon as I get back up and running I",
    "start": "184640",
    "end": "191480"
  },
  {
    "text": "will yeah I'm G to have to completely reboot that's uh",
    "start": "191480",
    "end": "197840"
  },
  {
    "text": "unfortunate you know another laptop might not be a bad idea I'll just have to get the slides",
    "start": "199080",
    "end": "205720"
  },
  {
    "text": "off of one drive or something I'll try it once more here but while this is rebooting let me just tell you",
    "start": "205720",
    "end": "214319"
  },
  {
    "text": "that Arrow functions are almost just like the functions uh Lambda expressions in C that is if I want to write an arrow",
    "start": "214319",
    "end": "221760"
  },
  {
    "text": "function that only takes one parameter I have to do a hard reset here I don't",
    "start": "221760",
    "end": "227080"
  },
  {
    "text": "need parentheses around that parameter but if I have an error function that takes two parameters I need the parentheses and all of this would look",
    "start": "227080",
    "end": "234079"
  },
  {
    "text": "glorious if it was actually on the screen interesting that it did that when",
    "start": "234079",
    "end": "239200"
  },
  {
    "text": "I put the pen on the screen to annotate it we'll try it one more time here we're",
    "start": "239200",
    "end": "244879"
  },
  {
    "text": "almost there see if we get a",
    "start": "244879",
    "end": "251680"
  },
  {
    "text": "[Music]",
    "start": "251680",
    "end": "254758"
  },
  {
    "text": "display yes okay see me log",
    "start": "260359",
    "end": "266759"
  },
  {
    "text": "in let me",
    "start": "268080",
    "end": "271599"
  },
  {
    "text": "try to bring this up press that button carefully let's try",
    "start": "274120",
    "end": "281240"
  },
  {
    "text": "the pen real quick okay so far so good no one",
    "start": "281240",
    "end": "288039"
  },
  {
    "start": "288000",
    "end": "288000"
  },
  {
    "text": "breathe this is defining a piece of executable",
    "start": "289080",
    "end": "296199"
  },
  {
    "text": "code that takes one parameter X and it goes to the expression x x x so just like in C if I just want to write a",
    "start": "296199",
    "end": "302520"
  },
  {
    "text": "simple expression that's going to be the return result I don't need a return statement I don't need curly braces or anything like that add is taking two",
    "start": "302520",
    "end": "309120"
  },
  {
    "text": "parameters X and Y that'll return X Plus Y and again we're we're defining something that I can execute so I can",
    "start": "309120",
    "end": "315199"
  },
  {
    "text": "say Square the result of adding three and five and log that out it would be a 64 error functions are beautiful because",
    "start": "315199",
    "end": "321800"
  },
  {
    "text": "JavaScript is a very functional language there's lots of apis that are higher order functions so they're functions",
    "start": "321800",
    "end": "327560"
  },
  {
    "text": "that you can pass in other functions to do work a good example is the map function that's now available on an array instead",
    "start": "327560",
    "end": "334120"
  },
  {
    "text": "of saying numbers. map function keyword parentheses and all that noise that used to be in JavaScript I can now just say",
    "start": "334120",
    "end": "341000"
  },
  {
    "text": "numbers. map and here's a little Lambda expression and goes to n * 2 so I'll double everything in the re array so",
    "start": "341000",
    "end": "348160"
  },
  {
    "text": "aror functions look good but they are it's important to note that aror functions are not a replacement for the",
    "start": "348160",
    "end": "354960"
  },
  {
    "text": "function keyword there's a couple places where you cannot use error functions it's syntactically illegal for example",
    "start": "354960",
    "end": "361520"
  },
  {
    "text": "to use Arrow functions to define a class member and then there's other places where Arrow functions just don't work",
    "start": "361520",
    "end": "367680"
  },
  {
    "start": "367000",
    "end": "367000"
  },
  {
    "text": "like you would expect so let's talk about a few of those scenarios and here's one scenario that comes up here's",
    "start": "367680",
    "end": "372919"
  },
  {
    "text": "a piece of code right here where someone is saying I want to take these numbers and I want to map them into",
    "start": "372919",
    "end": "378680"
  },
  {
    "text": "objects where I would expect to get back three objects that would be value colon",
    "start": "378680",
    "end": "383720"
  },
  {
    "text": "one value colon 2 value colon 3 but what I will actually get back is an array with three undefined values in it",
    "start": "383720",
    "end": "390240"
  },
  {
    "text": "because when the JavaScript runtime evaluates this expression with the um",
    "start": "390240",
    "end": "395400"
  },
  {
    "text": "curly braces it doesn't see that as me trying to return an object literal it sees that as me trying to open up a code",
    "start": "395400",
    "end": "403120"
  },
  {
    "text": "block to perform some work and with once you start a code block with curly braces",
    "start": "403120",
    "end": "409479"
  },
  {
    "text": "you do need an explicit return statement if I wanted to return value colon n for",
    "start": "409479",
    "end": "414800"
  },
  {
    "text": "everything in that array so what JavaScript sees is some code that it executes and returns undefined how is",
    "start": "414800",
    "end": "420720"
  },
  {
    "text": "that even syntactically legal it's still syntactically legal because technically JavaScript we don't",
    "start": "420720",
    "end": "426759"
  },
  {
    "text": "use this very often but it does have uh labels in the language you can add a label to a line of code so what",
    "start": "426759",
    "end": "433000"
  },
  {
    "text": "JavaScript is seeing there is a label called value that just points to the expression n but it it doesn't produce",
    "start": "433000",
    "end": "440720"
  },
  {
    "text": "the result we want so don't do that the easy fix in that particular case yes I",
    "start": "440720",
    "end": "446759"
  },
  {
    "text": "could use an explicit return statement and I can also wrap this thing with parentheses and then the JavaScript run",
    "start": "446759",
    "end": "453479"
  },
  {
    "text": "time will say oh okay what you really want here is an expression that is an object literal and build an object that",
    "start": "453479",
    "end": "460879"
  },
  {
    "text": "has a value property and I'll Stick n inside of there from the array so then I'd get back value one value two value",
    "start": "460879",
    "end": "466560"
  },
  {
    "text": "three making sense interesting hopefully this is what you came to see",
    "start": "466560",
    "end": "472720"
  },
  {
    "text": "good the other special characteristic about error functions that you probably",
    "start": "472720",
    "end": "478159"
  },
  {
    "start": "473000",
    "end": "473000"
  },
  {
    "text": "know if you've worked with this feature is how they preserve the lexical this reference so here's an example of an",
    "start": "478159",
    "end": "485400"
  },
  {
    "text": "object that will not work correctly because when I say numbers. for each here's a function please add n",
    "start": "485400",
    "end": "492960"
  },
  {
    "text": "to sum what is the this reference well it's not going to be",
    "start": "492960",
    "end": "498680"
  },
  {
    "text": "pointing to this Adder object that I'm inside of because the this reference we know in",
    "start": "498680",
    "end": "505560"
  },
  {
    "text": "JavaScript it's Dynamic it's slippery it's set up by the call contact so when for each calls my function for each",
    "start": "505560",
    "end": "512000"
  },
  {
    "text": "isn't going to call my function and pass in n and set up the this reference for me appropriately so this is probably",
    "start": "512000",
    "end": "518200"
  },
  {
    "text": "referencing the window object and I'm going to be getting an error cannot read property sum if I try to execute that",
    "start": "518200",
    "end": "526120"
  },
  {
    "text": "code one of the things they did with arrow functions which is kind of borrowed from copy script fat arrows is",
    "start": "526120",
    "end": "532920"
  },
  {
    "text": "that when you define an arrow function it's going to preserve the lexical value of the this reference and other other",
    "start": "532920",
    "end": "539360"
  },
  {
    "text": "words since this Arrow function is defined inside of a function that is",
    "start": "539360",
    "end": "544560"
  },
  {
    "text": "inside of this object and assuming add gets invoked correctly this Arrow",
    "start": "544560",
    "end": "549600"
  },
  {
    "text": "function is always always always going to be using a this reference that is exactly the same as the this reference",
    "start": "549600",
    "end": "556120"
  },
  {
    "text": "that would be outside of the arrow function inside this function",
    "start": "556120",
    "end": "562480"
  },
  {
    "text": "so am I making sense no what's wrong just that expression",
    "start": "562480",
    "end": "570920"
  },
  {
    "text": "okay yes yes yes a little jet lag so I'm a little leery about what I might be doing wrong",
    "start": "570920",
    "end": "577320"
  },
  {
    "text": "here on front of the stage um that Cod will work so that will actually refer to",
    "start": "577320",
    "end": "583000"
  },
  {
    "text": "this. sum and I will get back a result that is equal to six which is what I would expect that's nice and it's very",
    "start": "583000",
    "end": "589680"
  },
  {
    "text": "useful in a number of scenarios but it's also you have to be aware that it can be",
    "start": "589680",
    "end": "594959"
  },
  {
    "text": "dangerous in a couple scenarios I'll explain why in just a minute um but before I get there this code",
    "start": "594959",
    "end": "603480"
  },
  {
    "start": "597000",
    "end": "597000"
  },
  {
    "text": "works just so we're clear that's an arrow function that's being defined inside of a function so it will capture",
    "start": "603480",
    "end": "609959"
  },
  {
    "text": "that this reference and the specification talks about the this reference becoming static it's no longer",
    "start": "609959",
    "end": "615440"
  },
  {
    "text": "dynamically determined it's sort of pre-bound into that Arrow function and no one can change it but what about this bit of",
    "start": "615440",
    "end": "623320"
  },
  {
    "text": "code where I have this this object member defined as an arrow function and",
    "start": "623320",
    "end": "629240"
  },
  {
    "text": "an error function inside of there it's not immediately obvious when you write that code you might say well I I have an",
    "start": "629240",
    "end": "635519"
  },
  {
    "text": "error function here and it's inside my object but the scope for that will be",
    "start": "635519",
    "end": "640880"
  },
  {
    "text": "taken from the scope from this Arrow function and the scope of this for this",
    "start": "640880",
    "end": "646399"
  },
  {
    "text": "Arrow the scope of this for that line of code it's not inside of a function uh so",
    "start": "646399",
    "end": "653680"
  },
  {
    "text": "it's whatever this is right here where that's being luxly defined so I could very easily be ending up with a this",
    "start": "653680",
    "end": "660040"
  },
  {
    "text": "reference that is still pointing to the window object or you know whatever this was inside of whatever that object was",
    "start": "660040",
    "end": "666079"
  },
  {
    "text": "inside of is that making some sense so too many Arrow functions",
    "start": "666079",
    "end": "671800"
  },
  {
    "text": "there and then the other thing to keep in mind about aror functions is that you cannot bind apply or call to change the",
    "start": "671800",
    "end": "679440"
  },
  {
    "start": "672000",
    "end": "672000"
  },
  {
    "text": "this reference any longer so any other normal function in JavaScript that's declar with the function keyword I can",
    "start": "679440",
    "end": "686160"
  },
  {
    "text": "get a reference to that function I can say function. bind here your this reference to use or function. apply I'm",
    "start": "686160",
    "end": "691880"
  },
  {
    "text": "going to invoke this function and pass in your this reference but with error functions it does not work once the this",
    "start": "691880",
    "end": "697839"
  },
  {
    "text": "once the this pointer has been captured by the error function there's nothing you can do to change it so in this",
    "start": "697839",
    "end": "704120"
  },
  {
    "text": "example I have my object adder and now I'm trying to Define an arrow function that I'm going to bind onto that Adder",
    "start": "704120",
    "end": "711000"
  },
  {
    "text": "so I'm trying to say here's what you'll use as a this reference but it's not going to work react programmers run into",
    "start": "711000",
    "end": "717360"
  },
  {
    "text": "this a lot because they try to Define functions and bind them to the object that they're going to uh be working with",
    "start": "717360",
    "end": "722639"
  },
  {
    "text": "and when they Define them using Arrow functions they can run into trouble what are some other scenarios where you run",
    "start": "722639",
    "end": "727920"
  },
  {
    "text": "into trouble with that well let me start with this second example actually if you're using jQuery",
    "start": "727920",
    "end": "734440"
  },
  {
    "start": "729000",
    "end": "729000"
  },
  {
    "text": "it's quite common to wire up like a button click event and then when jQuery invokes your callback function because",
    "start": "734440",
    "end": "740760"
  },
  {
    "text": "it's been clicked jQuery will try to set up the this reference so it can pass it in as the Dom element that was clicked",
    "start": "740760",
    "end": "747120"
  },
  {
    "text": "on unfortunately jQuery won't be able to do that any longer if you define the call back as an arrow function because",
    "start": "747120",
    "end": "753880"
  },
  {
    "text": "again you can't use uh function. bind or call or apply to manipulate the this reference anymore so this piece of code",
    "start": "753880",
    "end": "760760"
  },
  {
    "text": "the this reference will not be the one that jQuery tried to set up for you it'll be whatever it captured inside of",
    "start": "760760",
    "end": "766639"
  },
  {
    "text": "whatever whatever scope we're in so instead of setting name on the Dom element chances are you're setting the",
    "start": "766639",
    "end": "772680"
  },
  {
    "text": "name of the window or the name of the module or something like that the place where I first ran into this and",
    "start": "772680",
    "end": "778320"
  },
  {
    "text": "discovered it much to my dismay was inside of Jasmine unit test I thought",
    "start": "778320",
    "end": "784399"
  },
  {
    "text": "well this is really nice I'll just start defining my unit test as Arrow functions",
    "start": "784399",
    "end": "789600"
  },
  {
    "text": "but if you've ever used Jasmine you can set up a test context in Jasmine and",
    "start": "789600",
    "end": "794839"
  },
  {
    "text": "attach things to a this reference inside of like before each calls uh just to keep track of things",
    "start": "794839",
    "end": "801639"
  },
  {
    "text": "and have them available inside of the it throughout all of your",
    "start": "801639",
    "end": "807000"
  },
  {
    "text": "tests and then Jasmine when it invokes this function to execute the unit test",
    "start": "807519",
    "end": "812760"
  },
  {
    "text": "it tries to set up the this pointer so you can get to the test context but if it's an arrow function you don't get the",
    "start": "812760",
    "end": "817839"
  },
  {
    "text": "test context so I had test failing and trying to figure out why and I thought maybe it was a bug in the transpiler and",
    "start": "817839",
    "end": "824160"
  },
  {
    "text": "that's when I actually dug into the JavaScript specification and saw oh this is actually how error functions work and",
    "start": "824160",
    "end": "829800"
  },
  {
    "text": "I also found out then when I looked in the specification Arrow functions have a couple other um idiosyncrasies let's",
    "start": "829800",
    "end": "837440"
  },
  {
    "text": "call them because they're not normal functions they don't have their own",
    "start": "837440",
    "end": "842560"
  },
  {
    "text": "implicit arguments variable whatever the arguments are there will be whatever the arguments were for maybe the function",
    "start": "842560",
    "end": "849199"
  },
  {
    "text": "I'm inside of so if I try to add three and five even though I'm passing in two things this implicit arguments variable",
    "start": "849199",
    "end": "856120"
  },
  {
    "text": "here would return zero because maybe I'm inside of a function that had zero arguments is that making some sense so",
    "start": "856120",
    "end": "863639"
  },
  {
    "text": "don't rely on some of those typical function behaviors and implicit",
    "start": "863639",
    "end": "868759"
  },
  {
    "text": "variables that you would get when you're using Arrow functions let's talk about template",
    "start": "868759",
    "end": "874000"
  },
  {
    "text": "literals for a second template literals are that new feature in ecmascript 2015",
    "start": "874000",
    "end": "880440"
  },
  {
    "text": "where I can use the back tick so not a single quote not a double quote but a back tick and then the JavaScript",
    "start": "880440",
    "end": "886399"
  },
  {
    "text": "runtime will evaluate the dollar sign curly brace Expressions that are inside of the",
    "start": "886399",
    "end": "891839"
  },
  {
    "text": "string and if I had X and Y defined before I reach that exact line of code",
    "start": "891839",
    "end": "898199"
  },
  {
    "text": "JavaScript would produce something like 3 + 5al 8 because it would actually evaluate all this stuff but a lot of",
    "start": "898199",
    "end": "904360"
  },
  {
    "text": "people when they hear the word templates they think naturally that oh okay I can define a template like this and then",
    "start": "904360",
    "end": "910920"
  },
  {
    "text": "reuse it with different objects so I'd be able to define a template and then later on give it some X or Y and tell it",
    "start": "910920",
    "end": "917240"
  },
  {
    "text": "to format itself but that's not how it works it's literally just in line there when you define the template any of the",
    "start": "917240",
    "end": "923160"
  },
  {
    "text": "variables that you are using inside of that template they have to be available in the scope and the JavaScript runtime",
    "start": "923160",
    "end": "929079"
  },
  {
    "text": "if it doesn't find X or Y it'll say something is not defined and then people say well why are",
    "start": "929079",
    "end": "935759"
  },
  {
    "text": "they templates then why don't we just call the string inter interpolation well the original",
    "start": "935759",
    "end": "942680"
  },
  {
    "text": "specifications for this actually called them quasi literals so they're kind of fake literals they're not really",
    "start": "942680",
    "end": "947920"
  },
  {
    "text": "literals but it's JavaScript so it has to be a little bit quirky right um You",
    "start": "947920",
    "end": "953240"
  },
  {
    "text": "can make them reusable though so here I'm just going to define template now as a function that takes takes two",
    "start": "953240",
    "end": "959000"
  },
  {
    "text": "parameters X and Y and it Returns the template literal X+ y = X+ Y",
    "start": "959000",
    "end": "966959"
  },
  {
    "text": "and so now all I have to do is invoke that function and pass in my model data so invoke template pass in two and two",
    "start": "966959",
    "end": "972040"
  },
  {
    "text": "and I get back the string 2 plus 2al 4 and if you want to get a little bit",
    "start": "972040",
    "end": "978079"
  },
  {
    "text": "fancier you can use a feature in ecmascript 2015 known as destructuring",
    "start": "978079",
    "end": "983560"
  },
  {
    "text": "so this syntax right here I don't have a slide on D structuring I don't think",
    "start": "983560",
    "end": "989480"
  },
  {
    "text": "uh curly brackets on the left hand side of an assignment statement or in the",
    "start": "989480",
    "end": "997279"
  },
  {
    "text": "list of parameters to a function they destructure an object so this is creating two variables X and Y and what",
    "start": "997279",
    "end": "1004360"
  },
  {
    "text": "it will do is pull the X property and the Y property out of an object that I pass",
    "start": "1004360",
    "end": "1010279"
  },
  {
    "text": "in and so now I have the ability to invoke this template and sort of pass in a model object right I pass in an object",
    "start": "1010279",
    "end": "1016680"
  },
  {
    "text": "that has some properties and there's a template literally on there that'll spit it out so now it feels a little more templ feels a little more like",
    "start": "1016680",
    "end": "1023519"
  },
  {
    "text": "handlebars or something like that CRA So speaking of",
    "start": "1023519",
    "end": "1029558"
  },
  {
    "text": "destructuring some people don't like the crazy syntax that you can now do with ecmascript 2015 and uh plus some other",
    "start": "1029559",
    "end": "1037918"
  },
  {
    "text": "features in the future and actually I do have here something on destructuring so what is destructuring to structuring",
    "start": "1037919",
    "end": "1043880"
  },
  {
    "start": "1038000",
    "end": "1038000"
  },
  {
    "text": "strike some people as funny but square brackets on the right hand side of an assignment that's",
    "start": "1043880",
    "end": "1050039"
  },
  {
    "text": "constructing something so I'm constructing an array using an array literal square brackets on the left hand",
    "start": "1050039",
    "end": "1056600"
  },
  {
    "text": "side of an assignment is destructuring so it's creating new variables X and Y",
    "start": "1056600",
    "end": "1061720"
  },
  {
    "text": "and then it's trying to pull in this case element Sub Zero and element sub one out of whatever is on the right hand",
    "start": "1061720",
    "end": "1068640"
  },
  {
    "text": "side so I would get out of this bit of code X is 22 and Y is 44 very good that",
    "start": "1068640",
    "end": "1075039"
  },
  {
    "text": "one's a simple example but you can get a little bit weirder so here's an example where I",
    "start": "1075039",
    "end": "1082440"
  },
  {
    "text": "have an object with and so there's a radi structuring and there's object",
    "start": "1082440",
    "end": "1087520"
  },
  {
    "text": "destructuring object destructuring well object literals are when you have curly",
    "start": "1087520",
    "end": "1092760"
  },
  {
    "text": "brackets on the right hand side of an expression object destructuring is when you have the curly brackets on the left",
    "start": "1092760",
    "end": "1098760"
  },
  {
    "text": "hand side of an assignment so this is actually creating two new variables",
    "start": "1098760",
    "end": "1104120"
  },
  {
    "text": "State and Country state is going to have a default value of New York but it it's also going",
    "start": "1104120",
    "end": "1111440"
  },
  {
    "text": "try to try to read the state property out of address since there is a state here of Maryland that's where I live in",
    "start": "1111440",
    "end": "1116919"
  },
  {
    "text": "the United States the result of this would be State the state would be pointing to a string Maryland uh country",
    "start": "1116919",
    "end": "1124200"
  },
  {
    "text": "however since there's no country in my address object it would be get that default value of USA so that's where",
    "start": "1124200",
    "end": "1131640"
  },
  {
    "text": "people start to feel a little bit uncomfortable with the structuring why don't we just write the code a little more explicitly um but then you can also do",
    "start": "1131640",
    "end": "1138320"
  },
  {
    "text": "do really crazy stuff with it so here's an object literal defining an employee",
    "start": "1138320",
    "end": "1143520"
  },
  {
    "text": "with a first name it's a complex object cuz I have an address inside of there state Maryland Country USA my favorite",
    "start": "1143520",
    "end": "1148799"
  },
  {
    "text": "numbers not really but whatever this is a destructuring assignment down here",
    "start": "1148799",
    "end": "1154320"
  },
  {
    "text": "because the curly braces are on the Le hand side I'm trying to pull out the first name property fine that'll be equal to a Scott this is defining a",
    "start": "1154320",
    "end": "1161960"
  },
  {
    "text": "state variable it's going to drill into the address of the employee and pull out the state of Maryland and this little",
    "start": "1161960",
    "end": "1169360"
  },
  {
    "text": "quirky expression here is saying go into favorite numbers skip the first element of the array pull out the second one",
    "start": "1169360",
    "end": "1176559"
  },
  {
    "text": "that would be a 55 so now I have three new variables first name State and second and they",
    "start": "1176559",
    "end": "1182600"
  },
  {
    "text": "would be equal to Scott Maryland and 55 that's a little bit odd until you're",
    "start": "1182600",
    "end": "1188039"
  },
  {
    "text": "used to it but it gets better or weirder depending on how you think about it um",
    "start": "1188039",
    "end": "1194840"
  },
  {
    "text": "what's this produce yeah it's a variable length and since a",
    "start": "1194840",
    "end": "1201799"
  },
  {
    "text": "string has a length property we'll be getting the length of that string out of it which is uh looks to be four right WT",
    "start": "1201799",
    "end": "1209880"
  },
  {
    "text": "question mark four characters even more",
    "start": "1209880",
    "end": "1215159"
  },
  {
    "start": "1213000",
    "end": "1213000"
  },
  {
    "text": "interesting I'm going to put a couple different operators together so first of all you might have heard of the bang bang operator Bang Bang You're a Boolean",
    "start": "1215159",
    "end": "1223320"
  },
  {
    "text": "it's a way to do a type coercion in JavaScript so I want to know if value is true so first I'll knot it to get it",
    "start": "1223320",
    "end": "1229520"
  },
  {
    "text": "into a Boolean but that's the opposite of what I want so I'll knot it again to get a true",
    "start": "1229520",
    "end": "1235640"
  },
  {
    "text": "out so let's combine that with uh some",
    "start": "1235640",
    "end": "1241080"
  },
  {
    "text": "other syntax so what is this syntax this is the spread syntax that's part of ecmascript",
    "start": "1241080",
    "end": "1246559"
  },
  {
    "text": "2015 spreading allows me to take an array and then spit out the individual",
    "start": "1246559",
    "end": "1252000"
  },
  {
    "text": "elements of that array into another array I can also use it when I invoke a function to take an array and spread the",
    "start": "1252000",
    "end": "1258840"
  },
  {
    "text": "array across the parameters to that function so if I wanted to invoke a function that took three parameters I",
    "start": "1258840",
    "end": "1264440"
  },
  {
    "text": "could invoke it and do dot dot dot numbers and one would go to the first parameter two would go to the second",
    "start": "1264440",
    "end": "1270000"
  },
  {
    "text": "parameter three to the third parameter but in this example I'm taking numbers and spreading them into an array so I'll",
    "start": "1270000",
    "end": "1275760"
  },
  {
    "text": "get back in Array 1 2 3 4 5 six kind of like flattening now in the next version of",
    "start": "1275760",
    "end": "1282000"
  },
  {
    "text": "ecmascript which you can already take advantage of because transpilers like Babble allow you to uh turn on features",
    "start": "1282000",
    "end": "1289679"
  },
  {
    "text": "that aren't part of an official specification yet they're still coming in the future but in the a future",
    "start": "1289679",
    "end": "1295880"
  },
  {
    "text": "specification you can also spread objects so I want to take this data object and then I want to build a new",
    "start": "1295880",
    "end": "1302799"
  },
  {
    "text": "object result that'll have some additional data in it but spread data into it so result will actually have X",
    "start": "1302799",
    "end": "1309279"
  },
  {
    "text": "and Y properties after that is evaluated making sense so",
    "start": "1309279",
    "end": "1315200"
  },
  {
    "text": "far so now I can't can't remember what library this is in I can't remember if it's in redu it seems to me it's",
    "start": "1315200",
    "end": "1321919"
  },
  {
    "text": "something uh react related what in Earth does this",
    "start": "1321919",
    "end": "1327559"
  },
  {
    "text": "do well what it's trying to do is first determine the spread operator has a very",
    "start": "1327600",
    "end": "1334720"
  },
  {
    "text": "low priority first determine if there is data or not the not not data and if there is data the result of that will be",
    "start": "1334720",
    "end": "1343279"
  },
  {
    "text": "uh this piece of the tary expression and the dot dot dot means we will spread data into this result and the whole goal",
    "start": "1343279",
    "end": "1350640"
  },
  {
    "text": "of this is that if we don't have data what I want to spread here is this false",
    "start": "1350640",
    "end": "1356440"
  },
  {
    "text": "condition which is I just want to spread in default is true into that object but a lot of people look at this dot dot dot",
    "start": "1356440",
    "end": "1362559"
  },
  {
    "text": "bang bang and start to say maybe things have gone too far I don't",
    "start": "1362559",
    "end": "1368480"
  },
  {
    "text": "know but that's actually in a a GitHub project if you do some",
    "start": "1368480",
    "end": "1373520"
  },
  {
    "text": "searching what about this const keyword I've been using const and let were",
    "start": "1373520",
    "end": "1378960"
  },
  {
    "text": "introduced in ecmascript 2015 and a lot of people these days are saying use const whenever possible that should be",
    "start": "1378960",
    "end": "1384600"
  },
  {
    "text": "your default when you're declaring a variable use const and const means means",
    "start": "1384600",
    "end": "1389760"
  },
  {
    "text": "no more assignments to that variable and it makes it easier to reason about uh use let if you have to do an assignment",
    "start": "1389760",
    "end": "1395679"
  },
  {
    "text": "but const what it should do is if I def Define a variable x equals 2 but then I try to reassign it somewhere later in",
    "start": "1395679",
    "end": "1402159"
  },
  {
    "text": "the code I should get a type error I'm trying to assign to a constant variable so in this case if this is really",
    "start": "1402159",
    "end": "1408559"
  },
  {
    "text": "something I had to do I I should be using let here or maybe even VAR but",
    "start": "1408559",
    "end": "1413679"
  },
  {
    "text": "just so you know const doesn't mean immutable so I cannot declare constant",
    "start": "1413679",
    "end": "1419120"
  },
  {
    "text": "numbers equal some array literal and expect that to prevent someone from pushing or popping or slicing that",
    "start": "1419120",
    "end": "1425880"
  },
  {
    "text": "array that works if that's something I wanted to do I could use the object. freeze API you",
    "start": "1425880",
    "end": "1432640"
  },
  {
    "text": "know that would prevent someone from pushing something in that would generate a type error should generate a type",
    "start": "1432640",
    "end": "1440278"
  },
  {
    "text": "error and let's talk about collections a little bit so they did do some good new",
    "start": "1441440",
    "end": "1446600"
  },
  {
    "start": "1443000",
    "end": "1443000"
  },
  {
    "text": "things to prevent crazy errors in JavaScript you know if you invoke the array function and you pass in three",
    "start": "1446600",
    "end": "1453360"
  },
  {
    "text": "parameters that will give you back an array that has those parameters as um",
    "start": "1453360",
    "end": "1460520"
  },
  {
    "text": "values in the array but if you invoke the array function and only pass in one thing it",
    "start": "1460520",
    "end": "1467840"
  },
  {
    "text": "assumes you want an array of that size so it doesn't build an array with a 10 in it it builds an array with 10",
    "start": "1467840",
    "end": "1473480"
  },
  {
    "text": "undefined in it and that becomes a problem that's actually something that I've seen people run into when they're",
    "start": "1473480",
    "end": "1479000"
  },
  {
    "text": "doing a little bit of dynamic programming and uh doing AR ray. call and they're not sure how many parameters",
    "start": "1479000",
    "end": "1484880"
  },
  {
    "text": "they might have to pass in U just so you know if you're ever in that situation there is now an array. of",
    "start": "1484880",
    "end": "1493760"
  },
  {
    "text": "which is the API you should be using when you really want to create an array given some parameters and it takes",
    "start": "1493760",
    "end": "1501440"
  },
  {
    "text": "a a VAR ARS it takes a variable number of arguments so I could pass in 10 11 12 and it will build me an array with 10 11",
    "start": "1501440",
    "end": "1507440"
  },
  {
    "text": "and 12 in it and what's interesting about uh",
    "start": "1507440",
    "end": "1513720"
  },
  {
    "text": "there's another one array. from which is uh actually kind of odd what it will do",
    "start": "1513720",
    "end": "1519720"
  },
  {
    "text": "is it will look at this object that you pass in the first parameter to see if it's iterable or to see if it has a",
    "start": "1519720",
    "end": "1525640"
  },
  {
    "text": "length property and if it just has has a length property internally it just sets up a loop from I equals 0 to I is less",
    "start": "1525640",
    "end": "1533120"
  },
  {
    "text": "than length and uh in this case I'm just demonstrating that you can also pass in a callback function that takes the value",
    "start": "1533120",
    "end": "1541279"
  },
  {
    "text": "that it found at that index and the indexing the key that it",
    "start": "1541279",
    "end": "1546799"
  },
  {
    "text": "used to get in there like 0 1 two three or four five um so what this would do is just build build actually an array that",
    "start": "1546799",
    "end": "1553840"
  },
  {
    "text": "has the value 0 1 2 3 4 in it fascinating I hear you say tell me more all",
    "start": "1553840",
    "end": "1559240"
  },
  {
    "start": "1559000",
    "end": "1559000"
  },
  {
    "text": "right there's some new data structures in ecmascript 2015 uh you should just be aware of how they work there's a new set",
    "start": "1559240",
    "end": "1566159"
  },
  {
    "text": "so sets shouldn't have duplicates in them but it's just doing a reference or",
    "start": "1566159",
    "end": "1571240"
  },
  {
    "text": "a Val value comparison where um if I create a new set and try to add nine",
    "start": "1571240",
    "end": "1576440"
  },
  {
    "text": "twice there'll only be one nine in there which makes sense but if I try to add two arrays",
    "start": "1576440",
    "end": "1583440"
  },
  {
    "text": "that's two different objects that the set sees so it's going to happily accept the two different arrays and the set",
    "start": "1583440",
    "end": "1589679"
  },
  {
    "text": "size will be two makes sense I to a lot of people when they see this I think",
    "start": "1589679",
    "end": "1595080"
  },
  {
    "text": "right you just have to be aware that that is the behavior if I were to try to add the",
    "start": "1595080",
    "end": "1601559"
  },
  {
    "text": "same object reference twice so the same array I try to add twice then the set do",
    "start": "1601559",
    "end": "1608080"
  },
  {
    "text": "size would just contain the one just contain that array wouldn't add it",
    "start": "1608080",
    "end": "1614360"
  },
  {
    "text": "twice a lot of people have asked over the last year if there's a literal notation for map or set map is another",
    "start": "1614960",
    "end": "1622360"
  },
  {
    "text": "new type that was defined by ecmascript 2015 we have a array literals and this nice syntax to create an array is there",
    "start": "1622360",
    "end": "1628760"
  },
  {
    "text": "something similar for map or set and the answer is uh no we have array literals",
    "start": "1628760",
    "end": "1634679"
  },
  {
    "text": "we have object literals and that's still just the only literals we have if I want to create a new map this is sort of the",
    "start": "1634679",
    "end": "1640279"
  },
  {
    "text": "quirky syntax to create a map um I pass in Array an array of",
    "start": "1640279",
    "end": "1646520"
  },
  {
    "text": "arrays where each array inside of here contains the key value uh the key and",
    "start": "1646520",
    "end": "1651960"
  },
  {
    "text": "then the value for IT classes this is where things start to",
    "start": "1651960",
    "end": "1659679"
  },
  {
    "text": "get interesting again so typically when people are",
    "start": "1659679",
    "end": "1666120"
  },
  {
    "start": "1663000",
    "end": "1663000"
  },
  {
    "text": "teaching ecmascript 2015 or describing these features they tell you that classes are syntactic sugar for for what",
    "start": "1666120",
    "end": "1673080"
  },
  {
    "text": "we've always done in other words if I define a class with a Constructor and and it has some methods like do work and",
    "start": "1673080",
    "end": "1679559"
  },
  {
    "text": "it has a property like get and set Name Behind the Scenes all that really is doing is just what we used to do which",
    "start": "1679559",
    "end": "1686320"
  },
  {
    "text": "is let me Define a Constructor function and then let me modify the Prototype",
    "start": "1686320",
    "end": "1691799"
  },
  {
    "text": "object of that Constructor function and add some members to it because every object that is instantiated from that",
    "start": "1691799",
    "end": "1698519"
  },
  {
    "text": "Constructor function will have its magic prototype reference point to that prototype object therefore every object",
    "start": "1698519",
    "end": "1705279"
  },
  {
    "text": "that is instantiated from this Constructor function will have do a do work method and a name property that has",
    "start": "1705279",
    "end": "1711159"
  },
  {
    "text": "a getter and Setter and for the most part this is true for the most part you can think of classes this way that when",
    "start": "1711159",
    "end": "1717880"
  },
  {
    "text": "I'm rting a class it's really just behind the scenes desugared into what I've always been doing perhaps if you've",
    "start": "1717880",
    "end": "1724440"
  },
  {
    "text": "ever used this approach to JavaScript programming if you you know like the object-oriented style but there are some",
    "start": "1724440",
    "end": "1730760"
  },
  {
    "text": "important differences between implementing employee using this style",
    "start": "1730760",
    "end": "1735840"
  },
  {
    "text": "and implementing employee using using this style one such difference is in",
    "start": "1735840",
    "end": "1741080"
  },
  {
    "start": "1740000",
    "end": "1740000"
  },
  {
    "text": "hoisting so if you're familiar with the term hoisting in JavaScript you typically associate it with evil Powers",
    "start": "1741080",
    "end": "1747799"
  },
  {
    "text": "right it's not something that we typically like but it does allow me to write code like this I can define a",
    "start": "1747799",
    "end": "1754000"
  },
  {
    "text": "function down here at the bottom of my Javascript file but thanks to hoisting",
    "start": "1754000",
    "end": "1759640"
  },
  {
    "text": "that symbol employee is actually available right from the start when I am executing code at the top of this file",
    "start": "1759640",
    "end": "1766399"
  },
  {
    "text": "therefore if I write code that says Cony equals new employee that's going to work just fine even though I have employee",
    "start": "1766399",
    "end": "1773039"
  },
  {
    "text": "defined below the same is not true for classes if I try to define a class at the bottom",
    "start": "1773039",
    "end": "1779919"
  },
  {
    "text": "of the file because it's a utility class and I kind of want to push it out of the site and do some real work at the top um",
    "start": "1779919",
    "end": "1786440"
  },
  {
    "text": "this is not going to work it's going to throw a reference air classes classes actually do hoist but",
    "start": "1786440",
    "end": "1793679"
  },
  {
    "text": "they're but they're not legal to use when they hoist hoist so you should get",
    "start": "1793679",
    "end": "1798960"
  },
  {
    "text": "a reference air for this and so what do I mean when I say",
    "start": "1798960",
    "end": "1804240"
  },
  {
    "text": "classes hoist but they're not available to use there's this wonderful term in the ecmascript 2015 specification they",
    "start": "1804240",
    "end": "1811399"
  },
  {
    "text": "talk about this thing called the temporal Dead Zone the tdz I think is a fantastic name for a",
    "start": "1811399",
    "end": "1817640"
  },
  {
    "text": "movie the temporal Dead Zone but what they're talking about is that there is a period of time",
    "start": "1817640",
    "end": "1825960"
  },
  {
    "text": "where and here's another example let VAR variables hoist right if I have",
    "start": "1825960",
    "end": "1832720"
  },
  {
    "text": "if I was using VAR xal 2 x is available everywhere inside of that function right",
    "start": "1832720",
    "end": "1838559"
  },
  {
    "text": "that's what hoisting does but if I declare that variable x with let like it",
    "start": "1838559",
    "end": "1843760"
  },
  {
    "text": "here is here on the slide technically X is hoisted it is avilable right from the",
    "start": "1843760",
    "end": "1850480"
  },
  {
    "text": "top of the function but the specification also says that that is a temporal dead zone until",
    "start": "1850480",
    "end": "1856639"
  },
  {
    "text": "you reach the line of code where X is actually formly declared with let or const if anyone tries to access X the",
    "start": "1856639",
    "end": "1865080"
  },
  {
    "text": "runtime has to throw a reference err so yeah",
    "start": "1865080",
    "end": "1871559"
  },
  {
    "text": "JavaScript another difference uh if I Define employee or human well the",
    "start": "1873240",
    "end": "1878720"
  },
  {
    "start": "1874000",
    "end": "1874000"
  },
  {
    "text": "example here is I'm defining a Constructor function human I'm manipulating the prototype to add a do",
    "start": "1878720",
    "end": "1883760"
  },
  {
    "text": "work method to humans that are instantiated from that Constructor function if I want to do some reflection that is",
    "start": "1883760",
    "end": "1889760"
  },
  {
    "text": "iterate through a new human and find out what is available inside the fourin loop",
    "start": "1889760",
    "end": "1896000"
  },
  {
    "text": "will give me back do work as an available thing inside of a human but if I Define human or well in",
    "start": "1896000",
    "end": "1905039"
  },
  {
    "text": "this case horse as a class and I try to for in through a new",
    "start": "1905039",
    "end": "1911320"
  },
  {
    "text": "horse that method is not seen so you cannot reflect as easily over something",
    "start": "1911320",
    "end": "1917960"
  },
  {
    "text": "that has been defined with a class and that trips people I've seen that trip PE I've seen that trip people up a bit what",
    "start": "1917960",
    "end": "1925919"
  },
  {
    "text": "if I really wanted to do that what if I really wanted to for in over a horse and find out what's inside of it well I",
    "start": "1925919",
    "end": "1931399"
  },
  {
    "text": "can't exactly for in but what I can do is I can use object. prototype of an",
    "start": "1931399",
    "end": "1937480"
  },
  {
    "text": "instance of a horse and then there's an API object. getet own property names on that thing",
    "start": "1937480",
    "end": "1944440"
  },
  {
    "text": "that I get back from get prototype of um um and this is if I want to find the available methods on an object that",
    "start": "1944440",
    "end": "1951960"
  },
  {
    "text": "would actually tell me uh in add in addition to do work actually that would tell me about the Constructor too so",
    "start": "1951960",
    "end": "1958279"
  },
  {
    "text": "it's telling me yes there's a Constructor there and there's a thing called do work there so slight different",
    "start": "1958279",
    "end": "1963720"
  },
  {
    "text": "API this is a four of loop by the way how many people know four",
    "start": "1963720",
    "end": "1969120"
  },
  {
    "text": "of just a few so for in has always been in JavaScript and it iterates over the",
    "start": "1969120",
    "end": "1975960"
  },
  {
    "text": "available keys that are in an object or in an array four of actually pulls out",
    "start": "1975960",
    "end": "1982279"
  },
  {
    "text": "values so if I four of over an array I actually get the values that are inside",
    "start": "1982279",
    "end": "1987799"
  },
  {
    "text": "whereas for in gives me the indexes and I have to use them to index into the array so four of is nice new is required",
    "start": "1987799",
    "end": "1997320"
  },
  {
    "text": "so paranoid JavaScript developers of the past when they Ed the construct when they wrote Constructor functions quite",
    "start": "1997320",
    "end": "2004120"
  },
  {
    "text": "often they wrote some defensive programming in there that used operators like instance of to make sure that no",
    "start": "2004120",
    "end": "2010399"
  },
  {
    "text": "one was invoking the Constructor uh without using the new keyword but in",
    "start": "2010399",
    "end": "2016720"
  },
  {
    "text": "ecmascript 2015 you don't have to do that if you write a class and someone tries to invoke The Constructor for that",
    "start": "2016720",
    "end": "2023360"
  },
  {
    "text": "class and I don't have one defined here but it wouldn't matter even if I had a Constructor there so that's that's the",
    "start": "2023360",
    "end": "2028639"
  },
  {
    "text": "word Constructor uh with curly braces I would get a typ air if I tried",
    "start": "2028639",
    "end": "2035320"
  },
  {
    "text": "to uh invoke hor course without using the new keyword so I don't have to do that anymore but this being JavaScript",
    "start": "2035320",
    "end": "2041440"
  },
  {
    "text": "what's interesting is I can define a Constructor and still return whatever the heck I",
    "start": "2041440",
    "end": "2047399"
  },
  {
    "text": "want and that works and that's legal because it's",
    "start": "2047399",
    "end": "2053480"
  },
  {
    "text": "JavaScript so I say new horse and I get back something with a name of Jiffy and no do work method",
    "start": "2053480",
    "end": "2060639"
  },
  {
    "text": "right let's talk about modules so I have to tell you when I first looked at the",
    "start": "2061359",
    "end": "2068200"
  },
  {
    "text": "specification and I saw that there was going to be modules in JavaScript I thought yes my prayers have been",
    "start": "2068200",
    "end": "2074638"
  },
  {
    "text": "answered I've been wanting something like this for 10 years now you know every other language I work with c and",
    "start": "2074639",
    "end": "2081320"
  },
  {
    "text": "Java in the past and Python and Ruby and everything has some ability to encapsulate code and modularize it and",
    "start": "2081320",
    "end": "2087720"
  },
  {
    "text": "spread things across the file system and I don't have to uh do weird things in the language just to uh architecturally",
    "start": "2087720",
    "end": "2094320"
  },
  {
    "text": "hook things up to work these days is there are times when I look at modules",
    "start": "2094320",
    "end": "2099400"
  },
  {
    "text": "and I think yes I am being punished for what I have asked for that's a quote",
    "start": "2099400",
    "end": "2104920"
  },
  {
    "text": "from Oscar wild he uh any Oscar wild fans out there he writes some really wonderful Pros",
    "start": "2104920",
    "end": "2112079"
  },
  {
    "text": "um English fellow and he's written plays and books and all sorts of interesting things you I'm sure you've probably seen",
    "start": "2112079",
    "end": "2118400"
  },
  {
    "text": "a movie or something that was inspired by one of his works so what are modules in EAS script",
    "start": "2118400",
    "end": "2123880"
  },
  {
    "text": "2015 um first of all they're beautiful because because when I write code that",
    "start": "2123880",
    "end": "2129320"
  },
  {
    "text": "is targeting ecmascript 2015 I no longer have to worry about this syntactic noise",
    "start": "2129320",
    "end": "2135680"
  },
  {
    "text": "that litters every. JS file out there no more iies to control scope uh no more",
    "start": "2135680",
    "end": "2141359"
  },
  {
    "text": "use strict because an ecmascript 2015 if you're in a module you are in a strict mode by default all of that goes away I",
    "start": "2141359",
    "end": "2148839"
  },
  {
    "text": "can open up ajs file and just start writing code and I don't have to worry about anything leaking out into the",
    "start": "2148839",
    "end": "2154240"
  },
  {
    "text": "global scope by default doesn't happen anymore instead I can start writing things in a",
    "start": "2154240",
    "end": "2160760"
  },
  {
    "start": "2158000",
    "end": "2158000"
  },
  {
    "text": "file and I can pick what I explicitly want to export to the outside world for",
    "start": "2160760",
    "end": "2166119"
  },
  {
    "text": "them to consume so inside of this file if I write a function work unless I explicitly export that thing no one else",
    "start": "2166119",
    "end": "2173560"
  },
  {
    "text": "can see it no one else can use it no one else can touch it and I can either export it by using the export keyword",
    "start": "2173560",
    "end": "2179359"
  },
  {
    "text": "right there so I could say export function work and it would be published some people like to write all their code",
    "start": "2179359",
    "end": "2186440"
  },
  {
    "text": "and then put their exports down at the bottom so they're easy to find you just always scroll to the bottom of the file Ah that's what I'm exporting so here I'm",
    "start": "2186440",
    "end": "2193520"
  },
  {
    "text": "exporting two things exporting work exporting the person class you can export functions you can export classes",
    "start": "2193520",
    "end": "2200040"
  },
  {
    "text": "you can export variables you can export just about everything and ecmascript 2015 also has a a slightly diffusing uh",
    "start": "2200040",
    "end": "2207920"
  },
  {
    "text": "diffusing confusing um concept of a default export",
    "start": "2207920",
    "end": "2214880"
  },
  {
    "text": "which I'll talk about here in just a second but it's basically a way of saying all right if someone wants to import from me and they haven't",
    "start": "2214880",
    "end": "2220720"
  },
  {
    "text": "specified exactly what they want to import they get the person class that's basically what that syntax is",
    "start": "2220720",
    "end": "2226800"
  },
  {
    "text": "saying there's also a syntax that allows you to roll things up uh and this is",
    "start": "2226800",
    "end": "2232200"
  },
  {
    "text": "quite useful if you're building a library or you want to build an API it's even quite useful inside of applications",
    "start": "2232200",
    "end": "2237599"
  },
  {
    "text": "sometimes um this is basically saying hey take everything from this module creatures and Export it and also take",
    "start": "2237599",
    "end": "2243960"
  },
  {
    "text": "everything from the humans modules and Export it and so now I have a module that other people can work with without",
    "start": "2243960",
    "end": "2249520"
  },
  {
    "text": "knowing about these lower level modules creatures and humans and referring to them directly modules by the way if you",
    "start": "2249520",
    "end": "2255920"
  },
  {
    "text": "haven't seen the syntax before you don't have to specify a file extension but this is literally saying uh in this",
    "start": "2255920",
    "end": "2262240"
  },
  {
    "text": "folder there should be a creatures. JS file and that's what where I want to grab exports from so you can use uh pass",
    "start": "2262240",
    "end": "2270319"
  },
  {
    "text": "and relative path to navigate to the the modules that you want and then there's Imports so when",
    "start": "2270319",
    "end": "2276920"
  },
  {
    "text": "someone has exported something I can import things so I can import person and animal from lib these names have to",
    "start": "2276920",
    "end": "2283520"
  },
  {
    "text": "match the names that are being exported so if someone exported person I have to import",
    "start": "2283520",
    "end": "2288960"
  },
  {
    "text": "person be very careful if you forget to use the curly braces because if you",
    "start": "2288960",
    "end": "2294119"
  },
  {
    "text": "don't have the curly braces you're asking for the default export and so",
    "start": "2294119",
    "end": "2299160"
  },
  {
    "text": "I've seen a lot of people use the import statement and this thing is undefined",
    "start": "2299160",
    "end": "2304720"
  },
  {
    "text": "and they don't know why because hey that module I see it exports a human person but unless it's an a default",
    "start": "2304720",
    "end": "2312839"
  },
  {
    "text": "export do I have enough pen markup on here yet unless it's a default export um",
    "start": "2312839",
    "end": "2319280"
  },
  {
    "text": "you don't get anything here and if they do have a default export you can name this whatever you",
    "start": "2319280",
    "end": "2324960"
  },
  {
    "text": "want so they could be exporting F and I could be importing bar and it would work",
    "start": "2324960",
    "end": "2330480"
  },
  {
    "text": "there's also the ability to just say I going to import everything and this becomes kind of like a name space so",
    "start": "2330480",
    "end": "2335520"
  },
  {
    "text": "import everything put it in this lib variable and now I can say lib do this or li. person li.",
    "start": "2335520",
    "end": "2342200"
  },
  {
    "text": "animal fast needing I hear you say so some important behaviors to",
    "start": "2342200",
    "end": "2347880"
  },
  {
    "text": "understand about this first of all um let me back up a",
    "start": "2347880",
    "end": "2352960"
  },
  {
    "text": "second it's very so when I first looked at the syntax I thought oh this is quite",
    "start": "2353000",
    "end": "2358079"
  },
  {
    "text": "clever I can imagine this thing exporting some sort of module object and",
    "start": "2358079",
    "end": "2363560"
  },
  {
    "text": "this over here is doing a destructuring so what I'm doing is creating a local variable called animal and it's just sort of destructured out of that module",
    "start": "2363560",
    "end": "2370560"
  },
  {
    "text": "that's not what's that's not what's happening at all the specification refers to these as bindings it is not",
    "start": "2370560",
    "end": "2377560"
  },
  {
    "text": "destructuring and here's why that's significant let's say I have a module that exports a simple variable counter",
    "start": "2377560",
    "end": "2383079"
  },
  {
    "start": "2379000",
    "end": "2379000"
  },
  {
    "text": "equals zero and it also exports a function that I can use to increment that counter and add one to",
    "start": "2383079",
    "end": "2389520"
  },
  {
    "text": "it some other module Imports that counter and tries to manipulate it",
    "start": "2389520",
    "end": "2395880"
  },
  {
    "text": "that's a Sy tax here because these bindings are you can think of them as",
    "start": "2395880",
    "end": "2401040"
  },
  {
    "text": "const they're immutable I cannot change counter and you might say well you know",
    "start": "2401040",
    "end": "2406319"
  },
  {
    "text": "am I getting a copy of that counter what's really happening here it's it's really quite bizarre until you uh sit",
    "start": "2406319",
    "end": "2413280"
  },
  {
    "text": "down and think through it and look at the specification you would think A Primitive value like a number you would",
    "start": "2413280",
    "end": "2419359"
  },
  {
    "text": "be getting a copy of it in this other module but that's actually not what's is not what's happening if I import count",
    "start": "2419359",
    "end": "2426560"
  },
  {
    "text": "and increment I can look at counter and it's a zero ah sorry and if I if I",
    "start": "2426560",
    "end": "2432640"
  },
  {
    "text": "invoke increment which is jumping back into this module to increment this counter I",
    "start": "2432640",
    "end": "2439480"
  },
  {
    "text": "see that change in my other module you can all so so don't think of these as",
    "start": "2439480",
    "end": "2444520"
  },
  {
    "text": "simple variables think of them think of them as bindings and they're almost like the C++ developers a pointer to a",
    "start": "2444520",
    "end": "2451160"
  },
  {
    "text": "pointer you know I'm getting a pointer to that other number that's over there and when I look at count counter I'm I'm",
    "start": "2451160",
    "end": "2457160"
  },
  {
    "text": "referring to that counter really that's in that other module uh yes",
    "start": "2457160",
    "end": "2463760"
  },
  {
    "text": "sorry and think of it like a Singleton so they'll all see the same counter yep",
    "start": "2464760",
    "end": "2470440"
  },
  {
    "text": "the question was uh if if I imported it somewhere else into a second module you know does it see that same value for",
    "start": "2470440",
    "end": "2476160"
  },
  {
    "text": "counter and the answer is yes you can almost think of this like a Singleton and each each module gets a binding to",
    "start": "2476160",
    "end": "2484000"
  },
  {
    "start": "2484000",
    "end": "2484000"
  },
  {
    "text": "it and the bindings are alive so a slightly different example we're going to have an we're going to export an",
    "start": "2484000",
    "end": "2489760"
  },
  {
    "text": "object now with the name of Oscar uh and then just some functions to do things like reset to a new object and",
    "start": "2489760",
    "end": "2497319"
  },
  {
    "text": "uh inspect the name that that module knows about this behaves pretty much",
    "start": "2497319",
    "end": "2502440"
  },
  {
    "text": "like you would probably expect I can set the creature's name when I import",
    "start": "2502440",
    "end": "2508079"
  },
  {
    "text": "creature that's an immutable binding but creature. name is just a property on that thing so I can change the",
    "start": "2508079",
    "end": "2514640"
  },
  {
    "text": "name and if I uh look in that other module you know what",
    "start": "2514640",
    "end": "2521200"
  },
  {
    "text": "name does it see it sees Winnie because my module changed",
    "start": "2521200",
    "end": "2526760"
  },
  {
    "text": "it uh and if I reset things that resets my binding so my creature goes be go",
    "start": "2526760",
    "end": "2533400"
  },
  {
    "text": "goes back to being named Oscar because now we're looking at this object making",
    "start": "2533400",
    "end": "2541200"
  },
  {
    "text": "sense what's the default value of this inside of a module it's undefined just so you know",
    "start": "2542280",
    "end": "2549800"
  },
  {
    "text": "unlike uh when you're not inside of a module and this is the window object or",
    "start": "2549800",
    "end": "2555119"
  },
  {
    "text": "you know something else uh so you might be looking at this",
    "start": "2555119",
    "end": "2561880"
  },
  {
    "start": "2559000",
    "end": "2559000"
  },
  {
    "text": "and saying well Scott why do you feel punished when you're using modules it's because the uh ecmascript",
    "start": "2561880",
    "end": "2568960"
  },
  {
    "text": "2015 specification was very clear that they wanted a static Syntax for",
    "start": "2568960",
    "end": "2574680"
  },
  {
    "text": "modules um and you can get into situations where you start importing a lot of things or you do a lot of",
    "start": "2574680",
    "end": "2581520"
  },
  {
    "text": "bookkeeping right this is actually from a unit test in the angular 2",
    "start": "2581520",
    "end": "2586760"
  },
  {
    "text": "framework where we're trying to write tests using e script 2015 2015 modules first we have to import uh things from",
    "start": "2586760",
    "end": "2593839"
  },
  {
    "text": "the test framework then we have to import some of our infrastructure that",
    "start": "2593839",
    "end": "2598920"
  },
  {
    "text": "helps us test things then we have to import the things that we actually want to test uh and then we have to import",
    "start": "2598920",
    "end": "2605640"
  },
  {
    "text": "some other helpers down here so there's what 40 some lines of imports before I",
    "start": "2605640",
    "end": "2610920"
  },
  {
    "text": "even get to the test code now that's an extreme example but um it can sometimes",
    "start": "2610920",
    "end": "2616160"
  },
  {
    "text": "feel tiresome you just want to use this thing that's in another file and it used to be so easy in JavaScript but now I",
    "start": "2616160",
    "end": "2622520"
  },
  {
    "text": "have to manage these Imports to actually formally bring it in and I would expect over time tooling is going to help us",
    "start": "2622520",
    "end": "2628640"
  },
  {
    "text": "solve this I know jet brains webstorm already has a feature where if you just type that you're using creature it'll",
    "start": "2628640",
    "end": "2635640"
  },
  {
    "text": "say oh do you want me to add an import statement for it you know which is kind of",
    "start": "2635640",
    "end": "2642000"
  },
  {
    "text": "nice but you and if you come from a node.js background or if you've ever used commonjs or any of these other",
    "start": "2643400",
    "end": "2649800"
  },
  {
    "text": "module informal module specifications Community Based specifications that have",
    "start": "2649800",
    "end": "2654880"
  },
  {
    "text": "been out there for modules you might say well can I do something Dynamic like this is the kind of code people write",
    "start": "2654880",
    "end": "2660559"
  },
  {
    "text": "might write with node to say I want to go out and um require",
    "start": "2660559",
    "end": "2667160"
  },
  {
    "text": "sorry down here I want to require a bunch of files that I find so I just want to write some code to go in a",
    "start": "2667160",
    "end": "2672559"
  },
  {
    "text": "directory Loop through all the files that are find there files that are found there and dynamically import",
    "start": "2672559",
    "end": "2679319"
  },
  {
    "text": "them that doesn't work with ecmascript 2015 uh again the specification when they were um designing the module Syntax",
    "start": "2679319",
    "end": "2687119"
  },
  {
    "text": "for JavaScript they didn't want Dynamic stuff they wanted modules to be very",
    "start": "2687119",
    "end": "2693280"
  },
  {
    "text": "explicit and very static and give tools the ability to parse a JavaScript file",
    "start": "2693280",
    "end": "2698680"
  },
  {
    "text": "and analyze the import statements without actually executing JavaScript code and they felt that that would",
    "start": "2698680",
    "end": "2704800"
  },
  {
    "text": "enable a number of good tooling benefits as well as a number of good runtime",
    "start": "2704800",
    "end": "2710280"
  },
  {
    "text": "optimizations so modules feel a little bit inflexible sometimes you don't have any wiggle room you have to specify",
    "start": "2710280",
    "end": "2717720"
  },
  {
    "text": "specific module names and import specific symbols that you want the other interesting thing about",
    "start": "2717720",
    "end": "2724280"
  },
  {
    "text": "modules is that the module syntax that we're looking at is complete and written",
    "start": "2724280",
    "end": "2729680"
  },
  {
    "text": "in stone and it's not going to change it is officially part of the specification what the specification",
    "start": "2729680",
    "end": "2736040"
  },
  {
    "text": "does not provide any guidance on however is how those statements should actually behave in a browser or an environment or",
    "start": "2736040",
    "end": "2743920"
  },
  {
    "text": "an environment like no. JS they basically say here's the syntax now you",
    "start": "2743920",
    "end": "2748960"
  },
  {
    "text": "guys figure out what's going to happen which means it's impossible to use any of this",
    "start": "2748960",
    "end": "2755359"
  },
  {
    "text": "code without without running through a tool that will stitch together modules",
    "start": "2755359",
    "end": "2760640"
  },
  {
    "text": "for you you know you have to use a transpiler you have to use a tool that's going to emit code that will work in the",
    "start": "2760640",
    "end": "2767000"
  },
  {
    "text": "browser and get rid of the import statements right now there's two and",
    "start": "2767000",
    "end": "2772880"
  },
  {
    "start": "2771000",
    "end": "2771000"
  },
  {
    "text": "this is another big source of pain for me with modules originally when I started working with modules I selected",
    "start": "2772880",
    "end": "2778960"
  },
  {
    "text": "this tool called systemjs systemjs is a tool that gives you an API like hey I want to",
    "start": "2778960",
    "end": "2785920"
  },
  {
    "text": "dynamically import this module it's going to be the main entry point for my application and once systemjs brings",
    "start": "2785920",
    "end": "2793119"
  },
  {
    "text": "that file in it might see that that main.js file Imports some other things so and it'll just go out and grab",
    "start": "2793119",
    "end": "2799280"
  },
  {
    "text": "everything that you need and can it can do it all dynamically too just fetch things the reason I initially wanted to",
    "start": "2799280",
    "end": "2806240"
  },
  {
    "text": "use system.js is because systemjs systemjs says that um or the whole goal",
    "start": "2806240",
    "end": "2811960"
  },
  {
    "text": "behind systemjs is that it's trying to implement the future specification for how module loaders should behave so",
    "start": "2811960",
    "end": "2820079"
  },
  {
    "text": "someday in the future or perhaps when our grandchildren are programming there will be a finished",
    "start": "2820079",
    "end": "2826160"
  },
  {
    "text": "specification for how module loading works and systemjs should reflect exactly what that specification says my",
    "start": "2826160",
    "end": "2832800"
  },
  {
    "text": "frustrations with systemjs are that it is not a finished specification",
    "start": "2832800",
    "end": "2838520"
  },
  {
    "text": "it still changes and apis change and you can do you can have a perfectly working",
    "start": "2838520",
    "end": "2844040"
  },
  {
    "text": "system one morning and then do an npm update and get a new version of systemjs",
    "start": "2844040",
    "end": "2849240"
  },
  {
    "text": "and all hell breaks loose nothing works so I've kind of been off of systemjs for about six months now I",
    "start": "2849240",
    "end": "2856720"
  },
  {
    "text": "might revisit it next year when things are better or you know cool closer",
    "start": "2856720",
    "end": "2863720"
  },
  {
    "text": "perhaps uh so one problem with systemjs is changing standards another problem is performance actually uh the aelia team",
    "start": "2863720",
    "end": "2870559"
  },
  {
    "start": "2864000",
    "end": "2864000"
  },
  {
    "text": "ran into the systemjs since it's trying to follow the specifications it builds on top of",
    "start": "2870559",
    "end": "2875960"
  },
  {
    "text": "specifications like the promise specification so when you try to import a module it'll return a promise and you can wait for that promise to resolve to",
    "start": "2875960",
    "end": "2882480"
  },
  {
    "text": "know hey my module has now arrived in the browser unfortunately some browsers",
    "start": "2882480",
    "end": "2887520"
  },
  {
    "text": "uh and systemjs I should mention when it's loading a large application it's",
    "start": "2887520",
    "end": "2892599"
  },
  {
    "text": "building up hundreds perhaps thousands of promises to do all this resolution work and in some browsers promises don't",
    "start": "2892599",
    "end": "2900119"
  },
  {
    "text": "perform very well I think it was Internet Explorer that was taking uh some version of Internet Explorer would",
    "start": "2900119",
    "end": "2906960"
  },
  {
    "text": "take 6 minutes to load an application where in Chrome it was 100 milliseconds and it was all because of the the uh",
    "start": "2906960",
    "end": "2914160"
  },
  {
    "text": "promise implementation in Internet Explorer they actually had a regression bug that was causing a problem so it's",
    "start": "2914160",
    "end": "2921880"
  },
  {
    "start": "2920000",
    "end": "2920000"
  },
  {
    "text": "not a perfect world I I moved away from systemjs and for the last uh about six",
    "start": "2921880",
    "end": "2927960"
  },
  {
    "text": "months I've been using a tool called weback webpack is one of a number of tools that understand ecmascript 2015",
    "start": "2927960",
    "end": "2935599"
  },
  {
    "text": "modules it understands commonjs modules it understands AMD modules it understands UMD modules it knows how to",
    "start": "2935599",
    "end": "2942280"
  },
  {
    "text": "work with typescript and babble and all the transpilers it's just one of those Swiss army knife tools that does",
    "start": "2942280",
    "end": "2948040"
  },
  {
    "text": "everything a lot of people use webpack and completely replace things like Grunt",
    "start": "2948040",
    "end": "2953680"
  },
  {
    "text": "and gulp because you can use webpack to make an entire build system and the whole essence of webpack",
    "start": "2953680",
    "end": "2960760"
  },
  {
    "text": "is that it's a tool that you're going to run at uh build time so before things get to the browser and then you're going",
    "start": "2960760",
    "end": "2966640"
  },
  {
    "text": "to tell it here's the entry point for my application please go to entry. JS web packo look at that file see that it has",
    "start": "2966640",
    "end": "2973240"
  },
  {
    "text": "a couple import statements it'll say okay let me go to those files and they have import statements so again it just goes through the tree of dependencies",
    "start": "2973240",
    "end": "2980119"
  },
  {
    "text": "puts all the JavaScript files together into a single one or uh you can build multiple files too if you want uh in",
    "start": "2980119",
    "end": "2986720"
  },
  {
    "text": "this case we'd be doing a single output into a file called bundle.js and voila you know everything's resolved",
    "start": "2986720",
    "end": "2993920"
  },
  {
    "text": "and I don't have to worry about a runtime module loader or any of that stuff webpack has just given me JavaScript that I can put into the",
    "start": "2993920",
    "end": "3000480"
  },
  {
    "text": "browser using regular script tags and everything works and again webpack is just one of those tools that slices and",
    "start": "3000480",
    "end": "3007200"
  },
  {
    "text": "dices and does everything so if I want webpack to package up my CSS files and my HTML templates and fonts and all this",
    "start": "3007200",
    "end": "3014520"
  },
  {
    "text": "other stuff it'll put everything together uh even if it has to um base 64 en code things so webpack is",
    "start": "3014520",
    "end": "3024040"
  },
  {
    "text": "cool but I do have some concerns over webpack uh I I've seen a tendency in",
    "start": "3024040",
    "end": "3031480"
  },
  {
    "text": "some applications where the uh the application code becomes webpack",
    "start": "3031480",
    "end": "3038960"
  },
  {
    "text": "ified uh a good example would be this is a piece of angular 2 code which",
    "start": "3038960",
    "end": "3044920"
  },
  {
    "text": "everything appears normal here but I want to point out this require statement that require statement is not an angular",
    "start": "3044920",
    "end": "3050799"
  },
  {
    "text": "API it's not a browser API it's nothing that no one understands but webpack understand understands it so when",
    "start": "3050799",
    "end": "3056640"
  },
  {
    "text": "webpack is processing this uh ecmascript 2015 or typescript file it can see that",
    "start": "3056640",
    "end": "3062000"
  },
  {
    "text": "require and say oh you want to bring in an HTML template let me also build that",
    "start": "3062000",
    "end": "3067200"
  },
  {
    "text": "into your uh Javascript file so everything's put together and that's nice because now my application can be",
    "start": "3067200",
    "end": "3075200"
  },
  {
    "text": "served from perhaps just a s single file I don't have to send down templates and all this other stuff but it always",
    "start": "3075200",
    "end": "3081599"
  },
  {
    "text": "worries me when applications take a dependency on tools because",
    "start": "3081599",
    "end": "3086640"
  },
  {
    "text": "in the world of JavaScript how long do tools stick around you know Bower was a pretty hot",
    "start": "3086640",
    "end": "3093720"
  },
  {
    "text": "tool like three years ago how many people still use it I mean there there's a lot of people that still use it but",
    "start": "3093720",
    "end": "3099240"
  },
  {
    "text": "you know how many of the cool kids still use",
    "start": "3099240",
    "end": "3104280"
  },
  {
    "start": "3105000",
    "end": "3105000"
  },
  {
    "text": "it I've also seen library and framework authors struggle with modules and",
    "start": "3105640",
    "end": "3112000"
  },
  {
    "text": "dependencies I mean I'm building let's say I want to build bu a framework on ecmascript 2015 how do I publish that to",
    "start": "3112000",
    "end": "3118280"
  },
  {
    "text": "other people to use um and do I need to build things ahead of time do I need to compile everything to the universal",
    "start": "3118280",
    "end": "3124319"
  },
  {
    "text": "module definition that works with all sorts of different modules except uh ecmascript 2015 modules and what do I do",
    "start": "3124319",
    "end": "3130920"
  },
  {
    "text": "about the poly fills that are required do I build them into my library or do I force you to load them in the browser",
    "start": "3130920",
    "end": "3136440"
  },
  {
    "text": "there's just all sorts of crazy things that go on with modules and then the Tooling in the space that you need",
    "start": "3136440",
    "end": "3141760"
  },
  {
    "text": "things like webpack and the transpilers and all the uh PM this install this and mpm install that to me it's often like",
    "start": "3141760",
    "end": "3149319"
  },
  {
    "text": "being on the ship that's on that ocean right there there are some days that are very exciting you're living on the edge",
    "start": "3149319",
    "end": "3154599"
  },
  {
    "text": "you're swirling around in the ocean and everything is great and it's just so exciting and then there's days where you",
    "start": "3154599",
    "end": "3160040"
  },
  {
    "text": "get like really close to that hole and you just think the whole Project's going down and you're going to die and you",
    "start": "3160040",
    "end": "3165280"
  },
  {
    "text": "just want to get out of this world and get back to something sane like CP or something you know something that",
    "start": "3165280",
    "end": "3171160"
  },
  {
    "text": "someone has thought through uh perhaps excluding as p. in core but",
    "start": "3171160",
    "end": "3178720"
  },
  {
    "text": "anyway it's nuts things break all the time so if you are going to embark on",
    "start": "3179119",
    "end": "3186079"
  },
  {
    "start": "3182000",
    "end": "3182000"
  },
  {
    "text": "something that's going to use ecmascript 2015 I hope I haven't scared you I hope I have just prepared you it will be the",
    "start": "3186079",
    "end": "3192319"
  },
  {
    "text": "future and if you do it today yeah maybe things are still a little bit early so you're going to experience some pain um",
    "start": "3192319",
    "end": "3198480"
  },
  {
    "text": "the biggest pain to me really is the tooling and setting up a build process and all of that is extremely uh",
    "start": "3198480",
    "end": "3204079"
  },
  {
    "text": "complicated and brittle and fragile anyway I'm going to be sticking around for questions I'll let you go since it's",
    "start": "3204079",
    "end": "3210400"
  },
  {
    "text": "uh last session of the day you probably want to get out of here and do something interesting but if you want to contact me that's my email address I can send",
    "start": "3210400",
    "end": "3216440"
  },
  {
    "text": "you the slides or whatever that's me on Twitter that's my website that's where I do videos and uh I think ssw is holding",
    "start": "3216440",
    "end": "3222920"
  },
  {
    "text": "some ask me anything session downstairs with me after this so if you want to come down there I can answer questions",
    "start": "3222920",
    "end": "3230319"
  },
  {
    "text": "there thank you for coming out have a great conference",
    "start": "3230319",
    "end": "3237160"
  }
]