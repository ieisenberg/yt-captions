[
  {
    "start": "0",
    "end": "86000"
  },
  {
    "text": "so welcome to my talk on dotnet core data security hope is not a strategy my name's Steven haunts I'm an offer for",
    "start": "5589",
    "end": "12980"
  },
  {
    "text": "Pluralsight it's been with him for about six years now and done twenty one courses with them mmm I'm a freelance trainer and also Mycroft",
    "start": "12980",
    "end": "20000"
  },
  {
    "text": "MVP which means you get a nice little blue badge it's all about the blue badge okay so the reason why I do this talk",
    "start": "20000",
    "end": "28160"
  },
  {
    "text": "and I've done various versions of it this one's tailored more towards my core is because as developers it's kind of",
    "start": "28160",
    "end": "34219"
  },
  {
    "text": "our responsibility I believe to try and protect the information assets of our company by making sure that we encrypts",
    "start": "34219",
    "end": "40399"
  },
  {
    "text": "their information and do key management security a lot of companies tend to have",
    "start": "40399",
    "end": "46039"
  },
  {
    "text": "this kind of attitude or psyche ones I've work with back in the UK you guys you know if we just cross our fingers we'll hope that no one no tries to steal",
    "start": "46039",
    "end": "53089"
  },
  {
    "text": "any of our data from our databases and you know then end up in have IBM pound which is what nobody wants so generally",
    "start": "53089",
    "end": "60920"
  },
  {
    "text": "we tend to get companies using hope as a strategy or a security strategy and you know I've worked for many companies",
    "start": "60920",
    "end": "66590"
  },
  {
    "text": "across many different market verticals financial services healthcare things",
    "start": "66590",
    "end": "71810"
  },
  {
    "text": "like that and you know there has been kind of a blase approach in some instances and you know this is kind of",
    "start": "71810",
    "end": "77900"
  },
  {
    "text": "like a typical manual that you might get when you're working with a project management team okay that one didn't get",
    "start": "77900",
    "end": "85970"
  },
  {
    "text": "a laugh we want to a bad start okay so what this talk isn't about so this talk isn't about maths it's not about you",
    "start": "85970",
    "end": "92390"
  },
  {
    "start": "86000",
    "end": "86000"
  },
  {
    "text": "know how things are IES work under the covers as interesting as it is as developers you don't really need to know",
    "start": "92390",
    "end": "98240"
  },
  {
    "text": "that unless you tick you want to peer under the covers and it's also not about",
    "start": "98240",
    "end": "103300"
  },
  {
    "text": "breaking codes cryptanalysis or any of that sort of cool stuff what it is about",
    "start": "103300",
    "end": "108650"
  },
  {
    "text": "is about people like you and me who are on the front lines in our company is building software solutions you know",
    "start": "108650",
    "end": "115040"
  },
  {
    "text": "pretty much every developer me always has the same story that there's never enough time to deliver what they need to do and the Compu on so everything now so",
    "start": "115040",
    "end": "122600"
  },
  {
    "text": "this talk is aimed at you know people that are working on software systems they want to you know know about how to",
    "start": "122600",
    "end": "128539"
  },
  {
    "text": "do cryptography and other things in in dotnet so this is kind of like a allele intros kind of what you can do",
    "start": "128539",
    "end": "136170"
  },
  {
    "text": "so typically art this stuff originated from the dotnet framework or the you",
    "start": "136170",
    "end": "141430"
  },
  {
    "text": "know the more traditional dotnet framework typically would run server side during client code where Microsoft",
    "start": "141430",
    "end": "148840"
  },
  {
    "text": "started the dotnet called journey o saintly rat 1.0 version 1.1 the",
    "start": "148840",
    "end": "154210"
  },
  {
    "text": "cryptography support in that version of.net core was severely lacking you know you had a few hashing functions and",
    "start": "154210",
    "end": "159610"
  },
  {
    "text": "that was pretty much about it so dotnet core really became a serious contender from dotnet core 2.0 and don't net",
    "start": "159610",
    "end": "166780"
  },
  {
    "text": "standard 2.0 which is great you know we started to get some feature parity with",
    "start": "166780",
    "end": "171790"
  },
  {
    "text": "the.net framework and the good thing is now you know no in the realm of dotnet core 3 and above we actually get a few",
    "start": "171790",
    "end": "178959"
  },
  {
    "text": "more additions that been waiting for him net for a long time which we gonna talk about tonight so what this is a very",
    "start": "178959",
    "end": "186340"
  },
  {
    "text": "Microsoft focus talking that we're looking at some of the API is there available to us in essence the",
    "start": "186340",
    "end": "192310"
  },
  {
    "text": "principles of what we discuss in a kind of universal so where you working microsoft.net PHP Java Python node",
    "start": "192310",
    "end": "199030"
  },
  {
    "text": "doesn't really matter the principles are kind of the same just we're looking at a Microsoft API so what we're going to",
    "start": "199030",
    "end": "206920"
  },
  {
    "start": "205000",
    "end": "205000"
  },
  {
    "text": "cover and cover quickly there's anyone here who's in my workshop no that's good",
    "start": "206920",
    "end": "213370"
  },
  {
    "text": "except I see can get the same information again so we're gonna look at random numbers we're gonna look at hashing and H max hash message",
    "start": "213370",
    "end": "219280"
  },
  {
    "text": "authentication codes we take a little look at secure password storage symmetric encryption with ies and the",
    "start": "219280",
    "end": "225910"
  },
  {
    "text": "new AES GCM mode has just been introduced into doc notes we look a little bit about asymmetric encryption",
    "start": "225910",
    "end": "232090"
  },
  {
    "text": "in RSA although I'm sure everyone's in the keynote this morning and he's not worried about RSA and we'll look at",
    "start": "232090",
    "end": "239170"
  },
  {
    "text": "digital signatures which also suffer the same quantum related problems but we'll",
    "start": "239170",
    "end": "244180"
  },
  {
    "text": "save that problem for another day and then we'll look at some examples about how typically some of these things might be combined together so I think having",
    "start": "244180",
    "end": "250810"
  },
  {
    "text": "Zhai end-to-end encryption work or TLS protocols work so we'll look at how you can some you know mix some of these",
    "start": "250810",
    "end": "257109"
  },
  {
    "text": "things together so it's cryptography so it's generally about protecting",
    "start": "257109",
    "end": "262810"
  },
  {
    "text": "information typically we think of encryption when we doing that which involves encryption keys",
    "start": "262810",
    "end": "268870"
  },
  {
    "text": "the result of an encrypted message is often called the ciphertext and the art",
    "start": "268870",
    "end": "273880"
  },
  {
    "text": "of trying to break cryptography is crypt analysis but really there's a lot more",
    "start": "273880",
    "end": "281830"
  },
  {
    "text": "to cryptography than just encryption so there's kind of four core pillar areas",
    "start": "281830",
    "end": "286990"
  },
  {
    "text": "that we talked about with cryptography so we have confidentiality you know encryption making something confidential we have integrity so making",
    "start": "286990",
    "end": "294490"
  },
  {
    "text": "sure that if I send a piece of data to someone that it hasn't been tampered with or corrupted in transit where for",
    "start": "294490",
    "end": "300669"
  },
  {
    "text": "authentication which is similar to integrity but it's about you know do you have permission to check the integrity",
    "start": "300669",
    "end": "305950"
  },
  {
    "text": "of this file or piece of data and then we have non-repudiation which is about being able to prove you as the",
    "start": "305950",
    "end": "311979"
  },
  {
    "text": "originator of a message so cryptography is used everywhere and you literally",
    "start": "311979",
    "end": "317979"
  },
  {
    "start": "315000",
    "end": "315000"
  },
  {
    "text": "cannot get out of bed without cryptography being involved in your life somehow even though Jevon is quite transparent so online shopping if you go",
    "start": "317979",
    "end": "325270"
  },
  {
    "text": "onto Amazon or any other websites just using your browser you know you have your browser and servers you know",
    "start": "325270",
    "end": "332290"
  },
  {
    "text": "negotiating keys between each other and communicating securely taking money out",
    "start": "332290",
    "end": "337360"
  },
  {
    "text": "of an ATM you know there's a cryptographic handshake that goes on when you put your PIN code in mobile",
    "start": "337360",
    "end": "343300"
  },
  {
    "text": "phones for better or worse are pretty well encrypted these days specially iPhones but then also we've got some",
    "start": "343300",
    "end": "350229"
  },
  {
    "text": "more you know non security related things like Bitcoin and the other 4 million coins that are out there in the",
    "start": "350229",
    "end": "356830"
  },
  {
    "text": "world today and also electronic voting systems as well I don't have anyone when",
    "start": "356830",
    "end": "362200"
  },
  {
    "text": "to talk on electronic votes in earlier or voting is quite interesting ok so we",
    "start": "362200",
    "end": "369039"
  },
  {
    "text": "start off with random numbers so random numbers are kind of important to cryptography it's what we use for generating a lot of encryption keys or",
    "start": "369039",
    "end": "375460"
  },
  {
    "start": "370000",
    "end": "370000"
  },
  {
    "text": "assaults on passwords so having the ability to generate good random numbers is quite important to us now",
    "start": "375460",
    "end": "382860"
  },
  {
    "text": "traditionally when you talk about random numbers people think about a system dot random and well so it's good for you",
    "start": "382860",
    "end": "389440"
  },
  {
    "text": "know generating not to read lottery numbers or dice rolls or anything like that it's not really robust enough to",
    "start": "389440",
    "end": "394750"
  },
  {
    "text": "use for cryptography because if you pass the same seeds into system but random you'll get the same set of numbers out",
    "start": "394750",
    "end": "400360"
  },
  {
    "text": "so terminus stick which is not beautiful so I said you can use something like RNG",
    "start": "400360",
    "end": "405669"
  },
  {
    "text": "crypto service provider which lives in system dot security doc cryptography along with everything else that we're",
    "start": "405669",
    "end": "411490"
  },
  {
    "text": "talking about today it's very easy to use so if we look here we have a method",
    "start": "411490",
    "end": "418090"
  },
  {
    "text": "we pass in a length that length is going to be the length of a byte array that we want to initialize so if he's using a",
    "start": "418090",
    "end": "424560"
  },
  {
    "text": "256 bit AES key for example that'd be 32 we pass into them your instance the rng",
    "start": "424560",
    "end": "431500"
  },
  {
    "text": "crypto service provider initialize an array to desired length call get bytes and then that array is populated with",
    "start": "431500",
    "end": "438159"
  },
  {
    "text": "lots of random data which is fantastic it's returned as a byte array so hashing",
    "start": "438159",
    "end": "445449"
  },
  {
    "text": "is a next set of primitives that we're looking at and I guess he's probably the one which most people are familiar with and tends to get used the most and",
    "start": "445449",
    "end": "452590"
  },
  {
    "text": "hashing a good way of thinking of it is it's kind of like an electronic fingerprint for a piece of data so if",
    "start": "452590",
    "end": "457900"
  },
  {
    "text": "you have some data yeah a PDF document or string credit card number whatever parse it into a hashing function and you",
    "start": "457900",
    "end": "464860"
  },
  {
    "text": "get hashing code out the other end if you modify that data just slightly and rerun the hash code you get a completely",
    "start": "464860",
    "end": "471159"
  },
  {
    "text": "different hash code out the end of it so there's four you know core properties",
    "start": "471159",
    "end": "477009"
  },
  {
    "text": "for hashing that we try to adopt so first of all it should be easy to compute pieces they to pass through a",
    "start": "477009",
    "end": "483669"
  },
  {
    "text": "function gets a result it's gonna be easy it should be infeasible to generate a specific hash so you shouldn't be able",
    "start": "483669",
    "end": "490750"
  },
  {
    "text": "to start with a hash code and think well piece of data do I need to generate this hash you shouldn't be able to you know",
    "start": "490750",
    "end": "496360"
  },
  {
    "text": "pre guess what that date is gonna be it should be infeasible to modify a message without changing the hash so what do you",
    "start": "496360",
    "end": "503080"
  },
  {
    "text": "discuss if you change just one bit in your original date so you expect the entire hash to change not just a little",
    "start": "503080",
    "end": "508270"
  },
  {
    "text": "bit of it and it should be infeasible to find two identical hashes so if you have",
    "start": "508270",
    "end": "513370"
  },
  {
    "text": "two different pieces of data you run them for a hash algorithm you shouldn't get the same hash code out the back of",
    "start": "513370",
    "end": "519099"
  },
  {
    "text": "it that's called a hash collision and somehow algorithms are susceptible to hash collisions I think sha-1 has been",
    "start": "519099",
    "end": "524920"
  },
  {
    "text": "recently as well another good way of sort of framing a mental model around hash ins it's kind",
    "start": "524920",
    "end": "530880"
  },
  {
    "text": "of like one-way encryption in a way so you have a piece of dates you generate the hash code but you can't go back from",
    "start": "530880",
    "end": "536430"
  },
  {
    "text": "the hash code to the original piece of data it's a one-way operation whereas encryption typically it's a two-way",
    "start": "536430",
    "end": "541980"
  },
  {
    "text": "operation you know has some data encrypted of a key decrypt up the same key you get data back now md5 is quite",
    "start": "541980",
    "end": "551730"
  },
  {
    "text": "an old hashing algorithm it produces a 16 by a hash value invented by Ron",
    "start": "551730",
    "end": "558570"
  },
  {
    "text": "reversed of RSA Fame it was well it came",
    "start": "558570",
    "end": "563880"
  },
  {
    "text": "out in 1991 but it was discovered to have a hash collision resistant vulnerability in 1996 which means it's",
    "start": "563880",
    "end": "569840"
  },
  {
    "text": "not what you'd want to use in a brand-new system you're still worth talking about and knowing about it because if you're like I was at a bank",
    "start": "569840",
    "end": "576030"
  },
  {
    "text": "integrating with some older systems that sent you md5 hash codes back for some data you still have to know how to",
    "start": "576030",
    "end": "582210"
  },
  {
    "text": "generate them in dotnet so for legacy supports it's still relevant then you've",
    "start": "582210",
    "end": "589530"
  },
  {
    "start": "588000",
    "end": "588000"
  },
  {
    "text": "got the secure hash family so you've got sha-1 and sha tsui which are available in dotnet core so sha-1 gives you 160",
    "start": "589530",
    "end": "597630"
  },
  {
    "text": "bit hash function which is 20 bytes and then you've got shots so which gives you 256 bits or 512 bits so 32 and 64 bytes",
    "start": "597630",
    "end": "607050"
  },
  {
    "text": "of a hash data there is a new one called sha free which was designed well the",
    "start": "607050",
    "end": "614730"
  },
  {
    "text": "original shy algorithms were designed as part of a competition which were run by the NSA obviously out makes people a little nervous so sha free was a",
    "start": "614730",
    "end": "622230"
  },
  {
    "text": "competition to come up with a new algorithm that didn't have NSA involvement that is now adopted as a",
    "start": "622230",
    "end": "629010"
  },
  {
    "text": "standard but Microsoft hasn't implemented it yet there are open source versions if he can get that what he it's",
    "start": "629010",
    "end": "635640"
  },
  {
    "text": "up to you if you trust those or not hashing very easy to do in dotnet so if",
    "start": "635640",
    "end": "642660"
  },
  {
    "text": "we look at Shar 256 for example got a sample method here you know we parse in a byte array of our data that we want to",
    "start": "642660",
    "end": "648960"
  },
  {
    "text": "hash because typically everything works with byte arrays in cryptography you",
    "start": "648960",
    "end": "654210"
  },
  {
    "text": "just call the static method create on the char 256 objects and you call compute hash parse your dates are in",
    "start": "654210",
    "end": "659880"
  },
  {
    "text": "then you get hash code so very very powerful property that hashing gives you it's actually very",
    "start": "659880",
    "end": "665030"
  },
  {
    "text": "easy to use which is fantastic that's what we want so building on top of that",
    "start": "665030",
    "end": "670760"
  },
  {
    "text": "we have what's called authenticated hashing and this is pretty much the same",
    "start": "670760",
    "end": "676190"
  },
  {
    "start": "674000",
    "end": "674000"
  },
  {
    "text": "as normal hashing you know have some data run it through the function get a hash code back but in this case you also",
    "start": "676190",
    "end": "681890"
  },
  {
    "text": "provide a key as well encryption key so 32 by key so what this means is if I",
    "start": "681890",
    "end": "687950"
  },
  {
    "text": "generate a hash code for a piece of data and I send it to one of you if you want to generate that exact same hash code you have to be in possession of that key",
    "start": "687950",
    "end": "694970"
  },
  {
    "text": "if you have a different key then the hash codes won't match so you can kind of think of that key is a bit like a",
    "start": "694970",
    "end": "699980"
  },
  {
    "text": "really long password in a way so hash",
    "start": "699980",
    "end": "706970"
  },
  {
    "text": "measure authentication codes they verify integrity and authentication you can use H max based on md5 in the",
    "start": "706970",
    "end": "712940"
  },
  {
    "text": "char family of hashes in doc nets strength is based on the key length so",
    "start": "712940",
    "end": "718010"
  },
  {
    "text": "obviously the longer the key the more secure that's going to be and the most common attack against it is a brute",
    "start": "718010",
    "end": "723800"
  },
  {
    "text": "force against that key that's where you just keep on trying you know millions of combinations until you get the right key",
    "start": "723800",
    "end": "730630"
  },
  {
    "text": "again face inputs use just a few lines of code in dotnet core so you have a H",
    "start": "731530",
    "end": "736760"
  },
  {
    "text": "Mack char 256 objects pass the key into the constructor then called compute hash",
    "start": "736760",
    "end": "742220"
  },
  {
    "text": "on your desired piece of data and you get your hash code back out the other end it's the same if you're doing a H",
    "start": "742220",
    "end": "747470"
  },
  {
    "text": "make char five twelve why H make char 2 so H make md5 it's the same interface so",
    "start": "747470",
    "end": "757790"
  },
  {
    "text": "little detour into passwords so unfortunately passwords are here to stay and I'll be trying to encourage our",
    "start": "757790",
    "end": "763670"
  },
  {
    "start": "761000",
    "end": "761000"
  },
  {
    "text": "users to use things like two-factor authentication and better authentication methods but a lot of users still prefer",
    "start": "763670",
    "end": "769850"
  },
  {
    "text": "passwords because it's easier for them to remember so how we store those passwords is very important but when you",
    "start": "769850",
    "end": "777170"
  },
  {
    "text": "get data breaches where you have you know people's usernames and passwords hashes in there typically you're gonna",
    "start": "777170",
    "end": "783170"
  },
  {
    "text": "get things like a brute-force attack against our password which is where you use a tool our hash Katz to repeatedly",
    "start": "783170",
    "end": "789470"
  },
  {
    "text": "you know just try it billions of different combinations until they get the same hash for a part",
    "start": "789470",
    "end": "794750"
  },
  {
    "text": "or you can do what's called a dictionary or rainbow table attack which is a massive precomputed dictionary of",
    "start": "794750",
    "end": "799830"
  },
  {
    "text": "passwords so they have to do is pass the hash into this dictionary it will just tell them what the past where it is and",
    "start": "799830",
    "end": "805110"
  },
  {
    "text": "these dictionaries have gigabytes in size and you could just download them freely off the internet using a taller",
    "start": "805110",
    "end": "811200"
  },
  {
    "text": "hash cap which uses whatever GPU is installed on your system obviously means it's very very fast a good demo I've",
    "start": "811200",
    "end": "819029"
  },
  {
    "text": "done for some of my more corporate customers before is you use a tool like this which is crack station nets you can",
    "start": "819029",
    "end": "826050"
  },
  {
    "text": "paste a sha-256 hash in there you just type in the CAPTCHA code hit crack hash and it tells you what the password is so",
    "start": "826050",
    "end": "832380"
  },
  {
    "text": "it's kind of a good little demo that you can do to scare executives the next",
    "start": "832380",
    "end": "838800"
  },
  {
    "text": "better way of doing it and this is probably still one of the more common ways in which companies um store",
    "start": "838800",
    "end": "844170"
  },
  {
    "text": "passwords is you have a password and in your upend what's called a salt onto the end of it so salt is just a random piece",
    "start": "844170",
    "end": "850019"
  },
  {
    "text": "of data that you generate and a large random number append those together",
    "start": "850019",
    "end": "855060"
  },
  {
    "text": "called the hashing function then you store the hash and you store the salt so the idea is you're supposed to make it",
    "start": "855060",
    "end": "860279"
  },
  {
    "text": "hardest do a brute-force attack although if someone manages to steal all the salts and can tie them up with the",
    "start": "860279",
    "end": "865560"
  },
  {
    "text": "passwords they're not seen that becomes a moot point anyone use that technique",
    "start": "865560",
    "end": "871529"
  },
  {
    "text": "in their companies yeah quite still quite common so really what we want to",
    "start": "871529",
    "end": "878130"
  },
  {
    "text": "try and do if you want to try and make sure that trying to crack these is more difficult and with Moore's law and",
    "start": "878130",
    "end": "885180"
  },
  {
    "text": "processor speeds and GPU speeds increasing constantly you know they can check what you know two three four or",
    "start": "885180",
    "end": "892410"
  },
  {
    "text": "five billion combinations per second on a powerful GPU it's what we wants to do",
    "start": "892410",
    "end": "897480"
  },
  {
    "text": "is to artificially artificially wants it deliberately slow down the hashing process which is where we'll look at",
    "start": "897480",
    "end": "903630"
  },
  {
    "text": "something called a password-based key derivation function which if you're not familiar with it it sounds quite",
    "start": "903630",
    "end": "910079"
  },
  {
    "text": "frightening but it's actually quite simple so a password-based key derivation function or pbkdf2 as it's",
    "start": "910079",
    "end": "918000"
  },
  {
    "text": "commonly known is it's very similar to a salted hash so you have your password you pass in a salt and you pass in a",
    "start": "918000",
    "end": "924810"
  },
  {
    "text": "number of iterations what a number of iterations is gonna do is it's gonna Pete Earley hash the password before it",
    "start": "924810",
    "end": "930870"
  },
  {
    "text": "returns the hash to you so if you put a number in there like you know 350 2427",
    "start": "930870",
    "end": "938790"
  },
  {
    "text": "it's gonna do you know over 300,000 repeated iterations point you see that hash back so that means if anyone is",
    "start": "938790",
    "end": "946170"
  },
  {
    "text": "using hash cat to try and crack your passwords instead of doing billions of combinations per second you might be able to reduce them down to a thousand",
    "start": "946170",
    "end": "951570"
  },
  {
    "text": "or 100 or depending depending on what value you say it you might notice on",
    "start": "951570",
    "end": "956880"
  },
  {
    "text": "some websites when you put username and password it feels like you're waiting you know three to five seconds before",
    "start": "956880",
    "end": "962190"
  },
  {
    "text": "anything happens probably cuz I do one of these behind the scenes or an equivalent like bcrypt which is kind of",
    "start": "962190",
    "end": "968400"
  },
  {
    "text": "a conceptually similar process well you",
    "start": "968400",
    "end": "981450"
  },
  {
    "text": "need to store it somewhere in your database because you need to present the same salts when you anyhow your password",
    "start": "981450",
    "end": "987090"
  },
  {
    "text": "oh yeah so a pbkdf2 actually has a",
    "start": "987090",
    "end": "993030"
  },
  {
    "text": "proper standard its name is it's an RFC two eight nine eight so whoever implemented this in dotnet",
    "start": "993030",
    "end": "999570"
  },
  {
    "text": "decided to call it RFC two eight nine eight derive bytes not really obvious",
    "start": "999570",
    "end": "1004880"
  },
  {
    "text": "what it does unless you're intimately familiar with RFC numbers I guess you know it some people it makes complete",
    "start": "1004880",
    "end": "1010610"
  },
  {
    "text": "sense you know if you saw adding a documentation you probably just skip over it it doesn't make sense which is a",
    "start": "1010610",
    "end": "1016280"
  },
  {
    "text": "shame because it is incredibly easy to use you just instantiate the class pass in the data you want sir or costing the",
    "start": "1016280",
    "end": "1022430"
  },
  {
    "text": "password is a bytes are you passing your salt give that a number of iterations and then you call get bytes there isn't",
    "start": "1022430",
    "end": "1029329"
  },
  {
    "text": "you return 20 in this case is because this implementation uses sha-1",
    "start": "1029329",
    "end": "1035020"
  },
  {
    "text": "internally which gives you 160 bit hash which is 20 bytes so the number of",
    "start": "1035020",
    "end": "1042740"
  },
  {
    "text": "iterations you pass in obviously means it's gonna take more time when I calculated that table I is using a much",
    "start": "1042740",
    "end": "1049070"
  },
  {
    "text": "older laptop I tested it yesterday you know on this this machine here if you",
    "start": "1049070",
    "end": "1055670"
  },
  {
    "text": "know several million as the iteration count it still took this in a second so you need to think about what's an X",
    "start": "1055670",
    "end": "1061270"
  },
  {
    "text": "double level of delay for your business that's kind of a business decision we'll see the higher that number the more",
    "start": "1061270",
    "end": "1068260"
  },
  {
    "text": "secure that passwords gonna be so I know",
    "start": "1068260",
    "end": "1075220"
  },
  {
    "text": "Troy's mentioned this in his talks but it's this is a good example so has anyone heard of Ashley Madison or the",
    "start": "1075220",
    "end": "1081100"
  },
  {
    "text": "Ashley Madison data breach so this website can really be described as kind",
    "start": "1081100",
    "end": "1086920"
  },
  {
    "text": "of like a dating website I guess they encourages people to have affairs it's pretty shady what it does I don't",
    "start": "1086920",
    "end": "1092350"
  },
  {
    "text": "particularly know when they got hacked I was like yes but there's an interesting story behind it Sam this must have been",
    "start": "1092350",
    "end": "1099370"
  },
  {
    "text": "an inside job as well because as well as all the passwords being installed and all the usernames etc and all of the",
    "start": "1099370",
    "end": "1105340"
  },
  {
    "text": "source code was extracted as well which you know makes you kind of feel like it was an inside job so with their",
    "start": "1105340",
    "end": "1111610"
  },
  {
    "text": "passwords they used something called bcrypt to hash their passwords it's similar to what we've just looked at in",
    "start": "1111610",
    "end": "1117010"
  },
  {
    "text": "dot measures an alternative home implementation so they using bcrypt their passwords which is great it's",
    "start": "1117010",
    "end": "1122830"
  },
  {
    "text": "quite good password security but when they look through the source code they found that some enterprising software developer tried to optimize the process",
    "start": "1122830",
    "end": "1129070"
  },
  {
    "text": "slightly so that you can log in faster so after your first login you then store an md5 hash over the password so you can",
    "start": "1129070",
    "end": "1136600"
  },
  {
    "text": "speed up the login process next time brilliant",
    "start": "1136600",
    "end": "1141750"
  },
  {
    "text": "once they found that out there obviously managed to go easily reverse engineer all of the passwords because md5 hashes",
    "start": "1142020",
    "end": "1148570"
  },
  {
    "text": "are incredibly easy to crack these days and if you're interested in that story in further detail Ars Technica did a",
    "start": "1148570",
    "end": "1154570"
  },
  {
    "text": "fantastic news piece and kind of what happened and what the ramifications were another reason I like to include this in",
    "start": "1154570",
    "end": "1161830"
  },
  {
    "text": "talks obviously it's a horrible websites and when when all the states ally so had",
    "start": "1161830",
    "end": "1167230"
  },
  {
    "text": "quite a big impact on people's lives so obviously if you've been caught having an affair and your usernames in there",
    "start": "1167230",
    "end": "1172630"
  },
  {
    "text": "that's quite embarrassing some people you know it broke up families the most severe case is a few people actually",
    "start": "1172630",
    "end": "1178330"
  },
  {
    "text": "committed suicide over it so it just goes to show that the you know what we do as software engineers",
    "start": "1178330",
    "end": "1184270"
  },
  {
    "text": "can actually have quite a big human impact anyway on that low note let's",
    "start": "1184270",
    "end": "1190630"
  },
  {
    "text": "move on so symmetric encryption supposed to be r",
    "start": "1190630",
    "end": "1196210"
  },
  {
    "text": "downer so symmetric encryption suppose you know we start getting some of the fun stuff this is where you encrypt",
    "start": "1196210",
    "end": "1203620"
  },
  {
    "text": "later with a key the cryptic the same came to everyone knows that you know we're at a security conference but the",
    "start": "1203620",
    "end": "1209170"
  },
  {
    "text": "problem with symmetric encryption is sharing keys is hard it's very hard I mean if I want to encrypt and data and",
    "start": "1209170",
    "end": "1215470"
  },
  {
    "text": "send it to one of you how do I get that key to you I'm not going to stick it on a text file on D Drive although I've",
    "start": "1215470",
    "end": "1222429"
  },
  {
    "text": "seen that happen I'm not gonna Tommy I'm not going to email it to you maybe I could physically meet you and hand you a",
    "start": "1222429",
    "end": "1228460"
  },
  {
    "text": "USB key that might be a good way of doing it but gain the keys between people is very very hard so that's one",
    "start": "1228460",
    "end": "1234760"
  },
  {
    "text": "of the downsides of symmetric encryption again going back to our mental model where we talked about caching so hashing",
    "start": "1234760",
    "end": "1241780"
  },
  {
    "text": "was a one-way operation encryption is two-way so the way encryption algorithms",
    "start": "1241780",
    "end": "1248770"
  },
  {
    "text": "work is they take a load of date so they split it down into blocks the blocks at",
    "start": "1248770",
    "end": "1253840"
  },
  {
    "text": "the end might be padded in some way if they don't quite fit up the block and then you have lots of different repeated operations which happen on these blocks",
    "start": "1253840",
    "end": "1260200"
  },
  {
    "text": "where they get you know different process is done to the many kicks all together and eventually out the other",
    "start": "1260200",
    "end": "1265330"
  },
  {
    "text": "end you can get some encrypted data so for computers this is very very fast it's what computers are good at it's",
    "start": "1265330",
    "end": "1270580"
  },
  {
    "text": "just some good algorithmic support now we have so in Prior to.net core we have",
    "start": "1270580",
    "end": "1279540"
  },
  {
    "text": "things like AES crypto service provider there's crypto service provider and",
    "start": "1279540",
    "end": "1284770"
  },
  {
    "text": "Triple DES crypto service provider her kind of free symmetric algorithms available to us they all derive from a",
    "start": "1284770",
    "end": "1290860"
  },
  {
    "text": "symmetric algorithm based class which means they will pretty much identical in how you use them which is good des and",
    "start": "1290860",
    "end": "1297669"
  },
  {
    "text": "Triple DES again you're not gonna use those in a brand new system but you know if you are in a larger older company",
    "start": "1297669",
    "end": "1303250"
  },
  {
    "text": "chances are you might have to integrate with some older legacy systems so I worked for an online bank is one of the",
    "start": "1303250",
    "end": "1309160"
  },
  {
    "text": "first online banks in the UK about our back-end banking platform was like a you",
    "start": "1309160",
    "end": "1315429"
  },
  {
    "text": "know UNIX based as/400 mainframe system and all of our data is encrypted with Triple DES and so often you had to deal",
    "start": "1315429",
    "end": "1322360"
  },
  {
    "text": "with some of that data but Germany if you're going to use a system these days you're gonna use AES",
    "start": "1322360",
    "end": "1328390"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "so AES is a nest standard from 2001 based on the Ryan dollar cipher by two",
    "start": "1328390",
    "end": "1334960"
  },
  {
    "text": "Belgian mathematicians Joan Damon and Vincent Roman and the way this works is",
    "start": "1334960",
    "end": "1341770"
  },
  {
    "text": "to pass into the system you have your plaintext that's a date you want to encrypt you have different key strengths",
    "start": "1341770",
    "end": "1348309"
  },
  {
    "text": "so 128 192 or 256 bit keys Germany gonna go for the higher key lengths 256 bits",
    "start": "1348309",
    "end": "1355830"
  },
  {
    "text": "and you also pass in something called an initialization vector which is a 16 bytes random number which is used to",
    "start": "1355830",
    "end": "1363090"
  },
  {
    "text": "basically jumpstart the first block of the encryption the initialization vector you do need to store it with your",
    "start": "1363090",
    "end": "1368740"
  },
  {
    "text": "encrypted data because you have to pass the same IV back.you mini decrypt your data but it's not the secret keys not",
    "start": "1368740",
    "end": "1373960"
  },
  {
    "text": "classed as a secret there in dotnet there's and don't they call there's two",
    "start": "1373960",
    "end": "1379299"
  },
  {
    "text": "versions of AES or the older version of AES is AES managed or AES crypto service provider the difference is a EES managed",
    "start": "1379299",
    "end": "1387580"
  },
  {
    "text": "is written in dotnet it's a native not met implementation but it's not fit certified whereas AES crypto service",
    "start": "1387580",
    "end": "1394929"
  },
  {
    "text": "providers its underlying windows cryptography platform and it is Phipps 197 - 2 certified what that means is",
    "start": "1394929",
    "end": "1401830"
  },
  {
    "text": "it's been independently tested which means it will be compatible with other implementations also had the",
    "start": "1401830",
    "end": "1406929"
  },
  {
    "text": "certification so if you've got some data that was encrypted you know if Java Java implementation if",
    "start": "1406929",
    "end": "1412960"
  },
  {
    "text": "they're ones hip certified it means you're gonna be able to download the same information so generally you tend",
    "start": "1412960",
    "end": "1418299"
  },
  {
    "text": "to use this reasonably straightforward to you so it uses streams these is a",
    "start": "1418299",
    "end": "1424390"
  },
  {
    "text": "memory stream in a crypto stream so we passed in our data the key in the IV",
    "start": "1424390",
    "end": "1429779"
  },
  {
    "text": "instantiate the AES crypto service provider initialize our streams pass the data in got this thing here IES create",
    "start": "1429779",
    "end": "1438190"
  },
  {
    "text": "encryptor which you have to call cool riots call flush block turn it into an array return",
    "start": "1438190",
    "end": "1445059"
  },
  {
    "text": "it and that's your encrypted data the encryption is identical the only",
    "start": "1445059",
    "end": "1450340"
  },
  {
    "text": "difference is it's sort of creating crypt so we're passing in create decrypt sir",
    "start": "1450340",
    "end": "1455900"
  },
  {
    "text": "so it's relatively straightforward and this is what we've had available twisting dotnet and dotnet core for a",
    "start": "1455900",
    "end": "1461990"
  },
  {
    "text": "long time well not so much a long time snot net core but traditional net this is kind of",
    "start": "1461990",
    "end": "1467120"
  },
  {
    "text": "what we've had to play with and in dotnet core we get something called AES",
    "start": "1467120",
    "end": "1472220"
  },
  {
    "start": "1470000",
    "end": "1470000"
  },
  {
    "text": "GCM mode or Gallia's counter mode and there's not another version called CCM but GCM is the most useful version",
    "start": "1472220",
    "end": "1479780"
  },
  {
    "text": "service and it is good you know GCM mode in AES has been around a while but it's",
    "start": "1479780",
    "end": "1485270"
  },
  {
    "text": "only just come to dock mats which is good now traditionally when you use",
    "start": "1485270",
    "end": "1490790"
  },
  {
    "text": "normal AES like the one we just looked at a traditional use case would be that you encrypt some data and then you might",
    "start": "1490790",
    "end": "1496640"
  },
  {
    "text": "produce a hash Mac of that data afterwards which you then store with the date so so here's an encrypted date so",
    "start": "1496640",
    "end": "1502280"
  },
  {
    "text": "I've now got a you know an authenticated hash of the data so we can tell if it's been modified at a later date",
    "start": "1502280",
    "end": "1508270"
  },
  {
    "text": "what GCM mode does is it does that caching process as part of the encryption process so sort of during an",
    "start": "1508270",
    "end": "1515720"
  },
  {
    "text": "encrypt and then hash we're basically getting the whole thing done in one go and GCM mode has been designed to be",
    "start": "1515720",
    "end": "1521300"
  },
  {
    "text": "highly parallel and very very fast and efficient there's even in turn instructions and modern chips now",
    "start": "1521300",
    "end": "1531980"
  },
  {
    "text": "instead of passing in a 16 bytes initialization vector they've now called",
    "start": "1531980",
    "end": "1537290"
  },
  {
    "text": "it a nonce number once and instead of being 16 bytes it's 12 bytes for a GCM",
    "start": "1537290",
    "end": "1545240"
  },
  {
    "text": "mode also you're passing your key you know 32 by 256 bit key and you can also",
    "start": "1545240",
    "end": "1552080"
  },
  {
    "text": "pass him what's called Associated data sis he's effectively metadata that you can pass in along with your data that",
    "start": "1552080",
    "end": "1558560"
  },
  {
    "text": "you want to encrypt so a good example of that might be if you're encrypting personal information for a customer so",
    "start": "1558560",
    "end": "1565310"
  },
  {
    "text": "name address phone number dates of birth etc The Associated Day Tea Party might",
    "start": "1565310",
    "end": "1571250"
  },
  {
    "text": "be the database key ID but you know which isn't necessarily relevant to that",
    "start": "1571250",
    "end": "1576710"
  },
  {
    "text": "record on its own but you must pass it in as a bit of additional metadata",
    "start": "1576710",
    "end": "1581740"
  },
  {
    "text": "you don't have to pass it in you can just pass null if you don't want to do that what we also get out which I've",
    "start": "1582850",
    "end": "1589900"
  },
  {
    "text": "actually left the arrow off of the diagram that's a bit silly there's another thing we get out as well as a sigh the ciphertext is called a tag now",
    "start": "1589900",
    "end": "1597340"
  },
  {
    "text": "that tag is effectively H Mac of the encrypted data so to use it it's very",
    "start": "1597340",
    "end": "1605230"
  },
  {
    "text": "straightforward so we have a method here which I've written so we're passing our data to",
    "start": "1605230",
    "end": "1610750"
  },
  {
    "text": "encrypt it passing our key vertice bytes passing the nonce 12 by trand imparting",
    "start": "1610750",
    "end": "1617230"
  },
  {
    "text": "are associated data if we want to initialize an empty tag we create an",
    "start": "1617230",
    "end": "1623770"
  },
  {
    "text": "array for a ciphertext we instantiate the AES GCM class passing the key into",
    "start": "1623770",
    "end": "1629170"
  },
  {
    "text": "the constructor then you just call encrypt and then from that I'm returning a tuple or topple or tuple depend on how",
    "start": "1629170",
    "end": "1635440"
  },
  {
    "text": "you want to pronounce it if the ciphertext and the tag and when you come to decrypt the data you pass in your",
    "start": "1635440",
    "end": "1644290"
  },
  {
    "text": "ciphertext okay that's what you want to decrypt you pass in your key you pass in the nonce you pass it the same tag that",
    "start": "1644290",
    "end": "1652180"
  },
  {
    "text": "was returned previously and you pass it the same associated data if there was any now what it will do is when you pass",
    "start": "1652180",
    "end": "1659110"
  },
  {
    "text": "that tag in it's going to check the integrity of that data as its decrypting it if there's an issue of it it's going",
    "start": "1659110",
    "end": "1665110"
  },
  {
    "text": "to abort from for an exception so whereas before we said you do you know an AES encryption then a hash Mac and",
    "start": "1665110",
    "end": "1672160"
  },
  {
    "text": "then what you might do is you might do a hash map check and then a decription this is doing it all as part of the same process",
    "start": "1672160",
    "end": "1678990"
  },
  {
    "text": "okay so asymmetric encryption um you know this is discussed and this morning",
    "start": "1680049",
    "end": "1685400"
  },
  {
    "text": "so everyone's been probably familiar with it so it's based on the idea of having a key pair of public key and a",
    "start": "1685400",
    "end": "1691370"
  },
  {
    "start": "1686000",
    "end": "1686000"
  },
  {
    "text": "private key these keys are based on prime numbers so what it will mean is if",
    "start": "1691370",
    "end": "1697160"
  },
  {
    "text": "I want to send some data encrypted data is one of you what I do is I request your public key which you send me",
    "start": "1697160",
    "end": "1703429"
  },
  {
    "text": "because it's public anyone can know that I encrypt the data with your public key I send you that data and then you",
    "start": "1703429",
    "end": "1710240"
  },
  {
    "text": "decrypt it with your private key because it's only known to you so RSA was",
    "start": "1710240",
    "end": "1716030"
  },
  {
    "text": "developed by RSA data security incorporated by Rivest Shamir and Adleman and it's based on the fact that",
    "start": "1716030",
    "end": "1722720"
  },
  {
    "text": "there's no way to fact a very large prime numbers caveat until quantum computers come along you know a minimum",
    "start": "1722720",
    "end": "1731150"
  },
  {
    "text": "recommended key length is 80 2048 bits but whenever I've used it we've got a",
    "start": "1731150",
    "end": "1736790"
  },
  {
    "text": "straight to 4096 bits which is a nice strong key at the moment so RSA is a",
    "start": "1736790",
    "end": "1745160"
  },
  {
    "text": "mathematical encryption scheme as supposed to be now grief meekly yes is he's incredibly fast and efficient but",
    "start": "1745160",
    "end": "1752000"
  },
  {
    "text": "sharing keys is hard asymmetric encryption the key sharing problem is better cos you've got this split key",
    "start": "1752000",
    "end": "1757669"
  },
  {
    "text": "concept but it's incredibly slow to encrypt a to prevent and there's also a",
    "start": "1757669",
    "end": "1763640"
  },
  {
    "text": "limit as well in that you can only encrypt data up to the size of the key including your padding so you can't just",
    "start": "1763640",
    "end": "1769160"
  },
  {
    "text": "have a huge piece of data and then encrypt it virus a because it won't work",
    "start": "1769160",
    "end": "1774700"
  },
  {
    "text": "so if I was to say top the whole idea around prime numbers if I was to say to",
    "start": "1776290",
    "end": "1781970"
  },
  {
    "text": "you you know what is 23 times 17 what I'm not gonna Kenny 1 do I just put the answer on the screen but you know that's",
    "start": "1781970",
    "end": "1788750"
  },
  {
    "text": "quite an easy something to work out I need he had a heart attack this morning so I thought she's gonna ask me that math question I managed to dodge it up",
    "start": "1788750",
    "end": "1795290"
  },
  {
    "text": "one she took the guy next to me so the answer is 391 very easy to work out but",
    "start": "1795290",
    "end": "1802429"
  },
  {
    "text": "if I was to say to you and you know if anyone can work it out please let me know what are the two prime numbers that make five thousand nine hundred and",
    "start": "1802429",
    "end": "1808040"
  },
  {
    "text": "sixty three that's quite hard to work out anyone wanna have a quick",
    "start": "1808040",
    "end": "1814809"
  },
  {
    "text": "okay so 67 and 89 so if you equate this back to you know a mental model around",
    "start": "1815350",
    "end": "1822950"
  },
  {
    "text": "public and private keys a public key is the result of those primes a five thousand nine hundred and sixty three in",
    "start": "1822950",
    "end": "1828890"
  },
  {
    "text": "the private key is those two factored prime numbers now a real RSA key has",
    "start": "1828890",
    "end": "1835790"
  },
  {
    "text": "more components to it but that's kind of like the fundamental principle but an RSA keys may be a lot bigger than the",
    "start": "1835790",
    "end": "1841160"
  },
  {
    "text": "number five thousand nine hundred and sixty-three it's gonna be from here probably stretching into the center of Oslo is a really really long number so",
    "start": "1841160",
    "end": "1849140"
  },
  {
    "text": "trying to break that number down to its constituent prime numbers is incredibly",
    "start": "1849140",
    "end": "1854150"
  },
  {
    "text": "hard that's what computers struggle with at the moment I'm saying at the moment I'm being very cautious",
    "start": "1854150",
    "end": "1861160"
  },
  {
    "text": "so using RSA in dotnet is incredibly simple which is great so your first free one sir generates from new keys and I",
    "start": "1861160",
    "end": "1869390"
  },
  {
    "text": "didn't design these API some the API designing this is a bit questionable so",
    "start": "1869390",
    "end": "1875150"
  },
  {
    "text": "I've got a method here called assign a new key and you Stan shape RSA crypto service provider tell it what strength",
    "start": "1875150",
    "end": "1880430"
  },
  {
    "text": "of key you wants then you call export parameters by passing in false to get your public key and you're passing true",
    "start": "1880430",
    "end": "1886850"
  },
  {
    "text": "to get your public key so that yeah that puts the two keys in those public",
    "start": "1886850",
    "end": "1893810"
  },
  {
    "text": "property private properties at the top they're encrypting data again only a few",
    "start": "1893810",
    "end": "1898970"
  },
  {
    "text": "lines of code so you instantiate RSA",
    "start": "1898970",
    "end": "1904670"
  },
  {
    "text": "crypto service provider you imports your public key is always encrypted public key we call encrypt given it our byte",
    "start": "1904670",
    "end": "1911240"
  },
  {
    "text": "array of our data and that's going to return our encrypted data to us to",
    "start": "1911240",
    "end": "1917000"
  },
  {
    "text": "decrypt it gave me and Stan Show RSA crypto service provider we import our",
    "start": "1917000",
    "end": "1922100"
  },
  {
    "text": "private key or the recipients private key or they import their key I should say you call decrypt then that gives you",
    "start": "1922100",
    "end": "1928970"
  },
  {
    "text": "your decrypted data back that's RSA incredibly simple to use in Nets",
    "start": "1928970",
    "end": "1935850"
  },
  {
    "text": "the final primitive I want to look at before we sort of look at how typically some of these things are used together",
    "start": "1935850",
    "end": "1940990"
  },
  {
    "text": "is digital signatures so a digital signature has free kind of properties or",
    "start": "1940990",
    "end": "1948700"
  },
  {
    "start": "1946000",
    "end": "1946000"
  },
  {
    "text": "free methods to it there's the key generation you have a signing algorithm for signing some data and you have",
    "start": "1948700",
    "end": "1956080"
  },
  {
    "text": "what's called a signature verifier now the reason we sign data is because it's a good way of proving that some data",
    "start": "1956080",
    "end": "1962679"
  },
  {
    "text": "originated from us often or from you so",
    "start": "1962679",
    "end": "1968289"
  },
  {
    "text": "if you think about what we said before I say if I want to send some data to you I request your public key I encrypts the",
    "start": "1968289",
    "end": "1975340"
  },
  {
    "text": "data then you decrypt it if your private key the signing process is kind of flipped it uses RSA in this case under",
    "start": "1975340",
    "end": "1981820"
  },
  {
    "text": "the covers or while making a lookout being said to me as the originator I sign the data with my private key only I",
    "start": "1981820",
    "end": "1989799"
  },
  {
    "text": "have that private key so when I send you the data and you want to verify it came from me you verify it with my public key",
    "start": "1989799",
    "end": "1996820"
  },
  {
    "text": "if the verification process comes back and says true you know that data could have only come from me or criminal that",
    "start": "1996820",
    "end": "2004049"
  },
  {
    "text": "stolen my private key now because it's based on RSA as you said no there's",
    "start": "2004049",
    "end": "2011549"
  },
  {
    "text": "limits the amount of data that you can process in one go so typically what you do is you create a sha-256 hash or H Mac",
    "start": "2011549",
    "end": "2018929"
  },
  {
    "text": "of that data that you want to sign and then you sign the hash which is a much smaller piece of data",
    "start": "2018929",
    "end": "2026419"
  },
  {
    "text": "okay so again very easy to use so the key generation process is you know",
    "start": "2027860",
    "end": "2033140"
  },
  {
    "text": "exactly the same slide as what we saw before for RSA to perform a digital",
    "start": "2033140",
    "end": "2039660"
  },
  {
    "text": "signature or just assign it we have to use this class here called RSA pkcs1 signature for matter which is a",
    "start": "2039660",
    "end": "2046860"
  },
  {
    "text": "brilliant name so we instantiate the RSA crypto service provider we import our",
    "start": "2046860",
    "end": "2052169"
  },
  {
    "text": "private key because that's a person doing the signing I'm gonna use my private key instantiates RSA RSA pkcs1",
    "start": "2052169",
    "end": "2059638"
  },
  {
    "text": "signature format so we tell it what hashing algorithm we're gonna use by passing in a magic string that says char 256 and then we call create signature",
    "start": "2059639",
    "end": "2068580"
  },
  {
    "text": "passing in the hash of our data and that will give us a byte array back that contains our digital signature so we",
    "start": "2068580",
    "end": "2075570"
  },
  {
    "text": "send some data to a recipient so he send them you know the hash of the data that we wanted to sign we send them the",
    "start": "2075570",
    "end": "2081090"
  },
  {
    "text": "signature and they come along and they request my public key or maybe they've",
    "start": "2081090",
    "end": "2087060"
  },
  {
    "text": "already got a copy of it they import the public key they call RSA or they instantiate RSA pkcs1 signature D",
    "start": "2087060",
    "end": "2094108"
  },
  {
    "text": "formatter again today they're using char 256 and then they call verify a signature",
    "start": "2094109",
    "end": "2100170"
  },
  {
    "text": "passing in a hash of the data and their signature and it was turning for true or false yes it verifies no it doesn't a",
    "start": "2100170",
    "end": "2108590"
  },
  {
    "text": "digital signature is that they yeah they're very useful is anyone used services like DocuSign to sign contracts",
    "start": "2108590",
    "end": "2114300"
  },
  {
    "text": "or some of the equivalents so taking DocuSign is an example and if your",
    "start": "2114300",
    "end": "2120510"
  },
  {
    "text": "wanted to sign a contract to someone for a piece of work or to buy a house they upload the contract into DocuSign you",
    "start": "2120510",
    "end": "2125880"
  },
  {
    "text": "read it you tell it you want to sign it and it puts a nice little pretty graphic of a signature on there behind the",
    "start": "2125880",
    "end": "2131550"
  },
  {
    "text": "scenes it creates a digital signature like what we've done here and that gets stored in a database and the next person",
    "start": "2131550",
    "end": "2136980"
  },
  {
    "text": "comes along you know the originator of a document they if you signed it they then countersign it and that creates another",
    "start": "2136980",
    "end": "2142020"
  },
  {
    "text": "digital signature so what this also means is that you know if it was say for a piece of work and then you agreed that",
    "start": "2142020",
    "end": "2148170"
  },
  {
    "text": "they're gonna pay you ten thousand euros of his piece of work if you then come along and say no I want fifteen thousand they gonna go well no",
    "start": "2148170",
    "end": "2154980"
  },
  {
    "text": "we've got mathematical proof you signed this document with your private yeah your private key and we",
    "start": "2154980",
    "end": "2161680"
  },
  {
    "text": "countersigned it so we have proof that that document says ten thousand not fifteen thousand that's kind of how",
    "start": "2161680",
    "end": "2168549"
  },
  {
    "text": "services are DocuSign and implement digital signatures it's handy because you can use digital signatures as proof",
    "start": "2168549",
    "end": "2175000"
  },
  {
    "text": "in court okay so we talked about the",
    "start": "2175000",
    "end": "2183940"
  },
  {
    "start": "2180000",
    "end": "2180000"
  },
  {
    "text": "four pillars earlier so confidentiality will be looking to AES and RSA for that",
    "start": "2183940",
    "end": "2190049"
  },
  {
    "text": "integrity we looked at char 256 or vent occasionally nuggets at hash mark char",
    "start": "2190049",
    "end": "2195160"
  },
  {
    "text": "256 a non repudiation we looked at digital signatures so kind of some example",
    "start": "2195160",
    "end": "2200980"
  },
  {
    "text": "primitives in net that we can use to satisfy each of those four pillars so I",
    "start": "2200980",
    "end": "2206349"
  },
  {
    "text": "want to look at now I only got twenty minutes so look at now is how you know",
    "start": "2206349",
    "end": "2211779"
  },
  {
    "text": "some of these things might get used together because you know it's like a box of tools and you have towards me you know combine them together to produce",
    "start": "2211779",
    "end": "2217930"
  },
  {
    "text": "other tools this will give you a kind of a good idea of how things like end-to-end messaging or maybe TLS things",
    "start": "2217930",
    "end": "2224859"
  },
  {
    "text": "like that work which is good so start off with the first example so he talked",
    "start": "2224859",
    "end": "2231369"
  },
  {
    "text": "about how the fact that RSA has limits on the amount of data that you can encrypt in one go so that's a limitation but we also mentioned the AES is",
    "start": "2231369",
    "end": "2239079"
  },
  {
    "text": "incredibly fast and efficient but key sharing is hard so what we can do is you can use two of those together to give us",
    "start": "2239079",
    "end": "2245049"
  },
  {
    "text": "a way to have fast encryption with good key management so who works for as an",
    "start": "2245049",
    "end": "2251559"
  },
  {
    "text": "example so he generates an AES key which is 32 bytes as we demonstrated earlier",
    "start": "2251559",
    "end": "2256660"
  },
  {
    "text": "we encrypt our data with a yes nice and fast then we take our recipients public",
    "start": "2256660",
    "end": "2262779"
  },
  {
    "text": "key and we encrypt that key that we've just generated and we send our AES",
    "start": "2262779",
    "end": "2268510"
  },
  {
    "text": "encrypted data and that encrypted AES key over to our recipients first of all",
    "start": "2268510",
    "end": "2274809"
  },
  {
    "text": "they use their private key to decrypt that accession key once they've done that if then got the raw AES keys which",
    "start": "2274809",
    "end": "2280180"
  },
  {
    "text": "maybe should get that key to the other person securely one set the cryptic that key they can then go and decrypt the AES",
    "start": "2280180",
    "end": "2286720"
  },
  {
    "text": "state that we send them and meet the message yeah so if you think about something",
    "start": "2286720",
    "end": "2292160"
  },
  {
    "text": "like TLS as an example what happens when you create a connection to a server you've got your two parties they swap",
    "start": "2292160",
    "end": "2299210"
  },
  {
    "text": "their public keys they generates a session key potentially with a yes they use RSA to swap that key",
    "start": "2299210",
    "end": "2306320"
  },
  {
    "text": "between each other and then they've got a channel or you can send encrypted data backwards and forwards fundamentally you",
    "start": "2306320",
    "end": "2311420"
  },
  {
    "text": "know it's a similar principle so if it's a think of that as deep as a packet of data that we're gonna sense for someone",
    "start": "2311420",
    "end": "2317570"
  },
  {
    "text": "so we have our RSA encrypted session key we've got our AES encrypted data and we",
    "start": "2317570",
    "end": "2324170"
  },
  {
    "text": "also had the AES initialization vector so I should have mentioned that the previous diagram let's walk it through",
    "start": "2324170",
    "end": "2329180"
  },
  {
    "text": "as an example so we've got Alice and Bob and they can have a two-way conversation with each other let's work it through so",
    "start": "2329180",
    "end": "2336530"
  },
  {
    "text": "Alice generates a key she generates an initialization vector so the ivy is 16",
    "start": "2336530",
    "end": "2342560"
  },
  {
    "text": "bytes this AES keys photos two bytes Xin crypts her message with AES then uses",
    "start": "2342560",
    "end": "2350750"
  },
  {
    "text": "Bob's public key to encrypt that AES key sends it over to Bob where he can then",
    "start": "2350750",
    "end": "2357310"
  },
  {
    "text": "start the process of reading it so what he does is he uses his private key to",
    "start": "2357310",
    "end": "2362900"
  },
  {
    "text": "recover or decrypt that AES key he then uses that decrypted AES key and his",
    "start": "2362900",
    "end": "2369470"
  },
  {
    "text": "initialization vector which he can then use with AES to decrypt the message so",
    "start": "2369470",
    "end": "2374570"
  },
  {
    "text": "the message was meet me at noon below the clock tower where a red rose in your button try make it a bit more James Bond",
    "start": "2374570",
    "end": "2381850"
  },
  {
    "text": "great so now Bob wants send a message back to Alice to confirm his a meeting",
    "start": "2381850",
    "end": "2386990"
  },
  {
    "text": "with her so he generates a new session key in this case he generates a new",
    "start": "2386990",
    "end": "2394370"
  },
  {
    "text": "initialization vector he equips his reply using those pieces of data he then",
    "start": "2394370",
    "end": "2400880"
  },
  {
    "text": "uses Alice's public key to encrypt his new AES key sends a message to Alice and",
    "start": "2400880",
    "end": "2407270"
  },
  {
    "text": "she can then start the process of reading it so she uses her private key to recover that key when she's got that",
    "start": "2407270",
    "end": "2414980"
  },
  {
    "text": "key she's ies to decrypt the message which is I will meet you I'll be wearing a blue hat and red boots",
    "start": "2414980",
    "end": "2421010"
  },
  {
    "text": "she's a height of fashion",
    "start": "2421010",
    "end": "2424510"
  },
  {
    "text": "yes so if when you send the message to the recipient they have to have the same IV so you send the IV to them because",
    "start": "2428650",
    "end": "2438739"
  },
  {
    "text": "they sent the new IV back so if you think of it as a packet of information",
    "start": "2438739",
    "end": "2443989"
  },
  {
    "text": "it's been sent between the people and raise the slider so that's what's being sent the RSA encrypted session key the",
    "start": "2443989",
    "end": "2451369"
  },
  {
    "text": "initialization vector and the encrypted data okay that's right now okay so the",
    "start": "2451369",
    "end": "2465499"
  },
  {
    "start": "2465000",
    "end": "2465000"
  },
  {
    "text": "next thing you might want to do so if we're using you know the older version of AES in dotnet you know the non GCM",
    "start": "2465499",
    "end": "2471499"
  },
  {
    "text": "version this is what we might want to do next exactly the same process generate",
    "start": "2471499",
    "end": "2477200"
  },
  {
    "text": "the session cave generate an IV encrypt them clip the data with AES encrypt the",
    "start": "2477200",
    "end": "2482239"
  },
  {
    "text": "session key with the public key now what we're gonna do is we're gonna get our cipher text we're gonna get the IFV",
    "start": "2482239",
    "end": "2487460"
  },
  {
    "text": "we're gonna combine them together and then we're gonna create a hash mac using",
    "start": "2487460",
    "end": "2492710"
  },
  {
    "text": "the high es key was the key and then we're gonna send that hash back along with the rest of the data that we sent",
    "start": "2492710",
    "end": "2498799"
  },
  {
    "text": "across the reason for that is on the other side Bob has got to recover the",
    "start": "2498799",
    "end": "2505670"
  },
  {
    "text": "AES key once he's recovered that key or decrypted the key he then has the ability to calculate the same hash Mac",
    "start": "2505670",
    "end": "2511819"
  },
  {
    "text": "that was sense he can compare them if they're the same he knows no one's tampered with the data and then he can",
    "start": "2511819",
    "end": "2518299"
  },
  {
    "text": "go and decrypt the data this gives him the concept of integrity and authentication keys in a hash Mac so not",
    "start": "2518299",
    "end": "2524660"
  },
  {
    "text": "only if we solved the problem of how do we get a symmetric key between two parties we've also guaranteed that's you",
    "start": "2524660",
    "end": "2531859"
  },
  {
    "text": "know you have to decrypt that key first to calculate the hash so you obviously the recipient needs their private key or",
    "start": "2531859",
    "end": "2537829"
  },
  {
    "text": "the correct private key and we can also tell whether that message has been tampered with or corrupted in transit so",
    "start": "2537829",
    "end": "2546019"
  },
  {
    "text": "if we look at the packet of data that we'd send so obviously we're sending the RSA encrypted session key initialization",
    "start": "2546019",
    "end": "2551749"
  },
  {
    "text": "vector the AES encrypted data and also our hash of the encrypted data in the IV the",
    "start": "2551749",
    "end": "2559290"
  },
  {
    "text": "reason we include the IV in the hash mark is because if someone messes around with the IV but wants better tell if it's changed so by including it in the",
    "start": "2559290",
    "end": "2565980"
  },
  {
    "text": "hash Mac we can tell that so if he was",
    "start": "2565980",
    "end": "2571109"
  },
  {
    "text": "using GCM mode it's slightly different because in Gallia's counter mode in AES",
    "start": "2571109",
    "end": "2576450"
  },
  {
    "text": "we don't need to calculate that hash mark afterwards it happens internally inside the algorithm for us which is",
    "start": "2576450",
    "end": "2582270"
  },
  {
    "text": "good so actually our diagram of who's using GCM may look very much like the first diagram no we encrypt some data",
    "start": "2582270",
    "end": "2589530"
  },
  {
    "text": "with an IAS key we encrypt the AES key we send it to the recipient but because IES uses a nonce instead of",
    "start": "2589530",
    "end": "2596880"
  },
  {
    "text": "an IV we store that nonce in the packets and because GCM mode returns us a tag",
    "start": "2596880",
    "end": "2602550"
  },
  {
    "text": "which is effectively a Hodge back we also store that tag and we send it to the recipient so the process is you know",
    "start": "2602550",
    "end": "2609300"
  },
  {
    "text": "it's a little bit more simple less code to write which is nice okay so we've",
    "start": "2609300",
    "end": "2616040"
  },
  {
    "text": "managed to swap our keys we've managed to add integrity and authentication into",
    "start": "2616040",
    "end": "2621480"
  },
  {
    "text": "the process so now let's add the final pillar and see what that looks like and we'll do orphaned within non-repudiation",
    "start": "2621480",
    "end": "2629240"
  },
  {
    "start": "2628000",
    "end": "2628000"
  },
  {
    "text": "okay so as an example again exactly the",
    "start": "2633079",
    "end": "2638369"
  },
  {
    "text": "same generate an Aes key in an IV encrypt our date so if those pieces of information use the recipients public",
    "start": "2638369",
    "end": "2646530"
  },
  {
    "text": "key to encrypt our AES key you know we've created we need to create a hash Mac of the ciphertext a nonce and the",
    "start": "2646530",
    "end": "2653460"
  },
  {
    "text": "tag and I'll come on to why in a moment but we need to even if we using GCM mode",
    "start": "2653460",
    "end": "2658560"
  },
  {
    "text": "we still have to create a hash back in this case I mean then use that hash Mac that we pass in to our digital signature",
    "start": "2658560",
    "end": "2665040"
  },
  {
    "text": "algorithm to create a digital signature now you might be thinking if the tag is a H Mac why do we need to generate",
    "start": "2665040",
    "end": "2670619"
  },
  {
    "text": "another H Mac that's because that tag is a different format than don't know what",
    "start": "2670619",
    "end": "2676319"
  },
  {
    "text": "for what the digital sync trial with him is expecting so if you pass that tag into it and tell it that you're doing a",
    "start": "2676319",
    "end": "2682170"
  },
  {
    "text": "sha-256 hash it's right know what to do so it's a different format so that means in this case we have to do",
    "start": "2682170",
    "end": "2689050"
  },
  {
    "text": "a scythe we have to do a hash mark anyway so that means our packet",
    "start": "2689050",
    "end": "2694630"
  },
  {
    "text": "information looks like this throughout the session key initialization vector or nonce there cryptic data we have our",
    "start": "2694630",
    "end": "2702250"
  },
  {
    "text": "hash mark and we have the digital signature so the benefit that this gives",
    "start": "2702250",
    "end": "2707650"
  },
  {
    "text": "us them so again we've got the ability to securely transfer a symmetric key",
    "start": "2707650",
    "end": "2713470"
  },
  {
    "text": "between two parties so we've solved that problem obviously we get confidentiality",
    "start": "2713470",
    "end": "2718840"
  },
  {
    "text": "to encrypt in our data and we've got with the key safety swapped between people we've got integrity and authentication",
    "start": "2718840",
    "end": "2725530"
  },
  {
    "text": "because we've got this hash Mac or tag from the encrypted data that's good what",
    "start": "2725530",
    "end": "2731260"
  },
  {
    "text": "a moment even gives you is proof that it was you that said that piece of data because you create a digital signature",
    "start": "2731260",
    "end": "2736990"
  },
  {
    "text": "of your private key when they come to when Bob comes to verify the signature",
    "start": "2736990",
    "end": "2742990"
  },
  {
    "text": "on his end he has to use the sender's public key if it returns true when he verifies you know that you knows it was",
    "start": "2742990",
    "end": "2748330"
  },
  {
    "text": "Alice it sent that message it's a very sense take you see it means you can",
    "start": "2748330",
    "end": "2754840"
  },
  {
    "text": "verify the authenticity of that message you know the original original the originator which is quite cool so near",
    "start": "2754840",
    "end": "2764020"
  },
  {
    "text": "here in the press you know you hear people talking about you know how evil end-to-end communications are",
    "start": "2764020",
    "end": "2769440"
  },
  {
    "text": "effectively what's going on behind the scenes is something very similar to this so if you look at if you download the",
    "start": "2769440",
    "end": "2775480"
  },
  {
    "text": "spec for the signal protocol obviously SiC the signal protocol is more complex in this but fundamentally is doing something very similar to this it's",
    "start": "2775480",
    "end": "2781780"
  },
  {
    "text": "using an asymmetric system for negotiating keys that could be RSA it could be elliptic curve or",
    "start": "2781780",
    "end": "2787150"
  },
  {
    "text": "diffie-hellman or n if you have a key exchange protocols but fundamentally it's using this principle of split key",
    "start": "2787150",
    "end": "2793350"
  },
  {
    "text": "you know the actual encryption if your day to itself is going to be done using a symmetric algorithm so in our case it",
    "start": "2793350",
    "end": "2799780"
  },
  {
    "text": "was a EES but it could be things like Blowfish or to fish or any of the other symmetric algorithms so hopefully what this gives",
    "start": "2799780",
    "end": "2807340"
  },
  {
    "text": "you is it gives you a bit familiarity and kind of house on these systems work I hope",
    "start": "2807340",
    "end": "2814640"
  },
  {
    "text": "yeah okay so we covered quite a lot quite quickly there so the workshop I've",
    "start": "2814640",
    "end": "2820110"
  },
  {
    "start": "2816000",
    "end": "2816000"
  },
  {
    "text": "done over the last two days we kind of went through this a lot slow with lots of code examples pros officer have tried",
    "start": "2820110",
    "end": "2825480"
  },
  {
    "text": "to jab this into an hour but we've covered random numbers so we use those for generating our encryption keys and",
    "start": "2825480",
    "end": "2832440"
  },
  {
    "text": "our IVs salts for passwords we've looked at hashing and H max so they give us our",
    "start": "2832440",
    "end": "2839580"
  },
  {
    "text": "integrity and authentication enables us to tell whether something's been tampered with",
    "start": "2839580",
    "end": "2844670"
  },
  {
    "text": "if you've ever downloaded software from some size before they sometimes give you a little bit of text underneath which",
    "start": "2844670",
    "end": "2849810"
  },
  {
    "text": "says the md5 or the sha-256 hash for that piece of software so that you can check what you downloaded matches what",
    "start": "2849810",
    "end": "2855570"
  },
  {
    "text": "was on the server we look to secure password storage look you know various",
    "start": "2855570",
    "end": "2861390"
  },
  {
    "text": "different methods of doing that plain hashing of passwords whilst it used to be sufficient is now easily a problem it",
    "start": "2861390",
    "end": "2869880"
  },
  {
    "text": "can be easily attacked secure well salted hashes of passwords is a much",
    "start": "2869880",
    "end": "2875820"
  },
  {
    "text": "better solution but with Moore's law the advent of GPU technologies increasing kind of tenfold every year you can't",
    "start": "2875820",
    "end": "2882930"
  },
  {
    "text": "guarantee how long those passwords going to be secure so we looked at a method for artificial tone artificially we",
    "start": "2882930",
    "end": "2889050"
  },
  {
    "text": "looked at a method for deliberately slowing down the hashing process so that even if you're using a powerful GPU it",
    "start": "2889050",
    "end": "2895230"
  },
  {
    "text": "limits the amount of passwords you can try and crack in one go which is very useful recovered symmetric encryption in",
    "start": "2895230",
    "end": "2902640"
  },
  {
    "text": "our case you know we look to a es where dotnet core was recently given this AES",
    "start": "2902640",
    "end": "2908130"
  },
  {
    "text": "GCM mode which is brilliant you know lots of other systems have had it for a long time you just take a Microsoft",
    "start": "2908130",
    "end": "2913740"
  },
  {
    "text": "awhile to catch up they've got their RSA we looked at as an example of asymmetric",
    "start": "2913740",
    "end": "2920280"
  },
  {
    "text": "cryptography you know mathematical process for generating prime number",
    "start": "2920280",
    "end": "2925890"
  },
  {
    "text": "based keys it's a very good transport for swapping keys between two people or two symmetric keys between two people",
    "start": "2925890",
    "end": "2931560"
  },
  {
    "text": "and then we looked at digital signatures which gives us non-repudiation so being able to prove that it was you that sent",
    "start": "2931560",
    "end": "2937950"
  },
  {
    "text": "a message for a piece of data which is a very valuable thing to be able to do to try and get trust",
    "start": "2937950",
    "end": "2944270"
  },
  {
    "text": "and we then looked at how to you know combine some of these together just to give some kind of you know examples of",
    "start": "2944270",
    "end": "2949580"
  },
  {
    "text": "how are things like TLS or enter end chat systems work so when people are",
    "start": "2949580",
    "end": "2954920"
  },
  {
    "text": "talking about end-to-end encryption in the press about how evil it is and governments want to get rid of it it's this so that it's this sort of thing",
    "start": "2954920",
    "end": "2960410"
  },
  {
    "text": "that they're trying to stop ok so what next",
    "start": "2960410",
    "end": "2965860"
  },
  {
    "text": "some pretty good books here that recommend if you're interested in going",
    "start": "2965860",
    "end": "2971510"
  },
  {
    "text": "a bit deeper on the subjects the code book by Simon Singh is kind of like a history book reads a bit like a novel",
    "start": "2971510",
    "end": "2976700"
  },
  {
    "text": "it's really really good starts on at the ancient times of when and they used to get soldiers shave their heads off write",
    "start": "2976700",
    "end": "2982760"
  },
  {
    "text": "messages on their heads wait for their hair to grow back and then send them send them on their way brilliant genius and it goes right away",
    "start": "2982760",
    "end": "2990620"
  },
  {
    "text": "through up to kind of you know reasonably modern digital cryptography standards so it's just a really fun book",
    "start": "2990620",
    "end": "2996080"
  },
  {
    "text": "to read everyday cryptography by Keith Martin he's a much more mathematically",
    "start": "2996080",
    "end": "3001960"
  },
  {
    "text": "dense book it talks about how a lot of the algorithms work internally so if you're genuinely interested in that sort",
    "start": "3001960",
    "end": "3008020"
  },
  {
    "text": "of thing that's a good book but then it talks about how they used in practical uses so things like how a cash machine",
    "start": "3008020",
    "end": "3016210"
  },
  {
    "text": "on ATM the go shades between the bank how TLS works how encrypted streams on",
    "start": "3016210",
    "end": "3023500"
  },
  {
    "text": "netflix things like that work the final book applied cryptography is the book",
    "start": "3023500",
    "end": "3029980"
  },
  {
    "text": "that they tried to ban in the 90s it literally was banned at one point it's",
    "start": "3029980",
    "end": "3035950"
  },
  {
    "text": "it doesn't cover a yes because it came out before IES was around but if you're one of really really deep from a",
    "start": "3035950",
    "end": "3041170"
  },
  {
    "text": "practical guide on how a lot the algorithms work that's the book for you I've tried to read it and gave up his it",
    "start": "3041170",
    "end": "3048640"
  },
  {
    "text": "beat me it was too mathematical hey if you're on Pluralsight I've got a few",
    "start": "3048640",
    "end": "3054460"
  },
  {
    "text": "courses here that you might find interesting so practical cryptography Nets kind of talks about what we've done today but in more detail I'm looking to",
    "start": "3054460",
    "end": "3062800"
  },
  {
    "text": "update the course soon so all of the source code that come to that book he's kind of dotnet framework based but",
    "start": "3062800",
    "end": "3068140"
  },
  {
    "text": "pretty much everything in there will run on donate colleges to project falls through different formats I'm hope",
    "start": "3068140",
    "end": "3073180"
  },
  {
    "text": "you're gonna try and get that course updated this year the one behind play-by-play enterprise data encryption with as you revealed is",
    "start": "3073180",
    "end": "3080110"
  },
  {
    "text": "just me talking about a Shiki vault and how that works it's a good way of",
    "start": "3080110",
    "end": "3085890"
  },
  {
    "text": "protecting encryption keys online in Azure and if you're interested in kind",
    "start": "3085890",
    "end": "3093790"
  },
  {
    "text": "of how hashing can be useful as a tool in cryptography then I've got a course called blockchain principles and",
    "start": "3093790",
    "end": "3099130"
  },
  {
    "text": "practices where we talk about the theory of block chains kind of how they are how they work what they could be useful for",
    "start": "3099130",
    "end": "3105520"
  },
  {
    "text": "where they're not useful and throughout the course we actually build up an implementation from scratch of a kind of",
    "start": "3105520",
    "end": "3111460"
  },
  {
    "text": "a working blockchain you kind of just you know teaches you the principles which you might find fun so with that",
    "start": "3111460",
    "end": "3119710"
  },
  {
    "text": "thank you very much we've got one more",
    "start": "3119710",
    "end": "3126250"
  },
  {
    "text": "talk left so try and stay awake for so good luck",
    "start": "3126250",
    "end": "3131760"
  }
]