[
  {
    "start": "0",
    "end": "103000"
  },
  {
    "text": "um cool yeah welcome welcome to this session about rethinking reactive architectures um",
    "start": "8000",
    "end": "13040"
  },
  {
    "text": "happy to be here on the last day of this conference i'm happy to be here even if it's in a hybrid mode",
    "start": "13040",
    "end": "19600"
  },
  {
    "text": "again in in front of real people not in front of a zoom call that's fantastic",
    "start": "19600",
    "end": "24960"
  },
  {
    "text": "and yeah greetings also of course to the people who join online yeah we're thinking reactive",
    "start": "24960",
    "end": "30160"
  },
  {
    "text": "architectures first things first who am i i'm david lightning i'm working as a coding architect in vienna for an",
    "start": "30160",
    "end": "35440"
  },
  {
    "text": "australian company called square resolutions so we do a lot of you know work together with big financial",
    "start": "35440",
    "end": "41120"
  },
  {
    "text": "institutes big insurance companies also a lot of startups and scale ups fintechs",
    "start": "41120",
    "end": "46719"
  },
  {
    "text": "proptex medtechs you know all this kind of stuff and we do that a lot what i will talk about today and that's i think",
    "start": "46719",
    "end": "54480"
  },
  {
    "text": "the advantage for you i'm i don't want to sell you a product i don't want to sell you a training i'm just just here",
    "start": "54480",
    "end": "60079"
  },
  {
    "text": "to talk a little bit about reactive architectures because the the guys from ndc asked me if i want to talk about it",
    "start": "60079",
    "end": "65439"
  },
  {
    "text": "i said yeah ozil is a great city let's come here let's give you a little bit of insight what we experienced with reactive",
    "start": "65439",
    "end": "71760"
  },
  {
    "text": "architecture so that you maybe don't make the same mistakes as we did um i'm a traditional guy so if you have any",
    "start": "71760",
    "end": "77520"
  },
  {
    "text": "questions feel free to send me an email i'm also on on twitter i'm not not really there i just have an account",
    "start": "77520",
    "end": "83600"
  },
  {
    "text": "there but usually i check my pm so if anything is unclear afterwards please free to reach out there and if you want",
    "start": "83600",
    "end": "89360"
  },
  {
    "text": "to see the mountains i'm going up and down you can also follow me on instagram um there is basically my personal life",
    "start": "89360",
    "end": "95600"
  },
  {
    "text": "happening but let's come to the stuff that really matters and the stuff that really matters is",
    "start": "95600",
    "end": "101119"
  },
  {
    "text": "obviously reactivity right and we see reactivity as a huge buzzword",
    "start": "101119",
    "end": "106960"
  },
  {
    "start": "103000",
    "end": "305000"
  },
  {
    "text": "these days right we see it in many different aspects of our industry we have frameworks like like react right",
    "start": "106960",
    "end": "112720"
  },
  {
    "text": "which obviously tend to be reactive right we have spring reactor which is kind of a reactive implementation the",
    "start": "112720",
    "end": "118479"
  },
  {
    "text": "java spring ecosystem we have reactive extension which originated actually from the net",
    "start": "118479",
    "end": "124000"
  },
  {
    "text": "community and which are broadly available in nearly all languages so there's much more on this on this",
    "start": "124000",
    "end": "129679"
  },
  {
    "text": "reactivity on reactive programming and so the question is what what it is all about",
    "start": "129679",
    "end": "135520"
  },
  {
    "text": "and the definition of reactivity is very important for this talk if we talk about reactive architecture but on the other",
    "start": "135520",
    "end": "142560"
  },
  {
    "text": "hand is also very simple it's basically about programming and designing upon asynchronous data streams that that's",
    "start": "142560",
    "end": "149040"
  },
  {
    "text": "what it about right so we we speak about streams right finally",
    "start": "149040",
    "end": "154239"
  },
  {
    "text": "everybody loves to speak about streams and this is the new favorite topic of everyone we need to stream um we need to",
    "start": "154239",
    "end": "161120"
  },
  {
    "text": "have streams within our architectures and i still have the feeling and in many situations people are overwhelmed by",
    "start": "161120",
    "end": "166959"
  },
  {
    "text": "this term right because architects start to talk about streams and sometimes people don't fully understand and i",
    "start": "166959",
    "end": "173599"
  },
  {
    "text": "think it's important to to kind of the illusion this magic behind streams because the stream is is not a very high",
    "start": "173599",
    "end": "180080"
  },
  {
    "text": "sophisticated concept it's just a data container basically and if you think about data containers in modern",
    "start": "180080",
    "end": "186879"
  },
  {
    "text": "programming languages then we usually have them in two axis right we have them on the axis of time and we have them on",
    "start": "186879",
    "end": "193680"
  },
  {
    "text": "the axis of space okay sounds high sophisticated isn't yeah give give me a second and you will",
    "start": "193680",
    "end": "200000"
  },
  {
    "text": "understand why this explains um streams very well so in single time or in",
    "start": "200000",
    "end": "205360"
  },
  {
    "text": "singular space and in synchronous time we have something which we tend to call a value right and the value has a get in the center",
    "start": "205360",
    "end": "211840"
  },
  {
    "text": "okay that that's clear every programming language every modern programming language these days has a concept for storing a value",
    "start": "211840",
    "end": "218080"
  },
  {
    "text": "if we go now to plural space right we have something which we tend to call a collection and the collection tends to",
    "start": "218080",
    "end": "223599"
  },
  {
    "text": "have an iterator and kind of a generator and now it's getting a little bit more interesting because if we move from",
    "start": "223599",
    "end": "230400"
  },
  {
    "text": "synchronous time to asynchronous time we tend to have something which we tend",
    "start": "230400",
    "end": "235840"
  },
  {
    "text": "to call promise right and and many modern programming languages these days",
    "start": "235840",
    "end": "241040"
  },
  {
    "text": "come with out-of-the-box support for promises right and those promises then usually have a deferred and usually have",
    "start": "241040",
    "end": "247040"
  },
  {
    "text": "a resolver another question of course is what is on the left top side right well it's",
    "start": "247040",
    "end": "253519"
  },
  {
    "text": "obvious that's where the stream lives right and the stream is basically you can think of it like a collection of promises right it's something in plural",
    "start": "253519",
    "end": "260799"
  },
  {
    "text": "space and asynchronous time and the stream that basically has a subscriber and an emitter and that's a",
    "start": "260799",
    "end": "266800"
  },
  {
    "text": "stream right it's it's just it's just another data structure the point is just that many languages many frameworks",
    "start": "266800",
    "end": "273680"
  },
  {
    "text": "didn't treat streams as first-class citizens so there's not a native implementation for this data structure",
    "start": "273680",
    "end": "280479"
  },
  {
    "text": "in many programming languages but in a nutshell it's it's it's clear that it must exist if you take a look at this",
    "start": "280479",
    "end": "286639"
  },
  {
    "text": "metrics and that's for example where active extensions jump in right which which i mentioned earlier which is",
    "start": "286639",
    "end": "292240"
  },
  {
    "text": "basically providing stream implementation and for different programming languages",
    "start": "292240",
    "end": "297360"
  },
  {
    "text": "okay so this was a short intro to stream so that i can be sure that everybody knows about streams",
    "start": "297360",
    "end": "303520"
  },
  {
    "text": "what has this to do with reactivity well as i mentioned before reactive programming is programming with or",
    "start": "303520",
    "end": "309199"
  },
  {
    "text": "deciding upon asynchronous data streams and i always bring a very simple example to make this point clear what reactivity",
    "start": "309199",
    "end": "316080"
  },
  {
    "text": "really means and i usually show this with codes because most of us i guess",
    "start": "316080",
    "end": "321600"
  },
  {
    "text": "are still engineers or had a background in engineering so most of most of us would understand this very simply i hope",
    "start": "321600",
    "end": "328720"
  },
  {
    "text": "and if we take a look at a very simple code snippet like this one then we have a variable which is called counter and we",
    "start": "328720",
    "end": "335520"
  },
  {
    "text": "have a variable which is called doubled and doubled is basically counter multiplied by two",
    "start": "335520",
    "end": "341360"
  },
  {
    "text": "so it's four right that's that's that's not that's not hard to compile and to run in our heads and this test of course",
    "start": "341360",
    "end": "348000"
  },
  {
    "text": "would would succeed but what happens now if we change if we change the value of counter right if we",
    "start": "348000",
    "end": "354720"
  },
  {
    "text": "update it if we set counter to three well we we assume that doubled is",
    "start": "354720",
    "end": "360639"
  },
  {
    "text": "counter multiplied by two so we could think that double should be six of course it isn't",
    "start": "360639",
    "end": "366319"
  },
  {
    "text": "we all know that it isn't right because if we want to have double to be six we need to reassign it and we need to",
    "start": "366319",
    "end": "371600"
  },
  {
    "text": "recalculate it and we again need to assign doubles to counter multiplied by two",
    "start": "371600",
    "end": "376800"
  },
  {
    "text": "and then it will work right and that's basically the main criticism on the of the reactive community on on",
    "start": "376800",
    "end": "383680"
  },
  {
    "text": "the way how we develop or how we design things right because this relationship",
    "start": "383680",
    "end": "389199"
  },
  {
    "text": "between counter and double this very implicit here this is an idea that just exists in our heads we we need to take",
    "start": "389199",
    "end": "396160"
  },
  {
    "text": "care of this we need to know about this but it shouldn't be like this it should be very explicit right it should be part",
    "start": "396160",
    "end": "402479"
  },
  {
    "text": "of the language and it should exist over all time actually right so we want to basically bind counter and doubled and",
    "start": "402479",
    "end": "410400"
  },
  {
    "text": "one guy who realized this very well in the blog post is paul stovall he wrote a great article on a very similar subject",
    "start": "410400",
    "end": "417520"
  },
  {
    "text": "about reactive programming and he introduced something which he tends to call the destiny operator and the destiny operator is the thing to bind in",
    "start": "417520",
    "end": "425199"
  },
  {
    "text": "our case counter and doubled and how does this look like well just you know it's just a simple concept",
    "start": "425199",
    "end": "431840"
  },
  {
    "text": "we say okay we introduce here now the destiny operator and that's that's him right it's just a little bit a little",
    "start": "431840",
    "end": "438639"
  },
  {
    "text": "bit a different assignment and when we say we we make a destiny operator basically whenever we change counter",
    "start": "438639",
    "end": "446000"
  },
  {
    "text": "this will also update our doubled value right and with this destiny probably basically",
    "start": "446000",
    "end": "452319"
  },
  {
    "text": "project the counter value into our doubled value and this would then",
    "start": "452319",
    "end": "457520"
  },
  {
    "text": "probably work of course it's a theoretical concept and in reality if you want to achieve this this is always",
    "start": "457520",
    "end": "463919"
  },
  {
    "text": "working with streams so we always get kind of this binding by utilizing streams and in obsidor this would look",
    "start": "463919",
    "end": "470319"
  },
  {
    "text": "like this we have a stream with the initial value of two right so our counter stream has a value of two",
    "start": "470319",
    "end": "476240"
  },
  {
    "text": "when we have another stream then we basically take the value of counter and",
    "start": "476240",
    "end": "481440"
  },
  {
    "text": "map it and multiply it by two right so we have a second stream which is then called doubled and this is a value of",
    "start": "481440",
    "end": "487440"
  },
  {
    "text": "four so and that's important now we project the data from our counter stream into our",
    "start": "487440",
    "end": "493360"
  },
  {
    "text": "double stream that's what we basically do and we'll come back to this later and then we can update our stream of",
    "start": "493360",
    "end": "499199"
  },
  {
    "text": "course and we do this by emitting a new value so we go to counter emit value three right this leads to effect that",
    "start": "499199",
    "end": "504800"
  },
  {
    "text": "counter has a new value has an additional value in its stream and this will automatically of course also update",
    "start": "504800",
    "end": "510560"
  },
  {
    "text": "our double stream and then we can say you know doubled value is six right",
    "start": "510560",
    "end": "516159"
  },
  {
    "text": "and that's reactive programming in a nutshell and this was all solder code but in reality it would look very similar right if you for example take",
    "start": "516159",
    "end": "522800"
  },
  {
    "text": "reactive extensions and if you would implement the same thing with reactive extensions we would say okay we have a",
    "start": "522800",
    "end": "528320"
  },
  {
    "text": "behavior subject behavior subject is basically just a stream with an initial value of two right and then we can say",
    "start": "528320",
    "end": "534080"
  },
  {
    "text": "you know we derive from this stream another stream and we take the counter",
    "start": "534080",
    "end": "539279"
  },
  {
    "text": "stream map it multiply it by two and whenever we change the counter we just emit a new value",
    "start": "539279",
    "end": "545360"
  },
  {
    "text": "and doubled value would then be six this this test would work so it would really be green and more modern frameworks like",
    "start": "545360",
    "end": "552240"
  },
  {
    "text": "for example svelte which is which popular these days in the in the web",
    "start": "552240",
    "end": "557360"
  },
  {
    "text": "development they they even took this concept of the destiny operator further and they really",
    "start": "557360",
    "end": "563440"
  },
  {
    "text": "implemented kind of a destiny operator what they do is they say you know we have a variable counter which is two",
    "start": "563440",
    "end": "569600"
  },
  {
    "text": "and we have a variable doubled which is counter multiplied by two and you see this this tiny little",
    "start": "569600",
    "end": "577440"
  },
  {
    "text": "whoa you see this tiny little prefix here this dollar sign and this dollar sign basically tells us",
    "start": "577440",
    "end": "584640"
  },
  {
    "text": "that this is reactive value this will change whenever something that affects this value changes so when we",
    "start": "584640",
    "end": "591760"
  },
  {
    "text": "then assign three to counter the search to double the six will still be true",
    "start": "591760",
    "end": "596959"
  },
  {
    "text": "and again this will work and basically that's reactive programming that that's what you",
    "start": "596959",
    "end": "602320"
  },
  {
    "text": "need to understand about this right and now we basically come to the to the topic of this talk because these",
    "start": "602320",
    "end": "609120"
  },
  {
    "text": "concepts and that's why i'm so eager on people to understand these concepts these concepts of reactive programming",
    "start": "609120",
    "end": "615920"
  },
  {
    "text": "can also play be applied on reactive architectures or architectures in general as well",
    "start": "615920",
    "end": "622240"
  },
  {
    "text": "okay let's get this started so as i mentioned i work a lot in in",
    "start": "622240",
    "end": "627680"
  },
  {
    "text": "financial institutes and we of course do a lot of distributed systems and stuff like this so i took a example use case",
    "start": "627680",
    "end": "633040"
  },
  {
    "text": "from from from project which kind of looked similar which i've worked for a while ago and let's assume we have a few",
    "start": "633040",
    "end": "639440"
  },
  {
    "text": "services right we have a user service and then we have an account service so basically the user is the client the",
    "start": "639440",
    "end": "644959"
  },
  {
    "text": "customer of a bank and the user can have multiple accounts and this accounts that basically can trigger transactions and",
    "start": "644959",
    "end": "651200"
  },
  {
    "text": "transactions are usually stored in something which tend to call ledger right so very very simple example and",
    "start": "651200",
    "end": "656800"
  },
  {
    "text": "then we have a web banking application okay and from this web banking application we can tweak a new",
    "start": "656800",
    "end": "661920"
  },
  {
    "text": "payment and i can say i want to transfer 20 euros from my account to lisa's",
    "start": "661920",
    "end": "666959"
  },
  {
    "text": "account and if i click on perform the payment it will go to the user account and will say hey transfer the money from",
    "start": "666959",
    "end": "673519"
  },
  {
    "text": "one user to another this will basically trigger payment against the account service and then actually this will trigger",
    "start": "673519",
    "end": "680560"
  },
  {
    "text": "an transaction on the ledger and if all this works fine we get back all the responses everything good everything",
    "start": "680560",
    "end": "686800"
  },
  {
    "text": "great the payment was successfully executed it never works like this unfortunately",
    "start": "686800",
    "end": "693040"
  },
  {
    "text": "right that's the happy happy happy path right in most situations um we have with a different scenario we trigger a new",
    "start": "693040",
    "end": "700000"
  },
  {
    "text": "payment we create um this payment and basically we create transactions and they have",
    "start": "700000",
    "end": "705440"
  },
  {
    "text": "ledger and most people who ever work with a later know that ledgers are yeah they've kind",
    "start": "705440",
    "end": "711120"
  },
  {
    "text": "of special systems right and at some point in time they're maybe kind of lazy they have high latency they don't want",
    "start": "711120",
    "end": "716240"
  },
  {
    "text": "to answer you whatever right and this ultimately leads to this loading right to this kind of loading stuff all the",
    "start": "716240",
    "end": "722800"
  },
  {
    "text": "time and if you've ever been sitting in front of your pc and did a payment",
    "start": "722800",
    "end": "728480"
  },
  {
    "text": "and you were waiting for this payment to be executed and you're stuck with a loading screen this makes you really",
    "start": "728480",
    "end": "733920"
  },
  {
    "text": "nervous right this is just a bad user experience and this can take some time so let me",
    "start": "733920",
    "end": "739680"
  },
  {
    "text": "quickly drink something in the meantime and",
    "start": "739680",
    "end": "745399"
  },
  {
    "text": "once once the ledger is maybe back yeah it could be back in the best case in the worst case it runs in the timeout or",
    "start": "745519",
    "end": "751279"
  },
  {
    "text": "whatever once the ledger could be back we of course get back some kind of this information and the payment was executed",
    "start": "751279",
    "end": "756800"
  },
  {
    "text": "successfully and even if this works it's still it's still very bad right but in many situations",
    "start": "756800",
    "end": "762399"
  },
  {
    "text": "in many situations it doesn't really work and that's why we try to start to solve this problem with retries we know",
    "start": "762399",
    "end": "769360"
  },
  {
    "text": "all the things right with retries with timeouts with kind of circuit breakers",
    "start": "769360",
    "end": "774800"
  },
  {
    "text": "and that's kind of sophisticated because we need to start to synchronize all this stuff right because if the ledger",
    "start": "774800",
    "end": "780720"
  },
  {
    "text": "engineer says okay our timeout is after one minute right and if the account",
    "start": "780720",
    "end": "785839"
  },
  {
    "text": "engineer says you know we retry every five seconds if lazy later doesn't answer right then we run into this",
    "start": "785839",
    "end": "792720"
  },
  {
    "text": "problem that you basically did was your own system right and this yeah you don't want to be waked up in the middle of the",
    "start": "792720",
    "end": "798880"
  },
  {
    "text": "night by a call um which which tells you hey our system is ddos and then you basically find out",
    "start": "798880",
    "end": "804880"
  },
  {
    "text": "um that it's your own services because you didn't synchronize with retries and timers and all this stuff so",
    "start": "804880",
    "end": "810480"
  },
  {
    "text": "very complicated it never really worked for us it's just just a pain in the ass to be honest and that's kind of the",
    "start": "810480",
    "end": "816720"
  },
  {
    "text": "first um generation of microservices i would say this this heavily synchronously integrated microservices",
    "start": "816720",
    "end": "822959"
  },
  {
    "text": "and we find out that it doesn't work right and that's why we started to take a look at this example and realized we",
    "start": "822959",
    "end": "828880"
  },
  {
    "text": "need to integrate this differently right and this is when we basically didn't talk directly from the account to the",
    "start": "828880",
    "end": "834639"
  },
  {
    "text": "ledger but introduced a queue in between so we said okay you know here's the queue now and whenever a payment is",
    "start": "834639",
    "end": "840399"
  },
  {
    "text": "triggered we take this payment and basically forward it to the queue and when it's stored in the queue we're",
    "start": "840399",
    "end": "846240"
  },
  {
    "text": "basically done because the queue guarantees is that at some point in time when the ledger is ready it will start",
    "start": "846240",
    "end": "851920"
  },
  {
    "text": "to process it and that's i think that's common sense these days but it's important to understand that here",
    "start": "851920",
    "end": "857199"
  },
  {
    "text": "reverting now changed right we didn't execute the payment we accepted the",
    "start": "857199",
    "end": "862399"
  },
  {
    "text": "payment so in terms of http codes we switched from 201 to 202 right so we we",
    "start": "862399",
    "end": "868800"
  },
  {
    "text": "told the customer okay we accept that you payment we will work on it but yeah come back later and check if it's already done and once the ledger is then",
    "start": "868800",
    "end": "875920"
  },
  {
    "text": "available he will pick up the message and we will execute the payment of course and this of course already helps",
    "start": "875920",
    "end": "882160"
  },
  {
    "text": "yeah this makes the system more resilient um and and and helps us in decoupling from from high latency",
    "start": "882160",
    "end": "888160"
  },
  {
    "text": "services and you know the rule of of bottlenecks is if you use isolate one",
    "start": "888160",
    "end": "893440"
  },
  {
    "text": "bottleneck you will spot the next one right so maybe we spot okay there's an issue between user and account",
    "start": "893440",
    "end": "899600"
  },
  {
    "text": "communication and if you spot this bottleneck and solve it you find another bottleneck right and ultimately there's",
    "start": "899600",
    "end": "905360"
  },
  {
    "text": "letters then unto this effect that we kind of built heavily asynchronously integrated services and this were the",
    "start": "905360",
    "end": "911279"
  },
  {
    "text": "big times of tools like rabbit and queue and active mq and all this stuff right and that's kind of the second generation",
    "start": "911279",
    "end": "917040"
  },
  {
    "text": "of asynchronously integrated microservices and as i mentioned it solves quite a couple of problems um",
    "start": "917040",
    "end": "923279"
  },
  {
    "text": "which which we had before in only synchronously integrated services but there's big elephant in this room",
    "start": "923279",
    "end": "929680"
  },
  {
    "text": "here right there's big problem there's a big downside of this general design",
    "start": "929680",
    "end": "935839"
  },
  {
    "text": "and you will realize this problem when you talk to your product owner when you talk to your po right because your po",
    "start": "935839",
    "end": "941600"
  },
  {
    "text": "will tell you you know what it's important that as a customer i want a transaction to be booked by the ledger",
    "start": "941600",
    "end": "948880"
  },
  {
    "text": "this is what no po will ever tell you right as a customer you don't care where transaction is booked right you don't",
    "start": "948880",
    "end": "955440"
  },
  {
    "text": "care if it's booked in the ledger or if it's booked somewhere else right and your po will also not say you know as a",
    "start": "955440",
    "end": "960959"
  },
  {
    "text": "customer i want my account service to update my balance you don't care where this is happening",
    "start": "960959",
    "end": "966079"
  },
  {
    "text": "as a customer you just want to have a correct balance at the end of the day what a po would probably tell you is",
    "start": "966079",
    "end": "972639"
  },
  {
    "text": "that as a customer i want to transfer money to someone else and then you say okay that makes sense",
    "start": "972639",
    "end": "978720"
  },
  {
    "text": "that's kind of a yeah we could probably do this is bang yeah it could make sense to implement this",
    "start": "978720",
    "end": "984480"
  },
  {
    "text": "feature and then you start to realize okay i will i will try to understand how we do this in our implementation and",
    "start": "984480",
    "end": "990959"
  },
  {
    "text": "then you need to go to the user team to the user service team and say hey you know we have this new crazy requirement",
    "start": "990959",
    "end": "996800"
  },
  {
    "text": "to trigger payment can you please extend your api and points can you take this payment and then forward it to the",
    "start": "996800",
    "end": "1002720"
  },
  {
    "text": "account service to the guys from the account service and i will talk to them and they will tell them hey please can you extend your api we need",
    "start": "1002720",
    "end": "1009360"
  },
  {
    "text": "the availability to create um kind of payments and the the user service will",
    "start": "1009360",
    "end": "1014800"
  },
  {
    "text": "trigger you and and you need to then take this request and forward it to the ledger and at some point in time the",
    "start": "1014800",
    "end": "1019920"
  },
  {
    "text": "ledger will maybe send you back a transaction talk to the ledger and define the swagger apis and all this stuff and then you need to go to the",
    "start": "1019920",
    "end": "1024959"
  },
  {
    "text": "ledger team and say hey you know there's this new user story where we need to implement this transaction on the ledger side can",
    "start": "1024959",
    "end": "1031038"
  },
  {
    "text": "you do this and you know you get called by the account and the account got called by the user and you just",
    "start": "1031039",
    "end": "1036240"
  },
  {
    "text": "okay this doesn't really work this doesn't make as fast this doesn't really make us hr and this doesn't allow us to",
    "start": "1036240",
    "end": "1042880"
  },
  {
    "text": "deliver fast user value or customer value and that's what we tend to see",
    "start": "1042880",
    "end": "1048079"
  },
  {
    "text": "very often still these days this entity service anti-pattern right and that's a big problem in micro service",
    "start": "1048079",
    "end": "1053679"
  },
  {
    "text": "architecture is that people take you know the entities from the database and say okay we have a user we",
    "start": "1053679",
    "end": "1058720"
  },
  {
    "text": "have a bank account we have transactions so build those services around it but that's not what we really want to do",
    "start": "1058720",
    "end": "1065200"
  },
  {
    "text": "right what we want to do is we want to create services along customer journeys right and i had the pleasure to talk on",
    "start": "1065200",
    "end": "1071120"
  },
  {
    "text": "wednesday to to to a old friend of mine i would say i met him with a couple of conferences already um",
    "start": "1071120",
    "end": "1077840"
  },
  {
    "text": "trot he had a had a great talk i think he also yesterday and he showed me a very interesting paper and this paper is",
    "start": "1077840",
    "end": "1084000"
  },
  {
    "text": "interesting because it's from 1972 and he talks about um the the the criteria",
    "start": "1084000",
    "end": "1089679"
  },
  {
    "text": "how we should modularize um systems right or decompose systems and it's from",
    "start": "1089679",
    "end": "1094960"
  },
  {
    "text": "from 1972 from from partners and he already stated in this paper from 1972",
    "start": "1094960",
    "end": "1102320"
  },
  {
    "text": "that we shouldn't structure our applications based on process steps but we should structure them based on main",
    "start": "1102320",
    "end": "1108799"
  },
  {
    "text": "trend flows right so it took us half a decade to re-understand this in microservice",
    "start": "1108799",
    "end": "1114960"
  },
  {
    "text": "architectures again but yeah finally we are there so yeah better better late than never but that",
    "start": "1114960",
    "end": "1121120"
  },
  {
    "text": "that's that's the idea right so we want to create services along customer journeys",
    "start": "1121120",
    "end": "1126400"
  },
  {
    "text": "and when you get this requirement as engineers you know engineers are clever clever guys right that's why they're",
    "start": "1126400",
    "end": "1131840"
  },
  {
    "text": "engineers and what we do then is we say okay yeah we do not customer journeys but we still you know we need this",
    "start": "1131840",
    "end": "1137200"
  },
  {
    "text": "entity data so we basically often just rename this domain services and in front of those domain services we build our",
    "start": "1137200",
    "end": "1144240"
  },
  {
    "text": "beautiful customer journeys right so there is no problem in software engineering which you cannot solve in an additional layer",
    "start": "1144240",
    "end": "1150880"
  },
  {
    "text": "and that's also true here so this payment service then we usually would call the user service would call the",
    "start": "1150880",
    "end": "1156000"
  },
  {
    "text": "account service with co trigger transaction the ledger service and the web application web banking application",
    "start": "1156000",
    "end": "1161840"
  },
  {
    "text": "ultimately would call this one and then you have a team which is taking care of this customer journey service",
    "start": "1161840",
    "end": "1167520"
  },
  {
    "text": "and we see all these dependencies right we have kind of this upstream um dependency that leads to the ripple",
    "start": "1167520",
    "end": "1173760"
  },
  {
    "text": "effect so whenever for example the accounting service is down right it will directly impact our payment service or",
    "start": "1173760",
    "end": "1179440"
  },
  {
    "text": "when the ledger service is down it will directly impact our payment service or if the user service is done it will directly impact our payment service so",
    "start": "1179440",
    "end": "1185520"
  },
  {
    "text": "it's not fun to work in the payment service team right and if we go back to our po and say yeah no",
    "start": "1185520",
    "end": "1191120"
  },
  {
    "text": "we reshuffle our architecture we now work with customer journalists can you tell me again what you needed ah okay it was about this this this this payments",
    "start": "1191120",
    "end": "1198240"
  },
  {
    "text": "this transfer of money well let me think okay i need to go to payments team i need to go use it okay",
    "start": "1198240",
    "end": "1203280"
  },
  {
    "text": "didn't really improve the situation right i need to go to four teams now instead of three and even worse many",
    "start": "1203280",
    "end": "1208640"
  },
  {
    "text": "many projects i've been in started to utilize the back and forth front and back and which is a very great pattern",
    "start": "1208640",
    "end": "1214880"
  },
  {
    "text": "for specific use cases to implement the customer journeys right so we have the customer journey of",
    "start": "1214880",
    "end": "1220400"
  },
  {
    "text": "payment and in the web backend for front-end right and then we have more back-end for front-ends for example a",
    "start": "1220400",
    "end": "1226080"
  },
  {
    "text": "mobile backend for front-end for mobile clients right and we then implement their the payment",
    "start": "1226080",
    "end": "1231679"
  },
  {
    "text": "flow as well and this leads to a lot of duplication right of this payment logic and that's actually what we don't want",
    "start": "1231679",
    "end": "1238000"
  },
  {
    "text": "to have to duplicate business logic and then ultimately this is owned i guess by a different team usually the team that",
    "start": "1238000",
    "end": "1244080"
  },
  {
    "text": "also owns the the mobile applications and then basically all even gets worse",
    "start": "1244080",
    "end": "1249120"
  },
  {
    "text": "right you need to go to five teams now and and you get the point right so especially that's why i brought this on",
    "start": "1249120",
    "end": "1254960"
  },
  {
    "text": "the slides because i see this often this misusage of of doing this kind of customer journeys in our back in for",
    "start": "1254960",
    "end": "1261039"
  },
  {
    "text": "frontlines that's not the idea of back end for frontends that's not what sam newman defines in this pattern right so",
    "start": "1261039",
    "end": "1267520"
  },
  {
    "text": "back and for frontlines are not about domain logic right they are just about aggregating together data and bringing",
    "start": "1267520",
    "end": "1274400"
  },
  {
    "start": "1270000",
    "end": "1447000"
  },
  {
    "text": "it into shape how we expect it on the mobile client mainly to avoid over-fetching and mainly to avoid over-requesting but more about defining",
    "start": "1274400",
    "end": "1281919"
  },
  {
    "text": "customer journeys there okay but yeah let's get back to the problem of customer journeys right so this was the",
    "start": "1281919",
    "end": "1287679"
  },
  {
    "text": "issue well um and if we have now multiple customer journals let's say we have another customer attorney which",
    "start": "1287679",
    "end": "1293679"
  },
  {
    "text": "shows us our current balance and shows our latest transactions then this customer journey obviously also has",
    "start": "1293679",
    "end": "1298880"
  },
  {
    "text": "dependencies to a ledger to get on the latest transaction and maybe also has a dependency to account and this then on",
    "start": "1298880",
    "end": "1304720"
  },
  {
    "text": "the long term leads to a lot of resilience issues right because if account is down",
    "start": "1304720",
    "end": "1310000"
  },
  {
    "text": "and if we cannot access the account data this will have a direct impact on our balance and our payments customer",
    "start": "1310000",
    "end": "1315200"
  },
  {
    "text": "journey and there's a big underlying problem behind this we kind of all aware a little bit of this i have the feeling",
    "start": "1315200",
    "end": "1321919"
  },
  {
    "text": "and if i talk to people they fully understand this but the underlying problem is what i tend to call this",
    "start": "1321919",
    "end": "1327120"
  },
  {
    "text": "mismatch of customer journeys and entity data right so there seems to be kind of a mismatch and if we think about entity",
    "start": "1327120",
    "end": "1334559"
  },
  {
    "text": "data each system has entity data we cannot really avoid to have this right so we have for example users we have",
    "start": "1334559",
    "end": "1340400"
  },
  {
    "text": "accounts we have transactions and on the other hand we have these customer journeys right we have payment",
    "start": "1340400",
    "end": "1346400"
  },
  {
    "text": "we have non-boarding we have fraud detection stuff like this and the interesting part is now this",
    "start": "1346400",
    "end": "1352240"
  },
  {
    "text": "relationship between customer charges entities because it turns out for example that payments would use a would need a user would need an account would",
    "start": "1352240",
    "end": "1358960"
  },
  {
    "text": "need a transaction right and onboarding would again need a user and would again need accounts and fraud",
    "start": "1358960",
    "end": "1365039"
  },
  {
    "text": "detection probably only needs accounts and transactions and we see this is not a one-to-one relationship or want-to-end relationship",
    "start": "1365039",
    "end": "1372240"
  },
  {
    "text": "this is an end-to-end relationship and this turns out to make things very hard",
    "start": "1372240",
    "end": "1377280"
  },
  {
    "text": "because if we then design our system like we did before then we end up ultimately always in this kind of",
    "start": "1377280",
    "end": "1383520"
  },
  {
    "text": "distributed monolith um which which makes everything really hard and yeah it doesn't really bring that much value",
    "start": "1383520",
    "end": "1390080"
  },
  {
    "text": "so how could we solve this issue well we could easily say yeah that let's get rid of the entity services or the domain",
    "start": "1390080",
    "end": "1395679"
  },
  {
    "text": "services let's move the entities into the customer journeys right so on a theoretical level could look like this",
    "start": "1395679",
    "end": "1402080"
  },
  {
    "text": "the onboarding um service now has user accounts the payment services user accounts and payments and so on and so",
    "start": "1402080",
    "end": "1407760"
  },
  {
    "text": "forth but you know this would first of all make our services very autonomous very",
    "start": "1407760",
    "end": "1413520"
  },
  {
    "text": "independently so if payment service doesn't work this has no direct impact on fraud detection or onboarding that's",
    "start": "1413520",
    "end": "1419600"
  },
  {
    "text": "fine we have high service autonomy but i mean as you already see we have a lot of data duplication here right so we have",
    "start": "1419600",
    "end": "1425760"
  },
  {
    "text": "account on three different services spread and you will have a lot of data synchronization problems",
    "start": "1425760",
    "end": "1431200"
  },
  {
    "text": "and that's that's important now because when when i talk to people and when we talk",
    "start": "1431200",
    "end": "1437039"
  },
  {
    "text": "about distributed systems i often have the feeling that that's not clear but it should be very clear",
    "start": "1437039",
    "end": "1442799"
  },
  {
    "text": "we should very explicitly define who owns data in our distributed systems right this is very often just an",
    "start": "1442799",
    "end": "1449279"
  },
  {
    "start": "1447000",
    "end": "1506000"
  },
  {
    "text": "implicit definition somebody makes at some point in time but it should be very explicitly defined who owns which data",
    "start": "1449279",
    "end": "1456559"
  },
  {
    "text": "along our distributed system and we could easily define this here we could say you know onboarding owns the",
    "start": "1456559",
    "end": "1463440"
  },
  {
    "text": "user payment owns the account and transactions right and when we for example need a user in payments then we",
    "start": "1463440",
    "end": "1470480"
  },
  {
    "text": "go to onboarding and fetch the user data from there but then again we have to synchronous calls right we didn't want",
    "start": "1470480",
    "end": "1476159"
  },
  {
    "text": "to have them because if onboarding is down we have a problem in executing payments and then people start to",
    "start": "1476159",
    "end": "1481679"
  },
  {
    "text": "introduce caching and you know all this stuff and you have two big problems in software engineering naming and and",
    "start": "1481679",
    "end": "1488000"
  },
  {
    "text": "cache invalidation and off by one errors and it just doesn't really work it doesn't really make sense makes it a",
    "start": "1488000",
    "end": "1494000"
  },
  {
    "text": "very complex thing which should be which should be much more simple and so there must be a better solution to get around",
    "start": "1494000",
    "end": "1500159"
  },
  {
    "text": "this mismatch of customer journeys and entity data and it turns out that there is one right",
    "start": "1500159",
    "end": "1505760"
  },
  {
    "text": "um it turns out if we think back what i said in the in the in the very beginning",
    "start": "1505760",
    "end": "1511200"
  },
  {
    "start": "1506000",
    "end": "1667000"
  },
  {
    "text": "when we took a look at the simple code snippets then i said one sentence we project the",
    "start": "1511200",
    "end": "1517840"
  },
  {
    "text": "data from our customer stream into our double stream and this concept of projecting data from one",
    "start": "1517840",
    "end": "1525039"
  },
  {
    "text": "place to another place could also help us in this direction so if we think of our onboarding of our onboarding service",
    "start": "1525039",
    "end": "1531840"
  },
  {
    "text": "who owns the user and our payment service who needs a user then we could",
    "start": "1531840",
    "end": "1537840"
  },
  {
    "text": "think of it that in the payment service we want a projection of the onboarding user",
    "start": "1537840",
    "end": "1545120"
  },
  {
    "text": "so we would like to project from onboarding to payment right",
    "start": "1545120",
    "end": "1550400"
  },
  {
    "text": "our kind of users and if we think this in ddd terms then we would say we have on the one hand side a user aggregate",
    "start": "1550400",
    "end": "1557200"
  },
  {
    "text": "and from this user aggregate we project into our user read model and then we have whenever the user aggregate changes",
    "start": "1557200",
    "end": "1563679"
  },
  {
    "text": "we have a user event and this actually triggers the user read model to be updated and when we want to update the",
    "start": "1563679",
    "end": "1569360"
  },
  {
    "text": "user we have a user command and the payment service would probably trigger this user commands to update the user",
    "start": "1569360",
    "end": "1575120"
  },
  {
    "text": "aggregates would then again create an event this event would update the read model and that's basically a cqs in a",
    "start": "1575120",
    "end": "1580400"
  },
  {
    "text": "nutshell and we get this done by utilizing streams right because this event goes into a stream",
    "start": "1580400",
    "end": "1588640"
  },
  {
    "text": "and again as we did in the very simple codesync but we could even use stream transformations we could say we",
    "start": "1588640",
    "end": "1594400"
  },
  {
    "text": "transform the user from onboarding because the user in onboarding has 50 fields right but we in payments just",
    "start": "1594400",
    "end": "1600320"
  },
  {
    "text": "need five of them so we kind of map it and get rid of 45 shuffle these five in a way format them in a way that we can",
    "start": "1600320",
    "end": "1606720"
  },
  {
    "text": "simply read them for the payment use cases and that's basically where we switch to technologies like apache kafka",
    "start": "1606720",
    "end": "1612559"
  },
  {
    "text": "apache pools are right and our use case that's that can be achieved again very simple",
    "start": "1612559",
    "end": "1618159"
  },
  {
    "text": "we can say you know if a user gets updated we trigger an event we store this event that the user got updated",
    "start": "1618159",
    "end": "1624480"
  },
  {
    "text": "into our stream right so we move it there from there on we forward it to the payment service and then the payment",
    "start": "1624480",
    "end": "1629919"
  },
  {
    "text": "service we then basically store it in our user read model and if the user changes again we can basically do the",
    "start": "1629919",
    "end": "1636159"
  },
  {
    "text": "same thing and the event would again update the user right and we can do this basically for nearly all",
    "start": "1636159",
    "end": "1642320"
  },
  {
    "text": "data we have in here like transactions which we can push to the stream and whoever needs a reprojection of",
    "start": "1642320",
    "end": "1649279"
  },
  {
    "text": "these transactions can directly read it from the stream but it's important to understand that you know this is just",
    "start": "1649279",
    "end": "1655679"
  },
  {
    "text": "read data this is data which we don't want to manipulate anymore if we want to change users we will always go via",
    "start": "1655679",
    "end": "1661919"
  },
  {
    "text": "commands or wire requests to our onboarding service and then people usually ask isn't this event sourcing",
    "start": "1661919",
    "end": "1668159"
  },
  {
    "start": "1667000",
    "end": "1843000"
  },
  {
    "text": "well it could be yeah let's let's go a little bit into detail to understand this question because it's",
    "start": "1668159",
    "end": "1674320"
  },
  {
    "text": "a very good question um well if we do this what i just showed you that we kind of get events and this",
    "start": "1674320",
    "end": "1681039"
  },
  {
    "text": "event should update for example the state in our onboarding service in addition it should also trigger an event",
    "start": "1681039",
    "end": "1687520"
  },
  {
    "text": "to our event stream then we usually have this problem that if one of those two doesn't work we",
    "start": "1687520",
    "end": "1692799"
  },
  {
    "text": "cannot really revert the other one right so for example if we send an event to our stream and the stream said okay cool",
    "start": "1692799",
    "end": "1699679"
  },
  {
    "text": "i got it and then we tried to save the state change to our database and our",
    "start": "1699679",
    "end": "1704720"
  },
  {
    "text": "database for whatever reason doesn't allow it then we can really get back the event which you already published to the",
    "start": "1704720",
    "end": "1709919"
  },
  {
    "text": "stream and you can turn it around however you want you you get into this problem and this problem is caused by",
    "start": "1709919",
    "end": "1715600"
  },
  {
    "text": "the by the by the issue that we of course don't have transactions over streams and databases right so we don't",
    "start": "1715600",
    "end": "1721520"
  },
  {
    "text": "have this concept of being transactional here so we can never ensure that data",
    "start": "1721520",
    "end": "1726559"
  },
  {
    "text": "for sure lands in both in both in both persistence so to say and the solution to this problem is",
    "start": "1726559",
    "end": "1732960"
  },
  {
    "text": "basically something people do very often so we go when we get a user update we take it we",
    "start": "1732960",
    "end": "1738720"
  },
  {
    "text": "store it in our database and our database then updates the user table but also updates in the same transaction the",
    "start": "1738720",
    "end": "1745360"
  },
  {
    "text": "user events table and this is what we tend to call than usually the outbox table so we trigger an and record into",
    "start": "1745360",
    "end": "1751760"
  },
  {
    "text": "this user events table and we can ensure that both these records are stored in the database right",
    "start": "1751760",
    "end": "1759120"
  },
  {
    "text": "so we can ensure this because we have a transaction over um this kind of two to",
    "start": "1759120",
    "end": "1764159"
  },
  {
    "text": "two updates or to create statements in our database and then we basically just go to the",
    "start": "1764159",
    "end": "1769760"
  },
  {
    "text": "user events and we kind of stream them into our stream and this is usually done by change data capture or you implement",
    "start": "1769760",
    "end": "1776240"
  },
  {
    "text": "the watchdog or you implement manually rescue a rescued",
    "start": "1776240",
    "end": "1781600"
  },
  {
    "text": "a process which takes your user events table all the time and understands basically if there's something changed",
    "start": "1781600",
    "end": "1787200"
  },
  {
    "text": "and we publish it to the stream right and that's what we tend to call the objects pattern and this is a pattern to solve this issue which i showed you",
    "start": "1787200",
    "end": "1793520"
  },
  {
    "text": "before but for my opinion it's heavily overused i wrote a blog post on this if you're more interested in this why we",
    "start": "1793520",
    "end": "1799840"
  },
  {
    "text": "shouldn't overuse the outbox pattern too much because there are much more simple ways to achieve this and another way to",
    "start": "1799840",
    "end": "1805200"
  },
  {
    "text": "achieve this is if we get a user update event we basically just forward it to the stream",
    "start": "1805200",
    "end": "1810480"
  },
  {
    "text": "and then we say okay we're done we have it in a stream and then on the other side we listen to",
    "start": "1810480",
    "end": "1815600"
  },
  {
    "text": "our own event and we say okay use updated event that's also interesting for me right i take basically the user",
    "start": "1815600",
    "end": "1822320"
  },
  {
    "text": "and update it in there and that's what we tend to call the listen to ourselves or listen to yourself pattern right we",
    "start": "1822320",
    "end": "1828559"
  },
  {
    "text": "really listen to our own events and there kind of get rid of this this transactional boundary and don't need to",
    "start": "1828559",
    "end": "1834159"
  },
  {
    "text": "implement an outbox and all this stuff and another option and now we get to event sourcing is basically event",
    "start": "1834159",
    "end": "1841039"
  },
  {
    "text": "sourcing to solve this problem right and event sourcing for those who don't know is basically that we sum up all the",
    "start": "1841039",
    "end": "1846960"
  },
  {
    "start": "1843000",
    "end": "2103000"
  },
  {
    "text": "events within the system and those events of the system are kind of the current state of our application that's",
    "start": "1846960",
    "end": "1852559"
  },
  {
    "text": "that's kind of the idea and i always explain this with transactions because it's very simple if you have a couple of transactions so you have a transaction",
    "start": "1852559",
    "end": "1858960"
  },
  {
    "text": "which gives you 20 euros and you have a transaction which gives you another 10 years and you have a transaction where you have to pay five euros and you have",
    "start": "1858960",
    "end": "1865840"
  },
  {
    "text": "another transaction where you get seven years then based on these events you could always kind of understand your",
    "start": "1865840",
    "end": "1872240"
  },
  {
    "text": "current balance so after the first transaction your balance is plus 20 euros right after the second balan after",
    "start": "1872240",
    "end": "1878000"
  },
  {
    "text": "the second transaction your balance is blocked 30 years after your third balance you after your third transaction",
    "start": "1878000",
    "end": "1883919"
  },
  {
    "text": "so your balance is 25 euros and then basically the balance is 32 euros so the",
    "start": "1883919",
    "end": "1889760"
  },
  {
    "text": "important stuff here is that we move the source of truth to the left-hand side so the source of truths are our events and",
    "start": "1889760",
    "end": "1896000"
  },
  {
    "text": "based on these events we can always derive our current state so we wouldn't store the balance in the table and we",
    "start": "1896000",
    "end": "1902399"
  },
  {
    "text": "wouldn't update the balance there we would just store the events and based on these events we can always calculate the",
    "start": "1902399",
    "end": "1907679"
  },
  {
    "text": "balance and event sourcing is of course a very interesting topic and we could have a separate talk on the downsides",
    "start": "1907679",
    "end": "1912960"
  },
  {
    "text": "and the challenges but also on the big advantages but basically the idea is simple as that right and if a new",
    "start": "1912960",
    "end": "1918399"
  },
  {
    "text": "transaction happens yeah again we can update the balance and we can say it's not 35. and",
    "start": "1918399",
    "end": "1924080"
  },
  {
    "text": "implemented is of course with streams in most scenarios so we can easily say that an",
    "start": "1924080",
    "end": "1930159"
  },
  {
    "text": "onboarding a service now gets this user updated event we just store it in a stream and basically whoever is",
    "start": "1930159",
    "end": "1936480"
  },
  {
    "text": "interested in those events in those user information can build up its read model",
    "start": "1936480",
    "end": "1941600"
  },
  {
    "text": "based on those events right and we can have here an onboarding a user and we know it's ages 21 and when we're",
    "start": "1941600",
    "end": "1948320"
  },
  {
    "text": "interested in the age of users also an advertisement service we can basically also consume it there and store it in",
    "start": "1948320",
    "end": "1954799"
  },
  {
    "text": "our read model and then of course we can trigger new events we can say okay the user is not",
    "start": "1954799",
    "end": "1960000"
  },
  {
    "text": "22 right and then basically we can update um the user agent both services and we will",
    "start": "1960000",
    "end": "1965760"
  },
  {
    "text": "have then the user age 22 everywhere right and somebody else could really get changed so somebody from the outside",
    "start": "1965760",
    "end": "1971279"
  },
  {
    "text": "could say okay the user should now be 23 and so on and so forth and that's what i tend to call global",
    "start": "1971279",
    "end": "1976320"
  },
  {
    "text": "event sourcing and i'm not a big fan of global event sourcing because from my perspective it breaks the boundaries of",
    "start": "1976320",
    "end": "1982399"
  },
  {
    "text": "information hiding and lots of data isolation so what i usually try to recommend is when we do event sourcing",
    "start": "1982399",
    "end": "1988080"
  },
  {
    "text": "we do something which we tend to call local event sourcing so very similar concept but our onboarding service gets",
    "start": "1988080",
    "end": "1994320"
  },
  {
    "text": "a command to update the user right we kind of store this um command as an event in our stream so the user got",
    "start": "1994320",
    "end": "2000880"
  },
  {
    "text": "updated is now 21 and we basically forward this event then to our global",
    "start": "2000880",
    "end": "2006960"
  },
  {
    "text": "stream to our published stream which everybody can read from and basically we have this event in here and even if this",
    "start": "2006960",
    "end": "2012720"
  },
  {
    "text": "is the same kafka cluster in the end right it doesn't really matter but i think it's very important that we say this event store is owned by a",
    "start": "2012720",
    "end": "2019440"
  },
  {
    "text": "particular service otherwise you end up in you know this kind of database integration which we had a decade ago",
    "start": "2019440",
    "end": "2025840"
  },
  {
    "text": "and which we didn't really like and now you would say okay basically that's the same you just have two streams now right",
    "start": "2025840",
    "end": "2031279"
  },
  {
    "text": "you make things more complex but i think we gain a lot of benefits here right because first of all we can ensure some",
    "start": "2031279",
    "end": "2037919"
  },
  {
    "text": "kind of business rules on onboarding we can say you know a user isn't allowed to have a negative age a user isn't allowed",
    "start": "2037919",
    "end": "2043679"
  },
  {
    "text": "to be older than 200 years and so on and so forth right and we have this information hiding and and we hide also",
    "start": "2043679",
    "end": "2050320"
  },
  {
    "text": "that the implementation details so if at some point anytime we say you know event sourcing is a great idea but doesn't",
    "start": "2050320",
    "end": "2056079"
  },
  {
    "text": "make sense in this particular use case or just replace it with a bosco stp and change data capture our changes from",
    "start": "2056079",
    "end": "2061839"
  },
  {
    "text": "postgres to the stream then we can easily do this and last but not least you see we didn't update or we didn't",
    "start": "2061839",
    "end": "2068560"
  },
  {
    "text": "publish the same event from our local event store to the global event stream because we can customize it we can say",
    "start": "2068560",
    "end": "2074638"
  },
  {
    "text": "you know i don't want to actually expose the data how i store it internally",
    "start": "2074639",
    "end": "2079839"
  },
  {
    "text": "because maybe it's not not easy to read maybe it's not easy to understand we publish another event we publish a user",
    "start": "2079839",
    "end": "2086240"
  },
  {
    "text": "age changed event which is easy to consume which is easy to interpret by users",
    "start": "2086240",
    "end": "2092320"
  },
  {
    "text": "and that's basically that's basically the idea and event sourcing both kinds of event sourcing solve this problem",
    "start": "2092320",
    "end": "2098960"
  },
  {
    "text": "which we can solve with the outbooks better or to listen to yourself better so too long don't read eventually can be",
    "start": "2098960",
    "end": "2105200"
  },
  {
    "start": "2103000",
    "end": "2124000"
  },
  {
    "text": "used but it's not mandatory yeah that's what i what i want to what i want to what i want to say here because i often",
    "start": "2105200",
    "end": "2111839"
  },
  {
    "text": "have the feeling that if people start to think kind of a little bit reactive they always think it must be red sourcing",
    "start": "2111839",
    "end": "2116960"
  },
  {
    "text": "doesn't have to be and if you go with event sourcing my advice prefer local over global event sourcing",
    "start": "2116960",
    "end": "2123920"
  },
  {
    "text": "and well if we if we now go back to this initial problem right",
    "start": "2123920",
    "end": "2129839"
  },
  {
    "text": "then we see that this this idea of of this reactivity which we introduced in",
    "start": "2129839",
    "end": "2135680"
  },
  {
    "text": "our system architecture already solved couple of issues because when we now",
    "start": "2135680",
    "end": "2140960"
  },
  {
    "text": "have the onboarding service being down and we cannot kind of access user data we don't need",
    "start": "2140960",
    "end": "2146960"
  },
  {
    "text": "to do this during executing payments because we have kind of projected all",
    "start": "2146960",
    "end": "2152320"
  },
  {
    "text": "the user data we need for payments into our payment service so that that's an",
    "start": "2152320",
    "end": "2157760"
  },
  {
    "text": "important concept we co-locate the business logic with the data right so we",
    "start": "2157760",
    "end": "2162960"
  },
  {
    "text": "try to make everything available at runtime so we don't want to pull for users during runtime when new payment",
    "start": "2162960",
    "end": "2169520"
  },
  {
    "text": "should be executed but we want to get the users pushed into our services right because this makes our system more",
    "start": "2169520",
    "end": "2175920"
  },
  {
    "text": "resilient and i show you a use case to make this a little bit more understandable maybe so five years ago",
    "start": "2175920",
    "end": "2181920"
  },
  {
    "text": "around five years ago i worked for from big austrian bank and we we recreated the mobile banking there",
    "start": "2181920",
    "end": "2188800"
  },
  {
    "text": "and well makes of course a lot of sense to first understand what do we actually need and we did some research and it",
    "start": "2188800",
    "end": "2195359"
  },
  {
    "text": "turned out that if you build mobile banking right 93 percent of the users what they basically do with this app",
    "start": "2195359",
    "end": "2202160"
  },
  {
    "text": "most of the time is checking the current balance and checking the latest transactions maybe you see yourself if",
    "start": "2202160",
    "end": "2207520"
  },
  {
    "text": "you take out your phone and check mobile banking that's basically what you do right so that's 93 percent of all the",
    "start": "2207520",
    "end": "2214400"
  },
  {
    "text": "time users spend on your application is basically they will do this two simple things checking your current balance and",
    "start": "2214400",
    "end": "2219520"
  },
  {
    "text": "checking your latest transactions and then they initiate some new payments and and other fun any other functionality",
    "start": "2219520",
    "end": "2225599"
  },
  {
    "text": "like you know locking your card all this stuff it takes you months to implement and then basically is used nearly never um so also from an",
    "start": "2225599",
    "end": "2232960"
  },
  {
    "text": "agile perspective or from a prioritization perspective are very important or interesting numbers but in",
    "start": "2232960",
    "end": "2238240"
  },
  {
    "text": "the context of software architecture we can use these numbers very well and we can really build our application",
    "start": "2238240",
    "end": "2246079"
  },
  {
    "text": "in a way that it supports those numbers so we could basically say you know if a user triggers payment yeah simple as",
    "start": "2246079",
    "end": "2252960"
  },
  {
    "start": "2248000",
    "end": "2473000"
  },
  {
    "text": "that it goes to a transaction the transaction stored in a stream and is stored in the database and from there on",
    "start": "2252960",
    "end": "2259119"
  },
  {
    "text": "we move this transaction over the stream the overview service consumes this transaction stores it is in a read model",
    "start": "2259119",
    "end": "2265520"
  },
  {
    "text": "and this read model can also be persisted of course so maybe we store the transactions here on the overview",
    "start": "2265520",
    "end": "2271200"
  },
  {
    "text": "service as a persistent read model and then when a web application a mobile or web",
    "start": "2271200",
    "end": "2276800"
  },
  {
    "text": "banking wants to read our current transactions and balances then we basically just go to this warm",
    "start": "2276800",
    "end": "2283760"
  },
  {
    "text": "persistence here we never go back to the payment service to read current balances and latest transactions we always only",
    "start": "2283760",
    "end": "2290000"
  },
  {
    "text": "just go to this tiny read model which is persisted here and this brings a lot of advantages when it comes to resilience",
    "start": "2290000",
    "end": "2296640"
  },
  {
    "text": "because you can start to burn your own boarding service you can even start to burn your payment service you can",
    "start": "2296640",
    "end": "2301680"
  },
  {
    "text": "basically start to burn nearly your whole architecture right but as long as the overuser service is",
    "start": "2301680",
    "end": "2307839"
  },
  {
    "text": "available you will be able to serve 93",
    "start": "2307839",
    "end": "2312960"
  },
  {
    "text": "of what the customer needs from you and this is reading latest transactions reading current balances yeah maybe this",
    "start": "2312960",
    "end": "2319119"
  },
  {
    "text": "data gets stale after some seconds right but you can still deliver the customer and experience that he can check his",
    "start": "2319119",
    "end": "2325359"
  },
  {
    "text": "current balance and your application isn't down or doesn't send back a 500 right",
    "start": "2325359",
    "end": "2331119"
  },
  {
    "text": "and there are multiple more advantages if you think in this kind of reversing from pool to push if you think in this",
    "start": "2331119",
    "end": "2337520"
  },
  {
    "text": "kind of reactive patterns in architecture and another advantage is that we can easily horizontally scale",
    "start": "2337520",
    "end": "2342960"
  },
  {
    "text": "right we can spin up a second overview service and this over a few servers when it spins up it basically builds up again",
    "start": "2342960",
    "end": "2349280"
  },
  {
    "text": "this read model so we build up a read model and we have an independent instance of the overview service and we",
    "start": "2349280",
    "end": "2355680"
  },
  {
    "text": "can then from our web banking application read from both services and if one of them fails then we can easily",
    "start": "2355680",
    "end": "2362800"
  },
  {
    "text": "deal with this problem because we can easily horizontally scale and that's a big advantage of course and there are",
    "start": "2362800",
    "end": "2369200"
  },
  {
    "text": "even more advantages right in terms of resilience we have you know this this kind of autonomous services and this",
    "start": "2369200",
    "end": "2375520"
  },
  {
    "text": "horizontal scaling but also in terms of of user experience if we take the",
    "start": "2375520",
    "end": "2380880"
  },
  {
    "text": "concept of a payment right then for example in the web banking of lisa she triggers payments to transfer 20 euros",
    "start": "2380880",
    "end": "2387599"
  },
  {
    "text": "to me this goes over our kind of http request to the payment service we store the transaction in the in the stream",
    "start": "2387599",
    "end": "2394560"
  },
  {
    "text": "this transaction gets forwarded to the to the overview service we store idea in the read model and basically we can",
    "start": "2394560",
    "end": "2400560"
  },
  {
    "text": "directly push it forward down to the ui right and now you see how should this work right because we push it down and",
    "start": "2400560",
    "end": "2407599"
  },
  {
    "text": "the ui basically takes care of this and and shows the transaction without any f5 or something like this or any reload",
    "start": "2407599",
    "end": "2413440"
  },
  {
    "text": "it's it's really pushed from end to end and now you're saying well you know that's not really working because we",
    "start": "2413440",
    "end": "2418640"
  },
  {
    "text": "have rest here and rest is pull based right and in many situations that's true but you could for example use something",
    "start": "2418640",
    "end": "2424000"
  },
  {
    "text": "like server-side events or web sockets and in these situations we often use graphql for example because it's a",
    "start": "2424000",
    "end": "2430240"
  },
  {
    "text": "perfect fit there because graphql defines subscriptions as first-class citizens yeah in graphql you can vary",
    "start": "2430240",
    "end": "2437280"
  },
  {
    "text": "data and you can subscribe to data and whenever something changes and you have a subscription you will directly get these changes pushed right",
    "start": "2437280",
    "end": "2444000"
  },
  {
    "text": "and that's why i always say graphql is beautiful when you only work with mutations and subscriptions right so you",
    "start": "2444000",
    "end": "2449280"
  },
  {
    "text": "mutate data and this will trigger a lot of subscriptions and there is no concept of you know caching or reloading needed",
    "start": "2449280",
    "end": "2456079"
  },
  {
    "text": "you really get data pushed end to end and this is what what we tend to call entrained reactive systems and this out",
    "start": "2456079",
    "end": "2462480"
  },
  {
    "text": "of the box real-time capabilities are really great in many in many in many",
    "start": "2462480",
    "end": "2468000"
  },
  {
    "text": "aspects or in many domains and one last thing which this kind of architecture enables is that we can",
    "start": "2468000",
    "end": "2474400"
  },
  {
    "start": "2473000",
    "end": "2601000"
  },
  {
    "text": "easily okay not easily but we have a way um to strangle down monoliths for example",
    "start": "2474400",
    "end": "2480640"
  },
  {
    "text": "because you know every system kind of has this legacy core or this legacy systems which we need to deal with them",
    "start": "2480640",
    "end": "2486240"
  },
  {
    "text": "and that's tough right and even tough ways to work with the data from those systems and usually those systems for",
    "start": "2486240",
    "end": "2491760"
  },
  {
    "text": "example store the user right and in this situation this is working um with streams and working in a reactive way",
    "start": "2491760",
    "end": "2498880"
  },
  {
    "text": "enables us to easily or more easily decompose these monoliths right so we",
    "start": "2498880",
    "end": "2503920"
  },
  {
    "text": "could for example use change data capture and what i mentioned already before is the change data capture is",
    "start": "2503920",
    "end": "2509119"
  },
  {
    "text": "nothing else then each database kind of keeps an event source in its in in its",
    "start": "2509119",
    "end": "2515040"
  },
  {
    "text": "database so we could easily check what what changed over the time and we could consume these events with tools like the",
    "start": "2515040",
    "end": "2521440"
  },
  {
    "text": "bcm or other change data capture tools and forward whenever a user was changed in the user table in our database to our",
    "start": "2521440",
    "end": "2528480"
  },
  {
    "text": "event stream and from there we can then consume them in newly created services right newly fully independent services",
    "start": "2528480",
    "end": "2535040"
  },
  {
    "text": "which are not affected by down times or by problems in the legacy services because we can push the data from our",
    "start": "2535040",
    "end": "2541119"
  },
  {
    "text": "legacy into our new service and that's as mentioned a very interesting concept when it comes to",
    "start": "2541119",
    "end": "2546400"
  },
  {
    "text": "to a monolith decomposition we could also do this the other way around but yeah of course in reality it's much more",
    "start": "2546400",
    "end": "2552480"
  },
  {
    "text": "complex than it's here shown on the slides i mean that's i guess true for most of the slides i showed you um but",
    "start": "2552480",
    "end": "2557920"
  },
  {
    "text": "in in the context of of migration of course but we when we and we do a lot of monolithic",
    "start": "2557920",
    "end": "2563280"
  },
  {
    "text": "composition projects these days we usually always use change to the capture not only but it's it's really an",
    "start": "2563280",
    "end": "2569760"
  },
  {
    "text": "important tool in our strategies to decompose monoliths and that's kind of the last generation",
    "start": "2569760",
    "end": "2576880"
  },
  {
    "text": "or the current generation the third generation of microservice which we tend to call fully reactive right so we have",
    "start": "2576880",
    "end": "2582640"
  },
  {
    "text": "this advantage of being high resilient we have horizontal scaling we can have real-time integration and we have even",
    "start": "2582640",
    "end": "2589119"
  },
  {
    "text": "good integration with legacy systems but we have a few minutes left and i would talk a little bit about scaling",
    "start": "2589119",
    "end": "2595280"
  },
  {
    "text": "because there's even another another generation of micro services and if we talk about scaling",
    "start": "2595280",
    "end": "2602000"
  },
  {
    "start": "2601000",
    "end": "2693000"
  },
  {
    "text": "then we're all aware of those dimensions of scaling right we know that these two dimensions the one is vertical the other",
    "start": "2602000",
    "end": "2607440"
  },
  {
    "text": "one is horizontal and usually we have a service and we can scale it up vertically so we can put more cpu we",
    "start": "2607440",
    "end": "2613839"
  },
  {
    "text": "could put more memory we could put more disk space on it but actually that's not the way we want to go because it turns",
    "start": "2613839",
    "end": "2619839"
  },
  {
    "text": "out to be very cost intensive on the cloud and things like this so we usually want to go with horizontal scaling so we",
    "start": "2619839",
    "end": "2625520"
  },
  {
    "text": "want not to increase the power of one service but we want to have multiple instances of the",
    "start": "2625520",
    "end": "2631200"
  },
  {
    "text": "service running right i think that's kind of the the classical knowledge um when we talk about cloud native",
    "start": "2631200",
    "end": "2637359"
  },
  {
    "text": "architectures and that's usually where yeah where everybody is aware of and and where we usually stop but it's interesting that",
    "start": "2637359",
    "end": "2644000"
  },
  {
    "text": "we have a third dimension of scaling and the third dimension of scaling is usually called charting",
    "start": "2644000",
    "end": "2649599"
  },
  {
    "text": "and what does this mean now we can chart our services right we don't only can horizontally scale our services we can",
    "start": "2649599",
    "end": "2655680"
  },
  {
    "text": "also sharpen them so we could for example say we put charts on those services and those charts are basically",
    "start": "2655680",
    "end": "2662880"
  },
  {
    "text": "defined by user groups right so we can say the first user group goes to this service the second user group goes to",
    "start": "2662880",
    "end": "2668240"
  },
  {
    "text": "this service and the third user group goes to this service and we can then combine those things and we can change",
    "start": "2668240",
    "end": "2673599"
  },
  {
    "text": "the user groups maybe based on countries but still we can horizontally scale we can say you know in norway we have a lot",
    "start": "2673599",
    "end": "2680319"
  },
  {
    "text": "of users so we need to spin up a second service in great britain we even have more service more users so we need to",
    "start": "2680319",
    "end": "2685839"
  },
  {
    "text": "spin up more and more services and this concept of sharding is very important when you take reactive architectures a",
    "start": "2685839",
    "end": "2692720"
  },
  {
    "text": "step further because ultimately what you have is you have a user event right so a user triggered a payment and this user",
    "start": "2692720",
    "end": "2699119"
  },
  {
    "start": "2693000",
    "end": "2940000"
  },
  {
    "text": "event gets stored into a stream and now all kind of common streaming",
    "start": "2699119",
    "end": "2705040"
  },
  {
    "text": "platforms like apache kafka like apache pools even if you use a radius for for for kind of pops up or or streaming",
    "start": "2705040",
    "end": "2712960"
  },
  {
    "text": "then they work with the concept of shards they usually tend to call it partitions redis for example even calls",
    "start": "2712960",
    "end": "2718800"
  },
  {
    "text": "it shards but kafka and pulse and most of the others call them partitions and basically your event goes into a",
    "start": "2718800",
    "end": "2725119"
  },
  {
    "text": "specific partition and that's usually defined based on a user key or whatever you define for your petitioning and that's",
    "start": "2725119",
    "end": "2732000"
  },
  {
    "text": "basically sharding so we take this event and move it into one partition right and from there on we have the uncharted",
    "start": "2732000",
    "end": "2738480"
  },
  {
    "text": "services we have for example three instances of our services which",
    "start": "2738480",
    "end": "2743920"
  },
  {
    "text": "listen to different charts in our architecture and we can say you know for this user group it will always go into",
    "start": "2743920",
    "end": "2749760"
  },
  {
    "text": "partition one and we will always have to service listening to the partition one and from there we can forward it we can",
    "start": "2749760",
    "end": "2755520"
  },
  {
    "text": "say okay we make um fraud detection or basically you create um um event that",
    "start": "2755520",
    "end": "2761119"
  },
  {
    "text": "the valid is paying that the payment is valid and from there on we consume it again in a shouted way by a fraud",
    "start": "2761119",
    "end": "2766800"
  },
  {
    "text": "detection this fraud detection then again creates an event and says hey please um the payment is checked let's",
    "start": "2766800",
    "end": "2772480"
  },
  {
    "text": "execute it and the ledger is then again sharded you know the ledger is charted in the way that only parts of the ledger",
    "start": "2772480",
    "end": "2778720"
  },
  {
    "text": "work with parts of our user base and then basically we can take this folder and move it into a stream which is",
    "start": "2778720",
    "end": "2785520"
  },
  {
    "text": "ultimately that the transaction stream where all transactions which were booked are",
    "start": "2785520",
    "end": "2790880"
  },
  {
    "text": "stored and the important part is now if the fraud detection services they usually",
    "start": "2790880",
    "end": "2796560"
  },
  {
    "text": "need transaction information right and we can easily project this data back of course from this from this transaction",
    "start": "2796560",
    "end": "2803359"
  },
  {
    "text": "topic into our fraud detection and the important part is that we really just need to stay into our shards",
    "start": "2803359",
    "end": "2810000"
  },
  {
    "text": "because we can always ensure that in one shot there is a specific user and the user will always be in the same chart so",
    "start": "2810000",
    "end": "2816880"
  },
  {
    "text": "we don't need to stream back all our kind of transactions we just really need to stream back um the transaction from",
    "start": "2816880",
    "end": "2823920"
  },
  {
    "text": "the chart win and this of course makes the system much more scalable and and much more",
    "start": "2823920",
    "end": "2828960"
  },
  {
    "text": "performant right and tools we usually use here for this kind of streaming architectures think after streams or apache think and from",
    "start": "2828960",
    "end": "2836400"
  },
  {
    "text": "there on we can then basically move those events forwards to a data sync and for example elasticsearch is a good data",
    "start": "2836400",
    "end": "2842640"
  },
  {
    "text": "sync for transactions right and the elastic search again works internally with sha doesn't really matter now but",
    "start": "2842640",
    "end": "2847920"
  },
  {
    "text": "the scale also with with the concept of charts but we can then for example go to",
    "start": "2847920",
    "end": "2852960"
  },
  {
    "text": "this elastic search and consume the transactions from our web banking from there and this kind of makes this system",
    "start": "2852960",
    "end": "2859599"
  },
  {
    "text": "super resilient and also makes it kind of fantastic when it comes to throughput",
    "start": "2859599",
    "end": "2864800"
  },
  {
    "text": "yeah you can push massively data through this system yeah it's not really possible to break the system",
    "start": "2864800",
    "end": "2871520"
  },
  {
    "text": "i worked for an australian financial institute and we built an application charted with 24 partitions based on",
    "start": "2871520",
    "end": "2878319"
  },
  {
    "text": "kafka so we had 24 instances right sharded in a way that",
    "start": "2878319",
    "end": "2884079"
  },
  {
    "text": "that could not be that much traffic basically um that you that you really kind of um break this architecture and",
    "start": "2884079",
    "end": "2890880"
  },
  {
    "text": "that's of course very powerful it's also very complex but when it comes um to the to the to the to the scale and when it",
    "start": "2890880",
    "end": "2897440"
  },
  {
    "text": "comes to the throughput this is i think you cannot really you cannot really find a way um to get this more",
    "start": "2897440",
    "end": "2903599"
  },
  {
    "text": "performant and that's kind of the latest obviously architectural strength when it comes to microservices which we tend to",
    "start": "2903599",
    "end": "2910880"
  },
  {
    "text": "call stream based to start it in in a very stream based approach and this of course creates massive",
    "start": "2910880",
    "end": "2917040"
  },
  {
    "text": "throughput um this allows us extended extreme scalability right",
    "start": "2917040",
    "end": "2922240"
  },
  {
    "text": "and we're nearly at the end so let's let's sum up here i know this was a lot of tough stuff i",
    "start": "2922240",
    "end": "2928160"
  },
  {
    "text": "hope you kind of were able to follow but i wanted to bring in this as much as possible to give you this overview of",
    "start": "2928160",
    "end": "2934720"
  },
  {
    "text": "the different kind of architectural patterns we see emerging on a microservice scale",
    "start": "2934720",
    "end": "2940240"
  },
  {
    "start": "2940000",
    "end": "3293000"
  },
  {
    "text": "and let's let's sum up here now so an important thing which i didn't mention and i mentioned in the beginning",
    "start": "2940240",
    "end": "2946720"
  },
  {
    "text": "that i work a lot with with startups and and scale-ups and and stuff like this",
    "start": "2946720",
    "end": "2951760"
  },
  {
    "text": "and all of them have one thing in common they started with the monolith right",
    "start": "2951760",
    "end": "2957280"
  },
  {
    "text": "and i know it always depends but i i tell you if you if you do something start with a monolith right that's what",
    "start": "2957280",
    "end": "2964400"
  },
  {
    "text": "i can probably say for sure start with the monolith it's the best way to start right because if those",
    "start": "2964400",
    "end": "2970400"
  },
  {
    "text": "startups would have started with stream based or reactive architectures they would have invested all the time in this",
    "start": "2970400",
    "end": "2975920"
  },
  {
    "text": "technical details but didn't deliver business value so first of all very important i guess you all know start",
    "start": "2975920",
    "end": "2981520"
  },
  {
    "text": "with a monolith this model that grows over time right then we maybe need to split this monolith and the way to split it is",
    "start": "2981520",
    "end": "2988000"
  },
  {
    "text": "splitting it synchronously as we have seen in the beginning don't do this just don't do it it creates pain it",
    "start": "2988000",
    "end": "2994400"
  },
  {
    "text": "doesn't create any benefit actually you always end up in a distributed monolith just just really don't do this if if you",
    "start": "2994400",
    "end": "3001680"
  },
  {
    "text": "need to kind of split it sink then of going with a with a model lid right so a",
    "start": "3001680",
    "end": "3006720"
  },
  {
    "text": "well-defined monolith and if at some point in time this doesn't work for you anymore because you",
    "start": "3006720",
    "end": "3011839"
  },
  {
    "text": "need to have multiple processes then maybe think of integrating or splitting up your system",
    "start": "3011839",
    "end": "3017839"
  },
  {
    "text": "in a synchronous way right and then at some point in time you will automatically run into this problem of",
    "start": "3017839",
    "end": "3024000"
  },
  {
    "text": "shared data and then you need to twist right so you need to to shift the dependency",
    "start": "3024000",
    "end": "3030640"
  },
  {
    "text": "or the data flow actually and you will and ultimately always end up in kind of reactive systems because you want your",
    "start": "3030640",
    "end": "3037680"
  },
  {
    "text": "data to be pushed to the downstreams and not pull from the downstreams so basically that's what reactivity is",
    "start": "3037680",
    "end": "3043760"
  },
  {
    "text": "about right moving from pool to push and if this is still not enough and if you",
    "start": "3043760",
    "end": "3048960"
  },
  {
    "text": "still need more performance more throughput then you could think of of the streaming architecture i showed you very shortly in the end",
    "start": "3048960",
    "end": "3055520"
  },
  {
    "text": "and this allows us massive throughput so always start on the left hand side and",
    "start": "3055520",
    "end": "3061359"
  },
  {
    "text": "try to migrate from left to right right and there are fantastic reasons to go to the right hand side don't don't get me",
    "start": "3061359",
    "end": "3067280"
  },
  {
    "text": "wrong fantastic reasons like availability resilience scalability throughput all these things",
    "start": "3067280",
    "end": "3073119"
  },
  {
    "text": "but they're also very bad reasons to go to the right-hand side right and of course it's always in software",
    "start": "3073119",
    "end": "3078160"
  },
  {
    "text": "architecture we pay with complexity so my advice start on the left hand side and always think twice how far to the",
    "start": "3078160",
    "end": "3085280"
  },
  {
    "text": "right you have to go that was it this was about reactive architectures i hope i made you re-think",
    "start": "3085280",
    "end": "3092160"
  },
  {
    "text": "in reactive architectures hope this was useful thanks a lot",
    "start": "3092160",
    "end": "3097320"
  },
  {
    "text": "[Applause]",
    "start": "3097320",
    "end": "3102880"
  },
  {
    "text": "i think we're a little bit out of time right and but yeah if you if you have any",
    "start": "3102880",
    "end": "3109200"
  },
  {
    "text": "questions feel free um to ask him now if we have time left or yeah reach out afterwards i'm here for the rest of",
    "start": "3109200",
    "end": "3114480"
  },
  {
    "text": "today one more thing oh i didn't nearly forgot um we do a a a community training",
    "start": "3114480",
    "end": "3119839"
  },
  {
    "text": "so free community training on reactive architectures i think somewhere next week um so we will dive a little bit",
    "start": "3119839",
    "end": "3125839"
  },
  {
    "text": "more into this concept which i showed you on state stores projections streaming and so on but really more",
    "start": "3125839",
    "end": "3131280"
  },
  {
    "text": "hands-on so kind of kind of coding this stuff um so maybe this could be a good fit to what i told",
    "start": "3131280",
    "end": "3136800"
  },
  {
    "text": "you in this talk so far about reactive architectures any questions",
    "start": "3136800",
    "end": "3144240"
  },
  {
    "text": "well that's a tough question right when do we when is the right time to to split up a",
    "start": "3165680",
    "end": "3171680"
  },
  {
    "text": "monolith right and i would say it's better late than too early um but of course at some point",
    "start": "3171680",
    "end": "3178640"
  },
  {
    "text": "in time it creates a lot of pain right and usually you anyway feel it right if you have usually startups you see they",
    "start": "3178640",
    "end": "3185119"
  },
  {
    "text": "started with one team and then at some point in time they have five teams and if still five teams still need to work all on the same monotone cold pace then",
    "start": "3185119",
    "end": "3191920"
  },
  {
    "text": "it's usually time to split up right and then again based on customer return it's very",
    "start": "3191920",
    "end": "3197119"
  },
  {
    "text": "important don't take out entities take out customer journeys and take out those customer journals which bring the most",
    "start": "3197119",
    "end": "3202960"
  },
  {
    "text": "value and where you need scaling for example trading a payment in a bank or in a in a fintech right and i would move",
    "start": "3202960",
    "end": "3210079"
  },
  {
    "text": "them out and i would try to keep them very independent in the beginning would really just make asynchronous",
    "start": "3210079",
    "end": "3215520"
  },
  {
    "text": "integration there and then when we need kind of more data integration between those separate",
    "start": "3215520",
    "end": "3221920"
  },
  {
    "text": "services then we need any way to become reactive because we need to push data right and then there's the way to go",
    "start": "3221920",
    "end": "3227920"
  },
  {
    "text": "then for example payment is a gold example because then you could even take this further and move it to streaming because",
    "start": "3227920",
    "end": "3233839"
  },
  {
    "text": "in payment you can have the demands for high scalability and high throughput yeah did this out of your question",
    "start": "3233839",
    "end": "3239839"
  },
  {
    "text": "yeah okay that's a tough question when when do you move to the right basically on this diagram i showed you in the end",
    "start": "3239839",
    "end": "3246160"
  },
  {
    "text": "and that's a lot of companies die on these decisions honestly they die because they",
    "start": "3246160",
    "end": "3251760"
  },
  {
    "text": "can't get don't get rid of the monolith so they cannot produce business value in",
    "start": "3251760",
    "end": "3257119"
  },
  {
    "text": "an acceptable time anymore and others start too early so they die because they do not produce business value anymore",
    "start": "3257119",
    "end": "3263680"
  },
  {
    "text": "because they invest all the time and you know decomposing monoliths and yeah building you know beautiful",
    "start": "3263680",
    "end": "3270319"
  },
  {
    "text": "micro service architecture without any without any real business purpose yeah",
    "start": "3270319",
    "end": "3276559"
  },
  {
    "text": "cool i think we're done have a great conference it was nice to be here and",
    "start": "3277599",
    "end": "3282799"
  },
  {
    "text": "yeah stay safe",
    "start": "3282799",
    "end": "3286280"
  },
  {
    "text": "you",
    "start": "3293200",
    "end": "3295280"
  }
]