[
  {
    "text": "Goemon so I could give this talk in",
    "start": "1840",
    "end": "7480"
  },
  {
    "text": "Danish but this is an international conference so I'm I'm not gonna do that",
    "start": "7480",
    "end": "12540"
  },
  {
    "text": "there may be some people here who don't understand anything that's fine I've actually spotted one thanks for coming",
    "start": "12540",
    "end": "19600"
  },
  {
    "text": "so my name is Marc seaman if you want to know more about me there's information they aren't blocked upload a DK and you",
    "start": "19600",
    "end": "25510"
  },
  {
    "text": "can follow me on twitter on at play if you're interested in hearing what I have to say I mostly just tweet technical",
    "start": "25510",
    "end": "32710"
  },
  {
    "text": "stuff so and I'm I'm not that loud what I'm gonna do here today is that I'm",
    "start": "32710",
    "end": "38920"
  },
  {
    "text": "going to try to answer a few frequently asked questions and I'm gonna do this in three parts so in the first part I'm",
    "start": "38920",
    "end": "46210"
  },
  {
    "text": "gonna start with one of these frequently asked questions but then I'm not gonna I'm not gonna answer the question I'm",
    "start": "46210",
    "end": "53440"
  },
  {
    "text": "only going to address why would you want to ask that question and then in part two I'll you know put the first question",
    "start": "53440",
    "end": "61059"
  },
  {
    "text": "aside and start talking about something that seems completely unrelated but turns out to be related and we'll take",
    "start": "61059",
    "end": "68529"
  },
  {
    "text": "that all the way through and then we'll we'll use what we've learned in part two and then in part three we'll go back to",
    "start": "68529",
    "end": "74590"
  },
  {
    "text": "the first frequently asked question because now we have more information and then we can start addressing that one as well so it's a three parter that's the",
    "start": "74590",
    "end": "81819"
  },
  {
    "text": "plan so the first question that I'll try to address here is how do I combine",
    "start": "81819",
    "end": "87099"
  },
  {
    "text": "dependency injection with a sink and a weight without leaky abstractions that",
    "start": "87099",
    "end": "92740"
  },
  {
    "text": "is so that's the that's the requirement here you know if you remove that qualification it's not that hard but if",
    "start": "92740",
    "end": "99490"
  },
  {
    "text": "you want to avoid leaky abstraction it becomes it becomes a little bit harder so I'll start by just showing you a code",
    "start": "99490",
    "end": "105579"
  },
  {
    "text": "example of what is this that I mean so we'll just take it slow and be sure that everyone understands where this is going",
    "start": "105579",
    "end": "111700"
  },
  {
    "text": "so we'll start to look at some code and whenever I show a code example I prefer",
    "start": "111700",
    "end": "117219"
  },
  {
    "text": "very much to reuse the same scenario so I'm never you reusing the code but I'm always reusing this scenario of having",
    "start": "117219",
    "end": "124179"
  },
  {
    "text": "to develop an online restaurant reservation system if I can get away with it and I can here so you know this",
    "start": "124179",
    "end": "130420"
  },
  {
    "text": "one of those systems where you want to make a restaurant reservation so you find a form a website on app or something like that",
    "start": "130420",
    "end": "136390"
  },
  {
    "text": "and you fill in the date and all the other information about the rest reservation you want to make and you",
    "start": "136390",
    "end": "142690"
  },
  {
    "text": "press the submit button and that creates a JSON document and that JSON document gets posted to an HTTP endpoint",
    "start": "142690",
    "end": "148900"
  },
  {
    "text": "and the code that we gotta look at is that HTTP endpoint so the server-side code that receives that JSON document",
    "start": "148900",
    "end": "155740"
  },
  {
    "text": "and decides what to do next so we'll start with the domain logic so in in the",
    "start": "155740",
    "end": "162220"
  },
  {
    "text": "domain logic what which will try to decide is whether or not we can accept the reservation so here's just the",
    "start": "162220",
    "end": "168330"
  },
  {
    "text": "method signature I'll fill it in with some code in a little while but I want",
    "start": "168330",
    "end": "173350"
  },
  {
    "text": "to talk a little bit about the method itself what it looks like so the reservation is a DTO that's",
    "start": "173350",
    "end": "179290"
  },
  {
    "text": "basically just a Tartus transfer object that contains the information from that JSON document so the name the email address the quantity and the date and",
    "start": "179290",
    "end": "187209"
  },
  {
    "text": "then you might wonder why does it return a novel end well the end is a",
    "start": "187209",
    "end": "192400"
  },
  {
    "text": "reservation ID and that means if you have a reservation ID that basically means you have a reservation if you",
    "start": "192400",
    "end": "197620"
  },
  {
    "text": "don't have a reservation ID if it's null then you don't have a reservation so why",
    "start": "197620",
    "end": "202630"
  },
  {
    "text": "might we not always get a reservation well there might be various reasons for that so let's let's look into how this",
    "start": "202630",
    "end": "209170"
  },
  {
    "text": "actually works now if we are doing dependency injection we may have injected a repository already so this",
    "start": "209170",
    "end": "216310"
  },
  {
    "text": "might be available the read-only property or class field or something like that so I'm not showing you how to",
    "start": "216310",
    "end": "221920"
  },
  {
    "text": "inject the dependency I'm assuming that everyone knows how constructor injection works in 2019 and it takes up space that",
    "start": "221920",
    "end": "229000"
  },
  {
    "text": "I don't have for the slides so that's why I'm not showing you that but if we have that repository dependency we can",
    "start": "229000",
    "end": "235209"
  },
  {
    "text": "go and start querying in that we can say how many please give me the reservations for that particular date and then we can",
    "start": "235209",
    "end": "241299"
  },
  {
    "text": "you know just calculate the sum of all the quantities and that gives us the number of already reserved seeds and if",
    "start": "241299",
    "end": "247810"
  },
  {
    "text": "we also know the capacity of the restaurant we can make a business decision and we can say well if we have",
    "start": "247810",
    "end": "253209"
  },
  {
    "text": "too little remaining capacity then we'll have to reject the reservation attempt here because we have sold out or pretty",
    "start": "253209",
    "end": "259660"
  },
  {
    "text": "much close to sold out but we don't have enough remaining capacity for that particular quantity so that means we",
    "start": "259660",
    "end": "265450"
  },
  {
    "text": "return null that means you don't get a reservation I D and that means you don't have a reservation but otherwise we'll call",
    "start": "265450",
    "end": "271780"
  },
  {
    "text": "repository create and that you know creates the repository create the creates the reservation in the",
    "start": "271780",
    "end": "277090"
  },
  {
    "text": "repository and that also returns an integer which is the reservation ID and then that's what we return so you may",
    "start": "277090",
    "end": "283840"
  },
  {
    "text": "wonder where's the async and a wait here and it's not I just want to establish you know the normal dependency injection",
    "start": "283840",
    "end": "290950"
  },
  {
    "text": "code base first and then we'll look at how to you know add some a sink and a weight in a little while but we almost",
    "start": "290950",
    "end": "296800"
  },
  {
    "text": "done now if we're doing two main two event design we might say well let's extract this sort of behavior into an",
    "start": "296800",
    "end": "302860"
  },
  {
    "text": "abstraction so we might say let's define an interface called the Maitre D' that defines that try/except method so Maitre",
    "start": "302860",
    "end": "310090"
  },
  {
    "text": "D' is just a fancy word you know French for hit waiter which is in many",
    "start": "310090",
    "end": "315460"
  },
  {
    "text": "restaurants is sort of like the person or the role that makes decisions about you know whether or not you can accept",
    "start": "315460",
    "end": "320500"
  },
  {
    "text": "reservations so that makes sense and that also gave me the opportunity to use the circumflex and Unicode",
    "start": "320500",
    "end": "326200"
  },
  {
    "text": "characters in code which is always really a bother actually but it's fun for slides at the boundary of the",
    "start": "326200",
    "end": "333460"
  },
  {
    "text": "application we may have some sort of you know controller that accepts you know incoming HTTP requests so how these",
    "start": "333460",
    "end": "341500"
  },
  {
    "text": "things normally work is that if you call a method post it'll handle incoming HTTP POST request so that's sort of what you",
    "start": "341500",
    "end": "348100"
  },
  {
    "text": "can imagine is happening here and we return something called an action result which is basically just an interface that models HTTP responses so don't",
    "start": "348100",
    "end": "355630"
  },
  {
    "text": "worry too much about how that works it's not really important but if we're doing dependency injection we might say let's",
    "start": "355630",
    "end": "361960"
  },
  {
    "text": "inject that in Maitre D' object and that means we can basically just delegate to that object and say let's just you know",
    "start": "361960",
    "end": "368200"
  },
  {
    "text": "take that JSON document and delegate to the maitre d we'll get a nullable ID",
    "start": "368200",
    "end": "373479"
  },
  {
    "text": "back and then we can test whether or not it's null if it's null we'll return an internal server error and otherwise",
    "start": "373479",
    "end": "379479"
  },
  {
    "text": "we'll return 200 okay so internal server error here is just a helper method that returns one of those action results in",
    "start": "379479",
    "end": "386080"
  },
  {
    "text": "this case and action result that represents a 500 internal server error HTTP response and the same thing goes",
    "start": "386080",
    "end": "393250"
  },
  {
    "text": "but okay okay is a helper method that returns a 200 okay responds and you'll",
    "start": "393250",
    "end": "398260"
  },
  {
    "text": "notice in the 200 ok response here we put the reservation ID in the in the body of the",
    "start": "398260",
    "end": "405190"
  },
  {
    "text": "response so it's at this point we know it's safe to go ID tar value we can get the integer out of that nor blend so the",
    "start": "405190",
    "end": "415000"
  },
  {
    "text": "reservation repository looks like this but then you go and you say well but",
    "start": "415000",
    "end": "420460"
  },
  {
    "text": "this is really a database you know our implementation it's actually talking through a database and that's out of process so it really ought to be",
    "start": "420460",
    "end": "426520"
  },
  {
    "text": "asynchronous because that might improve performance at least it's worth whether try and see if we can make that change",
    "start": "426520",
    "end": "431950"
  },
  {
    "text": "and we can measure whether that gives us a performance improvement that might actually be a good idea to do but how do",
    "start": "431950",
    "end": "439780"
  },
  {
    "text": "we how do we make something like this asynchronous well we you have to change the return types these are normal return",
    "start": "439780",
    "end": "446830"
  },
  {
    "text": "types at the moment but you can change them so that the return tasks instead and then now it's asynchronous so it's",
    "start": "446830",
    "end": "453490"
  },
  {
    "text": "pretty straightforward except that this is a leaky abstraction because you had this interface and the reason we have",
    "start": "453490",
    "end": "460240"
  },
  {
    "text": "this interface was because the Maitre D' objects required or needed that",
    "start": "460240",
    "end": "466150"
  },
  {
    "text": "particular behavior so if you're following the dependency inversion principle it is the client that gets to",
    "start": "466150",
    "end": "471250"
  },
  {
    "text": "decide what the interface is look like and the client doesn't need this to be asynchronous now you're letting an",
    "start": "471250",
    "end": "476830"
  },
  {
    "text": "implementation detail leak through into the abstraction that is the definition of a leaky abstraction so we don't even",
    "start": "476830",
    "end": "483310"
  },
  {
    "text": "have to debate whether or not this is a leaky abstraction because / - finishin it is but then you might say well but",
    "start": "483310",
    "end": "489310"
  },
  {
    "text": "doesn't really matter I could be pretty pragmatic and I would probably say yeah who are we actually kidding here we we",
    "start": "489310",
    "end": "495220"
  },
  {
    "text": "pretend that it's a repository but really we should just you know own the fact that it's really just a database so",
    "start": "495220",
    "end": "500890"
  },
  {
    "text": "okay fair enough that's it might not be a big deal let's let's go with this and see where it leads us because maybe it's",
    "start": "500890",
    "end": "507160"
  },
  {
    "text": "not that much of a problem now if we make this change we can almost or we can very easily fix the problem",
    "start": "507160",
    "end": "515409"
  },
  {
    "text": "here we can just you know add async and await keywords you know strategic places and that's basically gonna solve our",
    "start": "515410",
    "end": "521710"
  },
  {
    "text": "problem we also need to change the return type to tasks there but apart from that that's basically all we need",
    "start": "521710",
    "end": "527230"
  },
  {
    "text": "to do the only problem that we now have remaining is that since we change the return type of try/except",
    "start": "527230",
    "end": "532900"
  },
  {
    "text": "we now also have to go and revisit the Maitre D' interface and also change its return",
    "start": "532900",
    "end": "537940"
  },
  {
    "text": "type so at this point I'm getting a little bit more annoyed with my leaky abstraction because I could sort of live",
    "start": "537940",
    "end": "544360"
  },
  {
    "text": "with the fact that a repository represents something that is almost always an out of process resource okay",
    "start": "544360",
    "end": "550510"
  },
  {
    "text": "fair enough that needs to be asynchronous but this is a piece of domain logic or a piece of domain",
    "start": "550510",
    "end": "556089"
  },
  {
    "text": "decision a business decision that needs to be made why does that need to be asynchronous that's odd you know that",
    "start": "556089",
    "end": "562540"
  },
  {
    "text": "I'm sort of this you know this doesn't sit well with me but there let's see",
    "start": "562540",
    "end": "568120"
  },
  {
    "text": "where where this goes so am the final changes we need to make is we just need to add async and await",
    "start": "568120",
    "end": "574720"
  },
  {
    "text": "keywords to the post method as well and most modern web frameworks sort of know that if you return a task they will run",
    "start": "574720",
    "end": "580690"
  },
  {
    "text": "things asynchronously for you so this point the code compiles and it works and it does what it's supposed to do so you",
    "start": "580690",
    "end": "586750"
  },
  {
    "text": "may say well is this a big deal there are some leaky abstractions and then you",
    "start": "586750",
    "end": "591880"
  },
  {
    "text": "say well but it's just a few async and await keywords and that's pretty much it and I might be a client to agree I'm not",
    "start": "591880",
    "end": "599560"
  },
  {
    "text": "saying this is bad I'm just pointing out that there is a trade-off here but what I've told you so far is nothing new and",
    "start": "599560",
    "end": "605770"
  },
  {
    "text": "you've seen other people tell you this old you know all the time you know if you have to go async you have to go anything all the way and the people will",
    "start": "605770",
    "end": "612940"
  },
  {
    "text": "often tell you there's no other way and whenever people say that to me I'm always like huh really because there is",
    "start": "612940",
    "end": "620560"
  },
  {
    "text": "another way and you know the only thing I need to do to disprove the first assertion there is just to come up with",
    "start": "620560",
    "end": "626740"
  },
  {
    "text": "one counter example and I can do that so I can disprove that there there is another way I can disprove that there is",
    "start": "626740",
    "end": "632080"
  },
  {
    "text": "no other way so just to be clear I'm not saying what what I'm about to show you",
    "start": "632080",
    "end": "637750"
  },
  {
    "text": "for the rest of the talk is better I'm just saying there's it's different way of doing it and but I believe in choice",
    "start": "637750",
    "end": "643470"
  },
  {
    "text": "if you want to be you know as good as a software developer as you can be it",
    "start": "643470",
    "end": "648970"
  },
  {
    "text": "helps to have you know options so basically if you're not aware of the option you can't make any decisions if",
    "start": "648970",
    "end": "654730"
  },
  {
    "text": "you're aware of options now you can make decisions decision so so that's basically where I am I believe sometimes",
    "start": "654730",
    "end": "659800"
  },
  {
    "text": "what I just showed you is fine sometimes I would go with what I'm about to show you next instead so it's not an either",
    "start": "659800",
    "end": "667180"
  },
  {
    "text": "a thing you can do well it is an either-or thing but you don't have to always choose one over the other all",
    "start": "667180",
    "end": "673660"
  },
  {
    "text": "right so this is part one of the talk of we're done with part one of the talk so I'm going to put aside this problem of the you know asynchronous dependency",
    "start": "673660",
    "end": "679990"
  },
  {
    "text": "injection for a little while and I'm gonna start talking about another frequently asked question that at first balance doesn't seem to be much related",
    "start": "679990",
    "end": "686710"
  },
  {
    "text": "to what we've been talking about so far and that is how do I get the value out of my monad now don't worry if you don't",
    "start": "686710",
    "end": "694120"
  },
  {
    "text": "know what a monad is we'll get to that in a moment but basically the short answer here is that it's new there is a",
    "start": "694120",
    "end": "701590"
  },
  {
    "text": "tradition in Zen Buddhist philosophy that we use this response mu as meaning",
    "start": "701590",
    "end": "709000"
  },
  {
    "text": "unasked the question it basically sort of means the question as it's currently",
    "start": "709000",
    "end": "714850"
  },
  {
    "text": "being asked doesn't really make any sense and we should start unraveling why are you asking this question and you",
    "start": "714850",
    "end": "720550"
  },
  {
    "text": "know why does it not make any sense this happens a lot and it's there's nothing wrong with asking you know a",
    "start": "720550",
    "end": "726340"
  },
  {
    "text": "it's not even a stupid question it's sort of like a nonsensical question but if you want a Western perspective on",
    "start": "726340",
    "end": "732520"
  },
  {
    "text": "this idea you can read zen and the art of motorcycle maintenance so programmers might want to read gödel Escher Bach",
    "start": "732520",
    "end": "737530"
  },
  {
    "text": "these are two Western perspectives that talks about this concept of mu on asking the question we see situations like this",
    "start": "737530",
    "end": "745930"
  },
  {
    "text": "a lot in when people are trying to learn new things so if you're trying to learn a new programming language or if you're",
    "start": "745930",
    "end": "752980"
  },
  {
    "text": "trying to learn a new software development paradigm or just a new library or stuff like that people will",
    "start": "752980",
    "end": "759010"
  },
  {
    "text": "often you know ask questions that don't make any sense and we often call this",
    "start": "759010",
    "end": "764260"
  },
  {
    "text": "the XY problem Stack Overflow has a FAQ that talks about you know what's the",
    "start": "764260",
    "end": "769360"
  },
  {
    "text": "expired problem but basically it's sort of the same thing when you're trying to",
    "start": "769360",
    "end": "774370"
  },
  {
    "text": "learn something new you're always struggling with me figuring out how how does everything fit together and that's",
    "start": "774370",
    "end": "780700"
  },
  {
    "text": "not natural there's nothing wrong with that at all but you can imagine that you have some sort of goal that you'd like",
    "start": "780700",
    "end": "786820"
  },
  {
    "text": "to achieve and we'll call that goal Y and you say this is what I need to do and based on what you already know and",
    "start": "786820",
    "end": "793450"
  },
  {
    "text": "maybe based on some other paradigms that you're already comfortable with you form a plan for how can you actually",
    "start": "793450",
    "end": "799800"
  },
  {
    "text": "why and that plan may involve a series of steps but then you stuck on one of",
    "start": "799800",
    "end": "804959"
  },
  {
    "text": "those steps and it's called that step X and we say well I don't know how to do X I can't figure out how to do X so you go",
    "start": "804959",
    "end": "810930"
  },
  {
    "text": "on Stack Overflow or somewhere else and you say how do I do X and that is a",
    "start": "810930",
    "end": "817019"
  },
  {
    "text": "nonsensical question it turns out so people will respond why do you want to do X and sometimes people will do that",
    "start": "817019",
    "end": "824070"
  },
  {
    "text": "enough quite an aggressive tone and that's not very you know comfortable but sometimes people will just engage in in",
    "start": "824070",
    "end": "830490"
  },
  {
    "text": "sort of or try to engage in a dialogue and if you do that you may be able to",
    "start": "830490",
    "end": "835769"
  },
  {
    "text": "communicate what was implicit that you're not really trying to do X you're actually trying to do y and once the",
    "start": "835769",
    "end": "843180"
  },
  {
    "text": "persons who are trying to help you understand that they say oh in okay that",
    "start": "843180",
    "end": "848880"
  },
  {
    "text": "makes sense in that old you know style of thinking that you're normally used to but in this other thing that you're",
    "start": "848880",
    "end": "854160"
  },
  {
    "text": "trying to learn at the moment that doesn't make any sense if you want to achieve why you should do Z and that",
    "start": "854160",
    "end": "859500"
  },
  {
    "text": "will enable you to achieve the goal that you wanted to achieve so we get that a lot with in functional programming",
    "start": "859500",
    "end": "866190"
  },
  {
    "text": "people sort of ask questions that sort of can be generalized to this one how do you get the value of the motet this sort",
    "start": "866190",
    "end": "871500"
  },
  {
    "text": "of keeps coming up all the time so the",
    "start": "871500",
    "end": "876810"
  },
  {
    "text": "short answer is you don't but I should probably tell you what a monad is because I'm not assuming that you know",
    "start": "876810",
    "end": "882329"
  },
  {
    "text": "what a monad is already and it's one of those words that have a lot of mysticism and sort of people are a little bit",
    "start": "882329",
    "end": "889110"
  },
  {
    "text": "scared of it because it's sort of very abstract but it's not really that hard to to understand so I believe I can tell",
    "start": "889110",
    "end": "896220"
  },
  {
    "text": "you what a monad is in about 10-15 minutes and you should be able to understand it it's not it's not harder",
    "start": "896220",
    "end": "902130"
  },
  {
    "text": "than that so in short a monad is a function you can flatten and then you go okay that's not really about over here very helpful",
    "start": "902130",
    "end": "908040"
  },
  {
    "text": "because what's a functor so we have to start with the functor and and talk about what that is and then you know",
    "start": "908040",
    "end": "914220"
  },
  {
    "text": "once you understand that the monad is part is actually pretty really easy to understand so a functor is a container",
    "start": "914220",
    "end": "920760"
  },
  {
    "text": "it's not a docker container it's not a dependency injection container it's not",
    "start": "920760",
    "end": "925769"
  },
  {
    "text": "even a shipping container it's just a container of tartar so we might just illustrate that with a little rectangle",
    "start": "925769",
    "end": "931230"
  },
  {
    "text": "here but you can think of this as a data type in c-sharp this would be some sort of data type and it would typically",
    "start": "931230",
    "end": "937740"
  },
  {
    "text": "be no not typically it will always be generically typed so it would be something like you know foo of T or bar",
    "start": "937740",
    "end": "943500"
  },
  {
    "text": "of T or something like that so it's just a container of doubt of data of values",
    "start": "943500",
    "end": "948899"
  },
  {
    "text": "or of things like that and and in order for a container of values to be a",
    "start": "948899",
    "end": "954839"
  },
  {
    "text": "function it must have one other quality it must support what we call the",
    "start": "954839",
    "end": "959940"
  },
  {
    "text": "structure preserving map so basically the idea is that you can take whatever is inside the container and you can",
    "start": "959940",
    "end": "965790"
  },
  {
    "text": "translate the contents of the container and the result will be a new container that sort of looks like the original one",
    "start": "965790",
    "end": "972510"
  },
  {
    "text": "but with all the contents changed so this seems quite abstract so let's put some values in so the the example that",
    "start": "972510",
    "end": "980010"
  },
  {
    "text": "everyone understands that you've probably done this a lot in c-sharp already it's just a collection of things so this might be you know a collection",
    "start": "980010",
    "end": "987300"
  },
  {
    "text": "of integers in this case or ienumerable of something like that you know this is one example of a functor so a structure",
    "start": "987300",
    "end": "995459"
  },
  {
    "text": "preserving map might be something like where you say well let's add one to each of of those numbers and now you get a",
    "start": "995459",
    "end": "1001160"
  },
  {
    "text": "new container you get a new collection of numbers but doesn't have to be you know numbers two numbers you can go numbers two strings or you can go",
    "start": "1001160",
    "end": "1007670"
  },
  {
    "text": "numbers two boolean values like this one now the the last the third example here also illustrates something else and that",
    "start": "1007670",
    "end": "1013910"
  },
  {
    "text": "is the structure is being preserved in the sense that even though you think you",
    "start": "1013910",
    "end": "1019010"
  },
  {
    "text": "know boolean values it's just you know false and true there's only two boolean values why do we need to repeat them why",
    "start": "1019010",
    "end": "1024980"
  },
  {
    "text": "do we need to go false false false true true false well that's because the structure of the original input container has been preserved and you",
    "start": "1024980",
    "end": "1032510"
  },
  {
    "text": "might find that redundant in this particular case but that just means you know there's always you know all of these collections have six elements",
    "start": "1032510",
    "end": "1040040"
  },
  {
    "text": "because the original collection had six elements and the order is determined by the the order of the input so that's",
    "start": "1040040",
    "end": "1048048"
  },
  {
    "text": "basically what a structure preserving map means when we are talking about collections but to be clear this is just",
    "start": "1048049",
    "end": "1053690"
  },
  {
    "text": "one example of a functor and I'll show you some other ones later on so it's not a function it's not something that",
    "start": "1053690",
    "end": "1059179"
  },
  {
    "text": "implements an interface anything is just an idea so another thing we might notice",
    "start": "1059179",
    "end": "1064790"
  },
  {
    "text": "is that the output of making that structure serving map is again one of our data containers and that means we can use",
    "start": "1064790",
    "end": "1071240"
  },
  {
    "text": "that as an input for another step so we can sort of chain these things together and the way that it looks in c-sharp is",
    "start": "1071240",
    "end": "1078170"
  },
  {
    "text": "you could start with a collection of numbers or an array in this case and then you go dot select so select is what",
    "start": "1078170",
    "end": "1084710"
  },
  {
    "text": "we call the structure pessoa map in c-sharp most other languages call it map",
    "start": "1084710",
    "end": "1090140"
  },
  {
    "text": "but for various reasons c-sharp course it's selected so here we just take you know each of the numbers and add one to",
    "start": "1090140",
    "end": "1096290"
  },
  {
    "text": "it and then we can do it again so we can take each of those numbers and turn them into strings and now we just have a an",
    "start": "1096290",
    "end": "1102590"
  },
  {
    "text": "array of strings so that's pretty straightforward this is just how link works and this has been available",
    "start": "1102590",
    "end": "1107810"
  },
  {
    "text": "available in c-sharp for more than 10 years so you probably know this already but it's an example of a functor and",
    "start": "1107810",
    "end": "1115330"
  },
  {
    "text": "Microsoft the documentation doesn't really tell you that this is a function so it does a lot of very good the",
    "start": "1115330",
    "end": "1123260"
  },
  {
    "text": "documentation cut does a really good job of telling you how this works but it never really tells you that the extraction this is based on is called a",
    "start": "1123260",
    "end": "1129890"
  },
  {
    "text": "functor so you may not realize that you've been using functors and monads",
    "start": "1129890",
    "end": "1135830"
  },
  {
    "text": "for the last 10 years but actually you have so if you look at this there you might say well why would anyone ask the",
    "start": "1135830",
    "end": "1143300"
  },
  {
    "text": "question how to get the value out of my monad because this one is a monad I haven't talked about Monat yet but trust",
    "start": "1143300",
    "end": "1148760"
  },
  {
    "text": "me it is and it doesn't you know you realize that it doesn't make any sense to ask that question how do I get the",
    "start": "1148760",
    "end": "1154340"
  },
  {
    "text": "value out of my collection with which value there's six of them all right here there might be zero values how do I get",
    "start": "1154340",
    "end": "1160580"
  },
  {
    "text": "the value out of my empty collection it doesn't make sense and people don't ask that question so people so why do people",
    "start": "1160580",
    "end": "1167540"
  },
  {
    "text": "still ask the question about how do they get value of the monad I believe the reason is that you never really told",
    "start": "1167540",
    "end": "1173540"
  },
  {
    "text": "that this is a function you never really told that this is a monad so I think",
    "start": "1173540",
    "end": "1178880"
  },
  {
    "text": "some people are a little bit unfortunate or unlucky that whenever they encounter the concept concept of a monad it's in a",
    "start": "1178880",
    "end": "1185960"
  },
  {
    "text": "different context and maybe they encountered it in a context and like I called unit containers so this is just",
    "start": "1185960",
    "end": "1191870"
  },
  {
    "text": "my you know homemade label they're a unit container and the reason why I call it that is because these are data",
    "start": "1191870",
    "end": "1197660"
  },
  {
    "text": "containers that are guaranteed to exactly one one value so the example",
    "start": "1197660",
    "end": "1204170"
  },
  {
    "text": "that's been around the longest is probably lazy of T so lazy of T is a lazy computation and it's guaranteed to",
    "start": "1204170",
    "end": "1210560"
  },
  {
    "text": "contain a value of the type T you know eventually when you force evaluation and I'm sort of ignoring that it might throw",
    "start": "1210560",
    "end": "1216890"
  },
  {
    "text": "exceptions and stuff like that but if we forget about that for a moment it's guaranteed to contain a single value of",
    "start": "1216890",
    "end": "1222470"
  },
  {
    "text": "the type T just lazily compute your computed so this is already a generic data container is it a functor well it's",
    "start": "1222470",
    "end": "1231650"
  },
  {
    "text": "not you know it doesn't have a select method in the base class library but you can add one it's it's pretty",
    "start": "1231650",
    "end": "1238400"
  },
  {
    "text": "straightforward to add an extension method that takes you know a lacy of T and turns it into a lacy of T result all",
    "start": "1238400",
    "end": "1243770"
  },
  {
    "text": "you need is a function that takes T and turns that into T result and the implementation here's a one-liner now",
    "start": "1243770",
    "end": "1249620"
  },
  {
    "text": "I'm not gonna you know dwell too much on the implementation of these things because it's the concept I want to get",
    "start": "1249620",
    "end": "1255290"
  },
  {
    "text": "across so what you can do with something like that is you can start by creating a lacy int and even though this one has a",
    "start": "1255290",
    "end": "1262760"
  },
  {
    "text": "you know blocking it will block the thread for ten seconds inside of it this",
    "start": "1262760",
    "end": "1267920"
  },
  {
    "text": "entire expression will it complete immediately because it's a lazy computation so it's a lazy of end it's",
    "start": "1267920",
    "end": "1273110"
  },
  {
    "text": "not gonna block until you actually force evaluation and you probably know how that works already now if I want to",
    "start": "1273110",
    "end": "1279710"
  },
  {
    "text": "transform my lazy end into a lacy of string I can use that new selects extension method that I just added",
    "start": "1279710",
    "end": "1286340"
  },
  {
    "text": "and that also completes immediately so basically it's just it just does what",
    "start": "1286340",
    "end": "1292190"
  },
  {
    "text": "you'd like it to do it behaves in an intuitively reasonable manner and that's",
    "start": "1292190",
    "end": "1297710"
  },
  {
    "text": "basically what we mean when we say it preserves the structure of the container it's just it it preserves the invariance",
    "start": "1297710",
    "end": "1303740"
  },
  {
    "text": "its it'll stay working the way you'd expect the lazy of string to work and it's only when you force evaluation that",
    "start": "1303740",
    "end": "1310880"
  },
  {
    "text": "it'll block for 10 seconds so again it works just like you'd expect a lazy of string to work and if you force",
    "start": "1310880",
    "end": "1317600"
  },
  {
    "text": "evaluation again it completes immediately because now it's remembered the result from before so doing that",
    "start": "1317600",
    "end": "1323630"
  },
  {
    "text": "transformation that you know calling that select method doesn't change anything about what it means to be a lazy computation so that is why we say",
    "start": "1323630",
    "end": "1329960"
  },
  {
    "text": "it preserves the invariance of the original container so all it takes is just you know adding",
    "start": "1329960",
    "end": "1337020"
  },
  {
    "text": "a select method like an extension method like this and you can do this with LaCie of T you can do it with tasks of T as",
    "start": "1337020",
    "end": "1343260"
  },
  {
    "text": "well and you notice the implementation code is a little bit different but not much and now we can basically walk",
    "start": "1343260",
    "end": "1348990"
  },
  {
    "text": "through the same sort of example again where you can say we will start by having a task of int and that entire",
    "start": "1348990",
    "end": "1354750"
  },
  {
    "text": "expression completes immediately now it's going to start that task on a background thread it's it's gonna start",
    "start": "1354750",
    "end": "1360240"
  },
  {
    "text": "running but you'll get your task of Ind immediately and again you can call extra",
    "start": "1360240",
    "end": "1365280"
  },
  {
    "text": "selects to turn the task of IND into a task of string and that again just completes immediately it it's only when",
    "start": "1365280",
    "end": "1371040"
  },
  {
    "text": "you await the string inside the task that you will actually have some blocking behavior because that task is",
    "start": "1371040",
    "end": "1376620"
  },
  {
    "text": "probably not finished running by that time and again if you do it again it'll complete immediately so again this just",
    "start": "1376620",
    "end": "1381809"
  },
  {
    "text": "preserves the invariance of what it means to be an asynchronous task so everything you'd expect a task of string",
    "start": "1381809",
    "end": "1388170"
  },
  {
    "text": "to all the rules that you expect it to obey it actually does that so let's",
    "start": "1388170",
    "end": "1393450"
  },
  {
    "text": "select doesn't change those things so it's just it's just well-behaved and that's basically just another way of putting it so that's that's a couple of",
    "start": "1393450",
    "end": "1402000"
  },
  {
    "text": "examples of functors you've seen me write code like this so X that selects and using this you know method call",
    "start": "1402000",
    "end": "1408420"
  },
  {
    "text": "syntax but we could actually also rewrite the code in query syntax like this and often when people see query",
    "start": "1408420",
    "end": "1414840"
  },
  {
    "text": "syntax there they're sort of used to thinking about this being something that involves ienumerable so this one would you know translate an",
    "start": "1414840",
    "end": "1421770"
  },
  {
    "text": "ienumerable of int into an i'm new mobile of string but what if X is not an ienumerable if X is a lazy of int then Y",
    "start": "1421770",
    "end": "1429030"
  },
  {
    "text": "is inferred to be a lazy of string and the same thing goes for tasks so this",
    "start": "1429030",
    "end": "1434150"
  },
  {
    "text": "this syntax that the she sharp compiler knows about is enabled whenever you turn",
    "start": "1434150",
    "end": "1441600"
  },
  {
    "text": "your generically type data container into a functor you just have to add the",
    "start": "1441600",
    "end": "1446820"
  },
  {
    "text": "Select method and then that syntax is available so even though the C sharp compilers you know we'll see some",
    "start": "1446820",
    "end": "1453059"
  },
  {
    "text": "examples of this in a moment even though this is sharp compiler may never have heard about your generically typed data",
    "start": "1453059",
    "end": "1459809"
  },
  {
    "text": "container type then you can still enable this syntax and the reason that this works is because that language feature",
    "start": "1459809",
    "end": "1466470"
  },
  {
    "text": "is based on concept of a functor so whenever you do something that looks like a functor this she's sharp compiled it just says hey",
    "start": "1466470",
    "end": "1472469"
  },
  {
    "text": "that looks like a functor that syntax will now work so that's basically what a",
    "start": "1472469",
    "end": "1478979"
  },
  {
    "text": "fun toy is so I'm just the only thing that I need to do now is just explain to you what a monad is and that's actually",
    "start": "1478979",
    "end": "1484830"
  },
  {
    "text": "the easy part you know the function part was probably the hardest part to understand so a monad is a function you",
    "start": "1484830",
    "end": "1491399"
  },
  {
    "text": "can flatten so the only thing we now need to talk about is what does it mean for a function to be flattened when it's",
    "start": "1491399",
    "end": "1498119"
  },
  {
    "text": "a function not already flat so we'll go back and look at we'll start with looking at collections for a little",
    "start": "1498119",
    "end": "1504749"
  },
  {
    "text": "while so here's just a single string so it's comma separated as you may have",
    "start": "1504749",
    "end": "1510389"
  },
  {
    "text": "noticed foo come apart but it's one string and that means we have an instance method called split on it when",
    "start": "1510389",
    "end": "1516299"
  },
  {
    "text": "we can call it and then we can ask it to split on the comma and that gives us an array of strings all right so that's",
    "start": "1516299",
    "end": "1521999"
  },
  {
    "text": "fine what if we have an array of comma-separated strings like this and we'd say we'd like to separate each of",
    "start": "1521999",
    "end": "1528929"
  },
  {
    "text": "those strings you know according to the comma so you might try to do something like this where you say for each of the",
    "start": "1528929",
    "end": "1534629"
  },
  {
    "text": "strings inside that array of strings I'll call split on that string but what",
    "start": "1534629",
    "end": "1540570"
  },
  {
    "text": "you get if you try to do that is you get an array of an array of strings so it's a it's a nested array of strings and",
    "start": "1540570",
    "end": "1548249"
  },
  {
    "text": "this sometimes this is what you want but sometimes it's not you just want a flattened list so what you can do",
    "start": "1548249",
    "end": "1554609"
  },
  {
    "text": "instead is instead of calling select you can call a method called select many and the reason why it's called select many",
    "start": "1554609",
    "end": "1560159"
  },
  {
    "text": "is because what happens inside of it produces many values so for each of the strings you know string that split or is",
    "start": "1560159",
    "end": "1566219"
  },
  {
    "text": "that split will produce many strings so you're selecting for each string but you're selecting many new values and you",
    "start": "1566219",
    "end": "1572759"
  },
  {
    "text": "want that to flatten as you go and that works and now you get a flattened list",
    "start": "1572759",
    "end": "1578159"
  },
  {
    "text": "of strings so this just enable used to enables you to flatten as you go and the",
    "start": "1578159",
    "end": "1583589"
  },
  {
    "text": "select many method is basically if you can implement implement that and and it",
    "start": "1583589",
    "end": "1589139"
  },
  {
    "text": "works you know intuitively correctly then this is a monad this this flattens",
    "start": "1589139",
    "end": "1594359"
  },
  {
    "text": "a list a nested list and that's a monad it's there's a little bit more to Monat but this is the most important thing you",
    "start": "1594359",
    "end": "1599579"
  },
  {
    "text": "need to understand so we've seen an example of how lists can be nested and then you can flatten",
    "start": "1599579",
    "end": "1605890"
  },
  {
    "text": "them as you go so you might wonder is this also thing that might happen to other sorts of functions so we've",
    "start": "1605890",
    "end": "1612070"
  },
  {
    "text": "already established the task of T is a functor so it might might it sometimes become nested and that that may be the",
    "start": "1612070",
    "end": "1619840"
  },
  {
    "text": "case so here I have two tasks of ins and I'd like to try to add them together but",
    "start": "1619840",
    "end": "1625360"
  },
  {
    "text": "using this new functor functionality that I've already have so I might try to do something like this where I say let's",
    "start": "1625360",
    "end": "1632320"
  },
  {
    "text": "go X dot select and then I'll have the integer I inside of that task and then I",
    "start": "1632320",
    "end": "1637480"
  },
  {
    "text": "can try to sort of add those things together but since Y is also a task I'll",
    "start": "1637480",
    "end": "1643030"
  },
  {
    "text": "have to await that so that becomes a little bit clunky there so I'll end up with an optic Z which is a task of a",
    "start": "1643030",
    "end": "1651160"
  },
  {
    "text": "task of an IND which is exactly one of those nested functors how do we get the integer out of it by the way well you",
    "start": "1651160",
    "end": "1657700"
  },
  {
    "text": "can go away to weight set it sort of like you know when I wrote this example",
    "start": "1657700",
    "end": "1662860"
  },
  {
    "text": "I said I wonder if we can do this and then I try to say hey that actually works that's funny but it's not really",
    "start": "1662860",
    "end": "1668620"
  },
  {
    "text": "what you'd normally like to do is it's it's a little bit odd even though it works it's sort of like yeah maybe not so what if you had to select many method",
    "start": "1668620",
    "end": "1675880"
  },
  {
    "text": "you know an extension method for tasks of T well if you had you can flatten as you go and then your code would just",
    "start": "1675880",
    "end": "1681670"
  },
  {
    "text": "look like this so I'm not going to show you how silic Mini is implemented but it's fairly easy if you interested you",
    "start": "1681670",
    "end": "1687370"
  },
  {
    "text": "can google it there's lots of examples of that but now we have to select many method more syntax lights up so you",
    "start": "1687370",
    "end": "1694570"
  },
  {
    "text": "could actually also rewrite the code like this in query syntax and so not",
    "start": "1694570",
    "end": "1699760"
  },
  {
    "text": "only does the c-sharp compiler know about functors it knows about monads as well it says well you can do those from",
    "start": "1699760",
    "end": "1705520"
  },
  {
    "text": "from from you know like Cartesian products of things if you have a select many method so all of these things this",
    "start": "1705520",
    "end": "1711670"
  },
  {
    "text": "your Sharp compiler actually already knows about but to reiterate so far I",
    "start": "1711670",
    "end": "1718620"
  },
  {
    "text": "understand why some people might get into this you know idea that you it's",
    "start": "1718620",
    "end": "1724720"
  },
  {
    "text": "possible to get the value out of our phone app because for some monads this is actually possible if you have a lazy",
    "start": "1724720",
    "end": "1730390"
  },
  {
    "text": "of string you can get the value out of it if you have a task of string you can get a value and this applies to c-sharp it's applies",
    "start": "1730390",
    "end": "1736639"
  },
  {
    "text": "in other languages as well in in in f-sharp we have a sink of string you can get the value out of it even in Haskell",
    "start": "1736639",
    "end": "1742669"
  },
  {
    "text": "we have these unit containers where you may have a container with things inside of it and sometimes you can pull the",
    "start": "1742669",
    "end": "1748249"
  },
  {
    "text": "these things out of them so there's definitely a subset of old Munez where that question makes sense you know how",
    "start": "1748249",
    "end": "1754399"
  },
  {
    "text": "to get the value out of it but we should still keep in mind that and the the",
    "start": "1754399",
    "end": "1760039"
  },
  {
    "text": "function and the monnet that i started showing you is just the you know the collections and it doesn't make sense to",
    "start": "1760039",
    "end": "1765409"
  },
  {
    "text": "ask that question but often people don't realize that that's a monad so that's sort of the problem where things really",
    "start": "1765409",
    "end": "1771529"
  },
  {
    "text": "start to become difficult for people new to this concept is when you have a container that may or may not contain a",
    "start": "1771529",
    "end": "1777559"
  },
  {
    "text": "value so I call those semi containers because they're sort of like look like they may contain a single value but",
    "start": "1777559",
    "end": "1783469"
  },
  {
    "text": "sometimes they don't and I think the one that most c-sharp developers are familiar with is no level of T so novel",
    "start": "1783469",
    "end": "1791179"
  },
  {
    "text": "of T is something where you can you know have a novel ID like this one and then often people need to write some some",
    "start": "1791179",
    "end": "1797869"
  },
  {
    "text": "if-else curve where they say well if it's not null I know that it's safe to access ID but value and that gives me an",
    "start": "1797869",
    "end": "1804469"
  },
  {
    "text": "integer and I can pass that as an customer ID in this case into my customer and then I can return that but",
    "start": "1804469",
    "end": "1810409"
  },
  {
    "text": "now whenever you write code like this there is also the need for an else branch because you're returning a new",
    "start": "1810409",
    "end": "1816649"
  },
  {
    "text": "customer here so whatever you know host whatever method hosts this little code",
    "start": "1816649",
    "end": "1821959"
  },
  {
    "text": "snippet here must be some method that returns a customer so what you do in the else case well we often see that people",
    "start": "1821959",
    "end": "1828589"
  },
  {
    "text": "don't really know exactly what to do so I don't know I'm just going to throw an exception and and the problem with that",
    "start": "1828589",
    "end": "1835820"
  },
  {
    "text": "is you know if you put code like this into a method that that you know according to its type signature says hey",
    "start": "1835820",
    "end": "1841729"
  },
  {
    "text": "I'll give you a customer I'll call that method and then my curve will compile",
    "start": "1841729",
    "end": "1847279"
  },
  {
    "text": "against your code and I'll say oh that's great everything works and then I'll try to run the code in production and then",
    "start": "1847279",
    "end": "1852799"
  },
  {
    "text": "everything blows up bang because I didn't realize that there was an exception like that so if you write code",
    "start": "1852799",
    "end": "1857959"
  },
  {
    "text": "a lot like this it's sort of like you're putting a minefield out so that it's really hard to actually you know walk",
    "start": "1857959",
    "end": "1863899"
  },
  {
    "text": "through the code base and make sure that nothing explodes and often it'll do that it's not a good",
    "start": "1863899",
    "end": "1869520"
  },
  {
    "text": "way of structuring code so what if we turn knob of tea into a functor again",
    "start": "1869520",
    "end": "1875880"
  },
  {
    "text": "the select method is not something that is available in the in the coal library but you can add one yourself but there's",
    "start": "1875880",
    "end": "1883020"
  },
  {
    "text": "one little constraint here you'll notice that we need to constrain the tea and the tea result by being a struct you",
    "start": "1883020",
    "end": "1888690"
  },
  {
    "text": "know a value type and the reason for that is that knob of tea itself has that constraint so we can't sort of escape",
    "start": "1888690",
    "end": "1894300"
  },
  {
    "text": "that constraint but it does enable us to write code like this where we say we can transform a novel of int int inaudible",
    "start": "1894300",
    "end": "1900360"
  },
  {
    "text": "pool because there those are both value types so that works but then you say",
    "start": "1900360",
    "end": "1906570"
  },
  {
    "text": "well this is nice because there's no if-else things going on you know all the ears if-else stuff is actually captured",
    "start": "1906570",
    "end": "1913800"
  },
  {
    "text": "inside that select method so that would give me something then that composes much better so could I do something",
    "start": "1913800",
    "end": "1920430"
  },
  {
    "text": "similar with my you know custom ID there could I write something like this and unfortunately that's not possible",
    "start": "1920430",
    "end": "1926340"
  },
  {
    "text": "because it doesn't a pile and the reason why doesn't compile is because selects it has to be constrained for for both",
    "start": "1926340",
    "end": "1932880"
  },
  {
    "text": "the tea and the tea resolves to be a value type and custom as a reference type so this doesn't work but if we",
    "start": "1932880",
    "end": "1939390"
  },
  {
    "text": "really nice if we could do something like this so couldn't we somehow lift that type constraint unknowable of tea",
    "start": "1939390",
    "end": "1945330"
  },
  {
    "text": "well we can't but we can create our own generically type data container instead",
    "start": "1945330",
    "end": "1951000"
  },
  {
    "text": "and we'll call it maybe maybe of tea because that's what you usually call it it's also known as option of tea so if",
    "start": "1951000",
    "end": "1957570"
  },
  {
    "text": "you run into that that's the same idea now in there's plenty of different ways",
    "start": "1957570",
    "end": "1962580"
  },
  {
    "text": "you can implement this but here's one way we'll have a flag called has item and we'll have two constructors so",
    "start": "1962580",
    "end": "1968070"
  },
  {
    "text": "here's a constructor that doesn't take in an input argument so that means we create an empty empty maybe of tea so",
    "start": "1968070",
    "end": "1975000"
  },
  {
    "text": "that's an empty data container there's sort of you know corresponds to the case where the novel of tea is actually no",
    "start": "1975000",
    "end": "1980690"
  },
  {
    "text": "but then we have another constructor over Luthor an item and you know sits that has item flag to true and remembers",
    "start": "1980690",
    "end": "1988560"
  },
  {
    "text": "what the item is in in another class field there so at this point we already have it and generically typed answer",
    "start": "1988560",
    "end": "1994740"
  },
  {
    "text": "container so the next question is you know is this a functor obviously it is because why would I talk about it if",
    "start": "1994740",
    "end": "2000590"
  },
  {
    "text": "it's not so we can add a select method it doesn't have to be an extension method in this case we can just make it an instance",
    "start": "2000590",
    "end": "2006800"
  },
  {
    "text": "method on maybe of T and you'll notice it returns maybe of T result so one way",
    "start": "2006800",
    "end": "2012830"
  },
  {
    "text": "we could implement that is just looking at that flag and say if if has item is true that means the item is available",
    "start": "2012830",
    "end": "2019520"
  },
  {
    "text": "now remember item has the type T generically type T and we have this",
    "start": "2019520",
    "end": "2024650"
  },
  {
    "text": "little function coming in called the selector that turns any T value into a TESOL value so we can call the selector",
    "start": "2024650",
    "end": "2032270"
  },
  {
    "text": "with the item value and that gives us a T result value and then we can package that into maybe of T result",
    "start": "2032270",
    "end": "2037460"
  },
  {
    "text": "so whenever has item is true will map will be mapping a populated maybe of T",
    "start": "2037460",
    "end": "2043670"
  },
  {
    "text": "into unpopulated maybe of T result and if highest item is false we'll just",
    "start": "2043670",
    "end": "2048679"
  },
  {
    "text": "return you know an empty may P of T result so we'll translate empty maybe of T into maybe empty maybe of T result so",
    "start": "2048679",
    "end": "2056210"
  },
  {
    "text": "that's a structure preserving map it but it preserves the structure of what it means to be a maybe object and you can",
    "start": "2056210",
    "end": "2064100"
  },
  {
    "text": "implement select many as well it's a little bit different but that just means that not only is it a function it's also a monad so what can you do with this",
    "start": "2064100",
    "end": "2072108"
  },
  {
    "text": "well it turns out to be super composable and I'll just show you a little example and then we'll go back to the",
    "start": "2072109",
    "end": "2077570"
  },
  {
    "text": "async/await example but what you can do is you can say well we can create a little helper method called try pass int",
    "start": "2077570",
    "end": "2084350"
  },
  {
    "text": "that starts with a candidate string and then it will try to pass it into an integer and it'll return maybe of int",
    "start": "2084350",
    "end": "2090169"
  },
  {
    "text": "and you might say well why do you we need this because we have that in the base class library already we can do in",
    "start": "2090169",
    "end": "2095868"
  },
  {
    "text": "to try pass but the problem with inter try pass is again it's sort of it forces",
    "start": "2095869",
    "end": "2101780"
  },
  {
    "text": "you to stop whatever it is that you're doing because now you have to call in to try pass and you have to set up an out parameter and you have to check you know",
    "start": "2101780",
    "end": "2108350"
  },
  {
    "text": "did it return true or false and what do I do when it returns true and what do I do when it returns false and you know",
    "start": "2108350",
    "end": "2114080"
  },
  {
    "text": "that's just a bother so what we're gonna do here instead of is just gonna say well if try pass returns true we know",
    "start": "2114080",
    "end": "2119990"
  },
  {
    "text": "that we have an integer so we'll just return a populated maybe event with that integer inside of it and if it's false",
    "start": "2119990",
    "end": "2126260"
  },
  {
    "text": "we'll just return it an empty one and you can do the same thing with other passing things so we can do try path",
    "start": "2126260",
    "end": "2131420"
  },
  {
    "text": "dates exactly the same idea so am now if you imagine that you have a you",
    "start": "2131420",
    "end": "2137030"
  },
  {
    "text": "have to ride a car rental service and the first thing you're going to do when",
    "start": "2137030",
    "end": "2142190"
  },
  {
    "text": "a user starts using your service is you're calling this method of they're called collect date and what collect",
    "start": "2142190",
    "end": "2147950"
  },
  {
    "text": "dates will do is it'll ask the user please input the date from which you'd",
    "start": "2147950",
    "end": "2153290"
  },
  {
    "text": "like to rent a car and the user types in a date and that returns a string and then you just you know call try past age",
    "start": "2153290",
    "end": "2160609"
  },
  {
    "text": "with that string and then you get a maybe update time and the next question you ask then is say well please input",
    "start": "2160609",
    "end": "2165740"
  },
  {
    "text": "the number of days you'd like to rent the car and the user types that in and that's a string and you pass that string",
    "start": "2165740",
    "end": "2170750"
  },
  {
    "text": "as an argument to the try pass in method and you get a maybe event and so on you can keep on sort of doing you know",
    "start": "2170750",
    "end": "2177230"
  },
  {
    "text": "collecting data in this way so it met let's imagine that you do that now what you really want to do is you want to you",
    "start": "2177230",
    "end": "2183440"
  },
  {
    "text": "know compose all of that possible data or hypothetical data into a contract",
    "start": "2183440",
    "end": "2189200"
  },
  {
    "text": "because the contract has some methods that will need enable you to calculate prices and stuff like that so we can do",
    "start": "2189200",
    "end": "2195319"
  },
  {
    "text": "that with their query syntax here so we can say from D and M D now D is a",
    "start": "2195319",
    "end": "2201260"
  },
  {
    "text": "date/time object if it's there and we can say from I in M I because this is a monad and I is an integer and then you",
    "start": "2201260",
    "end": "2208609"
  },
  {
    "text": "can go select new contract and all of this stuff creates a maybe of contract and the maybe of contract will be",
    "start": "2208609",
    "end": "2215059"
  },
  {
    "text": "populated if all the other maybes were populated and if one of them is is empty the maybe of contract we all will also",
    "start": "2215059",
    "end": "2221630"
  },
  {
    "text": "be empty so this is a pretty nice will understood easy way to do a little bit",
    "start": "2221630",
    "end": "2227359"
  },
  {
    "text": "of input validation if you need to so so far so good but then what people often run into is the this thing where I",
    "start": "2227359",
    "end": "2233780"
  },
  {
    "text": "disabled the contract has a method called calculate price and I'd like to calculate the price because I want to",
    "start": "2233780",
    "end": "2238849"
  },
  {
    "text": "show the customer or I want to show the user a quote so you'll often see people trying to do something like this where",
    "start": "2238849",
    "end": "2244940"
  },
  {
    "text": "they say let's try to declare a decimal Q for quote and let's see if the maybe",
    "start": "2244940",
    "end": "2251000"
  },
  {
    "text": "contract has the item and let's try to pull the item out of the maybe of contract and call its calculate price",
    "start": "2251000",
    "end": "2257030"
  },
  {
    "text": "because I need to call calculate price this doesn't compile and and this",
    "start": "2257030",
    "end": "2265320"
  },
  {
    "text": "deliberately doesn't compile because I designed maybe of T so that has item and item are not publicly available this is",
    "start": "2265320",
    "end": "2272820"
  },
  {
    "text": "PI designed because you're not supposed to do this because again this leads to brittle code because what do you do if",
    "start": "2272820",
    "end": "2278820"
  },
  {
    "text": "that if expression returns false what are you going to which value are you",
    "start": "2278820",
    "end": "2284190"
  },
  {
    "text": "going to give to Q if if this turns out not to be the case if has item is false",
    "start": "2284190",
    "end": "2290270"
  },
  {
    "text": "are you going to throw an exception again are you gonna create one of those minefields for me again you're not",
    "start": "2290270",
    "end": "2295589"
  },
  {
    "text": "supposed to do this this this is not a good way of structuring code so by design this is not compatible so we'll",
    "start": "2295589",
    "end": "2304050"
  },
  {
    "text": "sort of need to reset things a little bit and say well what else can we do well you could perform a structure",
    "start": "2304050",
    "end": "2309300"
  },
  {
    "text": "preserving map so you could just say let's just call select and inside select you can call calculate price and that",
    "start": "2309300",
    "end": "2315270"
  },
  {
    "text": "just transforms your maybe of contract into maybe of decimal this is completely safe there's no if-else things you need",
    "start": "2315270",
    "end": "2322170"
  },
  {
    "text": "to do in order to to make sure that this works either this lambda expression runs",
    "start": "2322170",
    "end": "2327690"
  },
  {
    "text": "or it doesn't but in either case nothing is going to blow up you know everything's just gonna be fine",
    "start": "2327690",
    "end": "2334369"
  },
  {
    "text": "so this basically the answers the question how do I get the value out of my monad well you don't you inject the",
    "start": "2334369",
    "end": "2340890"
  },
  {
    "text": "desired behavior into the monad so what you sort of did here was that I took my you know calculate price and let's just",
    "start": "2340890",
    "end": "2346950"
  },
  {
    "text": "put it inside that select method and I say well if it needs to run it'll run and if it can't run it'll not run and",
    "start": "2346950",
    "end": "2353010"
  },
  {
    "text": "everything is safe so we're never leaving the monad we're not pulling data out of the moment we're",
    "start": "2353010",
    "end": "2358530"
  },
  {
    "text": "putting behavior into it instead so that's that's what you're supposed to do so that's the you know how do I do X you",
    "start": "2358530",
    "end": "2366420"
  },
  {
    "text": "don't do X you do set and that will enable you to do Y that's X Y problem",
    "start": "2366420",
    "end": "2371540"
  },
  {
    "text": "let's see how much time do I have okay now I know what you're gonna say",
    "start": "2371540",
    "end": "2377160"
  },
  {
    "text": "they say well but also my didn't need a result because I need to put something on the screen so that the user can actually see the the the code and you",
    "start": "2377160",
    "end": "2384420"
  },
  {
    "text": "know a computer may be off decimal on the screen I need something else okay now I get it there's a reasonable you",
    "start": "2384420",
    "end": "2390990"
  },
  {
    "text": "know criticism here let's go back to collections for a little while and say well what if you have a collection of numbers and you say I'm",
    "start": "2390990",
    "end": "2397740"
  },
  {
    "text": "not gonna put all those numbers on the screen I need a result well you know if the result you need is just the sum of",
    "start": "2397740",
    "end": "2404430"
  },
  {
    "text": "the numbers you can just call that sum that's a specialized extension method available and you just get that so you",
    "start": "2404430",
    "end": "2409530"
  },
  {
    "text": "could do something like that but what if your requirement is a little bit different what do you say well for",
    "start": "2409530",
    "end": "2414930"
  },
  {
    "text": "example you say I'd like to return the product of all the numbers there's not a specialized you know product extension",
    "start": "2414930",
    "end": "2422580"
  },
  {
    "text": "method like the some one here but what you can't do is there is a general purpose thing that enables you to",
    "start": "2422580",
    "end": "2428160"
  },
  {
    "text": "aggregate you know things together and funny enough that method is called aggregate so with the aggregate method",
    "start": "2428160",
    "end": "2434970"
  },
  {
    "text": "what you do is you give it a little function like a lambda expression up here that says you know whenever I have",
    "start": "2434970",
    "end": "2440730"
  },
  {
    "text": "two elements how to combine those into one and in this case I'm just saying we'll just multiply them together so",
    "start": "2440730",
    "end": "2448320"
  },
  {
    "text": "this will work you know without the seed I'll get back to that seed in a moment this will work for any populated",
    "start": "2448320",
    "end": "2454580"
  },
  {
    "text": "collection of numbers now if the collection is empty which is not right here I know there's six elements but if",
    "start": "2454580",
    "end": "2460950"
  },
  {
    "text": "you imagine that array was empty that lambda expression would not be able to run and then the aggregate will throw an",
    "start": "2460950",
    "end": "2466560"
  },
  {
    "text": "exception but if you use that overload that takes a seed it'll just return the seed so it just starts by one and incest",
    "start": "2466560",
    "end": "2472950"
  },
  {
    "text": "you know 1 times minus 3 is minus 3 and then it goes again and it says minus 3 times 7 is you know minus 21 and so on",
    "start": "2472950",
    "end": "2479640"
  },
  {
    "text": "but ultimately in this case it's super boring it just returns 0 because that's there's a Serie there but the concept of",
    "start": "2479640",
    "end": "2485960"
  },
  {
    "text": "trying to aggregate you know a variable number of elements we could sort of take",
    "start": "2485960",
    "end": "2491130"
  },
  {
    "text": "that idea and translate it back into maybe but I'm not gonna call the method aggregate I'm gonna call it match and",
    "start": "2491130",
    "end": "2497010"
  },
  {
    "text": "there was this reason for that I'll talk about that a little bit later so it looks a little bit different but notice",
    "start": "2497010",
    "end": "2503220"
  },
  {
    "text": "that this is an instance method on maybe of T that returns a T result and no",
    "start": "2503220",
    "end": "2508980"
  },
  {
    "text": "matter whether they maybe is empty or populated we are gonna need a TV solve",
    "start": "2508980",
    "end": "2514170"
  },
  {
    "text": "that's the guarantee this is the invariant and basically we just have you know a single line of code here that",
    "start": "2514170",
    "end": "2520080"
  },
  {
    "text": "does that we say if has item that's the flag if that's true we know that item is",
    "start": "2520080",
    "end": "2525600"
  },
  {
    "text": "available and then we have this little function sitting out there that has a weird name it's called just there's reason for that",
    "start": "2525600",
    "end": "2531840"
  },
  {
    "text": "sort of an odd name but we can just call that function just on item item is of the type T just turns it into a type of",
    "start": "2531840",
    "end": "2538950"
  },
  {
    "text": "a value of T result and that's what we need to return so that's good now if the",
    "start": "2538950",
    "end": "2543960"
  },
  {
    "text": "flag is false we don't have an item but then we have that nothing value of there this sort of like corresponds to the",
    "start": "2543960",
    "end": "2549960"
  },
  {
    "text": "seed in the aggregate method you just saw and move just return that so no matter whether we have a populated or an",
    "start": "2549960",
    "end": "2556320"
  },
  {
    "text": "empty maybe this match method will be safe to call if you give it the appropriate input arguments so we'll get",
    "start": "2556320",
    "end": "2563400"
  },
  {
    "text": "back to that in a little while but now we'll get back to the or we'll start the third part of the talk where we'll go",
    "start": "2563400",
    "end": "2569580"
  },
  {
    "text": "back to this question how to combine dependency injection with async and a weight without leaky abstractions because now we know how to do this or",
    "start": "2569580",
    "end": "2577110"
  },
  {
    "text": "you may say well I don't but I do so maybe you don't yet but in ten minutes you will alright so we we cut we came",
    "start": "2577110",
    "end": "2585360"
  },
  {
    "text": "from this situation where we were told that when you do async it has to be a",
    "start": "2585360",
    "end": "2591300"
  },
  {
    "text": "sink all the way and that is true but there's a way we can sort of invert how",
    "start": "2591300",
    "end": "2596370"
  },
  {
    "text": "things work so that our business logic doesn't have to be asynchronous and the",
    "start": "2596370",
    "end": "2604610"
  },
  {
    "text": "overall idea is that we move what we do this is sort of like a catchphrase in functional programming move impure",
    "start": "2604610",
    "end": "2611190"
  },
  {
    "text": "operations to the boundary of the system but what we do here is actually also a",
    "start": "2611190",
    "end": "2617340"
  },
  {
    "text": "good idea in object-oriented programming because the idea is that we just take you know whatever interacts with the",
    "start": "2617340",
    "end": "2623100"
  },
  {
    "text": "real world and we put that at the boundary of the system and this is known as the portion adapters architecture",
    "start": "2623100",
    "end": "2628350"
  },
  {
    "text": "which is a well-known object oriented architecture so we're still you know on familiar ground or we ought to believe",
    "start": "2628350",
    "end": "2635700"
  },
  {
    "text": "that we are now what's an impure operation I haven't told you but I'm just trying to illustrate that by",
    "start": "2635700",
    "end": "2641550"
  },
  {
    "text": "examples because there's two way an operation can be impure and we have both if we have examples of both of those",
    "start": "2641550",
    "end": "2647850"
  },
  {
    "text": "ways in this try accept method that belongs to the Maitre D' object here as I'll just talk about impure operations",
    "start": "2647850",
    "end": "2654870"
  },
  {
    "text": "by way of example the first one is read reservations a function should",
    "start": "2654870",
    "end": "2661440"
  },
  {
    "text": "or normally be pure but one way it can't it can be impure is if it's non",
    "start": "2661440",
    "end": "2666750"
  },
  {
    "text": "deterministic so determinism is something we define by saying well if a",
    "start": "2666750",
    "end": "2672780"
  },
  {
    "text": "function always returns the same output for the same input then we say that that function is deterministic you know two",
    "start": "2672780",
    "end": "2679170"
  },
  {
    "text": "plus two is always four so that sort of seems reasonable but when you call a something like read reservations on a",
    "start": "2679170",
    "end": "2686250"
  },
  {
    "text": "repository and that's that's going to go and query a database and it's it's gonna say well okay whatever is in the",
    "start": "2686250",
    "end": "2692069"
  },
  {
    "text": "database that's what you've got to get returned you can now call that method multiple times and it may give you",
    "start": "2692069",
    "end": "2698460"
  },
  {
    "text": "different responses even though the input is the same because the state of the database is changing in the meantime",
    "start": "2698460",
    "end": "2704220"
  },
  {
    "text": "and we don't consider the state of the database to be part of the function so for that matter we consider such a",
    "start": "2704220",
    "end": "2710400"
  },
  {
    "text": "function of such an operation to be impure because it's non-deterministic so we want to move this to the boundary of",
    "start": "2710400",
    "end": "2716730"
  },
  {
    "text": "the system and you know what the boundary of this system is I'll get back to that but that's basically the post method now we have another example where",
    "start": "2716730",
    "end": "2724160"
  },
  {
    "text": "something is impure and that's the create method and this one is impure for a different reason and this is impure",
    "start": "2724160",
    "end": "2731400"
  },
  {
    "text": "because what the create method does it it creates the reservation in the repository so it probably adds a row to",
    "start": "2731400",
    "end": "2737520"
  },
  {
    "text": "the database so doing something like that is a side-effect and that means",
    "start": "2737520",
    "end": "2743339"
  },
  {
    "text": "every time you call that method you in you know you incur a side-effect and that's another reason why we would",
    "start": "2743339",
    "end": "2749730"
  },
  {
    "text": "consider things to be impure so both of these things would I don't want to get",
    "start": "2749730",
    "end": "2754950"
  },
  {
    "text": "rid of them because this is required behavior we need this software to behave in this particular way but I just don't",
    "start": "2754950",
    "end": "2760950"
  },
  {
    "text": "want to have those method calls sitting in that try accept method I want to move them to another part of my system",
    "start": "2760950",
    "end": "2767450"
  },
  {
    "text": "architecture so we'll start with the first one but yes this one is the easiest one to move you'll notice that",
    "start": "2767450",
    "end": "2773839"
  },
  {
    "text": "this method call always happens there's no conditions that guards against",
    "start": "2773839",
    "end": "2779670"
  },
  {
    "text": "whether or not this is possible this always happens so you might say why does the try accept method even need to do",
    "start": "2779670",
    "end": "2785430"
  },
  {
    "text": "this why is it that objects responsibility it just wants to make a",
    "start": "2785430",
    "end": "2790500"
  },
  {
    "text": "business decision why does it need to go and sort of pretend that it's interacting with the database couldn't we just make that a requirement",
    "start": "2790500",
    "end": "2797359"
  },
  {
    "text": "for calling the try/except method that that data is available and we don't really care where the data comes from so",
    "start": "2797359",
    "end": "2804109"
  },
  {
    "text": "we could we can just you know instead of calling the method will just say well that data those reservations should be",
    "start": "2804109",
    "end": "2809690"
  },
  {
    "text": "part of you know the arguments that you supply in order to call the try/except",
    "start": "2809690",
    "end": "2815090"
  },
  {
    "text": "method so that's pretty easy now there's one problem though you know sometimes things have to get worse",
    "start": "2815090",
    "end": "2820520"
  },
  {
    "text": "before they get better and the the problem now is that in order for everything to compile we'll have to",
    "start": "2820520",
    "end": "2827090"
  },
  {
    "text": "change the IMH of the interface because I added that argument to the try/except method and you know it has to I also",
    "start": "2827090",
    "end": "2834560"
  },
  {
    "text": "have to add it here to the interface otherwise it's not going to work so at this point if you say well you know this",
    "start": "2834560",
    "end": "2842060"
  },
  {
    "text": "is a leaky abstraction if I ever seen one if that would be counter to my menu",
    "start": "2842060",
    "end": "2847070"
  },
  {
    "text": "by doing this I would completely agree yes this is a leaky abstraction now I'm only doing you know I'm doing a",
    "start": "2847070",
    "end": "2853400"
  },
  {
    "text": "series of refactorings and I'm only started onto them and I'm going to do more so this is just the first step",
    "start": "2853400",
    "end": "2858830"
  },
  {
    "text": "towards something better but right now it looks pretty bad so just trust me it's gonna be better once we once I'm",
    "start": "2858830",
    "end": "2864500"
  },
  {
    "text": "done with all the refactoring so we'll just move on and pretend nothing happened but if we do something like",
    "start": "2864500",
    "end": "2870440"
  },
  {
    "text": "this we can go to the boundary of the system this is where we receive that incoming JSON document and we could say",
    "start": "2870440",
    "end": "2876920"
  },
  {
    "text": "well we already have a Maitre D' and inject it we might as well just inject the repository as well if we do that we",
    "start": "2876920",
    "end": "2883339"
  },
  {
    "text": "can call you know read reservations here so it just moves the method call to that method instead and then you know I can",
    "start": "2883339",
    "end": "2890150"
  },
  {
    "text": "pass those reservations as an input argument to try accept and read the rest of the code is the same so that wasn't",
    "start": "2890150",
    "end": "2896750"
  },
  {
    "text": "hard it's just a question of where do you think that responsibility should lie and there's a lot of reasons why you",
    "start": "2896750",
    "end": "2903500"
  },
  {
    "text": "might actually argue that this it's it's better here you might disagree but we",
    "start": "2903500",
    "end": "2910310"
  },
  {
    "text": "can always take that discussion you know the rest of the day if you if you want to so so that's one of the impure",
    "start": "2910310",
    "end": "2918230"
  },
  {
    "text": "operations now move to the boundary of the system so we'll need to go back and look at the other one I'll just want to",
    "start": "2918230",
    "end": "2923690"
  },
  {
    "text": "remind you of one thing before we move on after we've called try/except we",
    "start": "2923690",
    "end": "2929359"
  },
  {
    "text": "this novel end and you notice just remember that we're doing a check on",
    "start": "2929359",
    "end": "2934999"
  },
  {
    "text": "whether it's null and if we decide that it's not null it's okay to access ID that value to get the reservation ID out",
    "start": "2934999",
    "end": "2942349"
  },
  {
    "text": "of it and that's what needs to go into the 200 okay response kind of make some changes here so it's just important that",
    "start": "2942349",
    "end": "2948859"
  },
  {
    "text": "you remember that that's we need to retain that behavior all right so how do",
    "start": "2948859",
    "end": "2956180"
  },
  {
    "text": "we move repository create to the bounty of the system this one is a little bit harder because there's a condition that",
    "start": "2956180",
    "end": "2962989"
  },
  {
    "text": "might prevent this from happening this doesn't happen all the time this only happens some of the times so if we want",
    "start": "2962989",
    "end": "2970999"
  },
  {
    "text": "to move repository create to the boundary of the system we need to communicate our decision so that you",
    "start": "2970999",
    "end": "2977749"
  },
  {
    "text": "know the kola of try/except can say well if we decided to accept the reservation we should call repository create and if",
    "start": "2977749",
    "end": "2984709"
  },
  {
    "text": "we decided not to we shouldn't so how do we communicate our decision to the caller of this method well we we already",
    "start": "2984709",
    "end": "2991519"
  },
  {
    "text": "do that because we return this novel of Ind that's how we've communicated it so far said well if you get an integer you",
    "start": "2991519",
    "end": "2997640"
  },
  {
    "text": "have a reservation if you don't get an integer you don't but the problem with",
    "start": "2997640",
    "end": "3002739"
  },
  {
    "text": "this is that if I move the respond go back here if I move if I move repository",
    "start": "3002739",
    "end": "3007900"
  },
  {
    "text": "create to the boundary of the system you know that method that is the method that produces the integer enough if I move",
    "start": "3007900",
    "end": "3014529"
  },
  {
    "text": "create to another place I will no longer have an integer so I have this problem that right now I'm returning novel of",
    "start": "3014529",
    "end": "3021279"
  },
  {
    "text": "int and that's fine but in general we have this problem with nullable of T is that T must be a struct so if I want to",
    "start": "3021279",
    "end": "3027549"
  },
  {
    "text": "use this type of signal signalling but I want to return something that is not a value type I can't use novel of T but I",
    "start": "3027549",
    "end": "3035529"
  },
  {
    "text": "could use maybe of T so the first thing I'm going to do is I'm kind of change my novel of int into a maybe of in just to",
    "start": "3035529",
    "end": "3042130"
  },
  {
    "text": "make sure that the next step in my refactorings can work as intended but the first step is just gonna be this one",
    "start": "3042130",
    "end": "3048969"
  },
  {
    "text": "so if you just pay attention to the top line there where you can see the return values the task of inaudible of int I'm",
    "start": "3048969",
    "end": "3054339"
  },
  {
    "text": "gonna change that to a task of a maybe event and the only thing that's that really changed was just that instead of",
    "start": "3054339",
    "end": "3059829"
  },
  {
    "text": "returning no I'm returning and maybe of Ind and in the bottom there instead of just returning the int and",
    "start": "3059829",
    "end": "3066330"
  },
  {
    "text": "that gets you know converted into an orb of ind i now take the ID that get that I get from the create method and I wrap that",
    "start": "3066330",
    "end": "3073770"
  },
  {
    "text": "in a populated maybe event so this still requires me to change the I'm a 2d",
    "start": "3073770",
    "end": "3079830"
  },
  {
    "text": "interface and again you know we'll just pretend that nothing happened here it's not interesting to look at we'll just",
    "start": "3079830",
    "end": "3085380"
  },
  {
    "text": "move on and see what happens now the problem that we're having now is that the return type of try/except is a maybe",
    "start": "3085380",
    "end": "3093810"
  },
  {
    "text": "event and as you remember before what we did is we checked whether it was no or not and only if we decided that it was",
    "start": "3093810",
    "end": "3100590"
  },
  {
    "text": "not null we could now go ID dot value so basically what we did before we try to get the value out of the monad you know",
    "start": "3100590",
    "end": "3106950"
  },
  {
    "text": "the novel of T but a very deliberately design may be so then that's not possible so how do we deal with this",
    "start": "3106950",
    "end": "3112770"
  },
  {
    "text": "well this is where that match method comes in so we'll just kind of call you know return we're gonna return m dot",
    "start": "3112770",
    "end": "3119610"
  },
  {
    "text": "match so we want match to produce and a task of I action results so I'm gonna",
    "start": "3119610",
    "end": "3126600"
  },
  {
    "text": "use named arguments I'm just gonna say on the nothing case will return internal server error that's you know a helper",
    "start": "3126600",
    "end": "3133140"
  },
  {
    "text": "method that produces one of those I action results and in the other case in the just case I have to supply a little",
    "start": "3133140",
    "end": "3139950"
  },
  {
    "text": "function that receives an integer input argument and then returns an I action we solve this output so I was just going to",
    "start": "3139950",
    "end": "3145590"
  },
  {
    "text": "write the lambda expression that receives the ID and returns okay with that ID so I don't have to go like ID",
    "start": "3145590",
    "end": "3151170"
  },
  {
    "text": "dot value as stuff like that before this is completely safe if you you know call",
    "start": "3151170",
    "end": "3156630"
  },
  {
    "text": "the match method with the appropriate arguments and you're not trying to cheat it by passing in all or something like that now this is never gonna throw an",
    "start": "3156630",
    "end": "3163080"
  },
  {
    "text": "exception well never but you can always do funny things inside of this but it's much safer to do it in this way so so",
    "start": "3163080",
    "end": "3173460"
  },
  {
    "text": "now we're in the position to move repository create and basically this is the as you can tell this is the the code",
    "start": "3173460",
    "end": "3180000"
  },
  {
    "text": "that produces that ID that that integer so if I remove this method call from here and move it to somewhere else I no",
    "start": "3180000",
    "end": "3186300"
  },
  {
    "text": "longer have an ID ID I no longer have an int so what I'm going to do instead is I'm going to return a maybe of",
    "start": "3186300",
    "end": "3192330"
  },
  {
    "text": "reservation so I'm just saying if I decide not to accept the servation I'm gonna return a maybe of",
    "start": "3192330",
    "end": "3197349"
  },
  {
    "text": "reservation that's not populated and otherwise I'm returning a populated one and again we'll have to change that I'm",
    "start": "3197349",
    "end": "3204430"
  },
  {
    "text": "a treaty interface not so interesting but what we have now is a maybe of reservation and again I'll remind you",
    "start": "3204430",
    "end": "3211420"
  },
  {
    "text": "that the the contract that we have with any HTTP client that calls this behavior",
    "start": "3211420",
    "end": "3218290"
  },
  {
    "text": "is that in the case where everything goes well if we return 200 okay we're supposed to put that integer that",
    "start": "3218290",
    "end": "3224890"
  },
  {
    "text": "reservation ID into the 200 okay response body and right now we don't have a maybe of reservation where we",
    "start": "3224890",
    "end": "3231670"
  },
  {
    "text": "don't have a maybe of ins we have a maybe a reservation so how do we turn a maybe a reservation into a maybe of end",
    "start": "3231670",
    "end": "3238079"
  },
  {
    "text": "well we have that select method so we can just call that and we can say let's call select and inside of select we can",
    "start": "3238079",
    "end": "3244300"
  },
  {
    "text": "call repository create so this is that lamp expression is only gonna run if the maybe of reservation is populated and",
    "start": "3244300",
    "end": "3251920"
  },
  {
    "text": "it's not gonna run if it's not so instead of again having to write all those if-else expressions explicitly you",
    "start": "3251920",
    "end": "3258520"
  },
  {
    "text": "just rely on the fact that that's what select does so now we have a maybe event we're not really we have we actually",
    "start": "3258520",
    "end": "3265299"
  },
  {
    "text": "have a maybe of a task of an imp because this is asynchronous but we already",
    "start": "3265299",
    "end": "3270910"
  },
  {
    "text": "established that task is a monad maybe as a monad and you can't infer that that",
    "start": "3270910",
    "end": "3276609"
  },
  {
    "text": "it's you know a combination of those things will also form a monad it's not always the case it doesn't have to be",
    "start": "3276609",
    "end": "3281859"
  },
  {
    "text": "the case but in this case it is so this is also a monad so we're still in just monadic territory so everything is good",
    "start": "3281859",
    "end": "3288030"
  },
  {
    "text": "so we can match on that and this gets a little bit it looks a little bit awkward here the code is not the prettiest but",
    "start": "3288030",
    "end": "3294010"
  },
  {
    "text": "we can clean it up in a little while and it'll be pretty again but the funny",
    "start": "3294010",
    "end": "3299349"
  },
  {
    "text": "thing is though that now we have a compiler warning the compiler will actually tells us tell us then you know try accept this async method lacks a",
    "start": "3299349",
    "end": "3306520"
  },
  {
    "text": "wait operators and it does it says async up there but there's no await going on",
    "start": "3306520",
    "end": "3312309"
  },
  {
    "text": "at all nothing is available and you know are very deliberately aimed after this",
    "start": "3312309",
    "end": "3317980"
  },
  {
    "text": "because I was really annoyed that my you know domain logic had to be synchronous but now it's not so we can just let's",
    "start": "3317980",
    "end": "3325329"
  },
  {
    "text": "not have it asynchronous let's just turn it back into be synchronous domain decisions because that's all it needs to",
    "start": "3325329",
    "end": "3331269"
  },
  {
    "text": "be and again we'll go and change the homage of the interface but let's just skip that and the only change we need to",
    "start": "3331269",
    "end": "3337509"
  },
  {
    "text": "do here is we just have to remove the away keyword in front of try/except so it's just goes like this all right a few",
    "start": "3337509",
    "end": "3346239"
  },
  {
    "text": "other things we're basically done at this point but we can go back and look at the maitre d try/except",
    "start": "3346239",
    "end": "3352149"
  },
  {
    "text": "implementation and we'll notice another thing and that is that injected repository there is not being used so we",
    "start": "3352149",
    "end": "3360039"
  },
  {
    "text": "might as well just remove that dependency because that that'll make our code simpler so what we have now is",
    "start": "3360039",
    "end": "3365369"
  },
  {
    "text": "close to something called a pure function it's not quite pure because on the penultimate line there there we have",
    "start": "3365369",
    "end": "3371619"
  },
  {
    "text": "a little bit of state mutation going on but this is something you could refactor and make it pure if you if you'd like to",
    "start": "3371619",
    "end": "3377499"
  },
  {
    "text": "but the important part of this state is that the try/except method here is",
    "start": "3377499",
    "end": "3384009"
  },
  {
    "text": "completely deterministic you know what happens here is entirely determined by",
    "start": "3384009",
    "end": "3389019"
  },
  {
    "text": "the input arguments so you can completely control you know in which a branch it'll execute just by making sure",
    "start": "3389019",
    "end": "3395859"
  },
  {
    "text": "that it gets the right input arguments so this is interesting if you go and look at the post method on our",
    "start": "3395859",
    "end": "3402159"
  },
  {
    "text": "controller here because you might say why do we even have that I'm a treaty dependency and you may say well that's",
    "start": "3402159",
    "end": "3408880"
  },
  {
    "text": "because I want to support unit testing I want to be able to make sure that the maitre d has you know deterministic",
    "start": "3408880",
    "end": "3415149"
  },
  {
    "text": "behavior so that I can you know reproduce various different test cases but the implementation that we now have",
    "start": "3415149",
    "end": "3422859"
  },
  {
    "text": "is already deterministic which means you can completely control it just by making sure that it receives the appropriate",
    "start": "3422859",
    "end": "3429219"
  },
  {
    "text": "input values so I'd say well let's not have that dependency let's just new a new up maitre T as we go along because",
    "start": "3429219",
    "end": "3436209"
  },
  {
    "text": "this will be as unit testable as the previous thing you can completely control what's happens here because it's",
    "start": "3436209",
    "end": "3442449"
  },
  {
    "text": "its deterministic so I've removed the I'm a 2d dependency so if you do this",
    "start": "3442449",
    "end": "3450069"
  },
  {
    "text": "consistently all over your codebase you don't need that interface but just get rid of it so that's why I said don't",
    "start": "3450069",
    "end": "3456130"
  },
  {
    "text": "worry about this because in the end it's not gonna matter now we still have the Maitre D' object so we still have the",
    "start": "3456130",
    "end": "3461380"
  },
  {
    "text": "domain logic encapsulated somewhere but we don't need a you know an artificial interface to model that",
    "start": "3461380",
    "end": "3467630"
  },
  {
    "text": "sort of things now the last thing we can do yep I have a couple of minutes the",
    "start": "3467630",
    "end": "3473930"
  },
  {
    "text": "last thing we could do is just to clean up the code a little bit because it looks a little bit odd particularly I don't like the match thing with tasks",
    "start": "3473930",
    "end": "3481010"
  },
  {
    "text": "from resolves and stuff like that so we'll clean it up a little bit and I don't have time to explain exactly how",
    "start": "3481010",
    "end": "3486289"
  },
  {
    "text": "that cleanup works but I have a blog post where you can see all the details of that but basically what we have now",
    "start": "3486289",
    "end": "3492740"
  },
  {
    "text": "we just have a pipeline of things that's that's executing one after the other and you notice it starts by saying",
    "start": "3492740",
    "end": "3498500"
  },
  {
    "text": "repository dot read reservations and then it just goes start select start select many and so on so since we're",
    "start": "3498500",
    "end": "3504079"
  },
  {
    "text": "using selecting select many there must be a moon at being used here and the Monad is the task of team o-net or the",
    "start": "3504079",
    "end": "3510890"
  },
  {
    "text": "asynchronous monad so everything that needs to be asynchronous is asynchronous you know we start by calling repository",
    "start": "3510890",
    "end": "3517430"
  },
  {
    "text": "to read reservations that is an asynchronous read and then we go and call Maitre D' to try accept and notice",
    "start": "3517430",
    "end": "3524089"
  },
  {
    "text": "we've just injected to try accept domain logic into this asynchronous context and it doesn't know that it's running in",
    "start": "3524089",
    "end": "3530539"
  },
  {
    "text": "that asynchronous context it's an asynchronous method call but it's running in that context and then you go",
    "start": "3530539",
    "end": "3536930"
  },
  {
    "text": "in the next line there you go don't worry about what trove traverses but you can see repository creates it's there",
    "start": "3536930",
    "end": "3542470"
  },
  {
    "text": "towards the right there and that again is an asynchronous right if it ever",
    "start": "3542470",
    "end": "3547849"
  },
  {
    "text": "happens because it might not actually happen because there's a maybe involved as well and then the entire thing is",
    "start": "3547849",
    "end": "3554029"
  },
  {
    "text": "asynchronous as well it returns a task of action results so all the stuff that needs to be asynchronous is still",
    "start": "3554029",
    "end": "3560299"
  },
  {
    "text": "asynchronous you are still asynchronous all the way but we've inverted things in such a way that Maitre D'",
    "start": "3560299",
    "end": "3566990"
  },
  {
    "text": "you know the domain logic is not asynchronous doesn't have to be it's just living inside that context so how",
    "start": "3566990",
    "end": "3574369"
  },
  {
    "text": "do we combine dependency injection with async and a weight without leaky abstractions well we inject the desired",
    "start": "3574369",
    "end": "3579740"
  },
  {
    "text": "behavior into the async monad and we sort of knew this already because that's",
    "start": "3579740",
    "end": "3584990"
  },
  {
    "text": "this is just a specialization on this more general answer you didn't take the desired behavior into the monad so",
    "start": "3584990",
    "end": "3591400"
  },
  {
    "text": "behavior injection not dependency injection so um so that's basically it if you were",
    "start": "3591400",
    "end": "3598630"
  },
  {
    "text": "interested in learning more about this stuff I have tons of articles on blog deployed a DK that will walk you through",
    "start": "3598630",
    "end": "3604420"
  },
  {
    "text": "all of this including all the code that I've shown you here today and the code is on github as well I'm out of time so",
    "start": "3604420",
    "end": "3610839"
  },
  {
    "text": "I'm not going to take questions but I'll be around at the conference the entire day and you can just come and talk to me and ask me questions and I'll be happy",
    "start": "3610839",
    "end": "3617109"
  },
  {
    "text": "to help you out in any way that I can so thank you all for coming and I hope you have a great day today",
    "start": "3617109",
    "end": "3622230"
  },
  {
    "text": "[Applause]",
    "start": "3622230",
    "end": "3631469"
  }
]