[
  {
    "text": "okay well welcome everybody looks like there are still a couple more seats I see one two three four five and a couple",
    "start": "9610",
    "end": "16910"
  },
  {
    "text": "in the middle on this side but thanks so much for coming out and joining me today where we'll be talking about correcting",
    "start": "16910",
    "end": "23509"
  },
  {
    "text": "common mistakes when using async and await in dotnet my name is Brandon",
    "start": "23509",
    "end": "28699"
  },
  {
    "text": "Minich I work as a developer advocate at Microsoft and on the bottom of the slide so that you'll notice a couple links on",
    "start": "28699",
    "end": "35360"
  },
  {
    "text": "the bottom right this is a web page I put together just for us just for today this is where you can go to find all the",
    "start": "35360",
    "end": "43039"
  },
  {
    "text": "things that we're going to discuss so this is where you can find the slides we're gonna do some live coding demos",
    "start": "43039",
    "end": "48289"
  },
  {
    "text": "they're all open source got them all linked to there and if you want to keep going down the async/await",
    "start": "48289",
    "end": "54079"
  },
  {
    "text": "rabbit hole I've also linked a bunch of articles there that I used when I was learning more about async and await so",
    "start": "54079",
    "end": "61579"
  },
  {
    "text": "highly recommend checking those out because it's a pretty complex topic so",
    "start": "61579",
    "end": "67990"
  },
  {
    "text": "this is a subject that's near and dear to my heart and I say that because everything we're going over today are",
    "start": "67990",
    "end": "75369"
  },
  {
    "text": "actual mistakes that I've made in my apps I am a mobile developer by trade I like",
    "start": "75369",
    "end": "81770"
  },
  {
    "text": "to make iOS and Android apps in c-sharp using xamarin and I just remember",
    "start": "81770",
    "end": "89060"
  },
  {
    "text": "getting back these the weirdest stack traces the rudest weirdest crash reports from my users after publishing my first",
    "start": "89060",
    "end": "95660"
  },
  {
    "text": "app and it was things like exceptions that shouldn't have been happening or my app was somehow getting into a",
    "start": "95660",
    "end": "102440"
  },
  {
    "text": "weird state that when I compared the stack trace to the code I'm looking at him going there's no way the app can",
    "start": "102440",
    "end": "108800"
  },
  {
    "text": "ever get into that state because the code shouldn't allow it like what is happening and it really wasn't until I",
    "start": "108800",
    "end": "116360"
  },
  {
    "text": "started kind of pulling back the covers on async and await to see how exactly",
    "start": "116360",
    "end": "121520"
  },
  {
    "text": "the compiler handles async and wait how's it really working under the hood until I realize like wow okay I'm I'm",
    "start": "121520",
    "end": "128030"
  },
  {
    "text": "making a lot of mistakes so thanks for joining me today I wanted to share those with you and let's kick it off just by",
    "start": "128030",
    "end": "134930"
  },
  {
    "text": "talking about multi-threading so a thread think of it just as a chunk of",
    "start": "134930",
    "end": "140989"
  },
  {
    "text": "code so threat basically just contains a chunk of code that's going to go through a CPU and the CPU will execute whatever it",
    "start": "140989",
    "end": "148040"
  },
  {
    "text": "tells it to do so it could be a couple methods or functions but we can have",
    "start": "148040",
    "end": "153050"
  },
  {
    "text": "multiple threads with multiple chunks of code and nowadays with multi-core processors if you have say a four CPU or",
    "start": "153050",
    "end": "161330"
  },
  {
    "text": "a four core CPU well that means you can have four threads going through each core simultaneously so multi-threading",
    "start": "161330",
    "end": "168170"
  },
  {
    "text": "means you have code that can run simultaneously it can also be that you have threads dependent on other threads",
    "start": "168170",
    "end": "174170"
  },
  {
    "text": "like maybe they're waiting for a long background task to finish and with.net we are really fortunate because we have",
    "start": "174170",
    "end": "181880"
  },
  {
    "text": "this thing called the thread pool it hasn't always been there if anybody was around back in like the dotnet one days",
    "start": "181880",
    "end": "188950"
  },
  {
    "text": "you had to manage threads on your own I mean nowadays we don't really have to worry about that but yeah back in the",
    "start": "188950",
    "end": "195410"
  },
  {
    "text": "day you had to create your own threads you had to dispose your own threads you had to keep track of all the different",
    "start": "195410",
    "end": "200930"
  },
  {
    "text": "threads that are running you had to figure out how many threads you could have but yeah nowadays we are super",
    "start": "200930",
    "end": "206480"
  },
  {
    "text": "fortunate in net that we have the manage thread pool so the manage thread pool is",
    "start": "206480",
    "end": "212329"
  },
  {
    "text": "basically where all these will say basically all the background threads live and it is orchestrated by this",
    "start": "212329",
    "end": "219739"
  },
  {
    "text": "thing called the synchronization context the synchronization contexts think of it like a conductor up in front of an",
    "start": "219739",
    "end": "225470"
  },
  {
    "text": "orchestra so it's what queues this thread to start and then when that threads finish it'll grab this thread",
    "start": "225470",
    "end": "231109"
  },
  {
    "text": "and tell that to start and just make sure everything's happening in the proper order and with the thread pool",
    "start": "231109",
    "end": "238940"
  },
  {
    "text": "there is a limit on the number of threads on each device now that that",
    "start": "238940",
    "end": "245420"
  },
  {
    "text": "limit is actually dependent on that devices virtual memory again we don't really need to worry about too much",
    "start": "245420",
    "end": "250819"
  },
  {
    "text": "about this but it's kind of cool to know that the same chunk of code let's say you wrote block of code and c-sharp that",
    "start": "250819",
    "end": "257299"
  },
  {
    "text": "can run on an IOT device well that's gonna have less threads available to it than that same chunk of code if we were",
    "start": "257299",
    "end": "262849"
  },
  {
    "text": "to run it on say a server with 64 gigs of RAM but again if we start consuming",
    "start": "262849",
    "end": "268820"
  },
  {
    "text": "all the threads I mean that's not right we should probably fix that code but if it does happen thread pool just queues",
    "start": "268820",
    "end": "275419"
  },
  {
    "text": "up tasks and whenever a thread is free it handles it for us so super fortunate to",
    "start": "275419",
    "end": "281270"
  },
  {
    "text": "have this in.net and let's take a look at some actual code here to see what it's what's",
    "start": "281270",
    "end": "286850"
  },
  {
    "text": "actually going on and so this is this is a pretty simple method it's called read",
    "start": "286850",
    "end": "292430"
  },
  {
    "text": "data from URL we pass in a string we knew up a web client we called download",
    "start": "292430",
    "end": "297710"
  },
  {
    "text": "data task async which we are awaiting and then that returns a byte array we",
    "start": "297710",
    "end": "302720"
  },
  {
    "text": "turn that byte array into a string we're at a different method called load data and if you're already thinking why isn't",
    "start": "302720",
    "end": "308450"
  },
  {
    "text": "this guy using HTTP client you're totally right this is just this is kind of an old example but I wanted to keep",
    "start": "308450",
    "end": "314300"
  },
  {
    "text": "it simple so yeah in your code make sure to use HTTP client but just for the sake of simplicity let's check this out so with",
    "start": "314300",
    "end": "320630"
  },
  {
    "text": "with three data from URL let's say thread one kicks off this method so",
    "start": "320630",
    "end": "326630"
  },
  {
    "text": "thread one comes into here at News up web client it initializes this byte",
    "start": "326630",
    "end": "331790"
  },
  {
    "text": "array and then when it gets to that await keyword download data task async",
    "start": "331790",
    "end": "338930"
  },
  {
    "text": "is run on a different thread now for the safety for the sake of this example I've",
    "start": "338930",
    "end": "344450"
  },
  {
    "text": "called it thread two but it could be any thread the synchronization context will just literally bill look at the thread pool say what thread is available and if",
    "start": "344450",
    "end": "352370"
  },
  {
    "text": "thread five for a thread 17 or thread 32 is available it'll just grab it and run the code on it so but yeah so let's say",
    "start": "352370",
    "end": "360590"
  },
  {
    "text": "download day to task async is running on thread two now and because we called that a weight keyword thread one is free",
    "start": "360590",
    "end": "368060"
  },
  {
    "text": "to go back and do whatever and this is huge this is this is really important because",
    "start": "368060",
    "end": "375110"
  },
  {
    "text": "if thread one was running this that's bad in any in any UI based application",
    "start": "375110",
    "end": "383600"
  },
  {
    "text": "so web apps mobile apps desktop apps thread one is what we call the UI thread it is also known as the main thread it's",
    "start": "383600",
    "end": "391400"
  },
  {
    "text": "also what paints everything onto the screen so anything that appears on the",
    "start": "391400",
    "end": "396470"
  },
  {
    "text": "screen that has to be done on thread one so main thread UI thread I'll probably",
    "start": "396470",
    "end": "401780"
  },
  {
    "text": "use those terms interchangeably today but if thread one was running download",
    "start": "401780",
    "end": "406820"
  },
  {
    "text": "data task async and let's say download data task a sync takes 10 seconds well that would have",
    "start": "406820",
    "end": "412700"
  },
  {
    "text": "meant thread 1 would have been locked for 10 seconds so what's that look like",
    "start": "412700",
    "end": "418130"
  },
  {
    "text": "to our users well they just see a frozen app they try to scroll they try to swipe they're trying to click a button nothing",
    "start": "418130",
    "end": "424280"
  },
  {
    "text": "happens and then what right they they forced quit the app or they closed the webpage they give us a one-star review",
    "start": "424280",
    "end": "430100"
  },
  {
    "text": "they tweet out about how garbage our app is but with a Sega wait we call that a",
    "start": "430100",
    "end": "435860"
  },
  {
    "text": "wait keyword and that frees up thread 1 so thread 1 is free to interact with the",
    "start": "435860",
    "end": "440870"
  },
  {
    "text": "user meanwhile thread 2 in the background is running download a to task async so when thread two's done it goes",
    "start": "440870",
    "end": "450140"
  },
  {
    "text": "back to the synchronization context and says hey I'm all done synchronization context says great which thread called",
    "start": "450140",
    "end": "456890"
  },
  {
    "text": "you and it goes thread 1 called me so what happens well the synchronization",
    "start": "456890",
    "end": "461990"
  },
  {
    "text": "context says thread 1 your backup and thread 1 jumps back into this method and finishes it off it continues to do the",
    "start": "461990",
    "end": "469390"
  },
  {
    "text": "string conversion and run that method called load data so not too bad I think",
    "start": "469390",
    "end": "476330"
  },
  {
    "text": "most of us in here probably have experienced that before but what's really happening to understand that we",
    "start": "476330",
    "end": "483440"
  },
  {
    "text": "need to go a little deeper we need to go look at the compiled code so here's that",
    "start": "483440",
    "end": "489290"
  },
  {
    "text": "same method again but here's what it looks like with the compiler generated",
    "start": "489290",
    "end": "494720"
  },
  {
    "text": "code now the first thing I want to point out is that this is a class it's a class",
    "start": "494720",
    "end": "503390"
  },
  {
    "text": "that inherits from I a sync state machine now I didn't write a class I wrote an async task method but what the",
    "start": "503390",
    "end": "510950"
  },
  {
    "text": "compiler does every time we use that async keyword it converts our method",
    "start": "510950",
    "end": "516169"
  },
  {
    "text": "into a class but I mean no big deal it does that does add about a hundred bytes",
    "start": "516169",
    "end": "522110"
  },
  {
    "text": "of overhead to our final app size but you know it's 2019 what's a hundred bytes I mean unless",
    "start": "522110",
    "end": "528020"
  },
  {
    "text": "you're doing something on a small IOT board hundred bytes per async methods probably not going to kill you but it",
    "start": "528020",
    "end": "535490"
  },
  {
    "text": "does it turns into a class and all those local variables that we had in our class now become",
    "start": "535490",
    "end": "542240"
  },
  {
    "text": "fields and the variable names look a little different but we can still see",
    "start": "542240",
    "end": "547520"
  },
  {
    "text": "there's private string data private byte array result web client WC and the URL",
    "start": "547520",
    "end": "553910"
  },
  {
    "text": "since it was a parameter that stays public and the only difference is you see some angle brackets and some ungar's",
    "start": "553910",
    "end": "560870"
  },
  {
    "text": "underscores this is just something that the compiler does for us because it needs to make sure that the variables it",
    "start": "560870",
    "end": "567470"
  },
  {
    "text": "creates are unique and you know it's never gonna know what what we named our",
    "start": "567470",
    "end": "572510"
  },
  {
    "text": "variable so it slapped some angle brackets on it it slap some numbers on it just to make sure those variable names in the compiled code stay unique",
    "start": "572510",
    "end": "581560"
  },
  {
    "text": "now probably most importantly is this move next method if you've ever gotten a",
    "start": "581950",
    "end": "588950"
  },
  {
    "text": "stack trace back from an async method chances are you've seen move next I know",
    "start": "588950",
    "end": "594860"
  },
  {
    "text": "I have and I had no idea what it meant I kept seeing these stack traces come back",
    "start": "594860",
    "end": "599930"
  },
  {
    "text": "and I was like move next I never wrote a method called move next like where's this code even coming from well turns",
    "start": "599930",
    "end": "607160"
  },
  {
    "text": "out that's part of this compiler generated method that's part of I a sync state machine and here is what move next",
    "start": "607160",
    "end": "615079"
  },
  {
    "text": "looks like it's just a giant switch statement and what we end up with we",
    "start": "615079",
    "end": "622730"
  },
  {
    "text": "have a case for every single time we call the away keyword plus one so in",
    "start": "622730",
    "end": "629149"
  },
  {
    "text": "this case or in this instant instance we have two cases in our switch statement because we called the away keyword once",
    "start": "629149",
    "end": "635149"
  },
  {
    "text": "if we use the awake keyword four times we would have five cases in the switch",
    "start": "635149",
    "end": "640490"
  },
  {
    "text": "statement but if we take a look at those cases starting with case zero this is",
    "start": "640490",
    "end": "646010"
  },
  {
    "text": "just our code and we can see here that's newing up the web client kicking off",
    "start": "646010",
    "end": "651350"
  },
  {
    "text": "download data task async and then thread 1 returns so this is how thread 1 is",
    "start": "651350",
    "end": "658310"
  },
  {
    "text": "freed up it literally exits this method it's done that's how it's going back to interact",
    "start": "658310",
    "end": "663860"
  },
  {
    "text": "with the user and handle the scrolling and the tapping but before it returns it",
    "start": "663860",
    "end": "669320"
  },
  {
    "text": "sets that value of PC to 1 and it does that because when thread",
    "start": "669320",
    "end": "676220"
  },
  {
    "text": "two's done with download data's ask a sync and the synchronization contacts comes back and says hey thread one your",
    "start": "676220",
    "end": "681440"
  },
  {
    "text": "backup thread one jumps back in picks up where it left off in two case one and",
    "start": "681440",
    "end": "687980"
  },
  {
    "text": "that's where it gets the results from download data task async that's where it converts that byte array into a string",
    "start": "687980",
    "end": "695360"
  },
  {
    "text": "and then runs that method called load data so pretty cool this is something I",
    "start": "695360",
    "end": "701840"
  },
  {
    "text": "was impressed by when I when I first saw this cuz think about what has happened",
    "start": "701840",
    "end": "707110"
  },
  {
    "text": "dot nets a framework that existed before multi-threading was really a thing",
    "start": "707110",
    "end": "712810"
  },
  {
    "text": "existed before really like multi-core CPUs were even a thing and the smart",
    "start": "712810",
    "end": "718610"
  },
  {
    "text": "folks on the.net team figured out how to give us just a basically two keywords async and weight and then they'd handle",
    "start": "718610",
    "end": "725030"
  },
  {
    "text": "all this stuff behind the scenes building out this state machine and making sure everything works properly",
    "start": "725030",
    "end": "730310"
  },
  {
    "text": "and all we have to do in our code is just slap async await on it and it just works",
    "start": "730310",
    "end": "736270"
  },
  {
    "text": "now this is what got me I did not see",
    "start": "736270",
    "end": "743840"
  },
  {
    "text": "this coming move next is entirely wrapped in a try-catch block now I didn't write a",
    "start": "743840",
    "end": "751760"
  },
  {
    "text": "try-catch block in my code but when the compiler generates this code and generates move next by default it wraps",
    "start": "751760",
    "end": "758750"
  },
  {
    "text": "everything into a try-catch block so what's this mean well it means that any exception that happens in my async task",
    "start": "758750",
    "end": "766850"
  },
  {
    "text": "method that exceptions caught right here now don't worry too much because that",
    "start": "766850",
    "end": "772790"
  },
  {
    "text": "exception gets three thrown as long as we use the awake keyword but if we don't",
    "start": "772790",
    "end": "778730"
  },
  {
    "text": "use the awake keyword if we do what I like to call a fire-and-forget task where you know maybe we say task dot run",
    "start": "778730",
    "end": "784970"
  },
  {
    "text": "we put a block of code in there we say I don't care when it finishes just go ahead and do your thing well if we",
    "start": "784970",
    "end": "791870"
  },
  {
    "text": "didn't await that task and it threw an exception in that block of code that",
    "start": "791870",
    "end": "797000"
  },
  {
    "text": "exception swallowed up and it's gone forever so you might be thinking that's",
    "start": "797000",
    "end": "803090"
  },
  {
    "text": "a good thing right like exceptions suck they crash your app I'd rather have no exceptions I'd rather wrap everything in",
    "start": "803090",
    "end": "809270"
  },
  {
    "text": "a try-catch block but over the years of coding I've kind of come to learn is like I want exceptions exceptions tell",
    "start": "809270",
    "end": "816050"
  },
  {
    "text": "me when something's wrong and when I know something's wrong I can handle it",
    "start": "816050",
    "end": "821510"
  },
  {
    "text": "gracefully and this is really what was getting my app in a weird state was I",
    "start": "821510",
    "end": "827120"
  },
  {
    "text": "was doing those fire-and-forget tasks I'm saying cast out run go not awaiting it that was throwing an exception and",
    "start": "827120",
    "end": "834200"
  },
  {
    "text": "now my code is in this state that it shouldn't be in all because an exception",
    "start": "834200",
    "end": "839450"
  },
  {
    "text": "got thrown and I never knew about it so always make sure to await those async",
    "start": "839450",
    "end": "844880"
  },
  {
    "text": "task methods all right quick review the async keyword has about a hundred bytes",
    "start": "844880",
    "end": "851330"
  },
  {
    "text": "and that's just because every async method becomes a class now hundred bytes",
    "start": "851330",
    "end": "857540"
  },
  {
    "text": "maybe that means something to you maybe it's it doesn't but it's good to know it'll increase your app size by just a",
    "start": "857540",
    "end": "864230"
  },
  {
    "text": "little bit and then like we just discussed make sure to await every task because",
    "start": "864230",
    "end": "871190"
  },
  {
    "text": "non awaited tasks hide exceptions we want to make sure we throw those exceptions or we're Heather rethread the",
    "start": "871190",
    "end": "878060"
  },
  {
    "text": "exceptions by using that await keyword okay so now that we are async await",
    "start": "878060",
    "end": "884240"
  },
  {
    "text": "expert so let's jump into some code and fix it up so behind me I have I have an",
    "start": "884240",
    "end": "894770"
  },
  {
    "text": "app that I made to read hacker news if you've never heard of hacker news it's",
    "start": "894770",
    "end": "900080"
  },
  {
    "text": "just a really cool website where a lot of tech news gets posted and so since it's one of my favorites I figured why",
    "start": "900080",
    "end": "906560"
  },
  {
    "text": "not make a quick app this is an app that works on iOS and Android and made in c-sharp using xamarin and it'll go out",
    "start": "906560",
    "end": "913970"
  },
  {
    "text": "we'll get the top stories from hacker news and I can click on any of these stories and give them a read in that way now I don't have to launch my web",
    "start": "913970",
    "end": "920060"
  },
  {
    "text": "browser to learn about probably got slack getting a 16 billion dollar valuation that's impressive",
    "start": "920060",
    "end": "925339"
  },
  {
    "text": "good for them but anyways the code behind me um I will say don't worry",
    "start": "925339",
    "end": "931880"
  },
  {
    "text": "about memorizing anything we're doing today I say that because we're gonna be working in this view model called bad",
    "start": "931880",
    "end": "940640"
  },
  {
    "text": "Aysen can await practices but there's another view model called good async and way",
    "start": "940640",
    "end": "946040"
  },
  {
    "text": "practices so yes the codes all open source if you want to go back share it with your friends show your co-workers",
    "start": "946040",
    "end": "951310"
  },
  {
    "text": "you can just compare the bad and the good because the good has everything done that we're about to do and fix in",
    "start": "951310",
    "end": "957770"
  },
  {
    "text": "this bad async/await practices view model and I'll make sure to give you a chance to grab that link again and",
    "start": "957770",
    "end": "964070"
  },
  {
    "text": "that's where you'll be able to find the code ok so the first to do right here we have method this is a async task method",
    "start": "964070",
    "end": "972050"
  },
  {
    "text": "that is actually a task of type bool it returns and we're calling dot wait now",
    "start": "972050",
    "end": "977750"
  },
  {
    "text": "this is bad I have a rule of thumb and it goes saying never never never never",
    "start": "977750",
    "end": "987050"
  },
  {
    "text": "never never use that wait don't use it I had it's a code smell I wish it was",
    "start": "987050",
    "end": "994400"
  },
  {
    "text": "never even put into the dotnet framework I actually reached out to the team at one point I was like can we just deprecated this and like now it's got to",
    "start": "994400",
    "end": "1001029"
  },
  {
    "text": "stay don't use it why is that way bad",
    "start": "1001029",
    "end": "1006040"
  },
  {
    "text": "well dot wait says let's say let's say thread one kicks off this method so",
    "start": "1006040",
    "end": "1012640"
  },
  {
    "text": "thread one gets to hear it hit set is refreshing dot wait and out wait says",
    "start": "1012640",
    "end": "1017680"
  },
  {
    "text": "hey thread one you stay right here you're locked don't go back and interact",
    "start": "1017680",
    "end": "1024130"
  },
  {
    "text": "with the user I'm hanging on to you meanwhile it's grabbing a background",
    "start": "1024130",
    "end": "1029170"
  },
  {
    "text": "thread to actually execute set is refreshing so we we have thread one locked and that's bad because now we can",
    "start": "1029170",
    "end": "1036100"
  },
  {
    "text": "update the screen we can't interact with the user but we're also having another thread run set is refreshing and setting",
    "start": "1036100",
    "end": "1042308"
  },
  {
    "text": "that to true and so not only is our app frozen but we're using two threads when",
    "start": "1042309",
    "end": "1048790"
  },
  {
    "text": "we only should be using what so easy fix whoops there we go so easy fix get rid",
    "start": "1048790",
    "end": "1058090"
  },
  {
    "text": "of dot wait and just use the away keyword now I I will say it's getting",
    "start": "1058090",
    "end": "1065200"
  },
  {
    "text": "it's getting rare nowadays but sometimes we still do need to use or write synchronous code I mean we're we're",
    "start": "1065200",
    "end": "1071860"
  },
  {
    "text": "fortunate here where we are in an ace method but maybe you know that one",
    "start": "1071860",
    "end": "1077309"
  },
  {
    "text": "percent of the time we still have to write synchronous code so you're probably thinking yourself well wait a",
    "start": "1077309",
    "end": "1082530"
  },
  {
    "text": "minute what do we do because you just said don't use dot wait well there's a better",
    "start": "1082530",
    "end": "1088830"
  },
  {
    "text": "way to do this whoops get resolved there we go",
    "start": "1088830",
    "end": "1094320"
  },
  {
    "text": "and that's to use get await or get result now get away or get results still",
    "start": "1094320",
    "end": "1099780"
  },
  {
    "text": "isn't great it does the same thing is that wait it'll still lock the calling thread it'll still run that method on a",
    "start": "1099780",
    "end": "1105720"
  },
  {
    "text": "background thread so we're using two threads when we only need one and also locking that thread if it's the UI",
    "start": "1105720",
    "end": "1112260"
  },
  {
    "text": "thread mmm well now our apps frozen but why get a get it later get resolved is",
    "start": "1112260",
    "end": "1117900"
  },
  {
    "text": "better it's because dot wait well we'll say if if this method throws an",
    "start": "1117900",
    "end": "1123929"
  },
  {
    "text": "exception just like the await keyword ah wait will wreath row that exception but",
    "start": "1123929",
    "end": "1129990"
  },
  {
    "text": "it doesn't read through our exception it wreath rows what's called a aggregate exception so system tagra gate exception",
    "start": "1129990",
    "end": "1136350"
  },
  {
    "text": "and that is an exception that holds exceptions it's like exception inception where our",
    "start": "1136350",
    "end": "1144480"
  },
  {
    "text": "stack trace and our code is somewhere in that aggregate exception but it's not on the top level what get away or get",
    "start": "1144480",
    "end": "1151289"
  },
  {
    "text": "result does is actually it throws our exception with our code and our stack",
    "start": "1151289",
    "end": "1156360"
  },
  {
    "text": "trace so instead of instead of getting a aggregate exception and having to dig through that to try and figure out where",
    "start": "1156360",
    "end": "1162750"
  },
  {
    "text": "our code is or if you have new developers on your team who have never seen an aggregate exception before",
    "start": "1162750",
    "end": "1168030"
  },
  {
    "text": "that'll just confuse the heck out of them get a weight or get result well we throw your exception and your stack",
    "start": "1168030",
    "end": "1175260"
  },
  {
    "text": "trace so well it's better than dot weight but again we don't want to use",
    "start": "1175260",
    "end": "1180809"
  },
  {
    "text": "two threads we only need one we definitely want to lock up the UI thread so we'll just use the awake keyword done",
    "start": "1180809",
    "end": "1187770"
  },
  {
    "text": "and down here same same we have another dot weight so this is an easy fix we",
    "start": "1187770",
    "end": "1195390"
  },
  {
    "text": "just slap the awake keyword on there and we're good to go and yes you can use the",
    "start": "1195390",
    "end": "1201870"
  },
  {
    "text": "awake keyword in the finally block so kind of cool that wasn't originally baked into async/await but they gave it",
    "start": "1201870",
    "end": "1207330"
  },
  {
    "text": "to us Avenged next refactor so we have another method here this one's called get top stories",
    "start": "1207330",
    "end": "1213300"
  },
  {
    "text": "this is what goes out hits the hacker news api's brings back what's it do first it brings back all the IDS and",
    "start": "1213300",
    "end": "1219600"
  },
  {
    "text": "then once you have the IDS you can get the stories and then we add them to our top story list and we return that so",
    "start": "1219600",
    "end": "1225780"
  },
  {
    "text": "this one's not using dot wait it's using the await keywords so that's pretty good",
    "start": "1225780",
    "end": "1232100"
  },
  {
    "text": "what can we do to make this better well let's think back to that example we saw",
    "start": "1232550",
    "end": "1238170"
  },
  {
    "text": "in the slide so let's say we'll say thread one kicks off this method so thread one initializes top story list",
    "start": "1238170",
    "end": "1245070"
  },
  {
    "text": "thread one initializes the variable top story IDs we hit the await keywords so",
    "start": "1245070",
    "end": "1250200"
  },
  {
    "text": "thread one's free well the background thread runs get top story IDs so let's",
    "start": "1250200",
    "end": "1255210"
  },
  {
    "text": "say thread five is gonna is going to run get top story IDs well when thread five is done what's it",
    "start": "1255210",
    "end": "1262440"
  },
  {
    "text": "do it goes to the synchronization context synchronization context says oh good you're all done what thread called",
    "start": "1262440",
    "end": "1269190"
  },
  {
    "text": "you it says thread one called me and then thread one jumps back in and",
    "start": "1269190",
    "end": "1274830"
  },
  {
    "text": "continues writing this code so kicking off this four loop here now that's not terrible but why did we have to go back",
    "start": "1274830",
    "end": "1283410"
  },
  {
    "text": "to thread one I mean especially since thread one is our UI thread we want to leave that free we don't we barely want",
    "start": "1283410",
    "end": "1290250"
  },
  {
    "text": "to use that for anything except UI stuff or user interactions and here we are",
    "start": "1290250",
    "end": "1296070"
  },
  {
    "text": "bringing it back into our view model and in the mvvm world like view models don't",
    "start": "1296070",
    "end": "1301980"
  },
  {
    "text": "touch UI so we don't need it Plus what happens if thread one is busy like maybe",
    "start": "1301980",
    "end": "1307380"
  },
  {
    "text": "the users just scroll on the screen or jamming buttons or maybe we have a game that needs to run at 60 frames a second",
    "start": "1307380",
    "end": "1313740"
  },
  {
    "text": "well our code is just sitting here waiting until thread one's available to",
    "start": "1313740",
    "end": "1319620"
  },
  {
    "text": "jump back in so we could make this a little bit better a little bit faster by",
    "start": "1319620",
    "end": "1325650"
  },
  {
    "text": "using configure await false so what configure await false does win",
    "start": "1325650",
    "end": "1330890"
  },
  {
    "text": "so in this example when thread five is done and get top story IDs is finished",
    "start": "1330890",
    "end": "1336210"
  },
  {
    "text": "executing thread five now with configure wait false ghost the synchronization",
    "start": "1336210",
    "end": "1341250"
  },
  {
    "text": "context synchronization contact says great you're done which thread called you and thread five just goes doesn't matter",
    "start": "1341250",
    "end": "1348150"
  },
  {
    "text": "and so the synchronization contact just grabs whatever threads available and that thread will continue running our",
    "start": "1348150",
    "end": "1354690"
  },
  {
    "text": "code so a thread seventeen can jump in and kick off the rest of the method so",
    "start": "1354690",
    "end": "1360830"
  },
  {
    "text": "my rule of thumb is if I'm in the service layer of my app or being that I",
    "start": "1360830",
    "end": "1367230"
  },
  {
    "text": "do a lot of mvvm if I'm in the view model layer of my app anything that doesn't touch UI code that I don't",
    "start": "1367230",
    "end": "1373260"
  },
  {
    "text": "really care what thread I return to I put configure await false everywhere pretty much the only place I don't use",
    "start": "1373260",
    "end": "1380549"
  },
  {
    "text": "configure away false is if I'm in the viewer I'm interacting with the UI now",
    "start": "1380549",
    "end": "1386159"
  },
  {
    "text": "you might be wondering yes that says false so there must be a true and if you",
    "start": "1386159",
    "end": "1391409"
  },
  {
    "text": "spell it right there we go what is that - well that's just the default so by not putting anything like if we didn't have",
    "start": "1391409",
    "end": "1398700"
  },
  {
    "text": "this here that's the same as configure away true so you'll probably never do",
    "start": "1398700",
    "end": "1404549"
  },
  {
    "text": "this but like I said if you don't need to return back to the calling thread configure await false",
    "start": "1404549",
    "end": "1412370"
  },
  {
    "text": "all right so refactor done and we've got another one here same story slap on a",
    "start": "1413150",
    "end": "1419700"
  },
  {
    "text": "configure await false and refactor done",
    "start": "1419700",
    "end": "1425250"
  },
  {
    "text": "cool making progress all right next up we have a method called get story get",
    "start": "1425250",
    "end": "1432570"
  },
  {
    "text": "story calls a method called get data object from API so this is just",
    "start": "1432570",
    "end": "1437610"
  },
  {
    "text": "hitting the hacker news API and pulling down the story and it looks pretty good",
    "start": "1437610",
    "end": "1443010"
  },
  {
    "text": "right like we're using a wait we're using async we could probably put a configure wait false on there I don't",
    "start": "1443010",
    "end": "1449250"
  },
  {
    "text": "know if it's already there no it's not but this is a cool example because if we",
    "start": "1449250",
    "end": "1454650"
  },
  {
    "text": "take a look at what this methods returning get data object from API is",
    "start": "1454650",
    "end": "1460140"
  },
  {
    "text": "returning a task of type story model and",
    "start": "1460140",
    "end": "1465230"
  },
  {
    "text": "get story is also returning a task of type story model so what we can do here",
    "start": "1465230",
    "end": "1471059"
  },
  {
    "text": "we can actually get rid of this async keyword and get rid of that awake keyword and we can just return the task now it",
    "start": "1471059",
    "end": "1478890"
  },
  {
    "text": "feels a little weird yeah this is probably something that most of you haven't seen before I don't see it a lot",
    "start": "1478890",
    "end": "1485970"
  },
  {
    "text": "in code well I guess except for my code I love this but by just returning the",
    "start": "1485970",
    "end": "1490980"
  },
  {
    "text": "task and getting rid of that a weight keyword we just saved herself to contact switch so we didn't have to switch from",
    "start": "1490980",
    "end": "1497760"
  },
  {
    "text": "thread one to thread five or thread two to thread seven whatever it might be we can just return the task and allow",
    "start": "1497760",
    "end": "1504350"
  },
  {
    "text": "whichever chunk of code calls get story to a weight get story and handle that",
    "start": "1504350",
    "end": "1510390"
  },
  {
    "text": "contact switch for us and by getting rid of that async keyword well now the",
    "start": "1510390",
    "end": "1515700"
  },
  {
    "text": "compiler doesn't turn it into a I a sync state machine class anymore and so we've",
    "start": "1515700",
    "end": "1522059"
  },
  {
    "text": "saved you know a hundred bytes in our app size so yay but the big benefit",
    "start": "1522059",
    "end": "1528030"
  },
  {
    "text": "there is that performance impacts so we don't have to we don't call the await keyword which means we don't switch context or switch threads and we can",
    "start": "1528030",
    "end": "1535530"
  },
  {
    "text": "save that switching and our code will run just that much faster all right so",
    "start": "1535530",
    "end": "1540570"
  },
  {
    "text": "the next one get top story IDs this is the first method that runs and hits the",
    "start": "1540570",
    "end": "1545850"
  },
  {
    "text": "hacker news API and pulls down their IDs because for whatever reason their API says you can't read a story unless you",
    "start": "1545850",
    "end": "1551820"
  },
  {
    "text": "know it's ID first so great we got to make two calls this is also get data",
    "start": "1551820",
    "end": "1558960"
  },
  {
    "text": "object for API is also returning a task of type list of type string and just",
    "start": "1558960",
    "end": "1565610"
  },
  {
    "text": "like the last method so is get top story IDs so right we can get rid of that and",
    "start": "1565610",
    "end": "1571710"
  },
  {
    "text": "get rid of that and this will work it'll compile it'll run but this is actually a",
    "start": "1571710",
    "end": "1577590"
  },
  {
    "text": "trick question because we don't want to do that here this the reason I show this",
    "start": "1577590",
    "end": "1583320"
  },
  {
    "text": "is because when we return the task that means we're not waiting for it to finish",
    "start": "1583320",
    "end": "1589080"
  },
  {
    "text": "we're literally returning right away we're saying up here's the task it's still running in the background but here",
    "start": "1589080",
    "end": "1596429"
  },
  {
    "text": "you go so because we return right away that means we've exited the method and if so",
    "start": "1596429",
    "end": "1602460"
  },
  {
    "text": "fact that we've exited the try-catch block so if this were to throw an exception",
    "start": "1602460",
    "end": "1607470"
  },
  {
    "text": "we've already exited the method and that exception will never be caught here so don't do this if you're inside",
    "start": "1607470",
    "end": "1615749"
  },
  {
    "text": "of a try-catch block make sure to use return away inside try-catch blocks but",
    "start": "1615749",
    "end": "1621899"
  },
  {
    "text": "otherwise yeah you can just return the task now there is something cool I want to show you with this method here let's",
    "start": "1621899",
    "end": "1629159"
  },
  {
    "text": "say let's say it's a top storage what's that method or property gone top",
    "start": "1629159",
    "end": "1636149"
  },
  {
    "text": "story list so let's say top story list and let's check first to see if it's",
    "start": "1636149",
    "end": "1641249"
  },
  {
    "text": "count is greater than zero and if it is instead of going and hitting that API again which I find",
    "start": "1641249",
    "end": "1648029"
  },
  {
    "text": "super annoying why don't we just grab the IDS we already have so you grab that",
    "start": "1648029",
    "end": "1655409"
  },
  {
    "text": "ID make sure it's a string and that also has to be a list basically just why",
    "start": "1655409",
    "end": "1662460"
  },
  {
    "text": "don't we just return the IDS we already have yeah how much how much are the top stories gonna change in the five minutes",
    "start": "1662460",
    "end": "1668399"
  },
  {
    "text": "that our users are using yep Robin app not that much so let's make a little bit more performant but what we've just done",
    "start": "1668399",
    "end": "1674129"
  },
  {
    "text": "we've created another path in this method so we have an async task method that the first time it runs we're going",
    "start": "1674129",
    "end": "1680909"
  },
  {
    "text": "to come down here and hit this return away get data object from API but the",
    "start": "1680909",
    "end": "1687179"
  },
  {
    "text": "second time it runs we're gonna hit this path and we're not gonna use the await",
    "start": "1687179",
    "end": "1692340"
  },
  {
    "text": "keyword anywhere we're just going to return the information we already got and same with the third time it runs and",
    "start": "1692340",
    "end": "1697679"
  },
  {
    "text": "the fourth time it runs and so this right here is what we call the hot path",
    "start": "1697679",
    "end": "1703529"
  },
  {
    "text": "in our method so if we have a the hot path in our method that does not use the",
    "start": "1703529",
    "end": "1710999"
  },
  {
    "text": "away keyword we can use this cool thing called a value task now value task this",
    "start": "1710999",
    "end": "1719279"
  },
  {
    "text": "is this is pretty new it's being added to dotnet standard 2.1 Donnison or two",
    "start": "1719279",
    "end": "1724950"
  },
  {
    "text": "but one hasn't been released yet but it is value task is available in a new get package and I'll share that link with",
    "start": "1724950",
    "end": "1730259"
  },
  {
    "text": "you in just a bit but what value task does is basically",
    "start": "1730259",
    "end": "1736529"
  },
  {
    "text": "the same thing as a task but it's a value type so",
    "start": "1736529",
    "end": "1743010"
  },
  {
    "text": "if you think back and remember task is a reference type reference types live on",
    "start": "1743010",
    "end": "1748169"
  },
  {
    "text": "the heap value task is a value type and that lives in the stack now if you",
    "start": "1748169",
    "end": "1755220"
  },
  {
    "text": "remember all the way back to data structures classes or if you're been studying up for an interview coming up",
    "start": "1755220",
    "end": "1760320"
  },
  {
    "text": "you'll know that it's more expensive to put something on to a heap than it is to",
    "start": "1760320",
    "end": "1765480"
  },
  {
    "text": "put something on to a stack because when you put stuff on to a heap it's got to be indexed and it's indexed because well",
    "start": "1765480",
    "end": "1771390"
  },
  {
    "text": "it's really quick to read from the heap whereas it's a little slower to read from the stack but in this case we're",
    "start": "1771390",
    "end": "1778530"
  },
  {
    "text": "not really using all those benefits of tasks all the time so why take that",
    "start": "1778530",
    "end": "1784470"
  },
  {
    "text": "performance hit nine times out of ten to put a task on the heap when we don't",
    "start": "1784470",
    "end": "1789540"
  },
  {
    "text": "need to and we can use value tasks and so value tasks living in the stack that means as soon as this methods done it's",
    "start": "1789540",
    "end": "1795990"
  },
  {
    "text": "popped up we save a garbage allocation or a garbage collection and we also save",
    "start": "1795990",
    "end": "1801150"
  },
  {
    "text": "that memory allocation and so if you find that spot your code where the hot",
    "start": "1801150",
    "end": "1807000"
  },
  {
    "text": "path does not use the async keyword I'm sorry it does not use the awake keyword",
    "start": "1807000",
    "end": "1812510"
  },
  {
    "text": "checkout value task all right",
    "start": "1812510",
    "end": "1817890"
  },
  {
    "text": "let's say how we doing cool so back up to the constructor when this constructor",
    "start": "1817890",
    "end": "1825150"
  },
  {
    "text": "loads I call execute refresh command that's the method that we saw earlier that will hit the api's it'll load all",
    "start": "1825150",
    "end": "1832410"
  },
  {
    "text": "the data and I have that here my constructor maybe I shouldn't but I want",
    "start": "1832410",
    "end": "1837929"
  },
  {
    "text": "my app to load the data as soon as the app launches I don't want I don't want to load an empty app for my user and",
    "start": "1837929",
    "end": "1843120"
  },
  {
    "text": "force them to do a pull to refresh that's silly so I have it here my constructor but this is also an async",
    "start": "1843120",
    "end": "1851910"
  },
  {
    "text": "task method this method returns a task and we're not awaiting it and that's why we written that yellow squiggle right",
    "start": "1851910",
    "end": "1857460"
  },
  {
    "text": "there that's why if Visual Studio is yelling at us and so I don't know maybe we can do a sync wait and that's gonna",
    "start": "1857460",
    "end": "1865590"
  },
  {
    "text": "yell at us and it should because constructors will never be able to use async await constructors are just",
    "start": "1865590",
    "end": "1872429"
  },
  {
    "text": "literally meant to initialize objects they allocate some memory maybe they assign some variables and",
    "start": "1872429",
    "end": "1879690"
  },
  {
    "text": "initial value but they're not supposed to do anything long-running you should never have to await a new object so that",
    "start": "1879690",
    "end": "1888290"
  },
  {
    "text": "that fails can't do that well something we could do is this and",
    "start": "1888290",
    "end": "1900270"
  },
  {
    "text": "change that to refresh so now that",
    "start": "1900270",
    "end": "1905850"
  },
  {
    "text": "squiggle goes away in our constructor and what we've just done and I can feel",
    "start": "1905850",
    "end": "1911250"
  },
  {
    "text": "I can feel the cringe going on right now because we just made an async void method now I I do have a bone to pick",
    "start": "1911250",
    "end": "1920700"
  },
  {
    "text": "with async void and that is just how it's how it's typically taught you know when we're first learning async and a",
    "start": "1920700",
    "end": "1926760"
  },
  {
    "text": "weight everybody says if you're gonna use the async keyword always return to task well now that value task is out that's",
    "start": "1926760",
    "end": "1932700"
  },
  {
    "text": "of cool too but they say never use async void and that's not bad advice like",
    "start": "1932700",
    "end": "1938940"
  },
  {
    "text": "async void can be dangerous and I'll tell you why in just a second but the problem I have with telling developers",
    "start": "1938940",
    "end": "1944730"
  },
  {
    "text": "never use async food is they never say why so so let's check out why and I mean",
    "start": "1944730",
    "end": "1953610"
  },
  {
    "text": "spoiler alert this is an actually this is actually a valid use case for async void we'll say it's one of the few but",
    "start": "1953610",
    "end": "1960510"
  },
  {
    "text": "it is valid because look we kick off this method we cannot await it but",
    "start": "1960510",
    "end": "1966240"
  },
  {
    "text": "inside there we are calling an async task method and we are awaiting it so if",
    "start": "1966240",
    "end": "1971580"
  },
  {
    "text": "an exception gets thrown inside of execute refresh command because we use that awake keyword that exception will",
    "start": "1971580",
    "end": "1977730"
  },
  {
    "text": "be wreath round in surface back to us but what so why is async void dangerous well let's check this out let's say we",
    "start": "1977730",
    "end": "1985170"
  },
  {
    "text": "did something like this putting it in a try-catch block exception let's print",
    "start": "1985170",
    "end": "1993720"
  },
  {
    "text": "that at the console and exception so so we know refresh is",
    "start": "1993720",
    "end": "2006220"
  },
  {
    "text": "going to throw an exception right throws it right here as soon as it's done with execute refresh command but that",
    "start": "2006220",
    "end": "2013360"
  },
  {
    "text": "exception will never be caught in this catch block and here's why",
    "start": "2013360",
    "end": "2018630"
  },
  {
    "text": "let's say thread one kicks off our constructor thread one calls refresh so",
    "start": "2018630",
    "end": "2023769"
  },
  {
    "text": "thread one comes into here thread one hits this await and so now executes",
    "start": "2023769",
    "end": "2029110"
  },
  {
    "text": "refresh command is running on a background thread let's say it's running on thread 3 and thread 1 is now coming",
    "start": "2029110",
    "end": "2037090"
  },
  {
    "text": "back up here but since we cannot await excuse me since we can not await an async void thread one just continues",
    "start": "2037090",
    "end": "2045340"
  },
  {
    "text": "so we'll say thread 1 continues here and",
    "start": "2045340",
    "end": "2051270"
  },
  {
    "text": "and so now thread once down here executing some more code meanwhile this",
    "start": "2051569",
    "end": "2058179"
  },
  {
    "text": "refresh method is technically still running because XQ refresh command it takes a couple seconds to do stuff in",
    "start": "2058179",
    "end": "2063849"
  },
  {
    "text": "the background hit the api's and so when this exception triggers we've already exited this catch block so",
    "start": "2063849",
    "end": "2071980"
  },
  {
    "text": "that's one reason why a sync void methods are dangerous because you'll almost never be able to catch an",
    "start": "2071980",
    "end": "2077980"
  },
  {
    "text": "exception from an async void method now another reason that's dangerous is let's",
    "start": "2077980",
    "end": "2084250"
  },
  {
    "text": "say we were doing something with that top story list right like maybe here we choose to new it up story model and I",
    "start": "2084250",
    "end": "2092648"
  },
  {
    "text": "don't know maybe we say add and we dot dot dot we do some more stuff there so",
    "start": "2092649",
    "end": "2098410"
  },
  {
    "text": "so thread 1 is now interacting with this property top story list meanwhile thread",
    "start": "2098410",
    "end": "2106630"
  },
  {
    "text": "5 is running in the background doing execute refresh command which also",
    "start": "2106630",
    "end": "2111700"
  },
  {
    "text": "interacts with top story list and so now we're gonna see some really weird behavior because know which one wins we",
    "start": "2111700",
    "end": "2117010"
  },
  {
    "text": "got this race condition so maybe a thread one wins and we new up and we add some stuff but then thread 5 gets there",
    "start": "2117010",
    "end": "2122950"
  },
  {
    "text": "and adds some more stuff in there weird things are going to happen here and it's all because of that async void and",
    "start": "2122950",
    "end": "2129640"
  },
  {
    "text": "because you cannot oh wait in a sink void method so the",
    "start": "2129640",
    "end": "2136620"
  },
  {
    "text": "probably the scariest thing that I've ever come across when working on working",
    "start": "2136620",
    "end": "2141820"
  },
  {
    "text": "in some code is when there's been a public async void method that I didn't",
    "start": "2141820",
    "end": "2146860"
  },
  {
    "text": "write like big chunk of code co-worker in another class or in an another",
    "start": "2146860",
    "end": "2152140"
  },
  {
    "text": "c-sharp file created the class that had a public async void method on it well I",
    "start": "2152140",
    "end": "2157870"
  },
  {
    "text": "mean right here we can see it like async voids right there got it but let's pretend like it wasn't and",
    "start": "2157870",
    "end": "2163750"
  },
  {
    "text": "we're just using intellisense right and Intelli sense let's see if we can zoom in on that and tell us I just tells us",
    "start": "2163750",
    "end": "2170500"
  },
  {
    "text": "that refresh returns a void so any c-sharp developer worth their salt will",
    "start": "2170500",
    "end": "2176770"
  },
  {
    "text": "Sayed say to themselves and rightfully so that will refresh this method will",
    "start": "2176770",
    "end": "2183610"
  },
  {
    "text": "run to completion before it continues on and execute the rest of these just the",
    "start": "2183610",
    "end": "2189640"
  },
  {
    "text": "rest of this code but in reality whoops there we go but in reality it was an",
    "start": "2189640",
    "end": "2195610"
  },
  {
    "text": "async void method and not you have that method running at the same time so so that's why async voids dangerous and why",
    "start": "2195610",
    "end": "2202000"
  },
  {
    "text": "even though this is a valid implementation and usage for acing fide it's still not super recommended because",
    "start": "2202000",
    "end": "2208990"
  },
  {
    "text": "I mean we can see it right here but what about a couple years from now new",
    "start": "2208990",
    "end": "2214060"
  },
  {
    "text": "developers take over the same codebase they might not know that's an async void method and they might make the same",
    "start": "2214060",
    "end": "2219940"
  },
  {
    "text": "mistake that we just did right here and now they'll be wondering why they're exceptions not being caught in there try",
    "start": "2219940",
    "end": "2225400"
  },
  {
    "text": "catch block okay great so what if we accomplished basically nothing because",
    "start": "2225400",
    "end": "2231550"
  },
  {
    "text": "we said we didn't want to do that so back to this well what can we do you",
    "start": "2231550",
    "end": "2240670"
  },
  {
    "text": "know async Floyd would be perfect if we could do that but it feels icky and we're setting up our co-workers for",
    "start": "2240670",
    "end": "2246700"
  },
  {
    "text": "failure so something I did I created an extension method called safe",
    "start": "2246700",
    "end": "2252310"
  },
  {
    "text": "fire-and-forget so everywhere as saying earlier why fire-and-forget methods are bad like",
    "start": "2252310",
    "end": "2258820"
  },
  {
    "text": "when you say test dot run kickoff some code that you're not awaiting it well those are bad because your",
    "start": "2258820",
    "end": "2265050"
  },
  {
    "text": "awaiting it but at the same time you might not care when that code finishes so you might not want to say I want to",
    "start": "2265050",
    "end": "2271920"
  },
  {
    "text": "wait for this I just want to kick it off but I still want to follow best practices so this safe fire-and-forget",
    "start": "2271920",
    "end": "2277830"
  },
  {
    "text": "method let's actually jump into that this is an async void method it's an",
    "start": "2277830",
    "end": "2284250"
  },
  {
    "text": "extension on tasks and we've got some goodies in here like we can pass in we",
    "start": "2284250",
    "end": "2289620"
  },
  {
    "text": "what we want to do with configure await so we can still say configure away false and if we want to we can also pass in an",
    "start": "2289620",
    "end": "2296420"
  },
  {
    "text": "exception handler but if we don't that exception will just be wreath rowan so",
    "start": "2296420",
    "end": "2302670"
  },
  {
    "text": "that's what that means right here so if on exception remains null that exception gets wreath rowan and happy days because",
    "start": "2302670",
    "end": "2308730"
  },
  {
    "text": "that exception was exposed to us otherwise in the old bad fire-and-forget",
    "start": "2308730",
    "end": "2313800"
  },
  {
    "text": "way that we just say tasks that run that exception would be swallowed forever so",
    "start": "2313800",
    "end": "2318950"
  },
  {
    "text": "so i put this together so that it's blatantly obvious that you want to fire",
    "start": "2318950",
    "end": "2326010"
  },
  {
    "text": "and forget this method but you still want to do it safely you still want to make sure that exception happens and then you can take advantage of that in",
    "start": "2326010",
    "end": "2332160"
  },
  {
    "text": "your code now like i mentioned earlier all this codes open source so feel free to download it copy pasted into your",
    "start": "2332160",
    "end": "2337560"
  },
  {
    "text": "code but I've also nuga ties this so this is also available as a nougat package if you just want to slap it into",
    "start": "2337560",
    "end": "2344310"
  },
  {
    "text": "your app that we'd have to worry about copy and pasting code around the nougat package name is called async await best",
    "start": "2344310",
    "end": "2350370"
  },
  {
    "text": "practices and I'll share that link with you again just a minute alright so done",
    "start": "2350370",
    "end": "2355980"
  },
  {
    "text": "there and we've got one more refactor and let's see refresh command so if",
    "start": "2355980",
    "end": "2361410"
  },
  {
    "text": "you've ever done anything with with mvvm you've seen commands all the time if you",
    "start": "2361410",
    "end": "2367590"
  },
  {
    "text": "haven't don't worry about it maybe you'll come across at some point but we're getting yelled at here because",
    "start": "2367590",
    "end": "2373260"
  },
  {
    "text": "command takes in in action and what's an",
    "start": "2373260",
    "end": "2378510"
  },
  {
    "text": "action return void so by saying hey sync void well by saying async we've just",
    "start": "2378510",
    "end": "2385110"
  },
  {
    "text": "actually just created an async void method but again this is another valid use case for async void and this is",
    "start": "2385110",
    "end": "2391530"
  },
  {
    "text": "totally fine you don't have to change this at all I mean you get the little yellow squiggle saying that asynchronous",
    "start": "2391530",
    "end": "2398370"
  },
  {
    "text": "method should return void but you just got to go nope I'm smarter than that this one's actually cool but if you want to get rid",
    "start": "2398370",
    "end": "2405030"
  },
  {
    "text": "of that yellow squiggle I've put together another library called ìa sync",
    "start": "2405030",
    "end": "2411000"
  },
  {
    "text": "command a sync command a sync man there",
    "start": "2411000",
    "end": "2419490"
  },
  {
    "text": "we go and what with this we don't have to say we don't even have to say async/await we",
    "start": "2419490",
    "end": "2425670"
  },
  {
    "text": "can just literally pass in that task and Aysen command actually takes advantage",
    "start": "2425670",
    "end": "2433410"
  },
  {
    "text": "of say fire-and-forget so if we if we were to jump into this code this one's a little bit more verbose but you can see",
    "start": "2433410",
    "end": "2438599"
  },
  {
    "text": "down here when you execute that command it's using say fire-and-forget but again",
    "start": "2438599",
    "end": "2443940"
  },
  {
    "text": "it's nicer because we get rid of that little squiggle and I async command also",
    "start": "2443940",
    "end": "2449369"
  },
  {
    "text": "has a couple more extra properties that I command doesn't so if you do want to call this command from a different class",
    "start": "2449369",
    "end": "2456780"
  },
  {
    "text": "you can actually await it whereas normal I command is typically fire-and-forget",
    "start": "2456780",
    "end": "2464210"
  },
  {
    "text": "all right",
    "start": "2464210",
    "end": "2467539"
  },
  {
    "text": "so let's review those best practices we were just chatting about never use dot",
    "start": "2471920",
    "end": "2477619"
  },
  {
    "text": "wait never use that result I hate them their code smells get them out of your",
    "start": "2477619",
    "end": "2483349"
  },
  {
    "text": "code because we should be using the await keyword but if in that rare point",
    "start": "2483349",
    "end": "2488630"
  },
  {
    "text": "that you do have to write synchronous code both can be replaced with get away",
    "start": "2488630",
    "end": "2493640"
  },
  {
    "text": "to get result and get away to get result is will still lock the calling thread",
    "start": "2493640",
    "end": "2499069"
  },
  {
    "text": "but it's better cuz it'll throw our exception with our stack trace and our code whereas dot wait and dot result",
    "start": "2499069",
    "end": "2505660"
  },
  {
    "text": "both throw an aggregate exception and yeah it's a good point I forgot to",
    "start": "2505660",
    "end": "2511789"
  },
  {
    "text": "forgot to show off dot result is also replaceable so literally get a way to get result if your task is returning a",
    "start": "2511789",
    "end": "2518180"
  },
  {
    "text": "type bool get a way to get result will return that bool if it's just returning a task it'll just return void so get",
    "start": "2518180",
    "end": "2526279"
  },
  {
    "text": "away to get result use that to replace both wait and dot result don't use those",
    "start": "2526279",
    "end": "2532059"
  },
  {
    "text": "fire-and-forget tasks well say be",
    "start": "2532059",
    "end": "2538009"
  },
  {
    "text": "judicious how you use these i you should be awaiting every task but if for whatever reason you don't really care",
    "start": "2538009",
    "end": "2544099"
  },
  {
    "text": "when that task finishes you want to kick it off you want to fire and forget but you still want to follow all those best",
    "start": "2544099",
    "end": "2549380"
  },
  {
    "text": "practices and you don't want to add a sync void methods into your app check out the safe fire and forget extension",
    "start": "2549380",
    "end": "2554750"
  },
  {
    "text": "method I've put together and that's the name of the new get package behind me and I've included a link to that new get package on the NGC also async/await site",
    "start": "2554750",
    "end": "2563119"
  },
  {
    "text": "at the bottom async commands so if",
    "start": "2563119",
    "end": "2568759"
  },
  {
    "text": "you're doing commands and you want to get a little bit more flexibility around making it away table having some async",
    "start": "2568759",
    "end": "2576650"
  },
  {
    "text": "and weight stuff you can also check out I a sync command and that's also in a nougat package so I've put together called async await best practices dot",
    "start": "2576650",
    "end": "2583519"
  },
  {
    "text": "mvvm also like below returned await",
    "start": "2583519",
    "end": "2590319"
  },
  {
    "text": "don't use it if the only place in your method you're using the await keyword is",
    "start": "2590380",
    "end": "2595640"
  },
  {
    "text": "in the return statement rip it out get rid of a wait get rid of async and just return that task that'll make sure we don't do an extra",
    "start": "2595640",
    "end": "2602539"
  },
  {
    "text": "thread switch or context switch and our code will run just a little bit faster now again a couple caveats if",
    "start": "2602539",
    "end": "2609980"
  },
  {
    "text": "you're in a try-catch block keep that returned await in there otherwise you're",
    "start": "2609980",
    "end": "2615349"
  },
  {
    "text": "gonna return that task right away you're gonna exit the try-catch block same if you're in a using block so if you're",
    "start": "2615349",
    "end": "2621559"
  },
  {
    "text": "going to dispose an object make sure to do return a weight because again if you",
    "start": "2621559",
    "end": "2627140"
  },
  {
    "text": "return the task you'll exit right away and then all of a sudden that object that you need it is now disposed and",
    "start": "2627140",
    "end": "2632569"
  },
  {
    "text": "you'll get weird errors like I did was if I out of time can figure away false",
    "start": "2632569",
    "end": "2638589"
  },
  {
    "text": "use it I use this like I said I use this everywhere every time I'm not touching",
    "start": "2638589",
    "end": "2644960"
  },
  {
    "text": "code that interacts with my view with my UI I use configure away false and so the",
    "start": "2644960",
    "end": "2650059"
  },
  {
    "text": "rule of thumb is if you don't care what thread you return to use configure away false there's no reason to wait on a",
    "start": "2650059",
    "end": "2657170"
  },
  {
    "text": "thread that might be busy and burns burning CPU cycles just sitting there waiting for your thread to come back",
    "start": "2657170",
    "end": "2662299"
  },
  {
    "text": "when you can just grab a perfectly good thread different thread from the background pool from the thread pool so",
    "start": "2662299",
    "end": "2670670"
  },
  {
    "text": "use configure white false whenever you don't need to return to the calling thread and lastly value tasks this is",
    "start": "2670670",
    "end": "2679130"
  },
  {
    "text": "this is new this is hot off the presses like I mentioned it is coming in dotnet standard 2.1 but today it's available in",
    "start": "2679130",
    "end": "2686900"
  },
  {
    "text": "this nougat package system threading task extensions and I've also linked that to like that for us in the link at",
    "start": "2686900",
    "end": "2694400"
  },
  {
    "text": "the bottom of the slides here alright so",
    "start": "2694400",
    "end": "2700010"
  },
  {
    "text": "speaking of that link if you haven't had a chance yet make sure to take out your phones grab a picture of this slide bookmark it share it with your friends",
    "start": "2700010",
    "end": "2706849"
  },
  {
    "text": "show with your colleagues because this is where you can find everything that we just talked about today this is where you'll be able to find the slides this",
    "start": "2706849",
    "end": "2712940"
  },
  {
    "text": "is where you'll be able to find the source code for the safe fire-and-forget 4i a sync command if you want to check",
    "start": "2712940",
    "end": "2719390"
  },
  {
    "text": "out that hacker news app if you're into xamarin apps like I am those are all linked there the nougat packages are all",
    "start": "2719390",
    "end": "2725000"
  },
  {
    "text": "linked and then if you want to continue this journey and I highly recommend it it's a pretty deep rabbit hole but",
    "start": "2725000",
    "end": "2731720"
  },
  {
    "text": "there's also a bunch of links that I've included there on how value tasks works how a sync void works and you can",
    "start": "2731720",
    "end": "2738380"
  },
  {
    "text": "continue studying and reading up and going down this rabbit hole highly recommended",
    "start": "2738380",
    "end": "2744010"
  },
  {
    "text": "thank you so it looks like we do have a",
    "start": "2744010",
    "end": "2755180"
  },
  {
    "text": "couple minutes if every wants to stick around I know we have a microphone in the back and we can shoot out some questions I just I do ask make sure we",
    "start": "2755180",
    "end": "2762589"
  },
  {
    "text": "get the question in into the microphone so I saw the first hand over here that",
    "start": "2762589",
    "end": "2769940"
  },
  {
    "text": "way anybody watching the video later they'll be able to hear you're asking questions as well hello thank you very",
    "start": "2769940",
    "end": "2781520"
  },
  {
    "text": "much for this nice presentation and thank you my question is simple I'm just wondering how you do you need testing of",
    "start": "2781520",
    "end": "2787549"
  },
  {
    "text": "this weight and the sink how you unit test a sink in a weight yes I mean unit",
    "start": "2787549",
    "end": "2794240"
  },
  {
    "text": "tests are just c-sharp codes so you can also use async await keywords in your",
    "start": "2794240",
    "end": "2799279"
  },
  {
    "text": "unit test that might depend on what framework you're using I know the one I'm most familiar with is n unit and",
    "start": "2799279",
    "end": "2805869"
  },
  {
    "text": "yeah as of n unit 3 you can just",
    "start": "2805869",
    "end": "2810920"
  },
  {
    "text": "async/await everywhere so yeah if you do want to weight a method you can do you can do that and actually that is a cool",
    "start": "2810920",
    "end": "2818900"
  },
  {
    "text": "question because I've I have unit tests in that library so for all those those those two NuGet packages I've made I've",
    "start": "2818900",
    "end": "2824690"
  },
  {
    "text": "just got a suite full a unit test if you want to check those out but yeah they're all use an end unit and you can do",
    "start": "2824690",
    "end": "2831260"
  },
  {
    "text": "async/await you can do things like checking the current thread running something called and configure weight",
    "start": "2831260",
    "end": "2837260"
  },
  {
    "text": "false then checking the next thread making sure it's different making sure it didn't go back to the calling thread",
    "start": "2837260",
    "end": "2842660"
  },
  {
    "text": "and yep that's all available to you and unit testing thank you thanks a good question ok",
    "start": "2842660",
    "end": "2851690"
  },
  {
    "text": "great oh I was wondering if you would like to",
    "start": "2851690",
    "end": "2859649"
  },
  {
    "text": "run let's say two service calls in parallel we use a way to task when oh",
    "start": "2859649",
    "end": "2867459"
  },
  {
    "text": "yeah is that a valid place to use get",
    "start": "2867459",
    "end": "2873880"
  },
  {
    "text": "result or because you after the tasks have finished you some you know I have",
    "start": "2873880",
    "end": "2880899"
  },
  {
    "text": "to get the results from both of the tasks right so yeah just to fill everybody in what we're saying is let's",
    "start": "2880899",
    "end": "2889289"
  },
  {
    "text": "say maybe we have task 1 equals and I",
    "start": "2889289",
    "end": "2895449"
  },
  {
    "text": "will say at a stopped run a sick way uh",
    "start": "2895449",
    "end": "2901319"
  },
  {
    "text": "no it's not even go that far I was just a test not to way there we go so get",
    "start": "2901319",
    "end": "2908049"
  },
  {
    "text": "that I've got that call that task 2 and then what we can do is say test uh when",
    "start": "2908049",
    "end": "2915669"
  },
  {
    "text": "all and just for anybody that hasn't seen tasked out when L before what this",
    "start": "2915669",
    "end": "2923259"
  },
  {
    "text": "does we what we've done we are we're not awaiting these tasks here but we are",
    "start": "2923259",
    "end": "2930669"
  },
  {
    "text": "awaiting them in test out when L so like you mentioned if you want to kick out some things in parallel you can start",
    "start": "2930669",
    "end": "2936639"
  },
  {
    "text": "the task and then await it all together and this will then continue when both",
    "start": "2936639",
    "end": "2943359"
  },
  {
    "text": "tasks have finished so like if this one was a little longer maybe took well took",
    "start": "2943359",
    "end": "2950769"
  },
  {
    "text": "longer took twice as long this code will continue when both have finished so yeah",
    "start": "2950769",
    "end": "2956109"
  },
  {
    "text": "the question was well what if we do get",
    "start": "2956109",
    "end": "2961509"
  },
  {
    "text": "a waiter no the result here that was actually not was what I was thinking",
    "start": "2961509",
    "end": "2968139"
  },
  {
    "text": "about I was thinking about if task 1 and task to our returning a value of some",
    "start": "2968139",
    "end": "2974589"
  },
  {
    "text": "sort or our result then you after they",
    "start": "2974589",
    "end": "2980229"
  },
  {
    "text": "are finished you would like to get the results yes okay awesome",
    "start": "2980229",
    "end": "2986439"
  },
  {
    "text": "so yeah let's tweak this a little bit",
    "start": "2986439",
    "end": "2990719"
  },
  {
    "text": "coating on the fly test that run and [Music]",
    "start": "2992160",
    "end": "2998010"
  },
  {
    "text": "we'll just say we'll cheat a little bit",
    "start": "2998010",
    "end": "3004470"
  },
  {
    "text": "here just alright so so down here we're",
    "start": "3004470",
    "end": "3016170"
  },
  {
    "text": "saying what if we say get a waiter get result here right yeah cool so so now",
    "start": "3016170",
    "end": "3026580"
  },
  {
    "text": "what's happened right we've kicked off these tasks let's pretend like they're doing something important and not just returning true right away they're doing",
    "start": "3026580",
    "end": "3033390"
  },
  {
    "text": "something important something's gonna take a while a weight test out win all will continue once both tasks are done",
    "start": "3033390",
    "end": "3041190"
  },
  {
    "text": "and now task 1 we know for a fact is completed and so if we call get await or",
    "start": "3041190",
    "end": "3048330"
  },
  {
    "text": "get result what happens well if the task will say tasks tests are kind of smart",
    "start": "3048330",
    "end": "3055430"
  },
  {
    "text": "if the task is already completed it'll",
    "start": "3055430",
    "end": "3060660"
  },
  {
    "text": "just return that boolean value so this will just return true right away we won't lock up the calling thread we",
    "start": "3060660",
    "end": "3066480"
  },
  {
    "text": "won't have another thread running in the background so this this is actually ok",
    "start": "3066480",
    "end": "3072030"
  },
  {
    "text": "because we're not going to we're not gonna break anything that being said just for a best practice",
    "start": "3072030",
    "end": "3079380"
  },
  {
    "text": "and I know this is gonna look kind of funny I still do this",
    "start": "3079380",
    "end": "3088430"
  },
  {
    "text": "there's in this specific example where we know the task is finished there's",
    "start": "3088430",
    "end": "3094050"
  },
  {
    "text": "really no benefit to call a weight or configure a weight false because we're not gonna switch threads like I",
    "start": "3094050",
    "end": "3099210"
  },
  {
    "text": "mentioned if the task is already completed there's no thread switching there's no contact switching but the reason I still",
    "start": "3099210",
    "end": "3105870"
  },
  {
    "text": "await it and throw configure weight falls on that if you want to it's because we don't we might not always own",
    "start": "3105870",
    "end": "3113580"
  },
  {
    "text": "this code maybe a junior developer comes in later and changes this around and he's just said away tasks too well",
    "start": "3113580",
    "end": "3122880"
  },
  {
    "text": "if we still had get a waiter get result",
    "start": "3122880",
    "end": "3131330"
  },
  {
    "text": "if we still had get away to get result here well now we're going to have some trouble this is going to lock up the",
    "start": "3131330",
    "end": "3137910"
  },
  {
    "text": "calling thread so you can and in that specific example it's it is safe you're",
    "start": "3137910",
    "end": "3143760"
  },
  {
    "text": "not gonna get any trouble to use and get away to get result after a tossed out when all because you know the task is",
    "start": "3143760",
    "end": "3149250"
  },
  {
    "text": "done but I always like to think ahead you know what about that future developer when they take over the code",
    "start": "3149250",
    "end": "3154650"
  },
  {
    "text": "so I will still use a wait configure wait false even though it technically",
    "start": "3154650",
    "end": "3161580"
  },
  {
    "text": "doesn't do anything at this moment in time does that make sense yeah questions",
    "start": "3161580",
    "end": "3166980"
  },
  {
    "text": "between using tasks one get away to get results versus task 1 dot result after",
    "start": "3166980",
    "end": "3174510"
  },
  {
    "text": "the task 1 and all has finished yeah let's put that up there so yeah like",
    "start": "3174510",
    "end": "3180450"
  },
  {
    "text": "what's the difference do that versus",
    "start": "3180450",
    "end": "3187910"
  },
  {
    "text": "good Oh waiter it's a little bit more verbose but that's ok so yeah now the",
    "start": "3190730",
    "end": "3197340"
  },
  {
    "text": "question is like well what about that result versus get a waiter get result so these again will just both do the same",
    "start": "3197340",
    "end": "3203130"
  },
  {
    "text": "thing like even let's throw all three examples up here at the same time",
    "start": "3203130",
    "end": "3208140"
  },
  {
    "text": "because they all will be doing the same thing actually I'll throw in a fourth",
    "start": "3208140",
    "end": "3214980"
  },
  {
    "text": "one because we can say it can figure away false so because that because task",
    "start": "3214980",
    "end": "3221250"
  },
  {
    "text": "one completed here if task one had thrown in exception that exception would",
    "start": "3221250",
    "end": "3226860"
  },
  {
    "text": "have been thrown right here so we never would have even got to this point and so we know the results they're waiting for",
    "start": "3226860",
    "end": "3233190"
  },
  {
    "text": "us because that exception would have killed our code right here so yeah dot result dot get away toward it result a",
    "start": "3233190",
    "end": "3240390"
  },
  {
    "text": "weight and a weight configure away false these are all doing the same thing but",
    "start": "3240390",
    "end": "3246140"
  },
  {
    "text": "like I said earlier this one's my favorite just for that just for that dev",
    "start": "3246140",
    "end": "3252600"
  },
  {
    "text": "a couple years later so they don't all of a sudden break the app great question there they go thank you",
    "start": "3252600",
    "end": "3260780"
  },
  {
    "text": "sounds good yeah got a little bit more time looks like about five more minutes",
    "start": "3261530",
    "end": "3267560"
  },
  {
    "text": "will cue you up next I'm wondering when you're writing web apps with asp.net do",
    "start": "3271370",
    "end": "3277740"
  },
  {
    "text": "you always want to configure await false them oh yeah so do you always want to",
    "start": "3277740",
    "end": "3286350"
  },
  {
    "text": "configure a false even in say a web app um already do you have to do it in all",
    "start": "3286350",
    "end": "3292140"
  },
  {
    "text": "the other lights in the web app to be a compliant with your suggestion because you're never touching any you I am right",
    "start": "3292140",
    "end": "3297780"
  },
  {
    "text": "like what if you're never touching a UI this is an interesting question so technically there are certain apps that",
    "start": "3297780",
    "end": "3305810"
  },
  {
    "text": "don't have that UI thread and those apps actually won't have a synchronization",
    "start": "3305810",
    "end": "3311250"
  },
  {
    "text": "context so if you remember the whole point of the synchronization context is to remember who called what thread so",
    "start": "3311250",
    "end": "3317940"
  },
  {
    "text": "that we can go back to it and that's all literally because of UI stuff so I know",
    "start": "3317940",
    "end": "3324020"
  },
  {
    "text": "let's see like dotnet core doesn't have",
    "start": "3324020",
    "end": "3329040"
  },
  {
    "text": "a synchronization contacts so in that case if you call configure await false in an app that doesn't have a consent",
    "start": "3329040",
    "end": "3335520"
  },
  {
    "text": "coordination context it'll just do the same thing as if you had not called configure a false because there's",
    "start": "3335520",
    "end": "3342330"
  },
  {
    "text": "literally nothing there orchestrating the threads so yeah yeah great point thanks for bringing that up yeah if we",
    "start": "3342330",
    "end": "3351120"
  },
  {
    "text": "had another question here in the middle and oh so yeah my my best advice since",
    "start": "3351120",
    "end": "3357990"
  },
  {
    "text": "we can't cover everything oh cool we got another one over here oh I'm sorry just real quick yeah the",
    "start": "3357990",
    "end": "3363030"
  },
  {
    "text": "best advice I can give for that question to just throw that into Google whatever you're working on like I say like entity",
    "start": "3363030",
    "end": "3369840"
  },
  {
    "text": "framework doesn't have a synchronization context and if it doesn't sync then configure wait false we'll do the same",
    "start": "3369840",
    "end": "3376410"
  },
  {
    "text": "thing as configure way true or never using it at all thanks thanks for bringing that up if you have multiple calls so one",
    "start": "3376410",
    "end": "3383670"
  },
  {
    "text": "function calling another one and that you await in every call do you",
    "start": "3383670",
    "end": "3388960"
  },
  {
    "text": "figure wait for the first goal or all the inside goals great question",
    "start": "3388960",
    "end": "3395430"
  },
  {
    "text": "configure away all the way down I wish dotnet was smarter let's see",
    "start": "3395430",
    "end": "3403599"
  },
  {
    "text": "what's a good example let's go let's put",
    "start": "3403599",
    "end": "3409570"
  },
  {
    "text": "this back to yeah so let's pretend this code was still like this right",
    "start": "3409570",
    "end": "3416160"
  },
  {
    "text": "this command kicks off all it's doing is awaiting this method dot weight or",
    "start": "3416160",
    "end": "3423339"
  },
  {
    "text": "dotnet isn't smart enough to know that this is the last line in a method and to",
    "start": "3423339",
    "end": "3429490"
  },
  {
    "text": "not switch back to the calling thread when it's done so I know it looks weird but if we were gonna do something like",
    "start": "3429490",
    "end": "3436420"
  },
  {
    "text": "that we'd still want to use configure wait falls even here so even if it's the last method the last line of the method",
    "start": "3436420",
    "end": "3443740"
  },
  {
    "text": "dotnet still is gonna bring you back to the calling thread if we do not use",
    "start": "3443740",
    "end": "3449200"
  },
  {
    "text": "configure way false so yeah all the way down unless you're unless you need to",
    "start": "3449200",
    "end": "3454330"
  },
  {
    "text": "return to the calling thread of course yeah so when you start going down this",
    "start": "3454330",
    "end": "3459609"
  },
  {
    "text": "rabbit hole with you should relate to get to a blog article by Stephen Clare I",
    "start": "3459609",
    "end": "3465220"
  },
  {
    "text": "think his name was where it says there is no thread so not necessarily get a new threat on thread pool if you do Anna",
    "start": "3465220",
    "end": "3472119"
  },
  {
    "text": "wait oh man so this is yeah this is why",
    "start": "3472119",
    "end": "3477460"
  },
  {
    "text": "that's what I meant but the rabbit hole goes deep alright so first thing if you've never heard of Stephen Cleary",
    "start": "3477460",
    "end": "3483130"
  },
  {
    "text": "it's spelled Stefan Cleary check him out he's the de facto expert on a sink and a",
    "start": "3483130",
    "end": "3489190"
  },
  {
    "text": "weight and he's probably the only person in the world I would trust not even myself talking about a sink in a way",
    "start": "3489190",
    "end": "3495520"
  },
  {
    "text": "like I think I know my stuff and then yeah I read article from Stephen Cleary it's like oh I guess I didn't know",
    "start": "3495520",
    "end": "3501130"
  },
  {
    "text": "anything so yeah that article is called there is no thread and there's a couple",
    "start": "3501130",
    "end": "3507849"
  },
  {
    "text": "things going on in there I think probably the most relevant one cuz I",
    "start": "3507849",
    "end": "3512950"
  },
  {
    "text": "mean he does get into like some nitty-gritty technicalities on how disk IO works and to be honest I just don't",
    "start": "3512950",
    "end": "3518830"
  },
  {
    "text": "remember everything you said it's a great article do check it out but things like this right here so we",
    "start": "3518830",
    "end": "3528610"
  },
  {
    "text": "just we said task dot run but we never used the await keyword in here dot Nets",
    "start": "3528610",
    "end": "3536290"
  },
  {
    "text": "not gonna put that onto a different thread like if you think back to remember move next that giant switch",
    "start": "3536290",
    "end": "3542350"
  },
  {
    "text": "statement well there's only gonna be one case and so if thread one calls this thread one's",
    "start": "3542350",
    "end": "3548350"
  },
  {
    "text": "just gonna fall right through get to the result and return it and we'll return the result it never because we never use",
    "start": "3548350",
    "end": "3556000"
  },
  {
    "text": "the away keyword so yeah there's there's kind of two parts of that blog and like I said like one is like the deep deep",
    "start": "3556000",
    "end": "3563350"
  },
  {
    "text": "stuff on like how disk IO works and why technically with C code that's still be",
    "start": "3563350",
    "end": "3569470"
  },
  {
    "text": "on my beyond my capabilities but yeah the the other big point there is if you",
    "start": "3569470",
    "end": "3576040"
  },
  {
    "text": "don't use the await keyword inside of a task dot Nets not gonna put that task on",
    "start": "3576040",
    "end": "3581590"
  },
  {
    "text": "to a different thread so that's a good point to make not and because of that",
    "start": "3581590",
    "end": "3586810"
  },
  {
    "text": "not every task is a threat die just confuse everybody awesome question",
    "start": "3586810",
    "end": "3597160"
  },
  {
    "text": "though uh anybody else all right thanks",
    "start": "3597160",
    "end": "3602950"
  },
  {
    "text": "so much for coming everybody [Applause]",
    "start": "3602950",
    "end": "3611940"
  }
]