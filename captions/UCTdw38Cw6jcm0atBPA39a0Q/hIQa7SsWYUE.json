[
  {
    "start": "0",
    "end": "73000"
  },
  {
    "text": "uh so if you have any questions feel free to add them there or comments that's cool i've got that up and hopefully i'll see it as well",
    "start": "640",
    "end": "6640"
  },
  {
    "text": "um anyhow let's get started uh my name is chris klogg um i work as a software developer slash",
    "start": "6640",
    "end": "12320"
  },
  {
    "text": "architect public speaker at a company called active solution in stockholm we do custom development in the",
    "start": "12320",
    "end": "18880"
  },
  {
    "text": "microsoft space for for different clients and i've been doing web development",
    "start": "18880",
    "end": "25119"
  },
  {
    "text": "since 96 professionally or at least i got paid the first time 96",
    "start": "25119",
    "end": "32078"
  },
  {
    "text": "uh i i've been working professionally hired at a company since 2000 so about 20",
    "start": "32079",
    "end": "37760"
  },
  {
    "text": "years now um it's giving me a kind of a cool background of of the",
    "start": "37760",
    "end": "43280"
  },
  {
    "text": "c-sharp stuff because i was early enough to be there when they released.net one and i've seen",
    "start": "43280",
    "end": "48640"
  },
  {
    "text": "c sharp from going from nothing to where we are today which is is really cool and and i'm also very",
    "start": "48640",
    "end": "54480"
  },
  {
    "text": "very happy that i got to be there in the beginning because c sharp is getting big and there's a lot",
    "start": "54480",
    "end": "59760"
  },
  {
    "text": "of stuff to learn and that's kind of where this talk came out of because i've been around for a long",
    "start": "59760",
    "end": "65760"
  },
  {
    "text": "time i haven't spent too much time looking at the c sharp language as such so i went down and i said hey i actually",
    "start": "65760",
    "end": "72400"
  },
  {
    "text": "i want to do a talk about the best new c-sharp features um and and the reason for going with the",
    "start": "72400",
    "end": "78240"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "best is is basically just that there's so much stuff in there and not everything is is really useful",
    "start": "78240",
    "end": "85119"
  },
  {
    "text": "and when i'm saying best it's obviously best from my view um and and there's a lot of",
    "start": "85119",
    "end": "92240"
  },
  {
    "text": "performance stuff that's really cool in there but i don't think most developers have the use for that so i'm gonna focus on the best features",
    "start": "92240",
    "end": "99280"
  },
  {
    "text": "that i like so that was the basics of my talk and and i said hey i'm going to do the top three best",
    "start": "99280",
    "end": "105439"
  },
  {
    "text": "features and no actually that sounds like a lightning talk if i'm going to talk about three",
    "start": "105439",
    "end": "110880"
  },
  {
    "text": "features for an hour it's going to be really really deep into something which is going to be quite boring so i went hey how about the",
    "start": "110880",
    "end": "117759"
  },
  {
    "text": "top five top five best features would be right really cool i think that's enough for",
    "start": "117759",
    "end": "122799"
  },
  {
    "text": "a talk and then i started looking at the uh the spec for what came out in c sharp six",
    "start": "122799",
    "end": "128879"
  },
  {
    "text": "and uh honestly that's a bit terrifying um i ended up looking at the spec and",
    "start": "128879",
    "end": "135120"
  },
  {
    "text": "oh no i'm gonna do ten i i need ten best features because there's so much stuff coming up in see sharp",
    "start": "135120",
    "end": "142000"
  },
  {
    "start": "137000",
    "end": "137000"
  },
  {
    "text": "um that i really need only 10 or rather i need 10 that's what",
    "start": "142000",
    "end": "148480"
  },
  {
    "text": "i could get it down to so here it is my top 10 best new features in c-shock version 6-9",
    "start": "148480",
    "end": "155360"
  },
  {
    "text": "um and as i said they're all my best features the things that i enjoy so if you don't agree too bad not my",
    "start": "155360",
    "end": "163040"
  },
  {
    "text": "problem you decided to go and listen to me talk about my favorite features so this is what you're gonna get",
    "start": "163040",
    "end": "168560"
  },
  {
    "text": "but before we get started there's some minor things i need to cover before we can actually go and look at",
    "start": "168560",
    "end": "174000"
  },
  {
    "text": "the actual features uh so we need to have a look at this chart here so",
    "start": "174000",
    "end": "179920"
  },
  {
    "text": "the default language versions for the different frameworks so what c-sharp versions you can use",
    "start": "179920",
    "end": "186560"
  },
  {
    "text": "depends on what framework you were targeting and also there's a default version that",
    "start": "186560",
    "end": "192800"
  },
  {
    "text": "you get when you start a project for that framework so if you for example are doing dot net framework like the the",
    "start": "192800",
    "end": "199519"
  },
  {
    "text": "old classic.net framework and you're on four point seven or four point eight",
    "start": "199519",
    "end": "205120"
  },
  {
    "text": "four point eight is list one i think um actually you get all the dotnet",
    "start": "205120",
    "end": "210159"
  },
  {
    "text": "framework versions but you should upgrade to 4.8 but if you're on dotnet framework you get c sharp 7.3 you don't get eight and you",
    "start": "210159",
    "end": "216480"
  },
  {
    "text": "don't get nine and some of the eight features and some of the nine cds will work on.net framework but",
    "start": "216480",
    "end": "221840"
  },
  {
    "text": "you get 7.3 out of the box.net standard net standard two seven point three for",
    "start": "221840",
    "end": "227519"
  },
  {
    "text": "quite obvious reasons because dot net standard two has to have the ability to target.net framework as well",
    "start": "227519",
    "end": "234480"
  },
  {
    "text": "then you got net core if you're on two you get 7.3 as well if you're on.net core three point x you",
    "start": "234480",
    "end": "241760"
  },
  {
    "text": "get c sharp eight and if you're on dot net standard 2.1 which is the same thing as",
    "start": "241760",
    "end": "246799"
  },
  {
    "text": "dot net core three x you get c sharp eight and if you go for the latest and greatest then you",
    "start": "246799",
    "end": "252720"
  },
  {
    "text": "go for net five which if you're building anything new i think you should uh you actually get the sharp nine which",
    "start": "252720",
    "end": "258560"
  },
  {
    "text": "is really really cool so there's a bunch of cool features in c sharp nine that you might wanna wanna use",
    "start": "258560",
    "end": "265040"
  },
  {
    "text": "but what if you're on a platform or a framework that doesn't have the version that you want to target say that there's",
    "start": "265040",
    "end": "271199"
  },
  {
    "text": "something in c sharp 8 that you want to target but you're on.net framework well the thing is you",
    "start": "271199",
    "end": "277440"
  },
  {
    "text": "can actually go into your cs project file and then you just go in and you in your property group at the top you just",
    "start": "277440",
    "end": "283520"
  },
  {
    "text": "add in line version and either you go preview latest latest major or you go over a specific version",
    "start": "283520",
    "end": "290720"
  },
  {
    "text": "and then that turns on the c-sharp of that version in your project and it's instead of using the default",
    "start": "290720",
    "end": "297440"
  },
  {
    "text": "which allows you to upgrade older projects to use new c-sharp features",
    "start": "297440",
    "end": "302960"
  },
  {
    "text": "but keep in mind that some of the features that you have in c-sharp",
    "start": "302960",
    "end": "308400"
  },
  {
    "text": "is is dependent on runtime features in your framework so even if you turn take your old.net",
    "start": "308400",
    "end": "314800"
  },
  {
    "text": "framework 4.8 project and you change the language version to c-sharp 9",
    "start": "314800",
    "end": "320400"
  },
  {
    "text": "you can't actually use all of these sharp nine features because some stuff will be missing but at least you can",
    "start": "320400",
    "end": "326639"
  },
  {
    "text": "upgrade and you can use some of the features and then the compiler will tell you when you're doing it wrong so that's a nice way of you for you to take",
    "start": "326639",
    "end": "333520"
  },
  {
    "text": "older projects and make them new again um",
    "start": "333520",
    "end": "340080"
  },
  {
    "text": "i got a question here did record types make it to your list yes it did you will see record types at",
    "start": "340080",
    "end": "345680"
  },
  {
    "text": "the end um okay so um let's let's skip that that was all just",
    "start": "345680",
    "end": "352479"
  },
  {
    "text": "the um the stuff ahead of times like you need to know this let's go ahead let's go and have a look at the top 10",
    "start": "352479",
    "end": "359280"
  },
  {
    "start": "358000",
    "end": "358000"
  },
  {
    "text": "best new features in c sharp version 6 to 9 according to me and number one and oh before i get",
    "start": "359280",
    "end": "366160"
  },
  {
    "text": "started this is this is not important but it might be good to know there is no particular order in the",
    "start": "366160",
    "end": "372240"
  },
  {
    "text": "tenon items i've just thrown them in there some things end up early in the list because i need to use",
    "start": "372240",
    "end": "378800"
  },
  {
    "text": "those features later on in my list so they kind of need to be introduced before i use them",
    "start": "378800",
    "end": "383919"
  },
  {
    "text": "other than that there's no there's nothing that says number one is cooler than number 10.",
    "start": "383919",
    "end": "390639"
  },
  {
    "text": "so number 10 is string interpolation i'm a massive fan of this thing i know",
    "start": "390639",
    "end": "396800"
  },
  {
    "start": "392000",
    "end": "392000"
  },
  {
    "text": "it's nothing cool at all but string interpolation helps us with this so i assume that most",
    "start": "396800",
    "end": "402880"
  },
  {
    "text": "of us have written a gazillion little string concatenations like this we try to make a little",
    "start": "402880",
    "end": "408000"
  },
  {
    "text": "message and it's just a concatenating strings with strings with strings and it",
    "start": "408000",
    "end": "413360"
  },
  {
    "text": "becomes this hard to read messed up gumball and it's performance-wise not perfect so",
    "start": "413360",
    "end": "418880"
  },
  {
    "text": "depending on how many things you concatenate you should be using a string builder string builders make it even harder to",
    "start": "418880",
    "end": "425199"
  },
  {
    "text": "read so yeah not fantastic and then some people will come and say",
    "start": "425199",
    "end": "430400"
  },
  {
    "text": "hey you can use string.format string.format is fine it makes it a little bit easier because",
    "start": "430400",
    "end": "436639"
  },
  {
    "text": "you get your your format and then you got your positional number so zero one two three",
    "start": "436639",
    "end": "443120"
  },
  {
    "text": "and then you add arguments in and it concatenates it for you which is really nice um there is one little thing about this",
    "start": "443120",
    "end": "451919"
  },
  {
    "text": "because you start using this and i've used this a lot it's very useful and then you've got some i have words",
    "start": "451919",
    "end": "459039"
  },
  {
    "text": "for these people i'm just not gonna use those because this is being recorded if you get somebody doing that",
    "start": "459039",
    "end": "466240"
  },
  {
    "text": "all of a sudden they start moving around one two zero three and then you have to go and look at okay",
    "start": "466240",
    "end": "471520"
  },
  {
    "text": "so one actually points to to first name and two points to last",
    "start": "471520",
    "end": "476800"
  },
  {
    "text": "name and zero points to group name it's really really not that easy to read",
    "start": "476800",
    "end": "482479"
  },
  {
    "text": "um so if you are gonna use string.format please go ahead and use that not",
    "start": "482479",
    "end": "489039"
  },
  {
    "text": "this whole hey i need to figure out and have a little phd in spring concatenation to figure out what's",
    "start": "489039",
    "end": "494240"
  },
  {
    "text": "actually going to come out of this however with c-sharp 6 they introduced this idea of string interpolation which",
    "start": "494240",
    "end": "500720"
  },
  {
    "text": "is really neat because instead of doing what we just did we can go ahead and write that",
    "start": "500720",
    "end": "506560"
  },
  {
    "text": "and honestly it's just syntactical sugar so in the end that gets compiled down to a string that format",
    "start": "506560",
    "end": "512320"
  },
  {
    "text": "and and all of that but they sorted out but it's much much easier to read this right so we put a dollar sign at the beginning",
    "start": "512320",
    "end": "519200"
  },
  {
    "text": "before our double quotes and then we go and we use curly braces to say i want to insert the user's first name",
    "start": "519200",
    "end": "526160"
  },
  {
    "text": "here the user's last name here then the string posted in and then the group's name and then the post date day",
    "start": "526160",
    "end": "531519"
  },
  {
    "text": "of week which is a lot easier to read in my mind so number 10 on my list would definitely be",
    "start": "531519",
    "end": "538560"
  },
  {
    "text": "string interpolation it's one of those things i use all the time when doing my software development",
    "start": "538560",
    "end": "544800"
  },
  {
    "text": "number nine default interface methods uh this was kind of a tricky one to put",
    "start": "544800",
    "end": "552000"
  },
  {
    "start": "547000",
    "end": "547000"
  },
  {
    "text": "on my list um i kind of like the feature it's really really cool uh but i honestly don't use it that much",
    "start": "552000",
    "end": "558880"
  },
  {
    "text": "because in most situations we solve it in different ways in old school ways but",
    "start": "558880",
    "end": "564399"
  },
  {
    "text": "it's this you go and write this interface right i email client i email client has a send",
    "start": "564399",
    "end": "571200"
  },
  {
    "start": "566000",
    "end": "566000"
  },
  {
    "text": "mail function takes an address from an address to a subject and a body that's about it very very simple email",
    "start": "571200",
    "end": "577680"
  },
  {
    "text": "client and then in some meetings somebody goes and says shouldn't we use templates for the",
    "start": "577680",
    "end": "584399"
  },
  {
    "start": "582000",
    "end": "582000"
  },
  {
    "text": "emails and yeah we probably should but you know what that means",
    "start": "584399",
    "end": "590160"
  },
  {
    "text": "so you get this fantastic feeling of couldn't you just have not said that because",
    "start": "590160",
    "end": "596160"
  },
  {
    "text": "your little comment now ends up with me having to write that",
    "start": "596160",
    "end": "601200"
  },
  {
    "text": "so i take my interface and i add this send templated email once again it goes from a to but in this case it",
    "start": "601200",
    "end": "608079"
  },
  {
    "text": "has a email template and then values to replace in that template okay",
    "start": "608079",
    "end": "613600"
  },
  {
    "text": "not a big problem the problem is that once you change your interface with this",
    "start": "613600",
    "end": "621519"
  },
  {
    "text": "then visual studio will go and say that so basically it will say oh dude there's",
    "start": "621519",
    "end": "628880"
  },
  {
    "text": "already an implementation here and now that you have changed the interface my implementation doesn't",
    "start": "628880",
    "end": "634880"
  },
  {
    "text": "implement that okay that is fine if email client the implementation is code that i",
    "start": "634880",
    "end": "642959"
  },
  {
    "text": "own well probably it's going to be um because i've i own the interface but",
    "start": "642959",
    "end": "649839"
  },
  {
    "text": "it could be something else and then it starts getting complicated and also",
    "start": "649839",
    "end": "655279"
  },
  {
    "text": "if you have several different clients then you have to go in and make changes to all of them",
    "start": "655279",
    "end": "660480"
  },
  {
    "text": "but with c-sharp 8 there's this really cool feature where when we define an interface we can also",
    "start": "660480",
    "end": "668880"
  },
  {
    "text": "add the default implementation so in this case here i add that send templated email method",
    "start": "668880",
    "end": "675839"
  },
  {
    "text": "to my interface but instead of doing what we normally do with an interface just end it with semicolon i actually do",
    "start": "675839",
    "end": "681839"
  },
  {
    "text": "call your base curly brace and add an implementation so this implementation has access to",
    "start": "681839",
    "end": "688959"
  },
  {
    "text": "all of the other functions in that interface so it can only use public",
    "start": "688959",
    "end": "695760"
  },
  {
    "text": "methods of the existing interface because we we know that once this gets added to the the",
    "start": "695760",
    "end": "703040"
  },
  {
    "text": "i email client the implementing version will already have those things implemented for us so by",
    "start": "703040",
    "end": "709360"
  },
  {
    "text": "adding this we can go and say hey i'm going to take this new version and i'm going to go and say if you don't",
    "start": "709360",
    "end": "716320"
  },
  {
    "text": "have an implementation of it then piggyback on this implementation that just goes and converts it into send email which is",
    "start": "716320",
    "end": "723600"
  },
  {
    "text": "really nice so that means that if you don't implement it in your client you get this function",
    "start": "723600",
    "end": "729200"
  },
  {
    "text": "or this implementation but if you do want to go and implement it in a custom way then you get a different implementation which is",
    "start": "729200",
    "end": "735839"
  },
  {
    "text": "really really cool um as i said not something we use a lot",
    "start": "735839",
    "end": "741360"
  },
  {
    "text": "but it does offer up some really cool ideas and and solves a bunch of problems when",
    "start": "741360",
    "end": "746480"
  },
  {
    "text": "you do have to break your interfaces and add new stuff to it",
    "start": "746480",
    "end": "751519"
  },
  {
    "text": "okay so number eight out variables",
    "start": "751519",
    "end": "756959"
  },
  {
    "start": "754000",
    "end": "754000"
  },
  {
    "text": "so out variables is not a big deal um and you've probably used them you",
    "start": "756959",
    "end": "762800"
  },
  {
    "text": "just probably haven't thought about it but the idea is this how many of you have not written this",
    "start": "762800",
    "end": "768720"
  },
  {
    "text": "right we all write this we all do try sparse methods and we all write this code here and we",
    "start": "768720",
    "end": "774880"
  },
  {
    "text": "all look at that thing and go why do i need to write int value and",
    "start": "774880",
    "end": "780079"
  },
  {
    "text": "declare that on top of it it might not be a big deal for you but",
    "start": "780079",
    "end": "785600"
  },
  {
    "text": "for me a person with with ocd or cdo which it should be because that's the right order",
    "start": "785600",
    "end": "792079"
  },
  {
    "text": "of the letters um it annoys me it annoys me a lot so without variables",
    "start": "792079",
    "end": "799920"
  },
  {
    "text": "in c sharp 7 which is where it was launched we can actually go ahead and change it",
    "start": "799920",
    "end": "805519"
  },
  {
    "text": "to that which i personally love it just means that we don't have to have that",
    "start": "805519",
    "end": "811360"
  },
  {
    "text": "integer value declared before we do the tripars instead we do we declare it as part of the triparts as",
    "start": "811360",
    "end": "818639"
  },
  {
    "text": "a part of the out and then when we after that line after",
    "start": "818639",
    "end": "824639"
  },
  {
    "text": "that if statement that variable is defined and we can use it both inside the if statement and after this",
    "start": "824639",
    "end": "830880"
  },
  {
    "text": "statement which is really nice um and also to make it even better we",
    "start": "830880",
    "end": "836480"
  },
  {
    "text": "can go and say out var so we don't have to care about the type which i really like i i use var",
    "start": "836480",
    "end": "841839"
  },
  {
    "text": "everywhere i never statically type anything um in when i declare my variables i always use var for everything i can",
    "start": "841839",
    "end": "848399"
  },
  {
    "text": "because it makes it easier so without var it just becomes really really simple to write instead of having",
    "start": "848399",
    "end": "854720"
  },
  {
    "text": "to have that in the value set in top on top of it uh not a big deal but one of those",
    "start": "854720",
    "end": "860959"
  },
  {
    "text": "features that it's tiny but it makes my code so much better",
    "start": "860959",
    "end": "866800"
  },
  {
    "text": "number seven i'm going through this pretty fast expression-bodied members so",
    "start": "866800",
    "end": "873839"
  },
  {
    "start": "868000",
    "end": "868000"
  },
  {
    "text": "expression-bodied members are also not a big deal but they make our code",
    "start": "873839",
    "end": "881040"
  },
  {
    "text": "a lot more precise so the way i can i can put it so if you imagine writing this code here",
    "start": "881040",
    "end": "888079"
  },
  {
    "text": "and where i've written a million of these properties it's a get only",
    "start": "888079",
    "end": "893199"
  },
  {
    "text": "property or there are two of them one string one decimal um and it's just it's it's not a big",
    "start": "893199",
    "end": "899279"
  },
  {
    "text": "deal but it is quite tedious and honestly uh it ends up with copy paste right you write one",
    "start": "899279",
    "end": "904880"
  },
  {
    "text": "and then you do copy paste a gazillion times for however many you need or you go up to the constructor and you go",
    "start": "904880",
    "end": "910800"
  },
  {
    "text": "control dot and then create interface create property and it source that for you but",
    "start": "910800",
    "end": "916399"
  },
  {
    "text": "that's one thing and it's not bigger but every single property takes up four",
    "start": "916399",
    "end": "922560"
  },
  {
    "text": "lines of code um sure and also by the way we have that",
    "start": "922560",
    "end": "927680"
  },
  {
    "text": "backing field so we've got two variables at the top as well and sure we could replace this implementation with this",
    "start": "927680",
    "end": "933759"
  },
  {
    "text": "which is the same thing it's a little bit neater because we don't have a return statement we just have get and",
    "start": "933759",
    "end": "939440"
  },
  {
    "text": "private set we don't need the backing field way better but it's still five lines of",
    "start": "939440",
    "end": "945600"
  },
  {
    "text": "code for every single property and all we want to do is have a very simple return statement so in c sharp six they",
    "start": "945600",
    "end": "954160"
  },
  {
    "text": "changed this and allowed us to do this instead which is once again not a huge deal but it makes properties",
    "start": "954160",
    "end": "961519"
  },
  {
    "text": "a one-liner you go public string name equals greater than and then the variable you or",
    "start": "961519",
    "end": "966959"
  },
  {
    "text": "the member or field that you want to return nice shorts and syntactically still quite",
    "start": "966959",
    "end": "973600"
  },
  {
    "text": "easy to read problem with this is that it's nice for",
    "start": "973600",
    "end": "979680"
  },
  {
    "text": "read-only things c sharp 6 still required us to do this whenever we had a get set we could go",
    "start": "979680",
    "end": "987040"
  },
  {
    "text": "and say get colon semicolon set semicolon as well and skip the backing field",
    "start": "987040",
    "end": "992160"
  },
  {
    "text": "but it still required us to do the get set and in c sharp 7 so it's just the next",
    "start": "992160",
    "end": "998720"
  },
  {
    "text": "version of c sharp they decided that hey we should introduce expression body gets in sets as well so not sure i use",
    "start": "998720",
    "end": "1007440"
  },
  {
    "text": "that part a lot i find it more useful for the the get only uh because the reason for",
    "start": "1007440",
    "end": "1015199"
  },
  {
    "text": "having get set is often that in your set you want to have some code that validates the value",
    "start": "1015199",
    "end": "1020240"
  },
  {
    "text": "or something like that and this doesn't actually allow you to do it so not a massive thing but the get version",
    "start": "1020240",
    "end": "1027918"
  },
  {
    "text": "of it is actually quite nice and then we have these annoying",
    "start": "1027919",
    "end": "1033678"
  },
  {
    "text": "mind micro functions right we very often have this little little functions that just return a",
    "start": "1033679",
    "end": "1040160"
  },
  {
    "text": "little thing get x or or do y they don't do a whole lot but they they need to be there so",
    "start": "1040160",
    "end": "1045918"
  },
  {
    "text": "for example tostring tostring is generally in 99.99",
    "start": "1045919",
    "end": "1051360"
  },
  {
    "text": "of the cases implemented with just a return and a string interpolation right because that's what we do",
    "start": "1051360",
    "end": "1058400"
  },
  {
    "text": "once again in c sharp 6 they allowed us to change that into an expression bodied",
    "start": "1058400",
    "end": "1063840"
  },
  {
    "text": "member so it becomes shorter simpler there are no more curly braces and still easy to read right and",
    "start": "1063840",
    "end": "1071840"
  },
  {
    "text": "when we got to see sharp 7 they made another update which is you can actually do expression",
    "start": "1071840",
    "end": "1078880"
  },
  {
    "text": "bodied members for your constructor and your destructor as well",
    "start": "1078880",
    "end": "1084640"
  },
  {
    "text": "once again not sure that these are a big deal um it would be cool to see if anybody in",
    "start": "1084960",
    "end": "1092080"
  },
  {
    "text": "the chat can say yes i'm using expression body members for my constructor or destructor because i think the usage is going to be",
    "start": "1092080",
    "end": "1098799"
  },
  {
    "text": "tiny but at least it's there so now you know um",
    "start": "1098799",
    "end": "1105120"
  },
  {
    "text": "okay so that was number seven uh as i said we're going through it quite fast",
    "start": "1105120",
    "end": "1110320"
  },
  {
    "text": "but it's giving you an idea of what's there and hopefully you've potentially you have actually looked and tried out most of these features already",
    "start": "1110320",
    "end": "1118320"
  },
  {
    "text": "um this number six is discards i'm kind of torn",
    "start": "1118320",
    "end": "1123440"
  },
  {
    "start": "1119000",
    "end": "1119000"
  },
  {
    "text": "when it comes to discards because a part of having discards is just a intentional kind of showing my",
    "start": "1123440",
    "end": "1131679"
  },
  {
    "text": "intent and some of it is actually quite useful so if we look at this cards here or discard",
    "start": "1131679",
    "end": "1137120"
  },
  {
    "text": "use in this case here so i've got one method that awaits another method that returns",
    "start": "1137120",
    "end": "1142640"
  },
  {
    "text": "a value if i saw this i i would look at that line of code and",
    "start": "1142640",
    "end": "1148720"
  },
  {
    "text": "and sort of go did somebody forget the return here or or was it intentional or was the return",
    "start": "1148720",
    "end": "1155520"
  },
  {
    "text": "value added later on and this code just haven't been updated of course i have a very simplistic piece",
    "start": "1155520",
    "end": "1161840"
  },
  {
    "text": "of code here i've got two methods they're really dumb do something and do something else there but you can imagine this being",
    "start": "1161840",
    "end": "1168320"
  },
  {
    "text": "a more complex piece of code and somebody awaits something that actually returns a value",
    "start": "1168320",
    "end": "1174160"
  },
  {
    "text": "and you just ignore it um it's kind of hard to figure out uh so in c sharp seven",
    "start": "1174160",
    "end": "1179919"
  },
  {
    "text": "um they introduced this idea of a discard so this card is just the underscore sign",
    "start": "1179919",
    "end": "1186880"
  },
  {
    "text": "um so in the underscore sign it's more of a explicit so here the underscore sign of",
    "start": "1186880",
    "end": "1194080"
  },
  {
    "text": "the discard is saying i know that there's a value coming back but i don't care i this is intentional",
    "start": "1194080",
    "end": "1202240"
  },
  {
    "text": "this is the right thing to do um i i know what i'm doing the the return",
    "start": "1202240",
    "end": "1207760"
  },
  {
    "text": "is so once again not a big deal doesn't make any difference to the code it doesn't change the il that you get out there but",
    "start": "1207760",
    "end": "1215120"
  },
  {
    "text": "for the developer that comes along a month later and looks at this code he can go he or she can go and say hmm okay intentionally",
    "start": "1215120",
    "end": "1222880"
  },
  {
    "text": "didn't care about the return value here which is good um i'll come back to the question in the",
    "start": "1222880",
    "end": "1230559"
  },
  {
    "text": "chat at the end so i can carry on here sorry about that uh take this piece of code here so this is",
    "start": "1230559",
    "end": "1237360"
  },
  {
    "text": "even this is even trickier because this time do something does not await the other method",
    "start": "1237360",
    "end": "1243919"
  },
  {
    "text": "imagine that this is like a logging function or something that it's not critical and it can be done",
    "start": "1243919",
    "end": "1250000"
  },
  {
    "text": "asynchronously so i'm just going to call do something else and let it run in the background i'm not",
    "start": "1250000",
    "end": "1255039"
  },
  {
    "text": "going to await it i'm just going to keep going this happens but for obvious reasons",
    "start": "1255039",
    "end": "1262400"
  },
  {
    "text": "the rustling uh analyzer comes out and says hey wait a minute uh this thing is not a",
    "start": "1262400",
    "end": "1269600"
  },
  {
    "text": "weighted so you should probably consider using the await thing here and it adds little green squiggly lines",
    "start": "1269600",
    "end": "1275840"
  },
  {
    "text": "to your code line of code kind of annoying but if you go in here",
    "start": "1275840",
    "end": "1282720"
  },
  {
    "text": "and say discard the return here the the analyzer goes and says okay you know what you're",
    "start": "1282720",
    "end": "1288480"
  },
  {
    "text": "doing i'm not going to complain anymore you're more than welcome to do that you have intentionally ignored the fact",
    "start": "1288480",
    "end": "1295600"
  },
  {
    "text": "that it's an asynchronous operation so this is not just a matter of telling the developer that comes after you",
    "start": "1295600",
    "end": "1300960"
  },
  {
    "text": "this is about telling the compiler that i know what i'm doing i do not want to await this thing here",
    "start": "1300960",
    "end": "1306559"
  },
  {
    "text": "if if it doesn't work then fine i don't care",
    "start": "1306559",
    "end": "1311039"
  },
  {
    "text": "we've also got a really cool new thing in here which is a combination of discards and throw expressions so",
    "start": "1312799",
    "end": "1320960"
  },
  {
    "text": "this is pretty common code right you go in um this will not compile because you",
    "start": "1320960",
    "end": "1327600"
  },
  {
    "text": "didn't pass any argument oh sorry true i'd forgotten argument here",
    "start": "1327600",
    "end": "1332880"
  },
  {
    "text": "i don't think you guys realize how hard it is to code in powerpoint i have literally sat down",
    "start": "1332880",
    "end": "1339600"
  },
  {
    "text": "and color coded every single word of my code to make it more readable so it can",
    "start": "1339600",
    "end": "1345120"
  },
  {
    "text": "actually have the same color coding that i have in my visual studio but everything is manually color coded",
    "start": "1345120",
    "end": "1351520"
  },
  {
    "text": "so yes if i miss something in code please point it out so i can fix it i've",
    "start": "1351520",
    "end": "1357120"
  },
  {
    "text": "forgotten and a string here i agree um okay so coming back to my my check",
    "start": "1357120",
    "end": "1365039"
  },
  {
    "text": "here this is very not common code right you get a string value passed in and then the first thing you want to do is to",
    "start": "1365039",
    "end": "1370720"
  },
  {
    "text": "check if the string is null and then if it's null you saw an argument no exception and then you check",
    "start": "1370720",
    "end": "1375760"
  },
  {
    "text": "the the length of the string and if it's less that's that's an incorrect one as well",
    "start": "1375760",
    "end": "1381600"
  },
  {
    "text": "if length equals zero should be not greater than my code is bad now you know why i i do",
    "start": "1381600",
    "end": "1387919"
  },
  {
    "text": "presentations and don't code right um if the length is zero then i pass in",
    "start": "1387919",
    "end": "1393039"
  },
  {
    "text": "an arg i throw an argument exception this piece of code is fine when there's like one",
    "start": "1393039",
    "end": "1398880"
  },
  {
    "text": "parameter coming in but if you have multiple parameters coming in and you need to check every one of them you end up with",
    "start": "1398880",
    "end": "1406559"
  },
  {
    "text": "n n times two little if statements uh to figure out if",
    "start": "1406559",
    "end": "1413679"
  },
  {
    "text": "they're okay or not this is really cool so this combines",
    "start": "1413679",
    "end": "1420320"
  },
  {
    "text": "uh some null coalescing uh stuff together with the fact that",
    "start": "1420320",
    "end": "1426480"
  },
  {
    "text": "throw has now turned into what is called a throw expression in c sharp seven so we can do a discard here saying that",
    "start": "1426480",
    "end": "1434000"
  },
  {
    "text": "assign whatever i don't really care if the name assign whatever i don't care to name or",
    "start": "1434000",
    "end": "1442320"
  },
  {
    "text": "if the name is null then throw a new argument null exception so",
    "start": "1442320",
    "end": "1448159"
  },
  {
    "text": "instead of having three lines of code with an if statement we can do this very short syntax here",
    "start": "1448159",
    "end": "1453760"
  },
  {
    "text": "and due to the fact that we are assigning the respon response to a discard it just gets discarded but it means that",
    "start": "1453760",
    "end": "1460320"
  },
  {
    "text": "it throws an exception if the name property is null and on the second one",
    "start": "1460320",
    "end": "1465520"
  },
  {
    "text": "once again the check is wrong here it should be equal to zero it checks to see if it's equal to zero",
    "start": "1465520",
    "end": "1472400"
  },
  {
    "text": "then i don't care but if it's not then no sorry in this case it's right if",
    "start": "1472400",
    "end": "1479120"
  },
  {
    "text": "it's larger than zero then then it's fine if it's not larger than zero then throw an argument exception so",
    "start": "1479120",
    "end": "1485200"
  },
  {
    "text": "we end up taking this here which is seven lines of code and we turn it into",
    "start": "1485200",
    "end": "1491120"
  },
  {
    "text": "this little thing here which is just two succinct rows of code that everybody can",
    "start": "1491120",
    "end": "1496559"
  },
  {
    "text": "understand hopefully so that's a very big favorite i use this in pretty much everything that i'm",
    "start": "1496559",
    "end": "1501919"
  },
  {
    "text": "writing today whenever i see that old if statement um i kind of feel sick and i have to",
    "start": "1501919",
    "end": "1508000"
  },
  {
    "text": "change it so i have a lot of little commits to different projects where i've just changed",
    "start": "1508000",
    "end": "1513279"
  },
  {
    "text": "these things because this is so much easier to read so that brings us to number five which",
    "start": "1513279",
    "end": "1520080"
  },
  {
    "text": "i've already kind of touched and that's non-conditional operation and null coalescing assignment",
    "start": "1520080",
    "end": "1526320"
  },
  {
    "text": "so we're going to start i'm bringing them into one just calling them number five i know they're two different",
    "start": "1526320",
    "end": "1532159"
  },
  {
    "text": "things but they are very closely related so i'm going to start out with looking at null conditional operator so here's",
    "start": "1532159",
    "end": "1539679"
  },
  {
    "text": "another one of these checks with null checks and everything and null is a pain in the butt to work with to be",
    "start": "1539679",
    "end": "1545760"
  },
  {
    "text": "perfectly honest so here is some code that goes and says if order is not null if or the recipient is not null if or",
    "start": "1545760",
    "end": "1552400"
  },
  {
    "text": "the recipient email address is not null then send an email chunky piece of code",
    "start": "1552400",
    "end": "1559279"
  },
  {
    "text": "uh hard not hard to read it's just very long trade and very verbose",
    "start": "1559279",
    "end": "1564640"
  },
  {
    "text": "and yes we can change it into this so we can get ands in there we only have",
    "start": "1564640",
    "end": "1570400"
  },
  {
    "text": "one if statements but there's still a lot of stuff to read right in c sharp six they change this and",
    "start": "1570400",
    "end": "1577200"
  },
  {
    "text": "allows it allow us to do this so they introduced the null conditional",
    "start": "1577200",
    "end": "1582240"
  },
  {
    "text": "operator saying that if order is not null then look at recipient if",
    "start": "1582240",
    "end": "1589440"
  },
  {
    "text": "recipient is not null then look at email address if email address is not null then return email address if",
    "start": "1589440",
    "end": "1596000"
  },
  {
    "text": "any of these values along the way is null then it returns null so",
    "start": "1596000",
    "end": "1601200"
  },
  {
    "text": "it's pretty cool it makes that line of code a lot shorter which i really really like and it",
    "start": "1601200",
    "end": "1606799"
  },
  {
    "text": "simplifies a lot of things in here i have a little little code little",
    "start": "1606799",
    "end": "1612799"
  },
  {
    "text": "a few comments in the chat here with nullable reference type most cards are gone quiet i'm gonna come to nullable just",
    "start": "1612799",
    "end": "1619840"
  },
  {
    "text": "just wait a little while i promise you it will be in there so that was your",
    "start": "1619840",
    "end": "1625039"
  },
  {
    "text": "null conditional operator um this is it's just useful uh i keep forgetting it in c",
    "start": "1625039",
    "end": "1630720"
  },
  {
    "text": "sharp i use it all the time in typescript uh in in angular stuff that i'm building but for c sharp",
    "start": "1630720",
    "end": "1636640"
  },
  {
    "text": "i i still do a lot of the old stuff and that's kind of it's fine doing the old things as well",
    "start": "1636640",
    "end": "1642640"
  },
  {
    "text": "you can keep that in mind so the other thing is the null coalescing assignment once again",
    "start": "1642640",
    "end": "1648640"
  },
  {
    "start": "1646000",
    "end": "1646000"
  },
  {
    "text": "a tiny little feature doesn't do a whole lot but i really really really love it when i can",
    "start": "1648640",
    "end": "1654159"
  },
  {
    "text": "use it because look at this piece of code here very very common code in my my world um not very very but it's",
    "start": "1654159",
    "end": "1661120"
  },
  {
    "text": "pretty common where we're going to say if you passed in null then hey i want to replace it with my default",
    "start": "1661120",
    "end": "1666880"
  },
  {
    "text": "value yes i could go ahead and add a default in the method up there but this was a",
    "start": "1666880",
    "end": "1672159"
  },
  {
    "text": "simplified version of what i wanted to show and in this case we can change this and",
    "start": "1672159",
    "end": "1677600"
  },
  {
    "text": "say sfc sharp 8 by the way we can say this question mark question mark equals",
    "start": "1677600",
    "end": "1685840"
  },
  {
    "text": "so i i yeah that means that take options assign the options variable",
    "start": "1685840",
    "end": "1692559"
  },
  {
    "text": "to either options or if it is null assign it to myoptions.default instead",
    "start": "1692559",
    "end": "1699279"
  },
  {
    "text": "so it just shortens down that if null options equals blah blah blah into question mark question mark equals",
    "start": "1699279",
    "end": "1706399"
  },
  {
    "text": "and my honest opinion are we getting to the point where c sharp needs three character operators",
    "start": "1706399",
    "end": "1715120"
  },
  {
    "text": "it's getting a little bit out of hand in my mind um i i have a hard time remembering all",
    "start": "1715120",
    "end": "1720960"
  },
  {
    "text": "these operators and honestly if they start adding in four i'm i'm gonna i'm gonna",
    "start": "1720960",
    "end": "1726640"
  },
  {
    "text": "leave and start doing javascript but it's pretty cool uh this thing can help out in in and",
    "start": "1726640",
    "end": "1733039"
  },
  {
    "text": "make your code once again just shorter and simpler to read and that's a reoccurring thing",
    "start": "1733039",
    "end": "1738960"
  },
  {
    "text": "that you end up with when it comes to c-sharp features coming up and that's",
    "start": "1738960",
    "end": "1744799"
  },
  {
    "text": "the fact that everything gets shorter more concise but still hopefully quite",
    "start": "1744799",
    "end": "1750639"
  },
  {
    "text": "readable got more comments down here uh i'm gonna look at the chat afterwards sorry i'm",
    "start": "1750840",
    "end": "1756080"
  },
  {
    "start": "1752000",
    "end": "1752000"
  },
  {
    "text": "gonna keep going um so number four already mentioned uh nullable reference types um",
    "start": "1756080",
    "end": "1764880"
  },
  {
    "text": "i really really love the idea of nullarbor reference types because as mentioned in the chat already that it solves a",
    "start": "1764880",
    "end": "1772960"
  },
  {
    "text": "bunch of problems so imagine this piece of code here",
    "start": "1772960",
    "end": "1778320"
  },
  {
    "text": "once again we're back to nullable checks and yes we've made nullable checks easier with",
    "start": "1778320",
    "end": "1784240"
  },
  {
    "text": "the uh with the discards and the null operators and things like that but we still have",
    "start": "1784240",
    "end": "1790240"
  },
  {
    "text": "to go in and check values for null which is kind of annoying because by default",
    "start": "1790240",
    "end": "1795600"
  },
  {
    "text": "in c sharp or sorry in dot net reference types are nullable so anything that is a reference type can be null",
    "start": "1795600",
    "end": "1802000"
  },
  {
    "text": "and that means that you have to keep track of what's a value type and what's reference type which is not hard if you're a developer since a long time",
    "start": "1802000",
    "end": "1808480"
  },
  {
    "text": "back but if you're new to the language it can be a bit confusing and hard to read and",
    "start": "1808480",
    "end": "1814080"
  },
  {
    "text": "hard to figure out when it's possible to be null when it's not and so on in c sharp eight they introduced this",
    "start": "1814080",
    "end": "1820399"
  },
  {
    "text": "really cool feature called nullable reference types where we can say that a reference type",
    "start": "1820399",
    "end": "1827200"
  },
  {
    "text": "cannot it has to be specifically null so that means that we can remove the",
    "start": "1827200",
    "end": "1832880"
  },
  {
    "text": "null check to our print length and just leave it at this because with nullable reference types we",
    "start": "1832880",
    "end": "1838799"
  },
  {
    "text": "know that this string is not going to be null because it's not null it's a reference type and",
    "start": "1838799",
    "end": "1844799"
  },
  {
    "text": "they can't be null because i turned that on or that's a feature of c sharp 8. and then",
    "start": "1844799",
    "end": "1850080"
  },
  {
    "text": "you go ahead and you write some code like this uh which is is fine uh and then",
    "start": "1850080",
    "end": "1855760"
  },
  {
    "text": "somewhere in here in that dot dot where all the other code is you you you do not assign",
    "start": "1855760",
    "end": "1861200"
  },
  {
    "text": "the uh the string here to a anything um and then it turns out to be null",
    "start": "1861200",
    "end": "1867679"
  },
  {
    "text": "um and then you run the code and you get this",
    "start": "1867679",
    "end": "1875759"
  },
  {
    "text": "dot null reference exception string but",
    "start": "1877200",
    "end": "1881760"
  },
  {
    "text": "but chris you said that if you had c sharp eight then it was nullable reference types and",
    "start": "1882960",
    "end": "1888320"
  },
  {
    "text": "and my reference type couldn't be null so you're you're screwing with me i'm not it is true that with c",
    "start": "1888320",
    "end": "1895919"
  },
  {
    "text": "sharp eight you've got nullable reference types but for backwards compatibility they are not",
    "start": "1895919",
    "end": "1902640"
  },
  {
    "text": "turned on so nullable reference types is not something you're going to get just because you upgrade to c sharp eight you",
    "start": "1902640",
    "end": "1909360"
  },
  {
    "text": "actually have to go into your cs project file and you have to go and add this nullable and set it to enabled to turn",
    "start": "1909360",
    "end": "1916559"
  },
  {
    "text": "on nullable reference types and if you're on older versions of nets and net framework for example you",
    "start": "1916559",
    "end": "1923519"
  },
  {
    "text": "have got the framework uh you have to go in and set the language version to 8 because",
    "start": "1923519",
    "end": "1929120"
  },
  {
    "text": "net framework defaults to 7.3 and then you have to turn on nullable as well in here with enable to get um",
    "start": "1929120",
    "end": "1938159"
  },
  {
    "text": "nullable reference types turned on and also important thing to remember",
    "start": "1938159",
    "end": "1943600"
  },
  {
    "text": "here nullable reference types is not a change to the run time it's not",
    "start": "1943600",
    "end": "1949279"
  },
  {
    "text": "something that actually exists in the runtime as such the runtime has no clue about",
    "start": "1949279",
    "end": "1954640"
  },
  {
    "text": "non-nullable reference types they're all nullable what we get from turning this on is that the compiler will go through all",
    "start": "1954640",
    "end": "1961679"
  },
  {
    "text": "of your code and figure out where you're potentially passing in a null value where you're not",
    "start": "1961679",
    "end": "1968480"
  },
  {
    "text": "allowed to pass in the null value so it's a compile time check not a runtime thing so that's",
    "start": "1968480",
    "end": "1973760"
  },
  {
    "text": "why we can turn it on in older versions as well and then we don't have to make any changes here and",
    "start": "1973760",
    "end": "1980799"
  },
  {
    "text": "we don't have to make any changes here but all of a sudden because i turned on nullable",
    "start": "1980799",
    "end": "1986240"
  },
  {
    "text": "this string value here will be a string it will not be null",
    "start": "1986240",
    "end": "1992799"
  },
  {
    "text": "and as i said no changing here either the only thing that really happens when you run this",
    "start": "1992799",
    "end": "1998880"
  },
  {
    "text": "when you turn on nullable is that visual studio has a rostenial analyzer or analyzer in",
    "start": "1998880",
    "end": "2004320"
  },
  {
    "text": "here the compiler looks at it and goes possible null reference argument for parameter value blah blah blah",
    "start": "2004320",
    "end": "2010640"
  },
  {
    "text": "that's it nothing else happens that's that's what happening but it makes it possible for you to look",
    "start": "2010640",
    "end": "2017279"
  },
  {
    "text": "at the warnings and go and say oh wait a minute i'm doing something that could go wrong here",
    "start": "2017279",
    "end": "2024159"
  },
  {
    "text": "and if you explicitly do want to have a nullable reference type you have to literally",
    "start": "2024159",
    "end": "2030559"
  },
  {
    "text": "make it nullable so you have to go in and add a question mark after string to say that i'm going to accept",
    "start": "2030559",
    "end": "2037200"
  },
  {
    "text": "something that can be null as well and i will take responsibility for checking to see if the value is null or",
    "start": "2037200",
    "end": "2043760"
  },
  {
    "text": "not so that little thing there says that i know it can be null in here but i know what i'm doing",
    "start": "2043760",
    "end": "2051760"
  },
  {
    "text": "um and then you can use these null conditional things to figure out to",
    "start": "2052079",
    "end": "2058638"
  },
  {
    "text": "maybe do a default value or something like that instead as well so the null stuff can still work and still be useful",
    "start": "2058639",
    "end": "2066240"
  },
  {
    "text": "um and here's another little sweet thing once in a while i'm not saying that this",
    "start": "2066240",
    "end": "2072398"
  },
  {
    "text": "is often i couldn't actually come up with an example straight up that was easy to show but you can come up to come",
    "start": "2072399",
    "end": "2078560"
  },
  {
    "text": "into situations where the compiler cannot figure out that in your code",
    "start": "2078560",
    "end": "2083839"
  },
  {
    "text": "somewhere before this right line statement that value gets assigned so you know when you get to this point that it",
    "start": "2083839",
    "end": "2090480"
  },
  {
    "text": "is not null but the compiler will still complain and what you can do then is you can add an",
    "start": "2090480",
    "end": "2095520"
  },
  {
    "text": "exclamation mark telling the compiler that i know it's nullable you're telling me that it could be null",
    "start": "2095520",
    "end": "2101680"
  },
  {
    "text": "here but i know from my code which is apparently too complex for you to figure out",
    "start": "2101680",
    "end": "2106960"
  },
  {
    "text": "that it has a value here so stop complaining i know what i'm doing i love the fact that we now have a bunch",
    "start": "2106960",
    "end": "2113280"
  },
  {
    "text": "of little extra things in our code which is us telling the compiler that i know stuff better than you do but that's",
    "start": "2113280",
    "end": "2119599"
  },
  {
    "text": "the way it works um but this is an interesting part",
    "start": "2119599",
    "end": "2124880"
  },
  {
    "text": "coming back to the warning here so the only thing that happens when you do something wrong is that",
    "start": "2124880",
    "end": "2130480"
  },
  {
    "text": "it becomes a warning nullability issues in nullable reference types are just warnings",
    "start": "2130480",
    "end": "2135599"
  },
  {
    "text": "they do not turn on any errors they do not cause compiles to fail they will just go and say hey you might",
    "start": "2135599",
    "end": "2142480"
  },
  {
    "text": "want to change this so if you do want to turn it on and make it a warning or sorry",
    "start": "2142480",
    "end": "2147760"
  },
  {
    "text": "an error and actually have stuff fail when you do it wrong you go into your cs project file and you",
    "start": "2147760",
    "end": "2153680"
  },
  {
    "text": "set warnings as errors nullable that will turn all of your nullable warnings which is a",
    "start": "2153680",
    "end": "2160640"
  },
  {
    "text": "bunch of cs86002 something uh into errors and actually fail your",
    "start": "2160640",
    "end": "2166560"
  },
  {
    "text": "builds so this will keep your developers on their toes and making sure that they actually do take care of the nullability",
    "start": "2166560",
    "end": "2175359"
  },
  {
    "text": "and then all of a sudden those things turn into errors instead so my exactly the same error message the",
    "start": "2175359",
    "end": "2182200"
  },
  {
    "text": "cs8604 turns into be an error not a warning failing my build which is really cool",
    "start": "2182200",
    "end": "2188480"
  },
  {
    "text": "um if you start doing this on older code that's already written uh you might wanna look at this little",
    "start": "2188480",
    "end": "2195920"
  },
  {
    "text": "pragmas thing here compile statement that basically says nullable enable and disable a nullable",
    "start": "2195920",
    "end": "2202320"
  },
  {
    "text": "restore because this allows you to turn off nullability for a part of your code so",
    "start": "2202320",
    "end": "2207359"
  },
  {
    "text": "if you turn it on for an old code base for example and you don't have time to go through it",
    "start": "2207359",
    "end": "2213119"
  },
  {
    "text": "um all of it you can go and put in nullable disable and remove nullability checks and then",
    "start": "2213119",
    "end": "2219440"
  },
  {
    "text": "nullable restore to go back to the default app when you're done or you can explicitly enable it for certain areas",
    "start": "2219440",
    "end": "2225920"
  },
  {
    "text": "and then restore it back to disable once you're done with it so being able to turn it on and off in",
    "start": "2225920",
    "end": "2232000"
  },
  {
    "text": "your code is actually quite useful for those scenarios because it's cool to turn it on in an older codebase but it's also problematic",
    "start": "2232000",
    "end": "2238640"
  },
  {
    "text": "because if you turn it on in anything larger than the hello world app you're going to end up with a gazillion",
    "start": "2238640",
    "end": "2245680"
  },
  {
    "text": "different warning messages in your compiler",
    "start": "2245680",
    "end": "2250078"
  },
  {
    "start": "2250000",
    "end": "2250000"
  },
  {
    "text": "okay so that brings us to number three which are named tuples so",
    "start": "2250880",
    "end": "2257920"
  },
  {
    "text": "in a real world scenario where you had been in the room i would have liked to see how many of you who had actually",
    "start": "2257920",
    "end": "2263760"
  },
  {
    "text": "written a piece of code like this a stupid return value class that is only written for you to be able to return two",
    "start": "2263760",
    "end": "2270640"
  },
  {
    "text": "values from a method so say that you have a uh an http client that needs to return",
    "start": "2270640",
    "end": "2276880"
  },
  {
    "text": "if it's successful or not and it needs to return the response as well so that i can check is successful and then look at response",
    "start": "2276880",
    "end": "2282960"
  },
  {
    "text": "afterwards really annoying little class it needs to be there because",
    "start": "2282960",
    "end": "2288079"
  },
  {
    "text": "c sharp doesn't allow me to do multiple return statements or return multiple values i can use out",
    "start": "2288079",
    "end": "2293760"
  },
  {
    "text": "statements out values or other variables solve this problem a little bit however you",
    "start": "2293760",
    "end": "2301200"
  },
  {
    "text": "cannot use out variables or parameters for asynchronous methods",
    "start": "2301200",
    "end": "2306560"
  },
  {
    "text": "so if you're doing async you're going to end up having to do this right c sharp four so chris you said you were",
    "start": "2306560",
    "end": "2313440"
  },
  {
    "text": "going to talk about c sharp six to nine and now you're talking about c sharp four which is probably 20 years old by now yes",
    "start": "2313440",
    "end": "2320800"
  },
  {
    "text": "i just want to show you that c sharp four introduced what's called c sharp tuples which is this thing here",
    "start": "2320800",
    "end": "2328240"
  },
  {
    "text": "we can create our methods and then we can say i want to return two values i want to return what's called a tuple",
    "start": "2328240",
    "end": "2334640"
  },
  {
    "text": "which is an object with more than one value and then we return in this case a boolean and a string and i can return",
    "start": "2334640",
    "end": "2340640"
  },
  {
    "text": "true and it worked which is fine so that solves a partner problem and i",
    "start": "2340640",
    "end": "2345680"
  },
  {
    "text": "really really really tried to love the c-sharp tuples i tried to use them",
    "start": "2345680",
    "end": "2351040"
  },
  {
    "text": "and every single time i've used them i have come back and said i'm not going to use them and",
    "start": "2351040",
    "end": "2356160"
  },
  {
    "text": "i've thrown them out because i couldn't use them because it looks like that when you start using them",
    "start": "2356160",
    "end": "2362320"
  },
  {
    "text": "so you call do something you get an object back which is a tuple but that tuple has an item one and item",
    "start": "2362320",
    "end": "2369680"
  },
  {
    "text": "two no explanation what they are no explanation what they contain",
    "start": "2369680",
    "end": "2375280"
  },
  {
    "text": "no idea yeah it's a boolean in the string no idea especially if you start",
    "start": "2375280",
    "end": "2380880"
  },
  {
    "text": "returning multiple strings for example and you go wait a minute was it item one right then two right and four i",
    "start": "2380880",
    "end": "2386079"
  },
  {
    "text": "should be using in this case here it's just yeah not that great not a big fan but",
    "start": "2386079",
    "end": "2391200"
  },
  {
    "text": "they are there and that is called a c-sharp tuple",
    "start": "2391200",
    "end": "2396240"
  },
  {
    "text": "c sharp 7 introduced a new type called a value tuple",
    "start": "2396240",
    "end": "2401599"
  },
  {
    "start": "2397000",
    "end": "2397000"
  },
  {
    "text": "so a value tube is a little bit different and you can use these in dot net framework um it's",
    "start": "2401599",
    "end": "2408160"
  },
  {
    "text": "as well and if you're below 4.7 you need to add a new get package uh so it's actually something you can",
    "start": "2408160",
    "end": "2413440"
  },
  {
    "text": "backboard quite quite a bit but it allows us with a sin to use a syntax like this instead so we",
    "start": "2413440",
    "end": "2419680"
  },
  {
    "text": "name the boolean and we name the string in this case is success and response we return it in exactly the",
    "start": "2419680",
    "end": "2426800"
  },
  {
    "text": "same way but when we come to use it we get an object that has an is success and a response method",
    "start": "2426800",
    "end": "2434720"
  },
  {
    "text": "or sorry response property which is really really awesome because it's so much easier to use um",
    "start": "2434720",
    "end": "2441200"
  },
  {
    "text": "and it makes much more sense so the reason i went back and looked at c sharp tuples",
    "start": "2441200",
    "end": "2446319"
  },
  {
    "start": "2444000",
    "end": "2444000"
  },
  {
    "text": "versus value tuples is that i want to show you that i know that we've had tuples for ages but they are very very",
    "start": "2446319",
    "end": "2451839"
  },
  {
    "text": "different so c-sharp tuples are immutable reference types with properties",
    "start": "2451839",
    "end": "2457920"
  },
  {
    "text": "so they're they're small classes basically they're classes and they have properties and they are get set properly so you can",
    "start": "2457920",
    "end": "2464400"
  },
  {
    "text": "they're mutable whereas value tuples is a value type and it has fields instead so it's",
    "start": "2464400",
    "end": "2470960"
  },
  {
    "text": "actually mutable when you get a value tuple back you can change it however much you want there's no",
    "start": "2470960",
    "end": "2476880"
  },
  {
    "text": "um there's no immutable value tuple so you have to choose between",
    "start": "2476880",
    "end": "2482240"
  },
  {
    "text": "immutability and item one two three four five or value tuples which is mutable but",
    "start": "2482240",
    "end": "2488400"
  },
  {
    "text": "have proper have field names that are actually usable",
    "start": "2488400",
    "end": "2493280"
  },
  {
    "text": "they also support destruction or deconstruction deconstruction is a new feature in c",
    "start": "2493760",
    "end": "2499440"
  },
  {
    "text": "sharp as well that allows you to work with not only tuples this can be done with with",
    "start": "2499440",
    "end": "2504720"
  },
  {
    "text": "real classes or other classes as well by implementing a deconstruct method",
    "start": "2504720",
    "end": "2509839"
  },
  {
    "text": "but what we get here is do something returns a tuple with two values but i split those two values into two",
    "start": "2509839",
    "end": "2516720"
  },
  {
    "text": "separate variables so i have a bools is success and a string response and i take the tuple i split it into these two properties and",
    "start": "2516720",
    "end": "2523520"
  },
  {
    "text": "then i can use them individually so that part there is called deconstruction",
    "start": "2523520",
    "end": "2529839"
  },
  {
    "text": "um and then we're back to that stupid out thing again where i have to declare my my parameters or my val",
    "start": "2529839",
    "end": "2537440"
  },
  {
    "text": "variables before i use them which is kind of annoying which they know with the c sharp team so they introduce this syntax which is nice",
    "start": "2537440",
    "end": "2544319"
  },
  {
    "text": "where you can inline the declaration of the variables so you don't need to predefine them before you",
    "start": "2544319",
    "end": "2549680"
  },
  {
    "text": "get started and then they took that one step further and they allowed us to do that so you",
    "start": "2549680",
    "end": "2555280"
  },
  {
    "text": "add var and then it figures out the types based on the tuple you get back automatically so you just go var",
    "start": "2555280",
    "end": "2561119"
  },
  {
    "text": "parenthesis is success response it figures out the types and then you can start using the things afterwards and then you can combine that",
    "start": "2561119",
    "end": "2568480"
  },
  {
    "text": "with um discards or discards where you basically say i",
    "start": "2568480",
    "end": "2573839"
  },
  {
    "text": "care about this success one i really don't care about that other thing so the string that you're returning",
    "start": "2573839",
    "end": "2579359"
  },
  {
    "text": "don't care only care about whether or not it was a success i can then go and say hey discard this i don't need a variable",
    "start": "2579359",
    "end": "2585440"
  },
  {
    "text": "for it don't care which is quite nice and then in 7.3 they added some more features to",
    "start": "2585440",
    "end": "2593280"
  },
  {
    "text": "value type tuples which uh for example they added equality comparison which is quite nice",
    "start": "2593280",
    "end": "2599119"
  },
  {
    "text": "so if you declare two to value tuples like this there are two values but they have equality comparison built in so",
    "start": "2599119",
    "end": "2604960"
  },
  {
    "text": "they verify the x and y in this case and if they're similar the same thing they they come",
    "start": "2604960",
    "end": "2610240"
  },
  {
    "text": "back as true there is a little caveat with using this",
    "start": "2610240",
    "end": "2617200"
  },
  {
    "text": "because if you look at this code this is kind of complicated",
    "start": "2617440",
    "end": "2624000"
  },
  {
    "text": "yeah so x and order in this case are equal it doesn't care what your",
    "start": "2624000",
    "end": "2630640"
  },
  {
    "text": "property names are it cares about the positional thing",
    "start": "2630640",
    "end": "2636160"
  },
  {
    "text": "so it looks at the value tuples and go the in 32 at position one on x equals in 32 at",
    "start": "2636160",
    "end": "2642880"
  },
  {
    "text": "position one on order and the same thing for the string at position two so you can name your",
    "start": "2642880",
    "end": "2648319"
  },
  {
    "text": "properties whatever you want but when you do value comparison or equality comparison sorry",
    "start": "2648319",
    "end": "2653839"
  },
  {
    "text": "uh it will just look at the positional things and check to see if the position is the right type and then if the value",
    "start": "2653839",
    "end": "2660560"
  },
  {
    "text": "is correct not what that position is named which can be a bit of a interesting",
    "start": "2660560",
    "end": "2665599"
  },
  {
    "text": "situation if you start using it a lot so that was value tuples um next thing",
    "start": "2665599",
    "end": "2672240"
  },
  {
    "start": "2669000",
    "end": "2669000"
  },
  {
    "text": "is a big one pattern matching and switch expressions so pattern matching and switch",
    "start": "2672240",
    "end": "2678560"
  },
  {
    "text": "expressions are two different things i know i'm cheating and bringing in more than 10 things but they are very closely",
    "start": "2678560",
    "end": "2684000"
  },
  {
    "text": "connected so imagine this piece of code here i don't recommend writing this piece of",
    "start": "2684000",
    "end": "2689119"
  },
  {
    "text": "code and coming up with really good examples that fit on one slide is really hard so i made it really dumb one",
    "start": "2689119",
    "end": "2695280"
  },
  {
    "text": "but imagine this thing here i have a log method that takes an object and making it",
    "start": "2695280",
    "end": "2701599"
  },
  {
    "text": "possible to log anything first thing i do is check to see if it's null and then i return because i",
    "start": "2701599",
    "end": "2707280"
  },
  {
    "text": "can't do anything with null then i check to see if it's a string if it's a string i",
    "start": "2707280",
    "end": "2712319"
  },
  {
    "text": "i cast the string to a string and then i check to see if it's empty if it's not",
    "start": "2712319",
    "end": "2717920"
  },
  {
    "text": "then i write out the string and then i have this thing here that checks to see if item is loggable i",
    "start": "2717920",
    "end": "2724079"
  },
  {
    "text": "loggable and if it implements i loggable i cast it to that interface then i check it do",
    "start": "2724079",
    "end": "2729280"
  },
  {
    "text": "a switch over the log level and depending on the log level i write out different things to the console and finally if it's",
    "start": "2729280",
    "end": "2736079"
  },
  {
    "text": "if it's not a string it is not null and it's not i loggable i write out unknown and i do a two",
    "start": "2736079",
    "end": "2742319"
  },
  {
    "text": "string on that object and write it out so that i can find it in my logs afterwards probably not the best",
    "start": "2742319",
    "end": "2747839"
  },
  {
    "text": "implementation of a logger i don't care it's demo so if you have any comments about that",
    "start": "2747839",
    "end": "2752960"
  },
  {
    "text": "keep it out of the chat c sharp 7 made this easier first of all",
    "start": "2752960",
    "end": "2758640"
  },
  {
    "text": "they made it possible to write this which i really really like if you look at the if statements and the",
    "start": "2758640",
    "end": "2764000"
  },
  {
    "text": "else if here you can do item is string and then add a variable afterwards and",
    "start": "2764000",
    "end": "2769440"
  },
  {
    "text": "the compiler will automatically check to see if it is a string it will also convert the item to a string and assign it to",
    "start": "2769440",
    "end": "2776160"
  },
  {
    "text": "that variable so we don't need to do a manual cast okay that makes it a little bit shorter",
    "start": "2776160",
    "end": "2782800"
  },
  {
    "text": "but it's still pretty pretty hefty then they introduce pattern matching",
    "start": "2782800",
    "end": "2789359"
  },
  {
    "text": "it's basically a more advanced form of a switch statement where we can start out by looking at it",
    "start": "2789359",
    "end": "2795760"
  },
  {
    "text": "are the is the the thing that we're matching is it a specific value is it null",
    "start": "2795760",
    "end": "2801040"
  },
  {
    "text": "or is it empty string in that case return if it's a string please assign it to the",
    "start": "2801040",
    "end": "2808560"
  },
  {
    "text": "variable str and then i can do a console.writeline sjr if it's an ilogable",
    "start": "2808560",
    "end": "2816800"
  },
  {
    "text": "and the loggable level that you have given me so basically take it i loggable and if",
    "start": "2816800",
    "end": "2823119"
  },
  {
    "text": "it is assign it to the loggable variable then check the logable variable to look at the log level and then figure out",
    "start": "2823119",
    "end": "2829599"
  },
  {
    "text": "based on the log level do something specific and finally if it's not log level error or warn then just",
    "start": "2829599",
    "end": "2837440"
  },
  {
    "text": "use the loggable and write out the message and default at the end hey write unknown",
    "start": "2837440",
    "end": "2843440"
  },
  {
    "text": "so that long if else if blah blah blah turns into this a lot more readable statement here",
    "start": "2843440",
    "end": "2850240"
  },
  {
    "text": "on top of that it allows us to do this yay we get to do is null instead of",
    "start": "2850240",
    "end": "2856720"
  },
  {
    "text": "equals equals null no no i don't know if it's a big deal but it looks nicer",
    "start": "2856720",
    "end": "2861920"
  },
  {
    "text": "c sharp eight took it a bit further and introduced this really cool switch statement here",
    "start": "2861920",
    "end": "2867359"
  },
  {
    "text": "so it's a pattern matching switch so i do an expression bodied member called",
    "start": "2867359",
    "end": "2873280"
  },
  {
    "text": "get error message and then i do item switch instead of switch item and then it basically it looks at the",
    "start": "2873280",
    "end": "2879280"
  },
  {
    "text": "object it does a switch again and each one of these values have to return the same type so in this case get",
    "start": "2879280",
    "end": "2884720"
  },
  {
    "text": "error message return string say if it's null return string if it's empty string return empty string if it's",
    "start": "2884720",
    "end": "2890000"
  },
  {
    "text": "string return the string if it's an i loggable of these these levels return this string here if",
    "start": "2890000",
    "end": "2896559"
  },
  {
    "text": "it's just a logable return this and if it's anything else which is the discard one we come back to discards",
    "start": "2896559",
    "end": "2902800"
  },
  {
    "text": "quite a lot here we just return unknown and item so this gives us a really short",
    "start": "2902800",
    "end": "2908319"
  },
  {
    "text": "nice syntax when we know that the return type we can just do this nice switch and the",
    "start": "2908319",
    "end": "2913760"
  },
  {
    "text": "pattern match in here and get short very concise code of what we're doing",
    "start": "2913760",
    "end": "2919839"
  },
  {
    "text": "and if you look at this where we actually know what the type is",
    "start": "2919839",
    "end": "2925119"
  },
  {
    "text": "so we know it's an ilogable we can actually go ahead and say this syntax here which",
    "start": "2925119",
    "end": "2932160"
  },
  {
    "text": "curly brace and then the property that we want to check and to see if it's a specific level and",
    "start": "2932160",
    "end": "2937680"
  },
  {
    "text": "then do it based on that so that makes we we could have done if i",
    "start": "2937680",
    "end": "2943119"
  },
  {
    "text": "pattern matched it to loggable and then when and all of it but this is just a shorter nicer way of going",
    "start": "2943119",
    "end": "2948319"
  },
  {
    "text": "if this property is this do that uh also don't forget this there's",
    "start": "2948319",
    "end": "2954880"
  },
  {
    "text": "nothing that stops you from passing in two properties to",
    "start": "2954880",
    "end": "2960160"
  },
  {
    "text": "this error message here you still only get to switch it on one so you can only",
    "start": "2960160",
    "end": "2966000"
  },
  {
    "text": "switch on this item here but you can still use both area and item in this case so it's fine to take in more than one",
    "start": "2966000",
    "end": "2972720"
  },
  {
    "text": "parameter but you can only switch on one thing however if you want to switch on",
    "start": "2972720",
    "end": "2978960"
  },
  {
    "text": "multiple things you can actually take multiple parameters in and then you turn them into tuple",
    "start": "2978960",
    "end": "2985599"
  },
  {
    "text": "and then you switch on the tuple so basically this thing here matches both of my values",
    "start": "2985599",
    "end": "2990720"
  },
  {
    "text": "which allows me to make a really really concise rock paper scissors um i don't know if that's useful but",
    "start": "2990720",
    "end": "2996559"
  },
  {
    "text": "being able to pattern match on a tuple is actually quite nice because it allows us to power match on two different objects",
    "start": "2996559",
    "end": "3003760"
  },
  {
    "text": "um and also discard this card is everything else",
    "start": "3003760",
    "end": "3010078"
  },
  {
    "text": "c-sharp 9 takes it a bit further c sharp 9 introduces this there's a lot of coding here um so if we",
    "start": "3010240",
    "end": "3016960"
  },
  {
    "text": "look at the important part it's a it's basically just this valid file name this first part here takes the file name",
    "start": "3016960",
    "end": "3022720"
  },
  {
    "text": "goes all uses link to go through every single one of the characters and then it uses x is and then it allows",
    "start": "3022720",
    "end": "3029280"
  },
  {
    "text": "us to do greater than or equal to a and less than and equal to z",
    "start": "3029280",
    "end": "3034480"
  },
  {
    "text": "parenthesis or so we can combine ands and ors to to make this this would have turned",
    "start": "3034480",
    "end": "3040240"
  },
  {
    "text": "into a pretty hairy if statement to be perfectly honest turns into a pretty concise one-liner",
    "start": "3040240",
    "end": "3045839"
  },
  {
    "text": "that says hey if it's lowercase a to z or uppercase a to said or dash or dot then this is fine",
    "start": "3045839",
    "end": "3055680"
  },
  {
    "text": "yes i could have done a static con or a constant string with those values in it and gone that it contains it but it's like this",
    "start": "3055680",
    "end": "3063760"
  },
  {
    "text": "now and for the extension once again i can pull out the length and then i can say if the length is less",
    "start": "3063760",
    "end": "3071280"
  },
  {
    "text": "than or equal greater than or equal to or less than or equal to which means i don't have to do two ifs like",
    "start": "3071280",
    "end": "3076480"
  },
  {
    "text": "if length is that and length is that i can do both both ends of the if in one",
    "start": "3076480",
    "end": "3082800"
  },
  {
    "text": "statement and you can do x is not null which is so",
    "start": "3082800",
    "end": "3088319"
  },
  {
    "text": "much more readable than x exclamation mark equals null i don't know why i'm happy about that but",
    "start": "3088319",
    "end": "3093920"
  },
  {
    "text": "i am and the last one the number one thing",
    "start": "3093920",
    "end": "3099359"
  },
  {
    "start": "3096000",
    "end": "3096000"
  },
  {
    "text": "that i've got once again um not in any particular order but it's",
    "start": "3099359",
    "end": "3105200"
  },
  {
    "text": "record types and i got a question about record types um before",
    "start": "3105200",
    "end": "3110800"
  },
  {
    "text": "and yes it's here um and and it's easy to come up with it's like wait wait record types is there going to be",
    "start": "3110800",
    "end": "3116640"
  },
  {
    "text": "another type because we've already got value types and reference types are we getting another type of objects and",
    "start": "3116640",
    "end": "3122559"
  },
  {
    "text": "no no we're not we are not getting another type of records or type of objects it is still the same",
    "start": "3122559",
    "end": "3128800"
  },
  {
    "text": "thing records are immutable reference types",
    "start": "3128800",
    "end": "3133920"
  },
  {
    "text": "with the default implementations uh of minimal co default implementations",
    "start": "3133920",
    "end": "3140079"
  },
  {
    "text": "generated with minimal code so basically we get default implementation of some some things in our code for free",
    "start": "3140079",
    "end": "3146720"
  },
  {
    "text": "and we have to write minimal amount of code to get it done so imagine this piece of code here it's",
    "start": "3146720",
    "end": "3153520"
  },
  {
    "text": "an immutable order class not a big deal but it's it's if we look",
    "start": "3153520",
    "end": "3158559"
  },
  {
    "text": "at this code we go that's boilerplate and that's boilerplate and that's boilerplates and that's boilerplate",
    "start": "3158559",
    "end": "3163599"
  },
  {
    "text": "so a lot of this is just stuff because i need to have an immutable",
    "start": "3163599",
    "end": "3169119"
  },
  {
    "text": "object or data structure that can keep this value here and if you take that boilerplate and",
    "start": "3169119",
    "end": "3175119"
  },
  {
    "text": "then we're going to say hey i want to have equality checking as well so can you please go ahead and add",
    "start": "3175119",
    "end": "3180640"
  },
  {
    "start": "3176000",
    "end": "3176000"
  },
  {
    "text": "equals get hash code equals equal override equals equals not equals tostring that's a lot",
    "start": "3180640",
    "end": "3187680"
  },
  {
    "text": "of code you look at that and you go that is a lot of code i don't want to write that but we keep",
    "start": "3187680",
    "end": "3192720"
  },
  {
    "text": "on writing that if we want to have immutable objects so in c-sharp nine all of that code all",
    "start": "3192720",
    "end": "3199040"
  },
  {
    "text": "of that constructor property assignment uh two-string pro operator overloads and",
    "start": "3199040",
    "end": "3204960"
  },
  {
    "text": "everything is turned into that it's everything public record order",
    "start": "3204960",
    "end": "3211119"
  },
  {
    "text": "property names types and it generates it for us this gets turned into an immutable class",
    "start": "3211119",
    "end": "3218160"
  },
  {
    "text": "it's there's nothing nothing magical in here it gets turned into an immutable c-sharp class",
    "start": "3218160",
    "end": "3223200"
  },
  {
    "text": "with properties called id article name and total they are read only and it overrides the",
    "start": "3223200",
    "end": "3229760"
  },
  {
    "text": "tostring method and it overwrites equality checking with git hash code equals and so on",
    "start": "3229760",
    "end": "3235040"
  },
  {
    "text": "so when we go and say new order we can go and we can check out whether or not they're equal and as long",
    "start": "3235040",
    "end": "3242160"
  },
  {
    "text": "as the all the values are the same they return equal but even though they're not reference",
    "start": "3242160",
    "end": "3248319"
  },
  {
    "text": "equals so they're two different references but they are equal because equality has been overridden",
    "start": "3248319",
    "end": "3254160"
  },
  {
    "text": "and if you do console write line it does a two string and it outputs a default implementation of the two",
    "start": "3254160",
    "end": "3261119"
  },
  {
    "text": "string not the best two-string implementation but it's a two-string operation and all the other stuff would get hash",
    "start": "3261119",
    "end": "3267680"
  },
  {
    "text": "code and everything is taken care of that is just really awesome um",
    "start": "3267680",
    "end": "3274319"
  },
  {
    "text": "they also introduced this cool little thing here so we've got this with syntax with allows us to take",
    "start": "3274319",
    "end": "3281920"
  },
  {
    "text": "an immutable thing and turn it into something else so basically order order",
    "start": "3281920",
    "end": "3288400"
  },
  {
    "text": "one here and then i take the immutable or the one i want to have a copy of that but please replace the article name with test2",
    "start": "3288400",
    "end": "3295920"
  },
  {
    "text": "i get a new immutable instance with the article name changed to test two and in the case of order three i'm just",
    "start": "3295920",
    "end": "3302720"
  },
  {
    "text": "doing a perfect copy of the existing thing but with allows us to basically take an immutable",
    "start": "3302720",
    "end": "3308640"
  },
  {
    "text": "thing generate a new immutable thing with something changed it allows us to do um",
    "start": "3308640",
    "end": "3315760"
  },
  {
    "text": "inheritance so we get to do our our own constructor and we it still",
    "start": "3315760",
    "end": "3322400"
  },
  {
    "text": "works it figures out all the properties for us we can even add methods to it that's fine so we can do all of the things we",
    "start": "3322400",
    "end": "3328799"
  },
  {
    "text": "do with the class normally but but we get all of it in a much smaller package there's not",
    "start": "3328799",
    "end": "3334720"
  },
  {
    "text": "not too much in there so record types are really really cool",
    "start": "3334720",
    "end": "3340000"
  },
  {
    "text": "um so that was about it um that was all the the ten features",
    "start": "3340000",
    "end": "3347760"
  },
  {
    "text": "however once again they are my favorite features there are there are other c-sharp",
    "start": "3347760",
    "end": "3353520"
  },
  {
    "start": "3351000",
    "end": "3351000"
  },
  {
    "text": "features there's a whole heap of them i've got a list of all of them some of them are really cool some didn't make it some made it um",
    "start": "3353520",
    "end": "3360240"
  },
  {
    "text": "these are mine uh but it brings an interesting question when i had this",
    "start": "3360240",
    "end": "3365440"
  },
  {
    "text": "talking it's funnily enough i'm i'm an asp.net sorry dot net mvp",
    "start": "3365440",
    "end": "3371440"
  },
  {
    "text": "and on the mvp email area somebody came in and basically asked this question is c",
    "start": "3371440",
    "end": "3377200"
  },
  {
    "start": "3376000",
    "end": "3376000"
  },
  {
    "text": "sharp getting too complicated lots of really interesting comments",
    "start": "3377200",
    "end": "3382400"
  },
  {
    "text": "about it lots of discussion um and i i had the same question before this talk",
    "start": "3382400",
    "end": "3388160"
  },
  {
    "text": "and actually i still kind of have the questions but i think a lot of the answers on that email thread was interesting and i think the",
    "start": "3388160",
    "end": "3394160"
  },
  {
    "text": "conclusion is c sharp is not really getting too complicated because we're not removing any features right",
    "start": "3394160",
    "end": "3400160"
  },
  {
    "text": "we're only adding new syntactical little things mostly to it and if you're new to the",
    "start": "3400160",
    "end": "3406720"
  },
  {
    "text": "language you you probably go and you just know learn the new stuff because you might not need the old versions of it",
    "start": "3406720",
    "end": "3413119"
  },
  {
    "text": "and if you use the old versions the old versions still work right there's nothing that forces you to use the",
    "start": "3413119",
    "end": "3418319"
  },
  {
    "text": "newest features so is c sharp getting too complicated yes there's a lot of stuff in there that",
    "start": "3418319",
    "end": "3425200"
  },
  {
    "text": "that c-sharp offers us that allows us to build cool things and and write really precise",
    "start": "3425200",
    "end": "3432160"
  },
  {
    "text": "code but there's also the ability of right writing everything like we did before so",
    "start": "3432160",
    "end": "3438240"
  },
  {
    "text": "i'm not sure it there's a lot of features in there i know that the c sharp team is spending a lot of time figuring out what",
    "start": "3438240",
    "end": "3443839"
  },
  {
    "text": "features should be in there not um i think a lot of the stuff as i said these are my top 10 favorite ones",
    "start": "3443839",
    "end": "3450079"
  },
  {
    "text": "there's still there's still some stuff that i find might be not too useful but there are",
    "start": "3450079",
    "end": "3456559"
  },
  {
    "text": "scenarios where it is really useful so is it getting too complicated don't think so",
    "start": "3456559",
    "end": "3461680"
  },
  {
    "text": "and with that comment it's not getting too complicated i want to thank you all for listening um i'm gonna go and say",
    "start": "3461680",
    "end": "3469760"
  },
  {
    "text": "i'm gonna look through the chat and see if there are any questions if you if you don't want to hear the answers to the questions uh you're more",
    "start": "3469760",
    "end": "3475760"
  },
  {
    "text": "than welcome to go i just want to thank you all for listening i hope you got something out of it if you have any questions as i said the",
    "start": "3475760",
    "end": "3481280"
  },
  {
    "text": "chat is fine you can also find me on twitter if you want to ask me questions that's the easiest place to find me",
    "start": "3481280",
    "end": "3486480"
  },
  {
    "text": "um more than happy to to answer any questions that you have and if i scroll back down through the uh",
    "start": "3486480",
    "end": "3492400"
  },
  {
    "text": "the chat here there's not a whole lot there's nothing on slack which is nice because that's really hard to read on my ipad",
    "start": "3492400",
    "end": "3498240"
  },
  {
    "text": "um dot question mark dot can be useful it's also very useful",
    "start": "3498240",
    "end": "3503599"
  },
  {
    "text": "easy to abuse it uh yeah so yes with the the question mark",
    "start": "3503599",
    "end": "3510240"
  },
  {
    "text": "dot with the the null operation uh non-conditional stuff um it is easy to just add in there for",
    "start": "3510240",
    "end": "3516880"
  },
  {
    "text": "the heck of it um i think a lot of that kind of disappears one once we start doing nullable reference",
    "start": "3516880",
    "end": "3522480"
  },
  {
    "text": "types so hopefully um we'll get a nice sort of mix of useful and not so useful um",
    "start": "3522480",
    "end": "3532480"
  },
  {
    "text": "and then oh yeah so there's a comment about the the nullable stuff conditional nullables",
    "start": "3532559",
    "end": "3539520"
  },
  {
    "text": "uh defaulting to string and why ask why are you defaulting to",
    "start": "3539520",
    "end": "3546319"
  },
  {
    "text": "strings question mark someone has no answer just using feature um",
    "start": "3546319",
    "end": "3552160"
  },
  {
    "text": "yeah don't look too much at my code um it's really really really really",
    "start": "3552160",
    "end": "3557680"
  },
  {
    "text": "really really hard to write good examples that fit on one slide in large fonts and still are good enough",
    "start": "3557680",
    "end": "3564799"
  },
  {
    "text": "for you to to absorb it and and or rather show the feature that i want to show so don't",
    "start": "3564799",
    "end": "3569920"
  },
  {
    "text": "look too much at why i'm doing stuff um",
    "start": "3569920",
    "end": "3574400"
  },
  {
    "text": "um in a method in a method where the first",
    "start": "3576000",
    "end": "3583680"
  },
  {
    "text": "line or line source argument log symptom if order is null not sure what that was about x is null",
    "start": "3583680",
    "end": "3590960"
  },
  {
    "text": "is a big deal because it means that even if the class has an overridden equality",
    "start": "3590960",
    "end": "3596480"
  },
  {
    "text": "compare it ignores and that and just checks if null equals equals null",
    "start": "3596480",
    "end": "3601680"
  },
  {
    "text": "um now okay that that's a good comment i",
    "start": "3601680",
    "end": "3607760"
  },
  {
    "text": "actually have actually thought about that so x's null is a big deal because if somebody overrides",
    "start": "3607760",
    "end": "3613839"
  },
  {
    "text": "equals equals uh and does some funky stuff with null then is null",
    "start": "3613839",
    "end": "3620720"
  },
  {
    "text": "will actually not go and look at the equal equals operator uh it will just basically say it's null",
    "start": "3620720",
    "end": "3626000"
  },
  {
    "text": "i'm not gonna go any further difference to that is that when you do object equals equals null",
    "start": "3626000",
    "end": "3631599"
  },
  {
    "text": "then it goes and looks at the operator and if the operator does some funky stuff with null then it might not return what you",
    "start": "3631599",
    "end": "3637839"
  },
  {
    "text": "believe it returns having that said that person on my team that overrides equals equals and does",
    "start": "3637839",
    "end": "3644720"
  },
  {
    "text": "funky stuff with null will not be in my team for very long i'm sorry to say",
    "start": "3644720",
    "end": "3650960"
  },
  {
    "text": "and if you are in my team now i'm sorry for saying that but that's just the way it is i don't think any in my team is actually",
    "start": "3650960",
    "end": "3656720"
  },
  {
    "text": "in the chat which is good uh record types best used in",
    "start": "3656720",
    "end": "3662000"
  },
  {
    "text": "yeah so use cases for for record types is interesting um",
    "start": "3662000",
    "end": "3667040"
  },
  {
    "text": "i think they're going to be a big deal when it comes to dtos so api responses for example response and",
    "start": "3667040",
    "end": "3672640"
  },
  {
    "text": "request responses from your api which needs to be basically just simple classes having",
    "start": "3672640",
    "end": "3678000"
  },
  {
    "text": "that very thirst syntax of getting something generated for you by just adding a one-liner i think that's going",
    "start": "3678000",
    "end": "3684319"
  },
  {
    "text": "to be awesome for for example ttos um also if you if you need anything that needs to be immutable if",
    "start": "3684319",
    "end": "3691040"
  },
  {
    "text": "you're doing a lot of immutable coding then i think record types is going to be a very big deal because",
    "start": "3691040",
    "end": "3697359"
  },
  {
    "text": "it's it it helps out with that paradigm of doing immutable code without having",
    "start": "3697359",
    "end": "3703599"
  },
  {
    "text": "to spend a gazillion hours writing classes with just",
    "start": "3703599",
    "end": "3708799"
  },
  {
    "text": "we just get mad properties um you have to be able to read other",
    "start": "3708799",
    "end": "3716160"
  },
  {
    "text": "people's code as a comment here i guess that comment is about um all the new c-sharp features i agree",
    "start": "3716160",
    "end": "3723200"
  },
  {
    "text": "um with new teacher features uh you can get away with with using new things or old things",
    "start": "3723200",
    "end": "3730880"
  },
  {
    "text": "when you're the person developing it when it comes to reading somebody else's code yeah yeah in that case it becomes a matter of",
    "start": "3730880",
    "end": "3737599"
  },
  {
    "text": "does the person understand if i use the latest and greatest syntax will they understand that if i use older",
    "start": "3737599",
    "end": "3742799"
  },
  {
    "text": "versions of stuff will a new developer understand that i i get that point and that's a very valid",
    "start": "3742799",
    "end": "3748640"
  },
  {
    "text": "point and honestly i do run into syntax stuff in c sharp once in a while with my",
    "start": "3748640",
    "end": "3753760"
  },
  {
    "text": "colleagues that i actually have to look up and i learned a lot from it and i think that is hopefully what's going to end up if",
    "start": "3753760",
    "end": "3759200"
  },
  {
    "text": "you read code that you don't understand you're going to ask the person who wrote it and go wherever what's happening here",
    "start": "3759200",
    "end": "3765359"
  },
  {
    "text": "i don't quite get it and they will say well it works like this and then you've learned something new and then you'll start using it yourself",
    "start": "3765359",
    "end": "3771599"
  },
  {
    "text": "one of the things being like the the discard throw statement where i can do very short syntax for it",
    "start": "3771599",
    "end": "3778079"
  },
  {
    "text": "for um checking things and throwing exception if something's wrong is one of those things i've learned along the way that",
    "start": "3778079",
    "end": "3783520"
  },
  {
    "text": "somebody showed me and i'm like oh my god that changes my life for the future which is cool",
    "start": "3783520",
    "end": "3789200"
  },
  {
    "text": "um then there was some comments about",
    "start": "3789200",
    "end": "3796079"
  },
  {
    "text": "properties may not want to include in the quality if you do want to change the equality comparison on",
    "start": "3796079",
    "end": "3802640"
  },
  {
    "text": "um in your um in your record you can go and overwrite",
    "start": "3802640",
    "end": "3809039"
  },
  {
    "text": "everything it's just a c-herp class so if you want to change the equality that's fine as well um if i can upload the slide deck to",
    "start": "3809039",
    "end": "3816880"
  },
  {
    "text": "github yes i can probably do that i don't know if jacob are you around",
    "start": "3816880",
    "end": "3824000"
  },
  {
    "text": "i don't know if if if there's not a does so jacob seem to be around do we do do you send out the slide decks or",
    "start": "3824000",
    "end": "3831119"
  },
  {
    "text": "store this live decks for nbc somewhere or should i put it on my github just put you can share them in slack",
    "start": "3831119",
    "end": "3837760"
  },
  {
    "text": "okay that's a good idea i'll put it in slack so you can get the the slide deck if you want to have it um",
    "start": "3837760",
    "end": "3842880"
  },
  {
    "text": "thank you jacob um a sample class where you do all the",
    "start": "3842880",
    "end": "3849039"
  },
  {
    "text": "features in one comparison yeah i'm not going to do a sample see well actually i might do one in the future to put all the features in",
    "start": "3849039",
    "end": "3855119"
  },
  {
    "text": "one place but yeah um by adding new line into a client",
    "start": "3855119",
    "end": "3860799"
  },
  {
    "text": "in frix for example.net 2.0 and add that to a net framework which has not updated a",
    "start": "3860799",
    "end": "3865920"
  },
  {
    "text": "line what will will that occur some um so the question is if i change the",
    "start": "3865920",
    "end": "3871280"
  },
  {
    "text": "language version for a.net standard thing and you start using that in a version that doesn't have that",
    "start": "3871280",
    "end": "3876720"
  },
  {
    "text": "that language feature will that be a problem no because anything that you put into another",
    "start": "3876720",
    "end": "3882400"
  },
  {
    "text": "language version that requires something from your framework will not work in net 2.0 unless it's",
    "start": "3882400",
    "end": "3888240"
  },
  {
    "text": "covered by the framework that is going to be used in so if you do something in standard 2.0",
    "start": "3888240",
    "end": "3893280"
  },
  {
    "text": "the c-sharp language will only allow you to do features that is supported by all the frameworks that support 2.0 i",
    "start": "3893280",
    "end": "3900720"
  },
  {
    "text": "think so you won't be able to use for example records because it won't be there so",
    "start": "3900720",
    "end": "3905839"
  },
  {
    "text": "i think it's pretty safe for you to update the the language version there might be edge cases and somebody on the c-sharp team",
    "start": "3905839",
    "end": "3912559"
  },
  {
    "text": "might come out and say chris you're wrong but i do believe that you're quite safe because the dot-net standard version should keep you",
    "start": "3912559",
    "end": "3919119"
  },
  {
    "text": "in line what you're allowed to do because most of this is just compiler tricks and syntactical sugar",
    "start": "3919119",
    "end": "3926400"
  },
  {
    "text": "um that was all the questions i could see in the chat once again i hope you enjoyed the talk and you got something",
    "start": "3926720",
    "end": "3932720"
  },
  {
    "text": "out of it um if not sorry if you have any more questions",
    "start": "3932720",
    "end": "3939039"
  },
  {
    "text": "twitter is fine i'll see if i can get the slides uploaded to uh to slack so you can get it",
    "start": "3939039",
    "end": "3944079"
  },
  {
    "text": "um and other than that thank you so much for listening",
    "start": "3944079",
    "end": "3951838"
  },
  {
    "text": "you",
    "start": "3956319",
    "end": "3958400"
  }
]