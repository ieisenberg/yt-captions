[
  {
    "text": "hi whoa maybe there's a little",
    "start": "30",
    "end": "5339"
  },
  {
    "text": "enthusiastic there hi hi it's it's better this is better how are ya",
    "start": "5339",
    "end": "11450"
  },
  {
    "text": "wow that was actually pretty awesome for like one session removed before the end",
    "start": "11450",
    "end": "17279"
  },
  {
    "text": "of the conference you know we're in the homestretch we get a little tired but that's good that's good see lots of",
    "start": "17279",
    "end": "24090"
  },
  {
    "text": "bright eyes out there this is awesome well you've come to a great talk at least I think so my name is Spencer",
    "start": "24090",
    "end": "29279"
  },
  {
    "text": "Shannon Bach and I'm here to talk to you today about expression trees in c-sharp now C sharps just the language example",
    "start": "29279",
    "end": "35820"
  },
  {
    "text": "but you could do this just about it you can do this in vb.net as well most of this stuff applies I mean vb.net people",
    "start": "35820",
    "end": "41460"
  },
  {
    "text": "out there that want to admit it yeah yeah there's a few of your this time still em once occasionally so first",
    "start": "41460",
    "end": "47820"
  },
  {
    "text": "things first got to get this out of the way you can find me on Twitter at Schneider box just my last name so get",
    "start": "47820",
    "end": "53399"
  },
  {
    "text": "that peace babe you don't have to write it down right you can get the slides plus more at Schneids net i will also be",
    "start": "53399",
    "end": "58649"
  },
  {
    "text": "tweeting out a link to the slides and the link to a few other resources and a few other things along the way so I'm",
    "start": "58649",
    "end": "65189"
  },
  {
    "text": "gonna be using Twitter throughout the presentation to tweet out some example things that I think are useful some",
    "start": "65189",
    "end": "70979"
  },
  {
    "text": "little demos that you could use and follow along with as I'm giving them alright so without further ado let's",
    "start": "70979",
    "end": "77790"
  },
  {
    "text": "start by talking about expression trees now how many people how many people in this room have used something like this",
    "start": "77790",
    "end": "84900"
  },
  {
    "text": "a link expression either the query syntax or the lambda syntax to query a database how many people query a",
    "start": "84900",
    "end": "91740"
  },
  {
    "text": "database entity framework linked to sequel all right all that good stuff all right all right very good how many people have",
    "start": "91740",
    "end": "98640"
  },
  {
    "text": "been asked to render a field like this using asp.net they're using asp.net MVC and they're like II D at HTML editor for",
    "start": "98640",
    "end": "106259"
  },
  {
    "text": "and then it just produces a bunch of magic stuff and like validator for and all that all right very good how many of",
    "start": "106259",
    "end": "113220"
  },
  {
    "text": "you have been asked to ever use some kind of code where you had to select one or more members of class a property of",
    "start": "113220",
    "end": "119790"
  },
  {
    "text": "some kind kind of like this right all right well if you have done anything",
    "start": "119790",
    "end": "125329"
  },
  {
    "text": "like write a lambda expression that you've used expression trees even if you",
    "start": "125329",
    "end": "130470"
  },
  {
    "text": "had no idea and so we're gonna talk about that we're gonna talk about some examples in the real world in libraries that you use every",
    "start": "130470",
    "end": "136740"
  },
  {
    "text": "day where you may not even be aware of them and as and a real-world example that I've used as long as as well as a",
    "start": "136740",
    "end": "142560"
  },
  {
    "text": "few that you can use that kind of chew on to see how expression trees could help you in your development life so",
    "start": "142560",
    "end": "148680"
  },
  {
    "text": "let's start by talking about what expression trees are and before we can",
    "start": "148680",
    "end": "154200"
  },
  {
    "text": "talk about expression trees I think it's valuable I think it's useful to talk about what a lambda expressions so this",
    "start": "154200",
    "end": "160170"
  },
  {
    "text": "is a lambda expression this is one that's declare it inline inside of a variable so we have func of string",
    "start": "160170",
    "end": "166080"
  },
  {
    "text": "string which just says defines a function signature that has a it's a function that takes in a string and",
    "start": "166080",
    "end": "171959"
  },
  {
    "text": "returns a string and our two upper function it all it's going to do is take in that string and call its two upper",
    "start": "171959",
    "end": "178800"
  },
  {
    "text": "function on that and so what happens when I call that function right in line because you can do that if you've never",
    "start": "178800",
    "end": "184709"
  },
  {
    "text": "done this before it's cool you can do that so what would I reasonably expect to get as a result of this function",
    "start": "184709",
    "end": "190880"
  },
  {
    "text": "I'd probably expect to get my name capitalized spencer's go from lowercase to uppercase all right",
    "start": "190880",
    "end": "197580"
  },
  {
    "text": "pretty straightforward let's declare the exact same thing exactly the same way",
    "start": "197580",
    "end": "202830"
  },
  {
    "text": "except we're going to add an expression so this is a expression of func of",
    "start": "202830",
    "end": "207900"
  },
  {
    "text": "string string and we're gonna do that it looks the same so that top line works so",
    "start": "207900",
    "end": "213030"
  },
  {
    "text": "we're gonna try on the bottom line what do you think I'm gonna get I'm gonna get a compile time error well what the heck",
    "start": "213030",
    "end": "221250"
  },
  {
    "text": "is up with that I mean they're they look almost exactly the same they look it looks like lambda function both of those",
    "start": "221250",
    "end": "226380"
  },
  {
    "text": "things reply those both of those things are compiled above code so what's going on so the key difference between a",
    "start": "226380",
    "end": "233340"
  },
  {
    "text": "lambda and an expression is that a lambda does the thing an expression tree",
    "start": "233340",
    "end": "239459"
  },
  {
    "text": "an expression a lambda expression specifically describes the lambda that does the thing so this is really",
    "start": "239459",
    "end": "247709"
  },
  {
    "text": "important though because this is this makes this is actually a really important feature of expressions as they",
    "start": "247709",
    "end": "253560"
  },
  {
    "text": "relate to c-sharp and vb.net these things it's really cool they have they share a property called homo iconicity",
    "start": "253560",
    "end": "261299"
  },
  {
    "text": "and i think i'm saying that right i don't know i've never looked it up when home like Anisa t basically says that",
    "start": "261299",
    "end": "266490"
  },
  {
    "text": "the syntax that you can use to write a function you can use that exact same syntax to declare expressions that",
    "start": "266490",
    "end": "273600"
  },
  {
    "text": "describe that function so it's a really powerful concept because it looks natural it looks and feels natural when",
    "start": "273600",
    "end": "279720"
  },
  {
    "text": "we write entity framework queries or we're selecting members using HTML editor for anything like that it feels",
    "start": "279720",
    "end": "286590"
  },
  {
    "text": "like a natural part of the language because it is it feels like you're just naturally just writing a lambda function even if they are doing some cool magic",
    "start": "286590",
    "end": "294360"
  },
  {
    "text": "we're gonna talk about what that magic is we're gonna talk about what we can do with expressions so we can read them",
    "start": "294360",
    "end": "299759"
  },
  {
    "text": "create them and use them so let's take our two upper example here we're gonna",
    "start": "299759",
    "end": "305099"
  },
  {
    "text": "go ahead and decompose this thing we're gonna break him down into his component parts so as you know a lambda is made up",
    "start": "305099",
    "end": "311669"
  },
  {
    "text": "of a set of parameters zero or more and a body which tells you what the thing",
    "start": "311669",
    "end": "317099"
  },
  {
    "text": "does right so in this case our string takes this our string function takes in",
    "start": "317099",
    "end": "322320"
  },
  {
    "text": "a string returns a string okay and a parameter and an expression can be",
    "start": "322320",
    "end": "327330"
  },
  {
    "text": "broken down and read by its component pieces for example I can take the the representation of this thing during",
    "start": "327330",
    "end": "334470"
  },
  {
    "text": "runtime and I can say and I can start interrogating that expression and say what are you what what is it that you do",
    "start": "334470",
    "end": "340080"
  },
  {
    "text": "and we're gonna get some code representations of that expression so on the left side we've got our parameters",
    "start": "340080",
    "end": "346740"
  },
  {
    "text": "so what we're gonna get is what's called a parameter expression and a parameter expression simply defines a parameter to",
    "start": "346740",
    "end": "352979"
  },
  {
    "text": "an expression right and then on the other side on the right side week we can",
    "start": "352979",
    "end": "358020"
  },
  {
    "text": "break this down into two different things so we have a method call expression which calls string two uppers",
    "start": "358020",
    "end": "363060"
  },
  {
    "text": "basically representing that call to string two upper and then we have the parameter expression that says this is",
    "start": "363060",
    "end": "368310"
  },
  {
    "text": "the target this was the thing that I called two upper on so you can break this down you can inspect that",
    "start": "368310",
    "end": "374130"
  },
  {
    "text": "expression at runtime and ask it things about what it does which is really cool and we'll show you why in a bit",
    "start": "374130",
    "end": "380130"
  },
  {
    "text": "you can also create them so this is an example of creating that just the same",
    "start": "380130",
    "end": "385409"
  },
  {
    "text": "as we did before and we do this a lot when we use entity framework or we use auto map or libraries like that so this",
    "start": "385409",
    "end": "391349"
  },
  {
    "text": "is good this is useful but it's mostly for useful for libraries that consume the expressions well what if I told you",
    "start": "391349",
    "end": "399120"
  },
  {
    "text": "you could create them at runtime and you can using what's called the expression API which is really neat you",
    "start": "399120",
    "end": "405090"
  },
  {
    "text": "can use the expression API to build expressions at runtime very easily and let me show you",
    "start": "405090",
    "end": "411020"
  },
  {
    "text": "so again functions having parameters in a body here's an example of one that",
    "start": "411020",
    "end": "416130"
  },
  {
    "text": "also takes in a stretchy it takes in an object that has a last name property hello comma with the last name so again",
    "start": "416130",
    "end": "424020"
  },
  {
    "text": "talking about that parameter expression this is how you declare instead of you know if we declared something like this",
    "start": "424020",
    "end": "429930"
  },
  {
    "text": "inline where that X we get a we get a expression that is a parameter that is an expression it contains parameters and",
    "start": "429930",
    "end": "435449"
  },
  {
    "text": "contains a body but we can also call we can also build them at runtime using the expression API and we do that by using",
    "start": "435449",
    "end": "441810"
  },
  {
    "text": "these static methods on the expression class so we call expression dot parameter and what we do is we have one",
    "start": "441810",
    "end": "447780"
  },
  {
    "text": "of two signatures we have a signature so one thing about a parameter it always has a type right it could be object it",
    "start": "447780",
    "end": "454320"
  },
  {
    "text": "could be string but it always has a type so we can declare a parameter inline that has a type of string right and then",
    "start": "454320",
    "end": "461759"
  },
  {
    "text": "we could also give it a name right so if we didn't do anything that top line its parameter name would be automatically as",
    "start": "461759",
    "end": "468449"
  },
  {
    "text": "we attached it to an expression it would just be R 1 or R 0 or whatever it would be the bottom one allows you to also name",
    "start": "468449",
    "end": "475080"
  },
  {
    "text": "that expression because a parameter can also have a name right constant",
    "start": "475080",
    "end": "480810"
  },
  {
    "text": "expression is another expression there's another example of an expression that represents a constant some kind of",
    "start": "480810",
    "end": "485880"
  },
  {
    "text": "string or a number something then inline in code that can be read and it is basically just a wrapper and says this",
    "start": "485880",
    "end": "491729"
  },
  {
    "text": "expression just points to something that already exists inside of code outside of the expression world and a method call",
    "start": "491729",
    "end": "498810"
  },
  {
    "text": "expression is a call to a method right so this is how you would declare one",
    "start": "498810",
    "end": "504210"
  },
  {
    "text": "that now one thing about the expression API is that it is very there's a lot to it right there's a lot to there's lots",
    "start": "504210",
    "end": "510690"
  },
  {
    "text": "of different kinds of calls right there's calls to static methods there's calls to instance methods so there's",
    "start": "510690",
    "end": "516419"
  },
  {
    "text": "lots of different ways to construct a parameter for or construct a expression for declaring a function but here's a",
    "start": "516419",
    "end": "523830"
  },
  {
    "text": "simple example so we're just going to use just a little bit of reflection we're going to declare a parameter that",
    "start": "523830",
    "end": "528990"
  },
  {
    "text": "is a that is of type string and then we are going to get a reference to the two up",
    "start": "528990",
    "end": "534089"
  },
  {
    "text": "method inside of the string class so we've broken down into one of two things if you never used get method method we",
    "start": "534089",
    "end": "540660"
  },
  {
    "text": "get the name of the method and then we get the things the the empty the this is an array this type dot empty x is an",
    "start": "540660",
    "end": "546720"
  },
  {
    "text": "empty array of types it just basically says what is the signature of this function that's the one we want to find and then we can use the expression call",
    "start": "546720",
    "end": "553850"
  },
  {
    "text": "to actually declare our method calling in line so we're gonna build this thing",
    "start": "553850",
    "end": "560309"
  },
  {
    "text": "we're gonna build this guy right here we're gonna do our string string to upper and we're gonna do it using the expression API let me show you so string",
    "start": "560309",
    "end": "569129"
  },
  {
    "text": "to upper starts with our expression parameter so we've got type of string but we also want to give it a name we've",
    "start": "569129",
    "end": "574290"
  },
  {
    "text": "called them STR so we're just gonna give we're gonna call him STR and we're gonna declare that expression dot parameter we're gonna go ahead and call them STRs",
    "start": "574290",
    "end": "580860"
  },
  {
    "text": "we're gonna use the second argument of that expression parameter function and then of course we want the reference to",
    "start": "580860",
    "end": "586709"
  },
  {
    "text": "two uppers so we're gonna do exactly what we did before get a reference to two upper the two upper method call and",
    "start": "586709",
    "end": "592579"
  },
  {
    "text": "then we're going to construct the body of our expressions we got the parameter we've got the thing that's going to be",
    "start": "592579",
    "end": "597720"
  },
  {
    "text": "inside the body now we're gonna actually call our parameter R Express that or",
    "start": "597720",
    "end": "603269"
  },
  {
    "text": "construct the thing that calls that so we're gonna call expression comm we're gonna pass in firstly the parameter",
    "start": "603269",
    "end": "608790"
  },
  {
    "text": "because we're calling it the two upper method on our parameter right we're calling string str2 upper so that's the",
    "start": "608790",
    "end": "614699"
  },
  {
    "text": "target so that's what we're gonna do and we're going to give a reference to our to upper method and then we're gonna do",
    "start": "614699",
    "end": "619769"
  },
  {
    "text": "this this is expression dot lambda expression dot lambda what it will do is will actually convert this into a",
    "start": "619769",
    "end": "625800"
  },
  {
    "text": "function that can be called inline so here's how you would actually invoke it",
    "start": "625800",
    "end": "632429"
  },
  {
    "text": "so we've got our expression dot lambda here we give it a body and we give it a parameter if there's zero or more right",
    "start": "632429",
    "end": "638370"
  },
  {
    "text": "so we've cut we've now exactly created what's called a lambda expression and",
    "start": "638370",
    "end": "644670"
  },
  {
    "text": "what we can do in line with this is we can either read it or we can use it we can compile this compile method which",
    "start": "644670",
    "end": "651689"
  },
  {
    "text": "will lit and it will literally when you call lambda dot compile it will build that in memory and it will make it into",
    "start": "651689",
    "end": "656730"
  },
  {
    "text": "an actual function and then we can call dynamic invoke on it pass in the arguments right because we know that",
    "start": "656730",
    "end": "663360"
  },
  {
    "text": "it's of a it is a function that takes in a string so we're going to call it with spencer and then what we're gonna end up",
    "start": "663360",
    "end": "670709"
  },
  {
    "text": "with is we're gonna get the capital isin it we're gonna get my name capitalized right so one thing about this is it's",
    "start": "670709",
    "end": "676230"
  },
  {
    "text": "not strongly typed you actually press it in an array of parameters but if you",
    "start": "676230",
    "end": "681269"
  },
  {
    "text": "happen to know at runtime the type of the function if you know the signature of the function you can call expression dot lambda and what it'll give you is a",
    "start": "681269",
    "end": "688110"
  },
  {
    "text": "lambda expression that actually is fully typed so that way when you call dot compile and then you call invoke you get",
    "start": "688110",
    "end": "694980"
  },
  {
    "text": "strong you it will be strongly typed so that way you can't pass in you know a number or zero arguments or three arguments like you could if you call",
    "start": "694980",
    "end": "701190"
  },
  {
    "text": "dynamic invoke alright so pretty useful",
    "start": "701190",
    "end": "707519"
  },
  {
    "text": "so far so that's our that's our thing what could we do with expressions we can read them we can use them we can create",
    "start": "707519",
    "end": "712829"
  },
  {
    "text": "them so let's talk about some of the real-world use cases for expressions the ones that we we use everyday maybe take",
    "start": "712829",
    "end": "720060"
  },
  {
    "text": "it for granted we don't even know what's going on under the hood so let's let's peel back those layers let's look under the rock so got env framework which I",
    "start": "720060",
    "end": "727500"
  },
  {
    "text": "saw a lot of hands for a 2d frame which is awesome how many people use Auto mapper Auto mapper is one of my favorite time-saving libraries if you were in my",
    "start": "727500",
    "end": "733110"
  },
  {
    "text": "workshop I talked about Auto mapper like I had the same way I talked about any framework I love them I love them to",
    "start": "733110",
    "end": "738390"
  },
  {
    "text": "death so we're gonna go through how both of those use expressions to do their job so entity framework is a is a piece of",
    "start": "738390",
    "end": "746339"
  },
  {
    "text": "functionality that oh is a wrapper over a database right and it allows us one of the things that allows us to do which",
    "start": "746339",
    "end": "751800"
  },
  {
    "text": "has a lot of power is write link expressions which entity framework will",
    "start": "751800",
    "end": "757050"
  },
  {
    "text": "automatically translate into sequel which is really useful right it saves us a lot of time we don't have to write a lot of nasty sequel which is great so",
    "start": "757050",
    "end": "763800"
  },
  {
    "text": "something like this where if we had a roof we had a products table and the products table had a name and a price we",
    "start": "763800",
    "end": "770640"
  },
  {
    "text": "could say products if we wanted to go through and find all the products and then we wanted to find the most expensive eggs in a list so we we could",
    "start": "770640",
    "end": "777930"
  },
  {
    "text": "call DB dot products called dot ware which gives us which gives us a what's",
    "start": "777930",
    "end": "784649"
  },
  {
    "text": "called a predicate we can pass in we pass in that product and then we just give it some kind of we return bool and",
    "start": "784649",
    "end": "790410"
  },
  {
    "text": "say well PM equals eggs we've done this before right if not entity framework linked to objects certainly and then we",
    "start": "790410",
    "end": "797579"
  },
  {
    "text": "and then we call order by descending so the cool thing about in a framework is it will take that knowledge and it will translate it",
    "start": "797579",
    "end": "803820"
  },
  {
    "text": "into sequel which is really cool right so we get select star for products where name equals eggs order by price",
    "start": "803820",
    "end": "809520"
  },
  {
    "text": "descending roughly how many people have really looked at the sequel that entity framework how many people like looking",
    "start": "809520",
    "end": "815430"
  },
  {
    "text": "at the sequel having to be framer commits nobody so this is like a very cleaned up example it gives you gives",
    "start": "815430",
    "end": "822180"
  },
  {
    "text": "you a right idea of course entity framework behaves a little differently it omits consoles lots of crazy sequel",
    "start": "822180",
    "end": "827300"
  },
  {
    "text": "but there's some magic in the middle there's something in the middle that's happening that's causing entity framework to take that expression and",
    "start": "827300",
    "end": "834089"
  },
  {
    "text": "then turn it into a sequel query is it magic probably must be right I mean if you if",
    "start": "834089",
    "end": "841640"
  },
  {
    "text": "all you're doing is writing queries you don't know what's going on to the hood which is which is fine it's just doing its magic right so interesting property",
    "start": "841640",
    "end": "850050"
  },
  {
    "text": "about DVD products it is what's called an iqueryable it is an it is of type",
    "start": "850050",
    "end": "855690"
  },
  {
    "text": "iqueryable which is like ienumerable with a few extra things right i queryable is the magic that enables",
    "start": "855690",
    "end": "861900"
  },
  {
    "text": "things like expressions and lay it enables us to look at expressions that",
    "start": "861900",
    "end": "867330"
  },
  {
    "text": "we pass in at any framework and do stuff with them so here's an example of a numeral is so queryable in innumerable",
    "start": "867330",
    "end": "874410"
  },
  {
    "text": "very similar and they both have lambda expressions or sorry they both use link right they both have where and select",
    "start": "874410",
    "end": "880740"
  },
  {
    "text": "you may have not even ever noticed this right so if you've got innumerable if you've got a numerable and you call dot",
    "start": "880740",
    "end": "886020"
  },
  {
    "text": "where you've got an innumerable you call dot where you get that extension method",
    "start": "886020",
    "end": "892080"
  },
  {
    "text": "right where is an extension method that takes in a funk that says of passing",
    "start": "892080",
    "end": "897330"
  },
  {
    "text": "your thing of type t and then return a bool and then what it'll do is typically it'll use that to filter down some",
    "start": "897330",
    "end": "903270"
  },
  {
    "text": "results but queryable is a little different queryable doesn't take in functions it takes in expressions that",
    "start": "903270",
    "end": "908820"
  },
  {
    "text": "describe functions so what does that mean that means that this one can be",
    "start": "908820",
    "end": "913920"
  },
  {
    "text": "interpreted at runtime by entity framework which is really awesome so this a this is our little this is our",
    "start": "913920",
    "end": "921060"
  },
  {
    "text": "little query that we need or our little link query that we need to decompose down into its component parts and turn it into sequel and how does it do that",
    "start": "921060",
    "end": "927450"
  },
  {
    "text": "how does that do how does it make that magic happen it does that by implementing something called an expression visitor which is used to read",
    "start": "927450",
    "end": "934380"
  },
  {
    "text": "and operate and sometimes modify expressions so let me show you let's break this down one piece at a",
    "start": "934380",
    "end": "939810"
  },
  {
    "text": "time so we've got our DB products we know that represents our products table so now we're trying to query that table so",
    "start": "939810",
    "end": "945150"
  },
  {
    "text": "what we're gonna do is what's gonna happen is that the expression visitor that expressions gonna go into the expression visitor it's gonna be red",
    "start": "945150",
    "end": "951210"
  },
  {
    "text": "it's gonna be red it's gonna be red and then it's going to be translated right so one of the things that it can do that it's really useful for is visiting",
    "start": "951210",
    "end": "958020"
  },
  {
    "text": "expressions just reading them so that you can translate them into another language in this case we're trying to",
    "start": "958020",
    "end": "963150"
  },
  {
    "text": "translate c-sharp into sequel and it does a good job of that so when we pass",
    "start": "963150",
    "end": "968370"
  },
  {
    "text": "in P name equals eggs it becomes we're name equals eggs it",
    "start": "968370",
    "end": "973470"
  },
  {
    "text": "becomes something that sequel can interpret it becomes the sequel language this is what's called a binary",
    "start": "973470",
    "end": "979110"
  },
  {
    "text": "expression and a binary expression is really important because it represents something that has a left side a right",
    "start": "979110",
    "end": "984270"
  },
  {
    "text": "side and an operator in the middle greater than greater than or equal to equals not equals that kind of thing so",
    "start": "984270",
    "end": "990510"
  },
  {
    "text": "a binary expression has a left side a right side and an operator a node type",
    "start": "990510",
    "end": "995550"
  },
  {
    "text": "right the node type is usually like equal not equal that kind of thing so the expression visitor reads each",
    "start": "995550",
    "end": "1001730"
  },
  {
    "text": "piece of that expression and operates on that expression so when we look at this",
    "start": "1001730",
    "end": "1007940"
  },
  {
    "text": "P dot name equals eggs we're looking down and were breaking down that where clause we know that the left side P dot",
    "start": "1007940",
    "end": "1013580"
  },
  {
    "text": "name roughly translates to probably translates to a name column in sequel",
    "start": "1013580",
    "end": "1018640"
  },
  {
    "text": "we know that the double equals is also something that can be read from the binary expression and we know that a",
    "start": "1018640",
    "end": "1023960"
  },
  {
    "text": "double equals is a single equals in in sequel or at least the event the expression visitor does and then of",
    "start": "1023960",
    "end": "1030800"
  },
  {
    "text": "course the single the the eggs string the egg constant gets passed in as a constant to this function right to the",
    "start": "1030800",
    "end": "1038329"
  },
  {
    "text": "where clot to our call to where and of course we don't have double quoted strings inside a sequel so it just",
    "start": "1038330",
    "end": "1043339"
  },
  {
    "text": "translates it to a single quote strings so what it will make it into sequel so that way it can be executed against the",
    "start": "1043340",
    "end": "1048650"
  },
  {
    "text": "sequel database let it do the thing that it wants to do so now we know the magic in the middle is actually an expression",
    "start": "1048650",
    "end": "1055610"
  },
  {
    "text": "visitor and we could spend all day we",
    "start": "1055610",
    "end": "1060650"
  },
  {
    "text": "could do an entire workshop on how to implement an expression visitor we're not going to cover that today we're just",
    "start": "1060650",
    "end": "1066560"
  },
  {
    "text": "going to cover what it is because it's important to understand kind of what's going on under the hood the expressions are being read so that way",
    "start": "1066560",
    "end": "1072320"
  },
  {
    "text": "then we can do something with them right so of course one thing about c-sharp and",
    "start": "1072320",
    "end": "1079429"
  },
  {
    "text": "sequel is that c-sharp is decidedly not sequel it took me a while to find an",
    "start": "1079429",
    "end": "1085070"
  },
  {
    "text": "example a good example of a sequel query this is an example of a sequel query that entity framework would admit entity",
    "start": "1085070",
    "end": "1091880"
  },
  {
    "text": "framework has to work really hard in order to translate what is essentially c-sharp into sequel right because",
    "start": "1091880",
    "end": "1098390"
  },
  {
    "text": "they're not the same language they don't have they have a lot of similar properties but not everything we can't write c-sharp and expect it to operate",
    "start": "1098390",
    "end": "1104840"
  },
  {
    "text": "like sequel I had a developer one time asked me he said uh well I wrote the sequel query and and and I put two",
    "start": "1104840",
    "end": "1112070"
  },
  {
    "text": "things in the where clause and I just figured it I just figured that the and the and part if I had two things in the where clause if the first and wasn't",
    "start": "1112070",
    "end": "1118610"
  },
  {
    "text": "satisfied that it would just short-circuit and look not look at the other one and it will gain performance that way that is not how that works",
    "start": "1118610",
    "end": "1125740"
  },
  {
    "text": "those kinds of idiosyncrasies make a train things like that make translating c-sharp - sequel difficult right another",
    "start": "1125740",
    "end": "1133340"
  },
  {
    "text": "great example is what's that case sensitivity inside of the collation inside of a sequel server database if",
    "start": "1133340",
    "end": "1139880"
  },
  {
    "text": "you have an in-memory sequel server database or so you see a database that entity framework is using for testing or",
    "start": "1139880",
    "end": "1145100"
  },
  {
    "text": "something and you do we're equals it's gonna be case sensitive but a lot of times how many people have",
    "start": "1145100",
    "end": "1150740"
  },
  {
    "text": "a sequel server instance that is not case-sensitive by default it's awesome right but those kind of videos sync",
    "start": "1150740",
    "end": "1155990"
  },
  {
    "text": "receives exists we have to correct for them we could all read this if we really wanted to nobody wants to read this but",
    "start": "1155990",
    "end": "1163039"
  },
  {
    "text": "you see that this is the kind of being that this is like output of a really you know big arguably nasty linq query",
    "start": "1163039",
    "end": "1171700"
  },
  {
    "text": "entity framework has to work hard right that's part of the expression visitors job another thing that expression",
    "start": "1171700",
    "end": "1177500"
  },
  {
    "text": "visitor can do is modify expressions kind of because expression the",
    "start": "1177500",
    "end": "1182870"
  },
  {
    "text": "expression API returns immutable objects which is great because they will always",
    "start": "1182870",
    "end": "1188240"
  },
  {
    "text": "have a state and when you get them back as long as the code as long as that line of code executes and you don't get an exception you know it's a valid",
    "start": "1188240",
    "end": "1193820"
  },
  {
    "text": "expression which is really cool so expression visitor can be used to modify",
    "start": "1193820",
    "end": "1198830"
  },
  {
    "text": "and let's look at an example of this so let's say that every time we had an expression that we wanted to",
    "start": "1198830",
    "end": "1205020"
  },
  {
    "text": "look at we could construct a visitor to always make sure that when we're looking at that if there's a string that's",
    "start": "1205020",
    "end": "1210510"
  },
  {
    "text": "passed in that we translate that expression to a to upper expression so now we're using this now we're replacing",
    "start": "1210510",
    "end": "1216510"
  },
  {
    "text": "it we're still keeping that we're still keeping that variable right but we're also now calling to upper on it so",
    "start": "1216510",
    "end": "1222570"
  },
  {
    "text": "instead of a constant program it's constant expression for example we'll end up with a method call expression and",
    "start": "1222570",
    "end": "1228180"
  },
  {
    "text": "we could do that by implementing an expression visitor and calling busy and implementing the visit method so",
    "start": "1228180",
    "end": "1234680"
  },
  {
    "text": "basically if a spray if the node type equals to expression type type parameter we want to make sure to return it we",
    "start": "1234680",
    "end": "1240870"
  },
  {
    "text": "don't want to mess with parameters right but if it's anything else it's fair game to be called to be modified so if the",
    "start": "1240870",
    "end": "1246630"
  },
  {
    "text": "node type because there's a property on node on all I called type on all expressions if the node type equals type",
    "start": "1246630",
    "end": "1252510"
  },
  {
    "text": "of string then we're gonna use instead of returning the expression we're actually going to modify it we're",
    "start": "1252510",
    "end": "1258180"
  },
  {
    "text": "actually going to replace it with the method call expression and call to up or on it such that when we do this we",
    "start": "1258180",
    "end": "1266370"
  },
  {
    "text": "declare a function in line called spencey string apparently and we take in an S which is a string and then return s",
    "start": "1266370",
    "end": "1273000"
  },
  {
    "text": "belongs to Spencer if we run that through the two upper visitor what will",
    "start": "1273000",
    "end": "1278610"
  },
  {
    "text": "happen is is that expression that we get after we call visit and convert will be a new expression and when we compile it",
    "start": "1278610",
    "end": "1284910"
  },
  {
    "text": "and invoke it we'll get the cheese belongs to Spencer and everything will be capitalized so I have a demo for you",
    "start": "1284910",
    "end": "1293910"
  },
  {
    "text": "and I am going to if you've got a computer and you want to follow along I'm going to oh boy does this Twitter",
    "start": "1293910",
    "end": "1299250"
  },
  {
    "text": "link still work oh right I'm going to go",
    "start": "1299250",
    "end": "1305100"
  },
  {
    "text": "here oh boy this is gonna be there we go all right so I'm gonna tweet out the",
    "start": "1305100",
    "end": "1311250"
  },
  {
    "text": "link to this so this is a thing called ODOT net fiddle which is really useful",
    "start": "1311250",
    "end": "1317130"
  },
  {
    "text": "for sharing really small snippets of code so in DC Minnesota tweet that out",
    "start": "1317130",
    "end": "1324530"
  },
  {
    "text": "now you got a link to this dotnet fiddle in case you want to follow along and in case you want to reference it later you've always got a link in to the",
    "start": "1324530",
    "end": "1330300"
  },
  {
    "text": "slides too and well cats out of the bag because it's already run and it's already it's already been run before",
    "start": "1330300",
    "end": "1337020"
  },
  {
    "text": "but you'd get to see you you can take this and then you can experiment with it right so it's got our two uh per visitor",
    "start": "1337020",
    "end": "1342179"
  },
  {
    "text": "declared with our visit type and you can take this and mess with it it's a little bit of example code it makes it makes",
    "start": "1342179",
    "end": "1348600"
  },
  {
    "text": "messing with expressions a little easier sometimes when you have a little expression so if we wanted to call to lower instead we won't rename it to",
    "start": "1348600",
    "end": "1357059"
  },
  {
    "text": "upper visitors now the to lower visitor we've added a bug right I'm gonna run this and you're gonna see when we go",
    "start": "1357059",
    "end": "1363660"
  },
  {
    "text": "through when the expression is modified and looked at it's going to return that's maybe a little bit too small it's",
    "start": "1363660",
    "end": "1370350"
  },
  {
    "text": "gonna return the cheese belongs to Spencer in lower case right so just an",
    "start": "1370350",
    "end": "1375870"
  },
  {
    "text": "example if you have an expression you can take them and modify them using a visitor let's see all right talk about",
    "start": "1375870",
    "end": "1392940"
  },
  {
    "text": "auto map Auto mapper is one of my favorite libraries it saves me from writing glue code and glue code means that I'm doing fun stuff as opposed to",
    "start": "1392940",
    "end": "1399000"
  },
  {
    "text": "boring stuff instead of you know declaring another another clad another instance of a class that has all the",
    "start": "1399000",
    "end": "1404010"
  },
  {
    "text": "properties of the previous one I can use Auto mapper to copy those properties over to that class it's awesome right and you can manage your maps and use",
    "start": "1404010",
    "end": "1410760"
  },
  {
    "text": "them to do some specific things including things like interact with link let me show you so let's this is an",
    "start": "1410760",
    "end": "1417330"
  },
  {
    "text": "example of a map right so create map if you call create map on an object on a",
    "start": "1417330",
    "end": "1422490"
  },
  {
    "text": "class on two classes what you'll get is it will create that map in memory and it",
    "start": "1422490",
    "end": "1427770"
  },
  {
    "text": "will manage it in memory it will hold it in memory and when you call dot map from this mapper it will done go look in that",
    "start": "1427770",
    "end": "1433410"
  },
  {
    "text": "map and use it so what will you like property so if it's a string first name",
    "start": "1433410",
    "end": "1438809"
  },
  {
    "text": "it on one class and a string first name on another when you call map it will automatically copy those things over if",
    "start": "1438809",
    "end": "1445260"
  },
  {
    "text": "you need to do some custom stuff you can call for member and say for the target",
    "start": "1445260",
    "end": "1450750"
  },
  {
    "text": "property first name I want you to map from my first name so you can give autumn after a little bit more information to do its job really well so",
    "start": "1450750",
    "end": "1458400"
  },
  {
    "text": "those are so these things these things that we're calling those lambdas those are actually expressions right because",
    "start": "1458400",
    "end": "1464300"
  },
  {
    "text": "those things are not actually being function are not functions that are being called they're just being",
    "start": "1464300",
    "end": "1469410"
  },
  {
    "text": "interpreted and there being interpreted for our convey and they're being interpreted and what we get is a nice experience when we're",
    "start": "1469410",
    "end": "1475050"
  },
  {
    "text": "developing it's very convenient one of the hardest things that I think that I explain to junior developers is when",
    "start": "1475050",
    "end": "1480600"
  },
  {
    "text": "that where clause that we're in like DV products that where clause has actually never invoked",
    "start": "1480600",
    "end": "1486720"
  },
  {
    "text": "it's just read and translated right same thing here same thing for auto-mapping talk about project two if you were in my",
    "start": "1486720",
    "end": "1493080"
  },
  {
    "text": "workshop I talked about project two a lot because it's one of my godly things I love this thing because it can use",
    "start": "1493080",
    "end": "1499020"
  },
  {
    "text": "expressions in really powerful ways let me show you so let's say that you have some kind of item detail class and for",
    "start": "1499020",
    "end": "1505170"
  },
  {
    "text": "our sake we'll just say it has an ID and a name and a hundred other property so 102 properties to map right so and then",
    "start": "1505170",
    "end": "1513180"
  },
  {
    "text": "we've got it we need to project it to a list of some kind right so we just need to take that and we just need to copy",
    "start": "1513180",
    "end": "1518640"
  },
  {
    "text": "over the ID and the name from the database and then put it in a list if we're you know trying to select it in a",
    "start": "1518640",
    "end": "1523740"
  },
  {
    "text": "in a drop-down selection or you know on a web page or something right so we can",
    "start": "1523740",
    "end": "1528810"
  },
  {
    "text": "combine Auto mapper and edit the framework and call map ID'd item detail model give it the type",
    "start": "1528810",
    "end": "1536040"
  },
  {
    "text": "item detail model it'll say oh you're giving me a set of item details I know that I'm going to translate them into an",
    "start": "1536040",
    "end": "1541590"
  },
  {
    "text": "item detail model and return the right data but here be dragons when the",
    "start": "1541590",
    "end": "1548610"
  },
  {
    "text": "dragons come in because this will call select star on that table and how did",
    "start": "1548610",
    "end": "1554040"
  },
  {
    "text": "you how did the DBAs that you work with love select star they hate it right you",
    "start": "1554040",
    "end": "1559380"
  },
  {
    "text": "don't want to make them DBAs mad because then then they yell at you and then they make you refactor your code right so",
    "start": "1559380",
    "end": "1564510"
  },
  {
    "text": "project two is a really powerful thing that can help come to the rescue and kind of take some of that pain away so",
    "start": "1564510",
    "end": "1570480"
  },
  {
    "text": "instead of calling mapper da item detail model you know array of the item detail",
    "start": "1570480",
    "end": "1576450"
  },
  {
    "text": "model to return this what we could do instead is call project two so DB item",
    "start": "1576450",
    "end": "1581580"
  },
  {
    "text": "details dot project two there's actually an argument that gets passed in it's the from your mapper instance object you",
    "start": "1581580",
    "end": "1588240"
  },
  {
    "text": "actually pass in its could the mappers configuration but you get the idea if you're using the static auto map or how",
    "start": "1588240",
    "end": "1594570"
  },
  {
    "text": "many people are using the static API for auto mapper okay Wow very good very few of you if you've got existing code you",
    "start": "1594570",
    "end": "1601440"
  },
  {
    "text": "know don't you know you don't always need to refactor it but if you do use the instance base there's an additional argument that's important",
    "start": "1601440",
    "end": "1607630"
  },
  {
    "text": "well what this will do what's really cool is that Auto mapper will use expressions under the hood and tell",
    "start": "1607630",
    "end": "1613870"
  },
  {
    "text": "entity framework they're really only selecting these two properties so when you call project two on this on this",
    "start": "1613870",
    "end": "1620470"
  },
  {
    "text": "item details model and tell it to project it to the item detail model right you'll get a select ID common name",
    "start": "1620470",
    "end": "1627040"
  },
  {
    "text": "so Auto mapper and entity framework can work together a little bit to actually take those expressions and use them to",
    "start": "1627040",
    "end": "1633820"
  },
  {
    "text": "write more performant code or if performance is in the issue and you know use it to write code that your DBA won't hate so let me talk about a real-world",
    "start": "1633820",
    "end": "1642580"
  },
  {
    "text": "example at my company Mac when we backwards so I work for a start-up",
    "start": "1642580",
    "end": "1648910"
  },
  {
    "text": "called rivet and rivet makes integration data there may make they make integration software so they're making",
    "start": "1648910",
    "end": "1654880"
  },
  {
    "text": "data and workflows there they're trying to connect to systems to might either connect lists data for accounting",
    "start": "1654880",
    "end": "1661420"
  },
  {
    "text": "systems like customers and vendors or emulate workflows for integration of",
    "start": "1661420",
    "end": "1666700"
  },
  {
    "text": "certain products really powerful really cool stuff and it's a startup I've been there for about four years and we",
    "start": "1666700",
    "end": "1672490"
  },
  {
    "text": "encountered a problem in an early version of the platform so we essentially what we did was we Dahl ways",
    "start": "1672490",
    "end": "1679480"
  },
  {
    "text": "pull in a local cache of all of the data so that way we can manipulate it and reference it very easily there's a lot",
    "start": "1679480",
    "end": "1685960"
  },
  {
    "text": "of good reasons to do that so what we do is we would create those in sequel we'd",
    "start": "1685960",
    "end": "1691090"
  },
  {
    "text": "create sequel tables for all those and then we'd copy in the data pretty straightforward the thing we needed to",
    "start": "1691090",
    "end": "1696520"
  },
  {
    "text": "do was be able to map one entity to another and they used stored procs",
    "start": "1696520",
    "end": "1702430"
  },
  {
    "text": "because by the time I got there they started using stored proxy for performance what they were doing previously was easing entity framework",
    "start": "1702430",
    "end": "1709120"
  },
  {
    "text": "calling for each of the objects on the objects and then copying over the data it was very slow it was not performant",
    "start": "1709120",
    "end": "1714790"
  },
  {
    "text": "enough and stored procedures because they're compiled and because their sequel and use insert set based logic",
    "start": "1714790",
    "end": "1720670"
  },
  {
    "text": "they were a lot faster so let's take this for example we're gonna take a Salesforce customer",
    "start": "1720670",
    "end": "1726730"
  },
  {
    "text": "and make it into a quickbooks customer so oftentimes when you're working with data from different systems as you know",
    "start": "1726730",
    "end": "1732400"
  },
  {
    "text": "you've done integration before at least at least a couple of times i'm sure",
    "start": "1732400",
    "end": "1737810"
  },
  {
    "text": "it's a lot of our jobs these days and of course we know that sometimes the data doesn't always quite match up if it's",
    "start": "1737810",
    "end": "1744080"
  },
  {
    "text": "not a property name maybe it's just kind of a purpose right it's maybe the property doesn't quite represent the",
    "start": "1744080",
    "end": "1749480"
  },
  {
    "text": "property on the other thing right but for let's take for example that we have like a Salesforce customer and a QuickBooks customer and we want a the",
    "start": "1749480",
    "end": "1756470"
  },
  {
    "text": "Salesforce customer for one reason or another is called customer name and we wanted to map it to the QuickBooks name property on that customer and then we",
    "start": "1756470",
    "end": "1763220"
  },
  {
    "text": "have a create date which kind of sort of goes with open date will we go with it that's just what our product definition",
    "start": "1763220",
    "end": "1768950"
  },
  {
    "text": "says so we go with it so our job is to copy over all of these properties from one entity to another so this is what",
    "start": "1768950",
    "end": "1775070"
  },
  {
    "text": "our stored procs looks like we'd say insert QuickBooks customer name open date select customer name create date",
    "start": "1775070",
    "end": "1780290"
  },
  {
    "text": "from Salesforce customers and of course there was a little more complication to that we wanted to make sure we weren't including duplicate data for example but",
    "start": "1780290",
    "end": "1787730"
  },
  {
    "text": "you get the general ideas that we would write stored procs to move this data around now do that for hundreds of",
    "start": "1787730",
    "end": "1794150"
  },
  {
    "text": "objects and thousands of properties oh and by the way don't ever make a mistake how many people love writing sequel",
    "start": "1794150",
    "end": "1801920"
  },
  {
    "text": "because it's just it just helps you out so much from keeping you from making mistakes right right",
    "start": "1801920",
    "end": "1808010"
  },
  {
    "text": "people the people that raised their hands those are you know sadists those are the kinds of love pain right but for all it for me I this was not a scalable",
    "start": "1808010",
    "end": "1815750"
  },
  {
    "text": "solution for our company this wasn't scalable we were making mistakes all the time because sequel doesn't provide a",
    "start": "1815750",
    "end": "1821390"
  },
  {
    "text": "lot of those protections that were just used to in c-sharp so we had some problems there so I went to my boss one",
    "start": "1821390",
    "end": "1827900"
  },
  {
    "text": "day and I barely knew I knew of expressions I knew about them conceptually I don't know if I watched a talk write a blog post whatever I knew",
    "start": "1827900",
    "end": "1834470"
  },
  {
    "text": "what they could do I knew that they could be read and interpreted so I went to my boss and I said Michael I think",
    "start": "1834470",
    "end": "1840170"
  },
  {
    "text": "there's a different way I think there's a better way we can do this these stored procedures there's a lot of pain associated with them but I think that we",
    "start": "1840170",
    "end": "1846140"
  },
  {
    "text": "can do this in code by defining maps and code and he said you can show me a proof of concept you have an hour so I said",
    "start": "1846140",
    "end": "1853790"
  },
  {
    "text": "all right I've got an hour so in 40 minutes I had some working mock workable example and it essentially kind of",
    "start": "1853790",
    "end": "1860120"
  },
  {
    "text": "looked like this and what this did was we were able to define classes kind of",
    "start": "1860120",
    "end": "1865130"
  },
  {
    "text": "like Maps like kind of like Auto mapper does we were able to define a class that would represent a mapping between those",
    "start": "1865130",
    "end": "1870410"
  },
  {
    "text": "two objects so we would say source filled from the customer from the Salesforce customer is",
    "start": "1870410",
    "end": "1875460"
  },
  {
    "text": "equal to the QVC name rim so what we actually did actually think I have that",
    "start": "1875460",
    "end": "1881040"
  },
  {
    "text": "inverted a little bit if we I think that the trim belongs on the customer name so we wanted to trim the customer name",
    "start": "1881040",
    "end": "1886590"
  },
  {
    "text": "first because a lot of the older systems that we integrate with they just love padding spaces on the ends of things they just love doing it or at the",
    "start": "1886590",
    "end": "1891990"
  },
  {
    "text": "beginning right I don't know why they do but they do sure I'll deal with that but in QuickBooks they don't like doing that",
    "start": "1891990",
    "end": "1898110"
  },
  {
    "text": "so we wanted to trim that name and then we wanted to say well the source field createdate we really want to take it and",
    "start": "1898110",
    "end": "1903780"
  },
  {
    "text": "put it to the open date or and but we don't always have a value but it's a required value at another system so",
    "start": "1903780",
    "end": "1909690"
  },
  {
    "text": "we'll do date time dot now in case that value is null so the thing that I had to",
    "start": "1909690",
    "end": "1915300"
  },
  {
    "text": "do was write an expression visitor because I had to I had to preserve the performance of the stored procedure",
    "start": "1915300",
    "end": "1921990"
  },
  {
    "text": "while making it really convenient for developers to write so I had to write an expression visitor and then I had to",
    "start": "1921990",
    "end": "1928410"
  },
  {
    "text": "handle pretty much any type of expression that we wanted to translate how many people have ever tried to call a method or something inside of",
    "start": "1928410",
    "end": "1934590"
  },
  {
    "text": "annotated framework query and any frameworks like I can't translate that I don't know what to do it throws an exception right a lot of us encountered",
    "start": "1934590",
    "end": "1940530"
  },
  {
    "text": "that error we had to do the same thing because sometimes the functionality just didn't copy over right so when we called",
    "start": "1940530",
    "end": "1947310"
  },
  {
    "text": "trim on a name property what we were actually wanting to do was call L trim our trim inside of sequel right and then",
    "start": "1947310",
    "end": "1955590"
  },
  {
    "text": "when we use the coalesce operator we wanted to actually use the is null Appa we when it actually translate to the is",
    "start": "1955590",
    "end": "1960870"
  },
  {
    "text": "null function so we had to a capture we had to capture all of this intent inside of that expression visitor so that way",
    "start": "1960870",
    "end": "1966780"
  },
  {
    "text": "we could write really natural c-sharp that was also really performant in sequel and it emitted nice and moment of",
    "start": "1966780",
    "end": "1973890"
  },
  {
    "text": "pride right it admitted a nice-looking sequel it granted our use cases a little narrower than pretty much you know any D",
    "start": "1973890",
    "end": "1979080"
  },
  {
    "text": "framework in general but what we ended up with was really nice-looking",
    "start": "1979080",
    "end": "1984470"
  },
  {
    "text": "predictable sequel so our DBAs didn't kill it actually at the time we were the DBAs which is anyway so this became a",
    "start": "1984470",
    "end": "1992280"
  },
  {
    "text": "really predictable process to create these maps so we went from stored procedures and we immediately as soon as",
    "start": "1992280",
    "end": "1998250"
  },
  {
    "text": "we're this met system had any maturity we immediately switched to doing this we switched all of our definitions from stored procedures to this",
    "start": "1998250",
    "end": "2004760"
  },
  {
    "text": "it was predictable and it saved thousands of hours of development time",
    "start": "2004760",
    "end": "2010570"
  },
  {
    "text": "thousands of hours this is the back of the napkin right from debugging all the",
    "start": "2010570",
    "end": "2016010"
  },
  {
    "text": "way to development because stored procedures are really hard and nasty and the really other cool thing that we were able to do with our visitors is we were",
    "start": "2016010",
    "end": "2022460"
  },
  {
    "text": "able to button and additional functionality on top of them such that we could write and run additional queries using that using that metadata",
    "start": "2022460",
    "end": "2029360"
  },
  {
    "text": "in order to make sure that we could prevent duplicate data from moving from one database to the other stuff like",
    "start": "2029360",
    "end": "2034370"
  },
  {
    "text": "that it became a huge boon to productivity and people really liked them and we and it went all the way down",
    "start": "2034370",
    "end": "2039950"
  },
  {
    "text": "to doing joins it was really awesome and it saved a lot of time and it made a lot of money too I think so what if we so",
    "start": "2039950",
    "end": "2048379"
  },
  {
    "text": "let's talk about some other real-world examples so that's my personal story a really good one well maybe you have you",
    "start": "2048380",
    "end": "2055310"
  },
  {
    "text": "know we were just we're wanting to do something like order by like a string right like order by some kind of property if you've ever constructed an",
    "start": "2055310",
    "end": "2062000"
  },
  {
    "text": "API of some kind ever constructed API lots of you have right we might have",
    "start": "2062000",
    "end": "2067100"
  },
  {
    "text": "done something like this at some point or you might have at least seen or consume something like this where you had an API a customer's API and this is",
    "start": "2067100",
    "end": "2073550"
  },
  {
    "text": "a URL right where you had it on the query string where you could order by equals to name okay this is roughly this",
    "start": "2073550",
    "end": "2081320"
  },
  {
    "text": "is what it would look like inside if we were doing a database query right but the problem is is that it does not expect a string it expects a lambda",
    "start": "2081320",
    "end": "2088909"
  },
  {
    "text": "right it expects an expression so this thing doesn't exist so the solution for",
    "start": "2088910",
    "end": "2094820"
  },
  {
    "text": "us is to use the expression API to actually cook a reference we're gonna actually create that lambda in memory",
    "start": "2094820",
    "end": "2101840"
  },
  {
    "text": "using expressions so our goal is to end up here we can do that by using this",
    "start": "2101840",
    "end": "2108860"
  },
  {
    "text": "iqueryable that I think I got from Stack Overflow and tweaked a little bit so what we're gonna do is use this we're",
    "start": "2108860",
    "end": "2114740"
  },
  {
    "text": "gonna create an extension method where it's order by property or field and we're gonna take an existing iqueryable or ienumerable whatever the case may be",
    "start": "2114740",
    "end": "2123680"
  },
  {
    "text": "and take a field or property take a give it a property or field name that we want to order by and then do we want it to be",
    "start": "2123680",
    "end": "2130160"
  },
  {
    "text": "ascending or descending so there's a very simple function signature so our first thing is to edit if we want it",
    "start": "2130160",
    "end": "2136460"
  },
  {
    "text": "we're gonna make this an eye queryable so that way also be used by entity framework so we can take advantage of the performance you know the sending our order buys down",
    "start": "2136460",
    "end": "2143300"
  },
  {
    "text": "to the sequel server so we want to cook at our expression and then we want to apply it to our queryable chain and we",
    "start": "2143300",
    "end": "2149510"
  },
  {
    "text": "can do that by defining an expression that represents the type so first thing we need to do is capture the type so we",
    "start": "2149510",
    "end": "2157460"
  },
  {
    "text": "know type of t so we want to get the type of that element right if it's an eye queryable you could also just call it you know dot element type same thing",
    "start": "2157460",
    "end": "2164410"
  },
  {
    "text": "so then we want to create the parameter right we're trying to pay it we're trying to recreate that seed to it goes",
    "start": "2164410",
    "end": "2170510"
  },
  {
    "text": "into seed name we're trying to recreate that expression so first thing we need to do is for our expression is build the",
    "start": "2170510",
    "end": "2176120"
  },
  {
    "text": "left side so we're building the parameter pass in a type perfect we'll give it the element type of our iqueryable makes sense so far so then",
    "start": "2176120",
    "end": "2183620"
  },
  {
    "text": "what we want to do is capture the property so we want to capture that property that exists on that class so",
    "start": "2183620",
    "end": "2189410"
  },
  {
    "text": "what we'll do is call expression dot property or field which is useful because it's nice you don't have to know one or the other",
    "start": "2189410",
    "end": "2194960"
  },
  {
    "text": "you can give it the the instance of the thing that you want to capture in this case is our expression parameter and",
    "start": "2194960",
    "end": "2200240"
  },
  {
    "text": "then we want to give it the property or field name now at this point if the property or field name didn't exist on",
    "start": "2200240",
    "end": "2205910"
  },
  {
    "text": "the on the class it would throw an exception it wouldn't go anywhere from here right but assuming that it did go",
    "start": "2205910",
    "end": "2212330"
  },
  {
    "text": "on we want to get our name right so then we do this VAR this selector so we say expression lambda and now we're ready to",
    "start": "2212330",
    "end": "2218930"
  },
  {
    "text": "construct it we're ready to construct our expression so we pass in our property our property expression which",
    "start": "2218930",
    "end": "2224090"
  },
  {
    "text": "is going to be the body of our expression and then we're going to pass in the parameter because we only have one parameter so we only need one",
    "start": "2224090",
    "end": "2229640"
  },
  {
    "text": "parameter passed into the lambda so we're gonna so we've achieved our goal by using this order by but by just by",
    "start": "2229640",
    "end": "2238130"
  },
  {
    "text": "using expressions just cooking a custom expression at runtime so here is if we",
    "start": "2238130",
    "end": "2244280"
  },
  {
    "text": "wanted to apply it use that actually use that order by and actually apply it to something hold on this is where we would",
    "start": "2244280",
    "end": "2250730"
  },
  {
    "text": "actually construct the call to order by rights because we want we've got that we've got the expression now we want to",
    "start": "2250730",
    "end": "2256850"
  },
  {
    "text": "apply it to the chain the iqueryable chain and we do it by this so this looks a little intimidating and this is the",
    "start": "2256850",
    "end": "2263090"
  },
  {
    "text": "part where discovery of the expression API if you've got Visual Studio we got link pad which is a great tool that",
    "start": "2263090",
    "end": "2269300"
  },
  {
    "text": "would help a lot I do a lot of my I don't memorize any of the expression API except the simple stuff the rest of it I use",
    "start": "2269300",
    "end": "2274970"
  },
  {
    "text": "autocomplete I use intellisense to help me with first thing we need though we",
    "start": "2274970",
    "end": "2280100"
  },
  {
    "text": "need the name of the order by method we know that because we use it inside of the numerable order by or order by",
    "start": "2280100",
    "end": "2287330"
  },
  {
    "text": "descending of course we could use name of but for the sake of this example this looks good too so if the thing is",
    "start": "2287330",
    "end": "2293450"
  },
  {
    "text": "ascending if we want to just order by ascending then we just want the order by method we want to order by method name",
    "start": "2293450",
    "end": "2298730"
  },
  {
    "text": "otherwise we want order by descending and then we construct our expression",
    "start": "2298730",
    "end": "2304040"
  },
  {
    "text": "call so let's break this down a little bit so first thing we need to do so since the expression call since this",
    "start": "2304040",
    "end": "2310160"
  },
  {
    "text": "queryable order by order by descending are static methods we don't need an instance of something we actually just",
    "start": "2310160",
    "end": "2315590"
  },
  {
    "text": "need its type so we say type of queryable because that's where our order by an order by descending live we have",
    "start": "2315590",
    "end": "2322070"
  },
  {
    "text": "our name of the method and then we have our generic type signature because there's that it is a type it is order by",
    "start": "2322070",
    "end": "2328760"
  },
  {
    "text": "of blah blah it's the the type of the IKE we reba land then the type of the",
    "start": "2328760",
    "end": "2334820"
  },
  {
    "text": "thing being selected and then we have our parameters to that particular thing",
    "start": "2334820",
    "end": "2341270"
  },
  {
    "text": "since it's a static method it has two parameters it has the previous iqueryable and it has the selector the",
    "start": "2341270",
    "end": "2346550"
  },
  {
    "text": "lambda the expression that we created so now we've gotten all this we've got expression call and we've got it and",
    "start": "2346550",
    "end": "2352940"
  },
  {
    "text": "we've got it constructed let's take a look at an example so I'm gonna use Twitter tweet this bad boy out so I'm",
    "start": "2352940",
    "end": "2360890"
  },
  {
    "text": "gonna do hit escape get that out of there order by property example we will",
    "start": "2360890",
    "end": "2367790"
  },
  {
    "text": "do that we will super cool and you can",
    "start": "2367790",
    "end": "2372800"
  },
  {
    "text": "follow along or just check my Twitter later to try it yourself alright now",
    "start": "2372800",
    "end": "2384050"
  },
  {
    "text": "we're gonna go back to our fiddle and what I've got here is just a set of employees I've got a set of employees",
    "start": "2384050",
    "end": "2389840"
  },
  {
    "text": "I've got Gary I'm gonna make this just a little bit bigger I've got Gary I've got his hire date I've got Spencer I've got",
    "start": "2389840",
    "end": "2395840"
  },
  {
    "text": "Michael I've got Amy and for every employee dot as query ball so we're since it's just an in memory you know",
    "start": "2395840",
    "end": "2402620"
  },
  {
    "text": "set we call as queryable to get it properly typed so we can use our order by we're gonna say order by property or field and we want to pass in",
    "start": "2402620",
    "end": "2409579"
  },
  {
    "text": "the name property because we want to order by name and what we'll end up with is I can pull this up a little bit or I",
    "start": "2409579",
    "end": "2416690"
  },
  {
    "text": "could just zoom out that's fine too we'll end up with Amy Gary Michael Spencer and here's the fully completed",
    "start": "2416690",
    "end": "2423920"
  },
  {
    "text": "thing I ripped shamelessly from this Oh for my paging example which I think was also that order by was taken from a",
    "start": "2423920",
    "end": "2430660"
  },
  {
    "text": "stack overflow question thank you stack overflow and here's the implementation the same thing we just described so now",
    "start": "2430660",
    "end": "2438319"
  },
  {
    "text": "you have the code you can look at it and you can kind of mess with it and see what it does and play with it a little more if we put in higher date instead by",
    "start": "2438319",
    "end": "2447500"
  },
  {
    "text": "golly I should expect that we will order this by higher date so we should get Spencer on top and then Gary Michael Amy",
    "start": "2447500",
    "end": "2455589"
  },
  {
    "text": "Spencer Gary Michael Amy right because ordering by higher date we don't put it",
    "start": "2455589",
    "end": "2462470"
  },
  {
    "text": "in the proper type or sorry the proper name of a property we get an expression so would it would throw one call to",
    "start": "2462470",
    "end": "2469609"
  },
  {
    "text": "property or field it would say QW er is not a member of type employee so really",
    "start": "2469609",
    "end": "2474980"
  },
  {
    "text": "handy I have a little code to play with too awesome",
    "start": "2474980",
    "end": "2480279"
  },
  {
    "text": "let's keep going let's do it I mean the cool thing about once expressions is once you know about them and what you",
    "start": "2480279",
    "end": "2486020"
  },
  {
    "text": "know once you know their power you can start to really dream up and do a lot of cool things what about our own rules",
    "start": "2486020",
    "end": "2491420"
  },
  {
    "text": "engine or search filter system or whatever what's new let's do a rules engine let's do a very simple rules",
    "start": "2491420",
    "end": "2497000"
  },
  {
    "text": "engine so we're gonna define something called a rule and we're just gonna have a and it's gonna have a name of a",
    "start": "2497000",
    "end": "2502609"
  },
  {
    "text": "property on an object and then a value so we're gonna try to it we're gonna try to create a representation of like a",
    "start": "2502609",
    "end": "2508579"
  },
  {
    "text": "predicate right where name equals Spencer something like that and then what we have is an operation and I've",
    "start": "2508579",
    "end": "2514309"
  },
  {
    "text": "just basically just kind of boiled it down to greater than less than or equal to nothing really complicated and then",
    "start": "2514309",
    "end": "2523579"
  },
  {
    "text": "what we have is basically we're making a search system we're making a filter system and we want to translate the",
    "start": "2523579",
    "end": "2528799"
  },
  {
    "text": "intent of that filter for one reason for some reason or another it's really complicated so expressions come to the",
    "start": "2528799",
    "end": "2534319"
  },
  {
    "text": "rescue right so we're gonna define our rules and memories so we could say name equal to Gary",
    "start": "2534319",
    "end": "2539480"
  },
  {
    "text": "and hired eight greater than 1 1 2016 so",
    "start": "2539480",
    "end": "2545210"
  },
  {
    "text": "we can cook an expression given a rule set so this is where we could use our binary / our binary expression again to",
    "start": "2545210",
    "end": "2551630"
  },
  {
    "text": "do some magic so we're gonna start with an old binary expression and we're gonna say for each thing rule in the thing",
    "start": "2551630",
    "end": "2557390"
  },
  {
    "text": "we're gonna create a new we're gonna create a new expression so we're gonna create we're gonna capture the property",
    "start": "2557390",
    "end": "2563270"
  },
  {
    "text": "so the property name from that rule and then we're gonna capture the value in an expression constant and then what we're",
    "start": "2563270",
    "end": "2569150"
  },
  {
    "text": "gonna call this method called make binary and ruled out operation that would not that would not necessarily",
    "start": "2569150",
    "end": "2574820"
  },
  {
    "text": "compile that would actually would not compile we'd have to use the node type that which is provided by the exposures",
    "start": "2574820",
    "end": "2580760"
  },
  {
    "text": "provided in an enum but for sake of argument we'll just shortening the code up just a little bit let's pretend it's a node type we say",
    "start": "2580760",
    "end": "2586910"
  },
  {
    "text": "ruled out operation we'll say it's equal and we were just basically wanting to create an expression that represents this property equals this value and then",
    "start": "2586910",
    "end": "2594890"
  },
  {
    "text": "if our binary expression is null let's create a new binary expression or we'll make a new we'll make it a Bryner exists",
    "start": "2594890",
    "end": "2601609"
  },
  {
    "text": "expression that includes the existing expression so we'll just wrap them up and wrap them up so we'll end up with",
    "start": "2601609",
    "end": "2606619"
  },
  {
    "text": "three binary expressions for three rules right so this because of expression",
    "start": "2606619",
    "end": "2613490"
  },
  {
    "text": "magic and we're because we're using an entity framework or whatever we're doing this becomes this at the bottom so what",
    "start": "2613490",
    "end": "2619340"
  },
  {
    "text": "we've done is used a representation of a rule in memory to actually translate it",
    "start": "2619340",
    "end": "2624920"
  },
  {
    "text": "and create a lambda really awesome and of course I have an example for that too because it's so awesome yeah everything",
    "start": "2624920",
    "end": "2641150"
  },
  {
    "text": "is great when you're clicking around very good bye here we go here's our",
    "start": "2641150",
    "end": "2649100"
  },
  {
    "text": "rules engine so this is the thing right here so we've done basically exactly what we talked about which is we we've",
    "start": "2649100",
    "end": "2655880"
  },
  {
    "text": "just this is the implementation of the rules engine almost the exact same way that I did it except this one actually compiles right so scrolling down we've",
    "start": "2655880",
    "end": "2663920"
  },
  {
    "text": "got our same list of employees and we've got here a set of rules that we've",
    "start": "2663920",
    "end": "2669170"
  },
  {
    "text": "defined in memory so we've got name equal to Gary hired a 26 greater than 2016 and so what we've done",
    "start": "2669170",
    "end": "2675559"
  },
  {
    "text": "is we've just taken the the rule we've constructed we've just copy pasted the example in a running dotnet fiddle got",
    "start": "2675559",
    "end": "2681619"
  },
  {
    "text": "our employee we've got our rule and then this is the thing that actually takes the rules in and then actually does",
    "start": "2681619",
    "end": "2687710"
  },
  {
    "text": "something with them so it's doing exactly what I said it's cooking a binary expression and that is cooking",
    "start": "2687710",
    "end": "2692750"
  },
  {
    "text": "more and more binary expressions until it's represented captured all of the intent of all of those rules in expressions so when we run it which it",
    "start": "2692750",
    "end": "2701390"
  },
  {
    "text": "was already run we see that our rule is Gary one one 2017 if we change this name",
    "start": "2701390",
    "end": "2707210"
  },
  {
    "text": "expression equal to something we'll end up with nothing so it doesn't write anything because",
    "start": "2707210",
    "end": "2713480"
  },
  {
    "text": "nobody's name is KSDK decay got here",
    "start": "2713480",
    "end": "2719089"
  },
  {
    "text": "let's see do we got oh we've got to Gary's so what happens if we take out this greater than this this higher date",
    "start": "2719089",
    "end": "2725000"
  },
  {
    "text": "rule and we just have Gary as we predicted we run it and we get both of our Gary's hooray",
    "start": "2725000",
    "end": "2731660"
  },
  {
    "text": "and that's expressions that's expressions and a rules engine really awesome stuff I have I have built",
    "start": "2731660",
    "end": "2737089"
  },
  {
    "text": "similar systems to this but there's all of there's existing things out there that you can use but sometimes when you",
    "start": "2737089",
    "end": "2742460"
  },
  {
    "text": "want to know what's going on under the hood you need something custom that's where that's where something like this starts to shine so I'm an example like",
    "start": "2742460",
    "end": "2748700"
  },
  {
    "text": "this so let's talk about expression versus reflection so expressions if you",
    "start": "2748700",
    "end": "2756200"
  },
  {
    "text": "cook a cut so how many people associate reflection with slowness but that it's slow it typically is compared to doing",
    "start": "2756200",
    "end": "2763039"
  },
  {
    "text": "something that's not it that's not reflection right and reflection is incredibly powerful I use reflection the",
    "start": "2763039",
    "end": "2769460"
  },
  {
    "text": "entire platform of rivet is built around reflection because it's so powerful and usually you just have to be fast enough",
    "start": "2769460",
    "end": "2775099"
  },
  {
    "text": "right but if you need to extract as much performance as you can out of an application you can often use expression",
    "start": "2775099",
    "end": "2781760"
  },
  {
    "text": "so you can take that reflection and if you could take that reflection code if you can convert it into convert it and",
    "start": "2781760",
    "end": "2787579"
  },
  {
    "text": "make it into an expression and then compile it and then save that compiled expression in memory what you've got is",
    "start": "2787579",
    "end": "2792770"
  },
  {
    "text": "something that is just as fast as code that you wrote that's compiled reflection does have",
    "start": "2792770",
    "end": "2799490"
  },
  {
    "text": "more power it just does but expressions capture a lot of what reflection can do so they're relay",
    "start": "2799490",
    "end": "2806400"
  },
  {
    "text": "they work hand in hand but there are reasons to use one over another also got",
    "start": "2806400",
    "end": "2813180"
  },
  {
    "text": "to keep in mind that c-sharp does compiler magic its compiler does magic",
    "start": "2813180",
    "end": "2818340"
  },
  {
    "text": "to make your life easier let's take this for example so we've got two different",
    "start": "2818340",
    "end": "2826230"
  },
  {
    "text": "things we have a function and an expression that represents that function and we call combined strings we've got",
    "start": "2826230",
    "end": "2832560"
  },
  {
    "text": "to combine strings and basically we just take in two strings and return those strings concatenated right same code it",
    "start": "2832560",
    "end": "2838590"
  },
  {
    "text": "looks the same it behaves the same right but so let's say okay well alright we",
    "start": "2838590",
    "end": "2844560"
  },
  {
    "text": "should be able to use the make binary expression we should be able to say expression type dot add right here right",
    "start": "2844560",
    "end": "2850350"
  },
  {
    "text": "and then give it the string parameter one and string parameter to it nope can't do that because exception the",
    "start": "2850350",
    "end": "2856680"
  },
  {
    "text": "binary operator add is not defined for the type system string and system string well what the heck's going on I just did",
    "start": "2856680",
    "end": "2862080"
  },
  {
    "text": "it I just did that one but under the hood C sharps doing magic this one if",
    "start": "2862080",
    "end": "2867660"
  },
  {
    "text": "you looked at this expression inside of link pad if you broke it down an expression by a link pad a great way to",
    "start": "2867660",
    "end": "2872940"
  },
  {
    "text": "if you call the dump method on that expression you could see all the little component pieces link pad is awesome and if you look at this thing under the hood",
    "start": "2872940",
    "end": "2880140"
  },
  {
    "text": "and a debugger or whatever or just break it down and write it to the console this doesn't use a bad it uses string ducking",
    "start": "2880140",
    "end": "2887040"
  },
  {
    "text": "cat it actually converts this into a method call because under the hood what's actually happening is string plus",
    "start": "2887040",
    "end": "2892320"
  },
  {
    "text": "one string one clustering to is actually just using string concatenation doing",
    "start": "2892320",
    "end": "2898710"
  },
  {
    "text": "manage the magic sorry another thing is that conversions have to be managed",
    "start": "2898710",
    "end": "2903960"
  },
  {
    "text": "explicitly if you pass an employee object into a function that expects an object just an object right it will just",
    "start": "2903960",
    "end": "2912390"
  },
  {
    "text": "work right c-sharp you don't have to convert that you don't have to cast it to an object it is an object c-sharp knows this the compiler knows this but",
    "start": "2912390",
    "end": "2918930"
  },
  {
    "text": "under the hood is actually is casting it to an object well if you do this in expressions where you pass in an",
    "start": "2918930",
    "end": "2925650"
  },
  {
    "text": "employee where you're supposed to be passing in an object what will happen is the expression won't work it'll it will",
    "start": "2925650",
    "end": "2931680"
  },
  {
    "text": "throw an exception and say no these expecting of type objects so then you actually have to explicitly use",
    "start": "2931680",
    "end": "2936690"
  },
  {
    "text": "expression dot cast or something actually cast it to type object so conversions so conversions have to be",
    "start": "2936690",
    "end": "2943640"
  },
  {
    "text": "handled explicitly just a couple of things as you're starting to use expressions you start as you're starting",
    "start": "2943640",
    "end": "2949070"
  },
  {
    "text": "to experiment with them these are the kinds of things that you'll encounter so my favorite way to start is to",
    "start": "2949070",
    "end": "2955550"
  },
  {
    "text": "experiment I've got those dotnet fiddles out there there on the TWiT there on the",
    "start": "2955550",
    "end": "2960560"
  },
  {
    "text": "tweeter as my boss says they're on the Twitter they're on my website tonight's net so you can go there and get those",
    "start": "2960560",
    "end": "2966530"
  },
  {
    "text": "code samples copy/paste them around mess with them right that's what they experimenting is probably your best way",
    "start": "2966530",
    "end": "2971600"
  },
  {
    "text": "to learn more about expressions just using the API learning about its capabilities what it's able to do is",
    "start": "2971600",
    "end": "2977869"
  },
  {
    "text": "gonna be your best tool link pad again I love that tool link pad net one of the",
    "start": "2977869",
    "end": "2984200"
  },
  {
    "text": "versions is free it is worth every penny of the 50 bucks that you pay to get autocomplete and some other features if",
    "start": "2984200",
    "end": "2990920"
  },
  {
    "text": "you want to debugger and stuff like that really useful tool and then Google the expression API is covered well in Google",
    "start": "2990920",
    "end": "2997580"
  },
  {
    "text": "Stack Overflow it just is because lots of people use them we all use them even if we never knew it before now we know it I'm gonna do what we do best which is",
    "start": "2997580",
    "end": "3005109"
  },
  {
    "text": "just use intellisense use intellisense to your advantage it's there for a reason and did I mention that you should",
    "start": "3005109",
    "end": "3011200"
  },
  {
    "text": "experiment if you want to mess with expressions the best way to get started with them my opinion anyways thank you",
    "start": "3011200",
    "end": "3017410"
  },
  {
    "text": "very much as usual I always say this spiel at the end of my talks just because I leave here today I'll fly back",
    "start": "3017410",
    "end": "3022780"
  },
  {
    "text": "to st. Louis tomorrow doesn't mean this conversation has to end find me on Twitter you have my email address and my",
    "start": "3022780",
    "end": "3027910"
  },
  {
    "text": "github all that stuff is on my website Schneids dotnet I'm always happy to answer questions and if you if you have",
    "start": "3027910",
    "end": "3033850"
  },
  {
    "text": "questions or if you have a specific scenario or whatever you know reach out to me I try to be responsive at least",
    "start": "3033850",
    "end": "3039520"
  },
  {
    "text": "you know so nothing more to say I hope you've enjoyed this conference in DC of course throws an amazing event I hope",
    "start": "3039520",
    "end": "3046420"
  },
  {
    "text": "you found it valuable and thanks for coming thank you very much",
    "start": "3046420",
    "end": "3050820"
  },
  {
    "text": "[Applause]",
    "start": "3051950",
    "end": "3056320"
  }
]