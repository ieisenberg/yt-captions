[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "okay i'm on uh thank you very much for coming uh thank you very much everyone for coming",
    "start": "8000",
    "end": "13200"
  },
  {
    "text": "after especially the depending on which social event you went to last night uh there's always a concern about being the first talk at nine o'clock in the",
    "start": "13200",
    "end": "19119"
  },
  {
    "text": "morning depending on how good the party was last night i know the main event is tonight so i hope to see everyone there",
    "start": "19119",
    "end": "25680"
  },
  {
    "text": "i have a a slider qr code up here we are going to have a little qa session at the end so",
    "start": "25680",
    "end": "32960"
  },
  {
    "text": "uh just a quick second scan that with your phones if you want to ask any questions i know there's people in the overflow room and things like that as well so if you do have any questions",
    "start": "32960",
    "end": "39280"
  },
  {
    "text": "throughout i will be picking up the slido at the end there so",
    "start": "39280",
    "end": "45120"
  },
  {
    "start": "43000",
    "end": "74000"
  },
  {
    "text": "first of all is everyone in the right room was this the talk title you were expecting to see",
    "start": "45120",
    "end": "50399"
  },
  {
    "text": "i'm going to be talking today about how i solved a problem with big",
    "start": "50399",
    "end": "55920"
  },
  {
    "text": "data and i'm talking about something called a bloom filter which is a probabilistic",
    "start": "55920",
    "end": "60960"
  },
  {
    "text": "data structure and allows you to do amazing things with huge amounts of data with virtually no storage requirements",
    "start": "60960",
    "end": "67680"
  },
  {
    "text": "and virtually no processing requirements and i kind of built this problem that i",
    "start": "67680",
    "end": "73040"
  },
  {
    "text": "had myself and it all started back in around about 2014 when i built a little project and",
    "start": "73040",
    "end": "79360"
  },
  {
    "start": "74000",
    "end": "147000"
  },
  {
    "text": "it was a little project to ingest telemetry from web browsers i was reading about all these cool standards",
    "start": "79360",
    "end": "86159"
  },
  {
    "text": "and all these cool features that exist in web browsers that would allow the actual browser of a visitor to your",
    "start": "86159",
    "end": "92640"
  },
  {
    "text": "website to send telemetry back to you now the telemetry could be about the performance of your site it could be",
    "start": "92640",
    "end": "98960"
  },
  {
    "text": "about the availability of your site do you have some configuration or technical errors happening is there a security",
    "start": "98960",
    "end": "104560"
  },
  {
    "text": "problem on the page and of course as a security person for those that don't know me",
    "start": "104560",
    "end": "110079"
  },
  {
    "text": "the information about security incidents and security problems happening on the page was a really big thing that i was",
    "start": "110079",
    "end": "116719"
  },
  {
    "text": "interested in so i'm like wow if people come into my website and the browser's like there's some kind of security problem i really want to know about that",
    "start": "116719",
    "end": "123520"
  },
  {
    "text": "and all of this is native functionality built into the web browser you don't have to deploy any agents or libraries",
    "start": "123520",
    "end": "130080"
  },
  {
    "text": "or any code or anything like that everything that i'm about to talk about is native functionality built into the",
    "start": "130080",
    "end": "135360"
  },
  {
    "text": "web browser now the biggest thing that i was focusing on was mitigating and detecting a very",
    "start": "135360",
    "end": "142239"
  },
  {
    "text": "nasty type of attack so i wanted all of this telemetry to come back if something",
    "start": "142239",
    "end": "147920"
  },
  {
    "start": "147000",
    "end": "214000"
  },
  {
    "text": "like this had happened on my site now there's a very nasty type of attack called cross-site scripting where you",
    "start": "147920",
    "end": "153440"
  },
  {
    "text": "end up with some javascript in your page that you don't want there and shouldn't have been there",
    "start": "153440",
    "end": "159519"
  },
  {
    "text": "now of course we can all look at this script tag and say well i'm pretty confident that i don't want that",
    "start": "159519",
    "end": "164800"
  },
  {
    "text": "anywhere on my site but the browser doesn't know that the browser sees a valid script tag and the browser will load the script and run the script",
    "start": "164800",
    "end": "170959"
  },
  {
    "text": "that's its job now cross-site scripting",
    "start": "170959",
    "end": "176000"
  },
  {
    "text": "could happen because maybe we forgot to sanitize an output maybe we're an e-commerce site and we have a review",
    "start": "176000",
    "end": "181680"
  },
  {
    "text": "section at the bottom right and sounds like oh this product is fantastic open script tag off we go and then the comment is constantly loaded into the",
    "start": "181680",
    "end": "187680"
  },
  {
    "text": "page the script will constantly run into the page i see this very frequently as well with query string parameters right like you",
    "start": "187680",
    "end": "193760"
  },
  {
    "text": "know we're searching for a product and usually the page if you search for you know car we'll come back and say you",
    "start": "193760",
    "end": "199280"
  },
  {
    "text": "search for car now if i search for car open script tag source off we go the page will contain",
    "start": "199280",
    "end": "205120"
  },
  {
    "text": "the script tag so there's loads of different ways that attackers can do this they can get hostile javascript into the page",
    "start": "205120",
    "end": "212000"
  },
  {
    "text": "now we've seen a variety of different attacks over the year over the years that do this and in",
    "start": "212000",
    "end": "217840"
  },
  {
    "start": "214000",
    "end": "273000"
  },
  {
    "text": "kind of like 2014 onwards coinhive was becoming really popular coin high for",
    "start": "217840",
    "end": "223040"
  },
  {
    "text": "those that don't know is a crypto mining library in javascript now the idea",
    "start": "223040",
    "end": "228640"
  },
  {
    "text": "it was a legitimate service the idea was you don't want to run ads and privacy invasive things on your website you load",
    "start": "228640",
    "end": "234080"
  },
  {
    "text": "the current hive library and you say to your visitors look you can come to my website you don't have to see any ads but i'm going to borrow some cpu cycles",
    "start": "234080",
    "end": "240640"
  },
  {
    "text": "i'm just going to mine a tiny little bit of monero for myself okay maybe we could attempt to do that",
    "start": "240640",
    "end": "246480"
  },
  {
    "text": "in some you know legitimate and transparent way but what the attackers realized was if i'm an attacker and i can get my coin hive library onto your",
    "start": "246480",
    "end": "253200"
  },
  {
    "text": "website all of your visitors mine cryptocurrency for me and we had cryptojacking so this was a really big",
    "start": "253200",
    "end": "259199"
  },
  {
    "text": "popular thing because it was such an easy thing to do find across that scripting vector stick",
    "start": "259199",
    "end": "264720"
  },
  {
    "text": "the javascript library onto as many websites as you can and sit back and watch your monero wallet",
    "start": "264720",
    "end": "271120"
  },
  {
    "text": "now another one more recently right through to present day is a group called magekart mage cart have been doing",
    "start": "271120",
    "end": "278080"
  },
  {
    "start": "273000",
    "end": "357000"
  },
  {
    "text": "very similar attacks cross-site scripting attacks how can i get my javascript onto your website but the javascript they inject is very",
    "start": "278080",
    "end": "284240"
  },
  {
    "text": "very simple it just listens for key presses and sends them as xhr requests to the",
    "start": "284240",
    "end": "290080"
  },
  {
    "text": "attackers and what they do when they're reading each one of those key presses is",
    "start": "290080",
    "end": "295120"
  },
  {
    "text": "they're hoping that they're on a payment page so you go to a website put some products in your basket go to the payment page",
    "start": "295120",
    "end": "301280"
  },
  {
    "text": "and you type in your full card details your full card number expiry the cvv the security code and all of these get",
    "start": "301280",
    "end": "308320"
  },
  {
    "text": "shipped off to the attacker because they're just being ajaxed out the back and you know one week one month from now",
    "start": "308320",
    "end": "314400"
  },
  {
    "text": "you will get a very large surprise transaction on your credit card when the attackers cash out all of the cards that",
    "start": "314400",
    "end": "319440"
  },
  {
    "text": "they've stolen so there's lots of different bad things that an attacker can do once they get",
    "start": "319440",
    "end": "325919"
  },
  {
    "text": "javascript onto your page now the problem is the browser doesn't know that it wasn't supposed to be there",
    "start": "325919",
    "end": "331919"
  },
  {
    "text": "if the browser sees a valid script tag it will load it and it will run it and we have an additional defense",
    "start": "331919",
    "end": "338560"
  },
  {
    "text": "mechanism yes we should sanitize our outputs there are ways to mitigate cross-site scripting in the application",
    "start": "338560",
    "end": "343759"
  },
  {
    "text": "but in security we like to practice something called defense in depth which is having more than one solution to a",
    "start": "343759",
    "end": "348960"
  },
  {
    "text": "problem we need more than one mitigation what if we do accidentally let this one hostile piece of javascript slip through",
    "start": "348960",
    "end": "355600"
  },
  {
    "text": "into the page there's something in the web browser that can save you called content",
    "start": "355600",
    "end": "360960"
  },
  {
    "start": "357000",
    "end": "387000"
  },
  {
    "text": "security policy now content security policy",
    "start": "360960",
    "end": "366000"
  },
  {
    "text": "is a very simple http response header right so you set it on your page you have it here alongside other response",
    "start": "366000",
    "end": "373039"
  },
  {
    "text": "headers that you probably recognize and you deliver it to the browser with the page so you say here is the page and",
    "start": "373039",
    "end": "379680"
  },
  {
    "text": "here is my content security policy header that contains the policy and you have to write a simple policy for the",
    "start": "379680",
    "end": "386800"
  },
  {
    "text": "browser to enforce on that page now the thing that most people want to control on the page is",
    "start": "386800",
    "end": "392319"
  },
  {
    "start": "387000",
    "end": "469000"
  },
  {
    "text": "javascript because it's the most dangerous thing you can control images and styles and everything else fonts",
    "start": "392319",
    "end": "398560"
  },
  {
    "text": "most people are interested in controlling javascript so you would deliver a content security",
    "start": "398560",
    "end": "404639"
  },
  {
    "text": "policy header like this now this is a little bit simple it's assuming that i only intend to load script from myself",
    "start": "404639",
    "end": "410400"
  },
  {
    "text": "which just means my domain so scotthelm.uk my my case and i also load jquery from the jquery cdm",
    "start": "410400",
    "end": "418639"
  },
  {
    "text": "and with this simple piece of information the browser now knows what i expect to happen i expect that i will",
    "start": "418639",
    "end": "425759"
  },
  {
    "text": "know javascript from these two places and therefore script that loads from any other place",
    "start": "425759",
    "end": "431599"
  },
  {
    "text": "was not supposed to happen so if we think about the script tag i looked at just a minute ago that was loaded from evil.com the browser would see that",
    "start": "431599",
    "end": "438240"
  },
  {
    "text": "script tag and say well evil.com isn't on the list this wasn't supposed to happen so i'm not going to load it",
    "start": "438240",
    "end": "445680"
  },
  {
    "text": "and immediately the attack is neutralized if it was a key logger the key logger no longer runs if it was a",
    "start": "445680",
    "end": "450720"
  },
  {
    "text": "crypto miner the crypto miner no longer runs whatever the script did it is now",
    "start": "450720",
    "end": "456080"
  },
  {
    "text": "fully neutralized and this is a really powerful protection and a fantastic kind of last line of",
    "start": "456080",
    "end": "462080"
  },
  {
    "text": "defense right we're literally doing this in the browser this is the last line of defense that we have",
    "start": "462080",
    "end": "469280"
  },
  {
    "start": "469000",
    "end": "595000"
  },
  {
    "text": "now as i said you can control everything with content security policy you can set a default position for content to come",
    "start": "469280",
    "end": "475360"
  },
  {
    "text": "from my own site and then you can expand upon that for scripts styles images",
    "start": "475360",
    "end": "481039"
  },
  {
    "text": "you can also control where data goes to with things like the connect source or form action they control not only where",
    "start": "481039",
    "end": "487360"
  },
  {
    "text": "resources are loaded from into the page but where data can be sent to from the page",
    "start": "487360",
    "end": "492560"
  },
  {
    "text": "so if we think in the context of something like mage cart that i just explained where the attacker gets scripted to the page they listen to the",
    "start": "492560",
    "end": "498960"
  },
  {
    "text": "key press events and they're ajaxing them out the back i presume that you don't have a connect",
    "start": "498960",
    "end": "505360"
  },
  {
    "text": "source set that allows data to be sent anywhere and generally it's going to be to myself or some api that i use and",
    "start": "505360",
    "end": "511680"
  },
  {
    "text": "again you can prevent even if you do somehow end up with script in the page you can stop it from excel trading data",
    "start": "511680",
    "end": "518839"
  },
  {
    "text": "so content security policy is super powerful and super flexible you can do",
    "start": "518839",
    "end": "525120"
  },
  {
    "text": "pretty much anything that you would like with it but there's a bit of a bit of a kind of a gap here because like",
    "start": "525120",
    "end": "531440"
  },
  {
    "text": "i said this is taking place in the browser so i have my page and let's say all of you load the page you",
    "start": "531440",
    "end": "538480"
  },
  {
    "text": "also receive the policy and your browser looks at the policy and says oh that script tag we just looked at evil.com it's in the page",
    "start": "538480",
    "end": "545839"
  },
  {
    "text": "well according to the policy it shouldn't be so we'll block it and we won't load it",
    "start": "545839",
    "end": "550959"
  },
  {
    "text": "and all of this is happening locally in your client in your browser and i'm sat here as the operator of this",
    "start": "550959",
    "end": "558080"
  },
  {
    "text": "website and i don't know that just happened because it happened in your client it happened in your browser",
    "start": "558080",
    "end": "564399"
  },
  {
    "text": "so content security policy is typically viewed like this as the solution to the problem but i don't think that it actually is",
    "start": "564399",
    "end": "570720"
  },
  {
    "text": "the solution to the problem because the problem has actually not been solved the hostile script is still in my page",
    "start": "570720",
    "end": "576880"
  },
  {
    "text": "now the solution to the problem is for me to remove the script from the page we shouldn't have it there browser support",
    "start": "576880",
    "end": "582160"
  },
  {
    "text": "for content security policy is great there is like a 98 chance that all of your browsers will support it and will",
    "start": "582160",
    "end": "588720"
  },
  {
    "text": "block the script so we could say well you know we've pretty much solved the problem but i don't believe that we have and in",
    "start": "588720",
    "end": "594880"
  },
  {
    "text": "content security policy there is one more feature that you can turn on called report uri",
    "start": "594880",
    "end": "601680"
  },
  {
    "start": "595000",
    "end": "652000"
  },
  {
    "text": "and this is where i shamelessly stole the name of my company from because i'm terrible at naming things so i called my company report uri",
    "start": "601680",
    "end": "608560"
  },
  {
    "text": "and what you can do when you specify the report uri directive is you can say",
    "start": "608560",
    "end": "614000"
  },
  {
    "text": "when something happens when a violation happens something happens that the policy prohibited and you blocked this",
    "start": "614000",
    "end": "620399"
  },
  {
    "text": "thing i would like you to tell me i would like you to call out to this endpoint",
    "start": "620399",
    "end": "625600"
  },
  {
    "text": "and deliver a violation report such a small json payload and this to me is the actual solution to",
    "start": "625600",
    "end": "633760"
  },
  {
    "text": "the problem because your browser has blocked the nasty thing the key logger the malware the crypto miner whatever it was but",
    "start": "633760",
    "end": "640399"
  },
  {
    "text": "until i actually find out and identify how that script got in the page and solved the problem and remove the script",
    "start": "640399",
    "end": "647600"
  },
  {
    "text": "my view is that the problem still exists even though your browser may mitigate the attack so when you enable report uri you can",
    "start": "647600",
    "end": "654000"
  },
  {
    "text": "specify a location to send these reports and these are the reports",
    "start": "654000",
    "end": "659519"
  },
  {
    "text": "that we as a service process and we ingest through all of our customers sites and there are many other pieces of",
    "start": "659519",
    "end": "666240"
  },
  {
    "text": "telemetry similar to this that the browser can send but content security policy violation reports are by far the",
    "start": "666240",
    "end": "673200"
  },
  {
    "text": "number one piece of data that we ingest and it's a very simple json payload now upon receiving",
    "start": "673200",
    "end": "679440"
  },
  {
    "text": "this json payload you could look at this and think right okay so this particular visitor whoever they were was on this",
    "start": "679440",
    "end": "684959"
  },
  {
    "text": "page the violated directive was script source so straight away i know this isn't good because there's a piece of script there",
    "start": "684959",
    "end": "690720"
  },
  {
    "text": "that shouldn't be there it gives you the original policy to work with so you can see what the browser was",
    "start": "690720",
    "end": "696720"
  },
  {
    "text": "working with what policy did we deliver perhaps you've changed it since you're going to look at this report at some",
    "start": "696720",
    "end": "701839"
  },
  {
    "text": "point in the future and then it tells you the thing that was blocked now if i received this report and this",
    "start": "701839",
    "end": "708079"
  },
  {
    "text": "was a genuine report i would immediately spring to action because this is not good right we've got",
    "start": "708079",
    "end": "713440"
  },
  {
    "text": "hostile script loading from what is very clearly a hostile domain trying to do hostile things",
    "start": "713440",
    "end": "720240"
  },
  {
    "text": "now when we started the service back in 2014 we were receiving a reasonably small",
    "start": "720240",
    "end": "726959"
  },
  {
    "text": "volume of these json payloads so in a in a good month we would process",
    "start": "726959",
    "end": "733360"
  },
  {
    "start": "729000",
    "end": "846000"
  },
  {
    "text": "somewhere in the region of one million of these violation reports and small numbers of other pieces of telemetry but",
    "start": "733360",
    "end": "739279"
  },
  {
    "text": "the csp violation reports are the number one thing people are looking for one million json payloads inbound",
    "start": "739279",
    "end": "746639"
  },
  {
    "text": "in a month this isn't too difficult right and i made some very early infrastructure decisions around the fact",
    "start": "746639",
    "end": "752480"
  },
  {
    "text": "that we weren't processing very many of these things and then organizations and website operators started to realize well",
    "start": "752480",
    "end": "758800"
  },
  {
    "text": "actually you know it might be cool to know if we have hostile javascript so we'll sign up and we'll do this thing",
    "start": "758800",
    "end": "763839"
  },
  {
    "text": "and of course as time goes by the amount of reports that we process goes up so",
    "start": "763839",
    "end": "769120"
  },
  {
    "text": "within a year we went from processing a million json payloads a month to a million a day this is still what i",
    "start": "769120",
    "end": "775680"
  },
  {
    "text": "would say is fairly reasonable right one million json payloads process them into a database per day not too bad but",
    "start": "775680",
    "end": "782480"
  },
  {
    "text": "of course things continue and in 2018 for the first time ever we hit a million csp reports coming in",
    "start": "782480",
    "end": "790160"
  },
  {
    "text": "from our customers in an hour now last week when i was doing the final",
    "start": "790160",
    "end": "795760"
  },
  {
    "text": "prep for this this talk is brand new when i was doing the final prep for this talk i went and got our actual live",
    "start": "795760",
    "end": "802399"
  },
  {
    "text": "production statistics from last week so last week on average",
    "start": "802399",
    "end": "807760"
  },
  {
    "text": "on a weekday because we're much busier in the week when e-commerce websites are busy and active we process 1 million of",
    "start": "807760",
    "end": "814320"
  },
  {
    "text": "those json payloads on average every 15.4 seconds",
    "start": "814320",
    "end": "820000"
  },
  {
    "text": "now this has required some quite significant changes to our infrastructure over the years i made",
    "start": "820000",
    "end": "825760"
  },
  {
    "text": "some very big mistakes in my decisions early on because i hadn't ever anticipated that",
    "start": "825760",
    "end": "830880"
  },
  {
    "text": "the service would grow to this kind of scale so we've had to kind of you know re-architect many things and",
    "start": "830880",
    "end": "836480"
  },
  {
    "text": "innovate our way out of problems that i created when i founded the company and made some very simple decisions and",
    "start": "836480",
    "end": "843120"
  },
  {
    "text": "basically didn't you know didn't presume it would ever grow this big so handling this kind of volume brought",
    "start": "843120",
    "end": "849360"
  },
  {
    "text": "with it and still brings with it because it's continuing to grow lots of different problems for us now",
    "start": "849360",
    "end": "854880"
  },
  {
    "text": "one of the big things that we do is we normalize those json payloads on the way in we're trying to",
    "start": "854880",
    "end": "860639"
  },
  {
    "text": "basically stack them as much as possible different browser vendors and different versions of the same browser have their",
    "start": "860639",
    "end": "866160"
  },
  {
    "text": "own slight little quirks on how they build the reports so we try to normalize them as much as possible using our",
    "start": "866160",
    "end": "873040"
  },
  {
    "text": "experience from seeing these reports are so long our data storage mechanism is actually",
    "start": "873040",
    "end": "878399"
  },
  {
    "text": "as your table storage so it's like the predecessor to cosmos if any of you use that",
    "start": "878399",
    "end": "883680"
  },
  {
    "text": "now we create little time series buckets every hour for your reports and then in the ui when we're querying them and",
    "start": "883680",
    "end": "889600"
  },
  {
    "text": "building you know a report on a given period of time it's very simple for us to pull out the",
    "start": "889600",
    "end": "894720"
  },
  {
    "text": "reports for the time period that you specified so this makes pulling the data out of table storage very easy for us",
    "start": "894720",
    "end": "902399"
  },
  {
    "text": "we de-duplicate similar reports because sometimes browsers will have very slightly different interpretations of",
    "start": "902399",
    "end": "908720"
  },
  {
    "text": "what happened some will include query strings some won't so we try and look at what is actually being reported rather",
    "start": "908720",
    "end": "914639"
  },
  {
    "text": "than the specific payload and group them all together so we do as much as we can to simplify",
    "start": "914639",
    "end": "920639"
  },
  {
    "text": "the the json that's coming in now the problem with csp that most of our",
    "start": "920639",
    "end": "926000"
  },
  {
    "text": "customers face is that it's actually quite noisy sometimes let's say a visitor goes to your website and they",
    "start": "926000",
    "end": "932000"
  },
  {
    "text": "have a browser extension installed and the browser extension changes the",
    "start": "932000",
    "end": "937360"
  },
  {
    "text": "font on the page because they like a different phone fair enough the browser extension when it loads the",
    "start": "937360",
    "end": "944079"
  },
  {
    "text": "font is supposed to check to see if there's a content security policy and then make an addition to the csp",
    "start": "944079",
    "end": "950639"
  },
  {
    "text": "to say i'm going to load a font from wherever now most browser extensions don't do things like this and they'll just inject",
    "start": "950639",
    "end": "956160"
  },
  {
    "text": "the font into the page and then the font will trigger the csp because that font source wasn't allowed",
    "start": "956160",
    "end": "961600"
  },
  {
    "text": "and we get a report so we do a lot of work around trying to just drop these before we process them",
    "start": "961600",
    "end": "967360"
  },
  {
    "text": "because we look at it right at our edge and say this looks like it was triggered by a browser extension let's just throw",
    "start": "967360",
    "end": "972639"
  },
  {
    "text": "it away as fast as we can and then we don't have to put it through our processing pipeline but one of the biggest problems that we",
    "start": "972639",
    "end": "978079"
  },
  {
    "text": "have is this last one and this was really the problem that i was trying to solve because",
    "start": "978079",
    "end": "983839"
  },
  {
    "text": "right now and again last week when i checked we have 6.4 terabytes of json in table storage and we only have a 90-day",
    "start": "983839",
    "end": "991040"
  },
  {
    "text": "retention policy and one of the most common things that our customers ask us and want to know is alerting for a new",
    "start": "991040",
    "end": "998959"
  },
  {
    "text": "event a new csp violation that we have not seen before so a json",
    "start": "998959",
    "end": "1004480"
  },
  {
    "text": "payload comes in and they basically want to know have we seen this report before if this is the first time that we've",
    "start": "1004480",
    "end": "1009839"
  },
  {
    "text": "ever seen this thing we want some kind of special notification now this is very difficult to do even if",
    "start": "1009839",
    "end": "1017040"
  },
  {
    "text": "we were to just query over table storage because we have huge quantities of data",
    "start": "1017040",
    "end": "1022480"
  },
  {
    "text": "so for every single report coming in if we were to look into the database and say have we ever seen this report before and we're processing in the region of",
    "start": "1022480",
    "end": "1028558"
  },
  {
    "text": "like a peak about sixty eight thousand json payloads a second it becomes very difficult to do that but then when you factor in that we only",
    "start": "1028559",
    "end": "1035520"
  },
  {
    "text": "have a 90-day retention and we do actually delete data at 90 days it becomes impossible to answer this question because the only question we",
    "start": "1035520",
    "end": "1042079"
  },
  {
    "text": "can kind of really answer is have we seen this report before in the last 90 days because we don't have any",
    "start": "1042079",
    "end": "1048000"
  },
  {
    "text": "visibility going further back than that so it sounded like a really simple",
    "start": "1048000",
    "end": "1054000"
  },
  {
    "start": "1052000",
    "end": "1104000"
  },
  {
    "text": "question and it actually proved to be really difficult for us to answer fully this",
    "start": "1054000",
    "end": "1060559"
  },
  {
    "text": "question have we seen this thing this report before",
    "start": "1060559",
    "end": "1066559"
  },
  {
    "text": "so i started investigating for solutions like how can i how can we do this like how could we possibly query to see if we",
    "start": "1066559",
    "end": "1072799"
  },
  {
    "text": "have a piece of data that we don't have right because the 90-day retention makes this virtually impossible and how",
    "start": "1072799",
    "end": "1078240"
  },
  {
    "text": "can we do this at the volume and scale of our inbound reports because we don't we don't queue reports",
    "start": "1078240",
    "end": "1084559"
  },
  {
    "text": "and process them later we process them in what we refer to as near real time when a json payload comes in we have it",
    "start": "1084559",
    "end": "1089840"
  },
  {
    "text": "in your dashboard on average in about 12 seconds so you know we want to be able to do",
    "start": "1089840",
    "end": "1095120"
  },
  {
    "text": "this quickly and immediately as the reports are coming in and this is where i arrived at a data",
    "start": "1095120",
    "end": "1102480"
  },
  {
    "text": "structure called a bloom filter now a bloom filter is what we call a",
    "start": "1102480",
    "end": "1107840"
  },
  {
    "start": "1104000",
    "end": "1196000"
  },
  {
    "text": "probabilistic data structure and i'll explain the probabilistic term later but for now i'm going to show you",
    "start": "1107840",
    "end": "1114160"
  },
  {
    "text": "how a bloom filter operates so as we can see here i have a balloon filter i've called it bloom",
    "start": "1114160",
    "end": "1120400"
  },
  {
    "text": "and it is essentially a single dimensional array of bits that are all initialized to zero",
    "start": "1120400",
    "end": "1126960"
  },
  {
    "text": "we have the width value there of 10 you can see the index for each bit and we're going to insert an item into",
    "start": "1126960",
    "end": "1134960"
  },
  {
    "text": "the filter so with a balloon filter you take any items that you have whatever they may be for us those json payloads",
    "start": "1134960",
    "end": "1141600"
  },
  {
    "text": "and you can insert them into the filter to later query them out now to insert something into the filter",
    "start": "1141600",
    "end": "1147600"
  },
  {
    "text": "we need to set bits at appropriate locations and to determine the location we use a hash function",
    "start": "1147600",
    "end": "1153520"
  },
  {
    "text": "right now i have two hash functions that i'm going to use to insert so k equals two i'm going to use two hash",
    "start": "1153520",
    "end": "1159760"
  },
  {
    "text": "functions to insert an item into this filter my filter is",
    "start": "1159760",
    "end": "1165039"
  },
  {
    "text": "very small for demonstration purposes bloom filters will typically be much wider but they are still only a single",
    "start": "1165039",
    "end": "1171120"
  },
  {
    "text": "dimension so for me k equals two because the filter is very very small cable increases the size of the filter",
    "start": "1171120",
    "end": "1177280"
  },
  {
    "text": "increases and we have here as you can see hash function one and hash function two and it would go all the way up to",
    "start": "1177280",
    "end": "1183120"
  },
  {
    "text": "hash function k however many you have so a csp report will come into our service one of these",
    "start": "1183120",
    "end": "1188320"
  },
  {
    "text": "json payloads will come into our service and we need to insert it into the filter so that it's in there and we can query",
    "start": "1188320",
    "end": "1194000"
  },
  {
    "text": "against it later so inserting an item is relatively simple i'm going to insert item a any arbitrary item that you want",
    "start": "1194000",
    "end": "1201120"
  },
  {
    "start": "1196000",
    "end": "1473000"
  },
  {
    "text": "to put into the filter so what we do is we take the first hash function hash function one we're gonna hash item a",
    "start": "1201120",
    "end": "1209200"
  },
  {
    "text": "we modulus the result with the width to bring us into range to give us an index in this case two",
    "start": "1209200",
    "end": "1215440"
  },
  {
    "text": "so we now know that we're going to need to set the bit at index two and because we have two hash functions we repeat",
    "start": "1215440",
    "end": "1221200"
  },
  {
    "text": "this again with the second hash function so we take the second hash function hash item a modulus it with the width to give",
    "start": "1221200",
    "end": "1227200"
  },
  {
    "text": "us the index at four so the bloom filter will now look like this we've set the two bits",
    "start": "1227200",
    "end": "1234400"
  },
  {
    "text": "at the appropriate locations in the filter so then the next report comes in right",
    "start": "1234400",
    "end": "1240000"
  },
  {
    "text": "we've now got item b so our bloom filter still has those two bits set for item a they're set in the in the array and item",
    "start": "1240000",
    "end": "1246720"
  },
  {
    "text": "b comes in the next csp report we want to insert it into the filter same process right we take the first hash",
    "start": "1246720",
    "end": "1252240"
  },
  {
    "text": "function we hash the item mod it to the width it gives us an index of six we also take the second hash function",
    "start": "1252240",
    "end": "1258320"
  },
  {
    "text": "and do it again it gives us an index of nine so we set the bits right there's",
    "start": "1258320",
    "end": "1263360"
  },
  {
    "text": "bit six being set in the filter and there is bit nine set in the filter",
    "start": "1263360",
    "end": "1269440"
  },
  {
    "text": "so these two items have now been inserted into our bloom filter and the bloom filter looks like this",
    "start": "1269440",
    "end": "1276799"
  },
  {
    "text": "now of course the usefulness of the filter is being able to query against it to say like have we seen this item before",
    "start": "1276799",
    "end": "1283679"
  },
  {
    "text": "so let's say the next csp report comes in item c some other different item that we have never seen before and we want to",
    "start": "1283679",
    "end": "1290559"
  },
  {
    "text": "query against the filter to say have we seen this thing item c so",
    "start": "1290559",
    "end": "1296000"
  },
  {
    "text": "we repeat most of the process of the insertion we take the first hash function we mod it with the width gives us the",
    "start": "1296000",
    "end": "1301679"
  },
  {
    "text": "index of four to look up and we can see that the index of 4 the bit was set so",
    "start": "1301679",
    "end": "1306960"
  },
  {
    "text": "it tells us 1 the bit was set then we take the second hash function and we hash item c mod it with the width index",
    "start": "1306960",
    "end": "1313520"
  },
  {
    "text": "7 look it up the value is 0. we can now say",
    "start": "1313520",
    "end": "1319760"
  },
  {
    "text": "that we have definitely not seen this item before ever",
    "start": "1319760",
    "end": "1325200"
  },
  {
    "text": "because if we had seen item c before then bit at location 7 would have been",
    "start": "1325200",
    "end": "1330720"
  },
  {
    "text": "set in the filter so because one of the bits was not set or any of the bits or all of the bits are not set you can see",
    "start": "1330720",
    "end": "1337120"
  },
  {
    "text": "we have definitely not seen this thing before this is absolutely brand new because if we had seen it before and",
    "start": "1337120",
    "end": "1343039"
  },
  {
    "text": "we'd done the insertion process with item c the bitter index seven would be set in the filter",
    "start": "1343039",
    "end": "1348880"
  },
  {
    "text": "so this is a very quick way because the balloon filter is clearly small enough to be stored in memory",
    "start": "1348880",
    "end": "1353919"
  },
  {
    "text": "makes it very fast to query against this is a very quick way to say we have never seen this thing before now even if we",
    "start": "1353919",
    "end": "1360720"
  },
  {
    "text": "take the json and put the json in the database and then in 90 days from now we purge",
    "start": "1360720",
    "end": "1365760"
  },
  {
    "text": "the json from the database because the 90-day retention policy has passed we can still query against the filter",
    "start": "1365760",
    "end": "1372480"
  },
  {
    "text": "because now we would insert the bits at position seven to set item c and say we have now seen this item",
    "start": "1372480",
    "end": "1378960"
  },
  {
    "text": "one year from now if we perform this query it will still say we have seen this item before because we",
    "start": "1378960",
    "end": "1384640"
  },
  {
    "text": "would have set the bits so even long after we've purged the data no matter what our retention policy was",
    "start": "1384640",
    "end": "1391280"
  },
  {
    "text": "we could come back and query and know have we seen this item before",
    "start": "1391280",
    "end": "1397120"
  },
  {
    "text": "but of course the keynote looking through this may notice that we did say that bit4 was set",
    "start": "1397120",
    "end": "1402799"
  },
  {
    "text": "and bit4 was set because we inserted item a so now let's query a different item",
    "start": "1402799",
    "end": "1408480"
  },
  {
    "text": "right item a set the bits at two and four we query item d",
    "start": "1408480",
    "end": "1415120"
  },
  {
    "text": "so item d is another new item we've never seen it before and we're going to query the filter right we have",
    "start": "1415120",
    "end": "1421520"
  },
  {
    "text": "not inserted item d you've all been watching so the first hash function gives me an index of four i'm going to look up the",
    "start": "1421520",
    "end": "1427440"
  },
  {
    "text": "index at four the bit is set the bit was set from earlier when we inserted item a and then i'm going to take the second",
    "start": "1427440",
    "end": "1433360"
  },
  {
    "text": "hash function it gives me index nine and i look up index nine and the bit is",
    "start": "1433360",
    "end": "1438720"
  },
  {
    "text": "set the bit was set when we inserted item b and now we have the probabilistic nature of a balloon",
    "start": "1438720",
    "end": "1445600"
  },
  {
    "text": "filter being shown because there are things called hash collisions when we hash different items",
    "start": "1445600",
    "end": "1452400"
  },
  {
    "text": "they may of course yield the same index in the array to check so here because of a hash collision with",
    "start": "1452400",
    "end": "1458000"
  },
  {
    "text": "hash function one with item a earlier we've arrived at an index of four and because of another hash collision with",
    "start": "1458000",
    "end": "1463520"
  },
  {
    "text": "hash function two with item b from earlier we now believe",
    "start": "1463520",
    "end": "1468960"
  },
  {
    "text": "that this filter contains this item this is the probabilistic nature",
    "start": "1468960",
    "end": "1475919"
  },
  {
    "start": "1473000",
    "end": "1599000"
  },
  {
    "text": "of a bloom filter it is a probabilistic data structure and when you ask a",
    "start": "1475919",
    "end": "1481120"
  },
  {
    "text": "probabilistic data structure like a balloon filter and there are several more that we can talk about a question",
    "start": "1481120",
    "end": "1486400"
  },
  {
    "text": "you ask it the question is this item in the set of all items that you represent",
    "start": "1486400",
    "end": "1492720"
  },
  {
    "text": "so we insert all the reports into the filter and we say is this report in the set of all reports that we've ever",
    "start": "1492720",
    "end": "1498159"
  },
  {
    "text": "observed and a balloon filter can only give you two questions two answers to the question",
    "start": "1498159",
    "end": "1503200"
  },
  {
    "text": "but the first one is this definitely no",
    "start": "1503200",
    "end": "1508320"
  },
  {
    "text": "if one of those bits any of those bits all of those bits are not set we know that we have definitely 100",
    "start": "1508320",
    "end": "1515440"
  },
  {
    "text": "not seen this item before and that is a really crucial thing for us have we seen this report before no absolutely not you",
    "start": "1515440",
    "end": "1521840"
  },
  {
    "text": "need to treat this like the first time you've made the observation",
    "start": "1521840",
    "end": "1527200"
  },
  {
    "text": "now the other answer to the question have we seen this before is of course yes",
    "start": "1527200",
    "end": "1532640"
  },
  {
    "text": "but it's slightly different to yes because it's yes with a very small probability that this",
    "start": "1532640",
    "end": "1538799"
  },
  {
    "text": "is a false positive because as we just saw with item d you can query the item against the filter",
    "start": "1538799",
    "end": "1544880"
  },
  {
    "text": "and the bits could have been set by other items being placed in the filter so it is possible for a bloom filter to",
    "start": "1544880",
    "end": "1551279"
  },
  {
    "text": "give you a false positive but it's never ever possible to give you",
    "start": "1551279",
    "end": "1556320"
  },
  {
    "text": "a false negative now for us if we have the definitely no answer",
    "start": "1556320",
    "end": "1563600"
  },
  {
    "text": "we have definitely not seen this before we know immediately that we have some action to take now we don't need to go",
    "start": "1563600",
    "end": "1569840"
  },
  {
    "text": "query over the data set and do other things we know with a quick very quick query to the",
    "start": "1569840",
    "end": "1574960"
  },
  {
    "text": "filter in memory we know that we've never seen this before and this is the thing that we were looking for",
    "start": "1574960",
    "end": "1581440"
  },
  {
    "text": "now the probability of getting a false positive of it saying yes we have seen this before",
    "start": "1581440",
    "end": "1586799"
  },
  {
    "text": "you get to control that you get to control what is the chance of having a false positive so it's not",
    "start": "1586799",
    "end": "1593279"
  },
  {
    "text": "you know some random chance that you you can't do anything about you can control very specifically what is the chance",
    "start": "1593279",
    "end": "1598880"
  },
  {
    "text": "of the false positive so when you come to set up your bloom filter there are a few different things",
    "start": "1598880",
    "end": "1605360"
  },
  {
    "text": "that you can do to control that you can of course control w the width of the array how wide is my",
    "start": "1605360",
    "end": "1612480"
  },
  {
    "text": "bit array going to be how many bits do i need you can control n",
    "start": "1612480",
    "end": "1618960"
  },
  {
    "text": "now if you can't control m you need to at least be able to reasonably predict n right you need to have a rough idea",
    "start": "1618960",
    "end": "1625840"
  },
  {
    "text": "because you need to know well how many things am i going to insert into this filter now if you imagine my filter of width 10",
    "start": "1625840",
    "end": "1631760"
  },
  {
    "text": "a moment ago if i insert 100 items into that all of the bits would have been set and then the filter is useless so you need",
    "start": "1631760",
    "end": "1638159"
  },
  {
    "text": "to be able to take at least a reasonably accurate guess at what n will be so we had a pretty good idea of how many",
    "start": "1638159",
    "end": "1645279"
  },
  {
    "text": "distinct reports we were going to see you also then get to control k how many bits am i going to set in this",
    "start": "1645279",
    "end": "1651600"
  },
  {
    "text": "filter for each item how many hash functions am i going to use and the last thing",
    "start": "1651600",
    "end": "1657360"
  },
  {
    "text": "is p what is my desired probability of there being a false positive like is it",
    "start": "1657360",
    "end": "1663200"
  },
  {
    "text": "really really important that the false positive probability is low or is it not kind of too bad that",
    "start": "1663200",
    "end": "1668559"
  },
  {
    "text": "depends on your use case but you get to define it you get to control it now in order to calculate these values",
    "start": "1668559",
    "end": "1675120"
  },
  {
    "text": "generally what you will do is pick one or two that you want to set and control and then the other two can",
    "start": "1675120",
    "end": "1680559"
  },
  {
    "text": "be derived from the two that you've picked so we know how many items we're going to",
    "start": "1680559",
    "end": "1685760"
  },
  {
    "text": "insert and we know what our desired probability of false positive is and from that we can determine therefore",
    "start": "1685760",
    "end": "1691840"
  },
  {
    "text": "what should be the width of the filter and how many hash functions we should use so depending on which values you",
    "start": "1691840",
    "end": "1697919"
  },
  {
    "text": "start out with and i know this might appear like terribly complex and awful there",
    "start": "1697919",
    "end": "1704480"
  },
  {
    "text": "are fantastic calculators online right you literally go and just say oh we want a one percent false positive probability",
    "start": "1704480",
    "end": "1710080"
  },
  {
    "text": "and we're going to insert one million items and it will just tell you what the other two values need to be so you know if this looks a little bit too",
    "start": "1710080",
    "end": "1716159"
  },
  {
    "text": "unapproachable like it does for me i just go online to the balloon filter calculator and punch the values in so we",
    "start": "1716159",
    "end": "1722080"
  },
  {
    "text": "don't need to be some kind of like crazy math ways but as you can see the width the calculation for the width includes n",
    "start": "1722080",
    "end": "1728480"
  },
  {
    "text": "the number of items you can see p the probability so of course how as we insert more items it it needs to be",
    "start": "1728480",
    "end": "1734720"
  },
  {
    "text": "wider to give us space and as we reduce our desired probability for false",
    "start": "1734720",
    "end": "1739760"
  },
  {
    "text": "positives we need more width again so of course those two things push the width up if you look at n the number of items",
    "start": "1739760",
    "end": "1745919"
  },
  {
    "text": "that you're going to insert you can see k the hash functions w the width again",
    "start": "1745919",
    "end": "1750960"
  },
  {
    "text": "like if we have a larger n number of items being inserted we need a larger width in order to accommodate the",
    "start": "1750960",
    "end": "1756880"
  },
  {
    "text": "fact that we're going to be setting more and more and more values k the hash functions that we're going to be using",
    "start": "1756880",
    "end": "1762559"
  },
  {
    "text": "weight the number of items are the two main components so all of this makes perfect sense when you think about it if",
    "start": "1762559",
    "end": "1768159"
  },
  {
    "text": "you declare this couple of values that you want which for us was n we know how many items we're going to insert rough",
    "start": "1768159",
    "end": "1774320"
  },
  {
    "text": "estimate it's like 7 billion and p how much chance of a false positive do we",
    "start": "1774320",
    "end": "1780080"
  },
  {
    "text": "want so you can literally then just take your values and calculate what should be the",
    "start": "1780080",
    "end": "1785279"
  },
  {
    "text": "dimensions of our filter now we estimate with some projection into the future",
    "start": "1785279",
    "end": "1791279"
  },
  {
    "text": "that we will have seen in the region of seven billion distinct reports",
    "start": "1791279",
    "end": "1796320"
  },
  {
    "text": "now we process about 400 million reports a day but the vast majority of them can be",
    "start": "1796320",
    "end": "1802480"
  },
  {
    "text": "normalized and deduplicated so when you're inserting into a filter it's the number of distinct items",
    "start": "1802480",
    "end": "1807760"
  },
  {
    "text": "so we recommend being reasonably accurate with this and we came out at seven billion items so",
    "start": "1807760",
    "end": "1814399"
  },
  {
    "text": "how big should our array be well the other value we picked was our false positive probability so we want a one",
    "start": "1814399",
    "end": "1821039"
  },
  {
    "text": "percent chance that it will give us a false positive remember it's always zero percent chance",
    "start": "1821039",
    "end": "1826480"
  },
  {
    "text": "it's a false negative always so we want a one percent chance of false positive and then from this we can just calculate",
    "start": "1826480",
    "end": "1833360"
  },
  {
    "start": "1831000",
    "end": "1905000"
  },
  {
    "text": "the width it will just tell us like how wide should our filter be so dead easy you just substitute in the values and then it will tell you you",
    "start": "1833360",
    "end": "1840159"
  },
  {
    "text": "need a width of this many bits now obviously there's a couple of bits of overhead in the filter as well",
    "start": "1840159",
    "end": "1846080"
  },
  {
    "text": "and it came out and it said to us you need a filter that is approximately 8.4 gig in size now this sounds enormous and",
    "start": "1846080",
    "end": "1852559"
  },
  {
    "text": "this is enormous however we looked at this and i was like well it's kind of pretty big but is it really",
    "start": "1852559",
    "end": "1858880"
  },
  {
    "text": "that hard to come across like eight in a big gig of ram nowadays so i went on to just our hosting provider and i was like",
    "start": "1858880",
    "end": "1864480"
  },
  {
    "text": "i need a server to run a redis cache because we keep our bloom filtering redis and they were like oh yeah sure like you",
    "start": "1864480",
    "end": "1870240"
  },
  {
    "text": "can get a server with like four processors and 16 gig of ram and it's like nine dollars a month and i was like oh that's actually",
    "start": "1870240",
    "end": "1876799"
  },
  {
    "text": "pretty reasonable so i was like i was like you know i was like immediately kind of like shocked me because i was",
    "start": "1876799",
    "end": "1882080"
  },
  {
    "text": "like gosh 8.4 gig of memory but then i was like actually you know what like this is super easy right this is really",
    "start": "1882080",
    "end": "1887279"
  },
  {
    "text": "really cheap to come across a machine with that kind of ram so we now have a very very small",
    "start": "1887279",
    "end": "1893679"
  },
  {
    "text": "dedicated redis cache that holds our bling filter because it's just a bit array so super simple super easy",
    "start": "1893679",
    "end": "1900320"
  },
  {
    "text": "so we knew n we knew p that allowed us to calculate w the width and it also allows us to calculate k how",
    "start": "1900320",
    "end": "1907039"
  },
  {
    "text": "many hash functions should we be using basically how many bits should we set in the filter for each item when we do an",
    "start": "1907039",
    "end": "1912480"
  },
  {
    "text": "insertion the number of hash functions we use is the number of bits that we're going to set",
    "start": "1912480",
    "end": "1917519"
  },
  {
    "text": "so we now know the width we know the number of items we're going to insert that allows us to calculate k",
    "start": "1917519",
    "end": "1923360"
  },
  {
    "text": "very very simple right just substitute in the values that we already know and it tells us k equals seven",
    "start": "1923360",
    "end": "1929440"
  },
  {
    "text": "so it's like sweet we're gonna use k equals seven and i put that into my config so we're going to use seven hash",
    "start": "1929440",
    "end": "1934559"
  },
  {
    "text": "functions to insert into our production filter which means we're going to set seven bits",
    "start": "1934559",
    "end": "1940080"
  },
  {
    "start": "1939000",
    "end": "2116000"
  },
  {
    "text": "now as i said you don't have to do all of this wild you know kind of mathematics yourself there are these",
    "start": "1940080",
    "end": "1946159"
  },
  {
    "text": "really great bloom filters online and you can just go and punch in whichever number you know or want to control and",
    "start": "1946159",
    "end": "1951840"
  },
  {
    "text": "then it will just tell you what the other number should be so i did that and then just copy and pasted the chord maths into my slide to",
    "start": "1951840",
    "end": "1957519"
  },
  {
    "text": "look clever so i don't you know i don't think it needs to be any more complicated than this",
    "start": "1957519",
    "end": "1965360"
  },
  {
    "text": "we now have this filter up and running in production at report uri for testing purposes we're not currently depending",
    "start": "1965519",
    "end": "1970640"
  },
  {
    "text": "upon it we're currently testing and experimenting because for example our value of n is an educated guess we don't",
    "start": "1970640",
    "end": "1978640"
  },
  {
    "text": "know in history like how many distinct reports we've actually seen because it was a ridiculously difficult thing to",
    "start": "1978640",
    "end": "1984240"
  },
  {
    "text": "track we would have had to have kept all data for all time now given how many",
    "start": "1984240",
    "end": "1989519"
  },
  {
    "text": "terabytes of data we have just for the last 90 days i dread to think how much data we would have if we had kept all",
    "start": "1989519",
    "end": "1995120"
  },
  {
    "text": "data from 2014. so right now we're testing this we're creating a filter we're",
    "start": "1995120",
    "end": "2000480"
  },
  {
    "text": "assuming that we will be you know inserting in the region of seven billion items the problem is if you exceed n if you go",
    "start": "2000480",
    "end": "2007679"
  },
  {
    "text": "above n and say okay we want seven billion items and then you get to seven and a half billion or eight billion",
    "start": "2007679",
    "end": "2014320"
  },
  {
    "text": "it starts to have a very large impact on your probability for false positives because if you're overpopulating the",
    "start": "2014320",
    "end": "2020559"
  },
  {
    "text": "bits that are set you're going to start getting more and more and more false positives if we think about my width 10 array from",
    "start": "2020559",
    "end": "2027679"
  },
  {
    "text": "earlier by the time we've inserted 100 items into that every bit will be set and everything will be yes it will be a",
    "start": "2027679",
    "end": "2033840"
  },
  {
    "text": "false positive so n does need to be kind of accurate which is why we're still testing this because we don't actually",
    "start": "2033840",
    "end": "2039519"
  },
  {
    "text": "know for sure what n is so for us this is what we use a balloon",
    "start": "2039519",
    "end": "2044799"
  },
  {
    "text": "filter for a report comes in and we have one global service filter that we call it so it's for us as a",
    "start": "2044799",
    "end": "2051679"
  },
  {
    "text": "service have we as a service ever seen this single report before and we query it against the filter and if it comes",
    "start": "2051679",
    "end": "2057358"
  },
  {
    "text": "back and says no we're like this is the first time that we as a service have ever seen this report and then we set",
    "start": "2057359",
    "end": "2062398"
  },
  {
    "text": "the bits in the filter so obviously next time we know that we've seen it now then we operate a per customer bloom",
    "start": "2062399",
    "end": "2069118"
  },
  {
    "text": "filter which is much much smaller because it's only for your reports so we then query against the per customer",
    "start": "2069119",
    "end": "2075760"
  },
  {
    "text": "filter now of course if we have never seen this as a service what we're checking and testing is you should never",
    "start": "2075760",
    "end": "2081118"
  },
  {
    "text": "have seen this as a customer but of course we may process very similar reports but",
    "start": "2081119",
    "end": "2086240"
  },
  {
    "text": "the document uri should always make them unique per customer so you should also have not ever seen this individual",
    "start": "2086240",
    "end": "2092398"
  },
  {
    "text": "report before this is a good way of kind of double checking so we're going to hopefully use this",
    "start": "2092399",
    "end": "2098720"
  },
  {
    "text": "very soon it's currently deployed we're currently testing and for us that is our use case but of",
    "start": "2098720",
    "end": "2104000"
  },
  {
    "text": "course the question is what else can you use these for like what else is a balloon filter good for we have a very specific use case that's",
    "start": "2104000",
    "end": "2110800"
  },
  {
    "text": "good for us but many other companies many other organizations use bloom filters when i started reading about",
    "start": "2110800",
    "end": "2116800"
  },
  {
    "start": "2116000",
    "end": "2257000"
  },
  {
    "text": "these there were lots of good case studies and real world examples of bloom filters being deployed i read a",
    "start": "2116800",
    "end": "2122000"
  },
  {
    "text": "particularly fascinating white paper from akamai who is a large cdm provider so they reverse proxy thousands millions",
    "start": "2122000",
    "end": "2128800"
  },
  {
    "text": "of websites they cache assets at the cdn edge so then if the browser requests them the cdn has them cached",
    "start": "2128800",
    "end": "2135359"
  },
  {
    "text": "if you're proxying and caching for millions of sites your cache is enormous",
    "start": "2135359",
    "end": "2140800"
  },
  {
    "text": "now cdns akamai realized they had a problem with something called a one-hit wonder",
    "start": "2140800",
    "end": "2146800"
  },
  {
    "text": "now a one-hit wonder is an asset that someone a browser requests",
    "start": "2146800",
    "end": "2152240"
  },
  {
    "text": "and then the cdn caches it they fetch it from the origin they cache it and they serve it to the browser and they put the item in the cache and",
    "start": "2152240",
    "end": "2158720"
  },
  {
    "text": "the item stays in the cache until it expires and no one else ever requested again and they're like you know what",
    "start": "2158720",
    "end": "2165920"
  },
  {
    "text": "she's listening to me i don't know what i said that woke up the lady whose name shall not be said",
    "start": "2166240",
    "end": "2172240"
  },
  {
    "text": "but she's listening um that item went into the cache",
    "start": "2172240",
    "end": "2177359"
  },
  {
    "text": "and it could have not gone into the cache because it was a one-hit wonder it's only been requested once it goes into the cache and it sits there till it",
    "start": "2177359",
    "end": "2183200"
  },
  {
    "text": "expires and it's doing nothing except waste space in the cache so akamai were like hey we can put a",
    "start": "2183200",
    "end": "2189119"
  },
  {
    "text": "balloon filter in front of this so they put a bloom filter in front of their cache and when a request comes in",
    "start": "2189119",
    "end": "2196560"
  },
  {
    "text": "they say have we seen this request before has someone requested this asset before and if the answer is no no one has ever",
    "start": "2196560",
    "end": "2202960"
  },
  {
    "text": "requested this asset before they fetch it from the origin and serve it to the browser and don't cache it",
    "start": "2202960",
    "end": "2208800"
  },
  {
    "text": "because we've never seen this before it's the first time it's ever been requested don't cache it and set the bits in the filter",
    "start": "2208800",
    "end": "2214960"
  },
  {
    "text": "now if someone comes back a second time and they say okay has anyone ever requested this before they can say yes",
    "start": "2214960",
    "end": "2221520"
  },
  {
    "text": "because the bits are set in the filter this time we'll cache it so all their balloon filter does is",
    "start": "2221520",
    "end": "2228480"
  },
  {
    "text": "prevent an item being cashed on the first request it means that all items will be cached from the second time that",
    "start": "2228480",
    "end": "2234720"
  },
  {
    "text": "they're requested and they've managed to reduce the size of their cash",
    "start": "2234720",
    "end": "2239760"
  },
  {
    "text": "by almost three quarters because the vast majority of assets were being requested once cashed and they're never",
    "start": "2239760",
    "end": "2245200"
  },
  {
    "text": "used again so by putting a very simple balloon filter in front of their cash they managed to shrink very",
    "start": "2245200",
    "end": "2250400"
  },
  {
    "text": "significantly the size of their cash black and why aren't they on the organization using bloom filters",
    "start": "2250400",
    "end": "2256880"
  },
  {
    "text": "of course is anyone familiar with google's safe browsing",
    "start": "2256880",
    "end": "2261760"
  },
  {
    "start": "2257000",
    "end": "2457000"
  },
  {
    "text": "you open a page on your browser and there is a very good chance that the url has been checked to see if it's",
    "start": "2262560",
    "end": "2268480"
  },
  {
    "text": "malicious safe browsing works across pretty much all chromium-based browsers and the safe browsing data set is also",
    "start": "2268480",
    "end": "2274160"
  },
  {
    "text": "used in other non-chromium-based browsers as well so i open a url in my browser i go there",
    "start": "2274160",
    "end": "2279920"
  },
  {
    "text": "and of course like i want to know is this a known malicious url so how could we do that well i could",
    "start": "2279920",
    "end": "2285680"
  },
  {
    "text": "take the url i could ship it off to some google owned api and say hey i want to go to this url is it in a list of like",
    "start": "2285680",
    "end": "2292000"
  },
  {
    "text": "malicious urls that kind of sounds a little bit like widespread tracking and some pretty",
    "start": "2292000",
    "end": "2298320"
  },
  {
    "text": "privacy invasive stuff to me so of course that's not an acceptable solution so google take their list of known",
    "start": "2298320",
    "end": "2303920"
  },
  {
    "text": "malicious urls and they generate a bloom filter and they insert all of those urls into the",
    "start": "2303920",
    "end": "2309280"
  },
  {
    "text": "balloon filter and then they ship the bloom filter down to the browser so inside all of your browsers probably",
    "start": "2309280",
    "end": "2314960"
  },
  {
    "text": "there is a bloom filter and when you go to a url and you hit enter",
    "start": "2314960",
    "end": "2320240"
  },
  {
    "text": "it queries the url against the balloon filter locally in your client and says is this url in the filter",
    "start": "2320240",
    "end": "2326640"
  },
  {
    "text": "is this url in the list of all known malicious urls now the balloon filter can only tell us",
    "start": "2326640",
    "end": "2332640"
  },
  {
    "text": "two things definitely no or probably yes now if he says definitely no we're good to go right we",
    "start": "2332640",
    "end": "2338880"
  },
  {
    "text": "know 100 for sure this is not a known malicious url and hopefully the vast majority of the time that you're",
    "start": "2338880",
    "end": "2344960"
  },
  {
    "text": "visiting urls that's the answer that you will get but every now and again you're going to click a link and have",
    "start": "2344960",
    "end": "2350720"
  },
  {
    "text": "you seen like that big red thing in the browser and it's like deceptive website ahead you just queried a balloon filter and it said probably yes",
    "start": "2350720",
    "end": "2358000"
  },
  {
    "text": "probably yes now is probably yes good enough to stop you visiting a url",
    "start": "2358000",
    "end": "2363359"
  },
  {
    "text": "because the url that you're visiting could be malicious or it could have been a false positive",
    "start": "2363359",
    "end": "2369520"
  },
  {
    "text": "so that's the point at which it does reach out and perform a query now it doesn't query in the way that i suggested it doesn't take the url and",
    "start": "2369520",
    "end": "2375920"
  },
  {
    "text": "send it to the api because that would be super privacy invasive is anyone familiar with troy's have i",
    "start": "2375920",
    "end": "2382960"
  },
  {
    "text": "been pwned trying to have ibmphone.com quick show of hands so in have i been phoned there is also",
    "start": "2382960",
    "end": "2388079"
  },
  {
    "text": "pwned passwords where you can type in your password and see if your password is in the list of all publicly disclosed",
    "start": "2388079",
    "end": "2393599"
  },
  {
    "text": "passwords and in that troy uses a model called k anonymity which is the ability to query",
    "start": "2393599",
    "end": "2398960"
  },
  {
    "text": "an api to see if it has an item without telling it what the item is",
    "start": "2398960",
    "end": "2404800"
  },
  {
    "text": "and that's what safe browsing also does it uses exactly the same model to then query the api using k anonymity",
    "start": "2404800",
    "end": "2412079"
  },
  {
    "text": "to say is this url in your list without telling them what the url was it's really interesting and fascinating have",
    "start": "2412079",
    "end": "2418000"
  },
  {
    "text": "a read of troy's blog post on k anonymity if querying an api for something without telling it what the thing is sounds kind of impossible but",
    "start": "2418000",
    "end": "2424880"
  },
  {
    "text": "it works so this is what safe browsing does the vast majority of the time you'll query that local bloom filter and it will say",
    "start": "2424880",
    "end": "2431440"
  },
  {
    "text": "definitely no this is not a malicious url if it says possibly yes that's when you do the",
    "start": "2431440",
    "end": "2436880"
  },
  {
    "text": "query but because that's such a small amount of the time we've saved the vast majority of the work again you're not",
    "start": "2436880",
    "end": "2442800"
  },
  {
    "text": "querying every url even though it's k anonymity and it would be privacy preserving you still don't want the cost",
    "start": "2442800",
    "end": "2448400"
  },
  {
    "text": "of sending an api request for every single url you visit and that's what the bloom filter prevents",
    "start": "2448400",
    "end": "2455520"
  },
  {
    "text": "now another really good example of this have i read this news article before",
    "start": "2455520",
    "end": "2461520"
  },
  {
    "start": "2457000",
    "end": "2511000"
  },
  {
    "text": "do big news websites want to store like you know just a full-blown list of every news article i've ever read",
    "start": "2461520",
    "end": "2468400"
  },
  {
    "text": "per user probably not so medium talked about their example of using bloom filters on a per user basis",
    "start": "2468400",
    "end": "2476000"
  },
  {
    "text": "to keep track of whether or not they should suggest an article to you i go to the home page i'm logged in it knows who",
    "start": "2476000",
    "end": "2481839"
  },
  {
    "text": "i am and it's like what should we suggest to scott to read today it's like well these are the most recent you know",
    "start": "2481839",
    "end": "2487040"
  },
  {
    "text": "popular news articles so we'll take the url we'll query against the filter of",
    "start": "2487040",
    "end": "2492240"
  },
  {
    "text": "articles that scott has read and if it's not in there definitely no then we'll suggest it to him you should read this",
    "start": "2492240",
    "end": "2498079"
  },
  {
    "text": "it looks pretty cool if the filter comes back and says scott has probably read this article they go",
    "start": "2498079",
    "end": "2503520"
  },
  {
    "text": "okay move on to the next one and we'll suggest this one now",
    "start": "2503520",
    "end": "2508560"
  },
  {
    "text": "there are many other examples of organizations that use bloom filters there's a particularly large social",
    "start": "2508560",
    "end": "2514720"
  },
  {
    "text": "media platform that uses them for username registration right you go to the website and you say i want to",
    "start": "2514720",
    "end": "2520240"
  },
  {
    "text": "register with this username and they're like do we want to query over like 9 billion entries in the user",
    "start": "2520240",
    "end": "2525359"
  },
  {
    "text": "table or do we want to just query against the bloom filter has this username been registered before definitely no you can",
    "start": "2525359",
    "end": "2531440"
  },
  {
    "text": "take it probably yes ok now we need to go check the database but it stops you querying the database",
    "start": "2531440",
    "end": "2537359"
  },
  {
    "text": "doing the very expensive thing in a very large amount of scenarios and of course us",
    "start": "2537359",
    "end": "2543760"
  },
  {
    "text": "we're now using bloom filters quite extensively at report uri because we process volumes of data that would",
    "start": "2543760",
    "end": "2549359"
  },
  {
    "text": "just be unmanageable for us to do at the scale and the speed that we want to and the",
    "start": "2549359",
    "end": "2555599"
  },
  {
    "text": "the like the low speed complexities of bloom filters is amazing right we keep our filter in",
    "start": "2555599",
    "end": "2562160"
  },
  {
    "text": "memory in redis and we can query against that unbelievably quickly there's the time complexity of an insertion these",
    "start": "2562160",
    "end": "2568960"
  },
  {
    "text": "hash functions are super super cheap so even if you obviously you need to perform the hashes to query the item you need to",
    "start": "2568960",
    "end": "2575200"
  },
  {
    "text": "perform the hashes if you want to then go and set the bits the time complexity of that is so low",
    "start": "2575200",
    "end": "2580480"
  },
  {
    "text": "it's negligible so they're ultra fast and they're ultra space efficient i know",
    "start": "2580480",
    "end": "2585920"
  },
  {
    "text": "eight and a half gig of ram might seem like a lot but when you think about what we're actually querying over",
    "start": "2585920",
    "end": "2591040"
  },
  {
    "text": "that's really quite a low overhead now the other cool thing about bloom filters and the the method that i just",
    "start": "2591040",
    "end": "2597280"
  },
  {
    "text": "explained to you is they are the base component of many other probabilistic",
    "start": "2597280",
    "end": "2602319"
  },
  {
    "text": "data structures that can give you different features depending on what you want like for example we can insert a",
    "start": "2602319",
    "end": "2608560"
  },
  {
    "text": "report and say have we seen this report yes or no what we can't say is how many times have",
    "start": "2608560",
    "end": "2615119"
  },
  {
    "text": "we seen that report the balloon filter doesn't know that the bloom filter only knows have you seen it before or have you not seen it before",
    "start": "2615119",
    "end": "2621440"
  },
  {
    "text": "but there are counting bloom filters right maybe you want to query and say have we seen it before",
    "start": "2621440",
    "end": "2626960"
  },
  {
    "start": "2623000",
    "end": "2700000"
  },
  {
    "text": "and if we have how many times have we seen it before so counting balloon filters allow you to get an idea of the frequency with which",
    "start": "2626960",
    "end": "2634240"
  },
  {
    "text": "you have observed the item so same probabilistic nature it still cannot give you a definitive in both",
    "start": "2634240",
    "end": "2640880"
  },
  {
    "text": "ways in the yes or no but you can give the the counting bloom filter a threshold and say have we seen this item",
    "start": "2640880",
    "end": "2646720"
  },
  {
    "text": "before and is it above or below this threshold in terms of its count so it can say it is possibly greater",
    "start": "2646720",
    "end": "2653839"
  },
  {
    "text": "than or equal to your threshold or it is definitely less than your threshold that you queried with",
    "start": "2653839",
    "end": "2660720"
  },
  {
    "text": "so same kind of probabilistic nature if you think about it the possibility of being over the count is because other",
    "start": "2660720",
    "end": "2666560"
  },
  {
    "text": "insertions may have collided and artificially increase the count of the item you queried for but insertions can",
    "start": "2666560",
    "end": "2671920"
  },
  {
    "text": "never decrease the count right like we're only ever increasing the count of items so what we're saying is basically",
    "start": "2671920",
    "end": "2678480"
  },
  {
    "text": "yes we know that we've seen it but we may have possibly overestimated how frequently",
    "start": "2678480",
    "end": "2684079"
  },
  {
    "text": "maybe you put an item into the filter and think well later what if i want to delete an item because again if you think back to our example it's very",
    "start": "2684079",
    "end": "2690720"
  },
  {
    "text": "difficult virtually impossible to delete an item from a bloom filter because if you delete the bits for this item you've",
    "start": "2690720",
    "end": "2696720"
  },
  {
    "text": "also deleted the bits for other items as well and that's where cocoa filters come in again very similar concept basically a",
    "start": "2696720",
    "end": "2703119"
  },
  {
    "start": "2700000",
    "end": "2842000"
  },
  {
    "text": "bloom filter with the possibility to delete items",
    "start": "2703119",
    "end": "2708480"
  },
  {
    "text": "now if you want more accurate counting we then have something called a sketch and this particular implementation is a",
    "start": "2708480",
    "end": "2714480"
  },
  {
    "text": "count min sketch now all the sketches is a two-dimensional bloom filter right the",
    "start": "2714480",
    "end": "2719599"
  },
  {
    "text": "one i showed you before was one-dimensional it's just really really wide a sketch is a two-dimensional bloom",
    "start": "2719599",
    "end": "2724800"
  },
  {
    "text": "filter so instead of hash function one and hash function two inserting onto the same row hash function one and hash",
    "start": "2724800",
    "end": "2730240"
  },
  {
    "text": "function two would have their own rows now we call it a sketch we are also using accounting sketch of",
    "start": "2730240",
    "end": "2736880"
  },
  {
    "text": "report uri to do frequency analysis on our inbound reports sketches refer to",
    "start": "2736880",
    "end": "2742079"
  },
  {
    "text": "them as events so as every single report comes in as every single piece of data or",
    "start": "2742079",
    "end": "2748079"
  },
  {
    "text": "telemetry or whatever it is that you might want to track you insert it into the sketch",
    "start": "2748079",
    "end": "2753280"
  },
  {
    "text": "now again sketches are far more accurate than a counting bloom filter but they're still probabilistic you still can't say",
    "start": "2753280",
    "end": "2759920"
  },
  {
    "text": "that we know the count precisely because there is always the possibility of over",
    "start": "2759920",
    "end": "2764960"
  },
  {
    "text": "counting now because we've separated hash function 1 and hash function 2 into their own rows that makes the count more",
    "start": "2764960",
    "end": "2771440"
  },
  {
    "text": "accurate and with a sketch if you want to increase the accuracy you can add more and more rows so as k increases the",
    "start": "2771440",
    "end": "2777839"
  },
  {
    "text": "number of rows increases and that makes each count that you stored in each row more accurate i say more accurate not",
    "start": "2777839",
    "end": "2784400"
  },
  {
    "text": "accurate now it's called a count min sketch because if you're storing seven counts for an item and you say how frequently",
    "start": "2784400",
    "end": "2790800"
  },
  {
    "text": "have we seen this item and you pull out the seven counts the lowest one countmen",
    "start": "2790800",
    "end": "2796400"
  },
  {
    "text": "is the most accurate because the others have all been artificially increased in count by collisions so that's why it's",
    "start": "2796400",
    "end": "2802880"
  },
  {
    "text": "called a count min sketch because we take all the seven counts the lowest one is the closest to accurate and we've",
    "start": "2802880",
    "end": "2808400"
  },
  {
    "text": "tested with this again as you can see on the bottom you can define your tolerance to over counting make the arrays wider",
    "start": "2808400",
    "end": "2815200"
  },
  {
    "text": "and you can define the probability of being with intolerance make the sketch deeper so you can control how accurate do you",
    "start": "2815200",
    "end": "2821599"
  },
  {
    "text": "want the count to be now for us at report uri our tolerance here is quite low we just want to get an",
    "start": "2821599",
    "end": "2827599"
  },
  {
    "text": "idea of like is this thing really really big and frequent or do we see this twice a day we don't want exact numbers we",
    "start": "2827599",
    "end": "2833280"
  },
  {
    "text": "want an impression we want a feeling for the data is it a big frequent item or is it a small infrequent item",
    "start": "2833280",
    "end": "2841520"
  },
  {
    "text": "and then the one that we do actually use in production is called a top k",
    "start": "2841520",
    "end": "2846880"
  },
  {
    "start": "2842000",
    "end": "2961000"
  },
  {
    "text": "so again this is based on a sketch it's just a two-dimensional bloom filter and this allows you to feed through a",
    "start": "2846880",
    "end": "2853040"
  },
  {
    "text": "stream of events and on an ongoing basis it will maintain a list of the top k",
    "start": "2853040",
    "end": "2858400"
  },
  {
    "text": "items the top however many you define so in top k the k is how many items do you want to",
    "start": "2858400",
    "end": "2864559"
  },
  {
    "text": "track in the top 100 so we run a top k top 100 we want to track the 100 most frequent items in",
    "start": "2864559",
    "end": "2871359"
  },
  {
    "text": "this data stream and you feed the data stream through the top case structure and it will always",
    "start": "2871359",
    "end": "2876800"
  },
  {
    "text": "maintain a list of the 100 most frequent items passing through the data stream",
    "start": "2876800",
    "end": "2883440"
  },
  {
    "text": "it does that by running a sketch and on top of the sketch to the side it runs a binary min heap structure so every time",
    "start": "2883440",
    "end": "2890319"
  },
  {
    "text": "an item comes through we increment its count we check how big it is and we look at the top 100 and say is this one now",
    "start": "2890319",
    "end": "2896319"
  },
  {
    "text": "bigger than the smallest one right like is it if it's bigger than the smallest one we need to go put it in our list of",
    "start": "2896319",
    "end": "2901440"
  },
  {
    "text": "top 100 and evict the bottom item now doing data analysis like that when we're",
    "start": "2901440",
    "end": "2907839"
  },
  {
    "text": "processing 60 to 70 000 reports a second is incredibly difficult",
    "start": "2907839",
    "end": "2913119"
  },
  {
    "text": "and we deployed top k on our like nine dollar a month redis cash in digitalocean and we can",
    "start": "2913119",
    "end": "2919920"
  },
  {
    "text": "now look at our data stream of tens of thousands of csp reports a second and say right now like what are the big",
    "start": "2919920",
    "end": "2925680"
  },
  {
    "text": "hitters what's happening if an item jumps straight up to the top of the top 100 or rockets up the list",
    "start": "2925680",
    "end": "2932720"
  },
  {
    "text": "then we get an alert to say look a new item has just jumped itself straight to the top maybe one of our customers has a new piece of",
    "start": "2932720",
    "end": "2939680"
  },
  {
    "text": "javascript it's being reported super frequently it goes to the top of the list and we're like maybe we can reach out to them and say hey",
    "start": "2939680",
    "end": "2945599"
  },
  {
    "text": "you know is everything okay maybe it's a configuration error it's very popular with csp right we added a new font but",
    "start": "2945599",
    "end": "2951760"
  },
  {
    "text": "we forgot to allow it in the policy and now it's been blocked by everybody and we contact them and like hey you have a",
    "start": "2951760",
    "end": "2957040"
  },
  {
    "text": "configuration error that you need to fix now the final one is a hyperlog log top k does require a",
    "start": "2957040",
    "end": "2964720"
  },
  {
    "start": "2961000",
    "end": "3089000"
  },
  {
    "text": "little bit more storage space and a tiny little bit more processing than a hyperlog log a hyperlog log tracks",
    "start": "2964720",
    "end": "2970880"
  },
  {
    "text": "something called the cardinality of data in a stream basically means is a bunch of the data",
    "start": "2970880",
    "end": "2977359"
  },
  {
    "text": "the same or is all of the data different to the rest of the data how unique is the stream are you seeing thousands of",
    "start": "2977359",
    "end": "2983040"
  },
  {
    "text": "events a second with low cardinality means they're all the same if you're seeing thousands and thousands of events a second with high cardinality it means",
    "start": "2983040",
    "end": "2989119"
  },
  {
    "text": "they're all different that's all cardinality means now a hyperlog log can take any stream",
    "start": "2989119",
    "end": "2995440"
  },
  {
    "text": "of data and calculate this with like you need like eight kilobytes of storage it's ridiculous it's absolutely wild",
    "start": "2995440",
    "end": "3001760"
  },
  {
    "text": "like how small an overhead it can be to run a hyperlog log so again if you're processing data in a stream events in a",
    "start": "3001760",
    "end": "3008240"
  },
  {
    "text": "stream and you want to know how unique is the data are we just seeing a bunch of repetition",
    "start": "3008240",
    "end": "3013599"
  },
  {
    "text": "hyperlog log is where you're going to go with that so the bloom filter and the principles",
    "start": "3013599",
    "end": "3020160"
  },
  {
    "text": "that i explained are the base structure for many of these additional probabilistic data structures we already",
    "start": "3020160",
    "end": "3026079"
  },
  {
    "text": "use top k it's phenomenally awesome we're currently testing account in sketch as well to give us more ideas on",
    "start": "3026079",
    "end": "3032319"
  },
  {
    "text": "a per user basis about the volume of reports being consumed now of course we already track all these things in our",
    "start": "3032319",
    "end": "3038400"
  },
  {
    "text": "database but talking to the database is a lot slower and a lot more expensive than doing a quick query against redis",
    "start": "3038400",
    "end": "3045680"
  },
  {
    "text": "in memory so it's about taking as many opportunities as we can to use something local with redis and do",
    "start": "3045680",
    "end": "3054240"
  },
  {
    "text": "something quick with a minimal overhead the space complexity low storage time complexity minimal overhead to query it",
    "start": "3054240",
    "end": "3061119"
  },
  {
    "text": "and all of these data structures have helped us in probably the last three or four",
    "start": "3061119",
    "end": "3066160"
  },
  {
    "text": "months i have detailed blog posts on all of them if you really want to dig into this and have a look at other use cases for them but for now i wanted to make",
    "start": "3066160",
    "end": "3072800"
  },
  {
    "text": "sure that i definitely left some time at the end for q a so i'm going to wrap up my talk the slider link was there and",
    "start": "3072800",
    "end": "3079599"
  },
  {
    "text": "thank you very much",
    "start": "3079599",
    "end": "3083240"
  },
  {
    "text": "so let's fire up slido see if anyone was brave enough to ask a question",
    "start": "3087760",
    "end": "3093839"
  },
  {
    "start": "3089000",
    "end": "3599000"
  },
  {
    "text": "oh wow okay so we've got quite a few in here let's go if your estimates for the bloom parameters turn out to be wrong would you be able to replace the filter",
    "start": "3093839",
    "end": "3100079"
  },
  {
    "text": "with another without breaking the functionality that's a fantastic question and the answer is no the",
    "start": "3100079",
    "end": "3105280"
  },
  {
    "text": "dimensions of the filter cannot be changed after you have created it the width is set if you were to adjust the",
    "start": "3105280",
    "end": "3110480"
  },
  {
    "text": "width it would throw out the index for every single item you've ever inserted thus rendering the filter useless so the",
    "start": "3110480",
    "end": "3116559"
  },
  {
    "text": "width cannot be changed and the number of hash functions k cannot be changed they must be accurate",
    "start": "3116559",
    "end": "3121680"
  },
  {
    "text": "when you create the filter very good question what hash functions do you use for the",
    "start": "3121680",
    "end": "3127680"
  },
  {
    "text": "reports your implementation will usually dictate this for you so the bloom filter implementation in redis uses murmur",
    "start": "3127680",
    "end": "3134079"
  },
  {
    "text": "which is i mean you may be familiar with hash functions like md5 sharp one they're very expensive you want the",
    "start": "3134079",
    "end": "3139520"
  },
  {
    "text": "cheapest hash function possible so it depends on your implementation but we use moma",
    "start": "3139520",
    "end": "3145280"
  },
  {
    "text": "what type of scripts do you have on your top 100 reported to report uri another good question so",
    "start": "3145280",
    "end": "3151119"
  },
  {
    "text": "there's two distinct categories like number one oh crap we have a problem and number two is like oh crap we have a problem but",
    "start": "3151119",
    "end": "3156880"
  },
  {
    "text": "it's a configuration error so the majority of the time it's like one of our developers added a new font or a",
    "start": "3156880",
    "end": "3162880"
  },
  {
    "text": "script or a style and someone forgot to add it to the policy and then we deploy it and the policy just blocks it and we",
    "start": "3162880",
    "end": "3168559"
  },
  {
    "text": "get a huge amount of reports the other one is like we have some script that we shouldn't know you know",
    "start": "3168559",
    "end": "3174319"
  },
  {
    "text": "we know shouldn't be there and now we have an issue that we must go investigate but i would say the configuration error one",
    "start": "3174319",
    "end": "3180400"
  },
  {
    "text": "like far outstrips the genuine security attack one what stops a malicious agent from",
    "start": "3180400",
    "end": "3186400"
  },
  {
    "text": "destroying your bloom filter um we're running it locally so we have our own like private network at digital",
    "start": "3186400",
    "end": "3193119"
  },
  {
    "text": "ocean that all of our servers sit in we run a dedicated redis cache for all of our probabilistic data structures",
    "start": "3193119",
    "end": "3199119"
  },
  {
    "text": "and it's protected as much as the rest of our application is so hopefully nobody's going to get anywhere near our",
    "start": "3199119",
    "end": "3204480"
  },
  {
    "text": "bloom filter because it means you're pretty deep inside our organization",
    "start": "3204480",
    "end": "3209839"
  },
  {
    "text": "um a slightly unrelated question will trusted types for csp come to securityheaders.com so",
    "start": "3210000",
    "end": "3216319"
  },
  {
    "text": "securityheaders.com is another little side project of mine check it out whoever asks that the answer is yes when",
    "start": "3216319",
    "end": "3221920"
  },
  {
    "text": "i find some time to sit down and write some code um i will update that",
    "start": "3221920",
    "end": "3228319"
  },
  {
    "text": "another question here will your bloom filter will eventually be filled right and when",
    "start": "3229119",
    "end": "3235119"
  },
  {
    "text": "um so yes like i guess more specifically referring to my implementation i said seven billion so seven billion was n the",
    "start": "3235119",
    "end": "3241599"
  },
  {
    "text": "number of items that we used to determine the width um yes like that filter will eventually",
    "start": "3241599",
    "end": "3247680"
  },
  {
    "text": "be filled because you know if hopefully like the service still exists like years and years and years and years from now",
    "start": "3247680",
    "end": "3252800"
  },
  {
    "text": "we will eventually get there the current implementation as i said for the bloom filter like we're currently testing that",
    "start": "3252800",
    "end": "3259440"
  },
  {
    "text": "we're you know we don't actually know that seven billion is accurate you know underestimate our overestimate because",
    "start": "3259440",
    "end": "3265359"
  },
  {
    "text": "we've never actually tracked before the number of distinct reports so we did some analysis on our previous 90 days of",
    "start": "3265359",
    "end": "3271440"
  },
  {
    "text": "data did some extrapolations and guessed it at 7 billion so hopefully for us like once we've completed our testing for a",
    "start": "3271440",
    "end": "3278400"
  },
  {
    "text": "period of time and we're tracking you know like distinct reports per month we could make a much better estimate but if",
    "start": "3278400",
    "end": "3284000"
  },
  {
    "text": "we've hugely underestimated n and we end up with like you know 90 billion distinct reports then yeah our",
    "start": "3284000",
    "end": "3289920"
  },
  {
    "text": "balloon filter is going to be pretty useless pretty fast but it's this is a bit of an experimentation process for us right now",
    "start": "3289920",
    "end": "3297119"
  },
  {
    "text": "another good question here is the bloom filter a single point of failure for your data stream um no not the way that",
    "start": "3297680",
    "end": "3304480"
  },
  {
    "text": "we've architected it the query against the bloom filter and the insertion into the balloon filter can all fail for",
    "start": "3304480",
    "end": "3309839"
  },
  {
    "text": "absolutely any reason they want and we just continue doing what we did before same for the top k insertion",
    "start": "3309839",
    "end": "3315280"
  },
  {
    "text": "we fire the event to process it into top k and then we're like okay off we go back down our processing pipeline so it",
    "start": "3315280",
    "end": "3321520"
  },
  {
    "text": "doesn't matter whether you know it succeeds whether it fails we don't want those to impact our current processing",
    "start": "3321520",
    "end": "3327119"
  },
  {
    "text": "pipeline so they're all bolt-ons they're all um they can all fail miserably and",
    "start": "3327119",
    "end": "3332240"
  },
  {
    "text": "everything will still work just as it did before",
    "start": "3332240",
    "end": "3336480"
  },
  {
    "text": "for your parameter k how do you pick k hash functions such that they are sufficiently different that's a really",
    "start": "3337359",
    "end": "3343119"
  },
  {
    "text": "good question so all of the hash functions that you use to insert into the bloom filter need to be what we call",
    "start": "3343119",
    "end": "3349599"
  },
  {
    "text": "pairwise independent so if i use seven hash functions and i hash the same report",
    "start": "3349599",
    "end": "3354960"
  },
  {
    "text": "all seven hash functions need to give me a different index none of them are allowed to give me the same index a hash",
    "start": "3354960",
    "end": "3361280"
  },
  {
    "text": "collision as we would call it so if i'm using k equals seven seven hash functions because of their requirement to be",
    "start": "3361280",
    "end": "3367599"
  },
  {
    "text": "pairwise independent they will always give me seven different indexes to set",
    "start": "3367599",
    "end": "3373520"
  },
  {
    "text": "now with murmur that's really easy to do with and i can refer to this because i use the redis implementation and i",
    "start": "3373520",
    "end": "3378880"
  },
  {
    "text": "looked at it it depends on your implementation you might build your own i use the implementation provided with redis redis",
    "start": "3378880",
    "end": "3385359"
  },
  {
    "text": "has native support for bloom filters so that's all taken care of for me i didn't make sure of that",
    "start": "3385359",
    "end": "3392880"
  },
  {
    "text": "you wanted the estimate on the number of distinct reports to be accurate how expensive would it be to overestimate n",
    "start": "3393359",
    "end": "3401040"
  },
  {
    "text": "so overestimating n costs you space complexity it makes the filter bigger it does not alter the time",
    "start": "3401040",
    "end": "3407599"
  },
  {
    "text": "complexity time complexity is largely controlled by k the number of hashes that you need to do in order to perform",
    "start": "3407599",
    "end": "3412880"
  },
  {
    "text": "an insertion or a query so overestimating n basically just costs you more ram so",
    "start": "3412880",
    "end": "3418559"
  },
  {
    "text": "given that we created our current filter at 8 gig like the next logical step on digital ocean is a machine with 16 gig",
    "start": "3418559",
    "end": "3423680"
  },
  {
    "text": "we may as well just like whack the filter all the way up to you know 15 gig or something so we could hugely overestimate n it's only ever going to",
    "start": "3423680",
    "end": "3430559"
  },
  {
    "text": "cost you memory storage space couldn't someone send random data to the",
    "start": "3430559",
    "end": "3436720"
  },
  {
    "text": "report uri and thus fill your bloom filter with ones so yeah like if we kind of take a step",
    "start": "3436720",
    "end": "3442480"
  },
  {
    "text": "further back from that question which is like the first part couldn't someone send random data that's a problem that we've been dealing with since day one",
    "start": "3442480",
    "end": "3449040"
  },
  {
    "text": "report uri operates an api on the internet that's unauthenticated and allows you to just",
    "start": "3449040",
    "end": "3454960"
  },
  {
    "text": "post data straight into our database it's like the dumbest idea in the history of the world um so we've been",
    "start": "3454960",
    "end": "3460640"
  },
  {
    "text": "dealing with the problem of people sending us crappy data for a very long time so like yes like the knock-on effect of",
    "start": "3460640",
    "end": "3466720"
  },
  {
    "text": "having a balloon filter is that someone could try and overpopulate our filter by just sending us heaps and heaps and heaps of unique reports but we have a",
    "start": "3466720",
    "end": "3473440"
  },
  {
    "text": "lot of other processes and mitigations in place to stop people being jerks on the internet because we know that there",
    "start": "3473440",
    "end": "3479280"
  },
  {
    "text": "are loads of jerks on the internet so yes it is a viable concern but we kind of solve that as a previous",
    "start": "3479280",
    "end": "3486839"
  },
  {
    "text": "concern when do you know you should reconfigure the bloom filter a certain percentage of bits in the",
    "start": "3486839",
    "end": "3492480"
  },
  {
    "text": "balloon filter set to one so this is another really good question there is um there is a method of",
    "start": "3492480",
    "end": "3498160"
  },
  {
    "text": "calculating the the population of the filter as we call it so you can look at the filter look at the configuration",
    "start": "3498160",
    "end": "3503920"
  },
  {
    "text": "parameters and how many bits are set and from that you can estimate how many items are currently in the filter based",
    "start": "3503920",
    "end": "3508960"
  },
  {
    "text": "on the probability of a bit having been set or not so yes you can run a calculation",
    "start": "3508960",
    "end": "3514160"
  },
  {
    "text": "on the filter and guess the population of like accurately guess the population of the filter and then from that you can",
    "start": "3514160",
    "end": "3520400"
  },
  {
    "text": "determine is our false positive probability still accurate or not because if your filter is overpopulated",
    "start": "3520400",
    "end": "3525599"
  },
  {
    "text": "you know that you're going to be getting a lot more false positives so you can use that calculation to say you know was i wrong and 7 billion was",
    "start": "3525599",
    "end": "3532160"
  },
  {
    "text": "too small i need to go larger when your balloon filter eventually",
    "start": "3532160",
    "end": "3537680"
  },
  {
    "text": "fills up how do you migrate data to a new bigger one you can't once a bloom filter has been created and",
    "start": "3537680",
    "end": "3543200"
  },
  {
    "text": "you've started that insertion process that is what you are stuck with you cannot increase the size of the",
    "start": "3543200",
    "end": "3549440"
  },
  {
    "text": "filter neither the width nor the depth if you're on a sketch because it would alter the queries and all items in there would be lost so once you've started",
    "start": "3549440",
    "end": "3556799"
  },
  {
    "text": "with a bloom filter that's what you're going to be using so you need to be reasonably accurate with",
    "start": "3556799",
    "end": "3562240"
  },
  {
    "text": "n like i said earlier is it possible to distribute the bloom filter across multiple servers to",
    "start": "3562240",
    "end": "3568720"
  },
  {
    "text": "continue scaling it um yeah there's no reason that you couldn't do that you would have to do",
    "start": "3568720",
    "end": "3574720"
  },
  {
    "text": "the insertions across all of the servers i guess but we just have one centralized redis cache on our internal",
    "start": "3574720",
    "end": "3581599"
  },
  {
    "text": "private network and all of our application servers talk to that so there's no reason that you couldn't do",
    "start": "3581599",
    "end": "3587119"
  },
  {
    "text": "that but it would increase the time complexity of an insertion because now you would need to pass it to you know x",
    "start": "3587119",
    "end": "3593359"
  },
  {
    "text": "number of uh bloom filters however many you're operating so i wouldn't do that maybe maybe there's a",
    "start": "3593359",
    "end": "3600720"
  },
  {
    "text": "scenario where it would make sense for you but myself i wouldn't do that now there are still more questions and",
    "start": "3600720",
    "end": "3606160"
  },
  {
    "text": "people here may have questions thank you for asking them but i'm out of time so i'm going to be hanging around for the rest of the day if you want to",
    "start": "3606160",
    "end": "3612160"
  },
  {
    "text": "talk more about probabilistic data structures come and find me i hope to see you all at the party tonight",
    "start": "3612160",
    "end": "3618480"
  },
  {
    "text": "thank you very much",
    "start": "3618480",
    "end": "3621880"
  },
  {
    "text": "you",
    "start": "3628319",
    "end": "3630400"
  }
]