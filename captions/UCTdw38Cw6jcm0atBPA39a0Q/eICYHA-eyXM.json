[
  {
    "start": "0",
    "end": "126000"
  },
  {
    "text": "so welcome to this talk on the c+ optimization for c plus 11 and onwards",
    "start": "12020",
    "end": "17990"
  },
  {
    "text": "so it's not just 11 but using features of 11 so why whatever what am I going to",
    "start": "17990",
    "end": "24110"
  },
  {
    "text": "talk about and why am i talking about this well one of the reasons that people use HEPA but it's because they want",
    "start": "24110",
    "end": "29869"
  },
  {
    "text": "performance they want control of what they're doing and as I've gone through",
    "start": "29869",
    "end": "35030"
  },
  {
    "text": "people have I've been looking at performance stuff and people said Oh certain things are much faster than",
    "start": "35030",
    "end": "40220"
  },
  {
    "text": "something else you should always do this and I'm going on hold on hold on there's a lot of myth and folklore about this",
    "start": "40220",
    "end": "46100"
  },
  {
    "text": "and so maybe there's a better way of thinking about this one and people saying oh you should always use plus",
    "start": "46100",
    "end": "51559"
  },
  {
    "text": "plus a rather than a plus plus because it's faster and it's better and really",
    "start": "51559",
    "end": "56600"
  },
  {
    "text": "ok well we find out where there is people say oh you should always be doing",
    "start": "56600",
    "end": "61730"
  },
  {
    "text": "a shift rather than a divide and whatever and that's going to make a difference so if you division by 4 for",
    "start": "61730",
    "end": "67310"
  },
  {
    "text": "instance you'll find almost all the compilers go oh it's a division by 4 I'll do the shift so actually makes no",
    "start": "67310",
    "end": "72890"
  },
  {
    "text": "difference why don't you just write what you intend rather than doing that one and how would you know well you have to measure people will say things like",
    "start": "72890",
    "end": "80600"
  },
  {
    "text": "avoiding array right because you can't cash an array and you can't use registers and it's lowers as well really",
    "start": "80600",
    "end": "85850"
  },
  {
    "text": "ok well maybe maybe it is maybe it's not but this all strikes me as rather sort of kind of low-level view of the world",
    "start": "85850",
    "end": "92180"
  },
  {
    "text": "and then people say oh we should be doing multiple threads really do you think that is that the solution maybe",
    "start": "92180",
    "end": "98689"
  },
  {
    "text": "that's actually not a solution maybe that's just another problem disguising yourself as a solution and what about",
    "start": "98689",
    "end": "105049"
  },
  {
    "text": "things like move semantics when are they appropriate how do they fit into this bigger picture of performance and",
    "start": "105049",
    "end": "110060"
  },
  {
    "text": "optimization and how the cache is fitting here cache friendly programming great sounds like a good idea what does",
    "start": "110060",
    "end": "116060"
  },
  {
    "text": "that actually mean and when is it appropriate so what I've come to the conclusion is that actually that there",
    "start": "116060",
    "end": "121579"
  },
  {
    "text": "is a whole process that performance and optimization is not a thing it's a process it's a method it's a way of",
    "start": "121579",
    "end": "128840"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "thinking and so this is the story that I sort of kind of find out find myself",
    "start": "128840",
    "end": "135100"
  },
  {
    "text": "repeating my head again and again when I'm lying awake at night is what do I do",
    "start": "135100",
    "end": "141950"
  },
  {
    "text": "about an application you start off with the application it's too slow some definition of whatever to slow",
    "start": "141950",
    "end": "147349"
  },
  {
    "text": "eased in I mean how fast is fast enough is the first question I ask does it really matter you've shaved 2",
    "start": "147349",
    "end": "153319"
  },
  {
    "text": "nanoseconds of the startup time of your program possibly not so you start profiling or timing and you start",
    "start": "153319",
    "end": "159920"
  },
  {
    "text": "looking that you go ok fine so we at least got the point we're now measuring some people don't even get to that point",
    "start": "159920",
    "end": "165560"
  },
  {
    "text": "they start just sort of oh it's obviously there I'm just making some guesses as to where things are probably not a good idea to guess these days",
    "start": "165560",
    "end": "171650"
  },
  {
    "text": "machines and compilers are quite complex things so first of all why don't we go",
    "start": "171650",
    "end": "177410"
  },
  {
    "text": "and find the unnecessary calls and operations you end up calling a lot of stuff that you don't need to call your",
    "start": "177410",
    "end": "183799"
  },
  {
    "text": "calling a database in the loop or you're doing something that you don't need to do and often these are quite surprising",
    "start": "183799",
    "end": "191840"
  },
  {
    "text": "you go really that takes the time I didn't realize that was going to be the thing that's slowing it down and when you get rid of that maybe then you're",
    "start": "191840",
    "end": "197090"
  },
  {
    "text": "fast enough so what is fast enough first question there's no point in",
    "start": "197090",
    "end": "202909"
  },
  {
    "text": "making things just faster all the time and because if that doesn't actually yield any value for your business then",
    "start": "202909",
    "end": "209870"
  },
  {
    "text": "don't stop when it's fast enough first of all define what fast enough is notice",
    "start": "209870",
    "end": "216319"
  },
  {
    "text": "that this here is in fact mostly just waste there isn't stuff this is just",
    "start": "216319",
    "end": "222889"
  },
  {
    "text": "getting rid of things it's not like oh I've profiled this and loading this configuration file is the problem this",
    "start": "222889",
    "end": "228799"
  },
  {
    "text": "is like though okay maybe that isn't if it was loading another file why am i loading that don't go and optimize the",
    "start": "228799",
    "end": "235430"
  },
  {
    "text": "loading of that file don't load it it's waste these are not really the parts of",
    "start": "235430",
    "end": "240590"
  },
  {
    "text": "replication and so and to use venkat stuff from the keynote this morning this",
    "start": "240590",
    "end": "245959"
  },
  {
    "text": "is you've failed to be simple you've done more than you need it's not actually the essential part of your",
    "start": "245959",
    "end": "252260"
  },
  {
    "text": "application usually just get rid of the stuff you don't need and get rid of all that locking well then can we actually",
    "start": "252260",
    "end": "257269"
  },
  {
    "text": "get down to the application itself so that's the first thing get rid of waste because that's just not helpful doesn't",
    "start": "257269",
    "end": "264440"
  },
  {
    "text": "doesn't make it faster eliminate it the next thing is right okay now I start running my profiler and I find out that",
    "start": "264440",
    "end": "270889"
  },
  {
    "text": "malloc or mem comp or mem copy is at the top this is quite common I've seen",
    "start": "270889",
    "end": "277610"
  },
  {
    "text": "people doing stuff in telephony and we worked out there was a whole 130 calls to malik for every",
    "start": "277610",
    "end": "284300"
  },
  {
    "text": "request that came in it was just like ridiculous amount of memory allocation why why were they doing all that lot",
    "start": "284300",
    "end": "291099"
  },
  {
    "text": "well as you'll see as we go through Malik is really a bad thing to do in",
    "start": "291099",
    "end": "296300"
  },
  {
    "text": "many ways it's also a lack of simplicity because first of all Malik Malik is a",
    "start": "296300",
    "end": "302060"
  },
  {
    "text": "way of saying please go and find me some memory that's not in use which is",
    "start": "302060",
    "end": "307069"
  },
  {
    "text": "another way of saying police might find me some memory that's cold and not in the cash all right so deliberately make",
    "start": "307069",
    "end": "313520"
  },
  {
    "text": "me go and do something that's slow right okay so one by the time I found all that lot I've gone off I've done this one now",
    "start": "313520",
    "end": "319070"
  },
  {
    "text": "I've got empty memory so the next thing I now have to do is to go and initialize it that means copying a load of stuff in",
    "start": "319070",
    "end": "324590"
  },
  {
    "text": "I have to do that again right okay and the reason I'm doing this Malik is because I've destroyed the previous one",
    "start": "324590",
    "end": "330110"
  },
  {
    "text": "so then gonna throw it all away so I'm doing an allocation and a copy and an initialization and throwing it away",
    "start": "330110",
    "end": "335360"
  },
  {
    "text": "rather than keeping the original one so actually again this is just one of these",
    "start": "335360",
    "end": "340759"
  },
  {
    "text": "unnecessary calls you could doing keep doing this why are you doing that one don't go and make Malik faster just by",
    "start": "340759",
    "end": "347539"
  },
  {
    "text": "installing je Malik or the Google one or whatever get rid of it it's fast don't",
    "start": "347539",
    "end": "355520"
  },
  {
    "text": "do this one work out why you do the one here mem copy mem comp you may be",
    "start": "355520",
    "end": "361759"
  },
  {
    "text": "surprised by some by finding some of these you may for instance find out that this is really do two temporaries it's not what you're doing you've done string",
    "start": "361759",
    "end": "368539"
  },
  {
    "text": "1 plus string 2 plus string 3 oh that appears to be doing an awful lot of memory allocation why we're doing that",
    "start": "368539",
    "end": "375139"
  },
  {
    "text": "one why are we using lots of temporaries maybe we can avoid that one maybe you",
    "start": "375139",
    "end": "382669"
  },
  {
    "text": "can use in placement maybe remove semantics we'll come and help us so this is one of the reason we need to look and see promise 11 for that there are",
    "start": "382669",
    "end": "389240"
  },
  {
    "text": "differences between GCC version 4 and GCC version 5 on this one if you're using visual studio you're already in",
    "start": "389240",
    "end": "395150"
  },
  {
    "text": "the GCC 5 world right now we've got rid of a whole pile of waste and stuff we",
    "start": "395150",
    "end": "402320"
  },
  {
    "text": "don't have to do and we got rid of some of that sort of non simple stuff we actually end up with the application",
    "start": "402320",
    "end": "407570"
  },
  {
    "text": "itself the real stuff the real algorithm and the thing we need to do at this point we now start doing it now",
    "start": "407570",
    "end": "415130"
  },
  {
    "text": "it's worth starting to worry about my algorithms now am I going to be dealing with order and order n-squared order log",
    "start": "415130",
    "end": "422480"
  },
  {
    "text": "an order wine and all that kind of stuff becomes more relevant because we've got rid of the waste we've got rid of the stuff that's that's",
    "start": "422480",
    "end": "428870"
  },
  {
    "text": "hiding the real thing maybe caching is important to us caching at the application level but this",
    "start": "428870",
    "end": "434150"
  },
  {
    "text": "requires us to know about things like our operational profile by which I mean knowing what operations you have the",
    "start": "434150",
    "end": "441050"
  },
  {
    "text": "access patterns is this V dominated are you right dominated what's actually",
    "start": "441050",
    "end": "446330"
  },
  {
    "text": "happening you need domain knowledge at this point to know how big your data is",
    "start": "446330",
    "end": "451520"
  },
  {
    "text": "how its accessed that's really where you're going to get a lot of your optimizations at this level and right",
    "start": "451520",
    "end": "457340"
  },
  {
    "text": "there on the bottom level if you really need to go faster than out then you can start worrying about things like memory bandwidth and data layout and cache or",
    "start": "457340",
    "end": "464330"
  },
  {
    "text": "web programming but it doesn't make a difference if you're doing these ones here so back to this a lot of these",
    "start": "464330",
    "end": "471320"
  },
  {
    "text": "things here are really just picking parts out of here at the wrong time and",
    "start": "471320",
    "end": "476560"
  },
  {
    "text": "trying to do stuff down here when you're making mistakes up here is not going to",
    "start": "476560",
    "end": "481850"
  },
  {
    "text": "help you so for me performance is a process by which you just chew your way",
    "start": "481850",
    "end": "487550"
  },
  {
    "text": "down get rid of stuff you don't need then start working on the real stuff then you can get into your algorithm mix",
    "start": "487550",
    "end": "493640"
  },
  {
    "text": "and then you can start saying and now I can make a machine go fast right well that's the talk really okay are you want",
    "start": "493640",
    "end": "500630"
  },
  {
    "start": "500000",
    "end": "500000"
  },
  {
    "text": "more right it's a multi-level problem you started architecture and this your",
    "start": "500630",
    "end": "507770"
  },
  {
    "text": "design how do you actually design out some of these problems not how do you optimize them high just make sure they",
    "start": "507770",
    "end": "513620"
  },
  {
    "text": "don't actually happen or need I've not talked about domain knowledge knowing about access patterns structures etc how",
    "start": "513620",
    "end": "520070"
  },
  {
    "text": "do you use things like the STL the STL is really powerful you just well it's great use badly it's going to be slow",
    "start": "520070",
    "end": "525800"
  },
  {
    "text": "and I've got some lovely numbers to show you just how slow it can be a lot of applications do string handling badly it",
    "start": "525800",
    "end": "534320"
  },
  {
    "text": "can consume a lot of your time so a little bit of that maybe memory allocation some stuff about mu semantics",
    "start": "534320",
    "end": "540530"
  },
  {
    "text": "we also need to look at modern machines CPUs compilers and what do they do and she's get some tools get start profiling",
    "start": "540530",
    "end": "549690"
  },
  {
    "text": "see what you've got that's the first thing you need to do is to learn some of those tools right I'm",
    "start": "549690",
    "end": "557880"
  },
  {
    "start": "555000",
    "end": "555000"
  },
  {
    "text": "going to go through this relatively quickly and recovered some of that this morning but modern CPUs have got long",
    "start": "557880",
    "end": "564240"
  },
  {
    "text": "pipe lines they do lots of things in parallel pipeline stalls are expensive",
    "start": "564240",
    "end": "569279"
  },
  {
    "text": "so you have to make sure that you can keep the CPU busy it has a lot of branch prediction run things in there trying to",
    "start": "569279",
    "end": "575730"
  },
  {
    "text": "do that one you may have for six or more instructions in parallel if it's available",
    "start": "575730",
    "end": "581279"
  },
  {
    "text": "that was the data fantasy stuff we took and Ray was talking about out of order execution so what you write isn't",
    "start": "581279",
    "end": "588180"
  },
  {
    "text": "necessarily what happens it's very difficult to see what happens and things",
    "start": "588180",
    "end": "593490"
  },
  {
    "text": "may start in different orders basically what happens is at runtime it builds a hardware dependency graph of what those",
    "start": "593490",
    "end": "599339"
  },
  {
    "text": "things are and does whatever it can branch prediction very important to",
    "start": "599339",
    "end": "604380"
  },
  {
    "text": "avoid the pipeline stalls it's a well study thing I think the relate latest",
    "start": "604380",
    "end": "609740"
  },
  {
    "text": "AMD Rison processor has got a neural network in it for doing branch",
    "start": "609740",
    "end": "615750"
  },
  {
    "text": "prediction that's how important it is because a branch prediction if you've",
    "start": "615750",
    "end": "621300"
  },
  {
    "text": "got a stall 15 20 cycles or 20 cycles of stall six instructions in parallel Wow",
    "start": "621300",
    "end": "628260"
  },
  {
    "text": "do the math and you end up with 120 cycles 120 instructions you just not to done that's why it's important modern",
    "start": "628260",
    "end": "636390"
  },
  {
    "text": "processes may even decide actually I can't quite work this one out but actually why don't I just work out both of them and then work out what the",
    "start": "636390",
    "end": "643290"
  },
  {
    "text": "result was at the end when the result of the eve of the conditional has come in I'll decide which of the two to keep",
    "start": "643290",
    "end": "650900"
  },
  {
    "text": "hyper-threading which is multiple cores and the same thing at the same time and also things like vectorization i've not",
    "start": "650900",
    "end": "657360"
  },
  {
    "text": "covered things like GPU here that's a whole other search and stuff and I'm not covering there here's the inside of an",
    "start": "657360",
    "end": "664890"
  },
  {
    "text": "Intel just to give you an idea of some of the complexity 56 entry instruction decode - so you can have it's got 56",
    "start": "664890",
    "end": "671850"
  },
  {
    "text": "instructions ahead it's looking at and it's splitting those up in 292 entries",
    "start": "671850",
    "end": "677040"
  },
  {
    "text": "and it's reordering though so if you think you know what's happening the answer is you don't",
    "start": "677040",
    "end": "682649"
  },
  {
    "text": "it's don't even worry about it they've they've done all that lot for you and",
    "start": "682649",
    "end": "687660"
  },
  {
    "text": "then you've got reservation stations so if you're used to seeing register one there is no register one register one is",
    "start": "687660",
    "end": "695040"
  },
  {
    "text": "actually a it's essentially like a variable in a C or C++ program it's a name for a piece of silicon currently a",
    "start": "695040",
    "end": "702180"
  },
  {
    "text": "slot on the stack and so register one can mean lots of different places and there can be multiple things called register one at any one time and it has",
    "start": "702180",
    "end": "709079"
  },
  {
    "text": "eight things it can be doing in parallel here with branches and divides and whatever so the answer is it's really",
    "start": "709079",
    "end": "714959"
  },
  {
    "text": "quite complex insight trying to second-guess that lot don't worry about it I'm not talking at this level but",
    "start": "714959",
    "end": "721079"
  },
  {
    "text": "this is to understand the sort of kind of machines your programming",
    "start": "721079",
    "end": "725899"
  },
  {
    "start": "724000",
    "end": "724000"
  },
  {
    "text": "interestingly enough instructions are free but memory bandwidth is not so",
    "start": "726500",
    "end": "731970"
  },
  {
    "text": "here's a graph it could be any process one here I haven't choose power and this is the growth in terms of gigaflops per",
    "start": "731970",
    "end": "738899"
  },
  {
    "text": "second this is basic sort of raw CPU power going up like this across generations and look at the the memory",
    "start": "738899",
    "end": "745800"
  },
  {
    "text": "bandwidth going up here it barely goes off and there was a bit of a jump here because they did some special stuff but",
    "start": "745800",
    "end": "751440"
  },
  {
    "text": "but basically using C they you can throw a lot of instructions of this lot CPUs you're spending most of your time",
    "start": "751440",
    "end": "757260"
  },
  {
    "text": "waiting for memory one of the consequences of this is that actually",
    "start": "757260",
    "end": "762600"
  },
  {
    "text": "only ten or twenty percent of the time is actually the CPU doing real work if you try to get some optimization of that",
    "start": "762600",
    "end": "770730"
  },
  {
    "text": "10 or 20 percent by turning on oh three and using lots of compiler options the compiler can only help you in bits of",
    "start": "770730",
    "end": "776610"
  },
  {
    "text": "this unfortunately it's your job to try and deal with this part the compiler can't help you with that",
    "start": "776610",
    "end": "782720"
  },
  {
    "text": "so there is plenty of room for you to optimize and things the compiler can't",
    "start": "782720",
    "end": "788730"
  },
  {
    "text": "do so it's up to you modern machines have cache hierarchies in them so here's",
    "start": "788730",
    "end": "794970"
  },
  {
    "start": "791000",
    "end": "791000"
  },
  {
    "text": "a fairly typical cache hierarchy multiple cores like this l1 l2 and l3 caches and main Ram one two three cycles",
    "start": "794970",
    "end": "804839"
  },
  {
    "text": "here five to 20 at least this one here a shared cache of however many megabytes",
    "start": "804839",
    "end": "810120"
  },
  {
    "text": "here and main memory hundred three hundred Michels what happened like that modern machines are really good at doing this",
    "start": "810120",
    "end": "815920"
  },
  {
    "text": "they're designed to do that if you try to do concurrency by the way you're then",
    "start": "815920",
    "end": "821140"
  },
  {
    "text": "trying to do this across here and that's slow so this is why you don't want to be",
    "start": "821140",
    "end": "826690"
  },
  {
    "text": "doing concurrency and sharing of things reading stuff up and down like that showing across with that is not going to",
    "start": "826690",
    "end": "832450"
  },
  {
    "text": "help you here is a an interesting set of numbers so this is a gate in a chain",
    "start": "832450",
    "end": "841090"
  },
  {
    "text": "cause thing but you'll find this in lots of other places this is a logarithmic scale so notice these are orders of",
    "start": "841090",
    "end": "847660"
  },
  {
    "text": "magnitude like this and we're starting off at simple register operations less",
    "start": "847660",
    "end": "853060"
  },
  {
    "text": "than one cycle because we can have month of ones they're set row memory writes getting a branch prediction right one or",
    "start": "853060",
    "end": "859540"
  },
  {
    "text": "two cycles getting it wrong 10 to 20 cycles so it's an order of magnitude they're noticing things like division is",
    "start": "859540",
    "end": "866830"
  },
  {
    "text": "still slow it's nobody's really found a way of making that faster calls here are about the same as that which is",
    "start": "866830",
    "end": "874630"
  },
  {
    "text": "interesting you can get some things also stuff like all this floating-point stuff like this do you realize that square",
    "start": "874630",
    "end": "881020"
  },
  {
    "text": "root is actually sort of kind of in here it's actually really rather fast notice",
    "start": "881020",
    "end": "886720"
  },
  {
    "text": "this one down here by the way we've got allocation and de-allocation small objects hundreds of cycles this is your",
    "start": "886720",
    "end": "895180"
  },
  {
    "text": "malloc thing so and that's basically without taking into account all the cash",
    "start": "895180",
    "end": "900340"
  },
  {
    "text": "effects because you're asking for cold memory so if you do that one here so you may actually be up here but notice",
    "start": "900340",
    "end": "905830"
  },
  {
    "text": "you'll now have many orders of magnitude out of here the really slow ones thread context switch context switches are",
    "start": "905830",
    "end": "912910"
  },
  {
    "text": "Attica of utter killer and performance so guess what if you're single threaded you don't suffer that most of the time",
    "start": "912910",
    "end": "918250"
  },
  {
    "text": "good throwing an exception that's not a performance option please don't do that in performance code that's for error",
    "start": "918250",
    "end": "924850"
  },
  {
    "text": "handling context switch here just the direct cost but without all the other ones that cache misses there kernel call",
    "start": "924850",
    "end": "931510"
  },
  {
    "text": "well you're not gonna be making system calls in tight loop but everything else here if you got rid of all those ones",
    "start": "931510",
    "end": "937630"
  },
  {
    "text": "you notice that memory allocation is the Dominator the other thing about this one",
    "start": "937630",
    "end": "942700"
  },
  {
    "text": "is we have got orders of magnitude difference in here and if you try to do this with threads",
    "start": "942700",
    "end": "947970"
  },
  {
    "text": "threads are going to give you an order of magnitude because you've got eight calls it's an order of magnitude you can't make up for this getting for this",
    "start": "947970",
    "end": "954940"
  },
  {
    "text": "fast just by throwing some threads at it and guess what the threads are actually can make things worse so first of all",
    "start": "954940",
    "end": "961000"
  },
  {
    "text": "get your single code the single threaded core code working quickly and then work out how to paralyze it without",
    "start": "961000",
    "end": "967210"
  },
  {
    "text": "contention so that's first thing stick over here and try and get remembering",
    "start": "967210",
    "end": "972220"
  },
  {
    "text": "allocation that's the other part of the talk okay so we'll carry on with that measurement basic kind of stuff about",
    "start": "972220",
    "end": "980830"
  },
  {
    "start": "976000",
    "end": "976000"
  },
  {
    "text": "orders of magnitude so you may have order n which is linear order one which",
    "start": "980830",
    "end": "986680"
  },
  {
    "text": "is flat it seemed more like cash stuff this would be linear search you may have a binary algorithm order log n order N",
    "start": "986680",
    "end": "993460"
  },
  {
    "text": "squared like this which would be sort of bubble sort kind of stuff one of the things to know with that is there's",
    "start": "993460",
    "end": "998920"
  },
  {
    "text": "always a Mach multiplicative factor K and for small n you may well find that K",
    "start": "998920",
    "end": "1004680"
  },
  {
    "text": "dominates so for small values of n down here your fancy hash algorithm might",
    "start": "1004680",
    "end": "1009840"
  },
  {
    "text": "actually be slower than a linear search your quick sort here in terms of log n",
    "start": "1009840",
    "end": "1016140"
  },
  {
    "text": "or n log n like this is not necessarily gonna be faster than linear search for small ones Rob Pike a",
    "start": "1016140",
    "end": "1021300"
  },
  {
    "text": "long time ago said for a small n this will be better and n is usually small so",
    "start": "1021300",
    "end": "1027750"
  },
  {
    "text": "again small numbers law from and Ray this morning so don't always go for the most complicated algorithm work out",
    "start": "1027750",
    "end": "1034530"
  },
  {
    "text": "whether you actually in have and big enough to merit some of those larger ones you're trading stuff off you can't",
    "start": "1034530",
    "end": "1043199"
  },
  {
    "text": "have everything fast you have decide what's going to be fast and what you're prepared to be slow that's knowing your",
    "start": "1043200",
    "end": "1049020"
  },
  {
    "text": "operational profile knowing your patterns if you have a read dominated system then you make read fast and you",
    "start": "1049020",
    "end": "1054630"
  },
  {
    "text": "make write slow in comparison that's the trade-off that you make for instance if you're going to say I'm going to keep",
    "start": "1054630",
    "end": "1059880"
  },
  {
    "text": "all my data in sorted order because I only ever update it once a day that's great it makes read really fast and once",
    "start": "1059880",
    "end": "1065610"
  },
  {
    "text": "a day you do this sort but you're not going to go I'm going to pay I'm going to do linear search all the time I'm",
    "start": "1065610",
    "end": "1070740"
  },
  {
    "text": "going to take it into binary simple one here the game's programmers have a",
    "start": "1070740",
    "end": "1077390"
  },
  {
    "start": "1074000",
    "end": "1074000"
  },
  {
    "text": "terminology for this array of struct instructor raise you will see this quite a lot and",
    "start": "1077390",
    "end": "1083010"
  },
  {
    "text": "once you start seeing this pattern you'll see it a lot if any of you deal with Time series databases this pops up",
    "start": "1083010",
    "end": "1088380"
  },
  {
    "text": "all the time by the way are you gonna have a row store or a column store if you ever done anything with analytics",
    "start": "1088380",
    "end": "1093690"
  },
  {
    "text": "databases exactly the same problem but at the architectural scale so if I have",
    "start": "1093690",
    "end": "1099390"
  },
  {
    "text": "a struct at house number fields in the eye base and I'm just going through here and checking something like this this",
    "start": "1099390",
    "end": "1105179"
  },
  {
    "text": "means that every time we go through here on into check here and then jump to this one and then up to this one and then jump to this one and I'm reading the",
    "start": "1105179",
    "end": "1113610"
  },
  {
    "text": "whole of X and using only a little bit of X in this one here I'm having all of",
    "start": "1113610",
    "end": "1119370"
  },
  {
    "text": "the integers and all the floats essentially in columns rather than rows and now my loop says oh I'm going to go",
    "start": "1119370",
    "end": "1126210"
  },
  {
    "text": "through just this comp and this means that I process every byte I read and",
    "start": "1126210",
    "end": "1132299"
  },
  {
    "text": "there's a term called read amplification which is if I want to read one byte what",
    "start": "1132299",
    "end": "1137639"
  },
  {
    "text": "I end up reading 64 bytes in order to do this one then I've got a read amplification a factor of 64 that's not",
    "start": "1137639",
    "end": "1143669"
  },
  {
    "text": "good I want to read 64 bytes and use all of them it's like carrying a suitcase and using only one thing yeah so you",
    "start": "1143669",
    "end": "1150539"
  },
  {
    "text": "have to be careful about this one this structure of arrays is often what you'll find the games programmers are using it",
    "start": "1150539",
    "end": "1156360"
  },
  {
    "text": "also happens to say look everything is now dense and linear and memory and vectorization can help me compiler can",
    "start": "1156360",
    "end": "1161880"
  },
  {
    "text": "do that automatically could be sse or AVX or they're even versions now up to 512 why is that useful well instead of",
    "start": "1161880",
    "end": "1171510"
  },
  {
    "text": "reading one integer at a time like this I can now read for two time so instead",
    "start": "1171510",
    "end": "1178289"
  },
  {
    "text": "of going backwards and forwards every time I can pick up four at a time or eight at a time it's AVX",
    "start": "1178289",
    "end": "1184580"
  },
  {
    "text": "GCC will do this sort of vectorization of loops if it sees this memory is close",
    "start": "1184580",
    "end": "1190169"
  },
  {
    "text": "together but you're only going to know whether you can do this if you know your access patterns let's look at some",
    "start": "1190169",
    "end": "1198419"
  },
  {
    "start": "1197000",
    "end": "1197000"
  },
  {
    "text": "generated code so here is a simple summation loop like this if I compile this with just the ordinary with no",
    "start": "1198419",
    "end": "1204630"
  },
  {
    "text": "vectorization I'm gonna add and then I'm going to add and move around four bytes",
    "start": "1204630",
    "end": "1210210"
  },
  {
    "text": "at a time if you look at the oh three vectorized version and this parallel ad here and I'm doing 16",
    "start": "1210210",
    "end": "1216850"
  },
  {
    "text": "so I'm doing 4 at a time on my machine that's two and a half times faster on that laptop it's almost for free it's",
    "start": "1216850",
    "end": "1224530"
  },
  {
    "text": "just because I've laid the memory out in the right direction I haven't done anything else I've just put it in a way that allows the works well with the",
    "start": "1224530",
    "end": "1230350"
  },
  {
    "text": "machine factor to not so this array of structs structure of",
    "start": "1230350",
    "end": "1237310"
  },
  {
    "text": "arrays you can end up structuring your data if you know about your access",
    "start": "1237310",
    "end": "1242740"
  },
  {
    "text": "patterns so if I have back turn to this thing here with many fields like this",
    "start": "1242740",
    "end": "1248650"
  },
  {
    "text": "maybe I'm only using one commonly it might be something like the key or a timestamp or something like that well",
    "start": "1248650",
    "end": "1255070"
  },
  {
    "text": "why don't they just say here are the columns that I'm using most of the time and I'll separate those columns away the",
    "start": "1255070",
    "end": "1260890"
  },
  {
    "text": "hot columns away from the cold columns so that way I can do that one here so",
    "start": "1260890",
    "end": "1266710"
  },
  {
    "text": "that's my job is just to know that the compiler can't know that one you may be",
    "start": "1266710",
    "end": "1273070"
  },
  {
    "text": "able to measure it at run time but that's too late for the compiler you can separate out the hot columns and the other ones here then what will happen is",
    "start": "1273070",
    "end": "1280390"
  },
  {
    "text": "that the ones that you're accessing like this your working set is done for you by the caching Hardware and now you go look",
    "start": "1280390",
    "end": "1287080"
  },
  {
    "text": "ok these rows and these ones here are held in in the fast memory everything else is now cold so you're using your",
    "start": "1287080",
    "end": "1294880"
  },
  {
    "text": "machine as well as possible you're now dealing with that one two three cycles access rather than 100 or 300 cycles",
    "start": "1294880",
    "end": "1301810"
  },
  {
    "text": "it's two orders of magnitude by doing this potentially that's a it's a good",
    "start": "1301810",
    "end": "1306850"
  },
  {
    "text": "start again just reordering your data strength reduction one of Andres",
    "start": "1306850",
    "end": "1313690"
  },
  {
    "text": "favorites eliminating those operations we talked about that one reducing the number of them changing expensive to",
    "start": "1313690",
    "end": "1320440"
  },
  {
    "text": "less expensive ones sometimes we can batch stuff up loop unrolling it's a classic example I put it in more for",
    "start": "1320440",
    "end": "1327340"
  },
  {
    "text": "just a reminder rather than saying this is something you should think about doing but you should think about doing",
    "start": "1327340",
    "end": "1332650"
  },
  {
    "text": "it but it's guess what everyone knows about that one so down to this story we",
    "start": "1332650",
    "end": "1340150"
  },
  {
    "start": "1336000",
    "end": "1336000"
  },
  {
    "text": "started off with you get rid of the stupid things and then start looking at the memory allocations and temporaries this is where things like move semantics",
    "start": "1340150",
    "end": "1346690"
  },
  {
    "text": "come in useful move semantics in C++ 11 are a way of",
    "start": "1346690",
    "end": "1352600"
  },
  {
    "text": "reducing some of the problems that C+ 0-3 hads 0-3 said ah I don't know what",
    "start": "1352600",
    "end": "1358300"
  },
  {
    "text": "temporaries are there was nothing in the language about temporaries so if you did string 1 plus string 2 and you returned",
    "start": "1358300",
    "end": "1364090"
  },
  {
    "text": "this this temporary it treated that temporary in exactly the same way as if",
    "start": "1364090",
    "end": "1369580"
  },
  {
    "text": "it was an ordinary variable you couldn't do anything with it well wouldn't it be nice if you say look it's a temporary",
    "start": "1369580",
    "end": "1374860"
  },
  {
    "text": "it's about to go away why do I have to allocate memory copy it out and then destroy the original that just seems",
    "start": "1374860",
    "end": "1380320"
  },
  {
    "text": "like wrong that's we got malloc oh that's not gonna be fast oh copying well",
    "start": "1380320",
    "end": "1385390"
  },
  {
    "text": "that seems like a waste of time then I have to throw it away and then carry on doing it madness madness",
    "start": "1385390",
    "end": "1390910"
  },
  {
    "text": "so with C++ 11 move semantics came in and said well actually why don't I just take the stuff out of the temporary and",
    "start": "1390910",
    "end": "1397510"
  },
  {
    "text": "move it where I want Auto pointer was introduced in 98 had moved semantics and",
    "start": "1397510",
    "end": "1403870"
  },
  {
    "text": "fought the language all the way unique pointer is its replacement and has got that built in our value references move",
    "start": "1403870",
    "end": "1411460"
  },
  {
    "text": "construct and move up move assignment operators similarly so what does it look like under the covers so the 98 version",
    "start": "1411460",
    "end": "1419920"
  },
  {
    "start": "1415000",
    "end": "1415000"
  },
  {
    "text": "would say well I've got a string so I've got this X here that has a pointer to an array of data like this so pointing to",
    "start": "1419920",
    "end": "1426520"
  },
  {
    "text": "room data here if I return one by value it'll end up copying it so what happens",
    "start": "1426520",
    "end": "1432880"
  },
  {
    "text": "it says alright you've got this temporary here I'll do the allocation I'll do the copy I'll assign it and then",
    "start": "1432880",
    "end": "1438970"
  },
  {
    "text": "delete the original so allocate copying",
    "start": "1438970",
    "end": "1444130"
  },
  {
    "text": "free all those kind of threes that's just wasted whereas in the cPanel 11",
    "start": "1444130",
    "end": "1449590"
  },
  {
    "text": "version it says okay well since I'm going away when I just go chunk don't",
    "start": "1449590",
    "end": "1455110"
  },
  {
    "text": "steal it so you've just pulled that pointer across and says that's mine and this now has nothing in it so this does",
    "start": "1455110",
    "end": "1461740"
  },
  {
    "text": "nothing so we've eliminated this this extra waste and that's available to you",
    "start": "1461740",
    "end": "1467080"
  },
  {
    "text": "super bus 11 all the standard classes do this one consider looking at your own",
    "start": "1467080",
    "end": "1473020"
  },
  {
    "text": "classes to do this one if you have temporaries around here's the implementation detail what does it look",
    "start": "1473020",
    "end": "1479440"
  },
  {
    "start": "1476000",
    "end": "1476000"
  },
  {
    "text": "like a of constructor like this just as pointer manipulation it says right okay so I'm",
    "start": "1479440",
    "end": "1485109"
  },
  {
    "text": "pointing that the same thing as he is and I turn his pointer off with null the move assignment says I need to delete",
    "start": "1485109",
    "end": "1491830"
  },
  {
    "text": "what I've got first before doing that one so that's a classic optimization",
    "start": "1491830",
    "end": "1498840"
  },
  {
    "text": "which leads to the super lost 11 rule of zero you may have heard the rule of",
    "start": "1498840",
    "end": "1503919"
  },
  {
    "text": "three that says if you need one of destructor copy constructor copy assignment you probably need all three",
    "start": "1503919",
    "end": "1510749"
  },
  {
    "text": "that was what you did in 98 and then when move came along they turned into",
    "start": "1510749",
    "end": "1516190"
  },
  {
    "text": "the rule of five by the way you probably need all five including move operations to go like no that's just too much guys",
    "start": "1516190",
    "end": "1521320"
  },
  {
    "text": "why don't we just say we're only ever going to use things that coffee and move correctly so that's from a performance",
    "start": "1521320",
    "end": "1527859"
  },
  {
    "text": "point of view a good idea so I had a client that did this one and they speeded up their stuff by getting rid of",
    "start": "1527859",
    "end": "1534249"
  },
  {
    "text": "their own resource management and including all which didn't have move and replacing it by things like unique",
    "start": "1534249",
    "end": "1540609"
  },
  {
    "text": "pointer and they got a significant improvement in performance and code",
    "start": "1540609",
    "end": "1545799"
  },
  {
    "text": "maintainability because they just got rid of their code and the hurdle this point of management in it and just said unique point and get on with it",
    "start": "1545799",
    "end": "1552299"
  },
  {
    "text": "so you stand you value classes like string vector map if you do need to do",
    "start": "1552299",
    "end": "1558249"
  },
  {
    "text": "resource management use unique pointer and possibly shared pointer inside your own classes some examples of",
    "start": "1558249",
    "end": "1567809"
  },
  {
    "start": "1564000",
    "end": "1564000"
  },
  {
    "text": "memory allocation and how slow it can be I'm taking 10 million mints and doing",
    "start": "1567809",
    "end": "1573609"
  },
  {
    "text": "push back or insert into a container like this so I do 25 allocations on this",
    "start": "1573609",
    "end": "1578679"
  },
  {
    "text": "one with a vector it's totally allocated 134 Meg's but it's currently got 64",
    "start": "1578679",
    "end": "1584230"
  },
  {
    "text": "megabytes of that deck does a large number of these it's actually 40",
    "start": "1584230",
    "end": "1590230"
  },
  {
    "text": "megabytes divided by 512 is that many 78,000 so that's about what this one",
    "start": "1590230",
    "end": "1596109"
  },
  {
    "text": "here's deck is actually array of pages list an order set and set you can see",
    "start": "1596109",
    "end": "1603340"
  },
  {
    "text": "they're doing a load of allocation here so what you're really doing whenever you're doing insert into a set or another set or list is testing memory",
    "start": "1603340",
    "end": "1610330"
  },
  {
    "text": "allocator which and we know that memory allocations aren't far in comparison to other things so that's",
    "start": "1610330",
    "end": "1617230"
  },
  {
    "text": "not let's not do that too often we can make this faster since I have this thing",
    "start": "1617230",
    "end": "1623620"
  },
  {
    "text": "of trying to eliminate that memory allocation what happens if I say look I know how bigger this thing is going to be so why don't I say back to with the",
    "start": "1623620",
    "end": "1629860"
  },
  {
    "text": "reserve instead of reallocating what memory all the time do one reserve like this one allocation hey it reserves the",
    "start": "1629860",
    "end": "1636400"
  },
  {
    "text": "forty megabytes required once so I have a choice between 10 million memory",
    "start": "1636400",
    "end": "1642190"
  },
  {
    "text": "allocations or one there's a few orders of magnitude there notice also the",
    "start": "1642190",
    "end": "1648789"
  },
  {
    "text": "amount of memory this takes up this is got 24 or 40 bytes per element so you",
    "start": "1648789",
    "end": "1654010"
  },
  {
    "text": "can see that's 240 mega bytes there as opposed to 40 mega bytes there so I've also saved on memory which is going to",
    "start": "1654010",
    "end": "1660429"
  },
  {
    "text": "be useful in terms things like caching I get dense linear access with vectors",
    "start": "1660429",
    "end": "1665440"
  },
  {
    "text": "vector is your friend and vector reserve is also your friend that was writing for",
    "start": "1665440",
    "end": "1671470"
  },
  {
    "text": "what about reading so reading from containers I got some stuff here about I got a container I'm gonna do some random",
    "start": "1671470",
    "end": "1678850"
  },
  {
    "text": "numbers and do some random lookup inside it let's see what happens there let's try linear search let's look at some",
    "start": "1678850",
    "end": "1684820"
  },
  {
    "text": "specialist methods etc piece of code here don't need to understand all the",
    "start": "1684820",
    "end": "1690039"
  },
  {
    "text": "details I'm just doing a whole pile of push backs or inserts I'm just going around here I've got my clock if before",
    "start": "1690039",
    "end": "1696490"
  },
  {
    "text": "and afterwards and every thousand or so I'm just putting out the number so I can do graphs I'm gonna show you all the",
    "start": "1696490",
    "end": "1701799"
  },
  {
    "text": "detail of that one and I'm doing a linear find here this one by the way is",
    "start": "1701799",
    "end": "1706809"
  },
  {
    "text": "just to stop the optimizer getting rid of everything because all of these guys you're not using the result and will throw all the answers it might be very",
    "start": "1706809",
    "end": "1712870"
  },
  {
    "text": "careful when using profiling with optimized code well what does this tell",
    "start": "1712870",
    "end": "1719200"
  },
  {
    "text": "us so I'm doing 100 lookups small out of 10 million like this so vector looks",
    "start": "1719200",
    "end": "1725140"
  },
  {
    "text": "like this and list looks like this and set is even slower okay right interestingly enough there's about a",
    "start": "1725140",
    "end": "1731289"
  },
  {
    "text": "factor of seven or eight between the ones which store stuff densely together and these ones which don't these ones",
    "start": "1731289",
    "end": "1739360"
  },
  {
    "text": "use pointers notice that this uses more memory and this is slower and this is",
    "start": "1739360",
    "end": "1746110"
  },
  {
    "text": "really just to do with memory bandwidth it's just how fast can I read this stuff and this is why list and these old ones",
    "start": "1746110",
    "end": "1753409"
  },
  {
    "text": "are slower than these ones because these are denser in memory it's a memory bandwidth issue pointers in data",
    "start": "1753409",
    "end": "1758960"
  },
  {
    "text": "structures are just going to slow you down if you want to try and get speed then see if you can work out how to",
    "start": "1758960",
    "end": "1764090"
  },
  {
    "text": "avoid having to go and chase a whole pile of pointers obviously linear search",
    "start": "1764090",
    "end": "1772220"
  },
  {
    "text": "is not the most optimal thing and you wouldn't choose to use a set or an ordered set in order to do a linear find",
    "start": "1772220",
    "end": "1779690"
  },
  {
    "text": "that would just be a wrong thing to do so let's actually start using the Container correctly and it either has",
    "start": "1779690",
    "end": "1785450"
  },
  {
    "text": "logarithmic or hash based lookup like this and there we go it's much faster so that would then be this is order n this",
    "start": "1785450",
    "end": "1792289"
  },
  {
    "text": "is order log N and this is order 1 so there's some differences when you've got",
    "start": "1792289",
    "end": "1797360"
  },
  {
    "text": "ten million it is going to make a difference so it's notably faster but we had got",
    "start": "1797360",
    "end": "1804320"
  },
  {
    "text": "some domain knowledge that we haven't actually used at this point which will come back to our mod set vs. set like",
    "start": "1804320",
    "end": "1811490"
  },
  {
    "start": "1806000",
    "end": "1806000"
  },
  {
    "text": "this if you start measuring this you'll actually notice that you'll still end up depending what the type is you may end",
    "start": "1811490",
    "end": "1818120"
  },
  {
    "text": "up saying actually look mem come and up being the top of my list I'm doing a lot of comparisons so you often find at this",
    "start": "1818120",
    "end": "1824389"
  },
  {
    "text": "point right now it's worth starting to understand what the memory comparison is remember you got get rid of the stupid operations get rid of the memory",
    "start": "1824389",
    "end": "1831019"
  },
  {
    "text": "allocations now we can start looking at things like mem Company how we doing around Grissom's we're down into that",
    "start": "1831019",
    "end": "1836690"
  },
  {
    "text": "order log n order one type of stuff there was an optimization I tried and I",
    "start": "1836690",
    "end": "1842090"
  },
  {
    "text": "discovered that guess what the GTC library had already done it if I had got",
    "start": "1842090",
    "end": "1847190"
  },
  {
    "text": "a set with integers like this it had already decided that it knew how to do",
    "start": "1847190",
    "end": "1852529"
  },
  {
    "text": "integers it didn't need to hash the integer I said I'll do the integer so when I tried to write my own hashing",
    "start": "1852529",
    "end": "1857779"
  },
  {
    "text": "function I ended up with the same speed they said it was a float notice the float same size is slower why because it",
    "start": "1857779",
    "end": "1865610"
  },
  {
    "text": "goes all I have to hash all those bytes so I can write my own hashing thing and basically says well why don't you just",
    "start": "1865610",
    "end": "1871309"
  },
  {
    "text": "take the float and convert it to an integer and use that and then back to that speed so if you're using hashes",
    "start": "1871309",
    "end": "1876620"
  },
  {
    "text": "watch out for the speed of the hash if you see mem comfort that",
    "start": "1876620",
    "end": "1881749"
  },
  {
    "text": "you probably have got something at saying I'm doing a hash and I'm doing byte wise comparison whereas if you're",
    "start": "1881749",
    "end": "1888679"
  },
  {
    "text": "using things like in flike this you may would be using integer comparison which can be inlined rather than mem come call",
    "start": "1888679",
    "end": "1894409"
  },
  {
    "text": "so watch out for hashing if you are using hashing make sure that you're not putting a lot of time into your hash",
    "start": "1894409",
    "end": "1901339"
  },
  {
    "text": "function I had one where I ended up with changing from a triple of database and",
    "start": "1901339",
    "end": "1908869"
  },
  {
    "text": "table and key names of three strings ended up with lots of mem comp and I",
    "start": "1908869",
    "end": "1914779"
  },
  {
    "text": "realized that actually if I can catenate and together and get one comparison rather than three comparisons on and got myself a factor of three just by doing",
    "start": "1914779",
    "end": "1921169"
  },
  {
    "text": "that domain knowledge given that I know",
    "start": "1921169",
    "end": "1926269"
  },
  {
    "start": "1923000",
    "end": "1923000"
  },
  {
    "text": "that I've inserted the the numbers in linear order then I can say they're",
    "start": "1926269",
    "end": "1931339"
  },
  {
    "text": "already sorted so I can actually use order log n a binary lookup on vector so",
    "start": "1931339",
    "end": "1937639"
  },
  {
    "text": "it's interesting enough that I've gone now remember this was I was looking at 100 it was quite slow but now these ones",
    "start": "1937639",
    "end": "1943969"
  },
  {
    "text": "are vector and deck are fast and set they're not so that's order log n this is order log n but through pointers and",
    "start": "1943969",
    "end": "1950719"
  },
  {
    "text": "this is an order one so that one still wins but these are these are not",
    "start": "1950719",
    "end": "1956559"
  },
  {
    "text": "unrespectable also the size of this in memory is much smaller so watch out for",
    "start": "1956559",
    "end": "1963769"
  },
  {
    "text": "those wants kind of things domain knowledge something I definitely want to",
    "start": "1963769",
    "end": "1969379"
  },
  {
    "start": "1965000",
    "end": "1965000"
  },
  {
    "text": "you to to think about is this is probably where you're going to get the most stuff out of this one which is understanding your domain patterns what",
    "start": "1969379",
    "end": "1976940"
  },
  {
    "text": "are the operational profile what performance levels what's good enough what's your data how big is it what's its distribution is you've got",
    "start": "1976940",
    "end": "1983239"
  },
  {
    "text": "lots of things the same is it all lots of small things but with some occasional big things what's the distribution and",
    "start": "1983239",
    "end": "1989599"
  },
  {
    "text": "requests how often is it updated so I've got some questions for you two to think",
    "start": "1989599",
    "end": "1994759"
  },
  {
    "start": "1992000",
    "end": "1992000"
  },
  {
    "text": "about when you're thinking about building data structures for performance and these are the six questions I'm",
    "start": "1994759",
    "end": "2000070"
  },
  {
    "text": "going to go through those and now in a bit of detail that's a summary primary",
    "start": "2000070",
    "end": "2006669"
  },
  {
    "text": "key access I'm going to look up this thing by key and I'm going to get a value out of it that's probably the most",
    "start": "2006669",
    "end": "2012159"
  },
  {
    "text": "common thing it's very useful you can say well it could be order one through a hash or I could have a binary",
    "start": "2012159",
    "end": "2018970"
  },
  {
    "text": "search or if n is small I can just even do linear search if it's ten who cares about all this stuff just get in that",
    "start": "2018970",
    "end": "2024340"
  },
  {
    "text": "you only need operator equals equals at this point you don't need anything more you can also split it up so you can",
    "start": "2024340",
    "end": "2032380"
  },
  {
    "text": "start doing it on multiple machines or multiple threads all that stuff works very nicely to avoid contention examples",
    "start": "2032380",
    "end": "2039059"
  },
  {
    "text": "product catalog if I'm trying to look up a product there or customer records web",
    "start": "2039059",
    "end": "2044770"
  },
  {
    "text": "sessions which are sticky no SQL things say it's key value store memcache for instance there's no way of iterating",
    "start": "2044770",
    "end": "2050830"
  },
  {
    "text": "through the keys you can only look up a key and that's it you can put mine in look it up you can't actually go and find out all the keys so that's the most",
    "start": "2050830",
    "end": "2058510"
  },
  {
    "text": "common form of thing actually the whole world wide web is like this one the key is just called the URL do you need",
    "start": "2058510",
    "end": "2066810"
  },
  {
    "start": "2065000",
    "end": "2065000"
  },
  {
    "text": "secondary non primary key access do you need to look up by something other than the key so if you need to do that you",
    "start": "2066810",
    "end": "2074560"
  },
  {
    "text": "need secondary indexes that will you may hang on a secondary database index like that though trying to find parts of a",
    "start": "2074560",
    "end": "2079720"
  },
  {
    "text": "record do you need to do things on metadata like when it happened at cetera rather than the key value itself author",
    "start": "2079720",
    "end": "2085388"
  },
  {
    "text": "whatever maybe you need to go to full-text search this is significantly",
    "start": "2085389",
    "end": "2091030"
  },
  {
    "text": "more work you have to decide whether you really need this one as an example I said primary key access on the web is",
    "start": "2091030",
    "end": "2097930"
  },
  {
    "text": "URL non primary key axis is Google they're quite different one has made a",
    "start": "2097930",
    "end": "2104080"
  },
  {
    "text": "business that that's that's a business the other one isn't it's usually slower",
    "start": "2104080",
    "end": "2109410"
  },
  {
    "start": "2109000",
    "end": "2109000"
  },
  {
    "text": "this is an interesting one and this is one that often people forget about is what do you need in terms of bulk access",
    "start": "2109410",
    "end": "2115180"
  },
  {
    "text": "or range scans if you go well actually look I'm trying to find I'm doing a data",
    "start": "2115180",
    "end": "2120430"
  },
  {
    "text": "logging application I want to see the value of this or the engine temperature over a particular range or whatever I",
    "start": "2120430",
    "end": "2125650"
  },
  {
    "text": "probably want to go from this time to this time I'd not I want to go and get a single point I want to go and get a range of points so there's some implied",
    "start": "2125650",
    "end": "2134980"
  },
  {
    "text": "ordering about this one and that will be because you're ordering on time so other",
    "start": "2134980",
    "end": "2140589"
  },
  {
    "text": "things with hashes you don't get that if you try to use a hash you won't get this ordering if you try to hash the key for",
    "start": "2140589",
    "end": "2146530"
  },
  {
    "text": "time that's spread out everywhere so you have to know whether you need this one because if you're paying for",
    "start": "2146530",
    "end": "2151930"
  },
  {
    "text": "ordering when you don't need it it's slower you have to go or this is going to be order log n rather than order one",
    "start": "2151930",
    "end": "2157350"
  },
  {
    "text": "curses traversal of state etc you may find it slow to get somewhere to do the",
    "start": "2157350",
    "end": "2162520"
  },
  {
    "text": "seek and then you're pulling up a whole part of things as you go Hadoop for instance the Big Data stuff is he's a",
    "start": "2162520",
    "end": "2167950"
  },
  {
    "text": "brain scan based view you get this nice dense linear access watch out for even",
    "start": "2167950",
    "end": "2174070"
  },
  {
    "text": "write amplification at this point although bulk access very important if you don't do this then you will end up",
    "start": "2174070",
    "end": "2179620"
  },
  {
    "text": "going slow as an example if you have a REST API it doesn't do this because you want to go all on the go and get this",
    "start": "2179620",
    "end": "2185740"
  },
  {
    "text": "one and then I'm gonna get the next element and then we're gonna get the next element and then the next element like this you're going backwards and forwards rather than one call go and get",
    "start": "2185740",
    "end": "2192940"
  },
  {
    "text": "me everything work out whether you need this one same with it this is sometimes called the n plus one problem reach a",
    "start": "2192940",
    "end": "2201010"
  },
  {
    "start": "2200000",
    "end": "2200000"
  },
  {
    "text": "right ratio very important to understand how much you do with this one here if",
    "start": "2201010",
    "end": "2207400"
  },
  {
    "text": "you have a high read thing then you have caches caches work really well but then you have to make some decisions around",
    "start": "2207400",
    "end": "2212830"
  },
  {
    "text": "what do I do about cache right through and write back and cache eviction how big is the cache etc how do I keep",
    "start": "2212830",
    "end": "2218590"
  },
  {
    "text": "multiple ones coherent and I'm probably gonna have some indexing structures that's great but maybe you're operating",
    "start": "2218590",
    "end": "2224620"
  },
  {
    "text": "in a high right environment you're doing data logging I want to go and get all the values for I'm monitoring a chemical",
    "start": "2224620",
    "end": "2232180"
  },
  {
    "text": "plant or a ship or an airplane or something about lots of data coming in or maybe just log files out of my",
    "start": "2232180",
    "end": "2237700"
  },
  {
    "text": "application out of a bunch of service caches don't help me when I'm doing that except they probably help me to catch",
    "start": "2237700",
    "end": "2243910"
  },
  {
    "text": "the indexing structure I had one client that said we have an 8 core machine and it goes about one one-and-a-half course",
    "start": "2243910",
    "end": "2250060"
  },
  {
    "text": "speed they were doing process control and data logging I said well that's not really surprising because you are",
    "start": "2250060",
    "end": "2255370"
  },
  {
    "text": "locking everything all at once you've got one big lock in front of everything that says right lock all the data",
    "start": "2255370",
    "end": "2260740"
  },
  {
    "text": "structures and everything else update its one value and unlock it surprise surprises you've see realized your application I said look you're indexing",
    "start": "2260740",
    "end": "2267790"
  },
  {
    "text": "structure is essentially read-only so your metadata is often read heavy you're",
    "start": "2267790",
    "end": "2274210"
  },
  {
    "text": "doing 10,000 1,000 or 10,000 points coming in per second and once every 10 minutes you might change the indexing",
    "start": "2274210",
    "end": "2280720"
  },
  {
    "text": "structure it's like five or six orders of magnitude difference there why are you making the point zero zero one percent",
    "start": "2280720",
    "end": "2287259"
  },
  {
    "text": "case slowdown the 99.9% case why don't use a reader/writer lock and so that all",
    "start": "2287259",
    "end": "2294730"
  },
  {
    "text": "the readers can carry on in parallel and do all their writing so you have you have you split up the writers for the",
    "start": "2294730",
    "end": "2301539"
  },
  {
    "text": "different parts because they're all writing in different places but you have multiple you only have one lock on the",
    "start": "2301539",
    "end": "2306759"
  },
  {
    "text": "metadata in fact the best way they could have done that was use Atomics at the bottom and and one locker on the",
    "start": "2306759",
    "end": "2312309"
  },
  {
    "text": "metadata but it's important to understand that even once you've",
    "start": "2312309",
    "end": "2317740"
  },
  {
    "start": "2316000",
    "end": "2316000"
  },
  {
    "text": "understood how big that is the next thing to understand is now what is your working set size how much data",
    "start": "2317740",
    "end": "2324039"
  },
  {
    "text": "are you actually dealing with on a regular basis how much of that is going to fit in main memory does it fit on a",
    "start": "2324039",
    "end": "2330279"
  },
  {
    "text": "single machine does it fit into your l1 cache how do you fit those ones maybe you need your indexing structures in",
    "start": "2330279",
    "end": "2336190"
  },
  {
    "text": "memory but not on disk you say look I'm gonna have my indexing structure in memory and then make one call to disk maybe you do that as an example if I'm",
    "start": "2336190",
    "end": "2347289"
  },
  {
    "text": "doing so a news website like this yeah everybody's looking at today's news like this what happened last year where are",
    "start": "2347289",
    "end": "2353019"
  },
  {
    "text": "whatever a few access into this if you're doing logging monitoring maybe you're saying well actually I'm trying",
    "start": "2353019",
    "end": "2358359"
  },
  {
    "text": "to work out what's happening right now and occasionally I need to find out what happened to this machine last year it's",
    "start": "2358359",
    "end": "2364450"
  },
  {
    "text": "very much biased to this end and you may find look that fits in the cache even though I've got a lot of data the",
    "start": "2364450",
    "end": "2370269"
  },
  {
    "text": "accesses are all one place if however I go to the airport then you probably find that there's a few people here with some",
    "start": "2370269",
    "end": "2376839"
  },
  {
    "text": "frequent fliers and some crew who have lots of access to the passport most people fly once or twice a year so",
    "start": "2376839",
    "end": "2382210"
  },
  {
    "text": "actually this is a very long flat tail and suddenly this is now loaded disk",
    "start": "2382210",
    "end": "2387279"
  },
  {
    "text": "accesses because I can't fit all of the passports into memory here you have to",
    "start": "2387279",
    "end": "2392829"
  },
  {
    "text": "understand and that is exactly the same thing go and look this one up but know the data base distribution and the last one",
    "start": "2392829",
    "end": "2401259"
  },
  {
    "start": "2400000",
    "end": "2400000"
  },
  {
    "text": "that people often forget is about consistency of data how many copies of",
    "start": "2401259",
    "end": "2407049"
  },
  {
    "text": "that data do you have around how far out of synchronization can they be if I've",
    "start": "2407049",
    "end": "2412450"
  },
  {
    "text": "got something on my screen here does it have to be exactly the same as that does it is ten minutes delay okay overnight I",
    "start": "2412450",
    "end": "2420070"
  },
  {
    "text": "don't know if for instance you're trying to sell the last seat on the airline well you need to have one copy of that",
    "start": "2420070",
    "end": "2426730"
  },
  {
    "text": "and everybody comes into that that's the nasod sort of transaction you have to do with but you've limited your scalability",
    "start": "2426730",
    "end": "2432190"
  },
  {
    "text": "if you're saying well actually look the product catalog changes once a day I can then distribute that that nice and",
    "start": "2432190",
    "end": "2438880"
  },
  {
    "text": "easily without that so understand whether you need that your reference",
    "start": "2438880",
    "end": "2445780"
  },
  {
    "text": "data your metadata for instance may well be less consistent than the actual transaction data so back to you the",
    "start": "2445780",
    "end": "2452560"
  },
  {
    "text": "performance story we start off it's too slow we're profiling we're trying to",
    "start": "2452560",
    "end": "2458230"
  },
  {
    "text": "understand where those where we're spending our time first of all find the unnecessary waste get rid of it don't",
    "start": "2458230",
    "end": "2465040"
  },
  {
    "text": "optimize it just get rid of it it's not helping you at this point you may well find that you've now gotten your memory",
    "start": "2465040",
    "end": "2471190"
  },
  {
    "text": "allocation so we've seen how that malloc and copying of those other things can can cause problems and temporaries so we",
    "start": "2471190",
    "end": "2476890"
  },
  {
    "text": "can use move semantics and other things to get rid of this one we can pre allocate our memory like an effector",
    "start": "2476890",
    "end": "2481990"
  },
  {
    "text": "reserve and those other things to try and do that one we've worked out how getting that closer in memory works",
    "start": "2481990",
    "end": "2487780"
  },
  {
    "text": "better for us we've seen how using we make choices between order one order and",
    "start": "2487780",
    "end": "2493060"
  },
  {
    "text": "order login all those sort of kind of things like that that's actually the real part of where you have to know about what's going on here this is your",
    "start": "2493060",
    "end": "2500530"
  },
  {
    "text": "operational profile that says I know that these things are only this big I can do it in this area I my data items",
    "start": "2500530",
    "end": "2507430"
  },
  {
    "text": "are only three bytes long or whatever you can use those things to your advantage it's mostly this one here it",
    "start": "2507430",
    "end": "2514360"
  },
  {
    "text": "has this sort of distribution that's where you get this one at that point and only then is it worth saying look if I",
    "start": "2514360",
    "end": "2520240"
  },
  {
    "text": "really need to still go fast and now I can start working out how to make it fit with my cash and hot/cold separation",
    "start": "2520240",
    "end": "2525490"
  },
  {
    "text": "those kind of things so here are just some some of those ideas just put down",
    "start": "2525490",
    "end": "2532660"
  },
  {
    "text": "or so sort of kind of an overview notice that these really are things which have",
    "start": "2532660",
    "end": "2538390"
  },
  {
    "text": "tens of thousands of cycles and then thousands and hundreds so it's obviously better to try and sort the ones that are",
    "start": "2538390",
    "end": "2545080"
  },
  {
    "text": "three orders of magnitude before these ones here don't start here I often see people going yeah",
    "start": "2545080",
    "end": "2550390"
  },
  {
    "text": "yeah we need to kind of work out these kind of kind of stuff is a look not is it doesn't matter what I have a pointer or value there don't spend your time",
    "start": "2550390",
    "end": "2557530"
  },
  {
    "text": "here if you're wasting time here start here and go left to right",
    "start": "2557530",
    "end": "2564930"
  },
  {
    "text": "measure and go down that's really what this one's about if you anyone has any",
    "start": "2564930",
    "end": "2570190"
  },
  {
    "text": "questions about any of those ones that's fine if you want a copy these slides I'm happy to give those to you I think on",
    "start": "2570190",
    "end": "2577150"
  },
  {
    "start": "2577000",
    "end": "2577000"
  },
  {
    "text": "the whole it's a multi-level problem it's not a set of tweaks it isn't Oh shall I put the plus plus before or",
    "start": "2577150",
    "end": "2583210"
  },
  {
    "text": "afterwards it's a engineering measurement fact-based approach to optimization",
    "start": "2583210",
    "end": "2590559"
  },
  {
    "text": "because you know what you're trying to achieve and you know when it's good enough and you know what properties you can rely on that's your domain knowledge",
    "start": "2590559",
    "end": "2598180"
  },
  {
    "text": "and their domain no optimizations are going to beat any sort of kind of clever algorithms that you can come up with use",
    "start": "2598180",
    "end": "2606400"
  },
  {
    "text": "your tools understand how what how they work and what they telling you and that's really how you're gonna get",
    "start": "2606400",
    "end": "2612730"
  },
  {
    "text": "performance and optimization it's not just by trying to work out the latest flashy toy they may see okay thank you",
    "start": "2612730",
    "end": "2623130"
  },
  {
    "text": "you",
    "start": "2625970",
    "end": "2628030"
  }
]