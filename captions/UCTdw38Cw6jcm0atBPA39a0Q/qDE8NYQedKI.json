[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "okay welcome everybody thank you for coming to this talk my name is Iqbal",
    "start": "9650",
    "end": "16830"
  },
  {
    "text": "Khan I am a technology evangelist at this company called a large soft which",
    "start": "16830",
    "end": "22410"
  },
  {
    "text": "is maker of distributed cash cashing product called end cash",
    "start": "22410",
    "end": "28669"
  },
  {
    "text": "today's topic is scaling dotnet applications with distributed caching",
    "start": "28669",
    "end": "34070"
  },
  {
    "text": "this is not a talk about in cash it's about the actual topic of what problems does distribute cash and solve and how",
    "start": "34070",
    "end": "41550"
  },
  {
    "text": "does it solve it and how should you go about using it if you have any questions",
    "start": "41550",
    "end": "46800"
  },
  {
    "text": "please raise your hand as I'm talking so that I can have more interactive session",
    "start": "46800",
    "end": "52680"
  },
  {
    "text": "instead of waiting until the end okay and by my apologies I have a slight",
    "start": "52680",
    "end": "58770"
  },
  {
    "text": "cough so I hopefully I won't be coughing I've got something in my mouth but if I do please so let's go through a few",
    "start": "58770",
    "end": "67730"
  },
  {
    "start": "65000",
    "end": "103000"
  },
  {
    "text": "definitions I'm sure most of you know this already but just for completeness purposes will first define scalability",
    "start": "67730",
    "end": "73920"
  },
  {
    "text": "so scalability is not application performance it is application",
    "start": "73920",
    "end": "80190"
  },
  {
    "text": "performance high application performance under peak loads so if your application performs super fast with five users it",
    "start": "80190",
    "end": "87570"
  },
  {
    "text": "is not necessarily scalable until it performs the same way with 5000 or",
    "start": "87570",
    "end": "92790"
  },
  {
    "text": "50,000 or 500,000 users of course if your application doesn't perform with",
    "start": "92790",
    "end": "97979"
  },
  {
    "text": "five users then you have other problems than what the sessions all about so",
    "start": "97979",
    "end": "103370"
  },
  {
    "start": "103000",
    "end": "135000"
  },
  {
    "text": "linear scalability is more of a deployment definition if your",
    "start": "104570",
    "end": "110520"
  },
  {
    "text": "application architecture is such that you can deploy it on multiple servers and as you add more servers the",
    "start": "110520",
    "end": "117960"
  },
  {
    "text": "transaction capacity and the word transaction here means activity the requests by the clients of that",
    "start": "117960",
    "end": "124049"
  },
  {
    "text": "application it that the transaction capacity can increase as you add more servers in a you know in a linear",
    "start": "124049",
    "end": "131190"
  },
  {
    "text": "fashion then you have a linear scalability in the application if you don't then you have a nonlinear",
    "start": "131190",
    "end": "137440"
  },
  {
    "start": "135000",
    "end": "154000"
  },
  {
    "text": "scalability which means that after a certain number of servers adding more",
    "start": "137440",
    "end": "143260"
  },
  {
    "text": "servers actually slows things down so you're stuck pretty much you can't really buy your way out of this so you",
    "start": "143260",
    "end": "149770"
  },
  {
    "text": "obviously don't want a linear scalable solutions which applications need",
    "start": "149770",
    "end": "156970"
  },
  {
    "start": "154000",
    "end": "259000"
  },
  {
    "text": "scalability if you have one of these applications then you're in the right session these are usually web applications",
    "start": "156970",
    "end": "164050"
  },
  {
    "text": "asp.net Web Services back-end for IOT",
    "start": "164050",
    "end": "169380"
  },
  {
    "text": "big data processing through distribution and other server applications that need",
    "start": "169380",
    "end": "176110"
  },
  {
    "text": "a lot of transactions these days a lot of businesses are online you know ecommerce online banking online",
    "start": "176110",
    "end": "183010"
  },
  {
    "text": "everything so any online business that has a customer facing application usually needs scalability that's where",
    "start": "183010",
    "end": "189730"
  },
  {
    "text": "you get thousands of simultaneous users think of a bank or an airline or a social media company and scalability",
    "start": "189730",
    "end": "196720"
  },
  {
    "text": "comes to mind the backend for IOT is also all of those devices need to talk",
    "start": "196720",
    "end": "202180"
  },
  {
    "text": "to somebody on the backend so that needs the backend needs scalability big data",
    "start": "202180",
    "end": "207640"
  },
  {
    "text": "processing is also a very big emerging space although my focus is net and on",
    "start": "207640",
    "end": "213310"
  },
  {
    "text": "the dotnet side the big data processing isn't as popular as it is on the Java side but that the concepts are the same",
    "start": "213310",
    "end": "220810"
  },
  {
    "text": "you can do big data processing through a distributed model and achieve",
    "start": "220810",
    "end": "229540"
  },
  {
    "text": "scalability other server applications you may have a large bank that has millions of customers that call every",
    "start": "229540",
    "end": "235420"
  },
  {
    "text": "day to change address maybe transfer funds from one place to the other and",
    "start": "235420",
    "end": "241000"
  },
  {
    "text": "there may be compliance issues by midnight or by sometime at night you have to process all of those requests so",
    "start": "241000",
    "end": "248650"
  },
  {
    "text": "there's a scalability need where you need to be able to handle all those so essentially all of these are server-side",
    "start": "248650",
    "end": "254950"
  },
  {
    "text": "applications that need scalability so",
    "start": "254950",
    "end": "260980"
  },
  {
    "start": "259000",
    "end": "340000"
  },
  {
    "text": "what is the scalability problem first of all the good news is the application tier in most of these applications",
    "start": "260980",
    "end": "267520"
  },
  {
    "text": "scales very near linearly you if you have a web application in a load-balanced environment you can",
    "start": "267520",
    "end": "273380"
  },
  {
    "text": "add more servers no problem so the problem is in the data layer the data storage layer what I mean by data",
    "start": "273380",
    "end": "280250"
  },
  {
    "text": "storage is relational databases your mainframe legacy data your application data the data is the one that's",
    "start": "280250",
    "end": "286880"
  },
  {
    "text": "bottleneck if you use no SQL databases they will help this scalability problem",
    "start": "286880",
    "end": "293810"
  },
  {
    "text": "but a lot of the time you're not able to move to no SQL because for a variety of",
    "start": "293810",
    "end": "300470"
  },
  {
    "text": "technical and business reasons you have to use relational databases and no SQL",
    "start": "300470",
    "end": "305990"
  },
  {
    "text": "is useful only when you move to it so it requires you to move away from relational at least whatever data you",
    "start": "305990",
    "end": "312770"
  },
  {
    "text": "need to put into it you keep it only in one place not both so that's why it's not always the answer even though architectural e no SQL is a",
    "start": "312770",
    "end": "319820"
  },
  {
    "text": "scalable database so you pretty much",
    "start": "319820",
    "end": "327919"
  },
  {
    "text": "have to solve this scalability puzzle with relational databases in the picture you cannot remove them from the picture",
    "start": "327919",
    "end": "334550"
  },
  {
    "text": "and still and hope to achieve scalability in all cases in some cases yes you can so how do how do you",
    "start": "334550",
    "end": "342139"
  },
  {
    "start": "340000",
    "end": "560000"
  },
  {
    "text": "actually achieve scalability you deploy a distributed cache in between the",
    "start": "342139",
    "end": "348020"
  },
  {
    "text": "application tier and your database tier or your data tier and this distributed",
    "start": "348020",
    "end": "355970"
  },
  {
    "text": "cache is kind of a new best practice for any application that needs scalability",
    "start": "355970",
    "end": "362979"
  },
  {
    "text": "it is it consists of two or more low-cost servers where they form a",
    "start": "362979",
    "end": "372500"
  },
  {
    "text": "cluster and that cluster actually pulls the CPU the memory the network card",
    "start": "372500",
    "end": "378320"
  },
  {
    "text": "resources into one logical capacity so the more servers you add at this layer",
    "start": "378320",
    "end": "383680"
  },
  {
    "text": "the more capacity you have and capacity is transaction capacity storage capacity",
    "start": "383680",
    "end": "390470"
  },
  {
    "text": "and throughput in terms of the network cards so these days if you want to",
    "start": "390470",
    "end": "396260"
  },
  {
    "text": "achieve scalability you pretty much have to have this infrastructure in your application in case of dotnet",
    "start": "396260",
    "end": "403940"
  },
  {
    "text": "applications it's it's good to have all of the whole stack being net and these boxes",
    "start": "403940",
    "end": "411170"
  },
  {
    "text": "typically are not very high-end that the most common configuration that we've that we see is a dual CPU quad core",
    "start": "411170",
    "end": "418870"
  },
  {
    "text": "basically eight cores per cache server configuration 16 gig to 32 gig is an",
    "start": "418870",
    "end": "425300"
  },
  {
    "text": "average memory on each cache server so it's better to have more cache servers",
    "start": "425300",
    "end": "430490"
  },
  {
    "text": "with less Hardware power than a few with a lot of hardware power and and because",
    "start": "430490",
    "end": "438080"
  },
  {
    "text": "the cost also is more manageable if it is that way once you put this caching",
    "start": "438080",
    "end": "444260"
  },
  {
    "text": "layer in between the application and the database the goal is to use it for about",
    "start": "444260",
    "end": "450170"
  },
  {
    "text": "80% of your data traffic so 80 percent of the time you should be going to the caching tier and 20% of the time you",
    "start": "450170",
    "end": "457700"
  },
  {
    "text": "should be going to the database tier that 20% includes a lot of updates all updates of course have to be done to the",
    "start": "457700",
    "end": "465260"
  },
  {
    "text": "master data store which is your database but and and some of the reads because the data has to be loaded into the cache",
    "start": "465260",
    "end": "473020"
  },
  {
    "text": "from this so this keep this picture in mind with this picture you can pretty",
    "start": "473020",
    "end": "479510"
  },
  {
    "text": "much scale quite a bit I mean we've you know we have customers who've got 5200",
    "start": "479510",
    "end": "487010"
  },
  {
    "text": "servers in the application tier which is pretty much the high end of ecommerce these days most customers have about 8",
    "start": "487010",
    "end": "494810"
  },
  {
    "text": "to 20 servers in the application tier so then you have a four to one or five to",
    "start": "494810",
    "end": "499880"
  },
  {
    "text": "one ratio between the application tier and the caching clear that's not that's",
    "start": "499880",
    "end": "505700"
  },
  {
    "text": "not a limitation it's just a best practice based on how much load the",
    "start": "505700",
    "end": "510950"
  },
  {
    "text": "application tier can take versus the caching here but that ratio might change if for every let's say for every client",
    "start": "510950",
    "end": "518510"
  },
  {
    "text": "request on the application tier you have to make a lot of cash and calls then the more calls you make per client request",
    "start": "518510",
    "end": "525710"
  },
  {
    "text": "the more or the less of a ratio you have to have between the application tier and",
    "start": "525710",
    "end": "531470"
  },
  {
    "text": "a caching here but the minimum or the minimum ratio that we've seen is two to one",
    "start": "531470",
    "end": "538070"
  },
  {
    "text": "and you know where you have four servers in the application tier then you might",
    "start": "538070",
    "end": "543170"
  },
  {
    "text": "have to in this minimum you need to of course for redundancy purposes so that high availability can be achieved so",
    "start": "543170",
    "end": "551959"
  },
  {
    "text": "this is sort of a case into why you should be using a distributed cache in",
    "start": "551959",
    "end": "557120"
  },
  {
    "text": "your application what problem it is going to solve so let's say once you're",
    "start": "557120",
    "end": "564110"
  },
  {
    "text": "convinced that distributed cache is going to solve this scalability bottleneck the next question that comes",
    "start": "564110",
    "end": "569600"
  },
  {
    "text": "to mind is how do you use it where in your application should you use distributed cache what are the use cases",
    "start": "569600",
    "end": "575440"
  },
  {
    "text": "where distributed cache makes sense so that three categories of it number one",
    "start": "575440",
    "end": "582170"
  },
  {
    "text": "is what I've been talking about so far which is the application data caching and you know that's why we talked about",
    "start": "582170",
    "end": "590660"
  },
  {
    "text": "the that you reduce those data base trips the thing to keep in mind and",
    "start": "590660",
    "end": "596420"
  },
  {
    "text": "application data caching is that the data exists in two places one in the",
    "start": "596420",
    "end": "602480"
  },
  {
    "text": "caching tier and one in the database now as soon as you know that data exists in",
    "start": "602480",
    "end": "608360"
  },
  {
    "text": "two places what's the first problem that comes to mind that might occur",
    "start": "608360",
    "end": "613899"
  },
  {
    "text": "synchronization yeah so the worst that could happen is that the data in the",
    "start": "614380",
    "end": "620089"
  },
  {
    "start": "619000",
    "end": "640000"
  },
  {
    "text": "caching tier is older than the data in the database and that data is sensitive",
    "start": "620089",
    "end": "625430"
  },
  {
    "text": "and you really can't afford to have an old copy and the biggest example of that",
    "start": "625430",
    "end": "630440"
  },
  {
    "text": "is a banking application where you know you're trying to withdraw funds you don't want to withdraw a million dollars",
    "start": "630440",
    "end": "637190"
  },
  {
    "text": "twice or maybe you do but the bank doesn't you know so that's the biggest problem that any distributed cache has",
    "start": "637190",
    "end": "644329"
  },
  {
    "start": "640000",
    "end": "969000"
  },
  {
    "text": "to solve and if a distribute cache does not solve this problem then you're",
    "start": "644329",
    "end": "649610"
  },
  {
    "text": "forced to cache only read-only data and in fact most people when you talk to",
    "start": "649610",
    "end": "656480"
  },
  {
    "text": "them about caching think of caching as a read-only store you know where the data",
    "start": "656480",
    "end": "662120"
  },
  {
    "text": "doesn't really change much did you have a question okay but in reality you want",
    "start": "662120",
    "end": "669709"
  },
  {
    "text": "to cache as much data as possible that means both read-only data data that does not change",
    "start": "669709",
    "end": "677750"
  },
  {
    "text": "very frequently but it still changes and data that changes very very frequently all data has to be cached that's the",
    "start": "677750",
    "end": "683090"
  },
  {
    "text": "only way to really benefit from that use case and now I'll come back to how you",
    "start": "683090",
    "end": "689870"
  },
  {
    "text": "achieve that number two use case is if you have an asp.net application then",
    "start": "689870",
    "end": "695930"
  },
  {
    "text": "there's some asp.net specific caching that you can do the most common is the sessions and that's also the easiest to",
    "start": "695930",
    "end": "705170"
  },
  {
    "text": "use also the the second is the viewstate if you are not using the MVC framework",
    "start": "705170",
    "end": "712700"
  },
  {
    "text": "in asp.net then the second use case would be the viewstate viewstate for",
    "start": "712700",
    "end": "718190"
  },
  {
    "text": "those of you don't know what viewstate is is an encrypted string that gets sent by the browser I'm sorry by the server",
    "start": "718190",
    "end": "725330"
  },
  {
    "text": "to the browser only to come back and in case of a post back so that heavy string",
    "start": "725330",
    "end": "731420"
  },
  {
    "text": "which might be 1k to hundreds of k travels all the way to the browser and maybe on the next call comes back so",
    "start": "731420",
    "end": "739070"
  },
  {
    "text": "it's an ideal case for caching if you could just cache the entire view state on the server side and only send a small",
    "start": "739070",
    "end": "744710"
  },
  {
    "text": "key it would speed up your overall application quite a bit it will also",
    "start": "744710",
    "end": "749870"
  },
  {
    "text": "save you a lot of bandwidth cost bandwidth is not cheap and you know in terms of how much data you're going to",
    "start": "749870",
    "end": "756230"
  },
  {
    "text": "consume the third use case in asp.net is the page output so if your pages are not",
    "start": "756230",
    "end": "761330"
  },
  {
    "text": "changing every time why execute them again every time you execute a page you you're consuming all those resources CPU",
    "start": "761330",
    "end": "768410"
  },
  {
    "text": "memory and all the backend you're making the database calls all of that but if the output is going to be the same why",
    "start": "768410",
    "end": "774530"
  },
  {
    "text": "not just you know display the output from the last execution Microsoft",
    "start": "774530",
    "end": "780320"
  },
  {
    "text": "asp.net framework has an output cache capability where you can plug in a",
    "start": "780320",
    "end": "787190"
  },
  {
    "text": "distributed cache so that the same capability is going to be available in a web form in case of asp.net the nature",
    "start": "787190",
    "end": "797000"
  },
  {
    "text": "of the problem completely changes I mean in case of asp.net specification of course you will do application data",
    "start": "797000",
    "end": "803240"
  },
  {
    "text": "caching also from within p.net but that's I'm categorizing that as separate but other than the",
    "start": "803240",
    "end": "809600"
  },
  {
    "text": "application data caching the asp.net specific caching the data exists only in one place which is the cache",
    "start": "809600",
    "end": "816679"
  },
  {
    "text": "there is no database you don't store those sessions in the database if you're going to put them in the cache so the",
    "start": "816679",
    "end": "823489"
  },
  {
    "text": "cache is the master store at the same time the data is transient when cache",
    "start": "823489",
    "end": "831199"
  },
  {
    "text": "becomes a master store what's the biggest concern you have what might",
    "start": "831199",
    "end": "837889"
  },
  {
    "text": "happen if cache is the only store yeah you might lose the data because cache is",
    "start": "837889",
    "end": "843079"
  },
  {
    "text": "in memory and memory as you know is volatile so if you put data in the cache",
    "start": "843079",
    "end": "849589"
  },
  {
    "text": "any cache where are you going to put a session or other types of data as the",
    "start": "849589",
    "end": "856850"
  },
  {
    "text": "master store that cache has to provide replication without replication if",
    "start": "856850",
    "end": "862160"
  },
  {
    "text": "you're caching the data you're going to you know you're basically walking on fairly thin ice there's another problem",
    "start": "862160",
    "end": "869839"
  },
  {
    "text": "which is that memory is limited and which is true also in application data",
    "start": "869839",
    "end": "876379"
  },
  {
    "text": "caching your database might be terabytes of data but the cache as I said about 16 to 32 gig per server maybe you have five",
    "start": "876379",
    "end": "883369"
  },
  {
    "text": "or ten of those servers so you have a few hundred gig of data at most so it's a subset of the database and that's okay",
    "start": "883369",
    "end": "891829"
  },
  {
    "text": "because you will just remove some of the data when the cache becomes full because",
    "start": "891829",
    "end": "897919"
  },
  {
    "text": "that data exists in the database right but that is not true when you have cache",
    "start": "897919",
    "end": "904489"
  },
  {
    "text": "becomes the master store so again keep this in mind and we'll come back to this",
    "start": "904489",
    "end": "911869"
  },
  {
    "text": "that when when you're using a cache as the master store you don't want to remove data unless that data is no",
    "start": "911869",
    "end": "919819"
  },
  {
    "text": "longer that you know it's life is over so you don't want to just remove data",
    "start": "919819",
    "end": "924919"
  },
  {
    "text": "because cache is full you want to do capacity planning appropriately that when whatever data you're storing for",
    "start": "924919",
    "end": "931429"
  },
  {
    "text": "example if you're storing sessions in the cache you know the UU expire sessions based on",
    "start": "931429",
    "end": "938120"
  },
  {
    "text": "inactivity so you say if the user is gonna stop using it the user logs out and after about 20 minutes of inactivity",
    "start": "938120",
    "end": "944690"
  },
  {
    "text": "the session needs to be cleaned up so you need to do your capacity planning we're under peak loads the sessions are",
    "start": "944690",
    "end": "951620"
  },
  {
    "text": "expiring and not being evicted so that's so the nature problem is is is different",
    "start": "951620",
    "end": "959560"
  },
  {
    "text": "the third use case is something that a lot of people don't know that cache is really good for which is runtime data",
    "start": "959560",
    "end": "966350"
  },
  {
    "text": "sharing through events think of this as",
    "start": "966350",
    "end": "971470"
  },
  {
    "start": "969000",
    "end": "1102000"
  },
  {
    "text": "like a service bus as a SMS a messaging platform but it's not a replacement of",
    "start": "971470",
    "end": "977330"
  },
  {
    "text": "message queues message queues have a different purpose they can work in a geographically distributed environment",
    "start": "977330",
    "end": "984080"
  },
  {
    "text": "cache runtime data sharing is good usually within the same data center but",
    "start": "984080",
    "end": "991190"
  },
  {
    "text": "within the same data center a distributed cache is much faster and more scalable than message queues for",
    "start": "991190",
    "end": "999589"
  },
  {
    "text": "runtime data sharing because of the fact that it's got multiple servers you can",
    "start": "999589",
    "end": "1004690"
  },
  {
    "text": "keep adding more servers as your transaction capacity increases and a",
    "start": "1004690",
    "end": "1009760"
  },
  {
    "text": "good distributed cache provides event-driven pub/sub based or pub/sub",
    "start": "1009760",
    "end": "1015580"
  },
  {
    "text": "style data sharing model also other types of events continuous querying is",
    "start": "1015580",
    "end": "1021700"
  },
  {
    "text": "another feature distributed caches exist both on the dotnet side and on the Java",
    "start": "1021700",
    "end": "1027490"
  },
  {
    "text": "side and all these features that I'm talking about other than asp.net specific caching where the sessions exist also on the",
    "start": "1027490",
    "end": "1035199"
  },
  {
    "text": "Java side but viewstate is asp.net specific and output cache there is I think in education on the Java side but",
    "start": "1035199",
    "end": "1041949"
  },
  {
    "text": "these these issues are common between dotnet and Java so runtime data sharing",
    "start": "1041949",
    "end": "1049210"
  },
  {
    "text": "through events is a third use case that you guys need to keep in mind and use a",
    "start": "1049210",
    "end": "1055020"
  },
  {
    "text": "distributed cache for that even there you may have the cache as the master",
    "start": "1055020",
    "end": "1060910"
  },
  {
    "text": "store or you may have cache as a duplicate of the database so you may often what happens is the database has",
    "start": "1060910",
    "end": "1068140"
  },
  {
    "text": "the same data but in a different form cash may have it in a transient form",
    "start": "1068140",
    "end": "1073779"
  },
  {
    "text": "maybe it's an aggregation of some data and that aggregation needs to be shared so that it doesn't have to be",
    "start": "1073779",
    "end": "1079480"
  },
  {
    "text": "reconstructed every time so if you lost that data you could reconstruct it from",
    "start": "1079480",
    "end": "1084820"
  },
  {
    "text": "the master so unlike the asp.net the runtime data sharing may or may not have the master",
    "start": "1084820",
    "end": "1090730"
  },
  {
    "text": "the store as far as the cache is concerned but if it does then you have the same issues as I've mentioned up",
    "start": "1090730",
    "end": "1096490"
  },
  {
    "text": "there any questions so far ok let's let's quickly get this out of",
    "start": "1096490",
    "end": "1105610"
  },
  {
    "start": "1102000",
    "end": "1201000"
  },
  {
    "text": "the way in terms of how do you use a distribute cache for sessions because",
    "start": "1105610",
    "end": "1112510"
  },
  {
    "text": "asp.net actually in anywhere there's a framework where you can plug in makes",
    "start": "1112510",
    "end": "1120700"
  },
  {
    "text": "your life easy because you don't have to do any programming so where there's no",
    "start": "1120700",
    "end": "1125770"
  },
  {
    "text": "framework then you have to make API calls into the cache and as far as the",
    "start": "1125770",
    "end": "1131020"
  },
  {
    "text": "frameworks are concerned application data caching entity framework does not",
    "start": "1131020",
    "end": "1138039"
  },
  {
    "text": "actually up until a ef6 there was no framework for caching ef7",
    "start": "1138039",
    "end": "1143649"
  },
  {
    "text": "or ef-1 a of core has a caching",
    "start": "1143649",
    "end": "1148899"
  },
  {
    "text": "framework so that you you will be able to plug in a distributed cache without",
    "start": "1148899",
    "end": "1155230"
  },
  {
    "text": "having to do any programming and suddenly application data has been cached but for as far as the asp.net",
    "start": "1155230",
    "end": "1161970"
  },
  {
    "text": "specific caching all three examples that I gave they have frameworks frameworks",
    "start": "1161970",
    "end": "1168159"
  },
  {
    "text": "means you just use it you just plug it in so what happens let's say you have",
    "start": "1168159",
    "end": "1174279"
  },
  {
    "text": "this is your picture you install a server portion of the cache on the cache",
    "start": "1174279",
    "end": "1180220"
  },
  {
    "text": "servers you know most of the time you have a separate caching tier then you install a client portion which is",
    "start": "1180220",
    "end": "1186309"
  },
  {
    "text": "usually a client library or it might even have a client side process it depends on the cache so there's a client",
    "start": "1186309",
    "end": "1193539"
  },
  {
    "text": "portion of the cache and that client portion usually would have the asp.net",
    "start": "1193539",
    "end": "1198690"
  },
  {
    "text": "provider for the sessions so let me let me show you an exact",
    "start": "1198690",
    "end": "1204750"
  },
  {
    "start": "1201000",
    "end": "1297000"
  },
  {
    "text": "of how an asp.net provider would be used I'm of course using n cash as the",
    "start": "1204750",
    "end": "1210929"
  },
  {
    "text": "example but the same applies to any other cash including Redis so you would",
    "start": "1210929",
    "end": "1217890"
  },
  {
    "text": "basically go into your web dot config so after you've installed the cash and you've created the cache and the cache",
    "start": "1217890",
    "end": "1224760"
  },
  {
    "text": "itself is working you would go into the application tier and modify your web",
    "start": "1224760",
    "end": "1232110"
  },
  {
    "text": "config you'll do basically two things one you will add do an ad assembly off",
    "start": "1232110",
    "end": "1239220"
  },
  {
    "text": "your caches session state provider in case of n cache that's just the line that you copy and just put it in your",
    "start": "1239220",
    "end": "1247940"
  },
  {
    "text": "web lot config for other caches you it's going to be something similar the second",
    "start": "1247940",
    "end": "1254370"
  },
  {
    "text": "thing you do is you basically create the session State tag or and then in case of",
    "start": "1254370",
    "end": "1262530"
  },
  {
    "text": "n cache just copy this but in case what other cache is copied from their example and make sure your timeout is",
    "start": "1262530",
    "end": "1269130"
  },
  {
    "text": "appropriate in case of n cache make sure you have a cache name specified so I'm",
    "start": "1269130",
    "end": "1277950"
  },
  {
    "text": "just going to let's say my demo cache oops",
    "start": "1277950",
    "end": "1284120"
  },
  {
    "text": "whatever you named your cache so that's like a connection string so that's all",
    "start": "1284120",
    "end": "1289169"
  },
  {
    "text": "you specify once you've specified this you run the application again and all your sessions are stored in the cache",
    "start": "1289169",
    "end": "1296000"
  },
  {
    "text": "very straightforward takes practically very little time the only thing you have",
    "start": "1296000",
    "end": "1301919"
  },
  {
    "start": "1297000",
    "end": "1353000"
  },
  {
    "text": "to do after this is do some sanity testing go through the common use cases make sure your application still works",
    "start": "1301919",
    "end": "1308870"
  },
  {
    "text": "you know the reason you want to do sanity testing is because if you had an in proc storage model for sessions then",
    "start": "1308870",
    "end": "1318059"
  },
  {
    "text": "your session object might contain objects inside which are not serializable and and your application",
    "start": "1318059",
    "end": "1324750"
  },
  {
    "text": "will still work because the you know all the sessions are kept within the application within the worker process as",
    "start": "1324750",
    "end": "1331260"
  },
  {
    "text": "soon as you put in a distributed cache it's an out of process store so out of",
    "start": "1331260",
    "end": "1336809"
  },
  {
    "text": "process means serialization and he's any so your",
    "start": "1336809",
    "end": "1342750"
  },
  {
    "text": "session object is not going to serialize if the data inside it is not serializable so that's why you want to",
    "start": "1342750",
    "end": "1348390"
  },
  {
    "text": "do a sanity test make sure that you haven't accidentally created a situation",
    "start": "1348390",
    "end": "1354450"
  },
  {
    "start": "1353000",
    "end": "1372000"
  },
  {
    "text": "where it's not sure as well but that's about it there's no programming needed you just make this change assuming that",
    "start": "1354450",
    "end": "1361410"
  },
  {
    "text": "you know you're comfortable with the cash that you're using you've done some testing of the cache itself you plug",
    "start": "1361410",
    "end": "1368130"
  },
  {
    "text": "this in and and the sessions are stored in it okay let's come back to",
    "start": "1368130",
    "end": "1375060"
  },
  {
    "start": "1372000",
    "end": "1386000"
  },
  {
    "text": "application data caching which was the main focus which is where you'll be spending most of your time if you want",
    "start": "1375060",
    "end": "1380730"
  },
  {
    "text": "benefit out of distributed caching and",
    "start": "1380730",
    "end": "1386570"
  },
  {
    "start": "1386000",
    "end": "1517000"
  },
  {
    "text": "as I said if you don't have a framework so if you had an EF core application you",
    "start": "1386570",
    "end": "1393150"
  },
  {
    "text": "don't need to make cache calls if the cache is provide is has a provider for EF core but EF six or earlier you",
    "start": "1393150",
    "end": "1401370"
  },
  {
    "text": "there's no the architecture doesn't support it if you're using an hibernate which is the the equivalent of EF which",
    "start": "1401370",
    "end": "1410970"
  },
  {
    "text": "is the dotnet version of hibernate it's an or mapping engine for those who don't know that has a model where you can plug",
    "start": "1410970",
    "end": "1418350"
  },
  {
    "text": "in a cache without any programming but other than that you have to make calls API calls these calls are n cache which",
    "start": "1418350",
    "end": "1424830"
  },
  {
    "text": "is very similar to the asp.net cache object as you can see there's a you",
    "start": "1424830",
    "end": "1430230"
  },
  {
    "text": "connect with the cache assuming the caches are already running as I showed you here the cache will be running as if",
    "start": "1430230",
    "end": "1436800"
  },
  {
    "text": "it's a database it's it's a separate process the cache is running you connect with the cache and then this is a cache",
    "start": "1436800",
    "end": "1443490"
  },
  {
    "text": "handle that you preserve and you use that to do cache that get you can do get",
    "start": "1443490",
    "end": "1449100"
  },
  {
    "text": "contains add add async insert remove add means don't add it if the item already",
    "start": "1449100",
    "end": "1457980"
  },
  {
    "text": "exists inserts is add it if it doesn't if it exists otherwise no add it if it doesn't exist otherwise updated remove",
    "start": "1457980",
    "end": "1466020"
  },
  {
    "text": "of course is remove the async versions of these methods say don't wait for the",
    "start": "1466020",
    "end": "1471600"
  },
  {
    "text": "cache to be updated just come back and as soon as you do the a thing that there would",
    "start": "1471600",
    "end": "1476730"
  },
  {
    "text": "be an over load which will take a call back so if something goes wrong that",
    "start": "1476730",
    "end": "1481859"
  },
  {
    "text": "your callback will be called but the async is very very useful and I'll actually go through some use cases where",
    "start": "1481859",
    "end": "1489419"
  },
  {
    "text": "async is becomes really really useful it's very simple as you can see just a",
    "start": "1489419",
    "end": "1495509"
  },
  {
    "text": "simple API cache that get add insert removed of course there's more to it than this but this is the gist of it so",
    "start": "1495509",
    "end": "1504779"
  },
  {
    "text": "and I'll actually show you some source code examples on how to do all of those things okay so let's come to application",
    "start": "1504779",
    "end": "1521129"
  },
  {
    "start": "1517000",
    "end": "1530000"
  },
  {
    "text": "data caching so any cache that is good that must ensure in application data",
    "start": "1521129",
    "end": "1529230"
  },
  {
    "text": "caching that that cache is fresh that's what we talked about right good there the cache exists the data exists in two",
    "start": "1529230",
    "end": "1535470"
  },
  {
    "start": "1530000",
    "end": "1606000"
  },
  {
    "text": "places how does it do that the most",
    "start": "1535470",
    "end": "1543389"
  },
  {
    "text": "common way is explorations most people know expressions expressions is you when",
    "start": "1543389",
    "end": "1548399"
  },
  {
    "text": "you're adding something to the cache you tell it to please go ahead and expire this let's say in five minutes",
    "start": "1548399",
    "end": "1554279"
  },
  {
    "text": "let me show you an example of explorations so let's say here's a basic it's a console application again this is",
    "start": "1554279",
    "end": "1561690"
  },
  {
    "text": "an N cache example but I mean the same rules apply you reference the caching",
    "start": "1561690",
    "end": "1568139"
  },
  {
    "text": "assemblies you spit use the caching namespaces you",
    "start": "1568139",
    "end": "1573869"
  },
  {
    "text": "connect with the cache you get the cache handle you add the data and as you're adding the data you specify let's say 1",
    "start": "1573869",
    "end": "1581940"
  },
  {
    "text": "minute so you're saying expire this 1 minute from now in case of n cache and I",
    "start": "1581940",
    "end": "1588629"
  },
  {
    "text": "think this is also the asp.net cache object also works the same way so",
    "start": "1588629",
    "end": "1593820"
  },
  {
    "text": "there's a key there's the actual object that you're trying to add there's the exploration and you're saying don't do",
    "start": "1593820",
    "end": "1599850"
  },
  {
    "text": "any sliding expression and other stuff so by just having that call you",
    "start": "1599850",
    "end": "1605640"
  },
  {
    "text": "you've specified you've told the cash expire this item one minute from now why",
    "start": "1605640",
    "end": "1614640"
  },
  {
    "start": "1606000",
    "end": "1850000"
  },
  {
    "text": "do you want to expire this one minute from now if you just think about it because you think that if you kept it",
    "start": "1614640",
    "end": "1621870"
  },
  {
    "text": "longer than that in the cash somebody's going to change that data in the database and the cash won't know about",
    "start": "1621870",
    "end": "1627780"
  },
  {
    "text": "it and we'll have that really undesirable situation of all data in the",
    "start": "1627780",
    "end": "1634500"
  },
  {
    "text": "cache so you're making a guess really with expressions you're only making a guess so there's also a sliding",
    "start": "1634500",
    "end": "1643200"
  },
  {
    "text": "expression which also has the same name but the purpose is completely different its purpose is essentially clean up so",
    "start": "1643200",
    "end": "1650880"
  },
  {
    "text": "for sessions you're saying when the user logs out and nobody's touching that sessions why keep it in the cache so to",
    "start": "1650880",
    "end": "1658080"
  },
  {
    "text": "remove it so there's a sliding expression which says remove this item after this long of inactivity so so that",
    "start": "1658080",
    "end": "1667049"
  },
  {
    "text": "you don't have to keep track of it of course so absolute expression is for application data sliding expression is",
    "start": "1667049",
    "end": "1674280"
  },
  {
    "text": "for transient data very very different purposes it's a very important point to",
    "start": "1674280",
    "end": "1679679"
  },
  {
    "text": "keep in mind and and we've talked about reference data is data that either does",
    "start": "1679679",
    "end": "1686760"
  },
  {
    "text": "not change it's read-only or it ain't changes but very infrequently maybe every hour maybe every day or every week",
    "start": "1686760",
    "end": "1692940"
  },
  {
    "text": "something this could be your pricing this could be or something else transactional data on the other hand is",
    "start": "1692940",
    "end": "1698010"
  },
  {
    "text": "your customers accounts activities that change you know maybe every five 10 15",
    "start": "1698010",
    "end": "1703890"
  },
  {
    "text": "seconds 30 seconds and so you need to be able to handle both and expressions you",
    "start": "1703890",
    "end": "1710549"
  },
  {
    "text": "specify different expression intervals for different type of data that's why you have control but explorations as I",
    "start": "1710549",
    "end": "1718530"
  },
  {
    "text": "said is making a guess so X although it's good for some data it's it's not a",
    "start": "1718530",
    "end": "1724980"
  },
  {
    "text": "foolproof system no you might still have situation where the data changes in the",
    "start": "1724980",
    "end": "1731429"
  },
  {
    "text": "database if that happens then you need",
    "start": "1731429",
    "end": "1737610"
  },
  {
    "text": "the cash to be smart enough to monitor your database so whatever",
    "start": "1737610",
    "end": "1743429"
  },
  {
    "text": "data you're putting in the cache the cache should be smart enough to monitor",
    "start": "1743429",
    "end": "1748740"
  },
  {
    "text": "that data in the database so if that data changes the cache will be able to",
    "start": "1748740",
    "end": "1755159"
  },
  {
    "text": "take care of it or synchronize it itself and there's a feature in sequel server",
    "start": "1755159",
    "end": "1761340"
  },
  {
    "text": "called Seco dependency or C which and there's one in the ad or net framework",
    "start": "1761340",
    "end": "1769260"
  },
  {
    "text": "for Oracle coracle dependency this these features essentially use database events",
    "start": "1769260",
    "end": "1775490"
  },
  {
    "text": "whichever application uses these features let me show you example so",
    "start": "1775490",
    "end": "1784590"
  },
  {
    "text": "let's say oops not this one let's say",
    "start": "1784590",
    "end": "1790529"
  },
  {
    "text": "that you're trying to add something to the cache okay so you're going to do",
    "start": "1790529",
    "end": "1796679"
  },
  {
    "text": "cache that ad is everybody able to see the source code okay okay so you you",
    "start": "1796679",
    "end": "1809820"
  },
  {
    "text": "want to add this object this is some product it has a key so but you want to",
    "start": "1809820",
    "end": "1815880"
  },
  {
    "text": "tell the cache so that if this if the corresponding row in the product table changes that this item should be removed",
    "start": "1815880",
    "end": "1823110"
  },
  {
    "text": "from the cache and the cache should be able to handle that the cache can",
    "start": "1823110",
    "end": "1831390"
  },
  {
    "text": "actually use a sequel dependency where it will use this sequel statement and",
    "start": "1831390",
    "end": "1837330"
  },
  {
    "text": "use a connection string to sequel server and the cache becomes a client of your",
    "start": "1837330",
    "end": "1844200"
  },
  {
    "text": "database so think of this picture hold on this picture here so your application",
    "start": "1844200",
    "end": "1852149"
  },
  {
    "text": "is running here it adds something to the cache and it tells the cache please monitor the database so the cache opens",
    "start": "1852149",
    "end": "1859169"
  },
  {
    "text": "a connection with the database and uses the sequel dependency feature of AD or net and then becomes a client of the",
    "start": "1859169",
    "end": "1866549"
  },
  {
    "text": "database and from that point onward sequel server sees the cache",
    "start": "1866549",
    "end": "1871970"
  },
  {
    "text": "as a client and it notifies the clash through database notifications if that",
    "start": "1871970",
    "end": "1877130"
  },
  {
    "text": "corresponding data set changes whatever that sequel statement meant and that",
    "start": "1877130",
    "end": "1882770"
  },
  {
    "text": "means now you have a situation where that exactly so sequel server is going",
    "start": "1882770",
    "end": "1896660"
  },
  {
    "text": "to push the notifications to the cache it's an event-driven model and the cache",
    "start": "1896660",
    "end": "1902840"
  },
  {
    "text": "will immediately then take an action you",
    "start": "1902840",
    "end": "1907000"
  },
  {
    "text": "you have a chance of very short interval but it usually it's fairly quick so but",
    "start": "1915250",
    "end": "1925910"
  },
  {
    "text": "it's an event-driven update sequel server sends an event notification to",
    "start": "1925910",
    "end": "1931040"
  },
  {
    "text": "the cache the cache immediately does one or two things it either removes that item from the cache which is the default",
    "start": "1931040",
    "end": "1937340"
  },
  {
    "text": "behavior so that when it's removed the next time your application wants that",
    "start": "1937340",
    "end": "1943790"
  },
  {
    "text": "data it won't find it in the cache it'll go to the database and that's the the common pattern of doing cache cache",
    "start": "1943790",
    "end": "1952970"
  },
  {
    "text": "programming is that you look for the data in the cache if it's not there you go to the database so by removing it",
    "start": "1952970",
    "end": "1958970"
  },
  {
    "text": "from the cache it's automatically synchronized another option could be that it can reload the new version",
    "start": "1958970",
    "end": "1966230"
  },
  {
    "text": "immediately and I'll come back to that in a bit how it will do that so you know",
    "start": "1966230",
    "end": "1974570"
  },
  {
    "text": "again the cache has to become smart enough that it knows these scenarios if",
    "start": "1974570",
    "end": "1980300"
  },
  {
    "text": "it doesn't you're forced to then not cache transactional data or cash transaction data where you can really",
    "start": "1980300",
    "end": "1985940"
  },
  {
    "text": "make a guess on explorations very accurately otherwise you will have",
    "start": "1985940",
    "end": "1991240"
  },
  {
    "start": "1990000",
    "end": "2171000"
  },
  {
    "text": "situation where the data becomes stale",
    "start": "1991240",
    "end": "1995530"
  },
  {
    "text": "yes and I'll go into that at the end of this page the cash dependency feature",
    "start": "2002340",
    "end": "2008020"
  },
  {
    "text": "which is also at asp.net cache a feature that that some of the other caches have",
    "start": "2008020",
    "end": "2013270"
  },
  {
    "text": "including in cache sequel dependency let me let me complete that by thought on",
    "start": "2013270",
    "end": "2018310"
  },
  {
    "text": "that see codependency is a great feature but if you had 1 million objects in the",
    "start": "2018310",
    "end": "2024580"
  },
  {
    "text": "cache that needed sequel dependency for every sequel dependency sequel server",
    "start": "2024580",
    "end": "2030730"
  },
  {
    "text": "creates a data structure on within the database server to monitor that data set",
    "start": "2030730",
    "end": "2036820"
  },
  {
    "text": "could that data set does not have to be a single row it can be a complete it could be multiple rows it could be a",
    "start": "2036820",
    "end": "2041890"
  },
  {
    "text": "join of multiple tables I think it can be joined but let's say even if it's not a join of multiple tables it's it can",
    "start": "2041890",
    "end": "2047980"
  },
  {
    "text": "definitely be multiple roles in the same table and if it's equal server had to create one million of those you can",
    "start": "2047980",
    "end": "2054129"
  },
  {
    "text": "imagine you know since you're thinking since we're talking scalability you have to think in large numbers you can't just",
    "start": "2054130",
    "end": "2061179"
  },
  {
    "text": "think about 1000 so sequel dependency is great maybe for thousands or tens of",
    "start": "2061179",
    "end": "2067030"
  },
  {
    "text": "thousands of items for hundreds of thousands or millions of items it's not great another option could be which some",
    "start": "2067030",
    "end": "2074408"
  },
  {
    "text": "of the caches support it is that the the cache could actually pull the database",
    "start": "2074409",
    "end": "2080470"
  },
  {
    "text": "now polling is not as real-time as events but polling is a lot more",
    "start": "2080470",
    "end": "2086139"
  },
  {
    "text": "efficient because in one poll you could just say give me all the rows that have",
    "start": "2086140",
    "end": "2091929"
  },
  {
    "text": "give me all the keys where the data has changed say in one call you get back",
    "start": "2091929",
    "end": "2097540"
  },
  {
    "text": "thousands of rows and then you could take action on those so it's like a bulk operation but even that has limitations",
    "start": "2097540",
    "end": "2105160"
  },
  {
    "text": "because when you're talking millions of dependencies that has limitations the",
    "start": "2105160",
    "end": "2112030"
  },
  {
    "text": "third option is to use a CLR stored procedure so if the cache that you're",
    "start": "2112030",
    "end": "2118540"
  },
  {
    "text": "using gives you a client library that's compatible with CLR environment in in",
    "start": "2118540",
    "end": "2124390"
  },
  {
    "text": "the stored procedure either sequel server or Oracle Oracle on Windows of",
    "start": "2124390",
    "end": "2129850"
  },
  {
    "text": "course then you can make the call from a CLR procedure so the way I see it our",
    "start": "2129850",
    "end": "2135319"
  },
  {
    "text": "procedure works is that you don't create a sequel dependency anymore you add data",
    "start": "2135319",
    "end": "2140809"
  },
  {
    "text": "into the cache and then when and then",
    "start": "2140809",
    "end": "2146359"
  },
  {
    "text": "you modify your database triggers that when that role changes the database trigger calls the CLR procedure and the",
    "start": "2146359",
    "end": "2153079"
  },
  {
    "text": "CLR procedure now knows that this row is changed and and it knows what the corresponding object and the cache is or",
    "start": "2153079",
    "end": "2160309"
  },
  {
    "text": "ought to be so it'll either go and add or update or remove that object from the cache so it actually is the CLR",
    "start": "2160309",
    "end": "2167779"
  },
  {
    "text": "procedure becomes a client so it's like a reverse thing here the database is now becoming a client of",
    "start": "2167779",
    "end": "2173990"
  },
  {
    "start": "2171000",
    "end": "2193000"
  },
  {
    "text": "the cache through see our procedure the",
    "start": "2173990",
    "end": "2182500"
  },
  {
    "text": "transactions yes so the CLR procedure is going to be called within a database",
    "start": "2182500",
    "end": "2188059"
  },
  {
    "text": "transaction and this is where those async methods will come in really handy",
    "start": "2188059",
    "end": "2194230"
  },
  {
    "text": "because if you don't have the async methods and you're calling multiple",
    "start": "2194230",
    "end": "2200779"
  },
  {
    "text": "servers to be updated the database transactions will start to timeout pretty soon because they're not designed",
    "start": "2200779",
    "end": "2208400"
  },
  {
    "text": "to wait for that long but if you do an async call then the cache can be updated",
    "start": "2208400",
    "end": "2214520"
  },
  {
    "text": "and the database transaction will be completed again keep in mind that the",
    "start": "2214520",
    "end": "2219950"
  },
  {
    "text": "cache updates don't fail in the same fashion as a relational database why",
    "start": "2219950",
    "end": "2225230"
  },
  {
    "text": "because a relational database can fail and update based on referential",
    "start": "2225230",
    "end": "2230869"
  },
  {
    "text": "integrity or other data integrity violations cache does not check any of those caches every object is independent",
    "start": "2230869",
    "end": "2237890"
  },
  {
    "text": "of other objects so the only time a cache will fail updates is when some system failure happens you know if",
    "start": "2237890",
    "end": "2244819"
  },
  {
    "text": "something really goes wrong which is not I mean which is different than the",
    "start": "2244819",
    "end": "2250940"
  },
  {
    "text": "normal database transactions would be so an async method would be called from a",
    "start": "2250940",
    "end": "2256099"
  },
  {
    "text": "CLR ffice procedure to go into this so those are three ways where you can",
    "start": "2256099",
    "end": "2262369"
  },
  {
    "text": "ensure that the cache stay synchronized so you need to take",
    "start": "2262369",
    "end": "2268800"
  },
  {
    "text": "into account this really really important aspect when you're starting to cache data unless your data is just",
    "start": "2268800",
    "end": "2275510"
  },
  {
    "text": "read-only then it doesn't matter but if your data is changes and it's it's a sensitive data you know you want to make",
    "start": "2275510",
    "end": "2284400"
  },
  {
    "text": "sure that cache is fresh and the same the same rule applies the cache should be able to synchronize with non",
    "start": "2284400",
    "end": "2289860"
  },
  {
    "text": "relational sources if your data is in mainframe or maybe you're making some web method calls you should be able to",
    "start": "2289860",
    "end": "2296730"
  },
  {
    "text": "synchronize against that as well so the cache should provide other hooks so in",
    "start": "2296730",
    "end": "2303990"
  },
  {
    "text": "case of n cache there's a thing called custom fantasies for other Java caches they have other names so the cache",
    "start": "2303990",
    "end": "2311100"
  },
  {
    "text": "should provide some hooks where your code can be called because only you know where the data source is the cache does",
    "start": "2311100",
    "end": "2317190"
  },
  {
    "text": "not know so synchronize the cache with the database and synchronize the cache",
    "start": "2317190",
    "end": "2322440"
  },
  {
    "text": "with the non-relational source so you need to be able to do all of those to",
    "start": "2322440",
    "end": "2327920"
  },
  {
    "text": "confidently use all types of data in a cache and finally I'll come to the",
    "start": "2327920",
    "end": "2333210"
  },
  {
    "text": "question that you had is that there's an added complexity with relational",
    "start": "2333210",
    "end": "2338340"
  },
  {
    "text": "databases is that different types of data has relationships and because",
    "start": "2338340",
    "end": "2343440"
  },
  {
    "text": "unlike a no sequel database where you a grenade at a-- so let me think of a",
    "start": "2343440",
    "end": "2349380"
  },
  {
    "text": "Northwind database and and an order if you had a no sequel database the entire",
    "start": "2349380",
    "end": "2354900"
  },
  {
    "text": "order would be kept in one collection right you have the order and the order items all in one collection well because",
    "start": "2354900",
    "end": "2361770"
  },
  {
    "text": "the order items don't really exist independently they're dependent on the order but in a relational database you",
    "start": "2361770",
    "end": "2369030"
  },
  {
    "text": "would have two different tables one would be an order table one would be an order item table so you have",
    "start": "2369030",
    "end": "2375360"
  },
  {
    "text": "dependencies so that's just one example there are also other examples so a relational database is known for",
    "start": "2375360",
    "end": "2381480"
  },
  {
    "text": "relationships so when data comes to the cache you have different types of data",
    "start": "2381480",
    "end": "2387300"
  },
  {
    "text": "and if one data changes in the cache the",
    "start": "2387300",
    "end": "2393570"
  },
  {
    "text": "cache doesn't know if the other data is valid anymore and you so in case of an order is an",
    "start": "2393570",
    "end": "2401730"
  },
  {
    "text": "example if you had cashed the order object and the order item our object separately and you remove the order from",
    "start": "2401730",
    "end": "2408420"
  },
  {
    "text": "the cache maybe you've deleted that order although and you usually don't",
    "start": "2408420",
    "end": "2414120"
  },
  {
    "text": "delete orders but I'm just saying as a hypothetical example if that is the case then the order item should not be kept",
    "start": "2414120",
    "end": "2421170"
  },
  {
    "text": "in the cache if you do there's a data integrity problem so that's where the",
    "start": "2421170",
    "end": "2426390"
  },
  {
    "text": "dependency feature comes in it's an asp.net cache object feature which is an",
    "start": "2426390",
    "end": "2433260"
  },
  {
    "text": "cache also implements it but a dependency essentially allows you to tell the cache this item depends on so you'll say order",
    "start": "2433260",
    "end": "2440580"
  },
  {
    "text": "item depends on order object if the order object is ever removed or updated",
    "start": "2440580",
    "end": "2446250"
  },
  {
    "text": "from the cache please remove the order item automatically so the application does not have to do any bookkeeping just",
    "start": "2446250",
    "end": "2453150"
  },
  {
    "text": "like you are not used to doing any relational database bookkeeping you don't maintain journals or any you know",
    "start": "2453150",
    "end": "2460980"
  },
  {
    "text": "data integrity details right you assume that your data store will your database",
    "start": "2460980",
    "end": "2466260"
  },
  {
    "text": "will take care of it the same rule applies to your cache you should not have to keep track of all of those data",
    "start": "2466260",
    "end": "2471810"
  },
  {
    "text": "integrity things so a cache dependency feature is also a very important feature allows you to keep track of these types",
    "start": "2471810",
    "end": "2478380"
  },
  {
    "text": "of data integrity violations any questions okay",
    "start": "2478380",
    "end": "2488960"
  },
  {
    "text": "so we talked about so I mean so we've",
    "start": "2490569",
    "end": "2498049"
  },
  {
    "start": "2495000",
    "end": "2513000"
  },
  {
    "text": "kept the cash fresh now okay so now you're really starting to use the cash you know it's become an important part",
    "start": "2498049",
    "end": "2504380"
  },
  {
    "text": "of your application strategy application architecture so now how can we make the",
    "start": "2504380",
    "end": "2510710"
  },
  {
    "text": "cash more friendly easier to use to simplify your work one of the features",
    "start": "2510710",
    "end": "2517670"
  },
  {
    "start": "2513000",
    "end": "2524000"
  },
  {
    "text": "is read through and write through read through is nothing but your code let me",
    "start": "2517670",
    "end": "2525410"
  },
  {
    "start": "2524000",
    "end": "2604000"
  },
  {
    "text": "just show you example here so read",
    "start": "2525410",
    "end": "2530930"
  },
  {
    "text": "through is your code that's how you implement a read through provider example and again the same concept",
    "start": "2530930",
    "end": "2537890"
  },
  {
    "text": "exists in other caches too I'm just using n cache as an example at least on",
    "start": "2537890",
    "end": "2543799"
  },
  {
    "text": "the on on the Java side so you implement a read through interface it has three",
    "start": "2543799",
    "end": "2549890"
  },
  {
    "text": "methods in case of n cache there's an init method which is called when the cache is started so it can connect to",
    "start": "2549890",
    "end": "2555020"
  },
  {
    "text": "your data sources you know it usually contains your connection strings and other things there's a dispose method",
    "start": "2555020",
    "end": "2561559"
  },
  {
    "text": "which is called when the cache is being stopped so you can disconnect the data sources and there's a load from source",
    "start": "2561559",
    "end": "2568430"
  },
  {
    "text": "method where they go there so there's an overload of that for bulk fetch but",
    "start": "2568430",
    "end": "2575990"
  },
  {
    "text": "let's say there's a load from source method which takes a key and it gives out a cache item which is cache item is",
    "start": "2575990",
    "end": "2584420"
  },
  {
    "text": "the data structure which contains the data plus other metadata like expressions and other things so your",
    "start": "2584420",
    "end": "2592309"
  },
  {
    "text": "code now goes to your database and gets the data so this code that I just showed",
    "start": "2592309",
    "end": "2598819"
  },
  {
    "text": "you will run on the caching tier that",
    "start": "2598819",
    "end": "2607400"
  },
  {
    "start": "2604000",
    "end": "2628000"
  },
  {
    "text": "means that your application has less and less of the database code so you're",
    "start": "2607400",
    "end": "2613490"
  },
  {
    "text": "actually using a cache as an encapsulation layer so it simplifies",
    "start": "2613490",
    "end": "2618950"
  },
  {
    "text": "your application that's one benefit the second benefit is that you can use read-through for",
    "start": "2618950",
    "end": "2627269"
  },
  {
    "text": "example in other cases for example as you know we talked about explorations right that you're doing absolute",
    "start": "2627269",
    "end": "2632609"
  },
  {
    "start": "2628000",
    "end": "2742000"
  },
  {
    "text": "exploration you're saying expire this five minutes from now what does that mean expire means what it means remove",
    "start": "2632609",
    "end": "2639630"
  },
  {
    "text": "that item from the cache right but what if you just wanted to reload a new",
    "start": "2639630",
    "end": "2644759"
  },
  {
    "text": "version of it it was some pricing that that that was changing so if you didn't",
    "start": "2644759",
    "end": "2650549"
  },
  {
    "text": "have the reload option the item would be removed and oh you know that's it's a",
    "start": "2650549",
    "end": "2657119"
  },
  {
    "text": "really heavy traffic ecommerce application so all of the clients will immediately hit the database the first",
    "start": "2657119",
    "end": "2663749"
  },
  {
    "text": "one that finds it will go and update the cache but while that is being done thousands of requests have made it to",
    "start": "2663749",
    "end": "2670680"
  },
  {
    "text": "the database unnecessarily now think of that you've got hundreds of thousands of",
    "start": "2670680",
    "end": "2676140"
  },
  {
    "text": "these items that keep expiring all the time so you're sending a lot of",
    "start": "2676140",
    "end": "2681690"
  },
  {
    "text": "unnecessary traffic to the database just because you don't have a reload capability but if you could have a",
    "start": "2681690",
    "end": "2690180"
  },
  {
    "text": "reload capability what would happen the expiration would not remove the item from the cache it would actually call",
    "start": "2690180",
    "end": "2699630"
  },
  {
    "text": "the read-through and say go and get me a new copy of this so read through will get a new version of that because read",
    "start": "2699630",
    "end": "2705749"
  },
  {
    "text": "through knows you know based on the key it knows where to go and how to get that",
    "start": "2705749",
    "end": "2711059"
  },
  {
    "text": "data it'll reconstruct that object that entire thing give it to the cache and the cache will now go and update that",
    "start": "2711059",
    "end": "2717809"
  },
  {
    "text": "item instead of removing it it just updates it that means that the item is always in the cache it just gets updated",
    "start": "2717809",
    "end": "2724559"
  },
  {
    "text": "at expiration intervals the same same rule applies when you combine read-through with database",
    "start": "2724559",
    "end": "2729809"
  },
  {
    "text": "synchronization when the data changes in the database why remove it from the cache why not just reload a new copy you",
    "start": "2729809",
    "end": "2737369"
  },
  {
    "text": "know again your application becomes much simpler so read-through has the benefit",
    "start": "2737369",
    "end": "2743489"
  },
  {
    "start": "2742000",
    "end": "2784000"
  },
  {
    "text": "of first simplifying your code because more and more of your database code goes to the caching here that way if you have",
    "start": "2743489",
    "end": "2750209"
  },
  {
    "text": "multiple applications sharing a common caching infrastructure all of them can",
    "start": "2750209",
    "end": "2756869"
  },
  {
    "text": "also the code so they don't have to maintain that code and second benefit as I said",
    "start": "2756869",
    "end": "2762180"
  },
  {
    "text": "is the art of the auto reload in case of expressions and database synchronization",
    "start": "2762180",
    "end": "2767840"
  },
  {
    "text": "the second is the right through which is the right equivalent of read through it",
    "start": "2767840",
    "end": "2777210"
  },
  {
    "text": "has the first benefit is the same which is the encapsulation it simplifies let",
    "start": "2777210",
    "end": "2783599"
  },
  {
    "text": "me just show you that right through so this is read through this is the right",
    "start": "2783599",
    "end": "2791010"
  },
  {
    "start": "2784000",
    "end": "2830000"
  },
  {
    "text": "the same way it's got an init method it's got a dispose method it's got a right to source now right to source also",
    "start": "2791010",
    "end": "2798990"
  },
  {
    "text": "tells you what the operation is the operation could be add update or delete",
    "start": "2798990",
    "end": "2804260"
  },
  {
    "text": "right I mean the right could be one of those three so based on that you then go",
    "start": "2804260",
    "end": "2810570"
  },
  {
    "text": "into your database source and you take the appropriate action and then you can",
    "start": "2810570",
    "end": "2818010"
  },
  {
    "text": "do the same with that there was another overload of this which was a bulk I'm so",
    "start": "2818010",
    "end": "2823859"
  },
  {
    "text": "you could actually update multiple items at the same time right here so the first",
    "start": "2823859",
    "end": "2829980"
  },
  {
    "text": "benefit of the right through was the same as read through but the second benefit is actually different the second",
    "start": "2829980",
    "end": "2836580"
  },
  {
    "start": "2830000",
    "end": "2977000"
  },
  {
    "text": "benefit is and this is actually a very important benefit that you can use this",
    "start": "2836580",
    "end": "2842640"
  },
  {
    "text": "thing called right behind and right behind the application updates the cache",
    "start": "2842640",
    "end": "2848280"
  },
  {
    "text": "and does not wait for the cache to update the database why because database",
    "start": "2848280",
    "end": "2854460"
  },
  {
    "text": "updates are slow I mean cache is at least 10 times faster if not more than a",
    "start": "2854460",
    "end": "2859859"
  },
  {
    "text": "database operation so why not just go and update the cache in a right behind",
    "start": "2859859",
    "end": "2866040"
  },
  {
    "text": "manner and tell the cache please go and update the database for me it's the same right through handler that gets called",
    "start": "2866040",
    "end": "2871970"
  },
  {
    "text": "but now it might be called in a bulk you know because it's going to queue up the stuff and there are other you know",
    "start": "2871970",
    "end": "2879720"
  },
  {
    "text": "variations that you can use when you say go and do bulk update you can do retry as if the if the operation fails but now",
    "start": "2879720",
    "end": "2889020"
  },
  {
    "text": "your application does not have to wait for the day of course when you do the right behind there's a callback that you can register",
    "start": "2889020",
    "end": "2894330"
  },
  {
    "text": "so if something goes wrong you will be notified you know so that if the operation fails and and there's no way",
    "start": "2894330",
    "end": "2902520"
  },
  {
    "text": "to actually perform that update then you will be notified so that you don't have that situation where you think the",
    "start": "2902520",
    "end": "2909720"
  },
  {
    "text": "update was done whereas it wasn't but the right behind means that you no",
    "start": "2909720",
    "end": "2914760"
  },
  {
    "text": "longer have to wait for the database updates one more situation where your application becomes much much faster of",
    "start": "2914760",
    "end": "2921390"
  },
  {
    "text": "course data that is very very sensitive you don't want to do the right behind you want to do the right through but a",
    "start": "2921390",
    "end": "2930300"
  },
  {
    "text": "lot of data you can you have enough tolerance that you can do the right",
    "start": "2930300",
    "end": "2936810"
  },
  {
    "text": "behind and really speed up the operations so read through right through",
    "start": "2936810",
    "end": "2944760"
  },
  {
    "text": "is very very powerful feature any questions I've been talking nonstop",
    "start": "2944760",
    "end": "2951050"
  },
  {
    "start": "2977000",
    "end": "3006000"
  },
  {
    "text": "okay I can talk about n cash every cash has their own strategies by the way this",
    "start": "2979250",
    "end": "2987050"
  },
  {
    "text": "feature reads through breath so on the.net side only n cash has on the Java side you have other players that have it",
    "start": "2987050",
    "end": "2993670"
  },
  {
    "text": "in case of n cash depending on what cash in topology you're using they're",
    "start": "2993670",
    "end": "2999800"
  },
  {
    "text": "different cash in topologies but there's let's say if you were using this topology called partition replication or",
    "start": "2999800",
    "end": "3005470"
  },
  {
    "text": "partition replica here where you can have multiple partitions every partition",
    "start": "3005470",
    "end": "3013480"
  },
  {
    "start": "3006000",
    "end": "3130000"
  },
  {
    "text": "is backed up on to a different server what happens is depending on what data you're updating whichever partition that",
    "start": "3013480",
    "end": "3020920"
  },
  {
    "text": "data is supposed to exist in the read through or the right thread runs on that server so that way it can do a",
    "start": "3020920",
    "end": "3028240"
  },
  {
    "text": "distribution and load balancing so that one server does not become a bottleneck",
    "start": "3028240",
    "end": "3035130"
  },
  {
    "text": "however if you have a different apology let's say there's another topology of n cache I don't have that slide here",
    "start": "3036660",
    "end": "3043630"
  },
  {
    "text": "because I you know I this talk was not a wine cache but there's another topology and an cache called replicated where",
    "start": "3043630",
    "end": "3049540"
  },
  {
    "text": "every server has an entire copy of the cache so every server has the same data so in that case all the read-throughs on",
    "start": "3049540",
    "end": "3057280"
  },
  {
    "text": "the right through go to the primary coordinator of the time if that server fails then goes to the next one and the",
    "start": "3057280",
    "end": "3064300"
  },
  {
    "text": "next one but in case of partitioned topology it's much more scalable if you",
    "start": "3064300",
    "end": "3070810"
  },
  {
    "text": "can distribute the read-throughs and the right through to all the servers in the cluster right but even for the reads",
    "start": "3070810",
    "end": "3084130"
  },
  {
    "text": "again keep in mind the read-throughs reads are being done when the cache does not have that data in some cases you can",
    "start": "3084130",
    "end": "3090010"
  },
  {
    "text": "also force the read through and say even though even if cache has the data please call the read through because for",
    "start": "3090010",
    "end": "3095589"
  },
  {
    "text": "whatever reason you just don't want to take a chance on the read through in that case or every read will call the",
    "start": "3095589",
    "end": "3101349"
  },
  {
    "text": "read through but in majority of the cases read through is going to be called only when the cache does not have that",
    "start": "3101349",
    "end": "3108190"
  },
  {
    "text": "so let's say you do a cache that get and the cache does not have that data so then cache will call the read through",
    "start": "3108190",
    "end": "3114130"
  },
  {
    "text": "so the percentage of the time that you go the database is that 20% as a venture",
    "start": "3114130",
    "end": "3120580"
  },
  {
    "text": "or less so did that answer your question any other questions on the read through",
    "start": "3120580",
    "end": "3128440"
  },
  {
    "text": "right through okay so let's say you're",
    "start": "3128440",
    "end": "3135310"
  },
  {
    "start": "3130000",
    "end": "3143000"
  },
  {
    "text": "convinced about cache being a secular scalability solution you you're convinced about",
    "start": "3135310",
    "end": "3141810"
  },
  {
    "text": "these use cases you know how to keep the",
    "start": "3141810",
    "end": "3148030"
  },
  {
    "start": "3143000",
    "end": "3149000"
  },
  {
    "text": "cache fresh you've benefiting from the reason right through that means you're putting a lot of data in the cache now",
    "start": "3148030",
    "end": "3153310"
  },
  {
    "start": "3149000",
    "end": "3183000"
  },
  {
    "text": "right so the cache can no longer be just a key value pair because if it were just",
    "start": "3153310",
    "end": "3160150"
  },
  {
    "text": "to keep even though that's how the cache is underneath it's a key value pair but",
    "start": "3160150",
    "end": "3165849"
  },
  {
    "text": "if it remained that if that remain as the only way to access the cache you would have a your applications will",
    "start": "3165849",
    "end": "3172960"
  },
  {
    "text": "become much more difficult so the cache has to start behaving more and more like a database so the one of the first",
    "start": "3172960",
    "end": "3183130"
  },
  {
    "start": "3183000",
    "end": "3248000"
  },
  {
    "text": "things that a database is good for is ability to query to search to find data",
    "start": "3183130",
    "end": "3189300"
  },
  {
    "text": "easily instead of finding it only on keys you want to be able to find it on",
    "start": "3189300",
    "end": "3194830"
  },
  {
    "text": "other attributes so a good distributed cache will provide you with",
    "start": "3194830",
    "end": "3201520"
  },
  {
    "text": "some sort of acquiring language you know in case of dotnet it's either SQL or",
    "start": "3201520",
    "end": "3208869"
  },
  {
    "text": "link querying so you should be able to do something like select customers where",
    "start": "3208869",
    "end": "3214630"
  },
  {
    "text": "- Murdoch city is London and get all the customer objects from the cache where",
    "start": "3214630",
    "end": "3220059"
  },
  {
    "text": "that attribute condition is true so the",
    "start": "3220059",
    "end": "3225430"
  },
  {
    "text": "more you're able to do these types of searches the more you're going to benefit from a cache as a database the",
    "start": "3225430",
    "end": "3232390"
  },
  {
    "text": "less you're able to do these the more painful the application will become because you'll always have to go to the database for these queries and only for",
    "start": "3232390",
    "end": "3240009"
  },
  {
    "text": "individual object fetches that you'll go to the cache which defeats the purpose",
    "start": "3240009",
    "end": "3245470"
  },
  {
    "text": "in many cases so here let me show an example of how you would do sequel again",
    "start": "3245470",
    "end": "3256500"
  },
  {
    "text": "you would connect to the cache and do all the tables so but whatever data you have in the cache then you issue a query",
    "start": "3256500",
    "end": "3264849"
  },
  {
    "text": "in disk in case of n cash as I said it's you just specify the object name or the",
    "start": "3264849",
    "end": "3270220"
  },
  {
    "text": "object type and you specify criteria and the criteria that cannot include joins but it can include everything else you",
    "start": "3270220",
    "end": "3277269"
  },
  {
    "text": "can do in operator you can do like you can you know like wild card and you just",
    "start": "3277269",
    "end": "3284349"
  },
  {
    "text": "do an execute reader and just like sequel server you're searching the cache",
    "start": "3284349",
    "end": "3292200"
  },
  {
    "text": "and with this type of a capability now you can load a lot of data in the cache",
    "start": "3294839",
    "end": "3301569"
  },
  {
    "text": "all those look-up tables can just be in the cache why go to the database at all",
    "start": "3301569",
    "end": "3306930"
  },
  {
    "text": "but even though you're loading all that data in the cache in the cache you are",
    "start": "3306930",
    "end": "3313210"
  },
  {
    "text": "able to search it in the same fashion as you would a database so the simplicity",
    "start": "3313210",
    "end": "3319359"
  },
  {
    "text": "of doing SQL type of querying makes your",
    "start": "3319359",
    "end": "3324609"
  },
  {
    "text": "life a lot easier same thing goes if you if you like link you can and if the cache that you're",
    "start": "3324609",
    "end": "3332259"
  },
  {
    "start": "3327000",
    "end": "3421000"
  },
  {
    "text": "using has a link provider then you can",
    "start": "3332259",
    "end": "3337599"
  },
  {
    "text": "essentially get your I queryable let's sit here and then you can issue a link",
    "start": "3337599",
    "end": "3344460"
  },
  {
    "text": "query the same way as you as you would now behind the scenes that of course is",
    "start": "3344460",
    "end": "3350900"
  },
  {
    "text": "being converted into sequel searching and then you know a record set is being",
    "start": "3350900",
    "end": "3356329"
  },
  {
    "text": "returned so whatever you're comfortable with whether you want to do linked or whether you want to just do SQL",
    "start": "3356329",
    "end": "3362779"
  },
  {
    "text": "searching the bottom line is you should be able to do searching in the cache now",
    "start": "3362779",
    "end": "3367869"
  },
  {
    "text": "one thing to keep in mind that when you do a sequel type of searching the entire",
    "start": "3367869",
    "end": "3374989"
  },
  {
    "text": "data set that you're searching on has to exist in the cache so if you're",
    "start": "3374989",
    "end": "3381709"
  },
  {
    "text": "searching for customers where the city is New York or London all the customers",
    "start": "3381709",
    "end": "3387439"
  },
  {
    "text": "have to be in the cache why because if some of them are in the cache somewhere in the database you don't know which",
    "start": "3387439",
    "end": "3394339"
  },
  {
    "text": "ones you're going to get which ones you're not so that that's an important thing to keep in mind",
    "start": "3394339",
    "end": "3399799"
  },
  {
    "text": "so sequel searching is good when you can load the entire data set entire data",
    "start": "3399799",
    "end": "3405589"
  },
  {
    "text": "into the cache or that type of data which is again a lot of use cases we've",
    "start": "3405589",
    "end": "3416209"
  },
  {
    "text": "got four minutes left okay similarly",
    "start": "3416209",
    "end": "3423789"
  },
  {
    "start": "3421000",
    "end": "3454000"
  },
  {
    "text": "because you cannot do joins there are other things that you can do you can do grouping so there's a group sub group",
    "start": "3423789",
    "end": "3430309"
  },
  {
    "text": "tags name tags features that allow you to fetch groups of objects back which",
    "start": "3430309",
    "end": "3436819"
  },
  {
    "text": "may you know so and you should be able to include this in the sequel criteria",
    "start": "3436819",
    "end": "3441979"
  },
  {
    "text": "so you should be able to do select customers where customer Dodge City is London and customer dot group is",
    "start": "3441979",
    "end": "3447499"
  },
  {
    "text": "important customers and and and then you",
    "start": "3447499",
    "end": "3452929"
  },
  {
    "text": "can do tags also so for example groups and tags our fabric had the tagging",
    "start": "3452929",
    "end": "3461329"
  },
  {
    "text": "feature by the way but the grouping featured didn't so you could do",
    "start": "3461329",
    "end": "3467179"
  },
  {
    "text": "something like you can specify here as you can see here you can do a key value",
    "start": "3467179",
    "end": "3473410"
  },
  {
    "text": "of key value group and subgroup so this is so in this case value is also a",
    "start": "3473410",
    "end": "3480260"
  },
  {
    "text": "which usually is an object and so this is a group and this is subgroup and then",
    "start": "3480260",
    "end": "3485690"
  },
  {
    "text": "you can later on say give me everything that belongs to this group electronics and then you can search on it the same",
    "start": "3485690",
    "end": "3492110"
  },
  {
    "text": "way you can do tags so name tags are good when you for example want to index",
    "start": "3492110",
    "end": "3498200"
  },
  {
    "start": "3494000",
    "end": "3565000"
  },
  {
    "text": "text data when you do sequel searching the searching is only possible if you do",
    "start": "3498200",
    "end": "3505340"
  },
  {
    "text": "an indexing without indexing how are you going to find all those customer where city equals London you know because you",
    "start": "3505340",
    "end": "3512180"
  },
  {
    "text": "don't want to deserialize every object in the cache spanning that's a five",
    "start": "3512180",
    "end": "3518420"
  },
  {
    "text": "cache servers millions of objects potentially because you don't even know what the object type is yet unless you",
    "start": "3518420",
    "end": "3524750"
  },
  {
    "text": "so the time to index is when you're adding or updating so on the client and",
    "start": "3524750",
    "end": "3530270"
  },
  {
    "text": "you extract that data and you put send that as metadata with with the actual",
    "start": "3530270",
    "end": "3536300"
  },
  {
    "text": "serialize the object and keep those indexes on the server end and that's how you can search so the same way you can",
    "start": "3536300",
    "end": "3542000"
  },
  {
    "text": "do this these also become indices so because these indices you can actually",
    "start": "3542000",
    "end": "3549460"
  },
  {
    "text": "do sequel you can include these you can say this dot group is this this star tag",
    "start": "3549700",
    "end": "3555440"
  },
  {
    "text": "is this or name tag is this name tag is essentially used when you have text which does not have attributes so you",
    "start": "3555440",
    "end": "3562010"
  },
  {
    "text": "can give it a tribute that you want there's one feature that I want to cover",
    "start": "3562010",
    "end": "3568010"
  },
  {
    "start": "3565000",
    "end": "3571000"
  },
  {
    "text": "which is very important which is called client cache so you know when you had",
    "start": "3568010",
    "end": "3575570"
  },
  {
    "text": "standalone caching you know let's say if you're using asp.net cache object it's all within your worker process so you're",
    "start": "3575570",
    "end": "3583190"
  },
  {
    "text": "used to super speed why because that is that object is being kept in an object form within your process on your own",
    "start": "3583190",
    "end": "3590780"
  },
  {
    "text": "heap nothing beats that performance right so the first thing that a lot of people ask us is well you know I I",
    "start": "3590780",
    "end": "3598160"
  },
  {
    "text": "plugged in and cache or let's say whatever cache and my performance actually went down I was used to all",
    "start": "3598160",
    "end": "3605720"
  },
  {
    "text": "those super fast fetching of objects and now I'm making those calls across the network well",
    "start": "3605720",
    "end": "3613079"
  },
  {
    "text": "there's no way around the fact that you have to store these objects across the",
    "start": "3613079",
    "end": "3618269"
  },
  {
    "text": "process or in another process but there's a feature called client cache which again on the.net site and cache",
    "start": "3618269",
    "end": "3626519"
  },
  {
    "text": "has and on the Java side you have other caches that have it some people call it near cache on the Java side that's what",
    "start": "3626519",
    "end": "3632849"
  },
  {
    "text": "they do and the client cache essentially gives you that benefit of a local in proc cache but you don't want to have",
    "start": "3632849",
    "end": "3640679"
  },
  {
    "text": "that as an isolated catch that cache is kept synchronized so whatever is kept so",
    "start": "3640679",
    "end": "3647279"
  },
  {
    "text": "based on your usage pattern or whatever you're fetching that copy is kept in the client cache as in an object form so",
    "start": "3647279",
    "end": "3653759"
  },
  {
    "text": "it's super fast so you get that same performance but now that object is being",
    "start": "3653759",
    "end": "3659459"
  },
  {
    "text": "kept synchronized so this is a very important feature and I've crossed my",
    "start": "3659459",
    "end": "3665399"
  },
  {
    "text": "time limit any questions on this I'm gonna stop the presentation any",
    "start": "3665399",
    "end": "3670679"
  },
  {
    "text": "questions at this time I would strongly",
    "start": "3670679",
    "end": "3675989"
  },
  {
    "text": "encourage you I was gonna go into the last piece which was the the caching",
    "start": "3675989",
    "end": "3682679"
  },
  {
    "text": "options for dotnet they're basically two optional dotnet side one is n cache one",
    "start": "3682679",
    "end": "3688199"
  },
  {
    "text": "is Redis look them both up on n cache",
    "start": "3688199",
    "end": "3693509"
  },
  {
    "text": "side that the company I represent I hope I didn't do a marketing job out in cash",
    "start": "3693509",
    "end": "3699089"
  },
  {
    "text": "here it was I hope it was a objective technical conversation but you can come to our website",
    "start": "3699089",
    "end": "3705929"
  },
  {
    "text": "good download page and you can download either the Enterprise Edition or the open source edition the open source is",
    "start": "3705929",
    "end": "3711539"
  },
  {
    "text": "also available on github and cache is open source so you know it's the same so",
    "start": "3711539",
    "end": "3719099"
  },
  {
    "text": "do take a look at both of these and cash and Redis there's also a lot of detailed comparison orphan cash would read us on",
    "start": "3719099",
    "end": "3725429"
  },
  {
    "text": "our website that will make your life easy but most importantly please do consider using a distributed cache in",
    "start": "3725429",
    "end": "3732029"
  },
  {
    "text": "your infrastructure make sure your applications are scalable",
    "start": "3732029",
    "end": "3738199"
  },
  {
    "text": "any questions thank you",
    "start": "3738469",
    "end": "3742369"
  }
]