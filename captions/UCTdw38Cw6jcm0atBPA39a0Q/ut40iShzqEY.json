[
  {
    "start": "0",
    "end": "68000"
  },
  {
    "text": "okay good afternoon ladies and gentlemen welcome to this talk on SEPA bus concepts with developers my name is",
    "start": "60",
    "end": "7710"
  },
  {
    "text": "Hubert Matthews I'm an independent consultant and trainer I live in the UK in Oxford next to the river that's",
    "start": "7710",
    "end": "14309"
  },
  {
    "text": "enough about me I usually start with this question why this talk so it's",
    "start": "14309",
    "end": "22590"
  },
  {
    "text": "always kind of why make it why am I talking about this subject one of the things I found talking to people about",
    "start": "22590",
    "end": "28380"
  },
  {
    "text": "C++ and C plus 20 and I said well what did you want most out of C++ 20 they",
    "start": "28380",
    "end": "33840"
  },
  {
    "text": "said concepts and I say why oh I think",
    "start": "33840",
    "end": "41460"
  },
  {
    "text": "there's a lot more to two concepts than just that so this seems to be something that people want but they're not",
    "start": "41460",
    "end": "46860"
  },
  {
    "text": "entirely sure why they wanted it just seems like a really good idea and something they've heard about so what I'm going to try and do is to frame",
    "start": "46860",
    "end": "53969"
  },
  {
    "text": "concepts going well okay I'm not just going to do syntax this is not a tutorial this is about how they",
    "start": "53969",
    "end": "60600"
  },
  {
    "text": "fit in the big picture and why you as application developers should be interested in concepts and what you can",
    "start": "60600",
    "end": "67680"
  },
  {
    "text": "do with them so we're gonna have a few things here so this is a broad talk it's",
    "start": "67680",
    "end": "73170"
  },
  {
    "start": "68000",
    "end": "68000"
  },
  {
    "text": "not a tutorial introduction we will be looking at code we will be looking at syntax I will be telling you some about some of the parts but I'm not going to",
    "start": "73170",
    "end": "79439"
  },
  {
    "text": "go through this is how you actually do them that's a whole kind of separate other thing I want to talk about the",
    "start": "79439",
    "end": "84810"
  },
  {
    "text": "history of where these come from because they're actually not very new how does this work with other languages other",
    "start": "84810",
    "end": "91350"
  },
  {
    "text": "languages have things a bit like concepts and how they different so if you've seen other things in things like",
    "start": "91350",
    "end": "96990"
  },
  {
    "text": "Java and c-sharp what is it the difference there requires clauses and other places like that what what are we",
    "start": "96990",
    "end": "104040"
  },
  {
    "text": "doing with types so there's a whole relationship here about types and classes and interfaces and object orientation and there's a",
    "start": "104040",
    "end": "111720"
  },
  {
    "text": "sort of kind of bit of computer science II stuff going on in here we have to think about how does this all fit together with inheritance and other",
    "start": "111720",
    "end": "117899"
  },
  {
    "text": "things and why should you care you know why do these people these nice people let's see what essential stick this damn",
    "start": "117899",
    "end": "124020"
  },
  {
    "text": "thing in here was it just to confuse it or just seemed like a good idea at the time what can you do with concepts what can",
    "start": "124020",
    "end": "131849"
  },
  {
    "text": "you not do with concert and how should you design with them so that hopefully that's going to give you",
    "start": "131849",
    "end": "136960"
  },
  {
    "text": "an idea of how they are where they are on a broad scale it's not going to be an itty-bitty little thing but we're gonna",
    "start": "136960",
    "end": "143020"
  },
  {
    "text": "see some some old things and some bits and pieces right okay concepts have been",
    "start": "143020",
    "end": "148270"
  },
  {
    "start": "146000",
    "end": "146000"
  },
  {
    "text": "around for a long time be honest restric mentioned this in his",
    "start": "148270",
    "end": "154060"
  },
  {
    "text": "book designing evolution of C++ in 1994 that's 25 years ago he's been trying to",
    "start": "154060",
    "end": "161770"
  },
  {
    "text": "get our concepts into the language he got Auto with the auto deduction in about nine in the 1980s and then he had",
    "start": "161770",
    "end": "168040"
  },
  {
    "text": "to take it out because C programmers hated it so there's a lot of stuff that bianna has been trying to get in for a long time and this is one of those ones",
    "start": "168040",
    "end": "174430"
  },
  {
    "text": "it was aiming to get into C++ 11 what was called super Abaza 0x at the time",
    "start": "174430",
    "end": "181090"
  },
  {
    "text": "and the point about the on one is he didn't get in and it didn't get her in for a number of reasons it was a",
    "start": "181090",
    "end": "187270"
  },
  {
    "text": "language based view rather that and had things like concept maps and some really",
    "start": "187270",
    "end": "192640"
  },
  {
    "text": "quite complex things it was a it was an interesting implementation but and the but was a very big but there was",
    "start": "192640",
    "end": "200020"
  },
  {
    "text": "problems with compilation speed there was only one compiler that did this the concept GCC one and that was about ten",
    "start": "200020",
    "end": "207250"
  },
  {
    "text": "times slower than normal compilation that didn't look good there were other",
    "start": "207250",
    "end": "213820"
  },
  {
    "text": "problems with the technical wording in the stand of the circle standardise four concepts was bigger than the rest of",
    "start": "213820",
    "end": "220030"
  },
  {
    "text": "template's put together so this is like kind of big major change they went she's really not good and he got withdrawn",
    "start": "220030",
    "end": "225700"
  },
  {
    "text": "from C+ 11 at the Frankfurt meeting so a little bit in the way that contracts have just been taken out in C but was 20",
    "start": "225700",
    "end": "232930"
  },
  {
    "text": "it just wasn't ready people went we got one chance to get this in when we don't have the",
    "start": "232930",
    "end": "238030"
  },
  {
    "text": "experience we don't feel it's right it got pulled so it didn't get there right okay after C for bus 11 there was like",
    "start": "238030",
    "end": "244810"
  },
  {
    "text": "okay what are we going to do about this one here these concept things that kind of nice and there is this thing that of",
    "start": "244810",
    "end": "251080"
  },
  {
    "text": "the concept light and then several things going on here so there was this",
    "start": "251080",
    "end": "256600"
  },
  {
    "text": "technical specification and that's what GCC for instance is implemented from version 6 onwards there was a meeting at",
    "start": "256600",
    "end": "263020"
  },
  {
    "text": "Palo Alto organized by stepping off who the one of the fathers of the STL",
    "start": "263020",
    "end": "268490"
  },
  {
    "text": "and he invited lots of people through then they went through what are the concepts in the STL and what were those",
    "start": "268490",
    "end": "275510"
  },
  {
    "text": "things so they went through that one well we looked with this we here we need to have this net cetera and that was kind of the basis of where the concept",
    "start": "275510",
    "end": "281660"
  },
  {
    "text": "TS this is the minimal amount of stuff we kind of need having gone really big they went well what we actually need",
    "start": "281660",
    "end": "287080"
  },
  {
    "text": "yeah that was just that was overreach let's go to something else that's what they did there and it then became around",
    "start": "287080",
    "end": "292910"
  },
  {
    "text": "requirements not so much around language for reasons they call C++ because",
    "start": "292910",
    "end": "301190"
  },
  {
    "text": "whatever it didn't make any sequel verse 17 it was shame it's gonna coming to 20",
    "start": "301190",
    "end": "306620"
  },
  {
    "text": "it was one of the first things that went into the working draft after C+ 17 in 20 so it's in there there are some tweaks",
    "start": "306620",
    "end": "313160"
  },
  {
    "text": "from the Erb the TS but it's going to be in there so what is it what I'm going to do one of the things is that based",
    "start": "313160",
    "end": "322130"
  },
  {
    "text": "around that sort of kind of Palo Alto view and stepping off and other things they think well actually concepts a math",
    "start": "322130",
    "end": "327170"
  },
  {
    "text": "or math depending where you come from this is something it's it's a sort of",
    "start": "327170",
    "end": "332570"
  },
  {
    "text": "kind of computer science a view of the way things are done it's a abstraction and mathematical concepts it encompasses",
    "start": "332570",
    "end": "339880"
  },
  {
    "text": "syntax and also semantics and constraints on types etc see but was xx",
    "start": "339880",
    "end": "345500"
  },
  {
    "text": "only does the syntax part by the way you can't do semantic constraints they're",
    "start": "345500",
    "end": "350770"
  },
  {
    "text": "based around axioms that you can't represent directly in the language well",
    "start": "350770",
    "end": "356030"
  },
  {
    "text": "okay if a equals equals B then you would expect that not a not equal B is always",
    "start": "356030",
    "end": "362630"
  },
  {
    "text": "true you can't express that so these are some of the ideas that you want to get across in concepts in the sort of kind",
    "start": "362630",
    "end": "369590"
  },
  {
    "text": "of big version of concepts of an idea but you can't actually express in the",
    "start": "369590",
    "end": "375440"
  },
  {
    "text": "language so we have to think about syntax semantics and axioms how would",
    "start": "375440",
    "end": "381260"
  },
  {
    "text": "you express that the input to an algorithm is requires it to be sorted that's actually quite hard to express",
    "start": "381260",
    "end": "388340"
  },
  {
    "text": "and certainly hard to check because actually you've got to go and do a lot of checking and even if I give you to",
    "start": "388340",
    "end": "393500"
  },
  {
    "text": "iterators into two different containers you how do you tell it's completely you can't actually check",
    "start": "393500",
    "end": "398900"
  },
  {
    "text": "those things so that's one view it's not necessarily a view that I think is particularly helpful for application",
    "start": "398900",
    "end": "405620"
  },
  {
    "text": "developers it's it's one part of the landscape back to the Sufi elephant you know with the the leg and that the ear",
    "start": "405620",
    "end": "412610"
  },
  {
    "text": "and the trunk and the tail etc it's one part of the concepts jigsaw there's",
    "start": "412610",
    "end": "421310"
  },
  {
    "text": "another kind of view which says contacts are hard they're difficult you shouldn't",
    "start": "421310",
    "end": "426740"
  },
  {
    "text": "try and do your own things application developers should stay away and there's this idea that you shouldn't be using",
    "start": "426740",
    "end": "432560"
  },
  {
    "text": "writing your own concepts you should use the ones in the standard library you should use regular you should use equity",
    "start": "432560",
    "end": "440080"
  },
  {
    "text": "equality comparable and other things out of the standard you shouldn't write your own ones this is quite common amongst",
    "start": "440080",
    "end": "446539"
  },
  {
    "text": "certain members of the community I'm not gonna point fingers but it's it's one view that says don't write your own concepts because they're hard well okay",
    "start": "446539",
    "end": "455210"
  },
  {
    "text": "you look at the core guidelines called int leaven wherever possible use the standard concepts okay well that's fine",
    "start": "455210",
    "end": "462770"
  },
  {
    "text": "but what does that imply for application developers do you know what's there and is it actually relevant to your domain",
    "start": "462770",
    "end": "468169"
  },
  {
    "text": "this idea that concepts are hard says well yeah okay that's fine when you're doing library stuff but if you're an",
    "start": "468169",
    "end": "473539"
  },
  {
    "text": "application developer you're going like that's not my domain I don't write libraries so my opinion and it's just an",
    "start": "473539",
    "end": "479659"
  },
  {
    "text": "opinion that concepts offered fantastic new opportunities to develop us and if",
    "start": "479659",
    "end": "486080"
  },
  {
    "text": "used well so I'm going to try and see if I can give you a hint of what some of that might be what can you do with",
    "start": "486080",
    "end": "494900"
  },
  {
    "start": "491000",
    "end": "491000"
  },
  {
    "text": "concepts then if they are such a good thing what can you not do they are syntactic constraints on types basically",
    "start": "494900",
    "end": "501889"
  },
  {
    "text": "we've got ten template type name teed supplying constraints to that we'll see even more detail coming up there it",
    "start": "501889",
    "end": "508909"
  },
  {
    "text": "allows us to put more domain knowledge into the application into the language and get it checked what you might now",
    "start": "508909",
    "end": "516529"
  },
  {
    "text": "have in documentation you can now put into the language compilers don't read",
    "start": "516529",
    "end": "522260"
  },
  {
    "text": "documentation developers probably don't read documentation so the answer is how",
    "start": "522260",
    "end": "528020"
  },
  {
    "text": "do we get more checking here how do we get this one here so you can think of things like strong Def's domain concepts so avoiding",
    "start": "528020",
    "end": "535640"
  },
  {
    "text": "passing just raw integers you create some kind of drain type that represents something else so instead of passing",
    "start": "535640",
    "end": "542480"
  },
  {
    "text": "just a string you pass a a postal code or an ISBN or something like that you're raising the level of what you're talking",
    "start": "542480",
    "end": "549140"
  },
  {
    "text": "about rather than just pure native raw stuff that's we're kind of trying to do",
    "start": "549140",
    "end": "554600"
  },
  {
    "text": "the same thing here but rather than tea again I said you can't express axioms so",
    "start": "554600",
    "end": "559880"
  },
  {
    "text": "you can't say that a less than a should never be true all that if a was less",
    "start": "559880",
    "end": "566209"
  },
  {
    "text": "than B and B is less than C that that implies a is less than C there are things you can't do so it's a limited",
    "start": "566209",
    "end": "572029"
  },
  {
    "text": "set but it's a useful limited set you can also apply this to compile time",
    "start": "572029",
    "end": "578390"
  },
  {
    "text": "values so it's not just type name T you can actually apply it to int N and other things like that and template template",
    "start": "578390",
    "end": "584870"
  },
  {
    "text": "parameters which will please some people a lot a concept as a constraint on a",
    "start": "584870",
    "end": "590959"
  },
  {
    "text": "type it's not a type you can't create a concept you can't instantiate a concept",
    "start": "590959",
    "end": "597560"
  },
  {
    "text": "it's a set of of constraints on something it already exists for instance you can't have vector of concept pointer",
    "start": "597560",
    "end": "606160"
  },
  {
    "text": "because it's not a thing it's a constraint on something else you can have vector of object pointer and then",
    "start": "606160",
    "end": "613160"
  },
  {
    "text": "constrain it say well it has to be vector of concept pointer you can do that but you can't create things of",
    "start": "613160",
    "end": "619190"
  },
  {
    "text": "concepts directly oops did we go back one no contracts contract",
    "start": "619190",
    "end": "628040"
  },
  {
    "start": "621000",
    "end": "621000"
  },
  {
    "text": "unfortunately didn't make it into c plus 20 if you consider the concepts of",
    "start": "628040",
    "end": "633829"
  },
  {
    "text": "constraints on types contracts are essentially then providing some",
    "start": "633829",
    "end": "640339"
  },
  {
    "text": "constraints on runtime values so they have a very interesting complementary",
    "start": "640339",
    "end": "646000"
  },
  {
    "text": "functionality and for so they would allow you to provide some of the semantics if you look in the standard",
    "start": "646000",
    "end": "653029"
  },
  {
    "text": "you'll find it says oh well here are the types you could do that one and then you've got some relying some ensures and",
    "start": "653029",
    "end": "659810"
  },
  {
    "text": "requires clauses pre and post conditions that tell you what things should do what and it's valid to call when it's",
    "start": "659810",
    "end": "665209"
  },
  {
    "text": "not and those are often much more about contracts so they are very interesting pairing unfortunately we only get the",
    "start": "665209",
    "end": "670790"
  },
  {
    "text": "concept part of this one in 20 you'll see later on how that all do this one",
    "start": "670790",
    "end": "675819"
  },
  {
    "text": "okay other languages so we're gonna have a look at C sharp again have a look at",
    "start": "675819",
    "end": "681619"
  },
  {
    "start": "676000",
    "end": "676000"
  },
  {
    "text": "Java what do we got here c-sharp has got something that looks a bit like this it",
    "start": "681619",
    "end": "688249"
  },
  {
    "text": "says write public class gen T where T has to be derived from I comparable of T",
    "start": "688249",
    "end": "694569"
  },
  {
    "text": "it's essentially a similar kind of thing it says well you can only provide me a tea that meets these conditions and",
    "start": "694569",
    "end": "700790"
  },
  {
    "text": "their syntactic conditions it says well it has to drive from this interface that's the kind of thing you might want",
    "start": "700790",
    "end": "706550"
  },
  {
    "text": "to do we see publish contrib concepts but there's a big difference here",
    "start": "706550",
    "end": "714369"
  },
  {
    "text": "there's a limit on what you can do with a c-sharp font version so it's you can drive from this you can use this other",
    "start": "714369",
    "end": "720529"
  },
  {
    "text": "things new enum class truck managed what about there's only a few things you can say about this and the reason there's",
    "start": "720529",
    "end": "727939"
  },
  {
    "text": "only a few things you can say about this because this is actually really a cast in disguise it says well you can put",
    "start": "727939",
    "end": "734119"
  },
  {
    "text": "that in there and there if you've got these certain constraints then I'll do a cast and inside you can treat it in",
    "start": "734119",
    "end": "740059"
  },
  {
    "text": "certain ways because you can go well okay if this one here's got search NT like that and inherits from I comparable",
    "start": "740059",
    "end": "746269"
  },
  {
    "text": "I can then call the methods on I comparable because it's cast it in the implementation that's very different to",
    "start": "746269",
    "end": "752839"
  },
  {
    "text": "C++ so one of the things about C++ concepts is it is it constrains what you",
    "start": "752839",
    "end": "758240"
  },
  {
    "text": "can put in but there is no constraint at all on the implementation that's very deliberate so in C in c-sharp and in",
    "start": "758240",
    "end": "766399"
  },
  {
    "text": "Java if you have a constraint on this one here what comes in also applies inside because it's essentially implicit",
    "start": "766399",
    "end": "772970"
  },
  {
    "text": "cast in C++ that's not the same so if you've seen this before you can kind of get a flavor there's something similar",
    "start": "772970",
    "end": "778999"
  },
  {
    "text": "but it's not the same Java again you can say look this thing has to extend number",
    "start": "778999",
    "end": "784059"
  },
  {
    "text": "so there's kind of this exists in other languages been slightly different ways other languages because they're",
    "start": "784059",
    "end": "790519"
  },
  {
    "text": "object-oriented and they have an object right at the top they're essentially doing some form of type erasure here",
    "start": "790519",
    "end": "798549"
  },
  {
    "start": "798000",
    "end": "798000"
  },
  {
    "text": "right so here's one of my key points which is that how do you scale generic",
    "start": "798749",
    "end": "805899"
  },
  {
    "text": "programming so if you're programming with template type name T you go well",
    "start": "805899",
    "end": "811480"
  },
  {
    "text": "okay I've got this third-party library which says T what goes there I have no idea I have to kind of chase around for",
    "start": "811480",
    "end": "817600"
  },
  {
    "text": "the documentation if you're using something in Python for instance you go yeah it takes a sec some stuff I have to",
    "start": "817600",
    "end": "823959"
  },
  {
    "text": "look at the names I have no idea I can put anything in there and if I put the wrong thing in what happens it maybe",
    "start": "823959",
    "end": "830800"
  },
  {
    "text": "falls over at runtime if I happen to call that particular path so it doesn't scale well and why did it not scale",
    "start": "830800",
    "end": "837910"
  },
  {
    "text": "because it just says it's anything type name T and if you've got the more types",
    "start": "837910",
    "end": "843459"
  },
  {
    "text": "you've got there if you've got n types you go well I basically got N squared because I go well well how does what",
    "start": "843459",
    "end": "848860"
  },
  {
    "text": "does it what can go here what combinations are valid what combinations are not valid and you can't tell just by",
    "start": "848860",
    "end": "854259"
  },
  {
    "text": "looking at type name T if on the other hand it says a concept it has to have this requirement you go ok that's tell",
    "start": "854259",
    "end": "860589"
  },
  {
    "text": "me what's going on maybe my IDE can point me in the direction of going ah right you can't do",
    "start": "860589",
    "end": "865600"
  },
  {
    "text": "that sorry sorry that's got the wrong thing it's then essentially documentation that you've got to read in",
    "start": "865600",
    "end": "872139"
  },
  {
    "text": "the compiler can check it for you that's one of the key things notice what happens as languages get bigger as they",
    "start": "872139",
    "end": "880749"
  },
  {
    "text": "get older away they start using more mature systems is that type less things",
    "start": "880749",
    "end": "886240"
  },
  {
    "text": "start to get tight because of this problem when C++ where now this this point JavaScript basically yeah you can",
    "start": "886240",
    "end": "893800"
  },
  {
    "text": "call anything if anything and people have discovered that's a bit bit difficult so they've introduced typescript",
    "start": "893800",
    "end": "899699"
  },
  {
    "text": "typing on untyped things PHP yeah I can put anything in that wouldn't be nice if",
    "start": "899699",
    "end": "905049"
  },
  {
    "text": "you just put some type traits on here which just sort of kind of tell you what it is and you can see this is a general",
    "start": "905049",
    "end": "910299"
  },
  {
    "text": "trend as languages get larger and more mature and you're trying to do more stuff Java and c-sharp generics you've",
    "start": "910299",
    "end": "916720"
  },
  {
    "text": "added these where clauses and wildcards etc because just tea is just too wide XML I didn't schemas because does that",
    "start": "916720",
    "end": "923499"
  },
  {
    "text": "really valid I don't know oh you can got some way of checking it so concepts make generic programming scale",
    "start": "923499",
    "end": "930090"
  },
  {
    "text": "that's one of my one of the points I can want to make concepts are duck typing if",
    "start": "930090",
    "end": "938920"
  },
  {
    "text": "you've come across this idea in Python it's probably where it first came from if something looks like a duck walks",
    "start": "938920",
    "end": "945430"
  },
  {
    "text": "like a duck talks like a duck I'm gonna treat it like a duck and that's what templates do anyway which is I don't",
    "start": "945430",
    "end": "952720"
  },
  {
    "text": "care where you come from what you are what's going on etc do you have the relevant stuff and that's duck typing",
    "start": "952720",
    "end": "959920"
  },
  {
    "text": "Python does it a run-time c+ does this at compile time and what",
    "start": "959920",
    "end": "966070"
  },
  {
    "text": "concepts do go well I can now do that checking at one point rather than the",
    "start": "966070",
    "end": "971560"
  },
  {
    "text": "implementation what's the difference well if I have an implementation and I call something about 20 times and you",
    "start": "971560",
    "end": "977740"
  },
  {
    "text": "pass the wrong thing I'm going to get 20 nasty incomprehensible error messages",
    "start": "977740",
    "end": "982930"
  },
  {
    "text": "this is an error novel that just goes on forever yeah if I have a concept it says oh sorry you can't put that there you",
    "start": "982930",
    "end": "988600"
  },
  {
    "text": "get one message saying that's wrong and here's why that's a much nicer approach",
    "start": "988600",
    "end": "994200"
  },
  {
    "text": "we get much clearer interfaces rather than the all well what should I pass in for this parameter yes the thing that",
    "start": "994200",
    "end": "1001860"
  },
  {
    "text": "you are after that people are asking for better error messages we hope we're going to get better error messages compilers will get better at this but if",
    "start": "1001860",
    "end": "1007500"
  },
  {
    "text": "you try it you'll find it at least tells you that can't go here rather than by the way all these horrible things happen",
    "start": "1007500",
    "end": "1014070"
  },
  {
    "text": "if you try and it's based on the interface not on the implementation",
    "start": "1014070",
    "end": "1019560"
  },
  {
    "text": "currently it's implementation based and this is an interface thing it allows you to capture domain knowledge you go well",
    "start": "1019560",
    "end": "1025589"
  },
  {
    "text": "what does it mean to be one of those things I can now say what does it mean to be an stl container okay I can I'm",
    "start": "1025589",
    "end": "1032790"
  },
  {
    "text": "only gonna take an STL container and you try to throw something in that's not quite an SQL container it won't work it",
    "start": "1032790",
    "end": "1041970"
  },
  {
    "text": "allows for ad hoc and and post facto combinations that you don't have with",
    "start": "1041970",
    "end": "1048420"
  },
  {
    "text": "straightforward oo are going to cover this in a little more detail later this",
    "start": "1048420",
    "end": "1054450"
  },
  {
    "start": "1052000",
    "end": "1052000"
  },
  {
    "text": "is an early form really of introspection it allows you to be able to say look",
    "start": "1054450",
    "end": "1060150"
  },
  {
    "text": "Kant does this work can we instantiate it's a form of introspection ongoing",
    "start": "1060150",
    "end": "1065460"
  },
  {
    "text": "does this work and it not fall over if you try it's",
    "start": "1065460",
    "end": "1070920"
  },
  {
    "text": "almost like an NGO here's some code that wouldn't compile and just tell me whether it would compile or not that's",
    "start": "1070920",
    "end": "1076080"
  },
  {
    "text": "kind of a valuable thing other languages several things like eval that all then throw yeah Perl try and evaluate this",
    "start": "1076080",
    "end": "1081630"
  },
  {
    "text": "one nice bang whatever but now we can go if I do this and this and this is would that be okay you can't do that now this",
    "start": "1081630",
    "end": "1090780"
  },
  {
    "text": "is what concepts are going to do and you can then do it in an ad hoc way as well so it's a form of introspection the next",
    "start": "1090780",
    "end": "1097679"
  },
  {
    "text": "step is we're gonna get reflection when she's being agreed-upon the core model is there but we haven't got there the",
    "start": "1097679",
    "end": "1103380"
  },
  {
    "text": "syntax for doing it if you've used templates and you try to control",
    "start": "1103380",
    "end": "1108480"
  },
  {
    "text": "overloading of templates using enable if and spinni and all these other kind of things you've now got a language based",
    "start": "1108480",
    "end": "1114210"
  },
  {
    "text": "mechanism rather than a hack so all those kind of enable things are a bit hacky they work well at single point",
    "start": "1114210",
    "end": "1121470"
  },
  {
    "text": "just kind of stuff I want to look at this one thing but they don't work while actually I need these seven methods it",
    "start": "1121470",
    "end": "1126480"
  },
  {
    "text": "really doesn't scale very well to do that they're built into the language so",
    "start": "1126480",
    "end": "1132870"
  },
  {
    "text": "you can now get compilers to do pattern matching for you can say well it matches this or this or this and there's a",
    "start": "1132870",
    "end": "1139290"
  },
  {
    "text": "defined order in which things happen so you can write your stuff yeah if it's this case do this this deal and you don't have to kind of do all this stuff",
    "start": "1139290",
    "end": "1145710"
  },
  {
    "text": "with templates and jiggery-pokery enable if and then all I forgot to go to the not enable if version and which one will",
    "start": "1145710",
    "end": "1152880"
  },
  {
    "text": "get thing up all that stuff which is possible but not very nice and it's",
    "start": "1152880",
    "end": "1158280"
  },
  {
    "text": "something that most application programmers probably wouldn't want to do when I try to get people to use templates and we go yeah it's fine but",
    "start": "1158280",
    "end": "1164370"
  },
  {
    "text": "overload resolution control using this it's it's not something where you really want to go you go you feel like you're",
    "start": "1164370",
    "end": "1170070"
  },
  {
    "text": "kind of doing stuff in the language rather than your application I think with concepts you can now say this is my",
    "start": "1170070",
    "end": "1175260"
  },
  {
    "text": "application I can say this in a way that actually is about my domain you can also",
    "start": "1175260",
    "end": "1181920"
  },
  {
    "text": "do some basic stuff here with things like if Const expert and a concept name so is lockable it would be a concept",
    "start": "1181920",
    "end": "1188940"
  },
  {
    "text": "here that says does this have lock and unlock methods so I can say well if you've got this if you have these",
    "start": "1188940",
    "end": "1194309"
  },
  {
    "text": "methods and I can check at compile time notice that's a I'll time check let go if you got this one here you can call that great it",
    "start": "1194309",
    "end": "1201800"
  },
  {
    "text": "allows you to be able to do this a kind of introspection in a way that you can't do now because does this compile or not",
    "start": "1201800",
    "end": "1210490"
  },
  {
    "text": "I'm not quite sure where this quote came from but it's useful anyway we want more meta programming and less template",
    "start": "1211810",
    "end": "1218210"
  },
  {
    "text": "metaprogramming yeah we want to be able to do this kind of stuff of you know I can I do this based on this one I want",
    "start": "1218210",
    "end": "1224060"
  },
  {
    "text": "to do some special thing here but I don't have to do the angle bracket e thing yeah it's just kind of horrible you're nasty with the recursive",
    "start": "1224060",
    "end": "1229730"
  },
  {
    "start": "1225000",
    "end": "1225000"
  },
  {
    "text": "templates and then yeah it's it's something that you coming it's a rabbit hole you go down and you",
    "start": "1229730",
    "end": "1235340"
  },
  {
    "text": "probably don't want to do it a lot of application developers don't want to do it because they don't see it actually giving them an advantage",
    "start": "1235340",
    "end": "1240820"
  },
  {
    "text": "so the requires keyword is a way of saying can this happen we've now got",
    "start": "1240820",
    "end": "1245990"
  },
  {
    "text": "this language based approach so doing things so if you kind of look at the history of where we've gone with this",
    "start": "1245990",
    "end": "1251810"
  },
  {
    "text": "one they started off with ways of trying to do template overload resolution control with things like the size of",
    "start": "1251810",
    "end": "1258350"
  },
  {
    "text": "trick if you are old enough to remember that it was a really horrible thing where where you had functions and it",
    "start": "1258350",
    "end": "1263570"
  },
  {
    "text": "returned a something of size one or size 2 and you looked at the size of and used",
    "start": "1263570",
    "end": "1269090"
  },
  {
    "text": "a dot dots as a final thing to to do all the other cases yuck it was a horrible enable if it was kind of a better",
    "start": "1269090",
    "end": "1277250"
  },
  {
    "text": "approach this one using finais they're worth there's things in the experimental library of ease detected the detection",
    "start": "1277250",
    "end": "1283760"
  },
  {
    "text": "idiom Walter Brown and the like that's a kind of along the way but concepts actually make this usable so we can",
    "start": "1283760",
    "end": "1290660"
  },
  {
    "text": "start to do overload resolution that we couldn't do before so you now use this as a design approach in a clean language",
    "start": "1290660",
    "end": "1298280"
  },
  {
    "text": "support rather than library hacks so it gives us new stuff some basic stuff so",
    "start": "1298280",
    "end": "1305840"
  },
  {
    "start": "1303000",
    "end": "1303000"
  },
  {
    "text": "actually pieces of code yep let's have a look at the simplest possible concepts",
    "start": "1305840",
    "end": "1312020"
  },
  {
    "text": "I've got a concept anything equals true that says yeah this match is anything that's the equivalent of type name T",
    "start": "1312020",
    "end": "1318190"
  },
  {
    "text": "I've got concept nothing that says now you can't put anything in this you're always going to be wrong so I've got a",
    "start": "1318190",
    "end": "1324620"
  },
  {
    "text": "one end yeah I can do everything the other end then I could do nothing and I've then got a kind of range of possibilities in",
    "start": "1324620",
    "end": "1330470"
  },
  {
    "text": "it's up to you to decide what you want so you've got a range of those things we",
    "start": "1330470",
    "end": "1336440"
  },
  {
    "text": "can do some stuff with inheritance as well so actually you can override this one's all specialize them but it doesn't",
    "start": "1336440",
    "end": "1344419"
  },
  {
    "text": "require the underlying type to be changed this is one of the key things about concepts is you don't have to go",
    "start": "1344419",
    "end": "1350929"
  },
  {
    "text": "and hack your underlying types to change them to make them fit it's one of key",
    "start": "1350929",
    "end": "1357140"
  },
  {
    "text": "things about templates I don't have to go and edit the class of int to make it inherit from I disposable or whatever",
    "start": "1357140",
    "end": "1364039"
  },
  {
    "text": "you choose you don't doesn't generate any code it's purely compiled time so",
    "start": "1364039",
    "end": "1371240"
  },
  {
    "text": "this is a very lightweight thing inside the language inside the compiler you don't have to do any extra stuff and we",
    "start": "1371240",
    "end": "1376760"
  },
  {
    "text": "can specialize it so we might have something like try lockable saying well okay this try lockable thing is well",
    "start": "1376760",
    "end": "1382280"
  },
  {
    "text": "it's lockable and it also has this try lock part so we can now specialize this",
    "start": "1382280",
    "end": "1387409"
  },
  {
    "text": "we can now start having hierarchies and we can actually base our system upon well if you can match this if you can",
    "start": "1387409",
    "end": "1393740"
  },
  {
    "text": "match that if you can match that you can get the compiler to pick the right thing if you've got instead of having",
    "start": "1393740",
    "end": "1400130"
  },
  {
    "text": "hierarchies of object-oriented stuff you can now use hierarchies of concepts and use the compiler to do some work there",
    "start": "1400130",
    "end": "1407830"
  },
  {
    "text": "okay here's a fun little diagram it's important diagram in many ways so the",
    "start": "1407830",
    "end": "1414530"
  },
  {
    "text": "two blue things on the Left type and class those are closely related they're",
    "start": "1414530",
    "end": "1420620"
  },
  {
    "text": "tightly coupled and they're to do with the way the languages is done so when you create a class it has one or more",
    "start": "1420620",
    "end": "1427669"
  },
  {
    "text": "types now why do I say one or more because of polymorphism if I have some",
    "start": "1427669",
    "end": "1433460"
  },
  {
    "text": "inheritance I have a base class in the drive class the derived class can be treated like a base class or a derived",
    "start": "1433460",
    "end": "1439429"
  },
  {
    "text": "class so it can be treated like two in that particular case so it has multiple ones on each type can be implemented in",
    "start": "1439429",
    "end": "1445039"
  },
  {
    "text": "multiple ways that's why it's many to many but that is something you have no control over really that's built into",
    "start": "1445039",
    "end": "1451730"
  },
  {
    "text": "the compiler built into the language it's tightly coupled and if you go and change one you're going to end up changing the other now let's look at the",
    "start": "1451730",
    "end": "1460280"
  },
  {
    "text": "other side we have concept concepts in some ways are completely related to this you're going well okay",
    "start": "1460280",
    "end": "1465830"
  },
  {
    "text": "concept is a constraint on a type yeah I can do that I can add it I can take it",
    "start": "1465830",
    "end": "1471260"
  },
  {
    "text": "away I can do it and notice I don't have to change the type in any way if I use",
    "start": "1471260",
    "end": "1477440"
  },
  {
    "text": "two object-oriented inheritance I'd have to go and edit the type or the class I don't want this I can go yes one of",
    "start": "1477440",
    "end": "1484640"
  },
  {
    "text": "those does it match these this spec yes or no it's loose coupling and so this is",
    "start": "1484640",
    "end": "1489890"
  },
  {
    "text": "really this side of the diagram is what you as the developers get to play with that type and class stuff is stuff",
    "start": "1489890",
    "end": "1496730"
  },
  {
    "text": "that's already built into language you don't get to change and it is hardwired into the language so that's why we have",
    "start": "1496730",
    "end": "1503059"
  },
  {
    "text": "this looser flexibility with concepts",
    "start": "1503059",
    "end": "1509230"
  },
  {
    "start": "1508000",
    "end": "1508000"
  },
  {
    "text": "they're also kind of giving you a form of type erasure what do I mean by type erasure type array Joe says I'm gonna",
    "start": "1510190",
    "end": "1516409"
  },
  {
    "text": "ignore some of the information about a class or type because it's not interesting to me right now it's a form",
    "start": "1516409",
    "end": "1524210"
  },
  {
    "text": "of abstraction we're used to doing this in many ways interface inheritance with",
    "start": "1524210",
    "end": "1530210"
  },
  {
    "text": "a virtual function it goes I don't care what class you are I care that you are a",
    "start": "1530210",
    "end": "1536029"
  },
  {
    "text": "pointer or a reference to this interface and then when I call you you'll do whatever the right thing is yes",
    "start": "1536029",
    "end": "1541850"
  },
  {
    "text": "essentially you've removed that information about the actual class of the thing in-game saying I don't care as",
    "start": "1541850",
    "end": "1546980"
  },
  {
    "text": "long as you have this method and I can call it it's a form of titration but where there are other forms of type or",
    "start": "1546980",
    "end": "1553070"
  },
  {
    "text": "Asia operator round brackets I just call this thing is it a lambda is that a function is it a function object we",
    "start": "1553070",
    "end": "1559010"
  },
  {
    "text": "don't know and the answer is we don't care because at this point we're saying look I don't care about the type I care",
    "start": "1559010",
    "end": "1565970"
  },
  {
    "text": "about what you can do see out of X yeah",
    "start": "1565970",
    "end": "1571130"
  },
  {
    "text": "whatever whatever that X is I don't care it doesn't know how to print yank okay go ahead print an iterator you go star",
    "start": "1571130",
    "end": "1577760"
  },
  {
    "text": "you go plus plus on an iterator you got whatever I don't care iterators are fantastic abstraction in",
    "start": "1577760",
    "end": "1583279"
  },
  {
    "text": "that sense concepts are similar to kind of type erasure they give you a former",
    "start": "1583279",
    "end": "1589130"
  },
  {
    "text": "type erasure they go look I don't care what you are I don't care where you come",
    "start": "1589130",
    "end": "1594320"
  },
  {
    "text": "from I don't care your parents I don't care what anything about you what you so ever other than what you can do it's",
    "start": "1594320",
    "end": "1601010"
  },
  {
    "text": "very democratic in that way so with",
    "start": "1601010",
    "end": "1606890"
  },
  {
    "text": "concept you're saying look I don't care about this one with virtual functions what you're doing is saying I create this virtual I create my abstract",
    "start": "1606890",
    "end": "1613130"
  },
  {
    "text": "interface right okay now I have to go and edit my types so that you can the compiler can treat all these different",
    "start": "1613130",
    "end": "1619340"
  },
  {
    "text": "types together as that one thing so that we can do the type erasure so they can be where you put back together so the",
    "start": "1619340",
    "end": "1624890"
  },
  {
    "text": "compiler is happy and then at runtime I have to kind of go and call the virtual function get the virtual pointer and go",
    "start": "1624890",
    "end": "1630770"
  },
  {
    "text": "and do some mechanism to get back the type that we originally had that I try to get rid of so the compiler would talk",
    "start": "1630770",
    "end": "1636590"
  },
  {
    "text": "to it this seems like an awful lot of work to have to go and edit something to",
    "start": "1636590",
    "end": "1641720"
  },
  {
    "text": "create this thing go and edit the class then and just so the compiler is happy and then recover it at runtime when you",
    "start": "1641720",
    "end": "1649370"
  },
  {
    "text": "discuss it like that you go yeah that's kind of not very good if I were to do this with concepts I go yeah have you",
    "start": "1649370",
    "end": "1654679"
  },
  {
    "text": "got these methods yeah you're one of those great call it that's simple no",
    "start": "1654679",
    "end": "1660110"
  },
  {
    "text": "overhead I can even inline the call great so we're now very much more",
    "start": "1660110",
    "end": "1666169"
  },
  {
    "text": "focusing on what the code does what it's about we don't have to go into all these",
    "start": "1666169",
    "end": "1671210"
  },
  {
    "text": "procedural surgery right other important diagram number two so the top part of",
    "start": "1671210",
    "end": "1679580"
  },
  {
    "start": "1673000",
    "end": "1673000"
  },
  {
    "text": "this one is where we are with object-oriented stuff you go well I have an interface here so essentially you",
    "start": "1679580",
    "end": "1685820"
  },
  {
    "text": "might think of Tyne going left to right when you have a client and server with an abstract with an interface or pure",
    "start": "1685820",
    "end": "1692510"
  },
  {
    "text": "virtual functions both the client and the interface depend on me sorry plant and server depend on the interface you have to have the interface",
    "start": "1692510",
    "end": "1700159"
  },
  {
    "text": "available in order to compile yeah you can't compile the client if it needs to call an interface and it",
    "start": "1700159",
    "end": "1705260"
  },
  {
    "text": "doesn't know what it is so you have to have interface dot H included there so",
    "start": "1705260",
    "end": "1711289"
  },
  {
    "text": "what you get from this though is independent compilation because you can go look that client there if it's trying",
    "start": "1711289",
    "end": "1716419"
  },
  {
    "text": "to call something in pass a string whoa what where it wants an int the answer is no conduct because you can compile them",
    "start": "1716419",
    "end": "1722809"
  },
  {
    "text": "independently if I try to read an integer but a string was passed in the server it goes no can't do so I get",
    "start": "1722809",
    "end": "1729289"
  },
  {
    "text": "independent compilation but notice I can only put together those things which are planned to go together it's a",
    "start": "1729289",
    "end": "1735859"
  },
  {
    "text": "white list it is you have to have foresight to do this or you have to go",
    "start": "1735859",
    "end": "1741440"
  },
  {
    "text": "and edit the classes to make it happen if you try to take some third-party class and make it conform to this one",
    "start": "1741440",
    "end": "1746629"
  },
  {
    "text": "you either have to edit the class or do some form of adapter pattern correct",
    "start": "1746629",
    "end": "1765099"
  },
  {
    "text": "that was what I mean thank you John on the lower section",
    "start": "1765099",
    "end": "1770330"
  },
  {
    "text": "we're going to look at templates ignore the green concept for the moment but if",
    "start": "1770330",
    "end": "1776570"
  },
  {
    "text": "you just look at the blue boxes you've got X and then I have some some template",
    "start": "1776570",
    "end": "1782539"
  },
  {
    "text": "V that takes this one only put them together notice that we have a different dependency diagram because the first one",
    "start": "1782539",
    "end": "1789139"
  },
  {
    "text": "we have both of them depend upon having that interface around because they can be compiled they have to compile against",
    "start": "1789139",
    "end": "1794690"
  },
  {
    "text": "it in this one you go we'll look and now the template and the thing that you're putting into the template how are",
    "start": "1794690",
    "end": "1800779"
  },
  {
    "text": "completely unconnected so I can take those that and that and put them",
    "start": "1800779",
    "end": "1806029"
  },
  {
    "text": "together and then say here when I instantiate the thing on the right V of X does that work yes or no this is why",
    "start": "1806029",
    "end": "1813379"
  },
  {
    "text": "generic programming is very powerful and this is why the STL works because you can have vector of int because inter",
    "start": "1813379",
    "end": "1819950"
  },
  {
    "text": "knows nothing about vector you don't have to change a vector in any way if you look at Java they're vector and",
    "start": "1819950",
    "end": "1826879"
  },
  {
    "text": "their collection ones have to be java.lang integer they have to be a boxed thing they have that you can't",
    "start": "1826879",
    "end": "1832279"
  },
  {
    "text": "take primitives and put them in because it has to be something that derives from something that will do that so that's",
    "start": "1832279",
    "end": "1838549"
  },
  {
    "text": "where the blue stuff comes from but we don't get we don't get the independent",
    "start": "1838549",
    "end": "1844369"
  },
  {
    "text": "compilation because you can only go look when I instantiate this and I put those things together that's the Aero novel",
    "start": "1844369",
    "end": "1850220"
  },
  {
    "text": "thing again okay because I can't do it independently and this is also you can see why templates are checked in two",
    "start": "1850220",
    "end": "1855649"
  },
  {
    "text": "phases because they go what I can do the bottom one yeah I can do this one I can do all the non dependent names but until you tell me what the T is I can't work",
    "start": "1855649",
    "end": "1862159"
  },
  {
    "text": "out whether it's going to compile this that's the 2-step compilation for templates with concepts you go right",
    "start": "1862159",
    "end": "1869000"
  },
  {
    "text": "essentially I'm applying what looks like an object-oriented a stew templates in",
    "start": "1869000",
    "end": "1875720"
  },
  {
    "text": "terms of requirements says yeah that thing there I'm going to constrain the type you can put in so my concept see",
    "start": "1875720",
    "end": "1881570"
  },
  {
    "text": "and go instead of having V of T it's V of concept if I try to put that in he",
    "start": "1881570",
    "end": "1888200"
  },
  {
    "text": "goes nope you can't do that so what we've ended up with is kind of the best bit of this of the OO part of saying",
    "start": "1888200",
    "end": "1895550"
  },
  {
    "text": "yeah I can constrain it rather than just being T and getting horrible errant messages well along with this independence of not having to know about",
    "start": "1895550",
    "end": "1902450"
  },
  {
    "text": "each other and not having to go and edit stuff and getting a generousity so we actually got the best of both worlds in",
    "start": "1902450",
    "end": "1908090"
  },
  {
    "text": "some ways here ok so maybe we're moving",
    "start": "1908090",
    "end": "1914750"
  },
  {
    "text": "in them in the direction of object orientation oh wow it's been around a long time",
    "start": "1914750",
    "end": "1920179"
  },
  {
    "text": "simulus 67 norwegian invention about 52 years old it's been around a long time",
    "start": "1920179",
    "end": "1926870"
  },
  {
    "text": "one of the classic oo books 1995 was the Gang of Four book strong gamma Johnson",
    "start": "1926870",
    "end": "1934790"
  },
  {
    "text": "Helmand viscid s that's been around that's a good long time too that's been around 24 25 years there are lots of",
    "start": "1934790",
    "end": "1942440"
  },
  {
    "text": "patents in there so you'd recognize the names a command observe a header ater strategy and all the bits and pieces of",
    "start": "1942440",
    "end": "1948950"
  },
  {
    "text": "those ones you know what most of those are concepts because most",
    "start": "1948950",
    "end": "1954320"
  },
  {
    "text": "of the stuff in the Gang of Four just says let's introduce an interface they go yeah well we want to do this stuff so instead of having this problem with just",
    "start": "1954320",
    "end": "1960500"
  },
  {
    "text": "introduced an interface and they named that interface so one of the things we",
    "start": "1960500",
    "end": "1966980"
  },
  {
    "start": "1966000",
    "end": "1966000"
  },
  {
    "text": "learned from the Gang of Four is that names and vocabulary are very important because these days we just talked about",
    "start": "1966980",
    "end": "1973520"
  },
  {
    "text": "observer pattern every goes yeah I don't know what you mean rather than going oh here's a box and this thing you never heritance blah blah blah and have to",
    "start": "1973520",
    "end": "1979309"
  },
  {
    "text": "draw it out again it's a it's a chunk a mean that we can use but those memes and",
    "start": "1979309",
    "end": "1984470"
  },
  {
    "text": "names are essentially can be mapped very easily to see purpose concepts",
    "start": "1984470",
    "end": "1992620"
  },
  {
    "text": "but we can now do all that stuff before with required us to have lots of object oriented faces and inheriting from",
    "start": "1993220",
    "end": "1999130"
  },
  {
    "text": "things and virtual functions we can now do the same kind of thing go look it's a concept but by the way can I just take",
    "start": "1999130",
    "end": "2005280"
  },
  {
    "text": "this template put that together with this concept oh look I can do virtual eyes this code because I don't have to",
    "start": "2005280",
    "end": "2010770"
  },
  {
    "text": "add an interface so don't have to add interface I don't have to go and change my classes I can put them together",
    "start": "2010770",
    "end": "2016080"
  },
  {
    "text": "because it's just this calling that and there's an at compile time you can work that out rather than at runtime and",
    "start": "2016080",
    "end": "2021750"
  },
  {
    "text": "therefore can do things like in lining the networking ts which is coming up has",
    "start": "2021750",
    "end": "2027690"
  },
  {
    "text": "got lots of these kind of names completion handler things like executor they're all concepts so the interfaces",
    "start": "2027690",
    "end": "2035100"
  },
  {
    "text": "that we often think about actually come at very strongly to concept this is why I think people that say all concepts are",
    "start": "2035100",
    "end": "2042240"
  },
  {
    "text": "hard they're maths and you should not do anything else I'm missing out on this big trick this is actually where I think",
    "start": "2042240",
    "end": "2047490"
  },
  {
    "text": "really is going to we're going to learn about this one so name the application level concepts are really important",
    "start": "2047490",
    "end": "2053790"
  },
  {
    "text": "let's not think about them as technical or syntactic things okay let's since",
    "start": "2053790",
    "end": "2063300"
  },
  {
    "start": "2059000",
    "end": "2059000"
  },
  {
    "text": "we're in the world of our let's have a look at some stuff around role modeling so the picture on the left hand side is",
    "start": "2063300",
    "end": "2070379"
  },
  {
    "text": "if you ask people yeah I need to have some stuff here I need a system for Hospital also it has doctors and nurses",
    "start": "2070380",
    "end": "2076409"
  },
  {
    "text": "and patients usually the first thing people come up with oh here's a person I'm gonna have doctor and nurse and",
    "start": "2076410",
    "end": "2081840"
  },
  {
    "text": "patient as subclasses of person there you go ok that sort of kind of works and then I usually ask the question what",
    "start": "2081840",
    "end": "2088530"
  },
  {
    "text": "happens when the doctor gets ill mm unfortunately what happens when the",
    "start": "2088530",
    "end": "2094980"
  },
  {
    "text": "doctor gets ill in this system is that you have to you have to clone the doctor well you have to create a person and a",
    "start": "2094980",
    "end": "2100650"
  },
  {
    "text": "patient from the doctor kill the doctor and then when the patient gets better recreate the doctor and come back again",
    "start": "2100650",
    "end": "2106440"
  },
  {
    "text": "because this these interfaces all these types are hardwired in for the whole",
    "start": "2106440",
    "end": "2113400"
  },
  {
    "text": "life of the object you can't change them it's not dynamic in any way and we can",
    "start": "2113400",
    "end": "2120600"
  },
  {
    "text": "go through various things about this one here and the picture in the middle you go well ok now I get a person here",
    "start": "2120600",
    "end": "2126119"
  },
  {
    "text": "and person has all the functionality they may or may not have and then I'll have interfaces instead so I'll have an",
    "start": "2126119",
    "end": "2132900"
  },
  {
    "text": "interface for a doctor and one for patients so I can treat this person like a doctor and then later if they get ill I'll treat them like a patient as well",
    "start": "2132900",
    "end": "2138990"
  },
  {
    "text": "yeh we can do stuff with dynamic stuff and things well okay and dynamic casts",
    "start": "2138990",
    "end": "2144839"
  },
  {
    "text": "and have you got this interface or not but these are these are roles notice I",
    "start": "2144839",
    "end": "2151829"
  },
  {
    "text": "have to go on if I add a new one I have to go on if I have some other thing like visitor or whatever or some hospital",
    "start": "2151829",
    "end": "2158880"
  },
  {
    "text": "administrator or whatever I have to go and create the new interface I have to go edit the code and maybe it works",
    "start": "2158880",
    "end": "2164339"
  },
  {
    "text": "maybe it doesn't in the case of concepts I go it's person right okay here's what",
    "start": "2164339",
    "end": "2170249"
  },
  {
    "text": "I need a doctor to do here are the few things right can you do that great you're a doctor I'll just treat you like",
    "start": "2170249",
    "end": "2175619"
  },
  {
    "text": "that oh I've got this other new role I don't know II didn't can you behave like that ok fine done I don't have to go and",
    "start": "2175619",
    "end": "2183690"
  },
  {
    "text": "create the interface I don't have to go and edit the underlying class I don't have to do all this work and I can do it all compile-time this is why I think",
    "start": "2183690",
    "end": "2191999"
  },
  {
    "text": "it's something for application developers to look at rather than leaving this an isolated mathematical",
    "start": "2191999",
    "end": "2198239"
  },
  {
    "text": "thing okay enough of the bashing on about oh let's have a little look at",
    "start": "2198239",
    "end": "2203249"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "some syntax so here is the syntax for a",
    "start": "2203249",
    "end": "2209160"
  },
  {
    "text": "concept basic stuff here templates like 90 so they're all templated totally",
    "start": "2209160",
    "end": "2215309"
  },
  {
    "text": "ordered requires an A in a B and you go well look I want to be able to say that a less than B must return a boolean or",
    "start": "2215309",
    "end": "2222329"
  },
  {
    "text": "something convertible to boolean I could then add all the other ones about a greater than B but what I can't do is",
    "start": "2222329",
    "end": "2228690"
  },
  {
    "text": "put a static assert in here than says that a less than a isn't is never true",
    "start": "2228690",
    "end": "2233749"
  },
  {
    "text": "so that's part of our syntax of this one we can only do syntactic checking axioms",
    "start": "2233749",
    "end": "2241470"
  },
  {
    "text": "you can't check anyway so how when you specify that that end must be reachable for begin when I give you in iterative",
    "start": "2241470",
    "end": "2248430"
  },
  {
    "text": "it's it's not checkable at all so you are gonna need multiple things this",
    "start": "2248430",
    "end": "2253859"
  },
  {
    "text": "solves some problems it helps you with the syntax it does not help you with semantics and it does not help you",
    "start": "2253859",
    "end": "2259660"
  },
  {
    "text": "with axioms you are gonna need documentation it is not a complete solution but it's a damn good start",
    "start": "2259660",
    "end": "2265920"
  },
  {
    "start": "2265000",
    "end": "2265000"
  },
  {
    "text": "what can you check well what you're checking really is doesn't with this",
    "start": "2267599",
    "end": "2272950"
  },
  {
    "text": "piece of stuff compile so here's a little trap you can fall into right so",
    "start": "2272950",
    "end": "2280599"
  },
  {
    "text": "would this compile what is that you're actually testing so on the Left I've got concept food requires size of t equals",
    "start": "2280599",
    "end": "2286869"
  },
  {
    "text": "four okay that's probably what you're thinking yeah I do that one like a static assert foo of int well in teaser",
    "start": "2286869",
    "end": "2293140"
  },
  {
    "text": "size four yes foo of char char is not size four but that still passes hmm well",
    "start": "2293140",
    "end": "2301599"
  },
  {
    "text": "actually what you're doing here is you're saying is size of fort in size of",
    "start": "2301599",
    "end": "2306730"
  },
  {
    "text": "t equals equals false in tactically correct you're not actually checking the",
    "start": "2306730",
    "end": "2313000"
  },
  {
    "text": "thing if you really want to check that condition you actually put requires size of t equals 4 which is what on the right",
    "start": "2313000",
    "end": "2319299"
  },
  {
    "text": "hand side and there you can see laureen's it's true but blair of char is not so you're checking syntax if you",
    "start": "2319299",
    "end": "2327819"
  },
  {
    "text": "actually want to check return values you need to do something else and you need this nested require so there's just one or two little corners and some fun",
    "start": "2327819",
    "end": "2334240"
  },
  {
    "text": "things that come up just some variations on syntax so this is a little bit of a",
    "start": "2334240",
    "end": "2344950"
  },
  {
    "start": "2335000",
    "end": "2335000"
  },
  {
    "text": "history lesson here so you can start off and going well the top we've got template type name t f takes of t's",
    "start": "2344950",
    "end": "2350650"
  },
  {
    "text": "unconstrained you can put anything there I don't care so that's the the basic one",
    "start": "2350650",
    "end": "2355660"
  },
  {
    "text": "I have a concept foo simplest one could be true doesn't particular for this one",
    "start": "2355660",
    "end": "2360990"
  },
  {
    "text": "my options I can say template tag line and type name T requires foo of T",
    "start": "2360990",
    "end": "2367029"
  },
  {
    "text": "requires that this thing must be true so I can constrain the template argument directly there so that's middle one",
    "start": "2367029",
    "end": "2373240"
  },
  {
    "text": "that's one way of writing a concept you",
    "start": "2373240",
    "end": "2379240"
  },
  {
    "text": "can then move to the next one says template foo of T that moves the name",
    "start": "2379240",
    "end": "2384970"
  },
  {
    "text": "inside and it says right instead of type name I'm saying which is generic and",
    "start": "2384970",
    "end": "2390460"
  },
  {
    "text": "everything this is this thing here so you've now got a much tighter way of writing it's one of those I could say template input",
    "start": "2390460",
    "end": "2397880"
  },
  {
    "text": "iterator T or something along those lines the TS the concepts TS then had an",
    "start": "2397880",
    "end": "2407450"
  },
  {
    "text": "abbreviated form which was controversial and not adopted so we have void F foo",
    "start": "2407450",
    "end": "2414790"
  },
  {
    "text": "just pass a foo indirectly and you look at that and go oh that looks very short",
    "start": "2414790",
    "end": "2420349"
  },
  {
    "text": "I quite like that I quite like that but there are some problems with this one",
    "start": "2420349",
    "end": "2425390"
  },
  {
    "text": "one of the problems is it's a templated function but you can't see it's a templated function and there are",
    "start": "2425390",
    "end": "2430880"
  },
  {
    "text": "differences between templated functions and non templated functions and so it",
    "start": "2430880",
    "end": "2435950"
  },
  {
    "text": "was like Oh grumble grumble grumble lots of people didn't like it the killer argument was if I do food ref",
    "start": "2435950",
    "end": "2441770"
  },
  {
    "text": "ref if foo is just an ordinary type that",
    "start": "2441770",
    "end": "2449060"
  },
  {
    "text": "then maps to an R value reference if foo is concept that then is a forwarding or",
    "start": "2449060",
    "end": "2454099"
  },
  {
    "text": "universal reference and maps to our values or L values and you can't tell by looking at it so I mean okay fine",
    "start": "2454099",
    "end": "2460160"
  },
  {
    "text": "right though the syntax that was came out was this constrained auto takes a",
    "start": "2460160",
    "end": "2465530"
  },
  {
    "text": "foo Auto something like that so putting the keyword in auto in there but then saying putting con the concept in front",
    "start": "2465530",
    "end": "2472280"
  },
  {
    "text": "saying it's Auto but constrained to this and that's actually very generic and general we'll see some other uses of",
    "start": "2472280",
    "end": "2478400"
  },
  {
    "text": "that concepts can be variables they can also be functions so on the Left I've",
    "start": "2478400",
    "end": "2485329"
  },
  {
    "start": "2479000",
    "end": "2479000"
  },
  {
    "text": "got something here which is concept container and requires the following bits and pieces that says oh you have to",
    "start": "2485329",
    "end": "2491000"
  },
  {
    "text": "have a value type inside there you have to have a nested iterator you have to begin that returns an iterator notice by",
    "start": "2491000",
    "end": "2497810"
  },
  {
    "text": "the way you don't have to say type name T Colin Cowie traitor here because type lame has been removed in odd of 20 good",
    "start": "2497810",
    "end": "2503510"
  },
  {
    "text": "and you'll find that a vector means that on the right hand side we have the",
    "start": "2503510",
    "end": "2508910"
  },
  {
    "text": "function version of this one here so you can do those template variables alternate functions fairly simulates a",
    "start": "2508910",
    "end": "2514970"
  },
  {
    "text": "syntactic difference but you'll need parentheses on the other one just so that you've got both right you can",
    "start": "2514970",
    "end": "2522920"
  },
  {
    "start": "2520000",
    "end": "2520000"
  },
  {
    "text": "combine these things you can combine concepts with functions and disjunctions with and and",
    "start": "2522920",
    "end": "2528890"
  },
  {
    "text": "all so I can say right I have a concept integral is the standard integral stuff",
    "start": "2528890",
    "end": "2535400"
  },
  {
    "text": "I can have to say it's unsigned which is unsigned of that and now I can say write concept unsigned int is it's an integral",
    "start": "2535400",
    "end": "2542930"
  },
  {
    "text": "and it's unsigned so I can combine those things and now you'll see that unsigned",
    "start": "2542930",
    "end": "2548270"
  },
  {
    "text": "int is definitely one of those and an int is not an unsigned int and I can do static checks and Static asserts and",
    "start": "2548270",
    "end": "2554270"
  },
  {
    "text": "notice it's checked at compile time that's conjunction everybody goes yeah",
    "start": "2554270",
    "end": "2559820"
  },
  {
    "text": "that's great I can do that one another thing you can do is a disjunction which is causes certain amount of controversy",
    "start": "2559820",
    "end": "2565220"
  },
  {
    "text": "but I'm going to show you anyway because I think there's some uses for this what",
    "start": "2565220",
    "end": "2570530"
  },
  {
    "text": "happens if I'm trying to write a library for saving things for doing archiving of stuff well I've got some stuff I got",
    "start": "2570530",
    "end": "2576980"
  },
  {
    "text": "some classes that have a save method and some have a dumped method well I could",
    "start": "2576980",
    "end": "2582560"
  },
  {
    "text": "try and write one method that would do this one and do the type stuff and put some other things or I could write the",
    "start": "2582560",
    "end": "2587660"
  },
  {
    "text": "library and put adapters in front of it there are various options here but maybe what I can just do is go well look",
    "start": "2587660",
    "end": "2593540"
  },
  {
    "text": "archivable says you've got a save method or you've got a dump method and then I can go right okay this a switch has got",
    "start": "2593540",
    "end": "2602000"
  },
  {
    "text": "say V is archivable and the other one is as well because it's one or the other that's actually quite simple the other",
    "start": "2602000",
    "end": "2608750"
  },
  {
    "text": "ways of doing this with adaptors and everything else look like there's a lot of mechanism this actually kind of says",
    "start": "2608750",
    "end": "2614180"
  },
  {
    "text": "what I want well I want that one I want that all that and to me I don't think that's unusual it's actually something",
    "start": "2614180",
    "end": "2621200"
  },
  {
    "text": "you can't do with oo because with oh well you go well I can't have an interface yeah I can drive from one of",
    "start": "2621200",
    "end": "2626810"
  },
  {
    "text": "those or one of those there's no all in object-oriented inheritance so I can now so the stuff on",
    "start": "2626810",
    "end": "2638210"
  },
  {
    "text": "the left is just repeated from previous slide the stuff on the right there you go archive well if you have a save method call this one or I could say if you have",
    "start": "2638210",
    "end": "2645890"
  },
  {
    "text": "a dump method call this one so I can now override based upon those concepts which",
    "start": "2645890",
    "end": "2651530"
  },
  {
    "text": "is kind of nice and that's why it's Const path save auto because this is a",
    "start": "2651530",
    "end": "2656900"
  },
  {
    "text": "constrained parameter archive 2 says well actually look no I'm not going to do you the can",
    "start": "2656900",
    "end": "2663430"
  },
  {
    "text": "get the compiler to do this one I'm going to be able to say I'll just have archivable inside I can do if Const X /",
    "start": "2663430",
    "end": "2669430"
  },
  {
    "text": "I can do a runtime I can do a compile time check and it goes yeah I could do that one here if it's a verb we'll call the save",
    "start": "2669430",
    "end": "2675400"
  },
  {
    "text": "method otherwise called dump and notice that that can be inlined is compile time I don't have an if statement so I've",
    "start": "2675400",
    "end": "2681280"
  },
  {
    "text": "eliminated that overhead so is a way of avoiding things like adapter pattern",
    "start": "2681280",
    "end": "2688890"
  },
  {
    "text": "okay you've got existing code you're not about to write all new stuff what do you do with some existing code how do you",
    "start": "2690540",
    "end": "2696130"
  },
  {
    "text": "introduce concepts to an existing code and there are some considerations you go",
    "start": "2696130",
    "end": "2701349"
  },
  {
    "text": "well okay first of all no bare T if it says type name T you're going like well what do you actually mean do you really",
    "start": "2701349",
    "end": "2707650"
  },
  {
    "text": "mean T or do you mean something else do you mean it's got yep T but there's",
    "start": "2707650",
    "end": "2713710"
  },
  {
    "text": "obviously some requirements so let's work out what that might mean what what are you doing there past the main",
    "start": "2713710",
    "end": "2720910"
  },
  {
    "text": "parameters rather than integers as an example but you can take an outside-in or an inside out view so the outside in",
    "start": "2720910",
    "end": "2726760"
  },
  {
    "text": "views he's a domain base for you going what are we doing here in terms of abstractions what's what's generic",
    "start": "2726760",
    "end": "2732760"
  },
  {
    "text": "what's this really about if I look from outside and don't worry about the implementation what what kind of things",
    "start": "2732760",
    "end": "2737830"
  },
  {
    "text": "are we talking about so you can start producing the main level concepts the",
    "start": "2737830",
    "end": "2743950"
  },
  {
    "text": "alternative approach is well you have your head inside the box and go well look I need to be able to call this and that okay I'll just have the",
    "start": "2743950",
    "end": "2749980"
  },
  {
    "text": "requirements that it does this and that so you take the implementation and you push it outwards that works but again",
    "start": "2749980",
    "end": "2758170"
  },
  {
    "text": "you're lacking abstraction when you do that you you end up with a minimal syntax only based one rather than any",
    "start": "2758170",
    "end": "2766000"
  },
  {
    "text": "form of generic concept and this then leads us to another parallel with our oh",
    "start": "2766000",
    "end": "2773430"
  },
  {
    "text": "we're cheese in object-oriented patterns there are patterns you use for design and some you sort of kind of discover as",
    "start": "2773430",
    "end": "2781060"
  },
  {
    "text": "you refactoring some of the design ones you go well look I'm going to design with this if I'm using composite pattern",
    "start": "2781060",
    "end": "2786790"
  },
  {
    "text": "it's usually because I'm going to design with composite pattern right from the start that's kind how I build my system observer can be",
    "start": "2786790",
    "end": "2792710"
  },
  {
    "text": "another example of that one and you go well I have broad constraints here as a",
    "start": "2792710",
    "end": "2798380"
  },
  {
    "text": "broad concept in multiple constraints they represent something in the domain and they have an obvious meaning if they",
    "start": "2798380",
    "end": "2804200"
  },
  {
    "text": "don't have an obvious meaning then then really you need to work out what it is that you're actually trying to do but",
    "start": "2804200",
    "end": "2809420"
  },
  {
    "text": "then you might also have concepts that you've discovered in a more so a kind of technical wave through refactoring you",
    "start": "2809420",
    "end": "2815120"
  },
  {
    "text": "go well okay I've refactor this thing out here and it's a very narrow concept in the way that adapter pattern is sort",
    "start": "2815120",
    "end": "2820880"
  },
  {
    "text": "of kind of something that you don't want to build your whole system out of adapters it ends up is just so kind of",
    "start": "2820880",
    "end": "2827090"
  },
  {
    "text": "glue upon glue you know okay so that you may well find the discovered ones what",
    "start": "2827090",
    "end": "2833270"
  },
  {
    "text": "happened when you take existing code and add it what about unit testing well you could",
    "start": "2833270",
    "end": "2842930"
  },
  {
    "start": "2836000",
    "end": "2836000"
  },
  {
    "text": "do unit testing and you put in it okay I need to put in a virtual interface here because I need to put use google mark",
    "start": "2842930",
    "end": "2848510"
  },
  {
    "text": "and I want to be able to have a substitution point etc if I just use a template with a concept that says all",
    "start": "2848510",
    "end": "2854690"
  },
  {
    "text": "right I need database here and it all it needs is right all I need to do is just provide something that has right it's",
    "start": "2854690",
    "end": "2863480"
  },
  {
    "text": "that simple it's documented what it is well that's there is all I need to do I don't need to I can break my",
    "start": "2863480",
    "end": "2870410"
  },
  {
    "text": "dependencies more easily I don't have to go around and start using heavyweight libraries and virtuals and all sorts of",
    "start": "2870410",
    "end": "2876650"
  },
  {
    "text": "the things I should just be able to just go and do that okay one or two things",
    "start": "2876650",
    "end": "2883580"
  },
  {
    "start": "2880000",
    "end": "2880000"
  },
  {
    "text": "that about concepts that you can do with concepts you can't really do with other things this constrained auto so instead",
    "start": "2883580",
    "end": "2891200"
  },
  {
    "text": "of just saying Auto X I can go well look it's some concept auto X if you because",
    "start": "2891200",
    "end": "2898400"
  },
  {
    "text": "if you're just using autos the return type of a function it says Auto over here you go Mike mmm what's that I've",
    "start": "2898400",
    "end": "2904100"
  },
  {
    "text": "got to kind of dig around you go well yeah that's fine I whatever that is I just want it to be able to do this stuff because it becomes then I don't care",
    "start": "2904100",
    "end": "2911180"
  },
  {
    "text": "what the exact type is I just care what it can do so you're now programming",
    "start": "2911180",
    "end": "2916430"
  },
  {
    "text": "terms of intention in terms of interface and rather than in terms of type and class",
    "start": "2916430",
    "end": "2921800"
  },
  {
    "text": "this disjunction of concepts is something you can't really do without at all because you can't do this multiple",
    "start": "2921800",
    "end": "2928340"
  },
  {
    "text": "inheritance well it could've a ball that you can constrain non types so you could actually have an implementation that",
    "start": "2928340",
    "end": "2934130"
  },
  {
    "text": "says well requires n less than ten because this is the small object optimization version of dr. if it's",
    "start": "2934130",
    "end": "2940460"
  },
  {
    "text": "bigger than that whatever hierarchical constraints so there's a whole hierarchy",
    "start": "2940460",
    "end": "2946250"
  },
  {
    "text": "of things like iterators iterator types you can actually have different concepts for input it's right and forward",
    "start": "2946250",
    "end": "2952070"
  },
  {
    "text": "iterator and random access iterator and have different functions called depending on those you can't do that so",
    "start": "2952070",
    "end": "2958100"
  },
  {
    "text": "easily with our otherwise and other than building all this stuff with inheritance",
    "start": "2958100",
    "end": "2963440"
  },
  {
    "text": "but then you've kind of lost all the advantage of having just being to use a pointer briefly there are some SI parla",
    "start": "2963440",
    "end": "2973070"
  },
  {
    "text": "score guidelines about concepts not going to repeat them all but just to point out that this is sort of kind of",
    "start": "2973070",
    "end": "2979760"
  },
  {
    "text": "the idea of no naked T so specify template parameters as concepts use",
    "start": "2979760",
    "end": "2987800"
  },
  {
    "text": "standard concepts where possible that doesn't protrude writing your own as I said prefer concept names over Auto for",
    "start": "2987800",
    "end": "2995480"
  },
  {
    "text": "locals that like that one my concept and prefer the shorthand notation for simple",
    "start": "2995480",
    "end": "3000610"
  },
  {
    "start": "2998000",
    "end": "2998000"
  },
  {
    "text": "ones so that's back to this guy here or way back when the one at the bottom here",
    "start": "3000610",
    "end": "3006760"
  },
  {
    "text": "rather than the template one use that simple shorthand one that's what that's talking talking about in terms of",
    "start": "3006760",
    "end": "3013930"
  },
  {
    "text": "defining it don't just have concepts without any form of meaning don't just make them in terms of technical things",
    "start": "3013930",
    "end": "3020770"
  },
  {
    "text": "of it it has a operator plus nothing kind of like that look for a complete",
    "start": "3020770",
    "end": "3026020"
  },
  {
    "text": "set of operations and constrain that whole thing specify axioms even if you can't put them there are other ones and",
    "start": "3026020",
    "end": "3032230"
  },
  {
    "text": "I'm not gonna go into the details you can go and dig them out so summary they are there to give you so concepts are",
    "start": "3032230",
    "end": "3041020"
  },
  {
    "start": "3035000",
    "end": "3035000"
  },
  {
    "text": "there to allow you to express the main level concepts they are limited to syntax and they limit what's coming in",
    "start": "3041020",
    "end": "3048760"
  },
  {
    "text": "they do not limp in an implementation you should document your semantics and axioms as well I think that these",
    "start": "3048760",
    "end": "3055540"
  },
  {
    "text": "make generic programming scalable and I think they are a very useful alternative",
    "start": "3055540",
    "end": "3060850"
  },
  {
    "text": "to using oh oh and they make patterns more efficient in terms of generic way of doing this one here I think it's a",
    "start": "3060850",
    "end": "3067570"
  },
  {
    "text": "fundamental change in the way that we write generic code and there are lots more than just template error messages",
    "start": "3067570",
    "end": "3076650"
  },
  {
    "text": "okay any questions and yes I said now are we if I remove Const from the",
    "start": "3076650",
    "end": "3096880"
  },
  {
    "text": "program that's correct is it still correct yeah well the bottom",
    "start": "3096880",
    "end": "3104020"
  },
  {
    "text": "line where I'm making a serious point as well I can get if I took away all the Const if I took away all of the concepts",
    "start": "3104020",
    "end": "3109660"
  },
  {
    "text": "if I took away all the types and assembler has no types at this point",
    "start": "3109660",
    "end": "3116309"
  },
  {
    "text": "right yeah probably because you've got",
    "start": "3121110",
    "end": "3133630"
  },
  {
    "text": "no overloading because what this is doing is helping you to make it scalable you know Python still works compiling",
    "start": "3133630",
    "end": "3139930"
  },
  {
    "text": "just does this at runtime essentially because it's as well just I can take anything it's type lengthy you need to",
    "start": "3139930",
    "end": "3145030"
  },
  {
    "text": "put it in yeah and it's a runtime thing I'm getting some I'm getting some of you so",
    "start": "3145030",
    "end": "3150430"
  },
  {
    "text": "there's a view here that maybe that answer is is not without controversy we'll have a chat later",
    "start": "3150430",
    "end": "3156610"
  },
  {
    "text": "any other questions yeah",
    "start": "3156610",
    "end": "3160140"
  },
  {
    "text": "yes it's not it's not a gimme in the sense of yeah I can just do this and",
    "start": "3170570",
    "end": "3176310"
  },
  {
    "text": "throw concept everywhere yeah you're gonna have to think about this but what I'm trying to do is to is to get away",
    "start": "3176310",
    "end": "3182340"
  },
  {
    "text": "from this idea it's somehow this is this sort of religious mathematical thing that's real life that that's over in the",
    "start": "3182340",
    "end": "3188820"
  },
  {
    "text": "library and the standard and and developers should just go yeah we'll use that stuff no use it it's there for you",
    "start": "3188820",
    "end": "3194550"
  },
  {
    "text": "that's what I'm trying to say it's not something that should be there should be",
    "start": "3194550",
    "end": "3199740"
  },
  {
    "text": "reserved for just a few people I think it's much more much bigger than that much more important than that but you're right yes you it's not going to be just",
    "start": "3199740",
    "end": "3206160"
  },
  {
    "text": "kind of really to this one here and oh oh interface because you've got implementation that's hidden you're gonna have all the overhead of moving",
    "start": "3206160",
    "end": "3213240"
  },
  {
    "text": "stuff into template files but then what the modules do then mmm yeah there's we",
    "start": "3213240",
    "end": "3218640"
  },
  {
    "text": "can have some fun over the next few years with this anybody else okay thank",
    "start": "3218640",
    "end": "3225240"
  },
  {
    "text": "you very much [Applause]",
    "start": "3225240",
    "end": "3231300"
  }
]