[
  {
    "text": "okay so we're going to go pretty fast through this and last time I gave this talk it",
    "start": "1560",
    "end": "8820"
  },
  {
    "text": "was about an hour and 20 minutes um so we're going to go really really fast if you're watching this on YouTube you might want to go at half speed",
    "start": "8820",
    "end": "14580"
  },
  {
    "text": "rather than two times um in the room if you can do that in your heads that would be great",
    "start": "14580",
    "end": "20640"
  },
  {
    "text": "um so why did I start to um want to give this sort of talk now up",
    "start": "20640",
    "end": "26039"
  },
  {
    "text": "in Telemetry has become kind of ubiquitous now we've started to move",
    "start": "26039",
    "end": "31080"
  },
  {
    "text": "from people wanting to know what open Telemetry is to well how do I actually use it what are the things that I should",
    "start": "31080",
    "end": "36480"
  },
  {
    "text": "be doing what the best practice is why should I be using it in particular ways etc etc so that's kind of why I I saw",
    "start": "36480",
    "end": "43980"
  },
  {
    "text": "this demand for people to know a little bit of practically how it should work so",
    "start": "43980",
    "end": "49920"
  },
  {
    "text": "who am I my name is Martin Thwaites I go by martin.net on the twitters and on",
    "start": "49920",
    "end": "55620"
  },
  {
    "text": "Mastodon I'm first and foremost an observability evangelist um I do lots of talks around operable",
    "start": "55620",
    "end": "62640"
  },
  {
    "text": "software and supporting production systems I'm also a developer advocate for a company called honeycomb Who",
    "start": "62640",
    "end": "68220"
  },
  {
    "text": "develops these kind of Solutions on the back end who are also an open Telemetry first company so we only use open",
    "start": "68220",
    "end": "74580"
  },
  {
    "text": "Telemetry for our ingest um I'm also a Microsoft MVP recently as",
    "start": "74580",
    "end": "79740"
  },
  {
    "text": "well so we'll start by looking a little bit about what I'm open Telemetry is I hope",
    "start": "79740",
    "end": "85680"
  },
  {
    "text": "most people who've decided to come to a practical Hotel talk know kind of what hotel is but let's just assume that",
    "start": "85680",
    "end": "92220"
  },
  {
    "text": "there are some people in the room for which this is a new topic so",
    "start": "92220",
    "end": "97740"
  },
  {
    "text": "open telemetry really is a protocol and it's hard it's a protocol it's the idea of how do I",
    "start": "97740",
    "end": "104400"
  },
  {
    "text": "send Telemetry from my application to a back end it defines a format it defines",
    "start": "104400",
    "end": "110159"
  },
  {
    "text": "a protocol of how data should be transferred between those two that is at the core of why open Telemetry is so",
    "start": "110159",
    "end": "116700"
  },
  {
    "text": "popular right now because it means that you don't have to choose vendors up front now if you've been using things",
    "start": "116700",
    "end": "123180"
  },
  {
    "text": "like ilogger you if you've been using loggers before I logger came in you'd know that when you start a project the",
    "start": "123180",
    "end": "129420"
  },
  {
    "text": "first thing you do is spend six months defining which logging Library you're going to use because then it gets prevalent throughout your entire",
    "start": "129420",
    "end": "134819"
  },
  {
    "text": "software when you ilogger came along all of that went to the Wayside because well we",
    "start": "134819",
    "end": "140220"
  },
  {
    "text": "don't need to think about that now this is what open Telemetry provides with tracing and with metrics and ultimately",
    "start": "140220",
    "end": "147300"
  },
  {
    "text": "it will be with logs as well now they also provide sdks",
    "start": "147300",
    "end": "154860"
  },
  {
    "text": "um for 11 different languages that allow you to implement open telemetry",
    "start": "154860",
    "end": "160200"
  },
  {
    "text": "and by implementing open Telemetry they have standards in the way that you define things like spans and span events",
    "start": "160200",
    "end": "166379"
  },
  {
    "text": "and that kind of stuff the current signals that they have so",
    "start": "166379",
    "end": "171660"
  },
  {
    "text": "these are signals these are not pillars so that again these are not the three",
    "start": "171660",
    "end": "177120"
  },
  {
    "text": "pillars of observability these are signals there are traces traces are stable in I",
    "start": "177120",
    "end": "184980"
  },
  {
    "text": "think all 11 languages right now which is one signal that's the signal we're going to be talking most about",
    "start": "184980",
    "end": "190140"
  },
  {
    "text": "today metrics mostly stable I think it's about 50 of the languages who have a stable",
    "start": "190140",
    "end": "197220"
  },
  {
    "text": "implementation of it whereas logs the only thing that's stable is the protocol between the two",
    "start": "197220",
    "end": "203040"
  },
  {
    "text": "systems they haven't defined the standard of what the sdks look like yet in any of the languages it's like highly",
    "start": "203040",
    "end": "209159"
  },
  {
    "text": "likely that Python and net are going to be the standards of how that is laid out though so what is a Trace",
    "start": "209159",
    "end": "217080"
  },
  {
    "text": "it's kind of a thing context unit work there's not really a what I'm going to",
    "start": "217080",
    "end": "223920"
  },
  {
    "text": "consider a good definition of what a trace is but most importantly it's a not a thing that we create we don't say",
    "start": "223920",
    "end": "229200"
  },
  {
    "text": "create Trace what we do is we create a trace ID",
    "start": "229200",
    "end": "234299"
  },
  {
    "text": "and we'll create spans that have that Trace ID together when you push them together they make a trace so a trace",
    "start": "234299",
    "end": "242040"
  },
  {
    "text": "itself isn't something that we create it consists of spans",
    "start": "242040",
    "end": "248940"
  },
  {
    "text": "those spans can consist of some baggage when you're transmitting between systems",
    "start": "248940",
    "end": "254040"
  },
  {
    "text": "and all of those spans have attributes now that's not a complete list it's not",
    "start": "254040",
    "end": "260880"
  },
  {
    "text": "a complete definition I'm not here to repeat the spec of what hotel is for you this is just to set the scene of what",
    "start": "260880",
    "end": "266580"
  },
  {
    "text": "we're going to be talking about today so what is a span",
    "start": "266580",
    "end": "272220"
  },
  {
    "text": "it's a structured blob of data that's all it really is but it has some mandatory items on it",
    "start": "272220",
    "end": "279419"
  },
  {
    "text": "it has a unique ID we call it a span ID it has a correlation ID it's called a",
    "start": "279419",
    "end": "286080"
  },
  {
    "text": "trace ID they'll have a duration how long that span took to execute",
    "start": "286080",
    "end": "292860"
  },
  {
    "text": "they'll have a time stamp so when it started and they'll have a causality ID",
    "start": "292860",
    "end": "298860"
  },
  {
    "text": "which is the thing that came before it that caused this execution to happen",
    "start": "298860",
    "end": "304139"
  },
  {
    "text": "and that causality ID is the really important thing when it comes to tracing it's the really important thing when it comes to understanding production",
    "start": "304139",
    "end": "309960"
  },
  {
    "text": "systems ultimately it's really just a fancy log",
    "start": "309960",
    "end": "316680"
  },
  {
    "text": "if you think about log it's got some of those things already we created a sticker for it",
    "start": "316680",
    "end": "323120"
  },
  {
    "text": "stickers are available at the end okay so what is a log well when we're",
    "start": "324780",
    "end": "330539"
  },
  {
    "text": "talking about logs in the context of open Telemetry what is it we mean it's a point in time action",
    "start": "330539",
    "end": "337020"
  },
  {
    "text": "it's something that only happens at that point in time with some arbitrary attributes",
    "start": "337020",
    "end": "342960"
  },
  {
    "text": "it's useful where context doesn't exist so useful where we don't have a HTTP",
    "start": "342960",
    "end": "348300"
  },
  {
    "text": "it's useful where we don't have a message as our context to tack things to",
    "start": "348300",
    "end": "355199"
  },
  {
    "text": "so useful for things like access logs audit logs firewall logs that kind of",
    "start": "355199",
    "end": "360780"
  },
  {
    "text": "stuff not really useful for application debugging when you've got traces instead",
    "start": "360780",
    "end": "367199"
  },
  {
    "text": "traces are much more powerful and do everything that a log can do I mean logs are mostly fine",
    "start": "367199",
    "end": "375060"
  },
  {
    "text": "again stickers are available at the end okay so we're talking about.net we're",
    "start": "375060",
    "end": "381360"
  },
  {
    "text": "talking about open Telemetry how do we set things up now I've spent a lot of time on the ergonomics of the open",
    "start": "381360",
    "end": "386900"
  },
  {
    "text": "telemetry.net stuff it should be really really easy now you will notice that we've got",
    "start": "386900",
    "end": "393360"
  },
  {
    "text": "pre-release when we input these libraries specific reason obviously logs it's not stable yet so we can't Mark",
    "start": "393360",
    "end": "400440"
  },
  {
    "text": "that as a release thing but the setup is pretty easy if you've been using things like Siri log that kind of stuff before",
    "start": "400440",
    "end": "406800"
  },
  {
    "text": "you'll be familiar with adding something to the logger Factory that's as easy as it is we say Adam Telemetry and add an",
    "start": "406800",
    "end": "414720"
  },
  {
    "text": "otlp exporter that means the open Telemetry line protocol exporter which",
    "start": "414720",
    "end": "419940"
  },
  {
    "text": "means we're going to be using that open Telemetry protocol between our application and the back end",
    "start": "419940",
    "end": "425220"
  },
  {
    "text": "that's the most basic implementation of doing it by default it's going to send it to localhost",
    "start": "425220",
    "end": "430400"
  },
  {
    "text": "I believe it's four three one eight is the port which is the default OTL pgrpc",
    "start": "430400",
    "end": "437039"
  },
  {
    "text": "port metrics metrics are stable in.net",
    "start": "437039",
    "end": "442080"
  },
  {
    "text": "because we had meter we've had the meter class in Diagnostics so we're able to use that",
    "start": "442080",
    "end": "448020"
  },
  {
    "text": "so you notice that those don't plus it's part of the core of open Telemetry so adding a couple of packages and ins if",
    "start": "448020",
    "end": "454620"
  },
  {
    "text": "you're using di you can run add open Telemetry with metrics and you can say I want to monitor a",
    "start": "454620",
    "end": "461759"
  },
  {
    "text": "particular named meter we'll come on to what the meter names mean in a minute but again we're adding an otlp export to",
    "start": "461759",
    "end": "467940"
  },
  {
    "text": "return it for these metrics we're going to throw that over to the Local Host",
    "start": "467940",
    "end": "472979"
  },
  {
    "text": "4318 tracing again very similar now I've",
    "start": "472979",
    "end": "478919"
  },
  {
    "text": "omitted here doing custom sources because I'm going to talk about that in a minute that itself won't do anything at all",
    "start": "478919",
    "end": "486960"
  },
  {
    "text": "it sets things up but it doesn't do anything because nothing's being monitored it's not monitoring any particular traces or tracers",
    "start": "486960",
    "end": "495139"
  },
  {
    "text": "so once you've done those the other important thing to do is use the resource Builder to tell open telemetry",
    "start": "495900",
    "end": "502680"
  },
  {
    "text": "what your service is called because if you don't it's not going to",
    "start": "502680",
    "end": "507780"
  },
  {
    "text": "know it's going to use a dll name and the default is unknown service colon dll name which is not entirely helpful",
    "start": "507780",
    "end": "515820"
  },
  {
    "text": "so you can use that configure resource just be clear on the logs one on the",
    "start": "515820",
    "end": "520979"
  },
  {
    "text": "right I have included it but because things aren't stable things are changing there is something much similar to the",
    "start": "520979",
    "end": "526020"
  },
  {
    "text": "one on the left coming very soon for open telemetry for.net but you need to set your resource stuff",
    "start": "526020",
    "end": "534420"
  },
  {
    "text": "that will set for every single span it will say I've got an attribute that says service.name equals that",
    "start": "534420",
    "end": "541920"
  },
  {
    "text": "most back-ends will use that it comes from something called the semantic conventions which are defined by open",
    "start": "541920",
    "end": "547680"
  },
  {
    "text": "telemetry service.name is a mandatory property that has to exist it allows the back",
    "start": "547680",
    "end": "553320"
  },
  {
    "text": "ends to assume that everything that comes from this particular service name means it came from that service so I can",
    "start": "553320",
    "end": "559440"
  },
  {
    "text": "group them together that's why semantic conventions are really really important",
    "start": "559440",
    "end": "564540"
  },
  {
    "text": "now the other thing we have is what's called resource level attributes now resource level attributes apply to",
    "start": "564540",
    "end": "569820"
  },
  {
    "text": "every span exactly the same as what we're doing with the service name they're defined when we do our startup",
    "start": "569820",
    "end": "578519"
  },
  {
    "text": "it applies to every log every span and every metric doesn't change based on those different",
    "start": "578519",
    "end": "585600"
  },
  {
    "text": "metrics they will all just be stamped with it it's run at startup so you can't do",
    "start": "585600",
    "end": "592019"
  },
  {
    "text": "something that does it by request it's applied asynchronously",
    "start": "592019",
    "end": "600000"
  },
  {
    "text": "so it doesn't affect performance of your application because it's applied when it gets sent to the back end not while we're",
    "start": "600000",
    "end": "606839"
  },
  {
    "text": "processing your spam data so those are some of the examples that you would put on there because they",
    "start": "606839",
    "end": "612720"
  },
  {
    "text": "don't change per spam if you've got a service that's somehow transitioning between regions between",
    "start": "612720",
    "end": "618540"
  },
  {
    "text": "requests and literally inside of your process that you've got a request that comes in",
    "start": "618540",
    "end": "624300"
  },
  {
    "text": "and it goes I don't know how you're doing it let's have a chat but these are things that wouldn't change based on the",
    "start": "624300",
    "end": "630120"
  },
  {
    "text": "process but they're useful things to have the importance of using tracing is",
    "start": "630120",
    "end": "637680"
  },
  {
    "text": "providing more and more context because the more contacts you have for every span",
    "start": "637680",
    "end": "642899"
  },
  {
    "text": "the more insights you can gain from why things go wrong why things go right",
    "start": "642899",
    "end": "649040"
  },
  {
    "text": "so we can add the custom resource attributes like that it's pretty simple just a key value list so you could at",
    "start": "650279",
    "end": "658200"
  },
  {
    "text": "the start of your application go and grab the environment variables call out to a metadata endpoint grab all that",
    "start": "658200",
    "end": "664980"
  },
  {
    "text": "data add as many attributes as you want onto there and it will be stamped on every single span that makes it outside",
    "start": "664980",
    "end": "671279"
  },
  {
    "text": "of your application Okay so we've got the startup done",
    "start": "671279",
    "end": "676380"
  },
  {
    "text": "we'll start with metrics because we're going to touch on that just a little bit",
    "start": "676380",
    "end": "681500"
  },
  {
    "text": "so metrics are an interesting Beast there are very different types of",
    "start": "681899",
    "end": "687000"
  },
  {
    "text": "metrics and there's a lot of math involved um I don't really understand how most of",
    "start": "687000",
    "end": "692459"
  },
  {
    "text": "the math works I don't think many people do they just add them like oh it's a histogram with this all right great",
    "start": "692459",
    "end": "698760"
  },
  {
    "text": "um but we Define them in Statics you don't have to use Statics",
    "start": "698760",
    "end": "703860"
  },
  {
    "text": "but they are useful to be done that way and I'll come across the difference between dependency injection versus",
    "start": "703860",
    "end": "709940"
  },
  {
    "text": "using Statics for activity sources and metrics",
    "start": "709940",
    "end": "715740"
  },
  {
    "text": "but then what we've got to do is at the bottom you can see where we've done diagnosticconfig.meter.name",
    "start": "715740",
    "end": "722579"
  },
  {
    "text": "so we've defined a meter with a name this one here is called our practical",
    "start": "723000",
    "end": "728100"
  },
  {
    "text": "otel BFF that means back back end for front end not my best",
    "start": "728100",
    "end": "734279"
  },
  {
    "text": "friend um we're then using that as the name of the meter and then we're going to listen to that",
    "start": "734279",
    "end": "740760"
  },
  {
    "text": "meter inside of our Builder",
    "start": "740760",
    "end": "745880"
  },
  {
    "text": "that's as simple as setting up metrics is what you can then do is anywhere in your",
    "start": "746519",
    "end": "752579"
  },
  {
    "text": "application as especially if you've done this as a static you can just hit record all over the place I would tell in the background is going",
    "start": "752579",
    "end": "758940"
  },
  {
    "text": "to do all of the things like the intervals in which it's going to then compact this information and send it",
    "start": "758940",
    "end": "764220"
  },
  {
    "text": "over it's going to do all of that for you you don't need to think about it",
    "start": "764220",
    "end": "769220"
  },
  {
    "text": "now this code here because this is using metering.net there is no dependency on open Telemetry for that code",
    "start": "769320",
    "end": "777060"
  },
  {
    "text": "the only dependency that you've got is a dependency on the system.diagnostics",
    "start": "777060",
    "end": "782100"
  },
  {
    "text": "library which is really cool when you're writing libraries because you don't need to depend on open",
    "start": "782100",
    "end": "787860"
  },
  {
    "text": "telemetry",
    "start": "787860",
    "end": "790459"
  },
  {
    "text": "that's as much as I'm going to go into around metrics they are a different Beast I don't particularly think they're",
    "start": "793139",
    "end": "799920"
  },
  {
    "text": "as useful when we get to using tracing but you can use them you can use them",
    "start": "799920",
    "end": "805200"
  },
  {
    "text": "for application metrics and when we talk about the instrumentation libraries a lot of the instrumentation libraries will also produce metrics as well so you",
    "start": "805200",
    "end": "812820"
  },
  {
    "text": "can follow the same approach for asp.net core metrics or runtime metrics all of those kind of things",
    "start": "812820",
    "end": "819720"
  },
  {
    "text": "so instrumentation libraries these are provided by open Telemetry sometimes by",
    "start": "819720",
    "end": "825839"
  },
  {
    "text": "vendors sometimes by the open source libraries that do things like redis or",
    "start": "825839",
    "end": "831360"
  },
  {
    "text": "there's some for um the hot chocolate stuff graphql that they provide instrumentation libraries",
    "start": "831360",
    "end": "837300"
  },
  {
    "text": "which provide an opinionated way to monitor their particular libraries and all it does is really set up some things",
    "start": "837300",
    "end": "843720"
  },
  {
    "text": "inside of open Telemetry to say go and listen to this thing",
    "start": "843720",
    "end": "848720"
  },
  {
    "text": "they're always language and SDK SDK specific because maybe there's a redisone for net but not ready Swan for",
    "start": "849000",
    "end": "856620"
  },
  {
    "text": "um something like go I don't know because they're all built by the individual community so don't expect to",
    "start": "856620",
    "end": "862139"
  },
  {
    "text": "move between two languages and expect all of those things to just work exactly the same what you can expect is the",
    "start": "862139",
    "end": "869100"
  },
  {
    "text": "attributes to have the same names when they're outpour again these are a lot of things coming",
    "start": "869100",
    "end": "874620"
  },
  {
    "text": "from the semantic conventions that open Telemetry maintain so in.net the most common would be SQL",
    "start": "874620",
    "end": "883260"
  },
  {
    "text": "client HTTP client grpc http none of these you need to instrument",
    "start": "883260",
    "end": "888660"
  },
  {
    "text": "yourself you can add a couple lines of code and they'll get there",
    "start": "888660",
    "end": "894240"
  },
  {
    "text": "now it's important to mention that these are only your step one they'll get you certain way there",
    "start": "894240",
    "end": "899820"
  },
  {
    "text": "these are what are going to replicate what you might have had with an APM before they're opinionated they treat every",
    "start": "899820",
    "end": "906779"
  },
  {
    "text": "single application the same they don't know about your context they're not going to give you anything special",
    "start": "906779",
    "end": "913019"
  },
  {
    "text": "and your application is different to everyone else's so these will get you so far but it's",
    "start": "913019",
    "end": "918540"
  },
  {
    "text": "important to go that step further",
    "start": "918540",
    "end": "922040"
  },
  {
    "text": "so for Microsoft for most applications in Microsoft you're probably using some",
    "start": "924839",
    "end": "930540"
  },
  {
    "text": "kind of Ms SQL or MPG or something like that asp.net core and",
    "start": "930540",
    "end": "936300"
  },
  {
    "text": "you're probably making some HTTP client requests those three lines in the middle there add asp.net core instrumentation ad SQL",
    "start": "936300",
    "end": "942660"
  },
  {
    "text": "client add HTTP client that's all you need that will get you a span for H um HTTP",
    "start": "942660",
    "end": "947940"
  },
  {
    "text": "request that comes into your application another span for every outbound HTTP request you get",
    "start": "947940",
    "end": "953820"
  },
  {
    "text": "another span for every database call you make and all of those will have standard attributes on them like the root that",
    "start": "953820",
    "end": "960660"
  },
  {
    "text": "came in they'll have the DB statement that came in that you used against the database",
    "start": "960660",
    "end": "966720"
  },
  {
    "text": "and all of those are defined by the semantic conventions if you keep using these for the semantic conventions",
    "start": "966720",
    "end": "972540"
  },
  {
    "text": "what it means is your back ends can make assumptions it can make an assumption that DB dot statement will not contain",
    "start": "972540",
    "end": "979260"
  },
  {
    "text": "pii for instance because it shouldn't it's in the specification",
    "start": "979260",
    "end": "985500"
  },
  {
    "text": "it will if you actually write a DB dot command these are all different attributes so if you use these out the",
    "start": "985500",
    "end": "992279"
  },
  {
    "text": "box you can feel safe that the vendors will know what to do with it when I say vendors that might be open source Like",
    "start": "992279",
    "end": "998279"
  },
  {
    "text": "Jaeger or it could be something else Entity framework core does seem to be",
    "start": "998279",
    "end": "1005540"
  },
  {
    "text": "the the new hotness now with all the performance improvements so if you're",
    "start": "1005540",
    "end": "1010759"
  },
  {
    "text": "using an Entity framework call you'll notice that this is pre-release if you notice on the one before all of those are pre-release as well",
    "start": "1010759",
    "end": "1017660"
  },
  {
    "text": "and this is because the semantic conventions the names those standards those that haven't been ratified yet",
    "start": "1017660",
    "end": "1024020"
  },
  {
    "text": "they're very very close October",
    "start": "1024020",
    "end": "1029079"
  },
  {
    "text": "um in October with any luck the HTTP and asp.net core ones will become stable",
    "start": "1029540",
    "end": "1035480"
  },
  {
    "text": "because the standards will be stable um HT the SQL client stuff is probably",
    "start": "1035480",
    "end": "1041480"
  },
  {
    "text": "going to take a bit longer but um yes they they are coming but until those become stable we can't make them",
    "start": "1041480",
    "end": "1047178"
  },
  {
    "text": "release packages unfortunately um NC framework core",
    "start": "1047179",
    "end": "1052340"
  },
  {
    "text": "um again is the same mpgsql you'll notice the difference in how they're namespaced mpgsql is",
    "start": "1052340",
    "end": "1060799"
  },
  {
    "text": "provided by mpgsql it's under their namespace not under the open Telemetry namespace they've marked it a stable",
    "start": "1060799",
    "end": "1067820"
  },
  {
    "text": "I don't think they should because the names might change but that's entirely up to them you'll",
    "start": "1067820",
    "end": "1073820"
  },
  {
    "text": "find anything under the open Telemetry namespace if it doesn't have pre-release on it we know it's stable we're not",
    "start": "1073820",
    "end": "1079220"
  },
  {
    "text": "going to change things um redis is the same",
    "start": "1079220",
    "end": "1084740"
  },
  {
    "text": "and the setup though is slightly different because to do redis we actually need access to the connection",
    "start": "1084740",
    "end": "1090020"
  },
  {
    "text": "multiplexer so on that one you've actually got to set it up slightly differently",
    "start": "1090020",
    "end": "1095299"
  },
  {
    "text": "which is using something called the configure method so configure open Telemetry provides you access as a for a",
    "start": "1095299",
    "end": "1101780"
  },
  {
    "text": "delegate to be able to have access to the service provider and the Tracer provider Builder which means it doesn't",
    "start": "1101780",
    "end": "1107059"
  },
  {
    "text": "run until the service provider Builder is actually being started up so you can have access to go and get",
    "start": "1107059",
    "end": "1113240"
  },
  {
    "text": "um some services and use those in your stuff you can build your own like this just for redis that's how that one works",
    "start": "1113240",
    "end": "1121299"
  },
  {
    "text": "okay manual this is where the interesting stuff is",
    "start": "1122660",
    "end": "1127940"
  },
  {
    "text": "this is where your interest in context is going to end up in your Telemetry",
    "start": "1127940",
    "end": "1133160"
  },
  {
    "text": "because you know that algorithm you know that bit in your code that's the crown jewels",
    "start": "1133160",
    "end": "1138799"
  },
  {
    "text": "that changes its Performance Based on different things no Auto instrumentation library is going",
    "start": "1138799",
    "end": "1144140"
  },
  {
    "text": "to get that for you so we talked a little bit about what spam was",
    "start": "1144140",
    "end": "1151460"
  },
  {
    "text": "and we need to talk a little bit about spanning activity because net has had spans",
    "start": "1151460",
    "end": "1157400"
  },
  {
    "text": "for many years we've had activity and activity source so when open Telemetry Define the term",
    "start": "1157400",
    "end": "1163400"
  },
  {
    "text": "span and start using the term span I don't know whether spanning.net came first",
    "start": "1163400",
    "end": "1168640"
  },
  {
    "text": "but we didn't want to change it so we're using the term activity there is a shim",
    "start": "1168640",
    "end": "1174620"
  },
  {
    "text": "that you can use to use the word span I don't recommend it if you're a dotnet developer just use activity and activity",
    "start": "1174620",
    "end": "1181100"
  },
  {
    "text": "source and if you're writing a library definitely don't use that only use activity Source because it means you",
    "start": "1181100",
    "end": "1186500"
  },
  {
    "text": "don't need to bring in a dependency so when I use the word span an actor activity interchangeably in this talk",
    "start": "1186500",
    "end": "1193460"
  },
  {
    "text": "I'm always talking about an open Telemetry span or an activity from activity source",
    "start": "1193460",
    "end": "1198980"
  },
  {
    "text": "so a spanner in activity is about time-bound analysis it's about I start something and I",
    "start": "1198980",
    "end": "1205160"
  },
  {
    "text": "finish it I would imagine that everybody in the room has tried to do a log entry and",
    "start": "1205160",
    "end": "1210320"
  },
  {
    "text": "they've started they've started a stopwatch ended a stopwatch taking the time from",
    "start": "1210320",
    "end": "1215480"
  },
  {
    "text": "the stopwatch added it into a log entry and said duration",
    "start": "1215480",
    "end": "1221020"
  },
  {
    "text": "spans get that for free because we wrap them in and I disposable that's what",
    "start": "1221179",
    "end": "1226460"
  },
  {
    "text": "spans are all about they also take in inbuilt context",
    "start": "1226460",
    "end": "1231980"
  },
  {
    "text": "so they take in well where did this come from what was the TR the initiating Trace context",
    "start": "1231980",
    "end": "1237860"
  },
  {
    "text": "so it'll bring in correlation IDs it'll bring in their parents",
    "start": "1237860",
    "end": "1243340"
  },
  {
    "text": "bringing in their parents is what gives us causality that allows us to see that this thing",
    "start": "1243799",
    "end": "1249559"
  },
  {
    "text": "was caused by this other thing and when you look at a trace waterfall you can see which things run in parallel",
    "start": "1249559",
    "end": "1257059"
  },
  {
    "text": "you can see which things were started by other things you can see which service calls and other service",
    "start": "1257059",
    "end": "1262700"
  },
  {
    "text": "which is really interesting when you um first start doing tracing and you implement it across systems and you get",
    "start": "1262700",
    "end": "1269120"
  },
  {
    "text": "customers that are then looking at the system and going your system's wrong like what do you mean it's like well it",
    "start": "1269120",
    "end": "1275000"
  },
  {
    "text": "says this service calls this service I'm like I'm the system just represents the data",
    "start": "1275000",
    "end": "1280520"
  },
  {
    "text": "it's like yeah but our system doesn't call that system alone pretty sure it does data",
    "start": "1280520",
    "end": "1285799"
  },
  {
    "text": "and then two weeks later they come back and say yeah you're right this is how you find those hidden things",
    "start": "1285799",
    "end": "1291320"
  },
  {
    "text": "in your systems so correlation being quite important um",
    "start": "1291320",
    "end": "1299500"
  },
  {
    "text": "now the other thing is it's a scope of a piece works we talk about time-bound analysis but it's also about scoping this particular piece of work",
    "start": "1299900",
    "end": "1306799"
  },
  {
    "text": "and saying that this algorithm was the thing we ran these were the inputs to the algorithm these were the outputs to the algorithm this is when it started",
    "start": "1306799",
    "end": "1312380"
  },
  {
    "text": "this when it finished so it's about that little bit of scope which means that if you're measuring",
    "start": "1312380",
    "end": "1319659"
  },
  {
    "text": "algorithms being my favorite example because they're the ones that change time",
    "start": "1319659",
    "end": "1326120"
  },
  {
    "text": "that's really really interesting but yeah it has everything that log has",
    "start": "1326120",
    "end": "1331760"
  },
  {
    "text": "and more by default so how do we manually create spans now I",
    "start": "1331760",
    "end": "1337820"
  },
  {
    "text": "wrote this little bit of code um I firmly believe this is how a lot of retailers do mark up on their products",
    "start": "1337820",
    "end": "1344480"
  },
  {
    "text": "just run a random and add some markup to it um there's no instrumentation in here at",
    "start": "1344480",
    "end": "1351020"
  },
  {
    "text": "all but imagine that what we're doing here is that markup can change the logic can change the time it takes can change",
    "start": "1351020",
    "end": "1358460"
  },
  {
    "text": "really good for a spam so first up we create an activity source",
    "start": "1358460",
    "end": "1364760"
  },
  {
    "text": "activity sources are keyed on name okay so the name that you give an",
    "start": "1364760",
    "end": "1370340"
  },
  {
    "text": "activity size you can create five activity sources with the same name and they will not be treated differently in",
    "start": "1370340",
    "end": "1375559"
  },
  {
    "text": "open telemetry or in.net for that matter because when we listen to an activity we",
    "start": "1375559",
    "end": "1380659"
  },
  {
    "text": "listen by name we don't listen by object so",
    "start": "1380659",
    "end": "1385700"
  },
  {
    "text": "that's the reason why I prefer to use the static method because if I Define that static I can",
    "start": "1385700",
    "end": "1391340"
  },
  {
    "text": "access it anywhere and just create activities off the back of it it makes my code quite simple",
    "start": "1391340",
    "end": "1396679"
  },
  {
    "text": "because I just access the Diagnostics config in the source and just start an activity",
    "start": "1396679",
    "end": "1402880"
  },
  {
    "text": "now the other way of doing it is using dependency injection so you can develop a class now it's",
    "start": "1403400",
    "end": "1408860"
  },
  {
    "text": "important that you don't try and inject activity Source into your class",
    "start": "1408860",
    "end": "1415580"
  },
  {
    "text": "always create yourself a custom class that has your activity Source in it",
    "start": "1415580",
    "end": "1420860"
  },
  {
    "text": "you don't necessarily need more than one activity source if you want to then great but you don't need more than one",
    "start": "1420860",
    "end": "1427280"
  },
  {
    "text": "activity Source you just need one in your application with a name if you do that then obviously you can",
    "start": "1427280",
    "end": "1433400"
  },
  {
    "text": "inject that into your classes now there is an idea that if you do this it makes it better for unit testing it",
    "start": "1433400",
    "end": "1440659"
  },
  {
    "text": "really doesn't because the activity sources the activity source so you're not getting anything better",
    "start": "1440659",
    "end": "1446419"
  },
  {
    "text": "from doing this other than dogmatically applying different approaches of let's dependency",
    "start": "1446419",
    "end": "1453380"
  },
  {
    "text": "inject everything and please please dear God don't do I I",
    "start": "1453380",
    "end": "1458780"
  },
  {
    "text": "diagnostic config as well and inject the interface so that you",
    "start": "1458780",
    "end": "1463600"
  },
  {
    "text": "makes me sad okay so we can now manually create our spam",
    "start": "1463820",
    "end": "1471320"
  },
  {
    "text": "so this is the same class but outside of our our statement our for Loop we're",
    "start": "1471320",
    "end": "1477140"
  },
  {
    "text": "creating a spam we're creating an activity and then on that activity we're adding context to it",
    "start": "1477140",
    "end": "1484520"
  },
  {
    "text": "we're adding a product ID we're adding a product price and the original price and",
    "start": "1484520",
    "end": "1489980"
  },
  {
    "text": "the markup three different properties giving them names",
    "start": "1489980",
    "end": "1495220"
  },
  {
    "text": "however we're just using arbitrary strings at this point",
    "start": "1495620",
    "end": "1501080"
  },
  {
    "text": "that I wouldn't recommend the reason I wouldn't recommend it is because having",
    "start": "1501080",
    "end": "1506780"
  },
  {
    "text": "the same name in your back end across multiple different things having that same common",
    "start": "1506780",
    "end": "1513200"
  },
  {
    "text": "language in your back end observability solution means that you can make assumptions",
    "start": "1513200",
    "end": "1520460"
  },
  {
    "text": "so go and create yourself a constants class which has all of those names in it",
    "start": "1520460",
    "end": "1526039"
  },
  {
    "text": "create multiple constants classes to give them context because what that means is you can then",
    "start": "1526039",
    "end": "1533120"
  },
  {
    "text": "go into your application and you can see all of those names now the other thing you can do is you",
    "start": "1533120",
    "end": "1539299"
  },
  {
    "text": "can use refactoring techniques to be able to say go and find me everywhere that this particular property",
    "start": "1539299",
    "end": "1544520"
  },
  {
    "text": "is used it also means that you end up with a nice little dictionary",
    "start": "1544520",
    "end": "1550520"
  },
  {
    "text": "of all of these things you can add some XML dock to these to say why they're",
    "start": "1550520",
    "end": "1555559"
  },
  {
    "text": "there it means inside of your code you've got a class like this",
    "start": "1555559",
    "end": "1561320"
  },
  {
    "text": "now if you are a cross-team company you've got five or six different teams you're writing micro services or",
    "start": "1561320",
    "end": "1568460"
  },
  {
    "text": "distributed monoliths or distribute monolith and calling the microservices whichever you're doing it",
    "start": "1568460",
    "end": "1574640"
  },
  {
    "text": "doesn't matter if you're doing that kind of an approach build yourself a shared library for",
    "start": "1574640",
    "end": "1581840"
  },
  {
    "text": "cross-cutting concerns so if product is a cross-cutting concern across those micro services",
    "start": "1581840",
    "end": "1588679"
  },
  {
    "text": "put it into a shared Library that all it is is a shared library of constants",
    "start": "1588679",
    "end": "1593840"
  },
  {
    "text": "which means that everybody starts using the same names which means that when you start querying",
    "start": "1593840",
    "end": "1599299"
  },
  {
    "text": "your data across multiple services in your observability back end you can start joining up product IDs",
    "start": "1599299",
    "end": "1606740"
  },
  {
    "text": "you say is it always a particular product that's causing its performance problems is it always a particular customer",
    "start": "1606740",
    "end": "1612200"
  },
  {
    "text": "that's causing us performance problems it is always that one customer isn't it we all know who they are as well",
    "start": "1612200",
    "end": "1619539"
  },
  {
    "text": "okay now you you can look at that and say you know this looks a little bit cleaner now because I can see what",
    "start": "1619820",
    "end": "1625940"
  },
  {
    "text": "they've got as names I can also refactor the names easier",
    "start": "1625940",
    "end": "1631820"
  },
  {
    "text": "so I can refactor those variable names under the HUD I can call them something different I",
    "start": "1631820",
    "end": "1637340"
  },
  {
    "text": "can call them something really descriptive there isn't products.cattery dot ID",
    "start": "1637340",
    "end": "1644379"
  },
  {
    "text": "now the other thing I hate is when people create wrappers",
    "start": "1648080",
    "end": "1653500"
  },
  {
    "text": "so I create a wrapper around my activity source and then I create a wrapper",
    "start": "1654200",
    "end": "1660080"
  },
  {
    "text": "around the wrapper that I've just created for the activity source and then the other team that implements that creates a wrapper around that wrapper to",
    "start": "1660080",
    "end": "1665900"
  },
  {
    "text": "wrap the other thing that wraps the thing you don't need to",
    "start": "1665900",
    "end": "1671000"
  },
  {
    "text": "use extension methods so write yourself some nice little extension methods to",
    "start": "1671000",
    "end": "1676880"
  },
  {
    "text": "make things easier for your teams instead of saying well we have a particular way of implementing Telemetry",
    "start": "1676880",
    "end": "1682400"
  },
  {
    "text": "so what we're going to do is we're going to create our my company activity or my",
    "start": "1682400",
    "end": "1687980"
  },
  {
    "text": "company span and my company span has these methods on it you don't need it",
    "start": "1687980",
    "end": "1694760"
  },
  {
    "text": "I would advise using out of the box activity and adding extension methods that do common things that you want",
    "start": "1694760",
    "end": "1700760"
  },
  {
    "text": "people to do in a particular way maybe you've got",
    "start": "1700760",
    "end": "1705980"
  },
  {
    "text": "um enrich activity with product all right an extension method for activity that takes your product class",
    "start": "1705980",
    "end": "1713720"
  },
  {
    "text": "and explodes that out and adds its attributes onto your spam do it that way",
    "start": "1713720",
    "end": "1719900"
  },
  {
    "text": "don't try and write wrapper classes",
    "start": "1719900",
    "end": "1723760"
  },
  {
    "text": "okay so this is in the wrong order so activity versus activity current",
    "start": "1725539",
    "end": "1733880"
  },
  {
    "text": "so because the way that Activity Works when you do these two methods they are",
    "start": "1733880",
    "end": "1739580"
  },
  {
    "text": "subtly different see if this bit works this bit isn't working now that's why",
    "start": "1739580",
    "end": "1746419"
  },
  {
    "text": "because it's that one there we go right so that there",
    "start": "1746419",
    "end": "1752480"
  },
  {
    "text": "says start activity that there says create activity",
    "start": "1752480",
    "end": "1758500"
  },
  {
    "text": "there are two different methods that we can use on activity to create one now if we use start",
    "start": "1758659",
    "end": "1764419"
  },
  {
    "text": "activity it first creates an activity and then it takes that activity and makes it the",
    "start": "1764419",
    "end": "1770899"
  },
  {
    "text": "current activity that is running right now which means that everything else that happens is a descendant from that",
    "start": "1770899",
    "end": "1777559"
  },
  {
    "text": "activity if I use create activity all it does is create it",
    "start": "1777559",
    "end": "1784100"
  },
  {
    "text": "now in the first example I could use activity.current and that would work",
    "start": "1784100",
    "end": "1789200"
  },
  {
    "text": "and it did in the example that I didn't save so if you imagine that top example has activity.current",
    "start": "1789200",
    "end": "1795919"
  },
  {
    "text": "that will add products and category ID to that calculate product markup name",
    "start": "1795919",
    "end": "1802880"
  },
  {
    "text": "the the span that's great for that it will add them to it and that'll be fine however in the second example",
    "start": "1802880",
    "end": "1810380"
  },
  {
    "text": "it's going to add it to the parent of that span not the span that you think it's going to add it to",
    "start": "1810380",
    "end": "1816940"
  },
  {
    "text": "99 times out of 100 you are using start activity",
    "start": "1817039",
    "end": "1822278"
  },
  {
    "text": "create activity is really useful in certain contexts like async actions that kind of stuff",
    "start": "1822919",
    "end": "1828140"
  },
  {
    "text": "but you don't need to do that if you're using star activity everything will just work it'll be magical",
    "start": "1828140",
    "end": "1835659"
  },
  {
    "text": "but create activity is there just know that there's a difference between the two and if you've got an idea around",
    "start": "1835700",
    "end": "1842600"
  },
  {
    "text": "something that doesn't need to be the current activity that exists go research it and find out whether it meets your",
    "start": "1842600",
    "end": "1848720"
  },
  {
    "text": "needs Now typically.current is really good",
    "start": "1848720",
    "end": "1853880"
  },
  {
    "text": "for adding context because when we use the asp.net core",
    "start": "1853880",
    "end": "1859700"
  },
  {
    "text": "instrumentation Library what we end up with is",
    "start": "1859700",
    "end": "1866000"
  },
  {
    "text": "some default parameters we don't get the query strings for instance as individual parameters we get a URL that's about yay",
    "start": "1866000",
    "end": "1873140"
  },
  {
    "text": "long but what if the product ID was actually really interesting to you",
    "start": "1873140",
    "end": "1880279"
  },
  {
    "text": "now you don't have access to the span that asp.net core creates so you'd have",
    "start": "1880279",
    "end": "1885440"
  },
  {
    "text": "to create your own spam with activity.current you can access the",
    "start": "1885440",
    "end": "1891020"
  },
  {
    "text": "current activity that is active and then you can use that to append",
    "start": "1891020",
    "end": "1897559"
  },
  {
    "text": "different attributes to it like your product ID in this example because it's part of what came in on the URL",
    "start": "1897559",
    "end": "1905500"
  },
  {
    "text": "okay who",
    "start": "1906380",
    "end": "1911440"
  },
  {
    "text": "so span events",
    "start": "1911899",
    "end": "1915399"
  },
  {
    "text": "spun events are a point in time sounds a bit like a log really doesn't it",
    "start": "1921320",
    "end": "1928059"
  },
  {
    "text": "it's a already got context because it's part of a spam",
    "start": "1929240",
    "end": "1934279"
  },
  {
    "text": "so it's a point in time thing that happens inside of a spam useful for things like exceptions",
    "start": "1934279",
    "end": "1939679"
  },
  {
    "text": "because exceptions happen inside of a span means it's attached to the span",
    "start": "1939679",
    "end": "1948340"
  },
  {
    "text": "basically a structured log with us ban idea and Trace ID",
    "start": "1948799",
    "end": "1953899"
  },
  {
    "text": "it's not exactly that complicated",
    "start": "1953899",
    "end": "1957640"
  },
  {
    "text": "so a span event has similar properties that we were talking about before",
    "start": "1961039",
    "end": "1966140"
  },
  {
    "text": "it's not going to have a parent span ID it's just going to have a spun ID because it happened in this particular",
    "start": "1966140",
    "end": "1971600"
  },
  {
    "text": "span it had this particular time stamp there's no duration on a spanner span event and that's how it differs",
    "start": "1971600",
    "end": "1979840"
  },
  {
    "text": "but basically it's just a log if you think of it like it's just a structured log that has those things on",
    "start": "1980539",
    "end": "1986779"
  },
  {
    "text": "it again why would I use logs well I've just add them to my spons instead as span events",
    "start": "1986779",
    "end": "1994419"
  },
  {
    "text": "so how do we add them so again we use an activity we're using activity.current here",
    "start": "1995360",
    "end": "2002880"
  },
  {
    "text": "to add an event with some tags in this particular example it's because the validation failed because we try to",
    "start": "2003039",
    "end": "2010299"
  },
  {
    "text": "add a product he didn't have a product name and we've added some error attributes that allow us to say inside",
    "start": "2010299",
    "end": "2015700"
  },
  {
    "text": "of our HTTP request at this point here it failed now you might that might be interesting",
    "start": "2015700",
    "end": "2021640"
  },
  {
    "text": "too you might want to set the parents banners failed as well",
    "start": "2021640",
    "end": "2026340"
  },
  {
    "text": "now you can do that when there's an exception there's some inbuilt classes on site and activity to do that",
    "start": "2026679",
    "end": "2032860"
  },
  {
    "text": "so you can set the status you can record the exception you can pass it in some data as well there are some helper",
    "start": "2032860",
    "end": "2037899"
  },
  {
    "text": "methods for these things",
    "start": "2037899",
    "end": "2041340"
  },
  {
    "text": "let's talk a little bit about span link it's another type of thing that we can do with spans",
    "start": "2045820",
    "end": "2053158"
  },
  {
    "text": "so a span link is a casual link versus a causal link",
    "start": "2053679",
    "end": "2060300"
  },
  {
    "text": "ABS yes I checked that about four times and I",
    "start": "2061300",
    "end": "2067300"
  },
  {
    "text": "still thought I got it wrong um however the idea is that a causal link says this thing calls that",
    "start": "2067300",
    "end": "2074440"
  },
  {
    "text": "thing a casual thing says this thing might these two things might be related",
    "start": "2074440",
    "end": "2081419"
  },
  {
    "text": "so there's not a dependency between these two it's not saying that this thing was",
    "start": "2081760",
    "end": "2086858"
  },
  {
    "text": "dependent on that thing happening just giving you an idea that these two things might be related",
    "start": "2086859",
    "end": "2092700"
  },
  {
    "text": "so this is how we transition that Trace context between two different systems and then use that Trace context to link",
    "start": "2093940",
    "end": "2101200"
  },
  {
    "text": "other spans to it that might be across processed boundaries like a HTTP request or a message",
    "start": "2101200",
    "end": "2107380"
  },
  {
    "text": "or it might be as simple as just inside of the same process I've started a new process and I want to be able to pass",
    "start": "2107380",
    "end": "2114160"
  },
  {
    "text": "over some information to it and use that as a new Trace",
    "start": "2114160",
    "end": "2119320"
  },
  {
    "text": "that could be linked it is used most of the time as an",
    "start": "2119320",
    "end": "2124359"
  },
  {
    "text": "alternative to parent and child some of the big examples of that is when you've got large scale systems that have",
    "start": "2124359",
    "end": "2130720"
  },
  {
    "text": "a unit of work if you like that spans multiple days and multiple services",
    "start": "2130720",
    "end": "2137380"
  },
  {
    "text": "and ultimately that could be a 72-hour span that you see coming",
    "start": "2137380",
    "end": "2143320"
  },
  {
    "text": "through if you're using messaging systems and you pass something off for something to pick up the next day you",
    "start": "2143320",
    "end": "2149079"
  },
  {
    "text": "might want to know what the originating trace of that was take banking for instance",
    "start": "2149079",
    "end": "2154540"
  },
  {
    "text": "your transaction that somebody's done on their card well that's a Trace",
    "start": "2154540",
    "end": "2159640"
  },
  {
    "text": "because that's a universe that's something that's happened however when I charge interest on that",
    "start": "2159640",
    "end": "2165880"
  },
  {
    "text": "transaction that happens maybe a day later now I may not want that to be part of",
    "start": "2165880",
    "end": "2171400"
  },
  {
    "text": "the trace because it's not part of the action that's happening but I might want to be able to get back",
    "start": "2171400",
    "end": "2176440"
  },
  {
    "text": "and say well where what caused this particular transaction to happen I might",
    "start": "2176440",
    "end": "2181720"
  },
  {
    "text": "want to be able to link back to the original Trace so here's an example of doing that you",
    "start": "2181720",
    "end": "2188800"
  },
  {
    "text": "can see on the top there what we've actually done is taken out the current context",
    "start": "2188800",
    "end": "2194099"
  },
  {
    "text": "and then we've used that context to start a new activity in a new process",
    "start": "2194500",
    "end": "2200500"
  },
  {
    "text": "but we've not allowed it so you can see where it says new activity context so activity.kind",
    "start": "2200500",
    "end": "2207220"
  },
  {
    "text": "internal activity.com internal new activity",
    "start": "2207220",
    "end": "2213160"
  },
  {
    "text": "context new activity context allows us to say create a new span but ignore all parents",
    "start": "2213160",
    "end": "2221140"
  },
  {
    "text": "this one is going to be its own pair it's going to be a new root span however",
    "start": "2221140",
    "end": "2226660"
  },
  {
    "text": "I want you to link it back to that other span you can have as many links as you want",
    "start": "2226660",
    "end": "2233859"
  },
  {
    "text": "you can say this particular thing has five or six different links it's really useful for doing things like",
    "start": "2233859",
    "end": "2239020"
  },
  {
    "text": "batch processing you might want to link it back to the original span plus also",
    "start": "2239020",
    "end": "2244540"
  },
  {
    "text": "linking back to the batch execution as well so you can do multiple links",
    "start": "2244540",
    "end": "2252300"
  },
  {
    "text": "okay still with me",
    "start": "2254680",
    "end": "2259440"
  },
  {
    "text": "makes one of us um",
    "start": "2259960",
    "end": "2263940"
  },
  {
    "text": "so processors so processors are part of open telemetry",
    "start": "2265900",
    "end": "2271420"
  },
  {
    "text": "the part of the open Telemetry pipeline inside of what you run inside your application",
    "start": "2271420",
    "end": "2277780"
  },
  {
    "text": "they run whenever we create or start a span they also run at the end of every",
    "start": "2277780",
    "end": "2285339"
  },
  {
    "text": "spam they do the same on logs as well there's a processor for logs",
    "start": "2285339",
    "end": "2292859"
  },
  {
    "text": "it's going to allow you to do some interesting context so you can run that at the end of every span so as it's as",
    "start": "2294280",
    "end": "2300820"
  },
  {
    "text": "it fails and goes to the end go great I want to grab some additional data and add it to it or I want to computate",
    "start": "2300820",
    "end": "2306700"
  },
  {
    "text": "something and say oh well you know maybe I want to add this to that and then add that as an attribute maybe I want to",
    "start": "2306700",
    "end": "2311859"
  },
  {
    "text": "bring in the current weather I don't know so basically it's your middleware",
    "start": "2311859",
    "end": "2318640"
  },
  {
    "text": "pretty much the same as a middleware for uh for asp.net core so they look a little bit like this",
    "start": "2318640",
    "end": "2326760"
  },
  {
    "text": "these shouldn't be unfamiliar to people the the way that these work it's just inheriting from a base",
    "start": "2326920",
    "end": "2334380"
  },
  {
    "text": "so what we can do this particular one that I wrote allows us to add the tenant ID",
    "start": "2335619",
    "end": "2341680"
  },
  {
    "text": "so the tenant ID coming in on a header we can run that at the end or the start of every request we can access the HTTP",
    "start": "2341680",
    "end": "2349359"
  },
  {
    "text": "context accessor grab the tenant ID out and drop it in",
    "start": "2349359",
    "end": "2354579"
  },
  {
    "text": "maybe this isn't the best example of it but you can start to see some examples of why that might be interesting",
    "start": "2354579",
    "end": "2361060"
  },
  {
    "text": "maybe it's bringing something in from some internal context I don't know now the important thing to know",
    "start": "2361060",
    "end": "2368500"
  },
  {
    "text": "is that that will affect the inline performance of your application",
    "start": "2368500",
    "end": "2375579"
  },
  {
    "text": "because when you dispose of an activity you have to wait for the processor to finish",
    "start": "2375579",
    "end": "2382240"
  },
  {
    "text": "so if that's going to call out to a third-party service you're going to have a problem",
    "start": "2382240",
    "end": "2388260"
  },
  {
    "text": "so you've got to be really careful about what ends up in there",
    "start": "2389320",
    "end": "2394079"
  },
  {
    "text": "performance is a really big thing in open Telemetry people have said well you know observing my system doesn't that",
    "start": "2395140",
    "end": "2401619"
  },
  {
    "text": "make it slower yes it does by 200 nanoseconds per activity now if",
    "start": "2401619",
    "end": "2408400"
  },
  {
    "text": "you're optimizing on that scale I don't think you should be using.net just putting it out there",
    "start": "2408400",
    "end": "2415359"
  },
  {
    "text": "if you're going to put something in here that's going to take two three seconds to process yes you are going to have",
    "start": "2415359",
    "end": "2421119"
  },
  {
    "text": "problems because every single activity that's created in your system that's being monitored",
    "start": "2421119",
    "end": "2427359"
  },
  {
    "text": "so every asp.net core one every database one every redis one every single",
    "start": "2427359",
    "end": "2432820"
  },
  {
    "text": "activity that's created is going to run that code and you've got to decide whether that's the right place to put that",
    "start": "2432820",
    "end": "2439420"
  },
  {
    "text": "it might be it might not this is why there's a contrast between this and what we talked about the start",
    "start": "2439420",
    "end": "2445720"
  },
  {
    "text": "which is the resource level attributes because of its static data use the resource level attributes because those",
    "start": "2445720",
    "end": "2452380"
  },
  {
    "text": "don't add that performance impact so once we've done our processor we use",
    "start": "2452380",
    "end": "2458500"
  },
  {
    "text": "again that configure open Telemetry method because we've got some dependency injection we want to do with the ihtzp",
    "start": "2458500",
    "end": "2464980"
  },
  {
    "text": "context accessor we can then add the processor like that it's not complicated",
    "start": "2464980",
    "end": "2470380"
  },
  {
    "text": "stuff so let's talk about my favorite topic",
    "start": "2470380",
    "end": "2475540"
  },
  {
    "text": "which is baggage it is the foot gun you never wanted it is lethal",
    "start": "2475540",
    "end": "2481180"
  },
  {
    "text": "it should be removed but it is there please use with caution is basically the",
    "start": "2481180",
    "end": "2487359"
  },
  {
    "text": "message I wrote an entire blog post on why it is evil so baggage was built as part of the w3c",
    "start": "2487359",
    "end": "2495280"
  },
  {
    "text": "craze context to prevent to provide context between your different applications which allows you to",
    "start": "2495280",
    "end": "2501880"
  },
  {
    "text": "influence the Telemetry that's created it is not",
    "start": "2501880",
    "end": "2508180"
  },
  {
    "text": "an attribute that will appear on every span from there on out",
    "start": "2508180",
    "end": "2513640"
  },
  {
    "text": "you can make it do that but that is not what baggage is baggage allows you to transmit some",
    "start": "2513640",
    "end": "2520599"
  },
  {
    "text": "context between your services and then in that descendant Services service use that",
    "start": "2520599",
    "end": "2526599"
  },
  {
    "text": "context to influence what will happen in telemetry",
    "start": "2526599",
    "end": "2531720"
  },
  {
    "text": "and w3c are the people to blame well the people who submitted as a recommendation",
    "start": "2533380",
    "end": "2540359"
  },
  {
    "text": "um so why is it dangerous if we add baggage",
    "start": "2540640",
    "end": "2546460"
  },
  {
    "text": "every external coal that we make from our application will include baggage and",
    "start": "2546460",
    "end": "2551680"
  },
  {
    "text": "our Trace context now if you can imagine what you might want to add onto baggage",
    "start": "2551680",
    "end": "2559300"
  },
  {
    "text": "or maybe you want to add the account ID so that the other services know what the account ID was from the originating",
    "start": "2559300",
    "end": "2565060"
  },
  {
    "text": "request you know when you make that call out to stripe",
    "start": "2565060",
    "end": "2570220"
  },
  {
    "text": "to do that yeah they're getting your account ID your internal ones you are leaking data at that point to your third",
    "start": "2570220",
    "end": "2577420"
  },
  {
    "text": "parties fun story a customer of ours honeycomb",
    "start": "2577420",
    "end": "2583540"
  },
  {
    "text": "um decided to put things like that on their um on their outbound didn't protect",
    "start": "2583540",
    "end": "2589240"
  },
  {
    "text": "their outbound calls from removing that out and what happened was they we started",
    "start": "2589240",
    "end": "2595480"
  },
  {
    "text": "getting all of their data on our API and we hadn't protected our",
    "start": "2595480",
    "end": "2600880"
  },
  {
    "text": "API from inbound baggage so all of our spans we're getting all",
    "start": "2600880",
    "end": "2605920"
  },
  {
    "text": "these account IDs that we didn't it's like who's put account ID on the spans we don't we don't have account IDs we",
    "start": "2605920",
    "end": "2612160"
  },
  {
    "text": "have API Keys that's what we have um and it took us ages to find out is this one in particular customer does it",
    "start": "2612160",
    "end": "2618220"
  },
  {
    "text": "it's the reason why there is a with public endpoint on the go sdks it only",
    "start": "2618220",
    "end": "2623319"
  },
  {
    "text": "exists on the go sdks because honeycomb built it to solve our problem but you can imagine if you're adding now",
    "start": "2623319",
    "end": "2630700"
  },
  {
    "text": "loads of context inside of your baggage every one of your external consumers is",
    "start": "2630700",
    "end": "2636099"
  },
  {
    "text": "getting that do you trust every one of your external consumers do you trust the developers",
    "start": "2636099",
    "end": "2642700"
  },
  {
    "text": "who work on your platform to know that if they add an external consumer they need to start thinking about stripping",
    "start": "2642700",
    "end": "2647920"
  },
  {
    "text": "headers",
    "start": "2647920",
    "end": "2650280"
  },
  {
    "text": "okay so now I've told you why not to use it I'll show you how to use it and the other thing by the way that I",
    "start": "2653560",
    "end": "2660339"
  },
  {
    "text": "hate about this is it's just a shrink and yes I have had somebody go well I need access to the person object in the",
    "start": "2660339",
    "end": "2667119"
  },
  {
    "text": "other thing I could choose baggage so they serialize the entire person object into a baggage attribute",
    "start": "2667119",
    "end": "2674319"
  },
  {
    "text": "have you heard of view state why is my HTTP called seven megabytes",
    "start": "2674319",
    "end": "2681660"
  },
  {
    "text": "um so when we set baggage we access the baggage.current now baggage there is one",
    "start": "2681819",
    "end": "2687880"
  },
  {
    "text": "inside of um activity it is not compliant with otel",
    "start": "2687880",
    "end": "2694359"
  },
  {
    "text": "so that class that we're using there is part of open telemetry so in this particular example we're",
    "start": "2694359",
    "end": "2699760"
  },
  {
    "text": "going to take the account ID account name out of our identity and pass it on the baggage",
    "start": "2699760",
    "end": "2706119"
  },
  {
    "text": "so when we make a call out to our stock API now we've got some baggage",
    "start": "2706119",
    "end": "2711520"
  },
  {
    "text": "then when we go into our stock API we can now say oh this was a stock",
    "start": "2711520",
    "end": "2716859"
  },
  {
    "text": "request for a VIP because everybody should put those two lines in their code by the way whenever you see martin.net Pop is VIP",
    "start": "2716859",
    "end": "2724119"
  },
  {
    "text": "true um so we can use that to influence what attributes we do now those two bits of",
    "start": "2724119",
    "end": "2731079"
  },
  {
    "text": "code neither of them add account underscore name as an attribute to any spans at all",
    "start": "2731079",
    "end": "2740220"
  },
  {
    "text": "it's where we get a lot of questions from people saying I've added the baggage but I can't see it in my back",
    "start": "2741220",
    "end": "2746440"
  },
  {
    "text": "end because baggage has nothing to do with your back end",
    "start": "2746440",
    "end": "2751440"
  },
  {
    "text": "what you can do though is you can write a processor who's talked about processes so at the end of every activity we can",
    "start": "2753040",
    "end": "2759819"
  },
  {
    "text": "say well go to the baggage.current it's right over every one of them and just add them as attributes great",
    "start": "2759819",
    "end": "2767079"
  },
  {
    "text": "now unless you protect your external public API though I could pass in baggage",
    "start": "2767079",
    "end": "2773800"
  },
  {
    "text": "I could just add a load of headers in my request to you and send in 20 000 different attributes",
    "start": "2773800",
    "end": "2781000"
  },
  {
    "text": "and all of a sudden I've just added loads of performance impact onto your back end",
    "start": "2781000",
    "end": "2787920"
  },
  {
    "text": "that's not a good idea what's a better idea is doing it a",
    "start": "2788380",
    "end": "2795099"
  },
  {
    "text": "little bit more securely use yourself a prefix for your internal attributes for baggage",
    "start": "2795099",
    "end": "2802420"
  },
  {
    "text": "so use your company name dot whatever",
    "start": "2802420",
    "end": "2808119"
  },
  {
    "text": "so that when you're actually building these processes you can say Well only the ones that we know about",
    "start": "2808119",
    "end": "2813640"
  },
  {
    "text": "use something obscure something that's known internally but",
    "start": "2813640",
    "end": "2818740"
  },
  {
    "text": "not externally that allows you to say yes this is actually something that we should be doing",
    "start": "2818740",
    "end": "2824380"
  },
  {
    "text": "it's a lot easier when it comes to things like messaging because it's kind of hard for an external consumer to access your internal message possible",
    "start": "2824380",
    "end": "2831220"
  },
  {
    "text": "from a HTTP perspective it's a real problem because I can blow out your",
    "start": "2831220",
    "end": "2836319"
  },
  {
    "text": "observability Solution by adding loads and loads of junk data into it from an external Source if you don't",
    "start": "2836319",
    "end": "2842079"
  },
  {
    "text": "protect yourself so let's talk a little bit about custom propagations a propagation that we've",
    "start": "2842079",
    "end": "2848619"
  },
  {
    "text": "talked about so far is about how do we try call a different system like a different HTTP endpoint and pass over",
    "start": "2848619",
    "end": "2856660"
  },
  {
    "text": "the trace context so that that new system inherits the same Trace ID it knows what the parent span ID is",
    "start": "2856660",
    "end": "2864760"
  },
  {
    "text": "sometimes that doesn't exist one of the places where it doesn't exist",
    "start": "2864760",
    "end": "2869859"
  },
  {
    "text": "at the moment is in messaging in a lot of the messaging libraries there are solutions out there that do building the",
    "start": "2869859",
    "end": "2876460"
  },
  {
    "text": "trace context but not all of them do so you might need to do it yourself the example I'm going to use is azure service boss because that doesn't happen",
    "start": "2876460",
    "end": "2882520"
  },
  {
    "text": "automatically with the Azure Service Plus sdks and it probably never will because of batching",
    "start": "2882520",
    "end": "2889540"
  },
  {
    "text": "because when you run a batch it's hard to know which message you're running in the context of",
    "start": "2889540",
    "end": "2896079"
  },
  {
    "text": "so what do we talk about when we talk about propagations Trace context so this is the idea of Trace ID span ID",
    "start": "2896079",
    "end": "2904720"
  },
  {
    "text": "and a third property which is whether or not this span has been sampled or not",
    "start": "2904720",
    "end": "2910599"
  },
  {
    "text": "so is this a span that should be ignored or this is this a trace that should be ignored",
    "start": "2910599",
    "end": "2916480"
  },
  {
    "text": "which is really interesting when we go on to a little bit about sampling",
    "start": "2916480",
    "end": "2921000"
  },
  {
    "text": "generally if you're using HTTP grpc you will get this out of the box",
    "start": "2922000",
    "end": "2927040"
  },
  {
    "text": "if you're using sqs it is out of the box soon",
    "start": "2927040",
    "end": "2932859"
  },
  {
    "text": "it's about different process boundary if you're inside the same process it's probably just going to work so by process boundaries we're talking",
    "start": "2935140",
    "end": "2941740"
  },
  {
    "text": "about messaging we're talking about HTTP we're talking about.net remoting for instance not really a thing anymore but you know",
    "start": "2941740",
    "end": "2948000"
  },
  {
    "text": "anything that goes outside of that current process boundary",
    "start": "2948000",
    "end": "2952980"
  },
  {
    "text": "so not just about a HTTP request now the other thing that comes as part",
    "start": "2953200",
    "end": "2958720"
  },
  {
    "text": "of propagation is baggage now these are all generally part of headers",
    "start": "2958720",
    "end": "2964420"
  },
  {
    "text": "metadata but what open Telemetry provides is the",
    "start": "2964420",
    "end": "2969819"
  },
  {
    "text": "w3c trace context which uses standardized names for all of these things and that's what makes open",
    "start": "2969819",
    "end": "2975940"
  },
  {
    "text": "Telemetry so powerful because it means you can write in any language and assume that if you've got these particular",
    "start": "2975940",
    "end": "2982300"
  },
  {
    "text": "names in your headers you can use them so what they provided was some libraries some little",
    "start": "2982300",
    "end": "2987760"
  },
  {
    "text": "um little methods for you to use so instead of you doing this manually yourself and saying right well I'll get",
    "start": "2987760",
    "end": "2993940"
  },
  {
    "text": "the current Trace ID I'll add it into the the Trace State header I'll format it in the right way I'll call it the",
    "start": "2993940",
    "end": "3001140"
  },
  {
    "text": "right names you don't need to what you do need to do though is provide it with a way for it to set them",
    "start": "3001140",
    "end": "3008819"
  },
  {
    "text": "so if you are using say as your service bus you've got the application properties which is a metadata property",
    "start": "3008819",
    "end": "3015660"
  },
  {
    "text": "you tell it I want you to inject the current context",
    "start": "3015660",
    "end": "3020880"
  },
  {
    "text": "the activity.current that we talked about and the baggage from current as well",
    "start": "3020880",
    "end": "3026410"
  },
  {
    "text": "[Music] I want you to take those two and I want you to use this method at the",
    "start": "3026410",
    "end": "3031740"
  },
  {
    "text": "bottom there to inject them into the message that are passed you",
    "start": "3031740",
    "end": "3037920"
  },
  {
    "text": "and it tells it how to do it now that will go in and it'll add any baggage it finds as individual",
    "start": "3037920",
    "end": "3043859"
  },
  {
    "text": "properties it will do the things like truncation all of that stuff happens by default inside of that you don't need to",
    "start": "3043859",
    "end": "3049920"
  },
  {
    "text": "know about the names of all of those different headers and then on the opposite side you've got",
    "start": "3049920",
    "end": "3055140"
  },
  {
    "text": "a similar method to extract them now we extract them and we get something called a propagation context",
    "start": "3055140",
    "end": "3062700"
  },
  {
    "text": "and the propagation context allows us to be able to take out the activity context",
    "start": "3062700",
    "end": "3068400"
  },
  {
    "text": "the baggage all those things individually if we want them but it will just set baggage for us",
    "start": "3068400",
    "end": "3075059"
  },
  {
    "text": "so again the same sort of idea we pass it the application properties we can pass it message and we give it a method",
    "start": "3075059",
    "end": "3081720"
  },
  {
    "text": "that can act on that object to try and extract that data out",
    "start": "3081720",
    "end": "3088700"
  },
  {
    "text": "once we've got those we can then create our new activity and we pass in that activity context if",
    "start": "3089400",
    "end": "3097020"
  },
  {
    "text": "you remember way back when we were talking about how we create spans without a parent",
    "start": "3097020",
    "end": "3102900"
  },
  {
    "text": "we were passing in new activity context in this one we're telling it what the parent is we're telling it the parent is",
    "start": "3102900",
    "end": "3109680"
  },
  {
    "text": "the context the propagation context activity context so that will create as a new span it will use the existing one",
    "start": "3109680",
    "end": "3116460"
  },
  {
    "text": "as its parent",
    "start": "3116460",
    "end": "3119300"
  },
  {
    "text": "okay sampling eight minutes right",
    "start": "3121619",
    "end": "3127079"
  },
  {
    "text": "and do questions after um sampling is one of the key important",
    "start": "3127079",
    "end": "3132119"
  },
  {
    "text": "parts of tracing it's how it differs from logs because sampling has two",
    "start": "3132119",
    "end": "3137819"
  },
  {
    "text": "different parts we do head sampling which happens at your application Level",
    "start": "3137819",
    "end": "3145099"
  },
  {
    "text": "and we have tail sampling that happens after all the spans have come through for a particular Trace",
    "start": "3146220",
    "end": "3153000"
  },
  {
    "text": "it's how we retain full context of individual requests without",
    "start": "3153000",
    "end": "3159599"
  },
  {
    "text": "um overloading our back ends so it allows us to reduce our storage",
    "start": "3159599",
    "end": "3166980"
  },
  {
    "text": "costs means that we don't end up paying I don't know 65 million pounds a year just throwing that number out there no",
    "start": "3166980",
    "end": "3174300"
  },
  {
    "text": "apparent reason so what is head sampling so it runs",
    "start": "3174300",
    "end": "3180300"
  },
  {
    "text": "before spans are created who owns before your root span is created",
    "start": "3180300",
    "end": "3186480"
  },
  {
    "text": "why is that important well it means it reduces our application overhead because if all of these spans",
    "start": "3186480",
    "end": "3193619"
  },
  {
    "text": "that are being created now no longer going to be recorded it means our applications can",
    "start": "3193619",
    "end": "3200700"
  },
  {
    "text": "essentially not do anything with them but that means it's got very very",
    "start": "3200700",
    "end": "3206700"
  },
  {
    "text": "limited access to information it doesn't know whether this is errored yet because it happens right at the start",
    "start": "3206700",
    "end": "3214740"
  },
  {
    "text": "so because of that we have very little information to go on",
    "start": "3214740",
    "end": "3219920"
  },
  {
    "text": "till sampling is way more complicated so it runs on a delay after the trace",
    "start": "3220800",
    "end": "3227520"
  },
  {
    "text": "has been has come through normally part of a collector or some third-party",
    "start": "3227520",
    "end": "3232680"
  },
  {
    "text": "service that you use inside of your data center or at a vendor",
    "start": "3232680",
    "end": "3239460"
  },
  {
    "text": "it has access to all the span data though every single one of your spans it has",
    "start": "3239460",
    "end": "3244920"
  },
  {
    "text": "access to the status of all of those spans the duration of all those spans",
    "start": "3244920",
    "end": "3250099"
  },
  {
    "text": "it has downsides means we're delaying sending it to the back end so if you want to wait if your spans are",
    "start": "3251940",
    "end": "3258180"
  },
  {
    "text": "generally taking 30 seconds to complete it means you've got 30 seconds before we",
    "start": "3258180",
    "end": "3263339"
  },
  {
    "text": "even think about starting to send those to the back end but it requires the application to send",
    "start": "3263339",
    "end": "3270180"
  },
  {
    "text": "all the spans which means that there's no sampling in the front end at that point",
    "start": "3270180",
    "end": "3276558"
  },
  {
    "text": "which could be a problem for you if you think about how spans are created",
    "start": "3276660",
    "end": "3282180"
  },
  {
    "text": "how data is transitioned between availability zones Network traffic all",
    "start": "3282180",
    "end": "3287280"
  },
  {
    "text": "of that kind of stuff if you're working at scale this can be a problem",
    "start": "3287280",
    "end": "3292099"
  },
  {
    "text": "so in dot net you can write your own Samplers please don't it's hard",
    "start": "3292619",
    "end": "3297780"
  },
  {
    "text": "I don't understand it and I've been doing this a while um but you can write your own Samplers",
    "start": "3297780",
    "end": "3303480"
  },
  {
    "text": "this is a um a percentage sampler that will just randomly choose a percentage if it's",
    "start": "3303480",
    "end": "3309900"
  },
  {
    "text": "below a particular rate then then it'll yeah um it's not exactly complicated to write",
    "start": "3309900",
    "end": "3317040"
  },
  {
    "text": "but it is a thing so finally I want to talk about the open",
    "start": "3317040",
    "end": "3322079"
  },
  {
    "text": "Telemetry collector um the open Telemetry collector is a service that open Telemetry provide",
    "start": "3322079",
    "end": "3328920"
  },
  {
    "text": "it runs normally in a Docker container it's a go Library a go executable that you can run but generally people run it",
    "start": "3328920",
    "end": "3335280"
  },
  {
    "text": "in a Docker container it works as a proxy between your application and your",
    "start": "3335280",
    "end": "3341040"
  },
  {
    "text": "back end it can take in various different formats one of them being otlp and it can output in various different",
    "start": "3341040",
    "end": "3347220"
  },
  {
    "text": "formats one of them being otlp but it has the ability to do processing in the middle of those which is really",
    "start": "3347220",
    "end": "3353760"
  },
  {
    "text": "interesting because you can do some interesting things so you can run it as a service you can run it as a sidecar it's a popular thing",
    "start": "3353760",
    "end": "3359880"
  },
  {
    "text": "to run especially if you're running things like Ruby where you don't have asynchronous actions",
    "start": "3359880",
    "end": "3366380"
  },
  {
    "text": "but it allows you to have things like centralized config it means that every single one of your applications doesn't need to know the API key for your back",
    "start": "3366780",
    "end": "3374220"
  },
  {
    "text": "end you send everything through the collector and The Collector is the thing that knows what that config is so from a",
    "start": "3374220",
    "end": "3380339"
  },
  {
    "text": "security perspective quite good it also gives you centralized egress if you're working in any sort of zero trust",
    "start": "3380339",
    "end": "3386760"
  },
  {
    "text": "any secure networking scenarios your applications may not have access to",
    "start": "3386760",
    "end": "3391859"
  },
  {
    "text": "the internet to send to your observability provider but they will have access to send to send something like a collector it means you only have",
    "start": "3391859",
    "end": "3398880"
  },
  {
    "text": "to ask the security team for one application generally makes that process go a lot quicker",
    "start": "3398880",
    "end": "3405059"
  },
  {
    "text": "but it also allows you to do things like filtering and reduction filter out properties remove pii from",
    "start": "3405059",
    "end": "3411180"
  },
  {
    "text": "the data before it goes onto your third parties it allows your platform engineering teams and your sres to maintain this for",
    "start": "3411180",
    "end": "3418319"
  },
  {
    "text": "you so you don't accidentally do some of this stuff but the other thing it does is that",
    "start": "3418319",
    "end": "3423359"
  },
  {
    "text": "things like enrichment so if you're running inside kubernetes then you can run a collector inside of",
    "start": "3423359",
    "end": "3429780"
  },
  {
    "text": "those scenarios and it'll automatically add things like the Pod name the deployment name from every span that",
    "start": "3429780",
    "end": "3435480"
  },
  {
    "text": "comes through so your application doesn't need to know about it it's really really interesting I would massively",
    "start": "3435480",
    "end": "3441720"
  },
  {
    "text": "um encourage anybody in the room who's doing this at the moment just do using open Telemetry to bring the collector in",
    "start": "3441720",
    "end": "3447059"
  },
  {
    "text": "it might seem like it's a really big thing a really complicated thing it's really not",
    "start": "3447059",
    "end": "3452579"
  },
  {
    "text": "uh so it works on that you've got Imports you've got outputs and you've got these things in the middle that do",
    "start": "3452579",
    "end": "3458099"
  },
  {
    "text": "stuff that you want there's loads of them you can transform data redact it all that kind of stuff I'm not going to",
    "start": "3458099",
    "end": "3463319"
  },
  {
    "text": "go through those that's not a specific.net thing and you can add things like that",
    "start": "3463319",
    "end": "3469200"
  },
  {
    "text": "let's remove the health checks I massive I do advise everybody filter out your health checks they're not",
    "start": "3469200",
    "end": "3475980"
  },
  {
    "text": "useful for traces and if you're using Azure front door it's chatty",
    "start": "3475980",
    "end": "3483740"
  },
  {
    "text": "we're done",
    "start": "3484579",
    "end": "3487819"
  },
  {
    "text": "that was a Whistle Stop tour I am doing a two-day workshop on all of this stuff and I've tried to condense as much as I",
    "start": "3492780",
    "end": "3499020"
  },
  {
    "text": "can into a one-hour talk um so if you're interested in more I'm doing a two-day workshop at Copenhagen",
    "start": "3499020",
    "end": "3504059"
  },
  {
    "text": "and a two-day workshop and NDC Porto as well so do come see me",
    "start": "3504059",
    "end": "3510920"
  },
  {
    "text": "um we've got about two minutes for questions that",
    "start": "3512339",
    "end": "3518220"
  },
  {
    "text": "um yes so I mentioned not to write a sampler but is the good built-in Samplers",
    "start": "3525599",
    "end": "3531480"
  },
  {
    "text": "um there are some Samplers there um if you're running small scale systems",
    "start": "3531480",
    "end": "3536819"
  },
  {
    "text": "yes you could use those Samplers there is a tell by sampler in The Collector as well that you can use",
    "start": "3536819",
    "end": "3542760"
  },
  {
    "text": "um I would generally stay away from sampling unless you're hitting really high levels and if you're hitting really high levels then think about tail",
    "start": "3542760",
    "end": "3548940"
  },
  {
    "text": "sampling not head sampling that's why it's not really right to write them",
    "start": "3548940",
    "end": "3555318"
  },
  {
    "text": "so so is it possible to do head sampling if something goes wrong later no",
    "start": "3563520",
    "end": "3568980"
  },
  {
    "text": "because the problem is you made that decision when the HTTP request came in if in that process I've made a call to",
    "start": "3568980",
    "end": "3574619"
  },
  {
    "text": "this service and this service now I've already told this service that that this is a non-sample non-sampled",
    "start": "3574619",
    "end": "3580980"
  },
  {
    "text": "span so discard it this one fails well I only end up getting this information in this one and",
    "start": "3580980",
    "end": "3586200"
  },
  {
    "text": "I miss that so you're ending up with incomplete information which is quite bad",
    "start": "3586200",
    "end": "3591720"
  },
  {
    "text": "so yeah till sampling is the only way to get all the errors or send all the data and spend 65",
    "start": "3591720",
    "end": "3598740"
  },
  {
    "text": "million could a year any more questions feel free to come up to me afterwards",
    "start": "3598740",
    "end": "3604799"
  },
  {
    "text": "I'll dump some stickers out",
    "start": "3604799",
    "end": "3607880"
  }
]