[
  {
    "text": "yeah I'm Chris Ryan software engineer as all of you are",
    "start": "1280",
    "end": "6520"
  },
  {
    "text": "I've been doing this stuff forever so the title of this is C++ under the hood",
    "start": "6520",
    "end": "11840"
  },
  {
    "text": "just fair warning this is not about embedded C+ plus an automotive so after",
    "start": "11840",
    "end": "18800"
  },
  {
    "text": "I first after I posted the title A lot of people thought I was talking about that so now it um this is just the",
    "start": "18800",
    "end": "26240"
  },
  {
    "text": "internal mechanisms the magic that you don't see the B you really need to know",
    "start": "26240",
    "end": "32200"
  },
  {
    "text": "it's very helpful to understand what is happening inside to know why some people treat software and computers it's just",
    "start": "32200",
    "end": "39800"
  },
  {
    "text": "magic black boxes you shove bits in on one side they come out on the other side in the right order when they stop coming",
    "start": "39800",
    "end": "46199"
  },
  {
    "text": "out in the other side in the right order it's nice to know why it's working inside the way it is so you can figure",
    "start": "46199",
    "end": "52000"
  },
  {
    "text": "out what you did wrong and I particularly like doing the internal blooding guts the internals of",
    "start": "52000",
    "end": "58879"
  },
  {
    "text": "the engine um yeah easier to know how to use it if",
    "start": "58879",
    "end": "64198"
  },
  {
    "text": "you know what how it's working we're going to talk about the internals the C++ class mechanisms the C++ onion um",
    "start": "64199",
    "end": "73560"
  },
  {
    "text": "The Inheritance and architectures and around the polymorphic mechanisms construction",
    "start": "73560",
    "end": "79439"
  },
  {
    "text": "destruction running code before and after main data me or member data",
    "start": "79439",
    "end": "86119"
  },
  {
    "text": "pointers and function uh member function po pointers these are different than raw",
    "start": "86119",
    "end": "91880"
  },
  {
    "text": "pointers and regular C function pointers also is a bonus non C++ topic",
    "start": "91880",
    "end": "101600"
  },
  {
    "text": "of uh stack frames and base pointer mechanisms C++ uses them but my examples",
    "start": "101600",
    "end": "107880"
  },
  {
    "text": "aren't going to be C++ it's just basically pling C the way that works and",
    "start": "107880",
    "end": "114159"
  },
  {
    "text": "it will be for a theoretical virtual x86 type machine",
    "start": "114159",
    "end": "120439"
  },
  {
    "text": "and it's lots of depending on your U platform and call-in conventions they",
    "start": "120439",
    "end": "126759"
  },
  {
    "text": "don't work exactly the same some people pass in registers and stuff this will just be pure stack Bas and so you get",
    "start": "126759",
    "end": "132720"
  },
  {
    "text": "the general idea of how they all work me been doing this forever I'm on the ISO",
    "start": "132720",
    "end": "138760"
  },
  {
    "text": "standards committee I'm my primary job there is to say no to stop people from",
    "start": "138760",
    "end": "144239"
  },
  {
    "text": "running to muck and making crazy features um I've worked in every different line of business there is in",
    "start": "144239",
    "end": "151200"
  },
  {
    "text": "software business scientific engineering um these are the way things",
    "start": "151200",
    "end": "159480"
  },
  {
    "text": "that work internally I do not promote doing tricks or to do tricky code I want",
    "start": "159480",
    "end": "165440"
  },
  {
    "text": "plain simple easy to do uh code the onion it's not to make you cry",
    "start": "165440",
    "end": "173319"
  },
  {
    "text": "a lot of people think you know C++ will make you cry but it's",
    "start": "173319",
    "end": "178680"
  },
  {
    "text": "with this more of the layer of of an object you have the internal",
    "start": "178680",
    "end": "184480"
  },
  {
    "text": "mechanisms and you build layers and layers around that for each class you",
    "start": "184480",
    "end": "189560"
  },
  {
    "text": "inherit and each one adds its functionality a good",
    "start": "189560",
    "end": "195280"
  },
  {
    "text": "architecture has isolated chunks within it that maybe have various levels of",
    "start": "195280",
    "end": "202480"
  },
  {
    "text": "inheritance for themselves but they conglomerate together the objects within a class coexist but",
    "start": "202480",
    "end": "211239"
  },
  {
    "text": "they don't reach in and know about each other if your class starts looking like this this is a little bit runamu this",
    "start": "211239",
    "end": "219319"
  },
  {
    "text": "picture actually kind of reminds me of the dissection of a brain the old uh you",
    "start": "219319",
    "end": "225159"
  },
  {
    "text": "know this is your uh your brain your your the egg on you know in a frying pan",
    "start": "225159",
    "end": "231879"
  },
  {
    "text": "it and with the sight of bacon whatnot this is your onion brain you know or",
    "start": "231879",
    "end": "237480"
  },
  {
    "text": "your onion your brain on onions so okay first thing to kind of understand",
    "start": "237480",
    "end": "245599"
  },
  {
    "text": "how these things work is to understand the footprint of what an object is taking up and the how that ties in with",
    "start": "245599",
    "end": "252920"
  },
  {
    "text": "the vtable mechanism um inheritance the primary",
    "start": "252920",
    "end": "258040"
  },
  {
    "text": "rule you probably learned this in your freshman C-Class or C++ class and didn't",
    "start": "258040",
    "end": "263880"
  },
  {
    "text": "know why it was important is a and has a if an object a person is not a name a",
    "start": "263880",
    "end": "271120"
  },
  {
    "text": "person has a name an employee is a person therefore an employee can derive from a person a person does not derive",
    "start": "271120",
    "end": "278919"
  },
  {
    "text": "from a string but the person has a name a date of birth which those are those",
    "start": "278919",
    "end": "285199"
  },
  {
    "text": "are members okay we got three different strs",
    "start": "285199",
    "end": "290960"
  },
  {
    "text": "here and I'm going to use strs all the way through just so I didn't have to put public everywhere stru in class the same",
    "start": "290960",
    "end": "298400"
  },
  {
    "text": "thing um if you just have a struct uh with a single member this is",
    "start": "298400",
    "end": "307000"
  },
  {
    "text": "kind of the footprint it looks like the number zero is the offset from the beginning of the",
    "start": "307000",
    "end": "312639"
  },
  {
    "text": "structure um the a is an INT and in this case it's kind of I chose four squares",
    "start": "312639",
    "end": "319440"
  },
  {
    "text": "we call those each bytes and it a presume 32-bit architecture it really",
    "start": "319440",
    "end": "324639"
  },
  {
    "text": "doesn't matter it's just to get the visual of them uh a b and c have no",
    "start": "324639",
    "end": "330479"
  },
  {
    "text": "relationship to each other and they don't inherit or talk to each other however if you convert your",
    "start": "330479",
    "end": "338280"
  },
  {
    "text": "hierarchy such b derives from A and C deres from B A becomes nested inside of",
    "start": "338280",
    "end": "346600"
  },
  {
    "text": "B and so the a is an entire entity is in there",
    "start": "346600",
    "end": "351800"
  },
  {
    "text": "and B that used to have a minor a b member that gets pushed down a little",
    "start": "351800",
    "end": "357000"
  },
  {
    "text": "bit and the a goes first base members the keyword there is a base",
    "start": "357000",
    "end": "363360"
  },
  {
    "text": "is a member of your class it's just like if you had a object the the lowercase B",
    "start": "363360",
    "end": "371160"
  },
  {
    "text": "is a member a object is a member it takes up space and when you further",
    "start": "371160",
    "end": "377560"
  },
  {
    "text": "derive uh C from B you get a complete B inside the footprint of c and then C has",
    "start": "377560",
    "end": "385440"
  },
  {
    "text": "its members um a little more complicated if you add",
    "start": "385440",
    "end": "392000"
  },
  {
    "text": "a v table um and in this case we have a function",
    "start": "392000",
    "end": "397240"
  },
  {
    "text": "bar and the way this is laid out the leftmost column is kind of what the code",
    "start": "397240",
    "end": "403120"
  },
  {
    "text": "is the next column is the foot print um the next column is what the",
    "start": "403120",
    "end": "410080"
  },
  {
    "text": "vtable looks like in memory and then in the far uh right is",
    "start": "410080",
    "end": "417319"
  },
  {
    "text": "all of the methods of the class even if",
    "start": "417319",
    "end": "422440"
  },
  {
    "text": "it's a virtual function it is a just plain regular function there is nothing",
    "start": "422440",
    "end": "427759"
  },
  {
    "text": "special about a virtual function except for that it shows up in your vtable and",
    "start": "427759",
    "end": "433160"
  },
  {
    "text": "other people can find it that way this is not properly done to if you're going to have",
    "start": "433160",
    "end": "439960"
  },
  {
    "text": "a virtual function you need to have a virtual",
    "start": "439960",
    "end": "444560"
  },
  {
    "text": "Destructor um and that's for clean up later if you have at this point a does",
    "start": "445160",
    "end": "451039"
  },
  {
    "text": "not know if anybody's ever going to derive from it B doesn't know C doesn't know so you need to supply that now",
    "start": "451039",
    "end": "457639"
  },
  {
    "text": "because you can't say well I'll add it back when someone decides they're going to inherit from me later if you no one",
    "start": "457639",
    "end": "463240"
  },
  {
    "text": "was going to inherit from me you wouldn't have put a virtual in there in the first place",
    "start": "463240",
    "end": "468400"
  },
  {
    "text": "but now this is our same similar architecture of hierarchy of B derives",
    "start": "468400",
    "end": "474879"
  },
  {
    "text": "from A and C derives from B being that a has a v table in",
    "start": "474879",
    "end": "482759"
  },
  {
    "text": "it at offset zero when you inherit a you get its vtable but B doesn't have a",
    "start": "482759",
    "end": "491720"
  },
  {
    "text": "separate vtable pointer entry it reuses the one from a so it knows that it will",
    "start": "491720",
    "end": "499400"
  },
  {
    "text": "V this this is not in the standard but 99.999% of all implementations put the",
    "start": "499400",
    "end": "505840"
  },
  {
    "text": "vtable at the zero offset they don't have to if they can find some of magic way to do it they can do",
    "start": "505840",
    "end": "512159"
  },
  {
    "text": "that but this is so anybody who derives from it say that you have a a base",
    "start": "512159",
    "end": "518039"
  },
  {
    "text": "pointer and this something you probably all already know and but youve dve you",
    "start": "518039",
    "end": "523200"
  },
  {
    "text": "have a drived implementation of C but you you're talking to the the base pointer if it knows the base pointer of",
    "start": "523200",
    "end": "532519"
  },
  {
    "text": "an A type knows it can find the V table in the cclass because it's at the zero offset",
    "start": "532519",
    "end": "541440"
  },
  {
    "text": "however if you have a as a member of",
    "start": "542440",
    "end": "548160"
  },
  {
    "text": "B uh B has a v table and a the member in this has its own V table",
    "start": "548160",
    "end": "557279"
  },
  {
    "text": "the vtable right come on where's my",
    "start": "557279",
    "end": "565560"
  },
  {
    "text": "pointer okay my pointer didn't want to point but oh",
    "start": "565560",
    "end": "571160"
  },
  {
    "text": "was okay I wasn't seeing it so no we don't want magnifier poter okay",
    "start": "571160",
    "end": "578440"
  },
  {
    "text": "this vtable is the one that gets assigned to this position this vtable pointer and this is",
    "start": "578440",
    "end": "586279"
  },
  {
    "text": "the V table itself is the same as the one that's here and when a gets constructed it gets assigned when b gets",
    "start": "586279",
    "end": "593880"
  },
  {
    "text": "constructed it gets assigned here and the AV V table is Left Behind",
    "start": "593880",
    "end": "599440"
  },
  {
    "text": "a lot of people don't like virtual mechanism they say it wastes memory you got V tables all over the place for if",
    "start": "599440",
    "end": "607480"
  },
  {
    "text": "you have a million instances of B how many V tables do you have well V tables",
    "start": "607480",
    "end": "612880"
  },
  {
    "text": "for B you got one it's static in memory it just uses up a few bytes it's not",
    "start": "612880",
    "end": "618440"
  },
  {
    "text": "really a big burden yes there's a vtable pointer in there that's just a few bytes too it's not really going to hurt you",
    "start": "618440",
    "end": "624920"
  },
  {
    "text": "and that few bites is on every instance just a pet PE I get on a rant",
    "start": "624920",
    "end": "631200"
  },
  {
    "text": "sometimes um the same with C here it has a vtable",
    "start": "631200",
    "end": "638160"
  },
  {
    "text": "if you go to the member B and and get a pointer to that",
    "start": "638160",
    "end": "644800"
  },
  {
    "text": "then you can polymorphically call functions here but calling a function in C will not call this and will not call",
    "start": "644800",
    "end": "652880"
  },
  {
    "text": "this matter of fact C knows nothing of a and doesn't even really know anything of the contents of B other than it deres",
    "start": "652880",
    "end": "659480"
  },
  {
    "text": "from B um now",
    "start": "659480",
    "end": "666880"
  },
  {
    "text": "here's the to notice here is we have a a",
    "start": "666880",
    "end": "672639"
  },
  {
    "text": "standalone structure a standalone structure B and C derives from a and has",
    "start": "672639",
    "end": "678600"
  },
  {
    "text": "a member of B so it has the C leveraged",
    "start": "678600",
    "end": "684399"
  },
  {
    "text": "uh vtable pointer that points to here and this is the A's implementation of",
    "start": "684399",
    "end": "690120"
  },
  {
    "text": "the V table the A and then there's the B which is the member that takes that",
    "start": "690120",
    "end": "697040"
  },
  {
    "text": "position and this V table is from up here that's all with a B object when it",
    "start": "697040",
    "end": "703920"
  },
  {
    "text": "gets placed in here this exact same footprint is the for for this case of",
    "start": "703920",
    "end": "711680"
  },
  {
    "text": "multiple inheritance you derive from A and",
    "start": "711680",
    "end": "717600"
  },
  {
    "text": "B and but this vtable is a c is a for the C-Class this vtable pointer is also",
    "start": "717600",
    "end": "725959"
  },
  {
    "text": "for the cclass so when you have a if you take a",
    "start": "725959",
    "end": "731680"
  },
  {
    "text": "pointer to if you have a c object and you cast that to an a pointer you're",
    "start": "731680",
    "end": "738199"
  },
  {
    "text": "pointing at this object and if you call a uh polymorphic function off of that it",
    "start": "738199",
    "end": "745440"
  },
  {
    "text": "looks it up in this V table if you have a let's go back stop",
    "start": "745440",
    "end": "751519"
  },
  {
    "text": "that if you have a c object and you cast it to a b it will give you a pointer",
    "start": "751519",
    "end": "758680"
  },
  {
    "text": "that is 8 bytes offset and it has a v table and if you",
    "start": "758680",
    "end": "763760"
  },
  {
    "text": "call a function on that it's in the scoping of the B object however",
    "start": "763760",
    "end": "772480"
  },
  {
    "text": "because this V table knows that it's inside of the C object",
    "start": "772480",
    "end": "779880"
  },
  {
    "text": "it's a c object V table and so if you try and destruct a a pointer to a b",
    "start": "779880",
    "end": "786639"
  },
  {
    "text": "pointer it calls the C Destructor and if you call the bar function that's right",
    "start": "786639",
    "end": "792600"
  },
  {
    "text": "here virtual it calls the bar function of C however see when you go to call",
    "start": "792600",
    "end": "800320"
  },
  {
    "text": "Destructor here and bar it uses the C object and here it's also going to use a",
    "start": "800320",
    "end": "807560"
  },
  {
    "text": "c object but this pointer that we have here we said is 8 bytes offset so it",
    "start": "807560",
    "end": "813639"
  },
  {
    "text": "calls a function that's the virtual Destructor for",
    "start": "813639",
    "end": "819959"
  },
  {
    "text": "C adjusted by 8 bytes inside of that function it receives it at the this",
    "start": "819959",
    "end": "827240"
  },
  {
    "text": "pointer for B subtracts eight bytes off",
    "start": "827240",
    "end": "833160"
  },
  {
    "text": "uh from the disp pointer and then calls stop that",
    "start": "833160",
    "end": "839440"
  },
  {
    "text": "likes changing mode I need to turn that mode off come on there then this calls the",
    "start": "839440",
    "end": "847759"
  },
  {
    "text": "same Destructor here see this adjust",
    "start": "847759",
    "end": "852800"
  },
  {
    "text": "calls this Destructor and it distracts the object as it normally would so I'll",
    "start": "852800",
    "end": "859120"
  },
  {
    "text": "show you here in a little bit and proove a little bit more of this object has two",
    "start": "859120",
    "end": "864279"
  },
  {
    "text": "this pointers this pointers are not constant they act they are con constant",
    "start": "864279",
    "end": "869720"
  },
  {
    "text": "pointers but you will you may see multiple of pointers when you go through and debug and you look at what the this",
    "start": "869720",
    "end": "875560"
  },
  {
    "text": "pointer is and it will confuse you and you start to think that you're in a different object you're in the same",
    "start": "875560",
    "end": "880880"
  },
  {
    "text": "object you're just pointing at a different object and the V tables can reconcile that little confusing we may",
    "start": "880880",
    "end": "888360"
  },
  {
    "text": "hit it again here in the future okay here's an example of this I",
    "start": "888360",
    "end": "893639"
  },
  {
    "text": "hope this is readable enough so we got our a we got our B and we got our multiple",
    "start": "893639",
    "end": "900240"
  },
  {
    "text": "inheritance and we're going to let's run through and we're going to new a sea Object Store in a c",
    "start": "900240",
    "end": "908320"
  },
  {
    "text": "pointer we cast it to an a pointer we call a function in a",
    "start": "908320",
    "end": "914639"
  },
  {
    "text": "bar oh and actually let's look go through the construction as it's constructing this inside out our onion",
    "start": "914639",
    "end": "921680"
  },
  {
    "text": "so as we construct our C object the first thing that happens is it says oh we have to",
    "start": "921680",
    "end": "929040"
  },
  {
    "text": "construct our members in order so for a base member is for when I say members",
    "start": "929040",
    "end": "935120"
  },
  {
    "text": "it's each ba all the base members and then all the local",
    "start": "935120",
    "end": "940440"
  },
  {
    "text": "members so it constructs the C initializes it with zero and you are",
    "start": "940440",
    "end": "946759"
  },
  {
    "text": "familiar with the new initialization bracket format you should always use that never leave your data uninitialized",
    "start": "946759",
    "end": "954680"
  },
  {
    "text": "if you do actually call an initializer in your Constructor it will skip that initialization so it's not costing you",
    "start": "954680",
    "end": "961600"
  },
  {
    "text": "extra but it's still protecting you so C Constructor calls a",
    "start": "961600",
    "end": "967480"
  },
  {
    "text": "Constructor and it prints out a colon colon this and that's our this pointer",
    "start": "967480",
    "end": "973279"
  },
  {
    "text": "and then it finish a z it comes back to B calls the B Constructor it internally",
    "start": "973279",
    "end": "979440"
  },
  {
    "text": "when it calls this says we we know that the B object is 8 bytes offset inside of",
    "start": "979440",
    "end": "984519"
  },
  {
    "text": "the C object so when we go to construct it when we We call we print out that",
    "start": "984519",
    "end": "990160"
  },
  {
    "text": "this it is 8 bytes offset and then it returns back to C",
    "start": "990160",
    "end": "995399"
  },
  {
    "text": "then we construct C and the this pointer here is back to the original one so this",
    "start": "995399",
    "end": "1001240"
  },
  {
    "text": "C object actually internally has two this pointers",
    "start": "1001240",
    "end": "1006639"
  },
  {
    "text": "so so we're done with construction we cast it to an a pointer we call a uh the",
    "start": "1006639",
    "end": "1012959"
  },
  {
    "text": "virtual function bar off of uh that this is the pointer",
    "start": "1012959",
    "end": "1018480"
  },
  {
    "text": "to a we call Bar Bar would go to print",
    "start": "1018480",
    "end": "1024438"
  },
  {
    "text": "out the virtual function that gets called but of course because it's virtual it's not a colon colon bar it's",
    "start": "1024439",
    "end": "1031319"
  },
  {
    "text": "the furthest derived which is C colon colon bar which is what we're seeing here and it's print out the this pointer",
    "start": "1031319",
    "end": "1039240"
  },
  {
    "text": "which is the C8 we take the original C pointer we call",
    "start": "1039240",
    "end": "1047839"
  },
  {
    "text": "Fu non virtual and it goes to printed out and",
    "start": "1047839",
    "end": "1054919"
  },
  {
    "text": "it's the local this pointer for the B object it's the d0o so same object subordinate object",
    "start": "1054919",
    "end": "1064000"
  },
  {
    "text": "but it's a different this pointer but it's still the same object",
    "start": "1064000",
    "end": "1071120"
  },
  {
    "text": "um did I skip a step here yeah I think the first bar Wasing full inside this",
    "start": "1071559",
    "end": "1078360"
  },
  {
    "text": "say again the bar function inside the oh",
    "start": "1078360",
    "end": "1086039"
  },
  {
    "text": "okay you're right I did that okay yeah so here you're right the",
    "start": "1086039",
    "end": "1092559"
  },
  {
    "text": "c one has the this pointer is the same as this so when we call",
    "start": "1092559",
    "end": "1100400"
  },
  {
    "text": "Fu um oh a bar Fu yes yeah I right so it's it's calling",
    "start": "1100480",
    "end": "1109240"
  },
  {
    "text": "the fu here it it does the 8 byte offset um and then the same on the way",
    "start": "1109240",
    "end": "1116159"
  },
  {
    "text": "back out then we call cfu it uh and oh so the C object is at",
    "start": "1116159",
    "end": "1125559"
  },
  {
    "text": "this address but the C object does not have a Fu",
    "start": "1125559",
    "end": "1132960"
  },
  {
    "text": "method but it inherited the method from B which is at an 8 byte off",
    "start": "1132960",
    "end": "1139280"
  },
  {
    "text": "set even though we're talking to a c object it called the the the B function of that and when",
    "start": "1139280",
    "end": "1147720"
  },
  {
    "text": "it goes to print out it's this pointer it's the 8 by offset again uh",
    "start": "1147720",
    "end": "1154840"
  },
  {
    "text": "destruction we have a b pointer we go to virtually destruct",
    "start": "1154840",
    "end": "1160840"
  },
  {
    "text": "that that throws to the most derived CA",
    "start": "1160840",
    "end": "1166200"
  },
  {
    "text": "Destructor um and then when we so when we destruct we destruct from the outside",
    "start": "1166480",
    "end": "1172320"
  },
  {
    "text": "in the um outside may have data that",
    "start": "1172320",
    "end": "1177880"
  },
  {
    "text": "needs to be cleaned up the inside object doesn't know anything about what's outside of",
    "start": "1177880",
    "end": "1183880"
  },
  {
    "text": "it so um we get rid of the outer layer first then we go we step in destroy the",
    "start": "1183880",
    "end": "1192919"
  },
  {
    "text": "next inner layer and the next inner layer being that the B structor is",
    "start": "1192919",
    "end": "1199720"
  },
  {
    "text": "actually it's inside of C but it's not inside of a so A and B actually have no",
    "start": "1199720",
    "end": "1204960"
  },
  {
    "text": "dependency on each other other than b is at the 8 by offset so we destruct our",
    "start": "1204960",
    "end": "1210280"
  },
  {
    "text": "members in reverse order of construction so we destroy the B member base member",
    "start": "1210280",
    "end": "1216520"
  },
  {
    "text": "and then the a base member and you see those printed out that way also on all codes with uh on all slides with code",
    "start": "1216520",
    "end": "1225000"
  },
  {
    "text": "there's a godbolt link down here that actually pulls up a an example of almost",
    "start": "1225000",
    "end": "1231440"
  },
  {
    "text": "exactly this code uh a lot of what I have here is slideware many times it's missing a few",
    "start": "1231440",
    "end": "1239559"
  },
  {
    "text": "little keywords or stuff but it's basically the intent that's correctly there just needed it for formatting I",
    "start": "1239559",
    "end": "1246080"
  },
  {
    "text": "would never do code like this in production this is just to get it to fit the functionality of what's Happening",
    "start": "1246080",
    "end": "1254120"
  },
  {
    "text": "Here okay the order of construction and",
    "start": "1254120",
    "end": "1259400"
  },
  {
    "text": "destruction we kind of alluded to that before um but this is when you construct",
    "start": "1259400",
    "end": "1267159"
  },
  {
    "text": "an array and you go to new an array it",
    "start": "1267159",
    "end": "1272200"
  },
  {
    "text": "creates them from the beginning forward and so therefore index zero gets",
    "start": "1272200",
    "end": "1279200"
  },
  {
    "text": "constructed index one gets constructed yada y all the way to the end we delete",
    "start": "1279200",
    "end": "1285400"
  },
  {
    "text": "that it it oh and here we and this isn't on the Heap and here's one on the stack",
    "start": "1285400",
    "end": "1292320"
  },
  {
    "text": "these each get constructed first to the fifth index fourth index fourth position",
    "start": "1292320",
    "end": "1298960"
  },
  {
    "text": "fifth position fourth index um we delete the",
    "start": "1298960",
    "end": "1305760"
  },
  {
    "text": "puu this will get delet destructed in reverse order the last index and then",
    "start": "1305760",
    "end": "1311640"
  },
  {
    "text": "steps backwards through the array a lot of people just kind of assume the whole array gets deleted it doesn't well it",
    "start": "1311640",
    "end": "1317880"
  },
  {
    "text": "does but in reverse order that it was constructed um after the end of our",
    "start": "1317880",
    "end": "1326080"
  },
  {
    "text": "local scope here this array local member gets distracted in",
    "start": "1326080",
    "end": "1332799"
  },
  {
    "text": "reverse order also this is what we get printed out and",
    "start": "1332799",
    "end": "1338760"
  },
  {
    "text": "you can see constructing of the nude object constructed of the stack object",
    "start": "1338760",
    "end": "1346760"
  },
  {
    "text": "the destruction of the new object object the nude object created by nude not",
    "start": "1346760",
    "end": "1354480"
  },
  {
    "text": "naked um so notice that the this pointers of each of these are in the",
    "start": "1354480",
    "end": "1360159"
  },
  {
    "text": "reverse order that they were here the automatic distractor when it's invoked on the stack variable array is in the",
    "start": "1360159",
    "end": "1369679"
  },
  {
    "text": "reverse order that that was constructed um the it's the universal",
    "start": "1369679",
    "end": "1375840"
  },
  {
    "text": "rule in C++ the first shall be last and the last shall be first it's this way because",
    "start": "1375840",
    "end": "1384360"
  },
  {
    "text": "once something's been created someone may have a dependency on that variable therefore you want to delete or clean up",
    "start": "1384360",
    "end": "1392520"
  },
  {
    "text": "anybody that would have a a dependency on this before you get rid of what it's dependent on if someone's pointing to it",
    "start": "1392520",
    "end": "1399200"
  },
  {
    "text": "you don't want to yank the carpet out from it and delete what's underneath it so you delete whoever is standing on the",
    "start": "1399200",
    "end": "1406000"
  },
  {
    "text": "carpet Before You Yank the carpet out",
    "start": "1406000",
    "end": "1410440"
  },
  {
    "text": "um this is a similar type example and with two the in the previous one I had",
    "start": "1411480",
    "end": "1418960"
  },
  {
    "text": "forcibly deleted the uh Foo pointer out of order of the",
    "start": "1418960",
    "end": "1425080"
  },
  {
    "text": "destruction of the automatic destruction this is two local",
    "start": "1425080",
    "end": "1430279"
  },
  {
    "text": "arrays come on um a Fu three and a Fu",
    "start": "1430279",
    "end": "1436799"
  },
  {
    "text": "six and I just named in that way to so we know which ones you're were talking about which elements which ones had how",
    "start": "1436799",
    "end": "1442760"
  },
  {
    "text": "many elements so we create these three we create these six you see them there",
    "start": "1442760",
    "end": "1448960"
  },
  {
    "text": "end of the scope of Main and these just kind of fall off the end of the world and get destructed in reverse order it",
    "start": "1448960",
    "end": "1455799"
  },
  {
    "text": "does the six that in the reverse order of the six there and then the final three in the reverse order of the three",
    "start": "1455799",
    "end": "1463799"
  },
  {
    "text": "there this is a little bit more complex of an object that has both the",
    "start": "1464200",
    "end": "1469279"
  },
  {
    "text": "Constructor Destructor and a member function and the red lines show the",
    "start": "1469279",
    "end": "1476200"
  },
  {
    "text": "bracketing of construction and destruction and the member calls",
    "start": "1476200",
    "end": "1481480"
  },
  {
    "text": "um this one this Fu object is an object within",
    "start": "1481480",
    "end": "1487240"
  },
  {
    "text": "quaz and so when quaz gets constructed it constructs its members first fu is a",
    "start": "1487240",
    "end": "1494159"
  },
  {
    "text": "member of quaz so it gets constructed in the uh quaz",
    "start": "1494159",
    "end": "1501600"
  },
  {
    "text": "Constructor it calls food. in so that's why the fu in is called and",
    "start": "1502760",
    "end": "1511000"
  },
  {
    "text": "this is before main so you can actually execute code before main because this quaz object is actually getting",
    "start": "1511000",
    "end": "1518200"
  },
  {
    "text": "instantiated right here out in global space and this is uh something that we used to do back in the old days and a",
    "start": "1518200",
    "end": "1523919"
  },
  {
    "text": "lot of people don't know us anymore if you declare a structure you can",
    "start": "1523919",
    "end": "1529640"
  },
  {
    "text": "actually instantiate the variable for that right after the fact and you can actually do a structure Anonymous",
    "start": "1529640",
    "end": "1535760"
  },
  {
    "text": "structure without a name there and then create an object of that type there without and you have to name your",
    "start": "1535760",
    "end": "1542080"
  },
  {
    "text": "variable your instance but the structure itself doesn't have to have a name the compiler internally gives it a magic",
    "start": "1542080",
    "end": "1548840"
  },
  {
    "text": "hidden number that you'll never know about but it's that it's one way of protecting it that people can't cast to",
    "start": "1548840",
    "end": "1555480"
  },
  {
    "text": "your type of object well okay they can there's some nasty stuff they can do do some decal",
    "start": "1555480",
    "end": "1561760"
  },
  {
    "text": "types of what your object the pointer of your object is and so they can figure",
    "start": "1561760",
    "end": "1566799"
  },
  {
    "text": "out what it is and then cast to that um so once we're",
    "start": "1566799",
    "end": "1574000"
  },
  {
    "text": "so quaz causes a foo to be instantiated",
    "start": "1574000",
    "end": "1579360"
  },
  {
    "text": "oh other special thing about this Foo this Fu it's a static member meaning",
    "start": "1579360",
    "end": "1586760"
  },
  {
    "text": "it's not inside the footprint of Fu but it's scoped to that it a static",
    "start": "1586760",
    "end": "1595200"
  },
  {
    "text": "member actually sits out in out in a footprint reserved for it in global",
    "start": "1595200",
    "end": "1601440"
  },
  {
    "text": "memory space it's not part of the Heap if you never use it it's still occupying",
    "start": "1601440",
    "end": "1608080"
  },
  {
    "text": "space out in the global memory area the old rule of if you don't use it you",
    "start": "1608080",
    "end": "1613120"
  },
  {
    "text": "don't pay for it except for you are paying for it because you have memory set aside for it so when you do call it",
    "start": "1613120",
    "end": "1619399"
  },
  {
    "text": "you will it's available for you um something that got",
    "start": "1619399",
    "end": "1626480"
  },
  {
    "text": "added I think with C++ 20 might be might have been 17 in the good old days when we did a",
    "start": "1626480",
    "end": "1634200"
  },
  {
    "text": "static this was just the uh definition of it we had you had to do the",
    "start": "1634200",
    "end": "1640080"
  },
  {
    "text": "Declaration somewhere else out in memory once it's a one definition rule but for",
    "start": "1640080",
    "end": "1647399"
  },
  {
    "text": "an instance of a variable um you would have to have",
    "start": "1647399",
    "end": "1652600"
  },
  {
    "text": "a a quas colon colon Fu and then initialize it in memory by now we now",
    "start": "1652600",
    "end": "1660200"
  },
  {
    "text": "have static in line you don't have to do this the compiler and the Linker will resolve this and will'll ever actually",
    "start": "1660200",
    "end": "1666799"
  },
  {
    "text": "only Define it for you once and so it's only in memory once this is a handy",
    "start": "1666799",
    "end": "1672919"
  },
  {
    "text": "thing okay continuing on so we've got this object con now we're in main so in",
    "start": "1672919",
    "end": "1681399"
  },
  {
    "text": "into main we call",
    "start": "1681399",
    "end": "1687720"
  },
  {
    "text": "Bar do in this bar actually makes a bar",
    "start": "1688120",
    "end": "1693480"
  },
  {
    "text": "object right then and then we can so once it's been constructed then we can call a member on that so the do in so we",
    "start": "1693480",
    "end": "1701519"
  },
  {
    "text": "should see the the bar Constructor uh the do in and the bar",
    "start": "1701519",
    "end": "1707039"
  },
  {
    "text": "Destructor and bar has a static Fu so so we see",
    "start": "1707039",
    "end": "1714600"
  },
  {
    "text": "this whole thing so we have",
    "start": "1714600",
    "end": "1719519"
  },
  {
    "text": "bar uh oh actually bar we doesn't show we don't have the uh the trace",
    "start": "1719679",
    "end": "1725519"
  },
  {
    "text": "statements the see outs in there so we don't actually see it printed out but we have the bar and the do in the",
    "start": "1725519",
    "end": "1733279"
  },
  {
    "text": "construction of the static calls the fu",
    "start": "1733279",
    "end": "1738159"
  },
  {
    "text": "and it we so we so see it's the fu construction uh the",
    "start": "1738480",
    "end": "1744000"
  },
  {
    "text": "fu. it gets called because bar.",
    "start": "1744000",
    "end": "1750039"
  },
  {
    "text": "in uh where am I at here pardon me okay",
    "start": "1750039",
    "end": "1755240"
  },
  {
    "text": "bar do in I think I got a typo in my there should be a Bar Method called",
    "start": "1755240",
    "end": "1761720"
  },
  {
    "text": "dotin which in turn called the",
    "start": "1761720",
    "end": "1768200"
  },
  {
    "text": "bar is a function oh you're right I was thinking class you're right it is a it's a",
    "start": "1768240",
    "end": "1776799"
  },
  {
    "text": "function and come on pointer",
    "start": "1776799",
    "end": "1781880"
  },
  {
    "text": "um the bar function uh also has the static which a",
    "start": "1781880",
    "end": "1788360"
  },
  {
    "text": "function with a static also reserves the memory in on the global memory address",
    "start": "1788360",
    "end": "1796000"
  },
  {
    "text": "space uh so when this object returns it still exists out there so it gets",
    "start": "1796000",
    "end": "1802200"
  },
  {
    "text": "constructed only once you've used it so my pointer was complaining I was holding",
    "start": "1802200",
    "end": "1807519"
  },
  {
    "text": "the button too long um so it gets constructed it's out in the global space the in gets",
    "start": "1807519",
    "end": "1814760"
  },
  {
    "text": "called um the um and then we don't turn around and",
    "start": "1814760",
    "end": "1822880"
  },
  {
    "text": "dist it immediately since it's out in global space it sits out there forever until your applic",
    "start": "1822880",
    "end": "1828799"
  },
  {
    "text": "ends but if you follow the bracketed line of the purple here since the fu in this",
    "start": "1828799",
    "end": "1836559"
  },
  {
    "text": "instance the the static within the bar function was the most recent thing to be",
    "start": "1836559",
    "end": "1842159"
  },
  {
    "text": "constructed it's the most re it would be the first thing to be destructed okay construction destruction",
    "start": "1842159",
    "end": "1848720"
  },
  {
    "text": "balanced out the class object out of after the scope it goes out of order",
    "start": "1848720",
    "end": "1855559"
  },
  {
    "text": "these are clustered remember these are bundled objects quaz is the container that's the static",
    "start": "1855559",
    "end": "1861639"
  },
  {
    "text": "here it gets destroyed then the inline static and it's not because of that it's",
    "start": "1861639",
    "end": "1868360"
  },
  {
    "text": "an a member a static member it's because that's happened to have been when it was the reverse order that it was",
    "start": "1868360",
    "end": "1874720"
  },
  {
    "text": "constructed in memory quaz itself the destructor called the food do",
    "start": "1874720",
    "end": "1881120"
  },
  {
    "text": "in uh there we are the it called the food.",
    "start": "1883000",
    "end": "1888880"
  },
  {
    "text": "in so you can see that uh this member this member still has to exist when the",
    "start": "1888880",
    "end": "1894080"
  },
  {
    "text": "quaz is going away then the foo goes after the quaz has gone away um because",
    "start": "1894080",
    "end": "1900919"
  },
  {
    "text": "the in returns to here this finishes then the foo itself gets distracted because of the order this next the outer",
    "start": "1900919",
    "end": "1908000"
  },
  {
    "text": "Foo was from the first Foo that got called which is",
    "start": "1908000",
    "end": "1914760"
  },
  {
    "text": "actually make sure I'm getting my line matched up here so yeah that's from and this food",
    "start": "1914760",
    "end": "1924080"
  },
  {
    "text": "Destructor is from the original one oh you might",
    "start": "1924080",
    "end": "1931440"
  },
  {
    "text": "follow my color lens oh the static out in the global space that we have so we have all the",
    "start": "1931440",
    "end": "1938240"
  },
  {
    "text": "examples here of a static Fu in global space static Foo in a member and a",
    "start": "1938240",
    "end": "1944039"
  },
  {
    "text": "static Fu U par me static",
    "start": "1944039",
    "end": "1949240"
  },
  {
    "text": "static fu is a global static fu is a local variable and then the static Fu of a",
    "start": "1949240",
    "end": "1957279"
  },
  {
    "text": "that's a member of an object",
    "start": "1957279",
    "end": "1964320"
  },
  {
    "text": "okay um",
    "start": "1964399",
    "end": "1968399"
  },
  {
    "text": "okay let's just go ahead and Skip these we're kind of getting a little behind uh",
    "start": "1981399",
    "end": "1986440"
  },
  {
    "text": "schedule here um this is more pre-imposed main oh to",
    "start": "1986440",
    "end": "1993919"
  },
  {
    "text": "do I was supposed to add myself some notes about",
    "start": "1993919",
    "end": "1998039"
  },
  {
    "text": "this the next slide uh is a better example These Are A B and C objects in",
    "start": "1999360",
    "end": "2008639"
  },
  {
    "text": "different uh compulation units a b and c",
    "start": "2008639",
    "end": "2013760"
  },
  {
    "text": "know nothing about each other except for they are they each are instantiated in",
    "start": "2013760",
    "end": "2019240"
  },
  {
    "text": "their uh space however there's no order we don't know what order these are going",
    "start": "2019240",
    "end": "2024480"
  },
  {
    "text": "to be uh constructed it's as they're found and they'll be constructed in the order the reverse order of that they",
    "start": "2024480",
    "end": "2030880"
  },
  {
    "text": "were constructed so it happened to be in this implementation that they got",
    "start": "2030880",
    "end": "2036080"
  },
  {
    "text": "constructed in order AB see main is called main exits Global space get",
    "start": "2036080",
    "end": "2043200"
  },
  {
    "text": "starts getting cleaned up by the most recent CBA but if you wanted to and this could",
    "start": "2043200",
    "end": "2049720"
  },
  {
    "text": "have been any random order just happens to be how the compiler decided to implement it if you want to force it into certain",
    "start": "2049720",
    "end": "2057800"
  },
  {
    "text": "particular order you make one object aware of the other objects and you make",
    "start": "2057800",
    "end": "2063079"
  },
  {
    "text": "sure that it calls Construction in the appropriate order such that objects are",
    "start": "2063079",
    "end": "2068280"
  },
  {
    "text": "dependent on each other so a when when it's",
    "start": "2068280",
    "end": "2074839"
  },
  {
    "text": "constructed has a local reference of a b object and I say get B it knows nothing",
    "start": "2074839",
    "end": "2081040"
  },
  {
    "text": "here at all about get B except for that there's a global function out there that",
    "start": "2081040",
    "end": "2087320"
  },
  {
    "text": "returns a a reference of a struct b struct b it go get B and it calls an",
    "start": "2087320",
    "end": "2095000"
  },
  {
    "text": "internal function of static function of B May and it has a",
    "start": "2095000",
    "end": "2102280"
  },
  {
    "text": "static local data of this a function",
    "start": "2102280",
    "end": "2107720"
  },
  {
    "text": "that's a shared pointer of type B and it constructs a pointer of type B so now B",
    "start": "2107720",
    "end": "2113920"
  },
  {
    "text": "is constructed oh but um yes um in the",
    "start": "2113920",
    "end": "2119960"
  },
  {
    "text": "process of constructing the b in the makees share actually does a construction take it you know that so we",
    "start": "2119960",
    "end": "2126839"
  },
  {
    "text": "go to construct the B but in the process of constructing B it has a member of a reference of C to get C so we call the",
    "start": "2126839",
    "end": "2134720"
  },
  {
    "text": "get C it calls its make it creates a shared pointer um and then does its",
    "start": "2134720",
    "end": "2143760"
  },
  {
    "text": "Constructor and which spits out that it's of type c unwinds from the stack",
    "start": "2143760",
    "end": "2149839"
  },
  {
    "text": "the The Constructor of B can complete it prints out its B and that unwinds back",
    "start": "2149839",
    "end": "2156880"
  },
  {
    "text": "to a and uh the the a is at the reference B",
    "start": "2156880",
    "end": "2163400"
  },
  {
    "text": "initialized here these in the previous",
    "start": "2163400",
    "end": "2169240"
  },
  {
    "text": "slide each of the objects instantiated itself on their own",
    "start": "2169280",
    "end": "2175640"
  },
  {
    "text": "and in this one no they don't instantiate themselves",
    "start": "2175640",
    "end": "2180760"
  },
  {
    "text": "randomly except for a is kind of the anchor something to get it started it if it's going to instantiate something here",
    "start": "2180760",
    "end": "2187599"
  },
  {
    "text": "it's going to cause the Cascade of reactions that will construct B that will then construct C and so that will",
    "start": "2187599",
    "end": "2193280"
  },
  {
    "text": "give you your order C is first the because it actually finishes being constructed before B and before a this",
    "start": "2193280",
    "end": "2201520"
  },
  {
    "text": "is before main inside main we only print out main um and once Global space is going",
    "start": "2201520",
    "end": "2208000"
  },
  {
    "text": "to get itself cleaned up destructed in reverse order the which is a BC",
    "start": "2208000",
    "end": "2218560"
  },
  {
    "text": "okay inheritance and construction I'm going to try to whiz through this it's it's it's a short 38",
    "start": "2219680",
    "end": "2227800"
  },
  {
    "text": "slides I believe um but it will shows you how when you have class that's a um",
    "start": "2227800",
    "end": "2237240"
  },
  {
    "text": "a a class with the B drives from a and then C drives from uh B and with virtual",
    "start": "2237240",
    "end": "2245359"
  },
  {
    "text": "mechanisms of how when you're in the Constructor uh that you can only call",
    "start": "2245359",
    "end": "2250760"
  },
  {
    "text": "the objects of your class or that have or in inside the onion that have already",
    "start": "2250760",
    "end": "2257160"
  },
  {
    "text": "been constructed you can't call polymorphically out of your Constructor",
    "start": "2257160",
    "end": "2262319"
  },
  {
    "text": "to a class that has not yet been constructed and this is how the polymorphic mechanism Works differently",
    "start": "2262319",
    "end": "2269520"
  },
  {
    "text": "inside of different Constructors so here we have our",
    "start": "2269520",
    "end": "2275119"
  },
  {
    "text": "a the the B from a and C from",
    "start": "2275119",
    "end": "2280359"
  },
  {
    "text": "B so each one of these has the there's a there's one vtable pointer per object",
    "start": "2280839",
    "end": "2289319"
  },
  {
    "text": "there's one uh vtable per object and actually when I say One V",
    "start": "2289319",
    "end": "2296240"
  },
  {
    "text": "table pointer this pointer is at zero offset and it's shared for each of these",
    "start": "2296240",
    "end": "2304359"
  },
  {
    "text": "the vtable themselves are inst static memory they don't change okay then you",
    "start": "2304359",
    "end": "2310160"
  },
  {
    "text": "got the a Constructor the B Constructor and C Constructor and they each have their own destructors",
    "start": "2310160",
    "end": "2316079"
  },
  {
    "text": "too so when you go to construct something you",
    "start": "2316079",
    "end": "2321160"
  },
  {
    "text": "call the Constructor here it actually calls the implementation here first",
    "start": "2321160",
    "end": "2327040"
  },
  {
    "text": "thing it does is C goes to construct its base which then calls its Constructor",
    "start": "2327040",
    "end": "2334920"
  },
  {
    "text": "which then the implementation of the Constructor constuctor uh it calls its",
    "start": "2334920",
    "end": "2340359"
  },
  {
    "text": "base which is the a calls its Constructor um and so then we actually",
    "start": "2340359",
    "end": "2347160"
  },
  {
    "text": "start constructing a you construct local members in order that they're defined so",
    "start": "2347160",
    "end": "2352880"
  },
  {
    "text": "a is defined and the and the strings defined those each get constructed then",
    "start": "2352880",
    "end": "2358040"
  },
  {
    "text": "the V table gets set up there is until you enter the Constructor for a there is",
    "start": "2358040",
    "end": "2365119"
  },
  {
    "text": "no object a there are members that are there but now we are in object a so we",
    "start": "2365119",
    "end": "2371119"
  },
  {
    "text": "actually set up what the V table will be and so we take the a colon colon V table",
    "start": "2371119",
    "end": "2376400"
  },
  {
    "text": "assign that to the V table there we go to call if you if you were to call a",
    "start": "2376400",
    "end": "2381839"
  },
  {
    "text": "virtual function from directly within the Constructor it's effectively magically labeled hidden or",
    "start": "2381839",
    "end": "2389800"
  },
  {
    "text": "or not hidden final and it knows that there are no derived classes outside of here because we're in the Constructor it",
    "start": "2389800",
    "end": "2396800"
  },
  {
    "text": "if you call called a foo function right here it would directly",
    "start": "2396800",
    "end": "2402880"
  },
  {
    "text": "call Foo it would not look it up in the v table because it say there's nothing Beyond here it couldn't be Beyond here",
    "start": "2402880",
    "end": "2408000"
  },
  {
    "text": "therefore it has to be this guy but if you have a local member uh or if you",
    "start": "2408000",
    "end": "2413359"
  },
  {
    "text": "have a function uh that's a member that you call from here it",
    "start": "2413359",
    "end": "2418839"
  },
  {
    "text": "doesn't know that F that we're inside the Constructor there so it's going to call Foo but it's going to do it via the",
    "start": "2418839",
    "end": "2425520"
  },
  {
    "text": "V table it's going to go grab the V table look it up and say oh there's an AOL and Fu function we're going to call",
    "start": "2425520",
    "end": "2431760"
  },
  {
    "text": "that that's the kind of a everybody says that polymorphism takes",
    "start": "2431760",
    "end": "2437280"
  },
  {
    "text": "too long with too many levels of indirection this is an overe exaggeration of how many levels of indirection it is it's actually much",
    "start": "2437280",
    "end": "2444079"
  },
  {
    "text": "quicker it's just a single index lookup so then we we finished with the",
    "start": "2444079",
    "end": "2449480"
  },
  {
    "text": "construction of a we go back out now we go to construct",
    "start": "2449480",
    "end": "2455839"
  },
  {
    "text": "our our members of the b class set up the V table for this and if we go to",
    "start": "2455839",
    "end": "2462079"
  },
  {
    "text": "call our polymorph or our a regular member function again it",
    "start": "2462079",
    "end": "2469240"
  },
  {
    "text": "calls Fu but this time it's calling polymorphically off the vtable which is pointing to this V table so it calls p",
    "start": "2469240",
    "end": "2476920"
  },
  {
    "text": "beue and it would print out beue um we finished that construction",
    "start": "2476920",
    "end": "2483359"
  },
  {
    "text": "there now we wind back out uh so we finished be and we construct the local",
    "start": "2483359",
    "end": "2488560"
  },
  {
    "text": "members here set up the V table for this class then do we do our little",
    "start": "2488560",
    "end": "2494240"
  },
  {
    "text": "polymorphic call again of looking up through the V table which happens to be pointing at the CV table this time and",
    "start": "2494240",
    "end": "2499920"
  },
  {
    "text": "it calls the C colon Fu uh C colon colon Fu",
    "start": "2499920",
    "end": "2505359"
  },
  {
    "text": "function and then so we have finished there so now you have a fully constructed object you can do with it as",
    "start": "2505359",
    "end": "2511640"
  },
  {
    "text": "you want we go to destroy it the whole thing happens in reverse",
    "start": "2511640",
    "end": "2518760"
  },
  {
    "text": "we because there could have been a d class that had been further derived from C we don't C does not know who could",
    "start": "2518760",
    "end": "2526640"
  },
  {
    "text": "have ever inherited from it so it patches back up the vtable pointer to point to its",
    "start": "2526640",
    "end": "2533440"
  },
  {
    "text": "instance of the if its V table so opening curly bracket that's",
    "start": "2533440",
    "end": "2540760"
  },
  {
    "text": "when that effectively happens of the Constructor and Destructor we do our uh",
    "start": "2540760",
    "end": "2546240"
  },
  {
    "text": "call to regular remember does the polymorphic thing and it uh calls the polymorphic Fu virtual Foo",
    "start": "2546240",
    "end": "2554960"
  },
  {
    "text": "implementation now we go to destruct members there is no destructing of an",
    "start": "2554960",
    "end": "2562559"
  },
  {
    "text": "INT you don't need to destruct an INT it's an intrinsic type it doesn't have a",
    "start": "2562559",
    "end": "2568160"
  },
  {
    "text": "Destructor however the string is a complex object it actually does have a constru",
    "start": "2568160",
    "end": "2574160"
  },
  {
    "text": "Destructor so we call that and we or the uh the",
    "start": "2574160",
    "end": "2579680"
  },
  {
    "text": "int now we drill back we're going from the outside in we've destroyed C now",
    "start": "2579680",
    "end": "2585319"
  },
  {
    "text": "we're going to destroy our bases we're going to destroy B and the same type of thing here B we set up the V table we do",
    "start": "2585319",
    "end": "2594920"
  },
  {
    "text": "our polymorphic call within this we're scoped and limited to B we destroy our local members we",
    "start": "2594920",
    "end": "2602839"
  },
  {
    "text": "destroy our base members same thing set up the V table pointer we do our polymorphic call",
    "start": "2602839",
    "end": "2609599"
  },
  {
    "text": "limited to a we destroy the L coal member we walk our way back",
    "start": "2609599",
    "end": "2615920"
  },
  {
    "text": "out and now we're fully",
    "start": "2615920",
    "end": "2619640"
  },
  {
    "text": "destructed um and actually one thing I want to",
    "start": "2621280",
    "end": "2626520"
  },
  {
    "text": "and when we do something in the",
    "start": "2626520",
    "end": "2632559"
  },
  {
    "text": "destructor of a since a doesn't know anything about the further derived",
    "start": "2632559",
    "end": "2639160"
  },
  {
    "text": "objects and the further derived objects are destroyed by this point you couldn't",
    "start": "2639160",
    "end": "2644760"
  },
  {
    "text": "call a function in there because it might attempt to use data that's in the further Drive class since it's been",
    "start": "2644760",
    "end": "2650640"
  },
  {
    "text": "destroyed that's why we're scoped to a so a can never try and reach out of what",
    "start": "2650640",
    "end": "2656440"
  },
  {
    "text": "has now been destructed so that's",
    "start": "2656440",
    "end": "2661680"
  },
  {
    "text": "what okay we have in C you have uh",
    "start": "2662240",
    "end": "2668000"
  },
  {
    "text": "pointer to data and pointer to function regular raw pointers we all know about",
    "start": "2668000",
    "end": "2674920"
  },
  {
    "text": "that you know you can take a pointer an address of a variable you can",
    "start": "2674920",
    "end": "2680480"
  },
  {
    "text": "even take the address of a member of a of a uh",
    "start": "2680480",
    "end": "2685920"
  },
  {
    "text": "struct or you can call a function that will return an address so bar take",
    "start": "2685920",
    "end": "2693240"
  },
  {
    "text": "passing a P1 which is our address of our local I",
    "start": "2693240",
    "end": "2699960"
  },
  {
    "text": "here and bar can do something with it mess with the pointer and return a value",
    "start": "2699960",
    "end": "2705160"
  },
  {
    "text": "and P3 gets assigned the value that's returned you've all been doing that for a long time so this dot I is of this instance",
    "start": "2705160",
    "end": "2715800"
  },
  {
    "text": "of Foo it is not of all foo's just that",
    "start": "2715800",
    "end": "2721559"
  },
  {
    "text": "Foo pointer to function is kind of the same way it actually has to be a actual",
    "start": "2721599",
    "end": "2728839"
  },
  {
    "text": "function that has an actual address that it calls and this is how you read and",
    "start": "2728839",
    "end": "2734319"
  },
  {
    "text": "parse uh this this is the return type of that this is the parameter types and",
    "start": "2734319",
    "end": "2740480"
  },
  {
    "text": "this actually decare defines the a pointer of F Type Fu that's a pointer to",
    "start": "2740480",
    "end": "2746559"
  },
  {
    "text": "function that has to meet this signature of a two two parameters two int",
    "start": "2746559",
    "end": "2752400"
  },
  {
    "text": "parameters that returns an INT and here's this pretty simple",
    "start": "2752400",
    "end": "2757800"
  },
  {
    "text": "example of how we would pass the address of Fu",
    "start": "2757800",
    "end": "2763800"
  },
  {
    "text": "which is here into the bar function and again it happens to need an extra",
    "start": "2763800",
    "end": "2768880"
  },
  {
    "text": "parameter of one so when we call this there's your pointer uh to your function and the your",
    "start": "2768880",
    "end": "2775599"
  },
  {
    "text": "the one that we were passing through in a call poter function uh of what it had been passed",
    "start": "2775599",
    "end": "2781400"
  },
  {
    "text": "in with that so we calls here with the the one we add increment its value and",
    "start": "2781400",
    "end": "2786559"
  },
  {
    "text": "we return that back out and we walk our way back out and so this would return uh",
    "start": "2786559",
    "end": "2791680"
  },
  {
    "text": "a two um it's a little noisy to see this in a as a parameter",
    "start": "2791680",
    "end": "2800720"
  },
  {
    "text": "type name variable declaration especially if it's a really long",
    "start": "2800720",
    "end": "2807440"
  },
  {
    "text": "complex um so well okay here's another example we could create a variable of",
    "start": "2809280",
    "end": "2815040"
  },
  {
    "text": "that type uh as and then the same as we pass it",
    "start": "2815040",
    "end": "2821400"
  },
  {
    "text": "through is that rather than doing a declaring a variable all over the place",
    "start": "2821400",
    "end": "2827920"
  },
  {
    "text": "we can declare a type def this actually declares a type a pointer to function as",
    "start": "2827920",
    "end": "2833559"
  },
  {
    "text": "opposed to a variable point this is a this is a variable pointer to",
    "start": "2833559",
    "end": "2841640"
  },
  {
    "text": "function this is a type pointer to function and from our type of pointer to",
    "start": "2841640",
    "end": "2846680"
  },
  {
    "text": "function function then we can do have a variable of pointer to function that we VI so this simplified our naming quite a",
    "start": "2846680",
    "end": "2853920"
  },
  {
    "text": "bit something a little sloppy about the way C does these there's a star right there saying",
    "start": "2853920",
    "end": "2861440"
  },
  {
    "text": "that that's a pointer you don't have to have that pointer there you have the",
    "start": "2861440",
    "end": "2867400"
  },
  {
    "text": "pointer where you declare it before that we didn't have that there I should have",
    "start": "2867400",
    "end": "2873119"
  },
  {
    "text": "put an there should be an ASC there too a pointer CU we're actually passing as a pointer we're not pointing passing as a",
    "start": "2873119",
    "end": "2880319"
  },
  {
    "text": "function object even though C really doesn't have function objects",
    "start": "2880319",
    "end": "2886000"
  },
  {
    "text": "and in C++ when you go to take an address of a function you have to do the address of it in C it gets a little",
    "start": "2886000",
    "end": "2893480"
  },
  {
    "text": "sloppy of a function name decays to a pointer by",
    "start": "2893480",
    "end": "2900119"
  },
  {
    "text": "itself the same ways an array name declare decays to a point or a function of that type so you don't have to have",
    "start": "2900119",
    "end": "2907880"
  },
  {
    "text": "that here um when you started doing C programming",
    "start": "2907880",
    "end": "2914839"
  },
  {
    "text": "presuming you learned C before C++ your first program is Hello World",
    "start": "2914839",
    "end": "2920800"
  },
  {
    "text": "your second program had an if for conditional branching your third program had a for Loop probably printing out the",
    "start": "2920800",
    "end": "2927240"
  },
  {
    "text": "numbers 0o to nine your fifth one fifth program use a",
    "start": "2927240",
    "end": "2933359"
  },
  {
    "text": "function called Q sort and Q sort would take in a array of numbers or array of",
    "start": "2933359",
    "end": "2939000"
  },
  {
    "text": "anything and sort it for you but you had to give it a function to do the sorting",
    "start": "2939000",
    "end": "2944839"
  },
  {
    "text": "by it so your fifth program and you were using pointer to functions already and you didn't realize it you passed in the",
    "start": "2944839",
    "end": "2953240"
  },
  {
    "text": "compare function into this Q sort and it's the array the the number of them in",
    "start": "2953240",
    "end": "2958799"
  },
  {
    "text": "there and how big the each element was and it would go through and it would compare every elements in there and it",
    "start": "2958799",
    "end": "2965599"
  },
  {
    "text": "would sort them but that's a pointer to function your fifth program and you were doing pointer to functions already very",
    "start": "2965599",
    "end": "2972400"
  },
  {
    "text": "accomplished they didn't tell you why you probably was in your second term before you realized that you were",
    "start": "2972400",
    "end": "2978240"
  },
  {
    "text": "actually doing that if you ever did actually realize the magic you was doing question or no so does that compare",
    "start": "2978240",
    "end": "2985040"
  },
  {
    "text": "expression create like",
    "start": "2985040",
    "end": "2990640"
  },
  {
    "text": "value no what the function is up here itself and it takes two voids of the",
    "start": "2991760",
    "end": "2998480"
  },
  {
    "text": "types it's comparing you have to know what they are and you cast them to what they are so you're comparing A to B and",
    "start": "2998480",
    "end": "3005359"
  },
  {
    "text": "the easiest comparison is subtracting um and it automatically",
    "start": "3005359",
    "end": "3011200"
  },
  {
    "text": "returns if it's negative if it's greater than zero if they're equal or positive",
    "start": "3011200",
    "end": "3016640"
  },
  {
    "text": "or greater than zero positive if with greater than whatever the opposite is um",
    "start": "3016640",
    "end": "3024000"
  },
  {
    "text": "so this doesn't actually construct any thing as we're thinking of a uh n",
    "start": "3024000",
    "end": "3032240"
  },
  {
    "text": "C++ when we would do a Lambda of it constructs an object that the function itself already exists we're just passing",
    "start": "3032240",
    "end": "3039280"
  },
  {
    "text": "it the pointer so when it goes to dreference the pointer internal to their algorithm they're doing the Sorting they",
    "start": "3039280",
    "end": "3045280"
  },
  {
    "text": "just pass it the address of this and it blindly calls it saying compare this void star to this void",
    "start": "3045280",
    "end": "3052520"
  },
  {
    "text": "star function itself is not appointed to that function",
    "start": "3052520",
    "end": "3058160"
  },
  {
    "text": "um a the function it's in C the function",
    "start": "3058160",
    "end": "3064240"
  },
  {
    "text": "decays to a PO or two of that of that function so compare is a poin or two",
    "start": "3064240",
    "end": "3072040"
  },
  {
    "text": "function of this compare it the parameter inside of Q",
    "start": "3072040",
    "end": "3079000"
  },
  {
    "text": "sort um looks like one of these or the",
    "start": "3079760",
    "end": "3084880"
  },
  {
    "text": "actual parameter coming through the list and actually I'll go back a little bit further to one it's a little bit",
    "start": "3084880",
    "end": "3092079"
  },
  {
    "text": "F the the Q sword itself if you look up the definition of it it has something",
    "start": "3092079",
    "end": "3098799"
  },
  {
    "text": "that looks like a pointer to function something like this which is the type th this is all the type and this is the",
    "start": "3098799",
    "end": "3105839"
  },
  {
    "text": "instance of that variable that's passed through um so when you pass the address",
    "start": "3105839",
    "end": "3111520"
  },
  {
    "text": "of your comp the compare function um internally it know it it's",
    "start": "3111520",
    "end": "3118119"
  },
  {
    "text": "that variable that's being caught in that function call looks something like that of a puu or a pointer to function",
    "start": "3118119",
    "end": "3125760"
  },
  {
    "text": "that then it can invoke and call am I clear as mud on that or am I",
    "start": "3125760",
    "end": "3131160"
  },
  {
    "text": "confus okay um so now",
    "start": "3131160",
    "end": "3139319"
  },
  {
    "text": "in uh C++ we have a pointer to member function and there's a little looks",
    "start": "3139319",
    "end": "3147000"
  },
  {
    "text": "symmetrical we have a a type in a star and a set of types in a star but here",
    "start": "3147000",
    "end": "3155160"
  },
  {
    "text": "we're declaring a type or a class type on it or um so it looks very symmetrical",
    "start": "3155160",
    "end": "3162880"
  },
  {
    "text": "but when we take an address of a function um of a class it's the it there",
    "start": "3162880",
    "end": "3171520"
  },
  {
    "text": "is a instance or the the function that we pass through very similar to in C but",
    "start": "3171520",
    "end": "3177799"
  },
  {
    "text": "there's some more magic that happens there so in C we've seen a code that does this",
    "start": "3177799",
    "end": "3186640"
  },
  {
    "text": "already that where we have a pointer to function returns an INT takes an INT and",
    "start": "3186640",
    "end": "3192760"
  },
  {
    "text": "we have a member uh function of Fu that returns an INT and takes an INT if we have a",
    "start": "3192760",
    "end": "3200119"
  },
  {
    "text": "pointer to function of type Fu these are of different types this is of this is just a pointer to function this is a",
    "start": "3200119",
    "end": "3206960"
  },
  {
    "text": "function of Fu that will not compile what we need to do is we declare",
    "start": "3206960",
    "end": "3215920"
  },
  {
    "text": "a pointer of type Fu pointer to member function with the it's the returns an",
    "start": "3215920",
    "end": "3223040"
  },
  {
    "text": "INT and takes an INT when we take the address here we can assign this now",
    "start": "3223040",
    "end": "3228119"
  },
  {
    "text": "something else that happens being that this is of type Fu we have to pass it",
    "start": "3228119",
    "end": "3234119"
  },
  {
    "text": "what object it's going to be operating on so we have our object uh Fu that has",
    "start": "3234119",
    "end": "3241040"
  },
  {
    "text": "we've initialized the value 10 we go to call pointer to member [Music]",
    "start": "3241040",
    "end": "3246960"
  },
  {
    "text": "Fu or pardon yeah the pardon me that was assigned bar poter member function calls",
    "start": "3246960",
    "end": "3253359"
  },
  {
    "text": "here it using the object that's initialized with the value 10 and so",
    "start": "3253359",
    "end": "3258559"
  },
  {
    "text": "then we and we call it with 20 so we add the 10 from the I with a 20 pass in and",
    "start": "3258559",
    "end": "3265200"
  },
  {
    "text": "it would return 30 um yes do you have to do that on static",
    "start": "3265200",
    "end": "3271880"
  },
  {
    "text": "functions as well static functions because they don't have an object with",
    "start": "3271880",
    "end": "3277000"
  },
  {
    "text": "them they don't need to have the uh the function type declaration you can use a",
    "start": "3277000",
    "end": "3282359"
  },
  {
    "text": "a CP pointer uh type to call them",
    "start": "3282359",
    "end": "3290079"
  },
  {
    "text": "um this is a now here comes a little",
    "start": "3291559",
    "end": "3298280"
  },
  {
    "text": "wrinkle when we take an address of a function here we're saying Fu bar we",
    "start": "3298280",
    "end": "3304680"
  },
  {
    "text": "take the address of the bar function okay address of the bar function wait a",
    "start": "3304680",
    "end": "3310599"
  },
  {
    "text": "minute this is virtual and it also derives from that and there's another bar function what address are we getting",
    "start": "3310599",
    "end": "3318440"
  },
  {
    "text": "which function is that well it turns out um well and I want to actually point",
    "start": "3318440",
    "end": "3326720"
  },
  {
    "text": "of clarification uh when we call it of an object we're this is a pointer of Fu",
    "start": "3326720",
    "end": "3333319"
  },
  {
    "text": "type this is an object of Fu two but we're still calling the poter M function",
    "start": "3333319",
    "end": "3339160"
  },
  {
    "text": "because bar is a member in the hierarchy of fuu",
    "start": "3339160",
    "end": "3345119"
  },
  {
    "text": "so we can legitimately point at that but here we again virtual which one is it going to call we actually have an",
    "start": "3345119",
    "end": "3350319"
  },
  {
    "text": "instance of this but we're calling it off one of these and just to show that it's actually an an",
    "start": "3350319",
    "end": "3356920"
  },
  {
    "text": "an object to that we can cast it to the base and try and call P Fu of pointer to",
    "start": "3356920",
    "end": "3363680"
  },
  {
    "text": "function bar it's still going to be some confusion about which one you're going to call and this is what happens oh and",
    "start": "3363680",
    "end": "3372039"
  },
  {
    "text": "actually I wanted to show you something else rather than doing type defa is so",
    "start": "3372039",
    "end": "3378319"
  },
  {
    "text": "it's it's pretty Modern Magic way to declare a new type but that's C we can't",
    "start": "3378319",
    "end": "3384599"
  },
  {
    "text": "do things the way C does we have to have nicer toys so we do using we declare a type of",
    "start": "3384599",
    "end": "3394280"
  },
  {
    "text": "using pointer to member function just the same way that it looked in the type def but we're using this now and so",
    "start": "3394280",
    "end": "3400440"
  },
  {
    "text": "we're creating this Alias of a type that exists from here on",
    "start": "3400440",
    "end": "3405520"
  },
  {
    "text": "down this type def exists from here to for the to the end of the compilation",
    "start": "3405520",
    "end": "3412319"
  },
  {
    "text": "unit exists forever however with the using we can put it using inside a",
    "start": "3412319",
    "end": "3419720"
  },
  {
    "text": "scope and so anytime you wanted to use this only exists inside the the scope of",
    "start": "3419720",
    "end": "3426760"
  },
  {
    "text": "using a foo so anytime we want to use this pointer member function we have to say Foo pointer to member address of bar",
    "start": "3426760",
    "end": "3435480"
  },
  {
    "text": "okay but we still have the problem we have two bars",
    "start": "3435480",
    "end": "3442000"
  },
  {
    "text": "so little clever series of animations",
    "start": "3442000",
    "end": "3447039"
  },
  {
    "text": "the compiler creates an extra function for you okay the V",
    "start": "3447039",
    "end": "3454280"
  },
  {
    "text": "table you know Fu has its vtable Fu 2 has a v table it has its bar and it has",
    "start": "3454280",
    "end": "3462319"
  },
  {
    "text": "its bar so we create it the compiler creates a thunk function for you we'll",
    "start": "3462319",
    "end": "3467920"
  },
  {
    "text": "call it bar thunk a thk is just a translation layer between a series of objects and changes",
    "start": "3467920",
    "end": "3474920"
  },
  {
    "text": "how they kind of react with their data um in this you you you won't actually",
    "start": "3474920",
    "end": "3481400"
  },
  {
    "text": "see that name when you go to look it up but there's some a magic hidden function",
    "start": "3481400",
    "end": "3486520"
  },
  {
    "text": "inside that the compiler supplies and what this thunk does is it goes and",
    "start": "3486520",
    "end": "3491599"
  },
  {
    "text": "looks up what is in the zero position of the vtable and passes that data through",
    "start": "3491599",
    "end": "3499119"
  },
  {
    "text": "so this would go so this object is even though it's of a p f of Fu type it's",
    "start": "3499119",
    "end": "3507680"
  },
  {
    "text": "pointing at a fu2 object which means the vtable pointer is pointing at this guy",
    "start": "3507680",
    "end": "3513079"
  },
  {
    "text": "so this call here oh and I think I got animations for this okay we we put the",
    "start": "3513079",
    "end": "3518640"
  },
  {
    "text": "address in and uh when we go to call it via the pointer to member function it",
    "start": "3518640",
    "end": "3525200"
  },
  {
    "text": "looks up to that which then says oh we're going to call the thunk function this which is not virtual",
    "start": "3525200",
    "end": "3532240"
  },
  {
    "text": "however it says we need to undo the reference the undo the or actually do",
    "start": "3532240",
    "end": "3539000"
  },
  {
    "text": "the the virtual call so it goes to look up the vtable V table points to the fu2",
    "start": "3539000",
    "end": "3547720"
  },
  {
    "text": "instance that then gets uh the fu2 bar",
    "start": "3547720",
    "end": "3553359"
  },
  {
    "text": "which would passes it to here this call Operator actually calls this bar and",
    "start": "3553359",
    "end": "3559200"
  },
  {
    "text": "this bar function gets executed that returns I * J as opposed to in the base",
    "start": "3559200",
    "end": "3565599"
  },
  {
    "text": "it's I plus J and that was just for the fun of it of",
    "start": "3565599",
    "end": "3570640"
  },
  {
    "text": "demonstrating that it was a different function and it would re return rewinds",
    "start": "3570640",
    "end": "3576520"
  },
  {
    "text": "back on the stack I guess I didn't have a good",
    "start": "3576520",
    "end": "3582640"
  },
  {
    "text": "closing animation for this um but that would complete this call so it would be",
    "start": "3582640",
    "end": "3589520"
  },
  {
    "text": "20 times what the initialization was of the 10 so it would return 200 as opposed",
    "start": "3589520",
    "end": "3594920"
  },
  {
    "text": "to if we were calling here here would have been returned 30 so it creates an",
    "start": "3594920",
    "end": "3600400"
  },
  {
    "text": "additional function for you that you never knew about so it can figure out so",
    "start": "3600400",
    "end": "3607559"
  },
  {
    "text": "the polymorphic mechanism um on this uh for you",
    "start": "3607559",
    "end": "3615720"
  },
  {
    "text": "um okay just for we're technically out of time and I got like 50 slides to go",
    "start": "3615720",
    "end": "3621799"
  },
  {
    "text": "but they're quick animations if any of you need to go it's lunchtime I don't want eat into your lunch break and we're",
    "start": "3621799",
    "end": "3627440"
  },
  {
    "text": "going to have to get cut off on the video here in a few minutes anyway so we can't go over for that um fundamental theorem uh for",
    "start": "3627440",
    "end": "3635880"
  },
  {
    "text": "software engineering oh we actually have two Banks of uh slides to go this is the pointer to member function this is",
    "start": "3635880",
    "end": "3642079"
  },
  {
    "text": "something or not member pointer to member data um any problem can be solved by",
    "start": "3642079",
    "end": "3649559"
  },
  {
    "text": "adding a layer of indirection pointer to member data uh this is isn't really a pointer",
    "start": "3649559",
    "end": "3657680"
  },
  {
    "text": "it acts kind of like a pointer sometimes but it's a data morphic polymorphic",
    "start": "3657680",
    "end": "3664799"
  },
  {
    "text": "pointer so in normal uh",
    "start": "3664799",
    "end": "3671160"
  },
  {
    "text": "array or normal member stuff we have two different array or two different strs",
    "start": "3671160",
    "end": "3678599"
  },
  {
    "text": "we've initialized ABC D and we have two instances of 2 357 11 13 17 19 and we",
    "start": "3678599",
    "end": "3686920"
  },
  {
    "text": "can address each of those by saying a and so Fu one and F two you get two",
    "start": "3686920",
    "end": "3693920"
  },
  {
    "text": "and 11 and we can all get them via add looking up from a pointer of off of c",
    "start": "3693920",
    "end": "3700400"
  },
  {
    "text": "f1. c would give you a five because it's in the the C implement the",
    "start": "3700400",
    "end": "3706119"
  },
  {
    "text": "C variable and the same with Fu 2 I give you that but what if you didn't",
    "start": "3706119",
    "end": "3712319"
  },
  {
    "text": "actually want to have to say. a what if you wanted to say well can we use a",
    "start": "3712319",
    "end": "3718240"
  },
  {
    "text": "variable to tell us what variable we're looking at so we can",
    "start": "3718240",
    "end": "3723960"
  },
  {
    "text": "take the declare a pointer to member",
    "start": "3723960",
    "end": "3729279"
  },
  {
    "text": "data um and give it the struct uh a notice this is the capital",
    "start": "3729279",
    "end": "3737160"
  },
  {
    "text": "Fu that is the type it is not an instance and so it says then we when we",
    "start": "3737160",
    "end": "3743200"
  },
  {
    "text": "go to call this we say FU do whatever this variable was of the A and it looks",
    "start": "3743200",
    "end": "3749119"
  },
  {
    "text": "it up and it Returns the two and the F two it looks up the a off of that and",
    "start": "3749119",
    "end": "3757000"
  },
  {
    "text": "returns uh the a variable there same when you're call an object via pointer",
    "start": "3757000",
    "end": "3763200"
  },
  {
    "text": "this is being this is an object you actually have to call it same as pointer to to function the pointer to data you",
    "start": "3763200",
    "end": "3770200"
  },
  {
    "text": "have to tell what object it's dealing with so Fu one pointer",
    "start": "3770200",
    "end": "3776480"
  },
  {
    "text": "to to P the member data of type c it",
    "start": "3776480",
    "end": "3781520"
  },
  {
    "text": "returns C the pro programmatically it looks it up mean why would you want to do",
    "start": "3781520",
    "end": "3787920"
  },
  {
    "text": "that oh and actually we had a a little bit of trivia here first what is",
    "start": "3787920",
    "end": "3794839"
  },
  {
    "text": "null yeah okay but what language is it",
    "start": "3794839",
    "end": "3801440"
  },
  {
    "text": "defined in it's a c thing",
    "start": "3801440",
    "end": "3806480"
  },
  {
    "text": "we're better than that we have our own what is an old",
    "start": "3806480",
    "end": "3814278"
  },
  {
    "text": "pointer it's an actual it's it's it's it's not a pound defin",
    "start": "3814400",
    "end": "3821880"
  },
  {
    "text": "value of zero it is known to be saying you're not pointing at",
    "start": "3821880",
    "end": "3828039"
  },
  {
    "text": "anything it zero no it's not okay and",
    "start": "3828039",
    "end": "3833640"
  },
  {
    "text": "here's some funky little magic well okay since I've already told you no it's not",
    "start": "3833640",
    "end": "3839359"
  },
  {
    "text": "zero anytime you pointing at something and it has an address zero you say it's",
    "start": "3839359",
    "end": "3846839"
  },
  {
    "text": "a null pointer but okay a member data pointer has a mechanism you cast any",
    "start": "3846839",
    "end": "3854160"
  },
  {
    "text": "well you cast you do an if on any pointer and it will return faults if it",
    "start": "3854160",
    "end": "3860079"
  },
  {
    "text": "if it's not pointing anything and true if it is and normally we just associate that with it's a zero value or it's a",
    "start": "3860079",
    "end": "3867160"
  },
  {
    "text": "non-zero value however if",
    "start": "3867160",
    "end": "3873559"
  },
  {
    "text": "we take our pointer uh member data of an A and we Cast Away the pointer of it and",
    "start": "3874119",
    "end": "3883000"
  },
  {
    "text": "look at the data underneath it it's a type zero a b is of type four or four a",
    "start": "3883000",
    "end": "3889680"
  },
  {
    "text": "c is type is eight and D is value 12 wait a minute those are",
    "start": "3889680",
    "end": "3897079"
  },
  {
    "text": "offsets into this structure here technically all",
    "start": "3897079",
    "end": "3903240"
  },
  {
    "text": "pointers are offsets this offset from the beginning of memory these are offsets from the beginning of the",
    "start": "3903240",
    "end": "3909279"
  },
  {
    "text": "structure so when we go uh looking up",
    "start": "3909279",
    "end": "3916400"
  },
  {
    "text": "through one of these this is doing this is a pointer to object and then offset",
    "start": "3918680",
    "end": "3925119"
  },
  {
    "text": "within the object okay so but what happens if what",
    "start": "3925119",
    "end": "3931839"
  },
  {
    "text": "if we're pointing at nothing we we test the pointer it returns zero",
    "start": "3931839",
    "end": "3939520"
  },
  {
    "text": "saying that it's unassigned but wait a minute we we did that up here zero",
    "start": "3939520",
    "end": "3945559"
  },
  {
    "text": "unassigned but zero is assigned it it was assigned too A A how can it be",
    "start": "3945559",
    "end": "3952200"
  },
  {
    "text": "assigned and not assigned at the same time oops and that is",
    "start": "3952200",
    "end": "3958960"
  },
  {
    "text": "because okay the it's zero because it was tested and it was not assigned",
    "start": "3958960",
    "end": "3965119"
  },
  {
    "text": "however if we Cast Away what the actual value is there's a minus one",
    "start": "3965119",
    "end": "3970599"
  },
  {
    "text": "there null in member pointer functions is minus one so you know people tell you the",
    "start": "3970599",
    "end": "3978839"
  },
  {
    "text": "standard doesn't Define what the null value is you can it could be anything",
    "start": "3978839",
    "end": "3984240"
  },
  {
    "text": "but it's a lot of no one has ever able to really say well here's a platform where null is not zero",
    "start": "3984240",
    "end": "3993480"
  },
  {
    "text": "here is an example of how the C stand where C++ is doing a",
    "start": "3993480",
    "end": "4000160"
  },
  {
    "text": "uh a nonzero null and the reason it's a null it's",
    "start": "4000160",
    "end": "4006599"
  },
  {
    "text": "it's saying it's an offset it's not really a null but a pointer offset is a pointer a pointer is an offset",
    "start": "4006599",
    "end": "4013599"
  },
  {
    "text": "so um okay so this is our C style sort we had",
    "start": "4013599",
    "end": "4023200"
  },
  {
    "text": "we already saw this slide here's a C++ version of it you go out and get some",
    "start": "4023200",
    "end": "4028640"
  },
  {
    "text": "data some Big Blob collection and you say sort and you say we're going to sort on this vector and we're going to sort",
    "start": "4028640",
    "end": "4036119"
  },
  {
    "text": "from the beginning to the end and we're going to pass it a Lambda rather than declare a separate pointer",
    "start": "4036119",
    "end": "4042279"
  },
  {
    "text": "function and it's going to call us back every time with it and compare a left hand side to a right hand side of a but",
    "start": "4042279",
    "end": "4049599"
  },
  {
    "text": "now if we wanted to sort of some that wasn't a we wanted to sort of B or C or D we would have to have a sort that was",
    "start": "4049599",
    "end": "4057960"
  },
  {
    "text": "sort of a sort of B sort of D or pass in the Lambda that did the",
    "start": "4057960",
    "end": "4065000"
  },
  {
    "text": "comparison it was of the a or the b or the c or the D",
    "start": "4065000",
    "end": "4071520"
  },
  {
    "text": "or how about if we do a sort and just say sort by the a variable sort by the B",
    "start": "4071520",
    "end": "4077880"
  },
  {
    "text": "variable sort by the C so we we call the sort we pass in the index that of the",
    "start": "4077880",
    "end": "4085000"
  },
  {
    "text": "data we wanted to compare um we call the",
    "start": "4085000",
    "end": "4090079"
  },
  {
    "text": "Lambda um since this is a value that we want to be captured in used inside the",
    "start": "4090079",
    "end": "4096880"
  },
  {
    "text": "Lambda we have to capture it so when we call it in here we say left left hand side dot star key or our index and right",
    "start": "4096880",
    "end": "4106120"
  },
  {
    "text": "hand side. key um and so it does the sort in there",
    "start": "4106120",
    "end": "4112000"
  },
  {
    "text": "view that what if sorting by one variable isn't good enough you",
    "start": "4112000",
    "end": "4118758"
  },
  {
    "text": "wanted to sort by b and",
    "start": "4118759",
    "end": "4123880"
  },
  {
    "text": "a you could call a sort it said sort by B and sort by a or what if you wanted to",
    "start": "4125319",
    "end": "4131560"
  },
  {
    "text": "say sort by C then by D then by e so I created a further complication here",
    "start": "4131560",
    "end": "4140880"
  },
  {
    "text": "I have a sort function that can take any number of keys and then I sort from",
    "start": "4140880",
    "end": "4146278"
  },
  {
    "text": "beginning to end and the Lambda calls a compare function where I give it all of the keys to sort by left hand side right",
    "start": "4146279",
    "end": "4154758"
  },
  {
    "text": "hand side and all the keys which then calls this compare function right hand",
    "start": "4154759",
    "end": "4160000"
  },
  {
    "text": "so left hand side right hand side Auto of the first instance of the key and then all the rest",
    "start": "4160000",
    "end": "4165960"
  },
  {
    "text": "and then it goes through and does the comparison is the first key less than is it greater than is there more keys then",
    "start": "4165960",
    "end": "4173440"
  },
  {
    "text": "we'll go look into what the next set of keys are so we've already stripped off",
    "start": "4173440",
    "end": "4179400"
  },
  {
    "text": "the first one in the uh uh in in all these list of",
    "start": "4179400",
    "end": "4184798"
  },
  {
    "text": "keys goes effectively recursive um and we get the the first",
    "start": "4184799",
    "end": "4192238"
  },
  {
    "text": "key again and the rest and we Compares you know so this is in this example this",
    "start": "4192239",
    "end": "4198600"
  },
  {
    "text": "is C D and A and E so first time through we ripped off the C next time through we",
    "start": "4198600",
    "end": "4204920"
  },
  {
    "text": "rip off the D and then next time through we test the E there is no more keys it",
    "start": "4204920",
    "end": "4211840"
  },
  {
    "text": "falls through and it would be false most of the time you would have already found it's either greater than or less than the only time it's really going to fall",
    "start": "4211840",
    "end": "4217719"
  },
  {
    "text": "through is if they're equal so this is how you can sort by more than one thing at a time so um",
    "start": "4217719",
    "end": "4227320"
  },
  {
    "text": "I had an entire another section to go we're way over time um I'll let the uh",
    "start": "4227600",
    "end": "4233080"
  },
  {
    "text": "video guy stop his uh recording and get his lunch um if people want to go how",
    "start": "4233080",
    "end": "4239280"
  },
  {
    "text": "through how stack frames do it we can do that not recorded",
    "start": "4239280",
    "end": "4244679"
  },
  {
    "text": "So if people want to stay for that and the video guy can kill the video so we're not too far",
    "start": "4244679",
    "end": "4251040"
  },
  {
    "text": "over H oh okay",
    "start": "4251040",
    "end": "4257239"
  },
  {
    "text": "so okay stack frames when you go when your program",
    "start": "4259280",
    "end": "4265400"
  },
  {
    "text": "starts up there's some startup code that is supplied by the uh C runtime C++",
    "start": "4265400",
    "end": "4273960"
  },
  {
    "text": "runtime and it looks this is a simplified view of this it's a simplified",
    "start": "4273960",
    "end": "4279760"
  },
  {
    "text": "x86 uh compiler um or ex program",
    "start": "4279760",
    "end": "4285440"
  },
  {
    "text": "and what it does the first thing it do it pushes the parameters the argv then",
    "start": "4285440",
    "end": "4290600"
  },
  {
    "text": "the argc this is uh a normal C deal reverse order of arguments as they're declared",
    "start": "4290600",
    "end": "4297320"
  },
  {
    "text": "they get pushed on the stack then it calls your main program saving the return address the first thing your",
    "start": "4297320",
    "end": "4304080"
  },
  {
    "text": "program does is save where you were calling from its base pointer and establishes its own base pointer the",
    "start": "4304080",
    "end": "4311520"
  },
  {
    "text": "base pointer is where the stack is you got the arguments your base pointer minus 8 base pointer minus 12 the is the",
    "start": "4311520",
    "end": "4319360"
  },
  {
    "text": "arc arv and the return address from where we were at the",
    "start": "4319360",
    "end": "4325239"
  },
  {
    "text": "previous uh base pointer and now we assign the base pointer to the middle of the stack of the frame where we're at",
    "start": "4325239",
    "end": "4332920"
  },
  {
    "text": "now we know we're going to have so many local variables and they're going to take up this amount of",
    "start": "4332920",
    "end": "4339400"
  },
  {
    "text": "storage therefore we can just subtract off from the stack pointer the size of all of our local variables",
    "start": "4339400",
    "end": "4345960"
  },
  {
    "text": "if there was any initialization to be done that they would be called now that would initialize each of the local",
    "start": "4345960",
    "end": "4351600"
  },
  {
    "text": "variables also if our local function was going to use uh any pro any CPU",
    "start": "4351600",
    "end": "4357880"
  },
  {
    "text": "registers that needed to be saved they would be saved and pushed at this point",
    "start": "4357880",
    "end": "4363199"
  },
  {
    "text": "also we go through and our main function is going to call Funk one but so we got",
    "start": "4363199",
    "end": "4370159"
  },
  {
    "text": "parameters we're going to passing into Funk one so we push the first parameter push you know whatever else parameters",
    "start": "4370159",
    "end": "4376239"
  },
  {
    "text": "and actually when I say n it's actually push the last parameter each down until you get to the first one they're in",
    "start": "4376239",
    "end": "4382159"
  },
  {
    "text": "reverse order uh the return address gets pushed we we jump to Funk two we save the base",
    "start": "4382159",
    "end": "4389560"
  },
  {
    "text": "pointer and we set up the new base pointer we save space for our local",
    "start": "4389560",
    "end": "4395400"
  },
  {
    "text": "variables we um thought I missed one step",
    "start": "4395400",
    "end": "4403440"
  },
  {
    "text": "here um oh see yes so we set P set push the parameters that we're going to be calling to Funk two uh we call Funk two",
    "start": "4403800",
    "end": "4411120"
  },
  {
    "text": "we save the return address we save the base pointer we set up what the new base pointer is going to be in our local",
    "start": "4411120",
    "end": "4418159"
  },
  {
    "text": "variables at this point we're at the deepest point of the stack and we we haven't really bothered to show this",
    "start": "4418159",
    "end": "4424120"
  },
  {
    "text": "here but the um normal in this calling convention the",
    "start": "4424120",
    "end": "4431080"
  },
  {
    "text": "return parameter is in the ax register um and so you would put the value in the",
    "start": "4431080",
    "end": "4437440"
  },
  {
    "text": "ax and it would go to unwind the stack but while we're here we we know our",
    "start": "4437440",
    "end": "4443520"
  },
  {
    "text": "instruction pointer is pointing at the move ax that's in the middle of the function Fu or of a funk two when we",
    "start": "4443520",
    "end": "4450280"
  },
  {
    "text": "know that by getting the address and we can look it up in the symbol table and we know that we're in that space so we",
    "start": "4450280",
    "end": "4456520"
  },
  {
    "text": "know we're in Funk 2 so we can do that we can look back on the stack and say we came from the return address we came",
    "start": "4456520",
    "end": "4463639"
  },
  {
    "text": "from was in the middle of one because we have the address and we look that up in",
    "start": "4463639",
    "end": "4468800"
  },
  {
    "text": "the symbol table we also have our base pointer that",
    "start": "4468800",
    "end": "4473960"
  },
  {
    "text": "points up to our previous uh stack frame and from there one notch up from that we",
    "start": "4473960",
    "end": "4479600"
  },
  {
    "text": "look at our return address we knows we were in Maine and uh so we can continue",
    "start": "4479600",
    "end": "4485480"
  },
  {
    "text": "walking back up the stack and the return address we know we were in startup and then we walk back up the stack again and",
    "start": "4485480",
    "end": "4492719"
  },
  {
    "text": "at some point there's a null pointer and then we stop walking through the startup",
    "start": "4492719",
    "end": "4498040"
  },
  {
    "text": "code startup code is probably actually five or six levels deep in functions this is just an",
    "start": "4498040",
    "end": "4504080"
  },
  {
    "text": "oversimplification so when people talk about walking the stack it's a link list",
    "start": "4504080",
    "end": "4509520"
  },
  {
    "text": "we're stepping through each of the the uh steps walking back up and looking up the functions at each of those spots now",
    "start": "4509520",
    "end": "4517199"
  },
  {
    "text": "unwinding the stack um we moved our return value into",
    "start": "4517199",
    "end": "4523040"
  },
  {
    "text": "the ax register we take the stack pointer which our stack",
    "start": "4523040",
    "end": "4529960"
  },
  {
    "text": "pointer was pointing at the last spot where we were doing our local variables",
    "start": "4529960",
    "end": "4536080"
  },
  {
    "text": "oh and another thing on the when we're walking back on this uh this as we're",
    "start": "4536080",
    "end": "4542719"
  },
  {
    "text": "walking each stack frame back when we're in this function we can look back and",
    "start": "4542719",
    "end": "4547920"
  },
  {
    "text": "see what all of the parameters were if we know what this function is we know the the symbols for it and we know the",
    "start": "4547920",
    "end": "4554360"
  },
  {
    "text": "addresses of the offsets of each of the parameters that were being passed into",
    "start": "4554360",
    "end": "4559800"
  },
  {
    "text": "it and the address of all of the local variables and these are base pointer",
    "start": "4559800",
    "end": "4565199"
  },
  {
    "text": "plus what plus whatever all the way through plus n parameters being passed",
    "start": "4565199",
    "end": "4570560"
  },
  {
    "text": "into your function our base Point are minus 8 minus whatever minus n for",
    "start": "4570560",
    "end": "4575639"
  },
  {
    "text": "however far back we're going and we can do that all the way back up to here here",
    "start": "4575639",
    "end": "4580920"
  },
  {
    "text": "we don't know what the local variables are and what the par uh with the parameters were called into this",
    "start": "4580920",
    "end": "4586840"
  },
  {
    "text": "function so we just kind of you may see garbage on the stack there and be able to infer what some of those are but we",
    "start": "4586840",
    "end": "4593880"
  },
  {
    "text": "don't know since we know the types here we can look them up and use",
    "start": "4593880",
    "end": "4598960"
  },
  {
    "text": "them okay so we're unwinding we restore the stack pointer back to where our base",
    "start": "4598960",
    "end": "4606199"
  },
  {
    "text": "pointer was because our base pointer got set up from what the stack pointer was before we added that offset in the",
    "start": "4606199",
    "end": "4611400"
  },
  {
    "text": "process of doing that it orphans these values on the stack we go back get the",
    "start": "4611400",
    "end": "4616880"
  },
  {
    "text": "old base pointer we step back um we return it look gets the",
    "start": "4616880",
    "end": "4624719"
  },
  {
    "text": "return address um and and returns to that point in the function that had called",
    "start": "4624719",
    "end": "4631400"
  },
  {
    "text": "us we step back up we uh subtract off we",
    "start": "4631400",
    "end": "4638040"
  },
  {
    "text": "add back on meaning we subtract off the parameters we had pushed we knew we pushed",
    "start": "4638040",
    "end": "4645000"
  },
  {
    "text": "know I did through n but there was parameter 1 parameter 2 and parameter n",
    "start": "4645000",
    "end": "4650520"
  },
  {
    "text": "we only labeled two different pushes but that would have been a minimum of 12 bytes so it would have been adding the",
    "start": "4650520",
    "end": "4657239"
  },
  {
    "text": "size of 12 to the stack pointer which would then rewind the stack pointer back to here orphaning this data on the stack",
    "start": "4657239",
    "end": "4665159"
  },
  {
    "text": "that data is still actually out there and it's called it's kind of pixel turds",
    "start": "4665159",
    "end": "4670280"
  },
  {
    "text": "they get left behind on the stack and people can find them and that's why some people are get real Paranoid by cleaning",
    "start": "4670280",
    "end": "4675960"
  },
  {
    "text": "up the stack below them or their variables because they don't want someone to be able to just walk through",
    "start": "4675960",
    "end": "4681480"
  },
  {
    "text": "their old stack and figure out what their secrets were okay we unwinding here",
    "start": "4681480",
    "end": "4688639"
  },
  {
    "text": "again uh get our base pointer resent the previous we're ignoring things get her",
    "start": "4688639",
    "end": "4694719"
  },
  {
    "text": "to return address Rec call the function where we came from and we want rewinding back and back until we return back to",
    "start": "4694719",
    "end": "4703199"
  },
  {
    "text": "the startup routine and we returned in the ax register we had been",
    "start": "4703199",
    "end": "4709159"
  },
  {
    "text": "passing up and up and up what our return value was all along and we return that",
    "start": "4709159",
    "end": "4715320"
  },
  {
    "text": "ax value to our startup routine the startup routine goes to called the operating system exit passing at the",
    "start": "4715320",
    "end": "4721320"
  },
  {
    "text": "return value and so whatever value we had computed is what the operating system",
    "start": "4721320",
    "end": "4728280"
  },
  {
    "text": "will see in Linux or Unix you see that and people can test that environment",
    "start": "4728280",
    "end": "4733880"
  },
  {
    "text": "variable to know what the return value was to assume if there was an error or",
    "start": "4733880",
    "end": "4739120"
  },
  {
    "text": "not okay so that was that example there so what did we",
    "start": "4739120",
    "end": "4744920"
  },
  {
    "text": "learn a lot of how inheritance uh versus aggregation whether it's a local",
    "start": "4744920",
    "end": "4751159"
  },
  {
    "text": "variable or it's a base variable um the destruction in reverse order first shall",
    "start": "4751159",
    "end": "4756320"
  },
  {
    "text": "be last uh a lot of how the C Constructor and Destructor virtual",
    "start": "4756320",
    "end": "4762600"
  },
  {
    "text": "mechanism ties in how the VP pointer gets set up all the time pointers versus",
    "start": "4762600",
    "end": "4768440"
  },
  {
    "text": "member pointers and this is raw pointers and function pointers and member pointer to data member pointer to",
    "start": "4768440",
    "end": "4775520"
  },
  {
    "text": "function uh stack frame based mechanisms so memory layout vtable pointer",
    "start": "4775520",
    "end": "4780679"
  },
  {
    "text": "placement set up in the vtable on the opening curly bracket for the Constructor set up the vtable pointer uh",
    "start": "4780679",
    "end": "4788199"
  },
  {
    "text": "on the opening curly bracket of the destructor yeah D we were showing destructors need to set up the V table",
    "start": "4788199",
    "end": "4795000"
  },
  {
    "text": "you think Destructor we're done with it we don't need to set anything up it actually does the Inside Out",
    "start": "4795000",
    "end": "4800920"
  },
  {
    "text": "Construction uh the pointers of the difference between a raw",
    "start": "4800920",
    "end": "4806239"
  },
  {
    "text": "pointer and a a member pointer and the pointer function versus member pointer",
    "start": "4806239",
    "end": "4812440"
  },
  {
    "text": "function null's not always zero and how to walk the",
    "start": "4812440",
    "end": "4817760"
  },
  {
    "text": "stack questions yes so initially you showed us how",
    "start": "4817760",
    "end": "4824960"
  },
  {
    "text": "multiple inheritance effects the footprint and also the inheritance yeah but what about Diamond",
    "start": "4824960",
    "end": "4832199"
  },
  {
    "text": "inheritance I purposely avoided talking about that",
    "start": "4832199",
    "end": "4837480"
  },
  {
    "text": "um Diamond inheritance actually each when we had the A and the b in the",
    "start": "4837480",
    "end": "4844120"
  },
  {
    "text": "multiple inheritance each of those have its base",
    "start": "4844120",
    "end": "4850040"
  },
  {
    "text": "member yeah base class that might be of type Z",
    "start": "4850040",
    "end": "4855679"
  },
  {
    "text": "and each of those would have a zed in there but when it how would",
    "start": "4855679",
    "end": "4862480"
  },
  {
    "text": "it when you go to call your outer class and you've inherited from each of those",
    "start": "4862480",
    "end": "4867920"
  },
  {
    "text": "how does it know which one of those Bas to send it to and you probably have",
    "start": "4867920",
    "end": "4874320"
  },
  {
    "text": "to either have a function that would catch it and decide is it going left or right um there you can have a virtual",
    "start": "4874320",
    "end": "4880920"
  },
  {
    "text": "inheritance that where it has the first one the second instance of when you",
    "start": "4880920",
    "end": "4886440"
  },
  {
    "text": "would go to use that doesn't and bring its base along with it as baggage and",
    "start": "4886440",
    "end": "4891520"
  },
  {
    "text": "everything gets redirected to the base of the first one it's messy ugly I purposely didn't want to get into the",
    "start": "4891520",
    "end": "4898440"
  },
  {
    "text": "diamond problem here but",
    "start": "4898440",
    "end": "4903239"
  },
  {
    "text": "yeah were you just testing me on that or you knew that already I'm sure on the details but yeah",
    "start": "4903800",
    "end": "4910960"
  },
  {
    "text": "just curious yeah and and the magic of which one you're calling",
    "start": "4910960",
    "end": "4918159"
  },
  {
    "text": "virtual is kind of in my mind backwards I have to always go through and play with that yeah so yeah oh and well for",
    "start": "4918159",
    "end": "4928520"
  },
  {
    "text": "video the question was Diamond inheritance",
    "start": "4928520",
    "end": "4934159"
  },
  {
    "text": "uh how does that really work and where are the different bases so that's",
    "start": "4934159",
    "end": "4941000"
  },
  {
    "text": "probably not really a question but I like your example these fil by multiple fields which similar to projection",
    "start": "4941000",
    "end": "4948480"
  },
  {
    "text": "mechanism but it would be also nice to see on the slide when you filter not only on the fields but also on the some",
    "start": "4948480",
    "end": "4954239"
  },
  {
    "text": "methods so that you can do something invocable and filter on it as",
    "start": "4954239",
    "end": "4960280"
  },
  {
    "text": "well um so when I was passing the multiple",
    "start": "4960280",
    "end": "4965440"
  },
  {
    "text": "variables for the Sorting I could have passed multiple comparisons all method of the objects of the classes",
    "start": "4965440",
    "end": "4973480"
  },
  {
    "text": "so when you do not invoke just the field to compare but do invoke for instance",
    "start": "4973480",
    "end": "4982320"
  },
  {
    "text": "the well if I was passing the the an array of the",
    "start": "4982360",
    "end": "4989960"
  },
  {
    "text": "comparison uh lambdas I wouldn't need to pass the indexes of the variables I was",
    "start": "4989960",
    "end": "4996800"
  },
  {
    "text": "comparing off of because it would already be defining the variable not say",
    "start": "4996800",
    "end": "5002520"
  },
  {
    "text": "the me of a class so you have an object because object is already here and you",
    "start": "5002520",
    "end": "5008040"
  },
  {
    "text": "just used the dot something to have a field of those object but you can",
    "start": "5008040",
    "end": "5014560"
  },
  {
    "text": "actually use methods right you can have callable something so you have an object and you have the method of the class and",
    "start": "5014560",
    "end": "5021199"
  },
  {
    "text": "then you can use them to compare like as well so just be example I hear what",
    "start": "5021199",
    "end": "5027719"
  },
  {
    "text": "you're saying um and for the notes Echo back because",
    "start": "5027719",
    "end": "5035960"
  },
  {
    "text": "it's on the video I'm hearing you're saying that I could be passing in multiple invoca and in",
    "start": "5035960",
    "end": "5043480"
  },
  {
    "text": "addition to the multiple member data pointers yeah yeah or yeah and I I see",
    "start": "5043480",
    "end": "5052920"
  },
  {
    "text": "where you're going I'm I would have to see it in code to logically deduce that so um more",
    "start": "5052920",
    "end": "5061120"
  },
  {
    "text": "things uh the there's a tiny URL to the the PDF of these",
    "start": "5061120",
    "end": "5069159"
  },
  {
    "text": "slides um that's my uh LinkedIn and it's a QR to uh my LinkedIn",
    "start": "5069159",
    "end": "5078800"
  },
  {
    "text": "profile you can invite me to connect leave a message that we met here or that",
    "start": "5078800",
    "end": "5084520"
  },
  {
    "text": "you know because if I if there's no message and I don't know who it is I delete it and I mark it as I don't know",
    "start": "5084520",
    "end": "5091000"
  },
  {
    "text": "you get too many I don't knows on blind invites and and you'll eventually get banned from inviting",
    "start": "5091000",
    "end": "5097280"
  },
  {
    "text": "anybody like you're not open connector or something just one question yeah uh is a",
    "start": "5097280",
    "end": "5105600"
  },
  {
    "text": "non uh nonstatic function in C++ is that really a c function with an additional",
    "start": "5105600",
    "end": "5112760"
  },
  {
    "text": "argument called uh the hidden the hidden this parameter yep effectively and many",
    "start": "5112760",
    "end": "5118960"
  },
  {
    "text": "times depending on the calling convention that this pointer is actually passed in a register some compilers will",
    "start": "5118960",
    "end": "5125119"
  },
  {
    "text": "optimize out all these pushing on the stack and stuff and parameters getting passed in registers because they think it's faster",
    "start": "5125119",
    "end": "5133400"
  },
  {
    "text": "um but this is that was kind of the Legacy x86 stack of how that worked yeah",
    "start": "5133400",
    "end": "5140280"
  },
  {
    "text": "and it varies by compiler but yes so when you're printing the value of a",
    "start": "5140280",
    "end": "5145639"
  },
  {
    "text": "pointer to the member of data structure you are casting to in yeah it was an",
    "start": "5145639",
    "end": "5152080"
  },
  {
    "text": "offset so it's the offset that is start yes and then you said that if you don't cut it it will print either one or zero",
    "start": "5152080",
    "end": "5160440"
  },
  {
    "text": "yes basically which say true or false because you're conditionally comparing",
    "start": "5160440",
    "end": "5165880"
  },
  {
    "text": "it it's the same as if you had taken a regular raw pointer and you said if a or",
    "start": "5165880",
    "end": "5173719"
  },
  {
    "text": "if um where if a were a pointer it would evaluate that to a true or",
    "start": "5173719",
    "end": "5179199"
  },
  {
    "text": "false if you cast into like a void pointer so it's not",
    "start": "5179199",
    "end": "5186239"
  }
]