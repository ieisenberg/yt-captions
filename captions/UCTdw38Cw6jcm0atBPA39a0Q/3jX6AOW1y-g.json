[
  {
    "text": "hi everyone my name is michael stipe and i'm one of the 11 members of the",
    "start": "3600",
    "end": "10719"
  },
  {
    "text": "graphql stereotechnical steering committee of the graphql foundation and i'm also the",
    "start": "10719",
    "end": "17680"
  },
  {
    "text": "author of the hot chocolate graphqllibrary.net today we are going to take a trip",
    "start": "17680",
    "end": "25039"
  },
  {
    "text": "and explore how we can build modern applications with graphql",
    "start": "25039",
    "end": "30400"
  },
  {
    "text": "so what does modern applications mean for me it means that applications are",
    "start": "30400",
    "end": "36239"
  },
  {
    "text": "reactive and responsive have strong contracts with your backhand",
    "start": "36239",
    "end": "45440"
  },
  {
    "text": "and you have things like",
    "start": "45680",
    "end": "49440"
  },
  {
    "text": "like compile time safety before we",
    "start": "51360",
    "end": "56719"
  },
  {
    "text": "get into it let's quickly do a mini quiz",
    "start": "56719",
    "end": "63520"
  },
  {
    "text": "to find out where the crowd is with graphql it's just two questions",
    "start": "63520",
    "end": "70760"
  },
  {
    "text": "let me swipe over",
    "start": "81680",
    "end": "85640"
  },
  {
    "text": "okay awesome okay",
    "start": "101360",
    "end": "108640"
  },
  {
    "text": "so first question have you used graphql before",
    "start": "109200",
    "end": "115840"
  },
  {
    "text": "maybe you don't know it maybe heard about it",
    "start": "116159",
    "end": "121040"
  },
  {
    "text": "okay some already have it in production good but a lot of you just heard about it",
    "start": "122079",
    "end": "129840"
  },
  {
    "text": "okay i think that's it thanks the second thing",
    "start": "134480",
    "end": "140800"
  },
  {
    "text": "how old do you think is graphql",
    "start": "140800",
    "end": "145440"
  },
  {
    "text": "okay so the most of you think five years",
    "start": "155599",
    "end": "160480"
  },
  {
    "text": "2012 was the first version of graphql",
    "start": "169760",
    "end": "175200"
  },
  {
    "text": "and uh nick's rock from facebook actually named it super",
    "start": "177519",
    "end": "182840"
  },
  {
    "text": "graph or lack of a better name so it was in march 2012 so it's 10 years",
    "start": "182840",
    "end": "189840"
  },
  {
    "text": "old many people don't realize that and there is not made mistake because people",
    "start": "189840",
    "end": "196480"
  },
  {
    "text": "think most people think it's five years old because in 2015",
    "start": "196480",
    "end": "202720"
  },
  {
    "text": "seven years actually was when lee byron nix rock and den schaffner",
    "start": "202720",
    "end": "209280"
  },
  {
    "text": "were in the react conference i think in europe and talked about the concept of graphql",
    "start": "209280",
    "end": "215760"
  },
  {
    "text": "and 2016 was a date the year when they released the first",
    "start": "215760",
    "end": "221360"
  },
  {
    "text": "version of graphql as an open source specification so there's actually no",
    "start": "221360",
    "end": "227280"
  },
  {
    "text": "graphql library from facebook there so no official graphql library from the graphql foundation there graphql",
    "start": "227280",
    "end": "234720"
  },
  {
    "text": "is just an open source specification",
    "start": "234720",
    "end": "239400"
  },
  {
    "text": "so what is graphql and this is a super quick introduction i will do because i have so much to",
    "start": "241840",
    "end": "248560"
  },
  {
    "text": "show in demos and code which is nicer than just talk about graphql",
    "start": "248560",
    "end": "255599"
  },
  {
    "text": "so before we answer the question question what graphql is let's explore why facebook introduced graphql",
    "start": "255599",
    "end": "263600"
  },
  {
    "text": "so back in 2011 2012 facebook started building mobile applications before they",
    "start": "263600",
    "end": "270240"
  },
  {
    "text": "just builded web applications that you consumed on the browser",
    "start": "270240",
    "end": "275600"
  },
  {
    "text": "but with the iphone getting a lot of market share they were forced into the",
    "start": "275600",
    "end": "282880"
  },
  {
    "text": "mobile app business but when people started using their",
    "start": "282880",
    "end": "289600"
  },
  {
    "text": "application they were quite upset because the first facebook",
    "start": "289600",
    "end": "295759"
  },
  {
    "text": "were really really slow and they used a lot of data and back then if",
    "start": "295759",
    "end": "302320"
  },
  {
    "text": "you remember data was precious we had maybe 500 mb of data plans and yeah the facebook apps",
    "start": "302320",
    "end": "311919"
  },
  {
    "text": "maybe run through it in a couple of days",
    "start": "311919",
    "end": "316960"
  },
  {
    "text": "also the applications use a lot of battery your phone would get really really hot",
    "start": "316960",
    "end": "324160"
  },
  {
    "text": "and people weren't happy there were also discussions that facebook might not survive the mobile",
    "start": "324160",
    "end": "330320"
  },
  {
    "text": "age they did so what happened",
    "start": "330320",
    "end": "335919"
  },
  {
    "text": "facebook used their standard technologies like rest and html to build mobile applications",
    "start": "335919",
    "end": "345280"
  },
  {
    "text": "and the team at facebook these three developers i just said librarian and chef and nick schrock",
    "start": "345280",
    "end": "353280"
  },
  {
    "text": "they looked at why the applications performed so badly what they found out is that they exactly",
    "start": "353280",
    "end": "360560"
  },
  {
    "text": "do what they did on the desktop and that was using rest in html",
    "start": "360560",
    "end": "366479"
  },
  {
    "text": "and the problem with rest is the isolation that we have rest is about resources",
    "start": "366479",
    "end": "372160"
  },
  {
    "text": "and we want to isolate our resources like maybe we have a mere endpoint that",
    "start": "372160",
    "end": "377440"
  },
  {
    "text": "deals with the currently signed end user and when i call it i get the currently signed in user",
    "start": "377440",
    "end": "383919"
  },
  {
    "text": "but i get all the things that the backend engineer thinks are good for me",
    "start": "383919",
    "end": "391039"
  },
  {
    "text": "and then if i need other things that are connected to this user i do need to call another resource maybe",
    "start": "391039",
    "end": "398560"
  },
  {
    "text": "the news resource and in this i must pass maybe an id that",
    "start": "398560",
    "end": "404080"
  },
  {
    "text": "is a month that comes from my previous request and then again i have",
    "start": "404080",
    "end": "409520"
  },
  {
    "text": "to consume what the server developers thinks is good for me even though it was designed for a",
    "start": "409520",
    "end": "415120"
  },
  {
    "text": "desktop and",
    "start": "415120",
    "end": "420240"
  },
  {
    "text": "we can imagine that there might be another endpoint like a commons endpoint where i get the comments for each news",
    "start": "420240",
    "end": "427120"
  },
  {
    "text": "so i'm calling this and what happens with such an architecture",
    "start": "427120",
    "end": "434000"
  },
  {
    "text": "is that my call graph looks something like this and we call that cascading requests like",
    "start": "434000",
    "end": "439919"
  },
  {
    "text": "requests that depend on previous requests and we cannot parallelize these",
    "start": "439919",
    "end": "445680"
  },
  {
    "text": "that means the telephone or my mobile phone takes a long time to open this",
    "start": "445680",
    "end": "451680"
  },
  {
    "text": "application because we have to get all these data and i'm blocked until i have all of these",
    "start": "451680",
    "end": "459120"
  },
  {
    "text": "so let's have a look at how graphql tackles this very problem",
    "start": "461120",
    "end": "466879"
  },
  {
    "text": "in graphql we reverse the concept not the server developer tells me what i",
    "start": "467120",
    "end": "472879"
  },
  {
    "text": "can do is essentially the consumer of and",
    "start": "472879",
    "end": "478319"
  },
  {
    "text": "so the developer of the front end that ken specifies what data he or she needs",
    "start": "478319",
    "end": "483919"
  },
  {
    "text": "in this case we are asking for the currently signed in user and just for the name",
    "start": "483919",
    "end": "489919"
  },
  {
    "text": "and if we send that to our graphql server we just get that and if you look at that it looks like",
    "start": "489919",
    "end": "496720"
  },
  {
    "text": "i'm sending in an empty json graph to my backend and the backend just fills it up",
    "start": "496720",
    "end": "503120"
  },
  {
    "text": "it's not like that but it's a good mental pictures to start thinking about it",
    "start": "503120",
    "end": "510080"
  },
  {
    "text": "and as my use cases change or i need for component more or less data i can just drill in",
    "start": "510639",
    "end": "518959"
  },
  {
    "text": "ask for more data for instance for the profile picture and again as i send that in",
    "start": "518959",
    "end": "526480"
  },
  {
    "text": "my graphql will just respond in a in with a response that closely aligns",
    "start": "526480",
    "end": "532080"
  },
  {
    "text": "my request and if i look at that i can see it's not",
    "start": "532080",
    "end": "537120"
  },
  {
    "text": "about flat sparse fields it's actually about data trees and this is awesome when i have related",
    "start": "537120",
    "end": "544320"
  },
  {
    "text": "objects like maybe the friends or the news stories or whatever i can just",
    "start": "544320",
    "end": "549680"
  },
  {
    "text": "drill in and ask for the data",
    "start": "549680",
    "end": "554320"
  },
  {
    "text": "but we can already see that we have some repetition here like name and last scene",
    "start": "554720",
    "end": "560640"
  },
  {
    "text": "like the me field returns a user and friends returns a list of users and i'm",
    "start": "560640",
    "end": "565760"
  },
  {
    "text": "using in both the same fields in graphql there's a concept that we call a fragment",
    "start": "565760",
    "end": "572000"
  },
  {
    "text": "and the fragment in graphql is our primitive for composition i can build fragment hierarchies as i",
    "start": "572000",
    "end": "579040"
  },
  {
    "text": "build component hierarchies and we see what that means in one of my demos",
    "start": "579040",
    "end": "585360"
  },
  {
    "text": "just put it on your brain stack so graphql",
    "start": "585360",
    "end": "592240"
  },
  {
    "text": "empowers the developer that builds the front end or that consumes the data",
    "start": "592240",
    "end": "597519"
  },
  {
    "text": "and not the back-end developer that thinks in a certain use case that",
    "start": "597519",
    "end": "603680"
  },
  {
    "text": "might be already outdated again",
    "start": "603680",
    "end": "607920"
  },
  {
    "text": "so what is graphql if you look up the graphql.org",
    "start": "609200",
    "end": "616480"
  },
  {
    "text": "description it will say that it's a query language for you api it's not a query language for your",
    "start": "617040",
    "end": "623519"
  },
  {
    "text": "database or something like this it's a query language for your api",
    "start": "623519",
    "end": "629040"
  },
  {
    "text": "and it's a runtime to fulfill your queries so it's not like just like a schema in",
    "start": "629040",
    "end": "634880"
  },
  {
    "text": "in swagger or so it's really enforced we have a full type system like in c sharp",
    "start": "634880",
    "end": "642079"
  },
  {
    "text": "with graphql we only have one endpoint not like rest where we have multiple resources that are represented by",
    "start": "643920",
    "end": "651200"
  },
  {
    "text": "endpoints we have a single one because we essentially tell the graphql what data we need so we",
    "start": "651200",
    "end": "658160"
  },
  {
    "text": "just need one endpoint to post our request to and we can ask for all the data that we",
    "start": "658160",
    "end": "665120"
  },
  {
    "text": "need in one request and this means we don't have overall under fetching",
    "start": "665120",
    "end": "671120"
  },
  {
    "text": "and overall under fetching is essentially like when i get this first request me",
    "start": "671120",
    "end": "677519"
  },
  {
    "text": "and i just needed actually the user id from that that is over fetching because i get all the",
    "start": "677519",
    "end": "684160"
  },
  {
    "text": "information that i don't need i just need the id to get actually some other data and it's also under fetching",
    "start": "684160",
    "end": "691600"
  },
  {
    "text": "because i don't want actually the id i was this i want this other data",
    "start": "691600",
    "end": "697760"
  },
  {
    "text": "as i said graphql is built on a strong type system and that means",
    "start": "698640",
    "end": "704160"
  },
  {
    "text": "it's not like in swagger where i can say okay this is my schema but i still sent you something else",
    "start": "704160",
    "end": "710079"
  },
  {
    "text": "the graphql server will protect you from invalid data",
    "start": "710079",
    "end": "715200"
  },
  {
    "text": "and that makes graphql predictable to use and it's also real time",
    "start": "715680",
    "end": "722160"
  },
  {
    "text": "that's one too early let's have a look how graphql feels",
    "start": "723920",
    "end": "729279"
  },
  {
    "text": "because we are thinking in code so let's have a look how we can build a graphql server",
    "start": "729279",
    "end": "736639"
  },
  {
    "text": "so if you want to get started with graphql a simplest way is to install the hot chocolate templates",
    "start": "736959",
    "end": "743040"
  },
  {
    "text": "we're using the newest chipped so we're going for the preview here",
    "start": "743040",
    "end": "748800"
  },
  {
    "text": "and you just do dot new dash i and hot chocolate templates and then you have our templates",
    "start": "749200",
    "end": "758040"
  },
  {
    "text": "so let's just create a new graphql server",
    "start": "760240",
    "end": "765600"
  },
  {
    "text": "dotnet actually new graphql",
    "start": "765600",
    "end": "771639"
  },
  {
    "text": "and let's have a look at it okay so let's first look at the program cs",
    "start": "772880",
    "end": "779839"
  },
  {
    "text": "and this is a new minimal api that you know from",
    "start": "779839",
    "end": "785440"
  },
  {
    "text": "dotnet six let me just restore it",
    "start": "785440",
    "end": "789920"
  },
  {
    "text": "so what we can see we have the standard web builder that we have with rest and then we have",
    "start": "793839",
    "end": "798880"
  },
  {
    "text": "this here we are adding a graphql server to our services because graphql is",
    "start": "798880",
    "end": "804880"
  },
  {
    "text": "transport agnostic we can host our graphql server as a service",
    "start": "804880",
    "end": "810320"
  },
  {
    "text": "and in this instance we are adding a query type what a query type is i explain you in a second",
    "start": "810320",
    "end": "816800"
  },
  {
    "text": "the second important thing is here the map graph square that's our asp.net core middleware that implements all the",
    "start": "816800",
    "end": "823600"
  },
  {
    "text": "transport specifications for graphql so it's essentially three lines of code",
    "start": "823600",
    "end": "829440"
  },
  {
    "text": "and i have my graphql server running so how does this query type actually look like",
    "start": "829440",
    "end": "836000"
  },
  {
    "text": "it's simple c sharp so i can just create a class",
    "start": "836000",
    "end": "841600"
  },
  {
    "text": "query here and expose fields that my user can then",
    "start": "841600",
    "end": "846639"
  },
  {
    "text": "query in this instance getbook let's see how that feels in graphql",
    "start": "846639",
    "end": "854519"
  },
  {
    "text": "okay oh no",
    "start": "860320",
    "end": "864160"
  },
  {
    "text": "that's something new with max you always have to okay",
    "start": "867680",
    "end": "872800"
  },
  {
    "text": "so let's go on our endpoint and the default endpoint is always hosted on the graphql route",
    "start": "872800",
    "end": "879920"
  },
  {
    "text": "and we get this little new this this little graphql ide here it's",
    "start": "879920",
    "end": "885839"
  },
  {
    "text": "also built by our project it's called banana cake pop and the hot chocolate is the back end",
    "start": "885839",
    "end": "891519"
  },
  {
    "text": "and banana cake pop is our graphql ide okay",
    "start": "891519",
    "end": "897440"
  },
  {
    "text": "so i'm opening a new document here and i'm connecting to the graphql server",
    "start": "897440",
    "end": "904320"
  },
  {
    "text": "and the first thing i want to do is actually explore my schema so i can go on the schema reference tab here",
    "start": "905120",
    "end": "912959"
  },
  {
    "text": "and that is unexpected ah there okay there was something in my cache maybe",
    "start": "912959",
    "end": "919600"
  },
  {
    "text": "okay so i'm on my schema reference tab here and i already can see there's a query type",
    "start": "919600",
    "end": "925120"
  },
  {
    "text": "and the query type has a field book we actually apply on the c-sharp type",
    "start": "925120",
    "end": "930480"
  },
  {
    "text": "some graphical best practices we wouldn't say get book we would say book or book by id",
    "start": "930480",
    "end": "937279"
  },
  {
    "text": "so we are removing the verbs and things like async and stuff like that okay so i already have",
    "start": "937279",
    "end": "944240"
  },
  {
    "text": "my query type here and i can drill in so i can call this field book i can drill in and i can see the book",
    "start": "944240",
    "end": "950880"
  },
  {
    "text": "actually has a field title and has a field author and if i drill in further i",
    "start": "950880",
    "end": "956000"
  },
  {
    "text": "can see my author has a name let's query our graphql server",
    "start": "956000",
    "end": "961920"
  },
  {
    "text": "so in graphql we would start with the keyword query to query our endpoint",
    "start": "961920",
    "end": "968639"
  },
  {
    "text": "and that means i'm actually using this query type and i'm just reading data",
    "start": "968639",
    "end": "974800"
  },
  {
    "text": "and then i can just drill in the api that i have here i'm asking for",
    "start": "974800",
    "end": "980560"
  },
  {
    "text": "book and maybe i'm just asking for the title of book and let's just run that and then",
    "start": "980560",
    "end": "986240"
  },
  {
    "text": "i just get the book and if i want more for instance the",
    "start": "986240",
    "end": "992880"
  },
  {
    "text": "author then i'm just drilling in and then i get everything",
    "start": "992880",
    "end": "999040"
  },
  {
    "text": "let's reflect on that let's go back into our server so actually what i have to do in dotnet",
    "start": "999519",
    "end": "1006800"
  },
  {
    "text": "is just expose my business model to my graphql server and i'm able to querying",
    "start": "1006800",
    "end": "1012639"
  },
  {
    "text": "it that's actually also how facebook the graphql server graphql is just a thin",
    "start": "1012639",
    "end": "1019600"
  },
  {
    "text": "layer over the business layer it doesn't have anything to do with",
    "start": "1019600",
    "end": "1024640"
  },
  {
    "text": "graph databases or databases graphql is the query language for your api so",
    "start": "1024640",
    "end": "1030558"
  },
  {
    "text": "you're exposing your business model and graphql gives you all these capabilities to expose it in a much",
    "start": "1030559",
    "end": "1037199"
  },
  {
    "text": "richer way like you have interfaces you have unions you have enums",
    "start": "1037199",
    "end": "1042400"
  },
  {
    "text": "so you don't have to copy to dtos anymore you just let people drill into your",
    "start": "1042400",
    "end": "1049679"
  },
  {
    "text": "graph okay",
    "start": "1049679",
    "end": "1054720"
  },
  {
    "text": "let's move to a more complex demo that's just",
    "start": "1054720",
    "end": "1060160"
  },
  {
    "text": "how to get started it's actually now simpler than building a rest service because you can just expose your models",
    "start": "1060160",
    "end": "1067919"
  },
  {
    "text": "the way you like",
    "start": "1067919",
    "end": "1070639"
  },
  {
    "text": "okay at this point the first question is how do i handle databases i maybe have",
    "start": "1073840",
    "end": "1080720"
  },
  {
    "text": "an entity framework db context how can i expose that",
    "start": "1080720",
    "end": "1087039"
  },
  {
    "text": "that's quite simple let's go in here",
    "start": "1087039",
    "end": "1092799"
  },
  {
    "text": "in this demo i have a very simple db context it's called asset context",
    "start": "1092799",
    "end": "1100799"
  },
  {
    "text": "and i'm exposing assets these are cryptocurrencies essentially and asset prices two models",
    "start": "1100799",
    "end": "1109360"
  },
  {
    "text": "and they are connected so i can query into assets and from assets i can get to",
    "start": "1109360",
    "end": "1114400"
  },
  {
    "text": "the price",
    "start": "1114400",
    "end": "1116960"
  },
  {
    "text": "in order to query that i need a root type and that's what the query type actually is so let's create",
    "start": "1120080",
    "end": "1126880"
  },
  {
    "text": "our query root type here very dot cs",
    "start": "1126880",
    "end": "1132880"
  },
  {
    "text": "and let's add some base structure here so it's a simple class query",
    "start": "1133679",
    "end": "1140480"
  },
  {
    "text": "and then i need something that we call a resolver to query that in this instance i'm",
    "start": "1140480",
    "end": "1147360"
  },
  {
    "text": "saying my reserve is called get assets and i'm injecting into my resolver the",
    "start": "1147360",
    "end": "1153520"
  },
  {
    "text": "asset context that's my db context and i'm just",
    "start": "1153520",
    "end": "1158880"
  },
  {
    "text": "returning essentially the db set here as a variable and that lets me query",
    "start": "1158880",
    "end": "1165360"
  },
  {
    "text": "into my assets okay let's go into the program cs",
    "start": "1165360",
    "end": "1172320"
  },
  {
    "text": "so we have to declare again our query root type",
    "start": "1172320",
    "end": "1179000"
  },
  {
    "text": "let's just add it here and the second thing is because i have not annotated my db context as a service",
    "start": "1182320",
    "end": "1189280"
  },
  {
    "text": "or so because i don't want to use a lot of attributes so i can also do that",
    "start": "1189280",
    "end": "1194960"
  },
  {
    "text": "like here centrally i can say okay the db context is something special it's actually a asset db context",
    "start": "1194960",
    "end": "1203120"
  },
  {
    "text": "and then i also can tell my graphql engine how to use that i essentially can",
    "start": "1203120",
    "end": "1208559"
  },
  {
    "text": "say this is a pool db context so it's rented rent it when you're needed and then give it back so we save a lot of",
    "start": "1208559",
    "end": "1215360"
  },
  {
    "text": "precious memory and then i can just run that",
    "start": "1215360",
    "end": "1221840"
  },
  {
    "text": "let's go back to our graph id refresh the schema i can see okay the schema is not any more",
    "start": "1225760",
    "end": "1231520"
  },
  {
    "text": "valid valid because now i have here assets and i can see that i have a list of",
    "start": "1231520",
    "end": "1237440"
  },
  {
    "text": "assets that i'm returning and if i drill into that i can see all the properties i want to expose",
    "start": "1237440",
    "end": "1243520"
  },
  {
    "text": "and i can drill into asset price can see that it also has some properties and from there i could potentially query the",
    "start": "1243520",
    "end": "1250799"
  },
  {
    "text": "asset again so in circles um okay let's query that",
    "start": "1250799",
    "end": "1257760"
  },
  {
    "text": "so we can just maybe get the name query for that and i'll get the data",
    "start": "1260400",
    "end": "1267520"
  },
  {
    "text": "but i actually get all the data which is not good",
    "start": "1267520",
    "end": "1273120"
  },
  {
    "text": "and i would need to implement some paging here",
    "start": "1273120",
    "end": "1278320"
  },
  {
    "text": "so in graphql we actually have",
    "start": "1278320",
    "end": "1283679"
  },
  {
    "text": "a special sort of paging let me just go back to the slides",
    "start": "1283679",
    "end": "1291679"
  },
  {
    "text": "which we call it cursor-based pagination",
    "start": "1291679",
    "end": "1296158"
  },
  {
    "text": "let's go here so typically when you do rest or most people do",
    "start": "1297120",
    "end": "1302960"
  },
  {
    "text": "something that is called an offset pagination and when facebook started with graphql",
    "start": "1302960",
    "end": "1309360"
  },
  {
    "text": "they built built a lot of patterns around it so the problem with offset pagination is",
    "start": "1309360",
    "end": "1316080"
  },
  {
    "text": "think about we have this set of items let's say these are id software",
    "start": "1316080",
    "end": "1321600"
  },
  {
    "text": "my items and when we page through that we would do a skip take right",
    "start": "1321600",
    "end": "1326799"
  },
  {
    "text": "but when there's new data coming in like the new stories it can happen that you page",
    "start": "1326799",
    "end": "1332960"
  },
  {
    "text": "and then have the same items again because when we insert new data the pages actually shift",
    "start": "1332960",
    "end": "1340960"
  },
  {
    "text": "and what facebook came up is with was something called an cursor-based",
    "start": "1340960",
    "end": "1346480"
  },
  {
    "text": "pagination and we are doing with the entity framework a lot of work to make this plug-and-play in hot",
    "start": "1346480",
    "end": "1353600"
  },
  {
    "text": "chocolate because cursor-based pagination actually pins the ids so page",
    "start": "1353600",
    "end": "1361120"
  },
  {
    "text": "is you navigate relatively to a specific entity",
    "start": "1361120",
    "end": "1366480"
  },
  {
    "text": "so instead of saying skip take we would say after id5",
    "start": "1366480",
    "end": "1372799"
  },
  {
    "text": "take five and this way you don't have the jumps and your pages actually shift as new data",
    "start": "1372799",
    "end": "1379760"
  },
  {
    "text": "comes in",
    "start": "1379760",
    "end": "1382159"
  },
  {
    "text": "okay let's let's put that in and see how we can build such a paging into our api",
    "start": "1385600",
    "end": "1392960"
  },
  {
    "text": "as i said we did a lot of work with the entity framework team to make it easy",
    "start": "1392960",
    "end": "1400080"
  },
  {
    "text": "so the thing we have to do is say use paging",
    "start": "1400080",
    "end": "1405679"
  },
  {
    "text": "so use paging and then you can say dot net run",
    "start": "1408400",
    "end": "1413360"
  },
  {
    "text": "ah let's do net and run",
    "start": "1414880",
    "end": "1418240"
  },
  {
    "text": "okay let's go back to our thingy here and now we refresh we can see it's",
    "start": "1422720",
    "end": "1427919"
  },
  {
    "text": "actually invalid because our schema has changed because we now have a new type that is",
    "start": "1427919",
    "end": "1433520"
  },
  {
    "text": "called asset connection so we can it's essentially a paging type",
    "start": "1433520",
    "end": "1439520"
  },
  {
    "text": "where we now have nodes a page info and an assets and an asset edge",
    "start": "1439520",
    "end": "1445919"
  },
  {
    "text": "and that means the nodes are actually my entities where i can query for the name for",
    "start": "1445919",
    "end": "1451840"
  },
  {
    "text": "instance and then i have this page info where i have indicators on which page i",
    "start": "1451840",
    "end": "1459120"
  },
  {
    "text": "am is there a next page what is the end cursor and if i would wanted to implement a",
    "start": "1459120",
    "end": "1465200"
  },
  {
    "text": "simple fast-forward paging i could say has next page is there something next and what is",
    "start": "1465200",
    "end": "1470799"
  },
  {
    "text": "the n cursor and then i could query my data set and you can already see i just get 10 items",
    "start": "1470799",
    "end": "1477279"
  },
  {
    "text": "here that's a default paging size and i can now take this cursor that i have",
    "start": "1477279",
    "end": "1483279"
  },
  {
    "text": "here and pass into my field so in graphql fields are actually",
    "start": "1483279",
    "end": "1488799"
  },
  {
    "text": "methods of functions and so i can pass arguments in here",
    "start": "1488799",
    "end": "1496720"
  },
  {
    "text": "and i can say give me the next 10 items i can also specify that i want the next",
    "start": "1496720",
    "end": "1502720"
  },
  {
    "text": "let's say give me next the the first items the first five items after this last item",
    "start": "1502720",
    "end": "1509919"
  },
  {
    "text": "and we can just go up here and we are paging and this is a much",
    "start": "1509919",
    "end": "1516559"
  },
  {
    "text": "more sophisticated version of paging and you actually have not to do a lot of things you just annotate",
    "start": "1516559",
    "end": "1524240"
  },
  {
    "text": "and if we go and see we translate it correctly so by default we emulate it",
    "start": "1524240",
    "end": "1531120"
  },
  {
    "text": "to this skip and take which actually is not good but you can also configure it that we",
    "start": "1531120",
    "end": "1537520"
  },
  {
    "text": "use like proper indexing properties",
    "start": "1537520",
    "end": "1542760"
  },
  {
    "text": "okay so we are rewriting actually on top of our variable here",
    "start": "1543120",
    "end": "1550320"
  },
  {
    "text": "with expression so that it's translated to proper sql",
    "start": "1550320",
    "end": "1555360"
  },
  {
    "text": "so how does it work",
    "start": "1555360",
    "end": "1558480"
  },
  {
    "text": "so hot chocolate has this concept of field middlewares so when i annotate there and we also have a fluent api i'm",
    "start": "1560960",
    "end": "1567919"
  },
  {
    "text": "just showing here the the annotation annotation based approach there's also a fluent api",
    "start": "1567919",
    "end": "1574880"
  },
  {
    "text": "actually where you don't have to annotate and there's also an approach called schema first",
    "start": "1574880",
    "end": "1580720"
  },
  {
    "text": "so for people that don't like attributes there's a way out",
    "start": "1580720",
    "end": "1586799"
  },
  {
    "text": "so but this attribute in this instance is actually a field middleware",
    "start": "1586799",
    "end": "1592480"
  },
  {
    "text": "and when we annotate that on our field we actually wrap a middleware around it",
    "start": "1592480",
    "end": "1597520"
  },
  {
    "text": "like an asp.net core and what it does is essentially it's a pipeline",
    "start": "1597520",
    "end": "1604159"
  },
  {
    "text": "the use pagination middleware will just initially invoke next",
    "start": "1604159",
    "end": "1610320"
  },
  {
    "text": "and then the resolver the get assets will be invoked and returns actually a variable",
    "start": "1610320",
    "end": "1618080"
  },
  {
    "text": "which the use paging middleware takes and applies slicing on top of it",
    "start": "1618080",
    "end": "1624640"
  },
  {
    "text": "but we actually can do more let's go back to our middle to our code",
    "start": "1624640",
    "end": "1632880"
  },
  {
    "text": "we can also expose other things like maybe we want to query a bit more so we can say use",
    "start": "1632880",
    "end": "1641120"
  },
  {
    "text": "sorting or use filtering",
    "start": "1641120",
    "end": "1647760"
  },
  {
    "text": "or use projections so we can drill into our data",
    "start": "1648399",
    "end": "1655000"
  },
  {
    "text": "let me just these are data middleware so i have to register them that they are",
    "start": "1657200",
    "end": "1663360"
  },
  {
    "text": "allowed on my schema so i say add sorting don't add filtering",
    "start": "1663360",
    "end": "1672000"
  },
  {
    "text": "dot add projections and with that",
    "start": "1672720",
    "end": "1679360"
  },
  {
    "text": "i cannot really drill into my data",
    "start": "1680320",
    "end": "1684320"
  },
  {
    "text": "let's refresh that and now i have more arguments actually here because i can",
    "start": "1687120",
    "end": "1694880"
  },
  {
    "text": "maybe look for things let's say where",
    "start": "1694880",
    "end": "1701200"
  },
  {
    "text": "where the price and in the price object the last price",
    "start": "1704880",
    "end": "1713760"
  },
  {
    "text": "is greater than two and i could also order it it's it's a",
    "start": "1715360",
    "end": "1721760"
  },
  {
    "text": "bit like um so we translated that that's not graphql is still not right",
    "start": "1721760",
    "end": "1727039"
  },
  {
    "text": "uh grapher actually doesn't specify how your structure looks like so what we did we took a bit a",
    "start": "1727039",
    "end": "1734799"
  },
  {
    "text": "approach here so it kind of looks like a  query not exactly",
    "start": "1734799",
    "end": "1740399"
  },
  {
    "text": "um and now let me get rid of this because maybe this item is not no longer there",
    "start": "1740399",
    "end": "1747600"
  },
  {
    "text": "we're taking five items that actually have a price higher than 2.",
    "start": "1747600",
    "end": "1753520"
  },
  {
    "text": "and now we are executing that query and we can see",
    "start": "1753520",
    "end": "1760880"
  },
  {
    "text": "that now the query is rewritten to only select the name because we only",
    "start": "1762399",
    "end": "1769279"
  },
  {
    "text": "are querying for the name now and to",
    "start": "1769279",
    "end": "1775120"
  },
  {
    "text": "whether last price is greater than p0 and we limit it to the first five",
    "start": "1775120",
    "end": "1782640"
  },
  {
    "text": "but we can do more we can also drill into our data",
    "start": "1784559",
    "end": "1789760"
  },
  {
    "text": "like let's get the latest price",
    "start": "1789760",
    "end": "1794039"
  },
  {
    "text": "that's a pity",
    "start": "1798559",
    "end": "1801360"
  },
  {
    "text": "it's not strange",
    "start": "1803600",
    "end": "1808520"
  },
  {
    "text": "okay that's a buck in my demo",
    "start": "1809520",
    "end": "1815120"
  },
  {
    "text": "use filtering assets ah yes okay",
    "start": "1818640",
    "end": "1823840"
  },
  {
    "text": "because we are projecting assets but do we have this correctly here",
    "start": "1824399",
    "end": "1832640"
  },
  {
    "text": "no i think this has to be a setable thing okay",
    "start": "1832640",
    "end": "1839120"
  },
  {
    "text": "i'm not the expert in anti-framework by the way",
    "start": "1839120",
    "end": "1843440"
  },
  {
    "text": "let's retry that yeah now it's must be setable",
    "start": "1847039",
    "end": "1853360"
  },
  {
    "text": "didn't know that okay so now we can project into it and",
    "start": "1853360",
    "end": "1858640"
  },
  {
    "text": "we generate proper expressions on top of that and you can see that also the sql",
    "start": "1858640",
    "end": "1865120"
  },
  {
    "text": "changed like we are now drilling in from the sql side this works not only with entity",
    "start": "1865120",
    "end": "1870720"
  },
  {
    "text": "framework so i'm actually more in the  side of things so it works also with we are",
    "start": "1870720",
    "end": "1877440"
  },
  {
    "text": "working on elastic and other things but i said it's in the beginning graphql is actually not a",
    "start": "1877440",
    "end": "1883760"
  },
  {
    "text": "query language it is not it's meant for apis and you can come with your domain",
    "start": "1883760",
    "end": "1891360"
  },
  {
    "text": "driven design and also plug it in and we will understand that",
    "start": "1891360",
    "end": "1896480"
  },
  {
    "text": "it's just if you have these little projects or this is your approach you want to do you can do that just plug it",
    "start": "1896480",
    "end": "1902000"
  },
  {
    "text": "in we understand you okay let's",
    "start": "1902000",
    "end": "1907200"
  },
  {
    "text": "just go back into the slides",
    "start": "1907200",
    "end": "1911360"
  },
  {
    "text": "and that is the full pipeline that we actually have and you can see we essentially pipelining it we get the",
    "start": "1914159",
    "end": "1921200"
  },
  {
    "text": "variable we are rewriting the variable and if it's we are not using a query we are actually rewriting bison",
    "start": "1921200",
    "end": "1928000"
  },
  {
    "text": "objects because uh we are really using the native uh mongodriver then and not the",
    "start": "1928000",
    "end": "1933840"
  },
  {
    "text": "queryable approach you can use it with credible but the bsn objects are much faster",
    "start": "1933840",
    "end": "1940320"
  },
  {
    "text": "yeah and that's just an example you have a you have a graph like that and we essentially rewrite it",
    "start": "1941120",
    "end": "1948080"
  },
  {
    "text": "if you choose to do that but graphql is not great just for things",
    "start": "1948080",
    "end": "1953840"
  },
  {
    "text": "like that plugging in your domain driven object structure or your",
    "start": "1953840",
    "end": "1959760"
  },
  {
    "text": "data sources like udb context it's actually great with any db with any",
    "start": "1959760",
    "end": "1964799"
  },
  {
    "text": "source so in the beginning when graphql became available to the javascript community",
    "start": "1964799",
    "end": "1971279"
  },
  {
    "text": "they tried to convince the backend developers to start working with graphql and the backend developers were a bit",
    "start": "1971279",
    "end": "1977840"
  },
  {
    "text": "reserved so what they did is they take a graphql server and just",
    "start": "1977840",
    "end": "1983279"
  },
  {
    "text": "bind it on their rest endpoints and made their own graphql server with",
    "start": "1983279",
    "end": "1989200"
  },
  {
    "text": "the rest and points of their back-end engineers so typically what we saw here was",
    "start": "1989200",
    "end": "1994799"
  },
  {
    "text": "actually how facebook started putting a thin layer of graphql over your business layer or about",
    "start": "1994799",
    "end": "2000799"
  },
  {
    "text": "over your data layer however you want to do it but what they did essentially is putting",
    "start": "2000799",
    "end": "2007039"
  },
  {
    "text": "it over rest over grpc or whatsoever like twitter uses graphql and they have it over their",
    "start": "2007039",
    "end": "2014640"
  },
  {
    "text": "thrift microservices",
    "start": "2014640",
    "end": "2018760"
  },
  {
    "text": "let's have a look how we can do that so let me go in my next demo",
    "start": "2020000",
    "end": "2028080"
  },
  {
    "text": "it's demo3",
    "start": "2028320",
    "end": "2031559"
  },
  {
    "text": "okay so this is the same service but in a different development stage so uh we also have these assets but we",
    "start": "2033919",
    "end": "2041440"
  },
  {
    "text": "want to combine that with data from our rest endpoint so",
    "start": "2041440",
    "end": "2046799"
  },
  {
    "text": "more concretely we have let me get postman",
    "start": "2046799",
    "end": "2052320"
  },
  {
    "text": "okay no it's not that it's actually this guy",
    "start": "2057359",
    "end": "2063760"
  },
  {
    "text": "okay actually we want to have a price service that gives me the quotes",
    "start": "2063760",
    "end": "2069358"
  },
  {
    "text": "over the day like i want to see if maybe the btc um",
    "start": "2069359",
    "end": "2074960"
  },
  {
    "text": "the the bitcoin change how much it changed in a month or how much it changed in a day so i have a",
    "start": "2074960",
    "end": "2081118"
  },
  {
    "text": "aggregation service somewhere and i want to take this service and",
    "start": "2081119",
    "end": "2087200"
  },
  {
    "text": "merge that into my price type how would i do that",
    "start": "2087200",
    "end": "2092638"
  },
  {
    "text": "actually it's super simple and we're taking now a different approach so we have used annotation",
    "start": "2092639",
    "end": "2099200"
  },
  {
    "text": "based so far and we actually can mix the approaches you can mix fluent types and schema",
    "start": "2099200",
    "end": "2105119"
  },
  {
    "text": "first and annotation based all together however you want so we're going here in our types",
    "start": "2105119",
    "end": "2112400"
  },
  {
    "text": "and i'm adding a new thing which we call asset",
    "start": "2112400",
    "end": "2119200"
  },
  {
    "text": "price change dot graphql",
    "start": "2119200",
    "end": "2124240"
  },
  {
    "text": "and that is a graph type specification and what i'm doing there is i'm saying",
    "start": "2126800",
    "end": "2132160"
  },
  {
    "text": "okay there's a type asset price change that is the type in my rest service which doesn't have a typing",
    "start": "2132160",
    "end": "2138720"
  },
  {
    "text": "and then i'm saying there's a percentage change field which is a float and can never be null",
    "start": "2138720",
    "end": "2145920"
  },
  {
    "text": "and that comes from a json and then i'm going to my configuration",
    "start": "2145920",
    "end": "2152880"
  },
  {
    "text": "here and",
    "start": "2152880",
    "end": "2158680"
  },
  {
    "text": "i'm adding my let me do that i'm adding this file as a graphql",
    "start": "2159680",
    "end": "2166160"
  },
  {
    "text": "document and now my system actually understands",
    "start": "2166160",
    "end": "2173520"
  },
  {
    "text": "that json object i added here the http client",
    "start": "2173520",
    "end": "2178800"
  },
  {
    "text": "which is configured to fetch from the address service that we saw and i'm just going now to my price note",
    "start": "2178800",
    "end": "2185920"
  },
  {
    "text": "which is a price object and it's actually not my price entity",
    "start": "2185920",
    "end": "2192079"
  },
  {
    "text": "i'm saying okay i have a the asset price object i'm extending it with fields that",
    "start": "2192079",
    "end": "2197200"
  },
  {
    "text": "are not on my business model so all this methods here are new methods that i'm adding to that",
    "start": "2197200",
    "end": "2203680"
  },
  {
    "text": "initial object so i'm adding here",
    "start": "2203680",
    "end": "2209119"
  },
  {
    "text": "a method called get get change and what it does it it says it returns",
    "start": "2210800",
    "end": "2217760"
  },
  {
    "text": "an asset price it's a json element just really the raw json data from my rest service",
    "start": "2217760",
    "end": "2224400"
  },
  {
    "text": "and i'm using a data loader here a data loader is a concept that will batch requests because i'm",
    "start": "2224400",
    "end": "2230480"
  },
  {
    "text": "fetching a list of data from my database i would need to fetch for each of these items",
    "start": "2230480",
    "end": "2235920"
  },
  {
    "text": "some data from the rest service which would be not so performant so i'm using a data loader here it's a concept in",
    "start": "2235920",
    "end": "2242320"
  },
  {
    "text": "graphql we use very often to batch these requests in one go to my",
    "start": "2242320",
    "end": "2248480"
  },
  {
    "text": "backend",
    "start": "2248480",
    "end": "2250960"
  },
  {
    "text": "so just a few lines of code and essentially just the typing",
    "start": "2255119",
    "end": "2261359"
  },
  {
    "text": "and we can go back here to our service actually let me get rid of this guy here",
    "start": "2261599",
    "end": "2270920"
  },
  {
    "text": "yes why did it die",
    "start": "2273280",
    "end": "2278000"
  },
  {
    "text": "okay could not find file",
    "start": "2279839",
    "end": "2285599"
  },
  {
    "text": "okay where should it be",
    "start": "2285599",
    "end": "2291119"
  },
  {
    "text": "assets types assets demo three should be there",
    "start": "2291520",
    "end": "2297040"
  },
  {
    "text": "i would say it's there okay i maybe messed up the the pass here so i",
    "start": "2297040",
    "end": "2303599"
  },
  {
    "text": "can also just take the string let me just fix it add",
    "start": "2303599",
    "end": "2311359"
  },
  {
    "text": "document from string i don't wanna",
    "start": "2311359",
    "end": "2317839"
  },
  {
    "text": "look for wrong okay that should also work",
    "start": "2317839",
    "end": "2325320"
  },
  {
    "text": "yeah the thing is i created this talk this morning so i never run these demos",
    "start": "2327760",
    "end": "2334960"
  },
  {
    "text": "okay that's right let's refresh that",
    "start": "2336400",
    "end": "2341838"
  },
  {
    "text": "ah okay i just so i'm using this um from json directive",
    "start": "2344800",
    "end": "2350640"
  },
  {
    "text": "here that's a that's a pipelining directive and i needed to register it first so i",
    "start": "2350640",
    "end": "2356480"
  },
  {
    "text": "say add json support and now my graphql system will understand json",
    "start": "2356480",
    "end": "2365119"
  },
  {
    "text": "and now it should work",
    "start": "2365839",
    "end": "2369480"
  },
  {
    "text": "okay so now we refresh that it works and we can now drill into our data",
    "start": "2370960",
    "end": "2378240"
  },
  {
    "text": "structure here so we can see query i can get the assets",
    "start": "2378240",
    "end": "2383359"
  },
  {
    "text": "i can get into the asset i have the price and you can see i have the price change here",
    "start": "2383359",
    "end": "2390560"
  },
  {
    "text": "and let's just query that so we want the change and we want from our rest service",
    "start": "2390720",
    "end": "2397280"
  },
  {
    "text": "the the change for each item over the day aggregated",
    "start": "2397280",
    "end": "2402560"
  },
  {
    "text": "and let's take the percentage change and get rid of these guys here",
    "start": "2402560",
    "end": "2408480"
  },
  {
    "text": "execute that okay it took a bit long on the first time okay and now you can see it's 104",
    "start": "2408480",
    "end": "2414880"
  },
  {
    "text": "milliseconds although it goes to an azure function to fetch the data there um",
    "start": "2414880",
    "end": "2420480"
  },
  {
    "text": "and that's because we are batching the data you can see here is the database calls also batched",
    "start": "2420480",
    "end": "2426960"
  },
  {
    "text": "and then it takes the here here's the http call let's just copy it out",
    "start": "2426960",
    "end": "2434720"
  },
  {
    "text": "you can see we are batching the requests to this rest service and then we get for each item in our",
    "start": "2436960",
    "end": "2443839"
  },
  {
    "text": "list in one go the data from the rest endpoint so it's very easy to combine",
    "start": "2443839",
    "end": "2448880"
  },
  {
    "text": "like different data source like grpc like rest like what what have you we just combine",
    "start": "2448880",
    "end": "2455119"
  },
  {
    "text": "it in graphql why should we do that because graphql is kind of the compensation of our microservices",
    "start": "2455119",
    "end": "2462000"
  },
  {
    "text": "like with microservices arrests it was actually very difficult to know where to get which data but now",
    "start": "2462000",
    "end": "2468640"
  },
  {
    "text": "with graphql we have this one endpoint where we can drill into all this data",
    "start": "2468640",
    "end": "2474640"
  },
  {
    "text": "and connect it like i'm i'm not going with my front end",
    "start": "2474640",
    "end": "2479760"
  },
  {
    "text": "now to this to this back end and aggregate the data in my front end i let the back end",
    "start": "2479760",
    "end": "2486400"
  },
  {
    "text": "aggregate the data and just send the data down to my front end that i really that i really need and avoid over",
    "start": "2486400",
    "end": "2493280"
  },
  {
    "text": "fetching under fetching and also latency issues right",
    "start": "2493280",
    "end": "2500160"
  },
  {
    "text": "okay let's go to the to the next demo",
    "start": "2500160",
    "end": "2505839"
  },
  {
    "text": "or let's let me first go back to the slides because now comes the really new stuff",
    "start": "2506720",
    "end": "2512240"
  },
  {
    "text": "to graphql okay",
    "start": "2512240",
    "end": "2518800"
  },
  {
    "text": "okay that's not new real-time data let's quickly go into that so",
    "start": "2518960",
    "end": "2526000"
  },
  {
    "text": "i said in the beginning that graphql is also real time meaning we have",
    "start": "2526000",
    "end": "2532319"
  },
  {
    "text": "graphql queries and all we did were graphql queries so far but we also have mutation",
    "start": "2532319",
    "end": "2538079"
  },
  {
    "text": "mutations changing data and we have real time data which is changing events so",
    "start": "2538079",
    "end": "2544480"
  },
  {
    "text": "the queries is essentially your get in rest whereas the mutation is a",
    "start": "2544480",
    "end": "2549920"
  },
  {
    "text": "put post patch delete in rest and events doesn't exist in rest",
    "start": "2549920",
    "end": "2556000"
  },
  {
    "text": "i mean you can have additional concepts web sockets also on but in graphql it's",
    "start": "2556000",
    "end": "2561200"
  },
  {
    "text": "integrated i can define my queries like i did for just a simple query as a real-time query",
    "start": "2561200",
    "end": "2569839"
  },
  {
    "text": "how does it work in graphql we we with a subscription we instead of a",
    "start": "2569839",
    "end": "2576640"
  },
  {
    "text": "single result get a stream of results we call that the response stream",
    "start": "2576640",
    "end": "2584318"
  },
  {
    "text": "and subscriptions as you might expect don't work over http they can work over",
    "start": "2584720",
    "end": "2590319"
  },
  {
    "text": "several things like server side events like webs web sockets which most",
    "start": "2590319",
    "end": "2596560"
  },
  {
    "text": "subscriptions use or other transport components that support multiple updates",
    "start": "2596560",
    "end": "2602560"
  },
  {
    "text": "grpc would also be transport possibility",
    "start": "2602560",
    "end": "2608559"
  },
  {
    "text": "and what is important here is that we have a concept of events when an event happens we will execute a query",
    "start": "2609040",
    "end": "2618480"
  },
  {
    "text": "so for each raised event we will produce a response so when that works with the",
    "start": "2619200",
    "end": "2625119"
  },
  {
    "text": "event stream we essentially will subscribe to an event stream that will trigger",
    "start": "2625119",
    "end": "2631280"
  },
  {
    "text": "every now and then it can be external it can be internal",
    "start": "2631280",
    "end": "2635838"
  },
  {
    "text": "and essentially for each triggering of our event we will execute a query and send down the response for that query to",
    "start": "2636400",
    "end": "2643280"
  },
  {
    "text": "the client okay",
    "start": "2643280",
    "end": "2649319"
  },
  {
    "text": "let's quickly get into that",
    "start": "2649520",
    "end": "2653119"
  },
  {
    "text": "demo f4 ci okay",
    "start": "2659680",
    "end": "2666079"
  },
  {
    "text": "so so far we just used the query type this time we will create a subscription",
    "start": "2666079",
    "end": "2671119"
  },
  {
    "text": "type so let's go to our assets here and i already created the file",
    "start": "2671119",
    "end": "2676960"
  },
  {
    "text": "asset subscriptions and we are just adding",
    "start": "2676960",
    "end": "2682319"
  },
  {
    "text": "a simple type as we did for our query",
    "start": "2682319",
    "end": "2687839"
  },
  {
    "text": "and also a simple resolver we call on price change",
    "start": "2688640",
    "end": "2694319"
  },
  {
    "text": "and this resolver actually will be called when the price when when the event will be triggered",
    "start": "2694319",
    "end": "2701280"
  },
  {
    "text": "and we get an event message here which is a symbol to our cryptocurrency",
    "start": "2701280",
    "end": "2706640"
  },
  {
    "text": "and then we will use a data loader here to fetch the data for this symbol",
    "start": "2706640",
    "end": "2711839"
  },
  {
    "text": "and return the asset price to the user but we still need something how do we",
    "start": "2711839",
    "end": "2718560"
  },
  {
    "text": "listen to an event stream and that is done with async enumerables or you can also take",
    "start": "2718560",
    "end": "2725920"
  },
  {
    "text": "observables but typically you want to stream so we are going create a price change",
    "start": "2725920",
    "end": "2732079"
  },
  {
    "text": "stream here and we are listening to an internal service is our price change service that",
    "start": "2732079",
    "end": "2738000"
  },
  {
    "text": "produces events whenever a new price for a symbol for an asset",
    "start": "2738000",
    "end": "2744079"
  },
  {
    "text": "for cryptocurrency occurs and we just yield for each event the",
    "start": "2744079",
    "end": "2749280"
  },
  {
    "text": "symbol and that will actually trigger our resolver because we are going to",
    "start": "2749280",
    "end": "2754720"
  },
  {
    "text": "tell our resolver that it shall shall be using this event stream",
    "start": "2754720",
    "end": "2762560"
  },
  {
    "text": "okay and with this we actually ready to be using subscriptions we just added the",
    "start": "2764880",
    "end": "2771760"
  },
  {
    "text": "type here um what i already did is put an in-memory subscription provider in",
    "start": "2771760",
    "end": "2778319"
  },
  {
    "text": "typically in a production system you would use something else a real pub sub system like that is",
    "start": "2778319",
    "end": "2785040"
  },
  {
    "text": "or kafka or what what have you um so i just put an in-memory here which is",
    "start": "2785040",
    "end": "2791839"
  },
  {
    "text": "based on the channels api of microsoft and i also configured here to use websockets as a transport",
    "start": "2791839",
    "end": "2800319"
  },
  {
    "text": "okay just quickly check yeah i should edit missing me and",
    "start": "2801280",
    "end": "2807760"
  },
  {
    "text": "run",
    "start": "2807760",
    "end": "2810000"
  },
  {
    "text": "okay so the thing is coming up i'm emulating real time so that's why",
    "start": "2814160",
    "end": "2819359"
  },
  {
    "text": "you can see a lot of things going on here we actually are pulling from an online service in",
    "start": "2819359",
    "end": "2825280"
  },
  {
    "text": "new prices and updating then internally okay so instead of writing the query",
    "start": "2825280",
    "end": "2832000"
  },
  {
    "text": "keyword here rewrite subscription",
    "start": "2832000",
    "end": "2837040"
  },
  {
    "text": "and um let me just refresh the schema so subscription and then we can see here",
    "start": "2837280",
    "end": "2843520"
  },
  {
    "text": "our own price change event so i can just",
    "start": "2843520",
    "end": "2848800"
  },
  {
    "text": "go in there and then i can drill into the fields like with the query i can say give me the latest price for the symbol",
    "start": "2848800",
    "end": "2855520"
  },
  {
    "text": "i could also drill into the whole graph here and send me this data down whenever",
    "start": "2855520",
    "end": "2861760"
  },
  {
    "text": "something changes and i subscribe to and i get all the price updates immediately",
    "start": "2861760",
    "end": "2867200"
  },
  {
    "text": "so it's as simple as writing the query you get real-time data and this is",
    "start": "2867200",
    "end": "2872960"
  },
  {
    "text": "really awesome when you think about the applications and i will show in a minute a proper react application where you can",
    "start": "2872960",
    "end": "2879520"
  },
  {
    "text": "see how this is actually used",
    "start": "2879520",
    "end": "2883440"
  },
  {
    "text": "okay let's go back to the slides",
    "start": "2884800",
    "end": "2891440"
  },
  {
    "text": "so as with always with real-time data there are always problems a lot of them are fixed with the graphql transport",
    "start": "2893920",
    "end": "2900240"
  },
  {
    "text": "protocols like for instance what if we are multi multiple times subscribing",
    "start": "2900240",
    "end": "2906800"
  },
  {
    "text": "to our system a single user goes for multiple",
    "start": "2906800",
    "end": "2913119"
  },
  {
    "text": "subscriptions the graphql protocols we have implemented and that are also",
    "start": "2913119",
    "end": "2919040"
  },
  {
    "text": "standardized in the http graphql over http specification support multiplexing",
    "start": "2919040",
    "end": "2924480"
  },
  {
    "text": "you just do one websocket connection and subscribe on this single connection to",
    "start": "2924480",
    "end": "2930720"
  },
  {
    "text": "multiple subscriptions but the real problem so where you have to",
    "start": "2930720",
    "end": "2936559"
  },
  {
    "text": "think about the scaling like we have a websocket connection means",
    "start": "2936559",
    "end": "2941680"
  },
  {
    "text": "with um with the cluster you have to think about how you scale that properly there are",
    "start": "2941680",
    "end": "2947680"
  },
  {
    "text": "solutions for that but you have to think about that also throttling or quality of service is something you have to think a",
    "start": "2947680",
    "end": "2954079"
  },
  {
    "text": "bit more more but um let's head further because time is short",
    "start": "2954079",
    "end": "2960960"
  },
  {
    "text": "let's go in some new concepts this is something that is at the moment proposed in the graphql spec and will come in the",
    "start": "2960960",
    "end": "2967280"
  },
  {
    "text": "next graphql specification it's called the defer directive and it's actually",
    "start": "2967280",
    "end": "2972319"
  },
  {
    "text": "one of two defer in stream we are talking about and what it allows us is to over a",
    "start": "2972319",
    "end": "2979119"
  },
  {
    "text": "simple query we can de-prioritize data we can essentially tell our system what",
    "start": "2979119",
    "end": "2985520"
  },
  {
    "text": "data is important to us and what we need now because with graphql we want to fetch all the data that we can",
    "start": "2985520",
    "end": "2992880"
  },
  {
    "text": "in just one request but that can mean if we are querying for slow data",
    "start": "2992880",
    "end": "2998720"
  },
  {
    "text": "that we actually have to wait longer for our data and that's where defer comes in",
    "start": "2998720",
    "end": "3004240"
  },
  {
    "text": "because with defer i can say for instance that the asset name is important to me so i can render quickly",
    "start": "3004240",
    "end": "3010960"
  },
  {
    "text": "my components but the price for instance can be coming a bit later because maybe",
    "start": "3010960",
    "end": "3017680"
  },
  {
    "text": "we are getting it from a different service so we de-prioritize this data",
    "start": "3017680",
    "end": "3023839"
  },
  {
    "text": "typically in a client application we would use a proper fragment like we saw in the beginning and then defer that",
    "start": "3023839",
    "end": "3032480"
  },
  {
    "text": "okay defer works in the execution engine that the executor will",
    "start": "3032480",
    "end": "3037760"
  },
  {
    "text": "split our our graph apart execute first the initial graph wait",
    "start": "3037760",
    "end": "3043440"
  },
  {
    "text": "until we have sent down the first response and then process the deferred parts",
    "start": "3043440",
    "end": "3050000"
  },
  {
    "text": "and this works over http one so you can use it in any",
    "start": "3050000",
    "end": "3055760"
  },
  {
    "text": "browser let's go into it quickly and that's my last demo and we are very tight on time",
    "start": "3055760",
    "end": "3065200"
  },
  {
    "text": "demo five okay",
    "start": "3066720",
    "end": "3073680"
  },
  {
    "text": "let's take the server",
    "start": "3073680",
    "end": "3077200"
  },
  {
    "text": "okay let me just show you how that actually works run",
    "start": "3079839",
    "end": "3085280"
  },
  {
    "text": "okay so my server is coming up i'm refreshing my schema here",
    "start": "3088160",
    "end": "3094640"
  },
  {
    "text": "and i think i already prepared something for the deferred case come on",
    "start": "3094640",
    "end": "3101440"
  },
  {
    "text": "no i didn't what yes there",
    "start": "3101440",
    "end": "3106079"
  },
  {
    "text": "no okay i did that so this is the this is my uh query that i want to do",
    "start": "3107520",
    "end": "3115119"
  },
  {
    "text": "and actually when i execute it it will be around 500 milliseconds 600 milliseconds which is kind of slow for",
    "start": "3115119",
    "end": "3121200"
  },
  {
    "text": "my web application so i know that name is fast because we have",
    "start": "3121200",
    "end": "3127599"
  },
  {
    "text": "optimized it on my server but i i think these two guys price and in",
    "start": "3127599",
    "end": "3133839"
  },
  {
    "text": "watch list is actually slow data so i'm saying actually server just give",
    "start": "3133839",
    "end": "3139680"
  },
  {
    "text": "me the name quickly and then send down the other data so i'm deferring",
    "start": "3139680",
    "end": "3145119"
  },
  {
    "text": "this part of my query",
    "start": "3145119",
    "end": "3148400"
  },
  {
    "text": "let me format that and then i'm executing that and you can see",
    "start": "3150319",
    "end": "3156559"
  },
  {
    "text": "actually data is being patched in i get the initial json graph and then data is being patched in",
    "start": "3156559",
    "end": "3163119"
  },
  {
    "text": "if you look in the transport lock we can see that what the server",
    "start": "3163119",
    "end": "3168400"
  },
  {
    "text": "does it it sends actually first just this name graph down and then it sends patches to my client",
    "start": "3168400",
    "end": "3176720"
  },
  {
    "text": "which says okay patch asset nodes actually this",
    "start": "3176720",
    "end": "3181839"
  },
  {
    "text": "this data patched that into this part of my initial json graph",
    "start": "3181839",
    "end": "3187839"
  },
  {
    "text": "let's have a look what that actually does when we put it in a real proper",
    "start": "3187839",
    "end": "3193440"
  },
  {
    "text": "react application",
    "start": "3193440",
    "end": "3196558"
  },
  {
    "text": "okay so this is my react application actually for the service we have built so far",
    "start": "3199599",
    "end": "3207440"
  },
  {
    "text": "and i have here under scenes a dashboard",
    "start": "3207680",
    "end": "3214640"
  },
  {
    "text": "where i have my dashboard container and you can see here actually the fragments",
    "start": "3215520",
    "end": "3220880"
  },
  {
    "text": "this is my graphql query and here i've fragments for my various components i'm",
    "start": "3220880",
    "end": "3225920"
  },
  {
    "text": "using in this client and i can see that the dashboard spotlight fragment",
    "start": "3225920",
    "end": "3231040"
  },
  {
    "text": "is being deferred and i can look into my into my dashboard spotlight",
    "start": "3231040",
    "end": "3239359"
  },
  {
    "text": "component here and can see that there is",
    "start": "3239359",
    "end": "3244720"
  },
  {
    "text": "here my dashboard spotlight card fragment which is also being deferred so i can stack the first uh",
    "start": "3244720",
    "end": "3251680"
  },
  {
    "text": "into each other and let's have a look how that that looks like when i start actually this",
    "start": "3251680",
    "end": "3257599"
  },
  {
    "text": "application so i'm",
    "start": "3257599",
    "end": "3261920"
  },
  {
    "text": "yeah yeah i know sorry actually i have no clue about react",
    "start": "3263280",
    "end": "3269599"
  },
  {
    "text": "martin my colleague believe this okay that's um starting",
    "start": "3269599",
    "end": "3276079"
  },
  {
    "text": "and then my application is coming up and you can see",
    "start": "3276079",
    "end": "3282000"
  },
  {
    "text": "this component this data was immediately there and then these other components came with um and we used here suspense",
    "start": "3282000",
    "end": "3288559"
  },
  {
    "text": "and stuff and um so i immediately get my initial data the ticker the price and the chart",
    "start": "3288559",
    "end": "3294960"
  },
  {
    "text": "and then when the other data is available these components are being rendered and that is",
    "start": "3294960",
    "end": "3301200"
  },
  {
    "text": "making these fluent applications even possible that's why facebook is using",
    "start": "3301200",
    "end": "3306240"
  },
  {
    "text": "graphql in that way because when you go on their facebook page and they load all the",
    "start": "3306240",
    "end": "3312160"
  },
  {
    "text": "news and the comments and the likes they actually defer all this data you get the",
    "start": "3312160",
    "end": "3318160"
  },
  {
    "text": "first few stories immediately and then all these other data comes and it's a single http connection that they are",
    "start": "3318160",
    "end": "3324960"
  },
  {
    "text": "using and the data is just being streamed over the single http request",
    "start": "3324960",
    "end": "3331040"
  },
  {
    "text": "and that makes even with very slow data a very smooth",
    "start": "3331040",
    "end": "3337040"
  },
  {
    "text": "smooth data fetching possible and look my my response time initially was",
    "start": "3337040",
    "end": "3343280"
  },
  {
    "text": "630 milliseconds for the first bytes to arrive and with defer only 37",
    "start": "3343280",
    "end": "3348880"
  },
  {
    "text": "milliseconds okay that",
    "start": "3348880",
    "end": "3354799"
  },
  {
    "text": "was a very quick little deep dive into graphql",
    "start": "3354799",
    "end": "3359920"
  },
  {
    "text": "um graphql is rapidly developing so there it's adding new features in a rapid pace",
    "start": "3359920",
    "end": "3368160"
  },
  {
    "text": "graphql 21 2021 added a ton of features with graphql 2022 defer and stream is",
    "start": "3368160",
    "end": "3375680"
  },
  {
    "text": "coming then we are talking about error boundaries i had no time to show you these",
    "start": "3375680",
    "end": "3380880"
  },
  {
    "text": "um but there's a lot of things in the pipeline of the graphql spec and there are all things like one-off like input",
    "start": "3380880",
    "end": "3388079"
  },
  {
    "text": "unions and other things coming that make the type system stronger and give you more flexibility in building",
    "start": "3388079",
    "end": "3394960"
  },
  {
    "text": "applications and building responsive applications with real-time data",
    "start": "3394960",
    "end": "3401599"
  },
  {
    "text": "if you want to follow me on twitter you can do it's this my twitter handle",
    "start": "3402160",
    "end": "3407200"
  },
  {
    "text": "and our library hot chocolate is available on github if you like it help us stars",
    "start": "3407200",
    "end": "3414079"
  },
  {
    "text": "if not no worries um please vote for the talk when you go",
    "start": "3414079",
    "end": "3420480"
  },
  {
    "text": "out i was asked by the ndc crew for that if you have questions i'm available",
    "start": "3420480",
    "end": "3427839"
  },
  {
    "text": "anybody questions no",
    "start": "3427839",
    "end": "3432200"
  },
  {
    "text": "you",
    "start": "3441359",
    "end": "3443440"
  }
]