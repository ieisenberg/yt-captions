[
  {
    "text": "test all right I think we can start so welcome",
    "start": "799",
    "end": "6600"
  },
  {
    "text": "everybody to my talk about a practical guide for crafting resilient UI",
    "start": "6600",
    "end": "11719"
  },
  {
    "text": "components first of all hey Copenhagen Denmark um it's my first time here in Copenhagen Denmark and actually who is",
    "start": "11719",
    "end": "18199"
  },
  {
    "text": "who from is from here anyone from here who is from Denmark here okay who is",
    "start": "18199",
    "end": "24720"
  },
  {
    "text": "from outside Denmark the same wow crazy",
    "start": "24720",
    "end": "30560"
  },
  {
    "text": "um yeah I came a couple days earlier um when I arrived here and I did actually the most touristic things you can ever",
    "start": "30560",
    "end": "36200"
  },
  {
    "text": "do and I tried uh some of these uh smro I guess you say and they were really good um so basically 10 out of 10 um I",
    "start": "36200",
    "end": "43160"
  },
  {
    "text": "also did a lot of uh biking and things like that and yeah for the ones actually",
    "start": "43160",
    "end": "48600"
  },
  {
    "text": "that are from here or know this place very well I'll be stay until the end of",
    "start": "48600",
    "end": "53840"
  },
  {
    "text": "the week so I'd be curious to know from you what your favorite food here in Denmar is and which I definitely should",
    "start": "53840",
    "end": "59480"
  },
  {
    "text": "not miss so before to talk about UI components",
    "start": "59480",
    "end": "65158"
  },
  {
    "text": "I'd like to quickly introduce myself um my name is Glenn and I am from Vienna",
    "start": "65159",
    "end": "71000"
  },
  {
    "text": "Austria uh I have uh Philippine um heritages so I look like Filipino",
    "start": "71000",
    "end": "76560"
  },
  {
    "text": "obviously so you can find me also uh at Glenn Rees but without the Ease on all",
    "start": "76560",
    "end": "82079"
  },
  {
    "text": "the social media uh channels including X or formerly known as Twitter LinkedIn or",
    "start": "82079",
    "end": "88280"
  },
  {
    "text": "Instagram or basically anywhere I'm the head of developer relations at",
    "start": "88280",
    "end": "94159"
  },
  {
    "text": "uh Caden which um is the only layer one multi-chain blockchain that actually",
    "start": "94159",
    "end": "99920"
  },
  {
    "text": "scales and I'm super super thrilled to be there um to advance their front and",
    "start": "99920",
    "end": "105079"
  },
  {
    "text": "and um uh react ecosystem and Community where I can work with all the tech that",
    "start": "105079",
    "end": "110360"
  },
  {
    "text": "I'm really really passionate about like uh react uh graphql typescript and",
    "start": "110360",
    "end": "115880"
  },
  {
    "text": "Design Systems now let's talk about about building U eyes so personally um I have",
    "start": "115880",
    "end": "123320"
  },
  {
    "text": "found building U eyes a super super positive uh task too um and like it's",
    "start": "123320",
    "end": "131319"
  },
  {
    "text": "one of the things what that I really really enjoy and and uh care care a lot about which is also at the same uh time",
    "start": "131319",
    "end": "139640"
  },
  {
    "text": "super challenging uh task to do especially when it comes to when it",
    "start": "139640",
    "end": "145040"
  },
  {
    "text": "comes to building robust uis and it's similar to things where I'm like okay I want to create this thing I want to",
    "start": "145040",
    "end": "151519"
  },
  {
    "text": "create this new project maybe let's create a video and put a lot of you know effort inside of it or you know I'm I'm",
    "start": "151519",
    "end": "158440"
  },
  {
    "text": "really passionate about also um playing music so let's let's create you know a a",
    "start": "158440",
    "end": "163800"
  },
  {
    "text": "track or something and it's so beautiful right so but once you're forced to give more thoughts into something that you're",
    "start": "163800",
    "end": "170319"
  },
  {
    "text": "really really passionate about and more effort into it you're not just like making the you're just just just not",
    "start": "170319",
    "end": "176920"
  },
  {
    "text": "just like making this thing or uh the uis but you want to make it really",
    "start": "176920",
    "end": "182159"
  },
  {
    "text": "really thoughtfully and uh for your eyes robust and and then there is you know there's a",
    "start": "182159",
    "end": "187840"
  },
  {
    "text": "bunch of challenges to think of so maybe let's take a step back and",
    "start": "187840",
    "end": "193519"
  },
  {
    "text": "begin with the question where the world is actually robust so I'd break this down into some",
    "start": "193519",
    "end": "200720"
  },
  {
    "text": "key things that I've highlighted here um that I found really really important when thinking in robust uh uis so first",
    "start": "200720",
    "end": "208480"
  },
  {
    "text": "is uh for example API design so a well-designed API um with a minimal",
    "start": "208480",
    "end": "214640"
  },
  {
    "text": "surface area makes a component uh robust by exposing you know only the um essential props methods or",
    "start": "214640",
    "end": "223560"
  },
  {
    "text": "um uh events basically to simplify uh the integration and you know reduce the",
    "start": "223560",
    "end": "229799"
  },
  {
    "text": "possibilities of errors and easing the long-term maintenance um second it should be uh",
    "start": "229799",
    "end": "237360"
  },
  {
    "text": "you know adaptable and flexible and should allow for easy customization through props making it uh reusable",
    "start": "237360",
    "end": "245079"
  },
  {
    "text": "across various parts of applications or um of uh various",
    "start": "245079",
    "end": "251159"
  },
  {
    "text": "applications um also robust U UI components should be accessible to all",
    "start": "251159",
    "end": "256720"
  },
  {
    "text": "users including to those um who rely on assisted Technologies for example like",
    "start": "256720",
    "end": "261880"
  },
  {
    "text": "like screen readers so things like um area attributes or uh keyboard",
    "start": "261880",
    "end": "267440"
  },
  {
    "text": "navigation are some of the features that can help make a component or make your application more accessible for",
    "start": "267440",
    "end": "275479"
  },
  {
    "text": "them um a robust components should also be designed to handle errors gracefully",
    "start": "275479",
    "end": "281639"
  },
  {
    "text": "for instance if a component relies uh on data from an API um it should be able to",
    "start": "281639",
    "end": "288240"
  },
  {
    "text": "handle uh scenarios when where the API is unavailable or return incorrect",
    "start": "288240",
    "end": "294639"
  },
  {
    "text": "data a robust UI component should be optimized for performance so slow or uh",
    "start": "294639",
    "end": "301080"
  },
  {
    "text": "you know very heavy intensive UI components like think of uh big charts",
    "start": "301080",
    "end": "306280"
  },
  {
    "text": "or uh like huge large tables can result in uh like a poor uh us experience very",
    "start": "306280",
    "end": "314600"
  },
  {
    "text": "quickly as uh for testing not only unit tests but also integration tests and end to- end tests so testing Frameworks and",
    "start": "314600",
    "end": "321440"
  },
  {
    "text": "tools that can simulate um uh a variety of conditions under which a uh UI",
    "start": "321440",
    "end": "328039"
  },
  {
    "text": "component must operate reliably um also it's important you know",
    "start": "328039",
    "end": "334280"
  },
  {
    "text": "to incorporate fallback or default States so for example if you have um",
    "start": "334280",
    "end": "340479"
  },
  {
    "text": "your um if you display a default or a fallback Avatar when the users profiles",
    "start": "340479",
    "end": "346759"
  },
  {
    "text": "image is uh fails to load and as for documentation describe",
    "start": "346759",
    "end": "352800"
  },
  {
    "text": "how they should be used um you know what the limit what what limitations they have um think of uh writing down some",
    "start": "352800",
    "end": "360840"
  },
  {
    "text": "some conventions and how you know how to handle varage edge cases and yeah by paying um all of these",
    "start": "360840",
    "end": "368720"
  },
  {
    "text": "different key factors uh developers can basically create UI components that are",
    "start": "368720",
    "end": "373880"
  },
  {
    "text": "not only robust but also can reduce the possibilities of bugs while improving the use experience and ultimately save",
    "start": "373880",
    "end": "380319"
  },
  {
    "text": "development time uh in the long run so building us interfaces come with",
    "start": "380319",
    "end": "386639"
  },
  {
    "text": "certain foundations so to me I think um what makes me feel real comfortable and",
    "start": "386639",
    "end": "391720"
  },
  {
    "text": "productive to start building uis is by getting first the right Tools in place",
    "start": "391720",
    "end": "397720"
  },
  {
    "text": "and then uh the theming and the Design Systems specified and the key strategies",
    "start": "397720",
    "end": "403280"
  },
  {
    "text": "and approaches of actually building them so let's talk a bit about tooling",
    "start": "403280",
    "end": "409400"
  },
  {
    "text": "first so before we start building something we need tools and um we don't",
    "start": "409400",
    "end": "415639"
  },
  {
    "text": "need just you know build you know or or set up any tools but it's really really",
    "start": "415639",
    "end": "421120"
  },
  {
    "text": "helpful if we can get you know really really good tools and ideally the most",
    "start": "421120",
    "end": "426440"
  },
  {
    "text": "effective tool so the better the tools are the better the developing experience will be and therefore the better the",
    "start": "426440",
    "end": "432560"
  },
  {
    "text": "better uh quality output we get and and results we tend to get so better tooling um help us move uh",
    "start": "432560",
    "end": "441080"
  },
  {
    "text": "faster and with the most reli reliability as possible and we don't only need tooling to help our codebase",
    "start": "441080",
    "end": "447800"
  },
  {
    "text": "clean but also uh keep our code Bas clean without much work from us uh um developers required",
    "start": "447800",
    "end": "455680"
  },
  {
    "text": "so anything that can be you know automated or autof fixed without us requiring to do anything are like really",
    "start": "455680",
    "end": "462560"
  },
  {
    "text": "really foundational uh things that help us uh you know uh achieve building more robust use",
    "start": "462560",
    "end": "468319"
  },
  {
    "text": "interfaces so um fundamental tools um I'm sure pretty much everyone of here",
    "start": "468319",
    "end": "474000"
  },
  {
    "text": "has heard of them are you know things like formatters or lters whether they are like es l or pror or Rome um these",
    "start": "474000",
    "end": "482400"
  },
  {
    "text": "are like super straightforward choices for most applications and I think these are like really foundational tools that",
    "start": "482400",
    "end": "488599"
  },
  {
    "text": "are super indispensable and definitely one of the things you first want to set up before uh start building uh your",
    "start": "488599",
    "end": "495319"
  },
  {
    "text": "project so um these are these aren't supposed to just set you guidelines and",
    "start": "495319",
    "end": "501240"
  },
  {
    "text": "rules for certain things but I think more relevant uh in my opinion is when",
    "start": "501240",
    "end": "506840"
  },
  {
    "text": "uh they find and actually fix any syntax or problems automatically in the code",
    "start": "506840",
    "end": "512959"
  },
  {
    "text": "with without you doing uh any effort so I'm a huge fan and had only",
    "start": "512959",
    "end": "519440"
  },
  {
    "text": "good experience uh with a source code that is uh basically deterministic so what do I mean by",
    "start": "519440",
    "end": "527880"
  },
  {
    "text": "that one of my favorite examples um is actually to do some sort of things that",
    "start": "528120",
    "end": "534399"
  },
  {
    "text": "can uh a assort your code so it doesn't have to be in this like in this case in alphabetical order but it can be",
    "start": "534399",
    "end": "541360"
  },
  {
    "text": "anything as long as it's in the same order based on your current rule you defining so it could be some grouping",
    "start": "541360",
    "end": "547880"
  },
  {
    "text": "that you have that you want to have that particular thing be ordered or on things like that um so I understand that also",
    "start": "547880",
    "end": "555360"
  },
  {
    "text": "Autos sorting is often you know not really desired or not encouraged because",
    "start": "555360",
    "end": "560440"
  },
  {
    "text": "it somewhat enforces a predefined grouping that isn't necessarily like the the best case um for for each and every",
    "start": "560440",
    "end": "567760"
  },
  {
    "text": "case um deterministic code um in my opinion",
    "start": "567760",
    "end": "573200"
  },
  {
    "text": "increases maintainability and consistency in the code um and the simple example would be um you know",
    "start": "573200",
    "end": "579320"
  },
  {
    "text": "sorting anything that can be sorted automatically without Problems by by its alphabet and this way you'll get",
    "start": "579320",
    "end": "585240"
  },
  {
    "text": "deterministic code which makes it more allowable predict predictable and",
    "start": "585240",
    "end": "590480"
  },
  {
    "text": "consistent um yeah as for eslint here's a config that I keep uh using uh for all",
    "start": "590720",
    "end": "596560"
  },
  {
    "text": "my project called um config es config banana and with this you basically get all the um autof fixable uh rules and",
    "start": "596560",
    "end": "604000"
  },
  {
    "text": "batter included uh things uh incl better included and it's also open source and GitHub so basic uh you can you can check",
    "start": "604000",
    "end": "611360"
  },
  {
    "text": "it out uh I keep it I try to keep it maintained um as as good as I can and",
    "start": "611360",
    "end": "617320"
  },
  {
    "text": "what's also worth note is that um uh when you uh want to enhance your linting with type information through typescript",
    "start": "617320",
    "end": "624640"
  },
  {
    "text": "it can be super useful um you know for automatically getting um uh types and",
    "start": "624640",
    "end": "629800"
  },
  {
    "text": "and orders in the way you want and this only needs a reference to your TS config Json by adding um so either true uh or",
    "start": "629800",
    "end": "639480"
  },
  {
    "text": "uh the path to your TS config Json uh to uh parser options.",
    "start": "639480",
    "end": "646440"
  },
  {
    "text": "project two really good uh pretty up plugins that have only good experience",
    "start": "646639",
    "end": "651839"
  },
  {
    "text": "with uh are uh Pria plugin sort Imports by uh triago and Pria plug-in tailan is",
    "start": "651839",
    "end": "658639"
  },
  {
    "text": "as G you are using taen CSS so they both they both help um with uh sorting your",
    "start": "658639",
    "end": "664480"
  },
  {
    "text": "import statements and as for Tails as with your uh your utility class names so",
    "start": "664480",
    "end": "670800"
  },
  {
    "text": "it's super neat um and uh yeah Worth to check them out pretty sure have also",
    "start": "670800",
    "end": "675959"
  },
  {
    "text": "saved me a lot of time uh in in development",
    "start": "675959",
    "end": "681360"
  },
  {
    "text": "already you probably don't want to build user interfaces inside your app because often times uh there can be components",
    "start": "681360",
    "end": "688600"
  },
  {
    "text": "um that are you know deeply nested inside uh of States um until you reach",
    "start": "688600",
    "end": "694279"
  },
  {
    "text": "them so not to mention you know very rare or you know very complex states that you barely barely reach so make",
    "start": "694279",
    "end": "701440"
  },
  {
    "text": "sure to build components uh in isolation so uh I have put here some uh of the",
    "start": "701440",
    "end": "708680"
  },
  {
    "text": "most established uh component explorers I think here including uh story book",
    "start": "708680",
    "end": "714240"
  },
  {
    "text": "rare Cosmos uh Ladle Etc and basically they they all can help you know build",
    "start": "714240",
    "end": "720560"
  },
  {
    "text": "components in isolation isolation very conveniently and uh yeah personally I've worked with storybook uh for uh most of",
    "start": "720560",
    "end": "728560"
  },
  {
    "text": "my projects but I'm uh seeing more and more folks using Alternatives too like Ladle because it's very friendly to uh",
    "start": "728560",
    "end": "735360"
  },
  {
    "text": "projects that are built on top of bead for example and yeah especially storybook have helped me uh to control",
    "start": "735360",
    "end": "741839"
  },
  {
    "text": "the states um with you know the knobs uh very conveniently and these tools are also",
    "start": "741839",
    "end": "748480"
  },
  {
    "text": "very perfect to document uh and and to collaborate with uh product managers and",
    "start": "748480",
    "end": "754560"
  },
  {
    "text": "uh even designers to uh yeah sync sync with the design system",
    "start": "754560",
    "end": "760519"
  },
  {
    "text": "basically um one thing that I really really encourage also is you uh want to",
    "start": "760519",
    "end": "765959"
  },
  {
    "text": "make sure that you cover all the different states of every single component and what I like to do is I",
    "start": "765959",
    "end": "772240"
  },
  {
    "text": "like to uh try to show all the different states uh at once um for example on your",
    "start": "772240",
    "end": "777839"
  },
  {
    "text": "favorite uh component Explorer so you really want to make sure you cover all the different states and make sure they sit perfectly and there is no uh outlier",
    "start": "777839",
    "end": "785920"
  },
  {
    "text": "or anything and yeah to boost your confidence with all of these um set up",
    "start": "785920",
    "end": "791920"
  },
  {
    "text": "automatic tests even U it's sometimes controversial um as they are you know are super valuable uh on the component",
    "start": "791920",
    "end": "798560"
  },
  {
    "text": "level as well to keep the Integrity um of the interface and to increase confidence liability especially when",
    "start": "798560",
    "end": "804800"
  },
  {
    "text": "adding updates to the UI code base so um there is not much work involved I would",
    "start": "804800",
    "end": "810320"
  },
  {
    "text": "I have to say but um yeah there's tools that can help you really uh make them",
    "start": "810320",
    "end": "816320"
  },
  {
    "text": "very quickly even if it's just smoke tests or just checking the dimensions or anything so things like Cypress comes",
    "start": "816320",
    "end": "822600"
  },
  {
    "text": "with a build-in feature that helps you know with creating automated tests uh for a component on the uh on the in the",
    "start": "822600",
    "end": "828959"
  },
  {
    "text": "front and for you know various Frameworks now let's talk about um",
    "start": "828959",
    "end": "835600"
  },
  {
    "text": "theming so when theming apps there is act absolutely zero cases we are",
    "start": "835600",
    "end": "841120"
  },
  {
    "text": "designing the actual page or templates but you want to you know you you're",
    "start": "841120",
    "end": "846279"
  },
  {
    "text": "designing systems of components so how do you do that so um you first need some",
    "start": "846279",
    "end": "854720"
  },
  {
    "text": "attributes or values so we call them also here uh in this um context design",
    "start": "854720",
    "end": "860440"
  },
  {
    "text": "tokens so uh the most common core values on on web and also on Native U uh apps",
    "start": "860440",
    "end": "866720"
  },
  {
    "text": "are typography colors and uh spacing so these core values uh work very well",
    "start": "866720",
    "end": "873720"
  },
  {
    "text": "together to create like a truly great and you know a very unique uh system as a result for your um",
    "start": "873720",
    "end": "881800"
  },
  {
    "text": "design and in practice uh applying um the tokens on the button will represent",
    "start": "881800",
    "end": "887360"
  },
  {
    "text": "basically the button in a way that um like how it's specified in the system and and this is and this is like a",
    "start": "887360",
    "end": "894279"
  },
  {
    "text": "specification and it's absolutely not tied um on to one framework and you can",
    "start": "894279",
    "end": "899480"
  },
  {
    "text": "mix it uh to different Frameworks and have you know have the same design system as long as they stay compliant to",
    "start": "899480",
    "end": "905880"
  },
  {
    "text": "your uh design system specification um one specific pattern",
    "start": "905880",
    "end": "911639"
  },
  {
    "text": "that I'd like also to bring up now is um when you create components that dictates the layout and",
    "start": "911639",
    "end": "918199"
  },
  {
    "text": "spacings so um for example let's take deep deep look into this um typographic",
    "start": "918199",
    "end": "924120"
  },
  {
    "text": "uh blocks so you have uh you know you have a basic header a simple header uh two",
    "start": "924120",
    "end": "929720"
  },
  {
    "text": "paragraphs um and when you specify spaces uh between the paragraphs it's very very common that you uh specify",
    "start": "929720",
    "end": "936839"
  },
  {
    "text": "them on your paragraph and in this case I'm doing you know P plus P um but I've seen more often uh just just you know",
    "start": "936839",
    "end": "944040"
  },
  {
    "text": "just a margin bottom on the paragraph level as well and yeah to be honest um I",
    "start": "944040",
    "end": "949639"
  },
  {
    "text": "have only um not I have only nightmare experience with them since you know they can be barely moved elsewhere without",
    "start": "949639",
    "end": "956040"
  },
  {
    "text": "having the correct space spacing applied I know there is margin that doesn't sometimes apply spacing on a wrapper but",
    "start": "956040",
    "end": "964279"
  },
  {
    "text": "um you you cannot you you cannot assume that the wrapper is a is a flex box or is a grid that yeah you know basically",
    "start": "964279",
    "end": "971560"
  },
  {
    "text": "includes them and it's very unpredictable so what we want instead is to have uh you know um a component that",
    "start": "971560",
    "end": "978680"
  },
  {
    "text": "basically um is for the layout that like like like a wrapper or container that",
    "start": "978680",
    "end": "983800"
  },
  {
    "text": "controls the spaces between uh each child elements so this way we can still",
    "start": "983800",
    "end": "988839"
  },
  {
    "text": "move uh them out of the box and move them move something else in here and",
    "start": "988839",
    "end": "994160"
  },
  {
    "text": "still have the correct Gap uh space in place and it's also worth note uh that",
    "start": "994160",
    "end": "1000079"
  },
  {
    "text": "you can also uh compose these kind of things so you can have uh these um",
    "start": "1000079",
    "end": "1005920"
  },
  {
    "text": "vertical spaces composed with uh you know horizontal spaces for example in the way you",
    "start": "1005920",
    "end": "1012800"
  },
  {
    "text": "want now let's talk about building so something worth to",
    "start": "1013639",
    "end": "1020720"
  },
  {
    "text": "understand or uh revisit is the methodology of um Atomic design for",
    "start": "1020720",
    "end": "1026918"
  },
  {
    "text": "creating us interface designs that are both modular and",
    "start": "1026919",
    "end": "1032120"
  },
  {
    "text": "scalable so yeah think of UI broken down into um several things like atoms um",
    "start": "1032120",
    "end": "1040199"
  },
  {
    "text": "molecules organisms templates and Pages basically working together to create an",
    "start": "1040199",
    "end": "1045240"
  },
  {
    "text": "effective um inter interface design pattern so it's a a mental model to help",
    "start": "1045240",
    "end": "1050440"
  },
  {
    "text": "us think um of our user interfaces as both as a you know cohesive hole and the",
    "start": "1050440",
    "end": "1056559"
  },
  {
    "text": "collection uh of parts at the same time so for example atoms in practice",
    "start": "1056559",
    "end": "1064520"
  },
  {
    "text": "are basically um the the smallest um pieces possible in your uh application",
    "start": "1064520",
    "end": "1072000"
  },
  {
    "text": "um so these are things like like super Primitives such as you know just your your your uh your your um very button",
    "start": "1072000",
    "end": "1080840"
  },
  {
    "text": "primitive button uh or inputs or you know your uh very standard heading um",
    "start": "1080840",
    "end": "1088200"
  },
  {
    "text": "body text cards these kind of stuff right um and then molecules U basically",
    "start": "1088200",
    "end": "1096200"
  },
  {
    "text": "composes these atoms together in its smallest fundamental units like uh this Search Search widget for example where",
    "start": "1096200",
    "end": "1103080"
  },
  {
    "text": "you have you know your search input maybe a label on top and then a button next to it and the card in in the",
    "start": "1103080",
    "end": "1109880"
  },
  {
    "text": "back and then you start grouping molecules um and then get organisms that",
    "start": "1109880",
    "end": "1116120"
  },
  {
    "text": "represents like bigger sections such as the entire top navigation bar for",
    "start": "1116120",
    "end": "1122559"
  },
  {
    "text": "example now stitching more and more organisms together um you slowly get to create entire pages so this is one of um",
    "start": "1122559",
    "end": "1131440"
  },
  {
    "text": "an example that represents you know one kind of a page so basically a",
    "start": "1131440",
    "end": "1136960"
  },
  {
    "text": "template now when eventually we want to you know you want to distin distinct distinct um",
    "start": "1136960",
    "end": "1144280"
  },
  {
    "text": "distinguish different templates from each other and you can do that even by putting uh you know uh representative",
    "start": "1144280",
    "end": "1151080"
  },
  {
    "text": "content uh uh to the to the page like uh you know different uh text or image or",
    "start": "1151080",
    "end": "1158000"
  },
  {
    "text": "basically anything so yeah another thing uh CDD or",
    "start": "1158000",
    "end": "1164640"
  },
  {
    "text": "component RM development um is a common development process and strategy um for",
    "start": "1164640",
    "end": "1170760"
  },
  {
    "text": "building components so it's a methodology that anchors the build process around",
    "start": "1170760",
    "end": "1176840"
  },
  {
    "text": "components and it's also um it's a process basically also to uh build uis",
    "start": "1176840",
    "end": "1182000"
  },
  {
    "text": "um from the bottom up where you start at the level of you know your primitive",
    "start": "1182000",
    "end": "1187720"
  },
  {
    "text": "components and your atoms and then uh basically end at the level of uh your",
    "start": "1187720",
    "end": "1193880"
  },
  {
    "text": "pages and uh basically um on your on the bigger parts of your application",
    "start": "1193880",
    "end": "1199880"
  },
  {
    "text": "s in practice um you can apply the same methodology also on your per component",
    "start": "1199880",
    "end": "1205600"
  },
  {
    "text": "level for example so basically you uh build the Box uh here at the bottom and",
    "start": "1205600",
    "end": "1210799"
  },
  {
    "text": "then follow up with uh maybe the value text um you know add add the font add",
    "start": "1210799",
    "end": "1216400"
  },
  {
    "text": "the colors uh basically or maybe maybe the placeholder that's inside and then",
    "start": "1216400",
    "end": "1221520"
  },
  {
    "text": "you look into decorating them into uh decorating them with an icon with with the search class for example and J",
    "start": "1221520",
    "end": "1228840"
  },
  {
    "text": "and then after you add more granular logic and things on top of that things like maybe maybe a shadow or maybe some",
    "start": "1228840",
    "end": "1235240"
  },
  {
    "text": "animations that you want to uh have when you hover or when you focus on",
    "start": "1235240",
    "end": "1241280"
  },
  {
    "text": "it now let's Deep dive into some code and I'd like to show you some super interesting things that I've learned",
    "start": "1241280",
    "end": "1247760"
  },
  {
    "text": "over the past uh years when building UI uh of a mid and to large uh",
    "start": "1247760",
    "end": "1254880"
  },
  {
    "text": "applications but before we get uh deep here are some super quick WIS uh that I'd like to sum up also for you that uh",
    "start": "1254880",
    "end": "1262440"
  },
  {
    "text": "and if we keep this in Our Minds when building U user interfaces basically um",
    "start": "1262440",
    "end": "1268360"
  },
  {
    "text": "this has been actually recommended for now almost or maybe even more than 10 years and I think it's still FES",
    "start": "1268360",
    "end": "1274840"
  },
  {
    "text": "perfectly so keep dump and smart or uh container and presentation components",
    "start": "1274840",
    "end": "1281000"
  },
  {
    "text": "separated um second um collocate related Parts together um if you want if you",
    "start": "1281000",
    "end": "1286919"
  },
  {
    "text": "work with react hooks for example a great way to do that is by uh for example like building a custom hook um",
    "start": "1286919",
    "end": "1294760"
  },
  {
    "text": "that you know groups groups the logic together if applicable and yeah try to keep the apis",
    "start": "1294760",
    "end": "1300760"
  },
  {
    "text": "as sensible as possible and um I'm I'm also a big fan of you know not abbreviating too many things because",
    "start": "1300760",
    "end": "1307120"
  },
  {
    "text": "this also keeps it more readable to your colleagues if you work on uh building",
    "start": "1307120",
    "end": "1312200"
  },
  {
    "text": "apis and yeah try to ruce apis surface to the bare minimum now let's talk about react uh",
    "start": "1312200",
    "end": "1321080"
  },
  {
    "text": "component props patterns so this is a little bit react focused but I'm sure there's still a ton to pick up for uh uh",
    "start": "1321080",
    "end": "1328360"
  },
  {
    "text": "and take away for other UI libraries and Frameworks and I'd like to start with",
    "start": "1328360",
    "end": "1333799"
  },
  {
    "text": "the bare um Boolean prop so here's an example of a button that specifies that",
    "start": "1333799",
    "end": "1339120"
  },
  {
    "text": "specifies um with uh that specifies some uh primary Styles and you'll quickly",
    "start": "1339120",
    "end": "1344760"
  },
  {
    "text": "note that um by doing it like this as a Boolean um it will be quickly odd when",
    "start": "1344760",
    "end": "1351159"
  },
  {
    "text": "you try to add another Boolean of its same kind so you cannot really do that right so it doesn't make any sense so",
    "start": "1351159",
    "end": "1358480"
  },
  {
    "text": "well there is actually a way and it's actually possible when you use um uh",
    "start": "1358480",
    "end": "1365039"
  },
  {
    "text": "function overloads for example or typing that via a union prop types um if you do",
    "start": "1365039",
    "end": "1371279"
  },
  {
    "text": "that correctly um you should be able to see an error by your TS TS compiler when",
    "start": "1371279",
    "end": "1376880"
  },
  {
    "text": "using both uh Sim simultaneously but uh you know alternatively and probably my most",
    "start": "1376880",
    "end": "1383679"
  },
  {
    "text": "favorite case to handle this is uh by directly specifying it as a prop as a uh Union type or string",
    "start": "1383679",
    "end": "1391200"
  },
  {
    "text": "literals and yeah here's a quick example of a button that uses exactly this as a",
    "start": "1391200",
    "end": "1396440"
  },
  {
    "text": "string literal Union and in this case um it's a button with variant of with a V",
    "start": "1396440",
    "end": "1402720"
  },
  {
    "text": "with variance of button appearances so uh the good thing about you know separating unions as a separate",
    "start": "1402720",
    "end": "1409320"
  },
  {
    "text": "type is that it can be easily um directly exported and consumed from somewhere else if",
    "start": "1409320",
    "end": "1416919"
  },
  {
    "text": "necessary so yeah since both are basically possible and technically safe",
    "start": "1416960",
    "end": "1422520"
  },
  {
    "text": "to do so um here's a comparison of some key differences that I've uh um uh",
    "start": "1422520",
    "end": "1428559"
  },
  {
    "text": "discovered so I think that Union type has uh less boil plate uh when you try to uh get this Auto suggestions from",
    "start": "1428559",
    "end": "1435880"
  },
  {
    "text": "from your BS code editor for example so basically you don't have you don't need to write complex you know Union",
    "start": "1435880",
    "end": "1441720"
  },
  {
    "text": "types with two overloads also and yeah it has better all completion as",
    "start": "1441720",
    "end": "1447159"
  },
  {
    "text": "mentioned what about um dedicated components like this and how do these",
    "start": "1447159",
    "end": "1452320"
  },
  {
    "text": "come into place so",
    "start": "1452320",
    "end": "1457559"
  },
  {
    "text": "um I've also tried to um compare these",
    "start": "1457559",
    "end": "1462840"
  },
  {
    "text": "things um primary button button primary and uh button appearance primary and BAS basically if you um use button primary",
    "start": "1462840",
    "end": "1471039"
  },
  {
    "text": "the best it's it's the best when the when the primary prop is being used to denote the primary action of the button",
    "start": "1471039",
    "end": "1477480"
  },
  {
    "text": "such as in a form where the primary button is the one that submits the form um if you um so the primary button",
    "start": "1477480",
    "end": "1485440"
  },
  {
    "text": "syntax um can be used when you create a custom uh button component that is",
    "start": "1485440",
    "end": "1490520"
  },
  {
    "text": "specifically designed to always have a primary experience such as a button that that's for example like always red or",
    "start": "1490520",
    "end": "1497320"
  },
  {
    "text": "that has a ball text so this can be useful when you when when a specific appearance is needed uh consistently",
    "start": "1497320",
    "end": "1504320"
  },
  {
    "text": "throughout the project and if you have the uh button appearance is primary syntax this makes",
    "start": "1504320",
    "end": "1511960"
  },
  {
    "text": "a lot of sense to use when you want to change just the visual appearance of the button such as giving it a different",
    "start": "1511960",
    "end": "1518159"
  },
  {
    "text": "style uh or color next let's talk about um enriching",
    "start": "1518159",
    "end": "1526399"
  },
  {
    "text": "uh your components with types uh for standard HTML element",
    "start": "1526399",
    "end": "1532440"
  },
  {
    "text": "attributes so there's a variety of ways on how to enrich UI components with",
    "start": "1532440",
    "end": "1537960"
  },
  {
    "text": "types of an element react so there is you know react button HML attributes",
    "start": "1537960",
    "end": "1543240"
  },
  {
    "text": "component props with ref without ref HML props HML attributes and intrinsic",
    "start": "1543240",
    "end": "1549960"
  },
  {
    "text": "elements from jsx but you know they have all uh slightly differences and um I've",
    "start": "1549960",
    "end": "1557080"
  },
  {
    "text": "used I think think 90% of them and until the are in my experience is that button",
    "start": "1557080",
    "end": "1562600"
  },
  {
    "text": "hm attributes is to ver bothos um or is the most verbose here you can see",
    "start": "1562600",
    "end": "1568520"
  },
  {
    "text": "because you know has the most uh characters um then you have component",
    "start": "1568520",
    "end": "1573919"
  },
  {
    "text": "props which is not very specific about whether your component is using a ref or not so you have one that prefers a ref",
    "start": "1573919",
    "end": "1581360"
  },
  {
    "text": "and then one that doesn't prefer a ref and then you have still HTML props and how do you defer that with the other so",
    "start": "1581360",
    "end": "1588279"
  },
  {
    "text": "I've um discovered that these includes maybe a little bit too many types even",
    "start": "1588279",
    "end": "1593880"
  },
  {
    "text": "if they uh aren't you know basic if they if they maybe if they even if even if",
    "start": "1593880",
    "end": "1598919"
  },
  {
    "text": "they aren't uh uh specified in this element um and then there there's hm",
    "start": "1598919",
    "end": "1604240"
  },
  {
    "text": "attributes that doesn't actually include enough types um or not complete um",
    "start": "1604240",
    "end": "1610320"
  },
  {
    "text": "element attributes and then there is GSX intrinsic elements um which basically errors when you try to use them in line",
    "start": "1610320",
    "end": "1618520"
  },
  {
    "text": "um so uh most of the cases you have to wrap them with a non-nullable to be able to use it in line and um you won't have",
    "start": "1618520",
    "end": "1626200"
  },
  {
    "text": "to do that and um with these kind of things because um I think the most",
    "start": "1626200",
    "end": "1631480"
  },
  {
    "text": "accurate and the least foron types to work for me are basically these and uh",
    "start": "1631480",
    "end": "1636559"
  },
  {
    "text": "if you prefer not to be explicit so there you uh can use component props and",
    "start": "1636559",
    "end": "1642919"
  },
  {
    "text": "if you prefer to be explicit uh with yourf then uh use um either um with ref",
    "start": "1642919",
    "end": "1652120"
  },
  {
    "text": "if you if you're sure you want to W your component with with a ref or comp",
    "start": "1652120",
    "end": "1657480"
  },
  {
    "text": "component props without ref so these are the safest types I think uh that you can",
    "start": "1657480",
    "end": "1662960"
  },
  {
    "text": "get now exposing all the uh correct types is really really awesome but for",
    "start": "1662960",
    "end": "1669000"
  },
  {
    "text": "building truly pure and robust UI it's not necessarily ideal to do so and one",
    "start": "1669000",
    "end": "1675919"
  },
  {
    "text": "of the um favorite things and I like to do is you",
    "start": "1675919",
    "end": "1681640"
  },
  {
    "text": "know to uh at least ban the class name and style prop to enforce uh you know",
    "start": "1681640",
    "end": "1688480"
  },
  {
    "text": "more consistent design system as it allows individual components to to be",
    "start": "1688480",
    "end": "1693519"
  },
  {
    "text": "styled or to be modified in arbitrary ways and this can lead very very quickly",
    "start": "1693519",
    "end": "1699080"
  },
  {
    "text": "to inconsistencies in your um user interface um which can make it difficult",
    "start": "1699080",
    "end": "1704519"
  },
  {
    "text": "to maintain and for users to understand and to use your applic so this is a quick uh example how I",
    "start": "1704519",
    "end": "1711840"
  },
  {
    "text": "prefer to to basically do to apply the built-in omit um utility type from",
    "start": "1711840",
    "end": "1717600"
  },
  {
    "text": "typescript and just pull out um any props as string unions that you don't want to uh have expos in the second",
    "start": "1717600",
    "end": "1724320"
  },
  {
    "text": "parameter or you can do it also the other way to just pick uh with the pick utility type to just uh expose the ones",
    "start": "1724320",
    "end": "1731760"
  },
  {
    "text": "that you want to have exposed um to your components some sometimes uh something",
    "start": "1731760",
    "end": "1738600"
  },
  {
    "text": "that I um totally encourage to do in react components is also to reduce uh",
    "start": "1738600",
    "end": "1744760"
  },
  {
    "text": "reuse existing and uh types and interfaces so given you use uh like one",
    "start": "1744760",
    "end": "1751720"
  },
  {
    "text": "single component per file I can stress enough to reuse and Export uh types if",
    "start": "1751720",
    "end": "1757200"
  },
  {
    "text": "necessary so that updates to the exported or imported types are reflect automatically um that can save uh a lot",
    "start": "1757200",
    "end": "1765000"
  },
  {
    "text": "of work uh and and time down the line and for me often it outweighs to work",
    "start": "1765000",
    "end": "1770519"
  },
  {
    "text": "over uh when you you start duplicating the types uh",
    "start": "1770519",
    "end": "1776159"
  },
  {
    "text": "elsewhere um here's also like a very very quick bare minimum of a component that kind of outlines the most important",
    "start": "1776159",
    "end": "1782760"
  },
  {
    "text": "things and the how um one of many uh of my primitive UI component look like",
    "start": "1782760",
    "end": "1789720"
  },
  {
    "text": "basically uh you have the types or interfaces for uh the component props on the very top and then uh you have",
    "start": "1789720",
    "end": "1797880"
  },
  {
    "text": "um uh some sometimes like some static variables or constants put even before",
    "start": "1797880",
    "end": "1803559"
  },
  {
    "text": "that to keep props and and components grouped together and then inside the rendom block you'll find like visual",
    "start": "1803559",
    "end": "1809720"
  },
  {
    "text": "logic through you know Styles and class names and sometimes Hooks and then you can uh and then you get to the basically",
    "start": "1809720",
    "end": "1816880"
  },
  {
    "text": "the render function and here you want to make sure you want to keep it flat you want to create not you you don't want to",
    "start": "1816880",
    "end": "1824039"
  },
  {
    "text": "create Nest nested if conditions you want to create it as simp as possible and as easily as possible as easily",
    "start": "1824039",
    "end": "1831120"
  },
  {
    "text": "readable as possible now to further um enforce",
    "start": "1831120",
    "end": "1836240"
  },
  {
    "text": "consistency of the design system in react there's multiple strategies also to uh render um",
    "start": "1836240",
    "end": "1842919"
  },
  {
    "text": "subcomponents that should be themed in the same way so uh I can think you can think of it first as a compound",
    "start": "1842919",
    "end": "1850279"
  },
  {
    "text": "component or um as a polymorphic",
    "start": "1850279",
    "end": "1855000"
  },
  {
    "text": "component compound components are basically a group of related components um that are composed together to form",
    "start": "1855519",
    "end": "1862000"
  },
  {
    "text": "like a large um uh and more complex component that is basic this basically",
    "start": "1862000",
    "end": "1868159"
  },
  {
    "text": "allows for uh greater flexibility in modularity as the individual components can be used and composed in different",
    "start": "1868159",
    "end": "1875039"
  },
  {
    "text": "ways to meet the needs um of different",
    "start": "1875039",
    "end": "1880200"
  },
  {
    "text": "situations polymorphic components on the other end are components that accept any different numbers of props and render",
    "start": "1880200",
    "end": "1886000"
  },
  {
    "text": "them in different ways depending on the props that are passed in this allows also for um great flexibility and uh in",
    "start": "1886000",
    "end": "1893919"
  },
  {
    "text": "how the component is used as it can be customized uh you know to meet basically the needs for every situation that you",
    "start": "1893919",
    "end": "1900840"
  },
  {
    "text": "have by passing in different props so overall compound components and polymorphic components are both super",
    "start": "1900840",
    "end": "1907840"
  },
  {
    "text": "useful approaches for building uh reusable components in react and can be used in different situations depending",
    "start": "1907840",
    "end": "1913519"
  },
  {
    "text": "uh on the on the specific needs for your projects so compound component is great for generally if you want to if you want",
    "start": "1913519",
    "end": "1919440"
  },
  {
    "text": "to wrap an icon uh or if you uh use polymer components um these are really",
    "start": "1919440",
    "end": "1925960"
  },
  {
    "text": "really great if you want to uh configure them consistently like for example applying the same colors for every each",
    "start": "1925960",
    "end": "1931880"
  },
  {
    "text": "component but just using uh it like this now let's check out generics and",
    "start": "1931880",
    "end": "1938320"
  },
  {
    "text": "how they can come in handy in uh react react components so generics and",
    "start": "1938320",
    "end": "1944559"
  },
  {
    "text": "components are a way of specifying uh the types of props that component can accept so they are great for better type",
    "start": "1944559",
    "end": "1951760"
  },
  {
    "text": "safety and better type checking in the code um which can help to prevent errors",
    "start": "1951760",
    "end": "1957519"
  },
  {
    "text": "and ensure that the component is used correctly um so this is like a a quick",
    "start": "1957519",
    "end": "1963559"
  },
  {
    "text": "example where I often where most ofly use it basically in forms and basically",
    "start": "1963559",
    "end": "1968639"
  },
  {
    "text": "the use the usage is like like this isn't really really necessary and I tried actually actually I tried to avoid",
    "start": "1968639",
    "end": "1974639"
  },
  {
    "text": "this syn like this but I thought it's nice you know still to show um and to know that you can actually pass generics",
    "start": "1974639",
    "end": "1981120"
  },
  {
    "text": "also to your uh GSX components components like this like I do here on the right with signin form",
    "start": "1981120",
    "end": "1989200"
  },
  {
    "text": "values now let's talk about overload function components uh in",
    "start": "1989200",
    "end": "1994559"
  },
  {
    "text": "react uh a great way to enforce strict and complex types in react are by leveraging uh overload function",
    "start": "1994559",
    "end": "2001200"
  },
  {
    "text": "components in react so with these um it's basically possible to Define multiple versions uh",
    "start": "2001200",
    "end": "2007600"
  },
  {
    "text": "of a function that have like different signatures or or you know set of",
    "start": "2007600",
    "end": "2013039"
  },
  {
    "text": "parameters that you want to allow or disallow so this allows for bit for even more great flexibility in how the how",
    "start": "2013039",
    "end": "2020399"
  },
  {
    "text": "the function or component can be used as it you know can can accept different uh",
    "start": "2020399",
    "end": "2025600"
  },
  {
    "text": "types and numbers of arguments depending on the specific needs uh of the",
    "start": "2025600",
    "end": "2032000"
  },
  {
    "text": "situation now uh types or interface uh",
    "start": "2032000",
    "end": "2037039"
  },
  {
    "text": "and props so this is fairly a pretty fairly common debate um I think not only",
    "start": "2037039",
    "end": "2043320"
  },
  {
    "text": "in react but I think maybe even elsewhere as well and um you know on",
    "start": "2043320",
    "end": "2049599"
  },
  {
    "text": "where others prefer this or that but here is my heart take so generally both um are fine and I actually use them both",
    "start": "2049599",
    "end": "2057560"
  },
  {
    "text": "but with a preference on interfaces and here is why so um interfaces um can",
    "start": "2057560",
    "end": "2065960"
  },
  {
    "text": "extend other inter faces which makes them slightly safer than I think uh intersection types because it makes it",
    "start": "2065960",
    "end": "2072000"
  },
  {
    "text": "impossible to um to accidentally override uh anything and it allows to",
    "start": "2072000",
    "end": "2078040"
  },
  {
    "text": "enhance with additional members uh easily that is useful when working uh",
    "start": "2078040",
    "end": "2083638"
  },
  {
    "text": "with uh you know when you wor with uh libraries that is not from use so with third party uh uh projects because you",
    "start": "2083639",
    "end": "2090919"
  },
  {
    "text": "can just redefine the type uh in a definition file and reuse them as they are and um type on the other",
    "start": "2090919",
    "end": "2098800"
  },
  {
    "text": "hand they are you know they're more concise and easier actually to to read than interfaces and moreover they cannot",
    "start": "2098800",
    "end": "2106760"
  },
  {
    "text": "add additional members um once they find because yeah it is what it is and which",
    "start": "2106760",
    "end": "2112240"
  },
  {
    "text": "is both uh good and bad because of the better type safety um but based from my experience",
    "start": "2112240",
    "end": "2120760"
  },
  {
    "text": "um in the past with a mid to L project that I've built um a um UI component",
    "start": "2120760",
    "end": "2126839"
  },
  {
    "text": "library for I have experienced a slightly faster typescript compilation in the editor actually by switching",
    "start": "2126839",
    "end": "2133839"
  },
  {
    "text": "switching hundreds if not thousands of components from uh type to interfaces where possible and um on that topic i' I",
    "start": "2133839",
    "end": "2142520"
  },
  {
    "text": "also uh encourage to um type your return uh type annotations especially uh",
    "start": "2142520",
    "end": "2149160"
  },
  {
    "text": "function return types as it helps with faster compilation as well and it also can improve uh the type safety and",
    "start": "2149160",
    "end": "2155400"
  },
  {
    "text": "correctness of your code and can and uh yeah can make it E much more easier to catch and prevent errors",
    "start": "2155400",
    "end": "2161480"
  },
  {
    "text": "or you know um wrong types and I'm sure many people uh might",
    "start": "2161480",
    "end": "2167720"
  },
  {
    "text": "not notice but both the what I just said with the uh regarding the type uh the",
    "start": "2167720",
    "end": "2173359"
  },
  {
    "text": "the interfaces and type annotations are even recommended in the um official docs",
    "start": "2173359",
    "end": "2178800"
  },
  {
    "text": "on a typescript repository in GitHub uh that you can check out and yeah it's",
    "start": "2178800",
    "end": "2183960"
  },
  {
    "text": "pretty it's pretty neat um so some more things uh on typescript uh",
    "start": "2183960",
    "end": "2190520"
  },
  {
    "text": "I'd like to add is that I found so useful to have uh in the back of my house so things like um the the an type",
    "start": "2190520",
    "end": "2198599"
  },
  {
    "text": "so not saying that this should be like totally uh you know disallowed or uh you",
    "start": "2198599",
    "end": "2204640"
  },
  {
    "text": "know but I think it's it's it would be good that it can be absolutely discouraged and you know there is no way",
    "start": "2204640",
    "end": "2211280"
  },
  {
    "text": "that anything should be or there's I don't know there's any there's almost no thing that anything anything should be",
    "start": "2211280",
    "end": "2217200"
  },
  {
    "text": "really typed any unless you really really don't know and you really don't want to mess with your time more but um",
    "start": "2217200",
    "end": "2226520"
  },
  {
    "text": "there is one thing um that can be easily uh that you can do that to get the types",
    "start": "2226520",
    "end": "2232680"
  },
  {
    "text": "easily back is by um adding a runtime parser like Zod um if you uh expect",
    "start": "2232680",
    "end": "2239640"
  },
  {
    "text": "something or expect a specific type and then you can check it yeah through runtime which is uh yeah helpful if you",
    "start": "2239640",
    "end": "2246280"
  },
  {
    "text": "don't want mess with this type and you get the type spec out of that um next type assertions also known",
    "start": "2246280",
    "end": "2253920"
  },
  {
    "text": "as type casting um are generally considered to be bad uh for the following reasons because they can lead",
    "start": "2253920",
    "end": "2259560"
  },
  {
    "text": "to um runtime errors as they don't actually uh check the type uh of a value",
    "start": "2259560",
    "end": "2265560"
  },
  {
    "text": "at a runtime and uh they can make also your code uh a little less self-documenting",
    "start": "2265560",
    "end": "2272480"
  },
  {
    "text": "as they don't you know they don't provide specific information about the type of a value and they can make the",
    "start": "2272480",
    "end": "2280400"
  },
  {
    "text": "code harder to maintain and update as they can introduce inconsistencies uh and errors that are",
    "start": "2280400",
    "end": "2287000"
  },
  {
    "text": "not you know that are not caught by your compiler even and to uh avoid these",
    "start": "2287000",
    "end": "2292119"
  },
  {
    "text": "problems it's generally better to use type safe techniques such as uh uh type",
    "start": "2292119",
    "end": "2297960"
  },
  {
    "text": "cards or uh type checking functions and have uh correct types at runtime and",
    "start": "2297960",
    "end": "2304000"
  },
  {
    "text": "this can help to prevent the error uh uh can prevent errors and ensure that the",
    "start": "2304000",
    "end": "2309359"
  },
  {
    "text": "code um behaves as expected do have the same thing here",
    "start": "2309359",
    "end": "2315839"
  },
  {
    "text": "with uh the non-null assertions with the exclamation mark so I think they are",
    "start": "2315839",
    "end": "2321000"
  },
  {
    "text": "very very similar and uh yeah better use maybe uh type cards or type checking",
    "start": "2321000",
    "end": "2326680"
  },
  {
    "text": "functions and ensure um that the correct types are there on run time even if it's",
    "start": "2326680",
    "end": "2332480"
  },
  {
    "text": "sometimes a nightmare to add this like crazy code but um it's help it's it's I think I prefer that over um uh having",
    "start": "2332480",
    "end": "2340280"
  },
  {
    "text": "incorrect types because it can easily add lead to errors that you know lead to you to more",
    "start": "2340280",
    "end": "2346520"
  },
  {
    "text": "time uh on development time so yeah with all that being said um",
    "start": "2346520",
    "end": "2352280"
  },
  {
    "text": "I think it Narrows down to definitely not forget about um this rule on your TS config strict to",
    "start": "2352280",
    "end": "2358079"
  },
  {
    "text": "true and apart from that there is actually a bunch of super useful other flags that actually aren't included in",
    "start": "2358079",
    "end": "2364960"
  },
  {
    "text": "strict and to if you uh like allow unreachable code uh allow unused unused",
    "start": "2364960",
    "end": "2373079"
  },
  {
    "text": "labels uh no implicit override and yeah this is actually my favorite one no uncheck indexed access",
    "start": "2373079",
    "end": "2380400"
  },
  {
    "text": "um which basically um when you try to access an index of a list um it adds an",
    "start": "2380400",
    "end": "2386240"
  },
  {
    "text": "or undefined to your type um which is most of the time helpful because um and",
    "start": "2386240",
    "end": "2394359"
  },
  {
    "text": "you can you actually can you can actually you actually can point to something that could be undefined and",
    "start": "2394359",
    "end": "2400359"
  },
  {
    "text": "yeah but uh yeah it's it is how it is and now yeah with all that being said um",
    "start": "2400359",
    "end": "2407880"
  },
  {
    "text": "it's helpful to keep those things in mind when building robust and uh resilient UI components and those are",
    "start": "2407880",
    "end": "2414880"
  },
  {
    "text": "the things that for me truly help me to build um uh and keep consistency uh",
    "start": "2414880",
    "end": "2422119"
  },
  {
    "text": "stability and type safety for MyUI components and overall for me like a peace of mind when thinking all of",
    "start": "2422119",
    "end": "2429720"
  },
  {
    "text": "these now before I finish my talk I'm like to share some key",
    "start": "2429720",
    "end": "2435400"
  },
  {
    "text": "takeaways so first you know proper setup uh of your tooling such such as linters",
    "start": "2435400",
    "end": "2442440"
  },
  {
    "text": "compiler uh and testing Frameworks definitely help to increase developer experience and therefore help to write",
    "start": "2442440",
    "end": "2448920"
  },
  {
    "text": "high quality and robust code um",
    "start": "2448920",
    "end": "2454319"
  },
  {
    "text": "a resilient design system provides a set of uh standardized uh well- defined",
    "start": "2454319",
    "end": "2459640"
  },
  {
    "text": "components that can be easily integrated uh and reused throughout the codebase and incourage encouraging the creation",
    "start": "2459640",
    "end": "2465880"
  },
  {
    "text": "of um of uh robot code um strict types um help ensure that",
    "start": "2465880",
    "end": "2474359"
  },
  {
    "text": "the data that you use in your code is valid and conforms uh to a specific um",
    "start": "2474359",
    "end": "2480000"
  },
  {
    "text": "schema making the code you know more predictable and encourage basically uh",
    "start": "2480000",
    "end": "2486079"
  },
  {
    "text": "uh the creation of uh building a robust code strict types also encourage you",
    "start": "2486079",
    "end": "2492000"
  },
  {
    "text": "know the creation of uh not only code but also UI components by providing a",
    "start": "2492000",
    "end": "2497440"
  },
  {
    "text": "clear like well- defined interface that ensures that the data is um you know",
    "start": "2497440",
    "end": "2503440"
  },
  {
    "text": "correct and consistent and yeah the key for building",
    "start": "2503440",
    "end": "2508880"
  },
  {
    "text": "uh your user interfaces uh is simplicity so simple components are easier to",
    "start": "2508880",
    "end": "2515880"
  },
  {
    "text": "understand maintain and reuse and are less likely to contain um uh",
    "start": "2515880",
    "end": "2521800"
  },
  {
    "text": "errors uh or cause problems in the user phas uh in the user interface compared to your more complex",
    "start": "2521800",
    "end": "2529520"
  },
  {
    "text": "components um UI components um should I think um be as possible as you can",
    "start": "2529520",
    "end": "2538400"
  },
  {
    "text": "reusable to allow for uh easy integration into like different parts of your user interface and uh to reduce the",
    "start": "2538400",
    "end": "2546240"
  },
  {
    "text": "need for reducing um you know similar components or uh you know component that",
    "start": "2546240",
    "end": "2552160"
  },
  {
    "text": "is I don't know slightly the same but still different um and yeah it's basically",
    "start": "2552160",
    "end": "2558200"
  },
  {
    "text": "saves your time and improve code quality as well and lastly um yeah ensure that um",
    "start": "2558200",
    "end": "2567040"
  },
  {
    "text": "um well-designed uis uh from the beginning so take good care from the ground up and ensure that the code and",
    "start": "2567040",
    "end": "2574040"
  },
  {
    "text": "use interfaces are well designed um and maintainable from the beginning uh don't",
    "start": "2574040",
    "end": "2579559"
  },
  {
    "text": "think uh of uh doing it in the beginning fast and then think of maintainability",
    "start": "2579559",
    "end": "2585520"
  },
  {
    "text": "after because it ends up often in a nightmare or maybe even on a on a whole",
    "start": "2585520",
    "end": "2590960"
  },
  {
    "text": "refactoring um yeah and with that you can prevent also issues and bugs from the rising",
    "start": "2590960",
    "end": "2597440"
  },
  {
    "text": "future tux SK way um that's it thank you very",
    "start": "2597440",
    "end": "2602599"
  },
  {
    "text": "much",
    "start": "2605079",
    "end": "2608079"
  }
]