[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "right hello everyone um my name is scott veloshan this is a talk called building",
    "start": "3360",
    "end": "10639"
  },
  {
    "text": "confidence in concurrent code using a model checker otherwise known as tla plus for",
    "start": "10639",
    "end": "17279"
  },
  {
    "text": "programmers so we'll be using a tool called tla plus that you might or might not heard of um my",
    "start": "17279",
    "end": "22880"
  },
  {
    "text": "name scott veloson and um i i have a website f sharp for fun and profit which is about f sharp this talk is not about f",
    "start": "22880",
    "end": "30480"
  },
  {
    "text": "sharp it's a completely different kind of thing but um it will have too much information this",
    "start": "30480",
    "end": "36239"
  },
  {
    "text": "talk there's no way you can explain all this stuff in an hour so i'm going to cram a lot of stuff in",
    "start": "36239",
    "end": "41680"
  },
  {
    "text": "and really just to demystify things and just to make",
    "start": "41680",
    "end": "46719"
  },
  {
    "text": "make you see that this is not as scary as you might think it is and it's a whole new tool that you might find useful uh i will be",
    "start": "46719",
    "end": "53360"
  },
  {
    "text": "showing the slides later on and i think the video will be available uh later on as well",
    "start": "53360",
    "end": "58719"
  },
  {
    "text": "so okay why why am i focusing on concurrent code um you know there's people who've",
    "start": "58719",
    "end": "64960"
  },
  {
    "start": "61000",
    "end": "61000"
  },
  {
    "text": "written concurrent code and there's people who've had weird painful bugs in the current code",
    "start": "64960",
    "end": "71200"
  },
  {
    "text": "and the combination of these two people the intersection is a perfect circle",
    "start": "71200",
    "end": "76960"
  },
  {
    "text": "uh everyone has written code has probably had weird painful bugs now you can get with but",
    "start": "76960",
    "end": "82640"
  },
  {
    "text": "you get no bugs in normal code but they're not as weird and not as painful as bugs in concurrent code",
    "start": "82640",
    "end": "87920"
  },
  {
    "text": "so how can we you know get confident about our codes we want to get confident",
    "start": "87920",
    "end": "93439"
  },
  {
    "text": "about concurrent code we want to get confident about you know regular code how how people how many people actually",
    "start": "93439",
    "end": "99600"
  },
  {
    "text": "are confident about that code so i did a poll and i asked a new programmer um",
    "start": "99600",
    "end": "105119"
  },
  {
    "text": "you know what do they think of their code and they often say something like you know this code doesn't work this code doesn't",
    "start": "105119",
    "end": "111759"
  },
  {
    "text": "work and i don't know why uh because i'm a new programmer i don't have a lot of experience um so",
    "start": "111759",
    "end": "119520"
  },
  {
    "text": "no confidence there now if you ask a battle scarred veteran programmer who is kind of grumpy",
    "start": "119520",
    "end": "125280"
  },
  {
    "text": "all the time they will often say this code works and i don't know why",
    "start": "125280",
    "end": "130959"
  },
  {
    "text": "they just don't trust that their code works even when it does work so you know you can get you can lack",
    "start": "130959",
    "end": "137520"
  },
  {
    "text": "confidence in your code even if you're a very experienced programmer so you know this is a bit of a problem",
    "start": "137520",
    "end": "143599"
  },
  {
    "start": "143000",
    "end": "143000"
  },
  {
    "text": "so what do we do as developers what do we do to improve our confidence in our codes well we have a lot of",
    "start": "143599",
    "end": "150400"
  },
  {
    "text": "things to do at the design phase we have domain driven design and behavior design and rapid prototyping and uml diagrams",
    "start": "150400",
    "end": "157200"
  },
  {
    "text": "and all this stuff all this stuff is trying to make sure we're doing the right thing before we start coding",
    "start": "157200",
    "end": "163040"
  },
  {
    "text": "and then when we're coding we can use a statically typed programming language to avoid stupid things like nulls",
    "start": "163040",
    "end": "168879"
  },
  {
    "text": "and we can have good well-debugged libraries and then we have testing which helps you know your test driven",
    "start": "168879",
    "end": "174480"
  },
  {
    "text": "development and property-based testing and canary testing all these things improve the confidence in our code",
    "start": "174480",
    "end": "180720"
  },
  {
    "text": "before we put it into production so i'm going to introduce you to another tool which is model checking and",
    "start": "180720",
    "end": "188560"
  },
  {
    "text": "as i said the goal of this talk is to show you a different way of thinking about checking your code it's another useful",
    "start": "188560",
    "end": "195599"
  },
  {
    "text": "tool for your toolbox it's not meant to be a replacement for everything but it's just another thing to add and it's very",
    "start": "195599",
    "end": "201200"
  },
  {
    "text": "very valuable in certain circumstances and what do i mean by model checking so",
    "start": "201200",
    "end": "207120"
  },
  {
    "text": "here is a model this is an architectural model every every engineering discipline uses models",
    "start": "207120",
    "end": "212799"
  },
  {
    "text": "of various kinds and a model is a tool for thinking um",
    "start": "212799",
    "end": "218159"
  },
  {
    "start": "214000",
    "end": "214000"
  },
  {
    "text": "the idea is you make a model and you look at it and you say you know is this what i want you can check things make sure they make",
    "start": "218159",
    "end": "224879"
  },
  {
    "text": "sense make sure that everyone else is happy with it before you actually do the costly",
    "start": "224879",
    "end": "230480"
  },
  {
    "text": "implementation so with a building you have a model before you actually start construction process",
    "start": "230480",
    "end": "235760"
  },
  {
    "text": "but even for software you know if you spend a few hours playing with a model it's still a lot cheaper than spending a",
    "start": "235760",
    "end": "241519"
  },
  {
    "text": "couple of weeks doing the implementation so models are always a good tool and like i say it's it's a way of thinking it helps you",
    "start": "241519",
    "end": "247680"
  },
  {
    "text": "think about your design clearly before you kind of get bogged down by the implementation details",
    "start": "247680",
    "end": "253599"
  },
  {
    "text": "so what is this model checking thing from a software point of view well we're going to build a model using",
    "start": "253599",
    "end": "259919"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "a special sort of domain specific language and then we're going to check the model",
    "start": "259919",
    "end": "264960"
  },
  {
    "text": "and there's a model checker that checks the model and it checks things like you know all the constraints met",
    "start": "264960",
    "end": "270400"
  },
  {
    "text": "does anything unexpected happen does it deadlock all the different things that you might want to check does the is the model",
    "start": "270400",
    "end": "276479"
  },
  {
    "text": "consistent in some way you want to check this and the model checker will check that for you and this is really a whole",
    "start": "276479",
    "end": "284080"
  },
  {
    "text": "part of the formal methods approach to software engineering and this is kind of one subsection of that and",
    "start": "284080",
    "end": "290240"
  },
  {
    "text": "it's actually very convenient to do it's not as scary as you think so currently i think would i would say",
    "start": "290240",
    "end": "295520"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "the two most popular model checking systems are tla plus uh the model checkers",
    "start": "295520",
    "end": "301039"
  },
  {
    "text": "actually called tlc but i'm just going to call it tla plus everywhere just to be consistent really",
    "start": "301039",
    "end": "306400"
  },
  {
    "text": "to make it easy and it really focuses on temporal properties it's excellent of that and so it's really good for modelling",
    "start": "306400",
    "end": "311600"
  },
  {
    "text": "concurrent systems you can model all sorts of stuff but the current systems in particular are very good there's another one called",
    "start": "311600",
    "end": "318000"
  },
  {
    "text": "alloy and the model is the model checker is called alloy analyzer and it focuses on relational logic and",
    "start": "318000",
    "end": "324400"
  },
  {
    "text": "it's really good for modeling structures um they're both very good um tl tla plus",
    "start": "324400",
    "end": "330800"
  },
  {
    "text": "is the one we're going to use today because we're going to be talking about concurrent systems and tla plus is excellent for that so",
    "start": "330800",
    "end": "337199"
  },
  {
    "text": "this is what some tla plus code looks like and the first time i saw this code",
    "start": "337199",
    "end": "344080"
  },
  {
    "text": "i thought this is the weirdest looking programming language i've ever seen and the reason why it's a",
    "start": "344080",
    "end": "351360"
  },
  {
    "text": "weird-looking programming language is because it's not a programming language that's why it's weird looking um",
    "start": "351360",
    "end": "358319"
  },
  {
    "text": "it is actually mathematics anyway so by the end of this talk uh you",
    "start": "358319",
    "end": "364240"
  },
  {
    "text": "should be able to make some sort of sense of this code uh not necessarily obviously be able to understand it completely but it won't",
    "start": "364240",
    "end": "370479"
  },
  {
    "text": "look quite as intimidating so i'm going to try and do some live polling here there is a",
    "start": "370479",
    "end": "376479"
  },
  {
    "text": "uh a link here bitly slash tla poll bitly slash tla poll",
    "start": "376479",
    "end": "384560"
  },
  {
    "text": "and i want you to type that into your browser if you're following along and i i'm gonna see if um is anyone is",
    "start": "384560",
    "end": "391919"
  },
  {
    "text": "listening and let's see if we can get any results on this so bitly tla poll see",
    "start": "391919",
    "end": "399680"
  },
  {
    "text": "if we have any results here 100 of people can see this poll",
    "start": "399680",
    "end": "405280"
  },
  {
    "text": "wow that's amazing nobody says they can't see it that's very good",
    "start": "405280",
    "end": "411440"
  },
  {
    "text": "excellent so just go back to for the people who didn't see it it is",
    "start": "412000",
    "end": "417199"
  },
  {
    "text": "bitly tla paul and i'll be doing some more questions in a minute",
    "start": "417199",
    "end": "422400"
  },
  {
    "text": "so please get ready and type this in and i'll i'll provide the link again if you didn't get it bitly",
    "start": "422400",
    "end": "427599"
  },
  {
    "text": "tll poll and yeah 100 100 score on the poll that's",
    "start": "427599",
    "end": "434840"
  },
  {
    "text": "awesome good okay now let's",
    "start": "434840",
    "end": "440639"
  },
  {
    "text": "go on so who can see this poll one hundred percent of the people very good all right so the talk what i'm",
    "start": "440639",
    "end": "448080"
  },
  {
    "start": "447000",
    "end": "447000"
  },
  {
    "text": "going to talk about is confidence i'm going to talk about tla plus and then i'm going to use tla plus to",
    "start": "448080",
    "end": "455120"
  },
  {
    "text": "solve some examples i'm going to use a very very simple model and then i'm going to do a producer consumer model",
    "start": "455120",
    "end": "460639"
  },
  {
    "text": "and a zero downtime deployment model and i'm going to try and squeeze all of this into an hour",
    "start": "460639",
    "end": "466639"
  },
  {
    "text": "i think i will go over by a couple of minutes but um i'll i'll speak very fast",
    "start": "466639",
    "end": "471680"
  },
  {
    "text": "all right so part one is confidence um confidence is a preference for the",
    "start": "471680",
    "end": "476720"
  },
  {
    "text": "habitual voyeur of what is known as sort algorithms um here is a",
    "start": "476720",
    "end": "483520"
  },
  {
    "start": "480000",
    "end": "480000"
  },
  {
    "text": "specification for a sword algorithm to sort a list",
    "start": "483520",
    "end": "489520"
  },
  {
    "text": "if the list is empty or has one element it's already sorted so just return it if the list is not sorted take the first",
    "start": "489520",
    "end": "496479"
  },
  {
    "text": "element and divide the other elements into two piles one less than and one greater than and then",
    "start": "496479",
    "end": "503919"
  },
  {
    "text": "sort each of those piles in turn and then the final result is the whole thing",
    "start": "503919",
    "end": "509199"
  },
  {
    "text": "by concatenating the smaller list sorted then the pivot element and then the bigger list sorted",
    "start": "509199",
    "end": "514719"
  },
  {
    "text": "okay so how how how is your confidence level on this um how can you have confidence that this",
    "start": "514719",
    "end": "520880"
  },
  {
    "text": "algorithm is correct okay now not the implementation but this algorithm is this algorithm right does it work",
    "start": "520880",
    "end": "528160"
  },
  {
    "text": "how would you how would you do that how would you get confidence in this um let me ask you before",
    "start": "528160",
    "end": "535279"
  },
  {
    "text": "i tell you how i would so who thinks this is a correct specification for a sort algorithm",
    "start": "535279",
    "end": "542720"
  },
  {
    "text": "and i think i need to move to the next question over here there we go",
    "start": "542720",
    "end": "549839"
  },
  {
    "start": "551000",
    "end": "551000"
  },
  {
    "text": "who thinks it's the correct implementation who's not sure",
    "start": "551040",
    "end": "556399"
  },
  {
    "text": "this is live polling this is very exciting a lot of people are not sure",
    "start": "556399",
    "end": "563279"
  },
  {
    "text": "yeah i think that's uh where we are right now",
    "start": "563279",
    "end": "570000"
  },
  {
    "text": "so that's not uh it's uh that's there you go this is life in the big city so um",
    "start": "573839",
    "end": "582240"
  },
  {
    "text": "most people are not very confident so so what could we do and in fact you're calling right to be not common because",
    "start": "582320",
    "end": "587519"
  },
  {
    "text": "there's actually a logic bug here this should be less than or equal or",
    "start": "587519",
    "end": "592880"
  },
  {
    "text": "greater than equal one of the ways because we're throwing away duplicates so that's actually a logic bug um so how",
    "start": "592880",
    "end": "598720"
  },
  {
    "text": "can we gain confidence well one thing is to do code review and careful inspection of the code and just have someone else go",
    "start": "598720",
    "end": "604800"
  },
  {
    "start": "599000",
    "end": "599000"
  },
  {
    "text": "through it line by line that's not bad approach one way is to actually create an implementation",
    "start": "604800",
    "end": "610480"
  },
  {
    "text": "and then test that implementation and that's not necessarily a bad approach either",
    "start": "610480",
    "end": "615519"
  },
  {
    "text": "for example property based tests would be perfect for this and the final way would be to use like a",
    "start": "615519",
    "end": "621519"
  },
  {
    "text": "mathematical proof assistant tool like clock or something and that is probably overkill",
    "start": "621519",
    "end": "626560"
  },
  {
    "text": "really for something like this now so personally what i'd probably do is use code review and careful inspection of the code and",
    "start": "626560",
    "end": "633519"
  },
  {
    "text": "then things like property based tests would be a fantastic way of finding bugs in this kind of code it will probably find",
    "start": "633519",
    "end": "639360"
  },
  {
    "text": "this bugs straight away so for linear single threaded codes the tools that we",
    "start": "639360",
    "end": "646399"
  },
  {
    "text": "have the tools that you're used to work pretty well now how confident are",
    "start": "646399",
    "end": "652399"
  },
  {
    "text": "you when concurrency is involved okay so if you're not confident about a sort",
    "start": "652399",
    "end": "657920"
  },
  {
    "text": "algorithm how confident are you about something more complicated and generally people are very unconfident about",
    "start": "657920",
    "end": "663839"
  },
  {
    "text": "concurrency so here we have a queue and the producer writes to the queue and",
    "start": "663839",
    "end": "669760"
  },
  {
    "start": "666000",
    "end": "666000"
  },
  {
    "text": "the logic we're going to do for the producer is they're going to check if the queue is not full and if it's not full we're",
    "start": "669760",
    "end": "675200"
  },
  {
    "text": "going to write the item to the queue and we're going to do it in two separate steps it's not going to be an atomic step because otherwise it wouldn't be a",
    "start": "675200",
    "end": "680800"
  },
  {
    "text": "very interesting problem and then we have the consumer reading from the queue and they do the same thing their way around",
    "start": "680800",
    "end": "686079"
  },
  {
    "text": "if the queue is not empty they can read and if the queue is empty they can't read and so they're",
    "start": "686079",
    "end": "692320"
  },
  {
    "text": "just going to loop doing that so we have a producer and a consumer right so here is",
    "start": "692320",
    "end": "697519"
  },
  {
    "start": "697000",
    "end": "697000"
  },
  {
    "text": "the spec and we've got one producer we're going to start off with one producer and one consumer and we have some constraints that we must never",
    "start": "697519",
    "end": "704000"
  },
  {
    "text": "never break we must never try to read from an empty queue and we never try to add",
    "start": "704000",
    "end": "709040"
  },
  {
    "text": "to a full queue because the whole system will crash and burn and it'll be complete disaster hopefully our system",
    "start": "709040",
    "end": "714800"
  },
  {
    "text": "is a bit more robust but in some situations you know you don't want to read past the end of a buffer for example",
    "start": "714800",
    "end": "720320"
  },
  {
    "text": "so here's the spec again basically check step and then right step and on the",
    "start": "720320",
    "end": "726000"
  },
  {
    "text": "consumer side you do a check step and then you do a read step okay so who thinks that this spec is correct",
    "start": "726000",
    "end": "734639"
  },
  {
    "text": "and the constraints will always be met let me go back i have to move the poll forward here there you go",
    "start": "734639",
    "end": "740880"
  },
  {
    "text": "what is the confidence in the design of this producer consumer system right so who thinks it's not correct who",
    "start": "740880",
    "end": "747279"
  },
  {
    "text": "thinks it is correct and who's not sure and it's a trap by the way this is a",
    "start": "747279",
    "end": "752560"
  },
  {
    "text": "trap question it's a trick question anything with concurrency is a trick question because you're never quite sure is this",
    "start": "752560",
    "end": "758959"
  },
  {
    "text": "the right answer or not so we have um yeah we have it",
    "start": "758959",
    "end": "765600"
  },
  {
    "start": "763000",
    "end": "763000"
  },
  {
    "text": "you know let's see some people is confident it's not correct some people are confident that it is correct and some people are not sure",
    "start": "765600",
    "end": "772880"
  },
  {
    "text": "either way you just never know with concurrency it's kind of scary",
    "start": "772880",
    "end": "780320"
  },
  {
    "text": "yeah so it seems like not that many people are sure that it's",
    "start": "780720",
    "end": "786160"
  },
  {
    "text": "correct there's a lot of people who are confident it's not correct and it's a lot of people who are not sure either way",
    "start": "786160",
    "end": "793360"
  },
  {
    "text": "now i'm not going to tell you the answer we're going to actually check use a model checker to check this later",
    "start": "793360",
    "end": "798839"
  },
  {
    "text": "on but i do have a question for the people who said they were not sure and this is i'm deploying this to like a",
    "start": "798839",
    "end": "805360"
  },
  {
    "text": "mission critical system how could i persuade you how could i",
    "start": "805360",
    "end": "810880"
  },
  {
    "text": "make you confident how could i say yeah i'm you know i i changed my mind i am really 100 sure",
    "start": "810880",
    "end": "816079"
  },
  {
    "text": "or i'm 100 not sure i mean 100 confident either way what could i do to give you confidence",
    "start": "816079",
    "end": "823760"
  },
  {
    "text": "um think about that now let's change the logic so we have two producers",
    "start": "823760",
    "end": "829680"
  },
  {
    "text": "and two consumers right the first one had one producer one consumer and we'll do the same poll again and",
    "start": "829680",
    "end": "836560"
  },
  {
    "text": "you tell me if uh to produce a consumer with more than",
    "start": "836560",
    "end": "844720"
  },
  {
    "start": "840000",
    "end": "840000"
  },
  {
    "text": "one clients or you know yeah everyone seems to think it's not correct",
    "start": "844720",
    "end": "850240"
  },
  {
    "text": "so it's exactly the same producer consumer both do things you want to make sure you never overrun the queue or under under run the queue and um",
    "start": "852160",
    "end": "860079"
  },
  {
    "text": "there's two producers and two consumers and most people seem to think it is not correct",
    "start": "860079",
    "end": "865920"
  },
  {
    "text": "and that's because you're scared of concurrency that's good so for people who voted not sure again",
    "start": "865920",
    "end": "873279"
  },
  {
    "text": "how could i persuade you and for the people who thought it was incorrect i come along and i say okay i have a fix",
    "start": "873279",
    "end": "878880"
  },
  {
    "text": "for this uh that i'll solve this problem how can you how can i persuade you that that fix",
    "start": "878880",
    "end": "884639"
  },
  {
    "text": "is actually correct i mean you're not very confident that this is correct um what would make your comp you know i say",
    "start": "884639",
    "end": "890560"
  },
  {
    "text": "i have this magic fix i'm going to use locks or something how would you be confident that my fix",
    "start": "890560",
    "end": "895839"
  },
  {
    "text": "was correct what would make you confident that's a tricky problem so being confident",
    "start": "895839",
    "end": "902000"
  },
  {
    "text": "in concurrent systems is really hard uh and so all the tools we normally have",
    "start": "902000",
    "end": "908000"
  },
  {
    "start": "906000",
    "end": "906000"
  },
  {
    "text": "for gaining confidence don't really work for concurrency if we try and do careful inspection and code of view our human intuition is just",
    "start": "908000",
    "end": "914880"
  },
  {
    "text": "rubbish for concurrency really bad uh if we try and create an implementation and test it uh that doesn't work very",
    "start": "914880",
    "end": "921760"
  },
  {
    "text": "well either because many concurrency errors occur you know one in a thousand times they might never ever show up",
    "start": "921760",
    "end": "927680"
  },
  {
    "text": "um and we could use a mathematical proof assistant um and that's basically what we're going",
    "start": "927680",
    "end": "934160"
  },
  {
    "text": "to do except we're just going to do a model checker it's a mathematical concept but it's not actually doing a full-fledged proof it's just going to",
    "start": "934160",
    "end": "940240"
  },
  {
    "text": "check the model for consistency and that's a much much easier approach and that's what we're going to talk about right now",
    "start": "940240",
    "end": "945759"
  },
  {
    "text": "and as i said we will revisit the producer consumer problem later on and check it for ourselves",
    "start": "945759",
    "end": "952720"
  },
  {
    "text": "so that brings us to tla plus and uh again don't i'm going to go",
    "start": "952720",
    "end": "958240"
  },
  {
    "text": "through this quite quickly don't understand don't worry if you don't understand it um the goal is really to demystify",
    "start": "958240",
    "end": "965040"
  },
  {
    "text": "uh tla a bit for you so stand back i'm going to use mathematics uh",
    "start": "965040",
    "end": "971600"
  },
  {
    "text": "tla plus is not a programming language it's a mathematical way of doing things",
    "start": "971600",
    "end": "976800"
  },
  {
    "text": "so tla is designed.helioplus was designed by leslie lampert you might have heard of he's got a",
    "start": "976800",
    "end": "982320"
  },
  {
    "text": "famous time and clocks paper he invented the paxos algorithm for consensus he's a touring award winner",
    "start": "982320",
    "end": "989680"
  },
  {
    "text": "and he is the initial developer of latex and there is a photo of him",
    "start": "989680",
    "end": "995920"
  },
  {
    "text": "the latex thing is relevant because tla plus uses the same kind of syntax as latex which is so it's going to look familiar",
    "start": "995920",
    "end": "1002079"
  },
  {
    "text": "if you're used to latex and it's going to look weird if you're used to programming languages so tla plus",
    "start": "1002079",
    "end": "1008079"
  },
  {
    "text": "stands for temporal logic of actions plus some stuff so let's let's break",
    "start": "1008079",
    "end": "1015199"
  },
  {
    "text": "that down into those words the logic part that's something to do with booleans so that's straightforward we know how",
    "start": "1015199",
    "end": "1021440"
  },
  {
    "text": "booleans work um temporal means something to do with time and actions",
    "start": "1021440",
    "end": "1027280"
  },
  {
    "text": "in this case is going to be transitions of a state machine so",
    "start": "1027280",
    "end": "1033760"
  },
  {
    "text": "if you think of tla as a system which is a boolean logic of state transitions",
    "start": "1033760",
    "end": "1038798"
  },
  {
    "text": "over time uh it's still it sounds less scary uh i'm going to explain exactly what that",
    "start": "1038799",
    "end": "1044720"
  },
  {
    "text": "means it's not as scary as you might think and there's some other stuff too which we will come to later on",
    "start": "1044720",
    "end": "1050480"
  },
  {
    "text": "so let's look at the logic part in tla plus so the logic is boolean logic uh and hopefully you all know how",
    "start": "1050480",
    "end": "1057840"
  },
  {
    "start": "1054000",
    "end": "1054000"
  },
  {
    "text": "that works you've got and and or and not and the mathematical symbols are upside down triangle uh you know",
    "start": "1057840",
    "end": "1065039"
  },
  {
    "text": "triangles up and down and it's easy to remember that the a in and",
    "start": "1065039",
    "end": "1070799"
  },
  {
    "text": "matches the triangle so it looks like the letter a and the upside down triangle is or in programming we use ampersand and",
    "start": "1070799",
    "end": "1077840"
  },
  {
    "text": "vertical bars but tla plus uses the mathematical style and that's why it has these weird",
    "start": "1077840",
    "end": "1083200"
  },
  {
    "text": "forward slashes and backward slashes everywhere um that is just the and and the or from",
    "start": "1083200",
    "end": "1088559"
  },
  {
    "text": "tla plus for the mathematical style tla plus now when you run it through a nice formatter like latex",
    "start": "1088559",
    "end": "1094000"
  },
  {
    "text": "it comes out looking like the mathematical style so the coding the code kind of looks ugly",
    "start": "1094000",
    "end": "1099440"
  },
  {
    "text": "and it gets formatted much more nicely by the time you finished now another word i'm going to use a lot",
    "start": "1099440",
    "end": "1104720"
  },
  {
    "text": "is a predicate and that is just an expression that returns a boolean the test if you like uh in a programming language",
    "start": "1104720",
    "end": "1112240"
  },
  {
    "text": "a predicate or a test looks like this you have some a function and it's an a and b or",
    "start": "1112240",
    "end": "1118080"
  },
  {
    "text": "a and not c and in tla plus you would write it the same way but using the the different",
    "start": "1118080",
    "end": "1123919"
  },
  {
    "text": "symbols so you see a and b or a and not c uh so the symbols are different the",
    "start": "1123919",
    "end": "1130799"
  },
  {
    "text": "way it looks is very different but the concepts are exactly the same so if you've written a program that does",
    "start": "1130799",
    "end": "1136240"
  },
  {
    "text": "a test a function that does a test you can write tla that does test exactly the same way",
    "start": "1136240",
    "end": "1142320"
  },
  {
    "text": "so okay now what about the actions so the actions in tla are state transitions so what do i mean by a",
    "start": "1142320",
    "end": "1149600"
  },
  {
    "text": "state transition um well we're going to we're going to model our system as a bunch of different states",
    "start": "1149600",
    "end": "1154880"
  },
  {
    "text": "and the transitions between them so here we have state a and state b and we can go from a to b and we can go",
    "start": "1154880",
    "end": "1160559"
  },
  {
    "text": "from b to c and we can go from b back to a again we can't from c state c we can't go anywhere",
    "start": "1160559",
    "end": "1166400"
  },
  {
    "text": "so this is like all the different things we can do in this system uh like a chess game you say and it's",
    "start": "1166400",
    "end": "1171919"
  },
  {
    "start": "1171000",
    "end": "1171000"
  },
  {
    "text": "white's turn and after white's turn we transition to black's turn and after baxter we go back to white's turn and if white",
    "start": "1171919",
    "end": "1178000"
  },
  {
    "text": "wins the game's over and once the game's over you can't transition anywhere or a delivery system",
    "start": "1178000",
    "end": "1183760"
  },
  {
    "text": "where it's undelivered and then it's out for delivery and then it's delivered and once it's delivered you can't transition anywhere",
    "start": "1183760",
    "end": "1190000"
  },
  {
    "start": "1184000",
    "end": "1184000"
  },
  {
    "text": "and so on so this is a great way to model uh most processes we're not talking about millions and millions of",
    "start": "1190000",
    "end": "1195039"
  },
  {
    "text": "states we're talking about you know a few states to model and all the transitions so it's something you can kind of keep in your head",
    "start": "1195039",
    "end": "1201600"
  },
  {
    "text": "so in tla here are two states and one transition and it's going to transition from hello",
    "start": "1201600",
    "end": "1206799"
  },
  {
    "text": "to goodbye and this is the state before and this is the state afterwards",
    "start": "1206799",
    "end": "1212000"
  },
  {
    "text": "and in tla you would write it like this state equals hello before and in the state afterwards you'd",
    "start": "1212000",
    "end": "1218320"
  },
  {
    "text": "write state tick equals goodbye so that little tick means afterwards",
    "start": "1218320",
    "end": "1224480"
  },
  {
    "text": "mathematicians will call that state prime equals goodbye that means you're some kind of a modification of the original",
    "start": "1224480",
    "end": "1229600"
  },
  {
    "text": "state so every time you see that tick that means it's the after state and if you don't see the tick it's the before state so the action",
    "start": "1229600",
    "end": "1237679"
  },
  {
    "text": "is the transition and this is how you would write it let's say we have a transition called next uh in tla",
    "start": "1237679",
    "end": "1244240"
  },
  {
    "text": "we define it like this next equals state equals hello and state prime equals goodbye",
    "start": "1244240",
    "end": "1252159"
  },
  {
    "text": "and in english we'd say the state before is hello and the state after is goodbye",
    "start": "1252159",
    "end": "1259039"
  },
  {
    "text": "now this equals is not an assignment it's an equals it's like is the afterwards state equal to goodbye",
    "start": "1259200",
    "end": "1265360"
  },
  {
    "text": "so this is a test it's not an assignment and you can prove that it's a test because if you swap",
    "start": "1265360",
    "end": "1271440"
  },
  {
    "text": "these two segments that works just as well in in from a logical point of view the",
    "start": "1271440",
    "end": "1277039"
  },
  {
    "text": "afterwards is goodbye and the before is hello that's exactly the same thing um that",
    "start": "1277039",
    "end": "1282159"
  },
  {
    "text": "doesn't work with programming languages but it does work with logic so",
    "start": "1282159",
    "end": "1287440"
  },
  {
    "start": "1287000",
    "end": "1287000"
  },
  {
    "text": "this is really important actions are not assignments they're tests so here we have a test is the state before hello and the state after goodbye",
    "start": "1287440",
    "end": "1295280"
  },
  {
    "text": "if it is that's good but here when it doesn't match the state afterwards is ciao that doesn't work",
    "start": "1295280",
    "end": "1300320"
  },
  {
    "text": "here the state before is haldi well that doesn't work either so it's it's it's it's testing whether",
    "start": "1300320",
    "end": "1306000"
  },
  {
    "text": "the states match the condition to do the trend uh the transition",
    "start": "1306000",
    "end": "1312159"
  },
  {
    "text": "that's what an action is right now let's look at the temporal in tla plus temporal for time",
    "start": "1312159",
    "end": "1319120"
  },
  {
    "text": "so ti plus models uh the state transactions over time in fact over an infinite",
    "start": "1319120",
    "end": "1324400"
  },
  {
    "text": "amount of time to you know imagine a little clock ticking you know one second two seconds three second form each time",
    "start": "1324400",
    "end": "1329600"
  },
  {
    "text": "we transition to a different state and of course time goes on forever and so the states go on forever too",
    "start": "1329600",
    "end": "1335440"
  },
  {
    "text": "and because of that you can ask questions like is something always true for every single possible state is",
    "start": "1335440",
    "end": "1341679"
  },
  {
    "text": "something ever true is there one state where it becomes true and if it happens if something happens",
    "start": "1341679",
    "end": "1347280"
  },
  {
    "text": "does something else have to happen afterwards those are temporal questions those are the questions over time",
    "start": "1347280",
    "end": "1352960"
  },
  {
    "text": "and tla is excellent at answering those kinds of questions so temporal logical actions same as",
    "start": "1352960",
    "end": "1360000"
  },
  {
    "text": "boolean logic of state transitions over time so just just one way to think about it",
    "start": "1360000",
    "end": "1365440"
  },
  {
    "text": "so that's everything you need to know about tla for now and we will save the plus for later",
    "start": "1365440",
    "end": "1372960"
  },
  {
    "text": "okay now let's move on and use tla plus to build a very very simple model and",
    "start": "1372960",
    "end": "1379120"
  },
  {
    "text": "the model we're going to pick is counting to three that's the that's how complicated this model is going to be so",
    "start": "1379120",
    "end": "1386720"
  },
  {
    "text": "i bet your programming language can't do that so okay let's look at counting to three um",
    "start": "1386720",
    "end": "1392480"
  },
  {
    "text": "we have three states we start in one and then we go to two then we go to three and in a programming language um we say",
    "start": "1392480",
    "end": "1400240"
  },
  {
    "text": "x equals one and then x equals two and then x equals three so that's very very exciting",
    "start": "1400240",
    "end": "1405840"
  },
  {
    "text": "um let's see how we would do the same thing in tla plus so",
    "start": "1405840",
    "end": "1412559"
  },
  {
    "text": "i'm just going to put the code down this is what the code looks like and then i will explain what it means so",
    "start": "1412559",
    "end": "1419360"
  },
  {
    "text": "the first thing is we have an initial state uh state position the state machines can always be described by saying",
    "start": "1419360",
    "end": "1425600"
  },
  {
    "text": "what's the initial state and then what are all the transactions to go between the states so initially starts with x equals one",
    "start": "1425600",
    "end": "1433520"
  },
  {
    "text": "uh and then um the next transition is x equals one and",
    "start": "1433520",
    "end": "1438640"
  },
  {
    "text": "afterwards x equals two and the next transition is x equals two and then afterwards x equals three",
    "start": "1438640",
    "end": "1445760"
  },
  {
    "text": "and then the overall next thing is matching either those transitions it's either",
    "start": "1445760",
    "end": "1451039"
  },
  {
    "text": "either the first one or the second one so the overall complete set of transitions we can do is the",
    "start": "1451039",
    "end": "1457279"
  },
  {
    "text": "first one or the second one so that's we're going to define the next operator to be that",
    "start": "1457279",
    "end": "1462400"
  },
  {
    "text": "all right so that's our complete tla plus spec for counting to 3. now let's do a",
    "start": "1462400",
    "end": "1469360"
  },
  {
    "text": "quick refactor what we've done here is we've created two helper functions as it were two new steps um",
    "start": "1469360",
    "end": "1478159"
  },
  {
    "start": "1471000",
    "end": "1471000"
  },
  {
    "text": "just to make life a bit easier and these things are not really functions these are actually called operators and you can actually think of",
    "start": "1478159",
    "end": "1483760"
  },
  {
    "text": "as more like macros they're literally copy and paste kind of thing you take take them and copy and",
    "start": "1483760",
    "end": "1489120"
  },
  {
    "text": "paste them around so after we've got these little we've kind of pulled these out into their own steps",
    "start": "1489120",
    "end": "1494400"
  },
  {
    "text": "the overall next step is a lot easier to read it just says do step one or do step two so this is a little nicer",
    "start": "1494400",
    "end": "1501360"
  },
  {
    "text": "to read than the first version okay so that's our complete spec for counting to three",
    "start": "1501360",
    "end": "1507600"
  },
  {
    "text": "now let's let's show you how to run it so the best way to run it is probably something called the tla plus",
    "start": "1507600",
    "end": "1513120"
  },
  {
    "text": "toolbox which is sort of the ide the tla plus there is an extension for bs code but",
    "start": "1513120",
    "end": "1519760"
  },
  {
    "text": "you sort of have to know what you're doing the tla toolbox has a nice user interface um",
    "start": "1519760",
    "end": "1525200"
  },
  {
    "text": "it's written in java it's kind of a bit of a 90s user interface i wouldn't say the user interface is the best part",
    "start": "1525200",
    "end": "1530480"
  },
  {
    "text": "about it but it does work so you type your code into a into a editor there and it you",
    "start": "1530480",
    "end": "1538320"
  },
  {
    "text": "run it and you make sure there's no syntax errors that's the first bit okay so now we've got our our code now we create a model",
    "start": "1538320",
    "end": "1546159"
  },
  {
    "text": "and for a model we have to say what's the first state and what's the next state that's the what's the state transition",
    "start": "1546159",
    "end": "1552320"
  },
  {
    "text": "so we just say to the model okay you start within it and all the possible things you can do are next",
    "start": "1552320",
    "end": "1557760"
  },
  {
    "text": "and then we click the run button and it runs the model checker and what happens well first of all it",
    "start": "1557760",
    "end": "1564480"
  },
  {
    "text": "detects that there are three distinct states which is good that's hopefully there are three distinct states",
    "start": "1564480",
    "end": "1570400"
  },
  {
    "text": "and then it also says deadlock reached and that doesn't sound very good that sounds a bit scary",
    "start": "1570400",
    "end": "1575919"
  },
  {
    "text": "what does it mean by deadlock so we go and look at the error and there's a little uh trace and it",
    "start": "1575919",
    "end": "1583120"
  },
  {
    "text": "says it went from one and then it went to two and then went to three and then it stopped and this is the problem the problem is",
    "start": "1583120",
    "end": "1588799"
  },
  {
    "text": "that it stopped um it went to three",
    "start": "1588799",
    "end": "1594240"
  },
  {
    "text": "and there was no forward progress that could be made here and if you can't make any forward progress if there's no valid transition",
    "start": "1594240",
    "end": "1601360"
  },
  {
    "text": "that you can do that's what tla plus calls a deadlock literally you're just stopped and so in",
    "start": "1601360",
    "end": "1607200"
  },
  {
    "text": "this situation our count to three example it deadlocks when it reaches three so that's not very",
    "start": "1607200",
    "end": "1612559"
  },
  {
    "text": "good so um the main thing is it's really important to be aware that uh these",
    "start": "1612559",
    "end": "1618799"
  },
  {
    "text": "state machines really do have to be infinite series of state transitions over time time doesn't just stop",
    "start": "1618799",
    "end": "1624240"
  },
  {
    "text": "you know after three seconds at stake three but what what's where should it be at four seconds in five seconds and six",
    "start": "1624240",
    "end": "1629520"
  },
  {
    "text": "seconds you've got to tell it so um in our case well we're done",
    "start": "1629520",
    "end": "1634640"
  },
  {
    "text": "when we hit three so let's just have a transition that okay when you're at three you can go to three again",
    "start": "1634640",
    "end": "1639679"
  },
  {
    "text": "and then you go to three again and then you can go to three again and you can just keep looping at three and that's and then we're done",
    "start": "1639679",
    "end": "1646559"
  },
  {
    "text": "okay so let's add that to the model um we're going to add a loop on the three",
    "start": "1646559",
    "end": "1652159"
  },
  {
    "start": "1649000",
    "end": "1649000"
  },
  {
    "text": "and we're going to add a new step called done so to say that you just don't do anything and you just",
    "start": "1652159",
    "end": "1657520"
  },
  {
    "text": "stay put you can say there's a special keyword called unchanged so the x is unchanged it just loops back on itself",
    "start": "1657520",
    "end": "1664880"
  },
  {
    "text": "so now um we have the loop and we have this new final step saying it's done when x equals three",
    "start": "1664880",
    "end": "1672240"
  },
  {
    "text": "and at that point it just stays unchanged so the overall thing is now three steps it's either step one or it's",
    "start": "1672240",
    "end": "1677840"
  },
  {
    "text": "step two or it's done now if we run this new model against",
    "start": "1677840",
    "end": "1683840"
  },
  {
    "text": "with the with the model checker it sounds great um no no deadlock",
    "start": "1683840",
    "end": "1689039"
  },
  {
    "text": "everything's happy okay so that's a very complicated way of counting to three",
    "start": "1689039",
    "end": "1694080"
  },
  {
    "text": "um now one thing before we move on is i should just point out that doing nothing is almost always an option",
    "start": "1694080",
    "end": "1700960"
  },
  {
    "text": "um let me show you two different infinite series of states here's a here's a here's a state machine that counts one",
    "start": "1700960",
    "end": "1706480"
  },
  {
    "start": "1702000",
    "end": "1702000"
  },
  {
    "text": "two three and four five whatever here's another one um now in the first one you may say well this one runs every",
    "start": "1706480",
    "end": "1713039"
  },
  {
    "text": "you know second one two three the second one you know a millisecond after the first",
    "start": "1713039",
    "end": "1718159"
  },
  {
    "text": "one nothing's happened um it just transitions from one to one and two to two",
    "start": "1718159",
    "end": "1723679"
  },
  {
    "text": "and three to three and and really is there any difference between these two systems um from a time point of view i mean",
    "start": "1723679",
    "end": "1730640"
  },
  {
    "text": "every second the clock ticks and it goes from one to two to three and the fact that nothing happened between",
    "start": "1730640",
    "end": "1735760"
  },
  {
    "text": "one you know in a millisecond really they're exactly the same system and so they need to be modeled as the",
    "start": "1735760",
    "end": "1742399"
  },
  {
    "text": "same system and and pretty much staying in the same state is almost always a valid state transition and tla uh has a word",
    "start": "1742399",
    "end": "1749520"
  },
  {
    "text": "for that called stuttering meaning you're just not doing anything you're just sitting around not making any progress",
    "start": "1749520",
    "end": "1755679"
  },
  {
    "text": "so we need to add stuttering it's always good practice to add stuttering to your model so we're going to add stuttering so you",
    "start": "1755679",
    "end": "1762320"
  },
  {
    "start": "1756000",
    "end": "1756000"
  },
  {
    "text": "can hang around in one and you can hang around in two and we just add that again to our next",
    "start": "1762320",
    "end": "1768000"
  },
  {
    "text": "step you see there's a step one or step two or it's done or nothing changes",
    "start": "1768000",
    "end": "1773200"
  },
  {
    "text": "okay so that's the added stuttering now so our model we're building up our model",
    "start": "1773200",
    "end": "1779200"
  },
  {
    "text": "we're adding new things to a model um so now let's talk about time",
    "start": "1779200",
    "end": "1784480"
  },
  {
    "text": "so we've got a very complicated complicated way of counting to three um it's not very",
    "start": "1784480",
    "end": "1790080"
  },
  {
    "text": "exciting but that's not the point of doing tla plus the point of play plus is you can do a",
    "start": "1790080",
    "end": "1796559"
  },
  {
    "text": "lot more than that um and so let's start doing these extra things that your programming language",
    "start": "1796559",
    "end": "1802480"
  },
  {
    "text": "can't do we're going to check some temporal properties temporal properties properties that are",
    "start": "1802480",
    "end": "1809600"
  },
  {
    "text": "meaning have some sort of meaning over time okay so a property applies to the entire",
    "start": "1809600",
    "end": "1815120"
  },
  {
    "text": "system over time not just to any individual state to any one time",
    "start": "1815120",
    "end": "1821440"
  },
  {
    "text": "and so checking these kinds of properties is really really important um and this is the kind of thing that humans are really bad at",
    "start": "1821440",
    "end": "1828000"
  },
  {
    "text": "checking that the queue size it never goes beyond bounds it's really hard for us to kind",
    "start": "1828000",
    "end": "1833520"
  },
  {
    "text": "of see that when you have multiple producers and consumers you know programming languages are really bad at this too",
    "start": "1833520",
    "end": "1839200"
  },
  {
    "text": "an average programming language is not designed for this kind of thing however tla plus is designed for this kind of",
    "start": "1839200",
    "end": "1844720"
  },
  {
    "text": "thing tla plus is excellent at this kind of thing so let's use tla plus to do it",
    "start": "1844720",
    "end": "1850960"
  },
  {
    "text": "so what kinds of properties can we check what's useful in our world of modeling well a very important property",
    "start": "1850960",
    "end": "1857120"
  },
  {
    "start": "1851000",
    "end": "1851000"
  },
  {
    "text": "is that something is always true right well you want to make sure that in our you know the q case that the the",
    "start": "1857120",
    "end": "1862159"
  },
  {
    "text": "queue never goes below zero um in our in our count to three example uh we could say that the q",
    "start": "1862159",
    "end": "1868320"
  },
  {
    "text": "that our number x is always greater than zero you know it goes one two three if it goes below one something went wrong um another",
    "start": "1868320",
    "end": "1875679"
  },
  {
    "text": "useful one is something is eventually true um in our case is it true that at some",
    "start": "1875679",
    "end": "1881200"
  },
  {
    "text": "point in time x equals two well yeah is it true at some point in time that x equals",
    "start": "1881200",
    "end": "1887039"
  },
  {
    "text": "42 no it isn't um eventually always it's an interesting one and you use this",
    "start": "1887039",
    "end": "1893360"
  },
  {
    "text": "for where something is done so when it you know eventually something becomes done it's not always done but eventually it",
    "start": "1893360",
    "end": "1899440"
  },
  {
    "text": "does become done but when it does become done it stays done uh and in our case x eventually becomes",
    "start": "1899440",
    "end": "1905360"
  },
  {
    "text": "three and then it stays there it kind of it's done at that point our counting three is done and it just kind of loops",
    "start": "1905360",
    "end": "1911120"
  },
  {
    "text": "around staying at three so that's what's called eventually always and another useful one is leading to um",
    "start": "1911120",
    "end": "1919279"
  },
  {
    "text": "so if x7 becomes two then i guarantee it will become a three later uh but if i said if x becomes three i",
    "start": "1919279",
    "end": "1925919"
  },
  {
    "text": "guarantee it'll become one later uh that's not true so um",
    "start": "1925919",
    "end": "1931200"
  },
  {
    "start": "1931000",
    "end": "1931000"
  },
  {
    "text": "we have to kind of formalize this because we're using kind of informal language so we need to cut it into kind of mathematical language",
    "start": "1931200",
    "end": "1937039"
  },
  {
    "text": "so in english when we say something is always greater than two we really mean that it's always true that x is greater than zero and in in",
    "start": "1937039",
    "end": "1944159"
  },
  {
    "text": "tla we use the kind of square brackets as the always operator",
    "start": "1944159",
    "end": "1949919"
  },
  {
    "text": "when we say at some point x is two the more formal way of saying that is it's eventually true",
    "start": "1949919",
    "end": "1955679"
  },
  {
    "text": "that x equals true at x equals two that's something in some state and again in tla plus there's a special",
    "start": "1955679",
    "end": "1962000"
  },
  {
    "text": "operator for that which is the angle brackets one um x eventually becomes three and then",
    "start": "1962000",
    "end": "1968080"
  },
  {
    "text": "stays there that's one of these eventually always things so it's eventually",
    "start": "1968080",
    "end": "1973519"
  },
  {
    "text": "it's true that eventually always x is three so always x three is not true at the",
    "start": "1973519",
    "end": "1978720"
  },
  {
    "text": "beginning but eventually it is true and the symbol for that in tla plus is the angle brackets followed",
    "start": "1978720",
    "end": "1985679"
  },
  {
    "text": "by the square brackets and then finally if x ever becomes two then it will become three later",
    "start": "1985679",
    "end": "1992559"
  },
  {
    "text": "um that's in uh tla we use a kind of wiggly arrow for that",
    "start": "1992559",
    "end": "1998240"
  },
  {
    "text": "so those are kind of really important properties that all sorts of uses and we will see uh",
    "start": "1998240",
    "end": "2003840"
  },
  {
    "text": "this used later on when we come to the more complex examples so let's add these properties to the script always",
    "start": "2003840",
    "end": "2010480"
  },
  {
    "start": "2008000",
    "end": "2008000"
  },
  {
    "text": "x is one is greater than one it's less than three so it's always within bounds uh so we're going to use the square brackets for always and then we just say",
    "start": "2010480",
    "end": "2017919"
  },
  {
    "text": "x is greater than one and x is less than three that's always true no matter what state is in",
    "start": "2017919",
    "end": "2023600"
  },
  {
    "text": "at some point x equals two so we're going to use the angle brackets at some point eventually x equals two",
    "start": "2023600",
    "end": "2031600"
  },
  {
    "text": "at some point x equals 3 and stays there so this time we use the eventually always",
    "start": "2031600",
    "end": "2037519"
  },
  {
    "text": "which is the angle brackets followed by the square brackets and then whenever x is 2 then x does",
    "start": "2037519",
    "end": "2043039"
  },
  {
    "text": "become 3 and we use the the twiddly arrow for that okay so",
    "start": "2043039",
    "end": "2048320"
  },
  {
    "text": "that's the um properties and in in the model checker we kind of have to add the tell the",
    "start": "2048320",
    "end": "2053599"
  },
  {
    "text": "model checker that we want to check them there's a little bit of a user interface we can do that so i want to check all these four properties and",
    "start": "2053599",
    "end": "2060240"
  },
  {
    "text": "make sure they're always true no matter how i run the model um so here we have the properties again",
    "start": "2060240",
    "end": "2065760"
  },
  {
    "text": "and we're going to ask another poll how many of these properties are true let me go to the",
    "start": "2065760",
    "end": "2072398"
  },
  {
    "text": "whole thing here how many of these properties are true all four of them some of them one of",
    "start": "2072399",
    "end": "2078560"
  },
  {
    "text": "them or none of them okay so and i promise you i haven't made any typos",
    "start": "2078560",
    "end": "2084240"
  },
  {
    "text": "these are this is the correct way of specifying these properties so that's not it's not a type of kind of thing it's like from a logical point of",
    "start": "2084240",
    "end": "2090079"
  },
  {
    "text": "thing will these properties always be true so this is your this is your confidence",
    "start": "2090079",
    "end": "2096158"
  },
  {
    "text": "test and most people seem to think that all four of them will be true",
    "start": "2096159",
    "end": "2102720"
  },
  {
    "start": "2099000",
    "end": "2099000"
  },
  {
    "text": "and a couple of people think that some of them will be true okay so it's tla it's bitly tla pol",
    "start": "2102720",
    "end": "2110960"
  },
  {
    "text": "if you're following along at home and yeah i i think i'm just going to say",
    "start": "2110960",
    "end": "2118560"
  },
  {
    "text": "vast majority of people think that all four are correct some people think that some of them are",
    "start": "2118560",
    "end": "2125680"
  },
  {
    "text": "correct nobody thinks that anything else is right so yet again your intuition is wrong",
    "start": "2125680",
    "end": "2134720"
  },
  {
    "text": "because if we actually run this um we want this little thing and the model",
    "start": "2134720",
    "end": "2139920"
  },
  {
    "text": "checker says uh-oh temporal properties were violated now what happens well if i look at the",
    "start": "2139920",
    "end": "2148240"
  },
  {
    "text": "the trace it says it started at one and then it stayed at one and then it",
    "start": "2148240",
    "end": "2153520"
  },
  {
    "text": "stayed at one it stayed at one it started it just kept going round and round what we've got here is one infinite loop",
    "start": "2153520",
    "end": "2160160"
  },
  {
    "start": "2158000",
    "end": "2158000"
  },
  {
    "text": "because you forgot that i added this infinite loop to the one state",
    "start": "2160160",
    "end": "2165280"
  },
  {
    "text": "and this is really easy to do um and so what happened here is that it never got out of the first",
    "start": "2165280",
    "end": "2171200"
  },
  {
    "text": "state and so none of the other properties were true um one of the properties was true which is the bounds was it always within",
    "start": "2171200",
    "end": "2177200"
  },
  {
    "text": "bounds yes it was it was always uh you know greater equal than one and less than equal three because the very first state",
    "start": "2177200",
    "end": "2183920"
  },
  {
    "text": "that was true um but none of the other ones came true because it never left the first state that's kind of annoying we went to",
    "start": "2183920",
    "end": "2192240"
  },
  {
    "text": "this trouble to add this stuttering thing because we're supposed to add it to represent a good model and yet as soon as we add it um it",
    "start": "2192240",
    "end": "2199920"
  },
  {
    "text": "complains that it's just stuck in an infinite loop uh that's not very helpful",
    "start": "2199920",
    "end": "2205200"
  },
  {
    "text": "so how can how can we fix this um we want what we want to do is it's like",
    "start": "2205200",
    "end": "2210240"
  },
  {
    "text": "it's okay i don't mind if you go around that loop a few times but i want you to at least try some",
    "start": "2210240",
    "end": "2215920"
  },
  {
    "text": "other things don't just go around the same place forever you know try some of the other transitions once",
    "start": "2215920",
    "end": "2220960"
  },
  {
    "text": "in a while um so that's what we wanted to do and there's actually a word for this this is",
    "start": "2220960",
    "end": "2226320"
  },
  {
    "text": "called fairness don't just pick on one transition and stick to it try all the other transitions give all",
    "start": "2226320",
    "end": "2232560"
  },
  {
    "text": "the other transitions a chance um don't just just don't stick with one of them",
    "start": "2232560",
    "end": "2237599"
  },
  {
    "text": "so of course tla plus can model this and so let's see how tla plus does do",
    "start": "2237599",
    "end": "2243680"
  },
  {
    "text": "model it so how do we model fairness in tla plus uh we have to do some",
    "start": "2243680",
    "end": "2248800"
  },
  {
    "text": "kind of bit of code refactoring again uh and then we can add the fairness and unfortunately the syntax for this gets a",
    "start": "2248800",
    "end": "2255680"
  },
  {
    "text": "bit ugly so just bear with me the first thing we have to do is get rid of the initial and next",
    "start": "2255680",
    "end": "2263119"
  },
  {
    "start": "2260000",
    "end": "2260000"
  },
  {
    "text": "transitions and merge them into a single specification which which encompasses everything so rather",
    "start": "2263119",
    "end": "2268960"
  },
  {
    "text": "than saying here's the initial one here's the next one we're going to have something that combines both of them so we're going to",
    "start": "2268960",
    "end": "2274960"
  },
  {
    "text": "say the overall specification is going to be the initial step the",
    "start": "2274960",
    "end": "2280079"
  },
  {
    "text": "initial state and then always something else some sort of trans state transition",
    "start": "2280079",
    "end": "2285920"
  },
  {
    "text": "okay now the state transition is either the next transition or the unchanged",
    "start": "2285920",
    "end": "2292480"
  },
  {
    "text": "transition so it's either do the next step or do one of these infinite loops",
    "start": "2292480",
    "end": "2298079"
  },
  {
    "text": "and always do one of the two so that's uh the overall specification the way we",
    "start": "2298079",
    "end": "2303280"
  },
  {
    "text": "have it right now okay so this is what it looks like right now but then there's a special syntax for that",
    "start": "2303280",
    "end": "2308560"
  },
  {
    "text": "to make it look nicer and it looks like this so that's what it looks like before and that's what it looks like afterwards",
    "start": "2308560",
    "end": "2315680"
  },
  {
    "text": "um this special syntax when you have the little underscore that means stutter on x so it says try to do the",
    "start": "2315680",
    "end": "2321920"
  },
  {
    "text": "next transition or stutter on x and they're both good all right so that's what we've got right",
    "start": "2321920",
    "end": "2328000"
  },
  {
    "text": "now now finally we can add the fairness constraints and this is what it looks like wf",
    "start": "2328000",
    "end": "2334000"
  },
  {
    "text": "underscore x of next and i told you the syntax is a bit kind of gnarly this is called weak fairness",
    "start": "2334000",
    "end": "2340880"
  },
  {
    "text": "there's actually another one called strong fairness and i'm really not going to get into the difference but what this basically does says is",
    "start": "2340880",
    "end": "2347920"
  },
  {
    "text": "don't keep going round and round in circles try doing the next transition every so often if it's available just don't get stuck",
    "start": "2347920",
    "end": "2355280"
  },
  {
    "text": "in a loop that's all that means so here's our complete spec with fairness now we've",
    "start": "2355280",
    "end": "2360560"
  },
  {
    "start": "2359000",
    "end": "2359000"
  },
  {
    "text": "added the fairness constraint and here are properties to check so this is the complete spec now for counting to",
    "start": "2360560",
    "end": "2365680"
  },
  {
    "text": "three and if we run this new spec all four temporal properties are now",
    "start": "2365680",
    "end": "2371280"
  },
  {
    "text": "true which is great so what we were missing we just needed to add that fairness thing",
    "start": "2371280",
    "end": "2376320"
  },
  {
    "text": "to make sure it didn't get stuck in a loop and these properties are true just as we thought they would be originally",
    "start": "2376320",
    "end": "2382240"
  },
  {
    "text": "that's nice so now we're done so we can count to three that's very exciting now this is the",
    "start": "2382240",
    "end": "2388480"
  },
  {
    "text": "thing so counting the three is not the exciting part what the exciting part is that these four properties",
    "start": "2388480",
    "end": "2394079"
  },
  {
    "text": "checking whether something's always true eventually true eventually always true and so on these are the things that you can do in",
    "start": "2394079",
    "end": "2400480"
  },
  {
    "text": "tla plus that you can't do in a programming language so this is the really the point i want to make about",
    "start": "2400480",
    "end": "2406160"
  },
  {
    "text": "this little example uh um know we this is the stuff that's",
    "start": "2406160",
    "end": "2411680"
  },
  {
    "text": "the critical stuff okay so now let's move on to",
    "start": "2411680",
    "end": "2417200"
  },
  {
    "text": "the producer consume examples that we did earlier in the talk and let's see if we can model them",
    "start": "2417200",
    "end": "2422400"
  },
  {
    "text": "and get confidence rather than everyone's saying well i don't know i'm not sure i don't have a lot of confidence",
    "start": "2422400",
    "end": "2427520"
  },
  {
    "text": "let's see if we can get rid of that and get some confidence so here's the examples again we write to",
    "start": "2427520",
    "end": "2433680"
  },
  {
    "start": "2431000",
    "end": "2431000"
  },
  {
    "text": "a queue we've got two different stages we read from the queue and we have two different stages so now",
    "start": "2433680",
    "end": "2439920"
  },
  {
    "text": "let's what we're going to do is make a model of this in tla plus and we're going to check the model and see what the model says",
    "start": "2439920",
    "end": "2445920"
  },
  {
    "text": "rather than just guessing so on the producer side of things there's actually two different states uh",
    "start": "2445920",
    "end": "2453040"
  },
  {
    "start": "2449000",
    "end": "2449000"
  },
  {
    "text": "we start off we're ready to write and then we can see is it can we actually write is the queue full or not",
    "start": "2453040",
    "end": "2458960"
  },
  {
    "text": "if the queue is not full we can transition to the right stage and then at that point when our turn comes around",
    "start": "2458960",
    "end": "2464880"
  },
  {
    "text": "again we can try writing and after we've written something we go back to ready and we start all over again so as i said",
    "start": "2464880",
    "end": "2472640"
  },
  {
    "text": "we're going to model this as two distinct transitions rather than one atomic step because if it was one atomic step it would be a really boring example",
    "start": "2472640",
    "end": "2479200"
  },
  {
    "text": "so the programming language version of this if i was doing this in like python or some pseudocode this is",
    "start": "2479200",
    "end": "2485200"
  },
  {
    "text": "not exactly python but if the cue size is less than the maximum size",
    "start": "2485200",
    "end": "2490480"
  },
  {
    "text": "and we're in the ready states then we can transition to the right state that's the first bit",
    "start": "2490480",
    "end": "2496880"
  },
  {
    "text": "and then second bit is uh if we're in the can write state then transition back to the ready state",
    "start": "2496880",
    "end": "2503760"
  },
  {
    "text": "and as also as part of that uh change the queue size push something onto the queue",
    "start": "2503760",
    "end": "2508880"
  },
  {
    "text": "now since this is a model i actually don't care what the contents of the queue is at all the only thing i really care about",
    "start": "2508880",
    "end": "2515599"
  },
  {
    "text": "is the queue getting bigger or is it getting smaller so we're just going to in our model we're just going to use the q",
    "start": "2515599",
    "end": "2521359"
  },
  {
    "text": "um as an integer we're just gonna add one and subtract one every time we write that's good enough to test our model there's no point making it more",
    "start": "2521359",
    "end": "2527599"
  },
  {
    "text": "complicated that so that's the programming language version now let's look at the tla plus",
    "start": "2527599",
    "end": "2533599"
  },
  {
    "text": "version so same kind of thing if you're in the ready state and the cue size is less than this and",
    "start": "2533599",
    "end": "2541200"
  },
  {
    "text": "now this is again it's not it's not um it's not assignment so all three things",
    "start": "2541200",
    "end": "2546319"
  },
  {
    "text": "have to match for this transition to be valid okay so afterwards the cues the producer states in right and the",
    "start": "2546319",
    "end": "2553599"
  },
  {
    "text": "queue size is unchanged now this is one of the differences between tla and a programming language is that",
    "start": "2553599",
    "end": "2558720"
  },
  {
    "text": "every variable has to be accounted for in a state transition you can't just say i don't care what happens to the cue",
    "start": "2558720",
    "end": "2563839"
  },
  {
    "text": "size you have to specifically say either i am changing the cue size or i'm not changing the cue size",
    "start": "2563839",
    "end": "2569040"
  },
  {
    "text": "you have to specifically say that always so i have to specifically say the cue size is not changing",
    "start": "2569040",
    "end": "2574800"
  },
  {
    "text": "okay so that's the first bit uh now the second bit similar kind of thing if i'm in the right mode and i can transition",
    "start": "2574800",
    "end": "2582880"
  },
  {
    "text": "to the read mode i'm into the ready state and i can add one to the queue and um uh that's the two different",
    "start": "2582880",
    "end": "2590240"
  },
  {
    "text": "transitions now overall as a producer um the two things i can do is i can either",
    "start": "2590240",
    "end": "2596800"
  },
  {
    "text": "go i can do the first transition or the second transition i can do the check part or i can do the right part",
    "start": "2596800",
    "end": "2601920"
  },
  {
    "text": "so it's this or that it's the upside down uh triangle is all so that's everything i can do as",
    "start": "2601920",
    "end": "2608079"
  },
  {
    "text": "a producer now let's look at a consumer it's pretty much the same kind of idea",
    "start": "2608079",
    "end": "2614880"
  },
  {
    "start": "2611000",
    "end": "2611000"
  },
  {
    "text": "um we can check whether it's readable um if the cue size is bigger than zero i",
    "start": "2614880",
    "end": "2621680"
  },
  {
    "text": "can read otherwise i can't read um and i transition to the read can read state and the queue size",
    "start": "2621680",
    "end": "2628000"
  },
  {
    "text": "is unchanged and then on when i actually do a read i have to be i have to start off in one state",
    "start": "2628000",
    "end": "2633440"
  },
  {
    "text": "and then i transition to the other state and at the same time i take something off the queue so that's",
    "start": "2633440",
    "end": "2639280"
  },
  {
    "text": "the check and the read for the consumer and again the consumer as a whole has two parts you can either do the",
    "start": "2639280",
    "end": "2645440"
  },
  {
    "text": "check or we can do the read so it's all so we've got the consumer action and we've got the",
    "start": "2645440",
    "end": "2650560"
  },
  {
    "text": "producer action so if we combine them let's just i should show the entire valid script here we have to also in a",
    "start": "2650560",
    "end": "2657440"
  },
  {
    "start": "2653000",
    "end": "2653000"
  },
  {
    "text": "proper tla script we have to list the variables we're using and i'm going to assign the maximum queue size to be two",
    "start": "2657440",
    "end": "2664319"
  },
  {
    "text": "it's a model it doesn't need to be like 10 000 long it just needs to be a few long because that's all we need to check the all",
    "start": "2664319",
    "end": "2670560"
  },
  {
    "text": "possible states so the initial state is that both both things are ready and the queue size is zero and then um",
    "start": "2670560",
    "end": "2678319"
  },
  {
    "text": "the producer will type you know this is the same code i showed you a minute ago for the producer",
    "start": "2678319",
    "end": "2683599"
  },
  {
    "text": "and then this is the same code i showed you a minute ago for the consumer and then finally",
    "start": "2683599",
    "end": "2690000"
  },
  {
    "text": "the overall all the possible state transitions we can do is either we can do a producer action or we can do a consumer action so we got",
    "start": "2690000",
    "end": "2698079"
  },
  {
    "text": "choice between the two now what's interesting is when we write this we've actually got a non-deterministic",
    "start": "2698079",
    "end": "2704400"
  },
  {
    "text": "system we've got you might think of it as two different processes or two different threads or two different actors they're kind of",
    "start": "2704400",
    "end": "2710720"
  },
  {
    "text": "running in parallel um in tla plus this is completely natural i don't have to like create a",
    "start": "2710720",
    "end": "2716079"
  },
  {
    "text": "special thread or process or something we just say these two things can happen either",
    "start": "2716079",
    "end": "2721119"
  },
  {
    "text": "these two things happen at any time and we get uh you know parallel",
    "start": "2721119",
    "end": "2726240"
  },
  {
    "text": "uh behaviors happening at the same time it's just kind of cool so that's one of the things that's",
    "start": "2726240",
    "end": "2731920"
  },
  {
    "text": "really nice about tla plus it's why it's so good for concurrency you don't need to do anything clever to get kind of",
    "start": "2731920",
    "end": "2737280"
  },
  {
    "text": "currency happening um something else i should point out is that we don't have any stuttering",
    "start": "2737280",
    "end": "2743200"
  },
  {
    "text": "because this system these loops will go they'll go round and round in a loop so there'll never be a point where",
    "start": "2743200",
    "end": "2749359"
  },
  {
    "text": "there'll be a deadlock hopefully should we add stuttering anyway though should we add the fact that everything",
    "start": "2749359",
    "end": "2755680"
  },
  {
    "text": "could stay unchanged and that's a good question and what's what happens if you think of things",
    "start": "2755680",
    "end": "2761760"
  },
  {
    "text": "being unchanged you can actually use this to model the systems crashing like if the producer isn't producing anything",
    "start": "2761760",
    "end": "2768079"
  },
  {
    "text": "um you know how would you detect that could you handle that maybe you need to monitor the cue size",
    "start": "2768079",
    "end": "2773839"
  },
  {
    "text": "and uh you know if the queue hasn't changed size for a while that's a flag or something you can actually model that very nicely",
    "start": "2773839",
    "end": "2780400"
  },
  {
    "text": "in in tla plus so that's kind of cool um so what are the properties what are",
    "start": "2780400",
    "end": "2787440"
  },
  {
    "text": "the properties we want over time for this uh model well the main one we wanted was",
    "start": "2787440",
    "end": "2792560"
  },
  {
    "text": "it was always within bounds the cue size is always greater than zero and the cue",
    "start": "2792560",
    "end": "2798880"
  },
  {
    "text": "size is always less than the maximum so you should be able to read this now cue size is greater than zero and",
    "start": "2798880",
    "end": "2804319"
  },
  {
    "text": "q size is is less than the max and that whole thing is always true for every",
    "start": "2804319",
    "end": "2809839"
  },
  {
    "text": "possible state so if we run this there's eight possible states it can be in and there are no errors so that's great",
    "start": "2809839",
    "end": "2816480"
  },
  {
    "start": "2810000",
    "end": "2810000"
  },
  {
    "text": "so the invariant of the queue size being out of bounds is never going to happen with one producer and one consumer we",
    "start": "2816480",
    "end": "2823040"
  },
  {
    "text": "have a lot of confidence in this design but with one producer and one consumer so we're not guessing",
    "start": "2823040",
    "end": "2828480"
  },
  {
    "text": "anymore i trust that the model checker worked and it checked all the states",
    "start": "2828480",
    "end": "2833520"
  },
  {
    "text": "and everything worked properly so that's good i have confidence for this one",
    "start": "2833520",
    "end": "2838720"
  },
  {
    "text": "now let's do the concurrent one and see what happens there so this is when we have more than one",
    "start": "2838720",
    "end": "2844559"
  },
  {
    "text": "producer and more than one consumer um accessing the same queue and this is",
    "start": "2844559",
    "end": "2849839"
  },
  {
    "text": "now we need the plus part of tla plus uh which is the set theory um so again this is a mathematical thing",
    "start": "2849839",
    "end": "2858400"
  },
  {
    "start": "2853000",
    "end": "2853000"
  },
  {
    "text": "uh tla plus uses sets and you know if we use a program language",
    "start": "2858400",
    "end": "2864480"
  },
  {
    "text": "and we want to like filter out a subset of something we would use a keyword a method called filter or something um",
    "start": "2864480",
    "end": "2871440"
  },
  {
    "text": "in tla plus you'd say all the elements in the set such that this predicate is true",
    "start": "2871440",
    "end": "2876640"
  },
  {
    "text": "which is the mathematical way of saying it uh if we wanted to see find all the elements in the set where",
    "start": "2876640",
    "end": "2882240"
  },
  {
    "text": "something was true does there exist an element which is true uh you know in a programming language",
    "start": "2882240",
    "end": "2887760"
  },
  {
    "text": "you probably say you know any is there anything in the set which is true but in tla plus we use mathematical",
    "start": "2887760",
    "end": "2893520"
  },
  {
    "text": "conventions and we say does there exist an element x in the set s such that this predicate is true",
    "start": "2893520",
    "end": "2900079"
  },
  {
    "text": "so when you see all these slash a's and slash ins that is set notation in tla plus",
    "start": "2900079",
    "end": "2907680"
  },
  {
    "text": "so it looks a bit scary but once you get used to it once you start recognizing for what it was it's not as scary as you might think",
    "start": "2907680",
    "end": "2914720"
  },
  {
    "text": "okay so we're going to need a set of producers and a set of consumers and we need to use the",
    "start": "2914720",
    "end": "2920400"
  },
  {
    "text": "set description part of tla plus so our code is going to get a little more ugly unfortunately so here we have two",
    "start": "2920400",
    "end": "2926559"
  },
  {
    "text": "producers and two consumers that's what we're going to pass in so here's the specification for the",
    "start": "2926559",
    "end": "2932319"
  },
  {
    "text": "multi producer consumer one um there are presumably now we're going to have the",
    "start": "2932319",
    "end": "2937440"
  },
  {
    "text": "producer state and the consumer state but this time they're going to be dictionaries they're going to be maps",
    "start": "2937440",
    "end": "2943839"
  },
  {
    "text": "uh i'll explain that in a minute that's the same initialization is slightly different um",
    "start": "2943839",
    "end": "2950480"
  },
  {
    "text": "so let me just take you through this these are now a dictionary or a map where it's a bunch of key value pairs",
    "start": "2950480",
    "end": "2956559"
  },
  {
    "text": "and the key is the producer or the consumer and the value is the state of that",
    "start": "2956559",
    "end": "2962800"
  },
  {
    "text": "producer or consumer so when we do something like this what we're saying is for every",
    "start": "2962800",
    "end": "2968400"
  },
  {
    "text": "producer uh assign the the the value for that to be ready so if you're used to python or",
    "start": "2968400",
    "end": "2974480"
  },
  {
    "text": "something it's the same as that little bit of code underneath p1 is ready p2 is also ready",
    "start": "2974480",
    "end": "2980800"
  },
  {
    "text": "now to check whether something is writable the code looks a little bit different as well",
    "start": "2980800",
    "end": "2986480"
  },
  {
    "text": "this is now parameterized for a particular producer this code is now so we can pass in a parameter to these things",
    "start": "2986480",
    "end": "2992000"
  },
  {
    "text": "and this now says uh the producer state at that key is that is that ready for that",
    "start": "2992000",
    "end": "2997520"
  },
  {
    "text": "particular producer is the state ready uh the cue size is the same and now that afterwards the producer",
    "start": "2997520",
    "end": "3003920"
  },
  {
    "text": "state is um we can't just update one part we have to say the entire producer state is exactly the same except for this one",
    "start": "3003920",
    "end": "3010559"
  },
  {
    "text": "thing so the new producer state afterwards is the same as the original producer state except that one key value pair has been",
    "start": "3010559",
    "end": "3016559"
  },
  {
    "text": "changed and for this particular producer the key the state has been changed to can write",
    "start": "3016559",
    "end": "3021839"
  },
  {
    "text": "so that's why it uses the word accept because it's the original set except this one thing has changed",
    "start": "3021839",
    "end": "3028799"
  },
  {
    "text": "similarly on the other side of the right side similar kind of logic",
    "start": "3029119",
    "end": "3034319"
  },
  {
    "text": "we update the state except for it's now ready now the producer action also looks different because what we now",
    "start": "3034319",
    "end": "3040640"
  },
  {
    "text": "have here is we have a lot of producers so what we're going to do is try and find any producer that we can do one of these",
    "start": "3040640",
    "end": "3047760"
  },
  {
    "text": "transitions does there exist a producer in the set of producers that we can either do either the check transition or we can",
    "start": "3047760",
    "end": "3054240"
  },
  {
    "text": "do the right transition um so we're just going to try and find any of the users and it doesn't matter",
    "start": "3054240",
    "end": "3059359"
  },
  {
    "text": "which one we pick it's non-deterministic now on the consumer side it's very very",
    "start": "3059359",
    "end": "3065599"
  },
  {
    "text": "similar we have privatized version of the readable thing again it's now parameterized by",
    "start": "3065599",
    "end": "3070640"
  },
  {
    "text": "consumer uh the key value for that you know the we look up that consumer",
    "start": "3070640",
    "end": "3076079"
  },
  {
    "text": "as the key and if the value is ready that's good and again when we update the state it's",
    "start": "3076079",
    "end": "3082079"
  },
  {
    "text": "exactly the same as it was before except that the key value for this one has changed to can read",
    "start": "3082079",
    "end": "3087920"
  },
  {
    "text": "so that's what that logic is and again the read logic is very similar so now we're just using set notation a lot more",
    "start": "3087920",
    "end": "3094400"
  },
  {
    "text": "rather than individual things and again for the consumer side of things um we have to say does there exist a",
    "start": "3094400",
    "end": "3100640"
  },
  {
    "text": "consumer uh that can go to one of these two states can it read or kind of uh you know can we do",
    "start": "3100640",
    "end": "3106160"
  },
  {
    "text": "the check transition can we do the retransition is there a consumer that will do that",
    "start": "3106160",
    "end": "3111440"
  },
  {
    "text": "so we run this script we run the model checker um with two producers and two consumers",
    "start": "3111440",
    "end": "3116880"
  },
  {
    "text": "and the same always with bounds property there are 38 different estates uh 38 states we can't possibly check",
    "start": "3116880",
    "end": "3122640"
  },
  {
    "text": "38 distinct states by hand and we get this error the invariant is violated so this is not",
    "start": "3122640",
    "end": "3129680"
  },
  {
    "text": "true we are confident this design does not work unlike the before when we were guessing",
    "start": "3129680",
    "end": "3135359"
  },
  {
    "text": "so no need to guess we can be confident that we're right or wrong",
    "start": "3135359",
    "end": "3140720"
  },
  {
    "text": "so tla plus won't tell you how to fix the error um you have to think okay but",
    "start": "3140720",
    "end": "3147280"
  },
  {
    "start": "3141000",
    "end": "3141000"
  },
  {
    "text": "when you want to test the fixes you just update the model with the fix so let's say i want to make the operations atomic",
    "start": "3147280",
    "end": "3153200"
  },
  {
    "text": "or i want to add locks or whatever it is i update the model to do these things",
    "start": "3153200",
    "end": "3158400"
  },
  {
    "text": "and then i can rerun the model checker and whatever the model checker says i now have a lot more confidence that the fix",
    "start": "3158400",
    "end": "3164559"
  },
  {
    "text": "does work or the fix doesn't work but you know my confidence is very high rather than just guessing",
    "start": "3164559",
    "end": "3170640"
  },
  {
    "text": "like if i had a lock uh is that going to work maybe if i have a bit of wrong logic for locking maybe i might",
    "start": "3170640",
    "end": "3176800"
  },
  {
    "text": "have white logic locks are tricky too now this is all in 50 lines of code so this is a really nice little script",
    "start": "3176800",
    "end": "3184160"
  },
  {
    "text": "that we can use for doing um our check in our models so okay last bit i'm running out of time",
    "start": "3184160",
    "end": "3190960"
  },
  {
    "text": "i'm going to go a few minutes over sorry about that but we're now going to use tla plus",
    "start": "3190960",
    "end": "3196800"
  },
  {
    "text": "to do a zero downtime deployment and this is kind of a real world example i want to do i want to have a zero",
    "start": "3196800",
    "end": "3203839"
  },
  {
    "text": "downtime deployment of a bunch of servers is my logic correct am i making any mistakes before i actually do it and",
    "start": "3203839",
    "end": "3210400"
  },
  {
    "text": "and and have a problem so i'm going to go fast don't worry about the details i just",
    "start": "3210400",
    "end": "3215599"
  },
  {
    "text": "want you to get the overall big picture of what you can do so tla plus is a great",
    "start": "3215599",
    "end": "3220640"
  },
  {
    "start": "3219000",
    "end": "3219000"
  },
  {
    "text": "tool for improving the design process because you can do these kind of sketches in a few lines of code you can check it",
    "start": "3220640",
    "end": "3226400"
  },
  {
    "text": "you can fix it you can check it again and you can repeat and repeat until you're happy with the design and it's so",
    "start": "3226400",
    "end": "3233200"
  },
  {
    "text": "much faster than writing real code codes you know you can do things in hours or minutes rather than",
    "start": "3233200",
    "end": "3239119"
  },
  {
    "text": "month weeks or months so if you think of it as like test driven development but from",
    "start": "3239119",
    "end": "3244400"
  },
  {
    "text": "currency instead of red green refactor it's red green remodel",
    "start": "3244400",
    "end": "3250000"
  },
  {
    "text": "you know you get a red your thing doesn't work you make it work you maybe you remodel it until everything is green",
    "start": "3250000",
    "end": "3255200"
  },
  {
    "text": "and then you're happy to go so what we're going to do what we're going to model in this situation is a bunch of",
    "start": "3255200",
    "end": "3262240"
  },
  {
    "start": "3258000",
    "end": "3258000"
  },
  {
    "text": "servers each server has to be upgraded from version one to version two each server goes offline during the",
    "start": "3262240",
    "end": "3268240"
  },
  {
    "text": "upgrade and we want to check that there's always a server this is online like zero downtime",
    "start": "3268240",
    "end": "3274079"
  },
  {
    "text": "and all the servers must be upgraded that's kind of important right if they all stay at version one there's no problem",
    "start": "3274079",
    "end": "3279440"
  },
  {
    "text": "but uh we want to make sure they all go to version two at some point otherwise it's not a very good upgrade and i'm just crediting you know",
    "start": "3279440",
    "end": "3285760"
  },
  {
    "text": "wayne for the idea for this uh here's a post on modeling deployments which i based this example off of so",
    "start": "3285760",
    "end": "3292240"
  },
  {
    "text": "let's sketch the design we have a service date in version one we start the upgrade it goes offline",
    "start": "3292240",
    "end": "3298480"
  },
  {
    "text": "and when and then we finish the upgrade and it comes back online again as version two and then once it's a",
    "start": "3298480",
    "end": "3304319"
  },
  {
    "text": "version two we're done and we can just kind of loop around forever in version two just like we did with the count to three example so uh",
    "start": "3304319",
    "end": "3312000"
  },
  {
    "text": "this is the initial states all the servers are online and in version one",
    "start": "3312000",
    "end": "3317280"
  },
  {
    "text": "when we start a particular server it goes if it's in online and it's in version one it can",
    "start": "3317280",
    "end": "3323280"
  },
  {
    "text": "all the servers stays the same except for this particular one changes to offline and when we finish it has to be offline",
    "start": "3323280",
    "end": "3330079"
  },
  {
    "text": "and afterwards all the servers are the same except this particular one goes to version two so that is our model",
    "start": "3330079",
    "end": "3337920"
  },
  {
    "text": "um now we're going to combine the start and finish into a single step called upgrade",
    "start": "3337920",
    "end": "3343040"
  },
  {
    "text": "and this says try and find a server where we can do either the start step or the finished",
    "start": "3343040",
    "end": "3348240"
  },
  {
    "text": "step so it doesn't access the server uh that we can do that and then we're",
    "start": "3348240",
    "end": "3353520"
  },
  {
    "text": "done if all the servers are finished so if it's true that all the servers are in online version two we're done and",
    "start": "3353520",
    "end": "3359440"
  },
  {
    "text": "then we can just say yeah we can just do our infinite loop at that point which everything's unchanged after that",
    "start": "3359440",
    "end": "3364480"
  },
  {
    "text": "so that's the done state and so overall the entire next is either do the upgrade step or do the",
    "start": "3364480",
    "end": "3371280"
  },
  {
    "text": "done step and that is our entire sketch for the for the logic for upgrading our service",
    "start": "3371280",
    "end": "3377680"
  },
  {
    "text": "so like i said i'm whizzing through this very quickly um but uh yeah you know you don't have to",
    "start": "3377680",
    "end": "3382880"
  },
  {
    "text": "understand the example in the code too much but i just want to show you this it's not that hard to like sketch out a design now here's the thing",
    "start": "3382880",
    "end": "3390640"
  },
  {
    "start": "3390000",
    "end": "3390000"
  },
  {
    "text": "we want to check and see does this work right so with one server we have three states which is probably what we'd",
    "start": "3390640",
    "end": "3396559"
  },
  {
    "text": "expect and the number of states goes up exponentially as you add more servers and uh it's really hard to eyeball for",
    "start": "3396559",
    "end": "3404079"
  },
  {
    "text": "errors so we're going to do the model checker to make sure we haven't forgotten anything so let's add some temporal properties",
    "start": "3404079",
    "end": "3411920"
  },
  {
    "start": "3409000",
    "end": "3409000"
  },
  {
    "text": "um we want zero downtime that's a really important one and that means not all servers should be offline at once and we",
    "start": "3411920",
    "end": "3418400"
  },
  {
    "text": "want the upgrade to complete so that means all the servers should eventually be version two",
    "start": "3418400",
    "end": "3423680"
  },
  {
    "text": "so let's write the code for that it's always true there exists a server that's not offline so we say uh it's always true that there",
    "start": "3423680",
    "end": "3431200"
  },
  {
    "text": "exists a server that's not offline always there's a server where the server state is not offline",
    "start": "3431200",
    "end": "3437760"
  },
  {
    "text": "and not uh is slash equals is tla plus for not equals like bang equals okay what about the",
    "start": "3437760",
    "end": "3444799"
  },
  {
    "text": "other one eventually upgraded that what does that mean that means eventually all the servers uh the state for that",
    "start": "3444799",
    "end": "3451920"
  },
  {
    "text": "server is version two so that's the set logic and the tempo logic combined it's eventually true that for all the",
    "start": "3451920",
    "end": "3459040"
  },
  {
    "text": "servers service date is going to be version two that's what it means to be eventually upgraded",
    "start": "3459040",
    "end": "3464079"
  },
  {
    "text": "so let's run this script with two servers and we get the zero downtime violation",
    "start": "3464079",
    "end": "3470319"
  },
  {
    "start": "3465000",
    "end": "3465000"
  },
  {
    "text": "straight away because there's something wrong with our model and the ch the trace tells us exactly what",
    "start": "3470319",
    "end": "3476559"
  },
  {
    "text": "went wrong server one uh went offline and then server two went offline and now they're both offline",
    "start": "3476559",
    "end": "3483119"
  },
  {
    "text": "and that's bad so that that uh invariant was violated straight away",
    "start": "3483119",
    "end": "3488400"
  },
  {
    "text": "well okay uh i've got an idea we could fix this um and how can we be sure that our fix will",
    "start": "3488400",
    "end": "3494880"
  },
  {
    "text": "work well let's check it with the model checker so we're going to add a new condition",
    "start": "3494880",
    "end": "3500480"
  },
  {
    "text": "for the starting and upgrade we're going to say you can only start an upgrade if no other servers are offline and that",
    "start": "3500480",
    "end": "3505599"
  },
  {
    "text": "way only one server can be offline at a time so this is this new transition if",
    "start": "3505599",
    "end": "3512079"
  },
  {
    "text": "there exists another server which the server is offline then don't start the upgrade okay",
    "start": "3512079",
    "end": "3519440"
  },
  {
    "text": "so only one at a time can be offline and they can't all be offline at the same time",
    "start": "3519440",
    "end": "3524720"
  },
  {
    "text": "so other than that it's the same so if you run this model uh the zero time now works so it's",
    "start": "3524720",
    "end": "3530240"
  },
  {
    "text": "always true that uh you never have any downtime that's much better confidence however eventually upgraded fails",
    "start": "3530240",
    "end": "3538240"
  },
  {
    "text": "okay why does it fail because of stuttering because in our code uh the model says it just",
    "start": "3538240",
    "end": "3544319"
  },
  {
    "text": "stays at version one forever yeah well that's not very helpful so the way to fix that is to add a fairness",
    "start": "3544319",
    "end": "3550160"
  },
  {
    "text": "condition and we had a fairness condition and now it works so if we uh do this we now have complete",
    "start": "3550160",
    "end": "3556559"
  },
  {
    "text": "confidence in this particular design this is great now let's add one",
    "start": "3556559",
    "end": "3561599"
  },
  {
    "start": "3561000",
    "end": "3561000"
  },
  {
    "text": "more condition let's say that all the servers have to be running the same version which is a",
    "start": "3561599",
    "end": "3567359"
  },
  {
    "text": "decent condition to have they all have to be running either version one or version two so here's all the lists of all the",
    "start": "3567359",
    "end": "3572640"
  },
  {
    "text": "services the set of servers all the servers which are not offline that's the set of online servers and it's always true",
    "start": "3572640",
    "end": "3578640"
  },
  {
    "text": "that you take any two servers in the list of online servers and they have the same version",
    "start": "3578640",
    "end": "3585440"
  },
  {
    "text": "now if you run the script with this property we immediately get an error again the same version it's not always true",
    "start": "3585520",
    "end": "3591599"
  },
  {
    "text": "well why is it not always true well because server one goes offline and server one comes back online",
    "start": "3591599",
    "end": "3597680"
  },
  {
    "text": "upgraded server two is still online and it's a version 1. um so that it breaks straight away so",
    "start": "3597680",
    "end": "3604319"
  },
  {
    "text": "the model checker found a logic bug straight away with our design which might not have been obvious",
    "start": "3604319",
    "end": "3610319"
  },
  {
    "text": "this is the kind of thing it gets more more subtle we might not have been aware of that if we hadn't if we hadn't checked it",
    "start": "3610319",
    "end": "3615680"
  },
  {
    "text": "now the classic way to fix this is to add a load balancer so let's add a load balancer um we're",
    "start": "3615680",
    "end": "3621920"
  },
  {
    "text": "going to add a load balancer variable and it's just going to point to version 1 servers or version 2 service",
    "start": "3621920",
    "end": "3628160"
  },
  {
    "text": "so the load balancer initially starts to it starts pointing uh at version one service so what do you",
    "start": "3628160",
    "end": "3635040"
  },
  {
    "text": "mean by the online servers well it depends on the load balancer if the load balance says version one it's gonna all the online servers are",
    "start": "3635040",
    "end": "3641440"
  },
  {
    "text": "version one service and if the if it's not version one then all the online servers are version two",
    "start": "3641440",
    "end": "3646559"
  },
  {
    "text": "service so that's our very crude model of a load balancer that's about as comp you know it's a",
    "start": "3646559",
    "end": "3652319"
  },
  {
    "text": "very simplistic model but it's enough to check our logic okay now when does it switch over to version",
    "start": "3652319",
    "end": "3658640"
  },
  {
    "text": "two well when one server manages to switch over to version two",
    "start": "3658640",
    "end": "3663920"
  },
  {
    "text": "we can then switch the entire load balancer over to point to the version two pool so the load back as soon as one of them",
    "start": "3663920",
    "end": "3670319"
  },
  {
    "text": "successfully upgrades we can start pointing the load balancer that one and then all the other ones can upgrade and they're in their own time",
    "start": "3670319",
    "end": "3676640"
  },
  {
    "text": "so we switch over when one of them has finished upgrading so if we run this script with the load",
    "start": "3676640",
    "end": "3682000"
  },
  {
    "text": "balancer logic everything still work the previous ones still work which is important to check and the same version works",
    "start": "3682000",
    "end": "3687680"
  },
  {
    "text": "so all our constraints all our properties are true for the entire system and i have a lot",
    "start": "3687680",
    "end": "3693040"
  },
  {
    "text": "of confidence that this is a good design i can now code this and put it into production you know",
    "start": "3693040",
    "end": "3698400"
  },
  {
    "text": "with with high confidence so that's great so this is the um i'm just going to go a few minutes over",
    "start": "3698400",
    "end": "3703680"
  },
  {
    "text": "sorry the sketch is complete uh you can think of tla plus as agile modeling like it just took a few minutes",
    "start": "3703680",
    "end": "3709680"
  },
  {
    "text": "to do that sketch and it saves you know 10 minutes of doing a sketch as opposed to a few hours or a few weeks of programming",
    "start": "3709680",
    "end": "3715839"
  },
  {
    "text": "definitely a good thing um much much more confidence so some common questions before i finish",
    "start": "3715839",
    "end": "3721920"
  },
  {
    "text": "up um how do you handle failures well that's easy you just add failure cases so",
    "start": "3721920",
    "end": "3727440"
  },
  {
    "text": "if the upgrade failed how would i model that well i just add a state called upgrade failed rather than you know and we have",
    "start": "3727440",
    "end": "3733920"
  },
  {
    "text": "to handle all those cases too and a very common question is how does this convert code",
    "start": "3733920",
    "end": "3739440"
  },
  {
    "text": "and the answer is it doesn't this is not a code generator this is a tool for thinking just like an architectural model is not",
    "start": "3739440",
    "end": "3746000"
  },
  {
    "text": "a blueprint uh it's a tool for thinking about whether you've got the right thing it's really about having",
    "start": "3746000",
    "end": "3752000"
  },
  {
    "text": "confidence so just like an architectural model it's a way of checking are you doing the",
    "start": "3752000",
    "end": "3757280"
  },
  {
    "text": "right thing before you spend a lot of time doing the implementation so to finish up tla and one thing is not that scary",
    "start": "3757280",
    "end": "3765280"
  },
  {
    "text": "it looks a bit scary when you look at the code but the concepts are actually pretty straightforward think of it as agile modeling and you'll",
    "start": "3765280",
    "end": "3771359"
  },
  {
    "text": "be doing really well and i think if you're doing any kind of concert concurrency systems it's kind of really important",
    "start": "3771359",
    "end": "3777200"
  },
  {
    "text": "to use it check it out um having a good toolbox in your development arsenal is a good",
    "start": "3777200",
    "end": "3783280"
  },
  {
    "text": "thing to have um tla plus can do a lot more than i show today it can do model checking but it can also",
    "start": "3783280",
    "end": "3789920"
  },
  {
    "text": "do refinements it can do proofs you can do a lot of stuff i just touched the scrape",
    "start": "3789920",
    "end": "3795039"
  },
  {
    "text": "the surface today uh for more information there's a very good page tla plus home page it's got a video it's got a massive book",
    "start": "3795039",
    "end": "3801680"
  },
  {
    "text": "a lot of papers and there's also learn tla.com website and there's a book",
    "start": "3801680",
    "end": "3807200"
  },
  {
    "text": "called practical tla by hillel wayne and he also does trainings so you want someone to train your team",
    "start": "3807200",
    "end": "3813119"
  },
  {
    "text": "in cla plus contact him and i'm sure he would be happy to do that",
    "start": "3813119",
    "end": "3818160"
  },
  {
    "text": "so thanks very much i will put the slides up on my website f sharp on profit",
    "start": "3818160",
    "end": "3824559"
  },
  {
    "text": "tla plus and um if you are interested in other kinds of things i have a book the",
    "start": "3824559",
    "end": "3829920"
  },
  {
    "text": "main modelling made functional which has nothing to do with this but i have to promote it anyway because i'm an author and that's what",
    "start": "3829920",
    "end": "3835039"
  },
  {
    "text": "authors do but um please feel free to contact me on twitter or contact me on the slack",
    "start": "3835039",
    "end": "3840480"
  },
  {
    "text": "the ndc slack afterwards i'm happy to stay around ask questions and um thank you very much and uh see",
    "start": "3840480",
    "end": "3846400"
  },
  {
    "text": "you next time",
    "start": "3846400",
    "end": "3849680"
  }
]