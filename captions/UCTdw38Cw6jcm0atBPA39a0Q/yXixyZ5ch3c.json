[
  {
    "text": "well hello everyone thank you for joining this webinar this session is",
    "start": "4630",
    "end": "11510"
  },
  {
    "text": "going to be about get just to check - that you are on the on the right session and yeah let's just go right ahead if",
    "start": "11510",
    "end": "21410"
  },
  {
    "text": "you have any questions you can write them on slide oh and I'll reserve some",
    "start": "21410",
    "end": "26989"
  },
  {
    "text": "time at the end to answer them alright let's get started my name is Enrico",
    "start": "26989",
    "end": "32660"
  },
  {
    "text": "campidoglio I work as a freelancer this is me freelancing from home especially",
    "start": "32660",
    "end": "38030"
  },
  {
    "text": "these days but we're not here to talk about me we are here to talk about git",
    "start": "38030",
    "end": "45879"
  },
  {
    "text": "and in particular we want to see that so",
    "start": "46270",
    "end": "52040"
  },
  {
    "text": "we know that learning it today is pretty easy you know there are books there are",
    "start": "52040",
    "end": "57739"
  },
  {
    "text": "online courses there are tutorials hectare 11 podcasts about git so you can",
    "start": "57739",
    "end": "66320"
  },
  {
    "text": "safely say that it has never been a better time to learn it",
    "start": "66320",
    "end": "71650"
  },
  {
    "text": "however while everybody is busy telling you how it works there there isn't that",
    "start": "71650",
    "end": "80150"
  },
  {
    "text": "much guidance about how to use git well while you're working with others",
    "start": "80150",
    "end": "88630"
  },
  {
    "text": "but you know it's like learning to play the piano so you you learn how to play",
    "start": "88780",
    "end": "94790"
  },
  {
    "text": "individual notes but then you're not able to play a full song so what we need",
    "start": "94790",
    "end": "102440"
  },
  {
    "text": "is guidance help but then you might wonder ok why'd why would you need help",
    "start": "102440",
    "end": "110180"
  },
  {
    "text": "in using a version control system and you might be right asking that",
    "start": "110180",
    "end": "116700"
  },
  {
    "text": "question because you know traditional source control systems like CVS and perforce subversion and even TFS they",
    "start": "116700",
    "end": "126150"
  },
  {
    "text": "were they were pretty much telling you how to use them by virtue of their",
    "start": "126150",
    "end": "131370"
  },
  {
    "text": "design so you didn't really have that much choice on how to do version control",
    "start": "131370",
    "end": "137790"
  },
  {
    "text": "it was dictated by the version control system get on the other hand doesn't",
    "start": "137790",
    "end": "144270"
  },
  {
    "text": "really tell you how to use it it's it",
    "start": "144270",
    "end": "150690"
  },
  {
    "text": "says it's writing to in the in the name it is just a Content tracker",
    "start": "150690",
    "end": "156380"
  },
  {
    "text": "it doesn't really care how you you use",
    "start": "156380",
    "end": "161610"
  },
  {
    "text": "it in the context of a version control system so it's more like whatever works",
    "start": "161610",
    "end": "167940"
  },
  {
    "text": "for you and this leaves a wide gap in in",
    "start": "167940",
    "end": "175830"
  },
  {
    "text": "how in how people are using it because there is no defined way but then the",
    "start": "175830",
    "end": "183269"
  },
  {
    "text": "question becomes okay if there is no well-defined way to use git and you can use it pretty much any",
    "start": "183269",
    "end": "191190"
  },
  {
    "text": "way you like how do you know that you're using it properly or how do you know",
    "start": "191190",
    "end": "196260"
  },
  {
    "text": "that you're getting the most value out of it well the only thing you can do is",
    "start": "196260",
    "end": "202940"
  },
  {
    "text": "observe what others are doing with git what works for them and see if any of",
    "start": "202940",
    "end": "211049"
  },
  {
    "text": "that applies to you and this is exactly what I've done for like for a few years",
    "start": "211049",
    "end": "217590"
  },
  {
    "text": "now I've been working with lots of different teams and lots of different projects and I've observed how different",
    "start": "217590",
    "end": "227220"
  },
  {
    "text": "ways of using git has impacted these teams and these projects and I've been",
    "start": "227220",
    "end": "232319"
  },
  {
    "text": "basically writing writing this all down because it's good stuff and the kind of",
    "start": "232319",
    "end": "239069"
  },
  {
    "text": "overtime distilled it into a set of guidance so what is this talk about",
    "start": "239069",
    "end": "247140"
  },
  {
    "text": "this talk is about equal a collection of habits and ideas that I've collected",
    "start": "247140",
    "end": "255150"
  },
  {
    "text": "from working with people who are really good at using it to improve the workflow",
    "start": "255150",
    "end": "261930"
  },
  {
    "text": "and when I talk about using it I don't mean just in the context of a team but",
    "start": "261930",
    "end": "270390"
  },
  {
    "text": "also on an individual level so these are habits and ideas they work both",
    "start": "270390",
    "end": "276330"
  },
  {
    "text": "individually and as a group so let's get",
    "start": "276330",
    "end": "282419"
  },
  {
    "text": "started so I just mentioned that you can use get a kind of at two levels on your",
    "start": "282419",
    "end": "289530"
  },
  {
    "text": "own like on your own machine and while collaborating with others so it makes sense to divide these ideas and habits",
    "start": "289530",
    "end": "297810"
  },
  {
    "text": "and techniques into two kinds the what I call personal workflows there is things",
    "start": "297810",
    "end": "304710"
  },
  {
    "text": "you do with get when you are on your own machine and things that you do while you",
    "start": "304710",
    "end": "310320"
  },
  {
    "text": "are working with others in a team so throughout this presentation I've been",
    "start": "310320",
    "end": "315660"
  },
  {
    "text": "I'll be dividing what I talk about into these two categories and to be more",
    "start": "315660",
    "end": "322919"
  },
  {
    "text": "specific I'll give you three techniques or habits that you can use on your own",
    "start": "322919",
    "end": "331400"
  },
  {
    "text": "individually and then I'll give you three ideas things to think about in the",
    "start": "331400",
    "end": "338370"
  },
  {
    "text": "context of a team while you are deciding how you want to use kit in your project",
    "start": "338370",
    "end": "344390"
  },
  {
    "text": "so in total six ideas and let's start with the individual workflows so let me",
    "start": "344390",
    "end": "353580"
  },
  {
    "text": "jump over what I have here I have slides on the right well my right might be your",
    "start": "353580",
    "end": "362430"
  },
  {
    "text": "left so we just keep that in mind and on the other on the other side I have a",
    "start": "362430",
    "end": "367500"
  },
  {
    "text": "terminal let me just briefly mention that I'll be using it from the command",
    "start": "367500",
    "end": "372720"
  },
  {
    "text": "line throughout this presentation however most of the things I'll be talking about they apply just as well if",
    "start": "372720",
    "end": "380220"
  },
  {
    "text": "you're use get from a graphical user interface and when I talk about something that only",
    "start": "380220",
    "end": "386250"
  },
  {
    "text": "applies to the command line I'll I'll say it so the first habit or a good thing to do",
    "start": "386250",
    "end": "396330"
  },
  {
    "text": "at a individual level well using we'd get is to get comfortable now we know",
    "start": "396330",
    "end": "406050"
  },
  {
    "text": "that it is a pretty complicated tool to use already so there is no reason to",
    "start": "406050",
    "end": "412770"
  },
  {
    "text": "make it any harder to use than it already is and this means configuring it configure",
    "start": "412770",
    "end": "420000"
  },
  {
    "text": "your environment so that it is a comfortable tool to use so what follows",
    "start": "420000",
    "end": "428280"
  },
  {
    "text": "are a series of settings that I regularly apply on my get installation",
    "start": "428280",
    "end": "436140"
  },
  {
    "text": "if I'm on a new project or a new computer and they really help using it",
    "start": "436140",
    "end": "441810"
  },
  {
    "text": "more effectively so the first one is and this applies if you're using it from the",
    "start": "441810",
    "end": "447480"
  },
  {
    "text": "command line is to use a get aware plant that it there are a bunch of utilities",
    "start": "447480",
    "end": "454200"
  },
  {
    "text": "that basically enrich your console your shell prompt with information that are",
    "start": "454200",
    "end": "460140"
  },
  {
    "text": "specific to your repository like for example which branch you're on how many files you've changed if there are any",
    "start": "460140",
    "end": "466320"
  },
  {
    "text": "conflicts and these of course depend on which command line prompt you're using",
    "start": "466320",
    "end": "472500"
  },
  {
    "text": "so if you're using PowerShell I'll recommend using a utility called push",
    "start": "472500",
    "end": "479760"
  },
  {
    "text": "get if you are using Linux or if you're just using Linux on Windows I am using",
    "start": "479760",
    "end": "488070"
  },
  {
    "text": "bash then bash get prompt is a really good one and if you're looking for",
    "start": "488070",
    "end": "495390"
  },
  {
    "text": "something cross-platform then is my personal favorite is starship and that's",
    "start": "495390",
    "end": "502380"
  },
  {
    "text": "what you're being looking at on the other side on the terminal starship is a",
    "start": "502380",
    "end": "508530"
  },
  {
    "text": "cross-platform Ghita where from and as a bonus it's also written in rust",
    "start": "508530",
    "end": "515700"
  },
  {
    "text": "so it doesn't get any cooler than that",
    "start": "515700",
    "end": "520979"
  },
  {
    "text": "yeah so having a get aware prompt next one is having some pretty dips so if",
    "start": "521370",
    "end": "530170"
  },
  {
    "text": "you're using it you'll be looking well if you see source control in general you'll be looking at a lot of disk and",
    "start": "530170",
    "end": "538890"
  },
  {
    "text": "it makes sense to make them as readable as possible and this means installing a",
    "start": "538890",
    "end": "547870"
  },
  {
    "text": "utility that code it's called deep so fancy it's an NPM module and what it",
    "start": "547870",
    "end": "555790"
  },
  {
    "text": "does is that it accepts input it accepts a universal diff in text format and it",
    "start": "555790",
    "end": "565180"
  },
  {
    "text": "removes all the noise and makes it basically pretty to look at",
    "start": "565180",
    "end": "570550"
  },
  {
    "text": "so let me show you what I mean after you have installed it so you say MPM install",
    "start": "570550",
    "end": "577020"
  },
  {
    "text": "g diff so fancy which already done what",
    "start": "577020",
    "end": "582279"
  },
  {
    "text": "you do is that you configure your get installation to basically pipe all the",
    "start": "582279",
    "end": "588279"
  },
  {
    "text": "diff output through this so fancy so you say git config core it's called pager in",
    "start": "588279",
    "end": "596279"
  },
  {
    "text": "in get parlance and you say I'm gonna pass it to diff so fancy and after this",
    "start": "596279",
    "end": "604660"
  },
  {
    "text": "Oh fancy it makes sense to page it to something like less excuse me to give",
    "start": "604660",
    "end": "611860"
  },
  {
    "text": "you basically the ability to scroll up and down in the indeed if text and what",
    "start": "611860",
    "end": "619209"
  },
  {
    "text": "I usually do is that I send three option to less the first one called are this",
    "start": "619209",
    "end": "626589"
  },
  {
    "text": "one make it will tell less to print control characters for example like line",
    "start": "626589",
    "end": "633430"
  },
  {
    "text": "endings and those things you absolutely want to see in your diff when you're",
    "start": "633430",
    "end": "638440"
  },
  {
    "text": "looking at differences between two files if just the line endings changed you want to see that",
    "start": "638440",
    "end": "643810"
  },
  {
    "text": "the next one is called F and what this does is it tells les that if the if",
    "start": "643810",
    "end": "649839"
  },
  {
    "text": "you're looking at fits in one screen then you can exit immediately instead of",
    "start": "649839",
    "end": "655089"
  },
  {
    "text": "having you press Q every time to to exit the third option is X and what this does",
    "start": "655089",
    "end": "663339"
  },
  {
    "text": "is it basically clears the screen before",
    "start": "663339",
    "end": "670930"
  },
  {
    "text": "printing the div so after you've done all this you can basically say div for",
    "start": "670930",
    "end": "676809"
  },
  {
    "text": "example in this sample process I'm looking at if I want to DIF the commit",
    "start": "676809",
    "end": "682269"
  },
  {
    "text": "that is before head compared to head I get this let me just",
    "start": "682269",
    "end": "688059"
  },
  {
    "text": "show you how it looks without when you say no pager div head so this is telling",
    "start": "688059",
    "end": "696790"
  },
  {
    "text": "get to just skip the pager so this is how it usually looks like usually looks",
    "start": "696790",
    "end": "703959"
  },
  {
    "text": "like on the bottom part and on the top part is through diff so fancy so if you",
    "start": "703959",
    "end": "711370"
  },
  {
    "text": "don't think this is fancy I don't know what you think is fancy you see it even highlights the exact character that",
    "start": "711370",
    "end": "717399"
  },
  {
    "text": "changed between the two lines while the regular diff does not and it also removes the plus and minus and it makes",
    "start": "717399",
    "end": "723670"
  },
  {
    "text": "T the header much more concise so pretty diffs is something that effective teams",
    "start": "723670",
    "end": "731199"
  },
  {
    "text": "and effective get users absolutely have the next one is and it's created - this",
    "start": "731199",
    "end": "739500"
  },
  {
    "text": "is making your patches more readable so by default when you're looking at a",
    "start": "739500",
    "end": "745959"
  },
  {
    "text": "patch it will show you and let me let me just show you again it will show you",
    "start": "745959",
    "end": "753160"
  },
  {
    "text": "exactly two lines before and after it's change",
    "start": "753160",
    "end": "759760"
  },
  {
    "text": "now sometimes when you're looking at ad if you want more context to be able to",
    "start": "759760",
    "end": "764769"
  },
  {
    "text": "determine a do for example which function this line is so you can tell",
    "start": "764769",
    "end": "772209"
  },
  {
    "text": "get to show you more lines around each diff by setting the diff context option",
    "start": "772209",
    "end": "778829"
  },
  {
    "text": "so in this case so by default you say diphthong text the default is to if you",
    "start": "778829",
    "end": "788199"
  },
  {
    "text": "set it to 4 and then basically run the same command again now you see that I",
    "start": "788199",
    "end": "794769"
  },
  {
    "text": "have four lines around each each the da around the difference and this key of",
    "start": "794769",
    "end": "801070"
  },
  {
    "text": "course you can set it to whatever you want and this allows you to to have more",
    "start": "801070",
    "end": "806980"
  },
  {
    "text": "information around its difference but I found that for is Allah is a number that",
    "start": "806980",
    "end": "812769"
  },
  {
    "text": "you know doesn't make the DIF too long but usually it's enough to to make sense",
    "start": "812769",
    "end": "818649"
  },
  {
    "text": "of a individual diff all right let's move on to the next one",
    "start": "818649",
    "end": "826230"
  },
  {
    "text": "whitespace now as programmers we know that no white space matters probably",
    "start": "826230",
    "end": "832589"
  },
  {
    "text": "much more than any other part of life so you absolutely want to handle it",
    "start": "832589",
    "end": "839050"
  },
  {
    "text": "correctly and get has a bunch of built-in functionality to do exactly that",
    "start": "839050",
    "end": "844620"
  },
  {
    "text": "for example it can tell you if you have some invalid whitespace in your source",
    "start": "844620",
    "end": "851620"
  },
  {
    "text": "code all you have to do is tell it what should be considered invalid whitespace",
    "start": "851620",
    "end": "858850"
  },
  {
    "text": "through the core dot whitespace option so for example I usually set it to core",
    "start": "858850",
    "end": "867180"
  },
  {
    "text": "whitespace I set it to blank at end of line that means I don't want any spaces",
    "start": "867180",
    "end": "873970"
  },
  {
    "text": "at the end of a line I don't want any spaces at the end of the file either and",
    "start": "873970",
    "end": "880089"
  },
  {
    "text": "this this is not getting into the indentation but I don't want any tabs in",
    "start": "880089",
    "end": "886600"
  },
  {
    "text": "my indentation I want you spaces instead as it should be right so this means that if let me just open",
    "start": "886600",
    "end": "896600"
  },
  {
    "text": "up the source code file here and let's",
    "start": "896600",
    "end": "902090"
  },
  {
    "text": "make a change let's do this we change",
    "start": "902090",
    "end": "910250"
  },
  {
    "text": "this to we change the string and then we'll also add a bunch of white space at",
    "start": "910250",
    "end": "916460"
  },
  {
    "text": "the end all right so now you see that starship is showing me that I have one",
    "start": "916460",
    "end": "922760"
  },
  {
    "text": "modified files already without having to do git status which is pretty nice and",
    "start": "922760",
    "end": "928030"
  },
  {
    "text": "if I do get diff - - check having set",
    "start": "928030",
    "end": "936320"
  },
  {
    "text": "the core white space option it will show me ah you have trailing white space and",
    "start": "936320",
    "end": "943840"
  },
  {
    "text": "it shows me exactly where in the file now of course I have the option to fix",
    "start": "943840",
    "end": "950810"
  },
  {
    "text": "it but I can also just go ahead and commit it so let's do that because I",
    "start": "950810",
    "end": "956990"
  },
  {
    "text": "want to show you another thing you can do with white space you say git commit all with the message some invalid white",
    "start": "956990",
    "end": "965900"
  },
  {
    "text": "space so now I've committed some invalid white space one thing it can do for you",
    "start": "965900",
    "end": "974210"
  },
  {
    "text": "is that it can automatically fix any whitespace errors by doing a rebase yre",
    "start": "974210",
    "end": "983570"
  },
  {
    "text": "base you might wonder well that's because when you're doing a rebase it will apply every change that is made in",
    "start": "983570",
    "end": "992270"
  },
  {
    "text": "a commit one at the time on top of the previous commit and that's a perfect",
    "start": "992270",
    "end": "997760"
  },
  {
    "text": "time to make any modifications to the source file as it applies the next",
    "start": "997760",
    "end": "1003340"
  },
  {
    "text": "commit so in this case I want to say a rebase and let's start - commits before",
    "start": "1003340",
    "end": "1012640"
  },
  {
    "text": "my latest one with the with the invalid whitespace actually before we do that",
    "start": "1012640",
    "end": "1018850"
  },
  {
    "text": "let me show you how it looks like the diff so this is the commit I just",
    "start": "1018850",
    "end": "1024089"
  },
  {
    "text": "made with the with the extra white space here so we sue a git rebase to commit",
    "start": "1024089",
    "end": "1032150"
  },
  {
    "text": "before my latest one and then I say white space equals fix so you see that",
    "start": "1032150",
    "end": "1039750"
  },
  {
    "text": "git has no rewinded head to two commits ago and then it applied the latest two",
    "start": "1039750",
    "end": "1046740"
  },
  {
    "text": "commits and now if I look at my lathe the latest one you see that the white",
    "start": "1046740",
    "end": "1052410"
  },
  {
    "text": "space is gone so yeah absolutely enable this in your project and use it because",
    "start": "1052410",
    "end": "1060300"
  },
  {
    "text": "there's nothing worse than having real changes mixed up with a lot of white space errors all right next up is",
    "start": "1060300",
    "end": "1072860"
  },
  {
    "text": "conflict handling of course conflict IA are a fact of life and especially when",
    "start": "1072860",
    "end": "1079890"
  },
  {
    "text": "you're doing source control with other people and get has some pretty nice",
    "start": "1079890",
    "end": "1086460"
  },
  {
    "text": "built-in facilities to let you handle conflict now by default let me show you",
    "start": "1086460",
    "end": "1095220"
  },
  {
    "text": "what I have here I have two I have two branches now master that I'm on and then",
    "start": "1095220",
    "end": "1102120"
  },
  {
    "text": "I have one cool feature now I know that there is a conflict in that feature",
    "start": "1102120",
    "end": "1107250"
  },
  {
    "text": "branch so let's try to merge feature on",
    "start": "1107250",
    "end": "1112710"
  },
  {
    "text": "master and I get a conflict now usually",
    "start": "1112710",
    "end": "1118580"
  },
  {
    "text": "what get will do is that it will show you what each side of the conflict how a",
    "start": "1118580",
    "end": "1127429"
  },
  {
    "text": "particular line that is conflicting it will show you how it looks like on",
    "start": "1127429",
    "end": "1132690"
  },
  {
    "text": "either side so you can decide you can decide which one you want so on the one",
    "start": "1132690",
    "end": "1139590"
  },
  {
    "text": "side I have a comma here this is the conflicting line",
    "start": "1139590",
    "end": "1146779"
  },
  {
    "text": "and the other side I don't have the comma and they remove the exclamation",
    "start": "1146880",
    "end": "1153330"
  },
  {
    "text": "mark over here so at this point I have to decide which one I want so this is",
    "start": "1153330",
    "end": "1159870"
  },
  {
    "text": "good in many cases but sometimes when you are trying to decide which side of",
    "start": "1159870",
    "end": "1165900"
  },
  {
    "text": "the conflict you want to to choose it's helpful to see how did this line look",
    "start": "1165900",
    "end": "1173490"
  },
  {
    "text": "like before the conflict so that means how did this line look like on the",
    "start": "1173490",
    "end": "1180090"
  },
  {
    "text": "latest commit before the two that are conflicting and the common parent so",
    "start": "1180090",
    "end": "1189410"
  },
  {
    "text": "this is called a three-way merge and this is one of the best features in get",
    "start": "1189410",
    "end": "1195630"
  },
  {
    "text": "is that it has a really good facilities to do a so-called three-way merge why three-way well because you are comparing",
    "start": "1195630",
    "end": "1203160"
  },
  {
    "text": "two sides not only against each other but you're comparing them to their common parent so how do you do that you",
    "start": "1203160",
    "end": "1211320"
  },
  {
    "text": "tell git that you want a conflict style you set it to d3 now by default you say",
    "start": "1211320",
    "end": "1220610"
  },
  {
    "text": "merge conflict style by default this is set to merge which is two way merge not",
    "start": "1220610",
    "end": "1227610"
  },
  {
    "text": "three way and use we can set it to merge",
    "start": "1227610",
    "end": "1232980"
  },
  {
    "text": "dot conflict style we set it to d3 now",
    "start": "1232980",
    "end": "1238410"
  },
  {
    "text": "we just abort this this merge and we'll do it again with the new option so a",
    "start": "1238410",
    "end": "1247680"
  },
  {
    "text": "merge feature now I still have the conflict and the let's look at how the",
    "start": "1247680",
    "end": "1253830"
  },
  {
    "text": "file looks like now and you see that now I have a three-way merge so not only am",
    "start": "1253830",
    "end": "1259320"
  },
  {
    "text": "i comparing the two lines but I'm also comparing them against how it looked like before so you see before didn't",
    "start": "1259320",
    "end": "1266850"
  },
  {
    "text": "have a comma but it had the exclamation mark and then this side changed it by",
    "start": "1266850",
    "end": "1272070"
  },
  {
    "text": "removing the summation mark and this side change it by removed by adding the comma and at this point of course I can",
    "start": "1272070",
    "end": "1277350"
  },
  {
    "text": "decide how I want to to resolve this conflict correct so",
    "start": "1277350",
    "end": "1285710"
  },
  {
    "text": "let's remove this one cool next up we",
    "start": "1285710",
    "end": "1292010"
  },
  {
    "text": "have something called global ignores global ignore so you know that every",
    "start": "1292010",
    "end": "1298370"
  },
  {
    "text": "repository has some files that you don't want to track and the you tell get to what files you don't want to track by",
    "start": "1298370",
    "end": "1304730"
  },
  {
    "text": "adding them to a dot get ignore file now this can get pretty repetitive",
    "start": "1304730",
    "end": "1313510"
  },
  {
    "text": "especially if you're working with a lot of the same so all your projects are using the same kind of programming",
    "start": "1313510",
    "end": "1319610"
  },
  {
    "text": "language or frameworks because they tend to have the same kind of temp files and files you don't want to track so a very",
    "start": "1319610",
    "end": "1327920"
  },
  {
    "text": "useful thing saying that many effective teams do is that they define a global ignore and they put it somewhere else on",
    "start": "1327920",
    "end": "1337640"
  },
  {
    "text": "their a file system like for example in the home directory and then you can tell get to read the get ignores instruction",
    "start": "1337640",
    "end": "1347240"
  },
  {
    "text": "from this global file as well as any additional digit ignores that you put",
    "start": "1347240",
    "end": "1353030"
  },
  {
    "text": "inside a particular repository so this is a dotnet core 3.1 project as you can",
    "start": "1353030",
    "end": "1361070"
  },
  {
    "text": "see starship is also telling me what kind of platform I am I'm working with",
    "start": "1361070",
    "end": "1367850"
  },
  {
    "text": "in this particular project and of course you don't want to track like the bina",
    "start": "1367850",
    "end": "1373730"
  },
  {
    "text": "knobs so let let me first show you how this repository looks like I have like a",
    "start": "1373730",
    "end": "1380270"
  },
  {
    "text": "source directory with a program then I have a project file now if we just build",
    "start": "1380270",
    "end": "1388400"
  },
  {
    "text": "it so this will create a bunch of ooh not",
    "start": "1388400",
    "end": "1395559"
  },
  {
    "text": "working but let's worry about that for a moment because we're gonna look at other",
    "start": "1395559",
    "end": "1400870"
  },
  {
    "text": "things you can do to solve these kind of problems but so nevermind that is not working the important thing is that it",
    "start": "1400870",
    "end": "1408190"
  },
  {
    "text": "has created bean and herbs directory",
    "start": "1408190",
    "end": "1413290"
  },
  {
    "text": "that you absolutely do not want to track and as you can see I can see that there",
    "start": "1413290",
    "end": "1419980"
  },
  {
    "text": "are some untracked files now in my working directory so for example the object now object bin are common to all",
    "start": "1419980",
    "end": "1428470"
  },
  {
    "text": "those not project so this is a good candidate to put in the global ignore file so let's so I have it in my home",
    "start": "1428470",
    "end": "1436780"
  },
  {
    "text": "directory if you're on Windows that will be C users and then then your username",
    "start": "1436780",
    "end": "1443760"
  },
  {
    "text": "so get ignore underscore global and",
    "start": "1443760",
    "end": "1449160"
  },
  {
    "text": "right now it just has these two files these two entries I just tell it that I",
    "start": "1449160",
    "end": "1454570"
  },
  {
    "text": "don't want to track any bin or object directories and never ever so I just put",
    "start": "1454570",
    "end": "1461260"
  },
  {
    "text": "them in the global one and now as you can see I didn't have to do anything and it just shows them as ignored and that's",
    "start": "1461260",
    "end": "1471220"
  },
  {
    "text": "because of course I set the excludes files exclude XCore exclude files what",
    "start": "1471220",
    "end": "1484330"
  },
  {
    "text": "is it called screwed files it's called in the global ok let me just find it",
    "start": "1484330",
    "end": "1492730"
  },
  {
    "text": "config global list grab exclude there it",
    "start": "1492730",
    "end": "1500200"
  },
  {
    "text": "is a core dot excludes file and file sorry",
    "start": "1500200",
    "end": "1505540"
  },
  {
    "text": "and you give it the path to where it is alright",
    "start": "1505540",
    "end": "1512830"
  },
  {
    "text": "next one is a little bit of an unknown feature so if you're using tags if your",
    "start": "1512830",
    "end": "1519550"
  },
  {
    "text": "team are using tags to version your software which you should it might be",
    "start": "1519550",
    "end": "1524740"
  },
  {
    "text": "frustrating that git doesn't automatically push new tags when you do",
    "start": "1524740",
    "end": "1530020"
  },
  {
    "text": "a push operation if you want to do that you'll have to explicitly push them or",
    "start": "1530020",
    "end": "1535600"
  },
  {
    "text": "add the follow tags option well one of the things that I've seen most teams do",
    "start": "1535600",
    "end": "1542940"
  },
  {
    "text": "when you're working with tags is that they enable the automatic push of new",
    "start": "1542940",
    "end": "1548980"
  },
  {
    "text": "tags by setting the config push dot follow tags option to true and that",
    "start": "1548980",
    "end": "1555640"
  },
  {
    "text": "every time you create a brand new tag and you do a push it will automatically",
    "start": "1555640",
    "end": "1561220"
  },
  {
    "text": "now push the commit and the title as well so not only fans here but something that you should be aware of okay so the",
    "start": "1561220",
    "end": "1571600"
  },
  {
    "text": "this is all the thing I showed you right now is in the first of these three",
    "start": "1571600",
    "end": "1578280"
  },
  {
    "text": "individual workflows techniques the next",
    "start": "1578280",
    "end": "1584620"
  },
  {
    "text": "one is to craft your history so something that I've seen effective teams",
    "start": "1584620",
    "end": "1593050"
  },
  {
    "text": "do is that they really take care of their history that means making sure",
    "start": "1593050",
    "end": "1598840"
  },
  {
    "text": "that the history is readable and that it clearly is a track of how the software",
    "start": "1598840",
    "end": "1607240"
  },
  {
    "text": "how the source code change throughout the project and why it change in the way it did so it must be a clear record of",
    "start": "1607240",
    "end": "1614470"
  },
  {
    "text": "what happened and that means creating good commits now now you might say okay",
    "start": "1614470",
    "end": "1621700"
  },
  {
    "text": "yeah but what's a good commit well after years of reflection I eventually arrived",
    "start": "1621700",
    "end": "1630940"
  },
  {
    "text": "at the conclusion that good commits are acid now if you work with databases you",
    "start": "1630940",
    "end": "1637870"
  },
  {
    "text": "might recognize this acronym however they in the contest of get it takes a",
    "start": "1637870",
    "end": "1643390"
  },
  {
    "text": "whole different meaning so what are seed commits well let's start with the a",
    "start": "1643390",
    "end": "1649030"
  },
  {
    "text": "the a is good commits are autonomous that means commit shall make a logical",
    "start": "1649030",
    "end": "1656830"
  },
  {
    "text": "change that is independent from other commits okay that makes sense but how do",
    "start": "1656830",
    "end": "1663790"
  },
  {
    "text": "you do it in practice them yeah well you use something called a patch add or a",
    "start": "1663790",
    "end": "1670780"
  },
  {
    "text": "parts commit what does it mean for example let's say that I want to open up",
    "start": "1670780",
    "end": "1676030"
  },
  {
    "text": "this file and I'm in this file and I'm working and I want to make a couple of",
    "start": "1676030",
    "end": "1682059"
  },
  {
    "text": "changes for example I know that this is probably not used or actually it's not used so let's remove it so I removed a",
    "start": "1682059",
    "end": "1690790"
  },
  {
    "text": "using statement while at the same time maybe I want to add an exclamation mark",
    "start": "1690790",
    "end": "1698590"
  },
  {
    "text": "over here so I made two kinds of changes",
    "start": "1698590",
    "end": "1703289"
  },
  {
    "text": "one where I change the string that's visible to the user and then I removed",
    "start": "1703860",
    "end": "1710440"
  },
  {
    "text": "something that is basically just a clean up now these two things are typically",
    "start": "1710440",
    "end": "1715929"
  },
  {
    "text": "things that you want into two separate commits because while this affects the",
    "start": "1715929",
    "end": "1721720"
  },
  {
    "text": "UI of your program this one is completely visible to only programmers",
    "start": "1721720",
    "end": "1729190"
  },
  {
    "text": "and you want to treat them individually so what do you do let's save this file",
    "start": "1729190",
    "end": "1735669"
  },
  {
    "text": "if do a diff of course I see the type two differences what I want to do is",
    "start": "1735669",
    "end": "1741130"
  },
  {
    "text": "that I want to commit them individually even though they are in the same file so what do I do is that instead of just",
    "start": "1741130",
    "end": "1747580"
  },
  {
    "text": "doing add I say add P or patch and what",
    "start": "1747580",
    "end": "1755380"
  },
  {
    "text": "this allows me to do is that git is gonna ask me okay I see that you have two changes in this file do you want to",
    "start": "1755380",
    "end": "1762760"
  },
  {
    "text": "commit this one and you say no what",
    "start": "1762760",
    "end": "1769660"
  },
  {
    "text": "about this you won't commit this one and I say yes absolutely has commit that one so now if I do get status you see that",
    "start": "1769660",
    "end": "1777250"
  },
  {
    "text": "my file is at the same time part of it is staged and part of it is still in my",
    "start": "1777250",
    "end": "1783380"
  },
  {
    "text": "working directory and if I want to see what's only staged I say get de the",
    "start": "1783380",
    "end": "1789710"
  },
  {
    "text": "thief - - cashed and that's what I've",
    "start": "1789710",
    "end": "1795080"
  },
  {
    "text": "staged and if I want to see what's in my working directory I say just get if and",
    "start": "1795080",
    "end": "1801730"
  },
  {
    "text": "graphical get clients will also show this so it's going to be pretty clear",
    "start": "1801730",
    "end": "1807529"
  },
  {
    "text": "what rest what you have staged and what we have not staged so this point I can",
    "start": "1807529",
    "end": "1813620"
  },
  {
    "text": "say git commit commit and then I say I",
    "start": "1813620",
    "end": "1820720"
  },
  {
    "text": "changed the read line string and then at",
    "start": "1820720",
    "end": "1828440"
  },
  {
    "text": "this point I can just add the rest of the last two apart commit even if there",
    "start": "1828440",
    "end": "1834230"
  },
  {
    "text": "is just one just to show you how it works again so now we want to don't",
    "start": "1834230",
    "end": "1839870"
  },
  {
    "text": "commit this and say yes and then I say commit removes and unused import",
    "start": "1839870",
    "end": "1849789"
  },
  {
    "text": "statement and then so then I have a",
    "start": "1849789",
    "end": "1855860"
  },
  {
    "text": "logically separated my commit and notice that I didn't have to think about it as",
    "start": "1855860",
    "end": "1861799"
  },
  {
    "text": "I was editing my file it's something that I did afterwards so this is a very",
    "start": "1861799",
    "end": "1867409"
  },
  {
    "text": "big difference between get and other source control systems in that if you're using subversion or TFS you know that to",
    "start": "1867409",
    "end": "1874549"
  },
  {
    "text": "do this kind of thing you need to think ahead and do one change at a time check",
    "start": "1874549",
    "end": "1880610"
  },
  {
    "text": "in and then do the other change and you kind of had to keep that stuff in your head while in get I can just edit as I",
    "start": "1880610",
    "end": "1887690"
  },
  {
    "text": "want and at the time of commit then I can split them up so this frees me from having to think",
    "start": "1887690",
    "end": "1894049"
  },
  {
    "text": "about source control as I'm editing the file which is something to keep in mind",
    "start": "1894049",
    "end": "1900230"
  },
  {
    "text": "so autonomous commits the next is the C",
    "start": "1900230",
    "end": "1905360"
  },
  {
    "text": "and it stands for compatible as it commits are compatible in the sense that",
    "start": "1905360",
    "end": "1911269"
  },
  {
    "text": "they should not break the state of your project so you should be able to cherry",
    "start": "1911269",
    "end": "1917330"
  },
  {
    "text": "pick to to pick a commit and apply it in your branch without being afraid that",
    "start": "1917330",
    "end": "1923419"
  },
  {
    "text": "you should no brake tests or no longer compile but how do you make sure that every individual commit doesn't add any",
    "start": "1923419",
    "end": "1930980"
  },
  {
    "text": "errors well you have a couple of ways to do that first one is to use the stash",
    "start": "1930980",
    "end": "1937039"
  },
  {
    "text": "so stash you probably know what it is stash takes the files that are modified",
    "start": "1937039",
    "end": "1942440"
  },
  {
    "text": "in your working directory and saves them separately and put them in a kind of a",
    "start": "1942440",
    "end": "1949279"
  },
  {
    "text": "different location called the stash now I don't usually use the stash because problem with the stash is that it tends",
    "start": "1949279",
    "end": "1956240"
  },
  {
    "text": "to grow over time and then you're kind of select putting stuff in the closet and then suddenly you open it up add",
    "start": "1956240",
    "end": "1963169"
  },
  {
    "text": "stuff you know comes at you some but in",
    "start": "1963169",
    "end": "1969380"
  },
  {
    "text": "this case I use the stash to verify that my change do not break anything so for",
    "start": "1969380",
    "end": "1974419"
  },
  {
    "text": "example let me open up this file again and let's make a let's make a change for",
    "start": "1974419",
    "end": "1986779"
  },
  {
    "text": "example let's remove this the public and then let me open up another file for",
    "start": "1986779",
    "end": "1995179"
  },
  {
    "text": "example the project file let's let's rename this to hello world",
    "start": "1995179",
    "end": "2003380"
  },
  {
    "text": "this is just a project file perfect so now I have two modified files I want to",
    "start": "2003380",
    "end": "2011630"
  },
  {
    "text": "verify I want to commit to the program just by itself and the change in the",
    "start": "2011630",
    "end": "2017330"
  },
  {
    "text": "process file just by itself because I become it should be autonomous so how do I verify that my change doesn't break",
    "start": "2017330",
    "end": "2023750"
  },
  {
    "text": "anything well I add my the file I want to commit to the staging area so now",
    "start": "2023750",
    "end": "2032330"
  },
  {
    "text": "I've prepared my commit but I still have a lot of files I still have a file",
    "start": "2032330",
    "end": "2037370"
  },
  {
    "text": "modified in my working directory how do I get rid of that I say stash save and",
    "start": "2037370",
    "end": "2043520"
  },
  {
    "text": "then I pass the option keep index so what this does is that exactly what it",
    "start": "2043520",
    "end": "2049190"
  },
  {
    "text": "says it's gonna stash my project file that is in my working directory as",
    "start": "2049190",
    "end": "2054648"
  },
  {
    "text": "modified but it will not do anything with water I already said I'm about to",
    "start": "2054649",
    "end": "2062000"
  },
  {
    "text": "commit so let's do that and you see that now I just have my indexed mic my",
    "start": "2062000",
    "end": "2071600"
  },
  {
    "text": "state's file and my project file is stashed away so at this point I can run",
    "start": "2071600",
    "end": "2082129"
  },
  {
    "text": "the tests I can run the build script and I know that the only files that are in",
    "start": "2082130",
    "end": "2089389"
  },
  {
    "text": "my working directory are the files that are about to be committed so if everything works then I'm pretty I know",
    "start": "2089390",
    "end": "2096230"
  },
  {
    "text": "that it I haven't broken anything and when when I'm done well as philosophers",
    "start": "2096230",
    "end": "2103880"
  },
  {
    "text": "commit this what did I do oh yeah I removed a removes the public",
    "start": "2103880",
    "end": "2114830"
  },
  {
    "text": "key word good change and then I can",
    "start": "2114830",
    "end": "2120290"
  },
  {
    "text": "simply put back the changes from the stash we get - pop and now I have my practice",
    "start": "2120290",
    "end": "2127670"
  },
  {
    "text": "file back very powerful technique to use something that I use all the time and",
    "start": "2127670",
    "end": "2133130"
  },
  {
    "text": "something that I've seen a lot of teams do as well on an individual level but of",
    "start": "2133130",
    "end": "2140600"
  },
  {
    "text": "course this is adding a little bit of work to your workflow let me just get",
    "start": "2140600",
    "end": "2145820"
  },
  {
    "text": "rid of that change this is adding of some steps so what can you do if you",
    "start": "2145820",
    "end": "2153830"
  },
  {
    "text": "have already committed everything and you haven't used this technique so how can you ensure that everything that",
    "start": "2153830",
    "end": "2160010"
  },
  {
    "text": "every individual committed doesn't break your software meet rebase again rebase",
    "start": "2160010",
    "end": "2167990"
  },
  {
    "text": "is a kind of a jack-of-all-trades in get and get balance it does everything we",
    "start": "2167990",
    "end": "2174770"
  },
  {
    "text": "saw that it can fix the white space for you and it can also help you ensure that",
    "start": "2174770",
    "end": "2180860"
  },
  {
    "text": "every individual commit doesn't break your source code with something called",
    "start": "2180860",
    "end": "2186980"
  },
  {
    "text": "the exec option so what you can do is basically say during a rebase I won't",
    "start": "2186980",
    "end": "2195170"
  },
  {
    "text": "get to execute a command that I pass after each commit and how does it do",
    "start": "2195170",
    "end": "2203720"
  },
  {
    "text": "that well let me show you by turning it into an interactive commit well we can see the list of commits and so in this",
    "start": "2203720",
    "end": "2210530"
  },
  {
    "text": "case I don't have any tests unfortunately but I do have a build process Phi that I can build so what I'm",
    "start": "2210530",
    "end": "2218630"
  },
  {
    "text": "saying is that I want get to run the",
    "start": "2218630",
    "end": "2224360"
  },
  {
    "text": "that build after every commit which commits well let's start from the",
    "start": "2224360",
    "end": "2229610"
  },
  {
    "text": "beginning so I'm gonna say rebase route which means take all the commits that",
    "start": "2229610",
    "end": "2236570"
  },
  {
    "text": "are in this current branch and run does not build so what it does is that as you",
    "start": "2236570",
    "end": "2242810"
  },
  {
    "text": "see it basically append this line after every commit that I selected in the",
    "start": "2242810",
    "end": "2249920"
  },
  {
    "text": "range in this case everything so what I have to do now is just save",
    "start": "2249920",
    "end": "2254950"
  },
  {
    "text": "this file and get is gonna run the build automatically so the first one goes",
    "start": "2254950",
    "end": "2260170"
  },
  {
    "text": "through no problem second one fails as you saw earlier so right now I am on the",
    "start": "2260170",
    "end": "2266230"
  },
  {
    "text": "exact commit that broke the build and I can see that the problem is that the",
    "start": "2266230",
    "end": "2272500"
  },
  {
    "text": "console doesn't have a riddle Luna method so this is just a typo but you",
    "start": "2272500",
    "end": "2280210"
  },
  {
    "text": "see that it is telling me the execution of your program of your command has failed and we are at t commit that added",
    "start": "2280210",
    "end": "2288220"
  },
  {
    "text": "introduce the error commit fall of 16 so",
    "start": "2288220",
    "end": "2294119"
  },
  {
    "text": "let's look at this commit and indeed this is the commit that added the line",
    "start": "2294119",
    "end": "2300569"
  },
  {
    "text": "that created a problem so what can I do now I can open this program this source",
    "start": "2300569",
    "end": "2306640"
  },
  {
    "text": "code file I can add what fix the problem",
    "start": "2306640",
    "end": "2313059"
  },
  {
    "text": "basically let's take a look yeah I can even just",
    "start": "2313059",
    "end": "2321579"
  },
  {
    "text": "run the build script again just to make sure that everything works then I can",
    "start": "2321579",
    "end": "2327220"
  },
  {
    "text": "stage it and then I don't want to create a new commit but I want to basically",
    "start": "2327220",
    "end": "2332440"
  },
  {
    "text": "modify the committed I'm on right now so I say git commit amend and if you don't",
    "start": "2332440",
    "end": "2340779"
  },
  {
    "text": "want to change the message you can basically say no edit and now if I look",
    "start": "2340779",
    "end": "2348430"
  },
  {
    "text": "at the file I if I look at the commit I just it's like the other never happened",
    "start": "2348430",
    "end": "2354400"
  },
  {
    "text": "so at this point I can say get to the base continue and it will you know continue on through all the others",
    "start": "2354400",
    "end": "2361119"
  },
  {
    "text": "running the build oh now we have another problem but you have already seen the",
    "start": "2361119",
    "end": "2368650"
  },
  {
    "text": "drill so there is no point in doing it again otherwise we'll be here till tomorrow so just report everything so",
    "start": "2368650",
    "end": "2378220"
  },
  {
    "text": "rebase exact very good way to ensure that every commit does not break yeah",
    "start": "2378220",
    "end": "2384430"
  },
  {
    "text": "is compatible next one is the eye and that's incremental what's an incremental",
    "start": "2384430",
    "end": "2394059"
  },
  {
    "text": "commit well an incremental commit is a commit that shows clearly the",
    "start": "2394059",
    "end": "2399279"
  },
  {
    "text": "progression you have made with your changes what does it mean it means that",
    "start": "2399279",
    "end": "2407619"
  },
  {
    "text": "every commit should basically show you your thought process as you went through about your changes how do you ensure",
    "start": "2407619",
    "end": "2413980"
  },
  {
    "text": "that your commits are incremental well you use an interactively base so let me",
    "start": "2413980",
    "end": "2419980"
  },
  {
    "text": "show you again let's say that I want to push these latest three commits and what",
    "start": "2419980",
    "end": "2426160"
  },
  {
    "text": "while I'm here I can decide it you know this one should come before that one and",
    "start": "2426160",
    "end": "2434160"
  },
  {
    "text": "because this is the progress that I've made through my changes for example if",
    "start": "2434700",
    "end": "2440170"
  },
  {
    "text": "this was a this is a clean up and this is the thing I want to do first then I",
    "start": "2440170",
    "end": "2445359"
  },
  {
    "text": "want to make a change that is actually user related change and then maybe I",
    "start": "2445359",
    "end": "2452559"
  },
  {
    "text": "want well you know what this is also a clean up so let's move it also before so",
    "start": "2452559",
    "end": "2458710"
  },
  {
    "text": "I've removed remove and changed and",
    "start": "2458710",
    "end": "2462568"
  },
  {
    "text": "basically just I'm just reordering in my commit before I share them to show some",
    "start": "2463799",
    "end": "2469690"
  },
  {
    "text": "kind of logical progression this means",
    "start": "2469690",
    "end": "2475359"
  },
  {
    "text": "taking care of your history the last one is the DNA stands for documented so yeah",
    "start": "2475359",
    "end": "2481329"
  },
  {
    "text": "when commit messages commit messages do matter they matter a lot so let's make",
    "start": "2481329",
    "end": "2487450"
  },
  {
    "text": "sure that they explain not necessarily just what changed but why it did and let",
    "start": "2487450",
    "end": "2498010"
  },
  {
    "text": "me just show you what I mean so when you are writing a commit message there is a",
    "start": "2498010",
    "end": "2505270"
  },
  {
    "text": "well-defined format for how commits should be formatted",
    "start": "2505270",
    "end": "2510700"
  },
  {
    "text": "and the it's like this the first line is called the subject and it should be at",
    "start": "2510700",
    "end": "2517030"
  },
  {
    "text": "the most 50 characters so and if you're using something like well if you're",
    "start": "2517030",
    "end": "2523599"
  },
  {
    "text": "using a get GUI it's gonna show you and on the command line if you're using something like vim if I write more text",
    "start": "2523599",
    "end": "2532589"
  },
  {
    "text": "here at so you see that it changed color at some point this is the 50 51",
    "start": "2532589",
    "end": "2541210"
  },
  {
    "text": "character so it's clearly showing me that the first line should be at the most 50 characters so it should build",
    "start": "2541210",
    "end": "2547570"
  },
  {
    "text": "this summary if you want to provide more",
    "start": "2547570",
    "end": "2555070"
  },
  {
    "text": "information about to change you should leave an empty line over here and then you have the so called body",
    "start": "2555070",
    "end": "2561880"
  },
  {
    "text": "where you can explain why this changed and provide any more resources for",
    "start": "2561880",
    "end": "2570700"
  },
  {
    "text": "example links to other commits and and etc one quick tip here if you are doing",
    "start": "2570700",
    "end": "2576970"
  },
  {
    "text": "per programming in your team and you want to record who was involved in the",
    "start": "2576970",
    "end": "2583030"
  },
  {
    "text": "pair programming session now git only records one author so what you can do",
    "start": "2583030",
    "end": "2588460"
  },
  {
    "text": "and I've seen some teams do that to great effect is that day at the end of the commit message they write the name",
    "start": "2588460",
    "end": "2596560"
  },
  {
    "text": "of the names of the people involved in the in the paragraph so for example yeah",
    "start": "2596560",
    "end": "2609520"
  },
  {
    "text": "you get a point bar and Buzz so you're basically named everyone who",
    "start": "2609520",
    "end": "2617770"
  },
  {
    "text": "was involved in the pair programming session and you record it as part of the commit message but you do it in a",
    "start": "2617770",
    "end": "2624160"
  },
  {
    "text": "consistent format so you can easily later find out who was involved in this",
    "start": "2624160",
    "end": "2630280"
  },
  {
    "text": "change pretty nice thing to do which doesn't take a lot of effort so",
    "start": "2630280",
    "end": "2638670"
  },
  {
    "text": "these are the acid commits so to recap as he commits are autonomous they're",
    "start": "2638680",
    "end": "2644570"
  },
  {
    "text": "compatible they are incremental and they are documented easy to remember the next",
    "start": "2644570",
    "end": "2654050"
  },
  {
    "text": "category of things you can do individually is to automate now git has",
    "start": "2654050",
    "end": "2660530"
  },
  {
    "text": "a bunch of features to get stuff done quicker so one thing to be effective is",
    "start": "2660530",
    "end": "2667790"
  },
  {
    "text": "to let it do the work for you the first thing is having something called the",
    "start": "2667790",
    "end": "2673550"
  },
  {
    "text": "earliest functions so you know that you can create aliases and get to kind of shorten the command so instead of saying",
    "start": "2673550",
    "end": "2680320"
  },
  {
    "text": "check out for example you can write Co and so I can say git Co feature instead",
    "start": "2680320",
    "end": "2690080"
  },
  {
    "text": "of git checkout so this is no pretty pretty nice but it doesn't stop there",
    "start": "2690080",
    "end": "2696100"
  },
  {
    "text": "you can associate entire shelf functions to a to an alias so one of my favorite",
    "start": "2696100",
    "end": "2705500"
  },
  {
    "text": "ones that I came up with a few years ago and I've been using ever since is what I call the undo alias so what does it do",
    "start": "2705500",
    "end": "2714460"
  },
  {
    "text": "undo basically defines a function called F so this means that the alias should",
    "start": "2714460",
    "end": "2722660"
  },
  {
    "text": "run a shell command that's the exclamation mark then I define a shell",
    "start": "2722660",
    "end": "2727760"
  },
  {
    "text": "function called F doesn't really matter what it's called and the body of the function is I do a reset to the previous",
    "start": "2727760",
    "end": "2737570"
  },
  {
    "text": "I know this looks cryptic but this resets my current branch to the previous",
    "start": "2737570",
    "end": "2744500"
  },
  {
    "text": "commit in the ref log ref log being the history of every commit that happened in",
    "start": "2744500",
    "end": "2750650"
  },
  {
    "text": "your branch and this is the parameter",
    "start": "2750650",
    "end": "2755660"
  },
  {
    "text": "that I pass to the function and then at the end of the function declaration I",
    "start": "2755660",
    "end": "2762080"
  },
  {
    "text": "just invoke it immediately afterwards so this allows me for example if let me",
    "start": "2762080",
    "end": "2767930"
  },
  {
    "text": "just commit an empty commit so no changes so let's",
    "start": "2767930",
    "end": "2773990"
  },
  {
    "text": "make Amit a commit B and then let me just use my alias to show you just the",
    "start": "2773990",
    "end": "2781460"
  },
  {
    "text": "last four commits so let's say that I want to undo these two commits I can use",
    "start": "2781460",
    "end": "2788210"
  },
  {
    "text": "my undo Elias to say get undo and then pass how many commits ago how many keys do",
    "start": "2788210",
    "end": "2795200"
  },
  {
    "text": "you want to undo that means how many times you want to undo - so it's like Dramamine",
    "start": "2795200",
    "end": "2800450"
  },
  {
    "text": "it's like pressing ctrl Z twice one two and now I use the wrong one and now I",
    "start": "2800450",
    "end": "2812420"
  },
  {
    "text": "don't have a a B anymore so alias functions very powerful way to",
    "start": "2812420",
    "end": "2818500"
  },
  {
    "text": "associate complex you know shell functions to your aliases and speed up",
    "start": "2818500",
    "end": "2824750"
  },
  {
    "text": "your workflow the next one is what I call out to this and out of that so this",
    "start": "2824750",
    "end": "2831050"
  },
  {
    "text": "one I won't show you because I don't I'm running out of time otherwise I have lots of the things to tell you so you might know that too when",
    "start": "2831050",
    "end": "2839210"
  },
  {
    "text": "you're doing a rebase if you have some modified files in your working directory",
    "start": "2839210",
    "end": "2846410"
  },
  {
    "text": "it will tell you know you can't rebase because you have files well what out of starch does is a pack",
    "start": "2846410",
    "end": "2852800"
  },
  {
    "text": "exactly what it says if you're doing a rebase and you have modified files it",
    "start": "2852800",
    "end": "2858350"
  },
  {
    "text": "will automatically stash them away do the rebase and then put them back in much like we did before we'd keep index",
    "start": "2858350",
    "end": "2865820"
  },
  {
    "text": "but it will do it automatically how to squash this one is interesting let's say",
    "start": "2865820",
    "end": "2872510"
  },
  {
    "text": "that you are working on your changes and then you realized that a few commits ago",
    "start": "2872510",
    "end": "2880370"
  },
  {
    "text": "you should have included another change for example let's say that in this one I",
    "start": "2880370",
    "end": "2888710"
  },
  {
    "text": "wanted to do something else but I'm already made two commits afterwards so I can't easily amend it so what I can do",
    "start": "2888710",
    "end": "2895880"
  },
  {
    "text": "is that I can make the change so for example",
    "start": "2895880",
    "end": "2902400"
  },
  {
    "text": "yeah let's do whatever let's remove the exclamation mark so now I have a change",
    "start": "2902400",
    "end": "2909540"
  },
  {
    "text": "that I know I wanted to include here instead so what do I do instead of",
    "start": "2909540",
    "end": "2915420"
  },
  {
    "text": "committing it until new commit well I started by staging it of course and then",
    "start": "2915420",
    "end": "2920730"
  },
  {
    "text": "I say commit fix up and then I pass it the the commit ID of the one that I want",
    "start": "2920730",
    "end": "2929580"
  },
  {
    "text": "to include this change into so of course I can find it like this but an even",
    "start": "2929580",
    "end": "2938460"
  },
  {
    "text": "quicker way is just just by saying commit fix-up : - looks like a",
    "start": "2938460",
    "end": "2946070"
  },
  {
    "text": "disappointed emoji and here YUM I can just enter a portion of the commit",
    "start": "2946070",
    "end": "2952860"
  },
  {
    "text": "message so for example let's say unused and the it is gonna find the committed",
    "start": "2952860",
    "end": "2961350"
  },
  {
    "text": "that contains this word guess the commit hash and create a new commit that starts",
    "start": "2961350",
    "end": "2969270"
  },
  {
    "text": "with fix-up and then the rest of the commit message so now I have this what I",
    "start": "2969270",
    "end": "2977520"
  },
  {
    "text": "do next is that I do a rebase an interactively base remember like we did",
    "start": "2977520",
    "end": "2982800"
  },
  {
    "text": "for reordering and then I can just go back a few and it will this commit will",
    "start": "2982800",
    "end": "2990180"
  },
  {
    "text": "automatically be moved right underneath the one that it should be thick squashed",
    "start": "2990180",
    "end": "2995730"
  },
  {
    "text": "into and at this point I can just save and it's gonna do do the squash of",
    "start": "2995730",
    "end": "3002060"
  },
  {
    "text": "course this comes really in handy if you have multiple commits that you want to squash into earlier ones because they",
    "start": "3002060",
    "end": "3008450"
  },
  {
    "text": "will automatically move into the right place and now I have the squash",
    "start": "3008450",
    "end": "3017460"
  },
  {
    "text": "commit and this is what out squashed us so lots of built-in useful features that",
    "start": "3017460",
    "end": "3023250"
  },
  {
    "text": "you can enable and tap into the next one is client-side hooks now there are a you",
    "start": "3023250",
    "end": "3030150"
  },
  {
    "text": "can write that will automatically run on your machine when some events occur so",
    "start": "3030150",
    "end": "3037170"
  },
  {
    "text": "for example the pre-commit will fire just before you are creating the commit",
    "start": "3037170",
    "end": "3042690"
  },
  {
    "text": "and you can use it to validate for example that you don't have an invalid whitespace the neck the other one will",
    "start": "3042690",
    "end": "3051540"
  },
  {
    "text": "fire also before the committee's created but will allow you to for example validate the commit message so I have",
    "start": "3051540",
    "end": "3058650"
  },
  {
    "text": "these files they live in the dot kids directory called hooks there are a bunch",
    "start": "3058650",
    "end": "3065849"
  },
  {
    "text": "of them I have one called commit message that I've implemented and this is just a",
    "start": "3065849",
    "end": "3071730"
  },
  {
    "text": "shell function that basically reads the it will receive the entire commit",
    "start": "3071730",
    "end": "3078630"
  },
  {
    "text": "message as a parameter and then I can just verify that it's shorter than the",
    "start": "3078630",
    "end": "3085080"
  },
  {
    "text": "designed designated 50 characters and if it isn't I get a warning and the",
    "start": "3085080",
    "end": "3092190"
  },
  {
    "text": "possibility to modify it so let me show you how it works let's create an empty",
    "start": "3092190",
    "end": "3101520"
  },
  {
    "text": "commit just not not to have to make a change and then I can write a really",
    "start": "3101520",
    "end": "3109470"
  },
  {
    "text": "long message that is definately longer",
    "start": "3109470",
    "end": "3114650"
  },
  {
    "text": "than 50 characters and then I get this",
    "start": "3114650",
    "end": "3120390"
  },
  {
    "text": "warning that says hey your line should be 50 characters but it was 72 do you want to modify the message or just",
    "start": "3120390",
    "end": "3126540"
  },
  {
    "text": "commit it if I press yes then you see that I can cut it at the right point",
    "start": "3126540",
    "end": "3131550"
  },
  {
    "text": "I never press no I can just ignore it so client-side hooks something that",
    "start": "3131550",
    "end": "3137609"
  },
  {
    "text": "effective teams definitely distribute to everyone and this speeds up their",
    "start": "3137609",
    "end": "3143280"
  },
  {
    "text": "individual workflows because they catch errors before they get pushed into the common repository",
    "start": "3143280",
    "end": "3149420"
  },
  {
    "text": "and this is the last of the individual workflows tips the next ones are related",
    "start": "3149420",
    "end": "3158660"
  },
  {
    "text": "to teams workflows so three categories",
    "start": "3158660",
    "end": "3164150"
  },
  {
    "text": "here as well let's get right into it the first one is related to branching",
    "start": "3164150",
    "end": "3169579"
  },
  {
    "text": "now I won't talk about in the specific get workflows like for example get up",
    "start": "3169579",
    "end": "3176329"
  },
  {
    "text": "flow or get flow these are ideas and things to consider and think about as",
    "start": "3176329",
    "end": "3183079"
  },
  {
    "text": "you are deciding which workflow switch suits your particular team and your",
    "start": "3183079",
    "end": "3188900"
  },
  {
    "text": "particular project so the first thing to think about is being aware that there",
    "start": "3188900",
    "end": "3196190"
  },
  {
    "text": "are different kinds of branches and what do I mean by that I mean that branches",
    "start": "3196190",
    "end": "3203359"
  },
  {
    "text": "come in two flavors there are long running branches and there are topic",
    "start": "3203359",
    "end": "3209839"
  },
  {
    "text": "branches now long running branches is exactly what it sounds like they live",
    "start": "3209839",
    "end": "3215660"
  },
  {
    "text": "for up to the entire life of the project your TP every process has at least one",
    "start": "3215660",
    "end": "3222140"
  },
  {
    "text": "long-running branch and there is master while topic branches and atopic branches",
    "start": "3222140",
    "end": "3229760"
  },
  {
    "text": "are short-lived and they are usually focused on a particular task for example",
    "start": "3229760",
    "end": "3236210"
  },
  {
    "text": "a bug fix or a feature now so master is",
    "start": "3236210",
    "end": "3242420"
  },
  {
    "text": "an example of a long-running branch and a feature is an example of a topic",
    "start": "3242420",
    "end": "3247609"
  },
  {
    "text": "branch now topic branches typically typically get merged into the",
    "start": "3247609",
    "end": "3252950"
  },
  {
    "text": "long-running branch and afterwards they disappear so what you are left with is",
    "start": "3252950",
    "end": "3259089"
  },
  {
    "text": "the fact that some work was done in parallel to the long-running branch now",
    "start": "3259089",
    "end": "3266930"
  },
  {
    "text": "there is another way - there is another kind of categorization you can do with",
    "start": "3266930",
    "end": "3273589"
  },
  {
    "text": "branches and that is public branches and private branches now again",
    "start": "3273589",
    "end": "3281660"
  },
  {
    "text": "this is pretty straightforward but it being a distributed source control system you have a repository that is",
    "start": "3281660",
    "end": "3288529"
  },
  {
    "text": "shared your canonical repository where everybody pushes to and that will leave",
    "start": "3288529",
    "end": "3294740"
  },
  {
    "text": "something on a server like on github or on Azure DevOps and then you have your",
    "start": "3294740",
    "end": "3299900"
  },
  {
    "text": "local personal repository that are working on now a branch that exists in a",
    "start": "3299900",
    "end": "3305539"
  },
  {
    "text": "shared repo is considered a public one that is that is a branch where multiple",
    "start": "3305539",
    "end": "3312349"
  },
  {
    "text": "people are pushing commits into a lock a private branch is one that exists only",
    "start": "3312349",
    "end": "3318259"
  },
  {
    "text": "on your machine so they are create they live and die on your computer they're",
    "start": "3318259",
    "end": "3324019"
  },
  {
    "text": "never published anywhere those are private branches now long-running",
    "start": "3324019",
    "end": "3330259"
  },
  {
    "text": "branches are typically public because of course they are branches where people",
    "start": "3330259",
    "end": "3335630"
  },
  {
    "text": "collaborate so they need to live on the shared repo topic branches are usually",
    "start": "3335630",
    "end": "3341960"
  },
  {
    "text": "private those are the branches that you create on your machine to keep your own work organized of course this is not the",
    "start": "3341960",
    "end": "3349970"
  },
  {
    "text": "only way you can have private long-running branches so branches that",
    "start": "3349970",
    "end": "3356930"
  },
  {
    "text": "you keep alive for a long time and you can have topic branches where multiple",
    "start": "3356930",
    "end": "3363079"
  },
  {
    "text": "people are collaborating so they are public topic branches now not all",
    "start": "3363079",
    "end": "3369829"
  },
  {
    "text": "combinations are considered equal long-running",
    "start": "3369829",
    "end": "3375890"
  },
  {
    "text": "public branches definitely yes they are good and they're necessary the same goes",
    "start": "3375890",
    "end": "3383480"
  },
  {
    "text": "for private topic branches absolutely use those however avoid having",
    "start": "3383480",
    "end": "3391240"
  },
  {
    "text": "long-running private branches why because the longer you keep a branch to",
    "start": "3391240",
    "end": "3396619"
  },
  {
    "text": "yourself the harder it is is going to be later to merge it back into the public",
    "start": "3396619",
    "end": "3402769"
  },
  {
    "text": "branch you're gonna run into lots of conflicts the longer you keep it to yourself because nobody knows what's",
    "start": "3402769",
    "end": "3409279"
  },
  {
    "text": "happening in that branch and the long running published Brown public branch is gonna move a",
    "start": "3409279",
    "end": "3415010"
  },
  {
    "text": "so avoid having a long run in private branches the same goes for public topic",
    "start": "3415010",
    "end": "3421700"
  },
  {
    "text": "branches now if you have to you have to but in general a topic branch is better",
    "start": "3421700",
    "end": "3428810"
  },
  {
    "text": "used by an individual or if you're doing part programming not multiple people but having people collaborate in a",
    "start": "3428810",
    "end": "3436940"
  },
  {
    "text": "distributed fashion on a topic branch leads to a lot of complicated scenarios",
    "start": "3436940",
    "end": "3443300"
  },
  {
    "text": "where people are maybe rewriting the history they are rebasing they are handling it in different ways",
    "start": "3443300",
    "end": "3450800"
  },
  {
    "text": "so absolutely can work but as a general a rule of thumb avoid public topic branches this means",
    "start": "3450800",
    "end": "3460250"
  },
  {
    "text": "that the guideline becomes be conservative with having long-running",
    "start": "3460250",
    "end": "3465609"
  },
  {
    "text": "public branches don't have too many of them and be liberal with the private",
    "start": "3465609",
    "end": "3473359"
  },
  {
    "text": "topic branches create as many as you want the next one is related to merging",
    "start": "3473359",
    "end": "3479750"
  },
  {
    "text": "now this means let your branches decide how you want to merge them now knowing",
    "start": "3479750",
    "end": "3485690"
  },
  {
    "text": "that there are these categories of branches long-running topic public and private depending on what they are there",
    "start": "3485690",
    "end": "3492740"
  },
  {
    "text": "should be merged differently now you know that in case there are two ways to merge there is something called the true",
    "start": "3492740",
    "end": "3498230"
  },
  {
    "text": "merge which the one we did earlier that is you're creating a merge commit the other one is doing a rebase where you",
    "start": "3498230",
    "end": "3506119"
  },
  {
    "text": "are moving commits and then you're merging by just doing a fast-forward now",
    "start": "3506119",
    "end": "3513220"
  },
  {
    "text": "if you have a public branch that you want to merge into another public branch it should most definitely use a merge",
    "start": "3513220",
    "end": "3520700"
  },
  {
    "text": "commit you want public branches that everybody see to be visible when they",
    "start": "3520700",
    "end": "3526760"
  },
  {
    "text": "converge when you want to merge the public branch into a private one though",
    "start": "3526760",
    "end": "3532850"
  },
  {
    "text": "like if you're having your work in progress and you want to keep it updated with what happens in the public branch",
    "start": "3532850",
    "end": "3539210"
  },
  {
    "text": "then you absolutely want to rebase why let's so for example a public branch",
    "start": "3539210",
    "end": "3547820"
  },
  {
    "text": "could be a perfect that you want to merge into master and a public branch master immerse into your",
    "start": "3547820",
    "end": "3554930"
  },
  {
    "text": "working promise so what do I mean if this is a public ranch called master and",
    "start": "3554930",
    "end": "3562000"
  },
  {
    "text": "this is a pull request there is also public because I want to have it code reviewed so it gets pushed to the shared",
    "start": "3562000",
    "end": "3569000"
  },
  {
    "text": "repo and it becomes a public branch where other people can comment on when I",
    "start": "3569000",
    "end": "3574130"
  },
  {
    "text": "want to merge my pull request into master I want to do it with a merge",
    "start": "3574130",
    "end": "3579320"
  },
  {
    "text": "commit why because and then it gets deleted if there is a problem later on I",
    "start": "3579320",
    "end": "3586670"
  },
  {
    "text": "discover a problem with what I merged it is much easier to revert a merge commit",
    "start": "3586670",
    "end": "3593630"
  },
  {
    "text": "with a new commit you see the the inverse of an M is a W this is a normal",
    "start": "3593630",
    "end": "3600380"
  },
  {
    "text": "get notation so two by reverting a merge you can effectively undo everything that",
    "start": "3600380",
    "end": "3606680"
  },
  {
    "text": "was done in the pull request in one single commit this is of course much",
    "start": "3606680",
    "end": "3613730"
  },
  {
    "text": "harder if I had rebased my pull request on master moved master",
    "start": "3613730",
    "end": "3619670"
  },
  {
    "text": "forward and then if there is a problem in the pull request I need to revert",
    "start": "3619670",
    "end": "3625100"
  },
  {
    "text": "every individual commit by itself of course this is especially if you",
    "start": "3625100",
    "end": "3631640"
  },
  {
    "text": "discover it later on when there are more commits happening afterwards after F in this case it gets even trickier to",
    "start": "3631640",
    "end": "3638450"
  },
  {
    "text": "revert individual ones and determine which one was problematic so another",
    "start": "3638450",
    "end": "3648650"
  },
  {
    "text": "case public and private branch you want to merge them and you want to merge the",
    "start": "3648650",
    "end": "3655520"
  },
  {
    "text": "sorry the public branch into the private one it is your work in progress if you",
    "start": "3655520",
    "end": "3660560"
  },
  {
    "text": "do it through a merge instead of a rebase and then later you want to merge",
    "start": "3660560",
    "end": "3666290"
  },
  {
    "text": "your work in progress into master you see what happens there double merge now",
    "start": "3666290",
    "end": "3672920"
  },
  {
    "text": "if you do this enough that's why you want to rebase instead if you want to do if you do this enough what happens is",
    "start": "3672920",
    "end": "3679580"
  },
  {
    "text": "that you have a history that looks like this we lots and lots of merges that just don't make any sense because you merged a pipe",
    "start": "3679580",
    "end": "3686440"
  },
  {
    "text": "a public branch into a private one this is called the guitar hero history and",
    "start": "3686440",
    "end": "3692170"
  },
  {
    "text": "why is it called guitar hero because it looks like this even sometimes called",
    "start": "3692170",
    "end": "3698110"
  },
  {
    "text": "get hero you want a history that is clean and that doesn't",
    "start": "3698110",
    "end": "3704020"
  },
  {
    "text": "have anymore merge commits than it has to the last tip or technique that you",
    "start": "3704020",
    "end": "3713260"
  },
  {
    "text": "can do within your team is to map your branches to your release environments",
    "start": "3713260",
    "end": "3720070"
  },
  {
    "text": "and that means basically knowing where your branches are going in which",
    "start": "3720070",
    "end": "3726370"
  },
  {
    "text": "environment that they are going so let's say that this is the master branch and",
    "start": "3726370",
    "end": "3732360"
  },
  {
    "text": "this is the develop branch those are two long-running branches one is mapped to a",
    "start": "3732360",
    "end": "3739750"
  },
  {
    "text": "QA environment where every commits get pushed to some kind of environment where",
    "start": "3739750",
    "end": "3744940"
  },
  {
    "text": "it can be verified the master branch is it represents the stable version of your",
    "start": "3744940",
    "end": "3751120"
  },
  {
    "text": "software that means when you are merging the work that comes from develop that",
    "start": "3751120",
    "end": "3756130"
  },
  {
    "text": "has been tested you want to push it out to production so it can be used to you by your users so you see I have a clear",
    "start": "3756130",
    "end": "3763870"
  },
  {
    "text": "mapping between my develop branch goes to test and QA and master goes to",
    "start": "3763870",
    "end": "3769000"
  },
  {
    "text": "production and of course you can also do different kinds of deployments here on",
    "start": "3769000",
    "end": "3777460"
  },
  {
    "text": "the develop branch you can develop every commit automatically and in that case",
    "start": "3777460",
    "end": "3782830"
  },
  {
    "text": "you will do something called continuous deployment while you probably don't want value of course you can and there are",
    "start": "3782830",
    "end": "3789340"
  },
  {
    "text": "many teams doing it but you can push every commit that happens in master",
    "start": "3789340",
    "end": "3794350"
  },
  {
    "text": "automatically to production but what's more common is to have it master be in a",
    "start": "3794350",
    "end": "3799720"
  },
  {
    "text": "state that can be deployed but have it be a manual step so at this point you",
    "start": "3799720",
    "end": "3805360"
  },
  {
    "text": "are doing continuous delivery so you see mapping knowing where your",
    "start": "3805360",
    "end": "3810790"
  },
  {
    "text": "branches are going and mapping them directly to an environment really helps collaboration and really",
    "start": "3810790",
    "end": "3817809"
  },
  {
    "text": "helps getting the most out of your source control system to basically help",
    "start": "3817809",
    "end": "3824349"
  },
  {
    "text": "your team deal with the lifecycle management of your software so I'm",
    "start": "3824349",
    "end": "3833890"
  },
  {
    "text": "running out of time so let's wrap it up I told you that",
    "start": "3833890",
    "end": "3839799"
  },
  {
    "text": "effective teams they have workflows that are divided into two categories individual workflows where the first one",
    "start": "3839799",
    "end": "3846700"
  },
  {
    "text": "was a configure environment take care of crust crafting your history by creating",
    "start": "3846700",
    "end": "3853569"
  },
  {
    "text": "asset commit and then let it do the work for you by automating as much as",
    "start": "3853569",
    "end": "3860079"
  },
  {
    "text": "possible of your workflow the other kind kind of work for us are the team",
    "start": "3860079",
    "end": "3866019"
  },
  {
    "text": "workflows that is stuff to think about when you are deciding how you want to",
    "start": "3866019",
    "end": "3871269"
  },
  {
    "text": "handle branching and merging in your team so that means being aware of what",
    "start": "3871269",
    "end": "3876400"
  },
  {
    "text": "kinds of branching you have long-running topic public and private and then base",
    "start": "3876400",
    "end": "3884980"
  },
  {
    "text": "your merged strategies based on what branches are you are merging and the",
    "start": "3884980",
    "end": "3892210"
  },
  {
    "text": "next one is having a clear mapping between your branches and your",
    "start": "3892210",
    "end": "3898890"
  },
  {
    "text": "environments where you are releasing your software and with that I'm at the",
    "start": "3898890",
    "end": "3907150"
  },
  {
    "text": "end of this presentation I want to just let you know that if you want are interested in more on this kind of",
    "start": "3907150",
    "end": "3912819"
  },
  {
    "text": "techniques and ideas I have a process course out called advanced key tips and tricks this requires that you know I",
    "start": "3912819",
    "end": "3920890"
  },
  {
    "text": "have a fundamental understanding of how it works but here is the link and with that I want to say thank you that for",
    "start": "3920890",
    "end": "3928029"
  },
  {
    "text": "for watching and I think I have some time to answer questions I haven't",
    "start": "3928029",
    "end": "3935049"
  },
  {
    "text": "looked at the site if there are any so I have two questions let me just open it",
    "start": "3935049",
    "end": "3942099"
  },
  {
    "text": "up sorry yeah so the first one is I haven't",
    "start": "3942099",
    "end": "3953130"
  },
  {
    "text": "fully understood what keep index in stash saved us can you verify so what it",
    "start": "3953130",
    "end": "3961589"
  },
  {
    "text": "does is that it takes all the modified files in your working directory and it",
    "start": "3961589",
    "end": "3967349"
  },
  {
    "text": "stashes them away however it won't touch anything that has already been States so",
    "start": "3967349",
    "end": "3974099"
  },
  {
    "text": "that's why it says keep index and this allows you to get rid of all the modified files stash them away and then",
    "start": "3974099",
    "end": "3981540"
  },
  {
    "text": "have only your staged file be in the working directory and then you can run",
    "start": "3981540",
    "end": "3986940"
  },
  {
    "text": "your tests and verify that what you are about to commit actually doesn't break anything afterwards you create the",
    "start": "3986940",
    "end": "3993450"
  },
  {
    "text": "commit and then you on stage your modified files so hopefully this answer the question",
    "start": "3993450",
    "end": "4001119"
  },
  {
    "text": "Thomas has get aliases I prefer saving my changes when undoing",
    "start": "4001119",
    "end": "4007630"
  },
  {
    "text": "as Analia Swiper equals and then there is a a function a comment",
    "start": "4007630",
    "end": "4018160"
  },
  {
    "text": "yeah well this this is definitely a way to do it I see that you are using the",
    "start": "4018160",
    "end": "4024040"
  },
  {
    "text": "exclamation mark to basically whatever comes off to what's gonna be run as a shell command and then you are using the",
    "start": "4024040",
    "end": "4030920"
  },
  {
    "text": "double ampersand to say if this command succeeds then executes automatic",
    "start": "4030920",
    "end": "4037339"
  },
  {
    "text": "automatically execute the second one followed by a third one this is absolutely a good way to do it if you",
    "start": "4037339",
    "end": "4044150"
  },
  {
    "text": "don't want to write a function the reason to write a function is that if you want to pass arguments to your alias",
    "start": "4044150",
    "end": "4051440"
  },
  {
    "text": "like I did get undo with the number two this won't let you accept arguments but",
    "start": "4051440",
    "end": "4059810"
  },
  {
    "text": "if you write a shell function then you have dollar one dollar two dollar three",
    "start": "4059810",
    "end": "4064869"
  },
  {
    "text": "doors are the arguments that you can pass to the alia so in my case I can say",
    "start": "4064869",
    "end": "4070099"
  },
  {
    "text": "get undo for and it will do the operation for four commits",
    "start": "4070099",
    "end": "4076490"
  },
  {
    "text": "so that's why you want to use so if you want to use arguments define a function if you don't need arguments definitely",
    "start": "4076490",
    "end": "4083900"
  },
  {
    "text": "chain your commands like this yeah are there any more questions",
    "start": "4083900",
    "end": "4092079"
  },
  {
    "text": "you nope okay thank you very much for watching",
    "start": "4092900",
    "end": "4098750"
  },
  {
    "text": "and enjoy the rest of your day",
    "start": "4098750",
    "end": "4102130"
  }
]