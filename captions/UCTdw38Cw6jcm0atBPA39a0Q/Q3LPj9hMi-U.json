[
  {
    "text": "but there's one thing i have to do here to make this feel more like an ndc alexa turn the media room to purple it's",
    "start": "6399",
    "end": "16160"
  },
  {
    "text": "an ndc conference okay so uh thanks for coming to the talk this is fluxing up your.net apps and i'm",
    "start": "16160",
    "end": "22320"
  },
  {
    "text": "alex dunn uh let's see if we can get this going so you'll find me online not as alex done i mean in some",
    "start": "22320",
    "end": "29279"
  },
  {
    "text": "capacity i will be but you'll find me mostly a suave pirate uh the reason for that is basically or i",
    "start": "29279",
    "end": "35760"
  },
  {
    "text": "should say the story behind that is basically that my name is so ordinary especially in the states",
    "start": "35760",
    "end": "42399"
  },
  {
    "text": "um i work a lot in the microsoft stack and net and there are multiple alex guns",
    "start": "42399",
    "end": "47680"
  },
  {
    "text": "that work at microsoft as developers so i i use the name generator i wrote as a kid we landed on swap pirate and",
    "start": "47680",
    "end": "54320"
  },
  {
    "text": "that's where i am all over the internet so on twitter on github even my linkedin url",
    "start": "54320",
    "end": "59760"
  },
  {
    "text": "and most recently on twitch where i stream every wednesday and sunday building all sorts",
    "start": "59760",
    "end": "65920"
  },
  {
    "text": "of cool stuff we do a lot with conversational ai and virtual assistants mobile",
    "start": "65920",
    "end": "71119"
  },
  {
    "text": "and usually a whole bunch of.net i'm also microsoft mvp.net tech and ai",
    "start": "71119",
    "end": "76400"
  },
  {
    "text": "uh and i'm also a pluralsight author mostly talking about android development and application development uh so definitely check all that stuff",
    "start": "76400",
    "end": "82000"
  },
  {
    "text": "out so we're talking about flux and we'll get into you know what all of that means and what it is and",
    "start": "82000",
    "end": "87840"
  },
  {
    "text": "design patterns as a whole and where we stand but uh you know like i said this is talking about design",
    "start": "87840",
    "end": "93520"
  },
  {
    "text": "patterns and sort of high level architect stuff so it'll help to know there's sort of like two things",
    "start": "93520",
    "end": "99040"
  },
  {
    "text": "either have experience doing uh client apps and dot net that could be xamarin forms that could be uwp that",
    "start": "99040",
    "end": "105439"
  },
  {
    "text": "could be windows phone uh if you're like me and and did that back in the day i miss my windows phone",
    "start": "105439",
    "end": "110720"
  },
  {
    "text": "more than anything familiarity with xaml is going to be super helpful although even if you don't have that we can always answer questions",
    "start": "110720",
    "end": "117200"
  },
  {
    "text": "on it and then uh familiarity with mvvm and bindings because we are going to be doing a lot of comparison uh especially",
    "start": "117200",
    "end": "123840"
  },
  {
    "text": "because i should say until recently um the net client-side app development cycle",
    "start": "123840",
    "end": "130800"
  },
  {
    "text": "between wpf uwp and xamarin forms it's all about xaml and nvvm and bindings and stuff like",
    "start": "130800",
    "end": "137360"
  },
  {
    "text": "that and we're going to try to kind of break that mold a little bit in this talk uh or right that's that's the left half if",
    "start": "137360",
    "end": "143599"
  },
  {
    "text": "you're familiar with that you're you're great you're gonna do awesome here in this talk you should be able to pick things up i'm talking about",
    "start": "143599",
    "end": "149360"
  },
  {
    "text": "if not ask questions if you don't have that stuff and instead you have familiarity with building",
    "start": "149360",
    "end": "154640"
  },
  {
    "text": "client apps in react that could be react native that could be react for web or if you're already familiar with flux",
    "start": "154640",
    "end": "160640"
  },
  {
    "text": "or redux or something like that or at least object oriented javascript you're going to do great because we're talking about this stuff in dot net",
    "start": "160640",
    "end": "167440"
  },
  {
    "text": "but they're patterns that really originated from that side of the world of of development",
    "start": "167440",
    "end": "173840"
  },
  {
    "text": "from react from uh the facebook team at the end redux and flux and we'll get into all",
    "start": "173840",
    "end": "180159"
  },
  {
    "text": "that nonsense i'm going to be putting these slides up but just for some reference here all the stuff we're going to be looking",
    "start": "180159",
    "end": "186319"
  },
  {
    "text": "at in demos it's all on github uh online there's xamarin flux and we'll get into a bonus demo",
    "start": "186319",
    "end": "191680"
  },
  {
    "text": "a little later as well uh which i didn't want to spoil here uh i also built an sdk for this that can",
    "start": "191680",
    "end": "197680"
  },
  {
    "text": "help a little bit just called the flux toolkit for net uh and then there's also some docs here and then the original",
    "start": "197680",
    "end": "203360"
  },
  {
    "text": "uh xamarin university guest lecture where i sort of brought this stuff into the fold for the first time but all that aside introductions aside",
    "start": "203360",
    "end": "211440"
  },
  {
    "text": "nice to see you all uh but let's get into talking about what we sort of currently see",
    "start": "211440",
    "end": "216480"
  },
  {
    "text": "in the application design pattern side of things for the most part and especially in the mobile world um",
    "start": "216480",
    "end": "222879"
  },
  {
    "text": "regardless of net or not so as an example we have a model view controller that's mvc and",
    "start": "222879",
    "end": "230159"
  },
  {
    "text": "so the structure of that is kind of like this right we have our model that can be everything on the data side and back we",
    "start": "230159",
    "end": "236000"
  },
  {
    "text": "have our controller which is then responsible for handling the communication between our view so our controller can receive",
    "start": "236000",
    "end": "242879"
  },
  {
    "text": "data from requests from a view and then it can send stuff back down to manipulate that view that could be like",
    "start": "242879",
    "end": "248239"
  },
  {
    "text": "you know asp.net mvc that could be ios which is sort of pushes you into an",
    "start": "248239",
    "end": "253840"
  },
  {
    "text": "mvc build with view controllers uh but you can also implement it wherever right it's just a",
    "start": "253840",
    "end": "258880"
  },
  {
    "text": "design pattern here where your controller is responsible for basically relaying information uh to your view with both sending and",
    "start": "258880",
    "end": "265280"
  },
  {
    "text": "receiving data from your model in the android world we have uh mvp",
    "start": "265280",
    "end": "270639"
  },
  {
    "text": "which is model view presenter you'll notice that you know i'll go back and forth between these two slides i want to change one box because at a high",
    "start": "270639",
    "end": "276560"
  },
  {
    "text": "level it's the same thing your model sits behind the scenes that's your data your presenter is then in",
    "start": "276560",
    "end": "281680"
  },
  {
    "text": "charge of choosing what is sent up and down from your view we also have model view view model which",
    "start": "281680",
    "end": "287440"
  },
  {
    "text": "is extremely common in the dot net space wpf ewp xamarin forms even in native stuff and",
    "start": "287440",
    "end": "293759"
  },
  {
    "text": "even across other platforms as well mbvm is huge um and basically this whole talk started",
    "start": "293759",
    "end": "299360"
  },
  {
    "text": "because i hate mvvm and i'm so sick of it and i hate the the verbosity and the debugging of issues with it and stuff",
    "start": "299360",
    "end": "305840"
  },
  {
    "text": "and all the problems i've had over the many years of doing mvvm-based development and that's sort of where we landed here",
    "start": "305840",
    "end": "311840"
  },
  {
    "text": "but either way my opinions aside we we have the same general structure we",
    "start": "311840",
    "end": "317280"
  },
  {
    "text": "have our model we have our view model which is then in charge of doing that sending and receiving a data to the view the only",
    "start": "317280",
    "end": "323520"
  },
  {
    "text": "difference between these three right between mvc mvp and mvvm is like the nuance of how they send and receive",
    "start": "323520",
    "end": "330639"
  },
  {
    "text": "data like mvvm it's usually done over binding so you're not doing like explicit sending or receiving",
    "start": "330639",
    "end": "336320"
  },
  {
    "text": "instead you're binding properties two-way and you're binding commands for actions and things like that but either way",
    "start": "336320",
    "end": "341840"
  },
  {
    "text": "in general it looks like this so let's talk about problems with these",
    "start": "341840",
    "end": "347039"
  },
  {
    "text": "these design patterns let's talk about problems with mvvm especially so the first thing",
    "start": "347039",
    "end": "354479"
  },
  {
    "text": "uh whoops sorry about that the first thing is this bi-directional data flow so looking at these sort of core",
    "start": "354479",
    "end": "360160"
  },
  {
    "text": "components the model stuff is fine we don't necessarily care about that because our data's got to live somewhere and it's got to be able to communicate",
    "start": "360160",
    "end": "366240"
  },
  {
    "text": "down to our view in one way or another let's talk about this bi-directional communication between our view model and our view",
    "start": "366240",
    "end": "373120"
  },
  {
    "text": "between all of those patterns we saw that we had that send and receive data set up and our view the the issues come when we",
    "start": "373120",
    "end": "380080"
  },
  {
    "text": "have the bi-directional communication that's hard to sort of like separate that relationship between our",
    "start": "380080",
    "end": "387039"
  },
  {
    "text": "view model and our view is actually pretty tightly coupled even if it's really not meant to be and we",
    "start": "387039",
    "end": "392080"
  },
  {
    "text": "try to tell ourselves it isn't we have that tight coupling of our view to our view model now",
    "start": "392080",
    "end": "397759"
  },
  {
    "text": "beyond the bi-directional issues we also have what i call cross-based it's really like in this scenario where i have a",
    "start": "397759",
    "end": "403120"
  },
  {
    "text": "view model all over the place it's about cross-view models so in an app like an actual production app or",
    "start": "403120",
    "end": "409440"
  },
  {
    "text": "anything else even just one with multiple pages this is generally what your architecture is going to look like you've got",
    "start": "409440",
    "end": "414479"
  },
  {
    "text": "multiple view models that are tied to a view and they send and receive data but there's no rules",
    "start": "414479",
    "end": "420080"
  },
  {
    "text": "that really dictate how these should be communicating to each other so a lot of times what we see is a",
    "start": "420080",
    "end": "425599"
  },
  {
    "text": "diagram that sort of looks like this and view models can just send stuff to each other and this is sort of like an",
    "start": "425599",
    "end": "431120"
  },
  {
    "text": "early stage of people learning mvvm i see this sort of implementation a lot uh with folks that aren't familiar with",
    "start": "431120",
    "end": "437120"
  },
  {
    "text": "abstractions and service layers and things like that so we go from this sort of messy",
    "start": "437120",
    "end": "442639"
  },
  {
    "text": "mesh of view models just sending stuff to each other and it's hard to keep rules around that and it's hard to track down bugs when something goes wrong",
    "start": "442639",
    "end": "449759"
  },
  {
    "text": "so then that the sort of natural next rule is to add a service layer an abstraction",
    "start": "449759",
    "end": "455120"
  },
  {
    "text": "over it but this rule isn't strict and we can get a little better",
    "start": "455120",
    "end": "460720"
  },
  {
    "text": "we can use dependency injection we can inject our service layer into our view models",
    "start": "460720",
    "end": "465759"
  },
  {
    "text": "so now we can handle sending stuff up and down there that's sort of helping mostly separate",
    "start": "465759",
    "end": "471360"
  },
  {
    "text": "the model from the view model not so much that cross model communication but it certainly can some examples of",
    "start": "471360",
    "end": "477680"
  },
  {
    "text": "that would be like um the uh like navigation service pattern right when we want to navigate",
    "start": "477680",
    "end": "483680"
  },
  {
    "text": "to another page we don't just say from our view model go open this page although i do see that all the time but you're",
    "start": "483680",
    "end": "490080"
  },
  {
    "text": "not supposed to do that um we see like you inject a navigation service and you say navigation service",
    "start": "490080",
    "end": "495199"
  },
  {
    "text": "navigate to this page and that will handle setting up the view and the view model and everything else",
    "start": "495199",
    "end": "501039"
  },
  {
    "text": "um there's another layer you can take to this you can abstract your data access layer so now you've got a nice",
    "start": "501039",
    "end": "506479"
  },
  {
    "text": "separation of like data layer business logic layer view state layer and view and that's great",
    "start": "506479",
    "end": "513120"
  },
  {
    "text": "um but there's still no rules around it and it still sort of leads to making it difficult to",
    "start": "513120",
    "end": "518959"
  },
  {
    "text": "run it especially in a team environment uh building and managing apps at scale",
    "start": "518959",
    "end": "524080"
  },
  {
    "text": "that can easily sort of start to fall apart because that relationship between your service layer and viewmodel layer",
    "start": "524080",
    "end": "529279"
  },
  {
    "text": "if you're not setting really good rules around it someone can just implement something wrong and then we run into issues with",
    "start": "529279",
    "end": "534959"
  },
  {
    "text": "tracking it down now that's all just from the view model up we also have difficulty",
    "start": "534959",
    "end": "541200"
  },
  {
    "text": "testing and debugging the actual bindings you know the bindings are meant to abstract your view model and your views",
    "start": "541200",
    "end": "547360"
  },
  {
    "text": "relationship that's the whole goal of it but that cool comes with consequences or that that feature comes with",
    "start": "547360",
    "end": "552640"
  },
  {
    "text": "consequences and essentially it's that if you run into an issue with the binding it's a pain to figure out",
    "start": "552640",
    "end": "558640"
  },
  {
    "text": "i'm sure some of you have had in the past and other times if you set it up right you don't necessarily have to worry about it",
    "start": "558640",
    "end": "563839"
  },
  {
    "text": "but usually that separation and especially doing things over like string property relationships and stuff",
    "start": "563839",
    "end": "569519"
  },
  {
    "text": "makes it really difficult so for example i could just have like a typo in my binding of a property and like not be",
    "start": "569519",
    "end": "577040"
  },
  {
    "text": "aware of it like even if it's like case sensitive and i just like didn't capitalize the name of the property i'm binding to",
    "start": "577040",
    "end": "583440"
  },
  {
    "text": "in some scenarios that will be caught by uh build issues but even in that scenario i might",
    "start": "583440",
    "end": "589600"
  },
  {
    "text": "not just realize right away like oh i typed this with a lowercase instead of pascal casing it",
    "start": "589600",
    "end": "595200"
  },
  {
    "text": "um and that is just annoying it feels like a problem that us as developers can get around it and not",
    "start": "595200",
    "end": "601200"
  },
  {
    "text": "have to worry about uh and then lastly there's difficulty in testing and debugging",
    "start": "601200",
    "end": "606480"
  },
  {
    "text": "that service layer relationship to the view model now if you're doing dependency injection",
    "start": "606480",
    "end": "611760"
  },
  {
    "text": "properly that doesn't necessarily mean it's really difficult you do have the ability to unit test very easily now you",
    "start": "611760",
    "end": "617600"
  },
  {
    "text": "can mock your service layer and test certain scenarios but when it comes to that real world implementation where there's sort of",
    "start": "617600",
    "end": "624079"
  },
  {
    "text": "this like mystery of what's happening behind the scenes between these two view models communicating",
    "start": "624079",
    "end": "629279"
  },
  {
    "text": "that's where we run into issues in production with trying to understand what's happening right",
    "start": "629279",
    "end": "634480"
  },
  {
    "text": "so let's talk about where flux comes in and how it can actually help with some of these scenarios so i'll introduce the",
    "start": "634480",
    "end": "640000"
  },
  {
    "text": "concept in general uh and then we'll talk about how it works in those uh specific cases to help",
    "start": "640000",
    "end": "645200"
  },
  {
    "text": "fix it so at a high level here's sort of my my go-to bullet points been talking about",
    "start": "645200",
    "end": "651600"
  },
  {
    "text": "flux it's a client-side application and uh application architecture and design pattern",
    "start": "651600",
    "end": "656959"
  },
  {
    "text": "meaning that it's just another sort of tool in your tool belt there are libraries",
    "start": "656959",
    "end": "662959"
  },
  {
    "text": "that are there to to help with this you know like i said i built one for net mostly for like my xamarin apps but in",
    "start": "662959",
    "end": "669920"
  },
  {
    "text": "general it's just a concept there's no like hard implementation of it that you need to use every time i'm not",
    "start": "669920",
    "end": "676800"
  },
  {
    "text": "here to promote a library or something like that it's just a design pattern it was originally set up by facebook and",
    "start": "676800",
    "end": "682800"
  },
  {
    "text": "for helping build like really large scale and robust data driven uis so this is where we",
    "start": "682800",
    "end": "688800"
  },
  {
    "text": "start to get into like massive scale of an app and like when i say scale i mean like the actual like features",
    "start": "688800",
    "end": "694720"
  },
  {
    "text": "within the ui and the app and the data within it itself right like facebook built these insanely functional",
    "start": "694720",
    "end": "701600"
  },
  {
    "text": "applications from facebook itself to messenger to like the other 30 they have so basically",
    "start": "701600",
    "end": "707600"
  },
  {
    "text": "their original implementations of state management and react when they were getting that started just wasn't enough so they introduced this design pattern",
    "start": "707600",
    "end": "714399"
  },
  {
    "text": "um and it really helps a lot with that the focus is on the flow of data and separation of concerns",
    "start": "714399",
    "end": "720399"
  },
  {
    "text": "there are other patterns out here that are very much like this and tools that try to help with these same things and same with the that next",
    "start": "720399",
    "end": "726639"
  },
  {
    "text": "bullet point there are the unidirectional data flows um and that could be like reactive uh or",
    "start": "726639",
    "end": "732240"
  },
  {
    "text": "reactive uh it keeps trying to say like the js one but reactive ui extensions would help with",
    "start": "732240",
    "end": "738000"
  },
  {
    "text": "this in the whole reactive pattern in general it's the same goal of like having that single flow of data and just",
    "start": "738000",
    "end": "743920"
  },
  {
    "text": "listening to events propagate through but this just sort of implements some more rules on it as well so if you've come from the react world",
    "start": "743920",
    "end": "751920"
  },
  {
    "text": "there's some sort of nomenclature i want to translate over when we talk about it",
    "start": "751920",
    "end": "756959"
  },
  {
    "text": "in uh these samples that we're going to do with c-sharp and xamarin later so for example a components render function",
    "start": "756959",
    "end": "763200"
  },
  {
    "text": "in react is the same as having your actual page right that's your your raw ui the component state we're still going to",
    "start": "763200",
    "end": "769519"
  },
  {
    "text": "actually use a view model in data binding to make the most use out of what we have there the props are properties that's no different",
    "start": "769519",
    "end": "775920"
  },
  {
    "text": "and then the component life cycle of like component will mount or did mount component will unmount stuff like that",
    "start": "775920",
    "end": "781600"
  },
  {
    "text": "and react that's just the same as the page life cycles like on navigated2 on navigated away or",
    "start": "781600",
    "end": "787040"
  },
  {
    "text": "or uh can never remember the ones for the other platforms but either way it's there's a pretty good",
    "start": "787040",
    "end": "793120"
  },
  {
    "text": "pairing here with how we're talking about this translation so let's talk about the structure like",
    "start": "793120",
    "end": "798480"
  },
  {
    "text": "what flux really is and it's really made of four main components and that's all you have to think about",
    "start": "798480",
    "end": "803839"
  },
  {
    "text": "there are actions and an action basically does some business logic and then communicates to the dispatcher right our",
    "start": "803839",
    "end": "810160"
  },
  {
    "text": "little guy over here on the right side the dispatcher then is responsible for taking information from",
    "start": "810160",
    "end": "815440"
  },
  {
    "text": "the action so the action does whatever it needs to and says hey dispatcher dispatch this thing and the dispatcher",
    "start": "815440",
    "end": "821680"
  },
  {
    "text": "is going to say all right let me go send all of that information to whatever stores you have these stores take the information from",
    "start": "821680",
    "end": "828959"
  },
  {
    "text": "the dispatcher regardless of where it came from does something to update the state of the data that's within it",
    "start": "828959",
    "end": "835279"
  },
  {
    "text": "and then it's going to propagate or emit those changes down to the views that are subscribed to",
    "start": "835279",
    "end": "841760"
  },
  {
    "text": "it so there's sort of like a three level subscription here an action happens we don't care where that came",
    "start": "841760",
    "end": "848000"
  },
  {
    "text": "from we send stuff to the dispatcher explicitly the action literally calls the dispatcher",
    "start": "848000",
    "end": "853600"
  },
  {
    "text": "stores subscribe to dispatchers and views subscribe to stores meaning that a store can be thought of",
    "start": "853600",
    "end": "859199"
  },
  {
    "text": "as sort of like an abstracted view model across all your stuff that's really just focused on data structure and not",
    "start": "859199",
    "end": "864480"
  },
  {
    "text": "view data structure so action to dispatcher dispatcher to store store to view and",
    "start": "864480",
    "end": "870800"
  },
  {
    "text": "it's just that that single sort of circle there like we said focused on a unidirectional data flow",
    "start": "870800",
    "end": "876959"
  },
  {
    "text": "and everything sort of follows suit there so what that means is your app architecture",
    "start": "876959",
    "end": "883199"
  },
  {
    "text": "instead of going from like that cascaded set of like views and view models with the bi-directional thing it's just a",
    "start": "883199",
    "end": "889760"
  },
  {
    "text": "whole bunch of these loops so you have one set up where you have an action to dispatcher to store the view and then you have another one and really",
    "start": "889760",
    "end": "895760"
  },
  {
    "text": "your whole app is just a collection of these loops and it's a really interesting way to",
    "start": "895760",
    "end": "900800"
  },
  {
    "text": "think about your your structure of your data in the app the structure of your state and the",
    "start": "900800",
    "end": "905839"
  },
  {
    "text": "structure of your views it's really just a collection of these loops which means they're really easy to",
    "start": "905839",
    "end": "911360"
  },
  {
    "text": "follow because if you run into an issue with just one of those you just go into where that whole sort of loop happens and",
    "start": "911360",
    "end": "917360"
  },
  {
    "text": "you're good to go now let's talk about adjusting it for the sort of mvvm in the dot net world",
    "start": "917360",
    "end": "923360"
  },
  {
    "text": "because in its current state we have xaml for our primary way of building views and we",
    "start": "923360",
    "end": "928800"
  },
  {
    "text": "have the benefit of data bindings using that benefit could be you know debated but i",
    "start": "928800",
    "end": "934320"
  },
  {
    "text": "like to think it's at least useful so the only difference here is that instead of just having the store",
    "start": "934320",
    "end": "940240"
  },
  {
    "text": "listen to the uh or have the view listened to the store we instead have a view model listen to",
    "start": "940240",
    "end": "945600"
  },
  {
    "text": "it and our view model just communicates bi-directionally to our view uh but the rest of it is still the same",
    "start": "945600",
    "end": "952000"
  },
  {
    "text": "instead of having the view actually execute an action we just leave that to the view model so really we're sort of combining these",
    "start": "952000",
    "end": "958240"
  },
  {
    "text": "two uh design patterns because they fit pretty well together we let the view and view model be its",
    "start": "958240",
    "end": "964079"
  },
  {
    "text": "state and view we don't have to really worry about like two-way bindings we can do like one-way bindings",
    "start": "964079",
    "end": "969519"
  },
  {
    "text": "but then we get all the benefit of the state management and the sort of high-level abstraction of our data and our state within our app and we",
    "start": "969519",
    "end": "976880"
  },
  {
    "text": "let flux take care of that we let our stores keep that as our source of truth we let our actions be the ones that dictate when something's changing",
    "start": "976880",
    "end": "983360"
  },
  {
    "text": "and we let our dispatchers sort of handle the communication is that all making sense so far before",
    "start": "983360",
    "end": "988480"
  },
  {
    "text": "we dig into it like i said if you guys have questions throw them in the chat",
    "start": "988480",
    "end": "993839"
  },
  {
    "text": "so like i promise we're going to talk about those those problems that we had with the other architectures or",
    "start": "994160",
    "end": "999199"
  },
  {
    "text": "design patterns like mvvm and how flux can make those a bit easier um so the first thing we get and we've",
    "start": "999199",
    "end": "1005600"
  },
  {
    "text": "talked about this now a few times is that unit direction of of data flow meaning that we don't",
    "start": "1005600",
    "end": "1011120"
  },
  {
    "text": "have to worry about the mysterious issues of two-way bindings we can enforce a single direction",
    "start": "1011120",
    "end": "1016560"
  },
  {
    "text": "if the view model needs to update something on the view that views property should not be able",
    "start": "1016560",
    "end": "1022720"
  },
  {
    "text": "to update the same property on the view model it should be one way either from the view to the view model or from the view",
    "start": "1022720",
    "end": "1028160"
  },
  {
    "text": "from the view mode to the view or the view to the view model so for example even if we're binding to like a label",
    "start": "1028160",
    "end": "1033760"
  },
  {
    "text": "right it's just a label or text block if you're in the wpf uwp world if you have a text block",
    "start": "1033760",
    "end": "1039438"
  },
  {
    "text": "your binding should only come one way from the view model if you're doing a",
    "start": "1039439",
    "end": "1045199"
  },
  {
    "text": "text input like a text box or an entry then it should only go from the view to the view model",
    "start": "1045199",
    "end": "1051440"
  },
  {
    "text": "if you make a change in your view model you want to avoid making that as a two-way binding it should always be",
    "start": "1051440",
    "end": "1056480"
  },
  {
    "text": "one way and that way we can enforce that full control from mvvm all the way",
    "start": "1056480",
    "end": "1062400"
  },
  {
    "text": "through the flux process and follow that track of the data in one direction we also get trickle",
    "start": "1062400",
    "end": "1068880"
  },
  {
    "text": "down control and we're going to go into some more diagrams in case you didn't get enough of the ones so far",
    "start": "1068880",
    "end": "1074240"
  },
  {
    "text": "um and the the trickle down control is one of the most useful parts of it because",
    "start": "1074240",
    "end": "1079280"
  },
  {
    "text": "it also makes it easy to follow what's happening but also hit that really large scale of data and views we have a single",
    "start": "1079280",
    "end": "1086640"
  },
  {
    "text": "source of truth if we have something wrong with our state we don't have to go find what view model",
    "start": "1086640",
    "end": "1092080"
  },
  {
    "text": "like changed and what happened we just go to the store each store owns its dtos it's data",
    "start": "1092080",
    "end": "1097840"
  },
  {
    "text": "models we know if something goes wrong we go there we fix what's happening with our data and we move on",
    "start": "1097840",
    "end": "1103679"
  },
  {
    "text": "and it plays well with other ui patterns like we just said it works really well with mbbm in this scenario but it also i think more importantly",
    "start": "1103679",
    "end": "1111440"
  },
  {
    "text": "plays well with other sort of system or architecture design patterns such as dependency",
    "start": "1111440",
    "end": "1117760"
  },
  {
    "text": "injection mocking and everything else that makes that testability really easy to control",
    "start": "1117760",
    "end": "1124320"
  },
  {
    "text": "that's one of the benefits of having that separation of concerns that we get from like mvvm and nbc and",
    "start": "1124320",
    "end": "1129919"
  },
  {
    "text": "like we talked about before dependency injecting the service layer and data layer we can still get all those benefits and",
    "start": "1129919",
    "end": "1135679"
  },
  {
    "text": "it works really well and we'll take a look at that in the demos as well so but let's talk about the that trickle",
    "start": "1135679",
    "end": "1141120"
  },
  {
    "text": "down control so like we talked about the single flow right an action talks to the the dispatcher dispatcher",
    "start": "1141120",
    "end": "1146880"
  },
  {
    "text": "sends stuff to the stores that are listening to it and the stores update the views or the view models uh",
    "start": "1146880",
    "end": "1152240"
  },
  {
    "text": "via a subscription sort of model now that doesn't have to be a single sort of",
    "start": "1152240",
    "end": "1158320"
  },
  {
    "text": "loop there that doesn't mean that one view can only call one action which can only hit to an event that only one",
    "start": "1158320",
    "end": "1164799"
  },
  {
    "text": "store listens to your views can technically affect each other uh by having multiple subscriptions",
    "start": "1164799",
    "end": "1171200"
  },
  {
    "text": "happen so like in this case we have an action that happens we don't care where it came from action one send something through the",
    "start": "1171200",
    "end": "1176799"
  },
  {
    "text": "dispatcher right let's just say it's like an item added event that we just tell the dispatcher this is happening we can have two stores listen",
    "start": "1176799",
    "end": "1183919"
  },
  {
    "text": "to the same event so now we've got store one and store two listening to this event and store one is",
    "start": "1183919",
    "end": "1189200"
  },
  {
    "text": "being subscribed to by two different views so this one action actually could affect three completely",
    "start": "1189200",
    "end": "1194720"
  },
  {
    "text": "different views now in the world of dot net client apps that could be full",
    "start": "1194720",
    "end": "1199760"
  },
  {
    "text": "pages and we're even updating stuff behind the scene or that could be like sub components and stuff like that",
    "start": "1199760",
    "end": "1205120"
  },
  {
    "text": "so let's get into some more complex scenarios one view can fire two different actions so we've",
    "start": "1205120",
    "end": "1211120"
  },
  {
    "text": "got action one action two v1 sends says both of these actions are going to happen",
    "start": "1211120",
    "end": "1216240"
  },
  {
    "text": "we also have two different stores so action one is being dispatched the dispatcher takes",
    "start": "1216240",
    "end": "1221919"
  },
  {
    "text": "it and store one and two are both listening to it but store two is only listening to action two and store one is not",
    "start": "1221919",
    "end": "1228320"
  },
  {
    "text": "then view one and view two are listening to different relationships between store one and two so once again like",
    "start": "1228320",
    "end": "1234080"
  },
  {
    "text": "one underlying view just affected a whole bunch of stuff but it's all just trickled down it all",
    "start": "1234080",
    "end": "1239120"
  },
  {
    "text": "runs through the dispatcher to our source of truth which is our stores and then we're able to basically go take a look at our views and and see what's",
    "start": "1239120",
    "end": "1246000"
  },
  {
    "text": "going on now here's an important note that i always want to emphasize we always talk about the the sort of pure",
    "start": "1246000",
    "end": "1252640"
  },
  {
    "text": "flux flow of a view sends an action to the dispatcher to the store",
    "start": "1252640",
    "end": "1258320"
  },
  {
    "text": "back to the view but views are not the only thing that can execute actions so for example we've got this",
    "start": "1258320",
    "end": "1265440"
  },
  {
    "text": "scenario here back to the sort of net example where we've got our view and view model totally separate and vm style with",
    "start": "1265440",
    "end": "1272080"
  },
  {
    "text": "single wave bindings view models can send stuff to actions that's great that's our perfect",
    "start": "1272080",
    "end": "1277840"
  },
  {
    "text": "beautiful super easy flow that we've got set up but i could have a background event also",
    "start": "1277840",
    "end": "1283600"
  },
  {
    "text": "fire in action and it could be the same action so some examples of that we have a websocket connection and this is where i",
    "start": "1283600",
    "end": "1290080"
  },
  {
    "text": "i really dug into the sort of uh flux scenario for the first time building a real-time chat app so if i",
    "start": "1290080",
    "end": "1298159"
  },
  {
    "text": "am typing a message in the app and i hit send that's an action from a view and it sends it to the dispatcher we say hey",
    "start": "1298159",
    "end": "1304400"
  },
  {
    "text": "we're sending a message the action maybe sends that to a server that does something with it the dispatcher then goes hey we have a",
    "start": "1304400",
    "end": "1310159"
  },
  {
    "text": "new message to add the store goes hey i got your message you just sent let me add that to local state so now your",
    "start": "1310159",
    "end": "1315600"
  },
  {
    "text": "message is going to be propagated to your viewmodel and it's going to show up in your list but when someone else sends that",
    "start": "1315600",
    "end": "1322159"
  },
  {
    "text": "information or sends a message from their app we receive that over something like a websocket event",
    "start": "1322159",
    "end": "1328000"
  },
  {
    "text": "so now i sent my message and that stays within the loop if i receive a message from you your",
    "start": "1328000",
    "end": "1334159"
  },
  {
    "text": "message can just fire an action the same way that me sending it does and that means i just get the event i say from my my code let's say we're using",
    "start": "1334159",
    "end": "1341120"
  },
  {
    "text": "something like signalr we're subscribing to an event on like message received we say hey on message",
    "start": "1341120",
    "end": "1346159"
  },
  {
    "text": "received just goes fire this action and that's all we have to care about we don't have to say hey on message received go",
    "start": "1346159",
    "end": "1351840"
  },
  {
    "text": "do this thing and put it in state and then like let's make sure that actually updates the view we just say we gotta we got that",
    "start": "1351840",
    "end": "1357840"
  },
  {
    "text": "websocket event fire the action and the rest of it's handled by our setup the same way that it is if the event came from the view",
    "start": "1357840",
    "end": "1364080"
  },
  {
    "text": "uh another example of that is like a location update event if you're building a map app your update could come from",
    "start": "1364080",
    "end": "1371360"
  },
  {
    "text": "the user changing the position of the map or it could come from their actual location changing on their",
    "start": "1371360",
    "end": "1376960"
  },
  {
    "text": "device which is not directly from a view similarly from an accelerometer event so",
    "start": "1376960",
    "end": "1383200"
  },
  {
    "text": "if i'm doing something and moving my phone in this scenario those events that are firing in the background can update the",
    "start": "1383200",
    "end": "1389360"
  },
  {
    "text": "state and update the view simply by just saying hey this action happened right on the other side of things views or",
    "start": "1389360",
    "end": "1396240"
  },
  {
    "text": "view models in this case are not the only things that can subscribe to stores right again we've talked about the",
    "start": "1396240",
    "end": "1402080"
  },
  {
    "text": "perfect flow view action dispatcher store but in this scenario the view model isn't the only thing that can listen to",
    "start": "1402080",
    "end": "1408559"
  },
  {
    "text": "a change of state we might have a background task that we want to execute whenever we actually",
    "start": "1408559",
    "end": "1414000"
  },
  {
    "text": "uh fires and update from our store so we could have a view execute a command on our view model",
    "start": "1414000",
    "end": "1420720"
  },
  {
    "text": "which then fires an action globally it does its business logic the dispatcher takes that and says hey store",
    "start": "1420720",
    "end": "1426880"
  },
  {
    "text": "you this event just happened here's the data go update your state but a great example of this would be",
    "start": "1426880",
    "end": "1432720"
  },
  {
    "text": "like doing a data sync remotely so when my local state updates i could",
    "start": "1432720",
    "end": "1437760"
  },
  {
    "text": "also go update my state across my apis or something like that and i think that use case is really",
    "start": "1437760",
    "end": "1443919"
  },
  {
    "text": "really interesting because you know the the sort of offline data syncing has been a challenge in the mobile world that no one has done really",
    "start": "1443919",
    "end": "1450240"
  },
  {
    "text": "well in a long time and this is the first solution that i've had that i was actually really happy with with the way that it was set up",
    "start": "1450240",
    "end": "1456880"
  },
  {
    "text": "because it makes it super easy to say like my app state can also just be over here in some remote data sync but it can",
    "start": "1456880",
    "end": "1462880"
  },
  {
    "text": "also be just updating like a local database so if i have my my local state in the store in memory i",
    "start": "1462880",
    "end": "1469919"
  },
  {
    "text": "can also go update that on an actual like sql light or some sort of document store just on my",
    "start": "1469919",
    "end": "1476159"
  },
  {
    "text": "device which you know it's an amazing setup to have because i now don't have to care",
    "start": "1476159",
    "end": "1481840"
  },
  {
    "text": "about the rest of that flow but i know if something goes wrong with setting local data i go to my source of",
    "start": "1481840",
    "end": "1487440"
  },
  {
    "text": "truth which is my state in the store",
    "start": "1487440",
    "end": "1491520"
  },
  {
    "text": "cool so assuming that all makes sense i hope you guys are are done with block",
    "start": "1493039",
    "end": "1498559"
  },
  {
    "text": "diagrams because i sure am um so let's talk about an actual demo",
    "start": "1498559",
    "end": "1503919"
  },
  {
    "text": "so uh what i'm going to walk you through is a xamarin forms app that uses flux and mvvm like we talked",
    "start": "1503919",
    "end": "1511520"
  },
  {
    "text": "about and also in version of control and dependency injection all of this stuff is on github uh you",
    "start": "1511520",
    "end": "1517679"
  },
  {
    "text": "can go grab it from my github it's slash swap pirate xamarin.flux if you want to follow along",
    "start": "1517679",
    "end": "1522720"
  },
  {
    "text": "uh but i'll talk you through the the project structure before we really dig into the code itself and start to",
    "start": "1522720",
    "end": "1528640"
  },
  {
    "text": "run this thing so we we have a basic sort of",
    "start": "1528640",
    "end": "1533880"
  },
  {
    "text": "xaml.net standard xamarin forms template it's the usual stuff we have our uh dotnet center library we",
    "start": "1533880",
    "end": "1541279"
  },
  {
    "text": "have an android project and we have an ios project everything that we're doing fluxside is",
    "start": "1541279",
    "end": "1546880"
  },
  {
    "text": "all in the shared code right so we're still getting the benefits of everything else we do where we don't really have to worry about like",
    "start": "1546880",
    "end": "1552640"
  },
  {
    "text": "android specific stuff or ios specific stuff um but let's talk about like the flux specific components in here so",
    "start": "1552640",
    "end": "1559840"
  },
  {
    "text": "we have our actions in a folder we have an i action and a to do action we have an action type for to do action",
    "start": "1559840",
    "end": "1565919"
  },
  {
    "text": "types it's basically just like identifiers for what the action is we have our model",
    "start": "1565919",
    "end": "1570960"
  },
  {
    "text": "which is a to do app we have our startup stuff which is all like inversion of control config for dependency injection",
    "start": "1570960",
    "end": "1576799"
  },
  {
    "text": "and all that good stuff and then we have our store in this case we have the event args for it we have a base",
    "start": "1576799",
    "end": "1582960"
  },
  {
    "text": "class to handle some of the binding stuff and we have our uh to do store",
    "start": "1582960",
    "end": "1588400"
  },
  {
    "text": "and then we have our view models we have a view model locator for pulling it out for dependency injection so we can just",
    "start": "1588400",
    "end": "1594080"
  },
  {
    "text": "actually bind directly to an injected version of the v model we have our to-do list page view model",
    "start": "1594080",
    "end": "1599440"
  },
  {
    "text": "and then below that we have our views so what we're actually creating here is a super basic app your",
    "start": "1599440",
    "end": "1606159"
  },
  {
    "text": "most traditional basically hello world in in the mobile world of creating a to-do",
    "start": "1606159",
    "end": "1611840"
  },
  {
    "text": "app so we can do things like viewer items we can create items by giving it a name",
    "start": "1611840",
    "end": "1617039"
  },
  {
    "text": "we can then say that it's uh toggle to complete or not we can delete them we can edit them we",
    "start": "1617039",
    "end": "1624000"
  },
  {
    "text": "can populate it with a whole bunch of stuff um we we can delete all of the ones that",
    "start": "1624000",
    "end": "1629520"
  },
  {
    "text": "are completed and we can toggle all of them to true or false right so like in theory we should",
    "start": "1629520",
    "end": "1634720"
  },
  {
    "text": "be able to say like hey all of these are complete now also wipe them um so let's go take a look at the actual",
    "start": "1634720",
    "end": "1641440"
  },
  {
    "text": "source code so what i wanted to do see if this is",
    "start": "1641440",
    "end": "1648640"
  },
  {
    "text": "the right one i've got two versions of it up right now this is the this is not the one i don't want to spoil it so we've got um this empty solution here",
    "start": "1648640",
    "end": "1656159"
  },
  {
    "text": "and what i want to show is that instead of showing you what it looks like in the end i want to show you what it looks like",
    "start": "1656159",
    "end": "1663279"
  },
  {
    "text": "without all of the flux stuff so let me start by going into views and let's go take a look at our to-do list",
    "start": "1663279",
    "end": "1669200"
  },
  {
    "text": "view so everything we just saw right now this is no flux this is just a pretty straight up",
    "start": "1669200",
    "end": "1674799"
  },
  {
    "text": "mvvm scenario let me know if that's big enough to view too i can always change it",
    "start": "1674799",
    "end": "1680399"
  },
  {
    "text": "but essentially what we have here is a single page and we've got a list view and we've got our binding context set up",
    "start": "1680399",
    "end": "1687679"
  },
  {
    "text": "which is saying that we're going to go to our static resources locator and get that to-do list page i'll show you where that lives in a second",
    "start": "1687679",
    "end": "1694159"
  },
  {
    "text": "we then have our toolbar items for like populating uh creating a new one clearing the ones that are completed and",
    "start": "1694159",
    "end": "1701039"
  },
  {
    "text": "toggling all of them as either completed or not completed our list view is then binding to the items property of",
    "start": "1701039",
    "end": "1706960"
  },
  {
    "text": "our to-do list page and then our data template is just a text cell where we're just saying get the",
    "start": "1706960",
    "end": "1713440"
  },
  {
    "text": "text of the to do item and if it's complete we're using a string format to say",
    "start": "1713440",
    "end": "1719360"
  },
  {
    "text": "it is complete true or false we then also added context actions to these to be able to delete",
    "start": "1719360",
    "end": "1724559"
  },
  {
    "text": "them toggle them or edit them and that basically exists as",
    "start": "1724559",
    "end": "1730399"
  },
  {
    "text": "a like on android it'll be like a tap and hold thing and it changes the toolbar out",
    "start": "1730399",
    "end": "1735600"
  },
  {
    "text": "and on ios that exists as the like swipeable things although you",
    "start": "1735600",
    "end": "1740960"
  },
  {
    "text": "can do that on both now i'm also just getting my phone set up so that way i can actually run it for you",
    "start": "1740960",
    "end": "1746559"
  },
  {
    "text": "and show you on visor i'm running on windows right now so it's going to be hard for me to show you the ios app i don't have my mac running right next",
    "start": "1746559",
    "end": "1752880"
  },
  {
    "text": "to me but i'll be able to show you android let me clear all these so anyway that's",
    "start": "1752880",
    "end": "1758480"
  },
  {
    "text": "our view um let's go take a look at our view model that's behind it so we have a to-do list page view model",
    "start": "1758480",
    "end": "1765600"
  },
  {
    "text": "um looks like it just didn't grab my stuff and see if i can just build it uh just so we can get rid of some of",
    "start": "1765600",
    "end": "1771039"
  },
  {
    "text": "these squiggles oh cool",
    "start": "1771039",
    "end": "1775759"
  },
  {
    "text": "yeah i know i don't i don't have it set up on this machine um cliff uh for using hot restart in",
    "start": "1778880",
    "end": "1784960"
  },
  {
    "text": "xamarin uh that and i also don't have my iphone next to me uh to be able to run so i would need to run it on the simulator",
    "start": "1784960",
    "end": "1791440"
  },
  {
    "text": "um okay either way i mean it's gonna look exactly the same it's like the most basic app in the world",
    "start": "1791440",
    "end": "1796640"
  },
  {
    "text": "one that arguably should not be over architected with flux uh let me try to figure out why",
    "start": "1796640",
    "end": "1802000"
  },
  {
    "text": "all of a sudden i got all these squiggles when i ran this this morning let me restore nuget packages here i",
    "start": "1802000",
    "end": "1808559"
  },
  {
    "text": "mean i can talk through it with the squiggles either way um [Applause]",
    "start": "1808559",
    "end": "1816319"
  },
  {
    "text": "rebuild all failed that's lovely okay either way we'll let's just talk through it and ignore the squiggles",
    "start": "1818799",
    "end": "1825279"
  },
  {
    "text": "so we have a uh private observable collection we have commands for the create toggle",
    "start": "1825279",
    "end": "1831039"
  },
  {
    "text": "toggle all delete um and i wanted to make this as like unopinionated as possible in terms of",
    "start": "1831039",
    "end": "1836720"
  },
  {
    "text": "like frameworks and libraries there are much simpler ways to do this stuff now like you could just use fodie to handle",
    "start": "1836720",
    "end": "1842720"
  },
  {
    "text": "the way that i'm doing like the i notified property change for the mvvm but like i said i didn't want to introduce libraries",
    "start": "1842720",
    "end": "1849360"
  },
  {
    "text": "that people might not understand in the sample so we have the create command and basically we're just using the relay command from",
    "start": "1849360",
    "end": "1855440"
  },
  {
    "text": "nvvm lite uh and then we're using alan richie's user dialogues uh which is like the first library i always",
    "start": "1855440",
    "end": "1862080"
  },
  {
    "text": "add in every xamarin app i ever build uh to be able to say from here we just want to prompt the user",
    "start": "1862080",
    "end": "1867760"
  },
  {
    "text": "um with some actions and then we're going to create our our to-do from here and then",
    "start": "1867760",
    "end": "1873360"
  },
  {
    "text": "basically we register all these commands and they all actually do the business logic within them so you'll see like in this case we get the items and",
    "start": "1873360",
    "end": "1880640"
  },
  {
    "text": "we take the first one and we update the text and if we delete it then we just remove it",
    "start": "1880640",
    "end": "1886080"
  },
  {
    "text": "from the items and this items is our observable collection which means when we bind to it any changes",
    "start": "1886080",
    "end": "1891679"
  },
  {
    "text": "made um to our observable collection behind the scenes will also propagate because we're two-way binding everything",
    "start": "1891679",
    "end": "1898640"
  },
  {
    "text": "so that's all it is we just have that list and we have all of these commands that are actually changing things on it now let",
    "start": "1898640",
    "end": "1904000"
  },
  {
    "text": "me walk you through the setup so from the app xaml",
    "start": "1904000",
    "end": "1909360"
  },
  {
    "text": "we register a viewmodel locator which is uh going to be registered as a static",
    "start": "1909360",
    "end": "1914799"
  },
  {
    "text": "resource called locator which is why in our page we can set the binding to locator and",
    "start": "1914799",
    "end": "1919919"
  },
  {
    "text": "then we're going to grab the specific properties off of it so if we go look at that locator we're",
    "start": "1919919",
    "end": "1925120"
  },
  {
    "text": "basically saying like go get an instance of our to-do list page view model and",
    "start": "1925120",
    "end": "1930320"
  },
  {
    "text": "we'll get the other one to build because i have it running right now um but essentially we're just saying go",
    "start": "1930320",
    "end": "1935760"
  },
  {
    "text": "get me an instance of this which will handle all of the dependency tree crawling and creating and stuff like",
    "start": "1935760",
    "end": "1941440"
  },
  {
    "text": "that um and then our ioc config basically says that we can register actions and",
    "start": "1941440",
    "end": "1946720"
  },
  {
    "text": "stores which we'll get into and then we can register our view model so our view model doesn't need anything",
    "start": "1946720",
    "end": "1952799"
  },
  {
    "text": "injected into it because everything is just running from here everything is just local state within a view model",
    "start": "1952799",
    "end": "1958640"
  },
  {
    "text": "now that means if we wanted to do more with this such as like creating a new page for editing the details instead of",
    "start": "1958640",
    "end": "1963760"
  },
  {
    "text": "doing it all on one we have to be able to start passing those parameters around handle understanding the state in an",
    "start": "1963760",
    "end": "1970000"
  },
  {
    "text": "abstraction so like if i edit the name on a different page how do i make sure that that name is edited when i get back to this view",
    "start": "1970000",
    "end": "1976320"
  },
  {
    "text": "model that's the sort of challenge that we can solve with flux uh let's get out of this one because i'm sick of all the red squiggles",
    "start": "1976320",
    "end": "1982640"
  },
  {
    "text": "um and i was hoping to be able to actually type some of this up but it seems like those builds are gonna be annoying so we'll just walk through the",
    "start": "1982640",
    "end": "1988960"
  },
  {
    "text": "completed one um so like i said we have all these",
    "start": "1988960",
    "end": "1994799"
  },
  {
    "text": "things now added the original one was just the viewmodel and the view and the viewmodel locator in this startup",
    "start": "1994799",
    "end": "2000159"
  },
  {
    "text": "so we added a few more things here we have our actions action types and stores those are the",
    "start": "2000159",
    "end": "2005760"
  },
  {
    "text": "biggest changes and then we also have some new things set up in ioc config so let's first go take a look at our",
    "start": "2005760",
    "end": "2011919"
  },
  {
    "text": "to-do list page view model so the biggest differences here are that we still have all these commands",
    "start": "2011919",
    "end": "2017600"
  },
  {
    "text": "but we we also now have private read only to do store and to do actions now the reason for",
    "start": "2017600",
    "end": "2023279"
  },
  {
    "text": "that is again like our view model is able to execute actions so we need a reference to the class that controls",
    "start": "2023279",
    "end": "2028720"
  },
  {
    "text": "these specific actions because we can sort of scope them into our domain we then also need a reference to the",
    "start": "2028720",
    "end": "2034720"
  },
  {
    "text": "store that way we can subscribe to changes to it and be able to update uh the things that are happening behind the scenes and then",
    "start": "2034720",
    "end": "2040880"
  },
  {
    "text": "we also have our items and we have the same commands and the biggest difference within each one of these commands such as the create",
    "start": "2040880",
    "end": "2047120"
  },
  {
    "text": "command is that we're not actually changing that items property anymore we're not saying okay we're going to",
    "start": "2047120",
    "end": "2053679"
  },
  {
    "text": "create it so tell the items to add a new one instead we just say hey to do actions we're",
    "start": "2053679",
    "end": "2059440"
  },
  {
    "text": "sending we're adding a new to do and here's the text that the user entered same thing for edit we just say we do",
    "start": "2059440",
    "end": "2065200"
  },
  {
    "text": "the prompt in the ui because this is all ui-based stuff and we say hey actions that we edited this one here's",
    "start": "2065200",
    "end": "2070960"
  },
  {
    "text": "the id and here's the text toggling we're just saying hey toggle this one by its id uh toggle all just sends an action to do",
    "start": "2070960",
    "end": "2078079"
  },
  {
    "text": "all of them you'll basically see like all of these commands are now just abstracted into our actions uh this could be done even more",
    "start": "2078079",
    "end": "2084079"
  },
  {
    "text": "abstracted where basically we don't even have the commands and the commands actually exist within the actions but",
    "start": "2084079",
    "end": "2089118"
  },
  {
    "text": "that could be a little bit overkill um and then let's go take a look at the actual updates here",
    "start": "2089119",
    "end": "2094320"
  },
  {
    "text": "so the biggest difference is uh our constructor now actually takes dependencies",
    "start": "2094320",
    "end": "2100000"
  },
  {
    "text": "so we're injecting a to do store and to do actions and we set those but now we're also subscribing to this",
    "start": "2100000",
    "end": "2106880"
  },
  {
    "text": "on omitted event if you remember the flow we have an action that calls to the dispatcher",
    "start": "2106880",
    "end": "2112240"
  },
  {
    "text": "our dispatcher then sends events out and our stores can listen to them but then our",
    "start": "2112240",
    "end": "2119200"
  },
  {
    "text": "stores emit those events once they're done updating their state they need to let everyone know like hey we're good to go like go get all the latest stuff",
    "start": "2119200",
    "end": "2125920"
  },
  {
    "text": "um so that's where we handled this subscription so now our view model down here we can do basic switches or you can",
    "start": "2125920",
    "end": "2131680"
  },
  {
    "text": "handle this with better typing but in this case we're grabbing the event type which is a string and we have that list of to do action",
    "start": "2131680",
    "end": "2138079"
  },
  {
    "text": "types like i mentioned before and these are all just identifiers that are unique everywhere across everything",
    "start": "2138079",
    "end": "2145839"
  },
  {
    "text": "yeah yeah brandon thanks we're already running into issues with our first demo i'm not even gonna try to get hot",
    "start": "2145839",
    "end": "2151680"
  },
  {
    "text": "restart working um so uh in this in these events right",
    "start": "2151680",
    "end": "2157359"
  },
  {
    "text": "we have our ad to do and when we get that event emitted right this is the event that we fired from the",
    "start": "2157359",
    "end": "2162800"
  },
  {
    "text": "beginning from the action from here but when it comes all the way back around at the end of that loop we're just going to toast to say like",
    "start": "2162800",
    "end": "2168800"
  },
  {
    "text": "hey we added this item hey we deleted these ones and you can see for each one of these we're",
    "start": "2168800",
    "end": "2173920"
  },
  {
    "text": "basically just letting the user know that that command happened or if we get an error we can also handle that in the ui state",
    "start": "2173920",
    "end": "2182320"
  },
  {
    "text": "so that means that we can handle errors at the global state level and not have to worry about",
    "start": "2182320",
    "end": "2187599"
  },
  {
    "text": "that maybe necessarily making them view specific although we can certainly have both if you have error messages you need",
    "start": "2187599",
    "end": "2193119"
  },
  {
    "text": "to show that like something happened in the ui and aren't related to data that's fine um but we can actually take",
    "start": "2193119",
    "end": "2199200"
  },
  {
    "text": "all of the errors just as something that's an observable part of the state from the store so if some action came through and",
    "start": "2199200",
    "end": "2205599"
  },
  {
    "text": "something went wrong we can let you know that that something happened and i'll try to demo that a little bit as well",
    "start": "2205599",
    "end": "2210720"
  },
  {
    "text": "so let's start from the top and sort of follow along with this flow um and we can step into let's say this",
    "start": "2210720",
    "end": "2219119"
  },
  {
    "text": "add to do so we are dependency injecting our to do actions and we can now step into this ad to do",
    "start": "2219119",
    "end": "2226720"
  },
  {
    "text": "now here's an interesting thing about xamarin forms in particular is that we essentially kind of have a",
    "start": "2226720",
    "end": "2232400"
  },
  {
    "text": "dispatcher built into the tooling although i heard rumors of this being deprecated",
    "start": "2232400",
    "end": "2237680"
  },
  {
    "text": "so if that's the case the toolkit i put together also has a dispatcher but we have the messaging center in xamarin",
    "start": "2237680",
    "end": "2243599"
  },
  {
    "text": "forums which is really cool so that means that we can just say hey messaging center uh",
    "start": "2243599",
    "end": "2248720"
  },
  {
    "text": "dispatch this event right the messaging center is our dispatcher you get one dispatcher for your entire app it's",
    "start": "2248720",
    "end": "2254320"
  },
  {
    "text": "perfect it fits exactly with our flux model and we already have the tool we're saying like hey we're going to fire uh this from our i",
    "start": "2254320",
    "end": "2261119"
  },
  {
    "text": "actions and we're going to send along the type of string so basically we're saying that go fire",
    "start": "2261119",
    "end": "2266800"
  },
  {
    "text": "this action type or dispatch this event we did the ad to do and here's the value",
    "start": "2266800",
    "end": "2272880"
  },
  {
    "text": "now you could always do some other things in here in terms of like the business logic that we talked about to do's can do or certainty is reading",
    "start": "2272880",
    "end": "2279119"
  },
  {
    "text": "the wrong word actions can actually do things they're not necessarily just there for omitting events",
    "start": "2279119",
    "end": "2284320"
  },
  {
    "text": "so for example here we could do something like send the new to do item to an api",
    "start": "2284320",
    "end": "2291119"
  },
  {
    "text": "and then once it's done then dispatch the event",
    "start": "2291119",
    "end": "2298000"
  },
  {
    "text": "some people like to do it this way where the sort of external um applications are or actions are",
    "start": "2298000",
    "end": "2303839"
  },
  {
    "text": "firing and doing all that here some people actually like to do that uh in the uh in the stores and have that",
    "start": "2303839",
    "end": "2310079"
  },
  {
    "text": "all just related to state logic um but in this case like we can always do more but because again this is the",
    "start": "2310079",
    "end": "2316400"
  },
  {
    "text": "most simple app all we're worrying about is just doing the dispatch at the end but essentially an action's responsibility",
    "start": "2316400",
    "end": "2322000"
  },
  {
    "text": "is to do whatever it needs to do first and then tell the stores here's what you need from this action",
    "start": "2322000",
    "end": "2327760"
  },
  {
    "text": "and here's the data so this is where the biggest separation is because we dependency injected this which means we can already separate that",
    "start": "2327760",
    "end": "2334480"
  },
  {
    "text": "we can mock this out we could always just inject i actions separately um but the biggest separation is that",
    "start": "2334480",
    "end": "2341200"
  },
  {
    "text": "from here this action has no idea what stores are actually listening to the events that",
    "start": "2341200",
    "end": "2346240"
  },
  {
    "text": "it's dispatching so let's go take a look at our to-do store",
    "start": "2346240",
    "end": "2352240"
  },
  {
    "text": "so a store basically is just an observable collection of data but it's not observable in the way that it's like a",
    "start": "2352240",
    "end": "2358720"
  },
  {
    "text": "two-way setup or we're using like a reactive setup and doing chaining of observables it's very sort of explicit uh or verbose",
    "start": "2358720",
    "end": "2366560"
  },
  {
    "text": "so we have this base store which basically i just set up with a generic type this is in that toolkit just you",
    "start": "2366560",
    "end": "2372160"
  },
  {
    "text": "know like if you don't want to write this yourself but we have a base store of type t we have that on omitted event that's what our",
    "start": "2372160",
    "end": "2378480"
  },
  {
    "text": "view models we're listening to we have the t type of data that's the observable part here you could always",
    "start": "2378480",
    "end": "2384240"
  },
  {
    "text": "have other data structures in here too that are observable it doesn't have to be one property uh in this case this is a very basic one",
    "start": "2384240",
    "end": "2390800"
  },
  {
    "text": "and then we also are keeping track of the error now we also have the emit event and we admit it by calling the animated.info",
    "start": "2390800",
    "end": "2397520"
  },
  {
    "text": "if it's actually registered and then we also have the ability here to handle the subscriptions to",
    "start": "2397520",
    "end": "2402720"
  },
  {
    "text": "the different types of events so basically when we create a store uh what we do is to do store",
    "start": "2402720",
    "end": "2411119"
  },
  {
    "text": "in the constructor we're saying hey we're going to subscribe to these events from the dispatcher so subscribe to the ad to do when the",
    "start": "2411119",
    "end": "2416560"
  },
  {
    "text": "dispatcher says that a to do is added and it's going to pass in a string we want to handle that",
    "start": "2416560",
    "end": "2421760"
  },
  {
    "text": "so that subscription is then going to go all the way through this receive event and this is also generic so we have this",
    "start": "2421760",
    "end": "2427440"
  },
  {
    "text": "type data but this type this t data is going to match whatever we put in here and it could also be",
    "start": "2427440",
    "end": "2432800"
  },
  {
    "text": "empty like in some of these cases but let's say like in the case of the add to do when we get the",
    "start": "2432800",
    "end": "2438720"
  },
  {
    "text": "type coming through of ad to do we're going to go and update that data so this is similar to what we were doing previously",
    "start": "2438720",
    "end": "2444079"
  },
  {
    "text": "just in the view model but now we're doing it here in the store so now we do that for each of our other",
    "start": "2444079",
    "end": "2450640"
  },
  {
    "text": "types and basically we can just cast the data type to what we explicitly need um and then if anything happens in an",
    "start": "2450640",
    "end": "2457040"
  },
  {
    "text": "exception we're setting the state of the error but all the way under that we're always going to call the receive event which is",
    "start": "2457040",
    "end": "2463200"
  },
  {
    "text": "where our emitting happens that sends it back down to the view model which means all of our logic here",
    "start": "2463200",
    "end": "2468640"
  },
  {
    "text": "for updating local state happens it all runs first because we don't want to tell the view models that something's ready",
    "start": "2468640",
    "end": "2474160"
  },
  {
    "text": "when it's not and then at the very end it's emitted so that means even if something is thrown we're going to get that error now",
    "start": "2474160",
    "end": "2480880"
  },
  {
    "text": "what i want to do is show you just one more thing and then we'll run this um well i'm just getting my",
    "start": "2480880",
    "end": "2488880"
  },
  {
    "text": "my phone set up here so the other things that we the only other things we change is that instead of just registering the",
    "start": "2488880",
    "end": "2494720"
  },
  {
    "text": "view model for dependency injection we also registered a store uh in the actions you could always just register all of your other stores here",
    "start": "2494720",
    "end": "2501119"
  },
  {
    "text": "that way they can all be injected and stuff like that but some other points to sort of demonstrate that we talked about",
    "start": "2501119",
    "end": "2506800"
  },
  {
    "text": "um view models can listen to multiple stores all i'd have to do in this case is just inject another store type here",
    "start": "2506800",
    "end": "2512160"
  },
  {
    "text": "and we can listen to it it can also send to multiple different action types it's up to you how you sort of like",
    "start": "2512160",
    "end": "2517200"
  },
  {
    "text": "scope your stores and your actions some people prefer to create a store for every data type which is what this model",
    "start": "2517200",
    "end": "2523119"
  },
  {
    "text": "fits well because you just get that data property in the generic and that's all you have to worry about and some people prefer to scope their",
    "start": "2523119",
    "end": "2529839"
  },
  {
    "text": "stores to more of a domain and it fits really well with ddd in that scenario where your domain",
    "start": "2529839",
    "end": "2535040"
  },
  {
    "text": "of of information is within the store and that way your views can also be aware of what domain they belong to",
    "start": "2535040",
    "end": "2541040"
  },
  {
    "text": "as well and that's how you sort of bridge that abstraction gap to say like in this case if we had the",
    "start": "2541040",
    "end": "2546240"
  },
  {
    "text": "to do item and as one of our domains then we know that the to do store is going to have everything we need around",
    "start": "2546240",
    "end": "2552560"
  },
  {
    "text": "that domain and we can worry about it there but in this case it's so simple we've just got one type that we're worried about",
    "start": "2552560",
    "end": "2558319"
  },
  {
    "text": "and we're off and running so let me get visor running",
    "start": "2558319",
    "end": "2564000"
  },
  {
    "text": "hopefully it'll behave with me and we're going to spin this up and",
    "start": "2564000",
    "end": "2569200"
  },
  {
    "text": "actually debug it so what i want to do is i'm going to add a breakpoint",
    "start": "2569200",
    "end": "2574720"
  },
  {
    "text": "in our create just waiting for it to spin up before i",
    "start": "2574720",
    "end": "2580400"
  },
  {
    "text": "show you my screen although look how cute my dog is looking at me so handsome",
    "start": "2580400",
    "end": "2587599"
  },
  {
    "text": "all right we're halfway through building here so we're just gonna step through and you can sort of see the whole flow the important thing though is that i",
    "start": "2588160",
    "end": "2593680"
  },
  {
    "text": "can't just step through all the way to here so what i'm going to want to do is add a break point uh to this side as well",
    "start": "2593680",
    "end": "2601040"
  },
  {
    "text": "we're just about done and at least this one we don't have squigglies and everything's building and deploying",
    "start": "2601040",
    "end": "2606800"
  },
  {
    "text": "all right let's pull up our app here so we've got an empty list if i go to create a new one we get that",
    "start": "2606800",
    "end": "2612000"
  },
  {
    "text": "dialogue thank you alan for all of your work on this and i will say that this is hello ndc",
    "start": "2612000",
    "end": "2618240"
  },
  {
    "text": "that's my to-do item so i clicked done which means that we got the results so just to sort of show",
    "start": "2618240",
    "end": "2623599"
  },
  {
    "text": "you the state of what's going on here our prompt results that we got the text hello ndc so we're going to tell our",
    "start": "2623599",
    "end": "2629680"
  },
  {
    "text": "to-do actions that we're adding one with this text so if we step into this we're now going",
    "start": "2629680",
    "end": "2635839"
  },
  {
    "text": "to send over the messaging center that we're going to admit or dispatch this event the ad to do",
    "start": "2635839",
    "end": "2641520"
  },
  {
    "text": "with this text value so we have 10 we land here so now we're within our to do",
    "start": "2641520",
    "end": "2646880"
  },
  {
    "text": "store we've received our event and we're going to check the event type in this case that's that add to do",
    "start": "2646880",
    "end": "2652240"
  },
  {
    "text": "identifier and our data is the string hello ndc so we're going to end up in this case",
    "start": "2652240",
    "end": "2657599"
  },
  {
    "text": "and we're going to add to our data which is currently an empty collection and then we're going to come",
    "start": "2657599",
    "end": "2663920"
  },
  {
    "text": "down here and we're going to call receive event which if we step into and we're going to call that emit",
    "start": "2663920",
    "end": "2671040"
  },
  {
    "text": "which then is actually emitting the invoke so let me go add a breakpoint down here",
    "start": "2671040",
    "end": "2677839"
  },
  {
    "text": "so in our view model now the full loop has happened our view model called the action the action dispatched the event to the store",
    "start": "2678000",
    "end": "2684640"
  },
  {
    "text": "the store has updated its data and now when we step through we're going to switch over it's",
    "start": "2684640",
    "end": "2690319"
  },
  {
    "text": "still the same action type we don't have an error so we're going to toast that item was added let me pull this back up here so you can",
    "start": "2690319",
    "end": "2698560"
  },
  {
    "text": "see that item added down here at the very bottom and we have our item actually added oh man i'm on the free version okay",
    "start": "2698560",
    "end": "2706319"
  },
  {
    "text": "now let's let me show you sort of that error state as well so like i said managing errors in apps",
    "start": "2706319",
    "end": "2712880"
  },
  {
    "text": "is surprisingly difficult especially at large scale but if we let our stores handle the scope of those errors",
    "start": "2712880",
    "end": "2719040"
  },
  {
    "text": "then we can get really really far with it so for example in our to do store we have this catch",
    "start": "2719040",
    "end": "2724640"
  },
  {
    "text": "down here if something goes wrong with our data locally we're going to catch that and set the state of the error but we're still going to emit it",
    "start": "2724640",
    "end": "2730880"
  },
  {
    "text": "so i'm just going to go up here and we're going to throw an exception throw new exception and we'll set the",
    "start": "2730880",
    "end": "2737520"
  },
  {
    "text": "message to be like whoops that means none of this stuff's",
    "start": "2737520",
    "end": "2742720"
  },
  {
    "text": "going to run the second we get to receiving the event we're going to throw an exception",
    "start": "2742720",
    "end": "2748078"
  },
  {
    "text": "what i want to show is this breakpoint all right we're back up and running",
    "start": "2751280",
    "end": "2756640"
  },
  {
    "text": "so this will happen on any event that i trigger so i'm just going to hit like the populate button here we're going to throw our exception so",
    "start": "2756640",
    "end": "2764079"
  },
  {
    "text": "now we still omitted the event so we're in our view model back here again on our store omitted",
    "start": "2764079",
    "end": "2769839"
  },
  {
    "text": "the event type was still add to do because that was what happened but we have an error so we don't want to say",
    "start": "2769839",
    "end": "2775599"
  },
  {
    "text": "that the item was added instead we fall into this case where we do have an error and we have whoops",
    "start": "2775599",
    "end": "2780640"
  },
  {
    "text": "which means that i can now do an alert with that error and manage that in state",
    "start": "2780640",
    "end": "2786640"
  },
  {
    "text": "just oh this is going to run for a whole bunch of them because i did the one that does a ton of actions",
    "start": "2786839",
    "end": "2792319"
  },
  {
    "text": "let me get rid of these break points oh no i shouldn't have used the populate",
    "start": "2792319",
    "end": "2797520"
  },
  {
    "text": "one it's sending like a thousand of these okay so we've got i think 20 error",
    "start": "2797520",
    "end": "2802560"
  },
  {
    "text": "messages that just popped up um and if i just keep slapping okay you can see the shadows",
    "start": "2802560",
    "end": "2807680"
  },
  {
    "text": "slowly dissolve which i always think is funny uh but that's how we handle our errors so that's all of the sort of basics",
    "start": "2807680",
    "end": "2815280"
  },
  {
    "text": "of the flux setup now that's all xamarin forms with the mvvm side so now you know i promised some some bonus demo",
    "start": "2815280",
    "end": "2822960"
  },
  {
    "text": "stuff uh so let's let's talk about uh our bonus demo which is going to be sort of a comment maui",
    "start": "2822960",
    "end": "2830319"
  },
  {
    "text": "environment um with with flux now this is also on on github uh it's under",
    "start": "2830319",
    "end": "2838079"
  },
  {
    "text": "comment.flux i originally did this way before maui was even announced even before it was announced at mvp summit um and it's",
    "start": "2838079",
    "end": "2846319"
  },
  {
    "text": "using the experimental side of comet which is then going to be folded into maui and really common is just an entirely",
    "start": "2846319",
    "end": "2853760"
  },
  {
    "text": "new way of thinking about state management and building uis and building apps",
    "start": "2853760",
    "end": "2859119"
  },
  {
    "text": "really um and so what i have here is that video and i can play it again um where we have a similar thing where",
    "start": "2859119",
    "end": "2864960"
  },
  {
    "text": "we can add to do items and we can toggle them but this is all running on comment now let me uh",
    "start": "2864960",
    "end": "2871040"
  },
  {
    "text": "take you all over there so comment was built by clancy he's uh one of the smartest people i've",
    "start": "2871040",
    "end": "2878000"
  },
  {
    "text": "ever met uh doing some wonderful things with net uis and the idea here is that instead of",
    "start": "2878000",
    "end": "2885520"
  },
  {
    "text": "having that mvvm as sort of the forefront of the um state pattern we have mvu which is",
    "start": "2885520",
    "end": "2892319"
  },
  {
    "text": "model view update now that's a single directional chain and you'll see even here in the there in clancy's block diagram our",
    "start": "2892319",
    "end": "2899440"
  },
  {
    "text": "model is is still our model and it executes our state changes to our views and instead of using like two-way",
    "start": "2899440",
    "end": "2905440"
  },
  {
    "text": "bindings we uh update the view directly and then it's all this sort of single direction and all you can have sort of scoped state",
    "start": "2905440",
    "end": "2911680"
  },
  {
    "text": "management and abstracted state management mvu is the design pattern that react uses react.js uses which is why flux is",
    "start": "2911680",
    "end": "2919760"
  },
  {
    "text": "like the perfect fit for that it's exactly why it was created in the first place for abstracted state management and now it's",
    "start": "2919760",
    "end": "2926000"
  },
  {
    "text": "going to become even more useful as a pattern to use when using this mvu",
    "start": "2926000",
    "end": "2931040"
  },
  {
    "text": "style of dot-net development so just to talk through some of these samples here now we've only got basically 10 minutes left so",
    "start": "2931040",
    "end": "2937359"
  },
  {
    "text": "i want to make sure i cover enough of this our view is actually using a c sharp composition uh to",
    "start": "2937359",
    "end": "2943599"
  },
  {
    "text": "generate it and then we manage our state it has hot reload built in but anyway to get down to our view we have",
    "start": "2943599",
    "end": "2950000"
  },
  {
    "text": "state which we wrap in whatever object type we want in this case it's an integer and we call it the state object uh and",
    "start": "2950000",
    "end": "2956240"
  },
  {
    "text": "then if we want more complex stuff we can create binding objects and mark that as state with this attribute and then basically what happens is",
    "start": "2956240",
    "end": "2962559"
  },
  {
    "text": "anytime something that is either a basic type of state or an object type of state whenever that object is updated",
    "start": "2962559",
    "end": "2969520"
  },
  {
    "text": "we're going to basically recalculate our view and re-render it so here's a great example here where we",
    "start": "2969520",
    "end": "2974880"
  },
  {
    "text": "have this page it has a vertical stack layout so just two things right under each other we",
    "start": "2974880",
    "end": "2980079"
  },
  {
    "text": "have text which is a label and it takes the text of hello world and then we have a button",
    "start": "2980079",
    "end": "2985760"
  },
  {
    "text": "that's called update and its text is called update text and what it has here is basically it's click",
    "start": "2985760",
    "end": "2990880"
  },
  {
    "text": "handler now this is an actual delegated function and what we say is uh grab the state.txt",
    "start": "2990880",
    "end": "2997280"
  },
  {
    "text": "right so we've got this and we we basically say like to update the",
    "start": "2997280",
    "end": "3002559"
  },
  {
    "text": "text here of this button instead of being update text going to update it to click count and we're updating it to click count uh",
    "start": "3002559",
    "end": "3008880"
  },
  {
    "text": "dot value plus plus which means that literally in this setup we're technically updating this state value",
    "start": "3008880",
    "end": "3014640"
  },
  {
    "text": "by sort of throwing this plus plus here and that's actually going to propagate and recalculate the view",
    "start": "3014640",
    "end": "3020640"
  },
  {
    "text": "so that this update text or this one rather is going to be grabbing that new click count which is",
    "start": "3020640",
    "end": "3026559"
  },
  {
    "text": "really cool so it's all just like sort of hyper local state that single loop of things now",
    "start": "3026559",
    "end": "3031760"
  },
  {
    "text": "the other cool thing about comet and eventually the tooling in maui is that we don't have to use visual",
    "start": "3031760",
    "end": "3037440"
  },
  {
    "text": "studio in all of the sort of ui components in of building things instead we can use",
    "start": "3037440",
    "end": "3043680"
  },
  {
    "text": "uh where to go comment.looks we can use vs code so i'm literally",
    "start": "3043680",
    "end": "3049839"
  },
  {
    "text": "going to just say opening code here when we expand this xamarin.flux.com",
    "start": "3049839",
    "end": "3057200"
  },
  {
    "text": "example um we have the same setup where we've got actions and stores right our to-do store is exactly the",
    "start": "3057200",
    "end": "3063440"
  },
  {
    "text": "same as it was in our other example uh let me actually actually is fine so we have the same subscription events we",
    "start": "3063440",
    "end": "3069599"
  },
  {
    "text": "have our data it's initialized to an empty list it's the same receive event it runs through the same logic",
    "start": "3069599",
    "end": "3075040"
  },
  {
    "text": "all of that is just as usable as it is with the mvvm setup as it is with the comment setup because the flux side",
    "start": "3075040",
    "end": "3082480"
  },
  {
    "text": "of things is an abstraction on top of it and especially when it comes to the stores this store doesn't care",
    "start": "3082480",
    "end": "3087599"
  },
  {
    "text": "what view hit it or what was executing it it just cares about managing its state uh our views though are simplified",
    "start": "3087599",
    "end": "3093920"
  },
  {
    "text": "there's no viewmodel folder anymore instead we just have our main page so our main page is then",
    "start": "3093920",
    "end": "3099280"
  },
  {
    "text": "uh either dependency injected or set up with a new store in actions so that view",
    "start": "3099280",
    "end": "3104880"
  },
  {
    "text": "model part of it is gone we are now in more of that sort of like pure flux setup where we have our state as",
    "start": "3104880",
    "end": "3111359"
  },
  {
    "text": "the local list of to-do's we have our actions in our store we're generating a new list uh for the",
    "start": "3111359",
    "end": "3117839"
  },
  {
    "text": "state which is based off of the to do stores data so we're saying that this new list which you'll notice is a list and not an",
    "start": "3117839",
    "end": "3124000"
  },
  {
    "text": "observable collection of to do's and we're grabbing the to do source data which is also a list of to",
    "start": "3124000",
    "end": "3130559"
  },
  {
    "text": "do's and we're also doing that subscription to the onomitted basically same thing we saw in the other",
    "start": "3130559",
    "end": "3136079"
  },
  {
    "text": "one where we don't have to necessarily worry about all of the um state management locally instead we",
    "start": "3136079",
    "end": "3143200"
  },
  {
    "text": "just receive the event from the store in this case we're console writing instead of using alan ricci stuff",
    "start": "3143200",
    "end": "3148400"
  },
  {
    "text": "because it's not built for comment and we're just saying reset state which is basically like hey when we get this ad",
    "start": "3148400",
    "end": "3153599"
  },
  {
    "text": "to do just like go recalculate stuff now we could also you know just done this down here at the very end",
    "start": "3153599",
    "end": "3160079"
  },
  {
    "text": "and we can just get rid of all of these basically to say like hey when when we uh receive an event of any kind",
    "start": "3160079",
    "end": "3168160"
  },
  {
    "text": "go update the state and basically recalculate everything so we console rightline at this is added",
    "start": "3168160",
    "end": "3174640"
  },
  {
    "text": "and then our state is recalculated here when we call reset state and we're saying that the list of",
    "start": "3174640",
    "end": "3179680"
  },
  {
    "text": "to-do's is also just going to be that uh the list of data from our store so this is like much more explicit with the",
    "start": "3179680",
    "end": "3185359"
  },
  {
    "text": "way that flux is also built in react and then down here with our view render",
    "start": "3185359",
    "end": "3190880"
  },
  {
    "text": "we have a button called add and the button for toggle all like we saw and then we have this list and we're just passing in that value uh",
    "start": "3190880",
    "end": "3198480"
  },
  {
    "text": "of our state so this is a list and we pass it in within a frame and so now whenever we update it right whenever we call reset state",
    "start": "3198480",
    "end": "3205200"
  },
  {
    "text": "whenever this property is changed at all",
    "start": "3205200",
    "end": "3210319"
  },
  {
    "text": "like we do here when we're setting it to get to the new to do stores data all of this gets recalculated which",
    "start": "3210319",
    "end": "3216079"
  },
  {
    "text": "means we recalculate the to-do list view and we pass in the new list and then this to-do list view is is literally",
    "start": "3216079",
    "end": "3221520"
  },
  {
    "text": "just like a it's a stack of of things it's not even like an actual like pure list view um but we we register it",
    "start": "3221520",
    "end": "3229119"
  },
  {
    "text": "inherits from list view of the certain type uh we take in that i uh list of to-do's that we passed in",
    "start": "3229119",
    "end": "3235359"
  },
  {
    "text": "from our actual pages component but now this view can also contain its own state if we wanted to and it's really",
    "start": "3235359",
    "end": "3240640"
  },
  {
    "text": "nice for building uh that sort of componentized structure so you know i'm i'm personally really",
    "start": "3240640",
    "end": "3246960"
  },
  {
    "text": "really excited for this future of net client app development um you know supporting still the mvvm",
    "start": "3246960",
    "end": "3253119"
  },
  {
    "text": "stuff but this mvu way of developing is so nice it's so much easier for building",
    "start": "3253119",
    "end": "3258720"
  },
  {
    "text": "componentized and composed um uis the way that uh people that use",
    "start": "3258720",
    "end": "3264800"
  },
  {
    "text": "react to and and for managing your state in more attracted ways and getting access to easier implementations of other",
    "start": "3264800",
    "end": "3271280"
  },
  {
    "text": "design patterns uh i'm personally really excited for this that's why i really wanted to dive into the comet side",
    "start": "3271280",
    "end": "3277280"
  },
  {
    "text": "um it's funny i first learned about this right before i gave this talk last year when this was still like super",
    "start": "3277280",
    "end": "3282960"
  },
  {
    "text": "experimental um and i was like oh my gosh this is way too perfect for my flux talk to not talk",
    "start": "3282960",
    "end": "3289119"
  },
  {
    "text": "about way before maui was ever announced and anything else like that and it just fits so perfectly within the",
    "start": "3289119",
    "end": "3297040"
  },
  {
    "text": "this design pattern because it's really the structure that it was meant to be we now have the unidirectional data flow",
    "start": "3297040",
    "end": "3302240"
  },
  {
    "text": "from flux for our data structure and we have the unidirectional data flow of local state within any component that",
    "start": "3302240",
    "end": "3308559"
  },
  {
    "text": "we want and it's just like the perfect combo of being able to track things compose your views and just make",
    "start": "3308559",
    "end": "3314240"
  },
  {
    "text": "everything work um so that's that's all i wanted to to show you all today",
    "start": "3314240",
    "end": "3319520"
  },
  {
    "text": "uh thank you for joining um i'm i'm always streaming on twitch now sundays and wednesdays so if you want to hop in",
    "start": "3319520",
    "end": "3325599"
  },
  {
    "text": "and talk about uh tech or or sort of watching the the cool projects we're building definitely",
    "start": "3325599",
    "end": "3330880"
  },
  {
    "text": "join me is twitch.tv swab underscore pirate just like the twitter handle um",
    "start": "3330880",
    "end": "3336160"
  },
  {
    "text": "we just built a alexa powered controller using arduino and net to be able to control our character",
    "start": "3336160",
    "end": "3341920"
  },
  {
    "text": "and call of duty by just yelling at our alexa device we're always doing some pretty cool stuff but thank you all for coming thank you",
    "start": "3341920",
    "end": "3348240"
  },
  {
    "text": "for joining and thanks for uh everyone participated in chat uh and i hope you enjoy the rest of ndc oslo and i'll be",
    "start": "3348240",
    "end": "3354640"
  },
  {
    "text": "around in slack all day too so you know feel free to dm me with any other questions or thoughts or anything like that i'll be in the hallway track as well",
    "start": "3354640",
    "end": "3362160"
  },
  {
    "text": "yeah thank you everyone",
    "start": "3362160",
    "end": "3365599"
  }
]