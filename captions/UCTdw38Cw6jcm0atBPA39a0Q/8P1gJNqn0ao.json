[
  {
    "start": "0",
    "end": "29000"
  },
  {
    "text": "all right good morning everyone I hope you enjoyed the party last night have slept well and had a",
    "start": "6600",
    "end": "13400"
  },
  {
    "text": "good breakfast thanks for coming to my talk image processing with halight my name is",
    "start": "13400",
    "end": "20519"
  },
  {
    "text": "Sven Arad drag and I work in a company called civid located here in Norway in",
    "start": "20519",
    "end": "28480"
  },
  {
    "text": "Oslo so when I was a student I studied physics and as many other physicists and",
    "start": "28480",
    "end": "36079"
  },
  {
    "start": "29000",
    "end": "318000"
  },
  {
    "text": "mathematicians I grew a strong affection for elegant equations or equations you",
    "start": "36079",
    "end": "43000"
  },
  {
    "text": "might even call beautiful you know these things that mathematicians and physicists are all on about because",
    "start": "43000",
    "end": "49280"
  },
  {
    "text": "they're uh not necessarily simple but they're often compact they Encompass a",
    "start": "49280",
    "end": "54920"
  },
  {
    "text": "lot of information in very little text or symbols and like these equations which which are Maxwell's",
    "start": "54920",
    "end": "62600"
  },
  {
    "text": "equations uh they can explain a lot of phenomena in the world so Maxwell's equations are the ones including or in",
    "start": "62600",
    "end": "70600"
  },
  {
    "text": "addition to uh the Lawrence law that can explain basically everything that has to",
    "start": "70600",
    "end": "75880"
  },
  {
    "text": "do with classical electrodynamics and that's super powerful and in a sense beautiful in the",
    "start": "75880",
    "end": "83240"
  },
  {
    "text": "eyes of physicists and and mathematicians now as I was continuing",
    "start": "83240",
    "end": "88520"
  },
  {
    "text": "my studies I moved into computational physics and I grew an affection for",
    "start": "88520",
    "end": "93799"
  },
  {
    "text": "programming and over time also for Pure functions which is maybe a affection I",
    "start": "93799",
    "end": "99200"
  },
  {
    "text": "share with others in the room here today I know uh there's a lot of interest in functional programming",
    "start": "99200",
    "end": "105479"
  },
  {
    "text": "around and these are in the same way uh beautiful because they can be reasoned",
    "start": "105479",
    "end": "113439"
  },
  {
    "text": "about more easily so a pure function is one that gives you the same output for",
    "start": "113439",
    "end": "119560"
  },
  {
    "text": "the same input it has no side effects many feel like if you use pure",
    "start": "119560",
    "end": "125119"
  },
  {
    "text": "functions you can make more maintainable code it's also code that's easier to reason about for everyone who comes",
    "start": "125119",
    "end": "131000"
  },
  {
    "text": "after you and so many programmers have an affection for Pure functional",
    "start": "131000",
    "end": "138200"
  },
  {
    "text": "programming but as I moved further into this study of computational physics I",
    "start": "138200",
    "end": "144760"
  },
  {
    "text": "learned that the real fun stuff is when you can do simulations and modeling on really large system systems but if you",
    "start": "144760",
    "end": "151200"
  },
  {
    "text": "do that then you need to optimize your code and then suddenly you have to mix",
    "start": "151200",
    "end": "156400"
  },
  {
    "text": "these nice equations or algorithms and sometimes also the nice pure functions you had in between all the optimizations",
    "start": "156400",
    "end": "164400"
  },
  {
    "text": "that you're doing so this example on the slide is just just some random example just to show that if you're wanting to",
    "start": "164400",
    "end": "172599"
  },
  {
    "text": "compute an image G that is a function of F you might want to intertwine the",
    "start": "172599",
    "end": "178480"
  },
  {
    "text": "computations in the for Loops so that f is computed when you're looping over Y",
    "start": "178480",
    "end": "183799"
  },
  {
    "text": "and maybe that's efficient maybe that gives you some cache locality maybe that enable some compiler optimization that",
    "start": "183799",
    "end": "190760"
  },
  {
    "text": "just happened to work on your machine and the challenge here is that when you're doing this optimizations and",
    "start": "190760",
    "end": "197000"
  },
  {
    "text": "you're moving the equations in between the different for Loops maybe you add some vectorization and so on in the end you end up with something",
    "start": "197000",
    "end": "204120"
  },
  {
    "text": "that's really hard to read and maintain both for others and for you it starts to get hard to see these equations that you",
    "start": "204120",
    "end": "212040"
  },
  {
    "text": "started with and make sure that when you're doing these optimizations you're not messing with the actual algorithm",
    "start": "212040",
    "end": "218640"
  },
  {
    "text": "that you're trying to implement so this is where halight comes in halight is a language and library",
    "start": "218640",
    "end": "226400"
  },
  {
    "text": "that allows you to decouple the algorithms from the optimizations so",
    "start": "226400",
    "end": "231760"
  },
  {
    "text": "here's the same um the same algorithm in a sense that as was on the previous",
    "start": "231760",
    "end": "237879"
  },
  {
    "text": "slide so we Define F of Y to be the square of Y we Define G of X and Y is",
    "start": "237879",
    "end": "245079"
  },
  {
    "text": "like a 2D image and it's a function of the the Y that we had from before but we",
    "start": "245079",
    "end": "250159"
  },
  {
    "text": "haven't said anything about how we want to compute this we're just saying something about the relation between the two functions f and g and Hali then",
    "start": "250159",
    "end": "258639"
  },
  {
    "text": "enables you or gives you a lot of tools to say something about how you want to optimize this how do you want to inter",
    "start": "258639",
    "end": "264320"
  },
  {
    "text": "leave the computations of the different functions so I'll get back to to this",
    "start": "264320",
    "end": "270080"
  },
  {
    "text": "and we'll go into more detail but this is just an example of how I can say that I want F to be computed at the same Loop",
    "start": "270080",
    "end": "278080"
  },
  {
    "text": "level as G is computed for the loop variable Y and finally halight further um",
    "start": "278080",
    "end": "287000"
  },
  {
    "text": "postpones the actual execution and calculation so you can Define your",
    "start": "287000",
    "end": "292720"
  },
  {
    "text": "algorithms your optimizations and then you can p perform the actual realization",
    "start": "292720",
    "end": "298280"
  },
  {
    "text": "or execution of of your algorithm and there's also another option that we'll get back to which is to defer uh the",
    "start": "298280",
    "end": "305560"
  },
  {
    "text": "execution even further not run it in the program where you define all of this but rather compile it down to a binary file",
    "start": "305560",
    "end": "312000"
  },
  {
    "text": "that can be linked to your",
    "start": "312000",
    "end": "316039"
  },
  {
    "text": "executable and by the way I think it's important to give credit where credit is due we are not the creators of halight",
    "start": "317880",
    "end": "324520"
  },
  {
    "start": "318000",
    "end": "446000"
  },
  {
    "text": "uh we're just using it so just to avoid any confusion I wanted to point out that",
    "start": "324520",
    "end": "329720"
  },
  {
    "text": "halight is is made by a great team of core um developers and uh it's an open",
    "start": "329720",
    "end": "336680"
  },
  {
    "text": "source project with uh a great Community even the core developers who have been working on this for 10 12 years are very",
    "start": "336680",
    "end": "343639"
  },
  {
    "text": "responsive and very active and I'm very grateful for uh how uh nice that",
    "start": "343639",
    "end": "349400"
  },
  {
    "text": "Community is and and how nice it is to work with uh the people who are creating haid but we are not the ones making it",
    "start": "349400",
    "end": "356800"
  },
  {
    "text": "uh we are making these things so I work for a company called civid and we make",
    "start": "356800",
    "end": "362800"
  },
  {
    "text": "3D cameras for robots or as I'd like to say when I'm in a family dinner I make",
    "start": "362800",
    "end": "369400"
  },
  {
    "text": "robot eyes and the reason I say that is because it's kind of true because most",
    "start": "369400",
    "end": "376960"
  },
  {
    "text": "of the robots in the world today they are blind so they have to perform",
    "start": "376960",
    "end": "383280"
  },
  {
    "text": "essentially not just the same task over and over but also the same motion over and over because they're not able to",
    "start": "383280",
    "end": "389160"
  },
  {
    "text": "react act to their environment because they can't see it so that's where we come in we can put",
    "start": "389160",
    "end": "394960"
  },
  {
    "text": "our cameras on or we can sell our cameras to customers who put them on the",
    "start": "394960",
    "end": "400160"
  },
  {
    "text": "robot arm or next to the robot arm and then they're able to see the environment that the robot is working in and this",
    "start": "400160",
    "end": "408440"
  },
  {
    "text": "unlocks the potential of robots to do more work in for instance Logistics in",
    "start": "408440",
    "end": "414000"
  },
  {
    "text": "Automation and Manufacturing and to perform tasks that today have to be done by humans even",
    "start": "414000",
    "end": "420520"
  },
  {
    "text": "though they might be dull tedious and sometimes even dangerous to do so what you get out of our cameras",
    "start": "420520",
    "end": "428240"
  },
  {
    "text": "are these Point clouds uh we strive to give very high precision and high detail",
    "start": "428240",
    "end": "433560"
  },
  {
    "text": "Point clouds in a very short time uh always almost always below a second and",
    "start": "433560",
    "end": "439680"
  },
  {
    "text": "sometimes uh we have requirements to provide Point clouds below tens of",
    "start": "439680",
    "end": "446440"
  },
  {
    "start": "446000",
    "end": "669000"
  },
  {
    "text": "seconds so we talk a lot about how we want to get these robots to do work that",
    "start": "447000",
    "end": "454360"
  },
  {
    "text": "humans have to do today and to achieve that we like to say that we need",
    "start": "454360",
    "end": "460120"
  },
  {
    "text": "humanlike vision for our cameras and the human visual system is",
    "start": "460120",
    "end": "465680"
  },
  {
    "text": "very complex and we're not going to replicate all of it but we try to kind of look at the most essential parts and",
    "start": "465680",
    "end": "472639"
  },
  {
    "text": "and figure out okay what is it that the human eyes and the human visual system",
    "start": "472639",
    "end": "478479"
  },
  {
    "text": "can do that we need to do and the simple conclusion if you want to get depth information is to see that",
    "start": "478479",
    "end": "485520"
  },
  {
    "text": "we have two eyes like many other animals and that is the first step in",
    "start": "485520",
    "end": "492720"
  },
  {
    "text": "many cases to get depth perception because the way you can see depth both",
    "start": "492720",
    "end": "499720"
  },
  {
    "text": "as a human or in a stereo camera system is that you look for the same feature in",
    "start": "499720",
    "end": "504879"
  },
  {
    "text": "the two images that hit the two cameras or the two eyes so as in this case we're",
    "start": "504879",
    "end": "510360"
  },
  {
    "text": "looking for instance for the eye and we look for it in the two",
    "start": "510360",
    "end": "517000"
  },
  {
    "text": "cameras and as soon as we have that feature in both images we can trace a",
    "start": "517000",
    "end": "522839"
  },
  {
    "text": "ray from the origin of each camera in uh through the image and the pixel where we",
    "start": "522839",
    "end": "528560"
  },
  {
    "text": "saw the feature we're interested in and into the 3D world and where the Rays",
    "start": "528560",
    "end": "534040"
  },
  {
    "text": "intersect is where that feature is in space or I should say where the two two",
    "start": "534040",
    "end": "539320"
  },
  {
    "text": "rays are closest because it's pretty hard to get two rays in 3D space to actually",
    "start": "539320",
    "end": "546240"
  },
  {
    "text": "intersect so this is how a lot of stereo camera systems work find the features",
    "start": "546440",
    "end": "552519"
  },
  {
    "text": "you find the points and then you if you do this for a lot of points you can reconstruct what we call a point Cloud",
    "start": "552519",
    "end": "558040"
  },
  {
    "text": "for the surface of the object in front of you now yes",
    "start": "558040",
    "end": "564800"
  },
  {
    "text": "question yes there are stereo cameras that have stand the interfaces as well",
    "start": "565880",
    "end": "573279"
  },
  {
    "text": "uh yeah so the question is whether there are uh common interfaces for different",
    "start": "580760",
    "end": "585920"
  },
  {
    "text": "cameras when you need to feed this information to robots and yes there are some common interfaces uh and some",
    "start": "585920",
    "end": "593200"
  },
  {
    "text": "providers like us provide both adapters to those interfaces and our own apis so",
    "start": "593200",
    "end": "599920"
  },
  {
    "text": "I guess uh it depends on which camera you're using but there's one problem with",
    "start": "599920",
    "end": "607160"
  },
  {
    "text": "stereo vision and that is that there's a lot of things in the world that have very few features and especially in",
    "start": "607160",
    "end": "613920"
  },
  {
    "text": "Industry where you might want to pick boxes and the Box basically just has a",
    "start": "613920",
    "end": "619000"
  },
  {
    "text": "flat surface so everything looks almost the same so when you're using a stereo",
    "start": "619000",
    "end": "624320"
  },
  {
    "text": "camera system you need something on top kind of like how the human visual system",
    "start": "624320",
    "end": "629600"
  },
  {
    "text": "works and you deduce more information to try to kind of extract a feature from",
    "start": "629600",
    "end": "634640"
  },
  {
    "text": "this featureless surface and that turns out to be really hard so we use a trick",
    "start": "634640",
    "end": "641399"
  },
  {
    "text": "instead and we essentially replace one of the cameras with a",
    "start": "641399",
    "end": "647040"
  },
  {
    "text": "projector because then we can shine light onto the object and create our own",
    "start": "647040",
    "end": "653480"
  },
  {
    "text": "features and as long as we know which Ray we shine light along we can now do",
    "start": "653480",
    "end": "658720"
  },
  {
    "text": "an inter intersection with the ray of the light we're shining with the L Ray of the light that we're seeing and voila",
    "start": "658720",
    "end": "665360"
  },
  {
    "text": "we get a point in space but doing this for like one point",
    "start": "665360",
    "end": "673639"
  },
  {
    "start": "669000",
    "end": "790000"
  },
  {
    "text": "at a time is going to take way too much time because then you would essentially need yeah the number of uh images as",
    "start": "673639",
    "end": "681000"
  },
  {
    "text": "there are number of pixels on your camera which would be 2 million images easily so what we do instead is that we",
    "start": "681000",
    "end": "687320"
  },
  {
    "text": "use patterns we use a handful of images with carefully chosen patterns and",
    "start": "687320",
    "end": "693680"
  },
  {
    "text": "that's enough to give us the information we need to get precise depth and as you",
    "start": "693680",
    "end": "699279"
  },
  {
    "text": "might notice in this little simulation with the monkey head in the two boxes I'm showing only vertical patterns here",
    "start": "699279",
    "end": "705720"
  },
  {
    "text": "and there's a reason for that because it turns out that if you use horizontal",
    "start": "705720",
    "end": "710920"
  },
  {
    "text": "patterns since you already have an horizontal offset between the camera and",
    "start": "710920",
    "end": "715959"
  },
  {
    "text": "the projector there's something called the epipolar geometry that I'm not going to go into detail about but we essentially",
    "start": "715959",
    "end": "722720"
  },
  {
    "text": "already have the information about where horizontally on the projector we're",
    "start": "722720",
    "end": "728440"
  },
  {
    "text": "going to be when we know where we are on the camera and this is actually seen intuitively if you look at this video",
    "start": "728440",
    "end": "734440"
  },
  {
    "text": "that a horizontal pattern gives no Distortion Like there there's nothing",
    "start": "734440",
    "end": "740160"
  },
  {
    "text": "that changes as we move the object back and forth in the patterns that we see",
    "start": "740160",
    "end": "745720"
  },
  {
    "text": "while if we have vertical patterns if you look closely you can see that that the patterns are kind of Shifting left",
    "start": "745720",
    "end": "751360"
  },
  {
    "text": "and right depending on whether the object is closer and further away from the camera so this is a very shorthand",
    "start": "751360",
    "end": "759279"
  },
  {
    "text": "way of saying that the most information is in the vertical part of the pattern so let's just use",
    "start": "759279",
    "end": "767040"
  },
  {
    "text": "that and another way to think about it is that you could shine a line",
    "start": "767959",
    "end": "773440"
  },
  {
    "text": "vertically and just swipe that across and look at the intersection between the plane that that line kind of makes",
    "start": "773440",
    "end": "780240"
  },
  {
    "text": "through space and the ray from the camera and that gives you essentially",
    "start": "780240",
    "end": "786440"
  },
  {
    "text": "the the the same information",
    "start": "786440",
    "end": "792120"
  },
  {
    "start": "790000",
    "end": "1294000"
  },
  {
    "text": "so I said in the description of this talk that we would talk about the journey that we had",
    "start": "792120",
    "end": "799480"
  },
  {
    "text": "so not just about what we're doing but also about how we switched from the open",
    "start": "799480",
    "end": "805240"
  },
  {
    "text": "CL framework to halight so first of all I want to say",
    "start": "805240",
    "end": "810600"
  },
  {
    "text": "something about why we wanted to move away from opencl and one of the main reasons was that we saw a pretty big gap",
    "start": "810600",
    "end": "817040"
  },
  {
    "text": "between the R&D work that was being done in math lab and Python and then the",
    "start": "817040",
    "end": "822680"
  },
  {
    "text": "production work that was done by other people in opencl so we would always have this R&D work that needed the",
    "start": "822680",
    "end": "829360"
  },
  {
    "text": "translation phase over into opencl we wanted to shorten that down somehow if",
    "start": "829360",
    "end": "836079"
  },
  {
    "text": "possible uh we also wanted to reduce the amount amount of hand optimized code we had to write because that's always",
    "start": "836079",
    "end": "842800"
  },
  {
    "text": "tedious and as I mentioned error prone and harder to maintain and we kind of what actually",
    "start": "842800",
    "end": "850279"
  },
  {
    "text": "triggered looking for Alternatives was that we saw uh issues with certain open",
    "start": "850279",
    "end": "856600"
  },
  {
    "text": "CL drivers for even major vendors especially when using more advanced and",
    "start": "856600",
    "end": "862560"
  },
  {
    "text": "modern features so we had the choice either to stick with kind of the the low lowest version of open CL that that was",
    "start": "862560",
    "end": "869519"
  },
  {
    "text": "running on all our customers gpus um or not run on those gpus at all",
    "start": "869519",
    "end": "876839"
  },
  {
    "text": "and use the more advanced features and over time we realized that there were too many gpus out there that we couldn't",
    "start": "876839",
    "end": "882680"
  },
  {
    "text": "run on when we were using the features we wanted to use so we got this nudge to",
    "start": "882680",
    "end": "888320"
  },
  {
    "text": "essentially look for Alternatives so what is halight halight",
    "start": "888320",
    "end": "896040"
  },
  {
    "text": "is a domain specific language that can be used for computations on images or",
    "start": "896040",
    "end": "902240"
  },
  {
    "text": "tensors as they like to say I just think of them as n-dimensional",
    "start": "902240",
    "end": "907360"
  },
  {
    "text": "buffers and it's implemented in C++ but it's embedded in C++ and python so even",
    "start": "907360",
    "end": "915160"
  },
  {
    "text": "though it's a language of its own it's a domain specific language that is for all",
    "start": "915160",
    "end": "921680"
  },
  {
    "text": "intents and purposes working as a library when you use it in C++ and python so it's not a whole new language",
    "start": "921680",
    "end": "928759"
  },
  {
    "text": "it's just a language that uses the building blocks of C++ or",
    "start": "928759",
    "end": "934399"
  },
  {
    "text": "python it helps optimize dense numerical kernels such as are used in image processing in uh computer vision and",
    "start": "934399",
    "end": "941920"
  },
  {
    "text": "machine learning and as I mentioned it is a tool to decouple these algorithms",
    "start": "941920",
    "end": "947160"
  },
  {
    "text": "from the optimizations that you want to do so why did we choose to move to",
    "start": "947160",
    "end": "953040"
  },
  {
    "text": "halight and not just some other framework uh one big reason is that",
    "start": "953040",
    "end": "958240"
  },
  {
    "text": "halight compiles down to a number of architectures and platforms and I",
    "start": "958240",
    "end": "963839"
  },
  {
    "text": "highlighted open c l here because that was actually a benefit for us to choose something where we could still compile",
    "start": "963839",
    "end": "969839"
  },
  {
    "text": "to open CL and know that we would at least run on the same platforms as we were running on today but have the",
    "start": "969839",
    "end": "976600"
  },
  {
    "text": "option to then compile to other platforms as we move forward like for instance to run on a Jetson you need to",
    "start": "976600",
    "end": "983319"
  },
  {
    "text": "use something else than open opencl and knowing that we could easily switch to Cuda that was a huge Pro in in our",
    "start": "983319",
    "end": "991360"
  },
  {
    "text": "thinking I'm not going to list all the other platforms I'm just putting them up there so that you can look for your",
    "start": "991360",
    "end": "996519"
  },
  {
    "text": "favorite one if you're interested as I mentioned halight also is open source and has a very welcoming",
    "start": "996519",
    "end": "1004720"
  },
  {
    "text": "community and what struck us was that we hadn't really heard about halight before",
    "start": "1004720",
    "end": "1011279"
  },
  {
    "text": "but it turned out to be used in very large commercial projects and that's because some of the creators are working",
    "start": "1011279",
    "end": "1018120"
  },
  {
    "text": "in Adobe or have been working at least in Adobe in Google uh some of them are",
    "start": "1018120",
    "end": "1024240"
  },
  {
    "text": "now in Facebook so it's used in Adobe Photoshop in the Google pixel camera and",
    "start": "1024240",
    "end": "1029678"
  },
  {
    "text": "in YouTube when YouTube does some of its uh video processing so kind of seeing that track record we",
    "start": "1029679",
    "end": "1037319"
  },
  {
    "text": "felt more confident that okay this might actually be a kind of mature library and not something that's just a research",
    "start": "1037319",
    "end": "1043839"
  },
  {
    "text": "project and where we will have to find all the bugs ourselves and then then live with them as we go now it turns out",
    "start": "1043839",
    "end": "1050600"
  },
  {
    "text": "that there are some bugs that were still in there but that's uh that's how it is it's a very mature Library I would",
    "start": "1050600",
    "end": "1058480"
  },
  {
    "text": "say okay so i' would like to give you a little introduction to how to write a",
    "start": "1058480",
    "end": "1063760"
  },
  {
    "text": "halight program so the building blocks in",
    "start": "1063760",
    "end": "1069720"
  },
  {
    "text": "halight are um the bars and the funks that those are kind of the main building",
    "start": "1069720",
    "end": "1075159"
  },
  {
    "text": "blocks so a VAR is a an image coordinate",
    "start": "1075159",
    "end": "1080760"
  },
  {
    "text": "or a buffer coordinate if it's in multiple dimensions and it's just a placeholder",
    "start": "1080760",
    "end": "1086200"
  },
  {
    "text": "you're not saying what number X and Y are just yet that's kind of just to have",
    "start": "1086200",
    "end": "1092360"
  },
  {
    "text": "some name to put into your equations the funks are these mappings",
    "start": "1092360",
    "end": "1098039"
  },
  {
    "text": "from the image coordinates to the values so when I",
    "start": "1098039",
    "end": "1104320"
  },
  {
    "text": "say F of Y = y^2 that's just a uh an",
    "start": "1104320",
    "end": "1111200"
  },
  {
    "text": "early Declaration of what F of Y is going to mean and then it's going to be",
    "start": "1111200",
    "end": "1116360"
  },
  {
    "text": "evaluated later so it's kind of like lazy excuse me it's also a pure function",
    "start": "1116360",
    "end": "1124360"
  },
  {
    "text": "this funks in haline so they will have no side effects they you can't access the network or anything in here it's",
    "start": "1124360",
    "end": "1131080"
  },
  {
    "text": "just a pure functional mapping from the image coordinates to its",
    "start": "1131080",
    "end": "1137159"
  },
  {
    "text": "values and and then as mentioned halight allows you to declare",
    "start": "1137159",
    "end": "1143159"
  },
  {
    "text": "how you want to perform these optimizations so again F compute at gy",
    "start": "1143159",
    "end": "1149440"
  },
  {
    "text": "means please put the computation of f inside the same loop as you're going to",
    "start": "1149440",
    "end": "1156520"
  },
  {
    "text": "compute G when you're looping over Y and that is equivalent to the um uh code you",
    "start": "1156520",
    "end": "1164960"
  },
  {
    "text": "see on the bottom there depending on what else you will say later about where we want to compute G of course but yeah",
    "start": "1164960",
    "end": "1172240"
  },
  {
    "text": "in essence if if G is computed like this then f is going to be in the loop over y",
    "start": "1172240",
    "end": "1177480"
  },
  {
    "text": "instead of for instance being computed every time you Loop over",
    "start": "1177480",
    "end": "1182640"
  },
  {
    "text": "X and then finally you can tell Hali that okay I've made my decisions I made",
    "start": "1182640",
    "end": "1188400"
  },
  {
    "text": "my optimizations now please execute this function and show me uh or give me the",
    "start": "1188400",
    "end": "1194280"
  },
  {
    "text": "the result and that's going to give you a halight buffer back uh but since we're working in Python here uh that's um",
    "start": "1194280",
    "end": "1201240"
  },
  {
    "text": "that's a buffer that supports the python buffer protocol so you can also then just throw it into matplot lib which is",
    "start": "1201240",
    "end": "1207720"
  },
  {
    "text": "something that's super powerful for us because when we were working in open CL",
    "start": "1207720",
    "end": "1213200"
  },
  {
    "text": "the um the tooling around opencl and and",
    "start": "1213200",
    "end": "1219000"
  },
  {
    "text": "working with the buffers that we get out there is not obvious at least like we could always write it to an image we",
    "start": "1219000",
    "end": "1224720"
  },
  {
    "text": "could write our own image viewer but being able to work with the tools that",
    "start": "1224720",
    "end": "1231000"
  },
  {
    "text": "researchers already are familiar with like even if you're coming from math lab using math plot lib is pretty much",
    "start": "1231000",
    "end": "1238080"
  },
  {
    "text": "straightforward that was a game changer for us or as mentioned you could also",
    "start": "1238080",
    "end": "1245200"
  },
  {
    "text": "compile them to binary files and Link it into your executable which is what we're doing for our um production",
    "start": "1245200",
    "end": "1254320"
  },
  {
    "text": "software and just to have it mentioned since I know a lot of people people in the audience here are C++ fans uh",
    "start": "1254320",
    "end": "1261919"
  },
  {
    "text": "halight can be used in C++ that's maybe also the most common way to use",
    "start": "1261919",
    "end": "1267280"
  },
  {
    "text": "halight and the difference is minimal it's essentially just how many times you",
    "start": "1267280",
    "end": "1273400"
  },
  {
    "text": "have to say const Auto or Auto and put a semicolon at the end of the line but I'm choosing to use python in the slides",
    "start": "1273400",
    "end": "1280679"
  },
  {
    "text": "only because we are using it ourselves so it was easier to find the examples and uh because it's a bit more compact",
    "start": "1280679",
    "end": "1288200"
  },
  {
    "text": "and I would say a bit more readable uh as slide",
    "start": "1288200",
    "end": "1293559"
  },
  {
    "start": "1294000",
    "end": "1509000"
  },
  {
    "text": "format okay so in the rest of this talk I want to",
    "start": "1294520",
    "end": "1300360"
  },
  {
    "text": "use this driving example uh referring back to what we talked about earlier on how we use these vertical patterns to",
    "start": "1300360",
    "end": "1308400"
  },
  {
    "text": "find where on the projector the light is coming from and being able to to uh use",
    "start": "1308400",
    "end": "1315120"
  },
  {
    "text": "that information to do the intersection between the plane of the projector and or the",
    "start": "1315120",
    "end": "1321720"
  },
  {
    "text": "column on the projector and the line from the camera now we're not going to do the actual reconstruction and",
    "start": "1321720",
    "end": "1328679"
  },
  {
    "text": "intersection part we're only going to stop at figuring out in the camera space",
    "start": "1328679",
    "end": "1334840"
  },
  {
    "text": "where on the projector did the light come from or from which column on the",
    "start": "1334840",
    "end": "1340159"
  },
  {
    "text": "projector did the light come from which is what's shown in the in the image",
    "start": "1340159",
    "end": "1345240"
  },
  {
    "text": "here yeah so as mentioned same as we talked about before it's this",
    "start": "1345240",
    "end": "1352279"
  },
  {
    "text": "intersection with the plane that we're looking for or we're going to set us up",
    "start": "1352279",
    "end": "1357840"
  },
  {
    "text": "to compute the input images look like this",
    "start": "1357840",
    "end": "1364760"
  },
  {
    "text": "again vertical patterns and the concept here is pretty simple we",
    "start": "1364760",
    "end": "1371760"
  },
  {
    "text": "divide the scene into areas that have light coming uh um from the projector",
    "start": "1371760",
    "end": "1379720"
  },
  {
    "text": "either on or off and we in the different images slice this uh this light into",
    "start": "1379720",
    "end": "1388240"
  },
  {
    "text": "more and more pieces so in the first image we're lighting half the projector in the second image we're still lighting",
    "start": "1388240",
    "end": "1394720"
  },
  {
    "text": "half the projector but doing it in like an on off on off fashion and then using",
    "start": "1394720",
    "end": "1401520"
  },
  {
    "text": "more and more slices as we go and for those of you who have been doing a lot",
    "start": "1401520",
    "end": "1406679"
  },
  {
    "text": "of computing with binary numbers you might notice that this is essentially",
    "start": "1406679",
    "end": "1412039"
  },
  {
    "text": "encoding information with light about where on the projector the light is",
    "start": "1412039",
    "end": "1418640"
  },
  {
    "text": "coming from as a binary code it's on or off which means that we can turn it into",
    "start": "1418640",
    "end": "1424159"
  },
  {
    "text": "a decimal number afterwards so to explain this in more",
    "start": "1424159",
    "end": "1430080"
  },
  {
    "text": "detail if we take one of the pixels in the image just chosen randomly here we can see the light intensity on",
    "start": "1430080",
    "end": "1437880"
  },
  {
    "text": "on the y- AIS and the image index on the x-axis and as you can see the light will",
    "start": "1437880",
    "end": "1443080"
  },
  {
    "text": "be on or off with some noise especially in the real world there there will be a lot of noise in these",
    "start": "1443080",
    "end": "1449720"
  },
  {
    "text": "images so the algorithm that we're going to implement works as follows we find",
    "start": "1449720",
    "end": "1455159"
  },
  {
    "text": "the minimum value across all the images we find the maximum value and then we",
    "start": "1455159",
    "end": "1460520"
  },
  {
    "text": "set a threshold as the average of the minimum and maximum that's how we figure",
    "start": "1460520",
    "end": "1465679"
  },
  {
    "text": "out whether something is on or off because because the values themselves",
    "start": "1465679",
    "end": "1470760"
  },
  {
    "text": "are floating Point like it's a light intensity so they're not on or off yet",
    "start": "1470760",
    "end": "1476039"
  },
  {
    "text": "we need to set this threshold to be able to figure out okay where is it on where is it off that's how we set",
    "start": "1476039",
    "end": "1482320"
  },
  {
    "text": "this and then once we've done that we can just look at is it above the line or above the threshold or below the",
    "start": "1482320",
    "end": "1488600"
  },
  {
    "text": "threshold that gives us this binary code in this case 0 1 1 0 1 0 over the images",
    "start": "1488600",
    "end": "1496360"
  },
  {
    "text": "and then we can turn that into this deal number and that will give us where like a number for which column on the",
    "start": "1496360",
    "end": "1502520"
  },
  {
    "text": "projector The Light Came From with some",
    "start": "1502520",
    "end": "1507039"
  },
  {
    "start": "1509000",
    "end": "1637000"
  },
  {
    "text": "resolution so in halight when you're setting up your algorithms you can",
    "start": "1509840",
    "end": "1516159"
  },
  {
    "text": "provide parms that are also supposed to be fed in to halight",
    "start": "1516159",
    "end": "1522480"
  },
  {
    "text": "later and those params can be images so in this case for the input images we are going going to use the image pyam and we",
    "start": "1522480",
    "end": "1531240"
  },
  {
    "text": "will tell it that it has a type in our case we use 16bit uh res 16bit",
    "start": "1531240",
    "end": "1539320"
  },
  {
    "text": "images we say that it's three dimensions because it's images which are two",
    "start": "1539320",
    "end": "1544360"
  },
  {
    "text": "dimensional and then there's a stack of them so that gives the third dimension to the input images and we give it a",
    "start": "1544360",
    "end": "1551320"
  },
  {
    "text": "name and the name here is optional you can skip it but uh I guess halight note",
    "start": "1551320",
    "end": "1557679"
  },
  {
    "text": "noticed that there was no way to actually find the variable names when you're working in C++ and python of the",
    "start": "1557679",
    "end": "1564320"
  },
  {
    "text": "object that you are yourself so it's a way to give that information to halight",
    "start": "1564320",
    "end": "1569480"
  },
  {
    "text": "so that when you're doing debugging tracing profiling later you will actually get reasonable names out if you",
    "start": "1569480",
    "end": "1575799"
  },
  {
    "text": "don't then everything is going to be called like F1 F2 F3 so this is just for",
    "start": "1575799",
    "end": "1581559"
  },
  {
    "text": "um debuging purposes then in the next slides we'll Define the algorithm that I just talk",
    "start": "1581559",
    "end": "1588399"
  },
  {
    "text": "about and after defining that we can decide to load our images whichever way",
    "start": "1588399",
    "end": "1595240"
  },
  {
    "text": "we want uh in civid we read them from the camera uh if you're working in Python you can just load some pgs from",
    "start": "1595240",
    "end": "1602080"
  },
  {
    "text": "file and put them into a numi array and then then pass that on to a halight",
    "start": "1602080",
    "end": "1607399"
  },
  {
    "text": "buffer and then you if you want to realize the function or the algorithm",
    "start": "1607399",
    "end": "1613000"
  },
  {
    "text": "right now you can set those images on the image image param and then you can",
    "start": "1613000",
    "end": "1619679"
  },
  {
    "text": "realize and look at the result or you can skip uh setting the images right now",
    "start": "1619679",
    "end": "1626440"
  },
  {
    "text": "compile to a binary file and then you will get a function that accepts the image param as a buffer that you can",
    "start": "1626440",
    "end": "1632960"
  },
  {
    "text": "provide later again that's how we are doing it in our production",
    "start": "1632960",
    "end": "1638039"
  },
  {
    "text": "code so let's compute the maximum value in each",
    "start": "1638039",
    "end": "1643840"
  },
  {
    "text": "pixel again we Define these vars the image coordinates X and Y in this case I",
    "start": "1644120",
    "end": "1650960"
  },
  {
    "text": "know we're just going to work with six images so I'm just going to make that a static value",
    "start": "1650960",
    "end": "1657320"
  },
  {
    "text": "six and then I need to define a reduction domain because we want to calculate the maximum value and there's",
    "start": "1657320",
    "end": "1664200"
  },
  {
    "text": "no way to write code in halight with like raw for Loops the whole in",
    "start": "1664200",
    "end": "1669679"
  },
  {
    "text": "intention of halight is to figure out the nesting and Order of all your for Loops later but you have to tell halight",
    "start": "1669679",
    "end": "1676000"
  },
  {
    "text": "somehow that there's is going to be a reduction here and that's done by saying that I want a reduction domain over the",
    "start": "1676000",
    "end": "1682919"
  },
  {
    "text": "number of images so it's a reduction domain in this case onedimensional it's going from zero to the number of images",
    "start": "1682919",
    "end": "1690559"
  },
  {
    "text": "that's the range then we Define our maximum function and now we first give it the",
    "start": "1690559",
    "end": "1700480"
  },
  {
    "text": "initial function definition and this is a very roundabout",
    "start": "1700480",
    "end": "1705679"
  },
  {
    "text": "way of saying that we initialize it to zero but I'm putting it with the the um mean",
    "start": "1705679",
    "end": "1712799"
  },
  {
    "text": "value of a u in 16 here just to show that that's good practice if you later design to change the type uh so that you",
    "start": "1712799",
    "end": "1720320"
  },
  {
    "text": "actually get the minimum value of in6 if you should change to that later but that's the initial value here",
    "start": "1720320",
    "end": "1727080"
  },
  {
    "text": "we set the maximum to zero first and then we compute the maximum value by",
    "start": "1727080",
    "end": "1732120"
  },
  {
    "text": "using the max function and giving it the previous maximum value and the input",
    "start": "1732120",
    "end": "1737399"
  },
  {
    "text": "images where the last the last index here is this reduction",
    "start": "1737399",
    "end": "1746240"
  },
  {
    "text": "domain and that's how you tell halight that I want you to perform reduction on",
    "start": "1746240",
    "end": "1752159"
  },
  {
    "text": "this for the computation and if you prefer to ride uh",
    "start": "1752159",
    "end": "1757720"
  },
  {
    "text": "to to read um um procedural code instead then this",
    "start": "1757720",
    "end": "1763720"
  },
  {
    "text": "is the equivalent we would Loop over all the coordinates initialize the maximum",
    "start": "1763720",
    "end": "1770320"
  },
  {
    "text": "value to zero and then calculate the maximum value of the previous one and",
    "start": "1770320",
    "end": "1775679"
  },
  {
    "text": "the input image for all the images in a for Loop and this is essentially the code that halight will generate for us",
    "start": "1775679",
    "end": "1782080"
  },
  {
    "text": "as well that's St yeah and for the minimum",
    "start": "1782080",
    "end": "1790360"
  },
  {
    "start": "1784000",
    "end": "1864000"
  },
  {
    "text": "image it's just the same just swap the minimum and maximum so I'm going to skip",
    "start": "1790360",
    "end": "1796840"
  },
  {
    "text": "over that easily but it's uh just the same as we did in the last slide for the threshold it's pretty",
    "start": "1796840",
    "end": "1804559"
  },
  {
    "text": "straightforward we say that the threshold in the XY coordinate is going",
    "start": "1804559",
    "end": "1809679"
  },
  {
    "text": "to be the maximum value in the same coordinate plus the minimum value divided by two that's how you get the",
    "start": "1809679",
    "end": "1816760"
  },
  {
    "text": "average and then finally we can see if each image is above the threshold and",
    "start": "1816760",
    "end": "1824440"
  },
  {
    "text": "that is done by defining this binary code fun and this is now again a three-dimensional one where we have this",
    "start": "1824440",
    "end": "1831840"
  },
  {
    "text": "I VAR which gives us the image index and tells us the binary code for that image",
    "start": "1831840",
    "end": "1838720"
  },
  {
    "text": "and now you can see we have gone from the input images that had floating Point values essentially to or not floting",
    "start": "1838720",
    "end": "1846519"
  },
  {
    "text": "Point values but um real life values uh not just Boolean",
    "start": "1846519",
    "end": "1853360"
  },
  {
    "text": "values uh to these images that now have a binary quote where yellow is on and",
    "start": "1853360",
    "end": "1860480"
  },
  {
    "text": "purple means off and then finally we can get the",
    "start": "1860480",
    "end": "1866720"
  },
  {
    "start": "1864000",
    "end": "2099000"
  },
  {
    "text": "projector column we get our decimal code with a similar reduction domain we",
    "start": "1866720",
    "end": "1872080"
  },
  {
    "text": "initialize it to zero but this time we add to it the binary code times 2 to the",
    "start": "1872080",
    "end": "1881080"
  },
  {
    "text": "image index and I'm sorry that it's the image index reverse that was just to get",
    "start": "1881080",
    "end": "1886919"
  },
  {
    "text": "the um the projector columns the right way which was left to right but yeah it's",
    "start": "1886919",
    "end": "1894200"
  },
  {
    "text": "the binary code times 2 to the power of the image index which many of you will",
    "start": "1894200",
    "end": "1899799"
  },
  {
    "text": "recognize as just a regular conversion from binary to decimal and then finally the projector",
    "start": "1899799",
    "end": "1906519"
  },
  {
    "text": "column is typically normalized so we're going to do that here as well we take the decimal code and divide by the",
    "start": "1906519",
    "end": "1912720"
  },
  {
    "text": "largest number we can get and then we get this nice image of the projector columns",
    "start": "1912720",
    "end": "1918080"
  },
  {
    "text": "we're done the algorithm is finished and it's probably going to be pretty slow",
    "start": "1918080",
    "end": "1923760"
  },
  {
    "text": "and yes it is well at least for our standards this will take 61 milliseconds to compute uh out of the",
    "start": "1923760",
    "end": "1931440"
  },
  {
    "text": "box uh for this simple step in the very beginning of our Pipeline and that's",
    "start": "1931440",
    "end": "1936720"
  },
  {
    "text": "taking way too much of the precious time that we have so we're going to speed things up but first let's talk about",
    "start": "1936720",
    "end": "1943159"
  },
  {
    "text": "what actually happens now because now we haven't told halight to uh schedule this or optimize it in",
    "start": "1943159",
    "end": "1950639"
  },
  {
    "text": "any particular way we're just saying in our little schedule function just pass I",
    "start": "1950639",
    "end": "1956799"
  },
  {
    "text": "don't care just use the default and halight will then give you what's called an inline schedule so it will try to",
    "start": "1956799",
    "end": "1964240"
  },
  {
    "text": "inline every computation that depend or uh any Funk that another Funk depends on",
    "start": "1964240",
    "end": "1972440"
  },
  {
    "text": "is getting inlined in the funk that uses it and that that means that essentially",
    "start": "1972440",
    "end": "1978840"
  },
  {
    "text": "if everything was just straightforward funks using funks then uh everything would be in line but since we have some",
    "start": "1978840",
    "end": "1984880"
  },
  {
    "text": "reduction domains there are some things that actually need to be computed before they're used and that's why you end up",
    "start": "1984880",
    "end": "1991039"
  },
  {
    "text": "with um what you're looking at on the right hand side here the so-call loop",
    "start": "1991039",
    "end": "1996480"
  },
  {
    "text": "Nest that you can tell halight to print for you and as you can see here uh we",
    "start": "1996480",
    "end": "2001880"
  },
  {
    "text": "get a loop over the image coordinates as expected and halight with start to",
    "start": "2001880",
    "end": "2007679"
  },
  {
    "text": "initialize the decimal code to zero and then it will make a loop over",
    "start": "2007679",
    "end": "2012840"
  },
  {
    "text": "all the images to compute the decimal code and now the problematic part starts",
    "start": "2012840",
    "end": "2019799"
  },
  {
    "text": "or may be problematic depending on your architecture halight will then since it's trying to inline everything wait",
    "start": "2019799",
    "end": "2026720"
  },
  {
    "text": "with Computing the minimum value until it's needed by the decimal value which is then going to",
    "start": "2026720",
    "end": "2032200"
  },
  {
    "text": "be inside the loop over all the images which means that it's going to add another loop over all the images inside",
    "start": "2032200",
    "end": "2039360"
  },
  {
    "text": "the loop over all the images which could be a bad idea and in this case it turns",
    "start": "2039360",
    "end": "2044440"
  },
  {
    "text": "out to be at least on my machine uh in other cases doing um",
    "start": "2044440",
    "end": "2050800"
  },
  {
    "text": "additional work can actually be better than reducing the number of reads so it",
    "start": "2050800",
    "end": "2056200"
  },
  {
    "text": "depends it's uh this default schedule in halight is actually a very reasonable one uh because often in lining is good",
    "start": "2056200",
    "end": "2064679"
  },
  {
    "text": "and also it's the one that uses the least memory because it doesn't retain",
    "start": "2064679",
    "end": "2070320"
  },
  {
    "text": "anything it just computes everything as needed and then similarly for the",
    "start": "2070320",
    "end": "2076599"
  },
  {
    "text": "maximum image we compute that by looping over all the images and then we have all",
    "start": "2076599",
    "end": "2081919"
  },
  {
    "text": "we need to compute a decimal code and we go out of that loop again and we can compute a projector column which was",
    "start": "2081919",
    "end": "2088398"
  },
  {
    "text": "just the decimal code divided by the largest value voila that's that's our current",
    "start": "2088399",
    "end": "2094960"
  },
  {
    "text": "Pipeline and I'm going to call this the Baseline at 61.2 milliseconds we can thankfully also ask",
    "start": "2094960",
    "end": "2101720"
  },
  {
    "start": "2099000",
    "end": "2169000"
  },
  {
    "text": "Hali to or use a tool that Hali provides to visualize what this looks like so the",
    "start": "2101720",
    "end": "2107000"
  },
  {
    "text": "blue dots here are the reads uh this is by the way scaled down so it's not the full image as you might see as it",
    "start": "2107000",
    "end": "2113280"
  },
  {
    "text": "progresses it's a scale down version of the images just to make it easier to look at uh but as you can see it it",
    "start": "2113280",
    "end": "2119200"
  },
  {
    "text": "reads with the blue dots from the input images the yellow dots are right so it will read from the input images right to",
    "start": "2119200",
    "end": "2126240"
  },
  {
    "text": "the minimum maximum value and then also right to the binary code which as I said",
    "start": "2126240",
    "end": "2132359"
  },
  {
    "text": "was um or maybe I forgot to mention it but it it was inlined in the previous",
    "start": "2132359",
    "end": "2137440"
  },
  {
    "text": "slide but I forced the visualization here just to make it easier to look at um and then finally the project",
    "start": "2137440",
    "end": "2144480"
  },
  {
    "text": "decimal code and the projector column and it's a bit hard to see here but the blue lights on the top are or dots on",
    "start": "2144480",
    "end": "2150760"
  },
  {
    "text": "the top are blinking actually really really fast and many many times so I'm going to slow it down a little bit so",
    "start": "2150760",
    "end": "2156040"
  },
  {
    "text": "you can see that there's a very large number of reads from the input images here and that's",
    "start": "2156040",
    "end": "2163240"
  },
  {
    "text": "most likely what's giving us the the bad performance in this",
    "start": "2163240",
    "end": "2168280"
  },
  {
    "text": "case but scheduling in line is just one extreme in halight and I like jumping",
    "start": "2168280",
    "end": "2174079"
  },
  {
    "start": "2169000",
    "end": "2399000"
  },
  {
    "text": "from one extreme to the other before we move on so I'm going to show you the other extreme which is to tell halight",
    "start": "2174079",
    "end": "2180240"
  },
  {
    "text": "to compute everything at root so we just say for all the",
    "start": "2180240",
    "end": "2185920"
  },
  {
    "text": "functions or fun that we defined compute Roots all of you and that is telling",
    "start": "2185920",
    "end": "2191000"
  },
  {
    "text": "Hali that I want you to be done with this thing before you compute anything",
    "start": "2191000",
    "end": "2196800"
  },
  {
    "text": "that depends on it just get this one out of the way store it in memory and then you can compute the next thing so that",
    "start": "2196800",
    "end": "2204119"
  },
  {
    "text": "in practice means we're going to get uh for Loop over X and Y for the maximum value but not just the maximum value but",
    "start": "2204119",
    "end": "2211400"
  },
  {
    "text": "also the initial initialization of the maximum value so it's going to initialize the whole image zero",
    "start": "2211400",
    "end": "2217560"
  },
  {
    "text": "and then it's going to make another loop over X and Y and all the images to produce the maximum value and similarly",
    "start": "2217560",
    "end": "2224040"
  },
  {
    "text": "for the minimum value and then it's going to Loop over the entire threshold image and so on so this is uh another",
    "start": "2224040",
    "end": "2232800"
  },
  {
    "text": "Extreme as I said it's in a sense using the maximum amount of memory almost it's",
    "start": "2232800",
    "end": "2238839"
  },
  {
    "text": "trying to retain everything before uh it's needed and it's uh the extreme that",
    "start": "2238839",
    "end": "2245319"
  },
  {
    "text": "doesn't do any at least I think it shouldn't do minimal recomputation of",
    "start": "2245319",
    "end": "2251119"
  },
  {
    "text": "the same values at least yeah I'm going to skip these last ones but you get the picture if not the",
    "start": "2251119",
    "end": "2257640"
  },
  {
    "text": "animation is pretty good at showing this so the maximum image is computed the",
    "start": "2257640",
    "end": "2263680"
  },
  {
    "text": "minimum image is initialized and then computed and you can see that it's doing all the reads all over again over the",
    "start": "2263680",
    "end": "2269119"
  },
  {
    "text": "input images then is Computing the threshold by using um the input image",
    "start": "2269119",
    "end": "2275920"
  },
  {
    "text": "again and then the binary code the decimal code and finally the projector",
    "start": "2275920",
    "end": "2281079"
  },
  {
    "text": "column and again each image at the time and this is slightly faster at",
    "start": "2281079",
    "end": "2288359"
  },
  {
    "text": "least on my machine we're down to 48 milliseconds so might call it an improvement and ship it I don't think",
    "start": "2288359",
    "end": "2294359"
  },
  {
    "text": "we're done yet so the best thing to do inh halite is of course as with everything else to",
    "start": "2294359",
    "end": "2301720"
  },
  {
    "text": "strike a balance and the best way to do that here",
    "start": "2301720",
    "end": "2309040"
  },
  {
    "text": "is to use uh the functions compute at and compute with that I've already been mentioning a couple of",
    "start": "2309040",
    "end": "2315079"
  },
  {
    "text": "times so here we're getting into the",
    "start": "2315079",
    "end": "2321119"
  },
  {
    "text": "details we say that I want the minimum value to be calculated at the same Loop",
    "start": "2321119",
    "end": "2328160"
  },
  {
    "text": "level as the projector column when it's looping over the variable X we moving the minimum value back in",
    "start": "2328160",
    "end": "2334800"
  },
  {
    "text": "there and that moves both the initialization and the",
    "start": "2334800",
    "end": "2340640"
  },
  {
    "text": "calculation into that Loop level however I noticed that there's another thing we",
    "start": "2340640",
    "end": "2346920"
  },
  {
    "text": "want to do and that is that we want to be smart about Computing the minimum and the maximum because they don't have to",
    "start": "2346920",
    "end": "2352960"
  },
  {
    "text": "do that in their own Loops they can do it in the same Loop let's do that we do that by saying",
    "start": "2352960",
    "end": "2359480"
  },
  {
    "text": "maximum. update which means in the update definition that you have please",
    "start": "2359480",
    "end": "2365319"
  },
  {
    "text": "compute with the update definition of the minimum which is minimum.",
    "start": "2365319",
    "end": "2370839"
  },
  {
    "text": "update over the loop of the reduction domain the",
    "start": "2370839",
    "end": "2377480"
  },
  {
    "text": "em and now it's starting to look like the code I would have hoped to to write",
    "start": "2377480",
    "end": "2384200"
  },
  {
    "text": "uh maybe if I wrote the procedural version myself and then we do the same for the",
    "start": "2384200",
    "end": "2391760"
  },
  {
    "text": "threshold and the decimal code make sure that those are also computed in the same Loop level as the projector",
    "start": "2391760",
    "end": "2398839"
  },
  {
    "text": "column and that looks like this essentially the visualization looks",
    "start": "2398960",
    "end": "2405359"
  },
  {
    "start": "2399000",
    "end": "2714000"
  },
  {
    "text": "a lot like when we use the inline schedule it's just that the blue dots on",
    "start": "2405359",
    "end": "2410880"
  },
  {
    "text": "the top it's a bit hard to see but trust me they blink a lot less so there's a",
    "start": "2410880",
    "end": "2416319"
  },
  {
    "text": "lot fewer reads of the input images now and that puts us on time used at 16",
    "start": "2416319",
    "end": "2423760"
  },
  {
    "text": "milliseconds and uh 3.8 times speed up of the algorithm which is getting decent",
    "start": "2423760",
    "end": "2431119"
  },
  {
    "text": "now now we're talking but of course this is just running on one thread on my machine not",
    "start": "2431119",
    "end": "2438640"
  },
  {
    "text": "vectorized or anything so this is where kind of the the really nice superpowers",
    "start": "2438640",
    "end": "2444440"
  },
  {
    "text": "of halight are coming in in my opinion because now we can introduce vectorization just as easily and we can",
    "start": "2444440",
    "end": "2451160"
  },
  {
    "text": "do it without messing with the algorithm and we do that by splitting",
    "start": "2451160",
    "end": "2458920"
  },
  {
    "text": "Loop over X into a loop over X outer like uh chunks of X values and then an",
    "start": "2458920",
    "end": "2467119"
  },
  {
    "text": "inner X inside those chunks so we Define those vars we then tell halight to split",
    "start": "2467119",
    "end": "2475200"
  },
  {
    "text": "X and then it's as easy as just saying uh vectorize over the X inner and",
    "start": "2475200",
    "end": "2483079"
  },
  {
    "text": "I'm doing this on the projector column funk because I already uh I've already",
    "start": "2483079",
    "end": "2489640"
  },
  {
    "text": "told the other funks to be computed at this frunk and it turned out in this",
    "start": "2489640",
    "end": "2495240"
  },
  {
    "text": "case that it was enough to just compute the maximum and minimum at and the others would actually follow or get",
    "start": "2495240",
    "end": "2500839"
  },
  {
    "text": "inlined so that's what I've done here and now we're down to 3.7 milliseconds",
    "start": "2500839",
    "end": "2508119"
  },
  {
    "text": "and a 16 times speed up and now the visualization is starting to look really cool because now you can see that it's actually doing these vectorized reads",
    "start": "2508119",
    "end": "2515359"
  },
  {
    "text": "and uh um operations on the values so",
    "start": "2515359",
    "end": "2520960"
  },
  {
    "text": "now we're starting to use more of the advanced features of my",
    "start": "2520960",
    "end": "2528040"
  },
  {
    "text": "CPU I'll just let this run for a little while and I should mention that uh I've",
    "start": "2528079",
    "end": "2535119"
  },
  {
    "text": "slowed down the visualization now because it was running a bit too fast it was just like everything was done so",
    "start": "2535119",
    "end": "2540920"
  },
  {
    "text": "that's why it looks like it's slower but it's running faster when you're actually running the algorithm",
    "start": "2540920",
    "end": "2548160"
  },
  {
    "text": "okay and next just as easy we can ask",
    "start": "2548359",
    "end": "2553640"
  },
  {
    "text": "Hali to introduce parallelism so we got vectorization with uh almost a one liner",
    "start": "2553640",
    "end": "2559800"
  },
  {
    "text": "at least three four lines and parallelism is actually a oneliner I just say I think you can compute this",
    "start": "2559800",
    "end": "2567400"
  },
  {
    "text": "faster if you do it in parallel over the rows and that turns out to be true that",
    "start": "2567400",
    "end": "2574599"
  },
  {
    "text": "puts us at 1.9 Mill milliseconds and a 32x speed up and the visualization looks",
    "start": "2574599",
    "end": "2582880"
  },
  {
    "text": "insane so now even the visualization is going pretty",
    "start": "2583480",
    "end": "2588960"
  },
  {
    "text": "fast and finally the thing that we are actually doing in C uh since we want to",
    "start": "2588960",
    "end": "2594119"
  },
  {
    "text": "run on the gpus and and use open CL or Cuda or other GPU Frameworks is that we",
    "start": "2594119",
    "end": "2600839"
  },
  {
    "text": "can tell haly to use a GPU tiling technique instead the that requires us",
    "start": "2600839",
    "end": "2607359"
  },
  {
    "text": "to uh split both X and Y into inner and",
    "start": "2607359",
    "end": "2612720"
  },
  {
    "text": "outer variables because then we can use the GPU tile function and say that we want X",
    "start": "2612720",
    "end": "2620400"
  },
  {
    "text": "and Y to be split into X outer y outer X inner um y inner and then give it a tile",
    "start": "2620400",
    "end": "2627599"
  },
  {
    "text": "size in this case I found that 16 * 16 tiles was pretty optimal and then as you",
    "start": "2627599",
    "end": "2633800"
  },
  {
    "text": "see on the right hand side halight will now turn all of those uh outer for Loops",
    "start": "2633800",
    "end": "2638839"
  },
  {
    "text": "into what it's calling GPU blocks and GPU threads and I'm not going to go into details about how that actually works uh",
    "start": "2638839",
    "end": "2646520"
  },
  {
    "text": "but I can show you the visualization on the next slide on how it conceptually works but I should mention that Hali did",
    "start": "2646520",
    "end": "2652680"
  },
  {
    "text": "not allow me to visualize how it's actually running on the GPU probably because it doesn't actually know because",
    "start": "2652680",
    "end": "2659280"
  },
  {
    "text": "it's a bit up to the GPU drivers itself to to decide exactly which order things",
    "start": "2659280",
    "end": "2664520"
  },
  {
    "text": "are going to happen but it will show you that things are happening in tiles so the actual reads and writes are probably",
    "start": "2664520",
    "end": "2672319"
  },
  {
    "text": "not um not happening the way they actually are happening on the GPU",
    "start": "2672319",
    "end": "2678040"
  },
  {
    "text": "because that's dependent but the important part is that we're now at 0.6 milliseconds and 100x",
    "start": "2678040",
    "end": "2686800"
  },
  {
    "text": "speed up which is pretty nice considering that I have not changed the algorithm once along the way I've only",
    "start": "2686800",
    "end": "2695319"
  },
  {
    "text": "changed the the optimization so I know at least um to our um in our experience",
    "start": "2695319",
    "end": "2703480"
  },
  {
    "text": "that we can trust halight in that we get the same images as we did before down to",
    "start": "2703480",
    "end": "2709680"
  },
  {
    "text": "of course floating Point precision and I should mention if you're",
    "start": "2709680",
    "end": "2716559"
  },
  {
    "start": "2714000",
    "end": "2762000"
  },
  {
    "text": "interested in in using halight yourself there are also Auto schedulers uh I don't have any uh more slides on that in",
    "start": "2716559",
    "end": "2724200"
  },
  {
    "text": "this talk uh but but what those are um is essentially a way that you can write",
    "start": "2724200",
    "end": "2730240"
  },
  {
    "text": "your algorithm and you can ask Hali to run one of its autos schedulers and",
    "start": "2730240",
    "end": "2735319"
  },
  {
    "text": "those will try to find the optimal schedule for your algorithm on the current machine and depending on which",
    "start": "2735319",
    "end": "2742480"
  },
  {
    "text": "one you're using they're either very uh simple to use or you have to provide them some additional information and",
    "start": "2742480",
    "end": "2749040"
  },
  {
    "text": "they can try to find schedules on the uh CPU alone or even on the GPU so uh yeah",
    "start": "2749040",
    "end": "2756960"
  },
  {
    "text": "you should check that out if you're interested in using halight yourself all right so let's continue",
    "start": "2756960",
    "end": "2764400"
  },
  {
    "start": "2762000",
    "end": "3034000"
  },
  {
    "text": "this journey we started rewriting our open CL pipeline in halight when we saw these",
    "start": "2764400",
    "end": "2771079"
  },
  {
    "text": "benefits and and saw that hey this this might actually become very useful for us and we had a honeymoon period where",
    "start": "2771079",
    "end": "2778119"
  },
  {
    "text": "halight fit really well uh especially in the earlier parts of the image processing Pipeline and that's the parts",
    "start": "2778119",
    "end": "2785440"
  },
  {
    "text": "where uh we're working only on images and or nend dimensional buffers and everything",
    "start": "2785440",
    "end": "2793240"
  },
  {
    "text": "can be expressed as a feed forward graph just like the one we talked about now where we have the input images they are",
    "start": "2793240",
    "end": "2799960"
  },
  {
    "text": "used to calculate minimum and maximum and the binary code but everything is just feeding forward all along until we",
    "start": "2799960",
    "end": "2806280"
  },
  {
    "text": "get the projector column if you don't have that then suddenly halight is not the right fit",
    "start": "2806280",
    "end": "2813760"
  },
  {
    "text": "and especially dynamic programming algorithms think like dyra or AAR those",
    "start": "2813760",
    "end": "2820359"
  },
  {
    "text": "are not the algorithms you want to run in halight even though you want to have all the vectorization parallelism and",
    "start": "2820359",
    "end": "2826480"
  },
  {
    "text": "running it on the GPU and that's just because it doesn't fit into uh into the",
    "start": "2826480",
    "end": "2832520"
  },
  {
    "text": "the Paradigm of halight and unfortunately we got burnt by this pretty far into the project because we",
    "start": "2832520",
    "end": "2838880"
  },
  {
    "text": "had one of our filters which was using a dynamic programming uh technique and",
    "start": "2838880",
    "end": "2844520"
  },
  {
    "text": "yeah that uh that just didn't fit even though we tried really hard for a long time and uh",
    "start": "2844520",
    "end": "2850359"
  },
  {
    "text": "that's where I recommend people like myself to sometimes just look outside",
    "start": "2850359",
    "end": "2855640"
  },
  {
    "text": "the box and not try so hard to get the square peg into the square peg into the",
    "start": "2855640",
    "end": "2861000"
  },
  {
    "text": "round hole and there's also um you can do some",
    "start": "2861000",
    "end": "2868200"
  },
  {
    "text": "recursion in halight like the reduction domains allow you to have recursion on on the same function essentially but you",
    "start": "2868200",
    "end": "2875760"
  },
  {
    "text": "you can't have anything that feds back into the graph so yeah Advanced",
    "start": "2875760",
    "end": "2881240"
  },
  {
    "text": "recursive algorithms also don't fit that well but halight thankfully has a way to",
    "start": "2881240",
    "end": "2888040"
  },
  {
    "text": "kind of bail out if you need to of course you can run code on the side of",
    "start": "2888040",
    "end": "2893240"
  },
  {
    "text": "halight you don't have to put everything inside halight but if your pipeline like ours is looking all green and shiny it's",
    "start": "2893240",
    "end": "2900200"
  },
  {
    "text": "like all the pieces fit together and then bam there's this dynamic programming part that just doesn't fit",
    "start": "2900200",
    "end": "2906200"
  },
  {
    "text": "then thankfully you can call an extern function from halight and this is kind",
    "start": "2906200",
    "end": "2912760"
  },
  {
    "text": "of like just declaring in a header that hey there's this function uh I know I",
    "start": "2912760",
    "end": "2918319"
  },
  {
    "text": "can call it here's the signature uh and the Linker will take care of it when we get there so if you",
    "start": "2918319",
    "end": "2926079"
  },
  {
    "text": "if you saw Andre's uh talk um yesterday on symbols this is just one of those",
    "start": "2926079",
    "end": "2932520"
  },
  {
    "text": "undefined symbols so this doesn't work when you're using halide with just in",
    "start": "2932520",
    "end": "2938200"
  },
  {
    "text": "time compilation and want to realize your Val uh results like in the same",
    "start": "2938200",
    "end": "2944000"
  },
  {
    "text": "code as you're developing them but it works very well with the ahead of time compilation so when you compile this",
    "start": "2944000",
    "end": "2950280"
  },
  {
    "text": "down to object code and or an object file and you link it to your executable",
    "start": "2950280",
    "end": "2955680"
  },
  {
    "text": "later as long as you provide the function that you're referring to with the correct signature then the Linker",
    "start": "2955680",
    "end": "2962440"
  },
  {
    "text": "will find it and halight will call it for you and what's nice about this is that um even though we use it at kind of",
    "start": "2962440",
    "end": "2969960"
  },
  {
    "text": "the top level we have like one big buffer is computed and then we have one",
    "start": "2969960",
    "end": "2975799"
  },
  {
    "text": "of these compute root functions that we want to run uh on the entire buffer if",
    "start": "2975799",
    "end": "2981000"
  },
  {
    "text": "you're not using opencl or the GPU uh if you're using the parallelism and",
    "start": "2981000",
    "end": "2987000"
  },
  {
    "text": "vectorization um features in halight instead you can actually uh get Halo to",
    "start": "2987000",
    "end": "2992720"
  },
  {
    "text": "call this with chunks of your buffer or I think technically it will give you the entire buffer but it will also tell you",
    "start": "2992720",
    "end": "2998359"
  },
  {
    "text": "the coordinates and where in that buffer you should do your computations and do",
    "start": "2998359",
    "end": "3003680"
  },
  {
    "text": "all of the parallelization and and U things that are needed on top but then",
    "start": "3003680",
    "end": "3008960"
  },
  {
    "text": "you really have to take care of that you're not doing anything that could cause a race condition in your function so it gets more advanced so yeah the",
    "start": "3008960",
    "end": "3016480"
  },
  {
    "text": "caveat here is that you cannot call any custom open CL functions for instance so",
    "start": "3016480",
    "end": "3022119"
  },
  {
    "text": "you can't inject an extern open CL function in the GPU",
    "start": "3022119",
    "end": "3027640"
  },
  {
    "text": "code unfortunately because that's what we really wish we had but that's how how",
    "start": "3027640",
    "end": "3033319"
  },
  {
    "text": "it is so in the end we rewrote at least",
    "start": "3033319",
    "end": "3038480"
  },
  {
    "start": "3034000",
    "end": "3143000"
  },
  {
    "text": "almost our open CL code in halight uh and we were pretty happy",
    "start": "3038480",
    "end": "3043880"
  },
  {
    "text": "about that we think that we have gotten a lot of benefits from using halight um",
    "start": "3043880",
    "end": "3050359"
  },
  {
    "text": "both to separate the the algorithms from the optimizations but especially being able ble to do the R&D work in the same",
    "start": "3050359",
    "end": "3057359"
  },
  {
    "text": "environment as the production code lives and we are continuously trying to add new tools internally to to use",
    "start": "3057359",
    "end": "3065160"
  },
  {
    "text": "halight better uh we have for instance figured out that you can use matplot lib",
    "start": "3065160",
    "end": "3070200"
  },
  {
    "text": "to add some nice sliders uh and now play around with the algorithms that are",
    "start": "3070200",
    "end": "3075400"
  },
  {
    "text": "running live in halight and just find the parameters you need in the production version of the code which is",
    "start": "3075400",
    "end": "3081119"
  },
  {
    "text": "way faster than what we did before where we would have to compile the entire SD K and then start playing around with the",
    "start": "3081119",
    "end": "3086880"
  },
  {
    "text": "parameters compile again so yeah just working in this interactive environment with the right tooling that's that's",
    "start": "3086880",
    "end": "3093440"
  },
  {
    "text": "great uh but even though we're very happy about choosing Python and and using",
    "start": "3093440",
    "end": "3100160"
  },
  {
    "text": "python with halight we have to admit that we are missing the static type",
    "start": "3100160",
    "end": "3105440"
  },
  {
    "text": "checking that you would get if you use the C++ version so we have had our occasions of putting what we thought was",
    "start": "3105440",
    "end": "3112880"
  },
  {
    "text": "a 32bit uh integer into a function but it turned out to be 8bit and it was",
    "start": "3112880",
    "end": "3118240"
  },
  {
    "text": "doing all kinds of overflows and the images just looked like garbage and nobody understood why where the C++",
    "start": "3118240",
    "end": "3124880"
  },
  {
    "text": "version would have told us this right away so yeah we're trying to",
    "start": "3124880",
    "end": "3130000"
  },
  {
    "text": "retroactively add some typing information into our code in Python now which is of course possible but uh yeah",
    "start": "3130000",
    "end": "3136799"
  },
  {
    "text": "haly doesn't come with the full typing uh for the python bindings",
    "start": "3136799",
    "end": "3142720"
  },
  {
    "text": "yet so that's it from my side thank you all for coming and if you have any questions I'm happy to answer",
    "start": "3142720",
    "end": "3148770"
  },
  {
    "start": "3143000",
    "end": "3418000"
  },
  {
    "text": "[Applause]",
    "start": "3148770",
    "end": "3152530"
  },
  {
    "text": "them",
    "start": "3157319",
    "end": "3160319"
  },
  {
    "text": "questions very good question so there are uh definitely um the 3D cameras that",
    "start": "3166799",
    "end": "3174240"
  },
  {
    "text": "do exactly that and that's doable and it comes down to uh which problems you want",
    "start": "3174240",
    "end": "3181520"
  },
  {
    "text": "to solve and to which degree you can get the Precision out uh when you try to solve those problems so yes you can have",
    "start": "3181520",
    "end": "3188599"
  },
  {
    "text": "a a 2d pattern with two cameras look for the same features and I",
    "start": "3188599",
    "end": "3193960"
  },
  {
    "text": "think uh is it the connect that essentially works like that with a one",
    "start": "3193960",
    "end": "3199359"
  },
  {
    "text": "with just one camera and a 2d pattern and that gives more speed essentially",
    "start": "3199359",
    "end": "3206640"
  },
  {
    "text": "oh it has two okay yeah yeah so then yeah so those Solutions typically",
    "start": "3206640",
    "end": "3215240"
  },
  {
    "text": "give you uh very high speed but uh as far as I've understood they give you then lower Point Cloud precision and",
    "start": "3215240",
    "end": "3221960"
  },
  {
    "text": "quality and and I think it essentially the the simplest explanation is just uh",
    "start": "3221960",
    "end": "3228520"
  },
  {
    "text": "down to the amount like the the signal to noise ratio you get by doing it that way",
    "start": "3228520",
    "end": "3234160"
  },
  {
    "text": "so",
    "start": "3234160",
    "end": "3237160"
  },
  {
    "text": "yes yeah so the question is uh are we using any linter like mypi for the",
    "start": "3245440",
    "end": "3251240"
  },
  {
    "text": "python problem and uh yes we are doing that and we have uh used I think it's",
    "start": "3251240",
    "end": "3257680"
  },
  {
    "text": "myi to generate types for halight which uh has helped a lot and yeah we are",
    "start": "3257680",
    "end": "3264599"
  },
  {
    "text": "progressing on the path there to find the best tool um in my experience pyite",
    "start": "3264599",
    "end": "3270799"
  },
  {
    "text": "uh has been a bit better at uh providing um more information about",
    "start": "3270799",
    "end": "3277720"
  },
  {
    "text": "errors in the in the code so yeah we are looking into that currently but there's",
    "start": "3277720",
    "end": "3283640"
  },
  {
    "text": "uh a lot of potential and it's um in our case more about how much time we actually have to prioritize that over",
    "start": "3283640",
    "end": "3289480"
  },
  {
    "text": "the other work that we we do so but we are improving",
    "start": "3289480",
    "end": "3297079"
  },
  {
    "text": "yes yes so the question is if you're using the C++ bindings can you then uh",
    "start": "3307000",
    "end": "3312720"
  },
  {
    "text": "still do the realizations essentially at runtime and not just compile it down to",
    "start": "3312720",
    "end": "3318520"
  },
  {
    "text": "to biner code and the answer is yes so Halid can essentially be run in these two modes both in in Python and Plus+ so",
    "start": "3318520",
    "end": "3325799"
  },
  {
    "text": "we have the adjus in time compilation mode uh where it's leveraging I think it's llvm at runtime to to generate",
    "start": "3325799",
    "end": "3332839"
  },
  {
    "text": "adjus in time compile code and then run it and the downside of doing that is essentially that it takes longer when",
    "start": "3332839",
    "end": "3340319"
  },
  {
    "text": "you're doing it uh because you have have the compilation step and that if you",
    "start": "3340319",
    "end": "3345400"
  },
  {
    "text": "were to do that in your production code you would essentially have to bundle the like full version of halight with llvm",
    "start": "3345400",
    "end": "3353480"
  },
  {
    "text": "included with your executable which can become quite big but if you do the ahead",
    "start": "3353480",
    "end": "3358640"
  },
  {
    "text": "of time compiled version of halight then uh halight provides a very small and",
    "start": "3358640",
    "end": "3363720"
  },
  {
    "text": "minimal runtime that you Pro um um link to your code",
    "start": "3363720",
    "end": "3369720"
  },
  {
    "text": "so uh for production codes the ahead of time compiled version is definitely recommended from from our side but it's",
    "start": "3369720",
    "end": "3376480"
  },
  {
    "text": "doable and and you can get pretty far with that as well so I would say for a a",
    "start": "3376480",
    "end": "3382920"
  },
  {
    "text": "new project where you're just trying to use out halight go for it if you're not concerned about the performance right",
    "start": "3382920",
    "end": "3388319"
  },
  {
    "text": "now then then do that and then you just know that you can ahead of time compile it later and then uh get the additional",
    "start": "3388319",
    "end": "3395480"
  },
  {
    "text": "speed up by not",
    "start": "3395480",
    "end": "3398400"
  },
  {
    "text": "compiling any other questions if not I'll be around uh in the lobby thank you",
    "start": "3404720",
    "end": "3412200"
  },
  {
    "text": "all for coming",
    "start": "3412200",
    "end": "3416880"
  }
]