[
  {
    "start": "0",
    "end": "130000"
  },
  {
    "text": "hello good afternoon oh and Dave I'm in from Carmel Indiana back in the United",
    "start": "8290",
    "end": "15199"
  },
  {
    "text": "States now I've been working with F sharp for a number of years now although",
    "start": "15199",
    "end": "20540"
  },
  {
    "text": "I have to confess that the past few years since writing the book of F sharp",
    "start": "20540",
    "end": "25580"
  },
  {
    "text": "my career has not necessarily allowed me to write f sharp as much as I would like as a as many of you can imagine I'm sure",
    "start": "25580",
    "end": "33199"
  },
  {
    "text": "up you end up in shops or working for a company says we're a c-sharp shop and",
    "start": "33199",
    "end": "39760"
  },
  {
    "text": "the throne upon trying new things so that's been kind of my life since I wrote the book but that doesn't mean",
    "start": "39760",
    "end": "45890"
  },
  {
    "text": "that my enjoyment of the F sharp language has diminished and in fact",
    "start": "45890",
    "end": "51199"
  },
  {
    "text": "every time I work in C sharp there are plenty of things that I miss daily there are a number of things I found",
    "start": "51199",
    "end": "57260"
  },
  {
    "text": "workarounds for there's a number of things that the c-sharp language team is working on finding workarounds for but",
    "start": "57260",
    "end": "64878"
  },
  {
    "text": "they're usually not anywhere near as close to what the the f-sharp implementation is so now I do miss",
    "start": "64879",
    "end": "71659"
  },
  {
    "text": "working in F sharp daily and I hope to make that be able to remedy that in the",
    "start": "71659",
    "end": "77630"
  },
  {
    "text": "next few weeks here with an upcoming project but before we get started here my publisher was kind enough to give me",
    "start": "77630",
    "end": "84649"
  },
  {
    "text": "a few copies of the book to hand out here at NDC London now they're up on the",
    "start": "84649",
    "end": "89960"
  },
  {
    "text": "front table and they also sent enough stickers for I think the entire conference I don't want to take these",
    "start": "89960",
    "end": "95810"
  },
  {
    "text": "books back with me because they spend up on my backpack and there's a long time in the plane and even with those toss up",
    "start": "95810",
    "end": "102350"
  },
  {
    "text": "I've got to run across the airport so my friend Brian is going to be monitoring tweets and he will be in charge of",
    "start": "102350",
    "end": "109460"
  },
  {
    "text": "distributing those books so if you already have a copy please leave it for somebody who does not have one but",
    "start": "109460",
    "end": "117259"
  },
  {
    "text": "otherwise those will be handed out at the end of the session aside from that again I'm Dave consultant back from",
    "start": "117259",
    "end": "123979"
  },
  {
    "text": "Indiana and this is the book of f-sharp 60-minute human edition",
    "start": "123979",
    "end": "130780"
  },
  {
    "start": "130000",
    "end": "240000"
  },
  {
    "text": "so I think for me my story seems to be pretty typical from the people I've talked to the people coming into f-sharp",
    "start": "132630",
    "end": "138120"
  },
  {
    "text": "in Y F sharp I was a c-sharp guy my entire basically my entire career coming",
    "start": "138120",
    "end": "143220"
  },
  {
    "text": "into this and I didn't really set out to learn a functional language I just kind of stumbled upon it by accident and for",
    "start": "143220",
    "end": "151560"
  },
  {
    "text": "me the Gateway was little technology called link I'm sure that sounds pretty",
    "start": "151560",
    "end": "157650"
  },
  {
    "text": "familiar but what I found over times I really liked the patterns that were",
    "start": "157650",
    "end": "165720"
  },
  {
    "text": "evolving out of link and I looked at the query syntax initially and then I",
    "start": "165720",
    "end": "172020"
  },
  {
    "text": "started looking at the the method syntax and I'm like wow why do we even have this query syntax like this wasn't",
    "start": "172020",
    "end": "177630"
  },
  {
    "text": "sequel and that whole method chaining and delegation approach just really",
    "start": "177630",
    "end": "184860"
  },
  {
    "text": "resonated with me it made so much sense and soon my code started looking like link like I was writing functional code",
    "start": "184860",
    "end": "191970"
  },
  {
    "text": "I just didn't know it back then but as I learned about functional programming and",
    "start": "191970",
    "end": "197640"
  },
  {
    "text": "as I learned about the advantages that it has over more traditional",
    "start": "197640",
    "end": "203340"
  },
  {
    "text": "methodologies as we're learning the terminology and giving names to what I",
    "start": "203340",
    "end": "208860"
  },
  {
    "text": "was doing things like first-class functions and realizing the advantages",
    "start": "208860",
    "end": "214410"
  },
  {
    "text": "like the default immutability and the the improved predictability of the",
    "start": "214410",
    "end": "222390"
  },
  {
    "text": "software I really fell in love with the functional paradigm and from that I",
    "start": "222390",
    "end": "228210"
  },
  {
    "text": "learned about F sharp so F sharp strongly typed functional first programming language for writing simple",
    "start": "228210",
    "end": "234690"
  },
  {
    "text": "code to solve complex problems great global marketing speak yeah but it",
    "start": "234690",
    "end": "243450"
  },
  {
    "start": "240000",
    "end": "294000"
  },
  {
    "text": "doesn't really give the whole picture because F sharp E is or is a functional",
    "start": "243450",
    "end": "248910"
  },
  {
    "text": "language and that's just for the the academics and the financial companies right no it's a general-purpose language",
    "start": "248910",
    "end": "255600"
  },
  {
    "text": "so we can write whatever write whatever type of software we want but it's also a",
    "start": "255600",
    "end": "261359"
  },
  {
    "text": "hybrid language it's a multi paradigm language it just happens to be a functional first",
    "start": "261359",
    "end": "267470"
  },
  {
    "text": "language what that means is that it's actively trying to guide us into writing",
    "start": "267470",
    "end": "273530"
  },
  {
    "text": "code in a functional paradigm and then when we need to like when we're using a library that's object-oriented we can",
    "start": "273530",
    "end": "280849"
  },
  {
    "text": "revert back to that we can fall back onto those different paradigms as needed",
    "start": "280849",
    "end": "286840"
  },
  {
    "text": "but overall it's going to really try to guide us toward writing in that functional style so there really isn't a",
    "start": "286840",
    "end": "296870"
  },
  {
    "start": "294000",
    "end": "417000"
  },
  {
    "text": "formal definition of functional programming you talk to ten programmers you get ten different answers this was",
    "start": "296870",
    "end": "302990"
  },
  {
    "text": "kind of an aggregate definition I came up with at one point the functional programming pair is a paradigm which",
    "start": "302990",
    "end": "309259"
  },
  {
    "text": "concentrates on computing results rather than performing actions so we're not going to worry about managing state",
    "start": "309259",
    "end": "315110"
  },
  {
    "text": "we're just going to worry about inputs and outputs and to me functional programming is really built on three",
    "start": "315110",
    "end": "320930"
  },
  {
    "text": "pillars first is painting side effects you'll hear about things like well you",
    "start": "320930",
    "end": "327860"
  },
  {
    "text": "can't have immutability you can't have side effects and that's the wrong mentality to me because there's also",
    "start": "327860",
    "end": "333289"
  },
  {
    "text": "that goal of software is to have some some effect on the world right whether you're writing to a database or calling",
    "start": "333289",
    "end": "339199"
  },
  {
    "text": "some service you're changing the environment around you somehow it's not about eliminating them it's about taming",
    "start": "339199",
    "end": "345500"
  },
  {
    "text": "them getting rid of global scope that type of thing you get rid of that you",
    "start": "345500",
    "end": "350750"
  },
  {
    "text": "can control if you have to have some type of viewed ability whether you're changing the contents of an array limit",
    "start": "350750",
    "end": "357259"
  },
  {
    "text": "it to a function don't get rid of it all together the second pillar is about",
    "start": "357259",
    "end": "363889"
  },
  {
    "text": "emphasizing expressions so c-sharp the statement based language right F sharp",
    "start": "363889",
    "end": "372080"
  },
  {
    "text": "is expression based and that offers a number of advantages in itself one everything has an input and everything",
    "start": "372080",
    "end": "379069"
  },
  {
    "text": "has an output well if everything has an output that makes it much easier to understand what's going on inside of",
    "start": "379069",
    "end": "385969"
  },
  {
    "text": "some piece of code so if there's an output you can also check what that output is right that means it's easier",
    "start": "385969",
    "end": "392750"
  },
  {
    "text": "to test and it's easier to predict what's going on and the third pillar is functions as",
    "start": "392750",
    "end": "400110"
  },
  {
    "text": "data so we have our inch we have our strings we have our custom objects well functions should be treated no",
    "start": "400110",
    "end": "406200"
  },
  {
    "text": "difference in the language we're not going to really talk is that emphasized functions as data so much in the overall",
    "start": "406200",
    "end": "412260"
  },
  {
    "text": "content of this talk but we'll see it repeated throughout so we've talked a",
    "start": "412260",
    "end": "419970"
  },
  {
    "start": "417000",
    "end": "515000"
  },
  {
    "text": "little bit about these advantages and I know this has been a heated topic as the",
    "start": "419970",
    "end": "425280"
  },
  {
    "text": "past week or so is going on about whether we should be relying on the type system or whether we should be relying",
    "start": "425280",
    "end": "431490"
  },
  {
    "text": "on the our unit tests and our",
    "start": "431490",
    "end": "437160"
  },
  {
    "text": "integration tests well first off I don't think there's an either/or I think it's above but I've always been of the",
    "start": "437160",
    "end": "444590"
  },
  {
    "text": "mindset that if the computer can do something for me why wouldn't I let it",
    "start": "444590",
    "end": "450590"
  },
  {
    "text": "let the type system do its job let the type system stop me from making stupid mistakes that that we all make",
    "start": "450590",
    "end": "458100"
  },
  {
    "text": "sometimes a time right you know I liken it to a saw my dad was",
    "start": "458100",
    "end": "465000"
  },
  {
    "text": "a big woodworker and he had his table saws and I see these saws in the garage",
    "start": "465000",
    "end": "470100"
  },
  {
    "text": "and they'd have an exposed blade you know how many times you hear about",
    "start": "470100",
    "end": "476130"
  },
  {
    "text": "somebody in a woods you know in a wood shop let's get this table saw sitting out there and they run their fingers through it well there are things you can",
    "start": "476130",
    "end": "484080"
  },
  {
    "text": "put on top of that slaw to stop you from running your fingers through it there's also things also things that you can take off of the saw that will allow you",
    "start": "484080",
    "end": "491330"
  },
  {
    "text": "but you want to rely entirely on making sure that you're paying attention 100 percent of the time or do you want to",
    "start": "491330",
    "end": "498420"
  },
  {
    "text": "have the language and the compiler stop you from doing those types of mistakes to begin with and then give you the",
    "start": "498420",
    "end": "504390"
  },
  {
    "text": "flexibility that when you say yes I know what I'm ready to do I can take off that safety I tend to go for the form assert",
    "start": "504390",
    "end": "512250"
  },
  {
    "text": "for leaving the safety on so this is the",
    "start": "512250",
    "end": "517950"
  },
  {
    "start": "515000",
    "end": "675000"
  },
  {
    "text": "first example in the book I acted in the book to not go with a hello world",
    "start": "517950",
    "end": "522990"
  },
  {
    "text": "example because everybody does hello world and when a language like F sharp",
    "start": "522990",
    "end": "528000"
  },
  {
    "text": "it's one line of code and one line of code does really tell you anything but this",
    "start": "528000",
    "end": "534029"
  },
  {
    "text": "example just a reverse polish notation calculator and it doesn't actually it",
    "start": "534029",
    "end": "539880"
  },
  {
    "text": "doesn't include every aspect of f-sharp but it involves numerous aspects and I",
    "start": "539880",
    "end": "546240"
  },
  {
    "text": "think you know just based on its conciseness even those of you who have",
    "start": "546240",
    "end": "551430"
  },
  {
    "text": "not used f-sharp or looked at F sharp can probably have some discern some idea of what's going on in here right you",
    "start": "551430",
    "end": "559170"
  },
  {
    "text": "know we we are have a it looks like it takes a string and okay there's this other thing let's solve items and",
    "start": "559170",
    "end": "564990"
  },
  {
    "text": "current oh okay that means is that a function it kind of looks like it's doing something match currents and items",
    "start": "564990",
    "end": "571500"
  },
  {
    "text": "okay I'm doing something with those that current value and that whatever is in items items must be some type of",
    "start": "571500",
    "end": "577529"
  },
  {
    "text": "collection it's plural right and then we can Co plus minus those look awful familiar I'm pretty used to those as my",
    "start": "577529",
    "end": "584279"
  },
  {
    "text": "mathematical symbols and then we can see Oh F split well s is coming in from",
    "start": "584279",
    "end": "590820"
  },
  {
    "text": "somewhere but split I know split that's a method off of the string so I must be",
    "start": "590820",
    "end": "596130"
  },
  {
    "text": "taking a string and breaking it apart on the spaces and then I'm executing some",
    "start": "596130",
    "end": "601410"
  },
  {
    "text": "method to solve this for every other variable so if you know that reverse",
    "start": "601410",
    "end": "606930"
  },
  {
    "text": "polish notation is taking a string of of expression or string of numbers and",
    "start": "606930",
    "end": "613200"
  },
  {
    "text": "operations you can have a pretty good idea but maybe it looked like something",
    "start": "613200",
    "end": "619140"
  },
  {
    "text": "like this the input to 3 plus so it's going to push 2 & 3 onto a stack and",
    "start": "619140",
    "end": "625130"
  },
  {
    "text": "then plus it's going to evaluate oh well",
    "start": "625130",
    "end": "630510"
  },
  {
    "text": "that's right here plus we're going to pop the Y value because that's the one",
    "start": "630510",
    "end": "636779"
  },
  {
    "text": "that was put on last we're going to pop the X off because that was one that was put on before and then we're going to do",
    "start": "636779",
    "end": "643050"
  },
  {
    "text": "some operation well what's t he is the rest of the items in that that that",
    "start": "643050",
    "end": "648270"
  },
  {
    "text": "array that came out of split similarly we have five four six plus divide so all",
    "start": "648270",
    "end": "657690"
  },
  {
    "text": "of these things that you can discern very quickly mapping back mentally from",
    "start": "657690",
    "end": "662880"
  },
  {
    "text": "the input of the string back to what the",
    "start": "662880",
    "end": "668940"
  },
  {
    "text": "calculator is doing so the magic behind",
    "start": "668940",
    "end": "677790"
  },
  {
    "start": "675000",
    "end": "885000"
  },
  {
    "text": "F sharp now and this is this is the thing that I think is probably the most important of all of the things in the F",
    "start": "677790",
    "end": "684810"
  },
  {
    "text": "sharp language only people heard of curried function okay so to me this is",
    "start": "684810",
    "end": "693990"
  },
  {
    "text": "really as I mentioned the most important thing in the way that F sharp behaves",
    "start": "693990",
    "end": "700080"
  },
  {
    "text": "because it opens up all of the rest of the expressiveness of the language so",
    "start": "700080",
    "end": "706080"
  },
  {
    "text": "you think about a C sharp application you call a function you have to give it the arguments right you have to go say",
    "start": "706080",
    "end": "712380"
  },
  {
    "text": "it's an add function like this you give it a and B those arguments are applied",
    "start": "712380",
    "end": "718350"
  },
  {
    "text": "at the same time they always have to be supplied together in this case we see we",
    "start": "718350",
    "end": "725160"
  },
  {
    "text": "see let add a and B gets a plus B and",
    "start": "725160",
    "end": "730280"
  },
  {
    "text": "our sum exactly what we would expect but notice an f-sharp we don't have parentheses around our",
    "start": "730280",
    "end": "737610"
  },
  {
    "text": "arguments we're not grouping them we're not comma-delimited them here we're just passing them along we know that from our",
    "start": "737610",
    "end": "745230"
  },
  {
    "text": "math classes and years of experience that adding 10 and 5 should give us 15 and it does but the signature of that",
    "start": "745230",
    "end": "756240"
  },
  {
    "text": "function is int goes to int goes to int",
    "start": "756240",
    "end": "761420"
  },
  {
    "text": "we can even see that if we hover over this back in the code sample Val add a",
    "start": "761480",
    "end": "768450"
  },
  {
    "text": "event goes to be event goes to int so I'm taking two integer values and",
    "start": "768450",
    "end": "773870"
  },
  {
    "text": "getting an integer value back but I'm not doing it the way that c-sharp does it because the F sharp compiler gives us",
    "start": "773870",
    "end": "781740"
  },
  {
    "text": "curried functions what that means is that it's really giving us a function",
    "start": "781740",
    "end": "787800"
  },
  {
    "text": "that returns another function and in F sharp every function must have exactly",
    "start": "787800",
    "end": "796290"
  },
  {
    "text": "one input and exactly one output you don't have things giving you multiple return values you don't have",
    "start": "796290",
    "end": "803100"
  },
  {
    "text": "things accepting multiple inputs if you think about working in c-sharp if you're",
    "start": "803100",
    "end": "810000"
  },
  {
    "text": "trying to work with your delegate types which is essentially what's going on here there's a separate class of of",
    "start": "810000",
    "end": "816210"
  },
  {
    "text": "delegates the family of f-sharp func versus func and action and predicate you",
    "start": "816210",
    "end": "822870"
  },
  {
    "text": "think about the complexity look at your link signatures I think there are nine",
    "start": "822870",
    "end": "828230"
  },
  {
    "text": "generic overloads of func I think there's nine or ten generic overloads of action well if you've",
    "start": "828230",
    "end": "835680"
  },
  {
    "text": "written your language in such a way that every function has just one input and just one output that eliminates tons of",
    "start": "835680",
    "end": "843090"
  },
  {
    "text": "complexity right there and it also means that the compiler can make more decisions about how your code should",
    "start": "843090",
    "end": "848130"
  },
  {
    "text": "behave and what it should do so our add function that we saw back here let add a",
    "start": "848130",
    "end": "855870"
  },
  {
    "text": "B gets a plus B is really saying let add a get a function that accepts B and",
    "start": "855870",
    "end": "865560"
  },
  {
    "text": "returns a plus B so this seems like okay whatever you know that's that's odd",
    "start": "865560",
    "end": "872190"
  },
  {
    "text": "that's a little different way of thinking about this what does that really matter why is this such a big deal",
    "start": "872190",
    "end": "877800"
  },
  {
    "text": "I mentioned currying is the key to unlocking the expressiveness of the",
    "start": "877800",
    "end": "883350"
  },
  {
    "text": "language the first point that this",
    "start": "883350",
    "end": "889440"
  },
  {
    "start": "885000",
    "end": "960000"
  },
  {
    "text": "brings us to what we call partial function application this is where we",
    "start": "889440",
    "end": "895830"
  },
  {
    "text": "apply just the first n parameters and arguments to a function together give",
    "start": "895830",
    "end": "902850"
  },
  {
    "text": "ourselves a new function so in this case I've taken that same add function and",
    "start": "902850",
    "end": "908340"
  },
  {
    "text": "I've defined a new function called add 10 and notice all it's doing is saying add 10 I don't have any lambda",
    "start": "908340",
    "end": "917940"
  },
  {
    "text": "expressions here I don't even have to tell it a separate parameter because the F sharp compiler is smart enough to know",
    "start": "917940",
    "end": "923850"
  },
  {
    "text": "what the signature of ADD is and those it takes an int and gives us a function",
    "start": "923850",
    "end": "929010"
  },
  {
    "text": "that takes another int that returns it in well there's an implied implicit",
    "start": "929010",
    "end": "936050"
  },
  {
    "text": "parameter on ad 10 and we can see that the signature of AD number in Stu",
    "start": "936050",
    "end": "942420"
  },
  {
    "text": "instant has now become int to int on ad 10 so every time we want to call ad 10",
    "start": "942420",
    "end": "949860"
  },
  {
    "text": "we're just going to basically be supplying the B parameter to add a",
    "start": "949860",
    "end": "957890"
  },
  {
    "start": "960000",
    "end": "1010000"
  },
  {
    "text": "number everything is an expression and even in the C sharp world our custom",
    "start": "962120",
    "end": "968430"
  },
  {
    "text": "operators are functions but we can't treat them as such in F sharp we can",
    "start": "968430",
    "end": "974970"
  },
  {
    "text": "treat all of our operators as functions so we change them from being in fix to being prefix here so if I want to create",
    "start": "974970",
    "end": "982020"
  },
  {
    "text": "a convenience function for doubling values double I wrap the operator and",
    "start": "982020",
    "end": "987960"
  },
  {
    "text": "parents give it two as its first argument just like with add we only supply the first argument for add 10 now",
    "start": "987960",
    "end": "995010"
  },
  {
    "text": "we're just applying the first argument for for our operator and so we can do 12",
    "start": "995010",
    "end": "1000110"
  },
  {
    "text": "is the result of doubling 6 and 30 is the result of tripling fan but a little",
    "start": "1000110",
    "end": "1007850"
  },
  {
    "text": "bit more practical when we get into pipelining",
    "start": "1007850",
    "end": "1013900"
  },
  {
    "start": "1010000",
    "end": "1050000"
  },
  {
    "text": "so while partial application allows us to just specify a certain number of the",
    "start": "1013900",
    "end": "1019430"
  },
  {
    "text": "parameters up front without specifying the rest pipelining lets us change our",
    "start": "1019430",
    "end": "1025250"
  },
  {
    "text": "functions together in a very logical consumable and composable way and I say",
    "start": "1025250",
    "end": "1034250"
  },
  {
    "text": "here data stream seamlessly flows from one function to the next so and you think of when you're looking at",
    "start": "1034250",
    "end": "1039829"
  },
  {
    "text": "pipelining just think of it you have this piece of data that's going to flow through the pipes and go through some",
    "start": "1039829",
    "end": "1045678"
  },
  {
    "text": "series of operations and come out the other end",
    "start": "1045679",
    "end": "1049809"
  },
  {
    "start": "1050000",
    "end": "1107000"
  },
  {
    "text": "the simple example take our add function sometimes we just want to do it and throw away the result so it's there in",
    "start": "1052440",
    "end": "1058890"
  },
  {
    "text": "the ignore function I don't care what it's doing I'm just going to throw it away ignore is built into the language",
    "start": "1058890",
    "end": "1064140"
  },
  {
    "text": "because F sharp requires that everything returns a value and so if you want to",
    "start": "1064140",
    "end": "1070880"
  },
  {
    "text": "explicitly not do anything say you've made an up you've made a function that",
    "start": "1070880",
    "end": "1076920"
  },
  {
    "text": "updates the database and it returns the number of rows affected you know you may",
    "start": "1076920",
    "end": "1082170"
  },
  {
    "text": "want to check that you may not want to check it if you don't want to check it you can ignore it but because of the",
    "start": "1082170",
    "end": "1087960"
  },
  {
    "text": "nature of the language if you don't put the ignore there then the compiler says",
    "start": "1087960",
    "end": "1093510"
  },
  {
    "text": "hey you're not using this value I'm not going to just throw it away unless you tell me to so it's a compiler warning",
    "start": "1093510",
    "end": "1099270"
  },
  {
    "text": "that you haven't used some returns that may actually be important to your code",
    "start": "1099270",
    "end": "1105500"
  },
  {
    "text": "how about this you know I come from the United States we have a different temperature system so this has been",
    "start": "1108170",
    "end": "1114720"
  },
  {
    "text": "useful for me this week now look at my watch I see luckily my watch does this",
    "start": "1114720",
    "end": "1119880"
  },
  {
    "text": "for me but I turn on the TV and it's telling me it's like zero degrees and like wow that's really cold now and it",
    "start": "1119880",
    "end": "1125490"
  },
  {
    "text": "is cold but how about a little conversion function I'm going to take",
    "start": "1125490",
    "end": "1130770"
  },
  {
    "text": "the degrees Fahrenheit I'm going to convert it to Celsius what I've got here",
    "start": "1130770",
    "end": "1137040"
  },
  {
    "text": "though average temperature so I just Lou in a couple of random we had a little bit of a hot hot spurt at the end of the",
    "start": "1137040",
    "end": "1142470"
  },
  {
    "text": "week a couple of weeks we go back home and we have thirty thirty two point",
    "start": "1142470",
    "end": "1149550"
  },
  {
    "text": "eight so a good range you know right around freezing with it with a warm spot at the end I want to take those values I",
    "start": "1149550",
    "end": "1158010"
  },
  {
    "text": "want to average them f-sharp has a module built in for giving us an average",
    "start": "1158010",
    "end": "1164930"
  },
  {
    "text": "but notice I've turned it around I changed the semantics of the code here I don't care right away about the average",
    "start": "1164930",
    "end": "1172260"
  },
  {
    "text": "yes I care about it it's still important but I don't care about it first what I care about first is the data that I'm",
    "start": "1172260",
    "end": "1178440"
  },
  {
    "text": "working with so I have my array of these five or six temperatures",
    "start": "1178440",
    "end": "1184790"
  },
  {
    "text": "and I use that pipe forward operator to send that array into the average",
    "start": "1184790",
    "end": "1192350"
  },
  {
    "text": "function that brings average those numbers together and give me the result",
    "start": "1192350",
    "end": "1198170"
  },
  {
    "text": "I don't need an intermediate variable to store that result I don't care about the",
    "start": "1198170",
    "end": "1203330"
  },
  {
    "text": "result outside of the scope of this pipeline the only thing I care about here is what the average temperature in",
    "start": "1203330",
    "end": "1211490"
  },
  {
    "text": "celcius was so let a ver egde temp get array plate to array average pipe to",
    "start": "1211490",
    "end": "1219280"
  },
  {
    "text": "Fahrenheit to Celsius so this is how you can write much more concise composable",
    "start": "1219280",
    "end": "1225170"
  },
  {
    "text": "code emphasizing the pieces that are important to your software it gets out",
    "start": "1225170",
    "end": "1232730"
  },
  {
    "text": "of the way you write this you care about in this case again we care about the temperature we know the series of",
    "start": "1232730",
    "end": "1238250"
  },
  {
    "text": "operations in a very linear process and we don't have any extra code noise to",
    "start": "1238250",
    "end": "1244370"
  },
  {
    "text": "distract us from the problem that we're actually trying to solve in this block of code and this is very idiomatic F",
    "start": "1244370",
    "end": "1251330"
  },
  {
    "text": "sharp so you'll see this all over the place now the fact that it allows us to",
    "start": "1251330",
    "end": "1257930"
  },
  {
    "text": "emphasize those important pieces keeps us focused on the problems we're actually trying to solve instead of",
    "start": "1257930",
    "end": "1263390"
  },
  {
    "text": "making the compiler and so doing things to make the compiler happy and it's just",
    "start": "1263390",
    "end": "1270560"
  },
  {
    "text": "a presentation so let's talk about some of the types that are built in to F",
    "start": "1270560",
    "end": "1277010"
  },
  {
    "start": "1272000",
    "end": "1466000"
  },
  {
    "text": "sharp a little bit here so first we have the tuple type how many people have used",
    "start": "1277010",
    "end": "1285590"
  },
  {
    "text": "to 'pls and C sharp how much did you enjoy that experience right exactly what",
    "start": "1285590",
    "end": "1294650"
  },
  {
    "text": "the hell does item 1 mean right you know you have no idea what any of these",
    "start": "1294650",
    "end": "1300680"
  },
  {
    "text": "things mean and it's so cumbersome to work with okay yeah so let me litter my code with tuple that create that sounds",
    "start": "1300680",
    "end": "1307130"
  },
  {
    "text": "like a good time now that's going to really really add value to my business partners right no I want to write that",
    "start": "1307130",
    "end": "1314000"
  },
  {
    "text": "and I know what's coming in c-sharp 7 but it's not as good as this because the type inference is so much",
    "start": "1314000",
    "end": "1320299"
  },
  {
    "text": "better here I get let points get 10",
    "start": "1320299",
    "end": "1325610"
  },
  {
    "text": "comma 12 the compiler knows because of",
    "start": "1325610",
    "end": "1331400"
  },
  {
    "text": "the comma if you see a comma and I sharp it's a tuple with one exception and it",
    "start": "1331400",
    "end": "1338120"
  },
  {
    "text": "knows points is float times float and that asked trick because these are what",
    "start": "1338120",
    "end": "1343850"
  },
  {
    "text": "this falls into a category of data types called algebraic data types that is",
    "start": "1343850",
    "end": "1349460"
  },
  {
    "text": "really the sum it's really the the product of the universe of floats and",
    "start": "1349460",
    "end": "1354530"
  },
  {
    "text": "the product of the universe of the universe of floats so every possible float value and every possible float",
    "start": "1354530",
    "end": "1361370"
  },
  {
    "text": "value is a valid pair in this case a tuple and we can pull data out of this",
    "start": "1361370",
    "end": "1370130"
  },
  {
    "text": "so even though we're just passing it around as 1 value we have point we can reference point anywhere we want within",
    "start": "1370130",
    "end": "1376250"
  },
  {
    "text": "the scope of this we can pass it into another function that accepts a a pair we can return a pair because it's one",
    "start": "1376250",
    "end": "1384289"
  },
  {
    "text": "data type right it's containing those two values but it's still just one data type it satisfies that exactly one input",
    "start": "1384289",
    "end": "1391520"
  },
  {
    "text": "exactly one output but we can pull data out the first thing we can look at is",
    "start": "1391520",
    "end": "1397549"
  },
  {
    "text": "just some simple easy convenience met function first and second you know",
    "start": "1397549",
    "end": "1404539"
  },
  {
    "text": "pretty easy SSTs m d thanks pretty implicit what they do it gets you the first item and it gives you the second",
    "start": "1404539",
    "end": "1410240"
  },
  {
    "text": "item you've got to be a little careful with these though because if you try to use them on a tuple that has more than",
    "start": "1410240",
    "end": "1415940"
  },
  {
    "text": "two items it's not going to work because these are constrained based on the type system to a two-member",
    "start": "1415940",
    "end": "1423080"
  },
  {
    "text": "tuple but we can also do this is our first second glance at we call pattern",
    "start": "1423080",
    "end": "1428990"
  },
  {
    "text": "matching we have a let now let X 2 comma Y to get point the compiler knows the",
    "start": "1428990",
    "end": "1438260"
  },
  {
    "text": "point is the tuple of floats and knows how many items are in there so it can",
    "start": "1438260",
    "end": "1443900"
  },
  {
    "text": "drop those into the appropriate names we have X 2 y 2",
    "start": "1443900",
    "end": "1450549"
  },
  {
    "text": "records are conceptually similar but the",
    "start": "1453200",
    "end": "1458820"
  },
  {
    "text": "compiler has to create a type to hold them for us simple example we're really",
    "start": "1458820",
    "end": "1469289"
  },
  {
    "text": "just trying to group three pieces of related data here red green and blue values pretty standard single how much",
    "start": "1469289",
    "end": "1478350"
  },
  {
    "text": "code you'd have to write to do that in c-sharp even taking advantage of things",
    "start": "1478350",
    "end": "1484740"
  },
  {
    "text": "like Auto implemented properties keeping in mind that these are also immutable by",
    "start": "1484740",
    "end": "1490080"
  },
  {
    "text": "default so by default you can't change the contents you can do what we see on",
    "start": "1490080",
    "end": "1496049"
  },
  {
    "text": "line four which is a copy and update which gives you a copy of in this case",
    "start": "1496049",
    "end": "1501840"
  },
  {
    "text": "red and now changes the G value to 255",
    "start": "1501840",
    "end": "1508760"
  },
  {
    "text": "notice the suffixes it's going to enforce the data type so I can't it's not going to do an implicit conversion",
    "start": "1508760",
    "end": "1514530"
  },
  {
    "text": "there are no implicit conversions in F sharp because that's the side effect you're changing what you think about the",
    "start": "1514530",
    "end": "1521280"
  },
  {
    "text": "environment but if you think about what you have to do to implement those",
    "start": "1521280",
    "end": "1526620"
  },
  {
    "text": "probably data data transfer objects GU right that are basically just series of",
    "start": "1526620",
    "end": "1531990"
  },
  {
    "text": "properties this is that plus a whole lot more because this is going to give a",
    "start": "1531990",
    "end": "1538380"
  },
  {
    "text": "semantic structural equality instead in addition to just having a series of",
    "start": "1538380",
    "end": "1544409"
  },
  {
    "text": "properties so you can take any two arbitrary RGB colors and it will know",
    "start": "1544409",
    "end": "1550890"
  },
  {
    "text": "it'll generate the code behind the scenes to override --get hashcode and",
    "start": "1550890",
    "end": "1556770"
  },
  {
    "text": "equals you don't have to do that you could take any two arbitrary values and",
    "start": "1556770",
    "end": "1561870"
  },
  {
    "text": "do equality comparisons and it will look at those values and it will understand whether they are representing the same",
    "start": "1561870",
    "end": "1568710"
  },
  {
    "text": "data not the same object in memory as an object reference the same data",
    "start": "1568710",
    "end": "1575929"
  },
  {
    "start": "1579000",
    "end": "1631000"
  },
  {
    "text": "but if you want to use these of the DTO one little trick you need to do we have",
    "start": "1579820",
    "end": "1585799"
  },
  {
    "text": "an attribute called CLI mutable what that does is it instructs the f-sharp",
    "start": "1585799",
    "end": "1592970"
  },
  {
    "text": "compiler to generate the appropriate code for working with serialization so",
    "start": "1592970",
    "end": "1599270"
  },
  {
    "text": "that it can actually create one of these through the default constructor and then set the values and whatever it whatever",
    "start": "1599270",
    "end": "1606200"
  },
  {
    "text": "it needs to so this does not change inside of our code whether or not the F",
    "start": "1606200",
    "end": "1613940"
  },
  {
    "text": "sharp sandbox is going to treat this as mutable it's still going to be immutable",
    "start": "1613940",
    "end": "1618950"
  },
  {
    "text": "in our code so we still even though we can serialize it back and forth across the wire we still have the benefits of",
    "start": "1618950",
    "end": "1625700"
  },
  {
    "text": "immutability within our sandbox and if",
    "start": "1625700",
    "end": "1632570"
  },
  {
    "start": "1631000",
    "end": "1758000"
  },
  {
    "text": "you want to see something a little bit more involved pattern matching against records a function get color name we're",
    "start": "1632570",
    "end": "1640340"
  },
  {
    "text": "passing in the color we're going to match color with for transferable",
    "start": "1640340",
    "end": "1649940"
  },
  {
    "text": "patterns the first one is just looking for red second is looking for green and",
    "start": "1649940",
    "end": "1655100"
  },
  {
    "text": "the third is looking for blue the fourth is just give us the hex value of whatever else comes in one of the things",
    "start": "1655100",
    "end": "1663080"
  },
  {
    "text": "that F sharp the inter compiler really forces us into though is because it",
    "start": "1663080",
    "end": "1669590"
  },
  {
    "text": "knows all of these things about the underlying types because it knows that an RGB color has just these three",
    "start": "1669590",
    "end": "1679280"
  },
  {
    "text": "properties and they are all bytes it knows whether or not you've actually",
    "start": "1679280",
    "end": "1685429"
  },
  {
    "text": "handled all of the possible cases that could come into here so we have three",
    "start": "1685429",
    "end": "1692890"
  },
  {
    "text": "record patterns to identify the three named colors and we have one general",
    "start": "1692890",
    "end": "1698690"
  },
  {
    "text": "variable pattern that's going to catch everything we just called it C and we use the string formatter",
    "start": "1698690",
    "end": "1704900"
  },
  {
    "text": "to generate that hexadecimal value from that RGB color and notice we just asked",
    "start": "1704900",
    "end": "1712429"
  },
  {
    "text": "the values the individual values exactly as we would if this was any other object",
    "start": "1712429",
    "end": "1718490"
  },
  {
    "text": "that we were working with colored our color G and color B so we still have all",
    "start": "1718490",
    "end": "1724129"
  },
  {
    "text": "of all of that benefit we have we don't have to change our mindset on how we need to work with this I've got a color",
    "start": "1724129",
    "end": "1729259"
  },
  {
    "text": "I know what I need to get out of there and I can just access it by property like I would on anything else then we",
    "start": "1729259",
    "end": "1737059"
  },
  {
    "text": "can see some piping taking red pipe to get color name and then we do a copy and",
    "start": "1737059",
    "end": "1742639"
  },
  {
    "text": "update red with G equal to 100 pass that in to get colorize again I'm emphasizing",
    "start": "1742639",
    "end": "1748669"
  },
  {
    "text": "I care about the color I don't care about the operation until after the color now the big is a cool one really",
    "start": "1748669",
    "end": "1762169"
  },
  {
    "start": "1758000",
    "end": "1994000"
  },
  {
    "text": "cool one discriminated unions are one of the things I missed the most when I'm working in c-sharp I think that's the",
    "start": "1762169",
    "end": "1768980"
  },
  {
    "text": "people I talk to this is pretty pretty universal opinion discriminated unions",
    "start": "1768980",
    "end": "1774340"
  },
  {
    "text": "restrict the values to a known set of named cases so many times when you're",
    "start": "1774340",
    "end": "1781100"
  },
  {
    "text": "working on something you know there's only ever going to be three different three different possible implementations",
    "start": "1781100",
    "end": "1787340"
  },
  {
    "text": "of some base class but somebody else could come in and extend it right you",
    "start": "1787340",
    "end": "1792379"
  },
  {
    "text": "know maybe somebody else oh hey I need this this custom writer I don't need this other writer that we provided",
    "start": "1792379",
    "end": "1797629"
  },
  {
    "text": "out-of-the-box discriminated unions can provide us with additional safety to",
    "start": "1797629",
    "end": "1803029"
  },
  {
    "text": "make sure that we are always working within the known set so here's one",
    "start": "1803029",
    "end": "1810830"
  },
  {
    "text": "possible use for discriminated unions we can treat them as simple a simple object",
    "start": "1810830",
    "end": "1816230"
  },
  {
    "text": "hierarchies so I'm working on a drawing program and I'm going to say I'm looking",
    "start": "1816230",
    "end": "1822590"
  },
  {
    "text": "to support in my my minimum viable product release circle rectangle and",
    "start": "1822590",
    "end": "1829820"
  },
  {
    "text": "triangle I haven't implemented anything else outside of there I just want to to",
    "start": "1829820",
    "end": "1836809"
  },
  {
    "text": "handle those three tools right now well now when I write code I don't need",
    "start": "1836809",
    "end": "1843169"
  },
  {
    "text": "to worry about somebody else coming in and saying I'm just going to throw in an oval because I think I can know the code",
    "start": "1843169",
    "end": "1850400"
  },
  {
    "text": "that's working and handling that rendering doesn't understand how to work with ovals yet so we can enforce that",
    "start": "1850400",
    "end": "1856220"
  },
  {
    "text": "and make sure that everything is added in the right place as we expand and make sure that the compiler can check it when",
    "start": "1856220",
    "end": "1862640"
  },
  {
    "text": "we try to do something that's not supported now just like with up with",
    "start": "1862640",
    "end": "1869990"
  },
  {
    "text": "records we also get some structural equality comparisons off of this as well so we can say all of these circle",
    "start": "1869990",
    "end": "1877370"
  },
  {
    "text": "rectangle and triangle they are all shapes you can think of in this case that's that's to help think of shape as",
    "start": "1877370",
    "end": "1884150"
  },
  {
    "text": "an interface or something or a base class and then circle is the implementation rectangle is an",
    "start": "1884150",
    "end": "1891500"
  },
  {
    "text": "implementation and triangle as a as an implementation and they all have their own Associated set of properties radius",
    "start": "1891500",
    "end": "1899120"
  },
  {
    "text": "doesn't make sense for a rectangle but it does for a circle and notice that we",
    "start": "1899120",
    "end": "1904280"
  },
  {
    "text": "can name them and they look a lot like how we had named things in the record",
    "start": "1904280",
    "end": "1909290"
  },
  {
    "text": "it's very nice simple consistent syntax but we're patterning bringing multiple",
    "start": "1909290",
    "end": "1915380"
  },
  {
    "text": "pieces of data in for some of these like the rectangle and the triangle have additional dimensions that they need to",
    "start": "1915380",
    "end": "1921260"
  },
  {
    "text": "worry about so we use the asterisk remember asterik meant to pull this is",
    "start": "1921260",
    "end": "1927080"
  },
  {
    "text": "what we call a syntactic tuple though it's not really a tuple behind the scenes but it's the way that the compiler uses the tuple syntax to",
    "start": "1927080",
    "end": "1935630"
  },
  {
    "text": "represent multiple values being associated to a particular union case and then we just create those like we",
    "start": "1935630",
    "end": "1943400"
  },
  {
    "text": "were creating an object if we were in c-sharp we would have to have new here but we're not there now the only time we",
    "start": "1943400",
    "end": "1950690"
  },
  {
    "text": "use new in f-sharp is when we're working with I disposable implementations but we",
    "start": "1950690",
    "end": "1957920"
  },
  {
    "text": "say circle we give it 3 for the radius we give rectangle 10 and 12 and so on",
    "start": "1957920",
    "end": "1964220"
  },
  {
    "text": "but notice this bottom option that Square is not highlighted by this by the",
    "start": "1964220",
    "end": "1971890"
  },
  {
    "text": "syntax highlighter here because Square is not defined on that Union and so if",
    "start": "1971890",
    "end": "1979340"
  },
  {
    "text": "we were to compile this code the compiler would catch that so you've tried to do something with a",
    "start": "1979340",
    "end": "1984740"
  },
  {
    "text": "union case that's not defined so we either need to go and reach in and remove that code or implement square",
    "start": "1984740",
    "end": "1993700"
  },
  {
    "start": "1994000",
    "end": "2222000"
  },
  {
    "text": "this is a little bit more involved example so we can also use discriminated unions as trees this is really really",
    "start": "1994510",
    "end": "2002440"
  },
  {
    "text": "convenient for abstract syntax trees and",
    "start": "2002440",
    "end": "2007600"
  },
  {
    "text": "stuff it would be real it would have been really cool if Microsoft were to use this for rosalind but they didn't",
    "start": "2007600",
    "end": "2012970"
  },
  {
    "text": "now because it's so perfectly suited for it so this is very very rudimentary here but I've got a markup tight just really",
    "start": "2012970",
    "end": "2020800"
  },
  {
    "text": "intended to represent either some HTML or some XML in this case I went with HTML and we say we're going to have",
    "start": "2020800",
    "end": "2027310"
  },
  {
    "text": "content elements we're going to have empty elements and we're going to have just content our contents element is",
    "start": "2027310",
    "end": "2034240"
  },
  {
    "text": "going to have a tag name and it's going to have a list of children which will be additional markup so so we can have",
    "start": "2034240",
    "end": "2041320"
  },
  {
    "text": "these giant trees if we want consisting of content elements empty elements and",
    "start": "2041320",
    "end": "2048908"
  },
  {
    "text": "content empty element just takes a string that's going to the tag name it's",
    "start": "2048909",
    "end": "2053980"
  },
  {
    "text": "going to be like your line breaks and then content is just going to be some basic text you can see how we can build",
    "start": "2053980",
    "end": "2060908"
  },
  {
    "text": "this up in a very composable way content elements of HTML content element ahead",
    "start": "2060909",
    "end": "2066730"
  },
  {
    "text": "and we can see the nested list there if we want to work with that we can use",
    "start": "2066730",
    "end": "2073179"
  },
  {
    "text": "pattern matching I want to convert that HTML structure that markup structure to",
    "start": "2073179",
    "end": "2078310"
  },
  {
    "text": "a string this is all the code I need yes what's rudimentary yes I haven't implemented attributes or anything like",
    "start": "2078310",
    "end": "2085570"
  },
  {
    "text": "that it wouldn't be hard to extend to do that but we have two HTML string that",
    "start": "2085570",
    "end": "2092590"
  },
  {
    "text": "rec keyword was that for any ideas let",
    "start": "2092590",
    "end": "2097840"
  },
  {
    "text": "rec to HTML string that's to notify the",
    "start": "2097840",
    "end": "2103000"
  },
  {
    "text": "F sharp compiler but this is a recursive function so recursion plays a major role",
    "start": "2103000",
    "end": "2108850"
  },
  {
    "text": "in functional programming we tend to favor recursion over iteration and the f-sharp compiler is smart enough",
    "start": "2108850",
    "end": "2117130"
  },
  {
    "text": "to do tail call recursion to do optimization so we don't blow our call stack and it makes things a lot easier",
    "start": "2117130",
    "end": "2125050"
  },
  {
    "text": "when you start writing things when you're working in a functional language and start thinking more in terms of",
    "start": "2125050",
    "end": "2130060"
  },
  {
    "text": "recursion and just calling functions over and over rather than thinking through iterations but here what we're",
    "start": "2130060",
    "end": "2136690"
  },
  {
    "text": "going to do match mark up with is our mark up a content element it is let's",
    "start": "2136690",
    "end": "2142150"
  },
  {
    "text": "pull out the tag and the children use we're going to use this class with",
    "start": "2142150",
    "end": "2149140"
  },
  {
    "text": "string writer to build up some some strengths what's really cool this is the",
    "start": "2149140",
    "end": "2154480"
  },
  {
    "text": "equivalent of the using statements in c-sharp it's going to go out of scope",
    "start": "2154480",
    "end": "2162820"
  },
  {
    "text": "and dispose at the end of that three line block so it's constrained right there the F sharp compiler will",
    "start": "2162820",
    "end": "2170080"
  },
  {
    "text": "automatically clean up after that disposable when it's done with within that block we're just going to take the",
    "start": "2170080",
    "end": "2178420"
  },
  {
    "text": "children and we're going to pipe it remember that piping is so important in F sharp we're going to pipe it to a map",
    "start": "2178420",
    "end": "2185770"
  },
  {
    "text": "function so it's going to do some transformation against every element within that list well what's it going to",
    "start": "2185770",
    "end": "2192850"
  },
  {
    "text": "do oh it's going to recursively call to HTML strings so if we have that we look",
    "start": "2192850",
    "end": "2197920"
  },
  {
    "text": "back at our previous slide content element HTML okay now let's look at all of the children in that array so the",
    "start": "2197920",
    "end": "2204070"
  },
  {
    "text": "content element head so it's going to start recursing through that entire structure looking for for whether each",
    "start": "2204070",
    "end": "2213670"
  },
  {
    "text": "element in that array is a Content element an empty element or just",
    "start": "2213670",
    "end": "2218800"
  },
  {
    "text": "straight-up content and ultimately we'll end up with some HTML if we do some HTML",
    "start": "2218800",
    "end": "2225100"
  },
  {
    "start": "2222000",
    "end": "2301000"
  },
  {
    "text": "to HTML string but that's all the code do you think about that in your own",
    "start": "2225100",
    "end": "2231160"
  },
  {
    "text": "terms like abstract syntax trees you want to handle various operations you",
    "start": "2231160",
    "end": "2236800"
  },
  {
    "text": "can define a discriminated Union that",
    "start": "2236800",
    "end": "2242230"
  },
  {
    "text": "will allow you to represent those pieces of your syntax tree and very easily write a",
    "start": "2242230",
    "end": "2249590"
  },
  {
    "text": "pattern match expression to handle converting that into the form you need whether it's something like expression",
    "start": "2249590",
    "end": "2258480"
  },
  {
    "text": "trees in out and like entity framework or something like that these things that there's so much more concise and allow a",
    "start": "2258480",
    "end": "2266670"
  },
  {
    "text": "lot more a lot more expressiveness in the way you write your code name in fact there's a piece we're not going to talk about in F sharp more than just this",
    "start": "2266670",
    "end": "2275130"
  },
  {
    "text": "passing mention but we have a technology in F sharp called quotation expressions",
    "start": "2275130",
    "end": "2281910"
  },
  {
    "text": "which rely heavily on these discriminated unions and it's exactly that it's an abstract syntax tree and it",
    "start": "2281910",
    "end": "2288570"
  },
  {
    "text": "allows you to inspect the the structure of your code and transform it into some other structure just like what we've",
    "start": "2288570",
    "end": "2295680"
  },
  {
    "text": "just seen all right the answer is on the",
    "start": "2295680",
    "end": "2305580"
  },
  {
    "text": "screen but anybody know what that is yes so this is the depending which",
    "start": "2305580",
    "end": "2313350"
  },
  {
    "text": "source you read the Mars climate orbiter and it was a very expensive piece of",
    "start": "2313350",
    "end": "2318990"
  },
  {
    "text": "equipment that got blasted off into space and everybody crossed their fingers and said hey go get us some some",
    "start": "2318990",
    "end": "2324150"
  },
  {
    "text": "data about Mars well they came up close to Mars the trajectory calculation was",
    "start": "2324150",
    "end": "2331350"
  },
  {
    "text": "off and it hit the atmosphere and promptly burned up and got no data the",
    "start": "2331350",
    "end": "2339840"
  },
  {
    "text": "trajectory calculation was off because one team used one unit of measure and",
    "start": "2339840",
    "end": "2345060"
  },
  {
    "text": "another team use another unit of measure so going back to the discussion about",
    "start": "2345060",
    "end": "2352350"
  },
  {
    "text": "should we rely on unit tests or should we rely on the compiler this is one of the things that really sold me on on",
    "start": "2352350",
    "end": "2359480"
  },
  {
    "text": "f-sharp because when I was worked when I was learning at sharp I was working on a project where I was working I was the",
    "start": "2359480",
    "end": "2368940"
  },
  {
    "text": "project was an optical character recognition we had to run these these",
    "start": "2368940",
    "end": "2374370"
  },
  {
    "text": "documents through a scanner and we had all these different templates to figure out where pieces of data were on that we had to",
    "start": "2374370",
    "end": "2381750"
  },
  {
    "text": "convert that from the physical world to the digital world and so we were dealing",
    "start": "2381750",
    "end": "2387000"
  },
  {
    "text": "with with dpi and inches and trying to manage where those little rectangular",
    "start": "2387000",
    "end": "2393720"
  },
  {
    "text": "areas were and I couldn't count the number of times that I forgot which month which function I was working with",
    "start": "2393720",
    "end": "2399869"
  },
  {
    "text": "whether I needed the DPI or whether I needed the inches so I mean yeah we can have a team coding standard that says",
    "start": "2399869",
    "end": "2408300"
  },
  {
    "text": "okay well let's just make sure that all of the parameters identify what the unit is let's let's make sure we got unit",
    "start": "2408300",
    "end": "2416220"
  },
  {
    "text": "tests behind this but F sharp gives us Dilton units of measure we can annotate",
    "start": "2416220",
    "end": "2423900"
  },
  {
    "text": "our data we could annotate typically we'll use it on floats our values with",
    "start": "2423900",
    "end": "2434510"
  },
  {
    "start": "2430000",
    "end": "2813000"
  },
  {
    "text": "these units of measure and the compiler will say you didn't give me the right",
    "start": "2434510",
    "end": "2441060"
  },
  {
    "text": "type you can't see it here we'll actually jump over to the editor and see how the compiler Flags these in a minute",
    "start": "2441060",
    "end": "2447000"
  },
  {
    "text": "but to define units of measure and these are much more involved than this in the",
    "start": "2447000",
    "end": "2453000"
  },
  {
    "text": "long run there's there's a-- you can do all sorts of of comparative equations",
    "start": "2453000",
    "end": "2459030"
  },
  {
    "text": "and do conversions between the different types they're really powerful one thing to be aware of if you do use these",
    "start": "2459030",
    "end": "2465210"
  },
  {
    "text": "though they are erased so the compiler is fully aware of them but they are an F sharp only thing if you look at the",
    "start": "2465210",
    "end": "2472260"
  },
  {
    "text": "compiled assembly these will not be there there will be no signs it's kind of like working in typescript with",
    "start": "2472260",
    "end": "2477839"
  },
  {
    "text": "interfaces you know Java scripts doesn't have the notion of an interface so it just goes away but the typescript",
    "start": "2477839",
    "end": "2482970"
  },
  {
    "text": "compiler handles it the same thing here the annotations just go away one of the",
    "start": "2482970",
    "end": "2488880"
  },
  {
    "text": "reasons I like this though is notice when we define the measure types we get type F and C for our Fahrenheit to",
    "start": "2488880",
    "end": "2496109"
  },
  {
    "text": "Celsius conversions but notice how it looks like a generic type parameter on",
    "start": "2496109",
    "end": "2501780"
  },
  {
    "text": "the values I like that it's a consistent way I just know oh oh yeah I'm going to modify this value somehow",
    "start": "2501780",
    "end": "2509000"
  },
  {
    "text": "but now my Fahrenheit to Celsius that's the same function as before except now I'm accepting a float of F and on the",
    "start": "2509000",
    "end": "2518510"
  },
  {
    "text": "Celsius to Fahrenheit a float of C so when I'm calling these functions down",
    "start": "2518510",
    "end": "2524210"
  },
  {
    "text": "below I have to give it the appropriate",
    "start": "2524210",
    "end": "2529480"
  },
  {
    "text": "unit of measure so only the first line of these two three line sets actually",
    "start": "2529480",
    "end": "2536960"
  },
  {
    "text": "work and I'll jump over to the editor in just a moment but you'll see so for Fahrenheit to Celsius I'm starting off",
    "start": "2536960",
    "end": "2543500"
  },
  {
    "text": "with 212 degrees Fahrenheit boiling right if I try to pass in 212 degrees",
    "start": "2543500",
    "end": "2549530"
  },
  {
    "text": "Celsius which is a very different temperature the compiler won't let me",
    "start": "2549530",
    "end": "2555200"
  },
  {
    "text": "and if I try to pass over a value that doesn't have a unit of measure the compiler won't let me do that either but",
    "start": "2555200",
    "end": "2562610"
  },
  {
    "text": "what else is interesting here is anybody notices we've looked at these functions that there haven't been return types",
    "start": "2562610",
    "end": "2567740"
  },
  {
    "text": "identified in most places I've annotated most of the places where I've had",
    "start": "2567740",
    "end": "2574070"
  },
  {
    "text": "parameters coming in but I haven't annotated what is coming out because the f-sharp compiler infers what the output",
    "start": "2574070",
    "end": "2583760"
  },
  {
    "text": "type is it also has an implicit return because everything one input one output it's evaluated top down the last thing",
    "start": "2583760",
    "end": "2591800"
  },
  {
    "text": "is evaluated must be the return so we don't even have to tell it to return in most cases so what I'm getting out of",
    "start": "2591800",
    "end": "2601220"
  },
  {
    "text": "here though if I look at Fahrenheit to Celsius I'm accepting a float of",
    "start": "2601220",
    "end": "2606590"
  },
  {
    "text": "Fahrenheit but the result of that is a float in Celsius and we can even see the",
    "start": "2606590",
    "end": "2612740"
  },
  {
    "text": "conversion happen there so then if I get this in a pipeline that I'm working with",
    "start": "2612740",
    "end": "2617840"
  },
  {
    "text": "Fahrenheit and now I need to start working in Celsius the compiler will enforce that everything from that point",
    "start": "2617840",
    "end": "2623210"
  },
  {
    "text": "on the Celsius so I can't just pass the",
    "start": "2623210",
    "end": "2628580"
  },
  {
    "text": "Fahrenheit values into those Celsius methods let me jump over to visual",
    "start": "2628580",
    "end": "2634970"
  },
  {
    "text": "studio code I also wanted to kind of point out that",
    "start": "2634970",
    "end": "2640539"
  },
  {
    "text": "I'm running this all on a Mac one of the big things that people say is well it's",
    "start": "2640780",
    "end": "2646480"
  },
  {
    "text": "so tied to Visual Studio and I've got to be on Windows well I'm running this in vs code on my Mac my virtual machine is",
    "start": "2646480",
    "end": "2655510"
  },
  {
    "text": "not running so let's go find that first one there we go a couple of things so",
    "start": "2655510",
    "end": "2671110"
  },
  {
    "text": "here's that same code and notice what I'm trying to pass the Celsius or the uh",
    "start": "2671110",
    "end": "2676600"
  },
  {
    "text": "Nana Tate adverse the compiler is stopping me that beats the unit test",
    "start": "2676600",
    "end": "2681730"
  },
  {
    "text": "every time in my book because now I don't have to maintain that and I know that the code that the data that I'm",
    "start": "2681730",
    "end": "2690970"
  },
  {
    "text": "passing into that function everywhere I don't have to write multiple tests across the application for every place",
    "start": "2690970",
    "end": "2697630"
  },
  {
    "text": "this was called I just have to write the right annotation make sure I'm getting",
    "start": "2697630",
    "end": "2703210"
  },
  {
    "text": "the appropriate value I think that's a",
    "start": "2703210",
    "end": "2709120"
  },
  {
    "text": "really cool feature that's one of my favorites the error message is actually",
    "start": "2709120",
    "end": "2715440"
  },
  {
    "text": "type mismatch so expecting a float of C",
    "start": "2715440",
    "end": "2720810"
  },
  {
    "text": "goes to objects but given a float of s goes to float of C so it's confused on",
    "start": "2720810",
    "end": "2727120"
  },
  {
    "text": "what unit of measure T that it should be using yeah one thing that is kind of",
    "start": "2727120",
    "end": "2737080"
  },
  {
    "text": "before we move on when you're using units of measure so we're doing this conversion when you're working with these you're going to have your",
    "start": "2737080",
    "end": "2742930"
  },
  {
    "text": "signature says okay I'm getting the stick with Fahrenheit to Celsius our signature says we are going to accept a",
    "start": "2742930",
    "end": "2750220"
  },
  {
    "text": "float of Fahrenheit we're going to be returning a float of Celsius but because",
    "start": "2750220",
    "end": "2756340"
  },
  {
    "text": "those are not compatible there are no direct conversions between those and remember that F sharp doesn't do",
    "start": "2756340",
    "end": "2761530"
  },
  {
    "text": "implicit conversions we need to strip those units off and then when we're done we need to pop those units back on so",
    "start": "2761530",
    "end": "2769330"
  },
  {
    "text": "the first bit line 328 float of T that's doing that steps",
    "start": "2769330",
    "end": "2774850"
  },
  {
    "text": "Sharp's version of a cast so we're taking if this is how we strip the units off so tea that came in our temperature",
    "start": "2774850",
    "end": "2782010"
  },
  {
    "text": "was annotated as Fahrenheit we want to pull that value off the treat it as a regular float and then when we're done",
    "start": "2782010",
    "end": "2790060"
  },
  {
    "text": "doing our calculations we multiply it by one point zero C and that's going to do",
    "start": "2790060",
    "end": "2796690"
  },
  {
    "text": "our conversion back to a to centigrade and we can do the conversion we could do the multiplication against the float now",
    "start": "2796690",
    "end": "2804880"
  },
  {
    "text": "and have the attack on the unit of measure right how are we doing on the",
    "start": "2804880",
    "end": "2819760"
  },
  {
    "start": "2813000",
    "end": "3199000"
  },
  {
    "text": "home just okay cool right in front we've",
    "start": "2819760",
    "end": "2824890"
  },
  {
    "text": "looked at pattern matching quite a bit and this is one of those things you know",
    "start": "2824890",
    "end": "2831670"
  },
  {
    "text": "I know that but pattern matching is coming in c-sharp seven no it's not when",
    "start": "2831670",
    "end": "2836680"
  },
  {
    "text": "you've worked with this no it's not it really isn't and and then every time you",
    "start": "2836680",
    "end": "2842020"
  },
  {
    "text": "set you get excited like oh so bring it in pattern matching and you see the list of things they're going to support and",
    "start": "2842020",
    "end": "2847540"
  },
  {
    "text": "then they cut 90% of them no they're not oh this is one of the things that will",
    "start": "2847540",
    "end": "2853300"
  },
  {
    "text": "probably die I will be amazed if we ever see it in c-sharp so this is active pattern and when we can do pattern",
    "start": "2853300",
    "end": "2862150"
  },
  {
    "text": "matching against variables we can do it against constants we can do it against records you can do it gets discriminated",
    "start": "2862150",
    "end": "2868030"
  },
  {
    "text": "unions we can do it against arrays and sequences and so on and so forth those",
    "start": "2868030",
    "end": "2873220"
  },
  {
    "text": "are all the built-in patterns but what is one of those really match what we",
    "start": "2873220",
    "end": "2878590"
  },
  {
    "text": "want what if we want custom logic around how we match data active patterns are",
    "start": "2878590",
    "end": "2885160"
  },
  {
    "text": "the answer to that so everybody knows fizzbuzz I'm sure well this is probably",
    "start": "2885160",
    "end": "2891940"
  },
  {
    "text": "a completely overkill solution for fizzbuzz but look I've constrained",
    "start": "2891940",
    "end": "2897790"
  },
  {
    "text": "myself into the four values that this is buzz requirements are supposed to allow",
    "start": "2897790",
    "end": "2904570"
  },
  {
    "text": "it is very explicit what my values are supposed to be fiz buzz fizzbuzz and in this case other",
    "start": "2904570",
    "end": "2911710"
  },
  {
    "text": "because what are the requirements fizzbuzz for multiples of three and five",
    "start": "2911710",
    "end": "2916800"
  },
  {
    "text": "fizz for multiples of three buzz for multiples of five and the number for",
    "start": "2916800",
    "end": "2923859"
  },
  {
    "text": "everything else right well how's that like fizzbuzz fizzbuzz other match we're",
    "start": "2923859",
    "end": "2933010"
  },
  {
    "text": "going to build a tuple right in our match expression we're going to match n modulo 3 and n modules modulo 5 we're",
    "start": "2933010",
    "end": "2941650"
  },
  {
    "text": "going to do a little bit of tuple matching if both are 0 both are evenly",
    "start": "2941650",
    "end": "2947410"
  },
  {
    "text": "divisible well then it's fizzbuzz if only if it's only divisible by 3 we",
    "start": "2947410",
    "end": "2954640"
  },
  {
    "text": "don't care what the result that's what the underscore is that's our wildcard pattern we don't care what that is we're not using it for anything",
    "start": "2954640",
    "end": "2960819"
  },
  {
    "text": "it's got to be buzz the reciprocal for buzz and then for everything else we're",
    "start": "2960819",
    "end": "2967480"
  },
  {
    "text": "not even going into we don't even care whether it's a tuple now the compiler will enforce that it's a tuple but we",
    "start": "2967480",
    "end": "2973569"
  },
  {
    "text": "don't even care that it's a tuple in the last one so we just use the wild card or give everything and return other and",
    "start": "2973569",
    "end": "2979890"
  },
  {
    "text": "attach that value then our fizzbuzz we",
    "start": "2979890",
    "end": "2985390"
  },
  {
    "text": "have our shorthand for pattern matching so there's actually an implicit argument here you can see on the intellisense val",
    "start": "2985390",
    "end": "2992920"
  },
  {
    "text": "fizzbuzz arg1 so the compiler has given us a parameter we don't even have to do",
    "start": "2992920",
    "end": "2998890"
  },
  {
    "text": "that with this to tell it explicitly in the syntax some people like this way some people don't help I tended to go",
    "start": "2998890",
    "end": "3006359"
  },
  {
    "text": "this way when I'm when I'm writing this I know a lot of people do like to be explicit but I know what function does",
    "start": "3006359",
    "end": "3011750"
  },
  {
    "text": "so now all of these Union cases what what looks like Union cases are our",
    "start": "3011750",
    "end": "3018329"
  },
  {
    "text": "active patterns they all correspond backups is Buzz fizzbuzz and other these",
    "start": "3018329",
    "end": "3027839"
  },
  {
    "text": "are awesome I love these but for reasons unknown to",
    "start": "3027839",
    "end": "3034230"
  },
  {
    "text": "me and maybe somebody in the room knows I've never been able to find an answer they're constrained to seven",
    "start": "3034230",
    "end": "3041410"
  },
  {
    "text": "cases I don't know why Dean O'Brian yeah",
    "start": "3041410",
    "end": "3047170"
  },
  {
    "text": "I've never been able to find an answer to so there's for some arbitrary reason and Don probably had a very good reason",
    "start": "3047170",
    "end": "3052660"
  },
  {
    "text": "when he designed the language up they're constrained to seven so if you have more cases than that you need to rely on what",
    "start": "3052660",
    "end": "3062110"
  },
  {
    "text": "we call partial active patterns and these are basically the same thing",
    "start": "3062110",
    "end": "3069210"
  },
  {
    "text": "except we have a special type of function now called a except I can't",
    "start": "3069210",
    "end": "3074950"
  },
  {
    "text": "remember I just drew a blank on website out but these are new functions defined",
    "start": "3074950",
    "end": "3081790"
  },
  {
    "text": "and the syntax on them is a little unusual we're going to say match this",
    "start": "3081790",
    "end": "3088180"
  },
  {
    "text": "pattern that's that's a pattern right there fizz or anything else what this is",
    "start": "3088180",
    "end": "3095740"
  },
  {
    "text": "converting to is we see some fizz else none f-sharp has a built-in",
    "start": "3095740",
    "end": "3104460"
  },
  {
    "text": "discriminated union called option this is our way around null there was a tweet",
    "start": "3104460",
    "end": "3112660"
  },
  {
    "text": "a number of years ago basically when I was writing the book one of the people very prominent in the community",
    "start": "3112660",
    "end": "3118500"
  },
  {
    "text": "responded to a tweet about what can be sharp do that F sharp can't and the",
    "start": "3118500",
    "end": "3125050"
  },
  {
    "text": "answer was null reference exception oh I still love that I have it I actually",
    "start": "3125050",
    "end": "3130060"
  },
  {
    "text": "have an image save somewhere it's pretty funny out so the way we get around nose",
    "start": "3130060",
    "end": "3135790"
  },
  {
    "text": "is we which it's an opt-in mentality we have either some value or none and none",
    "start": "3135790",
    "end": "3141550"
  },
  {
    "text": "you can think of kind of like null but it's much safer and here if n is",
    "start": "3141550",
    "end": "3148570"
  },
  {
    "text": "divisible by three we're going to return fizz otherwise we're going to return buzz so we don't need a third case for",
    "start": "3148570",
    "end": "3157600"
  },
  {
    "text": "fizzbuzz because it's going to be covered by by default just by virtue of having those two already when we get",
    "start": "3157600",
    "end": "3164320"
  },
  {
    "text": "into our pattern match down line five through nine if is and Buzz return says",
    "start": "3164320",
    "end": "3170830"
  },
  {
    "text": "Buzz is just fizz right Rand says so then we're",
    "start": "3170830",
    "end": "3176130"
  },
  {
    "text": "even more explicit when we compare that back to you to here we were returning",
    "start": "3176130",
    "end": "3181530"
  },
  {
    "text": "those values as part of that full active pattern but now we're being a little bit",
    "start": "3181530",
    "end": "3188610"
  },
  {
    "text": "more picky because we're just saying now we're going to look at fizz and Buzz and this allows us to get past that 7 case",
    "start": "3188610",
    "end": "3195450"
  },
  {
    "text": "limit all right yeah I get time ok",
    "start": "3195450",
    "end": "3204270"
  },
  {
    "start": "3199000",
    "end": "3283000"
  },
  {
    "text": "awesome how many people have heard of type 2 providers on a sharp okay",
    "start": "3204270",
    "end": "3213050"
  },
  {
    "text": "aside from currying this is probably the other and this is probably the other",
    "start": "3213050",
    "end": "3219270"
  },
  {
    "text": "biggest thing that really sets F sharp apart from other languages so we've got",
    "start": "3219270",
    "end": "3227160"
  },
  {
    "text": "a fairly basic description here but compel type providers are components that provide types and functionality",
    "start": "3227160",
    "end": "3233730"
  },
  {
    "text": "based on some typically external source things like databases Excel out other",
    "start": "3233730",
    "end": "3240240"
  },
  {
    "text": "languages there's a type provider that allows you to connect into R so if you're doing any type of statistical",
    "start": "3240240",
    "end": "3245580"
  },
  {
    "text": "analysis you can go in and and use the power of f-sharp in conjunction with the power of our it's really really sweet",
    "start": "3245580",
    "end": "3251840"
  },
  {
    "text": "XML documents and the one I love the demo and the reason I like to demo it is because it doesn't require an internet",
    "start": "3251840",
    "end": "3257730"
  },
  {
    "text": "connection and it doesn't require a database L is for regular expressions how many people",
    "start": "3257730",
    "end": "3263940"
  },
  {
    "text": "like writing regular expressions exactly so I actually don't mind it now but the",
    "start": "3263940",
    "end": "3272790"
  },
  {
    "text": "way that I make myself not mind it is I like to make sure that all my captures have nice names on them",
    "start": "3272790",
    "end": "3278930"
  },
  {
    "text": "now let's jump over to vs code again and",
    "start": "3278930",
    "end": "3286800"
  },
  {
    "text": "scroll through those examples and right",
    "start": "3286800",
    "end": "3292859"
  },
  {
    "text": "here we go other window so this one I",
    "start": "3292859",
    "end": "3302979"
  },
  {
    "text": "just brought in we have a package manager in F sharp that's called packet out it's pretty nice manages your",
    "start": "3302979",
    "end": "3310629"
  },
  {
    "text": "dependencies a little bit better than nougat but still plugs into nougat so so it's pretty nice but I brought in this",
    "start": "3310629",
    "end": "3317289"
  },
  {
    "text": "package called f-sharp that text dot reg X provider this is something that if you",
    "start": "3317289",
    "end": "3323649"
  },
  {
    "text": "do use the book I have this example in there but the light the code is moved from one library to another to another",
    "start": "3323649",
    "end": "3329429"
  },
  {
    "text": "the book hasn't been updated to reflect that but it's really a pretty powerful",
    "start": "3329429",
    "end": "3335789"
  },
  {
    "text": "type provider it was it was my understanding as it was originally developed kind of as a proof-of-concept",
    "start": "3335789",
    "end": "3340989"
  },
  {
    "text": "to see if it could actually work and just show him the flexibility of how",
    "start": "3340989",
    "end": "3347609"
  },
  {
    "text": "beneficial types providers can be to your code I like it because I do like",
    "start": "3347609",
    "end": "3352719"
  },
  {
    "text": "regular expressions for the most part but you can see I've got this regular expression here color reg X now that",
    "start": "3352719",
    "end": "3359979"
  },
  {
    "text": "doesn't look like how we normally define a reg X does it usually it's like new reg X this is a type like okay that's a",
    "start": "3359979",
    "end": "3367539"
  },
  {
    "text": "little weird I've got a type that's based on a regular expression and I like that it's got a generic syntax one thing",
    "start": "3367539",
    "end": "3375369"
  },
  {
    "text": "to be very aware of here notice that space on line 232 I just",
    "start": "3375369",
    "end": "3382029"
  },
  {
    "text": "highlighted it I'm sorry it's probably hard to see in the back but the space here because of the generic like syntax",
    "start": "3382029",
    "end": "3388929"
  },
  {
    "text": "is very very important because if we get rid of that notice it's highlighted this",
    "start": "3388929",
    "end": "3397029"
  },
  {
    "text": "was just one of the quirks of the language it's trying to treat this the string literal as a quotation expression",
    "start": "3397029",
    "end": "3404759"
  },
  {
    "text": "so getting rid of that that that white",
    "start": "3404759",
    "end": "3411009"
  },
  {
    "text": "they are making that whitespace in there will get trick the compiler into doing what you actually want it to do instead",
    "start": "3411009",
    "end": "3416139"
  },
  {
    "text": "of making it do what it thinks you're trying to do but we've defined the type",
    "start": "3416139",
    "end": "3421329"
  },
  {
    "text": "for our regular expression and what this is doing is",
    "start": "3421329",
    "end": "3426650"
  },
  {
    "text": "behind-the-scenes its parsing that expression so it knows some things about",
    "start": "3426650",
    "end": "3432720"
  },
  {
    "text": "the structure of it and it's going to it's going to do some some interesting things behind the scenes now you work",
    "start": "3432720",
    "end": "3438690"
  },
  {
    "text": "with named captures typically you've got to pull them out of the group's collection right",
    "start": "3438690",
    "end": "3444720"
  },
  {
    "text": "it's a dictionary of group of names well that kind of sucks right like you fat",
    "start": "3444720",
    "end": "3454050"
  },
  {
    "text": "thing or something you know who's to say you know I've named it red here and I say are in the hard-coded string to pull",
    "start": "3454050",
    "end": "3461760"
  },
  {
    "text": "out the value you know what if I decide okay you know what I can't read this I",
    "start": "3461760",
    "end": "3467880"
  },
  {
    "text": "can't read this thing in or what just happened happened then you insert some text and and you know you know who's to",
    "start": "3467880",
    "end": "3474900"
  },
  {
    "text": "say that this change that I just made changing red to R is actually going to",
    "start": "3474900",
    "end": "3480030"
  },
  {
    "text": "get propagated through all of those the strings what the type provider is going to do and if you're watching the the",
    "start": "3480030",
    "end": "3489510"
  },
  {
    "text": "bottom of the screen you probably already saw this but I'm going to send some code down we have F sharp",
    "start": "3489510",
    "end": "3496290"
  },
  {
    "text": "interactive and I'm going to bring in a few namespaces and the library I'm going",
    "start": "3496290",
    "end": "3504510"
  },
  {
    "text": "to define that so I'm just executing it you can see it running at the bottom I'm",
    "start": "3504510",
    "end": "3510330"
  },
  {
    "text": "going to create a function let's either you're going to return some or none and",
    "start": "3510330",
    "end": "3517070"
  },
  {
    "text": "that's got to bring in system so I get",
    "start": "3517070",
    "end": "3523950"
  },
  {
    "text": "for doing this one at the last minute there we go",
    "start": "3523950",
    "end": "3528680"
  },
  {
    "text": "so now if I go here and run this last line of code of course mono is breaking",
    "start": "3530570",
    "end": "3538940"
  },
  {
    "text": "step what did I break oh because I didn't bring it up head yep I didn't get",
    "start": "3538940",
    "end": "3544850"
  },
  {
    "text": "this one quite working up I was going to convert it over to the system that drawing and I didn't bring that in I've",
    "start": "3544850",
    "end": "3550790"
  },
  {
    "text": "got a bad image format so it's trying to do like the 32 bit or 64 but we can",
    "start": "3550790",
    "end": "3557090"
  },
  {
    "text": "still look at the code so let me get rid of this then we'll still see the overall behavior we expect so we get this pipe",
    "start": "3557090",
    "end": "3565540"
  },
  {
    "text": "red green and blue are our captures and we can say in here if m dot success have",
    "start": "3565540",
    "end": "3572870"
  },
  {
    "text": "we matched we're going to take our color we're going to pass it over to a new instance of that color reg X type and",
    "start": "3572870",
    "end": "3579530"
  },
  {
    "text": "we're going to invoke the typed match method on that color reg X type so this",
    "start": "3579530",
    "end": "3586850"
  },
  {
    "text": "reg X type provider has generated this type for us behind the scenes and it",
    "start": "3586850",
    "end": "3592250"
  },
  {
    "text": "largely resembles the built in regular expression classes but instead of having",
    "start": "3592250",
    "end": "3598520"
  },
  {
    "text": "to have things like m dot captures or ends at groups I'm sorry notice we have",
    "start": "3598520",
    "end": "3605600"
  },
  {
    "text": "property names here instead it's matched that red match that green match that blue and if I come back up here and I",
    "start": "3605600",
    "end": "3614240"
  },
  {
    "text": "change that from red to R I have red",
    "start": "3614240",
    "end": "3620000"
  },
  {
    "text": "squiggly the compiler has found that that regular expression has changed and it will stop me from compiling and",
    "start": "3620000",
    "end": "3626300"
  },
  {
    "text": "deploying code that is known to not work because the regular expression no longer matches what the code was expecting it",
    "start": "3626300",
    "end": "3632540"
  },
  {
    "text": "to do that's powerful that's why we rely on the type system now now if I didn't",
    "start": "3632540",
    "end": "3640640"
  },
  {
    "text": "have a unit test there I caught it immediately without having to do any extra work because the type provider has",
    "start": "3640640",
    "end": "3648290"
  },
  {
    "text": "already done that now types providers do come in two flavors there's generative and erase so just",
    "start": "3648290",
    "end": "3655730"
  },
  {
    "text": "like the units of measure can be erased the the types that the tie providers can",
    "start": "3655730",
    "end": "3662810"
  },
  {
    "text": "generate can also be arrays and basically everything just gets treated as object behind the scenes and then there's some that will actually",
    "start": "3662810",
    "end": "3668780"
  },
  {
    "text": "generate types that remain and our part of the compiled assembly I do have if",
    "start": "3668780",
    "end": "3673790"
  },
  {
    "text": "you really want to see how this mechanism works because it's really cool I mean it's running as part of the compiler itself I've got a Pluralsight",
    "start": "3673790",
    "end": "3680240"
  },
  {
    "text": "course on building types of providers the course is specific to erased",
    "start": "3680240",
    "end": "3686780"
  },
  {
    "text": "providers but I also have a blog post linked from there that talks about how to do a generative provider so very cool",
    "start": "3686780",
    "end": "3693740"
  },
  {
    "text": "stuff there's lots of there's lots of different type providers out there but",
    "start": "3693740",
    "end": "3699380"
  },
  {
    "text": "you know I hope you've gotten something out of this this was I love that sharp I think there's there's lots of things",
    "start": "3699380",
    "end": "3705200"
  },
  {
    "text": "that again they'll Brian too said in the previous talk that this is one of those things that Microsoft really has going",
    "start": "3705200",
    "end": "3710570"
  },
  {
    "text": "for it and they don't seem to be aware of just how powerful the tool they've created so thank you very much for your",
    "start": "3710570",
    "end": "3716780"
  },
  {
    "text": "time and enjoy NDC Zion who gets the",
    "start": "3716780",
    "end": "3722930"
  },
  {
    "text": "book",
    "start": "3722930",
    "end": "3725079"
  }
]