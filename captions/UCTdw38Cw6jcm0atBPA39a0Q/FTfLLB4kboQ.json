[
  {
    "start": "0",
    "end": "88000"
  },
  {
    "text": "we have a German living in Switzerland sitting on the first row so let's start on time hello everyone and welcome my",
    "start": "4540",
    "end": "14049"
  },
  {
    "text": "name is Amish and you some of you might know my cp+ Chris site CPP Chris dog or",
    "start": "14049",
    "end": "20589"
  },
  {
    "text": "my blog sit with us on a Friday I'm also on Twitter as Naughton and today I'm",
    "start": "20589",
    "end": "26080"
  },
  {
    "text": "going to talk about know and specifically how and why to get rid of no and the reason I want to do that is I",
    "start": "26080",
    "end": "33460"
  },
  {
    "text": "recently worked in a large ich C shop code base where we just by convention",
    "start": "33460",
    "end": "38710"
  },
  {
    "text": "had banned now entirely from the code base and that was really nice really pleasant experience and then I had one",
    "start": "38710",
    "end": "46719"
  },
  {
    "text": "data point of something being subjectively good and then this is software development so then it's time",
    "start": "46719",
    "end": "52750"
  },
  {
    "text": "to start evangelizing and making talks and convincing everyone to do the same",
    "start": "52750",
    "end": "58019"
  },
  {
    "text": "in C shop there are no general good solution for non nullable types and in",
    "start": "58019",
    "end": "64809"
  },
  {
    "text": "c+ we of course have those so that gives us certain advantages if we are trying",
    "start": "64809",
    "end": "70240"
  },
  {
    "text": "to do the same in C++ yeah I noticed a few C+ experts arriving so this there's",
    "start": "70240",
    "end": "78160"
  },
  {
    "text": "nothing very fancy or anything going on in this talk so if you want to have a nap or something I'll wake you up after",
    "start": "78160",
    "end": "85090"
  },
  {
    "text": "after the talk the outline of the talk is going to be first why are we using",
    "start": "85090",
    "end": "90730"
  },
  {
    "start": "88000",
    "end": "88000"
  },
  {
    "text": "now today and why I know is bad and what",
    "start": "90730",
    "end": "95770"
  },
  {
    "text": "can be done about it so pretty classic setup I would say before we start let's",
    "start": "95770",
    "end": "103840"
  },
  {
    "text": "hear what the inventor of now has to say about now unfortunately they didn't give me any audio out so the text is up there",
    "start": "103840",
    "end": "110920"
  },
  {
    "text": "and if you listen carefully you might be able to hear what he's saying that led me to suggest a null pointer",
    "start": "110920",
    "end": "119260"
  },
  {
    "text": "was a possible value of every reference variable and the possible mistake on",
    "start": "119260",
    "end": "125160"
  },
  {
    "text": "every rep every use of that reference variable perhaps it was a billion dollar",
    "start": "125160",
    "end": "135010"
  },
  {
    "text": "mistake all right so that's Tony Hoare he invented No yeah so Tony Hoare isn't",
    "start": "135010",
    "end": "147310"
  },
  {
    "text": "just some random dude he invented quicksort he invented the logic he",
    "start": "147310",
    "end": "153010"
  },
  {
    "text": "got both the Turing award and the phenomen medal and he was knighted so he's a pretty clever guy but she did",
    "start": "153010",
    "end": "160450"
  },
  {
    "text": "invent no back in the 60s while working on Algol W I'll go in some sort being a",
    "start": "160450",
    "end": "167079"
  },
  {
    "text": "predecessor to the purpose in some way and he had a very good reason for doing so which we will get back to and the",
    "start": "167079",
    "end": "174790"
  },
  {
    "text": "billion dollars is of course his personal guesstimate he seems fairly certain it's on that",
    "start": "174790",
    "end": "181269"
  },
  {
    "text": "order of magnitude but I think we can all agree that from the 60s up until now",
    "start": "181269",
    "end": "186760"
  },
  {
    "text": "no bugs have probably cost society quite a lot of money with all the crashes and",
    "start": "186760",
    "end": "192639"
  },
  {
    "text": "everything so given that both Tony Hoare and myself are quite hostile towards no",
    "start": "192639",
    "end": "199389"
  },
  {
    "text": "I thought we should start with some reasons why no is good so do you have any favorite things about know what's",
    "start": "199389",
    "end": "206139"
  },
  {
    "text": "what's good about not okay yeah yeah",
    "start": "206139",
    "end": "216370"
  },
  {
    "text": "including the program yeah yeah okay",
    "start": "216370",
    "end": "228340"
  },
  {
    "text": "I'll cover some of my my reasons why I know might be I might be good so we have",
    "start": "228340",
    "end": "233769"
  },
  {
    "text": "a function which might not succeed it's a called get thing H we will try to get you a thing it doesn't always find a",
    "start": "233769",
    "end": "239739"
  },
  {
    "text": "thing for you so as a part of normal operation of the program sometimes you find a thing sometimes you don't it's",
    "start": "239739",
    "end": "246159"
  },
  {
    "text": "not an exceptional case so we don't use exceptions so the typical old-school way of doing",
    "start": "246159",
    "end": "251680"
  },
  {
    "text": "this is you return a pointer because then you can just return a null pointer if you didn't find anything and I will",
    "start": "251680",
    "end": "257079"
  },
  {
    "text": "be using row pointers all over this talk all the points apply for smart pointers",
    "start": "257079",
    "end": "262630"
  },
  {
    "text": "as well but with row pointers everything fits on a slide and I don't get into discussions about should use this most poor smart pointer",
    "start": "262630",
    "end": "268780"
  },
  {
    "text": "instead of that one yes this is the normal good all the way of doing it",
    "start": "268780",
    "end": "274389"
  },
  {
    "text": "you call get thing and then you check did you get something or did you get a null pointer so only proceed if you",
    "start": "274389",
    "end": "281590"
  },
  {
    "text": "actually got something the other way around it's a way to also provide an",
    "start": "281590",
    "end": "287290"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "optional parameter so say you have a do work function it takes a work item to work on and then you can pass it a",
    "start": "287290",
    "end": "293320"
  },
  {
    "text": "logger if you want logging so the way you indicated here is you pass a null pointer if you don't want logging and if",
    "start": "293320",
    "end": "299740"
  },
  {
    "text": "you want logging you do a studio on the second line here you call it with an instance of the vulgar interface or",
    "start": "299740",
    "end": "305710"
  },
  {
    "text": "abstract base class so it's a it's one way of doing optional parameters it can",
    "start": "305710",
    "end": "314169"
  },
  {
    "start": "312000",
    "end": "312000"
  },
  {
    "text": "also be useful for late initialization of members or variables in general if you can't initialize the variable when",
    "start": "314169",
    "end": "320320"
  },
  {
    "text": "you declare it and you want to still initialize it but you don't have a value yet you only default value for a pointer",
    "start": "320320",
    "end": "327729"
  },
  {
    "text": "ease of course then no so in our little business logic here we're modeling nuclear physics we have an atom which",
    "start": "327729",
    "end": "334300"
  },
  {
    "text": "points to its nucleus and you have the nucleus which points to the atom and to",
    "start": "334300",
    "end": "340690"
  },
  {
    "text": "be able to initialize the atom you need to have a nucleus to point to and to be able to initialize a new close you need to point to the atom right so how do you",
    "start": "340690",
    "end": "348389"
  },
  {
    "text": "initialize both of these drugs in the constructor you can't really not fool",
    "start": "348389",
    "end": "355030"
  },
  {
    "text": "this so what you do of course is to initialize the atom with a null pointer for the nucleus then you create a new",
    "start": "355030",
    "end": "360250"
  },
  {
    "text": "Clues pointing to the atom and then you revisit the atamans at the nucleus pointer so we get a two-stage initialization but you need a null",
    "start": "360250",
    "end": "367180"
  },
  {
    "text": "pointer until you have everything ready and this type of cyclic references is what motivated Tony how to invent know",
    "start": "367180",
    "end": "375930"
  },
  {
    "text": "when indeed so now can be good for",
    "start": "375930",
    "end": "382000"
  },
  {
    "text": "functions which might not succeed as we saw with the gating function sometimes it doesn't get your thing optional",
    "start": "382000",
    "end": "388389"
  },
  {
    "text": "parameter where you can just pass a null pointer if you don't have a value or fellate initialization of variables",
    "start": "388389",
    "end": "396250"
  },
  {
    "text": "so no it's good for indicating a missing value so we've seen some good use cases",
    "start": "396250",
    "end": "405070"
  },
  {
    "text": "from now that's are typically found so what why is now bad why don't I like No",
    "start": "405070",
    "end": "413699"
  },
  {
    "text": "yeah dereferencing a null pointer is undefined behavior so if you if you have",
    "start": "413940",
    "end": "419110"
  },
  {
    "start": "414000",
    "end": "414000"
  },
  {
    "text": "a gifting function return to thing we saw earlier if it's no and you try to call something on it or you could try to",
    "start": "419110",
    "end": "425770"
  },
  {
    "text": "take a value or you dereference it in some other way that's undefined behavior and someone said seg fault that's what",
    "start": "425770",
    "end": "432100"
  },
  {
    "text": "you typically get on the system's I usually work on I talk to Alfred this",
    "start": "432100",
    "end": "437110"
  },
  {
    "text": "morning and he reminded me that some of you probably don't even get a segfault now some of you can actually just use",
    "start": "437110",
    "end": "443590"
  },
  {
    "text": "the null pointer and that's just some part of memory that you can actually use yeah yeah but if you used to address",
    "start": "443590",
    "end": "454450"
  },
  {
    "text": "know some of you are probably many of you are embedded developers maybe don't have an OS that will actually give you",
    "start": "454450",
    "end": "460210"
  },
  {
    "text": "even a EBS egg fault so even even though it wasn't undefined behavior maybe you got a new pointer exception or something",
    "start": "460210",
    "end": "467050"
  },
  {
    "text": "it will still be a bug because it this doesn't make any sense right so you then",
    "start": "467050",
    "end": "475150"
  },
  {
    "text": "end up checking for no this is exactly like we saw on the first slide we try to",
    "start": "475150",
    "end": "480220"
  },
  {
    "text": "get the thing did we get anything or is it a null pointer if you got something we will do something and this is fine",
    "start": "480220",
    "end": "486190"
  },
  {
    "text": "this is intention this is the intention of how this function is designed you are supposed to check because it doesn't",
    "start": "486190",
    "end": "492130"
  },
  {
    "text": "always give you a value but when you start checking pointers then since any point you can be know that every point",
    "start": "492130",
    "end": "498610"
  },
  {
    "text": "you can then also how do you know which ones to check so you get the thing check if you got the thing you do something",
    "start": "498610",
    "end": "504190"
  },
  {
    "text": "with the thing the thing has a device that you also want to do something with but this is a pointer so you need to",
    "start": "504190",
    "end": "510220"
  },
  {
    "text": "check that as well and suddenly you can end up checking for no all over the codebase this will make the called less",
    "start": "510220",
    "end": "516610"
  },
  {
    "text": "readable and slower the presence of now",
    "start": "516610",
    "end": "522820"
  },
  {
    "start": "519000",
    "end": "519000"
  },
  {
    "text": "will lead to unclear API we saw the getting function it might return your thing or it might return a null pointer",
    "start": "522820",
    "end": "528370"
  },
  {
    "text": "and that's that that's fine that's part of it interface but you can't see that from working at the code the same with the do",
    "start": "528370",
    "end": "535540"
  },
  {
    "text": "work function are you allowed not to give it a logger or does it require up a logger you can't see it from the",
    "start": "535540",
    "end": "540790"
  },
  {
    "text": "interface of the function the thing does",
    "start": "540790",
    "end": "546160"
  },
  {
    "text": "it always have a device or this is sometimes not have a device you can't see it from from the code so we have to",
    "start": "546160",
    "end": "552730"
  },
  {
    "text": "go check the documentation and hope that it's well documented and when you",
    "start": "552730",
    "end": "558010"
  },
  {
    "text": "upgrade to the next version let's hope they didn't change anyone so if the get thing function always used to",
    "start": "558010",
    "end": "563530"
  },
  {
    "text": "return you something and now they've changed the API so it doesn't always do that or the logger didn't used to be",
    "start": "563530",
    "end": "569470"
  },
  {
    "text": "mandatory but in this version it is mandatory your code won't break because the interface changed but the code",
    "start": "569470",
    "end": "574870"
  },
  {
    "text": "doesn't reflect that it's actually has changed so you'd better pay attention to the change log or maybe even read some",
    "start": "574870",
    "end": "580420"
  },
  {
    "text": "some deficit they forgot to dimension that so we unclear api's I'll introduce some",
    "start": "580420",
    "end": "590350"
  },
  {
    "text": "classification of like our person we classify both from bad to good or at",
    "start": "590350",
    "end": "596380"
  },
  {
    "text": "least from aren't really any good bugs but from worse to better bugs which will be useful the first classification is",
    "start": "596380",
    "end": "604150"
  },
  {
    "text": "where is the bug discovered is it discovered in production you have released your software the user is using",
    "start": "604150",
    "end": "611050"
  },
  {
    "text": "your software and you get a no point to dereference and the rocket crashes or whatever hopefully maybe it gets caught",
    "start": "611050",
    "end": "619390"
  },
  {
    "text": "by some manual process like a code review or your manual tester is able to to preciously your program will be",
    "start": "619390",
    "end": "627550"
  },
  {
    "text": "better if you had automatic tests like unit test system tests would be really",
    "start": "627550",
    "end": "632920"
  },
  {
    "text": "cool if the compiler could catch your your bugs so for now bugs at least for",
    "start": "632920",
    "end": "638500"
  },
  {
    "text": "me it's typically like something got into a wind state that I never thought about so maybe it's it's not found until",
    "start": "638500",
    "end": "646120"
  },
  {
    "text": "here at I'm not on the top here I could write automatic tests for every pointer",
    "start": "646120",
    "end": "652060"
  },
  {
    "text": "in my system saying hey what happens if this is no but that's going to be really expensive the other other scale is when",
    "start": "652060",
    "end": "661180"
  },
  {
    "text": "is the bug discovered as compared to when it actually happened so it's instead bug discovered when the",
    "start": "661180",
    "end": "668170"
  },
  {
    "text": "effect of the bug is visible at effect time or is it found at cost time when",
    "start": "668170",
    "end": "673810"
  },
  {
    "text": "the bug is actually cost so it's easier with an example from nulls well for most",
    "start": "673810",
    "end": "679720"
  },
  {
    "text": "of us you discovered it at effect time you discover it when you dereference the null pointer but the bug happens",
    "start": "679720",
    "end": "685930"
  },
  {
    "text": "previously when someone brought that null pointer that's probably the actual bug but you don't discover that you have",
    "start": "685930",
    "end": "690970"
  },
  {
    "text": "a bug until they try to dereference it at effect time and yeah if you if you",
    "start": "690970",
    "end": "696459"
  },
  {
    "text": "can just do whatever with a null pointer in your program it's it's known as normal basis like you appear somewhere",
    "start": "696459",
    "end": "702040"
  },
  {
    "text": "it's really bad because you just something other other",
    "start": "702040",
    "end": "708010"
  },
  {
    "text": "things might happen and when you discover bugs at effect time rather than",
    "start": "708010",
    "end": "713769"
  },
  {
    "text": "at cost time then your stack trace is useless because the stack trace will only tell you okay what were you trying",
    "start": "713769",
    "end": "718810"
  },
  {
    "text": "to do now it won't tell me what did you do when the bug happens and the same goes for your our reports from your",
    "start": "718810",
    "end": "724480"
  },
  {
    "text": "users because they will tell you I clicked here and the program crashed but that's not where the bug was the bug was",
    "start": "724480",
    "end": "729670"
  },
  {
    "text": "when they did something else previously or maybe it wasn't even em doing it so",
    "start": "729670",
    "end": "734980"
  },
  {
    "text": "they will also be quite useless so in summary and that's like we'll be",
    "start": "734980",
    "end": "741700"
  },
  {
    "text": "back otherwise no bad the referencing is undefined behavior and even if it wasn't",
    "start": "741700",
    "end": "747399"
  },
  {
    "text": "it would still be bad you might end up checking for now everywhere and api's",
    "start": "747399",
    "end": "753700"
  },
  {
    "text": "get unclear because you don't really know there's one of the many examples we saw and yeah finally no bugs manual I'm",
    "start": "753700",
    "end": "765040"
  },
  {
    "text": "at least can be caught very late in the release process and at effect time when the bug is visible and not at cost time",
    "start": "765040",
    "end": "771430"
  },
  {
    "text": "and it's cost so literally a little interlude why is",
    "start": "771430",
    "end": "778380"
  },
  {
    "text": "static typing good I will assume that many of you write sip of us from time to",
    "start": "778380",
    "end": "784470"
  },
  {
    "text": "time or see or some other statically typed language so what are your favorites properties of static typing",
    "start": "784470",
    "end": "791149"
  },
  {
    "text": "why why do you like it hmm compiler iris yeah yeah",
    "start": "791149",
    "end": "800690"
  },
  {
    "text": "so an example again a function f taking a person and I'm trying to pass a",
    "start": "801260",
    "end": "807810"
  },
  {
    "start": "802000",
    "end": "802000"
  },
  {
    "text": "company so this doesn't compile at least in Norway it doesn't compile in the US I",
    "start": "807810",
    "end": "814170"
  },
  {
    "text": "think this compiles but the point is I get I get the compiler to tell me",
    "start": "814170",
    "end": "819320"
  },
  {
    "text": "there's no possible way for me to actually pass in something wrong unless I intentionally do bad things and that",
    "start": "819320",
    "end": "827670"
  },
  {
    "text": "means I don't need to write any tests where what happens if I pass something else in a person and inside of F I don't",
    "start": "827670",
    "end": "834120"
  },
  {
    "text": "need to check whether I got that person or not and also I can just look at this",
    "start": "834120",
    "end": "839940"
  },
  {
    "text": "signature of this function and I can know quite a lot about what the function expects and what it promises of course",
    "start": "839940",
    "end": "845699"
  },
  {
    "text": "this is a simple one but a signature will tell you more when you have static types so static typing is good because a",
    "start": "845699",
    "end": "854670"
  },
  {
    "text": "whole class of errors are caught at compile time instead of at runtime let's test so write less code to write",
    "start": "854670",
    "end": "861870"
  },
  {
    "text": "and it makes the code easier to understand so what does null do - static",
    "start": "861870",
    "end": "870180"
  },
  {
    "start": "868000",
    "end": "868000"
  },
  {
    "text": "typing so normally you would say this function requires you to pass it a",
    "start": "870180",
    "end": "875279"
  },
  {
    "text": "person you have to posit a person but when you have a pointer that can be known so what it's saying is you are you",
    "start": "875279",
    "end": "881850"
  },
  {
    "text": "have to give me a person or not if you don't want you can just pass me no and",
    "start": "881850",
    "end": "887069"
  },
  {
    "text": "the same goes for a return type like I promised to return you a person or maybe I'll just return now so every time you",
    "start": "887069",
    "end": "894060"
  },
  {
    "text": "use a pointer you say you don't really require that type anymore it could also be no and I would say in some some some",
    "start": "894060",
    "end": "902850"
  },
  {
    "text": "sense it circumvents the type system or the fact that something can be no no",
    "start": "902850",
    "end": "909360"
  },
  {
    "text": "leti of something kind of circumvents the type system so we had our list of",
    "start": "909360",
    "end": "915180"
  },
  {
    "text": "why now is bad and yeah from the discussion of static typing I think we",
    "start": "915180",
    "end": "920880"
  },
  {
    "text": "can add also that it's sort of circumvents the type system so we've",
    "start": "920880",
    "end": "929279"
  },
  {
    "text": "seen that know is useful for many things it also harmful in many ways so question",
    "start": "929279",
    "end": "935760"
  },
  {
    "text": "then is how do we go about creating this beautiful new world with no notes without losing the usefulness that we've",
    "start": "935760",
    "end": "942120"
  },
  {
    "text": "seen yeah we talked about Nolan ability",
    "start": "942120",
    "end": "950339"
  },
  {
    "start": "945000",
    "end": "945000"
  },
  {
    "text": "and possibly missing values we have been a bit unclear about terminology so let's think about requirements and",
    "start": "950339",
    "end": "957420"
  },
  {
    "text": "implementation details so there's a requirement to be able to represent",
    "start": "957420",
    "end": "963120"
  },
  {
    "text": "values which can be missing and the implementation detail is done the techniques which support missing values",
    "start": "963120",
    "end": "971660"
  },
  {
    "text": "yeah so this is our requirements possibly missing values this is our implementation details how do we",
    "start": "971660",
    "end": "977579"
  },
  {
    "text": "represent those values so some values which can be missing a person might or",
    "start": "977579",
    "end": "984360"
  },
  {
    "start": "980000",
    "end": "980000"
  },
  {
    "text": "might not have a phone number a print function might take a color if you don't give it a color you can just use the",
    "start": "984360",
    "end": "989760"
  },
  {
    "text": "previous one function might not be able to find the thing you asked for so let's",
    "start": "989760",
    "end": "996690"
  },
  {
    "text": "call this maybe values values that might or might not be there now that's the requirement we have we need to be able",
    "start": "996690",
    "end": "1003350"
  },
  {
    "text": "to represent maybe values and then we have techniques which allow for missing values so we saw pointers that's the old",
    "start": "1003350",
    "end": "1012829"
  },
  {
    "start": "1006000",
    "end": "1006000"
  },
  {
    "text": "way of doing that in c plus 17 we get up a real maybe type proper maybe type",
    "start": "1012829",
    "end": "1019040"
  },
  {
    "text": "called to the optional and there are other techniques to use like the null",
    "start": "1019040",
    "end": "1025548"
  },
  {
    "text": "object patterns or other other techniques as I want focus on that today",
    "start": "1025549",
    "end": "1032438"
  },
  {
    "text": "so let's refer collectively to these as may be techniques and then there may be may be typing or no basic may be",
    "start": "1032709",
    "end": "1039438"
  },
  {
    "text": "techniques and the most basic thing that I think everyone is already doing today or at",
    "start": "1039439",
    "end": "1047220"
  },
  {
    "text": "least quite a lot is to realize that maybe techniques are for maybe values if you have a definite value you know it's",
    "start": "1047220",
    "end": "1053460"
  },
  {
    "text": "going to be there don't use a type which allows it's not to be and this is",
    "start": "1053460",
    "end": "1058980"
  },
  {
    "text": "nothing new or fancy it's all cool stuff which I think it has to be mentioned NASA like the first step so I'll use",
    "start": "1058980",
    "end": "1068640"
  },
  {
    "start": "1066000",
    "end": "1066000"
  },
  {
    "text": "some examples now from like some example code for the music industry since I love",
    "start": "1068640",
    "end": "1074910"
  },
  {
    "text": "music and we have a clothes designer the designer can make a flyer for an artist",
    "start": "1074910",
    "end": "1080600"
  },
  {
    "text": "okay so we have to pass an artist because if you don't give an artist there's no way to make a fire because",
    "start": "1080600",
    "end": "1085740"
  },
  {
    "text": "there's nothing to make the fire for it's not optional so how do you fix that function art is a reference okay this is",
    "start": "1085740",
    "end": "1095580"
  },
  {
    "text": "very very simple with stuff I think we all doing it's very clear now that you have to",
    "start": "1095580",
    "end": "1102060"
  },
  {
    "text": "pass an artist you know when you read the signature that you do it it's not optional and it also clarifies ownership",
    "start": "1102060",
    "end": "1109700"
  },
  {
    "text": "there's no way that make four is going to take ownership of this artist I mean",
    "start": "1109700",
    "end": "1114750"
  },
  {
    "text": "it's pretty clear from the name of the function as well or from the context that it wouldn't be true but for in many",
    "start": "1114750",
    "end": "1120900"
  },
  {
    "text": "other cases it's not always that simple to see at once how about this example",
    "start": "1120900",
    "end": "1128280"
  },
  {
    "text": "you have an album and in our business logic every album has to be made by one",
    "start": "1128280",
    "end": "1133800"
  },
  {
    "text": "artists so we have a pointer to the artist that made the album would you change anything about this",
    "start": "1133800",
    "end": "1142160"
  },
  {
    "text": "will you make the reference I would probably make it our reference because",
    "start": "1144589",
    "end": "1152190"
  },
  {
    "text": "of the same arguments as before it it communicates very clearly to anyone constructing an album that you have to",
    "start": "1152190",
    "end": "1157379"
  },
  {
    "text": "give an artist it's not optional and you don't risk no pointers you don't risk",
    "start": "1157379",
    "end": "1163320"
  },
  {
    "text": "anyone passing no and in client code if I have an instance of album I don't need to check whether there's an artist I can",
    "start": "1163320",
    "end": "1169469"
  },
  {
    "text": "just know that there's there's always going to be an artist available for this album and again ownership is clear I'm",
    "start": "1169469",
    "end": "1176729"
  },
  {
    "text": "just referring to this artist that you're passing me in the constructor you are responsible for the lifetime and for",
    "start": "1176729",
    "end": "1182159"
  },
  {
    "text": "the waiting mass that object but this",
    "start": "1182159",
    "end": "1187529"
  },
  {
    "text": "has some consequences I'm initializing the artist member in the initializer",
    "start": "1187529",
    "end": "1193289"
  },
  {
    "text": "list and that's not only because it's good practice often to do that but you",
    "start": "1193289",
    "end": "1198509"
  },
  {
    "text": "have to but because when you have a reference you can't make it refer to something else later so that's the only",
    "start": "1198509",
    "end": "1205049"
  },
  {
    "text": "place where you can initialize a reference you can't initialize it in the constructive body and you can't",
    "start": "1205049",
    "end": "1210139"
  },
  {
    "text": "reinitialize it off to the constructor so that might be inconvenient in some",
    "start": "1210139",
    "end": "1216359"
  },
  {
    "text": "cases but what it does is it pushes you towards image ability and fully",
    "start": "1216359",
    "end": "1221849"
  },
  {
    "text": "initialized objects so you have to initialize everything at once and it pushes you away from to stage in a",
    "start": "1221849",
    "end": "1226950"
  },
  {
    "text": "civilization and stuff like that what if I want to add an assignment",
    "start": "1226950",
    "end": "1235200"
  },
  {
    "text": "operator to this class okay I can't do that because I can't make the reference",
    "start": "1235200",
    "end": "1240809"
  },
  {
    "text": "refer to something else so I can't really write an assignment operator but",
    "start": "1240809",
    "end": "1247589"
  },
  {
    "text": "in most cases I would say you don't want to have an assignment operator and if",
    "start": "1247589",
    "end": "1252719"
  },
  {
    "text": "you don't have an assignment operator you're not going to reuse your variable it pushes you towards immutability again",
    "start": "1252719",
    "end": "1258089"
  },
  {
    "text": "which is good and so we think if you can do without that then this is great and",
    "start": "1258089",
    "end": "1265440"
  },
  {
    "text": "it will often push you towards safer style of coding I would say if you",
    "start": "1265440",
    "end": "1270570"
  },
  {
    "text": "really really need to be able to do any of this then you can use a reference wrapper to put around it but",
    "start": "1270570",
    "end": "1277309"
  },
  {
    "text": "I hope at least mostly you won't need that",
    "start": "1277309",
    "end": "1281350"
  },
  {
    "start": "1282000",
    "end": "1282000"
  },
  {
    "text": "references isn't the only thing that can replace pointers often you can replace a pointer with just a normal good old",
    "start": "1283669",
    "end": "1290389"
  },
  {
    "text": "value so say we have to put a date on the fire because you have to put which data artists is going to play the date",
    "start": "1290389",
    "end": "1298399"
  },
  {
    "text": "class is probably just ticks since some time or something it's if it's a small",
    "start": "1298399",
    "end": "1303799"
  },
  {
    "text": "and trivial class this is going to be just as cheap as a point or a reference",
    "start": "1303799",
    "end": "1312039"
  },
  {
    "start": "1314000",
    "end": "1314000"
  },
  {
    "text": "so that was members and arguments to functions what about return values we",
    "start": "1314200",
    "end": "1320990"
  },
  {
    "text": "saw them make fire function it returns by value so maybe the flyer is a quite big class",
    "start": "1320990",
    "end": "1327499"
  },
  {
    "text": "with lots of graphics and fancier things so when I when I call make fire then you",
    "start": "1327499",
    "end": "1333919"
  },
  {
    "text": "would have to initialize the fire in here and then you have to copy it out into this one right but since we have",
    "start": "1333919",
    "end": "1341059"
  },
  {
    "text": "the return value optimization in simple plus its sense that you're actually allowed to skip that copy even if the",
    "start": "1341059",
    "end": "1348440"
  },
  {
    "text": "fire has a copy constructor with side-effects all of that can be skipped",
    "start": "1348440",
    "end": "1353559"
  },
  {
    "text": "and that's a very rare type of optimization where the optimizer is allowed to actually change the",
    "start": "1353559",
    "end": "1359299"
  },
  {
    "text": "observable behavior of the program you don't have to do the to run the copy contractor but it's it's it's very handy",
    "start": "1359299",
    "end": "1365869"
  },
  {
    "text": "and you can usually rely on this happening I wrote up so yes but that",
    "start": "1365869",
    "end": "1381499"
  },
  {
    "text": "isn't that only if you're returning a PR value or another value in at least its",
    "start": "1381499",
    "end": "1393049"
  },
  {
    "text": "its ruins in some cases in C because you're actually required to skip that copy so what you just do is you just",
    "start": "1393049",
    "end": "1398480"
  },
  {
    "text": "take this memory that you're going to copy into later and just use that memory inside here and just fill that up in at",
    "start": "1398480",
    "end": "1403909"
  },
  {
    "text": "once and then you can skip the entire thing so yeah I wrote a blog post back",
    "start": "1403909",
    "end": "1409580"
  },
  {
    "text": "in 2011 tried several compilers giving them some tricky cases with like chain calls and stuff and all the big ones were pretty",
    "start": "1409580",
    "end": "1417710"
  },
  {
    "text": "good at it and people have been submitting their results since then and yeah clang GCC and Microsoft are all",
    "start": "1417710",
    "end": "1423830"
  },
  {
    "text": "very good at the return value optimization in my experience but tests on your system if you really care about",
    "start": "1423830",
    "end": "1429830"
  },
  {
    "text": "it it's very easy to check you just make a type that just does see out in the",
    "start": "1429830",
    "end": "1434870"
  },
  {
    "text": "copies constructor and then eject that you get to see out or not",
    "start": "1434870",
    "end": "1439480"
  },
  {
    "text": "yeah so there's one case where you can't return by value that's if you have a",
    "start": "1440620",
    "end": "1446059"
  },
  {
    "text": "polymorphic type so say the flyer is a base class and you don't know which base class will be actually returned you",
    "start": "1446059",
    "end": "1453650"
  },
  {
    "text": "can't if you have if you return by value you only get the fire-type you slice away the child part which is bad so you",
    "start": "1453650",
    "end": "1460880"
  },
  {
    "text": "have to use a reference or a pointer but you can't return a reference to a locally created variable because that",
    "start": "1460880",
    "end": "1467720"
  },
  {
    "text": "goes out to scope on the function exits so in those cases you will often end up with a pointer and probably a unique",
    "start": "1467720",
    "end": "1474679"
  },
  {
    "text": "pointer one final simple thing use the",
    "start": "1474679",
    "end": "1480770"
  },
  {
    "start": "1479000",
    "end": "1479000"
  },
  {
    "text": "standard library we want to show the lyrics for a song so we pass it a Const",
    "start": "1480770",
    "end": "1485809"
  },
  {
    "text": "car pointer to the lyrics or since we're super class programmers we it was a",
    "start": "1485809",
    "end": "1491120"
  },
  {
    "text": "reference to a string instead that has many advantages the important thing for",
    "start": "1491120",
    "end": "1498169"
  },
  {
    "text": "this talk is that lyrics is never going to be no you can just find an empty",
    "start": "1498169",
    "end": "1503720"
  },
  {
    "text": "string but it's not going to be no and let's say we want to invite some artists",
    "start": "1503720",
    "end": "1510980"
  },
  {
    "text": "to our festival so we point to the artists array and give it a number of artists to invite or we use some sort of",
    "start": "1510980",
    "end": "1520150"
  },
  {
    "text": "container or maybe we posted some iterators or span or arrange or whatever",
    "start": "1520150",
    "end": "1526820"
  },
  {
    "text": "but at least we don't post the pointer that's the important part so maybe",
    "start": "1526820",
    "end": "1533840"
  },
  {
    "start": "1532000",
    "end": "1532000"
  },
  {
    "text": "techniques are for maybe I'll use use references or values instead of pointers return by value know about the return",
    "start": "1533840",
    "end": "1541399"
  },
  {
    "text": "value optimisation and use the standard library over old C style signatures because I really like",
    "start": "1541399",
    "end": "1549580"
  },
  {
    "text": "pointers so here's the classification",
    "start": "1549580",
    "end": "1558580"
  },
  {
    "text": "again what has although that's given us on these scales all our old pointers",
    "start": "1558580",
    "end": "1565179"
  },
  {
    "text": "that now are references or values that was possible bugs around here it's just",
    "start": "1565179",
    "end": "1571140"
  },
  {
    "text": "I'm not we wouldn't even call it a compiler error it just it there is no way of compiling a program with no there so",
    "start": "1571140",
    "end": "1578890"
  },
  {
    "text": "it's not possible to represent in c plus the buggy we're actually trying to write",
    "start": "1578890",
    "end": "1584460"
  },
  {
    "text": "and yeah so that's how to deal with May",
    "start": "1584460",
    "end": "1592210"
  },
  {
    "text": "with definite values you know we have a definite value use a definite type don't use them may be type or may be technique",
    "start": "1592210",
    "end": "1597520"
  },
  {
    "text": "for a definite value but not all values are definite some values or may be values they might not be there and then",
    "start": "1597520",
    "end": "1603940"
  },
  {
    "text": "let's see how to turn a definite value into your maybe value in CB + 17 we go",
    "start": "1603940",
    "end": "1611110"
  },
  {
    "text": "to the optional real maybe type it's",
    "start": "1611110",
    "end": "1616450"
  },
  {
    "text": "sort of like a tuple of a bool and the possible value so either it's it has true and then the value you're looking",
    "start": "1616450",
    "end": "1622720"
  },
  {
    "text": "for or it has false or no value it's very very very simple and then type in",
    "start": "1622720",
    "end": "1628570"
  },
  {
    "text": "attitude in that sense a few examples say you have an optional artist and",
    "start": "1628570",
    "end": "1635350"
  },
  {
    "start": "1631000",
    "end": "1631000"
  },
  {
    "text": "either there is an artist there others is no artist there so you can say if a has value it was do you have an artist",
    "start": "1635350",
    "end": "1642720"
  },
  {
    "text": "or you can just use the blue operator and just say if a and this looks exactly",
    "start": "1642720",
    "end": "1648159"
  },
  {
    "text": "like it did for pointers when you're testing from no pointer now you're checking if it has a value the big",
    "start": "1648159",
    "end": "1653200"
  },
  {
    "text": "difference is that now it's an optional vibe it says right there optional you know it's going to be optional that's",
    "start": "1653200",
    "end": "1658929"
  },
  {
    "text": "why you have to check it could be a pointer for a whole host of other reasons then for it to be able to be",
    "start": "1658929",
    "end": "1665380"
  },
  {
    "text": "optional so this is a lot clearer then",
    "start": "1665380",
    "end": "1670659"
  },
  {
    "text": "you can get at the value by calling dot value and it will probably an exception if there was no value",
    "start": "1670659",
    "end": "1677550"
  },
  {
    "text": "you can also just dereference it if you're brave but now you're back into undefined behavior if there was no value",
    "start": "1677550",
    "end": "1685440"
  },
  {
    "text": "and it has a handy arrow operator just like pointers so both of these always",
    "start": "1686160",
    "end": "1692410"
  },
  {
    "text": "look also look exactly like for pointers it's undefined behavior if there's no",
    "start": "1692410",
    "end": "1698290"
  },
  {
    "text": "value but is still very useful because then you can check at the top of your function and then I can just dereference it for the rest of the function when you",
    "start": "1698290",
    "end": "1703570"
  },
  {
    "text": "know there's a value so we can get fast executions we don't have to pay for the check every time you access it right so",
    "start": "1703570",
    "end": "1715060"
  },
  {
    "text": "let's say we have an artist and we ask the artist to go write a song so they",
    "start": "1715060",
    "end": "1720850"
  },
  {
    "text": "will go and try to come up with something but it's it's really hard to write a good song so maybe they don't always come back with a good song so",
    "start": "1720850",
    "end": "1729150"
  },
  {
    "text": "instead of returning a pointer like we saw earlier we can return an optional",
    "start": "1729150",
    "end": "1735190"
  },
  {
    "text": "song instead and why is this better than pointers well it's someone bothered to",
    "start": "1735190",
    "end": "1741160"
  },
  {
    "text": "actually write the optional in here so we know it's optional it's very clear from the code it might also be good for",
    "start": "1741160",
    "end": "1749200"
  },
  {
    "text": "performance because the the value of an optional is the memory is inside of the",
    "start": "1749200",
    "end": "1755380"
  },
  {
    "text": "optional memory so all the memory is allocated in one place it's not like it has the bool for saying do you have a",
    "start": "1755380",
    "end": "1761860"
  },
  {
    "text": "value and then it's pointing to the value now the entire value is inside of the optional so that means you get very",
    "start": "1761860",
    "end": "1767980"
  },
  {
    "text": "good locality which is good for cash and you get fewer allocations you don't get an extra allocation to like to get for",
    "start": "1767980",
    "end": "1774580"
  },
  {
    "text": "instance for a string where the actual string is somewhere else on the heap and the return value of my session still",
    "start": "1774580",
    "end": "1781510"
  },
  {
    "text": "applies so we don't actually have to copy this out at all",
    "start": "1781510",
    "end": "1786120"
  },
  {
    "text": "back to the make fire function let's say you don't always have to put a date on the fire sometimes you just want to make",
    "start": "1789210",
    "end": "1796589"
  },
  {
    "text": "up a fire for the artist just for advertisements now you want to make date",
    "start": "1796589",
    "end": "1801629"
  },
  {
    "text": "optional just wrap it instead optional it's now you get an extra bull and maybe",
    "start": "1801629",
    "end": "1809789"
  },
  {
    "text": "you get some padding for alignment but it's still a small and cheap trivial class to copy which it should still be",
    "start": "1809789",
    "end": "1816659"
  },
  {
    "text": "quite performance so optional is great",
    "start": "1816659",
    "end": "1823259"
  },
  {
    "text": "for small value types what if you want references for some reason so you have a superstar class and our superstars",
    "start": "1823259",
    "end": "1829649"
  },
  {
    "text": "they're really big superstars very expensive to copy or maybe you just want",
    "start": "1829649",
    "end": "1834690"
  },
  {
    "text": "reference semantics or some other reason what do you do then well the obvious",
    "start": "1834690",
    "end": "1839909"
  },
  {
    "text": "thing of course you just pass an optional reference but optional references are not supported by optional",
    "start": "1839909",
    "end": "1846330"
  },
  {
    "text": "you can only have optional pointers or values there's nothing technical preventing us from implementing this",
    "start": "1846330",
    "end": "1852419"
  },
  {
    "text": "it's just that people haven't been able to agree on what does an optional a reference mean the semantics are unclear",
    "start": "1852419",
    "end": "1860039"
  },
  {
    "text": "I talked to the poor guy trying to have to gather consensus for what it should",
    "start": "1860039",
    "end": "1866159"
  },
  {
    "text": "be and I don't think we'll get this for simple was 20 he seemed sort of like sad",
    "start": "1866159",
    "end": "1873599"
  },
  {
    "text": "and about the whole situation yeah so you can't have an optional reference",
    "start": "1873599",
    "end": "1879479"
  },
  {
    "text": "what do you do instead maybe just give it a reference to the optional in some",
    "start": "1879479",
    "end": "1887309"
  },
  {
    "text": "cases this is actually a great if you can always know that the color of this function has the superstar already",
    "start": "1887309",
    "end": "1893909"
  },
  {
    "text": "inside of an optional then this is great because you can just refer to that optional with the superstar inside it if",
    "start": "1893909",
    "end": "1900359"
  },
  {
    "text": "I want to call this function and I just have a superstar object and I won't a need now to pass an optional superstar I",
    "start": "1900359",
    "end": "1906089"
  },
  {
    "text": "have to first create an optional superstars I have to copy or move the superstar into an optional which is",
    "start": "1906089",
    "end": "1911669"
  },
  {
    "text": "going to be very expensive especially if I can't move it so this only applies if",
    "start": "1911669",
    "end": "1917279"
  },
  {
    "text": "you really know that the superstars they are always inside the optional so anyway so it's not a very very general good so",
    "start": "1917279",
    "end": "1922529"
  },
  {
    "text": "we you can rap a reference wrapper around",
    "start": "1922529",
    "end": "1928260"
  },
  {
    "text": "the reference then the signature it doesn't look as nice anymore but at",
    "start": "1928260",
    "end": "1933720"
  },
  {
    "text": "least it works it could just give up on this stupid no more notes idea and just",
    "start": "1933720",
    "end": "1939720"
  },
  {
    "text": "send on a pointer instead because pointers you can put in optionals but",
    "start": "1939720",
    "end": "1945330"
  },
  {
    "text": "that doesn't really make sense to pass an optional pointer because even if you have a pointer that pointer could be new then you have to check did I get a value",
    "start": "1945330",
    "end": "1952049"
  },
  {
    "text": "and was that value not know and then I can do something so maybe you just give up and go back to the good ol pointer",
    "start": "1952049",
    "end": "1959720"
  },
  {
    "text": "depends a bit on the use case but I think the optional reference wrapper is pretty good yes yeah it makes it much",
    "start": "1959720",
    "end": "1986820"
  },
  {
    "text": "much more clear and I'll skip ahead a little bit and say that this is kind of you can't really compare to see sure",
    "start": "1986820",
    "end": "1993179"
  },
  {
    "text": "this is what we did in c-sharp and we didn't yeah and that that did help a lot",
    "start": "1993179",
    "end": "1999000"
  },
  {
    "text": "because of that reason because it's communicates very clear so I agree with",
    "start": "1999000",
    "end": "2004039"
  },
  {
    "text": "that no I'm not I'm on the fence about",
    "start": "2004039",
    "end": "2013010"
  },
  {
    "text": "that so what what does study optional",
    "start": "2013010",
    "end": "2018140"
  },
  {
    "start": "2016000",
    "end": "2016000"
  },
  {
    "text": "give us on this classification I would say it doesn't give us anything but what",
    "start": "2018140",
    "end": "2024529"
  },
  {
    "text": "it does it makes the API a lot clearer so we're a lot less likely to make the error in first place and the error here",
    "start": "2024529",
    "end": "2030860"
  },
  {
    "text": "being of course using the optional value without it actually having a value yeah",
    "start": "2030860",
    "end": "2043850"
  },
  {
    "text": "that's a good point it's it's it increases the chance of this happening but just the fact that it makes the API",
    "start": "2043850",
    "end": "2051618"
  },
  {
    "text": "about clearer it makes you less likely to make the bug in the first place more likely to that it will be",
    "start": "2051619",
    "end": "2057669"
  },
  {
    "text": "discovered if you forget so we cleaned up a lot we got rid of a bunch of",
    "start": "2057669",
    "end": "2064118"
  },
  {
    "text": "potential notes by using references and values our for definite time values from",
    "start": "2064119",
    "end": "2069849"
  },
  {
    "text": "maybe values we used stood optional and we come quite a long way but there might",
    "start": "2069849",
    "end": "2078368"
  },
  {
    "text": "be some remaining pointers in our code base okay maybe you need to point to some physical address I need to return a",
    "start": "2078369",
    "end": "2084579"
  },
  {
    "text": "polymorphic type from somewhere you need to allocate some stuff on the heap or just you have many reasons for maybe I",
    "start": "2084579",
    "end": "2092230"
  },
  {
    "text": "have if some having some remaining pointers that you couldn't replace with the previous things we saw and some of",
    "start": "2092230",
    "end": "2100269"
  },
  {
    "text": "those pointers will be allowed to be null at times and some are never supposed to be null so either we can do",
    "start": "2100269",
    "end": "2108309"
  },
  {
    "text": "something with the maybe pointers the pointers that might sometimes be no or we can do something with the definite",
    "start": "2108309",
    "end": "2114039"
  },
  {
    "start": "2114000",
    "end": "2114000"
  },
  {
    "text": "pointers that are never supposed to be known and yeah this is where I was going",
    "start": "2114039",
    "end": "2120009"
  },
  {
    "text": "to say basically what you come unto that we only did on something with maybe pointers in C sharp so we got no help",
    "start": "2120009",
    "end": "2127990"
  },
  {
    "text": "from the compiler or the runtime or anything with our definite pointers actually checking that or not no buts",
    "start": "2127990",
    "end": "2133180"
  },
  {
    "text": "but even even doing just that made the code a lot easier to understand and every time we saw one null in the",
    "start": "2133180",
    "end": "2139660"
  },
  {
    "text": "debugger is like hey something isn't set up properly here you didn't need to really know that part of the code to",
    "start": "2139660",
    "end": "2145210"
  },
  {
    "text": "know that something was wrong so which",
    "start": "2145210",
    "end": "2150339"
  },
  {
    "text": "one should we do for simple class so we have to point to thing pointers and maybe an a definite thing so there may",
    "start": "2150339",
    "end": "2157210"
  },
  {
    "start": "2152000",
    "end": "2152000"
  },
  {
    "text": "be thing might not always be there the definite thing will always be there and we want to call do something and both of",
    "start": "2157210",
    "end": "2163269"
  },
  {
    "text": "them so what about wrapping the optional",
    "start": "2163269",
    "end": "2168940"
  },
  {
    "text": "that the pointer in an optional that's what we went to briefly into earlier well first of all now you have to",
    "start": "2168940",
    "end": "2175329"
  },
  {
    "text": "dereference it twice first you have to dereference it to get it out of the optional and then you have to",
    "start": "2175329",
    "end": "2180940"
  },
  {
    "text": "dereference it to do something with it so it gets a bit ugly but the worst thing is that when you check if it has a",
    "start": "2180940",
    "end": "2187539"
  },
  {
    "text": "value that value might still be no so you have you will have to even check this in",
    "start": "2187539",
    "end": "2193740"
  },
  {
    "text": "addition to this so maybe pointers they don't make that much sense always instead we could",
    "start": "2193740",
    "end": "2202319"
  },
  {
    "start": "2199000",
    "end": "2199000"
  },
  {
    "text": "tackle the definite pointer we could wrap it with not know which you have",
    "start": "2202319",
    "end": "2208710"
  },
  {
    "text": "some issues with yesterday however was it this morning so user reference if you",
    "start": "2208710",
    "end": "2219690"
  },
  {
    "text": "can but if you for some reason have a pointer you have to use you could wrap",
    "start": "2219690",
    "end": "2225450"
  },
  {
    "text": "it in not know from the garden support library I'll get back to the details but",
    "start": "2225450",
    "end": "2230670"
  },
  {
    "text": "it just it's a cost it's a cross template which ensures that this pointer",
    "start": "2230670",
    "end": "2236609"
  },
  {
    "text": "will never be known so now for the maybe pointer we're back to the good old check",
    "start": "2236609",
    "end": "2242400"
  },
  {
    "text": "if it's there if it's there you do something but this is what you want because it's a maybe value so you're supposed to do a check for it for the",
    "start": "2242400",
    "end": "2249630"
  },
  {
    "text": "definite pointer you can just call do something because you know it can't be no in the first place",
    "start": "2249630",
    "end": "2254930"
  },
  {
    "text": "so this wins us quite a lot actually because then you only need to have this no checks for the pointers which are",
    "start": "2254930",
    "end": "2261599"
  },
  {
    "text": "actually allowed to be null and you don't need to have those checks in the other places and it makes the API",
    "start": "2261599",
    "end": "2267000"
  },
  {
    "text": "clearer if you see a just a row pointer you know it's maybe a pointer if you see a not null pointer you know it's",
    "start": "2267000",
    "end": "2273029"
  },
  {
    "text": "definitely going to be there just l not",
    "start": "2273029",
    "end": "2278460"
  },
  {
    "text": "know it's just a normal class or costs templates the constructor taking a null",
    "start": "2278460",
    "end": "2285869"
  },
  {
    "text": "pointer has been deleted so initializing this with no is now a compile error",
    "start": "2285869",
    "end": "2291000"
  },
  {
    "text": "which is very very nice so what would previously be a runtime error is suddenly a compiler this doesn't only go",
    "start": "2291000",
    "end": "2297930"
  },
  {
    "text": "for the no prototype it's you can also pass a zero and you will actually compile it or it will tell you that hey",
    "start": "2297930",
    "end": "2303539"
  },
  {
    "text": "this isn't allowed but it's quite easy to just pick another constructor right",
    "start": "2303539",
    "end": "2308759"
  },
  {
    "text": "so if you have an existing role null pointer you can pass it in and now the constructor won't or the compiler won't",
    "start": "2308759",
    "end": "2315809"
  },
  {
    "text": "help you but now you get an error when you're trying to assign no to this",
    "start": "2315809",
    "end": "2321329"
  },
  {
    "text": "pattern I'm trying to set it now I didn't get up the error when you try to set it to know rather than when you try to dereference",
    "start": "2321329",
    "end": "2327059"
  },
  {
    "text": "it later so he gets you get the error when the bug actually happens and if you",
    "start": "2327059",
    "end": "2333869"
  },
  {
    "text": "have a good static analyzer that knows about not know at least this trivial case would probably be picked up by the",
    "start": "2333869",
    "end": "2339689"
  },
  {
    "text": "static analyzer so yeah I said in the beginning I'm using row pointers",
    "start": "2339689",
    "end": "2345809"
  },
  {
    "text": "everything applies to smart pointers as well not necessarily would not know you can't use not know with unique pointers",
    "start": "2345809",
    "end": "2352140"
  },
  {
    "text": "at least not right now so it's not always solution you can use so what does",
    "start": "2352140",
    "end": "2363419"
  },
  {
    "text": "this do for us some of the cases that used to be up here if you try to initialize it to know",
    "start": "2363419",
    "end": "2370019"
  },
  {
    "text": "in the source code directly it's a compiler so we took all of these down",
    "start": "2370019",
    "end": "2375779"
  },
  {
    "text": "here and for the rest we took them from here down to here because we now notice",
    "start": "2375779",
    "end": "2380969"
  },
  {
    "text": "when we try to set it to no rather than when we try to the references or if you if you are working on some Smith system",
    "start": "2380969",
    "end": "2387900"
  },
  {
    "text": "which doesn't give you a seg fault or a page fault or whatever which may be it up here and at least it brings you down",
    "start": "2387900",
    "end": "2394109"
  },
  {
    "text": "here so GSL not know helps you because",
    "start": "2394109",
    "end": "2402509"
  },
  {
    "text": "you only need to do no checks on your maybe values less code to write the API",
    "start": "2402509",
    "end": "2408900"
  },
  {
    "text": "is clear and your definite pointers will be either checked at compile time by",
    "start": "2408900",
    "end": "2414630"
  },
  {
    "text": "your static analyzer or at runtime without you having to do anything else than just mark it as not know in the",
    "start": "2414630",
    "end": "2421109"
  },
  {
    "text": "declaration so what can we do what's",
    "start": "2421109",
    "end": "2428249"
  },
  {
    "start": "2424000",
    "end": "2424000"
  },
  {
    "text": "what's the bright future what does it look like we use references or values over pointers we use stood optional for",
    "start": "2428249",
    "end": "2435299"
  },
  {
    "text": "optional values and DSL not know for definite pointers then we get clearer",
    "start": "2435299",
    "end": "2443189"
  },
  {
    "text": "api's less code fewer tests we need to write and actually many of our previous",
    "start": "2443189",
    "end": "2450929"
  },
  {
    "text": "bugs they won't even compile anymore",
    "start": "2450929",
    "end": "2454489"
  },
  {
    "text": "no more nose did we get there we didn't",
    "start": "2456329",
    "end": "2463810"
  },
  {
    "text": "we didn't really get all the way I think it's not it like in in rust where they just say there is no no right they don't",
    "start": "2463810",
    "end": "2471010"
  },
  {
    "text": "have no we still might have some nose around but we got rid of a whole bunch",
    "start": "2471010",
    "end": "2476680"
  },
  {
    "text": "of them and we have some safeguards that we can use for the remaining ones right",
    "start": "2476680",
    "end": "2485730"
  },
  {
    "text": "give me questions okay a linked list if",
    "start": "2485730",
    "end": "2497770"
  },
  {
    "text": "you need a linked list yeah yeah then",
    "start": "2497770",
    "end": "2507819"
  },
  {
    "text": "it's at least it's contained in a library so the standard libraries is fairly well",
    "start": "2507819",
    "end": "2514869"
  },
  {
    "text": "tested and used by lots of people so it's at least safer than if you start doing it yourself and if you if you need",
    "start": "2514869",
    "end": "2521619"
  },
  {
    "text": "to you to make any data structures like that yourself I guess then you will hopefully treat is treated as library :",
    "start": "2521619",
    "end": "2529300"
  },
  {
    "text": "test it yeah yeah all right at the same",
    "start": "2529300",
    "end": "2557859"
  },
  {
    "text": "time right yeah yeah I misunderstood",
    "start": "2557859",
    "end": "2564760"
  },
  {
    "text": "your question",
    "start": "2564760",
    "end": "2566940"
  },
  {
    "text": "no he wants and that's that might be a common concern if you want to transfer",
    "start": "2570769",
    "end": "2576390"
  },
  {
    "text": "our like a raw object of something into an optional that object you have to copy or move it into the optional so that",
    "start": "2576390",
    "end": "2583199"
  },
  {
    "text": "might be a concern yeah no that's that's",
    "start": "2583199",
    "end": "2604829"
  },
  {
    "text": "a it's a kind of a performance trade-off do you want it you want to have good locality or do you want to be able to do",
    "start": "2604829",
    "end": "2612809"
  },
  {
    "text": "point to already existing stuff if it's for internal use I guess it's making an",
    "start": "2612809",
    "end": "2618179"
  },
  {
    "text": "optional type it's very very simple especially if you don't need to to her allocate the memory for it in yourself",
    "start": "2618179",
    "end": "2624119"
  },
  {
    "text": "and it's just a duel on a pointer so maybe you could like make her own and",
    "start": "2624119",
    "end": "2640909"
  },
  {
    "text": "yeah actually I had it on my slides for over four times that kind of for fun I",
    "start": "2640909",
    "end": "2646890"
  },
  {
    "text": "had an optional of not null shared pointer you can do that if you want so",
    "start": "2646890",
    "end": "2653489"
  },
  {
    "text": "if you have an optional not know of a pointer then it's actually very very clear I really like the semantics of",
    "start": "2653489",
    "end": "2658829"
  },
  {
    "text": "that because then you say the pointer it's never supposed to be no but it's optional if it's there or not then you",
    "start": "2658829",
    "end": "2665609"
  },
  {
    "text": "take the maybe Ness kind of away from the pointer and into the optional so",
    "start": "2665609",
    "end": "2670739"
  },
  {
    "text": "it's like semantically it's very nice but in practice I don't know I haven't",
    "start": "2670739",
    "end": "2676469"
  },
  {
    "text": "tried it oh yeah bit more cumbersome but yeah you can you can have an optional",
    "start": "2676469",
    "end": "2682289"
  },
  {
    "text": "not no pointer I think we have seven",
    "start": "2682289",
    "end": "2688199"
  },
  {
    "text": "seconds left time is out sorry yeah there's boost",
    "start": "2688199",
    "end": "2704430"
  },
  {
    "text": "optional which was the inspiration for stood optional so you can use that but if you if you can't use boost maybe your",
    "start": "2704430",
    "end": "2712170"
  },
  {
    "text": "your clients don't want to use boost or if you really would like to use stead of",
    "start": "2712170",
    "end": "2718470"
  },
  {
    "text": "snow maybe you could just wait a year or two until you can use it with 17 I was",
    "start": "2718470",
    "end": "2724320"
  },
  {
    "text": "talking to a guy from cute yesterday and they have this problem all the time they",
    "start": "2724320",
    "end": "2729510"
  },
  {
    "text": "had to they had to make a string before you got the proper Eastern string they had to like make their own pipes for everything and you can't really just",
    "start": "2729510",
    "end": "2737040"
  },
  {
    "text": "replace it because you have all of these clients using so if you make your own optional where if you use boost optional",
    "start": "2737040",
    "end": "2742770"
  },
  {
    "text": "it will kind of stuck with that it's",
    "start": "2742770",
    "end": "2759540"
  },
  {
    "text": "really simple we just in the constructor you just if you just have a boom member and a pointer and in just the constructor we just reserve the memory",
    "start": "2759540",
    "end": "2766050"
  },
  {
    "text": "for the size of the object that you're going to be optional and then you can just copy it in there yeah I think",
    "start": "2766050",
    "end": "2774150"
  },
  {
    "text": "that's it so thanks for coming [Applause]",
    "start": "2774150",
    "end": "2784389"
  }
]